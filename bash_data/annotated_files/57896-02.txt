42611: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42611:  * ***** BEGIN LICENSE BLOCK *****
42611:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42611:  *
42611:  * The contents of this file are subject to the Mozilla Public License Version
42611:  * 1.1 (the "License"); you may not use this file except in compliance with
42611:  * the License. You may obtain a copy of the License at
42611:  * http://www.mozilla.org/MPL/
42611:  *
42611:  * Software distributed under the License is distributed on an "AS IS" basis,
42611:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42611:  * for the specific language governing rights and limitations under the
42611:  * License.
42611:  *
42611:  * The Original Code is Mozilla Corporation code.
42611:  *
42611:  * The Initial Developer of the Original Code is Mozilla Foundation.
42611:  * Portions created by the Initial Developer are Copyright (C) 2009
42611:  * the Initial Developer. All Rights Reserved.
42611:  *
42611:  * Contributor(s):
42611:  *   Bas Schouten <bschouten@mozilla.org>
42611:  *
42611:  * Alternatively, the contents of this file may be used under the terms of
42611:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42611:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42611:  * in which case the provisions of the GPL or the LGPL are applicable instead
42611:  * of those above. If you wish to allow use of your version of this file only
42611:  * under the terms of either the GPL or the LGPL, and not to allow others to
42611:  * use your version of this file under the terms of the MPL, indicate your
42611:  * decision by deleting the provisions above and replace them with the notice
42611:  * and other provisions required by the GPL or the LGPL. If you do not delete
42611:  * the provisions above, a recipient may use your version of this file under
42611:  * the terms of any one of the MPL, the GPL or the LGPL.
42611:  *
42611:  * ***** END LICENSE BLOCK ***** */
42611: 
42611: #ifndef GFX_IMAGELAYERD3D9_H
42611: #define GFX_IMAGELAYERD3D9_H
42611: 
42611: #include "LayerManagerD3D9.h"
42611: #include "ImageLayers.h"
51965: #include "yuv_convert.h"
42611: #include "mozilla/Mutex.h"
42611: 
42611: namespace mozilla {
42611: namespace layers {
42611: 
42611: class THEBES_API ImageContainerD3D9 : public ImageContainer
42611: {
42611: public:
42611:   ImageContainerD3D9(LayerManagerD3D9 *aManager);
42611:   virtual ~ImageContainerD3D9() {}
42611: 
42611:   virtual already_AddRefed<Image> CreateImage(const Image::Format* aFormats,
42611:                                               PRUint32 aNumFormats);
42611: 
42611:   virtual void SetCurrentImage(Image* aImage);
42611: 
42611:   virtual already_AddRefed<Image> GetCurrentImage();
42611: 
42611:   virtual already_AddRefed<gfxASurface> GetCurrentAsSurface(gfxIntSize* aSize);
42611: 
42611:   virtual gfxIntSize GetCurrentSize();
42611: 
49073:   virtual PRBool SetLayerManager(LayerManager *aManager);
49073: 
42611: private:
42611:   typedef mozilla::Mutex Mutex;
42611: 
42611:   nsRefPtr<Image> mActiveImage;
42611: 
42611:   Mutex mActiveImageLock;
42611: };
42611: 
42611: class THEBES_API ImageLayerD3D9 : public ImageLayer,
42611:                                   public LayerD3D9
42611: {
42611: public:
42611:   ImageLayerD3D9(LayerManagerD3D9 *aManager)
42611:     : ImageLayer(aManager, NULL)
42611:     , LayerD3D9(aManager)
42611:   {
42611:     mImplData = static_cast<LayerD3D9*>(this);
42611:   }
42611: 
42611:   // LayerD3D9 Implementation
42611:   virtual Layer* GetLayer();
42611: 
57097:   virtual void RenderLayer();
42611: };
42611: 
42611: class THEBES_API ImageD3D9
42611: {
42611: public:
42611:   virtual already_AddRefed<gfxASurface> GetAsSurface() = 0;
42611: };
42611: 
42611: class THEBES_API PlanarYCbCrImageD3D9 : public PlanarYCbCrImage,
42611:                                         public ImageD3D9
42611: {
42611: public:
42611:   PlanarYCbCrImageD3D9(LayerManagerD3D9 *aManager);
42793:   ~PlanarYCbCrImageD3D9() {}
42611: 
42611:   virtual void SetData(const Data &aData);
42611: 
42611:   /*
42611:    * Upload the data from out mData into our textures. For now we use this to
42611:    * make sure the textures are created and filled on the main thread.
42611:    */
42611:   void AllocateTextures();
42611:   /*
42611:    * XXX
42611:    * Free the textures, we call this from the main thread when we're done
42611:    * drawing this frame. We cannot free this from the constructor since it may
42611:    * be destroyed off the main-thread and might not be able to properly clean
42611:    * up its textures
42611:    */
42611:   void FreeTextures();
42611:   PRBool HasData() { return mHasData; }
42611: 
42611:   virtual already_AddRefed<gfxASurface> GetAsSurface();
42611: 
42611:   nsAutoArrayPtr<PRUint8> mBuffer;
42611:   LayerManagerD3D9 *mManager;
42611:   Data mData;
42611:   gfxIntSize mSize;
42611:   nsRefPtr<IDirect3DTexture9> mYTexture;
42611:   nsRefPtr<IDirect3DTexture9> mCrTexture;
42611:   nsRefPtr<IDirect3DTexture9> mCbTexture;
42611:   PRPackedBool mHasData;
51961:   gfx::YUVType mType; 
42611: };
42611: 
42611: 
42611: class THEBES_API CairoImageD3D9 : public CairoImage,
42611:                                   public ImageD3D9
42611: {
42611: public:
42611:   CairoImageD3D9(LayerManagerD3D9 *aManager)
42611:     : CairoImage(static_cast<ImageD3D9*>(this))
42611:     , mManager(aManager)
42611:   { }
42611:   ~CairoImageD3D9();
42611: 
42611:   virtual void SetData(const Data &aData);
42611: 
42611:   virtual already_AddRefed<gfxASurface> GetAsSurface();
42611: 
57896:   /**
57896:    * Uploading a texture may fail if the screen is locked. If this happens,
57896:    * we need to save the backing surface and retry when we are asked to paint.
57896:    */
57896:   virtual IDirect3DTexture9* GetOrCreateTexture();
57896:   const gfxIntSize& GetSize() { return mSize; }
57896: 
57896: private:
57896:   gfxIntSize mSize;
57896:   nsRefPtr<gfxASurface> mCachedSurface;
42611:   nsRefPtr<IDirect3DTexture9> mTexture;
42611:   LayerManagerD3D9 *mManager;
42611: };
42611: 
42611: } /* layers */
42611: } /* mozilla */
42611: #endif /* GFX_IMAGELAYERD3D9_H */
