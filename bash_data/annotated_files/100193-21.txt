 91045: /* Any copyright is dedicated to the Public Domain.
 91045:    http://creativecommons.org/publicdomain/zero/1.0/ */
 91045: "use strict";
 91045: 
100193: let nodeHighlighted = false;
 91045: let presenter;
 91045: 
 91045: function test() {
 91045:   if (!isTiltEnabled()) {
 91045:     info("Skipping highlight test because Tilt isn't enabled.");
 91045:     return;
 91045:   }
 91045:   if (!isWebGLSupported()) {
 91045:     info("Skipping highlight test because WebGL isn't supported.");
 91045:     return;
 91045:   }
 91045: 
 91045:   waitForExplicitFinish();
 91045: 
 91045:   createTab(function() {
 91045:     createTilt({
 91045:       onTiltOpen: function(instance)
 91045:       {
 91045:         presenter = instance.presenter;
 91045:         Services.obs.addObserver(whenHighlighting, HIGHLIGHTING, false);
 91045: 
 91045:         presenter._onInitializationFinished = function() {
 91045:           let contentDocument = presenter.contentWindow.document;
 91045:           let div = contentDocument.getElementById("far-far-away");
 91045: 
100193:           nodeHighlighted = true;
 91045:           presenter.highlightNode(div);
 91045:         };
 91045:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 91045:     });
 91045:   });
 91045: }
 91045: 
 91045: function whenHighlighting() {
 91045:   ok(presenter._currentSelection > 0,
 91045:     "Highlighting a node didn't work properly.");
 91045:   ok(!presenter._highlight.disabled,
 91045:     "After highlighting a node, it should be highlighted. D'oh.");
 91045:   ok(!presenter.controller.arcball._resetInProgress,
 91045:     "Highlighting a node that's not already visible shouldn't trigger a reset " +
 91045:     "without this being explicitly requested!");
 91045: 
 91045:   EventUtils.sendKey("F");
 91045:   executeSoon(whenBringingIntoView);
 91045: }
 91045: 
 91045: function whenBringingIntoView() {
 91045:   ok(presenter._currentSelection > 0,
 91045:     "The node should still be selected.");
 91045:   ok(!presenter._highlight.disabled,
 91045:     "The node should still be highlighted");
 91045:   ok(presenter.controller.arcball._resetInProgress,
 91045:     "Highlighting a node that's not already visible should trigger a reset " +
 91045:     "when this is being explicitly requested!");
 91045: 
 91045:   executeSoon(function() {
100193:     Services.obs.removeObserver(whenHighlighting, HIGHLIGHTING);
 91045:     Services.obs.addObserver(cleanup, DESTROYED, false);
 91045:     InspectorUI.closeInspectorUI();
 91045:   });
 91045: }
 91045: 
 91045: function cleanup() {
100193:   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
 91045:   gBrowser.removeCurrentTab();
 91045:   finish();
 91045: }
