114937: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
114937: /* vim:set ts=2 sw=2 sts=2 et cindent: */
114937: /* This Source Code Form is subject to the terms of the Mozilla Public
114937:  * License, v. 2.0. If a copy of the MPL was not distributed with this
114937:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
114937: 
114937: #include "AudioBuffer.h"
114937: #include "mozilla/dom/AudioBufferBinding.h"
114937: #include "nsContentUtils.h"
114937: #include "AudioContext.h"
114937: #include "jsfriendapi.h"
114937: #include "mozilla/ErrorResult.h"
114937: 
114937: namespace mozilla {
114937: namespace dom {
114937: 
114937: NS_IMPL_CYCLE_COLLECTION_CLASS(AudioBuffer)
114937: 
114937: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(AudioBuffer)
114937:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mContext)
114937:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY(mChannels)
114937:   NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
114937: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
114937: 
114937: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(AudioBuffer)
118870:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NATIVE_MEMBER(mContext, AudioContext)
114937:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS
114937: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
114937: 
114937: NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN(AudioBuffer)
114937:   NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER
114937:   for (uint32_t i = 0; i < tmp->mChannels.Length(); ++i) {
114937:     NS_IMPL_CYCLE_COLLECTION_TRACE_JS_MEMBER_CALLBACK(mChannels[i])
114937:   }
114937: NS_IMPL_CYCLE_COLLECTION_TRACE_END
114937: 
114937: NS_IMPL_CYCLE_COLLECTING_ADDREF(AudioBuffer)
114937: NS_IMPL_CYCLE_COLLECTING_RELEASE(AudioBuffer)
114937: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(AudioBuffer)
114937:   NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
114937:   NS_INTERFACE_MAP_ENTRY(nsISupports)
114937: NS_INTERFACE_MAP_END
114937: 
114937: AudioBuffer::AudioBuffer(AudioContext* aContext, uint32_t aLength,
114937:                          uint32_t aSampleRate)
114937:   : mContext(aContext),
114937:     mLength(aLength),
114937:     mSampleRate(aSampleRate)
114937: {
114937:   SetIsDOMBinding();
120988: 
120988:   NS_HOLD_JS_OBJECTS(this, AudioBuffer);
114937: }
114937: 
114937: AudioBuffer::~AudioBuffer()
114937: {
114937:   NS_DROP_JS_OBJECTS(this, AudioBuffer);
114937: }
114937: 
114937: bool
114937: AudioBuffer::InitializeBuffers(uint32_t aNumberOfChannels, JSContext* aJSContext)
114937: {
114937:   if (!mChannels.SetCapacity(aNumberOfChannels)) {
114937:     return false;
114937:   }
114937:   for (uint32_t i = 0; i < aNumberOfChannels; ++i) {
114937:     JSObject* array = JS_NewFloat32Array(aJSContext, mLength);
114937:     if (!array) {
114937:       return false;
114937:     }
114937:     mChannels.AppendElement(array);
114937:   }
114937: 
114937:   return true;
114937: }
114937: 
114937: JSObject*
114937: AudioBuffer::WrapObject(JSContext* aCx, JSObject* aScope,
114937:                         bool* aTriedToWrap)
114937: {
114937:   return AudioBufferBinding::Wrap(aCx, aScope, this, aTriedToWrap);
114937: }
114937: 
114937: JSObject*
114937: AudioBuffer::GetChannelData(JSContext* aJSContext, uint32_t aChannel,
114937:                             ErrorResult& aRv) const
114937: {
114937:   if (aChannel >= mChannels.Length()) {
114937:     aRv.Throw(NS_ERROR_DOM_SYNTAX_ERR);
114937:     return nullptr;
114937:   }
114937:   return mChannels[aChannel];
114937: }
114937: 
114937: }
114937: }
114937: 
