 43264: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 43264:  * vim: set ts=4 sw=4 et tw=99:
 43264:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 43264: 
 43264: #include "jsapi.h"
 43264: #include "jscntxt.h"
 97569: #include "jscompartment.h"
 76224: #include "jsexn.h"
 68933: #include "jsgc.h"
 43264: #include "jsiter.h"
 43264: #include "jsnum.h"
 43264: #include "jswrapper.h"
 97569: 
 53391: #ifdef JS_METHODJIT
 53391: # include "assembler/jit/ExecutableAllocator.h"
 53391: #endif
 97569: #include "gc/Marking.h"
 97569: #include "methodjit/PolyIC.h"
 97569: #include "methodjit/MonoIC.h"
 43264: 
 89376: #include "jsobjinlines.h"
 79981: 
 89376: #include "vm/RegExpObject-inl.h"
 43264: 
 43264: using namespace js;
 54707: using namespace js::gc;
 43264: 
 90605: namespace js {
 90605: int sWrapperFamily;
 90605: }
 55599: 
 55599: void *
100027: DirectWrapper::getWrapperFamily()
 55599: {
 55599:     return &sWrapperFamily;
 55599: }
 47516: 
103121: JSObject *
103121: Wrapper::New(JSContext *cx, JSObject *obj, JSObject *proto, JSObject *parent,
103121:              Wrapper *handler)
103121: {
103121:     JS_ASSERT(parent);
103121: 
103121: #if JS_HAS_XML_SUPPORT
103121:     if (obj->isXML()) {
103121:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
103121:                              JSMSG_CANT_WRAP_XML_OBJECT);
103121:         return NULL;
103121:     }
103121: #endif
103121:     return NewProxyObject(cx, handler->toBaseProxyHandler(), ObjectValue(*obj),
103121:                           proto, parent, obj->isCallable() ? obj : NULL, NULL);
103121: }
103121: 
103121: Wrapper *
103121: Wrapper::wrapperHandler(const JSObject *wrapper)
103121: {
103121:     JS_ASSERT(wrapper->isWrapper());
103121:     return GetProxyHandler(wrapper)->toWrapper();
103121: }
103121: 
103121: JSObject *
103121: Wrapper::wrappedObject(const JSObject *wrapper)
103121: {
103121:     JS_ASSERT(wrapper->isWrapper());
103121:     return GetProxyTargetObject(wrapper);
103121: }
103121: 
103121: Wrapper::Wrapper(unsigned flags) : mFlags(flags)
103121: {
103121: }
103121: 
103121: bool
103121: Wrapper::enter(JSContext *cx, JSObject *wrapper, jsid id, Action act, bool *bp)
103121: {
103121:     *bp = true;
103121:     return true;
103121: }
103121: 
 79734: JS_FRIEND_API(JSObject *)
 91237: js::UnwrapObject(JSObject *wrapped, bool stopAtOuter, unsigned *flagsp)
 75451: {
 91237:     unsigned flags = 0;
 98428:     while (wrapped->isWrapper() &&
 98428:            !JS_UNLIKELY(stopAtOuter && wrapped->getClass()->ext.innerObject)) {
103121:         flags |= Wrapper::wrapperHandler(wrapped)->flags();
 79734:         wrapped = GetProxyPrivate(wrapped).toObjectOrNull();
 47574:     }
 47574:     if (flagsp)
 47574:         *flagsp = flags;
 47516:     return wrapped;
 47516: }
 47516: 
 93956: JS_FRIEND_API(JSObject *)
 93956: js::UnwrapObjectChecked(JSContext *cx, JSObject *obj)
 93956: {
 98428:     while (obj->isWrapper() &&
 98428:            !JS_UNLIKELY(!!obj->getClass()->ext.innerObject)) {
 93956:         JSObject *wrapper = obj;
103121:         Wrapper *handler = Wrapper::wrapperHandler(obj);
 93956:         bool rvOnFailure;
 93956:         if (!handler->enter(cx, wrapper, JSID_VOID,
 93956:                             Wrapper::PUNCTURE, &rvOnFailure))
 93956:             return rvOnFailure ? obj : NULL;
 93956:         obj = Wrapper::wrappedObject(obj);
 93956:         JS_ASSERT(obj);
 93956:     }
 93956:     return obj;
 93956: }
 93956: 
 79734: bool
 79734: js::IsCrossCompartmentWrapper(const JSObject *wrapper)
 79734: {
 79734:     return wrapper->isWrapper() &&
 79734:            !!(Wrapper::wrapperHandler(wrapper)->flags() & Wrapper::CROSS_COMPARTMENT);
 79734: }
 79734: 
103938: IndirectWrapper::IndirectWrapper(unsigned flags) : Wrapper(flags),
103233:     IndirectProxyHandler(&sWrapperFamily)
 43264: {
 43264: }
 43264: 
 55587: #define CHECKED(op, act)                                                     \
 47574:     JS_BEGIN_MACRO                                                           \
 61693:         bool status;                                                         \
 61693:         if (!enter(cx, wrapper, id, act, &status))                           \
 61693:             return status;                                                   \
104245:         return (op);                                                         \
 47574:     JS_END_MACRO
 47574: 
 55587: #define SET(action) CHECKED(action, SET)
 55587: #define GET(action) CHECKED(action, GET)
 47574: 
 47565: bool
103938: IndirectWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper,
103233:                                        jsid id, bool set,
 79386:                                        PropertyDescriptor *desc)
 47565: {
 61693:     desc->obj = NULL; // default result if we refuse to perform this action
 98728:     CHECKED(IndirectProxyHandler::getPropertyDescriptor(cx, wrapper, id, set, desc),
 78614:             set ? SET : GET);
 47565: }
 47562: 
 43264: bool
103938: IndirectWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper,
103233:                                           jsid id, bool set,
 48470:                                           PropertyDescriptor *desc)
 43264: {
 61693:     desc->obj = NULL; // default result if we refuse to perform this action
 98728:     CHECKED(IndirectProxyHandler::getOwnPropertyDescriptor(cx, wrapper, id, set, desc), GET);
 43264: }
 43264: 
 43264: bool
103938: IndirectWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
103233:                                 PropertyDescriptor *desc)
 47574: {
 98728:     SET(IndirectProxyHandler::defineProperty(cx, wrapper, id, desc));
 47574: }
 47574: 
 47574: bool
103938: IndirectWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper,
103233:                                      AutoIdVector &props)
 47574: {
 61693:     // if we refuse to perform this action, props remains empty
 48470:     jsid id = JSID_VOID;
 98728:     GET(IndirectProxyHandler::getOwnPropertyNames(cx, wrapper, props));
 47574: }
 47574: 
 47574: bool
103938: IndirectWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47574: {
 61693:     *bp = true; // default result if we refuse to perform this action
 98728:     SET(IndirectProxyHandler::delete_(cx, wrapper, id, bp));
 47574: }
 47574: 
 47574: bool
103938: IndirectWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 47574: {
 61693:     // if we refuse to perform this action, props remains empty
 48470:     static jsid id = JSID_VOID;
 98728:     GET(IndirectProxyHandler::enumerate(cx, wrapper, props));
 47574: }
 47574: 
103233: DirectWrapper::DirectWrapper(unsigned flags) : Wrapper(flags),
103233:         DirectProxyHandler(&sWrapperFamily)
 43264: {
103233: }
103233: 
103233: DirectWrapper::~DirectWrapper()
103233: {
103233: }
103233: 
103233: bool
103233: DirectWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper,
103233:                                      jsid id, bool set,
103233:                                      PropertyDescriptor *desc)
103233: {
103233:     desc->obj = NULL; // default result if we refuse to perform this action
103233:     CHECKED(DirectProxyHandler::getPropertyDescriptor(cx, wrapper, id, set, desc),
103233:             set ? SET : GET);
103233: }
103233: 
103233: bool
103233: DirectWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper,
103233:                                         jsid id, bool set,
103233:                                         PropertyDescriptor *desc)
103233: {
103233:     desc->obj = NULL; // default result if we refuse to perform this action
103233:     CHECKED(DirectProxyHandler::getOwnPropertyDescriptor(cx, wrapper, id, set, desc), GET);
103233: }
103233: 
103233: bool
103233: DirectWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
103233:                               PropertyDescriptor *desc)
103233: {
103233:     SET(DirectProxyHandler::defineProperty(cx, wrapper, id, desc));
103233: }
103233: 
103233: bool
103233: DirectWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper,
103233:                                    AutoIdVector &props)
103233: {
103233:     // if we refuse to perform this action, props remains empty
103233:     jsid id = JSID_VOID;
103233:     GET(DirectProxyHandler::getOwnPropertyNames(cx, wrapper, props));
103233: }
103233: 
103233: bool
103233: DirectWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
103233: {
103233:     *bp = true; // default result if we refuse to perform this action
103233:     SET(DirectProxyHandler::delete_(cx, wrapper, id, bp));
103233: }
103233: 
103233: bool
103233: DirectWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
103233: {
103233:     // if we refuse to perform this action, props remains empty
103233:     static jsid id = JSID_VOID;
103233:     GET(DirectProxyHandler::enumerate(cx, wrapper, props));
 43264: }
 43264: 
 43264: bool
100027: DirectWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47574: {
 61693:     *bp = false; // default result if we refuse to perform this action
103233:     GET(DirectProxyHandler::has(cx, wrapper, id, bp));
 47574: }
 47574: 
 47574: bool
100027: DirectWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47562: {
 61693:     *bp = false; // default result if we refuse to perform this action
103233:     GET(DirectProxyHandler::hasOwn(cx, wrapper, id, bp));
 47574: }
 47574: 
 47574: bool
103233: DirectWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
 47574: {
 61693:     vp->setUndefined(); // default result if we refuse to perform this action
103233:     GET(DirectProxyHandler::get(cx, wrapper, receiver, id, vp));
 47574: }
 47574: 
 47574: bool
103233: DirectWrapper::set(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, bool strict,
 62395:                    Value *vp)
 47574: {
103233:     SET(DirectProxyHandler::set(cx, wrapper, receiver, id, strict, vp));
 47574: }
 47574: 
 47574: bool
100028: DirectWrapper::keys(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 47574: {
 61693:     // if we refuse to perform this action, props remains empty
 48470:     const jsid id = JSID_VOID;
103233:     GET(DirectProxyHandler::keys(cx, wrapper, props));
 47574: }
 47574: 
 47574: bool
100027: DirectWrapper::iterate(JSContext *cx, JSObject *wrapper, unsigned flags, Value *vp)
 47574: {
 61693:     vp->setUndefined(); // default result if we refuse to perform this action
 48470:     const jsid id = JSID_VOID;
103233:     GET(DirectProxyHandler::iterate(cx, wrapper, flags, vp));
 47574: }
 47574: 
 47574: bool
100027: DirectWrapper::call(JSContext *cx, JSObject *wrapper, unsigned argc, Value *vp)
 47574: {
 61693:     vp->setUndefined(); // default result if we refuse to perform this action
 48470:     const jsid id = JSID_VOID;
 98728:     CHECKED(IndirectProxyHandler::call(cx, wrapper, argc, vp), CALL);
 47574: }
 47574: 
 47574: bool
100027: DirectWrapper::construct(JSContext *cx, JSObject *wrapper, unsigned argc, Value *argv, Value *vp)
 47574: {
 61693:     vp->setUndefined(); // default result if we refuse to perform this action
 48470:     const jsid id = JSID_VOID;
 99916:     CHECKED(IndirectProxyHandler::construct(cx, wrapper, argc, argv, vp), CALL);
 47574: }
 47574: 
 55650: bool
100027: DirectWrapper::nativeCall(JSContext *cx, JSObject *wrapper, Class *clasp, Native native, CallArgs args)
 80203: {
 80203:     const jsid id = JSID_VOID;
 98728:     CHECKED(IndirectProxyHandler::nativeCall(cx, wrapper, clasp, native, args), CALL);
 80203: }
 80203: 
 80203: bool
100027: DirectWrapper::hasInstance(JSContext *cx, JSObject *wrapper, const Value *vp, bool *bp)
 55650: {
 70267:     *bp = false; // default result if we refuse to perform this action
 55650:     const jsid id = JSID_VOID;
 98728:     GET(IndirectProxyHandler::hasInstance(cx, wrapper, vp, bp));
 79390: }
 79390: 
 47574: JSString *
100027: DirectWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
 47574: {
 61693:     bool status;
 61693:     if (!enter(cx, wrapper, JSID_VOID, GET, &status)) {
 61693:         if (status) {
 61693:             // Perform some default behavior that doesn't leak any information.
 61693:             return JS_NewStringCopyZ(cx, "[object Object]");
 61693:         }
 47574:         return NULL;
 61693:     }
 98728:     JSString *str = IndirectProxyHandler::obj_toString(cx, wrapper);
 47574:     return str;
 47574: }
 47574: 
 47574: JSString *
100027: DirectWrapper::fun_toString(JSContext *cx, JSObject *wrapper, unsigned indent)
 47574: {
 61693:     bool status;
 61693:     if (!enter(cx, wrapper, JSID_VOID, GET, &status)) {
 61693:         if (status) {
 61693:             // Perform some default behavior that doesn't leak any information.
 61693:             if (wrapper->isCallable())
 61693:                 return JS_NewStringCopyZ(cx, "function () {\n    [native code]\n}");
103274:             ReportIsNotFunction(cx, ObjectValue(*wrapper));
 47574:             return NULL;
 61693:         }
 61693:         return NULL;
 61693:     }
 98728:     JSString *str = IndirectProxyHandler::fun_toString(cx, wrapper, indent);
 47574:     return str;
 47574: }
 47574: 
100027: DirectWrapper DirectWrapper::singleton((unsigned)0);
 47498: 
 47516: /* Compartments. */
 47498: 
 47516: namespace js {
 47498: 
 47516: extern JSObject *
 55580: TransparentObjectWrapper(JSContext *cx, JSObject *obj, JSObject *wrappedProto, JSObject *parent,
 91237:                          unsigned flags)
 47498: {
 54404:     // Allow wrapping outer window proxies.
 54404:     JS_ASSERT(!obj->isWrapper() || obj->getClass()->ext.innerObject);
 79386:     return Wrapper::New(cx, obj, wrappedProto, parent, &CrossCompartmentWrapper::singleton);
 47498: }
 47498: 
 47498: }
 47498: 
 70264: ForceFrame::ForceFrame(JSContext *cx, JSObject *target)
 70264:     : context(cx),
 71704:       target(target),
 71704:       frame(NULL)
 70264: {
 70264: }
 70264: 
 70461: ForceFrame::~ForceFrame()
 70461: {
 71704:     context->delete_(frame);
 70461: }
 70461: 
 70264: bool
 70264: ForceFrame::enter()
 70264: {
 71704:     frame = context->new_<DummyFrameGuard>();
 71704:     if (!frame)
 71704:        return false;
 70264: 
 70264:     JS_ASSERT(context->compartment == target->compartment());
 76885:     JSCompartment *destination = context->compartment;
 70264: 
 86483:     JSObject &scopeChain = target->global();
 86483:     JS_ASSERT(scopeChain.isNative());
 70264: 
 86483:     return context->stack.pushDummyFrame(context, destination, scopeChain, frame);
 70264: }
 70264: 
 47498: AutoCompartment::AutoCompartment(JSContext *cx, JSObject *target)
 47498:     : context(cx),
 47498:       origin(cx->compartment),
 47498:       target(target),
 79734:       destination(target->compartment()),
 48530:       entered(false)
 47498: {
 47498: }
 43264: 
 47498: AutoCompartment::~AutoCompartment()
 43264: {
 48530:     if (entered)
 47498:         leave();
 47498: }
 47498: 
 47498: bool
 47498: AutoCompartment::enter()
 47498: {
 48530:     JS_ASSERT(!entered);
 48530:     if (origin != destination) {
 86483:         JSObject &scopeChain = target->global();
 86483:         JS_ASSERT(scopeChain.isNative());
 60245: 
 47498:         frame.construct();
 86483:         if (!context->stack.pushDummyFrame(context, destination, scopeChain, &frame.ref()))
 48530:             return false;
 60798: 
 60798:         if (context->isExceptionPending())
 60798:             context->wrapPendingException();
 48530:     }
 48530:     entered = true;
 48530:     return true;
 47498: }
 47498: 
 47498: void
 47498: AutoCompartment::leave()
 47498: {
 48530:     JS_ASSERT(entered);
 48530:     if (origin != destination) {
 47498:         frame.destroy();
 55607:         context->resetCompartment();
 47498:     }
 48530:     entered = false;
 48530: }
 47498: 
 76224: ErrorCopier::~ErrorCopier()
 76224: {
 76224:     JSContext *cx = ac.context;
 76224:     if (cx->compartment == ac.destination &&
 76224:         ac.origin != ac.destination &&
 76224:         cx->isExceptionPending())
 76224:     {
 76224:         Value exc = cx->getPendingException();
 76810:         if (exc.isObject() && exc.toObject().isError() && exc.toObject().getPrivate()) {
 76224:             cx->clearPendingException();
 76224:             ac.leave();
102586:             Rooted<JSObject*> errObj(cx, &exc.toObject());
102586:             JSObject *copyobj = js_CopyErrorObject(cx, errObj, scope);
 76224:             if (copyobj)
 76224:                 cx->setPendingException(ObjectValue(*copyobj));
 76224:         }
 76224:     }
 76224: }
 76224: 
 47498: /* Cross compartment wrappers. */
 47498: 
 91237: CrossCompartmentWrapper::CrossCompartmentWrapper(unsigned flags)
100027:   : DirectWrapper(CROSS_COMPARTMENT | flags)
 47498: {
 47498: }
 47498: 
 79386: CrossCompartmentWrapper::~CrossCompartmentWrapper()
 47498: {
 47498: }
 47498: 
 47574: #define PIERCE(cx, wrapper, mode, pre, op, post)            \
 47516:     JS_BEGIN_MACRO                                          \
 47574:         AutoCompartment call(cx, wrappedObject(wrapper));   \
 47574:         if (!call.enter())                                  \
 47516:             return false;                                   \
 47574:         bool ok = (pre) && (op);                            \
 47516:         call.leave();                                       \
 47574:         return ok && (post);                                \
 47516:     JS_END_MACRO
 47516: 
 47516: #define NOTHING (true)
 47516: 
 47498: bool
 79386: CrossCompartmentWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
 55592:                                                bool set, PropertyDescriptor *desc)
 47498: {
 55592:     PIERCE(cx, wrapper, set ? SET : GET,
 47498:            call.destination->wrapId(cx, &id),
100027:            DirectWrapper::getPropertyDescriptor(cx, wrapper, id, set, desc),
102525:            cx->compartment->wrap(cx, desc));
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
 55592:                                                   bool set, PropertyDescriptor *desc)
 47498: {
 55592:     PIERCE(cx, wrapper, set ? SET : GET,
 47498:            call.destination->wrapId(cx, &id),
100027:            DirectWrapper::getOwnPropertyDescriptor(cx, wrapper, id, set, desc),
102525:            cx->compartment->wrap(cx, desc));
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id, PropertyDescriptor *desc)
 47498: {
 48470:     AutoPropertyDescriptorRooter desc2(cx, desc);
 47574:     PIERCE(cx, wrapper, SET,
 47498:            call.destination->wrapId(cx, &id) && call.destination->wrap(cx, &desc2),
100027:            DirectWrapper::defineProperty(cx, wrapper, id, &desc2),
 47498:            NOTHING);
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            NOTHING,
100027:            DirectWrapper::getOwnPropertyNames(cx, wrapper, props),
102525:            cx->compartment->wrap(cx, props));
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47498: {
 47574:     PIERCE(cx, wrapper, SET,
 47498:            call.destination->wrapId(cx, &id),
100027:            DirectWrapper::delete_(cx, wrapper, id, bp),
 47498:            NOTHING);
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            NOTHING,
100027:            DirectWrapper::enumerate(cx, wrapper, props),
102525:            cx->compartment->wrap(cx, props));
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            call.destination->wrapId(cx, &id),
100027:            DirectWrapper::has(cx, wrapper, id, bp),
 47498:            NOTHING);
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            call.destination->wrapId(cx, &id),
100027:            DirectWrapper::hasOwn(cx, wrapper, id, bp),
 47498:            NOTHING);
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            call.destination->wrap(cx, &receiver) && call.destination->wrapId(cx, &id),
100027:            DirectWrapper::get(cx, wrapper, receiver, id, vp),
102525:            cx->compartment->wrap(cx, vp));
 47498: }
 47498: 
 47498: bool
 97353: CrossCompartmentWrapper::set(JSContext *cx, JSObject *wrapper_, JSObject *receiver_, jsid id_,
 62395:                              bool strict, Value *vp)
 47498: {
 99421:     RootedObject wrapper(cx, wrapper_), receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 99421:     RootedValue value(cx, *vp);
 47574:     PIERCE(cx, wrapper, SET,
 97353:            call.destination->wrap(cx, receiver.address()) &&
 97353:            call.destination->wrapId(cx, id.address()) &&
 97353:            call.destination->wrap(cx, value.address()),
100027:            DirectWrapper::set(cx, wrapper, receiver, id, strict, value.address()),
 47498:            NOTHING);
 47498: }
 47498: 
 47498: bool
 79386: CrossCompartmentWrapper::keys(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            NOTHING,
100027:            DirectWrapper::keys(cx, wrapper, props),
102525:            cx->compartment->wrap(cx, props));
 47525: }
 47525: 
 47525: /*
 47525:  * We can reify non-escaping iterator objects instead of having to wrap them. This
 47525:  * allows fast iteration over objects across a compartment boundary.
 47525:  */
 47525: static bool
 48470: CanReify(Value *vp)
 47525: {
 48470:     JSObject *obj;
 48470:     return vp->isObject() &&
103627:            (obj = &vp->toObject())->getClass() == &IteratorClass &&
103627:            (obj->getNativeIterator()->flags & JSITER_ENUMERATE);
 47525: }
 47525: 
 59240: struct AutoCloseIterator
 59240: {
 59240:     AutoCloseIterator(JSContext *cx, JSObject *obj) : cx(cx), obj(obj) {}
 59240: 
 91160:     ~AutoCloseIterator() { if (obj) CloseIterator(cx, obj); }
 59240: 
 59240:     void clear() { obj = NULL; }
 59240: 
 59240:   private:
 59240:     JSContext *cx;
 59240:     JSObject *obj;
 59240: };
 59240: 
 47525: static bool
 48470: Reify(JSContext *cx, JSCompartment *origin, Value *vp)
 47525: {
103627:     JSObject *iterObj = &vp->toObject();
 47525:     NativeIterator *ni = iterObj->getNativeIterator();
 48470: 
 59240:     AutoCloseIterator close(cx, iterObj);
 59240: 
 48470:     /* Wrap the iteratee. */
 99421:     RootedObject obj(cx, ni->obj);
 95355:     if (!origin->wrap(cx, obj.address()))
 48470:         return false;
 48470: 
 48470:     /*
 48470:      * Wrap the elements in the iterator's snapshot.
 48470:      * N.B. the order of closing/creating iterators is important due to the
 48470:      * implicit cx->enumerators state.
 48470:      */
 48470:     size_t length = ni->numKeys();
 61055:     bool isKeyIter = ni->isKeyIter();
 48470:     AutoIdVector keys(cx);
 47525:     if (length > 0) {
 94078:         if (!keys.reserve(length))
 48470:             return false;
 48470:         for (size_t i = 0; i < length; ++i) {
 87655:             jsid id;
 87655:             if (!ValueToId(cx, StringValue(ni->begin()[i]), &id))
 87655:                 return false;
 94078:             keys.infallibleAppend(id);
 48470:             if (!origin->wrapId(cx, &keys[i]))
 48470:                 return false;
 48470:         }
 47525:     }
 47525: 
 59240:     close.clear();
 91160:     if (!CloseIterator(cx, iterObj))
 61055:         return false;
 60785: 
 61055:     if (isKeyIter)
 61055:         return VectorToKeyIterator(cx, obj, ni->flags, keys, vp);
 61055:     return VectorToValueIterator(cx, obj, ni->flags, keys, vp);
 47498: }
 47498: 
 47498: bool
 91237: CrossCompartmentWrapper::iterate(JSContext *cx, JSObject *wrapper, unsigned flags, Value *vp)
 47498: {
 47574:     PIERCE(cx, wrapper, GET,
 47498:            NOTHING,
100027:            DirectWrapper::iterate(cx, wrapper, flags, vp),
102525:            CanReify(vp) ? Reify(cx, cx->compartment, vp) : cx->compartment->wrap(cx, vp));
 47498: }
 47498: 
 47498: bool
 97353: CrossCompartmentWrapper::call(JSContext *cx, JSObject *wrapper_, unsigned argc, Value *vp)
 47498: {
 99421:     RootedObject wrapper(cx, wrapper_);
 97353: 
 47574:     AutoCompartment call(cx, wrappedObject(wrapper));
 47498:     if (!call.enter())
 47498:         return false;
 47498: 
 48470:     vp[0] = ObjectValue(*call.target);
 47498:     if (!call.destination->wrap(cx, &vp[1]))
 47498:         return false;
 48470:     Value *argv = JS_ARGV(cx, vp);
 47498:     for (size_t n = 0; n < argc; ++n) {
 47498:         if (!call.destination->wrap(cx, &argv[n]))
 47498:             return false;
 47498:     }
100027:     if (!DirectWrapper::call(cx, wrapper, argc, vp))
 47498:         return false;
 47498: 
 47498:     call.leave();
102525:     return cx->compartment->wrap(cx, vp);
 47498: }
 47498: 
 47498: bool
 97353: CrossCompartmentWrapper::construct(JSContext *cx, JSObject *wrapper_, unsigned argc, Value *argv,
 48470:                                    Value *rval)
 47498: {
 99421:     RootedObject wrapper(cx, wrapper_);
 97353: 
 47574:     AutoCompartment call(cx, wrappedObject(wrapper));
 47498:     if (!call.enter())
 47498:         return false;
 47498: 
 47498:     for (size_t n = 0; n < argc; ++n) {
 47498:         if (!call.destination->wrap(cx, &argv[n]))
 47498:             return false;
 47498:     }
100027:     if (!DirectWrapper::construct(cx, wrapper, argc, argv, rval))
 47498:         return false;
 47498: 
 47498:     call.leave();
102525:     return cx->compartment->wrap(cx, rval);
 47498: }
 47498: 
 55650: bool
 79388: CrossCompartmentWrapper::nativeCall(JSContext *cx, JSObject *wrapper, Class *clasp, Native native, CallArgs srcArgs)
 79388: {
 98671:     JS_ASSERT(srcArgs.thisv().isMagic(JS_IS_CONSTRUCTING) || &srcArgs.thisv().toObject() == wrapper);
 79779:     JS_ASSERT(!UnwrapObject(wrapper)->isCrossCompartmentWrapper());
 79388: 
 79388:     JSObject *wrapped = wrappedObject(wrapper);
 79388:     AutoCompartment call(cx, wrapped);
 79388:     if (!call.enter())
 79388:         return false;
 79388: 
 79388:     InvokeArgsGuard dstArgs;
 79388:     if (!cx->stack.pushInvokeArgs(cx, srcArgs.length(), &dstArgs))
 79388:         return false;
 79388: 
 79388:     Value *src = srcArgs.base();
 79388:     Value *srcend = srcArgs.array() + srcArgs.length();
 79388:     Value *dst = dstArgs.base();
 79388:     for (; src != srcend; ++src, ++dst) {
 79388:         *dst = *src;
 79388:         if (!call.destination->wrap(cx, dst))
 79388:             return false;
 79388:     }
 79388: 
101187:     if (!CallJSNative(cx, native, dstArgs))
 79388:         return false;
 79388: 
 90857:     srcArgs.rval() = dstArgs.rval();
 79388:     dstArgs.pop();
 79388:     call.leave();
102525:     return cx->compartment->wrap(cx, &srcArgs.rval());
 79388: }
 79388: 
 79388: bool
 79386: CrossCompartmentWrapper::hasInstance(JSContext *cx, JSObject *wrapper, const Value *vp, bool *bp)
 55650: {
 55650:     AutoCompartment call(cx, wrappedObject(wrapper));
 55650:     if (!call.enter())
 55650:         return false;
 55650: 
 55650:     Value v = *vp;
 55650:     if (!call.destination->wrap(cx, &v))
 55650:         return false;
100027:     return DirectWrapper::hasInstance(cx, wrapper, &v, bp);
 55650: }
 55650: 
 47498: JSString *
 79386: CrossCompartmentWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
 47498: {
 47574:     AutoCompartment call(cx, wrappedObject(wrapper));
 47498:     if (!call.enter())
 43264:         return NULL;
 47498: 
100027:     JSString *str = DirectWrapper::obj_toString(cx, wrapper);
 47498:     if (!str)
 43264:         return NULL;
 47498: 
 47498:     call.leave();
102525:     if (!cx->compartment->wrap(cx, &str))
 47498:         return NULL;
 47498:     return str;
 43264: }
 47498: 
 47498: JSString *
 91237: CrossCompartmentWrapper::fun_toString(JSContext *cx, JSObject *wrapper, unsigned indent)
 47498: {
 47574:     AutoCompartment call(cx, wrappedObject(wrapper));
 47498:     if (!call.enter())
 43264:         return NULL;
 47498: 
100027:     JSString *str = DirectWrapper::fun_toString(cx, wrapper, indent);
 47498:     if (!str)
 47498:         return NULL;
 47498: 
 47498:     call.leave();
102525:     if (!cx->compartment->wrap(cx, &str))
 47498:         return NULL;
 47498:     return str;
 43264: }
 47498: 
 72054: bool
 79386: CrossCompartmentWrapper::defaultValue(JSContext *cx, JSObject *wrapper, JSType hint, Value *vp)
 72054: {
 72054:     AutoCompartment call(cx, wrappedObject(wrapper));
 72054:     if (!call.enter())
 72054:         return false;
 72054: 
 98728:     if (!IndirectProxyHandler::defaultValue(cx, wrapper, hint, vp))
 72054:         return false;
 72054: 
 72054:     call.leave();
102525:     return cx->compartment->wrap(cx, vp);
 72054: }
 72054: 
 89623: bool
 89623: CrossCompartmentWrapper::iteratorNext(JSContext *cx, JSObject *wrapper, Value *vp)
 89623: {
 89623:     PIERCE(cx, wrapper, GET,
 89623:            NOTHING,
 98728:            IndirectProxyHandler::iteratorNext(cx, wrapper, vp),
102525:            cx->compartment->wrap(cx, vp));
 89623: }
 89623: 
 79386: CrossCompartmentWrapper CrossCompartmentWrapper::singleton(0u);
 80203: 
 80203: /* Security wrappers. */
 80203: 
 80203: template <class Base>
 91237: SecurityWrapper<Base>::SecurityWrapper(unsigned flags)
 80203:   : Base(flags)
 80203: {}
 80203: 
 80203: template <class Base>
 80203: bool
 80203: SecurityWrapper<Base>::nativeCall(JSContext *cx, JSObject *wrapper, Class *clasp, Native native,
 80203:                                   CallArgs args)
 80203: {
 87115:     /*
 87115:      * Let this through until compartment-per-global lets us have stronger
 87115:      * invariants wrt document.domain (bug 714547).
 87115:      */
 87115:     return Base::nativeCall(cx, wrapper, clasp, native, args);
 80203: }
 80203: 
 80203: template <class Base>
 80203: bool
 80203: SecurityWrapper<Base>::objectClassIs(JSObject *obj, ESClassValue classValue, JSContext *cx)
 80203: {
 87115:     /*
 87115:      * Let this through until compartment-per-global lets us have stronger
 87115:      * invariants wrt document.domain (bug 714547).
 87115:      */
 87115:     return Base::objectClassIs(obj, classValue, cx);
 80203: }
 80203: 
 89376: template <class Base>
 90851: bool
 90851: SecurityWrapper<Base>::regexp_toShared(JSContext *cx, JSObject *obj, RegExpGuard *g)
 89376: {
 90851:     return Base::regexp_toShared(cx, obj, g);
 89376: }
 89376: 
 89376: 
100027: template class js::SecurityWrapper<DirectWrapper>;
 80884: template class js::SecurityWrapper<CrossCompartmentWrapper>;
 96950: 
 98728: class JS_FRIEND_API(DeadObjectProxy) : public BaseProxyHandler
 96950: {
 96950:   private:
 96950:     static int sDeadObjectFamily;
 96950:   public:
 96950: 
 96950:     explicit DeadObjectProxy();
 96950: 
 96950:     /* ES5 Harmony fundamental wrapper traps. */
 96950:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id, bool set,
 96950:                                        PropertyDescriptor *desc) MOZ_OVERRIDE;
 96950:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id, bool set,
 96950:                                           PropertyDescriptor *desc) MOZ_OVERRIDE;
 96950:     virtual bool defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
 96950:                                 PropertyDescriptor *desc) MOZ_OVERRIDE;
 96950:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props) MOZ_OVERRIDE;
 96950:     virtual bool delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp) MOZ_OVERRIDE;
 96950:     virtual bool enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props) MOZ_OVERRIDE;
 96950: 
 96950:     /* Spidermonkey extensions. */
 96950:     virtual bool call(JSContext *cx, JSObject *proxy, unsigned argc, Value *vp);
 96950:     virtual bool construct(JSContext *cx, JSObject *proxy, unsigned argc, Value *argv, Value *rval);
 96950:     virtual bool nativeCall(JSContext *cx, JSObject *proxy, Class *clasp, Native native, CallArgs args);
 96950:     virtual bool hasInstance(JSContext *cx, JSObject *proxy, const Value *vp, bool *bp);
 96950:     virtual bool objectClassIs(JSObject *obj, ESClassValue classValue, JSContext *cx);
 96950:     virtual JSString *obj_toString(JSContext *cx, JSObject *proxy);
 96950:     virtual JSString *fun_toString(JSContext *cx, JSObject *proxy, unsigned indent);
 96950:     virtual bool regexp_toShared(JSContext *cx, JSObject *proxy, RegExpGuard *g);
 96950:     virtual bool defaultValue(JSContext *cx, JSObject *obj, JSType hint, Value *vp);
 96950:     virtual bool iteratorNext(JSContext *cx, JSObject *proxy, Value *vp);
 96950:     virtual bool getElementIfPresent(JSContext *cx, JSObject *obj, JSObject *receiver,
 96950:                                      uint32_t index, Value *vp, bool *present);
 96950: 
 96950: 
 96950:     static DeadObjectProxy singleton;
 96950: };
 96950: 
 96950: DeadObjectProxy::DeadObjectProxy()
 98728:   : BaseProxyHandler(&sDeadObjectFamily)
 96950: {
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::getPropertyDescriptor(JSContext *cx, JSObject *wrapper,
 96950:                                        jsid id, bool set,
 96950:                                        PropertyDescriptor *desc)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper,
 96950:                                           jsid id, bool set,
 96950:                                           PropertyDescriptor *desc)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
 96950:                                 PropertyDescriptor *desc)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::getOwnPropertyNames(JSContext *cx, JSObject *wrapper,
 96950:                                      AutoIdVector &props)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::enumerate(JSContext *cx, JSObject *wrapper,
 96950:                            AutoIdVector &props)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::call(JSContext *cx, JSObject *wrapper, unsigned argc, Value *vp)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::construct(JSContext *cx, JSObject *wrapper, unsigned argc,
 96950:                            Value *vp, Value *rval)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::nativeCall(JSContext *cx, JSObject *wrapper, Class *clasp,
 96950:                             Native native, CallArgs args)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::hasInstance(JSContext *cx, JSObject *proxy, const Value *vp,
 96950:                              bool *bp)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::objectClassIs(JSObject *obj, ESClassValue classValue, JSContext *cx)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: JSString *
 96950: DeadObjectProxy::obj_toString(JSContext *cx, JSObject *wrapper)
 96950: {
 96950:     return JS_NewStringCopyZ(cx, "[object DeadObject]");
 96950: }
 96950: 
 96950: JSString *
 96950: DeadObjectProxy::fun_toString(JSContext *cx, JSObject *proxy, unsigned indent)
 96950: {
 96950:     return NULL;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::regexp_toShared(JSContext *cx, JSObject *proxy, RegExpGuard *g)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::defaultValue(JSContext *cx, JSObject *obj, JSType hint, Value *vp)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: bool
 96950: DeadObjectProxy::getElementIfPresent(JSContext *cx, JSObject *obj, JSObject *receiver,
 96950:                                      uint32_t index, Value *vp, bool *present)
 96950: {
 96950:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_DEAD_OBJECT);
 96950:     return false;
 96950: }
 96950: 
 96950: DeadObjectProxy DeadObjectProxy::singleton;
 96950: int DeadObjectProxy::sDeadObjectFamily;
 96950: 
 99134: void
 99134: js::NukeCrossCompartmentWrapper(JSObject *wrapper)
 99134: {
 99134:     JS_ASSERT(IsCrossCompartmentWrapper(wrapper));
 99134: 
 99134:     SetProxyPrivate(wrapper, NullValue());
 99134:     SetProxyHandler(wrapper, &DeadObjectProxy::singleton);
 99134: 
 99134:     if (IsFunctionProxy(wrapper)) {
 99134:         wrapper->setReservedSlot(JSSLOT_PROXY_CALL, NullValue());
 99134:         wrapper->setReservedSlot(JSSLOT_PROXY_CONSTRUCT, NullValue());
 99134:     }
 99134: 
 99134:     wrapper->setReservedSlot(JSSLOT_PROXY_EXTRA + 0, NullValue());
 99134:     wrapper->setReservedSlot(JSSLOT_PROXY_EXTRA + 1, NullValue());
 99134: }
 99134: 
 96950: /*
 96950:  * NukeChromeCrossCompartmentWrappersForGlobal reaches into chrome and cuts
 96950:  * all of the cross-compartment wrappers that point to objects parented to
 96950:  * obj's global.  The snag here is that we need to avoid cutting wrappers that
 96950:  * point to the window object on page navigation (inner window destruction)
 96950:  * and only do that on tab close (outer window destruction).  Thus the
 96950:  * option of how to handle the global object.
 96950:  */
 96950: JS_FRIEND_API(JSBool)
 96950: js::NukeChromeCrossCompartmentWrappersForGlobal(JSContext *cx, JSObject *obj,
 96950:                                                 js::NukedGlobalHandling nukeGlobal)
 96950: {
 96950:     CHECK_REQUEST(cx);
 96950: 
 96950:     JSRuntime *rt = cx->runtime;
 96950:     JSObject *global = &obj->global();
 96950: 
 96950:     // Iterate through scopes looking for system cross compartment wrappers
 96950:     // that point to an object that shares a global with obj.
 96950: 
 96950:     for (CompartmentsIter c(rt); !c.done(); c.next()) {
 96950:         // Skip non-system compartments because this breaks the web.
 96950:         if (!js::IsSystemCompartment(c))
 96950:             continue;
 96950: 
 96950:         // Iterate the wrappers looking for anything interesting.
 96950:         WrapperMap &pmap = c->crossCompartmentWrappers;
 96950:         for (WrapperMap::Enum e(pmap); !e.empty(); e.popFront()) {
 96950:             // Some cross-compartment wrappers are for strings.  We're not
 96950:             // interested in those.
101637:             const CrossCompartmentKey &k = e.front().key;
101637:             if (k.kind != CrossCompartmentKey::ObjectWrapper)
 96950:                 continue;
 96950: 
 96950:             JSObject *wobj = &e.front().value.get().toObject();
 96950:             JSObject *wrapped = UnwrapObject(wobj, false);
 96950: 
 97460:             if (js::IsSystemCompartment(wrapped->compartment()))
 97460:                 continue; // Not interested in chrome->chrome wrappers.
 97460: 
 96950:             if (nukeGlobal == DontNukeForGlobalObject && wrapped == global)
 96950:                 continue;
 96950: 
 96950:             if (&wrapped->global() == global) {
 96950:                 // We found a wrapper to nuke.
 96950:                 e.removeFront();
 99134:                 NukeCrossCompartmentWrapper(wobj);
 96950:             }
 96950:         }
 96950:     }
 96950: 
 96950:     return JS_TRUE;
 96950: }
103587: 
103587: // Given a cross-compartment wrapper |wobj|, update it to point to
103587: // |newTarget|. This recomputes the wrapper with JS_WrapValue, and thus can be
103587: // useful even if wrapper already points to newTarget.
103587: bool
103587: js::RemapWrapper(JSContext *cx, JSObject *wobj, JSObject *newTarget)
103587: {
103587:     JS_ASSERT(IsCrossCompartmentWrapper(wobj));
104794:     JS_ASSERT(!IsCrossCompartmentWrapper(newTarget));
103587:     JSObject *origTarget = Wrapper::wrappedObject(wobj);
103587:     JS_ASSERT(origTarget);
103587:     Value origv = ObjectValue(*origTarget);
103587:     JSCompartment *wcompartment = wobj->compartment();
103587:     WrapperMap &pmap = wcompartment->crossCompartmentWrappers;
103587: 
104794:     // If we're mapping to a different target (as opposed to just recomputing
104794:     // for the same target), we must not have an existing wrapper for the new
104794:     // target, otherwise this will break.
104794:     JS_ASSERT_IF(origTarget != newTarget, !pmap.has(ObjectValue(*newTarget)));
104794: 
104794:     // The old value should still be in the cross-compartment wrapper map, and
104794:     // the lookup should return wobj.
104794:     JS_ASSERT(&pmap.lookup(origv)->value.toObject() == wobj);
104794:     pmap.remove(origv);
104794: 
103587:     // When we remove origv from the wrapper map, its wrapper, wobj, must
103587:     // immediately cease to be a cross-compartment wrapper. Neuter it.
103587:     NukeCrossCompartmentWrapper(wobj);
103587: 
103587:     // First, we wrap it in the new compartment. This will return
103587:     // a new wrapper.
103587:     AutoCompartment ac(cx, wobj);
103587:     JSObject *tobj = newTarget;
103587:     if (!ac.enter() || !wcompartment->wrap(cx, &tobj))
103587:         return false;
103587: 
103587:     // Now, because we need to maintain object identity, we do a
103587:     // brain transplant on the old object. At the same time, we
103587:     // update the entry in the compartment's wrapper map to point
103587:     // to the old wrapper.
103587:     JS_ASSERT(tobj != wobj);
103587:     if (!wobj->swap(cx, tobj))
103587:         return false;
104794: 
104794:     // Before swapping, this wrapper came out of wrap(), which enforces the
104794:     // invariant that the wrapper in the map points directly to the key.
104794:     JS_ASSERT(Wrapper::wrappedObject(wobj) == newTarget);
104794: 
103587:     pmap.put(ObjectValue(*newTarget), ObjectValue(*wobj));
103587:     return true;
103587: }
103588: 
103588: // Remap all cross-compartment wrappers pointing to |oldTarget| to point to
103588: // |newTarget|. All wrappers are recomputed.
104796: JS_FRIEND_API(bool)
103588: js::RemapAllWrappersForObject(JSContext *cx, JSObject *oldTarget,
103588:                               JSObject *newTarget)
103588: {
103588:     Value origv = ObjectValue(*oldTarget);
103588: 
103588:     AutoValueVector toTransplant(cx);
103588:     if (!toTransplant.reserve(cx->runtime->compartments.length()))
103588:         return false;
103588: 
103588:     for (CompartmentsIter c(cx->runtime); !c.done(); c.next()) {
103588:         WrapperMap &pmap = c->crossCompartmentWrappers;
103588:         if (WrapperMap::Ptr wp = pmap.lookup(origv)) {
103588:             // We found a wrapper. Remember and root it.
103588:             toTransplant.infallibleAppend(wp->value);
103588:         }
103588:     }
103588: 
103588:     for (Value *begin = toTransplant.begin(), *end = toTransplant.end();
103588:          begin != end; ++begin)
103588:     {
103588:         if (!RemapWrapper(cx, &begin->toObject(), newTarget))
103588:             return false;
103588:     }
103588: 
103588:     return true;
103588: }
103590: 
103590: JS_FRIEND_API(bool)
103590: js::RecomputeWrappers(JSContext *cx, const CompartmentFilter &sourceFilter,
103590:                       const CompartmentFilter &targetFilter)
103590: {
103590:     AutoValueVector toRecompute(cx);
103590: 
103590:     for (CompartmentsIter c(cx->runtime); !c.done(); c.next()) {
103590:         // Filter by source compartment.
103590:         if (!sourceFilter.match(c))
103590:             continue;
103590: 
103590:         // Iterate over the wrappers, filtering appropriately.
103590:         WrapperMap &pmap = c->crossCompartmentWrappers;
103590:         for (WrapperMap::Enum e(pmap); !e.empty(); e.popFront()) {
103590:             // Filter out non-objects.
103590:             const CrossCompartmentKey &k = e.front().key;
103590:             if (k.kind != CrossCompartmentKey::ObjectWrapper)
103590:                 continue;
103590: 
103590:             // Filter by target compartment.
103590:             Value wrapper = e.front().value.get();
103590:             if (!targetFilter.match(k.wrapped->compartment()))
103590:                 continue;
103590: 
103590:             // Add it to the list.
103590:             if (!toRecompute.append(wrapper))
103590:                 return false;
103590:         }
103590:     }
103590: 
103590:     // Recompute all the wrappers in the list.
103590:     for (Value *begin = toRecompute.begin(), *end = toRecompute.end(); begin != end; ++begin)
103590:     {
103590:         JSObject *wrapper = &begin->toObject();
103590:         JSObject *wrapped = Wrapper::wrappedObject(wrapper);
103590:         if (!RemapWrapper(cx, wrapper, wrapped))
103590:             return false;
103590:     }
103590: 
103590:     return true;
103590: }
