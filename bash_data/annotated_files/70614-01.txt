    1: # -*- Mode: makefile -*-
    1: #
    1: # ***** BEGIN LICENSE BLOCK *****
    1: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: #
    1: # The contents of this file are subject to the Mozilla Public License Version
    1: # 1.1 (the "License"); you may not use this file except in compliance with
    1: # the License. You may obtain a copy of the License at
    1: # http://www.mozilla.org/MPL/
    1: #
    1: # Software distributed under the License is distributed on an "AS IS" basis,
    1: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: # for the specific language governing rights and limitations under the
    1: # License.
    1: #
    1: # The Original Code is Mozilla Communicator client code, released
    1: # March 31, 1998.
    1: #
    1: # The Initial Developer of the Original Code is
    1: # Netscape Communications Corporation.
    1: # Portions created by the Initial Developer are Copyright (C) 1998
    1: # the Initial Developer. All Rights Reserved.
    1: #
    1: # Contributor(s):
    1: #
    1: # Alternatively, the contents of this file may be used under the terms of
    1: # either of the GNU General Public License Version 2 or later (the "GPL"),
    1: # or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: # in which case the provisions of the GPL or the LGPL are applicable instead
    1: # of those above. If you wish to allow use of your version of this file only
    1: # under the terms of either the GPL or the LGPL, and not to allow others to
    1: # use your version of this file under the terms of the MPL, indicate your
    1: # decision by deleting the provisions above and replace them with the notice
    1: # and other provisions required by the GPL or the LGPL. If you do not delete
    1: # the provisions above, a recipient may use your version of this file under
    1: # the terms of any one of the MPL, the GPL or the LGPL.
    1: #
    1: # ***** END LICENSE BLOCK *****
    1: 
21062: DEPTH		= .
    1: topsrcdir	= @top_srcdir@
    1: srcdir		= @srcdir@
    1: 
31192: run_for_side_effects := $(shell echo "MAKE: $(MAKE)")
23080: include $(DEPTH)/config/autoconf.mk
23080: 
21062: DIRS		= config
21062: 
23080: ifdef DEHYDRA_PATH
23080: DIRS += analysis-tests
23080: endif
    1: 
23648: ifdef JS_NATIVE_EDITLINE
23648: DIRS += editline
23648: endif
23648: 
23648: # editline needs to get built before the shell
28509: ifndef JS_DISABLE_SHELL
23648: DIRS += shell
28509: endif
23648: 
67939: # FIXME: bug 530688 covers getting these working on Android
68521: ifneq ($(OS_ARCH),ANDROID)
31916: ifdef ENABLE_TESTS
31916: DIRS += jsapi-tests
31916: endif
32345: endif
31916: 
33535: ifdef ENABLE_TESTS
33535: DIRS += tests
33535: endif
33535: 
    1: MODULE		    = js
    1: LIBRARY_NAME	    = mozjs
23648: STATIC_LIBRARY_NAME = js_static
    1: GRE_MODULE	    = 1
    1: 
21012: LIBS		= $(NSPR_LIBS) 
21012: 
21716: ifdef GNU_CXX
21716: ifdef INTEL_CXX
13249: # icc gets special optimize flags
13249: ifdef MOZ_PROFILE_GENERATE
13249: MODULE_OPTIMIZE_FLAGS = -O0
13249: else
13249: MODULE_OPTIMIZE_FLAGS = -O2 -ip
13249: endif
21716: else # not INTEL_CXX
55914: 
64354: MODULE_OPTIMIZE_FLAGS = -O3 -fstrict-aliasing -fno-stack-protector
55914: 
55914: # We normally want -fomit-frame-pointer, but we want an explicit
55914: # -fno-omit-frame-pointer if we're using a sampling profiler.
55927: ifndef MOZ_PROFILING
55914: MODULE_OPTIMIZE_FLAGS += -fomit-frame-pointer
55914: else
55914: MODULE_OPTIMIZE_FLAGS += -fno-omit-frame-pointer
55914: endif
55914: 
13249: endif
21716: else # not GNU_CXX
 9032: ifeq ($(OS_ARCH),SunOS)
13778: MODULE_OPTIMIZE_FLAGS = -xO4
 9032: endif
 9032: ifeq ($(OS_ARCH),WINNT)
21122: MODULE_OPTIMIZE_FLAGS = -O2
 9032: endif
21122: endif
21122: 
70614: ifeq ($(OS_ARCH),WINNT)
70614: NO_PROFILE_GUIDED_OPTIMIZE = 1
70614: endif
 9032: 
    1: # JavaScript must be built shared, even for static builds, as it is used by
    1: # other modules which are always built shared. Failure to do so results in
    1: # the js code getting copied into xpinstall and jsd as well as mozilla-bin,
    1: # and then the static data cells used for locking no longer work.
23648: #
23648: # In fact, we now build both a static and a shared library, as the
23648: # JS shell would like to link to the static library.
    1: 
50577: ifdef JS_SHARED_LIBRARY
    1: FORCE_SHARED_LIB = 1
50577: endif
23648: FORCE_STATIC_LIB = 1
50577: DIST_INSTALL = 1
    1: 
18400: VPATH		= $(srcdir)
18400: 
15146: CPPSRCS		= \
68895: 		jsalloc.cpp \
56602: 		jsanalyze.cpp \
15146: 		jsapi.cpp \
15146: 		jsarena.cpp \
15146: 		jsarray.cpp \
15146: 		jsatom.cpp \
15146: 		jsbool.cpp \
54863: 		jsclone.cpp \
15146: 		jscntxt.cpp \
59931: 		jscompartment.cpp \
15146: 		jsdate.cpp \
15146: 		jsdbgapi.cpp \
15146: 		jsdhash.cpp \
15146: 		jsdtoa.cpp \
15146: 		jsemit.cpp \
15146: 		jsexn.cpp \
59931: 		jsfriendapi.cpp \
15146: 		jsfun.cpp \
15146: 		jsgc.cpp \
68933: 		jsgcmark.cpp \
40876: 		jsgcchunk.cpp \
51469: 		jsgcstats.cpp \
15146: 		jshash.cpp \
15146: 		jsinterp.cpp \
15146: 		jsinvoke.cpp \
15146: 		jsiter.cpp \
15146: 		jslock.cpp \
15146: 		jslog2.cpp \
15146: 		jsmath.cpp \
42740: 		jsnativestack.cpp \
15146: 		jsnum.cpp \
15146: 		jsobj.cpp \
20092: 		json.cpp \
67934: 		jsonparser.cpp \
15146: 		jsopcode.cpp \
15146: 		jsparse.cpp \
42733: 		jsproxy.cpp \
15146: 		jsprf.cpp \
53555: 		jsprobes.cpp \
40359: 		jspropertycache.cpp \
40327: 		jspropertytree.cpp \
51110: 		jsreflect.cpp \
15146: 		jsregexp.cpp \
15146: 		jsscan.cpp \
15146: 		jsscope.cpp \
15146: 		jsscript.cpp \
15146: 		jsstr.cpp \
37042: 		jstypedarray.cpp \
15146: 		jsutil.cpp \
68911: 		jsweakmap.cpp \
43264: 		jswrapper.cpp \
15146: 		jsxdrapi.cpp \
15146: 		jsxml.cpp \
15146: 		prmjtime.cpp \
60787: 		sharkctl.cpp \
69639: 		GlobalObject.cpp \
69223: 		Stack.cpp \
    1: 		$(NULL)
    1: 
21062: INSTALLED_HEADERS = \
21063: 		js-config.h \
    1: 		jsautocfg.h \
23476: 		$(CURDIR)/jsautokw.h \
    1: 		js.msg \
68895: 		jsalloc.h \
56602: 		jsanalyze.h \
    1: 		jsapi.h \
    1: 		jsarray.h \
    1: 		jsarena.h \
    1: 		jsatom.h \
    1: 		jsbit.h \
    1: 		jsbool.h \
    1: 		jsclist.h \
54863: 		jsclone.h \
    1: 		jscntxt.h \
    1: 		jscompat.h \
    1: 		jsdate.h \
    1: 		jsdbgapi.h \
    1: 		jsdhash.h \
 9695: 		jsdtoa.h \
    1: 		jsemit.h \
    1: 		jsfun.h \
59931: 		jsfriendapi.h \
    1: 		jsgc.h \
68933: 		jsgcmark.h \
54707: 		jscell.h \
47400: 		jsgcchunk.h \
51469: 		jsgcstats.h \
54707: 		jscompartment.h \
    1: 		jshash.h \
    1: 		jsinterp.h \
26315: 		jsinttypes.h \
    1: 		jsiter.h \
    1: 		jslock.h \
    1: 		jslong.h \
    1: 		jsmath.h \
67930: 		jsnum.h \
    1: 		jsobj.h \
35117: 		jsobjinlines.h \
20092: 		json.h \
67934: 		jsonparser.h \
    1: 		jsopcode.tbl \
    1: 		jsopcode.h \
54855: 		jsopcodeinlines.h \
    1: 		jsotypes.h \
    1: 		jsparse.h \
42733: 		jsproxy.h \
    1: 		jsprf.h \
53555: 		jsprobes.h \
40359: 		jspropertycache.h \
40359: 		jspropertycacheinlines.h \
40327: 		jspropertytree.h \
    1: 		jsproto.tbl \
    1: 		jsprvtd.h \
    1: 		jspubtd.h \
51110: 		jsreflect.h \
    1: 		jsregexp.h \
    1: 		jsscan.h \
    1: 		jsscope.h \
    1: 		jsscript.h \
32723: 		jsscriptinlines.h \
22652: 		jsstaticcheck.h \
48470: 		jsstdint.h \
    1: 		jsstr.h \
17220: 		jstracer.h \
60157: 		jshotloop.h \
37042: 		jstypedarray.h \
    1: 		jstypes.h \
    1: 		jsutil.h \
34301: 		jsvector.h \
34302: 		jstl.h \
38568: 		jshashtable.h \
18863: 		jsversion.h \
68911: 		jsweakmap.h \
43264: 		jswrapper.h \
    1: 		jsxdrapi.h \
    1: 		jsxml.h \
48470: 		jsval.h \
48470: 		jsvalue.h \
43194: 		prmjtime.h \
    1: 		$(NULL)
    1: 
64572: ###############################################
69223: # BEGIN include sources for the vm subdirectory
69223: #
69223: VPATH		+= \
69223: 		$(srcdir)/vm 	\
69223: 		$(NULL)
69223: 
69223: EXPORTS_NAMESPACES = vm
69223: 
69223: EXPORTS_vm = \
69827: 		ArgumentsObject.h \
69639: 		GlobalObject.h			\
69223: 		Stack.h			\
69242: 		StringObject.h \
69223: 		$(NULL)
69223: 
69223: ###############################################
64572: # BEGIN include sources for low-level code shared with Gecko
64572: #
64572: VPATH		+= \
64572: 		$(srcdir)/../../mfbt \
64572: 		$(NULL)
64572: 
69223: EXPORTS_NAMESPACES += mozilla
64572: 
64572: EXPORTS_mozilla = \
69245: 		Types.h		\
64572: 		Util.h          \
64572: 		$(NULL)
64572: 
38548: ifdef ENABLE_TRACEJIT
56750: VPATH		+= \
56750: 		$(srcdir)/tracejit \
56750: 		$(srcdir)/nanojit \
18400: 
21062: INSTALLED_HEADERS += \
20408: 		jsbuiltins.h    \
18400: 		Assembler.h     \
31475: 		Allocator.h     \
31475: 		CodeAlloc.h     \
31494: 		Containers.h    \
18400: 		LIR.h		\
56750: 		LIRopcode.tbl \
18400: 		avmplus.h	\
18400: 		Fragmento.h	\
18400: 		Native.h	\
55540: 		NativeCommon.h	\
18400: 		Native$(NANOJIT_ARCH).h \
38583: 		njconfig.h      \
56750: 		njcpudetect.h   \
18400: 		RegAlloc.h	\
18400: 		nanojit.h	\
33601: 		VMPI.h		\
56750: 		Writer.h	\
15458: 		$(NULL)
15458: 
17605: CPPSRCS += \
17605: 		jstracer.cpp \
18400: 		Assembler.cpp  \
31475: 		Allocator.cpp  \
31475: 		CodeAlloc.cpp  \
31494: 		Containers.cpp \
18400: 		Fragmento.cpp  \
18400: 		LIR.cpp        \
38583: 		njconfig.cpp   \
18400: 		RegAlloc.cpp   \
18400: 		avmplus.cpp    \
18400: 		Native$(NANOJIT_ARCH).cpp \
17605: 		jsbuiltins.cpp \
33601: 		VMPI.cpp       \
56750: 		Writer.cpp     \
17605: 		$(NULL)
17605: 
38548: endif # ENABLE_TRACEJIT
52556: ifdef ENABLE_METHODJIT
17567: 
52556: ###############################################
53400: # BEGIN include sources for the method JIT
52556: #
53400: VPATH += 	$(srcdir)/methodjit
52556: 
53400: CPPSRCS += 	MethodJIT.cpp \
52608: 		StubCalls.cpp \
52557: 		Compiler.cpp \
52560: 		FrameState.cpp \
52963: 		FastArithmetic.cpp \
52560: 		FastOps.cpp \
52608: 		StubCompiler.cpp \
52826: 		MonoIC.cpp \
52880: 		PolyIC.cpp \
52839: 		ImmutableSync.cpp \
52872: 		InvokeHelpers.cpp \
53168: 		Retcon.cpp \
53168: 		TrampolineCompiler.cpp \
52556: 		$(NULL)
52557: #		PICStubCompiler.cpp \
52556: 
52556: ifeq (86, $(findstring 86,$(TARGET_CPU)))
52556: ifeq (x86_64, $(TARGET_CPU))
53477: ifdef _MSC_VER
52556: ASFILES +=	TrampolineMasmX64.asm
52556: endif
64272: ifeq ($(OS_ARCH),WINNT)
64272: ifdef GNU_CC
64272: ASFILES +=	TrampolineMingwX64.s
64272: endif
64272: endif
53012: ifdef SOLARIS_SUNPRO_CXX
53012: ASFILES +=	TrampolineSUNWX64.s
53012: endif
52556: #CPPSRCS		+= only_on_x86_64.cpp
52556: else
52556: #CPPSRCS		+= only_on_x86.cpp
53012: ifdef SOLARIS_SUNPRO_CXX
53012: ASFILES +=	TrampolineSUNWX86.s
53012: endif
52556: endif
52556: endif
52556: ifeq (arm, $(TARGET_CPU))
52556: #CPPSRCS		+= only_on_arm.cpp
52556: endif
68931: ifeq (sparc, $(findstring sparc,$(TARGET_CPU)))
68931: ASFILES +=	TrampolineSparc.s
68931: endif
52556: #
53400: # END enclude sources for the method JIT
53400: #############################################
53400: 
53400: endif
51469: 
54164: ###############################################
54164: # BEGIN include sources for V8 dtoa
54164: #
54164: VPATH += 	$(srcdir)/v8-dtoa \
54164: 		$(NONE)
54164: 
54164: CPPSRCS += 	checks.cc \
54164: 		conversions.cc \
54164: 		diy-fp.cc \
54164: 		v8-dtoa.cc \
54164: 		fast-dtoa.cc \
54164: 		platform.cc \
54164: 		utils.cc \
54164: 		$(NONE)
54164: 
54164: #
54164: # END enclude sources for V8 dtoa
54164: #############################################
54164: 
69844: ifeq (,$(filter arm% sparc %86 x86_64,$(TARGET_CPU)))
50493: 
50493: VPATH +=	$(srcdir)/assembler \
50493: 		$(srcdir)/assembler/wtf \
50493: 		$(srcdir)/yarr/pcre \
50493: 		$(NULL)
50493: 
50493: CPPSRCS += 	pcre_compile.cpp \
50493:                 pcre_exec.cpp \
50493:                 pcre_tables.cpp \
50493:                 pcre_xclass.cpp \
50493:                 pcre_ucp_searchfuncs.cpp \
50493: 		$(NULL)
50493: else
50493: 
50491: ###############################################
50491: # BEGIN include sources for the Nitro assembler
50491: #
50491: VPATH += 	$(srcdir)/assembler \
50491: 		$(srcdir)/assembler/wtf \
50491: 		$(srcdir)/assembler/jit \
50491: 		$(srcdir)/assembler/assembler \
50491: 		$(srcdir)/methodjit \
50491: 		$(srcdir)/yarr \
50491: 		$(srcdir)/yarr/yarr \
50491: 		$(srcdir)/yarr/pcre \
50491: 		$(srcdir)/yarr/wtf \
50493: 		$(NONE)
50491: 
50491: CPPSRCS += 	Assertions.cpp \
50491: 		ExecutableAllocatorPosix.cpp \
50491: 		ExecutableAllocatorWin.cpp \
62078: 		ExecutableAllocatorOS2.cpp \
50491: 		ExecutableAllocator.cpp \
50491: 		ARMAssembler.cpp \
50491:                 Logging.cpp \
50491: 		MacroAssemblerARM.cpp \
50491: 		MacroAssemblerX86Common.cpp \
50491: 		RegexCompiler.cpp \
50491: 		RegexJIT.cpp \
50494: 		pcre_compile.cpp \
50494:                 pcre_exec.cpp \
50494:                 pcre_tables.cpp \
50494:                 pcre_xclass.cpp \
50494:                 pcre_ucp_searchfuncs.cpp \
50493: 		$(NONE)
50491: 
50491: ifeq (86, $(findstring 86,$(TARGET_CPU)))
50491: ifeq (x86_64, $(TARGET_CPU))
50491: #CPPSRCS		+= only_on_x86_64.cpp
50491: else
50491: #CPPSRCS		+= only_on_x86.cpp
50491: endif
50491: endif
50491: ifeq (arm, $(TARGET_CPU))
50491: #CPPSRCS		+= only_on_arm.cpp
50491: endif
50491: #
50491: # END enclude sources for the Nitro assembler
50491: #############################################
50491: 
50493: endif
50491: 
40442: ifdef JS_HAS_CTYPES
41355: VPATH += $(srcdir)/ctypes
41355: 
40442: CPPSRCS += \
41355:     CTypes.cpp \
41355:     Library.cpp \
40442:     $(NULL)
40442: 
40442: LOCAL_INCLUDES = \
40442:     -Ictypes/libffi/include \
42677:     -I. \
40442:     $(NULL)
40442: 
40442: ifeq ($(OS_ARCH),OS2)
40894: SHARED_LIBRARY_LIBS += \
40894:     ctypes/libffi/.libs/ffi.a \
40894:     $(NULL)
40894: else
40613: SHARED_LIBRARY_LIBS += \
40442:     ctypes/libffi/.libs/libffi.$(LIB_SUFFIX) \
40442:     $(NULL)
40894: endif
40894: 
40442: endif # JS_HAS_CTYPES
40442: 
 7058: ifdef HAVE_DTRACE
21062: INSTALLED_HEADERS += \
21609: 		$(CURDIR)/javascript-trace.h \
 7058: 		$(NULL)
 7058: endif
 7058: 
48637: # PerfMeasurement is available regardless of low-level support for it;
48637: # it just doesn't necessarily do anything useful.  There is one
48637: # implementation source file per supported operating system, plus a stub
48637: # for unsupported OSes, plus the Javascript wrapper.
48637: VPATH += $(srcdir)/perf
48637: INSTALLED_HEADERS += jsperf.h
48637: CPPSRCS += jsperf.cpp
48637: ifdef HAVE_LINUX_PERF_EVENT_H
48637: CPPSRCS += pm_linux.cpp
48637: else
48637: CPPSRCS += pm_stub.cpp
48637: endif
48637: 
68521: ifeq ($(OS_ARCH),WINNT)
21062: INSTALLED_HEADERS += jscpucfg.h
    1: endif
    1: 
23476: EXPORTS = $(INSTALLED_HEADERS)
23476: 
    1: DASH_R		= -r
    1: 
67939: ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
 5701: SDK_LIBRARY = $(IMPORT_LIBRARY)
 5701: else
 5701: SDK_LIBRARY = $(SHARED_LIBRARY)
 5701: endif
 5701: 
    1: include $(topsrcdir)/config/config.mk
    1: 
    1: EXTRA_DSO_LDOPTS += $(NSPR_LIBS)
    1: 
    1: ifndef BUILD_OPT
    1: MOCHAFILE	= 1
    1: endif
    1: 
    1: # Define keyword generator before rules.mk, see bug 323979 comment 50
    1: 
    1: HOST_SIMPLE_PROGRAMS += host_jskwgen$(HOST_BIN_SUFFIX)
    1: GARBAGE += jsautokw.h host_jskwgen$(HOST_BIN_SUFFIX)
15453: 
15453: HOST_SIMPLE_PROGRAMS += host_jsoplengen$(HOST_BIN_SUFFIX)
15453: GARBAGE += jsautooplen.h host_jsoplengen$(HOST_BIN_SUFFIX)
15453: 
15146: USE_HOST_CXX = 1
    1: 
 7058: ifdef HAVE_DTRACE
 7297: ifneq ($(OS_ARCH),Darwin)
 7058: DTRACE_PROBE_OBJ = $(LIBRARY_NAME)-dtrace.$(OBJ_SUFFIX)
 7297: endif
 7058: MOZILLA_DTRACE_SRC = $(srcdir)/javascript-trace.d
 7058: endif
 7058: 
25212: default::
    1: 
25212: ifneq (,$(CROSS_COMPILE)$(filter-out WINNT OS2,$(OS_ARCH)))
68521: ifneq ($(OS_ARCH),SYMBIAN)
23476: # nsinstall doesn't get built until we enter config/ in the exports phase,
23476: # so we'll have to manually ensure it gets built here if we want to use
23476: # $(EXPORTS)
25212: export:: config/nsinstall$(HOST_BIN_SUFFIX)
25262: $(PUBLIC) $(SDK_PUBLIC): config/nsinstall$(HOST_BIN_SUFFIX)
23476: 
23476: config/nsinstall$(HOST_BIN_SUFFIX): $(srcdir)/config/nsinstall.c $(srcdir)/config/pathsub.c
23476: 	$(MAKE) -C config/ nsinstall$(HOST_BIN_SUFFIX)
23476: endif
23476: endif
23476: 
25212: include $(topsrcdir)/config/rules.mk
25212: 
40442: ifdef JS_HAS_CTYPES
40442: # Build libffi proper as part of the 'exports' target, so things get built
40613: # in the right order.
40442: export::
40613: 		$(call SUBMAKE,,ctypes/libffi)
40442: 
41530: distclean clean::
41530: 		$(call SUBMAKE,$@,ctypes/libffi)
40442: endif
40442: 
21064: # Because the SpiderMonkey can be distributed and built independently
21064: # of the Mozilla source tree, it contains its own copies of many of
21064: # the files used by the top-level Mozilla build process, from the
21064: # 'config' and 'build' subtrees.
21064: #
21064: # To make it simpler to keep the copies in sync, we follow the policy
21064: # that the SpiderMonkey copies must always be exact copies of those in
21064: # the containing Mozilla tree.  If you've made a change in one, it
21064: # belongs in the other as well.  If the change isn't right for both
21064: # places, then that's something to bring up with the other developers.
21064: #
21064: # Some files are reasonable to diverge; for  example,
21064: # js/config/autoconf.mk.in doesn't need most of the stuff in
21064: # config/autoconf.mk.in.
67905: check-sync-dirs-cmd = $(PYTHON) $(srcdir)/config/check-sync-dirs.py
67905: check-sync-dirs:
67905: 	$(check-sync-dirs-cmd) $(srcdir)/config $(MOZ_SYNC_BUILD_FILES)/config
67905: 	$(check-sync-dirs-cmd) $(srcdir)/build $(MOZ_SYNC_BUILD_FILES)/build
33134: 
67905: ifdef MOZ_SYNC_BUILD_FILES
67905: check:: check-sync-dirs
21064: endif
21064: 
60811: # The "find any vanilla new/new[] calls" script is tailored to Linux, so
60811: # only run it there.  That should be enough to catch any such calls that
60811: # creep in.
67905: check-vanilla-new:
67905: 	$(srcdir)/config/find_vanilla_new_calls $(LIBRARY)
67905: 
60811: ifeq ($(OS_ARCH),Linux)
67905: check:: check-vanilla-new
60811: endif
60811: 
64323: # Help ensure that the number of OOM errors in SpiderMonkey doesn't increase.
64323: # If the number of OOM errors changes, update the number below. We intend this
64323: # number to go down over time, by fixing OOMs.
64323: check-ooms:
64559: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/config/find_OOM_errors.py --regression 125
64323: 
67910: ifeq ($(MOZ_DEBUG),1)
67913: #check:: check-ooms
64323: endif
64323: 
64559: ## Prevent regressing in our deprecation of non-preferred memory management functions.
64559: # We use all the files in the distribution so that different configurations
64559: # don't give different results. We skip the contents of objdirs using |find|
64559: # (it can't be done with %-expansion, because the files we want to skip aren't
64559: # in the vpath).
64559: ALL_FILES=$(shell find $(srcdir) \( -name "*.cpp" -o -name "*.h" \) -not -path "*/dist/*")
68895: check-malloc-function-usage: $(filter-out %jsalloc.h %jscntxt.h %jsutil.h, $(ALL_FILES))
64559: 
64559: 	# js_malloc and friends are only used by other memory managers, and should
64559: 	# never be used elsewhere directly.
64559: 	$(srcdir)/config/check_source_count.py "\bjs_malloc\b" 0 \
64559: 		"in Makefile.in" "cx->malloc_ or rt->malloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_calloc\b" 0 \
64559: 		"in Makefile.in" "cx->calloc_ or rt->calloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_realloc\b" 0 \
64559: 		"in Makefile.in" "cx->realloc_ or rt->realloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_free\b" 0 \
64559: 		"in Makefile.in" "cx->free_" $^
64559: 
64559: 	# We desire these numbers to go down, not up. See "User guide to memory
64559: 	# management within SpiderMonkey" in jsutil.h.
69246: 	$(srcdir)/config/check_source_count.py OffTheBooks:: 52 \
64559: 		"in Makefile.in" "{cx,rt}->{new_,new_array,malloc_,calloc_,realloc_}" $^
64559: 	# This should go to zero, if possible.
68895: 	$(srcdir)/config/check_source_count.py UnwantedForeground:: 34 \
64559: 		"in Makefile.in" "{cx,rt}->{free_,delete_,array_delete}" $^
64559: 
67905: ifneq ($(OS_ARCH),WINNT) # FIXME: this should be made work on Windows too.
64559: check:: check-malloc-function-usage
64560: endif
64559: 
63238: JITFLAGS = ,m,j,mj,mjp,am,amj,amjp,amd
67905: check-jit-test::
56539: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/jit-test/jit_test.py \
63238: 	        --no-slow --no-progress --tinderbox --jitflags=$(JITFLAGS) $(DIST)/bin/js$(BIN_SUFFIX)
33134: 
67905: check-jit-test-valgrind::
56539: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/jit-test/jit_test.py \
63238: 	        --valgrind --no-slow --no-progress --tinderbox --jitflags=$(JITFLAGS) $(DIST)/bin/js$(BIN_SUFFIX)
67905: 
68954: check:: check-jit-test
68954: check-valgrind:: check-jit-test-valgrind
67908: 
67908: # jstests doesn't have a --jitflags option, so we need to loop, updating the
67908: # exit code (RC) after each invocation.
67908: # FIXME: MethodJIT doesn't work for 1 test case (bug 644393), so
67908: # --no-extensions is set to skip that test. Remove as soon as possible.
67908: check-jstests:
67908: 	RC=0; \
67908: 	for f in `echo "$(JITFLAGS)" | tr ',' '\n'`; \
67908: 		do \
67908: 			$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/tests/jstests.py \
67908: 				--tinderbox --no-progress \
67908: 				--no-extensions \
67908: 				--timeout 300 \
67908: 				--args="`echo $$f | sed 's/\(.\)/ -\1/g'`" \
67908: 				$(DIST)/bin/js$(BIN_SUFFIX); \
67908: 			RC=$$(( $$RC || $$?)); \
67908: 		done; \
67908: 	exit $$RC
67908: 
68954: # FIXME:
68954: # We want to run check-jstests as part of |make check| on all platforms, on
68954: # tinderbox. However, some configurations don't work quite right just yet.
69234: # Rather than risking regressions in major configurations while fixing these
69234: # secondary configuration, we work around them and fix the bugs later.
68954: #
69234: #   Bug 652154: On Windows, SM(!m !t) don't work because of path problems with
69234: #				their unusual directory layout
69234: #
69234: #   Bug 652155: On Mac, SM(d) doesn't work for unknown reasons 
67908: 
69234: ifeq ($(OS_ARCH),WINNT)
69234: ifdef ENABLE_METHODJIT
69234: ifdef ENABLE_TRACEJIT
69234: #check:: check-jstests
69234: endif
69234: endif
69234: else
69234: ifndef HAVE_DTRACE
69234: #check:: check-jstests
69234: endif
68954: endif
25896: 
30215: DIST_GARBAGE = config.cache config.log config.status \
40655:    config/autoconf.mk \
30837:    unallmakefiles js-config js-config.h js-confdefs.h
30215: 
30215: distclean::
30215: 	cat unallmakefiles | $(XARGS) rm -f
67702: 	$(RM) $(DIST_GARBAGE)
30215: 
17567: # our build system doesn't handle subdir srcs very gracefully today
17567: export::
67702: 	$(MKDIR) -p nanojit
17567: 
    1: DEFINES		+= -DEXPORT_JS_API
    1: 
69245: # mfbt is always packed with us, so if we're building a shared object,
69245: # we need to declare "exported" mfbt symbols on its behalf when we use
69245: # its headers.
69245: DEFINES		+= -DIMPL_MFBT
69245: 
47613: # Some platforms that have stdint.h include it in system headers.  So
47613: # to reliably get limit macros defined, we'd always have to define the
47613: # one below before including any header, but that's obscure and
47613: # fragile, so we do it here.
47613: DEFINES		+= -D__STDC_LIMIT_MACROS
47613: 
    1: INCLUDES	+= -I$(srcdir)
    1: 
    1: GARBAGE		+= jscpucfg.o jsautocfg.h jsautocfg.tmp jscpucfg
    1: 
    1: ifneq (,$(CROSS_COMPILE)$(filter-out WINNT,$(OS_ARCH)))
    1: TARGETS		+= jscpucfg$(HOST_BIN_SUFFIX)
    1: endif
    1: 
    1: ifdef JS_THREADSAFE
    1: DEFINES		+= -DJS_THREADSAFE
    1: endif
    1: 
40442: ifdef JS_HAS_CTYPES
40442: DEFINES		+= -DJS_HAS_CTYPES
47348: DEFINES         += -DDLL_PREFIX=\"$(DLL_PREFIX)\" -DDLL_SUFFIX=\"$(DLL_SUFFIX)\"
40442: endif
40442: 
    1: ifdef JS_NO_THIN_LOCKS
    1: DEFINES		+= -DJS_USE_ONLY_NSPR_LOCKS
    1: endif
    1: 
    1: ifdef JS_VERSION
    1: DEFINES		+= -DJS_VERSION=$(JS_VERSION)
    1: endif
    1: 
    1: ifneq ($(findstring -L,$(NSPR_LIBS)),)
    1: NSPR_STATIC_PATH = $(subst -L,,$(findstring -L,$(NSPR_LIBS)))
    1: else
    1: NSPR_STATIC_PATH = $(DIST)/lib
    1: endif
    1: 
16288: ifdef MOZ_VTUNE
16288: CXXFLAGS += -IC:/Program\ Files/Intel/VTune/Analyzer/Include
16288: EXTRA_DSO_LDOPTS += C:/Program\ Files/Intel/VTune/Analyzer/Lib/VtuneApi.lib
16288: LIBS +=  C:/Program\ Files/Intel/VTune/Analyzer/Lib/VtuneApi.lib
16288: endif
16288: 
63458: # HP-UX does not require the extra linking of "-lm"
67939: ifeq (,$(filter HP-UX WINNT OS2,$(OS_ARCH)))
18465: EXTRA_LIBS	+= -lm
    1: endif
    1: 
    1: # Prevent floating point errors caused by VC++ optimizations
    1: ifeq ($(OS_ARCH)_$(GNU_CC),WINNT_)
    1: ifeq (,$(filter-out 1200 1300 1310,$(_MSC_VER)))
    1: CFLAGS += -Op
    1: else
    1: CFLAGS += -fp:precise
    1: endif
    1: endif # WINNT
    1: 
    1: ifeq ($(OS_ARCH),FreeBSD)
18465: EXTRA_LIBS	+= -pthread
    1: endif
    1: ifeq ($(OS_ARCH),IRIX)
    1: ifdef USE_N32
    1: DASH_R		+= -n32
    1: endif
    1: endif
    1: ifeq ($(OS_ARCH),Linux)
18465: EXTRA_LIBS	+= -ldl
    1: endif
    1: ifeq ($(OS_ARCH),OSF1)
18465: EXTRA_LIBS	+= -lc_r
    1: endif
64338: # Silence warnings on AIX/HP-UX from non-GNU compilers
64338: ifndef GNU_CC
64338: ifeq ($(OS_ARCH),AIX)
64338: # Suppress warnings from xlC
64338: # 1540-1281: offsetof() on null non-POD types
64338: # 1540-1608: anonymous unions using static data members
64338: CFLAGS		+= -qsuppress=1540-1281 -qsuppress=1540-1608
64338: CXXFLAGS	+= -qsuppress=1540-1281 -qsuppress=1540-1608
64338: endif
64338: ifeq ($(OS_ARCH),HP-UX)
64338: # Suppress warnings from aCC
64338: # 3055: anonymous unions declaring types
64338: # 4189: offsetof() on non-POD types
64338: CFLAGS		+= +W3055,4189
64338: CXXFLAGS	+= +W3055,4189
64338: endif
64338: endif
    1: ifeq ($(OS_ARCH),SunOS)
    1: ifeq ($(TARGET_CPU),sparc)
    1: 
    1: ifdef GNU_CC
30633: CFLAGS   += -mcpu=v9
30633: CXXFLAGS += -mcpu=v9
    1: endif # GNU_CC
    1: 
    1: endif
    1: ifeq ($(OS_RELEASE),4.1)
18465: EXTRA_LIBS	+= -ldl -lnsl
    1: else
18465: EXTRA_LIBS	+= -lposix4 -ldl -lnsl -lsocket
    1: endif
    1: endif
    1: 
15458: ifdef MOZ_MEMORY
15458: ifeq ($(OS_ARCH),Darwin)
15458: LDFLAGS += -ljemalloc
15458: endif
15458: endif
15458: 
33041: ifdef SOLARIS_SUNPRO_CXX
54767: ifeq ($(TARGET_CPU),sparc)
33041: # Sun Studio SPARC doesn't work well with gcc inline asm, use lock_SunOS_sparc*.il
33041: jslock.o: jslock.cpp Makefile.in lock_sparcv8plus.il lock_sparcv9.il
33041: 	$(REPORT_BUILD)
33041: 	@$(MAKE_DEPS_AUTO_CXX)
33041: ifeq (sparcv9,$(findstring sparcv9,$(OS_TEST)))
33041: 	$(CXX) -o $@ -c $(COMPILE_CFLAGS) $(srcdir)/lock_sparcv9.il $<
33041: else
33041: 	$(CXX) -o $@ -c $(COMPILE_CFLAGS) $(srcdir)/lock_sparcv8plus.il $<
33041: endif # sparcv9
54747: endif # sparc
33041: endif # SOLARIS_SUNPRO_CXX
19058: 
    1: ifeq ($(OS_ARCH),IRIX)
    1: ifndef GNU_CC
    1: _COMPILE_CFLAGS  = $(patsubst -O%,-O1,$(COMPILE_CFLAGS))
51110: jsapi.o jsxdrapi.o jsarena.o jsarray.o jsatom.o jsemit.o jsfun.o jsinterp.o jsreflect.o jsregexp.o jsparse.o jsopcode.o jsscript.o: %.o: %.cpp Makefile.in
    1: 	$(REPORT_BUILD)
15146: 	@$(MAKE_DEPS_AUTO_CXX)
15146: 	$(CXX) -o $@ -c $(_COMPILE_CFLAGS) $<
    1: endif
    1: endif
    1: 
    1: # An AIX Optimization bug causes PR_dtoa() & JS_dtoa to produce wrong result.
    1: # This suppresses optimization for this single compilation unit.
    1: ifeq ($(OS_ARCH),AIX)
15146: jsatom.o: jsatom.cpp Makefile.in
    1: 	$(REPORT_BUILD)
15146: 	@$(MAKE_DEPS_AUTO_CXX)
15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
15146: jsdtoa.o: jsdtoa.cpp Makefile.in
    1: 	$(REPORT_BUILD)
15146: 	@$(MAKE_DEPS_AUTO_CXX)
15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
    1: endif
    1: 
21062: export:: jsautocfg.h
21062: 
26053: ifeq (,$(CROSS_COMPILE)$(GNU_CC)$(filter-out WINNT,$(OS_ARCH)))
    1: jsautocfg.h:
67702: 	$(TOUCH) $@
    1: else
    1: jsautocfg.h: jscpucfg$(HOST_BIN_SUFFIX)
67702: 	@$(RM) $@ jsautocfg.tmp
    1: 	./jscpucfg > jsautocfg.tmp
    1: 	mv jsautocfg.tmp $@
    1: endif
    1: 
    1: # jscpucfg is a strange target
    1: # Needs to be built with the host compiler but needs to include
    1: # the mdcpucfg for the target so it needs the appropriate target defines
    1: ifdef HOST_NSPR_MDCPUCFG
15146: HOST_CXX := $(HOST_CXX) -DMDCPUCFG=$(TARGET_NSPR_MDCPUCFG)
15146: HOST_CXXFLAGS := $(patsubst -DXP_%,,$(HOST_CXXFLAGS))
    1: endif
    1: 
    1: ifdef CROSS_COMPILE
    1: # jscpucfg needs to know when it's supposed to produce a config for the target
    1: JSCPUCFG_DEFINES = $(ACDEFINES)
    1: endif
    1: 
    1: ifeq ($(OS_ARCH),QNX)
    1: ifneq ($(OS_TARGET),NTO)
    1: # QNX's compiler apparently can't build a binary directly from a source file.
15146: jscpucfg.o: jscpucfg.cpp Makefile.in
15146: 	$(HOST_CXX) $(HOST_CXXFLAGS) -c $(JSCPUCFG_DEFINES) $(DEFINES) $(NSPR_CFLAGS) -o $@ $<
    1: 
    1: jscpucfg: jscpucfg.o
15146: 	$(HOST_CXX) $(HOST_CXXFLAGS) $(JSCPUCFG_DEFINES) $(DEFINES) -o $@ $<
    1: endif
    1: else
15146: jscpucfg$(HOST_BIN_SUFFIX): jscpucfg.cpp Makefile.in
17084: 	$(HOST_CXX) $(HOST_CXXFLAGS) $(JSCPUCFG_DEFINES) $(DEFINES) $(NSPR_CFLAGS) $(HOST_OUTOPTION)$@ $<
    1: endif
    1: 
21062: # Compute the linker flags that programs linking against SpiderMonkey should
21062: # pass to get SpiderMonkey and its dependencies, beyond just the -L and -l
21062: # for the SpiderMonkey library itself.
21062: # - EXTRA_DSO_LDOPTS includes the NSPR -L and -l flags.
21062: # - OS_LIBS includes libraries selected by the configure script.
21062: # - EXTRA_LIBS includes libraries selected by this Makefile.
21062: JS_CONFIG_LIBS=$(EXTRA_DSO_LDOPTS) $(OS_LIBS) $(EXTRA_LIBS) 
21062: 
21062: # The configure script invokes this rule explicitly at configure time!
21062: # It's important that js-config be ready by the time we're done
21062: # configuring, because we may be running other configure scripts that
21062: # would like to run js-config themselves, before js is built.
21062: #
21062: # This file and rules.mk go through a certain amount of work to decide
21062: # which libraries to build, what to name them, and what flags to pass
21062: # when linking them (and thus what flags its own clients must pass).
21062: # All this information needs to go into the js-config script.  To
21062: # avoid trying to re-compute all that in the configure script, we just
21062: # have the configure script generate this Makefile, and then invoke
21062: # this rule.
21062: at=@
21062: js-config: js-config.in Makefile $(DEPTH)/config/autoconf.mk $(topsrcdir)/config/config.mk $(topsrcdir)/config/rules.mk
67702: 	$(RM) js-config.tmp
21062: 	sed < $< > js-config.tmp \
21062: 	-e 's|$(at)prefix$(at)|$(prefix)|' \
21062: 	-e 's|$(at)exec_prefix$(at)|$(exec_prefix)|' \
21062: 	-e 's|$(at)includedir$(at)|$(includedir)|' \
21062: 	-e 's|$(at)libdir$(at)|$(libdir)|' \
21062: 	-e 's|$(at)MOZILLA_VERSION$(at)|$(MOZILLA_VERSION)|' \
21062: 	-e 's|$(at)LIBRARY_NAME$(at)|$(LIBRARY_NAME)|' \
21062: 	-e 's|$(at)NSPR_CFLAGS$(at)|$(NSPR_CFLAGS)|' \
21062: 	-e 's|$(at)JS_CONFIG_LIBS$(at)|$(JS_CONFIG_LIBS)|' \
21062: 	-e 's|$(at)MOZ_JS_LIBS$(at)|$(MOZ_JS_LIBS)|' \
21062: 	&& mv js-config.tmp $@ && chmod +x $@
21062: 
21062: SCRIPTS = js-config
23476: SDK_BINARY = js-config
21062: 
21062: install:: $(INSTALLED_HEADERS)
27537: 	$(SYSINSTALL) $^ $(DESTDIR)$(includedir)/$(MODULE)
21062: 
24537: install:: $(SCRIPTS)
27537: 	$(SYSINSTALL) $^ $(DESTDIR)$(bindir)
21062: 
23476: install:: $(LIBRARY) $(SHARED_LIBRARY) $(IMPORT_LIBRARY)
23126: ifneq (,$(LIBRARY))
27537: 	$(SYSINSTALL) $(LIBRARY) $(DESTDIR)$(libdir)
23126: endif
21062: ifneq (,$(SHARED_LIBRARY))
27537: 	$(SYSINSTALL) $(SHARED_LIBRARY) $(DESTDIR)$(libdir)
21062: endif
23126: ifneq (,$(IMPORT_LIBRARY))
27537: 	$(SYSINSTALL) $(IMPORT_LIBRARY) $(DESTDIR)$(libdir)
23126: endif
21062: 
15453: # Extra dependancies and rules for auto-generated headers
18863: host_jskwgen.$(OBJ_SUFFIX): jsversion.h jskeyword.tbl
    1: 
21659: # Use CURDIR to avoid finding a jsautokw.h in the source tree (from a
21659: # previous build?) via VPATH when we're building in a separate tree.
21659: $(CURDIR)/jsautokw.h: host_jskwgen$(HOST_BIN_SUFFIX)
    1: 	./host_jskwgen$(HOST_BIN_SUFFIX) $@
 7058: 
15453: host_jsoplengen.$(OBJ_SUFFIX): jsopcode.tbl
15453: 
21659: # Use CURDIR to avoid finding a jsautooplen.h in the source tree (from
21659: # a previous build?) via VPATH when we're building in a separate tree.
21659: $(CURDIR)/jsautooplen.h: host_jsoplengen$(HOST_BIN_SUFFIX)
15453: 	./host_jsoplengen$(HOST_BIN_SUFFIX) $@
15453: 
15453: # Force auto-header generation before compiling any source that may use them
54229: $(patsubst %.cc,%.$(OBJ_SUFFIX),$(CPPSRCS:%.cpp=%.$(OBJ_SUFFIX))): $(CURDIR)/jsautokw.h $(CURDIR)/jsautooplen.h
15453: 
 7058: ifdef HAVE_DTRACE
21609: $(CURDIR)/javascript-trace.h: $(srcdir)/javascript-trace.d
 7058: 	dtrace -h -s $(srcdir)/javascript-trace.d -o javascript-trace.h.in
54198: 	sed -e 's/if _DTRACE_VERSION/ifdef INCLUDE_MOZILLA_DTRACE/' \
54198: 	    -e '/const/!s/char \*/const char */g' \
 7058: 	    javascript-trace.h.in > javascript-trace.h
21609: 
22854: # We can't automatically generate dependencies on auto-generated headers;
22854: # we have to list them explicitly.
53555: $(addsuffix .$(OBJ_SUFFIX),jsprobes jsinterp jsobj): $(CURDIR)/javascript-trace.h
 7058: endif
23075: 
42677: ifdef ENABLE_TRACEJIT
42677: # Imacro compilation.
54840: $(CURDIR)/imacros.c.out: $(srcdir)/imacro_asm.py $(srcdir)/imacros.jsasm jsopcode.tbl
42677: 	$(PYTHON) $< $(srcdir)/imacros.jsasm $(CURDIR)/imacros.c.out
42677: $(addsuffix .$(OBJ_SUFFIX),jstracer): $(CURDIR)/imacros.c.out
24537: 
34373: # Code for importing the nanojit subtree from its repository.
34373: NANOJIT_CENTRAL_REV=$(shell cat $(srcdir)/nanojit-import-rev)
34564: NANOJIT_CENTRAL_REPO=http://hg.mozilla.org/projects/nanojit-central
34373: NANOJIT_CENTRAL_LOCAL=$(CURDIR)/nanojit-central
34373: CUR_REPO=$(srcdir)/../..
34373: 
34373: update-nanojit:
67702: 	$(RM) -r $(NANOJIT_CENTRAL_LOCAL) import-splicemap import-revmap
34373: 	hg clone $(NANOJIT_CENTRAL_REPO) $(NANOJIT_CENTRAL_LOCAL)
34373: 	python $(srcdir)/find-child.py \
34373: 	                   --src=$(NANOJIT_CENTRAL_LOCAL) \
34373: 	                   --dst=$(CUR_REPO) \
34373: 	                   --start=$(NANOJIT_CENTRAL_REV) \
34373: 	                   --filemap=$(srcdir)/nanojit-import-filemap \
34373: 	                   >import-splicemap
34373: 	hg convert --config convert.hg.saverev=True \
34373: 	           --config convert.hg.startrev=`cut -d ' ' -f 1 import-splicemap` \
34373: 	           --filemap=$(srcdir)/nanojit-import-filemap \
34373: 	           --splicemap=import-splicemap \
34373: 	           $(NANOJIT_CENTRAL_LOCAL) \
34373: 	           $(CUR_REPO) \
34373: 	           import-revmap
34373: 	(cd $(srcdir) && hg up)
34373: 	(cd $(NANOJIT_CENTRAL_LOCAL) && hg log -r tip --template "{node}\n") >$(srcdir)/nanojit-import-rev
34373: 	(cd $(srcdir) && hg commit --message="Update nanojit-import-rev stamp." nanojit-import-rev)
34373: 
42677: .PHONY: update-nanojit
24539: endif
50491: 
50491: ###############################################
50491: # BEGIN kludges for the Nitro assembler
50491: #
50491: 
50491: # Needed to "configure" it correctly.  Unfortunately these
50491: # flags wind up being applied to all code in js/src, not just
50491: # the code in js/src/assembler.
50693: CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
50608: 
50608: INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
50491: 
53452: ifdef ENABLE_METHODJIT
52556: # Build a standalone test program that exercises the assembler
52556: # sources a bit.
52556: TESTMAIN_OBJS = \
52556: 		Assertions.$(OBJ_SUFFIX) \
52556: 		ExecutableAllocatorPosix.$(OBJ_SUFFIX) \
52556: 		ExecutableAllocatorWin.$(OBJ_SUFFIX) \
52556: 		ExecutableAllocator.$(OBJ_SUFFIX) \
52556: 		ARMAssembler.$(OBJ_SUFFIX) \
52556: 		MacroAssemblerARM.$(OBJ_SUFFIX) \
52556: 		TestMain.$(OBJ_SUFFIX) \
52556: 		jsutil.$(OBJ_SUFFIX) \
52556: 		jslog2.$(OBJ_SUFFIX)
52556: TestMain$(HOST_BIN_SUFFIX): $(TESTMAIN_OBJS)
52556: 	$(CXX) -o TestMain$(HOST_BIN_SUFFIX) $(TESTMAIN_OBJS)
52556: endif
53452: 
50491: #
50491: # END kludges for the Nitro assembler
50491: ###############################################
52800: 
