 88191: /* Any copyright is dedicated to the Public Domain.
 88191:    http://creativecommons.org/publicdomain/zero/1.0/ */
 88191: "use strict";
 88191: 
100193: let nodeDeleted = false;
 88393: let presenter;
 88393: 
 88191: function test() {
 88191:   if (!isTiltEnabled()) {
 88191:     info("Skipping picking delete test because Tilt isn't enabled.");
 88191:     return;
 88191:   }
 88191:   if (!isWebGLSupported()) {
 88191:     info("Skipping picking delete test because WebGL isn't supported.");
 88191:     return;
 88191:   }
 88191: 
 88191:   waitForExplicitFinish();
 88191: 
 88191:   createTab(function() {
 88191:     createTilt({
 88191:       onTiltOpen: function(instance)
 88191:       {
 88393:         presenter = instance.presenter;
 88393:         Services.obs.addObserver(whenNodeRemoved, NODE_REMOVED, false);
 88191: 
 91042:         presenter._onSetupMesh = function() {
 94260:           let p = getPickablePoint(presenter);
 94260: 
 94260:           presenter.highlightNodeAt(p[0], p[1], {
 88191:             onpick: function()
 88191:             {
 88191:               ok(presenter._currentSelection > 0,
 88191:                 "Highlighting a node didn't work properly.");
 91042:               ok(!presenter._highlight.disabled,
 88191:                 "After highlighting a node, it should be highlighted. D'oh.");
 88191: 
100193:               nodeDeleted = true;
 88191:               presenter.deleteNode();
 88393:             }
 88393:           });
 88393:         };
 88393:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 88393:     });
 88393:   });
 88393: }
 88191: 
 88393: function whenNodeRemoved() {
 88191:   ok(presenter._currentSelection > 0,
 88191:     "Deleting a node shouldn't change the current selection.");
 91042:   ok(presenter._highlight.disabled,
 88191:     "After deleting a node, it shouldn't be highlighted.");
 88191: 
 88191:   let nodeIndex = presenter._currentSelection;
 91043:   let vertices = presenter._meshStacks[0].vertices.components;
 88191: 
 88191:   for (let i = 0, k = 36 * nodeIndex; i < 36; i++) {
 91042:     is(vertices[i + k], 0,
 88191:       "The stack vertices weren't degenerated properly.");
 88191:   }
 88191: 
 88393:   executeSoon(function() {
 88393:     Services.obs.addObserver(cleanup, DESTROYED, false);
 88191:     InspectorUI.closeInspectorUI();
 88191:   });
 88191: }
 88191: 
 88191: function cleanup() {
100193:   if (nodeDeleted) { Services.obs.removeObserver(cleanup, DESTROYED); }
 88191:   gBrowser.removeCurrentTab();
 88191:   finish();
 88191: }
