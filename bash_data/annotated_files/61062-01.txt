18949: /* -*- Mode: c++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*- */
18949: /* ***** BEGIN LICENSE BLOCK *****
18949:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
18949:  *
18949:  * The contents of this file are subject to the Mozilla Public License Version
18949:  * 1.1 (the "License"); you may not use this file except in compliance with
18949:  * the License. You may obtain a copy of the License at
18949:  * http://www.mozilla.org/MPL/
18949:  *
18949:  * Software distributed under the License is distributed on an "AS IS" basis,
18949:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
18949:  * for the specific language governing rights and limitations under the
18949:  * License.
18949:  *
18949:  * The Original Code is worker threads.
18949:  *
18949:  * The Initial Developer of the Original Code is
18949:  *   Mozilla Corporation.
18949:  * Portions created by the Initial Developer are Copyright (C) 2008
18949:  * the Initial Developer. All Rights Reserved.
18949:  *
18949:  * Contributor(s):
18949:  *   Ben Turner <bent.mozilla@gmail.com> (Original Author)
21377:  *   Ben Newman <b{enjamn,newman}@mozilla.com>
18949:  *
18949:  * Alternatively, the contents of this file may be used under the terms of
18949:  * either the GNU General Public License Version 2 or later (the "GPL"), or
18949:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
18949:  * in which case the provisions of the GPL or the LGPL are applicable instead
18949:  * of those above. If you wish to allow use of your version of this file only
18949:  * under the terms of either the GPL or the LGPL, and not to allow others to
18949:  * use your version of this file under the terms of the MPL, indicate your
18949:  * decision by deleting the provisions above and replace them with the notice
18949:  * and other provisions required by the GPL or the LGPL. If you do not delete
18949:  * the provisions above, a recipient may use your version of this file under
18949:  * the terms of any one of the MPL, the GPL or the LGPL.
18949:  *
18949:  * ***** END LICENSE BLOCK ***** */
18949: 
21377: #ifndef __NSAUTOJSVALHOLDER_H__
21377: #define __NSAUTOJSVALHOLDER_H__
18949: 
18949: #include "jsapi.h"
18949: 
35880: #include "nsDebug.h"
35880: 
18949: /**
21377:  * Simple class that looks and acts like a jsval except that it unroots
18949:  * itself automatically if Root() is ever called. Designed to be rooted on the
21377:  * context or runtime (but not both!).
18949:  */
21377: class nsAutoJSValHolder
18949: {
18949: public:
18949: 
21377:   nsAutoJSValHolder()
21377:     : mRt(NULL)
21377:     , mVal(JSVAL_NULL)
21377:     , mHeld(JS_FALSE)
21377:   {
21377:     // nothing to do
18949:   }
18949: 
18949:   /**
18949:    * Always release on destruction.
18949:    */
21377:   virtual ~nsAutoJSValHolder() {
18949:     Release();
18949:   }
18949: 
18949:   /**
18949:    * Hold by rooting on the context's runtime.
18949:    */
18949:   JSBool Hold(JSContext* aCx) {
18949:     return Hold(JS_GetRuntime(aCx));
18949:   }
18949: 
18949:   /**
18949:    * Hold by rooting on the runtime.
61062:    * Note that mVal may be JSVAL_NULL, which is not a problem.
18949:    */
18949:   JSBool Hold(JSRuntime* aRt) {
18949:     if (!mHeld) {
61062:       if (js_AddRootRT(aRt, &mVal, "nsAutoJSValHolder")) {
18949:         mRt = aRt;
21377:         mHeld = JS_TRUE;
21377:       } else {
21377:         Release(); // out of memory
18949:       }
18949:     }
18949:     return mHeld;
18949:   }
18949: 
18949:   /**
61062:    * Manually release, nullifying mVal, and mRt, but returning
21377:    * the original jsval.
18949:    */
21377:   jsval Release() {
18949:     NS_ASSERTION(!mHeld || mRt, "Bad!");
21377: 
21377:     jsval oldval = mVal;
21377: 
18949:     if (mHeld) {
61062:       js_RemoveRoot(mRt, &mVal); // infallible
21377:       mHeld = JS_FALSE;
21377:     }
21377: 
21377:     mVal = JSVAL_NULL;
21327:     mRt = NULL;
21377: 
21377:     return oldval;
18949:   }
18949: 
18949:   /**
18949:    * Determine if Hold has been called.
18949:    */
18949:   JSBool IsHeld() {
18949:     return mHeld;
18949:   }
18949: 
18949:   /**
21816:    * Explicit JSObject* conversion.
18949:    */
21816:   JSObject* ToJSObject() const {
21377:     return JSVAL_IS_OBJECT(mVal)
21377:          ? JSVAL_TO_OBJECT(mVal)
21816:          : NULL;
18949:   }
18949: 
22477:   jsval* ToJSValPtr() {
22477:     return &mVal;
22477:   }
22477: 
18949:   /**
21377:    * Pretend to be a jsval.
18949:    */
21377:   operator jsval() const { return mVal; }
18949: 
21377:   nsAutoJSValHolder &operator=(JSObject* aOther) {
21320: #ifdef DEBUG
21320:     if (aOther) {
18949:       NS_ASSERTION(mHeld, "Not rooted!");
21320:     }
21320: #endif
21377:     return *this = OBJECT_TO_JSVAL(aOther);
21377:   }
21377: 
21377:   nsAutoJSValHolder &operator=(jsval aOther) {
21377: #ifdef DEBUG
48470:     if (JSVAL_IS_OBJECT(aOther) && JSVAL_TO_OBJECT(aOther)) {
21377:       NS_ASSERTION(mHeld, "Not rooted!");
21377:     }
21377: #endif
21377:     mVal = aOther;
21377:     return *this;
18949:   }
18949: 
18949: private:
18949:   JSRuntime* mRt;
21377:   jsval mVal;
18949:   JSBool mHeld;
18949: };
18949: 
21377: #endif /* __NSAUTOJSVALHOLDER_H__ */
