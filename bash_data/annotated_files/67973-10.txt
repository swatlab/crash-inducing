    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Author: Kyle Yuan (kyle.yuan@sun.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
31673: #include "nsXULTreeAccessible.h"
31673: 
41384: #include "nsAccCache.h"
41384: #include "nsAccUtils.h"
41384: #include "nsCoreUtils.h"
31673: #include "nsDocAccessible.h"
41384: #include "nsRelUtils.h"
67790: #include "States.h"
31673: 
    1: #include "nsIDOMXULElement.h"
    1: #include "nsIDOMXULMultSelectCntrlEl.h"
  144: #include "nsIDOMXULTreeElement.h"
    1: #include "nsITreeSelection.h"
    1: #include "nsIMutableArray.h"
    1: #include "nsComponentManagerUtils.h"
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
31673: nsXULTreeAccessible::
43504:   nsXULTreeAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
51865:   nsAccessibleWrap(aContent, aShell)
    1: {
43504:   mTree = nsCoreUtils::GetTreeBoxObject(aContent);
31673:   if (mTree)
31673:     mTree->GetView(getter_AddRefs(mTreeView));
31673: 
31673:   NS_ASSERTION(mTree && mTreeView, "Can't get mTree or mTreeView!\n");
31673: 
39191:   mAccessibleCache.Init(kDefaultTreeCacheSize);
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsISupports and cycle collection implementation
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_CLASS(nsXULTreeAccessible)
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsXULTreeAccessible,
31673:                                                   nsAccessible)
39191: CycleCollectorTraverseCache(tmp->mAccessibleCache, &cb);
31673: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(nsXULTreeAccessible,
31673:                                                 nsAccessible)
39191: ClearCache(tmp->mAccessibleCache);
31673: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
    1: 
31673: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(nsXULTreeAccessible)
31673: NS_INTERFACE_MAP_STATIC_AMBIGUOUS(nsXULTreeAccessible)
51865: NS_INTERFACE_MAP_END_INHERITING(nsAccessible)
    1: 
51865: NS_IMPL_ADDREF_INHERITED(nsXULTreeAccessible, nsAccessible)
51865: NS_IMPL_RELEASE_INHERITED(nsXULTreeAccessible, nsAccessible)
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation
    1: 
67790: PRUint64
67790: nsXULTreeAccessible::NativeState()
    1: {
31673:   // Get focus status from base class.
67790:   PRUint64 state = nsAccessible::NativeState();
    1: 
31673:   // readonly state
67790:   state |= states::READONLY;
31673: 
31673:   // remove focusable and focused states since tree items are focusable for AT
67790:   state &= ~(states::FOCUSABLE | states::FOCUSED);
31673: 
31673:   // multiselectable state.
31673:   nsCOMPtr<nsITreeSelection> selection;
31673:   mTreeView->GetSelection(getter_AddRefs(selection));
67790:   NS_ENSURE_TRUE(selection, state);
31673: 
31673:   PRBool isSingle = PR_FALSE;
67790:   nsresult rv = selection->GetSingle(&isSingle);
67790:   NS_ENSURE_SUCCESS(rv, state);
31673: 
31673:   if (!isSingle)
67790:     state |= states::MULTISELECTABLE;
    1: 
67790:   return state;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeAccessible::GetValue(nsAString& aValue)
    1: {
31673:   // Return the value is the first selected child.
    1: 
31673:   aValue.Truncate();
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   PRInt32 currentIndex;
    1:   nsCOMPtr<nsIDOMElement> selectItem;
    1:   selection->GetCurrentIndex(&currentIndex);
    1:   if (currentIndex >= 0) {
    1:     nsCOMPtr<nsITreeColumn> keyCol;
    1: 
    1:     nsCOMPtr<nsITreeColumns> cols;
    1:     mTree->GetColumns(getter_AddRefs(cols));
    1:     if (cols)
    1:       cols->GetKeyColumn(getter_AddRefs(keyCol));
    1: 
31673:     return mTreeView->GetCellText(currentIndex, keyCol, aValue);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessNode implementation
31673: 
29825: PRBool
29825: nsXULTreeAccessible::IsDefunct()
29825: {
51865:   return nsAccessibleWrap::IsDefunct() || !mTree || !mTreeView;
29825: }
29825: 
43538: void
21169: nsXULTreeAccessible::Shutdown()
    1: {
31673:   // XXX: we don't remove accessible from document cache if shutdown wasn't
31673:   // initiated by document destroying. Note, we can't remove accessible from
31673:   // document cache here while document is going to be shutdown. Note, this is
31673:   // not unique place where we have similar problem.
39191:   ClearCache(mAccessibleCache);
31673: 
 1631:   mTree = nsnull;
 1631:   mTreeView = nsnull;
 1631: 
51865:   nsAccessibleWrap::Shutdown();
31673: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation (put methods here)
31673: 
52027: PRUint32
52027: nsXULTreeAccessible::NativeRole()
31673: {
31673:   // No primary column means we're in a list. In fact, history and mail turn off
31673:   // the primary flag when switching to a flat view.
31673: 
31673:   nsCOMPtr<nsITreeColumns> cols;
31673:   mTree->GetColumns(getter_AddRefs(cols));
31673:   nsCOMPtr<nsITreeColumn> primaryCol;
31673:   if (cols)
31673:     cols->GetPrimaryColumn(getter_AddRefs(primaryCol));
31673: 
52027:   return primaryCol ?
50861:     static_cast<PRUint32>(nsIAccessibleRole::ROLE_OUTLINE) :
50861:     static_cast<PRUint32>(nsIAccessibleRole::ROLE_LIST);
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsIAccessible implementation
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeAccessible::GetFocusedChild(nsIAccessible **aFocusedChild) 
31673: {
31673:   NS_ENSURE_ARG_POINTER(aFocusedChild);
31673:   *aFocusedChild = nsnull;
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
43504:   if (gLastFocusedNode != mContent)
31673:     return NS_OK;
31673: 
    1:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
43504:     do_QueryInterface(mContent);
    1:   if (multiSelect) {
31673:     PRInt32 row = -1;
    1:     multiSelect->GetCurrentIndex(&row);
31673:     if (row >= 0)
39191:       NS_IF_ADDREF(*aFocusedChild = GetTreeItemAccessible(row));
    1:   }
31673: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation (DON'T put methods here)
31673: 
64131: nsAccessible*
28197: nsXULTreeAccessible::GetChildAtPoint(PRInt32 aX, PRInt32 aY,
64131:                                      EWhichChildAtPoint aWhichChild)
 5680: {
 5680:   nsIFrame *frame = GetFrame();
 5680:   if (!frame)
64131:     return nsnull;
 5680: 
 5680:   nsPresContext *presContext = frame->PresContext();
 5680:   nsCOMPtr<nsIPresShell> presShell = presContext->PresShell();
 5680: 
 5680:   nsIFrame *rootFrame = presShell->GetRootFrame();
64131:   NS_ENSURE_TRUE(rootFrame, nsnull);
 5680: 
 5680:   nsIntRect rootRect = rootFrame->GetScreenRectExternal();
 5680: 
31673:   PRInt32 clientX = presContext->DevPixelsToIntCSSPixels(aX - rootRect.x);
31673:   PRInt32 clientY = presContext->DevPixelsToIntCSSPixels(aY - rootRect.y);
 5680: 
 5680:   PRInt32 row = -1;
 5680:   nsCOMPtr<nsITreeColumn> column;
 5680:   nsCAutoString childEltUnused;
 5680:   mTree->GetCellAt(clientX, clientY, &row, getter_AddRefs(column),
 5680:                    childEltUnused);
 5680: 
 5680:   // If we failed to find tree cell for the given point then it might be
 5680:   // tree columns.
 5680:   if (row == -1 || !column)
64131:     return nsAccessibleWrap::GetChildAtPoint(aX, aY, aWhichChild);
 5680: 
39191:   nsAccessible *child = GetTreeItemAccessible(row);
64131:   if (aWhichChild == eDeepestChild && child) {
31673:     // Look for accessible cell for the found item accessible.
42124:     nsRefPtr<nsXULTreeItemAccessibleBase> treeitem = do_QueryObject(child);
31673: 
39191:     nsAccessible *cell = treeitem->GetCellAccessible(column);
39191:     if (cell)
39191:       child = cell;
31673:   }
31673: 
64131:   return child;
 5680: }
 5680: 
31673: ////////////////////////////////////////////////////////////////////////////////
51865: // nsXULTreeAccessible: SelectAccessible
31673: 
51865: bool
51865: nsXULTreeAccessible::IsSelect()
    1: {
51865:   return true;
51865: }
    1: 
51865: already_AddRefed<nsIArray>
51865: nsXULTreeAccessible::SelectedItems()
51865: {
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
51865:     return nsnull;
51865: 
51865:   nsCOMPtr<nsIMutableArray> selectedItems =
    1:     do_CreateInstance(NS_ARRAY_CONTRACTID);
51865:   if (!selectedItems)
51865:     return nsnull;
    1: 
60690:   PRInt32 rangeCount = 0;
60690:   selection->GetRangeCount(&rangeCount);
60690:   for (PRInt32 rangeIdx = 0; rangeIdx < rangeCount; rangeIdx++) {
60690:     PRInt32 firstIdx = 0, lastIdx = -1;
60690:     selection->GetRangeAt(rangeIdx, &firstIdx, &lastIdx);
60690:     for (PRInt32 rowIdx = firstIdx; rowIdx <= lastIdx; rowIdx++) {
60690:       nsIAccessible* item = GetTreeItemAccessible(rowIdx);
51865:       if (item)
51865:         selectedItems->AppendElement(item, PR_FALSE);
    1:     }
    1:   }
    1: 
51865:   nsIMutableArray* items = nsnull;
51865:   selectedItems.forget(&items);
51865:   return items;
    1: }
    1: 
51865: PRUint32
51865: nsXULTreeAccessible::SelectedItemCount()
    1: {
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection) {
51865:     PRInt32 count = 0;
51865:     selection->GetCount(&count);
51865:     return count;
    1:   }
    1: 
51865:   return 0;
    1: }
    1: 
51865: bool
51865: nsXULTreeAccessible::AddItemToSelection(PRUint32 aIndex)
    1: {
51865:   nsCOMPtr<nsITreeSelection> selection;
51865:   mTreeView->GetSelection(getter_AddRefs(selection));
51865:   if (selection) {
51865:     PRBool isSelected = PR_FALSE;
51865:     selection->IsSelected(aIndex, &isSelected);
51865:     if (!isSelected)
51865:       selection->ToggleSelect(aIndex);
51865: 
51865:     return true;
51865:   }
51865:   return false;
    1: }
    1: 
51865: bool
51865: nsXULTreeAccessible::RemoveItemFromSelection(PRUint32 aIndex)
    1: {
51865:   nsCOMPtr<nsITreeSelection> selection;
51865:   mTreeView->GetSelection(getter_AddRefs(selection));
51865:   if (selection) {
51865:     PRBool isSelected = PR_FALSE;
51865:     selection->IsSelected(aIndex, &isSelected);
51865:     if (isSelected)
51865:       selection->ToggleSelect(aIndex);
51865: 
51865:     return true;
51865:   }
51865:   return false;
    1: }
    1: 
51865: bool
51865: nsXULTreeAccessible::IsItemSelected(PRUint32 aIndex)
    1: {
51865:   nsCOMPtr<nsITreeSelection> selection;
51865:   mTreeView->GetSelection(getter_AddRefs(selection));
51865:   if (selection) {
51865:     PRBool isSelected = PR_FALSE;
51865:     selection->IsSelected(aIndex, &isSelected);
51865:     return isSelected;
51865:   }
51865:   return false;
    1: }
    1: 
51865: bool
51865: nsXULTreeAccessible::UnselectAll()
    1: {
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
51865:     return false;
51865: 
51865:   selection->ClearSelection();
51865:   return true;
51865: }
51865: 
51865: nsAccessible*
51865: nsXULTreeAccessible::GetSelectedItem(PRUint32 aIndex)
51865: {
51865:   nsCOMPtr<nsITreeSelection> selection;
51865:   mTreeView->GetSelection(getter_AddRefs(selection));
51865:   if (!selection)
51865:     return nsnull;
    1: 
60734:   PRUint32 selCount = 0;
60734:   PRInt32 rangeCount = 0;
60734:   selection->GetRangeCount(&rangeCount);
60734:   for (PRInt32 rangeIdx = 0; rangeIdx < rangeCount; rangeIdx++) {
60734:     PRInt32 firstIdx = 0, lastIdx = -1;
60734:     selection->GetRangeAt(rangeIdx, &firstIdx, &lastIdx);
60734:     for (PRInt32 rowIdx = firstIdx; rowIdx <= lastIdx; rowIdx++) {
51865:       if (selCount == aIndex)
60734:         return GetTreeItemAccessible(rowIdx);
51865: 
    1:       selCount++;
    1:     }
    1:   }
    1: 
51865:   return nsnull;
    1: }
    1: 
51865: bool
51865: nsXULTreeAccessible::SelectAll()
    1: {
    1:   // see if we are multiple select if so set ourselves as such
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
34090:   if (selection) {
34090:     PRBool single = PR_FALSE;
34090:     selection->GetSingle(&single);
34090:     if (!single) {
    1:       selection->SelectAll();
51865:       return true;
    1:     }
    1:   }
    1: 
51865:   return false;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
35523: // nsXULTreeAccessible: nsAccessible implementation
35523: 
36989: nsAccessible*
35523: nsXULTreeAccessible::GetChildAt(PRUint32 aIndex)
35523: {
35523:   PRInt32 childCount = nsAccessible::GetChildCount();
35523:   if (childCount == -1)
35523:     return nsnull;
35523: 
35523:   if (static_cast<PRInt32>(aIndex) < childCount)
35523:     return nsAccessible::GetChildAt(aIndex);
35523: 
39191:   return GetTreeItemAccessible(aIndex - childCount);
35523: }
35523: 
35523: PRInt32
35523: nsXULTreeAccessible::GetChildCount()
35523: {
35523:   // tree's children count is row count + treecols count.
35523:   PRInt32 childCount = nsAccessible::GetChildCount();
35523:   if (childCount == -1)
35523:     return -1;
35523: 
35523:   PRInt32 rowCount = 0;
35523:   mTreeView->GetRowCount(&rowCount);
35523:   childCount += rowCount;
35523: 
35523:   return childCount;
35523: }
35523: 
35523: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: public implementation
29825: 
39191: nsAccessible*
39191: nsXULTreeAccessible::GetTreeItemAccessible(PRInt32 aRow)
    1: {
35278:   if (aRow < 0 || IsDefunct())
39191:     return nsnull;
 6087: 
31673:   PRInt32 rowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&rowCount);
31673:   if (NS_FAILED(rv) || aRow >= rowCount)
39191:     return nsnull;
    1: 
31673:   void *key = reinterpret_cast<void*>(aRow);
57413:   nsAccessible* cachedTreeItem = mAccessibleCache.GetWeak(key);
57413:   if (cachedTreeItem)
57413:     return cachedTreeItem;
29825: 
57413:   nsRefPtr<nsAccessible> treeItem = CreateTreeItemAccessible(aRow);
57413:   if (treeItem) {
57413:     if (mAccessibleCache.Put(key, treeItem)) {
57413:       if (GetDocAccessible()->BindToDocument(treeItem, nsnull))
57413:         return treeItem;
21169: 
57413:       mAccessibleCache.Remove(key);
57413:     }
    1:   }
29825: 
39191:   return nsnull;
39191: }
39191: 
29825: void
 8868: nsXULTreeAccessible::InvalidateCache(PRInt32 aRow, PRInt32 aCount)
 8868: {
29825:   if (IsDefunct())
29825:     return;
29825: 
 8868:   // Do not invalidate the cache if rows have been inserted.
 8868:   if (aCount > 0)
29825:     return;
10409: 
57413:   nsDocAccessible* document = GetDocAccessible();
57413: 
31673:   // Fire destroy event for removed tree items and delete them from caches.
 8868:   for (PRInt32 rowIdx = aRow; rowIdx < aRow - aCount; rowIdx++) {
38063: 
31673:     void* key = reinterpret_cast<void*>(rowIdx);
57413:     nsAccessible* treeItem = mAccessibleCache.GetWeak(key);
 8868: 
57413:     if (treeItem) {
51377:       nsRefPtr<AccEvent> event =
57413:         new AccEvent(nsIAccessibleEvent::EVENT_HIDE, treeItem);
37282:       nsEventShell::FireEvent(event);
 8868: 
57413:       // Unbind from document, shutdown and remove from tree cache.
57413:       document->UnbindFromDocument(treeItem);
39191:       mAccessibleCache.Remove(key);
31673:     }
31673:   }
31673: 
31673:   // We dealt with removed tree items already however we may keep tree items
31673:   // having row indexes greater than row count. We should remove these dead tree
31673:   // items silently from caches.
 8868:   PRInt32 newRowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&newRowCount);
29825:   if (NS_FAILED(rv))
29825:     return;
 8868: 
 8868:   PRInt32 oldRowCount = newRowCount - aCount;
 8868: 
 8868:   for (PRInt32 rowIdx = newRowCount; rowIdx < oldRowCount; ++rowIdx) {
38063: 
31673:     void *key = reinterpret_cast<void*>(rowIdx);
57413:     nsAccessible* treeItem = mAccessibleCache.GetWeak(key);
31673: 
57413:     if (treeItem) {
57413:       // Unbind from document, shutdown and remove from tree cache.
57413:       document->UnbindFromDocument(treeItem);
39191:       mAccessibleCache.Remove(key);
 8868:     }
 8868:   }
 8868: }
 8868: 
29825: void
11389: nsXULTreeAccessible::TreeViewInvalidated(PRInt32 aStartRow, PRInt32 aEndRow,
11389:                                          PRInt32 aStartCol, PRInt32 aEndCol)
11389: {
29825:   if (IsDefunct())
29825:     return;
11389: 
15375:   PRInt32 endRow = aEndRow;
11389: 
11389:   nsresult rv;
11389:   if (endRow == -1) {
11389:     PRInt32 rowCount = 0;
11389:     rv = mTreeView->GetRowCount(&rowCount);
29825:     if (NS_FAILED(rv))
29825:       return;
11389: 
11389:     endRow = rowCount - 1;
11389:   }
11389: 
11389:   nsCOMPtr<nsITreeColumns> treeColumns;
11389:   mTree->GetColumns(getter_AddRefs(treeColumns));
29825:   if (!treeColumns)
29825:     return;
11389: 
15375:   PRInt32 endCol = aEndCol;
15375: 
11389:   if (endCol == -1) {
11389:     PRInt32 colCount = 0;
11389:     rv = treeColumns->GetCount(&colCount);
29825:     if (NS_FAILED(rv))
29825:       return;
11389: 
11389:     endCol = colCount - 1;
11389:   }
11389: 
11389:   for (PRInt32 rowIdx = aStartRow; rowIdx <= endRow; ++rowIdx) {
38063: 
31673:     void *key = reinterpret_cast<void*>(rowIdx);
39191:     nsAccessible *accessible = mAccessibleCache.GetWeak(key);
11389: 
39191:     if (accessible) {
42124:       nsRefPtr<nsXULTreeItemAccessibleBase> treeitemAcc = do_QueryObject(accessible);
29825:       NS_ASSERTION(treeitemAcc, "Wrong accessible at the given key!");
11389: 
31673:       treeitemAcc->RowInvalidated(aStartCol, endCol);
11389:     }
11389:   }
11389: }
11389: 
29825: void
15375: nsXULTreeAccessible::TreeViewChanged()
15375: {
29825:   if (IsDefunct())
29825:     return;
15375: 
58222:   // Fire reorder event on tree accessible on accessible tree (do not fire
58222:   // show/hide events on tree items because it can be expensive to fire them for
58222:   // each tree item.
58222:   nsRefPtr<AccEvent> reorderEvent =
58222:     new AccEvent(nsIAccessibleEvent::EVENT_REORDER, this, eAutoDetect,
58222:                  AccEvent::eCoalesceFromSameSubtree);
58222:   if (reorderEvent)
58222:     GetDocAccessible()->FireDelayedAccessibleEvent(reorderEvent);
15375: 
58222:   // Clear cache.
39191:   ClearCache(mAccessibleCache);
15375:   mTree->GetView(getter_AddRefs(mTreeView));
15375: }
15375: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: protected implementation
31673: 
39191: already_AddRefed<nsAccessible>
39191: nsXULTreeAccessible::CreateTreeItemAccessible(PRInt32 aRow)
    1: {
39191:   nsRefPtr<nsAccessible> accessible =
43504:     new nsXULTreeItemAccessible(mContent, mWeakShell, this, mTree, mTreeView,
39191:                                 aRow);
39191: 
39191:   return accessible.forget();
    1: }
    1:                              
15375: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase
31673: ////////////////////////////////////////////////////////////////////////////////
    1: 
31673: nsXULTreeItemAccessibleBase::
43504:   nsXULTreeItemAccessibleBase(nsIContent *aContent, nsIWeakReference *aShell,
36989:                               nsAccessible *aParent, nsITreeBoxObject *aTree,
31673:                               nsITreeView *aTreeView, PRInt32 aRow) :
47804:   nsAccessibleWrap(aContent, aShell),
47804:   mTree(aTree), mTreeView(aTreeView), mRow(aRow)
    1: {
31673:   mParent = aParent;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsISupports implementation
29825: 
31673: NS_IMPL_ISUPPORTS_INHERITED1(nsXULTreeItemAccessibleBase,
31673:                              nsAccessible,
31673:                              nsXULTreeItemAccessibleBase)
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsIAccessible implementation
11389: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetFocusedChild(nsIAccessible **aFocusedChild) 
    1: {
31673:   NS_ENSURE_ARG_POINTER(aFocusedChild);
31673:   *aFocusedChild = nsnull;
31673: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
43504:   if (gLastFocusedNode != mContent)
31673:     return NS_OK;
31673: 
31673:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
43504:     do_QueryInterface(mContent);
31673: 
31673:   if (multiSelect) {
31673:     PRInt32 row = -1;
31673:     multiSelect->GetCurrentIndex(&row);
31673:     if (row == mRow)
31673:       NS_ADDREF(*aFocusedChild = this);
    1:   }
    1: 
31673:   return NS_OK;
    1: }
    1: 
28029: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetBounds(PRInt32 *aX, PRInt32 *aY,
28029:                                        PRInt32 *aWidth, PRInt32 *aHeight)
    1: {
28029:   NS_ENSURE_ARG_POINTER(aX);
28029:   *aX = 0;
28029:   NS_ENSURE_ARG_POINTER(aY);
28029:   *aY = 0;
28029:   NS_ENSURE_ARG_POINTER(aWidth);
28029:   *aWidth = 0;
28029:   NS_ENSURE_ARG_POINTER(aHeight);
28029:   *aHeight = 0;
    1: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
31673:   // Get x coordinate and width from treechildren element, get y coordinate and
31673:   // height from tree cell.
    1: 
28029:   nsCOMPtr<nsIBoxObject> boxObj = nsCoreUtils::GetTreeBodyBoxObject(mTree);
28029:   NS_ENSURE_STATE(boxObj);
    1: 
31673:   nsCOMPtr<nsITreeColumn> column = nsCoreUtils::GetFirstSensibleColumn(mTree);
31673: 
31673:   PRInt32 x = 0, y = 0, width = 0, height = 0;
31673:   nsresult rv = mTree->GetCoordsForCellItem(mRow, column, EmptyCString(),
31673:                                             &x, &y, &width, &height);
28029:   NS_ENSURE_SUCCESS(rv, rv);
28029: 
31673:   boxObj->GetWidth(&width);
31673: 
28029:   PRInt32 tcX = 0, tcY = 0;
28029:   boxObj->GetScreenX(&tcX);
28029:   boxObj->GetScreenY(&tcY);
31673: 
31673:   x = tcX;
31673:   y += tcY;
31673: 
31673:   nsPresContext *presContext = GetPresContext();
31673:   *aX = presContext->CSSPixelsToDevPixels(x);
31673:   *aY = presContext->CSSPixelsToDevPixels(y);
31673:   *aWidth = presContext->CSSPixelsToDevPixels(width);
31673:   *aHeight = presContext->CSSPixelsToDevPixels(height);
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::SetSelected(PRBool aSelect)
    1: {
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection) {
    1:     PRBool isSelected;
    1:     selection->IsSelected(mRow, &isSelected);
    1:     if (isSelected != aSelect)
    1:       selection->ToggleSelect(mRow);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::TakeFocus()
    1: {
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection)
    1:     selection->SetCurrentIndex(mRow);
    1: 
    1:   // focus event will be fired here
    1:   return nsAccessible::TakeFocus();
    1: }
    1: 
24822: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetRelationByType(PRUint32 aRelationType,
24822:                                                nsIAccessibleRelation **aRelation)
    1: {
24822:   NS_ENSURE_ARG_POINTER(aRelation);
24822:   *aRelation = nsnull;
24822: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
 9622: 
 1628:   if (aRelationType == nsIAccessibleRelation::RELATION_NODE_CHILD_OF) {
    1:     PRInt32 parentIndex;
    1:     if (NS_SUCCEEDED(mTreeView->GetParentIndex(mRow, &parentIndex))) {
24822:       if (parentIndex == -1)
24822:         return nsRelUtils::AddTarget(aRelationType, aRelation, mParent);
24822: 
41373:       nsRefPtr<nsXULTreeAccessible> treeAcc = do_QueryObject(mParent);
29825: 
39191:       nsAccessible *logicalParent = treeAcc->GetTreeItemAccessible(parentIndex);
31673:       return nsRelUtils::AddTarget(aRelationType, aRelation, logicalParent);
    1:     }
24822: 
    1:     return NS_OK;
11438:   }
11438: 
24822:   return nsAccessible::GetRelationByType(aRelationType, aRelation);
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetNumActions(PRUint8 *aActionsCount)
11389: {
31673:   NS_ENSURE_ARG_POINTER(aActionsCount);
31673:   *aActionsCount = 0;
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   // "activate" action is available for all treeitems, "expand/collapse" action
31673:   // is avaible for treeitem which is container.
31673:   *aActionsCount = IsExpandable() ? 2 : 1;
31673:   return NS_OK;
11389: }
11389: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetActionName(PRUint8 aIndex, nsAString& aName)
11389: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   if (aIndex == eAction_Click) {
31673:     aName.AssignLiteral("activate");
31673:     return NS_OK;
31673:   }
31673: 
31673:   if (aIndex == eAction_Expand && IsExpandable()) {
31673:     PRBool isContainerOpen;
31673:     mTreeView->IsContainerOpen(mRow, &isContainerOpen);
31673:     if (isContainerOpen)
31673:       aName.AssignLiteral("collapse");
31673:     else
31673:       aName.AssignLiteral("expand");
31673: 
31673:     return NS_OK;
31673:   }
31673: 
31673:   return NS_ERROR_INVALID_ARG;
31673: }
31673: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::DoAction(PRUint8 aIndex)
31673: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   if (aIndex != eAction_Click &&
31673:       (aIndex != eAction_Expand || !IsExpandable()))
31673:     return NS_ERROR_INVALID_ARG;
31673: 
37481:   DoCommand(nsnull, aIndex);
37481:   return NS_OK;
11389: }
11389: 
 6094: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsAccessNode implementation
31673: 
31673: PRBool
31673: nsXULTreeItemAccessibleBase::IsDefunct()
31673: {
31673:   if (nsAccessibleWrap::IsDefunct() || !mTree || !mTreeView || mRow < 0)
31673:     return PR_TRUE;
31673: 
31673:   PRInt32 rowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&rowCount);
31673:   return NS_FAILED(rv) || mRow >= rowCount;
31673: }
31673: 
43538: void
31673: nsXULTreeItemAccessibleBase::Shutdown()
31673: {
31673:   mTree = nsnull;
31673:   mTreeView = nsnull;
31673:   mRow = -1;
31673: 
43538:   nsAccessibleWrap::Shutdown();
31673: }
31673: 
56292: bool
56292: nsXULTreeItemAccessibleBase::IsPrimaryForNode() const
56292: {
56292:   return false;
56292: }
56292: 
31673: ////////////////////////////////////////////////////////////////////////////////
35523: // nsXULTreeItemAccessibleBase: nsAccessible public methods
31673: 
36879: // nsIAccessible::groupPosition
31673: nsresult
36879: nsXULTreeItemAccessibleBase::GroupPosition(PRInt32 *aGroupLevel,
36879:                                            PRInt32 *aSimilarItemsInGroup,
36879:                                            PRInt32 *aPositionInGroup)
31673: {
36879:   NS_ENSURE_ARG_POINTER(aGroupLevel);
36879:   *aGroupLevel = 0;
36879: 
36879:   NS_ENSURE_ARG_POINTER(aSimilarItemsInGroup);
36879:   *aSimilarItemsInGroup = 0;
36879: 
36879:   NS_ENSURE_ARG_POINTER(aPositionInGroup);
36879:   *aPositionInGroup = 0;
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   PRInt32 level;
31673:   nsresult rv = mTreeView->GetLevel(mRow, &level);
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   PRInt32 topCount = 1;
31673:   for (PRInt32 index = mRow - 1; index >= 0; index--) {
31673:     PRInt32 lvl = -1;
31673:     if (NS_SUCCEEDED(mTreeView->GetLevel(index, &lvl))) {
31673:       if (lvl < level)
31673:         break;
31673: 
31673:       if (lvl == level)
31673:         topCount++;
31673:     }
31673:   }
31673: 
31673:   PRInt32 rowCount = 0;
31673:   rv = mTreeView->GetRowCount(&rowCount);
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   PRInt32 bottomCount = 0;
31673:   for (PRInt32 index = mRow + 1; index < rowCount; index++) {
31673:     PRInt32 lvl = -1;
31673:     if (NS_SUCCEEDED(mTreeView->GetLevel(index, &lvl))) {
31673:       if (lvl < level)
31673:         break;
31673: 
31673:       if (lvl == level)
31673:         bottomCount++;
31673:     }
31673:   }
31673: 
31673:   PRInt32 setSize = topCount + bottomCount;
31673:   PRInt32 posInSet = topCount;
31673: 
36879:   *aGroupLevel = level + 1;
36879:   *aSimilarItemsInGroup = setSize;
36879:   *aPositionInGroup = posInSet;
36879: 
31673:   return NS_OK;
31673: }
31673: 
67790: PRUint64
67790: nsXULTreeItemAccessibleBase::NativeState()
31673: {
31673:   // focusable and selectable states
67790:   PRUint64 state = states::FOCUSABLE | states::SELECTABLE;
31673: 
31673:   // expanded/collapsed state
31673:   if (IsExpandable()) {
31673:     PRBool isContainerOpen;
31673:     mTreeView->IsContainerOpen(mRow, &isContainerOpen);
67790:     state |= isContainerOpen ? states::EXPANDED : states::COLLAPSED;
31673:   }
31673: 
31673:   // selected state
31673:   nsCOMPtr<nsITreeSelection> selection;
31673:   mTreeView->GetSelection(getter_AddRefs(selection));
31673:   if (selection) {
31673:     PRBool isSelected;
31673:     selection->IsSelected(mRow, &isSelected);
31673:     if (isSelected)
67790:       state |= states::SELECTED;
31673:   }
31673: 
31673:   // focused state
31673:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
43504:     do_QueryInterface(mContent);
31673:   if (multiSelect) {
31673:     PRInt32 currentIndex;
31673:     multiSelect->GetCurrentIndex(&currentIndex);
31673:     if (currentIndex == mRow) {
67790:       state |= states::FOCUSED;
31673:     }
31673:   }
31673: 
31673:   // invisible state
31673:   PRInt32 firstVisibleRow, lastVisibleRow;
31673:   mTree->GetFirstVisibleRow(&firstVisibleRow);
31673:   mTree->GetLastVisibleRow(&lastVisibleRow);
31673:   if (mRow < firstVisibleRow || mRow > lastVisibleRow)
67790:     state |= states::INVISIBLE;
31673: 
67790:   return state;
31673: }
31673: 
61639: PRInt32
61639: nsXULTreeItemAccessibleBase::GetIndexInParent() const
61639: {
61639:   return mParent ? mParent->GetCachedChildCount() + mRow : -1;
61639: }
61639: 
31673: ////////////////////////////////////////////////////////////////////////////////
35523: // nsXULTreeItemAccessibleBase: nsAccessible protected methods
31673: 
31673: void
31673: nsXULTreeItemAccessibleBase::DispatchClickEvent(nsIContent *aContent,
31673:                                                 PRUint32 aActionIndex)
31673: {
31673:   if (IsDefunct())
31673:     return;
31673: 
31673:   nsCOMPtr<nsITreeColumns> columns;
31673:   mTree->GetColumns(getter_AddRefs(columns));
31673:   if (!columns)
31673:     return;
31673: 
31673:   // Get column and pseudo element.
31673:   nsCOMPtr<nsITreeColumn> column;
31673:   nsCAutoString pseudoElm;
31673: 
31673:   if (aActionIndex == eAction_Click) {
31673:     // Key column is visible and clickable.
31673:     columns->GetKeyColumn(getter_AddRefs(column));
31673:   } else {
31673:     // Primary column contains a twisty we should click on.
31673:     columns->GetPrimaryColumn(getter_AddRefs(column));
31673:     pseudoElm = NS_LITERAL_CSTRING("twisty");
31673:   }
31673: 
31673:   if (column)
31673:     nsCoreUtils::DispatchClickEvent(mTree, mRow, column, pseudoElm);
31673: }
31673: 
39191: nsAccessible*
35523: nsXULTreeItemAccessibleBase::GetSiblingAtOffset(PRInt32 aOffset,
35523:                                                 nsresult* aError)
35523: {
35523:   if (IsDefunct()) {
35523:     if (aError)
35523:       *aError = NS_ERROR_FAILURE;
35523: 
35523:     return nsnull;
35523:   }
35523: 
35523:   if (aError)
35523:     *aError = NS_OK; // fail peacefully
35523: 
47105:   return mParent->GetChildAt(GetIndexInParent() + aOffset);
35523: }
35523: 
35523: ////////////////////////////////////////////////////////////////////////////////
35523: // nsXULTreeItemAccessibleBase: protected implementation
35523: 
31673: PRBool
31673: nsXULTreeItemAccessibleBase::IsExpandable()
31673: {
31673:   PRBool isContainer = PR_FALSE;
31673:   mTreeView->IsContainer(mRow, &isContainer);
31673:   if (isContainer) {
31673:     PRBool isEmpty = PR_FALSE;
31673:     mTreeView->IsContainerEmpty(mRow, &isEmpty);
31673:     if (!isEmpty) {
31673:       nsCOMPtr<nsITreeColumns> columns;
31673:       mTree->GetColumns(getter_AddRefs(columns));
31673:       nsCOMPtr<nsITreeColumn> primaryColumn;
31673:       if (columns) {
31673:         columns->GetPrimaryColumn(getter_AddRefs(primaryColumn));
46208:         if (primaryColumn &&
46208:             !nsCoreUtils::IsColumnHidden(primaryColumn))
31673:           return PR_TRUE;
31673:       }
31673:     }
31673:   }
31673: 
31673:   return PR_FALSE;
31673: }
31673: 
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
31673: nsXULTreeItemAccessible::
43504:   nsXULTreeItemAccessible(nsIContent *aContent, nsIWeakReference *aShell,
36989:                           nsAccessible *aParent, nsITreeBoxObject *aTree,
31673:                           nsITreeView *aTreeView, PRInt32 aRow) :
43504:   nsXULTreeItemAccessibleBase(aContent, aShell, aParent, aTree, aTreeView, aRow)
31673: {
31673:   mColumn = nsCoreUtils::GetFirstSensibleColumn(mTree);
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsIAccessible implementation
31673: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessible::GetName(nsAString& aName)
31673: {
31673:   aName.Truncate();
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   mTreeView->GetCellText(mRow, mColumn, aName);
31673: 
31673:   // If there is still no name try the cell value:
31673:   // This is for graphical cells. We need tree/table view implementors to implement
31673:   // FooView::GetCellValue to return a meaningful string for cases where there is
31673:   // something shown in the cell (non-text) such as a star icon; in which case
31673:   // GetCellValue for that cell would return "starred" or "flagged" for example.
31673:   if (aName.IsEmpty())
31673:     mTreeView->GetCellValue(mRow, mColumn, aName);
31673: 
31673:   return NS_OK;
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsAccessNode implementation
31673: 
31673: PRBool
31673: nsXULTreeItemAccessible::IsDefunct()
31673: {
31673:   return nsXULTreeItemAccessibleBase::IsDefunct() || !mColumn;
31673: }
31673: 
43538: PRBool
31673: nsXULTreeItemAccessible::Init()
31673: {
43538:   if (!nsXULTreeItemAccessibleBase::Init())
43538:     return PR_FALSE;
31673: 
43538:   GetName(mCachedName);
43538:   return PR_TRUE;
31673: }
31673: 
43538: void
31673: nsXULTreeItemAccessible::Shutdown()
31673: {
31673:   mColumn = nsnull;
43538:   nsXULTreeItemAccessibleBase::Shutdown();
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsAccessible implementation
31673: 
52027: PRUint32
52027: nsXULTreeItemAccessible::NativeRole()
31673: {
39621:   nsCOMPtr<nsITreeColumns> columns;
39621:   mTree->GetColumns(getter_AddRefs(columns));
52027:   if (!columns) {
52027:     NS_ERROR("No tree columns object in the tree!");
52027:     return nsIAccessibleRole::ROLE_NOTHING;
52027:   }
31673: 
39621:   nsCOMPtr<nsITreeColumn> primaryColumn;
39621:   columns->GetPrimaryColumn(getter_AddRefs(primaryColumn));
31673: 
52027:   return primaryColumn ?
50861:     static_cast<PRUint32>(nsIAccessibleRole::ROLE_OUTLINEITEM) :
50861:     static_cast<PRUint32>(nsIAccessibleRole::ROLE_LISTITEM);
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsXULTreeItemAccessibleBase implementation
31673: 
31673: void
31673: nsXULTreeItemAccessible::RowInvalidated(PRInt32 aStartColIdx,
31673:                                         PRInt32 aEndColIdx)
31673: {
31673:   nsAutoString name;
31673:   GetName(name);
31673: 
31673:   if (name != mCachedName) {
37281:     nsEventShell::FireEvent(nsIAccessibleEvent::EVENT_NAME_CHANGE, this);
31673:     mCachedName = name;
31673:   }
31673: }
31673: 
35523: ////////////////////////////////////////////////////////////////////////////////
35523: // nsXULTreeItemAccessible: nsAccessible protected implementation
35523: 
35523: void
35523: nsXULTreeItemAccessible::CacheChildren()
35523: {
35523: }
35523: 
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
 6094: //  nsXULTreeColumnsAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
 6094: nsXULTreeColumnsAccessible::
43504:   nsXULTreeColumnsAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsXULColumnsAccessible(aContent, aShell)
    1: {
    1: }
    1: 
39191: nsAccessible*
35523: nsXULTreeColumnsAccessible::GetSiblingAtOffset(PRInt32 aOffset,
35523:                                                nsresult* aError)
    1: {
35523:   if (aOffset < 0)
35523:     return nsXULColumnsAccessible::GetSiblingAtOffset(aOffset, aError);
35523: 
35523:   if (IsDefunct()) {
35523:     if (aError)
35523:       *aError = NS_ERROR_FAILURE;
35523: 
35523:     return nsnull;
35523:   }
35523: 
35523:   if (aError)
35523:     *aError = NS_OK; // fail peacefully
    1: 
43504:   nsCOMPtr<nsITreeBoxObject> tree = nsCoreUtils::GetTreeBoxObject(mContent);
43504:   if (tree) {
    1:     nsCOMPtr<nsITreeView> treeView;
    1:     tree->GetView(getter_AddRefs(treeView));
    1:     if (treeView) {
31673:       PRInt32 rowCount = 0;
    1:       treeView->GetRowCount(&rowCount);
35523:       if (rowCount > 0 && aOffset <= rowCount) {
41373:         nsRefPtr<nsXULTreeAccessible> treeAcc = do_QueryObject(mParent);
13372: 
39191:         if (treeAcc)
39191:           return treeAcc->GetTreeItemAccessible(aOffset - 1);
    1:       }
    1:     }
    1:   }
    1: 
35523:   return nsnull;
    1: }
    1: 
