29366: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * vim: set ts=8 sw=4 et tw=78:
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * JS script operations.
    1:  */
    1: #include <string.h>
    1: #include "jstypes.h"
26316: #include "jsstdint.h"
55477: #include "jsutil.h"
    1: #include "jsprf.h"
    1: #include "jsapi.h"
    1: #include "jsatom.h"
    1: #include "jscntxt.h"
18863: #include "jsversion.h"
    1: #include "jsdbgapi.h"
    1: #include "jsemit.h"
    1: #include "jsfun.h"
    1: #include "jsinterp.h"
    1: #include "jslock.h"
    1: #include "jsnum.h"
    1: #include "jsopcode.h"
 6561: #include "jsparse.h"
18955: #include "jsscope.h"
    1: #include "jsscript.h"
24879: #include "jstracer.h"
    1: #if JS_HAS_XDR
    1: #include "jsxdrapi.h"
    1: #endif
52559: #include "methodjit/MethodJIT.h"
    1: 
53840: #include "jsinterpinlines.h"
42733: #include "jsobjinlines.h"
32737: #include "jsscriptinlines.h"
32737: 
37741: using namespace js;
54707: using namespace js::gc;
37741: 
59968: namespace js {
59968: 
59968: BindingKind
59992: Bindings::lookup(JSContext *cx, JSAtom *name, uintN *indexp) const
59968: {
59968:     JS_ASSERT(lastBinding);
59968: 
59968:     Shape *shape =
59992:         SHAPE_FETCH(Shape::search(cx->runtime, const_cast<Shape **>(&lastBinding),
59992:                     ATOM_TO_JSID(name)));
59968:     if (!shape)
59968:         return NONE;
59968: 
59968:     if (indexp)
59968:         *indexp = shape->shortid;
59968: 
59968:     if (shape->getter() == GetCallArg)
59968:         return ARGUMENT;
60254:     if (shape->getter() == GetCallUpvar)
59968:         return UPVAR;
59968: 
59968:     return shape->writable() ? VARIABLE : CONSTANT;
59968: }
59968: 
59968: bool
59968: Bindings::add(JSContext *cx, JSAtom *name, BindingKind kind)
59968: {
59968:     JS_ASSERT(lastBinding);
59968: 
59968:     /*
59968:      * We still follow 10.2.3 of ES3 and make argument and variable properties
59968:      * of the Call objects enumerable. ES5 reformulated all of its Clause 10 to
59968:      * avoid objects as activations, something we should do too.
59968:      */
59968:     uintN attrs = JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_SHARED;
59968: 
59968:     uint16 *indexp;
62395:     PropertyOp getter;
62395:     StrictPropertyOp setter;
59968:     uint32 slot = JSObject::CALL_RESERVED_SLOTS;
59968: 
59968:     if (kind == ARGUMENT) {
59968:         JS_ASSERT(nvars == 0);
59968:         JS_ASSERT(nupvars == 0);
59968:         indexp = &nargs;
59968:         getter = GetCallArg;
59968:         setter = SetCallArg;
59968:         slot += nargs;
59968:     } else if (kind == UPVAR) {
59968:         indexp = &nupvars;
60254:         getter = GetCallUpvar;
60254:         setter = SetCallUpvar;
59968:         slot = SHAPE_INVALID_SLOT;
59968:     } else {
59968:         JS_ASSERT(kind == VARIABLE || kind == CONSTANT);
59968:         JS_ASSERT(nupvars == 0);
59968: 
59968:         indexp = &nvars;
59968:         getter = GetCallVar;
59968:         setter = SetCallVar;
59968:         if (kind == CONSTANT)
59968:             attrs |= JSPROP_READONLY;
59968:         slot += nargs + nvars;
59968:     }
59968: 
59974:     if (*indexp == BINDING_COUNT_LIMIT) {
59968:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
59968:                              (kind == ARGUMENT)
59968:                              ? JSMSG_TOO_MANY_FUN_ARGS
59968:                              : JSMSG_TOO_MANY_LOCALS);
59968:         return false;
59968:     }
59968: 
59968:     jsid id;
59968:     if (!name) {
59968:         JS_ASSERT(kind == ARGUMENT); /* destructuring */
59968:         id = INT_TO_JSID(nargs);
59968:     } else {
59968:         id = ATOM_TO_JSID(name);
59968:     }
59968: 
59968:     Shape child(id, getter, setter, slot, attrs, Shape::HAS_SHORTID, *indexp);
59968: 
59968:     Shape *shape = lastBinding->getChild(cx, child, &lastBinding);
59968:     if (!shape)
59968:         return false;
59968: 
59968:     JS_ASSERT(lastBinding == shape);
59968:     ++*indexp;
59968:     return true;
59968: }
59968: 
59968: jsuword *
59968: Bindings::getLocalNameArray(JSContext *cx, JSArenaPool *pool)
59968: {
59968:    JS_ASSERT(lastBinding);
59968: 
59968:    JS_ASSERT(hasLocalNames());
59968: 
59968:     uintN n = countLocalNames();
59968:     jsuword *names;
59968: 
59968:     JS_ASSERT(SIZE_MAX / size_t(n) > sizeof *names);
59968:     JS_ARENA_ALLOCATE_CAST(names, jsuword *, pool, size_t(n) * sizeof *names);
59968:     if (!names) {
59968:         js_ReportOutOfScriptQuota(cx);
59968:         return NULL;
59968:     }
59968: 
59968: #ifdef DEBUG
59968:     for (uintN i = 0; i != n; i++)
59968:         names[i] = 0xdeadbeef;
59968: #endif
59968: 
59968:     for (Shape::Range r = lastBinding; !r.empty(); r.popFront()) {
59968:         const Shape &shape = r.front();
59968:         uintN index = uint16(shape.shortid);
59968:         jsuword constFlag = 0;
59968: 
59968:         if (shape.getter() == GetCallArg) {
59968:             JS_ASSERT(index < nargs);
60254:         } else if (shape.getter() == GetCallUpvar) {
59968:             JS_ASSERT(index < nupvars);
59968:             index += nargs + nvars;
59968:         } else {
59968:             JS_ASSERT(index < nvars);
59968:             index += nargs;
59968:             if (!shape.writable())
59968:                 constFlag = 1;
59968:         }
59968: 
59968:         JSAtom *atom;
59968:         if (JSID_IS_ATOM(shape.id)) {
59968:             atom = JSID_TO_ATOM(shape.id);
59968:         } else {
59968:             JS_ASSERT(JSID_IS_INT(shape.id));
59968:             JS_ASSERT(shape.getter() == GetCallArg);
59968:             atom = NULL;
59968:         }
59968: 
59968:         names[index] = jsuword(atom);
59968:     }
59968: 
59968: #ifdef DEBUG
59968:     for (uintN i = 0; i != n; i++)
59968:         JS_ASSERT(names[i] != 0xdeadbeef);
59968: #endif
59968:     return names;
59968: }
59968: 
59968: const Shape *
59968: Bindings::lastArgument() const
59968: {
59968:     JS_ASSERT(lastBinding);
59968: 
59968:     const js::Shape *shape = lastVariable();
59968:     if (nvars > 0) {
59968:         while (shape->previous() && shape->getter() != GetCallArg)
59968:             shape = shape->previous();
59968:     }
59968:     return shape;
59968: }
59968: 
59968: const Shape *
59968: Bindings::lastVariable() const
59968: {
59968:     JS_ASSERT(lastBinding);
59968: 
59968:     const js::Shape *shape = lastUpvar();
59968:     if (nupvars > 0) {
60254:         while (shape->getter() == GetCallUpvar)
59968:             shape = shape->previous();
59968:     }
59968:     return shape;
59968: }
59968: 
59968: const Shape *
59968: Bindings::lastUpvar() const
59968: {
59968:     JS_ASSERT(lastBinding);
59968:     return lastBinding;
59968: }
59968: 
59968: int
59968: Bindings::sharpSlotBase(JSContext *cx)
59968: {
59968:     JS_ASSERT(lastBinding);
59968: #if JS_HAS_SHARP_VARS
59968:     if (JSAtom *name = js_Atomize(cx, "#array", 6, 0)) {
59968:         uintN index = uintN(-1);
59968: #ifdef DEBUG
59968:         BindingKind kind =
59968: #endif
59992:             lookup(cx, name, &index);
59968:         JS_ASSERT(kind == VARIABLE);
59968:         return int(index);
59968:     }
59968: #endif
59968:     return -1;
59968: }
59968: 
59968: void
59968: Bindings::makeImmutable()
59968: {
59968:     JS_ASSERT(lastBinding);
59968:     Shape *shape = lastBinding;
59968:     if (shape->inDictionary()) {
59968:         do {
59968:             JS_ASSERT(!shape->frozen());
59968:             shape->setFrozen();
59968:         } while ((shape = shape->parent) != NULL);
59968:     }
59968: }
59968: 
59968: void
59968: Bindings::trace(JSTracer *trc)
59968: {
59968:     for (const Shape *shape = lastBinding; shape; shape = shape->previous())
59968:         shape->trace(trc);
59968: }
59968: 
59968: } // namespace js
59968: 
    1: #if JS_HAS_XDR
    1: 
54840: enum ScriptBits {
54840:     NoScriptRval,
54840:     SavedCallerFun,
54840:     HasSharps,
54840:     StrictModeCode,
54840:     UsesEval,
54840:     UsesArguments
54840: };
54840: 
    1: JSBool
59220: js_XDRScript(JSXDRState *xdr, JSScript **scriptp, JSBool *hasMagic)
    1: {
59968:     JSScript *oldscript;
13474:     JSBool ok;
13474:     jsbytecode *code;
59968:     uint32 length, lineno, nslots;
59968:     uint32 natoms, nsrcnotes, ntrynotes, nobjects, nregexps, nconsts, i;
54840:     uint32 prologLength, version, encodedClosedCount;
55503:     uint16 nClosedArgs = 0, nClosedVars = 0;
 3235:     JSPrincipals *principals;
 3235:     uint32 encodeable;
    1:     JSBool filenameWasSaved;
59968:     jssrcnote *sn;
18870:     JSSecurityCallbacks *callbacks;
54840:     uint32 scriptBits = 0;
    1: 
59968:     JSContext *cx = xdr->cx;
59968:     JSScript *script = *scriptp;
59968:     nsrcnotes = ntrynotes = natoms = nobjects = nregexps = nconsts = 0;
    1:     filenameWasSaved = JS_FALSE;
59968:     jssrcnote *notes = NULL;
    1: 
52555:     /* Should not XDR scripts optimized for a single global object. */
59221:     JS_ASSERT_IF(script, !JSScript::isValidOffset(script->globalsOffset));
52555: 
59968:     uint32 magic;
    1:     if (xdr->mode == JSXDR_ENCODE)
    1:         magic = JSXDR_MAGIC_SCRIPT_CURRENT;
    1:     if (!JS_XDRUint32(xdr, &magic))
    1:         return JS_FALSE;
 3235:     if (magic != JSXDR_MAGIC_SCRIPT_CURRENT) {
 3235:         /* We do not provide binary compatibility with older scripts. */
    1:         if (!hasMagic) {
    1:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                                  JSMSG_BAD_SCRIPT_MAGIC);
    1:             return JS_FALSE;
    1:         }
    1:         *hasMagic = JS_FALSE;
    1:         return JS_TRUE;
    1:     }
    1:     if (hasMagic)
    1:         *hasMagic = JS_TRUE;
    1: 
59968:     /* XDR arguments, local vars, and upvars. */
59968:     uint16 nargs, nvars, nupvars;
59974: #if defined(DEBUG) || defined(__GNUC__) /* quell GCC overwarning */
59974:     nargs = nvars = nupvars = Bindings::BINDING_COUNT_LIMIT;
59974: #endif
59968:     uint32 argsVars, paddingUpvars;
59968:     if (xdr->mode == JSXDR_ENCODE) {
59968:         nargs = script->bindings.countArgs();
59968:         nvars = script->bindings.countVars();
59968:         nupvars = script->bindings.countUpvars();
59968:         argsVars = (nargs << 16) | nvars;
59968:         paddingUpvars = nupvars;
59968:     }
59968:     if (!JS_XDRUint32(xdr, &argsVars) || !JS_XDRUint32(xdr, &paddingUpvars))
59968:         return false;
59968:     if (xdr->mode == JSXDR_DECODE) {
59968:         nargs = argsVars >> 16;
59968:         nvars = argsVars & 0xFFFF;
59968:         JS_ASSERT((paddingUpvars >> 16) == 0);
59968:         nupvars = paddingUpvars & 0xFFFF;
59968:     }
59974:     JS_ASSERT(nargs != Bindings::BINDING_COUNT_LIMIT);
59974:     JS_ASSERT(nvars != Bindings::BINDING_COUNT_LIMIT);
59974:     JS_ASSERT(nupvars != Bindings::BINDING_COUNT_LIMIT);
59968: 
59968:     Bindings bindings(cx);
60555:     AutoBindingsRooter rooter(cx, bindings);
59968:     uint32 nameCount = nargs + nvars + nupvars;
59968:     if (nameCount > 0) {
59968:         struct AutoMark {
59968:           JSArenaPool * const pool;
59968:           void * const mark;
59968:           AutoMark(JSArenaPool *pool) : pool(pool), mark(JS_ARENA_MARK(pool)) { }
59968:           ~AutoMark() {
59968:             JS_ARENA_RELEASE(pool, mark);
59968:           }
59968:         } automark(&cx->tempPool);
59968: 
59968:         /*
59968:          * To xdr the names we prefix the names with a bitmap descriptor and
59968:          * then xdr the names as strings. For argument names (indexes below
59968:          * nargs) the corresponding bit in the bitmap is unset when the name
59968:          * is null. Such null names are not encoded or decoded. For variable
59968:          * names (indexes starting from nargs) bitmap's bit is set when the
59968:          * name is declared as const, not as ordinary var.
59968:          * */
59968:         uintN bitmapLength = JS_HOWMANY(nameCount, JS_BITS_PER_UINT32);
59968:         uint32 *bitmap;
59968:         JS_ARENA_ALLOCATE_CAST(bitmap, uint32 *, &cx->tempPool,
59968:                                bitmapLength * sizeof *bitmap);
59968:         if (!bitmap) {
59968:             js_ReportOutOfScriptQuota(cx);
59968:             return false;
59968:         }
59968: 
59968:         jsuword *names;
59968:         if (xdr->mode == JSXDR_ENCODE) {
59968:             names = script->bindings.getLocalNameArray(cx, &cx->tempPool);
59968:             if (!names)
59968:                 return false;
59968:             PodZero(bitmap, bitmapLength);
59968:             for (uintN i = 0; i < nameCount; i++) {
59968:                 if (i < nargs
59968:                     ? JS_LOCAL_NAME_TO_ATOM(names[i]) != NULL
59968:                     : JS_LOCAL_NAME_IS_CONST(names[i]))
59968:                 {
59968:                     bitmap[i >> JS_BITS_PER_UINT32_LOG2] |= JS_BIT(i & (JS_BITS_PER_UINT32 - 1));
59968:                 }
59968:             }
59968:         }
59968: #ifdef __GNUC__
59968:         else {
59968:             names = NULL;   /* quell GCC uninitialized warning */
59968:         }
59968: #endif
59968:         for (uintN i = 0; i < bitmapLength; ++i) {
59968:             if (!JS_XDRUint32(xdr, &bitmap[i]))
59968:                 return false;
59968:         }
59968: 
59968:         for (uintN i = 0; i < nameCount; i++) {
59968:             if (i < nargs &&
59968:                 !(bitmap[i >> JS_BITS_PER_UINT32_LOG2] & JS_BIT(i & (JS_BITS_PER_UINT32 - 1))))
59968:             {
59968:                 if (xdr->mode == JSXDR_DECODE) {
59968:                     uint16 dummy;
59968:                     if (!bindings.addDestructuring(cx, &dummy))
59968:                         return false;
59968:                 } else {
59968:                     JS_ASSERT(!JS_LOCAL_NAME_TO_ATOM(names[i]));
59968:                 }
59968:                 continue;
59968:             }
59968: 
59968:             JSAtom *name;
59968:             if (xdr->mode == JSXDR_ENCODE)
59968:                 name = JS_LOCAL_NAME_TO_ATOM(names[i]);
59968:             if (!js_XDRAtom(xdr, &name))
59968:                 return false;
59968:             if (xdr->mode == JSXDR_DECODE) {
59968:                 BindingKind kind = (i < nargs)
59968:                                    ? ARGUMENT
59987:                                    : (i < uintN(nargs + nvars))
59968:                                    ? (bitmap[i >> JS_BITS_PER_UINT32_LOG2] &
59968:                                       JS_BIT(i & (JS_BITS_PER_UINT32 - 1))
59968:                                       ? CONSTANT
59968:                                       : VARIABLE)
59968:                                    : UPVAR;
59968:                 if (!bindings.add(cx, name, kind))
59968:                     return false;
59968:             }
59968:         }
59968: 
59968:         if (xdr->mode == JSXDR_DECODE)
59968:             bindings.makeImmutable();
59968:     }
59968: 
34290:     if (xdr->mode == JSXDR_ENCODE)
59220:         length = script->length;
34290:     if (!JS_XDRUint32(xdr, &length))
34290:         return JS_FALSE;
34290: 
34290:     if (xdr->mode == JSXDR_ENCODE) {
25144:         prologLength = script->main - script->code;
53848:         JS_ASSERT(script->getVersion() != JSVERSION_UNKNOWN);
53848:         version = (uint32)script->getVersion() | (script->nfixed << 16);
    1:         lineno = (uint32)script->lineno;
16072:         nslots = (uint32)script->nslots;
27012:         nslots = (uint32)((script->staticLevel << 16) | script->nslots);
 3235:         natoms = (uint32)script->atomMap.length;
    1: 
    1:         /* Count the srcnotes, keeping notes pointing at the first one. */
32723:         notes = script->notes();
    1:         for (sn = notes; !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn))
    1:             continue;
25144:         nsrcnotes = sn - notes;
    1:         nsrcnotes++;            /* room for the terminator */
    1: 
59221:         if (JSScript::isValidOffset(script->objectsOffset))
32723:             nobjects = script->objects()->length;
59221:         if (JSScript::isValidOffset(script->upvarsOffset))
59968:             JS_ASSERT(script->bindings.countUpvars() == script->upvars()->length);
59221:         if (JSScript::isValidOffset(script->regexpsOffset))
32723:             nregexps = script->regexps()->length;
59221:         if (JSScript::isValidOffset(script->trynotesOffset))
32723:             ntrynotes = script->trynotes()->length;
59221:         if (JSScript::isValidOffset(script->constOffset))
48470:             nconsts = script->consts()->length;
54840: 
54840:         nClosedArgs = script->nClosedArgs;
54840:         nClosedVars = script->nClosedVars;
54840:         encodedClosedCount = (nClosedArgs << 16) | nClosedVars;
54840: 
54840:         if (script->noScriptRval)
54840:             scriptBits |= (1 << NoScriptRval);
54840:         if (script->savedCallerFun)
54840:             scriptBits |= (1 << SavedCallerFun);
54840:         if (script->hasSharps)
54840:             scriptBits |= (1 << HasSharps);
54840:         if (script->strictModeCode)
54840:             scriptBits |= (1 << StrictModeCode);
54840:         if (script->usesEval)
54840:             scriptBits |= (1 << UsesEval);
54840:         if (script->usesArguments)
54840:             scriptBits |= (1 << UsesArguments);
59962:         JS_ASSERT(!script->compileAndGo);
59962:         JS_ASSERT(!script->hasSingletons);
    1:     }
    1: 
    1:     if (!JS_XDRUint32(xdr, &prologLength))
    1:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &version))
    1:         return JS_FALSE;
    1: 
 3235:     /*
59968:      * To fuse allocations, we need srcnote, atom, objects, regexp, and trynote
59968:      * counts early.
 3235:      */
 3235:     if (!JS_XDRUint32(xdr, &natoms))
 3235:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &nsrcnotes))
    1:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &ntrynotes))
    1:         return JS_FALSE;
 3235:     if (!JS_XDRUint32(xdr, &nobjects))
 3235:         return JS_FALSE;
 3235:     if (!JS_XDRUint32(xdr, &nregexps))
 3235:         return JS_FALSE;
48470:     if (!JS_XDRUint32(xdr, &nconsts))
48470:         return JS_FALSE;
54840:     if (!JS_XDRUint32(xdr, &encodedClosedCount))
54840:         return JS_FALSE;
54840:     if (!JS_XDRUint32(xdr, &scriptBits))
54840:         return JS_FALSE;
    1: 
40395:     AutoScriptRooter tvr(cx, NULL);
40395: 
    1:     if (xdr->mode == JSXDR_DECODE) {
54840:         nClosedArgs = encodedClosedCount >> 16;
54840:         nClosedVars = encodedClosedCount & 0xFFFF;
54840: 
61450:         /* Note: version is packed into the 32b space with another 16b value. */
61450:         JSVersion version_ = JSVersion(version & JS_BITMASK(16));
61450:         JS_ASSERT((version_ & VersionFlags::FULL_MASK) == uintN(version_));
54840:         script = JSScript::NewScript(cx, length, nsrcnotes, natoms, nobjects, nupvars,
54840:                                      nregexps, ntrynotes, nconsts, 0, nClosedArgs,
61450:                                      nClosedVars, version_);
    1:         if (!script)
    1:             return JS_FALSE;
 3235: 
59968:         script->bindings.transfer(cx, &bindings);
59968: 
    1:         script->main += prologLength;
25628:         script->nfixed = uint16(version >> 16);
    1: 
    1:         /* If we know nsrcnotes, we allocated space for notes in script. */
32723:         notes = script->notes();
    1:         *scriptp = script;
40395:         tvr.setScript(script);
54840: 
54840:         if (scriptBits & (1 << NoScriptRval))
54840:             script->noScriptRval = true;
54840:         if (scriptBits & (1 << SavedCallerFun))
54840:             script->savedCallerFun = true;
54840:         if (scriptBits & (1 << HasSharps))
54840:             script->hasSharps = true;
54840:         if (scriptBits & (1 << StrictModeCode))
54840:             script->strictModeCode = true;
54840:         if (scriptBits & (1 << UsesEval))
54840:             script->usesEval = true;
54840:         if (scriptBits & (1 << UsesArguments))
54840:             script->usesArguments = true;
    1:     }
    1: 
    1:     /*
 3235:      * Control hereafter must goto error on failure, in order for the
 3235:      * DECODE case to destroy script.
    1:      */
    1:     oldscript = xdr->script;
13474:     code = script->code;
13474:     if (xdr->mode == JSXDR_ENCODE) {
13496:         code = js_UntrapScriptCode(cx, script);
13474:         if (!code)
13474:             goto error;
13474:     }
13474: 
    1:     xdr->script = script;
13474:     ok = JS_XDRBytes(xdr, (char *) code, length * sizeof(jsbytecode));
13474: 
13474:     if (code != script->code)
30851:         cx->free(code);
13474: 
13474:     if (!ok)
    1:         goto error;
    1: 
    1:     if (!JS_XDRBytes(xdr, (char *)notes, nsrcnotes * sizeof(jssrcnote)) ||
    1:         !JS_XDRCStringOrNull(xdr, (char **)&script->filename) ||
    1:         !JS_XDRUint32(xdr, &lineno) ||
16072:         !JS_XDRUint32(xdr, &nslots)) {
    1:         goto error;
    1:     }
    1: 
18870:     callbacks = JS_GetSecurityCallbacks(cx);
    1:     if (xdr->mode == JSXDR_ENCODE) {
    1:         principals = script->principals;
18870:         encodeable = callbacks && callbacks->principalsTranscoder;
    1:         if (!JS_XDRUint32(xdr, &encodeable))
    1:             goto error;
    1:         if (encodeable &&
18870:             !callbacks->principalsTranscoder(xdr, &principals)) {
    1:             goto error;
    1:         }
    1:     } else {
    1:         if (!JS_XDRUint32(xdr, &encodeable))
    1:             goto error;
    1:         if (encodeable) {
18870:             if (!(callbacks && callbacks->principalsTranscoder)) {
    1:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                                      JSMSG_CANT_DECODE_PRINCIPALS);
    1:                 goto error;
    1:             }
18870:             if (!callbacks->principalsTranscoder(xdr, &principals))
    1:                 goto error;
    1:             script->principals = principals;
    1:         }
    1:     }
    1: 
    1:     if (xdr->mode == JSXDR_DECODE) {
    1:         const char *filename = script->filename;
    1:         if (filename) {
    1:             filename = js_SaveScriptFilename(cx, filename);
    1:             if (!filename)
    1:                 goto error;
30851:             cx->free((void *) script->filename);
    1:             script->filename = filename;
    1:             filenameWasSaved = JS_TRUE;
    1:         }
    1:         script->lineno = (uintN)lineno;
18308:         script->nslots = (uint16)nslots;
27012:         script->staticLevel = (uint16)(nslots >> 16);
54840: 
 3235:     }
    1: 
 3235:     for (i = 0; i != natoms; ++i) {
 3235:         if (!js_XDRAtom(xdr, &script->atomMap.vector[i]))
 3235:             goto error;
 3235:     }
 1825: 
    1:     /*
 3235:      * Here looping from 0-to-length to xdr objects is essential. It ensures
18308:      * that block objects from the script->objects array will be written and
28093:      * restored in the outer-to-inner order. js_XDRBlockObject relies on this
28093:      * to restore the parent chain.
    1:      */
 3235:     for (i = 0; i != nobjects; ++i) {
32723:         JSObject **objp = &script->objects()->vector[i];
28093:         uint32 isBlock;
28093:         if (xdr->mode == JSXDR_ENCODE) {
48470:             Class *clasp = (*objp)->getClass();
28093:             JS_ASSERT(clasp == &js_FunctionClass ||
28093:                       clasp == &js_BlockClass);
28093:             isBlock = (clasp == &js_BlockClass) ? 1 : 0;
28093:         }
28093:         if (!JS_XDRUint32(xdr, &isBlock))
    1:             goto error;
28093:         if (isBlock == 0) {
28093:             if (!js_XDRFunctionObject(xdr, objp))
28093:                 goto error;
28093:         } else {
28093:             JS_ASSERT(isBlock == 1);
28093:             if (!js_XDRBlockObject(xdr, objp))
28093:                 goto error;
28093:         }
    1:     }
18308:     for (i = 0; i != nupvars; ++i) {
47573:         if (!JS_XDRUint32(xdr, reinterpret_cast<uint32 *>(&script->upvars()->vector[i])))
18308:             goto error;
18308:     }
 3235:     for (i = 0; i != nregexps; ++i) {
32723:         if (!js_XDRRegExpObject(xdr, &script->regexps()->vector[i]))
 3235:             goto error;
    1:     }
54840:     for (i = 0; i != nClosedArgs; ++i) {
54840:         if (!JS_XDRUint32(xdr, &script->closedSlots[i]))
54840:             goto error;
54840:     }
54840:     for (i = 0; i != nClosedVars; ++i) {
54840:         if (!JS_XDRUint32(xdr, &script->closedSlots[nClosedArgs + i]))
54840:             goto error;
54840:     }
    1: 
 3235:     if (ntrynotes != 0) {
 1825:         /*
 3235:          * We combine tn->kind and tn->stackDepth when serializing as XDR is not
 1825:          * efficient when serializing small integer types.
 1825:          */
 3235:         JSTryNote *tn, *tnfirst;
 3235:         uint32 kindAndDepth;
 1825:         JS_STATIC_ASSERT(sizeof(tn->kind) == sizeof(uint8));
 1825:         JS_STATIC_ASSERT(sizeof(tn->stackDepth) == sizeof(uint16));
    1: 
32723:         tnfirst = script->trynotes()->vector;
32723:         JS_ASSERT(script->trynotes()->length == ntrynotes);
 3235:         tn = tnfirst + ntrynotes;
 3235:         do {
 3235:             --tn;
 3235:             if (xdr->mode == JSXDR_ENCODE) {
 3235:                 kindAndDepth = ((uint32)tn->kind << 16)
 3235:                                | (uint32)tn->stackDepth;
 3235:             }
 1825:             if (!JS_XDRUint32(xdr, &kindAndDepth) ||
 1825:                 !JS_XDRUint32(xdr, &tn->start) ||
 1825:                 !JS_XDRUint32(xdr, &tn->length)) {
    1:                 goto error;
    1:             }
 3235:             if (xdr->mode == JSXDR_DECODE) {
 1825:                 tn->kind = (uint8)(kindAndDepth >> 16);
 1825:                 tn->stackDepth = (uint16)kindAndDepth;
    1:             }
 3235:         } while (tn != tnfirst);
 3235:     }
    1: 
48470:     for (i = 0; i != nconsts; ++i) {
48470:         if (!JS_XDRValue(xdr, Jsvalify(&script->consts()->vector[i])))
48470:             goto error;
48470:     }
48470: 
    1:     xdr->script = oldscript;
    1:     return JS_TRUE;
    1: 
    1:   error:
    1:     if (xdr->mode == JSXDR_DECODE) {
    1:         if (script->filename && !filenameWasSaved) {
30851:             cx->free((void *) script->filename);
    1:             script->filename = NULL;
    1:         }
    1:         js_DestroyScript(cx, script);
    1:         *scriptp = NULL;
    1:     }
 3235:     xdr->script = oldscript;
    1:     return JS_FALSE;
    1: }
    1: 
    1: #endif /* JS_HAS_XDR */
    1: 
    1: static void
    1: script_finalize(JSContext *cx, JSObject *obj)
    1: {
31452:     JSScript *script = (JSScript *) obj->getPrivate();
    1:     if (script)
59734:         js_DestroyScriptFromGC(cx, script);
    1: }
    1: 
  583: static void
  583: script_trace(JSTracer *trc, JSObject *obj)
    1: {
31452:     JSScript *script = (JSScript *) obj->getPrivate();
    1:     if (script)
  583:         js_TraceScript(trc, script);
    1: }
    1: 
48470: Class js_ScriptClass = {
39926:     "Script",
40885:     JSCLASS_HAS_PRIVATE |
39926:     JSCLASS_MARK_IS_TRACE | JSCLASS_HAS_CACHED_PROTO(JSProto_Object),
48622:     PropertyStub,         /* addProperty */
48622:     PropertyStub,         /* delProperty */
48622:     PropertyStub,         /* getProperty */
62395:     StrictPropertyStub,   /* setProperty */
48622:     EnumerateStub,
48622:     ResolveStub,
48622:     ConvertStub,
48622:     script_finalize,
48622:     NULL,                 /* reserved0   */
48622:     NULL,                 /* checkAccess */
48622:     NULL,                 /* call        */
48622:     NULL,                 /* construct   */
48622:     NULL,                 /* xdrObject   */
48622:     NULL,                 /* hasInstance */
48622:     JS_CLASS_TRACE(script_trace)
    1: };
    1: 
    1: /*
    1:  * Shared script filename management.
    1:  */
18907: static int
    1: js_compare_strings(const void *k1, const void *k2)
    1: {
 3164:     return strcmp((const char *) k1, (const char *) k2) == 0;
    1: }
    1: 
    1: /* NB: This struct overlays JSHashEntry -- see jshash.h, do not reorganize. */
    1: typedef struct ScriptFilenameEntry {
    1:     JSHashEntry         *next;          /* hash chain linkage */
    1:     JSHashNumber        keyHash;        /* key hash function result */
    1:     const void          *key;           /* ptr to filename, below */
    1:     uint32              flags;          /* user-defined filename prefix flags */
    1:     JSPackedBool        mark;           /* GC mark flag */
    1:     char                filename[3];    /* two or more bytes, NUL-terminated */
    1: } ScriptFilenameEntry;
    1: 
18907: static void *
 4529: js_alloc_table_space(void *priv, size_t size)
 4529: {
30851:     return js_malloc(size);
 4529: }
 4529: 
18907: static void
27012: js_free_table_space(void *priv, void *item, size_t size)
 4529: {
30851:     js_free(item);
 4529: }
 4529: 
18907: static JSHashEntry *
    1: js_alloc_sftbl_entry(void *priv, const void *key)
    1: {
 3164:     size_t nbytes = offsetof(ScriptFilenameEntry, filename) +
 3164:                     strlen((const char *) key) + 1;
    1: 
30851:     return (JSHashEntry *) js_malloc(JS_MAX(nbytes, sizeof(JSHashEntry)));
    1: }
    1: 
18907: static void
    1: js_free_sftbl_entry(void *priv, JSHashEntry *he, uintN flag)
    1: {
    1:     if (flag != HT_FREE_ENTRY)
    1:         return;
30851:     js_free(he);
    1: }
    1: 
    1: static JSHashAllocOps sftbl_alloc_ops = {
    1:     js_alloc_table_space,   js_free_table_space,
    1:     js_alloc_sftbl_entry,   js_free_sftbl_entry
    1: };
    1: 
33534: static void
33534: FinishRuntimeScriptState(JSRuntime *rt)
33534: {
33534:     if (rt->scriptFilenameTable) {
33534:         JS_HashTableDestroy(rt->scriptFilenameTable);
33534:         rt->scriptFilenameTable = NULL;
33534:     }
33534: #ifdef JS_THREADSAFE
33534:     if (rt->scriptFilenameTableLock) {
33534:         JS_DESTROY_LOCK(rt->scriptFilenameTableLock);
33534:         rt->scriptFilenameTableLock = NULL;
33534:     }
33534: #endif
33534: }
33534: 
    1: JSBool
    1: js_InitRuntimeScriptState(JSRuntime *rt)
    1: {
    1: #ifdef JS_THREADSAFE
    1:     JS_ASSERT(!rt->scriptFilenameTableLock);
    1:     rt->scriptFilenameTableLock = JS_NEW_LOCK();
    1:     if (!rt->scriptFilenameTableLock)
    1:         return JS_FALSE;
    1: #endif
    1:     JS_ASSERT(!rt->scriptFilenameTable);
    1:     rt->scriptFilenameTable =
    1:         JS_NewHashTable(16, JS_HashString, js_compare_strings, NULL,
    1:                         &sftbl_alloc_ops, NULL);
    1:     if (!rt->scriptFilenameTable) {
33534:         FinishRuntimeScriptState(rt);       /* free lock if threadsafe */
    1:         return JS_FALSE;
    1:     }
    1:     JS_INIT_CLIST(&rt->scriptFilenamePrefixes);
    1:     return JS_TRUE;
    1: }
    1: 
    1: typedef struct ScriptFilenamePrefix {
    1:     JSCList     links;      /* circular list linkage for easy deletion */
    1:     const char  *name;      /* pointer to pinned ScriptFilenameEntry string */
    1:     size_t      length;     /* prefix string length, precomputed */
    1:     uint32      flags;      /* user-defined flags to inherit from this prefix */
    1: } ScriptFilenamePrefix;
    1: 
    1: void
    1: js_FreeRuntimeScriptState(JSRuntime *rt)
    1: {
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
    1:     while (!JS_CLIST_IS_EMPTY(&rt->scriptFilenamePrefixes)) {
33534:         ScriptFilenamePrefix *sfp = (ScriptFilenamePrefix *)
33534:                                     rt->scriptFilenamePrefixes.next;
    1:         JS_REMOVE_LINK(&sfp->links);
30851:         js_free(sfp);
    1:     }
33534:     FinishRuntimeScriptState(rt);
    1: }
    1: 
    1: #ifdef DEBUG_brendan
    1: #define DEBUG_SFTBL
    1: #endif
    1: #ifdef DEBUG_SFTBL
    1: size_t sftbl_savings = 0;
    1: #endif
    1: 
    1: static ScriptFilenameEntry *
    1: SaveScriptFilename(JSRuntime *rt, const char *filename, uint32 flags)
    1: {
    1:     JSHashTable *table;
    1:     JSHashNumber hash;
    1:     JSHashEntry **hep;
    1:     ScriptFilenameEntry *sfe;
    1:     size_t length;
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     table = rt->scriptFilenameTable;
    1:     hash = JS_HashString(filename);
    1:     hep = JS_HashTableRawLookup(table, hash, filename);
    1:     sfe = (ScriptFilenameEntry *) *hep;
    1: #ifdef DEBUG_SFTBL
    1:     if (sfe)
    1:         sftbl_savings += strlen(sfe->filename);
    1: #endif
    1: 
    1:     if (!sfe) {
    1:         sfe = (ScriptFilenameEntry *)
    1:               JS_HashTableRawAdd(table, hep, hash, filename, NULL);
    1:         if (!sfe)
    1:             return NULL;
    1:         sfe->key = strcpy(sfe->filename, filename);
    1:         sfe->flags = 0;
    1:         sfe->mark = JS_FALSE;
    1:     }
    1: 
    1:     /* If saving a prefix, add it to the set in rt->scriptFilenamePrefixes. */
    1:     if (flags != 0) {
    1:         /* Search in case filename was saved already; we must be idempotent. */
    1:         sfp = NULL;
    1:         length = strlen(filename);
    1:         for (head = link = &rt->scriptFilenamePrefixes;
    1:              link->next != head;
    1:              link = link->next) {
    1:             /* Lag link behind sfp to insert in non-increasing length order. */
    1:             sfp = (ScriptFilenamePrefix *) link->next;
    1:             if (!strcmp(sfp->name, filename))
    1:                 break;
    1:             if (sfp->length <= length) {
    1:                 sfp = NULL;
    1:                 break;
    1:             }
    1:             sfp = NULL;
    1:         }
    1: 
    1:         if (!sfp) {
    1:             /* No such prefix: add one now. */
30851:             sfp = (ScriptFilenamePrefix *) js_malloc(sizeof(ScriptFilenamePrefix));
    1:             if (!sfp)
    1:                 return NULL;
    1:             JS_INSERT_AFTER(&sfp->links, link);
    1:             sfp->name = sfe->filename;
    1:             sfp->length = length;
    1:             sfp->flags = 0;
    1:         }
    1: 
    1:         /*
    1:          * Accumulate flags in both sfe and sfp: sfe for later access from the
    1:          * JS_GetScriptedCallerFilenameFlags debug-API, and sfp so that longer
    1:          * filename entries can inherit by prefix.
    1:          */
    1:         sfe->flags |= flags;
    1:         sfp->flags |= flags;
    1:     }
    1: 
48676: #ifdef DEBUG
48676:     if (rt->functionMeterFilename) {
27012:         size_t len = strlen(sfe->filename);
27012:         if (len >= sizeof rt->lastScriptFilename)
27012:             len = sizeof rt->lastScriptFilename - 1;
27012:         memcpy(rt->lastScriptFilename, sfe->filename, len);
27012:         rt->lastScriptFilename[len] = '\0';
48676:     }
27012: #endif
27012: 
    1:     return sfe;
    1: }
    1: 
    1: const char *
    1: js_SaveScriptFilename(JSContext *cx, const char *filename)
    1: {
    1:     JSRuntime *rt;
    1:     ScriptFilenameEntry *sfe;
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     rt = cx->runtime;
    1:     JS_ACQUIRE_LOCK(rt->scriptFilenameTableLock);
    1:     sfe = SaveScriptFilename(rt, filename, 0);
    1:     if (!sfe) {
    1:         JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:         JS_ReportOutOfMemory(cx);
    1:         return NULL;
    1:     }
    1: 
    1:     /*
    1:      * Try to inherit flags by prefix.  We assume there won't be more than a
    1:      * few (dozen! ;-) prefixes, so linear search is tolerable.
    1:      * XXXbe every time I've assumed that in the JS engine, I've been wrong!
    1:      */
    1:     for (head = &rt->scriptFilenamePrefixes, link = head->next;
    1:          link != head;
    1:          link = link->next) {
    1:         sfp = (ScriptFilenamePrefix *) link;
    1:         if (!strncmp(sfp->name, filename, sfp->length)) {
    1:             sfe->flags |= sfp->flags;
    1:             break;
    1:         }
    1:     }
    1:     JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:     return sfe->filename;
    1: }
    1: 
    1: const char *
    1: js_SaveScriptFilenameRT(JSRuntime *rt, const char *filename, uint32 flags)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     /* This may be called very early, via the jsdbgapi.h entry point. */
    1:     if (!rt->scriptFilenameTable && !js_InitRuntimeScriptState(rt))
    1:         return NULL;
    1: 
    1:     JS_ACQUIRE_LOCK(rt->scriptFilenameTableLock);
    1:     sfe = SaveScriptFilename(rt, filename, flags);
    1:     JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:     if (!sfe)
    1:         return NULL;
    1: 
    1:     return sfe->filename;
    1: }
    1: 
    1: /*
    1:  * Back up from a saved filename by its offset within its hash table entry.
    1:  */
    1: #define FILENAME_TO_SFE(fn) \
    1:     ((ScriptFilenameEntry *) ((fn) - offsetof(ScriptFilenameEntry, filename)))
    1: 
    1: /*
    1:  * The sfe->key member, redundant given sfe->filename but required by the old
    1:  * jshash.c code, here gives us a useful sanity check.  This assertion will
    1:  * very likely botch if someone tries to mark a string that wasn't allocated
    1:  * as an sfe->filename.
    1:  */
    1: #define ASSERT_VALID_SFE(sfe)   JS_ASSERT((sfe)->key == (sfe)->filename)
    1: 
    1: uint32
    1: js_GetScriptFilenameFlags(const char *filename)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     sfe = FILENAME_TO_SFE(filename);
    1:     ASSERT_VALID_SFE(sfe);
    1:     return sfe->flags;
    1: }
    1: 
    1: void
    1: js_MarkScriptFilename(const char *filename)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     sfe = FILENAME_TO_SFE(filename);
    1:     ASSERT_VALID_SFE(sfe);
    1:     sfe->mark = JS_TRUE;
    1: }
    1: 
18907: static intN
    1: js_script_filename_marker(JSHashEntry *he, intN i, void *arg)
    1: {
    1:     ScriptFilenameEntry *sfe = (ScriptFilenameEntry *) he;
    1: 
    1:     sfe->mark = JS_TRUE;
    1:     return HT_ENUMERATE_NEXT;
    1: }
    1: 
    1: void
41294: js_MarkScriptFilenames(JSRuntime *rt)
    1: {
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
41294:     if (rt->gcKeepAtoms) {
    1:         JS_HashTableEnumerateEntries(rt->scriptFilenameTable,
    1:                                      js_script_filename_marker,
    1:                                      rt);
    1:     }
    1:     for (head = &rt->scriptFilenamePrefixes, link = head->next;
    1:          link != head;
    1:          link = link->next) {
    1:         sfp = (ScriptFilenamePrefix *) link;
    1:         js_MarkScriptFilename(sfp->name);
    1:     }
    1: }
    1: 
18907: static intN
    1: js_script_filename_sweeper(JSHashEntry *he, intN i, void *arg)
    1: {
    1:     ScriptFilenameEntry *sfe = (ScriptFilenameEntry *) he;
    1: 
    1:     if (!sfe->mark)
    1:         return HT_ENUMERATE_REMOVE;
    1:     sfe->mark = JS_FALSE;
    1:     return HT_ENUMERATE_NEXT;
    1: }
    1: 
    1: void
    1: js_SweepScriptFilenames(JSRuntime *rt)
    1: {
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
33534:     /*
33534:      * JS_HashTableEnumerateEntries shrinks the table if many entries are
33534:      * removed preventing wasting memory on a too sparse table.
33534:      */
    1:     JS_HashTableEnumerateEntries(rt->scriptFilenameTable,
    1:                                  js_script_filename_sweeper,
    1:                                  rt);
    1: #ifdef DEBUG_notme
    1: #ifdef DEBUG_SFTBL
    1:     printf("script filename table savings so far: %u\n", sftbl_savings);
    1: #endif
    1: #endif
    1: }
    1: 
 3235: /*
 3235:  * JSScript data structures memory alignment:
 3235:  *
 3235:  * JSScript
 3235:  * JSObjectArray    script objects' descriptor if JSScript.objectsOffset != 0,
32723:  *                    use script->objects() to access it.
 3235:  * JSObjectArray    script regexps' descriptor if JSScript.regexpsOffset != 0,
32723:  *                    use script->regexps() to access it.
 3235:  * JSTryNoteArray   script try notes' descriptor if JSScript.tryNotesOffset
32723:  *                    != 0, use script->trynotes() to access it.
 3235:  * JSAtom *a[]      array of JSScript.atomMap.length atoms pointed by
 3235:  *                    JSScript.atomMap.vector if any.
32723:  * JSObject *o[]    array of script->objects()->length objects if any
32723:  *                    pointed by script->objects()->vector.
32723:  * JSObject *r[]    array of script->regexps()->length regexps if any
32723:  *                    pointed by script->regexps()->vector.
32723:  * JSTryNote t[]    array of script->trynotes()->length try notes if any
32723:  *                    pointed by script->trynotes()->vector.
 3235:  * jsbytecode b[]   script bytecode pointed by JSScript.code.
32723:  * jssrcnote  s[]   script source notes, use script->notes() to access it
 3235:  *
 3235:  * The alignment avoids gaps between entries as alignment requirement for each
 3235:  * subsequent structure or array is the same or divides the alignment
 3235:  * requirement for the previous one.
 3235:  *
 3235:  * The followings asserts checks that assuming that the alignment requirement
 3235:  * for JSObjectArray and JSTryNoteArray are sizeof(void *) and for JSTryNote
 3235:  * it is sizeof(uint32) as the structure consists of 3 uint32 fields.
 3235:  */
 3235: JS_STATIC_ASSERT(sizeof(JSScript) % sizeof(void *) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSObjectArray) % sizeof(void *) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSTryNoteArray) == sizeof(JSObjectArray));
 3235: JS_STATIC_ASSERT(sizeof(JSAtom *) == sizeof(JSObject *));
 3235: JS_STATIC_ASSERT(sizeof(JSObject *) % sizeof(uint32) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSTryNote) == 3 * sizeof(uint32));
 3235: JS_STATIC_ASSERT(sizeof(uint32) % sizeof(jsbytecode) == 0);
 3235: JS_STATIC_ASSERT(sizeof(jsbytecode) % sizeof(jssrcnote) == 0);
 3235: 
 3235: /*
62029:  * Check that uint8 offsets is enough to reach any optional array allocated
62029:  * after JSScript. For that we check that the maximum possible offset for
62029:  * JSConstArray, that last optional array, still fits 1 byte and do not
62029:  * coincide with INVALID_OFFSET.
 3235:  */
62029: JS_STATIC_ASSERT(sizeof(JSObjectArray) +
62029:                  sizeof(JSUpvarArray) +
62029:                  sizeof(JSObjectArray) +
62029:                  sizeof(JSTryNoteArray) +
62029:                  sizeof(js::GlobalSlotArray)
62029:                  < JSScript::INVALID_OFFSET);
62029: JS_STATIC_ASSERT(JSScript::INVALID_OFFSET <= 255);
 3235: 
    1: JSScript *
54840: JSScript::NewScript(JSContext *cx, uint32 length, uint32 nsrcnotes, uint32 natoms,
18308:                     uint32 nobjects, uint32 nupvars, uint32 nregexps,
54840:                     uint32 ntrynotes, uint32 nconsts, uint32 nglobals,
61450:                     uint16 nClosedArgs, uint16 nClosedVars, JSVersion version)
    1: {
 3235:     size_t size, vectorSize;
    1:     JSScript *script;
 3235:     uint8 *cursor;
48470:     unsigned constPadding = 0;
    1: 
54840:     uint32 totalClosed = nClosedArgs + nClosedVars;
54840: 
 3235:     size = sizeof(JSScript) +
48470:            sizeof(JSAtom *) * natoms;
48470:     
 3235:     if (nobjects != 0)
 3235:         size += sizeof(JSObjectArray) + nobjects * sizeof(JSObject *);
18308:     if (nupvars != 0)
18308:         size += sizeof(JSUpvarArray) + nupvars * sizeof(uint32);
 3235:     if (nregexps != 0)
 3235:         size += sizeof(JSObjectArray) + nregexps * sizeof(JSObject *);
 3235:     if (ntrynotes != 0)
 3235:         size += sizeof(JSTryNoteArray) + ntrynotes * sizeof(JSTryNote);
52555:     if (nglobals != 0)
52555:         size += sizeof(GlobalSlotArray) + nglobals * sizeof(GlobalSlotArray::Entry);
54840:     if (totalClosed != 0)
54840:         size += totalClosed * sizeof(uint32);
 3235: 
48470:     if (nconsts != 0) {
48470:         size += sizeof(JSConstArray);
48470:         /*
48470:          * Calculate padding assuming that consts go after the other arrays,
48470:          * but before the bytecode and source notes.
48470:          */
48470:         constPadding = (8 - (size % 8)) % 8;
48470:         size += constPadding + nconsts * sizeof(Value);
48470:     }
48470: 
48470:     size += length * sizeof(jsbytecode) +
48470:             nsrcnotes * sizeof(jssrcnote);
48470: 
30851:     script = (JSScript *) cx->malloc(size);
    1:     if (!script)
    1:         return NULL;
53391: 
40229:     PodZero(script);
    1:     script->length = length;
61450:     script->version = version;
59968:     new (&script->bindings) Bindings(cx);
 3235: 
59221:     uint8 *scriptEnd = reinterpret_cast<uint8 *>(script + 1);
59221: 
59968:     cursor = scriptEnd;
 3235:     if (nobjects != 0) {
59221:         script->objectsOffset = (uint8)(cursor - scriptEnd);
 3235:         cursor += sizeof(JSObjectArray);
59221:     } else {
59221:         script->objectsOffset = JSScript::INVALID_OFFSET;
 3235:     }
18308:     if (nupvars != 0) {
59221:         script->upvarsOffset = (uint8)(cursor - scriptEnd);
18308:         cursor += sizeof(JSUpvarArray);
59221:     } else {
59221:         script->upvarsOffset = JSScript::INVALID_OFFSET;
18308:     }
 3235:     if (nregexps != 0) {
59221:         script->regexpsOffset = (uint8)(cursor - scriptEnd);
 3235:         cursor += sizeof(JSObjectArray);
59221:     } else {
59221:         script->regexpsOffset = JSScript::INVALID_OFFSET;
 3235:     }
 3235:     if (ntrynotes != 0) {
59221:         script->trynotesOffset = (uint8)(cursor - scriptEnd);
 3235:         cursor += sizeof(JSTryNoteArray);
59221:     } else {
59221:         script->trynotesOffset = JSScript::INVALID_OFFSET;
 3235:     }
52555:     if (nglobals != 0) {
59221:         script->globalsOffset = (uint8)(cursor - scriptEnd);
52555:         cursor += sizeof(GlobalSlotArray);
59221:     } else {
59221:         script->globalsOffset = JSScript::INVALID_OFFSET;
52555:     }
59968:     JS_ASSERT(cursor - scriptEnd < 0xFF);
48470:     if (nconsts != 0) {
59221:         script->constOffset = (uint8)(cursor - scriptEnd);
48470:         cursor += sizeof(JSConstArray);
59221:     } else {
59221:         script->constOffset = JSScript::INVALID_OFFSET;
48470:     }
 3235: 
59221:     JS_STATIC_ASSERT(sizeof(JSObjectArray) +
56003:                      sizeof(JSUpvarArray) +
56003:                      sizeof(JSObjectArray) +
56003:                      sizeof(JSTryNoteArray) +
59221:                      sizeof(GlobalSlotArray) < 0xFF);
56003: 
 3235:     if (natoms != 0) {
 3235:         script->atomMap.length = natoms;
 3235:         script->atomMap.vector = (JSAtom **)cursor;
 3235:         vectorSize = natoms * sizeof(script->atomMap.vector[0]);
 3235: 
 3235:         /*
 3235:          * Clear object map's vector so the GC tracing can run when not yet
 3235:          * all atoms are copied to the array.
 3235:          */
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
17218: 
 3235:     if (nobjects != 0) {
32723:         script->objects()->length = nobjects;
32723:         script->objects()->vector = (JSObject **)cursor;
32723:         vectorSize = nobjects * sizeof(script->objects()->vector[0]);
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
18308: 
 3235:     if (nregexps != 0) {
32723:         script->regexps()->length = nregexps;
32723:         script->regexps()->vector = (JSObject **)cursor;
32723:         vectorSize = nregexps * sizeof(script->regexps()->vector[0]);
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
18308: 
 3235:     if (ntrynotes != 0) {
32723:         script->trynotes()->length = ntrynotes;
32723:         script->trynotes()->vector = (JSTryNote *)cursor;
32723:         vectorSize = ntrynotes * sizeof(script->trynotes()->vector[0]);
 3235: #ifdef DEBUG
 3235:         memset(cursor, 0, vectorSize);
 3235: #endif
 3235:         cursor += vectorSize;
 3235:     }
 3235: 
52555:     if (nglobals != 0) {
52555:         script->globals()->length = nglobals;
52555:         script->globals()->vector = (GlobalSlotArray::Entry *)cursor;
52555:         vectorSize = nglobals * sizeof(script->globals()->vector[0]);
52555:         cursor += vectorSize;
52555:     }
52555: 
54840:     if (totalClosed != 0) {
57791:         script->nClosedArgs = nClosedArgs;
57791:         script->nClosedVars = nClosedVars;
54840:         script->closedSlots = (uint32 *)cursor;
54840:         cursor += totalClosed * sizeof(uint32);
54840:     }
54840: 
32689:     /*
32689:      * NB: We allocate the vector of uint32 upvar cookies after all vectors of
32689:      * pointers, to avoid misalignment on 64-bit platforms. See bug 514645.
32689:      */
32689:     if (nupvars != 0) {
32723:         script->upvars()->length = nupvars;
47573:         script->upvars()->vector = reinterpret_cast<UpvarCookie *>(cursor);
32723:         vectorSize = nupvars * sizeof(script->upvars()->vector[0]);
32689:         memset(cursor, 0, vectorSize);
32689:         cursor += vectorSize;
32689:     }
32689: 
48470:     /* Must go after other arrays; see constPadding definition. */
48470:     if (nconsts != 0) {
48470:         cursor += constPadding;
48470:         script->consts()->length = nconsts;
48470:         script->consts()->vector = (Value *)cursor;
48470:         JS_ASSERT((size_t)cursor % sizeof(double) == 0);
48470:         vectorSize = nconsts * sizeof(script->consts()->vector[0]);
48470:         memset(cursor, 0, vectorSize);
48470:         cursor += vectorSize;
48470:     }
48470: 
 3235:     script->code = script->main = (jsbytecode *)cursor;
 3235:     JS_ASSERT(cursor +
 3235:               length * sizeof(jsbytecode) +
 3235:               nsrcnotes * sizeof(jssrcnote) ==
 3235:               (uint8 *)script + size);
 3235: 
55633:     script->compartment = cx->compartment;
11377: #ifdef CHECK_SCRIPT_OWNER
11377:     script->owner = cx->thread;
11377: #endif
53391: 
53391:     JS_APPEND_LINK(&script->links, &cx->compartment->scripts);
61450:     JS_ASSERT(script->getVersion() == version);
    1:     return script;
    1: }
    1: 
 8444: JSScript *
54840: JSScript::NewScriptFromCG(JSContext *cx, JSCodeGenerator *cg)
    1: {
16072:     uint32 mainLength, prologLength, nsrcnotes, nfixed;
    1:     JSScript *script;
    1:     const char *filename;
13702:     JSFunction *fun;
    1: 
 3235:     /* The counts of indexed things must be checked during code generation. */
 3235:     JS_ASSERT(cg->atomList.count <= INDEX_LIMIT);
 3235:     JS_ASSERT(cg->objectList.length <= INDEX_LIMIT);
 3235:     JS_ASSERT(cg->regexpList.length <= INDEX_LIMIT);
 3235: 
    1:     mainLength = CG_OFFSET(cg);
    1:     prologLength = CG_PROLOG_OFFSET(cg);
34290: 
    1:     CG_COUNT_FINAL_SRCNOTES(cg, nsrcnotes);
58683:     uint16 nClosedArgs = uint16(cg->closedArgs.length());
58683:     JS_ASSERT(nClosedArgs == cg->closedArgs.length());
58683:     uint16 nClosedVars = uint16(cg->closedVars.length());
58683:     JS_ASSERT(nClosedVars == cg->closedVars.length());
54840:     script = NewScript(cx, prologLength + mainLength, nsrcnotes,
18308:                        cg->atomList.count, cg->objectList.length,
18308:                        cg->upvarList.count, cg->regexpList.length,
52684:                        cg->ntrynotes, cg->constList.length(),
61450:                        cg->globalUses.length(), nClosedArgs, nClosedVars, cg->version());
    1:     if (!script)
    1:         return NULL;
    1: 
    1:     /* Now that we have script, error control flow must go to label bad. */
    1:     script->main += prologLength;
    1:     memcpy(script->code, CG_PROLOG_BASE(cg), prologLength * sizeof(jsbytecode));
    1:     memcpy(script->main, CG_BASE(cg), mainLength * sizeof(jsbytecode));
57829:     nfixed = cg->inFunction()
59968:              ? cg->bindings.countVars()
54477:              : cg->sharpSlots();
16072:     JS_ASSERT(nfixed < SLOTNO_LIMIT);
16072:     script->nfixed = (uint16) nfixed;
 3235:     js_InitAtomMap(cx, &script->atomMap, &cg->atomList);
    1: 
40860:     filename = cg->parser->tokenStream.getFilename();
    1:     if (filename) {
    1:         script->filename = js_SaveScriptFilename(cx, filename);
    1:         if (!script->filename)
    1:             goto bad;
    1:     }
    1:     script->lineno = cg->firstLine;
18308:     if (script->nfixed + cg->maxStackDepth >= JS_BIT(16)) {
40320:         ReportCompileErrorNumber(cx, CG_TS(cg), NULL, JSREPORT_ERROR, JSMSG_NEED_DIET, "script");
18308:         goto bad;
18308:     }
16072:     script->nslots = script->nfixed + cg->maxStackDepth;
39928:     script->staticLevel = uint16(cg->staticLevel);
40860:     script->principals = cg->parser->principals;
 6561:     if (script->principals)
    1:         JSPRINCIPALS_HOLD(cx, script->principals);
    1: 
32723:     if (!js_FinishTakingSrcNotes(cx, cg, script->notes()))
    1:         goto bad;
 3235:     if (cg->ntrynotes != 0)
32723:         js_FinishTakingTryNotes(cg, script->trynotes());
 3235:     if (cg->objectList.length != 0)
32723:         cg->objectList.finish(script->objects());
 3235:     if (cg->regexpList.length != 0)
32723:         cg->regexpList.finish(script->regexps());
48470:     if (cg->constList.length() != 0)
48470:         cg->constList.finish(script->consts());
27012:     if (cg->flags & TCF_NO_SCRIPT_RVAL)
33750:         script->noScriptRval = true;
32729:     if (cg->hasSharps())
33750:         script->hasSharps = true;
35113:     if (cg->flags & TCF_STRICT_MODE_CODE)
35113:         script->strictModeCode = true;
52825:     if (cg->flags & TCF_COMPILE_N_GO)
52825:         script->compileAndGo = true;
54840:     if (cg->callsEval())
52878:         script->usesEval = true;
54840:     if (cg->flags & TCF_FUN_USES_ARGUMENTS)
54840:         script->usesArguments = true;
59962:     if (cg->flags & TCF_HAS_SINGLETONS)
59962:         script->hasSingletons = true;
    1: 
18308:     if (cg->upvarList.count != 0) {
18308:         JS_ASSERT(cg->upvarList.count <= cg->upvarMap.length);
32723:         memcpy(script->upvars()->vector, cg->upvarMap.vector,
18308:                cg->upvarList.count * sizeof(uint32));
27012:         cg->upvarList.clear();
30851:         cx->free(cg->upvarMap.vector);
18308:         cg->upvarMap.vector = NULL;
18308:     }
18308: 
52555:     if (cg->globalUses.length()) {
52555:         memcpy(script->globals()->vector, &cg->globalUses[0],
52555:                cg->globalUses.length() * sizeof(GlobalSlotArray::Entry));
52555:     }
52555: 
54840:     if (script->nClosedArgs)
54840:         memcpy(script->closedSlots, &cg->closedArgs[0], script->nClosedArgs * sizeof(uint32));
54840:     if (script->nClosedVars) {
54840:         memcpy(&script->closedSlots[script->nClosedArgs], &cg->closedVars[0],
54840:                script->nClosedVars * sizeof(uint32));
54840:     }
54840: 
59968:     cg->bindings.makeImmutable();
59968:     script->bindings.transfer(cx, &cg->bindings);
59968: 
    1:     /*
    1:      * We initialize fun->u.script to be the script constructed above
    1:      * so that the debugger has a valid FUN_SCRIPT(fun).
    1:      */
13691:     fun = NULL;
57829:     if (cg->inFunction()) {
57829:         fun = cg->fun();
59968:         JS_ASSERT(fun->isInterpreted());
59968:         JS_ASSERT(!fun->script());
59968: #ifdef DEBUG
59221:         if (JSScript::isValidOffset(script->upvarsOffset))
59968:             JS_ASSERT(script->upvars()->length == script->bindings.countUpvars());
34290:         else
59968:             JS_ASSERT(script->bindings.countUpvars() == 0);
59968: #endif
    1:         fun->u.i.script = script;
11377: #ifdef CHECK_SCRIPT_OWNER
11377:         script->owner = NULL;
11377: #endif
27012:         if (cg->flags & TCF_FUN_HEAVYWEIGHT)
    1:             fun->flags |= JSFUN_HEAVYWEIGHT;
    1:     }
    1: 
    1:     /* Tell the debugger about this compiled script. */
    1:     js_CallNewScriptHook(cx, script, fun);
58980: #ifdef DEBUG
58980:     {
59220:         jsrefcount newEmptyLive, newLive, newTotal;
59220:         if (script->isEmpty()) {
59220:             newEmptyLive = JS_RUNTIME_METER(cx->runtime, liveEmptyScripts);
59220:             newLive = cx->runtime->liveScripts;
59220:             newTotal =
59220:                 JS_RUNTIME_METER(cx->runtime, totalEmptyScripts) + cx->runtime->totalScripts;
59220:         } else {
59221:             newEmptyLive = cx->runtime->liveEmptyScripts;
59220:             newLive = JS_RUNTIME_METER(cx->runtime, liveScripts);
59220:             newTotal =
59221:                 cx->runtime->totalEmptyScripts + JS_RUNTIME_METER(cx->runtime, totalScripts);
59220:         }
59220: 
58980:         jsrefcount oldHigh = cx->runtime->highWaterLiveScripts;
58980:         if (newEmptyLive + newLive > oldHigh) {
58980:             JS_ATOMIC_SET(&cx->runtime->highWaterLiveScripts, newEmptyLive + newLive);
58980:             if (getenv("JS_DUMP_LIVE_SCRIPTS")) {
58980:                 fprintf(stderr, "high water script count: %d empty, %d not (total %d)\n",
58980:                         newEmptyLive, newLive, newTotal);
58980:             }
58980:         }
58980:     }
58980: #endif
58980: 
    1:     return script;
    1: 
    1: bad:
    1:     js_DestroyScript(cx, script);
    1:     return NULL;
    1: }
    1: 
    1: JS_FRIEND_API(void)
    1: js_CallNewScriptHook(JSContext *cx, JSScript *script, JSFunction *fun)
    1: {
    1:     JSNewScriptHook hook;
    1: 
 2433:     hook = cx->debugHooks->newScriptHook;
    1:     if (hook) {
40840:         AutoKeepAtoms keep(cx->runtime);
    1:         hook(cx, script->filename, script->lineno, script, fun,
 2433:              cx->debugHooks->newScriptHookData);
    1:     }
    1: }
    1: 
62571: void
    1: js_CallDestroyScriptHook(JSContext *cx, JSScript *script)
    1: {
    1:     JSDestroyScriptHook hook;
    1: 
 2433:     hook = cx->debugHooks->destroyScriptHook;
    1:     if (hook)
 2433:         hook(cx, script, cx->debugHooks->destroyScriptHookData);
62571:     JS_ClearScriptTraps(cx, script);
    1: }
    1: 
58041: static void
59734: DestroyScript(JSContext *cx, JSScript *script)
    1: {
59220: #ifdef DEBUG
59220:     if (script->isEmpty())
34290:         JS_RUNTIME_UNMETER(cx->runtime, liveEmptyScripts);
59220:     else
58980:         JS_RUNTIME_UNMETER(cx->runtime, liveScripts);
58980: #endif
58980: 
    1:     if (script->principals)
    1:         JSPRINCIPALS_DROP(cx, script->principals);
11377: 
15530:     if (JS_GSN_CACHE(cx).code == script->code)
26569:         JS_PURGE_GSN_CACHE(cx);
11377: 
11377:     /*
30714:      * Worry about purging the property cache and any compiled traces related
30714:      * to its bytecode if this script is being destroyed from JS_DestroyScript
30714:      * or equivalent according to a mandatory "New/Destroy" protocol.
30714:      *
30733:      * The GC purges all property caches when regenerating shapes upon shape
30733:      * generator overflow, so no need in that event to purge just the entries
30733:      * for this script.
30733:      *
30733:      * The GC purges trace-JITted code on every GC activation, not just when
30733:      * regenerating shapes, so we don't have to purge fragments if the GC is
30733:      * currently running.
30733:      *
40362:      * JS_THREADSAFE note: The code below purges only the current thread's
40362:      * property cache, so a script not owned by a function or object, which
40362:      * hands off lifetime management for that script to the GC, must be used by
40362:      * only one thread over its lifetime.
11377:      *
11377:      * This should be an API-compatible change, since a script is never safe
11377:      * against premature GC if shared among threads without a rooted object
11377:      * wrapping it to protect the script's mapped atoms against GC. We use
11377:      * script->owner to enforce this requirement via assertions.
11377:      */
11377: #ifdef CHECK_SCRIPT_OWNER
11377:     JS_ASSERT_IF(cx->runtime->gcRunning, !script->owner);
11377: #endif
11377: 
30735:     /* FIXME: bug 506341; would like to do this only if regenerating shapes. */
30735:     if (!cx->runtime->gcRunning) {
63087:         JS_PROPERTY_CACHE(cx).purgeForScript(cx, script);
30734: 
11377: #ifdef CHECK_SCRIPT_OWNER
11377:         JS_ASSERT(script->owner == cx->thread);
11377: #endif
31843:     }
31843: 
24879: #ifdef JS_TRACER
59734:     PurgeScriptFragments(&script->compartment->traceMonitor, script);
24879: #endif
11377: 
52559: #if defined(JS_METHODJIT)
52559:     mjit::ReleaseScriptCode(cx, script);
52559: #endif
53391:     JS_REMOVE_LINK(&script->links);
52559: 
30851:     cx->free(script);
    1: }
    1: 
    1: void
58041: js_DestroyScript(JSContext *cx, JSScript *script)
58041: {
58041:     JS_ASSERT(!cx->runtime->gcRunning);
62571:     js_CallDestroyScriptHook(cx, script);
59734:     DestroyScript(cx, script);
58041: }
58041: 
58041: void
59734: js_DestroyScriptFromGC(JSContext *cx, JSScript *script)
58041: {
58041:     JS_ASSERT(cx->runtime->gcRunning);
62571:     js_CallDestroyScriptHook(cx, script);
62571:     DestroyScript(cx, script);
62571: }
62571: 
62571: void
62571: js_DestroyCachedScript(JSContext *cx, JSScript *script)
62571: {
62571:     JS_ASSERT(cx->runtime->gcRunning);
59734:     DestroyScript(cx, script);
58041: }
58041: 
58041: void
  583: js_TraceScript(JSTracer *trc, JSScript *script)
    1: {
48470:     JSAtomMap *map = &script->atomMap;
48470:     MarkAtomRange(trc, map->length, map->vector, "atomMap");
 3235: 
59221:     if (JSScript::isValidOffset(script->objectsOffset)) {
48470:         JSObjectArray *objarray = script->objects();
48470:         uintN i = objarray->length;
 3235:         do {
 3235:             --i;
11089:             if (objarray->vector[i]) {
 3235:                 JS_SET_TRACING_INDEX(trc, "objects", i);
54707:                 Mark(trc, objarray->vector[i]);
11089:             }
 3235:         } while (i != 0);
 3235:     }
 3235: 
59221:     if (JSScript::isValidOffset(script->regexpsOffset)) {
48470:         JSObjectArray *objarray = script->regexps();
48470:         uintN i = objarray->length;
 3235:         do {
 3235:             --i;
11089:             if (objarray->vector[i]) {
 3235:                 JS_SET_TRACING_INDEX(trc, "regexps", i);
54707:                 Mark(trc, objarray->vector[i]);
11089:             }
 3235:         } while (i != 0);
 3235:     }
    1: 
59221:     if (JSScript::isValidOffset(script->constOffset)) {
48470:         JSConstArray *constarray = script->consts();
48470:         MarkValueRange(trc, constarray->length, constarray->vector, "consts");
48470:     }
48470: 
18285:     if (script->u.object) {
15336:         JS_SET_TRACING_NAME(trc, "object");
54707:         Mark(trc, script->u.object);
15336:     }
15336: 
  583:     if (IS_GC_MARKING_TRACER(trc) && script->filename)
    1:         js_MarkScriptFilename(script->filename);
59968: 
59968:     script->bindings.trace(trc);
    1: }
    1: 
51440: JSBool
51440: js_NewScriptObject(JSContext *cx, JSScript *script)
51440: {
51440:     AutoScriptRooter root(cx, script);
51440: 
51440:     JS_ASSERT(!script->u.object);
51440: 
51440:     JSObject *obj = NewNonFunction<WithProto::Class>(cx, &js_ScriptClass, NULL, NULL);
51440:     if (!obj)
51440:         return JS_FALSE;
51440:     obj->setPrivate(script);
51440:     script->u.object = obj;
51440: 
51440:     /*
51440:      * Clear the object's proto, to avoid entraining stuff. Once we no longer use the parent
51440:      * for security checks, then we can clear the parent, too.
51440:      */
51440:     obj->clearProto();
51440: 
51440: #ifdef CHECK_SCRIPT_OWNER
51440:     script->owner = NULL;
51440: #endif
51440: 
51440:     return JS_TRUE;
51440: }
51440: 
    1: typedef struct GSNCacheEntry {
    1:     JSDHashEntryHdr     hdr;
    1:     jsbytecode          *pc;
    1:     jssrcnote           *sn;
    1: } GSNCacheEntry;
    1: 
    1: #define GSN_CACHE_THRESHOLD     100
    1: 
26569: void
26569: js_PurgeGSNCache(JSGSNCache *cache)
26569: {
26569:     cache->code = NULL;
26569:     if (cache->table.ops) {
26569:         JS_DHashTableFinish(&cache->table);
26569:         cache->table.ops = NULL;
26569:     }
26569:     GSN_CACHE_METER(cache, purges);
26569: }
26569: 
    1: jssrcnote *
    1: js_GetSrcNoteCached(JSContext *cx, JSScript *script, jsbytecode *pc)
    1: {
    1:     ptrdiff_t target, offset;
    1:     GSNCacheEntry *entry;
    1:     jssrcnote *sn, *result;
    1:     uintN nsrcnotes;
    1: 
    1: 
25144:     target = pc - script->code;
    1:     if ((uint32)target >= script->length)
    1:         return NULL;
    1: 
15530:     if (JS_GSN_CACHE(cx).code == script->code) {
    1:         JS_METER_GSN_CACHE(cx, hits);
    1:         entry = (GSNCacheEntry *)
    1:                 JS_DHashTableOperate(&JS_GSN_CACHE(cx).table, pc,
    1:                                      JS_DHASH_LOOKUP);
    1:         return entry->sn;
    1:     }
    1: 
    1:     JS_METER_GSN_CACHE(cx, misses);
    1:     offset = 0;
32723:     for (sn = script->notes(); ; sn = SN_NEXT(sn)) {
    1:         if (SN_IS_TERMINATOR(sn)) {
    1:             result = NULL;
    1:             break;
    1:         }
    1:         offset += SN_DELTA(sn);
    1:         if (offset == target && SN_IS_GETTABLE(sn)) {
    1:             result = sn;
    1:             break;
    1:         }
    1:     }
    1: 
15530:     if (JS_GSN_CACHE(cx).code != script->code &&
    1:         script->length >= GSN_CACHE_THRESHOLD) {
26569:         JS_PURGE_GSN_CACHE(cx);
    1:         nsrcnotes = 0;
32723:         for (sn = script->notes(); !SN_IS_TERMINATOR(sn);
    1:              sn = SN_NEXT(sn)) {
    1:             if (SN_IS_GETTABLE(sn))
    1:                 ++nsrcnotes;
    1:         }
    1:         if (!JS_DHashTableInit(&JS_GSN_CACHE(cx).table, JS_DHashGetStubOps(),
    1:                                NULL, sizeof(GSNCacheEntry),
    1:                                JS_DHASH_DEFAULT_CAPACITY(nsrcnotes))) {
    1:             JS_GSN_CACHE(cx).table.ops = NULL;
    1:         } else {
    1:             pc = script->code;
32723:             for (sn = script->notes(); !SN_IS_TERMINATOR(sn);
    1:                  sn = SN_NEXT(sn)) {
    1:                 pc += SN_DELTA(sn);
    1:                 if (SN_IS_GETTABLE(sn)) {
    1:                     entry = (GSNCacheEntry *)
    1:                             JS_DHashTableOperate(&JS_GSN_CACHE(cx).table, pc,
    1:                                                  JS_DHASH_ADD);
    1:                     entry->pc = pc;
    1:                     entry->sn = sn;
    1:                 }
    1:             }
15530:             JS_GSN_CACHE(cx).code = script->code;
    1:             JS_METER_GSN_CACHE(cx, fills);
    1:         }
    1:     }
    1: 
    1:     return result;
    1: }
    1: 
    1: uintN
21685: js_FramePCToLineNumber(JSContext *cx, JSStackFrame *fp)
21685: {
53840:     return js_PCToLineNumber(cx, fp->script(),
53840:                              fp->hasImacropc() ? fp->imacropc() : fp->pc(cx));
21685: }
21685: 
21685: uintN
    1: js_PCToLineNumber(JSContext *cx, JSScript *script, jsbytecode *pc)
    1: {
25215:     JSOp op;
    1:     JSFunction *fun;
    1:     uintN lineno;
    1:     ptrdiff_t offset, target;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     /* Cope with JSStackFrame.pc value prior to entering js_Interpret. */
    1:     if (!pc)
    1:         return 0;
    1: 
    1:     /*
    1:      * Special case: function definition needs no line number note because
    1:      * the function's script contains its starting line number.
    1:      */
25215:     op = js_GetOpcode(cx, script, pc);
25215:     if (js_CodeSpec[op].format & JOF_INDEXBASE)
25215:         pc += js_CodeSpec[op].length;
    1:     if (*pc == JSOP_DEFFUN) {
13824:         GET_FUNCTION_FROM_BYTECODE(script, pc, 0, fun);
    1:         return fun->u.i.script->lineno;
    1:     }
    1: 
    1:     /*
    1:      * General case: walk through source notes accumulating their deltas,
    1:      * keeping track of line-number notes, until we pass the note for pc's
    1:      * offset within script->code.
    1:      */
    1:     lineno = script->lineno;
    1:     offset = 0;
25144:     target = pc - script->code;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
    1:         offset += SN_DELTA(sn);
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             if (offset <= target)
    1:                 lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             if (offset <= target)
    1:                 lineno++;
    1:         }
    1:         if (offset > target)
    1:             break;
    1:     }
    1:     return lineno;
    1: }
    1: 
    1: /* The line number limit is the same as the jssrcnote offset limit. */
    1: #define SN_LINE_LIMIT   (SN_3BYTE_OFFSET_FLAG << 16)
    1: 
    1: jsbytecode *
    1: js_LineNumberToPC(JSScript *script, uintN target)
    1: {
    1:     ptrdiff_t offset, best;
    1:     uintN lineno, bestdiff, diff;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     offset = 0;
    1:     best = -1;
    1:     lineno = script->lineno;
    1:     bestdiff = SN_LINE_LIMIT;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
  267:         /*
  267:          * Exact-match only if offset is not in the prolog; otherwise use
  267:          * nearest greater-or-equal line number match.
  267:          */
  267:         if (lineno == target && script->code + offset >= script->main)
    1:             goto out;
  267:         if (lineno >= target) {
    1:             diff = lineno - target;
    1:             if (diff < bestdiff) {
    1:                 bestdiff = diff;
    1:                 best = offset;
    1:             }
    1:         }
    1:         offset += SN_DELTA(sn);
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             lineno++;
    1:         }
    1:     }
    1:     if (best >= 0)
    1:         offset = best;
    1: out:
    1:     return script->code + offset;
    1: }
    1: 
    1: JS_FRIEND_API(uintN)
    1: js_GetScriptLineExtent(JSScript *script)
    1: {
    1:     uintN lineno;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     lineno = script->lineno;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             lineno++;
    1:         }
    1:     }
    1:     return 1 + lineno - script->lineno;
    1: }
53498: 
55633: class DisablePrincipalsTranscoding {
55633:     JSSecurityCallbacks *callbacks;
55633:     JSPrincipalsTranscoder temp;
55633: 
55633:   public:
55708:     DisablePrincipalsTranscoding(JSContext *cx)
55708:       : callbacks(JS_GetRuntimeSecurityCallbacks(cx->runtime)),
55708:         temp(NULL)
55708:     {
55633:         if (callbacks) {
55633:             temp = callbacks->principalsTranscoder;
55633:             callbacks->principalsTranscoder = NULL;
55633:         }
55633:     }
55633: 
55633:     ~DisablePrincipalsTranscoding() {
55633:         if (callbacks)
55633:             callbacks->principalsTranscoder = temp;
55633:     }
55633: };
55633: 
55633: JSScript *
55633: js_CloneScript(JSContext *cx, JSScript *script)
55633: {
55633:     JS_ASSERT(cx->compartment != script->compartment);
55633:     JS_ASSERT(script->compartment);
55633: 
55633:     // serialize script
55633:     JSXDRState *w = JS_XDRNewMem(cx, JSXDR_ENCODE);
55633:     if (!w)
55633:         return NULL;
55633: 
55633:     // we don't want gecko to transcribe our principals for us
55633:     DisablePrincipalsTranscoding disable(cx);
55633: 
55633:     if (!JS_XDRScript(w, &script)) {
55633:         JS_XDRDestroy(w);
55633:         return NULL;
55633:     }
55633: 
55633:     uint32 nbytes;
55633:     void *p = JS_XDRMemGetData(w, &nbytes);
55633:     if (!p) {
55633:         JS_XDRDestroy(w);
55633:         return NULL;
55633:     }
55633: 
55633:     // de-serialize script
55633:     JSXDRState *r = JS_XDRNewMem(cx, JSXDR_DECODE);
55633:     if (!r) {
55633:         JS_XDRDestroy(w);
55633:         return NULL;
55633:     }
55633: 
55633:     // Hand p off from w to r.  Don't want them to share the data
55633:     // mem, lest they both try to free it in JS_XDRDestroy
55633:     JS_XDRMemSetData(r, p, nbytes);
55633:     JS_XDRMemSetData(w, NULL, 0);
55633: 
55633:     // We can't use the public API because it makes a script object.
59220:     if (!js_XDRScript(r, &script, NULL))
55633:         return NULL;
55633: 
55633:     JS_XDRDestroy(r);
55633:     JS_XDRDestroy(w);
55633: 
55633:     // set the proper principals for the script
55633:     script->principals = script->compartment->principals;
55633:     if (script->principals)
55633:         JSPRINCIPALS_HOLD(cx, script->principals);
55633: 
55633:     return script;
55633: }
55633: 
54840: void
54840: JSScript::copyClosedSlotsTo(JSScript *other)
54840: {
54840:     memcpy(other->closedSlots, closedSlots, nClosedArgs + nClosedVars);
54840: }
