42733: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42733:  * vim: set ts=4 sw=4 et tw=99:
42733:  *
42733:  * ***** BEGIN LICENSE BLOCK *****
42733:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42733:  *
42733:  * The contents of this file are subject to the Mozilla Public License Version
42733:  * 1.1 (the "License"); you may not use this file except in compliance with
42733:  * the License. You may obtain a copy of the License at
42733:  * http://www.mozilla.org/MPL/
42733:  *
42733:  * Software distributed under the License is distributed on an "AS IS" basis,
42733:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42733:  * for the specific language governing rights and limitations under the
42733:  * License.
42733:  *
42733:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
42733:  * May 28, 2008.
42733:  *
42733:  * The Initial Developer of the Original Code is
42733:  *   Mozilla Foundation
42733:  * Portions created by the Initial Developer are Copyright (C) 2009
42733:  * the Initial Developer. All Rights Reserved.
42733:  *
42733:  * Contributor(s):
42733:  *   Andreas Gal <gal@mozilla.com>
42733:  *
42733:  * Alternatively, the contents of this file may be used under the terms of
42733:  * either of the GNU General Public License Version 2 or later (the "GPL"),
42733:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42733:  * in which case the provisions of the GPL or the LGPL are applicable instead
42733:  * of those above. If you wish to allow use of your version of this file only
42733:  * under the terms of either the GPL or the LGPL, and not to allow others to
42733:  * use your version of this file under the terms of the MPL, indicate your
42733:  * decision by deleting the provisions above and replace them with the notice
42733:  * and other provisions required by the GPL or the LGPL. If you do not delete
42733:  * the provisions above, a recipient may use your version of this file under
42733:  * the terms of any one of the MPL, the GPL or the LGPL.
42733:  *
42733:  * ***** END LICENSE BLOCK ***** */
42733: 
42733: #ifndef jsproxy_h___
42733: #define jsproxy_h___
42733: 
42733: #include "jsapi.h"
47460: #include "jscntxt.h"
42733: #include "jsobj.h"
42733: 
42832: namespace js {
42832: 
42733: /* Base class for all C++ proxy handlers. */
55599: class JS_FRIEND_API(JSProxyHandler) {
47516:     void *mFamily;
42733:   public:
47516:     explicit JSProxyHandler(void *family);
42733:     virtual ~JSProxyHandler();
42733: 
42733:     /* ES5 Harmony fundamental proxy traps. */
55592:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                        PropertyDescriptor *desc) = 0;
55592:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                           PropertyDescriptor *desc) = 0;
43190:     virtual bool defineProperty(JSContext *cx, JSObject *proxy, jsid id,
48470:                                 PropertyDescriptor *desc) = 0;
48470:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, js::AutoIdVector &props) = 0;
42733:     virtual bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp) = 0;
48470:     virtual bool enumerate(JSContext *cx, JSObject *proxy, js::AutoIdVector &props) = 0;
48470:     virtual bool fix(JSContext *cx, JSObject *proxy, Value *vp) = 0;
42733: 
42733:     /* ES5 Harmony derived proxy traps. */
55599:     virtual bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
55599:     virtual bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
55599:     virtual bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, js::Value *vp);
55599:     virtual bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, js::Value *vp);
55599:     virtual bool enumerateOwn(JSContext *cx, JSObject *proxy, js::AutoIdVector &props);
55599:     virtual bool iterate(JSContext *cx, JSObject *proxy, uintN flags, js::Value *vp);
42733: 
42733:     /* Spidermonkey extensions. */
55599:     virtual bool call(JSContext *cx, JSObject *proxy, uintN argc, js::Value *vp);
55599:     virtual bool construct(JSContext *cx, JSObject *proxy,
48470:                                           uintN argc, js::Value *argv, js::Value *rval);
55650:     virtual bool hasInstance(JSContext *cx, JSObject *proxy, const js::Value *vp, bool *bp);
55599:     virtual JSString *obj_toString(JSContext *cx, JSObject *proxy);
55599:     virtual JSString *fun_toString(JSContext *cx, JSObject *proxy, uintN indent);
55599:     virtual void finalize(JSContext *cx, JSObject *proxy);
55599:     virtual void trace(JSTracer *trc, JSObject *proxy);
47516: 
54404:     virtual bool isOuterWindow() {
54404:         return false;
54404:     }
54404: 
47516:     inline void *family() {
47516:         return mFamily;
47516:     }
42733: };
42733: 
42733: /* Dispatch point for handlers that executes the appropriate C++ or scripted traps. */
42733: class JSProxy {
42733:   public:
42733:     /* ES5 Harmony fundamental proxy traps. */
55592:     static bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                       PropertyDescriptor *desc);
55592:     static bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set, Value *vp);
55592:     static bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                          PropertyDescriptor *desc);
55592:     static bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
55592:                                          Value *vp);
48470:     static bool defineProperty(JSContext *cx, JSObject *proxy, jsid id, PropertyDescriptor *desc);
48470:     static bool defineProperty(JSContext *cx, JSObject *proxy, jsid id, const Value &v);
48470:     static bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, js::AutoIdVector &props);
42733:     static bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
48470:     static bool enumerate(JSContext *cx, JSObject *proxy, js::AutoIdVector &props);
48470:     static bool fix(JSContext *cx, JSObject *proxy, Value *vp);
42733: 
42733:     /* ES5 Harmony derived proxy traps. */
42733:     static bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
42733:     static bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
48470:     static bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp);
48470:     static bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp);
48470:     static bool enumerateOwn(JSContext *cx, JSObject *proxy, js::AutoIdVector &props);
48470:     static bool iterate(JSContext *cx, JSObject *proxy, uintN flags, Value *vp);
47498: 
47498:     /* Spidermonkey extensions. */
48470:     static bool call(JSContext *cx, JSObject *proxy, uintN argc, js::Value *vp);
48470:     static bool construct(JSContext *cx, JSObject *proxy, uintN argc, js::Value *argv, js::Value *rval);
47498:     static JSString *obj_toString(JSContext *cx, JSObject *proxy);
47498:     static JSString *fun_toString(JSContext *cx, JSObject *proxy, uintN indent);
42733: };
42733: 
42733: /* Shared between object and function proxies. */
55746: const uint32 JSSLOT_PROXY_HANDLER = 0;
55746: const uint32 JSSLOT_PROXY_PRIVATE = 1;
55746: const uint32 JSSLOT_PROXY_EXTRA   = 2;
42733: /* Function proxies only. */
56104: const uint32 JSSLOT_PROXY_CALL = 3;
56104: const uint32 JSSLOT_PROXY_CONSTRUCT = 4;
42733: 
48470: extern JS_FRIEND_API(js::Class) ObjectProxyClass;
48470: extern JS_FRIEND_API(js::Class) FunctionProxyClass;
54404: extern JS_FRIEND_API(js::Class) OuterWindowProxyClass;
48470: extern js::Class CallableObjectClass;
42832: 
42832: }
42733: 
42733: inline bool
42733: JSObject::isObjectProxy() const
42733: {
54404:     return getClass() == &js::ObjectProxyClass ||
54404:            getClass() == &js::OuterWindowProxyClass;
42733: }
42733: 
42733: inline bool
42733: JSObject::isFunctionProxy() const
42733: {
42832:     return getClass() == &js::FunctionProxyClass;
42733: }
42733: 
42733: inline bool
42733: JSObject::isProxy() const
42733: {
42733:     return isObjectProxy() || isFunctionProxy();
42733: }
42733: 
47498: inline js::JSProxyHandler *
42733: JSObject::getProxyHandler() const
42733: {
42733:     JS_ASSERT(isProxy());
48470:     return (js::JSProxyHandler *) getSlot(js::JSSLOT_PROXY_HANDLER).toPrivate();
42733: }
42733: 
48470: inline const js::Value &
42733: JSObject::getProxyPrivate() const
42733: {
47498:     JS_ASSERT(isProxy());
47498:     return getSlot(js::JSSLOT_PROXY_PRIVATE);
42733: }
42733: 
42733: inline void
48470: JSObject::setProxyPrivate(const js::Value &priv)
42733: {
47498:     JS_ASSERT(isProxy());
47498:     setSlot(js::JSSLOT_PROXY_PRIVATE, priv);
42733: }
42733: 
55599: inline const js::Value &
55599: JSObject::getProxyExtra() const
55599: {
55599:     JS_ASSERT(isProxy());
55599:     return getSlot(js::JSSLOT_PROXY_EXTRA);
55599: }
55599: 
55599: inline void
55599: JSObject::setProxyExtra(const js::Value &extra)
55599: {
55599:     JS_ASSERT(isProxy());
55599:     setSlot(js::JSSLOT_PROXY_EXTRA, extra);
55599: }
55599: 
42832: namespace js {
42733: 
42832: JS_FRIEND_API(JSObject *)
48470: NewProxyObject(JSContext *cx, JSProxyHandler *handler, const js::Value &priv,
48470:                JSObject *proto, JSObject *parent,
47498:                JSObject *call = NULL, JSObject *construct = NULL);
42733: 
42832: JS_FRIEND_API(JSBool)
42832: FixProxy(JSContext *cx, JSObject *proxy, JSBool *bp);
42733: 
42832: }
42832: 
42733: JS_BEGIN_EXTERN_C
42733: 
48470: extern js::Class js_ProxyClass;
43236: 
42733: extern JS_FRIEND_API(JSObject *)
42733: js_InitProxyClass(JSContext *cx, JSObject *obj);
42733: 
42733: JS_END_EXTERN_C
42733: 
42733: #endif
