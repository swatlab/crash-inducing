18414: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
16394: /****************************************************************
16394:  *
16394:  * The author of this software is David M. Gay.
16394:  *
16394:  * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
16394:  *
16394:  * Permission to use, copy, modify, and distribute this software for any
16394:  * purpose without fee is hereby granted, provided that this entire notice
16394:  * is included in all copies of any software which is or includes a copy
16394:  * or modification of this software and in all copies of the supporting
16394:  * documentation for such software.
16394:  *
16394:  * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
16394:  * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
16394:  * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
16394:  * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
16394:  *
16394:  ***************************************************************/
16394: 
16394: /* Please send bug reports to David M. Gay (dmg at acm dot org,
16394:  * with " at " changed at "@" and " dot " changed to ".").	*/
16394: 
16394: /* On a machine with IEEE extended-precision registers, it is
16394:  * necessary to specify double-precision (53-bit) rounding precision
16394:  * before invoking strtod or dtoa.  If the machine uses (the equivalent
16394:  * of) Intel 80x87 arithmetic, the call
16394:  *	_control87(PC_53, MCW_PC);
16394:  * does this with many compilers.  Whether this or another call is
16394:  * appropriate depends on the compiler; for this to work, it may be
16394:  * necessary to #include "float.h" or another system-dependent header
16394:  * file.
16394:  */
16394: 
16394: /* strtod for IEEE-, VAX-, and IBM-arithmetic machines.
16394:  *
16394:  * This strtod returns a nearest machine number to the input decimal
16394:  * string (or sets errno to ERANGE).  With IEEE arithmetic, ties are
16394:  * broken by the IEEE round-even rule.  Otherwise ties are broken by
16394:  * biased rounding (add half and chop).
16394:  *
16394:  * Inspired loosely by William D. Clinger's paper "How to Read Floating
16394:  * Point Numbers Accurately" [Proc. ACM SIGPLAN '90, pp. 92-101].
16394:  *
16394:  * Modifications:
16394:  *
16394:  *	1. We only require IEEE, IBM, or VAX double-precision
16394:  *		arithmetic (not IEEE double-extended).
16394:  *	2. We get by with floating-point arithmetic in a case that
16394:  *		Clinger missed -- when we're computing d * 10^n
16394:  *		for a small integer d and the integer n is not too
16394:  *		much larger than 22 (the maximum integer k for which
16394:  *		we can represent 10^k exactly), we may be able to
16394:  *		compute (d*10^k) * 10^(e-k) with just one roundoff.
16394:  *	3. Rather than a bit-at-a-time adjustment of the binary
16394:  *		result in the hard case, we use floating-point
16394:  *		arithmetic to determine the adjustment to within
16394:  *		one bit; only in really hard cases do we need to
16394:  *		compute a second residual.
16394:  *	4. Because of 3., we don't need a large table of powers of 10
16394:  *		for ten-to-e (just some small tables, e.g. of 10^k
16394:  *		for 0 <= k <= 22).
16394:  */
16394: 
16394: /*
16394:  * #define IEEE_8087 for IEEE-arithmetic machines where the least
16394:  *	significant byte has the lowest address.
16394:  * #define IEEE_MC68k for IEEE-arithmetic machines where the most
16394:  *	significant byte has the lowest address.
16394:  * #define Long int on machines with 32-bit ints and 64-bit longs.
16394:  * #define IBM for IBM mainframe-style floating-point arithmetic.
16394:  * #define VAX for VAX-style floating-point arithmetic (D_floating).
16394:  * #define No_leftright to omit left-right logic in fast floating-point
16394:  *	computation of dtoa.
16394:  * #define Honor_FLT_ROUNDS if FLT_ROUNDS can assume the values 2 or 3
16394:  *	and strtod and dtoa should round accordingly.
16394:  * #define Check_FLT_ROUNDS if FLT_ROUNDS can assume the values 2 or 3
16394:  *	and Honor_FLT_ROUNDS is not #defined.
16394:  * #define RND_PRODQUOT to use rnd_prod and rnd_quot (assembly routines
16394:  *	that use extended-precision instructions to compute rounded
16394:  *	products and quotients) with IBM.
16394:  * #define ROUND_BIASED for IEEE-format with biased rounding.
16394:  * #define Inaccurate_Divide for IEEE-format with correctly rounded
16394:  *	products but inaccurate quotients, e.g., for Intel i860.
16394:  * #define NO_LONG_LONG on machines that do not have a "long long"
16394:  *	integer type (of >= 64 bits).  On such machines, you can
16394:  *	#define Just_16 to store 16 bits per 32-bit Long when doing
16394:  *	high-precision integer arithmetic.  Whether this speeds things
16394:  *	up or slows things down depends on the machine and the number
16394:  *	being converted.  If long long is available and the name is
16394:  *	something other than "long long", #define Llong to be the name,
16394:  *	and if "unsigned Llong" does not work as an unsigned version of
16394:  *	Llong, #define #ULLong to be the corresponding unsigned type.
16394:  * #define KR_headers for old-style C function headers.
16394:  * #define Bad_float_h if your system lacks a float.h or if it does not
16394:  *	define some or all of DBL_DIG, DBL_MAX_10_EXP, DBL_MAX_EXP,
16394:  *	FLT_RADIX, FLT_ROUNDS, and DBL_MAX.
16394:  * #define MALLOC your_malloc, where your_malloc(n) acts like malloc(n)
16394:  *	if memory is available and otherwise does something you deem
16394:  *	appropriate.  If MALLOC is undefined, malloc will be invoked
32803:  *	directly -- and assumed always to succeed.  Similarly, if you
32803:  *	want something other than the system's free() to be called to
32803:  *	recycle memory acquired from MALLOC, #define FREE to be the
32803:  *	name of the alternate routine.  (FREE or free is only called in
32803:  *	pathological cases, e.g., in a dtoa call after a dtoa return in
32803:  *	mode 3 with thousands of digits requested.)
16394:  * #define Omit_Private_Memory to omit logic (added Jan. 1998) for making
16394:  *	memory allocations from a private pool of memory when possible.
16394:  *	When used, the private pool is PRIVATE_MEM bytes long:  2304 bytes,
16394:  *	unless #defined to be a different length.  This default length
16394:  *	suffices to get rid of MALLOC calls except for unusual cases,
16394:  *	such as decimal-to-binary conversion of a very long string of
16394:  *	digits.  The longest string dtoa can return is about 751 bytes
16394:  *	long.  For conversions by strtod of strings of 800 digits and
16394:  *	all dtoa conversions in single-threaded executions with 8-byte
16394:  *	pointers, PRIVATE_MEM >= 7400 appears to suffice; with 4-byte
16394:  *	pointers, PRIVATE_MEM >= 7112 appears adequate.
16394:  * #define NO_INFNAN_CHECK if you do not wish to have INFNAN_CHECK
16394:  *	#defined automatically on IEEE systems.  On such systems,
16394:  *	when INFNAN_CHECK is #defined, strtod checks
16394:  *	for Infinity and NaN (case insensitively).  On some systems
16394:  *	(e.g., some HP systems), it may be necessary to #define NAN_WORD0
16394:  *	appropriately -- to the most significant word of a quiet NaN.
16394:  *	(On HP Series 700/800 machines, -DNAN_WORD0=0x7ff40000 works.)
16394:  *	When INFNAN_CHECK is #defined and No_Hex_NaN is not #defined,
16394:  *	strtod also accepts (case insensitively) strings of the form
16394:  *	NaN(x), where x is a string of hexadecimal digits and spaces;
16394:  *	if there is only one string of hexadecimal digits, it is taken
16394:  *	for the 52 fraction bits of the resulting NaN; if there are two
16394:  *	or more strings of hex digits, the first is for the high 20 bits,
16394:  *	the second and subsequent for the low 32 bits, with intervening
16394:  *	white space ignored; but if this results in none of the 52
16394:  *	fraction bits being on (an IEEE Infinity symbol), then NAN_WORD0
16394:  *	and NAN_WORD1 are used instead.
16394:  * #define MULTIPLE_THREADS if the system offers preemptively scheduled
16394:  *	multiple threads.  In this case, you must provide (or suitably
16394:  *	#define) two locks, acquired by ACQUIRE_DTOA_LOCK(n) and freed
16394:  *	by FREE_DTOA_LOCK(n) for n = 0 or 1.  (The second lock, accessed
16394:  *	in pow5mult, ensures lazy evaluation of only one copy of high
16394:  *	powers of 5; omitting this lock would introduce a small
16394:  *	probability of wasting memory, but would otherwise be harmless.)
16394:  *	You must also invoke freedtoa(s) to free the value s returned by
16394:  *	dtoa.  You may do so whether or not MULTIPLE_THREADS is #defined.
16394:  * #define NO_IEEE_Scale to disable new (Feb. 1997) logic in strtod that
16394:  *	avoids underflows on inputs whose result does not underflow.
16394:  *	If you #define NO_IEEE_Scale on a machine that uses IEEE-format
16394:  *	floating-point numbers and flushes underflows to zero rather
16394:  *	than implementing gradual underflow, then you must also #define
16394:  *	Sudden_Underflow.
16394:  * #define USE_LOCALE to use the current locale's decimal_point value.
16394:  * #define SET_INEXACT if IEEE arithmetic is being used and extra
16394:  *	computation should be done to set the inexact flag when the
16394:  *	result is inexact and avoid setting inexact when the result
16394:  *	is exact.  In this case, dtoa.c must be compiled in
16394:  *	an environment, perhaps provided by #include "dtoa.c" in a
16394:  *	suitable wrapper, that defines two functions,
16394:  *		int get_inexact(void);
16394:  *		void clear_inexact(void);
16394:  *	such that get_inexact() returns a nonzero value if the
16394:  *	inexact bit is already set, and clear_inexact() sets the
16394:  *	inexact bit to 0.  When SET_INEXACT is #defined, strtod
16394:  *	also does extra computations to set the underflow and overflow
16394:  *	flags when appropriate (i.e., when the result is tiny and
16394:  *	inexact or when it is a numeric value rounded to +-infinity).
16394:  * #define NO_ERRNO if strtod should not assign errno = ERANGE when
16394:  *	the result overflows to +-Infinity or underflows to 0.
16394:  */
16394: 
16394: #ifndef Long
16394: #define Long long
16394: #endif
16394: #ifndef ULong
16394: typedef unsigned Long ULong;
16394: #endif
16394: 
16394: #ifdef DEBUG
16394: #include "stdio.h"
16394: #define Bug(x) {fprintf(stderr, "%s\n", x); exit(1);}
16394: #endif
16394: 
16394: #include "stdlib.h"
16394: #include "string.h"
16394: 
16394: #ifdef USE_LOCALE
16394: #include "locale.h"
16394: #endif
16394: 
16394: #ifdef MALLOC
16394: #ifdef KR_headers
16394: extern char *MALLOC();
16394: #else
16394: extern void *MALLOC(size_t);
16394: #endif
16394: #else
16394: #define MALLOC malloc
16394: #endif
16394: 
16394: #ifndef Omit_Private_Memory
16394: #ifndef PRIVATE_MEM
16394: #define PRIVATE_MEM 2304
16394: #endif
16394: #define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)-1)/sizeof(double))
16394: static double private_mem[PRIVATE_mem], *pmem_next = private_mem;
16394: #endif
16394: 
16394: #undef IEEE_Arith
16394: #undef Avoid_Underflow
16394: #ifdef IEEE_MC68k
16394: #define IEEE_Arith
16394: #endif
16394: #ifdef IEEE_8087
16394: #define IEEE_Arith
16394: #endif
16394: 
16394: #ifdef IEEE_Arith
16394: #ifndef NO_INFNAN_CHECK
16394: #undef INFNAN_CHECK
16394: #define INFNAN_CHECK
16394: #endif
16394: #else
16394: #undef INFNAN_CHECK
16394: #endif
16394: 
16394: #include "errno.h"
16394: 
16394: #ifdef Bad_float_h
16394: 
16394: #ifdef IEEE_Arith
16394: #define DBL_DIG 15
16394: #define DBL_MAX_10_EXP 308
16394: #define DBL_MAX_EXP 1024
16394: #define FLT_RADIX 2
16394: #endif /*IEEE_Arith*/
16394: 
16394: #ifdef IBM
16394: #define DBL_DIG 16
16394: #define DBL_MAX_10_EXP 75
16394: #define DBL_MAX_EXP 63
16394: #define FLT_RADIX 16
16394: #define DBL_MAX 7.2370055773322621e+75
16394: #endif
16394: 
16394: #ifdef VAX
16394: #define DBL_DIG 16
16394: #define DBL_MAX_10_EXP 38
16394: #define DBL_MAX_EXP 127
16394: #define FLT_RADIX 2
16394: #define DBL_MAX 1.7014118346046923e+38
16394: #endif
16394: 
16394: #ifndef LONG_MAX
16394: #define LONG_MAX 2147483647
16394: #endif
16394: 
16394: #else /* ifndef Bad_float_h */
16394: #include "float.h"
16394: #endif /* Bad_float_h */
16394: 
16394: #ifndef __MATH_H__
16394: #include "math.h"
16394: #endif
16394: 
16394: #ifdef __cplusplus
16394: extern "C" {
16394: #endif
16394: 
16394: #ifndef CONST
16394: #ifdef KR_headers
16394: #define CONST /* blank */
16394: #else
16394: #define CONST const
16394: #endif
16394: #endif
16394: 
16394: #if defined(IEEE_8087) + defined(IEEE_MC68k) + defined(VAX) + defined(IBM) != 1
16394: Exactly one of IEEE_8087, IEEE_MC68k, VAX, or IBM should be defined.
16394: #endif
16394: 
16394: typedef union { double d; ULong L[2]; } U;
16394: 
18414: #define dval(x) ((x).d)
16394: #ifdef IEEE_8087
18414: #define word0(x) ((x).L[1])
18414: #define word1(x) ((x).L[0])
16394: #else
18414: #define word0(x) ((x).L[0])
18414: #define word1(x) ((x).L[1])
16394: #endif
16394: 
16394: /* The following definition of Storeinc is appropriate for MIPS processors.
16394:  * An alternative that might be better on some machines is
16394:  * #define Storeinc(a,b,c) (*a++ = b << 16 | c & 0xffff)
16394:  */
16394: #if defined(IEEE_8087) + defined(VAX)
16394: #define Storeinc(a,b,c) (((unsigned short *)a)[1] = (unsigned short)b, \
16394: ((unsigned short *)a)[0] = (unsigned short)c, a++)
16394: #else
16394: #define Storeinc(a,b,c) (((unsigned short *)a)[0] = (unsigned short)b, \
16394: ((unsigned short *)a)[1] = (unsigned short)c, a++)
16394: #endif
16394: 
16394: /* #define P DBL_MANT_DIG */
16394: /* Ten_pmax = floor(P*log(2)/log(5)) */
16394: /* Bletch = (highest power of 2 < DBL_MAX_10_EXP) / 16 */
16394: /* Quick_max = floor((P-1)*log(FLT_RADIX)/log(10) - 1) */
16394: /* Int_max = floor(P*log(FLT_RADIX)/log(10) - 1) */
16394: 
16394: #ifdef IEEE_Arith
16394: #define Exp_shift  20
16394: #define Exp_shift1 20
16394: #define Exp_msk1    0x100000
16394: #define Exp_msk11   0x100000
16394: #define Exp_mask  0x7ff00000
16394: #define P 53
16394: #define Bias 1023
16394: #define Emin (-1022)
16394: #define Exp_1  0x3ff00000
16394: #define Exp_11 0x3ff00000
16394: #define Ebits 11
16394: #define Frac_mask  0xfffff
16394: #define Frac_mask1 0xfffff
16394: #define Ten_pmax 22
16394: #define Bletch 0x10
16394: #define Bndry_mask  0xfffff
16394: #define Bndry_mask1 0xfffff
16394: #define LSB 1
16394: #define Sign_bit 0x80000000
16394: #define Log2P 1
16394: #define Tiny0 0
16394: #define Tiny1 1
16394: #define Quick_max 14
16394: #define Int_max 14
16394: #ifndef NO_IEEE_Scale
16394: #define Avoid_Underflow
16394: #ifdef Flush_Denorm	/* debugging option */
16394: #undef Sudden_Underflow
16394: #endif
16394: #endif
16394: 
16394: #ifndef Flt_Rounds
16394: #ifdef FLT_ROUNDS
16394: #define Flt_Rounds FLT_ROUNDS
16394: #else
16394: #define Flt_Rounds 1
16394: #endif
16394: #endif /*Flt_Rounds*/
16394: 
16394: #ifdef Honor_FLT_ROUNDS
16394: #define Rounding rounding
16394: #undef Check_FLT_ROUNDS
16394: #define Check_FLT_ROUNDS
16394: #else
16394: #define Rounding Flt_Rounds
16394: #endif
16394: 
16394: #else /* ifndef IEEE_Arith */
16394: #undef Check_FLT_ROUNDS
16394: #undef Honor_FLT_ROUNDS
16394: #undef SET_INEXACT
16394: #undef  Sudden_Underflow
16394: #define Sudden_Underflow
16394: #ifdef IBM
16394: #undef Flt_Rounds
16394: #define Flt_Rounds 0
16394: #define Exp_shift  24
16394: #define Exp_shift1 24
16394: #define Exp_msk1   0x1000000
16394: #define Exp_msk11  0x1000000
16394: #define Exp_mask  0x7f000000
16394: #define P 14
16394: #define Bias 65
16394: #define Exp_1  0x41000000
16394: #define Exp_11 0x41000000
16394: #define Ebits 8	/* exponent has 7 bits, but 8 is the right value in b2d */
16394: #define Frac_mask  0xffffff
16394: #define Frac_mask1 0xffffff
16394: #define Bletch 4
16394: #define Ten_pmax 22
16394: #define Bndry_mask  0xefffff
16394: #define Bndry_mask1 0xffffff
16394: #define LSB 1
16394: #define Sign_bit 0x80000000
16394: #define Log2P 4
16394: #define Tiny0 0x100000
16394: #define Tiny1 0
16394: #define Quick_max 14
16394: #define Int_max 15
16394: #else /* VAX */
16394: #undef Flt_Rounds
16394: #define Flt_Rounds 1
16394: #define Exp_shift  23
16394: #define Exp_shift1 7
16394: #define Exp_msk1    0x80
16394: #define Exp_msk11   0x800000
16394: #define Exp_mask  0x7f80
16394: #define P 56
16394: #define Bias 129
16394: #define Exp_1  0x40800000
16394: #define Exp_11 0x4080
16394: #define Ebits 8
16394: #define Frac_mask  0x7fffff
16394: #define Frac_mask1 0xffff007f
16394: #define Ten_pmax 24
16394: #define Bletch 2
16394: #define Bndry_mask  0xffff007f
16394: #define Bndry_mask1 0xffff007f
16394: #define LSB 0x10000
16394: #define Sign_bit 0x8000
16394: #define Log2P 1
16394: #define Tiny0 0x80
16394: #define Tiny1 0
16394: #define Quick_max 15
16394: #define Int_max 15
16394: #endif /* IBM, VAX */
16394: #endif /* IEEE_Arith */
16394: 
16394: #ifndef IEEE_Arith
16394: #define ROUND_BIASED
16394: #endif
16394: 
16394: #ifdef RND_PRODQUOT
16394: #define rounded_product(a,b) a = rnd_prod(a, b)
16394: #define rounded_quotient(a,b) a = rnd_quot(a, b)
16394: #ifdef KR_headers
16394: extern double rnd_prod(), rnd_quot();
16394: #else
16394: extern double rnd_prod(double, double), rnd_quot(double, double);
16394: #endif
16394: #else
16394: #define rounded_product(a,b) a *= b
16394: #define rounded_quotient(a,b) a /= b
16394: #endif
16394: 
16394: #define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-1))
16394: #define Big1 0xffffffff
16394: 
16394: #ifndef Pack_32
16394: #define Pack_32
16394: #endif
16394: 
16394: #ifdef KR_headers
16394: #define FFFFFFFF ((((unsigned long)0xffff)<<16)|(unsigned long)0xffff)
16394: #else
16394: #define FFFFFFFF 0xffffffffUL
16394: #endif
16394: 
16394: #ifdef NO_LONG_LONG
16394: #undef ULLong
16394: #ifdef Just_16
16394: #undef Pack_32
16394: /* When Pack_32 is not defined, we store 16 bits per 32-bit Long.
16394:  * This makes some inner loops simpler and sometimes saves work
16394:  * during multiplications, but it often seems to make things slightly
16394:  * slower.  Hence the default is now to store 32 bits per Long.
16394:  */
16394: #endif
16394: #else	/* long long available */
16394: #ifndef Llong
16394: #define Llong long long
16394: #endif
16394: #ifndef ULLong
16394: #define ULLong unsigned Llong
16394: #endif
16394: #endif /* NO_LONG_LONG */
16394: 
16394: #ifndef MULTIPLE_THREADS
16394: #define ACQUIRE_DTOA_LOCK(n)	/*nothing*/
16394: #define FREE_DTOA_LOCK(n)	/*nothing*/
16394: #endif
16394: 
32803: #define Kmax 7
16394: 
16394:  struct
16394: Bigint {
16394: 	struct Bigint *next;
16394: 	int k, maxwds, sign, wds;
16394: 	ULong x[1];
16394: 	};
16394: 
16394:  typedef struct Bigint Bigint;
16394: 
16394:  static Bigint *freelist[Kmax+1];
16394: 
16394:  static Bigint *
16394: Balloc
16394: #ifdef KR_headers
16394: 	(k) int k;
16394: #else
16394: 	(int k)
16394: #endif
16394: {
16394: 	int x;
16394: 	Bigint *rv;
16394: #ifndef Omit_Private_Memory
16394: 	size_t len;
16394: #endif
16394: 
16394: 	ACQUIRE_DTOA_LOCK(0);
32803: 	/* The k > Kmax case does not need ACQUIRE_DTOA_LOCK(0), */
32803: 	/* but this case seems very unlikely. */
32803: 	if (k <= Kmax && (rv = freelist[k]))
16394: 		freelist[k] = rv->next;
16394: 	else {
16394: 		x = 1 << k;
16394: #ifdef Omit_Private_Memory
16394: 		rv = (Bigint *)MALLOC(sizeof(Bigint) + (x-1)*sizeof(ULong));
16394: #else
16394: 		len = (sizeof(Bigint) + (x-1)*sizeof(ULong) + sizeof(double) - 1)
16394: 			/sizeof(double);
32803: 		if (k <= Kmax && pmem_next - private_mem + len <= PRIVATE_mem) {
16394: 			rv = (Bigint*)pmem_next;
16394: 			pmem_next += len;
16394: 			}
16394: 		else
16394: 			rv = (Bigint*)MALLOC(len*sizeof(double));
16394: #endif
16394: 		rv->k = k;
16394: 		rv->maxwds = x;
16394: 		}
16394: 	FREE_DTOA_LOCK(0);
16394: 	rv->sign = rv->wds = 0;
16394: 	return rv;
16394: 	}
16394: 
16394:  static void
16394: Bfree
16394: #ifdef KR_headers
16394: 	(v) Bigint *v;
16394: #else
16394: 	(Bigint *v)
16394: #endif
16394: {
16394: 	if (v) {
32803: 		if (v->k > Kmax)
32803: #ifdef FREE
32803: 			FREE((void*)v);
32803: #else
32803: 			free((void*)v);
32803: #endif
32803: 		else {
16394: 			ACQUIRE_DTOA_LOCK(0);
16394: 			v->next = freelist[v->k];
16394: 			freelist[v->k] = v;
16394: 			FREE_DTOA_LOCK(0);
16394: 			}
16394: 		}
32803: 	}
16394: 
16394: #define Bcopy(x,y) memcpy((char *)&x->sign, (char *)&y->sign, \
16394: y->wds*sizeof(Long) + 2*sizeof(int))
16394: 
16394:  static Bigint *
16394: multadd
16394: #ifdef KR_headers
16394: 	(b, m, a) Bigint *b; int m, a;
16394: #else
16394: 	(Bigint *b, int m, int a)	/* multiply by m and add a */
16394: #endif
16394: {
16394: 	int i, wds;
16394: #ifdef ULLong
16394: 	ULong *x;
16394: 	ULLong carry, y;
16394: #else
16394: 	ULong carry, *x, y;
16394: #ifdef Pack_32
16394: 	ULong xi, z;
16394: #endif
16394: #endif
16394: 	Bigint *b1;
16394: 
16394: 	wds = b->wds;
16394: 	x = b->x;
16394: 	i = 0;
16394: 	carry = a;
16394: 	do {
16394: #ifdef ULLong
16394: 		y = *x * (ULLong)m + carry;
16394: 		carry = y >> 32;
16394: 		*x++ = (ULong) y & FFFFFFFF;
16394: #else
16394: #ifdef Pack_32
16394: 		xi = *x;
16394: 		y = (xi & 0xffff) * m + carry;
16394: 		z = (xi >> 16) * m + (y >> 16);
16394: 		carry = z >> 16;
16394: 		*x++ = (z << 16) + (y & 0xffff);
16394: #else
16394: 		y = *x * m + carry;
16394: 		carry = y >> 16;
16394: 		*x++ = y & 0xffff;
16394: #endif
16394: #endif
16394: 		}
16394: 		while(++i < wds);
16394: 	if (carry) {
16394: 		if (wds >= b->maxwds) {
16394: 			b1 = Balloc(b->k+1);
16394: 			Bcopy(b1, b);
16394: 			Bfree(b);
16394: 			b = b1;
16394: 			}
16394: 		b->x[wds++] = (ULong) carry;
16394: 		b->wds = wds;
16394: 		}
16394: 	return b;
16394: 	}
16394: 
16394:  static Bigint *
16394: s2b
16394: #ifdef KR_headers
16394: 	(s, nd0, nd, y9) CONST char *s; int nd0, nd; ULong y9;
16394: #else
16394: 	(CONST char *s, int nd0, int nd, ULong y9)
16394: #endif
16394: {
16394: 	Bigint *b;
16394: 	int i, k;
16394: 	Long x, y;
16394: 
16394: 	x = (nd + 8) / 9;
16394: 	for(k = 0, y = 1; x > y; y <<= 1, k++) ;
16394: #ifdef Pack_32
16394: 	b = Balloc(k);
16394: 	b->x[0] = y9;
16394: 	b->wds = 1;
16394: #else
16394: 	b = Balloc(k+1);
16394: 	b->x[0] = y9 & 0xffff;
16394: 	b->wds = (b->x[1] = y9 >> 16) ? 2 : 1;
16394: #endif
16394: 
16394: 	i = 9;
16394: 	if (9 < nd0) {
16394: 		s += 9;
16394: 		do b = multadd(b, 10, *s++ - '0');
16394: 			while(++i < nd0);
16394: 		s++;
16394: 		}
16394: 	else
16394: 		s += 10;
16394: 	for(; i < nd; i++)
16394: 		b = multadd(b, 10, *s++ - '0');
16394: 	return b;
16394: 	}
16394: 
16394:  static int
16394: hi0bits
16394: #ifdef KR_headers
16394: 	(x) register ULong x;
16394: #else
16394: 	(register ULong x)
16394: #endif
16394: {
16394: 	register int k = 0;
16394: 
16394: 	if (!(x & 0xffff0000)) {
16394: 		k = 16;
16394: 		x <<= 16;
16394: 		}
16394: 	if (!(x & 0xff000000)) {
16394: 		k += 8;
16394: 		x <<= 8;
16394: 		}
16394: 	if (!(x & 0xf0000000)) {
16394: 		k += 4;
16394: 		x <<= 4;
16394: 		}
16394: 	if (!(x & 0xc0000000)) {
16394: 		k += 2;
16394: 		x <<= 2;
16394: 		}
16394: 	if (!(x & 0x80000000)) {
16394: 		k++;
16394: 		if (!(x & 0x40000000))
16394: 			return 32;
16394: 		}
16394: 	return k;
16394: 	}
16394: 
16394:  static int
16394: lo0bits
16394: #ifdef KR_headers
16394: 	(y) ULong *y;
16394: #else
16394: 	(ULong *y)
16394: #endif
16394: {
16394: 	register int k;
16394: 	register ULong x = *y;
16394: 
16394: 	if (x & 7) {
16394: 		if (x & 1)
16394: 			return 0;
16394: 		if (x & 2) {
16394: 			*y = x >> 1;
16394: 			return 1;
16394: 			}
16394: 		*y = x >> 2;
16394: 		return 2;
16394: 		}
16394: 	k = 0;
16394: 	if (!(x & 0xffff)) {
16394: 		k = 16;
16394: 		x >>= 16;
16394: 		}
16394: 	if (!(x & 0xff)) {
16394: 		k += 8;
16394: 		x >>= 8;
16394: 		}
16394: 	if (!(x & 0xf)) {
16394: 		k += 4;
16394: 		x >>= 4;
16394: 		}
16394: 	if (!(x & 0x3)) {
16394: 		k += 2;
16394: 		x >>= 2;
16394: 		}
16394: 	if (!(x & 1)) {
16394: 		k++;
16394: 		x >>= 1;
16394: 		if (!x)
16394: 			return 32;
16394: 		}
16394: 	*y = x;
16394: 	return k;
16394: 	}
16394: 
16394:  static Bigint *
16394: i2b
16394: #ifdef KR_headers
16394: 	(i) int i;
16394: #else
16394: 	(int i)
16394: #endif
16394: {
16394: 	Bigint *b;
16394: 
16394: 	b = Balloc(1);
16394: 	b->x[0] = i;
16394: 	b->wds = 1;
16394: 	return b;
16394: 	}
16394: 
16394:  static Bigint *
16394: mult
16394: #ifdef KR_headers
16394: 	(a, b) Bigint *a, *b;
16394: #else
16394: 	(Bigint *a, Bigint *b)
16394: #endif
16394: {
16394: 	Bigint *c;
16394: 	int k, wa, wb, wc;
16394: 	ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
16394: 	ULong y;
16394: #ifdef ULLong
16394: 	ULLong carry, z;
16394: #else
16394: 	ULong carry, z;
16394: #ifdef Pack_32
16394: 	ULong z2;
16394: #endif
16394: #endif
16394: 
16394: 	if (a->wds < b->wds) {
16394: 		c = a;
16394: 		a = b;
16394: 		b = c;
16394: 		}
16394: 	k = a->k;
16394: 	wa = a->wds;
16394: 	wb = b->wds;
16394: 	wc = wa + wb;
16394: 	if (wc > a->maxwds)
16394: 		k++;
16394: 	c = Balloc(k);
16394: 	for(x = c->x, xa = x + wc; x < xa; x++)
16394: 		*x = 0;
16394: 	xa = a->x;
16394: 	xae = xa + wa;
16394: 	xb = b->x;
16394: 	xbe = xb + wb;
16394: 	xc0 = c->x;
16394: #ifdef ULLong
16394: 	for(; xb < xbe; xc0++) {
16394: 		if ((y = *xb++)) {
16394: 			x = xa;
16394: 			xc = xc0;
16394: 			carry = 0;
16394: 			do {
16394: 				z = *x++ * (ULLong)y + *xc + carry;
16394: 				carry = z >> 32;
16394: 				*xc++ = (ULong) z & FFFFFFFF;
16394: 				}
16394: 				while(x < xae);
16394: 			*xc = (ULong) carry;
16394: 			}
16394: 		}
16394: #else
16394: #ifdef Pack_32
16394: 	for(; xb < xbe; xb++, xc0++) {
16394: 		if (y = *xb & 0xffff) {
16394: 			x = xa;
16394: 			xc = xc0;
16394: 			carry = 0;
16394: 			do {
16394: 				z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
16394: 				carry = z >> 16;
16394: 				z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
16394: 				carry = z2 >> 16;
16394: 				Storeinc(xc, z2, z);
16394: 				}
16394: 				while(x < xae);
16394: 			*xc = carry;
16394: 			}
16394: 		if (y = *xb >> 16) {
16394: 			x = xa;
16394: 			xc = xc0;
16394: 			carry = 0;
16394: 			z2 = *xc;
16394: 			do {
16394: 				z = (*x & 0xffff) * y + (*xc >> 16) + carry;
16394: 				carry = z >> 16;
16394: 				Storeinc(xc, z, z2);
16394: 				z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
16394: 				carry = z2 >> 16;
16394: 				}
16394: 				while(x < xae);
16394: 			*xc = z2;
16394: 			}
16394: 		}
16394: #else
16394: 	for(; xb < xbe; xc0++) {
16394: 		if (y = *xb++) {
16394: 			x = xa;
16394: 			xc = xc0;
16394: 			carry = 0;
16394: 			do {
16394: 				z = *x++ * y + *xc + carry;
16394: 				carry = z >> 16;
16394: 				*xc++ = z & 0xffff;
16394: 				}
16394: 				while(x < xae);
16394: 			*xc = carry;
16394: 			}
16394: 		}
16394: #endif
16394: #endif
16394: 	for(xc0 = c->x, xc = xc0 + wc; wc > 0 && !*--xc; --wc) ;
16394: 	c->wds = wc;
16394: 	return c;
16394: 	}
16394: 
16394:  static Bigint *p5s;
16394: 
16394:  static Bigint *
16394: pow5mult
16394: #ifdef KR_headers
16394: 	(b, k) Bigint *b; int k;
16394: #else
16394: 	(Bigint *b, int k)
16394: #endif
16394: {
16394: 	Bigint *b1, *p5, *p51;
16394: 	int i;
16394: 	static int p05[3] = { 5, 25, 125 };
16394: 
16394: 	if ((i = k & 3))
16394: 		b = multadd(b, p05[i-1], 0);
16394: 
16394: 	if (!(k >>= 2))
16394: 		return b;
16394: 	if (!(p5 = p5s)) {
16394: 		/* first time */
16394: #ifdef MULTIPLE_THREADS
16394: 		ACQUIRE_DTOA_LOCK(1);
16394: 		if (!(p5 = p5s)) {
16394: 			p5 = p5s = i2b(625);
16394: 			p5->next = 0;
16394: 			}
16394: 		FREE_DTOA_LOCK(1);
16394: #else
16394: 		p5 = p5s = i2b(625);
16394: 		p5->next = 0;
16394: #endif
16394: 		}
16394: 	for(;;) {
16394: 		if (k & 1) {
16394: 			b1 = mult(b, p5);
16394: 			Bfree(b);
16394: 			b = b1;
16394: 			}
16394: 		if (!(k >>= 1))
16394: 			break;
16394: 		if (!(p51 = p5->next)) {
16394: #ifdef MULTIPLE_THREADS
16394: 			ACQUIRE_DTOA_LOCK(1);
16394: 			if (!(p51 = p5->next)) {
16394: 				p51 = p5->next = mult(p5,p5);
16394: 				p51->next = 0;
16394: 				}
16394: 			FREE_DTOA_LOCK(1);
16394: #else
16394: 			p51 = p5->next = mult(p5,p5);
16394: 			p51->next = 0;
16394: #endif
16394: 			}
16394: 		p5 = p51;
16394: 		}
16394: 	return b;
16394: 	}
16394: 
16394:  static Bigint *
16394: lshift
16394: #ifdef KR_headers
16394: 	(b, k) Bigint *b; int k;
16394: #else
16394: 	(Bigint *b, int k)
16394: #endif
16394: {
16394: 	int i, k1, n, n1;
16394: 	Bigint *b1;
16394: 	ULong *x, *x1, *xe, z;
16394: 
16394: #ifdef Pack_32
16394: 	n = k >> 5;
16394: #else
16394: 	n = k >> 4;
16394: #endif
16394: 	k1 = b->k;
16394: 	n1 = n + b->wds + 1;
16394: 	for(i = b->maxwds; n1 > i; i <<= 1)
16394: 		k1++;
16394: 	b1 = Balloc(k1);
16394: 	x1 = b1->x;
16394: 	for(i = 0; i < n; i++)
16394: 		*x1++ = 0;
16394: 	x = b->x;
16394: 	xe = x + b->wds;
16394: #ifdef Pack_32
16394: 	if (k &= 0x1f) {
16394: 		k1 = 32 - k;
16394: 		z = 0;
16394: 		do {
16394: 			*x1++ = *x << k | z;
16394: 			z = *x++ >> k1;
16394: 			}
16394: 			while(x < xe);
16394: 		if ((*x1 = z))
16394: 			++n1;
16394: 		}
16394: #else
16394: 	if (k &= 0xf) {
16394: 		k1 = 16 - k;
16394: 		z = 0;
16394: 		do {
16394: 			*x1++ = *x << k  & 0xffff | z;
16394: 			z = *x++ >> k1;
16394: 			}
16394: 			while(x < xe);
16394: 		if (*x1 = z)
16394: 			++n1;
16394: 		}
16394: #endif
16394: 	else do
16394: 		*x1++ = *x++;
16394: 		while(x < xe);
16394: 	b1->wds = n1 - 1;
16394: 	Bfree(b);
16394: 	return b1;
16394: 	}
16394: 
16394:  static int
16394: cmp
16394: #ifdef KR_headers
16394: 	(a, b) Bigint *a, *b;
16394: #else
16394: 	(Bigint *a, Bigint *b)
16394: #endif
16394: {
16394: 	ULong *xa, *xa0, *xb, *xb0;
16394: 	int i, j;
16394: 
16394: 	i = a->wds;
16394: 	j = b->wds;
16394: #ifdef DEBUG
16394: 	if (i > 1 && !a->x[i-1])
16394: 		Bug("cmp called with a->x[a->wds-1] == 0");
16394: 	if (j > 1 && !b->x[j-1])
16394: 		Bug("cmp called with b->x[b->wds-1] == 0");
16394: #endif
16394: 	if (i -= j)
16394: 		return i;
16394: 	xa0 = a->x;
16394: 	xa = xa0 + j;
16394: 	xb0 = b->x;
16394: 	xb = xb0 + j;
16394: 	for(;;) {
16394: 		if (*--xa != *--xb)
16394: 			return *xa < *xb ? -1 : 1;
16394: 		if (xa <= xa0)
16394: 			break;
16394: 		}
16394: 	return 0;
16394: 	}
16394: 
16394:  static Bigint *
16394: diff
16394: #ifdef KR_headers
16394: 	(a, b) Bigint *a, *b;
16394: #else
16394: 	(Bigint *a, Bigint *b)
16394: #endif
16394: {
16394: 	Bigint *c;
16394: 	int i, wa, wb;
16394: 	ULong *xa, *xae, *xb, *xbe, *xc;
16394: #ifdef ULLong
16394: 	ULLong borrow, y;
16394: #else
16394: 	ULong borrow, y;
16394: #ifdef Pack_32
16394: 	ULong z;
16394: #endif
16394: #endif
16394: 
16394: 	i = cmp(a,b);
16394: 	if (!i) {
16394: 		c = Balloc(0);
16394: 		c->wds = 1;
16394: 		c->x[0] = 0;
16394: 		return c;
16394: 		}
16394: 	if (i < 0) {
16394: 		c = a;
16394: 		a = b;
16394: 		b = c;
16394: 		i = 1;
16394: 		}
16394: 	else
16394: 		i = 0;
16394: 	c = Balloc(a->k);
16394: 	c->sign = i;
16394: 	wa = a->wds;
16394: 	xa = a->x;
16394: 	xae = xa + wa;
16394: 	wb = b->wds;
16394: 	xb = b->x;
16394: 	xbe = xb + wb;
16394: 	xc = c->x;
16394: 	borrow = 0;
16394: #ifdef ULLong
16394: 	do {
16394: 		y = (ULLong)*xa++ - *xb++ - borrow;
16394: 		borrow = y >> 32 & (ULong)1;
16394: 		*xc++ = (ULong) y & FFFFFFFF;
16394: 		}
16394: 		while(xb < xbe);
16394: 	while(xa < xae) {
16394: 		y = *xa++ - borrow;
16394: 		borrow = y >> 32 & (ULong)1;
16394: 		*xc++ = (ULong) y & FFFFFFFF;
16394: 		}
16394: #else
16394: #ifdef Pack_32
16394: 	do {
16394: 		y = (*xa & 0xffff) - (*xb & 0xffff) - borrow;
16394: 		borrow = (y & 0x10000) >> 16;
16394: 		z = (*xa++ >> 16) - (*xb++ >> 16) - borrow;
16394: 		borrow = (z & 0x10000) >> 16;
16394: 		Storeinc(xc, z, y);
16394: 		}
16394: 		while(xb < xbe);
16394: 	while(xa < xae) {
16394: 		y = (*xa & 0xffff) - borrow;
16394: 		borrow = (y & 0x10000) >> 16;
16394: 		z = (*xa++ >> 16) - borrow;
16394: 		borrow = (z & 0x10000) >> 16;
16394: 		Storeinc(xc, z, y);
16394: 		}
16394: #else
16394: 	do {
16394: 		y = *xa++ - *xb++ - borrow;
16394: 		borrow = (y & 0x10000) >> 16;
16394: 		*xc++ = y & 0xffff;
16394: 		}
16394: 		while(xb < xbe);
16394: 	while(xa < xae) {
16394: 		y = *xa++ - borrow;
16394: 		borrow = (y & 0x10000) >> 16;
16394: 		*xc++ = y & 0xffff;
16394: 		}
16394: #endif
16394: #endif
16394: 	while(!*--xc)
16394: 		wa--;
16394: 	c->wds = wa;
16394: 	return c;
16394: 	}
16394: 
16394:  static double
16394: ulp
16394: #ifdef KR_headers
18414: 	(x) U x;
16394: #else
18414: 	(U x)
16394: #endif
16394: {
16394: 	register Long L;
18414: 	U a;
16394: 
16394: 	L = (word0(x) & Exp_mask) - (P-1)*Exp_msk1;
16394: #ifndef Avoid_Underflow
16394: #ifndef Sudden_Underflow
16394: 	if (L > 0) {
16394: #endif
16394: #endif
16394: #ifdef IBM
16394: 		L |= Exp_msk1 >> 4;
16394: #endif
16394: 		word0(a) = L;
16394: 		word1(a) = 0;
16394: #ifndef Avoid_Underflow
16394: #ifndef Sudden_Underflow
16394: 		}
16394: 	else {
16394: 		L = -L >> Exp_shift;
16394: 		if (L < Exp_shift) {
16394: 			word0(a) = 0x80000 >> L;
16394: 			word1(a) = 0;
16394: 			}
16394: 		else {
16394: 			word0(a) = 0;
16394: 			L -= Exp_shift;
16394: 			word1(a) = L >= 31 ? 1 : 1 << 31 - L;
16394: 			}
16394: 		}
16394: #endif
16394: #endif
16394: 	return dval(a);
16394: 	}
16394: 
16394:  static double
16394: b2d
16394: #ifdef KR_headers
16394: 	(a, e) Bigint *a; int *e;
16394: #else
16394: 	(Bigint *a, int *e)
16394: #endif
16394: {
16394: 	ULong *xa, *xa0, w, y, z;
16394: 	int k;
18414: 	U d;
16394: #ifdef VAX
16394: 	ULong d0, d1;
16394: #else
16394: #define d0 word0(d)
16394: #define d1 word1(d)
16394: #endif
16394: 
16394: 	xa0 = a->x;
16394: 	xa = xa0 + a->wds;
16394: 	y = *--xa;
16394: #ifdef DEBUG
16394: 	if (!y) Bug("zero y in b2d");
16394: #endif
16394: 	k = hi0bits(y);
16394: 	*e = 32 - k;
16394: #ifdef Pack_32
16394: 	if (k < Ebits) {
16394: 		d0 = Exp_1 | y >> (Ebits - k);
16394: 		w = xa > xa0 ? *--xa : 0;
16394: 		d1 = y << ((32-Ebits) + k) | w >> (Ebits - k);
16394: 		goto ret_d;
16394: 		}
16394: 	z = xa > xa0 ? *--xa : 0;
16394: 	if (k -= Ebits) {
16394: 		d0 = Exp_1 | y << k | z >> (32 - k);
16394: 		y = xa > xa0 ? *--xa : 0;
16394: 		d1 = z << k | y >> (32 - k);
16394: 		}
16394: 	else {
16394: 		d0 = Exp_1 | y;
16394: 		d1 = z;
16394: 		}
16394: #else
16394: 	if (k < Ebits + 16) {
16394: 		z = xa > xa0 ? *--xa : 0;
16394: 		d0 = Exp_1 | y << k - Ebits | z >> Ebits + 16 - k;
16394: 		w = xa > xa0 ? *--xa : 0;
16394: 		y = xa > xa0 ? *--xa : 0;
16394: 		d1 = z << k + 16 - Ebits | w << k - Ebits | y >> 16 + Ebits - k;
16394: 		goto ret_d;
16394: 		}
16394: 	z = xa > xa0 ? *--xa : 0;
16394: 	w = xa > xa0 ? *--xa : 0;
16394: 	k -= Ebits + 16;
16394: 	d0 = Exp_1 | y << k + 16 | z << k | w >> 16 - k;
16394: 	y = xa > xa0 ? *--xa : 0;
16394: 	d1 = w << k + 16 | y << k;
16394: #endif
16394:  ret_d:
16394: #ifdef VAX
16394: 	word0(d) = d0 >> 16 | d0 << 16;
16394: 	word1(d) = d1 >> 16 | d1 << 16;
16394: #else
16394: #undef d0
16394: #undef d1
16394: #endif
16394: 	return dval(d);
16394: 	}
16394: 
16394:  static Bigint *
16394: d2b
16394: #ifdef KR_headers
18414: 	(d, e, bits) U d; int *e, *bits;
16394: #else
18414: 	(U d, int *e, int *bits)
16394: #endif
16394: {
16394: 	Bigint *b;
16394: 	int de, k;
16394: 	ULong *x, y, z;
16394: #ifndef Sudden_Underflow
16394: 	int i;
16394: #endif
16394: #ifdef VAX
16394: 	ULong d0, d1;
16394: 	d0 = word0(d) >> 16 | word0(d) << 16;
16394: 	d1 = word1(d) >> 16 | word1(d) << 16;
16394: #else
16394: #define d0 word0(d)
16394: #define d1 word1(d)
16394: #endif
16394: 
16394: #ifdef Pack_32
16394: 	b = Balloc(1);
16394: #else
16394: 	b = Balloc(2);
16394: #endif
16394: 	x = b->x;
16394: 
16394: 	z = d0 & Frac_mask;
16394: 	d0 &= 0x7fffffff;	/* clear sign bit, which we ignore */
16394: #ifdef Sudden_Underflow
16394: 	de = (int)(d0 >> Exp_shift);
16394: #ifndef IBM
16394: 	z |= Exp_msk11;
16394: #endif
16394: #else
16394: 	if ((de = (int)(d0 >> Exp_shift)))
16394: 		z |= Exp_msk1;
16394: #endif
16394: #ifdef Pack_32
16394: 	if ((y = d1)) {
16394: 		if ((k = lo0bits(&y))) {
16394: 			x[0] = y | z << (32 - k);
16394: 			z >>= k;
16394: 			}
16394: 		else
16394: 			x[0] = y;
16394: #ifndef Sudden_Underflow
16394: 		i =
16394: #endif
16394: 		    b->wds = (x[1] = z) ? 2 : 1;
16394: 		}
16394: 	else {
16394: 		k = lo0bits(&z);
16394: 		x[0] = z;
16394: #ifndef Sudden_Underflow
16394: 		i =
16394: #endif
16394: 		    b->wds = 1;
16394: 		k += 32;
16394: 		}
16394: #else
16394: 	if (y = d1) {
16394: 		if (k = lo0bits(&y))
16394: 			if (k >= 16) {
16394: 				x[0] = y | z << 32 - k & 0xffff;
16394: 				x[1] = z >> k - 16 & 0xffff;
16394: 				x[2] = z >> k;
16394: 				i = 2;
16394: 				}
16394: 			else {
16394: 				x[0] = y & 0xffff;
16394: 				x[1] = y >> 16 | z << 16 - k & 0xffff;
16394: 				x[2] = z >> k & 0xffff;
16394: 				x[3] = z >> k+16;
16394: 				i = 3;
16394: 				}
16394: 		else {
16394: 			x[0] = y & 0xffff;
16394: 			x[1] = y >> 16;
16394: 			x[2] = z & 0xffff;
16394: 			x[3] = z >> 16;
16394: 			i = 3;
16394: 			}
16394: 		}
16394: 	else {
16394: #ifdef DEBUG
16394: 		if (!z)
16394: 			Bug("Zero passed to d2b");
16394: #endif
16394: 		k = lo0bits(&z);
16394: 		if (k >= 16) {
16394: 			x[0] = z;
16394: 			i = 0;
16394: 			}
16394: 		else {
16394: 			x[0] = z & 0xffff;
16394: 			x[1] = z >> 16;
16394: 			i = 1;
16394: 			}
16394: 		k += 32;
16394: 		}
16394: 	while(!x[i])
16394: 		--i;
16394: 	b->wds = i + 1;
16394: #endif
16394: #ifndef Sudden_Underflow
16394: 	if (de) {
16394: #endif
16394: #ifdef IBM
16394: 		*e = (de - Bias - (P-1) << 2) + k;
16394: 		*bits = 4*P + 8 - k - hi0bits(word0(d) & Frac_mask);
16394: #else
16394: 		*e = de - Bias - (P-1) + k;
16394: 		*bits = P - k;
16394: #endif
16394: #ifndef Sudden_Underflow
16394: 		}
16394: 	else {
16394: 		*e = de - Bias - (P-1) + 1 + k;
16394: #ifdef Pack_32
16394: 		*bits = 32*i - hi0bits(x[i-1]);
16394: #else
16394: 		*bits = (i+2)*16 - hi0bits(x[i]);
16394: #endif
16394: 		}
16394: #endif
16394: 	return b;
16394: 	}
16394: #undef d0
16394: #undef d1
16394: 
16394:  static double
16394: ratio
16394: #ifdef KR_headers
16394: 	(a, b) Bigint *a, *b;
16394: #else
16394: 	(Bigint *a, Bigint *b)
16394: #endif
16394: {
18414: 	U da, db;
16394: 	int k, ka, kb;
16394: 
16394: 	dval(da) = b2d(a, &ka);
16394: 	dval(db) = b2d(b, &kb);
16394: #ifdef Pack_32
16394: 	k = ka - kb + 32*(a->wds - b->wds);
16394: #else
16394: 	k = ka - kb + 16*(a->wds - b->wds);
16394: #endif
16394: #ifdef IBM
16394: 	if (k > 0) {
16394: 		word0(da) += (k >> 2)*Exp_msk1;
16394: 		if (k &= 3)
16394: 			dval(da) *= 1 << k;
16394: 		}
16394: 	else {
16394: 		k = -k;
16394: 		word0(db) += (k >> 2)*Exp_msk1;
16394: 		if (k &= 3)
16394: 			dval(db) *= 1 << k;
16394: 		}
16394: #else
16394: 	if (k > 0)
16394: 		word0(da) += k*Exp_msk1;
16394: 	else {
16394: 		k = -k;
16394: 		word0(db) += k*Exp_msk1;
16394: 		}
16394: #endif
16394: 	return dval(da) / dval(db);
16394: 	}
16394: 
16394:  static CONST double
16394: tens[] = {
16394: 		1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9,
16394: 		1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,
16394: 		1e20, 1e21, 1e22
16394: #ifdef VAX
16394: 		, 1e23, 1e24
16394: #endif
16394: 		};
16394: 
16394:  static CONST double
16394: #ifdef IEEE_Arith
16394: bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 };
16394: static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64, 1e-128,
16394: #ifdef Avoid_Underflow
16394: 		9007199254740992.*9007199254740992.e-256
16394: 		/* = 2^106 * 1e-53 */
16394: #else
16394: 		1e-256
16394: #endif
16394: 		};
16394: /* The factor of 2^53 in tinytens[4] helps us avoid setting the underflow */
16394: /* flag unnecessarily.  It leads to a song and dance at the end of strtod. */
16394: #define Scale_Bit 0x10
16394: #define n_bigtens 5
16394: #else
16394: #ifdef IBM
16394: bigtens[] = { 1e16, 1e32, 1e64 };
16394: static CONST double tinytens[] = { 1e-16, 1e-32, 1e-64 };
16394: #define n_bigtens 3
16394: #else
16394: bigtens[] = { 1e16, 1e32 };
16394: static CONST double tinytens[] = { 1e-16, 1e-32 };
16394: #define n_bigtens 2
16394: #endif
16394: #endif
16394: 
16394: #ifdef INFNAN_CHECK
16394: 
16394: #ifndef NAN_WORD0
16394: #define NAN_WORD0 0x7ff80000
16394: #endif
16394: 
16394: #ifndef NAN_WORD1
16394: #define NAN_WORD1 0
16394: #endif
16394: 
16394:  static int
16394: match
16394: #ifdef KR_headers
16394: 	(sp, t) char **sp, *t;
16394: #else
16394: 	(CONST char **sp, CONST char *t)
16394: #endif
16394: {
16394: 	int c, d;
16394: 	CONST char *s = *sp;
16394: 
16394: 	while((d = *t++)) {
16394: 		if ((c = *++s) >= 'A' && c <= 'Z')
16394: 			c += 'a' - 'A';
16394: 		if (c != d)
16394: 			return 0;
16394: 		}
16394: 	*sp = s + 1;
16394: 	return 1;
16394: 	}
16394: 
16394: #ifndef No_Hex_NaN
16394:  static void
16394: hexnan
16394: #ifdef KR_headers
18414: 	(rvp, sp) U *rvp; CONST char **sp;
16394: #else
18414: 	(U *rvp, CONST char **sp)
16394: #endif
16394: {
16394: 	ULong c, x[2];
16394: 	CONST char *s;
16394: 	int havedig, udx0, xshift;
16394: 
16394: 	x[0] = x[1] = 0;
16394: 	havedig = xshift = 0;
16394: 	udx0 = 1;
16394: 	s = *sp;
16394: 	/* allow optional initial 0x or 0X */
16394: 	while((c = *(CONST unsigned char*)(s+1)) && c <= ' ')
16394: 		++s;
16394: 	if (s[1] == '0' && (s[2] == 'x' || s[2] == 'X'))
16394: 		s += 2;
16394: 	while((c = *(CONST unsigned char*)++s)) {
16394: 		if (c >= '0' && c <= '9')
16394: 			c -= '0';
16394: 		else if (c >= 'a' && c <= 'f')
16394: 			c += 10 - 'a';
16394: 		else if (c >= 'A' && c <= 'F')
16394: 			c += 10 - 'A';
16394: 		else if (c <= ' ') {
16394: 			if (udx0 && havedig) {
16394: 				udx0 = 0;
16394: 				xshift = 1;
16394: 				}
16394: 			continue;
16394: 			}
16394: #ifdef GDTOA_NON_PEDANTIC_NANCHECK
16394: 		else if (/*(*/ c == ')' && havedig) {
16394: 			*sp = s + 1;
16394: 			break;
16394: 			}
16394: 		else
16394: 			return;	/* invalid form: don't change *sp */
16394: #else
16394: 		else {
16394: 			do {
16394: 				if (/*(*/ c == ')') {
16394: 					*sp = s + 1;
16394: 					break;
16394: 					}
16394: 				} while((c = *++s));
16394: 			break;
16394: 			}
16394: #endif
16394: 		havedig = 1;
16394: 		if (xshift) {
16394: 			xshift = 0;
16394: 			x[0] = x[1];
16394: 			x[1] = 0;
16394: 			}
16394: 		if (udx0)
16394: 			x[0] = (x[0] << 4) | (x[1] >> 28);
16394: 		x[1] = (x[1] << 4) | c;
16394: 		}
16394: 	if ((x[0] &= 0xfffff) || x[1]) {
16394: 		word0(*rvp) = Exp_mask | x[0];
16394: 		word1(*rvp) = x[1];
16394: 		}
16394: 	}
16394: #endif /*No_Hex_NaN*/
16394: #endif /* INFNAN_CHECK */
16394: 
16394:  static double
16394: _strtod
16394: #ifdef KR_headers
16394: 	(s00, se) CONST char *s00; char **se;
16394: #else
16394: 	(CONST char *s00, char **se)
16394: #endif
16394: {
16394: #ifdef Avoid_Underflow
16394: 	int scale;
16394: #endif
16394: 	int bb2, bb5, bbe, bd2, bd5, bbbits, bs2, c, dsign,
16394: 		 e, e1, esign, i, j, k, nd, nd0, nf, nz, nz0, sign;
16394: 	CONST char *s, *s0, *s1;
18414: 	double aadj, adj;
18414: 	U aadj1, rv, rv0;
16394: 	Long L;
16394: 	ULong y, z;
16394: 	Bigint *bb, *bb1, *bd, *bd0, *bs, *delta;
16394: #ifdef SET_INEXACT
16394: 	int inexact, oldinexact;
16394: #endif
16394: #ifdef Honor_FLT_ROUNDS
16394: 	int rounding;
16394: #endif
16394: #ifdef USE_LOCALE
16394: 	CONST char *s2;
16394: #endif
16394: 
16394: #ifdef __GNUC__
16394: 	delta = bb = bd = bs = 0;
16394: #endif
16394: 
16394: 	sign = nz0 = nz = 0;
16394: 	dval(rv) = 0.;
16394: 	for(s = s00;;s++) switch(*s) {
16394: 		case '-':
16394: 			sign = 1;
16394: 			/* no break */
16394: 		case '+':
16394: 			if (*++s)
16394: 				goto break2;
16394: 			/* no break */
16394: 		case 0:
16394: 			goto ret0;
16394: 		case '\t':
16394: 		case '\n':
16394: 		case '\v':
16394: 		case '\f':
16394: 		case '\r':
16394: 		case ' ':
16394: 			continue;
16394: 		default:
16394: 			goto break2;
16394: 		}
16394:  break2:
16394: 	if (*s == '0') {
16394: 		nz0 = 1;
16394: 		while(*++s == '0') ;
16394: 		if (!*s)
16394: 			goto ret;
16394: 		}
16394: 	s0 = s;
16394: 	y = z = 0;
16394: 	for(nd = nf = 0; (c = *s) >= '0' && c <= '9'; nd++, s++)
16394: 		if (nd < 9)
16394: 			y = 10*y + c - '0';
16394: 		else if (nd < 16)
16394: 			z = 10*z + c - '0';
16394: 	nd0 = nd;
16394: #ifdef USE_LOCALE
16394: 	s1 = localeconv()->decimal_point;
16394: 	if (c == *s1) {
16394: 		c = '.';
16394: 		if (*++s1) {
16394: 			s2 = s;
16394: 			for(;;) {
16394: 				if (*++s2 != *s1) {
16394: 					c = 0;
16394: 					break;
16394: 					}
16394: 				if (!*++s1) {
16394: 					s = s2;
16394: 					break;
16394: 					}
16394: 				}
16394: 			}
16394: 		}
16394: #endif
16394: 	if (c == '.') {
16394: 		c = *++s;
16394: 		if (!nd) {
16394: 			for(; c == '0'; c = *++s)
16394: 				nz++;
16394: 			if (c > '0' && c <= '9') {
16394: 				s0 = s;
16394: 				nf += nz;
16394: 				nz = 0;
16394: 				goto have_dig;
16394: 				}
16394: 			goto dig_done;
16394: 			}
16394: 		for(; c >= '0' && c <= '9'; c = *++s) {
16394:  have_dig:
16394: 			nz++;
16394: 			if (c -= '0') {
16394: 				nf += nz;
16394: 				for(i = 1; i < nz; i++)
16394: 					if (nd++ < 9)
16394: 						y *= 10;
16394: 					else if (nd <= DBL_DIG + 1)
16394: 						z *= 10;
16394: 				if (nd++ < 9)
16394: 					y = 10*y + c;
16394: 				else if (nd <= DBL_DIG + 1)
16394: 					z = 10*z + c;
16394: 				nz = 0;
16394: 				}
16394: 			}
16394: 		}
16394:  dig_done:
16394: 	e = 0;
16394: 	if (c == 'e' || c == 'E') {
16394: 		if (!nd && !nz && !nz0) {
16394: 			goto ret0;
16394: 			}
16394: 		s00 = s;
16394: 		esign = 0;
16394: 		switch(c = *++s) {
16394: 			case '-':
16394: 				esign = 1;
16394: 			case '+':
16394: 				c = *++s;
16394: 			}
16394: 		if (c >= '0' && c <= '9') {
16394: 			while(c == '0')
16394: 				c = *++s;
16394: 			if (c > '0' && c <= '9') {
16394: 				L = c - '0';
16394: 				s1 = s;
16394: 				while((c = *++s) >= '0' && c <= '9')
16394: 					L = 10*L + c - '0';
16394: 				if (s - s1 > 8 || L > 19999)
16394: 					/* Avoid confusion from exponents
16394: 					 * so large that e might overflow.
16394: 					 */
16394: 					e = 19999; /* safe for 16 bit ints */
16394: 				else
16394: 					e = (int)L;
16394: 				if (esign)
16394: 					e = -e;
16394: 				}
16394: 			else
16394: 				e = 0;
16394: 			}
16394: 		else
16394: 			s = s00;
16394: 		}
16394: 	if (!nd) {
16394: 		if (!nz && !nz0) {
16394: #ifdef INFNAN_CHECK
16394: 			/* Check for Nan and Infinity */
16394: 			switch(c) {
16394: 			  case 'i':
16394: 			  case 'I':
16394: 				if (match(&s,"nf")) {
16394: 					--s;
16394: 					if (!match(&s,"inity"))
16394: 						++s;
16394: 					word0(rv) = 0x7ff00000;
16394: 					word1(rv) = 0;
16394: 					goto ret;
16394: 					}
16394: 				break;
16394: 			  case 'n':
16394: 			  case 'N':
16394: 				if (match(&s, "an")) {
16394: 					word0(rv) = NAN_WORD0;
16394: 					word1(rv) = NAN_WORD1;
16394: #ifndef No_Hex_NaN
16394: 					if (*s == '(') /*)*/
16394: 						hexnan(&rv, &s);
16394: #endif
16394: 					goto ret;
16394: 					}
16394: 			  }
16394: #endif /* INFNAN_CHECK */
16394:  ret0:
16394: 			s = s00;
16394: 			sign = 0;
16394: 			}
16394: 		goto ret;
16394: 		}
16394: 	e1 = e -= nf;
16394: 
16394: 	/* Now we have nd0 digits, starting at s0, followed by a
16394: 	 * decimal point, followed by nd-nd0 digits.  The number we're
16394: 	 * after is the integer represented by those digits times
16394: 	 * 10**e */
16394: 
16394: 	if (!nd0)
16394: 		nd0 = nd;
16394: 	k = nd < DBL_DIG + 1 ? nd : DBL_DIG + 1;
16394: 	dval(rv) = y;
16394: 	if (k > 9) {
16394: #ifdef SET_INEXACT
16394: 		if (k > DBL_DIG)
16394: 			oldinexact = get_inexact();
16394: #endif
16394: 		dval(rv) = tens[k - 9] * dval(rv) + z;
16394: 		}
16394: 	bd0 = 0;
16394: 	if (nd <= DBL_DIG
16394: #ifndef RND_PRODQUOT
16394: #ifndef Honor_FLT_ROUNDS
16394: 		&& Flt_Rounds == 1
16394: #endif
16394: #endif
16394: 			) {
16394: 		if (!e)
16394: 			goto ret;
16394: 		if (e > 0) {
16394: 			if (e <= Ten_pmax) {
16394: #ifdef VAX
16394: 				goto vax_ovfl_check;
16394: #else
16394: #ifdef Honor_FLT_ROUNDS
16394: 				/* round correctly FLT_ROUNDS = 2 or 3 */
16394: 				if (sign) {
16394: 					rv = -rv;
16394: 					sign = 0;
16394: 					}
16394: #endif
16394: 				/* rv = */ rounded_product(dval(rv), tens[e]);
16394: 				goto ret;
16394: #endif
16394: 				}
16394: 			i = DBL_DIG - nd;
16394: 			if (e <= Ten_pmax + i) {
16394: 				/* A fancier test would sometimes let us do
16394: 				 * this for larger i values.
16394: 				 */
16394: #ifdef Honor_FLT_ROUNDS
16394: 				/* round correctly FLT_ROUNDS = 2 or 3 */
16394: 				if (sign) {
16394: 					rv = -rv;
16394: 					sign = 0;
16394: 					}
16394: #endif
16394: 				e -= i;
16394: 				dval(rv) *= tens[i];
16394: #ifdef VAX
16394: 				/* VAX exponent range is so narrow we must
16394: 				 * worry about overflow here...
16394: 				 */
16394:  vax_ovfl_check:
16394: 				word0(rv) -= P*Exp_msk1;
16394: 				/* rv = */ rounded_product(dval(rv), tens[e]);
16394: 				if ((word0(rv) & Exp_mask)
16394: 				 > Exp_msk1*(DBL_MAX_EXP+Bias-1-P))
16394: 					goto ovfl;
16394: 				word0(rv) += P*Exp_msk1;
16394: #else
16394: 				/* rv = */ rounded_product(dval(rv), tens[e]);
16394: #endif
16394: 				goto ret;
16394: 				}
16394: 			}
16394: #ifndef Inaccurate_Divide
16394: 		else if (e >= -Ten_pmax) {
16394: #ifdef Honor_FLT_ROUNDS
16394: 			/* round correctly FLT_ROUNDS = 2 or 3 */
16394: 			if (sign) {
16394: 				rv = -rv;
16394: 				sign = 0;
16394: 				}
16394: #endif
16394: 			/* rv = */ rounded_quotient(dval(rv), tens[-e]);
16394: 			goto ret;
16394: 			}
16394: #endif
16394: 		}
16394: 	e1 += nd - k;
16394: 
16394: #ifdef IEEE_Arith
16394: #ifdef SET_INEXACT
16394: 	inexact = 1;
16394: 	if (k <= DBL_DIG)
16394: 		oldinexact = get_inexact();
16394: #endif
16394: #ifdef Avoid_Underflow
16394: 	scale = 0;
16394: #endif
16394: #ifdef Honor_FLT_ROUNDS
16394: 	if ((rounding = Flt_Rounds) >= 2) {
16394: 		if (sign)
16394: 			rounding = rounding == 2 ? 0 : 2;
16394: 		else
16394: 			if (rounding != 2)
16394: 				rounding = 0;
16394: 		}
16394: #endif
16394: #endif /*IEEE_Arith*/
16394: 
16394: 	/* Get starting approximation = rv * 10**e1 */
16394: 
16394: 	if (e1 > 0) {
16394: 		if ((i = e1 & 15))
16394: 			dval(rv) *= tens[i];
16394: 		if (e1 &= ~15) {
16394: 			if (e1 > DBL_MAX_10_EXP) {
16394:  ovfl:
16394: #ifndef NO_ERRNO
16394: 				errno = ERANGE;
16394: #endif
16394: 				/* Can't trust HUGE_VAL */
16394: #ifdef IEEE_Arith
16394: #ifdef Honor_FLT_ROUNDS
16394: 				switch(rounding) {
16394: 				  case 0: /* toward 0 */
16394: 				  case 3: /* toward -infinity */
16394: 					word0(rv) = Big0;
16394: 					word1(rv) = Big1;
16394: 					break;
16394: 				  default:
16394: 					word0(rv) = Exp_mask;
16394: 					word1(rv) = 0;
16394: 				  }
16394: #else /*Honor_FLT_ROUNDS*/
16394: 				word0(rv) = Exp_mask;
16394: 				word1(rv) = 0;
16394: #endif /*Honor_FLT_ROUNDS*/
16394: #ifdef SET_INEXACT
16394: 				/* set overflow bit */
16394: 				dval(rv0) = 1e300;
16394: 				dval(rv0) *= dval(rv0);
16394: #endif
16394: #else /*IEEE_Arith*/
16394: 				word0(rv) = Big0;
16394: 				word1(rv) = Big1;
16394: #endif /*IEEE_Arith*/
16394: 				if (bd0)
16394: 					goto retfree;
16394: 				goto ret;
16394: 				}
16394: 			e1 >>= 4;
16394: 			for(j = 0; e1 > 1; j++, e1 >>= 1)
16394: 				if (e1 & 1)
16394: 					dval(rv) *= bigtens[j];
16394: 		/* The last multiplication could overflow. */
16394: 			word0(rv) -= P*Exp_msk1;
16394: 			dval(rv) *= bigtens[j];
16394: 			if ((z = word0(rv) & Exp_mask)
16394: 			 > Exp_msk1*(DBL_MAX_EXP+Bias-P))
16394: 				goto ovfl;
16394: 			if (z > Exp_msk1*(DBL_MAX_EXP+Bias-1-P)) {
16394: 				/* set to largest number */
16394: 				/* (Can't trust DBL_MAX) */
16394: 				word0(rv) = Big0;
16394: 				word1(rv) = Big1;
16394: 				}
16394: 			else
16394: 				word0(rv) += P*Exp_msk1;
16394: 			}
16394: 		}
16394: 	else if (e1 < 0) {
16394: 		e1 = -e1;
16394: 		if ((i = e1 & 15))
16394: 			dval(rv) /= tens[i];
16394: 		if (e1 >>= 4) {
16394: 			if (e1 >= 1 << n_bigtens)
16394: 				goto undfl;
16394: #ifdef Avoid_Underflow
16394: 			if (e1 & Scale_Bit)
16394: 				scale = 2*P;
16394: 			for(j = 0; e1 > 0; j++, e1 >>= 1)
16394: 				if (e1 & 1)
16394: 					dval(rv) *= tinytens[j];
16394: 			if (scale && (j = 2*P + 1 - ((word0(rv) & Exp_mask)
16394: 						>> Exp_shift)) > 0) {
16394: 				/* scaled rv is denormal; zap j low bits */
16394: 				if (j >= 32) {
16394: 					word1(rv) = 0;
16394: 					if (j >= 53)
16394: 					 word0(rv) = (P+2)*Exp_msk1;
16394: 					else
16394: 					 word0(rv) &= 0xffffffff << (j-32);
16394: 					}
16394: 				else
16394: 					word1(rv) &= 0xffffffff << j;
16394: 				}
16394: #else
16394: 			for(j = 0; e1 > 1; j++, e1 >>= 1)
16394: 				if (e1 & 1)
16394: 					dval(rv) *= tinytens[j];
16394: 			/* The last multiplication could underflow. */
16394: 			dval(rv0) = dval(rv);
16394: 			dval(rv) *= tinytens[j];
16394: 			if (!dval(rv)) {
16394: 				dval(rv) = 2.*dval(rv0);
16394: 				dval(rv) *= tinytens[j];
16394: #endif
16394: 				if (!dval(rv)) {
16394:  undfl:
16394: 					dval(rv) = 0.;
16394: #ifndef NO_ERRNO
16394: 					errno = ERANGE;
16394: #endif
16394: 					if (bd0)
16394: 						goto retfree;
16394: 					goto ret;
16394: 					}
16394: #ifndef Avoid_Underflow
16394: 				word0(rv) = Tiny0;
16394: 				word1(rv) = Tiny1;
16394: 				/* The refinement below will clean
16394: 				 * this approximation up.
16394: 				 */
16394: 				}
16394: #endif
16394: 			}
16394: 		}
16394: 
16394: 	/* Now the hard part -- adjusting rv to the correct value.*/
16394: 
16394: 	/* Put digits into bd: true value = bd * 10^e */
16394: 
16394: 	bd0 = s2b(s0, nd0, nd, y);
16394: 
16394: 	for(;;) {
16394: 		bd = Balloc(bd0->k);
16394: 		Bcopy(bd, bd0);
18414: 		bb = d2b(rv, &bbe, &bbbits);	/* rv = bb * 2^bbe */
16394: 		bs = i2b(1);
16394: 
16394: 		if (e >= 0) {
16394: 			bb2 = bb5 = 0;
16394: 			bd2 = bd5 = e;
16394: 			}
16394: 		else {
16394: 			bb2 = bb5 = -e;
16394: 			bd2 = bd5 = 0;
16394: 			}
16394: 		if (bbe >= 0)
16394: 			bb2 += bbe;
16394: 		else
16394: 			bd2 -= bbe;
16394: 		bs2 = bb2;
16394: #ifdef Honor_FLT_ROUNDS
16394: 		if (rounding != 1)
16394: 			bs2++;
16394: #endif
16394: #ifdef Avoid_Underflow
16394: 		j = bbe - scale;
16394: 		i = j + bbbits - 1;	/* logb(rv) */
16394: 		if (i < Emin)	/* denormal */
16394: 			j += P - Emin;
16394: 		else
16394: 			j = P + 1 - bbbits;
16394: #else /*Avoid_Underflow*/
16394: #ifdef Sudden_Underflow
16394: #ifdef IBM
16394: 		j = 1 + 4*P - 3 - bbbits + ((bbe + bbbits - 1) & 3);
16394: #else
16394: 		j = P + 1 - bbbits;
16394: #endif
16394: #else /*Sudden_Underflow*/
16394: 		j = bbe;
16394: 		i = j + bbbits - 1;	/* logb(rv) */
16394: 		if (i < Emin)	/* denormal */
16394: 			j += P - Emin;
16394: 		else
16394: 			j = P + 1 - bbbits;
16394: #endif /*Sudden_Underflow*/
16394: #endif /*Avoid_Underflow*/
16394: 		bb2 += j;
16394: 		bd2 += j;
16394: #ifdef Avoid_Underflow
16394: 		bd2 += scale;
16394: #endif
16394: 		i = bb2 < bd2 ? bb2 : bd2;
16394: 		if (i > bs2)
16394: 			i = bs2;
16394: 		if (i > 0) {
16394: 			bb2 -= i;
16394: 			bd2 -= i;
16394: 			bs2 -= i;
16394: 			}
16394: 		if (bb5 > 0) {
16394: 			bs = pow5mult(bs, bb5);
16394: 			bb1 = mult(bs, bb);
16394: 			Bfree(bb);
16394: 			bb = bb1;
16394: 			}
16394: 		if (bb2 > 0)
16394: 			bb = lshift(bb, bb2);
16394: 		if (bd5 > 0)
16394: 			bd = pow5mult(bd, bd5);
16394: 		if (bd2 > 0)
16394: 			bd = lshift(bd, bd2);
16394: 		if (bs2 > 0)
16394: 			bs = lshift(bs, bs2);
16394: 		delta = diff(bb, bd);
16394: 		dsign = delta->sign;
16394: 		delta->sign = 0;
16394: 		i = cmp(delta, bs);
16394: #ifdef Honor_FLT_ROUNDS
16394: 		if (rounding != 1) {
16394: 			if (i < 0) {
16394: 				/* Error is less than an ulp */
16394: 				if (!delta->x[0] && delta->wds <= 1) {
16394: 					/* exact */
16394: #ifdef SET_INEXACT
16394: 					inexact = 0;
16394: #endif
16394: 					break;
16394: 					}
16394: 				if (rounding) {
16394: 					if (dsign) {
16394: 						adj = 1.;
16394: 						goto apply_adj;
16394: 						}
16394: 					}
16394: 				else if (!dsign) {
16394: 					adj = -1.;
16394: 					if (!word1(rv)
16394: 					 && !(word0(rv) & Frac_mask)) {
16394: 						y = word0(rv) & Exp_mask;
16394: #ifdef Avoid_Underflow
16394: 						if (!scale || y > 2*P*Exp_msk1)
16394: #else
16394: 						if (y)
16394: #endif
16394: 						  {
16394: 						  delta = lshift(delta,Log2P);
16394: 						  if (cmp(delta, bs) <= 0)
16394: 							adj = -0.5;
16394: 						  }
16394: 						}
16394:  apply_adj:
16394: #ifdef Avoid_Underflow
16394: 					if (scale && (y = word0(rv) & Exp_mask)
16394: 						<= 2*P*Exp_msk1)
16394: 					  word0(adj) += (2*P+1)*Exp_msk1 - y;
16394: #else
16394: #ifdef Sudden_Underflow
16394: 					if ((word0(rv) & Exp_mask) <=
16394: 							P*Exp_msk1) {
16394: 						word0(rv) += P*Exp_msk1;
18414: 						dval(rv) += adj*ulp(rv);
16394: 						word0(rv) -= P*Exp_msk1;
16394: 						}
16394: 					else
16394: #endif /*Sudden_Underflow*/
16394: #endif /*Avoid_Underflow*/
18414: 					dval(rv) += adj*ulp(rv);
16394: 					}
16394: 				break;
16394: 				}
16394: 			adj = ratio(delta, bs);
16394: 			if (adj < 1.)
16394: 				adj = 1.;
16394: 			if (adj <= 0x7ffffffe) {
16394: 				/* adj = rounding ? ceil(adj) : floor(adj); */
16394: 				y = adj;
16394: 				if (y != adj) {
16394: 					if (!((rounding>>1) ^ dsign))
16394: 						y++;
16394: 					adj = y;
16394: 					}
16394: 				}
16394: #ifdef Avoid_Underflow
16394: 			if (scale && (y = word0(rv) & Exp_mask) <= 2*P*Exp_msk1)
16394: 				word0(adj) += (2*P+1)*Exp_msk1 - y;
16394: #else
16394: #ifdef Sudden_Underflow
16394: 			if ((word0(rv) & Exp_mask) <= P*Exp_msk1) {
16394: 				word0(rv) += P*Exp_msk1;
18414: 				adj *= ulp(rv);
16394: 				if (dsign)
16394: 					dval(rv) += adj;
16394: 				else
16394: 					dval(rv) -= adj;
16394: 				word0(rv) -= P*Exp_msk1;
16394: 				goto cont;
16394: 				}
16394: #endif /*Sudden_Underflow*/
16394: #endif /*Avoid_Underflow*/
18414: 			adj *= ulp(rv);
16394: 			if (dsign)
16394: 				dval(rv) += adj;
16394: 			else
16394: 				dval(rv) -= adj;
16394: 			goto cont;
16394: 			}
16394: #endif /*Honor_FLT_ROUNDS*/
16394: 
16394: 		if (i < 0) {
16394: 			/* Error is less than half an ulp -- check for
16394: 			 * special case of mantissa a power of two.
16394: 			 */
16394: 			if (dsign || word1(rv) || word0(rv) & Bndry_mask
16394: #ifdef IEEE_Arith
16394: #ifdef Avoid_Underflow
16394: 			 || (word0(rv) & Exp_mask) <= (2*P+1)*Exp_msk1
16394: #else
16394: 			 || (word0(rv) & Exp_mask) <= Exp_msk1
16394: #endif
16394: #endif
16394: 				) {
16394: #ifdef SET_INEXACT
16394: 				if (!delta->x[0] && delta->wds <= 1)
16394: 					inexact = 0;
16394: #endif
16394: 				break;
16394: 				}
16394: 			if (!delta->x[0] && delta->wds <= 1) {
16394: 				/* exact result */
16394: #ifdef SET_INEXACT
16394: 				inexact = 0;
16394: #endif
16394: 				break;
16394: 				}
16394: 			delta = lshift(delta,Log2P);
16394: 			if (cmp(delta, bs) > 0)
16394: 				goto drop_down;
16394: 			break;
16394: 			}
16394: 		if (i == 0) {
16394: 			/* exactly half-way between */
16394: 			if (dsign) {
16394: 				if ((word0(rv) & Bndry_mask1) == Bndry_mask1
16394: 				 &&  word1(rv) == (
16394: #ifdef Avoid_Underflow
16394: 			(scale && (y = word0(rv) & Exp_mask) <= 2*P*Exp_msk1)
16394: 		? (0xffffffff & (0xffffffff << (2*P+1-(y>>Exp_shift)))) :
16394: #endif
16394: 						   0xffffffff)) {
16394: 					/*boundary case -- increment exponent*/
16394: 					word0(rv) = (word0(rv) & Exp_mask)
16394: 						+ Exp_msk1
16394: #ifdef IBM
16394: 						| Exp_msk1 >> 4
16394: #endif
16394: 						;
16394: 					word1(rv) = 0;
16394: #ifdef Avoid_Underflow
16394: 					dsign = 0;
16394: #endif
16394: 					break;
16394: 					}
16394: 				}
16394: 			else if (!(word0(rv) & Bndry_mask) && !word1(rv)) {
16394:  drop_down:
16394: 				/* boundary case -- decrement exponent */
16394: #ifdef Sudden_Underflow /*{{*/
16394: 				L = word0(rv) & Exp_mask;
16394: #ifdef IBM
16394: 				if (L <  Exp_msk1)
16394: #else
16394: #ifdef Avoid_Underflow
16394: 				if (L <= (scale ? (2*P+1)*Exp_msk1 : Exp_msk1))
16394: #else
16394: 				if (L <= Exp_msk1)
16394: #endif /*Avoid_Underflow*/
16394: #endif /*IBM*/
16394: 					goto undfl;
16394: 				L -= Exp_msk1;
16394: #else /*Sudden_Underflow}{*/
16394: #ifdef Avoid_Underflow
16394: 				if (scale) {
16394: 					L = word0(rv) & Exp_mask;
16394: 					if (L <= (2*P+1)*Exp_msk1) {
16394: 						if (L > (P+2)*Exp_msk1)
16394: 							/* round even ==> */
16394: 							/* accept rv */
16394: 							break;
16394: 						/* rv = smallest denormal */
16394: 						goto undfl;
16394: 						}
16394: 					}
16394: #endif /*Avoid_Underflow*/
16394: 				L = (word0(rv) & Exp_mask) - Exp_msk1;
16394: #endif /*Sudden_Underflow}}*/
16394: 				word0(rv) = L | Bndry_mask1;
16394: 				word1(rv) = 0xffffffff;
16394: #ifdef IBM
16394: 				goto cont;
16394: #else
16394: 				break;
16394: #endif
16394: 				}
16394: #ifndef ROUND_BIASED
16394: 			if (!(word1(rv) & LSB))
16394: 				break;
16394: #endif
16394: 			if (dsign)
18414: 				dval(rv) += ulp(rv);
16394: #ifndef ROUND_BIASED
16394: 			else {
18414: 				dval(rv) -= ulp(rv);
16394: #ifndef Sudden_Underflow
16394: 				if (!dval(rv))
16394: 					goto undfl;
16394: #endif
16394: 				}
16394: #ifdef Avoid_Underflow
16394: 			dsign = 1 - dsign;
16394: #endif
16394: #endif
16394: 			break;
16394: 			}
16394: 		if ((aadj = ratio(delta, bs)) <= 2.) {
16394: 			if (dsign)
18414: 				aadj = dval(aadj1) = 1.;
16394: 			else if (word1(rv) || word0(rv) & Bndry_mask) {
16394: #ifndef Sudden_Underflow
16394: 				if (word1(rv) == Tiny1 && !word0(rv))
16394: 					goto undfl;
16394: #endif
16394: 				aadj = 1.;
18414: 				dval(aadj1) = -1.;
16394: 				}
16394: 			else {
16394: 				/* special case -- power of FLT_RADIX to be */
16394: 				/* rounded down... */
16394: 
16394: 				if (aadj < 2./FLT_RADIX)
16394: 					aadj = 1./FLT_RADIX;
16394: 				else
16394: 					aadj *= 0.5;
18414: 				dval(aadj1) = -aadj;
16394: 				}
16394: 			}
16394: 		else {
16394: 			aadj *= 0.5;
18414: 			dval(aadj1) = dsign ? aadj : -aadj;
16394: #ifdef Check_FLT_ROUNDS
16394: 			switch(Rounding) {
16394: 				case 2: /* towards +infinity */
18414: 					dval(aadj1) -= 0.5;
16394: 					break;
16394: 				case 0: /* towards 0 */
16394: 				case 3: /* towards -infinity */
18414: 					dval(aadj1) += 0.5;
16394: 				}
16394: #else
16394: 			if (Flt_Rounds == 0)
18414: 				dval(aadj1) += 0.5;
16394: #endif /*Check_FLT_ROUNDS*/
16394: 			}
16394: 		y = word0(rv) & Exp_mask;
16394: 
16394: 		/* Check for overflow */
16394: 
16394: 		if (y == Exp_msk1*(DBL_MAX_EXP+Bias-1)) {
16394: 			dval(rv0) = dval(rv);
16394: 			word0(rv) -= P*Exp_msk1;
18414: 			adj = dval(aadj1) * ulp(rv);
16394: 			dval(rv) += adj;
16394: 			if ((word0(rv) & Exp_mask) >=
16394: 					Exp_msk1*(DBL_MAX_EXP+Bias-P)) {
16394: 				if (word0(rv0) == Big0 && word1(rv0) == Big1)
16394: 					goto ovfl;
16394: 				word0(rv) = Big0;
16394: 				word1(rv) = Big1;
16394: 				goto cont;
16394: 				}
16394: 			else
16394: 				word0(rv) += P*Exp_msk1;
16394: 			}
16394: 		else {
16394: #ifdef Avoid_Underflow
16394: 			if (scale && y <= 2*P*Exp_msk1) {
16394: 				if (aadj <= 0x7fffffff) {
16394: 					if ((z = (ULong) aadj) <= 0)
16394: 						z = 1;
16394: 					aadj = z;
18414: 					dval(aadj1) = dsign ? aadj : -aadj;
16394: 					}
16394: 				word0(aadj1) += (2*P+1)*Exp_msk1 - y;
16394: 				}
18414: 			adj = dval(aadj1) * ulp(rv);
16394: 			dval(rv) += adj;
16394: #else
16394: #ifdef Sudden_Underflow
16394: 			if ((word0(rv) & Exp_mask) <= P*Exp_msk1) {
16394: 				dval(rv0) = dval(rv);
16394: 				word0(rv) += P*Exp_msk1;
18414: 				adj = dval(aadj1) * ulp(rv);
16394: 				dval(rv) += adj;
16394: #ifdef IBM
16394: 				if ((word0(rv) & Exp_mask) <  P*Exp_msk1)
16394: #else
16394: 				if ((word0(rv) & Exp_mask) <= P*Exp_msk1)
16394: #endif
16394: 					{
16394: 					if (word0(rv0) == Tiny0
16394: 					 && word1(rv0) == Tiny1)
16394: 						goto undfl;
16394: 					word0(rv) = Tiny0;
16394: 					word1(rv) = Tiny1;
16394: 					goto cont;
16394: 					}
16394: 				else
16394: 					word0(rv) -= P*Exp_msk1;
16394: 				}
16394: 			else {
18414: 				adj = dval(aadj1) * ulp(rv);
16394: 				dval(rv) += adj;
16394: 				}
16394: #else /*Sudden_Underflow*/
16394: 			/* Compute adj so that the IEEE rounding rules will
16394: 			 * correctly round rv + adj in some half-way cases.
16394: 			 * If rv * ulp(rv) is denormalized (i.e.,
16394: 			 * y <= (P-1)*Exp_msk1), we must adjust aadj to avoid
16394: 			 * trouble from bits lost to denormalization;
16394: 			 * example: 1.2e-307 .
16394: 			 */
16394: 			if (y <= (P-1)*Exp_msk1 && aadj > 1.) {
18414: 				dval(aadj1) = (double)(int)(aadj + 0.5);
16394: 				if (!dsign)
18414: 					dval(aadj1) = -dval(aadj1);
16394: 				}
18414: 			adj = dval(aadj1) * ulp(rv);
16394: 			dval(rv) += adj;
16394: #endif /*Sudden_Underflow*/
16394: #endif /*Avoid_Underflow*/
16394: 			}
16394: 		z = word0(rv) & Exp_mask;
16394: #ifndef SET_INEXACT
16394: #ifdef Avoid_Underflow
16394: 		if (!scale)
16394: #endif
16394: 		if (y == z) {
16394: 			/* Can we stop now? */
16394: 			L = (Long)aadj;
16394: 			aadj -= L;
16394: 			/* The tolerances below are conservative. */
16394: 			if (dsign || word1(rv) || word0(rv) & Bndry_mask) {
16394: 				if (aadj < .4999999 || aadj > .5000001)
16394: 					break;
16394: 				}
16394: 			else if (aadj < .4999999/FLT_RADIX)
16394: 				break;
16394: 			}
16394: #endif
16394:  cont:
16394: 		Bfree(bb);
16394: 		Bfree(bd);
16394: 		Bfree(bs);
16394: 		Bfree(delta);
16394: 		}
16394: #ifdef SET_INEXACT
16394: 	if (inexact) {
16394: 		if (!oldinexact) {
16394: 			word0(rv0) = Exp_1 + (70 << Exp_shift);
16394: 			word1(rv0) = 0;
16394: 			dval(rv0) += 1.;
16394: 			}
16394: 		}
16394: 	else if (!oldinexact)
16394: 		clear_inexact();
16394: #endif
16394: #ifdef Avoid_Underflow
16394: 	if (scale) {
16394: 		word0(rv0) = Exp_1 - 2*P*Exp_msk1;
16394: 		word1(rv0) = 0;
16394: 		dval(rv) *= dval(rv0);
16394: #ifndef NO_ERRNO
16394: 		/* try to avoid the bug of testing an 8087 register value */
16394: 		if (word0(rv) == 0 && word1(rv) == 0)
16394: 			errno = ERANGE;
16394: #endif
16394: 		}
16394: #endif /* Avoid_Underflow */
16394: #ifdef SET_INEXACT
16394: 	if (inexact && !(word0(rv) & Exp_mask)) {
16394: 		/* set underflow bit */
16394: 		dval(rv0) = 1e-300;
16394: 		dval(rv0) *= dval(rv0);
16394: 		}
16394: #endif
16394:  retfree:
16394: 	Bfree(bb);
16394: 	Bfree(bd);
16394: 	Bfree(bs);
16394: 	Bfree(bd0);
16394: 	Bfree(delta);
16394:  ret:
16394: 	if (se)
16394: 		*se = (char *)s;
16394: 	return sign ? -dval(rv) : dval(rv);
16394: 	}
16394: 
16394:  static int
16394: quorem
16394: #ifdef KR_headers
16394: 	(b, S) Bigint *b, *S;
16394: #else
16394: 	(Bigint *b, Bigint *S)
16394: #endif
16394: {
16394: 	int n;
16394: 	ULong *bx, *bxe, q, *sx, *sxe;
16394: #ifdef ULLong
16394: 	ULLong borrow, carry, y, ys;
16394: #else
16394: 	ULong borrow, carry, y, ys;
16394: #ifdef Pack_32
16394: 	ULong si, z, zs;
16394: #endif
16394: #endif
16394: 
16394: 	n = S->wds;
16394: #ifdef DEBUG
16394: 	/*debug*/ if (b->wds > n)
16394: 	/*debug*/	Bug("oversize b in quorem");
16394: #endif
16394: 	if (b->wds < n)
16394: 		return 0;
16394: 	sx = S->x;
16394: 	sxe = sx + --n;
16394: 	bx = b->x;
16394: 	bxe = bx + n;
16394: 	q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
16394: #ifdef DEBUG
16394: 	/*debug*/ if (q > 9)
16394: 	/*debug*/	Bug("oversized quotient in quorem");
16394: #endif
16394: 	if (q) {
16394: 		borrow = 0;
16394: 		carry = 0;
16394: 		do {
16394: #ifdef ULLong
16394: 			ys = *sx++ * (ULLong)q + carry;
16394: 			carry = ys >> 32;
16394: 			y = *bx - (ys & FFFFFFFF) - borrow;
16394: 			borrow = y >> 32 & (ULong)1;
16394: 			*bx++ = (ULong) y & FFFFFFFF;
16394: #else
16394: #ifdef Pack_32
16394: 			si = *sx++;
16394: 			ys = (si & 0xffff) * q + carry;
16394: 			zs = (si >> 16) * q + (ys >> 16);
16394: 			carry = zs >> 16;
16394: 			y = (*bx & 0xffff) - (ys & 0xffff) - borrow;
16394: 			borrow = (y & 0x10000) >> 16;
16394: 			z = (*bx >> 16) - (zs & 0xffff) - borrow;
16394: 			borrow = (z & 0x10000) >> 16;
16394: 			Storeinc(bx, z, y);
16394: #else
16394: 			ys = *sx++ * q + carry;
16394: 			carry = ys >> 16;
16394: 			y = *bx - (ys & 0xffff) - borrow;
16394: 			borrow = (y & 0x10000) >> 16;
16394: 			*bx++ = y & 0xffff;
16394: #endif
16394: #endif
16394: 			}
16394: 			while(sx <= sxe);
16394: 		if (!*bxe) {
16394: 			bx = b->x;
16394: 			while(--bxe > bx && !*bxe)
16394: 				--n;
16394: 			b->wds = n;
16394: 			}
16394: 		}
16394: 	if (cmp(b, S) >= 0) {
16394: 		q++;
16394: 		borrow = 0;
16394: 		carry = 0;
16394: 		bx = b->x;
16394: 		sx = S->x;
16394: 		do {
16394: #ifdef ULLong
16394: 			ys = *sx++ + carry;
16394: 			carry = ys >> 32;
16394: 			y = *bx - (ys & FFFFFFFF) - borrow;
16394: 			borrow = y >> 32 & (ULong)1;
16394: 			*bx++ = (ULong) y & FFFFFFFF;
16394: #else
16394: #ifdef Pack_32
16394: 			si = *sx++;
16394: 			ys = (si & 0xffff) + carry;
16394: 			zs = (si >> 16) + (ys >> 16);
16394: 			carry = zs >> 16;
16394: 			y = (*bx & 0xffff) - (ys & 0xffff) - borrow;
16394: 			borrow = (y & 0x10000) >> 16;
16394: 			z = (*bx >> 16) - (zs & 0xffff) - borrow;
16394: 			borrow = (z & 0x10000) >> 16;
16394: 			Storeinc(bx, z, y);
16394: #else
16394: 			ys = *sx++ + carry;
16394: 			carry = ys >> 16;
16394: 			y = *bx - (ys & 0xffff) - borrow;
16394: 			borrow = (y & 0x10000) >> 16;
16394: 			*bx++ = y & 0xffff;
16394: #endif
16394: #endif
16394: 			}
16394: 			while(sx <= sxe);
16394: 		bx = b->x;
16394: 		bxe = bx + n;
16394: 		if (!*bxe) {
16394: 			while(--bxe > bx && !*bxe)
16394: 				--n;
16394: 			b->wds = n;
16394: 			}
16394: 		}
16394: 	return q;
16394: 	}
16394: 
16394: #ifndef MULTIPLE_THREADS
16394:  static char *dtoa_result;
16394: #endif
16394: 
16394:  static char *
16394: #ifdef KR_headers
16394: rv_alloc(i) int i;
16394: #else
16394: rv_alloc(int i)
16394: #endif
16394: {
16394: 	int j, k, *r;
16394: 
16394: 	j = sizeof(ULong);
16394: 	for(k = 0;
18469: 		sizeof(Bigint) - sizeof(ULong) - sizeof(int) + j <= (unsigned) i;
16394: 		j <<= 1)
16394: 			k++;
16394: 	r = (int*)Balloc(k);
16394: 	*r = k;
16394: 	return
16394: #ifndef MULTIPLE_THREADS
16394: 	dtoa_result =
16394: #endif
16394: 		(char *)(r+1);
16394: 	}
16394: 
16394:  static char *
16394: #ifdef KR_headers
16394: nrv_alloc(s, rve, n) char *s, **rve; int n;
16394: #else
16394: nrv_alloc(CONST char *s, char **rve, int n)
16394: #endif
16394: {
16394: 	char *rv, *t;
16394: 
16394: 	t = rv = rv_alloc(n);
16394: 	while((*t = *s++)) t++;
16394: 	if (rve)
16394: 		*rve = t;
16394: 	return rv;
16394: 	}
16394: 
16394: /* freedtoa(s) must be used to free values s returned by dtoa
16394:  * when MULTIPLE_THREADS is #defined.  It should be used in all cases,
16394:  * but for consistency with earlier versions of dtoa, it is optional
16394:  * when MULTIPLE_THREADS is not defined.
16394:  */
16394: 
37156:  static void
16394: #ifdef KR_headers
16394: freedtoa(s) char *s;
16394: #else
16394: freedtoa(char *s)
16394: #endif
16394: {
16394: 	Bigint *b = (Bigint *)((int *)s - 1);
16394: 	b->maxwds = 1 << (b->k = *(int*)b);
16394: 	Bfree(b);
16394: #ifndef MULTIPLE_THREADS
16394: 	if (s == dtoa_result)
16394: 		dtoa_result = 0;
16394: #endif
16394: 	}
16394: 
16394: /* dtoa for IEEE arithmetic (dmg): convert double to ASCII string.
16394:  *
16394:  * Inspired by "How to Print Floating-Point Numbers Accurately" by
16394:  * Guy L. Steele, Jr. and Jon L. White [Proc. ACM SIGPLAN '90, pp. 112-126].
16394:  *
16394:  * Modifications:
16394:  *	1. Rather than iterating, we use a simple numeric overestimate
16394:  *	   to determine k = floor(log10(d)).  We scale relevant
16394:  *	   quantities using O(log2(k)) rather than O(k) multiplications.
16394:  *	2. For some modes > 2 (corresponding to ecvt and fcvt), we don't
16394:  *	   try to generate digits strictly left to right.  Instead, we
16394:  *	   compute with fewer bits and propagate the carry if necessary
16394:  *	   when rounding the final digit up.  This is often faster.
16394:  *	3. Under the assumption that input will be rounded nearest,
16394:  *	   mode 0 renders 1e23 as 1e23 rather than 9.999999999999999e22.
16394:  *	   That is, we allow equality in stopping tests when the
16394:  *	   round-nearest rule will give the same floating-point value
16394:  *	   as would satisfaction of the stopping test with strict
16394:  *	   inequality.
16394:  *	4. We remove common factors of powers of 2 from relevant
16394:  *	   quantities.
16394:  *	5. When converting floating-point integers less than 1e16,
16394:  *	   we use floating-point arithmetic rather than resorting
16394:  *	   to multiple-precision integers.
16394:  *	6. When asked to produce fewer than 15 digits, we first try
16394:  *	   to get by with floating-point arithmetic; we resort to
16394:  *	   multiple-precision integer arithmetic only if we cannot
16394:  *	   guarantee that the floating-point calculation has given
16394:  *	   the correctly rounded result.  For k requested digits and
16394:  *	   "uniformly" distributed input, the probability is
16394:  *	   something like 10^(k-15) that we must resort to the Long
16394:  *	   calculation.
16394:  */
16394: 
16394:  static char *
16394: dtoa
16394: #ifdef KR_headers
16394: 	(d, mode, ndigits, decpt, sign, rve)
18414: 	U d; int mode, ndigits, *decpt, *sign; char **rve;
16394: #else
18414: 	(U d, int mode, int ndigits, int *decpt, int *sign, char **rve)
16394: #endif
16394: {
16394:  /*	Arguments ndigits, decpt, sign are similar to those
16394: 	of ecvt and fcvt; trailing zeros are suppressed from
16394: 	the returned string.  If not null, *rve is set to point
16394: 	to the end of the return value.  If d is +-Infinity or NaN,
16394: 	then *decpt is set to 9999.
16394: 
16394: 	mode:
16394: 		0 ==> shortest string that yields d when read in
16394: 			and rounded to nearest.
16394: 		1 ==> like 0, but with Steele & White stopping rule;
16394: 			e.g. with IEEE P754 arithmetic , mode 0 gives
16394: 			1e23 whereas mode 1 gives 9.999999999999999e22.
16394: 		2 ==> max(1,ndigits) significant digits.  This gives a
16394: 			return value similar to that of ecvt, except
16394: 			that trailing zeros are suppressed.
16394: 		3 ==> through ndigits past the decimal point.  This
16394: 			gives a return value similar to that from fcvt,
16394: 			except that trailing zeros are suppressed, and
16394: 			ndigits can be negative.
16394: 		4,5 ==> similar to 2 and 3, respectively, but (in
16394: 			round-nearest mode) with the tests of mode 0 to
16394: 			possibly return a shorter string that rounds to d.
16394: 			With IEEE arithmetic and compilation with
16394: 			-DHonor_FLT_ROUNDS, modes 4 and 5 behave the same
16394: 			as modes 2 and 3 when FLT_ROUNDS != 1.
16394: 		6-9 ==> Debugging modes similar to mode - 4:  don't try
16394: 			fast floating-point estimate (if applicable).
16394: 
16394: 		Values of mode other than 0-9 are treated as mode 0.
16394: 
16394: 		Sufficient space is allocated to the return value
16394: 		to hold the suppressed trailing zeros.
16394: 	*/
16394: 
16394: 	int bbits, b2, b5, be, dig, i, ieps, ilim, ilim0, ilim1,
16394: 		j, j1, k, k0, k_check, leftright, m2, m5, s2, s5,
16394: 		spec_case, try_quick;
16394: 	Long L;
16394: #ifndef Sudden_Underflow
16394: 	int denorm;
16394: 	ULong x;
16394: #endif
16394: 	Bigint *b, *b1, *delta, *mlo, *mhi, *S;
18414: 	U d2, eps;
18414: 	double ds;
16394: 	char *s, *s0;
16394: #ifdef Honor_FLT_ROUNDS
16394: 	int rounding;
16394: #endif
16394: #ifdef SET_INEXACT
16394: 	int inexact, oldinexact;
16394: #endif
16394: 
16394: #ifdef __GNUC__
16394: 	ilim = ilim1 = 0;
16394: 	mlo = NULL;
16394: #endif
16394: 
16394: #ifndef MULTIPLE_THREADS
16394: 	if (dtoa_result) {
16394: 		freedtoa(dtoa_result);
16394: 		dtoa_result = 0;
16394: 		}
16394: #endif
16394: 
16394: 	if (word0(d) & Sign_bit) {
16394: 		/* set sign for everything, including 0's and NaNs */
16394: 		*sign = 1;
16394: 		word0(d) &= ~Sign_bit;	/* clear sign bit */
16394: 		}
16394: 	else
16394: 		*sign = 0;
16394: 
16394: #if defined(IEEE_Arith) + defined(VAX)
16394: #ifdef IEEE_Arith
16394: 	if ((word0(d) & Exp_mask) == Exp_mask)
16394: #else
16394: 	if (word0(d)  == 0x8000)
16394: #endif
16394: 		{
16394: 		/* Infinity or NaN */
16394: 		*decpt = 9999;
16394: #ifdef IEEE_Arith
16394: 		if (!word1(d) && !(word0(d) & 0xfffff))
16394: 			return nrv_alloc("Infinity", rve, 8);
16394: #endif
16394: 		return nrv_alloc("NaN", rve, 3);
16394: 		}
16394: #endif
16394: #ifdef IBM
16394: 	dval(d) += 0; /* normalize */
16394: #endif
16394: 	if (!dval(d)) {
16394: 		*decpt = 1;
16394: 		return nrv_alloc("0", rve, 1);
16394: 		}
16394: 
16394: #ifdef SET_INEXACT
16394: 	try_quick = oldinexact = get_inexact();
16394: 	inexact = 1;
16394: #endif
16394: #ifdef Honor_FLT_ROUNDS
16394: 	if ((rounding = Flt_Rounds) >= 2) {
16394: 		if (*sign)
16394: 			rounding = rounding == 2 ? 0 : 2;
16394: 		else
16394: 			if (rounding != 2)
16394: 				rounding = 0;
16394: 		}
16394: #endif
16394: 
18414: 	b = d2b(d, &be, &bbits);
16394: #ifdef Sudden_Underflow
16394: 	i = (int)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1));
16394: #else
16394: 	if ((i = (int)(word0(d) >> Exp_shift1 & (Exp_mask>>Exp_shift1)))) {
16394: #endif
16394: 		dval(d2) = dval(d);
16394: 		word0(d2) &= Frac_mask1;
16394: 		word0(d2) |= Exp_11;
16394: #ifdef IBM
16394: 		if (j = 11 - hi0bits(word0(d2) & Frac_mask))
16394: 			dval(d2) /= 1 << j;
16394: #endif
16394: 
16394: 		/* log(x)	~=~ log(1.5) + (x-1.5)/1.5
16394: 		 * log10(x)	 =  log(x) / log(10)
16394: 		 *		~=~ log(1.5)/log(10) + (x-1.5)/(1.5*log(10))
16394: 		 * log10(d) = (i-Bias)*log(2)/log(10) + log10(d2)
16394: 		 *
16394: 		 * This suggests computing an approximation k to log10(d) by
16394: 		 *
16394: 		 * k = (i - Bias)*0.301029995663981
16394: 		 *	+ ( (d2-1.5)*0.289529654602168 + 0.176091259055681 );
16394: 		 *
16394: 		 * We want k to be too large rather than too small.
16394: 		 * The error in the first-order Taylor series approximation
16394: 		 * is in our favor, so we just round up the constant enough
16394: 		 * to compensate for any error in the multiplication of
16394: 		 * (i - Bias) by 0.301029995663981; since |i - Bias| <= 1077,
16394: 		 * and 1077 * 0.30103 * 2^-52 ~=~ 7.2e-14,
16394: 		 * adding 1e-13 to the constant term more than suffices.
16394: 		 * Hence we adjust the constant term to 0.1760912590558.
16394: 		 * (We could get a more accurate k by invoking log10,
16394: 		 *  but this is probably not worthwhile.)
16394: 		 */
16394: 
16394: 		i -= Bias;
16394: #ifdef IBM
16394: 		i <<= 2;
16394: 		i += j;
16394: #endif
16394: #ifndef Sudden_Underflow
16394: 		denorm = 0;
16394: 		}
16394: 	else {
16394: 		/* d is denormalized */
16394: 
16394: 		i = bbits + be + (Bias + (P-1) - 1);
16394: 		x = i > 32  ? word0(d) << (64 - i) | word1(d) >> (i - 32)
16394: 			    : word1(d) << (32 - i);
16394: 		dval(d2) = x;
16394: 		word0(d2) -= 31*Exp_msk1; /* adjust exponent */
16394: 		i -= (Bias + (P-1) - 1) + 1;
16394: 		denorm = 1;
16394: 		}
16394: #endif
16394: 	ds = (dval(d2)-1.5)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
16394: 	k = (int)ds;
16394: 	if (ds < 0. && ds != k)
16394: 		k--;	/* want k = floor(ds) */
16394: 	k_check = 1;
16394: 	if (k >= 0 && k <= Ten_pmax) {
16394: 		if (dval(d) < tens[k])
16394: 			k--;
16394: 		k_check = 0;
16394: 		}
16394: 	j = bbits - i - 1;
16394: 	if (j >= 0) {
16394: 		b2 = 0;
16394: 		s2 = j;
16394: 		}
16394: 	else {
16394: 		b2 = -j;
16394: 		s2 = 0;
16394: 		}
16394: 	if (k >= 0) {
16394: 		b5 = 0;
16394: 		s5 = k;
16394: 		s2 += k;
16394: 		}
16394: 	else {
16394: 		b2 -= k;
16394: 		b5 = -k;
16394: 		s5 = 0;
16394: 		}
16394: 	if (mode < 0 || mode > 9)
16394: 		mode = 0;
16394: 
16394: #ifndef SET_INEXACT
16394: #ifdef Check_FLT_ROUNDS
16394: 	try_quick = Rounding == 1;
16394: #else
16394: 	try_quick = 1;
16394: #endif
16394: #endif /*SET_INEXACT*/
16394: 
16394: 	if (mode > 5) {
16394: 		mode -= 4;
16394: 		try_quick = 0;
16394: 		}
16394: 	leftright = 1;
16394: 	switch(mode) {
16394: 		case 0:
16394: 		case 1:
16394: 			ilim = ilim1 = -1;
16394: 			i = 18;
16394: 			ndigits = 0;
16394: 			break;
16394: 		case 2:
16394: 			leftright = 0;
16394: 			/* no break */
16394: 		case 4:
16394: 			if (ndigits <= 0)
16394: 				ndigits = 1;
16394: 			ilim = ilim1 = i = ndigits;
16394: 			break;
16394: 		case 3:
16394: 			leftright = 0;
16394: 			/* no break */
16394: 		case 5:
16394: 			i = ndigits + k + 1;
16394: 			ilim = i;
16394: 			ilim1 = i - 1;
16394: 			if (i <= 0)
16394: 				i = 1;
16394: 		}
16394: 	s = s0 = rv_alloc(i);
16394: 
16394: #ifdef Honor_FLT_ROUNDS
16394: 	if (mode > 1 && rounding != 1)
16394: 		leftright = 0;
16394: #endif
16394: 
16394: 	if (ilim >= 0 && ilim <= Quick_max && try_quick) {
16394: 
16394: 		/* Try to get by with floating-point arithmetic. */
16394: 
16394: 		i = 0;
16394: 		dval(d2) = dval(d);
16394: 		k0 = k;
16394: 		ilim0 = ilim;
16394: 		ieps = 2; /* conservative */
16394: 		if (k > 0) {
16394: 			ds = tens[k&0xf];
16394: 			j = k >> 4;
16394: 			if (j & Bletch) {
16394: 				/* prevent overflows */
16394: 				j &= Bletch - 1;
16394: 				dval(d) /= bigtens[n_bigtens-1];
16394: 				ieps++;
16394: 				}
16394: 			for(; j; j >>= 1, i++)
16394: 				if (j & 1) {
16394: 					ieps++;
16394: 					ds *= bigtens[i];
16394: 					}
16394: 			dval(d) /= ds;
16394: 			}
16394: 		else if ((j1 = -k)) {
16394: 			dval(d) *= tens[j1 & 0xf];
16394: 			for(j = j1 >> 4; j; j >>= 1, i++)
16394: 				if (j & 1) {
16394: 					ieps++;
16394: 					dval(d) *= bigtens[i];
16394: 					}
16394: 			}
16394: 		if (k_check && dval(d) < 1. && ilim > 0) {
16394: 			if (ilim1 <= 0)
16394: 				goto fast_failed;
16394: 			ilim = ilim1;
16394: 			k--;
16394: 			dval(d) *= 10.;
16394: 			ieps++;
16394: 			}
16394: 		dval(eps) = ieps*dval(d) + 7.;
16394: 		word0(eps) -= (P-1)*Exp_msk1;
16394: 		if (ilim == 0) {
16394: 			S = mhi = 0;
16394: 			dval(d) -= 5.;
16394: 			if (dval(d) > dval(eps))
16394: 				goto one_digit;
16394: 			if (dval(d) < -dval(eps))
16394: 				goto no_digits;
16394: 			goto fast_failed;
16394: 			}
16394: #ifndef No_leftright
16394: 		if (leftright) {
16394: 			/* Use Steele & White method of only
16394: 			 * generating digits needed.
16394: 			 */
16394: 			dval(eps) = 0.5/tens[ilim-1] - dval(eps);
16394: 			for(i = 0;;) {
16394: 				L = (ULong) dval(d);
16394: 				dval(d) -= L;
16394: 				*s++ = '0' + (int)L;
16394: 				if (dval(d) < dval(eps))
16394: 					goto ret1;
16394: 				if (1. - dval(d) < dval(eps))
16394: 					goto bump_up;
16394: 				if (++i >= ilim)
16394: 					break;
16394: 				dval(eps) *= 10.;
16394: 				dval(d) *= 10.;
16394: 				}
16394: 			}
16394: 		else {
16394: #endif
16394: 			/* Generate ilim digits, then fix them up. */
16394: 			dval(eps) *= tens[ilim-1];
16394: 			for(i = 1;; i++, dval(d) *= 10.) {
16394: 				L = (Long)(dval(d));
16394: 				if (!(dval(d) -= L))
16394: 					ilim = i;
16394: 				*s++ = '0' + (int)L;
16394: 				if (i == ilim) {
16394: 					if (dval(d) > 0.5 + dval(eps))
16394: 						goto bump_up;
16394: 					else if (dval(d) < 0.5 - dval(eps)) {
16394: 						while(*--s == '0');
16394: 						s++;
16394: 						goto ret1;
16394: 						}
16394: 					break;
16394: 					}
16394: 				}
16394: #ifndef No_leftright
16394: 			}
16394: #endif
16394:  fast_failed:
16394: 		s = s0;
16394: 		dval(d) = dval(d2);
16394: 		k = k0;
16394: 		ilim = ilim0;
16394: 		}
16394: 
16394: 	/* Do we have a "small" integer? */
16394: 
16394: 	if (be >= 0 && k <= Int_max) {
16394: 		/* Yes. */
16394: 		ds = tens[k];
16394: 		if (ndigits < 0 && ilim <= 0) {
16394: 			S = mhi = 0;
24730: 			if (ilim < 0 || dval(d) < 5*ds)
16394: 				goto no_digits;
16394: 			goto one_digit;
16394: 			}
16394: 		for(i = 1;; i++, dval(d) *= 10.) {
16394: 			L = (Long)(dval(d) / ds);
16394: 			dval(d) -= L*ds;
16394: #ifdef Check_FLT_ROUNDS
16394: 			/* If FLT_ROUNDS == 2, L will usually be high by 1 */
16394: 			if (dval(d) < 0) {
16394: 				L--;
16394: 				dval(d) += ds;
16394: 				}
16394: #endif
16394: 			*s++ = '0' + (int)L;
16394: 			if (!dval(d)) {
16394: #ifdef SET_INEXACT
16394: 				inexact = 0;
16394: #endif
16394: 				break;
16394: 				}
16394: 			if (i == ilim) {
16394: #ifdef Honor_FLT_ROUNDS
16394: 				if (mode > 1)
16394: 				switch(rounding) {
16394: 				  case 0: goto ret1;
16394: 				  case 2: goto bump_up;
16394: 				  }
16394: #endif
16394: 				dval(d) += dval(d);
16394: 				if (dval(d) > ds || (dval(d) == ds && L & 1)) {
16394:  bump_up:
16394: 					while(*--s == '9')
16394: 						if (s == s0) {
16394: 							k++;
16394: 							*s = '0';
16394: 							break;
16394: 							}
16394: 					++*s++;
16394: 					}
16394: 				break;
16394: 				}
16394: 			}
16394: 		goto ret1;
16394: 		}
16394: 
16394: 	m2 = b2;
16394: 	m5 = b5;
16394: 	mhi = mlo = 0;
16394: 	if (leftright) {
16394: 		i =
16394: #ifndef Sudden_Underflow
16394: 			denorm ? be + (Bias + (P-1) - 1 + 1) :
16394: #endif
16394: #ifdef IBM
16394: 			1 + 4*P - 3 - bbits + ((bbits + be - 1) & 3);
16394: #else
16394: 			1 + P - bbits;
16394: #endif
16394: 		b2 += i;
16394: 		s2 += i;
16394: 		mhi = i2b(1);
16394: 		}
16394: 	if (m2 > 0 && s2 > 0) {
16394: 		i = m2 < s2 ? m2 : s2;
16394: 		b2 -= i;
16394: 		m2 -= i;
16394: 		s2 -= i;
16394: 		}
16394: 	if (b5 > 0) {
16394: 		if (leftright) {
16394: 			if (m5 > 0) {
16394: 				mhi = pow5mult(mhi, m5);
16394: 				b1 = mult(mhi, b);
16394: 				Bfree(b);
16394: 				b = b1;
16394: 				}
16394: 			if ((j = b5 - m5))
16394: 				b = pow5mult(b, j);
16394: 			}
16394: 		else
16394: 			b = pow5mult(b, b5);
16394: 		}
16394: 	S = i2b(1);
16394: 	if (s5 > 0)
16394: 		S = pow5mult(S, s5);
16394: 
16394: 	/* Check for special case that d is a normalized power of 2. */
16394: 
16394: 	spec_case = 0;
16394: 	if ((mode < 2 || leftright)
16394: #ifdef Honor_FLT_ROUNDS
16394: 			&& rounding == 1
16394: #endif
16394: 				) {
16394: 		if (!word1(d) && !(word0(d) & Bndry_mask)
16394: #ifndef Sudden_Underflow
16394: 		 && word0(d) & (Exp_mask & ~Exp_msk1)
16394: #endif
16394: 				) {
16394: 			/* The special case */
16394: 			b2 += Log2P;
16394: 			s2 += Log2P;
16394: 			spec_case = 1;
16394: 			}
16394: 		}
16394: 
16394: 	/* Arrange for convenient computation of quotients:
16394: 	 * shift left if necessary so divisor has 4 leading 0 bits.
16394: 	 *
16394: 	 * Perhaps we should just compute leading 28 bits of S once
16394: 	 * and for all and pass them and a shift to quorem, so it
16394: 	 * can do shifts and ors to compute the numerator for q.
16394: 	 */
16394: #ifdef Pack_32
16394: 	if ((i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0x1f))
16394: 		i = 32 - i;
16394: #else
16394: 	if (i = ((s5 ? 32 - hi0bits(S->x[S->wds-1]) : 1) + s2) & 0xf)
16394: 		i = 16 - i;
16394: #endif
16394: 	if (i > 4) {
16394: 		i -= 4;
16394: 		b2 += i;
16394: 		m2 += i;
16394: 		s2 += i;
16394: 		}
16394: 	else if (i < 4) {
16394: 		i += 28;
16394: 		b2 += i;
16394: 		m2 += i;
16394: 		s2 += i;
16394: 		}
16394: 	if (b2 > 0)
16394: 		b = lshift(b, b2);
16394: 	if (s2 > 0)
16394: 		S = lshift(S, s2);
16394: 	if (k_check) {
16394: 		if (cmp(b,S) < 0) {
16394: 			k--;
16394: 			b = multadd(b, 10, 0);	/* we botched the k estimate */
16394: 			if (leftright)
16394: 				mhi = multadd(mhi, 10, 0);
16394: 			ilim = ilim1;
16394: 			}
16394: 		}
16394: 	if (ilim <= 0 && (mode == 3 || mode == 5)) {
24730: 		if (ilim < 0 || cmp(b,S = multadd(S,5,0)) < 0) {
16394: 			/* no digits, fcvt style */
16394:  no_digits:
20443: 			/* MOZILLA CHANGE: Always return a non-empty string. */
20443: 			*s++ = '0';
20443: 			k = 0;
16394: 			goto ret;
16394: 			}
16394:  one_digit:
16394: 		*s++ = '1';
16394: 		k++;
16394: 		goto ret;
16394: 		}
16394: 	if (leftright) {
16394: 		if (m2 > 0)
16394: 			mhi = lshift(mhi, m2);
16394: 
16394: 		/* Compute mlo -- check for special case
16394: 		 * that d is a normalized power of 2.
16394: 		 */
16394: 
16394: 		mlo = mhi;
16394: 		if (spec_case) {
16394: 			mhi = Balloc(mhi->k);
16394: 			Bcopy(mhi, mlo);
16394: 			mhi = lshift(mhi, Log2P);
16394: 			}
16394: 
16394: 		for(i = 1;;i++) {
16394: 			dig = quorem(b,S) + '0';
16394: 			/* Do we yet have the shortest decimal string
16394: 			 * that will round to d?
16394: 			 */
16394: 			j = cmp(b, mlo);
16394: 			delta = diff(S, mhi);
16394: 			j1 = delta->sign ? 1 : cmp(b, delta);
16394: 			Bfree(delta);
16394: #ifndef ROUND_BIASED
16394: 			if (j1 == 0 && mode != 1 && !(word1(d) & 1)
16394: #ifdef Honor_FLT_ROUNDS
16394: 				&& rounding >= 1
16394: #endif
16394: 								   ) {
16394: 				if (dig == '9')
16394: 					goto round_9_up;
16394: 				if (j > 0)
16394: 					dig++;
16394: #ifdef SET_INEXACT
16394: 				else if (!b->x[0] && b->wds <= 1)
16394: 					inexact = 0;
16394: #endif
16394: 				*s++ = dig;
16394: 				goto ret;
16394: 				}
16394: #endif
16394: 			if (j < 0 || (j == 0 && mode != 1
16394: #ifndef ROUND_BIASED
16394: 							&& !(word1(d) & 1)
16394: #endif
16394: 					)) {
16394: 				if (!b->x[0] && b->wds <= 1) {
16394: #ifdef SET_INEXACT
16394: 					inexact = 0;
16394: #endif
16394: 					goto accept_dig;
16394: 					}
16394: #ifdef Honor_FLT_ROUNDS
16394: 				if (mode > 1)
16394: 				 switch(rounding) {
16394: 				  case 0: goto accept_dig;
16394: 				  case 2: goto keep_dig;
16394: 				  }
16394: #endif /*Honor_FLT_ROUNDS*/
16394: 				if (j1 > 0) {
16394: 					b = lshift(b, 1);
16394: 					j1 = cmp(b, S);
16394: 					if ((j1 > 0 || (j1 == 0 && dig & 1))
16394: 					&& dig++ == '9')
16394: 						goto round_9_up;
16394: 					}
16394:  accept_dig:
16394: 				*s++ = dig;
16394: 				goto ret;
16394: 				}
16394: 			if (j1 > 0) {
16394: #ifdef Honor_FLT_ROUNDS
16394: 				if (!rounding)
16394: 					goto accept_dig;
16394: #endif
16394: 				if (dig == '9') { /* possible if i == 1 */
16394:  round_9_up:
16394: 					*s++ = '9';
16394: 					goto roundoff;
16394: 					}
16394: 				*s++ = dig + 1;
16394: 				goto ret;
16394: 				}
16394: #ifdef Honor_FLT_ROUNDS
16394:  keep_dig:
16394: #endif
16394: 			*s++ = dig;
16394: 			if (i == ilim)
16394: 				break;
16394: 			b = multadd(b, 10, 0);
16394: 			if (mlo == mhi)
16394: 				mlo = mhi = multadd(mhi, 10, 0);
16394: 			else {
16394: 				mlo = multadd(mlo, 10, 0);
16394: 				mhi = multadd(mhi, 10, 0);
16394: 				}
16394: 			}
16394: 		}
16394: 	else
16394: 		for(i = 1;; i++) {
16394: 			*s++ = dig = quorem(b,S) + '0';
16394: 			if (!b->x[0] && b->wds <= 1) {
16394: #ifdef SET_INEXACT
16394: 				inexact = 0;
16394: #endif
16394: 				goto ret;
16394: 				}
16394: 			if (i >= ilim)
16394: 				break;
16394: 			b = multadd(b, 10, 0);
16394: 			}
16394: 
16394: 	/* Round off last digit */
16394: 
16394: #ifdef Honor_FLT_ROUNDS
16394: 	switch(rounding) {
16394: 	  case 0: goto trimzeros;
16394: 	  case 2: goto roundoff;
16394: 	  }
16394: #endif
16394: 	b = lshift(b, 1);
16394: 	j = cmp(b, S);
24730: 	if (j >= 0) {  /* ECMA compatible rounding needed by Spidermonkey */
16394:  roundoff:
16394: 		while(*--s == '9')
16394: 			if (s == s0) {
16394: 				k++;
16394: 				*s++ = '1';
16394: 				goto ret;
16394: 				}
16394: 		++*s++;
16394: 		}
16394: 	else {
16394: #ifdef Honor_FLT_ROUNDS
16394:  trimzeros:
16394: #endif
16394: 		while(*--s == '0');
16394: 		s++;
16394: 		}
16394:  ret:
16394: 	Bfree(S);
16394: 	if (mhi) {
16394: 		if (mlo && mlo != mhi)
16394: 			Bfree(mlo);
16394: 		Bfree(mhi);
16394: 		}
16394:  ret1:
16394: #ifdef SET_INEXACT
16394: 	if (inexact) {
16394: 		if (!oldinexact) {
16394: 			word0(d) = Exp_1 + (70 << Exp_shift);
16394: 			word1(d) = 0;
16394: 			dval(d) += 1.;
16394: 			}
16394: 		}
16394: 	else if (!oldinexact)
16394: 		clear_inexact();
16394: #endif
16394: 	Bfree(b);
16394: 	*s = 0;
16394: 	*decpt = k + 1;
16394: 	if (rve)
16394: 		*rve = s;
16394: 	return s0;
16394: 	}
16394: #ifdef __cplusplus
16394: }
16394: #endif
