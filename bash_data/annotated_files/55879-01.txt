    1: /* -*- Mode: c++; tab-width: 2; indent-tabs-mode: nil; -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is a Cocoa widget run loop and event implementation.
    1:  *
    1:  * The Initial Developer of the Original Code is Google Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *  Mark Mentovai <mark@moxienet.com> (Original Author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Runs the main native Cocoa run loop, interrupting it as needed to process
    1:  * Gecko events.  
    1:  */
    1: 
    1: #ifndef nsAppShell_h_
    1: #define nsAppShell_h_
    1: 
26321: class nsCocoaWindow;
26321: 
    1: #include "nsBaseAppShell.h"
26321: #include "nsTArray.h"
    1: 
20595: typedef struct _nsCocoaAppModalWindowListItem {
26321:   _nsCocoaAppModalWindowListItem(NSWindow *aWindow, NSModalSession aSession) :
26321:     mWindow(aWindow), mSession(aSession), mWidget(nsnull) {}
26321:   _nsCocoaAppModalWindowListItem(NSWindow *aWindow, nsCocoaWindow *aWidget) :
26321:     mWindow(aWindow), mSession(nil), mWidget(aWidget) {}
20595:   NSWindow *mWindow;       // Weak
20595:   NSModalSession mSession; // Weak (not retainable)
26321:   nsCocoaWindow *mWidget;  // Weak
20595: } nsCocoaAppModalWindowListItem;
20595: 
20595: class nsCocoaAppModalWindowList {
20595: public:
26321:   nsCocoaAppModalWindowList() {}
26321:   ~nsCocoaAppModalWindowList() {}
26321:   // Push a Cocoa app-modal window onto the top of our list.
26321:   nsresult PushCocoa(NSWindow *aWindow, NSModalSession aSession);
26321:   // Pop the topmost Cocoa app-modal window off our list.
26321:   nsresult PopCocoa(NSWindow *aWindow, NSModalSession aSession);
26321:   // Push a Gecko-modal window onto the top of our list.
26321:   nsresult PushGecko(NSWindow *aWindow, nsCocoaWindow *aWidget);
26321:   // Pop the topmost Gecko-modal window off our list.
26321:   nsresult PopGecko(NSWindow *aWindow, nsCocoaWindow *aWidget);
26321:   // Return the "session" of the top-most visible Cocoa app-modal window.
20595:   NSModalSession CurrentSession();
26321:   // Has a Gecko modal dialog popped up over a Cocoa app-modal dialog?
26321:   PRBool GeckoModalAboveCocoaModal();
20595: private:
26321:   nsTArray<nsCocoaAppModalWindowListItem> mList;
20595: };
20595: 
    1: @class AppShellDelegate;
    1: 
    1: class nsAppShell : public nsBaseAppShell
    1: {
    1: public:
 6111:   NS_IMETHOD ResumeNative(void);
    4: 	
    1:   nsAppShell();
    1: 
    1:   nsresult Init();
    1: 
    1:   NS_IMETHOD Run(void);
 6111:   NS_IMETHOD Exit(void);
    1:   NS_IMETHOD OnProcessNextEvent(nsIThreadInternal *aThread, PRBool aMayWait,
    1:                                 PRUint32 aRecursionDepth);
    1:   NS_IMETHOD AfterProcessNextEvent(nsIThreadInternal *aThread,
    1:                                    PRUint32 aRecursionDepth);
    1: 
    1:   // public only to be visible to Objective-C code that must call it
    1:   void WillTerminate();
    1: 
    1: protected:
    1:   virtual ~nsAppShell();
    1: 
    1:   virtual void ScheduleNativeEventCallback();
    1:   virtual PRBool ProcessNextNativeEvent(PRBool aMayWait);
    1: 
 6349:   PRBool InGeckoMainEventLoop();
 6349: 
 6111:   static void ProcessGeckoEvents(void* aInfo);
 6111: 
    1: protected:
    1:   CFMutableArrayRef  mAutoreleasePools;
    1: 
    1:   AppShellDelegate*  mDelegate;
 6111:   CFRunLoopRef       mCFRunLoop;
 6111:   CFRunLoopSourceRef mCFRunLoopSource;
    1: 
    1:   PRPackedBool       mRunningEventLoop;
 6111:   PRPackedBool       mStarted;
    1:   PRPackedBool       mTerminated;
  383:   PRPackedBool       mSkippedNativeCallback;
24533:   PRPackedBool       mRunningCocoaEmbedded;
 6111: 
 6111:   // mHadMoreEventsCount and kHadMoreEventsCountMax are used in
 6111:   // ProcessNextNativeEvent().
 6111:   PRUint32               mHadMoreEventsCount;
 6340:   // Setting kHadMoreEventsCountMax to '10' contributed to a fairly large
 6340:   // (about 10%) increase in the number of calls to malloc (though without
 6340:   // effecting the total amount of memory used).  Cutting it to '3'
 6340:   // reduced the number of calls by 6%-7% (reducing the original regression
 6340:   // to 3%-4%).  See bmo bug 395397.
 6275:   static const PRUint32  kHadMoreEventsCountMax = 3;
 6349: 
 6349:   PRInt32            mRecursionDepth;
 6349:   PRInt32            mNativeEventCallbackDepth;
29293:   // Can be set from different threads, so must be modified atomically
29293:   PRInt32            mNativeEventScheduledDepth;
    1: };
    1: 
    1: #endif // nsAppShell_h_
