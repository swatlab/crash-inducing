90378: <html>
90378: 
90378: <head>
90378:   <link rel="stylesheet" type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css">
90378: 
90378:   <script type="application/javascript"
90378:           src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
90378:   <script type="application/javascript"
90378:           src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>
90378:   <script type="application/javascript"
90378:           src="chrome://mochikit/content/tests/SimpleTest/ChromeUtils.js"></script>
90378: </head>
90378: 
90378: <body>
90378:   <span id="text" style="font-size: 40px;">Some Text</span>
90378: 
90378:   <input id="input" value="Drag Me">
90378:   <textarea id="textarea">Some Text To Drag</textarea>
90378:   <p id="contenteditable" contenteditable="true">This is some <b id="bold">editable</b> text.</p>
90378: 
90378: <script type="application/javascript">
90378: 
90378: SimpleTest.waitForExplicitFinish();
90378: 
90378: // This listener allows us to clear the default data for the selection added for the drag.
90378: var shouldClear = false;
90378: window.addEventListener("dragstart", function (event) { if (shouldClear) event.dataTransfer.clearData() }, true);
90378: 
90378: function doTest()
90378: {
90378:   const htmlContextData = { type: 'text/_moz_htmlcontext',
90378:                             data: '<html><body></body></html>' };
90378:   const htmlInfoData = { type: 'text/_moz_htmlinfo', data: '0,0' };
90378:   const htmlData = { type: 'text/html', data: '<span id="text" style="font-size: 40px;">Some Text</span>' };
90378: 
90378:   const htmlContextDataEditable = { type: 'text/_moz_htmlcontext',
90378:                                     data: '<html><body><p id="contenteditable" contenteditable="true"></p></body></html>' };
90378: 
90378:   var text = document.getElementById("text");
90378:   var input = document.getElementById("input");
90378:   var contenteditable = document.getElementById("contenteditable");
90378: 
90378:   var selection = window.getSelection();
90378: 
90378:   // -------- Test dragging regular text
90378:   selection.selectAllChildren(text);
90378:   var result = synthesizeDragStart(text, [[htmlContextData, htmlInfoData, htmlData,
90378:                                            {type: "text/plain", data: "Some Text"}]], window, 40, 10);
90378:   ok(!result, "Test dragging regular text");
90378: 
90378:   // -------- Test dragging text from an <input>
90378:   input.setSelectionRange(1, 4);
90378:   result = synthesizeDragStart(input, [[{type: "text/plain", data: "rag"}]], window, 25, 6);
90378:   ok(!result, "Test dragging input");
90378: 
90378:   // -------- Test dragging text from a <textarea>
90378:   textarea.setSelectionRange(1, 7);
90378:   result = synthesizeDragStart(textarea, [[{type: "text/plain", data: "ome Te"}]], window, 25, 6);
90378:   ok(!result, "Test dragging textarea");
90378:   textarea.blur();
90378: 
90378:   // -------- Test dragging text from a contenteditable
90378:   selection.selectAllChildren(contenteditable.childNodes[1]);
90378:   result = synthesizeDragStart(contenteditable.childNodes[1],
90378:                                [[htmlContextDataEditable, htmlInfoData,
90378:                                 {type: 'text/html', data: '<b id="bold">editable</b>' },
90378:                                 {type: "text/plain", data: "editable"}]], window, 5, 6);
90378:   ok(!result, "Test dragging contenteditable");
90378:   contenteditable.blur();
90378: 
90378:   // -------- Test dragging regular text of text/html to <input>
90378: 
90378:   selection.selectAllChildren(text);
90378:   input.value = "";
90378:   synthesizeDrop(text, input, [], "copy");
90378:   is(input.value, "Some Text", "Drag text/html onto input");
90378: 
90378:   // -------- Test dragging regular text of text/html to disabled <input>
90378: 
90378:   selection.selectAllChildren(text);
90378:   input.value = "";
90378:   input.disabled = true;
90378:   synthesizeDrop(text, input, [], "copy");
90378:   is(input.value, "", "Drag text/html onto disabled input");
90378:   input.disabled = false;
90378: 
90378:   // -------- Test dragging regular text of text/html to readonly <input>
90378: 
90378:   selection.selectAllChildren(text);
90378:   input.readOnly = true;
90378:   synthesizeDrop(text, input, [], "copy");
90378:   is(input.value, "", "Drag text/html onto readonly input");
90378:   input.readOnly = false;
90378: 
90378:   // -------- Test dragging regular text of text/html to <input>. This sets
90378:   //          shouldClear to true so that the default drag data is not present
90378:   //          and we can use the data passed to synthesizeDrop. This allows
90378:   //          testing of a drop with just text/html.
90378:   shouldClear = true;
90378:   selection.selectAllChildren(text);
90378:   input.value = "";
90378:   synthesizeDrop(text, input, [[{type: "text/html", data: "Some <b>Bold<b> Text"}]], "copy");
90378:   is(input.value, "", "Drag text/html onto input");
90378: 
90378:   // -------- Test dragging regular text of text/plain and text/html to <input>
90378: 
90378:   selection.selectAllChildren(text);
90378:   input.value = "";
90378:   synthesizeDrop(text, input, [[{type: "text/html", data: "Some <b>Bold<b> Text"},
90378:                                 {type: "text/plain", data: "Some Plain Text"}]], "copy");
90378:   is(input.value, "Some Plain Text", "Drag text/html and text/plain onto input");
90378: 
90378:   // -------- Test dragging regular text of text/plain to <textarea>
90378: 
90378: // XXXndeakin Can't test textareas due to some event handling issue
90378: //  selection.selectAllChildren(text);
90378: //  synthesizeDrop(text, textarea, [[{type: "text/plain", data: "Somewhat Longer Text"}]], "copy");
90378: //  is(textarea.value, "Somewhat Longer Text", "Drag text/plain onto textarea");
90378: 
90840:   // -------- Test dragging special text type of text/plain to contenteditable
90840: 
90840:   selection.selectAllChildren(text);
90840:   synthesizeDrop(text, input, [[{type: "text/x-moz-text-internal", data: "Some Special Text"}]], "copy");
90840:   is(input.value, "Some Plain Text", "Drag text/x-moz-text-internal onto input");
90840: 
90378:   // -------- Test dragging regular text of text/plain to contenteditable
90378: 
90378:   selection.selectAllChildren(text);
90378:   synthesizeDrop(text, contenteditable, [[{type: "text/plain", data: "Sample Text"}]], "copy");
90378:   is(contenteditable.childNodes.length, 3, "Drag text/plain onto contenteditable child nodes");
90378:   is(contenteditable.textContent, "This is some editable text.Sample Text",
90378:                                   "Drag text/plain onto contenteditable text");
90378: 
90378:   // -------- Test dragging regular text of text/html to contenteditable
90378: 
90378:   selection.selectAllChildren(text);
90378:   synthesizeDrop(text, contenteditable, [[{type: "text/html", data: "Sample <i>Italic</i> Text"}]], "copy");
90378:   is(contenteditable.childNodes.length, 6, "Drag text/html onto contenteditable child nodes");
90378:   is(contenteditable.childNodes[4].tagName, "I", "Drag text/html onto contenteditable italic");
90378:   is(contenteditable.childNodes[4].textContent, "Italic", "Drag text/html onto contenteditable italic text");
90378: 
90378:   // -------- Test dragging contenteditable to <input>
90378: 
90378:   selection.selectAllChildren(document.getElementById("bold"));
90378:   synthesizeDrop(bold, input, [[{type: "text/html", data: "<b>editable</b>"},
90378:                                 {type: "text/plain", data: "editable"}]], "copy");
90378:   is(input.value, "Some Plain Texteditable", "Move text/html and text/plain from contenteditable onto input");
90378: 
90378:   // -------- Test dragging contenteditable to contenteditable
90378: 
90378:   shouldClear = false;
90378: 
90378:   selection.selectAllChildren(contenteditable.childNodes[4]);
90378:   synthesizeDrop(contenteditable.childNodes[4], contenteditable, [], "copy");
90378:   is(contenteditable.childNodes.length, 7, "Move text/html and text/plain from contenteditable onto itself child nodes");
90378:   is(contenteditable.childNodes[6].tagName, "I", "Move text/html and text/plain from contenteditable onto itself italic");
90378:   is(contenteditable.childNodes[6].textContent, "Italic", "Move text/html and text/plain from contenteditable onto itself text");
90378: 
90378:   // We'd test 'move' here as well as 'copy', but that requires knowledge of
90378:   // the source of the drag which drag simulation doesn't provide.
90378: 
90378:   SimpleTest.finish();
90378: }
90378: 
90378: SimpleTest.waitForFocus(doTest);
90378: 
90378: </script>
90378: </body>
90378: </html>
