29366: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef jsregexp_h___
    1: #define jsregexp_h___
    1: /*
    1:  * JS regular expression interface.
    1:  */
    1: #include <stddef.h>
50491: #include "jsprvtd.h"
    1: #include "jsstr.h"
53858: #include "jscntxt.h"
53858: #include "jsvector.h"
    1: 
    1: #ifdef JS_THREADSAFE
    1: #include "jsdhash.h"
    1: #endif
    1: 
50491: extern js::Class js_RegExpClass;
50491: 
53858: namespace js {
53858: 
53858: class RegExpStatics
53858: {
53858:     typedef Vector<int, 20, SystemAllocPolicy> MatchPairs;
53858:     MatchPairs      matchPairs;
57557:     /* The input that was used to produce matchPairs. */
57557:     JSString        *matchPairsInput;
57557:     /* The input last set on the statics. */
57557:     JSString        *pendingInput;
53858:     uintN           flags;
55567:     RegExpStatics   *bufferLink;
55567:     bool            copied;
53858: 
53858:     bool createDependent(JSContext *cx, size_t start, size_t end, Value *out) const;
53858: 
53858:     size_t pairCount() const {
53858:         JS_ASSERT(matchPairs.length() % 2 == 0);
53858:         return matchPairs.length() / 2;
53858:     }
55567: 
55567:     void copyTo(RegExpStatics &dst) {
55567:         dst.matchPairs.clear();
55567:         /* 'save' has already reserved space in matchPairs */
55567:         JS_ALWAYS_TRUE(dst.matchPairs.append(matchPairs));
57557:         dst.matchPairsInput = matchPairsInput;
57557:         dst.pendingInput = pendingInput;
55567:         dst.flags = flags;
55567:     }
55567: 
55567:     void aboutToWrite() {
55567:         if (bufferLink && !bufferLink->copied) {
55567:             copyTo(*bufferLink);
55567:             bufferLink->copied = true;
55567:         }
55567:     }
55567: 
55567:     bool save(JSContext *cx, RegExpStatics *buffer) {
55567:         JS_ASSERT(!buffer->copied && !buffer->bufferLink);
55567:         buffer->bufferLink = bufferLink;
55567:         bufferLink = buffer;
55567:         if (!buffer->matchPairs.reserve(matchPairs.length())) {
55567:             js_ReportOutOfMemory(cx);
55567:             return false;
55567:         }
55567:         return true;
55567:     }
55567: 
55567:     void restore() {
55567:         if (bufferLink->copied)
55567:             bufferLink->copyTo(*this);
55567:         bufferLink = bufferLink->bufferLink;
55567:     }
55567: 
57557:     void checkInvariants() {
57557: #if DEBUG
57557:         if (pairCount() == 0) {
57557:             JS_ASSERT(!matchPairsInput);
57557:             return;
57557:         }
57557: 
57557:         /* Pair count is non-zero, so there must be match pairs input. */
57557:         JS_ASSERT(matchPairsInput);
57557:         size_t mpiLen = matchPairsInput->length();
57557: 
57557:         JS_ASSERT(pairIsPresent(0));
57557: 
57557:         /* Present pairs must be valid. */
57557:         for (size_t i = 0; i < pairCount(); ++i) {
57557:             if (!pairIsPresent(i))
57557:                 continue;
57557:             int start = get(i, 0);
57557:             int limit = get(i, 1);
57557:             JS_ASSERT(mpiLen >= size_t(limit) && limit >= start && start >= 0);
57557:         }
57557: #endif
57557:     }
57557: 
57557:     int get(size_t pairNum, bool which) const {
57557:         JS_ASSERT(pairNum < pairCount());
57557:         return matchPairs[2 * pairNum + which];
57557:     }
57557: 
57557:     /*
57557:      * Check whether the index at |checkValidIndex| is valid (>= 0).
57557:      * If so, construct a string for it and place it in |*out|.
57557:      * If not, place undefined in |*out|.
57557:      */
57557:     bool makeMatch(JSContext *cx, size_t checkValidIndex, size_t pairNum, Value *out) const;
57557: 
57557:     static const uintN allFlags = JSREG_FOLD | JSREG_GLOB | JSREG_STICKY | JSREG_MULTILINE;
57557: 
57557:     struct InitBuffer {};
57557:     explicit RegExpStatics(InitBuffer) : bufferLink(NULL), copied(false) {}
57557: 
57557:     friend class PreserveRegExpStatics;
57557: 
57557:   public:
57557:     RegExpStatics() : bufferLink(NULL), copied(false) { clear(); }
57557: 
57557:     static RegExpStatics *extractFrom(JSObject *global);
57557: 
57557:     /* Mutators. */
57557: 
57557:     /* 
57557:      * The inputOffset parameter is added to the present (i.e. non-negative) match items to emulate
57557:      * sticky mode.
57557:      */
57557:     bool updateFromMatch(JSContext *cx, JSString *input, int *buf, size_t matchItemCount) {
57557:         aboutToWrite();
57557:         pendingInput = input;
57557: 
57557:         if (!matchPairs.resizeUninitialized(matchItemCount)) {
57557:             js_ReportOutOfMemory(cx);
57557:             return false;
57557:         }
57557: 
57557:         for (size_t i = 0; i < matchItemCount; ++i)
57557:             matchPairs[i] = buf[i];
57557: 
57557:         matchPairsInput = input;
57557:         return true;
57557:     }
57557: 
53858:     void setMultiline(bool enabled) {
55567:         aboutToWrite();
53858:         if (enabled)
53858:             flags = flags | JSREG_MULTILINE;
53858:         else
53858:             flags = flags & ~JSREG_MULTILINE;
53858:     }
53858: 
53858:     void clear() {
55567:         aboutToWrite();
53858:         flags = 0;
57557:         pendingInput = NULL;
57557:         matchPairsInput = NULL;
53858:         matchPairs.clear();
53858:     }
53858: 
57557:     bool pairIsPresent(size_t pairNum) { return get(0, 0) != -1; }
53858: 
57557:     /* Corresponds to JSAPI functionality to set the pending RegExp input. */
53858:     void reset(JSString *newInput, bool newMultiline) {
55567:         aboutToWrite();
53858:         clear();
57557:         pendingInput = newInput;
53858:         setMultiline(newMultiline);
53858:         checkInvariants();
53858:     }
53858: 
57557:     void setPendingInput(JSString *newInput) {
55567:         aboutToWrite();
57557:         pendingInput = newInput;
53858:     }
53858: 
53858:     /* Accessors. */
53858: 
57557:     JSString *getPendingInput() const { return pendingInput; }
53858:     uintN getFlags() const { return flags; }
53858:     bool multiline() const { return flags & JSREG_MULTILINE; }
57557: 
57557:     size_t matchStart() const {
57557:         int start = get(0, 0);
57557:         JS_ASSERT(start >= 0);
57557:         return size_t(start);
57557:     }
57557: 
57557:     size_t matchLimit() const {
57557:         int limit = get(0, 1);
57557:         JS_ASSERT(size_t(limit) >= matchStart() && limit >= 0);
57557:         return size_t(limit);
57557:     }
57557: 
57557:     bool matched() const {
57557:         JS_ASSERT(pairCount() > 0);
57557:         return get(0, 1) - get(0, 0) > 0;
57557:     }
57557: 
57557:     size_t getParenCount() const {
57557:         JS_ASSERT(pairCount() > 0);
57557:         return pairCount() - 1;
57557:     }
53858: 
53858:     void mark(JSTracer *trc) const {
57557:         if (pendingInput)
57557:             JS_CALL_STRING_TRACER(trc, pendingInput, "res->pendingInput");
57557:         if (matchPairsInput)
57557:             JS_CALL_STRING_TRACER(trc, matchPairsInput, "res->matchPairsInput");
53858:     }
53858: 
53858:     size_t getParenLength(size_t parenNum) const {
57559:         if (pairCount() <= parenNum + 1)
53858:             return 0;
57559:         return get(parenNum + 1, 1) - get(parenNum + 1, 0);
53858:     }
53858: 
53858:     /* Value creators. */
53858: 
57557:     bool createPendingInput(JSContext *cx, Value *out) const;
53858:     bool createLastMatch(JSContext *cx, Value *out) const { return makeMatch(cx, 0, 0, out); }
53858:     bool createLastParen(JSContext *cx, Value *out) const;
53858:     bool createLeftContext(JSContext *cx, Value *out) const;
53858:     bool createRightContext(JSContext *cx, Value *out) const;
53858: 
53858:     bool createParen(JSContext *cx, size_t parenNum, Value *out) const {
53858:         return makeMatch(cx, (parenNum + 1) * 2, parenNum + 1, out);
53858:     }
53858: 
53858:     /* Substring creators. */
53858: 
53858:     void getParen(size_t num, JSSubString *out) const;
53858:     void getLastMatch(JSSubString *out) const;
53858:     void getLastParen(JSSubString *out) const;
53858:     void getLeftContext(JSSubString *out) const;
53858:     void getRightContext(JSSubString *out) const;
53858: };
53858: 
57557: class PreserveRegExpStatics
57557: {
57557:     RegExpStatics *const original;
57557:     RegExpStatics buffer;
57557: 
57557:   public:
57557:     explicit PreserveRegExpStatics(RegExpStatics *original)
57557:      : original(original),
57557:        buffer(RegExpStatics::InitBuffer())
57557:     {}
57557: 
57557:     bool init(JSContext *cx) {
57557:         return original->save(cx, &buffer);
57557:     }
57557: 
57557:     ~PreserveRegExpStatics() {
57557:         original->restore();
57557:     }
57557: };
57557: 
53858: }
53858: 
50491: static inline bool
50491: VALUE_IS_REGEXP(JSContext *cx, js::Value v)
50491: {
50491:     return !v.isPrimitive() && v.toObject().isRegExp();
50491: }
50491: 
48544: inline const js::Value &
48544: JSObject::getRegExpLastIndex() const
48544: {
48544:     JS_ASSERT(isRegExp());
55746:     return getSlot(JSSLOT_REGEXP_LAST_INDEX);
48544: }
 3164: 
48544: inline void
48544: JSObject::setRegExpLastIndex(const js::Value &v)
48544: {
48544:     JS_ASSERT(isRegExp());
55746:     setSlot(JSSLOT_REGEXP_LAST_INDEX, v);
48544: }
48544: 
48544: inline void
48544: JSObject::setRegExpLastIndex(jsdouble d)
48544: {
48544:     JS_ASSERT(isRegExp());
55746:     setSlot(JSSLOT_REGEXP_LAST_INDEX, js::NumberValue(d));
48544: }
48544: 
48544: inline void
48544: JSObject::zeroRegExpLastIndex()
48544: {
48544:     JS_ASSERT(isRegExp());
55746:     getSlotRef(JSSLOT_REGEXP_LAST_INDEX).setInt32(0);
48544: }
48544: 
48470: namespace js { class AutoStringRooter; }
47587: 
37003: inline bool
37003: JSObject::isRegExp() const
37003: {
37003:     return getClass() == &js_RegExpClass;
37003: }
37003: 
39541: extern JS_FRIEND_API(JSBool)
39541: js_ObjectIsRegExp(JSObject *obj);
39541: 
    1: extern JSObject *
    1: js_InitRegExpClass(JSContext *cx, JSObject *obj);
    1: 
    1: /*
    1:  * Export js_regexp_toString to the decompiler.
    1:  */
    1: extern JSBool
48470: js_regexp_toString(JSContext *cx, JSObject *obj, js::Value *vp);
    1: 
50491: extern JS_FRIEND_API(JSObject *) JS_FASTCALL
50491: js_CloneRegExpObject(JSContext *cx, JSObject *obj, JSObject *proto);
50491: 
    1: /*
50491:  * Move data from |cx|'s regexp statics to |statics| and root the input string in |tvr| if it's
50491:  * available.
    1:  */
50491: extern JS_FRIEND_API(void)
50491: js_SaveAndClearRegExpStatics(JSContext *cx, js::RegExpStatics *res, js::AutoStringRooter *tvr);
50491: 
50491: /* Move the data from |statics| into |cx|. */
50491: extern JS_FRIEND_API(void)
50491: js_RestoreRegExpStatics(JSContext *cx, js::RegExpStatics *res);
    1: 
    1: extern JSBool
28093: js_XDRRegExpObject(JSXDRState *xdr, JSObject **objp);
    1: 
53558: extern JSBool
53558: js_regexp_exec(JSContext *cx, uintN argc, js::Value *vp);
53558: extern JSBool
53558: js_regexp_test(JSContext *cx, uintN argc, js::Value *vp);
53558: 
    1: #endif /* jsregexp_h___ */
