 42733: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 42733:  * vim: set ts=4 sw=4 et tw=99:
 42733:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 42733: 
 42733: #include <string.h>
 42733: #include "jsapi.h"
 42733: #include "jscntxt.h"
 68933: #include "jsgc.h"
 42733: #include "jsprvtd.h"
 42733: #include "jsnum.h"
 98728: #include "jsobjinlines.h"
 42733: #include "jsproxy.h"
 42733: #include "jsscope.h"
 42733: 
 97569: #include "gc/Marking.h"
 90523: #include "vm/MethodGuard.h"
 98728: #include "vm/RegExpObject-inl.h"
 90523: 
 69640: #include "jsatominlines.h"
 77343: #include "jsinferinlines.h"
 42733: #include "jsobjinlines.h"
 42733: 
 42733: using namespace js;
 54707: using namespace js::gc;
 42733: 
 91146: static inline HeapSlot &
 82129: GetCall(JSObject *proxy)
 82129: {
 79734:     JS_ASSERT(IsFunctionProxy(proxy));
 82129:     return proxy->getSlotRef(JSSLOT_PROXY_CALL);
 47498: }
 47498: 
 48470: static inline Value
 82129: GetConstruct(JSObject *proxy)
 82129: {
 83301:     if (proxy->slotSpan() <= JSSLOT_PROXY_CONSTRUCT)
 48470:         return UndefinedValue();
 47498:     return proxy->getSlot(JSSLOT_PROXY_CONSTRUCT);
 47498: }
 47498: 
 91146: static inline HeapSlot &
 82129: GetFunctionProxyConstruct(JSObject *proxy)
 82129: {
 82129:     JS_ASSERT(IsFunctionProxy(proxy));
 83301:     JS_ASSERT(proxy->slotSpan() > JSSLOT_PROXY_CONSTRUCT);
 82129:     return proxy->getSlotRef(JSSLOT_PROXY_CONSTRUCT);
 82129: }
 82129: 
 97183: #ifdef DEBUG
 43279: static bool
 43279: OperationInProgress(JSContext *cx, JSObject *proxy)
 43279: {
 88135:     PendingProxyOperation *op = cx->runtime->pendingProxyOperation;
 43279:     while (op) {
 43279:         if (op->object == proxy)
 43279:             return true;
 43279:         op = op->next;
 43279:     }
 43279:     return false;
 43279: }
 97183: #endif
 43279: 
 98728: BaseProxyHandler::BaseProxyHandler(void *family) : mFamily(family)
 47516: {
 47516: }
 47516: 
 98728: BaseProxyHandler::~BaseProxyHandler()
 42733: {
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     *bp = !!desc.obj;
 42733:     return true;
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     *bp = !!desc.obj;
 42733:     return true;
 42733: }
 42733: 
 42733: bool
 98960: BaseProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver_, jsid id_, Value *vp)
 42733: {
 99421:     RootedObject receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 98960: 
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     if (!desc.obj) {
 48470:         vp->setUndefined();
 42733:         return true;
 42733:     }
 54401:     if (!desc.getter ||
 78614:         (!(desc.attrs & JSPROP_GETTER) && desc.getter == JS_PropertyStub)) {
 42733:         *vp = desc.value;
 42733:         return true;
 42733:     }
 76829:     if (desc.attrs & JSPROP_GETTER)
 76829:         return InvokeGetterOrSetter(cx, receiver, CastAsObjectJsval(desc.getter), 0, NULL, vp);
 54403:     if (!(desc.attrs & JSPROP_SHARED))
 54403:         *vp = desc.value;
 55682:     else
 55682:         vp->setUndefined();
 42745:     if (desc.attrs & JSPROP_SHORTID)
 42745:         id = INT_TO_JSID(desc.shortid);
 56817:     return CallJSPropertyOp(cx, desc.getter, receiver, id, vp);
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::getElementIfPresent(JSContext *cx, JSObject *proxy_, JSObject *receiver_, uint32_t index, Value *vp, bool *present)
 81417: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject receiver(cx, receiver_);
 97353: 
 81417:     jsid id;
 81417:     if (!IndexToId(cx, index, &id))
 81417:         return false;
 81417: 
 81417:     if (!has(cx, proxy, id, present))
 81417:         return false;
 81417: 
 81417:     if (!*present) {
 81417:         Debug_SetValueRangeToCrashOnTouch(vp, 1);
 81417:         return true;
 81417:     }
 81417: 
 81417:     return get(cx, proxy, receiver, id, vp);
 81417: }
 81417: 
 81417: bool
 98960: BaseProxyHandler::set(JSContext *cx, JSObject *proxy, JSObject *receiver_, jsid id_, bool strict,
 62395:                       Value *vp)
 42733: {
 99421:     RootedObject receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 98960: 
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, true, &desc))
 42733:         return false;
 42745:     /* The control-flow here differs from ::get() because of the fall-through case below. */
 42733:     if (desc.obj) {
 93362:         // Check for read-only properties.
 94783:         if (desc.attrs & JSPROP_READONLY)
 94783:             return strict ? Throw(cx, id, JSMSG_CANT_REDEFINE_PROP) : true;
 64255:         if (!desc.setter) {
 88290:             // Be wary of the odd explicit undefined setter case possible through
 88290:             // Object.defineProperty.
 88290:             if (!(desc.attrs & JSPROP_SETTER))
 78614:                 desc.setter = JS_StrictPropertyStub;
 78614:         } else if ((desc.attrs & JSPROP_SETTER) || desc.setter != JS_StrictPropertyStub) {
 62395:             if (!CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, strict, vp))
 61920:                 return false;
 79734:             if (!proxy->isProxy() || GetProxyHandler(proxy) != this)
 64253:                 return true;
 61920:             if (desc.attrs & JSPROP_SHARED)
 61920:                 return true;
 61920:         }
 88290:         if (!desc.getter) {
 88290:             // Same as above for the null setter case.
 88290:             if (!(desc.attrs & JSPROP_GETTER))
 78614:                 desc.getter = JS_PropertyStub;
 88290:         }
 42733:         desc.value = *vp;
 56817:         return defineProperty(cx, receiver, id, &desc);
 42733:     }
 55592:     if (!getPropertyDescriptor(cx, proxy, id, true, &desc))
 42733:         return false;
 42733:     if (desc.obj) {
 93362:         // Check for read-only properties.
 94783:         if (desc.attrs & JSPROP_READONLY)
 94783:             return strict ? Throw(cx, id, JSMSG_CANT_REDEFINE_PROP) : true;
 64255:         if (!desc.setter) {
 88290:             // Be wary of the odd explicit undefined setter case possible through
 88290:             // Object.defineProperty.
 88290:             if (!(desc.attrs & JSPROP_SETTER))
 78614:                 desc.setter = JS_StrictPropertyStub;
 78614:         } else if ((desc.attrs & JSPROP_SETTER) || desc.setter != JS_StrictPropertyStub) {
 62395:             if (!CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, strict, vp))
 61920:                 return false;
 79734:             if (!proxy->isProxy() || GetProxyHandler(proxy) != this)
 64253:                 return true;
 61920:             if (desc.attrs & JSPROP_SHARED)
 61920:                 return true;
 61920:         }
 88290:         if (!desc.getter) {
 88290:             // Same as above for the null setter case.
 88290:             if (!(desc.attrs & JSPROP_GETTER))
 78614:                 desc.getter = JS_PropertyStub;
 88290:         }
101616:         desc.value = *vp;
 62340:         return defineProperty(cx, receiver, id, &desc);
 42733:     }
 61920: 
 56817:     desc.obj = receiver;
 42733:     desc.value = *vp;
 55701:     desc.attrs = JSPROP_ENUMERATE;
 42733:     desc.shortid = 0;
 62412:     desc.getter = NULL;
 62412:     desc.setter = NULL; // Pick up the class getter/setter.
 56817:     return defineProperty(cx, receiver, id, &desc);
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::keys(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 42733: {
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 47460:     JS_ASSERT(props.length() == 0);
 47460: 
 47474:     if (!getOwnPropertyNames(cx, proxy, props))
 42733:         return false;
 47460: 
 47474:     /* Select only the enumerable properties through in-place iteration. */
 48470:     AutoPropertyDescriptorRooter desc(cx);
 47474:     size_t i = 0;
 47474:     for (size_t j = 0, len = props.length(); j < len; j++) {
 47474:         JS_ASSERT(i <= j);
 47474:         jsid id = props[j];
 55592:         if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:             return false;
 47474:         if (desc.obj && (desc.attrs & JSPROP_ENUMERATE))
 47474:             props[i++] = id;
 42733:     }
 47460: 
 47474:     JS_ASSERT(i <= props.length());
 47474:     props.resize(i);
 47474: 
 42733:     return true;
 42733: }
 42733: 
 43190: bool
 98728: BaseProxyHandler::iterate(JSContext *cx, JSObject *proxy_, unsigned flags, Value *vp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 95355: 
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     AutoIdVector props(cx);
 57305:     if ((flags & JSITER_OWNONLY)
 60532:         ? !keys(cx, proxy, props)
 57305:         : !enumerate(cx, proxy, props)) {
 43190:         return false;
 57305:     }
 48470:     return EnumeratedIdVectorToIterator(cx, proxy, flags, props, vp);
 43190: }
 43190: 
 98728: bool
 98728: BaseProxyHandler::call(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                        Value *vp)
 47498: {
103274:     return ReportIsNotFunction(cx, UndefinedValue());
 98728: }
 47498: 
 98728: bool
 98728: BaseProxyHandler::construct(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                             Value *argv, Value *rval)
 98728: {
103274:     return ReportIsNotFunction(cx, UndefinedValue(), CONSTRUCT);
 47498: }
 47498: 
 47498: JSString *
 98728: BaseProxyHandler::obj_toString(JSContext *cx, JSObject *proxy)
 47498: {
 98728:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
 98728:                          JSMSG_INCOMPATIBLE_PROTO,
 98728:                          js_Object_str, js_toString_str,
 98728:                          "object");
 98728:     return NULL;
 98728: }
 98728: 
 98728: JSString *
 98728: BaseProxyHandler::fun_toString(JSContext *cx, JSObject *proxy, unsigned indent)
 98728: {
 47498:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
 47498:                          JSMSG_INCOMPATIBLE_PROTO,
 47498:                          js_Function_str, js_toString_str,
 47498:                          "object");
 47498:     return NULL;
 47498: }
 47498: 
 90851: bool
 98728: BaseProxyHandler::regexp_toShared(JSContext *cx, JSObject *proxy,
 98728:                                   RegExpGuard *g)
 89376: {
 89376:     JS_NOT_REACHED("This should have been a wrapped regexp");
 90851:     return false;
 89376: }
 89376: 
 47498: bool
 98728: BaseProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint,
 98728:                                Value *vp)
 72054: {
102586:     Rooted<JSObject*> obj(cx, proxy);
102586:     return DefaultValue(cx, obj, hint, vp);
 72054: }
 72054: 
 72054: bool
 98728: BaseProxyHandler::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 89623: {
 89623:     vp->setMagic(JS_NO_ITER_VALUE);
 89623:     return true;
 89623: }
 89623: 
 89623: bool
 98728: BaseProxyHandler::nativeCall(JSContext *cx, JSObject *proxy, Class *clasp, Native native, CallArgs args)
 47498: {
 47498:     JS_ASSERT(OperationInProgress(cx, proxy));
 98728:     ReportIncompatibleMethod(cx, args, clasp);
 98728:     return false;
 98728: }
 98728: 
 98728: bool
 98728: BaseProxyHandler::hasInstance(JSContext *cx, JSObject *proxy, const Value *vp, bool *bp)
 98728: {
 98728:     JS_ASSERT(OperationInProgress(cx, proxy));
 98728:     js_ReportValueError(cx, JSMSG_BAD_INSTANCEOF_RHS,
 98728:                         JSDVG_SEARCH_STACK, ObjectValue(*proxy), NULL);
 98728:     return false;
 98728: }
 98728: 
 98728: JSType
 98728: BaseProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     JS_ASSERT(OperationInProgress(cx, proxy));
 98728:     return IsFunctionProxy(proxy) ? JSTYPE_FUNCTION : JSTYPE_OBJECT;
 98728: }
 98728: 
 98728: bool
 98728: BaseProxyHandler::objectClassIs(JSObject *proxy, ESClassValue classValue, JSContext *cx)
 98728: {
 98728:     JS_ASSERT(OperationInProgress(cx, proxy));
 98728:     return false;
 98728: }
 98728: 
 98728: void
 98728: BaseProxyHandler::finalize(JSFreeOp *fop, JSObject *proxy)
 98728: {
 98728: }
 98728: 
 98728: IndirectProxyHandler::IndirectProxyHandler(void *family) : BaseProxyHandler(family)
 98728: {
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy,
 98728:                                             jsid id, bool set,
 98728:                                             PropertyDescriptor *desc)
 98728: {
 98728:     return JS_GetPropertyDescriptorById(cx, GetProxyTargetObject(proxy), id,
 98728:                                         JSRESOLVE_QUALIFIED, desc);
 98728: }
 98728: 
 98728: static bool
 99110: GetOwnPropertyDescriptor(JSContext *cx, JSObject *obj, jsid id, unsigned flags,
 99110:                          JSPropertyDescriptor *desc)
 98728: {
 98728:     // If obj is a proxy, we can do better than just guessing. This is
 98728:     // important for certain types of wrappers that wrap other wrappers.
 98728:     if (obj->isProxy())
 99110:         return Proxy::getOwnPropertyDescriptor(cx, obj, id,
 99110:                                                flags & JSRESOLVE_ASSIGNING,
 99110:                                                desc);
 98728: 
 98728:     if (!JS_GetPropertyDescriptorById(cx, obj, id, flags, desc))
 98728:         return false;
 98728:     if (desc->obj != obj)
 98728:         desc->obj = NULL;
 98728:     return true;
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy,
 98728:                                                jsid id, bool set,
 98728:                                                PropertyDescriptor *desc)
 98728: {
 98728:     return GetOwnPropertyDescriptor(cx, GetProxyTargetObject(proxy), id,
 98728:                                     JSRESOLVE_QUALIFIED, desc);
 98728: }
 98728: 
 98728: bool
102586: IndirectProxyHandler::defineProperty(JSContext *cx, JSObject *proxy, jsid id_,
 98728:                                      PropertyDescriptor *desc)
 98728: {
101861:     RootedObject obj(cx, GetProxyTargetObject(proxy));
102586:     Rooted<jsid> id(cx, id_);
102586:     Rooted<Value> v(cx, desc->value);
102586:     return CheckDefineProperty(cx, obj, id, v, desc->getter, desc->setter, desc->attrs) &&
102586:            JS_DefinePropertyById(cx, obj, id, v, desc->getter, desc->setter, desc->attrs);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy,
 98728:                                           AutoIdVector &props)
 98728: {
 98728:     return GetPropertyNames(cx, GetProxyTargetObject(proxy),
 98728:                             JSITER_OWNONLY | JSITER_HIDDEN, &props);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 98728: {
 98728:     Value v;
 98728:     if (!JS_DeletePropertyById2(cx, GetProxyTargetObject(proxy), id, &v))
 98728:         return false;
 98728:     JSBool b;
 98728:     if (!JS_ValueToBoolean(cx, v, &b))
 98728:         return false;
 98728:     *bp = !!b;
 98728:     return true;
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::enumerate(JSContext *cx, JSObject *proxy,
 98728:                                 AutoIdVector &props)
 98728: {
 98728:     return GetPropertyNames(cx, GetProxyTargetObject(proxy), 0, &props);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::call(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                    Value *vp)
 98728: {
 98728:     JS_ASSERT(OperationInProgress(cx, proxy));
 98728:     AutoValueRooter rval(cx);
 98728:     JSBool ok = Invoke(cx, vp[1], GetCall(proxy), argc, JS_ARGV(cx, vp), rval.addr());
 47498:     if (ok)
 98728:         JS_SET_RVAL(cx, vp, rval.value());
 47498:     return ok;
 47498: }
 47498: 
 47498: bool
 98728: IndirectProxyHandler::construct(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                                 Value *argv, Value *rval)
 47498: {
 47498:     JS_ASSERT(OperationInProgress(cx, proxy));
 48470:     Value fval = GetConstruct(proxy);
 57687:     if (fval.isUndefined())
 76829:         return InvokeConstructor(cx, GetCall(proxy), argc, argv, rval);
 76829:     return Invoke(cx, UndefinedValue(), fval, argc, argv, rval);
 47498: }
 47498: 
 55650: bool
 98728: IndirectProxyHandler::nativeCall(JSContext *cx, JSObject *proxy, Class *clasp,
 98728:                                  Native native, CallArgs args)
 79388: {
101187:     args.thisv() = ObjectValue(*GetProxyTargetObject(proxy));
 98728:     return CallJSNative(cx, native, args);
 79388: }
 79388: 
 79388: bool
 98728: IndirectProxyHandler::hasInstance(JSContext *cx, JSObject *proxy, const Value *vp,
 98728:                                   bool *bp)
 55650: {
 98728:     JSBool b;
 98728:     if (!JS_HasInstance(cx, GetProxyTargetObject(proxy), *vp, &b))
 55650:         return false;
 98728:     *bp = !!b;
 98728:     return true;
 55650: }
 55650: 
 57775: JSType
 98728: IndirectProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 57775: {
 98728:     return TypeOfValue(cx, ObjectValue(*GetProxyTargetObject(proxy)));
 57775: }
 57775: 
 79390: bool
 98728: IndirectProxyHandler::objectClassIs(JSObject *proxy, ESClassValue classValue,
 98728:                                     JSContext *cx)
 79390: {
 98728:     return ObjectClassIs(*GetProxyTargetObject(proxy), classValue, cx);
 98728: }
 98728: 
 98728: JSString *
 98728: IndirectProxyHandler::obj_toString(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     return obj_toStringHelper(cx, GetProxyTargetObject(proxy));
 98728: }
 98728: 
 98728: JSString *
 98728: IndirectProxyHandler::fun_toString(JSContext *cx, JSObject *proxy,
 98728:                                    unsigned indent)
 98728: {
 98728:     return fun_toStringHelper(cx, GetProxyTargetObject(proxy), indent);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::regexp_toShared(JSContext *cx, JSObject *proxy,
 98728:                                       RegExpGuard *g)
 98728: {
 98728:     return RegExpToShared(cx, *GetProxyTargetObject(proxy), g);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint,
 98728:                                    Value *vp)
 98728: {
 98728:     *vp = ObjectValue(*GetProxyTargetObject(proxy));
 98728:     if (hint == JSTYPE_VOID)
 98728:         return ToPrimitive(cx, vp);
 98728:     return ToPrimitive(cx, hint, vp);
 98728: }
 98728: 
 98728: bool
 98728: IndirectProxyHandler::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 98728: {
102586:     Rooted<JSObject*> target(cx, GetProxyTargetObject(proxy));
102586:     if (!js_IteratorMore(cx, target, vp))
 79390:         return false;
 98728:     if (vp->toBoolean()) {
 98728:         *vp = cx->iterValue;
102586:         cx->iterValue = UndefinedValue();
102586:     } else {
102586:         *vp = MagicValue(JS_NO_ITER_VALUE);
102586:     }
 98728:     return true;
 79390: }
 79390: 
102586: DirectProxyHandler::DirectProxyHandler(void *family)
102586:   : IndirectProxyHandler(family)
 99110: {
 99110: }
 99110: 
 99110: bool
102586: DirectProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 99110: {
 99110:     JSBool found;
 99110:     if (!JS_HasPropertyById(cx, GetProxyTargetObject(proxy), id, &found))
 99110:         return false;
 99110:     *bp = !!found;
 99110:     return true;
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 99110: {
 99110:     JSObject *target = GetProxyTargetObject(proxy);
 99110:     PropertyDescriptor desc;
 99110:     if (!JS_GetPropertyDescriptorById(cx, target, id, JSRESOLVE_QUALIFIED,
 99110:                                       &desc))
 99110:         return false;
 99110:     *bp = (desc.obj == target);
 99110:     return true;
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver_,
 99110:                         jsid id_, Value *vp)
 99110: {
 99421:     RootedObject receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 99110:     return GetProxyTargetObject(proxy)->getGeneric(cx, receiver, id, vp);
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::set(JSContext *cx, JSObject *proxy, JSObject *receiver,
 99110:                         jsid id_, bool strict, Value *vp)
 99110: {
 99421:     RootedId id(cx, id_);
 99110:     return GetProxyTargetObject(proxy)->setGeneric(cx, id, vp, strict);
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::keys(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 99110: {
 99110:     return GetPropertyNames(cx, GetProxyTargetObject(proxy), JSITER_OWNONLY,
 99110:                             &props);
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::iterate(JSContext *cx, JSObject *proxy, unsigned flags,
 99110:                             Value *vp)
 99110: {
102586:     Rooted<JSObject*> target(cx, GetProxyTargetObject(proxy));
102586:     return GetIterator(cx, target, flags, vp);
 99110: }
 99110: 
 42733: static bool
 97828: GetTrap(JSContext *cx, JSObject *handler, PropertyName *name, Value *fvalp)
 42733: {
 55484:     JS_CHECK_RECURSION(cx, return false);
 55484: 
102586:     Rooted<PropertyName*> propname(cx, name);
102586:     return handler->getProperty(cx, propname, fvalp);
 42733: }
 42733: 
 42733: static bool
 97828: GetFundamentalTrap(JSContext *cx, JSObject *handler, PropertyName *name, Value *fvalp)
 43190: {
 97828:     if (!GetTrap(cx, handler, name, fvalp))
 43190:         return false;
 43190: 
 43190:     if (!js_IsCallable(*fvalp)) {
 57812:         JSAutoByteString bytes;
 97828:         if (js_AtomToPrintableString(cx, name, &bytes))
 57812:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_NOT_FUNCTION, bytes.ptr());
 43190:         return false;
 43190:     }
 43190: 
 43190:     return true;
 43190: }
 43190: 
 43190: static bool
 97828: GetDerivedTrap(JSContext *cx, JSObject *handler, PropertyName *name, Value *fvalp)
 43190: {
 97828:     JS_ASSERT(name == ATOM(has) ||
 97828:               name == ATOM(hasOwn) ||
 97828:               name == ATOM(get) ||
 97828:               name == ATOM(set) ||
 97828:               name == ATOM(keys) ||
 97828:               name == ATOM(iterate));
 43190: 
 97828:     return GetTrap(cx, handler, name, fvalp);
 43190: }
 43190: 
 43190: static bool
 97353: Trap(JSContext *cx, HandleObject handler, HandleValue fval, unsigned argc, Value* argv, Value *rval)
 42733: {
 76829:     return Invoke(cx, ObjectValue(*handler), fval, argc, argv, rval);
 42733: }
 42733: 
 42733: static bool
 97353: Trap1(JSContext *cx, HandleObject handler, HandleValue fval, jsid id, Value *rval)
 43189: {
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43189:     if (!str)
 43189:         return false;
 48470:     rval->setString(str);
 43190:     return Trap(cx, handler, fval, 1, rval, rval);
 43189: }
 43189: 
 43189: static bool
 97353: Trap2(JSContext *cx, HandleObject handler, HandleValue fval, jsid id, Value v, Value *rval)
 43189: {
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43189:     if (!str)
 43189:         return false;
 48470:     rval->setString(str);
 48470:     Value argv[2] = { *rval, v };
 43190:     return Trap(cx, handler, fval, 2, argv, rval);
 43189: }
 43189: 
 43189: static bool
 48470: ParsePropertyDescriptorObject(JSContext *cx, JSObject *obj, jsid id, const Value &v,
 48470:                               PropertyDescriptor *desc)
 42733: {
 48470:     AutoPropDescArrayRooter descs(cx);
 48470:     PropDesc *d = descs.append();
 64250:     if (!d || !d->initialize(cx, v))
 42733:         return false;
 42733:     desc->obj = obj;
 97047:     desc->value = d->hasValue() ? d->value() : UndefinedValue();
 97047:     JS_ASSERT(!(d->attributes() & JSPROP_SHORTID));
 97047:     desc->attrs = d->attributes();
 42733:     desc->getter = d->getter();
 42733:     desc->setter = d->setter();
 42733:     desc->shortid = 0;
 42733:     return true;
 42733: }
 42733: 
 42733: static bool
 61441: IndicatePropertyNotFound(JSContext *cx, PropertyDescriptor *desc)
 61441: {
 61441:     desc->obj = NULL;
 61441:     return true;
 61441: }
 61441: 
 61441: static bool
 48470: ValueToBool(JSContext *cx, const Value &v, bool *bp)
 42733: {
 48470:     *bp = !!js_ValueToBoolean(v);
 43190:     return true;
 42733: }
 42733: 
 77817: static bool
 48470: ArrayToIdVector(JSContext *cx, const Value &array, AutoIdVector &props)
 42733: {
 47460:     JS_ASSERT(props.length() == 0);
 47460: 
 48470:     if (array.isPrimitive())
 47460:         return true;
 42733: 
 48470:     JSObject *obj = &array.toObject();
 91688:     uint32_t length;
 59904:     if (!js_GetLengthProperty(cx, obj, &length))
 42733:         return false;
 47460: 
 91688:     for (uint32_t n = 0; n < length; ++n) {
 59904:         if (!JS_CHECK_OPERATION_LIMIT(cx))
 59904:             return false;
 78347:         Value v;
 78347:         if (!obj->getElement(cx, n, &v))
 42733:             return false;
 78347:         jsid id;
 78347:         if (!ValueToId(cx, v, &id))
 42733:             return false;
 97828:         if (!props.append(id))
 42733:             return false;
 42733:     }
 47460: 
 42733:     return true;
 42733: }
 42733: 
 43190: /* Derived class for all scripted proxy handlers. */
 98728: class ScriptedProxyHandler : public IndirectProxyHandler {
 43190:   public:
 79386:     ScriptedProxyHandler();
 79386:     virtual ~ScriptedProxyHandler();
 43190: 
 43190:     /* ES5 Harmony fundamental proxy traps. */
 55592:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
 48470:                                        PropertyDescriptor *desc);
 55592:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
 48470:                                           PropertyDescriptor *desc);
 43190:     virtual bool defineProperty(JSContext *cx, JSObject *proxy, jsid id,
 48470:                                 PropertyDescriptor *desc);
 48470:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props);
 43190:     virtual bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
 48470:     virtual bool enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props);
 43190: 
 43190:     /* ES5 Harmony derived proxy traps. */
 43190:     virtual bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
 43190:     virtual bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
 48470:     virtual bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp);
 62395:     virtual bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, bool strict,
 62395:                      Value *vp);
 60532:     virtual bool keys(JSContext *cx, JSObject *proxy, AutoIdVector &props);
 91237:     virtual bool iterate(JSContext *cx, JSObject *proxy, unsigned flags, Value *vp);
 43190: 
 98728:     virtual JSType typeOf(JSContext *cx, JSObject *proxy);
 99117:     virtual bool defaultValue(JSContext *cx, JSObject *obj, JSType hint, Value *vp);
 98728: 
 79386:     static ScriptedProxyHandler singleton;
 43190: };
 43190: 
 47516: static int sScriptedProxyHandlerFamily = 0;
 47516: 
 98728: ScriptedProxyHandler::ScriptedProxyHandler() : IndirectProxyHandler(&sScriptedProxyHandlerFamily)
 43190: {
 43190: }
 43190: 
 79386: ScriptedProxyHandler::~ScriptedProxyHandler()
 43190: {
 43190: }
 43190: 
 43211: static bool
 48470: ReturnedValueMustNotBePrimitive(JSContext *cx, JSObject *proxy, JSAtom *atom, const Value &v)
 43211: {
 48470:     if (v.isPrimitive()) {
 57812:         JSAutoByteString bytes;
 57812:         if (js_AtomToPrintableString(cx, atom, &bytes)) {
 43211:             js_ReportValueError2(cx, JSMSG_BAD_TRAP_RETURN_VALUE,
 57812:                                  JSDVG_SEARCH_STACK, ObjectOrNullValue(proxy), NULL, bytes.ptr());
 57812:         }
 43211:         return false;
 43211:     }
 43211:     return true;
 43211: }
 43211: 
 43279: static JSObject *
 43279: GetProxyHandlerObject(JSContext *cx, JSObject *proxy)
 43279: {
 43279:     JS_ASSERT(OperationInProgress(cx, proxy));
 79734:     return GetProxyPrivate(proxy).toObjectOrNull();
 43279: }
 43279: 
 43190: bool
 97353: ScriptedProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_, bool set,
 48470:                                             PropertyDescriptor *desc)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(getPropertyDescriptor), fval.address()) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
 97353:            ((value.reference().isUndefined() && IndicatePropertyNotFound(cx, desc)) ||
 97353:             (ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(getPropertyDescriptor), value) &&
 97353:              ParsePropertyDescriptorObject(cx, proxy, id, value, desc)));
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_, bool set,
 48470:                                                PropertyDescriptor *desc)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(getOwnPropertyDescriptor), fval.address()) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
 97353:            ((value.reference().isUndefined() && IndicatePropertyNotFound(cx, desc)) ||
 97353:             (ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(getPropertyDescriptor), value) &&
 97353:              ParsePropertyDescriptorObject(cx, proxy, id, value, desc)));
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::defineProperty(JSContext *cx, JSObject *proxy, jsid id_,
 48470:                                      PropertyDescriptor *desc)
 43190: {
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 99421:     RootedId id(cx, id_);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(defineProperty), fval.address()) &&
 97353:            NewPropertyDescriptorObject(cx, desc, value.address()) &&
 97353:            Trap2(cx, handler, fval, id, value, value.address());
 43190: }
 43190: 
 43190: bool
 79386: ScriptedProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 43190: {
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(getOwnPropertyNames), fval.address()) &&
 97353:            Trap(cx, handler, fval, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
 79386: ScriptedProxyHandler::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 43190: {
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(delete), fval.address()) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
 97353:            ValueToBool(cx, value, bp);
 43190: }
 43190: 
 43190: bool
 79386: ScriptedProxyHandler::enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 43190: {
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     return GetFundamentalTrap(cx, handler, ATOM(enumerate), fval.address()) &&
 97353:            Trap(cx, handler, fval, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::has(JSContext *cx, JSObject *proxy_, jsid id, bool *bp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(has), fval.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::has(cx, proxy, id, bp);
 97353:     return Trap1(cx, handler, fval, id, value.address()) &&
 97353:            ValueToBool(cx, value, bp);
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::hasOwn(JSContext *cx, JSObject *proxy_, jsid id, bool *bp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue fval(cx), value(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(hasOwn), fval.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::hasOwn(cx, proxy, id, bp);
 97353:     return Trap1(cx, handler, fval, id, value.address()) &&
 97353:            ValueToBool(cx, value, bp);
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::get(JSContext *cx, JSObject *proxy_, JSObject *receiver, jsid id_, Value *vp)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43190:     if (!str)
 43190:         return false;
 99421:     RootedValue value(cx, StringValue(str));
 97353:     Value argv[] = { ObjectOrNullValue(receiver), value };
 99421:     RootedValue fval(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(get), fval.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::get(cx, proxy, receiver, id, vp);
 97353:     return Trap(cx, handler, fval, 2, argv, vp);
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::set(JSContext *cx, JSObject *proxy_, JSObject *receiver, jsid id_, bool strict,
 62395:                           Value *vp)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43190:     if (!str)
 43190:         return false;
 99421:     RootedValue value(cx, StringValue(str));
 97353:     Value argv[] = { ObjectOrNullValue(receiver), value, *vp };
 99421:     RootedValue fval(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(set), fval.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::set(cx, proxy, receiver, id, strict, vp);
 97353:     return Trap(cx, handler, fval, 3, argv, value.address());
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::keys(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue value(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(keys), value.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(value))
 98728:         return BaseProxyHandler::keys(cx, proxy, props);
 97353:     return Trap(cx, handler, value, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
 97353: ScriptedProxyHandler::iterate(JSContext *cx, JSObject *proxy_, unsigned flags, Value *vp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject handler(cx, GetProxyHandlerObject(cx, proxy));
 99421:     RootedValue value(cx);
 97353:     if (!GetDerivedTrap(cx, handler, ATOM(iterate), value.address()))
 43190:         return false;
 97353:     if (!js_IsCallable(value))
 98728:         return BaseProxyHandler::iterate(cx, proxy, flags, vp);
 97353:     return Trap(cx, handler, value, 0, NULL, vp) &&
 43211:            ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(iterate), *vp);
 43190: }
 43190: 
 98728: JSType
 98728: ScriptedProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     /*
 98728:      * This function is only here to prevent a regression in
 98728:      * js1_8_5/extensions/scripted-proxies.js. It will be removed when the
 98728:      * direct proxy refactor is complete.
 98728:      */
 99117:     return BaseProxyHandler::typeOf(cx, proxy);
 99117: }
 99117: 
 99117: bool
 99117: ScriptedProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint,
 99117:                                    Value *vp)
 99117: {
 99117:     /*
 99117:      * This function is only here to prevent bug 757063. It will be removed when
 99117:      * the direct proxy refactor is complete.
 99117:      */
 99117:     return BaseProxyHandler::defaultValue(cx, proxy, hint, vp);
 98728: }
 98728: 
 79386: ScriptedProxyHandler ScriptedProxyHandler::singleton;
 43190: 
 43279: class AutoPendingProxyOperation {
 88135:     JSRuntime               *rt;
 67915:     PendingProxyOperation   op;
 43279:   public:
 97353:     AutoPendingProxyOperation(JSContext *cx, JSObject *proxy)
 97353:         : rt(cx->runtime), op(cx, proxy)
 97353:     {
 88135:         op.next = rt->pendingProxyOperation;
 88135:         rt->pendingProxyOperation = &op;
 43279:     }
 43279: 
 43279:     ~AutoPendingProxyOperation() {
 88135:         JS_ASSERT(rt->pendingProxyOperation == &op);
 88135:         rt->pendingProxyOperation = op.next;
 43279:     }
 43279: };
 43279: 
 43190: bool
 79386: Proxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
 55592:                              PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->getPropertyDescriptor(cx, proxy, id, set, desc);
 43190: }
 43190: 
 43190: bool
 79386: Proxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set, Value *vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     return Proxy::getPropertyDescriptor(cx, proxy, id, set, &desc) &&
 76213:            NewPropertyDescriptorObject(cx, &desc, vp);
 43190: }
 43190: 
 43190: bool
 79386: Proxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
 48470:                                 PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->getOwnPropertyDescriptor(cx, proxy, id, set, desc);
 43190: }
 43190: 
 43190: bool
 79386: Proxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set, Value *vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     return Proxy::getOwnPropertyDescriptor(cx, proxy, id, set, &desc) &&
 76213:            NewPropertyDescriptorObject(cx, &desc, vp);
 43190: }
 43190: 
 43190: bool
 79386: Proxy::defineProperty(JSContext *cx, JSObject *proxy, jsid id, PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->defineProperty(cx, proxy, id, desc);
 43190: }
 43190: 
 43190: bool
 79386: Proxy::defineProperty(JSContext *cx, JSObject *proxy, jsid id, const Value &v)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 48470:     AutoPropertyDescriptorRooter desc(cx);
 43190:     return ParsePropertyDescriptorObject(cx, proxy, id, v, &desc) &&
 79386:            Proxy::defineProperty(cx, proxy, id, &desc);
 43190: }
 43190: 
 42733: bool
 79386: Proxy::getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->getOwnPropertyNames(cx, proxy, props);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->delete_(cx, proxy, id, bp);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->enumerate(cx, proxy, props);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->has(cx, proxy, id, bp);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->hasOwn(cx, proxy, id, bp);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->get(cx, proxy, receiver, id, vp);
 42733: }
 42733: 
 42733: bool
 84755: Proxy::getElementIfPresent(JSContext *cx, JSObject *proxy, JSObject *receiver, uint32_t index,
 81417:                            Value *vp, bool *present)
 81417: {
 81417:     JS_CHECK_RECURSION(cx, return false);
 81417:     AutoPendingProxyOperation pending(cx, proxy);
 81417:     return GetProxyHandler(proxy)->getElementIfPresent(cx, proxy, receiver, index, vp, present);
 81417: }
 81417: 
 81417: bool
 79386: Proxy::set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, bool strict, Value *vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->set(cx, proxy, receiver, id, strict, vp);
 42733: }
 42733: 
 42733: bool
 79386: Proxy::keys(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->keys(cx, proxy, props);
 42733: }
 43190: 
 43190: bool
 91237: Proxy::iterate(JSContext *cx, JSObject *proxy, unsigned flags, Value *vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 43279:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->iterate(cx, proxy, flags, vp);
 42733: }
 42733: 
 47498: bool
 91237: Proxy::call(JSContext *cx, JSObject *proxy, unsigned argc, Value *vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 47498:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->call(cx, proxy, argc, vp);
 42733: }
 47498: 
 47498: bool
 91237: Proxy::construct(JSContext *cx, JSObject *proxy, unsigned argc, Value *argv, Value *rval)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 47498:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->construct(cx, proxy, argc, argv, rval);
 42733: }
 47498: 
 57775: bool
 79388: Proxy::nativeCall(JSContext *cx, JSObject *proxy, Class *clasp, Native native, CallArgs args)
 79388: {
 79388:     JS_CHECK_RECURSION(cx, return false);
 79388:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->nativeCall(cx, proxy, clasp, native, args);
 79388: }
 79388: 
 79388: bool
 79386: Proxy::hasInstance(JSContext *cx, JSObject *proxy, const js::Value *vp, bool *bp)
 57775: {
 59231:     JS_CHECK_RECURSION(cx, return false);
 57775:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->hasInstance(cx, proxy, vp, bp);
 57775: }
 57775: 
 57775: JSType
 79386: Proxy::typeOf(JSContext *cx, JSObject *proxy)
 57775: {
 59231:     // FIXME: API doesn't allow us to report error (bug 618906).
 59231:     JS_CHECK_RECURSION(cx, return JSTYPE_OBJECT);
 57775:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->typeOf(cx, proxy);
 57775: }
 57775: 
 79418: bool
 79418: Proxy::objectClassIs(JSObject *proxy, ESClassValue classValue, JSContext *cx)
 79418: {
 79418:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->objectClassIs(proxy, classValue, cx);
 79418: }
 79418: 
 47498: JSString *
 79386: Proxy::obj_toString(JSContext *cx, JSObject *proxy)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return NULL);
 47498:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->obj_toString(cx, proxy);
 42733: }
 47498: 
 47498: JSString *
 91237: Proxy::fun_toString(JSContext *cx, JSObject *proxy, unsigned indent)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return NULL);
 47498:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->fun_toString(cx, proxy, indent);
 42733: }
 42733: 
 90851: bool
 90851: Proxy::regexp_toShared(JSContext *cx, JSObject *proxy, RegExpGuard *g)
 89376: {
101773:     JS_CHECK_RECURSION(cx, return false);
 89376:     AutoPendingProxyOperation pending(cx, proxy);
 90851:     return GetProxyHandler(proxy)->regexp_toShared(cx, proxy, g);
 89376: }
 89376: 
 72054: bool
 79386: Proxy::defaultValue(JSContext *cx, JSObject *proxy, JSType hint, Value *vp)
 72054: {
101773:     JS_CHECK_RECURSION(cx, return false);
 72054:     AutoPendingProxyOperation pending(cx, proxy);
 79734:     return GetProxyHandler(proxy)->defaultValue(cx, proxy, hint, vp);
 72054: }
 72054: 
 89623: bool
 89623: Proxy::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 89623: {
101773:     JS_CHECK_RECURSION(cx, return false);
 89623:     AutoPendingProxyOperation pending(cx, proxy);
 89623:     return GetProxyHandler(proxy)->iteratorNext(cx, proxy, vp);
 89623: }
 89623: 
 54404: static JSObject *
 98960: proxy_innerObject(JSContext *cx, HandleObject obj)
 54404: {
 79734:     return GetProxyPrivate(obj).toObjectOrNull();
 54404: }
 54404: 
 42733: static JSBool
 98960: proxy_LookupGeneric(JSContext *cx, HandleObject obj, HandleId id, JSObject **objp,
 42733:                     JSProperty **propp)
 42733: {
 42733:     bool found;
 79386:     if (!Proxy::has(cx, obj, id, &found))
 42733:         return false;
 42733: 
 42733:     if (found) {
 48470:         *propp = (JSProperty *)0x1;
 42733:         *objp = obj;
 42733:     } else {
 42733:         *objp = NULL;
 42733:         *propp = NULL;
 42733:     }
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_LookupProperty(JSContext *cx, HandleObject obj, HandlePropertyName name, JSObject **objp,
 80442:                      JSProperty **propp)
 80442: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 80442: }
 80442: 
 80442: static JSBool
 98960: proxy_LookupElement(JSContext *cx, HandleObject obj, uint32_t index, JSObject **objp,
 77980:                     JSProperty **propp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80442:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_LookupSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid, JSObject **objp, JSProperty **propp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_DefineGeneric(JSContext *cx, HandleObject obj, HandleId id, const Value *value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 42733:     desc.obj = obj;
 48470:     desc.value = *value;
 42733:     desc.attrs = (attrs & (~JSPROP_SHORTID));
 42733:     desc.getter = getter;
 42733:     desc.setter = setter;
 42733:     desc.shortid = 0;
 79386:     return Proxy::defineProperty(cx, obj, id, &desc);
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_DefineProperty(JSContext *cx, HandleObject obj, HandlePropertyName name, const Value *value,
 91237:                      PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 80624: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 80624: }
 80624: 
 80624: static JSBool
 98960: proxy_DefineElement(JSContext *cx, HandleObject obj, uint32_t index, const Value *value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80624:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_DefineSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid, const Value *value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_GetGeneric(JSContext *cx, HandleObject obj, HandleObject receiver, HandleId id, Value *vp)
 42733: {
 79386:     return Proxy::get(cx, obj, receiver, id, vp);
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_GetProperty(JSContext *cx, HandleObject obj, HandleObject receiver, HandlePropertyName name, Value *vp)
 78675: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 78675: }
 78675: 
 78675: static JSBool
 98960: proxy_GetElement(JSContext *cx, HandleObject obj, HandleObject receiver, uint32_t index, Value *vp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 78675:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_GetElementIfPresent(JSContext *cx, HandleObject obj, HandleObject receiver, uint32_t index,
 81417:                           Value *vp, bool *present)
 81417: {
 81417:     return Proxy::getElementIfPresent(cx, obj, receiver, index, vp, present);
 81417: }
 81417: 
 81417: static JSBool
 98960: proxy_GetSpecial(JSContext *cx, HandleObject obj, HandleObject receiver, HandleSpecialId sid, Value *vp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_SetGeneric(JSContext *cx, HandleObject obj, HandleId id, Value *vp, JSBool strict)
 42733: {
 79386:     return Proxy::set(cx, obj, obj, id, strict, vp);
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_SetProperty(JSContext *cx, HandleObject obj, HandlePropertyName name, Value *vp, JSBool strict)
 80625: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 80625: }
 80625: 
 80625: static JSBool
 98960: proxy_SetElement(JSContext *cx, HandleObject obj, uint32_t index, Value *vp, JSBool strict)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80625:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_SetSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid, Value *vp, JSBool strict)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_GetGenericAttributes(JSContext *cx, HandleObject obj, HandleId id, unsigned *attrsp)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     if (!Proxy::getOwnPropertyDescriptor(cx, obj, id, false, &desc))
 42733:         return false;
 42733:     *attrsp = desc.attrs;
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_GetPropertyAttributes(JSContext *cx, HandleObject obj, HandlePropertyName name, unsigned *attrsp)
 80622: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 80622: }
 80622: 
 80622: static JSBool
 98960: proxy_GetElementAttributes(JSContext *cx, HandleObject obj, uint32_t index, unsigned *attrsp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80622:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_GetSpecialAttributes(JSContext *cx, HandleObject obj, HandleSpecialId sid, unsigned *attrsp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_SetGenericAttributes(JSContext *cx, HandleObject obj, HandleId id, unsigned *attrsp)
 42733: {
 42733:     /* Lookup the current property descriptor so we have setter/getter/value. */
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     if (!Proxy::getOwnPropertyDescriptor(cx, obj, id, true, &desc))
 42733:         return false;
 42733:     desc.attrs = (*attrsp & (~JSPROP_SHORTID));
 79386:     return Proxy::defineProperty(cx, obj, id, &desc);
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_SetPropertyAttributes(JSContext *cx, HandleObject obj, HandlePropertyName name, unsigned *attrsp)
 80622: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 80622: }
 80622: 
 80622: static JSBool
 98960: proxy_SetElementAttributes(JSContext *cx, HandleObject obj, uint32_t index, unsigned *attrsp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80622:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_SetSpecialAttributes(JSContext *cx, HandleObject obj, HandleSpecialId sid, unsigned *attrsp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_DeleteGeneric(JSContext *cx, HandleObject obj, HandleId id, Value *rval, JSBool strict)
 42733: {
 54169:     // TODO: throwing away strict
 42733:     bool deleted;
 79386:     if (!Proxy::delete_(cx, obj, id, &deleted) || !js_SuppressDeletedProperty(cx, obj, id))
 42733:         return false;
 48470:     rval->setBoolean(deleted);
 42733:     return true;
 42733: }
 42733: 
 77980: static JSBool
 98960: proxy_DeleteProperty(JSContext *cx, HandleObject obj, HandlePropertyName name, Value *rval, JSBool strict)
 80623: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 80623: }
 80623: 
 80623: static JSBool
 98960: proxy_DeleteElement(JSContext *cx, HandleObject obj, uint32_t index, Value *rval, JSBool strict)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80623:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 77980: }
 77980: 
 78672: static JSBool
 98960: proxy_DeleteSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid, Value *rval, JSBool strict)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 78672: }
 78672: 
 42733: static void
 42733: proxy_TraceObject(JSTracer *trc, JSObject *obj)
 42733: {
 99244: #ifdef DEBUG
102262:     if (!trc->runtime->gcDisableStrictProxyCheckingCount && obj->isWrapper()) {
 99244:         JSObject *referent = &GetProxyPrivate(obj).toObject();
 99244:         if (referent->compartment() != obj->compartment()) {
 99244:             /*
 99244:              * Assert that this proxy is tracked in the wrapper map. Normally,
 99244:              * the wrapped object will be the key in the wrapper map. However,
 99244:              * sometimes when wrapping Location objects, the wrapped object is
 99244:              * not the key. In that case, we unwrap to find the key.
 99244:              */
 99244:             Value key = ObjectValue(*referent);
 99244:             WrapperMap::Ptr p = obj->compartment()->crossCompartmentWrappers.lookup(key);
 99244:             if (!p) {
 99244:                 key = ObjectValue(*UnwrapObject(referent));
 99244:                 p = obj->compartment()->crossCompartmentWrappers.lookup(key);
 99244:                 JS_ASSERT(p.found());
 99244:             }
 99244:             JS_ASSERT(p->value.get() == ObjectValue(*obj));
 99244:         }
 99244:     }
 99244: #endif
 99244: 
 96950:     // NB: If you add new slots here, make sure to change
 96950:     // js::NukeChromeCrossCompartmentWrappers to cope.
 91146:     MarkCrossCompartmentSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_PRIVATE), "private");
 99385:     MarkSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_EXTRA + 0), "extra0");
 99385:     MarkSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_EXTRA + 1), "extra1");
 42733: }
 42733: 
 57775: static void
 64223: proxy_TraceFunction(JSTracer *trc, JSObject *obj)
 64223: {
 96950:     // NB: If you add new slots here, make sure to change
 96950:     // js::NukeChromeCrossCompartmentWrappers to cope.
 91146:     MarkCrossCompartmentSlot(trc, &GetCall(obj), "call");
 99385:     MarkSlot(trc, &GetFunctionProxyConstruct(obj), "construct");
 91380:     proxy_TraceObject(trc, obj);
 64223: }
 64223: 
 68938: static JSBool
 98960: proxy_Convert(JSContext *cx, HandleObject proxy, JSType hint, Value *vp)
 72054: {
 72054:     JS_ASSERT(proxy->isProxy());
 79386:     return Proxy::defaultValue(cx, proxy, hint, vp);
 72054: }
 72054: 
 64223: static void
 94738: proxy_Finalize(FreeOp *fop, JSObject *obj)
 47498: {
 47498:     JS_ASSERT(obj->isProxy());
 48470:     if (!obj->getSlot(JSSLOT_PROXY_HANDLER).isUndefined())
 94738:         GetProxyHandler(obj)->finalize(fop, obj);
 47498: }
 47498: 
 55650: static JSBool
 98960: proxy_HasInstance(JSContext *cx, HandleObject proxy, const Value *v, JSBool *bp)
 55650: {
 55650:     AutoPendingProxyOperation pending(cx, proxy);
 55650:     bool b;
 79386:     if (!Proxy::hasInstance(cx, proxy, v, &b))
 55650:         return false;
 55650:     *bp = !!b;
 55650:     return true;
 55650: }
 55650: 
 57775: static JSType
 98960: proxy_TypeOf(JSContext *cx, HandleObject proxy)
 57775: {
 57775:     JS_ASSERT(proxy->isProxy());
 79386:     return Proxy::typeOf(cx, proxy);
 57775: }
 57775: 
 77817: JS_FRIEND_DATA(Class) js::ObjectProxyClass = {
 48622:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(4),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 72054:     proxy_Convert,
 64220:     proxy_Finalize,          /* finalize    */
 48622:     NULL,                    /* checkAccess */
 48622:     NULL,                    /* call        */
 98058:     proxy_HasInstance,       /* hasInstance */
 48622:     NULL,                    /* construct   */
 64223:     proxy_TraceObject,       /* trace       */
 48622:     JS_NULL_CLASS_EXT,
 48622:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 43290:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 43290:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 43290:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 43290:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 48622:         NULL,                /* enumerate       */
 57775:         proxy_TypeOf,
 43290:         NULL,                /* thisObject      */
 64220:         NULL,                /* clear           */
 42733:     }
 42733: };
 42733: 
 77817: JS_FRIEND_DATA(Class) js::OuterWindowProxyClass = {
 54404:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(4),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub,
 64220:     proxy_Finalize,          /* finalize    */
 54404:     NULL,                    /* checkAccess */
 54404:     NULL,                    /* call        */
 54404:     NULL,                    /* construct   */
 54404:     NULL,                    /* hasInstance */
 64223:     proxy_TraceObject,       /* trace       */
 54404:     {
 54404:         NULL,                /* equality    */
 54404:         NULL,                /* outerObject */
 54404:         proxy_innerObject,
 56565:         NULL                 /* unused */
 54404:     },
 54404:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 54404:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 54404:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 54404:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 54404:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 54404:         NULL,                /* enumerate       */
 54404:         NULL,                /* typeof          */
 54404:         NULL,                /* thisObject      */
 64220:         NULL,                /* clear           */
 54404:     }
 54404: };
 54404: 
 77817: static JSBool
 91237: proxy_Call(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 48470:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
 42733:     JS_ASSERT(proxy->isProxy());
 79386:     return Proxy::call(cx, proxy, argc, vp);
 42733: }
 42733: 
 77817: static JSBool
 91237: proxy_Construct(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 53557:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
 42733:     JS_ASSERT(proxy->isProxy());
 79386:     bool ok = Proxy::construct(cx, proxy, argc, JS_ARGV(cx, vp), vp);
 53557:     return ok;
 42733: }
 42733: 
 77817: JS_FRIEND_DATA(Class) js::FunctionProxyClass = {
 48622:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(6),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub,
 48622:     NULL,                    /* finalize */
 48622:     NULL,                    /* checkAccess */
 53557:     proxy_Call,
 98058:     FunctionClass.hasInstance,
 48622:     proxy_Construct,
 64223:     proxy_TraceFunction,     /* trace       */
 48622:     JS_NULL_CLASS_EXT,
 48622:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 43290:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 43290:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 43290:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 43290:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 48622:         NULL,                /* enumerate       */
 57775:         proxy_TypeOf,
 43290:         NULL,                /* thisObject      */
 48622:         NULL,                /* clear           */
 42733:     }
 42733: };
 42733: 
 42832: JS_FRIEND_API(JSObject *)
 98728: js::NewProxyObject(JSContext *cx, BaseProxyHandler *handler, const Value &priv_, JSObject *proto_,
 97353:                    JSObject *parent_, JSObject *call_, JSObject *construct_)
 42733: {
 99421:     RootedValue priv(cx, priv_);
 99421:     RootedObject proto(cx, proto_), parent(cx, parent_), call(cx, call_), construct(cx, construct_);
 97353: 
 74424:     JS_ASSERT_IF(proto, cx->compartment == proto->compartment());
 74424:     JS_ASSERT_IF(parent, cx->compartment == parent->compartment());
 99385:     JS_ASSERT_IF(construct, cx->compartment == construct->compartment());
 47498:     bool fun = call || construct;
 54404:     Class *clasp;
 54404:     if (fun)
 54404:         clasp = &FunctionProxyClass;
 54404:     else
 54404:         clasp = handler->isOuterWindow() ? &OuterWindowProxyClass : &ObjectProxyClass;
 55746: 
 77353:     /*
 77353:      * Eagerly mark properties unknown for proxies, so we don't try to track
 77353:      * their properties and so that we don't need to walk the compartment if
 77353:      * their prototype changes later.
 77353:      */
 83286:     if (proto && !proto->setNewTypeUnknown(cx))
 83286:         return NULL;
 77353: 
 83275:     JSObject *obj = NewObjectWithGivenProto(cx, clasp, proto, parent);
 83231:     if (!obj)
 42733:         return NULL;
 48470:     obj->setSlot(JSSLOT_PROXY_HANDLER, PrivateValue(handler));
 47498:     obj->setSlot(JSSLOT_PROXY_PRIVATE, priv);
 47498:     if (fun) {
 48470:         obj->setSlot(JSSLOT_PROXY_CALL, call ? ObjectValue(*call) : UndefinedValue());
 52503:         if (construct) {
 58985:             obj->setSlot(JSSLOT_PROXY_CONSTRUCT, ObjectValue(*construct));
 52503:         }
 47498:     }
 77343: 
 77343:     /* Don't track types of properties of proxies. */
 77353:     MarkTypeObjectUnknownProperties(cx, obj->type());
 77343: 
 42733:     return obj;
 42733: }
 42733: 
 42733: static JSBool
 91237: proxy_create(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 42733:     if (argc < 1) {
 42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
 43190:                              "create", "0", "s");
 42733:         return false;
 42733:     }
 54745:     JSObject *handler = NonNullObject(cx, vp[2]);
 54745:     if (!handler)
 42733:         return false;
 47600:     JSObject *proto, *parent = NULL;
 48470:     if (argc > 1 && vp[3].isObject()) {
 48470:         proto = &vp[3].toObject();
 42733:         parent = proto->getParent();
 42733:     } else {
 48470:         JS_ASSERT(IsFunctionObject(vp[0]));
 42733:         proto = NULL;
 47600:     }
 47600:     if (!parent)
 48470:         parent = vp[0].toObject().getParent();
 79386:     JSObject *proxy = NewProxyObject(cx, &ScriptedProxyHandler::singleton, ObjectValue(*handler),
 47498:                                      proto, parent);
 42733:     if (!proxy)
 42733:         return false;
 42733: 
 48470:     vp->setObject(*proxy);
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
 91237: proxy_createFunction(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 42733:     if (argc < 2) {
 42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
 43190:                              "createFunction", "1", "");
 42733:         return false;
 42733:     }
 54745:     JSObject *handler = NonNullObject(cx, vp[2]);
 54745:     if (!handler)
 42733:         return false;
 42733:     JSObject *proto, *parent;
 48470:     parent = vp[0].toObject().getParent();
 86483:     proto = parent->global().getOrCreateFunctionPrototype(cx);
 80627:     if (!proto)
 42733:         return false;
 42733:     parent = proto->getParent();
 42733: 
103274:     JSObject *call = ValueToCallable(cx, &vp[3]);
 42733:     if (!call)
 42733:         return false;
 42733:     JSObject *construct = NULL;
 42733:     if (argc > 2) {
103274:         construct = ValueToCallable(cx, &vp[4]);
 42733:         if (!construct)
 42733:             return false;
 42733:     }
 42733: 
 79386:     JSObject *proxy = NewProxyObject(cx, &ScriptedProxyHandler::singleton,
 48470:                                      ObjectValue(*handler),
 47498:                                      proto, parent, call, construct);
 42733:     if (!proxy)
 42733:         return false;
 42733: 
 48470:     vp->setObject(*proxy);
 42733:     return true;
 42733: }
 42733: 
 42733: static JSFunctionSpec static_methods[] = {
 42733:     JS_FN("create",         proxy_create,          2, 0),
 42733:     JS_FN("createFunction", proxy_createFunction,  3, 0),
 42733:     JS_FS_END
 42733: };
 42733: 
 77817: Class js::CallableObjectClass = {
 43190:     "Function",
 43190:     JSCLASS_HAS_RESERVED_SLOTS(2),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub,
 48622:     NULL,                    /* finalize    */
 48622:     NULL,                    /* checkAccess */
 97157:     NULL,                    /* call        */
 97157:     NULL                     /* construct   */
 42733: };
 42733: 
 77817: Class js::ProxyClass = {
 43236:     "Proxy",
 43236:     JSCLASS_HAS_CACHED_PROTO(JSProto_Proxy),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub
 43236: };
 43236: 
 42832: JS_FRIEND_API(JSObject *)
 97353: js_InitProxyClass(JSContext *cx, JSObject *obj_)
 42733: {
 99421:     RootedObject obj(cx, obj_);
 97353: 
 99421:     RootedObject module(cx, NewObjectWithClassProto(cx, &ProxyClass, NULL, obj));
 77353:     if (!module || !module->setSingletonType(cx))
 42832:         return NULL;
 77343: 
 42832:     if (!JS_DefineProperty(cx, obj, "Proxy", OBJECT_TO_JSVAL(module),
 62395:                            JS_PropertyStub, JS_StrictPropertyStub, 0)) {
 42832:         return NULL;
 42733:     }
 42832:     if (!JS_DefineFunctions(cx, module, static_methods))
 42832:         return NULL;
 69232: 
 77817:     MarkStandardClassInitializedNoProto(obj, &ProxyClass);
 69232: 
 47497:     return module;
 42832: }
