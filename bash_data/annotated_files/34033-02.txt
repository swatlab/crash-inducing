23697: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
23697: /* ***** BEGIN LICENSE BLOCK *****
23697:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
23697:  *
23697:  * The contents of this file are subject to the Mozilla Public License Version
23697:  * 1.1 (the "License"); you may not use this file except in compliance with
23697:  * the License. You may obtain a copy of the License at
23697:  * http://www.mozilla.org/MPL/
23697:  *
23697:  * Software distributed under the License is distributed on an "AS IS" basis,
23697:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
23697:  * for the specific language governing rights and limitations under the
23697:  * License.
23697:  *
23697:  * The Original Code is the Mozilla SMIL module.
23697:  *
23697:  * The Initial Developer of the Original Code is Brian Birtles.
23697:  * Portions created by the Initial Developer are Copyright (C) 2005
23697:  * the Initial Developer. All Rights Reserved.
23697:  *
23697:  * Contributor(s):
23697:  *   Brian Birtles <birtles@gmail.com>
23697:  *
23697:  * Alternatively, the contents of this file may be used under the terms of
23697:  * either of the GNU General Public License Version 2 or later (the "GPL"),
23697:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
23697:  * in which case the provisions of the GPL or the LGPL are applicable instead
23697:  * of those above. If you wish to allow use of your version of this file only
23697:  * under the terms of either the GPL or the LGPL, and not to allow others to
23697:  * use your version of this file under the terms of the MPL, indicate your
23697:  * decision by deleting the provisions above and replace them with the notice
23697:  * and other provisions required by the GPL or the LGPL. If you do not delete
23697:  * the provisions above, a recipient may use your version of this file under
23697:  * the terms of any one of the MPL, the GPL or the LGPL.
23697:  *
23697:  * ***** END LICENSE BLOCK ***** */
23697: 
23697: #ifndef NS_ISMILATTR_H_
23697: #define NS_ISMILATTR_H_
23697: 
23697: #include "nsStringFwd.h"
23697: 
23697: class nsSMILValue;
23697: class nsISMILType;
23697: class nsISMILAnimationElement;
23697: 
23697: ////////////////////////////////////////////////////////////////////////
23697: // nsISMILAttr: A variable targeted by SMIL for animation and can therefore have
23697: // an underlying (base) value and an animated value For example, an attribute of
23697: // a particular SVG element.
23697: //
23697: // These objects only exist during the compositing phase of SMIL animation
23697: // calculations. They have a single owner who is responsible for deleting the
23697: // object.
23697: 
23697: class nsISMILAttr
23697: {
23697: public:
23697:   /**
23697:    * Creates a new nsSMILValue for this attribute from a string. The string is
23697:    * parsed in the context of this attribute so that context-dependent values
23697:    * such as em-based units can be resolved into a canonical form suitable for
23697:    * animation (including interpolation etc.).
23697:    *
23697:    * @param aStr        A string defining the new value to be created.
23697:    * @param aSrcElement The source animation element. This may be needed to
23697:    *                    provided additional context data such as for
23697:    *                    animateTransform where the 'type' attribute is needed to
23697:    *                    parse the value.
23697:    * @param aValue      Outparam for storing the parsed value.
23697:    * @return NS_OK on success or an error code if creation failed.
23697:    */
23697:   virtual nsresult ValueFromString(const nsAString& aStr,
23697:                                    const nsISMILAnimationElement* aSrcElement,
23697:                                    nsSMILValue& aValue) const = 0;
23697: 
23697:   /**
23697:    * Gets the underlying value of this attribute.
23697:    *
23697:    * @return an nsSMILValue object. returned_object.IsNull() will be true if an
23697:    * error occurred.
23697:    */
23697:   virtual nsSMILValue GetBaseValue() const = 0;
23697: 
23697:   /**
30313:    * Clears the animated value of this attribute.
34033:    *
34033:    * NOTE: The animation target is not guaranteed to be in a document when this
34033:    * method is called. (See bug 523188)
30313:    */
30313:   virtual void ClearAnimValue() = 0;
30313: 
30313:   /**
23697:    * Sets the presentation value of this attribute.
23697:    *
23697:    * @param aValue  The value to set.
23697:    * @return NS_OK on success or an error code if setting failed.
23697:    */
23697:   virtual nsresult SetAnimValue(const nsSMILValue& aValue) = 0;
23697: 
23697:   /**
23697:    * Virtual destructor, to make sure subclasses can clean themselves up.
23697:    */
23697:   virtual ~nsISMILAttr() {};
23697: };
23697: 
23697: #endif // NS_ISMILATTR_H_
