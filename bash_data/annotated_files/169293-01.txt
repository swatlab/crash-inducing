156310: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
156310: /* vim: set ts=8 sts=2 et sw=2 tw=80: */
105741: /* This Source Code Form is subject to the terms of the Mozilla Public
105741:  * License, v. 2.0. If a copy of the MPL was not distributed with this
105741:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
105741: 
105741: #include "Voicemail.h"
159127: 
159127: #include "mozilla/dom/MozVoicemailBinding.h"
131512: #include "nsIDOMMozVoicemailStatus.h"
131513: #include "nsIDOMMozVoicemailEvent.h"
105741: 
105741: #include "mozilla/Services.h"
105741: #include "nsDOMClassInfo.h"
105741: #include "nsServiceManagerUtils.h"
131513: #include "GeneratedEvents.h"
105741: 
135134: #define NS_RILCONTENTHELPER_CONTRACTID "@mozilla.org/ril/content-helper;1"
105741: 
135134: using namespace mozilla::dom;
135134: 
135134: class Voicemail::Listener : public nsIVoicemailListener
135134: {
135134:   Voicemail* mVoicemail;
135134: 
135134: public:
135134:   NS_DECL_ISUPPORTS
135134:   NS_FORWARD_SAFE_NSIVOICEMAILLISTENER(mVoicemail)
135134: 
135134:   Listener(Voicemail* aVoicemail)
135134:     : mVoicemail(aVoicemail)
135134:   {
135134:     MOZ_ASSERT(mVoicemail);
135134:   }
135134: 
135134:   void Disconnect()
135134:   {
135134:     MOZ_ASSERT(mVoicemail);
135134:     mVoicemail = nullptr;
135134:   }
135134: };
135134: 
135134: NS_IMPL_ISUPPORTS1(Voicemail::Listener, nsIVoicemailListener)
135134: 
135134: Voicemail::Voicemail(nsPIDOMWindow* aWindow,
135134:                      nsIVoicemailProvider* aProvider)
159127:   : nsDOMEventTargetHelper(aWindow)
159127:   , mProvider(aProvider)
105741: {
135134:   mListener = new Listener(this);
135134:   DebugOnly<nsresult> rv = mProvider->RegisterVoicemailMsg(mListener);
135134:   NS_WARN_IF_FALSE(NS_SUCCEEDED(rv),
135134:                    "Failed registering voicemail messages with provider");
105741: }
105741: 
105741: Voicemail::~Voicemail()
105741: {
135134:   MOZ_ASSERT(mProvider && mListener);
135134: 
135134:   mListener->Disconnect();
135134:   mProvider->UnregisterVoicemailMsg(mListener);
105741: }
105741: 
159127: JSObject*
159127: Voicemail::WrapObject(JSContext* aCx, JS::Handle<JSObject*> aScope)
105741: {
159127:   return MozVoicemailBinding::Wrap(aCx, aScope, this);
105741: }
105741: 
159127: // MozVoicemail WebIDL
159127: 
159127: already_AddRefed<nsIDOMMozVoicemailStatus>
169293: Voicemail::GetStatus(ErrorResult& aRv) const
105990: {
159127:   if (!mProvider) {
159127:     aRv.Throw(NS_ERROR_UNEXPECTED);
159127:     return nullptr;
159127:   }
159127: 
159127:   nsCOMPtr<nsIDOMMozVoicemailStatus> status;
169293:   nsresult rv = mProvider->GetVoicemailStatus(getter_AddRefs(status));
159127:   if (NS_FAILED(rv)) {
159127:     aRv.Throw(rv);
159127:     return nullptr;
159127:   }
159127: 
159127:   return status.forget();
159127: }
159127: 
159127: void
169293: Voicemail::GetNumber(nsString& aNumber, ErrorResult& aRv) const
159127: {
105990:   aNumber.SetIsVoid(true);
105990: 
159127:   if (!mProvider) {
159127:     aRv.Throw(NS_ERROR_UNEXPECTED);
159127:     return;
105990:   }
105990: 
169293:   aRv = mProvider->GetVoicemailNumber(aNumber);
159127: }
159127: 
159127: void
169293: Voicemail::GetDisplayName(nsString& aDisplayName, ErrorResult& aRv) const
105990: {
105990:   aDisplayName.SetIsVoid(true);
105990: 
159127:   if (!mProvider) {
159127:     aRv.Throw(NS_ERROR_UNEXPECTED);
159127:     return;
105990:   }
105990: 
169293:   aRv = mProvider->GetVoicemailDisplayName(aDisplayName);
159127: }
105741: 
135134: // nsIVoicemailListener
105741: 
105741: NS_IMETHODIMP
135134: Voicemail::NotifyStatusChanged(nsIDOMMozVoicemailStatus* aStatus)
105741: {
131513:   nsCOMPtr<nsIDOMEvent> event;
135508:   NS_NewDOMMozVoicemailEvent(getter_AddRefs(event), this, nullptr, nullptr);
131513: 
131513:   nsCOMPtr<nsIDOMMozVoicemailEvent> ce = do_QueryInterface(event);
131513:   nsresult rv = ce->InitMozVoicemailEvent(NS_LITERAL_STRING("statuschanged"),
105741:                                           false, false, aStatus);
105741:   NS_ENSURE_SUCCESS(rv, rv);
105741: 
131513:   return DispatchTrustedEvent(ce);
105741: }
105741: 
105741: nsresult
159127: NS_NewVoicemail(nsPIDOMWindow* aWindow, Voicemail** aVoicemail)
105741: {
105741:   nsPIDOMWindow* innerWindow = aWindow->IsInnerWindow() ?
105741:     aWindow :
105741:     aWindow->GetCurrentInnerWindow();
105741: 
135134:   nsCOMPtr<nsIVoicemailProvider> provider =
105741:     do_GetService(NS_RILCONTENTHELPER_CONTRACTID);
135134:   NS_ENSURE_STATE(provider);
105741: 
159127:   nsRefPtr<Voicemail> voicemail = new Voicemail(innerWindow, provider);
105741:   voicemail.forget(aVoicemail);
105741:   return NS_OK;
105741: }
