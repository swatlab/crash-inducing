 87861: /* Any copyright is dedicated to the Public Domain.
 87861:    http://creativecommons.org/publicdomain/zero/1.0/ */
 87861: "use strict";
 87861: 
100193: let tiltOpened = false;
100193: 
 87861: function test() {
 87861:   if (!isTiltEnabled()) {
 87861:     info("Skipping part of the arcball test because Tilt isn't enabled.");
 87861:     return;
 87861:   }
 87861:   if (!isWebGLSupported()) {
 87861:     info("Skipping part of the arcball test because WebGL isn't supported.");
 87861:     return;
 87861:   }
 87861: 
 88193:   requestLongerTimeout(10);
 87861:   waitForExplicitFinish();
 87861: 
 87861:   createTab(function() {
 87861:     createTilt({
 87861:       onTiltOpen: function(instance)
 87861:       {
100193:         tiltOpened = true;
100193: 
 87861:         performTest(instance.presenter.canvas,
 87861:                     instance.controller.arcball, function() {
 87861: 
 87861:           info("Killing arcball reset test.");
 87861: 
 88393:           Services.obs.addObserver(cleanup, DESTROYED, false);
 87861:           InspectorUI.closeInspectorUI();
 87861:         });
 87861:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 87861:     });
 87861:   });
 87861: }
 87861: 
 87861: function performTest(canvas, arcball, callback) {
 87861:   is(document.activeElement, canvas,
 87861:     "The visualizer canvas should be focused when performing this test.");
 87861: 
 87861: 
 87861:   info("Starting arcball reset test.");
 87861: 
 87861:   // start translating and rotating sometime at random
 87861: 
 88393:   window.setTimeout(function() {
 87861:     info("Synthesizing key down events.");
 87861: 
 87861:     EventUtils.synthesizeKey("VK_W", { type: "keydown" });
 87861:     EventUtils.synthesizeKey("VK_LEFT", { type: "keydown" });
 87861: 
 87861:     // wait for some arcball translations and rotations to happen
 87861: 
 88393:     window.setTimeout(function() {
 87861:       info("Synthesizing key up events.");
 87861: 
 87861:       EventUtils.synthesizeKey("VK_W", { type: "keyup" });
 87861:       EventUtils.synthesizeKey("VK_LEFT", { type: "keyup" });
 87861: 
 87861:       // ok, transformations finished, we can now try to reset the model view
 87861: 
 88393:       window.setTimeout(function() {
 87861:         info("Synthesizing arcball reset key press.");
 87861: 
 91042:         arcball._onResetStart = function() {
 88193:           info("Starting arcball reset animation.");
 88193:         };
 88193: 
 91042:         arcball._onResetStep = function() {
 91040:           info("\nlastRot: " + quat4.str(arcball._lastRot) +
 91040:                "\ndeltaRot: " + quat4.str(arcball._deltaRot) +
 91040:                "\ncurrentRot: " + quat4.str(arcball._currentRot) +
 91040:                "\nlastTrans: " + vec3.str(arcball._lastTrans) +
 91040:                "\ndeltaTrans: " + vec3.str(arcball._deltaTrans) +
 91040:                "\ncurrentTrans: " + vec3.str(arcball._currentTrans) +
 91040:                "\nadditionalRot: " + vec3.str(arcball._additionalRot) +
 91040:                "\nadditionalTrans: " + vec3.str(arcball._additionalTrans) +
 91040:                "\nzoomAmount: " + arcball._zoomAmount);
 91040:         };
 91040: 
 91042:         arcball._onResetFinish = function() {
 87861:           ok(isApproxVec(arcball._lastRot, [0, 0, 0, 1]),
 87861:             "The arcball _lastRot field wasn't reset correctly.");
 87861:           ok(isApproxVec(arcball._deltaRot, [0, 0, 0, 1]),
 87861:             "The arcball _deltaRot field wasn't reset correctly.");
 87861:           ok(isApproxVec(arcball._currentRot, [0, 0, 0, 1]),
 87861:             "The arcball _currentRot field wasn't reset correctly.");
 87861: 
 87861:           ok(isApproxVec(arcball._lastTrans, [0, 0, 0]),
 87861:             "The arcball _lastTrans field wasn't reset correctly.");
 87861:           ok(isApproxVec(arcball._deltaTrans, [0, 0, 0]),
 87861:             "The arcball _deltaTrans field wasn't reset correctly.");
 87861:           ok(isApproxVec(arcball._currentTrans, [0, 0, 0]),
 87861:             "The arcball _currentTrans field wasn't reset correctly.");
 87861: 
 87861:           ok(isApproxVec(arcball._additionalRot, [0, 0, 0]),
 87861:             "The arcball _additionalRot field wasn't reset correctly.");
 87861:           ok(isApproxVec(arcball._additionalTrans, [0, 0, 0]),
 87861:             "The arcball _additionalTrans field wasn't reset correctly.");
 87861: 
 87861:           ok(isApproxVec([arcball._zoomAmount], [0]),
 87861:             "The arcball _zoomAmount field wasn't reset correctly.");
 87861: 
 91042:           executeSoon(function() {
 87861:             info("Finishing arcball reset test.");
 87861:             callback();
 91042:           });
 87861:         };
 87861: 
 87861:         EventUtils.synthesizeKey("VK_R", { type: "keydown" });
 88393: 
 88393:       }, Math.random() * 1000); // leave enough time for transforms to happen
 88393:     }, Math.random() * 1000);
 88393:   }, Math.random() * 1000);
 87861: }
 87861: 
 88396: function cleanup() {
 87861:   info("Cleaning up arcball reset test.");
 87861: 
100193:   if (tiltOpened) { Services.obs.removeObserver(cleanup, DESTROYED); }
 87861:   gBrowser.removeCurrentTab();
 87861:   finish();
 87861: }
