72423: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
72423:  * ***** BEGIN LICENSE BLOCK *****
72423:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
72423:  *
72423:  * The contents of this file are subject to the Mozilla Public License Version
72423:  * 1.1 (the "License"); you may not use this file except in compliance with
72423:  * the License. You may obtain a copy of the License at
72423:  * http://www.mozilla.org/MPL/
72423:  *
72423:  * Software distributed under the License is distributed on an "AS IS" basis,
72423:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
72423:  * for the specific language governing rights and limitations under the
72423:  * License.
72423:  *
72423:  * The Original Code is Mozilla Corporation code.
72423:  *
72423:  * The Initial Developer of the Original Code is Mozilla Foundation.
72423:  * Portions created by the Initial Developer are Copyright (C) 2011
72423:  * the Initial Developer. All Rights Reserved.
72423:  *
72423:  * Contributor(s):
72423:  *   Bas Schouten <bschouten@mozilla.com>
72423:  *
72423:  * Alternatively, the contents of this file may be used under the terms of
72423:  * either the GNU General Public License Version 2 or later (the "GPL"), or
72423:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
72423:  * in which case the provisions of the GPL or the LGPL are applicable instead
72423:  * of those above. If you wish to allow use of your version of this file only
72423:  * under the terms of either the GPL or the LGPL, and not to allow others to
72423:  * use your version of this file under the terms of the MPL, indicate your
72423:  * decision by deleting the provisions above and replace them with the notice
72423:  * and other provisions required by the GPL or the LGPL. If you do not delete
72423:  * the provisions above, a recipient may use your version of this file under
72423:  * the terms of any one of the MPL, the GPL or the LGPL.
72423:  *
72423:  * ***** END LICENSE BLOCK ***** */
72423: 
72423: #include "2D.h"
72423: 
72423: #ifdef USE_CAIRO
72423: #include "DrawTargetCairo.h"
88426: #include "ScaledFontBase.h"
72423: #endif
72423: 
81281: #ifdef USE_SKIA
81281: #include "DrawTargetSkia.h"
87511: #include "ScaledFontBase.h"
90013: #include "ScaledFontFreetype.h"
87511: #endif
87511: 
87511: #ifdef WIN32
87511: #include "ScaledFontWin.h"
87511: #endif
87511: 
87507: #ifdef XP_MACOSX
87507: #include "ScaledFontMac.h"
87497: #endif
87511: 
87511: 
87511: #ifdef XP_MACOSX
87511: #include "DrawTargetCG.h"
81281: #endif
81281: 
72423: #ifdef WIN32
72423: #include "DrawTargetD2D.h"
72423: #include "ScaledFontDWrite.h"
72423: #include <d3d10_1.h>
72423: #endif
72423: 
81281: 
72423: #include "Logging.h"
72423: 
72423: #ifdef PR_LOGGING
72423: PRLogModuleInfo *sGFX2DLog = PR_NewLogModule("gfx2d");
72423: #endif
72423: 
72423: namespace mozilla {
72423: namespace gfx {
72423: 
72423: // XXX - Need to define an API to set this.
72423: int sGfxLogLevel = LOG_DEBUG;
72423: 
72423: #ifdef WIN32
72423: ID3D10Device1 *Factory::mD3D10Device;
72423: #endif
72423: 
72423: TemporaryRef<DrawTarget>
72423: Factory::CreateDrawTarget(BackendType aBackend, const IntSize &aSize, SurfaceFormat aFormat)
72423: {
72423:   switch (aBackend) {
72423: #ifdef WIN32
72423:   case BACKEND_DIRECT2D:
72423:     {
72423:       RefPtr<DrawTargetD2D> newTarget;
72423:       newTarget = new DrawTargetD2D();
72423:       if (newTarget->Init(aSize, aFormat)) {
72423:         return newTarget;
72423:       }
72423:       break;
72423:     }
88607: #elif defined XP_MACOSX || defined ANDROID || defined LINUX
81281: #ifdef USE_SKIA
81281:   case BACKEND_SKIA:
81281:     {
81281:       RefPtr<DrawTargetSkia> newTarget;
81281:       newTarget = new DrawTargetSkia();
81281:       if (newTarget->Init(aSize, aFormat)) {
81281:         return newTarget;
81281:       }
81281:       break;
81281:     }
81281: #endif
87511: #ifdef XP_MACOSX
87511:   case BACKEND_COREGRAPHICS:
87511:     {
87511:       RefPtr<DrawTargetCG> newTarget;
87511:       newTarget = new DrawTargetCG();
87511:       if (newTarget->Init(aSize, aFormat)) {
87511:         return newTarget;
87511:       }
87511:       break;
87511:     }
87511: #endif
87511: #endif
72423:   default:
72423:     gfxDebug() << "Invalid draw target type specified.";
72423:     return NULL;
72423:   }
72423: 
72423:   gfxDebug() << "Failed to create DrawTarget, Type: " << aBackend << " Size: " << aSize;
72423:   // Failed
72423:   return NULL;
72423: }
72423: 
72423: TemporaryRef<ScaledFont>
72423: Factory::CreateScaledFontForNativeFont(const NativeFont &aNativeFont, Float aSize)
72423: {
72423:   switch (aNativeFont.mType) {
72423: #ifdef WIN32
72423:   case NATIVE_FONT_DWRITE_FONT_FACE:
72423:     {
72423:       return new ScaledFontDWrite(static_cast<IDWriteFontFace*>(aNativeFont.mFont), aSize);
72423:     }
72423: #endif
81281: #ifdef XP_MACOSX
81281:   case NATIVE_FONT_MAC_FONT_FACE:
81281:     {
81281:       return new ScaledFontMac(static_cast<CGFontRef>(aNativeFont.mFont), aSize);
81281:     }
81281: #endif
87511: #ifdef USE_SKIA
82414: #ifdef WIN32
82414:   case NATIVE_FONT_GDI_FONT_FACE:
82414:     {
82414:       return new ScaledFontWin(static_cast<gfxGDIFont*>(aNativeFont.mFont), aSize);
82414:     }
82414: #endif
81281:   case NATIVE_FONT_SKIA_FONT_FACE:
81281:     {
90013:       return new ScaledFontFreetype(static_cast<gfxFont*>(aNativeFont.mFont), aSize);
81281:     }
81281: #endif
88426: #ifdef USE_CAIRO
87057:   case NATIVE_FONT_CAIRO_FONT_FACE:
87057:     {
88426:       return new ScaledFontBase(aSize);
87057:     }
88426: #endif
72423:   default:
72423:     gfxWarning() << "Invalid native font type specified.";
72423:     return NULL;
72423:   }
72423: }
72423: 
88426: TemporaryRef<ScaledFont>
88426: Factory::CreateScaledFontWithCairo(const NativeFont& aNativeFont, Float aSize, cairo_scaled_font_t* aScaledFont)
88426: {
88426: #ifdef USE_CAIRO
88426:   // In theory, we could pull the NativeFont out of the cairo_scaled_font_t*,
88426:   // but that would require a lot of code that would be otherwise repeated in
88426:   // various backends.
88426:   // Therefore, we just reuse CreateScaledFontForNativeFont's implementation.
88426:   RefPtr<ScaledFont> font = CreateScaledFontForNativeFont(aNativeFont, aSize);
88426:   static_cast<ScaledFontBase*>(font.get())->SetCairoScaledFont(aScaledFont);
88426:   return font;
88426: #else
88426:   return NULL;
88426: #endif
88426: }
88426: 
72423: #ifdef WIN32
72423: TemporaryRef<DrawTarget>
72423: Factory::CreateDrawTargetForD3D10Texture(ID3D10Texture2D *aTexture, SurfaceFormat aFormat)
72423: {
72423:   RefPtr<DrawTargetD2D> newTarget;
72423: 
72423:   newTarget = new DrawTargetD2D();
72423:   if (newTarget->Init(aTexture, aFormat)) {
72423:     return newTarget;
72423:   }
72423: 
72423:   gfxWarning() << "Failed to create draw target for D3D10 texture.";
72423: 
72423:   // Failed
72423:   return NULL;
72423: }
72423: 
72423: void
72423: Factory::SetDirect3D10Device(ID3D10Device1 *aDevice)
72423: {
72423:   mD3D10Device = aDevice;
72423: }
72423: 
72423: ID3D10Device1*
72423: Factory::GetDirect3D10Device()
72423: {
72423:   return mD3D10Device;
72423: }
72423: 
72423: #endif // XP_WIN
72423: 
72423: #ifdef USE_CAIRO
72423: TemporaryRef<DrawTarget>
72423: Factory::CreateDrawTargetForCairoSurface(cairo_surface_t* aSurface)
72423: {
72423:   RefPtr<DrawTargetCairo> newTarget = new DrawTargetCairo();
72423:   if (newTarget->Init(aSurface)) {
72423:     return newTarget;
72423:   }
72423: 
72423:   return NULL;
72423: }
72423: #endif
72423: 
72423: }
72423: }
