114937: <!DOCTYPE HTML>
114937: <html>
114937: <head>
114937:   <title>Test whether we can create an AudioContext interface</title>
114937:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
114937:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
114937: </head>
114937: <body>
114937: <pre id="test">
135460: <script src="webaudio.js" type="text/javascript"></script>
114937: <script class="testbody" type="text/javascript">
114937: 
114937: SimpleTest.waitForExplicitFinish();
114937: addLoadEvent(function() {
131559:   var context = new AudioContext();
131559:   var buffer = context.createBuffer(2, 2048, context.sampleRate);
114937:   SpecialPowers.gc(); // Make sure that our channels are accessible after GC
114937:   ok(buffer, "Buffer was allocated successfully");
131559:   is(buffer.sampleRate, context.sampleRate, "Correct sample rate");
114937:   is(buffer.length, 2048, "Correct length");
131559:   ok(Math.abs(buffer.duration - 2048 / context.sampleRate) < 0.0001, "Correct duration");
114937:   is(buffer.numberOfChannels, 2, "Correct number of channels");
114937:   for (var i = 0; i < buffer.numberOfChannels; ++i) {
114937:     var buf = buffer.getChannelData(i);
114937:     ok(buf, "Buffer index " + i + " exists");
114937:     ok(buf instanceof Float32Array, "Result is a typed array");
114937:     is(buf.length, buffer.length, "Correct length");
114937:     var foundNonZero = false;
114937:     for (var j = 0; j < buf.length; ++j) {
114937:       if (buf[j] != 0) {
114937:         foundNonZero = true;
114937:         break;
114937:       }
162215:       buf[j] = j;
114937:     }
114937:     ok(!foundNonZero, "Buffer " + i + " should be initialized to 0");
114937:   }
162215: 
162215:   // Now test copying the channel data out of a normal buffer
162215:   var copy = new Float32Array(100);
162215:   buffer.copyFromChannel(copy, 0, 1024);
162215:   for (var i = 0; i < copy.length; ++i) {
162215:     is(copy[i], 1024 + i, "Correct sample");
162215:   }
162215: 
162215:   // Test copying the channel data out of a playing buffer
162215:   var srcNode = context.createBufferSource();
162215:   srcNode.buffer = buffer;
162215:   srcNode.start(0);
162215:   copy = new Float32Array(100);
162215:   buffer.copyFromChannel(copy, 0, 1024);
162215:   for (var i = 0; i < copy.length; ++i) {
162215:     is(copy[i], 1024 + i, "Correct sample");
162215:   }
162215: 
162215:   // Test copying to the channel data
162215:   var newData = new Float32Array(200);
162215:   buffer.copyToChannel(newData, 0, 100);
162215:   var changedData = buffer.getChannelData(0);
162215:   for (var i = 0; i < changedData.length; ++i) {
162215:     if (i < 100 || i >= 300) {
162215:       is(changedData[i], i, "Untouched sample");
162215:     } else {
162215:       is(changedData[i], 0, "Correct sample");
162215:     }
162215:   }
162215: 
162215:   // Now, neuter the array buffer
162215:   var worker = new Worker("audioBufferSourceNodeNeutered_worker.js");
162215:   var data = buffer.getChannelData(0).buffer;
162215:   worker.postMessage(data, [data]);
162215:   SpecialPowers.gc();
162215: 
162215:   expectException(function() {
162215:     buffer.copyFromChannel(copy, 0, 1024);
162215:   }, DOMException.INDEX_SIZE_ERR);
162215: 
162215:   expectException(function() {
162215:     buffer.copyToChannel(newData, 0, 100);
162215:   }, DOMException.INDEX_SIZE_ERR);
162215: 
135460:   expectException(function() {
135460:     context.createBuffer(2, 2048, 7999);
177269:   }, DOMException.NOT_SUPPORTED_ERR);
135460:   expectException(function() {
177269:     context.createBuffer(2, 2048, 96001);
177269:   }, DOMException.NOT_SUPPORTED_ERR);
135460:   context.createBuffer(2, 2048, 8000);  // no exception
177269:   context.createBuffer(2, 2048, 96000); // no exception
145215:   expectException(function() {
145215:     context.createBuffer(2, 0, 48000);
177269:   }, DOMException.NOT_SUPPORTED_ERR);
114937:   SimpleTest.finish();
114937: });
114937: 
114937: </script>
114937: </pre>
114937: </body>
114937: </html>
