    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: David W. Hyatt (hyatt@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsXBLBinding_h_
    1: #define nsXBLBinding_h_
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsAutoPtr.h"
    1: #include "nsIDOMNodeList.h"
    1: #include "nsIStyleRuleProcessor.h"
    1: #include "nsClassHashtable.h"
    1: #include "nsTArray.h"
 1829: #include "nsCycleCollectionParticipant.h"
    1: 
    1: class nsXBLPrototypeBinding;
    1: class nsIContent;
    1: class nsIAtom;
    1: class nsIDocument;
    1: class nsIScriptContext;
    1: class nsObjectHashtable;
    1: class nsXBLInsertionPoint;
    1: typedef nsTArray<nsRefPtr<nsXBLInsertionPoint> > nsInsertionPointList;
    1: struct JSContext;
    1: struct JSObject;
    1: 
    1: // *********************************************************************/
    1: // The XBLBinding class
    1: 
    1: class nsXBLBinding
    1: {
    1: public:
    1:   nsXBLBinding(nsXBLPrototypeBinding* aProtoBinding);
    1:   ~nsXBLBinding();
    1: 
    1:   /**
    1:    * XBLBindings are refcounted.  They are held onto in 3 ways:
    1:    * 1. The binding manager's binding table holds onto all bindings that are
    1:    *    currently attached to a content node.
    1:    * 2. Bindings hold onto their base binding.  This is important since
    1:    *    the base binding itself may not be attached to anything.
    1:    * 3. The binding manager holds an additional reference to bindings
    1:    *    which are queued to fire their constructors.
    1:    */
    1: 
    1:   nsrefcnt AddRef()
    1:   {
    1:     ++mRefCnt;
    1:     NS_LOG_ADDREF(this, mRefCnt, "nsXBLBinding", sizeof(nsXBLBinding));
    1:     return mRefCnt;
    1:   }
    1: 
    1:   nsrefcnt Release()
    1:   {
    1:     --mRefCnt;
    1:     NS_LOG_RELEASE(this, mRefCnt, "nsXBLBinding");
    1:     if (mRefCnt == 0) {
    1:       mRefCnt = 1;
    1:       delete this;
    1:       return 0;
    1:     }
    1:     return mRefCnt;
    1:   }
    1: 
 1829:   NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS(nsXBLBinding)
 1829: 
    1:   nsXBLPrototypeBinding* PrototypeBinding() { return mPrototypeBinding; }
    1:   nsIContent* GetAnonymousContent() { return mContent.get(); }
    1: 
    1:   nsXBLBinding* GetBaseBinding() { return mNextBinding; }
    1:   void SetBaseBinding(nsXBLBinding *aBinding);
    1: 
    1:   nsIContent* GetBoundElement() { return mBoundElement; }
    1:   void SetBoundElement(nsIContent *aElement);
    1: 
    1:   PRBool IsStyleBinding() const { return mIsStyleBinding; }
    1:   void SetIsStyleBinding(PRBool aIsStyle) { mIsStyleBinding = aIsStyle; }
    1: 
    1:   void MarkForDeath();
    1:   PRBool MarkedForDeath() const { return mMarkedForDeath; }
    1: 
    1:   PRBool HasStyleSheets() const;
    1:   PRBool InheritsStyle() const;
    1:   PRBool ImplementsInterface(REFNSIID aIID) const;
    1:   PRBool ShouldBuildChildFrames() const;
    1: 
    1:   void GenerateAnonymousContent();
    1:   void InstallAnonymousContent(nsIContent* aAnonParent, nsIContent* aElement);
23385:   static void UninstallAnonymousContent(nsIDocument* aDocument,
23385:                                         nsIContent* aAnonParent);
13098:   void InstallEventHandlers();
13098:   nsresult InstallImplementation();
    1: 
    1:   void ExecuteAttachedHandler();
    1:   void ExecuteDetachedHandler();
    1:   void UnhookEventHandlers();
    1: 
    1:   nsIAtom* GetBaseTag(PRInt32* aNameSpaceID);
    1:   nsXBLBinding* RootBinding();
    1:   nsXBLBinding* GetFirstStyleBinding();
    1: 
 6392:   // Resolve all the fields for this binding and all ancestor bindings on the
 6392:   // object |obj|.  False return means a JS exception was set.
 6392:   PRBool ResolveAllFields(JSContext *cx, JSObject *obj) const;
 6392: 
    1:   // Get the list of insertion points for aParent. The nsInsertionPointList
    1:   // is owned by the binding, you should not delete it.
    1:   nsresult GetInsertionPointsFor(nsIContent* aParent,
    1:                                  nsInsertionPointList** aResult);
    1: 
 1685:   nsInsertionPointList* GetExistingInsertionPointsFor(nsIContent* aParent);
 1685: 
    1:   nsIContent* GetInsertionPoint(nsIContent* aChild, PRUint32* aIndex);
    1: 
    1:   nsIContent* GetSingleInsertionPoint(PRUint32* aIndex,
    1:                                       PRBool* aMultipleInsertionPoints);
    1: 
    1:   void AttributeChanged(nsIAtom* aAttribute, PRInt32 aNameSpaceID,
    1:                         PRBool aRemoveFlag, PRBool aNotify);
    1: 
    1:   void ChangeDocument(nsIDocument* aOldDocument, nsIDocument* aNewDocument);
    1: 
    1:   void WalkRules(nsIStyleRuleProcessor::EnumFunc aFunc, void* aData);
    1: 
    1:   already_AddRefed<nsIDOMNodeList> GetAnonymousNodes();
    1: 
    1:   static nsresult DoInitJSClass(JSContext *cx, JSObject *global, JSObject *obj,
    1:                                 const nsAFlatCString& aClassName,
 6392:                                 nsXBLPrototypeBinding* aProtoBinding,
    1:                                 void **aClassObject);
    1: 
 1685:   PRBool AllowScripts();  // XXX make const
 1685: 
 6864:   void RemoveInsertionParent(nsIContent* aParent);
 6864:   PRBool HasInsertionParent(nsIContent* aParent);
 6864: 
    1: // MEMBER VARIABLES
    1: protected:
 7216: 
    1:   nsAutoRefCnt mRefCnt;
    1:   nsXBLPrototypeBinding* mPrototypeBinding; // Weak, but we're holding a ref to the docinfo
    1:   nsCOMPtr<nsIContent> mContent; // Strong. Our anonymous content stays around with us.
    1:   nsRefPtr<nsXBLBinding> mNextBinding; // Strong. The derived binding owns the base class bindings.
    1:   
    1:   nsIContent* mBoundElement; // [WEAK] We have a reference, but we don't own it.
    1:   
    1:   // A hash from nsIContent* -> (a sorted array of nsXBLInsertionPoint)
    1:   nsClassHashtable<nsISupportsHashKey, nsInsertionPointList>* mInsertionPointTable;
    1: 
    1:   PRPackedBool mIsStyleBinding;
    1:   PRPackedBool mMarkedForDeath;
    1: };
    1: 
    1: #endif // nsXBLBinding_h_
