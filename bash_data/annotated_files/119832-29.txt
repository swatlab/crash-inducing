  5210: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef _NS_NSSCERTIFICATE_H_
     1: #define _NS_NSSCERTIFICATE_H_
     1: 
     1: #include "nsIX509Cert.h"
     1: #include "nsIX509Cert2.h"
     1: #include "nsIX509Cert3.h"
     1: #include "nsIX509CertDB.h"
     1: #include "nsIX509CertList.h"
     1: #include "nsIASN1Object.h"
     1: #include "nsISMimeCert.h"
  7105: #include "nsIIdentityInfo.h"
     1: #include "nsNSSShutDown.h"
     1: #include "nsISimpleEnumerator.h"
  5210: #include "nsISerializable.h"
  5210: #include "nsIClassInfo.h"
     1: 
     1: #include "nsNSSCertHeader.h"
     1: 
     1: class nsINSSComponent;
     1: class nsIASN1Sequence;
     1: 
     1: /* Certificate */
  6597: class nsNSSCertificate : public nsIX509Cert3,
  7105:                          public nsIIdentityInfo,
     1:                          public nsISMimeCert,
  5210:                          public nsISerializable,
  5210:                          public nsIClassInfo,
     1:                          public nsNSSShutDownObject
     1: {
     1: public:
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSIX509CERT
     1:   NS_DECL_NSIX509CERT2
     1:   NS_DECL_NSIX509CERT3
  7105:   NS_DECL_NSIIDENTITYINFO
     1:   NS_DECL_NSISMIMECERT
  5210:   NS_DECL_NSISERIALIZABLE
  5210:   NS_DECL_NSICLASSINFO
     1: 
     1:   nsNSSCertificate(CERTCertificate *cert);
  5210:   nsNSSCertificate();
     1:   /* from a request? */
     1:   virtual ~nsNSSCertificate();
     1:   nsresult FormatUIStrings(const nsAutoString &nickname, nsAutoString &nickWithSerial, nsAutoString &details);
106838:   static nsNSSCertificate* Create(CERTCertificate *cert = nullptr);
     1:   static nsNSSCertificate* ConstructFromDER(char *certDER, int derLen);
     1: 
 64032:   // It is the responsibility of the caller of this method to free the returned
 64032:   // string using PR_Free.
     1:   static char* defaultServerNickname(CERTCertificate* cert);
     1: 
     1: private:
     1:   CERTCertificate *mCert;
 79445:   bool             mPermDelete;
108991:   uint32_t         mCertType;
     1:   nsCOMPtr<nsIASN1Object> mASN1Structure;
     1:   nsresult CreateASN1Struct();
     1:   nsresult CreateTBSCertificateASN1Struct(nsIASN1Sequence **retSequence,
     1:                                           nsINSSComponent *nssComponent);
     1:   nsresult GetSortableDate(PRTime aTime, nsAString &_aSortableDate);
     1:   virtual void virtualDestroyNSSReference();
     1:   void destructorSafeDestroyNSSReference();
 79445:   bool InitFromDER(char* certDER, int derLen);  // return false on failure
 10258: 
 10258:   enum { 
 10258:     ev_status_unknown = -1, ev_status_invalid = 0, ev_status_valid = 1
 10258:   } mCachedEVStatus;
 10258:   SECOidTag mCachedEVOidTag;
 79445:   nsresult hasValidEVOidTag(SECOidTag &resultOidTag, bool &validEV);
 79445:   nsresult getValidEVOidTag(SECOidTag &resultOidTag, bool &validEV);
     1: };
     1: 
     1: class nsNSSCertList: public nsIX509CertList
     1: {
     1: public:
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSIX509CERTLIST
     1: 
106838:   nsNSSCertList(CERTCertList *certList = nullptr, bool adopt = false);
     1:   virtual ~nsNSSCertList();
     1: 
     1:   static CERTCertList *DupCertList(CERTCertList *aCertList);
     1: private:
     1:   CERTCertList *mCertList;
     1: };
     1: 
     1: class nsNSSCertListEnumerator: public nsISimpleEnumerator
     1: {
     1: public:
     1:    NS_DECL_ISUPPORTS
     1:    NS_DECL_NSISIMPLEENUMERATOR
     1: 
     1:    nsNSSCertListEnumerator(CERTCertList *certList);
     1:    virtual ~nsNSSCertListEnumerator();
     1: private:
     1:    CERTCertList *mCertList;
     1: };
     1: 
     1: 
     1: #define NS_NSS_LONG 4
     1: #define NS_NSS_GET_LONG(x) ((((unsigned long)((x)[0])) << 24) | \
     1:                             (((unsigned long)((x)[1])) << 16) | \
     1:                             (((unsigned long)((x)[2])) <<  8) | \
     1:                              ((unsigned long)((x)[3])) )
     1: #define NS_NSS_PUT_LONG(src,dest) (dest)[0] = (((src) >> 24) & 0xff); \
     1:                                   (dest)[1] = (((src) >> 16) & 0xff); \
     1:                                   (dest)[2] = (((src) >>  8) & 0xff); \
     1:                                   (dest)[3] = ((src) & 0xff); 
     1: 
  5210: #define NS_X509CERT_CID { /* 660a3226-915c-4ffb-bb20-8985a632df05 */   \
  5210:     0x660a3226,                                                        \
  5210:     0x915c,                                                            \
  5210:     0x4ffb,                                                            \
  5210:     { 0xbb, 0x20, 0x89, 0x85, 0xa6, 0x32, 0xdf, 0x05 }                 \
  5210:   }
     1: 
     1: #endif /* _NS_NSSCERTIFICATE_H_ */
