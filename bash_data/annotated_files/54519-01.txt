    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla browser.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
41336:  *   Eric Vaughan <evaughan@netscape.com> (original author)
41336:  *   Alexander Surkov <surkov.alexander@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
41336: #ifndef _nsIAccessibilityService_h_
41336: #define _nsIAccessibilityService_h_
    1: 
41336: #include "nsIAccessibleRetrieval.h"
42313: #include "nsIAccessibleEvent.h"
    1: 
46338: #include "nsAutoPtr.h"
46338: 
42313: class nsAccessible;
46338: class nsINode;
42313: class nsIContent;
41336: class nsIDocument;
41336: class nsIFrame;
42313: class nsIPresShell;
41336: class nsObjectFrame;
41336: 
43765: // 10ff6dca-b219-4b64-9a4c-67a62b86edce
41336: #define NS_IACCESSIBILITYSERVICE_IID \
43765: { 0x10ff6dca, 0xb219, 0x4b64, \
43765:  { 0x9a, 0x4c, 0x67, 0xa6, 0x2b, 0x86, 0xed, 0xce } }
41336: 
41336: class nsIAccessibilityService : public nsIAccessibleRetrieval
    1: {
41336: public:
41336:   NS_DECLARE_STATIC_IID_ACCESSOR(NS_IACCESSIBILITYSERVICE_IID)
    1: 
41336:   /**
42313:    * Return an accessible object for a DOM node in the given pres shell.
42313:    *
42313:    * @param  aNode      [in] the DOM node to get an accessible for
42313:    * @param  aPresShell [in] the presentation shell which contains layout info
42313:    *                         for the DOM node
42313:    */
46338:   virtual nsAccessible* GetAccessibleInShell(nsINode* aNode,
42313:                                              nsIPresShell* aPresShell) = 0;
42313: 
42313:   /**
54519:    * Return root document accessible that is or contains a document accessible
54519:    * for the given presshell.
54519:    *
54519:    * @param aPresShell  [in] the presshell
54519:    * @param aCanCreate  [in] points whether the root document accessible
54519:    *                        should be returned from the cache or can be created
54519:    */
54519:   virtual nsAccessible* GetRootDocumentAccessible(nsIPresShell* aPresShell,
54519:                                                   PRBool aCanCreate) = 0;
54519: 
54519:   /**
41336:    * Creates accessible for the given DOM node or frame.
41336:    */
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLBRAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTML4ButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLCaptionAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLCheckboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLComboboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLGroupboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLHRAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLImageAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLLabelAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLLIAccessible(nsIContent* aContent, nsIPresShell* aPresShell,
46338:                            const nsAString& aBulletText) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLListboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLMediaAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLObjectFrameAccessible(nsObjectFrame* aFrame, nsIContent* aContent,
46338:                                     nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLRadioButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTableAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTableCellAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTextAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTextFieldAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHyperTextAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateOuterDocAccessible(nsIContent* aContent, nsIPresShell* aPresShell) = 0;
41336: 
41336:   /**
41336:    * Adds/remove ATK root accessible for gtk+ native window to/from children
41336:    * of the application accessible.
41336:    */
46207:   virtual nsAccessible* AddNativeRootAccessible(void* aAtkAccessible) = 0;
46207:   virtual void RemoveNativeRootAccessible(nsAccessible* aRootAccessible) = 0;
    1: 
    1:   /**
32336:    * Used to describe sort of changes leading to accessible tree invalidation.
    1:    */
41336:   enum {
41336:     NODE_APPEND = 0x01,
41336:     NODE_REMOVE = 0x02,
41336:     NODE_SIGNIFICANT_CHANGE = 0x03,
41336:     FRAME_SHOW = 0x04,
41336:     FRAME_HIDE = 0x05,
41336:     FRAME_SIGNIFICANT_CHANGE = 0x06
41336:   };
32336: 
32336:   /**
32336:    * Invalidate the accessible tree when DOM tree or frame tree is changed.
32336:    *
42263:    * @param aPresShell   [in] the presShell where changes occurred
32336:    * @param aContent     [in] the affected DOM content
32336:    * @param aChangeType  [in] the change type (see constants declared above)
32336:    */
41336:   virtual nsresult InvalidateSubtreeFor(nsIPresShell *aPresShell,
41336:                                         nsIContent *aContent,
41336:                                         PRUint32 aChangeType) = 0;
12240: 
12240:   /**
34455:    * Notify accessibility that anchor jump has been accomplished to the given
34455:    * target. Used by layout.
34455:    */
41476:   virtual void NotifyOfAnchorJumpTo(nsIContent *aTarget) = 0;
34455: 
34455:   /**
43765:    * Notify the accessibility service that the given presshell is
43765:    * being destroyed.
43765:    */
43765:   virtual void PresShellDestroyed(nsIPresShell *aPresShell) = 0;
43765: 
43765:   /**
21255:    * Fire accessible event of the given type for the given target.
21255:    *
21255:    * @param aEvent   [in] accessible event type
21255:    * @param aTarget  [in] target of accessible event
21255:    */
54519:   virtual void FireAccessibleEvent(PRUint32 aEvent, nsAccessible* aTarget) = 0;
    1: };
    1: 
41336: NS_DEFINE_STATIC_IID_ACCESSOR(nsIAccessibilityService,
41336:                               NS_IACCESSIBILITYSERVICE_IID)
    1: 
    1: // for component registration
    1: // {DE401C37-9A7F-4278-A6F8-3DE2833989EF}
    1: #define NS_ACCESSIBILITY_SERVICE_CID \
    1: { 0xde401c37, 0x9a7f, 0x4278, { 0xa6, 0xf8, 0x3d, 0xe2, 0x83, 0x39, 0x89, 0xef } }
    1: 
    1: extern nsresult
    1: NS_GetAccessibilityService(nsIAccessibilityService** aResult);
    1: 
41336: #endif
