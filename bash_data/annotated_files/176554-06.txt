129708: # This Source Code Form is subject to the terms of the Mozilla Public
129708: # License, v. 2.0. If a copy of the MPL was not distributed with this
129708: # file, You can obtain one at http://mozilla.org/MPL/2.0/.
129708: 
129708: from __future__ import unicode_literals
129708: 
129708: import os
129708: import unittest
129708: 
130924: from mozunit import main
130924: 
130928: from mozbuild.frontend.data import (
130928:     ConfigFileSubstitution,
168743:     Defines,
130928:     DirectoryTraversal,
139977:     Exports,
166712:     GeneratedInclude,
150550:     IPDLFile,
159584:     LocalInclude,
168743:     Program,
168743:     ReaderSummary,
168743:     SimpleProgram,
163244:     TestManifest,
168743:     VariablePassthru,
130928: )
129708: from mozbuild.frontend.emitter import TreeMetadataEmitter
163244: from mozbuild.frontend.reader import (
163244:     BuildReader,
163244:     SandboxValidationError,
163244: )
129708: 
129708: from mozbuild.test.common import MockConfig
129708: 
129708: 
129708: data_path = os.path.abspath(os.path.dirname(__file__))
129708: data_path = os.path.join(data_path, 'data')
129708: 
129708: 
129708: class TestEmitterBasic(unittest.TestCase):
129708:     def reader(self, name):
157559:         config = MockConfig(os.path.join(data_path, name), extra_substs=dict(
157559:             ENABLE_TESTS='1',
157559:             BIN_SUFFIX='.prog',
157559:         ))
129708: 
129708:         return BuildReader(config)
129708: 
134922:     def read_topsrcdir(self, reader):
129708:         emitter = TreeMetadataEmitter(reader.config)
169808:         def ack(obj):
169808:             obj.ack()
169808:             return obj
129708: 
169808:         objs = list(ack(o) for o in emitter.emit(reader.read_topsrcdir()))
134922:         self.assertGreater(len(objs), 0)
134922:         self.assertIsInstance(objs[-1], ReaderSummary)
129708: 
134922:         return objs[:-1]
134922: 
134922:     def test_dirs_traversal_simple(self):
134922:         reader = self.reader('traversal-simple')
134922:         objs = self.read_topsrcdir(reader)
129708:         self.assertEqual(len(objs), 4)
129708: 
129708:         for o in objs:
129708:             self.assertIsInstance(o, DirectoryTraversal)
129708:             self.assertEqual(o.parallel_dirs, [])
129708:             self.assertEqual(o.tool_dirs, [])
129708:             self.assertEqual(o.test_dirs, [])
129708:             self.assertEqual(o.test_tool_dirs, [])
129708:             self.assertEqual(len(o.tier_dirs), 0)
129708:             self.assertEqual(len(o.tier_static_dirs), 0)
130925:             self.assertTrue(os.path.isabs(o.sandbox_main_path))
130925:             self.assertEqual(len(o.sandbox_all_paths), 1)
129708: 
129708:         reldirs = [o.relativedir for o in objs]
129708:         self.assertEqual(reldirs, ['', 'foo', 'foo/biz', 'bar'])
129708: 
129708:         dirs = [o.dirs for o in objs]
129708:         self.assertEqual(dirs, [['foo', 'bar'], ['biz'], [], []])
129708: 
129708:     def test_traversal_all_vars(self):
129708:         reader = self.reader('traversal-all-vars')
134922:         objs = self.read_topsrcdir(reader)
129708:         self.assertEqual(len(objs), 6)
129708: 
129708:         for o in objs:
129708:             self.assertIsInstance(o, DirectoryTraversal)
129708: 
129708:         reldirs = set([o.relativedir for o in objs])
129708:         self.assertEqual(reldirs, set(['', 'parallel', 'regular', 'test',
129708:             'test_tool', 'tool']))
129708: 
129708:         for o in objs:
129708:             reldir = o.relativedir
129708: 
129708:             if reldir == '':
129708:                 self.assertEqual(o.dirs, ['regular'])
129708:                 self.assertEqual(o.parallel_dirs, ['parallel'])
129708:                 self.assertEqual(o.test_dirs, ['test'])
129708:                 self.assertEqual(o.test_tool_dirs, ['test_tool'])
129708:                 self.assertEqual(o.tool_dirs, ['tool'])
130926:                 self.assertEqual(o.external_make_dirs, ['external_make'])
130926:                 self.assertEqual(o.parallel_external_make_dirs,
130926:                     ['parallel_external_make'])
129708: 
129708:     def test_tier_simple(self):
129708:         reader = self.reader('traversal-tier-simple')
134922:         objs = self.read_topsrcdir(reader)
132952:         self.assertEqual(len(objs), 4)
129708: 
129708:         reldirs = [o.relativedir for o in objs]
132952:         self.assertEqual(reldirs, ['', 'foo', 'foo/biz', 'bar'])
129708: 
130928:     def test_config_file_substitution(self):
130928:         reader = self.reader('config-file-substitution')
134922:         objs = self.read_topsrcdir(reader)
130928:         self.assertEqual(len(objs), 3)
130928: 
130928:         self.assertIsInstance(objs[0], DirectoryTraversal)
130928:         self.assertIsInstance(objs[1], ConfigFileSubstitution)
130928:         self.assertIsInstance(objs[2], ConfigFileSubstitution)
130928: 
130930:         topobjdir = os.path.abspath(reader.config.topobjdir)
134431:         self.assertEqual(objs[1].relpath, 'foo')
130929:         self.assertEqual(os.path.normpath(objs[1].output_path),
130928:             os.path.normpath(os.path.join(topobjdir, 'foo')))
130929:         self.assertEqual(os.path.normpath(objs[2].output_path),
130928:             os.path.normpath(os.path.join(topobjdir, 'bar')))
130928: 
135843:     def test_variable_passthru(self):
135843:         reader = self.reader('variable-passthru')
135843:         objs = self.read_topsrcdir(reader)
135843: 
135843:         self.assertEqual(len(objs), 2)
135843:         self.assertIsInstance(objs[0], DirectoryTraversal)
135843:         self.assertIsInstance(objs[1], VariablePassthru)
135843: 
144360:         wanted = dict(
144534:             ASFILES=['fans.asm', 'tans.s'],
146489:             CMMSRCS=['fans.mm', 'tans.mm'],
145160:             CSRCS=['fans.c', 'tans.c'],
152816:             CPP_UNIT_TESTS=['foo.cpp'],
159092:             EXPORT_LIBRARY=True,
146594:             EXTRA_COMPONENTS=['fans.js', 'tans.js'],
147184:             EXTRA_PP_COMPONENTS=['fans.pp.js', 'tans.pp.js'],
154109:             EXTRA_JS_MODULES=['bar.jsm', 'foo.jsm'],
154109:             EXTRA_PP_JS_MODULES=['bar.pp.jsm', 'foo.pp.jsm'],
157586:             FAIL_ON_WARNINGS=True,
159092:             FORCE_SHARED_LIB=True,
150483:             HOST_CPPSRCS=['fans.cpp', 'tans.cpp'],
146649:             HOST_CSRCS=['fans.c', 'tans.c'],
146778:             HOST_LIBRARY_NAME='host_fans',
159092:             IS_COMPONENT=True,
147464:             LIBS=['fans.lib', 'tans.lib'],
157591:             LIBXUL_LIBRARY=True,
157599:             MSVC_ENABLE_PGO=True,
157605:             NO_DIST_INSTALL=True,
160549:             OS_LIBS=['foo.so', '-l123', 'aaa.a'],
147832:             SDK_LIBRARY=['fans.sdk', 'tans.sdk'],
166801:             SSRCS=['bans.S', 'fans.S'],
168055:             VISIBILITY_FLAGS='',
144360:         )
144360: 
135843:         variables = objs[1].variables
166802:         maxDiff = self.maxDiff
166802:         self.maxDiff = None
166802:         self.assertEqual(wanted, variables)
166802:         self.maxDiff = maxDiff
135843: 
139977:     def test_exports(self):
139977:         reader = self.reader('exports')
139977:         objs = self.read_topsrcdir(reader)
139977: 
139977:         self.assertEqual(len(objs), 2)
139977:         self.assertIsInstance(objs[0], DirectoryTraversal)
139977:         self.assertIsInstance(objs[1], Exports)
139977: 
139977:         exports = objs[1].exports
139977:         self.assertEqual(exports.get_strings(), ['foo.h', 'bar.h', 'baz.h'])
139977: 
139977:         self.assertIn('mozilla', exports._children)
139977:         mozilla = exports._children['mozilla']
139977:         self.assertEqual(mozilla.get_strings(), ['mozilla1.h', 'mozilla2.h'])
139977: 
139977:         self.assertIn('dom', mozilla._children)
139977:         dom = mozilla._children['dom']
139977:         self.assertEqual(dom.get_strings(), ['dom1.h', 'dom2.h', 'dom3.h'])
139977: 
139977:         self.assertIn('gfx', mozilla._children)
139977:         gfx = mozilla._children['gfx']
139977:         self.assertEqual(gfx.get_strings(), ['gfx.h'])
139977: 
139977:         self.assertIn('vpx', exports._children)
139977:         vpx = exports._children['vpx']
139977:         self.assertEqual(vpx.get_strings(), ['mem.h', 'mem2.h'])
139977: 
139977:         self.assertIn('nspr', exports._children)
139977:         nspr = exports._children['nspr']
139977:         self.assertIn('private', nspr._children)
139977:         private = nspr._children['private']
139977:         self.assertEqual(private.get_strings(), ['pprio.h', 'pprthred.h'])
139977: 
139977:         self.assertIn('overwrite', exports._children)
139977:         overwrite = exports._children['overwrite']
139977:         self.assertEqual(overwrite.get_strings(), ['new.h'])
130924: 
143209:     def test_program(self):
143209:         reader = self.reader('program')
143209:         objs = self.read_topsrcdir(reader)
143209: 
168743:         self.assertEqual(len(objs), 4)
143209:         self.assertIsInstance(objs[0], DirectoryTraversal)
143209:         self.assertIsInstance(objs[1], Program)
168743:         self.assertIsInstance(objs[2], SimpleProgram)
168743:         self.assertIsInstance(objs[3], SimpleProgram)
143209: 
168743:         self.assertEqual(objs[1].program, 'test_program.prog')
168743:         self.assertEqual(objs[2].program, 'test_program1.prog')
168743:         self.assertEqual(objs[3].program, 'test_program2.prog')
143209: 
163244:     def test_test_manifest_missing_manifest(self):
163244:         """A missing manifest file should result in an error."""
163244:         reader = self.reader('test-manifest-missing-manifest')
142045: 
163244:         with self.assertRaisesRegexp(SandboxValidationError, 'IOError: Missing files'):
163244:             self.read_topsrcdir(reader)
163244: 
163244:     def test_empty_test_manifest_rejected(self):
163244:         """A test manifest without any entries is rejected."""
163244:         reader = self.reader('test-manifest-empty')
163244: 
163244:         with self.assertRaisesRegexp(SandboxValidationError, 'Empty test manifest'):
163244:             self.read_topsrcdir(reader)
163244: 
163244:     def test_test_manifest_keys_extracted(self):
163244:         """Ensure all metadata from test manifests is extracted."""
163244:         reader = self.reader('test-manifest-keys-extracted')
163244: 
163244:         objs = [o for o in self.read_topsrcdir(reader)
163244:                 if isinstance(o, TestManifest)]
163244: 
164945:         self.assertEqual(len(objs), 6)
163244: 
163244:         metadata = {
163244:             'a11y.ini': {
163244:                 'flavor': 'a11y',
163244:                 'installs': {
172472:                     'a11y.ini',
172472:                     'test_a11y.js',
176554:                     # From ** wildcard.
176554:                     'a11y-support/foo',
176554:                     'a11y-support/dir1/bar',
163244:                 },
163244:             },
163244:             'browser.ini': {
163244:                 'flavor': 'browser-chrome',
163244:                 'installs': {
172472:                     'browser.ini',
172472:                     'test_browser.js',
172472:                     'support1',
172472:                     'support2',
163244:                 },
163244:             },
164945:             'metro.ini': {
164945:                 'flavor': 'metro-chrome',
164945:                 'installs': {
172472:                     'metro.ini',
172472:                     'test_metro.js',
164945:                 },
164945:             },
163244:             'mochitest.ini': {
163244:                 'flavor': 'mochitest',
163244:                 'installs': {
172472:                     'mochitest.ini',
172472:                     'test_mochitest.js',
163244:                 },
163244:                 'external': {
163244:                     'external1',
163244:                     'external2',
163244:                 },
163244:             },
163244:             'chrome.ini': {
163244:                 'flavor': 'chrome',
163244:                 'installs': {
172472:                     'chrome.ini',
172472:                     'test_chrome.js',
163244:                 },
163244:             },
163244:             'xpcshell.ini': {
163244:                 'flavor': 'xpcshell',
163244:                 'dupe': True,
163244:                 'installs': {
172472:                     'xpcshell.ini',
172472:                     'test_xpcshell.js',
172472:                     'head1',
172472:                     'head2',
172472:                     'tail1',
172472:                     'tail2',
163244:                 },
163244:             },
163244:         }
163244: 
142045:         for o in objs:
163244:             m = metadata[os.path.basename(o.manifest_relpath)]
142045: 
163244:             self.assertTrue(o.path.startswith(o.directory))
163244:             self.assertEqual(o.flavor, m['flavor'])
163244:             self.assertEqual(o.dupe_manifest, m.get('dupe', False))
142045: 
163244:             external_normalized = set(os.path.basename(p) for p in
163244:                     o.external_installs)
163244:             self.assertEqual(external_normalized, m.get('external', set()))
163244: 
163244:             self.assertEqual(len(o.installs), len(m['installs']))
163244:             for path in o.installs.keys():
163244:                 self.assertTrue(path.startswith(o.directory))
172472:                 path = path[len(o.directory)+1:]
163244: 
172472:                 self.assertIn(path, m['installs'])
163244: 
163244:     def test_test_manifest_unmatched_generated(self):
163244:         reader = self.reader('test-manifest-unmatched-generated')
163244: 
163244:         with self.assertRaisesRegexp(SandboxValidationError,
163244:             'entry in generated-files not present elsewhere'):
163244:             self.read_topsrcdir(reader),
142045: 
164222:     # This test is only needed until all harnesses support filtering from
164222:     # manifests.
164222:     def test_test_manifest_inactive_ignored(self):
164222:         """Inactive tests should not be installed."""
164222:         reader = self.reader('test-manifest-inactive-ignored')
164222: 
164222:         objs = [o for o in self.read_topsrcdir(reader)
164222:                if isinstance(o, TestManifest)]
164222: 
164222:         self.assertEqual(len(objs), 1)
164222: 
164222:         o = objs[0]
164222: 
164222:         self.assertEqual(o.flavor, 'mochitest')
164222:         basenames = set(os.path.basename(k) for k in o.installs.keys())
164222:         self.assertEqual(basenames, {'mochitest.ini', 'test_active.html'})
164222: 
150550:     def test_ipdl_sources(self):
150550:         reader = self.reader('ipdl_sources')
150550:         objs = self.read_topsrcdir(reader)
150550: 
150550:         ipdls = []
150550:         for o in objs:
150550:             if isinstance(o, IPDLFile):
150550:                 ipdls.append('%s/%s' % (o.relativedir, o.basename))
150550: 
150550:         expected = [
150550:             'bar/bar.ipdl',
150550:             'bar/bar2.ipdlh',
150550:             'foo/foo.ipdl',
150550:             'foo/foo2.ipdlh',
150550:         ]
150550: 
150550:         self.assertEqual(ipdls, expected)
150550: 
159584:     def test_local_includes(self):
159584:         """Test that LOCAL_INCLUDES is emitted correctly."""
159584:         reader = self.reader('local_includes')
159584:         objs = self.read_topsrcdir(reader)
159584: 
159584:         local_includes = [o.path for o in objs if isinstance(o, LocalInclude)]
159584:         expected = [
159584:             '/bar/baz',
159584:             'foo',
159584:         ]
159584: 
159584:         self.assertEqual(local_includes, expected)
159584: 
166712:     def test_generated_includes(self):
166712:         """Test that GENERATED_INCLUDES is emitted correctly."""
166712:         reader = self.reader('generated_includes')
166712:         objs = self.read_topsrcdir(reader)
166712: 
166712:         generated_includes = [o.path for o in objs if isinstance(o, GeneratedInclude)]
166712:         expected = [
166712:             '/bar/baz',
166712:             'foo',
166712:         ]
166712: 
166712:         self.assertEqual(generated_includes, expected)
166712: 
162726:     def test_defines(self):
162726:         reader = self.reader('defines')
162726:         objs = self.read_topsrcdir(reader)
162726: 
162726:         defines = {}
162726:         for o in objs:
162726:             if isinstance(o, Defines):
162726:                 defines = o.defines
162726: 
162726:         expected = {
162726:             'BAR': 7,
162726:             'BAZ': '"abcd"',
162726:             'FOO': True,
162726:             'VALUE': 'xyz',
162726:         }
162726: 
162726:         self.assertEqual(defines, expected)
162726: 
130924: if __name__ == '__main__':
130924:     main()
