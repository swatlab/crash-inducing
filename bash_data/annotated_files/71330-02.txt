30266: /* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4 -*- */
30266: /* vi: set ts=4 sw=4 expandtab: (add to ~/.vimrc: set modeline modelines=5) */
17267: /* ***** BEGIN LICENSE BLOCK *****
17267:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
17267:  *
17267:  * The contents of this file are subject to the Mozilla Public License Version 1.1 (the
17267:  * "License"); you may not use this file except in compliance with the License. You may obtain
17267:  * a copy of the License at http://www.mozilla.org/MPL/
17267:  *
17267:  * Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
17267:  * WARRANTY OF ANY KIND, either express or implied. See the License for the specific
17267:  * language governing rights and limitations under the License.
17267:  *
17267:  * The Original Code is [Open Source Virtual Machine.]
17267:  *
17267:  * The Initial Developer of the Original Code is Adobe System Incorporated.  Portions created
17267:  * by the Initial Developer are Copyright (C)[ 2004-2006 ] Adobe Systems Incorporated. All Rights
17267:  * Reserved.
17267:  *
17267:  * Contributor(s): Adobe AS3 Team
17339:  *                 Andreas Gal <gal@mozilla.com>
18720:  *                 Asko Tontti <atontti@cc.hut.fi>
17267:  *
17267:  * Alternatively, the contents of this file may be used under the terms of either the GNU
17267:  * General Public License Version 2 or later (the "GPL"), or the GNU Lesser General Public
17267:  * License Version 2.1 or later (the "LGPL"), in which case the provisions of the GPL or the
17267:  * LGPL are applicable instead of those above. If you wish to allow use of your version of this
17267:  * file only under the terms of either the GPL or the LGPL, and not to allow others to use your
17267:  * version of this file under the terms of the MPL, indicate your decision by deleting provisions
17267:  * above and replace them with the notice and other provisions required by the GPL or the
17267:  * LGPL. If you do not delete the provisions above, a recipient may use your version of this file
17267:  * under the terms of any one of the MPL, the GPL or the LGPL.
17267:  *
17267:  ***** END LICENSE BLOCK ***** */
17267: 
17267: #ifndef avm_h___
17267: #define avm_h___
17267: 
33601: #include "VMPI.h"
38589: #include "njcpudetect.h"
38581: #include "njconfig.h"
17267: 
25109: #if !defined(AVMPLUS_LITTLE_ENDIAN) && !defined(AVMPLUS_BIG_ENDIAN)
25109: #ifdef IS_BIG_ENDIAN
25109: #define AVMPLUS_BIG_ENDIAN
25109: #else
25109: #define AVMPLUS_LITTLE_ENDIAN
25109: #endif
25109: #endif
25109: 
33136: #if defined(_MSC_VER) && defined(_M_IX86)
33136: #define FASTCALL __fastcall
33136: #elif defined(__GNUC__) && defined(__i386__) &&                 \
33136:     ((__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
33136: #define FASTCALL __attribute__((fastcall))
33136: #else
33136: #define FASTCALL
33136: #define NO_FASTCALL
33136: #endif
18024: 
33136: #if defined(NO_FASTCALL)
18723: #if defined(AVMPLUS_IA32)
18723: #define SIMULATE_FASTCALL(lr, state_ptr, frag_ptr, func_addr)   \
18723:     asm volatile(                                               \
18723:         "call *%%esi"                                           \
18723:         : "=a" (lr)                                             \
18723:         : "c" (state_ptr), "d" (frag_ptr), "S" (func_addr)      \
18723:         : "memory", "cc"                                        \
18723:     );
18723: #endif /* defined(AVMPLUS_IA32) */
33136: #endif /* defined(NO_FASTCALL) */
18723: 
18722: #ifdef WIN32
17585: #include <windows.h>
31783: #elif defined(AVMPLUS_OS2)
31783: #define INCL_DOSMEMMGR
31783: #include <os2.h>
17269: #endif
17269: 
41819: #if defined(__SUNPRO_CC)
41819: #define __asm__ asm
41819: #define __volatile__ volatile
41819: #define __inline__ inline
41819: #endif
41819: 
64181: #if defined(DEBUG)
17884: #if !defined _DEBUG
17276: #define _DEBUG
17884: #endif
19658: #define NJ_VERBOSE 1
17276: #include <stdarg.h>
17276: #endif
17275: 
18679: #ifdef _DEBUG
41085: namespace avmplus {
41085:     void AvmAssertFail(const char* msg);
41085: }
18679: #endif
18679: 
34353: #if defined(AVMPLUS_IA32)
34353: #if defined(_MSC_VER)
40384: 
40384: # define AVMPLUS_HAS_RDTSC 1
40384: 
34353: __declspec(naked) static inline __int64 rdtsc()
17884: {
34353:     __asm
34353:     {
34353:         rdtsc;
34353:         ret;
17884:     }
34353: }
40384: 
41819: #elif defined(__i386__) || defined(__i386)
40384: 
40384: # define AVMPLUS_HAS_RDTSC 1
40384: 
17376: static __inline__ unsigned long long rdtsc(void)
17376: {
17376:   unsigned long long int x;
17376:   __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
17376:   return x;
17376: }
40384: 
19058: #endif /* compilers */
19058: 
17376: #elif defined(__x86_64__)
17376: 
40384: # define AVMPLUS_HAS_RDTSC 1
40384: 
18229: static __inline__ uint64_t rdtsc(void)
17376: {
17376:   unsigned hi, lo;
17376:   __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
18229:   return ( (uint64_t)lo)|( ((uint64_t)hi)<<32 );
17376: }
17376: 
34353: #elif defined(_MSC_VER) && defined(_M_AMD64)
34353: 
40384: # define AVMPLUS_HAS_RDTSC 1
40384: 
34353: #include <intrin.h>
34353: #pragma intrinsic(__rdtsc)
34353: 
34353: static inline unsigned __int64 rdtsc(void)
34353: {
34353:     return __rdtsc();
34353: }
34353: 
64352: #elif defined(__GNUC__) && defined(__powerpc__)
17376: 
40384: # define AVMPLUS_HAS_RDTSC 1
40384: 
17376: typedef unsigned long long int unsigned long long;
17376: 
17376: static __inline__ unsigned long long rdtsc(void)
17376: {
17376:   unsigned long long int result=0;
17376:   unsigned long int upper, lower,tmp;
17376:   __asm__ volatile(
17376:                 "0:                  \n"
17376:                 "\tmftbu   %0           \n"
17376:                 "\tmftb    %1           \n"
17376:                 "\tmftbu   %2           \n"
17376:                 "\tcmpw    %2,%0        \n"
17376:                 "\tbne     0b         \n"
17376:                 : "=r"(upper),"=r"(lower),"=r"(tmp)
17376:                 );
17376:   result = upper;
17376:   result = result<<32;
17376:   result = result|lower;
17376: 
17376:   return(result);
17376: }
17376: 
19058: #endif /* architecture */
17376: 
40384: #ifndef AVMPLUS_HAS_RDTSC
40384: # define AVMPLUS_HAS_RDTSC 0
40384: #endif
40384: 
33125: #ifdef PERFM
33125: # define PERFM_NVPROF(n,v) _nvprof(n,v)
33125: # define PERFM_NTPROF(n) _ntprof(n)
33125: # define PERFM_TPROF_END() _tprof_end()
33125: #else
33125: # define PERFM_NVPROF(n,v)
33125: # define PERFM_NTPROF(n)
33125: # define PERFM_TPROF_END()
33125: #endif
33125: 
30446: namespace avmplus {
30446: 
31475:     extern void AvmLog(char const *msg, ...);
31475: 
17268: }
17268: 
17268: #endif
