    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
54346: 
54346: #include "nsHTMLFieldSetElement.h"
    1: #include "nsIDOMHTMLFormElement.h"
 1418: #include "nsIDOMEventTarget.h"
    1: #include "nsStyleConsts.h"
    1: #include "nsIForm.h"
    1: #include "nsIFormControl.h"
54341: #include "nsEventDispatcher.h"
    1: 
    1: 
    1: NS_IMPL_NS_NEW_HTML_ELEMENT(FieldSet)
    1: 
    1: 
48124: nsHTMLFieldSetElement::nsHTMLFieldSetElement(already_AddRefed<nsINodeInfo> aNodeInfo)
    1:   : nsGenericHTMLFormElement(aNodeInfo)
54342:   , mElements(nsnull)
54346:   , mFirstLegend(nsnull)
    1: {
52361:   // <fieldset> is always barred from constraint validation.
52361:   SetBarredFromConstraintValidation(PR_TRUE);
    1: }
    1: 
    1: nsHTMLFieldSetElement::~nsHTMLFieldSetElement()
    1: {
56935:   PRUint32 length = mDependentElements.Length();
56935:   for (PRUint32 i=0; i<length; ++i) {
56935:     mDependentElements[i]->ForgetFieldSet(this);
56935:   }
    1: }
    1: 
    1: // nsISupports
    1: 
53885: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsHTMLFieldSetElement)
53885:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mElements)
53885: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
53885: 
53885: NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLFieldSetElement)
53885: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLFieldSetElement,
53885:                                                   nsGenericHTMLFormElement)
53885:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR_AMBIGUOUS(mElements, nsIDOMNodeList)
53885: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
53885: 
    1: NS_IMPL_ADDREF_INHERITED(nsHTMLFieldSetElement, nsGenericElement)
    1: NS_IMPL_RELEASE_INHERITED(nsHTMLFieldSetElement, nsGenericElement)
    1: 
48124: DOMCI_NODE_DATA(HTMLFieldSetElement, nsHTMLFieldSetElement)
40490: 
    1: // QueryInterface implementation for nsHTMLFieldSetElement
21218: NS_INTERFACE_TABLE_HEAD(nsHTMLFieldSetElement)
51181:   NS_HTML_CONTENT_INTERFACE_TABLE2(nsHTMLFieldSetElement,
51181:                                    nsIDOMHTMLFieldSetElement,
51182:                                    nsIConstraintValidation)
21218:   NS_HTML_CONTENT_INTERFACE_TABLE_TO_MAP_SEGUE(nsHTMLFieldSetElement,
    1:                                                nsGenericHTMLFormElement)
 4838: NS_HTML_CONTENT_INTERFACE_TABLE_TAIL_CLASSINFO(HTMLFieldSetElement)
    1: 
53883: NS_IMPL_ELEMENT_CLONE(nsHTMLFieldSetElement)
    1: 
53883: 
54341: NS_IMPL_BOOL_ATTR(nsHTMLFieldSetElement, Disabled, disabled)
53883: NS_IMPL_STRING_ATTR(nsHTMLFieldSetElement, Name, name)
    1: 
51182: // nsIConstraintValidation
51182: NS_IMPL_NSICONSTRAINTVALIDATION(nsHTMLFieldSetElement)
    1: 
54341: // nsIContent
54341: nsresult
54341: nsHTMLFieldSetElement::PreHandleEvent(nsEventChainPreVisitor& aVisitor)
54341: {
54341:   // Do not process any DOM events if the element is disabled.
54341:   aVisitor.mCanHandle = PR_FALSE;
54342:   if (IsDisabled()) {
54341:     return NS_OK;
54341:   }
54341: 
54341:   return nsGenericHTMLFormElement::PreHandleEvent(aVisitor);
54341: }
54341: 
54342: nsresult
54342: nsHTMLFieldSetElement::AfterSetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,
54342:                                     const nsAString* aValue, PRBool aNotify)
54342: {
54342:   if (aNameSpaceID == kNameSpaceID_None && aName == nsGkAtoms::disabled &&
54342:       nsINode::GetFirstChild()) {
54342:     if (!mElements) {
54342:       mElements = new nsContentList(this, MatchListedElements, nsnull, nsnull,
54342:                                     PR_TRUE);
54342:     }
54342: 
54342:     PRUint32 length = mElements->Length(PR_TRUE);
54342:     for (PRUint32 i=0; i<length; ++i) {
54342:       static_cast<nsGenericHTMLFormElement*>(mElements->GetNodeAt(i))
56168:         ->FieldSetDisabledChanged(nsEventStates(), aNotify);
54342:     }
54342:   }
54342: 
54342:   return nsGenericHTMLFormElement::AfterSetAttr(aNameSpaceID, aName,
54342:                                                 aValue, aNotify);
54342: }
54342: 
    1: // nsIDOMHTMLFieldSetElement
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLFieldSetElement::GetForm(nsIDOMHTMLFormElement** aForm)
    1: {
    1:   return nsGenericHTMLFormElement::GetForm(aForm);
    1: }
    1: 
53884: NS_IMETHODIMP
53884: nsHTMLFieldSetElement::GetType(nsAString& aType)
53884: {
53884:   aType.AssignLiteral("fieldset");
53884:   return NS_OK;
53884: }
53884: 
53885: /* static */
53885: PRBool
53885: nsHTMLFieldSetElement::MatchListedElements(nsIContent* aContent, PRInt32 aNamespaceID,
53885:                                            nsIAtom* aAtom, void* aData)
53885: {
53885:   nsCOMPtr<nsIFormControl> formControl = do_QueryInterface(aContent);
53885:   return formControl && formControl->GetType() != NS_FORM_LABEL;
53885: }
53885: 
53885: NS_IMETHODIMP
53885: nsHTMLFieldSetElement::GetElements(nsIDOMHTMLCollection** aElements)
53885: {
53885:   if (!mElements) {
54342:     mElements = new nsContentList(this, MatchListedElements, nsnull, nsnull,
54342:                                   PR_TRUE);
53885:   }
53885: 
53885:   NS_ADDREF(*aElements = mElements);
53885:   return NS_OK;
53885: }
53885: 
    1: // nsIFormControl
    1: 
    1: nsresult
    1: nsHTMLFieldSetElement::Reset()
    1: {
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
50990: nsHTMLFieldSetElement::SubmitNamesValues(nsFormSubmission* aFormSubmission)
    1: {
    1:   return NS_OK;
    1: }
54346: 
54346: nsresult
54346: nsHTMLFieldSetElement::InsertChildAt(nsIContent* aChild, PRUint32 aIndex,
54346:                                      PRBool aNotify)
54346: {
54346:   bool firstLegendHasChanged = false;
54346: 
54346:   if (aChild->IsHTML(nsGkAtoms::legend)) {
54346:     if (!mFirstLegend) {
54346:       mFirstLegend = aChild;
54346:       // We do not want to notify the first time mFirstElement is set.
54346:     } else {
54346:       // If mFirstLegend is before aIndex, we do not change it.
54346:       // Otherwise, mFirstLegend is now aChild.
56407:       if (PRInt32(aIndex) <= IndexOf(mFirstLegend)) {
54346:         mFirstLegend = aChild;
54346:         firstLegendHasChanged = true;
54346:       }
54346:     }
54346:   }
54346: 
54346:   nsresult rv = nsGenericHTMLFormElement::InsertChildAt(aChild, aIndex, aNotify);
54346:   NS_ENSURE_SUCCESS(rv, rv);
54346: 
54346:   if (firstLegendHasChanged) {
55188:     NotifyElementsForFirstLegendChange(aNotify);
54346:   }
54346: 
54346:   return rv;
54346: }
54346: 
54346: nsresult
54346: nsHTMLFieldSetElement::RemoveChildAt(PRUint32 aIndex, PRBool aNotify,
54346:                                      PRBool aMutationEvent /* = PR_TRUE */)
54346: {
54346:   bool firstLegendHasChanged = false;
54346: 
56299:   if (mFirstLegend && (GetChildAt(aIndex) == mFirstLegend)) {
54346:     // If we are removing the first legend we have to found another one.
56299:     nsIContent* child = mFirstLegend->GetNextSibling();
56299:     mFirstLegend = nsnull;
56299:     firstLegendHasChanged = true;
56299: 
56299:     for (; child; child = child->GetNextSibling()) {
54346:       if (child->IsHTML(nsGkAtoms::legend)) {
54346:         mFirstLegend = child;
54346:         break;
54346:       }
54346:     }
54346:   }
54346: 
54346:   nsresult rv = nsGenericHTMLFormElement::RemoveChildAt(aIndex, aNotify, aMutationEvent);
54346:   NS_ENSURE_SUCCESS(rv, rv);
54346: 
54346:   if (firstLegendHasChanged) {
55188:     NotifyElementsForFirstLegendChange(aNotify);
54346:   }
54346: 
54346:   return rv;
54346: }
54346: 
54346: void
55188: nsHTMLFieldSetElement::NotifyElementsForFirstLegendChange(PRBool aNotify)
54346: {
54346:   /**
54346:    * NOTE: this could be optimized if only call when the fieldset is currently
54346:    * disabled.
54346:    * This should also make sure that mElements is set when we happen to be here.
54346:    * However, this method shouldn't be called very often in normal use cases.
54346:    */
54346:   if (!mElements) {
54346:     mElements = new nsContentList(this, MatchListedElements, nsnull, nsnull,
54346:                                   PR_TRUE);
54346:   }
54346: 
54346:   PRUint32 length = mElements->Length(PR_TRUE);
54346:   for (PRUint32 i=0; i<length; ++i) {
54346:     static_cast<nsGenericHTMLFormElement*>(mElements->GetNodeAt(i))
55188:       ->FieldSetFirstLegendChanged(aNotify);
54346:   }
54346: }
54346: 
