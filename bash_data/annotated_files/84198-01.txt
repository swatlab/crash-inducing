    1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Header for JavaScript Debugging support - Internal ONLY declarations
    1:  */
    1: 
    1: #ifndef jsd_h___
    1: #define jsd_h___
    1: 
    1: /*
    1: * NOTE: This is a *private* header file and should only be included by
    1: * the sources in js/jsd. Defining EXPORT_JSD_API in an outside module
    1: * using jsd would be bad.
    1: */
    1: #define EXPORT_JSD_API 1 /* if used, must be set before include of jsdebug.h */
    1: 
    1: /*
    1: * These can be controled by the makefile, but this allows a place to set
42263: * the values always used in the mozilla client, but perhaps done differently
    1: * in other embeddings.
    1: */
    1: #ifdef MOZILLA_CLIENT
    1: #define JSD_THREADSAFE 1
    1: /* define JSD_HAS_DANGEROUS_THREAD 1 */
    1: #define JSD_USE_NSPR_LOCKS 1
    1: #endif /* MOZILLA_CLIENT */
    1: 
    1: 
    1: /* Get jstypes.h included first. After that we can use PR macros for doing
    1: *  this extern "C" stuff!
    1: */
    1: #ifdef __cplusplus
    1: extern "C"
    1: {
    1: #endif
    1: #include "jstypes.h"
    1: #ifdef __cplusplus
    1: }
    1: #endif
    1: 
    1: JS_BEGIN_EXTERN_C
    1: #include "jsprf.h"
    1: #include "jsutil.h" /* Added by JSIFY */
    1: #include "jshash.h" /* Added by JSIFY */
    1: #include "jsclist.h"
    1: #include "jsdebug.h"
    1: #include "jsapi.h"
    1: #include "jsdbgapi.h"
    1: #include "jsd_lock.h"
    1: 
    1: #include <stdio.h>
    1: #include <stdlib.h>
    1: #include <string.h>
    1: 
    1: #ifdef LIVEWIRE
    1: #include <base/pblock.h>
    1: #include <base/session.h>
    1: #include <frame/log.h>
    1: #include <frame/req.h>
    1: #endif /* LIVEWIRE */
    1: JS_END_EXTERN_C
    1: 
    1: JS_BEGIN_EXTERN_C
    1: 
    1: #define JSD_MAJOR_VERSION 1
    1: #define JSD_MINOR_VERSION 1
    1: 
    1: /***************************************************************************/
    1: /* handy macros */
    1: #undef  CHECK_BIT_FLAG
    1: #define CHECK_BIT_FLAG(f,b) ((f)&(b))
    1: #undef  SET_BIT_FLAG
    1: #define SET_BIT_FLAG(f,b)   ((f)|=(b))
    1: #undef  CLEAR_BIT_FLAG
    1: #define CLEAR_BIT_FLAG(f,b) ((f)&=(~(b)))
    1: 
    1: #define JSD_IS_DEBUG_ENABLED(jsdc,jsdscript)                                   \
    1:         (!(((jsdc->flags & JSD_DEBUG_WHEN_SET) ? 1 : 0)  ^                     \
    1:            ((jsdscript->flags & JSD_SCRIPT_DEBUG_BIT) ?  1 : 0)))
    1: #define JSD_IS_PROFILE_ENABLED(jsdc,jsdscript)                                 \
    1:         ((jsdc->flags & JSD_COLLECT_PROFILE_DATA) &&                           \
    1:          (!(((jsdc->flags & JSD_PROFILE_WHEN_SET) ? 1 : 0) ^                   \
    1:             ((jsdscript->flags & JSD_SCRIPT_PROFILE_BIT) ? 1 : 0))))
    1: 
    1: 
    1: /***************************************************************************/
    1: /* These are not exposed in jsdebug.h - typedef here for consistency */
    1: 
    1: typedef struct JSDExecHook          JSDExecHook;
    1: typedef struct JSDAtom              JSDAtom;
    1: typedef struct JSDProfileData       JSDProfileData;
    1: /***************************************************************************/
    1: /* Our structures */
    1: 
    1: /*
    1: * XXX What I'm calling a JSDContext is really more of a JSDTaskState. 
    1: */
    1: 
    1: struct JSDContext
    1: {
    1:     JSCList                 links;      /* we are part of a JSCList */
    1:     JSBool                  inited;
    1:     void*                   data;
    1:     uint32                  flags;
    1:     JSD_ScriptHookProc      scriptHook;
    1:     void*                   scriptHookData;
    1:     JSD_ExecutionHookProc   interruptHook;
    1:     void*                   interruptHookData;
    1:     JSRuntime*              jsrt;
    1:     JSD_ErrorReporter       errorReporter;
    1:     void*                   errorReporterData;
    1:     JSCList                 threadsStates;
    1:     JSD_ExecutionHookProc   debugBreakHook;
    1:     void*                   debugBreakHookData;
    1:     JSD_ExecutionHookProc   debuggerHook;
    1:     void*                   debuggerHookData;
    1:     JSD_ExecutionHookProc   throwHook;
    1:     void*                   throwHookData;
    1:     JSD_CallHookProc        functionHook;
    1:     void*                   functionHookData;
    1:     JSD_CallHookProc        toplevelHook;
    1:     void*                   toplevelHookData;
    1:     JSContext*              dumbContext;
    1:     JSObject*               glob;
    1:     JSD_UserCallbacks       userCallbacks;
    1:     void*                   user;
    1:     JSCList                 scripts;
    1:     JSHashTable*            scriptsTable;
    1:     JSCList                 sources;
    1:     JSCList                 removedSources;
    1:     uintN                   sourceAlterCount;
    1:     JSHashTable*            atoms;
    1:     JSCList                 objectsList;
    1:     JSHashTable*            objectsTable;
    1:     JSDProfileData*         callingFunctionPData;
    1:     int64                   lastReturnTime;
    1: #ifdef JSD_THREADSAFE
    1:     void*                   scriptsLock;
    1:     void*                   sourceTextLock;
    1:     void*                   objectsLock;
    1:     void*                   atomsLock;
    1:     void*                   threadStatesLock;
    1: #endif /* JSD_THREADSAFE */
    1: #ifdef JSD_HAS_DANGEROUS_THREAD
    1:     void*                   dangerousThread;
    1: #endif /* JSD_HAS_DANGEROUS_THREAD */
    1: 
    1: };
    1: 
    1: struct JSDScript
    1: {
    1:     JSCList     links;      /* we are part of a JSCList */
    1:     JSDContext* jsdc;       /* JSDContext for this jsdscript */
    1:     JSScript*   script;     /* script we are wrapping */
    1:     uintN       lineBase;   /* we cache this */
    1:     uintN       lineExtent; /* we cache this */
    1:     JSCList     hooks;      /* JSCList of JSDExecHooks for this script */
    1:     char*       url;
    1:     uint32      flags;
    1:     void*       data;
    1: 
    1:     JSDProfileData  *profileData;
    1: 
    1: #ifdef LIVEWIRE
    1:     LWDBGApp*    app;
    1:     LWDBGScript* lwscript;
    1: #endif
    1: };
    1: 
    1: struct JSDProfileData
    1: {
    1:     JSDProfileData* caller;
    1:     int64    lastCallStart;
    1:     int64    runningTime;
    1:     uintN    callCount;
    1:     uintN    recurseDepth;
    1:     uintN    maxRecurseDepth;
    1:     jsdouble minExecutionTime;
    1:     jsdouble maxExecutionTime;
    1:     jsdouble totalExecutionTime;
    1:     jsdouble minOwnExecutionTime;
    1:     jsdouble maxOwnExecutionTime;
    1:     jsdouble totalOwnExecutionTime;
    1: };
    1: 
    1: struct JSDSourceText
    1: {
    1:     JSCList          links;      /* we are part of a JSCList */
    1:     char*            url;
    1:     char*            text;
    1:     uintN            textLength;
    1:     uintN            textSpace;
    1:     JSBool           dirty;
    1:     JSDSourceStatus  status;
    1:     uintN            alterCount;
    1:     JSBool           doingEval;
    1: };
    1: 
    1: struct JSDExecHook
    1: {
    1:     JSCList               links;        /* we are part of a JSCList */
    1:     JSDScript*            jsdscript;
    1:     jsuword               pc;
    1:     JSD_ExecutionHookProc hook;
    1:     void*                 callerdata;
    1: };
    1: 
    1: #define TS_HAS_DISABLED_FRAME 0x01
    1: 
    1: struct JSDThreadState
    1: {
    1:     JSCList             links;        /* we are part of a JSCList */
    1:     JSContext*          context;
    1:     void*               thread;
    1:     JSCList             stack;
    1:     uintN               stackDepth;
    1:     uintN               flags;
    1: };
    1: 
    1: struct JSDStackFrameInfo
    1: {
    1:     JSCList             links;        /* we are part of a JSCList */
    1:     JSDThreadState*     jsdthreadstate;
    1:     JSDScript*          jsdscript;
    1:     jsuword             pc;
    1:     JSStackFrame*       fp;
    1: };
    1: 
    1: #define GOT_PROTO   ((short) (1 << 0))
    1: #define GOT_PROPS   ((short) (1 << 1))
    1: #define GOT_PARENT  ((short) (1 << 2))
    1: #define GOT_CTOR    ((short) (1 << 3))
    1: 
    1: struct JSDValue
    1: {
    1:     jsval       val;
    1:     intN        nref;
    1:     JSCList     props;
    1:     JSString*   string;
58976:     JSString*   funName;
    1:     const char* className;
    1:     JSDValue*   proto;
    1:     JSDValue*   parent;
    1:     JSDValue*   ctor;
    1:     uintN       flags;
    1: };
    1: 
    1: struct JSDProperty
    1: {
    1:     JSCList     links;      /* we are part of a JSCList */
    1:     intN        nref;
    1:     JSDValue*   val;
    1:     JSDValue*   name;
    1:     JSDValue*   alias;
    1:     uintN       slot;
    1:     uintN       flags;
    1: };
    1: 
    1: struct JSDAtom
    1: {
    1:     char* str;      /* must be first element in struct for compare */
    1:     intN  refcount;
    1: };
    1: 
    1: struct JSDObject
    1: {
    1:     JSCList     links;      /* we are part of a JSCList */
    1:     JSObject*   obj;
    1:     JSDAtom*    newURL;
    1:     uintN       newLineno;
    1:     JSDAtom*    ctorURL;
    1:     uintN       ctorLineno;
    1:     JSDAtom*    ctorName;
    1: };
    1: 
    1: /***************************************************************************/
    1: /* Code validation support */
    1: 
    1: #ifdef DEBUG
    1: extern void JSD_ASSERT_VALID_CONTEXT(JSDContext* jsdc);
    1: extern void JSD_ASSERT_VALID_SCRIPT(JSDScript* jsdscript);
    1: extern void JSD_ASSERT_VALID_SOURCE_TEXT(JSDSourceText* jsdsrc);
    1: extern void JSD_ASSERT_VALID_THREAD_STATE(JSDThreadState* jsdthreadstate);
    1: extern void JSD_ASSERT_VALID_STACK_FRAME(JSDStackFrameInfo* jsdframe);
    1: extern void JSD_ASSERT_VALID_EXEC_HOOK(JSDExecHook* jsdhook);
    1: extern void JSD_ASSERT_VALID_VALUE(JSDValue* jsdval);
    1: extern void JSD_ASSERT_VALID_PROPERTY(JSDProperty* jsdprop);
    1: extern void JSD_ASSERT_VALID_OBJECT(JSDObject* jsdobj);
    1: #else
    1: #define JSD_ASSERT_VALID_CONTEXT(x)     ((void)0)
    1: #define JSD_ASSERT_VALID_SCRIPT(x)      ((void)0)
    1: #define JSD_ASSERT_VALID_SOURCE_TEXT(x) ((void)0)
    1: #define JSD_ASSERT_VALID_THREAD_STATE(x)((void)0)
    1: #define JSD_ASSERT_VALID_STACK_FRAME(x) ((void)0)
    1: #define JSD_ASSERT_VALID_EXEC_HOOK(x)   ((void)0)
    1: #define JSD_ASSERT_VALID_VALUE(x)       ((void)0)
    1: #define JSD_ASSERT_VALID_PROPERTY(x)    ((void)0)
    1: #define JSD_ASSERT_VALID_OBJECT(x)      ((void)0)
    1: #endif
    1: 
    1: /***************************************************************************/
    1: /* higher level functions */
    1: 
    1: extern JSDContext*
    1: jsd_DebuggerOnForUser(JSRuntime*         jsrt,
    1:                       JSD_UserCallbacks* callbacks,
54154:                       void*              user,
54154:                       JSObject*          scopeobj);
54154: 
    1: extern JSDContext*
    1: jsd_DebuggerOn(void);
    1: 
    1: extern void
    1: jsd_DebuggerOff(JSDContext* jsdc);
    1: 
    1: extern void
35647: jsd_DebuggerPause(JSDContext* jsdc, JSBool forceAllHooksOff);
35647: 
35647: extern void
35647: jsd_DebuggerUnpause(JSDContext* jsdc);
35647: 
35647: extern void
    1: jsd_SetUserCallbacks(JSRuntime* jsrt, JSD_UserCallbacks* callbacks, void* user);
    1: 
    1: extern JSDContext*
    1: jsd_JSDContextForJSContext(JSContext* context);
    1: 
    1: extern void*
    1: jsd_SetContextPrivate(JSDContext* jsdc, void *data);
    1: 
    1: extern void*
    1: jsd_GetContextPrivate(JSDContext* jsdc);
    1: 
    1: extern void
    1: jsd_ClearAllProfileData(JSDContext* jsdc);
    1: 
    1: extern JSBool
    1: jsd_SetErrorReporter(JSDContext*       jsdc,
    1:                      JSD_ErrorReporter reporter,
    1:                      void*             callerdata);
    1: 
    1: extern JSBool
    1: jsd_GetErrorReporter(JSDContext*        jsdc,
    1:                      JSD_ErrorReporter* reporter,
    1:                      void**             callerdata);
    1: 
18907: static JSBool
    1: jsd_DebugErrorHook(JSContext *cx, const char *message,
    1:                    JSErrorReport *report, void *closure);
    1: 
    1: /***************************************************************************/
    1: /* Script functions */
    1: 
    1: extern JSBool
    1: jsd_InitScriptManager(JSDContext *jsdc);
    1: 
    1: extern void
    1: jsd_DestroyScriptManager(JSDContext* jsdc);
    1: 
    1: extern JSDScript*
    1: jsd_FindJSDScript(JSDContext*  jsdc,
    1:                   JSScript     *script);
    1: 
26156: extern JSDScript*
26156: jsd_FindOrCreateJSDScript(JSDContext    *jsdc,
26156:                           JSContext     *cx,
26156:                           JSScript      *script,
26156:                           JSStackFrame  *fp);
26156: 
    1: extern JSDProfileData*
    1: jsd_GetScriptProfileData(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern uint32
    1: jsd_GetScriptFlags(JSDContext *jsdc, JSDScript *script);
    1: 
    1: extern void
    1: jsd_SetScriptFlags(JSDContext *jsdc, JSDScript *script, uint32 flags);
    1: 
    1: extern uintN
    1: jsd_GetScriptCallCount(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern  uintN
    1: jsd_GetScriptMaxRecurseDepth(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptMinExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptMaxExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptTotalExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptMinOwnExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptMaxOwnExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern jsdouble
    1: jsd_GetScriptTotalOwnExecutionTime(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern void
    1: jsd_ClearScriptProfileData(JSDContext* jsdc, JSDScript *script);
    1: 
    1: extern JSScript *
    1: jsd_GetJSScript (JSDContext *jsdc, JSDScript *script);
    1: 
    1: extern JSFunction *
    1: jsd_GetJSFunction (JSDContext *jsdc, JSDScript *script);
    1: 
    1: extern JSDScript*
    1: jsd_IterateScripts(JSDContext* jsdc, JSDScript **iterp);
    1: 
    1: extern void *
    1: jsd_SetScriptPrivate (JSDScript *jsdscript, void *data);
    1: 
    1: extern void *
    1: jsd_GetScriptPrivate (JSDScript *jsdscript);
    1: 
    1: extern JSBool
    1: jsd_IsActiveScript(JSDContext* jsdc, JSDScript *jsdscript);
    1: 
    1: extern const char*
    1: jsd_GetScriptFilename(JSDContext* jsdc, JSDScript *jsdscript);
    1: 
58976: extern JSString*
61691: jsd_GetScriptFunctionId(JSDContext* jsdc, JSDScript *jsdscript);
    1: 
    1: extern uintN
    1: jsd_GetScriptBaseLineNumber(JSDContext* jsdc, JSDScript *jsdscript);
    1: 
    1: extern uintN
    1: jsd_GetScriptLineExtent(JSDContext* jsdc, JSDScript *jsdscript);
    1: 
    1: extern JSBool
    1: jsd_SetScriptHook(JSDContext* jsdc, JSD_ScriptHookProc hook, void* callerdata);
    1: 
    1: extern JSBool
    1: jsd_GetScriptHook(JSDContext* jsdc, JSD_ScriptHookProc* hook, void** callerdata);
    1: 
    1: extern jsuword
    1: jsd_GetClosestPC(JSDContext* jsdc, JSDScript* jsdscript, uintN line);
    1: 
    1: extern uintN
    1: jsd_GetClosestLine(JSDContext* jsdc, JSDScript* jsdscript, jsuword pc);
    1: 
71318: extern JSBool
71318: jsd_GetLinePCs(JSDContext* jsdc, JSDScript* jsdscript,
71318:                uintN startLine, uintN maxLines,
71318:                uintN* count, uintN** lines, jsuword** pcs);
71318: 
18907: extern void
    1: jsd_NewScriptHookProc(
    1:                 JSContext   *cx,
    1:                 const char  *filename,      /* URL this script loads from */
    1:                 uintN       lineno,         /* line where this script starts */
    1:                 JSScript    *script,
    1:                 JSFunction  *fun,
    1:                 void*       callerdata);
    1: 
18907: extern void
    1: jsd_DestroyScriptHookProc(
    1:                 JSContext   *cx,
    1:                 JSScript    *script,
    1:                 void*       callerdata);
    1: 
    1: /* Script execution hook functions */
    1: 
    1: extern JSBool
    1: jsd_SetExecutionHook(JSDContext*           jsdc,
    1:                      JSDScript*            jsdscript,
    1:                      jsuword               pc,
    1:                      JSD_ExecutionHookProc hook,
    1:                      void*                 callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearExecutionHook(JSDContext*           jsdc,
    1:                        JSDScript*            jsdscript,
    1:                        jsuword               pc);
    1: 
    1: extern JSBool
    1: jsd_ClearAllExecutionHooksForScript(JSDContext* jsdc, JSDScript* jsdscript);
    1: 
    1: extern JSBool
    1: jsd_ClearAllExecutionHooks(JSDContext* jsdc);
    1: 
    1: extern void
    1: jsd_ScriptCreated(JSDContext* jsdc,
    1:                   JSContext   *cx,
    1:                   const char  *filename,    /* URL this script loads from */
    1:                   uintN       lineno,       /* line where this script starts */
    1:                   JSScript    *script,
    1:                   JSFunction  *fun);
    1: 
    1: extern void
    1: jsd_ScriptDestroyed(JSDContext* jsdc,
    1:                     JSContext   *cx,
    1:                     JSScript    *script);
    1: 
    1: /***************************************************************************/
    1: /* Source Text functions */
    1: 
    1: extern JSDSourceText*
    1: jsd_IterateSources(JSDContext* jsdc, JSDSourceText **iterp);
    1: 
    1: extern JSDSourceText*
    1: jsd_FindSourceForURL(JSDContext* jsdc, const char* url);
    1: 
    1: extern const char*
    1: jsd_GetSourceURL(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern JSBool
    1: jsd_GetSourceText(JSDContext* jsdc, JSDSourceText* jsdsrc,
    1:                   const char** ppBuf, intN* pLen);
    1: 
    1: extern void
    1: jsd_ClearSourceText(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern JSDSourceStatus
    1: jsd_GetSourceStatus(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern JSBool
    1: jsd_IsSourceDirty(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern void
    1: jsd_SetSourceDirty(JSDContext* jsdc, JSDSourceText* jsdsrc, JSBool dirty);
    1: 
    1: extern uintN
    1: jsd_GetSourceAlterCount(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern uintN
    1: jsd_IncrementSourceAlterCount(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern JSDSourceText*
    1: jsd_NewSourceText(JSDContext* jsdc, const char* url);
    1: 
    1: extern JSDSourceText*
    1: jsd_AppendSourceText(JSDContext* jsdc,
    1:                      JSDSourceText* jsdsrc,
    1:                      const char* text,       /* *not* zero terminated */
    1:                      size_t length,
    1:                      JSDSourceStatus status);
    1: 
    1: extern JSDSourceText*
    1: jsd_AppendUCSourceText(JSDContext* jsdc,
    1:                        JSDSourceText* jsdsrc,
    1:                        const jschar* text,       /* *not* zero terminated */
    1:                        size_t length,
    1:                        JSDSourceStatus status);
    1: 
    1: /* convienence function for adding complete source of url in one call */
    1: extern JSBool
    1: jsd_AddFullSourceText(JSDContext* jsdc,
    1:                       const char* text,       /* *not* zero terminated */
    1:                       size_t      length,
    1:                       const char* url);
    1: 
    1: extern void
    1: jsd_DestroyAllSources(JSDContext* jsdc);
    1: 
64105: extern char*
    1: jsd_BuildNormalizedURL(const char* url_string);
    1: 
    1: extern void
    1: jsd_StartingEvalUsingFilename(JSDContext* jsdc, const char* url);
    1: 
    1: extern void
    1: jsd_FinishedEvalUsingFilename(JSDContext* jsdc, const char* url);
    1: 
    1: /***************************************************************************/
    1: /* Interrupt Hook functions */
    1: 
    1: extern JSBool
    1: jsd_SetInterruptHook(JSDContext*           jsdc,
    1:                      JSD_ExecutionHookProc hook,
    1:                      void*                 callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearInterruptHook(JSDContext* jsdc);
    1: 
    1: extern JSBool
62071: jsd_EnableSingleStepInterrupts(JSDContext* jsdc,
62071:                                JSDScript*  jsdscript,
62071:                                JSBool      enable);
62071: 
62071: extern JSBool
    1: jsd_SetDebugBreakHook(JSDContext*           jsdc,
    1:                       JSD_ExecutionHookProc hook,
    1:                       void*                 callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearDebugBreakHook(JSDContext* jsdc);
    1: 
    1: extern JSBool
    1: jsd_SetDebuggerHook(JSDContext*           jsdc,
    1:                     JSD_ExecutionHookProc hook,
    1:                     void*                 callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearDebuggerHook(JSDContext* jsdc);
    1: 
    1: extern JSTrapStatus
    1: jsd_CallExecutionHook(JSDContext*           jsdc,
    1:                       JSContext*            cx,
    1:                       uintN                 type,
    1:                       JSD_ExecutionHookProc hook,
    1:                       void*                 hookData,
    1:                       jsval*                rval);
    1: 
    1: extern JSBool
    1: jsd_CallCallHook (JSDContext*      jsdc,
    1:                   JSContext*       cx,
    1:                   uintN            type,
    1:                   JSD_CallHookProc hook,
    1:                   void*            hookData);
    1: 
    1: extern JSBool
    1: jsd_SetThrowHook(JSDContext*           jsdc,
    1:                  JSD_ExecutionHookProc hook,
    1:                  void*                 callerdata);
    1: extern JSBool
    1: jsd_ClearThrowHook(JSDContext* jsdc);
    1: 
18907: extern JSTrapStatus
    1: jsd_DebuggerHandler(JSContext *cx, JSScript *script, jsbytecode *pc,
    1:                     jsval *rval, void *closure);
    1: 
18907: extern JSTrapStatus
    1: jsd_ThrowHandler(JSContext *cx, JSScript *script, jsbytecode *pc,
    1:                  jsval *rval, void *closure);
    1: 
    1: extern JSBool
    1: jsd_SetFunctionHook(JSDContext*      jsdc,
    1:                     JSD_CallHookProc hook,
    1:                     void*            callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearFunctionHook(JSDContext* jsdc);
    1: 
    1: extern JSBool
    1: jsd_SetTopLevelHook(JSDContext*      jsdc,
    1:                     JSD_CallHookProc hook,
    1:                     void*            callerdata);
    1: 
    1: extern JSBool
    1: jsd_ClearTopLevelHook(JSDContext* jsdc);
    1: 
    1: /***************************************************************************/
    1: /* Stack Frame functions */
    1: 
    1: extern uintN
    1: jsd_GetCountOfStackFrames(JSDContext* jsdc, JSDThreadState* jsdthreadstate);
    1: 
    1: extern JSDStackFrameInfo*
    1: jsd_GetStackFrame(JSDContext* jsdc, JSDThreadState* jsdthreadstate);
    1: 
    1: extern JSContext*
    1: jsd_GetJSContext(JSDContext* jsdc, JSDThreadState* jsdthreadstate);
    1: 
    1: extern JSDStackFrameInfo*
    1: jsd_GetCallingStackFrame(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDScript*
    1: jsd_GetScriptForStackFrame(JSDContext* jsdc,
    1:                            JSDThreadState* jsdthreadstate,
    1:                            JSDStackFrameInfo* jsdframe);
    1: 
    1: extern jsuword
    1: jsd_GetPCForStackFrame(JSDContext* jsdc,
    1:                        JSDThreadState* jsdthreadstate,
    1:                        JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDValue*
    1: jsd_GetCallObjectForStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDValue*
    1: jsd_GetScopeChainForStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSBool
    1: jsd_IsStackFrameDebugger(JSDContext* jsdc, 
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSBool
    1: jsd_IsStackFrameConstructing(JSDContext* jsdc, 
    1:                              JSDThreadState* jsdthreadstate,
    1:                              JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDValue*
    1: jsd_GetThisForStackFrame(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe);
    1: 
58976: extern JSString*
61691: jsd_GetIdForStackFrame(JSDContext* jsdc, 
    1:                        JSDThreadState* jsdthreadstate,
    1:                        JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDThreadState*
    1: jsd_NewThreadState(JSDContext* jsdc, JSContext *cx);
    1: 
    1: extern void
    1: jsd_DestroyThreadState(JSDContext* jsdc, JSDThreadState* jsdthreadstate);
    1: 
    1: extern JSBool
    1: jsd_EvaluateUCScriptInStackFrame(JSDContext* jsdc,
    1:                                  JSDThreadState* jsdthreadstate,
    1:                                  JSDStackFrameInfo* jsdframe,
    1:                                  const jschar *bytes, uintN length,
    1:                                  const char *filename, uintN lineno,
    1:                                  JSBool eatExceptions, jsval *rval);
    1: 
    1: extern JSBool
    1: jsd_EvaluateScriptInStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe,
    1:                                const char *bytes, uintN length,
    1:                                const char *filename, uintN lineno,
    1:                                JSBool eatExceptions, jsval *rval);
    1: 
    1: extern JSString*
    1: jsd_ValToStringInStackFrame(JSDContext* jsdc,
    1:                             JSDThreadState* jsdthreadstate,
    1:                             JSDStackFrameInfo* jsdframe,
    1:                             jsval val);
    1: 
    1: extern JSBool
    1: jsd_IsValidThreadState(JSDContext*        jsdc,
    1:                        JSDThreadState*    jsdthreadstate);
    1: 
    1: extern JSBool
    1: jsd_IsValidFrameInThreadState(JSDContext*        jsdc,
    1:                               JSDThreadState*    jsdthreadstate,
    1:                               JSDStackFrameInfo* jsdframe);
    1: 
    1: extern JSDValue*
    1: jsd_GetException(JSDContext* jsdc, JSDThreadState* jsdthreadstate);
    1: 
    1: extern JSBool
    1: jsd_SetException(JSDContext* jsdc, JSDThreadState* jsdthreadstate, 
    1:                  JSDValue* jsdval);
    1: 
    1: /***************************************************************************/
    1: /* Locking support */
    1: 
    1: /* protos are in js_lock.h for:
    1:  *      jsd_CreateLock
    1:  *      jsd_Lock
    1:  *      jsd_Unlock
    1:  *      jsd_IsLocked
    1:  *      jsd_CurrentThread
    1:  */
    1: 
    1: #ifdef JSD_THREADSAFE
    1: 
    1: /* the system-wide lock */
    1: extern void* _jsd_global_lock;
    1: #define JSD_LOCK()                               \
    1:     JS_BEGIN_MACRO                               \
    1:         if(!_jsd_global_lock)                    \
    1:             _jsd_global_lock = jsd_CreateLock(); \
    1:         JS_ASSERT(_jsd_global_lock);             \
    1:         jsd_Lock(_jsd_global_lock);              \
    1:     JS_END_MACRO
    1: 
    1: #define JSD_UNLOCK()                             \
    1:     JS_BEGIN_MACRO                               \
    1:         JS_ASSERT(_jsd_global_lock);             \
    1:         jsd_Unlock(_jsd_global_lock);            \
    1:     JS_END_MACRO
    1: 
    1: /* locks for the subsystems of a given context */
    1: #define JSD_INIT_LOCKS(jsdc)                                    \
    1:     ( (NULL != (jsdc->scriptsLock      = jsd_CreateLock())) &&  \
    1:       (NULL != (jsdc->sourceTextLock   = jsd_CreateLock())) &&  \
    1:       (NULL != (jsdc->atomsLock        = jsd_CreateLock())) &&  \
    1:       (NULL != (jsdc->objectsLock      = jsd_CreateLock())) &&  \
    1:       (NULL != (jsdc->threadStatesLock = jsd_CreateLock())) )
    1: 
    1: #define JSD_LOCK_SCRIPTS(jsdc)        jsd_Lock(jsdc->scriptsLock)
    1: #define JSD_UNLOCK_SCRIPTS(jsdc)      jsd_Unlock(jsdc->scriptsLock)
    1: 
    1: #define JSD_LOCK_SOURCE_TEXT(jsdc)    jsd_Lock(jsdc->sourceTextLock)
    1: #define JSD_UNLOCK_SOURCE_TEXT(jsdc)  jsd_Unlock(jsdc->sourceTextLock)
    1: 
    1: #define JSD_LOCK_ATOMS(jsdc)          jsd_Lock(jsdc->atomsLock)
    1: #define JSD_UNLOCK_ATOMS(jsdc)        jsd_Unlock(jsdc->atomsLock)
    1: 
    1: #define JSD_LOCK_OBJECTS(jsdc)        jsd_Lock(jsdc->objectsLock)
    1: #define JSD_UNLOCK_OBJECTS(jsdc)      jsd_Unlock(jsdc->objectsLock)
    1: 
    1: #define JSD_LOCK_THREADSTATES(jsdc)   jsd_Lock(jsdc->threadStatesLock)
    1: #define JSD_UNLOCK_THREADSTATES(jsdc) jsd_Unlock(jsdc->threadStatesLock)
    1: 
    1: #else  /* !JSD_THREADSAFE */
    1: 
    1: #define JSD_LOCK()                    ((void)0)
    1: #define JSD_UNLOCK()                  ((void)0)
    1: 
    1: #define JSD_INIT_LOCKS(jsdc)          1
    1: 
    1: #define JSD_LOCK_SCRIPTS(jsdc)        ((void)0)
    1: #define JSD_UNLOCK_SCRIPTS(jsdc)      ((void)0)
    1: 
    1: #define JSD_LOCK_SOURCE_TEXT(jsdc)    ((void)0)
    1: #define JSD_UNLOCK_SOURCE_TEXT(jsdc)  ((void)0)
    1: 
    1: #define JSD_LOCK_ATOMS(jsdc)          ((void)0)
    1: #define JSD_UNLOCK_ATOMS(jsdc)        ((void)0)
    1: 
    1: #define JSD_LOCK_OBJECTS(jsdc)        ((void)0)
    1: #define JSD_UNLOCK_OBJECTS(jsdc)      ((void)0)
    1: 
    1: #define JSD_LOCK_THREADSTATES(jsdc)   ((void)0)
    1: #define JSD_UNLOCK_THREADSTATES(jsdc) ((void)0)
    1: 
    1: #endif /* JSD_THREADSAFE */
    1: 
    1: /* NOTE: These are intended for ASSERTs. Thus we supply checks for both
    1:  * LOCKED and UNLOCKED (rather that just LOCKED and !LOCKED) so that in
    1:  * the DEBUG non-Threadsafe case we can have an ASSERT that always succeeds
    1:  * without having to special case things in the code.
    1:  */
    1: #if defined(JSD_THREADSAFE) && defined(DEBUG)
    1: #define JSD_SCRIPTS_LOCKED(jsdc)        (jsd_IsLocked(jsdc->scriptsLock))
    1: #define JSD_SOURCE_TEXT_LOCKED(jsdc)    (jsd_IsLocked(jsdc->sourceTextLock))
    1: #define JSD_ATOMS_LOCKED(jsdc)          (jsd_IsLocked(jsdc->atomsLock))
    1: #define JSD_OBJECTS_LOCKED(jsdc)        (jsd_IsLocked(jsdc->objectsLock))
    1: #define JSD_THREADSTATES_LOCKED(jsdc)   (jsd_IsLocked(jsdc->threadStatesLock))
    1: #define JSD_SCRIPTS_UNLOCKED(jsdc)      (!jsd_IsLocked(jsdc->scriptsLock))
    1: #define JSD_SOURCE_TEXT_UNLOCKED(jsdc)  (!jsd_IsLocked(jsdc->sourceTextLock))
    1: #define JSD_ATOMS_UNLOCKED(jsdc)        (!jsd_IsLocked(jsdc->atomsLock))
    1: #define JSD_OBJECTS_UNLOCKED(jsdc)      (!jsd_IsLocked(jsdc->objectsLock))
    1: #define JSD_THREADSTATES_UNLOCKED(jsdc) (!jsd_IsLocked(jsdc->threadStatesLock))
    1: #else
    1: #define JSD_SCRIPTS_LOCKED(jsdc)        1
    1: #define JSD_SOURCE_TEXT_LOCKED(jsdc)    1
    1: #define JSD_ATOMS_LOCKED(jsdc)          1
    1: #define JSD_OBJECTS_LOCKED(jsdc)        1
    1: #define JSD_THREADSTATES_LOCKED(jsdc)   1
    1: #define JSD_SCRIPTS_UNLOCKED(jsdc)      1
    1: #define JSD_SOURCE_TEXT_UNLOCKED(jsdc)  1
    1: #define JSD_ATOMS_UNLOCKED(jsdc)        1
    1: #define JSD_OBJECTS_UNLOCKED(jsdc)      1
    1: #define JSD_THREADSTATES_UNLOCKED(jsdc) 1
    1: #endif /* defined(JSD_THREADSAFE) && defined(DEBUG) */
    1: 
    1: /***************************************************************************/
    1: /* Threading support */
    1: 
    1: #ifdef JSD_THREADSAFE
    1: 
    1: #define JSD_CURRENT_THREAD()        jsd_CurrentThread()
    1: 
    1: #else  /* !JSD_THREADSAFE */
    1: 
    1: #define JSD_CURRENT_THREAD()        ((void*)0)
    1: 
    1: #endif /* JSD_THREADSAFE */
    1: 
    1: /***************************************************************************/
    1: /* Dangerous thread support */
    1: 
    1: #ifdef JSD_HAS_DANGEROUS_THREAD
    1: 
    1: #define JSD_IS_DANGEROUS_THREAD(jsdc) \
    1:     (JSD_CURRENT_THREAD() == jsdc->dangerousThread)
    1: 
    1: #else  /* !JSD_HAS_DANGEROUS_THREAD */
    1: 
    1: #define JSD_IS_DANGEROUS_THREAD(jsdc)   0
    1: 
    1: #endif /* JSD_HAS_DANGEROUS_THREAD */
    1: 
    1: /***************************************************************************/
    1: /* Value and Property Functions */
    1: 
    1: extern JSDValue*
    1: jsd_NewValue(JSDContext* jsdc, jsval val);
    1: 
    1: extern void
    1: jsd_DropValue(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern jsval
    1: jsd_GetValueWrappedJSVal(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern void
    1: jsd_RefreshValue(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: /**************************************************/
    1: 
    1: extern JSBool
    1: jsd_IsValueObject(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueNumber(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueInt(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueDouble(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueString(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueBoolean(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueNull(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueVoid(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValuePrimitive(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueFunction(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSBool
    1: jsd_IsValueNative(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: /**************************************************/
    1: 
    1: extern JSBool
    1: jsd_GetValueBoolean(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern int32
    1: jsd_GetValueInt(JSDContext* jsdc, JSDValue* jsdval);
    1: 
48470: extern jsdouble
    1: jsd_GetValueDouble(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSString*
    1: jsd_GetValueString(JSDContext* jsdc, JSDValue* jsdval);
    1: 
58976: extern JSString*
61691: jsd_GetValueFunctionId(JSDContext* jsdc, JSDValue* jsdval);
    1: 
60563: extern JSFunction*
60563: jsd_GetValueFunction(JSDContext* jsdc, JSDValue* jsdval);
60563: 
    1: /**************************************************/
    1: 
    1: extern uintN
    1: jsd_GetCountOfProperties(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSDProperty*
    1: jsd_IterateProperties(JSDContext* jsdc, JSDValue* jsdval, JSDProperty **iterp);
    1: 
    1: extern JSDProperty*
    1: jsd_GetValueProperty(JSDContext* jsdc, JSDValue* jsdval, JSString* name);
    1: 
    1: extern JSDValue*
    1: jsd_GetValuePrototype(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSDValue*
    1: jsd_GetValueParent(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern JSDValue*
    1: jsd_GetValueConstructor(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: extern const char*
    1: jsd_GetValueClassName(JSDContext* jsdc, JSDValue* jsdval);
    1: 
33644: extern JSDScript*
33644: jsd_GetScriptForValue(JSDContext* jsdc, JSDValue* jsdval);
33644: 
    1: /**************************************************/
    1: 
    1: extern void
    1: jsd_DropProperty(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: extern JSDValue*
    1: jsd_GetPropertyName(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: extern JSDValue*
    1: jsd_GetPropertyValue(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: extern JSDValue*
    1: jsd_GetPropertyAlias(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: extern uintN
    1: jsd_GetPropertyFlags(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: extern uintN
    1: jsd_GetPropertyVarArgSlot(JSDContext* jsdc, JSDProperty* jsdprop);
    1: 
    1: /**************************************************/
    1: /* Stepping Functions */
    1: 
18907: extern void *
    1: jsd_FunctionCallHook(JSContext *cx, JSStackFrame *fp, JSBool before,
    1:                      JSBool *ok, void *closure);
    1: 
18907: extern void *
    1: jsd_TopLevelCallHook(JSContext *cx, JSStackFrame *fp, JSBool before,
    1:                      JSBool *ok, void *closure);
    1: 
    1: /**************************************************/
    1: /* Object Functions */
    1: 
    1: extern JSBool
    1: jsd_InitObjectManager(JSDContext* jsdc);
    1: 
    1: extern void
    1: jsd_DestroyObjectManager(JSDContext* jsdc);
    1: 
18907: extern void
36192: jsd_DestroyObjects(JSDContext* jsdc);
36192: 
36192: extern void
    1: jsd_Constructing(JSDContext* jsdc, JSContext *cx, JSObject *obj,
    1:                  JSStackFrame *fp);
    1: 
    1: extern JSDObject*
    1: jsd_IterateObjects(JSDContext* jsdc, JSDObject** iterp);
    1: 
    1: extern JSObject*
    1: jsd_GetWrappedObject(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern const char*
    1: jsd_GetObjectNewURL(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern uintN
    1: jsd_GetObjectNewLineNumber(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern const char*
    1: jsd_GetObjectConstructorURL(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern uintN
    1: jsd_GetObjectConstructorLineNumber(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern const char*
    1: jsd_GetObjectConstructorName(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: extern JSDObject*
    1: jsd_GetJSDObjectForJSObject(JSDContext* jsdc, JSObject* jsobj);
    1: 
    1: extern JSDObject*
    1: jsd_GetObjectForValue(JSDContext* jsdc, JSDValue* jsdval);
    1: 
    1: /*
    1: * returns new refcounted JSDValue
    1: */
    1: extern JSDValue*
    1: jsd_GetValueForObject(JSDContext* jsdc, JSDObject* jsdobj);
    1: 
    1: /**************************************************/
    1: /* Atom Functions */
    1: 
    1: extern JSBool
    1: jsd_CreateAtomTable(JSDContext* jsdc);
    1: 
    1: extern void
    1: jsd_DestroyAtomTable(JSDContext* jsdc);
    1: 
    1: extern JSDAtom*
    1: jsd_AddAtom(JSDContext* jsdc, const char* str);
    1: 
    1: extern JSDAtom*
    1: jsd_CloneAtom(JSDContext* jsdc, JSDAtom* atom);
    1: 
    1: extern void
    1: jsd_DropAtom(JSDContext* jsdc, JSDAtom* atom);
    1: 
    1: #define JSD_ATOM_TO_STRING(a) ((const char*)((a)->str))
    1: 
    1: /***************************************************************************/
    1: /* Livewire specific API */
    1: #ifdef LIVEWIRE
    1: 
    1: extern LWDBGScript*
    1: jsdlw_GetLWScript(JSDContext* jsdc, JSDScript* jsdscript);
    1: 
    1: extern char*
    1: jsdlw_BuildAppRelativeFilename(LWDBGApp* app, const char* filename);
    1: 
    1: extern JSDSourceText*
    1: jsdlw_PreLoadSource(JSDContext* jsdc, LWDBGApp* app,
    1:                      const char* filename, JSBool clear);
    1: 
    1: extern JSDSourceText*
    1: jsdlw_ForceLoadSource(JSDContext* jsdc, JSDSourceText* jsdsrc);
    1: 
    1: extern JSBool
    1: jsdlw_UserCodeAtPC(JSDContext* jsdc, JSDScript* jsdscript, jsuword pc);
    1: 
    1: extern JSBool
    1: jsdlw_RawToProcessedLineNumber(JSDContext* jsdc, JSDScript* jsdscript,
    1:                                uintN lineIn, uintN* lineOut);
    1: 
    1: extern JSBool
    1: jsdlw_ProcessedToRawLineNumber(JSDContext* jsdc, JSDScript* jsdscript,
    1:                                uintN lineIn, uintN* lineOut);
    1: 
    1: 
    1: #if 0
    1: /* our hook proc for LiveWire app start/stop */
18907: extern void
    1: jsdlw_AppHookProc(LWDBGApp* app,
    1:                   JSBool created,
    1:                   void *callerdata);
    1: #endif
    1: 
    1: 
    1: #endif
    1: /***************************************************************************/
    1: 
    1: JS_END_EXTERN_C
    1: 
    1: #endif /* jsd_h___ */
