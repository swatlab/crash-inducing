 42565: #ifndef mozilla__ipdltest_TestDataStructures_h
 42565: #define mozilla__ipdltest_TestDataStructures_h 1
 35990: 
 36140: #include "mozilla/_ipdltest/IPDLUnitTests.h"
 35990: 
 42565: #include "mozilla/_ipdltest/PTestDataStructuresParent.h"
 42565: #include "mozilla/_ipdltest/PTestDataStructuresChild.h"
 35990: 
 42565: #include "mozilla/_ipdltest/PTestDataStructuresSubParent.h"
 42565: #include "mozilla/_ipdltest/PTestDataStructuresSubChild.h"
 35990: 
 35990: namespace mozilla {
 35990: namespace _ipdltest {
 35990: 
 35990: //-----------------------------------------------------------------------------
 35990: // Subprotocol actors
 35990: 
 42565: class TestDataStructuresSub :
 42565:         public PTestDataStructuresSubParent,
 42565:         public PTestDataStructuresSubChild
 35990: {
 35990: public:
 42565:     TestDataStructuresSub(uint32 i) : mI(i)
 35990:     { }
 42565:     virtual ~TestDataStructuresSub()
 35990:     { }
104602:     NS_OVERRIDE
104602:     virtual void ActorDestroy(ActorDestroyReason why)
104602:     {
104602:       if (Deletion != why)
104602:         fail("unexpected destruction!");
104602:     }
 35991:   uint32 mI;
 35990: };
 35990: 
 35990: //-----------------------------------------------------------------------------
 35990: // Main actors
 35990: 
 42565: class TestDataStructuresParent :
 42565:     public PTestDataStructuresParent
 35990: {
 35990: public:
 42565:     TestDataStructuresParent();
 42565:     virtual ~TestDataStructuresParent();
 35990: 
 83466:     static bool RunTestInProcesses() { return true; }
 83466:     static bool RunTestInThreads() { return true; }
 83466: 
 35990:     void Main();
 35990: 
 35990: protected:
 36140:     NS_OVERRIDE
 42565:     virtual PTestDataStructuresSubParent* AllocPTestDataStructuresSub(const int& i)
 35990:     {
 42565:         PTestDataStructuresSubParent* actor = new TestDataStructuresSub(i);
 35990:         mKids.AppendElement(actor);
 35990:         return actor;
 35990:     }
 35990: 
 36140:     NS_OVERRIDE
 42565:     virtual bool DeallocPTestDataStructuresSub(PTestDataStructuresSubParent* actor);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest1(
 57141:             const InfallibleTArray<int>& i1,
 57141:             InfallibleTArray<int>* o1);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest2(
 57141:             const InfallibleTArray<PTestDataStructuresSubParent*>& i1,
 57141:             InfallibleTArray<PTestDataStructuresSubParent*>* o1);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest3(
 35990:             const IntDouble& i1,
 35990:             const IntDouble& i2,
 35990:             IntDouble* o1,
 35990:             IntDouble* o2);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest4(
 57141:             const InfallibleTArray<IntDouble>& i1,
 57141:             InfallibleTArray<IntDouble>* o1);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest5(
 35990:             const IntDoubleArrays& i1,
 35990:             const IntDoubleArrays& i2,
 35990:             const IntDoubleArrays& i3,
 35990:             IntDoubleArrays* o1,
 35990:             IntDoubleArrays* o2,
 35990:             IntDoubleArrays* o3);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest6(
 57141:             const InfallibleTArray<IntDoubleArrays>& i1,
 57141:             InfallibleTArray<IntDoubleArrays>* o1);
 35990: 
 36140:     NS_OVERRIDE
104362:     virtual bool RecvTest7_0(const ActorWrapper& i1,
104362:                              ActorWrapper* o1);
104362: 
104362:     NS_OVERRIDE
 35990:     virtual bool RecvTest7(
 35990:             const Actors& i1,
 35990:             const Actors& i2,
 35990:             const Actors& i3,
 35990:             Actors* o1,
 35990:             Actors* o2,
 35990:             Actors* o3);
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest8(
 57141:             const InfallibleTArray<Actors>& i1,
 57141:             InfallibleTArray<Actors>* o1);
 36140: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest9(
 35990:             const Unions& i1,
 35990:             const Unions& i2,
 35990:             const Unions& i3,
 35990:             const Unions& i4,
 35990:             Unions* o1,
 35990:             Unions* o2,
 35990:             Unions* o3,
 35990:             Unions* o4);
 36140: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvTest10(
 57141:             const InfallibleTArray<Unions>& i1,
 57141:             InfallibleTArray<Unions>* o1);
 35990: 
 36140:     NS_OVERRIDE
 42565:     virtual bool RecvTest11(
 42565:             const SIntDouble& i,
 42565:             SIntDouble* o);
 42565: 
 42565:     NS_OVERRIDE
 42565:     virtual bool RecvTest12(
 42565:             const SIntDoubleArrays& i,
 42565:             SIntDoubleArrays* o);
 42565: 
 42565:     NS_OVERRIDE
 42565:     virtual bool RecvTest13(
 42565:             const SActors& i,
 42565:             SActors* o);
 42565: 
 42565:     NS_OVERRIDE
 42565:     virtual bool RecvTest14(
 42565:             const Structs& i,
 42565:             Structs* o);
 42565: 
 42565:     NS_OVERRIDE
 42565:     virtual bool RecvTest15(
 42565:             const WithStructs& i1,
 42565:             const WithStructs& i2,
 42565:             const WithStructs& i3,
 42565:             const WithStructs& i4,
 42565:             const WithStructs& i5,
 42565:             WithStructs* o1,
 42565:             WithStructs* o2,
 42565:             WithStructs* o3,
 42565:             WithStructs* o4,
 42565:             WithStructs* o5);
 42565: 
 42565:     NS_OVERRIDE
 42565:     virtual bool RecvTest16(
 42565:             const WithUnions& i,
 42565:             WithUnions* o);
 42565: 
 42565:     NS_OVERRIDE
 57141:     virtual bool RecvTest17(const InfallibleTArray<Op>& sa);
 43020: 
 43020:     NS_OVERRIDE
 57141:     virtual bool RecvTest18(const InfallibleTArray<nsIntRegion>& ra);
 43908: 
 43908:     NS_OVERRIDE
 52195:     virtual bool RecvDummy(const ShmemUnion& su, ShmemUnion* rsu)
 52195:     {
 52195:         *rsu = su;
 52195:         return true;
 52195:     }
 52195: 
 52195:     NS_OVERRIDE
 36140:     virtual void ActorDestroy(ActorDestroyReason why)
 36140:     {
 36140:         if (NormalShutdown != why)
 36140:             fail("unexpected destruction!");  
 36140:         passed("ok");
 36140:         QuitParent();
 36140:     }
 36140: 
 35990: private:
 57141:     InfallibleTArray<PTestDataStructuresSubParent*> mKids;
 35990: };
 35990: 
 35990: 
 42565: class TestDataStructuresChild :
 42565:     public PTestDataStructuresChild
 35990: {
 35990: public:
 42565:     TestDataStructuresChild();
 42565:     virtual ~TestDataStructuresChild();
 35990: 
 35990: protected:
 36140:     NS_OVERRIDE
 42565:     virtual PTestDataStructuresSubChild* AllocPTestDataStructuresSub(const int& i)
 35990:     {
 42565:         PTestDataStructuresSubChild* actor = new TestDataStructuresSub(i);
 35990:         mKids.AppendElement(actor);
 35990:         return actor;
 35990:     }
 36140: 
 36140:     NS_OVERRIDE
 42565:     virtual bool DeallocPTestDataStructuresSub(PTestDataStructuresSubChild* actor)
 35990:     {
 35990:         delete actor;
 35990:         return true;
 35990:     }
 35990: 
 36140:     NS_OVERRIDE
 35990:     virtual bool RecvStart();
 35990: 
 36140:     NS_OVERRIDE
 36140:     virtual void ActorDestroy(ActorDestroyReason why)
 36140:     {
 36140:         if (NormalShutdown != why)
 36140:             fail("unexpected destruction!");
 36140:         QuitChild();
 36140:     }
 36140: 
 35990: private:
 35990:     void Test1();
 35990:     void Test2();
 35990:     void Test3();
 35990:     void Test4();
 35990:     void Test5();
 35990:     void Test6();
104362:     void Test7_0();
 35990:     void Test7();
 35990:     void Test8();
 35990:     void Test9();
 35990:     void Test10();
 42565:     void Test11();
 42565:     void Test12();
 42565:     void Test13();
 42565:     void Test14();
 42565:     void Test15();
 42565:     void Test16();
 43020:     void Test17();
 43908:     void Test18();
 35990: 
 57141:     InfallibleTArray<PTestDataStructuresSubChild*> mKids;
 35990: };
 35990: 
 35990: 
 35990: } // namespace _ipdltest
 35990: } // namespace mozilla
 35990: 
 35990: 
 42565: #endif // ifndef mozilla__ipdltest_TestDataStructures_h
