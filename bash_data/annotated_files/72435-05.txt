    1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Corporation code.
    1:  *
36532:  * The Initial Developer of the Original Code is Mozilla Foundation.
31590:  * Portions created by the Initial Developer are Copyright (C) 2006-2009
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Vladimir Vukicevic <vladimir@pobox.com>
    1:  *   Masayuki Nakano <masayuki@d-toybox.com>
 9699:  *   John Daggett <jdaggett@mozilla.com>
31590:  *   Jonathan Kew <jfkthame@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
31590: #ifndef gfxMacPlatformFontList_H_
31590: #define gfxMacPlatformFontList_H_
    1: 
    1: #include "nsDataHashtable.h"
11991: #include "nsRefPtrHashtable.h"
    1: 
31590: #include "gfxPlatformFontList.h"
11086: #include "gfxPlatform.h"
72435: #include "gfxPlatformMac.h"
    1: 
 9699: #include <Carbon/Carbon.h>
 9699: 
    1: #include "nsUnicharUtils.h"
23904: #include "nsTArray.h"
    1: 
31590: class gfxMacPlatformFontList;
10880: 
10880: // a single member of a font family (i.e. a single face, such as Times Italic)
16418: class MacOSFontEntry : public gfxFontEntry
    1: {
    1: public:
31590:     friend class gfxMacPlatformFontList;
12989: 
72435:     virtual ~MacOSFontEntry() {
72435:         ::CGFontRelease(mFontRef);
72435:     }
    1: 
72435:     virtual CGFontRef GetFontRef() = 0;
72435: 
72435:     virtual nsresult GetFontTable(PRUint32 aTableTag,
72435:                                   FallibleTArray<PRUint8>& aBuffer) = 0;
72435: 
 9699:     nsresult ReadCMAP();
 9699: 
48069:     PRBool RequiresAATLayout() const { return mRequiresAAT; }
48069: 
55074:     PRBool IsCFF();
55074: 
    1: protected:
72435:     MacOSFontEntry(const nsAString& aPostscriptName, PRInt32 aWeight,
72435:                    gfxFontFamily *aFamily, PRBool aIsStandardFace = PR_FALSE);
19962: 
37211:     virtual gfxFont* CreateFontInstance(const gfxFontStyle *aFontStyle, PRBool aNeedsBold);
37211: 
72435:     virtual PRBool HasFontTable(PRUint32 aTableTag) = 0;
72435: 
72435:     CGFontRef mFontRef; // owning reference to the CGFont, released on destruction
72435: 
72435:     PRPackedBool mFontRefInitialized;
48069:     PRPackedBool mRequiresAAT;
55074:     PRPackedBool mIsCFF;
55074:     PRPackedBool mIsCFFInitialized;
10880: };
 9699: 
72435: // concrete subclasses of MacOSFontEntry: ATSFontEntry for 10.5, CGFontEntry for 10.6+
72435: class ATSFontEntry : public MacOSFontEntry
72435: {
72435: public:
72435:     ATSFontEntry(const nsAString& aPostscriptName, PRInt32 aWeight,
72435:                  gfxFontFamily *aFamily, PRBool aIsStandardFace = PR_FALSE);
72435: 
72435:     // for use with data fonts
72435:     ATSFontEntry(const nsAString& aPostscriptName, ATSFontRef aFontRef,
72435:                  PRUint16 aWeight, PRUint16 aStretch, PRUint32 aItalicStyle,
72435:                  gfxUserFontData *aUserFontData, PRBool aIsLocal);
72435: 
72435:     ATSFontRef GetATSFontRef();
72435: 
72435:     virtual CGFontRef GetFontRef();
72435: 
72435:     virtual nsresult GetFontTable(PRUint32 aTableTag,
72435:                                   FallibleTArray<PRUint8>& aBuffer);
72435: 
72435: protected:
72435:     virtual PRBool HasFontTable(PRUint32 aTableTag);
72435: 
72435:     ATSFontRef   mATSFontRef;
72435:     PRPackedBool mATSFontRefInitialized;
72435: };
72435: 
72435: class CGFontEntry : public MacOSFontEntry
72435: {
72435: public:
72435:     CGFontEntry(const nsAString& aPostscriptName, PRInt32 aWeight,
72435:                 gfxFontFamily *aFamily, PRBool aIsStandardFace = PR_FALSE);
72435: 
72435:     // for use with data fonts
72435:     CGFontEntry(const nsAString& aPostscriptName, CGFontRef aFontRef,
72435:                 PRUint16 aWeight, PRUint16 aStretch, PRUint32 aItalicStyle,
72435:                 PRBool aIsUserFont, PRBool aIsLocal);
72435: 
72435:     virtual CGFontRef GetFontRef();
72435: 
72435:     virtual nsresult GetFontTable(PRUint32 aTableTag,
72435:                                   FallibleTArray<PRUint8>& aBuffer);
72435: 
72435: protected:
72435:     virtual PRBool HasFontTable(PRUint32 aTableTag);
72435: };
72435: 
31590: class gfxMacPlatformFontList : public gfxPlatformFontList {
10880: public:
31590:     static gfxMacPlatformFontList* PlatformFontList() {
36949:         return static_cast<gfxMacPlatformFontList*>(sPlatformFontList);
10880:     }
10880: 
31590:     static PRInt32 AppleWeightToCSSWeight(PRInt32 aAppleWeight);
10880: 
31590:     virtual gfxFontEntry* GetDefaultFont(const gfxFontStyle* aStyle, PRBool& aNeedsBold);
10880: 
31590:     virtual PRBool GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName);
12239: 
31590:     virtual gfxFontEntry* LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
31590:                                           const nsAString& aFontName);
11991:     
36949:     virtual gfxFontEntry* MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
31590:                                            const PRUint8 *aFontData, PRUint32 aLength);
    1: 
26915:     void ClearPrefFonts() { mPrefFonts.Clear(); }
26915: 
72435:     static PRBool UseATSFontEntry() {
72435:         return gfxPlatformMac::GetPlatform()->OSXVersion() < MAC_OS_X_VERSION_10_6_HEX;
72435:     }
72435: 
31590: private:
31590:     friend class gfxPlatformMac;
    1: 
31590:     gfxMacPlatformFontList();
    1: 
11991:     // initialize font lists
57104:     virtual nsresult InitFontList();
11991: 
12239:     // special case font faces treated as font families (set via prefs)
12239:     void InitSingleFaceList();
12239: 
72435:     gfxFontEntry* MakePlatformFontCG(const gfxProxyFontEntry *aProxyEntry,
72435:                                      const PRUint8 *aFontData, PRUint32 aLength);
72435: 
72435:     gfxFontEntry* MakePlatformFontATS(const gfxProxyFontEntry *aProxyEntry,
72435:                                       const PRUint8 *aFontData, PRUint32 aLength);
12239: 
10880:     static void ATSNotification(ATSFontNotificationInfoRef aInfo, void* aUserArg);
    1: 
19962:     // keep track of ATS generation to prevent unneeded updates when loading downloaded fonts
19962:     PRUint32 mATSGeneration;
19962: 
19962:     enum {
19962:         kATSGenerationInitial = -1
19962:     };
    1: };
    1: 
31590: #endif /* gfxMacPlatformFontList_H_ */
