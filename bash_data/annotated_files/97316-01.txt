    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "necko-config.h"
    1: 
46672: #define ALLOW_LATE_NSHTTP_H_INCLUDE 1
46517: #include "base/basictypes.h"
46517: 
    1: #include "nsCOMPtr.h"
    1: #include "nsIClassInfoImpl.h"
46998: #include "mozilla/ModuleUtils.h"
    1: #include "nsIComponentManager.h"
    1: #include "nsIServiceManager.h"
    1: #include "nsICategoryManager.h"
    1: #include "nsSocketProviderService.h"
    1: #include "nscore.h"
    1: #include "nsSimpleURI.h"
    1: #include "nsSimpleNestedURI.h"
    1: #include "nsLoadGroup.h"
    1: #include "nsStreamLoader.h"
    1: #include "nsUnicharStreamLoader.h"
    1: #include "nsFileStreams.h"
    1: #include "nsBufferedStreams.h"
    1: #include "nsMIMEInputStream.h"
    1: #include "nsSOCKSSocketProvider.h"
    1: #include "nsCacheService.h"
18430: #include "nsDiskCacheDeviceSQL.h"
56242: #include "nsApplicationCache.h"
97316: #include "nsApplicationCacheService.h"
    1: #include "nsMimeTypes.h"
    1: #include "nsNetStrings.h"
21577: #include "nsDNSPrefetch.h"
26246: #include "nsAboutProtocolHandler.h"
72966: #include "nsXULAppAPI.h"
    1: 
    1: #include "nsNetCID.h"
    1: 
    1: #if defined(XP_MACOSX)
27620: #if !defined(__LP64__)
    1: #define BUILD_APPLEFILE_DECODER 1
27620: #endif
    1: #else
    1: #define BUILD_BINHEX_DECODER 1
    1: #endif
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsIOService.h"
    1: NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR(nsIOService, nsIOService::GetInstance)
    1: 
    1: #include "nsDNSService2.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsDNSService, Init)
    1:   
    1: #include "nsProtocolProxyService.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsProtocolProxyService, Init)
    1: 
    1: #include "nsStreamTransportService.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsStreamTransportService, Init)
    1: 
    1: #include "nsSocketTransportService2.h"
    1: #undef LOG
    1: #undef LOG_ENABLED
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsSocketTransportService, Init)
    1: 
    1: #include "nsServerSocket.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsServerSocket)
    1: 
 2032: #include "nsUDPSocketProvider.h"
 2032: NS_GENERIC_FACTORY_CONSTRUCTOR(nsUDPSocketProvider)
 2032: 
    1: #include "nsAsyncStreamCopier.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAsyncStreamCopier)
    1: 
    1: #include "nsInputStreamPump.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsInputStreamPump)
    1: 
    1: #include "nsInputStreamChannel.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsInputStreamChannel, Init)
    1: 
    1: #include "nsDownloader.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsDownloader)
    1: 
    1: #include "nsSyncStreamListener.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsSyncStreamListener, Init)
    1: 
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSafeFileOutputStream)
    1: 
    1: NS_GENERIC_AGGREGATED_CONSTRUCTOR_INIT(nsLoadGroup, Init)
    1: 
    1: #include "nsEffectiveTLDService.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsEffectiveTLDService, Init)
    1: 
56495: #include "nsSerializationHelper.h"
56495: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSerializationHelper)
56495: 
58111: #include "RedirectChannelRegistrar.h"
58111: typedef mozilla::net::RedirectChannelRegistrar RedirectChannelRegistrar;
58111: NS_GENERIC_FACTORY_CONSTRUCTOR(RedirectChannelRegistrar)
58111: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
46998: extern nsresult
    1: net_NewIncrementalDownload(nsISupports *, const nsIID &, void **);
    1: 
    1: #define NS_INCREMENTALDOWNLOAD_CLASSNAME \
    1:     "nsIncrementalDownload"
    1: #define NS_INCREMENTALDOWNLOAD_CID \
    1: { /* a62af1ba-79b3-4896-8aaf-b148bfce4280 */         \
    1:     0xa62af1ba,                                      \
    1:     0x79b3,                                          \
    1:     0x4896,                                          \
    1:     {0x8a, 0xaf, 0xb1, 0x48, 0xbf, 0xce, 0x42, 0x80} \
    1: }
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsStreamConverterService.h"
    1: 
    1: #ifdef BUILD_APPLEFILE_DECODER
    1: #include "nsAppleFileDecoder.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAppleFileDecoder)
    1: #endif
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsMIMEHeaderParamImpl.h"
    1: 
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsMIMEHeaderParamImpl)
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsRequestObserverProxy.h"
    1: #include "nsSimpleStreamListener.h"
    1: #include "nsDirIndexParser.h"
    1: #include "nsDirIndex.h"
    1: 
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsRequestObserverProxy)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSimpleStreamListener)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsDirIndexParser, Init)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsDirIndex)
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsStreamListenerTee.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsStreamListenerTee)
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #ifdef NECKO_COOKIES
    1: #include "nsCookieService.h"
46770: NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR(nsICookieService,
46770:   nsCookieService::GetXPCOMSingleton)
    1: #endif
    1: 
26270: ///////////////////////////////////////////////////////////////////////////////
26270: #ifdef NECKO_WIFI
26270: 
26270: #include "nsWifiMonitor.h"
31718: #undef LOG
31718: #undef LOG_ENABLED
26270: NS_GENERIC_FACTORY_CONSTRUCTOR(nsWifiMonitor)
26270: 
26270: #endif
26270: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: // protocols
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: // about:blank is mandatory
    1: #include "nsAboutProtocolHandler.h"
    1: #include "nsAboutBlank.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAboutProtocolHandler)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSafeAboutProtocolHandler)
26246: NS_GENERIC_FACTORY_CONSTRUCTOR(nsNestedAboutURI)
    1: 
    1: #ifdef NECKO_PROTOCOL_about
    1: // about
 6900: #ifdef NS_BUILD_REFCNT_LOGGING
    1: #include "nsAboutBloat.h"
 6900: #endif
    1: #include "nsAboutCache.h"
    1: #include "nsAboutCacheEntry.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAboutCacheEntry)
    1: #endif
    1: 
97316: NS_GENERIC_FACTORY_CONSTRUCTOR(nsApplicationCacheService)
19925: NS_GENERIC_FACTORY_CONSTRUCTOR(nsApplicationCacheNamespace)
56242: NS_GENERIC_FACTORY_CONSTRUCTOR(nsApplicationCache)
18430: 
    1: #ifdef NECKO_PROTOCOL_file
    1: // file
    1: #include "nsFileProtocolHandler.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsFileProtocolHandler, Init)
    1: #endif
    1: 
    1: #ifdef NECKO_PROTOCOL_ftp
    1: // ftp
    1: #include "nsFtpProtocolHandler.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsFtpProtocolHandler, Init)
    1: #endif
    1: 
    1: #ifdef NECKO_PROTOCOL_http
    1: // http/https
    1: #include "nsHttpHandler.h"
31718: #undef LOG
31718: #undef LOG_ENABLED
    1: #include "nsHttpAuthManager.h"
43832: #include "nsHttpChannelAuthProvider.h"
    1: #include "nsHttpBasicAuth.h"
    1: #include "nsHttpDigestAuth.h"
    1: #include "nsHttpNTLMAuth.h"
32142: #include "nsHttpActivityDistributor.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsHttpNTLMAuth)
    1: #undef LOG
    1: #undef LOG_ENABLED
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsHttpHandler, Init)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsHttpsHandler, Init)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsHttpAuthManager, Init)
43832: NS_GENERIC_FACTORY_CONSTRUCTOR(nsHttpChannelAuthProvider)
64576: NS_GENERIC_FACTORY_CONSTRUCTOR(nsHttpActivityDistributor)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsHttpBasicAuth)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsHttpDigestAuth)
    1: #endif // !NECKO_PROTOCOL_http
    1: 
    1: #ifdef NECKO_PROTOCOL_res
    1: // resource
    1: #include "nsResProtocolHandler.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsResProtocolHandler, Init)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsResURL)
    1: #endif
    1: 
51437: #ifdef NECKO_PROTOCOL_device
51437: #include "nsDeviceProtocolHandler.h"
51437: NS_GENERIC_FACTORY_CONSTRUCTOR(nsDeviceProtocolHandler)
89587: #ifdef MOZ_WIDGET_GONK
89587: #include "nsB2GProtocolHandler.h"
89587: NS_GENERIC_FACTORY_CONSTRUCTOR(nsB2GProtocolHandler)
89587: #endif
51437: #endif
51437: 
    1: #ifdef NECKO_PROTOCOL_viewsource
    1: #include "nsViewSourceHandler.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsViewSourceHandler)
    1: #endif
    1: 
    1: #ifdef NECKO_PROTOCOL_data
    1: #include "nsDataHandler.h"
    1: #endif
    1: 
56090: #ifdef NECKO_PROTOCOL_wyciwyg
56090: #include "nsWyciwygProtocolHandler.h"
56090: NS_GENERIC_FACTORY_CONSTRUCTOR(nsWyciwygProtocolHandler)
56090: #endif
56090: 
70220: #ifdef NECKO_PROTOCOL_websocket
73020: #include "WebSocketChannel.h"
72966: #include "WebSocketChannelChild.h"
70220: namespace mozilla {
70220: namespace net {
72966: static BaseWebSocketChannel*
73020: WebSocketChannelConstructor(bool aSecure)
72966: {
72966:   if (IsNeckoChild()) {
72966:     return new WebSocketChannelChild(aSecure);
72966:   }
72966: 
72966:   if (aSecure) {
73020:     return new WebSocketSSLChannel;
72966:   } else {
73020:     return new WebSocketChannel;
72966:   }
72966: }
72966: 
72966: #define WEB_SOCKET_HANDLER_CONSTRUCTOR(type, secure)  \
72966: static nsresult                                       \
72966: type##Constructor(nsISupports *aOuter, REFNSIID aIID, \
72966:                   void **aResult)                     \
72966: {                                                     \
72966:   nsresult rv;                                        \
72966:                                                       \
72966:   BaseWebSocketChannel * inst;                        \
72966:                                                       \
72966:   *aResult = NULL;                                    \
72966:   if (NULL != aOuter) {                               \
72966:     rv = NS_ERROR_NO_AGGREGATION;                     \
72966:     return rv;                                        \
72966:   }                                                   \
73020:   inst = WebSocketChannelConstructor(secure);         \
72966:   NS_ADDREF(inst);                                    \
72966:   rv = inst->QueryInterface(aIID, aResult);           \
72966:   NS_RELEASE(inst);                                   \
72966:   return rv;                                          \
72966: }
72966: 
73020: WEB_SOCKET_HANDLER_CONSTRUCTOR(WebSocketChannel, false)
73020: WEB_SOCKET_HANDLER_CONSTRUCTOR(WebSocketSSLChannel, true)
72966: #undef WEB_SOCKET_HANDLER_CONSTRUCTOR
70220: } // namespace mozilla::net
70220: } // namespace mozilla
70220: #endif
70220: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsURIChecker.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsURIChecker)
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsURLParsers.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsNoAuthURLParser)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAuthURLParser)
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsStdURLParser)
    1: 
    1: #include "nsStandardURL.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsStandardURL)
    1: 
43553: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSimpleURI)
    1: 
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsSimpleNestedURI)
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #include "nsIDNService.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsIDNService, Init)
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
26271: #if defined(XP_WIN)
    1: #include "nsNotifyAddrListener.h"
    1: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsNotifyAddrListener, Init)
19933: #elif defined(MOZ_WIDGET_COCOA)
19933: #include "nsNetworkLinkService.h"
19933: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsNetworkLinkService, Init)
35003: #elif defined(MOZ_ENABLE_LIBCONIC)
35003: #include "nsMaemoNetworkLinkService.h"
35003: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsMaemoNetworkLinkService, Init)
51789: #elif defined(MOZ_ENABLE_QTNETWORK)
51789: #include "nsQtNetworkLinkService.h"
51789: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsQtNetworkLinkService, Init)
82142: #elif defined(MOZ_WIDGET_ANDROID)
60931: #include "nsAndroidNetworkLinkService.h"
60931: NS_GENERIC_FACTORY_CONSTRUCTOR(nsAndroidNetworkLinkService)
    1: #endif
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: 
    1: #ifdef NECKO_PROTOCOL_ftp
    1: #include "nsFTPDirListingConv.h"
    1: nsresult NS_NewFTPDirListingConv(nsFTPDirListingConv** result);
    1: #endif
    1: 
    1: #include "nsMultiMixedConv.h"
    1: #include "nsHTTPCompressConv.h"
    1: #include "mozTXTToHTMLConv.h"
    1: #include "nsUnknownDecoder.h"
    1: #include "nsTXTToHTMLConv.h"
    1: #include "nsIndexedToHTML.h"
    1: #ifdef BUILD_BINHEX_DECODER
    1: #include "nsBinHexDecoder.h"
    1: #endif
    1: 
    1: nsresult NS_NewMultiMixedConv (nsMultiMixedConv** result);
    1: nsresult MOZ_NewTXTToHTMLConv (mozTXTToHTMLConv** result);
    1: nsresult NS_NewHTTPCompressConv  (nsHTTPCompressConv ** result);
    1: nsresult NS_NewNSTXTToHTMLConv(nsTXTToHTMLConv** result);
    1: nsresult NS_NewStreamConv(nsStreamConverterService **aStreamConv);
    1: 
    1: #define FTP_TO_INDEX                 "?from=text/ftp-dir&to=application/http-index-format"
    1: #define INDEX_TO_HTML                "?from=application/http-index-format&to=text/html"
    1: #define MULTI_MIXED_X                "?from=multipart/x-mixed-replace&to=*/*"
    1: #define MULTI_MIXED                  "?from=multipart/mixed&to=*/*"
    1: #define MULTI_BYTERANGES             "?from=multipart/byteranges&to=*/*"
    1: #define UNKNOWN_CONTENT              "?from=" UNKNOWN_CONTENT_TYPE "&to=*/*"
    1: #define GZIP_TO_UNCOMPRESSED         "?from=gzip&to=uncompressed"
    1: #define XGZIP_TO_UNCOMPRESSED        "?from=x-gzip&to=uncompressed"
    1: #define COMPRESS_TO_UNCOMPRESSED     "?from=compress&to=uncompressed"
    1: #define XCOMPRESS_TO_UNCOMPRESSED    "?from=x-compress&to=uncompressed"
    1: #define DEFLATE_TO_UNCOMPRESSED      "?from=deflate&to=uncompressed"
    1: #define PLAIN_TO_HTML                "?from=text/plain&to=text/html"
    1: 
    1: #ifdef BUILD_BINHEX_DECODER
    1: #define BINHEX_TO_WILD               "?from=application/mac-binhex40&to=*/*"
    1: #endif
    1: 
46998: static const mozilla::Module::CategoryEntry kNeckoCategories[] = {
46998:     { NS_ISTREAMCONVERTER_KEY, FTP_TO_INDEX, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, INDEX_TO_HTML, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, MULTI_MIXED_X, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, MULTI_MIXED, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, MULTI_BYTERANGES, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, UNKNOWN_CONTENT, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, GZIP_TO_UNCOMPRESSED, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, XGZIP_TO_UNCOMPRESSED, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, COMPRESS_TO_UNCOMPRESSED, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, XCOMPRESS_TO_UNCOMPRESSED, "" },
46998:     { NS_ISTREAMCONVERTER_KEY, DEFLATE_TO_UNCOMPRESSED, "" },
    1: #ifdef BUILD_BINHEX_DECODER
46998:     { NS_ISTREAMCONVERTER_KEY, BINHEX_TO_WILD, "" },
    1: #endif
46998:     { NS_ISTREAMCONVERTER_KEY, PLAIN_TO_HTML, "" },
46998:     NS_BINARYDETECTOR_CATEGORYENTRY,
46998:     { NULL }
    1: };
    1: 
    1: #ifdef BUILD_BINHEX_DECODER
    1: NS_GENERIC_FACTORY_CONSTRUCTOR(nsBinHexDecoder)
    1: #endif
    1: 
46998: static nsresult
    1: CreateNewStreamConvServiceFactory(nsISupports* aOuter, REFNSIID aIID, void **aResult) 
    1: {
    1:     if (!aResult) {                                                  
    1:         return NS_ERROR_INVALID_POINTER;                             
    1:     }
    1:     if (aOuter) {                                                    
    1:         *aResult = nsnull;                                           
    1:         return NS_ERROR_NO_AGGREGATION;                              
    1:     }   
    1:     nsStreamConverterService* inst = nsnull;
    1:     nsresult rv = NS_NewStreamConv(&inst);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:         return rv;                                                   
    1:     } 
    1:     rv = inst->QueryInterface(aIID, aResult);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:     }                                                                
    1:     NS_RELEASE(inst);             /* get rid of extra refcnt */      
    1:     return rv;              
    1: }
    1: 
    1: #ifdef NECKO_PROTOCOL_ftp
46998: static nsresult
    1: CreateNewFTPDirListingConv(nsISupports* aOuter, REFNSIID aIID, void **aResult) 
    1: {
    1:     if (!aResult) {                                                  
    1:         return NS_ERROR_INVALID_POINTER;                             
    1:     }
    1:     if (aOuter) {                                                    
    1:         *aResult = nsnull;                                           
    1:         return NS_ERROR_NO_AGGREGATION;                              
    1:     }   
    1:     nsFTPDirListingConv* inst = nsnull;
    1:     nsresult rv = NS_NewFTPDirListingConv(&inst);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:         return rv;                                                   
    1:     } 
    1:     rv = inst->QueryInterface(aIID, aResult);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:     }                                                                
    1:     NS_RELEASE(inst);             /* get rid of extra refcnt */      
    1:     return rv;              
    1: }
    1: #endif
    1: 
46998: static nsresult
    1: CreateNewMultiMixedConvFactory(nsISupports* aOuter, REFNSIID aIID, void **aResult) 
    1: {
    1:     if (!aResult) {                                                  
    1:         return NS_ERROR_INVALID_POINTER;                             
    1:     }
    1:     if (aOuter) {                                                    
    1:         *aResult = nsnull;                                           
    1:         return NS_ERROR_NO_AGGREGATION;                              
    1:     }   
    1:     nsMultiMixedConv* inst = nsnull;
    1:     nsresult rv = NS_NewMultiMixedConv(&inst);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:         return rv;                                                   
    1:     } 
    1:     rv = inst->QueryInterface(aIID, aResult);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:     }                                                                
    1:     NS_RELEASE(inst);             /* get rid of extra refcnt */      
    1:     return rv;              
    1: }
    1: 
46998: static nsresult
    1: CreateNewTXTToHTMLConvFactory(nsISupports* aOuter, REFNSIID aIID, void **aResult) 
    1: {
    1:     if (!aResult) {                                                  
    1:         return NS_ERROR_INVALID_POINTER;                             
    1:     }
    1:     if (aOuter) {                                                    
    1:         *aResult = nsnull;                                           
    1:         return NS_ERROR_NO_AGGREGATION;                              
    1:     }   
    1:     mozTXTToHTMLConv* inst = nsnull;
    1:     nsresult rv = MOZ_NewTXTToHTMLConv(&inst);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:         return rv;                                                   
    1:     } 
    1:     rv = inst->QueryInterface(aIID, aResult);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:     }                                                                
    1:     NS_RELEASE(inst);             /* get rid of extra refcnt */      
    1:     return rv;              
    1: }
    1: 
46998: static nsresult
    1: CreateNewHTTPCompressConvFactory (nsISupports* aOuter, REFNSIID aIID, void **aResult) 
    1: {
    1:     if (!aResult) {                                                  
    1:         return NS_ERROR_INVALID_POINTER;                             
    1:     }
    1:     if (aOuter) {                                                    
    1:         *aResult = nsnull;                                           
    1:         return NS_ERROR_NO_AGGREGATION;                              
    1:     }   
    1:     nsHTTPCompressConv* inst = nsnull;
    1:     nsresult rv = NS_NewHTTPCompressConv (&inst);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:         return rv;                                                   
    1:     } 
    1:     rv = inst->QueryInterface(aIID, aResult);
    1:     if (NS_FAILED(rv)) {                                             
    1:         *aResult = nsnull;                                           
    1:     }                                                                
    1:     NS_RELEASE(inst);             /* get rid of extra refcnt */      
    1:     return rv;              
    1: }
    1: 
46998: static nsresult
    1: CreateNewUnknownDecoderFactory(nsISupports *aOuter, REFNSIID aIID, void **aResult)
    1: {
    1:   nsresult rv;
    1: 
    1:   if (!aResult) {
    1:     return NS_ERROR_NULL_POINTER;
    1:   }
    1:   *aResult = nsnull;
    1: 
    1:   if (aOuter) {
    1:     return NS_ERROR_NO_AGGREGATION;
    1:   }
    1: 
    1:   nsUnknownDecoder *inst;
    1:   
    1:   inst = new nsUnknownDecoder();
    1:   if (!inst) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1:   NS_ADDREF(inst);
    1:   rv = inst->QueryInterface(aIID, aResult);
    1:   NS_RELEASE(inst);
    1: 
    1:   return rv;
    1: }
    1: 
46998: static nsresult
    1: CreateNewBinaryDetectorFactory(nsISupports *aOuter, REFNSIID aIID, void **aResult)
    1: {
    1:   nsresult rv;
    1: 
    1:   if (!aResult) {
    1:     return NS_ERROR_NULL_POINTER;
    1:   }
    1:   *aResult = nsnull;
    1: 
    1:   if (aOuter) {
    1:     return NS_ERROR_NO_AGGREGATION;
    1:   }
    1: 
    1:   nsBinaryDetector* inst = new nsBinaryDetector();
    1:   if (!inst) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1:   NS_ADDREF(inst);
    1:   rv = inst->QueryInterface(aIID, aResult);
    1:   NS_RELEASE(inst);
    1: 
    1:   return rv;
    1: }
    1: 
46998: static nsresult
    1: CreateNewNSTXTToHTMLConvFactory(nsISupports *aOuter, REFNSIID aIID, void **aResult)
    1: {
    1:   nsresult rv;
    1: 
    1:   if (!aResult) {
    1:     return NS_ERROR_NULL_POINTER;
    1:   }
    1:   *aResult = nsnull;
    1: 
    1:   if (aOuter) {
    1:     return NS_ERROR_NO_AGGREGATION;
    1:   }
    1: 
    1:   nsTXTToHTMLConv *inst;
    1:   
    1:   inst = new nsTXTToHTMLConv();
    1:   if (!inst) return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   NS_ADDREF(inst);
    1:   rv = inst->Init();
    1:   if (NS_FAILED(rv)) {
    1:     delete inst;
    1:     return rv;
    1:   }
    1:   rv = inst->QueryInterface(aIID, aResult);
    1:   NS_RELEASE(inst);
    1: 
    1:   return rv;
    1: }
    1: 
    1: ///////////////////////////////////////////////////////////////////////////////
    1: // Module implementation for the net library
    1: 
    1: // Net module startup hook
46998: static nsresult nsNetStartup()
    1: {
    1:     gNetStrings = new nsNetStrings();
    1:     return gNetStrings ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
    1: }
    1: 
    1: 
    1: // Net module shutdown hook
46998: static void nsNetShutdown()
    1: {
    1:     // Release the url parser that the stdurl is holding.
    1:     nsStandardURL::ShutdownGlobalObjects();
    1: 
    1:     // Release global state used by the URL helper module.
    1:     net_ShutdownURLHelper();
 6558: #ifdef XP_MACOSX
 6558:     net_ShutdownURLHelperOSX();
 6558: #endif
    1:     
    1:     // Release necko strings
    1:     delete gNetStrings;
    1:     gNetStrings = nsnull;
21577:     
21577:     // Release DNS service reference.
21577:     nsDNSPrefetch::Shutdown();
70220: 
72472: #ifdef NECKO_PROTOCOL_websocket
70220:     // Release the Websocket Admission Manager
73020:     mozilla::net::WebSocketChannel::Shutdown();
72472: #endif // NECKO_PROTOCOL_websocket
    1: }
    1: 
46998: NS_DEFINE_NAMED_CID(NS_IOSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_STREAMTRANSPORTSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_SOCKETTRANSPORTSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_SERVERSOCKET_CID);
46998: NS_DEFINE_NAMED_CID(NS_SOCKETPROVIDERSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_DNSSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_IDNSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_EFFECTIVETLDSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_SIMPLEURI_CID);
46998: NS_DEFINE_NAMED_CID(NS_SIMPLENESTEDURI_CID);
46998: NS_DEFINE_NAMED_CID(NS_ASYNCSTREAMCOPIER_CID);
46998: NS_DEFINE_NAMED_CID(NS_INPUTSTREAMPUMP_CID);
46998: NS_DEFINE_NAMED_CID(NS_INPUTSTREAMCHANNEL_CID);
46998: NS_DEFINE_NAMED_CID(NS_STREAMLOADER_CID);
46998: NS_DEFINE_NAMED_CID(NS_UNICHARSTREAMLOADER_CID);
46998: NS_DEFINE_NAMED_CID(NS_DOWNLOADER_CID);
46998: NS_DEFINE_NAMED_CID(NS_SYNCSTREAMLISTENER_CID);
46998: NS_DEFINE_NAMED_CID(NS_REQUESTOBSERVERPROXY_CID);
46998: NS_DEFINE_NAMED_CID(NS_SIMPLESTREAMLISTENER_CID);
46998: NS_DEFINE_NAMED_CID(NS_STREAMLISTENERTEE_CID);
46998: NS_DEFINE_NAMED_CID(NS_LOADGROUP_CID);
46998: NS_DEFINE_NAMED_CID(NS_LOCALFILEINPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_LOCALFILEOUTPUTSTREAM_CID);
55459: NS_DEFINE_NAMED_CID(NS_PARTIALLOCALFILEINPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_SAFELOCALFILEOUTPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_URICHECKER_CID);
46998: NS_DEFINE_NAMED_CID(NS_INCREMENTALDOWNLOAD_CID);
46998: NS_DEFINE_NAMED_CID(NS_STDURLPARSER_CID);
46998: NS_DEFINE_NAMED_CID(NS_NOAUTHURLPARSER_CID);
46998: NS_DEFINE_NAMED_CID(NS_AUTHURLPARSER_CID);
46998: NS_DEFINE_NAMED_CID(NS_STANDARDURL_CID);
46998: NS_DEFINE_NAMED_CID(NS_BUFFEREDINPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_BUFFEREDOUTPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_MIMEINPUTSTREAM_CID);
46998: NS_DEFINE_NAMED_CID(NS_PROTOCOLPROXYSERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_STREAMCONVERTERSERVICE_CID);
    1: #ifdef BUILD_APPLEFILE_DECODER
46998: NS_DEFINE_NAMED_CID(NS_APPLEFILEDECODER_CID);
46998: #endif
46998: #ifdef NECKO_PROTOCOL_ftp
46998: NS_DEFINE_NAMED_CID(NS_FTPDIRLISTINGCONVERTER_CID);
46998: #endif
46998: NS_DEFINE_NAMED_CID(NS_NSINDEXEDTOHTMLCONVERTER_CID);
46998: NS_DEFINE_NAMED_CID(NS_DIRINDEXPARSER_CID);
46998: NS_DEFINE_NAMED_CID(NS_MULTIMIXEDCONVERTER_CID);
46998: NS_DEFINE_NAMED_CID(NS_UNKNOWNDECODER_CID);
46998: NS_DEFINE_NAMED_CID(NS_BINARYDETECTOR_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPCOMPRESSCONVERTER_CID);
46998: NS_DEFINE_NAMED_CID(NS_NSTXTTOHTMLCONVERTER_CID);
46998: #ifdef BUILD_BINHEX_DECODER
46998: NS_DEFINE_NAMED_CID(NS_BINHEXDECODER_CID);
46998: #endif
46998: NS_DEFINE_NAMED_CID(MOZITXTTOHTMLCONV_CID);
46998: NS_DEFINE_NAMED_CID(NS_DIRINDEX_CID);
46998: NS_DEFINE_NAMED_CID(NS_MIMEHEADERPARAM_CID);
46998: #ifdef NECKO_PROTOCOL_file
46998: NS_DEFINE_NAMED_CID(NS_FILEPROTOCOLHANDLER_CID);
46998: #endif
46998: #ifdef NECKO_PROTOCOL_http
46998: NS_DEFINE_NAMED_CID(NS_HTTPPROTOCOLHANDLER_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPSPROTOCOLHANDLER_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPBASICAUTH_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPDIGESTAUTH_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPNTLMAUTH_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPAUTHMANAGER_CID);
47008: NS_DEFINE_NAMED_CID(NS_HTTPCHANNELAUTHPROVIDER_CID);
46998: NS_DEFINE_NAMED_CID(NS_HTTPACTIVITYDISTRIBUTOR_CID);
46998: #endif // !NECKO_PROTOCOL_http
46998: #ifdef NECKO_PROTOCOL_ftp
46998: NS_DEFINE_NAMED_CID(NS_FTPPROTOCOLHANDLER_CID);
46998: #endif
46998: #ifdef NECKO_PROTOCOL_res
46998: NS_DEFINE_NAMED_CID(NS_RESPROTOCOLHANDLER_CID);
46998: NS_DEFINE_NAMED_CID(NS_RESURL_CID);
46998: #endif
46998: NS_DEFINE_NAMED_CID(NS_ABOUTPROTOCOLHANDLER_CID);
46998: NS_DEFINE_NAMED_CID(NS_SAFEABOUTPROTOCOLHANDLER_CID);
46998: NS_DEFINE_NAMED_CID(NS_ABOUT_BLANK_MODULE_CID);
46998: NS_DEFINE_NAMED_CID(NS_NESTEDABOUTURI_CID);
46998: #ifdef NECKO_PROTOCOL_about
46998: #ifdef NS_BUILD_REFCNT_LOGGING
46998: NS_DEFINE_NAMED_CID(NS_ABOUT_BLOAT_MODULE_CID);
46998: #endif
46998: NS_DEFINE_NAMED_CID(NS_ABOUT_CACHE_MODULE_CID);
46998: NS_DEFINE_NAMED_CID(NS_ABOUT_CACHE_ENTRY_MODULE_CID);
46998: #endif
46998: NS_DEFINE_NAMED_CID(NS_SOCKSSOCKETPROVIDER_CID);
46998: NS_DEFINE_NAMED_CID(NS_SOCKS4SOCKETPROVIDER_CID);
46998: NS_DEFINE_NAMED_CID(NS_UDPSOCKETPROVIDER_CID);
46998: NS_DEFINE_NAMED_CID(NS_CACHESERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_APPLICATIONCACHESERVICE_CID);
46998: NS_DEFINE_NAMED_CID(NS_APPLICATIONCACHENAMESPACE_CID);
56242: NS_DEFINE_NAMED_CID(NS_APPLICATIONCACHE_CID);
46998: #ifdef NECKO_COOKIES
46998: NS_DEFINE_NAMED_CID(NS_COOKIEMANAGER_CID);
46998: NS_DEFINE_NAMED_CID(NS_COOKIESERVICE_CID);
46998: #endif
46998: #ifdef NECKO_WIFI
46998: NS_DEFINE_NAMED_CID(NS_WIFI_MONITOR_COMPONENT_CID);
46998: #endif
46998: #ifdef NECKO_PROTOCOL_data
46998: NS_DEFINE_NAMED_CID(NS_DATAPROTOCOLHANDLER_CID);
46998: #endif
51437: #ifdef NECKO_PROTOCOL_device
51437: NS_DEFINE_NAMED_CID(NS_DEVICEPROTOCOLHANDLER_CID);
89587: #ifdef MOZ_WIDGET_GONK
89587: NS_DEFINE_NAMED_CID(NS_B2GPROTOCOLHANDLER_CID);
89587: #endif
51437: #endif
46998: #ifdef NECKO_PROTOCOL_viewsource
46998: NS_DEFINE_NAMED_CID(NS_VIEWSOURCEHANDLER_CID);
46998: #endif
56090: #ifdef NECKO_PROTOCOL_wyciwyg
56090: NS_DEFINE_NAMED_CID(NS_WYCIWYGPROTOCOLHANDLER_CID);
56090: #endif
70220: #ifdef NECKO_PROTOCOL_websocket
70220: NS_DEFINE_NAMED_CID(NS_WEBSOCKETPROTOCOLHANDLER_CID);
70220: NS_DEFINE_NAMED_CID(NS_WEBSOCKETSSLPROTOCOLHANDLER_CID);
70220: #endif
46998: #if defined(XP_WIN)
46998: NS_DEFINE_NAMED_CID(NS_NETWORK_LINK_SERVICE_CID);
46998: #elif defined(MOZ_WIDGET_COCOA)
46998: NS_DEFINE_NAMED_CID(NS_NETWORK_LINK_SERVICE_CID);
46998: #elif defined(MOZ_ENABLE_LIBCONIC)
46998: NS_DEFINE_NAMED_CID(NS_NETWORK_LINK_SERVICE_CID);
51789: #elif defined(MOZ_ENABLE_QTNETWORK)
51789: NS_DEFINE_NAMED_CID(NS_NETWORK_LINK_SERVICE_CID);
82142: #elif defined(MOZ_WIDGET_ANDROID)
60931: NS_DEFINE_NAMED_CID(NS_NETWORK_LINK_SERVICE_CID);
    1: #endif
56495: NS_DEFINE_NAMED_CID(NS_SERIALIZATION_HELPER_CID);
58111: NS_DEFINE_NAMED_CID(NS_REDIRECTCHANNELREGISTRAR_CID);
    1: 
46998: static const mozilla::Module::CIDEntry kNeckoCIDs[] = {
46998:     { &kNS_IOSERVICE_CID, false, NULL, nsIOServiceConstructor },
46998:     { &kNS_STREAMTRANSPORTSERVICE_CID, false, NULL, nsStreamTransportServiceConstructor },
46998:     { &kNS_SOCKETTRANSPORTSERVICE_CID, false, NULL, nsSocketTransportServiceConstructor },
46998:     { &kNS_SERVERSOCKET_CID, false, NULL, nsServerSocketConstructor },
46998:     { &kNS_SOCKETPROVIDERSERVICE_CID, false, NULL, nsSocketProviderService::Create },
46998:     { &kNS_DNSSERVICE_CID, false, NULL, nsDNSServiceConstructor },
46998:     { &kNS_IDNSERVICE_CID, false, NULL, nsIDNServiceConstructor },
46998:     { &kNS_EFFECTIVETLDSERVICE_CID, false, NULL, nsEffectiveTLDServiceConstructor },
46998:     { &kNS_SIMPLEURI_CID, false, NULL, nsSimpleURIConstructor },
46998:     { &kNS_SIMPLENESTEDURI_CID, false, NULL, nsSimpleNestedURIConstructor },
46998:     { &kNS_ASYNCSTREAMCOPIER_CID, false, NULL, nsAsyncStreamCopierConstructor },
46998:     { &kNS_INPUTSTREAMPUMP_CID, false, NULL, nsInputStreamPumpConstructor },
46998:     { &kNS_INPUTSTREAMCHANNEL_CID, false, NULL, nsInputStreamChannelConstructor },
46998:     { &kNS_STREAMLOADER_CID, false, NULL, nsStreamLoader::Create },
46998:     { &kNS_UNICHARSTREAMLOADER_CID, false, NULL, nsUnicharStreamLoader::Create },
46998:     { &kNS_DOWNLOADER_CID, false, NULL, nsDownloaderConstructor },
46998:     { &kNS_SYNCSTREAMLISTENER_CID, false, NULL, nsSyncStreamListenerConstructor },
46998:     { &kNS_REQUESTOBSERVERPROXY_CID, false, NULL, nsRequestObserverProxyConstructor },
46998:     { &kNS_SIMPLESTREAMLISTENER_CID, false, NULL, nsSimpleStreamListenerConstructor },
46998:     { &kNS_STREAMLISTENERTEE_CID, false, NULL, nsStreamListenerTeeConstructor },
46998:     { &kNS_LOADGROUP_CID, false, NULL, nsLoadGroupConstructor },
46998:     { &kNS_LOCALFILEINPUTSTREAM_CID, false, NULL, nsFileInputStream::Create },
46998:     { &kNS_LOCALFILEOUTPUTSTREAM_CID, false, NULL, nsFileOutputStream::Create },
55459:     { &kNS_PARTIALLOCALFILEINPUTSTREAM_CID, false, NULL, nsPartialFileInputStream::Create },
46998:     { &kNS_SAFELOCALFILEOUTPUTSTREAM_CID, false, NULL, nsSafeFileOutputStreamConstructor },
46998:     { &kNS_URICHECKER_CID, false, NULL, nsURICheckerConstructor },
46998:     { &kNS_INCREMENTALDOWNLOAD_CID, false, NULL, net_NewIncrementalDownload },
46998:     { &kNS_STDURLPARSER_CID, false, NULL, nsStdURLParserConstructor },
46998:     { &kNS_NOAUTHURLPARSER_CID, false, NULL, nsNoAuthURLParserConstructor },
46998:     { &kNS_AUTHURLPARSER_CID, false, NULL, nsAuthURLParserConstructor },
46998:     { &kNS_STANDARDURL_CID, false, NULL, nsStandardURLConstructor },
46998:     { &kNS_BUFFEREDINPUTSTREAM_CID, false, NULL, nsBufferedInputStream::Create },
46998:     { &kNS_BUFFEREDOUTPUTSTREAM_CID, false, NULL, nsBufferedOutputStream::Create },
46998:     { &kNS_MIMEINPUTSTREAM_CID, false, NULL, nsMIMEInputStreamConstructor },
46998:     { &kNS_PROTOCOLPROXYSERVICE_CID, true, NULL, nsProtocolProxyServiceConstructor },
46998:     { &kNS_STREAMCONVERTERSERVICE_CID, false, NULL, CreateNewStreamConvServiceFactory },
46998: #ifdef BUILD_APPLEFILE_DECODER
46998:     { &kNS_APPLEFILEDECODER_CID, false, NULL, nsAppleFileDecoderConstructor },
46998: #endif
    1: #ifdef NECKO_PROTOCOL_ftp
46998:     { &kNS_FTPDIRLISTINGCONVERTER_CID, false, NULL, CreateNewFTPDirListingConv },
    1: #endif
46998:     { &kNS_NSINDEXEDTOHTMLCONVERTER_CID, false, NULL, nsIndexedToHTML::Create },
46998:     { &kNS_DIRINDEXPARSER_CID, false, NULL, nsDirIndexParserConstructor },
46998:     { &kNS_MULTIMIXEDCONVERTER_CID, false, NULL, CreateNewMultiMixedConvFactory },
46998:     { &kNS_UNKNOWNDECODER_CID, false, NULL, CreateNewUnknownDecoderFactory },
46998:     { &kNS_BINARYDETECTOR_CID, false, NULL, CreateNewBinaryDetectorFactory },
46998:     { &kNS_HTTPCOMPRESSCONVERTER_CID, false, NULL, CreateNewHTTPCompressConvFactory },
46998:     { &kNS_NSTXTTOHTMLCONVERTER_CID, false, NULL, CreateNewNSTXTToHTMLConvFactory },
    1: #ifdef BUILD_BINHEX_DECODER
46998:     { &kNS_BINHEXDECODER_CID, false, NULL, nsBinHexDecoderConstructor },
    1: #endif
46998:     { &kMOZITXTTOHTMLCONV_CID, false, NULL, CreateNewTXTToHTMLConvFactory },
46998:     { &kNS_DIRINDEX_CID, false, NULL, nsDirIndexConstructor },
46998:     { &kNS_MIMEHEADERPARAM_CID, false, NULL, nsMIMEHeaderParamImplConstructor },
    1: #ifdef NECKO_PROTOCOL_file
46998:     { &kNS_FILEPROTOCOLHANDLER_CID, false, NULL, nsFileProtocolHandlerConstructor },
    1: #endif
    1: #ifdef NECKO_PROTOCOL_http
46998:     { &kNS_HTTPPROTOCOLHANDLER_CID, false, NULL, nsHttpHandlerConstructor },
46998:     { &kNS_HTTPSPROTOCOLHANDLER_CID, false, NULL, nsHttpsHandlerConstructor },
46998:     { &kNS_HTTPBASICAUTH_CID, false, NULL, nsHttpBasicAuthConstructor },
46998:     { &kNS_HTTPDIGESTAUTH_CID, false, NULL, nsHttpDigestAuthConstructor },
46998:     { &kNS_HTTPNTLMAUTH_CID, false, NULL, nsHttpNTLMAuthConstructor },
46998:     { &kNS_HTTPAUTHMANAGER_CID, false, NULL, nsHttpAuthManagerConstructor },
47008:     { &kNS_HTTPCHANNELAUTHPROVIDER_CID, false, NULL, nsHttpChannelAuthProviderConstructor },
46998:     { &kNS_HTTPACTIVITYDISTRIBUTOR_CID, false, NULL, nsHttpActivityDistributorConstructor },
    1: #endif // !NECKO_PROTOCOL_http
    1: #ifdef NECKO_PROTOCOL_ftp
46998:     { &kNS_FTPPROTOCOLHANDLER_CID, false, NULL, nsFtpProtocolHandlerConstructor },
    1: #endif
    1: #ifdef NECKO_PROTOCOL_res
46998:     { &kNS_RESPROTOCOLHANDLER_CID, false, NULL, nsResProtocolHandlerConstructor },
46998:     { &kNS_RESURL_CID, false, NULL, nsResURLConstructor },
    1: #endif
46998:     { &kNS_ABOUTPROTOCOLHANDLER_CID, false, NULL, nsAboutProtocolHandlerConstructor },
46998:     { &kNS_SAFEABOUTPROTOCOLHANDLER_CID, false, NULL, nsSafeAboutProtocolHandlerConstructor },
46998:     { &kNS_ABOUT_BLANK_MODULE_CID, false, NULL, nsAboutBlank::Create },
46998:     { &kNS_NESTEDABOUTURI_CID, false, NULL, nsNestedAboutURIConstructor },
    1: #ifdef NECKO_PROTOCOL_about
 6900: #ifdef NS_BUILD_REFCNT_LOGGING
46998:     { &kNS_ABOUT_BLOAT_MODULE_CID, false, NULL, nsAboutBloat::Create },
 6900: #endif
46998:     { &kNS_ABOUT_CACHE_MODULE_CID, false, NULL, nsAboutCache::Create },
46998:     { &kNS_ABOUT_CACHE_ENTRY_MODULE_CID, false, NULL, nsAboutCacheEntryConstructor },
    1: #endif
46998:     { &kNS_SOCKSSOCKETPROVIDER_CID, false, NULL, nsSOCKSSocketProvider::CreateV5 },
46998:     { &kNS_SOCKS4SOCKETPROVIDER_CID, false, NULL, nsSOCKSSocketProvider::CreateV4 },
46998:     { &kNS_UDPSOCKETPROVIDER_CID, false, NULL, nsUDPSocketProviderConstructor },
46998:     { &kNS_CACHESERVICE_CID, false, NULL, nsCacheService::Create },
97316:     { &kNS_APPLICATIONCACHESERVICE_CID, false, NULL, nsApplicationCacheServiceConstructor },
46998:     { &kNS_APPLICATIONCACHENAMESPACE_CID, false, NULL, nsApplicationCacheNamespaceConstructor },
56242:     { &kNS_APPLICATIONCACHE_CID, false, NULL, nsApplicationCacheConstructor },
    1: #ifdef NECKO_COOKIES
47092:     { &kNS_COOKIEMANAGER_CID, false, NULL, nsICookieServiceConstructor },
47092:     { &kNS_COOKIESERVICE_CID, false, NULL, nsICookieServiceConstructor },
    1: #endif
26270: #ifdef NECKO_WIFI
46998:     { &kNS_WIFI_MONITOR_COMPONENT_CID, false, NULL, nsWifiMonitorConstructor },
26270: #endif
    1: #ifdef NECKO_PROTOCOL_data
46998:     { &kNS_DATAPROTOCOLHANDLER_CID, false, NULL, nsDataHandler::Create },
    1: #endif
51437: #ifdef NECKO_PROTOCOL_device
51437:     { &kNS_DEVICEPROTOCOLHANDLER_CID, false, NULL, nsDeviceProtocolHandlerConstructor},
89587: #ifdef MOZ_WIDGET_GONK
89587:     { &kNS_B2GPROTOCOLHANDLER_CID, false, NULL, nsB2GProtocolHandlerConstructor},
89587: #endif
51437: #endif
    1: #ifdef NECKO_PROTOCOL_viewsource
46998:     { &kNS_VIEWSOURCEHANDLER_CID, false, NULL, nsViewSourceHandlerConstructor },
    1: #endif
56090: #ifdef NECKO_PROTOCOL_wyciwyg
56090:     { &kNS_WYCIWYGPROTOCOLHANDLER_CID, false, NULL, nsWyciwygProtocolHandlerConstructor },
56090: #endif
70220: #ifdef NECKO_PROTOCOL_websocket
70220:     { &kNS_WEBSOCKETPROTOCOLHANDLER_CID, false, NULL,
73020:       mozilla::net::WebSocketChannelConstructor },
70220:     { &kNS_WEBSOCKETSSLPROTOCOLHANDLER_CID, false, NULL,
73020:       mozilla::net::WebSocketSSLChannelConstructor },
70220: #endif
26271: #if defined(XP_WIN)
46998:     { &kNS_NETWORK_LINK_SERVICE_CID, false, NULL, nsNotifyAddrListenerConstructor },
19933: #elif defined(MOZ_WIDGET_COCOA)
46998:     { &kNS_NETWORK_LINK_SERVICE_CID, false, NULL, nsNetworkLinkServiceConstructor },
35003: #elif defined(MOZ_ENABLE_LIBCONIC)
46998:     { &kNS_NETWORK_LINK_SERVICE_CID, false, NULL, nsMaemoNetworkLinkServiceConstructor },
51789: #elif defined(MOZ_ENABLE_QTNETWORK)
51789:     { &kNS_NETWORK_LINK_SERVICE_CID, false, NULL, nsQtNetworkLinkServiceConstructor },
82142: #elif defined(MOZ_WIDGET_ANDROID)
60931:     { &kNS_NETWORK_LINK_SERVICE_CID, false, NULL, nsAndroidNetworkLinkServiceConstructor },
    1: #endif
56495:     { &kNS_SERIALIZATION_HELPER_CID, false, NULL, nsSerializationHelperConstructor },
58111:     { &kNS_REDIRECTCHANNELREGISTRAR_CID, false, NULL, RedirectChannelRegistrarConstructor },
46998:     { NULL }
    1: };
    1: 
46998: static const mozilla::Module::ContractIDEntry kNeckoContracts[] = {
46998:     { NS_IOSERVICE_CONTRACTID, &kNS_IOSERVICE_CID },
46998:     { NS_NETUTIL_CONTRACTID, &kNS_IOSERVICE_CID },
46998:     { NS_STREAMTRANSPORTSERVICE_CONTRACTID, &kNS_STREAMTRANSPORTSERVICE_CID },
46998:     { NS_SOCKETTRANSPORTSERVICE_CONTRACTID, &kNS_SOCKETTRANSPORTSERVICE_CID },
46998:     { NS_SERVERSOCKET_CONTRACTID, &kNS_SERVERSOCKET_CID },
46998:     { NS_SOCKETPROVIDERSERVICE_CONTRACTID, &kNS_SOCKETPROVIDERSERVICE_CID },
46998:     { NS_DNSSERVICE_CONTRACTID, &kNS_DNSSERVICE_CID },
46998:     { NS_IDNSERVICE_CONTRACTID, &kNS_IDNSERVICE_CID },
46998:     { NS_EFFECTIVETLDSERVICE_CONTRACTID, &kNS_EFFECTIVETLDSERVICE_CID },
46998:     { NS_SIMPLEURI_CONTRACTID, &kNS_SIMPLEURI_CID },
46998:     { NS_ASYNCSTREAMCOPIER_CONTRACTID, &kNS_ASYNCSTREAMCOPIER_CID },
46998:     { NS_INPUTSTREAMPUMP_CONTRACTID, &kNS_INPUTSTREAMPUMP_CID },
46998:     { NS_INPUTSTREAMCHANNEL_CONTRACTID, &kNS_INPUTSTREAMCHANNEL_CID },
46998:     { NS_STREAMLOADER_CONTRACTID, &kNS_STREAMLOADER_CID },
46998:     { NS_UNICHARSTREAMLOADER_CONTRACTID, &kNS_UNICHARSTREAMLOADER_CID },
46998:     { NS_DOWNLOADER_CONTRACTID, &kNS_DOWNLOADER_CID },
46998:     { NS_SYNCSTREAMLISTENER_CONTRACTID, &kNS_SYNCSTREAMLISTENER_CID },
46998:     { NS_REQUESTOBSERVERPROXY_CONTRACTID, &kNS_REQUESTOBSERVERPROXY_CID },
46998:     { NS_SIMPLESTREAMLISTENER_CONTRACTID, &kNS_SIMPLESTREAMLISTENER_CID },
46998:     { NS_STREAMLISTENERTEE_CONTRACTID, &kNS_STREAMLISTENERTEE_CID },
46998:     { NS_LOADGROUP_CONTRACTID, &kNS_LOADGROUP_CID },
46998:     { NS_LOCALFILEINPUTSTREAM_CONTRACTID, &kNS_LOCALFILEINPUTSTREAM_CID },
46998:     { NS_LOCALFILEOUTPUTSTREAM_CONTRACTID, &kNS_LOCALFILEOUTPUTSTREAM_CID },
55459:     { NS_PARTIALLOCALFILEINPUTSTREAM_CONTRACTID, &kNS_PARTIALLOCALFILEINPUTSTREAM_CID },
46998:     { NS_SAFELOCALFILEOUTPUTSTREAM_CONTRACTID, &kNS_SAFELOCALFILEOUTPUTSTREAM_CID },
46998:     { NS_URICHECKER_CONTRACT_ID, &kNS_URICHECKER_CID },
46998:     { NS_INCREMENTALDOWNLOAD_CONTRACTID, &kNS_INCREMENTALDOWNLOAD_CID },
46998:     { NS_STDURLPARSER_CONTRACTID, &kNS_STDURLPARSER_CID },
46998:     { NS_NOAUTHURLPARSER_CONTRACTID, &kNS_NOAUTHURLPARSER_CID },
46998:     { NS_AUTHURLPARSER_CONTRACTID, &kNS_AUTHURLPARSER_CID },
46998:     { NS_STANDARDURL_CONTRACTID, &kNS_STANDARDURL_CID },
46998:     { NS_BUFFEREDINPUTSTREAM_CONTRACTID, &kNS_BUFFEREDINPUTSTREAM_CID },
46998:     { NS_BUFFEREDOUTPUTSTREAM_CONTRACTID, &kNS_BUFFEREDOUTPUTSTREAM_CID },
46998:     { NS_MIMEINPUTSTREAM_CONTRACTID, &kNS_MIMEINPUTSTREAM_CID },
46998:     { NS_PROTOCOLPROXYSERVICE_CONTRACTID, &kNS_PROTOCOLPROXYSERVICE_CID },
46998:     { NS_STREAMCONVERTERSERVICE_CONTRACTID, &kNS_STREAMCONVERTERSERVICE_CID },
46998: #ifdef BUILD_APPLEFILE_DECODER
46998:     { NS_IAPPLEFILEDECODER_CONTRACTID, &kNS_APPLEFILEDECODER_CID },
46998: #endif
46998: #ifdef NECKO_PROTOCOL_ftp
46998:     { NS_ISTREAMCONVERTER_KEY FTP_TO_INDEX, &kNS_FTPDIRLISTINGCONVERTER_CID },
46998: #endif
46998:     { NS_ISTREAMCONVERTER_KEY INDEX_TO_HTML, &kNS_NSINDEXEDTOHTMLCONVERTER_CID },
46998:     { NS_DIRINDEXPARSER_CONTRACTID, &kNS_DIRINDEXPARSER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY MULTI_MIXED_X, &kNS_MULTIMIXEDCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY MULTI_BYTERANGES, &kNS_MULTIMIXEDCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY MULTI_MIXED, &kNS_MULTIMIXEDCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY UNKNOWN_CONTENT, &kNS_UNKNOWNDECODER_CID },
46998:     { NS_GENERIC_CONTENT_SNIFFER, &kNS_UNKNOWNDECODER_CID },
46998:     { NS_BINARYDETECTOR_CONTRACTID, &kNS_BINARYDETECTOR_CID },
46998:     { NS_ISTREAMCONVERTER_KEY GZIP_TO_UNCOMPRESSED, &kNS_HTTPCOMPRESSCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY XGZIP_TO_UNCOMPRESSED, &kNS_HTTPCOMPRESSCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY COMPRESS_TO_UNCOMPRESSED, &kNS_HTTPCOMPRESSCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY XCOMPRESS_TO_UNCOMPRESSED, &kNS_HTTPCOMPRESSCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY DEFLATE_TO_UNCOMPRESSED, &kNS_HTTPCOMPRESSCONVERTER_CID },
46998:     { NS_ISTREAMCONVERTER_KEY PLAIN_TO_HTML, &kNS_NSTXTTOHTMLCONVERTER_CID },
46998: #ifdef BUILD_BINHEX_DECODER
46998:     { NS_ISTREAMCONVERTER_KEY BINHEX_TO_WILD, &kNS_BINHEXDECODER_CID },
46998: #endif
46998:     { MOZ_TXTTOHTMLCONV_CONTRACTID, &kMOZITXTTOHTMLCONV_CID },
46998:     { "@mozilla.org/dirIndex;1", &kNS_DIRINDEX_CID },
46998:     { NS_MIMEHEADERPARAM_CONTRACTID, &kNS_MIMEHEADERPARAM_CID },
46998: #ifdef NECKO_PROTOCOL_file
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "file", &kNS_FILEPROTOCOLHANDLER_CID },
46998: #endif
46998: #ifdef NECKO_PROTOCOL_http
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "http", &kNS_HTTPPROTOCOLHANDLER_CID },
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "https", &kNS_HTTPSPROTOCOLHANDLER_CID },
46998:     { NS_HTTP_AUTHENTICATOR_CONTRACTID_PREFIX "basic", &kNS_HTTPBASICAUTH_CID },
46998:     { NS_HTTP_AUTHENTICATOR_CONTRACTID_PREFIX "digest", &kNS_HTTPDIGESTAUTH_CID },
46998:     { NS_HTTP_AUTHENTICATOR_CONTRACTID_PREFIX "ntlm", &kNS_HTTPNTLMAUTH_CID },
46998:     { NS_HTTPAUTHMANAGER_CONTRACTID, &kNS_HTTPAUTHMANAGER_CID },
47008:     { NS_HTTPCHANNELAUTHPROVIDER_CONTRACTID, &kNS_HTTPCHANNELAUTHPROVIDER_CID },
46998:     { NS_HTTPACTIVITYDISTRIBUTOR_CONTRACTID, &kNS_HTTPACTIVITYDISTRIBUTOR_CID },
46998: #endif // !NECKO_PROTOCOL_http
46998: #ifdef NECKO_PROTOCOL_ftp
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "ftp", &kNS_FTPPROTOCOLHANDLER_CID },
46998: #endif
46998: #ifdef NECKO_PROTOCOL_res
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "resource", &kNS_RESPROTOCOLHANDLER_CID },
46998: #endif
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "about", &kNS_ABOUTPROTOCOLHANDLER_CID },
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "moz-safe-about", &kNS_SAFEABOUTPROTOCOLHANDLER_CID },
46998:     { NS_ABOUT_MODULE_CONTRACTID_PREFIX "blank", &kNS_ABOUT_BLANK_MODULE_CID },
46998: #ifdef NECKO_PROTOCOL_about
46998: #ifdef NS_BUILD_REFCNT_LOGGING
46998:     { NS_ABOUT_MODULE_CONTRACTID_PREFIX "bloat", &kNS_ABOUT_BLOAT_MODULE_CID },
46998: #endif
46998:     { NS_ABOUT_MODULE_CONTRACTID_PREFIX "cache", &kNS_ABOUT_CACHE_MODULE_CID },
46998:     { NS_ABOUT_MODULE_CONTRACTID_PREFIX "cache-entry", &kNS_ABOUT_CACHE_ENTRY_MODULE_CID },
46998: #endif
46998:     { NS_NETWORK_SOCKET_CONTRACTID_PREFIX "socks", &kNS_SOCKSSOCKETPROVIDER_CID },
46998:     { NS_NETWORK_SOCKET_CONTRACTID_PREFIX "socks4", &kNS_SOCKS4SOCKETPROVIDER_CID },
46998:     { NS_NETWORK_SOCKET_CONTRACTID_PREFIX "udp", &kNS_UDPSOCKETPROVIDER_CID },
46998:     { NS_CACHESERVICE_CONTRACTID, &kNS_CACHESERVICE_CID },
46998:     { NS_APPLICATIONCACHESERVICE_CONTRACTID, &kNS_APPLICATIONCACHESERVICE_CID },
46998:     { NS_APPLICATIONCACHENAMESPACE_CONTRACTID, &kNS_APPLICATIONCACHENAMESPACE_CID },
56242:     { NS_APPLICATIONCACHE_CONTRACTID, &kNS_APPLICATIONCACHE_CID },
46998: #ifdef NECKO_COOKIES
46998:     { NS_COOKIEMANAGER_CONTRACTID, &kNS_COOKIEMANAGER_CID },
46998:     { NS_COOKIESERVICE_CONTRACTID, &kNS_COOKIESERVICE_CID },
46998: #endif
46998: #ifdef NECKO_WIFI
46998:     { NS_WIFI_MONITOR_CONTRACTID, &kNS_WIFI_MONITOR_COMPONENT_CID },
46998: #endif
46998: #ifdef NECKO_PROTOCOL_data
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "data", &kNS_DATAPROTOCOLHANDLER_CID },
46998: #endif
51437: #ifdef NECKO_PROTOCOL_device
51437:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "moz-device", &kNS_DEVICEPROTOCOLHANDLER_CID },
89587: #ifdef MOZ_WIDGET_GONK
89587:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "b2g-camera", &kNS_B2GPROTOCOLHANDLER_CID },
89587: #endif
51437: #endif
46998: #ifdef NECKO_PROTOCOL_viewsource
46998:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "view-source", &kNS_VIEWSOURCEHANDLER_CID },
46998: #endif
56090: #ifdef NECKO_PROTOCOL_wyciwyg
56090:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "wyciwyg", &kNS_WYCIWYGPROTOCOLHANDLER_CID },
56090: #endif
70220: #ifdef NECKO_PROTOCOL_websocket
70220:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "ws", &kNS_WEBSOCKETPROTOCOLHANDLER_CID },
70220:     { NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX "wss", &kNS_WEBSOCKETSSLPROTOCOLHANDLER_CID },
70220: #endif
46998: #if defined(XP_WIN)
46998:     { NS_NETWORK_LINK_SERVICE_CONTRACTID, &kNS_NETWORK_LINK_SERVICE_CID },
46998: #elif defined(MOZ_WIDGET_COCOA)
46998:     { NS_NETWORK_LINK_SERVICE_CONTRACTID, &kNS_NETWORK_LINK_SERVICE_CID },
46998: #elif defined(MOZ_ENABLE_LIBCONIC)
46998:     { NS_NETWORK_LINK_SERVICE_CONTRACTID, &kNS_NETWORK_LINK_SERVICE_CID },
51789: #elif defined(MOZ_ENABLE_QTNETWORK)
51789:     { NS_NETWORK_LINK_SERVICE_CONTRACTID, &kNS_NETWORK_LINK_SERVICE_CID },
82142: #elif defined(MOZ_WIDGET_ANDROID)
60931:     { NS_NETWORK_LINK_SERVICE_CONTRACTID, &kNS_NETWORK_LINK_SERVICE_CID },
46998: #endif
56495:     { NS_SERIALIZATION_HELPER_CONTRACTID, &kNS_SERIALIZATION_HELPER_CID },
58111:     { NS_REDIRECTCHANNELREGISTRAR_CONTRACTID, &kNS_REDIRECTCHANNELREGISTRAR_CID },
46998:     { NULL }
46998: };
46998: 
46998: static const mozilla::Module kNeckoModule = {
46998:     mozilla::Module::kVersion,
46998:     kNeckoCIDs,
46998:     kNeckoContracts,
46998:     kNeckoCategories,
46998:     NULL,
46998:     nsNetStartup,
46998:     nsNetShutdown
46998: };
46998: 
46998: NSMODULE_DEFN(necko) = &kNeckoModule;
