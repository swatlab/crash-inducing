    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef __JPCNTX_H__
    1: #define __JPCNTX_H__
    1: 
    1: #define NUM_OF_CATEGORY 6
    1: 
    1: #include "nscore.h" 
    1: 
    1: #define ENOUGH_REL_THRESHOLD  100
    1: #define MAX_REL_THRESHOLD     1000
    1: 
    1: //hiragana frequency category table
29631: extern const PRUint8 jp2CharContext[83][83];
    1: 
    1: class JapaneseContextAnalysis
    1: {
    1: public:
38413:   JapaneseContextAnalysis() {Reset(PR_FALSE);}
    1: 
    1:   void HandleData(const char* aBuf, PRUint32 aLen);
    1: 
    1:   void HandleOneChar(const char* aStr, PRUint32 aCharLen)
    1:   {
    1:     PRInt32 order;
    1: 
    1:     //if we received enough data, stop here   
    1:     if (mTotalRel > MAX_REL_THRESHOLD)   mDone = PR_TRUE;
    1:     if (mDone)       return;
    1:      
    1:     //Only 2-bytes characters are of our interest
    1:     order = (aCharLen == 2) ? GetOrder(aStr) : -1;
    1:     if (order != -1 && mLastCharOrder != -1)
    1:     {
    1:       mTotalRel++;
    1:       //count this sequence to its category counter
    1:       mRelSample[jp2CharContext[mLastCharOrder][order]]++;
    1:     }
    1:     mLastCharOrder = order;
  731:   }
    1: 
38413:   float GetConfidence(void);
38413:   void      Reset(PRBool aIsPreferredLanguage);
  731:   void      SetOpion(){}
  731:   PRBool GotEnoughData() {return mTotalRel > ENOUGH_REL_THRESHOLD;}
    1: 
    1: protected:
    1:   virtual PRInt32 GetOrder(const char* str, PRUint32 *charLen) = 0;
    1:   virtual PRInt32 GetOrder(const char* str) = 0;
    1: 
    1:   //category counters, each integer counts sequences in its category
    1:   PRUint32 mRelSample[NUM_OF_CATEGORY];
    1: 
    1:   //total sequence received
    1:   PRUint32 mTotalRel;
    1: 
38413:   //Number of sequences needed to trigger detection
38413:   PRUint32 mDataThreshold;
38413:   
    1:   //The order of previous char
    1:   PRInt32  mLastCharOrder;
    1: 
    1:   //if last byte in current buffer is not the last byte of a character, we
    1:   //need to know how many byte to skip in next buffer.
    1:   PRUint32 mNeedToSkipCharNum;
    1: 
    1:   //If this flag is set to PR_TRUE, detection is done and conclusion has been made
    1:   PRBool   mDone;
    1: };
    1: 
    1: 
    1: class SJISContextAnalysis : public JapaneseContextAnalysis
    1: {
    1:   //SJISContextAnalysis(){};
    1: protected:
    1:   PRInt32 GetOrder(const char* str, PRUint32 *charLen);
    1: 
    1:   PRInt32 GetOrder(const char* str)
    1:   {
    1:     //We only interested in Hiragana, so first byte is '\202'
    1:     if (*str == '\202' && 
    1:           (unsigned char)*(str+1) >= (unsigned char)0x9f && 
    1:           (unsigned char)*(str+1) <= (unsigned char)0xf1)
    1:       return (unsigned char)*(str+1) - (unsigned char)0x9f;
    1:     return -1;
  731:   }
    1: };
    1: 
    1: class EUCJPContextAnalysis : public JapaneseContextAnalysis
    1: {
    1: protected:
    1:   PRInt32 GetOrder(const char* str, PRUint32 *charLen);
    1:   PRInt32 GetOrder(const char* str)
    1:     //We only interested in Hiragana, so first byte is '\244'
    1:   {
    1:     if (*str == '\244' &&
    1:           (unsigned char)*(str+1) >= (unsigned char)0xa1 &&
    1:           (unsigned char)*(str+1) <= (unsigned char)0xf3)
    1:       return (unsigned char)*(str+1) - (unsigned char)0xa1;
    1:     return -1;
  731:   }
    1: };
    1: 
    1: #endif /* __JPCNTX_H__ */
    1: 
