    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Author: Kyle Yuan (kyle.yuan@sun.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
31673: #include "nsXULTreeAccessible.h"
31673: 
31673: #include "nsDocAccessible.h"
31673: 
    1: #include "nsIDOMXULElement.h"
    1: #include "nsIDOMXULMultSelectCntrlEl.h"
  144: #include "nsIDOMXULTreeElement.h"
    1: #include "nsITreeSelection.h"
    1: #include "nsIMutableArray.h"
    1: #include "nsComponentManagerUtils.h"
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // Internal static functions
31673: ////////////////////////////////////////////////////////////////////////////////
    1: 
31673: static PLDHashOperator
31673: ElementTraverser(const void *aKey, nsIAccessNode *aAccessNode,
31673:                  void *aUserArg)
    1: {
31673:   nsCycleCollectionTraversalCallback *cb = 
31673:     static_cast<nsCycleCollectionTraversalCallback*>(aUserArg);
31673: 
31673:   NS_CYCLE_COLLECTION_NOTE_EDGE_NAME(*cb, "mAccessNodeCache of XUL tree entry");
31673:   cb->NoteXPCOMChild(aAccessNode);
31673:   return PL_DHASH_NEXT;
    1: }
    1: 
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
31673: nsXULTreeAccessible::
31673:   nsXULTreeAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell) :
31673:   nsXULSelectableAccessible(aDOMNode, aShell)
    1: {
31673:   nsCoreUtils::GetTreeBoxObject(aDOMNode, getter_AddRefs(mTree));
31673:   if (mTree)
31673:     mTree->GetView(getter_AddRefs(mTreeView));
31673: 
31673:   NS_ASSERTION(mTree && mTreeView, "Can't get mTree or mTreeView!\n");
31673: 
31673:   mAccessNodeCache.Init(kDefaultTreeCacheSize);
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsISupports and cycle collection implementation
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_CLASS(nsXULTreeAccessible)
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsXULTreeAccessible,
31673:                                                   nsAccessible)
31673: tmp->mAccessNodeCache.EnumerateRead(ElementTraverser, &cb);
31673: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
    1: 
31673: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(nsXULTreeAccessible,
31673:                                                 nsAccessible)
31673: tmp->ClearCache(tmp->mAccessNodeCache);
31673: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
    1: 
31673: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(nsXULTreeAccessible)
31673: NS_INTERFACE_MAP_STATIC_AMBIGUOUS(nsXULTreeAccessible)
31673: NS_INTERFACE_MAP_END_INHERITING(nsXULSelectableAccessible)
    1: 
31673: NS_IMPL_ADDREF_INHERITED(nsXULTreeAccessible, nsXULSelectableAccessible)
31673: NS_IMPL_RELEASE_INHERITED(nsXULTreeAccessible, nsXULSelectableAccessible)
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation
    1: 
21256: nsresult
21256: nsXULTreeAccessible::GetStateInternal(PRUint32 *aState, PRUint32 *aExtraState)
    1: {
31673:   // Get focus status from base class.
21256:   nsresult rv = nsAccessible::GetStateInternal(aState, aExtraState);
21984:   NS_ENSURE_A11Y_SUCCESS(rv, rv);
    1: 
31673:   // readonly state
31673:   *aState |= nsIAccessibleStates::STATE_READONLY;
31673: 
31673:   // remove focusable and focused states since tree items are focusable for AT
31673:   *aState &= ~nsIAccessibleStates::STATE_FOCUSABLE;
31673:   *aState &= ~nsIAccessibleStates::STATE_FOCUSED;
31673: 
31673:   // multiselectable state.
31673:   nsCOMPtr<nsITreeSelection> selection;
31673:   mTreeView->GetSelection(getter_AddRefs(selection));
31673:   NS_ENSURE_STATE(selection);
31673: 
31673:   PRBool isSingle = PR_FALSE;
31673:   rv = selection->GetSingle(&isSingle);
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   if (!isSingle)
  262:     *aState |= nsIAccessibleStates::STATE_MULTISELECTABLE;
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeAccessible::GetValue(nsAString& aValue)
    1: {
31673:   // Return the value is the first selected child.
    1: 
31673:   aValue.Truncate();
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   PRInt32 currentIndex;
    1:   nsCOMPtr<nsIDOMElement> selectItem;
    1:   selection->GetCurrentIndex(&currentIndex);
    1:   if (currentIndex >= 0) {
    1:     nsCOMPtr<nsITreeColumn> keyCol;
    1: 
    1:     nsCOMPtr<nsITreeColumns> cols;
    1:     mTree->GetColumns(getter_AddRefs(cols));
    1:     if (cols)
    1:       cols->GetKeyColumn(getter_AddRefs(keyCol));
    1: 
31673:     return mTreeView->GetCellText(currentIndex, keyCol, aValue);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessNode implementation
31673: 
29825: PRBool
29825: nsXULTreeAccessible::IsDefunct()
29825: {
29825:   return nsXULSelectableAccessible::IsDefunct() || !mTree || !mTreeView;
29825: }
29825: 
21169: nsresult
21169: nsXULTreeAccessible::Shutdown()
    1: {
31673:   // XXX: we don't remove accessible from document cache if shutdown wasn't
31673:   // initiated by document destroying. Note, we can't remove accessible from
31673:   // document cache here while document is going to be shutdown. Note, this is
31673:   // not unique place where we have similar problem.
31673:   ClearCache(mAccessNodeCache);
31673: 
 1631:   mTree = nsnull;
 1631:   mTreeView = nsnull;
 1631: 
    1:   nsXULSelectableAccessible::Shutdown();
31673:   return NS_OK;
31673: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation (put methods here)
31673: 
31673: nsresult
31673: nsXULTreeAccessible::GetRoleInternal(PRUint32 *aRole)
31673: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   // No primary column means we're in a list. In fact, history and mail turn off
31673:   // the primary flag when switching to a flat view.
31673: 
31673:   nsCOMPtr<nsITreeColumns> cols;
31673:   mTree->GetColumns(getter_AddRefs(cols));
31673:   nsCOMPtr<nsITreeColumn> primaryCol;
31673:   if (cols)
31673:     cols->GetPrimaryColumn(getter_AddRefs(primaryCol));
31673: 
31673:   *aRole = primaryCol ?
31673:     nsIAccessibleRole::ROLE_OUTLINE :
31673:     nsIAccessibleRole::ROLE_LIST;
 1631: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsIAccessible implementation
    1: 
31673: NS_IMETHODIMP
35136: nsXULTreeAccessible::GetFirstChild(nsIAccessible **aFirstChild)
35136: {
35136:   nsAccessible::GetFirstChild(aFirstChild);
35136: 
35136:   // in normal case, tree's first child should be treecols, if it is not here, 
35136:   //   use the first row as tree's first child
35136:   if (*aFirstChild == nsnull) {
35136:     if (IsDefunct())
35136:       return NS_ERROR_FAILURE;
35136: 
35136:     PRInt32 rowCount;
35136:     mTreeView->GetRowCount(&rowCount);
35136:     if (rowCount > 0)
35136:       GetTreeItemAccessible(0, aFirstChild);
35136:   }
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeAccessible::GetLastChild(nsIAccessible **aLastChild)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aLastChild);
35136:   *aLastChild = nsnull;
35136: 
35136:   if (IsDefunct())
35136:     return NS_ERROR_FAILURE;
35136: 
35136:   PRInt32 rowCount = 0;
35136:   mTreeView->GetRowCount(&rowCount);
35136:   if (rowCount > 0) {
35136:     GetTreeItemAccessible(rowCount - 1, aLastChild);
35136: 
35136:     if (*aLastChild)
35136:       return NS_OK;
35136:   }
35136: 
35136:   // If there is not any rows, use treecols as tree's last child.
35136:   return nsAccessible::GetLastChild(aLastChild);
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeAccessible::GetChildCount(PRInt32 *aChildCount)
35136: {
35136:   // tree's children count is row count + treecols count.
35136:   if (IsDefunct())
35136:     return NS_ERROR_FAILURE;
35136: 
35136:   nsAccessible::GetChildCount(aChildCount);
35136: 
35136:   if (*aChildCount != eChildCountUninitialized) {
35136:     PRInt32 rowCount = 0;
35136:     mTreeView->GetRowCount(&rowCount);
35136:     *aChildCount += rowCount;
35136:   }
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeAccessible::GetChildAt(PRInt32 aChildIndex, nsIAccessible **aChild)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aChild);
35136:   *aChild = nsnull;
35136: 
35136:   PRInt32 childCount = 0;
35136:   nsresult rv = nsAccessible::GetChildCount(&childCount);
35136:   NS_ENSURE_SUCCESS(rv, rv);
35136: 
35136:   if (aChildIndex < childCount)
35136:     return nsAccessible::GetChildAt(aChildIndex, aChild);
35136: 
35136:   GetTreeItemAccessible(aChildIndex - childCount, aChild);
35136:   return *aChild ? NS_OK : NS_ERROR_INVALID_ARG;
35136: }
35136: 
35136: NS_IMETHODIMP
31673: nsXULTreeAccessible::GetFocusedChild(nsIAccessible **aFocusedChild) 
31673: {
31673:   NS_ENSURE_ARG_POINTER(aFocusedChild);
31673:   *aFocusedChild = nsnull;
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   if (gLastFocusedNode != mDOMNode)
31673:     return NS_OK;
31673: 
    1:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
    1:     do_QueryInterface(mDOMNode);
    1:   if (multiSelect) {
31673:     PRInt32 row = -1;
    1:     multiSelect->GetCurrentIndex(&row);
31673:     if (row >= 0)
31673:       GetTreeItemAccessible(row, aFocusedChild);
    1:   }
31673: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessible implementation (DON'T put methods here)
31673: 
28197: nsresult
28197: nsXULTreeAccessible::GetChildAtPoint(PRInt32 aX, PRInt32 aY,
28197:                                      PRBool aDeepestChild,
28197:                                      nsIAccessible **aChild)
 5680: {
 5680:   nsIFrame *frame = GetFrame();
 5680:   if (!frame)
 5680:     return NS_ERROR_FAILURE;
 5680: 
 5680:   nsPresContext *presContext = frame->PresContext();
 5680:   nsCOMPtr<nsIPresShell> presShell = presContext->PresShell();
 5680: 
 5680:   nsIFrame *rootFrame = presShell->GetRootFrame();
 5680:   NS_ENSURE_STATE(rootFrame);
 5680: 
 5680:   nsIntRect rootRect = rootFrame->GetScreenRectExternal();
 5680: 
31673:   PRInt32 clientX = presContext->DevPixelsToIntCSSPixels(aX - rootRect.x);
31673:   PRInt32 clientY = presContext->DevPixelsToIntCSSPixels(aY - rootRect.y);
 5680: 
 5680:   PRInt32 row = -1;
 5680:   nsCOMPtr<nsITreeColumn> column;
 5680:   nsCAutoString childEltUnused;
 5680:   mTree->GetCellAt(clientX, clientY, &row, getter_AddRefs(column),
 5680:                    childEltUnused);
 5680: 
 5680:   // If we failed to find tree cell for the given point then it might be
 5680:   // tree columns.
 5680:   if (row == -1 || !column)
25749:     return nsXULSelectableAccessible::
28197:       GetChildAtPoint(aX, aY, aDeepestChild, aChild);
 5680: 
31673:   GetTreeItemAccessible(row, aChild);
31673:   if (aDeepestChild && *aChild) {
31673:     // Look for accessible cell for the found item accessible.
31673:     nsRefPtr<nsXULTreeItemAccessibleBase> treeitemAcc =
31673:       nsAccUtils::QueryObject<nsXULTreeItemAccessibleBase>(*aChild);
31673: 
31673:     nsCOMPtr<nsIAccessible> cellAccessible;
31673:     treeitemAcc->GetCellAccessible(column, getter_AddRefs(cellAccessible));
31673:     if (cellAccessible)
31673:       cellAccessible.swap(*aChild);
31673:   }
31673: 
28197:   return NS_OK;
 5680: }
 5680: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: nsAccessibleSelectable implementation
31673: 
    1: NS_IMETHODIMP nsXULTreeAccessible::GetSelectedChildren(nsIArray **_retval)
    1: {
31673:   // Ask tree selection to get all selected children
    1:   *_retval = nsnull;
    1: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
    1:     return NS_ERROR_FAILURE;
    1:   nsCOMPtr<nsIMutableArray> selectedAccessibles =
    1:     do_CreateInstance(NS_ARRAY_CONTRACTID);
    1:   NS_ENSURE_STATE(selectedAccessibles);
    1: 
    1:   PRInt32 rowIndex, rowCount;
    1:   PRBool isSelected;
    1:   mTreeView->GetRowCount(&rowCount);
    1:   for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {
    1:     selection->IsSelected(rowIndex, &isSelected);
    1:     if (isSelected) {
    1:       nsCOMPtr<nsIAccessible> tempAccess;
31673:       GetTreeItemAccessible(rowIndex, getter_AddRefs(tempAccess));
29825:       NS_ENSURE_STATE(tempAccess);
    1: 
    1:       selectedAccessibles->AppendElement(tempAccess, PR_FALSE);
    1:     }
    1:   }
    1: 
    1:   PRUint32 length;
    1:   selectedAccessibles->GetLength(&length);
    1:   if (length != 0) {
    1:     *_retval = selectedAccessibles;
    1:     NS_IF_ADDREF(*_retval);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::GetSelectionCount(PRInt32 *aSelectionCount)
    1: {
    1:   *aSelectionCount = 0;
    1: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection)
    1:     selection->GetCount(aSelectionCount);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::ChangeSelection(PRInt32 aIndex, PRUint8 aMethod, PRBool *aSelState)
    1: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection) {
    1:     selection->IsSelected(aIndex, aSelState);
    1:     if ((!(*aSelState) && eSelection_Add == aMethod) || 
    1:         ((*aSelState) && eSelection_Remove == aMethod))
    1:       return selection->ToggleSelect(aIndex);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::AddChildToSelection(PRInt32 aIndex)
    1: {
    1:   PRBool isSelected;
    1:   return ChangeSelection(aIndex, eSelection_Add, &isSelected);
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::RemoveChildFromSelection(PRInt32 aIndex)
    1: {
    1:   PRBool isSelected;
    1:   return ChangeSelection(aIndex, eSelection_Remove, &isSelected);
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::IsChildSelected(PRInt32 aIndex, PRBool *_retval)
    1: {
    1:   return ChangeSelection(aIndex, eSelection_GetState, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP nsXULTreeAccessible::ClearSelection()
    1: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection)
    1:     selection->ClearSelection();
    1: 
    1:   return NS_OK;
    1: }
    1: 
29825: NS_IMETHODIMP
29825: nsXULTreeAccessible::RefSelection(PRInt32 aIndex, nsIAccessible **aAccessible)
    1: {
29825:   NS_ENSURE_ARG_POINTER(aAccessible);
29825:   *aAccessible = nsnull;
    1: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (!selection)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   PRInt32 rowIndex, rowCount;
    1:   PRInt32 selCount = 0;
    1:   PRBool isSelected;
    1:   mTreeView->GetRowCount(&rowCount);
    1:   for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {
    1:     selection->IsSelected(rowIndex, &isSelected);
    1:     if (isSelected) {
    1:       if (selCount == aIndex) {
31673:         GetTreeItemAccessible(rowIndex, aAccessible);
29825:         return NS_OK;
    1:       }
    1:       selCount++;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
34090: NS_IMETHODIMP
34090: nsXULTreeAccessible::SelectAllSelection(PRBool *aIsMultiSelectable)
    1: {
34090:   NS_ENSURE_ARG_POINTER(aIsMultiSelectable);
34090:   *aIsMultiSelectable = PR_FALSE;
    1: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
    1: 
    1:   // see if we are multiple select if so set ourselves as such
    1:   nsCOMPtr<nsIDOMElement> element (do_QueryInterface(mDOMNode));
    1:   if (element) {
    1:     nsCOMPtr<nsITreeSelection> selection;
    1:     mTreeView->GetSelection(getter_AddRefs(selection));
34090:     if (selection) {
34090:       PRBool single = PR_FALSE;
34090:       selection->GetSingle(&single);
34090:       if (!single) {
34090:         *aIsMultiSelectable = PR_TRUE;
    1:         selection->SelectAll();
    1:       }
    1:     }
34090:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: public implementation
29825: 
29825: void
31673: nsXULTreeAccessible::GetTreeItemAccessible(PRInt32 aRow,
 6087:                                            nsIAccessible** aAccessible)
    1: {
    1:   *aAccessible = nsnull;
    1: 
35278:   if (aRow < 0 || IsDefunct())
29825:     return;
 6087: 
31673:   PRInt32 rowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&rowCount);
31673:   if (NS_FAILED(rv) || aRow >= rowCount)
31673:     return;
    1: 
31673:   void *key = reinterpret_cast<void*>(aRow);
    1:   nsCOMPtr<nsIAccessNode> accessNode;
31673:   GetCacheEntry(mAccessNodeCache, key, getter_AddRefs(accessNode));
29825: 
29825:   if (!accessNode) {
31673:     nsRefPtr<nsAccessNode> treeItemAcc;
31673:     CreateTreeItemAccessible(aRow, getter_AddRefs(treeItemAcc));
29825:     if (!treeItemAcc)
29825:       return;
21169: 
21169:     nsresult rv = treeItemAcc->Init();
29825:     if (NS_FAILED(rv))
29825:       return;
21169: 
21169:     accessNode = treeItemAcc;
31673:     PutCacheEntry(mAccessNodeCache, key, accessNode);
    1:   }
29825: 
29825:   CallQueryInterface(accessNode, aAccessible);
    1: }
    1: 
29825: void
 8868: nsXULTreeAccessible::InvalidateCache(PRInt32 aRow, PRInt32 aCount)
 8868: {
29825:   if (IsDefunct())
29825:     return;
29825: 
 8868:   // Do not invalidate the cache if rows have been inserted.
 8868:   if (aCount > 0)
29825:     return;
10409: 
31673:   // Fire destroy event for removed tree items and delete them from caches.
 8868:   for (PRInt32 rowIdx = aRow; rowIdx < aRow - aCount; rowIdx++) {
31673:     void *key = reinterpret_cast<void*>(rowIdx);
 8868: 
 8868:     nsCOMPtr<nsIAccessNode> accessNode;
31673:     GetCacheEntry(mAccessNodeCache, key, getter_AddRefs(accessNode));
 8868: 
 8868:     if (accessNode) {
31673:       nsRefPtr<nsAccessible> accessible =
31673:         nsAccUtils::QueryAccessible(accessNode);
31673: 
 8868:       nsCOMPtr<nsIAccessibleEvent> event =
32336:         new nsAccEvent(nsIAccessibleEvent::EVENT_HIDE, accessible, PR_FALSE);
 8868:       FireAccessibleEvent(event);
 8868: 
31673:       accessible->Shutdown();
31673: 
31673:       // Remove accessible from document cache and tree cache.
31673:       nsCOMPtr<nsIAccessibleDocument> docAccessible = GetDocAccessible();
31673:       if (docAccessible) { 
31673:         nsRefPtr<nsDocAccessible> docAcc =
31673:           nsAccUtils::QueryAccessibleDocument(docAccessible);
31673:         docAcc->RemoveAccessNodeFromCache(accessible);
 8868:       }
 8868: 
31673:       mAccessNodeCache.Remove(key);
31673:     }
31673:   }
31673: 
31673:   // We dealt with removed tree items already however we may keep tree items
31673:   // having row indexes greater than row count. We should remove these dead tree
31673:   // items silently from caches.
 8868:   PRInt32 newRowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&newRowCount);
29825:   if (NS_FAILED(rv))
29825:     return;
 8868: 
 8868:   PRInt32 oldRowCount = newRowCount - aCount;
 8868: 
 8868:   for (PRInt32 rowIdx = newRowCount; rowIdx < oldRowCount; ++rowIdx) {
31673:     void *key = reinterpret_cast<void*>(rowIdx);
31673: 
31673:     nsCOMPtr<nsIAccessNode> accessNode;
31673:     GetCacheEntry(mAccessNodeCache, key, getter_AddRefs(accessNode));
31673: 
31673:     if (accessNode) {
31673:       nsRefPtr<nsAccessNode> accNode =
31673:         nsAccUtils::QueryAccessNode(accessNode);
31673: 
31673:       accNode->Shutdown();
31673: 
31673:       // Remove accessible from document cache and tree cache.
31673:       nsCOMPtr<nsIAccessibleDocument> docAccessible = GetDocAccessible();
31673:       if (docAccessible) {
31673:         nsRefPtr<nsDocAccessible> docAcc =
31673:           nsAccUtils::QueryAccessibleDocument(docAccessible);
31673:         docAcc->RemoveAccessNodeFromCache(accNode);
31673:       }
31673: 
31673:       mAccessNodeCache.Remove(key);
 8868:     }
 8868:   }
 8868: }
 8868: 
29825: void
11389: nsXULTreeAccessible::TreeViewInvalidated(PRInt32 aStartRow, PRInt32 aEndRow,
11389:                                          PRInt32 aStartCol, PRInt32 aEndCol)
11389: {
29825:   if (IsDefunct())
29825:     return;
11389: 
15375:   PRInt32 endRow = aEndRow;
11389: 
11389:   nsresult rv;
11389:   if (endRow == -1) {
11389:     PRInt32 rowCount = 0;
11389:     rv = mTreeView->GetRowCount(&rowCount);
29825:     if (NS_FAILED(rv))
29825:       return;
11389: 
11389:     endRow = rowCount - 1;
11389:   }
11389: 
11389:   nsCOMPtr<nsITreeColumns> treeColumns;
11389:   mTree->GetColumns(getter_AddRefs(treeColumns));
29825:   if (!treeColumns)
29825:     return;
11389: 
15375:   PRInt32 endCol = aEndCol;
15375: 
11389:   if (endCol == -1) {
11389:     PRInt32 colCount = 0;
11389:     rv = treeColumns->GetCount(&colCount);
29825:     if (NS_FAILED(rv))
29825:       return;
11389: 
11389:     endCol = colCount - 1;
11389:   }
11389: 
11389:   for (PRInt32 rowIdx = aStartRow; rowIdx <= endRow; ++rowIdx) {
31673:     void *key = reinterpret_cast<void*>(rowIdx);
11389: 
11389:     nsCOMPtr<nsIAccessNode> accessNode;
31673:     GetCacheEntry(mAccessNodeCache, key, getter_AddRefs(accessNode));
11389: 
11389:     if (accessNode) {
31673:       nsRefPtr<nsXULTreeItemAccessibleBase> treeitemAcc =
31673:         nsAccUtils::QueryObject<nsXULTreeItemAccessibleBase>(accessNode);
29825:       NS_ASSERTION(treeitemAcc, "Wrong accessible at the given key!");
11389: 
31673:       treeitemAcc->RowInvalidated(aStartCol, endCol);
11389:     }
11389:   }
11389: }
11389: 
29825: void
15375: nsXULTreeAccessible::TreeViewChanged()
15375: {
29825:   if (IsDefunct())
29825:     return;
15375: 
15375:   // Fire only notification destroy/create events on accessible tree to lie to
15375:   // AT because it should be expensive to fire destroy events for each tree item
15375:   // in cache.
15375:   nsCOMPtr<nsIAccessibleEvent> eventDestroy =
32336:     new nsAccEvent(nsIAccessibleEvent::EVENT_HIDE, this, PR_FALSE);
29825:   if (!eventDestroy)
29825:     return;
15375: 
29825:   FirePlatformEvent(eventDestroy);
15375: 
31673:   ClearCache(mAccessNodeCache);
15375: 
15375:   mTree->GetView(getter_AddRefs(mTreeView));
15375: 
15375:   nsCOMPtr<nsIAccessibleEvent> eventCreate =
32336:     new nsAccEvent(nsIAccessibleEvent::EVENT_SHOW, this, PR_FALSE);
29825:   if (!eventCreate)
29825:     return;
15375: 
29825:   FirePlatformEvent(eventCreate);
15375: }
15375: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeAccessible: protected implementation
31673: 
31673: void
31673: nsXULTreeAccessible::CreateTreeItemAccessible(PRInt32 aRow,
31673:                                               nsAccessNode** aAccessNode)
    1: {
31673:   *aAccessNode = new nsXULTreeItemAccessible(mDOMNode, mWeakShell, this,
31673:                                              mTree, mTreeView, aRow);
31673:   NS_IF_ADDREF(*aAccessNode);
    1: }
    1:                              
15375: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase
31673: ////////////////////////////////////////////////////////////////////////////////
    1: 
31673: nsXULTreeItemAccessibleBase::
31673:   nsXULTreeItemAccessibleBase(nsIDOMNode *aDOMNode, nsIWeakReference *aShell,
31673:                               nsIAccessible *aParent, nsITreeBoxObject *aTree,
31673:                               nsITreeView *aTreeView, PRInt32 aRow) :
31673:   mTree(aTree), mTreeView(aTreeView), mRow(aRow),
31673:   nsAccessibleWrap(aDOMNode, aShell)
    1: {
31673:   mParent = aParent;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsISupports implementation
29825: 
31673: NS_IMPL_ISUPPORTS_INHERITED1(nsXULTreeItemAccessibleBase,
31673:                              nsAccessible,
31673:                              nsXULTreeItemAccessibleBase)
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsIAccessNode implementation
29825: 
18347: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetUniqueID(void **aUniqueID)
    1: {
31673:   // Since mDOMNode is same for all tree items and tree itself, use |this|
31673:   // pointer as the unique ID.
 3233:   *aUniqueID = static_cast<void*>(this);
    1:   return NS_OK;
    1: }
    1: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsIAccessible implementation
11389: 
31673: NS_IMETHODIMP
35136: nsXULTreeItemAccessibleBase::GetParent(nsIAccessible **aParent)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aParent);
35136:   *aParent = nsnull;
35136: 
35136:   if (IsDefunct())
35136:     return NS_ERROR_FAILURE;
35136: 
35136:   if (mParent) {
35136:     *aParent = mParent;
35136:     NS_ADDREF(*aParent);
35136:   }
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeItemAccessibleBase::GetNextSibling(nsIAccessible **aNextSibling)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aNextSibling);
35136:   *aNextSibling = nsnull;
35136: 
35136:   if (IsDefunct())
35136:     return NS_ERROR_FAILURE;
35136: 
35136:   nsRefPtr<nsXULTreeAccessible> treeAcc =
35136:     nsAccUtils::QueryAccessibleTree(mParent);
35136:   NS_ENSURE_STATE(treeAcc);
35136: 
35136:   PRInt32 rowCount = 0;
35136:   mTreeView->GetRowCount(&rowCount);
35136:   if (mRow + 1 >= rowCount)
35136:     return NS_OK;
35136: 
35136:   treeAcc->GetTreeItemAccessible(mRow + 1, aNextSibling);
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeItemAccessibleBase::GetPreviousSibling(nsIAccessible **aPreviousSibling)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aPreviousSibling);
35136:   *aPreviousSibling = nsnull;
35136: 
35136:   if (IsDefunct())
35136:     return NS_ERROR_FAILURE;
35136: 
35136:   nsRefPtr<nsXULTreeAccessible> treeAcc =
35136:     nsAccUtils::QueryAccessibleTree(mParent);
35136:   NS_ENSURE_STATE(treeAcc);
35136: 
35136:   // Get previous row accessible or tree columns accessible.
35136:   if (mRow > 0)
35136:     treeAcc->GetTreeItemAccessible(mRow - 1, aPreviousSibling);
35136:   else
35136:     treeAcc->GetFirstChild(aPreviousSibling);
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetFocusedChild(nsIAccessible **aFocusedChild) 
    1: {
31673:   NS_ENSURE_ARG_POINTER(aFocusedChild);
31673:   *aFocusedChild = nsnull;
31673: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
31673:   if (gLastFocusedNode != mDOMNode)
31673:     return NS_OK;
31673: 
31673:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
31673:     do_QueryInterface(mDOMNode);
31673: 
31673:   if (multiSelect) {
31673:     PRInt32 row = -1;
31673:     multiSelect->GetCurrentIndex(&row);
31673:     if (row == mRow)
31673:       NS_ADDREF(*aFocusedChild = this);
    1:   }
    1: 
31673:   return NS_OK;
    1: }
    1: 
28029: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetBounds(PRInt32 *aX, PRInt32 *aY,
28029:                                        PRInt32 *aWidth, PRInt32 *aHeight)
    1: {
28029:   NS_ENSURE_ARG_POINTER(aX);
28029:   *aX = 0;
28029:   NS_ENSURE_ARG_POINTER(aY);
28029:   *aY = 0;
28029:   NS_ENSURE_ARG_POINTER(aWidth);
28029:   *aWidth = 0;
28029:   NS_ENSURE_ARG_POINTER(aHeight);
28029:   *aHeight = 0;
    1: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
31673:   // Get x coordinate and width from treechildren element, get y coordinate and
31673:   // height from tree cell.
    1: 
28029:   nsCOMPtr<nsIBoxObject> boxObj = nsCoreUtils::GetTreeBodyBoxObject(mTree);
28029:   NS_ENSURE_STATE(boxObj);
    1: 
31673:   nsCOMPtr<nsITreeColumn> column = nsCoreUtils::GetFirstSensibleColumn(mTree);
31673: 
31673:   PRInt32 x = 0, y = 0, width = 0, height = 0;
31673:   nsresult rv = mTree->GetCoordsForCellItem(mRow, column, EmptyCString(),
31673:                                             &x, &y, &width, &height);
28029:   NS_ENSURE_SUCCESS(rv, rv);
28029: 
31673:   boxObj->GetWidth(&width);
31673: 
28029:   PRInt32 tcX = 0, tcY = 0;
28029:   boxObj->GetScreenX(&tcX);
28029:   boxObj->GetScreenY(&tcY);
31673: 
31673:   x = tcX;
31673:   y += tcY;
31673: 
31673:   nsPresContext *presContext = GetPresContext();
31673:   *aX = presContext->CSSPixelsToDevPixels(x);
31673:   *aY = presContext->CSSPixelsToDevPixels(y);
31673:   *aWidth = presContext->CSSPixelsToDevPixels(width);
31673:   *aHeight = presContext->CSSPixelsToDevPixels(height);
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::SetSelected(PRBool aSelect)
    1: {
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection) {
    1:     PRBool isSelected;
    1:     selection->IsSelected(mRow, &isSelected);
    1:     if (isSelected != aSelect)
    1:       selection->ToggleSelect(mRow);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::TakeFocus()
    1: {
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsITreeSelection> selection;
    1:   mTreeView->GetSelection(getter_AddRefs(selection));
    1:   if (selection)
    1:     selection->SetCurrentIndex(mRow);
    1: 
    1:   // focus event will be fired here
    1:   return nsAccessible::TakeFocus();
    1: }
    1: 
24822: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetRelationByType(PRUint32 aRelationType,
24822:                                                nsIAccessibleRelation **aRelation)
    1: {
24822:   NS_ENSURE_ARG_POINTER(aRelation);
24822:   *aRelation = nsnull;
24822: 
 9622:   if (IsDefunct())
 9622:     return NS_ERROR_FAILURE;
 9622: 
 1628:   if (aRelationType == nsIAccessibleRelation::RELATION_NODE_CHILD_OF) {
    1:     PRInt32 parentIndex;
    1:     if (NS_SUCCEEDED(mTreeView->GetParentIndex(mRow, &parentIndex))) {
24822:       if (parentIndex == -1)
24822:         return nsRelUtils::AddTarget(aRelationType, aRelation, mParent);
24822: 
31673:       nsRefPtr<nsXULTreeAccessible> treeAcc =
29825:         nsAccUtils::QueryAccessibleTree(mParent);
29825: 
31673:       nsCOMPtr<nsIAccessible> logicalParent;
31673:       treeAcc->GetTreeItemAccessible(parentIndex, getter_AddRefs(logicalParent));
31673:       return nsRelUtils::AddTarget(aRelationType, aRelation, logicalParent);
    1:     }
24822: 
    1:     return NS_OK;
11438:   }
11438: 
24822:   return nsAccessible::GetRelationByType(aRelationType, aRelation);
    1: }
    1: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetNumActions(PRUint8 *aActionsCount)
11389: {
31673:   NS_ENSURE_ARG_POINTER(aActionsCount);
31673:   *aActionsCount = 0;
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   // "activate" action is available for all treeitems, "expand/collapse" action
31673:   // is avaible for treeitem which is container.
31673:   *aActionsCount = IsExpandable() ? 2 : 1;
31673:   return NS_OK;
11389: }
11389: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::GetActionName(PRUint8 aIndex, nsAString& aName)
11389: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   if (aIndex == eAction_Click) {
31673:     aName.AssignLiteral("activate");
31673:     return NS_OK;
31673:   }
31673: 
31673:   if (aIndex == eAction_Expand && IsExpandable()) {
31673:     PRBool isContainerOpen;
31673:     mTreeView->IsContainerOpen(mRow, &isContainerOpen);
31673:     if (isContainerOpen)
31673:       aName.AssignLiteral("collapse");
31673:     else
31673:       aName.AssignLiteral("expand");
31673: 
31673:     return NS_OK;
31673:   }
31673: 
31673:   return NS_ERROR_INVALID_ARG;
31673: }
31673: 
31673: NS_IMETHODIMP
31673: nsXULTreeItemAccessibleBase::DoAction(PRUint8 aIndex)
31673: {
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   if (aIndex != eAction_Click &&
31673:       (aIndex != eAction_Expand || !IsExpandable()))
31673:     return NS_ERROR_INVALID_ARG;
31673: 
31673:   return DoCommand(nsnull, aIndex);
11389: }
11389: 
 6094: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessibleBase: nsAccessNode implementation
31673: 
31673: PRBool
31673: nsXULTreeItemAccessibleBase::IsDefunct()
31673: {
31673:   if (nsAccessibleWrap::IsDefunct() || !mTree || !mTreeView || mRow < 0)
31673:     return PR_TRUE;
31673: 
31673:   PRInt32 rowCount = 0;
31673:   nsresult rv = mTreeView->GetRowCount(&rowCount);
31673:   return NS_FAILED(rv) || mRow >= rowCount;
31673: }
31673: 
31673: nsresult
31673: nsXULTreeItemAccessibleBase::Shutdown()
31673: {
31673:   mTree = nsnull;
31673:   mTreeView = nsnull;
31673:   mRow = -1;
31673: 
31673:   return nsAccessibleWrap::Shutdown();
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
35136: // nsXULTreeItemAccessibleBase: nsAccessible implementation
31673: 
31673: nsresult
31673: nsXULTreeItemAccessibleBase::GetAttributesInternal(nsIPersistentProperties *aAttributes)
31673: {
31673:   NS_ENSURE_ARG_POINTER(aAttributes);
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   PRInt32 level;
31673:   nsresult rv = mTreeView->GetLevel(mRow, &level);
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   PRInt32 topCount = 1;
31673:   for (PRInt32 index = mRow - 1; index >= 0; index--) {
31673:     PRInt32 lvl = -1;
31673:     if (NS_SUCCEEDED(mTreeView->GetLevel(index, &lvl))) {
31673:       if (lvl < level)
31673:         break;
31673: 
31673:       if (lvl == level)
31673:         topCount++;
31673:     }
31673:   }
31673: 
31673:   PRInt32 rowCount = 0;
31673:   rv = mTreeView->GetRowCount(&rowCount);
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   PRInt32 bottomCount = 0;
31673:   for (PRInt32 index = mRow + 1; index < rowCount; index++) {
31673:     PRInt32 lvl = -1;
31673:     if (NS_SUCCEEDED(mTreeView->GetLevel(index, &lvl))) {
31673:       if (lvl < level)
31673:         break;
31673: 
31673:       if (lvl == level)
31673:         bottomCount++;
31673:     }
31673:   }
31673: 
31673:   PRInt32 setSize = topCount + bottomCount;
31673:   PRInt32 posInSet = topCount;
31673: 
31673:   // set the group attributes
31673:   nsAccUtils::SetAccGroupAttrs(aAttributes, level + 1, posInSet, setSize);
31673:   return NS_OK;
31673: }
31673: 
31673: nsresult
31673: nsXULTreeItemAccessibleBase::GetStateInternal(PRUint32 *aState,
31673:                                               PRUint32 *aExtraState)
31673: {
31673:   NS_ENSURE_ARG_POINTER(aState);
31673: 
31673:   *aState = 0;
31673:   if (aExtraState)
31673:     *aExtraState = 0;
31673: 
31673:   if (IsDefunct()) {
31673:     if (aExtraState)
31673:       *aExtraState = nsIAccessibleStates::EXT_STATE_DEFUNCT;
31673:     return NS_OK_DEFUNCT_OBJECT;
31673:   }
31673: 
31673:   // focusable and selectable states
31673:   *aState = nsIAccessibleStates::STATE_FOCUSABLE |
31673:     nsIAccessibleStates::STATE_SELECTABLE;
31673: 
31673:   // expanded/collapsed state
31673:   if (IsExpandable()) {
31673:     PRBool isContainerOpen;
31673:     mTreeView->IsContainerOpen(mRow, &isContainerOpen);
31673:     *aState |= isContainerOpen ?
31673:       nsIAccessibleStates::STATE_EXPANDED:
31673:       nsIAccessibleStates::STATE_COLLAPSED;
31673:   }
31673: 
31673:   // selected state
31673:   nsCOMPtr<nsITreeSelection> selection;
31673:   mTreeView->GetSelection(getter_AddRefs(selection));
31673:   if (selection) {
31673:     PRBool isSelected;
31673:     selection->IsSelected(mRow, &isSelected);
31673:     if (isSelected)
31673:       *aState |= nsIAccessibleStates::STATE_SELECTED;
31673:   }
31673: 
31673:   // focused state
31673:   nsCOMPtr<nsIDOMXULMultiSelectControlElement> multiSelect =
31673:   do_QueryInterface(mDOMNode);
31673:   if (multiSelect) {
31673:     PRInt32 currentIndex;
31673:     multiSelect->GetCurrentIndex(&currentIndex);
31673:     if (currentIndex == mRow) {
31673:       *aState |= nsIAccessibleStates::STATE_FOCUSED;
31673:     }
31673:   }
31673: 
31673:   // invisible state
31673:   PRInt32 firstVisibleRow, lastVisibleRow;
31673:   mTree->GetFirstVisibleRow(&firstVisibleRow);
31673:   mTree->GetLastVisibleRow(&lastVisibleRow);
31673:   if (mRow < firstVisibleRow || mRow > lastVisibleRow)
31673:     *aState |= nsIAccessibleStates::STATE_INVISIBLE;
31673: 
31673:   return NS_OK;
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
35136: // nsXULTreeItemAccessibleBase: protected implementation
31673: 
31673: void
31673: nsXULTreeItemAccessibleBase::DispatchClickEvent(nsIContent *aContent,
31673:                                                 PRUint32 aActionIndex)
31673: {
31673:   if (IsDefunct())
31673:     return;
31673: 
31673:   nsCOMPtr<nsITreeColumns> columns;
31673:   mTree->GetColumns(getter_AddRefs(columns));
31673:   if (!columns)
31673:     return;
31673: 
31673:   // Get column and pseudo element.
31673:   nsCOMPtr<nsITreeColumn> column;
31673:   nsCAutoString pseudoElm;
31673: 
31673:   if (aActionIndex == eAction_Click) {
31673:     // Key column is visible and clickable.
31673:     columns->GetKeyColumn(getter_AddRefs(column));
31673:   } else {
31673:     // Primary column contains a twisty we should click on.
31673:     columns->GetPrimaryColumn(getter_AddRefs(column));
31673:     pseudoElm = NS_LITERAL_CSTRING("twisty");
31673:   }
31673: 
31673:   if (column)
31673:     nsCoreUtils::DispatchClickEvent(mTree, mRow, column, pseudoElm);
31673: }
31673: 
31673: PRBool
31673: nsXULTreeItemAccessibleBase::IsExpandable()
31673: {
31673:   PRBool isContainer = PR_FALSE;
31673:   mTreeView->IsContainer(mRow, &isContainer);
31673:   if (isContainer) {
31673:     PRBool isEmpty = PR_FALSE;
31673:     mTreeView->IsContainerEmpty(mRow, &isEmpty);
31673:     if (!isEmpty) {
31673:       nsCOMPtr<nsITreeColumns> columns;
31673:       mTree->GetColumns(getter_AddRefs(columns));
31673:       nsCOMPtr<nsITreeColumn> primaryColumn;
31673:       if (columns) {
31673:         columns->GetPrimaryColumn(getter_AddRefs(primaryColumn));
31673:         if (!nsCoreUtils::IsColumnHidden(primaryColumn))
31673:           return PR_TRUE;
31673:       }
31673:     }
31673:   }
31673: 
31673:   return PR_FALSE;
31673: }
31673: 
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
31673: nsXULTreeItemAccessible::
31673: nsXULTreeItemAccessible(nsIDOMNode *aDOMNode, nsIWeakReference *aShell,
31673:                         nsIAccessible *aParent, nsITreeBoxObject *aTree,
31673:                         nsITreeView *aTreeView, PRInt32 aRow) :
31673:   nsXULTreeItemAccessibleBase(aDOMNode, aShell, aParent, aTree, aTreeView, aRow)
31673: {
31673:   mColumn = nsCoreUtils::GetFirstSensibleColumn(mTree);
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsIAccessible implementation
31673: 
31673: NS_IMETHODIMP
35136: nsXULTreeItemAccessible::GetFirstChild(nsIAccessible **aFirstChild)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aFirstChild);
35136:   *aFirstChild = nsnull;
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeItemAccessible::GetLastChild(nsIAccessible **aLastChild)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aLastChild);
35136:   *aLastChild = nsnull;
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
35136: nsXULTreeItemAccessible::GetChildCount(PRInt32 *aChildCount)
35136: {
35136:   NS_ENSURE_ARG_POINTER(aChildCount);
35136:   *aChildCount = 0;
35136: 
35136:   return NS_OK;
35136: }
35136: 
35136: NS_IMETHODIMP
31673: nsXULTreeItemAccessible::GetName(nsAString& aName)
31673: {
31673:   aName.Truncate();
31673: 
31673:   if (IsDefunct())
31673:     return NS_ERROR_FAILURE;
31673: 
31673:   mTreeView->GetCellText(mRow, mColumn, aName);
31673: 
31673:   // If there is still no name try the cell value:
31673:   // This is for graphical cells. We need tree/table view implementors to implement
31673:   // FooView::GetCellValue to return a meaningful string for cases where there is
31673:   // something shown in the cell (non-text) such as a star icon; in which case
31673:   // GetCellValue for that cell would return "starred" or "flagged" for example.
31673:   if (aName.IsEmpty())
31673:     mTreeView->GetCellValue(mRow, mColumn, aName);
31673: 
31673:   return NS_OK;
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsAccessNode implementation
31673: 
31673: PRBool
31673: nsXULTreeItemAccessible::IsDefunct()
31673: {
31673:   return nsXULTreeItemAccessibleBase::IsDefunct() || !mColumn;
31673: }
31673: 
31673: nsresult
31673: nsXULTreeItemAccessible::Init()
31673: {
31673:   nsresult rv = nsXULTreeItemAccessibleBase::Init();
31673:   NS_ENSURE_SUCCESS(rv, rv);
31673: 
31673:   return GetName(mCachedName);
31673: }
31673: 
31673: nsresult
31673: nsXULTreeItemAccessible::Shutdown()
31673: {
31673:   mColumn = nsnull;
31673:   return nsXULTreeItemAccessibleBase::Shutdown();
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsAccessible implementation
31673: 
31673: nsresult
31673: nsXULTreeItemAccessible::GetRoleInternal(PRUint32 *aRole)
31673: {
31673:   nsCOMPtr<nsITreeColumn> column =
31673:     nsCoreUtils::GetFirstSensibleColumn(mTree);
31673: 
31673:   PRBool isPrimary = PR_FALSE;
31673:   column->GetPrimary(&isPrimary);
31673: 
31673:   *aRole = isPrimary ?
31673:     nsIAccessibleRole::ROLE_OUTLINEITEM :
31673:     nsIAccessibleRole::ROLE_LISTITEM;
31673: 
31673:   return NS_OK;
31673: }
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
31673: // nsXULTreeItemAccessible: nsXULTreeItemAccessibleBase implementation
31673: 
31673: void
31673: nsXULTreeItemAccessible::RowInvalidated(PRInt32 aStartColIdx,
31673:                                         PRInt32 aEndColIdx)
31673: {
31673:   nsAutoString name;
31673:   GetName(name);
31673: 
31673:   if (name != mCachedName) {
31673:     nsAccUtils::FireAccEvent(nsIAccessibleEvent::EVENT_NAME_CHANGE, this);
31673:     mCachedName = name;
31673:   }
31673: }
31673: 
31673: 
31673: ////////////////////////////////////////////////////////////////////////////////
 6094: //  nsXULTreeColumnsAccessible
31673: ////////////////////////////////////////////////////////////////////////////////
31673: 
 6094: nsXULTreeColumnsAccessible::
 6094:   nsXULTreeColumnsAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell):
 6094:   nsXULColumnsAccessible(aDOMNode, aShell)
    1: {
    1: }
    1: 
35136: NS_IMETHODIMP
35136: nsXULTreeColumnsAccessible::GetNextSibling(nsIAccessible **aNextSibling)
    1: {
35136:   NS_ENSURE_ARG_POINTER(aNextSibling);
35136:   *aNextSibling = nsnull;
    1: 
    1:   nsCOMPtr<nsITreeBoxObject> tree;
    1:   nsCOMPtr<nsITreeView> treeView;
    1: 
31673:   nsCoreUtils::GetTreeBoxObject(mDOMNode, getter_AddRefs(tree));
    1:   if (tree) {
    1:     tree->GetView(getter_AddRefs(treeView));
    1:     if (treeView) {
31673:       PRInt32 rowCount = 0;
    1:       treeView->GetRowCount(&rowCount);
35136:       if (rowCount > 0) {
31673:         nsRefPtr<nsXULTreeAccessible> treeAcc =
31673:           nsAccUtils::QueryAccessibleTree(mParent);
35136:         NS_ENSURE_STATE(treeAcc);
13372: 
35136:         treeAcc->GetTreeItemAccessible(0, aNextSibling);
    1:       }
    1:     }
    1:   }
    1: 
35136:   return NS_OK;
    1: }
    1: 
