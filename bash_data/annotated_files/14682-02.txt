12589: /* -*- Mode: c; tab-width: 8; c-basic-offset: 4; indent-tabs-mode: t; -*- */
    1: /* cairo - a vector graphics library with display and print output
    1:  *
    1:  * Copyright © 2005 Red Hat, Inc
 6154:  * Copyright © 2007 Adrian Johnson
    1:  *
    1:  * This library is free software; you can redistribute it and/or
    1:  * modify it either under the terms of the GNU Lesser General Public
    1:  * License version 2.1 as published by the Free Software Foundation
    1:  * (the "LGPL") or, at your option, under the terms of the Mozilla
    1:  * Public License Version 1.1 (the "MPL"). If you do not alter this
    1:  * notice, a recipient may use your version of this file under either
    1:  * the MPL or the LGPL.
    1:  *
    1:  * You should have received a copy of the LGPL along with this library
    1:  * in the file COPYING-LGPL-2.1; if not, write to the Free Software
    1:  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    1:  * You should have received a copy of the MPL along with this library
    1:  * in the file COPYING-MPL-1.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License
    1:  * Version 1.1 (the "License"); you may not use this file except in
    1:  * compliance with the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
    1:  * OF ANY KIND, either express or implied. See the LGPL or the MPL for
    1:  * the specific language governing rights and limitations.
    1:  *
    1:  * The Original Code is the cairo graphics library.
    1:  *
    1:  * The Initial Developer of the Original Code is Red Hat, Inc.
    1:  *
    1:  * Contributor(s):
    1:  *	Kristian Høgsberg <krh@redhat.com>
    1:  *	Carl Worth <cworth@cworth.org>
 6154:  *	Adrian Johnson <ajohnson@redneon.com>
    1:  */
    1: 
    1: /* A meta surface is a surface that records all drawing operations at
    1:  * the highest level of the surface backend interface, (that is, the
    1:  * level of paint, mask, stroke, fill, and show_glyphs). The meta
    1:  * surface can then be "replayed" against any target surface with:
    1:  *
    1:  *	_cairo_meta_surface_replay (meta, target);
    1:  *
    1:  * after which the results in target will be identical to the results
    1:  * that would have been obtained if the original operations applied to
    1:  * the meta surface had instead been applied to the target surface.
    1:  *
    1:  * The recording phase of the meta surface is careful to snapshot all
    1:  * necessary objects (paths, patterns, etc.), in order to achieve
    1:  * accurate replay. The efficiency of the meta surface could be
    1:  * improved by improving the implementation of snapshot for the
    1:  * various objects. For example, it would be nice to have a
    1:  * copy-on-write implementation for _cairo_surface_snapshot.
    1:  */
    1: 
    1: #include "cairoint.h"
    1: #include "cairo-meta-surface-private.h"
    1: #include "cairo-clip-private.h"
    1: 
 6154: typedef enum {
 6154:     CAIRO_META_REPLAY,
10414:     CAIRO_META_CREATE_REGIONS
 6154: } cairo_meta_replay_type_t;
 6154: 
    1: static const cairo_surface_backend_t cairo_meta_surface_backend;
    1: 
    1: /* Currently all meta surfaces do have a size which should be passed
    1:  * in as the maximum size of any target surface against which the
    1:  * meta-surface will ever be replayed.
    1:  *
    1:  * XXX: The naming of "pixels" in the size here is a misnomer. It's
    1:  * actually a size in whatever device-space units are desired (again,
    1:  * according to the intended replay target). This should likely also
    1:  * be changed to use doubles not ints.
    1:  */
    1: cairo_surface_t *
    1: _cairo_meta_surface_create (cairo_content_t	content,
    1: 			    int			width_pixels,
    1: 			    int			height_pixels)
    1: {
    1:     cairo_meta_surface_t *meta;
    1: 
    1:     meta = malloc (sizeof (cairo_meta_surface_t));
10694:     if (meta == NULL)
10694: 	return _cairo_surface_create_in_error (_cairo_error (CAIRO_STATUS_NO_MEMORY));
    1: 
    1:     _cairo_surface_init (&meta->base, &cairo_meta_surface_backend,
    1: 			 content);
    1: 
    1:     meta->content = content;
    1:     meta->width_pixels = width_pixels;
    1:     meta->height_pixels = height_pixels;
    1: 
    1:     _cairo_array_init (&meta->commands, sizeof (cairo_command_t *));
    1:     meta->commands_owner = NULL;
    1: 
    1:     meta->is_clipped = FALSE;
    1:     meta->replay_start_idx = 0;
    1: 
    1:     return &meta->base;
    1: }
    1: 
    1: static cairo_surface_t *
    1: _cairo_meta_surface_create_similar (void	       *abstract_surface,
    1: 				    cairo_content_t	content,
    1: 				    int			width,
    1: 				    int			height)
    1: {
    1:     return _cairo_meta_surface_create (content, width, height);
    1: }
    1: 
    1: static cairo_status_t
    1: _cairo_meta_surface_finish (void *abstract_surface)
    1: {
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_t *command;
    1:     cairo_command_t **elements;
    1:     int i, num_elements;
    1: 
    1:     if (meta->commands_owner) {
    1: 	cairo_surface_destroy (meta->commands_owner);
    1: 	return CAIRO_STATUS_SUCCESS;
    1:     }
    1: 
    1:     num_elements = meta->commands.num_elements;
    1:     elements = _cairo_array_index (&meta->commands, 0);
    1:     for (i = 0; i < num_elements; i++) {
    1: 	command = elements[i];
 6154: 	switch (command->header.type) {
    1: 
    1: 	/* 5 basic drawing operations */
    1: 
    1: 	case CAIRO_COMMAND_PAINT:
    1: 	    _cairo_pattern_fini (&command->paint.source.base);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	case CAIRO_COMMAND_MASK:
    1: 	    _cairo_pattern_fini (&command->mask.source.base);
    1: 	    _cairo_pattern_fini (&command->mask.mask.base);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	case CAIRO_COMMAND_STROKE:
    1: 	    _cairo_pattern_fini (&command->stroke.source.base);
    1: 	    _cairo_path_fixed_fini (&command->stroke.path);
    1: 	    _cairo_stroke_style_fini (&command->stroke.style);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	case CAIRO_COMMAND_FILL:
    1: 	    _cairo_pattern_fini (&command->fill.source.base);
    1: 	    _cairo_path_fixed_fini (&command->fill.path);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	case CAIRO_COMMAND_SHOW_GLYPHS:
    1: 	    _cairo_pattern_fini (&command->show_glyphs.source.base);
    1: 	    free (command->show_glyphs.glyphs);
    1: 	    cairo_scaled_font_destroy (command->show_glyphs.scaled_font);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	/* Other junk. */
    1: 	case CAIRO_COMMAND_INTERSECT_CLIP_PATH:
    1: 	    if (command->intersect_clip_path.path_pointer)
    1: 		_cairo_path_fixed_fini (&command->intersect_clip_path.path);
    1: 	    free (command);
    1: 	    break;
    1: 
    1: 	default:
    1: 	    ASSERT_NOT_REACHED;
    1: 	}
    1:     }
    1: 
    1:     _cairo_array_fini (&meta->commands);
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: static cairo_status_t
    1: _cairo_meta_surface_acquire_source_image (void			 *abstract_surface,
    1: 					  cairo_image_surface_t	**image_out,
    1: 					  void			**image_extra)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *surface = abstract_surface;
    1:     cairo_surface_t *image;
    1: 
 6154:     image = _cairo_image_surface_create_with_content (surface->content,
    1: 						      surface->width_pixels,
    1: 						      surface->height_pixels);
    1: 
    1:     status = _cairo_meta_surface_replay (&surface->base, image);
    1:     if (status) {
    1: 	cairo_surface_destroy (image);
    1: 	return status;
    1:     }
    1: 
    1:     *image_out = (cairo_image_surface_t *) image;
    1:     *image_extra = NULL;
    1: 
    1:     return status;
    1: }
    1: 
    1: static void
    1: _cairo_meta_surface_release_source_image (void			*abstract_surface,
    1: 					  cairo_image_surface_t	*image,
    1: 					  void			*image_extra)
    1: {
    1:     cairo_surface_destroy (&image->base);
    1: }
    1: 
    1: static cairo_status_t
    1: _init_pattern_with_snapshot (cairo_pattern_t       *pattern,
    1: 			     const cairo_pattern_t *other)
    1: {
 4133:     cairo_status_t status;
 4133: 
 4133:     status = _cairo_pattern_init_copy (pattern, other);
 4133:     if (status)
 4133: 	return status;
    1: 
    1:     if (pattern->type == CAIRO_PATTERN_TYPE_SURFACE) {
    1: 	cairo_surface_pattern_t *surface_pattern =
    1: 	    (cairo_surface_pattern_t *) pattern;
    1: 	cairo_surface_t *surface = surface_pattern->surface;
    1: 
    1: 	surface_pattern->surface = _cairo_surface_snapshot (surface);
    1: 
    1: 	cairo_surface_destroy (surface);
    1: 
    1: 	if (surface_pattern->surface->status)
    1: 	    return surface_pattern->surface->status;
    1:     }
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_paint (void			*abstract_surface,
    1: 			   cairo_operator_t	 op,
    1: 			   cairo_pattern_t	*source)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_paint_t *command;
    1: 
    1:     command = malloc (sizeof (cairo_command_paint_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_PAINT;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1:     command->op = op;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->source.base, source);
    1:     if (status)
    1: 	goto CLEANUP_COMMAND;
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status)
    1: 	goto CLEANUP_SOURCE;
    1: 
 6154:     /* An optimisation that takes care to not replay what was done
 6154:      * before surface is cleared. We don't erase recorded commands
 6154:      * since we may have earlier snapshots of this surface. */
 6154:     if (op == CAIRO_OPERATOR_CLEAR && !meta->is_clipped)
 6154: 	meta->replay_start_idx = meta->commands.num_elements;
 6154: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: 
    1:   CLEANUP_SOURCE:
    1:     _cairo_pattern_fini (&command->source.base);
    1:   CLEANUP_COMMAND:
    1:     free (command);
    1:     return status;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_mask (void			*abstract_surface,
    1: 			  cairo_operator_t	 op,
    1: 			  cairo_pattern_t	*source,
    1: 			  cairo_pattern_t	*mask)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_mask_t *command;
    1: 
    1:     command = malloc (sizeof (cairo_command_mask_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_MASK;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1:     command->op = op;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->source.base, source);
    1:     if (status)
    1: 	goto CLEANUP_COMMAND;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->mask.base, mask);
    1:     if (status)
    1: 	goto CLEANUP_SOURCE;
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status)
    1: 	goto CLEANUP_MASK;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: 
    1:   CLEANUP_MASK:
    1:     _cairo_pattern_fini (&command->mask.base);
    1:   CLEANUP_SOURCE:
    1:     _cairo_pattern_fini (&command->source.base);
    1:   CLEANUP_COMMAND:
    1:     free (command);
    1:     return status;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_stroke (void			*abstract_surface,
    1: 			    cairo_operator_t		 op,
    1: 			    cairo_pattern_t		*source,
    1: 			    cairo_path_fixed_t		*path,
    1: 			    cairo_stroke_style_t	*style,
    1: 			    cairo_matrix_t		*ctm,
    1: 			    cairo_matrix_t		*ctm_inverse,
    1: 			    double			 tolerance,
    1: 			    cairo_antialias_t		 antialias)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_stroke_t *command;
    1: 
    1:     command = malloc (sizeof (cairo_command_stroke_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_STROKE;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1:     command->op = op;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->source.base, source);
    1:     if (status)
    1: 	goto CLEANUP_COMMAND;
    1: 
    1:     status = _cairo_path_fixed_init_copy (&command->path, path);
    1:     if (status)
    1: 	goto CLEANUP_SOURCE;
    1: 
    1:     status = _cairo_stroke_style_init_copy (&command->style, style);
    1:     if (status)
    1: 	goto CLEANUP_PATH;
    1: 
    1:     command->ctm = *ctm;
    1:     command->ctm_inverse = *ctm_inverse;
    1:     command->tolerance = tolerance;
    1:     command->antialias = antialias;
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status)
    1: 	goto CLEANUP_STYLE;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: 
    1:   CLEANUP_STYLE:
    1:     _cairo_stroke_style_fini (&command->style);
    1:   CLEANUP_PATH:
    1:     _cairo_path_fixed_fini (&command->path);
    1:   CLEANUP_SOURCE:
    1:     _cairo_pattern_fini (&command->source.base);
    1:   CLEANUP_COMMAND:
    1:     free (command);
    1:     return status;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_fill (void			*abstract_surface,
    1: 			  cairo_operator_t	 op,
    1: 			  cairo_pattern_t	*source,
    1: 			  cairo_path_fixed_t	*path,
    1: 			  cairo_fill_rule_t	 fill_rule,
    1: 			  double		 tolerance,
    1: 			  cairo_antialias_t	 antialias)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_fill_t *command;
    1: 
    1:     command = malloc (sizeof (cairo_command_fill_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_FILL;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1:     command->op = op;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->source.base, source);
    1:     if (status)
    1: 	goto CLEANUP_COMMAND;
    1: 
    1:     status = _cairo_path_fixed_init_copy (&command->path, path);
    1:     if (status)
    1: 	goto CLEANUP_SOURCE;
    1: 
    1:     command->fill_rule = fill_rule;
    1:     command->tolerance = tolerance;
    1:     command->antialias = antialias;
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status)
    1: 	goto CLEANUP_PATH;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: 
    1:   CLEANUP_PATH:
    1:     _cairo_path_fixed_fini (&command->path);
    1:   CLEANUP_SOURCE:
    1:     _cairo_pattern_fini (&command->source.base);
    1:   CLEANUP_COMMAND:
    1:     free (command);
    1:     return status;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_show_glyphs (void			*abstract_surface,
    1: 				 cairo_operator_t	 op,
    1: 				 cairo_pattern_t	*source,
    1: 				 cairo_glyph_t		*glyphs,
    1: 				 int			 num_glyphs,
    1: 				 cairo_scaled_font_t	*scaled_font)
    1: {
    1:     cairo_status_t status;
    1:     cairo_meta_surface_t *meta = abstract_surface;
    1:     cairo_command_show_glyphs_t *command;
    1: 
    1:     command = malloc (sizeof (cairo_command_show_glyphs_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_SHOW_GLYPHS;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1:     command->op = op;
    1: 
    1:     status = _init_pattern_with_snapshot (&command->source.base, source);
    1:     if (status)
    1: 	goto CLEANUP_COMMAND;
    1: 
 4133:     command->glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
    1:     if (command->glyphs == NULL) {
 8452: 	status = _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 	goto CLEANUP_SOURCE;
    1:     }
    1:     memcpy (command->glyphs, glyphs, sizeof (cairo_glyph_t) * num_glyphs);
    1: 
    1:     command->num_glyphs = num_glyphs;
    1: 
    1:     command->scaled_font = cairo_scaled_font_reference (scaled_font);
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status)
    1: 	goto CLEANUP_SCALED_FONT;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: 
    1:   CLEANUP_SCALED_FONT:
    1:     cairo_scaled_font_destroy (command->scaled_font);
    1:     free (command->glyphs);
    1:   CLEANUP_SOURCE:
    1:     _cairo_pattern_fini (&command->source.base);
    1:   CLEANUP_COMMAND:
    1:     free (command);
10414:     return status;
    1: }
    1: 
    1: /**
    1:  * _cairo_meta_surface_snapshot
    1:  * @surface: a #cairo_surface_t which must be a meta surface
    1:  *
    1:  * Make an immutable copy of @surface. It is an error to call a
    1:  * surface-modifying function on the result of this function.
    1:  *
    1:  * The caller owns the return value and should call
    1:  * cairo_surface_destroy when finished with it. This function will not
11708:  * return %NULL, but will return a nil surface instead.
    1:  *
    1:  * Return value: The snapshot surface.
    1:  **/
    1: static cairo_surface_t *
    1: _cairo_meta_surface_snapshot (void *abstract_other)
    1: {
    1:     cairo_meta_surface_t *other = abstract_other;
    1:     cairo_meta_surface_t *meta;
    1: 
    1:     meta = malloc (sizeof (cairo_meta_surface_t));
10694:     if (meta == NULL)
10694: 	return _cairo_surface_create_in_error (_cairo_error (CAIRO_STATUS_NO_MEMORY));
    1: 
    1:     _cairo_surface_init (&meta->base, &cairo_meta_surface_backend,
    1: 			 other->base.content);
    1:     meta->base.is_snapshot = TRUE;
    1: 
    1:     meta->width_pixels = other->width_pixels;
    1:     meta->height_pixels = other->height_pixels;
    1:     meta->replay_start_idx = other->replay_start_idx;
    1:     meta->content = other->content;
    1: 
    1:     _cairo_array_init_snapshot (&meta->commands, &other->commands);
    1:     meta->commands_owner = cairo_surface_reference (&other->base);
    1: 
    1:     return &meta->base;
    1: }
    1: 
    1: static cairo_int_status_t
    1: _cairo_meta_surface_intersect_clip_path (void		    *dst,
    1: 					 cairo_path_fixed_t *path,
    1: 					 cairo_fill_rule_t   fill_rule,
    1: 					 double		     tolerance,
    1: 					 cairo_antialias_t   antialias)
    1: {
    1:     cairo_meta_surface_t *meta = dst;
    1:     cairo_command_intersect_clip_path_t *command;
    1:     cairo_status_t status;
    1: 
    1:     command = malloc (sizeof (cairo_command_intersect_clip_path_t));
    1:     if (command == NULL)
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 
 6154:     command->header.type = CAIRO_COMMAND_INTERSECT_CLIP_PATH;
 6154:     command->header.region = CAIRO_META_REGION_ALL;
    1: 
    1:     if (path) {
    1: 	status = _cairo_path_fixed_init_copy (&command->path, path);
    1: 	if (status) {
    1: 	    free (command);
    1: 	    return status;
    1: 	}
    1: 	command->path_pointer = &command->path;
    1: 	meta->is_clipped = TRUE;
    1:     } else {
    1: 	command->path_pointer = NULL;
    1: 	meta->is_clipped = FALSE;
    1:     }
    1:     command->fill_rule = fill_rule;
    1:     command->tolerance = tolerance;
    1:     command->antialias = antialias;
    1: 
    1:     status = _cairo_array_append (&meta->commands, &command);
    1:     if (status) {
    1: 	if (path)
    1: 	    _cairo_path_fixed_fini (&command->path);
    1: 	free (command);
    1: 	return status;
    1:     }
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: /* Currently, we're using as the "size" of a meta surface the largest
    1:  * surface size against which the meta-surface is expected to be
    1:  * replayed, (as passed in to _cairo_meta_surface_create).
    1:  */
    1: static cairo_int_status_t
    1: _cairo_meta_surface_get_extents (void			 *abstract_surface,
 4133: 				 cairo_rectangle_int_t   *rectangle)
    1: {
    1:     cairo_meta_surface_t *surface = abstract_surface;
    1: 
    1:     rectangle->x = 0;
    1:     rectangle->y = 0;
    1:     rectangle->width = surface->width_pixels;
    1:     rectangle->height = surface->height_pixels;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: /**
    1:  * _cairo_surface_is_meta:
    1:  * @surface: a #cairo_surface_t
    1:  *
    1:  * Checks if a surface is a #cairo_meta_surface_t
    1:  *
11708:  * Return value: %TRUE if the surface is a meta surface
    1:  **/
    1: cairo_bool_t
    1: _cairo_surface_is_meta (const cairo_surface_t *surface)
    1: {
    1:     return surface->backend == &cairo_meta_surface_backend;
    1: }
    1: 
    1: static const cairo_surface_backend_t cairo_meta_surface_backend = {
    1:     CAIRO_INTERNAL_SURFACE_TYPE_META,
    1:     _cairo_meta_surface_create_similar,
    1:     _cairo_meta_surface_finish,
    1:     _cairo_meta_surface_acquire_source_image,
    1:     _cairo_meta_surface_release_source_image,
    1:     NULL, /* acquire_dest_image */
    1:     NULL, /* release_dest_image */
    1:     NULL, /* clone_similar */
    1:     NULL, /* composite */
    1:     NULL, /* fill_rectangles */
    1:     NULL, /* composite_trapezoids */
    1:     NULL, /* copy_page */
    1:     NULL, /* show_page */
    1:     NULL, /* set_clip_region */
    1:     _cairo_meta_surface_intersect_clip_path,
    1:     _cairo_meta_surface_get_extents,
    1:     NULL, /* old_show_glyphs */
    1:     NULL, /* get_font_options */
    1:     NULL, /* flush */
    1:     NULL, /* mark_dirty_rectangle */
    1:     NULL, /* scaled_font_fini */
    1:     NULL, /* scaled_glyph_fini */
    1: 
    1:     /* Here are the 5 basic drawing operations, (which are in some
    1:      * sense the only things that cairo_meta_surface should need to
    1:      * implement). */
    1: 
    1:     _cairo_meta_surface_paint,
    1:     _cairo_meta_surface_mask,
    1:     _cairo_meta_surface_stroke,
    1:     _cairo_meta_surface_fill,
    1:     _cairo_meta_surface_show_glyphs,
    1: 
    1:     _cairo_meta_surface_snapshot
    1: };
    1: 
    1: static cairo_path_fixed_t *
    1: _cairo_command_get_path (cairo_command_t *command)
    1: {
 6154:     switch (command->header.type) {
    1:     case CAIRO_COMMAND_PAINT:
    1:     case CAIRO_COMMAND_MASK:
    1:     case CAIRO_COMMAND_SHOW_GLYPHS:
    1: 	return NULL;
    1:     case CAIRO_COMMAND_STROKE:
    1: 	return &command->stroke.path;
    1:     case CAIRO_COMMAND_FILL:
    1: 	return &command->fill.path;
    1:     case CAIRO_COMMAND_INTERSECT_CLIP_PATH:
    1: 	return command->intersect_clip_path.path_pointer;
    1:     }
    1: 
    1:     ASSERT_NOT_REACHED;
    1:     return NULL;
    1: }
    1: 
 6154: static cairo_status_t
 6154: _cairo_meta_surface_replay_internal (cairo_surface_t	     *surface,
 6154: 				     cairo_surface_t	     *target,
 6154: 				     cairo_meta_replay_type_t type,
 6154: 				     cairo_meta_region_type_t region)
    1: {
    1:     cairo_meta_surface_t *meta;
    1:     cairo_command_t *command, **elements;
    1:     int i, num_elements;
14682:     cairo_int_status_t status, status2;
14682:     cairo_clip_t clip, *old_clip;
    1:     cairo_bool_t has_device_transform = _cairo_surface_has_device_transform (target);
    1:     cairo_matrix_t *device_transform = &target->device_transform;
    1:     cairo_path_fixed_t path_copy, *dev_path;
    1: 
 4133:     if (surface->status)
 4133: 	return surface->status;
 4133: 
 8452:     if (target->status)
 8452: 	return _cairo_surface_set_error (surface, target->status);
 8452: 
    1:     meta = (cairo_meta_surface_t *) surface;
    1:     status = CAIRO_STATUS_SUCCESS;
    1: 
    1:     _cairo_clip_init (&clip, target);
14682:     old_clip = _cairo_surface_get_clip (target);
    1: 
    1:     num_elements = meta->commands.num_elements;
    1:     elements = _cairo_array_index (&meta->commands, 0);
    1:     for (i = meta->replay_start_idx; i < num_elements; i++) {
    1: 	command = elements[i];
    1: 
 6154: 	if (type == CAIRO_META_REPLAY && region != CAIRO_META_REGION_ALL) {
 6154: 	    if (command->header.region != region)
 6154: 		continue;
 6154:         }
 6154: 
    1: 	/* For all commands except intersect_clip_path, we have to
    1: 	 * ensure the current clip gets set on the surface. */
 6154: 	if (command->header.type != CAIRO_COMMAND_INTERSECT_CLIP_PATH) {
    1: 	    status = _cairo_surface_set_clip (target, &clip);
    1: 	    if (status)
    1: 		break;
    1: 	}
    1: 
    1: 	dev_path = _cairo_command_get_path (command);
    1: 	if (dev_path && has_device_transform) {
 4133: 	    status = _cairo_path_fixed_init_copy (&path_copy, dev_path);
 4133: 	    if (status)
 4133: 		break;
    1: 	    _cairo_path_fixed_device_transform (&path_copy, device_transform);
    1: 	    dev_path = &path_copy;
    1: 	}
    1: 
 6154: 	switch (command->header.type) {
    1: 	case CAIRO_COMMAND_PAINT:
    1: 	    status = _cairo_surface_paint (target,
    1: 					   command->paint.op,
    1: 					   &command->paint.source.base);
    1: 	    break;
    1: 	case CAIRO_COMMAND_MASK:
    1: 	    status = _cairo_surface_mask (target,
    1: 					  command->mask.op,
    1: 					  &command->mask.source.base,
    1: 					  &command->mask.mask.base);
    1: 	    break;
    1: 	case CAIRO_COMMAND_STROKE:
    1: 	{
    1: 	    cairo_matrix_t dev_ctm = command->stroke.ctm;
    1: 	    cairo_matrix_t dev_ctm_inverse = command->stroke.ctm_inverse;
    1: 	    cairo_matrix_t tmp;
    1: 
    1: 	    if (has_device_transform) {
    1: 		cairo_matrix_multiply (&dev_ctm, &dev_ctm, device_transform);
    1: 		tmp = surface->device_transform;
    1: 		status = cairo_matrix_invert (&tmp);
    1: 		assert (status == CAIRO_STATUS_SUCCESS);
    1: 		cairo_matrix_multiply (&dev_ctm_inverse, &tmp, &dev_ctm_inverse);
    1: 	    }
    1: 
    1: 	    status = _cairo_surface_stroke (target,
    1: 					    command->stroke.op,
    1: 					    &command->stroke.source.base,
    1: 					    dev_path,
    1: 					    &command->stroke.style,
    1: 					    &dev_ctm,
    1: 					    &dev_ctm_inverse,
12588: 					    command->stroke.tolerance,
    1: 					    command->stroke.antialias);
    1: 	    break;
    1: 	}
    1: 	case CAIRO_COMMAND_FILL:
 6154: 	{
 6154: 	    cairo_command_t *stroke_command;
 6154: 
13979: 	    if (type != CAIRO_META_CREATE_REGIONS)
 6154: 		stroke_command = (i < num_elements - 1) ? elements[i + 1] : NULL;
13979: 	    else
13979: 		stroke_command = NULL;
13979: 
11886: 	    if (stroke_command != NULL &&
11886: 		type == CAIRO_META_REPLAY && region != CAIRO_META_REGION_ALL)
11886: 	    {
11886: 		if (stroke_command->header.region != region)
11886: 		    stroke_command = NULL;
11886: 	    }
 6154: 	    if (stroke_command != NULL &&
 6154: 		stroke_command->header.type == CAIRO_COMMAND_STROKE &&
 6154: 		_cairo_path_fixed_is_equal (dev_path, _cairo_command_get_path (stroke_command))) {
 6154: 		cairo_matrix_t dev_ctm;
 6154: 		cairo_matrix_t dev_ctm_inverse;
 6154: 		cairo_matrix_t tmp;
 6154: 
 6154: 		dev_ctm = stroke_command->stroke.ctm;
 6154: 		dev_ctm_inverse = stroke_command->stroke.ctm_inverse;
 6154: 
 6154: 		if (has_device_transform) {
 6154: 		    cairo_matrix_multiply (&dev_ctm, &dev_ctm, device_transform);
 6154: 		    tmp = surface->device_transform;
 6154: 		    status = cairo_matrix_invert (&tmp);
 6154: 		    assert (status == CAIRO_STATUS_SUCCESS);
 6154: 		    cairo_matrix_multiply (&dev_ctm_inverse, &tmp, &dev_ctm_inverse);
 6154: 		}
 6154: 
 6154: 		status = _cairo_surface_fill_stroke (target,
 6154: 						     command->fill.op,
 6154: 						     &command->fill.source.base,
 6154: 						     command->fill.fill_rule,
12588: 						     command->fill.tolerance,
 6154: 						     command->fill.antialias,
 6154: 						     dev_path,
 6154: 						     stroke_command->stroke.op,
 6154: 						     &stroke_command->stroke.source.base,
 6154: 						     &stroke_command->stroke.style,
 6154: 						     &dev_ctm,
 6154: 						     &dev_ctm_inverse,
12588: 						     stroke_command->stroke.tolerance,
 6154: 						     stroke_command->stroke.antialias);
 6154: 		i++;
 6154: 	    } else
    1: 		status = _cairo_surface_fill (target,
    1: 					      command->fill.op,
    1: 					      &command->fill.source.base,
    1: 					      dev_path,
    1: 					      command->fill.fill_rule,
12588: 					      command->fill.tolerance,
    1: 					      command->fill.antialias);
    1: 	    break;
 6154: 	}
    1: 	case CAIRO_COMMAND_SHOW_GLYPHS:
    1: 	{
    1: 	    cairo_glyph_t *glyphs = command->show_glyphs.glyphs;
12589: 	    cairo_glyph_t *dev_glyphs;
    1: 	    int i, num_glyphs = command->show_glyphs.num_glyphs;
    1: 
12589:             /* show_glyphs is special because _cairo_surface_show_glyphs is allowed
12589: 	     * to modify the glyph array that's passed in.  We must always
12589: 	     * copy the array before handing it to the backend.
12589: 	     */
 4133: 	    dev_glyphs = _cairo_malloc_ab (num_glyphs, sizeof (cairo_glyph_t));
    1: 	    if (dev_glyphs == NULL) {
 8452: 		status = _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1: 		break;
    1: 	    }
12589: 
12589: 	    if (has_device_transform) {
    1: 		for (i = 0; i < num_glyphs; i++) {
    1: 		    dev_glyphs[i] = glyphs[i];
    1: 		    cairo_matrix_transform_point (device_transform,
    1: 						  &dev_glyphs[i].x,
    1: 						  &dev_glyphs[i].y);
    1: 		}
12589: 	    } else {
12589: 		memcpy (dev_glyphs, glyphs, sizeof (cairo_glyph_t) * num_glyphs);
    1: 	    }
    1: 
    1: 	    status = _cairo_surface_show_glyphs	(target,
    1: 						 command->show_glyphs.op,
    1: 						 &command->show_glyphs.source.base,
    1: 						 dev_glyphs, num_glyphs,
    1: 						 command->show_glyphs.scaled_font);
    1: 
    1: 	    free (dev_glyphs);
    1: 	    break;
    1: 	}
    1: 	case CAIRO_COMMAND_INTERSECT_CLIP_PATH:
    1: 	    /* XXX Meta surface clipping is broken and requires some
    1: 	     * cairo-gstate.c rewriting.  Work around it for now. */
    1: 	    if (dev_path == NULL)
 4133: 		_cairo_clip_reset (&clip);
    1: 	    else
    1: 		status = _cairo_clip_clip (&clip, dev_path,
    1: 					   command->intersect_clip_path.fill_rule,
12588: 					   command->intersect_clip_path.tolerance,
    1: 					   command->intersect_clip_path.antialias,
    1: 					   target);
 6154:             assert (status == 0);
    1: 	    break;
    1: 	default:
    1: 	    ASSERT_NOT_REACHED;
    1: 	}
    1: 
    1: 	if (dev_path == &path_copy)
    1: 	    _cairo_path_fixed_fini (&path_copy);
    1: 
 6154: 	if (type == CAIRO_META_CREATE_REGIONS) {
 6154: 	    if (status == CAIRO_STATUS_SUCCESS) {
 6154: 		command->header.region = CAIRO_META_REGION_NATIVE;
 6154: 	    } else if (status == CAIRO_INT_STATUS_IMAGE_FALLBACK) {
 6154: 		command->header.region = CAIRO_META_REGION_IMAGE_FALLBACK;
 6154: 		status = CAIRO_STATUS_SUCCESS;
 6154: 	    }
 6154: 	}
 6154: 
    1: 	if (status)
    1: 	    break;
    1:     }
    1: 
 4133:     _cairo_clip_reset (&clip);
14682:     status2 = _cairo_surface_set_clip (target, old_clip);
14682:     if (status == CAIRO_STATUS_SUCCESS)
14682: 	status = status2;
    1: 
 8452:     return _cairo_surface_set_error (surface, status);
    1: }
 6154: 
 6154: cairo_status_t
 6154: _cairo_meta_surface_replay (cairo_surface_t *surface,
 6154: 			    cairo_surface_t *target)
 6154: {
 6154:     return _cairo_meta_surface_replay_internal (surface,
 6154: 						target,
 6154: 						CAIRO_META_REPLAY,
 6154: 						CAIRO_META_REGION_ALL);
 6154: }
 6154: 
 6154: /* Replay meta to surface. When the return status of each operation is
11708:  * one of %CAIRO_STATUS_SUCCESS, %CAIRO_INT_STATUS_UNSUPPORTED, or
 6154:  * CAIRO_INT_STATUS_FLATTEN_TRANSPARENCY the status of each operation
 6154:  * will be stored in the meta surface. Any other status will abort the
 6154:  * replay and return the status.
 6154:  */
 6154: cairo_status_t
 6154: _cairo_meta_surface_replay_and_create_regions (cairo_surface_t *surface,
 6154: 					       cairo_surface_t *target)
 6154: {
 6154:     return _cairo_meta_surface_replay_internal (surface,
 6154: 						target,
 6154: 						CAIRO_META_CREATE_REGIONS,
 6154: 						CAIRO_META_REGION_ALL);
 6154: }
 6154: 
 6154: cairo_status_t
 6154: _cairo_meta_surface_replay_region (cairo_surface_t          *surface,
 6154: 				   cairo_surface_t          *target,
 6154: 				   cairo_meta_region_type_t  region)
 6154: {
 6154:     return _cairo_meta_surface_replay_internal (surface,
 6154: 						target,
 6154: 						CAIRO_META_REPLAY,
 6154: 						region);
 6154: }
