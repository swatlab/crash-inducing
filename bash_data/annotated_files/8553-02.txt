   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
   1:  *
   1:  * ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is the Mozilla browser.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications, Inc.
   1:  * Portions created by the Initial Developer are Copyright (C) 1999
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Simon Fraser <sfraser@netscape.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: 
   1: #include "nsIComponentManager.h"
   1: #include "nsIInterfaceRequestorUtils.h"
   1: 
   1: #include "nsIDOMWindow.h"
   1: #include "nsIDocShellTreeItem.h"
   1: 
   1: #include "nsDocShellEditorData.h"
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   nsDocShellEditorData
   1: 
   1: ----------------------------------------------------------------------------*/
   1: 
   1: nsDocShellEditorData::nsDocShellEditorData(nsIDocShell* inOwningDocShell)
   1: : mDocShell(inOwningDocShell)
   1: , mMakeEditable(PR_FALSE)
   1: {
   1:   NS_ASSERTION(mDocShell, "Where is my docShell?");
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   ~nsDocShellEditorData
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsDocShellEditorData::~nsDocShellEditorData()
   1: {
8553:   TearDownEditor();
8553: }
8553: 
8553: void
8553: nsDocShellEditorData::TearDownEditor()
8553: {
   1:   if (mEditingSession)
   1:   {
   1:     nsCOMPtr<nsIDOMWindow> domWindow = do_GetInterface(mDocShell);
   1:     // This will eventually call nsDocShellEditorData::SetEditor(nsnull)
   1:     //   which will call mEditorPreDestroy() and delete the editor
7856:     mEditingSession->TearDownEditorOnWindow(domWindow);
   1:   }
   1:   else if (mEditor) // Should never have this w/o nsEditingSession!
   1:   {
   1:     mEditor->PreDestroy();
   1:     mEditor = nsnull;     // explicit clear to make destruction order predictable
   1:   }
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   MakeEditable
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::MakeEditable(PRBool inWaitForUriLoad /*, PRBool inEditable */)
   1: {
   1:   if (mMakeEditable)
   1:     return NS_OK;
   1:   
   1:   // if we are already editable, and are getting turned off,
   1:   // nuke the editor.
   1:   if (mEditor)
   1:   {
   1:     NS_WARNING("Destroying existing editor on frame");
   1:     
   1:     mEditor->PreDestroy();
   1:     mEditor = nsnull;
   1:   }
   1:   
2896:   if (inWaitForUriLoad)
   1:     mMakeEditable = PR_TRUE;
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   GetEditable
   1: 
   1: ----------------------------------------------------------------------------*/
   1: PRBool
   1: nsDocShellEditorData::GetEditable()
   1: {
   1:   return mMakeEditable || (mEditor != nsnull);
   1: }
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   CreateEditor
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::CreateEditor()
   1: {
   1:   nsCOMPtr<nsIEditingSession>   editingSession;    
   1:   nsresult rv = GetEditingSession(getter_AddRefs(editingSession));
   1:   if (NS_FAILED(rv)) return rv;
   1:   
   1:   nsCOMPtr<nsIDOMWindow>    domWindow = do_GetInterface(mDocShell);
   1:   rv = editingSession->SetupEditorOnWindow(domWindow);
   1:   if (NS_FAILED(rv)) return rv;
   1:   
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   GetEditingSession
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::GetEditingSession(nsIEditingSession **outEditingSession)
   1: {
   1:   nsresult rv = EnsureEditingSession();
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   NS_ADDREF(*outEditingSession = mEditingSession);
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   GetEditor
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::GetEditor(nsIEditor **outEditor)
   1: {
   1:   NS_ENSURE_ARG_POINTER(outEditor);
   1:   NS_IF_ADDREF(*outEditor = mEditor);
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   SetEditor
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::SetEditor(nsIEditor *inEditor)
   1: {
   1:   // destroy any editor that we have. Checks for equality are
   1:   // necessary to ensure that assigment into the nsCOMPtr does
   1:   // not temporarily reduce the refCount of the editor to zero
   1:   if (mEditor.get() != inEditor)
   1:   {
   1:     if (mEditor)
   1:     {
   1:       mEditor->PreDestroy();
   1:       mEditor = nsnull;
   1:     }
   1:       
   1:     mEditor = inEditor;    // owning addref
2896:     if (!mEditor)
2896:       mMakeEditable = PR_FALSE;
   1:   }   
   1:   
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: /*---------------------------------------------------------------------------
   1: 
   1:   EnsureEditingSession
   1:   
   1:   This creates the editing session on the content docShell that owns
   1:   'this'.
   1: 
   1: ----------------------------------------------------------------------------*/
   1: nsresult
   1: nsDocShellEditorData::EnsureEditingSession()
   1: {
   1:   NS_ASSERTION(mDocShell, "Should have docShell here");
   1:   
   1:   nsresult rv = NS_OK;
   1:   
   1:   if (!mEditingSession)
   1:   {
   1:     mEditingSession =
   1:       do_CreateInstance("@mozilla.org/editor/editingsession;1", &rv);
   1:   }
   1: 
   1:   return rv;
   1: }
   1: 
