29805: /*
29805:  * Copyright (c) 2007 Henri Sivonen
39515:  * Copyright (c) 2007-2010 Mozilla Foundation
29805:  * Portions of comments Copyright 2004-2008 Apple Computer, Inc., Mozilla 
29805:  * Foundation, and Opera Software ASA.
29805:  *
29805:  * Permission is hereby granted, free of charge, to any person obtaining a 
29805:  * copy of this software and associated documentation files (the "Software"), 
29805:  * to deal in the Software without restriction, including without limitation 
29805:  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
29805:  * and/or sell copies of the Software, and to permit persons to whom the 
29805:  * Software is furnished to do so, subject to the following conditions:
29805:  *
29805:  * The above copyright notice and this permission notice shall be included in 
29805:  * all copies or substantial portions of the Software.
29805:  *
29805:  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
29805:  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
29805:  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
29805:  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
29805:  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
29805:  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
29805:  * DEALINGS IN THE SOFTWARE.
29805:  */
29805: 
29805: /*
29805:  * THIS IS A GENERATED FILE. PLEASE DO NOT EDIT.
29805:  * Please edit TreeBuilder.java instead and regenerate.
29805:  */
29805: 
29805: #ifndef nsHtml5TreeBuilder_h__
29805: #define nsHtml5TreeBuilder_h__
29805: 
29805: #include "prtypes.h"
29805: #include "nsIAtom.h"
34979: #include "nsHtml5AtomTable.h"
29805: #include "nsITimer.h"
29805: #include "nsString.h"
29805: #include "nsINameSpaceManager.h"
29805: #include "nsIContent.h"
29805: #include "nsIDocument.h"
29805: #include "nsTraceRefcnt.h"
29805: #include "jArray.h"
29805: #include "nsHtml5DocumentMode.h"
29805: #include "nsHtml5ArrayCopy.h"
29805: #include "nsHtml5Parser.h"
29805: #include "nsHtml5Atoms.h"
29805: #include "nsHtml5ByteReadable.h"
29805: #include "nsHtml5TreeOperation.h"
29805: #include "nsHtml5PendingNotification.h"
29805: #include "nsHtml5StateSnapshot.h"
29805: #include "nsHtml5StackNode.h"
32917: #include "nsHtml5TreeOpExecutor.h"
32917: #include "nsHtml5StreamParser.h"
34979: #include "nsAHtml5TreeBuilderState.h"
29805: 
32917: class nsHtml5StreamParser;
29805: 
29805: class nsHtml5Tokenizer;
29805: class nsHtml5MetaScanner;
29805: class nsHtml5AttributeName;
29805: class nsHtml5ElementName;
29805: class nsHtml5HtmlAttributes;
29805: class nsHtml5UTF16Buffer;
29805: class nsHtml5StateSnapshot;
29805: class nsHtml5Portability;
29805: 
29805: 
34979: class nsHtml5TreeBuilder : public nsAHtml5TreeBuilderState
29805: {
29805:   private:
46394:     static PRUnichar REPLACEMENT_CHARACTER[];
29805:     static jArray<const char*,PRInt32> QUIRKY_PUBLIC_IDS;
29805:     PRInt32 mode;
29805:     PRInt32 originalMode;
36587:     PRBool framesetOk;
41449:     PRBool inForeign;
29805:   protected:
29805:     nsHtml5Tokenizer* tokenizer;
29805:   private:
29805:     PRBool scriptingEnabled;
29805:     PRBool needToDropLF;
29805:     PRBool fragment;
29805:     nsIAtom* contextName;
29805:     PRInt32 contextNamespace;
34978:     nsIContent** contextNode;
29805:     jArray<nsHtml5StackNode*,PRInt32> stack;
29805:     PRInt32 currentPtr;
29805:     jArray<nsHtml5StackNode*,PRInt32> listOfActiveFormattingElements;
29805:     PRInt32 listPtr;
34978:     nsIContent** formPointer;
34978:     nsIContent** headPointer;
53890:     nsIContent** deepTreeSurrogateParent;
29805:   protected:
29805:     jArray<PRUnichar,PRInt32> charBuffer;
29805:     PRInt32 charBufferLen;
29805:   private:
29805:     PRBool quirks;
29805:   public:
29805:     void startTokenization(nsHtml5Tokenizer* self);
29805:     void doctype(nsIAtom* name, nsString* publicIdentifier, nsString* systemIdentifier, PRBool forceQuirks);
29805:     void comment(PRUnichar* buf, PRInt32 start, PRInt32 length);
39515:     void characters(const PRUnichar* buf, PRInt32 start, PRInt32 length);
46394:     void zeroOriginatingReplacementCharacter();
29805:     void eof();
29805:     void endTokenization();
29805:     void startTag(nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes, PRBool selfClosing);
29805:     static nsString* extractCharsetFromContent(nsString* attributeValue);
29805:   private:
29805:     void checkMetaCharset(nsHtml5HtmlAttributes* attributes);
29805:   public:
29805:     void endTag(nsHtml5ElementName* elementName);
29805:   private:
29805:     PRInt32 findLastInTableScopeOrRootTbodyTheadTfoot();
29805:     PRInt32 findLast(nsIAtom* name);
29805:     PRInt32 findLastInTableScope(nsIAtom* name);
29805:     PRInt32 findLastInScope(nsIAtom* name);
35594:     PRInt32 findLastInListScope(nsIAtom* name);
29805:     PRInt32 findLastInScopeHn();
29805:     PRBool hasForeignInScope();
29805:     void generateImpliedEndTagsExceptFor(nsIAtom* name);
29805:     void generateImpliedEndTags();
29805:     PRBool isSecondOnStackBody();
29805:     void documentModeInternal(nsHtml5DocumentMode m, nsString* publicIdentifier, nsString* systemIdentifier, PRBool html4SpecificAdditionalErrorChecks);
29805:     PRBool isAlmostStandards(nsString* publicIdentifier, nsString* systemIdentifier);
29805:     PRBool isQuirky(nsIAtom* name, nsString* publicIdentifier, nsString* systemIdentifier, PRBool forceQuirks);
29805:     void closeTheCell(PRInt32 eltPos);
29805:     PRInt32 findLastInTableScopeTdTh();
29805:     void clearStackBackTo(PRInt32 eltPos);
29805:     void resetTheInsertionMode();
29805:     void implicitlyCloseP();
29805:     PRBool clearLastStackSlot();
29805:     PRBool clearLastListSlot();
29805:     void push(nsHtml5StackNode* node);
35597:     void silentPush(nsHtml5StackNode* node);
29805:     void append(nsHtml5StackNode* node);
29805:     inline void insertMarker()
29805:     {
29805:       append(nsnull);
29805:     }
29805: 
29805:     void clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:     inline PRBool isCurrent(nsIAtom* name)
29805:     {
29805:       return name == stack[currentPtr]->name;
29805:     }
29805: 
29805:     void removeFromStack(PRInt32 pos);
29805:     void removeFromStack(nsHtml5StackNode* node);
29805:     void removeFromListOfActiveFormattingElements(PRInt32 pos);
29805:     void adoptionAgencyEndTag(nsIAtom* name);
29805:     void insertIntoStack(nsHtml5StackNode* node, PRInt32 position);
29805:     void insertIntoListOfActiveFormattingElements(nsHtml5StackNode* formattingClone, PRInt32 bookmark);
29805:     PRInt32 findInListOfActiveFormattingElements(nsHtml5StackNode* node);
29805:     PRInt32 findInListOfActiveFormattingElementsContainsBetweenEndAndLastMarker(nsIAtom* name);
29805:     PRInt32 findLastOrRoot(nsIAtom* name);
29805:     PRInt32 findLastOrRoot(PRInt32 group);
43391:     PRBool addAttributesToBody(nsHtml5HtmlAttributes* attributes);
29805:     void addAttributesToHtml(nsHtml5HtmlAttributes* attributes);
29805:     void pushHeadPointerOntoStack();
29805:     void reconstructTheActiveFormattingElements();
34978:     void insertIntoFosterParent(nsIContent** child);
29805:     PRBool isInStack(nsHtml5StackNode* node);
29805:     void pop();
35597:     void silentPop();
29805:     void popOnEof();
29805:     void appendHtmlElementToDocumentAndPush(nsHtml5HtmlAttributes* attributes);
29805:     void appendHtmlElementToDocumentAndPush();
29805:     void appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushBodyElement(nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushBodyElement();
29805:     void appendToCurrentNodeAndPushFormElementMayFoster(nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushFormattingElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushElement(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushElementMayFosterNoScoping(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
29805:     void appendToCurrentNodeAndPushElementMayFosterCamelCase(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
34978:     void appendToCurrentNodeAndPushElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes, nsIContent** form);
34978:     void appendVoidElementToCurrentMayFoster(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes, nsIContent** form);
29805:     void appendVoidElementToCurrentMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
29805:     void appendVoidElementToCurrentMayFosterCamelCase(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes);
34978:     void appendVoidElementToCurrent(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes, nsIContent** form);
36328:     void appendVoidFormToCurrent(nsHtml5HtmlAttributes* attributes);
29805:   protected:
39515:     void accumulateCharacters(const PRUnichar* buf, PRInt32 start, PRInt32 length);
39999:     void accumulateCharacter(PRUnichar c);
29805:     void requestSuspension();
34978:     nsIContent** createElement(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes);
34978:     nsIContent** createElement(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes, nsIContent** form);
34978:     nsIContent** createHtmlElementSetAsRoot(nsHtml5HtmlAttributes* attributes);
34978:     void detachFromParent(nsIContent** element);
34978:     PRBool hasChildren(nsIContent** element);
34978:     void appendElement(nsIContent** child, nsIContent** newParent);
34978:     void appendChildrenToNewParent(nsIContent** oldParent, nsIContent** newParent);
34978:     void insertFosterParentedChild(nsIContent** child, nsIContent** table, nsIContent** stackParent);
34978:     void insertFosterParentedCharacters(PRUnichar* buf, PRInt32 start, PRInt32 length, nsIContent** table, nsIContent** stackParent);
34978:     void appendCharacters(nsIContent** parent, PRUnichar* buf, PRInt32 start, PRInt32 length);
44175:     void appendIsindexPrompt(nsIContent** parent);
34978:     void appendComment(nsIContent** parent, PRUnichar* buf, PRInt32 start, PRInt32 length);
29805:     void appendCommentToDocument(PRUnichar* buf, PRInt32 start, PRInt32 length);
34978:     void addAttributesToElement(nsIContent** element, nsHtml5HtmlAttributes* attributes);
34978:     void markMalformedIfScript(nsIContent** elt);
36207:     void start(PRBool fragmentMode);
29805:     void end();
29805:     void appendDoctypeToDocument(nsIAtom* name, nsString* publicIdentifier, nsString* systemIdentifier);
34978:     void elementPushed(PRInt32 ns, nsIAtom* name, nsIContent** node);
34978:     void elementPopped(PRInt32 ns, nsIAtom* name, nsIContent** node);
29805:   public:
34978:     void setFragmentContext(nsIAtom* context, PRInt32 ns, nsIContent** node, PRBool quirks);
29805:   protected:
34978:     nsIContent** currentNode();
29805:   public:
29805:     PRBool isScriptingEnabled();
29805:     void setScriptingEnabled(PRBool scriptingEnabled);
34979:     void flushCharacters();
29805:   private:
29805:     PRBool charBufferContainsNonWhitespace();
29805:   public:
34979:     nsAHtml5TreeBuilderState* newSnapshot();
34979:     PRBool snapshotMatches(nsAHtml5TreeBuilderState* snapshot);
34979:     void loadState(nsAHtml5TreeBuilderState* snapshot, nsHtml5AtomTable* interner);
34979:   private:
34979:     PRInt32 findInArray(nsHtml5StackNode* node, jArray<nsHtml5StackNode*,PRInt32> arr);
34979:   public:
34979:     nsIContent** getFormPointer();
34979:     nsIContent** getHeadPointer();
53890:     nsIContent** getDeepTreeSurrogateParent();
34979:     jArray<nsHtml5StackNode*,PRInt32> getListOfActiveFormattingElements();
34979:     jArray<nsHtml5StackNode*,PRInt32> getStack();
34979:     PRInt32 getMode();
34979:     PRInt32 getOriginalMode();
36587:     PRBool isFramesetOk();
41449:     PRBool isInForeign();
34979:     PRBool isNeedToDropLF();
34979:     PRBool isQuirks();
40984:     PRInt32 getListOfActiveFormattingElementsLength();
34979:     PRInt32 getStackLength();
29805:     static void initializeStatics();
29805:     static void releaseStatics();
29805: 
29805: #include "nsHtml5TreeBuilderHSupplement.h"
29805: };
29805: 
29805: #ifdef nsHtml5TreeBuilder_cpp__
46394: PRUnichar nsHtml5TreeBuilder::REPLACEMENT_CHARACTER[] = { 0xfffd };
29805: jArray<const char*,PRInt32> nsHtml5TreeBuilder::QUIRKY_PUBLIC_IDS = nsnull;
29805: #endif
29805: 
29805: #define NS_HTML5TREE_BUILDER_OTHER 0
29805: #define NS_HTML5TREE_BUILDER_A 1
29805: #define NS_HTML5TREE_BUILDER_BASE 2
29805: #define NS_HTML5TREE_BUILDER_BODY 3
29805: #define NS_HTML5TREE_BUILDER_BR 4
29805: #define NS_HTML5TREE_BUILDER_BUTTON 5
29805: #define NS_HTML5TREE_BUILDER_CAPTION 6
29805: #define NS_HTML5TREE_BUILDER_COL 7
29805: #define NS_HTML5TREE_BUILDER_COLGROUP 8
29805: #define NS_HTML5TREE_BUILDER_FORM 9
29805: #define NS_HTML5TREE_BUILDER_FRAME 10
29805: #define NS_HTML5TREE_BUILDER_FRAMESET 11
29805: #define NS_HTML5TREE_BUILDER_IMAGE 12
29805: #define NS_HTML5TREE_BUILDER_INPUT 13
29805: #define NS_HTML5TREE_BUILDER_ISINDEX 14
29805: #define NS_HTML5TREE_BUILDER_LI 15
46393: #define NS_HTML5TREE_BUILDER_LINK_OR_BASEFONT_OR_BGSOUND 16
29805: #define NS_HTML5TREE_BUILDER_MATH 17
29805: #define NS_HTML5TREE_BUILDER_META 18
29805: #define NS_HTML5TREE_BUILDER_SVG 19
29805: #define NS_HTML5TREE_BUILDER_HEAD 20
29805: #define NS_HTML5TREE_BUILDER_HR 22
29805: #define NS_HTML5TREE_BUILDER_HTML 23
29805: #define NS_HTML5TREE_BUILDER_NOBR 24
29805: #define NS_HTML5TREE_BUILDER_NOFRAMES 25
29805: #define NS_HTML5TREE_BUILDER_NOSCRIPT 26
29805: #define NS_HTML5TREE_BUILDER_OPTGROUP 27
29805: #define NS_HTML5TREE_BUILDER_OPTION 28
29805: #define NS_HTML5TREE_BUILDER_P 29
29805: #define NS_HTML5TREE_BUILDER_PLAINTEXT 30
29805: #define NS_HTML5TREE_BUILDER_SCRIPT 31
29805: #define NS_HTML5TREE_BUILDER_SELECT 32
29805: #define NS_HTML5TREE_BUILDER_STYLE 33
29805: #define NS_HTML5TREE_BUILDER_TABLE 34
29805: #define NS_HTML5TREE_BUILDER_TEXTAREA 35
29805: #define NS_HTML5TREE_BUILDER_TITLE 36
29805: #define NS_HTML5TREE_BUILDER_TR 37
29805: #define NS_HTML5TREE_BUILDER_XMP 38
29805: #define NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT 39
29805: #define NS_HTML5TREE_BUILDER_TD_OR_TH 40
29805: #define NS_HTML5TREE_BUILDER_DD_OR_DT 41
29805: #define NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6 42
29805: #define NS_HTML5TREE_BUILDER_MARQUEE_OR_APPLET 43
29805: #define NS_HTML5TREE_BUILDER_PRE_OR_LISTING 44
29805: #define NS_HTML5TREE_BUILDER_B_OR_BIG_OR_CODE_OR_EM_OR_I_OR_S_OR_SMALL_OR_STRIKE_OR_STRONG_OR_TT_OR_U 45
29805: #define NS_HTML5TREE_BUILDER_UL_OR_OL_OR_DL 46
29805: #define NS_HTML5TREE_BUILDER_IFRAME 47
29805: #define NS_HTML5TREE_BUILDER_EMBED_OR_IMG 48
46393: #define NS_HTML5TREE_BUILDER_AREA_OR_SPACER_OR_WBR 49
29805: #define NS_HTML5TREE_BUILDER_DIV_OR_BLOCKQUOTE_OR_CENTER_OR_MENU 50
35594: #define NS_HTML5TREE_BUILDER_ADDRESS_OR_DIR_OR_ARTICLE_OR_ASIDE_OR_DATAGRID_OR_DETAILS_OR_HGROUP_OR_FIGURE_OR_FOOTER_OR_HEADER_OR_NAV_OR_SECTION 51
29805: #define NS_HTML5TREE_BUILDER_RUBY_OR_SPAN_OR_SUB_OR_SUP_OR_VAR 52
29805: #define NS_HTML5TREE_BUILDER_RT_OR_RP 53
35594: #define NS_HTML5TREE_BUILDER_COMMAND 54
29805: #define NS_HTML5TREE_BUILDER_PARAM_OR_SOURCE 55
29805: #define NS_HTML5TREE_BUILDER_MGLYPH_OR_MALIGNMARK 56
29805: #define NS_HTML5TREE_BUILDER_MI_MO_MN_MS_MTEXT 57
29805: #define NS_HTML5TREE_BUILDER_ANNOTATION_XML 58
29805: #define NS_HTML5TREE_BUILDER_FOREIGNOBJECT_OR_DESC 59
29805: #define NS_HTML5TREE_BUILDER_NOEMBED 60
29805: #define NS_HTML5TREE_BUILDER_FIELDSET 61
29805: #define NS_HTML5TREE_BUILDER_OUTPUT_OR_LABEL 62
29805: #define NS_HTML5TREE_BUILDER_OBJECT 63
29805: #define NS_HTML5TREE_BUILDER_FONT 64
29805: #define NS_HTML5TREE_BUILDER_KEYGEN 65
29805: #define NS_HTML5TREE_BUILDER_INITIAL 0
29805: #define NS_HTML5TREE_BUILDER_BEFORE_HTML 1
29805: #define NS_HTML5TREE_BUILDER_BEFORE_HEAD 2
29805: #define NS_HTML5TREE_BUILDER_IN_HEAD 3
29805: #define NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT 4
29805: #define NS_HTML5TREE_BUILDER_AFTER_HEAD 5
29805: #define NS_HTML5TREE_BUILDER_IN_BODY 6
29805: #define NS_HTML5TREE_BUILDER_IN_TABLE 7
29805: #define NS_HTML5TREE_BUILDER_IN_CAPTION 8
29805: #define NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP 9
29805: #define NS_HTML5TREE_BUILDER_IN_TABLE_BODY 10
29805: #define NS_HTML5TREE_BUILDER_IN_ROW 11
29805: #define NS_HTML5TREE_BUILDER_IN_CELL 12
29805: #define NS_HTML5TREE_BUILDER_IN_SELECT 13
29805: #define NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE 14
29805: #define NS_HTML5TREE_BUILDER_AFTER_BODY 15
29805: #define NS_HTML5TREE_BUILDER_IN_FRAMESET 16
29805: #define NS_HTML5TREE_BUILDER_AFTER_FRAMESET 17
29805: #define NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY 18
29805: #define NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET 19
35594: #define NS_HTML5TREE_BUILDER_TEXT 20
29805: #define NS_HTML5TREE_BUILDER_FRAMESET_OK 21
29805: #define NS_HTML5TREE_BUILDER_CHARSET_INITIAL 0
29805: #define NS_HTML5TREE_BUILDER_CHARSET_C 1
29805: #define NS_HTML5TREE_BUILDER_CHARSET_H 2
29805: #define NS_HTML5TREE_BUILDER_CHARSET_A 3
29805: #define NS_HTML5TREE_BUILDER_CHARSET_R 4
29805: #define NS_HTML5TREE_BUILDER_CHARSET_S 5
29805: #define NS_HTML5TREE_BUILDER_CHARSET_E 6
29805: #define NS_HTML5TREE_BUILDER_CHARSET_T 7
29805: #define NS_HTML5TREE_BUILDER_CHARSET_EQUALS 8
29805: #define NS_HTML5TREE_BUILDER_CHARSET_SINGLE_QUOTED 9
29805: #define NS_HTML5TREE_BUILDER_CHARSET_DOUBLE_QUOTED 10
29805: #define NS_HTML5TREE_BUILDER_CHARSET_UNQUOTED 11
29805: #define NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK PR_INT32_MAX
29805: 
29805: 
29805: #endif
29805: 
