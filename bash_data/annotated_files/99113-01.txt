    1: /* cairo - a vector graphics library with display and print output
    1:  *
    1:  * Copyright © 2004 Red Hat, Inc
    1:  *
    1:  * This library is free software; you can redistribute it and/or
    1:  * modify it either under the terms of the GNU Lesser General Public
    1:  * License version 2.1 as published by the Free Software Foundation
    1:  * (the "LGPL") or, at your option, under the terms of the Mozilla
    1:  * Public License Version 1.1 (the "MPL"). If you do not alter this
    1:  * notice, a recipient may use your version of this file under either
    1:  * the MPL or the LGPL.
    1:  *
    1:  * You should have received a copy of the LGPL along with this library
    1:  * in the file COPYING-LGPL-2.1; if not, write to the Free Software
70960:  * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335, USA
    1:  * You should have received a copy of the MPL along with this library
    1:  * in the file COPYING-MPL-1.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License
    1:  * Version 1.1 (the "License"); you may not use this file except in
    1:  * compliance with the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
    1:  * OF ANY KIND, either express or implied. See the LGPL or the MPL for
    1:  * the specific language governing rights and limitations.
    1:  *
    1:  * The Original Code is the cairo graphics library.
    1:  *
    1:  * The Initial Developer of the Original Code is University of Southern
    1:  * California.
    1:  *
    1:  * Contributor(s):
    1:  *	Kristian Høgsberg <krh@redhat.com>
    1:  *	Carl Worth <cworth@cworth.org>
    1:  */
    1: 
    1: #include "cairoint.h"
70960: #include "cairo-error-private.h"
    1: 
    1: /**
    1:  * _cairo_array_init:
    1:  *
11708:  * Initialize a new #cairo_array_t object to store objects each of size
    1:  * @element_size.
    1:  *
    1:  * The #cairo_array_t object provides grow-by-doubling storage. It
    1:  * never interprets the data passed to it, nor does it provide any
    1:  * sort of callback mechanism for freeing resources held onto by
    1:  * stored objects.
    1:  *
    1:  * When finished using the array, _cairo_array_fini() should be
    1:  * called to free resources allocated during use of the array.
    1:  **/
    1: void
    1: _cairo_array_init (cairo_array_t *array, int element_size)
    1: {
    1:     array->size = 0;
    1:     array->num_elements = 0;
    1:     array->element_size = element_size;
    1:     array->elements = NULL;
    1: 
    1:     array->is_snapshot = FALSE;
99113: 
    1: }
    1: 
    1: /**
    1:  * _cairo_array_init_snapshot:
    1:  * @array: A #cairo_array_t to be initialized as a snapshot
    1:  * @other: The #cairo_array_t from which to create the snapshot
    1:  *
    1:  * Initialize @array as an immutable copy of @other. It is an error to
    1:  * call an array-modifying function (other than _cairo_array_fini) on
    1:  * @array after calling this function.
    1:  **/
    1: void
    1: _cairo_array_init_snapshot (cairo_array_t	*array,
    1: 			    const cairo_array_t *other)
    1: {
    1:     array->size = other->size;
    1:     array->num_elements = other->num_elements;
    1:     array->element_size = other->element_size;
    1:     array->elements = other->elements;
    1: 
    1:     array->is_snapshot = TRUE;
99113: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
    1: }
    1: 
    1: /**
    1:  * _cairo_array_fini:
21379:  * @array: A #cairo_array_t
    1:  *
    1:  * Free all resources associated with @array. After this call, @array
    1:  * should not be used again without a subsequent call to
    1:  * _cairo_array_init() again first.
    1:  **/
    1: void
    1: _cairo_array_fini (cairo_array_t *array)
    1: {
    1:     if (array->is_snapshot)
    1: 	return;
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     if (array->elements) {
    1: 	free (* array->elements);
    1: 	free (array->elements);
    1:     }
    1: }
    1: 
    1: /**
    1:  * _cairo_array_grow_by:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Increase the size of @array (if needed) so that there are at least
    1:  * @additional free spaces in the array. The actual size of the array
    1:  * is always increased by doubling as many times as necessary.
    1:  **/
    1: cairo_status_t
13979: _cairo_array_grow_by (cairo_array_t *array, unsigned int additional)
    1: {
    1:     char *new_elements;
13979:     unsigned int old_size = array->size;
13979:     unsigned int required_size = array->num_elements + additional;
13979:     unsigned int new_size;
    1: 
    1:     assert (! array->is_snapshot);
    1: 
13979:     /* check for integer overflow */
13979:     if (required_size > INT_MAX || required_size < array->num_elements)
13979: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
13979: 
28364:     if (CAIRO_INJECT_FAULT ())
28364: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
28364: 
    1:     if (required_size <= old_size)
    1: 	return CAIRO_STATUS_SUCCESS;
    1: 
    1:     if (old_size == 0)
    1: 	new_size = 1;
    1:     else
    1: 	new_size = old_size * 2;
    1: 
    1:     while (new_size < required_size)
    1: 	new_size = new_size * 2;
    1: 
    1:     if (array->elements == NULL) {
    1: 	array->elements = malloc (sizeof (char *));
26419: 	if (unlikely (array->elements == NULL))
 8452: 	    return _cairo_error (CAIRO_STATUS_NO_MEMORY);
 8452: 
    1: 	*array->elements = NULL;
    1:     }
    1: 
    1:     array->size = new_size;
 8452:     new_elements = _cairo_realloc_ab (*array->elements,
 8452: 			              array->size, array->element_size);
    1: 
26419:     if (unlikely (new_elements == NULL)) {
    1: 	array->size = old_size;
 8452: 	return _cairo_error (CAIRO_STATUS_NO_MEMORY);
    1:     }
    1: 
    1:     *array->elements = new_elements;
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: /**
    1:  * _cairo_array_truncate:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Truncate size of the array to @num_elements if less than the
    1:  * current size. No memory is actually freed. The stored objects
    1:  * beyond @num_elements are simply "forgotten".
    1:  **/
    1: void
    1: _cairo_array_truncate (cairo_array_t *array, unsigned int num_elements)
    1: {
    1:     assert (! array->is_snapshot);
    1: 
    1:     if (num_elements < array->num_elements)
    1: 	array->num_elements = num_elements;
99113: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
    1: }
    1: 
    1: /**
    1:  * _cairo_array_index:
21379:  * @array: a #cairo_array_t
21379:  * Returns: A pointer to the object stored at @index.
    1:  *
21379:  * If the resulting value is assigned to a pointer to an object of the same
    1:  * element_size as initially passed to _cairo_array_init() then that
    1:  * pointer may be used for further direct indexing with []. For
    1:  * example:
    1:  *
21379:  * <informalexample><programlisting>
21379:  *	cairo_array_t array;
    1:  *	double *values;
    1:  *
    1:  *	_cairo_array_init (&array, sizeof(double));
    1:  *	... calls to _cairo_array_append() here ...
    1:  *
    1:  *	values = _cairo_array_index (&array, 0);
    1:  *      for (i = 0; i < _cairo_array_num_elements (&array); i++)
    1:  *	    ... use values[i] here ...
21379:  * </programlisting></informalexample>
    1:  **/
    1: void *
    1: _cairo_array_index (cairo_array_t *array, unsigned int index)
    1: {
    1:     /* We allow an index of 0 for the no-elements case.
    1:      * This makes for cleaner calling code which will often look like:
    1:      *
    1:      *    elements = _cairo_array_index (array, num_elements);
    1:      *	  for (i=0; i < num_elements; i++) {
    1:      *        ... use elements[i] here ...
    1:      *    }
    1:      *
    1:      * which in the num_elements==0 case gets the NULL pointer here,
    1:      * but never dereferences it.
    1:      */
    1:     if (index == 0 && array->num_elements == 0)
    1: 	return NULL;
    1: 
    1:     assert (index < array->num_elements);
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     return (void *) &(*array->elements)[index * array->element_size];
    1: }
    1: 
    1: /**
    1:  * _cairo_array_copy_element:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Copy a single element out of the array from index @index into the
    1:  * location pointed to by @dst.
    1:  **/
    1: void
    1: _cairo_array_copy_element (cairo_array_t *array, int index, void *dst)
    1: {
    1:     memcpy (dst, _cairo_array_index (array, index), array->element_size);
    1: }
    1: 
    1: /**
    1:  * _cairo_array_append:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Append a single item onto the array by growing the array by at
    1:  * least one element, then copying element_size bytes from @element
    1:  * into the array. The address of the resulting object within the
    1:  * array can be determined with:
    1:  *
    1:  * _cairo_array_index (array, _cairo_array_num_elements (array) - 1);
    1:  *
11708:  * Return value: %CAIRO_STATUS_SUCCESS if successful or
16122:  * %CAIRO_STATUS_NO_MEMORY if insufficient memory is available for the
    1:  * operation.
    1:  **/
    1: cairo_status_t
    1: _cairo_array_append (cairo_array_t	*array,
    1: 		     const void		*element)
    1: {
    1:     assert (! array->is_snapshot);
    1: 
    1:     return _cairo_array_append_multiple (array, element, 1);
    1: }
    1: 
    1: /**
70960:  * _cairo_array_append_multiple:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Append one or more items onto the array by growing the array by
    1:  * @num_elements, then copying @num_elements * element_size bytes from
    1:  * @elements into the array.
    1:  *
11708:  * Return value: %CAIRO_STATUS_SUCCESS if successful or
16122:  * %CAIRO_STATUS_NO_MEMORY if insufficient memory is available for the
    1:  * operation.
    1:  **/
    1: cairo_status_t
    1: _cairo_array_append_multiple (cairo_array_t	*array,
    1: 			      const void	*elements,
    1: 			      int		 num_elements)
    1: {
    1:     cairo_status_t status;
    1:     void *dest;
    1: 
    1:     assert (! array->is_snapshot);
    1: 
    1:     status = _cairo_array_allocate (array, num_elements, &dest);
26419:     if (unlikely (status))
    1: 	return status;
    1: 
    1:     memcpy (dest, elements, num_elements * array->element_size);
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: /**
    1:  * _cairo_array_allocate:
21379:  * @array: a #cairo_array_t
    1:  *
    1:  * Allocate space at the end of the array for @num_elements additional
    1:  * elements, providing the address of the new memory chunk in
    1:  * @elements. This memory will be unitialized, but will be accounted
    1:  * for in the return value of _cairo_array_num_elements().
    1:  *
11708:  * Return value: %CAIRO_STATUS_SUCCESS if successful or
16122:  * %CAIRO_STATUS_NO_MEMORY if insufficient memory is available for the
    1:  * operation.
    1:  **/
    1: cairo_status_t
    1: _cairo_array_allocate (cairo_array_t	 *array,
    1: 		       unsigned int	  num_elements,
    1: 		       void		**elements)
    1: {
    1:     cairo_status_t status;
    1: 
    1:     assert (! array->is_snapshot);
    1: 
    1:     status = _cairo_array_grow_by (array, num_elements);
26419:     if (unlikely (status))
    1: 	return status;
    1: 
    1:     assert (array->num_elements + num_elements <= array->size);
    1: 
    1:     *elements = &(*array->elements)[array->num_elements * array->element_size];
    1: 
    1:     array->num_elements += num_elements;
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
    1: 
    1: /**
    1:  * _cairo_array_num_elements:
21379:  * @array: a #cairo_array_t
21379:  * Returns: The number of elements stored in @array.
    1:  *
21379:  * This space was left intentionally blank, but gtk-doc filled it.
    1:  **/
    1: int
    1: _cairo_array_num_elements (cairo_array_t *array)
    1: {
    1:     return array->num_elements;
    1: }
    1: 
    1: /**
    1:  * _cairo_array_size:
21379:  * @array: a #cairo_array_t
21379:  * Returns: The number of elements for which there is currently space
21379:  * allocated in @array.
    1:  *
21379:  * This space was left intentionally blank, but gtk-doc filled it.
    1:  **/
    1: int
    1: _cairo_array_size (cairo_array_t *array)
    1: {
    1:     return array->size;
    1: }
    1: 
    1: /**
    1:  * _cairo_user_data_array_init:
    1:  * @array: a #cairo_user_data_array_t
    1:  *
    1:  * Initializes a #cairo_user_data_array_t structure for future
    1:  * use. After initialization, the array has no keys. Call
    1:  * _cairo_user_data_array_fini() to free any allocated memory
    1:  * when done using the array.
    1:  **/
    1: void
    1: _cairo_user_data_array_init (cairo_user_data_array_t *array)
    1: {
    1:     _cairo_array_init (array, sizeof (cairo_user_data_slot_t));
    1: }
    1: 
    1: /**
    1:  * _cairo_user_data_array_fini:
    1:  * @array: a #cairo_user_data_array_t
    1:  *
    1:  * Destroys all current keys in the user data array and deallocates
    1:  * any memory allocated for the array itself.
    1:  **/
    1: void
    1: _cairo_user_data_array_fini (cairo_user_data_array_t *array)
    1: {
26419:     unsigned int num_slots;
26419: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
26419:     num_slots = array->num_elements;
26419:     if (num_slots) {
    1: 	cairo_user_data_slot_t *slots;
    1: 
    1: 	slots = _cairo_array_index (array, 0);
26419: 	do {
26419: 	    if (slots->user_data != NULL && slots->destroy != NULL)
26419: 		slots->destroy (slots->user_data);
26419: 	    slots++;
26419: 	} while (--num_slots);
    1:     }
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     _cairo_array_fini (array);
    1: }
    1: 
    1: /**
    1:  * _cairo_user_data_array_get_data:
    1:  * @array: a #cairo_user_data_array_t
    1:  * @key: the address of the #cairo_user_data_key_t the user data was
    1:  * attached to
    1:  *
    1:  * Returns user data previously attached using the specified
    1:  * key.  If no user data has been attached with the given key this
    1:  * function returns %NULL.
    1:  *
    1:  * Return value: the user data previously attached or %NULL.
    1:  **/
    1: void *
    1: _cairo_user_data_array_get_data (cairo_user_data_array_t     *array,
    1: 				 const cairo_user_data_key_t *key)
    1: {
    1:     int i, num_slots;
    1:     cairo_user_data_slot_t *slots;
    1: 
10694:     /* We allow this to support degenerate objects such as cairo_surface_nil. */
    1:     if (array == NULL)
    1: 	return NULL;
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     num_slots = array->num_elements;
    1:     slots = _cairo_array_index (array, 0);
    1:     for (i = 0; i < num_slots; i++) {
    1: 	if (slots[i].key == key)
    1: 	    return slots[i].user_data;
    1:     }
    1: 
    1:     return NULL;
    1: }
    1: 
    1: /**
    1:  * _cairo_user_data_array_set_data:
    1:  * @array: a #cairo_user_data_array_t
    1:  * @key: the address of a #cairo_user_data_key_t to attach the user data to
    1:  * @user_data: the user data to attach
    1:  * @destroy: a #cairo_destroy_func_t which will be called when the
    1:  * user data array is destroyed or when new user data is attached using the
    1:  * same key.
    1:  *
    1:  * Attaches user data to a user data array.  To remove user data,
    1:  * call this function with the key that was used to set it and %NULL
    1:  * for @data.
    1:  *
    1:  * Return value: %CAIRO_STATUS_SUCCESS or %CAIRO_STATUS_NO_MEMORY if a
    1:  * slot could not be allocated for the user data.
    1:  **/
    1: cairo_status_t
    1: _cairo_user_data_array_set_data (cairo_user_data_array_t     *array,
    1: 				 const cairo_user_data_key_t *key,
    1: 				 void			     *user_data,
    1: 				 cairo_destroy_func_t	      destroy)
    1: {
    1:     cairo_status_t status;
    1:     int i, num_slots;
    1:     cairo_user_data_slot_t *slots, *slot, new_slot;
    1: 
    1:     if (user_data) {
    1: 	new_slot.key = key;
    1: 	new_slot.user_data = user_data;
    1: 	new_slot.destroy = destroy;
    1:     } else {
    1: 	new_slot.key = NULL;
    1: 	new_slot.user_data = NULL;
    1: 	new_slot.destroy = NULL;
    1:     }
    1: 
    1:     slot = NULL;
    1:     num_slots = array->num_elements;
    1:     slots = _cairo_array_index (array, 0);
    1:     for (i = 0; i < num_slots; i++) {
    1: 	if (slots[i].key == key) {
    1: 	    slot = &slots[i];
    1: 	    if (slot->destroy && slot->user_data)
    1: 		slot->destroy (slot->user_data);
    1: 	    break;
    1: 	}
    1: 	if (user_data && slots[i].user_data == NULL) {
    1: 	    slot = &slots[i];	/* Have to keep searching for an exact match */
    1: 	}
    1:     }
    1: 
99113:     if (array->num_elements != 0 && array->elements == NULL)
99113:         abort();
99113: 
    1:     if (slot) {
    1: 	*slot = new_slot;
    1: 	return CAIRO_STATUS_SUCCESS;
    1:     }
    1: 
    1:     status = _cairo_array_append (array, &new_slot);
26419:     if (unlikely (status))
    1: 	return status;
    1: 
    1:     return CAIRO_STATUS_SUCCESS;
    1: }
26419: 
26419: cairo_status_t
26419: _cairo_user_data_array_copy (cairo_user_data_array_t	*dst,
26419: 			     cairo_user_data_array_t	*src)
26419: {
26419:     /* discard any existing user-data */
26419:     if (dst->num_elements != 0) {
26419: 	_cairo_user_data_array_fini (dst);
26419: 	_cairo_user_data_array_init (dst);
26419:     }
26419: 
26419:     if (src->num_elements == 0)
26419: 	return CAIRO_STATUS_SUCCESS;
26419: 
26419:     return _cairo_array_append_multiple (dst,
26419: 					 _cairo_array_index (src, 0),
26419: 					 src->num_elements);
26419: }
26419: 
26419: void
26419: _cairo_user_data_array_foreach (cairo_user_data_array_t     *array,
26419: 				void (*func) (const void *key,
26419: 					      void *elt,
26419: 					      void *closure),
26419: 				void *closure)
26419: {
26419:     cairo_user_data_slot_t *slots;
26419:     int i, num_slots;
26419: 
26419:     num_slots = array->num_elements;
26419:     slots = _cairo_array_index (array, 0);
26419:     for (i = 0; i < num_slots; i++) {
26419: 	if (slots[i].user_data != NULL)
26419: 	    func (slots[i].key, slots[i].user_data, closure);
26419:     }
26419: }
