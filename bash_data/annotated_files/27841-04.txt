    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /* class for maintaining a linked list of child frames */
    1: 
    1: #ifndef nsFrameList_h___
    1: #define nsFrameList_h___
    1: 
    1: #include "nsIFrame.h"
    1: 
    1: /**
    1:  * A class for managing a singly linked list of frames. Frames are
    1:  * linked together through their next-sibling pointer.
    1:  */
 3107: 
    1: class nsFrameList {
    1: public:
    1:   nsFrameList() {
    1:     mFirstChild = nsnull;
    1:   }
    1: 
    1:   nsFrameList(nsIFrame* aHead) {
    1:     mFirstChild = aHead;
    1: #ifdef DEBUG
    1:     CheckForLoops();
    1: #endif
    1:   }
    1: 
    1:   ~nsFrameList() {
    1:   }
    1: 
    1:   void DestroyFrames();
    1: 
 4006:   // Delete this and destroy all its frames
 4006:   void Destroy();
 4006: 
    1:   void SetFrames(nsIFrame* aFrameList) {
    1:     mFirstChild = aFrameList;
    1: #ifdef DEBUG
    1:     CheckForLoops();
    1: #endif
    1:   }
    1: 
 3107:   // Appends frames from aFrameList to this list. If aParent
 3107:   // is not null, reparents the newly-added frames.
    1:   void AppendFrames(nsIFrame* aParent, nsIFrame* aFrameList);
    1: 
    1:   void AppendFrames(nsIFrame* aParent, nsFrameList& aFrameList) {
    1:     AppendFrames(aParent, aFrameList.mFirstChild);
    1:     aFrameList.mFirstChild = nsnull;
    1:   }
    1: 
    1:   void AppendFrame(nsIFrame* aParent, nsIFrame* aFrame);
    1: 
    1:   // Take aFrame out of the frame list. This also disconnects aFrame
    1:   // from the sibling list. This will return PR_FALSE if aFrame is
    1:   // nsnull or if aFrame is not in the list. The second frame is
    1:   // a hint for the prev-sibling of aFrame; if the hint is correct,
 3107:   // then this is O(1) time. If successfully removed, the child's
 3107:   // NextSibling pointer is cleared.
    1:   PRBool RemoveFrame(nsIFrame* aFrame, nsIFrame* aPrevSiblingHint = nsnull);
    1: 
    1:   // Remove the first child from the list. The caller is assumed to be
    1:   // holding a reference to the first child. This call is equivalent
 3107:   // in behavior to calling RemoveFrame(FirstChild()). If successfully
 3107:   // removed the first child's NextSibling pointer is cleared.
    1:   PRBool RemoveFirstChild();
    1: 
    1:   // Take aFrame out of the frame list and then destroy it. This also
    1:   // disconnects aFrame from the sibling list. This will return
    1:   // PR_FALSE if aFrame is nsnull or if aFrame is not in the list.
    1:   PRBool DestroyFrame(nsIFrame* aFrame);
    1: 
 3107:   // Inserts aNewFrame right after aPrevSibling, or prepends to
 3107:   // list if aPrevSibling is null. If aParent is not null, also
 3107:   // reparents newly-added frame. Note that this method always
 3107:   // sets the frame's nextSibling pointer.
    1:   void InsertFrame(nsIFrame* aParent,
    1:                    nsIFrame* aPrevSibling,
    1:                    nsIFrame* aNewFrame);
    1: 
 3107:   // Inserts aFrameList right after aPrevSibling, or prepends to
 3107:   // list if aPrevSibling is null. If aParent is not null, also
 3107:   // reparents newly-added frame.
    1:   void InsertFrames(nsIFrame* aParent,
    1:                     nsIFrame* aPrevSibling,
    1:                     nsIFrame* aFrameList);
    1: 
    1:   void InsertFrames(nsIFrame* aParent, nsIFrame* aPrevSibling,
    1:                     nsFrameList& aFrameList) {
    1:     InsertFrames(aParent, aPrevSibling, aFrameList.FirstChild());
    1:     aFrameList.mFirstChild = nsnull;
    1:   }
    1: 
    1:   PRBool Split(nsIFrame* aAfterFrame, nsIFrame** aNextFrameResult);
    1: 
    1:   /**
    1:    * Sort the frames according to content order so that the first
    1:    * frame in the list is the first in content order. Frames for
    1:    * the same content will be ordered so that a prev in flow
    1:    * comes before its next in flow.
    1:    */
    1:   void SortByContentOrder();
    1: 
    1:   nsIFrame* FirstChild() const {
    1:     return mFirstChild;
    1:   }
    1: 
    1:   nsIFrame* LastChild() const;
    1: 
    1:   nsIFrame* FrameAt(PRInt32 aIndex) const;
27841:   PRInt32 IndexOf(nsIFrame* aFrame) const;
    1: 
    1:   PRBool IsEmpty() const {
    1:     return nsnull == mFirstChild;
    1:   }
    1: 
    1:   PRBool NotEmpty() const {
    1:     return nsnull != mFirstChild;
    1:   }
    1: 
    1:   PRBool ContainsFrame(const nsIFrame* aFrame) const;
10962:   PRBool ContainsFrameBefore(const nsIFrame* aFrame, const nsIFrame* aEnd) const;
    1: 
    1:   PRInt32 GetLength() const;
    1: 
    1:   nsIFrame* GetPrevSiblingFor(nsIFrame* aFrame) const;
    1: 
    1: #ifdef IBMBIDI
    1:   /**
    1:    * Return the frame before this frame in visual order (after Bidi reordering).
    1:    * If aFrame is null, return the last frame in visual order.
    1:    */
    1:   nsIFrame* GetPrevVisualFor(nsIFrame* aFrame) const;
    1: 
    1:   /**
    1:    * Return the frame after this frame in visual order (after Bidi reordering).
    1:    * If aFrame is null, return the first frame in visual order.
    1:    */
    1:   nsIFrame* GetNextVisualFor(nsIFrame* aFrame) const;
    1: #endif // IBMBIDI
    1: 
    1:   void VerifyParent(nsIFrame* aParent) const;
    1: 
    1: #ifdef NS_DEBUG
    1:   void List(FILE* out) const;
    1: #endif
    1: 
    1: private:
    1: #ifdef DEBUG
    1:   void CheckForLoops();
    1: #endif
    1:   
    1: protected:
    1:   nsIFrame* mFirstChild;
    1: };
    1: 
    1: #endif /* nsFrameList_h___ */
