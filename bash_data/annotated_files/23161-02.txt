    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #ifndef nsPageFrame_h___
    1: #define nsPageFrame_h___
    1: 
    1: #include "nsContainerFrame.h"
    1: #include "nsLeafFrame.h"
    1: 
    1: class nsSharedPageData;
    1: 
    1: // Page frame class used by the simple page sequence frame
    1: class nsPageFrame : public nsContainerFrame {
    1: 
    1: public:
    1:   friend nsIFrame* NS_NewPageFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
    1: 
    1:   NS_IMETHOD  Reflow(nsPresContext*      aPresContext,
    1:                      nsHTMLReflowMetrics& aDesiredSize,
    1:                      const nsHTMLReflowState& aMaxSize,
    1:                      nsReflowStatus&      aStatus);
    1: 
    1:   NS_IMETHOD BuildDisplayList(nsDisplayListBuilder*   aBuilder,
    1:                               const nsRect&           aDirtyRect,
    1:                               const nsDisplayListSet& aLists);
    1: 
    1:   virtual PRBool IsContainingBlock() const;
    1: 
    1:   /**
    1:    * Get the "type" of the frame
    1:    *
    1:    * @see nsGkAtoms::pageFrame
    1:    */
    1:   virtual nsIAtom* GetType() const;
    1:   
    1: #ifdef NS_DEBUG
    1:   NS_IMETHOD  GetFrameName(nsAString& aResult) const;
    1: #endif
    1: 
    1:   //////////////////
    1:   // For Printing
    1:   //////////////////
    1: 
    1:   // Tell the page which page number it is out of how many
    1:   virtual void  SetPageNumInfo(PRInt32 aPageNumber, PRInt32 aTotalPages);
    1: 
    1:   virtual void SetSharedPageData(nsSharedPageData* aPD);
    1: 
    1:   void PaintPrintPreviewBackground(nsIRenderingContext& aRenderingContext,
    1:                                    nsPoint aPt);
    1:   void PaintHeaderFooter(nsIRenderingContext& aRenderingContext,
    1:                          nsPoint aPt);
    1:   void PaintPageContent(nsIRenderingContext& aRenderingContext,
    1:                         const nsRect&        aDirtyRect,
    1:                         nsPoint              aPt);
    1: 
    1: protected:
    1:   nsPageFrame(nsStyleContext* aContext);
    1:   virtual ~nsPageFrame();
    1: 
    1:   typedef enum {
    1:     eHeader,
    1:     eFooter
    1:   } nsHeaderFooterEnum;
    1: 
    1:   nscoord GetXPosition(nsIRenderingContext& aRenderingContext, 
    1:                        const nsRect&        aRect, 
    1:                        PRInt32              aJust,
    1:                        const nsString&      aStr);
    1: 
    1:   void DrawHeaderFooter(nsIRenderingContext& aRenderingContext,
    1:                         nsHeaderFooterEnum   aHeaderFooter,
    1:                         PRInt32              aJust,
    1:                         const nsString&      sStr,
    1:                         const nsRect&        aRect,
    1:                         nscoord              aHeight,
    1:                         nscoord              aAscent,
    1:                         nscoord              aWidth);
    1: 
    1:   void DrawHeaderFooter(nsIRenderingContext& aRenderingContext,
    1:                         nsHeaderFooterEnum   aHeaderFooter,
    1:                         const nsString&      aStrLeft,
    1:                         const nsString&      aStrRight,
    1:                         const nsString&      aStrCenter,
    1:                         const nsRect&        aRect,
    1:                         nscoord              aAscent,
    1:                         nscoord              aHeight);
    1: 
    1:   void ProcessSpecialCodes(const nsString& aStr, nsString& aNewStr);
    1: 
    1:   PRInt32     mPageNum;
    1:   PRInt32     mTotNumPages;
    1: 
    1:   nsSharedPageData* mPD;
    1: };
    1: 
    1: 
    1: class nsPageBreakFrame : public nsLeafFrame {
    1: 
    1:   nsPageBreakFrame(nsStyleContext* aContext);
    1:   ~nsPageBreakFrame();
    1: 
    1:   NS_IMETHOD Reflow(nsPresContext*          aPresContext,
    1:                     nsHTMLReflowMetrics&     aDesiredSize,
    1:                     const nsHTMLReflowState& aReflowState,
    1:                     nsReflowStatus&          aStatus);
    1: 
    1:   virtual nsIAtom* GetType() const;
    1: 
23161: #ifdef NS_DEBUG
23161:   NS_IMETHOD  GetFrameName(nsAString& aResult) const;
23161: #endif
23161: 
    1: protected:
    1: 
    1:   virtual nscoord GetIntrinsicWidth();
14246:   virtual nscoord GetIntrinsicHeight();
    1: 
    1:     PRBool mHaveReflowed;
    1: 
    1:     friend nsIFrame* NS_NewPageBreakFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
    1: };
    1: 
    1: #endif /* nsPageFrame_h___ */
    1: 
