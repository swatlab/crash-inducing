42791: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
39997:  * ***** BEGIN LICENSE BLOCK *****
39997:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
39997:  *
39997:  * The contents of this file are subject to the Mozilla Public License Version
39997:  * 1.1 (the "License"); you may not use this file except in compliance with
39997:  * the License. You may obtain a copy of the License at
39997:  * http://www.mozilla.org/MPL/
39997:  *
39997:  * Software distributed under the License is distributed on an "AS IS" basis,
39997:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
39997:  * for the specific language governing rights and limitations under the
39997:  * License.
39997:  *
39997:  * The Original Code is Mozilla Corporation code.
39997:  *
39997:  * The Initial Developer of the Original Code is Mozilla Foundation.
39997:  * Portions created by the Initial Developer are Copyright (C) 2009
39997:  * the Initial Developer. All Rights Reserved.
39997:  *
39997:  * Contributor(s):
39997:  *   Bas Schouten <bschouten@mozilla.org>
42791:  *   Vladimir Vukicevic <vladimir@pobox.com>
39997:  *
39997:  * Alternatively, the contents of this file may be used under the terms of
39997:  * either the GNU General Public License Version 2 or later (the "GPL"), or
39997:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
39997:  * in which case the provisions of the GPL or the LGPL are applicable instead
39997:  * of those above. If you wish to allow use of your version of this file only
39997:  * under the terms of either the GPL or the LGPL, and not to allow others to
39997:  * use your version of this file under the terms of the MPL, indicate your
39997:  * decision by deleting the provisions above and replace them with the notice
39997:  * and other provisions required by the GPL or the LGPL. If you do not delete
39997:  * the provisions above, a recipient may use your version of this file under
39997:  * the terms of any one of the MPL, the GPL or the LGPL.
39997:  *
39997:  * ***** END LICENSE BLOCK ***** */
39997: 
55454: #include "gfxSharedImageSurface.h"
55454: 
39997: #include "ImageLayerOGL.h"
39997: #include "gfxImageSurface.h"
51999: #include "yuv_convert.h"
46145: #include "GLContextProvider.h"
62472: #include "MacIOSurfaceImageOGL.h"
67637: #if defined(MOZ_WIDGET_GTK2) && !defined(MOZ_PLATFORM_MAEMO)
67637: # include "GLXLibrary.h"
67637: # include "mozilla/X11Util.h"
67637: #endif
39997: 
42441: using namespace mozilla::gl;
42441: 
39997: namespace mozilla {
39997: namespace layers {
39997: 
42441: /**
42441:  * This is an event used to unref a GLContext on the main thread and
42441:  * optionally delete a texture associated with that context.
42441:  */
42441: class TextureDeleter : public nsRunnable {
42441: public:
42441:   TextureDeleter(already_AddRefed<GLContext> aContext,
42441:                  GLuint aTexture)
42441:       : mContext(aContext), mTexture(aTexture)
42441:   {
49072:     NS_ASSERTION(aTexture, "TextureDeleter instantiated with nothing to do");
42441:   }
49072: 
42441:   NS_IMETHOD Run() {
49072:     mContext->MakeCurrent();
49072:     mContext->fDeleteTextures(1, &mTexture);
49072: 
42441:     // Ensure context is released on the main thread
42441:     mContext = nsnull;
42441:     return NS_OK;
42441:   }
42441: 
42441:   nsRefPtr<GLContext> mContext;
42441:   GLuint mTexture;
42441: };
42441: 
42441: void
42441: GLTexture::Allocate(GLContext *aContext)
42441: {
49072:   NS_ASSERTION(aContext->IsGlobalSharedContext() ||
49072:                NS_IsMainThread(), "Can only allocate texture on main thread or with cx sharing");
42441: 
42441:   Release();
42441: 
42441:   mContext = aContext;
49072: 
49072:   mContext->MakeCurrent();
49072:   mContext->fGenTextures(1, &mTexture);
42441: }
42441: 
42441: void
42441: GLTexture::TakeFrom(GLTexture *aOther)
42441: {
42441:   Release();
42441: 
42441:   mContext = aOther->mContext.forget();
42441:   mTexture = aOther->mTexture;
42441:   aOther->mTexture = 0;
42441: }
42441: 
42441: void
42441: GLTexture::Release()
42441: {
42441:   if (!mContext) {
42441:     NS_ASSERTION(!mTexture, "Can't delete texture without a context");
42441:     return;
42441:   }
42441: 
42441:   if (mTexture) {
49072:     if (NS_IsMainThread() || mContext->IsGlobalSharedContext()) {
49072:       mContext->MakeCurrent();
49072:       mContext->fDeleteTextures(1, &mTexture);
49072:     } else {
42441:       nsCOMPtr<nsIRunnable> runnable =
42441:         new TextureDeleter(mContext.forget(), mTexture);
42441:       NS_DispatchToMainThread(runnable);
49072:     }
49072: 
42441:     mTexture = 0;
42441:   }
42441: 
49072:   mContext = nsnull;
49072: }
49072: 
42442: RecycleBin::RecycleBin()
42442:   : mLock("mozilla.layers.RecycleBin.mLock")
42442: {
42442: }
42442: 
42442: void
42442: RecycleBin::RecycleBuffer(PRUint8* aBuffer, PRUint32 aSize)
42442: {
42442:   MutexAutoLock lock(mLock);
42442: 
42442:   if (!mRecycledBuffers.IsEmpty() && aSize != mRecycledBufferSize) {
42442:     mRecycledBuffers.Clear();
42442:   }
42442:   mRecycledBufferSize = aSize;
42442:   mRecycledBuffers.AppendElement(aBuffer);
42442: }
42442: 
42442: PRUint8*
49072: RecycleBin::GetBuffer(PRUint32 aSize)
42442: {
42442:   MutexAutoLock lock(mLock);
42442: 
42442:   if (mRecycledBuffers.IsEmpty() || mRecycledBufferSize != aSize)
42442:     return new PRUint8[aSize];
42442: 
42442:   PRUint32 last = mRecycledBuffers.Length() - 1;
42442:   PRUint8* result = mRecycledBuffers[last].forget();
42442:   mRecycledBuffers.RemoveElementAt(last);
42442:   return result;
42442: }
42442: 
42443: void
42443: RecycleBin::RecycleTexture(GLTexture *aTexture, TextureType aType,
42443:                            const gfxIntSize& aSize)
42443: {
55379:   MutexAutoLock lock(mLock);
55379: 
42443:   if (!aTexture->IsAllocated())
42443:     return;
42443: 
42443:   if (!mRecycledTextures[aType].IsEmpty() && aSize != mRecycledTextureSizes[aType]) {
42443:     mRecycledTextures[aType].Clear();
42443:   }
42443:   mRecycledTextureSizes[aType] = aSize;
42443:   mRecycledTextures[aType].AppendElement()->TakeFrom(aTexture);
42443: }
42443: 
42443: void
49072: RecycleBin::GetTexture(TextureType aType, const gfxIntSize& aSize,
42443:                        GLContext *aContext, GLTexture *aOutTexture)
42443: {
42443:   MutexAutoLock lock(mLock);
42443: 
42443:   if (mRecycledTextures[aType].IsEmpty() || mRecycledTextureSizes[aType] != aSize) {
42443:     aOutTexture->Allocate(aContext);
42443:     return;
42443:   }
42443:   PRUint32 last = mRecycledTextures[aType].Length() - 1;
42443:   aOutTexture->TakeFrom(&mRecycledTextures[aType].ElementAt(last));
42443:   mRecycledTextures[aType].RemoveElementAt(last);
42443: }
42443: 
40576: ImageContainerOGL::ImageContainerOGL(LayerManagerOGL *aManager)
40576:   : ImageContainer(aManager)
42442:   , mRecycleBin(new RecycleBin())
40576: {
40576: }
40576: 
49072: ImageContainerOGL::~ImageContainerOGL()
49072: {
49072:   if (mManager) {
49072:     NS_ASSERTION(mManager->GetBackendType() == LayerManager::LAYERS_OPENGL, "Wrong layer manager got assigned to ImageContainerOGL!");
49072: 
49072:     static_cast<LayerManagerOGL*>(mManager)->ForgetImageContainer(this);
49072:   }
49072: }
49072: 
39997: already_AddRefed<Image>
39997: ImageContainerOGL::CreateImage(const Image::Format *aFormats,
39997:                                PRUint32 aNumFormats)
39997: {
39997:   if (!aNumFormats) {
39997:     return nsnull;
39997:   }
39997:   nsRefPtr<Image> img;
39997:   if (aFormats[0] == Image::PLANAR_YCBCR) {
49072:     img = new PlanarYCbCrImageOGL(static_cast<LayerManagerOGL*>(mManager),
49072:                                   mRecycleBin);
39997:   } else if (aFormats[0] == Image::CAIRO_SURFACE) {
39997:     img = new CairoImageOGL(static_cast<LayerManagerOGL*>(mManager));
39997:   }
62472: #ifdef XP_MACOSX
62472:   else if (aFormats[0] == Image::MAC_IO_SURFACE) {
62472:     img = new MacIOSurfaceImageOGL(static_cast<LayerManagerOGL*>(mManager));
62472:   }
62472: #endif
62472: 
39997:   return img.forget();
39997: }
39997: 
39997: void
39997: ImageContainerOGL::SetCurrentImage(Image *aImage)
39997: {
42442:   nsRefPtr<Image> oldImage;
42442: 
42442:   {
69142:     ReentrantMonitorAutoEnter mon(mReentrantMonitor);
40576: 
42442:     oldImage = mActiveImage.forget();
39997:     mActiveImage = aImage;
63615:     CurrentImageChanged();
39997:   }
39997: 
42442:   // Make sure oldImage is released outside the lock, so it can take our
42442:   // lock in RecycleBuffer
42442: }
42442: 
39997: already_AddRefed<Image>
39997: ImageContainerOGL::GetCurrentImage()
39997: {
69142:   ReentrantMonitorAutoEnter mon(mReentrantMonitor);
40576: 
39997:   nsRefPtr<Image> retval = mActiveImage;
39997:   return retval.forget();
39997: }
39997: 
39997: already_AddRefed<gfxASurface>
39997: ImageContainerOGL::GetCurrentAsSurface(gfxIntSize *aSize)
39997: {
69142:   ReentrantMonitorAutoEnter mon(mReentrantMonitor);
49072: 
49072:   if (!mActiveImage) {
49072:     *aSize = gfxIntSize(0,0);
39997:     return nsnull;
39997:   }
39997: 
49072:   GLContext *gl = nsnull;
49072:   // tex1 will be RGBA or Y, tex2 will Cb, tex3 will be Cr
51999:   GLuint tex1 = 0;
49072:   gfxIntSize size;
49072: 
49072:   if (mActiveImage->GetFormat() == Image::PLANAR_YCBCR) {
49072:     PlanarYCbCrImageOGL *yuvImage =
49072:       static_cast<PlanarYCbCrImageOGL*>(mActiveImage.get());
51999:     if (!yuvImage->HasData()) {
49072:       *aSize = gfxIntSize(0, 0);
49072:       return nsnull;
49072:     }
49072: 
49072:     size = yuvImage->mSize;
51999: 
51999:     nsRefPtr<gfxImageSurface> imageSurface =
51999:       new gfxImageSurface(size, gfxASurface::ImageFormatRGB24);
51999: 
51999:     gfx::ConvertYCbCrToRGB32(yuvImage->mData.mYChannel,
51999:                              yuvImage->mData.mCbChannel,
51999:                              yuvImage->mData.mCrChannel,
51999:                              imageSurface->Data(),
51999:                              0,
51999:                              0,
51999:                              size.width,
51999:                              size.height,
51999:                              yuvImage->mData.mYStride,
51999:                              yuvImage->mData.mCbCrStride,
51999:                              imageSurface->Stride(),
51999:                              yuvImage->mType);
51999: 
51999:     *aSize = size;
51999:     return imageSurface.forget().get();
49072:   }
49072: 
49072:   if (mActiveImage->GetFormat() == Image::CAIRO_SURFACE) {
49072:     CairoImageOGL *cairoImage =
49072:       static_cast<CairoImageOGL*>(mActiveImage.get());
49072:     size = cairoImage->mSize;
49072:     gl = cairoImage->mTexture.GetGLContext();
49072:     tex1 = cairoImage->mTexture.GetTextureID();
49072:   }
49072: 
49072:   nsRefPtr<gfxImageSurface> s = gl->ReadTextureImage(tex1, size, LOCAL_GL_RGBA);
49072:   *aSize = size;
49072:   return s.forget();
49072: }
49072: 
41389: gfxIntSize
41389: ImageContainerOGL::GetCurrentSize()
41389: {
69142:   ReentrantMonitorAutoEnter mon(mReentrantMonitor);
41389:   if (!mActiveImage) {
41389:     return gfxIntSize(0,0);
41389:   }
49072: 
41389:   if (mActiveImage->GetFormat() == Image::PLANAR_YCBCR) {
41389:     PlanarYCbCrImageOGL *yuvImage =
41389:       static_cast<PlanarYCbCrImageOGL*>(mActiveImage.get());
41389:     if (!yuvImage->HasData()) {
41389:       return gfxIntSize(0,0);
41389:     }
41389:     return yuvImage->mSize;
49072:   }
49072: 
49072:   if (mActiveImage->GetFormat() == Image::CAIRO_SURFACE) {
41389:     CairoImageOGL *cairoImage =
41389:       static_cast<CairoImageOGL*>(mActiveImage.get());
41389:     return cairoImage->mSize;
41389:   }
41389: 
62472: #ifdef XP_MACOSX
62472:   if (mActiveImage->GetFormat() == Image::MAC_IO_SURFACE) {
62472:     MacIOSurfaceImageOGL *ioImage =
62472:       static_cast<MacIOSurfaceImageOGL*>(mActiveImage.get());
62472:       return ioImage->mSize;
62472:   }
62472: #endif
62472: 
41389:   return gfxIntSize(0,0);
41389: }
41389: 
49072: PRBool
49072: ImageContainerOGL::SetLayerManager(LayerManager *aManager)
49072: {
49072:   if (!aManager) {
49072:     // the layer manager just entirely went away
49072: 
49072:     // XXX if we don't have context sharing, we should tell our images
49072:     // that their textures are no longer valid.
49072:     mManager = nsnull;
49072:     return PR_TRUE;
49072:   }
49072: 
49072:   if (aManager->GetBackendType() != LayerManager::LAYERS_OPENGL) {
49072:     return PR_FALSE;
49072:   }
49072: 
49072:   LayerManagerOGL* lmOld = static_cast<LayerManagerOGL*>(mManager);
49072:   LayerManagerOGL* lmNew = static_cast<LayerManagerOGL*>(aManager);
49072: 
49072:   if (lmOld) {
49072:     NS_ASSERTION(lmNew->glForResources() == lmOld->glForResources(),
49072:                  "We require GL context sharing here!");
49072:     lmOld->ForgetImageContainer(this);
49072:   }
49072: 
49072:   mManager = aManager;
49072: 
49072:   lmNew->RememberImageContainer(this);
49072: 
49072:   return PR_TRUE;
49072: }
49072: 
39997: Layer*
39997: ImageLayerOGL::GetLayer()
39997: {
39997:   return this;
39997: }
39997: 
39997: void
42791: ImageLayerOGL::RenderLayer(int,
57097:                            const nsIntPoint& aOffset)
39997: {
42791:   if (!GetContainer())
39997:     return;
39997: 
42791:   mOGLManager->MakeCurrent();
39997: 
39997:   nsRefPtr<Image> image = GetContainer()->GetCurrentImage();
60860:   if (!image) {
60860:     return;
60860:   }
39997: 
39997:   if (image->GetFormat() == Image::PLANAR_YCBCR) {
39997:     PlanarYCbCrImageOGL *yuvImage =
39997:       static_cast<PlanarYCbCrImageOGL*>(image.get());
39997: 
49072:     if (!yuvImage->HasData()) {
39997:       return;
49072:     }
39997:     
49072:     if (!yuvImage->HasTextures()) {
49072:       yuvImage->AllocateTextures(gl());
49072:     }
49072: 
49072:     yuvImage->UpdateTextures(gl());
39997: 
41370:     gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
42441:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, yuvImage->mTextures[0].GetTextureID());
54468:     ApplyFilter(mFilter);
41370:     gl()->fActiveTexture(LOCAL_GL_TEXTURE1);
42441:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, yuvImage->mTextures[1].GetTextureID());
54468:     ApplyFilter(mFilter);
41370:     gl()->fActiveTexture(LOCAL_GL_TEXTURE2);
42441:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, yuvImage->mTextures[2].GetTextureID());
54468:     ApplyFilter(mFilter);
39997:     
42791:     YCbCrTextureLayerProgram *program = mOGLManager->GetYCbCrLayerProgram();
42791: 
42791:     program->Activate();
42791:     program->SetLayerQuadRect(nsIntRect(0, 0,
42791:                                         yuvImage->mSize.width,
42791:                                         yuvImage->mSize.height));
57097:     program->SetLayerTransform(GetEffectiveTransform());
57097:     program->SetLayerOpacity(GetEffectiveOpacity());
42791:     program->SetRenderOffset(aOffset);
42791:     program->SetYCbCrTextureUnits(0, 1, 2);
39997: 
42791:     mOGLManager->BindAndDrawQuad(program);
42791: 
42791:     // We shouldn't need to do this, but do it anyway just in case
42791:     // someone else forgets.
41370:     gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
39997:   } else if (image->GetFormat() == Image::CAIRO_SURFACE) {
39997:     CairoImageOGL *cairoImage =
39997:       static_cast<CairoImageOGL*>(image.get());
39997: 
70073:     cairoImage->SetTiling(mUseTileSourceRect);
70073:     gl()->MakeCurrent();
70073:     unsigned int iwidth  = cairoImage->mSize.width;
70073:     unsigned int iheight = cairoImage->mSize.height;
70073: 
42791:     gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
42791:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, cairoImage->mTexture.GetTextureID());
39997: 
67637: #if defined(MOZ_WIDGET_GTK2) && !defined(MOZ_PLATFORM_MAEMO)
67637:     GLXPixmap pixmap;
67637: 
67637:     if (cairoImage->mSurface) {
67637:         pixmap = sGLXLibrary.CreatePixmap(cairoImage->mSurface);
67637:         sGLXLibrary.BindTexImage(pixmap);
67637:     }
67637: #endif
67637: 
56951:     ColorTextureLayerProgram *program = 
59437:       mOGLManager->GetColorTextureLayerProgram(cairoImage->mLayerProgram);
39997: 
54468:     ApplyFilter(mFilter);
54468: 
39997:     program->Activate();
70073:     // The following uniform controls the scaling of the vertex coords.
70073:     // Instead of setting the scale here and using coords in the range [0,1], we
70073:     // set an identity transform and use pixel coordinates below
70073:     program->SetLayerQuadRect(nsIntRect(0, 0, 1, 1));
57097:     program->SetLayerTransform(GetEffectiveTransform());
57097:     program->SetLayerOpacity(GetEffectiveOpacity());
42791:     program->SetRenderOffset(aOffset);
42791:     program->SetTextureUnit(0);
39997: 
70073:     nsIntRect rect = GetVisibleRegion().GetBounds();
67637: 
70073:     bool tileIsWholeImage = (mTileSourceRect == nsIntRect(0, 0, iwidth, iheight)) 
70073:                             || !mUseTileSourceRect;
70073:     bool imageIsPowerOfTwo = ((iwidth  & (iwidth - 1)) == 0 &&
70073:                               (iheight & (iheight - 1)) == 0);
70073:     bool canDoNPOT = (
70073:           gl()->IsExtensionSupported(GLContext::ARB_texture_non_power_of_two) ||
70073:           gl()->IsExtensionSupported(GLContext::OES_texture_npot));
70073: 
70073:     GLContext::RectTriangles triangleBuffer;
70073:     // do GL_REPEAT if we can - should be the fastest option.
70073:     // draw a single rect for the whole region, a little overdraw
70073:     // on the gpu should be faster than tesselating
70073:     // maybe we can write a shader that can also handle texture subrects
70073:     // and repeat?
70073:     if (tileIsWholeImage && (imageIsPowerOfTwo || canDoNPOT)) {
70073:         // we need to anchor the repeating texture appropriately
70073:         // otherwise it will start from the region border instead
70073:         // of the layer origin. This is the offset into the texture
70073:         // that the region border represents
70073:         float tex_offset_u = (float)(rect.x % iwidth) / iwidth;
70073:         float tex_offset_v = (float)(rect.y % iheight) / iheight;
70073:         triangleBuffer.addRect(rect.x, rect.y,
70073:                                rect.x + rect.width, rect.y + rect.height,
70073:                                tex_offset_u, tex_offset_v,
70073:                                tex_offset_u + (float)rect.width / (float)iwidth,
70073:                                tex_offset_v + (float)rect.height / (float)iheight);
70073:     }
70073:     // can't do fast path via GL_REPEAT - we have to tessellate individual rects.
70073:     else {
70073:         unsigned int twidth = mTileSourceRect.width;
70073:         unsigned int theight = mTileSourceRect.height;
70073: 
70073:         nsIntRegion region = GetVisibleRegion();
70073:         // image subrect in texture coordinates
70073:         float subrect_tl_u = float(mTileSourceRect.x) / float(iwidth);
70073:         float subrect_tl_v = float(mTileSourceRect.y) / float(iheight);
70073:         float subrect_br_u = float(mTileSourceRect.width + mTileSourceRect.x) / float(iwidth);
70073:         float subrect_br_v = float(mTileSourceRect.height + mTileSourceRect.y) / float(iheight);
70073: 
70073:         // round rect position down to multiples of texture size
70073:         // this way we start at multiples of rect positions
70073:         rect.x = (rect.x / iwidth) * iwidth;
70073:         rect.y = (rect.y / iheight) * iheight;
70073:         // round up size to accomodate for rounding down above
70073:         rect.width  = (rect.width / iwidth + 2) * iwidth;
70073:         rect.height = (rect.height / iheight + 2) * iheight;
70073: 
70073:         // tesselate the visible region with tiles of subrect size
70073:         for (int y = rect.y; y < rect.y + rect.height;  y += theight) {
70073:             for (int x = rect.x; x < rect.x + rect.width; x += twidth) {
70073:                 // when we already tessellate, we might as well save on overdraw here
70073:                 if (!region.Intersects(nsIntRect(x, y, twidth, theight))) {
70073:                     continue;
70073:                 }
70073:                 triangleBuffer.addRect(x, y,
70073:                                        x + twidth, y + theight,
70073:                                        subrect_tl_u, subrect_tl_v,
70073:                                        subrect_br_u, subrect_br_v);
70073:             }
70073:         }
70073:     }
70073:     GLuint vertAttribIndex =
70073:         program->AttribLocation(LayerProgram::VertexAttrib);
70073:     GLuint texCoordAttribIndex =
70073:         program->AttribLocation(LayerProgram::TexCoordAttrib);
70073:     NS_ASSERTION(texCoordAttribIndex != GLuint(-1), "no texture coords?");
70073: 
70073:     gl()->fBindBuffer(LOCAL_GL_ARRAY_BUFFER, 0);
70073:     gl()->fVertexAttribPointer(vertAttribIndex, 2,
70073:                                LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0,
70073:                                triangleBuffer.vertexPointer());
70073: 
70073:     gl()->fVertexAttribPointer(texCoordAttribIndex, 2,
70073:                                LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0,
70073:                                triangleBuffer.texCoordPointer());
70073:     {
70073:         gl()->fEnableVertexAttribArray(texCoordAttribIndex);
70073:         {
70073:             gl()->fEnableVertexAttribArray(vertAttribIndex);
70073:             gl()->fDrawArrays(LOCAL_GL_TRIANGLES, 0, triangleBuffer.elements());
70073:             gl()->fDisableVertexAttribArray(vertAttribIndex);
70073:         }
70073:         gl()->fDisableVertexAttribArray(texCoordAttribIndex);
70073:     }
67637: #if defined(MOZ_WIDGET_GTK2) && !defined(MOZ_PLATFORM_MAEMO)
67637:     if (cairoImage->mSurface) {
67637:         sGLXLibrary.ReleaseTexImage(pixmap);
67637:         sGLXLibrary.DestroyPixmap(pixmap);
67637:     }
67637: #endif
62472: #ifdef XP_MACOSX
62472:   } else if (image->GetFormat() == Image::MAC_IO_SURFACE) {
62472:      MacIOSurfaceImageOGL *ioImage =
62472:        static_cast<MacIOSurfaceImageOGL*>(image.get());
62472: 
62724:      if (!mOGLManager->GetThebesLayerCallback()) {
62724:        // If its an empty transaction we still need to update
62724:        // the plugin IO Surface and make sure we grab the
62724:        // new image
62724:        ioImage->Update(GetContainer());
62724:        image = GetContainer()->GetCurrentImage();
62724:        gl()->MakeCurrent();
62724:        ioImage = static_cast<MacIOSurfaceImageOGL*>(image.get());
62724:      }
62724: 
70630:      if (!ioImage) {
70630:        return;
70630:      }
70630:      
63188:      gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
62472:      gl()->fBindTexture(LOCAL_GL_TEXTURE_RECTANGLE_ARB, ioImage->mTexture.GetTextureID());
62472: 
62472:      ColorTextureLayerProgram *program = 
62472:        mOGLManager->GetRGBARectLayerProgram();
62472:      
62472:      program->Activate();
62472:      if (program->GetTexCoordMultiplierUniformLocation() != -1) {
62472:        // 2DRect case, get the multiplier right for a sampler2DRect
62472:        float f[] = { float(ioImage->mSize.width), float(ioImage->mSize.height) };
62472:        program->SetUniform(program->GetTexCoordMultiplierUniformLocation(),
62472:                            2, f);
62472:      } else {
62472:        NS_ASSERTION(0, "no rects?");
62472:      }
62472:      
62472:      program->SetLayerQuadRect(nsIntRect(0, 0, 
62472:                                          ioImage->mSize.width, 
62472:                                          ioImage->mSize.height));
62472:      program->SetLayerTransform(GetEffectiveTransform());
62472:      program->SetLayerOpacity(GetEffectiveOpacity());
62472:      program->SetRenderOffset(aOffset);
62472:      program->SetTextureUnit(0);
62472:     
62472:      mOGLManager->BindAndDrawQuad(program);
62472:      gl()->fBindTexture(LOCAL_GL_TEXTURE_RECTANGLE_ARB, 0);
62472: #endif
42791:   }
63615:   GetContainer()->NotifyPaintedImage(image);
39997: }
39997: 
49072: static void
49072: InitTexture(GLContext* aGL, GLuint aTexture, GLenum aFormat, const gfxIntSize& aSize)
49072: {
49072:   aGL->fBindTexture(LOCAL_GL_TEXTURE_2D, aTexture);
49072:   aGL->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MIN_FILTER, LOCAL_GL_LINEAR);
49072:   aGL->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MAG_FILTER, LOCAL_GL_LINEAR);
49072:   aGL->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_S, LOCAL_GL_CLAMP_TO_EDGE);
49072:   aGL->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_T, LOCAL_GL_CLAMP_TO_EDGE);
49072: 
49072:   aGL->fTexImage2D(LOCAL_GL_TEXTURE_2D,
49072:                    0,
49072:                    aFormat,
49072:                    aSize.width,
49072:                    aSize.height,
49072:                    0,
49072:                    aFormat,
49072:                    LOCAL_GL_UNSIGNED_BYTE,
49072:                    NULL);
49072: }
49072: 
49072: PlanarYCbCrImageOGL::PlanarYCbCrImageOGL(LayerManagerOGL *aManager,
49072:                                          RecycleBin *aRecycleBin)
42442:   : PlanarYCbCrImage(nsnull), mRecycleBin(aRecycleBin), mHasData(PR_FALSE)
39997: {
49072: #if 0
49072:   // We really want to allocate this on the decode thread -- but to do that,
49072:   // we need to create a per-thread shared GL context, and it will only work
49072:   // if we have context sharing.  For now, create the textures on the main
49072:   // thread the first time we render.
49072:   if (aManager) {
49072:     AllocateTextures(aManager->glForResources());
49072:   }
49072: #endif
39997: }
39997: 
42442: PlanarYCbCrImageOGL::~PlanarYCbCrImageOGL()
42442: {
42442:   if (mBuffer) {
42442:     mRecycleBin->RecycleBuffer(mBuffer.forget(), mBufferSize);
42442:   }
42443: 
49072:   if (HasTextures()) {
42443:     mRecycleBin->RecycleTexture(&mTextures[0], RecycleBin::TEXTURE_Y, mData.mYSize);
42443:     mRecycleBin->RecycleTexture(&mTextures[1], RecycleBin::TEXTURE_C, mData.mCbCrSize);
42443:     mRecycleBin->RecycleTexture(&mTextures[2], RecycleBin::TEXTURE_C, mData.mCbCrSize);
42442:   }
49072: }
42442: 
39997: void
39997: PlanarYCbCrImageOGL::SetData(const PlanarYCbCrImage::Data &aData)
39997: {
42440:   // For now, we copy the data
41188:   int width_shift = 0;
41188:   int height_shift = 0;
41188:   if (aData.mYSize.width == aData.mCbCrSize.width &&
41188:       aData.mYSize.height == aData.mCbCrSize.height) {
41188:      // YV24 format
41188:      width_shift = 0;
41188:      height_shift = 0;
51961:      mType = gfx::YV24;
41188:   } else if (aData.mYSize.width / 2 == aData.mCbCrSize.width &&
41188:              aData.mYSize.height == aData.mCbCrSize.height) {
41188:     // YV16 format
41188:     width_shift = 1;
41188:     height_shift = 0;
51961:     mType = gfx::YV16;
41188:   } else if (aData.mYSize.width / 2 == aData.mCbCrSize.width &&
41188:              aData.mYSize.height / 2 == aData.mCbCrSize.height ) {
41188:       // YV12 format
41188:     width_shift = 1;
41188:     height_shift = 1;
54245:     mType = gfx::YV12;
41188:   } else {
41188:     NS_ERROR("YCbCr format not supported");
41188:   }
41188:   
39997:   mData = aData;
41188:   mData.mCbCrStride = mData.mCbCrSize.width = aData.mPicSize.width >> width_shift;
51961:   // Round up the values for width and height to make sure we sample enough data
51961:   // for the last pixel - See bug 590735
51961:   if (width_shift && (aData.mPicSize.width & 1)) {
51961:     mData.mCbCrStride++;
51961:     mData.mCbCrSize.width++;
51961:   }
41188:   mData.mCbCrSize.height = aData.mPicSize.height >> height_shift;
51961:   if (height_shift && (aData.mPicSize.height & 1)) {
51961:       mData.mCbCrSize.height++;
51961:   }
41188:   mData.mYSize = aData.mPicSize;
41188:   mData.mYStride = mData.mYSize.width;
42442: 
56960:   // Recycle the previous image main-memory buffer now that we're about to get a new buffer
56960:   if (mBuffer)
56960:     mRecycleBin->RecycleBuffer(mBuffer.forget(), mBufferSize);
56960: 
56960:   // update buffer size
42442:   mBufferSize = mData.mCbCrStride * mData.mCbCrSize.height * 2 +
42442:                 mData.mYStride * mData.mYSize.height;
56960: 
56960:   // get new buffer
49072:   mBuffer = mRecycleBin->GetBuffer(mBufferSize);
42442:   if (!mBuffer)
42442:     return;
42442: 
42440:   mData.mYChannel = mBuffer;
42440:   mData.mCbChannel = mData.mYChannel + mData.mYStride * mData.mYSize.height;
42440:   mData.mCrChannel = mData.mCbChannel + mData.mCbCrStride * mData.mCbCrSize.height;
41188:   int cbcr_x = aData.mPicX >> width_shift;
41188:   int cbcr_y = aData.mPicY >> height_shift;
39997: 
41188:   for (int i = 0; i < mData.mYSize.height; i++) {
41188:     memcpy(mData.mYChannel + i * mData.mYStride,
41188:            aData.mYChannel + ((aData.mPicY + i) * aData.mYStride) + aData.mPicX,
41188:            mData.mYStride);
41188:   }
42440:   for (int i = 0; i < mData.mCbCrSize.height; i++) {
42440:     memcpy(mData.mCbChannel + i * mData.mCbCrStride,
42440:            aData.mCbChannel + ((cbcr_y + i) * aData.mCbCrStride) + cbcr_x,
42440:            mData.mCbCrStride);
42440:   }
42440:   for (int i = 0; i < mData.mCbCrSize.height; i++) {
42440:     memcpy(mData.mCrChannel + i * mData.mCbCrStride,
42440:            aData.mCrChannel + ((cbcr_y + i) * aData.mCbCrStride) + cbcr_x,
42440:            mData.mCbCrStride);
42440:   }
41188: 
42440:   // Fix picture rect to be correct
42440:   mData.mPicX = mData.mPicY = 0;
41188:   mSize = aData.mPicSize;
39997: 
39997:   mHasData = PR_TRUE;
39997: }
39997: 
49072: void
49072: PlanarYCbCrImageOGL::AllocateTextures(mozilla::gl::GLContext *gl)
42443: {
49072:   gl->MakeCurrent();
42443: 
49072:   mRecycleBin->GetTexture(RecycleBin::TEXTURE_Y, mData.mYSize, gl, &mTextures[0]);
49072:   InitTexture(gl, mTextures[0].GetTextureID(), LOCAL_GL_LUMINANCE, mData.mYSize);
49072: 
49072:   mRecycleBin->GetTexture(RecycleBin::TEXTURE_C, mData.mCbCrSize, gl, &mTextures[1]);
49072:   InitTexture(gl, mTextures[1].GetTextureID(), LOCAL_GL_LUMINANCE, mData.mCbCrSize);
49072: 
49072:   mRecycleBin->GetTexture(RecycleBin::TEXTURE_C, mData.mCbCrSize, gl, &mTextures[2]);
49072:   InitTexture(gl, mTextures[2].GetTextureID(), LOCAL_GL_LUMINANCE, mData.mCbCrSize);
42443: }
42443: 
69765: static void
69765: UploadYUVToTexture(GLContext* gl, const PlanarYCbCrImage::Data& aData, 
69765:                    GLTexture* aYTexture,
69765:                    GLTexture* aUTexture,
69765:                    GLTexture* aVTexture)
39997: {
40117:   GLint alignment;
40117: 
69765:   if (!((ptrdiff_t)aData.mYStride & 0x7) && !((ptrdiff_t)aData.mYChannel & 0x7)) {
40117:     alignment = 8;
69765:   } else if (!((ptrdiff_t)aData.mYStride & 0x3)) {
40117:     alignment = 4;
69765:   } else if (!((ptrdiff_t)aData.mYStride & 0x1)) {
40117:     alignment = 2;
40117:   } else {
40117:     alignment = 1;
40117:   }
40117: 
40117:   // Set texture alignment for Y plane.
41370:   gl->fPixelStorei(LOCAL_GL_UNPACK_ALIGNMENT, alignment);
39997: 
69765:   gl->fBindTexture(LOCAL_GL_TEXTURE_2D, aYTexture->GetTextureID());
49072:   gl->fTexSubImage2D(LOCAL_GL_TEXTURE_2D, 0,
69765:                      0, 0, aData.mYSize.width, aData.mYSize.height,
49072:                      LOCAL_GL_LUMINANCE,
49072:                      LOCAL_GL_UNSIGNED_BYTE,
69765:                      aData.mYChannel);
39997: 
69765:   if (!((ptrdiff_t)aData.mCbCrStride & 0x7) && 
69765:       !((ptrdiff_t)aData.mCbChannel & 0x7) &&
69765:       !((ptrdiff_t)aData.mCrChannel & 0x7))
49072:   {
40117:     alignment = 8;
69765:   } else if (!((ptrdiff_t)aData.mCbCrStride & 0x3)) {
40117:     alignment = 4;
69765:   } else if (!((ptrdiff_t)aData.mCbCrStride & 0x1)) {
40117:     alignment = 2;
40117:   } else {
40117:     alignment = 1;
40117:   }
40117:   
40117:   // Set texture alignment for Cb/Cr plane
41370:   gl->fPixelStorei(LOCAL_GL_UNPACK_ALIGNMENT, alignment);
39997: 
69765:   gl->fBindTexture(LOCAL_GL_TEXTURE_2D, aUTexture->GetTextureID());
49072:   gl->fTexSubImage2D(LOCAL_GL_TEXTURE_2D, 0,
69765:                      0, 0, aData.mCbCrSize.width, aData.mCbCrSize.height,
49072:                      LOCAL_GL_LUMINANCE,
49072:                      LOCAL_GL_UNSIGNED_BYTE,
69765:                      aData.mCbChannel);
39997: 
69765:   gl->fBindTexture(LOCAL_GL_TEXTURE_2D, aVTexture->GetTextureID());
49072:   gl->fTexSubImage2D(LOCAL_GL_TEXTURE_2D, 0,
69765:                      0, 0, aData.mCbCrSize.width, aData.mCbCrSize.height,
49072:                      LOCAL_GL_LUMINANCE,
49072:                      LOCAL_GL_UNSIGNED_BYTE,
69765:                      aData.mCrChannel);
39997: 
40117:   // Reset alignment to default
41370:   gl->fPixelStorei(LOCAL_GL_UNPACK_ALIGNMENT, 4);
39997: }
39997: 
69765: void
69765: PlanarYCbCrImageOGL::UpdateTextures(GLContext *gl)
69765: {
69765:   if (!mBuffer || !mHasData)
69765:     return;
69765: 
69765:   UploadYUVToTexture(gl, mData, &mTextures[0], &mTextures[1], &mTextures[2]);
69765: }
69765: 
49072: CairoImageOGL::CairoImageOGL(LayerManagerOGL *aManager)
70073:   : CairoImage(nsnull), mSize(0, 0), mTiling(false)
39997: {
42441:   NS_ASSERTION(NS_IsMainThread(), "Should be on main thread to create a cairo image");
39997: 
49072:   if (aManager) {
42441:     // Allocate texture now to grab a reference to the GLContext
49072:     mTexture.Allocate(aManager->glForResources());
49072:   }
39997: }
39997: 
39997: void
39997: CairoImageOGL::SetData(const CairoImage::Data &aData)
39997: {
67637: #if defined(MOZ_WIDGET_GTK2) && !defined(MOZ_PLATFORM_MAEMO)
67637:   mSurface = nsnull;
67637: #endif
67637: 
42441:   if (!mTexture.IsAllocated())
42441:     return;
42441: 
42441:   mozilla::gl::GLContext *gl = mTexture.GetGLContext();
42441:   gl->MakeCurrent();
42441: 
59437:   GLuint tex = mTexture.GetTextureID();
67637:   gl->fActiveTexture(LOCAL_GL_TEXTURE0);
67637:   mSize = aData.mSize;
59437: 
67637: #if defined(MOZ_WIDGET_GTK2) && !defined(MOZ_PLATFORM_MAEMO)
67637:   if (sGLXLibrary.HasTextureFromPixmap()) {
67637:     mSurface = aData.mSurface;
67637:     if (mSurface->GetContentType() == gfxASurface::CONTENT_COLOR_ALPHA) {
67637:       mLayerProgram = gl::RGBALayerProgramType;
67637:     } else {
67637:       mLayerProgram = gl::RGBXLayerProgramType;
67637:     }
67637:     return;
67637:   }
67637: #endif
67637: 
67637:   InitTexture(gl, tex, LOCAL_GL_RGBA, mSize);
46145: 
59437:   mLayerProgram =
59437:     gl->UploadSurfaceToTexture(aData.mSurface,
59437:                                nsIntRect(0,0, mSize.width, mSize.height),
59437:                                tex);
39997: }
39997: 
70073: void CairoImageOGL::SetTiling(bool aTiling)
70073: {
70073:   if (aTiling == mTiling)
70073:       return;
70073:   mozilla::gl::GLContext *gl = mTexture.GetGLContext();
70073:   gl->MakeCurrent();
70073:   gl->fActiveTexture(LOCAL_GL_TEXTURE0);
70073:   gl->fBindTexture(LOCAL_GL_TEXTURE_2D, mTexture.GetTextureID());
70073:   mTiling = aTiling;
70073: 
70073:   if (aTiling) {
70073:     gl->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_S, LOCAL_GL_REPEAT);
70073:     gl->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_T, LOCAL_GL_REPEAT);
70073:   } else {
70073:     gl->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_S, LOCAL_GL_CLAMP_TO_EDGE);
70073:     gl->fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_T, LOCAL_GL_CLAMP_TO_EDGE);
70073:   }
70073: }
70073: 
55454: ShadowImageLayerOGL::ShadowImageLayerOGL(LayerManagerOGL* aManager)
55454:   : ShadowImageLayer(aManager, nsnull)
55454:   , LayerOGL(aManager)
55454: {
55454:   mImplData = static_cast<LayerOGL*>(this);
55454: }  
55454: 
55454: ShadowImageLayerOGL::~ShadowImageLayerOGL()
55454: {}
55454: 
55454: PRBool
69764: ShadowImageLayerOGL::Init(const SharedImage& aFront,
55454:                           const nsIntSize& aSize)
55454: {
69765:   if (aFront.type() == SharedImage::TSurfaceDescriptor) {
69765:     SurfaceDescriptor desc = aFront.get_SurfaceDescriptor();
69764:     nsRefPtr<gfxASurface> surf = 
69765:       ShadowLayerForwarder::OpenDescriptor(desc);
69106:     gfxSize sz = surf->GetSize();
55454:     mTexImage = gl()->CreateTextureImage(nsIntSize(sz.width, sz.height),
69106:                                          surf->GetContentType(),
55454:                                          LOCAL_GL_CLAMP_TO_EDGE);
69765:     mOGLManager->DestroySharedSurface(&desc, mAllocator);
55454:     return PR_TRUE;
69765:   } else {
69765:     YUVImage yuv = aFront.get_YUVImage();
69765:     
69765:     nsRefPtr<gfxSharedImageSurface> surfY =
69765:       gfxSharedImageSurface::Open(yuv.Ydata());
69765:     nsRefPtr<gfxSharedImageSurface> surfU =
69765:       gfxSharedImageSurface::Open(yuv.Udata());
69765:     nsRefPtr<gfxSharedImageSurface> surfV =
69765:       gfxSharedImageSurface::Open(yuv.Vdata());
69765:     
69765:     mSize = gfxIntSize(surfY->GetSize().width, surfY->GetSize().height);
69765:     gfxIntSize CbCrSize = gfxIntSize(surfU->GetSize().width, surfU->GetSize().height);
69765: 
69765:     if (!mYUVTexture[0].IsAllocated()) {
69765:       mYUVTexture[0].Allocate(mOGLManager->glForResources());
69765:       mYUVTexture[1].Allocate(mOGLManager->glForResources());
69765:       mYUVTexture[2].Allocate(mOGLManager->glForResources());
69765:     }
69765: 
69765:     NS_ASSERTION(mYUVTexture[0].IsAllocated() &&
69765:                  mYUVTexture[1].IsAllocated() &&
69765:                  mYUVTexture[2].IsAllocated(),
69765:                  "Texture allocation failed!");
69765: 
69765:     gl()->MakeCurrent();
69765:     InitTexture(gl(), mYUVTexture[0].GetTextureID(), LOCAL_GL_LUMINANCE, mSize);
69765:     InitTexture(gl(), mYUVTexture[1].GetTextureID(), LOCAL_GL_LUMINANCE, CbCrSize);
69765:     InitTexture(gl(), mYUVTexture[2].GetTextureID(), LOCAL_GL_LUMINANCE, CbCrSize);
69765:     
69765:     mOGLManager->DestroySharedSurface(surfY, mAllocator);
69765:     mOGLManager->DestroySharedSurface(surfU, mAllocator);
69765:     mOGLManager->DestroySharedSurface(surfV, mAllocator);
69765:     return PR_TRUE;
69765:   }
55454: }
55454: 
69106: void
69764: ShadowImageLayerOGL::Swap(const SharedImage& aNewFront, SharedImage* aNewBack)
55454: {
69765:   if (!mDestroyed) {
69765:     if (aNewFront.type() == SharedImage::TSurfaceDescriptor) {
69764:       nsRefPtr<gfxASurface> surf = 
69764:         ShadowLayerForwarder::OpenDescriptor(aNewFront.get_SurfaceDescriptor());
55454:       // XXX this is always just ridiculously slow
69106:       gfxSize sz = surf->GetSize();
55454:       nsIntRegion updateRegion(nsIntRect(0, 0, sz.width, sz.height));
69106:       mTexImage->DirectUpdate(surf, updateRegion);
69765:     } else {
69765:       const YUVImage& yuv = aNewFront.get_YUVImage();
69765:     
69765:       nsRefPtr<gfxSharedImageSurface> surfY =
69765:         gfxSharedImageSurface::Open(yuv.Ydata());
69765:       nsRefPtr<gfxSharedImageSurface> surfU =
69765:         gfxSharedImageSurface::Open(yuv.Udata());
69765:       nsRefPtr<gfxSharedImageSurface> surfV =
69765:         gfxSharedImageSurface::Open(yuv.Vdata());
69765:  
69765:       PlanarYCbCrImage::Data data;
69765:       data.mYChannel = surfY->Data();
69765:       data.mYStride = surfY->Stride();
69765:       data.mYSize = surfY->GetSize();
69765:       data.mCbChannel = surfU->Data();
69765:       data.mCrChannel = surfV->Data();
69765:       data.mCbCrStride = surfU->Stride();
69765:       data.mCbCrSize = surfU->GetSize();
69765: 
69765:       UploadYUVToTexture(gl(), data, &mYUVTexture[0], &mYUVTexture[1], &mYUVTexture[2]);
69765:     }
55454:   }
55454: 
69106:   *aNewBack = aNewFront;
55454: }
55454: 
55454: void
55454: ShadowImageLayerOGL::DestroyFrontBuffer()
55454: {
55454:   mTexImage = nsnull;
55454: }
55454: 
55454: void
60065: ShadowImageLayerOGL::Disconnect()
60065: {
60065:   Destroy();
60065: }
60065: 
60065: void
55454: ShadowImageLayerOGL::Destroy()
55454: {
55454:   if (!mDestroyed) {
55454:     mDestroyed = PR_TRUE;
55454:     mTexImage = nsnull;
55454:   }
55454: }
55454: 
55454: Layer*
55454: ShadowImageLayerOGL::GetLayer()
55454: {
55454:   return this;
55454: }
55454: 
55454: void
55454: ShadowImageLayerOGL::RenderLayer(int aPreviousFrameBuffer,
57097:                                  const nsIntPoint& aOffset)
55454: {
55454:   mOGLManager->MakeCurrent();
55454: 
69765:   LayerProgram* program;
69765: 
69765:   if (mTexImage) {
55454:     gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
55454:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, mTexImage->Texture());
69765:     ColorTextureLayerProgram *colorProgram =
59439:       mOGLManager->GetColorTextureLayerProgram(mTexImage->GetShaderProgramType());
55454: 
55454:     ApplyFilter(mFilter);
55454: 
69765:     colorProgram->Activate();
69765:     colorProgram->SetTextureUnit(0);
69765:     colorProgram->SetLayerQuadRect(nsIntRect(nsIntPoint(0, 0), mTexImage->GetSize()));
69765:     program = colorProgram;
69765:   } else {
69765:     gl()->fActiveTexture(LOCAL_GL_TEXTURE0);
69765:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, mYUVTexture[0].GetTextureID());
69765:     ApplyFilter(mFilter);
69765:     gl()->fActiveTexture(LOCAL_GL_TEXTURE1);
69765:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, mYUVTexture[1].GetTextureID());
69765:     ApplyFilter(mFilter);
69765:     gl()->fActiveTexture(LOCAL_GL_TEXTURE2);
69765:     gl()->fBindTexture(LOCAL_GL_TEXTURE_2D, mYUVTexture[2].GetTextureID());
69765:     ApplyFilter(mFilter);
69765:     
69765:     YCbCrTextureLayerProgram *yuvProgram = mOGLManager->GetYCbCrLayerProgram();
69765: 
69765:     yuvProgram->Activate();
69765:     yuvProgram->SetLayerQuadRect(nsIntRect(0, 0,
69765:                                            mSize.width,
69765:                                            mSize.height));
69765:     yuvProgram->SetYCbCrTextureUnits(0, 1, 2);
69765: 
69765:     program = yuvProgram;
69765:   }
69765: 
57097:   program->SetLayerTransform(GetEffectiveTransform());
57097:   program->SetLayerOpacity(GetEffectiveOpacity());
55454:   program->SetRenderOffset(aOffset);
55454: 
55454:   mOGLManager->BindAndDrawQuad(program);
55454: }
55454: 
55454: 
39997: } /* layers */
39997: } /* mozilla */
