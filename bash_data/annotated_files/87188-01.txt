87188: var otherGlobal = newGlobal('new-compartment');
87188: 
86078: function test(str, arg, result)
86078: {
86078:     arg = arg || 'ponies';
86078:     result = result || 'ponies';
86078: 
86078:     var fun = new Function('x', str);
86078: 
86078:     var got = fun.toSource().replace(/\n/g,'');
86078:     var expect = '(function anonymous(x) {' + str + '})';
86078:     if (got !== expect) {
86078:         print("GOT:    " + got);
86078:         print("EXPECT: " + expect);
86078:         assertEq(got, expect);
86078:     }
86078: 
87188:     // test reflection logic
86078:     Reflect.parse(got);
86078: 
87188:     // test xdr by cloning a cross-compartment function
87188:     otherGlobal.str = str;
87188:     var c = clone(otherGlobal.eval("new Function('x', str)"));
87188:     assertEq(c.toSource(), fun.toSource());
87188: 
86078:     var got = fun(arg);
86078:     var expect = result;
86078:     if (got !== expect) {
86078:         print("GOT:" + got);
86078:         print("EXPECT: " + expect);
86078:         assertEq(got, expect);
86078:     }
86078: }
86078: 
86078: function isError(str)
86078: {
86078:     var caught = false;
86078:     try {
86078:         new Function(str);
86078:     } catch(e) {
86078:         assertEq(String(e).indexOf('TypeError') == 0 || String(e).indexOf('SyntaxError') == 0, true);
86078:         caught = true;
86078:     }
86078:     assertEq(caught, true);
86078: }
86078: 
86078: // let expr
86078: test('return let (y) x;');
86078: test('return let (x) "" + x;', 'unicorns', 'undefined');
86078: test('return let (y = x) (y++, "" + y);', 'unicorns', 'NaN');
86078: test('return let (y = 1) (y = x, y);');
86078: test('return let ([] = x) x;');
86078: test('return let (x = {a: x}) x.a;');
86078: test('return let ({a: x} = {a: x}) x;');
86078: test('return let ([x] = {0: x}) x;');
86078: test('return let ({0: x} = [x]) x;');
86078: test('return let ({0: []} = []) x;');
86078: test('return let ([, ] = x) x;');
86078: test('return let ([, , , , ] = x) x;');
86078: test('return let ([[]] = x) x;');
86078: test('return let ([[[[[[[[[[[[[]]]]]]]]]]]]] = x) x;');
86078: test('return let ([[], []] = x) x;');
86078: test('return let ([[[[]]], [], , [], [[]]] = x) x;');
86078: test('return let ({x: []} = x) x;');
86078: test('return let ({x: [], y: {x: []}} = x) "ponies";', {y:{}});
86078: test('return let ({x: []} = x, [{x: []}] = x) "ponies";');
86078: test('return let (x = x) x;');
86078: test('return let (x = eval("x")) x;');
86078: test('return let (x = (let (x = x + 1) x) + 1) x;', 1, 3);
86078: test('return let (x = (let (x = eval("x") + 1) eval("x")) + 1) eval("x");', 1, 3);
86078: test('return let (x = x + 1, y = x) y;');
86078: test('return let (x = x + 1, [] = x, [[, , ]] = x, y = x) y;');
86078: test('return let ([{a: x}] = x, [, {b: y}] = x) let (x = x + 1, y = y + 2) x + y;', [{a:"p"},{b:"p"}], "p1p2");
86078: test('return let ([] = []) x;');
86078: test('return let ([] = [x]) x;');
86078: test('return let ([x] = [x]) x;');
86078: test('return let ([[a, [b, c]]] = [[x, []]]) a;');
86078: test('return let ([x, y] = [x, x + 1]) x + y;', 1, 3);
86078: test('return let ([x, y, z] = [x, x + 1, x + 2]) x + y + z;', 1, 6);
86078: test('return let ([[x]] = [[x]]) x;');
86078: test('return let ([x, y] = [x, x + 1]) x;');
86078: test('return let ([x, [y, z]] = [x, x + 1]) x;');
86078: test('return let ([{x: [x]}, {y1: y, z1: z}] = [x, x + 1]) x;',{x:['ponies']});
86078: test('return let (x = (3, x)) x;');
86078: test('return let (x = x + "s") x;', 'ponie');
86078: test('return let ([x] = (3, [x])) x;');
86078: test('return let ([] = [[]] = {}) x;');
86078: test('return let (y = x) function () {return eval("y");}();');
86078: test('return eval("let (y = x) y");');
86078: test('return let (y = x) (eval("var y = 2"), y);', 'ponies', 2);
86078: test('"use strict";return let (y = x) (eval("var y = 2"), y);');
86078: test('this.y = x;return let (y = 1) this.eval("y");');
86078: test('try {let (x = x) eval("throw x");} catch (e) {return e;}');
86078: test('try {return let (x = eval("throw x")) x;} catch (e) {return e;}');
86078: isError('let (x = 1, x = 2) x');
86078: isError('let ([x, y] = a, {a:x} = b) x');
86078: isError('let ([x, y, x] = a) x');
86078: isError('let ([x, [y, [x]]] = a) x');
86078: isError('let (x = function() { return x}) x()return x;');
86078: isError('(let (x = function() { return x}) x())return x;');
86078: 
86078: // let block
86078: test('let (y) {return x;}');
86078: test('let (y = x) {y++;return "" + y;}', 'unicorns', 'NaN');
86078: test('let (y = 1) {y = x;return y;}');
86078: test('let (x) {return "" + x;}', 'unicorns', 'undefined');
86078: test('let ([] = x) {return x;}');
86078: test('let (x) {}return x;');
86078: test('let (x = {a: x}) {return x.a;}');
86078: test('let ({a: x} = {a: x}) {return x;}');
86078: test('let ([x] = {0: x}) {return x;}');
86078: test('let ({0: x} = [x]) {return x;}');
86078: test('let ({0: []} = []) {return x;}');
86078: test('let ([, ] = x) {return x;}');
86078: test('let ([, , , , ] = x) {return x;}');
86078: test('let ([[]] = x) {return x;}');
86078: test('let ([[[[[[[[[[[[[]]]]]]]]]]]]] = x) {return x;}');
86078: test('let ([[], []] = x) {return x;}');
86078: test('let ([[[[]]], [], , [], [[]]] = x) {return x;}');
86078: test('let ({x: []} = x) {return x;}');
86078: test('let ({x: [], y: {x: []}} = x) {return "ponies";}', {y:{}});
86078: test('let ({x: []} = x, [{x: []}] = x) {return "ponies";}');
86078: test('let (x = x) {return x;}');
86078: test('let (x = eval("x")) {return x;}');
86078: test('let (x = (let (x = x + 1) x) + 1) {return x;}', 1, 3);
86078: test('let (x = (let (x = eval("x") + 1) eval("x")) + 1) {return eval("x");}', 1, 3);
86078: test('let (x = x + 1, y = x) {return y;}');
86078: test('let (x = x + 1, [] = x, [[, , ]] = x, y = x) {return y;}');
86078: test('let ([{a: x}] = x, [, {b: y}] = x) {let (x = x + 1, y = y + 2) {return x + y;}}', [{a:"p"},{b:"p"}], "p1p2");
86078: test('let ([] = []) {return x;}');
86078: test('let ([] = [x]) {return x;}');
86078: test('let ([x] = [x]) {return x;}');
86078: test('let ([[a, [b, c]]] = [[x, []]]) {return a;}');
86078: test('let ([x, y] = [x, x + 1]) {return x + y;}', 1, 3);
86078: test('let ([x, y, z] = [x, x + 1, x + 2]) {return x + y + z;}', 1, 6);
86078: test('let ([[x]] = [[x]]) {return x;}');
86078: test('let ([x, y] = [x, x + 1]) {return x;}');
86078: test('let ([x, [y, z]] = [x, x + 1]) {return x;}');
86078: test('let ([{x: [x]}, {y1: y, z1: z}] = [x, x + 1]) {return x;}',{x:['ponies']});
86078: test('let (y = x[1]) {let (x = x[0]) {try {let (y = "unicorns") {throw y;}} catch (e) {return x + y;}}}', ['pon','ies']);
86078: test('let (x = x) {try {let (x = "unicorns") eval("throw x");} catch (e) {return x;}}');
86078: test('let ([] = [[]] = {}) {return x;}');
86078: test('let (y = x) {return function () {return eval("y");}();}');
86078: test('return eval("let (y = x) {y;}");');
86078: test('let (y = x) {eval("var y = 2");return y;}', 'ponies', 2);
86078: test('"use strict";let (y = x) {eval("var y = 2");return y;}');
86078: test('this.y = x;let (y = 1) {return this.eval("y");}');
86078: isError('let (x = 1, x = 2) {x}');
86078: isError('let ([x, y] = a, {a:x} = b) {x}');
86078: isError('let ([x, y, x] = a) {x}');
86078: isError('let ([x, [y, [x]]] = a) {x}');
86078: 
86078: // var declarations
86078: test('var y;return x;');
86078: test('var y = x;return x;');
86078: test('var [] = x;return x;');
86078: test('var [, ] = x;return x;');
86078: test('var [, , , , ] = x;return x;');
86078: test('var [[]] = x;return x;');
86078: test('var [[[[[[[[[[[[[]]]]]]]]]]]]] = x;return x;');
86078: test('var [[], []] = x;return x;');
86078: test('var [[[[]]], [], , [], [[]]] = x;return x;');
86078: test('var {x: []} = x;return x;');
86078: test('var {x: [], y: {x: []}} = x;return "ponies";', {y:{}});
86078: test('var {x: []} = x, [{x: []}] = x;return "ponies";');
86078: test('var x = x;return x;');
86078: test('var y = y;return "" + y;', 'unicorns', 'undefined');
86078: test('var x = eval("x");return x;');
86078: test('var x = (let (x = x + 1) x) + 1;return x;', 1, 3);
86078: test('var x = (let (x = eval("x") + 1) eval("x")) + 1;return eval("x");', 1, 3);
86078: test('var X = x + 1, y = x;return y;');
86078: test('var X = x + 1, [] = X, [[, , ]] = X, y = x;return y;');
86078: test('var [{a: X}] = x, [, {b: y}] = x;var X = X + 1, y = y + 2;return X + y;', [{a:"p"},{b:"p"}], "p1p2");
86078: test('var [x] = [x];return x;');
86078: test('var [[a, [b, c]]] = [[x, []]];return a;');
86078: test('var [y] = [x];return y;');
86078: test('var [x, y] = [x, x + 1];return x + y;', 1, 3);
86078: test('var [x, y, z] = [x, x + 1, x + 2];return x + y + z;', 1, 6);
86078: test('var [[x]] = [[x]];return x;');
86078: test('var [x, y] = [x, x + 1];return x;');
86078: test('var [x, [y, z]] = [x, x + 1];return x;');
86078: test('var [{x: [x]}, {y1: y, z1: z}] = [x, x + 1];return x;',{x:['ponies']});
86078: test('var [] = [[]] = {};return x;');
86078: test('if (x) {var y = x;return x;}');
86078: test('if (x) {y = x;var y = y;return y;}');
86078: test('if (x) {var z = y;var [y] = x;z += y;}return z;', ['-'], 'undefined-');
86078: 
86078: // let declaration in context
86078: test('if (x) {let y;return x;}');
86078: test('if (x) {let x;return "" + x;}', 'unicorns', 'undefined');
86078: test('if (x) {let y = x;return x;}');
86078: test('if (x) {y = x;let y = y;return y;}');
86078: test('if (x) {var z = y;let [y] = x;z += y;}return z;', ['-'], 'undefined-');
86078: test('if (x) {let y = x;return x;}');
86078: test('if (x) {let [] = x;return x;}');
86078: test('if (x) {let [, ] = x;return x;}');
86078: test('if (x) {let [, , , , ] = x;return x;}');
86078: test('if (x) {let [[]] = x;return x;}');
86078: test('if (x) {let [[[[[[[[[[[[[]]]]]]]]]]]]] = x;return x;}');
86078: test('if (x) {let [[], []] = x;return x;}');
86078: test('if (x) {let [[[[]]], [], , [], [[]]] = x;return x;}');
86078: test('if (x) {let {x: []} = x;return x;}');
86078: test('if (x) {let {x: [], y: {x: []}} = x;return "ponies";}', {y:{}});
86078: test('if (x) {let {x: []} = x, [{x: []}] = x;return "ponies";}');
86078: test('if (x) {let x = x;return "" + x;}', 'unicorns', 'undefined');
86078: test('if (x) {let y = y;return "" + y;}', 'unicorns', 'undefined');
86078: test('if (x) {let x = eval("x");return "" + x;}', 'unicorns', 'undefined');
86078: test('if (x) {let y = (let (x = x + 1) x) + 1;return y;}', 1, 3);
86078: test('if (x) {let y = (let (x = eval("x") + 1) eval("x")) + 1;return eval("y");}', 1, 3);
86078: test('if (x) {let X = x + 1, y = x;return y;}');
86078: test('if (x) {let X = x + 1, [] = X, [[, , ]] = X, y = x;return y;}');
86078: test('if (x) {let [{a: X}] = x, [, {b: Y}] = x;var XX = X + 1, YY = Y + 2;return XX + YY;}', [{a:"p"},{b:"p"}], "p1p2");
86078: test('if (x) {let [[a, [b, c]]] = [[x, []]];return a;}');
86078: test('if (x) {let [X] = [x];return X;}');
86078: test('if (x) {let [y] = [x];return y;}');
86078: test('if (x) {let [X, y] = [x, x + 1];return X + y;}', 1, 3);
86078: test('if (x) {let [X, y, z] = [x, x + 1, x + 2];return X + y + z;}', 1, 6);
86078: test('if (x) {let [[X]] = [[x]];return X;}');
86078: test('if (x) {let [X, y] = [x, x + 1];return X;}');
86078: test('if (x) {let [X, [y, z]] = [x, x + 1];return X;}');
86078: test('if (x) {let [{x: [X]}, {y1: y, z1: z}] = [x, x + 1];return X;}',{x:['ponies']});
86078: test('if (x) {let y = x;try {let x = 1;throw 2;} catch (e) {return y;}}');
86078: test('if (x) {let [] = [[]] = {};return x;}');
86078: test('let (y, [] = x) {}try {let a = b(), b;} catch (e) {return x;}');
86078: test('try {let x = 1;throw 2;} catch (e) {return x;}');
86078: test('let (y = x) {let x;return y;}');
86078: test('let (y = x) {let x = y;return x;}');
86078: test('let ([y, z] = x) {let a = x, b = y;return a;}');
86078: test('let ([y, z] = x, a = x, [] = x) {let b = x, c = y;return a;}');
86078: test('function f() {return unicorns;}try {let (x = 1) {let a, b;f();}} catch (e) {return x;}');
86078: test('function f() {return unicorns;}try {let (x = 1) {let a, b;}f();} catch (e) {return x;}');
86078: test('x.foo;{let y = x;return y;}');
86078: test('x.foo;if (x) {x.bar;let y = x;return y;}');
86078: test('if (x) {let y = x;return function () {return eval("y");}();}');
86078: test('return eval("let y = x; y");');
86078: test('if (x) {let y = x;eval("var y = 2");return y;}', 'ponies', 2);
86078: test('"use strict";if (x) {let y = x;eval("var y = 2");return y;}');
86078: test('"use strict";if (x) {let y = x;eval("let y = 2");return y;}');
86078: test('"use strict";if (x) {let y = 1;return eval("let y = x;y;");}');
86078: test('this.y = x;if (x) {let y = 1;return this.eval("y");}');
86078: isError('if (x) {let (x = 1, x = 2) {x}}');
86078: isError('if (x) {let ([x, y] = a, {a:x} = b) {x}}');
86078: isError('if (x) {let ([x, y, x] = a) {x}}');
86078: isError('if (x) {let ([x, [y, [x]]] = a) {x}}');
86078: isError('let ([x, y] = x) {let x;}');
86078: 
86078: // for(;;)
86078: test('for (;;) {return x;}');
86078: test('for (let y = 1;;) {return x;}');
86078: test('for (let y = 1;; ++y) {return x;}');
86078: test('for (let y = 1; ++y;) {return x;}');
86078: test('for (let (x = 1) x; x != 1; ++x) {return x;}');
86078: test('for (let [, {a: [], b: []}] = x, [] = x; x;) {return x;}');
86078: test('for (let x = 1, [y, z] = x, a = x; z < 4; ++z) {return x + y;}', [2,3], 3);
86078: test('for (let (x = 1, [{a: b, c: d}] = [{a: 1, c: 2}]) x; x != 1; ++x) {return x;}');
86078: test('for (let [[a, [b, c]]] = [[x, []]];;) {return a;}');
86078: test('var sum = 0;for (let y = x; y < 4; ++y) {sum += y;}return sum;', 1, 6);
86078: test('var sum = 0;for (let x = x, y = 10; x < 4; ++x) {sum += x;}return sum;', 1, 6);
86078: test('var sum = 0;for (let x = x; x < 4; ++x) {sum += x;}return x;', 1, 1);
86078: test('var sum = 0;for (let x = eval("x"); x < 4; ++x) {sum += x;}return sum;', 1, 6);
86078: test('var sum = 0;for (let x = x; eval("x") < 4; ++x) {sum += eval("x");}return sum;', 1, 6);
86078: test('var sum = 0;for (let x = eval("x"); eval("x") < 4; ++x) {sum += eval("x");}return sum;', 1, 6);
86078: test('for (var y = 1;;) {return x;}');
86078: test('for (var y = 1;; ++y) {return x;}');
86078: test('for (var y = 1; ++y;) {return x;}');
86078: test('for (var [, {a: [], b: []}] = x, [] = x; x;) {return x;}');
86078: test('for (var X = 1, [y, z] = x, a = x; z < 4; ++z) {return X + y;}', [2,3], 3);
86078: test('var sum = 0;for (var y = x; y < 4; ++y) {sum += y;}return sum;', 1, 6);
86078: test('var sum = 0;for (var X = x, y = 10; X < 4; ++X) {sum += X;}return sum;', 1, 6);
86078: test('var sum = 0;for (var X = x; X < 4; ++X) {sum += X;}return x;', 1, 1);
86078: test('var sum = 0;for (var X = eval("x"); X < 4; ++X) {sum += X;}return sum;', 1, 6);
86078: test('var sum = 0;for (var X = x; eval("X") < 4; ++X) {sum += eval("X");}return sum;', 1, 6);
86078: test('var sum = 0;for (var X = eval("x"); eval("X") < 4; ++X) {sum += eval("X");}return sum;', 1, 6);
86078: test('try {for (let x = eval("throw x");;) {}} catch (e) {return e;}');
86078: test('try {for (let x = x + "s"; eval("throw x");) {}} catch (e) {return e;}', 'ponie');
86078: test('for (let y = x;;) {let x;return y;}');
86078: test('for (let y = x;;) {let y;return x;}');
86078: test('for (let y;;) {let y;return x;}');
86078: test('for (let a = x;;) {let c = x, d = x;return c;}');
86078: test('for (let [a, b] = x;;) {let c = x, d = x;return c;}');
86078: test('for (let [] = [[]] = {};;) {return x;}');
86078: isError('for (let x = 1, x = 2;;) {}');
86078: isError('for (let [x, y] = a, {a:x} = b;;) {}');
86078: isError('for (let [x, y, x] = a;;) {}');
86078: isError('for (let [x, [y, [x]]] = a;;) {}');
86078: 
86078: // for(in)
86078: test('for (let i in x) {return x;}');
86078: test('for (let i in x) {let y;return x;}');
86078: test('for each (let [a, b] in x) {let y;return x;}');
86078: test('for (let i in x) {let (i = x) {return i;}}');
86078: test('for (let i in x) {let i = x;return i;}');
86078: test('for each (let [x, y] in x) {return x + y;}', [['ponies', '']]);
86078: test('for each (let [{0: x, 1: y}, z] in x) {return x + y + z;}', [[['po','nies'], '']]);
86078: test('var s = "";for (let a in x) {for (let b in x) {s += a + b;}}return s;', [1,2], '00011011');
86078: test('var res = "";for (let i in x) {res += x[i];}return res;');
86078: test('var res = "";for (var i in x) {res += x[i];}return res;');
86078: test('for each (let {x: y, y: x} in [{x: x, y: x}]) {return y;}');
86078: test('for (let x in eval("x")) {return x;}', {ponies:true});
86078: test('for (let x in x) {return eval("x");}', {ponies:true});
86078: test('for (let x in eval("x")) {return eval("x");}', {ponies:true});
86078: test('for ((let (x = {y: true}) x).y in eval("x")) {return eval("x");}');
86078: test('for (let i in x) {break;}return x;');
86078: test('for (let i in x) {break;}return eval("x");');
86078: test('for (let x in x) {break;}return x;');
86078: test('for (let x in x) {break;}return eval("x");');
86078: test('a:for (let i in x) {for (let j in x) {break a;}}return x;');
86078: test('a:for (let i in x) {for (let j in x) {break a;}}return eval("x");');
86078: test('var j;for (let i in x) {j = i;break;}return j;', {ponies:true});
86078: test('try {for (let x in eval("throw x")) {}} catch (e) {return e;}');
86078: test('try {for each (let x in x) {eval("throw x");}} catch (e) {return e;}', ['ponies']);
86078: isError('for (let [x, x] in o) {}');
86078: isError('for (let [x, y, x] in o) {}');
86078: isError('for (let [x, [y, [x]]] in o) {}');
86078: 
86078: // genexps
86078: test('return (i for (i in x)).next();', {ponies:true});
86078: test('return (eval("i") for (i in x)).next();', {ponies:true});
86078: test('return (eval("i") for (i in eval("x"))).next();', {ponies:true});
86078: test('try {return (eval("throw i") for (i in x)).next();} catch (e) {return e;}', {ponies:true});
86078: 
86078: // array comprehension
86078: test('return [i for (i in x)][0];', {ponies:true});
86078: test('return [eval("i") for (i in x)][0];', {ponies:true});
86078: test('return [eval("i") for (i in eval("x"))][0];', {ponies:true});
86078: test('try {return [eval("throw i") for (i in x)][0];} catch (e) {return e;}', {ponies:true});
86078: 
86078: // don't forget about switch craziness
86078: test('var y = 3;switch (function () {return eval("y");}()) {case 3:let y;return x;default:;}');
86078: test('switch (x) {case 3:let y;return 3;case 4:let z;return 4;default:return x;}');
86078: test('switch (x) {case 3:let x;break;default:if (x === undefined) {return "ponies";}}');
86078: test('switch (x) {case 3:default:let y;let (y = x) {return y;}}');
86078: isError('switch (x) {case 3:let y;return 3;case 4:let y;return 4;default:;}');
86078: 
86078: // test weird cases where the decompiler changes tokens
86078: function testWeird(str, printedAs, arg, result)
86078: {
86078:     var fun = new Function('x', str);
86078: 
86078:     // this is lame and doesn't normalize whitespace so if an assert fails
86078:     // here, see if its just whitespace and fix the caller
86078:     assertEq(fun.toSource(), '(function anonymous(x) {' + printedAs + '})');
86078: 
86078:     test(printedAs, arg, result);
86078: }
86078: 
86078: testWeird('let y = x;return x;', 'var y = x;return x;');
86078: testWeird('let y = 1, y = x;return y;', 'var y = 1, y = x;return y;');
86078: testWeird('return let ({x:x, y:y} = x) x + y', 'return let ({x, y} = x) x + y;', {x:'pon', y:'ies'});
86078: testWeird('let ({x:x, y:y} = x) {return x + y;}', 'let ({x, y} = x) {return x + y;}', {x:'pon', y:'ies'});
