22705: /* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
19591: /**
19591:  * A number of the tests in this file depend on the setting of
19591:  * HOTLOOP.  Define some constants up front, so they're easy to grep
19591:  * for.
19591:  */
19601: // The HOTLOOP constant we depend on; only readable from our stats
19601: // object in debug builds.
19601: const haveTracemonkey = !!(this.tracemonkey)
19601: const HOTLOOP = haveTracemonkey ? tracemonkey.HOTLOOP : 2;
19591: // The loop count at which we trace
19591: const RECORDLOOP = HOTLOOP;
19591: // The loop count at which we run the trace
19591: const RUNLOOP = HOTLOOP + 1;
19591: 
24617: var gDoMandelbrotTest = true;
24617: if ("gSkipSlowTests" in this && gSkipSlowTests) {
24617:     print("** Skipping slow tests");
24617:     gDoMandelbrotTest = false;
24617: }
24617: 
25896: if (!('gSrcdir' in this))
25896:     gSrcdir = '.';
25896: 
25896: if (!('gReportSummary' in this))
25896:     gReportSummary = true;
25896: 
17913: var testName = null;
17913: if ("arguments" in this && arguments.length > 0)
17913:   testName = arguments[0];
17719: var fails = [], passes=[];
17719: 
19601: function jitstatHandler(f)
19601: {
23105:     if (!haveTracemonkey)
19601:         return;
23105: 
19601:     // XXXbz this is a nasty hack, but I can't figure out a way to
19601:     // just use jitstats.tbl here
19601:     f("recorderStarted");
19601:     f("recorderAborted");
19601:     f("traceCompleted");
19601:     f("sideExitIntoInterpreter");
23715:     f("timeoutIntoInterpreter");
19601:     f("typeMapMismatchAtEntry");
19601:     f("returnToDifferentLoopHeader");
19601:     f("traceTriggered");
19601:     f("globalShapeMismatchAtEntry");
19601:     f("treesTrashed");
19601:     f("slotPromoted");
19601:     f("unstableLoopVariable");
19601:     f("breakLoopExits");
19601:     f("returnLoopExits");
23715:     f("mergedLoopExits")
23715:     f("noCompatInnerTrees");
19601: }
19601: 
23917: var jitProps = {};
23917: jitstatHandler(function(prop) {
23917:                  jitProps[prop] = true;
23917:                });
23917: var hadJITstats = false;
23917: for (var p in jitProps)
23917:   hadJITstats = true;
23917: 
17913: function test(f)
17913: {
19592:   if (!testName || testName == f.name) {
23722:     var expectedJITstats = f.jitstats;
23917:     if (hadJITstats && expectedJITstats)
23722:     {
23722:       var expectedProps = {};
23722:       jitstatHandler(function(prop) {
23722:                        if (prop in expectedJITstats)
23722:                          expectedProps[prop] = true;
23722:                      });
23722:       for (var p in expectedJITstats)
23722:       {
23722:         if (!(p in expectedProps))
23917:           throw "Bad property in " + f.name + ".jitstats: " + p;
23722:       }
23722:     }
23722: 
19592:     // Collect our jit stats
19592:     var localJITstats = {};
23722:     jitstatHandler(function(prop) {
19601:                      localJITstats[prop] = tracemonkey[prop];
19601:                    });
23722:     check(f.name, f(), f.expected, localJITstats, expectedJITstats);
19592:   }
17913: }
17913: 
22620: function map_test(t, cases)
22620: {
22620:   for (var i = 0; i < cases.length; i++) {
22620:     function c() { return t(cases[i].input); }
22620:     c.expected = cases[i].expected;
22620:     c.name = t.name + "(" + uneval(cases[i].input) + ")";
22620:     test(c);
22620:   }
22620: }
22620: 
22622: // Use this function to compare expected and actual test results.
22622: // Types must match.
22622: // For numbers, treat NaN as matching NaN, distinguish 0 and -0, and
22622: // tolerate a certain degree of error for other values.
22622: //
22622: // These are the same criteria used by the tests in js/tests, except that
22622: // we distinguish 0 and -0.
22622: function close_enough(expected, actual)
22622: {
22622:   if (typeof expected != typeof actual)
22622:     return false;
22622:   if (typeof expected != 'number')
22622:     return actual == expected;
22622: 
22622:   // Distinguish NaN from other values.  Using x != x comparisons here
22622:   // works even if tests redefine isNaN.
22622:   if (actual != actual)
22622:     return expected != expected
22622:   if (expected != expected)
22622:     return false;
22622: 
22622:   // Tolerate a certain degree of error.
22622:   if (actual != expected)
22622:     return Math.abs(actual - expected) <= 1E-10;
22622: 
22622:   // Distinguish 0 and -0.
22622:   if (actual == 0)
22622:     return (1 / actual > 0) == (1 / expected > 0);
22622: 
22622:   return true;
22622: }
22622: 
19592: function check(desc, actual, expected, oldJITstats, expectedJITstats)
17380: {
22622:   if (close_enough(expected, actual)) {
19592:     var pass = true;
19601:     jitstatHandler(function(prop) {
19601:                      if (expectedJITstats && prop in expectedJITstats &&
19601:                          expectedJITstats[prop] !=
19601:                            tracemonkey[prop] - oldJITstats[prop]) {
19592:                        pass = false;
19592:                      }
19601:                    });
19592:     if (pass) {
17719:       passes.push(desc);
25896:       return print("TEST-PASS | trace-test.js |", desc);
17719:     }
19592:   }
17719:   fails.push(desc);
19592:   var expectedStats = "";
19601:   if (expectedJITstats) {
19601:       jitstatHandler(function(prop) {
19601:                        if (prop in expectedJITstats) {
19592:                          if (expectedStats)
19592:                            expectedStats += " ";
19601:                          expectedStats +=
19601:                            prop + ": " + expectedJITstats[prop];
19601:                        }
19601:                      });
19592:   }
19592:   var actualStats = "";
19601:   if (expectedJITstats) {
19601:       jitstatHandler(function(prop) {
19601:                        if (prop in expectedJITstats) {
19592:                          if (actualStats)
19592:                            actualStats += " ";
19601:                          actualStats += prop + ": " + (tracemonkey[prop]-oldJITstats[prop]);
19601:                        }
19601:                      });
19592:   }
25896:   print("TEST-UNEXPECTED-FAIL | trace-test.js |", desc, ": expected", typeof(expected),
22621:         "(", uneval(expected), ")",
19592:         (expectedStats ? " [" + expectedStats + "] " : ""),
19592:         "!= actual",
22621:         typeof(actual), "(", uneval(actual), ")",
19592:         (actualStats ? " [" + actualStats + "] " : ""));
17380: }
17380: 
17380: function ifInsideLoop()
17380: {
17749:   var cond = true, intCond = 5, count = 0;
17749:   for (var i = 0; i < 100; i++) {
17380:     if (cond)
17380:       count++;
17749:     if (intCond)
17749:       count++;
17380:   }
17380:   return count;
17380: }
17913: ifInsideLoop.expected = 200;
17913: test(ifInsideLoop);
17380: 
17913: function bitwiseAnd_inner(bitwiseAndValue) {
17501:   for (var i = 0; i < 60000; i++)
17380:     bitwiseAndValue = bitwiseAndValue & i;
17380:   return bitwiseAndValue;
17380: }
17913: function bitwiseAnd()
17913: {
17913:   return bitwiseAnd_inner(12341234);
17913: }
17913: bitwiseAnd.expected = 0;
17913: test(bitwiseAnd);
17380: 
17913: if (!testName || testName == "bitwiseGlobal") {
17551:   bitwiseAndValue = Math.pow(2,32);
17551:   for (var i = 0; i < 60000; i++)
17551:     bitwiseAndValue = bitwiseAndValue & i;
17913:   check("bitwiseGlobal", bitwiseAndValue, 0);
17913: }
17913: 
17551: 
17380: function equalInt()
17380: {
18082:   var i1 = 55, one = 1, zero = 0, undef;
18074:   var o1 = { }, o2 = { };
18082:   var s = "5";
18082:   var hits = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
17380:   for (var i = 0; i < 5000; i++) {
17644:     if (i1 == 55) hits[0]++;
17644:     if (i1 != 56) hits[1]++;
17644:     if (i1 < 56)  hits[2]++;
17644:     if (i1 > 50)  hits[3]++;
17644:     if (i1 <= 60) hits[4]++;
17644:     if (i1 >= 30) hits[5]++;
17644:     if (i1 == 7)  hits[6]++;
17644:     if (i1 != 55) hits[7]++;
17644:     if (i1 < 30)  hits[8]++;
17644:     if (i1 > 90)  hits[9]++;
17644:     if (i1 <= 40) hits[10]++;
17644:     if (i1 >= 70) hits[11]++;
18074:     if (o1 == o2) hits[12]++;
18074:     if (o2 != null) hits[13]++;
18082:     if (s < 10) hits[14]++;
18082:     if (true < zero) hits[15]++;
18082:     if (undef > one) hits[16]++;
18082:     if (undef < zero) hits[17]++;
17380:   }
17644:   return hits.toString();
17380: }
18082: equalInt.expected = "5000,5000,5000,5000,5000,5000,0,0,0,0,0,0,0,5000,5000,0,0,0";
17913: test(equalInt);
17644: 
17913: var a;
17913: function setelem()
17537: {
17913:   a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
17913:   a = a.concat(a, a, a);
17537:   var l = a.length;
17537:   for (var i = 0; i < l; i++) {
17537:     a[i] = i;
17537:   }
17644:   return a.toString();
17537: }
17913: setelem.expected = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83";
17913: test(setelem);
17537: 
17913: function getelem_inner(a)
17537: {
17537:   var accum = 0;
17537:   var l = a.length;
17537:   for (var i = 0; i < l; i++) {
17537:     accum += a[i];
17537:   }
17537:   return accum;
17537: }
17913: function getelem()
17913: {
17913:   return getelem_inner(a);
17913: }
17913: getelem.expected = 3486;
17913: test(getelem);
17537: 
17537: globalName = 907;
17537: function name()
17537: {
17537:   var a = 0;
17537:   for (var i = 0; i < 100; i++)
17537:     a = globalName;
17537:   return a;
17537: }
17913: name.expected = 907;
17913: test(name);
17537: 
17578: var globalInt = 0;
17913: if (!testName || testName == "globalGet") {
17578:   for (var i = 0; i < 500; i++)
17578:     globalInt = globalName + i;
17913:   check("globalGet", globalInt, globalName + 499);
17913: }
17578: 
17913: if (!testName || testName == "globalSet") {
17578:   for (var i = 0; i < 500; i++)
17578:     globalInt = i;
17913:   check("globalSet", globalInt, 499);
17913: }
17578: 
17537: function arith()
17537: {
17537:   var accum = 0;
17537:   for (var i = 0; i < 100; i++) {
17537:     accum += (i * 2) - 1;
17537:   }
17537:   return accum;
17537: }
17913: arith.expected = 9800;
17913: test(arith);
17537: 
17913: function lsh_inner(n)
17537: {
17537:   var r;
17537:   for (var i = 0; i < 35; i++)
17537:     r = 0x1 << n;
17537:   return r;
17537: }
22620: map_test (lsh_inner,
22620:           [{input: 15, expected: 32768},
22620:            {input: 55, expected: 8388608},
22620:            {input: 1,  expected: 2},
22620:            {input: 0,  expected: 1}]);
17537: 
17913: function rsh_inner(n)
17537: {
17537:   var r;
17537:   for (var i = 0; i < 35; i++)
17537:     r = 0x11010101 >> n;
17537:   return r;
17537: }
22620: map_test (rsh_inner,
22620:           [{input: 8,  expected: 1114369},
22620:            {input: 5,  expected: 8914952},
22620:            {input: 35, expected: 35659808},
22620:            {input: -1, expected: 0}]);
17537: 
17913: function ursh_inner(n)
17537: {
17537:   var r;
17537:   for (var i = 0; i < 35; i++)
17537:     r = -55 >>> n;
17537:   return r;
17537: }
22620: map_test (ursh_inner,
22620:           [{input: 8,  expected: 16777215},
22620:            {input: 33, expected: 2147483620},
22620:            {input: 0,  expected: 4294967241},
22620:            {input: 1,  expected: 2147483620}]);
17628: 
17913: function doMath_inner(cos)
17634: {
17634:     var s = 0;
17685:     var sin = Math.sin;
17634:     for (var i = 0; i < 200; i++)
17685:         s = -Math.pow(sin(i) + cos(i * 0.75), 4);
17634:     return s;
17634: }
17913: function doMath() {
17913:   return doMath_inner(Math.cos);
17913: }
17913: doMath.expected = -0.5405549555611059;
17913: test(doMath);
17634: 
17913: function fannkuch() {
17913:    var count = Array(8);
17913:    var r = 8;
17628:    var done = 0;
17628:    while (done < 40) {
17628:       // write-out the first 30 permutations
17628:       done += r;
17628:       while (r != 1) { count[r - 1] = r; r--; }
17628:       while (true) {
17628:          count[r] = count[r] - 1;
17628:          if (count[r] > 0) break;
17628:          r++;
17628:       }
17628:    }
17628:    return done;
17628: }
17913: fannkuch.expected = 41;
17913: test(fannkuch);
17628: 
17665: function xprop()
17665: {
17665:   a = 0;
17665:   for (var i = 0; i < 20; i++)
17665:     a += 7;
17665:   return a;
17665: }
17913: xprop.expected = 140;
17913: test(xprop);
17665: 
17682: var a = 2;
17913: function getprop_inner(o2)
17665: {
17665:   var o = {a:5};
17682:   var t = this;
17665:   var x = 0;
17682:   for (var i = 0; i < 20; i++) {
17682:     t = this;
17682:     x += o.a + o2.a + this.a + t.a;
17682:   }
17665:   return x;
17665: }
17913: function getprop() {
17913:   return getprop_inner({a:9});
17913: }
17913: getprop.expected = 360;
17913: test(getprop);
17683: 
17683: function mod()
17683: {
17683:   var mods = [-1,-1,-1,-1];
17683:   var a = 9.5, b = -5, c = 42, d = (1/0);
17683:   for (var i = 0; i < 20; i++) {
17683:     mods[0] = a % b;
17683:     mods[1] = b % 1;
17683:     mods[2] = c % d;
17683:     mods[3] = c % a;
17683:     mods[4] = b % 0;
17683:   }
17683:   return mods.toString();
17683: }
17913: mod.expected = "4.5,0,42,4,NaN";
17913: test(mod);
17691: 
17697: function glob_f1() {
17692:   return 1;
17692: }
17697: function glob_f2() {
17697:   return glob_f1();
17697: }
17691: function call()
17691: {
17703:   var q1 = 0, q2 = 0, q3 = 0, q4 = 0, q5 = 0;
17694:   var o = {};
17691:   function f1() {
17691:       return 1;
17691:   }
17691:   function f2(f) {
17703:       return f();
17697:   }
17694:   o.f = f1;
17691:   for (var i = 0; i < 100; ++i) {
17691:       q1 += f1();
17691:       q2 += f2(f1);
17697:       q3 += glob_f1();
17694:       q4 += o.f();
17703:       q5 += glob_f2();
17691:   }
22620:   var ret = String([q1, q2, q3, q4, q5]);
17691:   return ret;
17691: }
17913: call.expected =  "100,100,100,100,100";
17913: test(call);
17719: 
17721: function setprop()
17721: {
17721:   var obj = { a:-1 };
17721:   var obj2 = { b:-1, a:-1 };
17721:   for (var i = 0; i < 20; i++) {
17721:     obj2.b = obj.a = i;
17721:   }
17721:   return [obj.a, obj2.a, obj2.b].toString();
17721: }
17913: setprop.expected =  "19,-1,19";
17913: test(setprop);
17723: 
17750: function testif() {
17750:     var q = 0;
17750:     for (var i = 0; i < 100; i++) {
17750:         if ((i & 1) == 0)
17750:             q++;
17750:         else
17750:             q--;
17750:     }
17750:     return q;
17750: }
22620: testif.expected = 0;
17913: test(testif);
17750: 
18090: var globalinc = 0;
17761: function testincops(n) {
17761:   var i = 0, o = {p:0}, a = [0];
17913:   n = 100;
17761: 
17761:   for (i = 0; i < n; i++);
17761:   while (i-- > 0);
17761:   for (i = 0; i < n; ++i);
17761:   while (--i >= 0);
17761: 
18090:   for (o.p = 0; o.p < n; o.p++) globalinc++;
18090:   while (o.p-- > 0) --globalinc;
18090:   for (o.p = 0; o.p < n; ++o.p) ++globalinc;
18090:   while (--o.p >= 0) globalinc--;
17761: 
17761:   ++i; // set to 0
17761:   for (a[i] = 0; a[i] < n; a[i]++);
17761:   while (a[i]-- > 0);
17761:   for (a[i] = 0; a[i] < n; ++a[i]);
17761:   while (--a[i] >= 0);
17761: 
18090:   return [++o.p, ++a[i], globalinc].toString();
17761: }
18090: testincops.expected = "0,0,0";
17913: test(testincops);
17767: 
17836: function trees() {
17836:   var i = 0, o = [0,0,0];
17836:   for (i = 0; i < 100; ++i) {
17836:     if ((i & 1) == 0) o[0]++;
17836:     else if ((i & 2) == 0) o[1]++;
17836:     else o[2]++;
17836:   }
22620:   return String(o);
17836: }
17913: trees.expected = "50,25,25";
17913: test(trees);
17836: 
17847: function unboxint() {
17847:     var q = 0;
17847:     var o = [4];
17847:     for (var i = 0; i < 100; ++i)
17847:         q = o[0] << 1;
17847:     return q;
17847: }
22620: unboxint.expected = 8;
17913: test(unboxint);
17847: 
17870: function strings()
17870: {
17870:   var a = [], b = -1;
17895:   var s = "abcdefghij", s2 = "a";
17902:   var f = "f";
18017:   var c = 0, d = 0, e = 0, g = 0;
17870:   for (var i = 0; i < 10; i++) {
18077:     a[i] = (s.substring(i, i+1) + s[i] + String.fromCharCode(s2.charCodeAt(0) + i)).concat(i) + i;
17902:     if (s[i] == f)
17902:       c++;
17902:     if (s[i] != 'b')
17902:       d++;
18017:     if ("B" > s2)
18017:       g++; // f already used
18017:     if (s2 < "b")
18017:       e++;
17870:     b = s.length;
17870:   }
18017:   return a.toString() + b + c + d + e + g;
17870: }
18077: strings.expected = "aaa00,bbb11,ccc22,ddd33,eee44,fff55,ggg66,hhh77,iii88,jjj991019100";
17913: test(strings);
17870: 
18077: function dependentStrings()
18077: {
18077:   var a = [];
18077:   var t = "abcdefghijklmnopqrst";
18077:   for (var i = 0; i < 10; i++) {
18077:     var s = t.substring(2*i, 2*i + 2);
18077:     a[i] = s + s.length;
18077:   }
18077:   return a.join("");
18077: }
18077: dependentStrings.expected = "ab2cd2ef2gh2ij2kl2mn2op2qr2st2";
18077: test(dependentStrings);
18077: 
17910: function stringConvert()
17910: {
17910:   var a = [];
17910:   var s1 = "F", s2 = "1.3", s3 = "5";
17910:   for (var i = 0; i < 10; i++) {
17910:     a[0] = 1 >> s1;
17910:     a[1] = 10 - s2;
17910:     a[2] = 15 * s3;
17910:     a[3] = s3 | 32;
18082:     a[4] = s2 + 60;
17910:     // a[5] = 9 + s3;
17910:     // a[6] = -s3;
17910:     a[7] = s3 & "7";
17910:     // a[8] = ~s3;
17910:   }
17910:   return a.toString();
17910: }
18082: stringConvert.expected = "1,8.7,75,37,1.360,,,5";
17913: test(stringConvert);
17910: 
17942: function orTestHelper(a, b, n)
17942: {
17942:   var k = 0;
17942:   for (var i = 0; i < n; i++) {
17942:     if (a || b)
17942:       k += i;
17942:   }
17942:   return k;
17942: }
17942: 
18106: var orNaNTest1, orNaNTest2;
18106: 
18106: orNaNTest1 = new Function("return orTestHelper(NaN, NaN, 10);");
18106: orNaNTest1.name = 'orNaNTest1';
22620: orNaNTest1.expected = 0;
18106: orNaNTest2 = new Function("return orTestHelper(NaN, 1, 10);");
18106: orNaNTest2.name = 'orNaNTest2';
22620: orNaNTest2.expected = 45;
18106: test(orNaNTest1);
18106: test(orNaNTest2);
18106: 
17942: function andTestHelper(a, b, n)
17942: {
17942:   var k = 0;
17942:   for (var i = 0; i < n; i++) {
17942:     if (a && b)
17942:       k += i;
17942:   }
17942:   return k;
17942: }
17942: 
18017: if (!testName || testName == "truthies") {
17942:   (function () {
17942:      var opsies   = ["||", "&&"];
17945:      var falsies  = [null, undefined, false, NaN, 0, ""];
17945:      var truthies = [{}, true, 1, 42, 1/0, -1/0, "blah"];
17942:      var boolies  = [falsies, truthies];
17942: 
18017:      // The for each here should abort tracing, so that this test framework
18017:      // relies only on the interpreter while the orTestHelper and andTestHelper
18017:      //  functions get trace-JITed.
17942:      for each (var op in opsies) {
17942:        for (var i in boolies) {
17942:          for (var j in boolies[i]) {
17942:            var x = uneval(boolies[i][j]);
17942:            for (var k in boolies) {
17942:              for (var l in boolies[k]) {
17942:                var y = uneval(boolies[k][l]);
17942:                var prefix = (op == "||") ? "or" : "and";
17942:                var f = new Function("return " + prefix + "TestHelper(" + x + "," + y + ",10)");
17942:                f.name = prefix + "Test(" + x + "," + y + ")";
17942:                f.expected = eval(x + op + y) ? 45 : 0;
17942:                test(f);
17942:              }
17942:            }
17942:          }
17942:        }
17942:      }
17942:    })();
18017: }
17942: 
17961: function nonEmptyStack1Helper(o, farble) {
17961:     var a = [];
17961:     var j = 0;
17961:     for (var i in o)
17961:         a[j++] = i;
17968:     return a.join("");
17961: }
17961: 
17961: function nonEmptyStack1() {
17968:     return nonEmptyStack1Helper({a:1,b:2,c:3,d:4,e:5,f:6,g:7,h:8}, "hi");
17961: }
17961: 
17968: nonEmptyStack1.expected = "abcdefgh";
17968: test(nonEmptyStack1);
17961: 
17961: function nonEmptyStack2()
17953: {
17953:   var a = 0;
17953:   for (var c in {a:1, b:2, c:3}) {
17953:     for (var i = 0; i < 10; i++)
17953:       a += i;
17953:   }
17953:   return String(a);
17953: }
17961: nonEmptyStack2.expected = "135";
17961: test(nonEmptyStack2);
17953: 
17971: function arityMismatchMissingArg(arg)
17971: {
17971:   for (var a = 0, i = 1; i < 10000; i *= 2) {
17971:     a += i;
17971:   }
17971:   return a;
17971: }
17971: arityMismatchMissingArg.expected = 16383;
17971: test(arityMismatchMissingArg);
17971: 
17971: function arityMismatchExtraArg()
17971: {
17971:   return arityMismatchMissingArg(1, 2);
17971: }
17971: arityMismatchExtraArg.expected = 16383;
17971: test(arityMismatchExtraArg);
17971: 
18001: function MyConstructor(i)
18001: {
18001:   this.i = i;
18001: }
18001: MyConstructor.prototype.toString = function() {return this.i + ""};
18001: 
18021: function newTest()
18001: {
18001:   var a = [];
18001:   for (var i = 0; i < 10; i++)
18001:     a[i] = new MyConstructor(i);
18001:   return a.join("");
18001: }
18021: newTest.expected = "0123456789";
18021: test(newTest);
18001: 
18031: // The following functions use a delay line of length 2 to change the value
18031: // of the callee without exiting the traced loop. This is obviously tuned to
18031: // match the current HOTLOOP setting of 2.
18031: function shapelessArgCalleeLoop(f, g, h, a)
18003: {
18031:   for (var i = 0; i < 10; i++) {
18003:     f(i, a);
18031:     f = g;
18031:     g = h;
18031:   }
18003: }
18003: 
18031: function shapelessVarCalleeLoop(f0, g, h, a)
18003: {
18031:   var f = f0;
18031:   for (var i = 0; i < 10; i++) {
18031:     f(i, a);
18031:     f = g;
18031:     g = h;
18031:   }
18003: }
18003: 
18031: function shapelessLetCalleeLoop(f0, g, h, a)
18003: {
18003:   for (var i = 0; i < 10; i++) {
18031:     let f = f0;
18031:     f(i, a);
18031:     f = g;
18031:     g = h;
18003:   }
18003: }
18003: 
18031: function shapelessUnknownCalleeLoop(n, f, g, h, a)
18003: {
18003:   for (var i = 0; i < 10; i++) {
18031:     (n || f)(i, a);
18031:     f = g;
18031:     g = h;
18003:   }
18003: }
18003: 
18021: function shapelessCalleeTest()
18003: {
18003:   var a = [];
18031: 
18031:   var helper = function (i, a) a[i] = i;
18031:   shapelessArgCalleeLoop(helper, helper, function (i, a) a[i] = -i, a);
18031: 
18031:   helper = function (i, a) a[10 + i] = i;
18031:   shapelessVarCalleeLoop(helper, helper, function (i, a) a[10 + i] = -i, a);
18031: 
18031:   helper = function (i, a) a[20 + i] = i;
18031:   shapelessLetCalleeLoop(helper, helper, function (i, a) a[20 + i] = -i, a);
18031: 
18031:   helper = function (i, a) a[30 + i] = i;
18031:   shapelessUnknownCalleeLoop(null, helper, helper, function (i, a) a[30 + i] = -i, a);
18031: 
18003:   try {
18031:     helper = {hack: 42};
18031:     shapelessUnknownCalleeLoop(null, helper, helper, helper, a);
18003:   } catch (e) {
18109:     if (e + "" != "TypeError: f is not a function")
18021:       print("shapelessUnknownCalleeLoop: unexpected exception " + e);
18003:   }
18003:   return a.join("");
18003: }
18031: shapelessCalleeTest.expected = "01-2-3-4-5-6-7-8-901-2-3-4-5-6-7-8-9012345678901-2-3-4-5-6-7-8-9";
18021: test(shapelessCalleeTest);
18003: 
18019: function typeofTest()
18019: {
18019:   var values = ["hi", "hi", "hi", null, 5, 5.1, true, undefined, /foo/, typeofTest, [], {}], types = [];
18019:   for (var i = 0; i < values.length; i++)
18019:     types[i] = typeof values[i];
18019:   return types.toString();
18019: }
18019: typeofTest.expected = "string,string,string,object,number,number,boolean,undefined,object,function,object,object";
18019: test(typeofTest);
18019: 
18029: function joinTest()
18029: {
18029:   var s = "";
18029:   var a = [];
18029:   for (var i = 0; i < 8; i++)
18029:     a[i] = [String.fromCharCode(97 + i)];
18029:   for (i = 0; i < 8; i++) {
18029:     for (var j = 0; j < 8; j++)
18029:       a[i][1 + j] = j;
18029:   }
18029:   for (i = 0; i < 8; i++)
18029:     s += a[i].join(",");
18029:   return s;
18029: }
18029: joinTest.expected = "a,0,1,2,3,4,5,6,7b,0,1,2,3,4,5,6,7c,0,1,2,3,4,5,6,7d,0,1,2,3,4,5,6,7e,0,1,2,3,4,5,6,7f,0,1,2,3,4,5,6,7g,0,1,2,3,4,5,6,7h,0,1,2,3,4,5,6,7";
18029: test(joinTest);
18029: 
18110: function arity1(x)
18110: {
18110:   return (x == undefined) ? 1 : 0;
18110: }
18110: function missingArgTest() {
18110:   var q;
18110:   for (var i = 0; i < 10; i++) {
18110:     q = arity1();
18110:   }
18110:   return q;
18110: }
22620: missingArgTest.expected = 1;
18110: test(missingArgTest);
18106: 
18125: JSON = function () {
18125:     return {
18125:         stringify: function stringify(value, whitelist) {
18125:             switch (typeof(value)) {
18125:               case "object":
18125:                 return value.constructor.name;
18125:             }
18125:         }
18125:     };
18125: }();
18125: 
18125: function missingArgTest2() {
18125:   var testPairs = [
18125:     ["{}", {}],
18125:     ["[]", []],
18125:     ['{"foo":"bar"}', {"foo":"bar"}],
18125:   ]
18125: 
18125:   var a = [];
18125:   for (var i=0; i < testPairs.length; i++) {
18125:     var s = JSON.stringify(testPairs[i][1])
18125:     a[i] = s;
18125:   }
18125:   return a.join(",");
18125: }
18125: missingArgTest2.expected = "Object,Array,Object";
18125: test(missingArgTest2);
18125: 
18126: function deepForInLoop() {
18126:   // NB: the number of props set in C is arefully tuned to match HOTLOOP = 2.
18126:   function C(){this.p = 1, this.q = 2}
18126:   C.prototype = {p:1, q:2, r:3, s:4, t:5};
18126:   var o = new C;
18126:   var j = 0;
18126:   var a = [];
18126:   for (var i in o)
18126:     a[j++] = i;
18126:   return a.join("");
18126: }
18126: deepForInLoop.expected = "pqrst";
18126: test(deepForInLoop);
18126: 
18157: function nestedExit(x) {
18157:     var q = 0;
18157:     for (var i = 0; i < 10; ++i)
23105:     {
18157:         if (x)
18157:             ++q;
18157:     }
23105: }
18157: function nestedExitLoop() {
18157:     for (var j = 0; j < 10; ++j)
18157:         nestedExit(j < 7);
18157:     return "ok";
18157: }
18157: nestedExitLoop.expected = "ok";
18157: test(nestedExitLoop);
18157: 
18166: function bitsinbyte(b) {
18166:     var m = 1, c = 0;
18166:     while(m<0x100) {
18166:         if(b & m) c++;
18166:         m <<= 1;
18166:     }
18166:     return 1;
18166: }
18166: function TimeFunc(func) {
18166:     var x,y;
18166:     for(var y=0; y<256; y++) func(y);
18166: }
18166: function nestedExit2() {
18166:     TimeFunc(bitsinbyte);
18166:     return "ok";
18166: }
18166: nestedExit2.expected = "ok";
18166: test(nestedExit2);
18166: 
18174: function parsingNumbers() {
18174:     var s1 = "123";
18174:     var s1z = "123zzz";
18174:     var s2 = "123.456";
18174:     var s2z = "123.456zzz";
18174: 
18174:     var e1 = 123;
18174:     var e2 = 123.456;
18174: 
18174:     var r1, r1z, r2, r2z;
18174: 
18174:     for (var i = 0; i < 10; i++) {
18174:         r1 = parseInt(s1);
18174:         r1z = parseInt(s1z);
18174:         r2 = parseFloat(s2);
18174:         r2z = parseFloat(s2z);
18174:     }
18174: 
18174:     if (r1 == e1 && r1z == e1 && r2 == e2 && r2z == e2)
18174:         return "ok";
18174:     return "fail";
18174: }
18174: parsingNumbers.expected = "ok";
18174: test(parsingNumbers);
18174: 
18190: function matchInLoop() {
18190:     var k = "hi";
18190:     for (var i = 0; i < 10; i++) {
18190:         var result = k.match(/hi/) != null;
18190:     }
18190:     return result;
18190: }
18190: matchInLoop.expected = true;
18190: test(matchInLoop);
18190: 
22658: function testMatchAsCondition() {
22658:     var a = ['0', '0', '0', '0'];
22658:     var r = /0/;
22658:     "x".q;
22658:     for (var z = 0; z < 4; z++)
22658:         a[z].match(r) ? 1 : 2;
22658: }
22658: test(testMatchAsCondition);
22658: 
18193: function deep1(x) {
18193:     if (x > 90)
18193:        return 1;
18193:     return 2;
18193: }
18193: function deep2() {
18193:     for (var i = 0; i < 100; ++i)
18193:         deep1(i);
18193:     return "ok";
18193: }
18193: deep2.expected = "ok";
18249: test(deep2);
18193: 
23448: function heavyFn1(i) { 
23448:     if (i == 3) {
23448: 	var x = 3;
23448:         return [0, i].map(function (i) i + x);
23448:     }
23448:     return [];
23448: }
23448: function testHeavy() {
23448:     for (var i = 0; i <= 3; i++)
23448:         heavyFn1(i);
23448: }
23448: test(testHeavy);
23448: 
23448: function heavyFn2(i) {
23448:     if (i < 1000)
23448:         return heavyFn1(i);
23448:     return function () i;
23448: }
23448: function testHeavy2() {
23448:     for (var i = 0; i <= 3; i++)
23448:         heavyFn2(i);
23448: }
23448: test(testHeavy2);
23448: 
18199: var merge_type_maps_x = 0, merge_type_maps_y = 0;
18199: function merge_type_maps() {
18199:     for (merge_type_maps_x = 0; merge_type_maps_x < 50; ++merge_type_maps_x)
18199:         if ((merge_type_maps_x & 1) == 1)
18199:             ++merge_type_maps_y;
18199:     return [merge_type_maps_x,merge_type_maps_y].join(",");
18199: }
18199: merge_type_maps.expected = "50,25";
18248: test(merge_type_maps)
18199: 
18250: function inner_double_outer_int() {
18250:     function f(i) {
18250:         for (var m = 0; m < 20; ++m)
18250:             for (var n = 0; n < 100; n += i)
18250:                 ;
18250:         return n;
18250:     }
18250:     return f(.5);
18250: }
22620: inner_double_outer_int.expected = 100;
18250: test(inner_double_outer_int);
18250: 
18300: function newArrayTest()
18300: {
18300:   var a = [];
18300:   for (var i = 0; i < 10; i++)
18300:     a[i] = new Array();
18300:   return a.map(function(x) x.length).toString();
18300: }
18300: newArrayTest.expected="0,0,0,0,0,0,0,0,0,0";
18300: test(newArrayTest);
18300: 
18319: function stringSplitTest()
18319: {
18319:   var s = "a,b"
18319:   var a = null;
18319:   for (var i = 0; i < 10; ++i)
18319:     a = s.split(",");
18319:   return a.join();
18319: }
18319: stringSplitTest.expected="a,b";
18319: test(stringSplitTest);
18319: 
18319: function stringSplitIntoArrayTest()
18319: {
18319:   var s = "a,b"
18319:   var a = [];
18319:   for (var i = 0; i < 10; ++i)
18319:     a[i] = s.split(",");
18319:   return a.join();
18319: }
18319: stringSplitIntoArrayTest.expected="a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b";
18319: test(stringSplitIntoArrayTest);
18300: 
18426: function forVarInWith() {
18426:     function foo() ({notk:42});
18426:     function bar() ({p:1, q:2, r:3, s:4, t:5});
18426:     var o = foo();
18426:     var a = [];
18426:     with (o) {
18426:         for (var k in bar())
18426:             a[a.length] = k;
18426:     }
18426:     return a.join("");
18426: }
18426: forVarInWith.expected = "pqrst";
18426: test(forVarInWith);
18426: 
18495: function inObjectTest() {
18495:     var o = {p: 1, q: 2, r: 3, s: 4, t: 5};
18495:     var r = 0;
18495:     for (var i in o) {
18495:         if (!(i in o))
18495:             break;
18495:         if ((i + i) in o)
18495:             break;
18495:         ++r;
18495:     }
18495:     return r;
18495: }
18495: inObjectTest.expected = 5;
18495: test(inObjectTest);
18495: 
18495: function inArrayTest() {
18495:     var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
18495:     for (var i = 0; i < a.length; i++) {
18495:         if (!(i in a))
18495:             break;
18495:     }
18495:     return i;
18495: }
18495: inArrayTest.expected = 10;
18495: test(inArrayTest);
18495: 
18595: function innerLoopIntOuterDouble() {
18595:     var n = 10000, i=0, j=0, count=0, limit=0;
18595:     for (i = 1; i <= n; ++i) {
18595:         limit = i * 1;
18595:         for (j = 0; j < limit; ++j) {
18595:             ++count;
18595:         }
18595:     }
18595:     return "" + count;
18595: }
18595: innerLoopIntOuterDouble.expected="50005000";
18595: test(innerLoopIntOuterDouble);
18595: 
18600: function outerline(){
18600:     var i=0;
18600:     var j=0;
18600: 
18600:     for (i = 3; i<= 100000; i+=2)
23105:     {
18600:         for (j = 3; j < 1000; j+=2)
23105:         {
18600:             if ((i & 1) == 1)
18600:                 break;
23105:         }
23105:     }
18600:     return "ok";
18600: }
18600: outerline.expected="ok";
18600: test(outerline);
18600: 
18604: function addAccumulations(f) {
18604:   var a = f();
18604:   var b = f();
18604:   return a() + b();
18604: }
18604: 
18604: function loopingAccumulator() {
18604:   var x = 0;
18604:   return function () {
18604:     for (var i = 0; i < 10; ++i) {
18604:       ++x;
18604:     }
18604:     return x;
18604:   }
18604: }
18604: 
18604: function testLoopingAccumulator() {
18604:     var x = addAccumulations(loopingAccumulator);
18604:     return x;
18604: }
18604: testLoopingAccumulator.expected = 20;
18604: test(testLoopingAccumulator);
18604: 
18626: function testBranchingLoop() {
18626:   var x = 0;
18626:   for (var i=0; i < 100; ++i) {
18626:     if (i == 51) {
18626:       x += 10;
18626:     }
18626:     x++;
18626:   }
18626:   return x;
18626: }
18626: testBranchingLoop.expected = 110;
18626: test(testBranchingLoop);
18626: 
18626: function testBranchingUnstableLoop() {
18626:   var x = 0;
18626:   for (var i=0; i < 100; ++i) {
18626:     if (i == 51) {
18626:       x += 10.1;
18626:     }
18626:     x++;
18626:   }
18626:   return x;
18626: }
18626: testBranchingUnstableLoop.expected = 110.1;
18626: test(testBranchingUnstableLoop);
18626: 
18626: function testBranchingUnstableLoopCounter() {
18626:   var x = 0;
18626:   for (var i=0; i < 100; ++i) {
18626:     if (i == 51) {
18626:       i += 1.1;
18626:     }
18626:     x++;
18626:   }
18626:   return x;
18626: }
18626: testBranchingUnstableLoopCounter.expected = 99;
18626: test(testBranchingUnstableLoopCounter);
18626: 
18626: 
18626: function testBranchingUnstableObject() {
18626:   var x = {s: "a"};
18626:   var t = "";
18626:   for (var i=0; i < 100; ++i) {
18626:       if (i == 51)
18626:       {
18626:         x.s = 5;
18626:       }
18626:       t += x.s;
18626:   }
18626:   return t.length;
18626: }
18626: testBranchingUnstableObject.expected = 100;
18626: test(testBranchingUnstableObject);
18626: 
18626: function testArrayDensityChange() {
18626:   var x = [];
18626:   var count = 0;
18626:   for (var i=0; i < 100; ++i) {
18626:     x[i] = "asdf";
18626:   }
18626:   for (var i=0; i < x.length; ++i) {
18626:       if (i == 51)
18626:       {
18626:         x[199] = "asdf";
18626:       }
18626:       if (x[i])
18626:         count += x[i].length;
18626:   }
18626:   return count;
18626: }
18626: testArrayDensityChange.expected = 404;
18626: test(testArrayDensityChange);
18626: 
18628: function testDoubleToStr() {
18628:     var x = 0.0;
18628:     var y = 5.5;
18628:     for (var i = 0; i < 200; i++) {
18628:        x += parseFloat(y.toString());
18628:     }
18628:     return x;
18628: }
18628: testDoubleToStr.expected = 5.5*200;
18628: test(testDoubleToStr);
18628: 
20409: function testNumberToString() {
20409:     var x = new Number(0);
20409:     for (var i = 0; i < 4; i++)
20409:         x.toString();
20409: }
20409: test(testNumberToString);
20409: 
18631: function testDecayingInnerLoop() {
18631:     var i, j, k = 10;
18631:     for (i = 0; i < 5000; ++i) {
18631:         for (j = 0; j < k; ++j);
18631:             --k;
18631:     }
18631:     return i;
18631: }
18631: testDecayingInnerLoop.expected = 5000;
18631: test(testDecayingInnerLoop);
18631: 
18690: function testContinue() {
18690:     var i;
18690:     var total = 0;
18690:     for (i = 0; i < 20; ++i) {
18690:         if (i == 11)
18690:             continue;
18690:         total++;
18690:     }
18690:     return total;
18690: }
18690: testContinue.expected = 19;
18690: test(testContinue);
18690: 
18690: function testContinueWithLabel() {
18690:     var i = 0;
18690:     var j = 20;
18690:     checkiandj :
18690:     while (i < 10) {
18690:         i += 1;
18690:         checkj :
18690:         while (j > 10) {
18690:             j -= 1;
18690:             if ((j % 2) == 0)
18690:             continue checkj;
18690:         }
18690:     }
18690:     return i + j;
18690: }
18690: testContinueWithLabel.expected = 20;
18690: test(testContinueWithLabel);
18690: 
18691: function testDivision() {
18691:     var a = 32768;
18691:     var b;
18691:     while (b !== 1) {
18691:         b = a / 2;
18691:         a = b;
18691:     }
18691:     return a;
18691: }
18691: testDivision.expected = 1;
18691: test(testDivision);
18691: 
18691: function testDivisionFloat() {
18691:     var a = 32768.0;
18691:     var b;
18691:     while (b !== 1) {
18691:         b = a / 2.0;
18691:         a = b;
18691:     }
18691:     return a === 1.0;
18691: }
18691: testDivisionFloat.expected = true;
18691: test(testDivisionFloat);
18691: 
18703: function testToUpperToLower() {
18703:     var s = "Hello", s1, s2;
18703:     for (i = 0; i < 100; ++i) {
18703:         s1 = s.toLowerCase();
18703:         s2 = s.toUpperCase();
18703:     }
18703:     return s1 + s2;
18703: }
18703: testToUpperToLower.expected = "helloHELLO";
18703: test(testToUpperToLower);
18703: 
18703: function testReplace2() {
18703:     var s = "H e l l o", s1;
23105:     for (i = 0; i < 100; ++i)
18703:         s1 = s.replace(" ", "");
18703:     return s1;
18703: }
18703: testReplace2.expected = "He l l o";
18703: test(testReplace2);
18703: 
18710: function testBitwise() {
18710:     var x = 10000;
18710:     var y = 123456;
18710:     var z = 987234;
18710:     for (var i = 0; i < 50; i++) {
18710:         x = x ^ y;
18710:         y = y | z;
18710:         z = ~x;
18710:     }
18710:     return x + y + z;
18710: }
18710: testBitwise.expected = -1298;
18710: test(testBitwise);
18710: 
18711: function testSwitch() {
18711:     var x = 0;
18711:     var ret = 0;
18711:     for (var i = 0; i < 100; ++i) {
18711:         switch (x) {
18711:             case 0:
18711:                 ret += 1;
18711:                 break;
18711:             case 1:
18711:                 ret += 2;
18711:                 break;
18711:             case 2:
18711:                 ret += 3;
18711:                 break;
18711:             case 3:
18711:                 ret += 4;
18711:                 break;
18711:             default:
18711:                 x = 0;
18711:         }
18711:         x++;
18711:     }
18711:     return ret;
18711: }
18711: testSwitch.expected = 226;
18711: test(testSwitch);
18711: 
18711: function testSwitchString() {
18711:     var x = "asdf";
18711:     var ret = 0;
18711:     for (var i = 0; i < 100; ++i) {
18711:         switch (x) {
18711:         case "asdf":
18711:             x = "asd";
18711:             ret += 1;
18711:             break;
18711:         case "asd":
18711:             x = "as";
18711:             ret += 2;
18711:             break;
18711:         case "as":
18711:             x = "a";
18711:             ret += 3;
18711:             break;
18711:         case "a":
18711:             x = "foo";
18711:             ret += 4;
18711:             break;
18711:         default:
18711:             x = "asdf";
18711:         }
18711:     }
18711:     return ret;
18711: }
18711: testSwitchString.expected = 200;
18711: test(testSwitchString);
18711: 
18787: function testNegZero1Helper(z) {
18787:     for (let j = 0; j < 5; ++j) { z = -z; }
18787:     return Math.atan2(0, -0) == Math.atan2(0, z);
18787: }
18787: 
18787: var testNegZero1 = function() { return testNegZero1Helper(0); }
18787: testNegZero1.expected = true;
18787: testNegZero1.name = 'testNegZero1';
18787: testNegZero1Helper(1);
18787: test(testNegZero1);
18787: 
19041: // No test case, just make sure this doesn't assert.
18787: function testNegZero2() {
18787:     var z = 0;
18787:     for (let j = 0; j < 5; ++j) { ({p: (-z)}); }
18787: }
18787: testNegZero2();
18711: 
19044: function testConstSwitch() {
19044:     var x;
19044:     for (var j=0;j<5;++j) { switch(1.1) { case NaN: case 2: } x = 2; }
19044:     return x;
19044: }
19044: testConstSwitch.expected = 2;
19044: test(testConstSwitch);
19044: 
19604: function testConstSwitch2() {
19604:     var x;
19604:     for (var j = 0; j < 4; ++j) { switch(0/0) { } }
19604:     return "ok";
19604: }
19604: testConstSwitch2.expected = "ok";
19604: test(testConstSwitch2);
19604: 
19044: function testConstIf() {
19044:     var x;
19044:     for (var j=0;j<5;++j) { if (1.1 || 5) { } x = 2;}
19044:     return x;
19044: }
19044: testConstIf.expected = 2;
19044: test(testConstIf);
19044: 
19053: function testTypeofHole() {
19053:   var a = new Array(6);
19053:   a[5] = 3;
19053:   for (var i = 0; i < 6; ++i)
19053:     a[i] = typeof a[i];
19083:   return a.join(",");
19053: }
19053: testTypeofHole.expected = "undefined,undefined,undefined,undefined,undefined,number"
19053: test(testTypeofHole);
19053: 
19055: function testNativeLog() {
19055:   var a = new Array(5);
19055:   for (var i = 0; i < 5; i++) {
19055:     a[i] = Math.log(Math.pow(Math.E, 10));
19055:   }
19055:   return a.join(",");
19055: }
19055: testNativeLog.expected = "10,10,10,10,10";
19055: test(testNativeLog);
19055: 
19068: function test_JSOP_ARGSUB() {
19068:     function f0() { return arguments[0]; }
19068:     function f1() { return arguments[1]; }
19068:     function f2() { return arguments[2]; }
19068:     function f3() { return arguments[3]; }
19068:     function f4() { return arguments[4]; }
19068:     function f5() { return arguments[5]; }
19068:     function f6() { return arguments[6]; }
19068:     function f7() { return arguments[7]; }
19068:     function f8() { return arguments[8]; }
19068:     function f9() { return arguments[9]; }
19068:     var a = [];
19068:     for (var i = 0; i < 10; i++) {
19068:         a[0] = f0('a');
19068:         a[1] = f1('a','b');
19068:         a[2] = f2('a','b','c');
19068:         a[3] = f3('a','b','c','d');
19068:         a[4] = f4('a','b','c','d','e');
19068:         a[5] = f5('a','b','c','d','e','f');
19068:         a[6] = f6('a','b','c','d','e','f','g');
19068:         a[7] = f7('a','b','c','d','e','f','g','h');
19068:         a[8] = f8('a','b','c','d','e','f','g','h','i');
19068:         a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19068:     }
19068:     return a.join("");
19068: }
19068: test_JSOP_ARGSUB.expected = "abcdefghij";
19068: test(test_JSOP_ARGSUB);
19068: 
19068: function test_JSOP_ARGCNT() {
19068:     function f0() { return arguments.length; }
19068:     function f1() { return arguments.length; }
19068:     function f2() { return arguments.length; }
19068:     function f3() { return arguments.length; }
19068:     function f4() { return arguments.length; }
19068:     function f5() { return arguments.length; }
19068:     function f6() { return arguments.length; }
19068:     function f7() { return arguments.length; }
19068:     function f8() { return arguments.length; }
19068:     function f9() { return arguments.length; }
19068:     var a = [];
19068:     for (var i = 0; i < 10; i++) {
19068:         a[0] = f0('a');
19068:         a[1] = f1('a','b');
19068:         a[2] = f2('a','b','c');
19068:         a[3] = f3('a','b','c','d');
19068:         a[4] = f4('a','b','c','d','e');
19068:         a[5] = f5('a','b','c','d','e','f');
19068:         a[6] = f6('a','b','c','d','e','f','g');
19068:         a[7] = f7('a','b','c','d','e','f','g','h');
19068:         a[8] = f8('a','b','c','d','e','f','g','h','i');
19068:         a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19068:     }
19068:     return a.join(",");
19068: }
19068: test_JSOP_ARGCNT.expected = "1,2,3,4,5,6,7,8,9,10";
19068: test(test_JSOP_ARGCNT);
19068: 
19083: function testNativeMax() {
19083:     var out = [], k;
19083:     for (var i = 0; i < 5; ++i) {
19083:         k = Math.max(k, i);
19083:     }
19083:     out.push(k);
19083: 
19083:     k = 0;
19083:     for (var i = 0; i < 5; ++i) {
19083:         k = Math.max(k, i);
19083:     }
19083:     out.push(k);
19083: 
19083:     for (var i = 0; i < 5; ++i) {
19083:         k = Math.max(0, -0);
19083:     }
19083:     out.push((1 / k) < 0);
19083:     return out.join(",");
19083: }
19083: testNativeMax.expected = "NaN,4,false";
19083: test(testNativeMax);
19083: 
19547: function testFloatArrayIndex() {
19547:     var a = [];
19547:     for (var i = 0; i < 10; ++i) {
19547:         a[3] = 5;
19547:         a[3.5] = 7;
19547:     }
19547:     return a[3] + "," + a[3.5];
19547: }
19547: testFloatArrayIndex.expected = "5,7";
19547: test(testFloatArrayIndex);
19547: 
19550: function testStrict() {
19550:     var n = 10, a = [];
19550:     for (var i = 0; i < 10; ++i) {
19550:         a[0] = (n === 10);
19550:         a[1] = (n !== 10);
19550:         a[2] = (n === null);
19550:         a[3] = (n == null);
19550:     }
19550:     return a.join(",");
19550: }
19550: testStrict.expected = "true,false,false,false";
19550: test(testStrict);
19550: 
19566: function testSetPropNeitherMissNorHit() {
19566:     for (var j = 0; j < 5; ++j) { if (({}).__proto__ = 1) { } }
19566:     return "ok";
19566: }
19566: testSetPropNeitherMissNorHit.expected = "ok";
19566: test(testSetPropNeitherMissNorHit);
19566: 
19572: function testPrimitiveConstructorPrototype() {
19572:     var f = function(){};
19572:     f.prototype = false;
19572:     for (let j=0;j<5;++j) { new f; }
19572:     return "ok";
19572: }
19572: testPrimitiveConstructorPrototype.expected = "ok";
19572: test(testPrimitiveConstructorPrototype);
19572: 
19577: function testSideExitInConstructor() {
19577:     var FCKConfig = {};
19577:     FCKConfig.CoreStyles =
19577:     {
19577:         'Bold': { },
19577:         'Italic': { },
19577:         'FontFace': { },
19577:         'Size' :
19577:         {
19577:         Overrides: [ ]
19577:         },
19577: 
19577:         'Color' :
19577:         {
19577:         Element: '',
19577:         Styles: {  },
19577:         Overrides: [  ]
19577:         },
19577:         'BackColor': {
19577:         Element : '',
19577:         Styles : { 'background-color' : '' }
19577:         },
19577: 
19577:     };
19577:     var FCKStyle = function(A) {
19577:         A.Element;
19577:     };
19577: 
19577:     var pass = true;
19577:     for (var s in FCKConfig.CoreStyles) {
19577:         var x = new FCKStyle(FCKConfig.CoreStyles[s]);
23105:         if (!x)
23105:             pass = false;
19577:     }
19577:     return pass;
19577: }
19577: testSideExitInConstructor.expected = true;
19577: test(testSideExitInConstructor);
19577: 
19580: function testNot() {
19580:     var a = new Object(), b = null, c = "foo", d = "", e = 5, f = 0, g = 5.5, h = -0, i = true, j = false, k = undefined;
19580:     var r;
23105:     for (var i = 0; i < 10; ++i)
19580:         r = [!a, !b, !c, !d, !e, !f, !g, !h, !i, !j, !k];
19580:     return r.join(",");
19580: }
19580: testNot.expected = "false,true,false,true,false,true,false,true,false,true,true";
19580: test(testNot);
19580: 
19579: function doTestDifferingArgc(a, b)
19579: {
19579:     var k = 0;
19579:     for (var i = 0; i < 10; i++)
19579:     {
19579:         k += i;
19579:     }
19579:     return k;
19579: }
19579: function testDifferingArgc()
19579: {
19579:     var x = 0;
19579:     x += doTestDifferingArgc(1, 2);
19579:     x += doTestDifferingArgc(1);
19579:     x += doTestDifferingArgc(1, 2, 3);
19579:     return x;
19579: }
19579: testDifferingArgc.expected = 45*3;
19579: test(testDifferingArgc);
19579: 
19579: function doTestMoreArgcThanNargs()
19579: {
19579:     var x = 0;
19579:     for (var i = 0; i < 10; i++)
19579:     {
19579:         x = x + arguments[3];
19579:     }
19579:     return x;
19579: }
19579: function testMoreArgcThanNargs()
19579: {
19579:     return doTestMoreArgcThanNargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
19579: }
19579: testMoreArgcThanNargs.expected = 4*10;
19579: test(testMoreArgcThanNargs);
19579: 
19591: // Test stack reconstruction after a nested exit
19595: function testNestedExitStackInner(j, counter) {
19591:   ++counter;
19591:   var b = 0;
19591:   for (var i = 1; i <= RUNLOOP; i++) {
19591:     ++b;
19591:     var a;
19591:     // Make sure that once everything has been traced we suddenly switch to
19591:     // a different control flow the first time we run the outermost tree,
19591:     // triggering a side exit.
19591:     if (j < RUNLOOP)
19591:       a = 1;
19591:     else
19591:       a = 0;
19591:     ++b;
19591:     b += a;
19591:   }
19591:   return counter + b;
19591: }
19595: function testNestedExitStackOuter() {
19591:   var counter = 0;
19591:   for (var j = 1; j <= RUNLOOP; ++j) {
19591:     for (var k = 1; k <= RUNLOOP; ++k) {
19591:       counter = testNestedExitStackInner(j, counter);
19591:     }
19591:   }
19591:   return counter;
19591: }
19591: testNestedExitStackOuter.expected = 81;
19601: testNestedExitStackOuter.jitstats = {
21433:     recorderStarted: 5,
25937:     recorderAborted: 1,
25937:     traceTriggered: 10
19601: };
19591: test(testNestedExitStackOuter);
19591: 
19595: function testHOTLOOPSize() {
19592:     return HOTLOOP > 1;
19592: }
19592: testHOTLOOPSize.expected = true;
19592: test(testHOTLOOPSize);
19592: 
19654: function testMatchStringObject() {
19654:     var a = new String("foo");
19654:     var b;
23105:     for (i = 0; i < 300; i++)
19654:         b = a.match(/bar/);
19654:     return b;
19654: }
19654: testMatchStringObject.expected = null;
19654: test(testMatchStringObject);
19654: 
19659: function innerSwitch(k)
19659: {
19659:     var m = 0;
19659: 
19659:     switch (k)
19659:     {
19659:     case 0:
19659:         m = 1;
19659:         break;
19659:     }
19659: 
19659:     return m;
19659: }
19659: function testInnerSwitchBreak()
19659: {
19659:     var r = new Array(5);
19659:     for (var i = 0; i < 5; i++)
19659:     {
19659:         r[i] = innerSwitch(0);
19659:     }
19659: 
19659:     return r.join(",");
19659: }
19659: testInnerSwitchBreak.expected = "1,1,1,1,1";
19659: test(testInnerSwitchBreak);
19659: 
19979: function testArrayNaNIndex()
19979: {
19979:     for (var j = 0; j < 4; ++j) { [this[NaN]]; }
19979:     for (var j = 0; j < 5; ++j) { if([1][-0]) { } }
19979:     return "ok";
19979: }
19979: testArrayNaNIndex.expected = "ok";
19979: test(testArrayNaNIndex);
19979: 
19982: function innerTestInnerMissingArgs(a,b,c,d)
19982: {
19982:         if (a) {
19982:         } else {
19982:         }
19982: }
19982: function doTestInnerMissingArgs(k)
19982: {
19982:     for (i = 0; i < 10; i++) {
19982:         innerTestInnerMissingArgs(k);
19982:     }
19982: }
19982: function testInnerMissingArgs()
19982: {
19982:     doTestInnerMissingArgs(1);
19982:     doTestInnerMissingArgs(0);
19982:     return 1;
19982: }
19982: testInnerMissingArgs.expected = 1;  //Expected: that we don't crash.
19982: test(testInnerMissingArgs);
19982: 
19986: function regexpLastIndex()
19986: {
19986:     var n = 0;
19986:     var re = /hi/g;
19986:     var ss = " hi hi hi hi hi hi hi hi hi hi";
19986:     for (var i = 0; i < 10; i++) {
19986:         // re.exec(ss);
19986:         n += (re.lastIndex > 0) ? 3 : 0;
19986:         re.lastIndex = 0;
19986:     }
19986:     return n;
19986: }
19986: regexpLastIndex.expected = 0; // 30;
19986: test(regexpLastIndex);
19986: 
19989: function testHOTLOOPCorrectness() {
19989:     var b = 0;
23105:     for (var i = 0; i < HOTLOOP; ++i)
19989:         ++b;
19989:     return b;
19989: }
19989: testHOTLOOPCorrectness.expected = HOTLOOP;
19989: testHOTLOOPCorrectness.jitstats = {
19989:     recorderStarted: 1,
19989:     recorderAborted: 0,
19989:     traceTriggered: 0
19989: };
19989: // Change the global shape right before doing the test
19989: this.testHOTLOOPCorrectnessVar = 1;
19989: test(testHOTLOOPCorrectness);
19989: 
19989: function testRUNLOOPCorrectness() {
19989:     var b = 0;
19989:     for (var i = 0; i < RUNLOOP; ++i) {
19989:     ++b;
19989:     }
19989:     return b;
19989: }
19989: testRUNLOOPCorrectness.expected = RUNLOOP;
19989: testRUNLOOPCorrectness.jitstats = {
19989:     recorderStarted: 1,
19989:     recorderAborted: 0,
19989:     traceTriggered: 1
19989: };
19989: // Change the global shape right before doing the test
19989: this.testRUNLOOPCorrectnessVar = 1;
19989: test(testRUNLOOPCorrectness);
19989: 
19993: function testDateNow() {
19990:     // Accessing global.Date for the first time will change the global shape,
19990:     // so do it before the loop starts; otherwise we have to loop an extra time
19990:     // to pick things up.
19990:     var time = Date.now();
23105:     for (var j = 0; j < RUNLOOP; ++j)
19990:         time = Date.now();
19990:     return "ok";
19990: }
19990: testDateNow.expected = "ok";
19990: testDateNow.jitstats = {
19990:     recorderStarted: 1,
19990:     recorderAborted: 0,
19990:     traceTriggered: 1
19990: };
19990: test(testDateNow);
19990: 
19993: function testINITELEM()
19993: {
19993:     var x;
19993:     for (var i = 0; i < 10; ++i)
19993:         x = { 0: 5, 1: 5 };
19993:     return x[0] + x[1];
19993: }
19993: testINITELEM.expected = 10;
19993: test(testINITELEM);
19993: 
19995: function testUndefinedBooleanCmp()
19995: {
19995:     var t = true, f = false, x = [];
19995:     for (var i = 0; i < 10; ++i) {
19995:         x[0] = t == undefined;
19995:         x[1] = t != undefined;
19995:         x[2] = t === undefined;
19995:         x[3] = t !== undefined;
19995:         x[4] = t < undefined;
19995:         x[5] = t > undefined;
19995:         x[6] = t <= undefined;
19995:         x[7] = t >= undefined;
19995:         x[8] = f == undefined;
19995:         x[9] = f != undefined;
19995:         x[10] = f === undefined;
19995:         x[11] = f !== undefined;
19995:         x[12] = f < undefined;
19995:         x[13] = f > undefined;
19995:         x[14] = f <= undefined;
19995:         x[15] = f >= undefined;
19995:     }
19995:     return x.join(",");
19995: }
19995: testUndefinedBooleanCmp.expected = "false,true,false,true,false,false,false,false,false,true,false,true,false,false,false,false";
19995: test(testUndefinedBooleanCmp);
19995: 
19999: function testConstantBooleanExpr()
19999: {
19999:     for (var j = 0; j < 3; ++j) { if(true <= true) { } }
19999:     return "ok";
19999: }
19999: testConstantBooleanExpr.expected = "ok";
19999: test(testConstantBooleanExpr);
19999: 
20000: function testNegativeGETELEMIndex()
20000: {
20000:     for (let i=0;i<3;++i) /x/[-4];
20000:     return "ok";
20000: }
20000: testNegativeGETELEMIndex.expected = "ok";
20000: test(testNegativeGETELEMIndex);
20000: 
20003: function doTestInvalidCharCodeAt(input)
20003: {
20003:     var q = "";
20003:     for (var i = 0; i < 10; i++)
20003:        q += input.charCodeAt(i);
20003:     return q;
20003: }
20003: function testInvalidCharCodeAt()
20003: {
20003:     return doTestInvalidCharCodeAt("");
20003: }
20003: testInvalidCharCodeAt.expected = "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN";
20003: test(testInvalidCharCodeAt);
20003: 
20392: function FPQuadCmp()
20392: {
20392:     for (let j = 0; j < 3; ++j) { true == 0; }
20392:     return "ok";
20392: }
20392: FPQuadCmp.expected = "ok";
20392: test(FPQuadCmp);
20392: 
20394: function testDestructuring() {
20394:     var t = 0;
20394:     for (var i = 0; i < HOTLOOP + 1; ++i) {
20394:         var [r, g, b] = [1, 1, 1];
20394:         t += r + g + b;
20394:     }
20394:     return t
20394: }
20394: testDestructuring.expected = (HOTLOOP + 1) * 3;
20394: test(testDestructuring);
20394: 
21464: function loopWithUndefined1(t, val) {
21464:     var a = new Array(6);
21464:     for (var i = 0; i < 6; i++)
21464:         a[i] = (t > val);
21464:     return a;
21464: }
21464: loopWithUndefined1(5.0, 2);     //compile version with val=int
21464: 
21464: function testLoopWithUndefined1() {
21464:     return loopWithUndefined1(5.0).join(",");  //val=undefined
21464: };
21464: testLoopWithUndefined1.expected = "false,false,false,false,false,false";
21464: test(testLoopWithUndefined1);
21464: 
21465: function loopWithUndefined2(t, dostuff, val) {
21465:     var a = new Array(6);
21465:     for (var i = 0; i < 6; i++) {
21465:         if (dostuff) {
21465:             val = 1;
21465:             a[i] = (t > val);
21465:         } else {
21465:             a[i] = (val == undefined);
21465:         }
21465:     }
21465:     return a;
21465: }
21465: function testLoopWithUndefined2() {
21465:     var a = loopWithUndefined2(5.0, true, 2);
21465:     var b = loopWithUndefined2(5.0, true);
21465:     var c = loopWithUndefined2(5.0, false, 8);
21465:     var d = loopWithUndefined2(5.0, false);
21465:     return [a[0], b[0], c[0], d[0]].join(",");
21465: }
21465: testLoopWithUndefined2.expected = "true,true,false,true";
21465: test(testLoopWithUndefined2);
21465: 
21472: //test no multitrees assert
21468: function testBug462388() {
21468:     var c = 0, v; for each (let x in ["",v,v,v]) { for (c=0;c<4;++c) { } }
21468:     return true;
21468: }
21468: testBug462388.expected = true;
21468: test(testBug462388);
21468: 
21472: //test no multitrees assert
21472: function testBug462407() {
21472:     for each (let i in [0, {}, 0, 1.5, {}, 0, 1.5, 0, 0]) { }
21472:     return true;
21472: }
21472: testBug462407.expected = true;
21472: test(testBug462407);
21472: 
21519: //test no multitrees assert
21519: function testBug463490() {
21519:     function f(a, b, d) {
21519:         for (var i = 0; i < 10; i++) {
21519:             if (d)
21519:                 b /= 2;
21519:         }
21519:         return a + b;
21519:     }
21519:     //integer stable loop
21519:     f(2, 2, false);
21519:     //double stable loop
21519:     f(3, 4.5, false);
21519:     //integer unstable branch
21519:     f(2, 2, true);
21519:     return true;
21519: };
21519: testBug463490.expected = true;
21519: test(testBug463490);
21519: 
21684: // Test no assert (bug 464089)
21684: function shortRecursiveLoop(b, c) {
21684:     for (var i = 0; i < c; i++) {
21684:         if (b)
21684:             shortRecursiveLoop(c - 1);
21684:     }
21684: }
21684: function testClosingRecursion() {
21684:     shortRecursiveLoop(false, 1);
21684:     shortRecursiveLoop(true, 3);
21684:     return true;
21684: }
21684: testClosingRecursion.expected = true;
21684: test(testClosingRecursion);
21684: 
21767: // Test no assert or crash from outer recorders (bug 465145)
21767: function testBug465145() {
21767:     this.__defineSetter__("x", function(){});
21767:     this.watch("x", function(){});
21767:     y = this;
21767:     for (var z = 0; z < 2; ++z) { x = y };
21767:     this.__defineSetter__("x", function(){});
21767:     for (var z = 0; z < 2; ++z) { x = y };
21767: }
21767: 
21781: function testTrueShiftTrue() {
21781:     var a = new Array(5);
21781:     for (var i=0;i<5;++i) a[i] = "" + (true << true);
21781:     return a.join(",");
21781: }
21781: testTrueShiftTrue.expected = "2,2,2,2,2";
21781: test(testTrueShiftTrue);
21781: 
21783: // Test no assert or crash
21783: function testBug465261() {
21783:     for (let z = 0; z < 2; ++z) { for each (let x in [0, true, (void 0), 0, (void
21783:     0)]) { if(x){} } };
21783:     return true;
21783: }
21783: testBug465261.expected = true;
21783: test(testBug465261);
21783: 
21787: function testBug465272() {
21787:     var a = new Array(5);
21787:     for (j=0;j<5;++j) a[j] = "" + ((5) - 2);
21787:     return a.join(",");
21787: }
21787: testBug465272.expected = "3,3,3,3,3"
21787: test(testBug465272);
21787: 
21828: function testBug465483() {
21828:     var a = new Array(4);
21828:     var c = 0;
21828:     for each (i in [4, 'a', 'b', (void 0)]) a[c++] = '' + (i + i);
21828:     return a.join(',');
21828: }
21828: testBug465483.expected = '8,aa,bb,NaN';
21828: test(testBug465483);
21828: 
21840: function testNullCallee() {
21840:     try {
21840:         function f() {
21840:             var x = new Array(5);
21840:             for (var i = 0; i < 5; i++)
21840:                 x[i] = a[i].toString();
21840:             return x.join(',');
21840:         }
21840:         f([[1],[2],[3],[4],[5]]);
21840:         f([null, null, null, null, null]);
21840:     } catch (e) {
21840:         return true;
21840:     }
21840:     return false;
21840: }
21840: testNullCallee.expected = true;
21840: test(testNullCallee);
21840: 
22609: //test no multitrees assert
22609: function testBug466128() {
22609:     for (let a = 0; a < 3; ++a) {
22609:       for each (let b in [1, 2, "three", 4, 5, 6, 7, 8]) {
22609:       }
22609:     }
22609:     return true;
22609: }
22609: testBug466128.expected = true;
22609: test(testBug466128);
22609: 
22610: //test no assert
22610: function testBug465688() {
22610:     for each (let d in [-0x80000000, -0x80000000]) - -d;
22610:     return true;
22610: }
22610: testBug465688.expected = true;
22610: test(testBug465688);
22610: 
22612: //test no assert
22612: function testBug466262() {
22612:     var e = 1;
22612:     for (var d = 0; d < 3; ++d) {
22612:       if (d == 2) {
22612:         e = "";
22612:       }
22612:     }
22612:     return true;
22612: }
22612: testBug466262.expected = true;
22612: test(testBug466262);
22612: 
20402: function testNewDate()
20402: {
20402:     // Accessing global.Date for the first time will change the global shape,
20402:     // so do it before the loop starts; otherwise we have to loop an extra time
20402:     // to pick things up.
20402:     var start = new Date();
20402:     var time = new Date();
23105:     for (var j = 0; j < RUNLOOP; ++j)
20402:         time = new Date();
20402:     return time > 0 && time >= start;
20402: }
20402: testNewDate.expected = true;
20402: testNewDate.jitstats = {
20402:     recorderStarted: 1,
20402:     recorderAborted: 0,
20402:     traceTriggered: 1
20402: };
20402: test(testNewDate);
20402: 
20405: function testArrayPushPop() {
20405:     var a = [], sum1 = 0, sum2 = 0;
20405:     for (var i = 0; i < 10; ++i)
20405:         sum1 += a.push(i);
20405:     for (var i = 0; i < 10; ++i)
20405:         sum2 += a.pop();
20405:     a.push(sum1);
20405:     a.push(sum2);
20405:     return a.join(",");
20405: }
20405: testArrayPushPop.expected = "55,45";
20405: test(testArrayPushPop);
20405: 
24612: function testSlowArrayPop() {
24612:     var a = [];
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         a[i] = [0];
24612:     a[RUNLOOP-1].__defineGetter__("0", function () { return 'xyzzy'; });
24612: 
24612:     var last;
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         last = a[i].pop();  // reenters interpreter in getter
24612:     return last;
24612: }
24612: testSlowArrayPop.expected = 'xyzzy';
24612: test(testSlowArrayPop);
24612: 
24612: // Same thing but it needs to reconstruct multiple stack frames (so,
24612: // multiple functions called inside the loop)
24612: function testSlowArrayPopMultiFrame() {    
24612:     var a = [];
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         a[i] = [0];
24612:     a[RUNLOOP-1].__defineGetter__("0", function () { return 23; });
24612: 
24612:     function child(a, i) {
24612:         return a[i].pop();  // reenters interpreter in getter
24612:     }
24612:     function parent(a, i) {
24612:         return child(a, i);
24612:     }
24612:     function gramps(a, i) { 
24612:         return parent(a, i);
24612:     }
24612: 
24612:     var last;
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         last = gramps(a, i);
24612:     return last;
24612: }
24612: testSlowArrayPopMultiFrame.expected = 23;
24612: test(testSlowArrayPopMultiFrame);
24612: 
24612: // Same thing but nested trees, each reconstructing one or more stack frames 
24612: // (so, several functions with loops, such that the loops end up being
24612: // nested though they are not lexically nested)
24612: 
24612: function testSlowArrayPopNestedTrees() {    
24612:     var a = [];
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         a[i] = [0];
24612:     a[RUNLOOP-1].__defineGetter__("0", function () { return 3.14159 });
24612: 
24612:     function child(a, i, j, k) {
24612:         var last = 2.71828;
24612:         for (var l = 0; l < RUNLOOP; l++)
24612:             if (i == RUNLOOP-1 && j == RUNLOOP-1 && k == RUNLOOP-1)
24612:                 last = a[l].pop();  // reenters interpreter in getter
24612:         return last;
24612:     }
24612:     function parent(a, i, j) {
24612:         var last;
24612:         for (var k = 0; k < RUNLOOP; k++)
24612:             last = child(a, i, j, k);
24612:         return last;
24612:     }
24612:     function gramps(a, i) { 
24612:         var last;
24612:         for (var j = 0; j < RUNLOOP; j++)
24612:             last = parent(a, i, j);
24612:         return last;
24612:     }
24612: 
24612:     var last;
24612:     for (var i = 0; i < RUNLOOP; i++)
24612:         last = gramps(a, i);
24612:     return last;
24612: }
24612: testSlowArrayPopNestedTrees.expected = 3.14159;
24612: test(testSlowArrayPopNestedTrees);
24612: 
20405: function testResumeOp() {
20405:     var a = [1,"2",3,"4",5,"6",7,"8",9,"10",11,"12",13,"14",15,"16"];
20405:     var x = "";
20405:     while (a.length > 0)
20405:         x += a.pop();
20405:     return x;
20405: }
20405: testResumeOp.expected = "16151413121110987654321";
20405: test(testResumeOp);
20405: 
20406: function testUndefinedCmp() {
20406:     var a = false;
20406:     for (var j = 0; j < 4; ++j) { if (undefined < false) { a = true; } }
20406:     return a;
20406: }
20406: testUndefinedCmp.expected = false;
20406: test(testUndefinedCmp);
20406: 
20429: function reallyDeepNestedExit(schedule)
20429: {
20429:     var c = 0, j = 0;
20429:     for (var i = 0; i < 5; i++) {
20429:         for (j = 0; j < 4; j++) {
20429:             c += (schedule[i*4 + j] == 1) ? 1 : 2;
20429:         }
20429:     }
20429:     return c;
20429: }
20429: function testReallyDeepNestedExit()
20429: {
20429:     var c = 0;
20429:     var schedule1 = new Array(5*4);
20429:     var schedule2 = new Array(5*4);
20429:     for (var i = 0; i < 5*4; i++) {
20429:         schedule1[i] = 0;
20429:         schedule2[i] = 0;
20429:     }
20429:     /**
20429:      * First innermost compile: true branch runs through.
20429:      * Second '': false branch compiles new loop edge.
20429:      * First outer compile: expect true branch.
20429:      * Second '': hit false branch.
20429:      */
20429:     schedule1[0*4 + 3] = 1;
20429:     var schedules = [schedule1,
20429:                      schedule2,
20429:                      schedule1,
20429:                      schedule2,
20429:                      schedule2];
20429: 
20429:     for (var i = 0; i < 5; i++) {
20429:         c += reallyDeepNestedExit(schedules[i]);
20429:     }
20429:     return c;
20429: }
20429: testReallyDeepNestedExit.expected = 198;
20429: test(testReallyDeepNestedExit);
20429: 
20898: function testRegExpTest() {
20898:     var r = /abc/;
20898:     var flag = false;
20898:     for (var i = 0; i < 10; ++i)
20898:         flag = r.test("abc");
20898:     return flag;
20898: }
20898: testRegExpTest.expected = true;
20898: test(testRegExpTest);
20898: 
20898: function testNumToString() {
20898:     var r = [];
20898:     var d = 123456789;
20898:     for (var i = 0; i < 10; ++i) {
20898:         r = [
20898:              d.toString(),
20898:              (-d).toString(),
20898:              d.toString(10),
20898:              (-d).toString(10),
20898:              d.toString(16),
20898:              (-d).toString(16),
20898:              d.toString(36),
20898:              (-d).toString(36)
20898:             ];
20898:     }
20898:     return r.join(",");
20898: }
20898: testNumToString.expected = "123456789,-123456789,123456789,-123456789,75bcd15,-75bcd15,21i3v9,-21i3v9";
20898: test(testNumToString);
20898: 
23700: function testLongNumToString() {
23700:     var s;
23700:     for (var i = 0; i < 5; i++)
23700:         s = (0x08000000).toString(2);
23700:     return s;
23700: }
23704: testLongNumToString.expected = '1000000000000000000000000000';
23700: test(testLongNumToString);
23700: 
20929: function testSubstring() {
20929:     for (var i = 0; i < 5; ++i) {
20929:         actual = "".substring(5);
20929:     }
20929:     return actual;
20929: }
20929: testSubstring.expected = "";
20929: test(testSubstring);
20929: 
20952: function testForInLoopChangeIteratorType() {
20952:     for(y in [0,1,2]) y = NaN;
21435:     (function(){
21435:         [].__proto__.u = void 0;
21435:         for (let y in [5,6,7,8])
21435:             y = NaN;
21435:         delete [].__proto__.u;
21435:     })()
20952:     return "ok";
20952: }
20952: testForInLoopChangeIteratorType.expected = "ok";
20952: test(testForInLoopChangeIteratorType);
20952: 
20972: function testGrowDenseArray() {
20972:     var a = new Array();
20972:     for (var i = 0; i < 10; ++i)
20972:         a[i] |= 5;
20972:     return a.join(",");
20972: }
20972: testGrowDenseArray.expected = "5,5,5,5,5,5,5,5,5,5";
20972: test(testGrowDenseArray);
20972: 
20979: function testCallProtoMethod() {
20979:     function X() { this.x = 1; }
20979:     X.prototype.getName = function () { return "X"; }
20979: 
20979:     function Y() { this.x = 2; }
20979:     Y.prototype.getName = function() "Y";
20979: 
20979:     var a = [new X, new X, new X, new X, new Y];
20979:     var s = '';
20979:     for (var i = 0; i < a.length; i++)
20979:         s += a[i].getName();
20979:     return s;
20979: }
20979: testCallProtoMethod.expected = 'XXXXY';
20979: test(testCallProtoMethod);
20979: 
21435: function testTypeUnstableForIn() {
21435:     var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];
21435:     var x = 0;
21435:     for (var i in a) {
21435:         i = parseInt(i);
21435:         x++;
21435:     }
21435:     return x;
21435: }
21435: testTypeUnstableForIn.expected = 16;
21435: test(testTypeUnstableForIn);
21435: 
21444: function testAddUndefined() {
21444:     for (var j = 0; j < 3; ++j)
21444:         (0 + void 0) && 0;
21444: }
21444: test(testAddUndefined);
21444: 
21447: function testStringify() {
21447:     var t = true, f = false, u = undefined, n = 5, d = 5.5, s = "x";
21447:     var a = [];
21447:     for (var i = 0; i < 10; ++i) {
21447:         a[0] = "" + t;
21447:         a[1] = t + "";
21447:         a[2] = "" + f;
21447:         a[3] = f + "";
21447:         a[4] = "" + u;
21447:         a[5] = u + "";
21447:         a[6] = "" + n;
21447:         a[7] = n + "";
21447:         a[8] = "" + d;
21447:         a[9] = d + "";
21447:         a[10] = "" + s;
21447:         a[11] = s + "";
21447:     }
21447:     return a.join(",");
21447: }
21447: testStringify.expected = "true,true,false,false,undefined,undefined,5,5,5.5,5.5,x,x";
21447: test(testStringify);
21447: 
21685: function testObjectToString() {
21685:     var o = {toString: function()"foo"};
21685:     var s = "";
21685:     for (var i = 0; i < 10; i++)
21685:         s += o;
21685:     return s;
21685: }
21685: testObjectToString.expected = "foofoofoofoofoofoofoofoofoofoo";
21685: test(testObjectToString);
21685: 
21685: function testObjectToNumber() {
21685:     var o = {valueOf: function()-3};
21685:     var x = 0;
21685:     for (var i = 0; i < 10; i++)
21685:         x -= o;
21685:     return x;
21685: }
21685: testObjectToNumber.expected = 30;
21685: test(testObjectToNumber);
21685: 
21685: function my_iterator_next() {
21685:     if (this.i == 10) {
21685:         this.i = 0;
21685:         throw this.StopIteration;
21685:     }
21685:     return this.i++;
21685: }
21685: function testCustomIterator() {
21685:     var o = {
21685:         __iterator__: function () {
21685:             return {
21685:                 i: 0,
21685:                 next: my_iterator_next,
21685:                 StopIteration: StopIteration
21685:             };
21685:         }
21685:     };
21685:     var a=[];
21685:     for (var k = 0; k < 100; k += 10) {
21685:         for(var j in o) {
21685:             a[k + (j >> 0)] = j*k;
21685:         }
21685:     }
21685:     return a.join();
21685: }
21685: testCustomIterator.expected = "0,0,0,0,0,0,0,0,0,0,0,10,20,30,40,50,60,70,80,90,0,20,40,60,80,100,120,140,160,180,0,30,60,90,120,150,180,210,240,270,0,40,80,120,160,200,240,280,320,360,0,50,100,150,200,250,300,350,400,450,0,60,120,180,240,300,360,420,480,540,0,70,140,210,280,350,420,490,560,630,0,80,160,240,320,400,480,560,640,720,0,90,180,270,360,450,540,630,720,810";
21685: test(testCustomIterator);
21685: 
21688: function bug464403() {
21688:     print(8);
21688:     var u = [print, print, function(){}]
21688:     for each (x in u) for (u.e in [1,1,1,1]);
21688:     return "ok";
21688: }
21688: bug464403.expected = "ok";
21688: test(bug464403);
21688: 
21722: function testBoxDoubleWithDoubleSizedInt()
21722: {
21722:   var i = 0;
21722:   var a = new Array(3);
21722: 
21722:   while (i < a.length)
21722:     a[i++] = 0x5a827999;
21722:   return a.join(",");
21722: }
21722: testBoxDoubleWithDoubleSizedInt.expected = "1518500249,1518500249,1518500249";
21722: test(testBoxDoubleWithDoubleSizedInt);
21722: 
21724: function testObjectOrderedCmp()
21724: {
21724:   var a = new Array(5);
21778:   for(var i=0;i<5;++i) a[i] = ({} < {});
21724:   return a.join(",");
21724: }
21724: testObjectOrderedCmp.expected = "false,false,false,false,false";
21724: test(testObjectOrderedCmp);
21724: 
21778: function testObjectOrderedCmp2()
21778: {
21778:   var a = new Array(5);
21778:   for(var i=0;i<5;++i) a[i] = ("" <= null);
21778:   return a.join(",");
21778: }
21778: testObjectOrderedCmp2.expected = "true,true,true,true,true";
21778: test(testObjectOrderedCmp2);
21778: 
21776: function testLogicalNotNaN() {
21776:     var i = 0;
21776:     var a = new Array(5);
21776:     while (i < a.length)
21776:         a[i++] = !NaN;
21776:     return a.join();
21776: }
21776: testLogicalNotNaN.expected = "true,true,true,true,true";
21776: test(testLogicalNotNaN);
21776: 
21780: function testStringToInt32() {
21780:     var s = "";
21780:     for (let j = 0; j < 5; ++j) s += ("1e+81" ^  3);
21780:     return s;
21780: }
21780: testStringToInt32.expected = "33333";
21780: test(testStringToInt32);
21780: 
21784: function testIn() {
21784:     var array = [3];
21784:     var obj = { "-1": 5, "1.7": 3, "foo": 5, "1": 7 };
21784:     var a = [];
21784:     for (let j = 0; j < 5; ++j) {
21784:         a.push("0" in array);
21784:         a.push(-1 in obj);
21784:         a.push(1.7 in obj);
21784:         a.push("foo" in obj);
21784:         a.push(1 in obj);
21784:         a.push("1" in array);
21784:         a.push(-2 in obj);
21784:         a.push(2.7 in obj);
21784:         a.push("bar" in obj);
21784:         a.push(2 in obj);
21784:     }
21784:     return a.join(",");
21784: }
21784: testIn.expected = "true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false";
21784: test(testIn);
21784: 
21789: function testBranchCse() {
21789:     empty = [];
21789:     out = [];
21789:     for (var j=0;j<10;++j) { empty[42]; out.push((1 * (1)) | ""); }
21789:     return out.join(",");
21789: }
21789: testBranchCse.expected = "1,1,1,1,1,1,1,1,1,1";
21789: test(testBranchCse);
21789: 
21792: function testMulOverflow() {
21792:     var a = [];
21792:     for (let j=0;j<5;++j) a.push(0 | ((0x60000009) * 0x60000009));
21792:     return a.join(",");
21792: }
21792: testMulOverflow.expected = "-1073741824,-1073741824,-1073741824,-1073741824,-1073741824";
21792: test(testMulOverflow);
21792: 
21796: function testThinLoopDemote() {
21796:     function f()
21796:     {
21796:         var k = 1;
25627:         for (var n = 0; n < 4; n++) {
21796:             k = (k * 10);
21796:         }
21796:         return k;
21796:     }
21796:     f();
21796:     return f();
21796: }
25627: testThinLoopDemote.expected = 10000;
21798: testThinLoopDemote.jitstats = {
24246:     recorderStarted: 2,
21798:     recorderAborted: 0,
24246:     traceCompleted: 2,
25627:     traceTriggered: 3,
24246:     unstableLoopVariable: 1
21798: };
21796: test(testThinLoopDemote);
21796: 
21798: var global = this;
21798: function testWeirdDateParseOuter()
21798: {
21798:     var vDateParts = ["11", "17", "2008"];
21798:     var out = [];
23105:     for (var vI = 0; vI < vDateParts.length; vI++)
21798:         out.push(testWeirdDateParseInner(vDateParts[vI]));
21798:     /* Mutate the global shape so we fall off trace; this causes
21798:      * additional oddity */
21798:     global.x = Math.random();
21798:     return out;
21798: }
21798: function testWeirdDateParseInner(pVal)
21798: {
21798:     var vR = 0;
21798:     for (var vI = 0; vI < pVal.length; vI++) {
21798:         var vC = pVal.charAt(vI);
21798:         if ((vC >= '0') && (vC <= '9'))
21798:             vR = (vR * 10) + parseInt(vC);
21798:     }
21798:     return vR;
21798: }
21798: function testWeirdDateParse() {
21798:     var result = [];
21798:     result.push(testWeirdDateParseInner("11"));
21798:     result.push(testWeirdDateParseInner("17"));
21798:     result.push(testWeirdDateParseInner("2008"));
21798:     result.push(testWeirdDateParseInner("11"));
21798:     result.push(testWeirdDateParseInner("17"));
21798:     result.push(testWeirdDateParseInner("2008"));
21798:     result = result.concat(testWeirdDateParseOuter());
21798:     result = result.concat(testWeirdDateParseOuter());
21798:     result.push(testWeirdDateParseInner("11"));
21798:     result.push(testWeirdDateParseInner("17"));
21798:     result.push(testWeirdDateParseInner("2008"));
21798:     return result.join(",");
21798: }
21798: testWeirdDateParse.expected = "11,17,2008,11,17,2008,11,17,2008,11,17,2008,11,17,2008";
21798: testWeirdDateParse.jitstats = {
25937:     recorderStarted: 8,
21798:     recorderAborted: 1,
25937:     traceCompleted: 7,
24246:     traceTriggered: 14,
24246:     unstableLoopVariable: 3,
25627:     noCompatInnerTrees: 1
21798: };
21798: test(testWeirdDateParse);
21798: 
21799: function testUndemotableBinaryOp() {
21799:     var out = [];
21799:     for (let j = 0; j < 5; ++j) { out.push(6 - ((void 0) ^ 0x80000005)); }
21799:     return out.join(",");
21799: }
21799: testUndemotableBinaryOp.expected = "2147483649,2147483649,2147483649,2147483649,2147483649";
21799: test(testUndemotableBinaryOp);
21799: 
21801: function testNullRelCmp() {
21801:     var out = [];
21801:     for(j=0;j<3;++j) { out.push(3 > null); out.push(3 < null); out.push(0 == null); out.push(3 == null); }
21801:     return out.join(",");
21801: }
21801: testNullRelCmp.expected = "true,false,false,false,true,false,false,false,true,false,false,false";
21801: test(testNullRelCmp);
21801: 
21802: function testEqFalseEmptyString() {
21802:     var x = [];
21802:     for (var i=0;i<5;++i) x.push(false == "");
21802:     return x.join(",");
21802: }
21802: testEqFalseEmptyString.expected = "true,true,true,true,true";
21802: test(testEqFalseEmptyString);
21802: 
21805: function testIncDec2(ii) {
21805:     var x = [];
21805:     for (let j=0;j<5;++j) {
21805:         ii=j;
21805:         jj=j;
21805:         var kk=j;
21805:         x.push(ii--);
21805:         x.push(jj--);
21805:         x.push(kk--);
21805:         x.push(++ii);
21805:         x.push(++jj);
21805:         x.push(++kk);
21805:     }
21805:     return x.join(",");
21805: }
21805: function testIncDec() {
21805:     return testIncDec2(0);
21805: }
21805: testIncDec.expected = "0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4";
21805: test(testIncDec);
21805: 
22634: function testApply() {
22634:     var q = [];
22634:     for (var i = 0; i < 10; ++i)
22634:         Array.prototype.push.apply(q, [5]);
22634:     return q.join(",");
22634: }
22634: testApply.expected = "5,5,5,5,5,5,5,5,5,5";
22634: test(testApply);
22634: 
24384: function testNestedForIn() {
24384:     var a = {x: 1, y: 2, z: 3};
24384:     var s = '';
24384:     for (var p1 in a)
24384:         for (var p2 in a)
24384:             s += p1 + p2 + ' ';
24384:     return s;
24384: }
24384: testNestedForIn.expected = 'xx xy xz yx yy yz zx zy zz ';
24384: test(testNestedForIn);
24384: 
24384: function testForEach() {
24384:     var r;
24384:     var a = ["zero", "one", "two", "three"];
24384:     for (var i = 0; i < RUNLOOP; i++) {
24384:         r = "";
24384:         for each (var s in a)
24384:             r += s + " ";
24384:     }
24384:     return r;
24384: }
24384: testForEach.expected = "zero one two three ";
24384: test(testForEach);
24384: 
24384: function testThinForEach() {
24384:     var a = ["red"];
24384:     var n = 0;
24384:     for (var i = 0; i < 10; i++)
24384:         for each (var v in a)
24384:             if (v)
24384:                 n++;
24384:     return n;
24384: }
24384: testThinForEach.expected = 10;
24384: test(testThinForEach);
24384: 
22705: function testComparisons()
22705: {
22705:   // All the special values from each of the types in
22705:   // ECMA-262, 3rd ed. section 8
22705:   var undefinedType, nullType, booleanType, stringType, numberType, objectType;
22705: 
22705:   var types = [];
22705:   types[undefinedType = 0] = "Undefined";
22705:   types[nullType = 1] = "Null";
22705:   types[booleanType = 2] = "Boolean";
22705:   types[stringType = 3] = "String";
22705:   types[numberType = 4] = "Number";
22705:   types[objectType = 5] = "Object";
22705: 
22705:   var JSVAL_INT_MIN = -Math.pow(2, 30);
22705:   var JSVAL_INT_MAX = Math.pow(2, 30) - 1;
22705: 
22705:   // Values from every ES3 type, hitting all the edge-case and special values
22705:   // that can be dreamed up
22705:   var values =
22705:     {
22705:      "undefined":
22705:        {
22705:          value: function() { return undefined; },
22705:          type: undefinedType
22705:        },
22705:      "null":
22705:        {
22705:          value: function() { return null; },
22705:          type: nullType
22705:        },
22705:      "true":
22705:        {
22705:          value: function() { return true; },
22705:          type: booleanType
22705:        },
22705:      "false":
22705:        {
22705:          value: function() { return false; },
22705:          type: booleanType
22705:        },
22705:      '""':
22705:        {
22705:          value: function() { return ""; },
22705:          type: stringType
22705:        },
22705:      '"a"':
22705:        {
22705:          // a > [, for string-object comparisons
22705:          value: function() { return "a"; },
22705:          type: stringType
22705:        },
22705:      '"Z"':
22705:        {
22705:          // Z < [, for string-object comparisons
22705:          value: function() { return "Z"; },
22705:          type: stringType
22705:        },
22705:      "0":
22705:        {
22705:          value: function() { return 0; },
22705:          type: numberType
22705:        },
22705:      "-0":
22705:        {
22705:          value: function() { return -0; },
22705:          type: numberType
22705:        },
22705:      "1":
22705:        {
22705:          value: function() { return 1; },
22705:          type: numberType
22705:        },
22705:      "Math.E":
22705:        {
22705:          value: function() { return Math.E; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MIN - 1":
22705:        {
22705:          value: function() { return JSVAL_INT_MIN - 1; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MIN":
22705:        {
22705:          value: function() { return JSVAL_INT_MIN; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MIN + 1":
22705:        {
22705:          value: function() { return JSVAL_INT_MIN + 1; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MAX - 1":
22705:        {
22705:          value: function() { return JSVAL_INT_MAX - 1; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MAX":
22705:        {
22705:          value: function() { return JSVAL_INT_MAX; },
22705:          type: numberType
22705:        },
22705:      "JSVAL_INT_MAX + 1":
22705:        {
22705:          value: function() { return JSVAL_INT_MAX + 1; },
22705:          type: numberType
22705:        },
22705:      "Infinity":
22705:        {
22705:          value: function() { return Infinity; },
22705:          type: numberType
22705:        },
22705:      "-Infinity":
22705:        {
22705:          value: function() { return -Infinity; },
22705:          type: numberType
22705:        },
22705:      "NaN":
22705:        {
22705:          value: function() { return NaN; },
22705:          type: numberType
22705:        },
22705:      "{}":
22705:        {
22705:          value: function() { return {}; },
22705:          type: objectType
22705:        },
22705:      "{ valueOf: undefined }":
22705:        {
22705:          value: function() { return { valueOf: undefined }; },
22705:          type: objectType
22705:        },
22705:      "[]":
22705:        {
22705:          value: function() { return []; },
22705:          type: objectType
22705:        },
22705:      '[""]':
22705:        {
22705:          value: function() { return [""]; },
22705:          type: objectType
22705:        },
22705:      '["a"]':
22705:        {
22705:          value: function() { return ["a"]; },
22705:          type: objectType
22705:        },
22705:      "[0]":
22705:        {
22705:          value: function() { return [0]; },
22705:          type: objectType
22705:        }
22705:     };
22705: 
22705:   var orderOps =
22705:     {
22705:      "<": function(a, b) { return a < b; },
22705:      ">": function(a, b) { return a > b; },
22705:      "<=": function(a, b) { return a <= b; },
22705:      ">=": function(a, b) { return a >= b; }
22705:     };
22705:   var eqOps =
22705:     {
22705:      "==": function(a, b) { return a == b; },
22705:      "!=": function(a, b) { return a != b; },
22705:      "===": function(a, b) { return a === b; },
22705:      "!==": function(a, b) { return a !== b; }
22705:     };
22705: 
22705: 
22705:   var notEqualIncomparable =
22705:     {
22705:       eq: { "==": false, "!=": true, "===": false, "!==": true },
22705:       order: { "<": false, ">": false, "<=": false, ">=": false }
22705:     };
22705:   var notEqualLessThan =
22705:     {
22705:       eq: { "==": false, "!=": true, "===": false, "!==": true },
22705:       order: { "<": true, ">": false, "<=": true, ">=": false }
22705:     };
22705:   var notEqualGreaterThan =
22705:     {
22705:       eq: { "==": false, "!=": true, "===": false, "!==": true },
22705:       order: { "<": false, ">": true, "<=": false, ">=": true }
22705:     };
22705:   var notEqualNorDifferent =
22705:     {
22705:       eq: { "==": false, "!=": true, "===": false, "!==": true },
22705:       order: { "<": false, ">": false, "<=": true, ">=": true }
22705:     };
22705:   var strictlyEqual =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": true, "!==": false },
22705:       order: { "<": false, ">": false, "<=": true, ">=": true }
22705:     };
22705:   var looselyEqual =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": false, "!==": true },
22705:       order: { "<": false, ">": false, "<=": true, ">=": true }
22705:     };
22705:   var looselyEqualNotDifferent =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": false, "!==": true },
22705:       order: { "<": false, ">": false, "<=": true, ">=": true }
22705:     };
22705:   var looselyEqualIncomparable =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": false, "!==": true },
22705:       order: { "<": false, ">": false, "<=": false, ">=": false }
22705:     };
22705:   var strictlyEqualNotDifferent =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": true, "!==": false },
22705:       order: { "<": false, ">": false, "<=": true, ">=": true }
22705:     };
22705:   var strictlyEqualIncomparable =
22705:     {
22705:       eq: { "==": true, "!=": false, "===": true, "!==": false },
22705:       order: { "<": false, ">": false, "<=": false, ">=": false }
22705:     };
22705: 
22705:   var comparingZeroToSomething =
22705:     {
22705:       "undefined": notEqualIncomparable,
22705:       "null": notEqualNorDifferent,
22705:       "true": notEqualLessThan,
22705:       "false": looselyEqual,
22705:       '""': looselyEqualNotDifferent,
22705:       '"a"': notEqualIncomparable,
22705:       '"Z"': notEqualIncomparable,
22705:       "0": strictlyEqual,
22705:       "-0": strictlyEqual,
22705:       "1": notEqualLessThan,
22705:       "Math.E": notEqualLessThan,
22705:       "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:       "JSVAL_INT_MIN": notEqualGreaterThan,
22705:       "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:       "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:       "JSVAL_INT_MAX": notEqualLessThan,
22705:       "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:       "Infinity": notEqualLessThan,
22705:       "-Infinity": notEqualGreaterThan,
22705:       "NaN": notEqualIncomparable,
22705:       "{}": notEqualIncomparable,
22705:       "{ valueOf: undefined }": notEqualIncomparable,
22705:       "[]": looselyEqual,
22705:       '[""]': looselyEqual,
22705:       '["a"]': notEqualIncomparable,
22705:       "[0]": looselyEqual
22705:     };
22705: 
22705:   var comparingObjectOrObjectWithValueUndefined =
22705:     {
22705:       "undefined": notEqualIncomparable,
22705:       "null": notEqualIncomparable,
22705:       "true": notEqualIncomparable,
22705:       "false": notEqualIncomparable,
22705:       '""': notEqualGreaterThan,
22705:       '"a"': notEqualLessThan,
22705:       '"Z"': notEqualGreaterThan,
22705:       "0": notEqualIncomparable,
22705:       "-0": notEqualIncomparable,
22705:       "1": notEqualIncomparable,
22705:       "Math.E": notEqualIncomparable,
22705:       "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:       "JSVAL_INT_MIN": notEqualIncomparable,
22705:       "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:       "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:       "JSVAL_INT_MAX": notEqualIncomparable,
22705:       "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:       "Infinity": notEqualIncomparable,
22705:       "-Infinity": notEqualIncomparable,
22705:       "NaN": notEqualIncomparable,
22705:       "{}": notEqualNorDifferent,
22705:       "{ valueOf: undefined }": notEqualNorDifferent,
22705:       "[]": notEqualGreaterThan,
22705:       '[""]': notEqualGreaterThan,
22705:       '["a"]': notEqualLessThan,
22705:       "[0]": notEqualGreaterThan
22705:     };
22705: 
22705:   // Constructed expected-value matrix
22705:   var expected =
22705:     {
22705:      "undefined":
22705:        {
22705:          "undefined": strictlyEqualIncomparable,
22705:          "null": looselyEqualIncomparable,
22705:          "true": notEqualIncomparable,
22705:          "false": notEqualIncomparable,
22705:          '""': notEqualIncomparable,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualIncomparable,
22705:          "-0": notEqualIncomparable,
22705:          "1": notEqualIncomparable,
22705:          "Math.E": notEqualIncomparable,
22705:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MIN": notEqualIncomparable,
22705:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX": notEqualIncomparable,
22705:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:          "Infinity": notEqualIncomparable,
22705:          "-Infinity": notEqualIncomparable,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualIncomparable,
22705:          '[""]': notEqualIncomparable,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualIncomparable
22705:        },
22705:      "null":
22705:        {
22705:          "undefined": looselyEqualIncomparable,
22705:          "null": strictlyEqualNotDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": notEqualNorDifferent,
22705:          '""': notEqualNorDifferent,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualNorDifferent,
22705:          "-0": notEqualNorDifferent,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualNorDifferent,
22705:          '[""]': notEqualNorDifferent,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualNorDifferent
22705:        },
22705:      "true":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": strictlyEqual,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": looselyEqual,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "false":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualNorDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": strictlyEqual,
22705:          '""': looselyEqualNotDifferent,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": looselyEqual,
22705:          "-0": looselyEqual,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": looselyEqual,
22705:          '[""]': looselyEqual,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": looselyEqual
22705:        },
22705:      '""':
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualNorDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": looselyEqual,
22705:          '""': strictlyEqual,
22705:          '"a"': notEqualLessThan,
22705:          '"Z"': notEqualLessThan,
22705:          "0": looselyEqual,
22705:          "-0": looselyEqual,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualLessThan,
22705:          "{ valueOf: undefined }": notEqualLessThan,
22705:          "[]": looselyEqual,
22705:          '[""]': looselyEqual,
22705:          '["a"]': notEqualLessThan,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      '"a"':
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualIncomparable,
22705:          "true": notEqualIncomparable,
22705:          "false": notEqualIncomparable,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': strictlyEqual,
22705:          '"Z"': notEqualGreaterThan,
22705:          "0": notEqualIncomparable,
22705:          "-0": notEqualIncomparable,
22705:          "1": notEqualIncomparable,
22705:          "Math.E": notEqualIncomparable,
22705:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MIN": notEqualIncomparable,
22705:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX": notEqualIncomparable,
22705:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:          "Infinity": notEqualIncomparable,
22705:          "-Infinity": notEqualIncomparable,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualGreaterThan,
22705:          "{ valueOf: undefined }": notEqualGreaterThan,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': looselyEqualNotDifferent,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      '"Z"':
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualIncomparable,
22705:          "true": notEqualIncomparable,
22705:          "false": notEqualIncomparable,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualLessThan,
22705:          '"Z"': strictlyEqual,
22705:          "0": notEqualIncomparable,
22705:          "-0": notEqualIncomparable,
22705:          "1": notEqualIncomparable,
22705:          "Math.E": notEqualIncomparable,
22705:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MIN": notEqualIncomparable,
22705:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX": notEqualIncomparable,
22705:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:          "Infinity": notEqualIncomparable,
22705:          "-Infinity": notEqualIncomparable,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualLessThan,
22705:          "{ valueOf: undefined }": notEqualLessThan,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualLessThan,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "0": comparingZeroToSomething,
22705:      "-0": comparingZeroToSomething,
22705:      "1":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": looselyEqual,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": strictlyEqual,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "Math.E":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": notEqualGreaterThan,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": notEqualGreaterThan,
22705:          "Math.E": strictlyEqual,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "JSVAL_INT_MIN - 1":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualLessThan,
22705:          "true": notEqualLessThan,
22705:          "false": notEqualLessThan,
22705:          '""': notEqualLessThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualLessThan,
22705:          "-0": notEqualLessThan,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": strictlyEqual,
22705:          "JSVAL_INT_MIN": notEqualLessThan,
22705:          "JSVAL_INT_MIN + 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualLessThan,
22705:          '[""]': notEqualLessThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      "JSVAL_INT_MIN":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualLessThan,
22705:          "true": notEqualLessThan,
22705:          "false": notEqualLessThan,
22705:          '""': notEqualLessThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualLessThan,
22705:          "-0": notEqualLessThan,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": strictlyEqual,
22705:          "JSVAL_INT_MIN + 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualLessThan,
22705:          '[""]': notEqualLessThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      "JSVAL_INT_MIN + 1":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualLessThan,
22705:          "true": notEqualLessThan,
22705:          "false": notEqualLessThan,
22705:          '""': notEqualLessThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualLessThan,
22705:          "-0": notEqualLessThan,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": strictlyEqual,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualLessThan,
22705:          '[""]': notEqualLessThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      "JSVAL_INT_MAX - 1":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": notEqualGreaterThan,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": notEqualGreaterThan,
22705:          "Math.E": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": strictlyEqual,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "JSVAL_INT_MAX":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": notEqualGreaterThan,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": notEqualGreaterThan,
22705:          "Math.E": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX": strictlyEqual,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "JSVAL_INT_MAX + 1":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": notEqualGreaterThan,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": notEqualGreaterThan,
22705:          "Math.E": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX + 1": strictlyEqual,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "Infinity":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualGreaterThan,
22705:          "true": notEqualGreaterThan,
22705:          "false": notEqualGreaterThan,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualGreaterThan,
22705:          "-0": notEqualGreaterThan,
22705:          "1": notEqualGreaterThan,
22705:          "Math.E": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX + 1": notEqualGreaterThan,
22705:          "Infinity": strictlyEqual,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "-Infinity":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualLessThan,
22705:          "true": notEqualLessThan,
22705:          "false": notEqualLessThan,
22705:          '""': notEqualLessThan,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualLessThan,
22705:          "-0": notEqualLessThan,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualLessThan,
22705:          "JSVAL_INT_MIN": notEqualLessThan,
22705:          "JSVAL_INT_MIN + 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": strictlyEqual,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualLessThan,
22705:          '[""]': notEqualLessThan,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      "NaN":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualIncomparable,
22705:          "true": notEqualIncomparable,
22705:          "false": notEqualIncomparable,
22705:          '""': notEqualIncomparable,
22705:          '"a"': notEqualIncomparable,
22705:          '"Z"': notEqualIncomparable,
22705:          "0": notEqualIncomparable,
22705:          "-0": notEqualIncomparable,
22705:          "1": notEqualIncomparable,
22705:          "Math.E": notEqualIncomparable,
22705:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MIN": notEqualIncomparable,
22705:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX": notEqualIncomparable,
22705:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:          "Infinity": notEqualIncomparable,
22705:          "-Infinity": notEqualIncomparable,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualIncomparable,
22705:          "{ valueOf: undefined }": notEqualIncomparable,
22705:          "[]": notEqualIncomparable,
22705:          '[""]': notEqualIncomparable,
22705:          '["a"]': notEqualIncomparable,
22705:          "[0]": notEqualIncomparable
22705:        },
22705:      "{}": comparingObjectOrObjectWithValueUndefined,
22705:      "{ valueOf: undefined }": comparingObjectOrObjectWithValueUndefined,
22705:      "[]":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualNorDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": looselyEqual,
22705:          '""': looselyEqual,
22705:          '"a"': notEqualLessThan,
22705:          '"Z"': notEqualLessThan,
22705:          "0": looselyEqual,
22705:          "-0": looselyEqual,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualLessThan,
22705:          "{ valueOf: undefined }": notEqualLessThan,
22705:          "[]": notEqualNorDifferent,
22705:          '[""]': notEqualNorDifferent,
22705:          '["a"]': notEqualLessThan,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      '[""]':
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualNorDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": looselyEqual,
22705:          '""': looselyEqual,
22705:          '"a"': notEqualLessThan,
22705:          '"Z"': notEqualLessThan,
22705:          "0": looselyEqual,
22705:          "-0": looselyEqual,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualLessThan,
22705:          "{ valueOf: undefined }": notEqualLessThan,
22705:          "[]": notEqualNorDifferent,
22705:          '[""]': notEqualNorDifferent,
22705:          '["a"]': notEqualLessThan,
22705:          "[0]": notEqualLessThan
22705:        },
22705:      '["a"]':
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualIncomparable,
22705:          "true": notEqualIncomparable,
22705:          "false": notEqualIncomparable,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': looselyEqual,
22705:          '"Z"': notEqualGreaterThan,
22705:          "0": notEqualIncomparable,
22705:          "-0": notEqualIncomparable,
22705:          "1": notEqualIncomparable,
22705:          "Math.E": notEqualIncomparable,
22705:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MIN": notEqualIncomparable,
22705:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
22705:          "JSVAL_INT_MAX": notEqualIncomparable,
22705:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
22705:          "Infinity": notEqualIncomparable,
22705:          "-Infinity": notEqualIncomparable,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualGreaterThan,
22705:          "{ valueOf: undefined }": notEqualGreaterThan,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualNorDifferent,
22705:          "[0]": notEqualGreaterThan
22705:        },
22705:      "[0]":
22705:        {
22705:          "undefined": notEqualIncomparable,
22705:          "null": notEqualNorDifferent,
22705:          "true": notEqualLessThan,
22705:          "false": looselyEqual,
22705:          '""': notEqualGreaterThan,
22705:          '"a"': notEqualLessThan,
22705:          '"Z"': notEqualLessThan,
22705:          "0": looselyEqual,
22705:          "-0": looselyEqual,
22705:          "1": notEqualLessThan,
22705:          "Math.E": notEqualLessThan,
22705:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN": notEqualGreaterThan,
22705:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
22705:          "JSVAL_INT_MAX - 1": notEqualLessThan,
22705:          "JSVAL_INT_MAX": notEqualLessThan,
22705:          "JSVAL_INT_MAX + 1": notEqualLessThan,
22705:          "Infinity": notEqualLessThan,
22705:          "-Infinity": notEqualGreaterThan,
22705:          "NaN": notEqualIncomparable,
22705:          "{}": notEqualLessThan,
22705:          "{ valueOf: undefined }": notEqualLessThan,
22705:          "[]": notEqualGreaterThan,
22705:          '[""]': notEqualGreaterThan,
22705:          '["a"]': notEqualLessThan,
22705:          "[0]": notEqualNorDifferent
22705:        }
22705:     };
22705: 
22705: 
22705: 
22705:   var failures = [];
22705:   function fail(a, ta, b, tb, ex, ac, op)
22705:   {
22705:     failures.push("(" + a + " " + op + " " + b + ") wrong: " +
22705:                   "expected " + ex + ", got " + ac +
22705:                   " (types " + types[ta] + ", " + types[tb] + ")");
22705:   }
22705: 
22705:   var result = false;
22705:   for (var i in values)
22705:   {
22705:     for (var j in values)
22705:     {
22705:       // Constants, so hoist to help JIT know that
22705:       var vala = values[i], valb = values[j];
22705:       var a = vala.value(), b = valb.value();
22705: 
22705:       for (var opname in orderOps)
22705:       {
22705:         var op = orderOps[opname];
22705:         var expect = expected[i][j].order[opname];
22705:         var failed = false;
22705: 
22705:         for (var iter = 0; iter < 5; iter++)
22705:         {
22705:           result = op(a, b);
22705:           failed = failed || result !== expect;
22705:         }
22705: 
22705:         if (failed)
22705:           fail(i, vala.type, j, valb.type, expect, result, opname);
22705:       }
22705: 
22705:       for (var opname in eqOps)
22705:       {
22705:         var op = eqOps[opname];
22705:         var expect = expected[i][j].eq[opname];
22705:         var failed = false;
22705: 
22705:         for (var iter = 0; iter < 5; iter++)
22705:         {
22705:           result = op(a, b);
22705:           failed = failed || result !== expect;
22705:         }
22705: 
22705:         if (failed)
22705:           fail(i, vala.type, j, valb.type, expect, result, opname);
22705:       }
22705:     }
22705:   }
22705: 
22705:   if (failures.length == 0)
22705:     return "no failures reported!";
22705: 
22705:   return "\n" + failures.join(",\n");
22705: }
22705: testComparisons.expected = "no failures reported!";
22705: test(testComparisons);
22705: 
23093: function testCaseAbort()
23093: {
23093:   var four = "4";
23093:   var r = 0;
23093:   for (var i = 0; i < 5; i++)
23093:   {
23093:     switch (i)
23093:     {
23093:       case four: r += 1; break;
23093:       default: r += 2; break;
23093:     }
23093:   }
23093: 
23093:   return "" + r;
23093: }
23093: testCaseAbort.expected = "10";
23093: testCaseAbort.jitstats = {
23093:   recorderAborted: 0
23093: };
23093: test(testCaseAbort);
23093: 
23097: function testApplyCallHelper(f) {
23097:     var r = [];
23097:     for (var i = 0; i < 10; ++i) f.call();
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0]);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0,1);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1]);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2]);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3]);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3,4);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3,4]);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3,4,5);
23097:     r.push(x);
23097:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3,4,5])
23097:     r.push(x);
23097:     return(r.join(","));
23097: }
23097: function testApplyCall() {
23097:     var r = testApplyCallHelper(function (a0,a1,a2,a3,a4,a5,a6,a7) { x = [a0,a1,a2,a3,a4,a5,a6,a7]; });
23097:     r += testApplyCallHelper(function (a0,a1,a2,a3,a4,a5,a6,a7) { x = [a0,a1,a2,a3,a4,a5,a6,a7]; });
23097:     return r;
23097: }
23097: testApplyCall.expected =
23097: ",,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,0,,,,,,,,0,1,,,,,,,0,1,,,,,,,0,1,2,,,,,,0,1,2,,,,,,0,1,2,3,,,,,0,1,2,3,,,,,0,1,2,3,4,,,,0,1,2,3,4,,,,0,1,2,3,4,5,,,0,1,2,3,4,5,," +
23097: ",,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,0,,,,,,,,0,1,,,,,,,0,1,,,,,,,0,1,2,,,,,,0,1,2,,,,,,0,1,2,3,,,,,0,1,2,3,,,,,0,1,2,3,4,,,,0,1,2,3,4,,,,0,1,2,3,4,5,,,0,1,2,3,4,5,,";
23097: test(testApplyCall);
23097: 
23097: function testApplyUnboxHelper(f,a) {
23097:     var q;
23097:     for (var i = 0; i < 10; ++i)
23097:         q = f.apply(f,a);
23097:     return q;
23097: }
23097: function testApplyUnbox() {
23097:     var f = function(x) { return x; }
23097:     return [testApplyUnboxHelper(f,[1]), testApplyUnboxHelper(f,[true])].join(",");
23097: }
23097: testApplyUnbox.expected = "1,true";
23097: test(testApplyUnbox);
23097: 
23097: function testCallPick() {
23097:     function g(x,a) {
23097:         x.f();
23097:     }
23097: 
23097:     var x = [];
23097:     x.f = function() { }
23097: 
23097:     var y = [];
23097:     y.f = function() { }
23097: 
23097:     var z = [x,x,x,x,x,y,y,y,y,y];
23097: 
23097:     for (var i = 0; i < 10; ++i)
23097:         g.call(this, z[i], "");
23097:     return true;
23097: }
23097: testCallPick.expected = true;
23097: test(testCallPick);
23097: 
23106: function testInvertNullAfterNegateNull()
23106: {
23106:   for (var i = 0; i < 5; i++) !null;
23106:   for (var i = 0; i < 5; i++) -null;
23106:   return "no assertion";
23106: }
23106: testInvertNullAfterNegateNull.expected = "no assertion";
23106: test(testInvertNullAfterNegateNull);
23106: 
23106: function testUnaryImacros()
23106: {
23106:   function checkArg(x)
23106:   {
23106:     return 1;
23106:   }
23106: 
23106:   var o = { valueOf: checkArg, toString: null };
23106:   var count = 0;
23106:   var v = 0;
23106:   for (var i = 0; i < 5; i++)
23106:     v += +o + -(-o);
23106: 
23106:   var results = [v === 10 ? "valueOf passed" : "valueOf failed"];
23106: 
23106:   o.valueOf = null;
23106:   o.toString = checkArg;
23106: 
23106:   for (var i = 0; i < 5; i++)
23106:     v += +o + -(-o);
23106: 
23106:   results.push(v === 20 ? "toString passed" : "toString failed");
23106: 
23106:   return results.join(", ");
23106: }
23106: testUnaryImacros.expected = "valueOf passed, toString passed";
23106: test(testUnaryImacros);
23106: 
23114: function testAddAnyInconvertibleObject()
23114: {
23114:   var count = 0;
23714:   function toString() { ++count; if (count == 95) return {}; return "" + count; }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o = {valueOf: undefined, toString: toString};
23114:         var q = 5 + o;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
23714:       return "expected i === 94, got " + i;
23714:     if (q !== "594")
23714:       return "expected q === '594', got " + q + " (type " + typeof q + ")";
23714:     if (count !== 95)
23714:       return "expected count === 95, got " + count;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with 5 + o"; // hey, a rhyme!
23114: 
23114:   return "pass";
23114: }
23114: testAddAnyInconvertibleObject.expected = "pass";
23114: testAddAnyInconvertibleObject.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testAddAnyInconvertibleObject);
23114: 
23114: function testAddInconvertibleObjectAny()
23114: {
23114:   var count = 0;
23714:   function toString()
23714:   {
23714:     ++count;
23714:     if (count == 95)
23714:       return {};
23714:     return "" + count;
23714:   }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o = {valueOf: undefined, toString: toString};
23114:         var q = o + 5;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
23714:       return "expected i === 94, got " + i;
23714:     if (q !== "945")
23714:       return "expected q === '945', got " + q + " (type " + typeof q + ")";
23714:     if (count !== 95)
23714:       return "expected count === 95, got " + count;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with o + 5";
23114: 
23114:   return "pass";
23114: }
23114: testAddInconvertibleObjectAny.expected = "pass";
23114: testAddInconvertibleObjectAny.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testAddInconvertibleObjectAny);
23114: 
23114: function testAddInconvertibleObjectInconvertibleObject()
23114: {
23114:   var count1 = 0;
23714:   function toString1() { ++count1; if (count1 == 95) return {}; return "" + count1; }
23114:   var count2 = 0;
23714:   function toString2() { ++count2; if (count2 == 95) return {}; return "" + count2; }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o1 = {valueOf: undefined, toString: toString1};
23114:         var o2 = {valueOf: undefined, toString: toString2};
23114:         var q = o1 + o2;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
23714:       return "expected i === 94, got " + i;
23714:     if (q !== "9494")
23714:       return "expected q === '9494', got " + q + " (type " + typeof q + ")";
23714:     if (count1 !== 95)
23714:       return "expected count1 === 95, got " + count1;
23714:     if (count2 !== 94)
23714:       return "expected count2 === 94, got " + count2;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with o1 + o2";
23114: 
23114:   return "pass";
23114: }
23114: testAddInconvertibleObjectInconvertibleObject.expected = "pass";
23114: testAddInconvertibleObjectInconvertibleObject.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testAddInconvertibleObjectInconvertibleObject);
23114: 
23114: function testBitOrAnyInconvertibleObject()
23114: {
23114:   var count = 0;
23714:   function toString() { ++count; if (count == 95) return {}; return count; }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o = {valueOf: undefined, toString: toString};
23714:         var q = 1 | o;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
23714:       return "expected i === 94, got " + i;
23714:     if (q !== 95)
23714:       return "expected q === 95, got " + q;
23714:     if (count !== 95)
23714:       return "expected count === 95, got " + count;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with 2 | o"; // hey, a rhyme!
23114: 
23114:   return "pass";
23114: }
23114: testBitOrAnyInconvertibleObject.expected = "pass";
23114: testBitOrAnyInconvertibleObject.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testBitOrAnyInconvertibleObject);
23114: 
23114: function testBitOrInconvertibleObjectAny()
23114: {
23114:   var count = 0;
23714:   function toString() { ++count; if (count == 95) return {}; return count; }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o = {valueOf: undefined, toString: toString};
23714:         var q = o | 1;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
24240:       return "expected i === 94, got " + i;
23714:     if (q !== 95)
23714:       return "expected q === 95, got " + q;
23714:     if (count !== 95)
23714:       return "expected count === 95, got " + count;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with o | 2";
23114: 
23114:   return "pass";
23114: }
23114: testBitOrInconvertibleObjectAny.expected = "pass";
23114: testBitOrInconvertibleObjectAny.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testBitOrInconvertibleObjectAny);
23114: 
23114: function testBitOrInconvertibleObjectInconvertibleObject()
23114: {
23114:   var count1 = 0;
23714:   function toString1() { ++count1; if (count1 == 95) return {}; return count1; }
23114:   var count2 = 0;
23714:   function toString2() { ++count2; if (count2 == 95) return {}; return count2; }
23114: 
23114:   var threw = false;
23114:   try
23114:   {
23714:     for (var i = 0; i < 100; i++)
23114:     {
23114:         var o1 = {valueOf: undefined, toString: toString1};
23114:         var o2 = {valueOf: undefined, toString: toString2};
23114:         var q = o1 | o2;
23114:     }
23114:   }
23114:   catch (e)
23114:   {
23114:     threw = true;
23714:     if (i !== 94)
23714:       return "expected i === 94, got " + i;
23714:     if (q !== 94)
23714:       return "expected q === 94, got " + q;
23714:     if (count1 !== 95)
23714:       return "expected count1 === 95, got " + count1;
23714:     if (count2 !== 94)
23714:       return "expected count2 === 94, got " + count2;
23114:   }
23114:   if (!threw)
23114:     return "expected throw with o1 | o2";
23114: 
23114:   return "pass";
23114: }
23114: testBitOrInconvertibleObjectInconvertibleObject.expected = "pass";
23114: testBitOrInconvertibleObjectInconvertibleObject.jitstats = {
23114:   recorderStarted: 1,
23114:   recorderAborted: 0,
23714:   sideExitIntoInterpreter: 93
23114: };
23114: test(testBitOrInconvertibleObjectInconvertibleObject);
23114: 
23115: function testCaseTypeMismatchBadness()
23115: {
23115:   for (var z = 0; z < 3; ++z)
23115:   {
23115:     switch ("")
23115:     {
23115:       default:
23115:       case 9:
23115:         break;
23115: 
23115:       case "":
23115:       case <x/>:
23115:         break;
23115:     }
23115:   }
23115: 
23115:   return "no crash";
23115: }
23115: testCaseTypeMismatchBadness.expected = "no crash";
23115: testCaseTypeMismatchBadness.jitstats = {
23115:     recorderAborted: 0
23115: };
23115: test(testCaseTypeMismatchBadness);
23115: 
23117: function testDoubleComparison()
23117: {
23117:   for (var i = 0; i < 500000; ++i)
23117:   {
23117:     switch (1 / 0)
23117:     {
23117:       case Infinity:
23117:     }
23117:   }
23117: 
23117:   return "finished";
23117: }
23117: testDoubleComparison.expected = "finished";
23117: testDoubleComparison.jitstats = {
23117:   sideExitIntoInterpreter: 1
23117: };
23117: test(testDoubleComparison);
23117: 
23231: function testLirBufOOM()
23231: {
23231:     var a = [
23231:              "12345678901234",
23231:              "123456789012",
23231:              "1234567890123456789012345678",
23231:              "12345678901234567890123456789012345678901234567890123456",
23231:              "f",
23231:              "$",
23231:              "",
23231:              "f()",
23231:              "(\\*)",
23231:              "b()",
23231:              "()",
23231:              "(#)",
23231:              "ABCDEFGHIJK",
23231:              "ABCDEFGHIJKLM",
23231:              "ABCDEFGHIJKLMNOPQ",
23231:              "ABCDEFGH",
23231:              "(.)",
23231:              "(|)",
23231:              "()$",
23231:              "/()",
23231:              "(.)$"
23231:              ];
23231:     
23231:     for (var j = 0; j < 200; ++j) {
23231:         var js = "" + j;
23231:         for (var i = 0; i < a.length; i++)
23231:             "".match(a[i] + js)
23231:     }
23231:     return "ok";
23231: }
23231: testLirBufOOM.expected = "ok";
23231: test(testLirBufOOM);
23231: 
23702: function testStringResolve() {
23702:     var x = 0;
23702:     for each (let d in [new String('q'), new String('q'), new String('q')]) {
23702:         if (("" + (0 in d)) === "true")
23702:             x++;
23702:     }
23702:     return x;
23702: }
23702: testStringResolve.expected = 3;
23702: test(testStringResolve);
23702: 
24246: //test no multitrees assert
24246: function testGlobalMultitrees1() {
24246:     (function() { 
24246:       for (var j = 0; j < 4; ++j) {
24246:         for each (e in ['A', 1, 'A']) {
24246:         }
24246:       }
24246:     })();
24246:     return true;
24246: }
24246: testGlobalMultitrees1.expected = true;
24246: test(testGlobalMultitrees1);
24246: 
24247: var q = [];
24247: for each (b in [0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF]) {
24247:   for each (let e in [{}, {}, {}, "", {}]) { 
24247:     b = (b | 0x40000000) + 1;
24247:     q.push(b);
24247:   }
24247: }
24247: function testLetWithUnstableGlobal() {
24247:     return q.join(",");
24247: }
24247: testLetWithUnstableGlobal.expected = "2147483648,-1073741823,-1073741822,-1073741821,-1073741820,2147483648,-1073741823,-1073741822,-1073741821,-1073741820,2147483648,-1073741823,-1073741822,-1073741821,-1073741820";
24247: test(testLetWithUnstableGlobal);
24247: delete b;
24247: delete q;
24247: 
24283: for each (testBug474769_b in [1, 1, 1, 1.5, 1, 1]) {
24283:     (function() { for each (let testBug474769_h in [0, 0, 1.4, ""]) {} })()
24283: }
24283: function testBug474769() {
24283:     return testBug474769_b;
24283: }
24283: testBug474769.expected = 1;
24283: test(testBug474769);
24283: 
24308: function testReverseArgTypes() {
24308:     for (var j = 0; j < 4; ++j) ''.replace('', /x/);
24308:     return 1;
24308: }
24308: testReverseArgTypes.expected = 1;
24308: test(testReverseArgTypes);
24308: 
24363: function testBug458838() {
24363:     var a = 1;
24363:     function g() {
24363:         var b = 0
24363:             for (var i = 0; i < 10; ++i) {
24363:                 b += a;
24363:             }
24363:         return b;
24363:     }
24363: 
24363:     return g();
24363: }
24363: testBug458838.expected = 10;
24363: testBug458838.jitstats = {
24363:   recorderStarted: 1,
24837:   recorderAborted: 1,
24837:   traceCompleted: 0
24363: };
24363: test(testBug458838);
24363: 
24376: function testInterpreterReentry() {
24376:     this.__defineSetter__('x', function(){})
24376:     for (var j = 0; j < 5; ++j) { x = 3; }
24376:     return 1;
24376: }
24376: testInterpreterReentry.expected = 1;
24376: test(testInterpreterReentry);
24376: 
24376: function testInterpreterReentry2() {
24376:     var a = false;
24376:     var b = {};
24376:     var c = false;
24376:     var d = {};
24376:     this.__defineGetter__('e', function(){});
24376:     for (let f in this) print(f);
24376:     [1 for each (g in this) for each (h in [])]
24376:     return 1;
24376: }
24376: testInterpreterReentry2.expected = 1;
24376: test(testInterpreterReentry2);
24376: 
24376: function testInterpreterReentry3() {
24376:     for (let i=0;i<5;++i) this["y" + i] = function(){};
24376:     this.__defineGetter__('e', function (x2) { yield; });
24376:     [1 for each (a in this) for (b in {})];
24376:     return 1;
24376: }
24376: testInterpreterReentry3.expected = 1;
24376: test(testInterpreterReentry3);
24376: 
24489: function testInterpreterReentry4() {
24489:     var obj = {a:1, b:1, c:1, d:1, get e() 1000 };
24489:     for (var p in obj)
24489:         obj[p];
24489: }
24489: test(testInterpreterReentry4);
24489: 
24489: function testInterpreterReentry5() {
24489:     var arr = [0, 1, 2, 3, 4];
24489:     arr.__defineGetter__("4", function() 1000);
24489:     for (var i = 0; i < 5; i++)
24489:         arr[i];
24489:     for (var p in arr)
24489:         arr[p];
24489: }
24489: test(testInterpreterReentry5);
24489: 
24489: function testInterpreterReentry6() {
24489:     var obj = {a:1, b:1, c:1, d:1, set e(x) { this._e = x; }};
24489:     for (var p in obj)
24489:         obj[p] = "grue";
24489:     return obj._e;
24489: }
24489: testInterpreterReentry6.expected = "grue";
24489: test(testInterpreterReentry6);
24489: 
24489: function testInterpreterReentry7() {
24489:     var arr = [0, 1, 2, 3, 4];
24489:     arr.__defineSetter__("4", function(x) { this._4 = x; });
24489:     for (var i = 0; i < 5; i++)
24489:         arr[i] = "grue";
24489:     var tmp = arr._4;
24489:     for (var p in arr)
24489:         arr[p] = "bleen";
24489:     return tmp + " " + arr._4;
24489: }
24489: testInterpreterReentry7.expected = "grue bleen";
24489: test(testInterpreterReentry7);
24612: 
24612: // Bug 462027 comment 54.
24612: function testInterpreterReentery8() {
24612:     var e = <x><y/></x>;
24612:     for (var j = 0; j < 4; ++j) { +[e]; }
24612: }
24612: test(testInterpreterReentery8);
24489: 
24846: function testHolePushing() {
24846:     var a = ["foobar", "baz"];
24846:     for (var i = 0; i < 5; i++)
24846:         a = [, "overwritten", "new"];
24846:     var s = "[";
24846:     for (i = 0; i < a.length; i++) {
24846:         s += (i in a) ? a[i] : "<hole>";
24846:         if (i != a.length - 1)
24846:             s += ",";
24846:     }
24846:     return s + "], " + (0 in a);
24846: }
24846: testHolePushing.expected = "[<hole>,overwritten,new], false";
24846: test(testHolePushing);
24846: 
24858: function testDeepBail1() {
24858:     var y = <z/>;
24858:     for (var i = 0; i < RUNLOOP; i++)
24858:         "" in y;
24858: }
24858: test(testDeepBail1);
24858: 
24861: /* Array comprehension tests */
24861: 
24861: function Range(start, stop) {
24861:     this.i = start;
24861:     this.stop = stop;
24861: }
24861: Range.prototype = {
24861:     __iterator__: function() this,
24861:     next: function() {
24861:         if (this.i >= this.stop)
24861:             throw StopIteration;
24861:         return this.i++;
24861:     }
24861: };
24861: 
24861: function range(start, stop) {
24861:     return new Range(start, stop);
24861: }
24861: 
24861: function testArrayComp1() {
24861:     return [a for (a in range(0, 10))].join('');
24861: }
24861: testArrayComp1.expected='0123456789';
24861: test(testArrayComp1);
24861: 
24861: function testArrayComp2() {
24861:     return [a + b for (a in range(0, 5)) for (b in range(0, 5))].join('');
24861: }
24861: testArrayComp2.expected='0123412345234563456745678';
24861: test(testArrayComp2);
24861: 
24867: function testSwitchUndefined()
24867: {
24867:   var x = undefined;
24867:   var y = 0;
24867:   for (var i = 0; i < 5; i++)
24867:   {
24867:     switch (x)
24867:     {
24867:       default:
24867:         y++;
24867:     }
24867:   }
24867:   return y;
24867: }
24867: testSwitchUndefined.expected = 5;
24867: test(testSwitchUndefined);
24867: 
24877: function testGeneratorDeepBail() {
24877:     function g() { yield 2; }
24877:     var iterables = [[1], [], [], [], g()];
24877: 
24877:     var total = 0;
24877:     for (let i = 0; i < iterables.length; i++)
24877:         for each (let j in iterables[i])
24877:                      total += j;
24877:     return total;
24877: }
24877: testGeneratorDeepBail.expected = 3;
24877: test(testGeneratorDeepBail);
24877: 
25092: function testRegexpGet() {
25092:     var re = /hi/;
25092:     var a = [];
25092:     for (let i = 0; i < 5; ++i)
25092:         a.push(re.source);
25092:     return a.toString();
25092: }
25092: testRegexpGet.expected = "hi,hi,hi,hi,hi";
25092: test(testRegexpGet);
25092: 
25478: function testThrowingObjectEqUndefined()
25478: {
25478:   try
25478:   {
25478:     var obj = { toString: function() { throw 0; } };
25478:     for (var i = 0; i < 5; i++)
25478:       "" + (obj == undefined);
25478:     return i === 5;
25478:   }
25478:   catch (e)
25478:   {
25478:     return "" + e;
25478:   }
25478: }
25478: testThrowingObjectEqUndefined.expected = true;
25478: testThrowingObjectEqUndefined.jitstats = {
25478:   sideExitIntoInterpreter: 1
25478: };
25478: test(testThrowingObjectEqUndefined);
25478: 
25478: function x4(v) { return "" + v + v + v + v; }
25478: function testConvertibleObjectEqUndefined()
25478: {
25478:   var compares =
25478:     [
25478:      false, false, false, false,
25478:      undefined, undefined, undefined, undefined,
25478:      false, false, false, false,
25478:      undefined, undefined, undefined, undefined,
25478:      false, false, false, false,
25478:      undefined, undefined, undefined, undefined,
25478:      false, false, false, false,
25478:      undefined, undefined, undefined, undefined,
25478:      false, false, false, false,
25478:      undefined, undefined, undefined, undefined,
25478:     ];
25478:   var count = 0;
25478:   var obj = { valueOf: function() { count++; return 1; } };
25478:   var results = compares.map(function(v) { return "unwritten"; });
25478: 
25478:   for (var i = 0, sz = compares.length; i < sz; i++)
25478:     results[i] = compares[i] == obj;
25478: 
25478:   return results.join("") + count;
25478: }
25478: testConvertibleObjectEqUndefined.expected =
25478:   x4(false) + x4(false) + x4(false) + x4(false) + x4(false) + x4(false) +
25478:   x4(false) + x4(false) + x4(false) + x4(false) + "20";
25478: testConvertibleObjectEqUndefined.jitstats = {
25627:   sideExitIntoInterpreter: 3
25478: };
25478: test(testConvertibleObjectEqUndefined);
25478: 
25636: function testUndefinedPropertyAccess() {
25636:     var x = [1,2,3];
25636:     var y = {};
25636:     var a = { foo: 1 };
25636:     y.__proto__ = x;
25636:     var z = [x, x, x, y, y, y, y, a, a, a];
25636:     var s = "";
25636:     for (var i = 0; i < z.length; ++i)
25636:         s += z[i].foo;
25636:     return s;
25636: }
25636: testUndefinedPropertyAccess.expected = "undefinedundefinedundefinedundefinedundefinedundefinedundefined111";
25636: testUndefinedPropertyAccess.jitstats = {
25636:     traceCompleted: 3
25636: };
25636: test(testUndefinedPropertyAccess);
25631: 
25879: q = "";
25879: function g() { q += "g"; }
25879: function h() { q += "h"; }
25879: a = [g, g, g, g, h];
25879: for (i=0; i<5; i++) { f = a[i];  f(); }
25879: 
25879: function testRebranding() {
25879:     return q;
25879: }
25879: testRebranding.expected = "ggggh";
25879: test(testRebranding);
25879: delete q;
25879: delete g;
25879: delete h;
25879: delete a;
25879: delete f;
25879: 
25887: function testLambdaCtor() {
25887:     var a = [];
25887:     for (var x = 0; x < RUNLOOP; ++x) {
25887:         var f = function(){};
25887:         a[a.length] = new f;
25887:     }
25887: 
25887:     // This prints false until the upvar2 bug is fixed:
25887:     // print(a[HOTLOOP].__proto__ !== a[HOTLOOP-1].__proto__);
25887: 
25887:     // Assert that the last f was properly constructed.
25887:     return a[RUNLOOP-1].__proto__ === f.prototype;
25887: }
25887: testLambdaCtor.expected = true;
25887: test(testLambdaCtor);
25887: 
25935: function testNonStubGetter() {
25935:     let ([] = false) { (this.watch("x", /a/g)); };
25935:     (function () { (eval("(function(){for each (x in [1, 2, 2]);});"))(); })();
25935:     this.unwatch("x");
25935:     return "ok";
25935: }
25935: testNonStubGetter.expected = "ok";
25935: test(testNonStubGetter);
25935: 
26008: function testString() {
26008:     var q;
26008:     for (var i = 0; i <= RUNLOOP; ++i) {
26008:         q = [];
26008:         q.push(String(void 0));
26008:         q.push(String(true));
26008:         q.push(String(5));
26008:         q.push(String(5.5));
26008:         q.push(String("5"));
26008:         q.push(String([5]));
26008:     }
26008:     return q.join(",");
26008: }
26008: testString.expected = "undefined,true,5,5.5,5,5";
26008: testString.jitstats = {
26008:     recorderStarted: 1,
26008:     sideExitIntoInterpreter: 1
26008: };
26008: test(testString);
26008: 
26016: function testToStringBeforeValueOf()
26016: {
26016:   var o = {toString: function() { return "s"; }, valueOf: function() { return "v"; } };
26016:   var a = [];
26016:   for (var i = 0; i < 10; i++)
26016:     a.push(String(o));
26016:   return a.join(",");
26016: }
26016: testToStringBeforeValueOf.expected = "s,s,s,s,s,s,s,s,s,s";
26016: testToStringBeforeValueOf.jitstats = {
26016:   recorderStarted: 1,
26016:   sideExitIntoInterpreter: 1
26016: };
26016: test(testToStringBeforeValueOf);
26016: 
26036: function testNullToString()
26036: {
26036:   var a = [];
26036:   for (var i = 0; i < 10; i++)
26036:     a.push(String(null));
26036:   for (i = 0; i < 10; i++) {
26036:     var t = typeof a[i];
26036:     if (t != "string")
26036:       a.push(t);
26036:   }
26036:   return a.join(",");
26036: }
26036: testNullToString.expected = "null,null,null,null,null,null,null,null,null,null";
26036: testNullToString.jitstats = {
26036:   recorderStarted: 2,
26036:   sideExitIntoInterpreter: 2,
26036:   recorderAborted: 0
26036: };
26036: test(testNullToString);
26036: 
26078: function testAddNull()
26078: {
26078:   var rv;
26078:   for (var x = 0; x < HOTLOOP + 1; ++x)
26078:     rv = null + [,,];
26078:   return rv;
26078: }
26078: testAddNull.expected = "null,";
26078: testAddNull.jitstats = {
26078:   recorderStarted: 1,
26078:   sideExitIntoInterpreter: 1,
26078:   recorderAborted: 0
26078: };
26078: test(testAddNull);
26078: 
26016: 
23105: /*****************************************************************************
23105:  *                                                                           *
23105:  *  _____ _   _  _____ ______ _____ _______                                  *
23105:  * |_   _| \ | |/ ____|  ____|  __ \__   __|                                 *
23105:  *   | | |  \| | (___ | |__  | |__) | | |                                    *
23105:  *   | | | . ` |\___ \|  __| |  _  /  | |                                    *
23105:  *  _| |_| |\  |____) | |____| | \ \  | |                                    *
23105:  * |_____|_| \_|_____/|______|_|  \_\ |_|                                    *
23105:  *                                                                           *
23105:  *                                                                           *
23105:  *  _______ ______  _____ _______ _____                                      *
23105:  * |__   __|  ____|/ ____|__   __/ ____|                                     *
23105:  *    | |  | |__  | (___    | | | (___                                       *
23105:  *    | |  |  __|  \___ \   | |  \___ \                                      *
23105:  *    | |  | |____ ____) |  | |  ____) |                                     *
23105:  *    |_|  |______|_____/   |_| |_____/                                      *
23105:  *                                                                           *
23105:  *                                                                           *
23105:  *  ____  ______ ______ ____  _____  ______    _    _ ______ _____  ______   *
23105:  * |  _ \|  ____|  ____/ __ \|  __ \|  ____|  | |  | |  ____|  __ \|  ____|  *
23105:  * | |_) | |__  | |__ | |  | | |__) | |__     | |__| | |__  | |__) | |__     *
23105:  * |  _ <|  __| |  __|| |  | |  _  /|  __|    |  __  |  __| |  _  /|  __|    *
23105:  * | |_) | |____| |   | |__| | | \ \| |____   | |  | | |____| | \ \| |____   *
23105:  * |____/|______|_|    \____/|_|  \_\______|  |_|  |_|______|_|  \_\______|  *
23105:  *                                                                           *
23105:  *****************************************************************************/
23105: 
25896: load(gSrcdir + "/math-trace-tests.js");
23105: 
23105: // BEGIN MANDELBROT STUFF
23105: // XXXbz I would dearly like to wrap it up into a function to avoid polluting
23105: // the global scope, but the function ends up heavyweight, and then we lose on
23105: // the jit.
24617: if (gDoMandelbrotTest) {
25896: load(gSrcdir + "/mandelbrot-results.js");
23105: //function testMandelbrotAll() {
23105:   // Configuration options that affect which codepaths we follow.
23105:   var doImageData = true;
23105:   var avoidSparseArray = true;
23105: 
23105:   // Control of iteration numbers and sizing.  We'll do
23105:   // scaler * colorNames.length iterations or so before deciding that we
23105:   // don't escape.
23105:   const scaler = 5;
23105:   const numRows = 600;
23105:   const numCols = 600;
23105: 
23105:   const colorNames = [
23105:     "black",
23105:     "green",
23105:     "blue",
23105:     "red",
23105:     "purple",
23105:     "orange",
23105:     "cyan",
23105:     "yellow",
23105:     "magenta",
23105:     "brown",
23105:     "pink",
23105:     "chartreuse",
23105:     "darkorange",
23105:     "crimson",
23105:     "gray",
23105:     "deeppink",
23105:     "firebrick",
23105:     "lavender",
23105:     "lawngreen",
23105:     "lightsalmon",
23105:     "lime",
23105:     "goldenrod"
23105:   ];
23105:   const threshold = (colorNames.length - 1) * scaler;
23105: 
23105:   // Now set up our colors
23105:   var colors = [];
23105:   // 3-part for loop (iterators buggy, we will add a separate test for them)
23105:   for (var colorNameIdx = 0; colorNameIdx < colorNames.length; ++colorNameIdx) {
23105:   //for (var colorNameIdx in colorNames) {
23105:     colorNameIdx = parseInt(colorNameIdx);
23105:     colors.push([colorNameIdx, colorNameIdx, colorNameIdx, 0]);
23105:   }
23105: 
23105:   // Storage for our point data
23105:   var points;
23105: 
23105:   var scratch = {};
23105:   var scratchZ = {};
23105:   function complexMult(a, b) {
23105:     var newr = a.r * b.r - a.i * b.i;
23105:     var newi = a.r * b.i + a.i * b.r;
23105:     scratch.r = newr;
23105:     scratch.i = newi;
23105:     return scratch;
23105:   }
23105:   function complexAdd(a, b) {
23105:     scratch.r = a.r + b.r;
23105:     scratch.i = a.i + b.i;
23105:     return scratch;
23105:   }
23105:   function abs(a) {
23105:     return Math.sqrt(a.r * a.r + a.i * a.i);
23105:   }
23105: 
23105:   function escapeAbsDiff(normZ, absC) {
23105:     var absZ = Math.sqrt(normZ);
23105:     return normZ > absZ + absC;
23105:   }
23105: 
23105:   function escapeNorm2(normZ) {
23105:     return normZ > 4;
23105:   }
23105: 
23105:   function fuzzyColors(i) {
23105:     return Math.floor(i / scaler) + 1;
23105:   }
23105: 
23105:   function moddedColors(i) {
23105:     return (i % (colorNames.length - 1)) + 1;
23105:   }
23105: 
23105:   function computeEscapeSpeedObjects(real, imag) {
23105:     var c = { r: real, i: imag }
23105:     scratchZ.r = scratchZ.i = 0;
23105:     var absC = abs(c);
23105:     for (var i = 0; i < threshold; ++i) {
23105:       scratchZ = complexAdd(c, complexMult(scratchZ, scratchZ));
23105:       if (escape(scratchZ.r * scratchZ.r + scratchZ.i * scratchZ.i,
23105:                  absC)) {
23105:         return colorMap(i);
23105:       }
23105:     }
23105:     return 0;
23105:   }
23105: 
23105:   function computeEscapeSpeedOneObject(real, imag) {
23105:     // fold in the fact that we start with 0
23105:     var r = real;
23105:     var i = imag;
23105:     var absC = abs({r: real, i: imag});
23105:     for (var j = 0; j < threshold; ++j) {
23105:       var r2 = r * r;
23105:       var i2 = i * i;
23105:       if (escape(r2 + i2, absC)) {
23105:         return colorMap(j);
23105:       }
23105:       i = 2 * r * i + imag;
23105:       r = r2 - i2 + real;
23105:     }
23105:     return 0;
23105:   }
23105: 
23105:   function computeEscapeSpeedDoubles(real, imag) {
23105:     // fold in the fact that we start with 0
23105:     var r = real;
23105:     var i = imag;
23105:     var absC = Math.sqrt(real * real + imag * imag);
23105:     for (var j = 0; j < threshold; ++j) {
23105:       var r2 = r * r;
23105:       var i2 = i * i;
23105:       if (escape(r2 + i2, absC)) {
23105:         return colorMap(j);
23105:       }
23105:       i = 2 * r * i + imag;
23105:       r = r2 - i2 + real;
23105:     }
23105:     return 0;
23105:   }
23105: 
23105:   var computeEscapeSpeed = computeEscapeSpeedDoubles;
23105:   var escape = escapeNorm2;
23105:   var colorMap = fuzzyColors;
23105: 
23105:   function addPointOrig(pointArray, n, i, j) {
23105:     if (!points[n]) {
23105:       points[n] = [];
23105:       points[n].push([i, j, 1, 1]);
23105:     } else {
23105:       var point = points[n][points[n].length-1];
23105:       if (point[0] == i && point[1] == j - point[3]) {
23105:         ++point[3];
23105:       } else {
23105:         points[n].push([i, j, 1, 1]);
23105:       }
23105:     }
23105:   }
23105: 
23105:   function addPointImagedata(pointArray, n, col, row) {
23105:     var slotIdx = ((row * numCols) + col) * 4;
23105:     pointArray[slotIdx] = colors[n][0];
23105:     pointArray[slotIdx+1] = colors[n][1];
23105:     pointArray[slotIdx+2] = colors[n][2];
23105:     pointArray[slotIdx+3] = colors[n][3];
23105:   }
24841: 
23105:   function createMandelSet() {
23105:     var realRange = { min: -2.1, max: 1 };
23105:     var imagRange = { min: -1.5, max: 1.5 };
23105: 
23105:     var addPoint;
23105:     if (doImageData) {
23105:       addPoint = addPointImagedata;
23105:       points = new Array(4*numCols*numRows);
23105:       if (avoidSparseArray) {
23105:         for (var idx = 0; idx < 4*numCols*numRows; ++idx) {
23105:           points[idx] = 0;
23105:         }
23105:       }
23105:     } else {
23105:       addPoint = addPointOrig;
23105:       points = [];
23105:     }
23105:     var realStep = (realRange.max - realRange.min)/numCols;
23105:     var imagStep = (imagRange.min - imagRange.max)/numRows;
23105:     for (var i = 0, curReal = realRange.min;
23105:          i < numCols;
23105:          ++i, curReal += realStep) {
23105:       for (var j = 0, curImag = imagRange.max;
23105:            j < numRows;
23105:            ++j, curImag += imagStep) {
23105:         var n = computeEscapeSpeed(curReal, curImag);
23105:         addPoint(points, n, i, j)
23105:       }
23105:     }
23105:     var result;
23105:     if (doImageData) {
23105:       if (colorMap == fuzzyColors) {
23105:         result = mandelbrotImageDataFuzzyResult;
23105:       } else {
23105:         result = mandelbrotImageDataModdedResult;
23105:       }
23105:     } else {
23105:       result = mandelbrotNoImageDataResult;
23105:     }
23105:     return points.toSource() == result;
23105:   }
23105: 
23105:   createMandelSet.expected = true;
23105: 
23105:   const escapeTests = [ escapeAbsDiff ];
23105:   const colorMaps = [ fuzzyColors, moddedColors ];
23105:   const escapeComputations = [ computeEscapeSpeedObjects,
23105:                                computeEscapeSpeedOneObject,
23105:                                computeEscapeSpeedDoubles ];
23105:   // Test all possible escape-speed generation codepaths, using the
23105:   // imageData + sparse array avoidance storage.
23105:   doImageData = true;
23105:   avoidSparseArray = true;
23105:   for (var escapeIdx in escapeTests) {
23105:     escape = escapeTests[escapeIdx];
23105:     for (var colorMapIdx in colorMaps) {
23105:       colorMap = colorMaps[colorMapIdx];
23105:       for (var escapeComputationIdx in escapeComputations) {
23105:         computeEscapeSpeed = escapeComputations[escapeComputationIdx];
23105:         test(createMandelSet);
23105:       }
23105:     }
23105:   }
23105: 
23105:   // Test all possible storage strategies. Note that we already tested
23105:   // doImageData == true with avoidSparseArray == true.
23105:   escape = escapeAbsDiff;
23105:   colorMap = fuzzyColors; // This part doesn't really matter too much here
23105:   computeEscapeSpeed = computeEscapeSpeedDoubles;
23105: 
23105:   doImageData = true;
23105:   avoidSparseArray = false;
23105:   test(createMandelSet);
23105: 
23105:   escape = escapeNorm2;
23105:   doImageData = false;  // avoidSparseArray doesn't matter here
23105:   test(createMandelSet);
23105: //}
24841: //testMandelbrotAll();
24617: } /* if (gDoMandelbrotTest) */
23105: // END MANDELBROT STUFF
23105: 
23105: /*****************************************************************************
23105:  *  _   _  ____     _   __  ____  _____  ______                              *
23105:  * | \ | |/ __ \   |  \/  |/ __ \|  __ \|  ____|                             *
23105:  * |  \| | |  | |  | \  / | |  | | |__) | |__                                *
23105:  * | . ` | |  | |  | |\/| | |  | |  _  /|  __|                               *
23105:  * | |\  | |__| |  | |  | | |__| | | \ \| |____                              *
23105:  * |_| \_|\____/   |_|  |_|\____/|_|  \_\______|                             *
23105:  *                                                                           *
23105:  *  _______ ______  _____ _______ _____                                      *
23105:  * |__   __|  ____|/ ____|__   __/ ____|                                     *
23105:  *    | |  | |__  | (___    | | | (___                                       *
23105:  *    | |  |  __|  \___ \   | |  \___ \                                      *
23105:  *    | |  | |____ ____) |  | |  ____) |                                     *
23105:  *    |_|  |______|_____/   |_| |_____/                                      *
23105:  *                                                                           *
23105:  *           ______ _______ ______ _____     _    _ ______ _____  ______ _   *
23105:  *     /\   |  ____|__   __|  ____|  __ \   | |  | |  ____|  __ \|  ____| |  *
23105:  *    /  \  | |__     | |  | |__  | |__) |  | |__| | |__  | |__) | |__  | |  *
23105:  *   / /\ \ |  __|    | |  |  __| |  _  /   |  __  |  __| |  _  /|  __| | |  *
23105:  *  / ____ \| |       | |  | |____| | \ \   | |  | | |____| | \ \| |____|_|  *
23105:  * /_/    \_\_|       |_|  |______|_|  \_\  |_|  |_|______|_|  \_\______(_)  *
23105:  *                                                                           *
23105:  *****************************************************************************/
23105: 
21444: /* NOTE: Keep this test last, since it screws up all for...in loops after it. */
21435: function testGlobalProtoAccess() {
21435:     return "ok";
21435: }
21435: this.__proto__.a = 3; for (var j = 0; j < 4; ++j) { [a]; }
21435: testGlobalProtoAccess.expected = "ok";
21435: test(testGlobalProtoAccess);
21435: 
17767: /* Keep these at the end so that we can see the summary after the trace-debug spew. */
25896: if (gReportSummary) {
17942:     print("\npassed:", passes.length && passes.join(","));
17942:     print("\nFAILED:", fails.length && fails.join(","));
25896:  }
