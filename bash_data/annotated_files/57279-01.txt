    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsPrintObject.h"
    1: #include "nsIContentViewer.h"
    1: #include "nsIDOMDocument.h"
28371: #include "nsContentUtils.h"
35581: #include "nsIInterfaceRequestorUtils.h"
35581: #include "nsPIDOMWindow.h"
35581: #include "nsGkAtoms.h"
35581: #include "nsComponentManagerUtils.h"
35581: #include "nsIDocShellTreeItem.h"
    1: 
    1: //---------------------------------------------------
    1: //-- nsPrintObject Class Impl
    1: //---------------------------------------------------
    1: nsPrintObject::nsPrintObject() :
    1:   mContent(nsnull), mFrameType(eFrame), mParent(nsnull),
    1:   mHasBeenPrinted(PR_FALSE), mDontPrint(PR_TRUE), mPrintAsIs(PR_FALSE),
    1:   mSharedPresShell(PR_FALSE), mInvisible(PR_FALSE),
    1:   mShrinkRatio(1.0), mZoomRatio(1.0)
    1: {
    1: }
    1: 
    1: 
    1: nsPrintObject::~nsPrintObject()
    1: {
24551:   for (PRUint32 i=0;i<mKids.Length();i++) {
24551:     nsPrintObject* po = mKids[i];
    1:     delete po;
    1:   }
    1: 
    1:   DestroyPresentation();
57279:   mDocShell = nsnull;
57279:   mTreeOwner = nsnull; // mTreeOwner must be released after mDocShell; 
    1: }
    1: 
    1: //------------------------------------------------------------------
    1: nsresult 
35581: nsPrintObject::Init(nsIDocShell* aDocShell, nsIDOMDocument* aDoc,
35581:                     PRBool aPrintPreview)
    1: {
35581:   mPrintPreview = aPrintPreview;
35581: 
35581:   if (mPrintPreview || mParent) {
    1:     mDocShell = aDocShell;
35581:   } else {
57279:     mTreeOwner = do_GetInterface(aDocShell);
35581:     nsCOMPtr<nsIDocShellTreeItem> item = do_QueryInterface(aDocShell);
35581:     PRInt32 itemType = 0;
35581:     item->GetItemType(&itemType);
35581:     // Create a container docshell for printing.
35581:     mDocShell = do_CreateInstance("@mozilla.org/docshell;1");
35581:     NS_ENSURE_TRUE(mDocShell, NS_ERROR_OUT_OF_MEMORY);
35581:     nsCOMPtr<nsIDocShellTreeItem> newItem = do_QueryInterface(mDocShell);
35581:     newItem->SetItemType(itemType);
57279:     newItem->SetTreeOwner(mTreeOwner);
35581:   }
    1:   NS_ENSURE_TRUE(mDocShell, NS_ERROR_FAILURE);
    1: 
35581:   nsCOMPtr<nsIDOMDocument> dummy = do_GetInterface(mDocShell);
    1:   nsCOMPtr<nsIContentViewer> viewer;
35581:   mDocShell->GetContentViewer(getter_AddRefs(viewer));
35581:   NS_ENSURE_STATE(viewer);
    1: 
35581:   nsCOMPtr<nsIDocument> doc = do_QueryInterface(aDoc);
35581:   NS_ENSURE_STATE(doc);
    1: 
35581:   if (mParent) {
35581:     nsCOMPtr<nsPIDOMWindow> window = doc->GetWindow();
35581:     if (window) {
35581:       mContent = do_QueryInterface(window->GetFrameElementInternal());
35581:     }
35581:     mDocument = doc;
35581:     return NS_OK;
35581:   }
    1: 
35581:   mDocument = doc->CreateStaticClone(mDocShell);
35581:   nsCOMPtr<nsIDOMDocument> clonedDOMDoc = do_QueryInterface(mDocument);
35581:   NS_ENSURE_STATE(clonedDOMDoc);
35581: 
35581:   viewer->SetDOMDocument(clonedDOMDoc);
    1:   return NS_OK;
    1: }
    1: 
    1: //------------------------------------------------------------------
    1: // Resets PO by destroying the presentation
    1: void 
    1: nsPrintObject::DestroyPresentation()
    1: {
    1:   mPresContext = nsnull;
    1:   if (mPresShell) {
    1:     mPresShell->EndObservingDocument();
28371:     nsAutoScriptBlocker scriptBlocker;
    1:     mPresShell->Destroy();
    1:   }
    1:   mPresShell   = nsnull;
    1:   mViewManager = nsnull;
    1: }
    1: 
