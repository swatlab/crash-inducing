39447: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
39447:  * ***** BEGIN LICENSE BLOCK *****
39447:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
39447:  *
39447:  * The contents of this file are subject to the Mozilla Public License Version
39447:  * 1.1 (the "License"); you may not use this file except in compliance with
39447:  * the License. You may obtain a copy of the License at
39447:  * http://www.mozilla.org/MPL/
39447:  *
39447:  * Software distributed under the License is distributed on an "AS IS" basis,
39447:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
39447:  * for the specific language governing rights and limitations under the
39447:  * License.
39447:  *
39447:  * The Original Code is Mozilla Foundation code.
39447:  *
39447:  * The Initial Developer of the Original Code is Mozilla Foundation.
39447:  * Portions created by the Initial Developer are Copyright (C) 2005-2010
39447:  * the Initial Developer. All Rights Reserved.
39447:  *
39447:  * Contributor(s):
39447:  *   Stuart Parmenter <stuart@mozilla.com>
39447:  *   Masayuki Nakano <masayuki@d-toybox.com>
39447:  *   Mats Palmgren <mats.palmgren@bredband.net>
39447:  *   John Daggett <jdaggett@mozilla.com>
39447:  *   Jonathan Kew <jfkthame@gmail.com>
39447:  *
39447:  * Alternatively, the contents of this file may be used under the terms of
39447:  * either the GNU General Public License Version 2 or later (the "GPL"), or
39447:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
39447:  * in which case the provisions of the GPL or the LGPL are applicable instead
39447:  * of those above. If you wish to allow use of your version of this file only
39447:  * under the terms of either the GPL or the LGPL, and not to allow others to
39447:  * use your version of this file under the terms of the MPL, indicate your
39447:  * decision by deleting the provisions above and replace them with the notice
39447:  * and other provisions required by the GPL or the LGPL. If you do not delete
39447:  * the provisions above, a recipient may use your version of this file under
39447:  * the terms of any one of the MPL, the GPL or the LGPL.
39447:  *
39447:  * ***** END LICENSE BLOCK ***** */
39447: 
39447: //#define FORCE_PR_LOG
39447: 
39447: #include "gfxGDIShaper.h"
39447: 
39447: /**********************************************************************
39447:  *
39447:  * class gfxGDIShaper
39447:  *
39447:  **********************************************************************/
39447: 
39447: PRBool
39447: gfxGDIShaper::InitTextRun(gfxContext *aContext,
39447:                           gfxTextRun *aTextRun,
39447:                           const PRUnichar *aString,
39447:                           PRUint32 aRunStart,
43525:                           PRUint32 aRunLength,
43525:                           PRInt32 aRunScript)
39447: {
39447:     DCFromContext dc(aContext);
39447: 
39447:     nsAutoTArray<WORD,500> glyphArray;
39447:     if (!glyphArray.SetLength(aRunLength)) {
39447:         return PR_FALSE;
39447:     }
39447:     WORD *glyphs = glyphArray.Elements();
39447: 
39447:     DWORD ret = ::GetGlyphIndicesW(dc, aString + aRunStart, aRunLength,
39447:                                    glyphs, GGI_MARK_NONEXISTING_GLYPHS);
39447:     if (ret == GDI_ERROR) {
39447:         return PR_FALSE;
39447:     }
39447: 
46221:     for (int k = 0; k < aRunLength; k++) {
46221:         if (glyphs[k] == 0xFFFF)
46221:             return PR_FALSE;
46221:     }
46221:  
39447:     SIZE size;
39447:     nsAutoTArray<int,500> partialWidthArray;
39447:     if (!partialWidthArray.SetLength(aRunLength)) {
39447:         return PR_FALSE;
39447:     }
39447: 
39447:     BOOL success = ::GetTextExtentExPointI(dc,
39447:                                            glyphs,
39447:                                            aRunLength,
39447:                                            INT_MAX,
39447:                                            NULL,
39447:                                            partialWidthArray.Elements(),
39447:                                            &size);
39447:     if (!success) {
39447:         return PR_FALSE;
39447:     }
39447: 
39447:     gfxTextRun::CompressedGlyph g;
39447:     PRUint32 i;
39447:     PRInt32 lastWidth = 0;
39447:     PRUint32 appUnitsPerDevPixel = aTextRun->GetAppUnitsPerDevUnit();
39447:     for (i = 0; i < aRunLength; ++i) {
59602:         PRUint32 offset = aRunStart + i;
39447:         PRInt32 advancePixels = partialWidthArray[i] - lastWidth;
39447:         lastWidth = partialWidthArray[i];
39447:         PRInt32 advanceAppUnits = advancePixels*appUnitsPerDevPixel;
39447:         WCHAR glyph = glyphs[i];
59602:         NS_ASSERTION(!gfxFontGroup::IsInvalidChar(aTextRun->GetChar(offset)),
39447:                      "Invalid character detected!");
59602:         PRBool atClusterStart = aTextRun->IsClusterStart(offset);
39447:         if (advanceAppUnits >= 0 &&
39447:             gfxTextRun::CompressedGlyph::IsSimpleAdvance(advanceAppUnits) &&
59602:             gfxTextRun::CompressedGlyph::IsSimpleGlyphID(glyph) &&
59602:             atClusterStart)
59602:         {
59602:             aTextRun->SetSimpleGlyph(offset,
39447:                                      g.SetSimpleGlyph(advanceAppUnits, glyph));
39447:         } else {
39447:             gfxTextRun::DetailedGlyph details;
39447:             details.mGlyphID = glyph;
39447:             details.mAdvance = advanceAppUnits;
39447:             details.mXOffset = 0;
39447:             details.mYOffset = 0;
59602:             aTextRun->SetGlyphs(offset,
59602:                                 g.SetComplex(atClusterStart, PR_TRUE, 1),
39447:                                 &details);
39447:         }
39447:     }
39447: 
39447:     return PR_TRUE;
39447: }
