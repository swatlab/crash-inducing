43343: # ***** BEGIN LICENSE BLOCK *****
43343: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
43343: #
43343: # The contents of this file are subject to the Mozilla Public License Version
43343: # 1.1 (the "License"); you may not use this file except in compliance with
43343: # the License. You may obtain a copy of the License at
43343: # http://www.mozilla.org/MPL/
43343: #
43343: # Software distributed under the License is distributed on an "AS IS" basis,
43343: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43343: # for the specific language governing rights and limitations under the
43343: # License.
43343: #
43343: # The Original Code is Mozilla code.
43343: #
43343: # The Initial Developer of the Original Code is the Mozilla Foundation.
43343: # Portions created by the Initial Developer are Copyright (C) 2010
43343: # the Initial Developer. All Rights Reserved.
43343: #
43343: # Contributor(s):
43343: #  Chris Pearce <chris@pearce.org.nz>
43343: #
43343: # Alternatively, the contents of this file may be used under the terms of
43343: # either the GNU General Public License Version 2 or later (the "GPL"), or
43343: # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43343: # in which case the provisions of the GPL or the LGPL are applicable instead
43343: # of those above. If you wish to allow use of your version of this file only
43343: # under the terms of either the GPL or the LGPL, and not to allow others to
43343: # use your version of this file under the terms of the MPL, indicate your
43343: # decision by deleting the provisions above and replace them with the notice
43343: # and other provisions required by the GPL or the LGPL. If you do not delete
43343: # the provisions above, a recipient may use your version of this file under
43343: # the terms of any one of the MPL, the GPL or the LGPL.
43343: #
43343: # ***** END LICENSE BLOCK *****
43343: 
43343: 
43343: DEPTH = ../..
43343: topsrcdir = @top_srcdir@
43343: srcdir = @srcdir@
43343: VPATH = @srcdir@
43343: 
43343: include $(DEPTH)/config/autoconf.mk
43343: 
43343: DEFINES += -DHAVE_CONFIG_H=vpx_config.h
43343: 
43343: MODULE = vpx
43343: LIBRARY_NAME = vpx
43343: FORCE_STATIC_LIB= 1
43343: 
43343: LOCAL_INCLUDES += \
43343:   -I. \
43343:   -I$(topsrcdir)/media/libvpx \
43343:   -I$(topsrcdir)/media/libvpx/vp8/ \
43343:   -I$(topsrcdir)/media/libvpx/vp8/common/ \
57090:   -I$(topsrcdir)/media/libvpx/vp8/common/arm \
43343:   -I$(topsrcdir)/media/libvpx/vp8/common/x86 \
43343:   -I$(topsrcdir)/media/libvpx/vp8/decoder \
57090:   -I$(topsrcdir)/media/libvpx/vp8/decoder/arm \
43343:   -I$(topsrcdir)/media/libvpx/vp8/decoder/x86 \
43343:   -I$(topsrcdir)/media/libvpx/vpx_codec \
43343:   -I$(topsrcdir)/media/libvpx/vpx_mem/ \
43343:   -I$(topsrcdir)/media/libvpx/vpx_mem/include \
43343:   -I$(topsrcdir)/media/libvpx/vpx_ports/ \
43343:   -I$(topsrcdir)/media/libvpx/vpx_scale/ \
43343:   $(NULL)
43343: 
43343: VPATH += \
57090:   $(srcdir)/build/make \
43343:   $(srcdir)/vpx \
43343:   $(srcdir)/vpx/src \
43343:   $(srcdir)/vpx_mem \
43343:   $(srcdir)/vpx_mem/include \
43343:   $(srcdir)/vpx_ports \
43343:   $(srcdir)/vpx_scale \
57090:   $(srcdir)/vpx_scale/arm \
43343:   $(srcdir)/vpx_scale/generic \
43343:   $(srcdir)/vp8 \
43343:   $(srcdir)/vp8/common \
57090:   $(srcdir)/vp8/common/arm \
57090:   $(srcdir)/vp8/common/arm/armv6 \
57090:   $(srcdir)/vp8/common/arm/neon \
43343:   $(srcdir)/vp8/common/generic \
43343:   $(srcdir)/vp8/common/x86 \
43343:   $(srcdir)/vp8/decoder \
57090:   $(srcdir)/vp8/decoder/arm \
57090:   $(srcdir)/vp8/decoder/arm/armv6 \
57090:   $(srcdir)/vp8/decoder/arm/neon \
43343:   $(srcdir)/vp8/decoder/generic \
43343:   $(srcdir)/vp8/decoder/x86 \
43343:   $(NULL)
43343: 
57090: #Setup the libvpx assembler config.
43343: AS=$(VPX_AS)
57090: ASFLAGS=$(VPX_ASFLAGS) -I. -I$(topsrcdir)/media/libvpx/ -I$(topsrcdir)/media/libvpx/vpx_ports/
57090: AS_DASH_C_FLAG=$(VPX_DASH_C_FLAG)
57090: ASM_SUFFIX=$(VPX_ASM_SUFFIX)
43343: 
43343: EXPORTS_NAMESPACES = vpx
43343: 
43343: EXPORTS_vpx = \
43343:   vp8.h \
43343:   vp8cx.h \
43343:   vp8dx.h \
43343:   vp8e.h \
43343:   vpx_codec.h \
43343:   vpx_codec_impl_bottom.h \
43343:   vpx_codec_impl_top.h \
43343:   vpx_decoder.h \
43343:   vpx_decoder_compat.h \
43343:   vpx_encoder.h\
43343:   vpx_image.h \
43343:   vpx_mem_intrnl.h \
43343:   vpx_mem.h \
43343:   config.h \
43343:   mem.h \
43343:   vpx_integer.h \
43343:   vpx_timer.h \
57090:   arm.h \
43343:   x86.h \
43343:   scale_mode.h \
43343:   vpxscale.h \
43343:   yv12config.h \
43343:   yv12extend.h \
43343:   $(NULL)
43343: 
43343: CSRCS += \
43343:   vpx_config_c.c \
43343:   systemdependent.c \
43343:   alloccommon.c \
43343:   blockd.c \
43343:   debugmodes.c \
43343:   dsystemdependent.c \
43343:   entropy.c \
43343:   entropymode.c \
43343:   entropymv.c \
43343:   extend.c \
43343:   filter_c.c \
43343:   findnearmv.c \
43343:   idctllm.c \
43343:   invtrans.c \
43343:   loopfilter.c \
43343:   loopfilter_filters.c \
43343:   mbpitch.c \
43343:   modecont.c \
43343:   modecontext.c \
43343:   postproc.c \
43343:   predictdc.c \
43343:   quant_common.c \
43343:   recon.c \
43343:   reconinter.c \
43343:   reconintra.c \
43343:   reconintra4x4.c \
43343:   setupintrarecon.c \
43343:   swapyv12buffer.c \
43343:   textblit.c \
43343:   treecoder.c \
43343:   dboolhuff.c \
43343:   decodemv.c \
43343:   decodframe.c \
43343:   dequantize.c \
43343:   detokenize.c \
57090:   reconintra_mt.c \
52275:   idct_blk.c \
43343:   onyxd_if.c \
43343:   threading.c \
43343:   vp8_dx_iface.c \
43343:   vpx_codec.c \
43343:   vpx_decoder.c \
43343:   vpx_decoder_compat.c \
43343:   vpx_encoder.c \
43343:   vpx_image.c \
43343:   vpx_mem.c \
43343:   gen_scalers.c \
43343:   vpxscale.c \
43343:   scalesystemdependant.c \
43343:   yv12config.c \
43343:   yv12extend.c \
43343:   $(NULL)
43343: 
43343: ifdef VPX_X86_ASM
43343: # Building on an x86 platform with a supported assembler, include
43343: # the optimized assembly in the build.
57090: 
43343: CSRCS += \
52275:   idct_blk_mmx.c \
52275:   idct_blk_sse2.c \
43343:   loopfilter_x86.c \
43343:   vp8_asm_stubs.c \
43343:   x86_systemdependent.c \
43343:   x86_dsystemdependent.c \
43343:   $(NULL)
43343: 
43343: ASFILES += \
43343:   idctllm_mmx.asm \
52275:   idctllm_sse2.asm \
43343:   iwalsh_mmx.asm \
43343:   iwalsh_sse2.asm \
43343:   loopfilter_mmx.asm \
43343:   loopfilter_sse2.asm \
43343:   postproc_mmx.asm \
43343:   postproc_sse2.asm \
43343:   recon_mmx.asm \
43343:   recon_sse2.asm \
43343:   subpixel_mmx.asm \
43343:   subpixel_sse2.asm \
52275:   subpixel_ssse3.asm \
43343:   dequantize_mmx.asm \
43343:   emms.asm \
43343:   $(NULL)
43343: 
43343: endif
43343: 
57090: ifdef VPX_ARM_ASM
57090: # Building on an ARM platform with a supported assembler, include
57090: # the optimized assembly in the build.
57090: 
57090: # The Android NDK doesn't pre-define anything to indicate the OS it's on, so
57090: # do it for them.
57090: ifeq ($(OS_TARGET),Android)
57090: DEFINES += -D__linux__
57090: endif
57090: 
57090: CSRCS += \
57090:   arm_cpudetect.c \
57090:   arm_systemdependent.c \
57090:   bilinearfilter_arm.c \
57090:   filter_arm.c \
57090:   loopfilter_arm.c \
57090:   reconintra_arm.c \
57090:   arm_dsystemdependent.c \
57090:   dequantize_arm.c \
57090:   idct_blk_v6.c \
57090:   idct_blk_neon.c \
57090:   recon_neon.c \
57090:   $(NULL)
57090: 
57090: VPX_ASFILES = \
57090:   bilinearfilter_v6.asm \
57090:   copymem8x4_v6.asm \
57090:   copymem8x8_v6.asm \
57090:   copymem16x16_v6.asm \
57090:   dc_only_idct_add_v6.asm \
57090:   iwalsh_v6.asm \
57090:   filter_v6.asm \
57090:   idct_v6.asm \
57090:   loopfilter_v6.asm \
57090:   recon_v6.asm \
57090:   simpleloopfilter_v6.asm \
57090:   sixtappredict8x4_v6.asm \
57090:   bilinearpredict4x4_neon.asm \
57090:   bilinearpredict8x4_neon.asm \
57090:   bilinearpredict8x8_neon.asm \
57090:   bilinearpredict16x16_neon.asm \
57090:   copymem8x4_neon.asm \
57090:   copymem8x8_neon.asm \
57090:   copymem16x16_neon.asm \
57090:   dc_only_idct_add_neon.asm \
57090:   iwalsh_neon.asm \
57090:   loopfilter_neon.asm \
57090:   loopfiltersimplehorizontaledge_neon.asm \
57090:   loopfiltersimpleverticaledge_neon.asm \
57090:   mbloopfilter_neon.asm \
57090:   recon2b_neon.asm \
57090:   recon4b_neon.asm \
57090:   reconb_neon.asm \
57090:   shortidct4x4llm_1_neon.asm \
57090:   shortidct4x4llm_neon.asm \
57090:   sixtappredict4x4_neon.asm \
57090:   sixtappredict8x4_neon.asm \
57090:   sixtappredict8x8_neon.asm \
57090:   sixtappredict16x16_neon.asm \
57090:   recon16x16mb_neon.asm \
57090:   buildintrapredictorsmby_neon.asm \
57090:   save_neon_reg.asm \
57090:   dequant_dc_idct_v6.asm \
57090:   dequant_idct_v6.asm \
57090:   dequantize_v6.asm \
57090:   idct_dequant_dc_full_2x_neon.asm \
57090:   idct_dequant_dc_0_2x_neon.asm \
57090:   dequant_idct_neon.asm \
57090:   idct_dequant_full_2x_neon.asm \
57090:   idct_dequant_0_2x_neon.asm \
57090:   dequantizeb_neon.asm \
57090:   $(NULL)
57090: 
57090: # The ARM asm needs to extract the offsets of various C struct members.
57090: # We need a program that runs on the host to pull them out of a .o file.
57090: HOST_CSRCS = obj_int_extract.c
57090: HOST_PROGRAM = host_obj_int_extract$(HOST_BIN_SUFFIX)
57090: 
57090: ifdef VPX_AS_CONVERSION
57090: # The ARM asm is written in ARM RVCT syntax, but we actually build it with
57090: # gas using GNU syntax. Add some rules to perform the conversion.
57090: VPX_CONVERTED_ASFILES = $(addsuffix .$(ASM_SUFFIX), $(VPX_ASFILES))
57090: 
57090: ASFILES += $(VPX_CONVERTED_ASFILES)
57090: GARBAGE += $(VPX_CONVERTED_ASFILES)
57090: 
57090: %.asm.$(ASM_SUFFIX): %.asm
57090: 	$(VPX_AS_CONVERSION) < $< > $@
57090: 
57090: vpx_asm_offsets.asm: vpx_asm_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
57090: 	./$(HOST_PROGRAM) rvds $< | $(VPX_AS_CONVERSION) > $@
57090: 
57090: else
57090: ASFILES += $(VPX_ASFILES)
57090: 
57090: vpx_asm_offsets.asm: vpx_asm_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
57090: 	./$(HOST_PROGRAM) rvds $< > $@
57090: 
57090: endif
57090: 
57090: GARBAGE += vpx_asm_offsets.$(OBJ_SUFFIX) vpx_asm_offsets.asm
57090: 
57090: endif
57090: 
43343: include $(topsrcdir)/config/rules.mk
49016: 
49016: # Workaround a bug of Sun Studio (CR 6963410)
49016: ifdef SOLARIS_SUNPRO_CC
49016: ifeq (86,$(findstring 86,$(OS_TEST)))
49016: filter_c.o: filter_c.c Makefile.in
49016: 	$(REPORT_BUILD)
49016: 	@$(MAKE_DEPS_AUTO_CC)
49016: 	$(CC) -o $@ -c $(patsubst -xO[45],-xO3,$(COMPILE_CFLAGS)) $<
49016: endif
49016: endif
