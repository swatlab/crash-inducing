126599: /* This Source Code Form is subject to the terms of the Mozilla Public
126599:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
126599:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
126599: 
126599: function run_test() {
126599:   runAsyncTests(tests);
126599: }
126599: 
126599: let tests = [
126599: 
126599:   function observerForName_set() {
137506:     let args = on("Set", ["foo", null, "bar"]);
137506: 
126599:     yield set("a.com", "foo", 1);
126599:     observerArgsOK(args.foo, [["a.com", "foo", 1]]);
126599:     observerArgsOK(args.null, [["a.com", "foo", 1]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599: 
126599:     yield setGlobal("foo", 2);
126599:     observerArgsOK(args.foo, [[null, "foo", 2]]);
126599:     observerArgsOK(args.null, [[null, "foo", 2]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599:   },
126599: 
126599:   function observerForName_remove() {
126599:     yield set("a.com", "foo", 1);
126599:     yield setGlobal("foo", 2);
126599: 
137506:     let args = on("Removed", ["foo", null, "bar"]);
126599:     yield cps.removeByDomainAndName("a.com", "bogus", null, makeCallback());
126599:     observerArgsOK(args.foo, []);
126599:     observerArgsOK(args.null, []);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599: 
126599:     yield cps.removeByDomainAndName("a.com", "foo", null, makeCallback());
126599:     observerArgsOK(args.foo, [["a.com", "foo"]]);
126599:     observerArgsOK(args.null, [["a.com", "foo"]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599: 
126599:     yield cps.removeGlobal("foo", null, makeCallback());
126599:     observerArgsOK(args.foo, [[null, "foo"]]);
126599:     observerArgsOK(args.null, [[null, "foo"]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599:   },
126599: 
126599:   function observerForName_removeByDomain() {
126599:     yield set("a.com", "foo", 1);
126599:     yield set("b.a.com", "bar", 2);
126599:     yield setGlobal("foo", 3);
126599: 
137506:     let args = on("Removed", ["foo", null, "bar"]);
126599:     yield cps.removeByDomain("bogus", null, makeCallback());
126599:     observerArgsOK(args.foo, []);
126599:     observerArgsOK(args.null, []);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599: 
126599:     yield cps.removeBySubdomain("a.com", null, makeCallback());
126599:     observerArgsOK(args.foo, [["a.com", "foo"]]);
126599:     observerArgsOK(args.null, [["a.com", "foo"], ["b.a.com", "bar"]]);
126599:     observerArgsOK(args.bar, [["b.a.com", "bar"]]);
137506:     args.reset();
126599: 
126599:     yield cps.removeAllGlobals(null, makeCallback());
126599:     observerArgsOK(args.foo, [[null, "foo"]]);
126599:     observerArgsOK(args.null, [[null, "foo"]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599:   },
126599: 
126599:   function observerForName_removeAllDomains() {
126599:     yield set("a.com", "foo", 1);
126599:     yield setGlobal("foo", 2);
126599:     yield set("b.com", "bar", 3);
126599: 
137506:     let args = on("Removed", ["foo", null, "bar"]);
126599:     yield cps.removeAllDomains(null, makeCallback());
126599:     observerArgsOK(args.foo, [["a.com", "foo"]]);
126599:     observerArgsOK(args.null, [["a.com", "foo"], ["b.com", "bar"]]);
126599:     observerArgsOK(args.bar, [["b.com", "bar"]]);
137506:     args.reset();
126599:   },
126599: 
126599:   function observerForName_removeByName() {
126599:     yield set("a.com", "foo", 1);
126599:     yield set("a.com", "bar", 2);
126599:     yield setGlobal("foo", 3);
126599: 
137506:     let args = on("Removed", ["foo", null, "bar"]);
126599:     yield cps.removeByName("bogus", null, makeCallback());
126599:     observerArgsOK(args.foo, []);
126599:     observerArgsOK(args.null, []);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599: 
126599:     yield cps.removeByName("foo", null, makeCallback());
126599:     observerArgsOK(args.foo, [["a.com", "foo"], [null, "foo"]]);
126599:     observerArgsOK(args.null, [["a.com", "foo"], [null, "foo"]]);
126599:     observerArgsOK(args.bar, []);
137506:     args.reset();
126599:   },
126599: 
126599:   function removeObserverForName() {
137506:     let args = on("Set", ["foo", null, "bar"]);
126599: 
126599:     cps.removeObserverForName("foo", args.foo.observer);
126599:     yield set("a.com", "foo", 1);
126599:     observerArgsOK(args.foo, []);
126599:     observerArgsOK(args.null, [["a.com", "foo", 1]]);
126599:     observerArgsOK(args.bar, []);
126599:     args.reset();
126599: 
126599:     cps.removeObserverForName(null, args.null.observer);
126599:     yield set("a.com", "foo", 2);
126599:     observerArgsOK(args.foo, []);
126599:     observerArgsOK(args.null, []);
126599:     observerArgsOK(args.bar, []);
126599:     args.reset();
126599:   },
126599: ];
