78857: <html xmlns="http://www.w3.org/1999/xhtml">
78857: <!--
78857: https://bugzilla.mozilla.org/show_bug.cgi?id=602759
78857: -->
78857: <head>
78857:   <title>Tests specific to SVGTransformList</title>
78857:   <script type="text/javascript" src="/MochiKit/packed.js"></script>
78857:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
78857:   <script type="text/javascript" src="matrixUtils.js"></script>
90225:   <script type="text/javascript" src="MutationEventChecker.js"></script>
78857:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
78857: </head>
78857: <body>
78857: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=602759">
78857:   Mozilla Bug 602759</a>
78857: <p id="display"></p>
78857: <div id="content" style="display:none;">
78857: <svg id="svg" xmlns="http://www.w3.org/2000/svg" width="100" height="100"
78857:      onload="this.pauseAnimations();">
78857:   <g id="g"/>
78857: </svg>
78857: </div>
78857: <pre id="test">
78857: <script class="testbody" type="text/javascript">
78857: <![CDATA[
78857: 
78857: SimpleTest.waitForExplicitFinish();
78857: 
78857: /*
78857: This file runs a series of SVGTransformList specific tests. Generic SVGXxxList
78857: tests can be found in test_SVGxxxList.xhtml. Anything that can be generalized
78857: to other list types belongs there.
78857: */
78857: 
78857: function main()
78857: {
78857:   var g = $('g');
78857:   var tests =
78857:     [ testConsolidateMatrix,
78857:       testConsolidateMatrixOneElem,
78857:       testConsolidateMatrixZeroElem,
78857:       testCreateSVGTransformFromMatrix,
78857:       testReadOnly,
78857:       testOrphan,
90225:       testFailedSet,
90225:       testMutationEvents
78857:     ];
78857:   for (var i = 0; i < tests.length; i++) {
78857:     tests[i](g);
78857:   }
78857:   SimpleTest.finish();
78857: }
78857: 
78857: function testConsolidateMatrix(g)
78857: {
78857:   // This is the example from SVG 1.1 section 7.5
78857:   g.setAttribute("transform",
78857:                  "translate(50 90) rotate(-45) translate(130 160)");
78857:   var list = g.transform.baseVal;
78857:   is(list.numberOfItems, 3, "Unexpected length of unconsolidated list");
78857: 
78857:   // Sanity check -- take ref to first item in list and validate it
78857:   var first_item = list.getItem(0);
78857:   is(first_item.type, SVGTransform.SVG_TRANSFORM_TRANSLATE,
78857:      "Unexpected type of first item in list");
78857:   cmpMatrix(first_item.matrix, [1, 0, 0, 1, 50, 90],
78857:      "Unexpected value for first item in list");
78857: 
78857:   // Consolidate
78857:   var consolidated = list.consolidate();
78857:   is(list.numberOfItems, 1, "Unexpected length of consolidated list");
78857:   ok(consolidated === list.getItem(0),
78857:      "Consolidate return value should be first item in list, not a copy");
78857:   is(consolidated.type, SVGTransform.SVG_TRANSFORM_MATRIX,
78857:      "Consolidated transform not of type matrix");
78857:   const angle = -Math.PI/4;
78857:   roughCmpMatrix(consolidated.matrix,
78857:     [Math.cos(angle), Math.sin(angle),
78857:      -Math.sin(angle), Math.cos(angle),
78857:      130 * Math.cos(angle) - 160 * Math.sin(angle) + 50,
78857:      160 * Math.cos(angle) + 130 * Math.sin(angle) + 90],
78857:     "Unexpected result after consolidating matrices");
78857: 
78857:   // Check ref to first item in list
78857:   // a) should not have changed
78857:   is(first_item.type, SVGTransform.SVG_TRANSFORM_TRANSLATE,
78857:      "Unexpected type of cached first item in list after consolidating");
78857:   cmpMatrix(first_item.matrix, [1, 0, 0, 1, 50, 90],
78857:      "Unexpected value for cached first item in list after consolidating");
78857:   // b) should still be useable
78857:   first_item.setScale(2, 3);
78857:   is(first_item.type, SVGTransform.SVG_TRANSFORM_SCALE,
78857:      "Cached first item in list not useable after consolidating");
78857: 
78857:   // Check consolidated is live
78857:   // a) Changes to 'consolidated' affect list
78857:   consolidated.setSkewX(45);
78857:   is(list.getItem(0).type, SVGTransform.SVG_TRANSFORM_SKEWX,
78857:      "Changing return value from consolidate doesn't affect list");
78857:   // b) Changes to list affect 'consolidated'
78857:   list.getItem(0).setRotate(90, 0, 0);
78857:   is(consolidated.type, SVGTransform.SVG_TRANSFORM_ROTATE,
78857:      "Changing list doesn't affect return value from consolidate");
78857: }
78857: 
78857: function testConsolidateMatrixOneElem(g)
78857: {
78857:   // Check that even if we only have one item in the list it becomes a matrix
78857:   // transform (as per the spec)
78857:   g.setAttribute("transform", "translate(50 90)");
78857:   var list = g.transform.baseVal;
78857:   is(list.numberOfItems, 1, "Unexpected length of unconsolidated list");
78857:   var first_item = list.getItem(0);
78857:   is(first_item.type, SVGTransform.SVG_TRANSFORM_TRANSLATE,
78857:      "Unexpected type of first item in list");
78857:   cmpMatrix(first_item.matrix, [1, 0, 0, 1, 50, 90],
78857:      "Unexpected value for first item in list");
78857: 
78857:   // Consolidate
78857:   var consolidated = list.consolidate();
78857:   is(list.numberOfItems, 1, "Unexpected length of consolidated list");
78857:   ok(consolidated === list.getItem(0),
78857:      "Consolidate return value should be first item in list, not a copy");
78869:   is(consolidated.type, SVGTransform.SVG_TRANSFORM_MATRIX,
78857:      "Consolidated transform not of type matrix");
78857:   cmpMatrix(consolidated.matrix, [1, 0, 0, 1, 50, 90],
78857:      "Unexpected consolidated matrix value");
78857: }
78857:   
78857: function testConsolidateMatrixZeroElem(g)
78857: {
78857:   // Check that zero items returns null
78857:   g.setAttribute("transform", "");
78857:   var list = g.transform.baseVal;
78857:   is(list.numberOfItems, 0, "Unexpected length of unconsolidated list");
78857:   var consolidated = list.consolidate();
78857:   ok(consolidated === null,
78857:      "consolidate() should return null for a zero-length transform list");
78857: }
78857: 
78857: function testCreateSVGTransformFromMatrix(g)
78857: {
78857:   var m = createMatrix(1, 2, 3, 4, 5, 6);
78857: 
78857:   // "Creates an SVGTransform object which is initialized to transform of type
78857:   // SVG_TRANSFORM_MATRIX and whose values are the given matrix. The values from
78857:   // the parameter matrix are copied, the matrix parameter is not adopted as
78857:   // SVGTransform::matrix."
78857:   var list = g.transform.baseVal;
78857:   list.clear();
78857:   var t = list.createSVGTransformFromMatrix(m);
78857: 
78857:   // Check that list hasn't changed
78857:   is(list.numberOfItems, 0,
78857:      "Transform list changed after calling createSVGTransformFromMatrix");
78857: 
78857:   // Check return value
78857:   is(t.type, SVGTransform.SVG_TRANSFORM_MATRIX,
78857:      "Returned transform not of type matrix");
78857:   cmpMatrix(t.matrix, [1, 2, 3, 4, 5, 6],
78857:      "Unexpected returned matrix value");
78857: 
78857:   // Check values are copied
78857:   ok(t.matrix != m, "Matrix should be copied not adopted");
78857:   m.a = 2;
78857:   is(t.matrix.a, 1,
78857:      "Changing source matrix should not affect newly created transform");
78857: 
78857:   // Try passing in bad values (null, "undefined" etc.)
78857:   var exception = null;
78857:   try {
78857:     t = list.createSVGTransformFromMatrix(null);
78857:   } catch(e) { exception = e; }
78857:   ok(exception,
78857:     "Failed to throw for null input to createSVGTransformFromMatrix");
78857:   exception = null;
78857:   try {
78857:     t = list.createSVGTransformFromMatrix("undefined");
78857:   } catch(e) { exception = e; }
78857:   ok(exception,
78857:     "Failed to throw for string input to createSVGTransformFromMatrix");
78857:   exception = null;
78857:   try {
78857:     t = list.createSVGTransformFromMatrix(SVGMatrix(t));
78857:   } catch(e) { exception = e; }
78857:   ok(exception,
78857:     "Failed to throw for bad input to createSVGTransformFromMatrix");
78857:   exception = null;
78857: }
78857: 
78857: function testReadOnly(g)
78857: {
78857:   var SVG_NS = 'http://www.w3.org/2000/svg';
78857: 
78857:   // Just some data to work with
78857:   g.setAttribute("transform", "translate(50 90)");
78857: 
78857:   // baseVal / animVal are readonly attributes
78857:   //   Create another (empty) transform list
78857:   var otherg = document.createElementNS(SVG_NS, 'g');
78857:   g.parentNode.appendChild(otherg);
78857:   is(g.transform.baseVal.numberOfItems, 1,
78857:     "Unexpected number of items in transform list before attempting to set");
78857:   is(otherg.transform.baseVal.numberOfItems, 0,
78857:     "Unexpected number of items in source transform list before attempting to"
78857:     + " set");
78857:   //   Attempt to set the base value and check nothing changes
78857:   g.transform.baseVal = otherg.transform.baseVal;
78857:   is(g.transform.baseVal.numberOfItems, 1,
78857:     "baseVal should be read-only but its value has changed");
78857:   is(otherg.transform.baseVal.numberOfItems, 0,
78857:     "baseVal changed after attempting to use it set another value");
78857:  
78857:   // Read-only SVGTransformList:
78857:   // Standard list methods are covered in test_SVGxxxList.xhtml so here we
78857:   // just add tests for SVGTransformList-specific methods
78857:   var roList = g.transform.animVal;
78857:   // consolidate()
78857:   var threw = false;
78857:   try {
78857:     roList.consolidate();
78857:   } catch (e) {
78857:     is(e.code, DOMException.NO_MODIFICATION_ALLOWED_ERR,
78857:       "Got unexpected exception " + e +
78857:       ", expected NO_MODIFICATION_ALLOWED_ERR");
78857:     threw = true;
78857:   }
78869:   ok(threw,
78857:      "Failed to throw exception when calling consolidate on read-only list");
78857: 
78857:   // Read-only SVGTransform:
78857:   // read-only attributes are tested in test_transform.xhtml. Here we are
78857:   // concerned with methods that throw because this *object* is read-only
78857:   // (since it belongs to a read-only transform list)
78857:   var roTransform = roList.getItem(0);
78857:   // setMatrix
78857:   threw = false;
78857:   try {
78857:     var m = createMatrix(1, 2, 3, 4, 5, 6);
78857:     roTransform.setMatrix(m);
78857:   } catch (e) {
78857:     is(e.code, DOMException.NO_MODIFICATION_ALLOWED_ERR,
78857:       "Got unexpected exception " + e +
78857:       ", expected NO_MODIFICATION_ALLOWED_ERR");
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw exception when calling setMatrix on read-only"
78857:             + " transform");
78857:   // setTranslate
78857:   threw = false;
78857:   try {
78857:     roTransform.setTranslate(2, 3);
78857:   } catch(e) {
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw when calling setTranslate on read-only"
78857:              + " transform");
78857:   // setScale
78857:   threw = false;
78857:   try {
78857:     roTransform.setScale(2, 3);
78857:   } catch(e) {
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw when calling setScale on read-only transform");
78857:   // setRotate
78857:   threw = false;
78857:   try {
78857:     roTransform.setRotate(1, 2, 3);
78857:   } catch(e) {
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw when calling setRotate on read-only transform");
78857:   // setSkewX
78857:   threw = false;
78857:   try {
78857:     roTransform.setSkewX(2);
78857:   } catch(e) {
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw when calling setSkewX on read-only transform");
78857:   // setSkewY
78857:   threw = false;
78857:   try {
78857:     roTransform.setSkewY(2);
78857:   } catch(e) {
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw when calling setSkewY on read-only transform");
78857: 
78857:   // Read-only SVGMatrix
78857:   var roMatrix = roTransform.matrix;
78857:   threw = false;
78857:   try {
78857:     roMatrix.a = 1;
78857:   } catch (e) {
78857:     is(e.code, DOMException.NO_MODIFICATION_ALLOWED_ERR,
78857:       "Got unexpected exception " + e +
78857:       ", expected NO_MODIFICATION_ALLOWED_ERR");
78857:     threw = true;
78857:   }
78869:   ok(threw, "Failed to throw exception when modifying read-only matrix");
78857: }
78857: 
78857: function testOrphan(g)
78857: {
78857:   // Although this isn't defined, if a read-only object becomes orphaned
78857:   // (detached from it's parent), then presumably it should become editable
78857:   // again.
78857: 
78857:   // As with the read-only test set a value to test with
78857:   g.setAttribute("transform", "translate(50 90)");
78857: 
78857:   var roList = g.transform.animVal;
78857:   var roTransform = roList.getItem(0);
78857:   var roMatrix = roTransform.matrix;
78857: 
78857:   // Orphan transform list contents by re-setting transform attribute
78857:   g.setAttribute("transform", "");
78857: 
78857:   // Transform should now be editable
78857:   var exception = null;
78857:   try {
78857:     roTransform.setTranslate(5, 3);
78857:   } catch(e) {
78857:     exception = e;
78857:   }
78857:   ok(exception===null,
78857:      "Unexpected exception " + exception + " modifying orphaned transform");
78857:   uexception = null;
78857: 
78857:   // So should matrix
78857:   exception = null;
78857:   try {
78857:     roMatrix.a = 1;
78857:   } catch(e) {
78857:     exception = e;
78857:   }
78857:   ok(exception===null,
78857:      "Unexpected exception " + exception + " modifying orphaned matrix");
78857: }
78857: 
78857: function testFailedSet(g)
78857: {
78857:   // Check that a parse failure results in the attribute being empty
78857: 
78857:   // Set initial value
78857:   g.setAttribute("transform", "translate(50 90)");
78857:   var list = g.transform.baseVal;
78857:   is(list.numberOfItems, 1, "Unexpected initial length of list");
78857: 
78857:   // Attempt to set bad value
78857:   g.setAttribute("transform", "translate(40 50) scale(a)");
78857:   is(list.numberOfItems, 0,
78857:      "Transform list should be empty after setting bad value");
78857:   is(g.transform.animVal.numberOfItems, 0,
78857:      "Animated transform list should also be empty after setting bad value");
78857: }
78857: 
90225: function testMutationEvents(g)
90225: {
90225:   // Check mutation events
90225: 
90225:   // Set initial value
90225:   g.setAttribute("transform", "translate(50 90)");
90225:   var list = g.transform.baseVal;
90225:   is(list.numberOfItems, 1, "Unexpected initial length of list");
90225:   eventChecker = new MutationEventChecker;
90225:   eventChecker.watchAttr(g, "transform");
90225: 
90225:   // consolidate
90225:   //
90225:   // Consolidate happens to generate two modification events in our
90225:   // implementation--it's not ideal but it's better than none
90225:   eventChecker.expect("modify modify modify");
90225:   g.setAttribute("transform", "translate(10 10) translate(10 10)");
90225:   list.consolidate();
90225: 
90225:   // In the following, each of the operations is performed twice but only one
90225:   // mutation event is expected. This is to check that redundant mutation
90225:   // events are not sent.
90225: 
90225:   // transform.setMatrix
90225:   eventChecker.expect("modify");
90225:   var mx = $('svg').createSVGMatrix();
90225:   list[0].setMatrix(mx);
90225:   list[0].setMatrix(mx);
90225: 
90225:   // transform.setTranslate
90225:   eventChecker.expect("modify");
90225:   list[0].setTranslate(10, 10);
90225:   list[0].setTranslate(10, 10);
90225: 
90225:   // transform.setScale
90225:   eventChecker.expect("modify");
90225:   list[0].setScale(2, 2);
90225:   list[0].setScale(2, 2);
90225: 
90225:   // transform.setRotate
90225:   eventChecker.expect("modify");
90225:   list[0].setRotate(45, 1, 2);
90225:   list[0].setRotate(45, 1, 2);
90225: 
90225:   // transform.setSkewX
90225:   eventChecker.expect("modify");
90225:   list[0].setSkewX(45);
90225:   list[0].setSkewX(45);
90225: 
90225:   // transform.setSkewY
90225:   eventChecker.expect("modify");
90225:   list[0].setSkewY(25);
90225:   list[0].setSkewY(25);
90225: 
90225:   // transform.matrix
90225:   eventChecker.expect("modify modify");
90225:   list[0].matrix.a = 1;
90225:   list[0].matrix.a = 1;
90225:   list[0].matrix.e = 5;
90225:   list[0].matrix.e = 5;
90225: 
90225:   // setAttribute interaction
90225:   eventChecker.expect("modify");
90225:   list[0].setMatrix(mx);
90225:   eventChecker.expect("");
90225:   g.setAttribute("transform", "matrix(1, 0, 0, 1, 0, 0)");
90225:   list[0].setMatrix(mx);
91863: 
91863:   // Attribute removal
91863:   eventChecker.expect("remove");
91863:   g.removeAttribute("transform");
91863: 
91863:   // Non-existent attribute removal
91863:   eventChecker.expect("");
91863:   g.removeAttribute("transform");
91863:   g.removeAttributeNS(null, "transform");
91863: 
90225:   eventChecker.finish();
90225: }
90225: 
78857: window.addEventListener("load", main, false);
78857: 
78857: ]]>
78857: </script>
78857: </pre>
78857: </body>
78857: </html>
