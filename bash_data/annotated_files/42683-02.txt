37042: /* -*- Mode: js2; tab-width: 40; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
37042: /*
37042:  * Any copyright is dedicated to the Public Domain.
37042:  * http://creativecommons.org/licenses/publicdomain/
37042:  * Contributor:
37042:  *   Vladimir Vukicevic <vladimir@pobox.com>
37042:  */
37042: 
37042: var gTestfile = 'template.js';
37042: //-----------------------------------------------------------------------------
37042: var BUGNUMBER = 532774;
37042: var summary = 'js typed arrays (webgl arrays)';
37042: var actual = '';
37042: var expect = '';
37042: 
37042: //-----------------------------------------------------------------------------
37042: test();
37042: //-----------------------------------------------------------------------------
37042: 
37042: function test()
37042: {
37042:     enterFunc ('test');
37042:     printBugNumber(BUGNUMBER);
37042:     printStatus(summary);
37042:     
37042:     var TestPassCount = 0;
37042:     var TestFailCount = 0;
37042:     var TestTodoCount = 0;
37042: 
37042:     var TODO = 1;
37042: 
37042:     function check(fun, todo) {
37042:         var thrown = null;
37042:         var success = false;
37042:         try {
37042:             success = fun();
37042:         } catch (x) {
37042:             thrown = x;
37042:         }
37042: 
37042:         if (thrown)
37042:             success = false;
37042: 
37042:         if (todo) {
37042:             TestTodoCount++;
37042: 
37042:             if (success) {
37042:                 var ex = new Error;
37042:                 print ("=== TODO but PASSED? ===");
37042:                 print (ex.stack);
37042:                 print ("========================");
37042:             }
37042: 
37042:             return;
37042:         }
37042: 
37042:         if (success) {
37042:             TestPassCount++;
37042:         } else {
37042:             TestFailCount++;
37042: 
37042:             var ex = new Error;
37042:             print ("=== FAILED ===");
37042:             print (ex.stack);
37042:             if (thrown) {
37042:                 print ("    threw exception:");
37042:                 print (thrown);
37042:             }
37042:             print ("==============");
37042:         }
37659:     }
37042: 
37042:     function checkThrows(fun, todo) {
37042:         let thrown = false;
37042:         try {
37042:             fun();
37042:         } catch (x) {
37042:             thrown = true;
37042:         }
37042: 
37042:         check(function() thrown, todo);
37042:     }
37042: 
38512:     var buf, buf2;
37042: 
37042:     buf = new ArrayBuffer(100);
37042:     check(function() buf);
37042:     check(function() buf.byteLength == 100);
37042: 
37042:     buf.byteLength = 50;
37042:     check(function() buf.byteLength == 100);
37042: 
37042:     var zerobuf = new ArrayBuffer(0);
37042:     check(function() zerobuf);
37042:     check(function() zerobuf.byteLength == 0);
37042: 
37042:     check(function() (new Int32Array(zerobuf)).length == 0);
37042:     checkThrows(function() new Int32Array(zerobuf, 1));
37042: 
37042:     checkThrows(function() new ArrayBuffer(-100));
37042:     // this is using js_ValueToECMAUInt32, which is giving 0 for "abc"
37042:     checkThrows(function() new ArrayBuffer("abc"), TODO);
37042: 
37042:     var a = new Int32Array(20);
37042:     check(function() a);
37042:     check(function() a.length == 20);
37042:     check(function() a.byteLength == 80);
37042:     check(function() a.byteOffset == 0);
37042:     check(function() a.buffer);
37042:     check(function() a.buffer.byteLength == 80);
37042: 
37042:     var b = new Uint8Array(a.buffer, 4, 4);
37042:     check(function() b);
37042:     check(function() b.length == 4);
37042:     check(function() b.byteLength == 4);
37042:     check(function() a.buffer == b.buffer);
37042: 
37042:     b[0] = 0xaa;
37042:     b[1] = 0xbb;
37042:     b[2] = 0xcc;
37042:     b[3] = 0xdd;
37042: 
37042:     check(function() a[0] == 0);
37042:     check(function() a[1] != 0);
37042:     check(function() a[2] == 0);
37042: 
37042:     buf = new ArrayBuffer(4);
37042:     check(function() (new Int8Array(buf)).length == 4);
37042:     check(function() (new Uint8Array(buf)).length == 4);
37042:     check(function() (new Int16Array(buf)).length == 2);
37042:     check(function() (new Uint16Array(buf)).length == 2);
37042:     check(function() (new Int32Array(buf)).length == 1);
37042:     check(function() (new Uint32Array(buf)).length == 1);
37042:     check(function() (new Float32Array(buf)).length == 1);
38512:     checkThrows(function() (new Float64Array(buf)));
38512:     buf2 = new ArrayBuffer(8);
38512:     check(function() (new Float64Array(buf2)).length == 1);
37042: 
37042:     buf = new ArrayBuffer(5);
37042:     check(function() buf);
37042:     check(function() buf.byteLength == 5);
37042: 
37042:     check(function() new Int32Array(buf, 0, 1));
37042:     checkThrows(function() new Int32Array(buf, 0));
37042:     check(function() new Int8Array(buf, 0));
37042: 
37042:     check(function() (new Int8Array(buf, 3)).byteLength == 2);
37042:     checkThrows(function() new Int8Array(buf, 500));
37042:     checkThrows(function() new Int8Array(buf, 0, 50));
37042:     checkThrows(function() new Float32Array(buf, 500));
37042:     checkThrows(function() new Float32Array(buf, 0, 50));
37042: 
37042:     var sl = a.slice(5,10);
37042:     check(function() sl.length == 5);
37042:     check(function() sl.buffer == a.buffer);
37042:     check(function() sl.byteLength == 20);
37042:     check(function() sl.byteOffset == 20);
37042: 
37042:     check(function() a.slice(5,5).length == 0);
37042:     check(function() a.slice(-5).length == 5);
37042:     check(function() a.slice(-100).length == 20);
37042:     check(function() a.slice(0, 2).length == 2);
37042:     check(function() a.slice().length == a.length);
37042:     check(function() a.slice(-7,-5).length == 2);
37042:     check(function() a.slice(-5,-7).length == 0);
37042:     check(function() a.slice(15).length == 5);
37042: 
37042:     a = new Uint8Array([0xaa, 0xbb, 0xcc]);
37042:     check(function() a.length == 3);
37042:     check(function() a.byteLength == 3);
37042:     check(function() a[1] == 0xbb);
37042: 
37042:     // not sure if this is supposed to throw or to treat "foo"" as 0.
37042:     checkThrows(function() new Int32Array([0xaa, "foo", 0xbb]), TODO);
37042: 
37042:     checkThrows(function() new Int32Array(-100));
37042: 
37042:     a = new Uint8Array(3);
38927:     // XXX these are ignored now and return undefined
38927:     //checkThrows(function() a[5000] = 0);
38927:     //checkThrows(function() a["hello"] = 0);
38927:     //checkThrows(function() a[-10] = 0);
37042:     check(function() (a[0] = "10") && (a[0] == 10));
37042: 
38514:     // check Uint8ClampedArray, which is an extension to this extension
38514:     a = new Uint8ClampedArray(4);
38514:     a[0] = 128;
38514:     a[1] = 512;
38514:     a[2] = -123.723;
38514:     a[3] = "foopy";
38514: 
38514:     check(function() a[0] == 128);
38514:     check(function() a[1] == 255);
38514:     check(function() a[2] == 0);
38514:     check(function() a[3] == 0);
38514: 
40294:     // check handling of holes and non-numeric values
40294:     var x = Array(5);
40294:     x[0] = "hello";
40294:     x[1] = { };
40294:     //x[2] is a hole
40294:     x[3] = undefined;
40294:     x[4] = true;
40294: 
40294:     a = new Uint8Array(x);
40294:     check(function() a[0] == 0);
40294:     check(function() a[1] == 0);
40294:     check(function() a[2] == 0);
40294:     check(function() a[3] == 0);
40294:     check(function() a[4] == 1);
40294: 
40294:     a = new Float32Array(x);
40294:     check(function() !(a[0] == a[0]));
40294:     check(function() !(a[1] == a[1]));
40294:     check(function() !(a[2] == a[2]));
40294:     check(function() !(a[3] == a[3]));
40294:     check(function() a[4] == 1);
40294: 
40406:     a = new ArrayBuffer(0x10);
40406:     checkThrows(function() new Uint32Array(buffer, 4, 0x3FFFFFFF));
40406: 
42683:     checkThrows(function() new Float32Array(null));
42683: 
37042:     print ("done");
37042: 
38512:     reportCompare(0, TestFailCount, "typed array tests");
37042: 
37042:     exitFunc ('test');
37042: }
