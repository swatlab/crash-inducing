33649: /* vim: set shiftwidth=2 tabstop=8 autoindent cindent expandtab: */
33649: /* ***** BEGIN LICENSE BLOCK *****
33649:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
33649:  *
33649:  * The contents of this file are subject to the Mozilla Public License Version
33649:  * 1.1 (the "License"); you may not use this file except in compliance with
33649:  * the License. You may obtain a copy of the License at
33649:  * http://www.mozilla.org/MPL/
33649:  *
33649:  * Software distributed under the License is distributed on an "AS IS" basis,
33649:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
33649:  * for the specific language governing rights and limitations under the
33649:  * License.
33649:  *
33649:  * The Original Code is nsTransitionManager.
33649:  *
33649:  * The Initial Developer of the Original Code is the Mozilla Foundation.
33649:  * Portions created by the Initial Developer are Copyright (C) 2009
33649:  * the Initial Developer. All Rights Reserved.
33649:  *
33649:  * Contributor(s):
33649:  *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
33649:  *
33649:  * Alternatively, the contents of this file may be used under the terms of
33649:  * either the GNU General Public License Version 2 or later (the "GPL"), or
33649:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
33649:  * in which case the provisions of the GPL or the LGPL are applicable instead
33649:  * of those above. If you wish to allow use of your version of this file only
33649:  * under the terms of either the GPL or the LGPL, and not to allow others to
33649:  * use your version of this file under the terms of the MPL, indicate your
33649:  * decision by deleting the provisions above and replace them with the notice
33649:  * and other provisions required by the GPL or the LGPL. If you do not delete
33649:  * the provisions above, a recipient may use your version of this file under
33649:  * the terms of any one of the MPL, the GPL or the LGPL.
33649:  *
33649:  * ***** END LICENSE BLOCK ***** */
33649: 
33649: /* Code to start and animate CSS transitions. */
33649: 
33649: #ifndef nsTransitionManager_h_
33649: #define nsTransitionManager_h_
33649: 
33649: #include "prclist.h"
33649: #include "nsCSSProperty.h"
33649: #include "nsIStyleRuleProcessor.h"
33649: #include "nsRefreshDriver.h"
35555: #include "nsCSSPseudoElements.h"
33649: 
33649: class nsStyleContext;
33649: class nsPresContext;
33649: class nsCSSPropertySet;
33649: struct nsTransition;
33649: struct ElementTransitions;
33649: 
33649: class nsTransitionManager : public nsIStyleRuleProcessor,
33649:                             public nsARefreshObserver {
33649: public:
33649:   nsTransitionManager(nsPresContext *aPresContext);
33649:   ~nsTransitionManager();
33649: 
33649:   /**
36616:    * Notify the transition manager that the pres context is going away.
36616:    */
36616:   void Disconnect();
36616: 
36616:   /**
33649:    * StyleContextChanged 
33649:    *
33649:    * To be called from nsFrameManager::ReResolveStyleContext when the
46468:    * style of an element has changed, to initiate transitions from
46468:    * that style change.  For style contexts with :before and :after
46468:    * pseudos, aElement is expected to be the generated before/after
46468:    * element.
33649:    *
33649:    * It may return a "cover rule" (see CoverTransitionStartStyleRule) to
33649:    * cover up some of the changes for the duration of the restyling of
33649:    * descendants.  If it does, this function will take care of causing
33649:    * the necessary restyle afterwards, but the caller must restyle the
33649:    * element *again* with the original sequence of rules plus the
33649:    * returned cover rule as the most specific rule.
33649:    */
33649:   already_AddRefed<nsIStyleRule>
42322:     StyleContextChanged(mozilla::dom::Element *aElement,
33649:                         nsStyleContext *aOldStyleContext,
33649:                         nsStyleContext *aNewStyleContext);
33649: 
33649:   // nsISupports
36616:   NS_DECL_ISUPPORTS
33649: 
33649:   // nsIStyleRuleProcessor
47891:   virtual void RulesMatching(ElementRuleProcessorData* aData);
47891:   virtual void RulesMatching(PseudoElementRuleProcessorData* aData);
47891:   virtual void RulesMatching(AnonBoxRuleProcessorData* aData);
35558: #ifdef MOZ_XUL
47891:   virtual void RulesMatching(XULTreeRuleProcessorData* aData);
35558: #endif
40075:   virtual nsRestyleHint HasStateDependentStyle(StateRuleProcessorData* aData);
39698:   virtual PRBool HasDocumentStateDependentStyle(StateRuleProcessorData* aData);
40075:   virtual nsRestyleHint
35533:     HasAttributeDependentStyle(AttributeRuleProcessorData* aData);
47891:   virtual PRBool MediumFeaturesChanged(nsPresContext* aPresContext);
33649: 
33649:   // nsARefreshObserver
33649:   virtual void WillRefresh(mozilla::TimeStamp aTime);
33649: 
33649: private:
33649:   friend class ElementTransitions; // for TransitionsRemoved
33649: 
33649:   void ConsiderStartingTransition(nsCSSProperty aProperty,
33649:                                   const nsTransition& aTransition,
42322:                                   mozilla::dom::Element *aElement,
33649:                                   ElementTransitions *&aElementTransitions,
33649:                                   nsStyleContext *aOldStyleContext,
33649:                                   nsStyleContext *aNewStyleContext,
33649:                                   PRBool *aStartedAny,
33649:                                   nsCSSPropertySet *aWhichStarted);
42322:   ElementTransitions* GetElementTransitions(mozilla::dom::Element *aElement,
35555:                                             nsCSSPseudoElements::Type aPseudoType,
33649:                                             PRBool aCreateIfNeeded);
33649:   void AddElementTransitions(ElementTransitions* aElementTransitions);
33649:   void TransitionsRemoved();
47891:   void WalkTransitionRule(RuleProcessorData* aData,
35555:                           nsCSSPseudoElements::Type aPseudoType);
33649: 
53967:   void RemoveAllTransitions();
53967: 
33649:   PRCList mElementTransitions;
36616:   nsPresContext *mPresContext; // weak (non-null from ctor to Disconnect)
33649: };
33649: 
33649: #endif /* !defined(nsTransitionManager_h_) */
