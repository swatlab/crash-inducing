   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
   1:  *
   1:  * ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Simon Fraser   <sfraser@netscape.com>
   1:  *   Michael Judge  <mjudge@netscape.com>
   1:  *   Charles Manske <cmanske@netscape.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: 
   1: 
   1: 
   1: #ifndef nsComposerCommandsUpdater_h__
   1: #define nsComposerCommandsUpdater_h__
   1: 
   1: #include "nsCOMPtr.h"
   1: #include "nsITimer.h"
1904: #include "nsWeakPtr.h"
1904: #include "nsPICommandUpdater.h"
   1: 
   1: #include "nsISelectionListener.h"
   1: #include "nsIDocumentStateListener.h"
   1: #include "nsITransactionListener.h"
   1: 
   1: class nsIDocShell;
   1: class nsITransactionManager;
   1: 
   1: class nsComposerCommandsUpdater : public nsISelectionListener,
   1:                                   public nsIDocumentStateListener,
   1:                                   public nsITransactionListener,
   1:                                   public nsITimerCallback
   1: {
   1: public:
   1: 
   1:                                   nsComposerCommandsUpdater();
   1:   virtual                         ~nsComposerCommandsUpdater();
   1: 
   1:   // nsISupports
   1:   NS_DECL_ISUPPORTS
   1:   
   1:   // nsISelectionListener
   1:   NS_DECL_NSISELECTIONLISTENER
   1:   
   1:   // nsIDocumentStateListener
   1:   NS_DECL_NSIDOCUMENTSTATELISTENER
   1: 
   1:   // nsITimerCallback interfaces
   1:   NS_DECL_NSITIMERCALLBACK
   1: 
   1:   /** nsITransactionListener interfaces
   1:     */  
   1:   NS_IMETHOD WillDo(nsITransactionManager *aManager, nsITransaction *aTransaction, PRBool *aInterrupt);
   1:   NS_IMETHOD DidDo(nsITransactionManager *aManager, nsITransaction *aTransaction, nsresult aDoResult);
   1:   NS_IMETHOD WillUndo(nsITransactionManager *aManager, nsITransaction *aTransaction, PRBool *aInterrupt);
   1:   NS_IMETHOD DidUndo(nsITransactionManager *aManager, nsITransaction *aTransaction, nsresult aUndoResult);
   1:   NS_IMETHOD WillRedo(nsITransactionManager *aManager, nsITransaction *aTransaction, PRBool *aInterrupt);
   1:   NS_IMETHOD DidRedo(nsITransactionManager *aManager, nsITransaction *aTransaction, nsresult aRedoResult);
   1:   NS_IMETHOD WillBeginBatch(nsITransactionManager *aManager, PRBool *aInterrupt);
   1:   NS_IMETHOD DidBeginBatch(nsITransactionManager *aManager, nsresult aResult);
   1:   NS_IMETHOD WillEndBatch(nsITransactionManager *aManager, PRBool *aInterrupt);
   1:   NS_IMETHOD DidEndBatch(nsITransactionManager *aManager, nsresult aResult);
   1:   NS_IMETHOD WillMerge(nsITransactionManager *aManager, nsITransaction *aTopTransaction,
   1:                        nsITransaction *aTransactionToMerge, PRBool *aInterrupt);
   1:   NS_IMETHOD DidMerge(nsITransactionManager *aManager, nsITransaction *aTopTransaction,
   1:                       nsITransaction *aTransactionToMerge,
   1:                       PRBool aDidMerge, nsresult aMergeResult);
   1: 
   1: 
   1:   nsresult   Init(nsIDOMWindow* aDOMWindow);
   1: 
   1: protected:
   1: 
   1:   enum {
   1:     eStateUninitialized   = -1,
   1:     eStateOff             = PR_FALSE,
   1:     eStateOn              = PR_TRUE
   1:   };
   1:   
   1:   PRBool        SelectionIsCollapsed();
   1:   nsresult      UpdateDirtyState(PRBool aNowDirty);  
   1:   nsresult      UpdateOneCommand(const char* aCommand);
   1:   nsresult      UpdateCommandGroup(const nsAString& aCommandGroup);
   1: 
1904:   already_AddRefed<nsPICommandUpdater> GetCommandUpdater();
1904:   
   1:   nsresult      PrimeUpdateTimer();
   1:   void          TimerCallback();
   1:   nsCOMPtr<nsITimer>  mUpdateTimer;
   1: 
   1:   nsIDOMWindow* mDOMWindow;  // Weak reference
1904:   nsWeakPtr     mDocShell;
   1:   PRInt8        mDirtyState;  
   1:   PRInt8        mSelectionCollapsed;  
   1:   PRPackedBool  mFirstDoOfFirstUndo;
   1:     
   1: 
   1: };
   1: 
   1: extern "C" nsresult NS_NewComposerCommandsUpdater(nsISelectionListener** aInstancePtrResult);
   1: 
   1: 
   1: #endif // nsComposerCommandsUpdater_h__
