15751: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
15751: /* vim:set ts=2 sw=2 sts=2 et cindent: */
15751: /* ***** BEGIN LICENSE BLOCK *****
15751:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
15751:  *
15751:  * The contents of this file are subject to the Mozilla Public License Version
15751:  * 1.1 (the "License"); you may not use this file except in compliance with
15751:  * the License. You may obtain a copy of the License at
15751:  * http://www.mozilla.org/MPL/
15751:  *
15751:  * Software distributed under the License is distributed on an "AS IS" basis,
15751:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
15751:  * for the specific language governing rights and limitations under the
15751:  * License.
15751:  *
15751:  * The Original Code is Mozilla code.
15751:  *
15751:  * The Initial Developer of the Original Code is the Mozilla Corporation.
15751:  * Portions created by the Initial Developer are Copyright (C) 2007
15751:  * the Initial Developer. All Rights Reserved.
15751:  *
15751:  * Contributor(s):
15751:  *  Chris Double <chris.double@double.co.nz>
15751:  *
15751:  * Alternatively, the contents of this file may be used under the terms of
15751:  * either the GNU General Public License Version 2 or later (the "GPL"), or
15751:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
15751:  * in which case the provisions of the GPL or the LGPL are applicable instead
15751:  * of those above. If you wish to allow use of your version of this file only
15751:  * under the terms of either the GPL or the LGPL, and not to allow others to
15751:  * use your version of this file under the terms of the MPL, indicate your
15751:  * decision by deleting the provisions above and replace them with the notice
15751:  * and other provisions required by the GPL or the LGPL. If you do not delete
15751:  * the provisions above, a recipient may use your version of this file under
15751:  * the terms of any one of the MPL, the GPL or the LGPL.
15751:  *
15751:  * ***** END LICENSE BLOCK ***** */
15751: 
15751: #include "nsIDOMHTMLElement.idl"
51394: #include "nsIDOMMediaError.idl"
51394: #include "nsIDOMTimeRanges.idl"
15751: 
15751: /**
15751:  * The nsIDOMHTMLMediaElement interface is an interface to be implemented by the HTML
15751:  * <audio> and <video> elements.
15751:  *
15751:  * For more information on this interface, please see
15751:  * http://www.whatwg.org/specs/web-apps/current-work/#htmlmediaelement
15751:  *
15751:  * @status UNDER_DEVELOPMENT
15751:  */
15751: 
22761: // undef the GetCurrentTime macro defined in WinBase.h from the MS Platform SDK
22761: %{C++
22761: #ifdef GetCurrentTime
22761: #undef GetCurrentTime
22761: #endif
22761: %}
22761: 
89079: [scriptable, uuid(6733a409-fab3-45e1-af23-9af8c361bdfd)]
15751: interface nsIDOMHTMLMediaElement : nsIDOMHTMLElement
15751: {
15751:   // error state
51394:   readonly attribute nsIDOMMediaError error;
15751: 
15751:   // network state
15751:            attribute DOMString src;
15751:   readonly attribute DOMString currentSrc;
88218:            attribute DOMString crossorigin;
22787:   const unsigned short NETWORK_EMPTY = 0;
22787:   const unsigned short NETWORK_IDLE = 1;
22787:   const unsigned short NETWORK_LOADING = 2;
51938:   const unsigned short NETWORK_NO_SOURCE = 3;
15751:   readonly attribute unsigned short networkState;
51020:            attribute DOMString preload;  
51394:   readonly attribute nsIDOMTimeRanges buffered;
15751:   void load();
22874:   DOMString canPlayType(in DOMString type);
15751: 
15751:   // ready state
22787:   const unsigned short HAVE_NOTHING = 0;
22787:   const unsigned short HAVE_METADATA = 1;
22787:   const unsigned short HAVE_CURRENT_DATA = 2;
22787:   const unsigned short HAVE_FUTURE_DATA = 3;
22787:   const unsigned short HAVE_ENOUGH_DATA = 4;
15751:   readonly attribute unsigned short readyState;
15751:   readonly attribute boolean seeking;
15751: 
15751:   // playback state
60727:            attribute double currentTime;
77175:   readonly attribute double initialTime;
60727:   readonly attribute double duration;
21017:   readonly attribute boolean paused;
75108:   readonly attribute nsIDOMTimeRanges seekable;
15751:   readonly attribute boolean ended;
25272:   readonly attribute boolean mozAutoplayEnabled;
15751:            attribute boolean autoplay;
82534:            attribute boolean loop;
15751:   void play();
15751:   void pause();
15751: 
15751:   // controls
15751:            attribute boolean controls;
60727:            attribute double volume;
15751:            attribute boolean muted;
84679:            attribute boolean defaultMuted;
32901: 
51477:   // Mozilla extension: extra stream metadata information, used as part
51477:   // of MozAudioAvailable events and the mozWriteAudio() method.  The
51477:   // mozFrameBufferLength method allows for the size of the framebuffer
51477:   // used within MozAudioAvailable events to be changed.  The new size must
51477:   // be between 512 and 16384.  The default size, for a  media element with
51477:   // audio is (mozChannels * 1024).
51477:   readonly attribute unsigned long mozChannels;
51477:   readonly attribute unsigned long mozSampleRate;
51477:            attribute unsigned long mozFrameBufferLength;
51477: 
32901:   // Mozilla extension: load data from another media element. This is like
32901:   // load() but we don't run the resource selection algorithm; instead
32901:   // we just set our source to other's currentSrc. This is optimized
32901:   // so that this element will get access to all of other's cached/
32901:   // buffered data. In fact any future data downloaded by this element or
32901:   // other will be sharable by both elements.
32901:   void mozLoadFrom(in nsIDOMHTMLMediaElement other);
77175: 
77175:   // Mozilla extension: provides access to the fragment end time if
77175:   // the media element has a fragment URI for the currentSrc, otherwise
77175:   // it is equal to the media duration.
77175:   readonly attribute double mozFragmentEnd;
15751: };
