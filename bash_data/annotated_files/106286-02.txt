     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef AggregatePlaceholderTxn_h__
     1: #define AggregatePlaceholderTxn_h__
     1: 
     1: #include "EditAggregateTxn.h"
     1: #include "nsEditorUtils.h"
     1: #include "nsIAbsorbingTransaction.h"
     1: #include "nsIDOMNode.h"
     1: #include "nsCOMPtr.h"
     1: #include "nsWeakPtr.h"
     1: #include "nsWeakReference.h"
     1: #include "nsAutoPtr.h"
     1: 
     1: class nsHTMLEditor;
     1: class IMETextTxn;
     1: 
     1: /**
     1:  * An aggregate transaction that knows how to absorb all subsequent
     1:  * transactions with the same name.  This transaction does not "Do" anything.
     1:  * But it absorbs other transactions via merge, and can undo/redo the
     1:  * transactions it has absorbed.
     1:  */
     1:  
     1: class PlaceholderTxn : public EditAggregateTxn, 
     1:                        public nsIAbsorbingTransaction, 
     1:                        public nsSupportsWeakReference
     1: {
     1: public:
     1:   NS_DECL_ISUPPORTS_INHERITED  
     1:   
     1:   PlaceholderTxn();
     1: 
 28154:   NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(PlaceholderTxn, EditAggregateTxn)
     1: // ------------ EditAggregateTxn -----------------------
     1: 
     1:   NS_DECL_EDITTXN
     1: 
     1:   NS_IMETHOD RedoTransaction();
 79445:   NS_IMETHOD Merge(nsITransaction *aTransaction, bool *aDidMerge);
     1: 
     1: // ------------ nsIAbsorbingTransaction -----------------------
     1: 
106286:   NS_IMETHOD Init(nsIAtom* aName, nsSelectionState* aSelState,
106286:                   nsEditor* aEditor);
     1:   
     1:   NS_IMETHOD GetTxnName(nsIAtom **aName);
     1:   
 79445:   NS_IMETHOD StartSelectionEquals(nsSelectionState *aSelState, bool *aResult);
     1: 
     1:   NS_IMETHOD EndPlaceHolderBatch();
     1: 
     1:   NS_IMETHOD ForwardEndBatchTo(nsIAbsorbingTransaction *aForwardingAddress);
     1: 
     1:   NS_IMETHOD Commit();
     1: 
     1:   NS_IMETHOD RememberEndingSelection();
     1: 
     1: protected:
     1: 
     1:   /** the presentation shell, which we'll need to get the selection */
 79445:   bool        mAbsorb;          // do we auto absorb any and all transaction?
     1:   nsWeakPtr   mForwarding;
     1:   IMETextTxn *mIMETextTxn;      // first IME txn in this placeholder - used for IME merging
     1:                                 // non-owning for now - can't nsCOMPtr it due to broken transaction interfaces
 79445:   bool        mCommitted;       // do we stop auto absorbing any matching placeholder txns?
     1:   // these next two members store the state of the selection in a safe way. 
     1:   // selection at the start of the txn is stored, as is the selection at the end.
     1:   // This is so that UndoTransaction() and RedoTransaction() can restore the
     1:   // selection properly.
     1:   nsAutoPtr<nsSelectionState> mStartSel; // use a pointer because this is constructed before we exist
     1:   nsSelectionState  mEndSel;
106286:   nsEditor*         mEditor;   /** the editor for this transaction */
     1: };
     1: 
     1: 
     1: #endif
