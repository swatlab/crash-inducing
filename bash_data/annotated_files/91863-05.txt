57352: <html xmlns="http://www.w3.org/1999/xhtml">
57352: <!--
57352: https://bugzilla.mozilla.org/show_bug.cgi?id=611138
57352: -->
57352: <head>
57352:   <title>Generic tests for SVG animated length lists</title>
57352:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
90224:   <script type="text/javascript" src="MutationEventChecker.js"></script>
57352:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
57352: </head>
57352: <body>
57352: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=611138">Mozilla Bug 611138</a>
57352: <p id="display"></p>
57352: <div id="content" style="display:none;">
57352: <svg id="svg" xmlns="http://www.w3.org/2000/svg" width="100" height="100">
57352:   <path id="path"/>
57352: </svg>
57352: </div>
57352: <pre id="test">
57352: <script class="testbody" type="text/javascript">
57352: <![CDATA[
57352: 
57352: SimpleTest.waitForExplicitFinish();
57352: 
57352: /*
57352: This file runs a series of SVGPathSegList specific tests. Generic SVGXxxList
57352: tests can be found in test_SVGxxxList.xhtml. Anything that can be generalized
57352: to other list types belongs there.
57352: */
57352: 
57352: function run_tests()
57352: {
57352:   document.getElementById('svg').pauseAnimations();
57352: 
61740:   var d;
61740:   var seg;
57352:   var path = document.getElementById("path");
61740:   var list = path.pathSegList;
57352: 
57352:   // See https://bugzilla.mozilla.org/show_bug.cgi?id=611138
57352:   // Here we are doing a replace with a segment (arc) that has more arguments
61740:   // than the total number of arguments in the entire path + 2 (the +2
61740:   // refering to the encoding of the segment types for the two segments).
57352:   path.setAttribute('d', 'M0,0 L100,100');
61740:   var arc = path.createSVGPathSegArcAbs(400, 0, 200, 200, 0, 1, 1);
61740:   list.replaceItem(arc, 1);
57352: 
61740:   is(list.numberOfItems, 2, 'The length of the list should be the same after a valid replaceItem() call');
61740:   is(list.getItem(1), arc, 'The inserted object should now be the object at the index being replaced');
61740: 
61740:   // Test whether and when we normalize the 'd' attribute:
61740: 
61740:   d = "  \n  M  10  ,  10  \n  L  20  10  \n  ";
61740:   path.setAttribute('d', d);
61740:   is(path.getAttribute('d'), d, "Values passed to setAttribute for the 'd' attribute should not be normalised");
61740:   list.getItem(1).y = 20;
61740:   isnot(path.getAttribute('d'), d, "The 'd' attribute should change when its underlying DOM list changes");
61740: 
61740:   // Test that path manipulations still work even when the path is invalid due
61740:   // to it not starting with a moveto segment:
61740: 
61740:   path.setAttribute('d', 'M0,0 L1,1');
61740:   is(list.numberOfItems, 2, 'setAttribute should result in two items')
61740: 
61740:   seg = list.getItem(1);
61740:   list.removeItem(0);
61740:   ok(list.numberOfItems == 1 && list.getItem(0) == seg,
61740:     'If removeItem removes the initial moveto leaving an invalid path, the other items should still be left in the list')
61740: 
61740:   seg = path.createSVGPathSegLinetoAbs(1, 2);
61740:   list.appendItem(seg);
61740:   ok(list.numberOfItems == 2 && list.getItem(1) == seg,
61740:     'appendItem should be able to append to an invalid path');
61740: 
61740:   seg = path.createSVGPathSegLinetoAbs(1, 2);
61740:   list.replaceItem(seg, 1);
61740:   ok(list.numberOfItems == 2 && list.getItem(1) == seg,
61740:     'replaceItem should be able to replace items in an invalid path');
61740: 
61740:   seg = path.createSVGPathSegLinetoAbs(1, 2);
61740:   list.insertItemBefore(seg, 1);
61740:   ok(list.numberOfItems == 3 && list.getItem(1) == seg,
61740:     'insertItemBefore should be able insert items into an invalid path');
61740: 
61740:   seg = path.createSVGPathSegLinetoAbs(1, 2);
61740:   list.initialize(seg);
61740:   ok(list.numberOfItems == 1 && list.getItem(0) == seg,
61740:     'initialize should be able initialize an invalid path with a non-moveto item');
61740: 
90224:   // Test mutation events
90224: 
90224:   eventChecker = new MutationEventChecker;
61740:   d = 'M0,0 L12,34'
61740:   path.setAttribute('d', d);
90224:   eventChecker.watchAttr(path, "d");
90224: 
90224:   // -- Actual changes
90224:   eventChecker.expect("modify modify modify");
90224:   list[0].x = 10;
90224:   list[0].y = 5;
90224:   path.setAttribute("d", "M20,5 L12,34");
90224: 
90224:   // -- Redundant changes
90224:   eventChecker.expect("");
90224:   list[0].x = 20;
90224:   list[1].y = 34;
90224:   path.setAttribute("d", "M20,5 L12,34");
91863: 
91863:   // -- Attribute removal
91863:   eventChecker.expect("remove");
91863:   path.removeAttribute("d");
91863: 
91863:   // -- Non-existent attribute removal
91863:   eventChecker.expect("");
91863:   path.removeAttribute("d");
91863:   path.removeAttributeNS(null, "d");
90224:   eventChecker.finish();
57352: 
57352:   SimpleTest.finish();
57352: }
57352: 
57352: window.addEventListener("load", run_tests, false);
57352: 
57352: ]]>
57352: </script>
57352: </pre>
57352: </body>
57352: </html>
