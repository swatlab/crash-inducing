    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: Daniel Glazman <glazman@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsHTMLCSSUtils_h__
    1: #define nsHTMLCSSUtils_h__
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsString.h"
23904: #include "nsTArray.h"
68870: #include "nsIDOMViewCSS.h"
    1: #include "nsIDOMNode.h"
    1: #include "nsIDOMElement.h"
    1: #include "nsIHTMLEditor.h"
    1: #include "ChangeCSSInlineStyleTxn.h"
    1: #include "nsEditProperty.h"
    1: #include "nsIDOMCSSStyleDeclaration.h"
    1: 
    1: #define SPECIFIED_STYLE_TYPE    1
    1: #define COMPUTED_STYLE_TYPE     2
    1: 
    1: class nsHTMLEditor;
    1: 
    1: typedef void (*nsProcessValueFunc)(const nsAString * aInputString, nsAString & aOutputString,
    1:                                    const char * aDefaultValueString,
    1:                                    const char * aPrependString, const char* aAppendString);
    1: 
    1: class nsHTMLCSSUtils
    1: {
    1: public:
    1:   nsHTMLCSSUtils();
    1:   ~nsHTMLCSSUtils();
    1: 
    1:   enum nsCSSEditableProperty {
    1:     eCSSEditableProperty_NONE=0,
    1:     eCSSEditableProperty_background_color,
    1:     eCSSEditableProperty_background_image,
    1:     eCSSEditableProperty_border,
    1:     eCSSEditableProperty_caption_side,
    1:     eCSSEditableProperty_color,
    1:     eCSSEditableProperty_float,
    1:     eCSSEditableProperty_font_family,
    1:     eCSSEditableProperty_font_size,
    1:     eCSSEditableProperty_font_style,
    1:     eCSSEditableProperty_font_weight,
    1:     eCSSEditableProperty_height,
    1:     eCSSEditableProperty_list_style_type,
    1:     eCSSEditableProperty_margin_left,
    1:     eCSSEditableProperty_margin_right,
    1:     eCSSEditableProperty_text_align,
    1:     eCSSEditableProperty_text_decoration,
    1:     eCSSEditableProperty_vertical_align,
    1:     eCSSEditableProperty_whitespace,
    1:     eCSSEditableProperty_width
    1:   };
    1: 
    1: 
    1:   struct CSSEquivTable {
    1:     nsCSSEditableProperty cssProperty;
    1:     nsProcessValueFunc processValueFunctor;
    1:     const char * defaultValue;
    1:     const char * prependValue;
    1:     const char * appendValue;
    1:     PRBool gettable;
    1:     PRBool caseSensitiveValue;
    1:   };
    1: 
    1: public:
    1:   nsresult    Init(nsHTMLEditor * aEditor);
    1: 
    1:   /** answers true if the given combination element_name/attribute_name
    1:     * has a CSS equivalence in this implementation
    1:     *
    1:     * @return               a boolean saying if the tag/attribute has a css equiv
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aProperty      [IN] an atom containing a HTML tag name
    1:     * @param aAttribute     [IN] a string containing the name of a HTML attribute carried by the element above
    1:     */
    1:   PRBool      IsCSSEditableProperty(nsIDOMNode * aNode, nsIAtom * aProperty, const nsAString * aAttribute);
    1: 
    1:   /** adds/remove a CSS declaration to the STYLE atrribute carried by a given element
    1:     *
    1:     * @param aElement       [IN] a DOM element
    1:     * @param aProperty      [IN] an atom containing the CSS property to set
    1:     * @param aValue         [IN] a string containing the value of the CSS property
    1:     * @param aSuppressTransaction [IN] a boolean indicating, when true,
    1:     *                                  that no transaction should be recorded
    1:     */
    1:   nsresult    SetCSSProperty(nsIDOMElement * aElement, nsIAtom * aProperty,
    1:                              const nsAString & aValue,
    1:                              PRBool aSuppressTransaction);
    1:   nsresult    SetCSSPropertyPixels(nsIDOMElement *aElement, nsIAtom *aProperty,
    1:                                    PRInt32 aIntValue, PRBool aSuppressTxn);
    1:   nsresult    RemoveCSSProperty(nsIDOMElement * aElement, nsIAtom * aProperty,
    1:                                 const nsAString & aPropertyValue, PRBool aSuppressTransaction);
    1: 
    1:   /** directly adds/remove a CSS declaration to the STYLE atrribute carried by
    1:     * a given element without going through the txn manager
    1:     *
    1:     * @param aElement       [IN] a DOM element
    1:     * @param aProperty      [IN] a string containing the CSS property to set/remove
    1:     * @param aValue         [IN] a string containing the new value of the CSS property
    1:     */
    1:   nsresult    SetCSSProperty(nsIDOMElement * aElement,
    1:                              const nsAString & aProperty,
    1:                              const nsAString & aValue);
    1:   nsresult    SetCSSPropertyPixels(nsIDOMElement * aElement,
    1:                                    const nsAString & aProperty,
    1:                                    PRInt32 aIntValue);
    1:   nsresult    RemoveCSSProperty(nsIDOMElement * aElement,
    1:                                 const nsAString & aProperty);
    1: 
    1:   /** gets the specified/computed style value of a CSS property for a given node (or its element
    1:     * ancestor if it is not an element)
    1:     *
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aProperty      [IN] an atom containing the CSS property to get
    1:     * @param aPropertyValue [OUT] the retrieved value of the property
    1:     */
    1:   nsresult    GetSpecifiedProperty(nsIDOMNode *aNode, nsIAtom *aProperty,
    1:                                    nsAString & aValue);
    1:   nsresult    GetComputedProperty(nsIDOMNode *aNode, nsIAtom *aProperty,
    1:                                   nsAString & aValue);
    1: 
    1:   /** Removes a CSS property from the specified declarations in STYLE attribute
    1:    ** and removes the node if it is an useless span
    1:    *
    1:    * @param aNode           [IN] the specific node we want to remove a style from
    1:    * @param aProperty       [IN] the CSS property atom to remove
    1:    * @param aPropertyValue  [IN] the value of the property we have to rremove if the property
    1:    *                             accepts more than one value
    1:    */
    1:   nsresult    RemoveCSSInlineStyle(nsIDOMNode * aNode, nsIAtom * aProperty, const nsAString & aPropertyValue);
    1: 
    1:    /** Answers true is the property can be removed by setting a "none" CSS value
    1:      * on a node
    1:      *
    1:      * @return              a boolean saying if the property can be remove by setting a "none" value
    1:      * @param aProperty     [IN] an atom containing a CSS property
    1:      * @param aAttribute    [IN] pointer to an attribute name or null if this information is irrelevant
    1:      */
    1:   PRBool      IsCSSInvertable(nsIAtom * aProperty, const nsAString * aAttribute);
    1: 
    1:   /** Get the default browser background color if we need it for GetCSSBackgroundColorState
    1:     *
    1:     * @param aColor         [OUT] the default color as it is defined in prefs
    1:     */
    1:   nsresult    GetDefaultBackgroundColor(nsAString & aColor);
    1: 
    1:   /** Get the default length unit used for CSS Indent/Outdent
    1:     *
    1:     * @param aLengthUnit    [OUT] the default length unit as it is defined in prefs
    1:     */
    1:   nsresult    GetDefaultLengthUnit(nsAString & aLengthUnit);
    1: 
    1:   /** asnwers true if the element aElement carries an ID or a class
    1:     *
    1:     * @param aElement       [IN] a DOM element
    1:     * @param aReturn        [OUT] the boolean answer
    1:     */
    1:   nsresult    HasClassOrID(nsIDOMElement * aElement, PRBool & aReturn);
    1: 
    1:   /** returns the list of values for the CSS equivalences to
    1:     * the passed HTML style for the passed node
    1:     *
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aHTMLProperty  [IN] an atom containing an HTML property
    1:     * @param aAttribute     [IN] a pointer to an attribute name or nsnull if irrelevant
    1:     * @param aValueString   [OUT] the list of css values
    1:     * @param aStyleType     [IN] SPECIFIED_STYLE_TYPE to query the specified style values
    1:                                  COMPUTED_STYLE_TYPE  to query the computed style values
    1:     */
    1:   nsresult    GetCSSEquivalentToHTMLInlineStyleSet(nsIDOMNode * aNode,
    1:                                                    nsIAtom * aHTMLProperty,
    1:                                                    const nsAString * aAttribute,
    1:                                                    nsAString & aValueString,
    1:                                                    PRUint8 aStyleType);
    1: 
    1:   /** Does the node aNode (or his parent if it is not an element node) carries
    1:     * the CSS equivalent styles to the HTML style for this node ?
    1:     *
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aHTMLProperty  [IN] an atom containing an HTML property
    1:     * @param aAttribute     [IN] a pointer to an attribute name or nsnull if irrelevant
    1:     * @param aIsSet         [OUT] a boolean being true if the css properties are set
    1:     * @param aValueString   [IN/OUT] the attribute value (in) the list of css values (out)
    1:     * @param aStyleType     [IN] SPECIFIED_STYLE_TYPE to query the specified style values
    1:                                  COMPUTED_STYLE_TYPE  to query the computed style values
    1:     */
    1:   nsresult    IsCSSEquivalentToHTMLInlineStyleSet(nsIDOMNode * aNode,
    1:                                                   nsIAtom * aHTMLProperty,
    1:                                                   const nsAString * aAttribute,
    1:                                                   PRBool & aIsSet,
    1:                                                   nsAString & aValueString,
    1:                                                   PRUint8 aStyleType);
    1: 
    1:   /** Adds to the node the CSS inline styles equivalent to the HTML style
    1:     * and return the number of CSS properties set by the call
    1:     *
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aHTMLProperty  [IN] an atom containing an HTML property
    1:     * @param aAttribute     [IN] a pointer to an attribute name or nsnull if irrelevant
    1:     * @param aValue         [IN] the attribute value
    1:     * @param aCount         [OUT] the number of CSS properties set by the call
    1:     * @param aSuppressTransaction [IN] a boolean indicating, when true,
    1:     *                                  that no transaction should be recorded
    1:     */
    1:   nsresult    SetCSSEquivalentToHTMLStyle(nsIDOMNode * aNode,
    1:                                           nsIAtom * aHTMLProperty,
    1:                                           const nsAString * aAttribute,
    1:                                           const nsAString * aValue,
    1:                                           PRInt32 * aCount,
    1:                                           PRBool aSuppressTransaction);
    1: 
    1:   /** removes from the node the CSS inline styles equivalent to the HTML style
    1:     *
    1:     * @param aNode          [IN] a DOM node
    1:     * @param aHTMLProperty  [IN] an atom containing an HTML property
    1:     * @param aAttribute     [IN] a pointer to an attribute name or nsnull if irrelevant
    1:     * @param aValue         [IN] the attribute value
    1:     * @param aSuppressTransaction [IN] a boolean indicating, when true,
    1:     *                                  that no transaction should be recorded
    1:     */
    1:   nsresult    RemoveCSSEquivalentToHTMLStyle(nsIDOMNode * aNode,
    1:                                              nsIAtom *aHTMLProperty,
    1:                                              const nsAString *aAttribute,
    1:                                              const nsAString *aValue,
    1:                                              PRBool aSuppressTransaction);
    1: 
    1:   /** parses a "xxxx.xxxxxuuu" string where x is a digit and u an alpha char
    1:     * we need such a parser because nsIDOMCSSStyleDeclaration::GetPropertyCSSValue() is not
    1:     * implemented
    1:     *
    1:     * @param aString        [IN] input string to parse
    1:     * @param aValue         [OUT] numeric part
    1:     * @param aUnit          [OUT] unit part
    1:     */
    1:   void        ParseLength(const nsAString & aString, float * aValue, nsIAtom ** aUnit);
    1: 
    1:   /** sets the mIsCSSPrefChecked private member ; used as callback from observer when
    1:     * the css pref state is changed
    1:     *
    1:     * @param aIsCSSPrefChecked [IN] the new boolean state for the pref
    1:     */
    1:   nsresult    SetCSSEnabled(PRBool aIsCSSPrefChecked);
    1: 
    1:   /** retrieves the mIsCSSPrefChecked private member, true if the css pref is checked,
    1:     * false if it is not
    1:     *
    1:     * @return                 the boolean value of the css pref
    1:     */
    1:   PRBool      IsCSSPrefChecked();
    1: 
    1:   /** ElementsSameStyle compares two elements and checks if they have the same
    1:     * specified CSS declarations in the STYLE attribute 
    1:     * The answer is always false if at least one of them carries an ID or a class
    1:     *
    1:     * @return                     true if the two elements are considered to have same styles
    1:     * @param aFirstNode           [IN] a DOM node
    1:     * @param aSecondNode          [IN] a DOM node
    1:     */
    1:   PRBool ElementsSameStyle(nsIDOMNode *aFirstNode, nsIDOMNode *aSecondNode);
    1: 
    1:   /** get the specified inline styles (style attribute) for an element
    1:     *
    1:     * @param aElement        [IN] the element node
    1:     * @param aCssDecl        [OUT] the CSS declaration corresponding to the style attr
    1:     * @param aLength         [OUT] the number of declarations in aCssDecl
    1:     */
    1:   nsresult GetInlineStyles(nsIDOMElement * aElement, nsIDOMCSSStyleDeclaration ** aCssDecl,
    1:                            PRUint32 * aLength);
    1: 
    1:   /** returns aNode itself if it is an element node, or the first ancestors being an element
    1:     * node if aNode is not one itself
    1:     *
    1:     * @param aNode           [IN] a node
    1:     * @param aElement        [OUT] the deepest element node containing aNode (possibly aNode itself)
    1:     */
    1:   nsresult GetElementContainerOrSelf(nsIDOMNode * aNode, nsIDOMElement ** aElement);
    1: 
68870:   /** Gets the default DOMView for a given node
    1:    *
68870:    * @param aNode               the node we want the default DOMView for
68870:    * @param aViewCSS            [OUT] the default DOMViewCSS
    1:    */
68870:   nsresult        GetDefaultViewCSS(nsIDOMNode * aNode, nsIDOMViewCSS ** aViewCSS);
    1: 
    1: 
    1: private:
    1: 
    1:   /** retrieves the css property atom from an enum
    1:     *
    1:     * @param aProperty          [IN] the enum value for the property
    1:     * @param aAtom              [OUT] the corresponding atom
    1:     */
    1:   void  GetCSSPropertyAtom(nsCSSEditableProperty aProperty, nsIAtom ** aAtom);
    1: 
    1:   /** retrieves the CSS declarations equivalent to a HTML style value for
    1:     * a given equivalence table
    1:     *
    1:     * @param aPropertyArray     [OUT] the array of css properties
    1:     * @param aValueArray        [OUT] the array of values for the css properties above
    1:     * @param aEquivTable        [IN] the equivalence table
    1:     * @param aValue             [IN] the HTML style value
    1:     * @param aGetOrRemoveRequest [IN] a boolean value being true if the call to the current method
    1:     *                                 is made for GetCSSEquivalentToHTMLInlineStyleSet or
    1:     *                                 RemoveCSSEquivalentToHTMLInlineStyleSet
    1:     */
    1: 
27986:   void      BuildCSSDeclarations(nsTArray<nsIAtom*> & aPropertyArray,
23904:                                  nsTArray<nsString> & cssValueArray,
    1:                                  const CSSEquivTable * aEquivTable,
    1:                                  const nsAString * aValue,
    1:                                  PRBool aGetOrRemoveRequest);
    1: 
    1:   /** retrieves the CSS declarations equivalent to the given HTML property/attribute/value
    1:     * for a given node
    1:     *
    1:     * @param aNode              [IN] the DOM node
    1:     * @param aHTMLProperty      [IN] an atom containing an HTML property
    1:     * @param aAttribute         [IN] a pointer to an attribute name or nsnull if irrelevant
    1:     * @param aValue             [IN] the attribute value
    1:     * @param aPropertyArray     [OUT] the array of css properties
    1:     * @param aValueArray        [OUT] the array of values for the css properties above
    1:     * @param aGetOrRemoveRequest [IN] a boolean value being true if the call to the current method
    1:     *                                 is made for GetCSSEquivalentToHTMLInlineStyleSet or
    1:     *                                 RemoveCSSEquivalentToHTMLInlineStyleSet
    1:     */
    1:   void      GenerateCSSDeclarationsFromHTMLStyle(nsIDOMNode * aNode,
    1:                                                  nsIAtom * aHTMLProperty,
    1:                                                  const nsAString *aAttribute,
    1:                                                  const nsAString *aValue,
27986:                                                  nsTArray<nsIAtom*> & aPropertyArray,
23904:                                                  nsTArray<nsString> & aValueArray,
    1:                                                  PRBool aGetOrRemoveRequest);
    1: 
    1:   /** creates a Transaction for setting or removing a css property
    1:     *
    1:     * @param aElement           [IN] a DOM element
    1:     * @param aProperty          [IN] a CSS property
    1:     * @param aValue             [IN] the value to remove for this CSS property or the empty string if irrelevant
    1:     * @param aTxn               [OUT] the created transaction
    1:     * @param aRemoveProperty    [IN] true if we create a "remove" transaction, false for a "set"
    1:     */
    1:   nsresult    CreateCSSPropertyTxn(nsIDOMElement * aElement, 
    1:                                    nsIAtom * aProperty,
    1:                                    const nsAString & aValue,
    1:                                    ChangeCSSInlineStyleTxn ** aTxn,
    1:                                    PRBool aRemoveProperty);
    1: 
    1:   /** back-end for GetSpecifiedProperty and GetComputedProperty
    1:     *
    1:     * @param aNode               [IN] a DOM node
    1:     * @param aProperty           [IN] a CSS property
    1:     * @param aValue              [OUT] the retrieved value for this property
68870:     * @param aViewCSS            [IN] the ViewCSS we need in case we query computed styles
    1:     * @param aStyleType          [IN] SPECIFIED_STYLE_TYPE to query the specified style values
68870:                                       COMPUTED_STYLE_TYPE  to query the computed style values
    1:     */
    1:   nsresult    GetCSSInlinePropertyBase(nsIDOMNode * aNode, nsIAtom * aProperty,
    1:                                        nsAString & aValue,
68870:                                        nsIDOMViewCSS * aViewCSS,
    1:                                        PRUint8 aStyleType);
    1: 
    1: 
    1: private:
    1:   nsHTMLEditor            *mHTMLEditor;
    1:   PRBool                  mIsCSSPrefChecked; 
    1: 
    1: };
    1: 
    1: nsresult NS_NewHTMLCSSUtils(nsHTMLCSSUtils** aInstancePtrResult);
    1: 
    1: #define NS_EDITOR_INDENT_INCREMENT_IN        0.4134f
    1: #define NS_EDITOR_INDENT_INCREMENT_CM        1.05f
    1: #define NS_EDITOR_INDENT_INCREMENT_MM        10.5f
    1: #define NS_EDITOR_INDENT_INCREMENT_PT        29.76f
    1: #define NS_EDITOR_INDENT_INCREMENT_PC        2.48f
    1: #define NS_EDITOR_INDENT_INCREMENT_EM        3
    1: #define NS_EDITOR_INDENT_INCREMENT_EX        6
    1: #define NS_EDITOR_INDENT_INCREMENT_PX        40
    1: #define NS_EDITOR_INDENT_INCREMENT_PERCENT   4 
    1: 
    1: #endif /* nsHTMLCSSUtils_h__ */
