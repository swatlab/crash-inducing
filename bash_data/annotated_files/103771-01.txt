 91709: /* -*- Mode: C++; tab-width: 40; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 91709: /* This Source Code Form is subject to the terms of the Mozilla Public
 91709:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 91709:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 91709: 
 91709: #include "mozilla/Hal.h"
 91709: #include "mozilla/HalWakeLock.h"
103771: #include "mozilla/Services.h"
103771: #include "nsObserverService.h"
 91709: #include "nsDataHashtable.h"
 91709: #include "nsHashKeys.h"
 91709: 
 91709: using namespace mozilla::hal;
 91709: 
 91709: namespace mozilla {
 91709: namespace hal {
 91709: 
 91709: WakeLockState
 91709: ComputeWakeLockState(int aNumLocks, int aNumHidden)
 91709: {
 91709:   if (aNumLocks == 0) {
 91709:     return WAKE_LOCK_STATE_UNLOCKED;
 91709:   } else if (aNumLocks == aNumHidden) {
 91709:     return WAKE_LOCK_STATE_HIDDEN;
 91709:   } else {
 91709:     return WAKE_LOCK_STATE_VISIBLE;
 91709:   }
 91709: }
 91709: 
 91709: } // hal
 91709: } // mozilla
 91709: 
 91709: namespace mozilla {
 91709: namespace hal_impl {
 91709: 
 91709: namespace {
 91709: struct LockCount {
 91709:   PRUint32 numLocks;
 91709:   PRUint32 numHidden;
 91709: };
 91709: }
 91709: 
 91709: static int sActiveChildren = 0;
 91709: static nsAutoPtr<nsDataHashtable<nsStringHashKey, LockCount> > sLockTable;
 91709: static bool sInitialized = false;
103771: static bool sIsShuttingDown = false;
103771: 
103771: namespace {
103771: class ClearHashtableOnShutdown : public nsIObserver {
103771: public:
103771:   NS_DECL_ISUPPORTS
103771:   NS_DECL_NSIOBSERVER
103771: };
103771: 
103771: NS_IMPL_ISUPPORTS1(ClearHashtableOnShutdown, nsIObserver)
103771: 
103771: NS_IMETHODIMP
103771: ClearHashtableOnShutdown::Observe(nsISupports* aSubject, const char* aTopic, const PRUnichar* data)
103771: {
103771:   MOZ_ASSERT(!strcmp(aTopic, "xpcom-shutdown"));
103771: 
103771:   sIsShuttingDown = true;
103771:   sLockTable = nsnull;
103771: 
103771:   return NS_OK;
103771: }
103771: } // anonymous namespace
 91709: 
 91709: static void
 91709: Init()
 91709: {
 91709:   sLockTable = new nsDataHashtable<nsStringHashKey, LockCount>();
 91709:   sLockTable->Init();
 91709:   sInitialized = true;
103771: 
103771:   nsCOMPtr<nsIObserverService> obs = mozilla::services::GetObserverService();
103771:   if (obs) {
103771:     obs->AddObserver(new ClearHashtableOnShutdown(), "xpcom-shutdown", false);
103771:   }
 91709: }
 91709: 
 91709: void
 91709: EnableWakeLockNotifications()
 91709: {
 91709:   sActiveChildren++;
 91709: }
 91709: 
 91709: void
 91709: DisableWakeLockNotifications()
 91709: {
 91709:   sActiveChildren--;
 91709: }
 91709: 
 91709: void
 91709: ModifyWakeLock(const nsAString &aTopic,
 91709:                hal::WakeLockControl aLockAdjust,
 91709:                hal::WakeLockControl aHiddenAdjust)
 91709: {
103771:   if (sIsShuttingDown) {
103771:     return;
103771:   }
 91709:   if (!sInitialized) {
 91709:     Init();
 91709:   }
 91709: 
 91709:   LockCount count;
 91709:   count.numLocks = 0;
 91709:   count.numHidden = 0;
 91709:   sLockTable->Get(aTopic, &count);
 91709:   MOZ_ASSERT(count.numLocks >= count.numHidden);
 91709:   MOZ_ASSERT(aLockAdjust >= 0 || count.numLocks > 0);
 91709:   MOZ_ASSERT(aHiddenAdjust >= 0 || count.numHidden > 0);
 91709: 
 91709:   WakeLockState oldState = ComputeWakeLockState(count.numLocks, count.numHidden);
 91709: 
 91709:   count.numLocks += aLockAdjust;
 91709:   count.numHidden += aHiddenAdjust;
 91709:   MOZ_ASSERT(count.numLocks >= count.numHidden);
 91709: 
 91709:   if (count.numLocks) {
 91709:     sLockTable->Put(aTopic, count);
 91709:   } else {
 91709:     sLockTable->Remove(aTopic);
 91709:   }
 91709: 
 91709:   WakeLockState newState = ComputeWakeLockState(count.numLocks, count.numHidden);
 91709: 
 91709:   if (sActiveChildren && oldState != newState) {
 91709:     WakeLockInformation info;
 91709:     info.numLocks() = count.numLocks;
 91709:     info.numHidden() = count.numHidden;
 91709:     info.topic() = aTopic;
 91709:     NotifyWakeLockChange(info);
 91709:   }
 91709: }
 91709: 
 91709: void
 91709: GetWakeLockInfo(const nsAString &aTopic, WakeLockInformation *aWakeLockInfo)
 91709: {
103771:   if (sIsShuttingDown) {
103771:     NS_WARNING("You don't want to get wake lock information during xpcom-shutdown!");
103771:     return;
103771:   }
 91709:   if (!sInitialized) {
 91709:     Init();
 91709:   }
 91709: 
 91709:   LockCount count;
 91709:   count.numLocks = 0;
 91709:   count.numHidden = 0;
 91709:   sLockTable->Get(aTopic, &count);
 91709: 
 91709:   aWakeLockInfo->numLocks() = count.numLocks;
 91709:   aWakeLockInfo->numHidden() = count.numHidden;
 91709:   aWakeLockInfo->topic() = aTopic;
 91709: }
 91709: 
 91709: } // hal_impl
 91709: } // mozilla
