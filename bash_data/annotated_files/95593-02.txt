81151: /* ***** BEGIN LICENSE BLOCK *****
81151:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
81151:  *
81151:  * The contents of this file are subject to the Mozilla Public License Version
81151:  * 1.1 (the "License"); you may not use this file except in compliance with
81151:  * the License. You may obtain a copy of the License at
81151:  * http://www.mozilla.org/MPL/
81151:  *
81151:  * Software distributed under the License is distributed on an "AS IS" basis,
81151:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
81151:  * for the specific language governing rights and limitations under the
81151:  * License.
81151:  *
81151:  * The Original Code is HTML5 View Source code.
81151:  *
81151:  * The Initial Developer of the Original Code is
81151:  * Mozilla Foundation.
81151:  * Portions created by the Initial Developer are Copyright (C) 2010
81151:  * the Initial Developer. All Rights Reserved.
81151:  *
81151:  * Contributor(s):
81151:  *   Henri Sivonen <hsivonen@iki.fi>
81151:  *
81151:  * Alternatively, the contents of this file may be used under the terms of
81151:  * either the GNU General Public License Version 2 or later (the "GPL"), or
81151:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
81151:  * in which case the provisions of the GPL or the LGPL are applicable instead
81151:  * of those above. If you wish to allow use of your version of this file only
81151:  * under the terms of either the GPL or the LGPL, and not to allow others to
81151:  * use your version of this file under the terms of the MPL, indicate your
81151:  * decision by deleting the provisions above and replace them with the notice
81151:  * and other provisions required by the GPL or the LGPL. If you do not delete
81151:  * the provisions above, a recipient may use your version of this file under
81151:  * the terms of any one of the MPL, the GPL or the LGPL.
81151:  *
81151:  * ***** END LICENSE BLOCK ***** */
81151: #ifndef nsHtml5Highlighter_h_
81151: #define nsHtml5Highlighter_h_
81151: 
81151: #include "prtypes.h"
81151: #include "nsCOMPtr.h"
81151: #include "nsHtml5TreeOperation.h"
81151: #include "nsHtml5UTF16Buffer.h"
81151: #include "nsHtml5TreeOperation.h"
81151: #include "nsAHtml5TreeOpSink.h"
81151: 
81151: #define NS_HTML5_HIGHLIGHTER_HANDLE_ARRAY_LENGTH 512
81151: 
81151: /**
81151:  * A state machine for generating HTML for display in View Source based on
81151:  * the transitions the tokenizer makes on the source being viewed.
81151:  */
81151: class nsHtml5Highlighter
81151: {
81151:   public:
81151:     /**
81151:      * The constructor.
81151:      *
81151:      * @param aOpSink the sink for the tree ops generated by this highlighter
81151:      */
81151:     nsHtml5Highlighter(nsAHtml5TreeOpSink* aOpSink);
81151: 
81151:     /**
81151:      * The destructor.
81151:      */
81151:     ~nsHtml5Highlighter();
81151: 
81151:     /**
81151:      * Starts the generated document.
81151:      */
83037:     void Start(const nsAutoString& aTitle);
81151: 
81151:     /**
81151:      * Report a tokenizer state transition.
81151:      *
81151:      * @param aState the state being transitioned to
81151:      * @param aReconsume whether this is a reconsuming transition
81151:      * @param aPos the tokenizer's current position into the buffer
81151:      */
81151:     PRInt32 Transition(PRInt32 aState, bool aReconsume, PRInt32 aPos);
81151: 
81151:     /**
81151:      * Report end of file.
81151:      */
81151:     void End();
81151: 
81151:     /**
81151:      * Set the current buffer being tokenized
81151:      */
81151:     void SetBuffer(nsHtml5UTF16Buffer* aBuffer);
81151: 
81151:     /**
81151:      * Let go of the buffer being tokenized but first, flush text from it.
81151:      *
81151:      * @param aPos the first UTF-16 code unit not to flush
81151:      */
81151:     void DropBuffer(PRInt32 aPos);
81151: 
81151:     /**
81151:      * Flush the tree ops into the sink.
81151:      *
81151:      * @return true if there were ops to flush
81151:      */
81151:     bool FlushOps();
81151: 
81151:     /**
81151:      * Linkify the current attribute value if the attribute name is one of
81151:      * known URL attributes. (When executing tree ops, javascript: URLs will
81151:      * not be linkified, though.)
81151:      *
81151:      * @param aName the name of the attribute
81151:      * @param aValue the value of the attribute
81151:      */
81151:     void MaybeLinkifyAttributeValue(nsHtml5AttributeName* aName,
81151:                                     nsString* aValue);
81151: 
81151:     /**
81151:      * Inform the highlighter that the tokenizer successfully completed a
81151:      * named character reference.
81151:      */
81151:     void CompletedNamedCharacterReference();
81151: 
81152:     /**
81152:      * Adds an error annotation to the node that's currently on top of
81152:      * mStack.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81152:      */
81152:     void AddErrorToCurrentNode(const char* aMsgId);
81152: 
81152:     /**
81152:      * Adds an error annotation to the node that corresponds to the most
81153:      * recently opened markup declaration/tag span, character reference or
81153:      * run of text.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81152:      */
81153:     void AddErrorToCurrentRun(const char* aMsgId);
81153: 
81153:     /**
81153:      * Adds an error annotation to the node that corresponds to the most
81153:      * recently opened markup declaration/tag span, character reference or
81153:      * run of text with one atom to use when formatting the message.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81153:      * @param aName the atom
81153:      */
81153:     void AddErrorToCurrentRun(const char* aMsgId, nsIAtom* aName);
81153: 
81153:     /**
81153:      * Adds an error annotation to the node that corresponds to the most
81153:      * recently opened markup declaration/tag span, character reference or
81153:      * run of text with two atoms to use when formatting the message.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81153:      * @param aName the first atom
81153:      * @param aOther the second atom
81153:      */
81153:     void AddErrorToCurrentRun(const char* aMsgId,
81153:                               nsIAtom* aName,
81153:                               nsIAtom* aOther);
81152: 
81152:     /**
81152:      * Adds an error annotation to the node that corresponds to the most
81152:      * recent potentially character reference-starting ampersand.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81152:      */
81152:     void AddErrorToCurrentAmpersand(const char* aMsgId);
81152: 
81152:     /**
81152:      * Adds an error annotation to the node that corresponds to the most
81152:      * recent potentially self-closing slash.
81153:      *
81153:      * @param aMsgId the id of the message in the property file
81152:      */
81152:     void AddErrorToCurrentSlash(const char* aMsgId);
81152: 
81151:   private:
81151: 
81151:     /**
81151:      * Starts a span with no class.
81151:      */
81151:     void StartSpan();
81151: 
81151:     /**
81151:      * Starts a <span> and sets the class attribute on it.
81151:      *
81151:      * @param aClass the class to set (MUST be a static string that does not
81151:      *        need to be released!)
81151:      */
81151:     void StartSpan(const PRUnichar* aClass);
81151: 
81151:     /**
81164:      * End the current <span> or <a> in the highlighter output.
81151:      */
81164:     void EndSpanOrA();
81151: 
81151:     /**
81153:      * Starts a wrapper around a run of characters.
81153:      */
81153:     void StartCharacters();
81153: 
81153:     /**
81153:      * Ends a wrapper around a run of characters.
81153:      */
95593:     void EndCharactersAndStartMarkupRun();
81153: 
81153:     /**
81151:      * Starts an <a>.
81151:      */
81151:     void StartA();
81151: 
81151:     /**
81151:      * Flushes characters up to but not including the current one.
81151:      */
81151:     void FlushChars();
81151: 
81151:     /**
81151:      * Flushes characters up to and including the current one.
81151:      */
81151:     void FlushCurrent();
81151: 
81151:     /**
81164:      * Finishes highlighting a tag in the input data by closing the open
81164:      * <span> and <a> elements in the highlighter output and then starts
81164:      * another <span> for potentially highlighting characters potentially
81164:      * appearing next.
81151:      */
81151:     void FinishTag();
81151: 
81151:     /**
81151:      * Adds a class attribute to the current node.
81151:      *
81151:      * @param aClass the class to set (MUST be a static string that does not
81151:      *        need to be released!)
81151:      */
81151:     void AddClass(const PRUnichar* aClass);
81151: 
81151:     /**
81151:      * Allocates a handle for an element.
81151:      *
81164:      * See the documentation for nsHtml5TreeBuilder::AllocateContentHandle()
81164:      * in nsHtml5TreeBuilderHSupplement.h.
81164:      *
81151:      * @return the handle
81151:      */
81151:     nsIContent** AllocateContentHandle();
81151: 
81151:     /**
81151:      * Enqueues an element creation tree operation.
81151:      *
81151:      * @param aName the name of the element
81151:      * @param aAttributes the attribute holder (ownership will be taken) or
81151:      *        nsnull for no attributes
81151:      * @return the handle for the element that will be created
81151:      */
81151:     nsIContent** CreateElement(nsIAtom* aName,
81151:                                nsHtml5HtmlAttributes* aAttributes);
81151: 
81151:     /**
81151:      * Gets the handle for the current node. May be called only after the
81151:      * root element has been set.
81151:      *
81151:      * @return the handle for the current node
81151:      */
81151:     nsIContent** CurrentNode();
81151: 
81151:     /**
81151:      * Create an element and push it (its handle) on the stack.
81151:      *
81151:      * @param aName the name of the element
81151:      * @param aAttributes the attribute holder (ownership will be taken) or
81151:      *        nsnull for no attributes
81151:      */
81151:     void Push(nsIAtom* aName, nsHtml5HtmlAttributes* aAttributes);
81151: 
81151:     /**
81151:      * Pops the current node off the stack.
81151:      */
81151:     void Pop();
81151: 
81151:     /**
81151:      * Appends text content to the current node.
81151:      *
81151:      * @param aBuffer the buffer to copy from
81151:      * @param aStart the index of the first code unit to copy
81151:      * @param aLength the number of code units to copy
81151:      */
81151:     void AppendCharacters(const PRUnichar* aBuffer,
81151:                           PRInt32 aStart,
81151:                           PRInt32 aLength);
81151: 
81151:     /**
81151:      * Enqueues a tree op for adding an href attribute with the view-source:
81151:      * URL scheme to the current node.
81151:      *
81151:      * @param aValue the (potentially relative) URL to link to
81151:      */
81151:     void AddViewSourceHref(const nsString& aValue);
81151: 
81151:     /**
81151:      * The state we are transitioning away from.
81151:      */
81151:     PRInt32 mState;
81151: 
81151:     /**
81151:      * The index of the first UTF-16 code unit in mBuffer that hasn't been
81151:      * flushed yet.
81151:      */
81151:     PRInt32 mCStart;
81151: 
81151:     /**
81151:      * The position of the code unit in mBuffer that caused the current
81151:      * transition.
81151:      */
81151:     PRInt32 mPos;
81151: 
81151:     /**
81157:      * The current line number.
81157:      */
81157:     PRInt32 mLineNumber;
81157: 
81157:     /**
81153:      * The number of inline elements open inside the <pre> excluding the
81153:      * span potentially wrapping a run of characters.
81151:      */
81151:     PRInt32 mInlinesOpen;
81151: 
81151:     /**
81153:      * Whether there's a span wrapping a run of characters (excluding CDATA
81153:      * section) open.
81153:      */
81153:     bool mInCharacters;
81153: 
81153:     /**
81151:      * The current buffer being tokenized.
81151:      */
81151:     nsHtml5UTF16Buffer* mBuffer;
81151: 
81151:     /**
81151:      * Whether to highlight syntax visibly initially.
81151:      */
81151:     bool mSyntaxHighlight;
81151: 
81151:     /**
81151:      * The outgoing tree op queue.
81151:      */
81151:     nsTArray<nsHtml5TreeOperation> mOpQueue;
81151: 
81151:     /**
81151:      * The tree op stage for the tree op executor.
81151:      */
81151:     nsAHtml5TreeOpSink* mOpSink;
81151: 
81151:     /**
81153:      * The most recently opened markup declaration/tag or run of characters.
81152:      */
81153:     nsIContent** mCurrentRun;
81152: 
81152:     /**
81152:      * The most recent ampersand in a place where character references were
81152:      * allowed.
81152:      */
81152:     nsIContent** mAmpersand;
81152: 
81152:     /**
81152:      * The most recent slash that might become a self-closing slash.
81152:      */
81152:     nsIContent** mSlash;
81152: 
81152:     /**
81151:      * Memory for element handles.
81151:      */
81151:     nsAutoArrayPtr<nsIContent*> mHandles;
81151: 
81151:     /**
81151:      * Number of handles used in mHandles
81151:      */
81151:     PRInt32 mHandlesUsed;
81151: 
81151:     /**
81151:      * A holder for old contents of mHandles
81151:      */
81151:     nsTArray<nsAutoArrayPtr<nsIContent*> > mOldHandles;
81151: 
81151:     /**
81151:      * The element stack.
81151:      */
81151:     nsTArray<nsIContent**> mStack;
81151: 
81151:     /**
81151:      * The string "comment"
81151:      */
81151:     static PRUnichar sComment[];
81151: 
81151:     /**
81151:      * The string "cdata"
81151:      */
81151:     static PRUnichar sCdata[];
81151: 
81151:     /**
81151:      * The string "start-tag"
81151:      */
81151:     static PRUnichar sStartTag[];
81151: 
81151:     /**
81151:      * The string "attribute-name"
81151:      */
81151:     static PRUnichar sAttributeName[];
81151: 
81151:     /**
81151:      * The string "attribute-value"
81151:      */
81151:     static PRUnichar sAttributeValue[];
81151: 
81151:     /**
81151:      * The string "end-tag"
81151:      */
81151:     static PRUnichar sEndTag[];
81151: 
81151:     /**
81151:      * The string "doctype"
81151:      */
81151:     static PRUnichar sDoctype[];
81151: 
81151:     /**
81151:      * The string "entity"
81151:      */
81151:     static PRUnichar sEntity[];
81154: 
81154:     /**
81154:      * The string "pi"
81154:      */
81154:     static PRUnichar sPi[];
81151: };
81151: 
81151: #endif // nsHtml5Highlighter_h_
