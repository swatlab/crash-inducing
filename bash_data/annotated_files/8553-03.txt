   1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
   1:  *
   1:  * ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is the Mozilla browser.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications, Inc.
   1:  * Portions created by the Initial Developer are Copyright (C) 1999
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Simon Fraser <sfraser@netscape.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: #ifndef nsDocShellEditorData_h__
   1: #define nsDocShellEditorData_h__
   1: 
   1: #ifndef nsCOMPtr_h___
   1: #include "nsCOMPtr.h"
   1: #endif
   1: 
   1: #ifndef __gen_nsIDocShell_h__
   1: #include "nsIDocShell.h"
   1: #endif
   1: 
   1: #ifndef __gen_nsIEditingSession_h__
   1: #include "nsIEditingSession.h"
   1: #endif
   1: 
   1: 
   1: #include "nsIEditor.h"
   1: 
   1: 
   1: // a non-XPCOM class that is used to store per-docshell editor-related
   1: // data.
   1: 
   1: class nsDocShellEditorData
   1: {
   1: public:
   1: 
   1:               nsDocShellEditorData(nsIDocShell* inOwningDocShell);
   1:               ~nsDocShellEditorData();
   1:               
   1: 
   1:   // set a flag to say this frame should be editable when the next url loads
   1:   nsresult    MakeEditable(PRBool inWaitForUriLoad);
   1:   
   1:   PRBool      GetEditable();
   1:   
   1:               // actually create the editor for this docShell
   1:   nsresult    CreateEditor();
   1:   
   1:               // get the editing session. The editing session always lives on the content
   1:               // root docShell; this call may crawl up the frame tree to find it.
   1:   nsresult    GetEditingSession(nsIEditingSession **outEditingSession);
   1:   
   1:               // get the editor for this docShell. May return null but NS_OK
   1:   nsresult    GetEditor(nsIEditor **outEditor);
   1:   
   1:               // set the editor on this docShell
   1:   nsresult    SetEditor(nsIEditor *inEditor);
   1: 
8553:   // Tear down the editor on this docshell, if any.
8553:   void        TearDownEditor();
8553: 
   1: protected:              
   1: 
   1:   nsresult    EnsureEditingSession();
   1: 
   1: protected:
   1: 
   1:   nsIDocShell*                mDocShell;        // the doc shell that owns us. Weak ref, since it always outlives us.  
   1:   
   1:   nsCOMPtr<nsIEditingSession> mEditingSession;  // only present for the content root docShell. Session is owned here
   1: 
   1:   PRBool                      mMakeEditable;    // indicates whether to make an editor after a url load
   1:   nsCOMPtr<nsIEditor>         mEditor;          // if this frame is editable, store editor here. Editor is owned here.
   1: 
   1: };
   1: 
   1: 
   1: #endif // nsDocShellEditorData_h__
