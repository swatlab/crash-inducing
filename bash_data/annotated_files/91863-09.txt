90209: <!DOCTYPE html>
90209: <html xmlns="http://www.w3.org/1999/xhtml">
90209: <!--
90209: https://bugzilla.mozilla.org/show_bug.cgi?id=629200
90209: -->
90209: <head>
90209:   <title>Test for Bug 629200</title>
90209:   <script type="application/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
90209:   <script type="application/javascript" src="MutationEventChecker.js"></script>
90209:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
90209: </head>
90209: <body>
90209: <a target="_blank"
90209:   href="https://bugzilla.mozilla.org/show_bug.cgi?id=629200">Mozilla
90209:   Bug 629200</a>
90209: <p id="display"></p>
90209: <div id="content" style="display: none"></div>
90209: 
90209: <iframe id="svg" src="dataTypes-helper.svg"></iframe>
90209: 
90209: <pre id="test">
90209: <script class="testbody" type="application/javascript">
90209: SimpleTest.waitForExplicitFinish();
90209: 
90209: function runTests()
90209: {
90209:   var doc = $("svg").contentWindow.document;
90209:   var filter = doc.getElementById("filter");
90209:   var convolve = doc.getElementById("convolve");
90209:   var blur = doc.getElementById("blur");
90209:   var marker = doc.getElementById("marker");
90209:   var eventChecker = new MutationEventChecker;
90209: 
90219:   // class attribute
90219:  
90219:   eventChecker.watchAttr(filter, "class");
90219:   eventChecker.expect("add modify remove add");
90219:   filter.setAttribute("class", "foo");
90219:   filter.className.baseVal = "bar";
90219:   filter.removeAttribute("class");
91863:   filter.removeAttributeNS(null, "class");
90219:   filter.className.baseVal = "foo";
90219: 
90219:   eventChecker.expect("");
90219:   filter.className.baseVal = "foo";
90219:   filter.setAttribute("class", "foo");
90219: 
90211:   // length attribute
90211: 
90211:   eventChecker.watchAttr(marker, "markerWidth");
90211:   eventChecker.expect("add modify modify modify modify modify remove add");
90211:   marker.setAttribute("markerWidth", "12.5");
90211:   marker.markerWidth.baseVal.value = 8;
90211:   marker.markerWidth.baseVal.valueInSpecifiedUnits = 9;
90211:   marker.markerWidth.baseVal.valueAsString = "10";
90211:   marker.markerWidth.baseVal.convertToSpecifiedUnits(
90211:     SVGLength.SVG_LENGTHTYPE_CM);
90211:   marker.markerWidth.baseVal.newValueSpecifiedUnits(
90211:     SVGLength.SVG_LENGTHTYPE_MM, 11);
90211:   marker.removeAttribute("markerWidth");
91863:   marker.removeAttributeNS(null, "markerWidth");
90211:   marker.markerWidth.baseVal.value = 8;
90211: 
90211:   eventChecker.expect("remove add modify");
90211:   marker.removeAttribute("markerWidth");
90211:   console.log(marker.getAttribute("markerWidth"));
90211:   marker.markerWidth.baseVal.convertToSpecifiedUnits(
90211:     SVGLength.SVG_LENGTHTYPE_NUMBER);
90211:   console.log(marker.getAttribute("markerWidth"));
90211:   marker.markerWidth.baseVal.value = 8;
90211: 
90211:   eventChecker.expect("");
90211:   marker.markerWidth.baseVal.value = 8;
90211:   marker.setAttribute("markerWidth", "8");
90211:   marker.markerWidth.baseVal.value = 8;
90211:   marker.markerWidth.baseVal.valueAsString = "8";
90211:   marker.markerWidth.baseVal.convertToSpecifiedUnits(
90211:     SVGLength.SVG_LENGTHTYPE_NUMBER);
90211:   marker.markerWidth.baseVal.newValueSpecifiedUnits(
90211:     SVGLength.SVG_LENGTHTYPE_NUMBER, 8);
90211: 
90213:   // number attribute
90213: 
90213:   eventChecker.watchAttr(convolve, "divisor");
90213:   eventChecker.expect("add modify remove add");
90213:   convolve.setAttribute("divisor", "12.5");
90213:   convolve.divisor.baseVal = 6;
90213:   convolve.removeAttribute("divisor");
91863:   convolve.removeAttributeNS(null, "divisor");
90213:   convolve.divisor.baseVal = 8;
90213: 
90213:   eventChecker.expect("");
90213:   convolve.divisor.baseVal = 8;
90213:   convolve.setAttribute("divisor", "8");
90213: 
90214:   // number-optional-number attribute
90214: 
90214:   eventChecker.watchAttr(blur, "stdDeviation");
90214:   eventChecker.expect("add modify remove add");
90214:   blur.setAttribute("stdDeviation", "5, 6");
90214:   blur.stdDeviationX.baseVal = 8;
90214:   blur.removeAttribute("stdDeviation");
91863:   blur.removeAttributeNS(null, "stdDeviation");
90214:   blur.setAttribute("stdDeviation", "2, 3");
90214: 
90214:   eventChecker.expect("");
90214:   blur.stdDeviationX.baseVal = 2;
90214:   blur.stdDeviationY.baseVal = 3;
90214:   blur.setAttribute("stdDeviation", "2, 3");
90214: 
90215:   // integer attribute
90215: 
90215:   eventChecker.watchAttr(convolve, "targetX");
90215:   eventChecker.expect("add modify remove add");
90215:   convolve.setAttribute("targetX", "12");
90215:   convolve.targetX.baseVal = 6;
90215:   convolve.removeAttribute("targetX");
91863:   convolve.removeAttributeNS(null, "targetX");
90215:   convolve.targetX.baseVal = 8;
90215: 
90215:   // Check redundant change when comparing typed value to attribute value
90215:   eventChecker.expect("");
90215:   convolve.setAttribute("targetX", "8");
90215:   // Check redundant change when comparing attribute value to typed value
90215:   eventChecker.expect("remove add");
90215:   convolve.removeAttribute("targetX");
90215:   convolve.setAttribute("targetX", "8");
90215:   convolve.targetX.baseVal = 8;
90215: 
90216:   // integer-optional-integer attribute
90216: 
90216:   eventChecker.watchAttr(filter, "filterRes");
90216:   eventChecker.expect("add modify remove add");
90216:   filter.setAttribute("filterRes", "60, 70");
90216:   filter.filterResX.baseVal = 50;
90216:   filter.removeAttribute("filterRes");
91863:   filter.removeAttributeNS(null, "filterRes");
90216:   filter.setAttribute("filterRes", "50, 60");
90216: 
90216:   eventChecker.expect("");
90216:   filter.filterResX.baseVal = 50;
90216:   filter.setAttribute("filterRes", "50, 60");
90216:   filter.filterResY.baseVal = 60;
90216: 
90217:   // angle attribute
90217: 
90217:   eventChecker.watchAttr(marker, "orient");
90217:   eventChecker.expect("add modify modify modify modify modify remove add");
90217:   marker.setAttribute("orient", "90deg");
90217:   marker.orientAngle.baseVal.value = 12;
90217:   marker.orientAngle.baseVal.valueInSpecifiedUnits = 23;
90217:   marker.orientAngle.baseVal.valueAsString = "34";
90217:   marker.orientAngle.baseVal.newValueSpecifiedUnits(
90217:     SVGAngle.SVG_ANGLETYPE_GRAD, 34);
90217:   marker.orientAngle.baseVal.newValueSpecifiedUnits(
90217:     SVGAngle.SVG_ANGLETYPE_GRAD, 45);
90217:   marker.removeAttribute("orient");
91863:   marker.removeAttributeNS(null, "orient");
90217:   marker.orientAngle.baseVal.value = 40;
90217: 
90217:   eventChecker.expect("");
90217:   marker.orientAngle.baseVal.value = 40;
90217:   marker.orientAngle.baseVal.valueInSpecifiedUnits = 40;
90217:   marker.orientAngle.baseVal.valueAsString = "40";
90217:   marker.orientAngle.baseVal.convertToSpecifiedUnits(
90217:     SVGAngle.SVG_ANGLETYPE_UNSPECIFIED);
90217:   marker.orientAngle.baseVal.newValueSpecifiedUnits(
90217:     SVGAngle.SVG_ANGLETYPE_UNSPECIFIED, 40);
90217: 
90218:   // boolean attribute
90218: 
90218:   eventChecker.watchAttr(convolve, "preserveAlpha");
90218:   eventChecker.expect("add modify remove add");
90218:   convolve.setAttribute("preserveAlpha", "true");
90218:   convolve.preserveAlpha.baseVal = false;
90218:   convolve.removeAttribute("preserveAlpha");
91863:   convolve.removeAttributeNS(null, "preserveAlpha");
90218:   convolve.preserveAlpha.baseVal = true;
90218: 
90218:   eventChecker.expect("");
90218:   convolve.preserveAlpha.baseVal = true;
90218:   convolve.setAttribute("preserveAlpha", "true");
90218: 
90210:   // enum attribute
90210: 
90210:   eventChecker.watchAttr(convolve, "edgeMode");
90210:   eventChecker.expect("add modify remove add");
90210:   convolve.setAttribute("edgeMode", "none");
90210:   convolve.edgeMode.baseVal = SVGFEConvolveMatrixElement.SVG_EDGEMODE_WRAP;
90210:   convolve.removeAttribute("edgeMode");
91863:   convolve.removeAttributeNS(null, "edgeMode");
90210:   convolve.edgeMode.baseVal = SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE;
90210: 
90210:   eventChecker.expect("");
90210:   convolve.edgeMode.baseVal = SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE;
90210:   convolve.setAttribute("edgeMode", "none");
90210:   convolve.edgeMode.baseVal = SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE;
90210: 
90219:   // string attribute
90219: 
90219:   eventChecker.watchAttr(convolve, "result");
90219:   eventChecker.expect("add modify remove add");
90219:   convolve.setAttribute("result", "bar");
90219:   convolve.result.baseVal = "foo";
90219:   convolve.removeAttribute("result");
91863:   convolve.removeAttributeNS(null, "result");
90219:   convolve.result.baseVal = "bar";
90219: 
90219:   eventChecker.expect("");
90219:   convolve.result.baseVal = "bar";
90219:   convolve.setAttribute("result", "bar");
90219:   convolve.result.baseVal = "bar";
90219: 
90220:   // preserveAspectRatio attribute
90220: 
90220:   eventChecker.watchAttr(marker, "preserveAspectRatio");
90220:   eventChecker.expect("add modify remove add");
90220:   marker.setAttribute("preserveAspectRatio", "xMaxYMid slice");
90220:   marker.preserveAspectRatio.baseVal.align =
90220:     SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX;
90220:   marker.removeAttribute("preserveAspectRatio");
91863:   marker.removeAttributeNS(null, "preserveAspectRatio");
90220:   marker.preserveAspectRatio.baseVal.align =
90220:     SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN;
90220: 
90220:   eventChecker.expect("");
90220:   marker.preserveAspectRatio.baseVal.meetOrSlice =
90220:     SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET;
90220:   marker.setAttribute("preserveAspectRatio", "xMidYMin meet");
90220: 
90221:   // viewBox attribute
90221: 
90221:   eventChecker.watchAttr(marker, "viewBox");
90221:   eventChecker.expect("add modify remove add");
90221:   marker.setAttribute("viewBox", "1 2 3 4");
90221:   marker.viewBox.baseVal.height = 5;
90221:   marker.removeAttribute("viewBox");
91863:   marker.removeAttributeNS(null, "viewBox");
90221:   marker.viewBox.baseVal.height = 4;
90221: 
90221:   eventChecker.ignoreEvents();
90221:   marker.setAttribute("viewBox", "1 2 3 4");
90221:   eventChecker.expect("");
90221:   marker.viewBox.baseVal.height = 4;
90221:   marker.viewBox.baseVal.x = 1;
90221:   marker.setAttribute("viewBox", "1 2 3 4");
90221: 
90210:   eventChecker.finish();
90209: 
90209:   SimpleTest.finish();
90209: }
90209: 
90209: window.addEventListener("load", runTests, false);
90209: </script>
90209: </pre>
90209: </body>
90209: </html>
