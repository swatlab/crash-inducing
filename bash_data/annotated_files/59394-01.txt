    1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Foundation code.
    1:  *
    1:  * The Initial Developer of the Original Code is Mozilla Foundation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Stuart Parmenter <stuart@mozilla.com>
    1:  *   Vladimir Vukicevic <vladimir@pobox.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
42553: #include "nsIMemoryReporter.h"
42553: #include "nsMemory.h"
42553: 
    1: #include "gfxASurface.h"
    1: 
    1: #include "gfxImageSurface.h"
    1: 
    1: #include "cairo.h"
    1: 
    1: #ifdef CAIRO_HAS_WIN32_SURFACE
    1: #include "gfxWindowsSurface.h"
    1: #endif
38727: #ifdef CAIRO_HAS_D2D_SURFACE
38727: #include "gfxD2DSurface.h"
38727: #endif
    1: 
29462: #ifdef MOZ_X11
    1: #include "gfxXlibSurface.h"
    1: #endif
    1: 
  314: #ifdef CAIRO_HAS_QUARTZ_SURFACE
    1: #include "gfxQuartzSurface.h"
11244: #include "gfxQuartzImageSurface.h"
    1: #endif
    1: 
29462: #ifdef MOZ_DFB
16526: #include "gfxDirectFBSurface.h"
16526: #endif
16526: 
54377: #if defined(CAIRO_HAS_QT_SURFACE) && defined(MOZ_WIDGET_QT)
16763: #include "gfxQPainterSurface.h"
16763: #endif
16763: 
    1: #include <stdio.h>
 7123: #include <limits.h>
    1: 
    1: static cairo_user_data_key_t gfxasurface_pointer_key;
    1: 
    1: // Surfaces use refcounting that's tied to the cairo surface refcnt, to avoid
    1: // refcount mismatch issues.
    1: nsrefcnt
    1: gfxASurface::AddRef(void)
    1: {
 1349:     if (mSurfaceValid) {
 1349:         if (mFloatingRefs) {
 1349:             // eat a floating ref
 1349:             mFloatingRefs--;
    1:         } else {
    1:             cairo_surface_reference(mSurface);
    1:         }
    1: 
    1:         return (nsrefcnt) cairo_surface_get_reference_count(mSurface);
 1349:     } else {
 1349:         // the surface isn't valid, but we still need to refcount
 1349:         // the gfxASurface
 1349:         return ++mFloatingRefs;
 1349:     }
    1: }
    1: 
    1: nsrefcnt
    1: gfxASurface::Release(void)
    1: {
 1349:     if (mSurfaceValid) {
 1349:         NS_ASSERTION(mFloatingRefs == 0, "gfxASurface::Release with floating refs still hanging around!");
 1349: 
    1:         // Note that there is a destructor set on user data for mSurface,
    1:         // which will delete this gfxASurface wrapper when the surface's refcount goes
    1:         // out of scope.
    1:         nsrefcnt refcnt = (nsrefcnt) cairo_surface_get_reference_count(mSurface);
    1:         cairo_surface_destroy(mSurface);
    1: 
    1:         // |this| may not be valid any more, don't use it!
    1: 
    1:         return --refcnt;
 1349:     } else {
 1349:         if (--mFloatingRefs == 0) {
 1349:             delete this;
 1349:             return 0;
 1349:         }
 1349: 
 1349:         return mFloatingRefs;
 1349:     }
    1: }
    1: 
    1: void
    1: gfxASurface::SurfaceDestroyFunc(void *data) {
    1:     gfxASurface *surf = (gfxASurface*) data;
    1:     // fprintf (stderr, "Deleting wrapper for %p (wrapper: %p)\n", surf->mSurface, data);
    1:     delete surf;
    1: }
    1: 
    1: gfxASurface*
    1: gfxASurface::GetSurfaceWrapper(cairo_surface_t *csurf)
    1: {
    1:     return (gfxASurface*) cairo_surface_get_user_data(csurf, &gfxasurface_pointer_key);
    1: }
    1: 
    1: void
    1: gfxASurface::SetSurfaceWrapper(cairo_surface_t *csurf, gfxASurface *asurf)
    1: {
    1:     cairo_surface_set_user_data(csurf, &gfxasurface_pointer_key, asurf, SurfaceDestroyFunc);
    1: }
    1: 
    1: already_AddRefed<gfxASurface>
    1: gfxASurface::Wrap (cairo_surface_t *csurf)
    1: {
    1:     gfxASurface *result;
    1: 
    1:     /* Do we already have a wrapper for this surface? */
    1:     result = GetSurfaceWrapper(csurf);
    1:     if (result) {
    1:         // fprintf(stderr, "Existing wrapper for %p -> %p\n", csurf, result);
    1:         NS_ADDREF(result);
    1:         return result;
    1:     }
    1: 
    1:     /* No wrapper; figure out the surface type and create it */
    1:     cairo_surface_type_t stype = cairo_surface_get_type(csurf);
    1: 
    1:     if (stype == CAIRO_SURFACE_TYPE_IMAGE) {
    1:         result = new gfxImageSurface(csurf);
    1:     }
    1: #ifdef CAIRO_HAS_WIN32_SURFACE
 6274:     else if (stype == CAIRO_SURFACE_TYPE_WIN32 ||
 6274:              stype == CAIRO_SURFACE_TYPE_WIN32_PRINTING) {
    1:         result = new gfxWindowsSurface(csurf);
    1:     }
    1: #endif
38727: #ifdef CAIRO_HAS_D2D_SURFACE
38727:     else if (stype == CAIRO_SURFACE_TYPE_D2D) {
38727:         result = new gfxD2DSurface(csurf);
38727:     }
38727: #endif
29462: #ifdef MOZ_X11
    1:     else if (stype == CAIRO_SURFACE_TYPE_XLIB) {
    1:         result = new gfxXlibSurface(csurf);
    1:     }
    1: #endif
  314: #ifdef CAIRO_HAS_QUARTZ_SURFACE
  314:     else if (stype == CAIRO_SURFACE_TYPE_QUARTZ) {
    1:         result = new gfxQuartzSurface(csurf);
    1:     }
11244:     else if (stype == CAIRO_SURFACE_TYPE_QUARTZ_IMAGE) {
11244:         result = new gfxQuartzImageSurface(csurf);
11244:     }
    1: #endif
29462: #ifdef MOZ_DFB
16526:     else if (stype == CAIRO_SURFACE_TYPE_DIRECTFB) {
16526:         result = new gfxDirectFBSurface(csurf);
16526:     }
16526: #endif
54377: #if defined(CAIRO_HAS_QT_SURFACE) && defined(MOZ_WIDGET_QT)
33200:     else if (stype == CAIRO_SURFACE_TYPE_QT) {
16763:         result = new gfxQPainterSurface(csurf);
16763:     }
16763: #endif
    1:     else {
    1:         result = new gfxUnknownSurface(csurf);
    1:     }
    1: 
    1:     // fprintf(stderr, "New wrapper for %p -> %p\n", csurf, result);
    1: 
    1:     NS_ADDREF(result);
    1:     return result;
    1: }
    1: 
    1: void
    1: gfxASurface::Init(cairo_surface_t* surface, PRBool existingSurface)
    1: {
 1349:     if (cairo_surface_status(surface)) {
 1349:         // the surface has an error on it
 1349:         mSurfaceValid = PR_FALSE;
 1349:         cairo_surface_destroy(surface);
 1349:         return;
 1349:     }
 1349: 
    1:     SetSurfaceWrapper(surface, this);
    1: 
    1:     mSurface = surface;
 1349:     mSurfaceValid = PR_TRUE;
    1: 
    1:     if (existingSurface) {
 1349:         mFloatingRefs = 0;
    1:     } else {
 1349:         mFloatingRefs = 1;
    1:     }
    1: }
    1: 
    1: gfxASurface::gfxSurfaceType
    1: gfxASurface::GetType() const
    1: {
 4414:     if (!mSurfaceValid)
 4414:         return (gfxSurfaceType)-1;
 4414: 
    1:     return (gfxSurfaceType)cairo_surface_get_type(mSurface);
    1: }
    1: 
    1: gfxASurface::gfxContentType
    1: gfxASurface::GetContentType() const
    1: {
 4414:     if (!mSurfaceValid)
 4414:         return (gfxContentType)-1;
 4414: 
    1:     return (gfxContentType)cairo_surface_get_content(mSurface);
    1: }
    1: 
    1: void
    1: gfxASurface::SetDeviceOffset(const gfxPoint& offset)
    1: {
    1:     cairo_surface_set_device_offset(mSurface,
    1:                                     offset.x, offset.y);
    1: }
    1: 
    1: gfxPoint
    1: gfxASurface::GetDeviceOffset() const
    1: {
    1:     gfxPoint pt;
    1:     cairo_surface_get_device_offset(mSurface, &pt.x, &pt.y);
    1:     return pt;
    1: }
    1: 
    1: void
49179: gfxASurface::Flush() const
    1: {
    1:     cairo_surface_flush(mSurface);
    1: }
    1: 
    1: void
    1: gfxASurface::MarkDirty()
    1: {
    1:     cairo_surface_mark_dirty(mSurface);
    1: }
    1: 
    1: void
    1: gfxASurface::MarkDirty(const gfxRect& r)
    1: {
    1:     cairo_surface_mark_dirty_rectangle(mSurface,
    1:                                        (int) r.pos.x, (int) r.pos.y,
    1:                                        (int) r.size.width, (int) r.size.height);
    1: }
    1: 
    1: void
    1: gfxASurface::SetData(const cairo_user_data_key_t *key,
    1:                      void *user_data,
    1:                      thebes_destroy_func_t destroy)
    1: {
    1:     cairo_surface_set_user_data(mSurface, key, user_data, destroy);
    1: }
    1: 
    1: void *
    1: gfxASurface::GetData(const cairo_user_data_key_t *key)
    1: {
    1:     return cairo_surface_get_user_data(mSurface, key);
    1: }
    1: 
    1: void
    1: gfxASurface::Finish()
    1: {
    1:     cairo_surface_finish(mSurface);
    1: }
 1349: 
42960: already_AddRefed<gfxASurface>
42960: gfxASurface::CreateSimilarSurface(gfxContentType aContent,
42960:                                   const gfxIntSize& aSize)
42960: {
59394:     if (!mSurface || !mSurfaceValid) {
59394:       return nsnull;
59394:     }
59394:     
42960:     cairo_surface_t *surface =
42960:         cairo_surface_create_similar(mSurface, cairo_content_t(aContent),
42960:                                      aSize.width, aSize.height);
42960:     if (cairo_surface_status(surface)) {
42960:         cairo_surface_destroy(surface);
42960:         return nsnull;
42960:     }
42960: 
43774:     nsRefPtr<gfxASurface> result = Wrap(surface);
43774:     cairo_surface_destroy(surface);
43774:     return result.forget();
42960: }
42960: 
 1349: int
 1355: gfxASurface::CairoStatus()
 1349: {
 1349:     if (!mSurfaceValid)
 1349:         return -1;
 1349: 
 1349:     return cairo_surface_status(mSurface);
 1349: }
 1349: 
 1349: /* static */
 1349: PRBool
 1349: gfxASurface::CheckSurfaceSize(const gfxIntSize& sz, PRInt32 limit)
 1349: {
 1486:     if (sz.width < 0 || sz.height < 0) {
 3068:         NS_WARNING("Surface width or height < 0!");
 1349:         return PR_FALSE;
 1486:     }
 1349: 
 7123: #if defined(XP_MACOSX)
 7123:     // CoreGraphics is limited to images < 32K in *height*, so clamp all surfaces on the Mac to that height
 7123:     if (sz.height > SHRT_MAX) {
 7123:         NS_WARNING("Surface size too large (would overflow)!");
 7123:         return PR_FALSE;
 7123:     }
 7123: #endif
 7123: 
 1349:     // check to make sure we don't overflow a 32-bit
 1349:     PRInt32 tmp = sz.width * sz.height;
 1486:     if (tmp && tmp / sz.height != sz.width) {
 3068:         NS_WARNING("Surface size too large (would overflow)!");
 1349:         return PR_FALSE;
 1486:     }
 1349: 
 1349:     // always assume 4-byte stride
 1349:     tmp = tmp * 4;
 1486:     if (tmp && tmp / 4 != sz.width * sz.height) {
 3068:         NS_WARNING("Surface size too large (would overflow)!");
 1349:         return PR_FALSE;
 1486:     }
 1349: 
 1349:     // reject images with sides bigger than limit
 1349:     if (limit &&
 1349:         (sz.width > limit || sz.height > limit))
 1349:         return PR_FALSE;
 1349: 
 1349:     return PR_TRUE;
 1349: }
 6313: 
 6313: nsresult
 6313: gfxASurface::BeginPrinting(const nsAString& aTitle, const nsAString& aPrintToFileName)
 6313: {
13658:     return NS_OK;
 6313: }
 6313: 
 6313: nsresult
 6313: gfxASurface::EndPrinting()
 6313: {
13658:     return NS_OK;
 6313: }
 6313: 
 6313: nsresult
 6313: gfxASurface::AbortPrinting()
 6313: {
13658:     return NS_OK;
 6313: }
 6313: 
 6313: nsresult
 6313: gfxASurface::BeginPage()
 6313: {
13658:     return NS_OK;
 6313: }
 6313: 
 6313: nsresult
 6313: gfxASurface::EndPage()
 6313: {
13658:     return NS_OK;
 6313: }
16930: 
16930: gfxASurface::gfxContentType
16930: gfxASurface::ContentFromFormat(gfxImageFormat format)
16930: {
16930:     switch (format) {
16930:         case ImageFormatARGB32:
16930:             return CONTENT_COLOR_ALPHA;
16930:         case ImageFormatRGB24:
43558:         case ImageFormatRGB16_565:
16930:             return CONTENT_COLOR;
16930:         case ImageFormatA8:
16930:         case ImageFormatA1:
16930:             return CONTENT_ALPHA;
16930: 
16930:         case ImageFormatUnknown:
16930:         default:
16930:             return CONTENT_COLOR;
16930:     }
16930: }
42553: 
54253: gfxASurface::gfxImageFormat
54253: gfxASurface::FormatFromContent(gfxASurface::gfxContentType type)
54253: {
54253:     switch (type) {
54253:         case CONTENT_COLOR_ALPHA:
54253:             return ImageFormatARGB32;
54253:         case CONTENT_ALPHA:
54253:             return ImageFormatA8;
54253:         case CONTENT_COLOR:
54253:         default:
54253:             return ImageFormatRGB24;
54253:     }
54253: }
54253: 
43558: PRInt32
43558: gfxASurface::BytePerPixelFromFormat(gfxImageFormat format)
43558: {
43558:     switch (format) {
43558:         case ImageFormatARGB32:
43558:         case ImageFormatRGB24:
43558:             return 4;
43558:         case ImageFormatRGB16_565:
43558:             return 2;
43558:         case ImageFormatA8:
43558:             return 1;
43558:         default:
43558:             NS_WARNING("Unknown byte per pixel value for Image format");
43558:     }
43558:     return 0;
43558: }
43558: 
42553: /** Memory reporting **/
42553: 
42553: static const char *sSurfaceNamesForSurfaceType[] = {
42553:     "gfx/surface/image",
42553:     "gfx/surface/pdf",
42553:     "gfx/surface/ps",
42553:     "gfx/surface/xlib",
42553:     "gfx/surface/xcb",
42553:     "gfx/surface/glitz",
42553:     "gfx/surface/quartz",
42553:     "gfx/surface/win32",
42553:     "gfx/surface/beos",
42553:     "gfx/surface/directfb",
42553:     "gfx/surface/svg",
42553:     "gfx/surface/os2",
42553:     "gfx/surface/win32printing",
42553:     "gfx/surface/quartzimage",
42553:     "gfx/surface/script",
42553:     "gfx/surface/qpainter",
52174:     "gfx/surface/recording",
52174:     "gfx/surface/vg",
52174:     "gfx/surface/gl",
52174:     "gfx/surface/drm",
52174:     "gfx/surface/tee",
52174:     "gfx/surface/xml",
52174:     "gfx/surface/skia",
52174:     "gfx/surface/d2d"
42553: };
42553: 
42553: PR_STATIC_ASSERT(NS_ARRAY_LENGTH(sSurfaceNamesForSurfaceType) == gfxASurface::SurfaceTypeMax);
52263: #ifdef CAIRO_HAS_D2D_SURFACE
58638: PR_STATIC_ASSERT(PRUint32(CAIRO_SURFACE_TYPE_D2D) == PRUint32(gfxASurface::SurfaceTypeD2D));
52263: #endif
58638: PR_STATIC_ASSERT(PRUint32(CAIRO_SURFACE_TYPE_SKIA) == PRUint32(gfxASurface::SurfaceTypeSkia));
42553: 
42553: static const char *
42553: SurfaceMemoryReporterPathForType(gfxASurface::gfxSurfaceType aType)
42553: {
42553:     if (aType < 0 ||
42553:         aType >= gfxASurface::SurfaceTypeMax)
42553:         return "gfx/surface/unknown";
42553: 
42553:     return sSurfaceNamesForSurfaceType[aType];
42553: }
42553: 
42553: /* Surface size memory reporting */
42553: static nsIMemoryReporter *gSurfaceMemoryReporters[gfxASurface::SurfaceTypeMax] = { 0 };
42553: static PRInt64 gSurfaceMemoryUsed[gfxASurface::SurfaceTypeMax] = { 0 };
42553: 
42553: class SurfaceMemoryReporter :
42553:     public nsIMemoryReporter
42553: {
42553: public:
42553:     SurfaceMemoryReporter(gfxASurface::gfxSurfaceType aType)
42553:         : mType(aType)
42553:     { }
42553: 
42553:     NS_DECL_ISUPPORTS
42553: 
42553:     NS_IMETHOD GetPath(char **memoryPath) {
42553:         *memoryPath = strdup(SurfaceMemoryReporterPathForType(mType));
42553:         return NS_OK;
42553:     }
42553: 
42553:     NS_IMETHOD GetDescription(char **desc) {
42553:         *desc = strdup("Memory used by gfx surface of given type.");
42553:         return NS_OK;
42553:     }
42553: 
42553:     NS_IMETHOD GetMemoryUsed(PRInt64 *memoryUsed) {
42553:         *memoryUsed = gSurfaceMemoryUsed[mType];
42553:         return NS_OK;
42553:     }
42553: 
42553:     gfxASurface::gfxSurfaceType mType;
42553: };
42553: 
42553: NS_IMPL_ISUPPORTS1(SurfaceMemoryReporter, nsIMemoryReporter)
42553: 
42553: void
42553: gfxASurface::RecordMemoryUsedForSurfaceType(gfxASurface::gfxSurfaceType aType,
42553:                                             PRInt32 aBytes)
42553: {
42553:     if (aType < 0 || aType >= SurfaceTypeMax) {
42553:         NS_WARNING("Invalid type to RecordMemoryUsedForSurfaceType!");
42553:         return;
42553:     }
42553: 
42553:     if (gSurfaceMemoryReporters[aType] == 0) {
42553:         gSurfaceMemoryReporters[aType] = new SurfaceMemoryReporter(aType);
42553:         NS_RegisterMemoryReporter(gSurfaceMemoryReporters[aType]);
42553:     }
42553: 
42553:     gSurfaceMemoryUsed[aType] += aBytes;
42553: }
42553: 
42553: void
42553: gfxASurface::RecordMemoryUsed(PRInt32 aBytes)
42553: {
42553:     RecordMemoryUsedForSurfaceType(GetType(), aBytes);
42553:     mBytesRecorded += aBytes;
42553: }
42553: 
42553: void
42553: gfxASurface::RecordMemoryFreed()
42553: {
42553:     if (mBytesRecorded) {
42553:         RecordMemoryUsedForSurfaceType(GetType(), -mBytesRecorded);
42553:         mBytesRecorded = 0;
42553:     }
42553: }
