     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 94037: // Main header first:
 94037: // This is also necessary to ensure our definition of M_SQRT1_2 is picked up
 26875: #include "nsSVGUtils.h"
 93575: 
 94037: // Keep others in (case-insensitive) order:
 94037: #include "gfxContext.h"
 94037: #include "gfxImageSurface.h"
 94037: #include "gfxMatrix.h"
 94037: #include "gfxPlatform.h"
 94037: #include "gfxRect.h"
 94037: #include "gfxUtils.h"
 94037: #include "mozilla/gfx/2D.h"
 94037: #include "mozilla/Preferences.h"
 98711: #include "nsCSSFrameConstructor.h"
 94037: #include "nsComputedDOMStyle.h"
 94037: #include "nsContentUtils.h"
113300: #include "nsDisplayList.h"
 94037: #include "nsFrameList.h"
 94037: #include "nsGkAtoms.h"
 94037: #include "nsIContent.h"
 94037: #include "nsIDocument.h"
     1: #include "nsIDOMSVGElement.h"
 94037: #include "nsIDOMSVGUnitTypes.h"
 94037: #include "nsIFrame.h"
 94037: #include "nsINameSpaceManager.h"
 94037: #include "nsIPresShell.h"
 94037: #include "nsIScriptError.h"
 94037: #include "nsISVGChildFrame.h"
 94037: #include "nsPresContext.h"
 93575: #include "nsRenderingContext.h"
     1: #include "nsStyleCoord.h"
 94037: #include "nsStyleStruct.h"
 98726: #include "nsSVGAnimationElement.h"
 94037: #include "nsSVGClipPathFrame.h"
 94037: #include "nsSVGContainerFrame.h"
 94037: #include "nsSVGEffects.h"
 94037: #include "nsSVGFilterFrame.h"
 94037: #include "nsSVGFilterPaintCallback.h"
 94037: #include "nsSVGForeignObjectFrame.h"
 94037: #include "nsSVGGeometryFrame.h"
 94037: #include "nsSVGInnerSVGFrame.h"
 94037: #include "nsSVGIntegrationUtils.h"
 94037: #include "nsSVGLength2.h"
 94037: #include "nsSVGMaskFrame.h"
 94037: #include "nsSVGOuterSVGFrame.h"
 94037: #include "nsSVGPathGeometryElement.h"
 94037: #include "nsSVGPathGeometryFrame.h"
     1: #include "nsSVGSVGElement.h"
 94037: #include "nsSVGTextContainerFrame.h"
 59471: #include "SVGAnimatedPreserveAspectRatio.h"
 99883: #include "mozilla/unused.h"
 86668: 
 59470: using namespace mozilla;
 41643: using namespace mozilla::dom;
 86668: using namespace mozilla::gfx;
   831: 
     1: // c = n / 255
     1: // (c <= 0.0031308 ? c * 12.92 : 1.055 * pow(c, 1 / 2.4) - 0.055) * 255 + 0.5
     1: static const PRUint8 glinearRGBTosRGBMap[256] = {
     1:   0,  13,  22,  28,  34,  38,  42,  46,
     1:  50,  53,  56,  59,  61,  64,  66,  69,
     1:  71,  73,  75,  77,  79,  81,  83,  85,
     1:  86,  88,  90,  92,  93,  95,  96,  98,
     1:  99, 101, 102, 104, 105, 106, 108, 109,
     1: 110, 112, 113, 114, 115, 117, 118, 119,
     1: 120, 121, 122, 124, 125, 126, 127, 128,
     1: 129, 130, 131, 132, 133, 134, 135, 136,
     1: 137, 138, 139, 140, 141, 142, 143, 144,
     1: 145, 146, 147, 148, 148, 149, 150, 151,
     1: 152, 153, 154, 155, 155, 156, 157, 158,
     1: 159, 159, 160, 161, 162, 163, 163, 164,
     1: 165, 166, 167, 167, 168, 169, 170, 170,
     1: 171, 172, 173, 173, 174, 175, 175, 176,
     1: 177, 178, 178, 179, 180, 180, 181, 182,
     1: 182, 183, 184, 185, 185, 186, 187, 187,
     1: 188, 189, 189, 190, 190, 191, 192, 192,
     1: 193, 194, 194, 195, 196, 196, 197, 197,
     1: 198, 199, 199, 200, 200, 201, 202, 202,
     1: 203, 203, 204, 205, 205, 206, 206, 207,
     1: 208, 208, 209, 209, 210, 210, 211, 212,
     1: 212, 213, 213, 214, 214, 215, 215, 216,
     1: 216, 217, 218, 218, 219, 219, 220, 220,
     1: 221, 221, 222, 222, 223, 223, 224, 224,
     1: 225, 226, 226, 227, 227, 228, 228, 229,
     1: 229, 230, 230, 231, 231, 232, 232, 233,
     1: 233, 234, 234, 235, 235, 236, 236, 237,
     1: 237, 238, 238, 238, 239, 239, 240, 240,
     1: 241, 241, 242, 242, 243, 243, 244, 244,
     1: 245, 245, 246, 246, 246, 247, 247, 248,
     1: 248, 249, 249, 250, 250, 251, 251, 251,
     1: 252, 252, 253, 253, 254, 254, 255, 255
     1: };
     1: 
     1: // c = n / 255
     1: // c <= 0.04045 ? c / 12.92 : pow((c + 0.055) / 1.055, 2.4)) * 255 + 0.5
     1: static const PRUint8 gsRGBToLinearRGBMap[256] = {
     1:   0,   0,   0,   0,   0,   0,   0,   1,
     1:   1,   1,   1,   1,   1,   1,   1,   1,
     1:   1,   1,   2,   2,   2,   2,   2,   2,
     1:   2,   2,   3,   3,   3,   3,   3,   3,
     1:   4,   4,   4,   4,   4,   5,   5,   5,
     1:   5,   6,   6,   6,   6,   7,   7,   7,
     1:   8,   8,   8,   8,   9,   9,   9,  10,
     1:  10,  10,  11,  11,  12,  12,  12,  13,
     1:  13,  13,  14,  14,  15,  15,  16,  16,
     1:  17,  17,  17,  18,  18,  19,  19,  20,
     1:  20,  21,  22,  22,  23,  23,  24,  24,
     1:  25,  25,  26,  27,  27,  28,  29,  29,
     1:  30,  30,  31,  32,  32,  33,  34,  35,
     1:  35,  36,  37,  37,  38,  39,  40,  41,
     1:  41,  42,  43,  44,  45,  45,  46,  47,
     1:  48,  49,  50,  51,  51,  52,  53,  54,
     1:  55,  56,  57,  58,  59,  60,  61,  62,
     1:  63,  64,  65,  66,  67,  68,  69,  70,
     1:  71,  72,  73,  74,  76,  77,  78,  79,
     1:  80,  81,  82,  84,  85,  86,  87,  88,
     1:  90,  91,  92,  93,  95,  96,  97,  99,
     1: 100, 101, 103, 104, 105, 107, 108, 109,
     1: 111, 112, 114, 115, 116, 118, 119, 121,
     1: 122, 124, 125, 127, 128, 130, 131, 133,
     1: 134, 136, 138, 139, 141, 142, 144, 146,
     1: 147, 149, 151, 152, 154, 156, 157, 159,
     1: 161, 163, 164, 166, 168, 170, 171, 173,
     1: 175, 177, 179, 181, 183, 184, 186, 188,
     1: 190, 192, 194, 196, 198, 200, 202, 204,
     1: 206, 208, 210, 212, 214, 216, 218, 220,
     1: 222, 224, 226, 229, 231, 233, 235, 237,
     1: 239, 242, 244, 246, 248, 250, 253, 255
     1: };
     1: 
 98710: static bool sSMILEnabled;
 98710: static bool sSVGDisplayListHitTestingEnabled;
 98710: static bool sSVGDisplayListPaintingEnabled;
 25961: 
 79445: bool
 25961: NS_SMILEnabled()
 25961: {
 98710:   return sSMILEnabled;
 25961: }
 25961: 
 98710: bool
 98710: NS_SVGDisplayListHitTestingEnabled()
 98710: {
 98710:   return sSVGDisplayListHitTestingEnabled;
 98710: }
 98710: 
 98710: bool
 98710: NS_SVGDisplayListPaintingEnabled()
 98710: {
 98710:   return sSVGDisplayListPaintingEnabled;
 25961: }
 25961: 
 91412: // we only take the address of this:
 91412: static mozilla::gfx::UserDataKey sSVGAutoRenderStateKey;
 91412: 
 91412: SVGAutoRenderState::SVGAutoRenderState(nsRenderingContext *aContext,
 91412:                                        RenderMode aMode)
 91412:   : mContext(aContext)
 91412:   , mOriginalRenderState(nsnull)
 91412:   , mMode(aMode)
 91412:   , mPaintingToWindow(false)
 91412: {
 91412:   mOriginalRenderState = aContext->RemoveUserData(&sSVGAutoRenderStateKey);
 91412:   // We always remove ourselves from aContext before it dies, so
 91412:   // passing nsnull as the destroy function is okay.
 91412:   aContext->AddUserData(&sSVGAutoRenderStateKey, this, nsnull);
 91412: }
 91412: 
 91412: SVGAutoRenderState::~SVGAutoRenderState()
 91412: {
 91412:   mContext->RemoveUserData(&sSVGAutoRenderStateKey);
 91412:   if (mOriginalRenderState) {
 91412:     mContext->AddUserData(&sSVGAutoRenderStateKey, mOriginalRenderState, nsnull);
 91412:   }
 91412: }
 91412: 
 91412: void
 91412: SVGAutoRenderState::SetPaintingToWindow(bool aPaintingToWindow)
 91412: {
 91412:   mPaintingToWindow = aPaintingToWindow;
 91412: }
 91412: 
 91412: /* static */ SVGAutoRenderState::RenderMode
 91412: SVGAutoRenderState::GetRenderMode(nsRenderingContext *aContext)
 91412: {
 91412:   void *state = aContext->GetUserData(&sSVGAutoRenderStateKey);
 91412:   if (state) {
 91412:     return static_cast<SVGAutoRenderState*>(state)->mMode;
 91412:   }
 91412:   return NORMAL;
 91412: }
 91412: 
 91412: /* static */ bool
 91412: SVGAutoRenderState::IsPaintingToWindow(nsRenderingContext *aContext)
 91412: {
 91412:   void *state = aContext->GetUserData(&sSVGAutoRenderStateKey);
 91412:   if (state) {
 91412:     return static_cast<SVGAutoRenderState*>(state)->mPaintingToWindow;
 91412:   }
 91412:   return false;
 91412: }
 91412: 
 98710: void
 98710: nsSVGUtils::Init()
 98710: {
 98710:   Preferences::AddBoolVarCache(&sSMILEnabled,
 98710:                                "svg.smil.enabled",
 98710:                                true);
 98710: 
 98710:   Preferences::AddBoolVarCache(&sSVGDisplayListHitTestingEnabled,
 98710:                                "svg.display-lists.hit-testing.enabled");
 98710: 
 98710:   Preferences::AddBoolVarCache(&sSVGDisplayListPaintingEnabled,
 98710:                                "svg.display-lists.painting.enabled");
 98710: }
 98710: 
 64140: nsSVGSVGElement*
 64140: nsSVGUtils::GetOuterSVGElement(nsSVGElement *aSVGElement)
 64140: {
 64140:   nsIContent *element = nsnull;
 67658:   nsIContent *ancestor = aSVGElement->GetFlattenedTreeParent();
 64140: 
 84637:   while (ancestor && ancestor->IsSVG() &&
 64140:                      ancestor->Tag() != nsGkAtoms::foreignObject) {
 64140:     element = ancestor;
 67658:     ancestor = element->GetFlattenedTreeParent();
 64140:   }
 64140: 
 64140:   if (element && element->Tag() == nsGkAtoms::svg) {
 64140:     return static_cast<nsSVGSVGElement*>(element);
 64140:   }
 64140:   return nsnull;
 64140: }
 64140: 
 98726: void
 98726: nsSVGUtils::ActivateByHyperlink(nsIContent *aContent)
 98726: {
 98726:   NS_ABORT_IF_FALSE(aContent->IsNodeOfType(nsINode::eANIMATION),
 98726:                     "Expecting an animation element");
 98726: 
 98726:   static_cast<nsSVGAnimationElement*>(aContent)->ActivateByHyperlink();
 98726: }
 98726: 
  2755: float
 41643: nsSVGUtils::GetFontSize(Element *aElement)
  2755: {
 41643:   if (!aElement)
 32463:     return 1.0f;
 32463: 
 31707:   nsRefPtr<nsStyleContext> styleContext = 
 41643:     nsComputedDOMStyle::GetStyleContextForElementNoFlush(aElement,
 41643:                                                          nsnull, nsnull);
 31707:   if (!styleContext) {
 47840:     // ReportToConsole
 31707:     NS_WARNING("Couldn't get style context for content in GetFontStyle");
  2755:     return 1.0f;
  2755:   }
  2755: 
 31707:   return GetFontSize(styleContext);
 19125: }
 19125: 
 19125: float
 19125: nsSVGUtils::GetFontSize(nsIFrame *aFrame)
 19125: {
 31707:   NS_ABORT_IF_FALSE(aFrame, "NULL frame in GetFontSize");
 31707:   return GetFontSize(aFrame->GetStyleContext());
 31707: }
 31707: 
 31707: float
 31707: nsSVGUtils::GetFontSize(nsStyleContext *aStyleContext)
 31707: {
 31707:   NS_ABORT_IF_FALSE(aStyleContext, "NULL style context in GetFontSize");
 31707: 
 31707:   nsPresContext *presContext = aStyleContext->PresContext();
 31707:   NS_ABORT_IF_FALSE(presContext, "NULL pres context in GetFontSize");
 31707: 
 31707:   nscoord fontSize = aStyleContext->GetStyleFont()->mSize;
 31707:   return nsPresContext::AppUnitsToFloatCSSPixels(fontSize) / 
 31707:          presContext->TextZoom();
  2755: }
  2755: 
  2755: float
 41643: nsSVGUtils::GetFontXHeight(Element *aElement)
  2755: {
 41643:   if (!aElement)
 32463:     return 1.0f;
 32463: 
 31707:   nsRefPtr<nsStyleContext> styleContext = 
 41643:     nsComputedDOMStyle::GetStyleContextForElementNoFlush(aElement,
 41643:                                                          nsnull, nsnull);
 31707:   if (!styleContext) {
 47840:     // ReportToConsole
 31707:     NS_WARNING("Couldn't get style context for content in GetFontStyle");
  2755:     return 1.0f;
  2755:   }
  2755: 
 31707:   return GetFontXHeight(styleContext);
 19125: }
 19125:   
 19125: float
 19125: nsSVGUtils::GetFontXHeight(nsIFrame *aFrame)
 19125: {
 31707:   NS_ABORT_IF_FALSE(aFrame, "NULL frame in GetFontXHeight");
 31707:   return GetFontXHeight(aFrame->GetStyleContext());
 31707: }
 31707: 
 31707: float
 31707: nsSVGUtils::GetFontXHeight(nsStyleContext *aStyleContext)
 31707: {
 31707:   NS_ABORT_IF_FALSE(aStyleContext, "NULL style context in GetFontXHeight");
 31707: 
 31707:   nsPresContext *presContext = aStyleContext->PresContext();
 31707:   NS_ABORT_IF_FALSE(presContext, "NULL pres context in GetFontXHeight");
 31707: 
 68493:   nsRefPtr<nsFontMetrics> fontMetrics;
 31707:   nsLayoutUtils::GetFontMetricsForStyleContext(aStyleContext,
 31707:                                                getter_AddRefs(fontMetrics));
  2755: 
  2755:   if (!fontMetrics) {
 47840:     // ReportToConsole
  2755:     NS_WARNING("no FontMetrics in GetFontXHeight()");
  2755:     return 1.0f;
  2755:   }
  2755: 
 68495:   nscoord xHeight = fontMetrics->XHeight();
  4767:   return nsPresContext::AppUnitsToFloatCSSPixels(xHeight) /
 31707:          presContext->TextZoom();
  2755: }
  2755: 
     1: void
     1: nsSVGUtils::UnPremultiplyImageDataAlpha(PRUint8 *data, 
     1:                                         PRInt32 stride,
 18367:                                         const nsIntRect &rect)
     1: {
     1:   for (PRInt32 y = rect.y; y < rect.YMost(); y++) {
     1:     for (PRInt32 x = rect.x; x < rect.XMost(); x++) {
     1:       PRUint8 *pixel = data + stride * y + 4 * x;
     1: 
     1:       PRUint8 a = pixel[GFX_ARGB32_OFFSET_A];
     1:       if (a == 255)
     1:         continue;
     1: 
     1:       if (a) {
     1:         pixel[GFX_ARGB32_OFFSET_B] = (255 * pixel[GFX_ARGB32_OFFSET_B]) / a;
     1:         pixel[GFX_ARGB32_OFFSET_G] = (255 * pixel[GFX_ARGB32_OFFSET_G]) / a;
     1:         pixel[GFX_ARGB32_OFFSET_R] = (255 * pixel[GFX_ARGB32_OFFSET_R]) / a;
     1:       } else {
     1:         pixel[GFX_ARGB32_OFFSET_B] = 0;
     1:         pixel[GFX_ARGB32_OFFSET_G] = 0;
     1:         pixel[GFX_ARGB32_OFFSET_R] = 0;
     1:       }
     1:     }
     1:   }
     1: }
     1: 
     1: void
     1: nsSVGUtils::PremultiplyImageDataAlpha(PRUint8 *data, 
     1:                                       PRInt32 stride,
 18367:                                       const nsIntRect &rect)
     1: {
     1:   for (PRInt32 y = rect.y; y < rect.YMost(); y++) {
     1:     for (PRInt32 x = rect.x; x < rect.XMost(); x++) {
     1:       PRUint8 *pixel = data + stride * y + 4 * x;
     1: 
     1:       PRUint8 a = pixel[GFX_ARGB32_OFFSET_A];
     1:       if (a == 255)
     1:         continue;
     1: 
     1:       FAST_DIVIDE_BY_255(pixel[GFX_ARGB32_OFFSET_B],
     1:                          pixel[GFX_ARGB32_OFFSET_B] * a);
     1:       FAST_DIVIDE_BY_255(pixel[GFX_ARGB32_OFFSET_G],
     1:                          pixel[GFX_ARGB32_OFFSET_G] * a);
     1:       FAST_DIVIDE_BY_255(pixel[GFX_ARGB32_OFFSET_R],
     1:                          pixel[GFX_ARGB32_OFFSET_R] * a);
     1:     }
     1:   }
     1: }
     1: 
     1: void
     1: nsSVGUtils::ConvertImageDataToLinearRGB(PRUint8 *data, 
     1:                                         PRInt32 stride,
 18367:                                         const nsIntRect &rect)
     1: {
     1:   for (PRInt32 y = rect.y; y < rect.YMost(); y++) {
     1:     for (PRInt32 x = rect.x; x < rect.XMost(); x++) {
     1:       PRUint8 *pixel = data + stride * y + 4 * x;
     1: 
     1:       pixel[GFX_ARGB32_OFFSET_B] =
     1:         gsRGBToLinearRGBMap[pixel[GFX_ARGB32_OFFSET_B]];
     1:       pixel[GFX_ARGB32_OFFSET_G] =
     1:         gsRGBToLinearRGBMap[pixel[GFX_ARGB32_OFFSET_G]];
     1:       pixel[GFX_ARGB32_OFFSET_R] =
     1:         gsRGBToLinearRGBMap[pixel[GFX_ARGB32_OFFSET_R]];
     1:     }
     1:   }
     1: }
     1: 
     1: void
     1: nsSVGUtils::ConvertImageDataFromLinearRGB(PRUint8 *data, 
     1:                                           PRInt32 stride,
 18367:                                           const nsIntRect &rect)
     1: {
     1:   for (PRInt32 y = rect.y; y < rect.YMost(); y++) {
     1:     for (PRInt32 x = rect.x; x < rect.XMost(); x++) {
     1:       PRUint8 *pixel = data + stride * y + 4 * x;
     1: 
     1:       pixel[GFX_ARGB32_OFFSET_B] =
     1:         glinearRGBTosRGBMap[pixel[GFX_ARGB32_OFFSET_B]];
     1:       pixel[GFX_ARGB32_OFFSET_G] =
     1:         glinearRGBTosRGBMap[pixel[GFX_ARGB32_OFFSET_G]];
     1:       pixel[GFX_ARGB32_OFFSET_R] =
     1:         glinearRGBTosRGBMap[pixel[GFX_ARGB32_OFFSET_R]];
     1:     }
     1:   }
     1: }
     1: 
     1: nsresult
     1: nsSVGUtils::ReportToConsole(nsIDocument* doc,
     1:                             const char* aWarning,
     1:                             const PRUnichar **aParams,
     1:                             PRUint32 aParamsLength)
     1: {
 84636:   return nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,
 84636:                                          "SVG", doc,
 84636:                                          nsContentUtils::eSVG_PROPERTIES,
     1:                                          aWarning,
 84636:                                          aParams, aParamsLength);
     1: }
     1: 
     1: float
     1: nsSVGUtils::CoordToFloat(nsPresContext *aPresContext,
     1:                          nsSVGElement *aContent,
     1:                          const nsStyleCoord &aCoord)
     1: {
     1:   switch (aCoord.GetUnit()) {
     1:   case eStyleUnit_Factor:
     1:     // user units
 23852:     return aCoord.GetFactorValue();
     1: 
     1:   case eStyleUnit_Coord:
 23852:     return nsPresContext::AppUnitsToFloatCSSPixels(aCoord.GetCoordValue());
     1: 
     1:   case eStyleUnit_Percent: {
 23852:       nsSVGSVGElement* ctx = aContent->GetCtx();
 23852:       return ctx ? aCoord.GetPercentValue() * ctx->GetLength(nsSVGUtils::XY) : 0.0f;
     1:     }
     1:   default:
 23852:     return 0.0f;
     1:   }
     1: }
     1: 
 79445: bool
 30596: nsSVGUtils::EstablishesViewport(nsIContent *aContent)
 10138: {
 89533:   // Although SVG 1.1 states that <image> is an element that establishes a
 89533:   // viewport, this is really only for the document it references, not
 89533:   // for any child content, which is what this function is used for.
 84637:   return aContent && aContent->IsSVG() &&
 30596:            (aContent->Tag() == nsGkAtoms::svg ||
 30596:             aContent->Tag() == nsGkAtoms::foreignObject ||
 30596:             aContent->Tag() == nsGkAtoms::symbol);
 30596: }
 10138: 
 30596: already_AddRefed<nsIDOMSVGElement>
 30596: nsSVGUtils::GetNearestViewportElement(nsIContent *aContent)
 30596: {
 67658:   nsIContent *element = aContent->GetFlattenedTreeParent();
 30596: 
 84637:   while (element && element->IsSVG()) {
 30596:     if (EstablishesViewport(element)) {
 30596:       if (element->Tag() == nsGkAtoms::foreignObject) {
 30596:         return nsnull;
 30596:       }
 30596:       return nsCOMPtr<nsIDOMSVGElement>(do_QueryInterface(element)).forget();
 30596:     }
 67658:     element = element->GetFlattenedTreeParent();
 30596:   }
 30596:   return nsnull;
 30596: }
 30596: 
 90362: static gfxMatrix
 90362: GetCTMInternal(nsSVGElement *aElement, bool aScreenCTM, bool aHaveRecursed)
 29610: {
 90362:   gfxMatrix matrix = aElement->PrependLocalTransformsTo(gfxMatrix(),
 90362:     aHaveRecursed ? nsSVGElement::eAllTransforms : nsSVGElement::eUserSpaceToParent);
 30596:   nsSVGElement *element = aElement;
 67658:   nsIContent *ancestor = aElement->GetFlattenedTreeParent();
 29610: 
 84223:   while (ancestor && ancestor->IsSVG() &&
 30596:                      ancestor->Tag() != nsGkAtoms::foreignObject) {
 30596:     element = static_cast<nsSVGElement*>(ancestor);
 90360:     matrix *= element->PrependLocalTransformsTo(gfxMatrix()); // i.e. *A*ppend
 90362:     if (!aScreenCTM && nsSVGUtils::EstablishesViewport(element)) {
 30596:       if (!element->NodeInfo()->Equals(nsGkAtoms::svg, kNameSpaceID_SVG) &&
 30596:           !element->NodeInfo()->Equals(nsGkAtoms::symbol, kNameSpaceID_SVG)) {
 30596:         NS_ERROR("New (SVG > 1.1) SVG viewport establishing element?");
 30596:         return gfxMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // singular
 29610:       }
 30596:       // XXX spec seems to say x,y translation should be undone for IsInnerSVG
 30596:       return matrix;
 29610:     }
 67658:     ancestor = ancestor->GetFlattenedTreeParent();
 30596:   }
 30596:   if (!aScreenCTM) {
 30596:     // didn't find a nearestViewportElement
 30596:     return gfxMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // singular
 30596:   }
101875:   if (element->Tag() != nsGkAtoms::svg) {
101875:     // Not a valid SVG fragment
101875:     return gfxMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // singular
101875:   }
101875:   if (element == aElement && !aHaveRecursed) {
101875:     // We get here when getScreenCTM() is called on an outer-<svg>.
101875:     // Consistency with other elements would have us include only the
101875:     // eFromUserSpace transforms, but we include the eAllTransforms
101875:     // transforms in this case since that's what we've been doing for
101875:     // a while, and it keeps us consistent with WebKit and Opera (if not
101875:     // really with the ambiguous spec).
101875:     matrix = aElement->PrependLocalTransformsTo(gfxMatrix());
101875:   }
 41642:   if (!ancestor || !ancestor->IsElement()) {
 30596:     return matrix;
 30596:   }
 84637:   if (ancestor->IsSVG()) {
 90362:     return
 90362:       matrix * GetCTMInternal(static_cast<nsSVGElement*>(ancestor), true, true);
 30596:   }
101875: 
 30596:   // XXX this does not take into account CSS transform, or that the non-SVG
 30596:   // content that we've hit may itself be inside an SVG foreignObject higher up
101875:   nsIDocument* currentDoc = aElement->GetCurrentDoc();
 30596:   float x = 0.0f, y = 0.0f;
 32373:   if (currentDoc && element->NodeInfo()->Equals(nsGkAtoms::svg, kNameSpaceID_SVG)) {
 46225:     nsIPresShell *presShell = currentDoc->GetShell();
 32373:     if (presShell) {
 36656:       nsIFrame* frame = element->GetPrimaryFrame();
 30596:       nsIFrame* ancestorFrame = presShell->GetRootFrame();
 30596:       if (frame && ancestorFrame) {
 30596:         nsPoint point = frame->GetOffsetTo(ancestorFrame);
 30596:         x = nsPresContext::AppUnitsToFloatCSSPixels(point.x);
 30596:         y = nsPresContext::AppUnitsToFloatCSSPixels(point.y);
 30596:       }
 30596:     }
 30596:   }
 30596:   return matrix * gfxMatrix().Translate(gfxPoint(x, y));
 29610: }
 29610: 
 90362: gfxMatrix
 90362: nsSVGUtils::GetCTM(nsSVGElement *aElement, bool aScreenCTM)
 90362: {
 90362:   nsIDocument* currentDoc = aElement->GetCurrentDoc();
 90362:   if (currentDoc) {
 90362:     // Flush all pending notifications so that our frames are up to date
 90362:     currentDoc->FlushPendingNotifications(Flush_Layout);
 90362:   }
 90362:   return GetCTMInternal(aElement, aScreenCTM, false);
 90362: }
 90362: 
 27845: nsSVGDisplayContainerFrame*
 27845: nsSVGUtils::GetNearestSVGViewport(nsIFrame *aFrame)
 27845: {
 27845:   NS_ASSERTION(aFrame->IsFrameOfType(nsIFrame::eSVG), "SVG frame expected");
 27845:   if (aFrame->GetType() == nsGkAtoms::svgOuterSVGFrame) {
 27845:     return nsnull;
 27845:   }
 27845:   while ((aFrame = aFrame->GetParent())) {
 27845:     NS_ASSERTION(aFrame->IsFrameOfType(nsIFrame::eSVG), "SVG frame expected");
 27845:     if (aFrame->GetType() == nsGkAtoms::svgInnerSVGFrame ||
 27845:         aFrame->GetType() == nsGkAtoms::svgOuterSVGFrame) {
 27845:       return do_QueryFrame(aFrame);
 27845:     }
 27845:   }
 27845:   NS_NOTREACHED("This is not reached. It's only needed to compile.");
 27845:   return nsnull;
 27845: }
 27845: 
     1: nsRect
 98711: nsSVGUtils::GetPostFilterVisualOverflowRect(nsIFrame *aFrame,
102183:                                             const nsRect &aPreFilterRect)
 98711: {
 98711:   NS_ABORT_IF_FALSE(aFrame->GetStateBits() & NS_FRAME_SVG_LAYOUT,
 98711:                     "Called on invalid frame type");
 98711: 
 98711:   nsSVGFilterFrame *filter = nsSVGEffects::GetFilterFrame(aFrame);
 98711:   if (!filter) {
102183:     return aPreFilterRect;
 98711:   }
 98711: 
 98711:   PRInt32 appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
102183:   nsIntRect preFilterRect =
102183:       aPreFilterRect.ToOutsidePixels(appUnitsPerDevPixel);
102183:   nsIntRect rect = filter->GetPostFilterBounds(aFrame, nsnull, &preFilterRect);
 98711:   nsRect r = rect.ToAppUnits(appUnitsPerDevPixel) - aFrame->GetPosition();
 98711:   return r;
 98711: }
 98711: 
 93574: bool
 93574: nsSVGUtils::OuterSVGIsCallingUpdateBounds(nsIFrame *aFrame)
 93574: {
 93574:   return nsSVGUtils::GetOuterSVGFrame(aFrame)->IsCallingUpdateBounds();
 93574: }
 93574: 
  1961: void
113300: nsSVGUtils::InvalidateBounds(nsIFrame *aFrame, bool aDuringUpdate,
113300:                              const nsRect *aBoundsSubArea, PRUint32 aFlags)
 22349: {
 93574:   NS_ABORT_IF_FALSE(aFrame->IsFrameOfType(nsIFrame::eSVG),
 93574:                     "Passed bad frame!");
 22349: 
 93574:   NS_ASSERTION(aDuringUpdate == OuterSVGIsCallingUpdateBounds(aFrame),
 93574:                "aDuringUpdate lies!");
 93574: 
 93574:   // Rendering observers must be notified about changes to the frames that they
 93574:   // are observing _before_ UpdateBounds is called on the SVG frame tree, so we
 93574:   // only need to notify observers if we're not under an UpdateBounds call.
 93574:   // In fact, it would actually be wrong to notify observers while under
 93574:   // UpdateBounds because the observers will try to mark themselves as dirty
 93574:   // and, since UpdateBounds would be in the process of _removeing_ dirty bits
 93574:   // from frames, that would mess things up.
 93574:   if (!aDuringUpdate) {
 93574:     NS_ASSERTION(!OuterSVGIsCallingUpdateBounds(aFrame),
 93574:                  "Must not InvalidateRenderingObservers() under "
 93574:                  "nsISVGChildFrame::UpdateBounds!");
 93574: 
 93574:     nsSVGEffects::InvalidateRenderingObservers(aFrame);
 93574:   }
 93574: 
 93574:   // Must come after InvalidateRenderingObservers
 93574:   if (aFrame->GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD) {
 89514:     return;
 89514:   }
 89514: 
 93574:   // XXXjwatt: can this come before InvalidateRenderingObservers?
 93574:   if (aFrame->GetStateBits() &
 93574:       (NS_FRAME_IS_DIRTY | NS_FRAME_FIRST_REFLOW)) {
 93574:     // Nothing to do if we're already dirty, or if the outer-<svg>
 93574:     // hasn't yet had its initial reflow.
 93574:     return;
 93574:   }
 93574: 
113300:   // Okay, so now we pass the area that needs to be invalidated up our parent
113300:   // chain, accounting for filter effects and transforms as we go, until we
113300:   // reach our nsSVGOuterSVGFrame where we can invalidate:
 93574: 
113300:   nsRect invalidArea;
113300:   if (aBoundsSubArea) {
113300:     invalidArea = *aBoundsSubArea;
113300:   } else {
113300:     invalidArea = aFrame->GetVisualOverflowRect();
113300:     // GetVisualOverflowRect() already includes filter effects and transforms,
113300:     // so advance to our parent before the loop below:
113300:     invalidArea += aFrame->GetPosition();
113300:     aFrame = aFrame->GetParent();
113300:   }
113300: 
113300:   PRInt32 appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
113300:   PRInt32 appUnitsPerCSSPx = aFrame->PresContext()->AppUnitsPerCSSPixel();
113300: 
113300:   while (aFrame) {
113300:     if ((aFrame->GetStateBits() & NS_FRAME_IS_DIRTY)) {
113300:       // This ancestor frame has already been invalidated, so nothing to do.
 89454:       return;
113300:     }
113300:     if (aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG) {
113300:       break;
113300:     }
113300:     if (aFrame->GetType() == nsGkAtoms::svgInnerSVGFrame &&
113300:         aFrame->GetStyleDisplay()->IsScrollableOverflow()) {
113300:       // Clip rect to the viewport established by this inner-<svg>:
113300:       float x, y, width, height;
113300:       static_cast<nsSVGSVGElement*>(aFrame->GetContent())->
113300:         GetAnimatedLengthValues(&x, &y, &width, &height, nsnull);
113300:       if (width <= 0.0f || height <= 0.0f) {
113300:         return; // Nothing to invalidate
113300:       }
113300:       nsRect viewportRect =
113300:         nsLayoutUtils::RoundGfxRectToAppRect(gfxRect(0.0, 0.0, width, height),
113300:                                              appUnitsPerCSSPx);
113300:       invalidArea = invalidArea.Intersect(viewportRect);
113300:       if (invalidArea.IsEmpty()) {
113300:         return; // Nothing to invalidate
113300:       }
113300:     }
113300:     nsSVGFilterFrame *filterFrame = nsSVGEffects::GetFilterFrame(aFrame);
113300:     if (filterFrame) {
113300:       invalidArea =
113300:         filterFrame->GetPostFilterDirtyArea(aFrame,
113300:                             invalidArea.ToOutsidePixels(appUnitsPerDevPixel)).
113300:           ToAppUnits(appUnitsPerDevPixel);
113300:     }
113300:     if (aFrame->IsTransformed()) {
113300:       invalidArea =
113300:         nsDisplayTransform::TransformRect(invalidArea, aFrame, nsPoint(0, 0));
113300:     }
113300:     invalidArea += aFrame->GetPosition();
113300:     aFrame = aFrame->GetParent();
113300:   }
 89454: 
113320:   if (!aFrame) {
113320:     // We seem to be able to get here, even though SVG frames are never created
113320:     // without an ancestor nsSVGOuterSVGFrame. See bug 767996.
113320:     return;
113320:   }
113320: 
113300:   NS_ASSERTION(aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG,
113300:                "SVG frames must always have an nsSVGOuterSVGFrame ancestor!");
113300:   invalidArea.MoveBy(aFrame->GetContentRect().TopLeft() - aFrame->GetPosition());
113300: 
113300:   static_cast<nsSVGOuterSVGFrame*>(aFrame)->InvalidateWithFlags(invalidArea,
113300:                                                                 aFlags);
 22349: }
 22349: 
 22349: void
 93574: nsSVGUtils::ScheduleBoundsUpdate(nsIFrame *aFrame)
 14042: {
 93574:   NS_ABORT_IF_FALSE(aFrame->IsFrameOfType(nsIFrame::eSVG),
 93574:                     "Passed bad frame!");
 14042: 
 93574:   // If this is triggered, the callers should be fixed to call us before
 93574:   // UpdateBounds is called. If we try to mark dirty bits on frames while we're
 93574:   // in the process of removing them, things will get messed up.
 93574:   NS_ASSERTION(!OuterSVGIsCallingUpdateBounds(aFrame),
 93574:                "Do not call under nsISVGChildFrame::UpdateBounds!");
 14042: 
 93574:   // We don't call nsSVGEffects::InvalidateRenderingObservers here because
 93574:   // we should only be called under InvalidateAndScheduleBoundsUpdate (which
 93574:   // calls InvalidateBounds) or nsSVGDisplayContainerFrame::InsertFrames
 93574:   // (at which point the frame has no observers).
 93574: 
 93574:   if (aFrame->GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD) {
 89454:     return;
 89454:   }
 89454: 
 93574:   if (aFrame->GetStateBits() &
 93574:       (NS_FRAME_IS_DIRTY | NS_FRAME_FIRST_REFLOW)) {
 93574:     // Nothing to do if we're already dirty, or if the outer-<svg>
 93574:     // hasn't yet had its initial reflow.
 14042:     return;
 14042:   }
 14042: 
 93574:   nsSVGOuterSVGFrame *outerSVGFrame = nsnull;
 93574: 
 93574:   // We must not add dirty bits to the nsSVGOuterSVGFrame or else
 93574:   // PresShell::FrameNeedsReflow won't work when we pass it in below.
 93574:   if (aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG) {
 93574:     outerSVGFrame = static_cast<nsSVGOuterSVGFrame*>(aFrame);
 93574:   } else {
 93574:     aFrame->AddStateBits(NS_FRAME_IS_DIRTY);
 93574: 
 93574:     nsIFrame *f = aFrame->GetParent();
 93574:     while (f && !(f->GetStateBits() & NS_STATE_IS_OUTER_SVG)) {
 93574:       if (f->GetStateBits() &
 93574:           (NS_FRAME_IS_DIRTY | NS_FRAME_HAS_DIRTY_CHILDREN)) {
 89454:         return;
 93574:       }
 93574:       f->AddStateBits(NS_FRAME_HAS_DIRTY_CHILDREN);
 93574:       f = f->GetParent();
 93574:       NS_ABORT_IF_FALSE(f->IsFrameOfType(nsIFrame::eSVG),
 93574:                         "NS_STATE_IS_OUTER_SVG check above not valid!");
 93574:     }
 89454: 
 93574:     outerSVGFrame = static_cast<nsSVGOuterSVGFrame*>(f);
 93574: 
 93574:     NS_ABORT_IF_FALSE(outerSVGFrame &&
 93574:                       outerSVGFrame->GetType() == nsGkAtoms::svgOuterSVGFrame,
 93574:                       "Did not find nsSVGOuterSVGFrame!");
 14042:   }
 93574: 
 93574:   if (outerSVGFrame->GetStateBits() & NS_FRAME_IN_REFLOW) {
 93574:     // We're currently under an nsSVGOuterSVGFrame::Reflow call so there is no
 93574:     // need to call PresShell::FrameNeedsReflow, since we have an
 93574:     // nsSVGOuterSVGFrame::DidReflow call pending.
 93574:     return;
 93574:   }
 93574: 
 93574:   nsFrameState dirtyBit =
 93574:     (outerSVGFrame == aFrame ? NS_FRAME_IS_DIRTY : NS_FRAME_HAS_DIRTY_CHILDREN);
 93574: 
 93574:   aFrame->PresContext()->PresShell()->FrameNeedsReflow(
 93574:     outerSVGFrame, nsIPresShell::eResize, dirtyBit);
 93574: }
 93574: 
 93574: void
 93574: nsSVGUtils::InvalidateAndScheduleBoundsUpdate(nsIFrame *aFrame)
 93574: {
 93574:   // If this is triggered, the callers should be fixed to call us much
 93574:   // earlier. If we try to mark dirty bits on frames while we're in the
 93574:   // process of removing them, things will get messed up.
 93574:   NS_ASSERTION(!OuterSVGIsCallingUpdateBounds(aFrame),
 93574:                "Must not call under nsISVGChildFrame::UpdateBounds!");
 93574: 
 93574:   InvalidateBounds(aFrame, false);
 93574:   ScheduleBoundsUpdate(aFrame);
 93574: }
 93574: 
 93574: bool
 93574: nsSVGUtils::NeedsUpdatedBounds(nsIFrame *aFrame)
 93574: {
 93574:   NS_ABORT_IF_FALSE(aFrame->IsFrameOfType(nsIFrame::eSVG),
 93574:                     "SVG uses bits differently!");
 93574: 
 93574:   // The flags we test here may change, hence why we have this separate
 93574:   // function.
 93574:   return NS_SUBTREE_DIRTY(aFrame);
 16124: }
 14042: 
 14042: void
 13316: nsSVGUtils::NotifyAncestorsOfFilterRegionChange(nsIFrame *aFrame)
 13316: {
 89454:   NS_ABORT_IF_FALSE(!(aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG),
 89454:                     "Not expecting to be called on the outer SVG Frame");
 14334: 
 13316:   aFrame = aFrame->GetParent();
 13316: 
 13316:   while (aFrame) {
 13316:     if (aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG)
 13316:       return;
 13316: 
 16501:     nsSVGFilterProperty *property = nsSVGEffects::GetFilterProperty(aFrame);
 16406:     if (property) {
 13316:       property->Invalidate();
 13316:     }
 13316:     aFrame = aFrame->GetParent();
 13316:   }
 13316: }
 13316: 
 15943: double
 15943: nsSVGUtils::ComputeNormalizedHypotenuse(double aWidth, double aHeight)
 15943: {
 15943:   return sqrt((aWidth*aWidth + aHeight*aHeight)/2);
 15943: }
 15943: 
     1: float
 29067: nsSVGUtils::ObjectSpace(const gfxRect &aRect, const nsSVGLength2 *aLength)
     1: {
     1:   float fraction, axis;
     1: 
     1:   switch (aLength->GetCtxType()) {
     1:   case X:
 29067:     axis = aRect.Width();
     1:     break;
     1:   case Y:
 29067:     axis = aRect.Height();
     1:     break;
     1:   case XY:
 29067:     axis = float(ComputeNormalizedHypotenuse(aRect.Width(), aRect.Height()));
 35655:     break;
 35655:   default:
 35655:     NS_NOTREACHED("unexpected ctx type");
 35655:     axis = 0.0f;
 35655:     break;
     1:   }
     1: 
 10661:   if (aLength->IsPercentage()) {
     1:     fraction = aLength->GetAnimValInSpecifiedUnits() / 100;
 35655:   } else {
  3233:     fraction = aLength->GetAnimValue(static_cast<nsSVGSVGElement*>
  3233:                                                 (nsnull));
 35655:   }
     1: 
     1:   return fraction * axis;
     1: }
     1: 
     1: float
 19125: nsSVGUtils::UserSpace(nsSVGElement *aSVGElement, const nsSVGLength2 *aLength)
     1: {
     1:   return aLength->GetAnimValue(aSVGElement);
     1: }
     1: 
 19125: float
 19125: nsSVGUtils::UserSpace(nsIFrame *aNonSVGContext, const nsSVGLength2 *aLength)
 19125: {
 19125:   return aLength->GetAnimValue(aNonSVGContext);
 19125: }
 19125: 
     1: float
     1: nsSVGUtils::AngleBisect(float a1, float a2)
     1: {
  3233:   float delta = fmod(a2 - a1, static_cast<float>(2*M_PI));
     1:   if (delta < 0) {
     1:     delta += 2*M_PI;
     1:   }
     1:   /* delta is now the angle from a1 around to a2, in the range [0, 2*M_PI) */
     1:   float r = a1 + delta/2;
     1:   if (delta >= M_PI) {
     1:     /* the arc from a2 to a1 is smaller, so use the ray on that side */
     1:     r += M_PI;
     1:   }
     1:   return r;
     1: }
     1: 
     1: nsSVGOuterSVGFrame *
     1: nsSVGUtils::GetOuterSVGFrame(nsIFrame *aFrame)
     1: {
     1:   while (aFrame) {
     1:     if (aFrame->GetStateBits() & NS_STATE_IS_OUTER_SVG) {
  3233:       return static_cast<nsSVGOuterSVGFrame*>(aFrame);
     1:     }
     1:     aFrame = aFrame->GetParent();
     1:   }
     1: 
     1:   return nsnull;
     1: }
     1: 
  2014: nsIFrame*
  2014: nsSVGUtils::GetOuterSVGFrameAndCoveredRegion(nsIFrame* aFrame, nsRect* aRect)
  2014: {
 23554:   nsISVGChildFrame* svg = do_QueryFrame(aFrame);
  2014:   if (!svg)
  2014:     return nsnull;
 59725:   *aRect = (aFrame->GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD) ?
 59725:              nsRect(0, 0, 0, 0) : svg->GetCoveredRegion();
  2014:   return GetOuterSVGFrame(aFrame);
  2014: }
  2014: 
 30596: gfxMatrix
 71887: nsSVGUtils::GetViewBoxTransform(const nsSVGElement* aElement,
 37974:                                 float aViewportWidth, float aViewportHeight,
     1:                                 float aViewboxX, float aViewboxY,
     1:                                 float aViewboxWidth, float aViewboxHeight,
 59470:                                 const SVGAnimatedPreserveAspectRatio &aPreserveAspectRatio)
     1: {
 59472:   return GetViewBoxTransform(aElement,
 59472:                              aViewportWidth, aViewportHeight,
 59472:                              aViewboxX, aViewboxY,
 59472:                              aViewboxWidth, aViewboxHeight,
 59472:                              aPreserveAspectRatio.GetAnimValue());
 59472: }
 59472: 
 59472: gfxMatrix
 71887: nsSVGUtils::GetViewBoxTransform(const nsSVGElement* aElement,
 59472:                                 float aViewportWidth, float aViewportHeight,
 59472:                                 float aViewboxX, float aViewboxY,
 59472:                                 float aViewboxWidth, float aViewboxHeight,
 59472:                                 const SVGPreserveAspectRatio &aPreserveAspectRatio)
 59472: {
 59473:   NS_ASSERTION(aViewportWidth  >= 0, "viewport width must be nonnegative!");
 59473:   NS_ASSERTION(aViewportHeight >= 0, "viewport height must be nonnegative!");
 12023:   NS_ASSERTION(aViewboxWidth  > 0, "viewBox width must be greater than zero!");
 12023:   NS_ASSERTION(aViewboxHeight > 0, "viewBox height must be greater than zero!");
 12023: 
 59472:   PRUint16 align = aPreserveAspectRatio.GetAlign();
 59472:   PRUint16 meetOrSlice = aPreserveAspectRatio.GetMeetOrSlice();
     1: 
     1:   // default to the defaults
     1:   if (align == nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_UNKNOWN)
     1:     align = nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMID;
     1:   if (meetOrSlice == nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_UNKNOWN)
     1:     meetOrSlice = nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_MEET;
     1: 
     1:   float a, d, e, f;
     1:   a = aViewportWidth / aViewboxWidth;
     1:   d = aViewportHeight / aViewboxHeight;
     1:   e = 0.0f;
     1:   f = 0.0f;
     1: 
     1:   if (align != nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_NONE &&
     1:       a != d) {
 19264:     if ((meetOrSlice == nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_MEET &&
 19264:         a < d) ||
 19264:         (meetOrSlice == nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_SLICE &&
 19264:         d < a)) {
     1:       d = a;
     1:       switch (align) {
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMIN:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMIN:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMIN:
     1:         break;
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMID:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMID:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMID:
     1:         f = (aViewportHeight - a * aViewboxHeight) / 2.0f;
     1:         break;
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMAX:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMAX:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMAX:
     1:         f = aViewportHeight - a * aViewboxHeight;
     1:         break;
     1:       default:
     1:         NS_NOTREACHED("Unknown value for align");
     1:       }
     1:     }
     1:     else if (
 19264:       (meetOrSlice == nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_MEET &&
 19264:       d < a) ||
 19264:       (meetOrSlice == nsIDOMSVGPreserveAspectRatio::SVG_MEETORSLICE_SLICE &&
 19264:       a < d)) {
     1:       a = d;
     1:       switch (align) {
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMIN:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMID:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMINYMAX:
     1:         break;
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMIN:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMID:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMIDYMAX:
     1:         e = (aViewportWidth - a * aViewboxWidth) / 2.0f;
     1:         break;
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMIN:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMID:
     1:       case nsIDOMSVGPreserveAspectRatio::SVG_PRESERVEASPECTRATIO_XMAXYMAX:
     1:         e = aViewportWidth - a * aViewboxWidth;
     1:         break;
     1:       default:
     1:         NS_NOTREACHED("Unknown value for align");
     1:       }
     1:     }
     1:     else NS_NOTREACHED("Unknown value for meetOrSlice");
     1:   }
     1:   
     1:   if (aViewboxX) e += -a * aViewboxX;
     1:   if (aViewboxY) f += -d * aViewboxY;
     1:   
 30596:   return gfxMatrix(a, 0.0f, 0.0f, d, e, f);
     1: }
     1: 
 27899: gfxMatrix
     1: nsSVGUtils::GetCanvasTM(nsIFrame *aFrame)
     1: {
 27899:   // XXX yuck, we really need a common interface for GetCanvasTM
 27899: 
 27899:   if (!aFrame->IsFrameOfType(nsIFrame::eSVG)) {
102527:     return nsSVGIntegrationUtils::GetCSSPxToDevPxMatrix(aFrame);
 27899:   }
 19125: 
 25737:   nsIAtom* type = aFrame->GetType();
 25737:   if (type == nsGkAtoms::svgForeignObjectFrame) {
 27899:     return static_cast<nsSVGForeignObjectFrame*>(aFrame)->GetCanvasTM();
  1519:   }
 27899: 
 27899:   nsSVGContainerFrame *containerFrame = do_QueryFrame(aFrame);
 27899:   if (containerFrame) {
     1:     return containerFrame->GetCanvasTM();
     1:   }
     1: 
 27899:   return static_cast<nsSVGGeometryFrame*>(aFrame)->GetCanvasTM();
     1: }
     1: 
     1: void 
 10661: nsSVGUtils::NotifyChildrenOfSVGChange(nsIFrame *aFrame, PRUint32 aFlags)
  9548: {
 77154:   nsIFrame *kid = aFrame->GetFirstPrincipalChild();
  9548: 
 37141:   while (kid) {
 37141:     nsISVGChildFrame* SVGFrame = do_QueryFrame(kid);
  9548:     if (SVGFrame) {
 10661:       SVGFrame->NotifySVGChanged(aFlags); 
  9548:     } else {
 37141:       NS_ASSERTION(kid->IsFrameOfType(nsIFrame::eSVG), "SVG frame expected");
  9548:       // recurse into the children of container frames e.g. <clipPath>, <mask>
  9548:       // in case they have child frames with transformation matrices
 78463:       NotifyChildrenOfSVGChange(kid, aFlags);
  9548:     }
 37141:     kid = kid->GetNextSibling();
  9548:   }
  9548: }
  9548: 
     1: // ************************************************************
     1: 
 19125: class SVGPaintCallback : public nsSVGFilterPaintCallback
 19125: {
 19125: public:
 91412:   virtual void Paint(nsRenderingContext *aContext, nsIFrame *aTarget,
 20534:                      const nsIntRect* aDirtyRect)
 19125:   {
 23554:     nsISVGChildFrame *svgChildFrame = do_QueryFrame(aTarget);
 19125:     NS_ASSERTION(svgChildFrame, "Expected SVG frame here");
 19125: 
 20534:     nsIntRect* dirtyRect = nsnull;
 20534:     nsIntRect tmpDirtyRect;
 20534: 
 20534:     // aDirtyRect is in user-space pixels, we need to convert to
 20534:     // outer-SVG-frame-relative device pixels.
 20534:     if (aDirtyRect) {
 27899:       gfxMatrix userToDeviceSpace = nsSVGUtils::GetCanvasTM(aTarget);
 27899:       if (userToDeviceSpace.IsSingular()) {
 27899:         return;
 27899:       }
 24804:       gfxRect dirtyBounds = userToDeviceSpace.TransformBounds(
 20534:         gfxRect(aDirtyRect->x, aDirtyRect->y, aDirtyRect->width, aDirtyRect->height));
 20534:       dirtyBounds.RoundOut();
 58579:       if (gfxUtils::GfxRectToIntRect(dirtyBounds, &tmpDirtyRect)) {
 20534:         dirtyRect = &tmpDirtyRect;
 20534:       }
 19125:     }
 19125: 
 20534:     svgChildFrame->PaintSVG(aContext, dirtyRect);
 19125:   }
 19125: };
 19125: 
     1: void
 91412: nsSVGUtils::PaintFrameWithEffects(nsRenderingContext *aContext,
 20652:                                   const nsIntRect *aDirtyRect,
     1:                                   nsIFrame *aFrame)
     1: {
 23554:   nsISVGChildFrame *svgChildFrame = do_QueryFrame(aFrame);
     1:   if (!svgChildFrame)
     1:     return;
     1: 
     1:   float opacity = aFrame->GetStyleDisplay()->mOpacity;
     1:   if (opacity == 0.0f)
     1:     return;
     1: 
 91474:   const nsIContent* content = aFrame->GetContent();
 91474:   if (content->IsSVG() &&
 91474:       !static_cast<const nsSVGElement*>(content)->HasValidDimensions()) {
 91474:     return;
 91474:   }
 91474: 
 98861:   /* Properties are added lazily and may have been removed by a restyle,
 98861:      so make sure all applicable ones are set again. */
 98861: 
 98861:   nsSVGEffects::EffectProperties effectProperties =
 98861:     nsSVGEffects::GetEffectProperties(aFrame);
 98861: 
 98861:   bool isOK = true;
 98861:   nsSVGFilterFrame *filterFrame = effectProperties.GetFilterFrame(&isOK);
 98861: 
 98711:   if (aDirtyRect &&
 98711:       !(aFrame->GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)) {
 98711:     // Here we convert aFrame's paint bounds to outer-<svg> device space,
 98711:     // compare it to aDirtyRect, and return early if they don't intersect.
 98711:     // We don't do this optimization for nondisplay SVG since nondisplay
 98711:     // SVG doesn't maintain bounds/overflow rects.
 98711:     nsRect overflowRect = aFrame->GetVisualOverflowRectRelativeToSelf();
 98711:     if (aFrame->IsFrameOfType(nsIFrame::eSVGGeometry)) {
 98711:       // Unlike containers, leaf frames do not include GetPosition() in
 98711:       // GetCanvasTM().
 98711:       overflowRect = overflowRect + aFrame->GetPosition();
 98711:     }
 98711:     PRUint32 appUnitsPerDevPx = aFrame->PresContext()->AppUnitsPerDevPixel();
 98711:     gfxMatrix tm = GetCanvasTM(aFrame);
 98711:     if (aFrame->IsFrameOfType(nsIFrame::eSVG | nsIFrame::eSVGContainer)) {
 98711:       gfxMatrix childrenOnlyTM;
 98711:       if (static_cast<nsSVGContainerFrame*>(aFrame)->
 98711:             HasChildrenOnlyTransform(&childrenOnlyTM)) {
 98711:         // Undo the children-only transform:
 98711:         tm = childrenOnlyTM.Invert() * tm;
 98711:       }
 98711:     }
 98711:     nsIntRect bounds = nsSVGUtils::TransformFrameRectToOuterSVG(overflowRect,
 98711:                          tm, aFrame->PresContext()).
 98711:                            ToOutsidePixels(appUnitsPerDevPx);
 98711:     if (!aDirtyRect->Intersects(bounds)) {
     1:       return;
     1:     }
     1:   }
     1: 
     1:   /* SVG defines the following rendering model:
     1:    *
 34189:    *  1. Render fill
 34189:    *  2. Render stroke
 34189:    *  3. Render markers
 34189:    *  4. Apply filter
 34189:    *  5. Apply clipping, masking, group opacity
     1:    *
   831:    * We follow this, but perform a couple of optimizations:
     1:    *
     1:    * + Use cairo's clipPath when representable natively (single object
     1:    *   clip region).
     1:    *
     1:    * + Merge opacity and masking if both used together.
     1:    */
     1: 
   831:   if (opacity != 1.0f && CanOptimizeOpacity(aFrame))
   831:     opacity = 1.0f;
     1: 
 91412:   gfxContext *gfx = aContext->ThebesContext();
 79445:   bool complexEffects = false;
     1: 
 19948:   nsSVGClipPathFrame *clipPathFrame = effectProperties.GetClipPathFrame(&isOK);
 19948:   nsSVGMaskFrame *maskFrame = effectProperties.GetMaskFrame(&isOK);
 16406: 
 98861:   bool isTrivialClip = clipPathFrame ? clipPathFrame->IsTrivial() : true;
 98861: 
 16406:   if (!isOK) {
 59507:     // Some resource is invalid. We shouldn't paint anything.
 16406:     return;
 16406:   }
   831:   
 30596:   gfxMatrix matrix;
 30596:   if (clipPathFrame || maskFrame)
 30596:     matrix = GetCanvasTM(aFrame);
   831: 
     1:   /* Check if we need to do additional operations on this child's
     1:    * rendering, which necessitates rendering into another surface. */
   831:   if (opacity != 1.0f || maskFrame || (clipPathFrame && !isTrivialClip)) {
 80486:     complexEffects = true;
  1707:     gfx->Save();
102402:     if (!(aFrame->GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)) {
102402:       // aFrame has a valid visual overflow rect, so clip to it before calling
102402:       // PushGroup() to minimize the size of the surfaces we'll composite:
102402:       gfxContextMatrixAutoSaveRestore matrixAutoSaveRestore(gfx);
102402:       gfx->Multiply(GetCanvasTM(aFrame));
102402:       nsRect overflowRect = aFrame->GetVisualOverflowRectRelativeToSelf();
102402:       if (aFrame->IsFrameOfType(nsIFrame::eSVGGeometry)) {
102402:         // Unlike containers, leaf frames do not include GetPosition() in
102402:         // GetCanvasTM().
102402:         overflowRect = overflowRect + aFrame->GetPosition();
102402:       }
102402:       aContext->IntersectClip(overflowRect);
102402:     }
  1707:     gfx->PushGroup(gfxASurface::CONTENT_COLOR_ALPHA);
     1:   }
     1: 
     1:   /* If this frame has only a trivial clipPath, set up cairo's clipping now so
     1:    * we can just do normal painting and get it clipped appropriately.
     1:    */
   831:   if (clipPathFrame && isTrivialClip) {
     1:     gfx->Save();
 19125:     clipPathFrame->ClipPaint(aContext, aFrame, matrix);
     1:   }
     1: 
     1:   /* Paint the child */
   831:   if (filterFrame) {
 19125:     SVGPaintCallback paintCallback;
102183:     filterFrame->PaintFilteredFrame(aContext, aFrame, &paintCallback,
102183:                                     aDirtyRect);
     1:   } else {
     1:     svgChildFrame->PaintSVG(aContext, aDirtyRect);
     1:   }
     1: 
   831:   if (clipPathFrame && isTrivialClip) {
     1:     gfx->Restore();
     1:   }
     1: 
     1:   /* No more effects, we're done. */
  1707:   if (!complexEffects)
     1:     return;
     1: 
  1707:   gfx->PopGroupToSource();
     1: 
  1707:   nsRefPtr<gfxPattern> maskSurface =
 19125:     maskFrame ? maskFrame->ComputeMaskAlpha(aContext, aFrame,
   831:                                             matrix, opacity) : nsnull;
     1: 
  1707:   nsRefPtr<gfxPattern> clipMaskSurface;
   831:   if (clipPathFrame && !isTrivialClip) {
  1707:     gfx->PushGroup(gfxASurface::CONTENT_COLOR_ALPHA);
   831: 
 19125:     nsresult rv = clipPathFrame->ClipPaint(aContext, aFrame, matrix);
  1707:     clipMaskSurface = gfx->PopGroup();
   831: 
   831:     if (NS_SUCCEEDED(rv) && clipMaskSurface) {
     1:       // Still more set after clipping, so clip to another surface
   831:       if (maskSurface || opacity != 1.0f) {
  1707:         gfx->PushGroup(gfxASurface::CONTENT_COLOR_ALPHA);
  1707:         gfx->Mask(clipMaskSurface);
  1707:         gfx->PopGroupToSource();
     1:       } else {
  1707:         gfx->Mask(clipMaskSurface);
     1:       }
     1:     }
   831:   }
     1: 
     1:   if (maskSurface) {
  1707:     gfx->Mask(maskSurface);
   831:   } else if (opacity != 1.0f) {
  1707:     gfx->Paint(opacity);
     1:   }
     1: 
  1707:   gfx->Restore();
     1: }
     1: 
 79445: bool
 18367: nsSVGUtils::HitTestClip(nsIFrame *aFrame, const nsPoint &aPoint)
     1: {
 16501:   nsSVGEffects::EffectProperties props =
 16501:     nsSVGEffects::GetEffectProperties(aFrame);
 16406:   if (!props.mClipPath)
 80486:     return true;
   831: 
 79445:   bool isOK = true;
 38838:   nsSVGClipPathFrame *clipPathFrame = props.GetClipPathFrame(&isOK);
 38838:   if (!clipPathFrame || !isOK) {
 16406:     // clipPath is not a valid resource, so nothing gets painted, so
 16406:     // hit-testing must fail.
 80486:     return false;
 16406:   }
 16406: 
 30596:   return clipPathFrame->ClipHitTest(aFrame, GetCanvasTM(aFrame), aPoint);
     1: }
     1: 
 18367: nsIFrame *
 18367: nsSVGUtils::HitTestChildren(nsIFrame *aFrame, const nsPoint &aPoint)
     1: {
 33390:   // Traverse the list in reverse order, so that if we get a hit we know that's
 33390:   // the topmost frame that intersects the point; then we can just return it.
 18367:   nsIFrame* result = nsnull;
 77154:   for (nsIFrame* current = aFrame->PrincipalChildList().LastChild();
 33390:        current;
 33390:        current = current->GetPrevSibling()) {
 23554:     nsISVGChildFrame* SVGFrame = do_QueryFrame(current);
     1:     if (SVGFrame) {
 91706:       const nsIContent* content = current->GetContent();
 91706:       if (content->IsSVG() &&
 91706:           !static_cast<const nsSVGElement*>(content)->HasValidDimensions()) {
 91706:         continue;
 91706:       }
 18367:       result = SVGFrame->GetFrameForPoint(aPoint);
 18367:       if (result)
     1:         break;
     1:     }
     1:   }
     1: 
 18367:   if (result && !HitTestClip(aFrame, aPoint))
 18367:     result = nsnull;
 18367: 
 18367:   return result;
     1: }
     1: 
     1: nsRect
     1: nsSVGUtils::GetCoveredRegion(const nsFrameList &aFrames)
     1: {
     1:   nsRect rect;
     1: 
     1:   for (nsIFrame* kid = aFrames.FirstChild();
     1:        kid;
     1:        kid = kid->GetNextSibling()) {
 23554:     nsISVGChildFrame* child = do_QueryFrame(kid);
     1:     if (child) {
     1:       nsRect childRect = child->GetCoveredRegion();
     1:       rect.UnionRect(rect, childRect);
     1:     }
     1:   }
     1: 
     1:   return rect;
     1: }
     1: 
 89879: nsPoint
 89879: nsSVGUtils::TransformOuterSVGPointToChildFrame(nsPoint aPoint,
 89879:                                                const gfxMatrix& aFrameToCanvasTM,
 89879:                                                nsPresContext* aPresContext)
 89879: {
 90353:   NS_ABORT_IF_FALSE(!aFrameToCanvasTM.IsSingular(),
 90353:                     "Callers must not pass a singular matrix");
 90353:   gfxMatrix canvasDevToFrameUserSpace = aFrameToCanvasTM;
 90353:   canvasDevToFrameUserSpace.Invert();
 89879:   gfxPoint devPt = gfxPoint(aPoint.x, aPoint.y) /
 89879:     aPresContext->AppUnitsPerDevPixel();
101940:   gfxPoint userPt = canvasDevToFrameUserSpace.Transform(devPt);
101940:   gfxPoint appPt = (userPt * aPresContext->AppUnitsPerCSSPixel()).Round();
 89879:   userPt.x = clamped(appPt.x, gfxFloat(nscoord_MIN), gfxFloat(nscoord_MAX));
 89879:   userPt.y = clamped(appPt.y, gfxFloat(nscoord_MIN), gfxFloat(nscoord_MAX));
 89879:   // now guaranteed to be safe:
 89879:   return nsPoint(nscoord(userPt.x), nscoord(userPt.y));
 89879: }
 89879: 
 89879: nsRect
 89879: nsSVGUtils::TransformFrameRectToOuterSVG(const nsRect& aRect,
 89879:                                          const gfxMatrix& aMatrix,
 89879:                                          nsPresContext* aPresContext)
 89879: {
 89879:   gfxRect r(aRect.x, aRect.y, aRect.width, aRect.height);
 89879:   r.Scale(1.0 / nsPresContext::AppUnitsPerCSSPixel());
 89879:   return nsLayoutUtils::RoundGfxRectToAppRect(
 89879:     aMatrix.TransformBounds(r), aPresContext->AppUnitsPerDevPixel());
 89879: }
 89879: 
 68852: gfxIntSize
 68852: nsSVGUtils::ConvertToSurfaceSize(const gfxSize& aSize,
 79445:                                  bool *aResultOverflows)
 68852: {
 80882:   gfxIntSize surfaceSize(ClampToInt(ceil(aSize.width)), ClampToInt(ceil(aSize.height)));
 68852: 
 80882:   *aResultOverflows = surfaceSize.width != ceil(aSize.width) ||
 80882:     surfaceSize.height != ceil(aSize.height);
 68852: 
 68852:   if (!gfxASurface::CheckSurfaceSize(surfaceSize)) {
 68852:     surfaceSize.width = NS_MIN(NS_SVG_OFFSCREEN_MAX_DIMENSION,
 68852:                                surfaceSize.width);
 68852:     surfaceSize.height = NS_MIN(NS_SVG_OFFSCREEN_MAX_DIMENSION,
 68852:                                 surfaceSize.height);
 80486:     *aResultOverflows = true;
 68852:   }
 68852: 
 68852:   return surfaceSize;
 68852: }
 68852: 
 79445: bool
 30596: nsSVGUtils::HitTestRect(const gfxMatrix &aMatrix,
     1:                         float aRX, float aRY, float aRWidth, float aRHeight,
     1:                         float aX, float aY)
     1: {
102057:   gfxRect rect(aRX, aRY, aRWidth, aRHeight);
102057:   if (rect.IsEmpty() || aMatrix.IsSingular()) {
 80486:     return false;
 30596:   }
102057:   gfxMatrix toRectSpace = aMatrix;
102057:   toRectSpace.Invert();
102057:   gfxPoint p = toRectSpace.Transform(gfxPoint(aX, aY));
102057:   return rect.x <= p.x && p.x <= rect.XMost() &&
102057:          rect.y <= p.y && p.y <= rect.YMost();
     1: }
     1: 
 29308: gfxRect
 29308: nsSVGUtils::GetClipRectForFrame(nsIFrame *aFrame,
 29308:                                 float aX, float aY, float aWidth, float aHeight)
 29308: {
 29308:   const nsStyleDisplay* disp = aFrame->GetStyleDisplay();
 29308: 
 29308:   if (!(disp->mClipFlags & NS_STYLE_CLIP_RECT)) {
 29308:     NS_ASSERTION(disp->mClipFlags == NS_STYLE_CLIP_AUTO,
 29308:                  "We don't know about this type of clip.");
 29308:     return gfxRect(aX, aY, aWidth, aHeight);
 29308:   }
 29308: 
 29308:   if (disp->mOverflowX == NS_STYLE_OVERFLOW_HIDDEN ||
 29308:       disp->mOverflowY == NS_STYLE_OVERFLOW_HIDDEN) {
 29308: 
 29308:     nsIntRect clipPxRect =
 29308:       disp->mClip.ToOutsidePixels(aFrame->PresContext()->AppUnitsPerDevPixel());
 29308:     gfxRect clipRect =
 29308:       gfxRect(clipPxRect.x, clipPxRect.y, clipPxRect.width, clipPxRect.height);
 29308: 
 29308:     if (NS_STYLE_CLIP_RIGHT_AUTO & disp->mClipFlags) {
 68634:       clipRect.width = aWidth - clipRect.X();
 29308:     }
 29308:     if (NS_STYLE_CLIP_BOTTOM_AUTO & disp->mClipFlags) {
 68634:       clipRect.height = aHeight - clipRect.Y();
 29308:     }
 29308: 
 29308:     if (disp->mOverflowX != NS_STYLE_OVERFLOW_HIDDEN) {
 68634:       clipRect.x = aX;
 68634:       clipRect.width = aWidth;
 29308:     }
 29308:     if (disp->mOverflowY != NS_STYLE_OVERFLOW_HIDDEN) {
 68634:       clipRect.y = aY;
 68634:       clipRect.height = aHeight;
 29308:     }
 29308:      
 29308:     return clipRect;
 29308:   }
 29308:   return gfxRect(aX, aY, aWidth, aHeight);
 29308: }
 29308: 
     1: void
     1: nsSVGUtils::CompositeSurfaceMatrix(gfxContext *aContext,
     1:                                    gfxASurface *aSurface,
 30596:                                    const gfxMatrix &aCTM, float aOpacity)
     1: {
 30596:   if (aCTM.IsSingular())
     1:     return;
     1:   
 86668:   if (aContext->IsCairo()) {
     1:     aContext->Save();
 30596:     aContext->Multiply(aCTM);
     1:     aContext->SetSource(aSurface);
     1:     aContext->Paint(aOpacity);
     1:     aContext->Restore();
 86668:   } else {
 86668:     DrawTarget *dt = aContext->GetDrawTarget();
 86668:     Matrix oldMat = dt->GetTransform();
 86668:     RefPtr<SourceSurface> surf =
 86668:       gfxPlatform::GetPlatform()->GetSourceSurfaceForSurface(dt, aSurface);
 86668:     dt->SetTransform(oldMat * ToMatrix(aCTM));
 86668: 
 86668:     gfxSize size = aSurface->GetSize();
 86668:     NS_ASSERTION(size.width >= 0 && size.height >= 0, "Failure to get size for aSurface.");
 86668: 
 86668:     gfxPoint pt = aSurface->GetDeviceOffset();
 86668: 
 86668:     dt->FillRect(Rect(-pt.x, -pt.y, size.width, size.height),
 86668:                  SurfacePattern(surf, EXTEND_CLAMP,
 86668:                                 Matrix(1.0f, 0, 0, 1.0f, -pt.x, -pt.y)),
 86668:                  DrawOptions(aOpacity));
 86668: 
 86668:     dt->SetTransform(oldMat);
 86668:   }
     1: }
     1: 
     1: void
 12652: nsSVGUtils::CompositePatternMatrix(gfxContext *aContext,
 12652:                                    gfxPattern *aPattern,
 30596:                                    const gfxMatrix &aCTM, float aWidth, float aHeight, float aOpacity)
 12652: {
 30596:   if (aCTM.IsSingular())
 12652:     return;
 12652: 
 12652:   aContext->Save();
 30596:   SetClipRect(aContext, aCTM, gfxRect(0, 0, aWidth, aHeight));
 30596:   aContext->Multiply(aCTM);
 12652:   aContext->SetPattern(aPattern);
 12652:   aContext->Paint(aOpacity);
 12652:   aContext->Restore();
 12652: }
 12652: 
 12652: void
     1: nsSVGUtils::SetClipRect(gfxContext *aContext,
 29327:                         const gfxMatrix &aCTM,
 29308:                         const gfxRect &aRect)
     1: {
 29327:   if (aCTM.IsSingular())
     1:     return;
     1: 
102057:   gfxContextMatrixAutoSaveRestore matrixAutoSaveRestore(aContext);
 29327:   aContext->Multiply(aCTM);
 29308:   aContext->Clip(aRect);
     1: }
     1: 
 15915: void
 15915: nsSVGUtils::ClipToGfxRect(nsIntRect* aRect, const gfxRect& aGfxRect)
 15915: {
 15915:   gfxRect r = aGfxRect;
 15915:   r.RoundOut();
 15915:   gfxRect r2(aRect->x, aRect->y, aRect->width, aRect->height);
 15915:   r = r.Intersect(r2);
 15915:   *aRect = nsIntRect(PRInt32(r.X()), PRInt32(r.Y()),
 15915:                      PRInt32(r.Width()), PRInt32(r.Height()));
 15915: }
 15915: 
 29067: gfxRect
 79556: nsSVGUtils::GetBBox(nsIFrame *aFrame, PRUint32 aFlags)
 19125: {
 49139:   if (aFrame->GetContent()->IsNodeOfType(nsINode::eTEXT)) {
 49139:     aFrame = aFrame->GetParent();
 49139:   }
 29067:   gfxRect bbox;
 23554:   nsISVGChildFrame *svg = do_QueryFrame(aFrame);
 29067:   if (svg) {
 49139:     // It is possible to apply a gradient, pattern, clipping path, mask or
 49139:     // filter to text. When one of these facilities is applied to text
 70840:     // the bounding box is the entire text element in all
 49139:     // cases.
 55292:     nsSVGTextContainerFrame* metrics = do_QueryFrame(
 55292:       GetFirstNonAAncestorFrame(aFrame));
 49139:     if (metrics) {
 49139:       while (aFrame->GetType() != nsGkAtoms::svgTextFrame) {
 49139:         aFrame = aFrame->GetParent();
 49139:       }
 49139:       svg = do_QueryFrame(aFrame);
 49139:     }
 91474:     nsIContent* content = aFrame->GetContent();
 91474:     if (content->IsSVG() &&
 91474:         !static_cast<const nsSVGElement*>(content)->HasValidDimensions()) {
 91474:       return bbox;
 91474:     }
 90362:     gfxMatrix matrix;
 90362:     if (aFrame->GetType() == nsGkAtoms::svgForeignObjectFrame) {
 90362:       // The spec says getBBox "Returns the tight bounding box in *current user
 90362:       // space*". So we should really be doing this for all elements, but that
 90362:       // needs investigation to check that we won't break too much content.
 91474:       NS_ABORT_IF_FALSE(content->IsSVG(), "bad cast");
 91474:       nsSVGElement *element = static_cast<nsSVGElement*>(content);
 90362:       matrix = element->PrependLocalTransformsTo(matrix,
 90362:                           nsSVGElement::eChildToUserSpace);
 90362:     }
 95489:     return svg->GetBBoxContribution(matrix, aFlags);
 19125:   }
 95489:   return nsSVGIntegrationUtils::GetSVGBBoxForNonSVGFrame(aFrame);
 19125: }
 19125: 
 19125: gfxRect
 19125: nsSVGUtils::GetRelativeRect(PRUint16 aUnits, const nsSVGLength2 *aXYWH,
 29067:                             const gfxRect &aBBox, nsIFrame *aFrame)
 19125: {
 19125:   float x, y, width, height;
 19125:   if (aUnits == nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {
 29067:     x = aBBox.X() + ObjectSpace(aBBox, &aXYWH[0]);
 29067:     y = aBBox.Y() + ObjectSpace(aBBox, &aXYWH[1]);
 19125:     width = ObjectSpace(aBBox, &aXYWH[2]);
 19125:     height = ObjectSpace(aBBox, &aXYWH[3]);
 19125:   } else {
 78463:     x = UserSpace(aFrame, &aXYWH[0]);
 78463:     y = UserSpace(aFrame, &aXYWH[1]);
 78463:     width = UserSpace(aFrame, &aXYWH[2]);
 78463:     height = UserSpace(aFrame, &aXYWH[3]);
 19125:   }
 19125:   return gfxRect(x, y, width, height);
 19125: }
 19125: 
 79445: bool
     1: nsSVGUtils::CanOptimizeOpacity(nsIFrame *aFrame)
     1: {
     1:   nsIAtom *type = aFrame->GetType();
 34189:   if (type != nsGkAtoms::svgImageFrame &&
 34189:       type != nsGkAtoms::svgPathGeometryFrame) {
 80486:     return false;
 34189:   }
 34189:   if (aFrame->GetStyleSVGReset()->mFilter) {
 80486:     return false;
 34189:   }
 34189:   // XXX The SVG WG is intending to allow fill, stroke and markers on <image>
 34189:   if (type == nsGkAtoms::svgImageFrame) {
 80486:     return true;
     1:   }
 34189:   const nsStyleSVG *style = aFrame->GetStyleSVG();
 34189:   if (style->mMarkerStart || style->mMarkerMid || style->mMarkerEnd) {
 80486:     return false;
 34189:   }
 34189:   if (style->mFill.mType == eStyleSVGPaintType_None ||
 34189:       style->mFillOpacity <= 0 ||
 34189:       !static_cast<nsSVGPathGeometryFrame*>(aFrame)->HasStroke()) {
 80486:     return true;
     1:   }
 80486:   return false;
     1: }
     1: 
  6539: float
 30596: nsSVGUtils::MaxExpansion(const gfxMatrix &aMatrix)
  6539: {
  6539:   // maximum expansion derivation from
  6539:   // http://lists.cairographics.org/archives/cairo/2004-October/001980.html
 30596:   // and also implemented in cairo_matrix_transformed_circle_major_axis
 30596:   double a = aMatrix.xx;
 30596:   double b = aMatrix.yx;
 30596:   double c = aMatrix.xy;
 30596:   double d = aMatrix.yy;
 30596:   double f = (a * a + b * b + c * c + d * d) / 2;
 30596:   double g = (a * a + b * b - c * c - d * d) / 2;
 30596:   double h = a * c + b * d;
  6539:   return sqrt(f + sqrt(g * g + h * h));
  6539: }
  6539: 
 30596: gfxMatrix
 30596: nsSVGUtils::AdjustMatrixForUnits(const gfxMatrix &aMatrix,
  8640:                                  nsSVGEnum *aUnits,
 19125:                                  nsIFrame *aFrame)
  8640: {
  8640:   if (aFrame &&
 38700:       aUnits->GetAnimValue() ==
 37441:       nsIDOMSVGUnitTypes::SVG_UNIT_TYPE_OBJECTBOUNDINGBOX) {
 29067:     gfxRect bbox = GetBBox(aFrame);
 30596:     return gfxMatrix().Scale(bbox.Width(), bbox.Height()) *
 30596:            gfxMatrix().Translate(gfxPoint(bbox.X(), bbox.Y())) *
 30596:            aMatrix;
  8640:   }
 30596:   return aMatrix;
  8640: }
  8640: 
 23953: nsIFrame*
 23953: nsSVGUtils::GetFirstNonAAncestorFrame(nsIFrame* aStartFrame)
 23953: {
 23953:   for (nsIFrame *ancestorFrame = aStartFrame; ancestorFrame;
 23953:        ancestorFrame = ancestorFrame->GetParent()) {
 23953:     if (ancestorFrame->GetType() != nsGkAtoms::svgAFrame) {
 23953:       return ancestorFrame;
 23953:     }
 23953:   }
 23953:   return nsnull;
 23953: }
 23953: 
  5947: #ifdef DEBUG
  5947: void
  5947: nsSVGUtils::WritePPM(const char *fname, gfxImageSurface *aSurface)
  5947: {
  5947:   FILE *f = fopen(fname, "wb");
  5947:   if (!f)
  5947:     return;
  5947: 
  5947:   gfxIntSize size = aSurface->GetSize();
  5947:   fprintf(f, "P6\n%d %d\n255\n", size.width, size.height);
  5947:   unsigned char *data = aSurface->Data();
  5947:   PRInt32 stride = aSurface->Stride();
  5947:   for (int y=0; y<size.height; y++) {
  5947:     for (int x=0; x<size.width; x++) {
 99883:       unused << fwrite(data + y * stride + 4 * x + GFX_ARGB32_OFFSET_R, 1, 1, f);
 99883:       unused << fwrite(data + y * stride + 4 * x + GFX_ARGB32_OFFSET_G, 1, 1, f);
 99883:       unused << fwrite(data + y * stride + 4 * x + GFX_ARGB32_OFFSET_B, 1, 1, f);
  5947:     }
  5947:   }
  5947:   fclose(f);
  5947: }
  5947: #endif
  5947: 
 98857: gfxMatrix
 98857: nsSVGUtils::GetStrokeTransform(nsIFrame *aFrame)
 98857: {
 98857:   if (aFrame->GetStyleSVGReset()->mVectorEffect ==
 98857:       NS_STYLE_VECTOR_EFFECT_NON_SCALING_STROKE) {
 98857:  
 98857:     if (aFrame->GetContent()->IsNodeOfType(nsINode::eTEXT)) {
 98857:       aFrame = aFrame->GetParent();
 98857:     }
 98857: 
 98857:     nsIContent *content = aFrame->GetContent();
 98857:     NS_ABORT_IF_FALSE(content->IsSVG(), "bad cast");
 98857: 
 98857:     // a non-scaling stroke is in the screen co-ordinate
 98857:     // space rather so we need to invert the transform
 98857:     // to the screen co-ordinate space to get there.
 98857:     // See http://www.w3.org/TR/SVGTiny12/painting.html#NonScalingStroke
 98857:     gfxMatrix transform = nsSVGUtils::GetCTM(
 98857:                             static_cast<nsSVGElement*>(content), true);
 98857:     if (!transform.IsSingular()) {
 98857:       return transform.Invert();
 98857:     }
 98857:   }
 98857:   return gfxMatrix();
 98857: }
 98857: 
 77871: // The logic here comes from _cairo_stroke_style_max_distance_from_path
 77871: static gfxRect
 77871: PathExtentsToMaxStrokeExtents(const gfxRect& aPathExtents,
 77871:                               nsSVGGeometryFrame* aFrame,
 89878:                               double styleExpansionFactor,
 89878:                               const gfxMatrix& aMatrix)
 26759: {
 77871:   double style_expansion =
 77871:     styleExpansionFactor * aFrame->GetStrokeWidth();
 26759: 
 98857:   gfxMatrix matrix = aMatrix;
 98857:   matrix.Multiply(nsSVGUtils::GetStrokeTransform(aFrame));
 98857: 
 98857:   double dx = style_expansion * (fabs(matrix.xx) + fabs(matrix.xy));
 98857:   double dy = style_expansion * (fabs(matrix.yy) + fabs(matrix.yx));
 26759: 
 26759:   gfxRect strokeExtents = aPathExtents;
 68641:   strokeExtents.Inflate(dx, dy);
 26759:   return strokeExtents;
 26759: }
 26759: 
 77871: /*static*/ gfxRect
 77871: nsSVGUtils::PathExtentsToMaxStrokeExtents(const gfxRect& aPathExtents,
 89878:                                           nsSVGGeometryFrame* aFrame,
 89878:                                           const gfxMatrix& aMatrix)
 77871: {
 89878:   return ::PathExtentsToMaxStrokeExtents(aPathExtents, aFrame, 0.5, aMatrix);
 77871: }
 77871: 
 77871: /*static*/ gfxRect
 77871: nsSVGUtils::PathExtentsToMaxStrokeExtents(const gfxRect& aPathExtents,
 89878:                                           nsSVGPathGeometryFrame* aFrame,
 89878:                                           const gfxMatrix& aMatrix)
 77871: {
 77871:   double styleExpansionFactor = 0.5;
 77871: 
 77871:   if (static_cast<nsSVGPathGeometryElement*>(aFrame->GetContent())->IsMarkable()) {
 77871:     const nsStyleSVG* style = aFrame->GetStyleSVG();
 77871: 
 77871:     if (style->mStrokeLinecap == NS_STYLE_STROKE_LINECAP_SQUARE) {
 77871:       styleExpansionFactor = M_SQRT1_2;
 77871:     }
 77871: 
 77871:     if (style->mStrokeLinejoin == NS_STYLE_STROKE_LINEJOIN_MITER &&
 77871:         styleExpansionFactor < style->mStrokeMiterlimit &&
 77871:         aFrame->GetContent()->Tag() != nsGkAtoms::line) {
 77871:       styleExpansionFactor = style->mStrokeMiterlimit;
 77871:     }
 77871:   }
 77871: 
 77871:   return ::PathExtentsToMaxStrokeExtents(aPathExtents,
 77871:                                          aFrame,
 89878:                                          styleExpansionFactor,
 89878:                                          aMatrix);
 77871: }
 77871: 
     1: // ----------------------------------------------------------------------
     1: 
 89450: /* static */ void
 89450: nsSVGUtils::GetFallbackOrPaintColor(gfxContext *aContext, nsStyleContext *aStyleContext,
 89450:                                     nsStyleSVGPaint nsStyleSVG::*aFillOrStroke,
 89450:                                     float *aOpacity, nscolor *color)
 89450: {
 89450:   const nsStyleSVGPaint &paint = aStyleContext->GetStyleSVG()->*aFillOrStroke;
 89450:   nsStyleContext *styleIfVisited = aStyleContext->GetStyleIfVisited();
 89450:   bool isServer = paint.mType == eStyleSVGPaintType_Server;
 89450:   *color = isServer ? paint.mFallbackColor : paint.mPaint.mColor;
 89450:   if (styleIfVisited) {
 89450:     const nsStyleSVGPaint &paintIfVisited =
 89450:       styleIfVisited->GetStyleSVG()->*aFillOrStroke;
 89450:     // To prevent Web content from detecting if a user has visited a URL
 89450:     // (via URL loading triggered by paint servers or performance
 89450:     // differences between paint servers or between a paint server and a
 89450:     // color), we do not allow whether links are visited to change which
 89450:     // paint server is used or switch between paint servers and simple
 89450:     // colors.  A :visited style may only override a simple color with
 89450:     // another simple color.
 89450:     if (paintIfVisited.mType == eStyleSVGPaintType_Color &&
 89450:         paint.mType == eStyleSVGPaintType_Color) {
 89450:       nscolor colorIfVisited = paintIfVisited.mPaint.mColor;
 89450:       nscolor colors[2] = { *color, colorIfVisited };
 89450:       *color = nsStyleContext::CombineVisitedColors(colors,
 89450:                                          aStyleContext->RelevantLinkVisited());
 89450:     }
 89450:   }
 89450: }
