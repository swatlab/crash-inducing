29366: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * JS atom table.
    1:  */
    1: #include <stdlib.h>
    1: #include <string.h>
    1: #include "jstypes.h"
26316: #include "jsstdint.h"
55477: #include "jsutil.h"
55477: #include "jshash.h"
    1: #include "jsprf.h"
    1: #include "jsapi.h"
    1: #include "jsatom.h"
27012: #include "jsbit.h"
    1: #include "jscntxt.h"
    1: #include "jsgc.h"
    1: #include "jslock.h"
    1: #include "jsnum.h"
27012: #include "jsparse.h"
    1: #include "jsstr.h"
27012: #include "jsversion.h"
48470: #include "jsxml.h"
48470: 
32607: #include "jsstrinlines.h"
48470: #include "jsatominlines.h"
48470: #include "jsobjinlines.h"
48470: 
48470: using namespace js;
54707: using namespace js::gc;
40860: 
25901: /*
25901:  * ATOM_HASH assumes that JSHashNumber is 32-bit even on 64-bit systems.
25901:  */
25901: JS_STATIC_ASSERT(sizeof(JSHashNumber) == 4);
25901: JS_STATIC_ASSERT(sizeof(JSAtom *) == JS_BYTES_PER_WORD);
25901: 
25901: /*
25901:  * Start and limit offsets for atom pointers in JSAtomState must be aligned
25901:  * on the word boundary.
25901:  */
25901: JS_STATIC_ASSERT(ATOM_OFFSET_START % sizeof(JSAtom *) == 0);
25901: JS_STATIC_ASSERT(ATOM_OFFSET_LIMIT % sizeof(JSAtom *) == 0);
25901: 
25901: /*
25901:  * JS_BOOLEAN_STR and JS_TYPE_STR assume that boolean names starts from the
25901:  * index 1 and type name starts from the index 1+2 atoms in JSAtomState.
25901:  */
25901: JS_STATIC_ASSERT(1 * sizeof(JSAtom *) ==
25901:                  offsetof(JSAtomState, booleanAtoms) - ATOM_OFFSET_START);
25901: JS_STATIC_ASSERT((1 + 2) * sizeof(JSAtom *) ==
25901:                  offsetof(JSAtomState, typeAtoms) - ATOM_OFFSET_START);
25901: 
10444: const char *
57812: js_AtomToPrintableString(JSContext *cx, JSAtom *atom, JSAutoByteString *bytes)
    1: {
64345:     return js_ValueToPrintable(cx, StringValue(atom), bytes);
    1: }
    1: 
    1: #define JS_PROTO(name,code,init) const char js_##name##_str[] = #name;
    1: #include "jsproto.tbl"
    1: #undef JS_PROTO
    1: 
 4342: /*
21447:  * String constants for common atoms defined in JSAtomState starting from
 4342:  * JSAtomState.emptyAtom until JSAtomState.lazy.
 4342:  *
 4342:  * The elements of the array after the first empty string define strings
21447:  * corresponding to the two boolean literals, false and true, followed by the
21447:  * JSType enumerators from jspubtd.h starting with "undefined" for JSTYPE_VOID
31521:  * (which is special-value 2) and continuing as initialized below. The static
21447:  * asserts check these relations.
 4342:  */
 4342: JS_STATIC_ASSERT(JSTYPE_LIMIT == 8);
21447: JS_STATIC_ASSERT(JSTYPE_VOID == 0);
21447: 
 4342: const char *const js_common_atom_names[] = {
 4342:     "",                         /* emptyAtom                    */
21447:     js_false_str,               /* booleanAtoms[0]              */
21447:     js_true_str,                /* booleanAtoms[1]              */
 4342:     js_undefined_str,           /* typeAtoms[JSTYPE_VOID]       */
 4342:     js_object_str,              /* typeAtoms[JSTYPE_OBJECT]     */
 4342:     js_function_str,            /* typeAtoms[JSTYPE_FUNCTION]   */
 4342:     "string",                   /* typeAtoms[JSTYPE_STRING]     */
 4342:     "number",                   /* typeAtoms[JSTYPE_NUMBER]     */
 4342:     "boolean",                  /* typeAtoms[JSTYPE_BOOLEAN]    */
 4342:     js_null_str,                /* typeAtoms[JSTYPE_NULL]       */
 4342:     "xml",                      /* typeAtoms[JSTYPE_XML]        */
 4342:     js_null_str,                /* nullAtom                     */
 4342: 
    1: #define JS_PROTO(name,code,init) js_##name##_str,
    1: #include "jsproto.tbl"
    1: #undef JS_PROTO
 4342: 
 4342:     js_anonymous_str,           /* anonymousAtom                */
21452:     js_apply_str,               /* applyAtom                    */
 4342:     js_arguments_str,           /* argumentsAtom                */
 4342:     js_arity_str,               /* arityAtom                    */
21473:     js_call_str,                /* callAtom                     */
 4342:     js_callee_str,              /* calleeAtom                   */
 4342:     js_caller_str,              /* callerAtom                   */
 4342:     js_class_prototype_str,     /* classPrototypeAtom           */
 4342:     js_constructor_str,         /* constructorAtom              */
 4342:     js_each_str,                /* eachAtom                     */
 4342:     js_eval_str,                /* evalAtom                     */
 4342:     js_fileName_str,            /* fileNameAtom                 */
 4342:     js_get_str,                 /* getAtom                      */
47436:     js_global_str,              /* globalAtom                   */
47436:     js_ignoreCase_str,          /* ignoreCaseAtom               */
 4342:     js_index_str,               /* indexAtom                    */
 4342:     js_input_str,               /* inputAtom                    */
51100:     "toISOString",              /* toISOStringAtom              */
 4342:     js_iterator_str,            /* iteratorAtom                 */
48486:     js_join_str,                /* joinAtom                     */
47436:     js_lastIndex_str,           /* lastIndexAtom                */
 4342:     js_length_str,              /* lengthAtom                   */
 4342:     js_lineNumber_str,          /* lineNumberAtom               */
 4342:     js_message_str,             /* messageAtom                  */
47436:     js_multiline_str,           /* multilineAtom                */
 4342:     js_name_str,                /* nameAtom                     */
 4342:     js_next_str,                /* nextAtom                     */
 4342:     js_noSuchMethod_str,        /* noSuchMethodAtom             */
55714:     "[object Null]",            /* objectNullAtom               */
55714:     "[object Undefined]",       /* objectUndefinedAtom          */
 4342:     js_proto_str,               /* protoAtom                    */
 4342:     js_set_str,                 /* setAtom                      */
47436:     js_source_str,              /* sourceAtom                   */
 4342:     js_stack_str,               /* stackAtom                    */
47436:     js_sticky_str,              /* stickyAtom                   */
47533:     js_toGMTString_str,         /* toGMTStringAtom              */
 4342:     js_toLocaleString_str,      /* toLocaleStringAtom           */
 4342:     js_toSource_str,            /* toSourceAtom                 */
 4342:     js_toString_str,            /* toStringAtom                 */
47533:     js_toUTCString_str,         /* toUTCStringAtom              */
 4342:     js_valueOf_str,             /* valueOfAtom                  */
20092:     js_toJSON_str,              /* toJSONAtom                   */
 4342:     "(void 0)",                 /* void0Atom                    */
32721:     js_enumerable_str,          /* enumerableAtom               */
32721:     js_configurable_str,        /* configurableAtom             */
32721:     js_writable_str,            /* writableAtom                 */
32721:     js_value_str,               /* valueAtom                    */
53601:     js_test_str,                /* testAtom                     */
35113:     "use strict",               /* useStrictAtom                */
56211:     "loc",                      /* locAtom                      */
56211:     "line",                     /* lineAtom                     */
57823:     "Infinity",                 /* InfinityAtom                 */
57823:     "NaN",                      /* NaNAtom                      */
60150:     "builder",                  /* builderAtom                  */
 4342: 
 4342: #if JS_HAS_XML_SUPPORT
 4342:     js_etago_str,               /* etagoAtom                    */
 4342:     js_namespace_str,           /* namespaceAtom                */
 4342:     js_ptagc_str,               /* ptagcAtom                    */
 4342:     js_qualifier_str,           /* qualifierAtom                */
 4342:     js_space_str,               /* spaceAtom                    */
 4342:     js_stago_str,               /* stagoAtom                    */
 4342:     js_star_str,                /* starAtom                     */
 4342:     js_starQualifier_str,       /* starQualifierAtom            */
 4342:     js_tagc_str,                /* tagcAtom                     */
 4342:     js_xml_str,                 /* xmlAtom                      */
54162:     "@mozilla.org/js/function", /* functionNamespaceURIAtom     */
 4342: #endif
 4342: 
42733:     "Proxy",                    /* ProxyAtom                    */
42733: 
42733:     "getOwnPropertyDescriptor", /* getOwnPropertyDescriptorAtom */
42733:     "getPropertyDescriptor",    /* getPropertyDescriptorAtom    */
42733:     "defineProperty",           /* definePropertyAtom           */
42733:     "delete",                   /* deleteAtom                   */
42733:     "getOwnPropertyNames",      /* getOwnPropertyNames          */
42733:     "enumerate",                /* enumerateAtom                */
43190:     "fix",                      /* fixAtom                      */
42733: 
42733:     "has",                      /* hasAtom                      */
42733:     "hasOwn",                   /* hasOwnAtom                   */
60532:     "keys",                     /* keysAtom                     */
67997:     "iterate"                   /* iterateAtom                  */
    1: };
21685: 
 4342: JS_STATIC_ASSERT(JS_ARRAY_LENGTH(js_common_atom_names) * sizeof(JSAtom *) ==
 4342:                  LAZY_ATOM_OFFSET_START - ATOM_OFFSET_START);
    1: 
21685: /*
21685:  * Interpreter macros called by the trace recorder assume common atom indexes
21685:  * fit in one byte of immediate operand.
21685:  */
21685: JS_STATIC_ASSERT(JS_ARRAY_LENGTH(js_common_atom_names) < 256);
21685: 
21685: const size_t js_common_atom_count = JS_ARRAY_LENGTH(js_common_atom_names);
21685: 
    1: const char js_anonymous_str[]       = "anonymous";
21452: const char js_apply_str[]           = "apply";
    1: const char js_arguments_str[]       = "arguments";
    1: const char js_arity_str[]           = "arity";
21473: const char js_call_str[]            = "call";
    1: const char js_callee_str[]          = "callee";
    1: const char js_caller_str[]          = "caller";
    1: const char js_class_prototype_str[] = "prototype";
    1: const char js_constructor_str[]     = "constructor";
    1: const char js_each_str[]            = "each";
    1: const char js_eval_str[]            = "eval";
    1: const char js_fileName_str[]        = "fileName";
    1: const char js_get_str[]             = "get";
    1: const char js_getter_str[]          = "getter";
47436: const char js_global_str[]          = "global";
47436: const char js_ignoreCase_str[]      = "ignoreCase";
    1: const char js_index_str[]           = "index";
    1: const char js_input_str[]           = "input";
    1: const char js_iterator_str[]        = "__iterator__";
48486: const char js_join_str[]            = "join";
47436: const char js_lastIndex_str[]       = "lastIndex";
    1: const char js_length_str[]          = "length";
    1: const char js_lineNumber_str[]      = "lineNumber";
    1: const char js_message_str[]         = "message";
47436: const char js_multiline_str[]       = "multiline";
    1: const char js_name_str[]            = "name";
    1: const char js_next_str[]            = "next";
    1: const char js_noSuchMethod_str[]    = "__noSuchMethod__";
    1: const char js_object_str[]          = "object";
    1: const char js_proto_str[]           = "__proto__";
    1: const char js_setter_str[]          = "setter";
    1: const char js_set_str[]             = "set";
47436: const char js_source_str[]          = "source";
    1: const char js_stack_str[]           = "stack";
47436: const char js_sticky_str[]          = "sticky";
47533: const char js_toGMTString_str[]     = "toGMTString";
47533: const char js_toLocaleString_str[]  = "toLocaleString";
    1: const char js_toSource_str[]        = "toSource";
    1: const char js_toString_str[]        = "toString";
47533: const char js_toUTCString_str[]     = "toUTCString";
 4342: const char js_undefined_str[]       = "undefined";
    1: const char js_valueOf_str[]         = "valueOf";
20092: const char js_toJSON_str[]          = "toJSON";
32721: const char js_enumerable_str[]      = "enumerable";
32721: const char js_configurable_str[]    = "configurable";
32721: const char js_writable_str[]        = "writable";
32721: const char js_value_str[]           = "value";
53601: const char js_test_str[]            = "test";
    1: 
    1: #if JS_HAS_XML_SUPPORT
    1: const char js_etago_str[]           = "</";
    1: const char js_namespace_str[]       = "namespace";
    1: const char js_ptagc_str[]           = "/>";
    1: const char js_qualifier_str[]       = "::";
    1: const char js_space_str[]           = " ";
    1: const char js_stago_str[]           = "<";
    1: const char js_star_str[]            = "*";
    1: const char js_starQualifier_str[]   = "*::";
    1: const char js_tagc_str[]            = ">";
    1: const char js_xml_str[]             = "xml";
    1: #endif
    1: 
    1: #if JS_HAS_GENERATORS
    1: const char js_close_str[]           = "close";
    1: const char js_send_str[]            = "send";
    1: #endif
    1: 
 4529: /*
48633:  * Helper macros to access and modify JSAtomHashEntry.
48595:  */
48595: 
48633: inline AtomEntryType
48633: StringToInitialAtomEntry(JSString *str)
48633: {
48633:     return (AtomEntryType) str;
48633: }
48595: 
48633: inline uintN
48633: AtomEntryFlags(AtomEntryType entry)
48633: {
48633:     return (uintN) (entry & ATOM_ENTRY_FLAG_MASK);
48633: }
48595: 
48595: /*
48633:  * Conceptually, we have compressed a HashMap<JSAtom *, uint> into a
48633:  * HashMap<size_t>. Here, we promise that we are only changing the "value" of
48633:  * the HashMap entry, so the const_cast is safe.
 4529:  */
    1: 
48633: inline void
48633: AddAtomEntryFlags(const AtomEntryType &entry, uintN flags)
48593: {
48633:     const_cast<AtomEntryType &>(entry) |= AtomEntryType(flags);
48593: }
 4529: 
48633: inline void
48633: ClearAtomEntryFlags(const AtomEntryType &entry, uintN flags)
48593: {
48633:     const_cast<AtomEntryType &>(entry) &= ~AtomEntryType(flags);
    1: }
    1: 
 4529: /*
 4529:  * For a browser build from 2007-08-09 after the browser starts up there are
 4529:  * just 55 double atoms, but over 15000 string atoms. Not to penalize more
 4529:  * economical embeddings allocating too much memory initially we initialize
 4529:  * atomized strings with just 1K entries.
 4529:  */
 4529: #define JS_STRING_HASH_COUNT   1024
    1: 
    1: JSBool
 4342: js_InitAtomState(JSRuntime *rt)
    1: {
 4342:     JSAtomState *state = &rt->atomState;
 4342: 
48633:     JS_ASSERT(!state->atoms.initialized());
48633:     if (!state->atoms.init(JS_STRING_HASH_COUNT))
48633:         return false;
    1: 
    1: #ifdef JS_THREADSAFE
    1:     js_InitLock(&state->lock);
    1: #endif
48633:     JS_ASSERT(state->atoms.initialized());
    1:     return JS_TRUE;
    1: }
    1: 
    1: void
 4342: js_FinishAtomState(JSRuntime *rt)
    1: {
 4342:     JSAtomState *state = &rt->atomState;
 4342: 
48633:     if (!state->atoms.initialized()) {
 4342:         /*
 4529:          * We are called with uninitialized state when JS_NewRuntime fails and
 4529:          * calls JS_DestroyRuntime on a partially initialized runtime.
 4342:          */
    1:         return;
 4342:     }
 4342: 
67900:     for (AtomSet::Range r = state->atoms.all(); !r.empty(); r.popFront())
67900:         AtomEntryToKey(r.front())->finalize(rt);
 4529: 
 4342: #ifdef JS_THREADSAFE
 4342:     js_FinishLock(&state->lock);
 4342: #endif
 4342: }
 4342: 
    1: JSBool
 4342: js_InitCommonAtoms(JSContext *cx)
    1: {
 4342:     JSAtomState *state = &cx->runtime->atomState;
    1:     uintN i;
 4342:     JSAtom **atoms;
    1: 
 4529:     atoms = COMMON_ATOMS_START(state);
 4342:     for (i = 0; i < JS_ARRAY_LENGTH(js_common_atom_names); i++, atoms++) {
 4342:         *atoms = js_Atomize(cx, js_common_atom_names[i],
 4342:                             strlen(js_common_atom_names[i]), ATOM_PINNED);
 4342:         if (!*atoms)
 4342:             return JS_FALSE;
 4342:     }
 4342:     JS_ASSERT((uint8 *)atoms - (uint8 *)state == LAZY_ATOM_OFFSET_START);
 4342:     memset(atoms, 0, ATOM_OFFSET_LIMIT - LAZY_ATOM_OFFSET_START);
    1: 
64345:     cx->runtime->emptyString = state->emptyAtom;
    1:     return JS_TRUE;
    1: }
    1: 
    1: void
 4342: js_FinishCommonAtoms(JSContext *cx)
    1: {
40281:     cx->runtime->emptyString = NULL;
 4342:     JSAtomState *state = &cx->runtime->atomState;
48633: 
48633:     for (AtomSet::Range r = state->atoms.all(); !r.empty(); r.popFront())
48633:         ClearAtomEntryFlags(r.front(), ATOM_PINNED);
48633: 
 4342: #ifdef DEBUG
 4529:     memset(COMMON_ATOMS_START(state), JS_FREE_PATTERN,
 4342:            ATOM_OFFSET_LIMIT - ATOM_OFFSET_START);
 4342: #endif
    1: }
    1: 
  583: void
41294: js_TraceAtomState(JSTracer *trc)
  583: {
31932:     JSRuntime *rt = trc->context->runtime;
31932:     JSAtomState *state = &rt->atomState;
  583: 
48633: #ifdef DEBUG
48633:     size_t number = 0;
48633: #endif
48633: 
48633:     if (rt->gcKeepAtoms) {
48633:         for (AtomSet::Range r = state->atoms.all(); !r.empty(); r.popFront()) {
48633:             JS_SET_TRACING_INDEX(trc, "locked_atom", number++);
48633:             MarkString(trc, AtomEntryToKey(r.front()));
48595:         }
48633:     } else {
48633:         for (AtomSet::Range r = state->atoms.all(); !r.empty(); r.popFront()) {
48633:             AtomEntryType entry = r.front();
48633:             uintN flags = AtomEntryFlags(entry);
48633:             if (flags & (ATOM_PINNED | ATOM_INTERNED)) {
48633:                 JS_SET_TRACING_INDEX(trc,
48633:                                      flags & ATOM_PINNED
48633:                                      ? "pinned_atom"
48633:                                      : "interned_atom",
48633:                                      number++);
48633:                 MarkString(trc, AtomEntryToKey(entry));
 4529:             }
48633:         }
48633:     }
    1: }
    1: 
    1: void
 4342: js_SweepAtomState(JSContext *cx)
    1: {
 4342:     JSAtomState *state = &cx->runtime->atomState;
    1: 
48633:     for (AtomSet::Enum e(state->atoms); !e.empty(); e.popFront()) {
48633:         AtomEntryType entry = e.front();
48633:         if (AtomEntryFlags(entry) & (ATOM_PINNED | ATOM_INTERNED)) {
48633:             /* Pinned or interned key cannot be finalized. */
60258:             JS_ASSERT(!IsAboutToBeFinalized(cx, AtomEntryToKey(entry)));
60258:         } else if (IsAboutToBeFinalized(cx, AtomEntryToKey(entry))) {
48633:             e.removeFront();
48633:         }
48633:     }
    1: }
    1: 
64345: /*
64345:  * This call takes ownership of 'chars' if ATOM_NOCOPY is set.
64345:  */
64345: static JSAtom *
64345: Atomize(JSContext *cx, const jschar *chars, size_t length, uintN flags)
    1: {
64345:     JS_ASSERT(!(flags & ~(ATOM_PINNED|ATOM_INTERNED|ATOM_NOCOPY)));
10444: 
64345:     if (JSAtom *s = JSAtom::lookupStatic(chars, length))
64345:         return s;
32686: 
64297:     AutoLockAtomsCompartment lock(cx);
 4342: 
64297:     AtomSet &atoms = cx->runtime->atomState.atoms;
64345:     AtomSet::AddPtr p = atoms.lookupForAdd(AtomHasher::Lookup(chars, length));
48633: 
64345:     JSAtom *atom;
64345:     if (p) {
64345:         atom = AtomEntryToKey(*p);
64345:     } else {
64345:         SwitchToCompartment sc(cx, cx->runtime->atomsCompartment);
48633: 
64345:         JSFixedString *key;
 4342:         if (flags & ATOM_NOCOPY) {
64345:             key = js_NewString(cx, const_cast<jschar *>(chars), length);
64345:             if (!key) {
64560:                 cx->free_(const_cast<jschar *>(chars));
    1:                 return NULL;
64345:             }
    1:         } else {
54858:             key = js_NewStringCopyN(cx, chars, length);
 4529:             if (!key)
 4342:                 return NULL;
 4342:         }
    1: 
64345:         /*
64345:          * We have to relookup the key as the last ditch GC invoked from the
64345:          * string allocation or OOM handling may unlock the atomsCompartment.
64345:          */
64345:         AtomHasher::Lookup lookup(chars, length);
64345:         if (!atoms.relookupOrAdd(p, lookup, StringToInitialAtomEntry(key))) {
48633:             JS_ReportOutOfMemory(cx); /* SystemAllocPolicy does not report */
48633:             return NULL;
11189:         }
64345: 
64345:         atom = key->morphInternedStringIntoAtom();
 4529:     }
 4529: 
48633:     AddAtomEntryFlags(*p, flags & (ATOM_PINNED | ATOM_INTERNED));
64345:     return atom;
64345: }
48633: 
64345: JSAtom *
64345: js_AtomizeString(JSContext *cx, JSString *str, uintN flags)
64345: {
64345:     JS_ASSERT(!(flags & ATOM_NOCOPY));
64345: 
64345:     if (str->isAtom())
64345:         return &str->asAtom();
64345: 
64345:     size_t length = str->length();
64345:     const jschar *chars = str->getChars(cx);
64345:     if (!chars)
64345:         return NULL;
64345: 
64345:     JS_ASSERT(length <= JSString::MAX_LENGTH);
64345:     return Atomize(cx, chars, length, flags);
    1: }
    1: 
10444: JSAtom *
68124: js_Atomize(JSContext *cx, const char *bytes, size_t length, uintN flags)
    1: {
64345:     JS_ASSERT(!(flags & ATOM_NOCOPY));
64345:     CHECK_REQUEST(cx);
    1: 
64345:     if (!CheckStringLength(cx, length))
64345:         return NULL;
43230: 
    1:     /*
    1:      * Avoiding the malloc in js_InflateString on shorter strings saves us
    1:      * over 20,000 malloc calls on mozilla browser startup. This compares to
    1:      * only 131 calls where the string is longer than a 31 char (net) buffer.
    1:      * The vast majority of atomized strings are already in the hashtable. So
    1:      * js_AtomizeString rarely has to copy the temp string we make.
    1:      */
64345:     static const unsigned ATOMIZE_BUF_MAX = 32;
    1:     jschar inflated[ATOMIZE_BUF_MAX];
    1:     size_t inflatedLength = ATOMIZE_BUF_MAX - 1;
    1: 
64345:     const jschar *chars;
    1:     if (length < ATOMIZE_BUF_MAX) {
    1:         js_InflateStringToBuffer(cx, bytes, length, inflated, &inflatedLength);
    1:         inflated[inflatedLength] = 0;
    1:         chars = inflated;
    1:     } else {
    1:         inflatedLength = length;
68124:         chars = js_InflateString(cx, bytes, &inflatedLength);
    1:         if (!chars)
    1:             return NULL;
    1:         flags |= ATOM_NOCOPY;
    1:     }
    1: 
64345:     return Atomize(cx, chars, inflatedLength, flags);
    1: }
    1: 
10444: JSAtom *
    1: js_AtomizeChars(JSContext *cx, const jschar *chars, size_t length, uintN flags)
    1: {
64345:     JS_ASSERT(!(flags & ATOM_NOCOPY));
43230:     CHECK_REQUEST(cx);
60571: 
60571:     if (!CheckStringLength(cx, length))
60571:         return NULL;
60571: 
64345:     return Atomize(cx, chars, length, flags);
    1: }
    1: 
    1: JSAtom *
    1: js_GetExistingStringAtom(JSContext *cx, const jschar *chars, size_t length)
    1: {
64345:     if (JSAtom *atom = JSAtom::lookupStatic(chars, length))
64345:         return atom;
64345:     AutoLockAtomsCompartment lock(cx);
64345:     AtomSet::Ptr p = cx->runtime->atomState.atoms.lookup(AtomHasher::Lookup(chars, length));
64345:     return p ? AtomEntryToKey(*p) : NULL;
    1: }
    1: 
 4342: #ifdef DEBUG
48633: JS_FRIEND_API(void)
48633: js_DumpAtoms(JSContext *cx, FILE *fp)
48633: {
48633:     JSAtomState *state = &cx->runtime->atomState;
48595: 
48633:     fprintf(fp, "atoms table contents:\n");
49085:     unsigned number = 0;
48633:     for (AtomSet::Range r = state->atoms.all(); !r.empty(); r.popFront()) {
48633:         AtomEntryType entry = r.front();
48633:         fprintf(fp, "%3u ", number++);
48633:         if (entry == 0) {
 4529:             fputs("<uninitialized>", fp);
 4529:         } else {
59890:             JSAtom *key = AtomEntryToKey(entry);
57721:             FileEscapedString(fp, key, '"');
48633:             uintN flags = AtomEntryFlags(entry);
 4529:             if (flags != 0) {
 4529:                 fputs((flags & (ATOM_PINNED | ATOM_INTERNED))
 4529:                       ? " pinned | interned"
 4529:                       : (flags & ATOM_PINNED) ? " pinned" : " interned",
 4529:                       fp);
 4529:             }
 4529:         }
 4342:         putc('\n', fp);
 4342:     }
 4529:     putc('\n', fp);
 4342: }
 4342: #endif
    1: 
18907: static JSHashNumber
    1: js_hash_atom_ptr(const void *key)
    1: {
 3164:     const JSAtom *atom = (const JSAtom *) key;
 3328:     return ATOM_HASH(atom);
    1: }
    1: 
27012: #if JS_BITS_PER_WORD == 32
27012: # define TEMP_SIZE_START_LOG2   5
27012: #else
27012: # define TEMP_SIZE_START_LOG2   6
27012: #endif
27012: #define TEMP_SIZE_LIMIT_LOG2    (TEMP_SIZE_START_LOG2 + NUM_TEMP_FREELISTS)
27012: 
27012: #define TEMP_SIZE_START         JS_BIT(TEMP_SIZE_START_LOG2)
27012: #define TEMP_SIZE_LIMIT         JS_BIT(TEMP_SIZE_LIMIT_LOG2)
27012: 
27012: JS_STATIC_ASSERT(TEMP_SIZE_START >= sizeof(JSHashTable));
27012: 
18907: static void *
    1: js_alloc_temp_space(void *priv, size_t size)
    1: {
40860:     Parser *parser = (Parser *) priv;
27012: 
26970:     void *space;
27012:     if (size < TEMP_SIZE_LIMIT) {
27012:         int bin = JS_CeilingLog2(size) - TEMP_SIZE_START_LOG2;
27012:         JS_ASSERT(unsigned(bin) < NUM_TEMP_FREELISTS);
26968: 
40860:         space = parser->tempFreeList[bin];
27012:         if (space) {
40860:             parser->tempFreeList[bin] = *(void **)space;
27012:             return space;
27012:         }
27012:     }
27012: 
47609:     JS_ARENA_ALLOCATE(space, &parser->context->tempPool, size);
    1:     if (!space)
40860:         js_ReportOutOfScriptQuota(parser->context);
    1:     return space;
    1: }
    1: 
18907: static void
27012: js_free_temp_space(void *priv, void *item, size_t size)
    1: {
27012:     if (size >= TEMP_SIZE_LIMIT)
27012:         return;
27012: 
40860:     Parser *parser = (Parser *) priv;
27012:     int bin = JS_CeilingLog2(size) - TEMP_SIZE_START_LOG2;
27012:     JS_ASSERT(unsigned(bin) < NUM_TEMP_FREELISTS);
27012: 
40860:     *(void **)item = parser->tempFreeList[bin];
40860:     parser->tempFreeList[bin] = item;
    1: }
    1: 
18907: static JSHashEntry *
    1: js_alloc_temp_entry(void *priv, const void *key)
    1: {
40860:     Parser *parser = (Parser *) priv;
    1:     JSAtomListElement *ale;
    1: 
40860:     ale = parser->aleFreeList;
27012:     if (ale) {
40860:         parser->aleFreeList = ALE_NEXT(ale);
27012:         return &ale->entry;
27012:     }
27012: 
47609:     JS_ARENA_ALLOCATE_TYPE(ale, JSAtomListElement, &parser->context->tempPool);
    1:     if (!ale) {
40860:         js_ReportOutOfScriptQuota(parser->context);
    1:         return NULL;
    1:     }
    1:     return &ale->entry;
    1: }
    1: 
18907: static void
    1: js_free_temp_entry(void *priv, JSHashEntry *he, uintN flag)
    1: {
40860:     Parser *parser = (Parser *) priv;
27012:     JSAtomListElement *ale = (JSAtomListElement *) he;
27012: 
40860:     ALE_SET_NEXT(ale, parser->aleFreeList);
40860:     parser->aleFreeList = ale;
    1: }
    1: 
    1: static JSHashAllocOps temp_alloc_ops = {
    1:     js_alloc_temp_space,    js_free_temp_space,
    1:     js_alloc_temp_entry,    js_free_temp_entry
    1: };
    1: 
    1: JSAtomListElement *
27012: JSAtomList::rawLookup(JSAtom *atom, JSHashEntry **&hep)
    1: {
27012:     if (table) {
27012:         hep = JS_HashTableRawLookup(table, ATOM_HASH(atom), atom);
48460:         return (JSAtomListElement *) *hep;
48460:     }
48460: 
27012:     JSHashEntry **alep = &list;
27012:     hep = NULL;
48460:     JSAtomListElement *ale;
27012:     while ((ale = (JSAtomListElement *)*alep) != NULL) {
27012:         if (ALE_ATOM(ale) == atom) {
27012:             /* Hit, move atom's element to the front of the list. */
27012:             *alep = ale->entry.next;
27012:             ale->entry.next = list;
27012:             list = &ale->entry;
27012:             break;
27012:         }
27012:         alep = &ale->entry.next;
27012:     }
27012:     return ale;
27012: }
27012: 
27012: #define ATOM_LIST_HASH_THRESHOLD        12
27012: 
27012: JSAtomListElement *
40860: JSAtomList::add(Parser *parser, JSAtom *atom, AddHow how)
27012: {
27012:     JS_ASSERT(!set);
27012: 
    1:     JSAtomListElement *ale, *ale2, *next;
    1:     JSHashEntry **hep;
    1: 
27012:     ale = rawLookup(atom, hep);
27012:     if (!ale || how != UNIQUE) {
27012:         if (count < ATOM_LIST_HASH_THRESHOLD && !table) {
27012:             /* Few enough for linear search and no hash table yet needed. */
40860:             ale = (JSAtomListElement *)js_alloc_temp_entry(parser, atom);
    1:             if (!ale)
    1:                 return NULL;
    1:             ALE_SET_ATOM(ale, atom);
27012: 
27012:             if (how == HOIST) {
27012:                 ale->entry.next = NULL;
27012:                 hep = (JSHashEntry **) &list;
27012:                 while (*hep)
27012:                     hep = &(*hep)->next;
27012:                 *hep = &ale->entry;
    1:             } else {
27012:                 ale->entry.next = list;
27012:                 list = &ale->entry;
27012:             }
27012:         } else {
27012:             /*
27012:              * We should hash, or else we already are hashing, but count was
27012:              * reduced by JSAtomList::rawRemove below ATOM_LIST_HASH_THRESHOLD.
27012:              * Check whether we should create the table.
27012:              */
27012:             if (!table) {
    1:                 /* No hash table yet, so hep had better be null! */
    1:                 JS_ASSERT(!hep);
27012:                 table = JS_NewHashTable(count + 1, js_hash_atom_ptr,
    1:                                         JS_CompareValues, JS_CompareValues,
40860:                                         &temp_alloc_ops, parser);
27012:                 if (!table)
    1:                     return NULL;
    1: 
    1:                 /*
    1:                  * Set ht->nentries explicitly, because we are moving entries
27012:                  * from list to ht, not calling JS_HashTable(Raw|)Add.
    1:                  */
27012:                 table->nentries = count;
    1: 
27012:                 /*
27012:                  * Insert each ale on list into the new hash table. Append to
27012:                  * the hash chain rather than inserting at the bucket head, to
27012:                  * preserve order among entries with the same key.
27012:                  */
27012:                 for (ale2 = (JSAtomListElement *)list; ale2; ale2 = next) {
    1:                     next = ALE_NEXT(ale2);
 3328:                     ale2->entry.keyHash = ATOM_HASH(ALE_ATOM(ale2));
27012:                     hep = JS_HashTableRawLookup(table, ale2->entry.keyHash,
    1:                                                 ale2->entry.key);
27012:                     while (*hep)
27012:                         hep = &(*hep)->next;
    1:                     *hep = &ale2->entry;
27012:                     ale2->entry.next = NULL;
    1:                 }
27012:                 list = NULL;
    1: 
    1:                 /* Set hep for insertion of atom's ale, immediately below. */
27012:                 hep = JS_HashTableRawLookup(table, ATOM_HASH(atom), atom);
    1:             }
    1: 
    1:             /* Finally, add an entry for atom into the hash bucket at hep. */
    1:             ale = (JSAtomListElement *)
27012:                   JS_HashTableRawAdd(table, hep, ATOM_HASH(atom), atom, NULL);
    1:             if (!ale)
    1:                 return NULL;
27012: 
27012:             /*
27012:              * If hoisting, move ale to the end of its chain after we called
27012:              * JS_HashTableRawAdd, since RawAdd may have grown the table and
27012:              * then recomputed hep to refer to the pointer to the first entry
27012:              * with the given key.
27012:              */
27012:             if (how == HOIST && ale->entry.next) {
30447:                 JS_ASSERT(*hep == &ale->entry);
27012:                 *hep = ale->entry.next;
27012:                 ale->entry.next = NULL;
27012:                 do {
27012:                     hep = &(*hep)->next;
27012:                 } while (*hep);
27012:                 *hep = &ale->entry;
27012:             }
    1:         }
    1: 
27012:         ALE_SET_INDEX(ale, count++);
    1:     }
    1:     return ale;
    1: }
    1: 
27012: void
40860: JSAtomList::rawRemove(Parser *parser, JSAtomListElement *ale, JSHashEntry **hep)
27012: {
27012:     JS_ASSERT(!set);
27012:     JS_ASSERT(count != 0);
27012: 
27012:     if (table) {
27012:         JS_ASSERT(hep);
27012:         JS_HashTableRawRemove(table, hep, &ale->entry);
27012:     } else {
27012:         JS_ASSERT(!hep);
27012:         hep = &list;
27012:         while (*hep != &ale->entry) {
27012:             JS_ASSERT(*hep);
27012:             hep = &(*hep)->next;
27012:         }
27012:         *hep = ale->entry.next;
40860:         js_free_temp_entry(parser, &ale->entry, HT_FREE_ENTRY);
27012:     }
27012: 
27012:     --count;
27012: }
27012: 
35309: JSAutoAtomList::~JSAutoAtomList()
35309: {
35309:     if (table) {
35309:         JS_HashTableDestroy(table);
35309:     } else {
35309:         JSHashEntry *hep = list;
35309:         while (hep) {
35309:             JSHashEntry *next = hep->next;
40860:             js_free_temp_entry(parser, hep, HT_FREE_ENTRY);
35309:             hep = next;
35309:         }
35309:     }
35309: }
35309: 
27012: JSAtomListElement *
27012: JSAtomListIterator::operator ()()
27012: {
27012:     JSAtomListElement *ale;
27012:     JSHashTable *ht;
27012: 
27012:     if (index == uint32(-1))
27012:         return NULL;
27012: 
27012:     ale = next;
27012:     if (!ale) {
27012:         ht = list->table;
27012:         if (!ht)
27012:             goto done;
27012:         do {
27012:             if (index == JS_BIT(JS_HASH_BITS - ht->shift))
27012:                 goto done;
27012:             next = (JSAtomListElement *) ht->buckets[index++];
27012:         } while (!next);
27012:         ale = next;
27012:     }
27012: 
27012:     next = ALE_NEXT(ale);
27012:     return ale;
27012: 
27012:   done:
27012:     index = uint32(-1);
27012:     return NULL;
27012: }
27012: 
18907: static intN
    1: js_map_atom(JSHashEntry *he, intN i, void *arg)
    1: {
    1:     JSAtomListElement *ale = (JSAtomListElement *)he;
 3164:     JSAtom **vector = (JSAtom **) arg;
    1: 
    1:     vector[ALE_INDEX(ale)] = ALE_ATOM(ale);
    1:     return HT_ENUMERATE_NEXT;
    1: }
    1: 
    1: #ifdef DEBUG
    1: static jsrefcount js_atom_map_count;
    1: static jsrefcount js_atom_map_hash_table_count;
    1: #endif
    1: 
10444: void
    1: js_InitAtomMap(JSContext *cx, JSAtomMap *map, JSAtomList *al)
    1: {
    1:     JSAtom **vector;
    1:     JSAtomListElement *ale;
    1:     uint32 count;
    1: 
 3235:     /* Map length must already be initialized. */
 3235:     JS_ASSERT(al->count == map->length);
    1: #ifdef DEBUG
    1:     JS_ATOMIC_INCREMENT(&js_atom_map_count);
    1: #endif
 2284:     ale = (JSAtomListElement *)al->list;
    1:     if (!ale && !al->table) {
 3235:         JS_ASSERT(!map->vector);
 3235:         return;
    1:     }
    1: 
    1:     count = al->count;
 3235:     vector = map->vector;
    1:     if (al->table) {
    1: #ifdef DEBUG
    1:         JS_ATOMIC_INCREMENT(&js_atom_map_hash_table_count);
    1: #endif
    1:         JS_HashTableEnumerateEntries(al->table, js_map_atom, vector);
    1:     } else {
    1:         do {
    1:             vector[ALE_INDEX(ale)] = ALE_ATOM(ale);
    1:         } while ((ale = ALE_NEXT(ale)) != NULL);
    1:     }
27012:     al->clear();
    1: }
48470: 
48470: #if JS_HAS_XML_SUPPORT
48470: bool
48470: js_InternNonIntElementIdSlow(JSContext *cx, JSObject *obj, const Value &idval,
48470:                              jsid *idp)
48470: {
48470:     JS_ASSERT(idval.isObject());
48470:     if (obj->isXML()) {
48470:         *idp = OBJECT_TO_JSID(&idval.toObject());
48470:         return true;
48470:     }
48470: 
48470:     if (!js_IsFunctionQName(cx, &idval.toObject(), idp))
48470:         return JS_FALSE;
48470:     if (!JSID_IS_VOID(*idp))
48470:         return true;
48470: 
48470:     return js_ValueToStringId(cx, idval, idp);
48470: }
48470: 
48470: bool
48470: js_InternNonIntElementIdSlow(JSContext *cx, JSObject *obj, const Value &idval,
48470:                              jsid *idp, Value *vp)
48470: {
48470:     JS_ASSERT(idval.isObject());
48470:     if (obj->isXML()) {
48470:         JSObject &idobj = idval.toObject();
48470:         *idp = OBJECT_TO_JSID(&idobj);
48470:         vp->setObject(idobj);
48470:         return true;
48470:     }
48470: 
48470:     if (!js_IsFunctionQName(cx, &idval.toObject(), idp))
48470:         return JS_FALSE;
48470:     if (!JSID_IS_VOID(*idp)) {
48470:         *vp = IdToValue(*idp);
48470:         return true;
48470:     }
48470: 
48470:     if (js_ValueToStringId(cx, idval, idp)) {
48470:         vp->setString(JSID_TO_STRING(*idp));
48470:         return true;
48470:     }
48470:     return false;
48470: }
48470: #endif
