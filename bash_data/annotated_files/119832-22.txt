 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  5604: 
  5604: #include "nsDataSignatureVerifier.h"
  5604: #include "nsCOMPtr.h"
  5604: #include "nsString.h"
  5604: 
  5604: #include "seccomon.h"
  5604: #include "nssb64.h"
  5604: #include "certt.h"
  5604: #include "keyhi.h"
  5604: #include "cryptohi.h"
  5604: 
  5604: SEC_ASN1_MKSUB(SECOID_AlgorithmIDTemplate)
  5604: 
  5604: NS_IMPL_ISUPPORTS1(nsDataSignatureVerifier, nsIDataSignatureVerifier)
  5604: 
  5604: const SEC_ASN1Template CERT_SignatureDataTemplate[] =
  5604: {
  5604:     { SEC_ASN1_SEQUENCE,
119832:         0, NULL, sizeof(CERTSignedData) },
  5604:     { SEC_ASN1_INLINE | SEC_ASN1_XTRN,
  5604:         offsetof(CERTSignedData,signatureAlgorithm),
  5604:         SEC_ASN1_SUB(SECOID_AlgorithmIDTemplate), },
  5604:     { SEC_ASN1_BIT_STRING,
  5604:         offsetof(CERTSignedData,signature), },
  5604:     { 0, }
  5604: };
  5604: 
  5604: NS_IMETHODIMP
  5604: nsDataSignatureVerifier::VerifyData(const nsACString & aData,
  5604:                                     const nsACString & aSignature,
  5604:                                     const nsACString & aPublicKey,
 79445:                                     bool *_retval)
  5604: {
  5604:     // Allocate an arena to handle the majority of the allocations
119200:     PLArenaPool *arena;
  5604:     arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);
  5604:     if (!arena)
  5604:         return NS_ERROR_OUT_OF_MEMORY;
  5604: 
  5604:     // Base 64 decode the key
  5604:     SECItem keyItem;
  5604:     PORT_Memset(&keyItem, 0, sizeof(SECItem));
  5604:     if (!NSSBase64_DecodeBuffer(arena, &keyItem,
  5604:                                 nsPromiseFlatCString(aPublicKey).get(),
  5604:                                 aPublicKey.Length())) {
 80486:         PORT_FreeArena(arena, false);
  5604:         return NS_ERROR_FAILURE;
  5604:     }
  5604:     
  5604:     // Extract the public key from the data
  5604:     CERTSubjectPublicKeyInfo *pki = SECKEY_DecodeDERSubjectPublicKeyInfo(&keyItem);
  5604:     if (!pki) {
 80486:         PORT_FreeArena(arena, false);
  5604:         return NS_ERROR_FAILURE;
  5604:     }
  5604:     SECKEYPublicKey *publicKey = SECKEY_ExtractPublicKey(pki);
  5604:     SECKEY_DestroySubjectPublicKeyInfo(pki);
106838:     pki = nullptr;
  5604:     
  5604:     if (!publicKey) {
 80486:         PORT_FreeArena(arena, false);
  5604:         return NS_ERROR_FAILURE;
  5604:     }
  5604:     
  5604:     // Base 64 decode the signature
  5604:     SECItem signatureItem;
  5604:     PORT_Memset(&signatureItem, 0, sizeof(SECItem));
  5604:     if (!NSSBase64_DecodeBuffer(arena, &signatureItem,
  5604:                                 nsPromiseFlatCString(aSignature).get(),
  5604:                                 aSignature.Length())) {
  5604:         SECKEY_DestroyPublicKey(publicKey);
 80486:         PORT_FreeArena(arena, false);
  5604:         return NS_ERROR_FAILURE;
  5604:     }
  5604:     
  5604:     // Decode the signature and algorithm
  5604:     CERTSignedData sigData;
  5604:     PORT_Memset(&sigData, 0, sizeof(CERTSignedData));
  5604:     SECStatus ss = SEC_QuickDERDecodeItem(arena, &sigData, 
  5604:                                           CERT_SignatureDataTemplate,
  5604:                                           &signatureItem);
  5604:     if (ss != SECSuccess) {
  5604:         SECKEY_DestroyPublicKey(publicKey);
 80486:         PORT_FreeArena(arena, false);
  5604:         return NS_ERROR_FAILURE;
  5604:     }
  5604:     
  5604:     // Perform the final verification
  5604:     DER_ConvertBitString(&(sigData.signature));
  5604:     ss = VFY_VerifyDataWithAlgorithmID((const unsigned char*)nsPromiseFlatCString(aData).get(),
  5604:                                        aData.Length(), publicKey,
  5604:                                        &(sigData.signature),
  5604:                                        &(sigData.signatureAlgorithm),
119832:                                        NULL, NULL);
  5604:     
  5604:     // Clean up remaining objects
  5604:     SECKEY_DestroyPublicKey(publicKey);
 80486:     PORT_FreeArena(arena, false);
  5604:     
  5604:     *_retval = (ss == SECSuccess);
  5604: 
  5604:     return NS_OK;
  5604: }
