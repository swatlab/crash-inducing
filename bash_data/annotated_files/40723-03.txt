 3863: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 3863: /* ***** BEGIN LICENSE BLOCK *****
 3863:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 3863:  *
 3863:  * The contents of this file are subject to the Mozilla Public License Version
 3863:  * 1.1 (the "License"); you may not use this file except in compliance with
 3863:  * the License. You may obtain a copy of the License at
 3863:  * http://www.mozilla.org/MPL/
 3863:  *
 3863:  * Software distributed under the License is distributed on an "AS IS" basis,
 3863:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 3863:  * for the specific language governing rights and limitations under the
 3863:  * License.
 3863:  *
 4389:  * The Original Code is Mozilla Breakpad integration
 3863:  *
 3863:  * The Initial Developer of the Original Code is
 3863:  * Ted Mielczarek <ted.mielczarek@gmail.com>
 3863:  * Portions created by the Initial Developer are Copyright (C) 2006
 3863:  * the Initial Developer. All Rights Reserved.
 3863:  *
 3863:  * Contributor(s):
 3863:  *
 3863:  * Alternatively, the contents of this file may be used under the terms of
 3863:  * either the GNU General Public License Version 2 or later (the "GPL"), or
 3863:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 3863:  * in which case the provisions of the GPL or the LGPL are applicable instead
 3863:  * of those above. If you wish to allow use of your version of this file only
 3863:  * under the terms of either the GPL or the LGPL, and not to allow others to
 3863:  * use your version of this file under the terms of the MPL, indicate your
 3863:  * decision by deleting the provisions above and replace them with the notice
 3863:  * and other provisions required by the GPL or the LGPL. If you do not delete
 3863:  * the provisions above, a recipient may use your version of this file under
 3863:  * the terms of any one of the MPL, the GPL or the LGPL.
 3863:  *
 3863:  * ***** END LICENSE BLOCK ***** */
 3863: 
 4389: #ifndef nsExceptionHandler_h__
 4389: #define nsExceptionHandler_h__
 3863: 
 3863: #include "nscore.h"
39792: #include "nsDataHashtable.h"
 3863: #include "nsXPCOM.h"
 3863: #include "nsStringGlue.h"
 3863: 
37382: #include "nsIFile.h"
37382: 
11440: #if defined(XP_WIN32)
11440: #ifdef WIN32_LEAN_AND_MEAN
11440: #undef WIN32_LEAN_AND_MEAN
11440: #endif
11440: #include <windows.h>
11440: #endif
11440: 
 3866: namespace CrashReporter {
26867: nsresult SetExceptionHandler(nsILocalFile* aXREDirectory, bool force=false);
26867: nsresult UnsetExceptionHandler();
26867: bool     GetEnabled();
26867: bool     GetServerURL(nsACString& aServerURL);
26867: nsresult SetServerURL(const nsACString& aServerURL);
26867: bool     GetMinidumpPath(nsAString& aPath);
 3866: nsresult SetMinidumpPath(const nsAString& aPath);
 3866: nsresult AnnotateCrashReport(const nsACString& key, const nsACString& data);
16248: nsresult AppendAppNotesToCrashReport(const nsACString& data);
 3900: nsresult SetRestartArgs(int argc, char** argv);
 3934: nsresult SetupExtraData(nsILocalFile* aAppDataDirectory,
 3934:                         const nsACString& aBuildID);
39792: 
39792: // Functions for working with minidumps and .extras
39792: typedef nsDataHashtable<nsCStringHashKey, nsCString> AnnotationTable;
39792: 
39792: bool GetMinidumpForID(const nsAString& id, nsILocalFile** minidump);
39792: bool GetIDFromMinidump(nsILocalFile* minidump, nsAString& id);
39792: bool GetExtraFileForID(const nsAString& id, nsILocalFile** extraFile);
39792: bool GetExtraFileForMinidump(nsILocalFile* minidump, nsILocalFile** extraFile);
39792: bool AppendExtraData(const nsAString& id, const AnnotationTable& data);
39792: bool AppendExtraData(nsILocalFile* extraFile, const AnnotationTable& data);
39792: 
11440: #ifdef XP_WIN32
11440:   nsresult WriteMinidumpForException(EXCEPTION_POINTERS* aExceptionInfo);
11440: #endif
18492: #ifdef XP_MACOSX
18492:   nsresult AppendObjCExceptionInfoToAppNotes(void *inException);
18492: #endif
38030: nsresult GetSubmitReports(PRBool* aSubmitReport);
38030: nsresult SetSubmitReports(PRBool aSubmitReport);
37382: 
37382: #ifdef MOZ_IPC
37382: // Out-of-process crash reporter API.
37382: 
37382: // Return true iff a dump was found for |childPid|, and return the
39618: // path in |dump|.  The caller owns the last reference to |dump| if it
39618: // is non-NULL.
39792: bool TakeMinidumpForChild(PRUint32 childPid,
39792:                           nsILocalFile** dump NS_OUTPARAM);
37382: 
39791: #ifdef XP_WIN
39791: typedef HANDLE ProcessHandle;
40022: typedef DWORD ThreadId;
39791: #else
39791: typedef int ProcessHandle;
40022: typedef int ThreadId;
39791: #endif
39791: 
40022: // Return the current thread's ID.
40022: //
40022: // XXX: this is a somewhat out-of-place interface to expose through
40022: // crashreporter, but it takes significant work to call sys_gettid()
40022: // correctly on Linux and breakpad has already jumped through those
40022: // hoops for us.
40022: ThreadId CurrentThreadId();
40022: 
39791: // Create new minidumps that are snapshots of the state of this parent
39791: // process and |childPid|.  Return true on success along with the
39791: // minidumps and a new UUID that can be used to correlate the dumps.
39791: //
39791: // If this function fails, it's the caller's responsibility to clean
39791: // up |childDump| and |parentDump|.  Either or both can be created and
39791: // returned non-null on failure.
39791: bool CreatePairedMinidumps(ProcessHandle childPid,
40022:                            ThreadId childBlamedThread,
39791:                            nsAString* pairGUID NS_OUTPARAM,
39791:                            nsILocalFile** childDump NS_OUTPARAM,
39791:                            nsILocalFile** parentDump NS_OUTPARAM);
39791: 
37382: #  if defined(XP_WIN32)
37382: // Parent-side API for children
37382: const char* GetChildNotificationPipe();
37382: 
37382: // Child-side API
37382: bool SetRemoteExceptionHandler(const nsACString& crashPipe);
37382: 
37382: #  elif defined(XP_LINUX)
37203: // Parent-side API for children
37203: 
37203: // Set the outparams for crash reporter server's fd (|childCrashFd|)
37203: // and the magic fd number it should be remapped to
37203: // (|childCrashRemapFd|) before exec() in the child process.
37203: // |SetRemoteExceptionHandler()| in the child process expects to find
37203: // the server at |childCrashRemapFd|.  Return true iff successful.
37203: //
37203: // If crash reporting is disabled, both outparams will be set to -1
37203: // and |true| will be returned.
37203: bool CreateNotificationPipeForChild(int* childCrashFd, int* childCrashRemapFd);
37203: 
37203: // Child-side API
37203: bool SetRemoteExceptionHandler();
40723: 
40723: #  elif defined(XP_MACOSX)
40723: // When OOP crash reporting is implemented for Mac, it will almost
40723: // certainly use the same interface as the linux code above.  Until
40723: // then, we provide stubs.
40723: void CreateNotificationPipeForChild();
37382: #endif  // XP_WIN32
37203: 
37203: bool UnsetRemoteExceptionHandler();
37382: #endif // MOZ_IPC
 3866: }
 3863: 
 4389: #endif /* nsExceptionHandler_h__ */
