52337: /**
52337:  * Any copyright is dedicated to the Public Domain.
52337:  * http://creativecommons.org/publicdomain/zero/1.0/
52337:  */
52337: 
52337: const testPageURL = "http://mochi.test:8888/browser/" +
52337:   "dom/indexedDB/test/browser_permissionsPrompt.html";
52337: const notificationID = "indexedDB-permissions-prompt";
52337: 
52337: function test()
52337: {
52337:   waitForExplicitFinish();
52337:   removePermission(testPageURL, "indexedDB");
52337:   executeSoon(test1);
52337: }
52337: 
52337: function test1()
52337: {
52337:   info("creating tab");
52337:   gBrowser.selectedTab = gBrowser.addTab();
52337: 
52337:   gBrowser.selectedBrowser.addEventListener("load", function () {
52337:     gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
52337: 
52337:     setFinishedCallback(function(result, exception) {
52337:       ok(!result, "No database created");
95208:       is(exception, "InvalidStateError", "Correct exception");
52337:       is(getPermission(testPageURL, "indexedDB"),
52337:          Components.interfaces.nsIPermissionManager.DENY_ACTION,
52337:          "Correct permission set");
52337:       gBrowser.removeCurrentTab();
52337:       executeSoon(test2);
52337:     });
52337: 
52337:     registerPopupEventHandler("popupshowing", function () {
52337:       ok(true, "prompt showing");
52337:     });
52337:     registerPopupEventHandler("popupshown", function () {
52337:       ok(true, "prompt shown");
52337:       triggerSecondaryCommand(this, 0);
52337:     });
52337:     registerPopupEventHandler("popuphidden", function () {
52337:       ok(true, "prompt hidden");
52337:     });
52337: 
52337:   }, true);
52337: 
52337:   info("loading test page: " + testPageURL);
52337:   content.location = testPageURL;
52337: }
52337: 
52337: function test2()
52337: {
52337:   info("creating tab");
52337:   gBrowser.selectedTab = gBrowser.addTab();
52337: 
52337:   gBrowser.selectedBrowser.addEventListener("load", function () {
52337:     gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
52337: 
52337:     setFinishedCallback(function(result, exception) {
52337:       ok(!result, "No database created");
95208:       is(exception, "InvalidStateError", "Correct exception");
52337:       is(getPermission(testPageURL, "indexedDB"),
52337:          Components.interfaces.nsIPermissionManager.DENY_ACTION,
52337:          "Correct permission set");
52337:       gBrowser.removeCurrentTab();
52337:       unregisterAllPopupEventHandlers();
52337:       removePermission(testPageURL, "indexedDB");
52337:       executeSoon(finish);
52337:     });
52337: 
52337:     registerPopupEventHandler("popupshowing", function () {
52337:       ok(false, "Shouldn't show a popup this time");
52337:     });
52337:     registerPopupEventHandler("popupshown", function () {
52337:       ok(false, "Shouldn't show a popup this time");
52337:     });
52337:     registerPopupEventHandler("popuphidden", function () {
52337:       ok(false, "Shouldn't show a popup this time");
52337:     });
52337: 
52337:   }, true);
52337: 
52337:   info("loading test page: " + testPageURL);
52337:   content.location = testPageURL;
52337: }
