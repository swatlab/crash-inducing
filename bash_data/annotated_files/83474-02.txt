69223: /* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
69223:  * vim: set ts=4 sw=4 et tw=79 ft=cpp:
69223:  *
69223:  * ***** BEGIN LICENSE BLOCK *****
69223:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
69223:  *
69223:  * The contents of this file are subject to the Mozilla Public License Version
69223:  * 1.1 (the "License"); you may not use this file except in compliance with
69223:  * the License. You may obtain a copy of the License at
69223:  * http://www.mozilla.org/MPL/
69223:  *
69223:  * Software distributed under the License is distributed on an "AS IS" basis,
69223:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
69223:  * for the specific language governing rights and limitations under the
69223:  * License.
69223:  *
69223:  * The Original Code is SpiderMonkey JavaScript engine.
69223:  *
69223:  * The Initial Developer of the Original Code is
69223:  * Mozilla Corporation.
69223:  * Portions created by the Initial Developer are Copyright (C) 2009
69223:  * the Initial Developer. All Rights Reserved.
69223:  *
69223:  * Contributor(s):
69223:  *   Luke Wagner <luke@mozilla.com>
69223:  *
69223:  * Alternatively, the contents of this file may be used under the terms of
69223:  * either the GNU General Public License Version 2 or later (the "GPL"), or
69223:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
69223:  * in which case the provisions of the GPL or the LGPL are applicable instead
69223:  * of those above. If you wish to allow use of your version of this file only
69223:  * under the terms of either the GPL or the LGPL, and not to allow others to
69223:  * use your version of this file under the terms of the MPL, indicate your
69223:  * decision by deleting the provisions above and replace them with the notice
69223:  * and other provisions required by the GPL or the LGPL. If you do not delete
69223:  * the provisions above, a recipient may use your version of this file under
69223:  * the terms of any one of the MPL, the GPL or the LGPL.
69223:  *
69223:  * ***** END LICENSE BLOCK ***** */
69223: 
69223: #ifndef Stack_h__
69223: #define Stack_h__
69223: 
69223: #include "jsfun.h"
69223: 
70320: struct JSContext;
76885: struct JSCompartment;
70320: 
69223: namespace js {
69223: 
69223: class StackFrame;
69223: class FrameRegs;
69223: class StackSegment;
69223: class StackSpace;
69223: class ContextStack;
69223: 
69223: class InvokeArgsGuard;
69223: class InvokeFrameGuard;
69223: class FrameGuard;
69223: class ExecuteFrameGuard;
69223: class DummyFrameGuard;
69223: class GeneratorFrameGuard;
69223: 
76185: namespace mjit {
76185:     struct JITScript;
76185:     struct CallSite;
76185:     jsbytecode *NativeToPC(JITScript *jit, void *ncode, CallSite **pinline);
76185: }
76185: namespace detail { struct OOMCheck; }
76185: 
71697: class CallIter;
71697: class FrameRegsIter;
71697: class AllFramesIter;
71697: 
69827: class ArgumentsObject;
69827: 
76185: #ifdef JS_METHODJIT
76185: typedef js::mjit::CallSite JSInlinedSite;
76185: #else
76185: struct JSInlinedSite {};
76185: #endif
76185: 
76185: typedef /* js::mjit::RejoinState */ size_t JSRejoinState;
69223: 
69223: /*
69223:  * VM stack layout
69223:  *
69223:  * SpiderMonkey uses a per-thread stack to store the activation records,
69223:  * parameters, locals, and expression temporaries for the stack of actively
69223:  * executing scripts, functions and generators. The per-thread stack is owned
69223:  * by the StackSpace object stored in the thread's ThreadData.
69223:  *
69223:  * The per-thread stack is subdivided into contiguous segments of memory which
69223:  * have a memory layout invariant that allows fixed offsets to be used for stack
71697:  * access (by jit code) as well as fast call/return. This memory layout is
71697:  * encapsulated by a set of types that describe different regions of memory.
71697:  * This encapsulation has holes: to avoid calling into C++ from generated code,
71697:  * JIT compilers generate code that simulates analogous operations in C++.
69223:  *
71697:  * A sample memory layout of a segment looks like:
69223:  *
71697:  *                          regs
71697:  *       .---------------------------------------------.
71697:  *       |                                             V
71697:  *       |                                   fp .--FrameRegs--. sp
71697:  *       |                                      V             V
69223:  * |StackSegment| slots |StackFrame| slots |StackFrame| slots |
69223:  *                        |      ^           |
69223:  *           ? <----------'      `-----------'
69223:  *                 prev               prev
69223:  *
69223:  * A segment starts with a fixed-size header (js::StackSegment) which logically
69223:  * describes the segment, links it to the rest of the stack, and points to the
71697:  * end of the stack.
69223:  *
69223:  * Each script activation (global or function code) is given a fixed-size header
69223:  * (js::StackFrame) which is associated with the values (called "slots") before
69223:  * and after it. The frame contains bookkeeping information about the activation
69223:  * and links to the previous frame.
69223:  *
71697:  * The slots preceding a (function) StackFrame in memory are the arguments of
71697:  * the call. The slots after a StackFrame in memory are its locals followed by
71697:  * its expression stack. There is no clean line between the arguments of a
69223:  * frame and the expression stack of the previous frame since the top slots of
69223:  * the expression become the arguments of a call. There are also layout
69223:  * invariants concerning the arguments and StackFrame; see "Arguments" comment
69223:  * in StackFrame for more details.
69223:  *
69223:  * The top of a segment's current frame's expression stack is pointed to by the
69223:  * segment's "current regs", which contains the stack pointer 'sp'. In the
69223:  * interpreter, sp is adjusted as individual values are pushed and popped from
69223:  * the stack and the FrameRegs struct (pointed by the StackSegment) is a local
69223:  * var of js::Interpret. JIT code simulates this by lazily updating FrameRegs
69223:  * when calling from JIT code into the VM. Ideally, we'd like to remove all
69223:  * dependence on FrameRegs outside the interpreter.
69223:  *
69223:  * A call to a native (C++) function does not push a frame. Instead, an array
71697:  * of values is passed to the native. The layout of this array is abstracted by
71697:  * js::CallArgs. With respect to the StackSegment layout above, the args to a
71697:  * native call are inserted anywhere there can be slots. A sample memory layout
71697:  * looks like:
71697:  *
71697:  *                          regs
71697:  *       .----------------------------------------.
71697:  *       |                                        V
71697:  *       |                              fp .--FrameRegs--. sp
71697:  *       |                                 V             V
71697:  * |StackSegment| native call | slots |StackFrame| slots | native call |
71697:  *       |     vp <--argc--> end                        vp <--argc--> end
71697:  *       |         CallArgs <------------------------------ CallArgs
71697:  *       |                               prev                  ^
71697:  *       `-----------------------------------------------------'
71697:  *                                  calls
71697:  *
71697:  * Here there are two native calls on the stack. The start of each native arg
71697:  * range is recorded by a CallArgs element which is prev-linked like stack
71697:  * frames. Note that, in full generality, native and scripted calls can
71697:  * interleave arbitrarily. Thus, the end of a segment is the maximum of its
71697:  * current frame and its current native call. Similarly, the top of the entire
71697:  * thread stack is the end of its current segment.
71697:  *
71697:  * Note that, between any two StackFrames there may be any number
71697:  * of native calls, so the meaning of 'prev' is not 'directly called by'.
69223:  *
69223:  * An additional feature (perhaps not for much longer: bug 650361) is that
69223:  * multiple independent "contexts" can interleave (LIFO) on a single contiguous
71697:  * stack. "Independent" here means that neither context sees the other's
71697:  * frames. Concretely, an embedding may enter the JS engine on cx1 and then,
71697:  * from a native called by the JS engine, reenter the VM on cx2. Changing from
71697:  * cx1 to cx2 causes a new segment to be started for cx2's stack on top of
71697:  * cx1's current segment. These two segments are linked from the perspective of
69223:  * StackSpace, since they are adjacent on the thread's stack, but not from the
71697:  * perspective of cx1 and cx2. Thus, each segment has two links: prevInMemory
71697:  * and prevInContext. Each independent stack is encapsulated and managed by
71697:  * the js::ContextStack object stored in JSContext. ContextStack is the primary
71697:  * interface to the rest of the engine for pushing and popping the stack.
69223:  */
69223: 
69223: /*****************************************************************************/
69223: 
69223: class CallReceiver
69223: {
71695:   protected:
69223: #ifdef DEBUG
69223:     mutable bool usedRval_;
71695:     void setUsedRval() const { usedRval_ = true; }
71695:     void clearUsedRval() const { usedRval_ = false; }
71695: #else
71695:     void setUsedRval() const {}
71695:     void clearUsedRval() const {}
69223: #endif
69223:     Value *argv_;
69223:   public:
69223:     friend CallReceiver CallReceiverFromVp(Value *);
69223:     friend CallReceiver CallReceiverFromArgv(Value *);
69223:     Value *base() const { return argv_ - 2; }
69223:     JSObject &callee() const { JS_ASSERT(!usedRval_); return argv_[-2].toObject(); }
69223:     Value &calleev() const { JS_ASSERT(!usedRval_); return argv_[-2]; }
69223:     Value &thisv() const { return argv_[-1]; }
69223: 
69223:     Value &rval() const {
71695:         setUsedRval();
69223:         return argv_[-2];
69223:     }
69223: 
71695:     Value *spAfterCall() const {
71695:         setUsedRval();
71695:         return argv_ - 1;
71695:     }
71695: 
82027:     void setCallee(Value calleev) {
71695:         clearUsedRval();
82027:         this->calleev() = calleev;
69223:     }
69223: };
69223: 
69223: JS_ALWAYS_INLINE CallReceiver
71695: CallReceiverFromArgv(Value *argv)
69223: {
71695:     CallReceiver receiver;
71695:     receiver.clearUsedRval();
71695:     receiver.argv_ = argv;
71695:     return receiver;
69223: }
69223: 
69223: JS_ALWAYS_INLINE CallReceiver
71695: CallReceiverFromVp(Value *vp)
69223: {
71695:     return CallReceiverFromArgv(vp + 2);
69223: }
69223: 
69223: /*****************************************************************************/
69223: 
69223: class CallArgs : public CallReceiver
69223: {
71697:   protected:
69223:     uintN argc_;
69223:   public:
69223:     friend CallArgs CallArgsFromVp(uintN, Value *);
69223:     friend CallArgs CallArgsFromArgv(uintN, Value *);
71695:     friend CallArgs CallArgsFromSp(uintN, Value *);
69223:     Value &operator[](unsigned i) const { JS_ASSERT(i < argc_); return argv_[i]; }
79387:     Value *array() const { return argv_; }
79387:     uintN length() const { return argc_; }
71695:     Value *end() const { return argv_ + argc_; }
69223: };
69223: 
69223: JS_ALWAYS_INLINE CallArgs
71695: CallArgsFromArgv(uintN argc, Value *argv)
71695: {
71695:     CallArgs args;
71695:     args.clearUsedRval();
71695:     args.argv_ = argv;
71695:     args.argc_ = argc;
71695:     return args;
71695: }
71695: 
71695: JS_ALWAYS_INLINE CallArgs
69223: CallArgsFromVp(uintN argc, Value *vp)
69223: {
71695:     return CallArgsFromArgv(argc, vp + 2);
69223: }
69223: 
69223: JS_ALWAYS_INLINE CallArgs
71695: CallArgsFromSp(uintN argc, Value *sp)
69223: {
71695:     return CallArgsFromArgv(argc, sp - argc);
69223: }
69223: 
69223: /*****************************************************************************/
69223: 
76829: /*
76829:  * For calls to natives, the InvokeArgsGuard object provides a record of the
76829:  * call for the debugger's callstack. For this to work, the InvokeArgsGuard
76829:  * record needs to know when the call is actually active (because the
76829:  * InvokeArgsGuard can be pushed long before and popped long after the actual
76829:  * call, during which time many stack-observing things can happen).
76829:  */
71697: class CallArgsList : public CallArgs
71697: {
71697:     friend class StackSegment;
71697:     CallArgsList *prev_;
71697:     bool active_;
71697:   public:
71697:     friend CallArgsList CallArgsListFromVp(uintN, Value *, CallArgsList *);
71697:     friend CallArgsList CallArgsListFromArgv(uintN, Value *, CallArgsList *);
71697:     CallArgsList *prev() const { return prev_; }
71697:     bool active() const { return active_; }
71697:     void setActive() { active_ = true; }
71697:     void setInactive() { active_ = false; }
71697: };
71697: 
71697: JS_ALWAYS_INLINE CallArgsList
71697: CallArgsListFromArgv(uintN argc, Value *argv, CallArgsList *prev)
71697: {
71697:     CallArgsList args;
71697: #ifdef DEBUG
71697:     args.usedRval_ = false;
71697: #endif
71697:     args.argv_ = argv;
71697:     args.argc_ = argc;
71697:     args.prev_ = prev;
71697:     args.active_ = false;
71697:     return args;
71697: }
71697: 
71697: JS_ALWAYS_INLINE CallArgsList
71697: CallArgsListFromVp(uintN argc, Value *vp, CallArgsList *prev)
71697: {
71697:     return CallArgsListFromArgv(argc, vp + 2, prev);
71697: }
71697: 
71697: /*****************************************************************************/
71697: 
69223: class StackFrame
69223: {
69223:   public:
69223:     enum Flags {
69223:         /* Primary frame type */
69223:         GLOBAL             =        0x1,  /* frame pushed for a global script */
69223:         FUNCTION           =        0x2,  /* frame pushed for a scripted call */
69223:         DUMMY              =        0x4,  /* frame pushed for bookkeeping */
69223: 
69223:         /* Frame subtypes */
69223:         EVAL               =        0x8,  /* frame pushed for eval() or debugger eval */
69223:         DEBUGGER           =       0x10,  /* frame pushed for debugger eval */
69223:         GENERATOR          =       0x20,  /* frame is associated with a generator */
69223:         FLOATING_GENERATOR =       0x40,  /* frame is is in generator obj, not on stack */
69223:         CONSTRUCTING       =       0x80,  /* frame is for a constructor invocation */
69223: 
69223:         /* Temporary frame states */
69223:         YIELDING           =      0x100,  /* js::Interpret dispatched JSOP_YIELD */
69223:         FINISHED_IN_INTERP =      0x200,  /* set if frame finished in Interpret() */
69223: 
69223:         /* Concerning function arguments */
69223:         OVERRIDE_ARGS      =      0x400,  /* overridden arguments local variable */
69223:         OVERFLOW_ARGS      =      0x800,  /* numActualArgs > numFormalArgs */
69223:         UNDERFLOW_ARGS     =     0x1000,  /* numActualArgs < numFormalArgs */
69223: 
69223:         /* Lazy frame initialization */
82642:         HAS_CALL_OBJ       =     0x2000,  /* frame has a callobj reachable from scopeChain_ */
82642:         HAS_ARGS_OBJ       =     0x4000,  /* frame has an argsobj in StackFrame::args */
82642:         HAS_HOOK_DATA      =     0x8000,  /* frame has hookData_ set */
82642:         HAS_ANNOTATION     =    0x10000,  /* frame has annotation_ set */
82642:         HAS_RVAL           =    0x20000,  /* frame has rval_ set */
82642:         HAS_SCOPECHAIN     =    0x40000,  /* frame has scopeChain_ set */
82642:         HAS_PREVPC         =    0x80000,  /* frame has prevpc_ and prevInline_ set */
76185: 
77341:         /* Method JIT state */
82642:         DOWN_FRAMES_EXPANDED = 0x100000,  /* inlining in down frames has been expanded */
82642:         LOWERED_CALL_APPLY   = 0x200000   /* Pushed by a lowered call/apply */
69223:     };
69223: 
69223:   private:
69223:     mutable uint32      flags_;         /* bits described by Flags */
69223:     union {                             /* describes what code is executing in a */
69223:         JSScript        *script;        /*   global frame */
69223:         JSFunction      *fun;           /*   function frame, pre GetScopeChain */
69223:     } exec;
69223:     union {                             /* describes the arguments of a function */
69827:         uintN           nactual;        /*   before js_GetArgsObject */
69827:         ArgumentsObject *obj;           /*   after js_GetArgsObject */
69223:         JSScript        *script;        /* eval has no args, but needs a script */
69223:     } args;
69223:     mutable JSObject    *scopeChain_;   /* current scope chain */
69223:     StackFrame          *prev_;         /* previous cx->regs->fp */
69223:     void                *ncode_;        /* return address for method JIT */
69223: 
69223:     /* Lazily initialized */
71696:     Value               rval_;          /* return value of the frame */
69223:     jsbytecode          *prevpc_;       /* pc of previous frame*/
76185:     JSInlinedSite       *prevInline_;   /* inlined site in previous frame */
69223:     void                *hookData_;     /* closure returned by call hook */
69223:     void                *annotation_;   /* perhaps remove with bug 546848 */
76185:     JSRejoinState       rejoin_;        /* If rejoining into the interpreter
76185:                                          * from JIT code, state at rejoin. */
69223: 
69223:     static void staticAsserts() {
71696:         JS_STATIC_ASSERT(offsetof(StackFrame, rval_) % sizeof(Value) == 0);
71696:         JS_STATIC_ASSERT(sizeof(StackFrame) % sizeof(Value) == 0);
69223:     }
69223: 
69223:     inline void initPrev(JSContext *cx);
76185:     jsbytecode *prevpcSlow(JSInlinedSite **pinlined);
69223: 
69223:   public:
69223:     /*
69223:      * Frame initialization
69223:      *
69223:      * After acquiring a pointer to an uninitialized stack frame on the VM
69223:      * stack from StackSpace, these members are used to initialize the stack
69223:      * frame before officially pushing the frame into the context.
69223:      */
69223: 
69223:     /* Used for Invoke, Interpret, trace-jit LeaveTree, and method-jit stubs. */
83283:     void initCallFrame(JSContext *cx, JSFunction &callee,
71695:                        JSScript *script, uint32 nactual, StackFrame::Flags flags);
69223: 
69223:     /* Used for SessionInvoke. */
71695:     void resetCallFrame(JSScript *script);
69223: 
71695:     /* Called by jit stubs and serve as a specification for jit-code. */
73495:     void initJitFrameCallerHalf(StackFrame *prev, StackFrame::Flags flags, void *ncode);
71695:     void initJitFrameEarlyPrologue(JSFunction *fun, uint32 nactual);
72577:     bool initJitFrameLatePrologue(JSContext *cx, Value **limit);
69223: 
69223:     /* Used for eval. */
71697:     void initExecuteFrame(JSScript *script, StackFrame *prev, FrameRegs *regs,
71697:                           const Value &thisv, JSObject &scopeChain, ExecuteType type);
69223: 
69223:     /* Used when activating generators. */
71695:     void stealFrameAndSlots(Value *vp, StackFrame *otherfp, Value *othervp, Value *othersp);
69223: 
69223:     /* Perhaps one fine day we will remove dummy frames. */
71695:     void initDummyFrame(JSContext *cx, JSObject &chain);
69223: 
69223:     /*
69223:      * Stack frame type
69223:      *
69223:      * A stack frame may have one of three types, which determines which
69223:      * members of the frame may be accessed and other invariants:
69223:      *
69223:      *  global frame:   execution of global code or an eval in global code
69223:      *  function frame: execution of function code or an eval in a function
69223:      *  dummy frame:    bookkeeping frame (to be removed in bug 625199)
69223:      */
69223: 
69223:     bool isFunctionFrame() const {
69223:         return !!(flags_ & FUNCTION);
69223:     }
69223: 
69223:     bool isGlobalFrame() const {
69223:         return !!(flags_ & GLOBAL);
69223:     }
69223: 
69223:     bool isDummyFrame() const {
69223:         return !!(flags_ & DUMMY);
69223:     }
69223: 
69223:     bool isScriptFrame() const {
69223:         bool retval = !!(flags_ & (FUNCTION | GLOBAL));
69223:         JS_ASSERT(retval == !isDummyFrame());
69223:         return retval;
69223:     }
69223: 
69223:     /*
69223:      * Eval frames
69223:      *
69223:      * As noted above, global and function frames may optionally be 'eval
69223:      * frames'. Eval code shares its parent's arguments which means that the
69223:      * arg-access members of StackFrame may not be used for eval frames.
69223:      * Search for 'hasArgs' below for more details.
69223:      *
69223:      * A further sub-classification of eval frames is whether the frame was
69223:      * pushed for an ES5 strict-mode eval().
69223:      */
69223: 
69223:     bool isEvalFrame() const {
69223:         JS_ASSERT_IF(flags_ & EVAL, isScriptFrame());
69223:         return flags_ & EVAL;
69223:     }
69223: 
71697:     bool isEvalInFunction() const {
71697:         return (flags_ & (EVAL | FUNCTION)) == (EVAL | FUNCTION);
71697:     }
71697: 
69223:     bool isNonEvalFunctionFrame() const {
69223:         return (flags_ & (FUNCTION | EVAL)) == FUNCTION;
69223:     }
69223: 
69223:     inline bool isStrictEvalFrame() const {
69223:         return isEvalFrame() && script()->strictModeCode;
69223:     }
69223: 
69223:     bool isNonStrictEvalFrame() const {
69223:         return isEvalFrame() && !script()->strictModeCode;
69223:     }
69223: 
69223:     /*
69223:      * Previous frame
69223:      *
69223:      * A frame's 'prev' frame is either null or the previous frame pointed to
69223:      * by cx->regs->fp when this frame was pushed. Often, given two prev-linked
69223:      * frames, the next-frame is a function or eval that was called by the
69223:      * prev-frame, but not always: the prev-frame may have called a native that
69223:      * reentered the VM through JS_CallFunctionValue on the same context
69223:      * (without calling JS_SaveFrameChain) which pushed the next-frame. Thus,
69223:      * 'prev' has little semantic meaning and basically just tells the VM what
69223:      * to set cx->regs->fp to when this frame is popped.
69223:      */
69223: 
69223:     StackFrame *prev() const {
69223:         return prev_;
69223:     }
69223: 
69223:     inline void resetGeneratorPrev(JSContext *cx);
76185:     inline void resetInlinePrev(StackFrame *prevfp, jsbytecode *prevpc);
76185: 
76185:     inline void initInlineFrame(JSFunction *fun, StackFrame *prevfp, jsbytecode *prevpc);
69223: 
69223:     /*
69223:      * Frame slots
69223:      *
69223:      * A frame's 'slots' are the fixed slots associated with the frame (like
69223:      * local variables) followed by an expression stack holding temporary
69223:      * values. A frame's 'base' is the base of the expression stack.
69223:      */
69223: 
71696:     Value *slots() const {
71696:         return (Value *)(this + 1);
69223:     }
69223: 
71696:     Value *base() const {
69223:         return slots() + script()->nfixed;
69223:     }
69223: 
71696:     Value &varSlot(uintN i) {
69223:         JS_ASSERT(i < script()->nfixed);
69223:         JS_ASSERT_IF(maybeFun(), i < script()->bindings.countVars());
69223:         return slots()[i];
69223:     }
69223: 
69223:     /*
69223:      * Script
69223:      *
69223:      * All function and global frames have an associated JSScript which holds
76185:      * the bytecode being executed for the frame. This script/bytecode does
76185:      * not reflect any inlining that has been performed by the method JIT.
76185:      * If other frames were inlined into this one, the script/pc reflect the
76185:      * point of the outermost call. Inlined frame invariants:
76185:      *
76185:      * - Inlined frames have the same scope chain as the outer frame.
76185:      * - Inlined frames have the same strictness as the outer frame.
77377:      * - Inlined frames can only make calls to other JIT frames associated with
77377:      *   the same VMFrame. Other calls force expansion of the inlined frames.
69223:      */
69223: 
69223:     /*
76185:      * Get the frame's current bytecode, assuming |this| is in |cx|. next is
76185:      * frame whose prev == this, NULL if not known or if this == cx->fp().
76185:      * If the frame is inside an inline call made within the pc, the pc will
76185:      * be that of the outermost call and the state of any inlined frame(s) is
76185:      * returned through pinlined.
71363:      *
71363:      * Beware, as the name implies, pcQuadratic can lead to quadratic behavior
71363:      * in loops such as:
71363:      *
71363:      *   for ( ...; fp; fp = fp->prev())
76185:      *     ... fp->pcQuadratic(cx->stack);
71363:      *
76185:      * Using next can avoid this, but in most cases prefer FrameRegsIter;
76185:      * it is amortized O(1).
71363:      *
71363:      *   When I get to the bottom I go back to the top of the stack
71363:      *   Where I stop and I turn and I go right back
71363:      *   Till I get to the bottom and I see you again...
69223:      */
76185:     jsbytecode *pcQuadratic(const ContextStack &stack, StackFrame *next = NULL,
76185:                             JSInlinedSite **pinlined = NULL);
69223: 
76185:     jsbytecode *prevpc(JSInlinedSite **pinlined) {
76185:         if (flags_ & HAS_PREVPC) {
76185:             if (pinlined)
76185:                 *pinlined = prevInline_;
69223:             return prevpc_;
76185:         }
76185:         return prevpcSlow(pinlined);
76185:     }
76185: 
76185:     JSInlinedSite *prevInline() {
76185:         JS_ASSERT(flags_ & HAS_PREVPC);
76185:         return prevInline_;
69223:     }
69223: 
69223:     JSScript *script() const {
69223:         JS_ASSERT(isScriptFrame());
69223:         return isFunctionFrame()
69223:                ? isEvalFrame() ? args.script : fun()->script()
69223:                : exec.script;
69223:     }
69223: 
69223:     JSScript *functionScript() const {
69223:         JS_ASSERT(isFunctionFrame());
69223:         return isEvalFrame() ? args.script : fun()->script();
69223:     }
69223: 
69223:     JSScript *globalScript() const {
69223:         JS_ASSERT(isGlobalFrame());
69223:         return exec.script;
69223:     }
69223: 
69223:     JSScript *maybeScript() const {
69223:         return isScriptFrame() ? script() : NULL;
69223:     }
69223: 
69223:     size_t numFixed() const {
69223:         return script()->nfixed;
69223:     }
69223: 
69223:     size_t numSlots() const {
69223:         return script()->nslots;
69223:     }
69223: 
69223:     size_t numGlobalVars() const {
69223:         JS_ASSERT(isGlobalFrame());
69223:         return exec.script->nfixed;
69223:     }
69223: 
69223:     /*
69223:      * Function
69223:      *
83474:      * All function frames have an associated interpreted JSFunction. The
83474:      * function returned by fun() and maybeFun() is not necessarily the
83474:      * original canonical function which the frame's script was compiled
83474:      * against. To get this function, use maybeScriptFunction().
69223:      */
69223: 
69223:     JSFunction* fun() const {
69223:         JS_ASSERT(isFunctionFrame());
69223:         return exec.fun;
69223:     }
69223: 
69223:     JSFunction* maybeFun() const {
69223:         return isFunctionFrame() ? fun() : NULL;
69223:     }
69223: 
83474:     JSFunction* maybeScriptFunction() const {
83474:         if (!isFunctionFrame())
83474:             return NULL;
83474:         const StackFrame *fp = this;
83474:         while (fp->isEvalFrame())
83474:             fp = fp->prev();
83474:         return fp->script()->function();
83474:     }
83474: 
69223:     /*
69223:      * Arguments
69223:      *
69223:      * Only non-eval function frames have arguments. A frame follows its
69223:      * arguments contiguously in memory. The arguments pushed by the caller are
69223:      * the 'actual' arguments. The declared arguments of the callee are the
69223:      * 'formal' arguments. When the caller passes less or equal actual
69223:      * arguments, the actual and formal arguments are the same array (but with
69223:      * different extents). When the caller passes too many arguments, the
69223:      * formal subset of the actual arguments is copied onto the top of the
69223:      * stack. This allows the engine to maintain a jit-time constant offset of
69223:      * arguments from the frame pointer. Since the formal subset of the actual
69223:      * arguments is potentially on the stack twice, it is important for all
69223:      * reads/writes to refer to the same canonical memory location.
69223:      *
69223:      * An arguments object (the object returned by the 'arguments' keyword) is
69223:      * lazily created, so a given function frame may or may not have one.
69223:      */
69223: 
69223:     /* True if this frame has arguments. Contrast with hasArgsObj. */
69223:     bool hasArgs() const {
69223:         return isNonEvalFunctionFrame();
69223:     }
69223: 
69223:     uintN numFormalArgs() const {
69223:         JS_ASSERT(hasArgs());
69223:         return fun()->nargs;
69223:     }
69223: 
71696:     Value &formalArg(uintN i) const {
69223:         JS_ASSERT(i < numFormalArgs());
69223:         return formalArgs()[i];
69223:     }
69223: 
71696:     Value *formalArgs() const {
69223:         JS_ASSERT(hasArgs());
71696:         return (Value *)this - numFormalArgs();
69223:     }
69223: 
71696:     Value *formalArgsEnd() const {
69223:         JS_ASSERT(hasArgs());
71696:         return (Value *)this;
69223:     }
69223: 
71696:     Value *maybeFormalArgs() const {
69223:         return (flags_ & (FUNCTION | EVAL)) == FUNCTION
69223:                ? formalArgs()
69223:                : NULL;
69223:     }
69223: 
69223:     inline uintN numActualArgs() const;
71696:     inline Value *actualArgs() const;
71696:     inline Value *actualArgsEnd() const;
69223: 
71696:     inline Value &canonicalActualArg(uintN i) const;
70319:     template <class Op>
70319:     inline bool forEachCanonicalActualArg(Op op, uintN start = 0, uintN count = uintN(-1));
69223:     template <class Op> inline bool forEachFormalArg(Op op);
69223: 
69223:     bool hasArgsObj() const {
69223:         return !!(flags_ & HAS_ARGS_OBJ);
69223:     }
69223: 
69827:     ArgumentsObject &argsObj() const {
69223:         JS_ASSERT(hasArgsObj());
69223:         JS_ASSERT(!isEvalFrame());
69223:         return *args.obj;
69223:     }
69223: 
69827:     ArgumentsObject *maybeArgsObj() const {
69223:         return hasArgsObj() ? &argsObj() : NULL;
69223:     }
69223: 
69827:     inline void setArgsObj(ArgumentsObject &obj);
69223: 
69223:     /*
69223:      * This value
69223:      *
69223:      * Every frame has a this value although, until 'this' is computed, the
69223:      * value may not be the semantically-correct 'this' value.
69223:      *
69223:      * The 'this' value is stored before the formal arguments for function
69223:      * frames and directly before the frame for global frames. The *Args
69223:      * members assert !isEvalFrame(), so we implement specialized inline
69223:      * methods for accessing 'this'. When the caller has static knowledge that
69223:      * a frame is a function or global frame, 'functionThis' and 'globalThis',
69223:      * respectively, allow more efficient access.
69223:      */
69223: 
71696:     Value &functionThis() const {
69223:         JS_ASSERT(isFunctionFrame());
69223:         if (isEvalFrame())
71696:             return ((Value *)this)[-1];
69223:         return formalArgs()[-1];
69223:     }
69223: 
69223:     JSObject &constructorThis() const {
69223:         JS_ASSERT(hasArgs());
69223:         return formalArgs()[-1].toObject();
69223:     }
69223: 
71696:     Value &globalThis() const {
69223:         JS_ASSERT(isGlobalFrame());
71696:         return ((Value *)this)[-1];
69223:     }
69223: 
71696:     Value &thisValue() const {
69223:         if (flags_ & (EVAL | GLOBAL))
71696:             return ((Value *)this)[-1];
69223:         return formalArgs()[-1];
69223:     }
69223: 
69223:     /*
69223:      * Callee
69223:      *
69223:      * Only function frames have a callee. An eval frame in a function has the
71695:      * same caller as its containing function frame. maybeCalleev can be used
71695:      * to return a value that is either caller object (for function frames) or
71695:      * null (for global frames).
69223:      */
69223: 
69223:     JSObject &callee() const {
69223:         JS_ASSERT(isFunctionFrame());
69223:         return calleev().toObject();
69223:     }
69223: 
71696:     const Value &calleev() const {
71695:         JS_ASSERT(isFunctionFrame());
71695:         return mutableCalleev();
69223:     }
69223: 
71696:     const Value &maybeCalleev() const {
71695:         JS_ASSERT(isScriptFrame());
71695:         Value &calleev = flags_ & (EVAL | GLOBAL)
71696:                          ? ((Value *)this)[-2]
71695:                          : formalArgs()[-2];
71695:         JS_ASSERT(calleev.isObjectOrNull());
71695:         return calleev;
71695:     }
71695: 
71695:     /*
71695:      * Beware! Ad hoc changes can corrupt the stack layout; the callee should
71695:      * only be changed to something that is equivalent to the current callee in
71695:      * terms of numFormalArgs etc. Prefer overwriteCallee since it checks.
71695:      */
83228:     inline void overwriteCallee(JSObject &newCallee);
71695: 
71696:     Value &mutableCalleev() const {
71695:         JS_ASSERT(isFunctionFrame());
71695:         if (isEvalFrame())
71696:             return ((Value *)this)[-2];
71695:         return formalArgs()[-2];
69223:     }
69223: 
69223:     /*
73062:      * Compute the callee function for this stack frame, cloning if needed to
73062:      * implement the method read barrier.  If this is not a function frame,
73062:      * set *vp to null.
69223:      */
71696:     bool getValidCalleeObject(JSContext *cx, Value *vp);
69223: 
71696:     CallReceiver callReceiver() const {
71696:         return CallReceiverFromArgv(formalArgs());
71695:     }
71695: 
69223:     /*
69223:      * Scope chain
69223:      *
69223:      * Every frame has a scopeChain which, when traversed via the 'parent' link
69223:      * to the root, indicates the current global object. A 'call object' is a
69223:      * node on a scope chain representing a function's activation record. A
69223:      * call object is used for dynamically-scoped name lookup and lexically-
69223:      * scoped upvar access. The call object holds the values of locals and
69223:      * arguments when a function returns (and its stack frame is popped). For
69223:      * performance reasons, call objects are created lazily for 'lightweight'
69223:      * functions, i.e., functions which are not statically known to require a
69223:      * call object. Thus, a given function frame may or may not have a call
69223:      * object. When a function does have a call object, it is found by walking
69223:      * up the scope chain until the first call object. Thus, it is important,
69223:      * when setting the scope chain, to indicate whether the new scope chain
69223:      * contains a new call object and thus changes the 'hasCallObj' state.
69223:      *
77341:      * The method JIT requires that HAS_SCOPECHAIN be set for all frames which
77341:      * use NAME or related opcodes that can access the scope chain (so it does
77341:      * not have to test the bit). To ensure this, we always initialize the
77341:      * scope chain when pushing frames in the VM, and only initialize it when
77341:      * pushing frames in JIT code when the above situation applies.
77341:      *
69223:      * NB: 'fp->hasCallObj()' implies that fp->callObj() needs to be 'put' when
69223:      * the frame is popped. Since the scope chain of a non-strict eval frame
69223:      * contains the call object of the parent (function) frame, it is possible
69223:      * to have:
69223:      *   !fp->hasCall() && fp->scopeChain().isCall()
69223:      */
69223: 
83239:     inline JSObject &scopeChain() const;
69223: 
69223:     bool hasCallObj() const {
69223:         bool ret = !!(flags_ & HAS_CALL_OBJ);
69223:         JS_ASSERT_IF(ret, !isNonStrictEvalFrame());
69223:         return ret;
69223:     }
69223: 
78065:     inline CallObject &callObj() const;
69223:     inline void setScopeChainNoCallObj(JSObject &obj);
78065:     inline void setScopeChainWithOwnCallObj(CallObject &obj);
69223: 
69223:     /*
77884:      * Prologue for function frames: make a call object for heavyweight
77884:      * functions, and maintain type nesting invariants.
69223:      */
77884:     inline bool functionPrologue(JSContext *cx);
77884: 
77884:     /*
77884:      * Epilogue for function frames: put any args or call object for the frame
78748:      * which may still be live, and maintain type nesting invariants. Note:
78748:      * this does not mark the epilogue as having been completed, since the
78748:      * frame is about to be popped. Use markFunctionEpilogueDone for this.
77884:      */
78748:     inline void functionEpilogue();
77884: 
77884:     /*
78748:      * Mark any work needed in the function's epilogue as done. This call must
78748:      * be followed by a later functionEpilogue.
77884:      */
78748:     inline void markFunctionEpilogueDone();
77884: 
77884:     inline bool maintainNestingState() const;
69223: 
69223:     /*
71694:      * Variables object
71694:      *
71694:      * Given that a (non-dummy) StackFrame corresponds roughly to a ES5
71694:      * Execution Context (ES5 10.3), StackFrame::varObj corresponds to the
71694:      * VariableEnvironment component of a Exection Context. Intuitively, the
71694:      * variables object is where new bindings (variables and functions) are
71694:      * stored. One might expect that this is either the callObj or
71694:      * scopeChain.globalObj for function or global code, respectively, however
71694:      * the JSAPI allows calls of Execute to specify a variables object on the
71694:      * scope chain other than the call/global object. This allows embeddings to
71694:      * run multiple scripts under the same global, each time using a new
71694:      * variables object to collect and discard the script's global variables.
71694:      */
71694: 
83239:     inline JSObject &varObj();
71694: 
71694:     /*
69223:      * Frame compartment
69223:      *
69223:      * A stack frame's compartment is the frame's containing context's
69223:      * compartment when the frame was pushed.
69223:      */
69223: 
83239:     inline JSCompartment *compartment() const;
69223: 
69223:     /* Annotation (will be removed after bug 546848) */
69223: 
69223:     void* annotation() const {
69223:         return (flags_ & HAS_ANNOTATION) ? annotation_ : NULL;
69223:     }
69223: 
69223:     void setAnnotation(void *annot) {
69223:         flags_ |= HAS_ANNOTATION;
69223:         annotation_ = annot;
69223:     }
69223: 
76185:     /* JIT rejoin state */
76185: 
76185:     JSRejoinState rejoin() const {
76185:         return rejoin_;
76185:     }
76185: 
76185:     void setRejoin(JSRejoinState state) {
76185:         rejoin_ = state;
76185:     }
76185: 
76185:     /* Down frame expansion state */
76185: 
76185:     void setDownFramesExpanded() {
76185:         flags_ |= DOWN_FRAMES_EXPANDED;
76185:     }
76185: 
76185:     bool downFramesExpanded() {
77341:         return !!(flags_ & DOWN_FRAMES_EXPANDED);
76185:     }
76185: 
69223:     /* Debugger hook data */
69223: 
69223:     bool hasHookData() const {
69223:         return !!(flags_ & HAS_HOOK_DATA);
69223:     }
69223: 
69223:     void* hookData() const {
69223:         JS_ASSERT(hasHookData());
69223:         return hookData_;
69223:     }
69223: 
69223:     void* maybeHookData() const {
69223:         return hasHookData() ? hookData_ : NULL;
69223:     }
69223: 
69223:     void setHookData(void *v) {
69223:         hookData_ = v;
69223:         flags_ |= HAS_HOOK_DATA;
69223:     }
69223: 
69223:     /* Return value */
69223: 
71696:     const Value &returnValue() {
69223:         if (!(flags_ & HAS_RVAL))
69223:             rval_.setUndefined();
69223:         return rval_;
69223:     }
69223: 
69223:     void markReturnValue() {
69223:         flags_ |= HAS_RVAL;
69223:     }
69223: 
71696:     void setReturnValue(const Value &v) {
69223:         rval_ = v;
69223:         markReturnValue();
69223:     }
69223: 
69223:     void clearReturnValue() {
69223:         rval_.setUndefined();
69223:         markReturnValue();
69223:     }
69223: 
69223:     /* Native-code return address */
69223: 
69223:     void *nativeReturnAddress() const {
69223:         return ncode_;
69223:     }
69223: 
69223:     void setNativeReturnAddress(void *addr) {
69223:         ncode_ = addr;
69223:     }
69223: 
69223:     void **addressOfNativeReturnAddress() {
69223:         return &ncode_;
69223:     }
69223: 
69223:     /*
69223:      * Generator-specific members
69223:      *
69223:      * A non-eval function frame may optionally be the activation of a
69223:      * generator. For the most part, generator frames act like ordinary frames.
69223:      * For exceptions, see js_FloatingFrameIfGenerator.
69223:      */
69223: 
69223:     bool isGeneratorFrame() const {
69223:         return !!(flags_ & GENERATOR);
69223:     }
69223: 
69223:     bool isFloatingGenerator() const {
69223:         JS_ASSERT_IF(flags_ & FLOATING_GENERATOR, isGeneratorFrame());
69223:         return !!(flags_ & FLOATING_GENERATOR);
69223:     }
69223: 
69223:     void initFloatingGenerator() {
69223:         JS_ASSERT(!(flags_ & GENERATOR));
69223:         flags_ |= (GENERATOR | FLOATING_GENERATOR);
69223:     }
69223: 
69223:     void unsetFloatingGenerator() {
69223:         flags_ &= ~FLOATING_GENERATOR;
69223:     }
69223: 
69223:     void setFloatingGenerator() {
69223:         flags_ |= FLOATING_GENERATOR;
69223:     }
69223: 
69223:     /*
69223:      * js::Execute pushes both global and function frames (since eval() in a
69223:      * function pushes a frame with isFunctionFrame() && isEvalFrame()). Most
69223:      * code should not care where a frame was pushed, but if it is necessary to
69223:      * pick out frames pushed by js::Execute, this is the right query:
69223:      */
69223: 
69223:     bool isFramePushedByExecute() const {
69223:         return !!(flags_ & (GLOBAL | EVAL));
69223:     }
69223: 
69223:     /*
69223:      * Other flags
69223:      */
69223: 
77341:     InitialFrameFlags initialFlags() const {
77341:         JS_STATIC_ASSERT((int)INITIAL_NONE == 0);
77341:         JS_STATIC_ASSERT((int)INITIAL_CONSTRUCT == (int)CONSTRUCTING);
77341:         JS_STATIC_ASSERT((int)INITIAL_LOWERED == (int)LOWERED_CALL_APPLY);
77341:         uint32 mask = CONSTRUCTING | LOWERED_CALL_APPLY;
77341:         JS_ASSERT((flags_ & mask) != mask);
77341:         return InitialFrameFlags(flags_ & mask);
77341:     }
77341: 
77341:     bool isConstructing() const {
77341:         return !!(flags_ & CONSTRUCTING);
77341:     }
77341: 
77341:     /*
77341:      * The method JIT call/apply optimization can erase Function.{call,apply}
77341:      * invocations from the stack and push the callee frame directly. The base
77341:      * of these frames will be offset by one value, however, which the
77341:      * interpreter needs to account for if it ends up popping the frame.
77341:      */
77341:     bool loweredCallOrApply() const {
77341:         return !!(flags_ & LOWERED_CALL_APPLY);
69223:     }
69223: 
69223:     bool isDebuggerFrame() const {
69223:         return !!(flags_ & DEBUGGER);
69223:     }
69223: 
69223:     bool hasOverriddenArgs() const {
69223:         return !!(flags_ & OVERRIDE_ARGS);
69223:     }
69223: 
69223:     bool hasOverflowArgs() const {
69223:         return !!(flags_ & OVERFLOW_ARGS);
69223:     }
69223: 
69223:     void setOverriddenArgs() {
69223:         flags_ |= OVERRIDE_ARGS;
69223:     }
69223: 
69223:     bool isYielding() {
69223:         return !!(flags_ & YIELDING);
69223:     }
69223: 
69223:     void setYielding() {
69223:         flags_ |= YIELDING;
69223:     }
69223: 
69223:     void clearYielding() {
69223:         flags_ &= ~YIELDING;
69223:     }
69223: 
69223:     void setFinishedInInterpreter() {
69223:         flags_ |= FINISHED_IN_INTERP;
69223:     }
69223: 
69223:     bool finishedInInterpreter() const {
69223:         return !!(flags_ & FINISHED_IN_INTERP);
69223:     }
69223: 
69223: #ifdef DEBUG
69223:     /* Poison scopeChain value set before a frame is flushed. */
69223:     static JSObject *const sInvalidScopeChain;
69223: #endif
69223: 
69223:   public:
69223:     /* Public, but only for JIT use: */
69223: 
69223:     static size_t offsetOfFlags() {
69223:         return offsetof(StackFrame, flags_);
69223:     }
69223: 
69223:     static size_t offsetOfExec() {
69223:         return offsetof(StackFrame, exec);
69223:     }
69223: 
74440:     static size_t offsetOfArgs() {
74440:         return offsetof(StackFrame, args);
74440:     }    
74440: 
69223:     void *addressOfArgs() {
69223:         return &args;
69223:     }
69223: 
69223:     static size_t offsetOfScopeChain() {
69223:         return offsetof(StackFrame, scopeChain_);
69223:     }
69223: 
69223:     JSObject **addressOfScopeChain() {
69223:         JS_ASSERT(flags_ & HAS_SCOPECHAIN);
69223:         return &scopeChain_;
69223:     }
69223: 
69223:     static size_t offsetOfPrev() {
69223:         return offsetof(StackFrame, prev_);
69223:     }
69223: 
69223:     static size_t offsetOfReturnValue() {
69223:         return offsetof(StackFrame, rval_);
69223:     }
69223: 
69223:     static ptrdiff_t offsetOfNcode() {
69223:         return offsetof(StackFrame, ncode_);
69223:     }
69223: 
69223:     static ptrdiff_t offsetOfCallee(JSFunction *fun) {
69223:         JS_ASSERT(fun != NULL);
71696:         return -(fun->nargs + 2) * sizeof(Value);
69223:     }
69223: 
69223:     static ptrdiff_t offsetOfThis(JSFunction *fun) {
69223:         return fun == NULL
71696:                ? -1 * ptrdiff_t(sizeof(Value))
71696:                : -(fun->nargs + 1) * ptrdiff_t(sizeof(Value));
69223:     }
69223: 
69223:     static ptrdiff_t offsetOfFormalArg(JSFunction *fun, uintN i) {
69223:         JS_ASSERT(i < fun->nargs);
71696:         return (-(int)fun->nargs + i) * sizeof(Value);
69223:     }
69223: 
69223:     static size_t offsetOfFixed(uintN i) {
71696:         return sizeof(StackFrame) + i * sizeof(Value);
69223:     }
69223: 
69223: #ifdef JS_METHODJIT
71696:     mjit::JITScript *jit() {
69223:         return script()->getJIT(isConstructing());
69223:     }
69223: #endif
69223: 
69223:     void methodjitStaticAsserts();
69223: };
69223: 
69223: static const size_t VALUES_PER_STACK_FRAME = sizeof(StackFrame) / sizeof(Value);
69223: 
71695: static inline uintN
77341: ToReportFlags(InitialFrameFlags initial)
71695: {
77341:     return uintN(initial & StackFrame::CONSTRUCTING);
71695: }
71695: 
71695: static inline StackFrame::Flags
77341: ToFrameFlags(InitialFrameFlags initial)
71695: {
77341:     return StackFrame::Flags(initial);
71695: }
71695: 
77341: static inline InitialFrameFlags
77341: InitialFrameFlagsFromConstructing(bool b)
71695: {
77341:     return b ? INITIAL_CONSTRUCT : INITIAL_NONE;
77341: }
77341: 
77341: static inline bool
77341: InitialFrameFlagsAreConstructing(InitialFrameFlags initial)
77341: {
77341:     return !!(initial & INITIAL_CONSTRUCT);
77341: }
77341: 
77341: static inline bool
77341: InitialFrameFlagsAreLowered(InitialFrameFlags initial)
77341: {
77341:     return !!(initial & INITIAL_LOWERED);
71695: }
71695: 
69223: inline StackFrame *          Valueify(JSStackFrame *fp) { return (StackFrame *)fp; }
69223: static inline JSStackFrame * Jsvalify(StackFrame *fp)   { return (JSStackFrame *)fp; }
69223: 
69223: /*****************************************************************************/
69223: 
69223: class FrameRegs
69223: {
69223:   public:
69223:     Value *sp;
69223:     jsbytecode *pc;
69223:   private:
76185:     JSInlinedSite *inlined_;
69223:     StackFrame *fp_;
69223:   public:
69223:     StackFrame *fp() const { return fp_; }
76185:     JSInlinedSite *inlined() const { return inlined_; }
69223: 
69223:     /* For jit use (need constant): */
76185:     static const size_t offsetOfFp = 3 * sizeof(void *);
76185:     static const size_t offsetOfInlined = 2 * sizeof(void *);
69223:     static void staticAssert() {
69223:         JS_STATIC_ASSERT(offsetOfFp == offsetof(FrameRegs, fp_));
76185:         JS_STATIC_ASSERT(offsetOfInlined == offsetof(FrameRegs, inlined_));
69223:     }
76185:     void clearInlined() { inlined_ = NULL; }
69223: 
69223:     /* For generator: */
71697:     void rebaseFromTo(const FrameRegs &from, StackFrame &to) {
71697:         fp_ = &to;
71697:         sp = to.slots() + (from.sp - from.fp_->slots());
71695:         pc = from.pc;
76185:         inlined_ = from.inlined_;
71697:         JS_ASSERT(fp_);
69223:     }
69223: 
69223:     /* For ContextStack: */
69223:     void popFrame(Value *newsp) {
76185:         pc = fp_->prevpc(&inlined_);
69223:         sp = newsp;
69223:         fp_ = fp_->prev();
71697:         JS_ASSERT(fp_);
69223:     }
69223: 
69223:     /* For FixupArity: */
69223:     void popPartialFrame(Value *newsp) {
69223:         sp = newsp;
69223:         fp_ = fp_->prev();
71697:         JS_ASSERT(fp_);
69223:     }
69223: 
76185:     /* For InternalInterpret: */
76185:     void restorePartialFrame(Value *newfp) {
76185:         fp_ = (StackFrame *) newfp;
76185:     }
76185: 
69223:     /* For stubs::CompileFunction, ContextStack: */
71697:     void prepareToRun(StackFrame &fp, JSScript *script) {
69223:         pc = script->code;
71697:         sp = fp.slots() + script->nfixed;
71697:         fp_ = &fp;
76185:         inlined_ = NULL;
69223:     }
69223: 
69223:     /* For pushDummyFrame: */
71697:     void initDummyFrame(StackFrame &fp) {
69223:         pc = NULL;
71697:         sp = fp.slots();
71697:         fp_ = &fp;
76185:         inlined_ = NULL;
69223:     }
76185: 
76185:     /* For expandInlineFrames: */
76185:     void expandInline(StackFrame *innerfp, jsbytecode *innerpc) {
76185:         pc = innerpc;
76185:         fp_ = innerfp;
76185:         inlined_ = NULL;
76185:     }
76185: 
76185: #ifdef JS_METHODJIT
76185:     /* For LimitCheck: */
76185:     void updateForNcode(mjit::JITScript *jit, void *ncode) {
76185:         pc = mjit::NativeToPC(jit, ncode, &inlined_);
76185:     }
76185: #endif
69223: };
69223: 
69223: /*****************************************************************************/
69223: 
71697: class StackSegment
69223: {
71697:     /* Previous segment within same context stack. */
71697:     StackSegment *const prevInContext_;
71697: 
71697:     /* Previous segment sequentially in memory. */
71697:     StackSegment *const prevInMemory_;
71697: 
71697:     /* Execution registers for most recent script in this segment (or null). */
71697:     FrameRegs *regs_;
71697: 
71697:     /* Call args for most recent native call in this segment (or null). */
71697:     CallArgsList *calls_;
71697: 
71697:   public:
71697:     StackSegment(StackSegment *prevInContext,
71697:                  StackSegment *prevInMemory,
71697:                  FrameRegs *regs,
71697:                  CallArgsList *calls)
71697:       : prevInContext_(prevInContext),
71697:         prevInMemory_(prevInMemory),
71697:         regs_(regs),
71697:         calls_(calls)
71697:     {}
71697: 
71697:     /* A segment is followed in memory by the arguments of the first call. */
71697: 
71697:     Value *slotsBegin() const {
71697:         return (Value *)(this + 1);
71697:     }
71697: 
71697:     /* Accessors. */
71697: 
71697:     FrameRegs &regs() const {
71697:         JS_ASSERT(regs_);
71697:         return *regs_;
71697:     }
71697: 
71697:     FrameRegs *maybeRegs() const {
71697:         return regs_;
71697:     }
71697: 
71697:     StackFrame *fp() const {
71697:         return regs_->fp();
71697:     }
71697: 
71697:     StackFrame *maybefp() const {
71697:         return regs_ ? regs_->fp() : NULL;
71697:     }
71697: 
71697:     CallArgsList &calls() const {
71697:         JS_ASSERT(calls_);
71697:         return *calls_;
71697:     }
71697: 
71697:     CallArgsList *maybeCalls() const {
71697:         return calls_;
71697:     }
71697: 
71697:     Value *callArgv() const {
79387:         return calls_->array();
71697:     }
71697: 
71697:     Value *maybeCallArgv() const {
79387:         return calls_ ? calls_->array() : NULL;
71697:     }
71697: 
71697:     StackSegment *prevInContext() const {
71697:         return prevInContext_;
71697:     }
71697: 
71697:     StackSegment *prevInMemory() const {
71697:         return prevInMemory_;
71697:     }
71697: 
71697:     void repointRegs(FrameRegs *regs) {
71697:         JS_ASSERT_IF(regs, regs->fp());
71697:         regs_ = regs;
71697:     }
71697: 
71697:     bool isEmpty() const {
71697:         return !calls_ && !regs_;
71697:     }
71697: 
71697:     bool contains(const StackFrame *fp) const;
71697:     bool contains(const FrameRegs *regs) const;
71697:     bool contains(const CallArgsList *call) const;
71697: 
71697:     StackFrame *computeNextFrame(const StackFrame *fp) const;
71697: 
71697:     Value *end() const;
71697: 
71697:     FrameRegs *pushRegs(FrameRegs &regs);
71697:     void popRegs(FrameRegs *regs);
71697:     void pushCall(CallArgsList &callList);
71767:     void pointAtCall(CallArgsList &callList);
71697:     void popCall();
71697: 
71697:     /* For jit access: */
71697: 
71697:     static const size_t offsetOfRegs() { return offsetof(StackSegment, regs_); }
69223: };
69223: 
71697: static const size_t VALUES_PER_STACK_SEGMENT = sizeof(StackSegment) / sizeof(Value);
71697: JS_STATIC_ASSERT(sizeof(StackSegment) % sizeof(Value) == 0);
71697: 
79734: inline Value *
79734: StackSpace::firstUnused() const { return seg_ ? seg_->end() : base_; }
69223: 
79734: inline bool         ContextStack::hasfp() const     { return seg_ && seg_->maybeRegs(); }
79734: inline FrameRegs *  ContextStack::maybeRegs() const { return seg_ ? seg_->maybeRegs() : NULL; }
79734: inline StackFrame * ContextStack::maybefp() const   { return seg_ ? seg_->maybefp() : NULL; }
79734: inline FrameRegs &  ContextStack::regs() const      { JS_ASSERT(hasfp()); return seg_->regs(); }
79734: inline StackFrame * ContextStack::fp() const        { JS_ASSERT(hasfp()); return seg_->fp(); }
69223: 
79734: } /* namespace js */
73495: 
79734: inline bool            JSContext::hasfp() const      { return stack.hasfp(); }
79734: inline js::StackFrame* JSContext::fp() const         { return stack.fp(); }
79734: inline js::StackFrame* JSContext::maybefp() const    { return stack.maybefp(); }
79734: inline js::FrameRegs&  JSContext::regs() const       { return stack.regs(); }
79734: inline js::FrameRegs*  JSContext::maybeRegs() const  { return stack.maybeRegs(); }
73495: 
79734: namespace js {
69223: 
79734: inline void
79734: ContextStack::repointRegs(FrameRegs *regs) { JS_ASSERT(hasfp()); seg_->repointRegs(regs); }
69223: 
69223: /*****************************************************************************/
69223: 
71697: class InvokeArgsGuard : public CallArgsList
69223: {
69223:     friend class ContextStack;
71697:     ContextStack *stack_;
71697:     bool pushedSeg_;
71697:     void setPushed(ContextStack &stack) { JS_ASSERT(!pushed()); stack_ = &stack; }
69223:   public:
71697:     InvokeArgsGuard() : CallArgsList(), stack_(NULL), pushedSeg_(false) {}
71697:     ~InvokeArgsGuard() { if (pushed()) stack_->popInvokeArgs(*this); }
71697:     bool pushed() const { return !!stack_; }
71697:     void pop() { stack_->popInvokeArgs(*this); stack_ = NULL; }
69223: };
69223: 
69223: class FrameGuard
69223: {
71695:   protected:
69223:     friend class ContextStack;
71697:     ContextStack *stack_;
71697:     bool pushedSeg_;
71695:     FrameRegs regs_;
71697:     FrameRegs *prevRegs_;
71697:     void setPushed(ContextStack &stack) { stack_ = &stack; }
69223:   public:
71697:     FrameGuard() : stack_(NULL), pushedSeg_(false) {}
71697:     ~FrameGuard() { if (pushed()) stack_->popFrame(*this); }
71697:     bool pushed() const { return !!stack_; }
71697:     void pop() { stack_->popFrame(*this); stack_ = NULL; }
71697: 
71695:     StackFrame *fp() const { return regs_.fp(); }
69223: };
69223: 
71697: class InvokeFrameGuard : public FrameGuard
71697: {};
71697: 
69223: class ExecuteFrameGuard : public FrameGuard
71695: {};
71695: 
71695: class DummyFrameGuard : public FrameGuard
71695: {};
71695: 
71695: class GeneratorFrameGuard : public FrameGuard
69223: {
69223:     friend class ContextStack;
71695:     JSGenerator *gen_;
71695:     Value *stackvp_;
71695:   public:
71697:     ~GeneratorFrameGuard() { if (pushed()) stack_->popGeneratorFrame(*this); }
69223: };
69223: 
69223: /*****************************************************************************/
69223: 
69223: /*
71697:  * Iterate through the callstack of the given context. Each element of said
71697:  * callstack can either be the execution of a script (scripted function call,
71697:  * global code, eval code, debugger code) or the invocation of a (C++) native.
71697:  * Example usage:
69223:  *
71697:  *   for (Stackiter i(cx); !i.done(); ++i) {
71697:  *     if (i.isScript()) {
69223:  *       ... i.fp() ... i.sp() ... i.pc()
71697:  *     } else {
71697:  *       JS_ASSERT(i.isNativeCall());
71697:  *       ... i.args();
71697:  *     }
71697:  *
71697:  * The SavedOption parameter additionally lets the iterator continue through
71697:  * breaks in the callstack (from JS_SaveFrameChain). The default is to stop.
69223:  */
71697: class StackIter
71697: {
71697:     friend class ContextStack;
71697:     JSContext    *cx_;
71697:   public:
71697:     enum SavedOption { STOP_AT_SAVED, GO_THROUGH_SAVED };
71697:   private:
71697:     SavedOption  savedOption_;
71697: 
71697:     enum State { DONE, SCRIPTED, NATIVE, IMPLICIT_NATIVE };
71697:     State        state_;
71697: 
71697:     StackFrame   *fp_;
71697:     CallArgsList *calls_;
71697: 
71697:     StackSegment *seg_;
71697:     Value        *sp_;
71697:     jsbytecode   *pc_;
71697:     CallArgs     args_;
71697: 
71697:     void poisonRegs();
71697:     void popFrame();
71697:     void popCall();
71697:     void settleOnNewSegment();
71697:     void settleOnNewState();
71697:     void startOnSegment(StackSegment *seg);
71697: 
71697:   public:
71697:     StackIter(JSContext *cx, SavedOption = STOP_AT_SAVED);
71697: 
71697:     bool done() const { return state_ == DONE; }
71697:     StackIter &operator++();
71697: 
71697:     bool operator==(const StackIter &rhs) const;
71697:     bool operator!=(const StackIter &rhs) const { return !(*this == rhs); }
71697: 
71697:     bool isScript() const { JS_ASSERT(!done()); return state_ == SCRIPTED; }
71697:     StackFrame *fp() const { JS_ASSERT(!done() && isScript()); return fp_; }
71697:     Value      *sp() const { JS_ASSERT(!done() && isScript()); return sp_; }
71697:     jsbytecode *pc() const { JS_ASSERT(!done() && isScript()); return pc_; }
71697: 
71697:     bool isNativeCall() const { JS_ASSERT(!done()); return state_ != SCRIPTED; }
71697:     CallArgs nativeArgs() const { JS_ASSERT(!done() && isNativeCall()); return args_; }
71697: };
71697: 
71697: /* A filtering of the StackIter to only stop at scripts. */
69223: class FrameRegsIter
69223: {
71697:     StackIter iter_;
69223: 
71697:     void settle() {
71697:         while (!iter_.done() && !iter_.isScript())
71697:             ++iter_;
71697:     }
69223: 
69223:   public:
76890:     FrameRegsIter(JSContext *cx, StackIter::SavedOption opt = StackIter::STOP_AT_SAVED)
76890:         : iter_(cx, opt) { settle(); }
69223: 
71697:     bool done() const { return iter_.done(); }
71697:     FrameRegsIter &operator++() { ++iter_; settle(); return *this; }
69223: 
71697:     bool operator==(const FrameRegsIter &rhs) const { return iter_ == rhs.iter_; }
71697:     bool operator!=(const FrameRegsIter &rhs) const { return iter_ != rhs.iter_; }
71697: 
71697:     StackFrame *fp() const { return iter_.fp(); }
71697:     Value      *sp() const { return iter_.sp(); }
71697:     jsbytecode *pc() const { return iter_.pc(); }
69223: };
69223: 
71697: /*****************************************************************************/
71697: 
69223: /*
71697:  * Blindly iterate over all frames in the current thread's stack. These frames
71697:  * can be from different contexts and compartments, so beware.
69223:  */
69223: class AllFramesIter
69223: {
69223:   public:
71697:     AllFramesIter(StackSpace &space);
69223: 
69223:     bool done() const { return fp_ == NULL; }
69223:     AllFramesIter& operator++();
69223: 
69223:     StackFrame *fp() const { return fp_; }
69223: 
69223:   private:
69223:     StackSegment *seg_;
69223:     StackFrame *fp_;
69223: };
69223: 
69223: }  /* namespace js */
69223: 
69223: #endif /* Stack_h__ */
