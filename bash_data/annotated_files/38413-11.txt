14511: var gExpectedCharset;
14511: var gOldPref;
14511: var gDetectorList;
14511: var gTestIndex;
14511: 
14511: function CharsetDetectionTests(aTestFile, aExpectedCharset, aDetectorList)
14511: {
14511:     gExpectedCharset = aExpectedCharset;
14511:     gDetectorList = aDetectorList;
14511: 
14511:     InitDetectorTests();
14511: 
14511:     $("testframe").src = aTestFile;
14511: 
14511:     SimpleTest.waitForExplicitFinish();
14511: }
14511: 
14511: function InitDetectorTests()
14511: {
14511:     var prefService = Components.classes["@mozilla.org/preferences-service;1"]
14511: 	.getService(Components.interfaces.nsIPrefBranch);
14511:     var str =  Components.classes["@mozilla.org/supports-string;1"]
14511: 	.createInstance(Components.interfaces.nsISupportsString);
14511: 
14511:     try {
14511: 	gOldPref = prefService
14511: 	    .getComplexValue("intl.charset.detector",
14511: 			     Components.interfaces.nsIPrefLocalizedString).data;
14511:     } catch (e) {
14511: 	gOldPref = "";
14511:     }
14511:     SetDetectorPref(gDetectorList[0]);
14511:     gTestIndex = 0;
14511:     $("testframe").onload = DoDetectionTest;
38413: 
38413:     if (gExpectedCharset == "default") {
38413:       try {
38413: 	gExpectedCharset = prefService
38413: 	  .getComplexValue("intl.charset.default",
38413: 			   Components.interfaces.nsIPrefLocalizedString).data;
38413:       } catch (e) {
38413: 	gExpectedCharset = "ISO-8859-8";
38413:       }
38413:     }
14511: }
14511: 
14511: function SetDetectorPref(aPrefValue)
14511: {
14511:     var prefService = Components.classes["@mozilla.org/preferences-service;1"]
14511: 	           .getService(Components.interfaces.nsIPrefBranch);
14511:     var str =  Components.classes["@mozilla.org/supports-string;1"]
14511:               .createInstance(Components.interfaces.nsISupportsString);
14511:     str.data = aPrefValue;
14511:     prefService.setComplexValue("intl.charset.detector",
14511: 				Components.interfaces.nsISupportsString, str);
14511:     gCurrentDetector = aPrefValue;
14511: }
14511: 
14511: function DoDetectionTest() {
14511:     var iframeDoc = $("testframe").contentDocument;
14511:     var charset = iframeDoc.characterSet;
14511: 
14511:     is(charset, gExpectedCharset,
14511:        "decoded as " + gExpectedCharset + " by " + gDetectorList[gTestIndex]);
14511: 
14511:     if (++gTestIndex < gDetectorList.length) {
14511: 	SetDetectorPref(gDetectorList[gTestIndex]);
14511: 	iframeDoc.location.reload();
14511:     } else {
14511: 	CleanUpDetectionTests();
14511:     }
14511: }
14511: 
14511: function CleanUpDetectionTests() {
14511:     SetDetectorPref(gOldPref);
14511:     SimpleTest.finish();
14511: }
14511: 
