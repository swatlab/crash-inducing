    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
30005:  *  Josh Aas <josh@mozilla.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
29956: #ifndef nsPluginHost_h_
29956: #define nsPluginHost_h_
    1: 
    1: #include "nsIPluginHost.h"
    1: #include "nsIObserver.h"
    1: #include "nsCOMPtr.h"
    1: #include "prlink.h"
12417: #include "prclist.h"
12417: #include "npapi.h"
36173: #include "nsNPAPIPluginInstance.h"
 3102: #include "nsIPluginTag.h"
    1: #include "nsPluginsDir.h"
    1: #include "nsPluginDirServiceProvider.h"
    1: #include "nsAutoPtr.h"
    1: #include "nsWeakPtr.h"
    1: #include "nsIPrompt.h"
    1: #include "nsISupportsArray.h"
    1: #include "nsIPrefBranch.h"
    1: #include "nsWeakReference.h"
12417: #include "nsThreadUtils.h"
12841: #include "nsTArray.h"
36227: #include "nsTObserverArray.h"
36227: #include "nsITimer.h"
36266: #include "nsPluginTags.h"
62174: #include "nsIEffectiveTLDService.h"
62174: #include "nsIIDNService.h"
70185: #include "nsCRT.h"
    1: 
19246: class nsNPAPIPlugin;
    1: class nsIComponentManager;
    1: class nsIFile;
    1: class nsIChannel;
70185: class nsPluginNativeWindow;
    1: 
36227: #if defined(XP_MACOSX) && !defined(NP_NO_CARBON)
36227: #define MAC_CARBON_PLUGINS
36227: #endif
36227: 
59080: class nsInvalidPluginTag : public nsISupports
59080: {
59080: public:
64609:   nsInvalidPluginTag(const char* aFullPath, PRInt64 aLastModifiedTime = 0);
59080:   virtual ~nsInvalidPluginTag();
59080:   
59080:   NS_DECL_ISUPPORTS
59080:   
64609:   nsCString   mFullPath;
59080:   PRInt64     mLastModifiedTime;
59080:   bool        mSeen;
59080:   
59080:   nsRefPtr<nsInvalidPluginTag> mPrev;
59080:   nsRefPtr<nsInvalidPluginTag> mNext;
59080: };
59080: 
29956: class nsPluginHost : public nsIPluginHost,
    1:                      public nsIObserver,
36227:                      public nsITimerCallback,
    1:                      public nsSupportsWeakReference
    1: {
    1: public:
29956:   nsPluginHost();
29956:   virtual ~nsPluginHost();
    1: 
29956:   static nsPluginHost* GetInst();
    1: 
    1:   NS_DECL_AND_IMPL_ZEROING_OPERATOR_NEW
    1: 
    1:   NS_DECL_ISUPPORTS
29574:   NS_DECL_NSIPLUGINHOST
29574:   NS_DECL_NSIOBSERVER
36227:   NS_DECL_NSITIMERCALLBACK
    1: 
70185:   nsresult Init();
70185:   nsresult Destroy();
70185:   nsresult LoadPlugins();
70185:   nsresult InstantiatePluginForChannel(nsIChannel* aChannel,
70185:                                        nsIPluginInstanceOwner* aOwner,
70185:                                        nsIStreamListener** aListener);
70185:   nsresult SetUpPluginInstance(const char *aMimeType,
70185:                                nsIURI *aURL,
70185:                                nsIPluginInstanceOwner *aOwner);
70185:   nsresult IsPluginEnabledForType(const char* aMimeType);
70185:   nsresult IsPluginEnabledForExtension(const char* aExtension, const char* &aMimeType);
70185:   nsresult GetPluginCount(PRUint32* aPluginCount);
70185:   nsresult GetPlugins(PRUint32 aPluginCount, nsIDOMPlugin** aPluginArray);
70185: 
70185:   nsresult GetURL(nsISupports* pluginInst,
70185:                   const char* url,
70185:                   const char* target,
70185:                   nsIPluginStreamListener* streamListener,
70185:                   const char* altHost,
70185:                   const char* referrer,
70185:                   PRBool forceJSEnabled);
70185:   nsresult PostURL(nsISupports* pluginInst,
70185:                    const char* url,
70185:                    PRUint32 postDataLen,
70185:                    const char* postData,
70185:                    PRBool isFile,
70185:                    const char* target,
70185:                    nsIPluginStreamListener* streamListener,
70185:                    const char* altHost,
70185:                    const char* referrer,
70185:                    PRBool forceJSEnabled,
70185:                    PRUint32 postHeadersLength,
70185:                    const char* postHeaders);
70185: 
70185:   nsresult FindProxyForURL(const char* url, char* *result);
70185:   nsresult UserAgent(const char **retstring);
70185:   nsresult ParsePostBufferToFixHeaders(const char *inPostData, PRUint32 inPostDataLen,
70185:                                        char **outPostData, PRUint32 *outPostDataLen);
70185:   nsresult CreateTempFileToPost(const char *aPostDataURL, nsIFile **aTmpFile);
70185:   nsresult NewPluginNativeWindow(nsPluginNativeWindow ** aPluginNativeWindow);
70185:   nsresult DeletePluginNativeWindow(nsPluginNativeWindow * aPluginNativeWindow);
70185:   nsresult InstantiateDummyJavaPlugin(nsIPluginInstanceOwner *aOwner);
70185: 
70185:   void AddIdleTimeTarget(nsIPluginInstanceOwner* objectFrame, PRBool isVisible);
70185:   void RemoveIdleTimeTarget(nsIPluginInstanceOwner* objectFrame);
70185: 
70007:   nsresult GetPluginName(nsNPAPIPluginInstance *aPluginInstance, const char** aPluginName);
70007:   nsresult StopPluginInstance(nsNPAPIPluginInstance* aInstance);
70007:   nsresult HandleBadPlugin(PRLibrary* aLibrary, nsNPAPIPluginInstance *aInstance);
70007:   nsresult GetPluginTagForInstance(nsNPAPIPluginInstance *aPluginInstance, nsIPluginTag **aPluginTag);
70007: 
29574:   nsresult
    1:   NewPluginURLStream(const nsString& aURL, 
47835:                      nsNPAPIPluginInstance *aInstance, 
    1:                      nsIPluginStreamListener *aListener,
36766:                      nsIInputStream *aPostStream = nsnull,
    1:                      const char *aHeadersData = nsnull, 
    1:                      PRUint32 aHeadersDataLen = 0);
    1: 
    1:   nsresult
47835:   GetURLWithHeaders(nsNPAPIPluginInstance *pluginInst, 
29574:                     const char* url, 
29574:                     const char* target = NULL,
29574:                     nsIPluginStreamListener* streamListener = NULL,
29574:                     const char* altHost = NULL,
29574:                     const char* referrer = NULL,
29574:                     PRBool forceJSEnabled = PR_FALSE,
29574:                     PRUint32 getHeadersLength = 0, 
29574:                     const char* getHeaders = NULL);
29574: 
29574:   nsresult
47835:   DoURLLoadSecurityCheck(nsNPAPIPluginInstance *aInstance,
    1:                          const char* aURL);
    1: 
29574:   nsresult
    1:   AddHeadersToChannel(const char *aHeadersData, PRUint32 aHeadersDataLen, 
    1:                       nsIChannel *aGenericChannel);
    1: 
    1:   static nsresult GetPluginTempDir(nsIFile **aDir);
    1: 
 3464:   // Writes updated plugins settings to disk and unloads the plugin
 3464:   // if it is now disabled
 3464:   nsresult UpdatePluginInfo(nsPluginTag* aPluginTag);
 3102: 
 5649:   // checks whether aTag is a "java" plugin tag (a tag for a plugin
 5649:   // that does Java)
 5649:   static PRBool IsJavaMIMEType(const char *aType);
 5649: 
29204:   static nsresult GetPrompt(nsIPluginInstanceOwner *aOwner, nsIPrompt **aPrompt);
29204: 
36266:   static nsresult PostPluginUnloadEvent(PRLibrary* aLibrary);
36266: 
39794:   void PluginCrashed(nsNPAPIPlugin* plugin,
39794:                      const nsAString& pluginDumpID,
39794:                      const nsAString& browserDumpID);
36304: 
47965:   nsNPAPIPluginInstance *FindInstance(const char *mimetype);
76680:   nsNPAPIPluginInstance *FindOldestStoppedInstance();
76680:   PRUint32 StoppedInstanceCount();
37525: 
47965:   nsTArray< nsRefPtr<nsNPAPIPluginInstance> > *InstanceArray();
37525: 
47965:   void DestroyRunningInstances(nsISupportsArray* aReloadDocs, nsPluginTag* aPluginTag);
37525: 
40216:   // Return the tag for |aLibrary| if found, nsnull if not.
47965:   nsPluginTag* FindTagForLibrary(PRLibrary* aLibrary);
40216: 
69092:   // The last argument should be false if we already have an in-flight stream
69092:   // and don't need to set up a new stream.
69092:   nsresult InstantiateEmbeddedPlugin(const char *aMimeType, nsIURI* aURL,
70930:                                      nsIPluginInstanceOwner* aOwner);
56390: 
69092:   nsresult InstantiateFullPagePlugin(const char *aMimeType,
69092:                                      nsIURI* aURI,
69092:                                      nsIPluginInstanceOwner *aOwner,
69092:                                      nsIStreamListener **aStreamListener);
69092: 
57925:   // Does not accept NULL and should never fail.
57925:   nsPluginTag* TagForPlugin(nsNPAPIPlugin* aPlugin);
57925: 
69716:   nsresult GetPlugin(const char *aMimeType, nsNPAPIPlugin** aPlugin);
69716: 
    1: private:
29574:   nsresult
    1:   TrySetUpPluginInstance(const char *aMimeType, nsIURI *aURL, nsIPluginInstanceOwner *aOwner);
    1: 
    1:   nsresult
    1:   NewEmbeddedPluginStreamListener(nsIURI* aURL, nsIPluginInstanceOwner *aOwner,
47835:                                   nsNPAPIPluginInstance* aInstance,
    1:                                   nsIStreamListener** aListener);
    1: 
    1:   nsresult
47835:   NewEmbeddedPluginStream(nsIURI* aURL, nsIPluginInstanceOwner *aOwner, nsNPAPIPluginInstance* aInstance);
    1: 
    1:   nsresult
47865:   NewFullPagePluginStream(nsIURI* aURI,
47865:                           nsNPAPIPluginInstance *aInstance,
47865:                           nsIStreamListener **aStreamListener);
    1: 
    1:   // Return an nsPluginTag for this type, if any.  If aCheckEnabled is
    1:   // true, only enabled plugins will be returned.
    1:   nsPluginTag*
    1:   FindPluginForType(const char* aMimeType, PRBool aCheckEnabled);
    1: 
    1:   nsPluginTag*
    1:   FindPluginEnabledForExtension(const char* aExtension, const char* &aMimeType);
    1: 
    1:   nsresult
    1:   FindPlugins(PRBool aCreatePluginList, PRBool * aPluginsChanged);
    1: 
    1:   nsresult
    1:   ScanPluginsDirectory(nsIFile *pluginsDir,
    1:                        PRBool aCreatePluginList,
64520:                        PRBool *aPluginsChanged);
    1: 
    1:   nsresult
    1:   ScanPluginsDirectoryList(nsISimpleEnumerator *dirEnum,
    1:                            PRBool aCreatePluginList,
64520:                            PRBool *aPluginsChanged);
    1: 
62849:   nsresult EnsurePluginLoaded(nsPluginTag* plugin);
62849: 
    1:   PRBool IsRunningPlugin(nsPluginTag * plugin);
    1: 
    1:   // Stores all plugins info into the registry
    1:   nsresult WritePluginInfo();
    1: 
    1:   // Loads all cached plugins info into mCachedPlugins
    1:   nsresult ReadPluginInfo();
    1: 
29020:   // Given a file path, returns the plugins info from our cache
    1:   // and removes it from the cache.
64609:   void RemoveCachedPluginsInfo(const char *filePath,
 3102:                                nsPluginTag **result);
    1: 
62849:   // Checks to see if a tag object is in our list of live tags.
62849:   PRBool IsLiveTag(nsIPluginTag* tag);
62849: 
62849:   // Checks our list of live tags for an equivalent tag.
    1:   nsPluginTag* HaveSamePlugin(nsPluginTag * aPluginTag);
    1: 
    1:   // checks if given plugin is a duplicate of what we already have
    1:   // in the plugin list but found in some different place
    1:   PRBool IsDuplicatePlugin(nsPluginTag * aPluginTag);
    1: 
    1:   nsresult EnsurePrivateDirServiceProvider();
    1: 
37525:   void OnPluginInstanceDestroyed(nsPluginTag* aPluginTag);
37525: 
 3102:   nsRefPtr<nsPluginTag> mPlugins;
 3102:   nsRefPtr<nsPluginTag> mCachedPlugins;
59080:   nsRefPtr<nsInvalidPluginTag> mInvalidPlugins;
    1:   PRPackedBool mPluginsLoaded;
    1:   PRPackedBool mDontShowBadPluginMessage;
    1:   PRPackedBool mIsDestroyed;
    1: 
    1:   // set by pref plugin.override_internal_types
    1:   PRPackedBool mOverrideInternalTypes;
    1: 
37523:   // set by pref plugin.disable
37523:   PRPackedBool mPluginsDisabled;
37523: 
47965:   // Any instances in this array will have valid plugin objects via GetPlugin().
47965:   // When removing an instance it might not die - be sure to null out it's plugin.
47965:   nsTArray< nsRefPtr<nsNPAPIPluginInstance> > mInstances;
37525: 
    1:   nsCOMPtr<nsIFile> mPluginRegFile;
    1:   nsCOMPtr<nsIPrefBranch> mPrefService;
 3715: #ifdef XP_WIN
    1:   nsRefPtr<nsPluginDirServiceProvider> mPrivateDirServiceProvider;
24790: #endif
    1: 
62174:   nsCOMPtr<nsIEffectiveTLDService> mTLDService;
62174:   nsCOMPtr<nsIIDNService> mIDNService;
62174: 
62174:   // Helpers for ClearSiteData and SiteHasData.
62174:   nsresult NormalizeHostname(nsCString& host);
62174:   nsresult EnumerateSiteData(const nsACString& domain,
62174:                              const nsTArray<nsCString>& sites,
62174:                              InfallibleTArray<nsCString>& result,
62174:                              bool firstMatchOnly);
62174: 
    1:   nsWeakPtr mCurrentDocument; // weak reference, we use it to id document only
    1: 
    1:   static nsIFile *sPluginTempDir;
    1: 
    1:   // We need to hold a global ptr to ourselves because we register for
    1:   // two different CIDs for some reason...
29956:   static nsPluginHost* sInst;
36227: 
36227: #ifdef MAC_CARBON_PLUGINS
36227:   nsCOMPtr<nsITimer> mVisiblePluginTimer;
36227:   nsTObserverArray<nsIPluginInstanceOwner*> mVisibleTimerTargets;
36227:   nsCOMPtr<nsITimer> mHiddenPluginTimer;
36227:   nsTObserverArray<nsIPluginInstanceOwner*> mHiddenTimerTargets;
36227: #endif
    1: };
    1: 
15594: class NS_STACK_CLASS PluginDestructionGuard : protected PRCList
12417: {
12417: public:
70007:   PluginDestructionGuard(nsNPAPIPluginInstance *aInstance)
12417:     : mInstance(aInstance)
12417:   {
12417:     Init();
12417:   }
12417: 
36173:   PluginDestructionGuard(NPP npp)
36173:     : mInstance(npp ? static_cast<nsNPAPIPluginInstance*>(npp->ndata) : nsnull)
36173:   {
36173:     Init();
36173:   }
36173: 
12417:   ~PluginDestructionGuard();
12417: 
70007:   static PRBool DelayDestroy(nsNPAPIPluginInstance *aInstance);
12417: 
12417: protected:
12417:   void Init()
12417:   {
12417:     NS_ASSERTION(NS_IsMainThread(), "Should be on the main thread");
12417: 
12417:     mDelayedDestroy = PR_FALSE;
12417: 
12417:     PR_INIT_CLIST(this);
12417:     PR_INSERT_BEFORE(this, &sListHead);
12417:   }
12417: 
70007:   nsRefPtr<nsNPAPIPluginInstance> mInstance;
12417:   PRBool mDelayedDestroy;
12417: 
12417:   static PRCList sListHead;
12417: };
12417: 
30005: #endif // nsPluginHost_h_
