16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:   function: lookup based functions
31034:   last mod: $Id: lookup.c 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #include <math.h>
16295: #include "lookup.h"
16295: #include "lookup_data.h"
16295: #include "os.h"
16295: #include "misc.h"
16295: 
16295: #ifdef FLOAT_LOOKUP
16295: 
16295: /* interpolated lookup based cos function, domain 0 to PI only */
16295: float vorbis_coslook(float a){
16295:   double d=a*(.31830989*(float)COS_LOOKUP_SZ);
16295:   int i=vorbis_ftoi(d-.5);
16295: 
16295:   return COS_LOOKUP[i]+ (d-i)*(COS_LOOKUP[i+1]-COS_LOOKUP[i]);
16295: }
16295: 
16295: /* interpolated 1./sqrt(p) where .5 <= p < 1. */
16295: float vorbis_invsqlook(float a){
16295:   double d=a*(2.f*(float)INVSQ_LOOKUP_SZ)-(float)INVSQ_LOOKUP_SZ;
16295:   int i=vorbis_ftoi(d-.5f);
16295:   return INVSQ_LOOKUP[i]+ (d-i)*(INVSQ_LOOKUP[i+1]-INVSQ_LOOKUP[i]);
16295: }
16295: 
16295: /* interpolated 1./sqrt(p) where .5 <= p < 1. */
16295: float vorbis_invsq2explook(int a){
16295:   return INVSQ2EXP_LOOKUP[a-INVSQ2EXP_LOOKUP_MIN];
16295: }
16295: 
16295: #include <stdio.h>
16295: /* interpolated lookup based fromdB function, domain -140dB to 0dB only */
16295: float vorbis_fromdBlook(float a){
16295:   int i=vorbis_ftoi(a*((float)(-(1<<FROMdB2_SHIFT)))-.5f);
16295:   return (i<0)?1.f:
16295:     ((i>=(FROMdB_LOOKUP_SZ<<FROMdB_SHIFT))?0.f:
16295:      FROMdB_LOOKUP[i>>FROMdB_SHIFT]*FROMdB2_LOOKUP[i&FROMdB2_MASK]);
16295: }
16295: 
16295: #endif
16295: 
16295: #ifdef INT_LOOKUP
16295: /* interpolated 1./sqrt(p) where .5 <= a < 1. (.100000... to .111111...) in
16295:    16.16 format
16295: 
16295:    returns in m.8 format */
16295: long vorbis_invsqlook_i(long a,long e){
16295:   long i=(a&0x7fff)>>(INVSQ_LOOKUP_I_SHIFT-1);
16295:   long d=(a&INVSQ_LOOKUP_I_MASK)<<(16-INVSQ_LOOKUP_I_SHIFT); /*  0.16 */
16295:   long val=INVSQ_LOOKUP_I[i]-                                /*  1.16 */
16295:     (((INVSQ_LOOKUP_I[i]-INVSQ_LOOKUP_I[i+1])*               /*  0.16 */
16295:       d)>>16);                                               /* result 1.16 */
16295: 
16295:   e+=32;
16295:   if(e&1)val=(val*5792)>>13; /* multiply val by 1/sqrt(2) */
16295:   e=(e>>1)-8;
16295: 
16295:   return(val>>e);
16295: }
16295: 
16295: /* interpolated lookup based fromdB function, domain -140dB to 0dB only */
16295: /* a is in n.12 format */
16295: float vorbis_fromdBlook_i(long a){
16295:   int i=(-a)>>(12-FROMdB2_SHIFT);
16295:   return (i<0)?1.f:
16295:     ((i>=(FROMdB_LOOKUP_SZ<<FROMdB_SHIFT))?0.f:
16295:      FROMdB_LOOKUP[i>>FROMdB_SHIFT]*FROMdB2_LOOKUP[i&FROMdB2_MASK]);
16295: }
16295: 
16295: /* interpolated lookup based cos function, domain 0 to PI only */
16295: /* a is in 0.16 format, where 0==0, 2^^16-1==PI, return 0.14 */
16295: long vorbis_coslook_i(long a){
16295:   int i=a>>COS_LOOKUP_I_SHIFT;
16295:   int d=a&COS_LOOKUP_I_MASK;
16295:   return COS_LOOKUP_I[i]- ((d*(COS_LOOKUP_I[i]-COS_LOOKUP_I[i+1]))>>
16295:                            COS_LOOKUP_I_SHIFT);
16295: }
16295: 
16295: #endif
