89714: <?xml version="1.0"?>
89714: <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
89714: <?xml-stylesheet type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"?>
89714: <?xml-stylesheet type="text/css" href="test_bug708874.css"?>
89714: <!--
89714: https://bugzilla.mozilla.org/show_bug.cgi?id=708874
89714: -->
89714: <window title="Mozilla Bug 708874"
89714:         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
89714:         onload="RunTests();">
89714:   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
89714:   <script type="application/javascript">
89714:   <![CDATA[
89714: 
89714: /** Test for Bug 708874 - API for locking pseudo-class state of an element **/
89714: 
89714: var DOMUtils = Components.classes["@mozilla.org/inspector/dom-utils;1"]
89714:                .getService(Components.interfaces.inIDOMUtils);
89714: var DOMWindowUtils = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
89714:                      .getInterface(Components.interfaces.nsIDOMWindowUtils);
89714: 
89714: var defaultColor = "rgb(0, 0, 0)";
89714: var disabledColor = "rgb(40, 0, 0)";
89714: 
89714: function RunTests() {
89714:   testLockEnabled();
89714:   testLockDisabled();
89714:   testVisited();
89714:   testMultiple();
89714:   testInvalid();
98128:   testNotElement();
89714: }
89714: 
89714: function testLockEnabled() {
89714:   var button = document.getElementById("test-button");
89714: 
89714:   /* starting state is enabled */
89714:   button.removeAttribute("disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), false,
89714:      "doesn't have lock at start");
89714: 
89714:   is(window.getComputedStyle(button).color, defaultColor,
89714:      "color is default color before locking on");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), false,
89714:      "doesn't match selector at start");
89714: 
89714:   /* lock */
89714:   DOMUtils.addPseudoClassLock(button, ":disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), true,
89714:      "hasPseudoClassLock is true after locking");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style applied after adding lock");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:      "matches selector after adding lock");
89714: 
89714:   /* change state to disabled */
89714:   button.setAttribute("disabled", "disabled");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style still applied after really disabling");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:     "matches selector after adding lock");
89714: 
89714:   /* remove lock */
89714:   DOMUtils.removePseudoClassLock(button, ":disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), false,
89714:      "hasPseudoClassLock is false after removing on lock");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style still applied after removing lock");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:      "matches selector after removing lock");
89714: 
89714:   /* change state to enabled */
89714:   button.removeAttribute("disabled");
89714: 
89714:   is(window.getComputedStyle(button).color, defaultColor,
89714:      "back to default style after un-disabling");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), false,
89714:     "doesn't match selector after enabling");
89714: }
89714: 
89714: 
89714: function testLockDisabled() {
89714:   var button = document.getElementById("test-button");
89714: 
89714:   /* starting state is disabled */
89714:   button.setAttribute("disabled", "disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), false,
89714:      "doesn't have lock at start");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      "color is :disabled color before locking");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:     "matches selector before locking");
89714: 
89714:   /* lock */
89714:   DOMUtils.addPseudoClassLock(button, ":disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), true,
89714:      "hasPseudoClassLock is true after locking");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style still applied after adding on lock");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:    "matches selector after locking");
89714: 
89714:   /* change state to enabled */
89714:   button.removeAttribute("disabled");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style applied after enabling");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:    "matches selector after enabling with lock on");
89714: 
89714:   /* remove lock */
89714:   DOMUtils.removePseudoClassLock(button, ":disabled");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(button, ":disabled"), false,
89714:      "hasPseudoClassLock is false after removing on lock");
89714: 
89714:   is(window.getComputedStyle(button).color, defaultColor,
89714:      "default style applied after removing lock");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), false,
89714:      "doesn't match selector after unlocking");
89714: 
89714:   /* change state to disabled */
89714:   button.setAttribute("disabled", "disabled");
89714: 
89714:   is(window.getComputedStyle(button).color, disabledColor,
89714:      ":disabled style applied after disabling after unlocking");
89714: 
89714:   is(button.mozMatchesSelector(":disabled"), true,
89714:     "matches selector again after disabling");
89714: }
89714: 
89714: function testVisited() {
89714:   var link = document.getElementById("test-link");
89714:   var visitedColor = "rgb(20, 0, 0)";
89714:   var unvisitedColor = "rgb(30, 0, 0)";
89714: 
89714:   /* lock visited */
89714:   DOMUtils.addPseudoClassLock(link, ":visited");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(link, ":visited"), true,
89714:      "hasPseudoClassLock is true after adding lock");
89714: 
89714:   var color = DOMWindowUtils.getVisitedDependentComputedStyle(link,
89714:                 null, "color");
89714:   is(color, visitedColor, "color is :visited color after locking");
89714: 
89714:   /* lock unvisited */
89714:   DOMUtils.addPseudoClassLock(link, ":link");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(link, ":link"), true,
89714:      "hasPseudoClassLock is true after adding :link lock");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(link, ":visited"), false,
89714:      "hasPseudoClassLock is false for :visited after adding :link lock");
89714: 
89714:   var color = DOMWindowUtils.getVisitedDependentComputedStyle(link,
89714:                  null, "color");
89714:   is(color, unvisitedColor, "color is :link color after locking :link");
89714: 
89714:   /* lock visited back on */
89714:   DOMUtils.addPseudoClassLock(link, ":visited");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(link, ":visited"), true,
89714:     "hasPseudoClassLock is true after adding :visited lock");
89714: 
89714:   is(DOMUtils.hasPseudoClassLock(link, ":link"), false,
89714:     "hasPseudoClassLock is false for :link after adding :visited lock");
89714: 
89714:   var color = DOMWindowUtils.getVisitedDependentComputedStyle(link,
89714:                null, "color");
89714:   is(color, visitedColor, "color is :visited color after locking back on");
89714: }
89714: 
89714: function testMultiple() {
89714:   var div = document.getElementById("test-div");
89714: 
89714:   var styles = {
89714:     ":hover": {
89714:       property: "color",
89714:       value: "rgb(10, 0, 0)",
89714:       defaultValue: "rgb(0, 0, 0)"
89714:     },
89714:     ":active": {
89714:       property: "font-family",
89714:       value: "Arial",
89714:       defaultValue: "serif"
89714:     },
89714:     ":focus": {
89714:       property: "font-weight",
89714:       value: "800",
89714:       defaultValue: "400"
89714:     }
89714:   };
89714: 
89714:   for (var pseudo in styles) {
89714:     DOMUtils.addPseudoClassLock(div, pseudo);
89714:   }
89714: 
89714:   for (var pseudo in styles) {
89714:     is(DOMUtils.hasPseudoClassLock(div, pseudo), true,
89714:        "hasPseudoClassLock is true after locking");
89714: 
89714:     var style = styles[pseudo];
89714:     is(window.getComputedStyle(div).getPropertyValue(style.property),
89714:        style.value, "style for pseudo-class is applied after locking");
89714: 
89714:     is(div.mozMatchesSelector(pseudo), true,
89714:        "matches selector after locking");
89714:   }
89714: 
89714:   DOMUtils.clearPseudoClassLocks(div);
89714: 
89714:   for (var pseudo in styles) {
89714:     is(DOMUtils.hasPseudoClassLock(div, pseudo), false,
89714:        "hasPseudoClassLock is false after clearing");
89714: 
89714:     is(window.getComputedStyle(div).getPropertyValue(style.property),
89714:        style.defaultValue, "style is back to default after clearing");
89714: 
89714:     is(div.mozMatchesSelector(pseudo), false,
89714:       "doesn't match selector after unlocking");
89714:   }
89714: }
89714: 
89714: function testInvalid() {
89714:   var div = document.getElementById("test-div");
89714:   var pseudos = ["not a valid pseudo-class", ":moz-any-link", ":first-child"];
89714: 
89714:   for (var i = 0; i < pseudos.length; i++) {
89714:     var pseudo = pseudos[i];
89714: 
89714:     // basically make sure these don't crash the browser.
89714:     DOMUtils.addPseudoClassLock(div, pseudo);
89714: 
89714:     is(DOMUtils.hasPseudoClassLock(div, pseudo), false);
89714: 
89714:     DOMUtils.removePseudoClassLock(div, pseudo);
89714:   }
89714: }
89714: 
98128: function testNotElement() {
98128:   var values = [null, undefined, {}];
98128:   try {
98128:     for each (value in values); {
98128:       DOMUtils.hasPseudoClassLock(value, ":hover");
98128:       DOMUtils.addPseudoClassLock(value, ":hover");
98128:       DOMUtils.removePseudoClassLock(value, ":hover");
98128:       DOMUtils.clearPseudoClassLocks(value);
98128:     }
98128:   } catch(e) {
98128:     // just make sure we don't crash on non-elements
98128:   }
98128: }
89714:   ]]>
89714:   </script>
89714: 
89714:   <body xmlns="http://www.w3.org/1999/xhtml">
89714:     <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=708874"
89714:        target="_blank">Mozilla Bug 708874</a>
89714: 
89714:     <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=708874">
89714:       Mozilla Bug 708874 - API for locking pseudo-class state of an element
89714:     </a>
89714: 
89714:     <a id="test-link" href="http://notavisitedwebsite.com">
89714:       test link
89714:     </a>
89714: 
89714:     <div id="test-div">
89714:       test div
89714:     </div>
89714: 
89714:     <button id="test-button">
89714:       test button
89714:     </button>
89714:   </body>
89714: 
89714: </window>
