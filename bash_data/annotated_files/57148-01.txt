    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: Aaron Leventhal (aaronl@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsOuterDocAccessible.h"
41384: 
41384: #include "nsAccUtils.h"
43310: #include "nsDocAccessible.h"
41384: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsOuterDocAccessible
43310: ////////////////////////////////////////////////////////////////////////////////
    1: 
43504: nsOuterDocAccessible::
43504:   nsOuterDocAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsAccessibleWrap(aContent, aShell)
    1: {
    1: }
    1: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsISupports
43310: 
43310: NS_IMPL_ISUPPORTS_INHERITED0(nsOuterDocAccessible,
43310:                              nsAccessible)
43310: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsAccessible public (DON'T add methods here)
43310: 
52027: PRUint32
52027: nsOuterDocAccessible::NativeRole()
    1: {
52027:   return nsIAccessibleRole::ROLE_INTERNAL_FRAME;
    1: }
    1: 
21256: nsresult
21256: nsOuterDocAccessible::GetStateInternal(PRUint32 *aState, PRUint32 *aExtraState)
    1: {
21256:   nsresult rv = nsAccessible::GetStateInternal(aState, aExtraState);
21984:   NS_ENSURE_A11Y_SUCCESS(rv, rv);
21256: 
    1:   *aState &= ~nsIAccessibleStates::STATE_FOCUSABLE;
    1:   return NS_OK;
    1: }
    1: 
28197: nsresult
 6068: nsOuterDocAccessible::GetChildAtPoint(PRInt32 aX, PRInt32 aY,
28197:                                       PRBool aDeepestChild,
28197:                                       nsIAccessible **aChild)
 6068: {
28197:   PRInt32 docX = 0, docY = 0, docWidth = 0, docHeight = 0;
28197:   nsresult rv = GetBounds(&docX, &docY, &docWidth, &docHeight);
28197:   NS_ENSURE_SUCCESS(rv, rv);
 6068: 
28197:   if (aX < docX || aX >= docX + docWidth || aY < docY || aY >= docY + docHeight)
28197:     return NS_OK;
 6068: 
28197:   // Always return the inner doc as direct child accessible unless bounds
28197:   // outside of it.
19323:   nsCOMPtr<nsIAccessible> childAcc;
28197:   rv = GetFirstChild(getter_AddRefs(childAcc));
19323:   NS_ENSURE_SUCCESS(rv, rv);
19323: 
19323:   if (!childAcc)
19323:     return NS_OK;
19323: 
28197:   if (aDeepestChild)
28197:     return childAcc->GetDeepestChildAtPoint(aX, aY, aChild);
28197: 
28197:   NS_ADDREF(*aChild = childAcc);
28197:   return NS_OK;
19323: }
19323: 
13094: nsresult
13094: nsOuterDocAccessible::GetAttributesInternal(nsIPersistentProperties *aAttributes)
13094: {
13094:   nsAutoString tag;
13094:   aAttributes->GetStringProperty(NS_LITERAL_CSTRING("tag"), tag);
13094:   if (!tag.IsEmpty()) {
13094:     // We're overriding the ARIA attributes on an sub document, but we don't want to
13094:     // override the other attributes
13094:     return NS_OK;
13094:   }
13094:   return nsAccessible::GetAttributesInternal(aAttributes);
13094: }
15487: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsIAccessible
43310: 
15487: NS_IMETHODIMP
15487: nsOuterDocAccessible::GetNumActions(PRUint8 *aNumActions)
15487: {
15487:   NS_ENSURE_ARG_POINTER(aNumActions);
15487:   *aNumActions = 0;
15487: 
43310:   // Internal frame, which is the doc's parent, should not have a click action.
15487:   return NS_OK;
15487: }
15487: 
15487: NS_IMETHODIMP
15487: nsOuterDocAccessible::GetActionName(PRUint8 aIndex, nsAString& aName)
15487: {
15487:   aName.Truncate();
15487: 
15487:   return NS_ERROR_INVALID_ARG;
15487: }
15487: 
15487: NS_IMETHODIMP
15487: nsOuterDocAccessible::GetActionDescription(PRUint8 aIndex, nsAString& aDescription)
15487: {
15487:   aDescription.Truncate();
15487: 
15487:   return NS_ERROR_INVALID_ARG;
15487: }
15487: 
15487: NS_IMETHODIMP
15487: nsOuterDocAccessible::DoAction(PRUint8 aIndex)
15487: {
15487:   return NS_ERROR_INVALID_ARG;
15487: }
43310: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsAccessNode public
43310: 
43538: void
43310: nsOuterDocAccessible::Shutdown()
43310: {
43765:   // XXX: sometimes outerdoc accessible is shutdown because of layout style
43765:   // change however the presshell of underlying document isn't destroyed and
43765:   // the document doesn't get pagehide events. Shutdown underlying document if
43765:   // any to avoid hanging document accessible.
43765:   NS_LOG_ACCDOCDESTROY_MSG("A11y outerdoc shutdown")
43765:   NS_LOG_ACCDOCDESTROY_ACCADDRESS("outerdoc", this)
43765: 
43617:   nsAccessible *childAcc = mChildren.SafeElementAt(0, nsnull);
43617:   if (childAcc) {
43765:     NS_LOG_ACCDOCDESTROY("outerdoc's child document shutdown",
43765:                          childAcc->GetDocumentNode())
56639:     childAcc->Shutdown();
43617:   }
43617: 
43538:   nsAccessibleWrap::Shutdown();
43310: }
43310: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsAccessible public
43310: 
43310: void
43310: nsOuterDocAccessible::InvalidateChildren()
43310: {
43617:   // Do not invalidate children because nsAccDocManager is responsible for
43617:   // document accessible lifetime when DOM document is created or destroyed. If
43617:   // DOM document isn't destroyed but its presshell is destroyed (for example,
43617:   // when DOM node of outerdoc accessible is hidden), then outerdoc accessible
43617:   // notifies nsAccDocManager about this. If presshell is created for existing
43617:   // DOM document (for example when DOM node of outerdoc accessible is shown)
43617:   // then allow nsAccDocManager to handle this case since the document
43617:   // accessible is created and appended as a child when it's requested.
43310: 
50622:   mChildrenFlags = eChildrenUninitialized;
43310: }
43310: 
43310: PRBool
43310: nsOuterDocAccessible::AppendChild(nsAccessible *aAccessible)
43310: {
57148:   // We keep showing the old document for a bit after creating the new one,
57148:   // and while building the new DOM and frame tree. That's done on purpose
57148:   // to avoid weird flashes of default background color.
57148:   // The old viewer will be destroyed after the new one is created.
57148:   // For a11y, it should be safe to shut down the old document now.
57148:   if (mChildren.Length())
57148:     mChildren[0]->Shutdown();
43310: 
47105:   if (!nsAccessible::AppendChild(aAccessible))
43310:     return PR_FALSE;
43310: 
43765:   NS_LOG_ACCDOCCREATE("append document to outerdoc",
43765:                       aAccessible->GetDocumentNode())
43765:   NS_LOG_ACCDOCCREATE_ACCADDRESS("outerdoc", this)
43765: 
43310:   return PR_TRUE;
43310: }
43310: 
43310: PRBool
43310: nsOuterDocAccessible::RemoveChild(nsAccessible *aAccessible)
43310: {
43310:   nsAccessible *child = mChildren.SafeElementAt(0, nsnull);
43310:   if (child != aAccessible) {
43310:     NS_ERROR("Wrong child to remove!");
43310:     return PR_FALSE;
43310:   }
43310: 
43765:   NS_LOG_ACCDOCDESTROY("remove document from outerdoc",
43765:                        child->GetDocumentNode())
43765:   NS_LOG_ACCDOCDESTROY_ACCADDRESS("outerdoc", this)
43765: 
47105:   PRBool wasRemoved = nsAccessible::RemoveChild(child);
43765: 
43310:   NS_ASSERTION(!mChildren.Length(),
43310:                "This child document of outerdoc accessible wasn't removed!");
43310: 
47105:   return wasRemoved;
43310: }
43310: 
43765: 
43310: ////////////////////////////////////////////////////////////////////////////////
43310: // nsAccessible protected
43310: 
43310: void
43310: nsOuterDocAccessible::CacheChildren()
43310: {
43310:   // Request document accessible for the content document to make sure it's
43310:   // created because once it's created it appends itself as a child.
43504:   nsIDocument *outerDoc = mContent->GetCurrentDoc();
43310:   if (!outerDoc)
43310:     return;
43310: 
43504:   nsIDocument *innerDoc = outerDoc->GetSubDocumentFor(mContent);
43504:   if (!innerDoc)
43310:     return;
43310: 
43310:   nsDocAccessible *docAcc = GetAccService()->GetDocAccessible(innerDoc);
43310:   NS_ASSERTION(docAcc && docAcc->GetParent() == this,
43310:                "Document accessible isn't a child of outerdoc accessible!");
43310: }
