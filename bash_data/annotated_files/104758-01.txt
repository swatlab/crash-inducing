 91390: <?xml version="1.0"?>
 91390: <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
 91390: <?xml-stylesheet type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"?>
104758: <window title="Memory reporter"
 91390:         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 91390:   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
 91390: 
 91390:   <!-- This file tests (in a rough fashion) whether the memory reporters are
 91390:        producing sensible results.  test_aboutmemory.xul tests the
 91390:        presentation of memory reports in about:memory. -->
 91390: 
 91390:   <!-- test results are displayed in the html:body -->
104758:   <body xmlns="http://www.w3.org/1999/xhtml">
104758:   <!-- In bug 773533, <marquee> elements crashed the JS memory reporter -->
104758:   <marquee>Marquee</marquee>
104758:   </body>
 91390: 
 91390:   <!-- test code goes here -->
 91390:   <script type="application/javascript">
 91390:   <![CDATA[
 91390: 
 91390:   // Nb: this test is all JS and so should be done with an xpcshell test,
 91390:   // but bug 671753 is preventing the memory-reporter-manager from being
 91390:   // accessed from xpcshell.
 91390: 
 91390:   "use strict";
 91390: 
 91390:   const Cc = Components.classes;
 91390:   const Ci = Components.interfaces;
 96984:   const Cr = Components.results;
 91390: 
 91390:   const kUnknown = -1;
 91390:   const NONHEAP = Ci.nsIMemoryReporter.KIND_NONHEAP;
 91390:   const HEAP    = Ci.nsIMemoryReporter.KIND_HEAP;
 91390:   const OTHER   = Ci.nsIMemoryReporter.KIND_OTHER;
 91390: 
 91390:   const BYTES = Ci.nsIMemoryReporter.UNITS_BYTES;
 91390:   const COUNT = Ci.nsIMemoryReporter.UNITS_COUNT;
 91390:   const COUNT_CUMULATIVE = Ci.nsIMemoryReporter.UNITS_COUNT_CUMULATIVE;
 91390:   const PERCENTAGE = Ci.nsIMemoryReporter.UNITS_PERCENTAGE;
 91390: 
 91390:   let explicitAmounts = [];
 91390:   let vsizeAmounts = [];
 91390:   let residentAmounts = [];
 91390:   let jsGcHeapAmounts = [];
 91390:   let heapAllocatedAmounts = [];
 91390:   let storageSqliteAmounts = [];
 91390: 
103785:   let areJsNonWindowCompartmentsPresent = false;
103785:   let areWindowObjectsJsCompartmentsPresent = false;
 91390:   let isSandboxLocationShown = false;
 91390:   let isPlacesPresent = false;
 91390:   let isImagesPresent = false;
 91390:   let isXptiWorkingSetPresent = false;
 91390:   let isAtomTablePresent = false;
 91390: 
 91390:   let mySandbox = Components.utils.Sandbox(document.nodePrincipal,
 91390:                     { sandboxName: "this-is-a-sandbox-name" });
 91390: 
 91390:   function handleReport(aProcess, aPath, aKind, aUnits, aAmount, aDescription)
 91390:   {
 91390:     // Record the values of some notable reporters.
 91390:     if (aPath === "explicit") {
 91390:       explicitAmounts.push(aAmount);
 91390:     } else if (aPath === "vsize") {
 91390:       vsizeAmounts.push(aAmount);
 91390:     } else if (aPath === "resident") {
 91390:       residentAmounts.push(aAmount);
102944:     } else if (aPath === "js-main-runtime-gc-heap-committed/used/gc-things") {
 91390:       jsGcHeapAmounts.push(aAmount); 
 91390:     } else if (aPath === "heap-allocated") {
 91390:       heapAllocatedAmounts.push(aAmount);
 91390:     } else if (aPath === "storage-sqlite") {
 91390:       storageSqliteAmounts.push(aAmount);
 91390: 
 91390:     // Check the presence of some other notable reporters.
103785:     } else if (aPath.search(/^explicit\/js-non-window\/.*compartment\(/) >= 0) {
103785:       areJsNonWindowCompartmentsPresent = true;
103785:     } else if (aPath.search(/^explicit\/window-objects\/top\(.*\/js\/compartment\(/) >= 0) {
103785:       areWindowObjectsJsCompartmentsPresent = true;
 91390:     } else if (aPath.search(/^explicit\/storage\/sqlite\/places.sqlite/) >= 0) {
 91390:       isPlacesPresent = true;
 91390:     } else if (aPath.search(/^explicit\/images/) >= 0) {
 91390:       isImagesPresent = true;
 91390:     } else if (aPath.search(/^explicit\/xpti-working-set$/) >= 0) {
 91390:       isXptiWorkingSetPresent = true;
102872:     } else if (aPath.search(/^explicit\/atom-tables$/) >= 0) {
 91390:       isAtomTablePresent = true;
102234:     } else if (/\[System Principal\].*this-is-a-sandbox-name/.test(aPath)) {
 91390:       // A system compartment with a location (such as a sandbox) should
 91390:       // show that location.
 91390:       isSandboxLocationShown = true;
 91390:     }
 91390:   }
 91390: 
 91390:   let mgr = Cc["@mozilla.org/memory-reporter-manager;1"].
 91390:             getService(Ci.nsIMemoryReporterManager);
 91390: 
 91390:   // Access mgr.explicit and mgr.resident just to make sure they don't crash.
 91390:   // We can't check their actual values because they're non-deterministic.
 96984:   //
 96984:   // Nb: mgr.explicit will throw NS_ERROR_NOT_AVAILABLE if this is a
 96984:   // --enable-trace-malloc build.  Allow for that exception, but *only* that
 96984:   // exception.
 96984:   let dummy;
 96984:   let haveExplicit = true;
 96984:   try {
 96984:     dummy = mgr.explicit;
 96984:   } catch (ex) {
 96984:     is(ex.result, Cr.NS_ERROR_NOT_AVAILABLE, "mgr.explicit exception");
 96984:     haveExplicit = false;
 96984:   }
 91390:   dummy = mgr.resident;
 91390: 
 91390:   let e = mgr.enumerateReporters();
 91390:   while (e.hasMoreElements()) {
 91390:     let r = e.getNext().QueryInterface(Ci.nsIMemoryReporter);
 91390:     handleReport(r.process, r.path, r.kind, r.units, r.amount, r.description);
 91390:   }
 91390:   e = mgr.enumerateMultiReporters();
 91390:   while (e.hasMoreElements()) {
 91390:     let r = e.getNext().QueryInterface(Ci.nsIMemoryMultiReporter);
 91390:     r.collectReports(handleReport, null);
 91390: 
 91390:     // Access |name| and |explicitNonHeap| to make sure they don't crash or
 91390:     // assert.
 91390:     dummy = r.name;
 91390:     dummy = r.explicitNonHeap;
 91390:   }
 91390: 
 91390:   function checkSpecialReport(aName, aAmounts)
 91390:   {
101830:     ok(aAmounts.length == 1, aName + " has " + aAmounts.length + " report");
 91390:     let n = aAmounts[0];
 91390:     // Check the size is reasonable -- i.e. not ridiculously large or small.
 91390:     ok(n === kUnknown || (100 * 1000 <= n && n <= 10 * 1000 * 1000 * 1000),
 91390:        aName + "'s size is reasonable");
 91390:   }
 91390: 
 96984:   // If mgr.explicit failed, we won't have "heap-allocated" either.
 96984:   if (haveExplicit) {
 91390:     checkSpecialReport("explicit",       explicitAmounts);
 96984:     checkSpecialReport("heap-allocated", heapAllocatedAmounts);
 96984:   }
 91390:   checkSpecialReport("vsize",          vsizeAmounts);
 91390:   checkSpecialReport("resident",       residentAmounts);
102944:   checkSpecialReport("js-main-runtime-gc-heap-committed/used/gc-things", jsGcHeapAmounts);
 91390:   checkSpecialReport("storage-sqlite", storageSqliteAmounts);
 91390: 
103785:   ok(areJsNonWindowCompartmentsPresent,     "js-non-window compartments are present");
103785:   ok(areWindowObjectsJsCompartmentsPresent, "window-objects/.../js compartments are present");
 91390:   ok(isSandboxLocationShown,                "sandbox locations are present");
 91390:   ok(isPlacesPresent,                       "places is present");
 91390:   ok(isImagesPresent,                       "images is present");
 91390:   ok(isXptiWorkingSetPresent,               "xpti-working-set is present");
 91390:   ok(isAtomTablePresent,                    "atom-table is present");
 91390: 
 91390:   ]]>
 91390:   </script>
 91390: </window>
 91390: 
