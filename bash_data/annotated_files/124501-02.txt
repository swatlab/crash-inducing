 80212: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 80212:  * vim: set ts=8 sw=4 et tw=78:
 80212:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 80212: 
 80212: #ifndef jsgc_statistics_h___
 80212: #define jsgc_statistics_h___
 80212: 
 80212: #include <string.h>
 80212: 
 88182: #include "jsfriendapi.h"
 80212: #include "jspubtd.h"
 80212: #include "jsutil.h"
 80212: 
 80212: struct JSCompartment;
 80212: 
 80212: namespace js {
 80212: namespace gcstats {
 80212: 
 80212: enum Phase {
 93368:     PHASE_GC_BEGIN,
 93368:     PHASE_WAIT_BACKGROUND_THREAD,
 93368:     PHASE_PURGE,
 80212:     PHASE_MARK,
103939:     PHASE_MARK_DISCARD_CODE,
 90410:     PHASE_MARK_ROOTS,
 98147:     PHASE_MARK_TYPES,
 90410:     PHASE_MARK_DELAYED,
 93368:     PHASE_FINALIZE_START,
 80212:     PHASE_SWEEP,
124080:     PHASE_SWEEP_MARK_INCOMING_BLACK,
124080:     PHASE_SWEEP_MARK_WEAK,
124080:     PHASE_SWEEP_MARK_INCOMING_GRAY,
124080:     PHASE_SWEEP_MARK_GRAY,
124080:     PHASE_SWEEP_MARK_GRAY_WEAK,
124501:     PHASE_SWEEP_FIND_BLACK_GRAY,
103939:     PHASE_SWEEP_ATOMS,
 93368:     PHASE_SWEEP_COMPARTMENTS,
103939:     PHASE_SWEEP_TABLES,
124080:     PHASE_SWEEP_TABLES_WRAPPER,
124080:     PHASE_SWEEP_TABLES_BASE_SHAPE,
124080:     PHASE_SWEEP_TABLES_INITIAL_SHAPE,
124080:     PHASE_SWEEP_TABLES_TYPE_OBJECT,
124080:     PHASE_SWEEP_TABLES_BREAKPOINT,
124080:     PHASE_SWEEP_TABLES_REGEXP,
 80212:     PHASE_SWEEP_OBJECT,
 80212:     PHASE_SWEEP_STRING,
 80212:     PHASE_SWEEP_SCRIPT,
 80212:     PHASE_SWEEP_SHAPE,
112135:     PHASE_SWEEP_IONCODE,
103939:     PHASE_SWEEP_DISCARD_CODE,
 82095:     PHASE_DISCARD_ANALYSIS,
 93368:     PHASE_DISCARD_TI,
103939:     PHASE_FREE_TI_ARENA,
 93368:     PHASE_SWEEP_TYPES,
 93368:     PHASE_CLEAR_SCRIPT_ANALYSIS,
 93368:     PHASE_FINALIZE_END,
 80212:     PHASE_DESTROY,
 93368:     PHASE_GC_END,
 80212: 
 80212:     PHASE_LIMIT
 80212: };
 80212: 
 80212: enum Stat {
 80212:     STAT_NEW_CHUNK,
 80212:     STAT_DESTROY_CHUNK,
 80212: 
 80212:     STAT_LIMIT
 80212: };
 80212: 
 92707: class StatisticsSerializer;
 90410: 
 80212: struct Statistics {
 80212:     Statistics(JSRuntime *rt);
 80212:     ~Statistics();
 80212: 
 80212:     void beginPhase(Phase phase);
 80212:     void endPhase(Phase phase);
 80212: 
 94869:     void beginSlice(int collectedCount, int compartmentCount, gcreason::Reason reason);
 90410:     void endSlice();
 90410: 
 91266:     void reset(const char *reason) { slices.back().resetReason = reason; }
 91266:     void nonincremental(const char *reason) { nonincrementalReason = reason; }
 90410: 
 80212:     void count(Stat s) {
 80212:         JS_ASSERT(s < STAT_LIMIT);
 80212:         counts[s]++;
 80212:     }
 80212: 
108692:     int64_t beginSCC();
108692:     void endSCC(unsigned scc, int64_t start);
108692: 
 92707:     jschar *formatMessage();
 93384:     jschar *formatJSON(uint64_t timestamp);
 92707: 
 80212:   private:
 80212:     JSRuntime *runtime;
 80212: 
 90410:     int64_t startupTime;
 80212: 
 80212:     FILE *fp;
 80212:     bool fullFormat;
 80212: 
 97528:     /*
 97528:      * GCs can't really nest, but a second GC can be triggered from within the
 97528:      * JSGC_END callback.
 97528:      */
 97528:     int gcDepth;
 97528: 
 94869:     int collectedCount;
 94869:     int compartmentCount;
 91266:     const char *nonincrementalReason;
 80212: 
 90410:     struct SliceData {
103939:         SliceData(gcreason::Reason reason, int64_t start, size_t startFaults)
103939:           : reason(reason), resetReason(NULL), start(start), startFaults(startFaults)
 90410:         {
 90410:             PodArrayZero(phaseTimes);
 90410:         }
 90410: 
 90410:         gcreason::Reason reason;
 91266:         const char *resetReason;
 90410:         int64_t start, end;
103939:         size_t startFaults, endFaults;
 90410:         int64_t phaseTimes[PHASE_LIMIT];
 90410: 
 90410:         int64_t duration() const { return end - start; }
 90410:     };
 90410: 
 90410:     Vector<SliceData, 8, SystemAllocPolicy> slices;
 90410: 
 90410:     /* Most recent time when the given phase started. */
 97944:     int64_t phaseStartTimes[PHASE_LIMIT];
 90410: 
 90410:     /* Total time in a given phase for this GC. */
 90410:     int64_t phaseTimes[PHASE_LIMIT];
 90410: 
 90410:     /* Total time in a given phase over all GCs. */
 90410:     int64_t phaseTotals[PHASE_LIMIT];
 90410: 
 90410:     /* Number of events of this type for this GC. */
 80212:     unsigned int counts[STAT_LIMIT];
 80212: 
 93368:     /* Allocated space before the GC started. */
 93368:     size_t preBytes;
 93368: 
108692:     /* Sweep times for SCCs of compartments. */
108692:     Vector<int64_t, 0, SystemAllocPolicy> sccTimes;
108692: 
 90410:     void beginGC();
 90410:     void endGC();
 90410: 
108222:     void gcDuration(int64_t *total, int64_t *maxPause);
108692:     void sccDurations(int64_t *total, int64_t *maxPause);
 80212:     void printStats();
 93384:     bool formatData(StatisticsSerializer &ss, uint64_t timestamp);
 82095: 
 90410:     double computeMMU(int64_t resolution);
 82095: };
 82095: 
 90410: struct AutoGCSlice {
 94869:     AutoGCSlice(Statistics &stats, int collectedCount, int compartmentCount, gcreason::Reason reason
 88182:                 JS_GUARD_OBJECT_NOTIFIER_PARAM)
 94869:       : stats(stats)
 94869:     {
 94869:         JS_GUARD_OBJECT_NOTIFIER_INIT;
 94869:         stats.beginSlice(collectedCount, compartmentCount, reason);
 94869:     }
 90410:     ~AutoGCSlice() { stats.endSlice(); }
 80212: 
 80212:     Statistics &stats;
 80212:     JS_DECL_USE_GUARD_OBJECT_NOTIFIER
 80212: };
 80212: 
 80212: struct AutoPhase {
 80212:     AutoPhase(Statistics &stats, Phase phase JS_GUARD_OBJECT_NOTIFIER_PARAM)
 80212:       : stats(stats), phase(phase) { JS_GUARD_OBJECT_NOTIFIER_INIT; stats.beginPhase(phase); }
 80212:     ~AutoPhase() { stats.endPhase(phase); }
 80212: 
 80212:     Statistics &stats;
 80212:     Phase phase;
 80212:     JS_DECL_USE_GUARD_OBJECT_NOTIFIER
 80212: };
 80212: 
108692: struct AutoSCC {
108692:     AutoSCC(Statistics &stats, unsigned scc JS_GUARD_OBJECT_NOTIFIER_PARAM)
108692:       : stats(stats), scc(scc) { JS_GUARD_OBJECT_NOTIFIER_INIT; start = stats.beginSCC(); }
108692:     ~AutoSCC() { stats.endSCC(scc, start); }
108692: 
108692:     Statistics &stats;
108692:     unsigned scc;
108692:     int64_t start;
108692:     JS_DECL_USE_GUARD_OBJECT_NOTIFIER
108692: };
108692: 
 80212: } /* namespace gcstats */
 80212: } /* namespace js */
 80212: 
 80212: #endif /* jsgc_statistics_h___ */
