40362: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
40362:  * vim: set ts=8 sw=4 et tw=98:
40362:  *
40362:  * ***** BEGIN LICENSE BLOCK *****
40359:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
40359:  *
40359:  * The contents of this file are subject to the Mozilla Public License Version
40359:  * 1.1 (the "License"); you may not use this file except in compliance with
40359:  * the License. You may obtain a copy of the License at
40359:  * http://www.mozilla.org/MPL/
40359:  *
40359:  * Software distributed under the License is distributed on an "AS IS" basis,
40359:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
40359:  * for the specific language governing rights and limitations under the
40359:  * License.
40359:  *
40359:  * The Original Code is Mozilla Communicator client code, released
40359:  * March 31, 1998.
40359:  *
40359:  * The Initial Developer of the Original Code is
40359:  * Netscape Communications Corporation.
40359:  * Portions created by the Initial Developer are Copyright (C) 1998
40359:  * the Initial Developer. All Rights Reserved.
40359:  *
40359:  * Contributor(s):
40359:  *
40359:  * Alternatively, the contents of this file may be used under the terms of
40359:  * either the GNU General Public License Version 2 or later (the "GPL"), or
40359:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
40359:  * in which case the provisions of the GPL or the LGPL are applicable instead
40359:  * of those above. If you wish to allow use of your version of this file only
40359:  * under the terms of either the GPL or the LGPL, and not to allow others to
40359:  * use your version of this file under the terms of the MPL, indicate your
40359:  * decision by deleting the provisions above and replace them with the notice
40359:  * and other provisions required by the GPL or the LGPL. If you do not delete
40359:  * the provisions above, a recipient may use your version of this file under
40359:  * the terms of any one of the MPL, the GPL or the LGPL.
40359:  *
40359:  * ***** END LICENSE BLOCK ***** */
40359: 
40359: #ifndef jspropertycache_h___
40359: #define jspropertycache_h___
40359: 
40359: #include "jsapi.h"
40359: #include "jsprvtd.h"
40359: #include "jstypes.h"
40359: 
40362: namespace js {
40359: 
40359: /*
40359:  * Property cache with structurally typed capabilities for invalidation, for
40359:  * polymorphic callsite method/get/set speedups.  For details, see
40359:  * <https://developer.mozilla.org/en/SpiderMonkey/Internals/Property_cache>.
40359:  */
40360: 
40360: /* Property cache value capabilities. */
40360: enum {
40360:     PCVCAP_PROTOBITS = 4,
40360:     PCVCAP_PROTOSIZE = JS_BIT(PCVCAP_PROTOBITS),
40360:     PCVCAP_PROTOMASK = JS_BITMASK(PCVCAP_PROTOBITS),
40359: 
40360:     PCVCAP_SCOPEBITS = 4,
40360:     PCVCAP_SCOPESIZE = JS_BIT(PCVCAP_SCOPEBITS),
40360:     PCVCAP_SCOPEMASK = JS_BITMASK(PCVCAP_SCOPEBITS),
40359: 
40360:     PCVCAP_TAGBITS = PCVCAP_PROTOBITS + PCVCAP_SCOPEBITS,
40360:     PCVCAP_TAGMASK = JS_BITMASK(PCVCAP_TAGBITS)
40360: };
40359: 
40360: const uint32 SHAPE_OVERFLOW_BIT = JS_BIT(32 - PCVCAP_TAGBITS);
40359: 
40374: /*
40374:  * Property cache value. This is simply a tagged union:
52503:  *    PCVal = (JSObject * | uint32 | js::Shape *).
40374:  * It is the type of PropertyCacheEntry::vword and combines with the tag bits
40374:  * of PropertyCacheEntry::vcap to tell how to get or set the property, once a
40374:  * property cache hit is validated.
40374:  *
40374:  * PropertyCache::purge depends on the bit-pattern of a null PCVal being 0.
40374:  */
40374: class PCVal
40374: {
40374:   private:
40374:     enum {
40374:         OBJECT = 0,
40374:         SLOT = 1,
52503:         SHAPE = 2,
40374:         TAG = 3
40374:     };
40374: 
40374:     jsuword v;
40374: 
40374:   public:
40374:     bool isNull() const { return v == 0; }
40374:     void setNull() { v = 0; }
40374: 
48470:     bool isFunObj() const { return (v & TAG) == OBJECT; }
52503:     JSObject &toFunObj() const {
52503:         JS_ASSERT(isFunObj());
52503:         return *reinterpret_cast<JSObject *>(v);
52503:     }
52503:     void setFunObj(JSObject &obj) {
52503:         v = reinterpret_cast<jsuword>(&obj);
52503:     }
40374: 
40374:     bool isSlot() const { return v & SLOT; }
40374:     uint32 toSlot() const { JS_ASSERT(isSlot()); return uint32(v) >> 1; }
40374:     void setSlot(uint32 slot) { v = (jsuword(slot) << 1) | SLOT; }
40374: 
52503:     bool isShape() const { return (v & TAG) == SHAPE; }
52503:     const js::Shape *toShape() const {
52503:         JS_ASSERT(isShape());
52503:         return reinterpret_cast<js::Shape *>(v & ~TAG);
52503:     }
52503:     void setShape(const js::Shape *shape) {
52503:         JS_ASSERT(shape);
52503:         v = reinterpret_cast<jsuword>(shape) | SHAPE;
52503:     }
40374: };
40374: 
40362: struct PropertyCacheEntry
40360: {
40359:     jsbytecode          *kpc;           /* pc of cache-testing bytecode */
40359:     jsuword             kshape;         /* shape of direct (key) object */
40359:     jsuword             vcap;           /* value capability, see above */
40374:     PCVal               vword;          /* value word, see PCVal above */
40359: 
40362:     bool adding() const { return vcapTag() == 0 && kshape != vshape(); }
40362:     bool directHit() const { return vcapTag() == 0 && kshape == vshape(); }
40362: 
40362:     jsuword vcapTag() const { return vcap & PCVCAP_TAGMASK; }
40362:     uint32 vshape() const { return uint32(vcap >> PCVCAP_TAGBITS); }
40362:     jsuword scopeIndex() const { return (vcap >> PCVCAP_PROTOBITS) & PCVCAP_SCOPEMASK; }
40362:     jsuword protoIndex() const { return vcap & PCVCAP_PROTOMASK; }
40362: 
40362:     void assign(jsbytecode *kpc, jsuword kshape, jsuword vshape,
40374:                 uintN scopeIndex, uintN protoIndex, PCVal vword) {
40362:         JS_ASSERT(kshape < SHAPE_OVERFLOW_BIT);
40362:         JS_ASSERT(vshape < SHAPE_OVERFLOW_BIT);
40362:         JS_ASSERT(scopeIndex <= PCVCAP_SCOPEMASK);
40362:         JS_ASSERT(protoIndex <= PCVCAP_PROTOMASK);
40362: 
40362:         this->kpc = kpc;
40362:         this->kshape = kshape;
40362:         this->vcap = (vshape << PCVCAP_TAGBITS) | (scopeIndex << PCVCAP_PROTOBITS) | protoIndex;
40362:         this->vword = vword;
40359:     }
40359: };
40359: 
40359: /*
40362:  * Special value for functions returning PropertyCacheEntry * to distinguish
40359:  * between failure and no no-cache-fill cases.
40359:  */
40362: #define JS_NO_PROP_CACHE_FILL ((js::PropertyCacheEntry *) NULL + 1)
40359: 
40359: #if defined DEBUG_brendan || defined DEBUG_brendaneich
40359: #define JS_PROPERTY_CACHE_METERING 1
40359: #endif
40359: 
40391: class PropertyCache
40362: {
40391:   private:
40362:     enum {
40362:         SIZE_LOG2 = 12,
40362:         SIZE = JS_BIT(SIZE_LOG2),
40362:         MASK = JS_BITMASK(SIZE_LOG2)
40362:     };
40362: 
40362:     PropertyCacheEntry  table[SIZE];
40359:     JSBool              empty;
40359: #ifdef JS_PROPERTY_CACHE_METERING
40391:   public:
40362:     PropertyCacheEntry  *pctestentry;   /* entry of the last PC-based test */
40359:     uint32              fills;          /* number of cache entry fills */
40359:     uint32              nofills;        /* couldn't fill (e.g. default get) */
40359:     uint32              rofills;        /* set on read-only prop can't fill */
40359:     uint32              disfills;       /* fill attempts on disabled cache */
40359:     uint32              oddfills;       /* fill attempt after setter deleted */
53842:     uint32              add2dictfills;  /* fill attempt on dictionary object */
40359:     uint32              modfills;       /* fill that rehashed to a new entry */
40359:     uint32              brandfills;     /* scope brandings to type structural
40359:                                            method fills */
40359:     uint32              noprotos;       /* resolve-returned non-proto pobj */
40359:     uint32              longchains;     /* overlong scope and/or proto chain */
40359:     uint32              recycles;       /* cache entries recycled by fills */
40359:     uint32              tests;          /* cache probes */
40359:     uint32              pchits;         /* fast-path polymorphic op hits */
40359:     uint32              protopchits;    /* pchits hitting immediate prototype */
40359:     uint32              initests;       /* cache probes from JSOP_INITPROP */
40359:     uint32              inipchits;      /* init'ing next property pchit case */
40359:     uint32              inipcmisses;    /* init'ing next property pc misses */
40359:     uint32              settests;       /* cache probes from JOF_SET opcodes */
40359:     uint32              addpchits;      /* adding next property pchit case */
40359:     uint32              setpchits;      /* setting existing property pchit */
40359:     uint32              setpcmisses;    /* setting/adding property pc misses */
40359:     uint32              setmisses;      /* JSOP_SET{NAME,PROP} total misses */
40359:     uint32              kpcmisses;      /* slow-path key id == atom misses */
40359:     uint32              kshapemisses;   /* slow-path key object misses */
40359:     uint32              vcapmisses;     /* value capability misses */
40359:     uint32              misses;         /* cache misses */
40359:     uint32              flushes;        /* cache flushes */
40359:     uint32              pcpurges;       /* shadowing purges on proto chain */
40391:   private:
40359: # define PCMETER(x)     x
40359: #else
40359: # define PCMETER(x)     ((void)0)
40359: #endif
40362: 
40362:     /*
40362:      * Add kshape rather than xor it to avoid collisions between nearby bytecode
40362:      * that are evolving an object by setting successive properties, incrementing
52503:      * the object's shape on each set.
40362:      */
40362:     static inline jsuword
40362:     hash(jsbytecode *pc, jsuword kshape)
40362:     {
40362:         return ((((jsuword(pc) >> SIZE_LOG2) ^ jsuword(pc)) + kshape) & MASK);
40362:     }
40362: 
40362:     static inline bool matchShape(JSContext *cx, JSObject *obj, uint32 shape);
40362: 
40391:     JS_REQUIRES_STACK JSAtom *fullTest(JSContext *cx, jsbytecode *pc, JSObject **objp,
40391:                                        JSObject **pobjp, PropertyCacheEntry *entry);
40391: 
40391: #ifdef DEBUG
40391:     void assertEmpty();
40391: #else
40391:     inline void assertEmpty() {}
40391: #endif
40391: 
40391:   public:
40362:     JS_ALWAYS_INLINE JS_REQUIRES_STACK void test(JSContext *cx, jsbytecode *pc,
40362:                                                  JSObject *&obj, JSObject *&pobj,
40362:                                                  PropertyCacheEntry *&entry, JSAtom *&atom);
40362: 
40391:     /*
40391:      * Test for cached information about a property set on *objp at pc.
40391:      *
40391:      * On a fast hit, set *entryp to the entry and return true.
40391:      *
40391:      * On a slow hit, set *entryp to the entry, set *obj2p to the object that
40391:      * owns the property (either obj or a prototype), set *atomp to NULL, and
40391:      * return false.
40391:      *
40391:      * On a miss, set *atomp to the name of the property being set and return false.
40391:      */
40391:     JS_ALWAYS_INLINE bool testForSet(JSContext *cx, jsbytecode *pc, JSObject *obj,
40391:                                      PropertyCacheEntry **entryp, JSObject **obj2p,
40391:                                      JSAtom **atomp);
40391: 
40391:     /*
40391:      * Test for cached information about creating a new own data property on obj at pc.
40391:      *
52503:      * On a hit, set *shapep to an shape from the property tree describing the
40391:      * new property as well as all existing properties on obj and return
40391:      * true. Otherwise return false.
40391:      *
40391:      * Hit or miss, *entryp receives a pointer to the property cache entry.
40391:      */
52503:     JS_ALWAYS_INLINE bool testForInit(JSRuntime *rt, jsbytecode *pc, JSObject *obj,
52503:                                       const js::Shape **shapep, PropertyCacheEntry **entryp);
40362: 
40362:     /*
40362:      * Fill property cache entry for key cx->fp->pc, optimized value word
52503:      * computed from obj and shape, and entry capability forged from 24-bit
40847:      * obj->shape(), 4-bit scopeIndex, and 4-bit protoIndex.
40362:      *
40362:      * Return the filled cache entry or JS_NO_PROP_CACHE_FILL if caching was
40362:      * not possible.
40362:      */
40362:     JS_REQUIRES_STACK PropertyCacheEntry *fill(JSContext *cx, JSObject *obj, uintN scopeIndex,
40362:                                                uintN protoIndex, JSObject *pobj,
52503:                                                const js::Shape *shape, JSBool adding = false);
40362: 
40362:     void purge(JSContext *cx);
40362:     void purgeForScript(JSScript *script);
40362: };
40359: 
40362: } /* namespace js */
40359: 
40359: #endif /* jspropertycache_h___ */
