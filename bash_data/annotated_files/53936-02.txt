26482: = Instructions for using the test plugin =
26482: 
26482: == MIME type ==
26482: 
26482: The test plugin registers itself for the MIME type "application/x-test".
26482: 
41061: == Event Model ==
41061: 
41061: * getEventModel()
41061: Returns the NPAPI event model in use. On platforms without event models,
41061: simply returns 0;
41061: 
26482: == Rendering ==
26482: 
26482: By default, the plugin fills its rectangle with gray, with a black border, and
26482: renders the user-agent string (obtained from NPN_UserAgent) centered in black.
26482: 
26482: The test plugin supports the following parameters:
26482: 
26482: * drawmode="solid"
26482: The plugin will draw a solid color instead of the default rendering described
26482: above. The default solid color is completely transparent black (i.e., nothing).
26482: 
26482: * color
26482: This specifies the color to use for drawmode="solid". The value should be 8 hex
26482: digits, 2 per channel in AARRGGBB format.
26482: 
27202: == Generic API Tests ==
27202: 
27202: * setUndefinedValueTest
27202: Attempts to set the value of an undefined variable (0x0) via NPN_SetValue,
27202: returns true if it succeeds and false if it doesn't. It should never succeed.
27202: 
42020: * .getReflector()
42020: Hands back an object which reflects properties as values, e.g.
42020:   .getReflector().foo = 'foo'
42020:   .getReflector()['foo'] = 'foo'
42020:   .getReflector()[1] = 1
42020: 
34693: == NPN_ConvertPoint testing ==
34693: 
34693: * convertPointX(sourceSpace, sourceX, sourceY, destSpace)
34693: * convertPointY(sourceSpace, sourceX, sourceY, destSpace)
34693: The plugin uses NPN_ConvertPoint to convert sourceX and sourceY from the source
34693: to dest space and returns the X or Y result based on the call.
34693: 
41061: == NPCocoaEventWindowFocusChanged ==
41061: 
41061: * getTopLevelWindowActivationState()
41061: Returns the activation state for the top-level window as set by the last
41061: NPCocoaEventWindowFocusChanged event. Returns true for active, false for
41061: inactive, and throws an exception if the state is unknown (uninitialized).
41061: 
41061: * getTopLevelWindowActivationEventCount()
41061: Returns the number of NPCocoaEventWindowFocusChanged events received by
41061: the instance.
41061: 
41321: == Focus Tests ==
41321: 
41321: * getFocusState()
41321: Returns the plugin's focus state. Returns true for focused, false for unfocused,
41321: and throws an exception if the state is unknown (uninitialized). This does not
41321: necessarily correspond to actual input focus - this corresponds to focus as
41321: defined by the NPAPI event model in use.
41321: 
41321: * getFocusEventCount()
41321: Returns the number of focus events received by the instance.
41321: 
26482: == NPRuntime testing ==
26482: 
33631: The test plugin object supports the following scriptable methods:
26482: 
26482: * identifierToStringTest(ident)
26482: Converts a string, int32 or double parameter 'ident' to an NPIdentifier and
26482: then to a string, which is returned.
26482: 
34142: * npnEvaluateTest(script)
34142: Calls NPN_Evaluate on the 'script' argument, which is a string containing
34142: some script to be executed.  Returns the result of the evaluation.
34142: 
33631: * npnInvokeTest(method, expected, args...)
33631: Causes the plugin to call the specified script method using NPN_Invoke, 
33631: passing it 1 or more arguments specified in args.  The return value of this 
33631: call is compared against 'expected', and if they match, npnInvokeTest will 
33631: return true.  Otherwise, it will return false.
33631: 
33771: * npnInvokeDefaultTest(object, argument)
33771: Causes the plugin to call NPN_InvokeDefault on the specified object,
33771: with the specified argument.  Returns the result of the invocation.
33771: 
33631: * getError()
33631: If an error has occurred during the last stream or npruntime function,
33631: this will return a string error message, otherwise it returns "pass".
33631: 
34018: * throwExceptionNextInvoke()
34018: Sets a flag which causes the next call to a scriptable method to throw
34018: one or more exceptions.  If no parameters are passed to the next
34018: scriptable method call, it will cause a generic exception to be thrown. 
34018: Otherwise there will be one exception thrown per argument, with the argument
34018: used as the exception message.  Example:
34018: 
34018:   plugin.throwExceptionNextInvoke();
34018:   plugin.npnInvokeTest("first exception message", "second exception message");
34018: 
33921: * () - default method
33921: Returns a string consisting of the plugin name, concatenated with any 
33921: arguments passed to the method.
33921: 
36155: * .crash() - Crashes the plugin
36155: 
36929: * getObjectValue() - Returns a custom plugin-implemented scriptable object.
36929: * checkObjectValue(obj) - Returns true if the object from setObjectValue() is
36929:   the same object passed into this function. It should return true when
36929:   the object is passed to the same plugin instance, and false when passed
36929:   to other plugin instances, see bug 532246 and
36929:   test_multipleinstanceobjects.html.
36929: 
39210: * callOnDestroy(fn) - Calls `fn` when the plugin instance is being destroyed
39210:   
37391: * getAuthInfo(protocol, host, port, scheme, realm) - a wrapper for 
37391: NPN_GetAuthenticationInfo().  Returns a string "username|password" for
37391: the specified auth criteria, or throws an exception if no data is
37391: available.
37391: 
37426: * timerTest(callback) - initiates tests of NPN_ScheduleTimer &
37426: NPN_UnscheduleTimer.  When finished, calls the script callback
37426: with a boolean value, indicating whether the tests were successful.
37426: 
37426: * asyncCallbackTest(callback) - initiates tests of
37426: NPN_PluginThreadAsyncCall.  When finished, calls the script callback
37426: with a boolean value, indicating whether the tests were successful.
37426: 
53936: * paintscript="..." content attribute
53936: If the "paintscript" attribute is set on the plugin element during plugin
53936: initialization, then every time the plugin paints it gets the contents of that
53936: attribute and evaluates it as a script in the context of the plugin's DOM
53936: window. This is useful for testing evil plugin code that might, for example,
53936: modify the DOM during painting.
53936: 
26482: == Private browsing ==
26482: 
26482: The test plugin object supports the following scriptable methods:
26482: 
26482: * queryPrivateModeState
26482: Returns the value of NPN_GetValue(NPNVprivateModeBool).
26482: 
26482: * lastReportedPrivateModeState
26482: Returns the last value set by NPP_SetValue(NPNVprivateModeBool).
26802: 
26802: == Windowed/windowless mode ==
26802: 
26802: The test plugin is windowless by default.
26802: 
26802: The test plugin supports the following parameter:
26802: 
26802: * wmode="window"
26802: The plugin will be given a native widget on platforms where we support this
26802: (Windows and X).
26802: 
26802: The test plugin object supports the following scriptable method:
26802: 
26802: * hasWidget()
26802: Returns true if the plugin has an associated widget. This will return true if
26802: wmode="window" was specified and the platform supports windowed plugins.
26942: 
33861: == Plugin invalidation ==
33861: 
33861: * setColor(colorString)
33861: Sets the color used for drawmode="solid" and invalidates the plugin area.
34501: This calls NPN_Invalidate, even for windowed plugins, since that should work
34501: for windowed plugins too (Silverlight depends on it).
34501: 
34501: * getPaintCount()
34501: Returns the number of times this plugin instance has processed a paint request.
34501: This can be used to detect whether painting has happened in a plugin's
34501: window.
33861: 
36907: * getWidthAtLastPaint()
36907: Returns the window width that was current when the plugin last painted.
36907: 
47770: * setInvalidateDuringPaint(value)
47770: When value is true, every time the plugin paints, it will invalidate
47770: itself *during the paint* using NPN_Invalidate.
47770: 
26942: == Plugin geometry ==
26942: 
26942: The test plugin supports the following scriptable methods:
26942: 
26942: * getEdge(edge)
26942: Returns the integer screen pixel coordinate of an edge of the plugin's
26942: area:
26942: -- edge=0: returns left edge coordinate
26942: -- edge=1: returns top edge coordinate
26942: -- edge=2: returns right edge coordinate
26942: -- edge=3: returns bottom edge coordinate
26942: The coordinates are relative to the top-left corner of the top-level window
26942: containing the plugin, including the window decorations. Therefore:
26942: -- On Mac, they're relative to the top-left corner of the toplevel Cocoa
26942: window.
26942: -- On Windows, they're relative to the top-left corner of the toplevel HWND's
26942: non-client area.
26942: -- On GTK2, they're relative to the top-left corner of the toplevel window's
26942: window manager frame.
26942: This means they can be added to Gecko's window.screenX/screenY (if DPI is set
26942: to 96) to get screen coordinates.
26942: On the platforms that support window-mode plugins (Windows/GTK2), this only
26942: works for window-mode plugins. It will throw an error for windowless plugins.
26942: 
26942: * getClipRegionRectCount()
26942: Returns the number of rectangles in the plugin's clip region.
26942: For plugins with widgets, the clip region is computed as the intersection of the
26942: clip region for the widget (if the platform does not support clip regions
26942: on native widgets, this would just be the widget's rectangle) with the
26942: clip regions of all ancestor widgets which would clip this widget.
26942: On the platforms that support window-mode plugins (Windows/GTK2), this only
26942: works for window-mode plugins. It will throw an error for windowless plugins.
26942: On Mac, all plugins have a clip region containing just a single clip
26942: rectangle only. So if you request wmode="window" but the plugin reports
26942: !hasWidget, you can assume that complex clip regions are not supported.
26942: 
26942: * getClipRegionRectEdge(i, edge)
26942: Returns the integer screen pixel coordinate of an edge of a rectangle from the
26942: plugin's clip region. If i is less than zero or greater than or equal to
26942: getClipRegionRectCount(), this will throw an error. The coordinates are
26942: the same as for getEdge. See getClipRegionRectCount() above for
26942: notes on platform plugin limitations.
28108: 
31130: == Mouse events ==
31130: 
31130: The test plugin supports the following scriptable methods:
31130: 
31130: * getLastMouseX()
31130: Returns the X coordinate of the last mouse event (move, button up, or
31130: button down), relative to the left edge of the plugin, or -1 if no mouse
31130: event has been received.
31130: 
31130: * getLastMouseX()
31130: Returns the Y coordinate of the last mouse event (move, button up, or
31130: button down), relative to the top edge of the plugin, or -1 if no mouse
31130: event has been received.
31130: 
28108: == Instance lifecycle ==
28108: 
28108: The test plugin supports the following scriptable methods:
28108: 
28108: * startWatchingInstanceCount()
28108: Marks all currently running instances as "ignored". Throws an exception if
28108: there is already a watch (startWatchingInstanceCount has already been
28108: called on some instance without a corresponding stopWatchingInstanceCount).
28108: 
28108: * getInstanceCount()
28108: Returns the count of currently running instances that are not ignored.
28108: Throws an exception if there is no watch.
28108: 
28108: * stopWatchingInstanceCount()
28108: Stops watching. Throws an exception if there is no watch.
30765: 
30765: == NPAPI Timers ==
30765: 
30765: * unscheduleAllTimers()
30765: Instructs the plugin instance to cancel all timers created via
30765: NPN_ScheduleTimer.
33023: 
33023: == Stream Functionality ==
33023: 
33023: The test plugin enables a variety of NPAPI streaming tests, which are
33023: initiated by passing a variety of attributes to the <embed> element which
33023: causes the plugin to be initialized.  The plugin stream test code is 
33023: designed to receive a stream from the browser (by specifying a "src",
33023: "geturl", or "geturlnotify" attribute), and then (if a "frame" attribute
33023: is specified) send the data from that stream back to the browser in another
33023: stream, whereupon it will be displayed in the specified frame.  If some
33023: error occurs during stream processing, an error message will appear in the
33023: frame instead of the stream data. If no "frame" attribute is present, a 
33023: stream can still be received by the plugin, but the plugin will do nothing
33023: with it.
33023: 
33023: The attributes which control stream tests are:
33023: 
33023: "streammode": one of "normal", "asfile", "asfileonly", "seek". Sets the
33023:   stream mode to the specified mode in any call to NPP_NewStream.
33023:   Defaults to "asfileonly".
33023: 
33023: "streamchunksize": the number of bytes the plugin reports it can accept
33023:   in calls to NPP_WriteReady.  Defaults to 1,024.
33023: 
33023: "src": a url.  If specified, the browser will call NPP_NewStream for
33023:   this url as soon as the plugin is initialized.
33023: 
33023: "geturl": a url.  If specified, the plugin will request this url
33023:   from the browser when the plugin is initialized, via a call to
33023:   NPN_GetURL.
33023: 
33023: "geturlnotify": a url.  If specified, the plugin will request this url
33023:   from the browser when the plugin is initialized, via a call to
33023:   NPN_GetURLNotify. The plugin passes some "notifyData" to 
33023:   NPN_GetURLNotify, which it verifies is present in the call to
33023:   NPP_URLNotify.  If the "notifyData" does not match, an error
33023:   will be displayed in the test frame (if any), instead of the stream 
33023:   data.
33023: 
33023: "frame": the name of a frame in the same HTML document as the <embed>
33023:   element which instantiated the plugin. For any of the preceding three
33023:   attributes, a stream is received by the plugin via calls to NPP_NewStream,
33023:   NPP_WriteReady, NPP_Write, and NPP_DestroyStream.  When NPP_DestroyStream
33023:   is called (or NPP_UrlNotify, in the case of "geturlnotify"), and a 
33023:   "frame" attribute is present, the data from the stream is converted into a
33023:   data: url, and sent back to the browser in another stream via a call to
33023:   NPN_GetURL, whereupon it should be displayed in the specified frame.
33023: 
33023: "range": one or more byte ranges, in the format "offset,length;offset,length".
33023:   Only valid when "streammode" = "seek".  When "range" is present, the plugin
33023:   will request the specified byte ranges from the stream via a call to
33023:   NPN_RequestRead, which it makes after the browser makes its final call to
33023:   NPP_Write.  The plugin verifies that the browser makes additional calls
33023:   to NPP_Write according to the requested byte ranges, and that the data
33023:   received is correct.  Any errors will appear in the test "frame", if
33023:   specified.
33023: 
33023: "posturl": a url.  After the plugin receives a stream, and NPP_DestroyStream
33023:   is called, if "posturl" is specified, the plugin will post the contents
33023:   of the stream to the specified url via NPN_PostURL.  See "postmode" for
33023:   additional details.
33023: 
33023: "postmode": either "frame" or "stream".  If "frame", and a "frame" attribute
33023:   is present, the plugin will pass the frame name to calls to NPN_PostURL,
33023:   so that the HTTP response from that operation will be displayed in the
33023:   specified frame.  If "stream", the HTTP response is delivered to the plugin
33023:   via calls to NPP_NewStream etc, and if a "frame" attribute is present, the
33023:   contents of that stream will be passed back to the browser and displayed
33023:   in the specified frame via NPN_GetURL.
33023: 
33296: "newstream": if "true", then any stream which is sent to a frame in the browser
33296:   is sent via calls to NPN_NewStream and NPN_Write.  Doing so will cause 
33296:   the browser to store the stream data in a file, and set the frame's
33296:   location to the corresponding file:// url.
33358: 
33404: "functiontofail": one of "npp_newstream", "npp_write", "npp_destroystream".
33404:   When specified, the given function will return an error code (-1 for
33404:   NPP_Write, or else the value of the "failurecode" attribute) the first time
33404:   it is called by the browser.
33404: 
33404: "failurecode": one of the NPError constants.  Used to specify the error
33404:   that will be returned by the "functiontofail".
33404: 
40721: If the plugin is instantiated as a full-page plugin, the following defaults
40721: are used:
40721:   streammode="seek" frame="testframe" range="100,100"
40721: 
36110: The .streamTest(url, doPost, postData, callback) function will test how
36110: NPN_GetURLNotify and NPN_PostURLNotify behave when they are called with
36110: arbitrary (malformed) URLs. The function will return `true` if NPN_GetURLNotify
36110: succeeds, and `false` if it fails.
36110: @param doPost whether to call NPN_PostURLNotify
36110: @param postData null, or a string to send a postdata
36110: @callback which will be called when the urlnotify is received with the notify
36110: result
36110: 
33358: == Internal consistency ==
33358: 
33358: * doInternalConsistencyCheck()
33358: Does internal consistency checking, returning an empty string if everything is
33358: OK, otherwise returning some kind of error string. On Windows, in windowed
33358: mode, this checks that the position of the plugin's internal child
33358: window has not been disturbed relative to the plugin window.
33404: 
33863: == Windows native widget message behaviour ==
33863: 
33863: * Mouse events are handled (saving the last mouse event coordinate) and not
33863: passed to the overridden windowproc.
33863: 
33863: * WM_MOUSEWHEEL events are handled and not passed to the parent window or the
33863: overridden windowproc.
33863: 
33863: * WM_MOUSEACTIVATE events are handled by calling SetFocus on the plugin's
33863: widget, if the plugin is windowed. If it's not windowed they're passed to
33863: the overriden windowproc (but hopefully never sent by the browser anyway).
37101: 
37325: == Getting and Setting Cookies ==
37325: 
37325: * setCookie(string)
37325: Sets the given string as the cookie for window's URL.
37325: 
37325: * getCookie()
37325: Returns the cookie string for the window's URL, the cookie set by setCookie.
37325: 
37101: == FPU Control ==
37101: 
37101: x86-only on some OSes:
37101: 
37101: * The .enableFPExceptions() method will enable floating-point exceptions,
37325:   as evil plugins or extensions might do.
