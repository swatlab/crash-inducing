    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  * vim:cindent:ts=2:et:sw=2:
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Pierre Phaneuf <pp@ludusdesign.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK *****
    1:  *
    1:  * This Original Code has been modified by IBM Corporation. Modifications made
    1:  * by IBM described herein are Copyright (c) International Business Machines
    1:  * Corporation, 2000. Modifications to Mozilla code or documentation identified
    1:  * per MPL Section 3.3
    1:  *
    1:  * Date             Modified by     Description of modification
    1:  * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
    1:  */
    1: 
    1: /* storage of the frame tree and information about it */
    1: 
    1: #ifndef _nsFrameManager_h_
    1: #define _nsFrameManager_h_
    1: 
    1: #include "nsIFrame.h"
    1: #include "nsIStatefulFrame.h"
    1: #include "nsChangeHint.h"
    1: #include "nsFrameManagerBase.h"
    1: 
43790: namespace mozilla {
43790: namespace css {
43790: class RestyleTracker;
43790: } // namespace css
43790: } // namespace mozilla
43790: 
70853: struct TreeMatchContext;
70853: 
    1: /**
    1:  * Frame manager interface. The frame manager serves two purposes:
    1:  * <li>provides a service for mapping from content to frame and from
    1:  * out-of-flow frame to placeholder frame.
    1:  * <li>handles structural modifications to the frame model. If the frame model
    1:  * lock can be acquired, then the changes are processed immediately; otherwise,
    1:  * they're queued and processed later.
    1:  *
    1:  * Do not add virtual methods to this class, or bryner will punish you.
    1:  */
    1: 
    1: class nsFrameManager : public nsFrameManagerBase
    1: {
43790:   typedef mozilla::css::RestyleTracker RestyleTracker;
77154:   typedef nsIFrame::ChildListID ChildListID;
43790: 
    1: public:
89328:   nsFrameManager(nsIPresShell *aPresShell) NS_HIDDEN {
89328:     mPresShell = aPresShell;
89328:   }
    1:   ~nsFrameManager() NS_HIDDEN;
    1: 
    1:   // Initialization
89328:   NS_HIDDEN_(nsresult) Init(nsStyleSet* aStyleSet);
    1: 
    1:   /*
    1:    * After Destroy is called, it is an error to call any FrameManager methods.
    1:    * Destroy should be called when the frame tree managed by the frame
    1:    * manager is no longer being displayed.
    1:    */
    1:   NS_HIDDEN_(void) Destroy();
    1: 
    1:   // Placeholder frame functions
90155:   NS_HIDDEN_(nsPlaceholderFrame*) GetPlaceholderFrameFor(const nsIFrame* aFrame);
    1:   NS_HIDDEN_(nsresult)
    1:     RegisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame);
    1: 
    1:   NS_HIDDEN_(void)
    1:     UnregisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame);
    1: 
    1:   NS_HIDDEN_(void)      ClearPlaceholderFrameMap();
    1: 
    1:   // Mapping undisplayed content
    1:   NS_HIDDEN_(nsStyleContext*) GetUndisplayedContent(nsIContent* aContent);
    1:   NS_HIDDEN_(void) SetUndisplayedContent(nsIContent* aContent,
    1:                                          nsStyleContext* aStyleContext);
    1:   NS_HIDDEN_(void) ChangeUndisplayedContent(nsIContent* aContent,
    1:                                             nsStyleContext* aStyleContext);
    1:   NS_HIDDEN_(void) ClearUndisplayedContentIn(nsIContent* aContent,
    1:                                              nsIContent* aParentContent);
    1:   NS_HIDDEN_(void) ClearAllUndisplayedContentIn(nsIContent* aParentContent);
    1: 
    1:   // Functions for manipulating the frame model
    1:   NS_HIDDEN_(nsresult) AppendFrames(nsIFrame*       aParentFrame,
77154:                                     ChildListID     aListID,
79483:                                     nsFrameList&    aFrameList);
    1: 
    1:   NS_HIDDEN_(nsresult) InsertFrames(nsIFrame*       aParentFrame,
77154:                                     ChildListID     aListID,
    1:                                     nsIFrame*       aPrevFrame,
30941:                                     nsFrameList&    aFrameList);
    1: 
77154:   NS_HIDDEN_(nsresult) RemoveFrame(ChildListID     aListID,
94082:                                    nsIFrame*       aOldFrame,
94082:                                    bool            aInvalidate = true);
    1: 
    1:   /*
    1:    * Notification that a frame is about to be destroyed. This allows any
    1:    * outstanding references to the frame to be cleaned up.
    1:    */
    1:   NS_HIDDEN_(void)     NotifyDestroyingFrame(nsIFrame* aFrame);
    1: 
    1:   /*
    1:    * Reparent the style contexts of this frame subtree.  The parent frame of
    1:    * aFrame must be changed to the new parent before this function is called;
    1:    * the new parent style context will be automatically computed based on the
    1:    * new position in the frame tree.
    1:    *
    1:    * @param aFrame the root of the subtree to reparent.  Must not be null.
    1:    */
40137:   NS_HIDDEN_(nsresult) ReparentStyleContext(nsIFrame* aFrame);
    1: 
    1:   /*
11409:    * Re-resolve the style contexts for a frame tree, building
11409:    * aChangeList based on the resulting style changes, plus aMinChange
11409:    * applied to aFrame.
    1:    */
11409:   NS_HIDDEN_(void)
    1:     ComputeStyleChangeFor(nsIFrame* aFrame,
    1:                           nsStyleChangeList* aChangeList,
43790:                           nsChangeHint aMinChange,
43794:                           RestyleTracker& aRestyleTracker,
79445:                           bool aRestyleDescendants);
    1: 
    1:   /*
    1:    * Capture/restore frame state for the frame subtree rooted at aFrame.
    1:    * aState is the document state storage object onto which each frame
    1:    * stores its state.
    1:    */
    1: 
    1:   NS_HIDDEN_(void) CaptureFrameState(nsIFrame*              aFrame,
    1:                                      nsILayoutHistoryState* aState);
    1: 
    1:   NS_HIDDEN_(void) RestoreFrameState(nsIFrame*              aFrame,
    1:                                      nsILayoutHistoryState* aState);
    1: 
    1:   /*
    1:    * Add/restore state for one frame
    1:    * (special, global type, like scroll position)
    1:    */
    1:   NS_HIDDEN_(void) CaptureFrameStateFor(nsIFrame*              aFrame,
    1:                                         nsILayoutHistoryState* aState,
    1:                                         nsIStatefulFrame::SpecialStateID aID =
    1:                                                       nsIStatefulFrame::eNoID);
    1: 
    1:   NS_HIDDEN_(void) RestoreFrameStateFor(nsIFrame*              aFrame,
    1:                                         nsILayoutHistoryState* aState,
    1:                                         nsIStatefulFrame::SpecialStateID aID =
    1:                                                       nsIStatefulFrame::eNoID);
    1: 
    1: #ifdef NS_DEBUG
    1:   /**
    1:    * DEBUG ONLY method to verify integrity of style tree versus frame tree
    1:    */
    1:   NS_HIDDEN_(void) DebugVerifyStyleTree(nsIFrame* aFrame);
    1: #endif
    1: 
    1:   NS_HIDDEN_(nsIPresShell*) GetPresShell() const { return mPresShell; }
    1:   NS_HIDDEN_(nsPresContext*) GetPresContext() const {
    1:     return mPresShell->GetPresContext();
    1:   }
    1: 
    1: private:
57448:   enum DesiredA11yNotifications {
57448:     eSkipNotifications,
57448:     eSendAllNotifications,
57448:     eNotifyIfShown
57448:   };
57448: 
57448:   enum A11yNotificationType {
57448:     eDontNotify,
57448:     eNotifyShown,
57448:     eNotifyHidden
57448:   };
57448: 
43794:   // Use eRestyle_Self for the aRestyleHint argument to mean
43794:   // "reresolve our style context but not kids", use eRestyle_Subtree
43794:   // to mean "reresolve our style context and kids", and use
43794:   // nsRestyleHint(0) to mean recompute a new style context for our
43794:   // current parent and existing rulenode, and the same for kids.
    1:   NS_HIDDEN_(nsChangeHint)
    1:     ReResolveStyleContext(nsPresContext    *aPresContext,
    1:                           nsIFrame          *aFrame,
    1:                           nsIContent        *aParentContent,
    1:                           nsStyleChangeList *aChangeList, 
30895:                           nsChangeHint       aMinChange,
43794:                           nsRestyleHint      aRestyleHint,
57448:                           RestyleTracker&    aRestyleTracker,
57448:                           DesiredA11yNotifications aDesiredA11yNotifications,
70853:                           nsTArray<nsIContent*>& aVisibleKidsOfHiddenElement,
70853:                           TreeMatchContext &aTreeMatchContext);
    1: };
    1: 
    1: #endif
