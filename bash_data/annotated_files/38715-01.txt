    1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * mozilla.org.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Vladimir Vukicevic <vladimir@mozilla.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsThebesFontEnumerator.h"
    1: 
    1: #include "nsMemory.h"
    1: 
    1: #include "gfxPlatform.h"
23904: #include "nsTArray.h"
38493: #include "nsIAtom.h"
    1: 
    1: NS_IMPL_ISUPPORTS1(nsThebesFontEnumerator, nsIFontEnumerator)
    1: 
    1: nsThebesFontEnumerator::nsThebesFontEnumerator()
    1: {
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThebesFontEnumerator::EnumerateAllFonts(PRUint32 *aCount,
    1:                                           PRUnichar ***aResult)
    1: {
    1:     return EnumerateFonts (nsnull, nsnull, aCount, aResult);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThebesFontEnumerator::EnumerateFonts(const char *aLangGroup,
    1:                                        const char *aGeneric,
    1:                                        PRUint32 *aCount,
    1:                                        PRUnichar ***aResult)
    1: {
    1:     NS_ENSURE_ARG_POINTER(aCount);
    1:     NS_ENSURE_ARG_POINTER(aResult);
    1: 
23904:     nsTArray<nsString> fontList;
    1: 
    1:     nsCAutoString generic;
    1:     if (aGeneric)
    1:         generic.Assign(aGeneric);
    1:     else
    1:         generic.SetIsVoid(PR_TRUE);
    1: 
38715:     nsCOMPtr<nsIAtom> langGroupAtom;
38715:     if (aLangGroup) {
38715:         nsCAutoString lowered;
38715:         lowered.Assign(aLangGroup);
38715:         ToLowerCase(lowered);
38715:         langGroupAtom = do_GetAtom(lowered);
38715:     }
38715: 
38493:     nsresult rv = gfxPlatform::GetPlatform()->GetFontList(langGroupAtom, generic, fontList);
    1: 
    1:     if (NS_FAILED(rv)) {
    1:         *aCount = 0;
    1:         *aResult = nsnull;
    1:         /* XXX in this case, do we want to return the CSS generics? */
    1:         return NS_OK;
    1:     }
    1: 
 3233:     PRUnichar **fs = static_cast<PRUnichar **>
23904:                                 (nsMemory::Alloc(fontList.Length() * sizeof(PRUnichar*)));
23904:     for (PRUint32 i = 0; i < fontList.Length(); i++) {
23904:         fs[i] = ToNewUnicode(fontList[i]);
    1:     }
    1: 
    1:     *aResult = fs;
23904:     *aCount = fontList.Length();
    1: 
    1:     return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThebesFontEnumerator::HaveFontFor(const char *aLangGroup,
    1:                                     PRBool *aResult)
    1: {
    1:     NS_ENSURE_ARG_POINTER(*aResult);
    1:     NS_ENSURE_ARG_POINTER(*aLangGroup);
    1: 
    1:     *aResult = PR_TRUE;
    1:     return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThebesFontEnumerator::GetDefaultFont(const char *aLangGroup,
    1:                                        const char *aGeneric,
    1:                                        PRUnichar **aResult)
    1: {
    1:     NS_ENSURE_ARG_POINTER(aResult);
    1:     *aResult = nsnull;
    1:     return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThebesFontEnumerator::UpdateFontList(PRBool *_retval)
    1: {
19254:     gfxPlatform::GetPlatform()->UpdateFontList();
    1:     *_retval = PR_FALSE; // always return false for now
    1:     return NS_OK;
    1: }
13003: 
13003: NS_IMETHODIMP
13003: nsThebesFontEnumerator::GetStandardFamilyName(const PRUnichar *aName,
13003:                                               PRUnichar **aResult)
13003: {
13003:     NS_ENSURE_ARG_POINTER(aResult);
13003:     NS_ENSURE_ARG_POINTER(aName);
13003: 
13003:     nsAutoString name(aName);
13003:     if (name.IsEmpty()) {
13003:         *aResult = nsnull;
13003:         return NS_OK;
13003:     }
13003: 
13003:     nsAutoString family;
13003:     nsresult rv = gfxPlatform::GetPlatform()->
13003:         GetStandardFamilyName(nsDependentString(aName), family);
13003:     if (NS_FAILED(rv) || family.IsEmpty()) {
13003:         *aResult = nsnull;
13003:         return NS_OK;
13003:     }
13003:     *aResult = ToNewUnicode(family);
13003:     return NS_OK;
13003: }
