 72423: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 72423: 
 72423: #include "2D.h"
 72423: 
 72423: #ifdef USE_CAIRO
 72423: #include "DrawTargetCairo.h"
150502: #include "ScaledFontCairo.h"
 72423: #endif
 72423: 
 81281: #ifdef USE_SKIA
 81281: #include "DrawTargetSkia.h"
 87511: #include "ScaledFontBase.h"
 99162: #ifdef MOZ_ENABLE_FREETYPE
150502: #define USE_SKIA_FREETYPE
150502: #include "ScaledFontCairo.h"
 87511: #endif
 99162: #endif
 87511: 
 95228: #if defined(WIN32) && defined(USE_SKIA)
 87511: #include "ScaledFontWin.h"
 87511: #endif
 87511: 
 87507: #ifdef XP_MACOSX
 87507: #include "ScaledFontMac.h"
 87497: #endif
 87511: 
 87511: 
 87511: #ifdef XP_MACOSX
 87511: #include "DrawTargetCG.h"
 81281: #endif
 81281: 
 72423: #ifdef WIN32
 72423: #include "DrawTargetD2D.h"
152063: #ifdef USE_D2D1_1
152063: #include "DrawTargetD2D1.h"
152063: #endif
 72423: #include "ScaledFontDWrite.h"
 72423: #include <d3d10_1.h>
152063: #include "HelpersD2D.h"
 72423: #endif
 72423: 
 94665: #include "DrawTargetDual.h"
210168: #include "DrawTargetTiled.h"
114782: #include "DrawTargetRecording.h"
 81281: 
 99076: #include "SourceSurfaceRawData.h"
 99076: 
114782: #include "DrawEventRecorder.h"
114782: 
 72423: #include "Logging.h"
 72423: 
180960: #include "mozilla/CheckedInt.h"
180960: 
189756: #if defined(DEBUG) || defined(PR_LOGGING)
189756: GFX2D_API PRLogModuleInfo *
120415: GetGFX2DLog()
120415: {
120415:   static PRLogModuleInfo *sLog;
120415:   if (!sLog)
120415:     sLog = PR_NewLogModule("gfx2d");
120415:   return sLog;
120415: }
 72423: #endif
 72423: 
 98187: // The following code was largely taken from xpcom/glue/SSE.cpp and
 98187: // made a little simpler.
 98187: enum CPUIDRegister { eax = 0, ebx = 1, ecx = 2, edx = 3 };
 98187: 
 98187: #ifdef HAVE_CPUID_H
 98187: 
169791: #if !(defined(__SSE2__) || defined(_M_X64) || \
169791:      (defined(_M_IX86_FP) && _M_IX86_FP >= 2))
 98187: // cpuid.h is available on gcc 4.3 and higher on i386 and x86_64
 98187: #include <cpuid.h>
 98187: 
132833: static inline bool
 98187: HasCPUIDBit(unsigned int level, CPUIDRegister reg, unsigned int bit)
 98187: {
 98187:   unsigned int regs[4];
 98187:   return __get_cpuid(level, &regs[0], &regs[1], &regs[2], &regs[3]) &&
 98187:          (regs[reg] & bit);
 98187: }
169791: #endif
 98187: 
 98187: #define HAVE_CPU_DETECTION
 98187: #else
 98187: 
 98621: #if defined(_MSC_VER) && _MSC_VER >= 1600 && (defined(_M_IX86) || defined(_M_AMD64))
 98621: // MSVC 2005 or later supports __cpuid by intrin.h
 98621: // But it does't work on MSVC 2005 with SDK 7.1 (Bug 753772)
 98187: #include <intrin.h>
 98187: 
 98187: #define HAVE_CPU_DETECTION
 98187: #elif defined(__SUNPRO_CC) && (defined(__i386) || defined(__x86_64__))
 98187: 
 98187: // Define a function identical to MSVC function.
 98187: #ifdef __i386
 98187: static void
 98187: __cpuid(int CPUInfo[4], int InfoType)
 98187: {
 98187:   asm (
 98187:     "xchg %esi, %ebx\n"
 98187:     "cpuid\n"
 98187:     "movl %eax, (%edi)\n"
 98187:     "movl %ebx, 4(%edi)\n"
 98187:     "movl %ecx, 8(%edi)\n"
 98187:     "movl %edx, 12(%edi)\n"
 98187:     "xchg %esi, %ebx\n"
 98187:     :
 98187:     : "a"(InfoType), // %eax
 98187:       "D"(CPUInfo) // %edi
 98187:     : "%ecx", "%edx", "%esi"
 98187:   );
 98187: }
 98187: #else
 98187: static void
 98187: __cpuid(int CPUInfo[4], int InfoType)
 98187: {
 98187:   asm (
 98187:     "xchg %rsi, %rbx\n"
 98187:     "cpuid\n"
 98187:     "movl %eax, (%rdi)\n"
 98187:     "movl %ebx, 4(%rdi)\n"
 98187:     "movl %ecx, 8(%rdi)\n"
 98187:     "movl %edx, 12(%rdi)\n"
 98187:     "xchg %rsi, %rbx\n"
 98187:     :
 98187:     : "a"(InfoType), // %eax
 98187:       "D"(CPUInfo) // %rdi
 98187:     : "%ecx", "%edx", "%rsi"
 98187:   );
 98187: }
 98187: 
 98187: #define HAVE_CPU_DETECTION
 98187: #endif
 98187: #endif
 98187: 
 98187: #ifdef HAVE_CPU_DETECTION
132833: static inline bool
 98187: HasCPUIDBit(unsigned int level, CPUIDRegister reg, unsigned int bit)
 98187: {
 98187:   // Check that the level in question is supported.
 98187:   volatile int regs[4];
 98187:   __cpuid((int *)regs, level & 0x80000000u);
 98187:   if (unsigned(regs[0]) < level)
 98187:     return false;
 98187:   __cpuid((int *)regs, level);
 98187:   return !!(unsigned(regs[reg]) & bit);
 98187: }
 98187: #endif
 98187: #endif
 98187: 
 72423: namespace mozilla {
 72423: namespace gfx {
 72423: 
 72423: // XXX - Need to define an API to set this.
189756: GFX2D_API int sGfxLogLevel = LOG_DEBUG;
 72423: 
 72423: #ifdef WIN32
 72423: ID3D10Device1 *Factory::mD3D10Device;
152063: #ifdef USE_D2D1_1
152063: ID3D11Device *Factory::mD3D11Device;
152063: ID2D1Device *Factory::mD2D1Device;
152063: #endif
 72423: #endif
 72423: 
114782: DrawEventRecorder *Factory::mRecorder;
114782: 
 98187: bool
 98187: Factory::HasSSE2()
 98187: {
 98621: #if defined(__SSE2__) || defined(_M_X64) || \
 98621:     (defined(_M_IX86_FP) && _M_IX86_FP >= 2)
 98621:   // gcc with -msse2 (default on OSX and x86-64)
 98621:   // cl.exe with -arch:SSE2 (default on x64 compiler)
 98621:   return true;
 98621: #elif defined(HAVE_CPU_DETECTION)
 98187:   return HasCPUIDBit(1u, edx, (1u<<26));
 98187: #else
 98187:   return false;
 98187: #endif
 98187: }
 98187: 
180960: bool
180960: Factory::CheckSurfaceSize(const IntSize &sz, int32_t limit)
180960: {
180960:   if (sz.width < 0 || sz.height < 0) {
180960:     gfxDebug() << "Surface width or height < 0!";
180960:     return false;
180960:   }
180960: 
180960:   // reject images with sides bigger than limit
180960:   if (limit && (sz.width > limit || sz.height > limit)) {
180960:     gfxDebug() << "Surface size too large (exceeds caller's limit)!";
180960:     return false;
180960:   }
180960: 
180960:   // make sure the surface area doesn't overflow a int32_t
180960:   CheckedInt<int32_t> tmp = sz.width;
180960:   tmp *= sz.height;
180960:   if (!tmp.isValid()) {
180960:     gfxDebug() << "Surface size too large (would overflow)!";
180960:     return false;
180960:   }
180960: 
180960:   // assuming 4 bytes per pixel, make sure the allocation size
180960:   // doesn't overflow a int32_t either
180960:   CheckedInt<int32_t> stride = sz.width;
180960:   stride *= 4;
180960: 
180960:   // When aligning the stride to 16 bytes, it can grow by up to 15 bytes.
180960:   stride += 16 - 1;
180960: 
180960:   if (!stride.isValid()) {
180960:     gfxDebug() << "Surface size too large (stride overflows int32_t)!";
180960:     return false;
180960:   }
180960: 
180960:   CheckedInt<int32_t> numBytes = GetAlignedStride<16>(sz.width * 4);
180960:   numBytes *= sz.height;
180960:   if (!numBytes.isValid()) {
180960:     gfxDebug() << "Surface size too large (allocation size would overflow int32_t)!";
180960:     return false;
180960:   }
180960: 
180960:   return true;
180960: }
180960: 
 72423: TemporaryRef<DrawTarget>
 72423: Factory::CreateDrawTarget(BackendType aBackend, const IntSize &aSize, SurfaceFormat aFormat)
 72423: {
180960:   if (!CheckSurfaceSize(aSize)) {
180960:     return nullptr;
180960:   }
180960: 
114782:   RefPtr<DrawTarget> retVal;
 72423:   switch (aBackend) {
 72423: #ifdef WIN32
180005:   case BackendType::DIRECT2D:
 72423:     {
 72423:       RefPtr<DrawTargetD2D> newTarget;
 72423:       newTarget = new DrawTargetD2D();
 72423:       if (newTarget->Init(aSize, aFormat)) {
114782:         retVal = newTarget;
 72423:       }
 72423:       break;
 72423:     }
152063: #ifdef USE_D2D1_1
180005:   case BackendType::DIRECT2D1_1:
152063:     {
152063:       RefPtr<DrawTargetD2D1> newTarget;
152063:       newTarget = new DrawTargetD2D1();
152063:       if (newTarget->Init(aSize, aFormat)) {
152063:         retVal = newTarget;
152063:       }
152063:       break;
152063:     }
152063: #endif
 95318: #elif defined XP_MACOSX
180005:   case BackendType::COREGRAPHICS:
180005:   case BackendType::COREGRAPHICS_ACCELERATED:
 95318:     {
 95318:       RefPtr<DrawTargetCG> newTarget;
 95318:       newTarget = new DrawTargetCG();
106986:       if (newTarget->Init(aBackend, aSize, aFormat)) {
114782:         retVal = newTarget;
 95318:       }
 95318:       break;
 95318:     }
 95318: #endif
 81281: #ifdef USE_SKIA
180005:   case BackendType::SKIA:
 81281:     {
 81281:       RefPtr<DrawTargetSkia> newTarget;
 81281:       newTarget = new DrawTargetSkia();
 81281:       if (newTarget->Init(aSize, aFormat)) {
114782:         retVal = newTarget;
 81281:       }
 81281:       break;
 81281:     }
 81281: #endif
168849: #ifdef USE_CAIRO
180005:   case BackendType::CAIRO:
168849:     {
168849:       RefPtr<DrawTargetCairo> newTarget;
168849:       newTarget = new DrawTargetCairo();
168849:       if (newTarget->Init(aSize, aFormat)) {
168849:         retVal = newTarget;
168849:       }
168849:       break;
168849:     }
168849: #endif
 72423:   default:
 72423:     gfxDebug() << "Invalid draw target type specified.";
108475:     return nullptr;
 72423:   }
 72423: 
114782:   if (mRecorder && retVal) {
210583:     return new DrawTargetRecording(mRecorder, retVal);
114782:   }
114782: 
114782:   if (!retVal) {
114782:     // Failed
180005:     gfxDebug() << "Failed to create DrawTarget, Type: " << int(aBackend) << " Size: " << aSize;
114782:   }
114782:   
210583:   return retVal.forget();
114782: }
114782: 
114782: TemporaryRef<DrawTarget>
114782: Factory::CreateRecordingDrawTarget(DrawEventRecorder *aRecorder, DrawTarget *aDT)
114782: {
114782:   return new DrawTargetRecording(aRecorder, aDT);
 72423: }
 72423: 
 94602: TemporaryRef<DrawTarget>
 94602: Factory::CreateDrawTargetForData(BackendType aBackend, 
 94602:                                  unsigned char *aData, 
 94602:                                  const IntSize &aSize, 
 94602:                                  int32_t aStride, 
 94602:                                  SurfaceFormat aFormat)
 94602: {
180960:   if (!CheckSurfaceSize(aSize)) {
180960:     return nullptr;
180960:   }
180960: 
114782:   RefPtr<DrawTarget> retVal;
114782: 
 94602:   switch (aBackend) {
 94602: #ifdef USE_SKIA
180005:   case BackendType::SKIA:
 94602:     {
 94602:       RefPtr<DrawTargetSkia> newTarget;
 94602:       newTarget = new DrawTargetSkia();
 94602:       newTarget->Init(aData, aSize, aStride, aFormat);
114782:       retVal = newTarget;
187773:       break;
 94602:     }
 94602: #endif
106743: #ifdef XP_MACOSX
180005:   case BackendType::COREGRAPHICS:
106743:     {
106743:       RefPtr<DrawTargetCG> newTarget = new DrawTargetCG();
106986:       if (newTarget->Init(aBackend, aData, aSize, aStride, aFormat))
210583:         return newTarget.forget();
106743:       break;
106743:     }
106743: #endif
168849: #ifdef USE_CAIRO
180005:   case BackendType::CAIRO:
168849:     {
168849:       RefPtr<DrawTargetCairo> newTarget;
168849:       newTarget = new DrawTargetCairo();
168849:       if (newTarget->Init(aData, aSize, aStride, aFormat)) {
210583:         retVal = newTarget.forget();
168849:       }
168849:       break;
168849:     }
168849: #endif
 94602:   default:
 94602:     gfxDebug() << "Invalid draw target type specified.";
108475:     return nullptr;
 94602:   }
 94602: 
114782:   if (mRecorder && retVal) {
210583:     return new DrawTargetRecording(mRecorder, retVal, true);
114782:   }
114782: 
168849:   if (!retVal) {
180005:     gfxDebug() << "Failed to create DrawTarget, Type: " << int(aBackend) << " Size: " << aSize;
168849:   }
168849: 
210583:   return retVal.forget();
 94602: }
 94602: 
210168: TemporaryRef<DrawTarget>
210168: Factory::CreateTiledDrawTarget(const TileSet& aTileSet)
210168: {
210168:   RefPtr<DrawTargetTiled> dt = new DrawTargetTiled();
210168: 
210168:   if (!dt->Init(aTileSet)) {
210168:     return nullptr;
210168:   }
210168: 
210583:   return dt.forget();
210168: }
210168: 
 72423: TemporaryRef<ScaledFont>
 72423: Factory::CreateScaledFontForNativeFont(const NativeFont &aNativeFont, Float aSize)
 72423: {
 72423:   switch (aNativeFont.mType) {
 72423: #ifdef WIN32
180006:   case NativeFontType::DWRITE_FONT_FACE:
 72423:     {
 72423:       return new ScaledFontDWrite(static_cast<IDWriteFontFace*>(aNativeFont.mFont), aSize);
 72423:     }
114782: #if defined(USE_CAIRO) || defined(USE_SKIA)
180006:   case NativeFontType::GDI_FONT_FACE:
106599:     {
106599:       return new ScaledFontWin(static_cast<LOGFONT*>(aNativeFont.mFont), aSize);
106599:     }
 72423: #endif
113669: #endif
 81281: #ifdef XP_MACOSX
180006:   case NativeFontType::MAC_FONT_FACE:
 81281:     {
 81281:       return new ScaledFontMac(static_cast<CGFontRef>(aNativeFont.mFont), aSize);
 81281:     }
 81281: #endif
150502: #if defined(USE_CAIRO) || defined(USE_SKIA_FREETYPE)
180006:   case NativeFontType::CAIRO_FONT_FACE:
 87057:     {
150502:       return new ScaledFontCairo(static_cast<cairo_scaled_font_t*>(aNativeFont.mFont), aSize);
 87057:     }
 88426: #endif
 72423:   default:
 72423:     gfxWarning() << "Invalid native font type specified.";
108475:     return nullptr;
 72423:   }
 72423: }
 72423: 
 88426: TemporaryRef<ScaledFont>
114780: Factory::CreateScaledFontForTrueTypeData(uint8_t *aData, uint32_t aSize,
114780:                                          uint32_t aFaceIndex, Float aGlyphSize,
114780:                                          FontType aType)
114780: {
114780:   switch (aType) {
114780: #ifdef WIN32
180006:   case FontType::DWRITE:
114780:     {
114780:       return new ScaledFontDWrite(aData, aSize, aFaceIndex, aGlyphSize);
114780:     }
114780: #endif
114780:   default:
114780:     gfxWarning() << "Unable to create requested font type from truetype data";
114780:     return nullptr;
114780:   }
114780: }
114780: 
114780: TemporaryRef<ScaledFont>
 88426: Factory::CreateScaledFontWithCairo(const NativeFont& aNativeFont, Float aSize, cairo_scaled_font_t* aScaledFont)
 88426: {
 88426: #ifdef USE_CAIRO
 88426:   // In theory, we could pull the NativeFont out of the cairo_scaled_font_t*,
 88426:   // but that would require a lot of code that would be otherwise repeated in
 88426:   // various backends.
 88426:   // Therefore, we just reuse CreateScaledFontForNativeFont's implementation.
 88426:   RefPtr<ScaledFont> font = CreateScaledFontForNativeFont(aNativeFont, aSize);
 88426:   static_cast<ScaledFontBase*>(font.get())->SetCairoScaledFont(aScaledFont);
210583:   return font.forget();
 88426: #else
108475:   return nullptr;
 88426: #endif
 88426: }
 88426: 
151184: TemporaryRef<DrawTarget>
151184: Factory::CreateDualDrawTarget(DrawTarget *targetA, DrawTarget *targetB)
151184: {
151184:   RefPtr<DrawTarget> newTarget =
151184:     new DrawTargetDual(targetA, targetB);
151184: 
151184:   RefPtr<DrawTarget> retVal = newTarget;
151184: 
151184:   if (mRecorder) {
151184:     retVal = new DrawTargetRecording(mRecorder, retVal);
151184:   }
151184: 
210583:   return retVal.forget();
151184: }
151184: 
151184: 
 72423: #ifdef WIN32
 72423: TemporaryRef<DrawTarget>
 72423: Factory::CreateDrawTargetForD3D10Texture(ID3D10Texture2D *aTexture, SurfaceFormat aFormat)
 72423: {
 72423:   RefPtr<DrawTargetD2D> newTarget;
 72423: 
 72423:   newTarget = new DrawTargetD2D();
 72423:   if (newTarget->Init(aTexture, aFormat)) {
114782:     RefPtr<DrawTarget> retVal = newTarget;
114782: 
114782:     if (mRecorder) {
173395:       retVal = new DrawTargetRecording(mRecorder, retVal, true);
114782:     }
114782: 
210583:     return retVal.forget();
 72423:   }
 72423: 
 72423:   gfxWarning() << "Failed to create draw target for D3D10 texture.";
 72423: 
 72423:   // Failed
108475:   return nullptr;
 72423: }
 72423: 
 94665: TemporaryRef<DrawTarget>
 94665: Factory::CreateDualDrawTargetForD3D10Textures(ID3D10Texture2D *aTextureA,
 94665:                                               ID3D10Texture2D *aTextureB,
 94665:                                               SurfaceFormat aFormat)
 94665: {
 94665:   RefPtr<DrawTargetD2D> newTargetA;
 94665:   RefPtr<DrawTargetD2D> newTargetB;
 94665: 
 94665:   newTargetA = new DrawTargetD2D();
 94665:   if (!newTargetA->Init(aTextureA, aFormat)) {
 94665:     gfxWarning() << "Failed to create draw target for D3D10 texture.";
108475:     return nullptr;
 94665:   }
 94665: 
 94665:   newTargetB = new DrawTargetD2D();
 94665:   if (!newTargetB->Init(aTextureB, aFormat)) {
 94665:     gfxWarning() << "Failed to create draw target for D3D10 texture.";
108475:     return nullptr;
 94665:   }
 94665: 
 94665:   RefPtr<DrawTarget> newTarget =
 94665:     new DrawTargetDual(newTargetA, newTargetB);
 94665: 
114782:   RefPtr<DrawTarget> retVal = newTarget;
114782: 
114782:   if (mRecorder) {
114782:     retVal = new DrawTargetRecording(mRecorder, retVal);
114782:   }
114782: 
210583:   return retVal.forget();
 94665: }
 94665: 
 72423: void
 72423: Factory::SetDirect3D10Device(ID3D10Device1 *aDevice)
 72423: {
211388:   // do not throw on failure; return error codes and disconnect the device
211388:   // On Windows 8 error codes are the default, but on Windows 7 the
211388:   // default is to throw (or perhaps only with some drivers?)
211388:   aDevice->SetExceptionMode(0);
 72423:   mD3D10Device = aDevice;
 72423: }
 72423: 
 72423: ID3D10Device1*
 72423: Factory::GetDirect3D10Device()
 72423: {
211388: #ifdef DEBUG
211388:   UINT mode = mD3D10Device->GetExceptionMode();
211388:   MOZ_ASSERT(0 == mode);
211388: #endif
 72423:   return mD3D10Device;
 72423: }
 72423: 
152063: #ifdef USE_D2D1_1
152063: void
152063: Factory::SetDirect3D11Device(ID3D11Device *aDevice)
152063: {
152063:   mD3D11Device = aDevice;
152063: 
152063:   RefPtr<ID2D1Factory1> factory = D2DFactory1();
152063: 
152063:   RefPtr<IDXGIDevice> device;
152063:   aDevice->QueryInterface((IDXGIDevice**)byRef(device));
152063:   factory->CreateDevice(device, &mD2D1Device);
152063: }
152063: 
152063: ID3D11Device*
152063: Factory::GetDirect3D11Device()
152063: {
152063:   return mD3D11Device;
152063: }
152063: 
152063: ID2D1Device*
152063: Factory::GetD2D1Device()
152063: {
152063:   return mD2D1Device;
152063: }
152063: #endif
152063: 
 93507: TemporaryRef<GlyphRenderingOptions>
 93507: Factory::CreateDWriteGlyphRenderingOptions(IDWriteRenderingParams *aParams)
 93507: {
210583:   return new GlyphRenderingOptionsDWrite(aParams);
 93507: }
 93507: 
102497: uint64_t
102497: Factory::GetD2DVRAMUsageDrawTarget()
102497: {
102497:   return DrawTargetD2D::mVRAMUsageDT;
102497: }
102497: 
102497: uint64_t
102497: Factory::GetD2DVRAMUsageSourceSurface()
102497: {
102497:   return DrawTargetD2D::mVRAMUsageSS;
102497: }
102497: 
123963: void
123963: Factory::D2DCleanup()
123963: {
123963:   DrawTargetD2D::CleanupD2D();
123963: }
123963: 
 72423: #endif // XP_WIN
 72423: 
137166: #ifdef USE_SKIA_GPU
135112: TemporaryRef<DrawTarget>
190352: Factory::CreateDrawTargetSkiaWithGrContext(GrContext* aGrContext,
150509:                                            const IntSize &aSize,
150509:                                            SurfaceFormat aFormat)
135112: {
195110:   RefPtr<DrawTarget> newTarget = new DrawTargetSkia();
195110:   if (!newTarget->InitWithGrContext(aGrContext, aSize, aFormat)) {
195110:     return nullptr;
195110:   }
210583:   return newTarget.forget();
135112: }
166481: 
137166: #endif // USE_SKIA_GPU
135112: 
168596: void
174568: Factory::PurgeAllCaches()
168596: {
168596: }
168596: 
150502: #ifdef USE_SKIA_FREETYPE
150502: TemporaryRef<GlyphRenderingOptions>
150502: Factory::CreateCairoGlyphRenderingOptions(FontHinting aHinting, bool aAutoHinting)
150502: {
150502:   RefPtr<GlyphRenderingOptionsCairo> options =
150502:     new GlyphRenderingOptionsCairo();
150502: 
150502:   options->SetHinting(aHinting);
150502:   options->SetAutoHinting(aAutoHinting);
210583:   return options.forget();
150502: }
150502: #endif
150502: 
 72423: TemporaryRef<DrawTarget>
198045: Factory::CreateDrawTargetForCairoSurface(cairo_surface_t* aSurface, const IntSize& aSize, SurfaceFormat* aFormat)
 72423: {
114782:   RefPtr<DrawTarget> retVal;
114782: 
 97521: #ifdef USE_CAIRO
 72423:   RefPtr<DrawTargetCairo> newTarget = new DrawTargetCairo();
114782: 
198045:   if (newTarget->Init(aSurface, aSize, aFormat)) {
114782:     retVal = newTarget;
 72423:   }
 72423: 
114782:   if (mRecorder && retVal) {
173395:     RefPtr<DrawTarget> recordDT = new DrawTargetRecording(mRecorder, retVal, true);
210583:     return recordDT.forget();
114782:   }
 97521: #endif
210583:   return retVal.forget();
 72423: }
 72423: 
151184: #ifdef XP_MACOSX
151184: TemporaryRef<DrawTarget>
151184: Factory::CreateDrawTargetForCairoCGContext(CGContextRef cg, const IntSize& aSize)
151184: {
151184:   RefPtr<DrawTarget> retVal;
151184: 
151184:   RefPtr<DrawTargetCG> newTarget = new DrawTargetCG();
151184: 
151184:   if (newTarget->Init(cg, aSize)) {
151184:     retVal = newTarget;
151184:   }
151184: 
151184:   if (mRecorder && retVal) {
210583:     return new DrawTargetRecording(mRecorder, retVal);
151184:   }
210583:   return retVal.forget();
151184: }
151184: #endif
151184: 
 99076: TemporaryRef<DataSourceSurface>
 99076: Factory::CreateWrappingDataSourceSurface(uint8_t *aData, int32_t aStride,
 99076:                                          const IntSize &aSize,
 99076:                                          SurfaceFormat aFormat)
 99076: {
154341:   if (aSize.width <= 0 || aSize.height <= 0) {
154341:     return nullptr;
154341:   }
154341: 
 99076:   RefPtr<SourceSurfaceRawData> newSurf = new SourceSurfaceRawData();
 99076: 
 99076:   if (newSurf->InitWrappingData(aData, aSize, aStride, aFormat, false)) {
210583:     return newSurf.forget();
 72423:   }
 99076: 
108475:   return nullptr;
 72423: }
 99076: 
153017: TemporaryRef<DataSourceSurface>
153017: Factory::CreateDataSourceSurface(const IntSize &aSize,
153017:                                  SurfaceFormat aFormat)
153017: {
180960:   if (!CheckSurfaceSize(aSize)) {
180960:     return nullptr;
180960:   }
180960: 
153017:   RefPtr<SourceSurfaceAlignedRawData> newSurf = new SourceSurfaceAlignedRawData();
153017:   if (newSurf->Init(aSize, aFormat)) {
210583:     return newSurf.forget();
153017:   }
153017: 
153017:   return nullptr;
153017: }
153017: 
178910: TemporaryRef<DataSourceSurface>
178910: Factory::CreateDataSourceSurfaceWithStride(const IntSize &aSize,
178910:                                            SurfaceFormat aFormat,
178910:                                            int32_t aStride)
178910: {
178910:   if (aStride < aSize.width * BytesPerPixel(aFormat)) {
178910:     return nullptr;
178910:   }
178910: 
178910:   RefPtr<SourceSurfaceAlignedRawData> newSurf = new SourceSurfaceAlignedRawData();
178910:   if (newSurf->InitWithStride(aSize, aFormat, aStride)) {
210583:     return newSurf.forget();
178910:   }
178910: 
178910:   return nullptr;
178910: }
178910: 
114782: TemporaryRef<DrawEventRecorder>
114782: Factory::CreateEventRecorderForFile(const char *aFilename)
114782: {
114782:   return new DrawEventRecorderFile(aFilename);
 99076: }
114782: 
114782: void
114782: Factory::SetGlobalEventRecorder(DrawEventRecorder *aRecorder)
114782: {
114782:   mRecorder = aRecorder;
 99076: }
114782: 
114782: }
114782: }
