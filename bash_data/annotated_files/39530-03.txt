14210: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
14210: /* ***** BEGIN LICENSE BLOCK *****
14210:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
14210:  *
14210:  * The contents of this file are subject to the Mozilla Public License Version
14210:  * 1.1 (the "License"); you may not use this file except in compliance with
14210:  * the License. You may obtain a copy of the License at
14210:  * http://www.mozilla.org/MPL/
14210:  *
14210:  * Software distributed under the License is distributed on an "AS IS" basis,
14210:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
14210:  * for the specific language governing rights and limitations under the
14210:  * License.
14210:  *
14210:  * The Original Code is Mozilla Communicator client code.
14210:  *
14210:  * The Initial Developer of the Original Code is
14210:  * Netscape Communications Corporation.
14210:  * Portions created by the Initial Developer are Copyright (C) 1998
14210:  * the Initial Developer. All Rights Reserved.
14210:  *
14210:  * Contributor(s):
14210:  *
14210:  * Alternatively, the contents of this file may be used under the terms of
14210:  * either of the GNU General Public License Version 2 or later (the "GPL"),
14210:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
14210:  * in which case the provisions of the GPL or the LGPL are applicable instead
14210:  * of those above. If you wish to allow use of your version of this file only
14210:  * under the terms of either the GPL or the LGPL, and not to allow others to
14210:  * use your version of this file under the terms of the MPL, indicate your
14210:  * decision by deleting the provisions above and replace them with the notice
14210:  * and other provisions required by the GPL or the LGPL. If you do not delete
14210:  * the provisions above, a recipient may use your version of this file under
14210:  * the terms of any one of the MPL, the GPL or the LGPL.
14210:  *
14210:  * ***** END LICENSE BLOCK ***** */
14210: 
14210: #ifndef nsFirstLetterFrame_h__
14210: #define nsFirstLetterFrame_h__
14210: 
14210: /* rendering object for CSS :first-letter pseudo-element */
14210: 
14210: #include "nsHTMLContainerFrame.h"
14210: 
14210: #define nsFirstLetterFrameSuper nsHTMLContainerFrame
14210: 
14210: class nsFirstLetterFrame : public nsFirstLetterFrameSuper {
14210: public:
32423:   NS_DECL_FRAMEARENA_HELPERS
32423: 
14210:   nsFirstLetterFrame(nsStyleContext* aContext) : nsHTMLContainerFrame(aContext) {}
14210: 
14210:   NS_IMETHOD Init(nsIContent*      aContent,
14210:                   nsIFrame*        aParent,
14210:                   nsIFrame*        aPrevInFlow);
14210:   NS_IMETHOD SetInitialChildList(nsIAtom*        aListName,
30790:                                  nsFrameList&    aChildList);
14210: #ifdef NS_DEBUG
14210:   NS_IMETHOD GetFrameName(nsAString& aResult) const;
14210: #endif
14210:   virtual nsIAtom* GetType() const;
14210: 
14210:   virtual PRBool IsFrameOfType(PRUint32 aFlags) const
14210:   {
14210:     if (!GetStyleDisplay()->IsFloating())
14210:       aFlags = aFlags & ~(nsIFrame::eLineParticipant);
14210:     return nsFirstLetterFrameSuper::IsFrameOfType(aFlags &
14210:       ~(nsIFrame::eBidiInlineContainer));
14210:   }
14210: 
14210:   virtual nscoord GetMinWidth(nsIRenderingContext *aRenderingContext);
14210:   virtual nscoord GetPrefWidth(nsIRenderingContext *aRenderingContext);
14210:   virtual void AddInlineMinWidth(nsIRenderingContext *aRenderingContext,
14210:                                  InlineMinWidthData *aData);
14210:   virtual void AddInlinePrefWidth(nsIRenderingContext *aRenderingContext,
14210:                                   InlinePrefWidthData *aData);
14210:   virtual nsSize ComputeSize(nsIRenderingContext *aRenderingContext,
14210:                              nsSize aCBSize, nscoord aAvailableWidth,
14210:                              nsSize aMargin, nsSize aBorder, nsSize aPadding,
14210:                              PRBool aShrinkWrap);
14210:   NS_IMETHOD Reflow(nsPresContext*          aPresContext,
14210:                     nsHTMLReflowMetrics&     aDesiredSize,
14210:                     const nsHTMLReflowState& aReflowState,
14210:                     nsReflowStatus&          aStatus);
14210: 
14210:   virtual PRBool CanContinueTextRun() const;
14210: 
14210: //override of nsFrame method
14210:   NS_IMETHOD GetChildFrameContainingOffset(PRInt32 inContentOffset,
14210:                                            PRBool inHint,
14210:                                            PRInt32* outFrameContentOffset,
14210:                                            nsIFrame **outChildFrame);
14210: 
14210:   nscoord GetFirstLetterBaseline() const { return mBaseline; }
14210: 
39530:   // For floating first letter frames, create a continuation for aChild and
39530:   // place it in the correct place. aContinuation is an outparam for the
39530:   // continuation that is created. aIsFluid determines if the continuation is
39530:   // fluid or not.
39530:   nsresult CreateContinuationForFloatingParent(nsPresContext* aPresContext,
39530:                                                nsIFrame* aChild,
39530:                                                nsIFrame** aContinuation,
39530:                                                PRBool aIsFluid);
39530: 
14210: protected:
14210:   nscoord mBaseline;
14210: 
14210:   virtual PRIntn GetSkipSides() const;
14210: 
14210:   void DrainOverflowFrames(nsPresContext* aPresContext);
14210: };
14210: 
14210: #endif /* nsFirstLetterFrame_h__ */
