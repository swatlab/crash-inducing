27812: /* -*- Mode: C; tab-width: 8; c-basic-offset: 8 -*- */
27812: /* vim:set softtabstop=8 shiftwidth=8: */
27812: /*-
27812:  * Copyright (C) 2006-2008 Jason Evans <jasone@FreeBSD.org>.
27812:  * All rights reserved.
27812:  *
27812:  * Redistribution and use in source and binary forms, with or without
27812:  * modification, are permitted provided that the following conditions
27812:  * are met:
27812:  * 1. Redistributions of source code must retain the above copyright
27812:  *    notice(s), this list of conditions and the following disclaimer as
27812:  *    the first lines of this file unmodified other than the possible
27812:  *    addition of one or more copyright notices.
27812:  * 2. Redistributions in binary form must reproduce the above copyright
27812:  *    notice(s), this list of conditions and the following disclaimer in
27812:  *    the documentation and/or other materials provided with the
27812:  *    distribution.
27812:  *
27812:  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
27812:  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
27812:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
27812:  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE
27812:  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
27812:  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
27812:  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
27812:  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
27812:  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
27812:  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
27812:  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
27812:  */
27812: 
27812: #ifndef _JEMALLOC_H_
27812: #define _JEMALLOC_H_
27812: 
27812: /* grab size_t */
27812: #ifdef _MSC_VER
27812: #include <crtdefs.h>
27806: #else
27812: #include <stddef.h>
27806: #endif
27812: 
27812: #ifdef __cplusplus
27812: extern "C" {
15458: #endif
15458: 
27812: typedef unsigned char jemalloc_bool;
27812: 
15458: extern const char	*_malloc_options;
15458: 
15458: /*
15458:  * jemalloc_stats() is not a stable interface.  When using jemalloc_stats_t, be
15458:  * sure that the compiled results of jemalloc.c are in sync with this header
15458:  * file.
15458:  */
15458: typedef struct {
15458: 	/*
15458: 	 * Run-time configuration settings.
15458: 	 */
27812: 	jemalloc_bool	opt_abort;	/* abort(3) on error? */
27812: 	jemalloc_bool	opt_junk;	/* Fill allocated/free memory with 0xa5/0x5a? */
27812: 	jemalloc_bool	opt_utrace;	/* Trace all allocation events? */
27812: 	jemalloc_bool	opt_sysv;	/* SysV semantics? */
27812: 	jemalloc_bool	opt_xmalloc;	/* abort(3) on OOM? */
27812: 	jemalloc_bool	opt_zero;	/* Fill allocated memory with 0x0? */
15458: 	size_t	narenas;	/* Number of arenas. */
15458: 	size_t	balance_threshold; /* Arena contention rebalance threshold. */
15458: 	size_t	quantum;	/* Allocation quantum. */
15458: 	size_t	small_max;	/* Max quantum-spaced allocation size. */
15458: 	size_t	large_max;	/* Max sub-chunksize allocation size. */
15458: 	size_t	chunksize;	/* Size of each virtual memory mapping. */
15458: 	size_t	dirty_max;	/* Max dirty pages per arena. */
34413: 	size_t	reserve_min;	/* reserve_low callback threshold. */
34413: 	size_t	reserve_max;	/* Maximum reserve size before unmapping. */
15458: 
15458: 	/*
15458: 	 * Current memory usage statistics.
15458: 	 */
15458: 	size_t	mapped;		/* Bytes mapped (not necessarily committed). */
15458: 	size_t	committed;	/* Bytes committed (readable/writable). */
15458: 	size_t	allocated;	/* Bytes allocted (in use by application). */
15458: 	size_t	dirty;		/* Bytes dirty (committed unused pages). */
34413: 	size_t	reserve_cur;	/* Current memory reserve. */
15458: } jemalloc_stats_t;
15458: 
15458: #ifndef MOZ_MEMORY_DARWIN
15458: void	*malloc(size_t size);
15458: void	*valloc(size_t size);
15458: void	*calloc(size_t num, size_t size);
15458: void	*realloc(void *ptr, size_t size);
15458: void	free(void *ptr);
15458: #endif
15458: 
15458: int	posix_memalign(void **memptr, size_t alignment, size_t size);
15458: void	*memalign(size_t alignment, size_t size);
15458: size_t	malloc_usable_size(const void *ptr);
15458: void	jemalloc_stats(jemalloc_stats_t *stats);
15610: 
34413: /* The x*() functions never return NULL. */
34413: void	*xmalloc(size_t size);
34413: void	*xcalloc(size_t num, size_t size);
34413: void	*xrealloc(void *ptr, size_t size);
34413: void	*xmemalign(size_t alignment, size_t size);
34413: 
34413: /*
34413:  * The allocator maintains a memory reserve that is used to satisfy allocation
34413:  * requests when no additional memory can be acquired from the operating
34413:  * system.  Under normal operating conditions, the reserve size is at least
34413:  * reserve_min bytes.  If the reserve is depleted or insufficient to satisfy an
34413:  * allocation request, then condition notifications are sent to one or more of
34413:  * the registered callback functions:
34413:  *
34413:  *   RESERVE_CND_LOW: The reserve had to be used to satisfy an allocation
34413:  *                    request, which dropped the reserve size below the
34413:  *                    minimum.  The callee should try to free memory in order
34413:  *                    to restore the reserve.
34413:  *
34413:  *   RESERVE_CND_CRIT: The reserve was not large enough to satisfy a pending
34413:  *                     allocation request.  Some callee must free adequate
34413:  *                     memory in order to prevent application failure (unless
34413:  *                     the condition spontaneously desists due to concurrent
34413:  *                     deallocation).
34413:  *
34413:  *   RESERVE_CND_FAIL: An allocation request could not be satisfied, despite all
34413:  *                     attempts.  The allocator is about to terminate the
34413:  *                     application.
34413:  *
34413:  * The order in which the callback functions are called is only loosely
34413:  * specified: in the absence of interposing callback
34413:  * registrations/unregistrations, enabled callbacks will be called in an
34413:  * arbitrary round-robin order.
34413:  *
34413:  * Condition notifications are sent to callbacks only while conditions exist.
34413:  * For example, just before the allocator sends a RESERVE_CND_LOW condition
34413:  * notification to a callback, the reserve is in fact depleted.  However, due
34413:  * to allocator concurrency, the reserve may have been restored by the time the
34413:  * callback function executes.  Furthermore, if the reserve is restored at some
34413:  * point during the delivery of condition notifications to callbacks, no
34413:  * further deliveries will occur, since the condition no longer exists.
34413:  *
34413:  * Callback functions can freely call back into the allocator (i.e. the
34413:  * allocator releases all internal resources before calling each callback
34413:  * function), though allocation is discouraged, since recursive callbacks are
34413:  * likely to result, which places extra burden on the application to avoid
34413:  * deadlock.
34413:  *
34413:  * Callback functions must be thread-safe, since it is possible that multiple
34413:  * threads will call into the same callback function concurrently.
34413:  */
34413: 
34413: /* Memory reserve condition types. */
34413: typedef enum {
34413: 	RESERVE_CND_LOW,
34413: 	RESERVE_CND_CRIT,
34413: 	RESERVE_CND_FAIL
34413: } reserve_cnd_t;
34413: 
34413: /*
34413:  * Reserve condition notification callback function type definition.
34413:  *
34413:  * Inputs:
34413:  *   ctx: Opaque application data, as passed to reserve_cb_register().
34413:  *   cnd: Condition type being delivered.
34413:  *   size: Allocation request size for the allocation that caused the condition.
34413:  */
34413: typedef void reserve_cb_t(void *ctx, reserve_cnd_t cnd, size_t size);
34413: 
34413: /*
34413:  * Register a callback function.
34413:  *
34413:  * Inputs:
34413:  *   cb: Callback function pointer.
34413:  *   ctx: Opaque application data, passed to cb().
34413:  *
34413:  * Output:
34413:  *   ret: If true, failure due to OOM; success otherwise.
34413:  */
34413: jemalloc_bool	reserve_cb_register(reserve_cb_t *cb, void *ctx);
34413: 
34413: /*
34413:  * Unregister a callback function.
34413:  *
34413:  * Inputs:
34413:  *   cb: Callback function pointer.
34413:  *   ctx: Opaque application data, same as that passed to reserve_cb_register().
34413:  *
34413:  * Output:
34413:  *   ret: False upon success, true if the {cb,ctx} registration could not be
34413:  *        found.
34413:  */
34413: jemalloc_bool	reserve_cb_unregister(reserve_cb_t *cb, void *ctx);
34413: 
34413: /*
34413:  * Get the current reserve size.
34413:  *
34413:  * ret: Current reserve size.
34413:  */
34413: size_t	reserve_cur_get(void);
34413: 
34413: /*
34413:  * Get the minimum acceptable reserve size.  If the reserve drops below this
34413:  * value, the RESERVE_CND_LOW condition notification is sent to the callbacks.
34413:  *
34413:  * ret: Minimum acceptable reserve size.
34413:  */
34413: size_t	reserve_min_get(void);
34413: 
34413: /*
34413:  * Set the minimum acceptable reserve size.
34413:  *
34413:  * min: Reserve threshold.  This value may be internally rounded up.
34413:  * ret: False if the reserve was successfully resized; true otherwise.  Note
34413:  *      that failure to resize the reserve also results in a RESERVE_CND_LOW
34413:  *      condition.
34413:  */
34413: jemalloc_bool	reserve_min_set(size_t min);
34413: 
27812: #ifdef __cplusplus
27812: } /* extern "C" */
27812: #endif
27812: 
27812: #endif /* _JEMALLOC_H_ */
