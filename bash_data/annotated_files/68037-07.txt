    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Mozilla Foundation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Alexander Surkov <surkov.alexander@gmail.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsXFormsWidgetsAccessible.h"
    1: 
67790: #include "States.h"
67790: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsDropmarkerWidgetAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsDropmarkerWidgetAccessible::
43504:   nsXFormsDropmarkerWidgetAccessible(nsIContent *aContent,
43504:                                      nsIWeakReference *aShell) :
43504:   nsLeafAccessible(aContent, aShell)
    1: {
    1: }
    1: 
52027: PRUint32
52027: nsXFormsDropmarkerWidgetAccessible::NativeRole()
    1: {
52027:   return nsIAccessibleRole::ROLE_PUSHBUTTON;
    1: }
    1: 
67790: PRUint64
67790: nsXFormsDropmarkerWidgetAccessible::NativeState()
    1: {
68037: 
68037:   if (IsDefunct())
68037:     return states::DEFUNCT;
68037: 
    1:   PRBool isOpen = PR_FALSE;
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   nsresult rv = sXFormsService->IsDropmarkerOpen(DOMNode, &isOpen);
67790:   NS_ENSURE_SUCCESS(rv, 0);
    1: 
67790:   return isOpen ? states::PRESSED: 0;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsDropmarkerWidgetAccessible::GetNumActions(PRUint8 *aCount)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aCount);
    1: 
    1:   *aCount = 1;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsDropmarkerWidgetAccessible::GetActionName(PRUint8 aIndex,
    1:                                                   nsAString& aName)
    1: {
    1:   if (aIndex != eAction_Click)
    1:     return NS_ERROR_INVALID_ARG;
    1: 
    1:   PRBool isOpen = PR_FALSE;
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   nsresult rv = sXFormsService->IsDropmarkerOpen(DOMNode, &isOpen);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (isOpen)
    1:     aName.AssignLiteral("close");
    1:   else
    1:     aName.AssignLiteral("open");
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsDropmarkerWidgetAccessible::DoAction(PRUint8 aIndex)
    1: {
    1:   if (aIndex != eAction_Click)
    1:     return NS_ERROR_INVALID_ARG;
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   return sXFormsService->ToggleDropmarkerState(DOMNode);
    1: }
    1: 
    1: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsCalendarWidgetAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsCalendarWidgetAccessible::
43504: nsXFormsCalendarWidgetAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsAccessibleWrap(aContent, aShell)
    1: {
    1: }
    1: 
52027: PRUint32
52027: nsXFormsCalendarWidgetAccessible::NativeRole()
    1: {
52027:   return nsIAccessibleRole::ROLE_CALENDAR;
    1: }
    1: 
    1: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsComboboxPopupWidgetAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsComboboxPopupWidgetAccessible::
43504:   nsXFormsComboboxPopupWidgetAccessible(nsIContent *aContent,
43504:                                         nsIWeakReference *aShell) :
43504:   nsXFormsAccessible(aContent, aShell)
    1: {
    1: }
    1: 
52027: PRUint32
52027: nsXFormsComboboxPopupWidgetAccessible::NativeRole()
    1: {
52027:   return nsIAccessibleRole::ROLE_LIST;
    1: }
    1: 
67790: PRUint64
67790: nsXFormsComboboxPopupWidgetAccessible::NativeState()
    1: {
67790:   PRUint64 state = nsXFormsAccessible::NativeState();
    1: 
    1:   PRBool isOpen = PR_FALSE;
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
67790:   nsresult rv = sXFormsService->IsDropmarkerOpen(DOMNode, &isOpen);
67790:   NS_ENSURE_SUCCESS(rv, state);
    1: 
67790:   state |= states::FOCUSABLE;
    1: 
    1:   if (isOpen)
67790:     state = states::FLOATING;
    1:   else
67790:     state = states::INVISIBLE;
    1: 
67790:   return state;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsComboboxPopupWidgetAccessible::GetValue(nsAString& aValue)
    1: {
    1:   aValue.Truncate();
    1:   return NS_OK;
    1: }
    1: 
20246: nsresult
20246: nsXFormsComboboxPopupWidgetAccessible::GetNameInternal(nsAString& aName)
    1: {
20246:   // Override nsXFormsAccessible::GetName() to prevent name calculation by
20246:   // XForms rules.
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsComboboxPopupWidgetAccessible::GetDescription(nsAString& aDescription)
    1: {
    1:   aDescription.Truncate();
    1:   return NS_OK;
    1: }
    1: 
    1: void
    1: nsXFormsComboboxPopupWidgetAccessible::CacheChildren()
    1: {
43504:   nsCOMPtr<nsIDOMNode> parent = do_QueryInterface(mContent->GetNodeParent());
    1:   // Parent node must be an xforms:select1 element.
    1:   CacheSelectChildren(parent);
    1: }
    1: 
