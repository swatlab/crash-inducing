42153: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42153:  * ***** BEGIN LICENSE BLOCK *****
42153:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42153:  *
42153:  * The contents of this file are subject to the Mozilla Public License Version
42153:  * 1.1 (the "License"); you may not use this file except in compliance with
42153:  * the License. You may obtain a copy of the License at
42153:  * http://www.mozilla.org/MPL/
42153:  *
42153:  * Software distributed under the License is distributed on an "AS IS" basis,
42153:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42153:  * for the specific language governing rights and limitations under the
42153:  * License.
42153:  *
42153:  * The Original Code is Android port code.
42153:  *
42153:  * The Initial Developer of the Original Code is
42153:  *   Mozilla Foundation
42153:  * Portions created by the Initial Developer are Copyright (C) 2010
42153:  * the Initial Developer. All Rights Reserved.
42153:  *
42153:  * Contributor(s):
42153:  *   Vladimir Vukicevic <vladimir@pobox.com>
42153:  *
42153:  * Alternatively, the contents of this file may be used under the terms of
42153:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42153:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42153:  * in which case the provisions of the GPL or the LGPL are applicable instead
42153:  * of those above. If you wish to allow use of your version of this file only
42153:  * under the terms of either the GPL or the LGPL, and not to allow others to
42153:  * use your version of this file under the terms of the MPL, indicate your
42153:  * decision by deleting the provisions above and replace them with the notice
42153:  * and other provisions required by the GPL or the LGPL. If you do not delete
42153:  * the provisions above, a recipient may use your version of this file under
42153:  * the terms of any one of the MPL, the GPL or the LGPL.
42153:  *
42153:  * ***** END LICENSE BLOCK ***** */
42153: 
42153: #include <android/log.h>
42153: 
42153: #include <sys/types.h>
42153: #include <dirent.h>
42153: 
42153: #include "gfxAndroidPlatform.h"
42153: 
42153: #include "cairo.h"
42153: #include "cairo-ft.h"
42153: 
42153: #include "gfxImageSurface.h"
42153: 
42153: #include "nsUnicharUtils.h"
42153: 
42153: #include "nsMathUtils.h"
42153: #include "nsTArray.h"
42153: 
42153: #include "qcms.h"
42153: 
42153: #include "ft2build.h"
42153: #include FT_FREETYPE_H
42153: #include "gfxFT2Fonts.h"
48022: #include "gfxPlatformFontList.h"
48022: #include "gfxFT2FontList.h"
42153: 
42153: static FT_Library gPlatformFTLibrary = NULL;
42153: 
42153: #define LOG(args...)  __android_log_print(ANDROID_LOG_INFO, "Gecko" , ## args)
42153: 
42153: gfxAndroidPlatform::gfxAndroidPlatform()
42153: {
42153:     FT_Init_FreeType(&gPlatformFTLibrary);
42153: 
42153:     mFonts.Init(200);
42153:     mFontAliases.Init(20);
42153:     mFontSubstitutes.Init(50);
42153:     mPrefFonts.Init(10);
42153: 
42153:     UpdateFontList();
42153: }
42153: 
42153: gfxAndroidPlatform::~gfxAndroidPlatform()
42153: {
42153:     cairo_debug_reset_static_data();
42153: 
42153:     FT_Done_FreeType(gPlatformFTLibrary);
42153:     gPlatformFTLibrary = NULL;
42153: }
42153: 
42153: already_AddRefed<gfxASurface>
42153: gfxAndroidPlatform::CreateOffscreenSurface(const gfxIntSize& size,
54253:                                       gfxASurface::gfxContentType contentType)
42153: {
46392:     nsRefPtr<gfxASurface> newSurface;
54253:     if (contentType == gfxImageSurface::CONTENT_COLOR)
46392:         newSurface = new gfxImageSurface (size, gfxASurface::ImageFormatRGB16_565);
46392:     else
54253:         newSurface = new gfxImageSurface (size, gfxASurface::FormatFromContent(contentType));
42153: 
42153:     return newSurface.forget();
42153: }
42153: 
42153: struct FontListData {
42153:     FontListData(nsIAtom *aLangGroup, const nsACString& aGenericFamily, nsTArray<nsString>& aListOfFonts) :
42153:         mLangGroup(aLangGroup), mGenericFamily(aGenericFamily), mStringArray(aListOfFonts) {}
42153:     nsIAtom *mLangGroup;
42153:     const nsACString& mGenericFamily;
42153:     nsTArray<nsString>& mStringArray;
42153: };
42153: 
42153: static PLDHashOperator
42153: FontListHashEnumFunc(nsStringHashKey::KeyType aKey,
42153:                      nsRefPtr<FontFamily>& aFontFamily,
42153:                      void* userArg)
42153: {
42153:     FontListData *data = (FontListData*)userArg;
42153: 
42153:     // use the first variation for now.  This data should be the same
42153:     // for all the variations and should probably be moved up to
42153:     // the Family
42153:     gfxFontStyle style;
42153:     style.language = data->mLangGroup;
42153:     nsRefPtr<FontEntry> aFontEntry = aFontFamily->FindFontEntry(style);
42153:     NS_ASSERTION(aFontEntry, "couldn't find any font entry in family");
42153:     if (!aFontEntry)
42153:         return PL_DHASH_NEXT;
42153: 
42153: 
42153:     data->mStringArray.AppendElement(aFontFamily->Name());
42153: 
42153:     return PL_DHASH_NEXT;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::GetFontList(nsIAtom *aLangGroup,
42153:                                 const nsACString& aGenericFamily,
42153:                                 nsTArray<nsString>& aListOfFonts)
42153: {
42153:     FontListData data(aLangGroup, aGenericFamily, aListOfFonts);
42153: 
42153:     mFonts.Enumerate(FontListHashEnumFunc, &data);
42153: 
42153:     aListOfFonts.Sort();
42153:     aListOfFonts.Compact();
42153: 
42153:     return NS_OK;
42153: }
42153: 
42153: 
42153: void
42153: gfxAndroidPlatform::AppendFacesFromFontFile(const char *fileName)
42153: {
42153:     FT_Face dummy;
42153:     if (FT_Err_Ok == FT_New_Face(GetFTLibrary(), fileName, -1, &dummy)) {
42153:         for (FT_Long i = 0; i < dummy->num_faces; i++) {
42153:             FT_Face face;
42153:             if (FT_Err_Ok != FT_New_Face(GetFTLibrary(), fileName, 
42153:                                          i, &face))
42153:                 continue;
42153: 
42153:             FontEntry* fe = FontEntry::CreateFontEntryFromFace(face);
42153:             if (fe) {
42153:                 LOG("font family: %s", face->family_name);
42153: 
42153:                 NS_ConvertUTF8toUTF16 name(face->family_name);
42153:                 ToLowerCase(name);
42153: 
42153:                 nsRefPtr<FontFamily> ff;
42153:                 if (!mFonts.Get(name, &ff)) {
42153:                     ff = new FontFamily(name);
42153:                     mFonts.Put(name, ff);
42153:                 }
42153: 
42153:                 ff->AddFontEntry(fe);
42153:                 ff->SetHasStyles(PR_TRUE);
42153:             }
42153:         }
42153:         FT_Done_Face(dummy);
42153:     }
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::UpdateFontList()
42153: {
42153:     gfxFontCache *fc = gfxFontCache::GetCache();
42153:     if (fc)
42153:         fc->AgeAllGenerations();
42153:     mFonts.Clear();
42153:     mFontAliases.Clear();
42153:     mFontSubstitutes.Clear();
42153:     mPrefFonts.Clear();
42153:     mCodepointsWithNoFonts.reset();
42153: 
42153:     //CancelLoader();
42153: 
42153:     DIR *d = opendir("/system/fonts");
42153:     struct dirent *ent = NULL;
42153:     while(d && (ent = readdir(d)) != NULL) {
42153:         int namelen = strlen(ent->d_name);
42153:         if (namelen > 4 &&
42153:             strcasecmp(ent->d_name + namelen - 4, ".ttf") == 0)
42153:         {
42153:             nsCString s("/system/fonts");
42153:             s.Append("/");
42153:             s.Append(nsDependentCString(ent->d_name));
42153: 
42153:             LOG("Font: %s", nsPromiseFlatCString(s).get());
42153: 
42153:             AppendFacesFromFontFile(nsPromiseFlatCString(s).get());
42153:         }
42153:     }
42153: 
42153:     // initialize the cmap loading process after font list has been initialized
42153:     //StartLoader(kDelayBeforeLoadingCmaps, kIntervalBetweenLoadingCmaps); 
42153: 
42153:     // initialize ranges of characters for which system-wide font search should be skipped
42153:     mCodepointsWithNoFonts.SetRange(0,0x1f);     // C0 controls
42153:     mCodepointsWithNoFonts.SetRange(0x7f,0x9f);  // C1 controls
42153: 
42153:     return NS_OK;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::ResolveFontName(const nsAString& aFontName,
42153:                                     FontResolverCallback aCallback,
42153:                                     void *aClosure,
42153:                                     PRBool& aAborted)
42153: {
42153:     if (aFontName.IsEmpty())
42153:         return NS_ERROR_FAILURE;
42153: 
48022:     nsAutoString resolvedName;
48022:     gfxPlatformFontList* platformFontList = gfxPlatformFontList::PlatformFontList();
48022:     if (platformFontList) {
48022:         if (!platformFontList->ResolveFontName(aFontName, resolvedName)) {
48022:             aAborted = PR_FALSE;
48022:             return NS_OK;
48022:         }
48022:     }
48022: 
42153:     nsAutoString keyName(aFontName);
42153:     ToLowerCase(keyName);
42153: 
42153:     nsRefPtr<FontFamily> ff;
42153:     if (mFonts.Get(keyName, &ff) ||
42153:         mFontSubstitutes.Get(keyName, &ff) ||
42153:         mFontAliases.Get(keyName, &ff))
42153:     {
42153:         aAborted = !(*aCallback)(ff->Name(), aClosure);
42153:     } else {
42153:         aAborted = PR_FALSE;
42153:     }
42153: 
42153:     return NS_OK;
42153: }
42153: 
42153: static PRBool SimpleResolverCallback(const nsAString& aName, void* aClosure)
42153: {
42153:     nsString *result = static_cast<nsString*>(aClosure);
42153:     result->Assign(aName);
42153:     return PR_FALSE;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName)
42153: {
42153:     aFamilyName.Truncate();
42153:     PRBool aborted;
42153:     return ResolveFontName(aFontName, SimpleResolverCallback, &aFamilyName, aborted);
42153: }
42153: 
48022: gfxPlatformFontList*
48022: gfxAndroidPlatform::CreatePlatformFontList()
48022: {
57104:     gfxPlatformFontList* list = new gfxFT2FontList();
57104:     if (NS_SUCCEEDED(list->InitFontList())) {
57104:         return list;
57104:     }
57104:     gfxPlatformFontList::Shutdown();
57104:     return nsnull;
48022: }
48022: 
48022: PRBool
48022: gfxAndroidPlatform::IsFontFormatSupported(nsIURI *aFontURI, PRUint32 aFormatFlags)
48022: {
48022:     // check for strange format flags
48022:     NS_ASSERTION(!(aFormatFlags & gfxUserFontSet::FLAG_FORMAT_NOT_USED),
48022:                  "strange font format hint set");
48022: 
48022:     // accept supported formats
48022:     if (aFormatFlags & (gfxUserFontSet::FLAG_FORMAT_OPENTYPE | 
48022:                         gfxUserFontSet::FLAG_FORMAT_TRUETYPE)) {
48022:         return PR_TRUE;
48022:     }
48022: 
48022:     // reject all other formats, known and unknown
48022:     if (aFormatFlags != 0) {
48022:         return PR_FALSE;
48022:     }
48022: 
48022:     // no format hint set, need to look at data
48022:     return PR_TRUE;
48022: }
48022: 
42153: gfxFontGroup *
42153: gfxAndroidPlatform::CreateFontGroup(const nsAString &aFamilies,
42153:                                const gfxFontStyle *aStyle,
42153:                                gfxUserFontSet* aUserFontSet)
42153: {
48022:     return new gfxFT2FontGroup(aFamilies, aStyle, aUserFontSet);
42153: }
42153: 
42153: FT_Library
42153: gfxAndroidPlatform::GetFTLibrary()
42153: {
42153:     return gPlatformFTLibrary;
42153: }
42153: 
42153: FontFamily *
42153: gfxAndroidPlatform::FindFontFamily(const nsAString& aName)
42153: {
42153:     nsAutoString name(aName);
42153:     ToLowerCase(name);
42153: 
42153:     nsRefPtr<FontFamily> ff;
42153:     if (!mFonts.Get(name, &ff) &&
42153:         !mFontSubstitutes.Get(name, &ff) &&
42153:         !mFontAliases.Get(name, &ff)) {
42153:         return nsnull;
42153:     }
42153:     return ff.get();
42153: }
42153: 
42153: FontEntry *
42153: gfxAndroidPlatform::FindFontEntry(const nsAString& aName, const gfxFontStyle& aFontStyle)
42153: {
42153:     nsRefPtr<FontFamily> ff = FindFontFamily(aName);
42153:     if (!ff)
42153:         return nsnull;
42153: 
42153:     return ff->FindFontEntry(aFontStyle);
42153: }
42153: 
42153: static PLDHashOperator
42153: FindFontForCharProc(nsStringHashKey::KeyType aKey,
42153:                     nsRefPtr<FontFamily>& aFontFamily,
42153:                     void* aUserArg)
42153: {
42153:     FontSearch *data = (FontSearch*)aUserArg;
42153:     aFontFamily->FindFontForChar(data);
42153:     return PL_DHASH_NEXT;
42153: }
42153: 
42153: already_AddRefed<gfxFont>
42153: gfxAndroidPlatform::FindFontForChar(PRUint32 aCh, gfxFont *aFont)
42153: {
42153:     // is codepoint with no matching font? return null immediately
42153:     if (mCodepointsWithNoFonts.test(aCh)) {
42153:         return nsnull;
42153:     }
42153: 
42153:     FontSearch data(aCh, aFont);
42153: 
42153:     // find fonts that support the character
42153:     mFonts.Enumerate(FindFontForCharProc, &data);
42153: 
42153:     if (data.mBestMatch) {
42153:         nsRefPtr<gfxFT2Font> font =
42153:             gfxFT2Font::GetOrMakeFont(static_cast<FontEntry*>(data.mBestMatch.get()), 
42153:                                       aFont->GetStyle()); 
42153:         gfxFont* ret = font.forget().get();
42153:         return already_AddRefed<gfxFont>(ret);
42153:     }
42153: 
42153:     // no match? add to set of non-matching codepoints
42153:     mCodepointsWithNoFonts.set(aCh);
42153: 
42153:     return nsnull;
42153: }
42153: 
48022: gfxFontEntry* 
48022: gfxAndroidPlatform::MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
48022:                                      const PRUint8 *aFontData, PRUint32 aLength)
48022: {
48022:     return gfxPlatformFontList::PlatformFontList()->MakePlatformFont(aProxyEntry,
48022:                                                                      aFontData,
48022:                                                                      aLength);
48022: }
48022: 
42153: PRBool
42153: gfxAndroidPlatform::GetPrefFontEntries(const nsCString& aKey, nsTArray<nsRefPtr<gfxFontEntry> > *aFontEntryList)
42153: {
42153:     return mPrefFonts.Get(aKey, aFontEntryList);
42153: }
42153: 
42153: void
42153: gfxAndroidPlatform::SetPrefFontEntries(const nsCString& aKey, nsTArray<nsRefPtr<gfxFontEntry> >& aFontEntryList)
42153: {
42153:     mPrefFonts.Put(aKey, aFontEntryList);
42153: }
