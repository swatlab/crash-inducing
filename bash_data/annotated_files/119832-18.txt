 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
119832: #include "nsMemory.h"
119832: #include "nsAutoPtr.h"
     1: #include "nsCertVerificationThread.h"
 81304: #include "nsThreadUtils.h"
     1: 
 64576: using namespace mozilla;
 64576: 
     1: nsCertVerificationThread *nsCertVerificationThread::verification_thread_singleton;
     1: 
     1: NS_IMPL_THREADSAFE_ISUPPORTS1(nsCertVerificationResult, nsICertVerificationResult)
     1: 
 81304: namespace {
 81304: class DispatchCertVerificationResult : public nsRunnable
 81304: {
 81304: public:
 81304:   DispatchCertVerificationResult(nsICertVerificationListener* aListener,
 81304:                                  nsIX509Cert3* aCert,
 81304:                                  nsICertVerificationResult* aResult)
 81304:     : mListener(aListener)
 81304:     , mCert(aCert)
 81304:     , mResult(aResult)
 81304:   { }
 81304: 
 81304:   NS_IMETHOD Run() {
 81304:     mListener->Notify(mCert, mResult);
 81304:     return NS_OK;
 81304:   }
 81304: 
 81304: private:
 81304:   nsCOMPtr<nsICertVerificationListener> mListener;
 81304:   nsCOMPtr<nsIX509Cert3> mCert;
 81304:   nsCOMPtr<nsICertVerificationResult> mResult;
 81304: };
 81304: } // anonymous namespace
 81304: 
     1: void nsCertVerificationJob::Run()
     1: {
     1:   if (!mListener || !mCert)
     1:     return;
     1: 
108991:   uint32_t verified;
108991:   uint32_t count;
     1:   PRUnichar **usages;
     1: 
     1:   nsCOMPtr<nsICertVerificationResult> ires;
119832:   nsRefPtr<nsCertVerificationResult> vres = new nsCertVerificationResult;
     1:   if (vres)
     1:   {
 80486:     nsresult rv = mCert->GetUsagesArray(false, // do not ignore OCSP
     1:                                         &verified,
     1:                                         &count,
     1:                                         &usages);
     1:     vres->mRV = rv;
     1:     if (NS_SUCCEEDED(rv))
     1:     {
     1:       vres->mVerified = verified;
     1:       vres->mCount = count;
     1:       vres->mUsages = usages;
     1:     }
     1: 
     1:     ires = vres;
     1:   }
     1:   
     1:   nsCOMPtr<nsIX509Cert3> c3 = do_QueryInterface(mCert);
 81304:   nsCOMPtr<nsIRunnable> r = new DispatchCertVerificationResult(mListener, c3, ires);
 81304:   NS_DispatchToMainThread(r);
     1: }
     1: 
     1: void nsSMimeVerificationJob::Run()
     1: {
     1:   if (!mMessage || !mListener)
     1:     return;
     1:   
     1:   nsresult rv;
     1:   
     1:   if (digest_data)
     1:     rv = mMessage->VerifyDetachedSignature(digest_data, digest_len);
     1:   else
     1:     rv = mMessage->VerifySignature();
     1:   
     1:   nsCOMPtr<nsICMSMessage2> m2 = do_QueryInterface(mMessage);
     1:   mListener->Notify(m2, rv);
     1: }
     1: 
     1: nsCertVerificationThread::nsCertVerificationThread()
106838: : mJobQ(nullptr)
     1: {
     1:   NS_ASSERTION(!verification_thread_singleton, 
     1:                "nsCertVerificationThread is a singleton, caller attempts"
     1:                " to create another instance!");
     1:   
     1:   verification_thread_singleton = this;
     1: }
     1: 
     1: nsCertVerificationThread::~nsCertVerificationThread()
     1: {
106838:   verification_thread_singleton = nullptr;
     1: }
     1: 
     1: nsresult nsCertVerificationThread::addJob(nsBaseVerificationJob *aJob)
     1: {
     1:   if (!aJob || !verification_thread_singleton)
     1:     return NS_ERROR_FAILURE;
     1:   
     1:   if (!verification_thread_singleton->mThreadHandle)
     1:     return NS_ERROR_OUT_OF_MEMORY;
     1: 
 64576:   MutexAutoLock threadLock(verification_thread_singleton->mMutex);
     1: 
     1:   verification_thread_singleton->mJobQ.Push(aJob);
 64576:   verification_thread_singleton->mCond.NotifyAll();
     1:   
     1:   return NS_OK;
     1: }
     1: 
     1: void nsCertVerificationThread::Run(void)
     1: {
 80486:   while (true) {
     1: 
106838:     nsBaseVerificationJob *job = nullptr;
     1: 
     1:     {
 64576:       MutexAutoLock threadLock(verification_thread_singleton->mMutex);
     1: 
 72444:       while (!exitRequested(threadLock) &&
 72444:              0 == verification_thread_singleton->mJobQ.GetSize()) {
     1:         // no work to do ? let's wait a moment
     1: 
 64576:         mCond.Wait();
     1:       }
     1:       
 72444:       if (exitRequested(threadLock))
     1:         break;
     1:       
  3233:       job = static_cast<nsBaseVerificationJob*>(mJobQ.PopFront());
     1:     }
     1: 
     1:     if (job)
     1:     {
     1:       job->Run();
     1:       delete job;
     1:     }
     1:   }
     1:   
     1:   {
 64576:     MutexAutoLock threadLock(verification_thread_singleton->mMutex);
     1: 
     1:     while (verification_thread_singleton->mJobQ.GetSize()) {
     1:       nsCertVerificationJob *job = 
  3233:         static_cast<nsCertVerificationJob*>(mJobQ.PopFront());
     1:       delete job;
     1:     }
 72444:     postStoppedEventToMainThread(threadLock);
     1:   }
     1: }
     1: 
     1: nsCertVerificationResult::nsCertVerificationResult()
106878: : mRV(NS_OK),
     1:   mVerified(0),
     1:   mCount(0),
     1:   mUsages(0)
     1: {
     1: }
     1: 
     1: nsCertVerificationResult::~nsCertVerificationResult()
     1: {
     1:   if (mUsages)
     1:   {
     1:     NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(mCount, mUsages);
     1:   }
     1: }
     1: 
     1: NS_IMETHODIMP
108991: nsCertVerificationResult::GetUsagesArrayResult(uint32_t *aVerified,
108991:                                                uint32_t *aCount,
     1:                                                PRUnichar ***aUsages)
     1: {
     1:   if (NS_FAILED(mRV))
     1:     return mRV;
     1:   
     1:   // transfer ownership
     1:   
     1:   *aVerified = mVerified;
     1:   *aCount = mCount;
     1:   *aUsages = mUsages;
     1:   
     1:   mVerified = 0;
     1:   mCount = 0;
     1:   mUsages = 0;
     1:   
     1:   nsresult rv = mRV;
     1:   
     1:   mRV = NS_ERROR_FAILURE; // this object works only once...
     1:   
     1:   return rv;
     1: }
