    1: /* -*- Mode: IDL; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the new Mozilla toolkit.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Benjamin Smedberg <bsmedberg@covad.net>
    1:  * Portions created by the Initial Developer are Copyright (C) 2004
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: 
    1: interface nsILocalFile;
    1: interface nsIToolkitProfile;
    1: interface nsIProfileUnlocker;
    1: 
    1: /**
    1:  * Hold on to a profile lock. Once you release the last reference to this
    1:  * interface, the profile lock is released.
    1:  */
90120: [scriptable, uuid(7c58c703-d245-4864-8d75-9648ca4a6139)]
    1: interface nsIProfileLock : nsISupports
    1: {
    1:     /**
    1:      * The main profile directory.
    1:      */
    1:     readonly attribute nsILocalFile directory;
    1:     
    1:     /**
    1:      * A directory corresponding to the main profile directory that exists for
    1:      * the purpose of storing data on the local filesystem, including cache
    1:      * files or other data files that may not represent critical user data.
    1:      * (e.g., this directory may not be included as part of a backup scheme.)
    1:      *
    1:      * In some cases, this directory may just be the main profile directory.
    1:      */
    1:     readonly attribute nsILocalFile localDirectory;
    1: 
    1:     /**
89683:      * The timestamp of an existing profile lock at lock time.
89683:      */
89683:     readonly attribute PRInt64 replacedLockTime;
89683: 
89683:     /**
    1:      * Unlock the profile.
    1:      */
    1:     void unlock();
    1: };
    1: 
    1: /**
    1:  * A interface representing a profile.
    1:  * @note THIS INTERFACE SHOULD BE IMPLEMENTED BY THE TOOLKIT CODE ONLY! DON'T
    1:  *       EVEN THINK ABOUT IMPLEMENTING THIS IN JAVASCRIPT!
    1:  */
    1: [scriptable, uuid(7422b090-4a86-4407-972e-75468a625388)]
    1: interface nsIToolkitProfile : nsISupports
    1: {
    1:     /**
    1:      * The location of the profile directory.
    1:      */
    1:     readonly attribute nsILocalFile rootDir;
    1: 
    1:     /**
    1:      * The location of the profile local directory, which may be the same as
    1:      * the root directory.  See nsIProfileLock::localDirectory.
    1:      */
    1:     readonly attribute nsILocalFile localDir;
    1: 
    1:     /**
    1:      * The name of the profile.
    1:      */
    1:     attribute AUTF8String name;
    1: 
    1:     /**
    1:      * Removes the profile from the registry of profiles.
    1:      *
    1:      * @param removeFiles
    1:      *        Indicates whether or not the profile directory should be
    1:      *        removed in addition.
    1:      */
    1:     void remove(in boolean removeFiles);
    1: 
    1:     /**
    1:      * Lock this profile using platform-specific locking methods.
    1:      *
    1:      * @param lockFile If locking fails, this may return a lockFile object
    1:      *                 which can be used in platform-specific ways to
    1:      *                 determine which process has the file locked. Null
    1:      *                 may be passed.
    1:      * @return An interface which holds a profile lock as long as you reference
    1:      *         it.
    1:      * @throws NS_ERROR_FILE_ACCESS_DENIED if the profile was already locked.
    1:      */
    1:     nsIProfileLock lock(out nsIProfileUnlocker aUnlocker);
    1: };
