    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is DOM Inspector.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Christopher A. Aillon <christopher@aillon.com>.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Christopher A. Aillon <christopher@aillon.com>
    1:  *   L. David Baron, Mozilla Corporation <dbaron@dbaron.org> (modified for reftest)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
47015: Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
    1: 
    1: const nsISupports                    = Components.interfaces.nsISupports;
    1:   
    1: const nsICommandLine                 = Components.interfaces.nsICommandLine;
    1: const nsICommandLineHandler          = Components.interfaces.nsICommandLineHandler;
    1: const nsISupportsString              = Components.interfaces.nsISupportsString;
    1: const nsIWindowWatcher               = Components.interfaces.nsIWindowWatcher;
    1: 
 8022: function RefTestCmdLineHandler() {}
 8022: RefTestCmdLineHandler.prototype =
    1: {
47015:   classID: Components.ID('{32530271-8c1b-4b7d-a812-218e42c6bb23}'),
47015: 
    1:   /* nsISupports */
47015:   QueryInterface: XPCOMUtils.generateQI([nsICommandLineHandler]),
    1: 
    1:   /* nsICommandLineHandler */
    1:   handle : function handler_handle(cmdLine) {
32968:     var args = { };
32968:     args.wrappedJSObject = args;
    1:     try {
    1:       var uristr = cmdLine.handleFlagWithParam("reftest", false);
    1:       if (uristr == null)
    1:         return;
    1:       try {
32968:         args.uri = cmdLine.resolveURI(uristr).spec;
    1:       }
    1:       catch (e) {
    1:         return;
    1:       }
    1:     }
    1:     catch (e) {
    1:       cmdLine.handleFlag("reftest", true);
    1:     }
    1: 
32968:     try {
32968:       var nocache = cmdLine.handleFlag("reftestnocache", false);
32968:       args.nocache = nocache;
32968:     }
32968:     catch (e) {
32968:     }
32968: 
48630:     try {
48630:       var skipslowtests = cmdLine.handleFlag("reftestskipslowtests", false);
48630:       args.skipslowtests = skipslowtests;
48630:     }
48630:     catch (e) {
48630:     }
48630: 
23578:     /* Ignore the platform's online/offline status while running reftests. */
23578:     var ios = Components.classes["@mozilla.org/network/io-service;1"]
23578:               .getService(Components.interfaces.nsIIOService2);
23578:     ios.manageOfflineStatus = false;
23578:     ios.offline = false;
23578: 
61193:     /**
61193:      * Manipulate preferences by adding to the *default* branch.  Adding
61193:      * to the default branch means the changes we make won't get written
61193:      * back to user preferences.
61193:      *
61193:      * We want to do this here rather than in reftest.js because it's
61193:      * important to force sRGB as an output profile for color management
61193:      * before we load a window.
85969:      *
85969:      * If you change these, please adjust them in the bootstrap.js function 
85969:      * setDefaultPrefs().  These are duplicated there so we can have a 
85969:      * restartless addon for reftest on native Android.
85969:      *
85969:      * FIXME: These should be in only one place. 
61193:      */
19003:     var prefs = Components.classes["@mozilla.org/preferences-service;1"].
61193:                 getService(Components.interfaces.nsIPrefService);
61193:     var branch = prefs.getDefaultBranch("");
61193:     branch.setBoolPref("gfx.color_management.force_srgb", true);
61193:     branch.setBoolPref("browser.dom.window.dump.enabled", true);
61193:     branch.setIntPref("ui.caretBlinkTime", -1);
61194:     branch.setBoolPref("dom.send_after_paint_to_content", true);
61193:     // no slow script dialogs
61193:     branch.setIntPref("dom.max_script_run_time", 0);
61193:     branch.setIntPref("dom.max_chrome_script_run_time", 0);
82634:     branch.setIntPref("hangmonitor.timeout", 0);
88010:     // Ensure autoplay is enabled for all platforms.
88010:     branch.setBoolPref("media.autoplay.enabled", true);
19003: 
    1:     var wwatch = Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
    1:                            .getService(nsIWindowWatcher);
    1:     wwatch.openWindow(null, "chrome://reftest/content/reftest.xul", "_blank",
    1:                       "chrome,dialog=no,all", args);
    1:     cmdLine.preventDefault = true;
    1:   },
    1: 
    1:   helpInfo : "  -reftest <file>    Run layout acceptance tests on given manifest.\n"
    1: };
    1: 
47015: var NSGetFactory = XPCOMUtils.generateNSGetFactory([RefTestCmdLineHandler]);
