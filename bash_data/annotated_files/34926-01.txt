    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsObserverList.h"
    1: 
    1: #include "nsAutoPtr.h"
    1: #include "nsCOMArray.h"
    1: #include "nsISimpleEnumerator.h"
    1: 
    1: nsresult
    1: nsObserverList::AddObserver(nsIObserver* anObserver, PRBool ownsWeak)
    1: {
    1:     NS_ASSERTION(anObserver, "Null input");
    1: 
    1:     if (!ownsWeak) {
    1:         ObserverRef* o = mObservers.AppendElement(anObserver);
    1:         if (!o)
    1:             return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:         return NS_OK;
    1:     }
    1:         
    1:     nsCOMPtr<nsIWeakReference> weak = do_GetWeakReference(anObserver);
    1:     if (!weak)
    1:         return NS_NOINTERFACE;
    1: 
    1:     ObserverRef *o = mObservers.AppendElement(weak);
    1:     if (!o)
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:     return NS_OK;
    1: }
    1: 
    1: nsresult
    1: nsObserverList::RemoveObserver(nsIObserver* anObserver)
    1: {
    1:     NS_ASSERTION(anObserver, "Null input");
    1: 
 3233:     if (mObservers.RemoveElement(static_cast<nsISupports*>(anObserver)))
    1:         return NS_OK;
    1: 
    1:     nsCOMPtr<nsIWeakReference> observerRef = do_GetWeakReference(anObserver);
    1:     if (!observerRef)
    1:         return NS_ERROR_FAILURE;
    1: 
    1:     if (!mObservers.RemoveElement(observerRef))
    1:         return NS_ERROR_FAILURE;
    1: 
    1:     return NS_OK;
    1: }
    1: 
    1: nsresult
    1: nsObserverList::GetObserverList(nsISimpleEnumerator** anEnumerator)
    1: {
    1:     nsRefPtr<nsObserverEnumerator> e(new nsObserverEnumerator(this));
    1:     if (!e)
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:     NS_ADDREF(*anEnumerator = e);
    1:     return NS_OK;
    1: }
    1: 
    1: void
    1: nsObserverList::FillObserverArray(nsCOMArray<nsIObserver> &aArray)
    1: {
    1:     aArray.SetCapacity(mObservers.Length());
    1: 
34926:     nsTArray<ObserverRef> observers(mObservers);
34926: 
34926:     for (PRInt32 i = observers.Length() - 1; i >= 0; --i) {
34926:         if (observers[i].isWeakRef) {
34926:             nsCOMPtr<nsIObserver> o(do_QueryReferent(observers[i].asWeak()));
    1:             if (o) {
    1:                 aArray.AppendObject(o);
    1:             }
    1:             else {
    1:                 // the object has gone away, remove the weakref
34926:                 mObservers.RemoveElement(observers[i].asWeak());
    1:             }
    1:         }
    1:         else {
34926:             aArray.AppendObject(observers[i].asObserver());
    1:         }
    1:     }
    1: }
    1: 
    1: void
    1: nsObserverList::NotifyObservers(nsISupports *aSubject,
    1:                                 const char *aTopic,
    1:                                 const PRUnichar *someData)
    1: {
    1:     nsCOMArray<nsIObserver> observers;
    1:     FillObserverArray(observers);
    1: 
    1:     for (PRInt32 i = 0; i < observers.Count(); ++i) {
    1:         observers[i]->Observe(aSubject, aTopic, someData);
    1:     }
    1: }
    1: 
12033: NS_IMPL_ISUPPORTS1(nsObserverEnumerator, nsISimpleEnumerator)
12033: 
    1: nsObserverEnumerator::nsObserverEnumerator(nsObserverList* aObserverList)
    1:     : mIndex(0)
    1: {
    1:     aObserverList->FillObserverArray(mObservers);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsObserverEnumerator::HasMoreElements(PRBool *aResult)
    1: {
    1:     *aResult = (mIndex < mObservers.Count());
    1:     return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsObserverEnumerator::GetNext(nsISupports* *aResult)
    1: {
    1:     if (mIndex == mObservers.Count()) {
    1:         NS_ERROR("Enumerating after HasMoreElements returned false.");
    1:         return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     NS_ADDREF(*aResult = mObservers[mIndex]);
    1:     ++mIndex;
    1:     return NS_OK;
    1: }
