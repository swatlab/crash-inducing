     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsPrintData.h"
     1: 
     1: #include "nsIStringBundle.h"
     1: #include "nsIServiceManager.h"
     1: #include "nsPrintObject.h"
     1: #include "nsPrintPreviewListener.h"
     1: #include "nsIWebProgressListener.h"
 42314: #include "mozilla/Services.h"
     1: 
     1: //-----------------------------------------------------
     1: // PR LOGGING
     1: #ifdef MOZ_LOGGING
     1: #define FORCE_PR_LOG /* Allow logging in the release build */
     1: #endif
     1: 
     1: #include "prlog.h"
     1: 
     1: #ifdef PR_LOGGING
     1: #define DUMP_LAYOUT_LEVEL 9 // this turns on the dumping of each doucment's layout info
120415: static PRLogModuleInfo *
120415: GetPrintingLog()
120415: {
120415:   static PRLogModuleInfo *sLog;
120415:   if (!sLog)
120415:     sLog = PR_NewLogModule("printing");
120415:   return sLog;
120415: }
120415: #define PR_PL(_p1)  PR_LOG(GetPrintingLog(), PR_LOG_DEBUG, _p1);
     1: #else
     1: #define PRT_YESNO(_p)
     1: #define PR_PL(_p1)
     1: #endif
     1: 
     1: //---------------------------------------------------
     1: //-- nsPrintData Class Impl
     1: //---------------------------------------------------
     1: nsPrintData::nsPrintData(ePrintDataType aType) :
106838:   mType(aType), mDebugFilePtr(nullptr), mPrintObject(nullptr), mSelectedPO(nullptr),
106118:   mPrintDocList(0), mIsIFrameSelected(false),
 80486:   mIsParentAFrameSet(false), mOnStartSent(false),
 80486:   mIsAborted(false), mPreparingForPrint(false), mDocWasToBeDestroyed(false),
 80486:   mShrinkToFit(false), mPrintFrameType(nsIPrintSettings::kFramesAsIs), 
     1:   mNumPrintablePages(0), mNumPagesPrinted(0),
     1:   mShrinkRatio(1.0), mOrigDCScale(1.0), mPPEventListeners(NULL), 
106838:   mBrandName(nullptr)
     1: {
 71899:   MOZ_COUNT_CTOR(nsPrintData);
     1:   nsCOMPtr<nsIStringBundle> brandBundle;
 42314:   nsCOMPtr<nsIStringBundleService> svc =
 42314:     mozilla::services::GetStringBundleService();
     1:   if (svc) {
     1:     svc->CreateBundle( "chrome://branding/locale/brand.properties", getter_AddRefs( brandBundle ) );
     1:     if (brandBundle) {
     1:       brandBundle->GetStringFromName(NS_LITERAL_STRING("brandShortName").get(), &mBrandName );
     1:     }
     1:   }
     1: 
     1:   if (!mBrandName) {
     1:     mBrandName = ToNewUnicode(NS_LITERAL_STRING("Mozilla Document"));
     1:   }
     1: 
     1: }
     1: 
     1: nsPrintData::~nsPrintData()
     1: {
 71899:   MOZ_COUNT_DTOR(nsPrintData);
     1:   // remove the event listeners
     1:   if (mPPEventListeners) {
     1:     mPPEventListeners->RemoveListeners();
     1:     NS_RELEASE(mPPEventListeners);
     1:   }
     1: 
     1:   // Only Send an OnEndPrinting if we have started printing
     1:   if (mOnStartSent && mType != eIsPrintPreview) {
     1:     OnEndPrinting();
     1:   }
     1: 
     1:   if (mPrintDC && !mDebugFilePtr) {
     1:     PR_PL(("****************** End Document ************************\n"));
     1:     PR_PL(("\n"));
 79445:     bool isCancelled = false;
     1:     mPrintSettings->GetIsCancelled(&isCancelled);
     1: 
     1:     nsresult rv = NS_OK;
     1:     if (mType == eIsPrinting) {
     1:       if (!isCancelled && !mIsAborted) {
     1:         rv = mPrintDC->EndDocument();
     1:       } else {
     1:         rv = mPrintDC->AbortDocument();  
     1:       }
     1:       if (NS_FAILED(rv)) {
     1:         // XXX nsPrintData::ShowPrintErrorDialog(rv);
     1:       }
     1:     }
     1:   }
     1: 
     1:   delete mPrintObject;
     1: 
     1:   if (mBrandName) {
     1:     NS_Free(mBrandName);
     1:   }
     1: }
     1: 
     1: void nsPrintData::OnStartPrinting()
     1: {
     1:   if (!mOnStartSent) {
 82892:     DoOnProgressChange(0, 0, true, nsIWebProgressListener::STATE_START|nsIWebProgressListener::STATE_IS_DOCUMENT|nsIWebProgressListener::STATE_IS_NETWORK);
 80486:     mOnStartSent = true;
     1:   }
     1: }
     1: 
     1: void nsPrintData::OnEndPrinting()
     1: {
 80486:   DoOnProgressChange(100, 100, true, nsIWebProgressListener::STATE_STOP|nsIWebProgressListener::STATE_IS_DOCUMENT);
 82892:   DoOnProgressChange(100, 100, true, nsIWebProgressListener::STATE_STOP|nsIWebProgressListener::STATE_IS_NETWORK);
     1: }
     1: 
     1: void
108991: nsPrintData::DoOnProgressChange(int32_t      aProgress,
108991:                                 int32_t      aMaxProgress,
 79445:                                 bool         aDoStartStop,
108991:                                 int32_t      aFlag)
     1: {
108991:   for (int32_t i=0;i<mPrintProgressListeners.Count();i++) {
     1:     nsIWebProgressListener* wpl = mPrintProgressListeners.ObjectAt(i);
106838:     wpl->OnProgressChange(nullptr, nullptr, aProgress, aMaxProgress, aProgress, aMaxProgress);
     1:     if (aDoStartStop) {
106878:       wpl->OnStateChange(nullptr, nullptr, aFlag, NS_OK);
     1:     }
     1:   }
     1: }
     1: 
