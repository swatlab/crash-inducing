    1: /* -*- Mode: IDL; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, copied from
    1:  * xpfe/appshell/public/nsIAppShellService.idl
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Benjamin Smedberg <benjamin@smedbergs.us>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: 
    1: interface nsICmdLineService;
    1: 
90120: [scriptable, uuid(50c4194b-61c6-4292-963f-6e1a8e11c9d3)]
    1: interface nsIAppStartup : nsISupports
    1: {
    1:     /**
    1:      * Create the hidden window.
    1:      */
    1:     void createHiddenWindow();
    1: 
    1:     /**
 8897:      * Destroys the hidden window. This will have no effect if the hidden window
 8897:      * has not yet been created.
 8897:      */
 8897:     void destroyHiddenWindow();
 8897: 
 8897:     /**
    1:      * Runs an application event loop: normally the main event pump which
    1:      * defines the lifetime of the application. If there are no windows open
    1:      * and no outstanding calls to enterLastWindowClosingSurvivalArea this
    1:      * method will exit immediately.
    1:      *
    1:      * @returnCode NS_SUCCESS_RESTART_APP
    1:      *             This return code indicates that the application should be
    1:      *             restarted because quit was called with the eRestart flag.
    1:      */
    1:     void run();
    1: 
    1:     /**
    1:      * There are situations where all application windows will be
    1:      * closed but we don't want to take this as a signal to quit the
    1:      * app. Bracket the code where the last window could close with
    1:      * these.
    1:      */
    1:     void enterLastWindowClosingSurvivalArea();
    1:     void exitLastWindowClosingSurvivalArea();
    1: 
    1:     /**
89683:      * Startup Crash Detection
89683:      *
89683:      * Keeps track of application startup begining and success using flags to
89683:      * determine whether the application is crashing on startup.
89683:      * When the number of crashes crosses the acceptable threshold, safe mode
89683:      * or other repair procedures are performed.
89683:      */
89683: 
89683:     /**
89683:      * Whether automatic safe mode is necessary at this time.  This gets set
89683:      * in trackStartupCrashBegin.
89683:      *
89683:      * @see trackStartupCrashBegin
89683:      */
89683:     readonly attribute boolean automaticSafeModeNecessary;
89683: 
89683:     /**
89683:      * Restart the application in safe mode
89683:      * @param aQuitMode
89683:      *        This parameter modifies how the app is shutdown.
89683:      * @see nsIAppStartup::quit
89683:      */
89683:     void restartInSafeMode(in PRUint32 aQuitMode);
89683: 
89683:     /**
89683:      * If the last startup crashed then increment a counter.
89683:      * Set a flag so on next startup we can detect whether TrackStartupCrashEnd
89683:      * was called (and therefore the application crashed).
89683:      * @return whether safe mode is necessary
89683:      */
89683:     bool trackStartupCrashBegin();
89683: 
89683:     /**
89683:      * We have succesfully started without crashing. Clear flags that were
89683:      * tracking past crashes.
89683:      */
89683:     void trackStartupCrashEnd();
89683: 
89683:     /**
    1:      * The following flags may be passed as the aMode parameter to the quit
    1:      * method.  One and only one of the "Quit" flags must be specified.  The
    1:      * eRestart flag may be bit-wise combined with one of the "Quit" flags to
    1:      * cause the application to restart after it quits.
    1:      */
    1: 
    1:     /**
    1:      * Attempt to quit if all windows are closed.
    1:      */
    1:     const PRUint32 eConsiderQuit = 0x01;
    1: 
    1:     /**
    1:      * Try to close all windows, then quit if successful.
    1:      */
    1:     const PRUint32 eAttemptQuit = 0x02;
    1: 
    1:     /**
    1:      * Quit, damnit!
    1:      */
    1:     const PRUint32 eForceQuit = 0x03;
    1: 
    1:     /**
    1:      * Restart the application after quitting.  The application will be
    1:      * restarted with the same profile and an empty command line.
    1:      */
    1:     const PRUint32 eRestart = 0x10; 
    1: 
    1:     /**
61862:      * When restarting attempt to start in the i386 architecture. Only supported
61862:      * on OSX.
61862:      */
61862:     const PRUint32 eRestarti386 = 0x20;
61862: 
61862:     /**
61862:      * When restarting attempt to start in the x86_64 architecture. Only
61862:      * supported on OSX.
61862:      */
61862:     const PRUint32 eRestartx86_64 = 0x40;
61862: 
61862:     /**
    1:      * Exit the event loop, and shut down the app.
    1:      *
    1:      * @param aMode
    1:      *        This parameter modifies how the app is shutdown, and it is
    1:      *        constructed from the constants defined above.
    1:      */
    1:     void quit(in PRUint32 aMode);
    1: 
42023:     /**
42023:      * True if the application is in the process of shutting down.
42023:      */
27580:     readonly attribute boolean shuttingDown;
58854: 
60458:     /** 
60458:      * Returns an object with main, process, firstPaint, sessionRestored properties.
60458:      * Properties may not be available depending on platform or application
60458:      */
82815:     [implicit_jscontext] jsval getStartupInfo();
78260: 
78260:     /**
78260:      * True if startup was interrupted by an interactive prompt.
78260:      */
78260:     attribute boolean interrupted;
60458: };
60458: 
    1: %{C++
    1: /**
    1:  * This success code may be returned by nsIAppStartup::Run to indicate that the
    1:  * application should be restarted.  This condition corresponds to the case in
    1:  * which nsIAppStartup::Quit was called with the eRestart flag.
    1:  */
    1: #define NS_SUCCESS_RESTART_APP \
    1:     NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_GENERAL, 1)
    1: %}
