    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Daniel Glazman <glazman@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * temporary (expanded) representation of the property-value pairs
    1:  * within a CSS declaration using during parsing and mutation, and
    1:  * representation of complex values for CSS properties
    1:  */
    1: 
    1: #ifndef nsCSSStruct_h___
    1: #define nsCSSStruct_h___
    1: 
    1: #include "nsCSSValue.h"
20039: #include "nsStyleConsts.h"
    1: 
    1: // Prefer nsCSSValue::Array for lists of fixed size.
    1: struct nsCSSValueList {
20563:   nsCSSValueList() : mNext(nsnull) { MOZ_COUNT_CTOR(nsCSSValueList); }
20563:   ~nsCSSValueList();
20563: 
20563:   nsCSSValueList* Clone() const { return Clone(PR_TRUE); }
    1: 
    1:   static PRBool Equal(nsCSSValueList* aList1, nsCSSValueList* aList2);
    1: 
    1:   nsCSSValue      mValue;
    1:   nsCSSValueList* mNext;
20563: 
20563: private:
20563:   nsCSSValueList(const nsCSSValueList& aCopy) // makes a shallow copy
20563:     : mValue(aCopy.mValue), mNext(nsnull)
20563:   {
20563:     MOZ_COUNT_CTOR(nsCSSValueList);
20563:   }
20563:   nsCSSValueList* Clone(PRBool aDeep) const;
    1: };
    1: 
    1: struct nsCSSRect {
    1:   nsCSSRect(void);
    1:   nsCSSRect(const nsCSSRect& aCopy);
    1:   ~nsCSSRect();
    1: 
    1:   PRBool operator==(const nsCSSRect& aOther) const {
    1:     return mTop == aOther.mTop &&
    1:            mRight == aOther.mRight &&
    1:            mBottom == aOther.mBottom &&
    1:            mLeft == aOther.mLeft;
    1:   }
    1: 
    1:   PRBool operator!=(const nsCSSRect& aOther) const {
    1:     return mTop != aOther.mTop ||
    1:            mRight != aOther.mRight ||
    1:            mBottom != aOther.mBottom ||
    1:            mLeft != aOther.mLeft;
    1:   }
    1: 
    1:   void SetAllSidesTo(const nsCSSValue& aValue);
    1: 
    1:   void Reset() {
    1:     mTop.Reset();
    1:     mRight.Reset();
    1:     mBottom.Reset();
    1:     mLeft.Reset();
    1:   }
    1: 
    1:   PRBool HasValue() const {
    1:     return
    1:       mTop.GetUnit() != eCSSUnit_Null ||
    1:       mRight.GetUnit() != eCSSUnit_Null ||
    1:       mBottom.GetUnit() != eCSSUnit_Null ||
    1:       mLeft.GetUnit() != eCSSUnit_Null;
    1:   }
    1:   
    1:   nsCSSValue mTop;
    1:   nsCSSValue mRight;
    1:   nsCSSValue mBottom;
    1:   nsCSSValue mLeft;
    1: 
    1:   typedef nsCSSValue nsCSSRect::*side_type;
    1:   static const side_type sides[4];
    1: };
    1: 
    1: struct nsCSSValuePair {
    1:   nsCSSValuePair()
    1:   {
    1:     MOZ_COUNT_CTOR(nsCSSValuePair);
    1:   }
    1:   nsCSSValuePair(const nsCSSValuePair& aCopy)
    1:     : mXValue(aCopy.mXValue),
    1:       mYValue(aCopy.mYValue)
    1:   { 
    1:     MOZ_COUNT_CTOR(nsCSSValuePair);
    1:   }
    1:   ~nsCSSValuePair()
    1:   {
    1:     MOZ_COUNT_DTOR(nsCSSValuePair);
    1:   }
    1: 
    1:   PRBool operator==(const nsCSSValuePair& aOther) const {
    1:     return mXValue == aOther.mXValue &&
    1:            mYValue == aOther.mYValue;
    1:   }
    1: 
    1:   PRBool operator!=(const nsCSSValuePair& aOther) const {
    1:     return mXValue != aOther.mXValue ||
    1:            mYValue != aOther.mYValue;
    1:   }
    1: 
    1:   void SetBothValuesTo(const nsCSSValue& aValue) {
    1:     mXValue = aValue;
    1:     mYValue = aValue;
    1:   }
    1: 
20039:   void Reset() {
20039:     mXValue.Reset();
20039:     mYValue.Reset();
20039:   }
20039: 
20039:   PRBool HasValue() const {
20039:     return mXValue.GetUnit() != eCSSUnit_Null ||
20039:            mYValue.GetUnit() != eCSSUnit_Null;
20039:   }
20039: 
    1:   nsCSSValue mXValue;
    1:   nsCSSValue mYValue;
    1: };
    1: 
20039: struct nsCSSCornerSizes {
20039:   nsCSSCornerSizes(void);
20039:   nsCSSCornerSizes(const nsCSSCornerSizes& aCopy);
20039:   ~nsCSSCornerSizes();
20039: 
20039:   // argument is a "full corner" constant from nsStyleConsts.h
20039:   nsCSSValuePair const & GetFullCorner(PRUint32 aCorner) const {
20039:     return (this->*corners[aCorner]);
20039:   }
20039:   nsCSSValuePair & GetFullCorner(PRUint32 aCorner) {
20039:     return (this->*corners[aCorner]);
20039:   }
20039: 
20039:   // argument is a "half corner" constant from nsStyleConsts.h
20039:   const nsCSSValue& GetHalfCorner(PRUint32 hc) const {
20039:     nsCSSValuePair const & fc = this->*corners[NS_HALF_TO_FULL_CORNER(hc)];
20039:     return NS_HALF_CORNER_IS_X(hc) ? fc.mXValue : fc.mYValue;
20039:   }
20039:   nsCSSValue & GetHalfCorner(PRUint32 hc) {
20039:     nsCSSValuePair& fc = this->*corners[NS_HALF_TO_FULL_CORNER(hc)];
20039:     return NS_HALF_CORNER_IS_X(hc) ? fc.mXValue : fc.mYValue;
20039:   }
20039:   
20039:   PRBool operator==(const nsCSSCornerSizes& aOther) const {
20039:     NS_FOR_CSS_FULL_CORNERS(corner) {
20039:       if (this->GetFullCorner(corner) != aOther.GetFullCorner(corner))
20039:         return PR_FALSE;
20039:     }
20039:     return PR_TRUE;
20039:   }
20039: 
20039:   PRBool operator!=(const nsCSSCornerSizes& aOther) const {
20039:     NS_FOR_CSS_FULL_CORNERS(corner) {
20039:       if (this->GetFullCorner(corner) != aOther.GetFullCorner(corner))
20039:         return PR_TRUE;
20039:     }
20039:     return PR_FALSE;
20039:   }
20039: 
20039:   PRBool HasValue() const {
20039:     NS_FOR_CSS_FULL_CORNERS(corner) {
20039:       if (this->GetFullCorner(corner).HasValue())
20039:         return PR_TRUE;
20039:     }
20039:     return PR_FALSE;
20039:   }
20039: 
20039:   void SetAllCornersTo(const nsCSSValue& aValue);
20039:   void Reset();
20039: 
20039:   nsCSSValuePair mTopLeft;
20039:   nsCSSValuePair mTopRight;
20039:   nsCSSValuePair mBottomRight;
20039:   nsCSSValuePair mBottomLeft;
20039: 
20039: protected:
20039:   typedef nsCSSValuePair nsCSSCornerSizes::*corner_type;
20039:   static const corner_type corners[4];
20039: };
20039: 
    1: struct nsCSSValueListRect {
    1:   nsCSSValueListRect(void);
    1:   nsCSSValueListRect(const nsCSSValueListRect& aCopy);
    1:   ~nsCSSValueListRect();
    1: 
    1:   nsCSSValueList* mTop;
    1:   nsCSSValueList* mRight;
    1:   nsCSSValueList* mBottom;
    1:   nsCSSValueList* mLeft;
    1: 
    1:   typedef nsCSSValueList* nsCSSValueListRect::*side_type;
    1:   static const side_type sides[4];
    1: };
    1: 
16372: // Maybe should be replaced with nsCSSValueList and nsCSSValue::Array?
16372: struct nsCSSValuePairList {
20563:   nsCSSValuePairList() : mNext(nsnull) { MOZ_COUNT_CTOR(nsCSSValuePairList); }
20563:   ~nsCSSValuePairList();
20563: 
20563:   nsCSSValuePairList* Clone() const { return Clone(PR_TRUE); }
  545: 
16372:   static PRBool Equal(nsCSSValuePairList* aList1, nsCSSValuePairList* aList2);
  545: 
16372:   nsCSSValue          mXValue;
16372:   nsCSSValue          mYValue;
16372:   nsCSSValuePairList* mNext;
20563: 
20563: private:
20563:   nsCSSValuePairList(const nsCSSValuePairList& aCopy) // makes a shallow copy
20563:     : mXValue(aCopy.mXValue), mYValue(aCopy.mYValue), mNext(nsnull)
20563:   {
20563:     MOZ_COUNT_CTOR(nsCSSValuePairList);
20563:   }
20563:   nsCSSValuePairList* Clone(PRBool aDeep) const;
  545: };
  545: 
  545: /****************************************************************************/
  545: 
  545: struct nsCSSStruct {
  545:   // EMPTY on purpose.  ABSTRACT with no virtuals (typedef void nsCSSStruct?)
  545: };
  545: 
  545: // We use the nsCSS* structures for storing nsCSSDeclaration's
  545: // *temporary* data during parsing and modification.  (They are too big
  545: // for permanent storage.)  We also use them for nsRuleData, with some
  545: // additions of things that the style system must cascade, but that
  545: // aren't CSS properties.  Thus we use typedefs and inheritance
  545: // (forwards, when the rule data needs extra data) to make the rule data
  545: // structs from the declaration structs.
  545: // NOTE:  For compilation speed, this typedef also appears in nsRuleNode.h
  545: typedef nsCSSStruct nsRuleDataStruct;
  545: 
  545: 
  545: struct nsCSSFont : public nsCSSStruct {
  545:   nsCSSFont(void);
  545:   ~nsCSSFont(void);
  545: 
 2302:   nsCSSValue mSystemFont;
  545:   nsCSSValue mFamily;
  545:   nsCSSValue mStyle;
  545:   nsCSSValue mVariant;
  545:   nsCSSValue mWeight;
  545:   nsCSSValue mSize;
  545:   nsCSSValue mSizeAdjust; // NEW
  545:   nsCSSValue mStretch; // NEW
 3134: 
10073: #ifdef MOZ_MATHML
10073:   nsCSSValue mScriptLevel; // Integer values mean "relative", Number values mean "absolute" 
10073:   nsCSSValue mScriptSizeMultiplier;
10073:   nsCSSValue mScriptMinSize;
10073: #endif
10073: 
 3134: private:
 3134:   nsCSSFont(const nsCSSFont& aOther); // NOT IMPLEMENTED
  545: };
  545: 
  545: struct nsRuleDataFont : public nsCSSFont {
  545:   PRBool mFamilyFromHTML; // Is the family from an HTML FONT element
 3134:   nsRuleDataFont() {}
 3134: private:
 3134:   nsRuleDataFont(const nsRuleDataFont& aOther); // NOT IMPLEMENTED
  545: };
  545: 
  545: struct nsCSSColor : public nsCSSStruct  {
  545:   nsCSSColor(void);
  545:   ~nsCSSColor(void);
  545: 
  545:   nsCSSValue      mColor;
  545:   nsCSSValue      mBackColor;
  545:   nsCSSValue      mBackImage;
  545:   nsCSSValue      mBackRepeat;
  545:   nsCSSValue      mBackAttachment;
  545:   nsCSSValuePair  mBackPosition;
  545:   nsCSSValue      mBackClip;
  545:   nsCSSValue      mBackOrigin;
  545:   nsCSSValue      mBackInlinePolicy;
 3134: private:
 3134:   nsCSSColor(const nsCSSColor& aOther); // NOT IMPLEMENTED
  545: };
  545: 
  545: struct nsRuleDataColor : public nsCSSColor {
 3134:   nsRuleDataColor() {}
 3134: private:
 3134:   nsRuleDataColor(const nsRuleDataColor& aOther); // NOT IMPLEMENTED
  545: };
  545: 
  545: struct nsCSSText : public nsCSSStruct  {
  545:   nsCSSText(void);
  545:   ~nsCSSText(void);
  545: 
  545:   nsCSSValue mWordSpacing;
  545:   nsCSSValue mLetterSpacing;
  545:   nsCSSValue mVerticalAlign;
  545:   nsCSSValue mTextTransform;
  545:   nsCSSValue mTextAlign;
  545:   nsCSSValue mTextIndent;
  545:   nsCSSValue mDecoration;
  545:   nsCSSValueList* mTextShadow; // NEW
  545:   nsCSSValue mUnicodeBidi;  // NEW
  545:   nsCSSValue mLineHeight;
  545:   nsCSSValue mWhiteSpace;
16166:   nsCSSValue mWordWrap;
 3134: private:
 3134:   nsCSSText(const nsCSSText& aOther); // NOT IMPLEMENTED
  545: };
  545: 
  545: struct nsRuleDataText : public nsCSSText {
 3134:   nsRuleDataText() {}
 3134: private:
 3134:   nsRuleDataText(const nsRuleDataText& aOther); // NOT IMPLEMENTED
  545: };
  545: 
    1: struct nsCSSDisplay : public nsCSSStruct  {
    1:   nsCSSDisplay(void);
    1:   ~nsCSSDisplay(void);
    1: 
    1:   nsCSSValue mDirection;
    1:   nsCSSValue mDisplay;
    1:   nsCSSValue mBinding;
    1:   nsCSSValue mAppearance;
    1:   nsCSSValue mPosition;
    1:   nsCSSValue mFloat;
    1:   nsCSSValue mClear;
    1:   nsCSSRect  mClip;
    1:   nsCSSValue mOverflowX;
    1:   nsCSSValue mOverflowY;
    1:   nsCSSValue mVisibility;
    1:   nsCSSValue mOpacity;
19214:   nsCSSValueList *mTransform; // List of Arrays containing transform information
19214:   nsCSSValuePair mTransformOrigin;
    1: 
    1:   // temp fix for bug 24000 
    1:   nsCSSValue mBreakBefore;
    1:   nsCSSValue mBreakAfter;
    1:   // end temp fix
 3134: private:
 3134:   nsCSSDisplay(const nsCSSDisplay& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataDisplay : public nsCSSDisplay {
    1:   nsCSSValue mLang;
 3134:   nsRuleDataDisplay() {}
 3134: private:
 3134:   nsRuleDataDisplay(const nsRuleDataDisplay& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSMargin : public nsCSSStruct  {
    1:   nsCSSMargin(void);
    1:   ~nsCSSMargin(void);
    1: 
    1:   nsCSSRect   mMargin;
    1:   nsCSSValue  mMarginStart;
    1:   nsCSSValue  mMarginEnd;
    1:   nsCSSValue  mMarginLeftLTRSource;
    1:   nsCSSValue  mMarginLeftRTLSource;
    1:   nsCSSValue  mMarginRightLTRSource;
    1:   nsCSSValue  mMarginRightRTLSource;
    1:   nsCSSRect   mPadding;
    1:   nsCSSValue  mPaddingStart;
    1:   nsCSSValue  mPaddingEnd;
    1:   nsCSSValue  mPaddingLeftLTRSource;
    1:   nsCSSValue  mPaddingLeftRTLSource;
    1:   nsCSSValue  mPaddingRightLTRSource;
    1:   nsCSSValue  mPaddingRightRTLSource;
    1:   nsCSSRect   mBorderWidth;
 3133:   nsCSSValue  mBorderStartWidth;
 3133:   nsCSSValue  mBorderEndWidth;
 3133:   nsCSSValue  mBorderLeftWidthLTRSource;
 3133:   nsCSSValue  mBorderLeftWidthRTLSource;
 3133:   nsCSSValue  mBorderRightWidthLTRSource;
 3133:   nsCSSValue  mBorderRightWidthRTLSource;
    1:   nsCSSRect   mBorderColor;
 3133:   nsCSSValue  mBorderStartColor;
 3133:   nsCSSValue  mBorderEndColor;
 3133:   nsCSSValue  mBorderLeftColorLTRSource;
 3133:   nsCSSValue  mBorderLeftColorRTLSource;
 3133:   nsCSSValue  mBorderRightColorLTRSource;
 3133:   nsCSSValue  mBorderRightColorRTLSource;
    1:   nsCSSValueListRect mBorderColors;
    1:   nsCSSRect   mBorderStyle;
 3133:   nsCSSValue  mBorderStartStyle;
 3133:   nsCSSValue  mBorderEndStyle;
 3133:   nsCSSValue  mBorderLeftStyleLTRSource;
 3133:   nsCSSValue  mBorderLeftStyleRTLSource;
 3133:   nsCSSValue  mBorderRightStyleLTRSource;
 3133:   nsCSSValue  mBorderRightStyleRTLSource;
20039:   nsCSSCornerSizes mBorderRadius;
    1:   nsCSSValue  mOutlineWidth;
    1:   nsCSSValue  mOutlineColor;
    1:   nsCSSValue  mOutlineStyle;
    1:   nsCSSValue  mOutlineOffset;
20039:   nsCSSCornerSizes mOutlineRadius;
    1:   nsCSSValue  mFloatEdge; // NEW
15992:   nsCSSValue  mBorderImage;
15699:   nsCSSValueList* mBoxShadow;
 3134: private:
 3134:   nsCSSMargin(const nsCSSMargin& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataMargin : public nsCSSMargin {
 3134:   nsRuleDataMargin() {}
 3134: private:
 3134:   nsRuleDataMargin(const nsRuleDataMargin& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSPosition : public nsCSSStruct  {
    1:   nsCSSPosition(void);
    1:   ~nsCSSPosition(void);
    1: 
    1:   nsCSSValue  mWidth;
    1:   nsCSSValue  mMinWidth;
    1:   nsCSSValue  mMaxWidth;
    1:   nsCSSValue  mHeight;
    1:   nsCSSValue  mMinHeight;
    1:   nsCSSValue  mMaxHeight;
    1:   nsCSSValue  mBoxSizing; // NEW
    1:   nsCSSRect   mOffset;
    1:   nsCSSValue  mZIndex;
 3134: private:
 3134:   nsCSSPosition(const nsCSSPosition& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataPosition : public nsCSSPosition {
 3134:   nsRuleDataPosition() {}
 3134: private:
 3134:   nsRuleDataPosition(const nsRuleDataPosition& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSList : public nsCSSStruct  {
    1:   nsCSSList(void);
    1:   ~nsCSSList(void);
    1: 
    1:   nsCSSValue mType;
    1:   nsCSSValue mImage;
    1:   nsCSSValue mPosition;
    1:   nsCSSRect  mImageRegion;
 3134: private:
 3134:   nsCSSList(const nsCSSList& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataList : public nsCSSList {
 3134:   nsRuleDataList() {}
 3134: private:
 3134:   nsRuleDataList(const nsRuleDataList& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSTable : public nsCSSStruct  { // NEW
    1:   nsCSSTable(void);
    1:   ~nsCSSTable(void);
    1: 
    1:   nsCSSValue mBorderCollapse;
    1:   nsCSSValuePair mBorderSpacing;
    1:   nsCSSValue mCaptionSide;
    1:   nsCSSValue mEmptyCells;
    1:   
    1:   nsCSSValue mLayout;
    1:   nsCSSValue mFrame; // Not mappable via CSS, only using HTML4 table attrs.
    1:   nsCSSValue mRules; // Not mappable via CSS, only using HTML4 table attrs.
    1:   nsCSSValue mSpan; // Not mappable via CSS, only using HTML4 table attrs.
    1:   nsCSSValue mCols; // Not mappable via CSS, only using HTML4 table attrs.
 3134: private:
 3134:   nsCSSTable(const nsCSSTable& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataTable : public nsCSSTable {
 3134:   nsRuleDataTable() {}
 3134: private:
 3134:   nsRuleDataTable(const nsRuleDataTable& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSBreaks : public nsCSSStruct  { // NEW
    1:   nsCSSBreaks(void);
    1:   ~nsCSSBreaks(void);
    1: 
    1:   nsCSSValue mOrphans;
    1:   nsCSSValue mWidows;
    1:   nsCSSValue mPage;
    1:   // temp fix for bug 24000 
    1:   //nsCSSValue mPageBreakAfter;
    1:   //nsCSSValue mPageBreakBefore;
    1:   nsCSSValue mPageBreakInside;
 3134: private:
 3134:   nsCSSBreaks(const nsCSSBreaks& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataBreaks : public nsCSSBreaks {
 3134:   nsRuleDataBreaks() {}
 3134: private:
 3134:   nsRuleDataBreaks(const nsRuleDataBreaks& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSPage : public nsCSSStruct  { // NEW
    1:   nsCSSPage(void);
    1:   ~nsCSSPage(void);
    1: 
    1:   nsCSSValue mMarks;
    1:   nsCSSValuePair mSize;
 3134: private:
 3134:   nsCSSPage(const nsCSSPage& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataPage : public nsCSSPage {
 3134:   nsRuleDataPage() {}
 3134: private:
 3134:   nsRuleDataPage(const nsRuleDataPage& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSContent : public nsCSSStruct  {
    1:   nsCSSContent(void);
    1:   ~nsCSSContent(void);
    1: 
    1:   nsCSSValueList*     mContent;
16372:   nsCSSValuePairList* mCounterIncrement;
16372:   nsCSSValuePairList* mCounterReset;
    1:   nsCSSValue          mMarkerOffset;
16372:   nsCSSValuePairList* mQuotes;
 3134: private:
 3134:   nsCSSContent(const nsCSSContent& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataContent : public nsCSSContent {
 3134:   nsRuleDataContent() {}
 3134: private:
 3134:   nsRuleDataContent(const nsRuleDataContent& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSUserInterface : public nsCSSStruct  { // NEW
    1:   nsCSSUserInterface(void);
    1:   ~nsCSSUserInterface(void);
    1: 
    1:   nsCSSValue      mUserInput;
    1:   nsCSSValue      mUserModify;
    1:   nsCSSValue      mUserSelect;
    1:   nsCSSValue      mUserFocus;
    1:   
    1:   nsCSSValueList* mCursor;
    1:   nsCSSValue      mForceBrokenImageIcon;
 1520:   nsCSSValue      mIMEMode;
20464:   nsCSSValue      mWindowShadow;
 3134: private:
 3134:   nsCSSUserInterface(const nsCSSUserInterface& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataUserInterface : public nsCSSUserInterface {
 3134:   nsRuleDataUserInterface() {}
 3134: private:
 3134:   nsRuleDataUserInterface(const nsRuleDataUserInterface& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSAural : public nsCSSStruct  { // NEW
    1:   nsCSSAural(void);
    1:   ~nsCSSAural(void);
    1: 
    1:   nsCSSValue mAzimuth;
    1:   nsCSSValue mElevation;
    1:   nsCSSValue mCueAfter;
    1:   nsCSSValue mCueBefore;
    1:   nsCSSValue mPauseAfter;
    1:   nsCSSValue mPauseBefore;
    1:   nsCSSValue mPitch;
    1:   nsCSSValue mPitchRange;
    1:   nsCSSValue mRichness;
    1:   nsCSSValue mSpeak;
    1:   nsCSSValue mSpeakHeader;
    1:   nsCSSValue mSpeakNumeral;
    1:   nsCSSValue mSpeakPunctuation;
    1:   nsCSSValue mSpeechRate;
    1:   nsCSSValue mStress;
    1:   nsCSSValue mVoiceFamily;
    1:   nsCSSValue mVolume;
 3134: private:
 3134:   nsCSSAural(const nsCSSAural& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataAural : public nsCSSAural {
 3134:   nsRuleDataAural() {}
 3134: private:
 3134:   nsRuleDataAural(const nsRuleDataAural& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSXUL : public nsCSSStruct  {
    1:   nsCSSXUL(void);
    1:   ~nsCSSXUL(void);
    1: 
    1:   nsCSSValue  mBoxAlign;
    1:   nsCSSValue  mBoxDirection;
    1:   nsCSSValue  mBoxFlex;
    1:   nsCSSValue  mBoxOrient;
    1:   nsCSSValue  mBoxPack;
    1:   nsCSSValue  mBoxOrdinal;
15260:   nsCSSValue  mStackSizing;
 3134: private:
 3134:   nsCSSXUL(const nsCSSXUL& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataXUL : public nsCSSXUL {
 3134:   nsRuleDataXUL() {}
 3134: private:
 3134:   nsRuleDataXUL(const nsRuleDataXUL& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsCSSColumn : public nsCSSStruct  {
    1:   nsCSSColumn(void);
    1:   ~nsCSSColumn(void);
    1: 
    1:   nsCSSValue  mColumnCount;
    1:   nsCSSValue  mColumnWidth;
    1:   nsCSSValue  mColumnGap;
16055:   nsCSSValue  mColumnRuleColor;
16055:   nsCSSValue  mColumnRuleWidth;
16055:   nsCSSValue  mColumnRuleStyle;
 3134: private:
 3134:   nsCSSColumn(const nsCSSColumn& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataColumn : public nsCSSColumn {
 3134:   nsRuleDataColumn() {}
 3134: private:
 3134:   nsRuleDataColumn(const nsRuleDataColumn& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: #ifdef MOZ_SVG
    1: struct nsCSSSVG : public nsCSSStruct {
    1:   nsCSSSVG(void);
    1:   ~nsCSSSVG(void);
    1: 
    1:   nsCSSValue mClipPath;
    1:   nsCSSValue mClipRule;
    1:   nsCSSValue mColorInterpolation;
    1:   nsCSSValue mColorInterpolationFilters;
    1:   nsCSSValue mDominantBaseline;
    1:   nsCSSValuePair mFill;
    1:   nsCSSValue mFillOpacity;
    1:   nsCSSValue mFillRule;
    1:   nsCSSValue mFilter;
    1:   nsCSSValue mFloodColor;
    1:   nsCSSValue mFloodOpacity;
 4029:   nsCSSValue mLightingColor;
    1:   nsCSSValue mMarkerEnd;
    1:   nsCSSValue mMarkerMid;
    1:   nsCSSValue mMarkerStart;
    1:   nsCSSValue mMask;
    1:   nsCSSValue mPointerEvents;
    1:   nsCSSValue mShapeRendering;
    1:   nsCSSValue mStopColor;
    1:   nsCSSValue mStopOpacity;
    1:   nsCSSValuePair mStroke;
    1:   nsCSSValueList *mStrokeDasharray;
    1:   nsCSSValue mStrokeDashoffset;
    1:   nsCSSValue mStrokeLinecap;
    1:   nsCSSValue mStrokeLinejoin;
    1:   nsCSSValue mStrokeMiterlimit;
    1:   nsCSSValue mStrokeOpacity;
    1:   nsCSSValue mStrokeWidth;
    1:   nsCSSValue mTextAnchor;
    1:   nsCSSValue mTextRendering;
 3134: private:
 3134:   nsCSSSVG(const nsCSSSVG& aOther); // NOT IMPLEMENTED
    1: };
    1: 
    1: struct nsRuleDataSVG : public nsCSSSVG {
 3134:   nsRuleDataSVG() {}
 3134: private:
 3134:   nsRuleDataSVG(const nsRuleDataSVG& aOther); // NOT IMPLEMENTED
    1: };
    1: #endif
    1: 
    1: #endif /* nsCSSStruct_h___ */
