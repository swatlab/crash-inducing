 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef _NS_CERTTREE_H_
     1: #define _NS_CERTTREE_H_
     1: 
     1: #include "nsCOMPtr.h"
119832: #include "nsAutoPtr.h"
     1: #include "nsIServiceManager.h"
     1: #include "nsICertTree.h"
     1: #include "nsITreeView.h"
     1: #include "nsITreeBoxObject.h"
     1: #include "nsITreeSelection.h"
     1: #include "nsISupportsArray.h"
     1: #include "nsIMutableArray.h"
  6598: #include "nsTArray.h"
     1: #include "pldhash.h"
     1: #include "nsIX509CertDB.h"
  6598: #include "nsCertOverrideService.h"
105743: #include "mozilla/Attributes.h"
  6598: 
     1: 
     1: typedef struct treeArrayElStr treeArrayEl;
     1: 
     1: struct CompareCacheHashEntry {
     1:   enum { max_criterions = 3 };
     1:   CompareCacheHashEntry();
     1: 
     1:   void *key; // no ownership
 79445:   bool mCritInit[max_criterions];
     1:   nsXPIDLString mCrit[max_criterions];
     1: };
     1: 
     1: struct CompareCacheHashEntryPtr : PLDHashEntryHdr {
     1:   CompareCacheHashEntryPtr();
     1:   ~CompareCacheHashEntryPtr();
     1:   CompareCacheHashEntry *entry;
     1: };
     1: 
105743: class nsCertAddonInfo MOZ_FINAL : public nsISupports
  6598: {
  6598: public:
  6598:   NS_DECL_ISUPPORTS
  6598: 
  6598:   nsCertAddonInfo() : mUsageCount(0) {}
  6598: 
119832:   nsRefPtr<nsIX509Cert> mCert;
  6598:   // how many display entries reference this?
  6598:   // (and therefore depend on the underlying cert)
108991:   int32_t mUsageCount;
  6598: };
  6598: 
  6598: class nsCertTreeDispInfo : public nsICertTreeItem
  6598: {
  6598: public:
  6598:   NS_DECL_ISUPPORTS
  6598:   NS_DECL_NSICERTTREEITEM
  6598: 
  6598:   nsCertTreeDispInfo();
  6598:   nsCertTreeDispInfo(nsCertTreeDispInfo &other);
  6598:   virtual ~nsCertTreeDispInfo();
  6598: 
119832:   nsRefPtr<nsCertAddonInfo> mAddonInfo;
  6598:   enum {
  6598:     direct_db, host_port_override
  6598:   } mTypeOfEntry;
 14555:   nsCString mAsciiHost;
108991:   int32_t mPort;
  6598:   nsCertOverride::OverrideBits mOverrideBits;
 79445:   bool mIsTemporary;
 20772:   nsCOMPtr<nsIX509Cert> mCert;
  6598: };
     1: 
     1: class nsCertTree : public nsICertTree
     1: {
     1: public:
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSICERTTREE
     1:   NS_DECL_NSITREEVIEW
     1: 
     1:   nsCertTree();
     1:   virtual ~nsCertTree();
     1: 
     1:   enum sortCriterion { sort_IssuerOrg, sort_Org, sort_Token, 
     1:     sort_CommonName, sort_IssuedDateDescending, sort_Email, sort_None };
     1: 
     1: protected:
     1:   nsresult InitCompareHash();
     1:   void ClearCompareHash();
     1:   void RemoveCacheEntry(void *key);
     1: 
     1:   typedef int (*nsCertCompareFunc)(void *, nsIX509Cert *a, nsIX509Cert *b);
     1: 
     1:   static CompareCacheHashEntry *getCacheEntry(void *cache, void *aCert);
     1:   static void CmpInitCriterion(nsIX509Cert *cert, CompareCacheHashEntry *entry,
108991:                                sortCriterion crit, int32_t level);
108991:   static int32_t CmpByCrit(nsIX509Cert *a, CompareCacheHashEntry *ace, 
     1:                            nsIX509Cert *b, CompareCacheHashEntry *bce, 
108991:                            sortCriterion crit, int32_t level);
108991:   static int32_t CmpBy(void *cache, nsIX509Cert *a, nsIX509Cert *b, 
     1:                        sortCriterion c0, sortCriterion c1, sortCriterion c2);
108991:   static int32_t CmpCACert(void *cache, nsIX509Cert *a, nsIX509Cert *b);
108991:   static int32_t CmpWebSiteCert(void *cache, nsIX509Cert *a, nsIX509Cert *b);
108991:   static int32_t CmpUserCert(void *cache, nsIX509Cert *a, nsIX509Cert *b);
108991:   static int32_t CmpEmailCert(void *cache, nsIX509Cert *a, nsIX509Cert *b);
108991:   nsCertCompareFunc GetCompareFuncFromCertType(uint32_t aType);
108991:   int32_t CountOrganizations();
     1: 
108991:   nsresult GetCertsByType(uint32_t aType, nsCertCompareFunc aCertCmpFn,
  6598:                           void *aCertCmpFnArg);
     1: 
108991:   nsresult GetCertsByTypeFromCache(nsINSSCertCache *aCache, uint32_t aType,
  6598:                                    nsCertCompareFunc aCertCmpFn, void *aCertCmpFnArg);
     1: private:
119832:   nsTArray< nsRefPtr<nsCertTreeDispInfo> > mDispInfo;
     1:   nsCOMPtr<nsITreeBoxObject>  mTree;
     1:   nsCOMPtr<nsITreeSelection>  mSelection;
     1:   treeArrayEl                *mTreeArray;
108991:   int32_t                         mNumOrgs;
108991:   int32_t                         mNumRows;
     1:   PLDHashTable mCompareCache;
     1:   nsCOMPtr<nsINSSComponent> mNSSComponent;
  6598:   nsCOMPtr<nsICertOverrideService> mOverrideService;
119832:   nsRefPtr<nsCertOverrideService> mOriginalOverrideService;
     1: 
108991:   treeArrayEl *GetThreadDescAtIndex(int32_t _index);
  7052:   already_AddRefed<nsIX509Cert> 
108991:     GetCertAtIndex(int32_t _index, int32_t *outAbsoluteCertOffset = nullptr);
119832:   already_AddRefed<nsCertTreeDispInfo> 
108991:     GetDispInfoAtIndex(int32_t index, int32_t *outAbsoluteCertOffset = nullptr);
     1:   void FreeCertArray();
     1:   nsresult UpdateUIContents();
     1: 
  6598:   nsresult GetCertsByTypeFromCertList(CERTCertList *aCertList,
108991:                                       uint32_t aType,
     1:                                       nsCertCompareFunc  aCertCmpFn,
  6598:                                       void              *aCertCmpFnArg);
     1: 
     1:   nsCOMPtr<nsIMutableArray> mCellText;
     1: 
     1: #ifdef DEBUG_CERT_TREE
     1:   /* for debugging purposes */
     1:   void dumpMap();
     1: #endif
     1: };
     1: 
     1: #endif /* _NS_CERTTREE_H_ */
     1: 
