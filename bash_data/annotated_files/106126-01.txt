 84863: /* -*- Mode: IDL; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsISupports.idl"
     1: #include "xpcexception.idl"
     1: #include "xpcjsid.idl"
     1: #include "nsIComponentManager.idl"
     1: 
 73054: %{C++
 73054: #include "jspubtd.h"
 73054: %}
 73054: 
  3213: interface xpcIJSWeakReference;
  3213: 
     1: /**
 76740: * interface of Components.interfacesByID
 76740: * (interesting stuff only reflected into JavaScript)
 76740: */
 76740: [scriptable, uuid(c99cffac-5aed-4267-ad2f-f4a4c9d4a081)]
 76740: interface nsIXPCComponents_InterfacesByID : nsISupports
 76740: {
 76740: };
 76740: 
 76740: /**
 76740: * interface of Components.interfaces
 76740: * (interesting stuff only reflected into JavaScript)
 76740: */
 76740: [scriptable, uuid(b8c31bba-79db-4a1d-930d-4cdd68713f9e)]
 76740: interface nsIXPCComponents_Interfaces : nsISupports
 76740: {
 76740: };
 76740: 
 76740: /**
     1: * interface of Components.classes
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(978ff520-d26c-11d2-9842-006008962422)]
     1: interface nsIXPCComponents_Classes : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of Components.classesByID
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(336a9590-4d19-11d3-9893-006008962422)]
     1: interface nsIXPCComponents_ClassesByID : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of Components.results
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(2fc229a0-5860-11d3-9899-006008962422)]
     1: interface nsIXPCComponents_Results : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of Components.ID
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(7994a6e0-e028-11d3-8f5d-0010a4e73d9a)]
     1: interface nsIXPCComponents_ID : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of Components.Exception
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(5bf039c0-e028-11d3-8f5d-0010a4e73d9a)]
     1: interface nsIXPCComponents_Exception : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of Components.Constructor
     1: * (interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(88655640-e028-11d3-8f5d-0010a4e73d9a)]
     1: interface nsIXPCComponents_Constructor : nsISupports
     1: {
     1: };
     1: 
     1: /**
     1: * interface of object returned by Components.Constructor
     1: * (additional interesting stuff only reflected into JavaScript)
     1: */
     1: [scriptable, uuid(c814ca20-e0dc-11d3-8f5f-0010a4e73d9a)]
     1: interface nsIXPCConstructor : nsISupports
     1: {
     1:     readonly attribute nsIJSCID classID;
     1:     readonly attribute nsIJSIID interfaceID;
     1:     readonly attribute string   initializer;
     1: };
     1: 
     1: /**
     1: * interface of object returned by Components.utils.Sandbox.
     1: */
     1: [scriptable, uuid(4f8ae0dc-d266-4a32-875b-6a9de71a8ce9)]
     1: interface nsIXPCComponents_utils_Sandbox : nsISupports
     1: {
     1: };
     1: 
     1: /**
 72859:  * interface for callback to be passed to Cu.schedulePreciseGC
 72859:  */
 72859: [scriptable, function, uuid(71000535-b0fd-44d1-8ce0-909760e3953c)]
 72859: interface ScheduledGCCallback : nsISupports
 72859: {
 72859:     void callback();
 72859: };
 72859: 
 72859: /**
     1: * interface of Components.utils
     1: */
106126: [scriptable, uuid(2df24c04-f1ef-481c-8605-433082a34e95)]
     1: interface nsIXPCComponents_Utils : nsISupports
     1: {
     1: 
     1:     /* reportError is designed to be called from JavaScript only.
     1:      *
     1:      * It will report a JS Error object to the JS console, and return. It
     1:      * is meant for use in exception handler blocks which want to "eat"
     1:      * an exception, but still want to report it to the console.
     1:      *
     1:      * It must be called with one param, usually an object which was caught by
     1:      * an exception handler.  If it is not a JS error object, the parameter
     1:      * is converted to a string and reported as a new error.
     1:      */
 84868:     [implicit_jscontext] void reportError(in jsval error);
     1: 
     1:     /* lookupMethod is designed to be called from JavaScript only.
     1:      *
     1:      * It returns a method looking only at the idl interfaces and
     1:      * ignores any overrides or resolvers that might be in place for
     1:      * a given scriptable wrapped native.
     1:      * It must be called with two params: an object and a method name.
     1:      * It returns a function object or throws an exception on error.
     1:      * This method exists only to solve mozilla browser problems
     1:      * when chrome attempts to lookup and call methods in content
     1:      * and *must* not get confused by method properties that have been
     1:      * replaced in the content JS code. This method is not recommended for
     1:      * any other use.
     1:      */
 84863:     [implicit_jscontext]
 84863:     jsval lookupMethod(in jsval obj, in jsval name);
     1: 
     1:     readonly attribute nsIXPCComponents_utils_Sandbox Sandbox;
     1: 
     1:     /*
  1725:      * evalInSandbox is designed to be called from JavaScript only.
     1:      *
     1:      * evalInSandbox evaluates the provided source string in the given sandbox.
     1:      * It returns the result of the evaluation to the caller.
     1:      *
     1:      * var s = new C.u.Sandbox("http://www.mozilla.org");
     1:      * var res = C.u.evalInSandbox("var five = 5; 2 + five", s);
     1:      * var outerFive = s.five;
     1:      * s.seven = res;
     1:      * var thirtyFive = C.u.evalInSandbox("five * seven", s);
     1:      */
 84866:     [implicit_jscontext,optional_argc]
 84866:     jsval evalInSandbox(in AString source, in jsval sandbox,
 84866:                         [optional] in jsval version,
 84866:                         [optional] in jsval filename,
 84866:                         [optional] in long lineNo);
  1493: 
  1493: 
  1493:     /*
  1725:      * import is designed to be called from JavaScript only.
  1493:      *
  1725:      * Synchronously loads and evaluates the js file located at
  1725:      * 'registryLocation' with a new, fully privileged global object.
  3499:      *
  3499:      * If 'targetObj' is specified and equal to null, returns the
  3499:      * module's global object. Otherwise (if 'targetObj' is not
  3499:      * specified, or 'targetObj' is != null) looks for a property
  3499:      * 'EXPORTED_SYMBOLS' on the new global object. 'EXPORTED_SYMBOLS'
  3499:      * is expected to be an array of strings identifying properties on
  3499:      * the global object.  These properties will be installed as
  3499:      * properties on 'targetObj', or, if 'targetObj' is not specified,
  3499:      * on the caller's global object. If 'EXPORTED_SYMBOLS' is not
  3499:      * found, an error is thrown.
  1493:      *
  3481:      * @param resourceURI A resource:// URI string to load the module from.
  1725:      * @param targetObj  the object to install the exported properties on.
  3499:      *        If this parameter is a primitive value, this method throws
  3499:      *        an exception.
  3499:      * @returns the module code's global object.
  1725:      *
  1725:      * The implementation maintains a hash of registryLocation->global obj.
  1725:      * Subsequent invocations of importModule with 'registryLocation'
  1725:      * pointing to the same file will not cause the module to be re-evaluated,
  1493:      * but the symbols in EXPORTED_SYMBOLS will be exported into the
  1725:      * specified target object and the global object returned as above.
  1725:      *
  1725:      * (This comment is duplicated from xpcIJSModuleLoader.)
  1493:      */
 84864:     [implicit_jscontext,optional_argc]
 84864:     jsval import(in AUTF8String aResourceURI, [optional] in jsval targetObj);
  3213: 
  3213:     /*
 71853:      * Unloads the JS module at 'registryLocation'. Existing references to the
 71853:      * module will continue to work but any subsequent import of the module will
 71853:      * reload it and give new reference. If the JS module hasn't yet been
 71853:      * imported then this method will do nothing.
 71853:      *
 71853:      * @param resourceURI A resource:// URI string to unload the module from.
 71853:      */
 71853:     void unload(in AUTF8String registryLocation);
 71853: 
 71853:     /*
  3213:      * To be called from JS only.
  3213:      *
  3213:      * Return a weak reference for the given JS object.
  3213:      */
 84870:     [implicit_jscontext]
 84870:     xpcIJSWeakReference getWeakReference(in jsval obj);
  3213: 
  3213:     /*
  3213:      * To be called from JS only.
  3213:      *
  3213:      * Force an immediate garbage collection cycle.
  3213:      */
  3213:     void forceGC();
 41835:     
 41835:     /*
 87775:      * To be called from JS only.
 87775:      *
 87775:      * Force an immediate shrinking garbage collection cycle.
 87775:      */
 87775:     void forceShrinkingGC();
 87775: 
 87775:     /*
 72859:      * Schedule a garbage collection cycle for a point in the future when no JS
 72859:      * is running. Call the provided function once this has occurred.
 72859:      */
 72859:     void schedulePreciseGC(in ScheduledGCCallback callback);
 72859:     
 87775:     /*
 87775:      * Schedule a shrinking garbage collection cycle for a point in the future
 87775:      * when no JS is running. Call the provided function once this has occured.
 87775:      */
 87775:     void schedulePreciseShrinkingGC(in ScheduledGCCallback callback);
 87775: 
 80352:     /**
 80352:      * Return the keys in a weak map.  This operation is
 80352:      * non-deterministic because it is affected by the scheduling of the
 80352:      * garbage collector and the cycle collector.
 80352:      *
 80352:      * This should only be used to write tests of the interaction of
 80352:      * the GC and CC with weak maps.
 80352:      *
 80352:      * @param aMap weak map or other JavaScript value
 80352:      * @returns If aMap is a weak map object, return the keys of the weak
 80352:                 map as an array.  Otherwise, return undefined.
 80352:      */
 80352:     [implicit_jscontext]
 80352:     jsval nondeterministicGetWeakMapKeys(in jsval aMap);
 80352: 
 91659:     [implicit_jscontext]
 91659:     jsval getJSTestingFunctions();
 91659: 
 72859:     /*
 41835:      * To be called from JS only.
 41835:      *
 41835:      * Returns the global object with which the given object is associated.
 41835:      *
 41967:      * @param obj The JavaScript object whose global is to be gotten.
 41835:      * @return the corresponding global.
 41835:      */
 83348:     [implicit_jscontext]
 83348:     jsval getGlobalForObject(in jsval obj);
 73054: 
 73054:     /*
 73054:      * To be called from JS only.
 73054:      *
 73054:      * Returns an object created in |vobj|'s compartment.
 73054:      */
 73054:     [implicit_jscontext]
 73054:     jsval createObjectIn(in jsval vobj);
 73054: 
 73054:     /*
 73054:      * To be called from JS only.
 73054:      *
102368:      * Returns an array created in |vobj|'s compartment.
102368:      */
102368:     [implicit_jscontext]
102368:     jsval createArrayIn(in jsval vobj);
102368: 
102368:     /*
102368:      * To be called from JS only.
102368:      *
 73054:      * Ensures that all functions come from vobj's scope (and aren't cross
 73054:      * compartment wrappers).
 73054:      */
 73054:     [implicit_jscontext]
 73054:     void makeObjectPropsNormal(in jsval vobj);
 80969: 
105788:     /**
105788:      * Determines whether this object is backed by a DeadObjectProxy.
105788:      *
105788:      * Dead-wrapper objects hold no other objects alive (they have no outgoing
105788:      * reference edges) and will throw if you touch them (e.g. by
105788:      * reading/writing a property).
105788:      */
105788:     bool isDeadWrapper(in jsval obj);
105788: 
 80969:     /*
106126:      * To be called from JS only. This is for Gecko internal use only, and may
106126:      * disappear at any moment.
106126:      *
106126:      * Forces a recomputation of all wrappers in and out of the compartment
106126:      * containing |obj|. If |obj| is not an object, all wrappers system-wide
106126:      * are recomputed.
106126:      */
106126:     [implicit_jscontext]
106126:     void recomputeWrappers([optional] in jsval vobj);
106126: 
106126:     /*
 80969:      * To be called from JS only.
 80969:      *
 80969:      * These are the set of JSContext options that privileged script
 80969:      * is allowed to control for the purposes of testing.  These
 80969:      * options should be kept in sync with what's controllable in the
 80969:      * jsshell and by setting prefs in nsJSEnvironment.
 80969:      *
 80969:      * NB: Assume that getting any of these attributes is relatively
 80969:      * cheap, but setting any of them is relatively expensive.
 80969:      */
 83362:     [implicit_jscontext]
 80969:     attribute boolean strict;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean werror;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean atline;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean xml;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean relimit;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean methodjit;
 83362: 
 83362:     [implicit_jscontext]
 80969:     attribute boolean methodjit_always;
 83362: 
 80969:     [implicit_jscontext]
 97827:     attribute boolean strict_mode;
 97827: 
 97827:     [implicit_jscontext]
 80969:     void setGCZeal(in long zeal);
105546: 
105546:     [implicit_jscontext]
105546:     void nukeSandbox(in jsval obj);
     1: };
     1: 
     1: /**
     1: * interface of JavaScript's 'Components' object
     1: */
106126: [scriptable, uuid(8406dedb-23cc-42db-9f69-1f18785091b5)]
     1: interface nsIXPCComponents : nsISupports
     1: {
 76740:     readonly attribute nsIXPCComponents_Interfaces      interfaces;
 76740:     readonly attribute nsIXPCComponents_InterfacesByID  interfacesByID;
     1:     readonly attribute nsIXPCComponents_Classes         classes;
     1:     readonly attribute nsIXPCComponents_ClassesByID     classesByID;
     1:     readonly attribute nsIStackFrame                    stack;
     1:     readonly attribute nsIXPCComponents_Results         results;
     1:     readonly attribute nsIComponentManager              manager;
     1:     readonly attribute nsIXPCComponents_Utils           utils;
     1: 
     1:     readonly attribute nsIXPCComponents_ID              ID;
     1:     readonly attribute nsIXPCComponents_Exception       Exception;
     1:     readonly attribute nsIXPCComponents_Constructor     Constructor;
     1: 
     1:     boolean isSuccessCode(in nsresult result);
     1: 
 64054:     /* @deprecated Use Components.utils.lookupMethod instead.
     1:      * (But are you sure you really want this method any more?
     1:      *  See http://developer-test.mozilla.org/en/docs/XPCNativeWrapper )
     1:      */
 84863:     [deprecated,implicit_jscontext]
 84863:     jsval lookupMethod(in jsval obj, in jsval name);
     1: 
 64054:     /* @deprecated Use Components.utils.reportError instead. */
 84868:     [deprecated, implicit_jscontext] void reportError(in jsval error);
     1: 
     1:     /* 'lastResult' is accessible via JavaScript only */
     1:     /* 'returnCode' is accessible via JavaScript only */
     1: };
