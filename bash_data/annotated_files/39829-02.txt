    1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is 
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Josh Aas <josh@mozilla.com>
    1:  *   Sylvain Pasche <sylvain.pasche@gmail.com>
 4864:  *   Stuart Morgan <stuart.morgan@alumni.case.edu>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsCocoaUtils_h_
    1: #define nsCocoaUtils_h_
    1: 
    1: #import <Cocoa/Cocoa.h>
    1: 
    1: #include "nsRect.h"
14024: #include "nsObjCExceptions.h"
39278: #include "imgIContainer.h"
13608: 
26846: class nsIWidget;
26846: 
14024: // Used to retain a Cocoa object for the remainder of a method's execution.
14024: class nsAutoRetainCocoaObject {
14024: public:
14024: nsAutoRetainCocoaObject(id anObject)
14024: {
14024:   mObject = NS_OBJC_TRY_EXPR_ABORT([anObject retain]);
14024: }
14024: ~nsAutoRetainCocoaObject()
14024: {
14024:   NS_OBJC_TRY_ABORT([mObject release]);
14024: }
14024: private:
14024:   id mObject;  // [STRONG]
14024: };
14024: 
13608: @interface NSApplication (Undocumented)
13608: 
13608: // Present in all versions of OS X from (at least) 10.2.8 through 10.5.
13608: - (BOOL)_isRunningModal;
13608: - (BOOL)_isRunningAppModal;
13608: 
13608: // It's sometimes necessary to explicitly remove a window from the "window
13608: // cache" in order to deactivate it.  The "window cache" is an undocumented
13608: // subsystem, all of whose methods are included in the NSWindowCache category
13608: // of the NSApplication class (in header files generated using class-dump).
20595: // Present in all versions of OS X from (at least) 10.2.8 through 10.5.
13608: - (void)_removeWindowFromCache:(NSWindow *)aWindow;
13608: 
20595: // Send an event to the current Cocoa app-modal session.  Present in all
20595: // versions of OS X from (at least) 10.2.8 through 10.5.
20595: - (void)_modalSession:(NSModalSession)aSession sendEvent:(NSEvent *)theEvent;
20595: 
36962: // Present (and documented) on OS X 10.6 and above.  Not present before 10.6.
36962: // This declaration needed to avoid compiler warnings when compiling on 10.5
36962: // and below (or using the 10.5 SDK and below).
36962: - (void)setHelpMenu:(NSMenu *)helpMenu;
36962: 
13608: @end
    1: 
 8779: class nsCocoaUtils
 8779: {
 8779:   public:
 8779:   // Returns the height of the primary screen (the one with the menu bar, which
 8779:   // is documented to be the first in the |screens| array).
 8779:   static float MenuBarScreenHeight();
 8779: 
 4864:   // Returns the given y coordinate, which must be in screen coordinates,
 4864:   // flipped from Gecko to Cocoa or Cocoa to Gecko.
 8779:   static float FlippedScreenY(float y);
    1:   
 8779:   // Gecko rects (nsRect) contain an origin (x,y) in a coordinate
 8779:   // system with (0,0) in the top-left of the primary screen. Cocoa rects
 8779:   // (NSRect) contain an origin (x,y) in a coordinate system with (0,0)
 8779:   // in the bottom-left of the primary screen. Both nsRect and NSRect
 8779:   // contain width/height info, with no difference in their use.
23738:   static NSRect GeckoRectToCocoaRect(const nsIntRect &geckoRect);
    1:   
    1:   // See explanation for geckoRectToCocoaRect, guess what this does...
23738:   static nsIntRect CocoaRectToGeckoRect(const NSRect &cocoaRect);
 8779:   
 8779:   // Gives the location for the event in screen coordinates. Do not call this
 8779:   // unless the window the event was originally targeted at is still alive!
35621:   // anEvent may be nil -- in that case the current mouse location is returned.
 8779:   static NSPoint ScreenLocationForEvent(NSEvent* anEvent);
 8779:   
 8779:   // Determines if an event happened over a window, whether or not the event
 8779:   // is for the window. Does not take window z-order into account.
 8779:   static BOOL IsEventOverWindow(NSEvent* anEvent, NSWindow* aWindow);
 8779: 
 8779:   // Events are set up so that their coordinates refer to the window to which they
 8779:   // were originally sent. If we reroute the event somewhere else, we'll have
 8779:   // to get the window coordinates this way. Do not call this unless the window
 8779:   // the event was originally targeted at is still alive!
 8779:   static NSPoint EventLocationForWindow(NSEvent* anEvent, NSWindow* aWindow);
 8779: 
30550:   // Hides the Menu bar and the Dock. Multiple hide/show requests can be nested.
30550:   static void HideOSChromeOnScreen(PRBool aShouldHide, NSScreen* aScreen);
30550: 
13608:   static nsIWidget* GetHiddenWindowWidget();
13608: 
13608:   static void PrepareForNativeAppModalDialog();
13608:   static void CleanUpAfterNativeAppModalDialog();
39278: 
39278:   // 3 utility functions to go from a frame of imgIContainer to CGImage and then to NSImage
39278:   // Convert imgIContainer -> CGImageRef, caller owns result
39278:   
39278:   /** Creates a <code>CGImageRef</code> from a frame contained in an <code>imgIContainer</code>.
39278:       Copies the pixel data from the indicated frame of the <code>imgIContainer</code> into a new <code>CGImageRef</code>.
39278:       The caller owns the <code>CGImageRef</code>. 
39829:       @param aFrame the frame to convert
39278:       @param aResult the resulting CGImageRef
39278:       @return NS_OK if the conversion worked, NS_ERROR_FAILURE otherwise
39278:    */
39829:   static nsresult CreateCGImageFromSurface(gfxImageSurface *aFrame, CGImageRef *aResult);
39278:   
39278:   /** Creates a Cocoa <code>NSImage</code> from a <code>CGImageRef</code>.
39278:       Copies the pixel data from the <code>CGImageRef</code> into a new <code>NSImage</code>.
39278:       The caller owns the <code>NSImage</code>. 
39278:       @param aInputImage the image to convert
39278:       @param aResult the resulting NSImage
39278:       @return NS_OK if the conversion worked, NS_ERROR_FAILURE otherwise
39278:    */
39278:   static nsresult CreateNSImageFromCGImage(CGImageRef aInputImage, NSImage **aResult);
39278: 
39278:   /** Creates a Cocoa <code>NSImage</code> from a frame of an <code>imgIContainer</code>.
39278:       Combines the two methods above. The caller owns the <code>NSImage</code>.
39278:       @param aImage the image to extract a frame from
39278:       @param aWhichFrame the frame to extract (see imgIContainer FRAME_*)
39278:       @param aResult the resulting NSImage
39278:       @return NS_OK if the conversion worked, NS_ERROR_FAILURE otherwise
39278:    */  
39278:   static nsresult CreateNSImageFromImageContainer(imgIContainer *aImage, PRUint32 aWhichFrame, NSImage **aResult);
 8779: };
    1: 
    1: #endif // nsCocoaUtils_h_
