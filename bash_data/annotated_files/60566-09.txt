47478: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is SpiderMonkey E4X code, released August, 2004.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef jsxml_h___
    1: #define jsxml_h___
    1: 
40378: #include "jspubtd.h"
42693: #include "jsobj.h"
54707: #include "jscell.h"
    1: 
    1: extern const char js_AnyName_str[];
    1: extern const char js_AttributeName_str[];
    1: extern const char js_isXMLName_str[];
    1: extern const char js_XMLList_str[];
    1: 
    1: extern const char js_amp_entity_str[];
    1: extern const char js_gt_entity_str[];
    1: extern const char js_lt_entity_str[];
    1: extern const char js_quot_entity_str[];
    1: 
    1: typedef JSBool
18907: (* JSIdentityOp)(const void *a, const void *b);
    1: 
    1: struct JSXMLArray {
    1:     uint32              length;
    1:     uint32              capacity;
    1:     void                **vector;
    1:     JSXMLArrayCursor    *cursors;
47478: 
47478:     void init() {
47478:         length = capacity = 0;
47478:         vector = NULL;
47478:         cursors = NULL;
47478:     }
47478: 
47478:     void finish(JSContext *cx);
47478: 
47478:     bool setCapacity(JSContext *cx, uint32 capacity);
47478:     void trim();
    1: };
    1: 
40383: struct JSXMLArrayCursor
40383: {
40383:     JSXMLArray       *array;
40383:     uint32           index;
40383:     JSXMLArrayCursor *next;
40383:     JSXMLArrayCursor **prevp;
40383:     void             *root;
40383: 
40383:     JSXMLArrayCursor(JSXMLArray *array)
40383:       : array(array), index(0), next(array->cursors), prevp(&array->cursors),
40383:         root(NULL)
40383:     {
40383:         if (next)
40383:             next->prevp = &next;
40383:         array->cursors = this;
40383:     }
40383: 
40383:     ~JSXMLArrayCursor() { disconnect(); }
40383: 
40383:     void disconnect() {
40383:         if (!array)
40383:             return;
40383:         if (next)
40383:             next->prevp = prevp;
40383:         *prevp = next;
40383:         array = NULL;
40383:     }
40383: 
40383:     void *getNext() {
40383:         if (!array || index >= array->length)
40383:             return NULL;
40383:         return root = array->vector[index++];
40383:     }
40383: 
40383:     void *getCurrent() {
40383:         if (!array || index >= array->length)
40383:             return NULL;
40383:         return root = array->vector[index];
40383:     }
40383: 
54707:     void trace(JSTracer *trc);
40383: };
40383: 
    1: #define JSXML_PRESET_CAPACITY   JS_BIT(31)
    1: #define JSXML_CAPACITY_MASK     JS_BITMASK(31)
    1: #define JSXML_CAPACITY(array)   ((array)->capacity & JSXML_CAPACITY_MASK)
    1: 
    1: /*
    1:  * NB: don't reorder this enum without changing all array initializers that
    1:  * depend on it in jsxml.c.
    1:  */
    1: typedef enum JSXMLClass {
    1:     JSXML_CLASS_LIST,
    1:     JSXML_CLASS_ELEMENT,
    1:     JSXML_CLASS_ATTRIBUTE,
    1:     JSXML_CLASS_PROCESSING_INSTRUCTION,
    1:     JSXML_CLASS_TEXT,
    1:     JSXML_CLASS_COMMENT,
    1:     JSXML_CLASS_LIMIT
    1: } JSXMLClass;
    1: 
    1: #define JSXML_CLASS_HAS_KIDS(class_)    ((class_) < JSXML_CLASS_ATTRIBUTE)
    1: #define JSXML_CLASS_HAS_VALUE(class_)   ((class_) >= JSXML_CLASS_ATTRIBUTE)
    1: #define JSXML_CLASS_HAS_NAME(class_)                                          \
    1:     ((uintN)((class_) - JSXML_CLASS_ELEMENT) <=                               \
    1:      (uintN)(JSXML_CLASS_PROCESSING_INSTRUCTION - JSXML_CLASS_ELEMENT))
    1: 
    1: #ifdef DEBUG_notme
    1: #include "jsclist.h"
    1: #endif
    1: 
 3164: typedef struct JSXMLListVar {
 3164:     JSXMLArray          kids;           /* NB: must come first */
 3164:     JSXML               *target;
18520:     JSObject            *targetprop;
 3164: } JSXMLListVar;
 3164: 
 3164: typedef struct JSXMLElemVar {
 3164:     JSXMLArray          kids;           /* NB: must come first */
 3164:     JSXMLArray          namespaces;
 3164:     JSXMLArray          attrs;
 3164: } JSXMLElemVar;
 3164: 
54707: /* union member shorthands */
54707: #define xml_kids        u.list.kids
54707: #define xml_target      u.list.target
54707: #define xml_targetprop  u.list.targetprop
54707: #define xml_namespaces  u.elem.namespaces
54707: #define xml_attrs       u.elem.attrs
54707: #define xml_value       u.value
54707: 
54707: /* xml_class-testing macros */
54707: #define JSXML_HAS_KIDS(xml)     JSXML_CLASS_HAS_KIDS((xml)->xml_class)
54707: #define JSXML_HAS_VALUE(xml)    JSXML_CLASS_HAS_VALUE((xml)->xml_class)
54707: #define JSXML_HAS_NAME(xml)     JSXML_CLASS_HAS_NAME((xml)->xml_class)
54707: #define JSXML_LENGTH(xml)       (JSXML_CLASS_HAS_KIDS((xml)->xml_class)       \
54707:                                  ? (xml)->xml_kids.length                     \
54707:                                  : 0)
54707: 
54707: struct JSXML : js::gc::Cell {
    1: #ifdef DEBUG_notme
    1:     JSCList             links;
    1:     uint32              serial;
    1: #endif
    1:     JSObject            *object;
    1:     void                *domnode;       /* DOM node if mapped info item */
    1:     JSXML               *parent;
18520:     JSObject            *name;
34568:     uint32              xml_class;      /* discriminates u, below */
34568:     uint32              xml_flags;      /* flags, see below */
    1:     union {
 3165:         JSXMLListVar    list;
 3165:         JSXMLElemVar    elem;
    1:         JSString        *value;
    1:     } u;
54707:     
57817:     void finalize(JSContext *cx) {
54707:         if (JSXML_HAS_KIDS(this)) {
54707:             xml_kids.finish(cx);
54707:             if (xml_class == JSXML_CLASS_ELEMENT) {
54707:                 xml_namespaces.finish(cx);
54707:                 xml_attrs.finish(cx);
54707:             }
54707:         }
54707: #ifdef DEBUG_notme
54707:         JS_REMOVE_LINK(&links);
54707: #endif
54707:     }
30439: };
    1: 
    1: /* xml_flags values */
    1: #define XMLF_WHITESPACE_TEXT    0x1
    1: 
    1: extern JSXML *
    1: js_NewXML(JSContext *cx, JSXMLClass xml_class);
    1: 
    1: extern void
  583: js_TraceXML(JSTracer *trc, JSXML *xml);
    1: 
    1: extern JSObject *
    1: js_NewXMLObject(JSContext *cx, JSXMLClass xml_class);
    1: 
    1: extern JSObject *
    1: js_GetXMLObject(JSContext *cx, JSXML *xml);
    1: 
48470: extern JS_FRIEND_DATA(js::Class) js_XMLClass;
48622: extern JS_FRIEND_DATA(js::Class) js_NamespaceClass;
48622: extern JS_FRIEND_DATA(js::Class) js_QNameClass;
48470: extern JS_FRIEND_DATA(js::Class) js_AttributeNameClass;
48470: extern JS_FRIEND_DATA(js::Class) js_AnyNameClass;
48470: extern js::Class                 js_XMLFilterClass;
    1: 
    1: /*
37003:  * Methods to test whether an object or a value is of type "xml" (per typeof).
    1:  */
37003: inline bool
37003: JSObject::isXML() const
37003: {
48622:     return getClass() == &js_XMLClass;
37003: }
37003: 
48591: inline bool
48591: JSObject::isXMLId() const
48591: {
48591:     js::Class *clasp = getClass();
48622:     return clasp == &js_QNameClass ||
48591:            clasp == &js_AttributeNameClass ||
48591:            clasp == &js_AnyNameClass;
48591: }
48591: 
42693: #define VALUE_IS_XML(v)      (!JSVAL_IS_PRIMITIVE(v) && JSVAL_TO_OBJECT(v)->isXML())
42693: 
42693: inline bool
42693: JSObject::isNamespace() const
42693: {
48622:     return getClass() == &js_NamespaceClass;
42693: }
42693: 
42693: inline bool
42693: JSObject::isQName() const
42693: {
48470:     js::Class* clasp = getClass();
48622:     return clasp == &js_QNameClass ||
42693:            clasp == &js_AttributeNameClass ||
42693:            clasp == &js_AnyNameClass;
42693: }
    1: 
48470: static inline bool
48470: IsXML(const js::Value &v)
48470: {
48470:     return v.isObject() && v.toObject().isXML();
48470: }
48470: 
    1: extern JSObject *
    1: js_InitNamespaceClass(JSContext *cx, JSObject *obj);
    1: 
    1: extern JSObject *
    1: js_InitQNameClass(JSContext *cx, JSObject *obj);
    1: 
    1: extern JSObject *
    1: js_InitXMLClass(JSContext *cx, JSObject *obj);
    1: 
    1: extern JSObject *
    1: js_InitXMLClasses(JSContext *cx, JSObject *obj);
    1: 
    1: extern JSBool
48470: js_GetFunctionNamespace(JSContext *cx, js::Value *vp);
    1: 
    1: /*
    1:  * If obj is QName corresponding to function::name, set *funidp to name's id,
48470:  * otherwise set *funidp to void.
    1:  */
    1: JSBool
    1: js_IsFunctionQName(JSContext *cx, JSObject *obj, jsid *funidp);
    1: 
    1: extern JSBool
    1: js_GetDefaultXMLNamespace(JSContext *cx, jsval *vp);
    1: 
    1: extern JSBool
48470: js_SetDefaultXMLNamespace(JSContext *cx, const js::Value &v);
    1: 
    1: /*
    1:  * Return true if v is a XML QName object, or if it converts to a string that
    1:  * contains a valid XML qualified name (one containing no :), false otherwise.
    1:  * NB: This function is an infallible predicate, it hides exceptions.
    1:  */
    1: extern JSBool
    1: js_IsXMLName(JSContext *cx, jsval v);
    1: 
    1: extern JSBool
48470: js_ToAttributeName(JSContext *cx, js::Value *vp);
    1: 
59890: extern JSLinearString *
 9762: js_EscapeAttributeValue(JSContext *cx, JSString *str, JSBool quote);
    1: 
    1: extern JSString *
    1: js_AddAttributePart(JSContext *cx, JSBool isName, JSString *str,
    1:                     JSString *str2);
    1: 
    1: extern JSString *
    1: js_EscapeElementValue(JSContext *cx, JSString *str);
    1: 
    1: extern JSString *
48470: js_ValueToXMLString(JSContext *cx, const js::Value &v);
    1: 
18520: extern JSObject *
48470: js_ConstructXMLQNameObject(JSContext *cx, const js::Value & nsval,
48470:                            const js::Value & lnval);
18520: 
    1: extern JSBool
48470: js_GetAnyName(JSContext *cx, jsid *idp);
    1: 
    1: /*
    1:  * Note: nameval must be either QName, AttributeName, or AnyName.
    1:  */
    1: extern JSBool
48470: js_FindXMLProperty(JSContext *cx, const js::Value &nameval, JSObject **objp, jsid *idp);
    1: 
    1: extern JSBool
48470: js_GetXMLMethod(JSContext *cx, JSObject *obj, jsid id, js::Value *vp);
    1: 
    1: extern JSBool
    1: js_GetXMLDescendants(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
    1: 
    1: extern JSBool
    1: js_DeleteXMLListElements(JSContext *cx, JSObject *listobj);
    1: 
    1: extern JSBool
11672: js_StepXMLListFilter(JSContext *cx, JSBool initialized);
    1: 
    1: extern JSObject *
48470: js_ValueToXMLObject(JSContext *cx, const js::Value &v);
    1: 
    1: extern JSObject *
48470: js_ValueToXMLListObject(JSContext *cx, const js::Value &v);
    1: 
    1: extern JSObject *
    1: js_NewXMLSpecialObject(JSContext *cx, JSXMLClass xml_class, JSString *name,
    1:                        JSString *value);
    1: 
    1: extern JSString *
    1: js_MakeXMLCDATAString(JSContext *cx, JSString *str);
    1: 
    1: extern JSString *
    1: js_MakeXMLCommentString(JSContext *cx, JSString *str);
    1: 
    1: extern JSString *
    1: js_MakeXMLPIString(JSContext *cx, JSString *name, JSString *str);
    1: 
48470: /* The caller must ensure that either v1 or v2 is an object. */
26187: extern JSBool
48470: js_TestXMLEquality(JSContext *cx, const js::Value &v1, const js::Value &v2,
48470:                    JSBool *bp);
26187: 
26187: extern JSBool
48470: js_ConcatenateXML(JSContext *cx, JSObject *obj1, JSObject *obj2, js::Value *vp);
 3164: 
    1: #endif /* jsxml_h___ */
