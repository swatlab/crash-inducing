16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:  function: linear scale -> dB, Bark and Mel scales
31034:  last mod: $Id: scales.h 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #ifndef _V_SCALES_H_
16295: #define _V_SCALES_H_
16295: 
16295: #include <math.h>
16295: #include "os.h"
16295: 
30043: #ifdef _MSC_VER
30043: /* MS Visual Studio doesn't have C99 inline keyword. */
30043: #define inline __inline
30043: #endif
30043: 
16295: /* 20log10(x) */
16295: #define VORBIS_IEEE_FLOAT32 1
16295: #ifdef VORBIS_IEEE_FLOAT32
16295: 
30043: static inline float unitnorm(float x){
16295:   union {
16295:     ogg_uint32_t i;
16295:     float f;
16295:   } ix;
16295:   ix.f = x;
16295:   ix.i = (ix.i & 0x80000000U) | (0x3f800000U);
16295:   return ix.f;
16295: }
16295: 
16295: /* Segher was off (too high) by ~ .3 decibel.  Center the conversion correctly. */
30043: static inline float todB(const float *x){
16295:   union {
16295:     ogg_uint32_t i;
16295:     float f;
16295:   } ix;
16295:   ix.f = *x;
16295:   ix.i = ix.i&0x7fffffff;
16295:   return (float)(ix.i * 7.17711438e-7f -764.6161886f);
16295: }
16295: 
16295: #define todB_nn(x) todB(x)
16295: 
16295: #else
16295: 
16295: static float unitnorm(float x){
16295:   if(x<0)return(-1.f);
16295:   return(1.f);
16295: }
16295: 
16295: #define todB(x)   (*(x)==0?-400.f:log(*(x)**(x))*4.34294480f)
16295: #define todB_nn(x)   (*(x)==0.f?-400.f:log(*(x))*8.6858896f)
16295: 
16295: #endif
16295: 
16295: #define fromdB(x) (exp((x)*.11512925f))
16295: 
16295: /* The bark scale equations are approximations, since the original
16295:    table was somewhat hand rolled.  The below are chosen to have the
16295:    best possible fit to the rolled tables, thus their somewhat odd
16295:    appearance (these are more accurate and over a longer range than
16295:    the oft-quoted bark equations found in the texts I have).  The
16295:    approximations are valid from 0 - 30kHz (nyquist) or so.
16295: 
16295:    all f in Hz, z in Bark */
16295: 
16295: #define toBARK(n)   (13.1f*atan(.00074f*(n))+2.24f*atan((n)*(n)*1.85e-8f)+1e-4f*(n))
16295: #define fromBARK(z) (102.f*(z)-2.f*pow(z,2.f)+.4f*pow(z,3.f)+pow(1.46f,z)-1.f)
16295: #define toMEL(n)    (log(1.f+(n)*.001f)*1442.695f)
16295: #define fromMEL(m)  (1000.f*exp((m)/1442.695f)-1000.f)
16295: 
16295: /* Frequency to octave.  We arbitrarily declare 63.5 Hz to be octave
16295:    0.0 */
16295: 
16295: #define toOC(n)     (log(n)*1.442695f-5.965784f)
16295: #define fromOC(o)   (exp(((o)+5.965784f)*.693147f))
16295: 
16295: #endif
