111706: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
111706:  * vim: set ts=4 sw=4 et tw=79:
111706:  *
111706:  * ***** BEGIN LICENSE BLOCK *****
111706:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
111706:  *
111706:  * The contents of this file are subject to the Mozilla Public License Version
111706:  * 1.1 (the "License"); you may not use this file except in compliance with
111706:  * the License. You may obtain a copy of the License at
111706:  * http://www.mozilla.org/MPL/
111706:  *
111706:  * Software distributed under the License is distributed on an "AS IS" basis,
111706:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
111706:  * for the specific language governing rights and limitations under the
111706:  * License.
111706:  *
111706:  * The Original Code is Mozilla Communicator client code, released
111706:  * March 31, 1998.
111706:  *
111706:  * The Initial Developer of the Original Code is
111706:  * Netscape Communications Corporation.
111706:  * Portions created by the Initial Developer are Copyright (C) 1998
111706:  * the Initial Developer. All Rights Reserved.
111706:  *
111706:  * Contributor(s):
111706:  *   David Anderson <danderson@mozilla.com>
111706:  *
111706:  * Alternatively, the contents of this file may be used under the terms of
111706:  * either of the GNU General Public License Version 2 or later (the "GPL"),
111706:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
111706:  * in which case the provisions of the GPL or the LGPL are applicable instead
111706:  * of those above. If you wish to allow use of your version of this file only
111706:  * under the terms of either the GPL or the LGPL, and not to allow others to
111706:  * use your version of this file under the terms of the MPL, indicate your
111706:  * decision by deleting the provisions above and replace them with the notice
111706:  * and other provisions required by the GPL or the LGPL. If you do not delete
111706:  * the provisions above, a recipient may use your version of this file under
111706:  * the terms of any one of the MPL, the GPL or the LGPL.
111706:  *
111706:  * ***** END LICENSE BLOCK ***** */
111706: 
111706: #ifndef jsion_lir_x64_h__
111706: #define jsion_lir_x64_h__
111706: 
111706: #include "ion/TypeOracle.h"
111706: 
111706: namespace js {
111706: namespace ion {
111706: 
111706: // Given a typed input, returns an untyped box.
111706: class LBox : public LInstructionHelper<1, 1, 0>
111706: {
111706:     MIRType type_;
111706: 
111706:   public:
111706:     LIR_HEADER(Box);
111706: 
111706:     LBox(MIRType type, const LAllocation &payload)
111706:       : type_(type)
111706:     {
111706:         setOperand(0, payload);
111706:     }
111769: 
111769:     MIRType type() const {
111769:         return type_;
111769:     }
111706: };
111706: 
111707: // Given an untyped input, guards on whether it's an integer and returns an
111707: // integer payload.
111707: class LUnboxBoolean : public LInstructionHelper<1, 1, 1>
111707: {
111707:   public:
111707:     LIR_HEADER(UnboxBoolean);
111707: 
111707:     LUnboxBoolean(const LAllocation &input, const LDefinition &temp) {
111707:         setOperand(0, input);
111707:         setTemp(0, temp);
111707:     }
111707: };
111707: 
111707: // Given an untyped input, guards on whether it's an integer and returns an
111707: // integer payload.
111769: class LUnboxInteger : public LInstructionHelper<1, 1, 0>
111707: {
111707:   public:
111707:     LIR_HEADER(UnboxInteger);
111707: 
111769:     LUnboxInteger(const LAllocation &input) {
111707:         setOperand(0, input);
111707:     }
111707: };
111707: 
111707: // Given an untyped input, guards on whether it's a double and returns a double
111707: // payload.
111920: class LUnboxDouble : public LInstructionHelper<1, 1, 1>
111707: {
111707:   public:
111707:     LIR_HEADER(UnboxDouble);
111707: 
111920:     LUnboxDouble(const LAllocation &input, const LDefinition &temp) {
111707:         setOperand(0, input);
111920:         setTemp(0, temp);
111707:     }
111707: };
111707: 
111707: // Given an untyped input, guards on whether it's an object and returns the
111707: // pointer.
111707: class LUnboxObject : public LInstructionHelper<1, 1, 0>
111707: {
111707:   public:
111707:     LIR_HEADER(UnboxObject);
111707: 
111707:     LUnboxObject(const LAllocation &input) {
111707:         setOperand(0, input);
111707:     }
111707: };
111707: 
111707: // Given an untyped input, guards on whether it's a string and returns the
111707: // pointer.
111707: class LUnboxString : public LInstructionHelper<1, 1, 1>
111707: {
111707:   public:
111707:     LIR_HEADER(UnboxString);
111707: 
111707:     LUnboxString(const LAllocation &input, const LDefinition &temp) {
111707:         setOperand(0, input);
111707:         setTemp(0, temp);
111707:     }
111707: };
111707: 
111920: // Constant double.
111920: class LDouble : public LInstructionHelper<1, 0, 1>
111920: {
111920:     double d_;
111920: 
111920:   public:
111920:     LIR_HEADER(Double);
111920: 
111962:     LDouble(double d, const LDefinition &temp) : d_(d) {
111962:         setTemp(0, temp);
111962:     }
111920: 
111920:     double getDouble() const {
111920:         return d_;
111920:     }
111920: };
111920: 
111706: } // namespace ion
111706: } // namespace js
111706: 
111706: #endif // jsion_lir_x64_h__
111706: 
