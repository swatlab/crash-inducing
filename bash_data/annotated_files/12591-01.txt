    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Implementations of DOM Core's nsIDOMComment node.
    1:  */
    1: 
    1: #include "nsIDOMComment.h"
    1: #include "nsGenericDOMDataNode.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsIDocument.h"
    1: 
    1: class nsCommentNode : public nsGenericDOMDataNode,
    1:                       public nsIDOMComment
    1: {
    1: public:
    1:   nsCommentNode(nsINodeInfo *aNodeInfo);
    1:   virtual ~nsCommentNode();
    1: 
    1:   // nsISupports
    1:   NS_DECL_ISUPPORTS_INHERITED
    1: 
    1:   // nsIDOMNode
    1:   NS_IMPL_NSIDOMNODE_USING_GENERIC_DOM_DATA
    1: 
    1:   // nsIDOMCharacterData
    1:   NS_FORWARD_NSIDOMCHARACTERDATA(nsGenericDOMDataNode::)
    1: 
    1:   // nsIDOMComment
    1:   // Empty interface
    1: 
    1:   // nsIContent
    1:   virtual PRBool MayHaveFrame() const;
    1:   virtual PRBool IsNodeOfType(PRUint32 aFlags) const;
    1: 
    1: #ifdef DEBUG
    1:   virtual void List(FILE* out, PRInt32 aIndent) const;
    1:   virtual void DumpContent(FILE* out = stdout, PRInt32 aIndent = 0,
    1:                            PRBool aDumpAll = PR_TRUE) const
    1:   {
    1:     return;
    1:   }
    1: #endif
    1: };
    1: 
    1: nsresult
    1: NS_NewCommentNode(nsIContent** aInstancePtrResult,
    1:                   nsNodeInfoManager *aNodeInfoManager)
    1: {
    1:   NS_PRECONDITION(aNodeInfoManager, "Missing nodeinfo manager");
    1: 
    1:   *aInstancePtrResult = nsnull;
    1: 
    1:   nsCOMPtr<nsINodeInfo> ni = aNodeInfoManager->GetCommentNodeInfo();
    1:   NS_ENSURE_TRUE(ni, NS_ERROR_OUT_OF_MEMORY);
    1: 
11169:   nsCommentNode *instance = new nsCommentNode(ni);
    1:   if (!instance) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
    1:   NS_ADDREF(*aInstancePtrResult = instance);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: nsCommentNode::nsCommentNode(nsINodeInfo *aNodeInfo)
    1:   : nsGenericDOMDataNode(aNodeInfo)
    1: {
    1: }
    1: 
    1: nsCommentNode::~nsCommentNode()
    1: {
    1: }
    1: 
    1: 
    1: // QueryInterface implementation for nsCommentNode
    1: NS_INTERFACE_MAP_BEGIN(nsCommentNode)
    1:   NS_INTERFACE_MAP_ENTRY(nsIDOMNode)
    1:   NS_INTERFACE_MAP_ENTRY(nsIDOMCharacterData)
    1:   NS_INTERFACE_MAP_ENTRY(nsIDOMComment)
    1:   NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO(Comment)
    1: NS_INTERFACE_MAP_END_INHERITING(nsGenericDOMDataNode)
    1: 
    1: 
    1: NS_IMPL_ADDREF_INHERITED(nsCommentNode, nsGenericDOMDataNode)
    1: NS_IMPL_RELEASE_INHERITED(nsCommentNode, nsGenericDOMDataNode)
    1: 
    1: 
    1: // virtual
    1: PRBool
    1: nsCommentNode::MayHaveFrame() const
    1: {
    1:   return PR_FALSE;
    1: }
    1: 
    1: PRBool
    1: nsCommentNode::IsNodeOfType(PRUint32 aFlags) const
    1: {
    1:   return !(aFlags & ~(eCONTENT | eCOMMENT | eDATA_NODE));
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsCommentNode::GetNodeName(nsAString& aNodeName)
    1: {
    1:   aNodeName.AssignLiteral("#comment");
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsCommentNode::GetNodeValue(nsAString& aNodeValue)
    1: {
    1:   return nsGenericDOMDataNode::GetNodeValue(aNodeValue);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsCommentNode::SetNodeValue(const nsAString& aNodeValue)
    1: {
    1:   return nsGenericDOMDataNode::SetNodeValue(aNodeValue);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsCommentNode::GetNodeType(PRUint16* aNodeType)
    1: {
    1:   *aNodeType = (PRUint16)nsIDOMNode::COMMENT_NODE;
    1:   return NS_OK;
    1: }
    1: 
    1: nsGenericDOMDataNode*
    1: nsCommentNode::CloneDataNode(nsINodeInfo *aNodeInfo, PRBool aCloneText) const
    1: {
11169:   nsCommentNode *it = new nsCommentNode(aNodeInfo);
    1:   if (it && aCloneText) {
    1:     it->mText = mText;
    1:   }
    1: 
    1:   return it;
    1: }
    1: 
    1: #ifdef DEBUG
    1: void
    1: nsCommentNode::List(FILE* out, PRInt32 aIndent) const
    1: {
    1:   PRInt32 indx;
    1:   for (indx = aIndent; --indx >= 0; ) fputs("  ", out);
    1: 
12591:   fprintf(out, "Comment@%p refcount=%d<!--", (void*)this, mRefCnt.get());
    1: 
    1:   nsAutoString tmp;
    1:   ToCString(tmp, 0, mText.GetLength());
    1:   fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
    1: 
    1:   fputs("-->\n", out);
    1: }
    1: #endif
