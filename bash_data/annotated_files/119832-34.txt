     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
     1:  *
 99778:  * This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 97317: #ifndef _NSNSSIOLAYER_H
 97317: #define _NSNSSIOLAYER_H
     1: 
 97317: #include "TransportSecurityInfo.h"
 97317: #include "nsISSLSocketControl.h"
 97317: #include "nsIClientAuthDialogs.h"
119832: #include "nsAutoPtr.h"
 97317: #include "nsNSSCertificate.h"
 28629: #include "nsDataHashtable.h"
 97317: #include "nsTHashtable.h"
     1: 
 97317: class nsNSSSocketInfo : public mozilla::psm::TransportSecurityInfo,
 97317:                         public nsISSLSocketControl,
 97317:                         public nsIClientAuthUserDecision
 97317: {
 97317: public:
 97317:   nsNSSSocketInfo();
     1:   
 97317:   NS_DECL_ISUPPORTS_INHERITED
 97317:   NS_DECL_NSISSLSOCKETCONTROL
 97317:   NS_DECL_NSICLIENTAUTHUSERDECISION
 97317:  
 97317:   nsresult SetForSTARTTLS(bool aForSTARTTLS);
 97317:   nsresult GetForSTARTTLS(bool *aForSTARTTLS);
 97317: 
 97317:   nsresult GetFileDescPtr(PRFileDesc** aFilePtr);
 97317:   nsresult SetFileDescPtr(PRFileDesc* aFilePtr);
 97317: 
 97317:   nsresult GetHandshakePending(bool *aHandshakePending);
 97317:   nsresult SetHandshakePending(bool aHandshakePending);
 97317: 
 97317:   void GetPreviousCert(nsIX509Cert** _result);
 97317:   
 97317:   void SetHasCleartextPhase(bool aHasCleartextPhase);
 97317:   bool GetHasCleartextPhase();
 97317:   
 97317:   void SetHandshakeInProgress(bool aIsIn);
 97317:   bool GetHandshakeInProgress() { return mHandshakeInProgress; }
 99619:   void SetFirstServerHelloReceived() { mFirstServerHelloReceived = true; }
 97317:   bool HandshakeTimeout();
 97317: 
 97317:   void SetAllowTLSIntoleranceTimeout(bool aAllow);
 97317: 
 97317:   PRStatus CloseSocketAndDestroy(
 97317:                 const nsNSSShutDownPreventionLock & proofOfLock);
 97317:   
108991:   void SetNegotiatedNPN(const char *value, uint32_t length);
 97317:   void SetHandshakeCompleted() { mHandshakeCompleted = true; }
 97317: 
 97317:   bool GetJoined() { return mJoined; }
 97317:   void SetSentClientCert() { mSentClientCert = true; }
 97317:   
 97317:   // XXX: These are only used on for diagnostic purposes
 97317:   enum CertVerificationState {
 97317:     before_cert_verification,
 97317:     waiting_for_cert_verification,
 97317:     after_cert_verification
 97317:   };
 97317:   void SetCertVerificationWaiting();
 97317:   // Use errorCode == 0 to indicate success; in that case, errorMessageType is
 97317:   // ignored.
 97317:   void SetCertVerificationResult(PRErrorCode errorCode,
 97317:               ::mozilla::psm::SSLErrorMessageType errorMessageType);
 97317:   
 97317:   // for logging only
 97317:   PRBool IsWaitingForCertVerification() const
 97317:   {
 97317:     return mCertVerificationState == waiting_for_cert_verification;
 97317:   }
 97317:   
 97317:   bool IsSSL3Enabled() const { return mSSL3Enabled; }
 97317:   void SetSSL3Enabled(bool enabled) { mSSL3Enabled = enabled; }
 97317:   bool IsTLSEnabled() const { return mTLSEnabled; }
 97317:   void SetTLSEnabled(bool enabled) { mTLSEnabled = enabled; }
 97317: private:
 97317:   PRFileDesc* mFd;
 97317: 
 97317:   CertVerificationState mCertVerificationState;
 97317: 
 97317:   bool mForSTARTTLS;
 97317:   bool mSSL3Enabled;
 97317:   bool mTLSEnabled;
 97317:   bool mHandshakePending;
 97317:   bool mHasCleartextPhase;
 97317:   bool mHandshakeInProgress;
 97317:   bool mAllowTLSIntoleranceTimeout;
 97317:   bool mRememberClientAuthCertificate;
 97317:   PRIntervalTime mHandshakeStartTime;
 99619:   bool mFirstServerHelloReceived;
 97317: 
 97317:   nsresult ActivateSSL();
 97317: 
 97317:   nsCString mNegotiatedNPN;
 97317:   bool      mNPNCompleted;
 97317:   bool      mHandshakeCompleted;
 97317:   bool      mJoined;
 97317:   bool      mSentClientCert;
     1: };
     1: 
 97317: class nsSSLIOLayerHelpers
     1: {
     1: public:
 97317:   static nsresult Init();
 97317:   static void Cleanup();
     1: 
 97317:   static bool nsSSLIOLayerInitialized;
 97317:   static PRDescIdentity nsSSLIOLayerIdentity;
 97317:   static PRIOMethods nsSSLIOLayerMethods;
     1: 
 97317:   static mozilla::Mutex *mutex;
 97317:   static nsTHashtable<nsCStringHashKey> *mTLSIntolerantSites;
 97317:   static nsTHashtable<nsCStringHashKey> *mTLSTolerantSites;
     1: 
 97317:   static nsTHashtable<nsCStringHashKey> *mRenegoUnrestrictedSites;
 97317:   static bool mTreatUnsafeNegotiationAsBroken;
108991:   static int32_t mWarnLevelMissingRFC5746;
     1: 
 97317:   static void setTreatUnsafeNegotiationAsBroken(bool broken);
 97317:   static bool treatUnsafeNegotiationAsBroken();
     1: 
108991:   static void setWarnLevelMissingRFC5746(int32_t level);
108991:   static int32_t getWarnLevelMissingRFC5746();
     1: 
 97317:   static void getSiteKey(nsNSSSocketInfo *socketInfo, nsCSubstring &key);
 97317:   static bool rememberPossibleTLSProblemSite(nsNSSSocketInfo *socketInfo);
 97317:   static void rememberTolerantSite(nsNSSSocketInfo *socketInfo);
     1: 
 97317:   static void addIntolerantSite(const nsCString &str);
 97317:   static void removeIntolerantSite(const nsCString &str);
 97317:   static bool isKnownAsIntolerantSite(const nsCString &str);
 83083: 
 97317:   static void setRenegoUnrestrictedSites(const nsCString &str);
 97317:   static bool isRenegoUnrestrictedSite(const nsCString &str);
     1: };
     1: 
108991: nsresult nsSSLIOLayerNewSocket(int32_t family,
 97317:                                const char *host,
108991:                                int32_t port,
 97317:                                const char *proxyHost,
108991:                                int32_t proxyPort,
 97317:                                PRFileDesc **fd,
 97317:                                nsISupports **securityInfo,
 97317:                                bool forSTARTTLS,
 97317:                                bool anonymousLoad);
 97210: 
108991: nsresult nsSSLIOLayerAddToSocket(int32_t family,
 97317:                                  const char *host,
108991:                                  int32_t port,
 97317:                                  const char *proxyHost,
108991:                                  int32_t proxyPort,
 97317:                                  PRFileDesc *fd,
 97317:                                  nsISupports **securityInfo,
 97317:                                  bool forSTARTTLS,
 97317:                                  bool anonymousLoad);
 28629: 
 97317: nsresult nsSSLIOLayerFreeTLSIntolerantSites();
 97317: nsresult displayUnknownCertErrorAlert(nsNSSSocketInfo *infoObject, int error);
 97210: 
 97317: #endif /* _NSNSSIOLAYER_H */
