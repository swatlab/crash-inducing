     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
     1:  *
 99778:  * This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 97210: #ifndef _MOZILLA_PSM_TRANSPORTSECURITYINFO_H
 97210: #define _MOZILLA_PSM_TRANSPORTSECURITYINFO_H
     1: 
     1: #include "certt.h"
 64576: #include "mozilla/Mutex.h"
     1: #include "nsIInterfaceRequestor.h"
     1: #include "nsITransportSecurityInfo.h"
  8463: #include "nsSSLStatus.h"
     1: #include "nsISSLStatusProvider.h"
 14244: #include "nsIAssociatedContentSecurity.h"
     1: #include "nsNSSShutDown.h"
 28629: #include "nsDataHashtable.h"
     1: 
 97210: namespace mozilla { namespace psm {
     1: 
 83083: enum SSLErrorMessageType {
 83083:   OverridableCertErrorMessage  = 1, // for *overridable* certificate errors
 83083:   PlainErrorMessage = 2             // all other errors (or "no error")
     1: };
     1: 
 97210: class TransportSecurityInfo : public nsITransportSecurityInfo,
     1:                               public nsIInterfaceRequestor,
     1:                               public nsISSLStatusProvider,
 14244:                               public nsIAssociatedContentSecurity,
  8463:                               public nsISerializable,
  8463:                               public nsIClassInfo,
     1:                               public nsNSSShutDownObject,
     1:                               public nsOnPK11LogoutCancelObject
     1: {
     1: public:
 97210:   TransportSecurityInfo();
 97210:   virtual ~TransportSecurityInfo();
     1:   
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSITRANSPORTSECURITYINFO
     1:   NS_DECL_NSIINTERFACEREQUESTOR
     1:   NS_DECL_NSISSLSTATUSPROVIDER
 14244:   NS_DECL_NSIASSOCIATEDCONTENTSECURITY
  8463:   NS_DECL_NSISERIALIZABLE
  8463:   NS_DECL_NSICLASSINFO
     1: 
108991:   nsresult SetSecurityState(uint32_t aState);
     1:   nsresult SetShortSecurityDescription(const PRUnichar *aText);
     1: 
 83083:   const char * GetHostName() const {
 83083:     return mHostName.get();
 83083:   }
     1:   nsresult GetHostName(char **aHostName);
     1:   nsresult SetHostName(const char *aHostName);
     1: 
108991:   int32_t GetPort() const { return mPort; }
108991:   nsresult GetPort(int32_t *aPort);
108991:   nsresult SetPort(int32_t aPort);
     1: 
 83081:   PRErrorCode GetErrorCode() const;
110523:   
110523:   void GetErrorLogMessage(PRErrorCode errorCode,
110523:                           ::mozilla::psm::SSLErrorMessageType errorMessageType,
110523:                           nsString &result);
110523:   
 83083:   void SetCanceled(PRErrorCode errorCode,
 83083:                    ::mozilla::psm::SSLErrorMessageType errorMessageType);
     1:   
     1:   /* Set SSL Status values */
  8463:   nsresult SetSSLStatus(nsSSLStatus *aSSLStatus);
  8463:   nsSSLStatus* SSLStatus() { return mSSLStatus; }
108991:   void SetStatusErrorBits(nsIX509Cert & cert, uint32_t collected_errors);
     1: 
 79445:   bool IsCertIssuerBlacklisted() const {
 77514:     return mIsCertIssuerBlacklisted;
 77514:   }
 77514:   void SetCertIssuerBlacklisted() {
 80486:     mIsCertIssuerBlacklisted = true;
 77514:   }
 83083: 
 97210: private:
 83081:   mutable ::mozilla::Mutex mMutex;
 83081: 
 97210: protected:
     1:   nsCOMPtr<nsIInterfaceRequestor> mCallbacks;
 97210: 
 97210: private:
108991:   uint32_t mSecurityState;
108991:   int32_t mSubRequestsHighSecurity;
108991:   int32_t mSubRequestsLowSecurity;
108991:   int32_t mSubRequestsBrokenSecurity;
108991:   int32_t mSubRequestsNoSecurity;
     1:   nsString mShortDesc;
 83081: 
 83081:   PRErrorCode mErrorCode;
 83083:   ::mozilla::psm::SSLErrorMessageType mErrorMessageType;
 83081:   nsString mErrorMessageCached;
110523:   nsresult formatErrorMessage(::mozilla::MutexAutoLock const & proofOfLock, 
110523:                               PRErrorCode errorCode,
110523:                               ::mozilla::psm::SSLErrorMessageType errorMessageType,
110523:                               bool wantsHtml, bool suppressPort443, 
110523:                               nsString &result);
 83081: 
108991:   int32_t mPort;
     1:   nsXPIDLCString mHostName;
 77514:   PRErrorCode mIsCertIssuerBlacklisted;
     1: 
     1:   /* SSL Status */
119832:   nsRefPtr<nsSSLStatus> mSSLStatus;
     1: 
     1:   virtual void virtualDestroyNSSReference();
     1:   void destructorSafeDestroyNSSReference();
     1: };
     1: 
 97210: class RememberCertErrorsTable
 28629: {
 28629: private:
 97210:   RememberCertErrorsTable();
 97210: 
 28629:   struct CertStateBits
 28629:   {
 79445:     bool mIsDomainMismatch;
 79445:     bool mIsNotValidAtThisTime;
 79445:     bool mIsUntrusted;
 28629:   };
 28629:   nsDataHashtableMT<nsCStringHashKey, CertStateBits> mErrorHosts;
 28629: 
 28629: public:
 97210:   void RememberCertHasError(TransportSecurityInfo * infoobject,
 28629:                             nsSSLStatus * status,
 28629:                             SECStatus certVerificationResult);
 97210:   void LookupCertErrorBits(TransportSecurityInfo * infoObject,
 28629:                            nsSSLStatus* status);
 97210: 
 97210:   static nsresult Init()
 97210:   {
 97210:     sInstance = new RememberCertErrorsTable();
 97210:     if (!sInstance->mErrorHosts.IsInitialized())
 97210:       return NS_ERROR_OUT_OF_MEMORY;
 97210: 
 97210:     return NS_OK;
 97210:   }
 97210: 
 97210:   static RememberCertErrorsTable & GetInstance()
 97210:   {
 97210:     MOZ_ASSERT(sInstance);
 97210:     return *sInstance;
 97210:   }
 97210: 
 97210:   static void Cleanup()
 97210:   {
 97210:     delete sInstance;
106838:     sInstance = nullptr;
 97210:   }
 97210: private:
 97210:   Mutex mMutex;
 97210: 
 97210:   static RememberCertErrorsTable * sInstance;
 28629: };
 28629: 
 97210: } } // namespace mozilla::psm
     1: 
  8463: // 16786594-0296-4471-8096-8f84497ca428
 97210: #define TRANSPORTSECURITYINFO_CID \
  8463: { 0x16786594, 0x0296, 0x4471, \
  8463:     { 0x80, 0x96, 0x8f, 0x84, 0x49, 0x7c, 0xa4, 0x28 } }
  8463: 
 97210: #endif /* _MOZILLA_PSM_TRANSPORTSECURITYINFO_H */
