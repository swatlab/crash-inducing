    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: David W. Hyatt (hyatt@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsXBLPrototypeBinding_h__
    1: #define nsXBLPrototypeBinding_h__
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsXBLPrototypeResources.h"
    1: #include "nsXBLPrototypeHandler.h"
    1: #include "nsXBLProtoImplMethod.h"
    1: #include "nsICSSStyleSheet.h"
    1: #include "nsICSSLoaderObserver.h"
    1: #include "nsWeakReference.h"
    1: #include "nsIContent.h"
    1: #include "nsHashtable.h"
    1: #include "nsIXBLDocumentInfo.h"
    1: #include "nsCOMArray.h"
 6392: #include "nsXBLProtoImpl.h"
    1: 
    1: class nsIAtom;
    1: class nsIDocument;
    1: class nsIScriptContext;
    1: class nsSupportsHashtable;
    1: class nsIXBLService;
    1: class nsFixedSizeAllocator;
 6392: class nsXBLProtoImplField;
    1: class nsXBLBinding;
    1: 
    1: // *********************************************************************/
    1: // The XBLPrototypeBinding class
    1: 
    1: // Instances of this class are owned by the nsXBLDocumentInfo object returned
    1: // by XBLDocumentInfo().  Consumers who want to refcount things should refcount
    1: // that.
    1: class nsXBLPrototypeBinding
    1: {
    1: public:
    1:   already_AddRefed<nsIContent> GetBindingElement();
    1:   void SetBindingElement(nsIContent* aElement);
    1: 
    1:   nsIURI* BindingURI() const { return mBindingURI; }
34526:   nsIURI* AlternateBindingURI() const { return mAlternateBindingURI; }
    1:   nsIURI* DocURI() const { return mXBLDocInfoWeak->DocumentURI(); }
    1: 
34526:   // Checks if aURI refers to this binding by comparing to both possible
34526:   // binding URIs.
34526:   PRBool CompareBindingURI(nsIURI* aURI) const;
34526: 
    1:   nsresult GetAllowScripts(PRBool* aResult);
    1: 
    1:   nsresult BindingAttached(nsIContent* aBoundElement);
    1:   nsresult BindingDetached(nsIContent* aBoundElement);
    1: 
    1:   PRBool LoadResources();
    1:   nsresult AddResource(nsIAtom* aResourceType, const nsAString& aSrc);
    1: 
    1:   PRBool InheritsStyle() const { return mInheritStyle; }
    1: 
    1:   nsXBLPrototypeHandler* GetPrototypeHandlers() { return mPrototypeHandler; }
    1:   void SetPrototypeHandlers(nsXBLPrototypeHandler* aHandler) { mPrototypeHandler = aHandler; }
    1: 
    1:   nsXBLProtoImplAnonymousMethod* GetConstructor();
    1:   nsresult SetConstructor(nsXBLProtoImplAnonymousMethod* aConstructor);
    1:   nsXBLProtoImplAnonymousMethod* GetDestructor();
    1:   nsresult SetDestructor(nsXBLProtoImplAnonymousMethod* aDestructor);
    1: 
 6392:   nsXBLProtoImplField* FindField(const nsString& aFieldName) const
 6392:   {
 6392:     return mImplementation ? mImplementation->FindField(aFieldName) : nsnull;
 6392:   }
 6392: 
 6392:   // Resolve all the fields for this binding on the object |obj|.
 6392:   // False return means a JS exception was set.
 6392:   PRBool ResolveAllFields(JSContext* cx, JSObject* obj) const
 6392:   {
 6392:     return !mImplementation || mImplementation->ResolveAllFields(cx, obj);
 6392:   }
 6392: 
 7064:   // Undefine all our fields from object |obj| (which should be a
 7064:   // JSObject for a bound element).
 7064:   void UndefineFields(JSContext* cx, JSObject* obj) const {
 7064:     if (mImplementation) {
 7064:       mImplementation->UndefineFields(cx, obj);
 7064:     }
 7064:   }
 7064: 
 6392:   const nsCString& ClassName() const {
 6392:     return mImplementation ? mImplementation->mClassName : EmptyCString();
 6392:   }
 6392: 
    1:   nsresult InitClass(const nsCString& aClassName, JSContext * aContext,
    1:                      JSObject * aGlobal, JSObject * aScriptObject,
    1:                      void ** aClassObject);
    1: 
    1:   nsresult ConstructInterfaceTable(const nsAString& aImpls);
    1:   
    1:   void SetImplementation(nsXBLProtoImpl* aImpl) { mImplementation = aImpl; }
    1:   nsresult InstallImplementation(nsIContent* aBoundElement);
 7064:   PRBool HasImplementation() const { return mImplementation != nsnull; }
    1: 
    1:   void AttributeChanged(nsIAtom* aAttribute, PRInt32 aNameSpaceID,
    1:                         PRBool aRemoveFlag, nsIContent* aChangedElement,
    1:                         nsIContent* aAnonymousContent, PRBool aNotify);
    1: 
    1:   void SetBasePrototype(nsXBLPrototypeBinding* aBinding);
    1:   nsXBLPrototypeBinding* GetBasePrototype() { return mBaseBinding; }
    1: 
    1:   nsIXBLDocumentInfo* XBLDocumentInfo() const { return mXBLDocInfoWeak; }
29471:   PRBool IsChrome() { return mXBLDocInfoWeak->IsChrome(); }
    1:   
    1:   PRBool HasBasePrototype() { return mHasBaseProto; }
    1:   void SetHasBasePrototype(PRBool aHasBase) { mHasBaseProto = aHasBase; }
    1: 
    1:   void SetInitialAttributes(nsIContent* aBoundElement, nsIContent* aAnonymousContent);
    1: 
    1:   nsIStyleRuleProcessor* GetRuleProcessor();
    1:   nsCOMArray<nsICSSStyleSheet>* GetStyleSheets();
    1: 
    1:   PRBool HasInsertionPoints() { return mInsertionPointTable != nsnull; }
    1:   
    1:   PRBool HasStyleSheets() {
    1:     return mResources && mResources->mStyleSheetList.Count() > 0;
    1:   }
    1: 
    1:   nsresult FlushSkinSheets();
    1: 
    1:   void InstantiateInsertionPoints(nsXBLBinding* aBinding);
    1: 
24404:   // XXXbz this aIndex has nothing to do with an index into the child
24404:   // list of the insertion parent or anything.
    1:   nsIContent* GetInsertionPoint(nsIContent* aBoundElement,
    1:                                 nsIContent* aCopyRoot, nsIContent *aChild,
    1:                                 PRUint32* aIndex);
    1: 
    1:   nsIContent* GetSingleInsertionPoint(nsIContent* aBoundElement,
    1:                                       nsIContent* aCopyRoot,
    1:                                       PRUint32* aIndex, PRBool* aMultiple);
    1: 
    1:   nsIAtom* GetBaseTag(PRInt32* aNamespaceID);
    1:   void SetBaseTag(PRInt32 aNamespaceID, nsIAtom* aTag);
    1: 
    1:   PRBool ImplementsInterface(REFNSIID aIID) const;
    1: 
    1:   nsresult AddResourceListener(nsIContent* aBoundElement);
    1: 
    1:   void Initialize();
    1: 
    1:   const nsCOMArray<nsXBLKeyEventHandler>* GetKeyEventHandlers()
    1:   {
    1:     if (!mKeyHandlersRegistered) {
    1:       CreateKeyHandlers();
    1:       mKeyHandlersRegistered = PR_TRUE;
    1:     }
    1: 
    1:     return &mKeyHandlers;
    1:   }
    1: 
    1: public:
    1:   nsXBLPrototypeBinding();
    1:   ~nsXBLPrototypeBinding();
    1: 
    1:   // Init must be called after construction to initialize the prototype
    1:   // binding.  It may well throw errors (eg on out-of-memory).  Do not confuse
    1:   // this with the Initialize() method, which must be called after the
    1:   // binding's handlers, properties, etc are all set.
    1:   nsresult Init(const nsACString& aRef,
    1:                 nsIXBLDocumentInfo* aInfo,
34526:                 nsIContent* aElement,
34526:                 PRBool aFirstBinding = PR_FALSE);
    1: 
    1:   void Traverse(nsCycleCollectionTraversalCallback &cb) const;
10981:   void UnlinkJSObjects();
 7230:   void Trace(TraceCallback aCallback, void *aClosure) const;
    1: 
    1: // Static members
    1:   static PRUint32 gRefCnt;
    1:  
    1:   static nsFixedSizeAllocator* kAttrPool;
    1: 
    1: // Internal member functions.
    1: // XXXbz GetImmediateChild needs to be public to be called by SetAttrs,
    1: // InstantiateInsertionPoints, etc; those should probably be a class static
    1: // method instead of a global (non-static!) ones.
    1: public:
    1:   /**
    1:    * GetImmediateChild locates the immediate child of our binding element which
    1:    * has the localname given by aTag and is in the XBL namespace.
    1:    */
    1:   nsIContent* GetImmediateChild(nsIAtom* aTag);
    1:   nsIContent* LocateInstance(nsIContent* aBoundElt,
    1:                              nsIContent* aTemplRoot,
    1:                              nsIContent* aCopyRoot,
    1:                              nsIContent* aTemplChild);
    1: 
    1: protected:  
    1:   void ConstructAttributeTable(nsIContent* aElement);
    1:   void ConstructInsertionTable(nsIContent* aElement);
    1:   void GetNestedChildren(nsIAtom* aTag, PRInt32 aNamespace,
    1:                          nsIContent* aContent,
    1:                          nsCOMArray<nsIContent> & aList);
    1:   void CreateKeyHandlers();
    1: 
    1: protected:
    1:   // Internal helper class for managing our IID table.
    1:   class nsIIDKey : public nsHashKey {
    1:     protected:
    1:       nsIID mKey;
    1:   
    1:     public:
    1:       nsIIDKey(REFNSIID key) : mKey(key) {}
    1:       ~nsIIDKey(void) {}
    1: 
    1:       PRUint32 HashCode(void) const {
    1:         // Just use the 32-bit m0 field.
    1:         return mKey.m0;
    1:       }
    1: 
    1:       PRBool Equals(const nsHashKey *aKey) const {
    1:         return mKey.Equals( ((nsIIDKey*) aKey)->mKey);
    1:       }
    1: 
    1:       nsHashKey *Clone(void) const {
    1:         return new nsIIDKey(mKey);
    1:       }
    1:   };
    1: 
    1: // MEMBER VARIABLES
    1: protected:
    1:   nsCOMPtr<nsIURI> mBindingURI;
34526:   nsCOMPtr<nsIURI> mAlternateBindingURI; // Alternate id-less URI that is only non-null on the first binding.
    1:   nsCOMPtr<nsIContent> mBinding; // Strong. We own a ref to our content element in the binding doc.
    1:   nsAutoPtr<nsXBLPrototypeHandler> mPrototypeHandler; // Strong. DocInfo owns us, and we own the handlers.
    1:   
    1:   nsXBLProtoImpl* mImplementation; // Our prototype implementation (includes methods, properties, fields,
    1:                                    // the constructor, and the destructor).
    1: 
    1:   nsXBLPrototypeBinding* mBaseBinding; // Weak.  The docinfo will own our base binding.
    1:   PRPackedBool mInheritStyle;
    1:   PRPackedBool mHasBaseProto;
    1:   PRPackedBool mKeyHandlersRegistered;
    1:  
    1:   nsXBLPrototypeResources* mResources; // If we have any resources, this will be non-null.
    1:                                       
    1:   nsIXBLDocumentInfo* mXBLDocInfoWeak; // A pointer back to our doc info.  Weak, since it owns us.
    1: 
    1:   nsObjectHashtable* mAttributeTable; // A table for attribute containers. Namespace IDs are used as
    1:                                       // keys in the table. Containers are nsObjectHashtables.
    1:                                       // This table is used to efficiently handle attribute changes.
    1: 
    1:   nsObjectHashtable* mInsertionPointTable; // A table of insertion points for placing explicit content
    1:                                            // underneath anonymous content.
    1: 
    1:   nsSupportsHashtable* mInterfaceTable; // A table of cached interfaces that we support.
    1: 
    1:   PRInt32 mBaseNameSpaceID;    // If we extend a tagname/namespace, then that information will
    1:   nsCOMPtr<nsIAtom> mBaseTag;  // be stored in here.
    1: 
    1:   nsCOMArray<nsXBLKeyEventHandler> mKeyHandlers;
    1: };
    1: 
    1: #endif
    1: 
