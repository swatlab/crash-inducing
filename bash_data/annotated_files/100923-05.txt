 43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 43113: 
 43113: #ifndef nsHttpHandler_h__
 43113: #define nsHttpHandler_h__
 43113: 
 43113: #include "nsHttp.h"
 43113: #include "nsHttpAuthCache.h"
 43113: #include "nsHttpConnection.h"
 43113: #include "nsHttpConnectionMgr.h"
 99497: #include "ASpdySession.h"
 43113: 
 43113: #include "nsXPIDLString.h"
 43113: #include "nsString.h"
 43113: #include "nsCOMPtr.h"
 43113: #include "nsWeakReference.h"
 43113: 
 43113: #include "nsIHttpProtocolHandler.h"
 43113: #include "nsIProtocolProxyService.h"
 43113: #include "nsIIOService.h"
 43113: #include "nsIObserver.h"
 43113: #include "nsIObserverService.h"
 43113: #include "nsIStreamConverterService.h"
 43113: #include "nsICacheSession.h"
 43113: #include "nsICookieService.h"
 43113: #include "nsIIDNService.h"
 43113: #include "nsITimer.h"
 51363: #include "nsIStrictTransportSecurityService.h"
 96927: #include "nsISpeculativeConnect.h"
 43113: 
 43113: class nsHttpConnectionInfo;
 43113: class nsHttpHeaderArray;
 43113: class nsHttpTransaction;
 43113: class nsAHttpTransaction;
 43113: class nsIHttpChannel;
 43113: class nsIPrefBranch;
 43113: 
 43113: //-----------------------------------------------------------------------------
 43113: // nsHttpHandler - protocol handler for HTTP and HTTPS
 43113: //-----------------------------------------------------------------------------
 43113: 
 43113: class nsHttpHandler : public nsIHttpProtocolHandler
 43113:                     , public nsIObserver
 43113:                     , public nsSupportsWeakReference
 96927:                     , public nsISpeculativeConnect
 43113: {
 43113: public:
 43113:     NS_DECL_ISUPPORTS
 43113:     NS_DECL_NSIPROTOCOLHANDLER
 43113:     NS_DECL_NSIPROXIEDPROTOCOLHANDLER
 43113:     NS_DECL_NSIHTTPPROTOCOLHANDLER
 43113:     NS_DECL_NSIOBSERVER
 96927:     NS_DECL_NSISPECULATIVECONNECT
 43113: 
 43113:     nsHttpHandler();
 43113:     virtual ~nsHttpHandler();
 43113: 
 43113:     nsresult Init();
 43113:     nsresult AddStandardRequestHeaders(nsHttpHeaderArray *,
 43113:                                        PRUint8 capabilities,
 79445:                                        bool useProxy);
 79445:     bool     IsAcceptableEncoding(const char *encoding);
 43113: 
 43113:     const nsAFlatCString &UserAgent();
 43113: 
 43113:     nsHttpVersion  HttpVersion()             { return mHttpVersion; }
 43113:     nsHttpVersion  ProxyHttpVersion()        { return mProxyHttpVersion; }
 43113:     PRUint8        ReferrerLevel()           { return mReferrerLevel; }
 79445:     bool           SendSecureXSiteReferrer() { return mSendSecureXSiteReferrer; }
 43113:     PRUint8        RedirectionLimit()        { return mRedirectionLimit; }
 90872:     PRIntervalTime IdleTimeout()             { return mIdleTimeout; }
 90872:     PRIntervalTime SpdyTimeout()             { return mSpdyTimeout; }
 43113:     PRUint16       MaxRequestAttempts()      { return mMaxRequestAttempts; }
 43113:     const char    *DefaultSocketType()       { return mDefaultSocketType.get(); /* ok to return null */ }
 43113:     nsIIDNService *IDNConverter()            { return mIDNConverter; }
 43113:     PRUint32       PhishyUserPassLength()    { return mPhishyUserPassLength; }
 43113:     PRUint8        GetQoSBits()              { return mQoSBits; }
 64613:     PRUint16       GetIdleSynTimeout()       { return mIdleSynTimeout; }
 79445:     bool           FastFallbackToIPv4()      { return mFastFallbackToIPv4; }
 80847:     PRUint32       MaxSocketCount();
 93839:     bool           EnforceAssocReq()         { return mEnforceAssocReq; }
 43113: 
 79445:     bool           IsPersistentHttpsCachingEnabled() { return mEnablePersistentHttpsCaching; }
 91115:     bool           IsTelemetryEnabled() { return mTelemetryEnabled; }
 91115:     bool           AllowExperiments() { return mTelemetryEnabled && mAllowExperiments; }
 43113: 
 84549:     bool           IsSpdyEnabled() { return mEnableSpdy; }
 99498:     bool           IsSpdyV2Enabled() { return mSpdyV2; }
 99498:     bool           IsSpdyV3Enabled() { return mSpdyV3; }
 84549:     bool           CoalesceSpdy() { return mCoalesceSpdy; }
 84549:     bool           UseAlternateProtocol() { return mUseAlternateProtocol; }
 88247:     PRUint32       SpdySendingChunkSize() { return mSpdySendingChunkSize; }
 90872:     PRIntervalTime SpdyPingThreshold() { return mSpdyPingThreshold; }
 90872:     PRIntervalTime SpdyPingTimeout() { return mSpdyPingTimeout; }
 84549: 
 79445:     bool           PromptTempRedirect()      { return mPromptTempRedirect; }
 43113: 
 43113:     nsHttpAuthCache     *AuthCache() { return &mAuthCache; }
 43113:     nsHttpConnectionMgr *ConnMgr()   { return mConnMgr; }
 43113: 
 43113:     // cache support
100634:     nsresult GetCacheSession(nsCacheStoragePolicy, bool isPrivate, nsICacheSession **);
 43113:     PRUint32 GenerateUniqueID() { return ++mLastUniqueID; }
 43113:     PRUint32 SessionStartTime() { return mSessionStartTime; }
 43113: 
 43113:     //
 43113:     // Connection management methods:
 43113:     //
 43113:     // - the handler only owns idle connections; it does not own active
 43113:     //   connections.
 43113:     //
 43113:     // - the handler keeps a count of active connections to enforce the
 43113:     //   steady-state max-connections pref.
 43113:     // 
 43113: 
 43113:     // Called to kick-off a new transaction, by default the transaction
 43113:     // will be put on the pending transaction queue if it cannot be 
 43113:     // initiated at this time.  Callable from any thread.
 43113:     nsresult InitiateTransaction(nsHttpTransaction *trans, PRInt32 priority)
 43113:     {
 43113:         return mConnMgr->AddTransaction(trans, priority);
 43113:     }
 43113: 
 43113:     // Called to change the priority of an existing transaction that has
 43113:     // already been initiated.
 43113:     nsresult RescheduleTransaction(nsHttpTransaction *trans, PRInt32 priority)
 43113:     {
 43113:         return mConnMgr->RescheduleTransaction(trans, priority);
 43113:     }
 43113: 
 43113:     // Called to cancel a transaction, which may or may not be assigned to
 43113:     // a connection.  Callable from any thread.
 43113:     nsresult CancelTransaction(nsHttpTransaction *trans, nsresult reason)
 43113:     {
 43113:         return mConnMgr->CancelTransaction(trans, reason);
 43113:     }
 43113: 
 43113:     // Called when a connection is done processing a transaction.  Callable
 43113:     // from any thread.
 43113:     nsresult ReclaimConnection(nsHttpConnection *conn)
 43113:     {
 43113:         return mConnMgr->ReclaimConnection(conn);
 43113:     }
 43113: 
 43113:     nsresult ProcessPendingQ(nsHttpConnectionInfo *cinfo)
 43113:     {
 43113:         return mConnMgr->ProcessPendingQ(cinfo);
 43113:     }
 43113: 
 43113:     nsresult GetSocketThreadTarget(nsIEventTarget **target)
 43113:     {
 43113:         return mConnMgr->GetSocketThreadTarget(target);
 43113:     }
 43113: 
 96926:     nsresult SpeculativeConnect(nsHttpConnectionInfo *ci,
 96926:                                 nsIInterfaceRequestor *callbacks,
 96926:                                 nsIEventTarget *target)
 96926:     {
 96926:         return mConnMgr->SpeculativeConnect(ci, callbacks, target);
 96926:     }
 96926: 
 43113:     //
 43113:     // The HTTP handler caches pointers to specific XPCOM services, and
 43113:     // provides the following helper routines for accessing those services:
 43113:     //
 43113:     nsresult GetStreamConverterService(nsIStreamConverterService **);
 43113:     nsresult GetIOService(nsIIOService** service);
 43113:     nsICookieService * GetCookieService(); // not addrefed
 51363:     nsIStrictTransportSecurityService * GetSTSService();
 43113: 
 91115:     // callable from socket thread only
 91115:     PRUint32 Get32BitsOfPseudoRandom();
 91115: 
 43113:     // Called by the channel before writing a request
 43113:     void OnModifyRequest(nsIHttpChannel *chan)
 43113:     {
 43113:         NotifyObservers(chan, NS_HTTP_ON_MODIFY_REQUEST_TOPIC);
 43113:     }
 43113: 
 43113:     // Called by the channel once headers are available
 43113:     void OnExamineResponse(nsIHttpChannel *chan)
 43113:     {
 43113:         NotifyObservers(chan, NS_HTTP_ON_EXAMINE_RESPONSE_TOPIC);
 43113:     }
 43113: 
 43113:     // Called by the channel once headers have been merged with cached headers
 43113:     void OnExamineMergedResponse(nsIHttpChannel *chan)
 43113:     {
 43113:         NotifyObservers(chan, NS_HTTP_ON_EXAMINE_MERGED_RESPONSE_TOPIC);
 43113:     }
 43113: 
 43113:     // Called by channels before a redirect happens. This notifies both the
 43113:     // channel's and the global redirect observers.
 48304:     nsresult AsyncOnChannelRedirect(nsIChannel* oldChan, nsIChannel* newChan,
 43113:                                PRUint32 flags);
 43113: 
 43113:     // Called by the channel when the response is read from the cache without
 43113:     // communicating with the server.
 43113:     void OnExamineCachedResponse(nsIHttpChannel *chan)
 43113:     {
 43113:         NotifyObservers(chan, NS_HTTP_ON_EXAMINE_CACHED_RESPONSE_TOPIC);
 43113:     }
 43113: 
 43113:     // Generates the host:port string for use in the Host: header as well as the
 43113:     // CONNECT line for proxies. This handles IPv6 literals correctly.
 43113:     static nsresult GenerateHostPort(const nsCString& host, PRInt32 port,
 43113:                                      nsCString& hostLine);
 43113: 
 93840:     bool GetPipelineAggressive()     { return mPipelineAggressive; }
 94988:     void GetMaxPipelineObjectSize(PRInt64 *outVal)
 93843:     {
 94988:         *outVal = mMaxPipelineObjectSize;
 93843:     }
 95197: 
 95197:     bool GetPipelineEnabled()
 95197:     {
 95197:         return mCapabilities & NS_HTTP_ALLOW_PIPELINING;
 95197:     }
 95197: 
 95197:     bool GetPipelineRescheduleOnTimeout()
 95197:     {
 95197:         return mPipelineRescheduleOnTimeout;
 95197:     }
 95197: 
 95197:     PRIntervalTime GetPipelineRescheduleTimeout()
 95197:     {
 95197:         return mPipelineRescheduleTimeout;
 95197:     }
 95197:     
 93844:     PRIntervalTime GetPipelineTimeout()   { return mPipelineReadTimeout; }
 93840: 
 99497:     mozilla::net::SpdyInformation *SpdyInfo() { return &mSpdyInfo; }
 99497: 
 43113: private:
 43113: 
 43113:     //
 43113:     // Useragent/prefs helper methods
 43113:     //
 43113:     void     BuildUserAgent();
 43113:     void     InitUserAgentComponents();
 43113:     void     PrefsChanged(nsIPrefBranch *prefs, const char *pref);
 43113: 
 43113:     nsresult SetAccept(const char *);
 43113:     nsresult SetAcceptLanguages(const char *);
 43113:     nsresult SetAcceptEncodings(const char *);
 43113: 
 43113:     nsresult InitConnectionMgr();
 43113: 
 43113:     void     NotifyObservers(nsIHttpChannel *chan, const char *event);
 43113: 
 43113: private:
 43113: 
 43113:     // cached services
 43113:     nsCOMPtr<nsIIOService>              mIOService;
 43113:     nsCOMPtr<nsIStreamConverterService> mStreamConvSvc;
 43113:     nsCOMPtr<nsIObserverService>        mObserverService;
 43113:     nsCOMPtr<nsICookieService>          mCookieService;
 43113:     nsCOMPtr<nsIIDNService>             mIDNConverter;
 51363:     nsCOMPtr<nsIStrictTransportSecurityService> mSTSService;
 43113: 
 43113:     // the authentication credentials cache
 43113:     nsHttpAuthCache mAuthCache;
 43113: 
 43113:     // the connection manager
 43113:     nsHttpConnectionMgr *mConnMgr;
 43113: 
 43113:     //
 43113:     // prefs
 43113:     //
 43113: 
 43113:     PRUint8  mHttpVersion;
 43113:     PRUint8  mProxyHttpVersion;
 43113:     PRUint8  mCapabilities;
 43113:     PRUint8  mProxyCapabilities;
 43113:     PRUint8  mReferrerLevel;
 43113: 
 79445:     bool mFastFallbackToIPv4;
 77314: 
 90872:     PRIntervalTime mIdleTimeout;
 90872:     PRIntervalTime mSpdyTimeout;
 90872: 
 43113:     PRUint16 mMaxRequestAttempts;
 43113:     PRUint16 mMaxRequestDelay;
 64613:     PRUint16 mIdleSynTimeout;
 43113: 
 43113:     PRUint16 mMaxConnections;
 43113:     PRUint8  mMaxConnectionsPerServer;
 43113:     PRUint8  mMaxPersistentConnectionsPerServer;
 43113:     PRUint8  mMaxPersistentConnectionsPerProxy;
 93840:     PRUint16 mMaxPipelinedRequests;
 93840:     PRUint16 mMaxOptimisticPipelinedRequests;
 93840:     bool     mPipelineAggressive;
 93843:     PRInt64  mMaxPipelineObjectSize;
 95197:     bool     mPipelineRescheduleOnTimeout;
 95197:     PRIntervalTime mPipelineRescheduleTimeout;
 93844:     PRIntervalTime mPipelineReadTimeout;
 93844: 
 43113:     PRUint8  mRedirectionLimit;
 43113: 
 43113:     // we'll warn the user if we load an URL containing a userpass field
 43113:     // unless its length is less than this threshold.  this warning is
 43113:     // intended to protect the user against spoofing attempts that use
 43113:     // the userpass field of the URL to obscure the actual origin server.
 43113:     PRUint8  mPhishyUserPassLength;
 43113: 
 43113:     PRUint8  mQoSBits;
 43113: 
 79445:     bool mPipeliningOverSSL;
 93839:     bool mEnforceAssocReq;
 43113: 
 43113:     nsCString mAccept;
 43113:     nsCString mAcceptLanguages;
 43113:     nsCString mAcceptEncodings;
 43113: 
 43113:     nsXPIDLCString mDefaultSocketType;
 43113: 
 43113:     // cache support
 43113:     PRUint32                  mLastUniqueID;
 43113:     PRUint32                  mSessionStartTime;
 43113: 
 43113:     // useragent components
 51553:     nsCString      mLegacyAppName;
 51553:     nsCString      mLegacyAppVersion;
 43113:     nsCString      mPlatform;
 43113:     nsCString      mOscpu;
 43113:     nsCString      mMisc;
 43113:     nsCString      mProduct;
 43113:     nsXPIDLCString mProductSub;
 51553:     nsXPIDLCString mAppName;
 51553:     nsXPIDLCString mAppVersion;
 51553:     nsCString      mCompatFirefox;
 89116:     nsXPIDLCString mCompatDevice;
 43113: 
 43113:     nsCString      mUserAgent;
 43113:     nsXPIDLCString mUserAgentOverride;
 79445:     bool           mUserAgentIsDirty; // true if mUserAgent should be rebuilt
 43113: 
 79445:     bool           mUseCache;
 43113: 
 79445:     bool           mPromptTempRedirect;
 43113:     // mSendSecureXSiteReferrer: default is false, 
 43113:     // if true allow referrer headers between secure non-matching hosts
 79445:     bool           mSendSecureXSiteReferrer;
 43113: 
 43113:     // Persistent HTTPS caching flag
 79445:     bool           mEnablePersistentHttpsCaching;
 61491: 
 61491:     // For broadcasting the preference to not be tracked
 79445:     bool           mDoNotTrackEnabled;
 84549:     
 91115:     // Whether telemetry is reported or not
 91115:     bool           mTelemetryEnabled;
 91115: 
 91115:     // The value of network.allow-experiments
 91115:     bool           mAllowExperiments;
 91115: 
 84549:     // Try to use SPDY features instead of HTTP/1.1 over SSL
 99497:     mozilla::net::SpdyInformation mSpdyInfo;
 84549:     bool           mEnableSpdy;
 99498:     bool           mSpdyV2;
 99498:     bool           mSpdyV3;
 84549:     bool           mCoalesceSpdy;
 84549:     bool           mUseAlternateProtocol;
 88247:     PRUint32       mSpdySendingChunkSize;
 90872:     PRIntervalTime mSpdyPingThreshold;
 90872:     PRIntervalTime mSpdyPingTimeout;
 43113: };
 43113: 
 43113: //-----------------------------------------------------------------------------
 43113: 
 43113: extern nsHttpHandler *gHttpHandler;
 43113: 
 43113: //-----------------------------------------------------------------------------
 43113: // nsHttpsHandler - thin wrapper to distinguish the HTTP handler from the
 43113: //                  HTTPS handler (even though they share the same impl).
 43113: //-----------------------------------------------------------------------------
 43113: 
 43113: class nsHttpsHandler : public nsIHttpProtocolHandler
 43113:                      , public nsSupportsWeakReference
 96927:                      , public nsISpeculativeConnect
 43113: {
 43113: public:
 43113:     // we basically just want to override GetScheme and GetDefaultPort...
 43113:     // all other methods should be forwarded to the nsHttpHandler instance.
 43113:     
 43113:     NS_DECL_ISUPPORTS
 43113:     NS_DECL_NSIPROTOCOLHANDLER
 43113:     NS_FORWARD_NSIPROXIEDPROTOCOLHANDLER (gHttpHandler->)
 43113:     NS_FORWARD_NSIHTTPPROTOCOLHANDLER    (gHttpHandler->)
 96927:     NS_FORWARD_NSISPECULATIVECONNECT     (gHttpHandler->)
 43113: 
 43113:     nsHttpsHandler() { }
 43113:     virtual ~nsHttpsHandler() { }
 43113: 
 43113:     nsresult Init();
 43113: };
 43113: 
 43113: #endif // nsHttpHandler_h__
