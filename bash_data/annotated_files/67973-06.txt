    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Mozilla Foundation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Alexander Surkov <surkov.alexander@gmail.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsXFormsAccessible.h"
    1: 
67790: #include "States.h"
41384: #include "nsAccessibilityService.h"
41384: #include "nsAccUtils.h"
41384: #include "nsTextEquivUtils.h"
41384: 
    1: #include "nscore.h"
    1: #include "nsServiceManagerUtils.h"
    1: #include "nsIDOMElement.h"
    1: #include "nsIDOMNodeList.h"
 4625: #include "nsIEditor.h"
    1: #include "nsIMutableArray.h"
    1: #include "nsIXFormsUtilityService.h"
    1: #include "nsIPlaintextEditor.h"
    1: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsAccessibleBase
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsIXFormsUtilityService *nsXFormsAccessibleBase::sXFormsService = nsnull;
    1: 
    1: nsXFormsAccessibleBase::nsXFormsAccessibleBase()
    1: {
    1:   if (!sXFormsService) {
    1:     nsresult rv = CallGetService("@mozilla.org/xforms-utility-service;1",
    1:                                  &sXFormsService);
    1:     if (NS_FAILED(rv))
    1:       NS_WARNING("No XForms utility service.");
    1:   }
    1: }
    1: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsAccessible::
43504: nsXFormsAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsHyperTextAccessibleWrap(aContent, aShell)
    1: {
    1: }
    1: 
    1: nsresult
    1: nsXFormsAccessible::GetBoundChildElementValue(const nsAString& aTagName,
    1:                                               nsAString& aValue)
    1: {
    1:   NS_ENSURE_TRUE(sXFormsService, NS_ERROR_FAILURE);
43504:   if (IsDefunct())
43504:     return NS_ERROR_FAILURE;
    1: 
43504:   nsINodeList* nodes = mContent->GetChildNodesList();
43504:   NS_ENSURE_STATE(nodes);
    1: 
    1:   PRUint32 length;
43504:   nsresult rv = nodes->GetLength(&length);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   for (PRUint32 index = 0; index < length; index++) {
43504:     nsIContent* content = nodes->GetNodeAt(index);
    1:     if (content->NodeInfo()->Equals(aTagName) &&
    1:         content->NodeInfo()->NamespaceEquals(NS_LITERAL_STRING(NS_NAMESPACE_XFORMS))) {
43504:       nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(content));
43504:       return sXFormsService->GetValue(DOMNode, aValue);
    1:     }
    1:   }
    1: 
    1:   aValue.Truncate();
    1:   return NS_OK;
    1: }
    1: 
    1: void
    1: nsXFormsAccessible::CacheSelectChildren(nsIDOMNode *aContainerNode)
    1: {
    1:   nsCOMPtr<nsIDOMNode> container(aContainerNode);
    1:   if (!container)
43504:     container = do_QueryInterface(mContent);
    1: 
    1:   nsCOMPtr<nsIDOMNodeList> children;
    1:   sXFormsService->GetSelectChildrenFor(container, getter_AddRefs(children));
    1: 
    1:   if (!children)
    1:     return;
    1: 
46469:   nsCOMPtr<nsIPresShell> presShell(do_QueryReferent(mWeakShell));
46469: 
    1:   PRUint32 length = 0;
    1:   children->GetLength(&length);
    1: 
    1:   for (PRUint32 index = 0; index < length; index++) {
43539:     nsCOMPtr<nsIDOMNode> DOMChild;
43539:     children->Item(index, getter_AddRefs(DOMChild));
43539:     if (!DOMChild)
    1:       continue;
    1: 
43539:     nsCOMPtr<nsIContent> child(do_QueryInterface(DOMChild));
64506:     nsAccessible* accessible =
46469:       GetAccService()->GetOrCreateAccessible(child, presShell, mWeakShell);
35523:     if (!accessible)
    1:       continue;
    1: 
47105:     AppendChild(accessible);
    1:   }
    1: }
    1: 
    1: // nsIAccessible
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsAccessible::GetValue(nsAString& aValue)
    1: {
    1:   NS_ENSURE_TRUE(sXFormsService, NS_ERROR_FAILURE);
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   return sXFormsService->GetValue(DOMNode, aValue);
    1: }
    1: 
67790: PRUint64
67790: nsXFormsAccessible::NativeState()
    1: {
67790:   NS_ENSURE_TRUE(sXFormsService, 0);
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504: 
    1:   PRBool isRelevant = PR_FALSE;
43504:   nsresult rv = sXFormsService->IsRelevant(DOMNode, &isRelevant);
67790:   NS_ENSURE_SUCCESS(rv, 0);
    1: 
    1:   PRBool isReadonly = PR_FALSE;
43504:   rv = sXFormsService->IsReadonly(DOMNode, &isReadonly);
67790:   NS_ENSURE_SUCCESS(rv, 0);
    1: 
    1:   PRBool isRequired = PR_FALSE;
43504:   rv = sXFormsService->IsRequired(DOMNode, &isRequired);
67790:   NS_ENSURE_SUCCESS(rv, 0);
    1: 
    1:   PRBool isValid = PR_FALSE;
43504:   rv = sXFormsService->IsValid(DOMNode, &isValid);
67790:   NS_ENSURE_SUCCESS(rv, 0);
    1: 
67790:   PRUint64 states = nsHyperTextAccessibleWrap::NativeState();
    1: 
    1:   if (!isRelevant)
67790:     states |= states::UNAVAILABLE;
    1: 
    1:   if (isReadonly)
67790:     states |= states::READONLY;
    1: 
    1:   if (isRequired)
67790:     states |= states::REQUIRED;
    1: 
    1:   if (!isValid)
67790:     states |= states::INVALID;
    1: 
67790:   return states;
    1: }
    1: 
20246: nsresult
20246: nsXFormsAccessible::GetNameInternal(nsAString& aName)
    1: {
    1:   // search the xforms:label element
    1:   return GetBoundChildElementValue(NS_LITERAL_STRING("label"), aName);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsAccessible::GetDescription(nsAString& aDescription)
    1: {
    1:   nsAutoString description;
25175:   nsresult rv = nsTextEquivUtils::
25175:     GetTextEquivFromIDRefs(this, nsAccessibilityAtoms::aria_describedby,
25175:                            description);
    1: 
    1:   if (NS_SUCCEEDED(rv) && !description.IsEmpty()) {
    1:     aDescription = description;
    1:     return NS_OK;
    1:   }
    1: 
    1:   // search the xforms:hint element
    1:   return GetBoundChildElementValue(NS_LITERAL_STRING("hint"), aDescription);
    1: }
    1: 
29320: PRBool
29320: nsXFormsAccessible::GetAllowsAnonChildAccessibles()
    1: {
29320:   return PR_FALSE;
    1: }
    1: 
43504: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsContainerAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsContainerAccessible::
43504:   nsXFormsContainerAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsXFormsAccessible(aContent, aShell)
    1: {
    1: }
    1: 
52027: PRUint32
52027: nsXFormsContainerAccessible::NativeRole()
    1: {
52027:   return nsIAccessibleRole::ROLE_GROUPING;
    1: }
    1: 
29320: PRBool
29320: nsXFormsContainerAccessible::GetAllowsAnonChildAccessibles()
    1: {
29320:   return PR_TRUE;
    1: }
    1: 
43504: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsEditableAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsEditableAccessible::
43504:   nsXFormsEditableAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsXFormsAccessible(aContent, aShell)
    1: {
    1: }
    1: 
67790: PRUint64
67790: nsXFormsEditableAccessible::NativeState()
    1: {
67790:   PRUint64 state = nsXFormsAccessible::NativeState();
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504: 
    1:   PRBool isReadonly = PR_FALSE;
67790:   nsresult rv = sXFormsService->IsReadonly(DOMNode, &isReadonly);
67790:   NS_ENSURE_SUCCESS(rv, state);
    1: 
    1:   if (!isReadonly) {
    1:     PRBool isRelevant = PR_FALSE;
43504:     rv = sXFormsService->IsRelevant(DOMNode, &isRelevant);
67790:     NS_ENSURE_SUCCESS(rv, state);
    1:     if (isRelevant) {
67790:       state |= states::EDITABLE | states::SELECTABLE_TEXT;
    1:     }
    1:   }
    1: 
 4625:   nsCOMPtr<nsIEditor> editor;
 4625:   GetAssociatedEditor(getter_AddRefs(editor));
67790:   NS_ENSURE_TRUE(editor, state);
    1:   PRUint32 flags;
 4625:   editor->GetFlags(&flags);
    1:   if (flags & nsIPlaintextEditor::eEditorSingleLineMask)
67790:     state |= states::SINGLE_LINE;
    1:   else
67790:     state |= states::MULTI_LINE;
    1: 
67790:   return state;
    1: }
    1: 
    1: NS_IMETHODIMP
 4625: nsXFormsEditableAccessible::GetAssociatedEditor(nsIEditor **aEditor)
    1: {
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   return sXFormsService->GetEditor(DOMNode, aEditor);
    1: }
    1: 
51865: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsSelectableAccessible
51865: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsSelectableAccessible::
43504:   nsXFormsSelectableAccessible(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsXFormsEditableAccessible(aContent, aShell), mIsSelect1Element(nsnull)
    1: {
    1:   mIsSelect1Element =
43504:     mContent->NodeInfo()->Equals(nsAccessibilityAtoms::select1);
    1: }
    1: 
51865: bool
51865: nsXFormsSelectableAccessible::IsSelect()
    1: {
51865:   return true;
51865: }
    1: 
51865: already_AddRefed<nsIArray>
51865: nsXFormsSelectableAccessible::SelectedItems()
51865: {
51865:   nsCOMPtr<nsIMutableArray> selectedItems =
51865:     do_CreateInstance(NS_ARRAY_CONTRACTID);
51865:   if (!selectedItems)
51865:     return nsnull;
    1: 
51865:   nsresult rv;
51865:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1: 
51865:   if (mIsSelect1Element) {
51865:     nsCOMPtr<nsIDOMNode> itemDOMNode;
51865:     rv = sXFormsService->GetSelectedItemForSelect1(DOMNode,
51865:                                                    getter_AddRefs(itemDOMNode));
51865:     if (NS_FAILED(rv) || !itemDOMNode)
51865:       return nsnull;
51865: 
51865:     nsCOMPtr<nsINode> itemNode(do_QueryInterface(itemDOMNode));
51865:     nsIAccessible* item = GetAccService()->GetAccessibleInWeakShell(itemNode,
51865:                                                                     mWeakShell);
51865:     if (item)
51865:       selectedItems->AppendElement(item, PR_FALSE);
51865: 
51865:     nsIMutableArray* items = nsnull;
51865:     selectedItems.forget(&items);
51865:     return items;
51865:   }
51865: 
51865:   nsCOMPtr<nsIDOMNodeList> itemNodeList;
51865:   rv = sXFormsService->GetSelectedItemsForSelect(DOMNode,
51865:                                                  getter_AddRefs(itemNodeList));
51865:   if (NS_FAILED(rv) || !itemNodeList)
51865:     return nsnull;
51865: 
51865:   PRUint32 length = 0;
51865:   itemNodeList->GetLength(&length);
51865:   for (PRUint32 index = 0; index < length; index++) {
51865:     nsCOMPtr<nsIDOMNode> itemDOMNode;
51865:     itemNodeList->Item(index, getter_AddRefs(itemDOMNode));
51865:     if (!itemDOMNode)
51865:       return nsnull;
51865: 
51865:     nsCOMPtr<nsINode> itemNode(do_QueryInterface(itemDOMNode));
51865:     nsIAccessible* item = GetAccService()->GetAccessibleInWeakShell(itemNode,
51865:                                                                     mWeakShell);
51865:     if (item)
51865:       selectedItems->AppendElement(item, PR_FALSE);
51865:   }
51865: 
51865:   nsIMutableArray* items = nsnull;
51865:   selectedItems.forget(&items);
51865:   return items;
51865: }
51865: 
51865: PRUint32
51865: nsXFormsSelectableAccessible::SelectedItemCount()
51865: {
    1:   nsresult rv;
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1: 
    1:   if (mIsSelect1Element) {
    1:     nsCOMPtr<nsIDOMNode> item;
43504:     rv = sXFormsService->GetSelectedItemForSelect1(DOMNode,
    1:                                                    getter_AddRefs(item));
51865:     return NS_SUCCEEDED(rv) && item ? 1 : 0;
    1:   }
    1: 
51865:   nsCOMPtr<nsIDOMNodeList> itemNodeList;
43504:   rv = sXFormsService->GetSelectedItemsForSelect(DOMNode,
51865:                                                  getter_AddRefs(itemNodeList));
51865:   if (NS_FAILED(rv) || !itemNodeList)
51865:     return 0;
    1: 
    1:   PRUint32 length = 0;
51865:   itemNodeList->GetLength(&length);
51865:   return length;
    1: }
    1: 
51865: bool
51865: nsXFormsSelectableAccessible::AddItemToSelection(PRUint32 aIndex)
    1: {
51865:   nsCOMPtr<nsIDOMNode> itemDOMNode(do_QueryInterface(GetItemByIndex(&aIndex)));
51865:   if (!itemDOMNode)
51865:     return false;
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1:   if (mIsSelect1Element)
51865:     sXFormsService->SetSelectedItemForSelect1(DOMNode, itemDOMNode);
51865:   else
51865:     sXFormsService->AddItemToSelectionForSelect(DOMNode, itemDOMNode);
    1: 
51865:   return true;
    1: }
    1: 
51865: bool
51865: nsXFormsSelectableAccessible::RemoveItemFromSelection(PRUint32 aIndex)
    1: {
51865:   nsCOMPtr<nsIDOMNode> itemDOMNode(do_QueryInterface(GetItemByIndex(&aIndex)));
51865:   if (!itemDOMNode)
51865:     return false;
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1:   if (mIsSelect1Element) {
51865:     nsCOMPtr<nsIDOMNode> selItemDOMNode;
51865:     sXFormsService->GetSelectedItemForSelect1(DOMNode,
51865:                                               getter_AddRefs(selItemDOMNode));
51865:     if (selItemDOMNode == itemDOMNode)
51865:       sXFormsService->SetSelectedItemForSelect1(DOMNode, nsnull);
    1: 
51865:     return true;
    1:   }
    1: 
51865:   sXFormsService->RemoveItemFromSelectionForSelect(DOMNode, itemDOMNode);
51865:   return true;
    1: }
    1: 
51865: nsAccessible*
51865: nsXFormsSelectableAccessible::GetSelectedItem(PRUint32 aIndex)
    1: {
51865:   nsresult rv;
51865:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
51865:   if (mIsSelect1Element) {
51865:     if (aIndex != 0)
51865:       return nsnull;
51865: 
51865:     nsCOMPtr<nsIDOMNode> itemDOMNode;
51865:     rv = sXFormsService->GetSelectedItemForSelect1(DOMNode,
51865:                                                    getter_AddRefs(itemDOMNode));
51865:     if (NS_SUCCEEDED(rv) && itemDOMNode) {
51865:       nsCOMPtr<nsINode> itemNode(do_QueryInterface(itemDOMNode));
51865:       return GetAccService()->GetAccessibleInWeakShell(itemNode, mWeakShell);
51865:     }
51865:     return nsnull;
51865:   }
51865: 
51865:   nsCOMPtr<nsIDOMNodeList> itemNodeList;
51865:   rv = sXFormsService->GetSelectedItemsForSelect(DOMNode,
51865:                                                  getter_AddRefs(itemNodeList));
51865:   if (NS_FAILED(rv) || !itemNodeList)
51865:     return nsnull;
51865: 
51865:   nsCOMPtr<nsIDOMNode> itemDOMNode;
51865:   itemNodeList->Item(aIndex, getter_AddRefs(itemDOMNode));
51865: 
51865:   nsCOMPtr<nsINode> itemNode(do_QueryInterface(itemDOMNode));
51865:   return GetAccService()->GetAccessibleInWeakShell(itemNode, mWeakShell);
51865: }
51865: 
51865: bool
51865: nsXFormsSelectableAccessible::IsItemSelected(PRUint32 aIndex)
51865: {
51865:   nsCOMPtr<nsIDOMNode> itemDOMNode(do_QueryInterface(GetItemByIndex(&aIndex)));
51865:   if (!itemDOMNode)
51865:     return false;
    1: 
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1:   if (mIsSelect1Element) {
51865:     nsCOMPtr<nsIDOMNode> selItemDOMNode;
51865:     sXFormsService->GetSelectedItemForSelect1(DOMNode,
51865:                                               getter_AddRefs(selItemDOMNode));
51865:     return selItemDOMNode == itemDOMNode;
    1:   }
    1: 
51865:   PRBool isSelected = PR_FALSE;
51865:   sXFormsService->IsSelectItemSelected(DOMNode, itemDOMNode, &isSelected);
51865:   return isSelected;
    1: }
    1: 
51865: bool
51865: nsXFormsSelectableAccessible::UnselectAll()
    1: {
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1:   if (mIsSelect1Element)
51865:     sXFormsService->SetSelectedItemForSelect1(DOMNode, nsnull);
    1: 
51865:   sXFormsService->ClearSelectionForSelect(DOMNode);
51865:   return true;
    1: }
    1: 
51865: bool
51865: nsXFormsSelectableAccessible::SelectAll()
    1: {
51865:   if (mIsSelect1Element)
51865:     return false;
    1: 
51865:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
51865:   sXFormsService->SelectAllItemsForSelect(DOMNode);
51865:   return true;
    1: }
    1: 
51865: nsIContent*
51865: nsXFormsSelectableAccessible::GetItemByIndex(PRUint32* aIndex,
51865:                                              nsAccessible* aAccessible)
    1: {
51865:   nsAccessible* accessible = aAccessible ? aAccessible : this;
42415:   PRInt32 childCount = accessible->GetChildCount();
42415:   for (PRInt32 childIdx = 0; childIdx < childCount; childIdx++) {
42415:     nsAccessible *child = accessible->GetChildAt(childIdx);
51865:     nsIContent* childContent = child->GetContent();
42415:     nsINodeInfo *nodeInfo = childContent->NodeInfo();
    1:     if (nodeInfo->NamespaceEquals(NS_LITERAL_STRING(NS_NAMESPACE_XFORMS))) {
    1:       if (nodeInfo->Equals(nsAccessibilityAtoms::item)) {
42415:         if (!*aIndex)
51865:           return childContent;
42415: 
    1:         --*aIndex;
    1:       } else if (nodeInfo->Equals(nsAccessibilityAtoms::choices)) {
51865:         nsIContent* itemContent = GetItemByIndex(aIndex, child);
51865:         if (itemContent)
51865:           return itemContent;
    1:       }
    1:     }
    1:   }
    1: 
    1:   return nsnull;
    1: }
    1: 
    1: 
43504: ////////////////////////////////////////////////////////////////////////////////
    1: // nsXFormsSelectableItemAccessible
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: nsXFormsSelectableItemAccessible::
43504:   nsXFormsSelectableItemAccessible(nsIContent *aContent,
43504:                                    nsIWeakReference *aShell) :
43504:   nsXFormsAccessible(aContent, aShell)
    1: {
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsSelectableItemAccessible::GetValue(nsAString& aValue)
    1: {
43504:   nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
43504:   return sXFormsService->GetValue(DOMNode, aValue);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsSelectableItemAccessible::GetNumActions(PRUint8 *aCount)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aCount);
    1: 
    1:   *aCount = 1;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsXFormsSelectableItemAccessible::DoAction(PRUint8 aIndex)
    1: {
    1:   if (aIndex != eAction_Click)
    1:     return NS_ERROR_INVALID_ARG;
    1: 
37481:   DoCommand();
37481:   return NS_OK;
    1: }
    1: 
    1: PRBool
    1: nsXFormsSelectableItemAccessible::IsItemSelected()
    1: {
    1:   nsresult rv;
    1: 
43504:   nsINode* parent = mContent;
43504:   while ((parent = parent->GetNodeParent())) {
    1:     nsCOMPtr<nsIContent> content(do_QueryInterface(parent));
    1:     if (!content)
    1:       return PR_FALSE;
    1: 
    1:     nsCOMPtr<nsINodeInfo> nodeinfo = content->NodeInfo();
    1:     if (!nodeinfo->NamespaceEquals(NS_LITERAL_STRING(NS_NAMESPACE_XFORMS)))
    1:       continue;
    1: 
    1:     nsCOMPtr<nsIDOMNode> select(do_QueryInterface(parent));
    1:     if (!select)
    1:       continue;
    1: 
43504:     nsCOMPtr<nsIDOMNode> DOMNode(do_QueryInterface(mContent));
    1:     if (nodeinfo->Equals(nsAccessibilityAtoms::select)) {
    1:       PRBool isSelected = PR_FALSE;
43504:       rv = sXFormsService->IsSelectItemSelected(select, DOMNode, &isSelected);
    1:       return NS_SUCCEEDED(rv) && isSelected;
    1:     }
    1: 
    1:     if (nodeinfo->Equals(nsAccessibilityAtoms::select1)) {
    1:       nsCOMPtr<nsIDOMNode> selitem;
    1:       rv = sXFormsService->GetSelectedItemForSelect1(select,
    1:                                                      getter_AddRefs(selitem));
43504:       return NS_SUCCEEDED(rv) && (selitem == DOMNode);
    1:     }
    1:   }
    1: 
    1:   return PR_FALSE;
    1: }
    1: 
