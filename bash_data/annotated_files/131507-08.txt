120382: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
120382: /* vim:set ts=2 sw=2 sts=2 et cindent: */
120382: /* This Source Code Form is subject to the terms of the Mozilla Public
120382:  * License, v. 2.0. If a copy of the MPL was not distributed with this
120382:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
120382: 
120474: #ifndef AudioParam_h_
120474: #define AudioParam_h_
120382: 
120382: #include "AudioEventTimeline.h"
120382: #include "nsWrapperCache.h"
120382: #include "nsCycleCollectionParticipant.h"
120382: #include "nsCOMPtr.h"
120382: #include "EnableWebAudioCheck.h"
120382: #include "nsAutoPtr.h"
131507: #include "AudioContext.h"
120382: #include "mozilla/dom/TypedArray.h"
120382: #include "mozilla/Util.h"
120382: 
121986: struct JSContext;
120382: class nsIDOMWindow;
120382: 
120382: namespace mozilla {
120382: 
131507: class ErrorResult;
131507: 
120382: namespace dom {
120382: 
130780: typedef AudioEventTimeline<ErrorResult> AudioParamTimeline;
120382: 
120382: class AudioParam MOZ_FINAL : public nsWrapperCache,
120382:                              public EnableWebAudioCheck,
120382:                              public AudioParamTimeline
120382: {
120382: public:
131507:   AudioParam(AudioContext* aContext,
120382:              float aDefaultValue,
120382:              float aMinValue,
120382:              float aMaxValue);
120382:   virtual ~AudioParam();
120382: 
120382:   NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING(AudioParam)
120382:   NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_NATIVE_CLASS(AudioParam)
120382: 
120382:   AudioContext* GetParentObject() const
120382:   {
131507:     return mContext;
120382:   }
120382: 
120382:   virtual JSObject* WrapObject(JSContext* aCx, JSObject* aScope,
120382:                                bool* aTriedToWrap);
120382: 
120382:   // We override SetValueCurveAtTime to convert the Float32Array to the wrapper
120382:   // object.
123572:   void SetValueCurveAtTime(JSContext* cx, const Float32Array& aValues, double aStartTime, double aDuration, ErrorResult& aRv)
120382:   {
130780:     AudioParamTimeline::SetValueCurveAtTime(aValues.Data(), aValues.Length(),
120382:                                             aStartTime, aDuration, aRv);
120382:   }
120382: 
130779:   float MinValue() const
130779:   {
130779:     return mMinValue;
130779:   }
130779: 
130779:   float MaxValue() const
130779:   {
130779:     return mMaxValue;
130779:   }
130779: 
130779:   float DefaultValue() const
130779:   {
130779:     return mDefaultValue;
130779:   }
130779: 
120382: private:
131507:   nsRefPtr<AudioContext> mContext;
130779:   const float mDefaultValue;
130779:   const float mMinValue;
130779:   const float mMaxValue;
120382: };
120382: 
120382: }
120382: }
120382: 
120474: #endif
120474: 
