    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998-1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Doug Turner <dougt@netscape.com>
    1:  *   Brodie Thiesfield <brofield@jellycan.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef _nsLocalFileWIN_H_
    1: #define _nsLocalFileWIN_H_
    1: 
    1: #include "nscore.h"
    1: #include "nsError.h"
    1: #include "nsString.h"
    1: #include "nsCRT.h"
    1: #include "nsIFile.h"
    1: #include "nsIFactory.h"
    1: #include "nsILocalFileWin.h"
    1: #include "nsIHashable.h"
 3958: #include "nsIClassInfoImpl.h"
    1: 
    1: #include "windows.h"
20214: 
20214: // For older version (<6.0) of the VC Compiler
20214: #if (_MSC_VER == 1100)
20214: #include <objbase.h>
20214: DEFINE_OLEGUID(IID_IPersistFile, 0x0000010BL, 0, 0);
20214: #endif
20214: 
    1: #include "shlobj.h"
    1: 
    1: #include <sys/stat.h>
    1: 
78137: typedef LPITEMIDLIST (WINAPI *ILCreateFromPathWPtr)(PCWSTR);
78137: typedef void (WINAPI *ILFreePtr)(LPITEMIDLIST);
78137: typedef HRESULT (WINAPI *SHOpenFolderAndSelectItemsPtr)(LPCITEMIDLIST, UINT, 
78137:                                                         PCUITEMID_CHILD_ARRAY,
78137:                                                         DWORD);
78046: 
    1: class nsLocalFile : public nsILocalFileWin,
11159:                     public nsIHashable
    1: {
    1: public:
    1:     NS_DEFINE_STATIC_CID_ACCESSOR(NS_LOCAL_FILE_CID)
    1:     
    1:     nsLocalFile();
    1: 
46997:     static nsresult nsLocalFileConstructor(nsISupports* outer, const nsIID& aIID, void* *aInstancePtr);
    1: 
    1:     // nsISupports interface
    1:     NS_DECL_ISUPPORTS
    1:     
    1:     // nsIFile interface
    1:     NS_DECL_NSIFILE
    1:     
    1:     // nsILocalFile interface
    1:     NS_DECL_NSILOCALFILE
    1: 
    1:     // nsILocalFileWin interface
    1:     NS_DECL_NSILOCALFILEWIN
    1: 
    1:     // nsIHashable interface
    1:     NS_DECL_NSIHASHABLE
    1: 
    1: public:
    1:     static void GlobalInit();
    1:     static void GlobalShutdown();
    1: 
    1: private:
    1:     nsLocalFile(const nsLocalFile& other);
    1:     ~nsLocalFile() {}
    1: 
20214:     PRPackedBool mDirty;            // cached information can only be used when this is PR_FALSE
    1:     PRPackedBool mFollowSymlinks;   // should we follow symlinks when working on this file
    1:     
    1:     // this string will always be in native format!
    1:     nsString mWorkingPath;
    1:     
    1:     // this will be the resolved path of shortcuts, it will *NEVER* 
    1:     // be returned to the user
    1:     nsString mResolvedPath;
    1: 
    1:     // this string, if not empty, is the *short* pathname that represents
    1:     // mWorkingPath
    1:     nsString mShortWorkingPath;
    1: 
    1:     PRFileInfo64 mFileInfo64;
    1: 
20214:     void MakeDirty() { mDirty = PR_TRUE; mShortWorkingPath.Truncate(); }
20214: 
    1:     nsresult ResolveAndStat();
    1:     nsresult ResolveShortcut();
    1: 
    1:     void EnsureShortPath();
    1:     
    1:     nsresult CopyMove(nsIFile *newParentDir, const nsAString &newName,
    1:                       PRBool followSymlinks, PRBool move);
    1:     nsresult CopySingleFile(nsIFile *source, nsIFile* dest,
    1:                             const nsAString &newName,
74491:                             PRBool followSymlinks, PRBool move,
74491:                             PRBool skipNtfsAclReset = PR_FALSE);
    1: 
    1:     nsresult SetModDate(PRInt64 aLastModifiedTime, const PRUnichar *filePath);
    1:     nsresult HasFileAttribute(DWORD fileAttrib, PRBool *_retval);
    1:     nsresult AppendInternal(const nsAFlatString &node,
    1:                             PRBool multipleComponents);
78046:     nsresult RevealClassic(); // Reveals the path using explorer.exe cmdline
78046:     nsresult RevealUsingShell(); // Uses newer shell API to reveal the path
78046: 
78046:     static ILCreateFromPathWPtr sILCreateFromPathW;
78046:     static ILFreePtr sILFree;
78046:     static SHOpenFolderAndSelectItemsPtr sSHOpenFolderAndSelectItems;
78046:     static PRLibrary *sLibShell;
    1: };
    1: 
    1: #endif
