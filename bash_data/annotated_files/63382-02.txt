42153: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42153:  * ***** BEGIN LICENSE BLOCK *****
42153:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42153:  *
42153:  * The contents of this file are subject to the Mozilla Public License Version
42153:  * 1.1 (the "License"); you may not use this file except in compliance with
42153:  * the License. You may obtain a copy of the License at
42153:  * http://www.mozilla.org/MPL/
42153:  *
42153:  * Software distributed under the License is distributed on an "AS IS" basis,
42153:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42153:  * for the specific language governing rights and limitations under the
42153:  * License.
42153:  *
42153:  * The Original Code is Android port code.
42153:  *
42153:  * The Initial Developer of the Original Code is
42153:  *   Mozilla Foundation
42153:  * Portions created by the Initial Developer are Copyright (C) 2010
42153:  * the Initial Developer. All Rights Reserved.
42153:  *
42153:  * Contributor(s):
42153:  *   Vladimir Vukicevic <vladimir@pobox.com>
42153:  *
42153:  * Alternatively, the contents of this file may be used under the terms of
42153:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42153:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42153:  * in which case the provisions of the GPL or the LGPL are applicable instead
42153:  * of those above. If you wish to allow use of your version of this file only
42153:  * under the terms of either the GPL or the LGPL, and not to allow others to
42153:  * use your version of this file under the terms of the MPL, indicate your
42153:  * decision by deleting the provisions above and replace them with the notice
42153:  * and other provisions required by the GPL or the LGPL. If you do not delete
42153:  * the provisions above, a recipient may use your version of this file under
42153:  * the terms of any one of the MPL, the GPL or the LGPL.
42153:  *
42153:  * ***** END LICENSE BLOCK ***** */
42153: 
42153: #ifndef GFX_PLATFORM_ANDROID_H
42153: #define GFX_PLATFORM_ANDROID_H
42153: 
42153: #include "gfxFontUtils.h"
42153: #include "gfxFT2Fonts.h"
42153: #include "gfxPlatform.h"
42153: #include "nsDataHashtable.h"
42153: #include "nsTArray.h"
42153: 
42153: typedef struct FT_LibraryRec_ *FT_Library;
42153: 
42153: class FontFamily;
42153: class FontEntry;
62921: namespace mozilla {
62921:     namespace dom {
62921:         class FontListEntry;
62921:     };
62921: };
62921: 
62921: using namespace mozilla;
62921: using namespace dom;
62921: 
62921: class FontNameCache;
42153: 
42153: class THEBES_API gfxAndroidPlatform : public gfxPlatform {
42153: public:
42153:     gfxAndroidPlatform();
42153:     virtual ~gfxAndroidPlatform();
42153: 
42153:     static gfxAndroidPlatform *GetPlatform() {
42153:         return (gfxAndroidPlatform*) gfxPlatform::GetPlatform();
42153:     }
42153: 
62921:     void GetFontList(InfallibleTArray<FontListEntry>* retValue);
62921: 
42153:     already_AddRefed<gfxASurface> CreateOffscreenSurface(const gfxIntSize& size,
54253:                                                          gfxASurface::gfxContentType contentType);
42153: 
48022:     virtual PRBool IsFontFormatSupported(nsIURI *aFontURI, PRUint32 aFormatFlags);
48022:     virtual gfxPlatformFontList* CreatePlatformFontList();
48022:     virtual gfxFontEntry* MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
48022:                                      const PRUint8 *aFontData, PRUint32 aLength);
48022: 
42153:     nsresult GetFontList(nsIAtom *aLangGroup,
42153:                          const nsACString& aGenericFamily,
42153:                          nsTArray<nsString>& aListOfFonts);
42153: 
42153:     nsresult UpdateFontList();
42153: 
42153:     nsresult ResolveFontName(const nsAString& aFontName,
42153:                              FontResolverCallback aCallback,
42153:                              void *aClosure, PRBool& aAborted);
42153: 
42153:     nsresult GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName);
42153: 
42153:     gfxFontGroup *CreateFontGroup(const nsAString &aFamilies,
42153:                                   const gfxFontStyle *aStyle,
42153:                                   gfxUserFontSet* aUserFontSet);
42153: 
42153:     FontFamily *FindFontFamily(const nsAString& aName);
42153:     FontEntry *FindFontEntry(const nsAString& aFamilyName, const gfxFontStyle& aFontStyle);
42153:     already_AddRefed<gfxFont> FindFontForChar(PRUint32 aCh, gfxFont *aFont);
42153:     PRBool GetPrefFontEntries(const nsCString& aLangGroup, nsTArray<nsRefPtr<gfxFontEntry> > *aFontEntryList);
42153:     void SetPrefFontEntries(const nsCString& aLangGroup, nsTArray<nsRefPtr<gfxFontEntry> >& aFontEntryList);
42153: 
42153:     FT_Library GetFTLibrary();
42153: 
59199:     virtual gfxImageFormat GetOffscreenFormat() { return gfxASurface::ImageFormatRGB16_565; }
59199: 
42153: protected:
62921:     void AppendFacesFromFontFile(const char *aFileName, FontNameCache* aFontCache, InfallibleTArray<FontListEntry>* retValue);
63382:     void FindFontsInDirectory(const char *aDirectory, FontNameCache* aFontCache);
42153: 
42153:     typedef nsDataHashtable<nsStringHashKey, nsRefPtr<FontFamily> > FontTable;
42153: 
42153:     FontTable mFonts;
42153:     FontTable mFontAliases;
42153:     FontTable mFontSubstitutes;
62921:     InfallibleTArray<FontListEntry> mFontList;
42153: 
42153:     // when system-wide font lookup fails for a character, cache it to skip future searches
42153:     gfxSparseBitSet mCodepointsWithNoFonts;
42153:     
42153:     nsDataHashtable<nsCStringHashKey, nsTArray<nsRefPtr<gfxFontEntry> > > mPrefFonts;
42153: };
42153: 
42153: #endif /* GFX_PLATFORM_ANDROID_H */
42153: 
