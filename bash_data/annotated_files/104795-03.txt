 47525: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 47525:  * vim: set ts=4 sw=4 et tw=99 ft=cpp:
 47525:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 47525: 
 93951: #ifndef _xpc_WRAPPERFACTORY_H
 93951: #define _xpc_WRAPPERFACTORY_H
 93951: 
 47525: #include "jsapi.h"
 47525: #include "jswrapper.h"
 47525: 
 47525: namespace xpc {
 47525: 
 47525: class WrapperFactory {
 47574:   public:
 79386:     enum { WAIVE_XRAY_WRAPPER_FLAG = js::Wrapper::LAST_USED_FLAG << 1,
 58714:            IS_XRAY_WRAPPER_FLAG    = WAIVE_XRAY_WRAPPER_FLAG << 1,
 58714:            SCRIPT_ACCESS_ONLY_FLAG = IS_XRAY_WRAPPER_FLAG << 1,
 58714:            PARTIALLY_TRANSPARENT   = SCRIPT_ACCESS_ONLY_FLAG << 1,
 93966:            SOW_FLAG                = PARTIALLY_TRANSPARENT << 1,
 93966: 
 93966:            // Prevent scripts from shadowing native properties.
 93966:            // NB: Applies only to Xray wrappers.
 93966:            // NB: This will prevent scriptable helpers from defining special
 93966:            //     handlers for properties defined in IDL. Use with caution.
 93966:            SHADOWING_FORBIDDEN     = SOW_FLAG << 1 };
 47574: 
 47574:     // Return true if any of any of the nested wrappers have the flag set.
 91237:     static bool HasWrapperFlag(JSObject *wrapper, unsigned flag) {
 91237:         unsigned flags = 0;
 89339:         js::UnwrapObject(wrapper, true, &flags);
 47574:         return !!(flags & flag);
 47574:     }
 47574: 
 55624:     static bool IsXrayWrapper(JSObject *wrapper) {
 55624:         return HasWrapperFlag(wrapper, IS_XRAY_WRAPPER_FLAG);
 55624:     }
 55624: 
 55666:     static bool IsPartiallyTransparent(JSObject *wrapper) {
 55666:         return HasWrapperFlag(wrapper, PARTIALLY_TRANSPARENT);
 55666:     }
 55666: 
 55691:     static bool HasWaiveXrayFlag(JSObject *wrapper) {
 55691:         return HasWrapperFlag(wrapper, WAIVE_XRAY_WRAPPER_FLAG);
 55691:     }
 55691: 
 93966:     static bool IsShadowingForbidden(JSObject *wrapper) {
 93966:         return HasWrapperFlag(wrapper, SHADOWING_FORBIDDEN);
 93966:     }
 93966: 
104795:     static JSObject *GetXrayWaiver(JSObject *obj);
104795:     static JSObject *CreateXrayWaiver(JSContext *cx, JSObject *obj);
 60580:     static JSObject *WaiveXray(JSContext *cx, JSObject *obj);
 60580: 
 91237:     static JSObject *DoubleWrap(JSContext *cx, JSObject *obj, unsigned flags);
 60580: 
 55628:     // Prepare a given object for wrapping in a new compartment.
 55628:     static JSObject *PrepareForWrapping(JSContext *cx,
 55628:                                         JSObject *scope,
 55628:                                         JSObject *obj,
 91237:                                         unsigned flags);
 55628: 
 47574:     // Rewrap an object that is about to cross compartment boundaries.
 47574:     static JSObject *Rewrap(JSContext *cx,
 47574:                             JSObject *obj,
 47574:                             JSObject *wrappedProto,
 55580:                             JSObject *parent,
 91237:                             unsigned flags);
 55617: 
 98431:     // Wrap an object for same-compartment access.
 98431:     static JSObject *WrapForSameCompartment(JSContext *cx,
 98431:                                             JSObject *obj);
 98431: 
 55617:     // Return true if this is a location object.
 55617:     static bool IsLocationObject(JSObject *obj);
 55617: 
 55617:     // Wrap a location object.
 55617:     static JSObject *WrapLocationObject(JSContext *cx, JSObject *obj);
 55696: 
 55696:     // Wrap wrapped object into a waiver wrapper and then re-wrap it.
 55696:     static bool WaiveXrayAndWrap(JSContext *cx, jsval *vp);
 55700: 
 55700:     // Wrap a (same compartment) object in a SOW.
 55700:     static JSObject *WrapSOWObject(JSContext *cx, JSObject *obj);
 97171: 
 97171:     // Return true if this is a Components object.
 97171:     static bool IsComponentsObject(JSObject *obj);
 97171: 
 97171:     // Wrap a (same compartment) Components object.
 97171:     static JSObject *WrapComponentsObject(JSContext *cx, JSObject *obj);
 47525: };
 47525: 
103121: extern js::DirectWrapper WaiveXrayWrapperWrapper;
 55691: 
 47525: }
 93951: 
 93951: #endif /* _xpc_WRAPPERFACTORY_H */
