114563: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
114563: /* vim:set ts=2 sw=2 sts=2 et cindent: */
114563: /* This Source Code Form is subject to the terms of the Mozilla Public
114563:  * License, v. 2.0. If a copy of the MPL was not distributed with this
114563:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
114563: 
120474: #ifndef AudioNode_h_
120474: #define AudioNode_h_
114563: 
114563: #include "nsCycleCollectionParticipant.h"
114563: #include "mozilla/Attributes.h"
114563: #include "EnableWebAudioCheck.h"
114563: #include "nsAutoPtr.h"
115865: #include "nsTArray.h"
114563: #include "AudioContext.h"
131500: #include "MediaStreamGraph.h"
114563: 
114563: struct JSContext;
114563: 
114563: namespace mozilla {
115865: 
115865: class ErrorResult;
115865: 
114563: namespace dom {
114563: 
131500: /**
131500:  * The DOM object representing a Web Audio AudioNode.
131500:  *
131500:  * Each AudioNode has a MediaStream representing the actual
131500:  * real-time processing and output of this AudioNode.
131500:  *
131500:  * We track the incoming and outgoing connections to other AudioNodes.
131500:  * All connections are strong and thus rely on cycle collection to break them.
131500:  * However, we also track whether an AudioNode is capable of producing output
131500:  * in the future. If it isn't, then we break its connections to its inputs
131500:  * and outputs, allowing nodes to be immediately disconnected. This
131500:  * disconnection is done internally, invisible to DOM users.
131500:  *
131500:  * We say that a node cannot produce output in the future if it has no inputs
131500:  * that can, and it is not producing output itself without any inputs, and
131500:  * either it can never have any inputs or it has no JS wrapper. (If it has a
131500:  * JS wrapper and can accept inputs, then a new input could be added in
131500:  * the future.)
131500:  */
114563: class AudioNode : public nsISupports,
114563:                   public EnableWebAudioCheck
114563: {
114563: public:
114563:   explicit AudioNode(AudioContext* aContext);
130371:   virtual ~AudioNode();
114563: 
131500:   // This should be idempotent (safe to call multiple times).
131500:   // This should be called in the destructor of every class that overrides
131500:   // this method.
131500:   virtual void DestroyMediaStream()
131500:   {
131500:     if (mStream) {
131500:       mStream->Destroy();
131500:       mStream = nullptr;
131500:     }
131500:   }
131500: 
131501:   // This method should be overridden to return true in nodes
131501:   // which support being hooked up to the Media Stream graph.
131501:   virtual bool SupportsMediaStreams() const
131501:   {
131501:     return false;
131501:   }
131501: 
114563:   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
130371:   NS_DECL_CYCLE_COLLECTION_CLASS(AudioNode)
114563: 
131500:   void JSBindingFinalized()
131500:   {
131500:     NS_ASSERTION(!mJSBindingFinalized, "JS binding already finalized");
131500:     mJSBindingFinalized = true;
131500:     UpdateOutputEnded();
131500:   }
131500: 
114563:   AudioContext* GetParentObject() const
114563:   {
114563:     return mContext;
114563:   }
114563: 
114563:   AudioContext* Context() const
114563:   {
114563:     return mContext;
114563:   }
114563: 
114563:   void Connect(AudioNode& aDestination, uint32_t aOutput,
115865:                uint32_t aInput, ErrorResult& aRv);
114563: 
115865:   void Disconnect(uint32_t aOutput, ErrorResult& aRv);
115865: 
130371:   // The following two virtual methods must be implemented by each node type
130371:   // to provide their number of input and output ports. These numbers are
130371:   // constant for the lifetime of the node. Both default to 1.
130371:   virtual uint32_t NumberOfInputs() const { return 1; }
130371:   virtual uint32_t NumberOfOutputs() const { return 1; }
115865: 
131500:   // This could possibly delete 'this'.
131500:   void UpdateOutputEnded();
131500:   bool IsOutputEnded() const { return mOutputEnded; }
131500: 
130371:   struct InputNode {
131500:     ~InputNode()
131500:     {
131500:       if (mStreamPort) {
131500:         mStreamPort->Destroy();
131500:       }
131500:     }
131500: 
130371:     // Strong reference.
130371:     // May be null if the source node has gone away.
130371:     nsRefPtr<AudioNode> mInputNode;
131500:     nsRefPtr<MediaInputPort> mStreamPort;
130371:     // The index of the input port this node feeds into.
130371:     uint32_t mInputPort;
130371:     // The index of the output port this node comes out of.
130371:     uint32_t mOutputPort;
115865:   };
114563: 
131500:   MediaStream* Stream() { return mStream; }
131500: 
131500:   // Set this to true when the node can produce its own output even if there
131500:   // are no inputs.
131500:   void SetProduceOwnOutput(bool aCanProduceOwnOutput)
131500:   {
131500:     mCanProduceOwnOutput = aCanProduceOwnOutput;
131500:     if (!aCanProduceOwnOutput) {
131500:       UpdateOutputEnded();
131500:     }
131500:   }
131500: 
114563: private:
114563:   nsRefPtr<AudioContext> mContext;
130371: 
131500: protected:
131500:   // Must be set in the constructor. Must not be null.
131500:   // If MaxNumberOfInputs() is > 0, then mStream must be a ProcessedMediaStream.
131500:   nsRefPtr<MediaStream> mStream;
131500: 
131500: private:
130371:   // For every InputNode, there is a corresponding entry in mOutputNodes of the
130371:   // InputNode's mInputNode.
130371:   nsTArray<InputNode> mInputNodes;
130371:   // For every mOutputNode entry, there is a corresponding entry in mInputNodes
130371:   // of the mOutputNode entry. We won't necessarily be able to identify the
130371:   // exact matching entry, since mOutputNodes doesn't include the port
130371:   // identifiers and the same node could be connected on multiple ports.
130371:   nsTArray<nsRefPtr<AudioNode> > mOutputNodes;
131500:   // True if the JS binding has been finalized (so script no longer has
131500:   // a reference to this node).
131500:   bool mJSBindingFinalized;
131500:   // True if this node can produce its own output even when all inputs
131500:   // have ended their output.
131500:   bool mCanProduceOwnOutput;
131500:   // True if this node can never produce anything except silence in the future.
131500:   // Updated by UpdateOutputEnded().
131500:   bool mOutputEnded;
114563: };
114563: 
114563: }
114563: }
114563: 
120474: #endif
