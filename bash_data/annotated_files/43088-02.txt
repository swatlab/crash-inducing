29805: /*
29805:  * Copyright (c) 2007 Henri Sivonen
39515:  * Copyright (c) 2007-2010 Mozilla Foundation
29805:  * Portions of comments Copyright 2004-2008 Apple Computer, Inc., Mozilla 
29805:  * Foundation, and Opera Software ASA.
29805:  *
29805:  * Permission is hereby granted, free of charge, to any person obtaining a 
29805:  * copy of this software and associated documentation files (the "Software"), 
29805:  * to deal in the Software without restriction, including without limitation 
29805:  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
29805:  * and/or sell copies of the Software, and to permit persons to whom the 
29805:  * Software is furnished to do so, subject to the following conditions:
29805:  *
29805:  * The above copyright notice and this permission notice shall be included in 
29805:  * all copies or substantial portions of the Software.
29805:  *
29805:  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
29805:  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
29805:  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
29805:  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
29805:  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
29805:  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
29805:  * DEALINGS IN THE SOFTWARE.
29805:  */
29805: 
29805: /*
29805:  * THIS IS A GENERATED FILE. PLEASE DO NOT EDIT.
29805:  * Please edit TreeBuilder.java instead and regenerate.
29805:  */
29805: 
29805: #define nsHtml5TreeBuilder_cpp__
29805: 
29805: #include "prtypes.h"
29805: #include "nsIAtom.h"
34979: #include "nsHtml5AtomTable.h"
29805: #include "nsITimer.h"
29805: #include "nsString.h"
29805: #include "nsINameSpaceManager.h"
29805: #include "nsIContent.h"
29805: #include "nsIDocument.h"
29805: #include "nsTraceRefcnt.h"
29805: #include "jArray.h"
29805: #include "nsHtml5DocumentMode.h"
29805: #include "nsHtml5ArrayCopy.h"
29805: #include "nsHtml5NamedCharacters.h"
29805: #include "nsHtml5Parser.h"
29805: #include "nsHtml5Atoms.h"
29805: #include "nsHtml5ByteReadable.h"
29805: #include "nsHtml5TreeOperation.h"
29805: #include "nsHtml5PendingNotification.h"
29805: #include "nsHtml5StateSnapshot.h"
29805: #include "nsHtml5StackNode.h"
32917: #include "nsHtml5TreeOpExecutor.h"
32917: #include "nsHtml5StreamParser.h"
34979: #include "nsAHtml5TreeBuilderState.h"
29805: 
29805: #include "nsHtml5Tokenizer.h"
29805: #include "nsHtml5MetaScanner.h"
29805: #include "nsHtml5AttributeName.h"
29805: #include "nsHtml5ElementName.h"
29805: #include "nsHtml5HtmlAttributes.h"
29805: #include "nsHtml5StackNode.h"
29805: #include "nsHtml5UTF16Buffer.h"
29805: #include "nsHtml5StateSnapshot.h"
29805: #include "nsHtml5Portability.h"
29805: 
29805: #include "nsHtml5TreeBuilder.h"
29805: 
29805: void 
29805: nsHtml5TreeBuilder::startTokenization(nsHtml5Tokenizer* self)
29805: {
29805:   tokenizer = self;
29805:   stack = jArray<nsHtml5StackNode*,PRInt32>(64);
29805:   listOfActiveFormattingElements = jArray<nsHtml5StackNode*,PRInt32>(64);
29805:   needToDropLF = PR_FALSE;
29805:   originalMode = NS_HTML5TREE_BUILDER_INITIAL;
29805:   currentPtr = -1;
29805:   listPtr = -1;
34979:   ;
29805:   formPointer = nsnull;
34979:   ;
29805:   headPointer = nsnull;
29805:   start(fragment);
29805:   charBufferLen = 0;
29805:   charBuffer = jArray<PRUnichar,PRInt32>(1024);
36587:   framesetOk = PR_TRUE;
29805:   if (fragment) {
34978:     nsIContent** elt;
41449:     if (contextNode) {
29805:       elt = contextNode;
34979:       ;
29805:     } else {
29805:       elt = createHtmlElementSetAsRoot(tokenizer->emptyAttributes());
29805:     }
29845:     nsHtml5StackNode* node = new nsHtml5StackNode(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HTML, elt);
29805:     currentPtr++;
29805:     stack[currentPtr] = node;
29805:     resetTheInsertionMode();
29805:     if (nsHtml5Atoms::title == contextName || nsHtml5Atoms::textarea == contextName) {
40985:       tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RCDATA, contextName);
35595:     } else if (nsHtml5Atoms::style == contextName || nsHtml5Atoms::xmp == contextName || nsHtml5Atoms::iframe == contextName || nsHtml5Atoms::noembed == contextName || nsHtml5Atoms::noframes == contextName || (scriptingEnabled && nsHtml5Atoms::noscript == contextName)) {
40985:       tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, contextName);
29805:     } else if (nsHtml5Atoms::plaintext == contextName) {
40985:       tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_PLAINTEXT, contextName);
35595:     } else if (nsHtml5Atoms::script == contextName) {
40985:       tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, contextName);
29805:     } else {
40985:       tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_DATA, contextName);
29805:     }
29805:     nsHtml5Portability::releaseLocal(contextName);
29805:     contextName = nsnull;
34979:     ;
29805:     contextNode = nsnull;
34979:     ;
29805:   } else {
29805:     mode = NS_HTML5TREE_BUILDER_INITIAL;
41449:     inForeign = PR_FALSE;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::doctype(nsIAtom* name, nsString* publicIdentifier, nsString* systemIdentifier, PRBool forceQuirks)
29805: {
29805:   needToDropLF = PR_FALSE;
41449:   if (!inForeign) {
29805:     switch(mode) {
29805:       case NS_HTML5TREE_BUILDER_INITIAL: {
29805:         nsString* emptyString = nsHtml5Portability::newEmptyString();
29805:         appendDoctypeToDocument(!name ? nsHtml5Atoms::emptystring : name, !publicIdentifier ? emptyString : publicIdentifier, !systemIdentifier ? emptyString : systemIdentifier);
29805:         nsHtml5Portability::releaseString(emptyString);
29805:         if (isQuirky(name, publicIdentifier, systemIdentifier, forceQuirks)) {
29805: 
29805:           documentModeInternal(QUIRKS_MODE, publicIdentifier, systemIdentifier, PR_FALSE);
29805:         } else if (isAlmostStandards(publicIdentifier, systemIdentifier)) {
29805: 
29805:           documentModeInternal(ALMOST_STANDARDS_MODE, publicIdentifier, systemIdentifier, PR_FALSE);
29805:         } else {
29805:           documentModeInternal(STANDARDS_MODE, publicIdentifier, systemIdentifier, PR_FALSE);
29805:         }
29805:         mode = NS_HTML5TREE_BUILDER_BEFORE_HTML;
29805:         return;
29805:       }
29805:       default: {
41449:         break;
41449:       }
41449:     }
41449:   }
29805: 
29805:   return;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::comment(PRUnichar* buf, PRInt32 start, PRInt32 length)
29805: {
29805:   needToDropLF = PR_FALSE;
41449:   if (!inForeign) {
29805:     switch(mode) {
29805:       case NS_HTML5TREE_BUILDER_INITIAL:
29805:       case NS_HTML5TREE_BUILDER_BEFORE_HTML:
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY:
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET: {
29805:         appendCommentToDocument(buf, start, length);
29805:         return;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_BODY: {
29805:         flushCharacters();
29805:         appendComment(stack[0]->node, buf, start, length);
29805:         return;
29805:       }
29805:       default: {
40985:         break;
40985:       }
40985:     }
40985:   }
29805:   flushCharacters();
29805:   appendComment(stack[currentPtr]->node, buf, start, length);
29805:   return;
29805: }
29805: 
29805: void 
39515: nsHtml5TreeBuilder::characters(const PRUnichar* buf, PRInt32 start, PRInt32 length)
29805: {
29805:   if (needToDropLF) {
29805:     if (buf[start] == '\n') {
29805:       start++;
29805:       length--;
29805:       if (!length) {
29805:         return;
29805:       }
29805:     }
29805:     needToDropLF = PR_FALSE;
29805:   }
29805:   switch(mode) {
29805:     case NS_HTML5TREE_BUILDER_IN_BODY:
29805:     case NS_HTML5TREE_BUILDER_IN_CELL:
29805:     case NS_HTML5TREE_BUILDER_IN_CAPTION: {
29805:       reconstructTheActiveFormattingElements();
29805:     }
35594:     case NS_HTML5TREE_BUILDER_TEXT: {
29805:       accumulateCharacters(buf, start, length);
29805:       return;
29805:     }
29805:     default: {
29805:       PRInt32 end = start + length;
29805:       for (PRInt32 i = start; i < end; i++) {
29805:         switch(buf[i]) {
29805:           case ' ':
29805:           case '\t':
29805:           case '\n':
39517:           case '\r':
29805:           case '\f': {
29805:             switch(mode) {
29805:               case NS_HTML5TREE_BUILDER_INITIAL:
29805:               case NS_HTML5TREE_BUILDER_BEFORE_HTML:
29805:               case NS_HTML5TREE_BUILDER_BEFORE_HEAD: {
29805:                 start = i + 1;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_FRAMESET_OK:
29805:               case NS_HTML5TREE_BUILDER_IN_HEAD:
29805:               case NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT:
29805:               case NS_HTML5TREE_BUILDER_AFTER_HEAD:
29805:               case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP:
29805:               case NS_HTML5TREE_BUILDER_IN_FRAMESET:
29805:               case NS_HTML5TREE_BUILDER_AFTER_FRAMESET: {
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_BODY:
29805:               case NS_HTML5TREE_BUILDER_IN_CELL:
29805:               case NS_HTML5TREE_BUILDER_IN_CAPTION: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 reconstructTheActiveFormattingElements();
41449:                 NS_HTML5_BREAK(charactersloop);
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_SELECT:
29805:               case NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE: {
41449:                 NS_HTML5_BREAK(charactersloop);
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_TABLE:
29805:               case NS_HTML5TREE_BUILDER_IN_TABLE_BODY:
29805:               case NS_HTML5TREE_BUILDER_IN_ROW: {
29805:                 reconstructTheActiveFormattingElements();
29805:                 accumulateCharacter(buf[i]);
29805:                 start = i + 1;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_BODY: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 reconstructTheActiveFormattingElements();
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY:
29805:               case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 reconstructTheActiveFormattingElements();
29805:                 continue;
29805:               }
29805:             }
29805:           }
29805:           default: {
29805:             switch(mode) {
29805:               case NS_HTML5TREE_BUILDER_INITIAL: {
29805:                 documentModeInternal(QUIRKS_MODE, nsnull, nsnull, PR_FALSE);
29805:                 mode = NS_HTML5TREE_BUILDER_BEFORE_HTML;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_BEFORE_HTML: {
29805:                 appendHtmlElementToDocumentAndPush();
29805:                 mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_BEFORE_HEAD: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:                 mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_HEAD: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 pop();
29805:                 mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805: 
29805:                 pop();
29805:                 mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_HEAD: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 appendToCurrentNodeAndPushBodyElement();
29805:                 mode = NS_HTML5TREE_BUILDER_FRAMESET_OK;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_FRAMESET_OK: {
36587:                 framesetOk = PR_FALSE;
29805:                 mode = NS_HTML5TREE_BUILDER_IN_BODY;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_BODY:
29805:               case NS_HTML5TREE_BUILDER_IN_CELL:
29805:               case NS_HTML5TREE_BUILDER_IN_CAPTION: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 reconstructTheActiveFormattingElements();
41449:                 NS_HTML5_BREAK(charactersloop);
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_TABLE:
29805:               case NS_HTML5TREE_BUILDER_IN_TABLE_BODY:
29805:               case NS_HTML5TREE_BUILDER_IN_ROW: {
29805:                 reconstructTheActiveFormattingElements();
29805:                 accumulateCharacter(buf[i]);
29805:                 start = i + 1;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805:                 if (!currentPtr) {
29805: 
29805:                   start = i + 1;
29805:                   continue;
29805:                 }
29805:                 pop();
29805:                 mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_SELECT:
29805:               case NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE: {
41449:                 NS_HTML5_BREAK(charactersloop);
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_BODY: {
29805: 
29805: 
36587:                 mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_IN_FRAMESET: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805: 
29805:                 start = i + 1;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_FRAMESET: {
29805:                 if (start < i) {
29805:                   accumulateCharacters(buf, start, i - start);
29805:                   start = i;
29805:                 }
29805: 
29805:                 start = i + 1;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY: {
29805: 
36587:                 mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:                 i--;
29805:                 continue;
29805:               }
29805:               case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET: {
29805: 
29805:                 mode = NS_HTML5TREE_BUILDER_IN_FRAMESET;
29805:                 i--;
29805:                 continue;
29805:               }
29805:             }
29805:           }
29805:         }
29805:       }
29805:       charactersloop_end: ;
29805:       if (start < end) {
29805:         accumulateCharacters(buf, start, end - start);
29805:       }
29805:     }
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::eof()
29805: {
29805:   flushCharacters();
41449:   if (inForeign) {
29805: 
29805:     while (stack[currentPtr]->ns != kNameSpaceID_XHTML) {
29805:       popOnEof();
29805:     }
41449:     inForeign = PR_FALSE;
29805:   }
29805:   for (; ; ) {
29805:     switch(mode) {
29805:       case NS_HTML5TREE_BUILDER_INITIAL: {
29805:         documentModeInternal(QUIRKS_MODE, nsnull, nsnull, PR_FALSE);
29805:         mode = NS_HTML5TREE_BUILDER_BEFORE_HTML;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_BEFORE_HTML: {
29805:         appendHtmlElementToDocumentAndPush();
29805:         mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_BEFORE_HEAD: {
29805:         appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:         mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_HEAD: {
41449: 
29805:         while (currentPtr > 0) {
29805:           popOnEof();
29805:         }
29805:         mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT: {
29805: 
29805:         while (currentPtr > 1) {
29805:           popOnEof();
29805:         }
29805:         mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_HEAD: {
29805:         appendToCurrentNodeAndPushBodyElement();
29805:         mode = NS_HTML5TREE_BUILDER_IN_BODY;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP: {
29805:         if (!currentPtr) {
29805: 
41449:           NS_HTML5_BREAK(eofloop);
29805:         } else {
29805:           popOnEof();
29805:           mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:           continue;
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_FRAMESET_OK:
29805:       case NS_HTML5TREE_BUILDER_IN_CAPTION:
29805:       case NS_HTML5TREE_BUILDER_IN_CELL:
29805:       case NS_HTML5TREE_BUILDER_IN_BODY: {
41449:         NS_HTML5_BREAK(eofloop);
29805:       }
35594:       case NS_HTML5TREE_BUILDER_TEXT: {
29805: 
29805:         if (originalMode == NS_HTML5TREE_BUILDER_AFTER_HEAD) {
29805:           popOnEof();
29805:         }
29805:         popOnEof();
29805:         mode = originalMode;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_TABLE_BODY:
29805:       case NS_HTML5TREE_BUILDER_IN_ROW:
29805:       case NS_HTML5TREE_BUILDER_IN_TABLE:
29805:       case NS_HTML5TREE_BUILDER_IN_SELECT:
29805:       case NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE:
29805:       case NS_HTML5TREE_BUILDER_IN_FRAMESET: {
41449: 
41449:         NS_HTML5_BREAK(eofloop);
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_BODY:
29805:       case NS_HTML5TREE_BUILDER_AFTER_FRAMESET:
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY:
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET:
29805:       default: {
41449:         NS_HTML5_BREAK(eofloop);
29805:       }
29805:     }
29805:   }
29805:   eofloop_end: ;
29805:   while (currentPtr > 0) {
29805:     popOnEof();
29805:   }
29805:   if (!fragment) {
29805:     popOnEof();
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::endTokenization()
29805: {
34979:   ;
29805:   formPointer = nsnull;
34979:   ;
29805:   headPointer = nsnull;
41449:   if (stack) {
29805:     while (currentPtr > -1) {
29805:       stack[currentPtr]->release();
29805:       currentPtr--;
29805:     }
29805:     stack.release();
29805:     stack = nsnull;
34979:   }
41449:   if (listOfActiveFormattingElements) {
29805:     while (listPtr > -1) {
41449:       if (listOfActiveFormattingElements[listPtr]) {
29805:         listOfActiveFormattingElements[listPtr]->release();
29805:       }
29805:       listPtr--;
29805:     }
29805:     listOfActiveFormattingElements.release();
29805:     listOfActiveFormattingElements = nsnull;
34979:   }
41449:   if (charBuffer) {
29805:     charBuffer.release();
29805:     charBuffer = nsnull;
34979:   }
29805:   end();
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::startTag(nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes, PRBool selfClosing)
29805: {
29805:   PRInt32 eltPos;
29805:   needToDropLF = PR_FALSE;
29805:   PRBool needsPostProcessing = PR_FALSE;
29805:   starttagloop: for (; ; ) {
29805:     PRInt32 group = elementName->group;
29805:     nsIAtom* name = elementName->name;
41449:     if (inForeign) {
29805:       nsHtml5StackNode* currentNode = stack[currentPtr];
29805:       PRInt32 currNs = currentNode->ns;
29805:       PRInt32 currGroup = currentNode->group;
29805:       if ((kNameSpaceID_XHTML == currNs) || (kNameSpaceID_MathML == currNs && ((NS_HTML5TREE_BUILDER_MGLYPH_OR_MALIGNMARK != group && NS_HTML5TREE_BUILDER_MI_MO_MN_MS_MTEXT == currGroup) || (NS_HTML5TREE_BUILDER_SVG == group && NS_HTML5TREE_BUILDER_ANNOTATION_XML == currGroup))) || (kNameSpaceID_SVG == currNs && (NS_HTML5TREE_BUILDER_TITLE == currGroup || (NS_HTML5TREE_BUILDER_FOREIGNOBJECT_OR_DESC == currGroup)))) {
29805:         needsPostProcessing = PR_TRUE;
29805:       } else {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_B_OR_BIG_OR_CODE_OR_EM_OR_I_OR_S_OR_SMALL_OR_STRIKE_OR_STRONG_OR_TT_OR_U:
29805:           case NS_HTML5TREE_BUILDER_DIV_OR_BLOCKQUOTE_OR_CENTER_OR_MENU:
29805:           case NS_HTML5TREE_BUILDER_BODY:
29805:           case NS_HTML5TREE_BUILDER_BR:
29805:           case NS_HTML5TREE_BUILDER_RUBY_OR_SPAN_OR_SUB_OR_SUP_OR_VAR:
29805:           case NS_HTML5TREE_BUILDER_DD_OR_DT:
29805:           case NS_HTML5TREE_BUILDER_UL_OR_OL_OR_DL:
29805:           case NS_HTML5TREE_BUILDER_EMBED_OR_IMG:
29805:           case NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6:
29805:           case NS_HTML5TREE_BUILDER_HEAD:
29805:           case NS_HTML5TREE_BUILDER_HR:
29805:           case NS_HTML5TREE_BUILDER_LI:
29805:           case NS_HTML5TREE_BUILDER_META:
29805:           case NS_HTML5TREE_BUILDER_NOBR:
29805:           case NS_HTML5TREE_BUILDER_P:
29805:           case NS_HTML5TREE_BUILDER_PRE_OR_LISTING:
29805:           case NS_HTML5TREE_BUILDER_TABLE: {
29805: 
29805:             while (stack[currentPtr]->ns != kNameSpaceID_XHTML) {
29805:               pop();
29805:             }
41449:             inForeign = PR_FALSE;
41449:             NS_HTML5_CONTINUE(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_FONT: {
29845:             if (attributes->contains(nsHtml5AttributeName::ATTR_COLOR) || attributes->contains(nsHtml5AttributeName::ATTR_FACE) || attributes->contains(nsHtml5AttributeName::ATTR_SIZE)) {
29805: 
29805:               while (stack[currentPtr]->ns != kNameSpaceID_XHTML) {
29805:                 pop();
29805:               }
41449:               inForeign = PR_FALSE;
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
29805:           }
29805:           default: {
29805:             if (kNameSpaceID_SVG == currNs) {
29805:               attributes->adjustForSvg();
29805:               if (selfClosing) {
29805:                 appendVoidElementToCurrentMayFosterCamelCase(currNs, elementName, attributes);
29805:                 selfClosing = PR_FALSE;
29805:               } else {
29805:                 appendToCurrentNodeAndPushElementMayFosterCamelCase(currNs, elementName, attributes);
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             } else {
29805:               attributes->adjustForMath();
29805:               if (selfClosing) {
29805:                 appendVoidElementToCurrentMayFoster(currNs, elementName, attributes);
29805:                 selfClosing = PR_FALSE;
29805:               } else {
29805:                 appendToCurrentNodeAndPushElementMayFosterNoScoping(currNs, elementName, attributes);
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
41449:             }
41449:           }
41449:         }
41449:       }
41449:     }
29805:     switch(mode) {
29805:       case NS_HTML5TREE_BUILDER_IN_TABLE_BODY: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_TR: {
29805:             clearStackBackTo(findLastInTableScopeOrRootTbodyTheadTfoot());
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             mode = NS_HTML5TREE_BUILDER_IN_ROW;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805: 
29805:             clearStackBackTo(findLastInTableScopeOrRootTbodyTheadTfoot());
29845:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_TR, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:             mode = NS_HTML5TREE_BUILDER_IN_ROW;
29805:             continue;
29805:           }
29805:           case NS_HTML5TREE_BUILDER_CAPTION:
29805:           case NS_HTML5TREE_BUILDER_COL:
29805:           case NS_HTML5TREE_BUILDER_COLGROUP:
29805:           case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT: {
29805:             eltPos = findLastInTableScopeOrRootTbodyTheadTfoot();
29805:             if (!eltPos) {
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             } else {
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:               continue;
29805:             }
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_ROW: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805:             clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TR));
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             mode = NS_HTML5TREE_BUILDER_IN_CELL;
29805:             insertMarker();
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_CAPTION:
29805:           case NS_HTML5TREE_BUILDER_COL:
29805:           case NS_HTML5TREE_BUILDER_COLGROUP:
29805:           case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:           case NS_HTML5TREE_BUILDER_TR: {
29805:             eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TR);
29805:             if (!eltPos) {
29805: 
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             clearStackBackTo(eltPos);
29805:             pop();
29805:             mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
29805:             continue;
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_TABLE: {
29805:         for (; ; ) {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_CAPTION: {
29805:               clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE));
29805:               insertMarker();
29805:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:               mode = NS_HTML5TREE_BUILDER_IN_CAPTION;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_COLGROUP: {
29805:               clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE));
29805:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:               mode = NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_COL: {
29805:               clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE));
29845:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_COLGROUP, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:               mode = NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP;
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT: {
29805:               clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE));
29805:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TR:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805:               clearStackBackTo(findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE));
29845:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_TBODY, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805: 
29805:               eltPos = findLastInTableScope(name);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               }
29805:               generateImpliedEndTags();
41449: 
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               resetTheInsertionMode();
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
35595:             case NS_HTML5TREE_BUILDER_SCRIPT: {
35595:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
35595:               originalMode = mode;
35595:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, elementName);
35595:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
35595:             }
29805:             case NS_HTML5TREE_BUILDER_STYLE: {
29805:               appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_INPUT: {
29845:               if (!nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("hidden", attributes->getValue(nsHtml5AttributeName::ATTR_TYPE))) {
41449:                 NS_HTML5_BREAK(intableloop);
29805:               }
29805:               appendVoidElementToCurrent(kNameSpaceID_XHTML, name, attributes, formPointer);
29805:               selfClosing = PR_FALSE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
35594:             case NS_HTML5TREE_BUILDER_FORM: {
41449:               if (formPointer) {
41449: 
41449:                 NS_HTML5_BREAK(starttagloop);
36328:               } else {
36328: 
36328:                 appendVoidFormToCurrent(attributes);
35594:                 attributes = nsnull;
41449:                 NS_HTML5_BREAK(starttagloop);
35594:               }
36328:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(intableloop);
29805:             }
29805:           }
29805:         }
29805:         intableloop_end: ;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_CAPTION: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_CAPTION:
29805:           case NS_HTML5TREE_BUILDER_COL:
29805:           case NS_HTML5TREE_BUILDER_COLGROUP:
29805:           case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:           case NS_HTML5TREE_BUILDER_TR:
29805:           case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805: 
29805:             eltPos = findLastInTableScope(nsHtml5Atoms::caption);
29805:             if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             generateImpliedEndTags();
41449: 
29805:             while (currentPtr >= eltPos) {
29805:               pop();
29805:             }
29805:             clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:             mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:             continue;
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_CELL: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_CAPTION:
29805:           case NS_HTML5TREE_BUILDER_COL:
29805:           case NS_HTML5TREE_BUILDER_COLGROUP:
29805:           case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:           case NS_HTML5TREE_BUILDER_TR:
29805:           case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805:             eltPos = findLastInTableScopeTdTh();
29805:             if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             } else {
29805:               closeTheCell(eltPos);
29805:               continue;
29805:             }
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_FRAMESET_OK: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_FRAMESET: {
29805:             if (mode == NS_HTML5TREE_BUILDER_FRAMESET_OK) {
29805:               if (!currentPtr || stack[1]->group != NS_HTML5TREE_BUILDER_BODY) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               } else {
29805: 
29805:                 detachFromParent(stack[1]->node);
29805:                 while (currentPtr > 0) {
29805:                   pop();
29805:                 }
29805:                 appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:                 mode = NS_HTML5TREE_BUILDER_IN_FRAMESET;
34978:                 attributes = nsnull;
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               }
29805:             } else {
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:           }
29805:           case NS_HTML5TREE_BUILDER_PRE_OR_LISTING:
29805:           case NS_HTML5TREE_BUILDER_LI:
29805:           case NS_HTML5TREE_BUILDER_DD_OR_DT:
29805:           case NS_HTML5TREE_BUILDER_BUTTON:
29805:           case NS_HTML5TREE_BUILDER_MARQUEE_OR_APPLET:
29805:           case NS_HTML5TREE_BUILDER_OBJECT:
29805:           case NS_HTML5TREE_BUILDER_TABLE:
29805:           case NS_HTML5TREE_BUILDER_AREA_OR_BASEFONT_OR_BGSOUND_OR_SPACER_OR_WBR:
29805:           case NS_HTML5TREE_BUILDER_BR:
29805:           case NS_HTML5TREE_BUILDER_EMBED_OR_IMG:
29805:           case NS_HTML5TREE_BUILDER_INPUT:
29805:           case NS_HTML5TREE_BUILDER_KEYGEN:
29805:           case NS_HTML5TREE_BUILDER_HR:
29805:           case NS_HTML5TREE_BUILDER_TEXTAREA:
29805:           case NS_HTML5TREE_BUILDER_XMP:
29805:           case NS_HTML5TREE_BUILDER_IFRAME:
29805:           case NS_HTML5TREE_BUILDER_SELECT: {
29805:             if (mode == NS_HTML5TREE_BUILDER_FRAMESET_OK) {
36587:               framesetOk = PR_FALSE;
29805:               mode = NS_HTML5TREE_BUILDER_IN_BODY;
29805:             }
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_BODY: {
29805:         for (; ; ) {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:               addAttributesToHtml(attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BASE:
29805:             case NS_HTML5TREE_BUILDER_LINK:
29805:             case NS_HTML5TREE_BUILDER_META:
29805:             case NS_HTML5TREE_BUILDER_STYLE:
29805:             case NS_HTML5TREE_BUILDER_SCRIPT:
29805:             case NS_HTML5TREE_BUILDER_TITLE:
35594:             case NS_HTML5TREE_BUILDER_COMMAND: {
41449:               NS_HTML5_BREAK(inbodyloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY: {
29805: 
29805:               addAttributesToBody(attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_P:
29805:             case NS_HTML5TREE_BUILDER_DIV_OR_BLOCKQUOTE_OR_CENTER_OR_MENU:
29805:             case NS_HTML5TREE_BUILDER_UL_OR_OL_OR_DL:
35594:             case NS_HTML5TREE_BUILDER_ADDRESS_OR_DIR_OR_ARTICLE_OR_ASIDE_OR_DATAGRID_OR_DETAILS_OR_HGROUP_OR_FIGURE_OR_FOOTER_OR_HEADER_OR_NAV_OR_SECTION: {
29805:               implicitlyCloseP();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6: {
29805:               implicitlyCloseP();
29805:               if (stack[currentPtr]->group == NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6) {
29805: 
29805:                 pop();
29805:               }
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_FIELDSET: {
29805:               implicitlyCloseP();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_PRE_OR_LISTING: {
29805:               implicitlyCloseP();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               needToDropLF = PR_TRUE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_FORM: {
41449:               if (formPointer) {
41449: 
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               } else {
29805:                 implicitlyCloseP();
29805:                 appendToCurrentNodeAndPushFormElementMayFoster(attributes);
34978:                 attributes = nsnull;
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               }
29805:             }
29805:             case NS_HTML5TREE_BUILDER_LI:
29805:             case NS_HTML5TREE_BUILDER_DD_OR_DT: {
29805:               eltPos = currentPtr;
29805:               for (; ; ) {
29805:                 nsHtml5StackNode* node = stack[eltPos];
29805:                 if (node->group == group) {
29805:                   generateImpliedEndTagsExceptFor(node->name);
41449: 
29805:                   while (currentPtr >= eltPos) {
29805:                     pop();
29805:                   }
29805:                   break;
29805:                 } else if (node->scoping || (node->special && node->name != nsHtml5Atoms::p && node->name != nsHtml5Atoms::address && node->name != nsHtml5Atoms::div)) {
29805:                   break;
29805:                 }
29805:                 eltPos--;
29805:               }
29805:               implicitlyCloseP();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_PLAINTEXT: {
29805:               implicitlyCloseP();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_PLAINTEXT, elementName);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_A: {
29805:               PRInt32 activeAPos = findInListOfActiveFormattingElementsContainsBetweenEndAndLastMarker(nsHtml5Atoms::a);
29805:               if (activeAPos != -1) {
29805: 
29805:                 nsHtml5StackNode* activeA = listOfActiveFormattingElements[activeAPos];
29805:                 activeA->retain();
29805:                 adoptionAgencyEndTag(nsHtml5Atoms::a);
29805:                 removeFromStack(activeA);
29805:                 activeAPos = findInListOfActiveFormattingElements(activeA);
29805:                 if (activeAPos != -1) {
29805:                   removeFromListOfActiveFormattingElements(activeAPos);
29805:                 }
29805:                 activeA->release();
29805:               }
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushFormattingElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_B_OR_BIG_OR_CODE_OR_EM_OR_I_OR_S_OR_SMALL_OR_STRIKE_OR_STRONG_OR_TT_OR_U:
29805:             case NS_HTML5TREE_BUILDER_FONT: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushFormattingElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_NOBR: {
29805:               reconstructTheActiveFormattingElements();
29805:               if (NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK != findLastInScope(nsHtml5Atoms::nobr)) {
29805: 
29805:                 adoptionAgencyEndTag(nsHtml5Atoms::nobr);
29805:               }
29805:               appendToCurrentNodeAndPushFormattingElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BUTTON: {
29805:               eltPos = findLastInScope(name);
29805:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
29805:                 generateImpliedEndTags();
41449: 
29805:                 while (currentPtr >= eltPos) {
29805:                   pop();
29805:                 }
41449:                 NS_HTML5_CONTINUE(starttagloop);
29805:               } else {
29805:                 reconstructTheActiveFormattingElements();
29805:                 appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
34978:                 attributes = nsnull;
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               }
29805:             }
29805:             case NS_HTML5TREE_BUILDER_OBJECT: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
29805:               insertMarker();
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_MARQUEE_OR_APPLET: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               insertMarker();
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805:               if (!quirks) {
29805:                 implicitlyCloseP();
29805:               }
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BR:
29805:             case NS_HTML5TREE_BUILDER_EMBED_OR_IMG:
29805:             case NS_HTML5TREE_BUILDER_AREA_OR_BASEFONT_OR_BGSOUND_OR_SPACER_OR_WBR: {
29805:               reconstructTheActiveFormattingElements();
29805:             }
29805:             case NS_HTML5TREE_BUILDER_PARAM_OR_SOURCE: {
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               selfClosing = PR_FALSE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_HR: {
29805:               implicitlyCloseP();
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               selfClosing = PR_FALSE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_IMAGE: {
29805: 
29845:               elementName = nsHtml5ElementName::ELT_IMG;
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_KEYGEN:
29805:             case NS_HTML5TREE_BUILDER_INPUT: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, name, attributes, formPointer);
29805:               selfClosing = PR_FALSE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_ISINDEX: {
29805: 
41449:               if (formPointer) {
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               }
29805:               implicitlyCloseP();
29805:               nsHtml5HtmlAttributes* formAttrs = new nsHtml5HtmlAttributes(0);
29845:               PRInt32 actionIndex = attributes->getIndex(nsHtml5AttributeName::ATTR_ACTION);
29805:               if (actionIndex > -1) {
29845:                 formAttrs->addAttribute(nsHtml5AttributeName::ATTR_ACTION, attributes->getValue(actionIndex));
29805:               }
29805:               appendToCurrentNodeAndPushFormElementMayFoster(formAttrs);
29845:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HR, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29845:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_LABEL, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29845:               PRInt32 promptIndex = attributes->getIndex(nsHtml5AttributeName::ATTR_PROMPT);
29805:               if (promptIndex > -1) {
29805:                 jArray<PRUnichar,PRInt32> prompt = nsHtml5Portability::newCharArrayFromString(attributes->getValue(promptIndex));
29805:                 appendCharacters(stack[currentPtr]->node, prompt, 0, prompt.length);
29805:                 prompt.release();
29805:               } else {
29805:                 appendCharacters(stack[currentPtr]->node, nsHtml5TreeBuilder::ISINDEX_PROMPT, 0, nsHtml5TreeBuilder::ISINDEX_PROMPT.length);
29805:               }
29805:               nsHtml5HtmlAttributes* inputAttributes = new nsHtml5HtmlAttributes(0);
29845:               inputAttributes->addAttribute(nsHtml5AttributeName::ATTR_NAME, nsHtml5Portability::newStringFromLiteral("isindex"));
29805:               for (PRInt32 i = 0; i < attributes->getLength(); i++) {
29805:                 nsHtml5AttributeName* attributeQName = attributes->getAttributeName(i);
30007:                 if (nsHtml5AttributeName::ATTR_NAME == attributeQName || nsHtml5AttributeName::ATTR_PROMPT == attributeQName) {
30007:                   attributes->releaseValue(i);
30007:                 } else if (nsHtml5AttributeName::ATTR_ACTION != attributeQName) {
29805:                   inputAttributes->addAttribute(attributeQName, attributes->getValue(i));
29805:                 }
29805:               }
29805:               attributes->clearWithoutReleasingContents();
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, nsHtml5Atoms::input, inputAttributes, formPointer);
29805:               pop();
29845:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HR, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:               pop();
29805:               selfClosing = PR_FALSE;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TEXTAREA: {
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RCDATA, elementName);
29805:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
29805:               needToDropLF = PR_TRUE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
35594:             case NS_HTML5TREE_BUILDER_XMP: {
35594:               implicitlyCloseP();
35594:               reconstructTheActiveFormattingElements();
35594:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
35594:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
35594:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
35594:             }
29805:             case NS_HTML5TREE_BUILDER_NOSCRIPT: {
29805:               if (!scriptingEnabled) {
29805:                 reconstructTheActiveFormattingElements();
29805:                 appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:                 attributes = nsnull;
41449:                 NS_HTML5_BREAK(starttagloop);
29805:               } else {
29805:               }
29805:             }
29805:             case NS_HTML5TREE_BUILDER_NOFRAMES:
29805:             case NS_HTML5TREE_BUILDER_IFRAME:
29805:             case NS_HTML5TREE_BUILDER_NOEMBED: {
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_SELECT: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
29805:               switch(mode) {
29805:                 case NS_HTML5TREE_BUILDER_IN_TABLE:
29805:                 case NS_HTML5TREE_BUILDER_IN_CAPTION:
29805:                 case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP:
29805:                 case NS_HTML5TREE_BUILDER_IN_TABLE_BODY:
29805:                 case NS_HTML5TREE_BUILDER_IN_ROW:
29805:                 case NS_HTML5TREE_BUILDER_IN_CELL: {
29805:                   mode = NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE;
29805:                   break;
29805:                 }
29805:                 default: {
29805:                   mode = NS_HTML5TREE_BUILDER_IN_SELECT;
29805:                   break;
29805:                 }
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_OPTGROUP:
29805:             case NS_HTML5TREE_BUILDER_OPTION: {
29805:               if (findLastInScope(nsHtml5Atoms::option) != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 for (; ; ) {
29805:                   if (isCurrent(nsHtml5Atoms::option)) {
29805:                     pop();
41449:                     NS_HTML5_BREAK(optionendtagloop);
29805:                   }
29805:                   eltPos = currentPtr;
29805:                   for (; ; ) {
29805:                     if (stack[eltPos]->name == nsHtml5Atoms::option) {
29805:                       generateImpliedEndTags();
41449: 
29805:                       while (currentPtr >= eltPos) {
29805:                         pop();
29805:                       }
41449:                       NS_HTML5_BREAK(optionendtagloop);
29805:                     }
29805:                     eltPos--;
29805:                   }
29805:                 }
29805:                 optionendtagloop_end: ;
29805:               }
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_RT_OR_RP: {
29805:               eltPos = findLastInScope(nsHtml5Atoms::ruby);
29805:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 generateImpliedEndTags();
29805:               }
29805:               if (eltPos != currentPtr) {
29805: 
29805:                 while (currentPtr > eltPos) {
29805:                   pop();
29805:                 }
29805:               }
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_MATH: {
29805:               reconstructTheActiveFormattingElements();
29805:               attributes->adjustForMath();
29805:               if (selfClosing) {
29805:                 appendVoidElementToCurrentMayFoster(kNameSpaceID_MathML, elementName, attributes);
29805:                 selfClosing = PR_FALSE;
29805:               } else {
29805:                 appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_MathML, elementName, attributes);
41449:                 inForeign = PR_TRUE;
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_SVG: {
29805:               reconstructTheActiveFormattingElements();
29805:               attributes->adjustForSvg();
29805:               if (selfClosing) {
29805:                 appendVoidElementToCurrentMayFosterCamelCase(kNameSpaceID_SVG, elementName, attributes);
29805:                 selfClosing = PR_FALSE;
29805:               } else {
29805:                 appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_SVG, elementName, attributes);
41449:                 inForeign = PR_TRUE;
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:             case NS_HTML5TREE_BUILDER_TR:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH:
29805:             case NS_HTML5TREE_BUILDER_FRAME:
29805:             case NS_HTML5TREE_BUILDER_FRAMESET:
29805:             case NS_HTML5TREE_BUILDER_HEAD: {
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_OUTPUT_OR_LABEL: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes, formPointer);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             default: {
29805:               reconstructTheActiveFormattingElements();
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:           }
29805:         }
29805:         inbodyloop_end: ;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_HEAD: {
29805:         for (; ; ) {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:               addAttributesToHtml(attributes);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BASE:
35594:             case NS_HTML5TREE_BUILDER_COMMAND: {
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               selfClosing = PR_FALSE;
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_META:
29805:             case NS_HTML5TREE_BUILDER_LINK: {
41449:               NS_HTML5_BREAK(inheadloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TITLE: {
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RCDATA, elementName);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_NOSCRIPT: {
29805:               if (scriptingEnabled) {
29805:                 appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:                 originalMode = mode;
35594:                 mode = NS_HTML5TREE_BUILDER_TEXT;
40985:                 tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
29805:               } else {
29805:                 appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:                 mode = NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT;
29805:               }
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
35595:             case NS_HTML5TREE_BUILDER_SCRIPT: {
35595:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
35595:               originalMode = mode;
35595:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, elementName);
35595:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
35595:             }
29805:             case NS_HTML5TREE_BUILDER_STYLE:
29805:             case NS_HTML5TREE_BUILDER_NOFRAMES: {
29805:               appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:               originalMode = mode;
35594:               mode = NS_HTML5TREE_BUILDER_TEXT;
40985:               tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:               attributes = nsnull;
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_HEAD: {
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             default: {
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
41449:               NS_HTML5_CONTINUE(starttagloop);
29805:             }
29805:           }
29805:         }
29805:         inheadloop_end: ;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_LINK: {
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_META: {
29805:             checkMetaCharset(attributes);
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_STYLE:
29805:           case NS_HTML5TREE_BUILDER_NOFRAMES: {
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_HEAD: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_NOSCRIPT: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
29805:             pop();
29805:             mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_COL: {
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805:             if (!currentPtr) {
29805: 
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:             pop();
29805:             mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_CAPTION:
29805:           case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:           case NS_HTML5TREE_BUILDER_TR:
29805:           case NS_HTML5TREE_BUILDER_TD_OR_TH:
29805:           case NS_HTML5TREE_BUILDER_TABLE: {
29805: 
35594:             eltPos = findLastInTableScope(nsHtml5Atoms::select);
35594:             if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594: 
41449:               NS_HTML5_BREAK(starttagloop);
35594:             }
35594:             while (currentPtr >= eltPos) {
35594:               pop();
35594:             }
35594:             resetTheInsertionMode();
29805:             continue;
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_SELECT: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_OPTION: {
29805:             if (isCurrent(nsHtml5Atoms::option)) {
29805:               pop();
29805:             }
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_OPTGROUP: {
29805:             if (isCurrent(nsHtml5Atoms::option)) {
29805:               pop();
29805:             }
29805:             if (isCurrent(nsHtml5Atoms::optgroup)) {
29805:               pop();
29805:             }
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_SELECT: {
29805: 
29805:             eltPos = findLastInTableScope(name);
29805:             if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
29805: 
41449:               NS_HTML5_BREAK(starttagloop);
29805:             } else {
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               resetTheInsertionMode();
41449:               NS_HTML5_BREAK(starttagloop);
29805:             }
29805:           }
29805:           case NS_HTML5TREE_BUILDER_INPUT:
35594:           case NS_HTML5TREE_BUILDER_TEXTAREA:
35594:           case NS_HTML5TREE_BUILDER_KEYGEN: {
35594: 
35594:             eltPos = findLastInTableScope(nsHtml5Atoms::select);
35594:             if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594: 
41449:               NS_HTML5_BREAK(starttagloop);
35594:             }
35594:             while (currentPtr >= eltPos) {
35594:               pop();
35594:             }
35594:             resetTheInsertionMode();
29805:             continue;
29805:           }
29805:           case NS_HTML5TREE_BUILDER_SCRIPT: {
29805:             appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_BODY: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
36587:             mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_IN_FRAMESET: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_FRAMESET: {
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_FRAME: {
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default:
29805:             ; // fall through
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_FRAMESET: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_NOFRAMES: {
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_INITIAL: {
29805:         documentModeInternal(QUIRKS_MODE, nsnull, nsnull, PR_FALSE);
29805:         mode = NS_HTML5TREE_BUILDER_BEFORE_HTML;
29805:         continue;
29805:       }
29805:       case NS_HTML5TREE_BUILDER_BEFORE_HTML: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805:             if (attributes == nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES) {
29805:               appendHtmlElementToDocumentAndPush();
29805:             } else {
29805:               appendHtmlElementToDocumentAndPush(attributes);
29805:             }
29805:             mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805:             appendHtmlElementToDocumentAndPush();
29805:             mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_BEFORE_HEAD: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_HEAD: {
29805:             appendToCurrentNodeAndPushHeadElement(attributes);
29805:             mode = NS_HTML5TREE_BUILDER_IN_HEAD;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805:             appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:             mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_HEAD: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_BODY: {
29805:             if (!attributes->getLength()) {
29805:               appendToCurrentNodeAndPushBodyElement();
29805:             } else {
29805:               appendToCurrentNodeAndPushBodyElement(attributes);
29805:             }
36587:             framesetOk = PR_FALSE;
35594:             mode = NS_HTML5TREE_BUILDER_IN_BODY;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_FRAMESET: {
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             mode = NS_HTML5TREE_BUILDER_IN_FRAMESET;
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_BASE: {
29805: 
29805:             pushHeadPointerOntoStack();
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
29805:             pop();
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_LINK: {
29805: 
29805:             pushHeadPointerOntoStack();
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
29805:             pop();
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_META: {
29805: 
29805:             checkMetaCharset(attributes);
29805:             pushHeadPointerOntoStack();
29805:             appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             selfClosing = PR_FALSE;
29805:             pop();
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_SCRIPT: {
29805: 
29805:             pushHeadPointerOntoStack();
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_STYLE:
29805:           case NS_HTML5TREE_BUILDER_NOFRAMES: {
29805: 
29805:             pushHeadPointerOntoStack();
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RAWTEXT, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_TITLE: {
29805: 
29805:             pushHeadPointerOntoStack();
29805:             appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_RCDATA, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           case NS_HTML5TREE_BUILDER_HEAD: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805:             appendToCurrentNodeAndPushBodyElement();
29805:             mode = NS_HTML5TREE_BUILDER_FRAMESET_OK;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_HTML: {
29805: 
29805:             addAttributesToHtml(attributes);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
29805: 
36587:             mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET: {
29805:         switch(group) {
29805:           case NS_HTML5TREE_BUILDER_NOFRAMES: {
29805:             appendToCurrentNodeAndPushElementMayFoster(kNameSpaceID_XHTML, elementName, attributes);
29805:             originalMode = mode;
35594:             mode = NS_HTML5TREE_BUILDER_TEXT;
40985:             tokenizer->setStateAndEndTagExpectation(NS_HTML5TOKENIZER_SCRIPT_DATA, elementName);
34978:             attributes = nsnull;
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:           default: {
29805: 
41449:             NS_HTML5_BREAK(starttagloop);
29805:           }
29805:         }
29805:       }
39348:       case NS_HTML5TREE_BUILDER_TEXT: {
39348: 
41449:         NS_HTML5_BREAK(starttagloop);
29805:       }
29805:     }
29805:   }
29805:   starttagloop_end: ;
41449:   if (needsPostProcessing && inForeign && !hasForeignInScope()) {
41449:     inForeign = PR_FALSE;
41449:   }
41449: 
34978:   if (attributes != nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES) {
34978:     delete attributes;
34978:   }
29805: }
29805: 
29805: nsString* 
29805: nsHtml5TreeBuilder::extractCharsetFromContent(nsString* attributeValue)
29805: {
29805:   PRInt32 charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:   PRInt32 start = -1;
29805:   PRInt32 end = -1;
29805:   jArray<PRUnichar,PRInt32> buffer = nsHtml5Portability::newCharArrayFromString(attributeValue);
29805:   for (PRInt32 i = 0; i < buffer.length; i++) {
29805:     PRUnichar c = buffer[i];
29805:     switch(charsetState) {
29805:       case NS_HTML5TREE_BUILDER_CHARSET_INITIAL: {
29805:         switch(c) {
29805:           case 'c':
29805:           case 'C': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_C;
29805:             continue;
29805:           }
29805:           default: {
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_C: {
29805:         switch(c) {
29805:           case 'h':
29805:           case 'H': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_H;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_H: {
29805:         switch(c) {
29805:           case 'a':
29805:           case 'A': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_A;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_A: {
29805:         switch(c) {
29805:           case 'r':
29805:           case 'R': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_R;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_R: {
29805:         switch(c) {
29805:           case 's':
29805:           case 'S': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_S;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_S: {
29805:         switch(c) {
29805:           case 'e':
29805:           case 'E': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_E;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_E: {
29805:         switch(c) {
29805:           case 't':
29805:           case 'T': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_T;
29805:             continue;
29805:           }
29805:           default: {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_INITIAL;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_T: {
29805:         switch(c) {
29805:           case '\t':
29805:           case '\n':
29805:           case '\f':
29805:           case '\r':
29805:           case ' ': {
29805:             continue;
29805:           }
29805:           case '=': {
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_EQUALS;
29805:             continue;
29805:           }
29805:           default: {
29805:             return nsnull;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_EQUALS: {
29805:         switch(c) {
29805:           case '\t':
29805:           case '\n':
29805:           case '\f':
29805:           case '\r':
29805:           case ' ': {
29805:             continue;
29805:           }
29805:           case '\'': {
29805:             start = i + 1;
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_SINGLE_QUOTED;
29805:             continue;
29805:           }
29805:           case '\"': {
29805:             start = i + 1;
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_DOUBLE_QUOTED;
29805:             continue;
29805:           }
29805:           default: {
29805:             start = i;
29805:             charsetState = NS_HTML5TREE_BUILDER_CHARSET_UNQUOTED;
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_SINGLE_QUOTED: {
29805:         switch(c) {
29805:           case '\'': {
29805:             end = i;
41449:             NS_HTML5_BREAK(charsetloop);
29805:           }
29805:           default: {
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_DOUBLE_QUOTED: {
29805:         switch(c) {
29805:           case '\"': {
29805:             end = i;
41449:             NS_HTML5_BREAK(charsetloop);
29805:           }
29805:           default: {
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:       case NS_HTML5TREE_BUILDER_CHARSET_UNQUOTED: {
29805:         switch(c) {
29805:           case '\t':
29805:           case '\n':
29805:           case '\f':
29805:           case '\r':
29805:           case ' ':
29805:           case ';': {
29805:             end = i;
41449:             NS_HTML5_BREAK(charsetloop);
29805:           }
29805:           default: {
29805:             continue;
29805:           }
29805:         }
29805:       }
29805:     }
29805:   }
29805:   charsetloop_end: ;
30334:   nsString* charset = nsnull;
29805:   if (start != -1) {
29805:     if (end == -1) {
29805:       end = buffer.length;
29805:     }
30334:     charset = nsHtml5Portability::newStringFromBuffer(buffer, start, end - start);
29805:   }
29805:   buffer.release();
30334:   return charset;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::checkMetaCharset(nsHtml5HtmlAttributes* attributes)
29805: {
29845:   nsString* content = attributes->getValue(nsHtml5AttributeName::ATTR_CONTENT);
29805:   nsString* internalCharsetLegacy = nsnull;
41449:   if (content) {
29805:     internalCharsetLegacy = nsHtml5TreeBuilder::extractCharsetFromContent(content);
29805:   }
29805:   if (!internalCharsetLegacy) {
29845:     nsString* internalCharsetHtml5 = attributes->getValue(nsHtml5AttributeName::ATTR_CHARSET);
41449:     if (internalCharsetHtml5) {
29805:       tokenizer->internalEncodingDeclaration(internalCharsetHtml5);
29805:       requestSuspension();
29805:     }
29805:   } else {
29805:     tokenizer->internalEncodingDeclaration(internalCharsetLegacy);
29805:     nsHtml5Portability::releaseString(internalCharsetLegacy);
29805:     requestSuspension();
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::endTag(nsHtml5ElementName* elementName)
29805: {
29805:   needToDropLF = PR_FALSE;
29805:   PRInt32 eltPos;
42863:   PRInt32 eltPosForeign;
29805:   PRInt32 group = elementName->group;
29805:   nsIAtom* name = elementName->name;
42863: 
42863:   if (inForeign && stack[currentPtr]->ns != kNameSpaceID_XHTML) {
42863:     eltPosForeign = currentPtr;
42863:   } else {
42863:     eltPosForeign = -1;
42863:   }
42863:   inforeignloop: for (; ; ) {
42863:     if (eltPosForeign != -1) {
42863:       if (currentPtr >= eltPosForeign && stack[eltPosForeign]->name == name) {
42863:         while (currentPtr >= eltPosForeign) {
42863:           pop();
42863:         }
42863:         return;
42863:       }
42863:       if (--eltPosForeign > currentPtr) {
42863:         NS_HTML5_CONTINUE(inforeignloop);
42863:       }
42863:       if (eltPosForeign == -1) {
42863:         return;
42863:       }
42863:       if (stack[eltPosForeign]->ns != kNameSpaceID_XHTML) {
42863:         NS_HTML5_CONTINUE(inforeignloop);
42863:       }
42863:     }
42863:     for (; ; ) {
29805:       switch(mode) {
29805:         case NS_HTML5TREE_BUILDER_IN_ROW: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_TR: {
29805:               eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TR);
29805:               if (!eltPos) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805:               eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TR);
29805:               if (!eltPos) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT: {
29805:               if (findLastInTableScope(name) == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TR);
29805:               if (!eltPos) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_TABLE_BODY: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT: {
29805:               eltPos = findLastOrRoot(name);
29805:               if (!eltPos) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805:               eltPos = findLastInTableScopeOrRootTbodyTheadTfoot();
29805:               if (!eltPos) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               clearStackBackTo(eltPos);
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH:
29805:             case NS_HTML5TREE_BUILDER_TR: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_TABLE: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805:               eltPos = findLast(nsHtml5Atoms::table);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               resetTheInsertionMode();
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH:
29805:             case NS_HTML5TREE_BUILDER_TR: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_CAPTION: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_CAPTION: {
29805:               eltPos = findLastInTableScope(nsHtml5Atoms::caption);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               generateImpliedEndTags();
41449: 
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE: {
29805: 
29805:               eltPos = findLastInTableScope(nsHtml5Atoms::caption);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               generateImpliedEndTags();
41449: 
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH:
29805:             case NS_HTML5TREE_BUILDER_TR: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_CELL: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805:               eltPos = findLastInTableScope(name);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               generateImpliedEndTags();
41449: 
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
29805:               clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:               mode = NS_HTML5TREE_BUILDER_IN_ROW;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_TABLE:
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:             case NS_HTML5TREE_BUILDER_TR: {
29805:               if (findLastInTableScope(name) == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               closeTheCell(findLastInTableScopeTdTh());
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_COL:
29805:             case NS_HTML5TREE_BUILDER_COLGROUP:
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_FRAMESET_OK:
29805:         case NS_HTML5TREE_BUILDER_IN_BODY: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_BODY: {
29805:               if (!isSecondOnStackBody()) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805: 
29805: 
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_BODY;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805:               if (!isSecondOnStackBody()) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805: 
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_BODY;
29805:               continue;
29805:             }
29805:             case NS_HTML5TREE_BUILDER_DIV_OR_BLOCKQUOTE_OR_CENTER_OR_MENU:
29805:             case NS_HTML5TREE_BUILDER_UL_OR_OL_OR_DL:
29805:             case NS_HTML5TREE_BUILDER_PRE_OR_LISTING:
29805:             case NS_HTML5TREE_BUILDER_FIELDSET:
40920:             case NS_HTML5TREE_BUILDER_BUTTON:
35594:             case NS_HTML5TREE_BUILDER_ADDRESS_OR_DIR_OR_ARTICLE_OR_ASIDE_OR_DATAGRID_OR_DETAILS_OR_HGROUP_OR_FIGURE_OR_FOOTER_OR_HEADER_OR_NAV_OR_SECTION: {
29805:               eltPos = findLastInScope(name);
41449:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 generateImpliedEndTags();
41449: 
29805:                 while (currentPtr >= eltPos) {
29805:                   pop();
29805:                 }
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_FORM: {
29805:               if (!formPointer) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
34979:               ;
29805:               formPointer = nsnull;
29805:               eltPos = findLastInScope(name);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               generateImpliedEndTags();
41449: 
29805:               removeFromStack(eltPos);
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_P: {
29805:               eltPos = findLastInScope(nsHtml5Atoms::p);
29805:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805: 
41449:                 if (inForeign) {
29805: 
29805:                   while (stack[currentPtr]->ns != kNameSpaceID_XHTML) {
29805:                     pop();
29805:                   }
41449:                   inForeign = PR_FALSE;
29805:                 }
29805:                 appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               generateImpliedEndTagsExceptFor(nsHtml5Atoms::p);
29805: 
41449: 
29805:               while (currentPtr >= eltPos) {
29805:                 pop();
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_LI: {
35594:               eltPos = findLastInListScope(name);
41449:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594:                 generateImpliedEndTagsExceptFor(name);
41449: 
35594:                 while (currentPtr >= eltPos) {
35594:                   pop();
35594:                 }
35594:               }
41449:               NS_HTML5_BREAK(endtagloop);
35594:             }
35594:             case NS_HTML5TREE_BUILDER_DD_OR_DT: {
29805:               eltPos = findLastInScope(name);
41449:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 generateImpliedEndTagsExceptFor(name);
41449: 
29805:                 while (currentPtr >= eltPos) {
29805:                   pop();
29805:                 }
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6: {
29805:               eltPos = findLastInScopeHn();
41449:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 generateImpliedEndTags();
41449: 
29805:                 while (currentPtr >= eltPos) {
29805:                   pop();
29805:                 }
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_A:
29805:             case NS_HTML5TREE_BUILDER_B_OR_BIG_OR_CODE_OR_EM_OR_I_OR_S_OR_SMALL_OR_STRIKE_OR_STRONG_OR_TT_OR_U:
29805:             case NS_HTML5TREE_BUILDER_FONT:
29805:             case NS_HTML5TREE_BUILDER_NOBR: {
29805:               adoptionAgencyEndTag(name);
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_OBJECT:
29805:             case NS_HTML5TREE_BUILDER_MARQUEE_OR_APPLET: {
29805:               eltPos = findLastInScope(name);
41449:               if (eltPos != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:                 generateImpliedEndTags();
41449: 
29805:                 while (currentPtr >= eltPos) {
29805:                   pop();
29805:                 }
29805:                 clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BR: {
29805: 
41449:               if (inForeign) {
29805: 
29805:                 while (stack[currentPtr]->ns != kNameSpaceID_XHTML) {
29805:                   pop();
29805:                 }
41449:                 inForeign = PR_FALSE;
29805:               }
29805:               reconstructTheActiveFormattingElements();
29805:               appendVoidElementToCurrentMayFoster(kNameSpaceID_XHTML, elementName, nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_AREA_OR_BASEFONT_OR_BGSOUND_OR_SPACER_OR_WBR:
29805:             case NS_HTML5TREE_BUILDER_PARAM_OR_SOURCE:
29805:             case NS_HTML5TREE_BUILDER_EMBED_OR_IMG:
29805:             case NS_HTML5TREE_BUILDER_IMAGE:
29805:             case NS_HTML5TREE_BUILDER_INPUT:
29805:             case NS_HTML5TREE_BUILDER_KEYGEN:
29805:             case NS_HTML5TREE_BUILDER_HR:
29805:             case NS_HTML5TREE_BUILDER_ISINDEX:
29805:             case NS_HTML5TREE_BUILDER_IFRAME:
29805:             case NS_HTML5TREE_BUILDER_NOEMBED:
29805:             case NS_HTML5TREE_BUILDER_NOFRAMES:
29805:             case NS_HTML5TREE_BUILDER_SELECT:
29805:             case NS_HTML5TREE_BUILDER_TABLE:
29805:             case NS_HTML5TREE_BUILDER_TEXTAREA: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_NOSCRIPT: {
29805:               if (scriptingEnabled) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               } else {
29805:               }
29805:             }
29805:             default: {
29805:               if (isCurrent(name)) {
29805:                 pop();
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               eltPos = currentPtr;
29805:               for (; ; ) {
29805:                 nsHtml5StackNode* node = stack[eltPos];
29805:                 if (node->name == name) {
29805:                   generateImpliedEndTags();
41449: 
29805:                   while (currentPtr >= eltPos) {
29805:                     pop();
29805:                   }
41449:                   NS_HTML5_BREAK(endtagloop);
29805:                 } else if (node->scoping || node->special) {
29805: 
41449:                   NS_HTML5_BREAK(endtagloop);
29805:                 }
29805:                 eltPos--;
29805:               }
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_COLGROUP: {
29805:               if (!currentPtr) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_COL: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default: {
29805:               if (!currentPtr) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:               continue;
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_SELECT_IN_TABLE: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_CAPTION:
29805:             case NS_HTML5TREE_BUILDER_TABLE:
29805:             case NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT:
29805:             case NS_HTML5TREE_BUILDER_TR:
29805:             case NS_HTML5TREE_BUILDER_TD_OR_TH: {
29805: 
29805:               if (findLastInTableScope(name) != NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594:                 eltPos = findLastInTableScope(nsHtml5Atoms::select);
35594:                 if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594: 
41449:                   NS_HTML5_BREAK(endtagloop);
35594:                 }
35594:                 while (currentPtr >= eltPos) {
35594:                   pop();
35594:                 }
35594:                 resetTheInsertionMode();
29805:                 continue;
29805:               } else {
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:             }
29805:             default:
29805:               ; // fall through
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_SELECT: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_OPTION: {
29805:               if (isCurrent(nsHtml5Atoms::option)) {
29805:                 pop();
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               } else {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:             }
29805:             case NS_HTML5TREE_BUILDER_OPTGROUP: {
29805:               if (isCurrent(nsHtml5Atoms::option) && nsHtml5Atoms::optgroup == stack[currentPtr - 1]->name) {
29805:                 pop();
29805:               }
29805:               if (isCurrent(nsHtml5Atoms::optgroup)) {
29805:                 pop();
41449:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_SELECT: {
35594:               eltPos = findLastInTableScope(nsHtml5Atoms::select);
35594:               if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
35594: 
35594: 
41449:                 NS_HTML5_BREAK(endtagloop);
35594:               }
35594:               while (currentPtr >= eltPos) {
35594:                 pop();
35594:               }
35594:               resetTheInsertionMode();
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_AFTER_BODY: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805:               if (fragment) {
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               } else {
29805:                 mode = NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY;
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:             }
29805:             default: {
29805: 
36587:               mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:               continue;
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_FRAMESET: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_FRAMESET: {
29805:               if (!currentPtr) {
29805: 
29805: 
41449:                 NS_HTML5_BREAK(endtagloop);
29805:               }
29805:               pop();
29805:               if ((!fragment) && !isCurrent(nsHtml5Atoms::frameset)) {
29805:                 mode = NS_HTML5TREE_BUILDER_AFTER_FRAMESET;
29805:               }
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_AFTER_FRAMESET: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HTML: {
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_INITIAL: {
29805:           documentModeInternal(QUIRKS_MODE, nsnull, nsnull, PR_FALSE);
29805:           mode = NS_HTML5TREE_BUILDER_BEFORE_HTML;
29805:           continue;
29805:         }
29805:         case NS_HTML5TREE_BUILDER_BEFORE_HTML: {
35594:           switch(group) {
35594:             case NS_HTML5TREE_BUILDER_HEAD:
35594:             case NS_HTML5TREE_BUILDER_BR:
35594:             case NS_HTML5TREE_BUILDER_HTML:
35594:             case NS_HTML5TREE_BUILDER_BODY: {
29805:               appendHtmlElementToDocumentAndPush();
29805:               mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
29805:               continue;
29805:             }
35594:             default: {
35594: 
41449:               NS_HTML5_BREAK(endtagloop);
35594:             }
35594:           }
35594:         }
29805:         case NS_HTML5TREE_BUILDER_BEFORE_HEAD: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HEAD:
29805:             case NS_HTML5TREE_BUILDER_BR:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_BODY: {
29805:               appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes::EMPTY_ATTRIBUTES);
29805:               mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:               continue;
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_HEAD: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HEAD: {
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BR:
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_BODY: {
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
29805:               continue;
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_IN_HEAD_NOSCRIPT: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_NOSCRIPT: {
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_HEAD;
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:             case NS_HTML5TREE_BUILDER_BR: {
29805: 
29805:               pop();
29805:               mode = NS_HTML5TREE_BUILDER_IN_HEAD;
29805:               continue;
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_AFTER_HEAD: {
29805:           switch(group) {
29805:             case NS_HTML5TREE_BUILDER_HTML:
29805:             case NS_HTML5TREE_BUILDER_BODY:
29805:             case NS_HTML5TREE_BUILDER_BR: {
29805:               appendToCurrentNodeAndPushBodyElement();
29805:               mode = NS_HTML5TREE_BUILDER_FRAMESET_OK;
29805:               continue;
29805:             }
29805:             default: {
29805: 
41449:               NS_HTML5_BREAK(endtagloop);
29805:             }
29805:           }
29805:         }
29805:         case NS_HTML5TREE_BUILDER_AFTER_AFTER_BODY: {
29805: 
36587:           mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:           continue;
29805:         }
29805:         case NS_HTML5TREE_BUILDER_AFTER_AFTER_FRAMESET: {
29805: 
29805:           mode = NS_HTML5TREE_BUILDER_IN_FRAMESET;
29805:           continue;
29805:         }
35594:         case NS_HTML5TREE_BUILDER_TEXT: {
35597:           pop();
29805:           if (originalMode == NS_HTML5TREE_BUILDER_AFTER_HEAD) {
35597:             silentPop();
35597:           }
29805:           mode = originalMode;
41449:           NS_HTML5_BREAK(endtagloop);
29805:         }
29805:       }
29805:     }
29805:     endtagloop_end: ;
41449:     if (inForeign && !hasForeignInScope()) {
41449:       inForeign = PR_FALSE;
29805:     }
42863:     if (eltPosForeign != -1) {
42863:       NS_HTML5_CONTINUE(inforeignloop);
42863:     }
42863:     return;
42863:   }
42863: 
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastInTableScopeOrRootTbodyTheadTfoot()
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->group == NS_HTML5TREE_BUILDER_TBODY_OR_THEAD_OR_TFOOT) {
29805:       return i;
29805:     }
29805:   }
29805:   return 0;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLast(nsIAtom* name)
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->name == name) {
29805:       return i;
29805:     }
29805:   }
29805:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastInTableScope(nsIAtom* name)
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->name == name) {
29805:       return i;
29805:     } else if (stack[i]->name == nsHtml5Atoms::table) {
29805:       return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805:     }
29805:   }
29805:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastInScope(nsIAtom* name)
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->name == name) {
29805:       return i;
29805:     } else if (stack[i]->scoping) {
29805:       return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805:     }
29805:   }
29805:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805: }
29805: 
29805: PRInt32 
35594: nsHtml5TreeBuilder::findLastInListScope(nsIAtom* name)
35594: {
35594:   for (PRInt32 i = currentPtr; i > 0; i--) {
35594:     if (stack[i]->name == name) {
35594:       return i;
35594:     } else if (stack[i]->scoping || stack[i]->name == nsHtml5Atoms::ul || stack[i]->name == nsHtml5Atoms::ol) {
35594:       return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
35594:     }
35594:   }
35594:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
35594: }
35594: 
35594: PRInt32 
29805: nsHtml5TreeBuilder::findLastInScopeHn()
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->group == NS_HTML5TREE_BUILDER_H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6) {
29805:       return i;
29805:     } else if (stack[i]->scoping) {
29805:       return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805:     }
29805:   }
29805:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::hasForeignInScope()
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->ns != kNameSpaceID_XHTML) {
29805:       return PR_TRUE;
29805:     } else if (stack[i]->scoping) {
29805:       return PR_FALSE;
29805:     }
29805:   }
29805:   return PR_FALSE;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::generateImpliedEndTagsExceptFor(nsIAtom* name)
29805: {
29805:   for (; ; ) {
29805:     nsHtml5StackNode* node = stack[currentPtr];
29805:     switch(node->group) {
29805:       case NS_HTML5TREE_BUILDER_P:
29805:       case NS_HTML5TREE_BUILDER_LI:
29805:       case NS_HTML5TREE_BUILDER_DD_OR_DT:
29805:       case NS_HTML5TREE_BUILDER_OPTION:
29805:       case NS_HTML5TREE_BUILDER_OPTGROUP:
29805:       case NS_HTML5TREE_BUILDER_RT_OR_RP: {
29805:         if (node->name == name) {
29805:           return;
29805:         }
29805:         pop();
29805:         continue;
29805:       }
29805:       default: {
29805:         return;
29805:       }
29805:     }
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::generateImpliedEndTags()
29805: {
29805:   for (; ; ) {
29805:     switch(stack[currentPtr]->group) {
29805:       case NS_HTML5TREE_BUILDER_P:
29805:       case NS_HTML5TREE_BUILDER_LI:
29805:       case NS_HTML5TREE_BUILDER_DD_OR_DT:
29805:       case NS_HTML5TREE_BUILDER_OPTION:
29805:       case NS_HTML5TREE_BUILDER_OPTGROUP:
29805:       case NS_HTML5TREE_BUILDER_RT_OR_RP: {
29805:         pop();
29805:         continue;
29805:       }
29805:       default: {
29805:         return;
29805:       }
29805:     }
29805:   }
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::isSecondOnStackBody()
29805: {
29805:   return currentPtr >= 1 && stack[1]->group == NS_HTML5TREE_BUILDER_BODY;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::documentModeInternal(nsHtml5DocumentMode m, nsString* publicIdentifier, nsString* systemIdentifier, PRBool html4SpecificAdditionalErrorChecks)
29805: {
29805:   quirks = (m == QUIRKS_MODE);
41449:   if (this) {
32917:     this->documentMode(m);
29805:   }
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::isAlmostStandards(nsString* publicIdentifier, nsString* systemIdentifier)
29805: {
29805:   if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd xhtml 1.0 transitional//en", publicIdentifier)) {
29805:     return PR_TRUE;
29805:   }
29805:   if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd xhtml 1.0 frameset//en", publicIdentifier)) {
29805:     return PR_TRUE;
29805:   }
41449:   if (systemIdentifier) {
29805:     if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd html 4.01 transitional//en", publicIdentifier)) {
29805:       return PR_TRUE;
29805:     }
29805:     if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd html 4.01 frameset//en", publicIdentifier)) {
29805:       return PR_TRUE;
29805:     }
29805:   }
29805:   return PR_FALSE;
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::isQuirky(nsIAtom* name, nsString* publicIdentifier, nsString* systemIdentifier, PRBool forceQuirks)
29805: {
29805:   if (forceQuirks) {
29805:     return PR_TRUE;
29805:   }
29805:   if (name != nsHtml5Atoms::html) {
29805:     return PR_TRUE;
29805:   }
41449:   if (publicIdentifier) {
29805:     for (PRInt32 i = 0; i < nsHtml5TreeBuilder::QUIRKY_PUBLIC_IDS.length; i++) {
29805:       if (nsHtml5Portability::lowerCaseLiteralIsPrefixOfIgnoreAsciiCaseString(nsHtml5TreeBuilder::QUIRKY_PUBLIC_IDS[i], publicIdentifier)) {
29805:         return PR_TRUE;
29805:       }
29805:     }
29805:     if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3o//dtd w3 html strict 3.0//en//", publicIdentifier) || nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-/w3c/dtd html 4.0 transitional/en", publicIdentifier) || nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("html", publicIdentifier)) {
29805:       return PR_TRUE;
29805:     }
29805:   }
29805:   if (!systemIdentifier) {
29805:     if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd html 4.01 transitional//en", publicIdentifier)) {
29805:       return PR_TRUE;
29805:     } else if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("-//w3c//dtd html 4.01 frameset//en", publicIdentifier)) {
29805:       return PR_TRUE;
29805:     }
29805:   } else if (nsHtml5Portability::lowerCaseLiteralEqualsIgnoreAsciiCaseString("http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", systemIdentifier)) {
29805:     return PR_TRUE;
29805:   }
29805:   return PR_FALSE;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::closeTheCell(PRInt32 eltPos)
29805: {
29805:   generateImpliedEndTags();
41449: 
29805:   while (currentPtr >= eltPos) {
29805:     pop();
29805:   }
29805:   clearTheListOfActiveFormattingElementsUpToTheLastMarker();
29805:   mode = NS_HTML5TREE_BUILDER_IN_ROW;
29805:   return;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastInTableScopeTdTh()
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     nsIAtom* name = stack[i]->name;
29805:     if (nsHtml5Atoms::td == name || nsHtml5Atoms::th == name) {
29805:       return i;
29805:     } else if (name == nsHtml5Atoms::table) {
29805:       return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805:     }
29805:   }
29805:   return NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::clearStackBackTo(PRInt32 eltPos)
29805: {
29805:   while (currentPtr > eltPos) {
29805:     pop();
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::resetTheInsertionMode()
29805: {
41449:   inForeign = PR_FALSE;
29805:   nsHtml5StackNode* node;
29805:   nsIAtom* name;
29805:   PRInt32 ns;
29805:   for (PRInt32 i = currentPtr; i >= 0; i--) {
29805:     node = stack[i];
29805:     name = node->name;
29805:     ns = node->ns;
29805:     if (!i) {
29805:       if (!(contextNamespace == kNameSpaceID_XHTML && (contextName == nsHtml5Atoms::td || contextName == nsHtml5Atoms::th))) {
29805:         name = contextName;
29805:         ns = contextNamespace;
29805:       } else {
36587:         mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:         return;
29805:       }
29805:     }
29805:     if (nsHtml5Atoms::select == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_SELECT;
29805:       return;
29805:     } else if (nsHtml5Atoms::td == name || nsHtml5Atoms::th == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_CELL;
29805:       return;
29805:     } else if (nsHtml5Atoms::tr == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_ROW;
29805:       return;
29805:     } else if (nsHtml5Atoms::tbody == name || nsHtml5Atoms::thead == name || nsHtml5Atoms::tfoot == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_TABLE_BODY;
29805:       return;
29805:     } else if (nsHtml5Atoms::caption == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_CAPTION;
29805:       return;
29805:     } else if (nsHtml5Atoms::colgroup == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_COLUMN_GROUP;
29805:       return;
29805:     } else if (nsHtml5Atoms::table == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_TABLE;
29805:       return;
36207:     } else if (kNameSpaceID_XHTML != ns) {
41449:       inForeign = PR_TRUE;
36587:       mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:       return;
29805:     } else if (nsHtml5Atoms::head == name) {
36587:       mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:       return;
29805:     } else if (nsHtml5Atoms::body == name) {
36587:       mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:       return;
29805:     } else if (nsHtml5Atoms::frameset == name) {
29805:       mode = NS_HTML5TREE_BUILDER_IN_FRAMESET;
29805:       return;
29805:     } else if (nsHtml5Atoms::html == name) {
29805:       if (!headPointer) {
29805:         mode = NS_HTML5TREE_BUILDER_BEFORE_HEAD;
29805:       } else {
29805:         mode = NS_HTML5TREE_BUILDER_AFTER_HEAD;
29805:       }
29805:       return;
29805:     } else if (!i) {
36587:       mode = framesetOk ? NS_HTML5TREE_BUILDER_FRAMESET_OK : NS_HTML5TREE_BUILDER_IN_BODY;
29805:       return;
29805:     }
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::implicitlyCloseP()
29805: {
29805:   PRInt32 eltPos = findLastInScope(nsHtml5Atoms::p);
29805:   if (eltPos == NS_HTML5TREE_BUILDER_NOT_FOUND_ON_STACK) {
29805:     return;
29805:   }
29805:   generateImpliedEndTagsExceptFor(nsHtml5Atoms::p);
41449: 
29805:   while (currentPtr >= eltPos) {
29805:     pop();
29805:   }
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::clearLastStackSlot()
29805: {
29805:   stack[currentPtr] = nsnull;
29805:   return PR_TRUE;
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::clearLastListSlot()
29805: {
29805:   listOfActiveFormattingElements[listPtr] = nsnull;
29805:   return PR_TRUE;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::push(nsHtml5StackNode* node)
29805: {
29805:   currentPtr++;
29805:   if (currentPtr == stack.length) {
29805:     jArray<nsHtml5StackNode*,PRInt32> newStack = jArray<nsHtml5StackNode*,PRInt32>(stack.length + 64);
29805:     nsHtml5ArrayCopy::arraycopy(stack, newStack, stack.length);
29805:     stack.release();
29805:     stack = newStack;
29805:   }
29805:   stack[currentPtr] = node;
29805:   elementPushed(node->ns, node->popName, node->node);
29805: }
29805: 
29805: void 
35597: nsHtml5TreeBuilder::silentPush(nsHtml5StackNode* node)
35597: {
35597:   currentPtr++;
35597:   if (currentPtr == stack.length) {
35597:     jArray<nsHtml5StackNode*,PRInt32> newStack = jArray<nsHtml5StackNode*,PRInt32>(stack.length + 64);
35597:     nsHtml5ArrayCopy::arraycopy(stack, newStack, stack.length);
35597:     stack.release();
35597:     stack = newStack;
35597:   }
35597:   stack[currentPtr] = node;
35597: }
35597: 
35597: void 
29805: nsHtml5TreeBuilder::append(nsHtml5StackNode* node)
29805: {
29805:   listPtr++;
29805:   if (listPtr == listOfActiveFormattingElements.length) {
29805:     jArray<nsHtml5StackNode*,PRInt32> newList = jArray<nsHtml5StackNode*,PRInt32>(listOfActiveFormattingElements.length + 64);
29805:     nsHtml5ArrayCopy::arraycopy(listOfActiveFormattingElements, newList, listOfActiveFormattingElements.length);
29805:     listOfActiveFormattingElements.release();
29805:     listOfActiveFormattingElements = newList;
29805:   }
29805:   listOfActiveFormattingElements[listPtr] = node;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::clearTheListOfActiveFormattingElementsUpToTheLastMarker()
29805: {
29805:   while (listPtr > -1) {
29805:     if (!listOfActiveFormattingElements[listPtr]) {
29805:       --listPtr;
29805:       return;
29805:     }
29805:     listOfActiveFormattingElements[listPtr]->release();
29805:     --listPtr;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::removeFromStack(PRInt32 pos)
29805: {
29805:   if (currentPtr == pos) {
29805:     pop();
29805:   } else {
29805: 
29805:     stack[pos]->release();
29805:     nsHtml5ArrayCopy::arraycopy(stack, pos + 1, pos, currentPtr - pos);
29805: 
29805:     currentPtr--;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::removeFromStack(nsHtml5StackNode* node)
29805: {
29805:   if (stack[currentPtr] == node) {
29805:     pop();
29805:   } else {
29805:     PRInt32 pos = currentPtr - 1;
29805:     while (pos >= 0 && stack[pos] != node) {
29805:       pos--;
29805:     }
29805:     if (pos == -1) {
29805:       return;
29805:     }
29805: 
29805:     node->release();
29805:     nsHtml5ArrayCopy::arraycopy(stack, pos + 1, pos, currentPtr - pos);
29805:     currentPtr--;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::removeFromListOfActiveFormattingElements(PRInt32 pos)
29805: {
29805: 
29805:   listOfActiveFormattingElements[pos]->release();
29805:   if (pos == listPtr) {
29805: 
29805:     listPtr--;
29805:     return;
29805:   }
29805: 
29805:   nsHtml5ArrayCopy::arraycopy(listOfActiveFormattingElements, pos + 1, pos, listPtr - pos);
29805: 
29805:   listPtr--;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::adoptionAgencyEndTag(nsIAtom* name)
29805: {
29805:   flushCharacters();
29805:   for (; ; ) {
29805:     PRInt32 formattingEltListPos = listPtr;
29805:     while (formattingEltListPos > -1) {
29805:       nsHtml5StackNode* listNode = listOfActiveFormattingElements[formattingEltListPos];
29805:       if (!listNode) {
29805:         formattingEltListPos = -1;
29805:         break;
29805:       } else if (listNode->name == name) {
29805:         break;
29805:       }
29805:       formattingEltListPos--;
29805:     }
29805:     if (formattingEltListPos == -1) {
29805: 
29805:       return;
29805:     }
29805:     nsHtml5StackNode* formattingElt = listOfActiveFormattingElements[formattingEltListPos];
29805:     PRInt32 formattingEltStackPos = currentPtr;
29805:     PRBool inScope = PR_TRUE;
29805:     while (formattingEltStackPos > -1) {
29805:       nsHtml5StackNode* node = stack[formattingEltStackPos];
29805:       if (node == formattingElt) {
29805:         break;
29805:       } else if (node->scoping) {
29805:         inScope = PR_FALSE;
29805:       }
29805:       formattingEltStackPos--;
29805:     }
29805:     if (formattingEltStackPos == -1) {
29805: 
29805:       removeFromListOfActiveFormattingElements(formattingEltListPos);
29805:       return;
29805:     }
29805:     if (!inScope) {
29805: 
29805:       return;
29805:     }
41449: 
29805:     PRInt32 furthestBlockPos = formattingEltStackPos + 1;
29805:     while (furthestBlockPos <= currentPtr) {
29805:       nsHtml5StackNode* node = stack[furthestBlockPos];
29805:       if (node->scoping || node->special) {
29805:         break;
29805:       }
29805:       furthestBlockPos++;
29805:     }
29805:     if (furthestBlockPos > currentPtr) {
29805:       while (currentPtr >= formattingEltStackPos) {
29805:         pop();
29805:       }
29805:       removeFromListOfActiveFormattingElements(formattingEltListPos);
29805:       return;
29805:     }
29805:     nsHtml5StackNode* commonAncestor = stack[formattingEltStackPos - 1];
29805:     nsHtml5StackNode* furthestBlock = stack[furthestBlockPos];
29805:     PRInt32 bookmark = formattingEltListPos;
29805:     PRInt32 nodePos = furthestBlockPos;
29805:     nsHtml5StackNode* lastNode = furthestBlock;
29805:     for (; ; ) {
29805:       nodePos--;
29805:       nsHtml5StackNode* node = stack[nodePos];
29805:       PRInt32 nodeListPos = findInListOfActiveFormattingElements(node);
29805:       if (nodeListPos == -1) {
29805: 
29805: 
29805: 
29805:         removeFromStack(nodePos);
29805:         furthestBlockPos--;
29805:         continue;
29805:       }
29805:       if (nodePos == formattingEltStackPos) {
29805:         break;
29805:       }
29805:       if (nodePos == furthestBlockPos) {
29805:         bookmark = nodeListPos + 1;
29805:       }
29805: 
29805: 
34979:       nsIContent** clone = createElement(kNameSpaceID_XHTML, node->name, node->attributes->cloneAttributes(nsnull));
32947:       nsHtml5StackNode* newNode = new nsHtml5StackNode(node->group, node->ns, node->name, clone, node->scoping, node->special, node->fosterParenting, node->popName, node->attributes);
32947:       node->dropAttributes();
29805:       stack[nodePos] = newNode;
29805:       newNode->retain();
29805:       listOfActiveFormattingElements[nodeListPos] = newNode;
29805:       node->release();
29805:       node->release();
29805:       node = newNode;
34979:       ;
29805:       detachFromParent(lastNode->node);
29805:       appendElement(lastNode->node, node->node);
29805:       lastNode = node;
29805:     }
29805:     if (commonAncestor->fosterParenting) {
29805: 
29805:       detachFromParent(lastNode->node);
29805:       insertIntoFosterParent(lastNode->node);
29805:     } else {
29805:       detachFromParent(lastNode->node);
29805:       appendElement(lastNode->node, commonAncestor->node);
29805:     }
34979:     nsIContent** clone = createElement(kNameSpaceID_XHTML, formattingElt->name, formattingElt->attributes->cloneAttributes(nsnull));
32947:     nsHtml5StackNode* formattingClone = new nsHtml5StackNode(formattingElt->group, formattingElt->ns, formattingElt->name, clone, formattingElt->scoping, formattingElt->special, formattingElt->fosterParenting, formattingElt->popName, formattingElt->attributes);
32947:     formattingElt->dropAttributes();
29805:     appendChildrenToNewParent(furthestBlock->node, clone);
29805:     appendElement(clone, furthestBlock->node);
29805:     removeFromListOfActiveFormattingElements(formattingEltListPos);
29805:     insertIntoListOfActiveFormattingElements(formattingClone, bookmark);
29805: 
29805:     removeFromStack(formattingEltStackPos);
29805:     insertIntoStack(formattingClone, furthestBlockPos);
34979:     ;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::insertIntoStack(nsHtml5StackNode* node, PRInt32 position)
29805: {
29805: 
29805: 
29805:   if (position == currentPtr + 1) {
29805:     flushCharacters();
29805:     push(node);
29805:   } else {
29805:     nsHtml5ArrayCopy::arraycopy(stack, position, position + 1, (currentPtr - position) + 1);
29805:     currentPtr++;
29805:     stack[position] = node;
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::insertIntoListOfActiveFormattingElements(nsHtml5StackNode* formattingClone, PRInt32 bookmark)
29805: {
29805:   formattingClone->retain();
29805: 
29805:   if (bookmark <= listPtr) {
29805:     nsHtml5ArrayCopy::arraycopy(listOfActiveFormattingElements, bookmark, bookmark + 1, (listPtr - bookmark) + 1);
29805:   }
29805:   listPtr++;
29805:   listOfActiveFormattingElements[bookmark] = formattingClone;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findInListOfActiveFormattingElements(nsHtml5StackNode* node)
29805: {
29805:   for (PRInt32 i = listPtr; i >= 0; i--) {
29805:     if (node == listOfActiveFormattingElements[i]) {
29805:       return i;
29805:     }
29805:   }
29805:   return -1;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findInListOfActiveFormattingElementsContainsBetweenEndAndLastMarker(nsIAtom* name)
29805: {
29805:   for (PRInt32 i = listPtr; i >= 0; i--) {
29805:     nsHtml5StackNode* node = listOfActiveFormattingElements[i];
29805:     if (!node) {
29805:       return -1;
29805:     } else if (node->name == name) {
29805:       return i;
29805:     }
29805:   }
29805:   return -1;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastOrRoot(nsIAtom* name)
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->name == name) {
29805:       return i;
29805:     }
29805:   }
29805:   return 0;
29805: }
29805: 
29805: PRInt32 
29805: nsHtml5TreeBuilder::findLastOrRoot(PRInt32 group)
29805: {
29805:   for (PRInt32 i = currentPtr; i > 0; i--) {
29805:     if (stack[i]->group == group) {
29805:       return i;
29805:     }
29805:   }
29805:   return 0;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::addAttributesToBody(nsHtml5HtmlAttributes* attributes)
29805: {
29805:   if (currentPtr >= 1) {
29805:     nsHtml5StackNode* body = stack[1];
29805:     if (body->group == NS_HTML5TREE_BUILDER_BODY) {
29805:       addAttributesToElement(body->node, attributes);
29805:     }
29805:   }
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::addAttributesToHtml(nsHtml5HtmlAttributes* attributes)
29805: {
29805:   addAttributesToElement(stack[0]->node, attributes);
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::pushHeadPointerOntoStack()
29805: {
35597: 
35597: 
35597: 
29805:   flushCharacters();
29805: 
35597:   silentPush(new nsHtml5StackNode(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HEAD, headPointer));
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::reconstructTheActiveFormattingElements()
29805: {
29805:   if (listPtr == -1) {
29805:     return;
29805:   }
29805:   nsHtml5StackNode* mostRecent = listOfActiveFormattingElements[listPtr];
29805:   if (!mostRecent || isInStack(mostRecent)) {
29805:     return;
29805:   }
29805:   PRInt32 entryPos = listPtr;
29805:   for (; ; ) {
29805:     entryPos--;
29805:     if (entryPos == -1) {
29805:       break;
29805:     }
29805:     if (!listOfActiveFormattingElements[entryPos]) {
29805:       break;
29805:     }
29805:     if (isInStack(listOfActiveFormattingElements[entryPos])) {
29805:       break;
29805:     }
29805:   }
29805:   if (entryPos < listPtr) {
29805:     flushCharacters();
29805:   }
29805:   while (entryPos < listPtr) {
29805:     entryPos++;
29805:     nsHtml5StackNode* entry = listOfActiveFormattingElements[entryPos];
34979:     nsIContent** clone = createElement(kNameSpaceID_XHTML, entry->name, entry->attributes->cloneAttributes(nsnull));
32947:     nsHtml5StackNode* entryClone = new nsHtml5StackNode(entry->group, entry->ns, entry->name, clone, entry->scoping, entry->special, entry->fosterParenting, entry->popName, entry->attributes);
32947:     entry->dropAttributes();
29805:     nsHtml5StackNode* currentNode = stack[currentPtr];
29805:     if (currentNode->fosterParenting) {
29805:       insertIntoFosterParent(clone);
29805:     } else {
29805:       appendElement(clone, currentNode->node);
29805:     }
29805:     push(entryClone);
29805:     listOfActiveFormattingElements[entryPos] = entryClone;
29805:     entry->release();
29805:     entryClone->retain();
29805:   }
29805: }
29805: 
29805: void 
34978: nsHtml5TreeBuilder::insertIntoFosterParent(nsIContent** child)
29805: {
29805:   PRInt32 eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE);
29805:   nsHtml5StackNode* node = stack[eltPos];
34978:   nsIContent** elt = node->node;
29805:   if (!eltPos) {
29805:     appendElement(child, elt);
29805:     return;
29805:   }
29805:   insertFosterParentedChild(child, elt, stack[eltPos - 1]->node);
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::isInStack(nsHtml5StackNode* node)
29805: {
29805:   for (PRInt32 i = currentPtr; i >= 0; i--) {
29805:     if (stack[i] == node) {
29805:       return PR_TRUE;
29805:     }
29805:   }
29805:   return PR_FALSE;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::pop()
29805: {
29805:   flushCharacters();
29805:   nsHtml5StackNode* node = stack[currentPtr];
29805: 
29805:   currentPtr--;
29805:   elementPopped(node->ns, node->popName, node->node);
29805:   node->release();
29805: }
29805: 
29805: void 
35597: nsHtml5TreeBuilder::silentPop()
35597: {
35597:   flushCharacters();
35597:   nsHtml5StackNode* node = stack[currentPtr];
35597: 
35597:   currentPtr--;
35597:   node->release();
35597: }
35597: 
35597: void 
29805: nsHtml5TreeBuilder::popOnEof()
29805: {
29805:   flushCharacters();
29805:   nsHtml5StackNode* node = stack[currentPtr];
29805: 
29805:   currentPtr--;
34979:   markMalformedIfScript(node->node);
29805:   elementPopped(node->ns, node->popName, node->node);
29805:   node->release();
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendHtmlElementToDocumentAndPush(nsHtml5HtmlAttributes* attributes)
29805: {
34978:   nsIContent** elt = createHtmlElementSetAsRoot(attributes);
29845:   nsHtml5StackNode* node = new nsHtml5StackNode(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HTML, elt);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendHtmlElementToDocumentAndPush()
29805: {
29805:   appendHtmlElementToDocumentAndPush(tokenizer->emptyAttributes());
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushHeadElement(nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
34978:   nsIContent** elt = createElement(kNameSpaceID_XHTML, nsHtml5Atoms::head, attributes);
29805:   appendElement(elt, stack[currentPtr]->node);
29805:   headPointer = elt;
34979:   ;
29845:   nsHtml5StackNode* node = new nsHtml5StackNode(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_HEAD, elt);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushBodyElement(nsHtml5HtmlAttributes* attributes)
29805: {
29845:   appendToCurrentNodeAndPushElement(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_BODY, attributes);
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushBodyElement()
29805: {
29805:   appendToCurrentNodeAndPushBodyElement(tokenizer->emptyAttributes());
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushFormElementMayFoster(nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
34978:   nsIContent** elt = createElement(kNameSpaceID_XHTML, nsHtml5Atoms::form, attributes);
29805:   formPointer = elt;
34979:   ;
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29845:   nsHtml5StackNode* node = new nsHtml5StackNode(kNameSpaceID_XHTML, nsHtml5ElementName::ELT_FORM, elt);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushFormattingElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
34978:   nsIContent** elt = createElement(ns, elementName->name, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
34979:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt, attributes->cloneAttributes(nsnull));
29805:   push(node);
29805:   append(node);
29805:   node->retain();
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushElement(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
34978:   nsIContent** elt = createElement(ns, elementName->name, attributes);
29805:   appendElement(elt, stack[currentPtr]->node);
29805:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
29805:   nsIAtom* popName = elementName->name;
34978:   nsIContent** elt = createElement(ns, popName, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt, popName);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushElementMayFosterNoScoping(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
29805:   nsIAtom* popName = elementName->name;
34978:   nsIContent** elt = createElement(ns, popName, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt, popName, PR_FALSE);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendToCurrentNodeAndPushElementMayFosterCamelCase(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
29805:   nsIAtom* popName = elementName->camelCaseName;
34978:   nsIContent** elt = createElement(ns, popName, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29845:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt, popName, nsHtml5ElementName::ELT_FOREIGNOBJECT == elementName);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
34978: nsHtml5TreeBuilder::appendToCurrentNodeAndPushElementMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes, nsIContent** form)
29805: {
29805:   flushCharacters();
41754:   nsIContent** elt = createElement(ns, elementName->name, attributes, fragment ? nsnull : form);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   nsHtml5StackNode* node = new nsHtml5StackNode(ns, elementName, elt);
29805:   push(node);
34979:   ;
29805: }
29805: 
29805: void 
34978: nsHtml5TreeBuilder::appendVoidElementToCurrentMayFoster(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes, nsIContent** form)
29805: {
29805:   flushCharacters();
41754:   nsIContent** elt = createElement(ns, name, attributes, fragment ? nsnull : form);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   elementPushed(ns, name, elt);
29805:   elementPopped(ns, name, elt);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendVoidElementToCurrentMayFoster(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
29805:   nsIAtom* popName = elementName->name;
34978:   nsIContent** elt = createElement(ns, popName, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   elementPushed(ns, popName, elt);
29805:   elementPopped(ns, popName, elt);
34979:   ;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::appendVoidElementToCurrentMayFosterCamelCase(PRInt32 ns, nsHtml5ElementName* elementName, nsHtml5HtmlAttributes* attributes)
29805: {
29805:   flushCharacters();
29805:   nsIAtom* popName = elementName->camelCaseName;
34978:   nsIContent** elt = createElement(ns, popName, attributes);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   if (current->fosterParenting) {
29805: 
29805:     insertIntoFosterParent(elt);
29805:   } else {
29805:     appendElement(elt, current->node);
29805:   }
29805:   elementPushed(ns, popName, elt);
29805:   elementPopped(ns, popName, elt);
34979:   ;
29805: }
29805: 
29805: void 
34978: nsHtml5TreeBuilder::appendVoidElementToCurrent(PRInt32 ns, nsIAtom* name, nsHtml5HtmlAttributes* attributes, nsIContent** form)
29805: {
29805:   flushCharacters();
41754:   nsIContent** elt = createElement(ns, name, attributes, fragment ? nsnull : form);
29805:   nsHtml5StackNode* current = stack[currentPtr];
29805:   appendElement(elt, current->node);
29805:   elementPushed(ns, name, elt);
29805:   elementPopped(ns, name, elt);
34979:   ;
29805: }
29805: 
29805: void 
36328: nsHtml5TreeBuilder::appendVoidFormToCurrent(nsHtml5HtmlAttributes* attributes)
35594: {
35594:   flushCharacters();
36328:   nsIContent** elt = createElement(kNameSpaceID_XHTML, nsHtml5Atoms::form, attributes);
36328:   formPointer = elt;
35594:   nsHtml5StackNode* current = stack[currentPtr];
35594:   appendElement(elt, current->node);
36328:   elementPushed(kNameSpaceID_XHTML, nsHtml5Atoms::form, elt);
36328:   elementPopped(kNameSpaceID_XHTML, nsHtml5Atoms::form, elt);
35594: }
35594: 
35594: void 
39999: nsHtml5TreeBuilder::accumulateCharacter(PRUnichar c)
39999: {
39999:   PRInt32 newLen = charBufferLen + 1;
39999:   if (newLen > charBuffer.length) {
39999:     jArray<PRUnichar,PRInt32> newBuf = jArray<PRUnichar,PRInt32>(newLen);
39999:     nsHtml5ArrayCopy::arraycopy(charBuffer, newBuf, charBufferLen);
39999:     charBuffer.release();
39999:     charBuffer = newBuf;
39999:   }
39999:   charBuffer[charBufferLen] = c;
39999:   charBufferLen = newLen;
39999: }
39999: 
39999: void 
29805: nsHtml5TreeBuilder::requestSuspension()
29805: {
29805:   tokenizer->requestSuspension();
29805: }
29805: 
29805: void 
34978: nsHtml5TreeBuilder::setFragmentContext(nsIAtom* context, PRInt32 ns, nsIContent** node, PRBool quirks)
29805: {
29805:   this->contextName = context;
29805:   nsHtml5Portability::retainLocal(context);
29805:   this->contextNamespace = ns;
29805:   this->contextNode = node;
34979:   ;
29805:   this->fragment = (!!contextName);
29805:   this->quirks = quirks;
29805: }
29805: 
34978: nsIContent** 
29805: nsHtml5TreeBuilder::currentNode()
29805: {
29805:   return stack[currentPtr]->node;
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::isScriptingEnabled()
29805: {
29805:   return scriptingEnabled;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::setScriptingEnabled(PRBool scriptingEnabled)
29805: {
29805:   this->scriptingEnabled = scriptingEnabled;
29805: }
29805: 
29805: void 
29805: nsHtml5TreeBuilder::flushCharacters()
29805: {
29805:   if (charBufferLen > 0) {
29805:     nsHtml5StackNode* current = stack[currentPtr];
29805:     if (current->fosterParenting && charBufferContainsNonWhitespace()) {
29805: 
29805:       PRInt32 eltPos = findLastOrRoot(NS_HTML5TREE_BUILDER_TABLE);
29805:       nsHtml5StackNode* node = stack[eltPos];
34978:       nsIContent** elt = node->node;
29805:       if (!eltPos) {
29805:         appendCharacters(elt, charBuffer, 0, charBufferLen);
29805:         charBufferLen = 0;
29805:         return;
29805:       }
29805:       insertFosterParentedCharacters(charBuffer, 0, charBufferLen, elt, stack[eltPos - 1]->node);
29805:       charBufferLen = 0;
29805:       return;
29805:     }
29805:     appendCharacters(currentNode(), charBuffer, 0, charBufferLen);
29805:     charBufferLen = 0;
29805:   }
29805: }
29805: 
29805: PRBool 
29805: nsHtml5TreeBuilder::charBufferContainsNonWhitespace()
29805: {
29805:   for (PRInt32 i = 0; i < charBufferLen; i++) {
29805:     switch(charBuffer[i]) {
29805:       case ' ':
29805:       case '\t':
29805:       case '\n':
39517:       case '\r':
29805:       case '\f': {
29805:         continue;
29805:       }
29805:       default: {
29805:         return PR_TRUE;
29805:       }
29805:     }
29805:   }
29805:   return PR_FALSE;
29805: }
29805: 
34979: nsAHtml5TreeBuilderState* 
29805: nsHtml5TreeBuilder::newSnapshot()
29805: {
29805:   jArray<nsHtml5StackNode*,PRInt32> listCopy = jArray<nsHtml5StackNode*,PRInt32>(listPtr + 1);
29805:   for (PRInt32 i = 0; i < listCopy.length; i++) {
29805:     nsHtml5StackNode* node = listOfActiveFormattingElements[i];
41449:     if (node) {
34979:       nsHtml5StackNode* newNode = new nsHtml5StackNode(node->group, node->ns, node->name, node->node, node->scoping, node->special, node->fosterParenting, node->popName, node->attributes->cloneAttributes(nsnull));
34979:       listCopy[i] = newNode;
34979:     } else {
34979:       listCopy[i] = nsnull;
34979:     }
34979:   }
34979:   jArray<nsHtml5StackNode*,PRInt32> stackCopy = jArray<nsHtml5StackNode*,PRInt32>(currentPtr + 1);
34979:   for (PRInt32 i = 0; i < stackCopy.length; i++) {
34979:     nsHtml5StackNode* node = stack[i];
34979:     PRInt32 listIndex = findInListOfActiveFormattingElements(node);
34979:     if (listIndex == -1) {
34979:       nsHtml5StackNode* newNode = new nsHtml5StackNode(node->group, node->ns, node->name, node->node, node->scoping, node->special, node->fosterParenting, node->popName, nsnull);
34979:       stackCopy[i] = newNode;
34979:     } else {
34979:       stackCopy[i] = listCopy[listIndex];
34979:       stackCopy[i]->retain();
34979:     }
34979:   }
34979:   ;
41449:   return new nsHtml5StateSnapshot(stackCopy, listCopy, formPointer, headPointer, mode, originalMode, framesetOk, inForeign, needToDropLF, quirks);
29805: }
29805: 
29805: PRBool 
34979: nsHtml5TreeBuilder::snapshotMatches(nsAHtml5TreeBuilderState* snapshot)
29805: {
34979:   jArray<nsHtml5StackNode*,PRInt32> stackCopy = snapshot->getStack();
34979:   PRInt32 stackLen = snapshot->getStackLength();
34979:   jArray<nsHtml5StackNode*,PRInt32> listCopy = snapshot->getListOfActiveFormattingElements();
40984:   PRInt32 listLen = snapshot->getListOfActiveFormattingElementsLength();
41449:   if (stackLen != currentPtr + 1 || listLen != listPtr + 1 || formPointer != snapshot->getFormPointer() || headPointer != snapshot->getHeadPointer() || mode != snapshot->getMode() || originalMode != snapshot->getOriginalMode() || framesetOk != snapshot->isFramesetOk() || inForeign != snapshot->isInForeign() || needToDropLF != snapshot->isNeedToDropLF() || quirks != snapshot->isQuirks()) {
29805:     return PR_FALSE;
29805:   }
34979:   for (PRInt32 i = listLen - 1; i >= 0; i--) {
34979:     if (!listCopy[i] && !listOfActiveFormattingElements[i]) {
34979:       continue;
34979:     } else if (!listCopy[i] || !listOfActiveFormattingElements[i]) {
29805:       return PR_FALSE;
29805:     }
34979:     if (listCopy[i]->node != listOfActiveFormattingElements[i]->node) {
29805:       return PR_FALSE;
29805:     }
29805:   }
34979:   for (PRInt32 i = stackLen - 1; i >= 0; i--) {
34979:     if (stackCopy[i]->node != stack[i]->node) {
34979:       return PR_FALSE;
34979:     }
34979:   }
29805:   return PR_TRUE;
29805: }
29805: 
29805: void 
34979: nsHtml5TreeBuilder::loadState(nsAHtml5TreeBuilderState* snapshot, nsHtml5AtomTable* interner)
34979: {
34979:   jArray<nsHtml5StackNode*,PRInt32> stackCopy = snapshot->getStack();
34979:   PRInt32 stackLen = snapshot->getStackLength();
34979:   jArray<nsHtml5StackNode*,PRInt32> listCopy = snapshot->getListOfActiveFormattingElements();
40984:   PRInt32 listLen = snapshot->getListOfActiveFormattingElementsLength();
34979:   for (PRInt32 i = 0; i <= listPtr; i++) {
41449:     if (listOfActiveFormattingElements[i]) {
34979:       listOfActiveFormattingElements[i]->release();
34979:     }
34979:   }
34979:   if (listOfActiveFormattingElements.length < listLen) {
34979:     listOfActiveFormattingElements.release();
34979:     listOfActiveFormattingElements = jArray<nsHtml5StackNode*,PRInt32>(listLen);
34979:   }
34979:   listPtr = listLen - 1;
34979:   for (PRInt32 i = 0; i <= currentPtr; i++) {
34979:     stack[i]->release();
34979:   }
34979:   if (stack.length < stackLen) {
34979:     stack.release();
34979:     stack = jArray<nsHtml5StackNode*,PRInt32>(stackLen);
34979:   }
34979:   currentPtr = stackLen - 1;
34979:   for (PRInt32 i = 0; i < listLen; i++) {
34979:     nsHtml5StackNode* node = listCopy[i];
41449:     if (node) {
34979:       nsHtml5StackNode* newNode = new nsHtml5StackNode(node->group, node->ns, nsHtml5Portability::newLocalFromLocal(node->name, interner), node->node, node->scoping, node->special, node->fosterParenting, nsHtml5Portability::newLocalFromLocal(node->popName, interner), node->attributes->cloneAttributes(nsnull));
34979:       listOfActiveFormattingElements[i] = newNode;
34979:     } else {
34979:       listOfActiveFormattingElements[i] = nsnull;
34979:     }
34979:   }
34979:   for (PRInt32 i = 0; i < stackLen; i++) {
34979:     nsHtml5StackNode* node = stackCopy[i];
34979:     PRInt32 listIndex = findInArray(node, listCopy);
34979:     if (listIndex == -1) {
34979:       nsHtml5StackNode* newNode = new nsHtml5StackNode(node->group, node->ns, nsHtml5Portability::newLocalFromLocal(node->name, interner), node->node, node->scoping, node->special, node->fosterParenting, nsHtml5Portability::newLocalFromLocal(node->popName, interner), nsnull);
34979:       stack[i] = newNode;
34979:     } else {
34979:       stack[i] = listOfActiveFormattingElements[listIndex];
34979:       stack[i]->retain();
34979:     }
34979:   }
34979:   ;
34979:   formPointer = snapshot->getFormPointer();
34979:   ;
34979:   ;
34979:   headPointer = snapshot->getHeadPointer();
34979:   ;
34979:   mode = snapshot->getMode();
34979:   originalMode = snapshot->getOriginalMode();
36587:   framesetOk = snapshot->isFramesetOk();
41449:   inForeign = snapshot->isInForeign();
34979:   needToDropLF = snapshot->isNeedToDropLF();
34979:   quirks = snapshot->isQuirks();
34979: }
34979: 
34979: PRInt32 
34979: nsHtml5TreeBuilder::findInArray(nsHtml5StackNode* node, jArray<nsHtml5StackNode*,PRInt32> arr)
34979: {
34979:   for (PRInt32 i = listPtr; i >= 0; i--) {
34979:     if (node == arr[i]) {
34979:       return i;
34979:     }
34979:   }
34979:   return -1;
34979: }
34979: 
34979: nsIContent** 
34979: nsHtml5TreeBuilder::getFormPointer()
34979: {
34979:   return formPointer;
34979: }
34979: 
34979: nsIContent** 
34979: nsHtml5TreeBuilder::getHeadPointer()
34979: {
34979:   return headPointer;
34979: }
34979: 
34979: jArray<nsHtml5StackNode*,PRInt32> 
34979: nsHtml5TreeBuilder::getListOfActiveFormattingElements()
34979: {
34979:   return listOfActiveFormattingElements;
34979: }
34979: 
34979: jArray<nsHtml5StackNode*,PRInt32> 
34979: nsHtml5TreeBuilder::getStack()
34979: {
34979:   return stack;
34979: }
34979: 
34979: PRInt32 
34979: nsHtml5TreeBuilder::getMode()
34979: {
34979:   return mode;
34979: }
34979: 
34979: PRInt32 
34979: nsHtml5TreeBuilder::getOriginalMode()
34979: {
34979:   return originalMode;
34979: }
34979: 
36587: PRBool 
36587: nsHtml5TreeBuilder::isFramesetOk()
36587: {
36587:   return framesetOk;
36587: }
36587: 
41449: PRBool 
41449: nsHtml5TreeBuilder::isInForeign()
34979: {
41449:   return inForeign;
34979: }
34979: 
34979: PRBool 
34979: nsHtml5TreeBuilder::isNeedToDropLF()
34979: {
34979:   return needToDropLF;
34979: }
34979: 
34979: PRBool 
34979: nsHtml5TreeBuilder::isQuirks()
34979: {
34979:   return quirks;
34979: }
34979: 
34979: PRInt32 
40984: nsHtml5TreeBuilder::getListOfActiveFormattingElementsLength()
34979: {
34979:   return listPtr + 1;
34979: }
34979: 
34979: PRInt32 
34979: nsHtml5TreeBuilder::getStackLength()
34979: {
34979:   return currentPtr + 1;
34979: }
34979: 
34979: void
29805: nsHtml5TreeBuilder::initializeStatics()
29805: {
29805:   ISINDEX_PROMPT = nsHtml5Portability::isIndexPrompt();
29805:   QUIRKY_PUBLIC_IDS = jArray<const char*,PRInt32>(55);
29805:   QUIRKY_PUBLIC_IDS[0] = "+//silmaril//dtd html pro v0r11 19970101//";
29805:   QUIRKY_PUBLIC_IDS[1] = "-//advasoft ltd//dtd html 3.0 aswedit + extensions//";
29805:   QUIRKY_PUBLIC_IDS[2] = "-//as//dtd html 3.0 aswedit + extensions//";
29805:   QUIRKY_PUBLIC_IDS[3] = "-//ietf//dtd html 2.0 level 1//";
29805:   QUIRKY_PUBLIC_IDS[4] = "-//ietf//dtd html 2.0 level 2//";
29805:   QUIRKY_PUBLIC_IDS[5] = "-//ietf//dtd html 2.0 strict level 1//";
29805:   QUIRKY_PUBLIC_IDS[6] = "-//ietf//dtd html 2.0 strict level 2//";
29805:   QUIRKY_PUBLIC_IDS[7] = "-//ietf//dtd html 2.0 strict//";
29805:   QUIRKY_PUBLIC_IDS[8] = "-//ietf//dtd html 2.0//";
29805:   QUIRKY_PUBLIC_IDS[9] = "-//ietf//dtd html 2.1e//";
29805:   QUIRKY_PUBLIC_IDS[10] = "-//ietf//dtd html 3.0//";
29805:   QUIRKY_PUBLIC_IDS[11] = "-//ietf//dtd html 3.2 final//";
29805:   QUIRKY_PUBLIC_IDS[12] = "-//ietf//dtd html 3.2//";
29805:   QUIRKY_PUBLIC_IDS[13] = "-//ietf//dtd html 3//";
29805:   QUIRKY_PUBLIC_IDS[14] = "-//ietf//dtd html level 0//";
29805:   QUIRKY_PUBLIC_IDS[15] = "-//ietf//dtd html level 1//";
29805:   QUIRKY_PUBLIC_IDS[16] = "-//ietf//dtd html level 2//";
29805:   QUIRKY_PUBLIC_IDS[17] = "-//ietf//dtd html level 3//";
29805:   QUIRKY_PUBLIC_IDS[18] = "-//ietf//dtd html strict level 0//";
29805:   QUIRKY_PUBLIC_IDS[19] = "-//ietf//dtd html strict level 1//";
29805:   QUIRKY_PUBLIC_IDS[20] = "-//ietf//dtd html strict level 2//";
29805:   QUIRKY_PUBLIC_IDS[21] = "-//ietf//dtd html strict level 3//";
29805:   QUIRKY_PUBLIC_IDS[22] = "-//ietf//dtd html strict//";
29805:   QUIRKY_PUBLIC_IDS[23] = "-//ietf//dtd html//";
29805:   QUIRKY_PUBLIC_IDS[24] = "-//metrius//dtd metrius presentational//";
29805:   QUIRKY_PUBLIC_IDS[25] = "-//microsoft//dtd internet explorer 2.0 html strict//";
29805:   QUIRKY_PUBLIC_IDS[26] = "-//microsoft//dtd internet explorer 2.0 html//";
29805:   QUIRKY_PUBLIC_IDS[27] = "-//microsoft//dtd internet explorer 2.0 tables//";
29805:   QUIRKY_PUBLIC_IDS[28] = "-//microsoft//dtd internet explorer 3.0 html strict//";
29805:   QUIRKY_PUBLIC_IDS[29] = "-//microsoft//dtd internet explorer 3.0 html//";
29805:   QUIRKY_PUBLIC_IDS[30] = "-//microsoft//dtd internet explorer 3.0 tables//";
29805:   QUIRKY_PUBLIC_IDS[31] = "-//netscape comm. corp.//dtd html//";
29805:   QUIRKY_PUBLIC_IDS[32] = "-//netscape comm. corp.//dtd strict html//";
29805:   QUIRKY_PUBLIC_IDS[33] = "-//o'reilly and associates//dtd html 2.0//";
29805:   QUIRKY_PUBLIC_IDS[34] = "-//o'reilly and associates//dtd html extended 1.0//";
29805:   QUIRKY_PUBLIC_IDS[35] = "-//o'reilly and associates//dtd html extended relaxed 1.0//";
29805:   QUIRKY_PUBLIC_IDS[36] = "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//";
29805:   QUIRKY_PUBLIC_IDS[37] = "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//";
29805:   QUIRKY_PUBLIC_IDS[38] = "-//spyglass//dtd html 2.0 extended//";
29805:   QUIRKY_PUBLIC_IDS[39] = "-//sq//dtd html 2.0 hotmetal + extensions//";
29805:   QUIRKY_PUBLIC_IDS[40] = "-//sun microsystems corp.//dtd hotjava html//";
29805:   QUIRKY_PUBLIC_IDS[41] = "-//sun microsystems corp.//dtd hotjava strict html//";
29805:   QUIRKY_PUBLIC_IDS[42] = "-//w3c//dtd html 3 1995-03-24//";
29805:   QUIRKY_PUBLIC_IDS[43] = "-//w3c//dtd html 3.2 draft//";
29805:   QUIRKY_PUBLIC_IDS[44] = "-//w3c//dtd html 3.2 final//";
29805:   QUIRKY_PUBLIC_IDS[45] = "-//w3c//dtd html 3.2//";
29805:   QUIRKY_PUBLIC_IDS[46] = "-//w3c//dtd html 3.2s draft//";
29805:   QUIRKY_PUBLIC_IDS[47] = "-//w3c//dtd html 4.0 frameset//";
29805:   QUIRKY_PUBLIC_IDS[48] = "-//w3c//dtd html 4.0 transitional//";
29805:   QUIRKY_PUBLIC_IDS[49] = "-//w3c//dtd html experimental 19960712//";
29805:   QUIRKY_PUBLIC_IDS[50] = "-//w3c//dtd html experimental 970421//";
29805:   QUIRKY_PUBLIC_IDS[51] = "-//w3c//dtd w3 html//";
29805:   QUIRKY_PUBLIC_IDS[52] = "-//w3o//dtd w3 html 3.0//";
29805:   QUIRKY_PUBLIC_IDS[53] = "-//webtechs//dtd mozilla html 2.0//";
29805:   QUIRKY_PUBLIC_IDS[54] = "-//webtechs//dtd mozilla html//";
29805: }
29805: 
29805: void
29805: nsHtml5TreeBuilder::releaseStatics()
29805: {
29805:   ISINDEX_PROMPT.release();
29805:   QUIRKY_PUBLIC_IDS.release();
29805: }
29805: 
29805: 
29805: #include "nsHtml5TreeBuilderCppSupplement.h"
29805: 
