43340: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
43340: /* vim:set ts=2 sw=2 sts=2 et cindent: */
43340: /* ***** BEGIN LICENSE BLOCK *****
43340:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43340:  *
43340:  * The contents of this file are subject to the Mozilla Public License Version
43340:  * 1.1 (the "License"); you may not use this file except in compliance with
43340:  * the License. You may obtain a copy of the License at
43340:  * http://www.mozilla.org/MPL/
43340:  *
43340:  * Software distributed under the License is distributed on an "AS IS" basis,
43340:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43340:  * for the specific language governing rights and limitations under the
43340:  * License.
43340:  *
43340:  * The Original Code is Mozilla code.
43340:  *
43340:  * The Initial Developer of the Original Code is the Mozilla Corporation.
43340:  * Portions created by the Initial Developer are Copyright (C) 2007
43340:  * the Initial Developer. All Rights Reserved.
43340:  *
43340:  * Contributor(s):
43340:  *  Chris Double <chris.double@double.co.nz>
43340:  *  Chris Pearce <chris@pearce.org.nz>
43340:  *
43340:  * Alternatively, the contents of this file may be used under the terms of
43340:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43340:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43340:  * in which case the provisions of the GPL or the LGPL are applicable instead
43340:  * of those above. If you wish to allow use of your version of this file only
43340:  * under the terms of either the GPL or the LGPL, and not to allow others to
43340:  * use your version of this file under the terms of the MPL, indicate your
43340:  * decision by deleting the provisions above and replace them with the notice
43340:  * and other provisions required by the GPL or the LGPL. If you do not delete
43340:  * the provisions above, a recipient may use your version of this file under
43340:  * the terms of any one of the MPL, the GPL or the LGPL.
43340:  *
43340:  * ***** END LICENSE BLOCK ***** */
43340: #if !defined(nsWebMReader_h_)
43340: #define nsWebMReader_h_
43340: 
43340: #include "nsDeque.h"
43340: #include "nsBuiltinDecoderReader.h"
43340: #include "nestegg/nestegg.h"
43340: #include "vpx/vpx_decoder.h"
43340: #include "vpx/vp8dx.h"
43340: #include "vorbis/codec.h"
43340: 
43340: class nsMediaDecoder;
43340: 
43340: // Thread and type safe wrapper around nsDeque.
43340: class PacketQueueDeallocator : public nsDequeFunctor {
43340:   virtual void* operator() (void* anObject) {
43340:     nestegg_free_packet(static_cast<nestegg_packet*>(anObject));
43340:     return nsnull;
43340:   }
43340: };
43340: 
43340: // Typesafe queue for holding nestegg packets. It has
43340: // ownership of the items in the queue and will free them
43340: // when destroyed.
43340: class PacketQueue : private nsDeque {
43340:  public:
43340:    PacketQueue()
43340:      : nsDeque(new PacketQueueDeallocator())
43340:    {}
43340:   
43340:   ~PacketQueue() {
43340:     Reset();
43340:   }
43340: 
43340:   inline PRInt32 GetSize() { 
43340:     return nsDeque::GetSize();
43340:   }
43340:   
43340:   inline void Push(nestegg_packet* aItem) {
43667:     NS_ASSERTION(aItem, "NULL pushed to PacketQueue");
43340:     nsDeque::Push(aItem);
43340:   }
43340:   
43445:   inline void PushFront(nestegg_packet* aItem) {
43667:     NS_ASSERTION(aItem, "NULL pushed to PacketQueue");
43445:     nsDeque::PushFront(aItem);
43445:   }
43445: 
43340:   inline nestegg_packet* PopFront() {
43340:     return static_cast<nestegg_packet*>(nsDeque::PopFront());
43340:   }
43340:   
43340:   void Reset() {
43340:     while (GetSize() > 0) {
43340:       nestegg_free_packet(PopFront());
43340:     }
43340:   }
43340: };
43340: 
43340: 
43340: class nsWebMReader : public nsBuiltinDecoderReader
43340: {
43340: public:
43340:   nsWebMReader(nsBuiltinDecoder* aDecoder);
43340:   ~nsWebMReader();
43340: 
43340:   virtual nsresult Init();
43340:   virtual nsresult ResetDecode();
43340:   virtual PRBool DecodeAudioData();
43340: 
43340:   // If the Theora granulepos has not been captured, it may read several packets
43340:   // until one with a granulepos has been captured, to ensure that all packets
43340:   // read have valid time info.  
43340:   virtual PRBool DecodeVideoFrame(PRBool &aKeyframeSkip,
43340:                                   PRInt64 aTimeThreshold);
43340: 
43340:   virtual PRBool HasAudio()
43340:   {
43340:     mozilla::MonitorAutoEnter mon(mMonitor);
43340:     return mHasAudio;
43340:   }
43340: 
43340:   virtual PRBool HasVideo()
43340:   {
43340:     mozilla::MonitorAutoEnter mon(mMonitor);
43340:     return mHasVideo;
43340:   }
43340: 
43340:   virtual nsresult ReadMetadata();
43340:   virtual nsresult Seek(PRInt64 aTime, PRInt64 aStartTime, PRInt64 aEndTime);
43340: 
43340: private:
43340:   // Value passed to NextPacket to determine if we are reading a video or an
43340:   // audio packet.
43340:   enum TrackType {
43340:     VIDEO = 0,
43340:     AUDIO = 1
43340:   };
43340: 
43340:   // Read a packet from the nestegg file. Returns NULL if all packets for
43340:   // the particular track have been read. Pass VIDEO or AUDIO to indicate the
43340:   // type of the packet we want to read.
43340:   nestegg_packet* NextPacket(TrackType aTrackType);
43340: 
43340:   // Returns an initialized ogg packet with data obtained from the WebM container.
43340:   ogg_packet InitOggPacket(unsigned char* aData,
43340:                            size_t aLength,
43340:                            PRBool aBOS,
43340:                            PRBool aEOS,
43340:                            PRInt64 aGranulepos);
43340:                      
43340:   // Decode a nestegg packet of audio data. Push the audio data on the
43340:   // audio queue. Returns PR_TRUE when there's more audio to decode,
43340:   // PR_FALSE if the audio is finished, end of file has been reached,
43340:   // or an un-recoverable read error has occured. The reader's monitor
43340:   // must be held during this call. This function will free the packet
43340:   // so the caller must not use the packet after calling.
43340:   PRBool DecodeAudioPacket(nestegg_packet* aPacket);
43340: 
43340:   // Release context and set to null. Called when an error occurs during
43340:   // reading metadata or destruction of the reader itself.
43340:   void Cleanup();
43340: 
43340: private:
43340:   // libnestegg context for webm container. Access on state machine thread
43340:   // or decoder thread only.
43340:   nestegg* mContext;
43340: 
43340:   // VP8 decoder state
43340:   vpx_codec_ctx_t  mVP8;
43340: 
43340:   // Vorbis decoder state
43340:   vorbis_info mVorbisInfo;
43340:   vorbis_comment mVorbisComment;
43340:   vorbis_dsp_state mVorbisDsp;
43340:   vorbis_block mVorbisBlock;
43340:   PRUint32 mPacketCount;
43340:   PRUint32 mChannels;
43340: 
43340:   // Queue of video and audio packets that have been read but not decoded. These
43340:   // must only be accessed from the state machine thread.
43340:   PacketQueue mVideoPackets;
43340:   PacketQueue mAudioPackets;
43340: 
43340:   // Index of video and audio track to play
43340:   PRUint32 mVideoTrack;
43340:   PRUint32 mAudioTrack;
43340: 
43340:   // Booleans to indicate if we have audio and/or video data
43340:   PRPackedBool mHasVideo;
43340:   PRPackedBool mHasAudio;
43340: };
43340: 
43340: #endif
