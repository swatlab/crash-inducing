36171: #include "TestRPCRaces.h"
36171: 
36171: #include "IPDLUnitTests.h"      // fail etc.
36171: 
39266: using mozilla::ipc::RPCChannel;
36171: 
36171: template<>
36171: struct RunnableMethodTraits<mozilla::_ipdltest::TestRPCRacesParent>
36171: {
36171:     static void RetainCallee(mozilla::_ipdltest::TestRPCRacesParent* obj) { }
36171:     static void ReleaseCallee(mozilla::_ipdltest::TestRPCRacesParent* obj) { }
36171: };
36171: 
36171: 
36171: namespace mozilla {
36171: namespace _ipdltest {
36171: 
39266: RPCChannel::RacyRPCPolicy
39266: MediateRace(const RPCChannel::Message& parent,
39266:             const RPCChannel::Message& child)
39266: {
39266:     return (PTestRPCRaces::Msg_Child__ID == parent.type()) ?
39266:         RPCChannel::RRPParentWins : RPCChannel::RRPChildWins;
39266: }
39266: 
36171: //-----------------------------------------------------------------------------
36171: // parent
36171: void
36171: TestRPCRacesParent::Main()
36171: {
36171:     SendStart();
36171: }
36171: 
36171: bool
36171: TestRPCRacesParent::RecvStartRace()
36171: {
36171:     MessageLoop::current()->PostTask(
36171:         FROM_HERE,
36171:         NewRunnableMethod(this, &TestRPCRacesParent::OnRaceTime));
36171:     return true;
36171: }
36171: 
36171: void
36171: TestRPCRacesParent::OnRaceTime()
36171: {
36171:     if (!CallRace(&mChildHasReply))
36171:         fail("problem calling Race()");
36171: 
36171:     if (!mChildHasReply)
36171:         fail("child should have got a reply already");
36171: 
36171:     mHasReply = true;
36171: 
36171:     MessageLoop::current()->PostTask(
36171:         FROM_HERE,
36171:         NewRunnableMethod(this, &TestRPCRacesParent::Test2));
36171: }
36171: 
36171: bool
36171: TestRPCRacesParent::AnswerRace(bool* hasReply)
36171: {
36171:     if (mHasReply)
36171:         fail("apparently the parent won the RPC race!");
36171:     *hasReply = hasReply;
36171:     return true;
36171: }
36171: 
36171: void
36171: TestRPCRacesParent::Test2()
36171: {
36171:     puts("  passed");
36171:     puts("Test 2");
36171: 
36171:     mHasReply = false;
36171:     mChildHasReply = false;
36171: 
36171:     if (!CallStackFrame())
36171:         fail("can't set up a stack frame");
36171: 
36171:     puts("  passed");
36171: 
39266:     MessageLoop::current()->PostTask(
39266:         FROM_HERE,
39266:         NewRunnableMethod(this, &TestRPCRacesParent::Test3));
36171: }
36171: 
36171: bool
36171: TestRPCRacesParent::AnswerStackFrame()
36171: {
36171:     if (!SendWakeup())
36171:         fail("can't wake up the child");
36171: 
36171:     if (!CallRace(&mChildHasReply))
36171:         fail("can't set up race condition");
36171:     mHasReply = true;
36171: 
36171:     if (!mChildHasReply)
36171:         fail("child should have got a reply already");
36171: 
36171:     return true;
36171: }
36171: 
39266: void
39266: TestRPCRacesParent::Test3()
39266: {
39266:     puts("Test 3");
39266: 
39266:     if (!CallStackFrame3())
39266:         fail("can't set up a stack frame");
39266: 
39266:     puts("  passed");
39266: 
39266:     Close();
39266: }
39266: 
39266: bool
39266: TestRPCRacesParent::AnswerStackFrame3()
39266: {
39266:     if (!SendWakeup3())
39266:         fail("can't wake up the child");
39266: 
39266:     if (!CallChild())
39266:         fail("can't set up race condition");
39266: 
39266:     return true;
39266: }
39266: 
39266: bool
39266: TestRPCRacesParent::AnswerParent()
39266: {
39266:     mAnsweredParent = true;
39266:     return true;
39266: }
39266: 
39266: bool
39266: TestRPCRacesParent::RecvGetAnsweredParent(bool* answeredParent)
39266: {
39266:     *answeredParent = mAnsweredParent;
39266:     return true;
39266: }
39266: 
36171: //-----------------------------------------------------------------------------
36171: // child
36171: bool
36171: TestRPCRacesChild::RecvStart()
36171: {
36171:     puts("Test 1");
36171: 
36171:     if (!SendStartRace())
36171:         fail("problem sending StartRace()");
36171: 
36171:     bool dontcare;
36171:     if (!CallRace(&dontcare))
36171:         fail("problem calling Race()");
36171: 
36171:     mHasReply = true;
36171:     return true;
36171: }
36171: 
36171: bool
36171: TestRPCRacesChild::AnswerRace(bool* hasReply)
36171: {
36171:     if (!mHasReply)
36171:         fail("apparently the child lost the RPC race!");
36171: 
36171:     *hasReply = mHasReply;
36171: 
36171:     return true;
36171: }
36171: 
36171: bool
36171: TestRPCRacesChild::AnswerStackFrame()
36171: {
36171:     // reset for the second test
36171:     mHasReply = false;
36171: 
36171:     if (!CallStackFrame())
36171:         fail("can't set up stack frame");
36171: 
36171:     if (!mHasReply)
36171:         fail("should have had reply by now");
36171: 
36171:     return true;
36171: }
36171: 
36171: bool
36171: TestRPCRacesChild::RecvWakeup()
36171: {
36171:     bool dontcare;
36171:     if (!CallRace(&dontcare))
36171:         fail("can't set up race condition");
36171: 
36171:     mHasReply = true;
36171:     return true;
36171: }
36171: 
39266: bool
39266: TestRPCRacesChild::AnswerStackFrame3()
39266: {
39266:     if (!CallStackFrame3())
39266:         fail("can't set up stack frame");
39266:     return true;
39266: }
39266: 
39266: bool
39266: TestRPCRacesChild::RecvWakeup3()
39266: {
39266:     if (!CallParent())
39266:         fail("can't set up race condition");
39266:     return true;
39266: }
39266: 
39266: bool
39266: TestRPCRacesChild::AnswerChild()
39266: {
39266:     bool parentAnsweredParent;
39266:     // the parent is supposed to win the race, which means its
39266:     // message, Child(), is supposed to be processed before the
39266:     // child's message, Parent()
39266:     if (!SendGetAnsweredParent(&parentAnsweredParent))
39266:         fail("sending GetAnsweredParent");
39266: 
39266:     if (parentAnsweredParent)
39266:         fail("parent was supposed to win the race!");
39266: 
39266:     return true;
39266: }
39266: 
36171: } // namespace _ipdltest
36171: } // namespace mozilla
