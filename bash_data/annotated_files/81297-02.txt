    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * IBM Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * IBM Corporation. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   IBM Corporation
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Storage of the children and attributes of a DOM node; storage for
    1:  * the two is unified to minimize footprint.
    1:  */
    1: 
    1: #ifndef nsAttrAndChildArray_h___
    1: #define nsAttrAndChildArray_h___
    1: 
    1: #include "nscore.h"
    1: #include "nsAttrName.h"
    1: #include "nsAttrValue.h"
    1: 
    1: class nsINode;
    1: class nsIContent;
    1: class nsMappedAttributes;
    1: class nsHTMLStyleSheet;
    1: class nsRuleWalker;
10073: class nsMappedAttributeElement;
    1: 
    1: #define ATTRCHILD_ARRAY_GROWSIZE 8
    1: #define ATTRCHILD_ARRAY_LINEAR_THRESHOLD 32
    1: 
    1: #define ATTRCHILD_ARRAY_ATTR_SLOTS_BITS 10
    1: 
    1: #define ATTRCHILD_ARRAY_MAX_ATTR_COUNT \
    1:     ((1 << ATTRCHILD_ARRAY_ATTR_SLOTS_BITS) - 1)
    1: 
    1: #define ATTRCHILD_ARRAY_MAX_CHILD_COUNT \
25824:     (~PRUint32(0) >> ATTRCHILD_ARRAY_ATTR_SLOTS_BITS)
    1: 
    1: #define ATTRCHILD_ARRAY_ATTR_SLOTS_COUNT_MASK \
    1:     ((1 << ATTRCHILD_ARRAY_ATTR_SLOTS_BITS) - 1)
    1: 
    1: 
    1: #define ATTRSIZE (sizeof(InternalAttr) / sizeof(void*))
    1: 
    1: class nsAttrAndChildArray
    1: {
    1: public:
11169:   nsAttrAndChildArray();
    1:   ~nsAttrAndChildArray();
    1: 
    1:   PRUint32 ChildCount() const
    1:   {
    1:     return mImpl ? (mImpl->mAttrAndChildCount >> ATTRCHILD_ARRAY_ATTR_SLOTS_BITS) : 0;
    1:   }
    1:   nsIContent* ChildAt(PRUint32 aPos) const
    1:   {
    1:     NS_ASSERTION(aPos < ChildCount(), "out-of-bounds access in nsAttrAndChildArray");
 3233:     return reinterpret_cast<nsIContent*>(mImpl->mBuffer[AttrSlotsSize() + aPos]);
    1:   }
    1:   nsIContent* GetSafeChildAt(PRUint32 aPos) const;
22251:   nsIContent * const * GetChildArray(PRUint32* aChildCount) const;
    1:   nsresult AppendChild(nsIContent* aChild)
    1:   {
    1:     return InsertChildAt(aChild, ChildCount());
    1:   }
    1:   nsresult InsertChildAt(nsIContent* aChild, PRUint32 aPos);
    1:   void RemoveChildAt(PRUint32 aPos);
81297:   // Like RemoveChildAt but hands the reference to the child being
81297:   // removed back to the caller instead of just releasing it.
81297:   already_AddRefed<nsIContent> TakeChildAt(PRUint32 aPos);
    1:   PRInt32 IndexOfChild(nsINode* aPossibleChild) const;
    1: 
    1:   PRUint32 AttrCount() const;
    1:   const nsAttrValue* GetAttr(nsIAtom* aLocalName, PRInt32 aNamespaceID = kNameSpaceID_None) const;
    1:   const nsAttrValue* AttrAt(PRUint32 aPos) const;
    1:   nsresult SetAttr(nsIAtom* aLocalName, const nsAString& aValue);
    1:   nsresult SetAndTakeAttr(nsIAtom* aLocalName, nsAttrValue& aValue);
    1:   nsresult SetAndTakeAttr(nsINodeInfo* aName, nsAttrValue& aValue);
    1: 
    1:   // Remove the attr at position aPos.  The value of the attr is placed in
    1:   // aValue; any value that was already in aValue is destroyed.
    1:   nsresult RemoveAttrAt(PRUint32 aPos, nsAttrValue& aValue);
    1: 
    1:   // Returns attribute name at given position, *not* out-of-bounds safe
    1:   const nsAttrName* AttrNameAt(PRUint32 aPos) const;
    1: 
    1:   // Returns attribute name at given position or null if aPos is out-of-bounds
    1:   const nsAttrName* GetSafeAttrNameAt(PRUint32 aPos) const;
    1: 
39101:   const nsAttrName* GetExistingAttrNameFromQName(const nsAString& aName) const;
    1:   PRInt32 IndexOfAttr(nsIAtom* aLocalName, PRInt32 aNamespaceID = kNameSpaceID_None) const;
    1: 
    1:   nsresult SetAndTakeMappedAttr(nsIAtom* aLocalName, nsAttrValue& aValue,
10073:                                 nsMappedAttributeElement* aContent,
    1:                                 nsHTMLStyleSheet* aSheet);
    1:   nsresult SetMappedAttrStyleSheet(nsHTMLStyleSheet* aSheet);
    1:   void WalkMappedAttributeStyleRules(nsRuleWalker* aRuleWalker);
    1: 
11169:   void Compact();
11169: 
59211:   bool CanFitMoreAttrs() const
59211:   {
59211:     return AttrSlotCount() < ATTRCHILD_ARRAY_MAX_ATTR_COUNT ||
59211:            !AttrSlotIsTaken(ATTRCHILD_ARRAY_MAX_ATTR_COUNT - 1);
59211:   }
59211: 
73721:   PRInt64 SizeOf() const;
73721: 
    1: private:
    1:   nsAttrAndChildArray(const nsAttrAndChildArray& aOther); // Not to be implemented
    1:   nsAttrAndChildArray& operator=(const nsAttrAndChildArray& aOther); // Not to be implemented
    1: 
    1:   void Clear();
    1: 
    1:   PRUint32 NonMappedAttrCount() const;
    1:   PRUint32 MappedAttrCount() const;
    1: 
10073:   nsresult GetModifiableMapped(nsMappedAttributeElement* aContent,
    1:                                nsHTMLStyleSheet* aSheet,
79445:                                bool aWillAddAttr,
    1:                                nsMappedAttributes** aModifiable);
    1:   nsresult MakeMappedUnique(nsMappedAttributes* aAttributes);
    1: 
    1:   PRUint32 AttrSlotsSize() const
    1:   {
    1:     return AttrSlotCount() * ATTRSIZE;
    1:   }
    1: 
    1:   PRUint32 AttrSlotCount() const
    1:   {
    1:     return mImpl ? mImpl->mAttrAndChildCount & ATTRCHILD_ARRAY_ATTR_SLOTS_COUNT_MASK : 0;
    1:   }
    1: 
59211:   bool AttrSlotIsTaken(PRUint32 aSlot) const
59211:   {
59211:     NS_PRECONDITION(aSlot < AttrSlotCount(), "out-of-bounds");
59211:     return mImpl->mBuffer[aSlot * ATTRSIZE];
59211:   }
59211: 
    1:   void SetChildCount(PRUint32 aCount)
    1:   {
    1:     mImpl->mAttrAndChildCount = 
    1:         (mImpl->mAttrAndChildCount & ATTRCHILD_ARRAY_ATTR_SLOTS_COUNT_MASK) |
    1:         (aCount << ATTRCHILD_ARRAY_ATTR_SLOTS_BITS);
    1:   }
    1: 
    1:   void SetAttrSlotCount(PRUint32 aCount)
    1:   {
    1:     mImpl->mAttrAndChildCount =
    1:         (mImpl->mAttrAndChildCount & ~ATTRCHILD_ARRAY_ATTR_SLOTS_COUNT_MASK) |
    1:         aCount;
    1:   }
    1: 
    1:   void SetAttrSlotAndChildCount(PRUint32 aSlotCount, PRUint32 aChildCount)
    1:   {
    1:     mImpl->mAttrAndChildCount = aSlotCount |
    1:       (aChildCount << ATTRCHILD_ARRAY_ATTR_SLOTS_BITS);
    1:   }
    1: 
79445:   bool GrowBy(PRUint32 aGrowSize);
79445:   bool AddAttrSlot();
    1: 
42104:   /**
42104:    * Set *aPos to aChild and update sibling pointers as needed.  aIndex is the
42104:    * index at which aChild is actually being inserted.  aChildCount is the
42104:    * number of kids we had before the insertion.
42104:    */
42104:   inline void SetChildAtPos(void** aPos, nsIContent* aChild, PRUint32 aIndex,
42104:                             PRUint32 aChildCount);
42104: 
    1:   struct InternalAttr
    1:   {
    1:     nsAttrName mName;
    1:     nsAttrValue mValue;
    1:   };
    1: 
    1:   struct Impl {
    1:     PRUint32 mAttrAndChildCount;
    1:     PRUint32 mBufferSize;
    1:     nsMappedAttributes* mMappedAttrs;
    1:     void* mBuffer[1];
    1:   };
    1: 
    1:   Impl* mImpl;
    1: };
    1: 
    1: #endif
