 28675: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 28675:  *
 99778:  * This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 28675: 
 28675: #ifndef __NSCLIENTAUTHREMEMBER_H__
 28675: #define __NSCLIENTAUTHREMEMBER_H__
 28675: 
 69142: #include "mozilla/ReentrantMonitor.h"
 28675: #include "nsTHashtable.h"
 28675: #include "nsIObserver.h"
 28675: #include "nsIX509Cert.h"
119832: #include "nsAutoPtr.h"
 28675: #include "nsNSSCertificate.h"
 28675: #include "nsString.h"
 28675: #include "nsWeakReference.h"
105743: #include "mozilla/Attributes.h"
 28675: 
 28675: class nsClientAuthRemember
 28675: {
 28675: public:
 28675: 
 28675:   nsClientAuthRemember()
 28675:   {
 28675:   }
 28675:   
 28675:   nsClientAuthRemember(const nsClientAuthRemember &other)
 28675:   {
 28675:     this->operator=(other);
 28675:   }
 28675: 
 28675:   nsClientAuthRemember &operator=(const nsClientAuthRemember &other)
 28675:   {
 28675:     mAsciiHost = other.mAsciiHost;
 28675:     mFingerprint = other.mFingerprint;
 28675:     mDBKey = other.mDBKey;
 28675:     return *this;
 28675:   }
 28675: 
 28675:   nsCString mAsciiHost;
 28675:   nsCString mFingerprint;
 28675:   nsCString mDBKey;
 28675: };
 28675: 
 28675: 
 28675: // hash entry class
105743: class nsClientAuthRememberEntry MOZ_FINAL : public PLDHashEntryHdr
 28675: {
 28675:   public:
 28675:     // Hash methods
 28675:     typedef const char* KeyType;
 28675:     typedef const char* KeyTypePointer;
 28675: 
 28675:     // do nothing with aHost - we require mHead to be set before we're live!
 28675:     nsClientAuthRememberEntry(KeyTypePointer aHostWithCertUTF8)
 28675:     {
 28675:     }
 28675: 
 28675:     nsClientAuthRememberEntry(const nsClientAuthRememberEntry& toCopy)
 28675:     {
 28675:       mSettings = toCopy.mSettings;
 28675:     }
 28675: 
 28675:     ~nsClientAuthRememberEntry()
 28675:     {
 28675:     }
 28675: 
 28675:     KeyType GetKey() const
 28675:     {
 28675:       return HostWithCertPtr();
 28675:     }
 28675: 
 28675:     KeyTypePointer GetKeyPointer() const
 28675:     {
 28675:       return HostWithCertPtr();
 28675:     }
 28675: 
 79445:     bool KeyEquals(KeyTypePointer aKey) const
 28675:     {
 28675:       return !strcmp(HostWithCertPtr(), aKey);
 28675:     }
 28675: 
 28675:     static KeyTypePointer KeyToPointer(KeyType aKey)
 28675:     {
 28675:       return aKey;
 28675:     }
 28675: 
 28675:     static PLDHashNumber HashKey(KeyTypePointer aKey)
 28675:     {
 28675:       // PL_DHashStringKey doesn't use the table parameter, so we can safely
106838:       // pass nullptr
106838:       return PL_DHashStringKey(nullptr, aKey);
 28675:     }
 28675: 
 80486:     enum { ALLOW_MEMMOVE = false };
 28675: 
 28675:     // get methods
 28675:     inline const nsCString &HostWithCert() const { return mHostWithCert; }
 28675: 
 28675:     inline KeyTypePointer HostWithCertPtr() const
 28675:     {
 28675:       return mHostWithCert.get();
 28675:     }
 28675: 
 28675:     nsClientAuthRemember mSettings;
 28675:     nsCString mHostWithCert;
 28675: };
 28675: 
105743: class nsClientAuthRememberService MOZ_FINAL : public nsIObserver,
 28675:                                               public nsSupportsWeakReference
 28675: {
 28675: public:
 28675:   NS_DECL_ISUPPORTS
 28675:   NS_DECL_NSIOBSERVER
 28675: 
 28675:   nsClientAuthRememberService();
 28675:   ~nsClientAuthRememberService();
 28675: 
 28675:   nsresult Init();
 28675: 
 28675:   static void GetHostWithCert(const nsACString & aHostName, 
 28675:                               const nsACString & nickname, nsACString& _retval);
 28675: 
 28675:   nsresult RememberDecision(const nsACString & aHostName, 
 28675:                             CERTCertificate *aServerCert, CERTCertificate *aClientCert);
 28675:   nsresult HasRememberedDecision(const nsACString & aHostName, 
 28675:                                  CERTCertificate *aServerCert, 
 79445:                                  nsACString & aCertDBKey, bool *_retval);
 28675: 
 28675:   void ClearRememberedDecisions();
 28675: 
 28675: protected:
 69142:     mozilla::ReentrantMonitor monitor;
 28675:     nsTHashtable<nsClientAuthRememberEntry> mSettingsTable;
 28675: 
 28675:     void RemoveAllFromMemory();
 28675:     nsresult AddEntryToList(const nsACString &host, 
 28675:                             const nsACString &server_fingerprint,
 28675:                             const nsACString &db_key);
 28675: };
 28675: 
 28675: #endif
