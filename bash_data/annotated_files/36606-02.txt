35963: //
35963: // Autogenerated from Python template.  Hands off.
35963: //
35963: 
35963: #include "IPDLUnitTests.h"
35963: 
36159: #include <stdlib.h>
35963: #include <string.h>
35963: 
35963: #include "base/command_line.h"
35963: #include "base/string_util.h"
35963: 
35963: #include "IPDLUnitTestSubprocess.h"
35963: #include "IPDLUnitTestThreadChild.h"
35963: 
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${INCLUDES}
35963: //-----------------------------------------------------------------------------
35963: 
35963: using mozilla::_ipdltest::IPDLUnitTestSubprocess;
35963: using mozilla::_ipdltest::IPDLUnitTestThreadChild;
35963: 
36606: void* mozilla::_ipdltest::gParentActor;
36606: IPDLUnitTestSubprocess* mozilla::_ipdltest::gSubprocess;
36606: 
36606: void* mozilla::_ipdltest::gChildActor;
36606: 
35963: //-----------------------------------------------------------------------------
35963: // data/functions accessed by both parent and child processes
35963: 
35963: namespace {
36165: char* gIPDLUnitTestName = NULL;
35963: }
35963: 
35963: 
35963: namespace mozilla {
35963: namespace _ipdltest {
35963: 
35963: const char* const
35963: IPDLUnitTestName()
35963: {
35963:     if (!gIPDLUnitTestName) {
36050: #if defined(OS_WIN)
35963:         std::vector<std::wstring> args =
35963:             CommandLine::ForCurrentProcess()->GetLooseValues();
36050:         gIPDLUnitTestName = strdup(WideToUTF8(args[0]).c_str());
36050: #elif defined(OS_POSIX)
36050:         std::vector<std::string> argv =
36050:             CommandLine::ForCurrentProcess()->argv();
36050:         gIPDLUnitTestName = strdup(argv[1].c_str());
35985: #else
36050: #  error Sorry
35985: #endif
35963:     }
35963:     return gIPDLUnitTestName;
35963: }
35963: 
35963: } // namespace _ipdltest
35963: } // namespace mozilla
35963: 
35963: 
35963: namespace {
35963: 
35963: enum IPDLUnitTestType {
35963:     NoneTest = 0,
35963: 
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${ENUM_VALUES}
35963:     
35963:     LastTest = ${LAST_ENUM}
35963: //-----------------------------------------------------------------------------
35963: };
35963: 
35963: 
35963: IPDLUnitTestType
35963: IPDLUnitTestFromString(const char* const aString)
35963: {
35963:     if (!aString)
35963:         return static_cast<IPDLUnitTestType>(0);
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${STRING_TO_ENUMS}
35963: //-----------------------------------------------------------------------------
35963:     else
35963:         return static_cast<IPDLUnitTestType>(0);
35963: }
35963: 
35963: 
35963: const char* const
35963: IPDLUnitTestToString(IPDLUnitTestType aTest)
35963: {
35963:     switch (aTest) {
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${ENUM_TO_STRINGS}
35963: //-----------------------------------------------------------------------------
35963: 
35963:     default:
35963:         return NULL;
35963:     }
35963: }
35963: 
35963: 
35963: IPDLUnitTestType
35963: IPDLUnitTest()
35963: {
35963:     return IPDLUnitTestFromString(mozilla::_ipdltest::IPDLUnitTestName());
35963: }
35963: 
35963: 
35963: } // namespace <anon>
35963: 
35963: 
35963: //-----------------------------------------------------------------------------
35963: // parent process only
35963: 
35963: namespace mozilla {
35963: namespace _ipdltest {
35963: 
35963: void
35963: IPDLUnitTestMain(void* aData)
35963: {
35963:     char* testString = reinterpret_cast<char*>(aData);
35963:     IPDLUnitTestType test = IPDLUnitTestFromString(testString);
35963:     if (!test) {
35963:         // use this instead of |fail()| because we don't know what the test is
35963:         fprintf(stderr, MOZ_IPDL_TESTFAIL_LABEL "| %s | unknown unit test %s\\n",
35963:                 "<--->", testString);
35963:         NS_RUNTIMEABORT("can't continue");
35963:     }
35963:     gIPDLUnitTestName = testString;
35963: 
36050:     std::vector<std::string> testCaseArgs;
36050:     testCaseArgs.push_back(testString);
35963: 
36159:     gSubprocess = new IPDLUnitTestSubprocess();
36159:     if (!gSubprocess->SyncLaunch(testCaseArgs))
35963:         fail("problem launching subprocess");
35963: 
36159:     IPC::Channel* transport = gSubprocess->GetChannel();
35963:     if (!transport)
35963:         fail("no transport");
35963: 
36159:     base::ProcessHandle child = gSubprocess->GetChildProcessHandle();
36159: 
35963:     switch (test) {
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${PARENT_MAIN_CASES}
35963: //-----------------------------------------------------------------------------
35963: 
35963:     default:
35963:         fail("not reached");
35963:         return;                 // unreached
35963:     }
35963: }
35963: 
36165: void
36606: DeleteParentActor()
36606: {
36606:     if (!gParentActor)
36606:         return;
36606: 
36606:     switch (IPDLUnitTest()) {
36606: //-----------------------------------------------------------------------------
36606: //===== TEMPLATED =====
36606: ${PARENT_DELETE_CASES}
36606: //-----------------------------------------------------------------------------
36606:     default:  mozilla::_ipdltest::fail("???");
36606:     }
36606: }
36606: 
36606: void
36606: QuitXPCOM()
36606: {
36606:   DeleteParentActor();
36606: 
36606:   static NS_DEFINE_CID(kAppShellCID, NS_APPSHELL_CID);
36606:   nsCOMPtr<nsIAppShell> appShell (do_GetService(kAppShellCID));
36606:   appShell->Exit();
36606: }
36606: 
36606: void
36606: DeleteSubprocess(MessageLoop* uiLoop)
36606: {
36606:   // pong to QuitXPCOM
36606:   delete gSubprocess;
36606:   uiLoop->PostTask(FROM_HERE, NewRunnableFunction(QuitXPCOM));
36606: }
36606: 
36606: void
36606: DeferredParentShutdown()
36606: {
36606:   // ping to DeleteSubprocess
36606:   XRE_GetIOMessageLoop()->PostTask(
36606:       FROM_HERE,
36606:       NewRunnableFunction(DeleteSubprocess, MessageLoop::current()));
36606: }
36606: 
36606: void
36165: QuitParent()
36165: {
36166:   // defer "real" shutdown to avoid *Channel::Close() racing with the
36166:   // deletion of the subprocess
36166:     MessageLoop::current()->PostTask(
36166:         FROM_HERE, NewRunnableFunction(DeferredParentShutdown));
36165: }
36165: 
35963: } // namespace _ipdltest
35963: } // namespace mozilla
35963: 
35963: 
35963: //-----------------------------------------------------------------------------
35963: // child process only
35963: 
36606: namespace mozilla {
36606: namespace _ipdltest {
36159: 
36159: void
36159: DeleteChildActor()
36159: {
36159:     if (!gChildActor)
36159:         return;
36159: 
36159:     switch (IPDLUnitTest()) {
36159: //-----------------------------------------------------------------------------
36159: //===== TEMPLATED =====
36159: ${CHILD_DELETE_CASES}
36159: //-----------------------------------------------------------------------------
36159:     default:  mozilla::_ipdltest::fail("???");
36159:     }
36159: }
36159: 
35963: void
36016: IPDLUnitTestChildInit(IPC::Channel* transport,
36016:                       base::ProcessHandle parent,
36016:                       MessageLoop* worker)
35963: {
36159:     if (atexit(DeleteChildActor))
36159:         fail("can't install atexit() handler");
36159: 
35963:     switch (IPDLUnitTest()) {
35963: //-----------------------------------------------------------------------------
35963: //===== TEMPLATED =====
35963: ${CHILD_INIT_CASES}
35963: //-----------------------------------------------------------------------------
35963: 
35963:     default:
35963:         fail("not reached");
35963:         return;                 // unreached
35963:     }
35963: }
35963: 
35963: } // namespace _ipdltest
35963: } // namespace mozilla
