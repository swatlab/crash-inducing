    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: 
    1: /**
    1:  *
    1:  * nsIMemory: interface to allocate and deallocate memory. Also provides
    1:  * for notifications in low-memory situations.
    1:  *
    1:  * The frozen exported symbols NS_Alloc, NS_Realloc, and NS_Free
    1:  * provide a more efficient way to access XPCOM memory allocation. Using
    1:  * those symbols is preferred to using the methods on this interface.
    1:  *
    1:  * A client that wishes to be notified of low memory situations (for
    1:  * example, because the client maintains a large memory cache that
    1:  * could be released when memory is tight) should register with the
    1:  * observer service (see nsIObserverService) using the topic 
    1:  * "memory-pressure". There are three specific types of notications 
    1:  * that can occur.  These types will be passed as the |aData| 
    1:  * parameter of the of the "memory-pressure" notification: 
    1:  * 
    1:  * "low-memory"
    1:  * This will be passed as the extra data when the pressure 
    1:  * observer is being asked to flush for low-memory conditions.
    1:  *
    1:  * "heap-minimize"
    1:  * This will be passed as the extra data when the pressure 
    1:  * observer is being asked to flush because of a heap minimize 
    1:  * call.
    1:  *
    1:  * "alloc-failure"
    1:  * This will be passed as the extra data when the pressure 
    1:  * observer has been asked to flush because a malloc() or 
    1:  * realloc() has failed.
    1:  */
    1: 
    1: [scriptable, uuid(59e7e77a-38e4-11d4-8cf5-0060b0fc14a3)]
    1: interface nsIMemory : nsISupports
    1: {
    1:     /**
    1:      * Allocates a block of memory of a particular size. If the memory 
89617:      * cannot be allocated (because of an out-of-memory condition), the
89617:      * process aborts.
    1:      *
    1:      * @param size - the size of the block to allocate
    1:      * @result the block of memory
    1:      */
    1:     [noscript, notxpcom] voidPtr alloc(in size_t size);
    1: 
    1:     /**
    1:      * Reallocates a block of memory to a new size.
    1:      *
    1:      * @param ptr - the block of memory to reallocate
    1:      * @param size - the new size
    1:      * @result the reallocated block of memory
    1:      *
    1:      * If ptr is null, this function behaves like malloc.
    1:      * If s is the size of the block to which ptr points, the first
    1:      * min(s, size) bytes of ptr's block are copied to the new block.
    1:      * If the allocation succeeds, ptr is freed and a pointer to the 
89617:      * new block returned.  If the allocation fails, the process aborts.
    1:      */
    1:     [noscript, notxpcom] voidPtr realloc(in voidPtr ptr,
    1:                                          in size_t newSize);
    1: 
    1:     /**
    1:      * Frees a block of memory. Null is a permissible value, in which case
    1:      * nothing happens. 
    1:      *
    1:      * @param ptr - the block of memory to free
    1:      */
    1:     [noscript, notxpcom] void free(in voidPtr ptr);
    1: 
    1:     /**
    1:      * Attempts to shrink the heap.
    1:      * @param immediate - if true, heap minimization will occur
    1:      *   immediately if the call was made on the main thread. If
    1:      *   false, the flush will be scheduled to happen when the app is
    1:      *   idle.
    1:      * @return NS_ERROR_FAILURE if 'immediate' is set an the call
    1:      *   was not on the application's main thread.
    1:      */
    1:     void heapMinimize(in boolean immediate);
    1: 
    1:     /**
    1:      * This predicate can be used to determine if we're in a low-memory
    1:      * situation (what constitutes low-memory is platform dependent). This
    1:      * can be used to trigger the memory pressure observers.
51934:      *
51934:      * DEPRECATED - Always returns false.  See bug 592308.
    1:      */
    1:     boolean isLowMemory();
    1: };
    1: 
