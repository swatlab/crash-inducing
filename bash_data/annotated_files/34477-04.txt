27812: /* -*- Mode: C; tab-width: 8; c-basic-offset: 8 -*- */
27812: /* vim:set softtabstop=8 shiftwidth=8: */
27812: /*-
27812:  * Copyright (C) 2006-2008 Jason Evans <jasone@FreeBSD.org>.
27812:  * All rights reserved.
27812:  *
27812:  * Redistribution and use in source and binary forms, with or without
27812:  * modification, are permitted provided that the following conditions
27812:  * are met:
27812:  * 1. Redistributions of source code must retain the above copyright
27812:  *    notice(s), this list of conditions and the following disclaimer as
27812:  *    the first lines of this file unmodified other than the possible
27812:  *    addition of one or more copyright notices.
27812:  * 2. Redistributions in binary form must reproduce the above copyright
27812:  *    notice(s), this list of conditions and the following disclaimer in
27812:  *    the documentation and/or other materials provided with the
27812:  *    distribution.
27812:  *
27812:  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
27812:  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
27812:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
27812:  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE
27812:  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
27812:  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
27812:  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
27812:  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
27812:  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
27812:  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
27812:  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
27812:  */
27812: 
27812: #ifndef _JEMALLOC_H_
27812: #define _JEMALLOC_H_
27812: 
27812: /* grab size_t */
27812: #ifdef _MSC_VER
27812: #include <crtdefs.h>
27806: #else
27812: #include <stddef.h>
27806: #endif
27812: 
27812: #ifdef __cplusplus
27812: extern "C" {
15458: #endif
15458: 
27812: typedef unsigned char jemalloc_bool;
27812: 
15458: extern const char	*_malloc_options;
15458: 
15458: /*
15458:  * jemalloc_stats() is not a stable interface.  When using jemalloc_stats_t, be
15458:  * sure that the compiled results of jemalloc.c are in sync with this header
15458:  * file.
15458:  */
15458: typedef struct {
15458: 	/*
15458: 	 * Run-time configuration settings.
15458: 	 */
27812: 	jemalloc_bool	opt_abort;	/* abort(3) on error? */
27812: 	jemalloc_bool	opt_junk;	/* Fill allocated/free memory with 0xa5/0x5a? */
27812: 	jemalloc_bool	opt_utrace;	/* Trace all allocation events? */
27812: 	jemalloc_bool	opt_sysv;	/* SysV semantics? */
27812: 	jemalloc_bool	opt_xmalloc;	/* abort(3) on OOM? */
27812: 	jemalloc_bool	opt_zero;	/* Fill allocated memory with 0x0? */
15458: 	size_t	narenas;	/* Number of arenas. */
15458: 	size_t	balance_threshold; /* Arena contention rebalance threshold. */
15458: 	size_t	quantum;	/* Allocation quantum. */
15458: 	size_t	small_max;	/* Max quantum-spaced allocation size. */
15458: 	size_t	large_max;	/* Max sub-chunksize allocation size. */
15458: 	size_t	chunksize;	/* Size of each virtual memory mapping. */
15458: 	size_t	dirty_max;	/* Max dirty pages per arena. */
15458: 
15458: 	/*
15458: 	 * Current memory usage statistics.
15458: 	 */
15458: 	size_t	mapped;		/* Bytes mapped (not necessarily committed). */
15458: 	size_t	committed;	/* Bytes committed (readable/writable). */
15458: 	size_t	allocated;	/* Bytes allocted (in use by application). */
15458: 	size_t	dirty;		/* Bytes dirty (committed unused pages). */
15458: } jemalloc_stats_t;
15458: 
15458: #ifndef MOZ_MEMORY_DARWIN
15458: void	*malloc(size_t size);
15458: void	*valloc(size_t size);
15458: void	*calloc(size_t num, size_t size);
15458: void	*realloc(void *ptr, size_t size);
15458: void	free(void *ptr);
15458: #endif
15458: 
15458: int	posix_memalign(void **memptr, size_t alignment, size_t size);
15458: void	*memalign(size_t alignment, size_t size);
15458: size_t	malloc_usable_size(const void *ptr);
15458: void	jemalloc_stats(jemalloc_stats_t *stats);
15610: 
27812: #ifdef __cplusplus
27812: } /* extern "C" */
27812: #endif
27812: 
27812: #endif /* _JEMALLOC_H_ */
