 97127: <?xml version="1.0"?>
 97127: <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
 97127: <?xml-stylesheet type="text/css" href="chrome://mochikit/content/tests/SimpleTest/test.css"?>
 97127: <!--
 97127: https://bugzilla.mozilla.org/show_bug.cgi?id=741267
 97127: -->
 97127: <window title="Mozilla Bug 741267"
 97127:         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 97127:   <script type="application/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
 97127: 
 97127:   <iframe id="t"></iframe>
 97127: 
 97127:   <!-- test results are displayed in the html:body -->
 97127:   <body xmlns="http://www.w3.org/1999/xhtml">
 97127:   <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=741267"
 97127:      target="_blank">Mozilla Bug 741267</a>
 97127:   </body>
 97127: 
 97127:   <!-- test code goes here -->
 97127:   <script type="application/javascript">
 97127:   <![CDATA[
 97127: 
 97127:   /** Test for Bug 741267 **/
120342:     function isXrayWrapper(x) {
120342:       return XPCNativeWrapper.unwrap(x) != x;
120342:     }
120342: 
 97127:     function doTest() {
 97127:       var win = $("t").contentWindow;
 97127:       var sandbox = Components.utils.Sandbox(win, { sandboxPrototype: win });
 97127:       try {
120342:         var css = Components.utils.evalInSandbox("CSSStyleDeclaration", sandbox);
120342:         is(css.prototype, "[object CSSStyleDeclarationPrototype]", "'CSSStyleDeclaration.prototype' in a sandbox should return the CSSStyleDeclaration interface prototype object");
 97127:       } catch (e) {
120342:         ok(false, "'CSSStyleDeclaration' shouldn't throw in a sandbox");
 97127:       }
 97127:       try {
 97127:         var et = Components.utils.evalInSandbox("EventTarget", sandbox);
120342:         ok(et, "'EventTarget' in a sandbox should return the EventTarget interface object");
120342:         ok(isXrayWrapper(et), "Getting an interface object on an Xray wrapper should return an Xray wrapper");
 97127:       } catch (e) {
 97127:         ok(false, "'EventTarget' shouldn't throw in a sandbox");
 97127:       }
 97127:       try {
120342:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest.prototype", sandbox);
120342:         ok(xhr, "'XMLHttpRequest.prototype' in a sandbox should return the XMLHttpRequest interface prototype object");
120342:         ok(isXrayWrapper(xhr), "Getting an interface prototype object on an Xray wrapper should return an Xray wrapper");
120342:         ok(isXrayWrapper(xhr.constructor), "Getting the constructor property on an Xray wrapper of an interface prototype object should return an Xray wrapper");
120342:       } catch (e) {
120342:         ok(false, "'XMLHttpRequest.prototype' shouldn't throw in a sandbox");
120342:       }
120342:       try {
120342:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest", sandbox);
120347:         xhr.prototype = false;
120347:       } catch (e) {
120347:         ok(true, "'XMLHttpRequest.prototype' should be readonly");
120347:       }
120347:       try {
120347:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest", sandbox);
120347:         delete xhr.prototype;
120347:       } catch (e) {
120347:         ok(true, "'XMLHttpRequest.prototype' should be permanent");
120347:       }
120347:       try {
120347:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest.prototype", sandbox);
120347:         xhr.constructor = "ok";
120347:       } catch (e) {
120347:         is(xhr.constructor, "ok", "'XMLHttpRequest.prototype.constructor' should be writeable");
120347:       }
120347:       try {
120347:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest.prototype", sandbox);
120347:         delete xhr.constructor;
120347:       } catch (e) {
120347:         is(xhr.constructor, undefined, "'XMLHttpRequest.prototype.constructor' should be permanent");
120347:       }
120347:       try {
120347:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest", sandbox);
120342:         is(xhr, "[object XrayWrapper " + XMLHttpRequest + "]", "'XMLHttpRequest' in a sandbox should return the XMLHttpRequest interface object");
120342:         ok(isXrayWrapper(xhr.prototype), "Getting the prototype property on an Xray wrapper of an interface object should return an Xray wrapper");
120342:       } catch (e) {
120342:         ok(false, "'XMLHttpRequest' shouldn't throw in a sandbox");
120342:       }
120342:       try {
 97127:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest()", sandbox);
120342:         is("" + xhr, "" + XMLHttpRequest(), "'XMLHttpRequest()' in a sandbox should create an XMLHttpRequest object");
120342:       } catch (e) {
120342:         ok(false, "'XMLHttpRequest()' shouldn't throw in a sandbox");
120342:       }
120342:       try {
120342:         var xhr = Components.utils.evalInSandbox("XMLHttpRequest.prototype.toString = function () { return 'Failed'; }; XMLHttpRequest();", sandbox);
120342:         is(xhr.toString(), "[object XrayWrapper " + XMLHttpRequest() + "]", "XMLHttpRequest.prototype.toString in the sandbox should not override the native toString behaviour");
120342:       } catch (e) {
120342:         ok(false, "'new XMLHttpRequest()' shouldn't throw in a sandbox");
120342:       }
120971: 
120971:       try {
120971:         // have to run this test before document.defaultView.XMLHttpRequest
120971:         // gets munged in the sandbox.
120971:         var proto = Components.utils.evalInSandbox("XMLHttpRequest.prototype", sandbox);
120971:         props = [];
120971:         for (var i in proto) {
120971:           props.push(i);
120971:         }
120971:         isnot(props.indexOf("dispatchEvent"), -1,
120971:            "'dispatchEvent' property should be enumerable on XMLHttpRequest.prototype");
120971:         props = Object.getOwnPropertyNames(proto);
120971:         is(props.indexOf("dispatchEvent"), -1,
120971:            "'dispatchEvent' is not an own property on XMLHttpRequest.prototype; it's on EventTarget.prototype")
120971:       } catch (e) {
120971:         ok(false, "XMLHttpRequest.prototype manipulation via an Xray shouldn't throw" + e);
120971:       }
120971: 
120342:       try {
120342:         Components.utils.evalInSandbox("document.defaultView.XMLHttpRequest = function() {};", sandbox);
120342:         var win = Components.utils.evalInSandbox("document.defaultView", sandbox);
120342:         var xhr = win.XMLHttpRequest();
120342:         is("" + xhr, "" + XMLHttpRequest(), "'XMLHttpRequest()' in a sandbox should create an XMLHttpRequest object");
 97127:       } catch (e) {
 97127:         ok(false, "'XMLHttpRequest()' shouldn't throw in a sandbox");
 97127:       }
105661:       try {
105661:         var canvas = Components.utils.evalInSandbox("document.createElement('canvas').getContext('2d')", sandbox);
105661:         is(canvas.DRAWWINDOW_DRAW_CARET, CanvasRenderingContext2D.DRAWWINDOW_DRAW_CARET, "Constants should be defined on DOM objects in a sandbox");
105661:       } catch (e) {
105661:         ok(false, "'document.createElement('canvas').getContext('2D')' shouldn't throw in a sandbox");
105661:       }
106988:       try {
120342:         var classList = Components.utils.evalInSandbox("document.body.className = 'a b'; document.body.classList", sandbox);
120342:         is(classList.toString(), "a b", "Stringifier should be called");
120342:       } catch (e) {
120342:         ok(false, "'document.createElement('canvas').getContext('2D')' shouldn't throw in a sandbox");
120342:       }
120342:       try {
106988:         var ctx = Components.utils.evalInSandbox("var ctx = document.createElement('canvas').getContext('2d'); ctx.foopy = 5; ctx", sandbox);
106988:         ok(!("foopy" in ctx), "We should have an Xray here");
106988:         var data = ctx.createImageData(1, 1);
106988:         for (var i = 0; i < data.data.length; ++i) {
106988:           // Watch out for premultiplied bits... just set all the alphas to 255
106988:           if (i % 4 == 3) {
106988:             data.data[i] = 255;
106988:           } else {
106988:             data.data[i] = i;
106988:           }
106988:         }
106988:         ctx.putImageData(data, 0, 0);
106988:         var data2 = ctx.getImageData(0, 0, 1, 1);
106988:         is(data2.data.length, data.data.length, "Lengths must match");
106988:         for (i = 0; i < data.data.length; ++i)
106988:           is(data.data[i], data2.data[i], "Data at " + i + " should match");
106988:       } catch (e) {
106988:         ok(false, "Imagedata manipulation via an Xray shouldn't throw " + e);
106988:       }
120971: 
120971:       try {
120971:         var list = Components.utils.evalInSandbox("document.getElementsByTagName('*')", sandbox);
120971:         props = [];
120971:         for (var i in list) {
120971:           props.push(i);
120971:         }
120971:         is(props.indexOf("constructor"), -1,
120971:            "'constructor' property should not be enumerable on list object");
120971:         props = Object.getOwnPropertyNames(list);
120971:         is(props.indexOf("constructor"), -1,
120971:            "'constructor' property should not be an own property name on list object");
120971:       } catch (e) {
120971:         ok(false, "NodeList.prototype manipulation via an Xray shouldn't throw" + e);
120971:       }
120971: 
120971:       try {
120971:         var proto = Components.utils.evalInSandbox("NodeList.prototype", sandbox);
120971:         props = [];
120971:         for (var i in proto) {
120971:           props.push(i);
120971:         }
120971:         is(props.indexOf("constructor"), -1,
120971:            "'constructor' property should not be enumerable on proto directly");
120971:         props = Object.getOwnPropertyNames(proto);
120971:         isnot(props.indexOf("constructor"), -1,
120971:               "'constructor' property should be an own property name on proto");
120971:       } catch (e) {
120971:         ok(false, "NodeList.prototype manipulation via an Xray shouldn't throw" + e);
120971:       }
120971: 
121716:       try {
121716:         var url = Components.utils.evalInSandbox("URL", sandbox);
121716:         for (var i in url) {
121716:           url[i];
121716:         }
121716:         ok(true, "We didn't crash!");
121716:       } catch (e) {
121716:         ok(false, "URL interface object manipulation via an Xray shouldn't throw" + e);
121716:       }
121716: 
 97127:       SimpleTest.finish();
 97127:     }
 97127: 
 97127:     SimpleTest.waitForExplicitFinish();
 97127:     addLoadEvent(doTest);
 97127:   ]]>
 97127:   </script>
 97127: </window>
