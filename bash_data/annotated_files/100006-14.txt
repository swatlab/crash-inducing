 70319: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 70319:  * vim: set ts=8 sw=4 et tw=99:
 70319:  */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 98983: 
 70319: 
 70319: #include "tests.h"
 70319: 
 70319: #include "vm/Stack-inl.h"
 70319: 
 70319: using namespace js;
 70319: 
 70319: static const char NORMAL_ZERO[] =
 70319:     "function f() { return arguments; }";
 70319: static const char NORMAL_ONE[] =
 70319:     "function f(a) { return arguments; }";
 70319: static const char NORMAL_TWO[] =
 70319:     "function f(a, b) { return arguments; }";
 70319: static const char NORMAL_THREE[] =
 70319:     "function f(a, b, c) { return arguments; }";
 70319: 
 70319: static const char STRICT_ZERO[] =
 70319:     "function f() { 'use strict'; return arguments; }";
 70319: static const char STRICT_ONE[] =
 70319:     "function f() { 'use strict'; return arguments; }";
 70319: static const char STRICT_TWO[] =
 70319:     "function f() { 'use strict'; return arguments; }";
 70319: static const char STRICT_THREE[] =
 70319:     "function f() { 'use strict'; return arguments; }";
 70319: 
 70319: static const char *CALL_CODES[] =
 70319:     { "f()", "f(0)", "f(0, 1)", "f(0, 1, 2)", "f(0, 1, 2, 3)", "f(0, 1, 2, 3, 4)" };
 70319: 
 70319: static const size_t MAX_ELEMS = 6;
 70319: 
 70319: static void
 70319: ClearElements(Value elems[MAX_ELEMS])
 70319: {
 70319:     for (size_t i = 0; i < MAX_ELEMS - 1; i++)
 70319:         elems[i] = NullValue();
 70319:     elems[MAX_ELEMS - 1] = Int32Value(42);
 70319: }
 70319: 
 70319: BEGIN_TEST(testArgumentsObject)
 70319: {
 70319:     return ExhaustiveTest<0>(NORMAL_ZERO) &&
 70319:            ExhaustiveTest<1>(NORMAL_ZERO) &&
 70319:            ExhaustiveTest<2>(NORMAL_ZERO) &&
 70319:            ExhaustiveTest<0>(NORMAL_ONE) &&
 70319:            ExhaustiveTest<1>(NORMAL_ONE) &&
 70319:            ExhaustiveTest<2>(NORMAL_ONE) &&
 70319:            ExhaustiveTest<3>(NORMAL_ONE) &&
 70319:            ExhaustiveTest<0>(NORMAL_TWO) &&
 70319:            ExhaustiveTest<1>(NORMAL_TWO) &&
 70319:            ExhaustiveTest<2>(NORMAL_TWO) &&
 70319:            ExhaustiveTest<3>(NORMAL_TWO) &&
 70319:            ExhaustiveTest<4>(NORMAL_TWO) &&
 70319:            ExhaustiveTest<0>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<1>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<2>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<3>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<4>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<5>(NORMAL_THREE) &&
 70319:            ExhaustiveTest<0>(STRICT_ZERO) &&
 70319:            ExhaustiveTest<1>(STRICT_ZERO) &&
 70319:            ExhaustiveTest<2>(STRICT_ZERO) &&
 70319:            ExhaustiveTest<0>(STRICT_ONE) &&
 70319:            ExhaustiveTest<1>(STRICT_ONE) &&
 70319:            ExhaustiveTest<2>(STRICT_ONE) &&
 70319:            ExhaustiveTest<3>(STRICT_ONE) &&
 70319:            ExhaustiveTest<0>(STRICT_TWO) &&
 70319:            ExhaustiveTest<1>(STRICT_TWO) &&
 70319:            ExhaustiveTest<2>(STRICT_TWO) &&
 70319:            ExhaustiveTest<3>(STRICT_TWO) &&
 70319:            ExhaustiveTest<4>(STRICT_TWO) &&
 70319:            ExhaustiveTest<0>(STRICT_THREE) &&
 70319:            ExhaustiveTest<1>(STRICT_THREE) &&
 70319:            ExhaustiveTest<2>(STRICT_THREE) &&
 70319:            ExhaustiveTest<3>(STRICT_THREE) &&
 70319:            ExhaustiveTest<4>(STRICT_THREE) &&
 70319:            ExhaustiveTest<5>(STRICT_THREE);
 70319: }
 70319: 
 70319: template<size_t ArgCount> bool
 70319: ExhaustiveTest(const char funcode[])
 70319: {
 70319:     jsval v;
 70319:     EVAL(funcode, &v);
 70319: 
 70319:     EVAL(CALL_CODES[ArgCount], &v);
 86483:     ArgumentsObject &argsobj = JSVAL_TO_OBJECT(v)->asArguments();
 70319: 
 70319:     Value elems[MAX_ELEMS];
 70319: 
 70319:     for (size_t i = 0; i <= ArgCount; i++) {
 70319:         for (size_t j = 0; j <= ArgCount - i; j++) {
 70319:             ClearElements(elems);
100006:             CHECK(argsobj.getElements(i, j, elems));
 70319:             for (size_t k = 0; k < j; k++)
 78614:                 CHECK_SAME(elems[k], INT_TO_JSVAL(i + k));
 70319:             for (size_t k = j; k < MAX_ELEMS - 1; k++)
 78614:                 CHECK_SAME(elems[k], JSVAL_NULL);
 78614:             CHECK_SAME(elems[MAX_ELEMS - 1], INT_TO_JSVAL(42));
 70319:         }
 70319:     }
 70319: 
 70319:     return true;
 70319: }
 70319: END_TEST(testArgumentsObject)
