    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "CharDistribution.h"
    1: 
    1: #include "JISFreq.tab"
    1: #include "Big5Freq.tab"
    1: #include "EUCKRFreq.tab"
    1: #include "EUCTWFreq.tab"
    1: #include "GB2312Freq.tab"
    1: 
    1: #define SURE_YES 0.99f
    1: #define SURE_NO  0.01f
    1: 
    1: //return confidence base on received data
38413: float CharDistributionAnalysis::GetConfidence(void)
    1: { 
    1:   //if we didn't receive any character in our consideration range, or the
    1:   // number of frequent characters is below the minimum threshold, return
    1:   // negative answer
38413:   if (mTotalChars <= 0 || mFreqChars <= mDataThreshold)
    1:     return SURE_NO;
    1: 
    1:   if (mTotalChars != mFreqChars) {
    1:     float r = mFreqChars / ((mTotalChars - mFreqChars) * mTypicalDistributionRatio);
    1: 
    1:     if (r < SURE_YES)
    1:       return r;
    1:   }
    1:   //normalize confidence, (we don't want to be 100% sure)
    1:   return SURE_YES;
    1: }
    1: 
    1: EUCTWDistributionAnalysis::EUCTWDistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = EUCTWCharToFreqOrder;
    1:   mTableSize = EUCTW_TABLE_SIZE;
    1:   mTypicalDistributionRatio = EUCTW_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
    1: EUCKRDistributionAnalysis::EUCKRDistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = EUCKRCharToFreqOrder;
    1:   mTableSize = EUCKR_TABLE_SIZE;
    1:   mTypicalDistributionRatio = EUCKR_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
    1: GB2312DistributionAnalysis::GB2312DistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = GB2312CharToFreqOrder;
    1:   mTableSize = GB2312_TABLE_SIZE;
    1:   mTypicalDistributionRatio = GB2312_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
    1: Big5DistributionAnalysis::Big5DistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = Big5CharToFreqOrder;
    1:   mTableSize = BIG5_TABLE_SIZE;
    1:   mTypicalDistributionRatio = BIG5_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
    1: SJISDistributionAnalysis::SJISDistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = JISCharToFreqOrder;
    1:   mTableSize = JIS_TABLE_SIZE;
    1:   mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
    1: EUCJPDistributionAnalysis::EUCJPDistributionAnalysis()
    1: {
    1:   mCharToFreqOrder = JISCharToFreqOrder;
    1:   mTableSize = JIS_TABLE_SIZE;
    1:   mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO;
    1: }
    1: 
