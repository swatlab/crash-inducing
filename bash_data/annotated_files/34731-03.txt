    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim:set ts=2 sw=2 sts=2 et cindent: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla code.
    1:  *
    1:  * The Initial Developer of the Original Code is Google Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *  Darin Fisher <darin@meer.net>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsThreadUtils.h"
    1: 
    1: #ifdef MOZILLA_INTERNAL_API
    1: # include "nsThreadManager.h"
    1: #else
    1: # include "nsXPCOMCIDInternal.h"
    1: # include "nsIThreadManager.h"
    1: # include "nsServiceManagerUtils.h"
    1: #endif
    1: 
34731: #ifdef XP_WIN
34731: #include <windows.h>
34731: #endif
34731: 
    1: #ifndef XPCOM_GLUE_AVOID_NSPR
    1: 
    1: NS_IMPL_THREADSAFE_ISUPPORTS1(nsRunnable, nsIRunnable)
    1:   
    1: NS_IMETHODIMP
    1: nsRunnable::Run()
    1: {
    1:   // Do nothing
    1:   return NS_OK;
    1: }
    1: 
    1: #endif  // XPCOM_GLUE_AVOID_NSPR
    1: 
    1: //-----------------------------------------------------------------------------
    1: 
    1: NS_METHOD
    1: NS_NewThread(nsIThread **result, nsIRunnable *event)
    1: {
    1:   nsCOMPtr<nsIThread> thread;
    1: #ifdef MOZILLA_INTERNAL_API
    1:   nsresult rv = nsThreadManager::get()->
    1:       nsThreadManager::NewThread(0, getter_AddRefs(thread));
    1: #else
    1:   nsresult rv;
    1:   nsCOMPtr<nsIThreadManager> mgr =
    1:       do_GetService(NS_THREADMANAGER_CONTRACTID, &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   rv = mgr->NewThread(0, getter_AddRefs(thread));
    1: #endif
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (event) {
    1:     rv = thread->Dispatch(event, NS_DISPATCH_NORMAL);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1:   }
    1: 
    1:   *result = nsnull;
    1:   thread.swap(*result);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_METHOD
    1: NS_GetCurrentThread(nsIThread **result)
    1: {
    1: #ifdef MOZILLA_INTERNAL_API
    1:   return nsThreadManager::get()->nsThreadManager::GetCurrentThread(result);
    1: #else
    1:   nsresult rv;
    1:   nsCOMPtr<nsIThreadManager> mgr =
    1:       do_GetService(NS_THREADMANAGER_CONTRACTID, &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   return mgr->GetCurrentThread(result);
    1: #endif
    1: }
    1: 
    1: NS_METHOD
    1: NS_GetMainThread(nsIThread **result)
    1: {
    1: #ifdef MOZILLA_INTERNAL_API
    1:   return nsThreadManager::get()->nsThreadManager::GetMainThread(result);
    1: #else
    1:   nsresult rv;
    1:   nsCOMPtr<nsIThreadManager> mgr =
    1:       do_GetService(NS_THREADMANAGER_CONTRACTID, &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   return mgr->GetMainThread(result);
    1: #endif
    1: }
    1: 
34250: #ifndef MOZILLA_INTERNAL_API
34250: bool NS_IsMainThread()
    1: {
    1:   PRBool result = PR_FALSE;
    1:   nsCOMPtr<nsIThreadManager> mgr =
    1:     do_GetService(NS_THREADMANAGER_CONTRACTID);
    1:   if (mgr)
    1:     mgr->GetIsMainThread(&result);
34250:   return bool(result);
34250: }
34731: #elif defined(XP_WIN)
34731: extern DWORD gTLSIsMainThreadIndex;
34731: bool
34731: NS_IsMainThread()
34731: {
34731:   return !!TlsGetValue(gTLSIsMainThreadIndex);
34731: }
34250: #elif !defined(NS_TLS)
34250: bool NS_IsMainThread()
34250: {
34250:   PRBool result = PR_FALSE;
34250:   nsThreadManager::get()->nsThreadManager::GetIsMainThread(&result);
34250:   return bool(result);
34250: }
34250: #elif !defined(MOZ_ENABLE_LIBXUL)
34250: bool NS_IsMainThread()
34250: {
34250:   return gTLSIsMainThread;
34250: }
    1: #endif
    1: 
    1: NS_METHOD
    1: NS_DispatchToCurrentThread(nsIRunnable *event)
    1: {
    1: #ifdef MOZILLA_INTERNAL_API
    1:   nsIThread *thread = NS_GetCurrentThread();
12014:   if (!thread) { return NS_ERROR_UNEXPECTED; }
    1: #else
    1:   nsCOMPtr<nsIThread> thread;
    1:   nsresult rv = NS_GetCurrentThread(getter_AddRefs(thread));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: #endif
    1:   return thread->Dispatch(event, NS_DISPATCH_NORMAL);
    1: }
    1: 
    1: NS_METHOD
    1: NS_DispatchToMainThread(nsIRunnable *event, PRUint32 dispatchFlags)
    1: {
    1:   nsCOMPtr<nsIThread> thread;
    1:   nsresult rv = NS_GetMainThread(getter_AddRefs(thread));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   return thread->Dispatch(event, dispatchFlags);
    1: }
    1: 
  261: #ifndef XPCOM_GLUE_AVOID_NSPR
    1: NS_METHOD
    1: NS_ProcessPendingEvents(nsIThread *thread, PRIntervalTime timeout)
    1: {
    1:   nsresult rv = NS_OK;
    1: 
    1: #ifdef MOZILLA_INTERNAL_API
    1:   if (!thread) {
    1:     thread = NS_GetCurrentThread();
    1:     NS_ENSURE_STATE(thread);
    1:   }
    1: #else
    1:   nsCOMPtr<nsIThread> current;
    1:   if (!thread) {
    1:     rv = NS_GetCurrentThread(getter_AddRefs(current));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1:     thread = current.get();
    1:   }
    1: #endif
    1: 
    1:   PRIntervalTime start = PR_IntervalNow();
    1:   for (;;) {
    1:     PRBool processedEvent;
    1:     rv = thread->ProcessNextEvent(PR_FALSE, &processedEvent);
    1:     if (NS_FAILED(rv) || !processedEvent)
    1:       break;
    1:     if (PR_IntervalNow() - start > timeout)
    1:       break;
    1:   }
    1:   return rv;
    1: }
  261: #endif // XPCOM_GLUE_AVOID_NSPR
    1: 
23294: inline PRBool
23294: hasPendingEvents(nsIThread *thread)
23294: {
23294:   PRBool val;
23294:   return NS_SUCCEEDED(thread->HasPendingEvents(&val)) && val;
23294: }
23294: 
    1: PRBool
    1: NS_HasPendingEvents(nsIThread *thread)
    1: {
    1:   if (!thread) {
23294: #ifndef MOZILLA_INTERNAL_API
23294:     nsCOMPtr<nsIThread> current;
23294:     NS_GetCurrentThread(getter_AddRefs(current));
23294:     return hasPendingEvents(current);
23294: #else
    1:     thread = NS_GetCurrentThread();
 7059:     NS_ENSURE_TRUE(thread, PR_FALSE);
23294: #endif
    1:   }
23294:   return hasPendingEvents(thread);
    1: }
    1: 
    1: PRBool
    1: NS_ProcessNextEvent(nsIThread *thread, PRBool mayWait)
    1: {
    1: #ifdef MOZILLA_INTERNAL_API
    1:   if (!thread) {
    1:     thread = NS_GetCurrentThread();
 7059:     NS_ENSURE_TRUE(thread, PR_FALSE);
    1:   }
    1: #else
    1:   nsCOMPtr<nsIThread> current;
    1:   if (!thread) {
    1:     NS_GetCurrentThread(getter_AddRefs(current));
    1:     NS_ENSURE_TRUE(current, PR_FALSE);
    1:     thread = current.get();
    1:   }
    1: #endif
    1:   PRBool val;
    1:   return NS_SUCCEEDED(thread->ProcessNextEvent(mayWait, &val)) && val;
    1: }
    1: 
    1: #ifdef MOZILLA_INTERNAL_API
    1: nsIThread *
    1: NS_GetCurrentThread() {
    1:   return nsThreadManager::get()->GetCurrentThread();
    1: }
    1: #endif
