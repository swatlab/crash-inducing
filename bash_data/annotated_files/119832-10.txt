 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 69383: 
 69383: #ifndef _nsCERTValInParamWrapper_H
 69383: #define _nsCERTValInParamWrapper_H
 69383: 
 69383: #include "nsISupports.h"
 69383: #include "cert.h"
 69383: 
 69383: /*
 69383:  * This is a wrapper around type
 69383:  * CERTValInParam is a nested input parameter type for CERT_PKIXVerifyCert.
 69383:  * The values inside this type depend on application preferences,
 69383:  * as a consequence it's expensive to construct this object.
 69383:  * (and we shall avoid to access prefs from secondary threads anyway).
 69383:  * We want to create an instance of that input type once, and use as long as possible.
 69383:  * Every time the preferences change, we will create a new default object.
 69383:  *
 69383:  * A race is possible between "verification function is active and object in use"
 69383:  * and "must switch to new defaults".
 69383:  *
 69383:  * The global default object may be replaced at any time with a new object.
 69383:  * The contents of inner CERTValInParam are supposed to be stable (const).
 69383:  *
 69383:  * In order to protect against the race, we use a reference counted wrapper.
 69383:  * Each user of a foreign nsCERTValInParamWrapper object
 69383:  * (e.g. the current global default object)
119832:  * must use nsRefPtr<nsCERTValInParamWrapper> = other-object
 69383:  * prior to calling CERT_PKIXVerifyCert.
 69383:  * 
 69383:  * This guarantees the object will still be alive after the call,
 69383:  * and if the default object has been replaced in the meantime,
 69383:  * the reference counter will go to zero, and the old default
 69383:  * object will get destroyed automatically.
 69383:  */
 69383: class nsCERTValInParamWrapper
 69383: {
 69383:  public:
 69383:     NS_IMETHOD_(nsrefcnt) AddRef();
 69383:     NS_IMETHOD_(nsrefcnt) Release();
 69383: 
 69383: public:
 69383:   nsCERTValInParamWrapper();
 69383:   virtual ~nsCERTValInParamWrapper();
 69383: 
 69383:   enum missing_cert_download_config { missing_cert_download_off = 0, missing_cert_download_on };
 69383:   enum crl_download_config { crl_local_only = 0, crl_download_allowed };
 69383:   enum ocsp_download_config { ocsp_off = 0, ocsp_on };
 69383:   enum ocsp_strict_config { ocsp_relaxed = 0, ocsp_strict };
 69383:   enum any_revo_fresh_config { any_revo_relaxed = 0, any_revo_strict };
 69383: 
 69383:   nsresult Construct(missing_cert_download_config ac, crl_download_config cdc,
 69383:                      ocsp_download_config odc, ocsp_strict_config osc,
 69383:                      any_revo_fresh_config arfc,
 69383:                      const char *firstNetworkRevocationMethod);
 69383: 
 69383: private:
 69383:   nsAutoRefCnt mRefCnt;
 69383:   NS_DECL_OWNINGTHREAD
 79445:   bool mAlreadyConstructed;
 69383:   CERTValInParam *mCVIN;
 69383:   CERTRevocationFlags *mRev;
 69383:   
 69383: public:
 69383:   CERTValInParam *GetRawPointerForNSS() { return mCVIN; }
 69383: };
 69383: 
 69383: #endif
