 3639: /* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- /
    1: /* vim: set shiftwidth=4 tabstop=8 autoindent cindent expandtab: */
98983: /* This Source Code Form is subject to the terms of the Mozilla Public
98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
    1: 
85969: #if BOOTSTRAP
85969: var EXPORTED_SYMBOLS = ["OnRefTestLoad"];
85969: #endif
85969: 
85969: 
    1: const CC = Components.classes;
    1: const CI = Components.interfaces;
    1: const CR = Components.results;
    1: 
    1: const XHTML_NS = "http://www.w3.org/1999/xhtml";
61873: const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
    1: 
    1: const NS_LOCAL_FILE_CONTRACTID = "@mozilla.org/file/local;1";
50526: const NS_GFXINFO_CONTRACTID = "@mozilla.org/gfx/info;1";
    1: const IO_SERVICE_CONTRACTID = "@mozilla.org/network/io-service;1";
23486: const DEBUG_CONTRACTID = "@mozilla.org/xpcom/debug;1";
    1: const NS_LOCALFILEINPUTSTREAM_CONTRACTID =
    1:           "@mozilla.org/network/file-input-stream;1";
 2300: const NS_SCRIPTSECURITYMANAGER_CONTRACTID =
 2300:           "@mozilla.org/scriptsecuritymanager;1";
 4221: const NS_REFTESTHELPER_CONTRACTID =
 4221:           "@mozilla.org/reftest-helper;1";
16457: const NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX =
16457:           "@mozilla.org/network/protocol;1?name=";
24547: const NS_XREAPPINFO_CONTRACTID =
24547:           "@mozilla.org/xre/app-info;1";
68874: const NS_DIRECTORY_SERVICE_CONTRACTID =
68874:           "@mozilla.org/file/directory_service;1";
68874: const NS_OBSERVER_SERVICE_CONTRACTID =
68874:           "@mozilla.org/observer-service;1";
24547: 
85110: Components.utils.import("resource://gre/modules/FileUtils.jsm");        
85110: 
29396: var gLoadTimeout = 0;
59485: var gTimeoutHook = null;
39369: var gRemote = false;
73770: var gIgnoreWindowSize = false;
39987: var gTotalChunks = 0;
39987: var gThisChunk = 0;
84623: var gContainingWindow = null;
    1: 
24889: // "<!--CLEAR-->"
24889: const BLANK_URL_FOR_CLEARING = "data:text/html,%3C%21%2D%2DCLEAR%2D%2D%3E";
24889: 
    1: var gBrowser;
61873: // Are we testing web content loaded in a separate process?
61873: var gBrowserIsRemote;           // bool
61873: var gBrowserMessageManager;
22863: var gCanvas1, gCanvas2;
23350: // gCurrentCanvas is non-null between InitCurrentCanvasWithSnapshot and the next
59485: // RecordResult.
23350: var gCurrentCanvas = null;
    1: var gURLs;
22490: // Map from URI spec to the number of times it remains to be used
22490: var gURIUseCounts;
22490: // Map from URI spec to the canvas rendered for that URI
22490: var gURICanvases;
22153: var gTestResults = {
22712:   // Successful...
22712:   Pass: 0,
22712:   LoadOnly: 0,
22712:   // Unexpected...
22153:   Exception: 0,
22153:   FailedLoad: 0,
22153:   UnexpectedFail: 0,
22153:   UnexpectedPass: 0,
23486:   AssertionUnexpected: 0,
23486:   AssertionUnexpectedFixed: 0,
22712:   // Known problems...
22153:   KnownFail : 0,
23486:   AssertionKnown: 0,
22153:   Random : 0,
22153:   Skip: 0,
48630:   Slow: 0,
22153: };
16063: var gTotalTests = 0;
    1: var gState;
20632: var gCurrentURL;
59488: var gTestLog = [];
 3639: var gServer;
 3639: var gCount = 0;
23486: var gAssertionCount = 0;
 3639: 
 3639: var gIOService;
23486: var gDebug;
22197: var gWindowUtils;
    1: 
14795: var gSlowestTestTime = 0;
14795: var gSlowestTestURL;
14795: 
46327: var gDrawWindowFlags;
46327: 
68874: var gExpectingProcessCrash = false;
68874: var gExpectedCrashDumpFiles = [];
68874: var gUnexpectedCrashDumpFiles = { };
68874: var gCrashDumpDir;
68874: 
31676: const TYPE_REFTEST_EQUAL = '==';
31676: const TYPE_REFTEST_NOTEQUAL = '!=';
31676: const TYPE_LOAD = 'load';     // test without a reference (just test that it does
31676:                               // not assert, crash, hang, or leak)
31676: const TYPE_SCRIPT = 'script'; // test contains individual test results
31676: 
64468: // The order of these constants matters, since when we have a status
64468: // listed for a *manifest*, we combine the status with the status for
64468: // the test by using the *larger*.  
64468: // FIXME: In the future, we may also want to use this rule for combining
64468: // statuses that are on the same line (rather than making the last one
64468: // win).
    1: const EXPECTED_PASS = 0;
    1: const EXPECTED_FAIL = 1;
    1: const EXPECTED_RANDOM = 2;
 1277: const EXPECTED_DEATH = 3;  // test must be skipped to avoid e.g. crash/hang
87509: const EXPECTED_FUZZY = 4;
    1: 
86299: // types of preference value we might want to set for a specific test
86299: const PREF_BOOLEAN = 0;
86299: const PREF_STRING  = 1;
86299: const PREF_INTEGER = 2;
86299: 
86299: var gPrefsToRestore = [];
86299: 
33535: const gProtocolRE = /^\w+:/;
33535: 
24706: var HTTP_SERVER_PORT = 4444;
24706: const HTTP_SERVER_PORTS_TO_TRY = 50;
 3639: 
48630: // whether to run slow tests or not
48630: var gRunSlowTests = true;
48630: 
32968: // whether we should skip caching canvases
32968: var gNoCanvasCache = false;
32968: 
22490: var gRecycledCanvases = new Array();
22490: 
48233: // By default we just log to stdout
48233: var gDumpLog = dump;
71590: var gVerbose = false;
48233: 
61873: // Only dump the sandbox once, because it doesn't depend on the
61873: // manifest URL (yet!).
61873: var gDumpedConditionSandbox = false;
61873: 
59488: function LogWarning(str)
59488: {
59488:     gDumpLog("REFTEST INFO | " + str + "\n");
59488:     gTestLog.push(str);
59488: }
59488: 
59488: function LogInfo(str)
59488: {
71590:     if (gVerbose)
71590:         gDumpLog("REFTEST INFO | " + str + "\n");
59488:     gTestLog.push(str);
59488: }
59488: 
59488: function FlushTestLog()
59488: {
71590:     if (!gVerbose) {
71590:         // In verbose mode, we've dumped all these messages already.
59488:         for (var i = 0; i < gTestLog.length; ++i) {
59488:             gDumpLog("REFTEST INFO | Saved log: " + gTestLog[i] + "\n");
59488:         }
71590:     }
59488:     gTestLog = [];
59488: }
59488: 
22490: function AllocateCanvas()
22490: {
22490:     if (gRecycledCanvases.length > 0)
22490:         return gRecycledCanvases.shift();
22490: 
84623:     var canvas = gContainingWindow.document.createElementNS(XHTML_NS, "canvas");
47729:     var r = gBrowser.getBoundingClientRect();
47729:     canvas.setAttribute("width", Math.ceil(r.width));
47729:     canvas.setAttribute("height", Math.ceil(r.height));
32968: 
22490:     return canvas;
22490: }
22490: 
22490: function ReleaseCanvas(canvas)
22490: {
32968:     // store a maximum of 2 canvases, if we're not caching
32968:     if (!gNoCanvasCache || gRecycledCanvases.length < 2)
22490:         gRecycledCanvases.push(canvas);
22490: }
22490: 
59488: function IDForEventTarget(event)
59488: {
59488:     try {
59488:         return "'" + event.target.getAttribute('id') + "'";
59488:     } catch (ex) {
59488:         return "<unknown>";
59488:     }
59488: }
59488: 
85969: function OnRefTestLoad(win)
54222: {
68874:     gCrashDumpDir = CC[NS_DIRECTORY_SERVICE_CONTRACTID]
68874:                     .getService(CI.nsIProperties)
68874:                     .get("ProfD", CI.nsIFile);
68874:     gCrashDumpDir.append("minidumps");
68874:     
71590:     var env = CC["@mozilla.org/process/environment;1"].
71590:               getService(CI.nsIEnvironment);
71590:     gVerbose = !!env.get("MOZ_REFTEST_VERBOSE");
71590: 
61873:     var prefs = Components.classes["@mozilla.org/preferences-service;1"].
90038:                 getService(Components.interfaces.nsIPrefBranch);
61873:     try {
61873:         gBrowserIsRemote = prefs.getBoolPref("browser.tabs.remote");
61873:     } catch (e) {
61873:         gBrowserIsRemote = false;
54222:     }
54222:     
85969:     if (win === undefined || win == null) {
85969:       win = window;
85969:     }
85969:     if (gContainingWindow == null && win != null) {
85969:       gContainingWindow = win;
84623:     }
84623: 
84623:     gBrowser = gContainingWindow.document.createElementNS(XUL_NS, "xul:browser");
61873:     gBrowser.setAttribute("id", "browser");
61873:     gBrowser.setAttribute("type", "content-primary");
61873:     gBrowser.setAttribute("remote", gBrowserIsRemote ? "true" : "false");
61873:     // Make sure the browser element is exactly 800x1000, no matter
61873:     // what size our window is
61873:     gBrowser.setAttribute("style", "min-width: 800px; min-height: 1000px; max-width: 800px; max-height: 1000px");
61873: 
85969: #if BOOTSTRAP
85969:     var doc = gContainingWindow.document.getElementById('main-window');
85969:     while (doc.hasChildNodes()) {
85969:       doc.removeChild(doc.firstChild);
85969:     }
85969:     doc.appendChild(gBrowser);
85969: #else
61873:     document.getElementById("reftest-window").appendChild(gBrowser);
85969: #endif
61873: 
61873:     gBrowserMessageManager = gBrowser.QueryInterface(CI.nsIFrameLoaderOwner)
61873:                              .frameLoader.messageManager;
61873:     // The content script waits for the initial onload, then notifies
61873:     // us.
61873:     RegisterMessageListenersAndLoadContentScript();
54222: }
54222: 
61873: function InitAndStartRefTests()
    1: {
79011:     /* These prefs are optional, so we don't need to spit an error to the log */
29396:     try {
29396:         var prefs = Components.classes["@mozilla.org/preferences-service;1"].
90038:                     getService(Components.interfaces.nsIPrefBranch);
79011:     } catch(e) {
79011:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + e + "\n");
79011:     }
79011:     
79011:     /* set the gLoadTimeout */
79011:     try {
29396:         gLoadTimeout = prefs.getIntPref("reftest.timeout");
79011:     } catch(e) { 
79011:         gLoadTimeout = 5 * 60 * 1000; //5 minutes as per bug 479518
79011:     }
79011:     
79011:     /* Get the logfile for android tests */
79011:     try {
95070:         var logFile = prefs.getCharPref("reftest.logFile");
48233:         if (logFile) {
48233:             try {
85110:                 var f = FileUtils.File(logFile);
85110:                 var mfl = FileUtils.openFileOutputStream(f, FileUtils.MODE_WRONLY | FileUtils.MODE_CREATE);  
48233:                 // Set to mirror to stdout as well as the file
85110:                 gDumpLog = function (msg) {
85969: #if BOOTSTRAP
85969:                     //NOTE: on android-xul, we have a libc crash if we do a dump with %7s in the string
85969: #else
85110:                     dump(msg); 
85969: #endif
85110:                     mfl.write(msg, msg.length);
85110:                 };
48233:             }
48233:             catch(e) {
48233:                 // If there is a problem, just use stdout
48233:                 gDumpLog = dump;
48233:             }
48233:         }
79011:     } catch(e) {}
79011:     
79011:     try {
39369:         gRemote = prefs.getBoolPref("reftest.remote");
79011:     } catch(e) { 
79011:         gRemote = false;
29396:     }
29396: 
79011:     try {
79011:         gIgnoreWindowSize = prefs.getBoolPref("reftest.ignoreWindowSize");
79011:     } catch(e) {
79011:         gIgnoreWindowSize = false;
79011:     }
39987: 
40618:     /* Support for running a chunk (subset) of tests.  In separate try as this is optional */
39987:     try {
39987:         gTotalChunks = prefs.getIntPref("reftest.totalChunks");
39987:         gThisChunk = prefs.getIntPref("reftest.thisChunk");
39987:     }
39987:     catch(e) {
39987:         gTotalChunks = 0;
39987:         gThisChunk = 0;
39987:     }
39987: 
84623:     gWindowUtils = gContainingWindow.QueryInterface(CI.nsIInterfaceRequestor).getInterface(CI.nsIDOMWindowUtils);
87508:     if (!gWindowUtils || !gWindowUtils.compareCanvases)
87508:         throw "nsIDOMWindowUtils inteface missing";
 4221: 
 3639:     gIOService = CC[IO_SERVICE_CONTRACTID].getService(CI.nsIIOService);
23486:     gDebug = CC[DEBUG_CONTRACTID].getService(CI.nsIDebug2);
39369: 
68874:     RegisterProcessCrashObservers();
68874: 
39369:     if (gRemote) {
39369:         gServer = null;
39369:     } else {
24706:         gServer = CC["@mozilla.org/server/jshttp;1"].
24706:                       createInstance(CI.nsIHttpServer);
39369:     }
    1:     try {
27361:         if (gServer)
27361:             StartHTTPServer();
27361:     } catch (ex) {
27361:         //gBrowser.loadURI('data:text/plain,' + ex);
27361:         ++gTestResults.Exception;
48233:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + ex + "\n");
27361:         DoneTests();
27361:     }
27361: 
39951:     // Focus the content browser
39951:     gBrowser.focus();
39951: 
27361:     StartTests();
27361: }
27361: 
27361: function StartHTTPServer()
27361: {
24706:     gServer.registerContentType("sjs", "sjs");
24706:     // We want to try different ports in case the port we want
24706:     // is being used.
24706:     var tries = HTTP_SERVER_PORTS_TO_TRY;
24706:     do {
24706:         try {
24706:             gServer.start(HTTP_SERVER_PORT);
27361:             return;
24706:         } catch (ex) {
24706:             ++HTTP_SERVER_PORT;
27361:             if (--tries == 0)
24706:                 throw ex;
24706:         }
27361:     } while (true);
24706: }
27361: 
27361: function StartTests()
27361: {
91968:     var uri;
85969: #if BOOTSTRAP
85969:     /* These prefs are optional, so we don't need to spit an error to the log */
85969:     try {
85969:         var prefs = Components.classes["@mozilla.org/preferences-service;1"].
90038:                     getService(Components.interfaces.nsIPrefBranch);
85969:     } catch(e) {
85969:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + e + "\n");
85969:     }
85969:     
85969:     try {
85969:         gNoCanvasCache = prefs.getIntPref("reftest.nocache");
85969:     } catch(e) { 
85969:         gNoCanvasCache = false;
85969:     }
85969: 
85969:     try {
85969:         gRunSlowTests = prefs.getIntPref("reftest.skipslowtests");
85969:     } catch(e) { 
85969:         gRunSlowTests = false;
85969:     }
85969: 
85969:     try {
85969:         uri = prefs.getCharPref("reftest.uri");
85969:     } catch(e) { 
85969:         uri = "";
85969:     }
85969: 
85969:     if (uri == "") {
85969:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | Unable to find reftest.uri pref.  Please ensure your profile is setup properly\n");
85969:         DoneTests();
85969:     }
85969: #else
27361:     try {
24706:         // Need to read the manifest once we have the final HTTP_SERVER_PORT.
33421:         var args = window.arguments[0].wrappedJSObject;
32968: 
32968:         if ("nocache" in args && args["nocache"])
32968:             gNoCanvasCache = true;
32968: 
48630:         if ("skipslowtests" in args && args.skipslowtests)
48630:             gRunSlowTests = false;
48630: 
85969:         uri = args.uri;
85969:     } catch (e) {
85969:         ++gTestResults.Exception;
85969:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + ex + "\n");
85969:         DoneTests();
85969:     }
85969: #endif
85969: 
85969:     try {
85969:         ReadTopManifest(uri);
22490:         BuildUseCounts();
39987: 
39987:         if (gTotalChunks > 0 && gThisChunk > 0) {
39987:             var testsPerChunk = gURLs.length / gTotalChunks;
39987:             var start = Math.round((gThisChunk-1) * testsPerChunk);
39987:             var end = Math.round(gThisChunk * testsPerChunk);
39987:             gURLs = gURLs.slice(start, end);
48233:             gDumpLog("REFTEST INFO | Running chunk " + gThisChunk + " out of " + gTotalChunks + " chunks.  ")
48233:             gDumpLog("tests " + (start+1) + "-" + end + "/" + gURLs.length + "\n");
39987:         }
16063:         gTotalTests = gURLs.length;
28335: 
28335:         if (!gTotalTests)
28335:             throw "No tests to run";
28335: 
22490:         gURICanvases = {};
    1:         StartCurrentTest();
    1:     } catch (ex) {
 4149:         //gBrowser.loadURI('data:text/plain,' + ex);
22153:         ++gTestResults.Exception;
48233:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + ex + "\n");
 4149:         DoneTests();
    1:     }
    1: }
    1: 
    1: function OnRefTestUnload()
    1: {
    1: }
    1: 
39369: // Read all available data from an input stream and return it
39369: // as a string.
39369: function getStreamContent(inputStream)
39369: {
39369:     var streamBuf = "";
39369:     var sis = CC["@mozilla.org/scriptableinputstream;1"].
39369:                   createInstance(CI.nsIScriptableInputStream);
39369:     sis.init(inputStream);
39369: 
39369:     var available;
39369:     while ((available = sis.available()) != 0) {
39369:         streamBuf += sis.read(available);
39369:     }
39369: 
39369:     return streamBuf;
39369: }
39369: 
16457: // Build the sandbox for fails-if(), etc., condition evaluation.
43353: function BuildConditionSandbox(aURL) {
40016:     var sandbox = new Components.utils.Sandbox(aURL.spec);
24547:     var xr = CC[NS_XREAPPINFO_CONTRACTID].getService(CI.nsIXULRuntime);
31675:     sandbox.isDebugBuild = gDebug.isDebugBuild;
61692:     sandbox.xulRuntime = {widgetToolkit: xr.widgetToolkit, OS: xr.OS, __exposedProps__: { widgetToolkit: "r", OS: "r", XPCOMABI: "r", shell: "r" } };
29396: 
34099:     // xr.XPCOMABI throws exception for configurations without full ABI
34099:     // support (mobile builds on ARM)
29396:     try {
34099:         sandbox.xulRuntime.XPCOMABI = xr.XPCOMABI;
34099:     } catch(e) {
34099:         sandbox.xulRuntime.XPCOMABI = "";
34099:     }
29396:  
87512:     
87512:     var gfxInfo = (NS_GFXINFO_CONTRACTID in CC) && CC[NS_GFXINFO_CONTRACTID].getService(CI.nsIGfxInfo);
50526:     try {
87512:       sandbox.d2d = gfxInfo.D2DEnabled;
50526:     } catch (e) {
50526:       sandbox.d2d = false;
50526:     }
87512:     sandbox.azureQuartz = gfxInfo.getInfo().AzureBackend == "quartz";
50526: 
64535:     sandbox.layersGPUAccelerated =
87508:       gWindowUtils.layerManagerType != "Basic";
64535:     sandbox.layersOpenGL =
87508:       gWindowUtils.layerManagerType == "OpenGL";
51976: 
43354:     // Shortcuts for widget toolkits.
63388:     sandbox.Android = xr.OS == "Android";
43354:     sandbox.cocoaWidget = xr.widgetToolkit == "cocoa";
43354:     sandbox.gtk2Widget = xr.widgetToolkit == "gtk2";
43354:     sandbox.qtWidget = xr.widgetToolkit == "qt";
43354:     sandbox.winWidget = xr.widgetToolkit == "windows";
43354: 
16457:     var hh = CC[NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX + "http"].
16457:                  getService(CI.nsIHttpProtocolHandler);
61692:     sandbox.http = { __exposedProps__: {} };
16457:     for each (var prop in [ "userAgent", "appName", "appVersion",
51553:                             "vendor", "vendorSub",
51553:                             "product", "productSub",
61692:                             "platform", "oscpu", "language", "misc" ]) {
16457:         sandbox.http[prop] = hh[prop];
61692:         sandbox.http.__exposedProps__[prop] = "r";
61692:     }
23822:     // see if we have the test plugin available,
23822:     // and set a sandox prop accordingly
23822:     sandbox.haveTestPlugin = false;
84623: 
84623:     var navigator = gContainingWindow.navigator;
23822:     for (var i = 0; i < navigator.mimeTypes.length; i++) {
23822:         if (navigator.mimeTypes[i].type == "application/x-test" &&
23822:             navigator.mimeTypes[i].enabledPlugin != null &&
23822:             navigator.mimeTypes[i].enabledPlugin.name == "Test Plug-in") {
23822:             sandbox.haveTestPlugin = true;
23822:             break;
23822:         }
23822:     }
    1: 
38067:     // Set a flag on sandbox if the windows default theme is active
84623:     var box = gContainingWindow.document.createElement("box");
38067:     box.setAttribute("id", "_box_windowsDefaultTheme");
84623:     gContainingWindow.document.documentElement.appendChild(box);
84623:     sandbox.windowsDefaultTheme = (gContainingWindow.getComputedStyle(box, null).display == "none");
84623:     gContainingWindow.document.documentElement.removeChild(box);
38067: 
38854:     var prefs = CC["@mozilla.org/preferences-service;1"].
90038:                 getService(CI.nsIPrefBranch);
38854:     try {
38854:         sandbox.nativeThemePref = !prefs.getBoolPref("mozilla.widget.disable-native-theme");
38854:     } catch (e) {
38854:         sandbox.nativeThemePref = true;
38854:     }
38854: 
55658:     sandbox.prefs = {
40015:         __exposedProps__: {
40594:             getBoolPref: 'r',
40015:             getIntPref: 'r',
40015:         },
40015:         _prefs:      prefs,
40594:         getBoolPref: function(p) { return this._prefs.getBoolPref(p); },
46260:         getIntPref:  function(p) { return this._prefs.getIntPref(p); }
40015:     }
40015: 
54674:     sandbox.testPluginIsOOP = function () {
84623:         try {
54674:             netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
84623:         } catch (ex) {}
84623: 
54674:         var prefservice = Components.classes["@mozilla.org/preferences-service;1"]
54674:                                     .getService(CI.nsIPrefBranch);
54674: 
54674:         var testPluginIsOOP = false;
54674:         if (navigator.platform.indexOf("Mac") == 0) {
54674:             var xulRuntime = Components.classes["@mozilla.org/xre/app-info;1"]
54674:                                        .getService(CI.nsIXULAppInfo)
54674:                                        .QueryInterface(CI.nsIXULRuntime);
54674:             if (xulRuntime.XPCOMABI.match(/x86-/)) {
54674:                 try {
54674:                     testPluginIsOOP = prefservice.getBoolPref("dom.ipc.plugins.enabled.i386.test.plugin");
54674:                 } catch (e) {
54674:                     testPluginIsOOP = prefservice.getBoolPref("dom.ipc.plugins.enabled.i386");
54674:                 }
54674:             }
54674:             else if (xulRuntime.XPCOMABI.match(/x86_64-/)) {
54674:                 try {
54674:                     testPluginIsOOP = prefservice.getBoolPref("dom.ipc.plugins.enabled.x86_64.test.plugin");
54674:                 } catch (e) {
54674:                     testPluginIsOOP = prefservice.getBoolPref("dom.ipc.plugins.enabled.x86_64");
54674:                 }
54674:             }
54674:         }
54674:         else {
54674:             testPluginIsOOP = prefservice.getBoolPref("dom.ipc.plugins.enabled");
54674:         }
54674: 
54674:         return testPluginIsOOP;
54674:     };
54674: 
61873:     // Tests shouldn't care about this except for when they need to
61873:     // crash the content process
61873:     sandbox.browserIsRemote = gBrowserIsRemote;
61873: 
61873:     if (!gDumpedConditionSandbox) {
61873:         dump("REFTEST INFO | Dumping JSON representation of sandbox \n");
61873:         dump("REFTEST INFO | " + JSON.stringify(sandbox) + " \n");
61873:         gDumpedConditionSandbox = true;
61873:     }
47619: 
43353:     return sandbox;
43353: }
43353: 
43353: function ReadTopManifest(aFileURL)
43353: {
43353:     gURLs = new Array();
43353:     var url = gIOService.newURI(aFileURL, null, null);
43353:     if (!url)
43353:         throw "Expected a file or http URL for the manifest.";
64468:     ReadManifest(url, EXPECTED_PASS);
43353: }
43353: 
43353: // Note: If you materially change the reftest manifest parsing,
43353: // please keep the parser in print-manifest-dirs.py in sync.
64468: function ReadManifest(aURL, inherited_status)
43353: {
43353:     var secMan = CC[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
43353:                      .getService(CI.nsIScriptSecurityManager);
43353: 
43353:     var listURL = aURL;
43353:     var channel = gIOService.newChannelFromURI(aURL);
43353:     var inputStream = channel.open();
43353:     if (channel instanceof Components.interfaces.nsIHttpChannel
43353:         && channel.responseStatus != 200) {
48233:       gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | HTTP ERROR : " + 
43353:         channel.responseStatus + "\n");
43353:     }
43353:     var streamBuf = getStreamContent(inputStream);
43353:     inputStream.close();
69851:     var lines = streamBuf.split(/\n|\r|\r\n/);
43353: 
43353:     // Build the sandbox for fails-if(), etc., condition evaluation.
43353:     var sandbox = BuildConditionSandbox(aURL);
43353: 
    1:     var lineNo = 0;
33535:     var urlprefix = "";
39369:     for each (var str in lines) {
    1:         ++lineNo;
 9563:         if (str.charAt(0) == "#")
    1:             continue; // entire line was a comment
 9563:         var i = str.search(/\s+#/);
 9563:         if (i >= 0)
 9563:             str = str.substring(0, i);
    1:         // strip leading and trailing whitespace
    1:         str = str.replace(/^\s*/, '').replace(/\s*$/, '');
    1:         if (!str || str == "")
    1:             continue;
    1:         var items = str.split(/\s+/); // split on whitespace
    1: 
33535:         if (items[0] == "url-prefix") {
33535:             if (items.length != 2)
33535:                 throw "url-prefix requires one url in manifest file " + aURL.spec + " line " + lineNo;
33535:             urlprefix = items[1];
33535:             continue;
33535:         }
33535: 
    1:         var expected_status = EXPECTED_PASS;
58046:         var allow_silent_fail = false;
23486:         var minAsserts = 0;
23486:         var maxAsserts = 0;
61873:         var needs_focus = false;
48630:         var slow = false;
95070:         var testPrefSettings = [], refPrefSettings = [];
87920:         var fuzzy_max_delta = 2;
87920:         var fuzzy_max_pixels = 1;
64468: 
95070:         while (items[0].match(/^(fails|needs-focus|random|skip|asserts|slow|require-or|silentfail|pref|test-pref|ref-pref|fuzzy)/)) {
    1:             var item = items.shift();
    1:             var stat;
    1:             var cond;
87920:             var m = item.match(/^(fails|random|skip|silentfail)-if(\(.*\))$/);
    1:             if (m) {
    1:                 stat = m[1];
    1:                 // Note: m[2] contains the parentheses, and we want them.
    1:                 cond = Components.utils.evalInSandbox(m[2], sandbox);
87920:             } else if (item.match(/^(fails|random|skip)$/)) {
    1:                 stat = item;
    1:                 cond = true;
61873:             } else if (item == "needs-focus") {
61873:                 needs_focus = true;
62212:                 cond = false;
23486:             } else if ((m = item.match(/^asserts\((\d+)(-\d+)?\)$/))) {
23486:                 cond = false;
23486:                 minAsserts = Number(m[1]);
23486:                 maxAsserts = (m[2] == undefined) ? minAsserts
23486:                                                  : Number(m[2].substring(1));
23486:             } else if ((m = item.match(/^asserts-if\((.*?),(\d+)(-\d+)?\)$/))) {
23486:                 cond = false;
23486:                 if (Components.utils.evalInSandbox("(" + m[1] + ")", sandbox)) {
23486:                     minAsserts = Number(m[2]);
23486:                     maxAsserts =
23486:                       (m[3] == undefined) ? minAsserts
23486:                                           : Number(m[3].substring(1));
23486:                 }
48630:             } else if (item == "slow") {
48630:                 cond = false;
48630:                 slow = true;
69851:             } else if ((m = item.match(/^require-or\((.*?)\)$/))) {
69851:                 var args = m[1].split(/,/);
69851:                 if (args.length != 2) {
69851:                     throw "Error 7 in manifest file " + aURL.spec + " line " + lineNo + ": wrong number of args to require-or";
69851:                 }
69851:                 var [precondition_str, fallback_action] = args;
69851:                 var preconditions = precondition_str.split(/&&/);
69851:                 cond = false;
69851:                 for each (var precondition in preconditions) {
69851:                     if (precondition === "debugMode") {
69851:                         // Currently unimplemented. Requires asynchronous
69851:                         // JSD call + getting an event while no JS is running
69851:                         stat = fallback_action;
69851:                         cond = true;
69851:                         break;
69851:                     } else if (precondition === "true") {
69851:                         // For testing
69851:                     } else {
69851:                         // Unknown precondition. Assume it is unimplemented.
69851:                         stat = fallback_action;
69851:                         cond = true;
69851:                         break;
69851:                     }
69851:                 }
48630:             } else if ((m = item.match(/^slow-if\((.*?)\)$/))) {
48630:                 cond = false;
48630:                 if (Components.utils.evalInSandbox("(" + m[1] + ")", sandbox))
48630:                     slow = true;
58046:             } else if (item == "silentfail") {
58046:                 cond = false;
58046:                 allow_silent_fail = true;
95070:             } else if ((m = item.match(/^(|test-|ref-)pref\((.+?),(.*)\)$/))) {
86299:                 cond = false;
95070:                 var where = m[1];
95070:                 var prefName = m[2];
95070:                 var prefVal = Components.utils.evalInSandbox("(" + m[3] + ")", sandbox);
86299:                 var prefType;
86299:                 var valType = typeof(prefVal);
86299:                 if (valType == "boolean") {
86299:                     prefType = PREF_BOOLEAN;
86299:                 } else if (valType == "string") {
86299:                     prefType = PREF_STRING;
86299:                 } else if (valType == "number" && (parseInt(prefVal) == prefVal)) {
86299:                     prefType = PREF_INTEGER;
86299:                 } else {
86299:                     throw "Error in pref value in manifest file " + aURL.spec + " line " + lineNo;
86299:                 }
95070:                 var setting = { name: prefName,
86299:                                 type: prefType,
95070:                                 value: prefVal };
95070:                 if (where != "ref-") {
95070:                     testPrefSettings.push(setting);
95070:                 }
95070:                 if (where != "test-") {
95070:                     refPrefSettings.push(setting);
95070:                 }
87920:             } else if ((m = item.match(/^fuzzy\((\d+),(\d+)\)$/))) {
87920:               cond = false;
87920:               expected_status = EXPECTED_FUZZY;
87920:               fuzzy_max_delta = Number(m[1]);
87920:               fuzzy_max_pixels = Number(m[2]);
87920:             } else if ((m = item.match(/^fuzzy-if\((.*?),(\d+),(\d+)\)$/))) {
87920:               cond = false;
87920:               if (Components.utils.evalInSandbox("(" + m[1] + ")", sandbox)) {
87920:                 expected_status = EXPECTED_FUZZY;
87920:                 fuzzy_max_delta = Number(m[2]);
87920:                 fuzzy_max_pixels = Number(m[3]);
87920:               }
    1:             } else {
31675:                 throw "Error 1 in manifest file " + aURL.spec + " line " + lineNo;
    1:             }
    1: 
    1:             if (cond) {
    1:                 if (stat == "fails") {
    1:                     expected_status = EXPECTED_FAIL;
    1:                 } else if (stat == "random") {
    1:                     expected_status = EXPECTED_RANDOM;
 1277:                 } else if (stat == "skip") {
 1277:                     expected_status = EXPECTED_DEATH;
58046:                 } else if (stat == "silentfail") {
58046:                     allow_silent_fail = true;
    1:                 }
    1:             }
    1:         }
    1: 
64468:         expected_status = Math.max(expected_status, inherited_status);
64468: 
23486:         if (minAsserts > maxAsserts) {
23486:             throw "Bad range in manifest file " + aURL.spec + " line " + lineNo;
23486:         }
23486: 
21530:         var runHttp = false;
21530:         var httpDepth;
21530:         if (items[0] == "HTTP") {
39369:             runHttp = (aURL.scheme == "file"); // We can't yet run the local HTTP server
39369:                                                // for non-local reftests.
21530:             httpDepth = 0;
 3639:             items.shift();
21530:         } else if (items[0].match(/HTTP\(\.\.(\/\.\.)*\)/)) {
21530:             // Accept HTTP(..), HTTP(../..), HTTP(../../..), etc.
39369:             runHttp = (aURL.scheme == "file"); // We can't yet run the local HTTP server
39369:                                                // for non-local reftests.
21530:             httpDepth = (items[0].length - 5) / 3;
21530:             items.shift();
21530:         }
 3639: 
33535:         // do not prefix the url for include commands or urls specifying
33535:         // a protocol
33535:         if (urlprefix && items[0] != "include") {
33535:             if (items.length > 1 && !items[1].match(gProtocolRE)) {
33535:                 items[1] = urlprefix + items[1];
33535:             }
33535:             if (items.length > 2 && !items[2].match(gProtocolRE)) {
33535:                 items[2] = urlprefix + items[2];
33535:             }
33535:         }
33535: 
    1:         if (items[0] == "include") {
 3639:             if (items.length != 2 || runHttp)
31675:                 throw "Error 2 in manifest file " + aURL.spec + " line " + lineNo;
 3639:             var incURI = gIOService.newURI(items[1], null, listURL);
 2300:             secMan.checkLoadURI(aURL, incURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
64468:             ReadManifest(incURI, expected_status);
31676:         } else if (items[0] == TYPE_LOAD) {
 6614:             if (items.length != 2 ||
31676:                 (expected_status != EXPECTED_PASS &&
 6614:                  expected_status != EXPECTED_DEATH))
31675:                 throw "Error 3 in manifest file " + aURL.spec + " line " + lineNo;
 6614:             var [testURI] = runHttp
21530:                             ? ServeFiles(aURL, httpDepth,
39369:                                          listURL, [items[1]])
 6614:                             : [gIOService.newURI(items[1], null, listURL)];
 6614:             var prettyPath = runHttp
 6614:                            ? gIOService.newURI(items[1], null, listURL).spec
 6614:                            : testURI.spec;
 6614:             secMan.checkLoadURI(aURL, testURI,
 6614:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
31676:             gURLs.push( { type: TYPE_LOAD,
 6614:                           expected: expected_status,
58046:                           allowSilentFail: allow_silent_fail,
 6614:                           prettyPath: prettyPath,
23486:                           minAsserts: minAsserts,
23486:                           maxAsserts: maxAsserts,
61873:                           needsFocus: needs_focus,
48630:                           slow: slow,
95070:                           prefSettings1: testPrefSettings,
95070:                           prefSettings2: refPrefSettings,
87920:                           fuzzyMaxDelta: fuzzy_max_delta,
87920:                           fuzzyMaxPixels: fuzzy_max_pixels,
22863:                           url1: testURI,
22863:                           url2: null } );
31676:         } else if (items[0] == TYPE_SCRIPT) {
31676:             if (items.length != 2)
31676:                 throw "Error 4 in manifest file " + aURL.spec + " line " + lineNo;
31676:             var [testURI] = runHttp
31676:                             ? ServeFiles(aURL, httpDepth,
39369:                                          listURL, [items[1]])
31676:                             : [gIOService.newURI(items[1], null, listURL)];
31676:             var prettyPath = runHttp
31676:                            ? gIOService.newURI(items[1], null, listURL).spec
31676:                            : testURI.spec;
31676:             secMan.checkLoadURI(aURL, testURI,
31676:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
31676:             gURLs.push( { type: TYPE_SCRIPT,
31676:                           expected: expected_status,
58046:                           allowSilentFail: allow_silent_fail,
31676:                           prettyPath: prettyPath,
31676:                           minAsserts: minAsserts,
31676:                           maxAsserts: maxAsserts,
61873:                           needsFocus: needs_focus,
48630:                           slow: slow,
95070:                           prefSettings1: testPrefSettings,
95070:                           prefSettings2: refPrefSettings,
87920:                           fuzzyMaxDelta: fuzzy_max_delta,
87920:                           fuzzyMaxPixels: fuzzy_max_pixels,
31676:                           url1: testURI,
31676:                           url2: null } );
31676:         } else if (items[0] == TYPE_REFTEST_EQUAL || items[0] == TYPE_REFTEST_NOTEQUAL) {
    1:             if (items.length != 3)
31676:                 throw "Error 5 in manifest file " + aURL.spec + " line " + lineNo;
 3639:             var [testURI, refURI] = runHttp
21530:                                   ? ServeFiles(aURL, httpDepth,
39369:                                                listURL, [items[1], items[2]])
 3639:                                   : [gIOService.newURI(items[1], null, listURL),
 3639:                                      gIOService.newURI(items[2], null, listURL)];
 3639:             var prettyPath = runHttp
 3639:                            ? gIOService.newURI(items[1], null, listURL).spec
 3639:                            : testURI.spec;
 2300:             secMan.checkLoadURI(aURL, testURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 2300:             secMan.checkLoadURI(aURL, refURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
31676:             gURLs.push( { type: items[0],
    1:                           expected: expected_status,
58046:                           allowSilentFail: allow_silent_fail,
 3639:                           prettyPath: prettyPath,
23486:                           minAsserts: minAsserts,
23486:                           maxAsserts: maxAsserts,
61873:                           needsFocus: needs_focus,
48630:                           slow: slow,
95070:                           prefSettings1: testPrefSettings,
95070:                           prefSettings2: refPrefSettings,
87920:                           fuzzyMaxDelta: fuzzy_max_delta,
87920:                           fuzzyMaxPixels: fuzzy_max_pixels,
22863:                           url1: testURI,
22863:                           url2: refURI } );
    1:         } else {
31676:             throw "Error 6 in manifest file " + aURL.spec + " line " + lineNo;
    1:         }
39369:     }
    1: }
    1: 
22863: function AddURIUseCount(uri)
22490: {
22490:     if (uri == null)
22490:         return;
22490: 
22863:     var spec = uri.spec;
22490:     if (spec in gURIUseCounts) {
22490:         gURIUseCounts[spec]++;
22490:     } else {
22490:         gURIUseCounts[spec] = 1;
22490:     }
22490: }
22490: 
22490: function BuildUseCounts()
22490: {
22490:     gURIUseCounts = {};
22490:     for (var i = 0; i < gURLs.length; ++i) {
31676:         var url = gURLs[i];
31676:         if (url.expected != EXPECTED_DEATH &&
31676:             (url.type == TYPE_REFTEST_EQUAL ||
95070:              url.type == TYPE_REFTEST_NOTEQUAL)) {
95070:             if (url.prefSettings1.length == 0) {
22863:                 AddURIUseCount(gURLs[i].url1);
95070:             }
95070:             if (url.prefSettings2.length == 0) {
22863:                 AddURIUseCount(gURLs[i].url2);
22490:             }
22490:         }
22490:     }
95070: }
22490: 
39369: function ServeFiles(manifestURL, depth, aURL, files)
 3639: {
39369:     var listURL = aURL.QueryInterface(CI.nsIFileURL);
39369:     var directory = listURL.file.parent;
39369: 
21530:     // Allow serving a tree that's an ancestor of the directory containing
21530:     // the files so that they can use resources in ../ (etc.).
21530:     var dirPath = "/";
21530:     while (depth > 0) {
21530:         dirPath = "/" + directory.leafName + dirPath;
21530:         directory = directory.parent;
21530:         --depth;
21530:     }
21530: 
 3639:     gCount++;
68410:     var path = "/" + Date.now() + "/" + gCount;
21530:     gServer.registerDirectory(path + "/", directory);
 3639: 
 3639:     var secMan = CC[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
 3639:                      .getService(CI.nsIScriptSecurityManager);
 3639: 
21530:     var testbase = gIOService.newURI("http://localhost:" + HTTP_SERVER_PORT +
21530:                                          path + dirPath,
21529:                                      null, null);
21529: 
 6614:     function FileToURI(file)
 6614:     {
21529:         // Only serve relative URIs via the HTTP server, not absolute
21529:         // ones like about:blank.
21529:         var testURI = gIOService.newURI(file, null, testbase);
 6614: 
 3639:         // XXX necessary?  manifestURL guaranteed to be file, others always HTTP
 3639:         secMan.checkLoadURI(manifestURL, testURI,
 3639:                             CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 3639: 
 6614:         return testURI;
 6614:     }
 6614: 
 6614:     return files.map(FileToURI);
 3639: }
 3639: 
61873: // Return true iff this window is focused when this function returns.
61873: function Focus()
61873: {
79691:     // FIXME/bug 583976: focus doesn't yet work with out-of-process
79691:     // content.
79691:     if (gBrowserIsRemote) {
79691:         return false;
79691:     }
79691: 
79624:     var fm = CC["@mozilla.org/focus-manager;1"].getService(CI.nsIFocusManager);
87179:     fm.focusedWindow = gContainingWindow;
79624:     try {
79624:         var dock = CC["@mozilla.org/widget/macdocksupport;1"].getService(CI.nsIMacDockSupport);
79624:         dock.activateApplication(true);
79624:     } catch(ex) {
79624:     }
61873:     return true;
61873: }
61873: 
    1: function StartCurrentTest()
    1: {
59488:     gTestLog = [];
59488: 
 1277:     // make sure we don't run tests that are expected to kill the browser
48630:     while (gURLs.length > 0) {
48630:         var test = gURLs[0];
48630:         if (test.expected == EXPECTED_DEATH) {
22153:             ++gTestResults.Skip;
48630:             gDumpLog("REFTEST TEST-KNOWN-FAIL | " + test.url1.spec + " | (SKIP)\n");
 1277:             gURLs.shift();
61873:         } else if (test.needsFocus && !Focus()) {
95070:             // FIXME: Marking this as a known fail is dangerous!  What
95070:             // if it starts failing all the time?
61873:             ++gTestResults.Skip;
61873:             gDumpLog("REFTEST TEST-KNOWN-FAIL | " + test.url1.spec + " | (SKIPPED; COULDN'T GET FOCUS)\n");
61873:             gURLs.shift();
48630:         } else if (test.slow && !gRunSlowTests) {
48630:             ++gTestResults.Slow;
48630:             gDumpLog("REFTEST TEST-KNOWN-SLOW | " + test.url1.spec + " | (SLOW)\n");
48630:             gURLs.shift();
95070:         } else {
95070:             break;
95070:         }
95070:     }
95070: 
95070:     if (gURLs.length == 0) {
95070:         RestoreChangedPreferences();
95070:         DoneTests();
95070:     }
95070:     else {
95070:         var currentTest = gTotalTests - gURLs.length;
95070:         gContainingWindow.document.title = "reftest: " + currentTest + " / " + gTotalTests +
95070:             " (" + Math.floor(100 * (currentTest / gTotalTests)) + "%)";
95070:         StartCurrentURI(1);
95070:     }
95070: }
95070: 
95070: function StartCurrentURI(aState)
95070: {
95070:     gState = aState;
95070:     gCurrentURL = gURLs[0]["url" + aState].spec;
95070: 
95070:     RestoreChangedPreferences();
95070: 
95070:     var prefSettings = gURLs[0]["prefSettings" + aState];
95070:     if (prefSettings.length > 0) {
86299:         var prefs = Components.classes["@mozilla.org/preferences-service;1"].
90038:                     getService(Components.interfaces.nsIPrefBranch);
86299:         var badPref = undefined;
86299:         try {
95070:             prefSettings.forEach(function(ps) {
86299:                 var oldVal;
86299:                 if (ps.type == PREF_BOOLEAN) {
86299:                     try {
86299:                         oldVal = prefs.getBoolPref(ps.name);
86299:                     } catch (e) {
86299:                         badPref = "boolean preference '" + ps.name + "'";
86299:                         throw "bad pref";
86299:                     }
86299:                 } else if (ps.type == PREF_STRING) {
86299:                     try {
86299:                         oldVal = prefs.getCharPref(ps.name);
86299:                     } catch (e) {
86299:                         badPref = "string preference '" + ps.name + "'";
86299:                         throw "bad pref";
86299:                     }
86299:                 } else if (ps.type == PREF_INTEGER) {
86299:                     try {
86299:                         oldVal = prefs.getIntPref(ps.name);
86299:                     } catch (e) {
86299:                         badPref = "integer preference '" + ps.name + "'";
86299:                         throw "bad pref";
86299:                     }
86299:                 } else {
86299:                     throw "internal error - unknown preference type";
86299:                 }
86299:                 if (oldVal != ps.value) {
86299:                     gPrefsToRestore.push( { name: ps.name,
86299:                                             type: ps.type,
86299:                                             value: oldVal } );
86299:                     var value = ps.value;
86299:                     if (ps.type == PREF_BOOLEAN) {
86299:                         prefs.setBoolPref(ps.name, value);
86299:                     } else if (ps.type == PREF_STRING) {
86299:                         prefs.setCharPref(ps.name, value);
86299:                         value = '"' + value + '"';
86299:                     } else if (ps.type == PREF_INTEGER) {
86299:                         prefs.setIntPref(ps.name, value);
86299:                     }
86299:                     gDumpLog("SET PREFERENCE pref(" + ps.name + "," + value + ")\n");
86299:                 }
86299:             });
86299:         } catch (e) {
86299:             if (e == "bad pref") {
95070:                 var test = gURLs[0];
86299:                 if (test.expected == EXPECTED_FAIL) {
86299:                     gDumpLog("REFTEST TEST-KNOWN-FAIL | " + test.url1.spec +
86299:                              " | (SKIPPED; " + badPref + " not known or wrong type)\n");
86299:                     ++gTestResults.Skip;
86299:                 } else {
86299:                     gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | " + test.url1.spec +
86299:                              " | " + badPref + " not known or wrong type\n");
86299:                     ++gTestResults.UnexpectedFail;
86299:                 }
86299:             } else {
86299:                 throw e;
86299:             }
86299:         }
86299:         if (badPref != undefined) {
86299:             // skip the test that had a bad preference
86299:             gURLs.shift();
95070: 
95070:             StartCurrentTest();
95070:             return;
48630:         }
 1277:     }
 1277: 
95070:     if (prefSettings.length == 0 &&
86299:         gURICanvases[gCurrentURL] &&
31676:         (gURLs[0].type == TYPE_REFTEST_EQUAL ||
31676:          gURLs[0].type == TYPE_REFTEST_NOTEQUAL) &&
23486:         gURLs[0].maxAsserts == 0) {
59485:         // Pretend the document loaded --- RecordResult will notice
22490:         // there's already a canvas for this URL
84623:         gContainingWindow.setTimeout(RecordResult, 0);
22490:     } else {
79568:         var currentTest = gTotalTests - gURLs.length;
79568:         gDumpLog("REFTEST TEST-START | " + gCurrentURL + " | " + currentTest + " / " + gTotalTests +
79568:             " (" + Math.floor(100 * (currentTest / gTotalTests)) + "%)\n");
59488:         LogInfo("START " + gCurrentURL);
61873:         var type = gURLs[0].type
61873:         if (TYPE_SCRIPT == type) {
61873:             SendLoadScriptTest(gCurrentURL, gLoadTimeout);
61873:         } else {
61873:             SendLoadTest(type, gCurrentURL, gLoadTimeout);
61873:         }
    1:     }
22490: }
    1: 
    1: function DoneTests()
    1: {
48233:     gDumpLog("REFTEST FINISHED: Slowest test took " + gSlowestTestTime +
14795:          "ms (" + gSlowestTestURL + ")\n");
14795: 
48233:     gDumpLog("REFTEST INFO | Result summary:\n");
22712:     var count = gTestResults.Pass + gTestResults.LoadOnly;
48233:     gDumpLog("REFTEST INFO | Successful: " + count + " (" +
22712:              gTestResults.Pass + " pass, " +
22712:              gTestResults.LoadOnly + " load only)\n");
22712:     count = gTestResults.Exception + gTestResults.FailedLoad +
23486:             gTestResults.UnexpectedFail + gTestResults.UnexpectedPass +
23486:             gTestResults.AssertionUnexpected +
23486:             gTestResults.AssertionUnexpectedFixed;
48233:     gDumpLog("REFTEST INFO | Unexpected: " + count + " (" +
22712:              gTestResults.UnexpectedFail + " unexpected fail, " +
22712:              gTestResults.UnexpectedPass + " unexpected pass, " +
23486:              gTestResults.AssertionUnexpected + " unexpected asserts, " +
23486:              gTestResults.AssertionUnexpectedFixed + " unexpected fixed asserts, " +
22712:              gTestResults.FailedLoad + " failed load, " +
22712:              gTestResults.Exception + " exception)\n");
23486:     count = gTestResults.KnownFail + gTestResults.AssertionKnown +
48630:             gTestResults.Random + gTestResults.Skip + gTestResults.Slow;
59488:     gDumpLog("REFTEST INFO | Known problems: " + count + " (" +
22712:              gTestResults.KnownFail + " known fail, " +
23486:              gTestResults.AssertionKnown + " known asserts, " +
22712:              gTestResults.Random + " random, " +
48630:              gTestResults.Skip + " skipped, " +
48630:              gTestResults.Slow + " slow)\n");
22153: 
48233:     gDumpLog("REFTEST INFO | Total canvas count = " + gRecycledCanvases.length + "\n");
22490: 
48233:     gDumpLog("REFTEST TEST-START | Shutdown\n");
27361:     function onStopped() {
85110:         let appStartup = CC["@mozilla.org/toolkit/app-startup;1"].getService(CI.nsIAppStartup);
85110:         appStartup.quit(CI.nsIAppStartup.eForceQuit);
27361:     }
 3639:     if (gServer)
27361:         gServer.stop(onStopped);
27361:     else
27361:         onStopped();
    1: }
    1: 
22863: function UpdateCanvasCache(url, canvas)
22490: {
22863:     var spec = url.spec;
22490: 
22490:     --gURIUseCounts[spec];
32968: 
32968:     if (gNoCanvasCache || gURIUseCounts[spec] == 0) {
22490:         ReleaseCanvas(canvas);
22490:         delete gURICanvases[spec];
22490:     } else if (gURIUseCounts[spec] > 0) {
22490:         gURICanvases[spec] = canvas;
22490:     } else {
22490:         throw "Use counts were computed incorrectly";
22490:     }
22490: }
22490: 
52030: // Recompute drawWindow flags for every drawWindow operation.
52030: // We have to do this every time since our window can be
52030: // asynchronously resized (e.g. by the window manager, to make
52030: // it fit on screen) at unpredictable times.
52030: // Fortunately this is pretty cheap.
52029: function DoDrawWindow(ctx, x, y, w, h)
46327: {
52030:     var flags = ctx.DRAWWINDOW_DRAW_CARET | ctx.DRAWWINDOW_DRAW_VIEW;
52030:     var testRect = gBrowser.getBoundingClientRect();
73770:     if (gIgnoreWindowSize ||
73770:         (0 <= testRect.left &&
52030:          0 <= testRect.top &&
84623:          gContainingWindow.innerWidth >= testRect.right &&
84623:          gContainingWindow.innerHeight >= testRect.bottom)) {
52030:         // We can use the window's retained layer manager
52030:         // because the window is big enough to display the entire
52030:         // browser element
52030:         flags |= ctx.DRAWWINDOW_USE_WIDGET_LAYERS;
61873:     } else if (gBrowserIsRemote) {
68642:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | " + gCurrentURL + " | can't drawWindow remote content\n");
61873:         ++gTestResults.Exception;
46327:     }
52030: 
52030:     if (gDrawWindowFlags != flags) {
52030:         // Every time the flags change, dump the new state.
52030:         gDrawWindowFlags = flags;
52030:         var flagsStr = "DRAWWINDOW_DRAW_CARET | DRAWWINDOW_DRAW_VIEW";
52030:         if (flags & ctx.DRAWWINDOW_USE_WIDGET_LAYERS) {
52030:             flagsStr += " | DRAWWINDOW_USE_WIDGET_LAYERS";
52030:         } else {
52030:             // Output a special warning because we need to be able to detect
52030:             // this whenever it happens.
59488:             gDumpLog("REFTEST INFO | WARNING: USE_WIDGET_LAYERS disabled\n");
52030:         }
59488:         gDumpLog("REFTEST INFO | drawWindow flags = " + flagsStr +
84623:                  "; window size = " + gContainingWindow.innerWidth + "," + gContainingWindow.innerHeight +
52030:                  "; test browser size = " + testRect.width + "," + testRect.height +
52030:                  "\n");
46327:     }
46327: 
59488:     LogInfo("DoDrawWindow " + x + "," + y + "," + w + "," + h);
84623:     ctx.drawWindow(gContainingWindow, x, y, w, h, "rgb(255,255,255)",
46327:                    gDrawWindowFlags);
46327: }
46327: 
23350: function InitCurrentCanvasWithSnapshot()
23350: {
61873:     LogInfo("Initializing canvas snapshot");
61873: 
46327:     if (gURLs[0].type == TYPE_LOAD || gURLs[0].type == TYPE_SCRIPT) {
46327:         // We don't want to snapshot this kind of test
61783:         return false;
46327:     }
46327: 
59489:     if (!gCurrentCanvas) {
23350:         gCurrentCanvas = AllocateCanvas();
59489:     }
23350: 
23350:     var ctx = gCurrentCanvas.getContext("2d");
52029:     DoDrawWindow(ctx, 0, 0, gCurrentCanvas.width, gCurrentCanvas.height);
61783:     return true;
23350: }
23350: 
61873: function UpdateCurrentCanvasForInvalidation(rects)
23350: {
61873:     LogInfo("Updating canvas for invalidation");
61873: 
61873:     if (!gCurrentCanvas) {
61873:         return;
23350:     }
23350: 
23350:     var ctx = gCurrentCanvas.getContext("2d");
61873:     for (var i = 0; i < rects.length; ++i) {
61873:         var r = rects[i];
52029:         // Set left/top/right/bottom to pixel boundaries
52029:         var left = Math.floor(r.left);
52029:         var top = Math.floor(r.top);
52029:         var right = Math.ceil(r.right);
52029:         var bottom = Math.ceil(r.bottom);
23350: 
23350:         ctx.save();
23350:         ctx.translate(left, top);
52029:         DoDrawWindow(ctx, left, top, right - left, bottom - top);
23350:         ctx.restore();
23350:     }
23350: }
23350: 
61873: function RecordResult(testRunTime, errorMsg, scriptResults)
    1: {
59488:     LogInfo("RecordResult fired");
59488: 
14795:     // Keep track of which test was slowest, and how long it took.
61873:     if (testRunTime > gSlowestTestTime) {
61873:         gSlowestTestTime = testRunTime;
22490:         gSlowestTestURL  = gCurrentURL;
14795:     }
14795: 
31676:     // Not 'const ...' because of 'EXPECTED_*' value dependency.
31676:     var outputs = {};
31676:     const randomMsg = "(EXPECTED RANDOM)";
31676:     outputs[EXPECTED_PASS] = {
31676:         true:  {s: "TEST-PASS"                  , n: "Pass"},
31676:         false: {s: "TEST-UNEXPECTED-FAIL"       , n: "UnexpectedFail"}
31676:     };
31676:     outputs[EXPECTED_FAIL] = {
31676:         true:  {s: "TEST-UNEXPECTED-PASS"       , n: "UnexpectedPass"},
31676:         false: {s: "TEST-KNOWN-FAIL"            , n: "KnownFail"}
31676:     };
31676:     outputs[EXPECTED_RANDOM] = {
31676:         true:  {s: "TEST-PASS" + randomMsg      , n: "Random"},
31676:         false: {s: "TEST-KNOWN-FAIL" + randomMsg, n: "Random"}
31676:     };
87509:     outputs[EXPECTED_FUZZY] = outputs[EXPECTED_PASS];
87509: 
31676:     var output;
31676: 
31676:     if (gURLs[0].type == TYPE_LOAD) {
22153:         ++gTestResults.LoadOnly;
48233:         gDumpLog("REFTEST TEST-PASS | " + gURLs[0].prettyPath + " | (LOAD ONLY)\n");
43784:         gCurrentCanvas = null;
23486:         FinishTestItem();
 6614:         return;
 6614:     }
31676:     if (gURLs[0].type == TYPE_SCRIPT) {
61873:         var expected = gURLs[0].expected;
31676: 
61873:         if (errorMsg) {
31676:             // Force an unexpected failure to alert the test author to fix the test.
31676:             expected = EXPECTED_PASS;
61873:         } else if (scriptResults.length == 0) {
31676:              // This failure may be due to a JavaScript Engine bug causing
58046:              // early termination of the test. If we do not allow silent
58046:              // failure, report an error.
58046:              if (!gURLs[0].allowSilentFail)
61873:                  errorMsg = "No test results reported. (SCRIPT)\n";
58046:              else
59488:                  gDumpLog("REFTEST INFO | An expected silent failure occurred \n");
31676:         }
31676: 
61873:         if (errorMsg) {
31676:             output = outputs[expected][false];
31676:             ++gTestResults[output.n];
31676:             var result = "REFTEST " + output.s + " | " +
31676:                 gURLs[0].prettyPath + " | " + // the URL being tested
61873:                 errorMsg;
31676: 
48233:             gDumpLog(result);
31676:             FinishTestItem();
31676:             return;
31676:         }
31676: 
61873:         var anyFailed = scriptResults.some(function(result) { return !result.passed; });
31676:         var outputPair;
31676:         if (anyFailed && expected == EXPECTED_FAIL) {
31676:             // If we're marked as expected to fail, and some (but not all) tests
31676:             // passed, treat those tests as though they were marked random
31676:             // (since we can't tell whether they were really intended to be
31676:             // marked failing or not).
31676:             outputPair = { true: outputs[EXPECTED_RANDOM][true],
31676:                            false: outputs[expected][false] };
31676:         } else {
31676:             outputPair = outputs[expected];
31676:         }
31676:         var index = 0;
61873:         scriptResults.forEach(function(result) {
31676:                 var output = outputPair[result.passed];
31676: 
31676:                 ++gTestResults[output.n];
31676:                 result = "REFTEST " + output.s + " | " +
31676:                     gURLs[0].prettyPath + " | " + // the URL being tested
31676:                     result.description + " item " + (++index) + "\n";
48233:                 gDumpLog(result);
31676:             });
31676: 
59488:         if (anyFailed && expected == EXPECTED_PASS) {
59488:             FlushTestLog();
59488:         }
59488: 
31676:         FinishTestItem();
31676:         return;
31676:     }
 6614: 
95070:     if (gURLs[0]["prefSettings" + gState].length == 0 &&
86299:         gURICanvases[gCurrentURL]) {
23350:         gCurrentCanvas = gURICanvases[gCurrentURL];
23350:     }
61873:     if (gCurrentCanvas == null) {
61873:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | program error managing snapshots\n");
61873:         ++gTestResults.Exception;
61873:     }
23350:     if (gState == 1) {
23350:         gCanvas1 = gCurrentCanvas;
22490:     } else {
23350:         gCanvas2 = gCurrentCanvas;
22490:     }
23350:     gCurrentCanvas = null;
20512: 
63000:     ResetRenderingState();
 4221: 
    1:     switch (gState) {
22863:         case 1:
 4221:             // First document has been loaded.
 4221:             // Proceed to load the second document.
    1: 
68874:             CleanUpCrashDumpFiles();
22863:             StartCurrentURI(2);
    1:             break;
22863:         case 2:
    1:             // Both documents have been loaded. Compare the renderings and see
    1:             // if the comparison result matches the expected result specified
    1:             // in the manifest.
    1: 
 4221:             // number of different pixels
 4221:             var differences;
    1:             // whether the two renderings match:
 4221:             var equal;
87509:             var maxDifference = {};
 4221: 
87509:             differences = gWindowUtils.compareCanvases(gCanvas1, gCanvas2, maxDifference);
 4221:             equal = (differences == 0);
87495: 
87509:             // what is expected on this platform (PASS, FAIL, or RANDOM)
87509:             var expected = gURLs[0].expected;
87509: 
87920:             if (maxDifference.value > 0 && maxDifference.value <= gURLs[0].fuzzyMaxDelta &&
87920:                 differences <= gURLs[0].fuzzyMaxPixels) {
87509:                 if (equal) {
87509:                     throw "Inconsistent result from compareCanvases.";
87509:                 }
87509:                 equal = expected == EXPECTED_FUZZY;
87509:                 gDumpLog("REFTEST fuzzy match\n");
87509:             }
87509: 
    1:             // whether the comparison result matches what is in the manifest
31676:             var test_passed = (equal == (gURLs[0].type == TYPE_REFTEST_EQUAL));
87509: 
31676:             output = outputs[expected][test_passed];
    1: 
31676:             ++gTestResults[output.n];
    1: 
31676:             var result = "REFTEST " + output.s + " | " +
22153:                          gURLs[0].prettyPath + " | "; // the URL being tested
57581:             switch (gURLs[0].type) {
57581:                 case TYPE_REFTEST_NOTEQUAL:
57581:                     result += "image comparison (!=) ";
57581:                     break;
57581:                 case TYPE_REFTEST_EQUAL:
57581:                     result += "image comparison (==) ";
57581:                     break;
    1:             }
48233:             gDumpLog(result + "\n");
22153: 
 8332:             if (!test_passed && expected == EXPECTED_PASS ||
87509:                 !test_passed && expected == EXPECTED_FUZZY ||
 8332:                 test_passed && expected == EXPECTED_FAIL) {
 8401:                 if (!equal) {
48233:                     gDumpLog("REFTEST   IMAGE 1 (TEST): " + gCanvas1.toDataURL() + "\n");
48233:                     gDumpLog("REFTEST   IMAGE 2 (REFERENCE): " + gCanvas2.toDataURL() + "\n");
87509:                     gDumpLog("REFTEST number of differing pixels: " + differences + " max difference: " + maxDifference.value + "\n");
 8332:                 } else {
48233:                     gDumpLog("REFTEST   IMAGE: " + gCanvas1.toDataURL() + "\n");
 8332:                 }
    1:             }
    1: 
59488:             if (!test_passed && expected == EXPECTED_PASS) {
59488:                 FlushTestLog();
59488:             }
59488: 
95070:             if (gURLs[0].prefSettings1.length == 0) {
22863:                 UpdateCanvasCache(gURLs[0].url1, gCanvas1);
95070:             }
95070:             if (gURLs[0].prefSettings2.length == 0) {
22863:                 UpdateCanvasCache(gURLs[0].url2, gCanvas2);
86299:             }
22490: 
68874:             CleanUpCrashDumpFiles();
23486:             FinishTestItem();
    1:             break;
    1:         default:
 3639:             throw "Unexpected state.";
    1:     }
    1: }
    1: 
61873: function LoadFailed(why)
    1: {
22153:     ++gTestResults.FailedLoad;
48233:     gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | " +
64425:          gURLs[0]["url" + gState].spec + " | load failed: " + why + "\n");
59488:     FlushTestLog();
23486:     FinishTestItem();
23486: }
23486: 
68874: function RemoveExpectedCrashDumpFiles()
68874: {
68874:     if (gExpectingProcessCrash) {
68874:         for each (let crashFilename in gExpectedCrashDumpFiles) {
68874:             let file = gCrashDumpDir.clone();
68874:             file.append(crashFilename);
68874:             if (file.exists()) {
68874:                 file.remove(false);
68874:             }
68874:         }
68874:     }
68874:     gExpectedCrashDumpFiles.length = 0;
68874: }
68874: 
68874: function FindUnexpectedCrashDumpFiles()
68874: {
68874:     if (!gCrashDumpDir.exists()) {
68874:         return;
68874:     }
68874: 
68874:     let entries = gCrashDumpDir.directoryEntries;
68874:     if (!entries) {
68874:         return;
68874:     }
68874: 
68874:     let foundCrashDumpFile = false;
68874:     while (entries.hasMoreElements()) {
68874:         let file = entries.getNext().QueryInterface(CI.nsIFile);
68874:         let path = String(file.path);
68874:         if (path.match(/\.(dmp|extra)$/) && !gUnexpectedCrashDumpFiles[path]) {
68874:             if (!foundCrashDumpFile) {
68874:                 foundCrashDumpFile = true;
68874:                 gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | " + gCurrentURL +
68874:                          " | This test left crash dumps behind, but we weren't expecting it to!\n");
68874:             }
68874:             gDumpLog("REFTEST INFO | Found unexpected crash dump file" + path +
68874:                      ".\n");
68874:             gUnexpectedCrashDumpFiles[path] = true;
68874:         }
68874:     }
68874: }
68874: 
68874: function CleanUpCrashDumpFiles()
68874: {
68874:     RemoveExpectedCrashDumpFiles();
68874:     FindUnexpectedCrashDumpFiles();
68874:     gExpectingProcessCrash = false;
68874: }
68874: 
23486: function FinishTestItem()
23486: {
24889:     // Replace document with BLANK_URL_FOR_CLEARING in case there are
23486:     // assertions when unloading.
48233:     gDumpLog("REFTEST INFO | Loading a blank page\n");
61873:     // After clearing, content will notify us of the assertion count
61873:     // and tests will continue.
80737:     SetAsyncScroll(false);
61873:     SendClear();
23486: }
23486: 
61873: function DoAssertionCheck(numAsserts)
23486: {
61873:     if (gDebug.isDebugBuild) {
61873:         if (gBrowserIsRemote) {
61873:             // Count chrome-process asserts too when content is out of
61873:             // process.
61873:             var newAssertionCount = gDebug.assertionCount;
61873:             var numLocalAsserts = newAssertionCount - gAssertionCount;
61873:             gAssertionCount = newAssertionCount;
23486: 
61873:             numAsserts += numLocalAsserts;
61873:         }
23486: 
23486:         var minAsserts = gURLs[0].minAsserts;
23486:         var maxAsserts = gURLs[0].maxAsserts;
23486: 
23486:         var expectedAssertions = "expected " + minAsserts;
23486:         if (minAsserts != maxAsserts) {
23486:             expectedAssertions += " to " + maxAsserts;
23486:         }
23486:         expectedAssertions += " assertions";
23486: 
23486:         if (numAsserts < minAsserts) {
23486:             ++gTestResults.AssertionUnexpectedFixed;
48233:             gDumpLog("REFTEST TEST-UNEXPECTED-PASS | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " is less than " +
23486:                  expectedAssertions + "\n");
23486:         } else if (numAsserts > maxAsserts) {
23486:             ++gTestResults.AssertionUnexpected;
48233:             gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " is more than " +
23486:                  expectedAssertions + "\n");
23486:         } else if (numAsserts != 0) {
23486:             ++gTestResults.AssertionKnown;
48233:             gDumpLog("REFTEST TEST-KNOWN-FAIL | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " matches " +
23486:                  expectedAssertions + "\n");
23486:         }
23625:     }
23486: 
23486:     // And start the next test.
    1:     gURLs.shift();
    1:     StartCurrentTest();
    1: }
61873: 
63000: function ResetRenderingState()
63000: {
63000:     SendResetRenderingState();
63000:     // We would want to clear any viewconfig here, if we add support for it
63000: }
61873: 
86299: function RestoreChangedPreferences()
86299: {
86299:     if (gPrefsToRestore.length > 0) {
86299:         var prefs = Components.classes["@mozilla.org/preferences-service;1"].
90038:                     getService(Components.interfaces.nsIPrefBranch);
86299:         gPrefsToRestore.forEach(function(ps) {
86299:             var value = ps.value;
86299:             if (ps.type == PREF_BOOLEAN) {
86299:                 prefs.setBoolPref(ps.name, value);
86299:             } else if (ps.type == PREF_STRING) {
86299:                 prefs.setCharPref(ps.name, value);
86299:                 value = '"' + value + '"';
86299:             } else if (ps.type == PREF_INTEGER) {
86299:                 prefs.setIntPref(ps.name, value);
86299:             }
86299:             gDumpLog("RESTORE PREFERENCE pref(" + ps.name + "," + value + ")\n");
86299:         });
86299:         gPrefsToRestore = [];
86299:     }
86299: }
86299: 
61873: function RegisterMessageListenersAndLoadContentScript()
61873: {
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:AssertionCount",
61873:         function (m) { RecvAssertionCount(m.json.count); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:ContentReady",
61873:         function (m) { return RecvContentReady() }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:Exception",
61873:         function (m) { RecvException(m.json.what) }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:FailedLoad",
61873:         function (m) { RecvFailedLoad(m.json.why); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:InitCanvasWithSnapshot",
61873:         function (m) { return RecvInitCanvasWithSnapshot(); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:Log",
61873:         function (m) { RecvLog(m.json.type, m.json.msg); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:ScriptResults",
61873:         function (m) { RecvScriptResults(m.json.runtimeMs, m.json.error, m.json.results); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:TestDone",
61873:         function (m) { RecvTestDone(m.json.runtimeMs); }
61873:     );
61873:     gBrowserMessageManager.addMessageListener(
61873:         "reftest:UpdateCanvasForInvalidation",
61873:         function (m) { RecvUpdateCanvasForInvalidation(m.json.rects); }
61873:     );
68874:     gBrowserMessageManager.addMessageListener(
68874:         "reftest:ExpectProcessCrash",
68874:         function (m) { RecvExpectProcessCrash(); }
68874:     );
80737:     gBrowserMessageManager.addMessageListener(
80737:         "reftest:EnableAsyncScroll",
80737:         function (m) { SetAsyncScroll(true); }
80737:     );
61873: 
61873:     gBrowserMessageManager.loadFrameScript("chrome://reftest/content/reftest-content.js", true);
61873: }
61873: 
80737: function SetAsyncScroll(enabled)
80737: {
80737:     gBrowser.QueryInterface(CI.nsIFrameLoaderOwner).frameLoader.renderMode =
80737:         enabled ? CI.nsIFrameLoader.RENDER_MODE_ASYNC_SCROLL :
80737:                   CI.nsIFrameLoader.RENDER_MODE_DEFAULT;
80737: }
80737: 
61873: function RecvAssertionCount(count)
61873: {
61873:     DoAssertionCheck(count);
61873: }
61873: 
61873: function RecvContentReady()
61873: {
61873:     InitAndStartRefTests();
61873:     return { remote: gBrowserIsRemote };
61873: }
61873: 
61873: function RecvException(what)
61873: {
61873:     gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | "+ what +"\n");
61873:     ++gTestResults.Exception;
61873: }
61873: 
61873: function RecvFailedLoad(why)
61873: {
61873:     LoadFailed(why);
61873: }
61873: 
61873: function RecvInitCanvasWithSnapshot()
61873: {
61873:     var painted = InitCurrentCanvasWithSnapshot();
61873:     return { painted: painted };
61873: }
61873: 
61873: function RecvLog(type, msg)
61873: {
61873:     msg = "[CONTENT] "+ msg;
61873:     if (type == "info") {
61873:         LogInfo(msg);
61873:     } else if (type == "warning") {
61873:         LogWarning(msg);
61873:     } else {
61873:         gDumpLog("REFTEST TEST-UNEXPECTED-FAIL | | unknown log type "+ type +"\n");
61873:         ++gTestResults.Exception;
61873:     }
61873: }
61873: 
61873: function RecvScriptResults(runtimeMs, error, results)
61873: {
61873:     RecordResult(runtimeMs, error, results);
61873: }
61873: 
61873: function RecvTestDone(runtimeMs)
61873: {
61873:     RecordResult(runtimeMs, '', [ ]);
61873: }
61873: 
61873: function RecvUpdateCanvasForInvalidation(rects)
61873: {
61873:     UpdateCurrentCanvasForInvalidation(rects);
61873: }
61873: 
68874: function OnProcessCrashed(subject, topic, data)
68874: {
68874:     var id;
68874:     subject = subject.QueryInterface(CI.nsIPropertyBag2);
68874:     if (topic == "plugin-crashed") {
68874:         id = subject.getPropertyAsAString("pluginDumpID");
68874:     } else if (topic == "ipc:content-shutdown") {
68874:         id = subject.getPropertyAsAString("dumpID");
68874:     }
68874:     if (id) {
68874:         gExpectedCrashDumpFiles.push(id + ".dmp");
68874:         gExpectedCrashDumpFiles.push(id + ".extra");
68874:     }
68874: }
68874: 
68874: function RegisterProcessCrashObservers()
68874: {
68874:     var os = CC[NS_OBSERVER_SERVICE_CONTRACTID]
68874:              .getService(CI.nsIObserverService);
68874:     os.addObserver(OnProcessCrashed, "plugin-crashed", false);
68874:     os.addObserver(OnProcessCrashed, "ipc:content-shutdown", false);
68874: }
68874: 
68874: function RecvExpectProcessCrash()
68874: {
68874:     gExpectingProcessCrash = true;
68874: }
68874: 
61873: function SendClear()
61873: {
61873:     gBrowserMessageManager.sendAsyncMessage("reftest:Clear");
61873: }
61873: 
61873: function SendLoadScriptTest(uri, timeout)
61873: {
61873:     gBrowserMessageManager.sendAsyncMessage("reftest:LoadScriptTest",
61873:                                             { uri: uri, timeout: timeout });
61873: }
61873: 
61873: function SendLoadTest(type, uri, timeout)
61873: {
61873:     gBrowserMessageManager.sendAsyncMessage("reftest:LoadTest",
61873:                                             { type: type, uri: uri, timeout: timeout }
61873:     );
61873: }
61873: 
63000: function SendResetRenderingState()
61873: {
63000:     gBrowserMessageManager.sendAsyncMessage("reftest:ResetRenderingState");
61873: }
