   1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Blake Ross <blaker@netscape.com> (Original Author)
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
   1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1:  
   1: #ifndef downloadproxy___h___
   1: #define downloadproxy___h___
   1: 
   1: #include "nsIDownloadManager.h"
   1: #include "nsIPrefBranch.h"
   1: #include "nsIPrefService.h"
   1: #include "nsIMIMEInfo.h"
   1: #include "nsIFileURL.h"
5352: #include "nsIDownloadManagerUI.h"
   1: 
   1: #define PREF_BDM_SHOWWHENSTARTING "browser.download.manager.showWhenStarting"
   1: #define PREF_BDM_USEWINDOW "browser.download.manager.useWindow"
5352: #define PREF_BDM_FOCUSWHENSTARTING "browser.download.manager.focusWhenStarting"
   1: 
1691: class nsDownloadProxy : public nsITransfer
   1: {
   1: public:
   1: 
   1:   nsDownloadProxy() { }
   1:   virtual ~nsDownloadProxy() { }
   1: 
   1:   NS_DECL_ISUPPORTS
   1: 
   1:   NS_IMETHODIMP Init(nsIURI* aSource,
   1:                      nsIURI* aTarget,
   1:                      const nsAString& aDisplayName,
   1:                      nsIMIMEInfo *aMIMEInfo,
   1:                      PRTime aStartTime,
   1:                      nsILocalFile* aTempFile,
   1:                      nsICancelable* aCancelable) {
   1:     nsresult rv;
   1:     nsCOMPtr<nsIDownloadManager> dm = do_GetService("@mozilla.org/download-manager;1", &rv);
1691:     NS_ENSURE_SUCCESS(rv, rv);
   1:     
   1:     rv = dm->AddDownload(nsIDownloadManager::DOWNLOAD_TYPE_DOWNLOAD, aSource,
3746:                          aTarget, aDisplayName, aMIMEInfo, aStartTime,
3746:                          aTempFile, aCancelable, getter_AddRefs(mInner));
1691:     NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:     nsCOMPtr<nsIPrefService> prefs = do_GetService("@mozilla.org/preferences-service;1", &rv);
1691:     NS_ENSURE_SUCCESS(rv, rv);
   1:     nsCOMPtr<nsIPrefBranch> branch = do_QueryInterface(prefs);
   1: 
   1:     PRBool showDM = PR_TRUE;
1691:     if (branch)
   1:       branch->GetBoolPref(PREF_BDM_SHOWWHENSTARTING , &showDM);
   1: 
   1:     PRBool useWindow = PR_TRUE;
1691:     if (branch)
   1:       branch->GetBoolPref(PREF_BDM_USEWINDOW, &useWindow);
1691:     
   1:     if (showDM && useWindow) {
1691:       PRUint32 id;
1691:       mInner->GetId(&id);
   1: 
5352:       nsCOMPtr<nsIDownloadManagerUI> dmui =
5352:         do_GetService("@mozilla.org/download-manager-ui;1", &rv);
5352:       NS_ENSURE_SUCCESS(rv, rv);
5352: 
5352:       PRBool visible;
5352:       rv = dmui->GetVisible(&visible);
5352:       NS_ENSURE_SUCCESS(rv, rv);
5352: 
5352:       PRBool focus = PR_TRUE;
5352:       if (branch)
5352:         (void)branch->GetBoolPref(PREF_BDM_FOCUSWHENSTARTING, &focus);
5352: 
5352:       if (visible && !focus)
5352:         return dmui->GetAttention();
5352: 
5352:       return dmui->Show(nsnull, id);
   1:     }
   1:     return rv;
   1:   }
   1: 
   1:   NS_IMETHODIMP OnStateChange(nsIWebProgress* aWebProgress,
   1:                               nsIRequest* aRequest, PRUint32 aStateFlags,
   1:                               PRUint32 aStatus)
   1:   {
2876:     return mInner->OnStateChange(aWebProgress, aRequest, aStateFlags, aStatus);
   1:   }
   1:   
   1:   NS_IMETHODIMP OnStatusChange(nsIWebProgress *aWebProgress,
   1:                                nsIRequest *aRequest, nsresult aStatus,
   1:                                const PRUnichar *aMessage)
   1:   {
2876:     return mInner->OnStatusChange(aWebProgress, aRequest, aStatus, aMessage);
   1:   }
   1: 
   1:   NS_IMETHODIMP OnLocationChange(nsIWebProgress *aWebProgress,
   1:                                  nsIRequest *aRequest, nsIURI *aLocation)
   1:   {
2876:     return mInner->OnLocationChange(aWebProgress, aRequest, aLocation);
   1:   }
   1:   
   1:   NS_IMETHODIMP OnProgressChange(nsIWebProgress *aWebProgress,
   1:                                  nsIRequest *aRequest,
   1:                                  PRInt32 aCurSelfProgress,
   1:                                  PRInt32 aMaxSelfProgress,
   1:                                  PRInt32 aCurTotalProgress,
   1:                                  PRInt32 aMaxTotalProgress)
   1:   {
2876:     return mInner->OnProgressChange(aWebProgress, aRequest,
   1:                                     aCurSelfProgress,
   1:                                     aMaxSelfProgress,
   1:                                     aCurTotalProgress,
   1:                                     aMaxTotalProgress);
   1:   }
   1: 
   1:   NS_IMETHODIMP OnProgressChange64(nsIWebProgress *aWebProgress,
   1:                                    nsIRequest *aRequest,
   1:                                    PRInt64 aCurSelfProgress,
   1:                                    PRInt64 aMaxSelfProgress,
   1:                                    PRInt64 aCurTotalProgress,
   1:                                    PRInt64 aMaxTotalProgress)
   1:   {
2876:     return mInner->OnProgressChange64(aWebProgress, aRequest,
   1:                                       aCurSelfProgress,
   1:                                       aMaxSelfProgress,
   1:                                       aCurTotalProgress,
   1:                                       aMaxTotalProgress);
   1:   }
   1: 
   1:   NS_IMETHODIMP OnRefreshAttempted(nsIWebProgress *aWebProgress,
   1:                                    nsIURI *aUri,
   1:                                    PRInt32 aDelay,
   1:                                    PRBool aSameUri,
   1:                                    PRBool *allowRefresh)
   1:   {
   1:     *allowRefresh = PR_TRUE;
   1:     return NS_OK;
   1:   }
   1: 
   1:   NS_IMETHODIMP OnSecurityChange(nsIWebProgress *aWebProgress,
   1:                                  nsIRequest *aRequest, PRUint32 aState)
   1:   {
2876:     return mInner->OnSecurityChange(aWebProgress, aRequest, aState);
   1:   }
   1: 
   1: private:
   1:   nsCOMPtr<nsIDownload> mInner;
   1: };
   1: 
1691: NS_IMPL_ISUPPORTS3(nsDownloadProxy, nsITransfer,
   1:                    nsIWebProgressListener, nsIWebProgressListener2)
   1: 
   1: #endif
