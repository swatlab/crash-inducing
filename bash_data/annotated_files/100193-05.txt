 84764: /* Any copyright is dedicated to the Public Domain.
 84764:    http://creativecommons.org/publicdomain/zero/1.0/ */
 84764: "use strict";
 84764: 
 84764: let tab0, tab1;
 84764: let testStep = -1;
 84764: let tabEvents = "";
 84764: 
 84764: function test() {
 84764:   if (!isTiltEnabled()) {
 84764:     info("Skipping notifications test because Tilt isn't enabled.");
 84764:     return;
 84764:   }
 84764:   if (!isWebGLSupported()) {
 84764:     info("Skipping notifications test because WebGL isn't supported.");
 84764:     return;
 84764:   }
 84764: 
 88393:   requestLongerTimeout(10);
 84764:   waitForExplicitFinish();
 84764: 
 84764:   gBrowser.tabContainer.addEventListener("TabSelect", tabSelect, false);
 84764:   createNewTab();
 84764: }
 84764: 
 84764: function createNewTab() {
 84764:   tab0 = gBrowser.selectedTab;
 84764: 
 84764:   tab1 = createTab(function() {
100193:     Services.obs.addObserver(finalize, DESTROYED, false);
 88393:     Services.obs.addObserver(tab_INITIALIZING, INITIALIZING, false);
 88393:     Services.obs.addObserver(tab_DESTROYING, DESTROYING, false);
 88393:     Services.obs.addObserver(tab_SHOWN, SHOWN, false);
 88393:     Services.obs.addObserver(tab_HIDDEN, HIDDEN, false);
 88393: 
 88393:     info("Starting up the Tilt notifications test.");
 84764:     createTilt({
 84764:       onTiltOpen: function()
 84764:       {
 84764:         testStep = 0;
 84764:         tabSelect();
 84764:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 84764:     });
 84764:   });
 84764: }
 84764: 
 88393: function tab_INITIALIZING() {
 88393:   info("Handling the INITIALIZING notification.");
 88393:   tabEvents += "INITIALIZING;";
 84764: }
 84764: 
 88393: function tab_DESTROYING() {
 88393:   info("Handling the DESTROYING notification.");
 88393:   tabEvents += "DESTROYING;";
 84764: }
 84764: 
 88393: function tab_SHOWN() {
 88393:   info("Handling the SHOWN notification.");
 88393:   tabEvents += "SHOWN;";
 84764: }
 84764: 
 88393: function tab_HIDDEN() {
 88393:   info("Handling the HIDDEN notification.");
 88393:   tabEvents += "HIDDEN;";
 84764: }
 84764: 
 84764: let testSteps = [
 84764:   function step0() {
 88393:     info("Selecting tab0.");
 84764:     gBrowser.selectedTab = tab0;
 84764:   },
 84764:   function step1() {
 88393:     info("Selecting tab1.");
 84764:     gBrowser.selectedTab = tab1;
 84764:   },
 84764:   function step2() {
 88393:     info("Killing it.");
 88393:     Tilt.destroy(Tilt.currentWindowId, true);
 87863:   }
 87863: ];
 84764: 
100193: function finalize() {
100193:   if (!tabEvents) {
100193:     return;
100193:   }
 88393: 
 88393:   is(tabEvents, "INITIALIZING;HIDDEN;SHOWN;DESTROYING;",
 84764:     "The notifications weren't fired in the correct order.");
 84764: 
100193:   cleanup();
100193: }
100193: 
100193: function cleanup() {
100193:   info("Cleaning up the notifications test.");
100193: 
 84764:   tab0 = null;
 84764:   tab1 = null;
 84764: 
100193:   Services.obs.removeObserver(finalize, DESTROYED);
100193:   Services.obs.removeObserver(tab_INITIALIZING, INITIALIZING);
100193:   Services.obs.removeObserver(tab_DESTROYING, DESTROYING);
100193:   Services.obs.removeObserver(tab_SHOWN, SHOWN);
100193:   Services.obs.removeObserver(tab_HIDDEN, HIDDEN);
 88393: 
100193:   gBrowser.tabContainer.removeEventListener("TabSelect", tabSelect);
 87863:   gBrowser.removeCurrentTab();
 84764:   finish();
 84764: }
 84764: 
 84764: function tabSelect() {
 84764:   if (testStep !== -1) {
 84764:     executeSoon(testSteps[testStep]);
 84764:     testStep++;
 84764:   }
 84764: }
