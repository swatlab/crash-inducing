116151: /* This Source Code Form is subject to the terms of the Mozilla Public
116151:  * License, v. 2.0. If a copy of the MPL was not distributed with this
116151:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
116151: 
124481: this.__defineGetter__("pb", function () {
124481:   delete this.pb;
124481:   try {
124481:     return this.pb = Cc["@mozilla.org/privatebrowsing;1"].
124481:                      getService(Ci.nsIPrivateBrowsingService);
124481:   } catch (e) {}
124481:   return this.pb = null;
124481: });
116151: 
124481: // Public request gets times=0 cookie, completes
124481: // Private request gets times=1 cookie, canceled
124481: // Private resumed request sends times=1 cookie, completes
124481: 
124481: function run_test() {
124481:   // Don't run the test where the PB service is not available
124481:   if (!pb) {
124481:     return;
124481:   }
124481: 
124481:   do_test_pending();
124481:   let httpserv = new HttpServer();
124481: 
124481:   Services.prefs.setBoolPref("browser.privatebrowsing.keep_current_session", true);
124481: 
124481:   let times = 0;
124481:   httpserv.registerPathHandler("/head_download_manager.js", function (meta, response) {
124481:     response.setHeader("Content-Type", "text/plain", false);
124481:     response.setStatusLine("1.1", !meta.hasHeader('range') ? 200 : 206);
124481: 
124481:     // Set a cookie if none is sent with the request. Public and private requests
124481:     // should therefore receive different cookies, so we can tell if the resumed
124481:     // request is actually treated as private or not.
124481:     if (!meta.hasHeader('Cookie')) {
124481:       do_check_true(times == 0 || times == 1);
124481:       response.setHeader('Set-Cookie', 'times=' + times++);
124481:     } else {
124481:       do_check_eq(times, 2);
124481:       do_check_eq(meta.getHeader('Cookie'), 'times=1');
124481:     }
124481:     let full = "";
124481:     let body = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"; //60
124481:     for (var i = 0; i < 1000; i++) {
124481:       full += body;      
124481:     }
124481:     response.write(full);
124481:   });
124481:   httpserv.start(4444);
124481: 
124481:   let state = 0;
124481: 
116151:   let listener = {
116151:     onDownloadStateChange: function(aState, aDownload) {
116151:       switch (aDownload.state) {
124481:         case downloadUtils.downloadManager.DOWNLOAD_DOWNLOADING:
124481:           // We only care about the private download
124481:           if (state != 1)
124481:             break;
124481: 
124481:           state++;
124481:           do_check_true(aDownload.resumable);
124481: 
124481:           downloadUtils.downloadManager.pauseDownload(aDownload.id);
124481:           do_check_eq(aDownload.state, downloadUtils.downloadManager.DOWNLOAD_PAUSED);
124481: 
124481:           do_execute_soon(function() {
124481:             downloadUtils.downloadManager.resumeDownload(aDownload.id);
124481:           });
124481:           break;
124481: 
124481:         case downloadUtils.downloadManager.DOWNLOAD_FINISHED:
124481:           if (state == 0) {
124481:             do_execute_soon(function() {
124481:               // Perform an identical request but in private mode.
124481:               // It should receive a different cookie than the
124481:               // public request.
124481: 
124481:               state++;
124481:                               
124481:               pb.privateBrowsingEnabled = true;
124481: 
124481:               addDownload({
124481:                 isPrivate: pb.privateBrowsingEnabled,
124481:                 sourceURI: downloadCSource,
124481:                 downloadName: downloadCName + "!!!",
124481:                 runBeforeStart: function (aDownload) {
124481:                   // Check that dl is retrievable
124481:                   do_check_eq(downloadUtils.downloadManager.activeDownloadCount, 1);
124481:                 }
124481:               });
124481:             });
124481:           } else if (state == 2) {
124481:             // We're done here.
124481:             do_execute_soon(function() {
124481:               pb.privateBrowsingEnabled = false;
124481:               Services.prefs.clearUserPref("browser.privatebrowsing.keep_current_session");
124481:               httpserv.stop(do_test_finished);
124481:             });
124481:           }
124481:           break;
124481: 
124481:         default:
116151:           break;
116151:       }
116151:     },
116151:     onStateChange: function(a, b, c, d, e) { },
116151:     onProgressChange: function(a, b, c, d, e, f, g) { },
116151:     onSecurityChange: function(a, b, c, d) { }
116151:   };
116151: 
124481:   downloadUtils.downloadManager.addListener(listener);
116151: 
124481:   const downloadCSource = "http://localhost:4444/head_download_manager.js";
124481:   const downloadCName = "download-C";
124481: 
124481:   // First a public download that completes without interruption.
124481:   let dl = addDownload({
124481:     isPrivate: pb.privateBrowsingEnabled,
124481:     sourceURI: downloadCSource,
124481:     downloadName: downloadCName,
124481:     runBeforeStart: function (aDownload) {
124481:       // Check that dl is retrievable
124481:       do_check_eq(downloadUtils.downloadManager.activeDownloadCount, 1);
124481:     }
124480:   });
124481: }
