38027: /* ***** BEGIN LICENSE BLOCK *****
38027:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
38027:  *
38027:  * The contents of this file are subject to the Mozilla Public License Version
38027:  * 1.1 (the "License"); you may not use this file except in compliance with
38027:  * the License. You may obtain a copy of the License at
38027:  * http://www.mozilla.org/MPL/
38027:  *
38027:  * Software distributed under the License is distributed on an "AS IS" basis,
38027:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
38027:  * for the specific language governing rights and limitations under the
38027:  * License.
38027:  *
38027:  * The Original Code is Mozilla code.
38027:  *
38027:  * The Initial Developer of the Original Code is
38027:  * Mozilla Foundation.
38027:  * Portions created by the Initial Developer are Copyright (C) 2010
38027:  * the Initial Developer. All Rights Reserved.
38027:  *
38027:  * Contributor(s):
38027:  *    Ted Mielczarek <ted.mielczarek@gmail.com> (original author)
38027:  *
38027:  * Alternatively, the contents of this file may be used under the terms of
38027:  * either the GNU General Public License Version 2 or later (the "GPL"), or
38027:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
38027:  * in which case the provisions of the GPL or the LGPL are applicable instead
38027:  * of those above. If you wish to allow use of your version of this file only
38027:  * under the terms of either the GPL or the LGPL, and not to allow others to
38027:  * use your version of this file under the terms of the MPL, indicate your
38027:  * decision by deleting the provisions above and replace them with the notice
38027:  * and other provisions required by the GPL or the LGPL. If you do not delete
38027:  * the provisions above, a recipient may use your version of this file under
38027:  * the terms of any one of the MPL, the GPL or the LGPL.
38027:  *
38027:  * ***** END LICENSE BLOCK ***** */
38027: 
39501: Components.utils.import("resource://gre/modules/Services.jsm");
39501: 
38027: let EXPORTED_SYMBOLS = [
38027:   "CrashSubmit"
38027: ];
38027: 
31608: const Cc = Components.classes;
31608: const Ci = Components.interfaces;
38027: const STATE_START = Ci.nsIWebProgressListener.STATE_START;
38027: const STATE_STOP = Ci.nsIWebProgressListener.STATE_STOP;
31608: 
39501: const SUCCESS = "success";
39501: const FAILED  = "failed";
39501: const SUBMITTING = "submitting";
39501: 
38027: let reportURL = null;
38027: let strings = null;
38027: let myListener = null;
31608: 
31608: function parseKeyValuePairs(text) {
31608:   var lines = text.split('\n');
31608:   var data = {};
31608:   for (let i = 0; i < lines.length; i++) {
31608:     if (lines[i] == '')
31608:       continue;
31608: 
32169:     // can't just .split() because the value might contain = characters
32169:     let eq = lines[i].indexOf('=');
32169:     if (eq != -1) {
32169:       let [key, value] = [lines[i].substring(0, eq),
32169:                           lines[i].substring(eq + 1)];
32169:       if (key && value)
87639:         data[key] = value.replace(/\\n/g, "\n").replace(/\\\\/g, "\\");
31608:     }
32169:   }
31608:   return data;
31608: }
31608: 
31608: function parseKeyValuePairsFromFile(file) {
31608:   var fstream = Cc["@mozilla.org/network/file-input-stream;1"].
31608:                 createInstance(Ci.nsIFileInputStream);
31608:   fstream.init(file, -1, 0, 0);
31608:   var is = Cc["@mozilla.org/intl/converter-input-stream;1"].
31608:            createInstance(Ci.nsIConverterInputStream);
31608:   is.init(fstream, "UTF-8", 1024, Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);
31608:   var str = {};
31608:   var contents = '';
31608:   while (is.readString(4096, str) != 0) {
31608:     contents += str.value;
31608:   }
31608:   is.close();
31608:   fstream.close();
31608:   return parseKeyValuePairs(contents);
31608: }
31608: 
31608: function parseINIStrings(file) {
31608:   var factory = Cc["@mozilla.org/xpcom/ini-parser-factory;1"].
31608:                 getService(Ci.nsIINIParserFactory);
31608:   var parser = factory.createINIParser(file);
31608:   var obj = {};
31608:   var en = parser.getKeys("Strings");
31608:   while (en.hasMore()) {
31608:     var key = en.getNext();
31608:     obj[key] = parser.getString("Strings", key);
31608:   }
31608:   return obj;
31608: }
31608: 
31608: // Since we're basically re-implementing part of the crashreporter
31608: // client here, we'll just steal the strings we need from crashreporter.ini
31608: function getL10nStrings() {
31608:   let dirSvc = Cc["@mozilla.org/file/directory_service;1"].
31608:                getService(Ci.nsIProperties);
31608:   let path = dirSvc.get("GreD", Ci.nsIFile);
31608:   path.append("crashreporter.ini");
31608:   if (!path.exists()) {
31608:     // see if we're on a mac
31608:     path = path.parent;
31608:     path.append("crashreporter.app");
31608:     path.append("Contents");
31608:     path.append("MacOS");
31608:     path.append("crashreporter.ini");
31608:     if (!path.exists()) {
31608:       // very bad, but I don't know how to recover
31608:       return;
31608:     }
31608:   }
31608:   let crstrings = parseINIStrings(path);
31608:   strings = {
31608:     'crashid': crstrings.CrashID,
31608:     'reporturl': crstrings.CrashDetailsURL
31608:   };
31608: 
31608:   path = dirSvc.get("XCurProcD", Ci.nsIFile);
31608:   path.append("crashreporter-override.ini");
31608:   if (path.exists()) {
31608:     crstrings = parseINIStrings(path);
31608:     if ('CrashID' in crstrings)
31608:       strings['crashid'] = crstrings.CrashID;
31608:     if ('CrashDetailsURL' in crstrings)
31608:       strings['reporturl'] = crstrings.CrashDetailsURL;
31608:   }
31608: }
31608: 
31608: function getPendingMinidump(id) {
31608:   let directoryService = Cc["@mozilla.org/file/directory_service;1"].
31608:                          getService(Ci.nsIProperties);
38027:   let pendingDir = directoryService.get("UAppData", Ci.nsIFile);
38027:   pendingDir.append("Crash Reports");
38027:   pendingDir.append("pending");
31608:   let dump = pendingDir.clone();
31608:   let extra = pendingDir.clone();
31608:   dump.append(id + ".dmp");
31608:   extra.append(id + ".extra");
31608:   return [dump, extra];
31608: }
31608: 
31608: function addFormEntry(doc, form, name, value) {
31608:   var input = doc.createElement("input");
31608:   input.type = "hidden";
31608:   input.name = name;
31608:   input.value = value;
31608:   form.appendChild(input);
31608: }
31608: 
31608: function writeSubmittedReport(crashID, viewURL) {
38027:   let directoryService = Cc["@mozilla.org/file/directory_service;1"].
38027:                            getService(Ci.nsIProperties);
38027:   let reportFile = directoryService.get("UAppData", Ci.nsIFile);
38027:   reportFile.append("Crash Reports");
38027:   reportFile.append("submitted");
39788:   if (!reportFile.exists())
39788:     reportFile.create(Ci.nsIFile.DIRECTORY_TYPE, 0700);
31608:   reportFile.append(crashID + ".txt");
31608:   var fstream = Cc["@mozilla.org/network/file-output-stream;1"].
31608:                 createInstance(Ci.nsIFileOutputStream);
31608:   // open, write, truncate
31608:   fstream.init(reportFile, -1, -1, 0);
31608:   var os = Cc["@mozilla.org/intl/converter-output-stream;1"].
31608:            createInstance(Ci.nsIConverterOutputStream);
31608:   os.init(fstream, "UTF-8", 0, 0x0000);
31608: 
31608:   var data = strings.crashid.replace("%s", crashID);
31608:   if (viewURL)
31608:      data += "\n" + strings.reporturl.replace("%s", viewURL);
31608: 
31608:   os.writeString(data);
31608:   os.close();
31608:   fstream.close();
31608: }
31608: 
38027: // the Submitter class represents an individual submission.
74149: function Submitter(id, submitSuccess, submitError, noThrottle) {
38027:   this.id = id;
38027:   this.successCallback = submitSuccess;
38027:   this.errorCallback = submitError;
46440:   this.noThrottle = noThrottle;
38027: }
38027: 
38027: Submitter.prototype = {
38027:   submitSuccess: function Submitter_submitSuccess(ret)
38027:   {
38027:     if (!ret.CrashID) {
39501:       this.notifyStatus(FAILED);
38027:       this.cleanup();
31608:       return;
38027:     }
38027: 
31608:     // Write out the details file to submitted/
31608:     writeSubmittedReport(ret.CrashID, ret.ViewURL);
31608: 
31608:     // Delete from pending dir
31608:     try {
38027:       this.dump.remove(false);
38027:       this.extra.remove(false);
31608:     }
31608:     catch (ex) {
31608:       // report an error? not much the user can do here.
31608:     }
31608: 
39501:     this.notifyStatus(SUCCESS, ret);
38027:     this.cleanup();
38027:   },
31608: 
38027:   cleanup: function Submitter_cleanup() {
38027:     // drop some references just to be nice
38027:     this.successCallback = null;
38027:     this.errorCallback = null;
38027:     this.iframe = null;
38027:     this.dump = null;
38027:     this.extra = null;
38027:     // remove this object from the list of active submissions
38027:     let idx = CrashSubmit._activeSubmissions.indexOf(this);
38027:     if (idx != -1)
38027:       CrashSubmit._activeSubmissions.splice(idx, 1);
38027:   },
31608: 
38027:   submitForm: function Submitter_submitForm()
31608:   {
38027:     let reportData = parseKeyValuePairsFromFile(this.extra);
74149:     if (!('ServerURL' in reportData)) {
31608:       return false;
31608:     }
74149: 
74149:     let xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
74149:               .createInstance(Ci.nsIXMLHttpRequest);
74149:     xhr.open("POST", reportData.ServerURL, true);
74149:     delete reportData.ServerURL;
74149: 
74149:     let formData = Cc["@mozilla.org/files/formdata;1"]
74149:                    .createInstance(Ci.nsIDOMFormData);
31608:     // add the other data
31608:     for (let [name, value] in Iterator(reportData)) {
74149:       formData.append(name, value);
31608:     }
46440:     if (this.noThrottle) {
31608:       // tell the server not to throttle this, since it was manually submitted
74149:       formData.append("Throttleable", "0");
46440:     }
31608:     // add the minidump
74149:     formData.append("upload_file_minidump", File(this.dump.path));
74149:     let self = this;
79465:     xhr.addEventListener("readystatechange", function (aEvt) {
74149:       if (xhr.readyState == 4) {
74149:         if (xhr.status != 200) {
74149:           self.notifyStatus(FAILED);
74149:           self.cleanup();
74149:         } else {
74149:           let ret = parseKeyValuePairs(xhr.responseText);
74149:           self.submitSuccess(ret);
74149:         }
74149:       }
79465:     }, false);
74149: 
74149:     xhr.send(formData);
38027:     return true;
38027:   },
31608: 
39501:   notifyStatus: function Submitter_notify(status, ret)
39501:   {
39501:     let propBag = Cc["@mozilla.org/hash-property-bag;1"].
39501:                   createInstance(Ci.nsIWritablePropertyBag2);
39501:     propBag.setPropertyAsAString("minidumpID", this.id);
46440:     if (status == SUCCESS) {
46440:       propBag.setPropertyAsAString("serverCrashID", ret.CrashID);
46440:     }
39501: 
39501:     Services.obs.notifyObservers(propBag, "crash-report-status", status);
39501: 
39501:     switch (status) {
39501:       case SUCCESS:
39501:         if (this.successCallback)
39501:           this.successCallback(this.id, ret);
39501:         break;
39501:       case FAILED:
39501:         if (this.errorCallback)
39501:           this.errorCallback(this.id);
39501:         break;
39501:       default:
39501:         // no callbacks invoked.
39501:     }
39501:   },
39501: 
38027:   submit: function Submitter_submit()
38027:   {
38027:     let [dump, extra] = getPendingMinidump(this.id);
38041:     if (!dump.exists() || !extra.exists()) {
39501:       this.notifyStatus(FAILED);
38041:       this.cleanup();
31608:       return false;
38041:     }
39501: 
39501:     this.notifyStatus(SUBMITTING);
39501: 
38027:     this.dump = dump;
38027:     this.extra = extra;
37207: 
74149:     if (!this.submitForm()) {
74149:        this.notifyStatus(FAILED);
74149:        this.cleanup();
74149:        return false;
37207:     }
31608:     return true;
31608:   }
38027: };
31608: 
38027: //===================================
38027: // External API goes here
38027: let CrashSubmit = {
38027:   /**
38027:    * Submit the crash report named id.dmp from the "pending" directory.
38027:    *
38027:    * @param id
38027:    *        Filename (minus .dmp extension) of the minidump to submit.
74150:    * @param params
74150:    *        An object containing any of the following optional parameters:
74150:    *        - submitSuccess
38027:    *          A function that will be called if the report is submitted
38027:    *          successfully with two parameters: the id that was passed
38027:    *          to this function, and an object containing the key/value
38027:    *          data returned from the server in its properties.
74150:    *        - submitError
38027:    *          A function that will be called with one parameter if the
38027:    *          report fails to submit: the id that was passed to this
38027:    *          function.
74150:    *        - noThrottle
46440:    *          If true, this crash report should be submitted with
46440:    *          an extra parameter of "Throttleable=0" indicating that
46440:    *          it should be processed right away. This should be set
46440:    *          when the report is being submitted and the user expects
74150:    *          to see the results immediately. Defaults to false.
38027:    *
38027:    * @return true if the submission began successfully, or false if
38027:    *         it failed for some reason. (If the dump file does not
38027:    *         exist, for example.)
38027:    */
74150:   submit: function CrashSubmit_submit(id, params)
38027:   {
74150:     params = params || {};
74150:     let submitSuccess = null;
74150:     let submitError = null;
74150:     let noThrottle = false;
74150: 
74150:     if ('submitSuccess' in params)
74150:       submitSuccess = params.submitSuccess;
74150:     if ('submitError' in params)
74150:       submitError = params.submitError;
74150:     if ('noThrottle' in params)
74150:       noThrottle = params.noThrottle;
74150: 
46440:     let submitter = new Submitter(id,
46440:                                   submitSuccess,
46440:                                   submitError,
46440:                                   noThrottle);
38027:     CrashSubmit._activeSubmissions.push(submitter);
38027:     return submitter.submit();
38027:   },
31608: 
38027:   // List of currently active submit objects
38027:   _activeSubmissions: []
38027: };
31608: 
38027: // Run this when first loaded
38496: getL10nStrings();
