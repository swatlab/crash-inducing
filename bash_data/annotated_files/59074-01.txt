    1: /* vim:set ts=4 sw=4 sts=4 et cindent: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Copyright 1993 by OpenVision Technologies, Inc.
    1:  * 
    1:  * Permission to use, copy, modify, distribute, and sell this software
    1:  * and its documentation for any purpose is hereby granted without fee,
    1:  * provided that the above copyright notice appears in all copies and
    1:  * that both that copyright notice and this permission notice appear in
    1:  * supporting documentation, and that the name of OpenVision not be used
    1:  * in advertising or publicity pertaining to distribution of the software
    1:  * without specific, written prior permission. OpenVision makes no
    1:  * representations about the suitability of this software for any
    1:  * purpose.  It is provided "as is" without express or implied warranty.
    1:  * 
    1:  * OPENVISION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
    1:  * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
    1:  * EVENT SHALL OPENVISION BE LIABLE FOR ANY SPECIAL, INDIRECT OR
    1:  * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
    1:  * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    1:  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    1:  * PERFORMANCE OF THIS SOFTWARE.
    1:  ****** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef GSSAPI_H_
    1: #define GSSAPI_H_
    1: 
    1: /*
    1:  * Also define _GSSAPI_H_ as that is what the Kerberos 5 code defines and
    1:  * what header files on some systems look for.
    1:  */
    1: #define _GSSAPI_H_
    1: 
    1: /*
    1:  * On Mac OS X, Kerberos/Kerberos.h is used to gain access to certain
    1:  * system-specific Kerberos functions, but on 10.4, that file also brings
    1:  * in other headers that conflict with this one.
    1:  */
    1: #define _GSSAPI_GENERIC_H_
    1: #define _GSSAPI_KRB5_H_
    1: 
    1: /* 
    1:  * Define windows specific needed parameters.
    1:  */
    1: 
    1: #ifndef GSS_CALLCONV
    1: #if defined(_WIN32)
    1: #define GSS_CALLCONV __stdcall
    1: #define GSS_CALLCONV_C __cdecl
    1: #else
    1: #define GSS_CALLCONV 
    1: #define GSS_CALLCONV_C
    1: #endif
    1: #endif /* GSS_CALLCONV */
    1: 
    1: #ifdef GSS_USE_FUNCTION_POINTERS
    1: #ifdef _WIN32
    1: #undef GSS_CALLCONV
    1: #define GSS_CALLCONV
    1: #define GSS_FUNC(f) (__stdcall *f##_type)
    1: #else
    1: #define GSS_FUNC(f) (*f##_type)
    1: #endif
    1: #define GSS_MAKE_TYPEDEF typedef
    1: #else
    1: #define GSS_FUNC(f) f
    1: #define GSS_MAKE_TYPEDEF
    1: #endif
    1: 
    1: /*
    1:  * First, include stddef.h to get size_t defined.
    1:  */
    1: #include <stddef.h>
    1: 
    1: /*
    1:  * Configure set the following
    1:  */
    1: 
    1: #ifndef SIZEOF_LONG
    1: #undef SIZEOF_LONG 
    1: #endif
    1: #ifndef SIZEOF_SHORT
    1: #undef SIZEOF_SHORT
    1: #endif
    1: 
    1: #ifndef EXTERN_C_BEGIN
    1: #ifdef __cplusplus
    1: #define EXTERN_C_BEGIN extern "C" {
    1: #define EXTERN_C_END }
    1: #else
    1: #define EXTERN_C_BEGIN
    1: #define EXTERN_C_END
    1: #endif
    1: #endif
    1: 
    1: EXTERN_C_BEGIN
    1: 
59074: #if defined(XP_MACOSX)
59074: #    pragma pack(push,2)
59074: #endif
59074: 
    1: /*
    1:  * If the platform supports the xom.h header file, it should be
    1:  * included here.
    1:  */
    1: /* #include <xom.h> */
    1: 
    1: 
    1: /*
    1:  * Now define the three implementation-dependent types.
    1:  */
    1: 
    1: typedef void * gss_name_t ;
    1: typedef void * gss_ctx_id_t ;
    1: typedef void * gss_cred_id_t ;
    1:  
    1: 
    1: /*
    1:  * The following type must be defined as the smallest natural
    1:  * unsigned integer supported by the platform that has at least
    1:  * 32 bits of precision.
    1:  */
    1: 
    1: #if SIZEOF_LONG == 4
    1: typedef unsigned long gss_uint32;
    1: #elif SIZEOF_SHORT == 4
    1: typedef unsigned short gss_uint32;
    1: #else
    1: typedef unsigned int gss_uint32;
    1: #endif
    1: 
    1: #ifdef OM_STRING
    1: 
    1: /*
    1:  * We have included the xom.h header file.  Verify that OM_uint32
    1:  * is defined correctly.
    1:  */
    1: 
    1: #if sizeof(gss_uint32) != sizeof(OM_uint32)
    1: #error Incompatible definition of OM_uint32 from xom.h
    1: #endif
    1: 
    1: typedef OM_object_identifier gss_OID_desc, *gss_OID;
    1: 
    1: #else /* !OM_STRING */
    1: 
    1: /*
    1:  * We can't use X/Open definitions, so roll our own.               
    1:  */
    1: typedef gss_uint32 OM_uint32;
    1: typedef struct gss_OID_desc_struct {
    1:   OM_uint32 length;
    1:   void *elements;
    1: } gss_OID_desc, *gss_OID;
    1: 
    1: #endif /* !OM_STRING */
    1: 
    1: typedef struct gss_OID_set_desc_struct  {
    1:   size_t     count;
    1:   gss_OID    elements;
    1: } gss_OID_set_desc, *gss_OID_set;
    1: 
    1: 
    1: /*
    1:  * For now, define a QOP-type as an OM_uint32
    1:  */
    1: typedef OM_uint32 gss_qop_t;
    1: 
    1: typedef int gss_cred_usage_t;
    1: 
    1: 
    1: typedef struct gss_buffer_desc_struct {
    1:   size_t length;
    1:   void *value;
    1: } gss_buffer_desc, *gss_buffer_t;
    1: 
    1: typedef struct gss_channel_bindings_struct {
    1:   OM_uint32 initiator_addrtype;
    1:   gss_buffer_desc initiator_address;
    1:   OM_uint32 acceptor_addrtype;
    1:   gss_buffer_desc acceptor_address;
    1:   gss_buffer_desc application_data;
    1: } *gss_channel_bindings_t;
    1: 
    1: 
    1: /*
    1:  * Flag bits for context-level services.
    1:  */
    1: #define GSS_C_DELEG_FLAG 1
    1: #define GSS_C_MUTUAL_FLAG 2
    1: #define GSS_C_REPLAY_FLAG 4
    1: #define GSS_C_SEQUENCE_FLAG 8
    1: #define GSS_C_CONF_FLAG 16
    1: #define GSS_C_INTEG_FLAG 32
    1: #define GSS_C_ANON_FLAG 64
    1: #define GSS_C_PROT_READY_FLAG 128
    1: #define GSS_C_TRANS_FLAG 256
    1: 
    1: /*
    1:  * Credential usage options
    1:  */
    1: #define GSS_C_BOTH 0
    1: #define GSS_C_INITIATE 1
    1: #define GSS_C_ACCEPT 2
    1: 
    1: /*
    1:  * Status code types for gss_display_status
    1:  */
    1: #define GSS_C_GSS_CODE 1
    1: #define GSS_C_MECH_CODE 2
    1: 
    1: /*
    1:  * The constant definitions for channel-bindings address families
    1:  */
    1: #define GSS_C_AF_UNSPEC     0
    1: #define GSS_C_AF_LOCAL      1
    1: #define GSS_C_AF_INET       2
    1: #define GSS_C_AF_IMPLINK    3
    1: #define GSS_C_AF_PUP        4
    1: #define GSS_C_AF_CHAOS      5
    1: #define GSS_C_AF_NS         6
    1: #define GSS_C_AF_NBS        7
    1: #define GSS_C_AF_ECMA       8
    1: #define GSS_C_AF_DATAKIT    9
    1: #define GSS_C_AF_CCITT      10
    1: #define GSS_C_AF_SNA        11
    1: #define GSS_C_AF_DECnet     12
    1: #define GSS_C_AF_DLI        13
    1: #define GSS_C_AF_LAT        14
    1: #define GSS_C_AF_HYLINK     15
    1: #define GSS_C_AF_APPLETALK  16
    1: #define GSS_C_AF_BSC        17
    1: #define GSS_C_AF_DSS        18
    1: #define GSS_C_AF_OSI        19
    1: #define GSS_C_AF_X25        21
    1: 
    1: #define GSS_C_AF_NULLADDR   255
    1: 
    1: /*
    1:  * Various Null values
    1:  */
    1: #define GSS_C_NO_NAME ((gss_name_t) 0)
    1: #define GSS_C_NO_BUFFER ((gss_buffer_t) 0)
    1: #define GSS_C_NO_OID ((gss_OID) 0)
    1: #define GSS_C_NO_OID_SET ((gss_OID_set) 0)
    1: #define GSS_C_NO_CONTEXT ((gss_ctx_id_t) 0)
    1: #define GSS_C_NO_CREDENTIAL ((gss_cred_id_t) 0)
    1: #define GSS_C_NO_CHANNEL_BINDINGS ((gss_channel_bindings_t) 0)
    1: #define GSS_C_EMPTY_BUFFER {0, NULL}
    1: 
    1: /*
    1:  * Some alternate names for a couple of the above
    1:  * values.  These are defined for V1 compatibility.
    1:  */
    1: #define GSS_C_NULL_OID GSS_C_NO_OID
    1: #define GSS_C_NULL_OID_SET GSS_C_NO_OID_SET
    1: 
    1: /*
    1:  * Define the default Quality of Protection for per-message
    1:  * services.  Note that an implementation that offers multiple
    1:  * levels of QOP may define GSS_C_QOP_DEFAULT to be either zero
    1:  * (as done here) to mean "default protection", or to a specific
    1:  * explicit QOP value.  However, a value of 0 should always be
    1:  * interpreted by a GSSAPI implementation as a request for the
    1:  * default protection level.
    1:  */
    1: #define GSS_C_QOP_DEFAULT 0
    1: 
    1: /*
    1:  * Expiration time of 2^32-1 seconds means infinite lifetime for a
    1:  * credential or security context
    1:  */
    1: #define GSS_C_INDEFINITE 0xfffffffful
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {10, (void *)"\x2a\x86\x48\x86\xf7\x12"
    1:  *              "\x01\x02\x01\x01"},
    1:  * corresponding to an object-identifier value of
    1:  * {iso(1) member-body(2) United States(840) mit(113554)
    1:  *  infosys(1) gssapi(2) generic(1) user_name(1)}.  The constant
    1:  * GSS_C_NT_USER_NAME should be initialized to point
    1:  * to that gss_OID_desc.
    1:  */
    1: extern gss_OID GSS_C_NT_USER_NAME;
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {10, (void *)"\x2a\x86\x48\x86\xf7\x12"
    1:  *              "\x01\x02\x01\x02"},
    1:  * corresponding to an object-identifier value of
    1:  * {iso(1) member-body(2) United States(840) mit(113554)
    1:  *  infosys(1) gssapi(2) generic(1) machine_uid_name(2)}.
    1:  * The constant GSS_C_NT_MACHINE_UID_NAME should be
    1:  * initialized to point to that gss_OID_desc.
    1:  */
    1: extern gss_OID GSS_C_NT_MACHINE_UID_NAME;
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {10, (void *)"\x2a\x86\x48\x86\xf7\x12"
    1:  *              "\x01\x02\x01\x03"},
    1:  * corresponding to an object-identifier value of
    1:  * {iso(1) member-body(2) United States(840) mit(113554)
    1:  *  infosys(1) gssapi(2) generic(1) string_uid_name(3)}.
    1:  * The constant GSS_C_NT_STRING_UID_NAME should be
    1:  * initialized to point to that gss_OID_desc.
    1:  */
    1: extern gss_OID GSS_C_NT_STRING_UID_NAME;
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {6, (void *)"\x2b\x06\x01\x05\x06\x02"},
    1:  * corresponding to an object-identifier value of
    1:  * {iso(1) org(3) dod(6) internet(1) security(5)
    1:  * nametypes(6) gss-host-based-services(2)).  The constant
    1:  * GSS_C_NT_HOSTBASED_SERVICE_X should be initialized to point
    1:  * to that gss_OID_desc.  This is a deprecated OID value, and
    1:  * implementations wishing to support hostbased-service names
    1:  * should instead use the GSS_C_NT_HOSTBASED_SERVICE OID,
    1:  * defined below, to identify such names; 
    1:  * GSS_C_NT_HOSTBASED_SERVICE_X should be accepted a synonym 
    1:  * for GSS_C_NT_HOSTBASED_SERVICE when presented as an input
    1:  * parameter, but should not be emitted by GSSAPI 
    1:  * implementations
    1:  */
    1: extern gss_OID GSS_C_NT_HOSTBASED_SERVICE_X;
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {10, (void *)"\x2a\x86\x48\x86\xf7\x12"
    1:  *              "\x01\x02\x01\x04"}, corresponding to an 
    1:  * object-identifier value of {iso(1) member-body(2) 
    1:  * Unites States(840) mit(113554) infosys(1) gssapi(2) 
    1:  * generic(1) service_name(4)}.  The constant
    1:  * GSS_C_NT_HOSTBASED_SERVICE should be initialized 
    1:  * to point to that gss_OID_desc.  
    1:  */
    1: extern gss_OID GSS_C_NT_HOSTBASED_SERVICE;
    1: 
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {6, (void *)"\x2b\x06\01\x05\x06\x03"},
    1:  * corresponding to an object identifier value of
    1:  * {1(iso), 3(org), 6(dod), 1(internet), 5(security),
    1:  * 6(nametypes), 3(gss-anonymous-name)}.  The constant
    1:  * and GSS_C_NT_ANONYMOUS should be initialized to point
    1:  * to that gss_OID_desc.
    1:  */
    1: extern gss_OID GSS_C_NT_ANONYMOUS;
    1: 
    1: /*
    1:  * The implementation must reserve static storage for a
    1:  * gss_OID_desc object containing the value
    1:  * {6, (void *)"\x2b\x06\x01\x05\x06\x04"},
    1:  * corresponding to an object-identifier value of
    1:  * {1(iso), 3(org), 6(dod), 1(internet), 5(security),
    1:  * 6(nametypes), 4(gss-api-exported-name)}.  The constant
    1:  * GSS_C_NT_EXPORT_NAME should be initialized to point
    1:  * to that gss_OID_desc.
    1:  */
    1: extern gss_OID GSS_C_NT_EXPORT_NAME;
    1: 
    1: /* Major status codes */
    1: 
    1: #define GSS_S_COMPLETE 0
    1: 
    1: /*
    1:  * Some "helper" definitions to make the status code macros obvious.
    1:  */
    1: #define GSS_C_CALLING_ERROR_OFFSET 24
    1: #define GSS_C_ROUTINE_ERROR_OFFSET 16
    1: #define GSS_C_SUPPLEMENTARY_OFFSET 0
    1: #define GSS_C_CALLING_ERROR_MASK 0377ul
    1: #define GSS_C_ROUTINE_ERROR_MASK 0377ul
    1: #define GSS_C_SUPPLEMENTARY_MASK 0177777ul
    1: 
    1: /*
    1:  * The macros that test status codes for error conditions.
    1:  * Note that the GSS_ERROR() macro has changed slightly from
    1:  * the V1 GSSAPI so that it now evaluates its argument
    1:  * only once.
    1:  */
    1: #define GSS_CALLING_ERROR(x) \
    1: (x & (GSS_C_CALLING_ERROR_MASK << GSS_C_CALLING_ERROR_OFFSET))
    1: #define GSS_ROUTINE_ERROR(x) \
    1:      (x & (GSS_C_ROUTINE_ERROR_MASK << GSS_C_ROUTINE_ERROR_OFFSET))
    1: #define GSS_SUPPLEMENTARY_INFO(x) \
    1:      (x & (GSS_C_SUPPLEMENTARY_MASK << GSS_C_SUPPLEMENTARY_OFFSET))
    1: #define GSS_ERROR(x) \
    1:      (x & ((GSS_C_CALLING_ERROR_MASK << GSS_C_CALLING_ERROR_OFFSET) | \
    1:            (GSS_C_ROUTINE_ERROR_MASK << GSS_C_ROUTINE_ERROR_OFFSET)))
    1: 
    1: /*
    1:  * Now the actual status code definitions
    1:  */
    1: 
    1: /*
    1:  * Calling errors:
    1:  */
    1: #define GSS_S_CALL_INACCESSIBLE_READ \
    1:      (1ul << GSS_C_CALLING_ERROR_OFFSET)
    1: #define GSS_S_CALL_INACCESSIBLE_WRITE \
    1:      (2ul << GSS_C_CALLING_ERROR_OFFSET)
    1: #define GSS_S_CALL_BAD_STRUCTURE \
    1:      (3ul << GSS_C_CALLING_ERROR_OFFSET)
    1: 
    1: /*
    1:  * Routine errors:
    1:  */
    1: #define GSS_S_BAD_MECH (1ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_NAME (2ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_NAMETYPE (3ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_BINDINGS (4ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_STATUS (5ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_SIG (6ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_MIC GSS_S_BAD_SIG
    1: #define GSS_S_NO_CRED (7ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_NO_CONTEXT (8ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_DEFECTIVE_TOKEN (9ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_DEFECTIVE_CREDENTIAL (10ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_CREDENTIALS_EXPIRED (11ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_CONTEXT_EXPIRED (12ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_FAILURE (13ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_BAD_QOP (14ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_UNAUTHORIZED (15ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_UNAVAILABLE (16ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_DUPLICATE_ELEMENT (17ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: #define GSS_S_NAME_NOT_MN (18ul << GSS_C_ROUTINE_ERROR_OFFSET)
    1: 
    1: /*
    1:  * Supplementary info bits:
    1:  */
    1: #define GSS_S_CONTINUE_NEEDED (1ul << (GSS_C_SUPPLEMENTARY_OFFSET + 0))
    1: #define GSS_S_DUPLICATE_TOKEN (1ul << (GSS_C_SUPPLEMENTARY_OFFSET + 1))
    1: #define GSS_S_OLD_TOKEN (1ul << (GSS_C_SUPPLEMENTARY_OFFSET + 2))
    1: #define GSS_S_UNSEQ_TOKEN (1ul << (GSS_C_SUPPLEMENTARY_OFFSET + 3))
    1: #define GSS_S_GAP_TOKEN (1ul << (GSS_C_SUPPLEMENTARY_OFFSET + 4))
    1: 
    1: /*
    1:  * Finally, function prototypes for the GSS-API routines.
    1:  */
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_acquire_cred)
    1: (OM_uint32 *,             /*  minor_status */
    1:  const gss_name_t,        /* desired_name */
    1:  OM_uint32,               /* time_req */
    1:  const gss_OID_set,       /* desired_mechs */
    1:  gss_cred_usage_t,        /* cred_usage */
    1:  gss_cred_id_t *,         /* output_cred_handle */
    1:  gss_OID_set *,           /* actual_mechs */
    1:  OM_uint32 *              /* time_rec */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_release_cred)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_cred_id_t *          /* cred_handle */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_init_sec_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_cred_id_t,     /* initiator_cred_handle */
    1:  gss_ctx_id_t *,          /* context_handle */
    1:  const gss_name_t,        /* target_name */
    1:  const gss_OID,           /* mech_type */
    1:  OM_uint32,               /* req_flags */
    1:  OM_uint32,               /* time_req */
    1:  const gss_channel_bindings_t, /* input_chan_bindings */
    1:  const gss_buffer_t,      /* input_token */
    1:  gss_OID *,               /* actual_mech_type */
    1:  gss_buffer_t,            /* output_token */
    1:  OM_uint32 *,             /* ret_flags */
    1:  OM_uint32 *              /* time_rec */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_accept_sec_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_ctx_id_t *,          /* context_handle */
    1:  const gss_cred_id_t,     /* acceptor_cred_handle */
    1:  const gss_buffer_t,      /* input_token_buffer */
    1:  const gss_channel_bindings_t, /* input_chan_bindings */
    1:  gss_name_t *,            /* src_name */
    1:  gss_OID *,               /* mech_type */
    1:  gss_buffer_t,            /* output_token */
    1:  OM_uint32 *,             /* ret_flags */
    1:  OM_uint32 *,             /* time_rec */
    1:  gss_cred_id_t *          /* delegated_cred_handle */
    1:               );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_process_context_token)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  const gss_buffer_t       /* token_buffer */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_delete_sec_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_ctx_id_t *,          /* context_handle */
    1:  gss_buffer_t             /* output_token */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32
    1: GSS_CALLCONV GSS_FUNC(gss_context_time)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  OM_uint32 *              /* time_rec */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_get_mic)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  gss_qop_t,               /* qop_req */
    1:  const gss_buffer_t,      /* message_buffer */
    1:  gss_buffer_t             /* message_token */
    1:  );
    1: 
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_verify_mic)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  const gss_buffer_t,      /* message_buffer */
    1:  const gss_buffer_t,      /* token_buffer */
    1:  gss_qop_t *              /* qop_state */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_wrap)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  int,                     /* conf_req_flag */
    1:  gss_qop_t,               /* qop_req */
    1:  const gss_buffer_t,      /* input_message_buffer */
    1:  int *,                   /* conf_state */
    1:  gss_buffer_t             /* output_message_buffer */
    1:  );
    1: 
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_unwrap)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  const gss_buffer_t,      /* input_message_buffer */
    1:  gss_buffer_t,            /* output_message_buffer */
    1:  int *,                   /* conf_state */
    1:  gss_qop_t *              /* qop_state */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_display_status)
    1: (OM_uint32 *,             /* minor_status */
    1:  OM_uint32,               /* status_value */
    1:  int,                     /* status_type */
    1:  const gss_OID,           /* mech_type */
    1:  OM_uint32 *,             /* message_context */
    1:  gss_buffer_t             /* status_string */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_indicate_mechs)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_OID_set *            /* mech_set */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_compare_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_name_t,        /* name1 */
    1:  const gss_name_t,        /* name2 */
    1:  int *                    /* name_equal */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_display_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_name_t,        /* input_name */
    1:  gss_buffer_t,            /* output_name_buffer */
    1:  gss_OID *                /* output_name_type */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_import_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_buffer_t,      /* input_name_buffer */
    1:  const gss_OID,           /* input_name_type */
    1:  gss_name_t *             /* output_name */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_export_name)
    1: (OM_uint32  *,            /* minor_status */
    1:  const gss_name_t,        /* input_name */
    1:  gss_buffer_t             /* exported_name */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_release_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_name_t *             /* input_name */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_release_buffer)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_buffer_t             /* buffer */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_release_oid_set)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_OID_set *            /* set */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_inquire_cred)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_cred_id_t,     /* cred_handle */
    1:  gss_name_t *,            /* name */
    1:  OM_uint32 *,             /* lifetime */
    1:  gss_cred_usage_t *,      /* cred_usage */
    1:  gss_OID_set *            /* mechanisms */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_inquire_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  gss_name_t *,            /* src_name */
    1:  gss_name_t *,            /* targ_name */
    1:  OM_uint32 *,             /* lifetime_rec */
    1:  gss_OID *,               /* mech_type */
    1:  OM_uint32 *,             /* ctx_flags */
    1:  int *,                   /* locally_initiated */
    1:  int *                    /* open */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_wrap_size_limit) 
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_ctx_id_t,      /* context_handle */
    1:  int,                     /* conf_req_flag */
    1:  gss_qop_t,               /* qop_req */
    1:  OM_uint32,               /* req_output_size */
    1:  OM_uint32 *              /* max_input_size */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_add_cred) 
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_cred_id_t,     /* input_cred_handle */
    1:  const gss_name_t,        /* desired_name */
    1:  const gss_OID,           /* desired_mech */
    1:  gss_cred_usage_t,        /* cred_usage */
    1:  OM_uint32,               /* initiator_time_req */
    1:  OM_uint32,               /* acceptor_time_req */
    1:  gss_cred_id_t *,         /* output_cred_handle */
    1:  gss_OID_set *,           /* actual_mechs */
    1:  OM_uint32 *,             /* initiator_time_rec */
    1:  OM_uint32 *              /* acceptor_time_rec */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_inquire_cred_by_mech) 
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_cred_id_t,     /* cred_handle */
    1:  const gss_OID,           /* mech_type */
    1:  gss_name_t *,            /* name */
    1:  OM_uint32 *,             /* initiator_lifetime */
    1:  OM_uint32 *,             /* acceptor_lifetime */
    1:  gss_cred_usage_t *       /* cred_usage */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_export_sec_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_ctx_id_t *,          /* context_handle */
    1:  gss_buffer_t             /* interprocess_token */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_import_sec_context)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_buffer_t,      /* interprocess_token */
    1:  gss_ctx_id_t *           /* context_handle */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_create_empty_oid_set)
    1: (OM_uint32 *,             /* minor_status */
    1:  gss_OID_set *            /* oid_set */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_add_oid_set_member)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_OID,           /* member_oid */
    1:  gss_OID_set *            /* oid_set */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_test_oid_set_member)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_OID,           /* member */
    1:  const gss_OID_set,       /* set */
    1:  int *                    /* present */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_inquire_names_for_mech)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_OID,           /* mechanism */
    1:  gss_OID_set *            /* name_types */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_inquire_mechs_for_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_name_t,        /* input_name */
    1:  gss_OID_set *            /* mech_types */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_canonicalize_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_name_t,        /* input_name */
    1:  const gss_OID,           /* mech_type */
    1:  gss_name_t *             /* output_name */
    1:  );
    1: 
    1: GSS_MAKE_TYPEDEF
    1: OM_uint32 
    1: GSS_CALLCONV GSS_FUNC(gss_duplicate_name)
    1: (OM_uint32 *,             /* minor_status */
    1:  const gss_name_t,        /* src_name */
    1:  gss_name_t *             /* dest_name */
    1:  );
    1: 
    1:    /*
    1:     * The following routines are obsolete variants of gss_get_mic,
    1:     * gss_verify_mic, gss_wrap and gss_unwrap.  They should be
    1:     * provided by GSSAPI V2 implementations for backwards
    1:     * compatibility with V1 applications.  Distinct entrypoints
    1:     * (as opposed to #defines) should be provided, both to allow
    1:     * GSSAPI V1 applications to link against GSSAPI V2 implementations,
    1:     * and to retain the slight parameter type differences between the
    1:     * obsolete versions of these routines and their current forms.
    1:     */
    1: 
    1:    GSS_MAKE_TYPEDEF
    1:    OM_uint32 
    1:    GSS_CALLCONV GSS_FUNC(gss_sign)
    1:               (OM_uint32 *,        /* minor_status */
    1:                gss_ctx_id_t,       /* context_handle */
    1:                int,                /* qop_req */
    1:                gss_buffer_t,       /* message_buffer */
    1:                gss_buffer_t        /* message_token */
    1:               );
    1: 
    1: 
    1:    GSS_MAKE_TYPEDEF
    1:    OM_uint32 
    1:    GSS_CALLCONV GSS_FUNC(gss_verify)
    1:               (OM_uint32 *,        /* minor_status */
    1:                gss_ctx_id_t,       /* context_handle */
    1:                gss_buffer_t,       /* message_buffer */
    1:                gss_buffer_t,       /* token_buffer */
    1:                int *               /* qop_state */
    1:               );
    1: 
    1:    GSS_MAKE_TYPEDEF
    1:    OM_uint32
    1:    GSS_CALLCONV GSS_FUNC(gss_seal)
    1:               (OM_uint32 *,        /* minor_status */
    1:                gss_ctx_id_t,       /* context_handle */
    1:                int,                /* conf_req_flag */
    1:                int,                /* qop_req */
    1:                gss_buffer_t,       /* input_message_buffer */
    1:                int *,              /* conf_state */
    1:                gss_buffer_t        /* output_message_buffer */
    1:               );
    1: 
    1: 
    1:    GSS_MAKE_TYPEDEF
    1:    OM_uint32 
    1:    GSS_CALLCONV GSS_FUNC(gss_unseal)
    1:               (OM_uint32 *,        /* minor_status */
    1:                gss_ctx_id_t,       /* context_handle */
    1:                gss_buffer_t,       /* input_message_buffer */
    1:                gss_buffer_t,       /* output_message_buffer */
    1:                int *,              /* conf_state */
    1:                int *               /* qop_state */
    1:               );
    1: 
    1: 
59074: #if defined(XP_MACOSX)
59074: #    pragma pack(pop)
59074: #endif
    1: 
    1: EXTERN_C_END
    1: 
    1: #endif /* GSSAPI_H_ */
    1: 
