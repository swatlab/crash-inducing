43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 2002
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsAHttpConnection_h__
43113: #define nsAHttpConnection_h__
43113: 
43113: #include "nsISupports.h"
43113: 
43113: class nsAHttpTransaction;
43113: class nsHttpRequestHead;
43113: class nsHttpResponseHead;
43113: class nsHttpConnectionInfo;
67712: class nsHttpConnection;
70090: class nsISocketTransport;
70090: class nsIAsyncInputStream;
70090: class nsIAsyncOutputStream;
43113: 
43113: //-----------------------------------------------------------------------------
43113: // Abstract base class for a HTTP connection
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsAHttpConnection : public nsISupports
43113: {
43113: public:
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: these methods may only be called on the socket thread.
43113:     //-------------------------------------------------------------------------
43113: 
43113:     //
43113:     // called by a transaction when the response headers have all been read.
43113:     // the connection can force the transaction to reset it's response headers,
43113:     // and prepare for a new set of response headers, by setting |*reset=TRUE|.
43113:     //
43113:     // @return failure code to close the transaction.
43113:     //
43113:     virtual nsresult OnHeadersAvailable(nsAHttpTransaction *,
43113:                                         nsHttpRequestHead *,
43113:                                         nsHttpResponseHead *,
79445:                                         bool *reset) = 0;
43113: 
43113:     //
43113:     // called by a transaction to resume either sending or receiving data
43113:     // after a transaction returned NS_BASE_STREAM_WOULD_BLOCK from its
43113:     // ReadSegments/WriteSegments methods.
43113:     //
84396:     virtual nsresult ResumeSend() = 0;
84396:     virtual nsresult ResumeRecv() = 0;
43113: 
43113:     //
43113:     // called by the connection manager to close a transaction being processed
43113:     // by this connection.
43113:     //
43113:     // @param transaction
43113:     //        the transaction being closed.
43113:     // @param reason
43113:     //        the reason for closing the transaction.  NS_BASE_STREAM_CLOSED
43113:     //        is equivalent to NS_OK.
43113:     //
43113:     virtual void CloseTransaction(nsAHttpTransaction *transaction,
43113:                                   nsresult reason) = 0;
43113: 
43113:     // get a reference to the connection's connection info object.
43113:     virtual void GetConnectionInfo(nsHttpConnectionInfo **) = 0;
43113: 
70090:     // get the transport level information for this connection. This may fail
70090:     // if it is in use.
70090:     virtual nsresult TakeTransport(nsISocketTransport **,
70090:                                    nsIAsyncInputStream **,
70090:                                    nsIAsyncOutputStream **) = 0;
70090: 
43113:     // called by a transaction to get the security info from the socket.
43113:     virtual void GetSecurityInfo(nsISupports **) = 0;
43113: 
43113:     // called by a transaction to determine whether or not the connection is
43113:     // persistent... important in determining the end of a response.
79445:     virtual bool IsPersistent() = 0;
43113: 
43113:     // called to determine if a connection has been reused.
79445:     virtual bool IsReused() = 0;
43113:     
43113:     // called by a transaction when the transaction reads more from the socket
43113:     // than it should have (eg. containing part of the next pipelined response).
43113:     virtual nsresult PushBack(const char *data, PRUint32 length) = 0;
61543: 
61543:     // Used by a transaction to manage the state of previous response bodies on
61543:     // the same connection and work around buggy servers.
79445:     virtual bool LastTransactionExpectedNoContent() = 0;
79445:     virtual void   SetLastTransactionExpectedNoContent(bool) = 0;
67712: 
67712:     // Transfer the base http connection object along with a
67712:     // reference to it to the caller.
67712:     virtual nsHttpConnection *TakeHttpConnection() = 0;
83069: 
83069:     // Get the nsISocketTransport used by the connection without changing
83069:     //  references or ownership.
83069:     virtual nsISocketTransport *Transport() = 0;
43113: };
43113: 
43113: #define NS_DECL_NSAHTTPCONNECTION \
79445:     nsresult OnHeadersAvailable(nsAHttpTransaction *, nsHttpRequestHead *, nsHttpResponseHead *, bool *reset); \
84396:     nsresult ResumeSend(); \
84396:     nsresult ResumeRecv(); \
43113:     void CloseTransaction(nsAHttpTransaction *, nsresult); \
43113:     void GetConnectionInfo(nsHttpConnectionInfo **); \
70090:     nsresult TakeTransport(nsISocketTransport **,    \
70090:                            nsIAsyncInputStream **,   \
70090:                            nsIAsyncOutputStream **); \
43113:     void GetSecurityInfo(nsISupports **); \
79445:     bool IsPersistent(); \
79445:     bool IsReused(); \
61543:     nsresult PushBack(const char *, PRUint32); \
79445:     bool LastTransactionExpectedNoContent(); \
79445:     void   SetLastTransactionExpectedNoContent(bool); \
83069:     nsHttpConnection *TakeHttpConnection(); \
83069:     nsISocketTransport *Transport();
43113: 
43113: #endif // nsAHttpConnection_h__
