    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla XUL Toolkit.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Benjamin Smedberg <benjamin@smedbergs.us>
    1:  *
    1:  * Portions created by the Initial Developer are Copyright (C) 2005
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: 
    1: /**
    1:  * Provides information about the XUL runtime.
    1:  * @status UNSTABLE - This interface is not frozen and will probably change in
    1:  *                    future releases. If you need this functionality to be
    1:  *                    stable/frozen, please contact Benjamin Smedberg.
    1:  */
    1: 
90120: [scriptable, uuid(cb0b8eda-4c83-4d0e-a63c-d3b65714bc85)]
    1: interface nsIXULRuntime : nsISupports
    1: {
    1:   /**
    1:    * Whether the application was launched in safe mode.
    1:    */
    1:   readonly attribute boolean inSafeMode;
    1: 
    1:   /**
    1:    * Whether to write console errors to a log file. If a component
    1:    * encounters startup errors that might prevent the app from showing
    1:    * proper UI, it should set this flag to "true".
    1:    */
    1:   attribute boolean logConsoleErrors;
    1: 
    1:   /**
    1:    * A string tag identifying the current operating system. This is taken
    1:    * from the OS_TARGET configure variable. It will always be available.
    1:    */
    1:   readonly attribute AUTF8String OS;
    1: 
    1:   /**
    1:    * A string tag identifying the binary ABI of the current processor and
    1:    * compiler vtable. This is taken from the TARGET_XPCOM_ABI configure
    1:    * variable. It may not be available on all platforms, especially
    1:    * unusual processor or compiler combinations.
    1:    *
    1:    * The result takes the form <processor>-<compilerABI>, for example:
    1:    *   x86-msvc
    1:    *   ppc-gcc3
    1:    *
    1:    * This value should almost always be used in combination with "OS".
    1:    *
    1:    * @throw NS_ERROR_NOT_AVAILABLE if not available.
    1:    */
    1:   readonly attribute AUTF8String XPCOMABI;
24526: 
24526:   /**
24526:    * A string tag identifying the target widget toolkit in use.
24526:    * This is taken from the MOZ_WIDGET_TOOLKIT configure variable.
24526:    */
24526:   readonly attribute AUTF8String widgetToolkit;
33900: 
33900:   /**
35860:    * The legal values of processType.
35860:    */
35860:   const unsigned long PROCESS_TYPE_DEFAULT = 0;
35860:   const unsigned long PROCESS_TYPE_PLUGIN = 1;
35860:   const unsigned long PROCESS_TYPE_CONTENT = 2;
86099:   const unsigned long PROCESS_TYPE_IPDLUNITTEST = 3;
35860: 
35860:   /**
35860:    * The type of the caller's process.  Returns one of the values above.
35860:    */
35860:   readonly attribute unsigned long processType;
35999: 
35999:   /**
33900:    * Signal the apprunner to invalidate caches on the next restart.
33900:    * This will cause components to be autoregistered and all
33900:    * fastload data to be re-created.
33900:    */
33900:   void invalidateCachesOnRestart();
48425: 
58863:   /**
58872:    * Starts a child process. This method is intented to pre-start a
58872:    * content child process so that when it is actually needed, it is
58872:    * ready to go.
58872:    *
58872:    * @throw NS_ERROR_NOT_AVAILABLE if not available.
58872:    */
58872:   void ensureContentProcess();
89683: 
89683:   /**
89683:    * Modification time of the profile lock before the profile was locked on
89683:    * this startup. Used to know the last time the profile was used and not
89683:    * closed cleanly. This is set to 0 if there was no existing profile lock.
89683:    */
89683:   readonly attribute PRInt64 replacedLockTime;
58875: };
