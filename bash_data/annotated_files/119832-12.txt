     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
119832: #include "nsMemory.h"
     1: #include "nsXPIDLString.h"
     1: #include "nsCOMPtr.h"
     1: #include "nsISupports.h"
     1: #include "nsIInterfaceRequestor.h"
     1: #include "nsCRT.h"
     1: 
     1: #include "nsICMSSecureMessage.h"
     1: 
     1: #include "nsCMSSecureMessage.h"
     1: #include "nsNSSCertificate.h"
     1: #include "nsNSSHelper.h"
     1: #include "nsNSSShutDown.h"
     1: 
     1: #include <string.h>
     1: #include "plbase64.h"
     1: #include "cert.h"
     1: #include "cms.h"
     1: 
     1: #include "nsIServiceManager.h"
     1: #include "nsIPrefService.h"
     1: #include "nsIPrefBranch.h"
     1: 
     1: #include "prlog.h"
     1: #ifdef PR_LOGGING
     1: extern PRLogModuleInfo* gPIPNSSLog;
     1: #endif
     1: 
     1: // Standard ISupports implementation
     1: // NOTE: Should these be the thread-safe versions?
     1: 
     1: /*****
     1:  * nsCMSSecureMessage
     1:  *****/
     1: 
     1: // Standard ISupports implementation
     1: NS_IMPL_ISUPPORTS1(nsCMSSecureMessage, nsICMSSecureMessage)
     1: 
     1: // nsCMSSecureMessage constructor
     1: nsCMSSecureMessage::nsCMSSecureMessage()
     1: {
     1:   // initialize superclass
     1: }
     1: 
     1: // nsCMSMessage destructor
     1: nsCMSSecureMessage::~nsCMSSecureMessage()
     1: {
     1: }
     1: 
     1: /* string getCertByPrefID (in string certID); */
     1: NS_IMETHODIMP nsCMSSecureMessage::
     1: GetCertByPrefID(const char *certID, char **_retval)
     1: {
     1:   nsNSSShutDownPreventionLock locker;
     1:   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::GetCertByPrefID\n"));
     1:   nsresult rv = NS_OK;
     1:   CERTCertificate *cert = 0;
     1:   nsXPIDLCString nickname;
     1:   nsCOMPtr<nsIInterfaceRequestor> ctx = new PipUIContext();
     1: 
     1:   *_retval = 0;
     1: 
     1:   nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
     1:   if (NS_FAILED(rv)) {
     1:     goto done;
     1:   }
     1: 
     1:   rv = prefs->GetCharPref(certID,
     1:                           getter_Copies(nickname));
     1:   if (NS_FAILED(rv)) goto done;
     1: 
     1:   /* Find a good cert in the user's database */
  3233:   cert = CERT_FindUserCertByUsage(CERT_GetDefaultCertDB(), const_cast<char*>(nickname.get()), 
 80486:            certUsageEmailRecipient, true, ctx);
     1: 
     1:   if (!cert) { 
     1:     /* Success, but no value */
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::GetCertByPrefID - can't find user cert\n"));
     1:     goto done;
     1:   } 
     1: 
     1:   /* Convert the DER to a BASE64 String */
     1:   encode(cert->derCert.data, cert->derCert.len, _retval);
     1: 
     1: done:
     1:   if (cert) CERT_DestroyCertificate(cert);
     1:   return rv;
     1: }
     1: 
     1: 
     1: // nsCMSSecureMessage::DecodeCert
     1: nsresult nsCMSSecureMessage::
     1: DecodeCert(const char *value, nsIX509Cert ** _retval)
     1: {
     1:   nsNSSShutDownPreventionLock locker;
     1:   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::DecodeCert\n"));
     1:   nsresult rv = NS_OK;
108991:   int32_t length;
     1:   unsigned char *data = 0;
     1: 
     1:   *_retval = 0;
     1: 
     1:   if (!value) { return NS_ERROR_FAILURE; }
     1: 
     1:   rv = decode(value, &data, &length);
     1:   if (NS_FAILED(rv)) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::DecodeCert - can't decode cert\n"));
     1:     return rv;
     1:   }
     1: 
     1:   nsCOMPtr<nsIX509Cert> cert =  nsNSSCertificate::ConstructFromDER((char *)data, length);
     1: 
     1:   if (cert) {
     1:     *_retval = cert;
     1:     NS_ADDREF(*_retval);
     1:   }
     1:   else {
     1:     rv = NS_ERROR_FAILURE;
     1:   }
     1: 
     1:   nsCRT::free((char*)data);
     1:   return rv;
     1: }
     1: 
     1: // nsCMSSecureMessage::SendMessage
     1: nsresult nsCMSSecureMessage::
     1: SendMessage(const char *msg, const char *base64Cert, char ** _retval)
     1: {
     1:   nsNSSShutDownPreventionLock locker;
     1:   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage\n"));
     1:   nsresult rv = NS_OK;
     1:   CERTCertificate *cert = 0;
     1:   NSSCMSMessage *cmsMsg = 0;
     1:   unsigned char *certDER = 0;
108991:   int32_t derLen;
     1:   NSSCMSEnvelopedData *env;
     1:   NSSCMSContentInfo *cinfo;
     1:   NSSCMSRecipientInfo *rcpt;
     1:   SECItem output;
     1:   PLArenaPool *arena = PORT_NewArena(1024);
     1:   SECStatus s;
     1:   nsCOMPtr<nsIInterfaceRequestor> ctx = new PipUIContext();
     1: 
     1:   /* Step 0. Create a CMS Message */
119832:   cmsMsg = NSS_CMSMessage_Create(NULL);
     1:   if (!cmsMsg) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't create NSSCMSMessage\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   /* Step 1.  Import the certificate into NSS */
     1:   rv = decode(base64Cert, &certDER, &derLen);
     1:   if (NS_FAILED(rv)) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't decode / import cert into NSS\n"));
     1:     goto done;
     1:   }
     1: 
     1:   cert = CERT_DecodeCertFromPackage((char *)certDER, derLen);
     1:   if (!cert) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't decode cert from package\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1: #if 0
     1:   cert->dbhandle = CERT_GetDefaultCertDB();  /* work-around */
     1: #endif
     1: 
     1:   /* Step 2.  Get a signature cert */
     1: 
     1:   /* Step 3. Build inner (signature) content */
     1: 
     1:   /* Step 4. Build outer (enveloped) content */
     1:   env = NSS_CMSEnvelopedData_Create(cmsMsg, SEC_OID_DES_EDE3_CBC, 0);
     1:   if (!env) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't create envelope data\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   cinfo = NSS_CMSEnvelopedData_GetContentInfo(env);
 80486:   s = NSS_CMSContentInfo_SetContent_Data(cmsMsg, cinfo, 0, false);
     1:   if (s != SECSuccess) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't set content data\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   rcpt = NSS_CMSRecipientInfo_Create(cmsMsg, cert);
     1:   if (!rcpt) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't create recipient info\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   s = NSS_CMSEnvelopedData_AddRecipient(env, rcpt);
     1:   if (s != SECSuccess) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't add recipient\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   /* Step 5. Add content to message */
     1:   cinfo = NSS_CMSMessage_GetContentInfo(cmsMsg);
     1:   s = NSS_CMSContentInfo_SetContent_EnvelopedData(cmsMsg, cinfo, env);
     1:   if (s != SECSuccess) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't set content enveloped data\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1:   
     1:   /* Step 6. Encode */
     1:   NSSCMSEncoderContext *ecx;
     1: 
     1:   output.data = 0; output.len = 0;
     1:   ecx = NSS_CMSEncoder_Start(cmsMsg, 0, 0, &output, arena,
     1:             0, ctx, 0, 0, 0, 0);
     1:   if (!ecx) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't start cms encoder\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   s = NSS_CMSEncoder_Update(ecx, msg, strlen(msg));
     1:   if (s != SECSuccess) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't update encoder\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   s = NSS_CMSEncoder_Finish(ecx);
     1:   if (s != SECSuccess) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::SendMessage - can't finish encoder\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   /* Step 7. Base64 encode and return the result */
     1:   rv = encode(output.data, output.len, _retval);
     1: 
     1: done:
     1:   if (certDER) nsCRT::free((char *)certDER);
     1:   if (cert) CERT_DestroyCertificate(cert);
     1:   if (cmsMsg) NSS_CMSMessage_Destroy(cmsMsg);
 80486:   if (arena) PORT_FreeArena(arena, false);  /* false? */
     1: 
     1:   return rv;
     1: }
     1: 
     1: /*
     1:  * nsCMSSecureMessage::ReceiveMessage
     1:  */
     1: nsresult nsCMSSecureMessage::
     1: ReceiveMessage(const char *msg, char **_retval)
     1: {
     1:   nsNSSShutDownPreventionLock locker;
     1:   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::ReceiveMessage\n"));
     1:   nsresult rv = NS_OK;
     1:   NSSCMSDecoderContext *dcx;
     1:   unsigned char *der = 0;
108991:   int32_t derLen;
     1:   NSSCMSMessage *cmsMsg = 0;
     1:   SECItem *content;
     1:   nsCOMPtr<nsIInterfaceRequestor> ctx = new PipUIContext();
     1: 
     1:   /* Step 1. Decode the base64 wrapper */
     1:   rv = decode(msg, &der, &derLen);
     1:   if (NS_FAILED(rv)) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::ReceiveMessage - can't base64 decode\n"));
     1:     goto done;
     1:   }
     1: 
     1:   dcx = NSS_CMSDecoder_Start(0, 0, 0, /* pw */ 0, ctx, /* key */ 0, 0);
     1:   if (!dcx) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::ReceiveMessage - can't start decoder\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   (void)NSS_CMSDecoder_Update(dcx, (char *)der, derLen);
     1:   cmsMsg = NSS_CMSDecoder_Finish(dcx);
     1:   if (!cmsMsg) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::ReceiveMessage - can't finish decoder\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     /* Memory leak on dcx?? */
     1:     goto done;
     1:   }
     1: 
     1:   content = NSS_CMSMessage_GetContent(cmsMsg);
     1:   if (!content) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::ReceiveMessage - can't get content\n"));
     1:     rv = NS_ERROR_FAILURE;
     1:     goto done;
     1:   }
     1: 
     1:   /* Copy the data */
     1:   *_retval = (char*)malloc(content->len+1);
     1:   memcpy(*_retval, content->data, content->len);
     1:   (*_retval)[content->len] = 0;
     1: 
     1: done:
     1:   if (der) free(der);
     1:   if (cmsMsg) NSS_CMSMessage_Destroy(cmsMsg);
     1: 
     1:   return rv;
     1: }
     1: 
     1: nsresult nsCMSSecureMessage::
108991: encode(const unsigned char *data, int32_t dataLen, char **_retval)
     1: {
     1:   nsresult rv = NS_OK;
     1: 
119832:   *_retval = PL_Base64Encode((const char *)data, dataLen, NULL);
     1:   if (!*_retval) { rv = NS_ERROR_OUT_OF_MEMORY; goto loser; }
     1: 
     1: loser:
     1:   return rv;
     1: }
     1: 
     1: nsresult nsCMSSecureMessage::
108991: decode(const char *data, unsigned char **result, int32_t * _retval)
     1: {
     1:   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::decode\n"));
     1:   nsresult rv = NS_OK;
108991:   uint32_t len = PL_strlen(data);
     1:   int adjust = 0;
     1: 
     1:   /* Compute length adjustment */
     1:   if (data[len-1] == '=') {
     1:     adjust++;
     1:     if (data[len-2] == '=') adjust++;
     1:   }
     1: 
119832:   *result = (unsigned char *)PL_Base64Decode(data, len, NULL);
     1:   if (!*result) {
     1:     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG, ("nsCMSSecureMessage::decode - error decoding base64\n"));
     1:     rv = NS_ERROR_ILLEGAL_VALUE;
     1:     goto loser;
     1:   }
     1: 
     1:   *_retval = (len*3)/4 - adjust;
     1: 
     1: loser:
     1:   return rv;
     1: }
