    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #ifndef nsPrintEngine_h___
    1: #define nsPrintEngine_h___
    1: 
    1: #include "nsCOMPtr.h"
    1: 
    1: #include "nsPrintObject.h"
    1: #include "nsPrintData.h"
    1: 
    1: // Interfaces
    1: #include "nsIDocument.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsIObserver.h"
    1: 
    1: // Classes
    1: class nsPagePrintTimer;
    1: class nsIDocShellTreeNode;
68668: class nsDeviceContext;
    1: class nsIDocumentViewerPrint;
    1: class nsPrintObject;
    1: class nsIDocShell;
    1: class nsIPageSequenceFrame;
69583: class nsIWeakReference;
    1: 
    1: //------------------------------------------------------------------------
    1: // nsPrintEngine Class
    1: //
    1: //------------------------------------------------------------------------
    1: class nsPrintEngine : public nsIObserver
    1: {
    1: public:
    1:   // nsISupports interface...
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   // nsIObserver
    1:   NS_DECL_NSIOBSERVER
    1: 
    1:   // Old nsIWebBrowserPrint methods; not cleaned up yet
    1:   NS_IMETHOD Print(nsIPrintSettings*       aPrintSettings,
    1:                    nsIWebProgressListener* aWebProgressListener);
    1:   NS_IMETHOD PrintPreview(nsIPrintSettings* aPrintSettings,
    1:                           nsIDOMWindow *aChildDOMWin,
    1:                           nsIWebProgressListener* aWebProgressListener);
    1:   NS_IMETHOD GetIsFramesetDocument(PRBool *aIsFramesetDocument);
    1:   NS_IMETHOD GetIsIFrameSelected(PRBool *aIsIFrameSelected);
    1:   NS_IMETHOD GetIsRangeSelection(PRBool *aIsRangeSelection);
    1:   NS_IMETHOD GetIsFramesetFrameSelected(PRBool *aIsFramesetFrameSelected);
    1:   NS_IMETHOD GetPrintPreviewNumPages(PRInt32 *aPrintPreviewNumPages);
    1:   NS_IMETHOD EnumerateDocumentNames(PRUint32* aCount, PRUnichar*** aResult);
    1:   static nsresult GetGlobalPrintSettings(nsIPrintSettings** aPrintSettings);
    1:   NS_IMETHOD GetDoingPrint(PRBool *aDoingPrint);
    1:   NS_IMETHOD GetDoingPrintPreview(PRBool *aDoingPrintPreview);
    1:   NS_IMETHOD GetCurrentPrintSettings(nsIPrintSettings **aCurrentPrintSettings);
    1: 
    1: 
    1:   // This enum tells indicates what the default should be for the title
    1:   // if the title from the document is null
    1:   enum eDocTitleDefault {
    1:     eDocTitleDefNone,
    1:     eDocTitleDefBlank,
    1:     eDocTitleDefURLDoc
    1:   };
    1: 
    1:   nsPrintEngine();
    1:   ~nsPrintEngine();
    1: 
    1:   void Destroy();
    1:   void DestroyPrintingData();
    1: 
    1:   nsresult Initialize(nsIDocumentViewerPrint* aDocViewerPrint, 
69583:                       nsIWeakReference*       aContainer,
    1:                       nsIDocument*            aDocument,
31784:                       float                   aScreenDPI,
    1:                       FILE*                   aDebugFile);
    1: 
    1:   nsresult GetSeqFrameAndCountPages(nsIFrame*& aSeqFrame, PRInt32& aCount);
    1: 
    1:   //
    1:   // The following three methods are used for printing...
    1:   //
    1:   nsresult DocumentReadyForPrinting();
    1:   nsresult GetSelectionDocument(nsIDeviceContextSpec * aDevSpec,
    1:                                 nsIDocument ** aNewDoc);
    1: 
    1:   nsresult SetupToPrintContent();
    1:   nsresult EnablePOsForPrinting();
    1:   nsPrintObject* FindSmallestSTF();
    1: 
    1:   PRBool   PrintDocContent(nsPrintObject* aPO, nsresult& aStatus);
    1:   nsresult DoPrint(nsPrintObject * aPO);
    1: 
    1:   void SetPrintPO(nsPrintObject* aPO, PRBool aPrint);
    1: 
    1:   void TurnScriptingOn(PRBool aDoTurnOn);
    1:   PRBool CheckDocumentForPPCaching();
    1:   void InstallPrintPreviewListener();
    1: 
    1:   // nsIDocumentViewerPrint Printing Methods
    1:   PRBool   PrintPage(nsPrintObject* aPOect, PRBool& aInRange);
    1:   PRBool   DonePrintingPages(nsPrintObject* aPO, nsresult aResult);
    1: 
    1:   //---------------------------------------------------------------------
    1:   void BuildDocTree(nsIDocShellTreeNode *      aParentNode,
24551:                     nsTArray<nsPrintObject*> * aDocList,
    1:                     nsPrintObject *            aPO);
    1:   nsresult ReflowDocList(nsPrintObject * aPO, PRBool aSetPixelScale);
    1: 
    1:   nsresult ReflowPrintObject(nsPrintObject * aPO);
    1: 
    1:   void CheckForChildFrameSets(nsPrintObject* aPO);
    1: 
    1:   void CalcNumPrintablePages(PRInt32& aNumPages);
    1:   void ShowPrintProgress(PRBool aIsForPrinting, PRBool& aDoNotify);
    1:   nsresult CleanupOnFailure(nsresult aResult, PRBool aIsPrinting);
 7782:   // If FinishPrintPreview() fails, caller may need to reset the state of the
 7782:   // object, for example by calling CleanupOnFailure().
    1:   nsresult FinishPrintPreview();
    1:   static void CloseProgressDialog(nsIWebProgressListener* aWebProgressListener);
    1:   void SetDocAndURLIntoProgress(nsPrintObject* aPO,
    1:                                 nsIPrintProgressParams* aParams);
    1:   void ElipseLongString(PRUnichar *& aStr, const PRUint32 aLen, PRBool aDoFront);
 1155:   nsresult CheckForPrinters(nsIPrintSettings* aPrintSettings);
    1:   void CleanupDocTitleArray(PRUnichar**& aArray, PRInt32& aCount);
    1: 
    1:   PRBool IsThereARangeSelection(nsIDOMWindow * aDOMWin);
    1: 
    1:   //---------------------------------------------------------------------
    1: 
    1: 
    1:   // Timer Methods
    1:   nsresult StartPagePrintTimer(nsPrintObject* aPO);
    1: 
41536:   PRBool IsWindowsInOurSubTree(nsPIDOMWindow * aDOMWindow);
    1:   static PRBool IsParentAFrameSet(nsIDocShell * aParent);
    1:   PRBool IsThereAnIFrameSelected(nsIDocShell* aDocShell,
    1:                                  nsIDOMWindow* aDOMWin,
    1:                                  PRPackedBool& aIsParentFrameSet);
    1: 
    1:   static nsPrintObject* FindPrintObjectByDOMWin(nsPrintObject* aParentObject,
    1:                                                 nsIDOMWindow* aDOMWin);
    1: 
    1:   // get the currently infocus frame for the document viewer
    1:   already_AddRefed<nsIDOMWindow> FindFocusedDOMWindow();
    1: 
    1:   //---------------------------------------------------------------------
    1:   // Static Methods
    1:   //---------------------------------------------------------------------
    1:   static void GetDocumentTitleAndURL(nsIDocument* aDoc,
    1:                                      PRUnichar** aTitle,
    1:                                      PRUnichar** aURLStr);
    1:   void GetDisplayTitleAndURL(nsPrintObject*    aPO,
    1:                              PRUnichar**       aTitle,
    1:                              PRUnichar**       aURLStr,
    1:                              eDocTitleDefault  aDefType);
    1:   static void ShowPrintErrorDialog(nsresult printerror,
    1:                                    PRBool aIsPrinting = PR_TRUE);
    1: 
    1:   static PRBool HasFramesetChild(nsIContent* aContent);
    1: 
    1:   PRBool   CheckBeforeDestroy();
    1:   nsresult Cancelled();
    1: 
37067:   nsIPresShell* GetPrintPreviewPresShell() {return mPrtPreview->mPrintObject->mPresShell;}
    1: 
10937:   float GetPrintPreviewScale() { return mPrtPreview->mPrintObject->
10937:                                         mPresContext->GetPrintPreviewScale(); }
10937:   
    1:   static nsIPresShell* GetPresShellFor(nsIDocShell* aDocShell);
    1: 
    1:   // These calls also update the DocViewer
    1:   void SetIsPrinting(PRBool aIsPrinting);
    1:   PRBool GetIsPrinting()
    1:   {
    1:     return mIsDoingPrinting;
    1:   }
    1:   void SetIsPrintPreview(PRBool aIsPrintPreview);
    1:   PRBool GetIsPrintPreview()
    1:   {
    1:     return mIsDoingPrintPreview;
    1:   }
    1:   void SetIsCreatingPrintPreview(PRBool aIsCreatingPrintPreview)
    1:   {
    1:     mIsCreatingPrintPreview = aIsCreatingPrintPreview;
    1:   }
    1:   PRBool GetIsCreatingPrintPreview()
    1:   {
    1:     return mIsCreatingPrintPreview;
    1:   }
    1: 
    1: protected:
    1: 
    1:   nsresult CommonPrint(PRBool aIsPrintPreview, nsIPrintSettings* aPrintSettings,
35581:                        nsIWebProgressListener* aWebProgressListener,
35581:                        nsIDOMDocument* aDoc);
    1: 
    1:   nsresult DoCommonPrint(PRBool aIsPrintPreview, nsIPrintSettings* aPrintSettings,
35581:                          nsIWebProgressListener* aWebProgressListener,
35581:                          nsIDOMDocument* aDoc);
    1: 
    1:   void FirePrintCompletionEvent();
    1:   static nsresult GetSeqFrameAndCountPagesInternal(nsPrintObject*  aPO,
    1:                                                    nsIFrame*&      aSeqFrame,
    1:                                                    PRInt32&        aCount);
    1: 
    1:   static nsresult FindSelectionBoundsWithList(nsPresContext* aPresContext,
68481:                                               nsRenderingContext& aRC,
    1:                                               nsIAtom*        aList,
    1:                                               nsIFrame *      aParentFrame,
    1:                                               nsRect&         aRect,
    1:                                               nsIFrame *&     aStartFrame,
    1:                                               nsRect&         aStartRect,
    1:                                               nsIFrame *&     aEndFrame,
    1:                                               nsRect&         aEndRect);
    1: 
    1:   static nsresult FindSelectionBounds(nsPresContext* aPresContext,
68481:                                       nsRenderingContext& aRC,
    1:                                       nsIFrame *      aParentFrame,
    1:                                       nsRect&         aRect,
    1:                                       nsIFrame *&     aStartFrame,
    1:                                       nsRect&         aStartRect,
    1:                                       nsIFrame *&     aEndFrame,
    1:                                       nsRect&         aEndRect);
    1: 
    1:   static nsresult GetPageRangeForSelection(nsIPresShell *        aPresShell,
    1:                                            nsPresContext*       aPresContext,
68481:                                            nsRenderingContext&  aRC,
    1:                                            nsISelection*         aSelection,
    1:                                            nsIPageSequenceFrame* aPageSeqFrame,
    1:                                            nsIFrame**            aStartFrame,
    1:                                            PRInt32&              aStartPageNum,
    1:                                            nsRect&               aStartRect,
    1:                                            nsIFrame**            aEndFrame,
    1:                                            PRInt32&              aEndPageNum,
    1:                                            nsRect&               aEndRect);
    1: 
    1:   static void MapContentForPO(nsPrintObject* aPO, nsIContent* aContent);
    1: 
    1:   static void MapContentToWebShells(nsPrintObject* aRootPO, nsPrintObject* aPO);
    1: 
    1:   static void SetPrintAsIs(nsPrintObject* aPO, PRBool aAsIs = PR_TRUE);
    1: 
    1:   // Static member variables
    1:   PRPackedBool mIsCreatingPrintPreview;
    1:   PRPackedBool mIsDoingPrinting;
    1:   PRPackedBool mIsDoingPrintPreview; // per DocumentViewer
    1:   PRPackedBool mProgressDialogIsShown;
    1: 
19768:   nsCOMPtr<nsIDocumentViewerPrint> mDocViewerPrint;
69583:   nsWeakPtr               mContainer;
31784:   float                   mScreenDPI;
    1:   
    1:   nsPrintData*            mPrt;
    1:   nsPagePrintTimer*       mPagePrintTimer;
    1:   nsIPageSequenceFrame*   mPageSeqFrame;
    1: 
    1:   // Print Preview
    1:   nsPrintData*            mPrtPreview;
    1:   nsPrintData*            mOldPrtPreview;
    1: 
    1:   nsCOMPtr<nsIDocument>   mDocument;
    1: 
    1:   FILE* mDebugFile;
    1: 
    1: private:
    1:   nsPrintEngine& operator=(const nsPrintEngine& aOther); // not implemented
    1: 
    1: };
    1: 
    1: #endif /* nsPrintEngine_h___ */
