36268: /* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 8; -*- */
36268: /* vim: set sw=4 ts=8 et tw=80 : */
36268: /* ***** BEGIN LICENSE BLOCK *****
36268:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
36268:  *
36268:  * The contents of this file are subject to the Mozilla Public License Version
36268:  * 1.1 (the "License"); you may not use this file except in compliance with
36268:  * the License. You may obtain a copy of the License at
36268:  * http://www.mozilla.org/MPL/
36268:  *
36268:  * Software distributed under the License is distributed on an "AS IS" basis,
36268:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
36268:  * for the specific language governing rights and limitations under the
36268:  * License.
36268:  *
36268:  * The Original Code is Mozilla Content App.
36268:  *
36268:  * The Initial Developer of the Original Code is
36268:  *   The Mozilla Foundation.
36268:  * Portions created by the Initial Developer are Copyright (C) 2009
36268:  * the Initial Developer. All Rights Reserved.
36268:  *
36268:  * Contributor(s):
36268:  *
36268:  * Alternatively, the contents of this file may be used under the terms of
36268:  * either the GNU General Public License Version 2 or later (the "GPL"), or
36268:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
36268:  * in which case the provisions of the GPL or the LGPL are applicable instead
36268:  * of those above. If you wish to allow use of your version of this file only
36268:  * under the terms of either the GPL or the LGPL, and not to allow others to
36268:  * use your version of this file under the terms of the MPL, indicate your
36268:  * decision by deleting the provisions above and replace them with the notice
36268:  * and other provisions required by the GPL or the LGPL. If you do not delete
36268:  * the provisions above, a recipient may use your version of this file under
36268:  * the terms of any one of the MPL, the GPL or the LGPL.
36268:  *
36268:  * ***** END LICENSE BLOCK ***** */
36268: 
36268: #include "TabChild.h"
58164: #include "mozilla/IntentionalCrash.h"
47933: #include "mozilla/dom/PContentChild.h"
46871: #include "mozilla/dom/PContentDialogChild.h"
54019: #include "mozilla/layers/PLayersChild.h"
54018: #include "mozilla/layout/RenderFrameChild.h"
56242: #include "mozilla/docshell/OfflineCacheUpdateChild.h"
36268: 
54019: #include "BasicLayers.h"
36268: #include "nsIWebBrowser.h"
48229: #include "nsIWebBrowserSetup.h"
36268: #include "nsEmbedCID.h"
36268: #include "nsComponentManagerUtils.h"
36268: #include "nsIBaseWindow.h"
36268: #include "nsIDOMWindow.h"
50566: #include "nsIWebProgress.h"
50566: #include "nsIDocShell.h"
36268: #include "nsIDocShellTreeItem.h"
36268: #include "nsThreadUtils.h"
36268: #include "nsIInterfaceRequestorUtils.h"
36268: #include "mozilla/ipc/DocumentRendererChild.h"
36268: #include "nsIInterfaceRequestorUtils.h"
36268: #include "nsPIDOMWindow.h"
36268: #include "nsIDOMWindowUtils.h"
36268: #include "nsISupportsImpl.h"
46771: #include "nsIURI.h"
36268: #include "nsIWebBrowserFocus.h"
36268: #include "nsIDOMEvent.h"
36268: #include "nsIPrivateDOMEvent.h"
46683: #include "nsIComponentManager.h"
46683: #include "nsIServiceManager.h"
46683: #include "nsIJSRuntimeService.h"
46683: #include "nsContentUtils.h"
46683: #include "nsIDOMClassInfo.h"
46683: #include "nsIXPCSecurityManager.h"
46683: #include "nsIJSContextStack.h"
46683: #include "nsComponentManagerUtils.h"
46683: #include "nsIScriptSecurityManager.h"
46683: #include "nsScriptLoader.h"
46683: #include "nsPIWindowRoot.h"
46683: #include "nsIScriptContext.h"
46871: #include "nsInterfaceHashtable.h"
46756: #include "nsPresContext.h"
46761: #include "nsIDocument.h"
50357: #include "nsIDOMDocument.h"
46761: #include "nsIScriptGlobalObject.h"
46771: #include "nsWeakReference.h"
50566: #include "nsISecureBrowserUI.h"
50566: #include "nsISSLStatusProvider.h"
50566: #include "nsSerializationHelper.h"
50730: #include "nsIFrame.h"
50730: #include "nsIView.h"
51259: #include "nsIEventListenerManager.h"
52354: #include "PCOMContentPermissionRequestChild.h"
60618: #include "xpcpublic.h"
36268: 
36268: using namespace mozilla::dom;
56521: using namespace mozilla::ipc;
54019: using namespace mozilla::layers;
54018: using namespace mozilla::layout;
56242: using namespace mozilla::docshell;
36268: 
36268: NS_IMPL_ISUPPORTS1(ContentListener, nsIDOMEventListener)
36268: 
36268: NS_IMETHODIMP
36268: ContentListener::HandleEvent(nsIDOMEvent* aEvent)
36268: {
36268:   RemoteDOMEvent remoteEvent;
36268:   remoteEvent.mEvent = do_QueryInterface(aEvent);
36268:   NS_ENSURE_STATE(remoteEvent.mEvent);
47933:   mTabChild->SendEvent(remoteEvent);
36268:   return NS_OK;
36268: }
36268: 
46871: class ContentDialogChild : public PContentDialogChild
46871: {
46871: public:
57141:   virtual bool Recv__delete__(const InfallibleTArray<int>& aIntParams,
57141:                               const InfallibleTArray<nsString>& aStringParams);
46871: };
46871: 
46871: 
47934: TabChild::TabChild(PRUint32 aChromeFlags)
54019:   : mRemoteFrame(nsnull)
54019:   , mTabChildGlobal(nsnull)
47934:   , mChromeFlags(aChromeFlags)
36268: {
36268:     printf("creating %d!\n", NS_IsMainThread());
36268: }
36268: 
36268: nsresult
36268: TabChild::Init()
36268: {
36268:   nsCOMPtr<nsIWebBrowser> webBrowser = do_CreateInstance(NS_WEBBROWSER_CONTRACTID);
36268:   if (!webBrowser) {
36268:     NS_ERROR("Couldn't create a nsWebBrowser?");
36268:     return NS_ERROR_FAILURE;
36268:   }
36268: 
36268:   webBrowser->SetContainerWindow(this);
36268:   mWebNav = do_QueryInterface(webBrowser);
36268:   NS_ASSERTION(mWebNav, "nsWebBrowser doesn't implement nsIWebNavigation?");
36268: 
36268:   nsCOMPtr<nsIDocShellTreeItem> docShellItem(do_QueryInterface(mWebNav));
36268:   docShellItem->SetItemType(nsIDocShellTreeItem::typeContentWrapper);
36268:   return NS_OK;
36268: }
36268: 
46871: NS_INTERFACE_MAP_BEGIN(TabChild)
71900:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIWebBrowserChrome)
46871:   NS_INTERFACE_MAP_ENTRY(nsIWebBrowserChrome)
46871:   NS_INTERFACE_MAP_ENTRY(nsIWebBrowserChrome2)
46871:   NS_INTERFACE_MAP_ENTRY(nsIEmbeddingSiteWindow)
46871:   NS_INTERFACE_MAP_ENTRY(nsIEmbeddingSiteWindow2)
46871:   NS_INTERFACE_MAP_ENTRY(nsIWebBrowserChromeFocus)
46871:   NS_INTERFACE_MAP_ENTRY(nsIInterfaceRequestor)
46871:   NS_INTERFACE_MAP_ENTRY(nsIWindowProvider)
46871:   NS_INTERFACE_MAP_ENTRY(nsITabChild)
46871:   NS_INTERFACE_MAP_ENTRY(nsIDialogCreator)
54299:   NS_INTERFACE_MAP_ENTRY(nsSupportsWeakReference)
46871: NS_INTERFACE_MAP_END
46871: 
46871: NS_IMPL_ADDREF(TabChild)
46871: NS_IMPL_RELEASE(TabChild)
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetStatus(PRUint32 aStatusType, const PRUnichar* aStatus)
36268: {
59843:   // FIXME/bug 617804: should the platform support this?
59843:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetWebBrowser(nsIWebBrowser** aWebBrowser)
36268: {
57131:   NS_NOTREACHED("TabChild::GetWebBrowser not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetWebBrowser(nsIWebBrowser* aWebBrowser)
36268: {
57131:   NS_NOTREACHED("TabChild::SetWebBrowser not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetChromeFlags(PRUint32* aChromeFlags)
36268: {
47934:   *aChromeFlags = mChromeFlags;
47934:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetChromeFlags(PRUint32 aChromeFlags)
36268: {
57131:   NS_NOTREACHED("trying to SetChromeFlags from content process?");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::DestroyBrowserWindow()
36268: {
57131:   NS_NOTREACHED("TabChild::SetWebBrowser not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SizeBrowserTo(PRInt32 aCX, PRInt32 aCY)
36268: {
57131:   NS_NOTREACHED("TabChild::SizeBrowserTo not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::ShowAsModal()
36268: {
57131:   NS_NOTREACHED("TabChild::ShowAsModal not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::IsWindowModal(PRBool* aRetVal)
36268: {
36268:   *aRetVal = PR_FALSE;
36268:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::ExitModalEventLoop(nsresult aStatus)
36268: {
57131:   NS_NOTREACHED("TabChild::ExitModalEventLoop not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetStatusWithContext(PRUint32 aStatusType,
36268:                                     const nsAString& aStatusText,
36268:                                     nsISupports* aStatusContext)
36268: {
57131:   NS_NOTREACHED("TabChild::SetStatusWithContext not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetDimensions(PRUint32 aFlags, PRInt32 aX, PRInt32 aY,
36268:                              PRInt32 aCx, PRInt32 aCy)
36268: {
57131:   NS_NOTREACHED("TabChild::SetDimensions not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetDimensions(PRUint32 aFlags, PRInt32* aX,
36268:                              PRInt32* aY, PRInt32* aCx, PRInt32* aCy)
36268: {
57131:   NS_NOTREACHED("TabChild::GetDimensions not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetFocus()
36268: {
57131:   NS_NOTREACHED("TabChild::SetFocus not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetVisibility(PRBool* aVisibility)
36268: {
36268:   *aVisibility = PR_TRUE;
36268:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetVisibility(PRBool aVisibility)
36268: {
57131:   NS_NOTREACHED("TabChild::SetVisibility not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetTitle(PRUnichar** aTitle)
36268: {
57131:   NS_NOTREACHED("TabChild::GetTitle not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::SetTitle(const PRUnichar* aTitle)
36268: {
59843:   // FIXME/bug 617804: should the platform support this?
59843:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::GetSiteWindow(void** aSiteWindow)
36268: {
57131:   NS_NOTREACHED("TabChild::GetSiteWindow not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::Blur()
36268: {
57131:   NS_NOTREACHED("TabChild::Blur not supported in TabChild");
57131: 
36268:   return NS_ERROR_NOT_IMPLEMENTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::FocusNextElement()
36268: {
47933:   SendMoveFocus(PR_TRUE);
36268:   return NS_OK;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: TabChild::FocusPrevElement()
36268: {
47933:   SendMoveFocus(PR_FALSE);
36268:   return NS_OK;
36268: }
36268: 
46489: NS_IMETHODIMP
46489: TabChild::GetInterface(const nsIID & aIID, void **aSink)
46489: {
46489:     // XXXbz should we restrict the set of interfaces we hand out here?
46489:     // See bug 537429
46489:     return QueryInterface(aIID, aSink);
46489: }
46489: 
46491: NS_IMETHODIMP
46491: TabChild::ProvideWindow(nsIDOMWindow* aParent, PRUint32 aChromeFlags,
47225:                         PRBool aCalledFromJS,
46491:                         PRBool aPositionSpecified, PRBool aSizeSpecified,
46491:                         nsIURI* aURI, const nsAString& aName,
46491:                         const nsACString& aFeatures, PRBool* aWindowIsNew,
46491:                         nsIDOMWindow** aReturn)
46491: {
46491:     *aReturn = nsnull;
46491: 
47933:     PBrowserChild* newChild;
47933:     if (!CallCreateWindow(&newChild)) {
46491:         return NS_ERROR_NOT_AVAILABLE;
46491:     }
46491: 
68544:     *aWindowIsNew = PR_TRUE;
46491:     nsCOMPtr<nsIDOMWindow> win =
46491:         do_GetInterface(static_cast<TabChild*>(newChild)->mWebNav);
46491:     win.forget(aReturn);
46491:     return NS_OK;
46491: }
46491: 
46871: static nsInterfaceHashtable<nsVoidPtrHashKey, nsIDialogParamBlock> gActiveDialogs;
46871: 
46871: NS_IMETHODIMP
46871: TabChild::OpenDialog(PRUint32 aType, const nsACString& aName,
46871:                      const nsACString& aFeatures,
46871:                      nsIDialogParamBlock* aArguments,
46871:                      nsIDOMElement* aFrameElement)
46871: {
46871:   if (!gActiveDialogs.IsInitialized()) {
46871:     NS_ENSURE_STATE(gActiveDialogs.Init());
46871:   }
57141:   InfallibleTArray<PRInt32> intParams;
57141:   InfallibleTArray<nsString> stringParams;
46871:   ParamsToArrays(aArguments, intParams, stringParams);
46871:   PContentDialogChild* dialog =
46871:     SendPContentDialogConstructor(aType, nsCString(aName),
46871:                                   nsCString(aFeatures), intParams, stringParams);
46871:   NS_ENSURE_STATE(gActiveDialogs.Put(dialog, aArguments));
46871:   nsIThread *thread = NS_GetCurrentThread();
46871:   while (gActiveDialogs.GetWeak(dialog)) {
46871:     if (!NS_ProcessNextEvent(thread)) {
46871:       break;
46871:     }
46871:   }
46871:   return NS_OK;
46871: }
46871: 
46871: bool
57141: ContentDialogChild::Recv__delete__(const InfallibleTArray<int>& aIntParams,
57141:                                    const InfallibleTArray<nsString>& aStringParams)
46871: {
46871:   nsCOMPtr<nsIDialogParamBlock> params;
46871:   if (gActiveDialogs.Get(this, getter_AddRefs(params))) {
46871:     TabChild::ArraysToParams(aIntParams, aStringParams, params);
46871:     gActiveDialogs.Remove(this);
46871:   }
46871:   return true;
46871: }
46871: 
46871: void
46871: TabChild::ParamsToArrays(nsIDialogParamBlock* aParams,
57141:                          InfallibleTArray<int>& aIntParams,
57141:                          InfallibleTArray<nsString>& aStringParams)
46871: {
46871:   if (aParams) {
46871:     for (PRInt32 i = 0; i < 8; ++i) {
46871:       PRInt32 val = 0;
46871:       aParams->GetInt(i, &val);
46871:       aIntParams.AppendElement(val);
46871:     }
46871:     PRInt32 j = 0;
57132:     nsXPIDLString strVal;
57132:     while (NS_SUCCEEDED(aParams->GetString(j, getter_Copies(strVal)))) {
46871:       aStringParams.AppendElement(strVal);
46871:       ++j;
46871:     }
46871:   }
46871: }
46871: 
46871: void
57141: TabChild::ArraysToParams(const InfallibleTArray<int>& aIntParams,
57141:                          const InfallibleTArray<nsString>& aStringParams,
46871:                          nsIDialogParamBlock* aParams)
46871: {
46871:   if (aParams) {
46871:     for (PRInt32 i = 0; PRUint32(i) < aIntParams.Length(); ++i) {
46871:       aParams->SetInt(i, aIntParams[i]);
46871:     }
46871:     for (PRInt32 j = 0; PRUint32(j) < aStringParams.Length(); ++j) {
46871:       aParams->SetString(j, aStringParams[j].get());
46871:     }
46871:   }
46871: }
46871: 
54008: void
54008: TabChild::DestroyWindow()
36268: {
36268:     nsCOMPtr<nsIBaseWindow> baseWindow = do_QueryInterface(mWebNav);
36268:     if (baseWindow)
36268:         baseWindow->Destroy();
36268: 
54019:     // NB: the order of mWidget->Destroy() and mRemoteFrame->Destroy()
54019:     // is important: we want to kill off remote layers before their
54019:     // frames
54019:     if (mWidget) {
54018:         mWidget->Destroy();
50801:     }
50801: 
54019:     if (mRemoteFrame) {
54019:         mRemoteFrame->Destroy();
54019:         mRemoteFrame = nsnull;
54019:     }
36268: }
36268: 
48158: void
48158: TabChild::ActorDestroy(ActorDestroyReason why)
48158: {
48158:   // The messageManager relays messages via the TabChild which
48158:   // no longer exists.
48158:   static_cast<nsFrameMessageManager*>
48158:     (mTabChildGlobal->mMessageManager.get())->Disconnect();
48158:   mTabChildGlobal->mMessageManager = nsnull;
48158: }
48158: 
36268: TabChild::~TabChild()
36268: {
48159:     nsCOMPtr<nsIWebBrowser> webBrowser = do_QueryInterface(mWebNav);
36268:     if (webBrowser) {
36268:       webBrowser->SetContainerWindow(nsnull);
36268:     }
46683:     if (mCx) {
50801:       DestroyCx();
46683:     }
51259:     
51259:     nsIEventListenerManager* elm = mTabChildGlobal->GetListenerManager(PR_FALSE);
51259:     if (elm) {
51259:       elm->Disconnect();
51259:     }
46849:     mTabChildGlobal->mTabChild = nsnull;
36268: }
36268: 
36268: bool
47933: TabChild::RecvLoadURL(const nsCString& uri)
36268: {
36268:     printf("loading %s, %d\n", uri.get(), NS_IsMainThread());
36268: 
36268:     nsresult rv = mWebNav->LoadURI(NS_ConvertUTF8toUTF16(uri).get(),
36268:                                    nsIWebNavigation::LOAD_FLAGS_NONE,
36268:                                    NULL, NULL, NULL);
36268:     if (NS_FAILED(rv)) {
36268:         NS_WARNING("mWebNav->LoadURI failed. Eating exception, what else can I do?");
36268:     }
46761: 
54008:     return NS_SUCCEEDED(rv);
36268: }
36268: 
36268: bool
54008: TabChild::RecvShow(const nsIntSize& size)
36268: {
54008:     printf("[TabChild] SHOW (w,h)= (%d, %d)\n", size.width, size.height);
54008: 
54008:     nsCOMPtr<nsIBaseWindow> baseWindow = do_QueryInterface(mWebNav);
54008:     if (!baseWindow) {
54008:         NS_ERROR("mWebNav doesn't QI to nsIBaseWindow");
54008:         return false;
54008:     }
54008: 
54019:     if (!InitWidget(size)) {
54009:         return false;
54009:     }
54009: 
54009:     baseWindow->InitWindow(0, mWidget,
54009:                            0, 0, size.width, size.height);
54008:     baseWindow->Create();
54008:     baseWindow->SetVisibility(PR_TRUE);
54008: 
54008:     // IPC uses a WebBrowser object for which DNS prefetching is turned off
54008:     // by default. But here we really want it, so enable it explicitly
54008:     nsCOMPtr<nsIWebBrowserSetup> webBrowserSetup = do_QueryInterface(baseWindow);
54008:     if (webBrowserSetup) {
54008:       webBrowserSetup->SetProperty(nsIWebBrowserSetup::SETUP_ALLOW_DNS_PREFETCH,
54008:                                    PR_TRUE);
54008:     } else {
54008:         NS_WARNING("baseWindow doesn't QI to nsIWebBrowserSetup, skipping "
54008:                    "DNS prefetching enable step.");
54008:     }
54008: 
54008:     return InitTabChildGlobal();
54008: }
54008: 
54008: bool
54008: TabChild::RecvMove(const nsIntSize& size)
54008: {
54008:     printf("[TabChild] RESIZE to (w,h)= (%ud, %ud)\n", size.width, size.height);
50801: 
54009:     mWidget->Resize(0, 0, size.width, size.height,
54009:                     PR_TRUE);
36268: 
36268:     nsCOMPtr<nsIBaseWindow> baseWin = do_QueryInterface(mWebNav);
54008:     baseWin->SetPositionAndSize(0, 0, size.width, size.height,
54008:                                 PR_TRUE);
36268:     return true;
36268: }
36268: 
36268: bool
47933: TabChild::RecvActivate()
36268: {
36268:   nsCOMPtr<nsIWebBrowserFocus> browser = do_QueryInterface(mWebNav);
36268:   browser->Activate();
36268:   return true;
36268: }
36268: 
36268: bool
47933: TabChild::RecvMouseEvent(const nsString& aType,
47933:                          const float&    aX,
47933:                          const float&    aY,
36268:                          const PRInt32&  aButton,
36268:                          const PRInt32&  aClickCount,
36268:                          const PRInt32&  aModifiers,
36268:                          const bool&     aIgnoreRootScrollFrame)
36268: {
36268:   nsCOMPtr<nsPIDOMWindow> window = do_GetInterface(mWebNav);
36268:   nsCOMPtr<nsIDOMWindowUtils> utils = do_GetInterface(window);
36268:   NS_ENSURE_TRUE(utils, true);
36268:   utils->SendMouseEvent(aType, aX, aY, aButton, aClickCount, aModifiers,
36268:                         aIgnoreRootScrollFrame);
36268:   return true;
36268: }
36268: 
46726: bool
47933: TabChild::RecvKeyEvent(const nsString& aType,
46726:                        const PRInt32& aKeyCode,
46726:                        const PRInt32& aCharCode,
46726:                        const PRInt32& aModifiers,
46726:                        const bool& aPreventDefault)
46726: {
46726:   nsCOMPtr<nsPIDOMWindow> window = do_GetInterface(mWebNav);
46726:   nsCOMPtr<nsIDOMWindowUtils> utils = do_GetInterface(window);
46726:   NS_ENSURE_TRUE(utils, true);
46726:   PRBool ignored = PR_FALSE;
46726:   utils->SendKeyEvent(aType, aKeyCode, aCharCode,
46726:                       aModifiers, aPreventDefault, &ignored);
46726:   return true;
46726: }
46726: 
50730: bool
50730: TabChild::RecvCompositionEvent(const nsCompositionEvent& event)
50730: {
50730:   nsCompositionEvent localEvent(event);
50730:   DispatchWidgetEvent(localEvent);
50730:   return true;
50730: }
50730: 
50730: bool
50730: TabChild::RecvTextEvent(const nsTextEvent& event)
50730: {
50730:   nsTextEvent localEvent(event);
50730:   DispatchWidgetEvent(localEvent);
50730:   IPC::ParamTraits<nsTextEvent>::Free(event);
50730:   return true;
50730: }
50730: 
50730: bool
50730: TabChild::RecvSelectionEvent(const nsSelectionEvent& event)
50730: {
50730:   nsSelectionEvent localEvent(event);
50730:   DispatchWidgetEvent(localEvent);
50730:   return true;
50730: }
50730: 
50730: bool
50730: TabChild::DispatchWidgetEvent(nsGUIEvent& event)
50730: {
54603:   if (!mWidget)
54603:     return false;
50730: 
50730:   nsEventStatus status;
54603:   event.widget = mWidget;
54603:   NS_ENSURE_SUCCESS(mWidget->DispatchEvent(&event, status), false);
50730:   return true;
50730: }
50730: 
56521: PDocumentRendererChild*
56521: TabChild::AllocPDocumentRenderer(const nsRect& documentRect,
56522:                                  const gfxMatrix& transform,
36268:                                  const nsString& bgcolor,
56521:                                  const PRUint32& renderFlags,
56523:                                  const bool& flushLayout,
56523:                                  const nsIntSize& renderSize)
36268: {
56521:     return new DocumentRendererChild();
36268: }
36268: 
36268: bool
36268: TabChild::DeallocPDocumentRenderer(PDocumentRendererChild* actor)
36268: {
36268:     delete actor;
36268:     return true;
36268: }
36268: 
36268: bool
56521: TabChild::RecvPDocumentRendererConstructor(PDocumentRendererChild* actor,
56521:                                            const nsRect& documentRect,
56522:                                            const gfxMatrix& transform,
36268:                                            const nsString& bgcolor,
56521:                                            const PRUint32& renderFlags,
56523:                                            const bool& flushLayout,
56523:                                            const nsIntSize& renderSize)
36268: {
56521:     DocumentRendererChild *render = static_cast<DocumentRendererChild *>(actor);
36268: 
36268:     nsCOMPtr<nsIWebBrowser> browser = do_QueryInterface(mWebNav);
36268:     if (!browser)
36268:         return true; // silently ignore
36268:     nsCOMPtr<nsIDOMWindow> window;
36268:     if (NS_FAILED(browser->GetContentDOMWindow(getter_AddRefs(window))) ||
36268:         !window)
36268:     {
36268:         return true; // silently ignore
36268:     }
36268: 
36268:     nsCString data;
56521:     bool ret = render->RenderDocument(window,
56522:                                       documentRect, transform,
56522:                                       bgcolor,
56521:                                       renderFlags, flushLayout,
56523:                                       renderSize, data);
36268:     if (!ret)
36268:         return true; // silently ignore
36268: 
56523:     return PDocumentRendererChild::Send__delete__(actor, renderSize, data);
36268: }
36268: 
46871: PContentDialogChild*
46871: TabChild::AllocPContentDialog(const PRUint32&,
46871:                               const nsCString&,
46871:                               const nsCString&,
57141:                               const InfallibleTArray<int>&,
57141:                               const InfallibleTArray<nsString>&)
46871: {
46871:   return new ContentDialogChild();
46871: }
46871: 
46871: bool
46871: TabChild::DeallocPContentDialog(PContentDialogChild* aDialog)
46871: {
46871:   delete aDialog;
46871:   return true;
46871: }
46871: 
52354: PContentPermissionRequestChild*
52354: TabChild::AllocPContentPermissionRequest(const nsCString& aType, const IPC::URI&)
46852: {
46852:   NS_RUNTIMEABORT("unused");
46852:   return nsnull;
46852: }
46852: 
46852: bool
52354: TabChild::DeallocPContentPermissionRequest(PContentPermissionRequestChild* actor)
46852: {
52354:     static_cast<PCOMContentPermissionRequestChild*>(actor)->IPDLRelease();
46852:     return true;
46852: }
46852: 
46737: bool
47933: TabChild::RecvActivateFrameEvent(const nsString& aType, const bool& capture)
36268: {
36268:   nsCOMPtr<nsPIDOMWindow> window = do_GetInterface(mWebNav);
36268:   NS_ENSURE_TRUE(window, true);
36268:   nsCOMPtr<nsIDOMEventTarget> chromeHandler =
36268:     do_QueryInterface(window->GetChromeEventHandler());
36268:   NS_ENSURE_TRUE(chromeHandler, true);
36268:   nsRefPtr<ContentListener> listener = new ContentListener(this);
36268:   NS_ENSURE_TRUE(listener, true);
36268:   chromeHandler->AddEventListener(aType, listener, capture);
36268:   return true;
36268: }
46683: 
56242: POfflineCacheUpdateChild*
56242: TabChild::AllocPOfflineCacheUpdate(const URI& manifestURI,
56242:             const URI& documentURI,
56242:             const nsCString& clientID,
56242:             const bool& stickDocument)
56242: {
56242:   NS_RUNTIMEABORT("unused");
56242:   return nsnull;
56242: }
56242: 
56242: bool
56242: TabChild::DeallocPOfflineCacheUpdate(POfflineCacheUpdateChild* actor)
56242: {
56242:   OfflineCacheUpdateChild* offlineCacheUpdate = static_cast<OfflineCacheUpdateChild*>(actor);
56242:   delete offlineCacheUpdate;
56242:   return true;
56242: }
56242: 
46683: bool
47933: TabChild::RecvLoadRemoteScript(const nsString& aURL)
46683: {
51362:   if (!mCx && !InitTabChildGlobal())
51362:     return false;
51362: 
50801:   LoadFrameScriptInternal(aURL);
46683:   return true;
46683: }
46683: 
46683: bool
47933: TabChild::RecvAsyncMessage(const nsString& aMessage,
46683:                            const nsString& aJSON)
46683: {
46683:   if (mTabChildGlobal) {
71900:     nsFrameScriptCx cx(static_cast<nsIWebBrowserChrome*>(this), this);
71900:     nsRefPtr<nsFrameMessageManager> mm =
71900:       static_cast<nsFrameMessageManager*>(mTabChildGlobal->mMessageManager.get());
71900:     mm->ReceiveMessage(static_cast<nsPIDOMEventTarget*>(mTabChildGlobal),
46780:                        aMessage, PR_FALSE, aJSON, nsnull, nsnull);
46683:   }
46683:   return true;
46683: }
46683: 
50357: class UnloadScriptEvent : public nsRunnable
50357: {
50357: public:
50357:   UnloadScriptEvent(TabChild* aTabChild, TabChildGlobal* aTabChildGlobal)
50357:     : mTabChild(aTabChild), mTabChildGlobal(aTabChildGlobal)
50357:   { }
50357: 
50357:   NS_IMETHOD Run()
50357:   {
50357:     nsCOMPtr<nsIDOMEvent> event;
50357:     NS_NewDOMEvent(getter_AddRefs(event), nsnull, nsnull);
50357:     if (event) {
50357:       event->InitEvent(NS_LITERAL_STRING("unload"), PR_FALSE, PR_FALSE);
50357:       nsCOMPtr<nsIPrivateDOMEvent> privateEvent(do_QueryInterface(event));
50357:       privateEvent->SetTrusted(PR_TRUE);
50357: 
50357:       PRBool dummy;
50357:       mTabChildGlobal->DispatchEvent(event, &dummy);
50357:     }
50357: 
50357:     return NS_OK;
50357:   }
50357: 
50357:   nsRefPtr<TabChild> mTabChild;
50357:   TabChildGlobal* mTabChildGlobal;
50357: };
50357: 
48950: bool
48950: TabChild::RecvDestroy()
48950: {
50357:   // Let the frame scripts know the child is being closed
50357:   nsContentUtils::AddScriptRunner(
50357:     new UnloadScriptEvent(this, mTabChildGlobal)
50357:   );
48950: 
48950:   // XXX what other code in ~TabChild() should we be running here?
54008:   DestroyWindow();
48950: 
48950:   return Send__delete__(this);
48950: }
46683: 
54018: PRenderFrameChild*
54018: TabChild::AllocPRenderFrame()
54018: {
54018:     return new RenderFrameChild();
54018: }
54018: 
54018: bool
54018: TabChild::DeallocPRenderFrame(PRenderFrameChild* aFrame)
54018: {
54018:     delete aFrame;
54018:     return true;
54018: }
54018: 
46683: bool
46683: TabChild::InitTabChildGlobal()
46683: {
51362:   if (mCx && mTabChildGlobal)
51362:     return true;
51362: 
46683:   nsCOMPtr<nsPIDOMWindow> window = do_GetInterface(mWebNav);
46683:   NS_ENSURE_TRUE(window, false);
46683:   nsCOMPtr<nsIDOMEventTarget> chromeHandler =
46683:     do_QueryInterface(window->GetChromeEventHandler());
46683:   NS_ENSURE_TRUE(chromeHandler, false);
46683: 
46683:   nsCOMPtr<nsIJSRuntimeService> runtimeSvc = 
46683:     do_GetService("@mozilla.org/js/xpc/RuntimeService;1");
46683:   NS_ENSURE_TRUE(runtimeSvc, false);
46683: 
46683:   JSRuntime* rt = nsnull;
46683:   runtimeSvc->GetRuntime(&rt);
46683:   NS_ENSURE_TRUE(rt, false);
46683: 
46683:   JSContext* cx = JS_NewContext(rt, 8192);
46683:   NS_ENSURE_TRUE(cx, false);
46683: 
46683:   mCx = cx;
46683: 
46683:   nsContentUtils::XPConnect()->SetSecurityManagerForJSContext(cx, nsContentUtils::GetSecurityManager(), 0);
46683:   nsContentUtils::GetSecurityManager()->GetSystemPrincipal(getter_AddRefs(mPrincipal));
46683: 
57498:   JS_SetNativeStackQuota(cx, 128 * sizeof(size_t) * 1024);
46683: 
46683:   JS_SetOptions(cx, JS_GetOptions(cx) | JSOPTION_JIT | JSOPTION_ANONFUNFIX | JSOPTION_PRIVATE_IS_NSISUPPORTS);
46689:   JS_SetVersion(cx, JSVERSION_LATEST);
69796:   JS_SetErrorReporter(cx, ContentScriptErrorReporter);
46683: 
60618:   xpc_LocalizeContext(cx);
60618: 
46683:   JSAutoRequest ar(cx);
46683:   nsIXPConnect* xpc = nsContentUtils::XPConnect();
46683:   const PRUint32 flags = nsIXPConnect::INIT_JS_STANDARD_CLASSES |
46683:                          /*nsIXPConnect::OMIT_COMPONENTS_OBJECT ?  |*/
46683:                          nsIXPConnect::FLAG_SYSTEM_GLOBAL_OBJECT;
46683: 
46683:   nsRefPtr<TabChildGlobal> scope = new TabChildGlobal(this);
46683:   NS_ENSURE_TRUE(scope, false);
46683: 
46683:   mTabChildGlobal = scope;
46683: 
46683:   nsISupports* scopeSupports =
46683:     NS_ISUPPORTS_CAST(nsPIDOMEventTarget*, scope);
46683:   JS_SetContextPrivate(cx, scopeSupports);
46683: 
46683:   nsresult rv =
46683:     xpc->InitClassesWithNewWrappedGlobal(cx, scopeSupports,
48503:                                          NS_GET_IID(nsISupports),
56748:                                          scope->GetPrincipal(), nsnull,
50801:                                          flags, getter_AddRefs(mGlobal));
46683:   NS_ENSURE_SUCCESS(rv, false);
46683: 
46683:   nsCOMPtr<nsPIWindowRoot> root = do_QueryInterface(chromeHandler);
46683:   NS_ENSURE_TRUE(root, false);
46683:   root->SetParentTarget(scope);
46683:   
46683:   JSObject* global = nsnull;
50801:   rv = mGlobal->GetJSObject(&global);
46683:   NS_ENSURE_SUCCESS(rv, false);
46683: 
46683:   JS_SetGlobalObject(cx, global);
50801:   DidCreateCx();
46683:   return true;
46683: }
46683: 
54019: bool
54019: TabChild::InitWidget(const nsIntSize& size)
54019: {
54019:     NS_ABORT_IF_FALSE(!mWidget && !mRemoteFrame, "CreateWidget twice?");
54019: 
54599:     mWidget = nsIWidget::CreatePuppetWidget(this);
54019:     if (!mWidget) {
54019:         NS_ERROR("couldn't create fake widget");
54019:         return false;
54019:     }
54019:     mWidget->Create(
54019:         nsnull, 0,              // no parents
54019:         nsIntRect(nsIntPoint(0, 0), size),
54019:         nsnull,                 // HandleWidgetEvent
68668:         nsnull                  // nsDeviceContext
54019:         );
54019: 
54019:     RenderFrameChild* remoteFrame =
54019:         static_cast<RenderFrameChild*>(SendPRenderFrameConstructor());
54019:     if (!remoteFrame) {
54019:       NS_WARNING("failed to construct RenderFrame");
54019:       return false;
54019:     }
54019: 
54019:     NS_ABORT_IF_FALSE(0 == remoteFrame->ManagedPLayersChild().Length(),
54019:                       "shouldn't have a shadow manager yet");
54019:     PLayersChild* shadowManager = remoteFrame->SendPLayersConstructor();
54019:     if (!shadowManager) {
54019:       NS_WARNING("failed to construct LayersChild");
54019:       // This results in |remoteFrame| being deleted.
54019:       PRenderFrameChild::Send__delete__(remoteFrame);
54019:       return false;
54019:     }
54019: 
54019:     LayerManager* lm = mWidget->GetLayerManager();
54019:     NS_ABORT_IF_FALSE(LayerManager::LAYERS_BASIC == lm->GetBackendType(),
54019:                       "content processes should only be using BasicLayers");
54019: 
54019:     BasicShadowLayerManager* bslm = static_cast<BasicShadowLayerManager*>(lm);
54019:     NS_ABORT_IF_FALSE(!bslm->HasShadowManager(),
54019:                       "PuppetWidget shouldn't have shadow manager yet");
54019:     bslm->SetShadowManager(shadowManager);
54019: 
54019:     mRemoteFrame = remoteFrame;
54019:     return true;
54019: }
54019: 
47933: static bool
47933: SendSyncMessageToParent(void* aCallbackData,
46683:                         const nsAString& aMessage,
46683:                         const nsAString& aJSON,
57141:                         InfallibleTArray<nsString>* aJSONRetVal)
46683: {
46683:   return static_cast<TabChild*>(aCallbackData)->
47933:     SendSyncMessage(nsString(aMessage), nsString(aJSON),
46780:                     aJSONRetVal);
46683: }
46683: 
47933: static bool
47933: SendAsyncMessageToParent(void* aCallbackData,
46683:                          const nsAString& aMessage,
46683:                          const nsAString& aJSON)
46683: {
46683:   return static_cast<TabChild*>(aCallbackData)->
47933:     SendAsyncMessage(nsString(aMessage), nsString(aJSON));
46683: }
46683: 
46683: TabChildGlobal::TabChildGlobal(TabChild* aTabChild)
46683: : mTabChild(aTabChild)
46683: {
46683:   mMessageManager = new nsFrameMessageManager(PR_FALSE,
46683:                                               SendSyncMessageToParent,
46683:                                               SendAsyncMessageToParent,
46683:                                               nsnull,
46683:                                               mTabChild,
46683:                                               nsnull,
46683:                                               aTabChild->GetJSContext());
46683: }
46683: 
63952: TabChildGlobal::~TabChildGlobal()
63952: {
63952:   if (mListenerManager) {
63952:     mListenerManager->Disconnect();
63952:   }
63952: }
63952: 
46683: NS_IMPL_CYCLE_COLLECTION_CLASS(TabChildGlobal)
46683: 
46683: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(TabChildGlobal,
46683:                                                 nsDOMEventTargetHelper)
46683:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mMessageManager)
46683: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
46683: 
46683: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(TabChildGlobal,
46683:                                                   nsDOMEventTargetHelper)
46683:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mMessageManager)
46683: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
46683: 
46683: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(TabChildGlobal)
46683:   NS_INTERFACE_MAP_ENTRY(nsIFrameMessageManager)
51811:   NS_INTERFACE_MAP_ENTRY(nsISyncMessageSender)
46683:   NS_INTERFACE_MAP_ENTRY(nsIContentFrameMessageManager)
46683:   NS_INTERFACE_MAP_ENTRY(nsIScriptContextPrincipal)
46683:   NS_INTERFACE_MAP_ENTRY(nsIScriptObjectPrincipal)
46683:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ContentFrameMessageManager)
46683: NS_INTERFACE_MAP_END_INHERITING(nsDOMEventTargetHelper)
46683: 
46683: NS_IMPL_ADDREF_INHERITED(TabChildGlobal, nsDOMEventTargetHelper)
46683: NS_IMPL_RELEASE_INHERITED(TabChildGlobal, nsDOMEventTargetHelper)
46683: 
46683: NS_IMETHODIMP
46683: TabChildGlobal::GetContent(nsIDOMWindow** aContent)
46683: {
46683:   *aContent = nsnull;
48158:   if (!mTabChild)
48158:     return NS_ERROR_NULL_POINTER;
46683:   nsCOMPtr<nsIDOMWindow> window = do_GetInterface(mTabChild->WebNavigation());
46683:   window.swap(*aContent);
46683:   return NS_OK;
46683: }
46683: 
46701: NS_IMETHODIMP
58164: TabChildGlobal::PrivateNoteIntentionalCrash()
58164: {
58164:     mozilla::NoteIntentionalCrash("tab");
58164:     return NS_OK;
58164: }
58164: 
58164: NS_IMETHODIMP
46701: TabChildGlobal::GetDocShell(nsIDocShell** aDocShell)
46701: {
46701:   *aDocShell = nsnull;
46849:   if (!mTabChild)
46849:     return NS_ERROR_NULL_POINTER;
46701:   nsCOMPtr<nsIDocShell> docShell = do_GetInterface(mTabChild->WebNavigation());
46701:   docShell.swap(*aDocShell);
46701:   return NS_OK;
46701: }
46701: 
46683: JSContext*
46683: TabChildGlobal::GetJSContextForEventHandlers()
46683: {
46849:   if (!mTabChild)
46849:     return nsnull;
46683:   return mTabChild->GetJSContext();
46683: }
46683: 
46683: nsIPrincipal* 
46683: TabChildGlobal::GetPrincipal()
46683: {
46849:   if (!mTabChild)
46849:     return nsnull;
46683:   return mTabChild->GetPrincipal();
46683: }
50771: 
