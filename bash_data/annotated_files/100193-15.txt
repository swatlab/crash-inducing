 88191: /* Any copyright is dedicated to the Public Domain.
 88191:    http://creativecommons.org/publicdomain/zero/1.0/ */
 88191: "use strict";
 88191: 
100193: let pickDone = false;
100193: 
 88191: function test() {
 88191:   if (!isTiltEnabled()) {
 88191:     info("Skipping picking test because Tilt isn't enabled.");
 88191:     return;
 88191:   }
 88191:   if (!isWebGLSupported()) {
 88191:     info("Skipping picking test because WebGL isn't supported.");
 88191:     return;
 88191:   }
 88191: 
 88191:   waitForExplicitFinish();
 88191: 
 88191:   createTab(function() {
 88191:     createTilt({
 88191:       onTiltOpen: function(instance)
 88191:       {
 88191:         let presenter = instance.presenter;
 88191:         let canvas = presenter.canvas;
 88191: 
 91042:         presenter._onSetupMesh = function() {
 94260:           let p = getPickablePoint(presenter);
 88191: 
 94260:           presenter.pickNode(p[0], p[1], {
 88191:             onpick: function(data)
 88191:             {
 88191:               ok(data.index > 0,
 88191:                 "Simply picking a node didn't work properly.");
 88191: 
100193:               pickDone = true;
 88393:               Services.obs.addObserver(cleanup, DESTROYED, false);
 88191:               InspectorUI.closeInspectorUI();
 88191:             }
 88191:           });
 88191:         };
 88191:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 88191:     });
 88191:   });
 88191: }
 88191: 
 88191: function cleanup() {
100193:   if (pickDone) { Services.obs.removeObserver(cleanup, DESTROYED); }
 88191:   gBrowser.removeCurrentTab();
 88191:   finish();
 88191: }
