50491: /*
50491:  * Copyright (C) 2008 Apple Inc. All rights reserved.
50491:  *
50491:  * Redistribution and use in source and binary forms, with or without
50491:  * modification, are permitted provided that the following conditions
50491:  * are met:
50491:  * 1. Redistributions of source code must retain the above copyright
50491:  *    notice, this list of conditions and the following disclaimer.
50491:  * 2. Redistributions in binary form must reproduce the above copyright
50491:  *    notice, this list of conditions and the following disclaimer in the
50491:  *    documentation and/or other materials provided with the distribution.
50491:  *
50491:  * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
50491:  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
50491:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
50491:  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
50491:  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
50491:  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
50491:  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
50491:  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
50491:  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
50491:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
50491:  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
50491:  */
50491: 
50491: #include "ExecutableAllocator.h"
50491: 
50491: #if ENABLE_ASSEMBLER && WTF_PLATFORM_UNIX && !WTF_PLATFORM_SYMBIAN
50491: 
50491: #include <sys/mman.h>
50491: #include <unistd.h>
50491: #include <wtf/VMTags.h>
50491: 
50491: namespace JSC {
50491: 
50491: void ExecutableAllocator::intializePageSize()
50491: {
50491:     ExecutableAllocator::pageSize = getpagesize();
50491: }
50491: 
50491: ExecutablePool::Allocation ExecutablePool::systemAlloc(size_t n)
50491: {
50491:     void* allocation = mmap(NULL, n, INITIAL_PROTECTION_FLAGS, MAP_PRIVATE | MAP_ANON, VM_TAG_FOR_EXECUTABLEALLOCATOR_MEMORY, 0);
50491:     if (allocation == MAP_FAILED)
57437:         allocation = NULL;
50491:     ExecutablePool::Allocation alloc = { reinterpret_cast<char*>(allocation), n };
50491:     return alloc;
50491: }
50491: 
50491: void ExecutablePool::systemRelease(const ExecutablePool::Allocation& alloc)
50491: { 
50491:     int result = munmap(alloc.pages, alloc.size);
50491:     ASSERT_UNUSED(result, !result);
50491: }
50491: 
50491: #if WTF_ENABLE_ASSEMBLER_WX_EXCLUSIVE
50491: void ExecutableAllocator::reprotectRegion(void* start, size_t size, ProtectionSeting setting)
50491: {
50491:     if (!pageSize)
50491:         intializePageSize();
50491: 
50491:     // Calculate the start of the page containing this region,
50491:     // and account for this extra memory within size.
50491:     intptr_t startPtr = reinterpret_cast<intptr_t>(start);
50491:     intptr_t pageStartPtr = startPtr & ~(pageSize - 1);
50491:     void* pageStart = reinterpret_cast<void*>(pageStartPtr);
50491:     size += (startPtr - pageStartPtr);
50491: 
50491:     // Round size up
50491:     size += (pageSize - 1);
50491:     size &= ~(pageSize - 1);
50491: 
50491:     mprotect(pageStart, size, (setting == Writable) ? PROTECTION_FLAGS_RW : PROTECTION_FLAGS_RX);
50491: }
50491: #endif
50491: 
50491: #if WTF_CPU_ARM_TRADITIONAL && WTF_PLATFORM_LINUX && WTF_COMPILER_RVCT
50491: __asm void ExecutableAllocator::cacheFlush(void* code, size_t size)
50491: {
50491:     ARM
50491:     push {r7}
50491:     add r1, r1, r0
50491:     mov r7, #0xf0000
50491:     add r7, r7, #0x2
50491:     mov r2, #0x0
50491:     svc #0x0
50491:     pop {r7}
50491:     bx lr
50491: }
50491: #endif
50491: 
50491: }
50491: 
50491: #endif // HAVE(ASSEMBLER)
