47525: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
47525:  * vim: set ts=4 sw=4 et tw=99 ft=cpp:
47525:  *
47525:  * ***** BEGIN LICENSE BLOCK *****
47525:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
47525:  *
47525:  * The contents of this file are subject to the Mozilla Public License Version
47525:  * 1.1 (the "License"); you may not use this file except in compliance with
47525:  * the License. You may obtain a copy of the License at
47525:  * http://www.mozilla.org/MPL/
47525:  *
47525:  * Software distributed under the License is distributed on an "AS IS" basis,
47525:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
47525:  * for the specific language governing rights and limitations under the
47525:  * License.
47525:  *
47525:  * The Original Code is mozilla.org code, released
47525:  * June 24, 2010.
47525:  *
47525:  * The Initial Developer of the Original Code is
47525:  *    The Mozilla Foundation
47525:  *
47525:  * Contributor(s):
47525:  *    Andreas Gal <gal@mozilla.com>
47525:  *
47525:  * Alternatively, the contents of this file may be used under the terms of
47525:  * either of the GNU General Public License Version 2 or later (the "GPL"),
47525:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
47525:  * in which case the provisions of the GPL or the LGPL are applicable instead
47525:  * of those above. If you wish to allow use of your version of this file only
47525:  * under the terms of either the GPL or the LGPL, and not to allow others to
47525:  * use your version of this file under the terms of the MPL, indicate your
47525:  * decision by deleting the provisions above and replace them with the notice
47525:  * and other provisions required by the GPL or the LGPL. If you do not delete
47525:  * the provisions above, a recipient may use your version of this file under
47525:  * the terms of any one of the MPL, the GPL or the LGPL.
47525:  *
47525:  * ***** END LICENSE BLOCK ***** */
47525: 
47525: #include "jsapi.h"
47525: #include "jswrapper.h"
47525: 
55604: class nsIPrincipal;
55604: 
47525: namespace xpc {
47525: 
47525: class AccessCheck {
47525:   public:
47574:     static bool isSameOrigin(JSCompartment *a, JSCompartment *b);
47574:     static bool isChrome(JSCompartment *compartment);
55604:     static nsIPrincipal *getPrincipal(JSCompartment *compartment);
55587:     static bool isCrossOriginAccessPermitted(JSContext *cx, JSObject *obj, jsid id,
55587:                                              JSWrapper::Action act);
47574:     static bool isSystemOnlyAccessPermitted(JSContext *cx);
55629:     static bool isLocationObjectSameOrigin(JSContext *cx, JSObject *wrapper);
56042:     static bool documentDomainMakesSameOrigin(JSContext *cx, JSObject *obj);
47574: 
47574:     static bool needsSystemOnlyWrapper(JSObject *obj);
47525: 
55644:     static bool isScriptAccessOnly(JSContext *cx, JSObject *wrapper);
55644: 
47525:     static void deny(JSContext *cx, jsid id);
47574: };
47525: 
47574: struct Policy {
47574:     typedef JSWrapper::Permission Permission;
47574: 
47574:     static const Permission PermitObjectAccess = JSWrapper::PermitObjectAccess;
47574:     static const Permission PermitPropertyAccess = JSWrapper::PermitPropertyAccess;
47574:     static const Permission DenyAccess = JSWrapper::DenyAccess;
47574: };
47574: 
47574: // This policy permits access to all properties.
47574: struct Permissive : public Policy {
55587:     static bool check(JSContext *cx, JSObject *wrapper, jsid id, JSWrapper::Action act,
55587:                       Permission &perm) {
47574:         perm = PermitObjectAccess;
47574:         return true;
47574:     }
47574: };
47574: 
47574: // This policy only permits access to the object if the subject can touch
47574: // system objects.
47574: struct OnlyIfSubjectIsSystem : public Policy {
55587:     static bool check(JSContext *cx, JSObject *wrapper, jsid id, JSWrapper::Action act,
55587:                       Permission &perm) {
47574:         perm = DenyAccess;
47574:         if (AccessCheck::isSystemOnlyAccessPermitted(cx))
47574:             perm = PermitObjectAccess;
47574:         return true;
47574:     }
47574: };
47574: 
47574: // This policy only permits access to properties that are safe to be used
47574: // across origins.
47574: struct CrossOriginAccessiblePropertiesOnly : public Policy {
55587:     static bool check(JSContext *cx, JSObject *wrapper, jsid id, JSWrapper::Action act,
55587:                       Permission &perm) {
47574:         perm = DenyAccess;
55587:         if (AccessCheck::isCrossOriginAccessPermitted(cx, wrapper, id, act))
47574:             perm = PermitPropertyAccess;
47574:         return true;
47574:     }
47574: };
47574: 
55617: // This policy only permits access to properties that are safe to be used
55617: // across origins.
55617: struct SameOriginOrCrossOriginAccessiblePropertiesOnly : public Policy {
55617:     static bool check(JSContext *cx, JSObject *wrapper, jsid id, JSWrapper::Action act,
55617:                       Permission &perm) {
55617:         perm = DenyAccess;
55617:         if (AccessCheck::isCrossOriginAccessPermitted(cx, wrapper, id, act) ||
55617:             AccessCheck::isLocationObjectSameOrigin(cx, wrapper)) {
55617:             perm = PermitPropertyAccess;
55617:         }
55617:         return true;
55617:     }
55617: };
55617: 
47574: // This policy only permits access to properties if they appear in the
47574: // objects exposed properties list.
47574: struct ExposedPropertiesOnly : public Policy {
55587:     static bool check(JSContext *cx, JSObject *wrapper, jsid id, JSWrapper::Action act,
55587:                       Permission &perm);
47525: };
47525: 
47525: }
