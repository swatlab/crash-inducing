 87835: /* This Source Code Form is subject to the terms of the Mozilla Public
 87835:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 87835:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 87835: "use strict";
 87835: 
 87835: const TEST_PAGE = "http://example.org/browser/browser/base/content/test/zoom_test.html";
 87835: const TEST_VIDEO = "http://example.org/browser/browser/base/content/test/video.ogg";
 87835: 
 87835: var gTab1, gTab2, gLevel1, gLevel2;
 87835: 
 87835: function test() {
 87835:   waitForExplicitFinish();
 87835: 
 87835:   gTab1 = gBrowser.addTab();
 87835:   gTab2 = gBrowser.addTab();
137506:   gBrowser.selectedTab = gTab1;
 87835: 
137506:   load(gTab1, TEST_PAGE, function() {
137506:     load(gTab2, TEST_VIDEO, zoomTab1);
137506:   });
 87835: }
 87835: 
 87835: function zoomTab1() {
 87835:   is(gBrowser.selectedTab, gTab1, "Tab 1 is selected");
137506:   zoomTest(gTab1, 1, "Initial zoom of tab 1 should be 1");
137506:   zoomTest(gTab2, 1, "Initial zoom of tab 2 should be 1");
 87835: 
137506:   FullZoom.enlarge();
 87835:   gLevel1 = ZoomManager.getZoomForBrowser(gBrowser.getBrowserForTab(gTab1));
 87835: 
 87835:   ok(gLevel1 > 1, "New zoom for tab 1 should be greater than 1");
137506:   zoomTest(gTab2, 1, "Zooming tab 1 should not affect tab 2");
 87835: 
137506:   gBrowser.selectedTab = gTab2;
137506:   zoomTest(gTab2, 1, "Tab 2 is still unzoomed after it is selected");
137506:   zoomTest(gTab1, gLevel1, "Tab 1 is still zoomed");
137506: 
137506:   zoomTab2();
 87835: }
 87835: 
 87835: function zoomTab2() {
 87835:   is(gBrowser.selectedTab, gTab2, "Tab 2 is selected");
 87835: 
137506:   FullZoom.reduce();
 87835:   let gLevel2 = ZoomManager.getZoomForBrowser(gBrowser.getBrowserForTab(gTab2));
 87835: 
 87835:   ok(gLevel2 < 1, "New zoom for tab 2 should be less than 1");
137506:   zoomTest(gTab1, gLevel1, "Zooming tab 2 should not affect tab 1");
 87835: 
137506:   afterZoom(function() {
137506:     zoomTest(gTab1, gLevel1, "Tab 1 should have the same zoom after it's selected");
137506: 
137506:     testNavigation();
137506:   });
137506:   gBrowser.selectedTab = gTab1;
 87835: }
 87835: 
 87835: function testNavigation() {
137506:   load(gTab1, TEST_VIDEO, function() {
137506:     zoomTest(gTab1, 1, "Zoom should be 1 when a video was loaded");
137506:     navigate(BACK, function() {
137506:       zoomTest(gTab1, gLevel1, "Zoom should be restored when a page is loaded");
137506:       navigate(FORWARD, function() {
137506:         zoomTest(gTab1, 1, "Zoom should be 1 again when navigating back to a video");
137506:         finishTest();
137506:       });
137506:     });
137506:   });
 87835: }
 87835: 
 87835: var finishTestStarted  = false;
 87835: function finishTest() {
 87835:   ok(!finishTestStarted, "finishTest called more than once");
 87835:   finishTestStarted = true;
 87835: 
137506:   gBrowser.selectedTab = gTab1;
137506:   FullZoom.reset();
 87835:   gBrowser.removeTab(gTab1);
137506: 
137506:   gBrowser.selectedTab = gTab2;
137506:   FullZoom.reset();
 87835:   gBrowser.removeTab(gTab2);
137506: 
137506:   finish();
 87835: }
137506: 
137506: function zoomTest(tab, val, msg) {
137506:   is(ZoomManager.getZoomForBrowser(tab.linkedBrowser), val, msg);
137506: }
137506: 
137506: function load(tab, url, cb) {
137506:   let didLoad = false;
137506:   let didZoom = false;
137506:   tab.linkedBrowser.addEventListener("load", function onload(event) {
137506:     event.currentTarget.removeEventListener("load", onload, true);
137506:     didLoad = true;
137506:     if (didZoom)
137506:       executeSoon(cb);
137506:   }, true);
137506: 
137506:   afterZoom(function() {
137506:     didZoom = true;
137506:     if (didLoad)
137506:       executeSoon(cb);
137506:   });
137506: 
137506:   tab.linkedBrowser.loadURI(url);
137506: }
137506: 
137506: const BACK = 0;
137506: const FORWARD = 1;
137506: function navigate(direction, cb) {
137506:   let didPs = false;
137506:   let didZoom = false;
137506:   gBrowser.addEventListener("pageshow", function onpageshow(event) {
137506:     gBrowser.removeEventListener("pageshow", onpageshow, true);
137506:     didPs = true;
137506:     if (didZoom)
137506:       executeSoon(cb);
137506:   }, true);
137506: 
137506:   afterZoom(function() {
137506:     didZoom = true;
137506:     if (didPs)
137506:       executeSoon(cb);
137506:   });
137506: 
137506:   if (direction == BACK)
137506:     gBrowser.goBack();
137506:   else if (direction == FORWARD)
137506:     gBrowser.goForward();
137506: }
137506: 
137506: function afterZoom(cb) {
137506:   let oldSZFB = ZoomManager.setZoomForBrowser;
137506:   ZoomManager.setZoomForBrowser = function(browser, value) {
137506:     oldSZFB.call(ZoomManager, browser, value);
137506:     ZoomManager.setZoomForBrowser = oldSZFB;
137506:     executeSoon(cb);
137506:   };
137506: }
