 72423: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 72423: 
 72423: #ifndef MOZILLA_GFX_SCALEDFONTDWRITE_H_
 72423: #define MOZILLA_GFX_SCALEDFONTDWRITE_H_
 72423: 
 72423: #include <dwrite.h>
107885: #include "ScaledFontBase.h"
 72423: 
 94392: struct ID2D1GeometrySink;
 94392: 
 72423: namespace mozilla {
 72423: namespace gfx {
 72423: 
107885: class ScaledFontDWrite : public ScaledFontBase
 72423: {
 72423: public:
 72423:   ScaledFontDWrite(IDWriteFontFace *aFont, Float aSize)
 72423:     : mFontFace(aFont)
107885:     , ScaledFontBase(aSize)
 72423:   {}
 72423: 
 72423:   virtual FontType GetType() const { return FONT_DWRITE; }
 72423: 
 72423:   virtual TemporaryRef<Path> GetPathForGlyphs(const GlyphBuffer &aBuffer, const DrawTarget *aTarget);
 94392:   virtual void CopyGlyphsToBuilder(const GlyphBuffer &aBuffer, PathBuilder *aBuilder);
 72423: 
 94392:   void CopyGlyphsToSink(const GlyphBuffer &aBuffer, ID2D1GeometrySink *aSink);
 94392: 
107885: #ifdef USE_SKIA
107885:   virtual SkTypeface* GetSkTypeface()
107885:   {
107885:     MOZ_ASSERT(false, "Skia and DirectWrite do not mix");
107885:     return nullptr;
107885:   }
107885: #endif
107885: 
 72423:   RefPtr<IDWriteFontFace> mFontFace;
 72423: };
 72423: 
 93507: class GlyphRenderingOptionsDWrite : public GlyphRenderingOptions
 93507: {
 93507: public:
 93507:   GlyphRenderingOptionsDWrite(IDWriteRenderingParams *aParams)
 93507:     : mParams(aParams)
 93507:   {
 93507:   }
 93507: 
 93507:   virtual FontType GetType() const { return FONT_DWRITE; }
 93507: 
 93507: private:
 93507:   friend class DrawTargetD2D;
 93507: 
 93507:   RefPtr<IDWriteRenderingParams> mParams;
 93507: };
 93507: 
 72423: }
 72423: }
 72423: 
 72423: #endif /* MOZILLA_GFX_SCALEDFONTDWRITE_H_ */
