 4306: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 4306: /* vim:set tw=80 expandtab softtabstop=2 ts=2 sw=2: */
 4306: /* ***** BEGIN LICENSE BLOCK *****
 4306:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 4306:  *
 4306:  * The contents of this file are subject to the Mozilla Public License Version
 4306:  * 1.1 (the "License"); you may not use this file except in compliance with
 4306:  * the License. You may obtain a copy of the License at
 4306:  * http://www.mozilla.org/MPL/
 4306:  *
 4306:  * Software distributed under the License is distributed on an "AS IS" basis,
 4306:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 4306:  * for the specific language governing rights and limitations under the
 4306:  * License.
 4306:  *
 4306:  * The Original Code is Mozilla Communicator client code.
 4306:  *
 4306:  * The Initial Developer of the Original Code is
 4306:  * Netscape Communications Corporation.
 4306:  * Portions created by the Initial Developer are Copyright (C) 1998
 4306:  * the Initial Developer. All Rights Reserved.
 4306:  *
 4306:  * Contributor(s):
 4306:  *   Daniel Kraft <d@domob.eu>
 4306:  *
 4306:  * Alternatively, the contents of this file may be used under the terms of
 4306:  * either of the GNU General Public License Version 2 or later (the "GPL"),
 4306:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 4306:  * in which case the provisions of the GPL or the LGPL are applicable instead
 4306:  * of those above. If you wish to allow use of your version of this file only
 4306:  * under the terms of either the GPL or the LGPL, and not to allow others to
 4306:  * use your version of this file under the terms of the MPL, indicate your
 4306:  * decision by deleting the provisions above and replace them with the notice
 4306:  * and other provisions required by the GPL or the LGPL. If you do not delete
 4306:  * the provisions above, a recipient may use your version of this file under
 4306:  * the terms of any one of the MPL, the GPL or the LGPL.
 4306:  *
 4306:  * ***** END LICENSE BLOCK ***** */
 4306: 
 4306: /**
 4306:  * nsStyledElement is the base for elements supporting styling via the
 4306:  * id/class/style attributes; it is a common base for their support in HTML,
 4306:  * SVG and MathML.
 4306:  */
 4306: 
 4306: #ifndef __NS_STYLEDELEMENT_H_
 4306: #define __NS_STYLEDELEMENT_H_
 4306: 
 4306: #include "nsString.h"
 4306: #include "nsGenericElement.h"
 4306: 
63693: namespace mozilla {
63693: namespace css {
63693: class StyleRule;
63693: }
63693: }
 4306: 
 4306: typedef nsGenericElement nsStyledElementBase;
 4306: 
67659: class nsStyledElementNotElementCSSInlineStyle : public nsStyledElementBase
 4306: {
 4306: 
 4306: protected:
 4306: 
67659:   inline nsStyledElementNotElementCSSInlineStyle(already_AddRefed<nsINodeInfo> aNodeInfo)
 4306:     : nsStyledElementBase(aNodeInfo)
 4306:   {}
 4306: 
 4306: public:
 4306: 
43079:   // nsIContent interface methods
 4306:   virtual nsIAtom* GetClassAttributeName() const;
 4306:   virtual nsIAtom* GetIDAttributeName() const;
43079:   virtual nsIAtom* DoGetID() const;
19132:   virtual const nsAttrValue* DoGetClasses() const;
 4306: 
63693:   virtual mozilla::css::StyleRule* GetInlineStyleRule();
63693:   NS_IMETHOD SetInlineStyleRule(mozilla::css::StyleRule* aStyleRule, PRBool aNotify);
 4306: 
 4306:   virtual nsresult BindToTree(nsIDocument* aDocument, nsIContent* aParent,
 4306:                               nsIContent* aBindingParent,
 4306:                               PRBool aCompileEventHandlers);
43079:   virtual void UnbindFromTree(PRBool aDeep, PRBool aNullParent);
43079: 
43079:   virtual nsresult UnsetAttr(PRInt32 aNameSpaceID, nsIAtom* aAttribute,
43079:                              PRBool aNotify);
51985:   virtual nsresult AfterSetAttr(PRInt32 aNameSpaceID, nsIAtom* aAttribute,
51985:                                 const nsAString* aValue, PRBool aNotify);
 4306: 
48944:   nsIDOMCSSStyleDeclaration* GetStyle(nsresult* retval);
48944: 
38452: protected:
38452: 
 4306:   /**
 4306:    * Parse a style attr value into a CSS rulestruct (or, if there is no
 4306:    * document, leave it as a string) and return as nsAttrValue.
 4306:    *
 4306:    * @param aValue the value to parse
 4306:    * @param aResult the resulting HTMLValue [OUT]
 4306:    */
38452:   void ParseStyleAttribute(const nsAString& aValue,
11871:                            nsAttrValue& aResult,
11871:                            PRBool aForceInDataDoc);
 4306: 
 4306:   virtual PRBool ParseAttribute(PRInt32 aNamespaceID, nsIAtom* aAttribute,
 4306:                                 const nsAString& aValue, nsAttrValue& aResult);
 4306: 
11871:   /**
11871:    * Create the style struct from the style attr.  Used when an element is
11871:    * first put into a document.  Only has an effect if the old value is a
11871:    * string.  If aForceInDataDoc is true, will reparse even if we're in a data
11871:    * document.
11871:    */
11871:   nsresult  ReparseStyleAttribute(PRBool aForceInDataDoc);
 4306: };
 4306: 
67659: class nsStyledElement : public nsStyledElementNotElementCSSInlineStyle {
67659: protected:
67659:   inline nsStyledElement(already_AddRefed<nsINodeInfo> aNodeInfo)
67659:     : nsStyledElementNotElementCSSInlineStyle(aNodeInfo)
67659:   {}
67659: };
67659: 
 4306: #endif // __NS_STYLEDELEMENT_H_
