126599: /* This Source Code Form is subject to the terms of the Mozilla Public
126599:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
126599:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
126599: 
126599: #include "nsISupports.idl"
126599: 
126599: interface nsIVariant;
126599: interface nsIContentPrefObserver;
126599: interface nsIContentPrefCallback2;
126599: interface nsILoadContext;
126599: interface nsIContentPref;
126599: 
126599: /**
126599:  * Content Preferences
126599:  *
126599:  * Content preferences allow the application to associate arbitrary data, or
126599:  * "preferences", with specific domains, or web "content".  Specifically, a
126599:  * content preference is a structure with three values: a domain with which the
126599:  * preference is associated, a name that identifies the preference within its
126599:  * domain, and a value.  (See nsIContentPref below.)
126599:  *
126599:  * For example, if you want to remember the user's preference for a certain zoom
126599:  * level on www.mozilla.org pages, you might store a preference whose domain is
126599:  * "www.mozilla.org", whose name is "zoomLevel", and whose value is the numeric
126599:  * zoom level.
126599:  *
126599:  * A preference need not have a domain, and in that case the preference is
126599:  * called a "global" preference.  This interface doesn't impart any special
126599:  * significance to global preferences; they're simply name-value pairs that
126599:  * aren't associated with any particular domain.  As a consumer of this
126599:  * interface, you might choose to let a global preference override all non-
126599:  * global preferences of the same name, for example, for whatever definition of
126599:  * "override" is appropriate for your use case.
126599:  *
126599:  *
126599:  * Domain Parameters
126599:  *
126599:  * Many methods of this interface accept a "domain" parameter.  Domains may be
126599:  * specified either exactly, like "example.com", or as full URLs, like
126599:  * "http://example.com/foo/bar".  In the latter case the API extracts the full
126599:  * domain from the URL, so if you specify "http://foo.bar.example.com/baz", the
126599:  * domain is taken to be "foo.bar.example.com", not "example.com".
126599:  *
126599:  *
126599:  * Private-Browsing Context Parameters
126599:  *
126599:  * Many methods also accept a "context" parameter.  This parameter relates to
126599:  * private browsing and determines the kind of storage that a method uses,
126599:  * either the usual permanent storage or temporary storage set aside for private
126599:  * browsing sessions.
126599:  *
126599:  * Pass null to unconditionally use permanent storage.  Pass an nsILoadContext
126599:  * to use storage appropriate to the context's usePrivateBrowsing attribute: if
126599:  * usePrivateBrowsing is true, temporary private-browsing storage is used, and
126599:  * otherwise permanent storage is used.  A context can be obtained from the
126599:  * window or channel whose content pertains to the preferences being modified or
126599:  * retrieved.
126599:  *
126599:  *
126599:  * Callbacks
126599:  *
137506:  * The methods of callback objects are always called asynchronously.  See
137506:  * nsIContentPrefCallback2 below for more information about callbacks.
126599:  */
126599: 
137506: [scriptable, uuid(51e1d34a-5e9d-4b77-b14c-0f8346e264ca)]
126599: interface nsIContentPrefService2 : nsISupports
126599: {
126599:   /**
126599:    * Gets the preference with the given domain and name.
126599:    *
126599:    * @param domain    The preference's domain.
126599:    * @param name      The preference's name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleResult is called once unless no such preference
126599:    *                  exists, in which case handleResult is not called at all.
126599:    */
126599:   void getByDomainAndName(in AString domain,
126599:                           in AString name,
126599:                           in nsILoadContext context,
126599:                           in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Gets all preferences with the given name whose domains are either the same
126599:    * as or subdomains of the given domain.
126599:    *
126599:    * @param domain    The preferences' domain.
126599:    * @param name      The preferences' name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleResult is called once for each preference.  If no
126599:    *                  such preferences exist, handleResult is not called at all.
126599:    */
126599:   void getBySubdomainAndName(in AString domain,
126599:                              in AString name,
126599:                              in nsILoadContext context,
126599:                              in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Gets the preference with no domain and the given name.
126599:    *
126599:    * @param name      The preference's name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleResult is called once unless no such preference
126599:    *                  exists, in which case handleResult is not called at all.
126599:    */
126599:   void getGlobal(in AString name,
126599:                  in nsILoadContext context,
126599:                  in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Synchronously retrieves from the in-memory cache the preference with the
126599:    * given domain and name.
126599:    *
126599:    * In addition to caching preference values, the cache also keeps track of
126599:    * preferences that are known not to exist.  If the preference is known not to
126599:    * exist, the value attribute of the returned object will be undefined
126599:    * (nsIDataType::VTYPE_VOID).
126599:    *
126599:    * If the preference is neither cached nor known not to exist, then null is
126599:    * returned, and get() must be called to determine whether the preference
126599:    * exists.
126599:    *
126599:    * @param domain   The preference's domain.
126599:    * @param name     The preference's name.
126599:    * @param context  The private-browsing context, if any.
126599:    * @return         The preference, or null if no such preference is known to
126599:    *                 exist.
126599:    */
126599:   nsIContentPref getCachedByDomainAndName(in AString domain,
126599:                                           in AString name,
126599:                                           in nsILoadContext context);
126599: 
126599:   /**
126599:    * Synchronously retrieves from the in-memory cache all preferences with the
126599:    * given name whose domains are either the same as or subdomains of the given
126599:    * domain.
126599:    *
126599:    * The preferences are returned in an array through the out-parameter.  If a
126599:    * preference for a particular subdomain is known not to exist, then an object
126599:    * corresponding to that preference will be present in the array, and, as with
126599:    * getCachedByDomainAndName, its value attribute will be undefined.
126599:    *
126599:    * @param domain   The preferences' domain.
126599:    * @param name     The preferences' name.
126599:    * @param context  The private-browsing context, if any.
126599:    * @param len      The length of the returned array.
126599:    * @param prefs    The array of preferences.
126599:    */
126599:   void getCachedBySubdomainAndName(in AString domain,
126599:                                    in AString name,
126599:                                    in nsILoadContext context,
126599:                                    out unsigned long len,
126599:                                    [retval,array,size_is(len)] out nsIContentPref prefs);
126599: 
126599:   /**
126599:    * Synchronously retrieves from the in-memory cache the preference with no
126599:    * domain and the given name.
126599:    *
126599:    * As with getCachedByDomainAndName, if the preference is cached then it is
126599:    * returned; if the preference is known not to exist, then the value attribute
126599:    * of the returned object will be undefined; if the preference is neither
126599:    * cached nor known not to exist, then null is returned.
126599:    *
126599:    * @param name     The preference's name.
126599:    * @param context  The private-browsing context, if any.
126599:    * @return         The preference, or null if no such preference is known to
126599:    *                 exist.
126599:    */
126599:   nsIContentPref getCachedGlobal(in AString name,
126599:                                  in nsILoadContext context);
126599: 
126599:   /**
126599:    * Sets a preference.
126599:    *
126599:    * @param domain    The preference's domain.
126599:    * @param name      The preference's name.
126599:    * @param value     The preference's value.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the preference has been
126599:    *                  stored.
126599:    */
126599:   void set(in AString domain,
126599:            in AString name,
126599:            in nsIVariant value,
126599:            in nsILoadContext context,
126599:            [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Sets a preference with no domain.
126599:    *
126599:    * @param name      The preference's name.
126599:    * @param value     The preference's value.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the preference has been
126599:    *                  stored.
126599:    */
126599:   void setGlobal(in AString name,
126599:                  in nsIVariant value,
126599:                  in nsILoadContext context,
126599:                  [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes the preference with the given domain and name.
126599:    *
126599:    * @param domain    The preference's domain.
126599:    * @param name      The preference's name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeByDomainAndName(in AString domain,
126599:                              in AString name,
126599:                              in nsILoadContext context,
126599:                              [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all the preferences with the given name whose domains are either
126599:    * the same as or subdomains of the given domain.
126599:    *
126599:    * @param domain    The preferences' domain.
126599:    * @param name      The preferences' name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeBySubdomainAndName(in AString domain,
126599:                                 in AString name,
126599:                                 in nsILoadContext context,
126599:                                 [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes the preference with no domain and the given name.
126599:    *
126599:    * @param name      The preference's name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeGlobal(in AString name,
126599:                     in nsILoadContext context,
126599:                     [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all preferences with the given domain.
126599:    *
126599:    * @param domain    The preferences' domain.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeByDomain(in AString domain,
126599:                       in nsILoadContext context,
126599:                       [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all preferences whose domains are either the same as or subdomains
126599:    * of the given domain.
126599:    *
126599:    * @param domain    The preferences' domain.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeBySubdomain(in AString domain,
126599:                          in nsILoadContext context,
126599:                          [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all preferences with the given name regardless of domain, including
126599:    * global preferences with the given name.
126599:    *
126599:    * @param name      The preferences' name.
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeByName(in AString name,
126599:                     in nsILoadContext context,
126599:                     [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all non-global preferences -- in other words, all preferences that
126599:    * have a domain.
126599:    *
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeAllDomains(in nsILoadContext context,
126599:                         [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Removes all global preferences -- in other words, all preferences that have
126599:    * no domain.
126599:    *
126599:    * @param context   The private-browsing context, if any.
126599:    * @param callback  handleCompletion is called when the operation completes.
126599:    */
126599:   void removeAllGlobals(in nsILoadContext context,
126599:                         [optional] in nsIContentPrefCallback2 callback);
126599: 
126599:   /**
126599:    * Registers an observer that will be notified whenever a preference with the
126599:    * given name is set or removed.
126599:    *
126599:    * When a set or remove method is called, observers are notified after the set
126599:    * or removal completes but before method's callback is called.
126599:    *
126599:    * The service holds a strong reference to the observer, so the observer must
126599:    * be removed later to avoid leaking it.
126599:    *
126599:    * @param name      The name of the preferences to observe.  Pass null to
126599:    *                  observe all preference changes regardless of name.
126599:    * @param observer  The observer.
126599:    */
126599:   void addObserverForName(in AString name,
126599:                           in nsIContentPrefObserver observer);
126599: 
126599:   /**
126599:    * Unregisters an observer for the given name.
126599:    *
126599:    * @param name      The name for which the observer was registered.  Pass null
126599:    *                  if the observer was added with a null name.
126599:    * @param observer  The observer.
126599:    */
126599:   void removeObserverForName(in AString name,
126599:                              in nsIContentPrefObserver observer);
126599: };
126599: 
126599: /**
126599:  * The callback used by the above methods.
126599:  */
126599: [scriptable, uuid(1a12cf41-79e8-4d0f-9899-2f7b27c5d9a1)]
126599: interface nsIContentPrefCallback2 : nsISupports
126599: {
126599:   /**
126599:    * For the retrieval methods, this is called once for each retrieved
126599:    * preference.  It is not called for other methods.
126599:    *
126599:    * @param pref  The retrieved preference.
126599:    */
126599:   void handleResult(in nsIContentPref pref);
126599: 
126599:   /**
126599:    * Called when an error occurs.  This may be called multiple times before
137506:    * onComplete is called.
126599:    *
126599:    * @param error  A number in Components.results describing the error.
126599:    */
126599:   void handleError(in nsresult error);
126599: 
126599:   /**
126599:    * Called when the method finishes.  This will be called exactly once for
126599:    * each method invocation, and afterward no other callback methods will be
126599:    * called.
126599:    *
126599:    * @param reason  One of the COMPLETE_* values indicating the manner in which
126599:    *                the method completed.
126599:    */
126599:   void handleCompletion(in unsigned short reason);
126599: 
126599:   const unsigned short COMPLETE_OK = 0;
126599:   const unsigned short COMPLETE_ERROR = 1;
126599: };
126599: 
126599: [scriptable, function, uuid(9f24948d-24b5-4b1b-b554-7dbd58c1d792)]
126599: interface nsIContentPref : nsISupports
126599: {
126599:   readonly attribute AString domain;
126599:   readonly attribute AString name;
126599:   readonly attribute nsIVariant value;
126599: };
