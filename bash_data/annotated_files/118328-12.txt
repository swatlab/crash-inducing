 35721: // Copyright (c) 2009, Google Inc.
 35721: // All rights reserved.
 35721: //
 35721: // Redistribution and use in source and binary forms, with or without
 35721: // modification, are permitted provided that the following conditions are
 35721: // met:
 35721: //
 35721: //     * Redistributions of source code must retain the above copyright
 35721: // notice, this list of conditions and the following disclaimer.
 35721: //     * Redistributions in binary form must reproduce the above
 35721: // copyright notice, this list of conditions and the following disclaimer
 35721: // in the documentation and/or other materials provided with the
 35721: // distribution.
 35721: //     * Neither the name of Google Inc. nor the names of its
 35721: // contributors may be used to endorse or promote products derived from
 35721: // this software without specific prior written permission.
 35721: //
 35721: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 35721: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 35721: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 35721: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 35721: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 35721: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 35721: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 35721: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 35721: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 35721: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 35721: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 35721: 
 35721: // This header provides replacements for libc functions that we need. We if
 35721: // call the libc functions directly we risk crashing in the dynamic linker as
 35721: // it tries to resolve uncached PLT entries.
 35721: 
 35721: #ifndef CLIENT_LINUX_LINUX_LIBC_SUPPORT_H_
 35721: #define CLIENT_LINUX_LINUX_LIBC_SUPPORT_H_
 35721: 
 35721: #include <stdint.h>
 35721: #include <limits.h>
 35721: #include <sys/types.h>
 35721: 
 35721: extern "C" {
 35721: 
114869: extern size_t my_strlen(const char* s);
 35721: 
114869: extern int my_strcmp(const char* a, const char* b);
 35721: 
114869: extern int my_strncmp(const char* a, const char* b, size_t len);
 35721: 
 35721: // Parse a non-negative integer.
 35721: //   result: (output) the resulting non-negative integer
 35721: //   s: a NUL terminated string
 35721: // Return true iff successful.
114869: extern bool my_strtoui(int* result, const char* s);
 35721: 
114869: // Return the length of the given unsigned integer when expressed in base 10.
114869: extern unsigned my_uint_len(uintmax_t i);
 35721: 
114869: // Convert an unsigned integer to a string
 35721: //   output: (output) the resulting string is written here. This buffer must be
118328: //     large enough to hold the resulting string. Call |my_uint_len| to get the
 35721: //     required length.
114869: //   i: the unsigned integer to serialise.
114869: //   i_len: the length of the integer in base 10 (see |my_uint_len|).
114869: extern void my_uitos(char* output, uintmax_t i, unsigned i_len);
 35721: 
114869: extern const char* my_strchr(const char* haystack, char needle);
114869: 
114869: extern const char* my_strrchr(const char* haystack, char needle);
 35721: 
 35721: // Read a hex value
 35721: //   result: (output) the resulting value
 35721: //   s: a string
 35721: // Returns a pointer to the first invalid charactor.
114869: extern const char* my_read_hex_ptr(uintptr_t* result, const char* s);
 35721: 
114869: extern const char* my_read_decimal_ptr(uintptr_t* result, const char* s);
 35721: 
114869: extern void my_memset(void* ip, char c, size_t len);
 35721: 
114869: // The following are considered safe to use in a compromised environment.
114869: // Besides, this gives the compiler an opportunity to optimize their calls.
114869: #define my_memcpy  memcpy
114869: #define my_memmove memmove
114869: #define my_memcmp  memcmp
114869: 
114869: extern size_t my_strlcpy(char* s1, const char* s2, size_t len);
114869: 
114869: extern size_t my_strlcat(char* s1, const char* s2, size_t len);
114869: 
114869: extern int my_isspace(int ch);
 35721: 
 35721: }  // extern "C"
 35721: 
 35721: #endif  // CLIENT_LINUX_LINUX_LIBC_SUPPORT_H_
