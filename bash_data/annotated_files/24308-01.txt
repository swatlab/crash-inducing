20408: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
20408:  * vim: set ts=8 sw=4 et tw=99:
20408:  *
20408:  * ***** BEGIN LICENSE BLOCK *****
20408:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
20408:  *
20408:  * The contents of this file are subject to the Mozilla Public License Version
20408:  * 1.1 (the "License"); you may not use this file except in compliance with
20408:  * the License. You may obtain a copy of the License at
20408:  * http://www.mozilla.org/MPL/
20408:  *
20408:  * Software distributed under the License is distributed on an "AS IS" basis,
20408:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
20408:  * for the specific language governing rights and limitations under the
20408:  * License.
20408:  *
20408:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
20408:  * May 28, 2008.
20408:  *
20408:  * The Initial Developer of the Original Code is
20408:  *   Mozilla Corporation.
20408:  *
20408:  * Contributor(s):
20408:  *   Jason Orendorff <jorendorff@mozilla.com>
20408:  *
20408:  * Alternatively, the contents of this file may be used under the terms of
20408:  * either of the GNU General Public License Version 2 or later (the "GPL"),
20408:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
20408:  * in which case the provisions of the GPL or the LGPL are applicable instead
20408:  * of those above. If you wish to allow use of your version of this file only
20408:  * under the terms of either the GPL or the LGPL, and not to allow others to
20408:  * use your version of this file under the terms of the MPL, indicate your
20408:  * decision by deleting the provisions above and replace them with the notice
20408:  * and other provisions required by the GPL or the LGPL. If you do not delete
20408:  * the provisions above, a recipient may use your version of this file under
20408:  * the terms of any one of the MPL, the GPL or the LGPL.
20408:  *
20408:  * ***** END LICENSE BLOCK ***** */
20408: 
20408: #ifndef jsbuiltins_h___
20408: #define jsbuiltins_h___
20408: 
20408: #ifdef JS_TRACER
20408: 
21062: #include "nanojit/nanojit.h"
21521: #include "jstracer.h"
20408: 
22239: #ifdef THIS
22239: #undef THIS
22239: #endif
22239: 
20408: enum JSTNErrType { INFALLIBLE, FAIL_NULL, FAIL_NEG, FAIL_VOID, FAIL_JSVAL };
20408: enum { JSTN_ERRTYPE_MASK = 7, JSTN_MORE = 8 };
20408: 
20408: #define JSTN_ERRTYPE(jstn)  ((jstn)->flags & JSTN_ERRTYPE_MASK)
20408: 
20425: /*
20425:  * |prefix| and |argtypes| declare what arguments should be passed to the
20431:  * native function.  |prefix| can contain the following characters:
20425:  *
20425:  * 'C': a JSContext* argument
20426:  * 'T': |this| as a JSObject* argument (bails if |this| is not an object)
20426:  * 'S': |this| as a JSString* argument (bails if |this| is not a string)
20425:  * 'R': a JSRuntime* argument
20425:  * 'P': the pc as a jsbytecode*
20426:  * 'D': |this| as a number (jsdouble)
20431:  * 'f': the function being called, as a JSObject*
20431:  * 'p': the .prototype of the function, as a JSObject*
20425:  *
20425:  * The corresponding things will get passed as arguments to the builtin in
20425:  * reverse order (so TC means JSContext* as the first arg, and the
20425:  * JSObject* for |this| as the second arg).
20425:  *
20425:  * |argtypes| can contain the following characters:
20425:  * 'd': a number (double) argument
20425:  * 'i': an integer argument
20425:  * 's': a JSString* argument
20425:  * 'o': a JSObject* argument
20425:  * 'r': a JSObject* argument that is of class js_RegExpClass
20425:  * 'f': a JSObject* argument that is of class js_FunctionClass
20425:  * 'v': a jsval argument (boxing whatever value is actually being passed in)
20425:  */
20408: struct JSTraceableNative {
20408:     JSFastNative            native;
20408:     const nanojit::CallInfo *builtin;
20408:     const char              *prefix;
20408:     const char              *argtypes;
20408:     uintN                   flags;  /* JSTN_MORE | JSTNErrType */
20408: };
20408: 
20408: /*
20408:  * We use a magic boxed pointer value to represent error conditions that
20408:  * trigger a side exit. The address is so low that it should never be actually
20408:  * in use. If it is, a performance regression occurs, not an actual runtime
20408:  * error.
20408:  */
20408: #define JSVAL_ERROR_COOKIE OBJECT_TO_JSVAL((void*)0x10)
20408: 
20408: /* Macros used by JS_DEFINE_CALLINFOn. */
20408: #ifdef DEBUG
20408: #define _JS_CI_NAME(op) ,#op
20408: #else
20408: #define _JS_CI_NAME(op)
20408: #endif
20408: 
20408: #define  _JS_I32_ARGSIZE    nanojit::ARGSIZE_LO
20408: #define  _JS_I32_RETSIZE    nanojit::ARGSIZE_LO
20408: #define  _JS_F64_ARGSIZE    nanojit::ARGSIZE_F
20408: #define  _JS_F64_RETSIZE    nanojit::ARGSIZE_F
20408: #define  _JS_PTR_ARGSIZE    nanojit::ARGSIZE_LO
20408: #if defined AVMPLUS_64BIT
20408: # define _JS_PTR_RETSIZE    nanojit::ARGSIZE_Q
20408: #else
20408: # define _JS_PTR_RETSIZE    nanojit::ARGSIZE_LO
20408: #endif
20408: 
20930: /*
20930:  * Supported types for builtin functions. 
20930:  *
20930:  * Types with -- for the two string fields are not permitted as argument types
20930:  * in JS_DEFINE_TRCINFO.
20930:  *
20930:  * If a traceable native can fail, the values that indicate failure are part of
20930:  * the return type:
20930:  *     JSVAL_FAIL:       JSVAL_ERROR_COOKIE
20930:  *     BOOL_FAIL:        JSVAL_TO_BOOLEAN(JSVAL_VOID)
20930:  *     INT32_FAIL:       any negative value
20930:  *     STRING_FAIL:      NULL
20930:  *     OBJECT_FAIL_NULL: NULL
20930:  *
20930:  * Special builtins known to the tracer can have their own idiosyncratic
20930:  * error codes.
20930:  *
20930:  * When a traceable native returns a value indicating failure, we fall off
20930:  * trace.  If an exception is pending, it is thrown; otherwise, we assume the
20930:  * builtin had no side effects and retry the current bytecode in the
20930:  * interpreter.
20930:  * 
20930:  * So a builtin must not return a value indicating failure after causing side
20930:  * effects (such as reporting an error), without setting an exception pending.
20930:  * The operation would be retried, despite the first attempt's observable
20930:  * effects.
20930:  */
20930: #define _JS_CTYPE(ctype, size, pch, ach, flags)     (ctype, size, pch, ach, flags)
20930: #define _JS_CTYPE_CONTEXT          _JS_CTYPE(JSContext *,            _JS_PTR,"C", "", INFALLIBLE)
20930: #define _JS_CTYPE_RUNTIME          _JS_CTYPE(JSRuntime *,            _JS_PTR,"R", "", INFALLIBLE)
20930: #define _JS_CTYPE_THIS             _JS_CTYPE(JSObject *,             _JS_PTR,"T", "", INFALLIBLE)
20930: #define _JS_CTYPE_THIS_DOUBLE      _JS_CTYPE(jsdouble,               _JS_F64,"D", "", INFALLIBLE)
20930: #define _JS_CTYPE_THIS_STRING      _JS_CTYPE(JSString *,             _JS_PTR,"S", "", INFALLIBLE)
20930: #define _JS_CTYPE_PC               _JS_CTYPE(jsbytecode *,           _JS_PTR,"P", "", INFALLIBLE)
20960: #define _JS_CTYPE_JSVAL            _JS_CTYPE(jsval,                  _JS_PTR, "","v", INFALLIBLE)
20960: #define _JS_CTYPE_JSVAL_FAIL       _JS_CTYPE(jsval,                  _JS_PTR, --, --, FAIL_JSVAL)
20930: #define _JS_CTYPE_BOOL             _JS_CTYPE(JSBool,                 _JS_I32, "","i", INFALLIBLE)
20930: #define _JS_CTYPE_BOOL_FAIL        _JS_CTYPE(int32,                  _JS_I32, --, --, FAIL_VOID)
20930: #define _JS_CTYPE_INT32            _JS_CTYPE(int32,                  _JS_I32, "","i", INFALLIBLE)
20930: #define _JS_CTYPE_INT32_FAIL       _JS_CTYPE(int32,                  _JS_I32, --, --, FAIL_NEG)
20930: #define _JS_CTYPE_UINT32           _JS_CTYPE(uint32,                 _JS_I32, --, --, INFALLIBLE)
20930: #define _JS_CTYPE_DOUBLE           _JS_CTYPE(jsdouble,               _JS_F64, "","d", INFALLIBLE)
20930: #define _JS_CTYPE_STRING           _JS_CTYPE(JSString *,             _JS_PTR, "","s", INFALLIBLE)
20930: #define _JS_CTYPE_STRING_FAIL      _JS_CTYPE(JSString *,             _JS_PTR, --, --, FAIL_NULL)
20930: #define _JS_CTYPE_OBJECT           _JS_CTYPE(JSObject *,             _JS_PTR, "","o", INFALLIBLE)
20930: #define _JS_CTYPE_OBJECT_FAIL_NULL _JS_CTYPE(JSObject *,             _JS_PTR, --, --, FAIL_NULL)
20930: #define _JS_CTYPE_REGEXP           _JS_CTYPE(JSObject *,             _JS_PTR, "","r", INFALLIBLE)
20930: #define _JS_CTYPE_SCOPEPROP        _JS_CTYPE(JSScopeProperty *,      _JS_PTR, --, --, INFALLIBLE)
21521: #define _JS_CTYPE_SIDEEXIT         _JS_CTYPE(SideExit *,             _JS_PTR, --, --, INFALLIBLE)
21521: #define _JS_CTYPE_INTERPSTATE      _JS_CTYPE(InterpState *,          _JS_PTR, --, --, INFALLIBLE)
20930: #define _JS_CTYPE_FRAGMENT         _JS_CTYPE(nanojit::Fragment *,    _JS_PTR, --, --, INFALLIBLE)
20408: 
20408: #define _JS_EXPAND(tokens)  tokens
20408: 
20930: #define _JS_CTYPE_TYPE2(t,s,p,a,f)      t
20930: #define _JS_CTYPE_TYPE(tyname)          _JS_EXPAND(_JS_CTYPE_TYPE2    _JS_CTYPE_##tyname)
20960: #define _JS_CTYPE_RETSIZE2(t,s,p,a,f)   s##_RETSIZE
20930: #define _JS_CTYPE_RETSIZE(tyname)       _JS_EXPAND(_JS_CTYPE_RETSIZE2 _JS_CTYPE_##tyname)
20960: #define _JS_CTYPE_ARGSIZE2(t,s,p,a,f)   s##_ARGSIZE
20930: #define _JS_CTYPE_ARGSIZE(tyname)       _JS_EXPAND(_JS_CTYPE_ARGSIZE2 _JS_CTYPE_##tyname)
20930: #define _JS_CTYPE_PCH2(t,s,p,a,f)       p
20930: #define _JS_CTYPE_PCH(tyname)           _JS_EXPAND(_JS_CTYPE_PCH2     _JS_CTYPE_##tyname)
20930: #define _JS_CTYPE_ACH2(t,s,p,a,f)       a
20930: #define _JS_CTYPE_ACH(tyname)           _JS_EXPAND(_JS_CTYPE_ACH2     _JS_CTYPE_##tyname)
20930: #define _JS_CTYPE_FLAGS2(t,s,p,a,f)     f
20930: #define _JS_CTYPE_FLAGS(tyname)         _JS_EXPAND(_JS_CTYPE_FLAGS2   _JS_CTYPE_##tyname)
20408: 
20915: #define _JS_static_TN(t)  static t
20915: #define _JS_static_CI     static
20915: #define _JS_extern_TN(t)  extern t
20915: #define _JS_extern_CI
20915: #define _JS_FRIEND_TN(t)  extern JS_FRIEND_API(t)
20915: #define _JS_FRIEND_CI
20930: #define _JS_TN_LINKAGE(linkage, t)  _JS_##linkage##_TN(t)
20930: #define _JS_CI_LINKAGE(linkage)     _JS_##linkage##_CI
20915: 
20915: #define _JS_CALLINFO(name) name##_ci
20915: 
21793: #if defined(JS_NO_FASTCALL) && defined(NANOJIT_IA32)
21793: #define _JS_DEFINE_CALLINFO(linkage, name, crtype, cargtypes, argtypes, cse, fold)                \
21793:     _JS_TN_LINKAGE(linkage, crtype) name cargtypes;                                               \
21793:     _JS_CI_LINKAGE(linkage) const nanojit::CallInfo _JS_CALLINFO(name) =                          \
21793:         { (intptr_t) &name, argtypes, cse, fold, nanojit::ABI_CDECL _JS_CI_NAME(name) };
21793: #else
20915: #define _JS_DEFINE_CALLINFO(linkage, name, crtype, cargtypes, argtypes, cse, fold)                \
20930:     _JS_TN_LINKAGE(linkage, crtype) FASTCALL name cargtypes;                                      \
20930:     _JS_CI_LINKAGE(linkage) const nanojit::CallInfo _JS_CALLINFO(name) =                          \
20915:         { (intptr_t) &name, argtypes, cse, fold, nanojit::ABI_FASTCALL _JS_CI_NAME(name) };
21793: #endif
20408: 
20408: /*
20915:  * Declare a C function named <op> and a CallInfo struct named <op>_callinfo so the
20915:  * tracer can call it. |linkage| controls the visibility of both the function
20915:  * and the CallInfo global. It can be extern, static, or FRIEND, which
20915:  * specifies JS_FRIEND_API linkage for the function.
20408:  */
20915: #define JS_DEFINE_CALLINFO_1(linkage, rt, op, at0, cse, fold)                                     \
20930:     _JS_DEFINE_CALLINFO(linkage, op, _JS_CTYPE_TYPE(rt), (_JS_CTYPE_TYPE(at0)),                   \
20930:                         (_JS_CTYPE_ARGSIZE(at0) << 2) | _JS_CTYPE_RETSIZE(rt), cse, fold)
20915: #define JS_DEFINE_CALLINFO_2(linkage, rt, op, at0, at1, cse, fold)                                \
20930:     _JS_DEFINE_CALLINFO(linkage, op, _JS_CTYPE_TYPE(rt),                                          \
20930:                         (_JS_CTYPE_TYPE(at0), _JS_CTYPE_TYPE(at1)),                               \
20930:                         (_JS_CTYPE_ARGSIZE(at0) << 4) | (_JS_CTYPE_ARGSIZE(at1) << 2) |           \
20930:                         _JS_CTYPE_RETSIZE(rt),                                                    \
20408:                         cse, fold)
20915: #define JS_DEFINE_CALLINFO_3(linkage, rt, op, at0, at1, at2, cse, fold)                           \
20930:     _JS_DEFINE_CALLINFO(linkage, op, _JS_CTYPE_TYPE(rt),                                          \
20930:                         (_JS_CTYPE_TYPE(at0), _JS_CTYPE_TYPE(at1), _JS_CTYPE_TYPE(at2)),          \
20930:                         (_JS_CTYPE_ARGSIZE(at0) << 6) | (_JS_CTYPE_ARGSIZE(at1) << 4) |           \
20930:                         (_JS_CTYPE_ARGSIZE(at2) << 2) | _JS_CTYPE_RETSIZE(rt),                    \
20408:                         cse, fold)
20915: #define JS_DEFINE_CALLINFO_4(linkage, rt, op, at0, at1, at2, at3, cse, fold)                      \
20930:     _JS_DEFINE_CALLINFO(linkage, op, _JS_CTYPE_TYPE(rt),                                          \
20930:                         (_JS_CTYPE_TYPE(at0), _JS_CTYPE_TYPE(at1), _JS_CTYPE_TYPE(at2),           \
20930:                          _JS_CTYPE_TYPE(at3)),                                                    \
20930:                         (_JS_CTYPE_ARGSIZE(at0) << 8) | (_JS_CTYPE_ARGSIZE(at1) << 6) |           \
20930:                         (_JS_CTYPE_ARGSIZE(at2) << 4) | (_JS_CTYPE_ARGSIZE(at3) << 2) |           \
20930:                         _JS_CTYPE_RETSIZE(rt),                                                    \
20408:                         cse, fold)
20915: #define JS_DEFINE_CALLINFO_5(linkage, rt, op, at0, at1, at2, at3, at4, cse, fold)                 \
20930:     _JS_DEFINE_CALLINFO(linkage, op, _JS_CTYPE_TYPE(rt),                                          \
20930:                         (_JS_CTYPE_TYPE(at0), _JS_CTYPE_TYPE(at1), _JS_CTYPE_TYPE(at2),           \
20930:                          _JS_CTYPE_TYPE(at3), _JS_CTYPE_TYPE(at4)),                               \
20930:                         (_JS_CTYPE_ARGSIZE(at0) << 10) | (_JS_CTYPE_ARGSIZE(at1) << 8) |          \
20930:                         (_JS_CTYPE_ARGSIZE(at2) << 6) | (_JS_CTYPE_ARGSIZE(at3) << 4) |           \
20930:                         (_JS_CTYPE_ARGSIZE(at4) << 2) | _JS_CTYPE_RETSIZE(rt),                    \
20408:                         cse, fold)
20408: 
20915: #define JS_DECLARE_CALLINFO(name)  extern const nanojit::CallInfo _JS_CALLINFO(name);
20408: 
20930: #define _JS_TN_INIT_HELPER_n(n, args)  _JS_TN_INIT_HELPER_##n args
20930: 
20930: #define _JS_TN_INIT_HELPER_1(linkage, rt, op, at0, cse, fold)                                     \
20930:     &_JS_CALLINFO(op),                                                                            \
20930:     _JS_CTYPE_PCH(at0),                                                                           \
20930:     _JS_CTYPE_ACH(at0),                                                                           \
20930:     _JS_CTYPE_FLAGS(rt)
20930: 
20930: #define _JS_TN_INIT_HELPER_2(linkage, rt, op, at0, at1, cse, fold)                                \
20930:     &_JS_CALLINFO(op),                                                                            \
20930:     _JS_CTYPE_PCH(at1) _JS_CTYPE_PCH(at0),                                                        \
24308:     _JS_CTYPE_ACH(at1) _JS_CTYPE_ACH(at0),                                                        \
20930:     _JS_CTYPE_FLAGS(rt)
20930: 
20930: #define _JS_TN_INIT_HELPER_3(linkage, rt, op, at0, at1, at2, cse, fold)                           \
20930:     &_JS_CALLINFO(op),                                                                            \
20930:     _JS_CTYPE_PCH(at2) _JS_CTYPE_PCH(at1) _JS_CTYPE_PCH(at0),                                     \
24308:     _JS_CTYPE_ACH(at2) _JS_CTYPE_ACH(at1) _JS_CTYPE_ACH(at0),                                     \
20930:     _JS_CTYPE_FLAGS(rt)
20930: 
20930: #define _JS_TN_INIT_HELPER_4(linkage, rt, op, at0, at1, at2, at3, cse, fold)                      \
20930:     &_JS_CALLINFO(op),                                                                            \
20930:     _JS_CTYPE_PCH(at3) _JS_CTYPE_PCH(at2) _JS_CTYPE_PCH(at1) _JS_CTYPE_PCH(at0),                  \
24308:     _JS_CTYPE_ACH(at3) _JS_CTYPE_ACH(at2) _JS_CTYPE_ACH(at1) _JS_CTYPE_ACH(at0),                  \
20930:     _JS_CTYPE_FLAGS(rt)
20930: 
20930: #define _JS_TN_INIT_HELPER_5(linkage, rt, op, at0, at1, at2, at3, at4, cse, fold)                 \
20930:     &_JS_CALLINFO(op),                                                                            \
20930:     _JS_CTYPE_PCH(at4) _JS_CTYPE_PCH(at3) _JS_CTYPE_PCH(at2) _JS_CTYPE_PCH(at1)                   \
20930:         _JS_CTYPE_PCH(at0),                                                                       \
24308:     _JS_CTYPE_ACH(at4) _JS_CTYPE_ACH(at3) _JS_CTYPE_ACH(at2) _JS_CTYPE_ACH(at1)                   \
24308:         _JS_CTYPE_ACH(at0),                                                                       \
20930:     _JS_CTYPE_FLAGS(rt)
20930: 
20930: #define JS_DEFINE_TRCINFO_1(name, tn0)                                                            \
20930:     _JS_DEFINE_CALLINFO_n tn0                                                                     \
20930:     JSTraceableNative name##_trcinfo[] = {                                                        \
20930:         { name, _JS_TN_INIT_HELPER_n tn0 }                                                        \
20930:     };
20930: 
20930: #define JS_DEFINE_TRCINFO_2(name, tn0, tn1)                                                       \
20930:     _JS_DEFINE_CALLINFO_n tn0                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn1                                                                     \
20930:     JSTraceableNative name##_trcinfo[] = {                                                        \
20930:         { name, _JS_TN_INIT_HELPER_n tn0 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn1 }                                                        \
20930:     };
20930: 
20930: #define JS_DEFINE_TRCINFO_3(name, tn0, tn1, tn2)                                                  \
20930:     _JS_DEFINE_CALLINFO_n tn0                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn1                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn2                                                                     \
20930:     JSTraceableNative name##_trcinfo[] = {                                                        \
20930:         { name, _JS_TN_INIT_HELPER_n tn0 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn1 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn2 }                                                        \
20930:     };
20930: 
20930: #define JS_DEFINE_TRCINFO_4(name, tn0, tn1, tn2, tn3)                                             \
20930:     _JS_DEFINE_CALLINFO_n tn0                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn1                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn2                                                                     \
20930:     _JS_DEFINE_CALLINFO_n tn3                                                                     \
20930:     JSTraceableNative name##_trcinfo[] = {                                                        \
20930:         { name, _JS_TN_INIT_HELPER_n tn0 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn1 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn2 | JSTN_MORE },                                           \
20930:         { name, _JS_TN_INIT_HELPER_n tn3 }                                                        \
20930:     };
20930: 
20930: #define _JS_DEFINE_CALLINFO_n(n, args)  JS_DEFINE_CALLINFO_##n args
20930: 
21803: jsdouble FASTCALL
21803: js_StringToNumber(JSContext* cx, JSString* str);
21803: 
21803: jsdouble FASTCALL
21803: js_BooleanOrUndefinedToNumber(JSContext* cx, int32 unboxed);
21803: 
20408: #else
20408: 
20915: #define JS_DEFINE_CALLINFO_1(linkage, rt, op, at0, cse, fold)
20915: #define JS_DEFINE_CALLINFO_2(linkage, rt, op, at0, at1, cse, fold)
20915: #define JS_DEFINE_CALLINFO_3(linkage, rt, op, at0, at1, at2, cse, fold)
20915: #define JS_DEFINE_CALLINFO_4(linkage, rt, op, at0, at1, at2, at3, cse, fold)
20915: #define JS_DEFINE_CALLINFO_5(linkage, rt, op, at0, at1, at2, at3, at4, cse, fold)
20408: #define JS_DECLARE_CALLINFO(name)
20930: #define JS_DEFINE_TRCINFO_1(name, tn0)
20930: #define JS_DEFINE_TRCINFO_2(name, tn0, tn1)
20930: #define JS_DEFINE_TRCINFO_3(name, tn0, tn1, tn2)
20930: #define JS_DEFINE_TRCINFO_4(name, tn0, tn1, tn2, tn3)
20408: 
20408: #endif /* !JS_TRACER */
20408: 
20408: /* Defined in jsarray.cpp */
20915: JS_DECLARE_CALLINFO(js_Array_dense_setelem)
20915: JS_DECLARE_CALLINFO(js_FastNewArray)
22626: JS_DECLARE_CALLINFO(js_NewUninitializedArray)
22626: JS_DECLARE_CALLINFO(js_FastNewArrayWithLength)
20915: JS_DECLARE_CALLINFO(js_Array_1str)
20408: 
20408: /* Defined in jsdate.cpp */
20915: JS_DECLARE_CALLINFO(js_FastNewDate)
20408: 
20408: /* Defined in jsnum.cpp */
20915: JS_DECLARE_CALLINFO(js_NumberToString)
20408: 
20408: /* Defined in jsstr.cpp */
20915: JS_DECLARE_CALLINFO(js_ConcatStrings)
20915: JS_DECLARE_CALLINFO(js_String_getelem)
20915: JS_DECLARE_CALLINFO(js_String_p_charCodeAt)
20915: JS_DECLARE_CALLINFO(js_EqualStrings)
20915: JS_DECLARE_CALLINFO(js_CompareStrings)
20408: 
20408: /* Defined in jsbuiltins.cpp */
20915: #define BUILTIN1(linkage, rt, op, at0,                     cse, fold)  JS_DECLARE_CALLINFO(op)
20915: #define BUILTIN2(linkage, rt, op, at0, at1,                cse, fold)  JS_DECLARE_CALLINFO(op)
20915: #define BUILTIN3(linkage, rt, op, at0, at1, at2,           cse, fold)  JS_DECLARE_CALLINFO(op)
20915: #define BUILTIN4(linkage, rt, op, at0, at1, at2, at3,      cse, fold)  JS_DECLARE_CALLINFO(op)
20915: #define BUILTIN5(linkage, rt, op, at0, at1, at2, at3, at4, cse, fold)  JS_DECLARE_CALLINFO(op)
20408: #include "builtins.tbl"
20408: #undef BUILTIN
20408: #undef BUILTIN1
20408: #undef BUILTIN2
20408: #undef BUILTIN3
20408: #undef BUILTIN4
20408: #undef BUILTIN5
20408: 
20408: #endif /* jsbuiltins_h___ */
