 85955: /* Any copyright is dedicated to the Public Domain.
 85955:    http://creativecommons.org/publicdomain/zero/1.0/ */
 85955: "use strict";
 85955: 
100193: let tiltOpened = false;
100193: 
 85955: function test() {
 85955:   if (!isTiltEnabled()) {
 85955:     info("Skipping destruction test because Tilt isn't enabled.");
 85955:     return;
 85955:   }
 85955:   if (!isWebGLSupported()) {
 85955:     info("Skipping destruction test because WebGL isn't supported.");
 85955:     return;
 85955:   }
 85955: 
 85955:   waitForExplicitFinish();
 85955: 
 85955:   createTab(function() {
 85955:     createTilt({
 85955:       onTiltOpen: function()
 85955:       {
100193:         tiltOpened = true;
100193: 
100193:         Services.obs.addObserver(finalize, DESTROYED, false);
 85955:         EventUtils.sendKey("ESCAPE");
 85955:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 85955:     });
 85955:   });
 85955: }
 85955: 
100193: function finalize() {
 85955:   let id = TiltUtils.getWindowId(gBrowser.selectedBrowser.contentWindow);
 85955: 
 85955:   is(Tilt.visualizers[id], null,
 85955:     "The current instance of the visualizer wasn't destroyed properly.");
 85955: 
 88555:   ok(InspectorUI.highlighter && InspectorUI.breadcrumbs,
 88555:     "The Inspector should not close while Tilt is opened.");
 88555: 
100193:   cleanup();
100193: }
100193: 
100193: function cleanup() {
100193:   if (tiltOpened) { Services.obs.removeObserver(finalize, DESTROYED); }
 85955:   gBrowser.removeCurrentTab();
 85955:   finish();
 85955: }
