43264: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
43264:  * vim: set ts=4 sw=4 et tw=99:
43264:  *
43264:  * ***** BEGIN LICENSE BLOCK *****
43264:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43264:  *
43264:  * The contents of this file are subject to the Mozilla Public License Version
43264:  * 1.1 (the "License"); you may not use this file except in compliance with
43264:  * the License. You may obtain a copy of the License at
43264:  * http://www.mozilla.org/MPL/
43264:  *
43264:  * Software distributed under the License is distributed on an "AS IS" basis,
43264:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43264:  * for the specific language governing rights and limitations under the
43264:  * License.
43264:  *
43264:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
43264:  * May 28, 2008.
43264:  *
43264:  * The Initial Developer of the Original Code is
43264:  *   Mozilla Foundation
43264:  * Portions created by the Initial Developer are Copyright (C) 2010
43264:  * the Initial Developer. All Rights Reserved.
43264:  *
43264:  * Contributor(s):
43264:  *   Andreas Gal <gal@mozilla.com>
43264:  *
43264:  * Alternatively, the contents of this file may be used under the terms of
43264:  * either of the GNU General Public License Version 2 or later (the "GPL"),
43264:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43264:  * in which case the provisions of the GPL or the LGPL are applicable instead
43264:  * of those above. If you wish to allow use of your version of this file only
43264:  * under the terms of either the GPL or the LGPL, and not to allow others to
43264:  * use your version of this file under the terms of the MPL, indicate your
43264:  * decision by deleting the provisions above and replace them with the notice
43264:  * and other provisions required by the GPL or the LGPL. If you do not delete
43264:  * the provisions above, a recipient may use your version of this file under
43264:  * the terms of any one of the MPL, the GPL or the LGPL.
43264:  *
43264:  * ***** END LICENSE BLOCK ***** */
43264: 
43264: #include "jsapi.h"
43264: #include "jscntxt.h"
43264: #include "jsiter.h"
43264: #include "jsnum.h"
47518: #include "jsregexp.h"
43264: #include "jswrapper.h"
43264: 
43264: #include "jsobjinlines.h"
43264: 
43264: using namespace js;
43264: 
47516: static int sWrapperFamily = 0;
47516: 
47516: bool
47516: JSObject::isWrapper() const
47516: {
47516:     return isProxy() && getProxyHandler()->family() == &sWrapperFamily;
47516: }
47516: 
47516: JSObject *
47574: JSObject::unwrap(uintN *flagsp)
47516: {
47516:     JSObject *wrapped = this;
47574:     uintN flags = 0;
47574:     if (wrapped->isWrapper()) {
47574:         flags |= static_cast<JSWrapper *>(wrapped->getProxyHandler())->flags();
53076:         wrapped = wrapped->getProxyPrivate().toObjectOrNull();
47574:     }
47574:     if (flagsp)
47574:         *flagsp = flags;
47516:     return wrapped;
47516: }
47516: 
47574: JSWrapper::JSWrapper(uintN flags) : JSProxyHandler(&sWrapperFamily), mFlags(flags)
43264: {
43264: }
43264: 
43264: JSWrapper::~JSWrapper()
43264: {
43264: }
43264: 
47574: #define CHECKED(op, set)                                                     \
47574:     JS_BEGIN_MACRO                                                           \
47574:         if (!enter(cx, wrapper, id, set))                                    \
47574:             return false;                                                    \
47574:         bool ok = (op);                                                      \
47574:         leave(cx, wrapper);                                                  \
47574:         return ok;                                                           \
47574:     JS_END_MACRO
47574: 
47574: #define SET(action) CHECKED(action, true)
47574: #define GET(action) CHECKED(action, false)
47574: 
47565: bool
47574: JSWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
52795:                                  PropertyDescriptor *desc)
47565: {
53064:     GET(JS_GetPropertyDescriptorById(cx, wrappedObject(wrapper), id, JSRESOLVE_QUALIFIED,
53064:                                      Jsvalify(desc)));
47565: }
47562: 
47574: static bool
47574: GetOwnPropertyDescriptor(JSContext *cx, JSObject *obj, jsid id, uintN flags, JSPropertyDescriptor *desc)
43264: {
47574:     if (!JS_GetPropertyDescriptorById(cx, obj, id, flags, desc))
43264:         return false;
47574:     if (desc->obj != obj)
47574:         desc->obj = NULL;
43264:     return true;
43264: }
43264: 
43264: bool
47574: JSWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
53063:                                     PropertyDescriptor *desc)
43264: {
53064:     GET(GetOwnPropertyDescriptor(cx, wrappedObject(wrapper), id, JSRESOLVE_QUALIFIED,
53064:                                  Jsvalify(desc)));
43264: }
43264: 
43264: bool
47574: JSWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
53063:                           PropertyDescriptor *desc)
47574: {
53064:     SET(JS_DefinePropertyById(cx, wrappedObject(wrapper), id, Jsvalify(desc->value),
53064:                               Jsvalify(desc->getter), Jsvalify(desc->setter), desc->attrs));
47574: }
47574: 
47574: bool
53063: JSWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
53064:     jsid id = JSID_VOID;
47574:     GET(GetPropertyNames(cx, wrappedObject(wrapper), JSITER_OWNONLY | JSITER_HIDDEN, props));
47574: }
47574: 
47574: static bool
53063: ValueToBoolean(Value *vp, bool *bp)
47574: {
47574:     *bp = js_ValueToBoolean(*vp);
47574:     return true;
47574: }
47574: 
47574: bool
47574: JSWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47574: {
53064:     Value v;
53064:     SET(JS_DeletePropertyById2(cx, wrappedObject(wrapper), id, Jsvalify(&v)) &&
47574:         ValueToBoolean(&v, bp));
47574: }
47574: 
47574: bool
53063: JSWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
53064:     static jsid id = JSID_VOID;
47574:     GET(GetPropertyNames(cx, wrappedObject(wrapper), 0, props));
47574: }
47574: 
47574: bool
53064: JSWrapper::fix(JSContext *cx, JSObject *wrapper, Value *vp)
43264: {
52795:     vp->setUndefined();
43264:     return true;
43264: }
43264: 
47574: static bool
47574: Cond(JSBool b, bool *bp)
43264: {
47574:     *bp = !!b;
43264:     return true;
43264: }
43264: 
43264: bool
47574: JSWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47574: {
47574:     JSBool found;
47574:     GET(JS_HasPropertyById(cx, wrappedObject(wrapper), id, &found) &&
47574:         Cond(found, bp));
47574: }
47574: 
47574: bool
47574: JSWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47562: {
52795:     PropertyDescriptor desc;
47574:     JSObject *wobj = wrappedObject(wrapper);
53064:     GET(JS_GetPropertyDescriptorById(cx, wobj, id, JSRESOLVE_QUALIFIED, Jsvalify(&desc)) &&
47574:         Cond(desc.obj == wobj, bp));
47574: }
47574: 
47574: bool
53063: JSWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47574: {
53064:     GET(JS_GetPropertyById(cx, wrappedObject(wrapper), id, Jsvalify(vp)));
47574: }
47574: 
47574: bool
53063: JSWrapper::set(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47574: {
53064:     SET(JS_SetPropertyById(cx, wrappedObject(wrapper), id, Jsvalify(vp)));
47574: }
47574: 
47574: bool
53063: JSWrapper::enumerateOwn(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
53064:     const jsid id = JSID_VOID;
47574:     GET(GetPropertyNames(cx, wrappedObject(wrapper), JSITER_OWNONLY, props));
47574: }
47574: 
47574: bool
53063: JSWrapper::iterate(JSContext *cx, JSObject *wrapper, uintN flags, Value *vp)
47574: {
53064:     const jsid id = JSID_VOID;
47574:     GET(GetIterator(cx, wrappedObject(wrapper), flags, vp));
47574: }
47574: 
47574: bool
53064: JSWrapper::call(JSContext *cx, JSObject *wrapper, uintN argc, Value *vp)
47574: {
53064:     const jsid id = JSID_VOID;
47574:     GET(JSProxyHandler::call(cx, wrapper, argc, vp));
47574: }
47574: 
47574: bool
53064: JSWrapper::construct(JSContext *cx, JSObject *wrapper, uintN argc, Value *argv, Value *rval)
47574: {
53064:     const jsid id = JSID_VOID;
47588:     GET(JSProxyHandler::construct(cx, wrapper, argc, argv, rval));
47574: }
47574: 
47574: JSString *
47574: JSWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
47574: {
47574:     JSString *str;
53064:     if (!enter(cx, wrapper, JSID_VOID, false))
47574:         return NULL;
47574:     str = JSProxyHandler::obj_toString(cx, wrapper);
47574:     leave(cx, wrapper);
47574:     return str;
47574: }
47574: 
47574: JSString *
47574: JSWrapper::fun_toString(JSContext *cx, JSObject *wrapper, uintN indent)
47574: {
47574:     JSString *str;
53064:     if (!enter(cx, wrapper, JSID_VOID, false))
47574:         return NULL;
47574:     str = JSProxyHandler::fun_toString(cx, wrapper, indent);
47574:     leave(cx, wrapper);
47574:     return str;
47574: }
47574: 
47574: void
47574: JSWrapper::trace(JSTracer *trc, JSObject *wrapper)
47574: {
47574:     JS_CALL_OBJECT_TRACER(trc, wrappedObject(wrapper), "wrappedObject");
47574: }
47574: 
47574: bool
53064: JSWrapper::enter(JSContext *cx, JSObject *wrapper, jsid id, bool set)
47574: {
47565:     return true;
47562: }
47562: 
47574: void
47574: JSWrapper::leave(JSContext *cx, JSObject *wrapper)
43264: {
47562: }
47562: 
47574: JSWrapper JSWrapper::singleton(0);
47498: 
47498: JSObject *
47498: JSWrapper::New(JSContext *cx, JSObject *obj, JSObject *proto, JSObject *parent,
47574:                JSWrapper *handler)
47498: {
53076:     return NewProxyObject(cx, handler, ObjectValue(*obj), proto, parent,
47498:                           obj->isCallable() ? obj : NULL, NULL);
47498: }
47498: 
47516: /* Compartments. */
47498: 
47516: namespace js {
47498: 
47516: extern JSObject *
47574: TransparentObjectWrapper(JSContext *cx, JSObject *obj, JSObject *wrappedProto, uintN flags)
47498: {
47574:     JS_ASSERT(!obj->isWrapper());
47516:     return JSWrapper::New(cx, obj, wrappedProto, NULL, &JSCrossCompartmentWrapper::singleton);
47498: }
47498: 
47498: }
47498: 
47516: JSCompartment::JSCompartment(JSRuntime *rt)
47516:   : rt(rt), principals(NULL), marked(false)
47498: {
47498: }
47498: 
47498: JSCompartment::~JSCompartment()
47498: {
47498: }
47498: 
47498: bool
47498: JSCompartment::init()
47498: {
47498:     return crossCompartmentWrappers.init();
47498: }
47498: 
47498: bool
53059: JSCompartment::wrap(JSContext *cx, Value *vp)
47498: {
47498:     JS_ASSERT(cx->compartment == this);
47498: 
47574:     uintN flags = 0;
47574: 
47498:     JS_CHECK_RECURSION(cx, return false);
47498: 
47498:     /* Only GC things have to be wrapped or copied. */
53059:     if (!vp->isMarkable())
47498:         return true;
47498: 
47498:     /* Static strings do not have to be wrapped. */
53076:     if (vp->isString() && JSString::isStatic(vp->toString()))
47498:         return true;
47498: 
47498:     /* Unwrap incoming objects. */
53059:     if (vp->isObject()) {
53076:         JSObject *obj = vp->toObject().unwrap(&flags);
53059:         vp->setObject(*obj);
47498:         /* If the wrapped object is already in this compartment, we are done. */
47498:         if (obj->getCompartment(cx) == this)
47498:             return true;
47498:     }
47498: 
47498:     /* If we already have a wrapper for this value, use it. */
47498:     if (WrapperMap::Ptr p = crossCompartmentWrappers.lookup(*vp)) {
47498:         *vp = p->value;
47498:         return true;
47498:     }
47498: 
53059:     if (vp->isString()) {
53059:         Value orig = *vp;
53076:         JSString *str = vp->toString();
47498:         JSString *wrapped = js_NewStringCopyN(cx, str->chars(), str->length());
47498:         if (!wrapped)
47498:             return false;
53059:         vp->setString(wrapped);
53059:         return crossCompartmentWrappers.put(orig, *vp);
47498:     }
47498: 
53076:     JSObject *obj = &vp->toObject();
47498: 
47498:     /*
47498:      * Recurse to wrap the prototype. Long prototype chains will run out of
47498:      * stack, causing an error in CHECK_RECURSE.
47498:      *
47498:      * Wrapping the proto before creating the new wrapper and adding it to the
47498:      * cache helps avoid leaving a bad entry in the cache on OOM. But note that
47498:      * if we wrapped both proto and parent, we would get infinite recursion
47498:      * here (since Object.prototype->parent->proto leads to Object.prototype
47498:      * itself).
47498:      */
47574:     JSObject *proto = obj->getProto();
47574:     if (!wrap(cx, &proto))
47498:         return false;
47516: 
47574:     /*
47574:      * We hand in the original wrapped object into the wrap hook to allow
47574:      * the wrap hook to reason over what wrappers are currently applied
47574:      * to the object.
47574:      */
47574:     JSObject *wrapper = cx->runtime->wrapObjectCallback(cx, obj, proto, flags);
47498:     if (!wrapper)
47498:         return false;
47574:     wrapper->setProto(proto);
53059:     vp->setObject(*wrapper);
47498:     if (!crossCompartmentWrappers.put(wrapper->getProxyPrivate(), *vp))
47498:         return false;
47498: 
47498:     /*
47498:      * Wrappers should really be parented to the wrapped parent of the wrapped
47498:      * object, but in that case a wrapped global object would have a NULL
47498:      * parent without being a proper global object (JSCLASS_IS_GLOBAL). Instead,
47498:      * we parent all wrappers to the global object in their home compartment.
47498:      * This loses us some transparency, and is generally very cheesy.
47498:      */
47498:     JSObject *global = cx->fp ? cx->fp->scopeChain->getGlobal() : cx->globalObject;
47498:     wrapper->setParent(global);
47498:     return true;
47498: }
47498: 
47498: bool
47498: JSCompartment::wrap(JSContext *cx, JSString **strp)
47498: {
53076:     AutoValueRooter tvr(cx, StringValue(*strp));
47498:     if (!wrap(cx, tvr.addr()))
47498:         return false;
53076:     *strp = tvr.value().toString();
47498:     return true;
47498: }
47498: 
47498: bool
47498: JSCompartment::wrap(JSContext *cx, JSObject **objp)
47498: {
47498:     if (!*objp)
47498:         return true;
53076:     AutoValueRooter tvr(cx, ObjectValue(**objp));
47498:     if (!wrap(cx, tvr.addr()))
47498:         return false;
53076:     *objp = &tvr.value().toObject();
47498:     return true;
47498: }
47498: 
47498: bool
47498: JSCompartment::wrapId(JSContext *cx, jsid *idp) {
47498:     if (JSID_IS_INT(*idp))
47498:         return true;
53059:     AutoValueRooter tvr(cx, IdToValue(*idp));
47498:     if (!wrap(cx, tvr.addr()))
47498:         return false;
53059:     return ValueToId(cx, tvr.value(), idp);
47498: }
47498: 
47498: bool
53059: JSCompartment::wrap(JSContext *cx, PropertyOp *propp)
47524: {
47524:     union {
53059:         PropertyOp op;
47524:         jsval v;
47524:     } u;
47524:     u.op = *propp;
53059:     if (!wrap(cx, &Valueify(u.v)))
47524:         return false;
47524:     *propp = u.op;
47524:     return true;
47524: }
47524: 
47524: bool
53059: JSCompartment::wrap(JSContext *cx, PropertyDescriptor *desc) {
47498:     return wrap(cx, &desc->obj) &&
47524:            (!(desc->attrs & JSPROP_GETTER) || wrap(cx, &desc->getter)) &&
47524:            (!(desc->attrs & JSPROP_SETTER) || wrap(cx, &desc->setter)) &&
47498:            wrap(cx, &desc->value);
47498: }
47498: 
47498: bool
53059: JSCompartment::wrap(JSContext *cx, AutoIdVector &props) {
47498:     jsid *vector = props.begin();
47498:     jsint length = props.length();
47498:     for (size_t n = 0; n < size_t(length); ++n) {
53059:         if (!wrapId(cx, &vector[n]))
47498:             return false;
47498:     }
47498:     return true;
47498: }
47498: 
47498: bool
47498: JSCompartment::wrapException(JSContext *cx) {
47498:     JS_ASSERT(cx->compartment == this);
47498: 
47498:     if (cx->throwing) {
47498:         AutoValueRooter tvr(cx, cx->exception);
47498:         cx->throwing = false;
53076:         cx->exception.setNull();
47498:         if (wrap(cx, tvr.addr())) {
47498:             cx->throwing = true;
47498:             cx->exception = tvr.value();
47498:         }
47498:         return false;
47498:     }
47498:     return true;
43264: }
43264: 
43264: void
47498: JSCompartment::sweep(JSContext *cx)
43264: {
47498:     /* Remove dead wrappers from the table. */
47498:     for (WrapperMap::Enum e(crossCompartmentWrappers); !e.empty(); e.popFront()) {
53059:         if (js_IsAboutToBeFinalized(e.front().value.asGCThing()))
47498:             e.removeFront();
47498:     }
43264: }
43264: 
47498: static bool
47498: SetupFakeFrame(JSContext *cx, ExecuteFrameGuard &frame, JSFrameRegs &regs, JSObject *obj)
43264: {
47498:     const uintN vplen = 2;
47498:     const uintN nfixed = 0;
47498:     if (!cx->stack().getExecuteFrame(cx, js_GetTopStackFrame(cx), vplen, nfixed, frame))
47498:         return false;
47498: 
53059:     Value *vp = frame.getvp();
53076:     vp[0].setUndefined();
53076:     vp[1].setNull();  // satisfy LeaveTree assert
47498: 
47498:     JSStackFrame *fp = frame.getFrame();
47498:     PodZero(fp);  // fp->fun and fp->script are both NULL
47498:     fp->argv = vp + 2;
47498:     fp->scopeChain = obj->getGlobal();
47498: 
47498:     regs.pc = NULL;
47498:     regs.sp = fp->slots();
47498: 
47498:     cx->stack().pushExecuteFrame(cx, frame, regs, NULL);
47498:     return true;
43264: }
43264: 
47498: AutoCompartment::AutoCompartment(JSContext *cx, JSObject *target)
47498:     : context(cx),
47498:       origin(cx->compartment),
47498:       target(target),
47518:       destination(target->getCompartment(cx)),
47518:       statics(cx),
47518:       input(cx)
47498: {
47498:     JS_ASSERT(origin != destination);  // necessary for entered() implementation
47498: }
43264: 
47498: AutoCompartment::~AutoCompartment()
43264: {
47498:     if (entered())
47498:         leave();
47498: }
47498: 
47498: bool
47498: AutoCompartment::enter()
47498: {
47498:     JS_ASSERT(!entered());
47498:     context->compartment = destination;
47498:     frame.construct();
47498:     bool ok = SetupFakeFrame(context, frame.ref(), regs, target);
47498:     if (!ok) {
47498:         frame.destroy();
47498:         context->compartment = origin;
47498:     }
47518:     js_SaveAndClearRegExpStatics(context, &statics, &input);
47498:     return ok;
47498: }
47498: 
47498: void
47498: AutoCompartment::leave()
47498: {
47498:     JS_ASSERT(entered());
47518:     js_RestoreRegExpStatics(context, &statics, &input);
47498:     frame.destroy();
47498:     context->compartment = origin;
47498:     origin->wrapException(context);
47498: }
47498: 
47498: /* Cross compartment wrappers. */
47498: 
47574: JSCrossCompartmentWrapper::JSCrossCompartmentWrapper(uintN flags) : JSWrapper(flags)
47498: {
47498: }
47498: 
47498: JSCrossCompartmentWrapper::~JSCrossCompartmentWrapper()
47498: {
47498: }
47498: 
47574: bool
47574: JSCrossCompartmentWrapper::isCrossCompartmentWrapper(JSObject *obj)
47574: {
47583:     return obj->isProxy() && obj->getProxyHandler() == &JSCrossCompartmentWrapper::singleton;
47574: }
47574: 
47574: #define PIERCE(cx, wrapper, mode, pre, op, post)            \
47516:     JS_BEGIN_MACRO                                          \
47574:         AutoCompartment call(cx, wrappedObject(wrapper));   \
47574:         if (!call.enter())                                  \
47516:             return false;                                   \
47574:         bool ok = (pre) && (op);                            \
47516:         call.leave();                                       \
47574:         return ok && (post);                                \
47516:     JS_END_MACRO
47516: 
47516: #define NOTHING (true)
47516: 
47498: bool
53063: JSCrossCompartmentWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id, PropertyDescriptor *desc)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::getPropertyDescriptor(cx, wrapper, id, desc),
47498:            call.origin->wrap(cx, desc));
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id, PropertyDescriptor *desc)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::getOwnPropertyDescriptor(cx, wrapper, id, desc),
47498:            call.origin->wrap(cx, desc));
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id, PropertyDescriptor *desc)
47498: {
53059:     AutoPropertyDescriptorRooter desc2(cx, desc);
47574:     PIERCE(cx, wrapper, SET,
47498:            call.destination->wrapId(cx, &id) && call.destination->wrap(cx, &desc2),
47574:            JSWrapper::defineProperty(cx, wrapper, id, &desc2),
47498:            NOTHING);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::getOwnPropertyNames(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, SET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::delete_(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::enumerate(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::has(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::hasOwn(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrap(cx, &receiver) && call.destination->wrapId(cx, &id),
47574:            JSWrapper::get(cx, wrapper, receiver, id, vp),
47498:            call.origin->wrap(cx, vp));
47498: }
47498: 
47498: bool
53064: JSCrossCompartmentWrapper::set(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47498: {
47498:     AutoValueRooter tvr(cx, *vp);
47574:     PIERCE(cx, wrapper, SET,
47498:            call.destination->wrap(cx, &receiver) && call.destination->wrapId(cx, &id) && call.destination->wrap(cx, tvr.addr()),
47574:            JSWrapper::set(cx, wrapper, receiver, id, tvr.addr()),
47498:            NOTHING);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::enumerateOwn(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::enumerateOwn(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47525: }
47525: 
47525: /*
47525:  * We can reify non-escaping iterator objects instead of having to wrap them. This
47525:  * allows fast iteration over objects across a compartment boundary.
47525:  */
47525: static bool
53059: CanReify(Value *vp)
47525: {
53059:     JSObject *obj;
53059:     return vp->isObject() &&
53076:            (obj = &vp->toObject())->getClass() == &js_IteratorClass.base &&
53059:            (obj->getNativeIterator()->flags & JSITER_ENUMERATE);
47525: }
47525: 
47525: static bool
53059: Reify(JSContext *cx, JSCompartment *origin, Value *vp)
47525: {
53076:     JSObject *iterObj = &vp->toObject();
47525:     NativeIterator *ni = iterObj->getNativeIterator();
53059: 
53059:     /* Wrap the iteratee. */
53059:     JSObject *obj = ni->obj;
53059:     if (!origin->wrap(cx, &obj))
53059:         return false;
53059: 
53099:     /*
53099:      * Wrap the elements in the iterator's snapshot.
53099:      * N.B. the order of closing/creating iterators is important due to the
53099:      * implicit cx->enumerators state.
53099:      */
53099: 
53059:     if (ni->isKeyIter()) {
53059:         size_t length = ni->numKeys();
53059:         AutoIdVector keys(cx);
47525:         if (length > 0) {
53059:             if (!keys.resize(length))
53059:                 return false;
53059:             for (size_t i = 0; i < length; ++i) {
53059:                 keys[i] = ni->beginKey()[i];
53059:                 if (!origin->wrapId(cx, &keys[i]))
53059:                     return false;
53059:             }
47525:         }
47525: 
53099:         return js_CloseIterator(cx, iterObj) &&
53099:                VectorToKeyIterator(cx, obj, ni->flags, keys, vp);
53099:     }
53099: 
53059:     size_t length = ni->numValues();
53059:     AutoValueVector vals(cx);
53059:     if (length > 0) {
53059:         if (!vals.resize(length))
53059:             return false;
53059:         for (size_t i = 0; i < length; ++i) {
53059:             vals[i] = ni->beginValue()[i];
53059:             if (!origin->wrap(cx, &vals[i]))
53059:                 return false;
53059:         }
53059: 
53059:     }
53059: 
53099:     return js_CloseIterator(cx, iterObj) &&
53099:            VectorToValueIterator(cx, obj, ni->flags, vals, vp);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::iterate(JSContext *cx, JSObject *wrapper, uintN flags, Value *vp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::iterate(cx, wrapper, flags, vp),
47525:            CanReify(vp) ? Reify(cx, call.origin, vp) : call.origin->wrap(cx, vp));
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::call(JSContext *cx, JSObject *wrapper, uintN argc, Value *vp)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
47498:         return false;
47498: 
53076:     vp[0] = ObjectValue(*call.target);
47498:     if (!call.destination->wrap(cx, &vp[1]))
47498:         return false;
53059:     Value *argv = JS_ARGV(cx, vp);
47498:     for (size_t n = 0; n < argc; ++n) {
47498:         if (!call.destination->wrap(cx, &argv[n]))
47498:             return false;
47498:     }
53059:     Value *fakevp = call.getvp();
47498:     fakevp[0] = vp[0];
47498:     fakevp[1] = vp[1];
47574:     if (!JSWrapper::call(cx, wrapper, argc, vp))
47498:         return false;
47498: 
47498:     call.leave();
47498:     return call.origin->wrap(cx, vp);
47498: }
47498: 
47498: bool
53063: JSCrossCompartmentWrapper::construct(JSContext *cx, JSObject *wrapper, uintN argc, Value *argv,
53063:                                      Value *rval)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
47498:         return false;
47498: 
47498:     for (size_t n = 0; n < argc; ++n) {
47498:         if (!call.destination->wrap(cx, &argv[n]))
47498:             return false;
47498:     }
53059:     Value *vp = call.getvp();
53076:     vp[0] = ObjectValue(*call.target);
47588:     if (!JSWrapper::construct(cx, wrapper, argc, argv, rval))
47498:         return false;
47498: 
47498:     call.leave();
47498:     return call.origin->wrap(cx, rval) &&
47498:            call.origin->wrapException(cx);
47498: }
47498: 
47498: JSString *
47574: JSCrossCompartmentWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
43264:         return NULL;
47498: 
47574:     JSString *str = JSWrapper::obj_toString(cx, wrapper);
47498:     if (!str)
43264:         return NULL;
47498: 
47498:     call.leave();
47498:     if (!call.origin->wrap(cx, &str))
47498:         return NULL;
47498:     return str;
43264: }
47498: 
47498: JSString *
47574: JSCrossCompartmentWrapper::fun_toString(JSContext *cx, JSObject *wrapper, uintN indent)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
43264:         return NULL;
47498: 
47574:     JSString *str = JSWrapper::fun_toString(cx, wrapper, indent);
47498:     if (!str)
47498:         return NULL;
47498: 
47498:     call.leave();
47498:     if (!call.origin->wrap(cx, &str))
47498:         return NULL;
47498:     return str;
43264: }
47498: 
47574: JSCrossCompartmentWrapper JSCrossCompartmentWrapper::singleton(0);
