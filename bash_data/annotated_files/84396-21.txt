43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com> (original author)
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttpConnectionInfo_h__
43113: #define nsHttpConnectionInfo_h__
43113: 
43113: #include "nsHttp.h"
43113: #include "nsProxyInfo.h"
43113: #include "nsCOMPtr.h"
43113: #include "nsDependentString.h"
43113: #include "nsString.h"
43113: #include "plstr.h"
43113: #include "nsCRT.h"
43113: 
43113: //-----------------------------------------------------------------------------
43113: // nsHttpConnectionInfo - holds the properties of a connection
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsHttpConnectionInfo
43113: {
43113: public:
43113:     nsHttpConnectionInfo(const nsACString &host, PRInt32 port,
43113:                          nsProxyInfo* proxyInfo,
79445:                          bool usingSSL=false)
43113:         : mRef(0)
43113:         , mProxyInfo(proxyInfo)
43113:         , mUsingSSL(usingSSL)
43113:     {
43113:         LOG(("Creating nsHttpConnectionInfo @%x\n", this));
43113: 
43113:         mUsingHttpProxy = (proxyInfo && !nsCRT::strcmp(proxyInfo->Type(), "http"));
43113: 
43113:         SetOriginServer(host, port);
43113:     }
43113:     
43113:    ~nsHttpConnectionInfo()
43113:     {
43113:         LOG(("Destroying nsHttpConnectionInfo @%x\n", this));
43113:     }
43113: 
43113:     nsrefcnt AddRef()
43113:     {
64101:         nsrefcnt n = NS_AtomicIncrementRefcnt(mRef);
43113:         NS_LOG_ADDREF(this, n, "nsHttpConnectionInfo", sizeof(*this));
43113:         return n;
43113:     }
43113: 
43113:     nsrefcnt Release()
43113:     {
64101:         nsrefcnt n = NS_AtomicDecrementRefcnt(mRef);
43113:         NS_LOG_RELEASE(this, n, "nsHttpConnectionInfo");
43113:         if (n == 0)
43113:             delete this;
43113:         return n;
43113:     }
43113: 
43113:     const nsAFlatCString &HashKey() const { return mHashKey; }
43113: 
43113:     void SetOriginServer(const nsACString &host, PRInt32 port);
43113: 
43113:     void SetOriginServer(const char *host, PRInt32 port)
43113:     {
43113:         SetOriginServer(nsDependentCString(host), port);
43113:     }
43113:     
43113:     nsHttpConnectionInfo* Clone() const;
43113: 
43113:     const char *ProxyHost() const { return mProxyInfo ? mProxyInfo->Host().get() : nsnull; }
43113:     PRInt32     ProxyPort() const { return mProxyInfo ? mProxyInfo->Port() : -1; }
43113:     const char *ProxyType() const { return mProxyInfo ? mProxyInfo->Type() : nsnull; }
43113: 
43113:     // Compare this connection info to another...
43113:     // Two connections are 'equal' if they end up talking the same
43113:     // protocol to the same server. This is needed to properly manage
43113:     // persistent connections to proxies
43113:     // Note that we don't care about transparent proxies - 
43113:     // it doesn't matter if we're talking via socks or not, since
43113:     // a request will end up at the same host.
79445:     bool Equals(const nsHttpConnectionInfo *info)
43113:     {
43113:         return mHashKey.Equals(info->HashKey());
43113:     }
43113: 
43113:     const char   *Host() const           { return mHost.get(); }
43113:     PRInt32       Port() const           { return mPort; }
43113:     nsProxyInfo  *ProxyInfo()            { return mProxyInfo; }
79445:     bool          UsingHttpProxy() const { return mUsingHttpProxy; }
79445:     bool          UsingSSL() const       { return mUsingSSL; }
43113:     PRInt32       DefaultPort() const    { return mUsingSSL ? NS_HTTPS_DEFAULT_PORT : NS_HTTP_DEFAULT_PORT; }
79445:     void          SetAnonymous(bool anon)         
43113:                                          { mHashKey.SetCharAt(anon ? 'A' : '.', 2); }
79445:     bool          ShouldForceConnectMethod();
43113: 
43113: private:
43113:     nsrefcnt               mRef;
43113:     nsCString              mHashKey;
43113:     nsCString              mHost;
43113:     PRInt32                mPort;
43113:     nsCOMPtr<nsProxyInfo>  mProxyInfo;
79445:     bool                   mUsingHttpProxy;
79445:     bool                   mUsingSSL;
43113: };
43113: 
43113: #endif // nsHttpConnectionInfo_h__
