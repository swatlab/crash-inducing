   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Author: Aaron Leventhal (aaronl@netscape.com)
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #ifndef _nsHTMLTableAccessible_H_
   1: #define _nsHTMLTableAccessible_H_
   1: 
   1: #include "nsBaseWidgetAccessible.h"
   1: #include "nsIAccessibleTable.h"
   1: 
 966: class nsHTMLTableCellAccessible : public nsHyperTextAccessibleWrap
   1: {
   1: public:
   1:   NS_DECL_ISUPPORTS_INHERITED
   1: 
   1:   nsHTMLTableCellAccessible(nsIDOMNode* aDomNode, nsIWeakReference* aShell);
   1:   NS_IMETHOD GetRole(PRUint32 *aResult); 
 262:   NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);
   1: };
   1: 
   1: class nsITableLayout;
   1: 
   1: // XXX For now debugging descriptions are always on via SHOW_LAYOUT_HEURISTIC
   1: // This will allow release trunk builds to be used by testers to refine the algorithm
   1: // Change to |#define SHOW_LAYOUT_HEURISTIC DEBUG| before final release
   1: #define SHOW_LAYOUT_HEURISTIC
   1: 
   1: class nsHTMLTableAccessible : public nsAccessibleWrap,
   1:                               public nsIAccessibleTable
   1: {
   1: public:
   1:   NS_DECL_ISUPPORTS_INHERITED
   1:   NS_DECL_NSIACCESSIBLETABLE
   1: 
   1:   nsHTMLTableAccessible(nsIDOMNode* aDomNode, nsIWeakReference* aShell);
   1:   NS_IMETHOD GetRole(PRUint32 *aResult); 
 262:   NS_IMETHOD GetState(PRUint32 *aState, PRUint32 *aExtraState);
   1:   NS_IMETHOD GetName(nsAString& aResult);
 401:   virtual nsresult GetAttributesInternal(nsIPersistentProperties *aAttributes);
   1:   NS_IMETHOD GetDescription(nsAString& aDescription);
3151:   NS_IMETHOD GetAccessibleRelated(PRUint32 aRelationType, nsIAccessible **aRelated);
   1: 
   1: protected:
1370: 
1370:   /**
1370:    * Selects or unselects row or column.
1370:    *
1370:    * @param aIndex - index of row or column to be selected
1370:    * @param aTarget - indicates what should be selected, either row or column
1370:    *                  (see nsISelectionPrivate)
1370:    * @param aDoSelect - indicates whether row or column should selected or
1370:    *                    unselected
1370:    */
1370:   nsresult SelectRowOrColumn(PRInt32 aIndex, PRUint32 aTarget, PRBool aDoSelect);
1370: 
1370:   /**
1370:    * Selects or unselects the cell.
1370:    *
1370:    * @param aSelection - the selection of document
1370:    * @param aDocument - the document that contains the cell
1370:    * @param aCellElement - the cell of table
1370:    * @param aDoSelect - indicates whether cell should be selected or unselected
1370:    */
1370:   nsresult SelectCell(nsISelection *aSelection, nsIDocument *aDocument,
1370:                       nsIDOMElement *aCellElement, PRBool aDoSelect);
1370: 
 140:   virtual void CacheChildren();
   1:   nsresult GetTableNode(nsIDOMNode **_retval);
   1:   nsresult GetTableLayout(nsITableLayout **aLayoutObject);
   1:   nsresult GetCellAt(PRInt32        aRowIndex,
   1:                      PRInt32        aColIndex,
   1:                      nsIDOMElement* &aCell);
 438:   PRBool HasDescendant(char *aTagName, PRBool aAllowEmpty = PR_TRUE);
   1: #ifdef SHOW_LAYOUT_HEURISTIC
   1:   nsAutoString mLayoutHeuristic;
   1: #endif
   1: };
   1: 
   1: class nsHTMLTableHeadAccessible : public nsHTMLTableAccessible
   1: {
   1: public:
   1:   NS_DECL_ISUPPORTS_INHERITED
   1: 
   1:   nsHTMLTableHeadAccessible(nsIDOMNode *aDomNode, nsIWeakReference *aShell);
   1: 
   1:   /* nsIAccessible */
   1:   NS_IMETHOD GetRole(PRUint32 *aResult);
   1: 
   1:   /* nsIAccessibleTable */
   1:   NS_IMETHOD GetCaption(nsIAccessible **aCaption);
   1:   NS_IMETHOD GetSummary(nsAString &aSummary);
   1:   NS_IMETHOD GetColumnHeader(nsIAccessibleTable **aColumnHeader);
   1:   NS_IMETHOD GetRows(PRInt32 *aRows);
   1: };
   1: 
3151: class nsHTMLCaptionAccessible : public nsHyperTextAccessibleWrap
3151: {
3151: public:
3151:   nsHTMLCaptionAccessible(nsIDOMNode *aDomNode, nsIWeakReference *aShell) :
3151:     nsHyperTextAccessibleWrap(aDomNode, aShell) { }
3151: 
3151:   // nsIAccessible
3151:   NS_IMETHOD GetRole(PRUint32 *aRole)
3151:     { *aRole = nsIAccessibleRole::ROLE_CAPTION; return NS_OK; }
3151:   NS_IMETHOD GetAccessibleRelated(PRUint32 aRelationType, nsIAccessible **aRelated);
3151: };
3151: 
   1: #endif  
