52826: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52826:  * vim: set ts=4 sw=4 et tw=99:
52826:  *
52826:  * ***** BEGIN LICENSE BLOCK *****
52826:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52826:  *
52826:  * The contents of this file are subject to the Mozilla Public License Version
52826:  * 1.1 (the "License"); you may not use this file except in compliance with
52826:  * the License. You may obtain a copy of the License at
52826:  * http://www.mozilla.org/MPL/
52826:  *
52826:  * Software distributed under the License is distributed on an "AS IS" basis,
52826:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52826:  * for the specific language governing rights and limitations under the
52826:  * License.
52826:  *
52826:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52826:  * May 28, 2008.
52826:  *
52826:  * The Initial Developer of the Original Code is
52826:  *   Brendan Eich <brendan@mozilla.org>
52826:  *
52826:  * Contributor(s):
52826:  *   David Anderson <danderson@mozilla.com>
52826:  *   David Mandelin <dmandelin@mozilla.com>
52826:  *
52826:  * Alternatively, the contents of this file may be used under the terms of
52826:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52826:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52826:  * in which case the provisions of the GPL or the LGPL are applicable instead
52826:  * of those above. If you wish to allow use of your version of this file only
52826:  * under the terms of either the GPL or the LGPL, and not to allow others to
52826:  * use your version of this file under the terms of the MPL, indicate your
52826:  * decision by deleting the provisions above and replace them with the notice
52826:  * and other provisions required by the GPL or the LGPL. If you do not delete
52826:  * the provisions above, a recipient may use your version of this file under
52826:  * the terms of any one of the MPL, the GPL or the LGPL.
52826:  *
52826:  * ***** END LICENSE BLOCK ***** */
52826: 
53119: #if !defined jsjaeger_mono_ic_h__ && defined JS_METHODJIT && defined JS_MONOIC
52826: #define jsjaeger_mono_ic_h__
52826: 
53301: #include "assembler/assembler/MacroAssembler.h"
52826: #include "assembler/assembler/CodeLocation.h"
52826: #include "methodjit/MethodJIT.h"
53301: #include "CodeGenIncludes.h"
52826: 
52826: namespace js {
52826: namespace mjit {
57717: 
57717: class FrameSize
57717: {
57717:     uint32 frameDepth_ : 16;
57717:     uint32 argc_;
57717:   public:
57717:     void initStatic(uint32 frameDepth, uint32 argc) {
57717:         JS_ASSERT(frameDepth > 0);
57717:         frameDepth_ = frameDepth;
57717:         argc_ = argc;
57717:     }
57717: 
57717:     void initDynamic() {
57717:         frameDepth_ = 0;
57717:         argc_ = -1;  /* quiet gcc */
57717:     }
57717: 
57717:     bool isStatic() const {
57717:         return frameDepth_ > 0;
57717:     }
57717: 
57717:     bool isDynamic() const {
57717:         return frameDepth_ == 0;
57717:     }
57717: 
57787:     uint32 staticLocalSlots() const {
57717:         JS_ASSERT(isStatic());
57717:         return frameDepth_;
57717:     }
57717: 
57717:     uint32 staticArgc() const {
57717:         JS_ASSERT(isStatic());
57717:         return argc_;
57717:     }
57717: 
57717:     uint32 getArgc(VMFrame &f) const {
57717:         return isStatic() ? staticArgc() : f.u.call.dynamicArgc;
57717:     }
57717: };
57717: 
52826: namespace ic {
52826: 
52826: struct MICInfo {
52826: #ifdef JS_CPU_X86
53269:     static const uint32 GET_DATA_OFFSET = 6;
53269:     static const uint32 GET_TYPE_OFFSET = 12;
53269: 
53451:     static const uint32 SET_TYPE_OFFSET = 6;
53451:     static const uint32 SET_DATA_CONST_TYPE_OFFSET = 16;
53451:     static const uint32 SET_DATA_TYPE_OFFSET = 12;
53451: #elif JS_CPU_X64 || JS_CPU_ARM
53451:     /* X64: No constants used, thanks to patchValueOffset. */
53451:     /* ARM: No constants used as mic.load always points to an LDR that loads the offset. */
52826: #endif
52826: 
53155:     enum Kind
53155: #ifdef _MSC_VER
53155:     : uint8_t
53155: #endif
53155:     {
52831:         GET,
56217:         SET
52831:     };
52831: 
53301:     /* Used by multiple MICs. */
53301:     JSC::CodeLocationLabel entry;
53301:     JSC::CodeLocationLabel stubEntry;
53301: 
53301:     /* TODO: use a union-like structure for the below. */
53301: 
53301:     /* Used by GET/SET. */
53301:     JSC::CodeLocationLabel load;
53408:     JSC::CodeLocationDataLabel32 shape;
53301:     JSC::CodeLocationCall stubCall;
53269: #if defined JS_PUNBOX64
53269:     uint32 patchValueOffset;
53269: #endif
53301: 
53301:     /* Used by all MICs. */
53590:     Kind kind : 3;
53133:     union {
53301:         /* Used by GET/SET. */
53133:         struct {
53116:             bool touched : 1;
53116:             bool typeConst : 1;
53116:             bool dataConst : 1;
57784:             bool usePropertyCache : 1;
53133:         } name;
53133:     } u;
52826: };
52826: 
56217: struct TraceICInfo {
56217:     TraceICInfo() {}
56217: 
56217:     JSC::CodeLocationLabel stubEntry;
56217:     JSC::CodeLocationLabel jumpTarget;
56217:     JSC::CodeLocationJump traceHint;
56217:     JSC::CodeLocationJump slowTraceHint;
56217: #ifdef DEBUG
56217:     jsbytecode *jumpTargetPC;
56217: #endif
56217:     
56551:     /* This data is used by the tracing JIT. */
56551:     void *traceData;
56551:     uintN traceEpoch;
56551: 
59976:     bool initialized : 1;
56217:     bool hasSlowTraceHint : 1;
56217: };
56217: 
56462: static const uint16 BAD_TRACEIC_INDEX = (uint16)0xffff;
56217: 
55503: void JS_FASTCALL GetGlobalName(VMFrame &f, ic::MICInfo *ic);
55503: void JS_FASTCALL SetGlobalName(VMFrame &f, ic::MICInfo *ic);
52826: 
56192: struct EqualityICInfo {
56192:     typedef JSC::MacroAssembler::RegisterID RegisterID;
56192: 
56192:     JSC::CodeLocationLabel stubEntry;
56192:     JSC::CodeLocationCall stubCall;
56192:     BoolStub stub;
56192:     JSC::CodeLocationLabel target;
56192:     JSC::CodeLocationLabel fallThrough;
56192:     JSC::CodeLocationJump jumpToStub;
56192: 
56192:     ValueRemat lvr, rvr;
56192: 
56192:     bool generated : 1;
56192:     JSC::MacroAssembler::RegisterID tempReg : 5;
56462:     Assembler::Condition cond;
56192: };
56192: 
56192: JSBool JS_FASTCALL Equality(VMFrame &f, ic::EqualityICInfo *ic);
56192: 
53590: /* See MonoIC.cpp, CallCompiler for more information on call ICs. */
53590: struct CallICInfo {
53590:     typedef JSC::MacroAssembler::RegisterID RegisterID;
53301: 
53590:     enum PoolIndex {
53590:         Pool_ScriptStub,
53590:         Pool_ClosureStub,
53590:         Pool_NativeStub,
53590:         Total_Pools
53301:     };
53301: 
53590:     JSC::ExecutablePool *pools[Total_Pools];
53515: 
53590:     /* Used for rooting and reification. */
53590:     JSObject *fastGuardedObject;
53590:     JSObject *fastGuardedNative;
53523: 
54163:     /* PC at the call site. */
54163:     jsbytecode *pc;
54163: 
57717:     FrameSize frameSize;
53523: 
53590:     /* Function object identity guard. */
53590:     JSC::CodeLocationDataLabelPtr funGuard;
53523: 
53590:     /* Starting point for all slow call paths. */
53590:     JSC::CodeLocationLabel slowPathStart;
53523: 
53590:     /* Inline to OOL jump, redirected by stubs. */
53590:     JSC::CodeLocationJump funJump;
53590: 
53590:     /* Offset to inline scripted call, from funGuard. */
54832:     uint32 hotJumpOffset   : 16;
53849:     uint32 joinPointOffset : 16;
53590: 
53590:     /* Out of line slow call. */
53849:     uint32 oolCallOffset   : 16;
53590: 
53590:     /* Jump to patch for out-of-line scripted calls. */
53849:     uint32 oolJumpOffset   : 16;
53590: 
59895:     /* Label for out-of-line call to IC function. */
59895:     uint32 icCallOffset    : 16;
59895: 
53590:     /* Offset for deep-fun check to rejoin at. */
53849:     uint32 hotPathOffset   : 16;
53590: 
53590:     /* Join point for all slow call paths. */
53849:     uint32 slowJoinOffset  : 16;
53590: 
53590:     RegisterID funObjReg : 5;
53590:     RegisterID funPtrReg : 5;
53590:     bool hit : 1;
53590:     bool hasJsFunCheck : 1;
53590: 
53590:     inline void reset() {
53590:         fastGuardedObject = NULL;
53590:         fastGuardedNative = NULL;
53590:         hit = false;
53590:         hasJsFunCheck = false;
53590:         pools[0] = pools[1] = pools[2] = NULL;
53590:     }
53590: 
53590:     inline void releasePools() {
53590:         releasePool(Pool_ScriptStub);
53590:         releasePool(Pool_ClosureStub);
53590:         releasePool(Pool_NativeStub);
53590:     }
53590: 
53590:     inline void releasePool(PoolIndex index) {
53590:         if (pools[index]) {
53590:             pools[index]->release();
53590:             pools[index] = NULL;
53590:         }
53590:     }
53515: };
53515: 
55503: void * JS_FASTCALL New(VMFrame &f, ic::CallICInfo *ic);
55503: void * JS_FASTCALL Call(VMFrame &f, ic::CallICInfo *ic);
55503: void JS_FASTCALL NativeNew(VMFrame &f, ic::CallICInfo *ic);
55503: void JS_FASTCALL NativeCall(VMFrame &f, ic::CallICInfo *ic);
57717: JSBool JS_FASTCALL SplatApplyArgs(VMFrame &f);
53301: 
53405: void PurgeMICs(JSContext *cx, JSScript *script);
59895: void SweepCallICs(JSScript *script, bool purgeAll);
53405: 
53269: } /* namespace ic */
52826: } /* namespace mjit */
52826: } /* namespace js */
52826: 
52826: #endif /* jsjaeger_mono_ic_h__ */
52826: 
