 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 65798: 
 65798: const Cc = Components.classes;
 65798: const Ci = Components.interfaces;
 65798: 
 65798: Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 65798: 
 65798: // -----------------------------------------------------------------------
 65798: // Directory Provider for special browser folders and files
 65798: // -----------------------------------------------------------------------
 65798: 
 65798: const NS_APP_CACHE_PARENT_DIR = "cachePDir";
 67031: const XRE_UPDATE_ROOT_DIR     = "UpdRootD";
 67365: const ENVVAR_UPDATE_DIR       = "UPDATES_DIRECTORY";
108471: const WEBAPPS_DIR             = "webappsDir";
 65798: 
 65798: function DirectoryProvider() {}
 65798: 
 65798: DirectoryProvider.prototype = {
 65798:   classID: Components.ID("{ef0f7a87-c1ee-45a8-8d67-26f586e46a4b}"),
 65798:   
 65802:   QueryInterface: XPCOMUtils.generateQI([Ci.nsIDirectoryServiceProvider]),
 65798: 
 65798:   getFile: function(prop, persistent) {
 65798:     if (prop == NS_APP_CACHE_PARENT_DIR) {
 65798:       let dirsvc = Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties);
 65798:       let profile = dirsvc.get("ProfD", Ci.nsIFile);
 65798:       return profile;
108471:     } else if (prop == WEBAPPS_DIR) {
108471:       // returns the folder that should hold the webapps database file
108471:       // For fennec we will store that in the root profile folder so that all
108471:       // webapps can easily access it
108471:       let dirsvc = Cc["@mozilla.org/file/directory_service;1"].getService(Ci.nsIProperties);
108471:       let profile = dirsvc.get("ProfD", Ci.nsIFile);
108471:       return profile.parent;
 67031:     } else if (prop == XRE_UPDATE_ROOT_DIR) {
 67365:       let env = Cc["@mozilla.org/process/environment;1"].getService(Ci.nsIEnvironment);
 67365:       if (env.exists(ENVVAR_UPDATE_DIR)) {
 67365:         let path = env.get(ENVVAR_UPDATE_DIR);
 67365:         if (path) {
 67365:           let localFile = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
 67365:           localFile.initWithPath(path);
 67365:           return localFile;
 67365:         }
 67365:       }
 67031:       let dm = Cc["@mozilla.org/download-manager;1"].getService(Ci.nsIDownloadManager);
 67031:       return dm.defaultDownloadsDirectory;
 65798:     }
 65803:     
 65803:     // We are retuning null to show failure instead for throwing an error. The
 65803:     // interface is called quite a bit and throwing an error is noisy. Returning
 65803:     // null works with the way the interface is called [see bug 529077]
 65802:     return null;
 65798:   }
 65798: };
 65798: 
 66346: const NSGetFactory = XPCOMUtils.generateNSGetFactory([DirectoryProvider]);
 65798: 
