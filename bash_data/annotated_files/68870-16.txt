20793: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
20793: /* ***** BEGIN LICENSE BLOCK *****
20793:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
20793:  *
20793:  * The contents of this file are subject to the Mozilla Public License Version
20793:  * 1.1 (the "License"); you may not use this file except in compliance with
20793:  * the License. You may obtain a copy of the License at
20793:  * http://www.mozilla.org/MPL/
20793:  *
20793:  * Software distributed under the License is distributed on an "AS IS" basis,
20793:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
20793:  * for the specific language governing rights and limitations under the
20793:  * License.
20793:  *
20793:  * The Original Code is mozilla.org code.
20793:  *
20793:  * The Initial Developer of the Original Code is
20793:  * Thomas K. Dyas <tdyas@zecador.org>.
20793:  * Portions created by the Initial Developer are Copyright (C) 2008
20793:  * the Initial Developer. All Rights Reserved.
20793:  *
20793:  * Contributor(s):
20793:  *
20793:  * Alternatively, the contents of this file may be used under the terms of
20793:  * either the GNU General Public License Version 2 or later (the "GPL"), or
20793:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
20793:  * in which case the provisions of the GPL or the LGPL are applicable instead
20793:  * of those above. If you wish to allow use of your version of this file only
20793:  * under the terms of either the GPL or the LGPL, and not to allow others to
20793:  * use your version of this file under the terms of the MPL, indicate your
20793:  * decision by deleting the provisions above and replace them with the notice
20793:  * and other provisions required by the GPL or the LGPL. If you do not delete
20793:  * the provisions above, a recipient may use your version of this file under
20793:  * the terms of any one of the MPL, the GPL or the LGPL.
20793:  *
20793:  * ***** END LICENSE BLOCK ***** */
20793: 
20793: #include "nsDOMSimpleGestureEvent.h"
20793: #include "nsGUIEvent.h"
20793: #include "nsContentUtils.h"
20793: 
20793: 
20793: nsDOMSimpleGestureEvent::nsDOMSimpleGestureEvent(nsPresContext* aPresContext, nsSimpleGestureEvent* aEvent)
25058:   : nsDOMMouseEvent(aPresContext, aEvent ? aEvent : new nsSimpleGestureEvent(PR_FALSE, 0, nsnull, 0, 0.0))
20793: {
20793:   NS_ASSERTION(mEvent->eventStructType == NS_SIMPLE_GESTURE_EVENT, "event type mismatch");
20793: 
20793:   if (aEvent) {
20793:     mEventIsInternal = PR_FALSE;
20793:   } else {
20793:     mEventIsInternal = PR_TRUE;
20793:     mEvent->time = PR_Now();
26874:     mEvent->refPoint.x = mEvent->refPoint.y = 0;
40485:     static_cast<nsMouseEvent*>(mEvent)->inputSource = nsIDOMNSMouseEvent::MOZ_SOURCE_UNKNOWN;
20793:   }
20793: }
20793: 
20793: nsDOMSimpleGestureEvent::~nsDOMSimpleGestureEvent()
20793: {
20793:   if (mEventIsInternal) {
20793:     delete static_cast<nsSimpleGestureEvent*>(mEvent);
20793:     mEvent = nsnull;
20793:   }
20793: }
20793: 
20793: NS_IMPL_ADDREF_INHERITED(nsDOMSimpleGestureEvent, nsDOMUIEvent)
20793: NS_IMPL_RELEASE_INHERITED(nsDOMSimpleGestureEvent, nsDOMUIEvent)
20793: 
40490: DOMCI_DATA(SimpleGestureEvent, nsDOMSimpleGestureEvent)
40490: 
20793: NS_INTERFACE_MAP_BEGIN(nsDOMSimpleGestureEvent)
20793:   NS_INTERFACE_MAP_ENTRY(nsIDOMSimpleGestureEvent)
39587:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(SimpleGestureEvent)
25058: NS_INTERFACE_MAP_END_INHERITING(nsDOMMouseEvent)
20793: 
20793: /* readonly attribute unsigned long direction; */
20793: NS_IMETHODIMP
20793: nsDOMSimpleGestureEvent::GetDirection(PRUint32 *aDirection)
20793: {
20793:   NS_ENSURE_ARG_POINTER(aDirection);
20793:   *aDirection = static_cast<nsSimpleGestureEvent*>(mEvent)->direction;
20793:   return NS_OK;
20793: }
20793: 
20793: /* readonly attribute float delta; */
20793: NS_IMETHODIMP
20793: nsDOMSimpleGestureEvent::GetDelta(PRFloat64 *aDelta)
20793: {
20793:   NS_ENSURE_ARG_POINTER(aDelta);
20793:   *aDelta = static_cast<nsSimpleGestureEvent*>(mEvent)->delta;
20793:   return NS_OK;
20793: }
20793: 
20793: NS_IMETHODIMP
25058: nsDOMSimpleGestureEvent::InitSimpleGestureEvent(const nsAString& aTypeArg,
25058:                                                 PRBool aCanBubbleArg,
25058:                                                 PRBool aCancelableArg,
68870:                                                 nsIDOMAbstractView* aViewArg,
25058:                                                 PRInt32 aDetailArg,
25058:                                                 PRInt32 aScreenX, 
25058:                                                 PRInt32 aScreenY,
25058:                                                 PRInt32 aClientX,
25058:                                                 PRInt32 aClientY,
25058:                                                 PRBool aCtrlKeyArg,
25058:                                                 PRBool aAltKeyArg,
25058:                                                 PRBool aShiftKeyArg,
25058:                                                 PRBool aMetaKeyArg,
25058:                                                 PRUint16 aButton,
25058:                                                 nsIDOMEventTarget* aRelatedTarget,
25058:                                                 PRUint32 aDirectionArg,
25058:                                                 PRFloat64 aDeltaArg)
20793: {
25058:   nsresult rv = nsDOMMouseEvent::InitMouseEvent(aTypeArg,
25058:                                                 aCanBubbleArg,
25058:                                                 aCancelableArg,
25058:                                                 aViewArg,
25058:                                                 aDetailArg,
25058:                                                 aScreenX, 
25058:                                                 aScreenY,
25058:                                                 aClientX,
25058:                                                 aClientY,
25058:                                                 aCtrlKeyArg,
25058:                                                 aAltKeyArg,
25058:                                                 aShiftKeyArg,
25058:                                                 aMetaKeyArg,
25058:                                                 aButton,
25058:                                                 aRelatedTarget);
20793:   NS_ENSURE_SUCCESS(rv, rv);
20793: 
20793:   nsSimpleGestureEvent* simpleGestureEvent = static_cast<nsSimpleGestureEvent*>(mEvent);
25058:   simpleGestureEvent->direction = aDirectionArg;
25058:   simpleGestureEvent->delta = aDeltaArg;
20793: 
20793:   return NS_OK;
20793: }
20793: 
20793: nsresult NS_NewDOMSimpleGestureEvent(nsIDOMEvent** aInstancePtrResult,
20793:                                      nsPresContext* aPresContext,
20793:                                      nsSimpleGestureEvent *aEvent)
20793: {
20793:   nsDOMSimpleGestureEvent *it = new nsDOMSimpleGestureEvent(aPresContext, aEvent);
20793:   if (nsnull == it) {
20793:     return NS_ERROR_OUT_OF_MEMORY;
20793:   }
20793:   return CallQueryInterface(it, aInstancePtrResult);
20793: }
