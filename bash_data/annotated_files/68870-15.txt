33011: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
33011: /* ***** BEGIN LICENSE BLOCK *****
33011:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
33011:  *
33011:  * The contents of this file are subject to the Mozilla Public License Version
33011:  * 1.1 (the "License"); you may not use this file except in compliance with
33011:  * the License. You may obtain a copy of the License at
33011:  * http://www.mozilla.org/MPL/
33011:  *
33011:  * Software distributed under the License is distributed on an "AS IS" basis,
33011:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
33011:  * for the specific language governing rights and limitations under the
33011:  * License.
33011:  *
33011:  * The Original Code is Mozilla code.
33011:  *
36532:  * The Initial Developer of the Original Code is Mozilla Foundation
33011:  * Portions created by the Initial Developer are Copyright (C) 2009
33011:  * the Initial Developer. All Rights Reserved.
33011:  *
33011:  * Contributor(s):
33011:  *   Roy Frostig <froystig@cs.stanford.edu>
33011:  *
33011:  * Alternatively, the contents of this file may be used under the terms of
33011:  * either of the GNU General Public License Version 2 or later (the "GPL"),
33011:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
33011:  * in which case the provisions of the GPL or the LGPL are applicable instead
33011:  * of those above. If you wish to allow use of your version of this file only
33011:  * under the terms of either the GPL or the LGPL, and not to allow others to
33011:  * use your version of this file under the terms of the MPL, indicate your
33011:  * decision by deleting the provisions above and replace them with the notice
33011:  * and other provisions required by the GPL or the LGPL. If you do not delete
33011:  * the provisions above, a recipient may use your version of this file under
33011:  * the terms of any one of the MPL, the GPL or the LGPL.
33011:  *
33011:  * ***** END LICENSE BLOCK ***** */
33011: 
46627: #include "base/basictypes.h"
46627: #include "IPC/IPCMessageUtils.h"
46627: 
33011: #include "nsDOMScrollAreaEvent.h"
33011: #include "nsGUIEvent.h"
33011: #include "nsClientRect.h"
40660: #include "nsDOMClassInfoID.h"
40660: #include "nsIClassInfo.h"
40660: #include "nsIXPCScriptable.h"
33011: 
33011: nsDOMScrollAreaEvent::nsDOMScrollAreaEvent(nsPresContext *aPresContext,
33011:                                            nsScrollAreaEvent *aEvent)
33011:   : nsDOMUIEvent(aPresContext, aEvent)
33011: {
33011:   mClientArea.SetLayoutRect(aEvent ? aEvent->mArea : nsRect());
33011: }
33011: 
33011: nsDOMScrollAreaEvent::~nsDOMScrollAreaEvent()
33011: {
33011:   if (mEventIsInternal && mEvent) {
33011:     if (mEvent->eventStructType == NS_SCROLLAREA_EVENT) {
33011:       delete static_cast<nsScrollAreaEvent *>(mEvent);
33011:       mEvent = nsnull;
33011:     }
33011:   }
33011: }
33011: 
33011: NS_IMPL_ADDREF_INHERITED(nsDOMScrollAreaEvent, nsDOMUIEvent)
33011: NS_IMPL_RELEASE_INHERITED(nsDOMScrollAreaEvent, nsDOMUIEvent)
33011: 
40490: DOMCI_DATA(ScrollAreaEvent, nsDOMScrollAreaEvent)
40490: 
33011: NS_INTERFACE_MAP_BEGIN(nsDOMScrollAreaEvent)
33011:   NS_INTERFACE_MAP_ENTRY(nsIDOMScrollAreaEvent)
39587:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ScrollAreaEvent)
33011: NS_INTERFACE_MAP_END_INHERITING(nsDOMUIEvent)
33011: 
33011: 
33011: NS_IMETHODIMP
33011: nsDOMScrollAreaEvent::GetX(float *aX)
33011: {
33011:   return mClientArea.GetLeft(aX);
33011: }
33011: 
33011: NS_IMETHODIMP
33011: nsDOMScrollAreaEvent::GetY(float *aY)
33011: {
33011:   return mClientArea.GetTop(aY);
33011: }
33011: 
33011: NS_IMETHODIMP
33011: nsDOMScrollAreaEvent::GetWidth(float *aWidth)
33011: {
33011:   return mClientArea.GetWidth(aWidth);
33011: }
33011: 
33011: NS_IMETHODIMP
33011: nsDOMScrollAreaEvent::GetHeight(float *aHeight)
33011: {
33011:   return mClientArea.GetHeight(aHeight);
33011: }
33011: 
33011: NS_IMETHODIMP
33011: nsDOMScrollAreaEvent::InitScrollAreaEvent(const nsAString &aEventType,
33011:                                           PRBool aCanBubble,
33011:                                           PRBool aCancelable,
68870:                                           nsIDOMAbstractView *aView,
33011:                                           PRInt32 aDetail,
33011:                                           float aX, float aY,
33011:                                           float aWidth, float aHeight)
33011: {
33011:   nsresult rv = nsDOMUIEvent::InitUIEvent(aEventType, aCanBubble, aCancelable, aView, aDetail);
33011:   NS_ENSURE_SUCCESS(rv, rv);
33011: 
33011:   mClientArea.SetRect(aX, aY, aWidth, aHeight);
33011: 
33011:   return NS_OK;
33011: }
33011: 
46627: void
46627: nsDOMScrollAreaEvent::Serialize(IPC::Message* aMsg,
46627:                                 PRBool aSerializeInterfaceType)
46627: {
46627:   if (aSerializeInterfaceType) {
46627:     IPC::WriteParam(aMsg, NS_LITERAL_STRING("scrollareaevent"));
46627:   }
46627: 
46627:   nsDOMEvent::Serialize(aMsg, PR_FALSE);
46627: 
46627:   float val;
46627:   mClientArea.GetLeft(&val);
46627:   IPC::WriteParam(aMsg, val);
46627:   mClientArea.GetTop(&val);
46627:   IPC::WriteParam(aMsg, val);
46627:   mClientArea.GetWidth(&val);
46627:   IPC::WriteParam(aMsg, val);
46627:   mClientArea.GetHeight(&val);
46627:   IPC::WriteParam(aMsg, val);
46627: }
46627: 
46627: PRBool
46627: nsDOMScrollAreaEvent::Deserialize(const IPC::Message* aMsg, void** aIter)
46627: {
46627:   NS_ENSURE_TRUE(nsDOMEvent::Deserialize(aMsg, aIter), PR_FALSE);
46627: 
46627:   float x, y, width, height;
46627:   NS_ENSURE_TRUE(IPC::ReadParam(aMsg, aIter, &x), PR_FALSE);
46627:   NS_ENSURE_TRUE(IPC::ReadParam(aMsg, aIter, &y), PR_FALSE);
46627:   NS_ENSURE_TRUE(IPC::ReadParam(aMsg, aIter, &width), PR_FALSE);
46627:   NS_ENSURE_TRUE(IPC::ReadParam(aMsg, aIter, &height), PR_FALSE);
46627:   mClientArea.SetRect(x, y, width, height);
46627: 
46627:   return PR_TRUE;
46627: }
46627: 
33011: nsresult
33011: NS_NewDOMScrollAreaEvent(nsIDOMEvent **aInstancePtrResult,
33011:                          nsPresContext *aPresContext,
33011:                          nsScrollAreaEvent *aEvent)
33011: {
68870:   nsDOMScrollAreaEvent *ev = new nsDOMScrollAreaEvent(aPresContext, aEvent);
68870: 
68870:   if (!ev) {
68870:     return NS_ERROR_OUT_OF_MEMORY;
33011:   }
68870: 
68870:   return CallQueryInterface(ev, aInstancePtrResult);
68870: }
