16908: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
16908: /* vim:set ts=2 sw=2 sts=2 tw=80 et cindent: */
16908: /* ***** BEGIN LICENSE BLOCK *****
16908:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
16908:  *
16908:  * The contents of this file are subject to the Mozilla Public License Version
16908:  * 1.1 (the "License"); you may not use this file except in compliance with
16908:  * the License. You may obtain a copy of the License at
16908:  * http://www.mozilla.org/MPL/
16908:  *
16908:  * Software distributed under the License is distributed on an "AS IS" basis,
16908:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
16908:  * for the specific language governing rights and limitations under the
16908:  * License.
16908:  *
16908:  * The Original Code is Mozilla's Element Optimizeing extension.
16908:  *
16908:  * The Initial Developer of the Original Code is the Mozilla Foundation.
16908:  * Portions created by the Initial Developer are Copyright (C) 2006
16908:  * the Initial Developer. All Rights Reserved.
16908:  *
16908:  * Contributor(s):
16908:  *   Oleg Romashin <romaxa@gmail.com> (original author)
16908:  *   Brad Lassey <blassey@mozilla.com>
16908:  *
16908:  * Alternatively, the contents of this file may be used under the terms of
16908:  * either the GNU General Public License Version 2 or later (the "GPL"), or
16908:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
16908:  * in which case the provisions of the GPL or the LGPL are applicable instead
16908:  * of those above. If you wish to allow use of your version of this file only
16908:  * under the terms of either the GPL or the LGPL, and not to allow others to
16908:  * use your version of this file under the terms of the MPL, indicate your
16908:  * decision by deleting the provisions above and replace them with the notice
16908:  * and other provisions required by the GPL or the LGPL. If you do not delete
16908:  * the provisions above, a recipient may use your version of this file under
16908:  * the terms of any one of the MPL, the GPL or the LGPL.
16908:  *
16908:  * ***** END LICENSE BLOCK ***** */
16908: 
16908: #include "nsCURILoader.h"
16908: #include "nsICategoryManager.h"
68870: #include "nsIDOMAbstractView.h"
16908: #include "nsIDOMDocument.h"
68870: #include "nsIDOMDocumentView.h"
16908: #include "nsIDOMHTMLElement.h"
16908: #include "nsIDOMHTMLIFrameElement.h"
16908: #include "nsIDOMNSDocument.h"
16908: #include "nsIDOMNSElement.h"
16908: #include "nsIDOMNSHTMLElement.h"
16908: #include "nsIDOMNode.h"
16908: #include "nsIDOMNodeList.h"
16908: #include "nsIDOMWindow.h"
16908: #include "nsIDOMWindowCollection.h"
16908: #include "nsIDocument.h"
16908: #include "nsIGenericFactory.h"
16908: #include "nsIObserver.h"
16908: #include "nsIPresShell.h"
16908: #include "nsIStyleSheetService.h"
16908: #include "nsIWebProgress.h"
16908: #include "nsIWebProgressListener.h"
16908: #include "nsIWindowWatcher.h"
16908: #include "nsNetUtil.h"
16908: #include "nsRect.h"
16908: #include "nsStringGlue.h"
16908: #include "nsWeakReference.h"
16908: #include "nsIWebBrowser.h"
16908: #include "nsIObserverService.h"
16908: #include "nsIDOMEventTarget.h"
16908: #include "nsPIDOMWindow.h"
16908: #include "nsIDOMWindow.h"
68870: //#include ".h"
16908: #include "nsIDOM3EventTarget.h"
16908: #include "nsIDOMKeyListener.h"
16908: #include "nsIDOMCompositionListener.h"
16908: #include "nsIDOMTextListener.h"
16908: #include "nsIDOMMouseMotionListener.h"
16908: #include "nsIDOMMouseListener.h"
16908: #include "nsIDOMMouseEvent.h"
16942: #include "nsIDOMNSEvent.h"
16908: #include "nsIView.h"
16908: #include "nsGUIEvent.h"
16908: #include "nsIViewManager.h"
16942: #include "nsIContentPolicy.h"
16942: #include "nsIDocShellTreeItem.h"
16942: #include "nsIContent.h"
16942: #include "nsITimer.h"
16908: 
16908: const int MIN_INT =((int) (1 << (sizeof(int) * 8 - 1)));
16908: 
16908: static int g_lastX=MIN_INT;
16908: static int g_lastY=MIN_INT;
16942: static PRInt32 g_panning = 0;
16929: static PRBool g_is_scrollable = PR_FALSE;
16908: 
16908: #define EM_MULT 16.
16908: #define NS_FRAME_HAS_RELATIVE_SIZE 0x01000000
16908: #define NS_FRAME_HAS_OPTIMIZEDVIEW 0x02000000
16942: #define BEHAVIOR_ACCEPT nsIPermissionManager::ALLOW_ACTION
16942: #define BEHAVIOR_REJECT nsIPermissionManager::DENY_ACTION
16942: #define BEHAVIOR_NOFOREIGN 3
16942: #define NUMBER_OF_TYPES 13
16908: 
16908: // TODO auto reload nsWidgetUtils in C.
16908: class nsWidgetUtils : public nsIObserver,
16908:                       public nsIDOMMouseMotionListener,
16908:                       public nsIDOMMouseListener,
16942:                       public nsIContentPolicy,
16908:                       public nsSupportsWeakReference
16908: {
16908: public:
16908:   nsWidgetUtils();
16908:   virtual ~nsWidgetUtils();
16908: 
16908:   // nsIDOMMouseMotionListener
16908:   NS_IMETHOD MouseMove(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD DragMove(nsIDOMEvent* aMouseEvent);
16908:   NS_IMETHOD HandleEvent(nsIDOMEvent* aDOMEvent);
16908: 
16908:   // nsIDOMMouseListener
16908:   NS_IMETHOD MouseDown(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD MouseUp(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD MouseClick(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD MouseDblClick(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD MouseOver(nsIDOMEvent* aDOMEvent);
16908:   NS_IMETHOD MouseOut(nsIDOMEvent* aDOMEvent);
16908: 
16908:   NS_DECL_ISUPPORTS
16908:   NS_DECL_NSIOBSERVER 
16942:   NS_DECL_NSICONTENTPOLICY
16942: 
16942: private:
16942:   nsresult Init(void);
16942:   void RemoveWindowListeners(nsIDOMWindow *aDOMWin);
16942:   void GetChromeEventHandler(nsIDOMWindow *aDOMWin, nsIDOMEventTarget **aChromeTarget);
16942:   void AttachWindowListeners(nsIDOMWindow *aDOMWin);
16942:   PRBool IsXULNode(nsIDOMNode *aNode, PRUint32 *aType = 0);
16942:   nsresult GetDOMWindowByNode(nsIDOMNode *aNode, nsIDOMWindow * *aDOMWindow);
30535:   nsresult UpdateFromEvent(nsIDOMEvent *aDOMEvent);
16942: 
16942:   static void StopPanningCallback(nsITimer *timer, void *closure);
16942: 
16929:   nsCOMPtr<nsIWidget> mWidget;
16929:   nsCOMPtr<nsIViewManager> mViewManager;
16942:   nsCOMPtr<nsITimer> mTimer;
16908: };
16908: 
16908: nsWidgetUtils::nsWidgetUtils()
16908: {
16908:   Init();
16908: }
16908: 
16908: NS_IMETHODIMP
16908: nsWidgetUtils::Init()
16908: {
16908:   nsresult rv;
16908:   nsCOMPtr<nsIObserverService> obsSvc =
16908:     do_GetService("@mozilla.org/observer-service;1");
16908:   NS_ENSURE_STATE(obsSvc);
16908: 
16908:   rv = obsSvc->AddObserver(this, "domwindowopened", PR_FALSE);
16908:   NS_ENSURE_SUCCESS(rv, rv);
16908:   rv = obsSvc->AddObserver(this, "domwindowclosed", PR_FALSE);
16908:   NS_ENSURE_SUCCESS(rv, rv);
16942:   mTimer = do_CreateInstance(NS_TIMER_CONTRACTID);
16942: }
16942: 
16942: nsresult
30535: nsWidgetUtils::UpdateFromEvent(nsIDOMEvent *aDOMEvent)
16942: {
16942:   nsCOMPtr <nsIDOMMouseEvent> mouseEvent;
16942:   mouseEvent = do_QueryInterface(aDOMEvent);
16942:   if (!mouseEvent)
16942:     return NS_OK;
16942: 
16942:   ((nsIDOMMouseEvent*)mouseEvent)->GetScreenX(&g_lastX);
16942:   ((nsIDOMMouseEvent*)mouseEvent)->GetScreenY(&g_lastY);
16942: 
16942:   nsCOMPtr<nsIDOMWindow> mWindow;
16942:   nsCOMPtr<nsIDOMNode> mNode;
16942:   nsCOMPtr<nsIDOMNode> mOrigNode;
16942: 
16942:   PRUint32 type = 0;
16942:   PRBool isXul = PR_FALSE;
16942:   {
16942:     nsCOMPtr <nsIDOMNSEvent> aEvent = do_QueryInterface(aDOMEvent);
16942:     nsCOMPtr<nsIDOMEventTarget> eventOrigTarget;
16942:     if (aEvent)
16942:       aEvent->GetOriginalTarget(getter_AddRefs(eventOrigTarget));
16942:     if (eventOrigTarget)
16942:       mOrigNode = do_QueryInterface(eventOrigTarget);
16942:     isXul = IsXULNode(mOrigNode, &type);
16942: 
16942:   }
16942:   if (isXul)
16942:     return NS_ERROR_FAILURE;
16942: 
16942:   nsCOMPtr<nsIDOMEventTarget> eventTarget;
16942:   aDOMEvent->GetTarget(getter_AddRefs(eventTarget));
16942:   if (eventTarget)
16942:     mNode = do_QueryInterface(eventTarget);
16942: 
16942:   if (!mNode)
16942:     return NS_OK;
16942: 
16942:   GetDOMWindowByNode(mNode, getter_AddRefs(mWindow));
16942:   if (!mWindow)
16942:     return NS_OK;
16942:   nsCOMPtr<nsIDocument> doc;
16942:   nsCOMPtr<nsIDOMDocument> domDoc;
16942:   mWindow->GetDocument(getter_AddRefs(domDoc));
16942:   doc = do_QueryInterface(domDoc);
16942:   if (!doc) return NS_OK;
16942:   // the only case where there could be more shells in printpreview
46225:   nsIPresShell *shell = doc->GetShell();
16942:   NS_ENSURE_TRUE(shell, NS_ERROR_FAILURE);
16942:   mViewManager = shell->GetViewManager();
16942:   NS_ENSURE_TRUE(mViewManager, NS_ERROR_FAILURE);
30535:   mViewManager->GetRootWidget(getter_AddRefs(mWidget));
16942:   NS_ENSURE_TRUE(mWidget, NS_ERROR_FAILURE);
16942:   return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseDown(nsIDOMEvent* aDOMEvent)
16942: {
16942:   g_is_scrollable = PR_FALSE;
16942:   // Return TRUE from your signal handler to mark the event as consumed.
16942:   if (NS_FAILED(UpdateFromEvent(aDOMEvent)))
16942:     return NS_OK;
16942:   g_is_scrollable = PR_TRUE;
16942:   if (g_is_scrollable) {
16942:      aDOMEvent->StopPropagation();
16942:      aDOMEvent->PreventDefault();
16942:   }
16942:   return NS_OK;
16942: }
16942: 
16942: /* static */ void
16942: nsWidgetUtils::StopPanningCallback(nsITimer *timer, void *closure)
16942: {
16942:   g_panning = PR_FALSE;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseUp(nsIDOMEvent* aDOMEvent)
16942: {
16942:   nsCOMPtr <nsIDOMMouseEvent> mouseEvent;
16942:   mouseEvent = do_QueryInterface(aDOMEvent);
16942:   if (!mouseEvent)
16942:     return NS_OK;
16942:   // Return TRUE from your signal handler to mark the event as consumed.
16942:   g_lastX = MIN_INT;
16942:   g_lastY = MIN_INT;
16942:   g_is_scrollable = PR_FALSE;
16942:   if (g_panning) {
16942:      aDOMEvent->StopPropagation();
16942:      aDOMEvent->PreventDefault();
16942:      nsresult rv;
16942:      if (mTimer) {
16942:        rv = mTimer->InitWithFuncCallback(nsWidgetUtils::StopPanningCallback,
16942:                                         nsnull, 500, nsITimer::TYPE_ONE_SHOT);
16942:        if (NS_SUCCEEDED(rv))
16942:          return NS_OK;
16942:      }
16942:      g_panning = PR_FALSE;
16942:   }
16942:   return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseMove(nsIDOMEvent* aDOMEvent)
16942: {
16942:   if (!g_is_scrollable) return NS_OK;
16942: 
16942:   nsCOMPtr<nsIDOMMouseEvent> mouseEvent = do_QueryInterface(aDOMEvent);
16942:   if (!mouseEvent)
16942:     return NS_OK;
16942:   int x, y;
16942:   ((nsIDOMMouseEvent*)mouseEvent)->GetScreenX(&x);
16942:   ((nsIDOMMouseEvent*)mouseEvent)->GetScreenY(&y);
16942: 
16942:   int dx = g_lastX - x;
16942:   int dy = g_lastY - y;
16942:   if(g_lastX == MIN_INT || g_lastY == MIN_INT)
16942:     return NS_OK;
16942: 
64435:   nsIView* aView = mViewManager->GetRootView();
16942:   if (!aView)
16942:     if (NS_FAILED(UpdateFromEvent(aDOMEvent)))
16942:       return NS_OK;
16942: 
16942:   nsEventStatus statusX;
16942:   nsMouseScrollEvent scrollEventX(PR_TRUE, NS_MOUSE_SCROLL, mWidget);
16942:   scrollEventX.delta = dx;
30681:   scrollEventX.scrollFlags = nsMouseScrollEvent::kIsHorizontal | nsMouseScrollEvent::kHasPixels;
30521:   mViewManager->DispatchEvent(&scrollEventX, aView, &statusX);
16942:   if(statusX != nsEventStatus_eIgnore ){
16948:     if (dx > 5)
16942:       g_panning = PR_TRUE;
16942:     g_lastX = x;
16942:   }
16942: 
16942:   nsEventStatus statusY;
16942:   nsMouseScrollEvent scrollEventY(PR_TRUE, NS_MOUSE_SCROLL, mWidget);
16942:   scrollEventY.delta = dy;
30681:   scrollEventY.scrollFlags = nsMouseScrollEvent::kIsVertical | nsMouseScrollEvent::kHasPixels;
30521:   mViewManager->DispatchEvent(&scrollEventY, aView, &statusY);
16942:   if(statusY != nsEventStatus_eIgnore ){
16948:     if (dy > 5)
16942:       g_panning = PR_TRUE;
16942:     g_lastY = y;
16942:   }
16942:   if (g_panning) {
16942:      aDOMEvent->StopPropagation();
16942:      aDOMEvent->PreventDefault();
16942:   }
16942: 
16942:   return NS_OK;
16942: }
16942: 
16942: // nsIContentPolicy Implementation
16942: NS_IMETHODIMP
16942: nsWidgetUtils::ShouldLoad(PRUint32          aContentType,
16942:                           nsIURI           *aContentLocation,
16942:                           nsIURI           *aRequestingLocation,
16942:                           nsISupports      *aRequestingContext,
16942:                           const nsACString &aMimeGuess,
16942:                           nsISupports      *aExtra,
16942:                           PRInt16          *aDecision)
16942: {
16942:     *aDecision = nsIContentPolicy::ACCEPT;
16942:     nsresult rv;
16942: 
16942:     if (aContentType != nsIContentPolicy::TYPE_DOCUMENT)
16942:         return NS_OK;
16942: 
16942:     // we can't do anything without this
16942:     if (!aContentLocation)
16942:         return NS_OK;
16942: 
16942:     nsCAutoString scheme;
16942:     rv = aContentLocation->GetScheme(scheme);
16942:     nsCAutoString lscheme;
16942:     ToLowerCase(scheme, lscheme);
16942:     if (!lscheme.EqualsLiteral("ftp") &&
16942:         !lscheme.EqualsLiteral("http") &&
16942:         !lscheme.EqualsLiteral("https"))
16942:         return NS_OK;
16942:     if (g_panning > 0)
16942:       *aDecision = nsIContentPolicy::REJECT_REQUEST;
16942:     return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseClick(nsIDOMEvent* aDOMEvent)
16942: {
16942:   return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseDblClick(nsIDOMEvent* aDOMEvent)
16942: {
16942:   return NS_OK;
16908: }
16908: 
16908: NS_IMETHODIMP
16908: nsWidgetUtils::HandleEvent(nsIDOMEvent* aDOMEvent)
16908: {
16908:   return NS_OK;
16908: }
16908: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseOver(nsIDOMEvent* aDOMEvent)
16942: {
16942:   return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::MouseOut(nsIDOMEvent* aDOMEvent)
16942: {
16942:   return NS_OK;
16942: }
16942: 
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::DragMove(nsIDOMEvent* aDOMEvent)
16942: {
16942:   return NS_OK;
16942: }
16942: 
16942: NS_IMETHODIMP
16942: nsWidgetUtils::ShouldProcess(PRUint32          aContentType,
16942:                              nsIURI           *aContentLocation,
16942:                              nsIURI           *aRequestingLocation,
16942:                              nsISupports      *aRequestingContext,
16942:                              const nsACString &aMimeGuess,
16942:                              nsISupports      *aExtra,
16942:                              PRInt16          *aDecision)
16942: {
16942:     *aDecision = nsIContentPolicy::ACCEPT;
16942:     return NS_OK;
16942: }
16942: 
16942: PRBool
16942: nsWidgetUtils::IsXULNode(nsIDOMNode *aNode, PRUint32 *aType)
16929: {
16929:   PRBool retval = PR_FALSE;
16929:   if (!aNode) return retval;
16929: 
16929:   nsString sorigNode;
16929:   aNode->GetNodeName(sorigNode);
16929:   if (sorigNode.EqualsLiteral("#document"))
16929:     return retval;
16929:   retval = StringBeginsWith(sorigNode, NS_LITERAL_STRING("xul:"));
16929: 
16929:   if (!aType) return retval;
16929: 
16929:   if (sorigNode.EqualsLiteral("xul:thumb")
16929:       || sorigNode.EqualsLiteral("xul:vbox")
16929:       || sorigNode.EqualsLiteral("xul:spacer"))
16929:     *aType = PR_FALSE; // Magic
16929:   else if (sorigNode.EqualsLiteral("xul:slider"))
16929:     *aType = 2; // Magic
16929:   else if (sorigNode.EqualsLiteral("xul:scrollbarbutton"))
16929:     *aType = 3; // Magic
16929: 
16929:   return retval;
16929: }
16929: 
16929: nsresult
16929: nsWidgetUtils::GetDOMWindowByNode(nsIDOMNode *aNode, nsIDOMWindow * *aDOMWindow)
16929: {
68870:   nsresult rv;
16929:   nsCOMPtr<nsIDOMDocument> nodeDoc;
68870:   rv = aNode->GetOwnerDocument(getter_AddRefs(nodeDoc));
16929:   NS_ENSURE_SUCCESS(rv, rv);
68870:   nsCOMPtr<nsIDOMDocumentView> docView = do_QueryInterface(nodeDoc, &rv);
16929:   NS_ENSURE_SUCCESS(rv, rv);
68870:   nsCOMPtr<nsIDOMAbstractView> absView;
68870:   NS_ENSURE_SUCCESS(rv, rv);
68870:   rv = docView->GetDefaultView(getter_AddRefs(absView));
68870:   NS_ENSURE_SUCCESS(rv, rv);
68870:   nsCOMPtr<nsIDOMWindow> window = do_QueryInterface(absView, &rv);
68870:   NS_ENSURE_SUCCESS(rv, rv);
68870:   *aDOMWindow = window;
68870:   NS_IF_ADDREF(*aDOMWindow);
16929:   return rv;
16929: }
16929: 
16908: void
16908: nsWidgetUtils::GetChromeEventHandler(nsIDOMWindow *aDOMWin,
16908:                                  nsIDOMEventTarget **aChromeTarget)
16908: {
16908:     nsCOMPtr<nsPIDOMWindow> privateDOMWindow(do_QueryInterface(aDOMWin));
16908:     nsPIDOMEventTarget* chromeEventHandler = nsnull;
16908:     if (privateDOMWindow) {
16908:         chromeEventHandler = privateDOMWindow->GetChromeEventHandler();
16908:     }
16908: 
16908:     nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(chromeEventHandler));
16908: 
16908:     *aChromeTarget = target;
16908:     NS_IF_ADDREF(*aChromeTarget);
16908: }
16908: 
16908: void
16908: nsWidgetUtils::RemoveWindowListeners(nsIDOMWindow *aDOMWin)
16908: {
16908:     nsresult rv;
16908:     nsCOMPtr<nsIDOMEventTarget> chromeEventHandler;
16908:     GetChromeEventHandler(aDOMWin, getter_AddRefs(chromeEventHandler));
16908:     if (!chromeEventHandler) {
16908:         return;
16908:     }
16908: 
16908:     // Use capturing, otherwise the normal find next will get activated when ours should
16908:     nsCOMPtr<nsPIDOMEventTarget> piTarget(do_QueryInterface(chromeEventHandler));
16908: 
16908:     // Remove DOM Text listener for IME text events
16908:     rv = piTarget->RemoveEventListenerByIID(static_cast<nsIDOMMouseListener*>(this),
16908:                                             NS_GET_IID(nsIDOMMouseListener));
16908:     if (NS_FAILED(rv)) {
16908:         NS_WARNING("Failed to add Mouse Motion listener\n");
16908:         return;
16908:     }
16908:     rv = piTarget->RemoveEventListenerByIID(static_cast<nsIDOMMouseMotionListener*>(this),
16908:                                             NS_GET_IID(nsIDOMMouseMotionListener));
16908:     if (NS_FAILED(rv)) {
16908:         NS_WARNING("Failed to add Mouse Motion listener\n");
16908:         return;
16908:     }
16908: }
16908: 
16908: void
16908: nsWidgetUtils::AttachWindowListeners(nsIDOMWindow *aDOMWin)
16908: {
16908:     nsresult rv;
16908:     nsCOMPtr<nsIDOMEventTarget> chromeEventHandler;
16908:     GetChromeEventHandler(aDOMWin, getter_AddRefs(chromeEventHandler));
16908:     if (!chromeEventHandler) {
16908:         return;
16908:     }
16908: 
16908:     // Use capturing, otherwise the normal find next will get activated when ours should
16908:     nsCOMPtr<nsPIDOMEventTarget> piTarget(do_QueryInterface(chromeEventHandler));
16908: 
16908:     // Attach menu listeners, this will help us ignore keystrokes meant for menus
16908:     rv = piTarget->AddEventListenerByIID(static_cast<nsIDOMMouseListener*>(this),
16908:                                          NS_GET_IID(nsIDOMMouseListener));
16908:     if (NS_FAILED(rv)) {
16908:         NS_WARNING("Failed to add Mouse Motion listener\n");
16908:         return;
16908:     }
16908:     rv = piTarget->AddEventListenerByIID(static_cast<nsIDOMMouseMotionListener*>(this),
16908:                                          NS_GET_IID(nsIDOMMouseMotionListener));
16908:     if (NS_FAILED(rv)) {
16908:         NS_WARNING("Failed to add Mouse Motion listener\n");
16908:         return;
16908:     }
16908: }
16908: 
16908: nsWidgetUtils::~nsWidgetUtils()
16908: {
16908: }
16908: 
16942: NS_IMPL_ISUPPORTS5(nsWidgetUtils, nsIObserver, nsIDOMMouseMotionListener, nsIDOMMouseListener, nsIContentPolicy, nsISupportsWeakReference)
16908: 
16908: NS_IMETHODIMP
16908: nsWidgetUtils::Observe(nsISupports *aSubject, const char *aTopic, const PRUnichar *aData)
16908: {
16908:   nsresult rv;
16908:   if (!strcmp(aTopic,"domwindowopened")) 
16908:   {
16908:     nsCOMPtr<nsIDOMWindow> chromeWindow = do_QueryInterface(aSubject);
16908:     if (chromeWindow)
16908:       AttachWindowListeners(chromeWindow);
16908:     return NS_OK;
16908:   }
16908: 
16908:   if (!strcmp(aTopic,"domwindowclosed")) 
16908:   {
16908:     nsCOMPtr<nsIDOMWindow> chromeWindow = do_QueryInterface(aSubject);
16908:     RemoveWindowListeners(chromeWindow);
16908:     return NS_OK;
16908:   }
16908: 
16908:   return NS_OK;
16908: }
16908: 
16908: //------------------------------------------------------------------------------
16908: //  XPCOM REGISTRATION BELOW
16908: //------------------------------------------------------------------------------
16908: 
16908: #define WidgetUtils_CID \
16908: {  0x0ced17b6, 0x96ed, 0x4030, \
16908: {0xa1, 0x34, 0x77, 0xcb, 0x66, 0x10, 0xa8, 0xf6} }
16908: 
16908: #define WidgetUtils_ContractID "@mozilla.org/extensions/widgetutils;1"
16908: 
16908: static NS_METHOD WidgetUtilsRegistration(nsIComponentManager *aCompMgr,
16908:                                          nsIFile *aPath,
16908:                                          const char *registryLocation,
16908:                                          const char *componentType,
16908:                                          const nsModuleComponentInfo *info)
16908: {
16908:     nsresult rv;
16908: 
16908:     nsCOMPtr<nsIServiceManager> servman = do_QueryInterface((nsISupports*)aCompMgr, &rv);
16908:     if (NS_FAILED(rv))
16908:         return rv;
16908: 
16908:     nsCOMPtr<nsICategoryManager> catman;
16908:     servman->GetServiceByContractID(NS_CATEGORYMANAGER_CONTRACTID,
16908:                                     NS_GET_IID(nsICategoryManager),
16908:                                     getter_AddRefs(catman));
16908: 
16908:     if (NS_FAILED(rv))
16908:         return rv;
16908: 
16908:     char* previous = nsnull;
16908:     rv = catman->AddCategoryEntry("app-startup",
16908:                                   "WidgetUtils",
16908:                                   WidgetUtils_ContractID,
16908:                                   PR_TRUE,
16908:                                   PR_TRUE,
16908:                                   &previous);
16908:     if (previous)
16908:         nsMemory::Free(previous);
16942:     rv = catman->AddCategoryEntry("content-policy",
16942:                                   "WidgetUtils",
16942:                                   WidgetUtils_ContractID,
16942:                                   PR_TRUE,
16942:                                   PR_TRUE,
16942:                                   &previous);
16942:     if (previous)
16942:         nsMemory::Free(previous);
16908: 
16908:     return rv;
16908: }
16908: 
16908: static NS_METHOD WidgetUtilsUnregistration(nsIComponentManager *aCompMgr,
16908:                                            nsIFile *aPath,
16908:                                            const char *registryLocation,
16908:                                            const nsModuleComponentInfo *info)
16908: {
16908:     nsresult rv;
16908: 
16908:     nsCOMPtr<nsIServiceManager> servman = do_QueryInterface((nsISupports*)aCompMgr, &rv);
16908:     if (NS_FAILED(rv))
16908:         return rv;
16908: 
16908:     nsCOMPtr<nsICategoryManager> catman;
16908:     servman->GetServiceByContractID(NS_CATEGORYMANAGER_CONTRACTID,
16908:                                     NS_GET_IID(nsICategoryManager),
16908:                                     getter_AddRefs(catman));
16908: 
16908:     if (NS_FAILED(rv))
16908:         return rv;
16908: 
16908:     rv = catman->DeleteCategoryEntry("app-startup",
16908:                                      "WidgetUtils",
16908:                                      PR_TRUE);
16942:     rv = catman->DeleteCategoryEntry("content-policy",
16942:                                      "WidgetUtils",
16942:                                      PR_TRUE);
16908: 
16908:     return rv;
16908: }
16908: 
16908: NS_GENERIC_FACTORY_CONSTRUCTOR(nsWidgetUtils)
16908: 
16908:   static const nsModuleComponentInfo components[] =
16908: {
16908:   { "nsWidgetUtilsService",
16908:     WidgetUtils_CID,
16908:     WidgetUtils_ContractID,
16908:     nsWidgetUtilsConstructor,
16908:     WidgetUtilsRegistration,
16908:     WidgetUtilsUnregistration
16908:   }
16908: };
16908: 
16908: NS_IMPL_NSGETMODULE(nsWidgetUtilsModule, components)
