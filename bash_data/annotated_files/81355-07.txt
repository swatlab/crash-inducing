72926: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
72926:  * ***** BEGIN LICENSE BLOCK *****
72926:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
72926:  *
72926:  * The contents of this file are subject to the Mozilla Public License Version
72926:  * 1.1 (the "License"); you may not use this file except in compliance with
72926:  * the License. You may obtain a copy of the License at
72926:  * http://www.mozilla.org/MPL/
72926:  *
72926:  * Software distributed under the License is distributed on an "AS IS" basis,
72926:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
72926:  * for the specific language governing rights and limitations under the
72926:  * License.
72926:  *
72926:  * The Original Code is Mozilla Corporation code.
72926:  *
72926:  * The Initial Developer of the Original Code is Mozilla Foundation.
72926:  * Portions created by the Initial Developer are Copyright (C) 2011
72926:  * the Initial Developer. All Rights Reserved.
72926:  *
72926:  * Contributor(s):
72926:  *  Benoit Girard <bgirard@mozilla.com>
72926:  *
72926:  * Alternatively, the contents of this file may be used under the terms of
72926:  * either the GNU General Public License Version 2 or later (the "GPL"), or
72926:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
72926:  * in which case the provisions of the GPL or the LGPL are applicable instead
72926:  * of those above. If you wish to allow use of your version of this file only
72926:  * under the terms of either the GPL or the LGPL, and not to allow others to
72926:  * use your version of this file under the terms of the MPL, indicate your
72926:  * decision by deleting the provisions above and replace them with the notice
72926:  * and other provisions required by the GPL or the LGPL. If you do not delete
72926:  * the provisions above, a recipient may use your version of this file under
72926:  * the terms of any one of the MPL, the GPL or the LGPL.
72926:  *
72926:  * ***** END LICENSE BLOCK ***** */
72926: 
72926: #include "LayerManagerD3D9.h"
72926: #include "ShadowBufferD3D9.h"
72926: 
72926: #include "gfxWindowsSurface.h"
72926: #include "gfxWindowsPlatform.h"
72926: 
72926: 
72926: namespace mozilla {
72926: namespace layers {
72926: 
72926: void 
72926: ShadowBufferD3D9::Upload(gfxASurface* aUpdate, 
72926:                          const nsIntRect& aVisibleRect)
72926: {
72926: 
72926:   gfxIntSize size = aUpdate->GetSize();
72926: 
72926:   if (GetSize() != nsIntSize(size.width, size.height)) {
81355:     HRESULT hr = mLayer->device()->CreateTexture(size.width, size.height, 1,
72926:                                                  D3DUSAGE_DYNAMIC,
72926:                                                  D3DFMT_A8R8G8B8,
72926:                                                  D3DPOOL_DEFAULT, getter_AddRefs(mTexture), NULL);
81355:     if (FAILED(hr)) {
81355:       mLayer->ReportFailure(NS_LITERAL_CSTRING("ShadowBufferD3D9::Upload(): Failed to create texture"),
81355:                             hr);
81355:       return;
81355:     }
72926: 
72926:     mTextureRect = aVisibleRect;
72926:   }
72926: 
72926:   LockTextureRectD3D9 textureLock(mTexture);
72926:   if (!textureLock.HasLock()) {
72926:     NS_WARNING("Failed to lock ShadowBufferD3D9 texture.");
72926:     return;
72926:   }
72926: 
72926:   D3DLOCKED_RECT r = textureLock.GetLockRect();
72926: 
72926:   nsRefPtr<gfxImageSurface> imgSurface =
72926:     new gfxImageSurface((unsigned char *)r.pBits,
72926:                         GetSize(),
72926:                         r.Pitch,
72926:                         gfxASurface::ImageFormatARGB32);
72926: 
72926:   nsRefPtr<gfxContext> context = new gfxContext(imgSurface);
72926:   context->SetSource(aUpdate);
72926:   context->SetOperator(gfxContext::OPERATOR_SOURCE);
72926:   context->Paint();
72926: 
72926:   imgSurface = NULL;
72926: }
72926: 
72926: void 
72926: ShadowBufferD3D9::RenderTo(LayerManagerD3D9 *aD3DManager, 
72926:                            const nsIntRegion& aVisibleRegion)
72926: {
72926:   mLayer->SetShaderTransformAndOpacity();
72926: 
72926:   aD3DManager->SetShaderMode(DeviceManagerD3D9::RGBALAYER);
72926:   mLayer->device()->SetTexture(0, mTexture);
72926: 
72926:   nsIntRegionRectIterator iter(aVisibleRegion);
72926: 
72926:   const nsIntRect *iterRect;
72926:   while ((iterRect = iter.Next())) {
72926:     mLayer->device()->SetVertexShaderConstantF(CBvLayerQuad,
72926:                                        ShaderConstantRect(iterRect->x,
72926:                                                           iterRect->y,
72926:                                                           iterRect->width,
72926:                                                           iterRect->height),
72926:                                        1);
72926: 
72926:     mLayer->device()->SetVertexShaderConstantF(CBvTextureCoords,
72926:       ShaderConstantRect(
72926:         (float)(iterRect->x - mTextureRect.x) / (float)mTextureRect.width,
72926:         (float)(iterRect->y - mTextureRect.y) / (float)mTextureRect.height,
72926:         (float)iterRect->width / (float)mTextureRect.width,
72926:         (float)iterRect->height / (float)mTextureRect.height), 1);
72926: 
72926:     mLayer->device()->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
72926:   }
72926: }
72926: 
72926: } /* namespace layers */
72926: } /* namespace mozilla */
