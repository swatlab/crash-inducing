     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsPrintObject.h"
     1: #include "nsIContentViewer.h"
     1: #include "nsIDOMDocument.h"
 28371: #include "nsContentUtils.h"
 35581: #include "nsIInterfaceRequestorUtils.h"
 35581: #include "nsPIDOMWindow.h"
 35581: #include "nsGkAtoms.h"
 35581: #include "nsComponentManagerUtils.h"
 35581: #include "nsIDocShellTreeItem.h"
 60499: #include "nsIBaseWindow.h"
     1:                                                    
     1: //---------------------------------------------------
     1: //-- nsPrintObject Class Impl
     1: //---------------------------------------------------
     1: nsPrintObject::nsPrintObject() :
106838:   mContent(nullptr), mFrameType(eFrame), mParent(nullptr),
 80486:   mHasBeenPrinted(false), mDontPrint(true), mPrintAsIs(false),
127689:   mInvisible(false), mDidCreateDocShell(false),
     1:   mShrinkRatio(1.0), mZoomRatio(1.0)
     1: {
 71899:   MOZ_COUNT_CTOR(nsPrintObject);
     1: }
     1: 
     1: 
     1: nsPrintObject::~nsPrintObject()
     1: {
 71899:   MOZ_COUNT_DTOR(nsPrintObject);
108991:   for (uint32_t i=0;i<mKids.Length();i++) {
 24551:     nsPrintObject* po = mKids[i];
     1:     delete po;
     1:   }
     1: 
     1:   DestroyPresentation();
 60499:   if (mDidCreateDocShell && mDocShell) {
 60499:     nsCOMPtr<nsIBaseWindow> baseWin(do_QueryInterface(mDocShell));
 60499:     if (baseWin) {
 60499:       baseWin->Destroy();
 60499:     }
 60499:   }                            
106838:   mDocShell = nullptr;
106838:   mTreeOwner = nullptr; // mTreeOwner must be released after mDocShell; 
     1: }
     1: 
     1: //------------------------------------------------------------------
     1: nsresult 
 35581: nsPrintObject::Init(nsIDocShell* aDocShell, nsIDOMDocument* aDoc,
 79445:                     bool aPrintPreview)
     1: {
 35581:   mPrintPreview = aPrintPreview;
 35581: 
 35581:   if (mPrintPreview || mParent) {
     1:     mDocShell = aDocShell;
 35581:   } else {
 57279:     mTreeOwner = do_GetInterface(aDocShell);
 35581:     nsCOMPtr<nsIDocShellTreeItem> item = do_QueryInterface(aDocShell);
108991:     int32_t itemType = 0;
 35581:     item->GetItemType(&itemType);
 35581:     // Create a container docshell for printing.
 35581:     mDocShell = do_CreateInstance("@mozilla.org/docshell;1");
 35581:     NS_ENSURE_TRUE(mDocShell, NS_ERROR_OUT_OF_MEMORY);
 80486:     mDidCreateDocShell = true;
 35581:     nsCOMPtr<nsIDocShellTreeItem> newItem = do_QueryInterface(mDocShell);
 35581:     newItem->SetItemType(itemType);
 57279:     newItem->SetTreeOwner(mTreeOwner);
 35581:   }
     1:   NS_ENSURE_TRUE(mDocShell, NS_ERROR_FAILURE);
     1: 
 35581:   nsCOMPtr<nsIDOMDocument> dummy = do_GetInterface(mDocShell);
     1:   nsCOMPtr<nsIContentViewer> viewer;
 35581:   mDocShell->GetContentViewer(getter_AddRefs(viewer));
 35581:   NS_ENSURE_STATE(viewer);
     1: 
 35581:   nsCOMPtr<nsIDocument> doc = do_QueryInterface(aDoc);
 35581:   NS_ENSURE_STATE(doc);
     1: 
 35581:   if (mParent) {
 35581:     nsCOMPtr<nsPIDOMWindow> window = doc->GetWindow();
 35581:     if (window) {
 35581:       mContent = do_QueryInterface(window->GetFrameElementInternal());
 35581:     }
 35581:     mDocument = doc;
 35581:     return NS_OK;
 35581:   }
     1: 
 35581:   mDocument = doc->CreateStaticClone(mDocShell);
 35581:   nsCOMPtr<nsIDOMDocument> clonedDOMDoc = do_QueryInterface(mDocument);
 35581:   NS_ENSURE_STATE(clonedDOMDoc);
 35581: 
 35581:   viewer->SetDOMDocument(clonedDOMDoc);
     1:   return NS_OK;
     1: }
     1: 
     1: //------------------------------------------------------------------
     1: // Resets PO by destroying the presentation
     1: void 
     1: nsPrintObject::DestroyPresentation()
     1: {
     1:   if (mPresShell) {
     1:     mPresShell->EndObservingDocument();
 28371:     nsAutoScriptBlocker scriptBlocker;
128003:     nsCOMPtr<nsIPresShell> shell = mPresShell;
128003:     mPresShell = nullptr;
128003:     shell->Destroy();
     1:   }
126235:   mPresContext = nullptr;
106838:   mViewManager = nullptr;
     1: }
     1: 
