 33404: <!DOCTYPE HTML>
 33404: <html>
 33404: <!--
 33404: https://bugzilla.mozilla.org/show_bug.cgi?id=517078
 33404: 
 33404: Tests for plugin stream error conditions.
 33404: -->
 33404: <head>
 33404:   <title>NPAPI Stream Error Tests</title>
 33404:   <script type="text/javascript" 
 33404:           src="/tests/SimpleTest/SimpleTest.js"></script>
 33404:   <link rel="stylesheet" type="text/css" 
 33404:         href="/tests/SimpleTest/test.css" />
 33404: </head>
 33404: <body onload="runNextTest()">
 33404: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=517078">
 33404:   Mozilla Bug 517078</a> - Plugin Stream Error Tests
 33404: <p id="display"></p>
 33404: <div id="content" style="display: none">
 33404: 
 33404: </div>
 33404: <div id="test">
 33404: <script class="testbody" type="text/javascript">
 33404: ////
 33404: // These tests verify that nothing "bad" happens when a plugin returns an
 33404: // error from one of the NPP_ stream functions.  "Bad" is defined here
 33404: // as the plugin being terminated, or NPP_ stream functions being
 33404: // called inappropriately by the browser after the plugin has returned
 33404: // a stream error.
 33404: //
 33404: 
 33404: function $(id) { return document.getElementById(id); }
 33404: 
 33404: SimpleTest.waitForExplicitFinish();
 33404: 
 33404: 
 33404: var tests = [
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_newstream",
 33404:     "failurecode": "1",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_newstream",
 33404:     "failurecode": "3",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_newstream",
 33404:     "failurecode": "5",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "geturl": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_newstream",
 33404:     "failurecode": "1",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_write",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "asfile",
 33404:     "functiontofail": "npp_write",
 33404:     "frame": "testframe"
 33404:   },
 33404:   {
 33404:     "src": "loremipsum.txt",
 33404:     "streammode": "normal",
 33404:     "functiontofail": "npp_destroystream",
 33404:     "failurecode": "1",
 33404:     "frame": "testframe"
 33404:   },
 33404: ];
 33404: 
 33404: function iframeonload(evt) {
 33404:   var contentLength = evt.target.contentDocument.body.innerHTML.length;
 33404:   var plugin = gTestWindow.document.getElementById("embedtest");
 33404:   var functionToFail = plugin.getAttribute("functiontofail");
 33404:   if (contentLength > 0) {
 33404:     is(evt.target.contentDocument.body.innerHTML, "pass",
 33404:       "test frame has unexpected content");
 33404:     setTimeout(function() {
 33404:       // This verifies that the plugin hasn't been unloaded, and that
 33404:       // no calls to NPP_ functions have been made unexpectedly.
 33404:       is(plugin.getError(), "pass", "plugin reported an error");
 33404:       gTestWindow.close();
 33404:       setTimeout(runNextTest, 10);
 33404:     }, functionToFail == "npp_newstream" ? 500 : 10);
 33404:   }
 33404: }
 33404: 
 33404: var index = 0;
 33404: var gTestWindow;
 33404: function runNextTest() {
126098:   if (index == tests.length * 2) {
 33404:     SimpleTest.finish();
 33404:     return;
 33404:   }
 33404: 
 33404:   gTestWindow = window.open("plugin_window.html",
 33404:                             "",
 33404:                             "width=620,height=320");
 33404: }
 33404: 
 33404: function continueTest() {
126098:   // We run each test as an embed and an object, as their initial stream
126098:   // handling differs.
126098:   var tag = index % 2 ? "embed" : "object";
126098:   var test = tests[Math.floor(index / 2)];
 33404: 
 33404:   var p = gTestWindow.document.createElement("p");
 33404:   p.innerHTML = "Plugin Stream Test " + index;
 33404:   gTestWindow.document.getElementById("test").appendChild(p);
 33404: 
 33404:   if (test.frame) {
 33404:     var iframe = gTestWindow.document.createElement("iframe");
 33404:     iframe.name = test.frame;
 33404:     iframe.onload = iframeonload;
 33404:     gTestWindow.document.getElementById("test").appendChild(iframe);
 33404:   }
 33404: 
126098:   var plugin = gTestWindow.document.createElement(tag);
126098:   plugin.setAttribute("id", "embedtest");
126098:   plugin.setAttribute("style", "width: 400px; height: 100px;");
126098:   plugin.setAttribute("type", "application/x-test");
 33404:   for (var name in test) {
126098:     if (tag == "embed") {
126098:       plugin.setAttribute(name, test[name]);
126098:     } else if (name == "src") {
126098:       plugin.setAttribute("data", test[name]);
126098:     } else {
126098:       var param = document.createElement("param");
126098:       param.name = name;
126098:       param.value = test[name];
126098:       plugin.appendChild(param);
 33404:     }
126098:   }
126098:   gTestWindow.document.getElementById("test").appendChild(plugin);
 33404: 
 33404:   gTestWindow.document.getElementById("test")
 33404:                       .appendChild(document.createElement("br"));
 33404: 
 33404:   index++;
 33404: }
 33404: 
 33404: </script>
 33404: </div>
 33404: </body>
 33404: </html>
 33404: 
