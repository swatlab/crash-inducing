    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla browser.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications, Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Travis Bogard <travis@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsXULWindow_h__
    1: #define nsXULWindow_h__
    1: 
    1: // Local Includes
    1: #include "nsChromeTreeOwner.h"
    1: #include "nsContentTreeOwner.h"
    1: 
    1: // Helper classes
    1: #include "nsCOMPtr.h"
25835: #include "nsTArray.h"
    1: #include "nsString.h"
    1: #include "nsWeakReference.h"
    1: #include "nsCOMArray.h"
    1: 
    1: // Interfaces needed
    1: #include "nsIBaseWindow.h"
    1: #include "nsIDocShell.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIDOMWindowInternal.h"
    1: #include "nsIInterfaceRequestor.h"
    1: #include "nsIInterfaceRequestorUtils.h"
    1: #include "nsIWidget.h"
    1: #include "nsIXULWindow.h"
    1: #include "nsIPrompt.h"
    1: #include "nsIAuthPrompt.h"
    1: #include "nsGUIEvent.h"
    1: #include "nsIXULBrowserWindow.h"
    1: #include "nsIWeakReference.h"
    1: 
    1: // nsXULWindow
    1: 
    1: #define NS_XULWINDOW_IMPL_CID                         \
    1: { /* 2a38ef7e-3174-44ad-a785-b5a863cf5588 */          \
    1:      0x2a38ef7e,                                      \
    1:      0x3174,                                          \
    1:      0x44ad,                                          \
    1:    { 0xa7, 0x85, 0xb5, 0xa8, 0x63, 0xcf, 0x55, 0x88 } \
    1: }
    1: 
25835: class nsContentShellInfo;
25835: 
    1: class nsXULWindow : public nsIBaseWindow,
    1:                     public nsIInterfaceRequestor,
    1:                     public nsIXULWindow,
    1:                     public nsSupportsWeakReference
    1: {
    1: friend class nsChromeTreeOwner;
    1: friend class nsContentTreeOwner;
    1: 
    1: public:
    1:    NS_DECL_ISUPPORTS
    1: 
    1:    NS_DECL_NSIINTERFACEREQUESTOR
    1:    NS_DECL_NSIXULWINDOW
    1:    NS_DECL_NSIBASEWINDOW
    1: 
    1:    NS_DECLARE_STATIC_IID_ACCESSOR(NS_XULWINDOW_IMPL_CID)
    1: 
    1:    void LockUntilChromeLoad() { mLockedUntilChromeLoad = PR_TRUE; }
    1:    PRBool IsLocked() const { return mLockedUntilChromeLoad; }
    1: 
    1: protected:
    1:    enum persistentAttributes {
    1:      PAD_MISC =         0x1,
    1:      PAD_POSITION =     0x2,
    1:      PAD_SIZE =         0x4
    1:    };
    1: 
    1:    nsXULWindow();
    1:    virtual ~nsXULWindow();
    1: 
    1:    NS_IMETHOD EnsureChromeTreeOwner();
    1:    NS_IMETHOD EnsureContentTreeOwner();
    1:    NS_IMETHOD EnsurePrimaryContentTreeOwner();
    1:    NS_IMETHOD EnsurePrompter();
    1:    NS_IMETHOD EnsureAuthPrompter();
    1:    
    1:    void OnChromeLoaded();
    1:    void StaggerPosition(PRInt32 &aRequestedX, PRInt32 &aRequestedY,
    1:                         PRInt32 aSpecWidth, PRInt32 aSpecHeight);
    1:    PRBool     LoadPositionFromXUL();
    1:    PRBool     LoadSizeFromXUL();
    1:    PRBool     LoadMiscPersistentAttributesFromXUL();
    1:    nsresult   LoadChromeHidingFromXUL();
    1:    NS_IMETHOD LoadWindowClassFromXUL();
    1:    NS_IMETHOD LoadIconFromXUL();
    1:    NS_IMETHOD SavePersistentAttributes();
    1: 
    1:    NS_IMETHOD GetWindowDOMWindow(nsIDOMWindowInternal** aDOMWindow);
    1:    NS_IMETHOD GetWindowDOMElement(nsIDOMElement** aDOMElement);
    1:    NS_IMETHOD GetDOMElementById(char* aID, nsIDOMElement** aDOMElement);
    1: 
 6683:    // See nsIDocShellTreeOwner for docs on next two methods
    1:    NS_HIDDEN_(nsresult) ContentShellAdded(nsIDocShellTreeItem* aContentShell,
    1:                                           PRBool aPrimary, PRBool aTargetable,
    1:                                           const nsAString& aID);
    1:    NS_HIDDEN_(nsresult) ContentShellRemoved(nsIDocShellTreeItem* aContentShell);
    1:    NS_IMETHOD SizeShellTo(nsIDocShellTreeItem* aShellItem, PRInt32 aCX, 
    1:       PRInt32 aCY);
    1:    NS_IMETHOD ExitModalLoop(nsresult aStatus);
    1:    NS_IMETHOD CreateNewChromeWindow(PRInt32 aChromeFlags,
    1:       nsIAppShell* aAppShell, nsIXULWindow **_retval);
    1:    NS_IMETHOD CreateNewContentWindow(PRInt32 aChromeFlags,
    1:       nsIAppShell* aAppShell, nsIXULWindow **_retval);
    1: 
    1:    void       EnableParent(PRBool aEnable);
    1:    PRBool     ConstrainToZLevel(PRBool aImmediate, nsWindowZ *aPlacement,
    1:                                 nsIWidget *aReqBelow, nsIWidget **aActualBelow);
    1:    void       PlaceWindowLayersBehind(PRUint32 aLowLevel, PRUint32 aHighLevel,
    1:                                       nsIXULWindow *aBehind);
    1:    void       SetContentScrollbarVisibility(PRBool aVisible);
    1:    PRBool     GetContentScrollbarVisibility();
    1:    void       PersistentAttributesDirty(PRUint32 aDirtyFlags);
26484:    PRInt32    AppUnitsPerDevPixel();
    1: 
    1:    nsChromeTreeOwner*      mChromeTreeOwner;
    1:    nsContentTreeOwner*     mContentTreeOwner;
    1:    nsContentTreeOwner*     mPrimaryContentTreeOwner;
    1:    nsCOMPtr<nsIWidget>     mWindow;
    1:    nsCOMPtr<nsIDocShell>   mDocShell;
    1:    nsCOMPtr<nsIDOMWindowInternal>  mDOMWindow;
    1:    nsCOMPtr<nsIWeakReference> mParentWindow;
    1:    nsCOMPtr<nsIPrompt>     mPrompter;
    1:    nsCOMPtr<nsIAuthPrompt> mAuthPrompter;
    1:    nsCOMPtr<nsIXULBrowserWindow> mXULBrowserWindow;
    1:    nsCOMPtr<nsIDocShellTreeItem> mPrimaryContentShell;
25835:    nsTArray<nsContentShellInfo*> mContentShells; // array of doc shells by id
    1:    nsresult                mModalStatus;
    1:    PRPackedBool            mContinueModalLoop;
    1:    PRPackedBool            mDebuting;       // being made visible right now
    1:    PRPackedBool            mChromeLoaded; // True when chrome has loaded
    1:    PRPackedBool            mShowAfterLoad;
    1:    PRPackedBool            mIntrinsicallySized; 
    1:    PRPackedBool            mCenterAfterLoad;
    1:    PRPackedBool            mIsHiddenWindow;
    1:    PRPackedBool            mLockedUntilChromeLoad;
    1:    PRUint32                mContextFlags;
    1:    PRUint32                mBlurSuppressionLevel;
    1:    PRUint32                mPersistentAttributesDirty; // persistentAttributes
    1:    PRUint32                mPersistentAttributesMask;
    1:    PRUint32                mChromeFlags;
26484:    PRUint32                mAppPerDev; // sometimes needed when we can't get
26484:                                        // it from the widget
    1:    nsString                mTitle;
    1: 
    1:    nsCOMArray<nsIWeakReference> mTargetableShells; // targetable shells only
    1: };
    1: 
    1: NS_DEFINE_STATIC_IID_ACCESSOR(nsXULWindow, NS_XULWINDOW_IMPL_CID)
    1: 
    1: // nsContentShellInfo
25835: // Used to map shell IDs to nsIDocShellTreeItems.
    1: 
    1: class nsContentShellInfo
    1: {
    1: public:
    1:    nsContentShellInfo(const nsAString& aID,
    1:                       nsIWeakReference* aContentShell);
    1:    ~nsContentShellInfo();
    1: 
    1: public:
    1:    nsAutoString id; // The identifier of the content shell
    1:    nsWeakPtr child; // content shell (weak reference to nsIDocShellTreeItem)
    1: };
    1: 
    1: #endif /* nsXULWindow_h__ */
