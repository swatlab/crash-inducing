 84764: /* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 84764: /* vim: set ts=2 et sw=2 tw=80: */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 84764: "use strict";
 84764: 
 84764: const Cu = Components.utils;
 84764: 
 84764: // Tilt notifications dispatched through the nsIObserverService.
 84764: const TILT_NOTIFICATIONS = {
 84764: 
 88393:   // Fires when Tilt starts the initialization.
 88393:   INITIALIZING: "tilt-initializing",
 88393: 
 88393:   // Fires immediately after initialization is complete.
 88393:   // (when the canvas overlay is visible and the 3D mesh is completely created)
 84764:   INITIALIZED: "tilt-initialized",
 84764: 
 88393:   // Fires immediately before the destruction is started.
 88393:   DESTROYING: "tilt-destroying",
 88393: 
 88393:   // Fires immediately before the destruction is finished.
 88393:   // (just before the canvas overlay is removed from its parent node)
 88393:   BEFORE_DESTROYED: "tilt-before-destroyed",
 88393: 
 88393:   // Fires when Tilt is completely destroyed.
 84764:   DESTROYED: "tilt-destroyed",
 84764: 
 84764:   // Fires when Tilt is shown (after a tab-switch).
 84764:   SHOWN: "tilt-shown",
 84764: 
 84764:   // Fires when Tilt is hidden (after a tab-switch).
 88393:   HIDDEN: "tilt-hidden",
 88393: 
 88393:   // Fires once Tilt highlights an element in the page.
 88393:   HIGHLIGHTING: "tilt-highlighting",
 88393: 
 88393:   // Fires once Tilt stops highlighting any element.
 88393:   UNHIGHLIGHTING: "tilt-unhighlighting",
 88393: 
 88393:   // Fires when a node is removed from the 3D mesh.
 88393:   NODE_REMOVED: "tilt-node-removed"
 84764: };
 84764: 
 84764: Cu.import("resource://gre/modules/Services.jsm");
 84764: Cu.import("resource:///modules/devtools/TiltGL.jsm");
 84764: Cu.import("resource:///modules/devtools/TiltUtils.jsm");
 84764: Cu.import("resource:///modules/devtools/TiltVisualizer.jsm");
 84764: 
 84764: let EXPORTED_SYMBOLS = ["Tilt"];
 84764: 
 84764: /**
 84764:  * Object managing instances of the visualizer.
 84764:  *
 84764:  * @param {Window} aWindow
 84764:  *                 the chrome window used by each visualizer instance
 84764:  */
 84764: function Tilt(aWindow)
 84764: {
 84764:   /**
 84764:    * Save a reference to the top-level window.
 84764:    */
 84764:   this.chromeWindow = aWindow;
 84764: 
 84764:   /**
 84764:    * All the instances of TiltVisualizer.
 84764:    */
 84764:   this.visualizers = {};
 84764: 
 84764:   /**
 84764:    * Shortcut for accessing notifications strings.
 84764:    */
 84764:   this.NOTIFICATIONS = TILT_NOTIFICATIONS;
 84764: }
 84764: 
 84764: Tilt.prototype = {
 84764: 
 84764:   /**
 84764:    * Initializes a visualizer for the current tab.
 84764:    */
 84764:   initialize: function T_initialize()
 84764:   {
 84764:     let id = this.currentWindowId;
 84764: 
 84764:     // if the visualizer for the current tab is already open, destroy it now
 84764:     if (this.visualizers[id]) {
 87863:       this.destroy(id, true);
 84764:       return;
 84764:     }
 84764: 
 84764:     // create a visualizer instance for the current tab
 84764:     this.visualizers[id] = new TiltVisualizer({
 88395:       chromeWindow: this.chromeWindow,
 88395:       contentWindow: this.chromeWindow.gBrowser.selectedBrowser.contentWindow,
 84764:       parentNode: this.chromeWindow.gBrowser.selectedBrowser.parentNode,
 88393:       notifications: this.NOTIFICATIONS
 84764:     });
 84764: 
 84764:     // make sure the visualizer object was initialized properly
 84764:     if (!this.visualizers[id].isInitialized()) {
 84764:       this.destroy(id);
100193:       this.failureCallback && this.failureCallback();
 84764:       return;
 84764:     }
 84764: 
 88393:     Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.INITIALIZING, null);
 84764:   },
 84764: 
 84764:   /**
 91042:    * Starts destroying a specific instance of the visualizer.
 84764:    *
 84764:    * @param {String} aId
 84764:    *                 the identifier of the instance in the visualizers array
 87863:    * @param {Boolean} aAnimateFlag
 87863:    *                  optional, set to true to display a destruction transition
 84764:    */
 87863:   destroy: function T_destroy(aId, aAnimateFlag)
 84764:   {
 91042:     // if the visualizer is destroyed or destroying, don't do anything
 91042:     if (!this.visualizers[aId] || this._isDestroying) {
 84764:       return;
 84764:     }
 91042:     this._isDestroying = true;
 87863: 
 87863:     let controller = this.visualizers[aId].controller;
 87863:     let presenter = this.visualizers[aId].presenter;
 88192: 
 88393:     let content = presenter.contentWindow;
 88393:     let pageXOffset = content.pageXOffset * presenter.transforms.zoom;
 88393:     let pageYOffset = content.pageYOffset * presenter.transforms.zoom;
 91042:     TiltUtils.setDocumentZoom(this.chromeWindow, presenter.transforms.zoom);
 88393: 
 91042:     // if we're not doing any outro animation, just finish destruction directly
 91042:     if (!aAnimateFlag) {
 91042:       this._finish(aId);
 91042:       return;
 91042:     }
 91042: 
 91042:     // otherwise, trigger the outro animation and notify necessary observers
 88393:     Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.DESTROYING, null);
 88192: 
 87863:     controller.removeEventListeners();
 88192:     controller.arcball.reset([-pageXOffset, -pageYOffset]);
 91042:     presenter.executeDestruction(this._finish.bind(this, aId));
 91042:   },
 91042: 
 91042:   /**
 91042:    * Finishes detroying a specific instance of the visualizer.
 91042:    *
 91042:    * @param {String} aId
 91042:    *                 the identifier of the instance in the visualizers array
 91042:    */
 91042:   _finish: function T__finish(aId)
 91042:   {
 91042:     this.visualizers[aId].removeOverlay();
 91042:     this.visualizers[aId].cleanup();
 91042:     this.visualizers[aId] = null;
 91042: 
 91042:     this._isDestroying = false;
 91042:     this.chromeWindow.gBrowser.selectedBrowser.focus();
 91042:     Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.DESTROYED, null);
 84764:   },
 84764: 
 84764:   /**
 84764:    * Handles any supplementary post-initialization work, done immediately
 88393:    * after a TILT_NOTIFICATIONS.INITIALIZING notification.
 84764:    */
 88393:   _whenInitializing: function T__whenInitializing()
 84764:   {
 84764:     this._whenShown();
 84764:   },
 84764: 
 84764:   /**
 84764:    * Handles any supplementary post-destruction work, done immediately
 84764:    * after a TILT_NOTIFICATIONS.DESTROYED notification.
 84764:    */
 84764:   _whenDestroyed: function T__whenDestroyed()
 84764:   {
 84764:     this._whenHidden();
 84764:   },
 84764: 
 84764:   /**
 84764:    * Handles any necessary changes done when the Tilt surface is shown,
 84764:    * after a TILT_NOTIFICATIONS.SHOWN notification.
 84764:    */
 84764:   _whenShown: function T__whenShown()
 84764:   {
 84764:     this.tiltButton.checked = true;
 84764:   },
 84764: 
 84764:   /**
 84764:    * Handles any necessary changes done when the Tilt surface is hidden,
 84764:    * after a TILT_NOTIFICATIONS.HIDDEN notification.
 84764:    */
 84764:   _whenHidden: function T__whenHidden()
 84764:   {
 84764:     this.tiltButton.checked = false;
 84764:   },
 84764: 
 84764:   /**
 84764:    * Handles the event fired when a tab is selected.
 84764:    */
 84764:   _onTabSelect: function T__onTabSelect()
 84764:   {
 88555:     if (this.currentInstance) {
 84764:       Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.SHOWN, null);
 84764:     } else {
 84764:       Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.HIDDEN, null);
 84764:     }
 84764:   },
 84764: 
 84764:   /**
 84764:    * A node was selected in the Inspector.
 84764:    * Called from InspectorUI.
 84764:    *
 84764:    * @param {Element} aNode
 84764:    *                  the newly selected node
 84764:    */
 84764:   update: function T_update(aNode) {
 88555:     if (this.currentInstance) {
 89941:       this.currentInstance.presenter.highlightNode(aNode, "moveIntoView");
 84764:     }
 84764:   },
 84764: 
 84764:   /**
 84764:    * Add the browser event listeners to handle state changes.
 84764:    * Called from InspectorUI.
 84764:    */
 84764:   setup: function T_setup()
 84764:   {
 84764:     if (this._setupFinished) {
 84764:       return;
 84764:     }
 84764: 
 84764:     // load the preferences from the devtools.tilt branch
 84764:     TiltVisualizer.Prefs.load();
 84764: 
 84764:     // hide the button in the Inspector toolbar if Tilt is not enabled
 84764:     this.tiltButton.hidden = !this.enabled;
 84764: 
 84764:     // add the necessary observers to handle specific notifications
 84764:     Services.obs.addObserver(
 88393:       this._whenInitializing.bind(this), TILT_NOTIFICATIONS.INITIALIZING, false);
 84764:     Services.obs.addObserver(
 84764:       this._whenDestroyed.bind(this), TILT_NOTIFICATIONS.DESTROYED, false);
 84764:     Services.obs.addObserver(
 84764:       this._whenShown.bind(this), TILT_NOTIFICATIONS.SHOWN, false);
 84764:     Services.obs.addObserver(
 84764:       this._whenHidden.bind(this), TILT_NOTIFICATIONS.HIDDEN, false);
 88555: 
 84764:     Services.obs.addObserver(function(aSubject, aTopic, aWinId) {
 84764:       this.destroy(aWinId); }.bind(this),
 84764:       this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.DESTROYED, false);
 84764: 
 84764:     this.chromeWindow.gBrowser.tabContainer.addEventListener("TabSelect",
 84764:       this._onTabSelect.bind(this), false);
 84764: 
 84764: 
 84764:     // FIXME: this shouldn't be done here, see bug #705131
 84764:     let onOpened = function() {
 91038:       if (this.inspector && this.highlighter && this.currentInstance) {
 91038:         this.inspector.stopInspecting();
100193:         this.inspectButton.disabled = true;
 91038:         this.highlighter.hide();
 84764:       }
 84764:     }.bind(this);
 84764: 
 84764:     let onClosed = function() {
 91038:       if (this.inspector && this.highlighter) {
100193:         this.inspectButton.disabled = false;
 91038:         this.highlighter.show();
 91038:       }
 84764:     }.bind(this);
 84764: 
 84764:     Services.obs.addObserver(onOpened,
 84764:       this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
 84764:     Services.obs.addObserver(onClosed,
 84764:       this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
 84764:     Services.obs.addObserver(onOpened,
 88393:       TILT_NOTIFICATIONS.INITIALIZING, false);
 84764:     Services.obs.addObserver(onClosed,
 84764:       TILT_NOTIFICATIONS.DESTROYED, false);
 84764: 
 84764: 
 84764:     this._setupFinished = true;
 84764:   },
 84764: 
 84764:   /**
 84764:    * Returns true if this tool is enabled.
 84764:    */
 84764:   get enabled()
 84764:   {
 84764:     return (TiltVisualizer.Prefs.enabled &&
 87429:            (TiltGL.isWebGLForceEnabled() || TiltGL.isWebGLSupported()));
 84764:   },
 84764: 
 84764:   /**
 84764:    * Gets the ID of the current window object to identify the visualizer.
 84764:    */
 84764:   get currentWindowId()
 84764:   {
 88555:     return TiltUtils.getWindowId(
 88555:       this.chromeWindow.gBrowser.selectedBrowser.contentWindow);
 88555:   },
 88555: 
 88555:   /**
 88555:    * Gets the visualizer instance for the current tab.
 88555:    */
 88555:   get currentInstance()
 88555:   {
 88555:     return this.visualizers[this.currentWindowId];
 84764:   },
 84764: 
 84764:   /**
 91038:    * Gets the current InspectorUI instance.
 91038:    */
 91038:   get inspector()
 91038:   {
 91038:     return this.chromeWindow.InspectorUI;
 91038:   },
 91038: 
 91038:   /**
 91038:    * Gets the current Highlighter instance from the InspectorUI.
 91038:    */
 91038:   get highlighter()
 91038:   {
 91038:     return this.inspector.highlighter;
 91038:   },
 91038: 
 91038:   /**
 84764:    * Gets the Tilt button in the Inspector toolbar.
 84764:    */
 84764:   get tiltButton()
 84764:   {
 91042:     return this.chromeWindow.document.getElementById("inspector-3D-button");
100193:   },
100193: 
100193:   /**
100193:    * Gets the Inspect button in the Inspector toolbar.
100193:    */
100193:   get inspectButton() {
100193:     return this.chromeWindow.document.getElementById("inspector-inspect-toolbutton");
 84764:   }
 84764: };
