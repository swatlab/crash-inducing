 47243: // Copyright (c) 2010 Google Inc.
 47243: // All rights reserved.
 47243: //
 47243: // Redistribution and use in source and binary forms, with or without
 47243: // modification, are permitted provided that the following conditions are
 47243: // met:
 47243: //
 47243: //     * Redistributions of source code must retain the above copyright
 47243: // notice, this list of conditions and the following disclaimer.
 47243: //     * Redistributions in binary form must reproduce the above
 47243: // copyright notice, this list of conditions and the following disclaimer
 47243: // in the documentation and/or other materials provided with the
 47243: // distribution.
 47243: //     * Neither the name of Google Inc. nor the names of its
 47243: // contributors may be used to endorse or promote products derived from
 47243: // this software without specific prior written permission.
 47243: //
 47243: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 47243: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 47243: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 47243: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 47243: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 47243: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 47243: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 47243: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 47243: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 47243: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 47243: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 47243: 
 47243: // Original author: Jim Blandy <jimb@mozilla.com> <jimb@red-bean.com>
 47243: 
 47243: // dwarf_cu_to_module.cc: Unit tests for google_breakpad::DwarfCUToModule.
 47243: 
114869: #include <string>
114869: #include <utility>
 47243: #include <vector>
 47243: 
 47243: #include "breakpad_googletest_includes.h"
 47243: #include "common/dwarf_cu_to_module.h"
114869: #include "common/using_std_string.h"
 47243: 
114869: using std::make_pair;
 47243: using std::vector;
 47243: 
 47243: using dwarf2reader::AttributeList;
 47243: using dwarf2reader::DIEHandler;
 47243: using dwarf2reader::DwarfTag;
 47243: using dwarf2reader::DwarfAttribute;
 47243: using dwarf2reader::DwarfForm;
 47243: using dwarf2reader::DwarfInline;
 47243: using dwarf2reader::RootDIEHandler;
 47243: using google_breakpad::DwarfCUToModule;
 47243: using google_breakpad::Module;
 47243: 
 47243: using ::testing::_;
 47243: using ::testing::AtMost;
 47243: using ::testing::Invoke;
 47243: using ::testing::Return;
 47243: using ::testing::Test;
 47243: using ::testing::TestWithParam;
 47243: using ::testing::Values;
 47243: using ::testing::ValuesIn;
 47243: 
 47243: // Mock classes.
 47243: 
 47243: class MockLineToModuleFunctor: public DwarfCUToModule::LineToModuleFunctor {
 47243:  public:
 47243:   MOCK_METHOD4(mock_apply, void(const char *program, uint64 length,
 47243:                                 Module *module, vector<Module::Line> *lines));
 47243:   void operator()(const char *program, uint64 length,
 47243:                   Module *module, vector<Module::Line> *lines) {
 47243:     mock_apply(program, length, module, lines);
 47243:   }
 47243: };
 47243: 
 47243: class MockWarningReporter: public DwarfCUToModule::WarningReporter {
 47243:  public:
 47243:   MockWarningReporter(const string &filename, uint64 cu_offset)
 47243:       : DwarfCUToModule::WarningReporter(filename, cu_offset) { }
 47243:   MOCK_METHOD1(SetCUName, void(const string &name));
 47243:   MOCK_METHOD2(UnknownSpecification, void(uint64 offset, uint64 target));
 47243:   MOCK_METHOD2(UnknownAbstractOrigin, void(uint64 offset, uint64 target));
 47243:   MOCK_METHOD1(MissingSection, void(const string &section_name));
 47243:   MOCK_METHOD1(BadLineInfoOffset, void(uint64 offset));
 47243:   MOCK_METHOD1(UncoveredFunction, void(const Module::Function &function));
 47243:   MOCK_METHOD1(UncoveredLine, void(const Module::Line &line));
114869:   MOCK_METHOD1(UnnamedFunction, void(uint64 offset));
 47243: };
 47243: 
 47243: // A fixture class including all the objects needed to handle a
 47243: // compilation unit, and their entourage. It includes member functions
 47243: // for doing common kinds of setup and tests.
 47243: class CUFixtureBase {
 47243:  public:
 47243: 
 47243:   // If we have:
 47243:   //
 47243:   //   vector<Module::Line> lines;
 47243:   //   AppendLinesFunctor appender(lines);
 47243:   //
 47243:   // then doing:
 47243:   //
 47243:   //   appender(line_program, length, module, line_vector);
 47243:   //
 47243:   // will append lines to the end of line_vector.  We can use this with
 47243:   // MockLineToModuleFunctor like this:
 47243:   //
 47243:   //   MockLineToModuleFunctor l2m;
 47243:   //   EXPECT_CALL(l2m, mock_apply(_,_,_,_))
 47243:   //       .WillOnce(DoAll(Invoke(appender), Return()));
 47243:   //
 47243:   // in which case calling l2m with some line vector will append lines.
 47243:   class AppendLinesFunctor {
 47243:    public:
 47243:     AppendLinesFunctor(const vector<Module::Line> *lines) : lines_(lines) { }
 47243:     void operator()(const char *program, uint64 length,
 47243:                     Module *module, vector<Module::Line> *lines) {
 47243:       lines->insert(lines->end(), lines_->begin(), lines_->end());
 47243:     }
 47243:    private:
 47243:     const vector<Module::Line> *lines_;
 47243:   };
 47243: 
 47243:   CUFixtureBase()
 47243:       : module_("module-name", "module-os", "module-arch", "module-id"),
 47243:         file_context_("dwarf-filename", &module_),
 47243:         language_(dwarf2reader::DW_LANG_none),
 47243:         language_signed_(false),
 47243:         appender_(&lines_),
 47243:         reporter_("dwarf-filename", 0xcf8f9bb6443d29b5LL),
 47243:         root_handler_(&file_context_, &line_reader_, &reporter_),
 47243:         functions_filled_(false) {
 47243:     // By default, expect no warnings to be reported, and expect the
 47243:     // compilation unit's name to be provided. The test can override
 47243:     // these expectations.
 47243:     EXPECT_CALL(reporter_, SetCUName("compilation-unit-name")).Times(1);
 47243:     EXPECT_CALL(reporter_, UnknownSpecification(_, _)).Times(0);
 47243:     EXPECT_CALL(reporter_, UnknownAbstractOrigin(_, _)).Times(0);
 47243:     EXPECT_CALL(reporter_, MissingSection(_)).Times(0);
 47243:     EXPECT_CALL(reporter_, BadLineInfoOffset(_)).Times(0);
 47243:     EXPECT_CALL(reporter_, UncoveredFunction(_)).Times(0);
 47243:     EXPECT_CALL(reporter_, UncoveredLine(_)).Times(0);
114869:     EXPECT_CALL(reporter_, UnnamedFunction(_)).Times(0);
 47243: 
 47243:     // By default, expect the line program reader not to be invoked. We
 47243:     // may override this in StartCU.
 47243:     EXPECT_CALL(line_reader_, mock_apply(_,_,_,_)).Times(0);
 47243: 
 47243:     // The handler will consult this section map to decide what to
 47243:     // pass to our line reader.
114869:     file_context_.section_map[".debug_line"] = make_pair(dummy_line_program_,
 47243:                                                          dummy_line_size_);
 47243:   }
 47243: 
 47243:   // Add a line with the given address, size, filename, and line
 47243:   // number to the end of the statement list the handler will receive
 47243:   // when it invokes its LineToModuleFunctor. Call this before calling
 47243:   // StartCU.
 47243:   void PushLine(Module::Address address, Module::Address size,
 47243:                 const string &filename, int line_number);
 47243: 
 47243:   // Use LANGUAGE for the compilation unit. More precisely, arrange
 47243:   // for StartCU to pass the compilation unit's root DIE a
 47243:   // DW_AT_language attribute whose value is LANGUAGE.
 47243:   void SetLanguage(dwarf2reader::DwarfLanguage language) {
 47243:     language_ = language;
 47243:   }
 47243: 
 47243:   // If SIGNED true, have StartCU report DW_AT_language as a signed
 47243:   // attribute; if false, have it report it as unsigned.
 47243:   void SetLanguageSigned(bool is_signed) { language_signed_ = is_signed; }
 47243: 
 47243:   // Call the handler this.root_handler_'s StartCompilationUnit and
 47243:   // StartRootDIE member functions, passing it appropriate attributes as
 47243:   // determined by prior calls to PushLine and SetLanguage. Leave
 47243:   // this.root_handler_ ready to hear about children: call
 47243:   // this.root_handler_.EndAttributes, but not this.root_handler_.Finish.
 47243:   void StartCU();
 47243: 
 47243:   // Add some strange attributes/form pairs to the end of ATTRS.
 47243:   void PushBackStrangeAttributes(dwarf2reader::AttributeList *attrs);
 47243: 
 47243:   // Have HANDLER process some strange attribute/form/value triples.
 47243:   // These will match those promised by PushBackStrangeAttributes.
 47243:   void ProcessStrangeAttributes(dwarf2reader::DIEHandler *handler);
 47243: 
 47243:   // Start a child DIE of PARENT with the given tag and name. Leave
 47243:   // the handler ready to hear about children: call EndAttributes, but
 47243:   // not Finish.
 47243:   DIEHandler *StartNamedDIE(DIEHandler *parent, DwarfTag tag,
 47243:                             const string &name);
 47243:  
 47243:   // Start a child DIE of PARENT with the given tag and a
 47243:   // DW_AT_specification attribute whose value is SPECIFICATION. Leave
 47243:   // the handler ready to hear about children: call EndAttributes, but
 47243:   // not Finish. If NAME is non-zero, use it as the DW_AT_name
 47243:   // attribute.
 47243:   DIEHandler *StartSpecifiedDIE(DIEHandler *parent, DwarfTag tag,
114869:                                 uint64 specification, const char *name = NULL);
 47243:  
 47243:   // Define a function as a child of PARENT with the given name,
 47243:   // address, and size. Call EndAttributes and Finish; one cannot
 47243:   // define children of the defined function's DIE.
 47243:   void DefineFunction(DIEHandler *parent, const string &name,
118328:                       Module::Address address, Module::Address size,
118328:                       const char* mangled_name);
 47243: 
 47243:   // Create a declaration DIE as a child of PARENT with the given
 47243:   // offset, tag and name. If NAME is the empty string, don't provide
 47243:   // a DW_AT_name attribute. Call EndAttributes and Finish.
 47243:   void DeclarationDIE(DIEHandler *parent, uint64 offset,
118328:                       DwarfTag tag, const string &name,
118328:                       const string &mangled_name);
 47243: 
 47243:   // Create a definition DIE as a child of PARENT with the given tag
 47243:   // that refers to the declaration DIE at offset SPECIFICATION as its
 47243:   // specification. If NAME is non-empty, pass it as the DW_AT_name
 47243:   // attribute. If SIZE is non-zero, record ADDRESS and SIZE as
 47243:   // low_pc/high_pc attributes.
 47243:   void DefinitionDIE(DIEHandler *parent, DwarfTag tag,
 47243:                      uint64 specification, const string &name,
 47243:                      Module::Address address = 0, Module::Address size = 0);
 47243: 
 47243:   // Create an inline DW_TAG_subprogram DIE as a child of PARENT.  If
 47243:   // SPECIFICATION is non-zero, then the DIE refers to the declaration DIE at
 47243:   // offset SPECIFICATION as its specification.  If Name is non-empty, pass it
 47243:   // as the DW_AT_name attribute.
 47243:   void AbstractInstanceDIE(DIEHandler *parent, uint64 offset,
 47243:                            DwarfInline type, uint64 specification,
 47243:                            const string &name,
 47243:                            DwarfForm form = dwarf2reader::DW_FORM_data1);
 47243: 
 47243:   // Create a DW_TAG_subprogram DIE as a child of PARENT that refers to
 47243:   // ORIGIN in its DW_AT_abstract_origin attribute.  If NAME is the empty
 47243:   // string, don't provide a DW_AT_name attribute.
 47243:   void DefineInlineInstanceDIE(DIEHandler *parent, const string &name,
 47243:                                uint64 origin, Module::Address address,
 47243:                                Module::Address size);
 47243: 
 47243:   // The following Test* functions should be called after calling
 47243:   // this.root_handler_.Finish. After that point, no further calls
 47243:   // should be made on the handler.
 47243: 
 47243:   // Test that the number of functions defined in the module this.module_ is
 47243:   // equal to EXPECTED.
 47243:   void TestFunctionCount(size_t expected);
 47243: 
 47243:   // Test that the I'th function (ordered by address) in the module
 47243:   // this.module_ has the given name, address, and size, and that its
 47243:   // parameter size is zero.
 47243:   void TestFunction(int i, const string &name,
 47243:                     Module::Address address, Module::Address size);
 47243:   
 47243:   // Test that the number of source lines owned by the I'th function
 47243:   // in the module this.module_ is equal to EXPECTED.
 47243:   void TestLineCount(int i, size_t expected);
 47243: 
 47243:   // Test that the J'th line (ordered by address) of the I'th function
 47243:   // (again, by address) has the given address, size, filename, and
 47243:   // line number.
 47243:   void TestLine(int i, int j, Module::Address address, Module::Address size,
 47243:                 const string &filename, int number);
 47243: 
 47243:   // Actual objects under test.
 47243:   Module module_;
 47243:   DwarfCUToModule::FileContext file_context_;
 47243: 
 47243:   // If this is not DW_LANG_none, we'll pass it as a DW_AT_language
 47243:   // attribute to the compilation unit. This defaults to DW_LANG_none.
 47243:   dwarf2reader::DwarfLanguage language_;
 47243: 
 47243:   // If this is true, report DW_AT_language as a signed value; if false,
 47243:   // report it as an unsigned value.
 47243:   bool language_signed_;
 47243: 
 47243:   // If this is not empty, we'll give the CU a DW_AT_stmt_list
 47243:   // attribute that, when passed to line_reader_, adds these lines to the
 47243:   // provided lines array.
 47243:   vector<Module::Line> lines_;
 47243: 
 47243:   // Mock line program reader.
 47243:   MockLineToModuleFunctor line_reader_;
 47243:   AppendLinesFunctor appender_;
 47243:   static const char dummy_line_program_[];
 47243:   static const size_t dummy_line_size_;
 47243:   
 47243:   MockWarningReporter reporter_;
 47243:   DwarfCUToModule root_handler_;
 47243: 
 47243:  private:
 47243:   // Fill functions_, if we haven't already.
 47243:   void FillFunctions();
 47243: 
 47243:   // If functions_filled_ is true, this is a table of functions we've
 47243:   // extracted from module_, sorted by address.
 47243:   vector<Module::Function *> functions_;
 47243:   // True if we have filled the above vector with this.module_'s function list.
 47243:   bool functions_filled_;
 47243: };
 47243: 
 47243: const char CUFixtureBase::dummy_line_program_[] = "lots of fun data";
 47243: const size_t CUFixtureBase::dummy_line_size_ = 
 47243:     sizeof (CUFixtureBase::dummy_line_program_);
 47243: 
 47243: void CUFixtureBase::PushLine(Module::Address address, Module::Address size,
 47243:                              const string &filename, int line_number) {
 47243:   Module::Line l;
 47243:   l.address = address;
 47243:   l.size = size;
 47243:   l.file = module_.FindFile(filename);
 47243:   l.number = line_number;
 47243:   lines_.push_back(l);
 47243: }
 47243: 
 47243: void CUFixtureBase::StartCU() {
 47243:   // If we have lines, make the line reader expect to be invoked at
 47243:   // most once. (Hey, if the handler can pass its tests without
 47243:   // bothering to read the line number data, that's great.)
 47243:   // Have it add the lines passed to PushLine. Otherwise, leave the 
 47243:   // initial expectation (no calls) in force.
 47243:   if (!lines_.empty())
 47243:     EXPECT_CALL(line_reader_,
 47243:                 mock_apply(&dummy_line_program_[0], dummy_line_size_,
 47243:                            &module_, _))
 47243:         .Times(AtMost(1))
 47243:         .WillOnce(DoAll(Invoke(appender_), Return()));
 47243: 
 47243:   ASSERT_TRUE(root_handler_
 47243:               .StartCompilationUnit(0x51182ec307610b51ULL, 0x81, 0x44,
 47243:                                     0x4241b4f33720dd5cULL, 3));
 47243:   {
 47243:     dwarf2reader::AttributeList attrs;
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                               dwarf2reader::DW_FORM_strp));
 47243:     if (!lines_.empty())
 47243:       attrs.push_back(make_pair(dwarf2reader::DW_AT_stmt_list,
 47243:                                 dwarf2reader::DW_FORM_ref4));
 47243:     if (language_ != dwarf2reader::DW_LANG_none)
 47243:       attrs.push_back(make_pair(dwarf2reader::DW_AT_language,
 47243:                                 language_signed_
 47243:                                 ? dwarf2reader::DW_FORM_sdata 
 47243:                                 : dwarf2reader::DW_FORM_udata));
 47243:     ASSERT_TRUE(root_handler_.StartRootDIE(0x02e56bfbda9e7337ULL,
 47243:                                            dwarf2reader::DW_TAG_compile_unit,
 47243:                                            attrs));
 47243:   }
 47243:   root_handler_.ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                        dwarf2reader::DW_FORM_strp,
 47243:                                        "compilation-unit-name");
 47243:   if (!lines_.empty())
 47243:     root_handler_.ProcessAttributeUnsigned(dwarf2reader::DW_AT_stmt_list,
 47243:                                            dwarf2reader::DW_FORM_ref4,
 47243:                                            0);
 47243:   if (language_ != dwarf2reader::DW_LANG_none) {
 47243:     if (language_signed_)
 47243:       root_handler_.ProcessAttributeSigned(dwarf2reader::DW_AT_language,
 47243:                                            dwarf2reader::DW_FORM_sdata,
 47243:                                            language_);
 47243:     else
 47243:       root_handler_.ProcessAttributeUnsigned(dwarf2reader::DW_AT_language,
 47243:                                              dwarf2reader::DW_FORM_udata,
 47243:                                              language_);
 47243:   }
 47243:   ASSERT_TRUE(root_handler_.EndAttributes());
 47243: }
 47243: 
 47243: void CUFixtureBase::PushBackStrangeAttributes(
 47243:     dwarf2reader::AttributeList *attrs) {
 47243:   attrs->push_back(make_pair((DwarfAttribute) 0xf560dead,
 47243:                              (DwarfForm) 0x4106e4db));
 47243:   attrs->push_back(make_pair((DwarfAttribute) 0x85380095,
 47243:                              (DwarfForm) 0x0f16fe87));
 47243:   attrs->push_back(make_pair((DwarfAttribute) 0xf7f7480f,
 47243:                              (DwarfForm) 0x829e038a));
 47243:   attrs->push_back(make_pair((DwarfAttribute) 0xa55ffb51,
 47243:                              (DwarfForm) 0x2f43b041));
 47243:   attrs->push_back(make_pair((DwarfAttribute) 0x2fde304a,
 47243:                              (DwarfForm) 0x895ffa23));
 47243: }
 47243: 
 47243: void CUFixtureBase::ProcessStrangeAttributes(
 47243:     dwarf2reader::DIEHandler *handler) {
 47243:   handler->ProcessAttributeUnsigned((DwarfAttribute) 0xf560dead,
 47243:                                     (DwarfForm) 0x4106e4db,
 47243:                                     0xa592571997facda1ULL);
 47243:   handler->ProcessAttributeSigned((DwarfAttribute) 0x85380095,
 47243:                                   (DwarfForm) 0x0f16fe87,
 47243:                                   0x12602a4e3bf1f446LL);
 47243:   handler->ProcessAttributeReference((DwarfAttribute) 0xf7f7480f,
 47243:                                      (DwarfForm) 0x829e038a,
 47243:                                      0x50fddef44734fdecULL);
 47243:   static const char buffer[10] = "frobynode";
 47243:   handler->ProcessAttributeBuffer((DwarfAttribute) 0xa55ffb51,
 47243:                                   (DwarfForm) 0x2f43b041,
 47243:                                   buffer, sizeof(buffer));
 47243:   handler->ProcessAttributeString((DwarfAttribute) 0x2f43b041,
 47243:                                   (DwarfForm) 0x895ffa23,
 47243:                                   "strange string");
 47243: }
 47243: 
 47243: DIEHandler *CUFixtureBase::StartNamedDIE(DIEHandler *parent,
 47243:                                          DwarfTag tag,
 47243:                                          const string &name) {
 47243:   dwarf2reader::AttributeList attrs;
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                             dwarf2reader::DW_FORM_strp));
 47243:   PushBackStrangeAttributes(&attrs);
 47243:   dwarf2reader::DIEHandler *handler
 47243:     = parent->FindChildHandler(0x8f4c783c0467c989ULL, tag, attrs);
 47243:   if (!handler)
 47243:     return NULL;
 47243:   handler->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                   dwarf2reader::DW_FORM_strp,
 47243:                                   name);
 47243:   ProcessStrangeAttributes(handler);
 47243:   if (!handler->EndAttributes()) {
 47243:     handler->Finish();
 47243:     delete handler;
 47243:     return NULL;
 47243:   }
 47243:     
 47243:   return handler;
 47243: }
 47243: 
 47243: DIEHandler *CUFixtureBase::StartSpecifiedDIE(DIEHandler *parent,
 47243:                                              DwarfTag tag,
 47243:                                              uint64 specification,
 47243:                                              const char *name) {
 47243:   dwarf2reader::AttributeList attrs;
 47243:   if (name)
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                               dwarf2reader::DW_FORM_strp));
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_specification,
 47243:                             dwarf2reader::DW_FORM_ref4));
 47243:   dwarf2reader::DIEHandler *handler
 47243:     = parent->FindChildHandler(0x8f4c783c0467c989ULL, tag, attrs);
 47243:   if (!handler)
 47243:     return NULL;
 47243:   if (name)
 47243:     handler->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                     dwarf2reader::DW_FORM_strp,
 47243:                                     name);
 47243:   handler->ProcessAttributeReference(dwarf2reader::DW_AT_specification,
 47243:                                      dwarf2reader::DW_FORM_ref4,
 47243:                                      specification);
 47243:   if (!handler->EndAttributes()) {
 47243:     handler->Finish();
 47243:     delete handler;
 47243:     return NULL;
 47243:   }
 47243:     
 47243:   return handler;
 47243: }
 47243: 
 47243: void CUFixtureBase::DefineFunction(dwarf2reader::DIEHandler *parent,
 47243:                                    const string &name, Module::Address address,
118328:                                    Module::Address size,
118328:                                    const char* mangled_name) {
 47243:   dwarf2reader::AttributeList func_attrs;
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                                  dwarf2reader::DW_FORM_strp));
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_low_pc,
 47243:                                  dwarf2reader::DW_FORM_addr));
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_high_pc,
 47243:                                  dwarf2reader::DW_FORM_addr));
 47243:   PushBackStrangeAttributes(&func_attrs);
 47243:   dwarf2reader::DIEHandler *func
 47243:       = parent->FindChildHandler(0xe34797c7e68590a8LL,
 47243:                                  dwarf2reader::DW_TAG_subprogram,
 47243:                                  func_attrs);
 47243:   ASSERT_TRUE(func != NULL);
 47243:   func->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                dwarf2reader::DW_FORM_strp,
 47243:                                name);
 47243:   func->ProcessAttributeUnsigned(dwarf2reader::DW_AT_low_pc,
 47243:                                  dwarf2reader::DW_FORM_addr,
 47243:                                  address);
 47243:   func->ProcessAttributeUnsigned(dwarf2reader::DW_AT_high_pc,
 47243:                                  dwarf2reader::DW_FORM_addr,
 47243:                                  address + size);
118328:   if (mangled_name)
118328:     func->ProcessAttributeString(dwarf2reader::DW_AT_MIPS_linkage_name,
118328:                                  dwarf2reader::DW_FORM_strp,
118328:                                  mangled_name);
118328: 
 47243:   ProcessStrangeAttributes(func);
 47243:   EXPECT_TRUE(func->EndAttributes());
 47243:   func->Finish();
 47243:   delete func;
 47243: }
 47243: 
 47243: void CUFixtureBase::DeclarationDIE(DIEHandler *parent, uint64 offset,
 47243:                                    DwarfTag tag,
118328:                                    const string &name,
118328:                                    const string &mangled_name) {
 47243:   dwarf2reader::AttributeList attrs;
 47243:   if (!name.empty())
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                               dwarf2reader::DW_FORM_strp));
118328: 
118328: 
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_declaration,
 47243:                             dwarf2reader::DW_FORM_flag));
 47243:   dwarf2reader::DIEHandler *die = parent->FindChildHandler(offset, tag, attrs);
 47243:   ASSERT_TRUE(die != NULL);
 47243:   if (!name.empty())
 47243:     die->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                 dwarf2reader::DW_FORM_strp,
 47243:                                 name);
118328:   if (!mangled_name.empty())
118328:     die->ProcessAttributeString(dwarf2reader::DW_AT_MIPS_linkage_name,
118328:                                 dwarf2reader::DW_FORM_strp,
118328:                                 mangled_name);
118328: 
 47243:   die->ProcessAttributeUnsigned(dwarf2reader::DW_AT_declaration,
 47243:                                 dwarf2reader::DW_FORM_flag,
 47243:                                 1);
 47243:   EXPECT_TRUE(die->EndAttributes());
 47243:   die->Finish();
 47243:   delete die;
 47243: }
 47243: 
 47243: void CUFixtureBase::DefinitionDIE(DIEHandler *parent,
 47243:                                   DwarfTag tag,
 47243:                                   uint64 specification,
 47243:                                   const string &name,
 47243:                                   Module::Address address,
 47243:                                   Module::Address size) {
 47243:   dwarf2reader::AttributeList attrs;
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_specification,
 47243:                             dwarf2reader::DW_FORM_ref4));
 47243:   if (!name.empty())
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                               dwarf2reader::DW_FORM_strp));
 47243:   if (size) {
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_low_pc,
 47243:                               dwarf2reader::DW_FORM_addr));
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_high_pc,
 47243:                               dwarf2reader::DW_FORM_addr));
 47243:   }
 47243:   dwarf2reader::DIEHandler *die
 47243:     = parent->FindChildHandler(0x6ccfea031a9e6cc9ULL, tag, attrs);
 47243:   ASSERT_TRUE(die != NULL);
 47243:   die->ProcessAttributeReference(dwarf2reader::DW_AT_specification,
 47243:                                  dwarf2reader::DW_FORM_ref4,
 47243:                                  specification);
 47243:   if (!name.empty())
 47243:     die->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                 dwarf2reader::DW_FORM_strp,
 47243:                                 name);
 47243:   if (size) {
 47243:     die->ProcessAttributeUnsigned(dwarf2reader::DW_AT_low_pc,
 47243:                                   dwarf2reader::DW_FORM_addr,
 47243:                                   address);
 47243:     die->ProcessAttributeUnsigned(dwarf2reader::DW_AT_high_pc,
 47243:                                   dwarf2reader::DW_FORM_addr,
 47243:                                   address + size);
 47243:   }
 47243:   EXPECT_TRUE(die->EndAttributes());
 47243:   die->Finish();
 47243:   delete die;
 47243: }
 47243: 
 47243: void CUFixtureBase::AbstractInstanceDIE(DIEHandler *parent,
 47243:                                         uint64 offset,
 47243:                                         DwarfInline type,
 47243:                                         uint64 specification,
 47243:                                         const string &name,
 47243:                                         DwarfForm form) {
 47243:   dwarf2reader::AttributeList attrs;
 47243:   if (specification != 0ULL)
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_specification,
 47243:                               dwarf2reader::DW_FORM_ref4));
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_inline, form));
 47243:   if (!name.empty())
 47243:     attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                               dwarf2reader::DW_FORM_strp));
 47243:   dwarf2reader::DIEHandler *die
 47243:     = parent->FindChildHandler(offset, dwarf2reader::DW_TAG_subprogram, attrs);
 47243:   ASSERT_TRUE(die != NULL);
 47243:   if (specification != 0ULL)
 47243:     die->ProcessAttributeReference(dwarf2reader::DW_AT_specification,
 47243:                                    dwarf2reader::DW_FORM_ref4,
 47243:                                    specification);
 47243:   if (form == dwarf2reader::DW_FORM_sdata) {
 47243:     die->ProcessAttributeSigned(dwarf2reader::DW_AT_inline, form, type);
 47243:   } else {
 47243:     die->ProcessAttributeUnsigned(dwarf2reader::DW_AT_inline, form, type);
 47243:   }
 47243:   if (!name.empty())
 47243:     die->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                 dwarf2reader::DW_FORM_strp,
 47243:                                 name);
 47243: 
 47243:   EXPECT_TRUE(die->EndAttributes());
 47243:   die->Finish();
 47243:   delete die;
 47243: }
 47243: 
 47243: void CUFixtureBase::DefineInlineInstanceDIE(DIEHandler *parent,
 47243:                                             const string &name,
 47243:                                             uint64 origin, 
 47243:                                             Module::Address address,
 47243:                                             Module::Address size) {
 47243:   dwarf2reader::AttributeList func_attrs;
 47243:   if (!name.empty())
 47243:     func_attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                                    dwarf2reader::DW_FORM_strp));
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_low_pc,
 47243:                                  dwarf2reader::DW_FORM_addr));
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_high_pc,
 47243:                                  dwarf2reader::DW_FORM_addr));
 47243:   func_attrs.push_back(make_pair(dwarf2reader::DW_AT_abstract_origin,
 47243:                                  dwarf2reader::DW_FORM_ref4));
 47243:   PushBackStrangeAttributes(&func_attrs);
 47243:   dwarf2reader::DIEHandler *func
 47243:       = parent->FindChildHandler(0x11c70f94c6e87ccdLL,
 47243:                                  dwarf2reader::DW_TAG_subprogram,
 47243:                                  func_attrs);
 47243:   ASSERT_TRUE(func != NULL);
 47243:   if (!name.empty()) {
 47243:     func->ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                  dwarf2reader::DW_FORM_strp,
 47243:                                  name);
 47243:   }
 47243:   func->ProcessAttributeUnsigned(dwarf2reader::DW_AT_low_pc,
 47243:                                  dwarf2reader::DW_FORM_addr,
 47243:                                  address);
 47243:   func->ProcessAttributeUnsigned(dwarf2reader::DW_AT_high_pc,
 47243:                                  dwarf2reader::DW_FORM_addr,
 47243:                                  address + size);
 47243:   func->ProcessAttributeReference(dwarf2reader::DW_AT_abstract_origin,
 47243:                                  dwarf2reader::DW_FORM_ref4,
 47243:                                  origin);
 47243:   ProcessStrangeAttributes(func);
 47243:   EXPECT_TRUE(func->EndAttributes());
 47243:   func->Finish();
 47243:   delete func;
 47243: }
 47243: 
 47243: void CUFixtureBase::FillFunctions() {
 47243:   if (functions_filled_)
 47243:     return;
 47243:   module_.GetFunctions(&functions_, functions_.end());
 47243:   sort(functions_.begin(), functions_.end(),
 47243:        Module::Function::CompareByAddress);
 47243:   functions_filled_ = true;
 47243: }
 47243: 
 47243: void CUFixtureBase::TestFunctionCount(size_t expected) {
 47243:   FillFunctions();
 47243:   ASSERT_EQ(expected, functions_.size());
 47243: }
 47243: 
 47243: void CUFixtureBase::TestFunction(int i, const string &name,
 47243:                                  Module::Address address,
 47243:                                  Module::Address size) {
 47243:   FillFunctions();
 47243:   ASSERT_LT((size_t) i, functions_.size());
 47243: 
 47243:   Module::Function *function = functions_[i];
 47243:   EXPECT_EQ(name,    function->name);
 47243:   EXPECT_EQ(address, function->address);
 47243:   EXPECT_EQ(size,    function->size);
 47243:   EXPECT_EQ(0U,      function->parameter_size);
 47243: }
 47243: 
 47243: void CUFixtureBase::TestLineCount(int i, size_t expected) {
 47243:   FillFunctions();
 47243:   ASSERT_LT((size_t) i, functions_.size());
 47243: 
 47243:   ASSERT_EQ(expected, functions_[i]->lines.size());
 47243: }
 47243: 
 47243: void CUFixtureBase::TestLine(int i, int j,
 47243:                              Module::Address address, Module::Address size,
 47243:                              const string &filename, int number) {
 47243:   FillFunctions();
 47243:   ASSERT_LT((size_t) i, functions_.size());
 47243:   ASSERT_LT((size_t) j, functions_[i]->lines.size());
 47243: 
 47243:   Module::Line *line = &functions_[i]->lines[j];
 47243:   EXPECT_EQ(address,  line->address);
 47243:   EXPECT_EQ(size,     line->size);
 47243:   EXPECT_EQ(filename, line->file->name.c_str());
 47243:   EXPECT_EQ(number,   line->number);
 47243: }
 47243: 
 47243: // Include caller locations for our test subroutines.
 47243: #define TRACE(call) do { SCOPED_TRACE("called from here"); call; } while (0)
 47243: #define PushLine(a,b,c,d)          TRACE(PushLine((a),(b),(c),(d)))
 47243: #define SetLanguage(a)             TRACE(SetLanguage(a))
 47243: #define StartCU()                  TRACE(StartCU())
118328: #define DefineFunction(a,b,c,d,e)  TRACE(DefineFunction((a),(b),(c),(d),(e)))
118328: #define DeclarationDIE(a,b,c,d,e)  TRACE(DeclarationDIE((a),(b),(c),(d),(e)))
 47243: #define DefinitionDIE(a,b,c,d,e,f) TRACE(DefinitionDIE((a),(b),(c),(d),(e),(f)))
 47243: #define TestFunctionCount(a)       TRACE(TestFunctionCount(a))
 47243: #define TestFunction(a,b,c,d)      TRACE(TestFunction((a),(b),(c),(d)))
 47243: #define TestLineCount(a,b)         TRACE(TestLineCount((a),(b)))
 47243: #define TestLine(a,b,c,d,e,f)      TRACE(TestLine((a),(b),(c),(d),(e),(f)))
 47243: 
114869: class SimpleCU: public CUFixtureBase, public Test {
 47243: };
 47243: 
114869: TEST_F(SimpleCU, OneFunc) {
 47243:   PushLine(0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL, "line-file", 246571772);
 47243: 
 47243:   StartCU();
 47243:   DefineFunction(&root_handler_, "function1",
118328:                  0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "function1", 0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL);
 47243:   TestLineCount(0, 1);
 47243:   TestLine(0, 0, 0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL, "line-file",
 47243:            246571772);
 47243: }
 47243: 
118328: TEST_F(SimpleCU, MangledName) {
118328:   PushLine(0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL, "line-file", 246571772);
118328: 
118328:   StartCU();
118328:   DefineFunction(&root_handler_, "function1",
118328:                  0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL, "_ZN1n1fEi");
118328:   root_handler_.Finish();
118328: 
118328:   TestFunctionCount(1);
118328:   TestFunction(0, "n::f(int)", 0x938cf8c07def4d34ULL, 0x55592d727f6cd01fLL);
118328: }
118328: 
114869: TEST_F(SimpleCU, IrrelevantRootChildren) {
 47243:   StartCU();
 47243:   dwarf2reader::AttributeList no_attrs;
 47243:   EXPECT_FALSE(root_handler_
 47243:                .FindChildHandler(0x7db32bff4e2dcfb1ULL,
 47243:                                  dwarf2reader::DW_TAG_lexical_block, no_attrs));
 47243: }
 47243: 
114869: TEST_F(SimpleCU, IrrelevantNamedScopeChildren) {
 47243:   StartCU();
 47243:   dwarf2reader::AttributeList no_attrs;
 47243:   DIEHandler *class_A_handler
 47243:     = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type, "class_A");
 47243:   EXPECT_TRUE(class_A_handler != NULL);
 47243:   EXPECT_FALSE(class_A_handler
 47243:                ->FindChildHandler(0x02e55999b865e4e9ULL,
 47243:                                   dwarf2reader::DW_TAG_lexical_block, 
 47243:                                   no_attrs));
 47243:   delete class_A_handler;
 47243: }
 47243: 
 47243: // Verify that FileContexts can safely be deleted unused.
114869: TEST_F(SimpleCU, UnusedFileContext) {
 47243:   Module m("module-name", "module-os", "module-arch", "module-id");
 47243:   DwarfCUToModule::FileContext fc("dwarf-filename", &m);
 47243: 
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: }
 47243: 
114869: TEST_F(SimpleCU, InlineFunction) {
 47243:   PushLine(0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL, "line-file", 75173118);
 47243: 
 47243:   StartCU();
 47243:   AbstractInstanceDIE(&root_handler_, 0x1e8dac5d507ed7abULL,
 47243:                       dwarf2reader::DW_INL_inlined, 0, "inline-name");
 47243:   DefineInlineInstanceDIE(&root_handler_, "", 0x1e8dac5d507ed7abULL,
 47243:                        0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "inline-name",
 47243:                0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243: }
 47243: 
114869: TEST_F(SimpleCU, InlineFunctionSignedAttribute) {
 47243:   PushLine(0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL, "line-file", 75173118);
 47243: 
 47243:   StartCU();
 47243:   AbstractInstanceDIE(&root_handler_, 0x1e8dac5d507ed7abULL,
 47243:                       dwarf2reader::DW_INL_inlined, 0, "inline-name",
 47243:                       dwarf2reader::DW_FORM_sdata);
 47243:   DefineInlineInstanceDIE(&root_handler_, "", 0x1e8dac5d507ed7abULL,
 47243:                        0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "inline-name",
 47243:                0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243: }
 47243: 
 47243: // Any DIE with an DW_AT_inline attribute can be cited by
 47243: // DW_AT_abstract_origin attributes --- even if the value of the
 47243: // DW_AT_inline attribute is DW_INL_not_inlined.
114869: TEST_F(SimpleCU, AbstractOriginNotInlined) {
 47243:   PushLine(0x2805c4531be6ca0eULL, 0x686b52155a8d4d2cULL, "line-file", 6111581);
 47243: 
 47243:   StartCU();
 47243:   AbstractInstanceDIE(&root_handler_, 0x93e9cdad52826b39ULL,
 47243:                       dwarf2reader::DW_INL_not_inlined, 0, "abstract-instance");
 47243:   DefineInlineInstanceDIE(&root_handler_, "", 0x93e9cdad52826b39ULL,
 47243:                           0x2805c4531be6ca0eULL, 0x686b52155a8d4d2cULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "abstract-instance",
 47243:                0x2805c4531be6ca0eULL, 0x686b52155a8d4d2cULL);
 47243: }
 47243: 
114869: TEST_F(SimpleCU, UnknownAbstractOrigin) {
 47243:   EXPECT_CALL(reporter_, UnknownAbstractOrigin(_, 1ULL)).WillOnce(Return());
114869:   EXPECT_CALL(reporter_, UnnamedFunction(0x11c70f94c6e87ccdLL))
114869:     .WillOnce(Return());
 47243:   PushLine(0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL, "line-file", 75173118);
 47243: 
 47243:   StartCU();
 47243:   AbstractInstanceDIE(&root_handler_, 0x1e8dac5d507ed7abULL,
 47243:                       dwarf2reader::DW_INL_inlined, 0, "inline-name");
 47243:   DefineInlineInstanceDIE(&root_handler_, "", 1ULL,
 47243:                        0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
114869:   TestFunction(0, "<name omitted>",
 47243:                0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243: }
 47243: 
114869: TEST_F(SimpleCU, UnnamedFunction) {
114869:   EXPECT_CALL(reporter_, UnnamedFunction(0xe34797c7e68590a8LL))
114869:     .WillOnce(Return());
114869:   PushLine(0x72b80e41a0ac1d40ULL, 0x537174f231ee181cULL, "line-file", 14044850);
114869: 
114869:   StartCU();
114869:   DefineFunction(&root_handler_, "",
118328:                  0x72b80e41a0ac1d40ULL, 0x537174f231ee181cULL, NULL);
114869:   root_handler_.Finish();
114869: 
114869:   TestFunctionCount(1);
114869:   TestFunction(0, "<name omitted>",
114869:                0x72b80e41a0ac1d40ULL, 0x537174f231ee181cULL);
114869: }
114869: 
 47243: // An address range.
 47243: struct Range {
 47243:   Module::Address start, end;
 47243: };
 47243: 
 47243: // Test data for pairing functions and lines.
 47243: struct Situation {
 47243:   // Two function intervals, and two line intervals.
 47243:   Range functions[2], lines[2];
 47243: 
 47243:   // The number of lines we expect to be assigned to each of the
 47243:   // functions, and the address ranges.
 47243:   int paired_count[2];
 47243:   Range paired[2][2];
 47243: 
 47243:   // The number of functions that are not entirely covered by lines,
 47243:   // and vice versa.
 47243:   int uncovered_functions, uncovered_lines;
 47243: };
 47243: 
 47243: #define PAIRING(func1_start, func1_end, func2_start, func2_end, \
 47243:                 line1_start, line1_end, line2_start, line2_end, \
 47243:                 func1_num_lines, func2_num_lines,               \
 47243:                 func1_line1_start, func1_line1_end,             \
 47243:                 func1_line2_start, func1_line2_end,             \
 47243:                 func2_line1_start, func2_line1_end,             \
 47243:                 func2_line2_start, func2_line2_end,             \
 47243:                 uncovered_functions, uncovered_lines)           \
 47243:   { { { func1_start, func1_end }, { func2_start, func2_end } }, \
 47243:     { { line1_start, line1_end }, { line2_start, line2_end } }, \
 47243:     { func1_num_lines, func2_num_lines },                       \
 47243:     { { { func1_line1_start, func1_line1_end },                 \
 47243:         { func1_line2_start, func1_line2_end } },               \
 47243:       { { func2_line1_start, func2_line1_end },                 \
 47243:           { func2_line2_start, func2_line2_end } } },           \
 47243:     uncovered_functions, uncovered_lines },
 47243: 
 47243: Situation situations[] = {
 47243: #include "common/testdata/func-line-pairing.h"
 47243: };
 47243: 
 47243: #undef PAIRING
 47243: 
 47243: class FuncLinePairing: public CUFixtureBase,
 47243:                        public TestWithParam<Situation> { };
 47243: 
 47243: INSTANTIATE_TEST_CASE_P(AllSituations, FuncLinePairing,
 47243:                         ValuesIn(situations));
 47243: 
 47243: TEST_P(FuncLinePairing, Pairing) {
 47243:   const Situation &s = GetParam();
 47243:   PushLine(s.lines[0].start,
 47243:            s.lines[0].end - s.lines[0].start,
 47243:            "line-file", 67636963);
 47243:   PushLine(s.lines[1].start,
 47243:            s.lines[1].end - s.lines[1].start,
 47243:            "line-file", 67636963);
 47243:   if (s.uncovered_functions)
 47243:     EXPECT_CALL(reporter_, UncoveredFunction(_))
 47243:       .Times(s.uncovered_functions)
 47243:       .WillRepeatedly(Return());
 47243:   if (s.uncovered_lines)
 47243:     EXPECT_CALL(reporter_, UncoveredLine(_))
 47243:       .Times(s.uncovered_lines)
 47243:       .WillRepeatedly(Return());
 47243: 
 47243:   StartCU();
 47243:   DefineFunction(&root_handler_, "function1",
 47243:                  s.functions[0].start, 
118328:                  s.functions[0].end - s.functions[0].start, NULL);
 47243:   DefineFunction(&root_handler_, "function2",
 47243:                  s.functions[1].start, 
118328:                  s.functions[1].end - s.functions[1].start, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "function1",
 47243:                s.functions[0].start, 
 47243:                s.functions[0].end - s.functions[0].start);
 47243:   TestLineCount(0, s.paired_count[0]);
 47243:   for (int i = 0; i < s.paired_count[0]; i++)
 47243:     TestLine(0, i, s.paired[0][i].start, 
 47243:              s.paired[0][i].end - s.paired[0][i].start, 
 47243:              "line-file", 67636963);
 47243:   TestFunction(1, "function2",
 47243:                s.functions[1].start, 
 47243:                s.functions[1].end - s.functions[1].start);
 47243:   TestLineCount(1, s.paired_count[1]);
 47243:   for (int i = 0; i < s.paired_count[1]; i++)
 47243:     TestLine(1, i, s.paired[1][i].start, 
 47243:              s.paired[1][i].end - s.paired[1][i].start, 
 47243:              "line-file", 67636963);
 47243: }
 47243: 
 47243: TEST_F(FuncLinePairing, EmptyCU) {
 47243: 
 47243:   StartCU();
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(0);
 47243: }
 47243: 
 47243: TEST_F(FuncLinePairing, LinesNoFuncs) {
 47243:   PushLine(40, 2, "line-file", 82485646);
 47243:   EXPECT_CALL(reporter_, UncoveredLine(_)).WillOnce(Return());
 47243: 
 47243:   StartCU();
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(0);
 47243: }
 47243: 
 47243: TEST_F(FuncLinePairing, FuncsNoLines) {
 47243:   EXPECT_CALL(reporter_, UncoveredFunction(_)).WillOnce(Return());
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function1", 0x127da12ffcf5c51fULL, 0x1000U,
118328: 		 NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "function1", 0x127da12ffcf5c51fULL, 0x1000U);
 47243: }
 47243: 
 47243: TEST_F(FuncLinePairing, GapThenFunction) {
 47243:   PushLine(20, 2, "line-file-2", 174314698);
 47243:   PushLine(10, 2, "line-file-1", 263008005);
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function1", 10, 2, NULL);
118328:   DefineFunction(&root_handler_, "function2", 20, 2, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "function1", 10, 2);
 47243:   TestLineCount(0, 1);
 47243:   TestLine(0, 0, 10, 2, "line-file-1", 263008005);
 47243:   TestFunction(1, "function2", 20, 2);
 47243:   TestLineCount(1, 1);
 47243:   TestLine(1, 0, 20, 2, "line-file-2", 174314698);
 47243: }
 47243: 
 47243: // If GCC emits padding after one function to align the start of
 47243: // the next, then it will attribute the padding instructions to
 47243: // the last source line of function (to reduce the size of the
 47243: // line number info), but omit it from the DW_AT_{low,high}_pc
 47243: // range given in .debug_info (since it costs nothing to be
 47243: // precise there).  If we did use at least some of the line
 47243: // we're about to skip, then assume this is what happened, and
 47243: // don't warn.
 47243: TEST_F(FuncLinePairing, GCCAlignmentStretch) {
 47243:   PushLine(10, 10, "line-file", 63351048);
 47243:   PushLine(20, 10, "line-file", 61661044);
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function1", 10, 5, NULL);
 47243:   // five-byte gap between functions, covered by line 63351048.
 47243:   // This should not elicit a warning.
118328:   DefineFunction(&root_handler_, "function2", 20, 10, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "function1", 10, 5);
 47243:   TestLineCount(0, 1);
 47243:   TestLine(0, 0, 10, 5, "line-file", 63351048);
 47243:   TestFunction(1, "function2", 20, 10);
 47243:   TestLineCount(1, 1);
 47243:   TestLine(1, 0, 20, 10, "line-file", 61661044);
 47243: }
 47243: 
 47243: // Unfortunately, neither the DWARF parser's handler interface nor the
 47243: // DIEHandler interface is capable of expressing a function that abuts
 47243: // the end of the address space: the high_pc value looks like zero.
 47243: 
 47243: TEST_F(FuncLinePairing, LineAtEndOfAddressSpace) {
 47243:   PushLine(0xfffffffffffffff0ULL, 16, "line-file", 63351048);
 47243:   EXPECT_CALL(reporter_, UncoveredLine(_)).WillOnce(Return());
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function1", 0xfffffffffffffff0ULL, 6, NULL);
118328:   DefineFunction(&root_handler_, "function2", 0xfffffffffffffffaULL, 5, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "function1", 0xfffffffffffffff0ULL, 6);
 47243:   TestLineCount(0, 1);
 47243:   TestLine(0, 0, 0xfffffffffffffff0ULL, 6, "line-file", 63351048);
 47243:   TestFunction(1, "function2", 0xfffffffffffffffaULL, 5);
 47243:   TestLineCount(1, 1);
 47243:   TestLine(1, 0, 0xfffffffffffffffaULL, 5, "line-file", 63351048);
 47243: }
 47243: 
 47243: // A function with more than one uncovered area should only be warned
 47243: // about once.
 47243: TEST_F(FuncLinePairing, WarnOnceFunc) {
 47243:   PushLine(20, 1, "line-file-2", 262951329);
 47243:   PushLine(11, 1, "line-file-1", 219964021);
 47243:   EXPECT_CALL(reporter_, UncoveredFunction(_)).WillOnce(Return());
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function", 10, 11, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "function", 10, 11);
 47243:   TestLineCount(0, 2);
 47243:   TestLine(0, 0, 11, 1, "line-file-1", 219964021);
 47243:   TestLine(0, 1, 20, 1, "line-file-2", 262951329);
 47243: }
 47243: 
 47243: // A line with more than one uncovered area should only be warned
 47243: // about once.
 47243: TEST_F(FuncLinePairing, WarnOnceLine) {
 47243:   PushLine(10, 20, "filename1", 118581871);
 47243:   EXPECT_CALL(reporter_, UncoveredLine(_)).WillOnce(Return());
 47243: 
 47243:   StartCU();
118328:   DefineFunction(&root_handler_, "function1", 11, 1, NULL);
118328:   DefineFunction(&root_handler_, "function2", 13, 1, NULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "function1", 11, 1);
 47243:   TestLineCount(0, 1);
 47243:   TestLine(0, 0, 11, 1, "filename1", 118581871);
 47243:   TestFunction(1, "function2", 13, 1);
 47243:   TestLineCount(1, 1);
 47243:   TestLine(1, 0, 13, 1, "filename1", 118581871);
 47243: }
 47243: 
 47243: class CXXQualifiedNames: public CUFixtureBase,
 47243:                          public TestWithParam<DwarfTag> { };
 47243: 
 47243: INSTANTIATE_TEST_CASE_P(VersusEnclosures, CXXQualifiedNames,
 47243:                         Values(dwarf2reader::DW_TAG_class_type,
 47243:                                dwarf2reader::DW_TAG_structure_type,
 47243:                                dwarf2reader::DW_TAG_union_type,
 47243:                                dwarf2reader::DW_TAG_namespace));
 47243: 
 47243: TEST_P(CXXQualifiedNames, TwoFunctions) {
 47243:   DwarfTag tag = GetParam();
 47243: 
 47243:   SetLanguage(dwarf2reader::DW_LANG_C_plus_plus);
 47243:   PushLine(10, 1, "filename1", 69819327);
 47243:   PushLine(20, 1, "filename2", 95115701);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *enclosure_handler = StartNamedDIE(&root_handler_, tag,
 47243:                                                 "Enclosure");
 47243:   EXPECT_TRUE(enclosure_handler != NULL);
118328:   DefineFunction(enclosure_handler, "func_B", 10, 1, NULL);
118328:   DefineFunction(enclosure_handler, "func_C", 20, 1, NULL);
 47243:   enclosure_handler->Finish();
 47243:   delete enclosure_handler;
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(2);
 47243:   TestFunction(0, "Enclosure::func_B", 10, 1);
 47243:   TestFunction(1, "Enclosure::func_C", 20, 1);
 47243: }
 47243: 
 47243: TEST_P(CXXQualifiedNames, FuncInEnclosureInNamespace) {
 47243:   DwarfTag tag = GetParam();
 47243: 
 47243:   SetLanguage(dwarf2reader::DW_LANG_C_plus_plus);
 47243:   PushLine(10, 1, "line-file", 69819327);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *namespace_handler 
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_namespace,
 47243:                       "Namespace");
 47243:   EXPECT_TRUE(namespace_handler != NULL);
 47243:   DIEHandler *enclosure_handler = StartNamedDIE(namespace_handler, tag, 
 47243:                                                 "Enclosure");
 47243:   EXPECT_TRUE(enclosure_handler != NULL);
118328:   DefineFunction(enclosure_handler, "function", 10, 1, NULL);
 47243:   enclosure_handler->Finish();
 47243:   delete enclosure_handler;
 47243:   namespace_handler->Finish();
 47243:   delete namespace_handler;
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "Namespace::Enclosure::function", 10, 1);
 47243: }
 47243: 
 47243: TEST_F(CXXQualifiedNames, FunctionInClassInStructInNamespace) {
 47243:   SetLanguage(dwarf2reader::DW_LANG_C_plus_plus);
 47243:   PushLine(10, 1, "filename1", 69819327);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *namespace_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_namespace,
 47243:                       "namespace_A");
 47243:   EXPECT_TRUE(namespace_handler != NULL);
 47243:   DIEHandler *struct_handler
 47243:       = StartNamedDIE(namespace_handler, dwarf2reader::DW_TAG_structure_type,
 47243:                       "struct_B");
 47243:   EXPECT_TRUE(struct_handler != NULL);
 47243:   DIEHandler *class_handler
 47243:       = StartNamedDIE(struct_handler, dwarf2reader::DW_TAG_class_type,
 47243:                       "class_C");
118328:   DefineFunction(class_handler, "function_D", 10, 1, NULL);
 47243:   class_handler->Finish();
 47243:   delete class_handler;
 47243:   struct_handler->Finish();
 47243:   delete struct_handler;
 47243:   namespace_handler->Finish();
 47243:   delete namespace_handler;
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "namespace_A::struct_B::class_C::function_D", 10, 1);
 47243: }
 47243: 
 47243: struct LanguageAndQualifiedName {
 47243:   dwarf2reader::DwarfLanguage language;
 47243:   const char *name;
 47243: };
 47243: 
 47243: const LanguageAndQualifiedName LanguageAndQualifiedNameCases[] = {
 47243:   { dwarf2reader::DW_LANG_none,           "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_C,              "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_C89,            "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_C99,            "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_C_plus_plus,    "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_Java,           "class_A.function_B" },
 47243:   { dwarf2reader::DW_LANG_Cobol74,        "class_A::function_B" },
 47243:   { dwarf2reader::DW_LANG_Mips_Assembler, NULL }
 47243: };
 47243: 
 47243: class QualifiedForLanguage:
 47243:     public CUFixtureBase,
 47243:     public TestWithParam<LanguageAndQualifiedName> { };
 47243:                         
 47243: INSTANTIATE_TEST_CASE_P(LanguageAndQualifiedName, QualifiedForLanguage,
 47243:                         ValuesIn(LanguageAndQualifiedNameCases));
 47243: 
 47243: TEST_P(QualifiedForLanguage, MemberFunction) {
 47243:   const LanguageAndQualifiedName &param = GetParam();
 47243: 
 47243:   PushLine(10, 1, "line-file", 212966758);
 47243:   SetLanguage(param.language);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *class_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                       "class_A");
118328:   DefineFunction(class_handler, "function_B", 10, 1, NULL);
 47243:   class_handler->Finish();
 47243:   delete class_handler;
 47243:   root_handler_.Finish();
 47243: 
 47243:   if (param.name) {
 47243:     TestFunctionCount(1);
 47243:     TestFunction(0, param.name, 10, 1);
 47243:   } else {
 47243:     TestFunctionCount(0);
 47243:   }
 47243: }
 47243: 
 47243: TEST_P(QualifiedForLanguage, MemberFunctionSignedLanguage) {
 47243:   const LanguageAndQualifiedName &param = GetParam();
 47243: 
 47243:   PushLine(10, 1, "line-file", 212966758);
 47243:   SetLanguage(param.language);
 47243:   SetLanguageSigned(true);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *class_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                       "class_A");
118328:   DefineFunction(class_handler, "function_B", 10, 1, NULL);
 47243:   class_handler->Finish();
 47243:   delete class_handler;
 47243:   root_handler_.Finish();
 47243: 
 47243:   if (param.name) {
 47243:     TestFunctionCount(1);
 47243:     TestFunction(0, param.name, 10, 1);
 47243:   } else {
 47243:     TestFunctionCount(0);
 47243:   }
 47243: }
 47243: 
 47243: class Specifications: public CUFixtureBase, public Test { };
 47243: 
 47243: TEST_F(Specifications, Function) {
 47243:   PushLine(0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL, "line-file", 54883661);
 47243: 
 47243:   StartCU();
 47243:   DeclarationDIE(&root_handler_, 0xcd3c51b946fb1eeeLL,
118328:                  dwarf2reader::DW_TAG_subprogram, "declaration-name", "");
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0xcd3c51b946fb1eeeLL, "",
 47243:                 0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "declaration-name",
 47243:                0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL);
 47243: }
 47243: 
118328: TEST_F(Specifications, MangledName) {
118328:   PushLine(0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL, "line-file", 54883661);
118328: 
118328:   StartCU();
118328:   DeclarationDIE(&root_handler_, 0xcd3c51b946fb1eeeLL,
118328:                  dwarf2reader::DW_TAG_subprogram, "declaration-name",
118328:                  "_ZN1C1fEi");
118328:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
118328:                 0xcd3c51b946fb1eeeLL, "",
118328:                 0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL);
118328:   root_handler_.Finish();
118328: 
118328:   TestFunctionCount(1);
118328:   TestFunction(0, "C::f(int)",
118328:                0x93cd3dfc1aa10097ULL, 0x0397d47a0b4ca0d4ULL);
118328: }
118328: 
 47243: TEST_F(Specifications, MemberFunction) {
 47243:   PushLine(0x3341a248634e7170ULL, 0x5f6938ee5553b953ULL, "line-file", 18116691);
 47243: 
 47243:   StartCU();
 47243:   DIEHandler *class_handler
 47243:     = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type, "class_A");
 47243:   DeclarationDIE(class_handler, 0x7d83028c431406e8ULL,
118328:                  dwarf2reader::DW_TAG_subprogram, "declaration-name", "");
 47243:   class_handler->Finish();
 47243:   delete class_handler;
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0x7d83028c431406e8ULL, "",
 47243:                 0x3341a248634e7170ULL, 0x5f6938ee5553b953ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "class_A::declaration-name",
 47243:                0x3341a248634e7170ULL, 0x5f6938ee5553b953ULL);
 47243: }
 47243: 
 47243: // This case should gather the name from both the definition and the
 47243: // declaration's parent.
 47243: TEST_F(Specifications, FunctionDeclarationParent) {
 47243:   PushLine(0x463c9ddf405be227ULL, 0x6a47774af5049680ULL, "line-file", 70254922);
 47243: 
 47243:   StartCU();
 47243:   {
 47243:     DIEHandler *class_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                       "class_A");
 47243:     ASSERT_TRUE(class_handler != NULL);
 47243:     DeclarationDIE(class_handler, 0x0e0e877c8404544aULL,
118328:                    dwarf2reader::DW_TAG_subprogram, "declaration-name", "");
 47243:     class_handler->Finish();
 47243:     delete class_handler;
 47243:   }
 47243: 
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0x0e0e877c8404544aULL, "definition-name", 
 47243:                 0x463c9ddf405be227ULL, 0x6a47774af5049680ULL);
 47243: 
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "class_A::definition-name",
 47243:                0x463c9ddf405be227ULL, 0x6a47774af5049680ULL);
 47243: }
 47243: 
 47243: // Named scopes should also gather enclosing name components from
 47243: // their declarations.
 47243: TEST_F(Specifications, NamedScopeDeclarationParent) {
 47243:   PushLine(0x5d13433d0df13d00ULL, 0x48ebebe5ade2cab4ULL, "line-file", 77392604);
 47243: 
 47243:   StartCU();
 47243:   {
 47243:     DIEHandler *space_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_namespace,
 47243:                       "space_A");
 47243:     ASSERT_TRUE(space_handler != NULL);
 47243:     DeclarationDIE(space_handler, 0x419bb1d12f9a73a2ULL,
118328:                    dwarf2reader::DW_TAG_class_type, "class-declaration-name",
118328:                    "");
 47243:     space_handler->Finish();
 47243:     delete space_handler;
 47243:   }
 47243: 
 47243:   {
 47243:     DIEHandler *class_handler
 47243:       = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                           0x419bb1d12f9a73a2ULL, "class-definition-name");
 47243:     ASSERT_TRUE(class_handler != NULL);
 47243:     DefineFunction(class_handler, "function", 
118328:                    0x5d13433d0df13d00ULL, 0x48ebebe5ade2cab4ULL, NULL);
 47243:     class_handler->Finish();
 47243:     delete class_handler;
 47243:   }
 47243: 
 47243:   root_handler_.Finish();
 47243:   
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "space_A::class-definition-name::function",
 47243:                0x5d13433d0df13d00ULL, 0x48ebebe5ade2cab4ULL);
 47243: }
 47243: 
 47243: // This test recreates bug 364.
 47243: TEST_F(Specifications, InlineFunction) {
 47243:   PushLine(0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL, "line-file", 75173118);
 47243: 
 47243:   StartCU();
 47243:   DeclarationDIE(&root_handler_, 0xcd3c51b946fb1eeeLL,
118328:                  dwarf2reader::DW_TAG_subprogram, "inline-name", "");
 47243:   AbstractInstanceDIE(&root_handler_, 0x1e8dac5d507ed7abULL,
 47243:                       dwarf2reader::DW_INL_inlined, 0xcd3c51b946fb1eeeLL, "");
 47243:   DefineInlineInstanceDIE(&root_handler_, "", 0x1e8dac5d507ed7abULL,
 47243:                        0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "inline-name",
 47243:                0x1758a0f941b71efbULL, 0x1cf154f1f545e146ULL);
 47243: }
 47243: 
 47243: // Check name construction for a long chain containing each combination of:
 47243: // - struct, union, class, namespace
 47243: // - direct and definition
 47243: TEST_F(Specifications, LongChain) {
 47243:   PushLine(0x5a0dd6bb85db754cULL, 0x3bccb213d08c7fd3ULL, "line-file", 21192926);
 47243:   SetLanguage(dwarf2reader::DW_LANG_C_plus_plus);
 47243: 
 47243:   StartCU();
 47243:   // The structure we're building here is:
 47243:   // space_A full definition
 47243:   //   space_B declaration
 47243:   // space_B definition
 47243:   //   struct_C full definition
 47243:   //     struct_D declaration
 47243:   // struct_D definition
 47243:   //   union_E full definition
 47243:   //     union_F declaration
 47243:   // union_F definition
 47243:   //   class_G full definition
 47243:   //     class_H declaration
 47243:   // class_H definition
 47243:   //   func_I declaration
 47243:   // func_I definition
 47243:   // 
 47243:   // So: 
 47243:   // - space_A, struct_C, union_E, and class_G don't use specifications;
 47243:   // - space_B, struct_D, union_F, and class_H do.
 47243:   // - func_I uses a specification.
 47243:   // 
 47243:   // The full name for func_I is thus:
 47243:   // 
 47243:   // space_A::space_B::struct_C::struct_D::union_E::union_F::
 47243:   //   class_G::class_H::func_I
 47243:   {
 47243:     DIEHandler *space_A_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_namespace,
 47243:                       "space_A");
 47243:     DeclarationDIE(space_A_handler, 0x2e111126496596e2ULL,
118328:                    dwarf2reader::DW_TAG_namespace, "space_B", "");
 47243:     space_A_handler->Finish();
 47243:     delete space_A_handler;
 47243:   }
 47243: 
 47243:   {
 47243:     DIEHandler *space_B_handler
 47243:       = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_namespace,
 47243:                           0x2e111126496596e2ULL);
 47243:     DIEHandler *struct_C_handler
 47243:       = StartNamedDIE(space_B_handler, dwarf2reader::DW_TAG_structure_type,
 47243:                       "struct_C");
 47243:     DeclarationDIE(struct_C_handler, 0x20cd423bf2a25a4cULL,
118328:                    dwarf2reader::DW_TAG_structure_type, "struct_D", "");
 47243:     struct_C_handler->Finish();
 47243:     delete struct_C_handler;
 47243:     space_B_handler->Finish();
 47243:     delete space_B_handler;
 47243:   }
 47243: 
 47243:   {
 47243:     DIEHandler *struct_D_handler
 47243:       = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_structure_type,
 47243:                           0x20cd423bf2a25a4cULL);
 47243:     DIEHandler *union_E_handler
 47243:       = StartNamedDIE(struct_D_handler, dwarf2reader::DW_TAG_union_type,
 47243:                       "union_E");
 47243:     DeclarationDIE(union_E_handler, 0xe25c84805aa58c32ULL,
118328:                    dwarf2reader::DW_TAG_union_type, "union_F", "");
 47243:     union_E_handler->Finish();
 47243:     delete union_E_handler;
 47243:     struct_D_handler->Finish();
 47243:     delete struct_D_handler;
 47243:   }
 47243: 
 47243:   {
 47243:     DIEHandler *union_F_handler
 47243:       = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_union_type,
 47243:                           0xe25c84805aa58c32ULL);
 47243:     DIEHandler *class_G_handler
 47243:       = StartNamedDIE(union_F_handler, dwarf2reader::DW_TAG_class_type,
 47243:                       "class_G");
 47243:     DeclarationDIE(class_G_handler, 0xb70d960dcc173b6eULL,
118328:                    dwarf2reader::DW_TAG_class_type, "class_H", "");
 47243:     class_G_handler->Finish();
 47243:     delete class_G_handler;
 47243:     union_F_handler->Finish();
 47243:     delete union_F_handler;
 47243:   }
 47243: 
 47243:   {
 47243:     DIEHandler *class_H_handler
 47243:       = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                           0xb70d960dcc173b6eULL);
 47243:     DeclarationDIE(class_H_handler, 0x27ff829e3bf69f37ULL,
118328:                    dwarf2reader::DW_TAG_subprogram, "func_I", "");
 47243:     class_H_handler->Finish();
 47243:     delete class_H_handler;
 47243:   }
 47243: 
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0x27ff829e3bf69f37ULL, "",
 47243:                 0x5a0dd6bb85db754cULL, 0x3bccb213d08c7fd3ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "space_A::space_B::struct_C::struct_D::union_E::union_F"
 47243:                "::class_G::class_H::func_I",
 47243:                0x5a0dd6bb85db754cULL, 0x3bccb213d08c7fd3ULL);
 47243: }
 47243: 
 47243: TEST_F(Specifications, InterCU) {
 47243:   Module m("module-name", "module-os", "module-arch", "module-id");
 47243:   DwarfCUToModule::FileContext fc("dwarf-filename", &m);
 47243:   EXPECT_CALL(reporter_, UncoveredFunction(_)).WillOnce(Return());
 47243:   MockLineToModuleFunctor lr;
 47243:   EXPECT_CALL(lr, mock_apply(_,_,_,_)).Times(0);
 47243:   dwarf2reader::AttributeList no_attrs;
 47243: 
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: 
 47243:   // First CU.  Declares class_A.
 47243:   {
 47243:     DwarfCUToModule root1_handler(&fc, &lr, &reporter_);
 47243:     ASSERT_TRUE(root1_handler.StartCompilationUnit(0, 1, 2, 3, 3));
 47243:     dwarf2reader::AttributeList attrs;
 47243:     PushBackStrangeAttributes(&attrs);
 47243:     ASSERT_TRUE(root1_handler.StartRootDIE(1, dwarf2reader::DW_TAG_compile_unit,
 47243:                                            attrs));
 47243:     ProcessStrangeAttributes(&root1_handler);
 47243:     ASSERT_TRUE(root1_handler.EndAttributes());
 47243:     DeclarationDIE(&root1_handler, 0xb8fbfdd5f0b26fceULL,
118328:                    dwarf2reader::DW_TAG_class_type, "class_A", "");
 47243:     root1_handler.Finish();
 47243:   }
 47243:    
 47243:   // Second CU.  Defines class_A, declares member_func_B.
 47243:   {
 47243:     DwarfCUToModule root2_handler(&fc, &lr, &reporter_);
 47243:     ASSERT_TRUE(root2_handler.StartCompilationUnit(0, 1, 2, 3, 3));
 47243:     ASSERT_TRUE(root2_handler.StartRootDIE(1, dwarf2reader::DW_TAG_compile_unit,
 47243:                                            no_attrs));
 47243:     ASSERT_TRUE(root2_handler.EndAttributes());
 47243:     DIEHandler *class_A_handler
 47243:       = StartSpecifiedDIE(&root2_handler, dwarf2reader::DW_TAG_class_type,
 47243:                           0xb8fbfdd5f0b26fceULL);
 47243:     DeclarationDIE(class_A_handler, 0xb01fef8b380bd1a2ULL,
118328:                    dwarf2reader::DW_TAG_subprogram, "member_func_B", "");
 47243:     class_A_handler->Finish();
 47243:     delete class_A_handler;
 47243:     root2_handler.Finish();
 47243:   }
 47243: 
 47243:   // Third CU.  Defines member_func_B.
 47243:   {
 47243:     DwarfCUToModule root3_handler(&fc, &lr, &reporter_);
 47243:     ASSERT_TRUE(root3_handler.StartCompilationUnit(0, 1, 2, 3, 3));
 47243:     ASSERT_TRUE(root3_handler.StartRootDIE(1, dwarf2reader::DW_TAG_compile_unit,
 47243:                                            no_attrs));
 47243:     ASSERT_TRUE(root3_handler.EndAttributes());
 47243:     DefinitionDIE(&root3_handler, dwarf2reader::DW_TAG_subprogram,
 47243:                   0xb01fef8b380bd1a2ULL, "",
 47243:                   0x2618f00a1a711e53ULL, 0x4fd94b76d7c2caf5ULL);
 47243:     root3_handler.Finish();
 47243:   }
 47243: 
 47243:   vector<Module::Function *> functions;
 47243:   m.GetFunctions(&functions, functions.end());
 47243:   EXPECT_EQ(1U, functions.size());
 47243:   EXPECT_STREQ("class_A::member_func_B", functions[0]->name.c_str());
 47243: }
 47243: 
 47243: TEST_F(Specifications, BadOffset) {
 47243:   PushLine(0xa0277efd7ce83771ULL, 0x149554a184c730c1ULL, "line-file", 56636272);
 47243:   EXPECT_CALL(reporter_, UnknownSpecification(_, 0x2be953efa6f9a996ULL))
 47243:     .WillOnce(Return());
 47243: 
 47243:   StartCU();
 47243:   DeclarationDIE(&root_handler_, 0xefd7f7752c27b7e4ULL,
118328:                  dwarf2reader::DW_TAG_subprogram, "", "");
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
114869:                 0x2be953efa6f9a996ULL, "function",
 47243:                 0xa0277efd7ce83771ULL, 0x149554a184c730c1ULL);
 47243:   root_handler_.Finish();
 47243: }
 47243: 
 47243: TEST_F(Specifications, FunctionDefinitionHasOwnName) {
 47243:   PushLine(0xced50b3eea81022cULL, 0x08dd4d301cc7a7d2ULL, "line-file", 56792403);
 47243: 
 47243:   StartCU();
 47243:   DeclarationDIE(&root_handler_, 0xc34ff4786cae78bdULL,
118328:                  dwarf2reader::DW_TAG_subprogram, "declaration-name", "");
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0xc34ff4786cae78bdULL, "definition-name",
 47243:                 0xced50b3eea81022cULL, 0x08dd4d301cc7a7d2ULL);
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "definition-name",
 47243:                0xced50b3eea81022cULL, 0x08dd4d301cc7a7d2ULL);
 47243: }
 47243: 
 47243: TEST_F(Specifications, ClassDefinitionHasOwnName) {
 47243:   PushLine(0x1d0f5e0f6ce309bdULL, 0x654e1852ec3599e7ULL, "line-file", 57119241);
 47243: 
 47243:   StartCU();
 47243:   DeclarationDIE(&root_handler_, 0xd0fe467ec2f1a58cULL,
118328:                  dwarf2reader::DW_TAG_class_type, "class-declaration-name", "");
 47243: 
 47243:   dwarf2reader::DIEHandler *class_definition
 47243:     = StartSpecifiedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                         0xd0fe467ec2f1a58cULL, "class-definition-name");
 47243:   ASSERT_TRUE(class_definition);
 47243:   DeclarationDIE(class_definition, 0x6d028229c15623dbULL,
 47243:                  dwarf2reader::DW_TAG_subprogram,
118328:                  "function-declaration-name", "");
 47243:   class_definition->Finish();
 47243:   delete class_definition;
 47243: 
 47243:   DefinitionDIE(&root_handler_, dwarf2reader::DW_TAG_subprogram,
 47243:                 0x6d028229c15623dbULL, "function-definition-name",
 47243:                 0x1d0f5e0f6ce309bdULL, 0x654e1852ec3599e7ULL);
 47243: 
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "class-definition-name::function-definition-name",
 47243:                0x1d0f5e0f6ce309bdULL, 0x654e1852ec3599e7ULL);
 47243: }
 47243: 
 47243: // DIEs that cite a specification should prefer the specification's
 47243: // parents over their own when choosing qualified names. In this test,
 47243: // we take the name from our definition but the enclosing scope name
 47243: // from our declaration. I don't see why they'd ever be different, but
 47243: // we want to verify what DwarfCUToModule is looking at.
 47243: TEST_F(Specifications, PreferSpecificationParents) {
 47243:   PushLine(0xbbd9d54dce3b95b7ULL, 0x39188b7b52b0899fULL, "line-file", 79488694);
 47243: 
 47243:   StartCU();
 47243:   {
 47243:     dwarf2reader::DIEHandler *declaration_class_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type, "declaration-class");
 47243:     DeclarationDIE(declaration_class_handler, 0x9ddb35517455ef7aULL,
118328:                    dwarf2reader::DW_TAG_subprogram, "function-declaration",
118328:                    "");
 47243:     declaration_class_handler->Finish();
 47243:     delete declaration_class_handler;
 47243:   }
 47243:   {
 47243:     dwarf2reader::DIEHandler *definition_class_handler
 47243:       = StartNamedDIE(&root_handler_, dwarf2reader::DW_TAG_class_type,
 47243:                       "definition-class");
 47243:     DefinitionDIE(definition_class_handler, dwarf2reader::DW_TAG_subprogram,
 47243:                   0x9ddb35517455ef7aULL, "function-definition",
 47243:                   0xbbd9d54dce3b95b7ULL, 0x39188b7b52b0899fULL);
 47243:     definition_class_handler->Finish();
 47243:     delete definition_class_handler;
 47243:   }
 47243:   root_handler_.Finish();
 47243: 
 47243:   TestFunctionCount(1);
 47243:   TestFunction(0, "declaration-class::function-definition",
 47243:                0xbbd9d54dce3b95b7ULL, 0x39188b7b52b0899fULL);
 47243: }
 47243: 
114869: class CUErrors: public CUFixtureBase, public Test { };
 47243: 
114869: TEST_F(CUErrors, BadStmtList) {
 47243:   EXPECT_CALL(reporter_, BadLineInfoOffset(dummy_line_size_ + 10)).Times(1);
 47243: 
 47243:   ASSERT_TRUE(root_handler_
 47243:               .StartCompilationUnit(0xc591d5b037543d7cULL, 0x11, 0xcd,
 47243:                                     0x2d7d19546cf6590cULL, 3));
 47243:   dwarf2reader::AttributeList attrs;
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_name,
 47243:                             dwarf2reader::DW_FORM_strp));
 47243:   attrs.push_back(make_pair(dwarf2reader::DW_AT_stmt_list,
 47243:                             dwarf2reader::DW_FORM_ref4));
 47243:   ASSERT_TRUE(root_handler_.StartRootDIE(0xae789dc102cfca54ULL,
 47243:                                          dwarf2reader::DW_TAG_compile_unit,
 47243:                                          attrs));
 47243:   root_handler_.ProcessAttributeString(dwarf2reader::DW_AT_name,
 47243:                                        dwarf2reader::DW_FORM_strp,
 47243:                                        "compilation-unit-name");
 47243:   root_handler_.ProcessAttributeUnsigned(dwarf2reader::DW_AT_stmt_list,
 47243:                                          dwarf2reader::DW_FORM_ref4,
 47243:                                          dummy_line_size_ + 10);
 47243:   root_handler_.EndAttributes();
 47243:   root_handler_.Finish();
 47243: }
 47243: 
114869: TEST_F(CUErrors, NoLineSection) {
 47243:   EXPECT_CALL(reporter_, MissingSection(".debug_line")).Times(1);
 47243:   PushLine(0x88507fb678052611ULL, 0x42c8e9de6bbaa0faULL, "line-file", 64472290);
 47243:   // Delete the entry for .debug_line added by the fixture class's constructor.
 47243:   file_context_.section_map.clear();
 47243: 
 47243:   StartCU();
 47243:   root_handler_.Finish();
 47243: }
 47243: 
114869: TEST_F(CUErrors, BadDwarfVersion1) {
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: 
 47243:   ASSERT_FALSE(root_handler_
 47243:                .StartCompilationUnit(0xadf6e0eb71e2b0d9ULL, 0x4d, 0x90,
 47243:                                      0xc9de224ccb99ac3eULL, 1));
 47243: }
 47243: 
114869: TEST_F(CUErrors, GoodDwarfVersion2) {
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: 
 47243:   ASSERT_TRUE(root_handler_
 47243:                .StartCompilationUnit(0xadf6e0eb71e2b0d9ULL, 0x4d, 0x90,
 47243:                                      0xc9de224ccb99ac3eULL, 2));
 47243: }
 47243: 
114869: TEST_F(CUErrors, GoodDwarfVersion3) {
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: 
 47243:   ASSERT_TRUE(root_handler_
 47243:                .StartCompilationUnit(0xadf6e0eb71e2b0d9ULL, 0x4d, 0x90,
 47243:                                      0xc9de224ccb99ac3eULL, 3));
 47243: }
 47243: 
114869: TEST_F(CUErrors, BadCURootDIETag) {
 47243:   // Kludge: satisfy reporter_'s expectation.
 47243:   reporter_.SetCUName("compilation-unit-name");
 47243: 
 47243:   ASSERT_TRUE(root_handler_
 47243:                .StartCompilationUnit(0xadf6e0eb71e2b0d9ULL, 0x4d, 0x90,
 47243:                                      0xc9de224ccb99ac3eULL, 3));
 47243: 
 47243:   dwarf2reader::AttributeList no_attrs;
 47243:   ASSERT_FALSE(root_handler_.StartRootDIE(0x02e56bfbda9e7337ULL,
 47243:                                           dwarf2reader::DW_TAG_subprogram,
 47243:                                           no_attrs));
 47243: }
 47243: 
 47243: // Tests for DwarfCUToModule::Reporter. These just produce (or fail to
 47243: // produce) output, so their results need to be checked by hand.
 47243: struct Reporter: public Test {
 47243:   Reporter()
 47243:       : reporter("filename", 0x123456789abcdef0ULL) {
 47243:     reporter.SetCUName("compilation-unit-name");
 47243: 
 47243:     function.name = "function name";
 47243:     function.address = 0x19c45c30770c1eb0ULL;
 47243:     function.size = 0x89808a5bdfa0a6a3ULL;
 47243:     function.parameter_size = 0x6a329f18683dcd51ULL;
 47243: 
 47243:     file.name = "source file name";
 47243: 
 47243:     line.address = 0x3606ac6267aebeccULL;
 47243:     line.size = 0x5de482229f32556aULL;
 47243:     line.file = &file;
 47243:     line.number = 93400201;
 47243:   }
 47243:   
 47243:   DwarfCUToModule::WarningReporter reporter;
 47243:   Module::Function function;
 47243:   Module::File file;
 47243:   Module::Line line;
 47243: };
 47243: 
 47243: TEST_F(Reporter, UnknownSpecification) {
 47243:   reporter.UnknownSpecification(0x123456789abcdef1ULL, 0x323456789abcdef2ULL);
 47243: }
 47243: 
 47243: TEST_F(Reporter, UnknownAbstractOrigin) {
 47243:   reporter.UnknownAbstractOrigin(0x123456789abcdef1ULL, 0x323456789abcdef2ULL);
 47243: }
 47243: 
 47243: TEST_F(Reporter, MissingSection) {
 47243:   reporter.MissingSection("section name");
 47243: }
 47243: 
 47243: TEST_F(Reporter, BadLineInfoOffset) {
 47243:   reporter.BadLineInfoOffset(0x123456789abcdef1ULL);
 47243: }
 47243: 
 47243: TEST_F(Reporter, UncoveredFunctionDisabled) {
 47243:   reporter.UncoveredFunction(function);
 47243:   EXPECT_FALSE(reporter.uncovered_warnings_enabled());
 47243: }
 47243: 
 47243: TEST_F(Reporter, UncoveredFunctionEnabled) {
 47243:   reporter.set_uncovered_warnings_enabled(true);
 47243:   reporter.UncoveredFunction(function);
 47243:   EXPECT_TRUE(reporter.uncovered_warnings_enabled());
 47243: }
 47243: 
 47243: TEST_F(Reporter, UncoveredLineDisabled) {
 47243:   reporter.UncoveredLine(line);
 47243:   EXPECT_FALSE(reporter.uncovered_warnings_enabled());
 47243: }
 47243: 
 47243: TEST_F(Reporter, UncoveredLineEnabled) {
 47243:   reporter.set_uncovered_warnings_enabled(true);
 47243:   reporter.UncoveredLine(line);
 47243:   EXPECT_TRUE(reporter.uncovered_warnings_enabled());
 47243: }
 47243: 
114869: TEST_F(Reporter, UnnamedFunction) {
114869:   reporter.UnnamedFunction(0x90c0baff9dedb2d9ULL);
114869: }  
114869: 
 47243: // Would be nice to also test:
 47243: // - overlapping lines, functions
