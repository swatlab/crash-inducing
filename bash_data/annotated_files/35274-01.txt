    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Blake Ross <blaker@netscape.com>
    1:  *   Ben Goodger <ben@netscape.com>
 1691:  *   Shawn Wilsher <me@shawnwilsher.com>
 5760:  *   Srirang G Doddihal <brahmana@doddihal.com>
 6322:  *   Edward Lee <edward.lee@engineering.uiuc.edu>
20497:  *   Ehsan Akhgari <ehsan.akhgari@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef downloadmanager___h___
    1: #define downloadmanager___h___
    1: 
27958: #if defined(XP_WIN) && (MOZ_WINSDK_TARGETVER >= MOZ_NTDDI_LONGHORN)
27958: #define DOWNLOAD_SCANNER
27958: #endif
27958: 
25255: #include "nsIDownload.h"
    1: #include "nsIDownloadManager.h"
    1: #include "nsIDownloadProgressListener.h"
    1: #include "nsILocalFile.h"
25255: #include "nsIMIMEInfo.h"
25255: #include "nsINavHistoryService.h"
    1: #include "nsIObserver.h"
25255: #include "nsIObserverService.h"
    1: #include "nsIStringBundle.h"
    1: #include "nsISupportsPrimitives.h"
25255: #include "nsITimer.h"
25255: 
14564: #include "mozStorageHelper.h"
25255: #include "nsAutoPtr.h"
 1691: #include "nsCOMArray.h"
    1: 
    1: typedef PRInt16 DownloadState;
    1: typedef PRInt16 DownloadType;
    1: 
    1: class nsDownload;
    1: 
20458: #ifdef DOWNLOAD_SCANNER
20292: #include "nsDownloadScanner.h"
 5176: #endif
 5176: 
    1: class nsDownloadManager : public nsIDownloadManager,
14564:                           public nsINavHistoryObserver,
    1:                           public nsIObserver
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSIDOWNLOADMANAGER
14564:   NS_DECL_NSINAVHISTORYOBSERVER
    1:   NS_DECL_NSIOBSERVER
    1: 
    1:   nsresult Init();
    1: 
 3409:   static nsDownloadManager *GetSingleton();
 3409: 
    1:   virtual ~nsDownloadManager();
20497:   nsDownloadManager() :
20497:       mDBType(DATABASE_DISK)
21241:     , mInPrivateBrowsing(PR_FALSE)
35274: #ifdef DOWNLOAD_SCANNER
35274:     , mScanner(nsnull)
35274: #endif
20497:   {
20497:   }
    1: 
 1691: protected:
20497:   enum DatabaseType
20497:   {
20497:     DATABASE_DISK = 0, // default
20497:     DATABASE_MEMORY
20497:   };
20497: 
22099:   nsresult InitDB();
25255:   nsresult InitFileDB();
20497:   nsresult InitMemoryDB();
20497:   already_AddRefed<mozIStorageConnection> GetFileDBConnection(nsIFile *dbFile) const;
20497:   already_AddRefed<mozIStorageConnection> GetMemoryDBConnection() const;
20497:   nsresult SwitchDatabaseTypeTo(enum DatabaseType aType);
 1691:   nsresult CreateTable();
 6707: 
 6707:   /**
 6707:    * Fix up the database after a crash such as dealing with previously-active
 7153:    * downloads. Call this before RestoreActiveDownloads to get the downloads
 7153:    * fixed here to be auto-resumed.
 6707:    */
 5477:   nsresult RestoreDatabaseState();
 6322: 
 6322:   /**
 6322:    * Paused downloads that survive across sessions are considered active, so
 6322:    * rebuild the list of these downloads.
 6322:    */
 6322:   nsresult RestoreActiveDownloads();
 6322: 
 2116:   nsresult GetDownloadFromDB(PRUint32 aID, nsDownload **retVal);
 2699: 
 5986:   /**
 5986:    * Specially track the active downloads so that we don't need to check
 5986:    * every download to see if they're in progress.
 5986:    */
 5986:   nsresult AddToCurrentDownloads(nsDownload *aDl);
 2699: 
 5176:   void SendEvent(nsDownload *aDownload, const char *aTopic);
 5176: 
 1691:   /**
 1691:    * Adds a download with the specified information to the DB.
 1691:    *
 1691:    * @return The id of the download, or 0 if there was an error.
 1691:    */
 1691:   PRInt64 AddDownloadToDB(const nsAString &aName,
 1691:                           const nsACString &aSource,
 1691:                           const nsACString &aTarget,
 6321:                           const nsAString &aTempPath,
 1691:                           PRInt64 aStartTime,
 1691:                           PRInt64 aEndTime,
 7145:                           const nsACString &aMimeType,
 7145:                           const nsACString &aPreferredApp,
 7145:                           nsHandlerInfoAction aPreferredAction);
    1: 
 1877:   void NotifyListenersOnDownloadStateChange(PRInt16 aOldState,
 1877:                                             nsIDownload *aDownload);
 1877:   void NotifyListenersOnProgressChange(nsIWebProgress *aProgress,
 1877:                                        nsIRequest *aRequest,
 1877:                                        PRInt64 aCurSelfProgress,
 1877:                                        PRInt64 aMaxSelfProgress,
 1877:                                        PRInt64 aCurTotalProgress,
 1877:                                        PRInt64 aMaxTotalProgress,
 1877:                                        nsIDownload *aDownload);
 1877:   void NotifyListenersOnStateChange(nsIWebProgress *aProgress,
 1877:                                     nsIRequest *aRequest,
 1877:                                     PRUint32 aStateFlags,
 1877:                                     nsresult aStatus,
 1877:                                     nsIDownload *aDownload);
 1877: 
 1691:   nsDownload *FindDownload(PRUint32 aID);
 6322: 
 6322:   /**
 7152:    * First try to resume the download, and if that fails, retry it.
 7152:    *
 7152:    * @param aDl The download to resume and/or retry.
 7152:    */
 7152:   nsresult ResumeRetry(nsDownload *aDl);
 7152: 
 7152:   /**
 7151:    * Pause all active downloads and remember if they should try to auto-resume
 7151:    * when the download manager starts again.
 7151:    *
 7151:    * @param aSetResume Indicate if the downloads that get paused should be set
 7151:    *                   as auto-resume.
 7151:    */
 7151:   nsresult PauseAllDownloads(PRBool aSetResume);
 7151: 
 7151:   /**
 7152:    * Resume all paused downloads unless we're only supposed to do the automatic
 7152:    * ones; in that case, try to retry them as well if resuming doesn't work.
 7152:    *
 7152:    * @param aResumeAll If true, all downloads will be resumed; otherwise, only
 7152:    *                   those that are marked as auto-resume will resume.
 7152:    */
 7152:   nsresult ResumeAllDownloads(PRBool aResumeAll);
 7152: 
 7152:   /**
 6322:    * Stop tracking the active downloads. Only use this when we're about to quit
 6322:    * the download manager because we destroy our list of active downloads to
 6322:    * break the dlmgr<->dl cycle. Active downloads that aren't real-paused will
 6322:    * be canceled.
 6322:    */
 6322:   nsresult RemoveAllDownloads();
    1: 
13349:   /**
14564:    * Find all downloads from a source URI and delete them.
14564:    *
14564:    * @param aURI
14564:    *        The source URI to remove downloads
14564:    */
14564:   nsresult RemoveDownloadsForURI(nsIURI *aURI);
14564: 
14564:   /**
13349:    * Callback used for resuming downloads after getting a wake notification.
13349:    *
13349:    * @param aTimer
13349:    *        Timer object fired after some delay after a wake notification
13349:    * @param aClosure
13349:    *        nsDownloadManager object used to resume downloads
13349:    */
13349:   static void ResumeOnWakeCallback(nsITimer *aTimer, void *aClosure);
13349:   nsCOMPtr<nsITimer> mResumeOnWakeTimer;
13349: 
 1691:   void ConfirmCancelDownloads(PRInt32 aCount,
 1691:                               nsISupportsPRBool *aCancelDownloads,
    1:                               const PRUnichar *aTitle,
    1:                               const PRUnichar *aCancelMessageMultiple,
    1:                               const PRUnichar *aCancelMessageSingle,
    1:                               const PRUnichar *aDontCancelButton);
    1: 
    1:   PRInt32 GetRetentionBehavior();
    1: 
10722:   /**
10722:    * Type to indicate possible behaviors for active downloads across sessions.
10722:    *
10722:    * Possible values are:
10722:    *  QUIT_AND_RESUME  - downloads should be auto-resumed
10722:    *  QUIT_AND_PAUSE   - downloads should be paused
10722:    *  QUIT_AND_CANCEL  - downloads should be cancelled
10722:    */
10722:   enum QuitBehavior {
10722:     QUIT_AND_RESUME = 0, 
10722:     QUIT_AND_PAUSE = 1, 
10722:     QUIT_AND_CANCEL = 2
10722:   };
10722: 
10722:   /**
10722:    * Indicates user-set behavior for active downloads across sessions,
10722:    *
10722:    * @return value of user-set pref for active download behavior
10722:    */
10722:   enum QuitBehavior GetQuitBehavior();
10722: 
21241:   void OnEnterPrivateBrowsingMode();
21241:   void OnLeavePrivateBrowsingMode();
21241: 
20292:   // Virus scanner for windows
20458: #ifdef DOWNLOAD_SCANNER
20292: private:
31346:   nsDownloadScanner* mScanner;
20292: #endif
20292: 
    1: private:
 1877:   nsCOMArray<nsIDownloadProgressListener> mListeners;
    1:   nsCOMPtr<nsIStringBundle> mBundle;
 1691:   nsCOMPtr<mozIStorageConnection> mDBConn;
 1691:   nsCOMArray<nsDownload> mCurrentDownloads;
 1691:   nsCOMPtr<nsIObserverService> mObserverService;
 3038:   nsCOMPtr<mozIStorageStatement> mUpdateDownloadStatement;
14564:   nsCOMPtr<mozIStorageStatement> mGetIdsForURIStatement;
14839:   nsAutoPtr<mozStorageTransaction> mHistoryTransaction;
    1: 
20497:   enum DatabaseType mDBType;
21241:   PRBool mInPrivateBrowsing;
20497: 
 3409:   static nsDownloadManager *gDownloadManagerService;
 3409: 
    1:   friend class nsDownload;
    1: };
    1: 
    1: class nsDownload : public nsIDownload
    1: {
    1: public:
    1:   NS_DECL_NSIWEBPROGRESSLISTENER
    1:   NS_DECL_NSIWEBPROGRESSLISTENER2
    1:   NS_DECL_NSITRANSFER
    1:   NS_DECL_NSIDOWNLOAD
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   nsDownload();
    1:   virtual ~nsDownload();
    1: 
 1691:   /**
 1691:    * This method MUST be called when changing states on a download.  It will
 1808:    * notify the download listener when a change happens.  This also updates the
 1808:    * database, by calling UpdateDB().
 1691:    */
 1808:   nsresult SetState(DownloadState aState);
 1691: 
 6540: protected:
 6540:   /**
 6540:    * Finish up the download by breaking reference cycles and clearing unneeded
 6540:    * data. Additionally, the download removes itself from the download
 6540:    * manager's list of current downloads.
 6540:    *
 6540:    * NOTE: This method removes the cycle created when starting the download, so
 6540:    * make sure to use kungFuDeathGrip if you want to access member variables.
 6540:    */
 6540:   void Finalize();
    1: 
 6540:   /**
 6540:    * For finished resumed downloads that came in from exthandler, perform the
 6540:    * action that would have been done if the download wasn't resumed.
 6540:    */
 6540:   nsresult ExecuteDesiredAction();
 1691: 
 6540:   /**
 6540:    * Move the temporary file to the final destination by removing the existing
 6540:    * dummy target and renaming the temporary.
 6540:    */
 6540:   nsresult MoveTempToTarget();
 6540: 
 6540:   /**
 6540:    * Update the start time which also implies the last update time is the same.
 6540:    */
 1691:   void SetStartTime(PRInt64 aStartTime);
    1: 
 6011:   /**
 6506:    * Update the amount of bytes transferred and max bytes; and recalculate the
 6506:    * download percent.
 6506:    */
 6506:   void SetProgressBytes(PRInt64 aCurrBytes, PRInt64 aMaxBytes);
 6506: 
 6506:   /**
 6011:    * Pause the download, but in certain cases it might get fake-paused instead
 6011:    * of real-paused.
 6011:    */
 6011:   nsresult Pause();
 6011: 
 6011:   /**
 6011:    * All this does is cancel the connection that the download is using. It does
 6011:    * not remove it from the download manager.
 6011:    */
 6011:   nsresult Cancel();
 6011: 
 6011:   /**
10516:    * Resume the download.
 6011:    */
 6011:   nsresult Resume();
 6011: 
 6011:   /**
 5993:    * Download is not transferring?
 5993:    */
 5993:   PRBool IsPaused();
 5993: 
 5993:   /**
 5993:    * Download can continue from the middle of a transfer?
 5993:    */
 5993:   PRBool IsResumable();
 5993: 
 5993:   /**
 5993:    * Download was resumed?
 5993:    */
 5993:   PRBool WasResumed();
 5993: 
 5993:   /**
 7147:    * Indicates if the download should try to automatically resume or not.
 7147:    */
 7147:   PRBool ShouldAutoResume();
 7147: 
 7147:   /**
 5986:    * Download is in a state to stop and complete the download?
 5986:    */
 5986:   PRBool IsFinishable();
 5986: 
 5986:   /**
 5986:    * Download is totally done transferring and all?
 5986:    */
 5986:   PRBool IsFinished();
 5986: 
 6508:   /**
 6540:    * Update the DB with the current state of the download including time,
 6540:    * download state and other values not known when first creating the
 6540:    * download DB entry.
 6540:    */
 6540:   nsresult UpdateDB();
 6540: 
 6540:   /**
 6508:    * Fail a download because of a failure status and prompt the provided
 6508:    * message or use a generic download failure message if nsnull.
 6508:    */
 6508:   nsresult FailDownload(nsresult aStatus, const PRUnichar *aMessage);
 6508: 
 7145:   /**
 7145:    * Opens the downloaded file with the appropriate application, which is
 7145:    * either the OS default, MIME type default, or the one selected by the user.
 7145:    *
 7145:    * This also adds the temporary file to the "To be deleted on Exit" list, if
 7145:    * the corresponding user preference is set (except on OS X).
 7145:    *
 7145:    * This function was adopted from nsExternalAppHandler::OpenWithApplication
 7145:    * (uriloader/exthandler/nsExternalHelperAppService.cpp).
 7145:    */
 7145:   nsresult OpenWithApplication();
 7145: 
    1:   nsDownloadManager *mDownloadManager;
    1:   nsCOMPtr<nsIURI> mTarget;
    1: 
    1: private:
    1:   nsString mDisplayName;
 5760:   nsCString mEntityID;
    1: 
    1:   nsCOMPtr<nsIURI> mSource;
 4765:   nsCOMPtr<nsIURI> mReferrer;
    1:   nsCOMPtr<nsICancelable> mCancelable;
    1:   nsCOMPtr<nsIRequest> mRequest;
    1:   nsCOMPtr<nsILocalFile> mTempFile;
    1:   nsCOMPtr<nsIMIMEInfo> mMIMEInfo;
    1: 
    1:   DownloadState mDownloadState;
    1:   DownloadType mDownloadType;
    1: 
 1691:   PRUint32 mID;
    1:   PRInt32 mPercentComplete;
 5979: 
 5979:   /**
 5979:    * These bytes are based on the position of where the request started, so 0
 5979:    * doesn't necessarily mean we have nothing. Use GetAmountTransferred and
 5979:    * GetSize for the real transferred amount and size.
 5979:    */
 6506:   PRInt64 mCurrBytes;
 6506:   PRInt64 mMaxBytes;
 5979: 
    1:   PRTime mStartTime;
    1:   PRTime mLastUpdate;
 6504:   PRInt64 mResumedAt;
    1:   double mSpeed;
    1: 
10797:   PRBool mHasMultipleFiles;
10797: 
 7147:   /**
 7147:    * Track various states of the download trying to auto-resume when starting
 7147:    * the download manager or restoring from a crash.
 7147:    *
 7147:    * DONT_RESUME: Don't automatically resume the download
 7147:    * AUTO_RESUME: Automaically resume the download
 7147:    */
 7147:   enum AutoResume { DONT_RESUME, AUTO_RESUME };
 7147:   AutoResume mAutoResume;
 7147: 
    1:   friend class nsDownloadManager;
    1: };
    1: 
    1: #endif
