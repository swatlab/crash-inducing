43080: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
43080:  * ***** BEGIN LICENSE BLOCK *****
43080:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43080:  *
43080:  * The contents of this file are subject to the Mozilla Public License Version
43080:  * 1.1 (the "License"); you may not use this file except in compliance with
43080:  * the License. You may obtain a copy of the License at
43080:  * http://www.mozilla.org/MPL/
43080:  *
43080:  * Software distributed under the License is distributed on an "AS IS" basis,
43080:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43080:  * for the specific language governing rights and limitations under the
43080:  * License.
43080:  *
43080:  * The Original Code is Android port code.
43080:  *
43080:  * The Initial Developer of the Original Code is
43080:  *   Mozilla Foundation
43080:  * Portions created by the Initial Developer are Copyright (C) 2010
43080:  * the Initial Developer. All Rights Reserved.
43080:  *
43080:  * Contributor(s):
43080:  *   Vladimir Vukicevic <vladimir@pobox.com>
43080:  *   Michael Wu <mwu@mozilla.com>
43080:  *   Brad Lassey <blassey@mozilla.com>
43080:  *   Alex Pakhotin <alexp@mozilla.com>
43080:  *
43080:  * Alternatively, the contents of this file may be used under the terms of
43080:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43080:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43080:  * in which case the provisions of the GPL or the LGPL are applicable instead
43080:  * of those above. If you wish to allow use of your version of this file only
43080:  * under the terms of either the GPL or the LGPL, and not to allow others to
43080:  * use your version of this file under the terms of the MPL, indicate your
43080:  * decision by deleting the provisions above and replace them with the notice
43080:  * and other provisions required by the GPL or the LGPL. If you do not delete
43080:  * the provisions above, a recipient may use your version of this file under
43080:  * the terms of any one of the MPL, the GPL or the LGPL.
43080:  *
43080:  * ***** END LICENSE BLOCK ***** */
43080: 
43080: #include <android/log.h>
43080: 
43080: #include <jni.h>
43080: 
43080: #include <stdlib.h>
43080: #include <string.h>
43080: #include <pthread.h>
43080: 
43080: #include "nsTArray.h"
43080: #include "nsString.h"
43080: #include "nsILocalFile.h"
43080: #include "nsAppRunner.h"
43080: #include "AndroidBridge.h"
56285: #include "APKOpen.h"
56285: #include "nsExceptionHandler.h"
43080: 
43080: #define LOG(args...) __android_log_print(ANDROID_LOG_INFO, MOZ_APP_NAME, args)
43080: 
83485: #define _STR(s) # s
83485: #define STR(s) _STR(s)
83485: 
43080: struct AutoAttachJavaThread {
43080:     AutoAttachJavaThread() {
43080:         attached = mozilla_AndroidBridge_SetMainThread((void*)pthread_self());
43080:     }
43080:     ~AutoAttachJavaThread() {
43080:         mozilla_AndroidBridge_SetMainThread(nsnull);
43080:         attached = PR_FALSE;
43080:     }
43080: 
79445:     bool attached;
43080: };
43080: 
43080: static void*
43080: GeckoStart(void *data)
43080: {
56285: #ifdef MOZ_CRASHREPORTER
56694:     const struct mapping_info *info = getLibraryMapping();
56285:     while (info->name) {
56285:       CrashReporter::AddLibraryMapping(info->name, info->file_id, info->base,
56285:                                        info->len, info->offset);
56285:       info++;
56285:     }
56285: #endif
56285: 
43080:     AutoAttachJavaThread attacher;
43080:     if (!attacher.attached)
43080:         return 0;
43080: 
43080:     if (!data) {
43080:         LOG("Failed to get arguments for GeckoStart\n");
43080:         return 0;
43080:     }
43080: 
43080:     nsresult rv;
43080:     nsCOMPtr<nsILocalFile> appini;
62123:     char* greHome = getenv("GRE_HOME");
62123:     if (!greHome) {
62123:         LOG("Failed to get GRE_HOME from the env vars");
62123:         return 0;
62123:     }
43080: 
43080:     nsCOMPtr<nsILocalFile> xreDir;
62123:     rv = NS_NewNativeLocalFile(nsDependentCString(greHome), PR_FALSE, getter_AddRefs(xreDir));
43080:     if (NS_FAILED(rv)) {
43080:         LOG("Failed to create nsIFile for xreDirectory");
43080:         return 0;
43080:     }
43080: 
83485:     nsXREAppData appData = {
83485:         sizeof(nsXREAppData),
83485:         xreDir.get(),
83485:         "Mozilla",
83485:         "Fennec",
83485:         STR(APP_VERSION),
83485:         STR(GRE_BUILDID),
83485:         "{a23983c0-fd0e-11dc-95ff-0800200c9a66}",
83485:         NULL,
83485: #ifdef MOZILLA_OFFICIAL
83485:         NS_XRE_ENABLE_EXTENSION_MANAGER | NS_XRE_ENABLE_CRASH_REPORTER,
83485: #else
83485:         NS_XRE_ENABLE_EXTENSION_MANAGER,
83485: #endif
83485:         xreDir.get(),
83485:         STR(GRE_MILESTONE),
83485:         STR(GRE_MILESTONE),
83485:         "https://crash-reports.mozilla.com/submit"
83485:     };
43080: 
43080:     nsTArray<char *> targs;
43080:     char *arg = strtok(static_cast<char *>(data), " ");
43080:     while (arg) {
43080:         targs.AppendElement(arg);
43080:         arg = strtok(NULL, " ");
43080:     }
43080:     targs.AppendElement(static_cast<char *>(nsnull));
43080: 
83485:     int result = XRE_main(targs.Length() - 1, targs.Elements(), &appData);
43080: 
43080:     if (result)
43080:         LOG("XRE_main returned %d", result);
43080: 
43080:     mozilla::AndroidBridge::Bridge()->NotifyXreExit();
43080: 
43080:     free(targs[0]);
43080:     nsMemory::Free(data);
43080:     return 0;
43080: }
43080: 
43080: extern "C" NS_EXPORT void JNICALL
43080: Java_org_mozilla_gecko_GeckoAppShell_nativeRun(JNIEnv *jenv, jclass jc, jstring jargs)
43080: {
43080:     // We need to put Gecko on a even more separate thread, because
43080:     // otherwise this JNI method never returns; this leads to problems
43080:     // with local references overrunning the local refs table, among
43080:     // other things, since GC can't ever run on them.
43080: 
43080:     // Note that we don't have xpcom initialized yet, so we can't use the
43080:     // thread manager for this.  Instead, we use pthreads directly.
43080: 
43080:     nsAutoString wargs;
43080:     int len = jenv->GetStringLength(jargs);
43080:     wargs.SetLength(jenv->GetStringLength(jargs));
43080:     jenv->GetStringRegion(jargs, 0, len, wargs.BeginWriting());
43080:     char *args = ToNewUTF8String(wargs);
43080: 
60270:     GeckoStart(args);
43080: }
43080: 
