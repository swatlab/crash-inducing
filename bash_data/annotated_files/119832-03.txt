     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
     1:  *
 99778:  * This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsSecurityWarningDialogs.h"
     1: #include "nsIComponentManager.h"
     1: #include "nsIServiceManager.h"
     1: #include "nsReadableUtils.h"
     1: #include "nsString.h"
     1: #include "nsIPrompt.h"
     1: #include "nsIInterfaceRequestor.h"
     1: #include "nsIInterfaceRequestorUtils.h"
     1: #include "nsIPrefService.h"
     1: #include "nsIPrefBranch.h"
 28803: #include "nsThreadUtils.h"
119832: #include "nsAutoPtr.h"
     1: 
107271: #include "mozilla/Telemetry.h"
107271: #include "nsISecurityUITelemetry.h"
107271: 
     1: NS_IMPL_THREADSAFE_ISUPPORTS1(nsSecurityWarningDialogs, nsISecurityWarningDialogs)
     1: 
     1: #define STRING_BUNDLE_URL    "chrome://pipnss/locale/security.properties"
     1: 
     1: #define ENTER_SITE_PREF      "security.warn_entering_secure"
     1: #define WEAK_SITE_PREF       "security.warn_entering_weak"
     1: #define LEAVE_SITE_PREF      "security.warn_leaving_secure"
     1: #define MIXEDCONTENT_PREF    "security.warn_viewing_mixed"
     1: #define INSECURE_SUBMIT_PREF "security.warn_submit_insecure"
     1: 
     1: nsSecurityWarningDialogs::nsSecurityWarningDialogs()
     1: {
     1: }
     1: 
     1: nsSecurityWarningDialogs::~nsSecurityWarningDialogs()
     1: {
     1: }
     1: 
     1: nsresult
     1: nsSecurityWarningDialogs::Init()
     1: {
     1:   nsresult rv;
     1: 
     1:   mPrefBranch = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
     1:   if (NS_FAILED(rv)) return rv;
     1: 
  5691:   nsCOMPtr<nsIStringBundleService> service =
  5691:            do_GetService(NS_STRINGBUNDLE_CONTRACTID, &rv);
     1:   if (NS_FAILED(rv)) return rv;
     1:   
     1:   rv = service->CreateBundle(STRING_BUNDLE_URL,
     1:                              getter_AddRefs(mStringBundle));
     1:   return rv;
     1: }
     1: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmEnteringSecure(nsIInterfaceRequestor *ctx, bool *_retval)
     1: {
     1:   nsresult rv;
     1: 
     1:   rv = AlertDialog(ctx, ENTER_SITE_PREF, 
     1:                    NS_LITERAL_STRING("EnterSecureMessage").get(),
 28803:                    NS_LITERAL_STRING("EnterSecureShowAgain").get(),
107271:                    false,
107271:                    nsISecurityUITelemetry::WARNING_ENTERING_SECURE_SITE);
     1: 
 80486:   *_retval = true;
     1:   return rv;
     1: }
     1: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmEnteringWeak(nsIInterfaceRequestor *ctx, bool *_retval)
     1: {
     1:   nsresult rv;
     1: 
     1:   rv = AlertDialog(ctx, WEAK_SITE_PREF,
     1:                    NS_LITERAL_STRING("WeakSecureMessage").get(),
 28803:                    NS_LITERAL_STRING("WeakSecureShowAgain").get(),
107271:                    false,
107271:                    nsISecurityUITelemetry::WARNING_ENTERING_WEAK_SITE);
     1: 
 80486:   *_retval = true;
     1:   return rv;
     1: }
     1: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmLeavingSecure(nsIInterfaceRequestor *ctx, bool *_retval)
     1: {
     1:   nsresult rv;
     1: 
     1:   rv = AlertDialog(ctx, LEAVE_SITE_PREF, 
     1:                    NS_LITERAL_STRING("LeaveSecureMessage").get(),
 28803:                    NS_LITERAL_STRING("LeaveSecureShowAgain").get(),
107271:                    false,
107271:                    nsISecurityUITelemetry::WARNING_LEAVING_SECURE_SITE);
     1: 
 80486:   *_retval = true;
     1:   return rv;
     1: }
     1: 
     1: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmMixedMode(nsIInterfaceRequestor *ctx, bool *_retval)
     1: {
     1:   nsresult rv;
     1: 
     1:   rv = AlertDialog(ctx, MIXEDCONTENT_PREF, 
     1:                    NS_LITERAL_STRING("MixedContentMessage").get(),
 28803:                    NS_LITERAL_STRING("MixedContentShowAgain").get(),
107271:                    true,
107271:                    nsISecurityUITelemetry::WARNING_MIXED_CONTENT);
     1: 
 80486:   *_retval = true;
     1:   return rv;
     1: }
     1: 
 28803: class nsAsyncAlert : public nsRunnable
 28803: {
 28803: public:
 28803:   nsAsyncAlert(nsIPrompt*       aPrompt,
 28803:                const char*      aPrefName,
 28803:                const PRUnichar* aDialogMessageName,
 28803:                const PRUnichar* aShowAgainName,
 28803:                nsIPrefBranch*   aPrefBranch,
107271:                nsIStringBundle* aStringBundle,
108991:                uint32_t         aBucket)
 28803:   : mPrompt(aPrompt), mPrefName(aPrefName),
 28803:     mDialogMessageName(aDialogMessageName),
 28803:     mShowAgainName(aShowAgainName), mPrefBranch(aPrefBranch),
107271:     mStringBundle(aStringBundle),
107271:     mBucket(aBucket) {}
 28803:   NS_IMETHOD Run();
     1: 
 28803: protected:
 28803:   nsCOMPtr<nsIPrompt>       mPrompt;
 28803:   nsCString                 mPrefName;
 28803:   nsString                  mDialogMessageName;
 28803:   nsString                  mShowAgainName;
 28803:   nsCOMPtr<nsIPrefBranch>   mPrefBranch;
 28803:   nsCOMPtr<nsIStringBundle> mStringBundle;
108991:   uint32_t                  mBucket;
 28803: };
 28803: 
 28803: NS_IMETHODIMP
 28803: nsAsyncAlert::Run()
     1: {
     1:   nsresult rv;
     1: 
     1:   // Get user's preference for this alert
 79445:   bool prefValue;
 28803:   rv = mPrefBranch->GetBoolPref(mPrefName.get(), &prefValue);
 80486:   if (NS_FAILED(rv)) prefValue = true;
     1: 
     1:   // Stop if alert is not requested
     1:   if (!prefValue) return NS_OK;
     1: 
107271:   mozilla::Telemetry::Accumulate(mozilla::Telemetry::SECURITY_UI, mBucket);
     1:   // Check for a show-once pref for this dialog.
     1:   // If the show-once pref is set to true:
     1:   //   - The default value of the "show every time" checkbox is unchecked
     1:   //   - If the user checks the checkbox, we clear the show-once pref.
     1: 
110974:   nsAutoCString showOncePref(mPrefName);
     1:   showOncePref += ".show_once";
     1: 
 79445:   bool showOnce = false;
     1:   mPrefBranch->GetBoolPref(showOncePref.get(), &showOnce);
     1: 
     1:   if (showOnce)
 80486:     prefValue = false;
     1: 
     1:   // Get messages strings from localization file
     1:   nsXPIDLString windowTitle, message, dontShowAgain;
     1: 
     1:   mStringBundle->GetStringFromName(NS_LITERAL_STRING("Title").get(),
     1:                                    getter_Copies(windowTitle));
 28803:   mStringBundle->GetStringFromName(mDialogMessageName.get(),
     1:                                    getter_Copies(message));
 28803:   mStringBundle->GetStringFromName(mShowAgainName.get(),
     1:                                    getter_Copies(dontShowAgain));
     1:   if (!windowTitle || !message || !dontShowAgain) return NS_ERROR_FAILURE;
     1: 
 28803:   rv = mPrompt->AlertCheck(windowTitle, message, dontShowAgain, &prefValue);
     1:   if (NS_FAILED(rv)) return rv;
     1:       
     1:   if (!prefValue) {
 80486:     mPrefBranch->SetBoolPref(mPrefName.get(), false);
     1:   } else if (showOnce) {
 80486:     mPrefBranch->SetBoolPref(showOncePref.get(), false);
     1:   }
     1: 
     1:   return rv;
     1: }
     1: 
 28803: 
 28803: nsresult
 28803: nsSecurityWarningDialogs::AlertDialog(nsIInterfaceRequestor* aCtx,
 28803:                                       const char* aPrefName,
 28803:                                       const PRUnichar* aDialogMessageName,
 28803:                                       const PRUnichar* aShowAgainName,
107271:                                       bool aAsync,
108991:                                       const uint32_t aBucket)
 28803: {
 28803:   // Get Prompt to use
 28803:   nsCOMPtr<nsIPrompt> prompt = do_GetInterface(aCtx);
 28803:   if (!prompt) return NS_ERROR_FAILURE;
 28803: 
 28803:   nsRefPtr<nsAsyncAlert> alert = new nsAsyncAlert(prompt,
 28803:                                                   aPrefName,
 28803:                                                   aDialogMessageName,
 28803:                                                   aShowAgainName,
 28803:                                                   mPrefBranch,
107271:                                                   mStringBundle,
107271:                                                   aBucket);
107271: 
 28803:   NS_ENSURE_TRUE(alert, NS_ERROR_OUT_OF_MEMORY);
 28803:   return aAsync ? NS_DispatchToCurrentThread(alert) : alert->Run();
 28803: }
 28803: 
 28803: 
 28803: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmPostToInsecure(nsIInterfaceRequestor *ctx, bool* _result)
     1: {
     1:   nsresult rv;
     1: 
107271:   // The Telemetry clickthrough constant is 1 more than the constant for the dialog.
     1:   rv = ConfirmDialog(ctx, INSECURE_SUBMIT_PREF,
     1:                      NS_LITERAL_STRING("PostToInsecureFromInsecureMessage").get(),
     1:                      NS_LITERAL_STRING("PostToInsecureFromInsecureShowAgain").get(),
107271:                      nsISecurityUITelemetry::WARNING_CONFIRM_POST_TO_INSECURE_FROM_INSECURE,
     1:                      _result);
     1: 
     1:   return rv;
     1: }
     1: 
     1: NS_IMETHODIMP 
 79445: nsSecurityWarningDialogs::ConfirmPostToInsecureFromSecure(nsIInterfaceRequestor *ctx, bool* _result)
     1: {
     1:   nsresult rv;
     1: 
107271:   // The Telemetry clickthrough constant is 1 more than the constant for the dialog.
106838:   rv = ConfirmDialog(ctx, nullptr, // No preference for this one - it's too important
     1:                      NS_LITERAL_STRING("PostToInsecureFromSecureMessage").get(),
106838:                      nullptr,
107271:                      nsISecurityUITelemetry::WARNING_CONFIRM_POST_TO_INSECURE_FROM_SECURE,
     1:                      _result);
     1: 
     1:   return rv;
     1: }
     1: 
     1: nsresult
     1: nsSecurityWarningDialogs::ConfirmDialog(nsIInterfaceRequestor *ctx, const char *prefName,
     1:                             const PRUnichar *messageName, 
     1:                             const PRUnichar *showAgainName, 
108991:                             const uint32_t aBucket,
 79445:                             bool* _result)
     1: {
     1:   nsresult rv;
     1: 
     1:   // Get user's preference for this alert
     1:   // prefName, showAgainName are null if there is no preference for this dialog
 79445:   bool prefValue = true;
     1:   
119832:   if (prefName != nullptr) {
     1:     rv = mPrefBranch->GetBoolPref(prefName, &prefValue);
 80486:     if (NS_FAILED(rv)) prefValue = true;
     1:   }
     1:   
     1:   // Stop if confirm is not requested
     1:   if (!prefValue) {
 80486:     *_result = true;
     1:     return NS_OK;
     1:   }
     1:   
107271:   MOZ_ASSERT(NS_IsMainThread());
107271:   mozilla::Telemetry::Accumulate(mozilla::Telemetry::SECURITY_UI, aBucket);
     1:   // See AlertDialog() for a description of how showOnce works.
110974:   nsAutoCString showOncePref(prefName);
     1:   showOncePref += ".show_once";
     1: 
 79445:   bool showOnce = false;
     1:   mPrefBranch->GetBoolPref(showOncePref.get(), &showOnce);
     1: 
     1:   if (showOnce)
 80486:     prefValue = false;
     1: 
     1:   // Get Prompt to use
     1:   nsCOMPtr<nsIPrompt> prompt = do_GetInterface(ctx);
     1:   if (!prompt) return NS_ERROR_FAILURE;
     1: 
     1:   // Get messages strings from localization file
     1:   nsXPIDLString windowTitle, message, alertMe, cont;
     1: 
     1:   mStringBundle->GetStringFromName(NS_LITERAL_STRING("Title").get(),
     1:                                    getter_Copies(windowTitle));
     1:   mStringBundle->GetStringFromName(messageName,
     1:                                    getter_Copies(message));
119832:   if (showAgainName != nullptr) {
     1:     mStringBundle->GetStringFromName(showAgainName,
     1:                                      getter_Copies(alertMe));
     1:   }
     1:   mStringBundle->GetStringFromName(NS_LITERAL_STRING("Continue").get(),
     1:                                    getter_Copies(cont));
     1:   // alertMe is allowed to be null
     1:   if (!windowTitle || !message || !cont) return NS_ERROR_FAILURE;
     1:       
     1:   // Replace # characters with newlines to lay out the dialog.
     1:   PRUnichar* msgchars = message.BeginWriting();
     1:   
108991:   uint32_t i = 0;
     1:   for (i = 0; msgchars[i] != '\0'; i++) {
     1:     if (msgchars[i] == '#') {
     1:       msgchars[i] = '\n';
     1:     }
     1:   }  
     1: 
108991:   int32_t buttonPressed;
     1: 
     1:   rv  = prompt->ConfirmEx(windowTitle, 
     1:                           message, 
     1:                           (nsIPrompt::BUTTON_TITLE_IS_STRING * nsIPrompt::BUTTON_POS_0) +
     1:                           (nsIPrompt::BUTTON_TITLE_CANCEL * nsIPrompt::BUTTON_POS_1),
     1:                           cont,
106838:                           nullptr,
106838:                           nullptr,
     1:                           alertMe, 
     1:                           &prefValue, 
     1:                           &buttonPressed);
     1: 
     1:   if (NS_FAILED(rv)) return rv;
     1: 
     1:   *_result = (buttonPressed != 1);
107271:   if (*_result) {
107271:   // For confirmation dialogs, the clickthrough constant is 1 more
107271:   // than the constant for the dialog.
107271:   mozilla::Telemetry::Accumulate(mozilla::Telemetry::SECURITY_UI, aBucket + 1);
107271:   }
     1: 
119832:   if (!prefValue && prefName != nullptr) {
 80486:     mPrefBranch->SetBoolPref(prefName, false);
     1:   } else if (prefValue && showOnce) {
 80486:     mPrefBranch->SetBoolPref(showOncePref.get(), false);
     1:   }
     1: 
     1:   return rv;
     1: }
     1: 
