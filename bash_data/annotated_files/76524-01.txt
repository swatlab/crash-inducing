    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998-1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * A base class which implements nsIStyleSheetLinkingElement and can
    1:  * be subclassed by various content nodes that want to load
    1:  * stylesheets (<style>, <link>, processing instructions, etc).
    1:  */
    1: 
    1: #include "nsStyleLinkElement.h"
    1: 
    1: #include "nsIContent.h"
47937: #include "mozilla/css/Loader.h"
42163: #include "nsCSSStyleSheet.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMComment.h"
    1: #include "nsIDOMNode.h"
    1: #include "nsIDOMStyleSheet.h"
    1: #include "nsNetUtil.h"
    1: #include "nsUnicharUtils.h"
    1: #include "nsCRT.h"
    1: #include "nsXPCOMCIDInternal.h"
    1: #include "nsUnicharInputStream.h"
    1: #include "nsContentUtils.h"
    1: 
    1: nsStyleLinkElement::nsStyleLinkElement()
    1:   : mDontLoadStyle(PR_FALSE)
    1:   , mUpdatesEnabled(PR_TRUE)
    1:   , mLineNumber(1)
    1: {
    1: }
    1: 
    1: nsStyleLinkElement::~nsStyleLinkElement()
    1: {
24412:   nsStyleLinkElement::SetStyleSheet(nsnull);
    1: }
    1: 
    1: NS_IMETHODIMP 
    1: nsStyleLinkElement::SetStyleSheet(nsIStyleSheet* aStyleSheet)
    1: {
42163:   nsRefPtr<nsCSSStyleSheet> cssSheet = do_QueryObject(mStyleSheet);
    1:   if (cssSheet) {
    1:     cssSheet->SetOwningNode(nsnull);
    1:   }
    1: 
    1:   mStyleSheet = aStyleSheet;
42163:   cssSheet = do_QueryObject(mStyleSheet);
    1:   if (cssSheet) {
    1:     nsCOMPtr<nsIDOMNode> node;
    1:     CallQueryInterface(this,
 3233:                        static_cast<nsIDOMNode**>(getter_AddRefs(node)));
    1:     if (node) {
    1:       cssSheet->SetOwningNode(node);
    1:     }
    1:   }
    1:     
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP 
    1: nsStyleLinkElement::GetStyleSheet(nsIStyleSheet*& aStyleSheet)
    1: {
    1:   aStyleSheet = mStyleSheet;
    1:   NS_IF_ADDREF(aStyleSheet);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP 
  681: nsStyleLinkElement::InitStyleLinkElement(PRBool aDontLoadStyle)
    1: {
    1:   mDontLoadStyle = aDontLoadStyle;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsStyleLinkElement::GetSheet(nsIDOMStyleSheet** aSheet)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aSheet);
    1:   *aSheet = nsnull;
    1: 
    1:   if (mStyleSheet) {
    1:     CallQueryInterface(mStyleSheet, aSheet);
    1:   }
    1: 
    1:   // Always return NS_OK to avoid throwing JS exceptions if mStyleSheet 
    1:   // is not a nsIDOMStyleSheet
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsStyleLinkElement::SetEnableUpdates(PRBool aEnableUpdates)
    1: {
    1:   mUpdatesEnabled = aEnableUpdates;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsStyleLinkElement::GetCharset(nsAString& aCharset)
    1: {
    1:   // descendants have to implement this themselves
    1:   return NS_ERROR_NOT_IMPLEMENTED;
    1: }
    1: 
    1: /* virtual */ void
    1: nsStyleLinkElement::OverrideBaseURI(nsIURI* aNewBaseURI)
    1: {
    1:   NS_NOTREACHED("Base URI can't be overriden in this implementation "
    1:                 "of nsIStyleSheetLinkingElement.");
    1: }
    1: 
    1: /* virtual */ void
    1: nsStyleLinkElement::SetLineNumber(PRUint32 aLineNumber)
    1: {
    1:   mLineNumber = aLineNumber;
    1: }
    1: 
    1: void nsStyleLinkElement::ParseLinkTypes(const nsAString& aTypes,
23904:                                         nsTArray<nsString>& aResult)
    1: {
    1:   nsAString::const_iterator start, done;
    1:   aTypes.BeginReading(start);
    1:   aTypes.EndReading(done);
    1:   if (start == done)
    1:     return;
    1: 
    1:   nsAString::const_iterator current(start);
    1:   PRBool inString = !nsCRT::IsAsciiSpace(*current);
    1:   nsAutoString subString;
    1: 
    1:   while (current != done) {
    1:     if (nsCRT::IsAsciiSpace(*current)) {
    1:       if (inString) {
    1:         ToLowerCase(Substring(start, current), subString);
23904:         aResult.AppendElement(subString);
    1:         inString = PR_FALSE;
    1:       }
    1:     }
    1:     else {
    1:       if (!inString) {
    1:         start = current;
    1:         inString = PR_TRUE;
    1:       }
    1:     }
    1:     ++current;
    1:   }
    1:   if (inString) {
    1:     ToLowerCase(Substring(start, current), subString);
23904:     aResult.AppendElement(subString);
    1:   }
    1: }
    1: 
  681: NS_IMETHODIMP
  681: nsStyleLinkElement::UpdateStyleSheet(nsICSSLoaderObserver* aObserver,
  681:                                      PRBool* aWillNotify,
  681:                                      PRBool* aIsAlternate)
  681: {
  681:   return DoUpdateStyleSheet(nsnull, aObserver, aWillNotify, aIsAlternate,
  681:                             PR_FALSE);
  681: }
    1: 
  681: nsresult
  681: nsStyleLinkElement::UpdateStyleSheetInternal(nsIDocument *aOldDocument,
    1:                                              PRBool aForceUpdate)
    1: {
  681:   PRBool notify, alternate;
  681:   return DoUpdateStyleSheet(aOldDocument, nsnull, &notify, &alternate,
  681:                             aForceUpdate);
  681: }
  681: 
  681: nsresult
  681: nsStyleLinkElement::DoUpdateStyleSheet(nsIDocument *aOldDocument,
  681:                                        nsICSSLoaderObserver* aObserver,
  681:                                        PRBool* aWillNotify,
  681:                                        PRBool* aIsAlternate,
  681:                                        PRBool aForceUpdate)
  681: {
  681:   *aWillNotify = PR_FALSE;
  681: 
    1:   if (mStyleSheet && aOldDocument) {
    1:     // We're removing the link element from the document, unload the
    1:     // stylesheet.  We want to do this even if updates are disabled, since
    1:     // otherwise a sheet with a stale linking element pointer will be hanging
    1:     // around -- not good!
    1:     aOldDocument->BeginUpdate(UPDATE_STYLE);
    1:     aOldDocument->RemoveStyleSheet(mStyleSheet);
    1:     aOldDocument->EndUpdate(UPDATE_STYLE);
24412:     nsStyleLinkElement::SetStyleSheet(nsnull);
    1:   }
    1: 
    1:   if (mDontLoadStyle || !mUpdatesEnabled) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIContent> thisContent;
    1:   QueryInterface(NS_GET_IID(nsIContent), getter_AddRefs(thisContent));
    1: 
    1:   NS_ENSURE_TRUE(thisContent, NS_ERROR_FAILURE);
    1: 
    1:   nsCOMPtr<nsIDocument> doc = thisContent->GetDocument();
    1: 
38851:   if (!doc || !doc->CSSLoader()->GetEnabled()) {
 8228:     return NS_OK;
 8228:   }
 8228: 
    1:   PRBool isInline;
30794:   nsCOMPtr<nsIURI> uri = GetStyleSheetURL(&isInline);
    1: 
    1:   if (!aForceUpdate && mStyleSheet && !isInline && uri) {
42400:     nsIURI* oldURI = mStyleSheet->GetSheetURI();
    1:     if (oldURI) {
    1:       PRBool equal;
    1:       nsresult rv = oldURI->Equals(uri, &equal);
    1:       if (NS_SUCCEEDED(rv) && equal) {
    1:         return NS_OK; // We already loaded this stylesheet
    1:       }
    1:     }
    1:   }
    1: 
    1:   if (mStyleSheet) {
    1:     doc->BeginUpdate(UPDATE_STYLE);
    1:     doc->RemoveStyleSheet(mStyleSheet);
    1:     doc->EndUpdate(UPDATE_STYLE);
24412:     nsStyleLinkElement::SetStyleSheet(nsnull);
    1:   }
    1: 
    1:   if (!uri && !isInline) {
    1:     return NS_OK; // If href is empty and this is not inline style then just bail
    1:   }
    1: 
    1:   nsAutoString title, type, media;
    1:   PRBool isAlternate;
    1: 
    1:   GetStyleSheetInfo(title, type, media, &isAlternate);
    1: 
    1:   if (!type.LowerCaseEqualsLiteral("text/css")) {
    1:     return NS_OK;
    1:   }
    1: 
  681:   PRBool doneLoading = PR_FALSE;
    1:   nsresult rv = NS_OK;
    1:   if (isInline) {
70060:     nsAutoString text;
70060:     nsContentUtils::GetNodeTextContent(thisContent, PR_FALSE, text);
    1: 
70060:     // Parse the style sheet.
    1:     rv = doc->CSSLoader()->
70060:       LoadInlineStyle(thisContent, text, mLineNumber, title, media,
  681:                       aObserver, &doneLoading, &isAlternate);
    1:   }
    1:   else {
76524:     // XXXbz clone the URI here to work around content policies modifying URIs.
76524:     nsCOMPtr<nsIURI> clonedURI;
76524:     uri->Clone(getter_AddRefs(clonedURI));
76524:     NS_ENSURE_TRUE(clonedURI, NS_ERROR_OUT_OF_MEMORY);
    1:     rv = doc->CSSLoader()->
76524:       LoadStyleLink(thisContent, clonedURI, title, media, isAlternate, aObserver,
  681:                     &isAlternate);
20090:     if (NS_FAILED(rv)) {
20090:       // Don't propagate LoadStyleLink() errors further than this, since some
20090:       // consumers (e.g. nsXMLContentSink) will completely abort on innocuous
20090:       // things like a stylesheet load being blocked by the security system.
13853:       doneLoading = PR_TRUE;
20090:       isAlternate = PR_FALSE;
13853:       rv = NS_OK;
13853:     }
    1:   }
    1: 
  681:   NS_ENSURE_SUCCESS(rv, rv);
  681: 
  681:   *aWillNotify = !doneLoading;
  681:   *aIsAlternate = isAlternate;
  681: 
  681:   return NS_OK;
    1: }
