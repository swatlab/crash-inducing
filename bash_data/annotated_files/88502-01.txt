    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla SVG project.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Crocodile Clips Ltd..
    1:  * Portions created by the Initial Developer are Copyright (C) 2001
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Alex Fritze <alex.fritze@crocodile-clips.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsSVGForeignObjectFrame.h"
    1: 
    1: #include "nsIDOMSVGForeignObjectElem.h"
    1: #include "nsIDOMSVGSVGElement.h"
    1: #include "nsSVGOuterSVGFrame.h"
    1: #include "nsRegion.h"
    1: #include "nsGkAtoms.h"
    1: #include "nsLayoutUtils.h"
    1: #include "nsSVGUtils.h"
    1: #include "nsIURI.h"
    1: #include "nsSVGRect.h"
    1: #include "nsINameSpaceManager.h"
    1: #include "nsSVGForeignObjectElement.h"
    1: #include "nsSVGContainerFrame.h"
    1: #include "gfxContext.h"
    1: #include "gfxMatrix.h"
    1: 
    1: //----------------------------------------------------------------------
    1: // Implementation
    1: 
    1: nsIFrame*
 2671: NS_NewSVGForeignObjectFrame(nsIPresShell   *aPresShell,
 2671:                             nsStyleContext *aContext)
    1: {
    1:   return new (aPresShell) nsSVGForeignObjectFrame(aContext);
    1: }
    1: 
32423: NS_IMPL_FRAMEARENA_HELPERS(nsSVGForeignObjectFrame)
32423: 
    1: nsSVGForeignObjectFrame::nsSVGForeignObjectFrame(nsStyleContext* aContext)
    1:   : nsSVGForeignObjectFrameBase(aContext),
80486:     mInReflow(false)
    1: {
50423:   AddStateBits(NS_FRAME_REFLOW_ROOT | NS_FRAME_MAY_BE_TRANSFORMED);
    1: }
    1: 
    1: //----------------------------------------------------------------------
23554: // nsIFrame methods
23511: 
23554: NS_QUERYFRAME_HEAD(nsSVGForeignObjectFrame)
23554:   NS_QUERYFRAME_ENTRY(nsISVGChildFrame)
23554: NS_QUERYFRAME_TAIL_INHERITING(nsSVGForeignObjectFrameBase)
    1: 
 8210: NS_IMETHODIMP
 8210: nsSVGForeignObjectFrame::Init(nsIContent* aContent,
 8210:                               nsIFrame*   aParent,
 8210:                               nsIFrame*   aPrevInFlow)
 8210: {
23953: #ifdef DEBUG
23953:   nsCOMPtr<nsIDOMSVGForeignObjectElement> foreignObject = do_QueryInterface(aContent);
23953:   NS_ASSERTION(foreignObject, "Content is not an SVG foreignObject!");
23953: #endif
23953: 
 8210:   nsresult rv = nsSVGForeignObjectFrameBase::Init(aContent, aParent, aPrevInFlow);
68719:   AddStateBits(aParent->GetStateBits() &
68719:                (NS_STATE_SVG_NONDISPLAY_CHILD | NS_STATE_SVG_CLIPPATH_CHILD));
 8210:   if (NS_SUCCEEDED(rv)) {
 8210:     nsSVGUtils::GetOuterSVGFrame(this)->RegisterForeignObject(this);
 8210:   }
 8210:   return rv;
 8210: }
 8210: 
36647: void nsSVGForeignObjectFrame::DestroyFrom(nsIFrame* aDestructRoot)
    1: {
 8210:   nsSVGUtils::GetOuterSVGFrame(this)->UnregisterForeignObject(this);
36647:   nsSVGForeignObjectFrameBase::DestroyFrom(aDestructRoot);
    1: }
    1: 
    1: nsIAtom *
    1: nsSVGForeignObjectFrame::GetType() const
    1: {
    1:   return nsGkAtoms::svgForeignObjectFrame;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::AttributeChanged(PRInt32  aNameSpaceID,
    1:                                           nsIAtom *aAttribute,
    1:                                           PRInt32  aModType)
    1: {
    1:   if (aNameSpaceID == kNameSpaceID_None) {
    1:     if (aAttribute == nsGkAtoms::width ||
    1:         aAttribute == nsGkAtoms::height) {
 2671:       UpdateGraphic(); // update mRect before requesting reflow
 8210:       // XXXjwatt: why mark intrinsic widths dirty? can't we just use eResize?
 1119:       RequestReflow(nsIPresShell::eStyleChange);
    1:     } else if (aAttribute == nsGkAtoms::x ||
29327:                aAttribute == nsGkAtoms::y ||
79554:                aAttribute == nsGkAtoms::viewBox ||
79554:                aAttribute == nsGkAtoms::preserveAspectRatio ||
29327:                aAttribute == nsGkAtoms::transform) {
    1:       // make sure our cached transform matrix gets (lazily) updated
    1:       mCanvasTM = nsnull;
    1:       UpdateGraphic();
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
84838: /* virtual */ void
84838: nsSVGForeignObjectFrame::DidSetStyleContext(nsStyleContext* aOldStyleContext)
84838: {
84838:   nsSVGForeignObjectFrameBase::DidSetStyleContext(aOldStyleContext);
84838: 
86327:   // No need to invalidate before first reflow - that will happen elsewhere.
86327:   // Moreover we haven't been initialised properly yet so we may not have the
86327:   // right state bits.
86327:   if (!(GetStateBits() & NS_FRAME_FIRST_REFLOW)) {
84838:     UpdateGraphic();
84838:   }
86327: }
84838: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::Reflow(nsPresContext*           aPresContext,
    1:                                 nsHTMLReflowMetrics&     aDesiredSize,
    1:                                 const nsHTMLReflowState& aReflowState,
    1:                                 nsReflowStatus&          aStatus)
    1: {
 2671:   // InitialUpdate and AttributeChanged make sure mRect is up to date before
 2671:   // we're called (UpdateCoveredRegion sets mRect).
 2671: 
    1:   NS_ASSERTION(!aReflowState.parentReflowState,
    1:                "should only get reflow from being reflow root");
    1:   NS_ASSERTION(aReflowState.ComputedWidth() == GetSize().width &&
 4166:                aReflowState.ComputedHeight() == GetSize().height,
30710:                "reflow roots should be reflowed at existing size and "
    1:                "svg.css should ensure we have no padding/border/margin");
    1: 
    1:   DoReflow();
    1: 
    1:   aDesiredSize.width = aReflowState.ComputedWidth();
 4166:   aDesiredSize.height = aReflowState.ComputedHeight();
55039:   aDesiredSize.SetOverflowAreasToDesiredBounds();
    1:   aStatus = NS_FRAME_COMPLETE;
    1: 
    1:   return NS_OK;
    1: }
    1: 
 2671: void
 2671: nsSVGForeignObjectFrame::InvalidateInternal(const nsRect& aDamageRect,
 2671:                                             nscoord aX, nscoord aY,
 2671:                                             nsIFrame* aForChild,
19380:                                             PRUint32 aFlags)
 2671: {
29327:   // This is called by our descendants when they change.
29327: 
20807:   if (GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)
 2671:     return;
 2671: 
19380:   nsRegion* region = (aFlags & INVALIDATE_CROSS_DOC)
29068:     ? &mSubDocDirtyRegion : &mSameDocDirtyRegion;
19380:   region->Or(*region, aDamageRect + nsPoint(aX, aY));
55825:   FlushDirtyRegion(aFlags);
 2671: }
 2671: 
    1: 
    1: /**
29327:  * Returns the app unit canvas bounds of a userspace rect.
29327:  *
29327:  * @param aToCanvas Transform from userspace to canvas device space.
    1:  */
 2671: static nsRect
29327: ToCanvasBounds(const gfxRect &aUserspaceRect,
29327:                const gfxMatrix &aToCanvas,
29327:                const nsPresContext *presContext)
    1: {
29327:   return nsLayoutUtils::RoundGfxRectToAppRect(
29327:                           aToCanvas.TransformBounds(aUserspaceRect),
29327:                           presContext->AppUnitsPerDevPixel());
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::PaintSVG(nsSVGRenderState *aContext,
20652:                                   const nsIntRect *aDirtyRect)
    1: {
 2748:   if (IsDisabled())
 2748:     return NS_OK;
 2748: 
77154:   nsIFrame* kid = GetFirstPrincipalChild();
    1:   if (!kid)
    1:     return NS_OK;
    1: 
48242:   gfxMatrix matrixForChildren = GetCanvasTMForChildren();
48242:   gfxMatrix matrix = GetCanvasTM();
    1: 
68481:   nsRenderingContext *ctx = aContext->GetRenderingContext(this);
    1: 
48242:   if (!ctx || matrixForChildren.IsSingular()) {
    1:     NS_WARNING("Can't render foreignObject element!");
    1:     return NS_ERROR_FAILURE;
    1:   }
    1: 
22428:   /* Check if we need to draw anything. */
86449:   if (aDirtyRect) {
29327:     PRInt32 appUnitsPerDevPx = PresContext()->AppUnitsPerDevPixel();
29327:     if (!mRect.ToOutsidePixels(appUnitsPerDevPx).Intersects(*aDirtyRect))
22428:       return NS_OK;
86449:   }
22428: 
    1:   gfxContext *gfx = aContext->GetGfxContext();
    1: 
    1:   gfx->Save();
  927: 
  927:   if (GetStyleDisplay()->IsScrollableOverflow()) {
 1763:     float x, y, width, height;
 3233:     static_cast<nsSVGElement*>(mContent)->
 1763:       GetAnimatedLengthValues(&x, &y, &width, &height, nsnull);
  927: 
29308:     gfxRect clipRect =
29327:       nsSVGUtils::GetClipRectForFrame(this, 0.0f, 0.0f, width, height);
37654:     nsSVGUtils::SetClipRect(gfx, matrix, clipRect);
  927:   }
  927: 
48242:   gfx->Multiply(matrixForChildren);
    1: 
37654:   // Transform the dirty rect into the rectangle containing the
37654:   // transformed dirty rect.
37654:   gfxMatrix invmatrix = matrix.Invert();
37654:   NS_ASSERTION(!invmatrix.IsSingular(),
37654:                "inverse of non-singular matrix should be non-singular");
37654: 
88476:   nsRect kidDirtyRect = kid->GetVisualOverflowRect();
88476:   if (aDirtyRect) {
37654:     gfxRect transDirtyRect = gfxRect(aDirtyRect->x, aDirtyRect->y,
37654:                                      aDirtyRect->width, aDirtyRect->height);
37654:     transDirtyRect = invmatrix.TransformBounds(transDirtyRect);
37654: 
37654:     transDirtyRect.Scale(nsPresContext::AppUnitsPerCSSPixel());
37654:     nsPoint tl(NSToCoordFloor(transDirtyRect.X()),
37654:                NSToCoordFloor(transDirtyRect.Y()));
37654:     nsPoint br(NSToCoordCeil(transDirtyRect.XMost()),
37654:                NSToCoordCeil(transDirtyRect.YMost()));
88476:     kidDirtyRect.IntersectRect(kidDirtyRect,
88476:                                nsRect(tl.x, tl.y, br.x - tl.x, br.y - tl.y));
88476:   }
37654: 
55826:   PRUint32 flags = nsLayoutUtils::PAINT_IN_TRANSFORM;
55826:   if (aContext->IsPaintingToWindow()) {
55826:     flags |= nsLayoutUtils::PAINT_TO_WINDOW;
55826:   }
37654:   nsresult rv = nsLayoutUtils::PaintFrame(ctx, kid, nsRegion(kidDirtyRect),
55826:                                           NS_RGBA(0,0,0,0), flags);
    1: 
    1:   gfx->Restore();
    1: 
    1:   return rv;
    1: }
    1: 
74283: gfx3DMatrix
86353: nsSVGForeignObjectFrame::GetTransformMatrix(nsIFrame* aAncestor,
86353:                                             nsIFrame **aOutAncestor)
19214: {
19214:   NS_PRECONDITION(aOutAncestor, "We need an ancestor to write to!");
19214: 
19214:   /* Set the ancestor to be the outer frame. */
19214:   *aOutAncestor = nsSVGUtils::GetOuterSVGFrame(this);
19214:   NS_ASSERTION(*aOutAncestor, "How did we end up without an outer frame?");
19214: 
88502:   if (GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD) {
88502:     return gfx3DMatrix::From2D(gfxMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
88502:   }
88502: 
19214:   /* Return the matrix back to the root, factoring in the x and y offsets. */
74283:   return gfx3DMatrix::From2D(GetCanvasTMForChildren());
19214: }
19214:  
18367: NS_IMETHODIMP_(nsIFrame*)
18367: nsSVGForeignObjectFrame::GetFrameForPoint(const nsPoint &aPoint)
    1: {
29327:   if (IsDisabled() || (GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD))
29327:     return nsnull;
 2748: 
77154:   nsIFrame* kid = GetFirstPrincipalChild();
29327:   if (!kid)
18367:     return nsnull;
29327: 
48242:   float x, y, width, height;
48242:   static_cast<nsSVGElement*>(mContent)->
48242:     GetAnimatedLengthValues(&x, &y, &width, &height, nsnull);
48242: 
48242:   gfxMatrix tm = GetCanvasTM().Invert();
29327:   if (tm.IsSingular())
18367:     return nsnull;
    1:   
29327:   // Convert aPoint from app units in canvas space to user space:
29327: 
29327:   gfxPoint pt = gfxPoint(aPoint.x, aPoint.y) / PresContext()->AppUnitsPerDevPixel();
29327:   pt = tm.Transform(pt);
29327: 
29327:   if (!gfxRect(0.0f, 0.0f, width, height).Contains(pt))
29327:     return nsnull;
29327: 
29327:   // Convert pt to app units in *local* space:
29327: 
29327:   pt = pt * nsPresContext::AppUnitsPerCSSPixel();
29327:   nsPoint point = nsPoint(NSToIntRound(pt.x), NSToIntRound(pt.y));
29327: 
47672:   nsIFrame *frame = nsLayoutUtils::GetFrameForPoint(kid, point);
47672:   if (frame && nsSVGUtils::HitTestClip(this, aPoint))
47672:     return frame;
47672: 
47672:   return nsnull;
    1: }
    1: 
    1: NS_IMETHODIMP_(nsRect)
    1: nsSVGForeignObjectFrame::GetCoveredRegion()
    1: {
    1:   return mRect;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::UpdateCoveredRegion()
    1: {
20807:   if (GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   float x, y, w, h;
 3233:   static_cast<nsSVGForeignObjectElement*>(mContent)->
 2671:     GetAnimatedLengthValues(&x, &y, &w, &h, nsnull);
    1: 
 2748:   // If mRect's width or height are negative, reflow blows up! We must clamp!
 2748:   if (w < 0.0f) w = 0.0f;
 2748:   if (h < 0.0f) h = 0.0f;
 2748: 
48242:   // GetCanvasTM includes the x,y translation
48242:   mRect = ToCanvasBounds(gfxRect(0.0, 0.0, w, h), GetCanvasTM(), PresContext());
14042:   
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::InitialUpdate()
    1: {
 7035:   NS_ASSERTION(GetStateBits() & NS_FRAME_FIRST_REFLOW,
 7035:                "Yikes! We've been called already! Hopefully we weren't called "
 7035:                "before our nsSVGOuterSVGFrame's initial Reflow()!!!");
 7035: 
    1:   UpdateCoveredRegion();
27993: 
27993:   // Make sure to not allow interrupts if we're not being reflown as a root
27993:   nsPresContext::InterruptPreventer noInterrupts(PresContext());
    1:   DoReflow();
    1: 
    1:   NS_ASSERTION(!(mState & NS_FRAME_IN_REFLOW),
    1:                "We don't actually participate in reflow");
    1:   
    1:   // Do unset the various reflow bits, though.
    1:   mState &= ~(NS_FRAME_FIRST_REFLOW | NS_FRAME_IS_DIRTY |
    1:               NS_FRAME_HAS_DIRTY_CHILDREN);
    1: 
    1:   return NS_OK;
    1: }
    1: 
10661: void
10661: nsSVGForeignObjectFrame::NotifySVGChanged(PRUint32 aFlags)
    1: {
79445:   bool reflow = false;
10661: 
10661:   if (aFlags & TRANSFORM_CHANGED) {
13316:     // In an ideal world we would reflow when our CTM changes. This is because
10661:     // glyph metrics do not necessarily scale uniformly with change in scale
10661:     // and, as a result, CTM changes may require text to break at different
13316:     // points. The problem would be how to keep performance acceptable when
13316:     // e.g. the transform of an ancestor is animated.
13316:     // We also seem to get some sort of infinite loop post bug 421584 if we
13316:     // reflow.
    1:     mCanvasTM = nsnull;
13986:     if (!(aFlags & SUPPRESS_INVALIDATION)) {
13986:       UpdateGraphic();
13986:     }
 8210: 
10661:   } else if (aFlags & COORD_CONTEXT_CHANGED) {
10661:     // Our coordinate context's width/height has changed. If we have a
10661:     // percentage width/height our dimensions will change so we must reflow.
10661:     nsSVGForeignObjectElement *fO =
10661:       static_cast<nsSVGForeignObjectElement*>(mContent);
10661:     if (fO->mLengthAttributes[nsSVGForeignObjectElement::WIDTH].IsPercentage() ||
10661:         fO->mLengthAttributes[nsSVGForeignObjectElement::HEIGHT].IsPercentage()) {
80486:       reflow = true;
10661:     }
10661:   }
 8210: 
10661:   if (reflow) {
 8210:     // If we're called while the PresShell is handling reflow events then we
 8210:     // must have been called as a result of the NotifyViewportChange() call in
 8210:     // our nsSVGOuterSVGFrame's Reflow() method. We must not call RequestReflow
10661:     // at this point (i.e. during reflow) because it could confuse the
10661:     // PresShell and prevent it from reflowing us properly in future. Besides
10661:     // that, nsSVGOuterSVGFrame::DidReflow will take care of reflowing us
 8210:     // synchronously, so there's no need.
40048:     if (!PresContext()->PresShell()->IsReflowLocked()) {
10661:       UpdateGraphic(); // update mRect before requesting reflow
10661:       RequestReflow(nsIPresShell::eResize);
 8210:     }
10661:   }
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::NotifyRedrawSuspended()
    1: {
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSVGForeignObjectFrame::NotifyRedrawUnsuspended()
    1: {
20807:   if (!(GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)) {
    1:     if (GetStateBits() & NS_STATE_SVG_DIRTY) {
29068:       UpdateGraphic(); // invalidate our entire area
    1:     } else {
55825:       FlushDirtyRegion(0); // only invalidate areas dirtied by our descendants
    1:     }
    1:   }
    1:   return NS_OK;
    1: }
    1: 
27899: gfxRect
79556: nsSVGForeignObjectFrame::GetBBoxContribution(const gfxMatrix &aToBBoxUserspace,
79556:                                              PRUint32 aFlags)
    1: {
48242:   nsSVGForeignObjectElement *content =
48242:     static_cast<nsSVGForeignObjectElement*>(mContent);
48242: 
    1:   float x, y, w, h;
48242:   content->GetAnimatedLengthValues(&x, &y, &w, &h, nsnull);
 2671: 
 2748:   if (w < 0.0f) w = 0.0f;
 2748:   if (h < 0.0f) h = 0.0f;
 2748: 
27899:   if (aToBBoxUserspace.IsSingular()) {
27899:     // XXX ReportToConsole
27899:     return gfxRect(0.0, 0.0, 0.0, 0.0);
27899:   }
29327:   return aToBBoxUserspace.TransformBounds(gfxRect(0.0, 0.0, w, h));
    1: }
    1: 
    1: //----------------------------------------------------------------------
    1: 
27899: gfxMatrix
    1: nsSVGForeignObjectFrame::GetCanvasTM()
    1: {
27899:   if (!mCanvasTM) {
27899:     NS_ASSERTION(mParent, "null parent");
27899: 
27899:     nsSVGContainerFrame *parent = static_cast<nsSVGContainerFrame*>(mParent);
27899:     nsSVGForeignObjectElement *content =
27899:       static_cast<nsSVGForeignObjectElement*>(mContent);
27899: 
27899:     gfxMatrix tm = content->PrependLocalTransformTo(parent->GetCanvasTM());
27899: 
78868:     mCanvasTM = new gfxMatrix(tm);
    1:   }
78868:   return *mCanvasTM;
    1: }
    1: 
    1: //----------------------------------------------------------------------
    1: // Implementation helpers
    1: 
29327: gfxMatrix
48242: nsSVGForeignObjectFrame::GetCanvasTMForChildren()
26657: {
29327:   float cssPxPerDevPx = PresContext()->
29327:     AppUnitsToFloatCSSPixels(PresContext()->AppUnitsPerDevPixel());
26657: 
48242:   return GetCanvasTM().Scale(cssPxPerDevPx, cssPxPerDevPx);
26657: }
26657: 
 1119: void nsSVGForeignObjectFrame::RequestReflow(nsIPresShell::IntrinsicDirty aType)
    1: {
 1119:   if (GetStateBits() & NS_FRAME_FIRST_REFLOW)
 1119:     // If we haven't had an InitialUpdate yet, nothing to do.
 1119:     return;
 1119: 
77154:   nsIFrame* kid = GetFirstPrincipalChild();
    1:   if (!kid)
    1:     return;
 1119: 
 1158:   PresContext()->PresShell()->FrameNeedsReflow(kid, aType, NS_FRAME_IS_DIRTY);
    1: }
    1: 
    1: void nsSVGForeignObjectFrame::UpdateGraphic()
    1: {
14042:   nsSVGUtils::UpdateGraphic(this);
    1: 
29068:   // We just invalidated our entire area, so clear the caches of areas dirtied
29068:   // by our descendants:
19380:   mSameDocDirtyRegion.SetEmpty();
29068:   mSubDocDirtyRegion.SetEmpty();
    1: }
    1: 
    1: void
 8210: nsSVGForeignObjectFrame::MaybeReflowFromOuterSVGFrame()
 8210: {
62805:   // If IsDisabled() is true, then we know that our DoReflow() call will return
62805:   // early, leaving us with a marked-dirty but not-reflowed kid. That'd be bad;
62805:   // it'd mean that all future calls to this method would be doomed to take the
62805:   // NS_FRAME_IS_DIRTY early-return below. To avoid that problem, we need to
62805:   // bail out *before* we mark our kid as dirty.
62805:   if (IsDisabled()) {
62805:     return;
62805:   }
62805: 
77154:   nsIFrame* kid = GetFirstPrincipalChild();
29327: 
29327:   // If we're already scheduled to reflow (if we or our kid is dirty) we don't
 8210:   // want to reflow now or else our presShell will do extra work trying to
 8210:   // reflow us a second time. (It will also complain if it finds that a reflow
 8210:   // root scheduled for reflow isn't dirty).
 8210: 
 8210:   if (kid->GetStateBits() & NS_FRAME_IS_DIRTY) {
 8210:     return;
 8210:   }
 8210:   kid->AddStateBits(NS_FRAME_IS_DIRTY); // we must be fully marked dirty
 8210:   if (kid->GetStateBits() & NS_FRAME_HAS_DIRTY_CHILDREN) {
 8210:     return;
 8210:   }
27993: 
27993:   // Make sure to not allow interrupts if we're not being reflown as a root
27993:   nsPresContext::InterruptPreventer noInterrupts(PresContext());
 8210:   DoReflow();
 8210: }
 8210: 
 8210: void
    1: nsSVGForeignObjectFrame::DoReflow()
    1: {
 7035:   NS_ASSERTION(!(nsSVGUtils::GetOuterSVGFrame(this)->
 7035:                              GetStateBits() & NS_FRAME_FIRST_REFLOW),
 7035:                "Calling InitialUpdate too early - must not call DoReflow!!!");
 7035: 
62804:   // Skip reflow if we're zero-sized, unless this is our first reflow.
62804:   if (IsDisabled() &&
62804:       !(GetStateBits() & NS_FRAME_FIRST_REFLOW))
 2748:     return;
 2748: 
20807:   if (GetStateBits() & NS_STATE_SVG_NONDISPLAY_CHILD)
    1:     return;
    1: 
  238:   nsPresContext *presContext = PresContext();
77154:   nsIFrame* kid = GetFirstPrincipalChild();
    1:   if (!kid)
    1:     return;
    1: 
    1:   // initiate a synchronous reflow here and now:  
    1:   nsSize availableSpace(NS_UNCONSTRAINEDSIZE, NS_UNCONSTRAINEDSIZE);
    1:   nsIPresShell* presShell = presContext->PresShell();
    1:   NS_ASSERTION(presShell, "null presShell");
68481:   nsRefPtr<nsRenderingContext> renderingContext =
51038:     presShell->GetReferenceRenderingContext();
    1:   if (!renderingContext)
    1:     return;
    1: 
 3233:   nsSVGForeignObjectElement *fO = static_cast<nsSVGForeignObjectElement*>
 3233:                                              (mContent);
    1: 
    1:   float width =
    1:     fO->mLengthAttributes[nsSVGForeignObjectElement::WIDTH].GetAnimValue(fO);
    1:   float height =
    1:     fO->mLengthAttributes[nsSVGForeignObjectElement::HEIGHT].GetAnimValue(fO);
    1: 
62804:   // Clamp height & width to be non-negative (to match UpdateCoveredRegion).
62804:   width = NS_MAX(width, 0.0f);
62804:   height = NS_MAX(height, 0.0f);
62804: 
    1:   nsSize size(nsPresContext::CSSPixelsToAppUnits(width),
    1:               nsPresContext::CSSPixelsToAppUnits(height));
    1: 
80486:   mInReflow = true;
    1: 
    1:   nsHTMLReflowState reflowState(presContext, kid,
    1:                                 renderingContext,
    1:                                 nsSize(size.width, NS_UNCONSTRAINEDSIZE));
    1:   nsHTMLReflowMetrics desiredSize;
    1:   nsReflowStatus status;
    1: 
    1:   // We don't use size.height above because that tells the child to do
    1:   // page/column breaking at that height.
    1:   NS_ASSERTION(reflowState.mComputedBorderPadding == nsMargin(0, 0, 0, 0) &&
    1:                reflowState.mComputedMargin == nsMargin(0, 0, 0, 0),
    1:                "style system should ensure that :-moz-svg-foreign content "
    1:                "does not get styled");
    1:   NS_ASSERTION(reflowState.ComputedWidth() == size.width,
    1:                "reflow state made child wrong size");
 4166:   reflowState.SetComputedHeight(size.height);
    1:   
    1:   ReflowChild(kid, presContext, desiredSize, reflowState, 0, 0,
    1:               NS_FRAME_NO_MOVE_FRAME, status);
    1:   NS_ASSERTION(size.width == desiredSize.width &&
    1:                size.height == desiredSize.height, "unexpected size");
    1:   FinishReflowChild(kid, presContext, &reflowState, desiredSize, 0, 0,
    1:                     NS_FRAME_NO_MOVE_FRAME);
    1:   
80486:   mInReflow = false;
55825:   FlushDirtyRegion(0);
    1: }
    1: 
    1: void
19380: nsSVGForeignObjectFrame::InvalidateDirtyRect(nsSVGOuterSVGFrame* aOuter,
19380:     const nsRect& aRect, PRUint32 aFlags)
19380: {
19380:   if (aRect.IsEmpty())
19380:     return;
19380: 
29327:   // The areas dirtied by children are in app units, relative to this frame.
29327:   // We need to convert the rect to userspace to use IntersectRect.
26657: 
29327:   gfxRect r(aRect.x, aRect.y, aRect.width, aRect.height);
29327:   r.Scale(1.0 / nsPresContext::AppUnitsPerCSSPixel());
26657: 
48242:   nsRect rect = ToCanvasBounds(r, GetCanvasTM(), PresContext());
19380: 
29327:   // Don't invalidate areas outside our bounds:
29068:   rect.IntersectRect(rect, mRect);
29068:   if (rect.IsEmpty())
29068:     return;
29068: 
19380:   rect = nsSVGUtils::FindFilterInvalidation(this, rect);
19380:   aOuter->InvalidateWithFlags(rect, aFlags);
19380: }
19380: 
19380: void
55825: nsSVGForeignObjectFrame::FlushDirtyRegion(PRUint32 aFlags)
 2671: {
29068:   if ((mSameDocDirtyRegion.IsEmpty() && mSubDocDirtyRegion.IsEmpty()) ||
19380:       mInReflow)
    1:     return;
    1: 
    1:   nsSVGOuterSVGFrame *outerSVGFrame = nsSVGUtils::GetOuterSVGFrame(this);
    1:   if (!outerSVGFrame) {
    1:     NS_ERROR("null outerSVGFrame");
    1:     return;
    1:   }
    1: 
  193:   if (outerSVGFrame->IsRedrawSuspended())
    1:     return;
    1: 
55825:   InvalidateDirtyRect(outerSVGFrame, mSameDocDirtyRegion.GetBounds(), aFlags);
55825:   InvalidateDirtyRect(outerSVGFrame, mSubDocDirtyRegion.GetBounds(),
55825:                       aFlags | INVALIDATE_CROSS_DOC);
13316: 
19380:   mSameDocDirtyRegion.SetEmpty();
29068:   mSubDocDirtyRegion.SetEmpty();
    1: }
