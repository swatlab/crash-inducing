    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Pierre Phaneuf <pp@ludusdesign.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /* class for maintaining a linked list of child frames */
    1: 
    1: #include "nsFrameList.h"
    1: #ifdef NS_DEBUG
    1: #include "nsIFrameDebug.h"
    1: #endif
    1: #include "nsLayoutUtils.h"
    1: 
    1: #ifdef IBMBIDI
    1: #include "nsCOMPtr.h"
    1: #include "nsGkAtoms.h"
    1: #include "nsILineIterator.h"
    1: #include "nsBidiPresUtils.h"
    1: #endif // IBMBIDI
    1: 
    1: void
 4006: nsFrameList::Destroy()
 4006: {
 4006:   DestroyFrames();
 4006:   delete this;
 4006: }
 4006: 
 4006: void
    1: nsFrameList::DestroyFrames()
    1: {
    1:   nsIFrame* next;
    1:   for (nsIFrame* frame = mFirstChild; frame; frame = next) {
    1:     next = frame->GetNextSibling();
    1:     frame->Destroy();
    1:     mFirstChild = next;
    1:   }
    1: }
    1: 
    1: void
    1: nsFrameList::AppendFrames(nsIFrame* aParent, nsIFrame* aFrameList)
    1: {
    1:   NS_PRECONDITION(nsnull != aFrameList, "null ptr");
    1:   if (nsnull != aFrameList) {
    1:     nsIFrame* lastChild = LastChild();
    1:     if (nsnull == lastChild) {
    1:       mFirstChild = aFrameList;
    1:     }
    1:     else {
    1:       lastChild->SetNextSibling(aFrameList);
    1:     }
    1:     if (aParent) {
    1:       for (nsIFrame* frame = aFrameList; frame;
    1:            frame = frame->GetNextSibling()) {
    1:         frame->SetParent(aParent);
    1:       }
    1:     }
    1:   }
    1: #ifdef DEBUG
    1:   CheckForLoops();
    1: #endif
    1: }
    1: 
    1: void
    1: nsFrameList::AppendFrame(nsIFrame* aParent, nsIFrame* aFrame)
    1: {
    1:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
    1:   if (nsnull != aFrame) {
    1:     NS_PRECONDITION(!aFrame->GetNextSibling(), "Can only append one frame here");
    1:     nsIFrame* lastChild = LastChild();
    1:     if (nsnull == lastChild) {
    1:       mFirstChild = aFrame;
    1:     }
    1:     else {
    1:       lastChild->SetNextSibling(aFrame);
    1:     }
    1:     if (nsnull != aParent) {
    1:       aFrame->SetParent(aParent);
    1:     }
    1:   }
    1: #ifdef DEBUG
    1:   CheckForLoops();
    1: #endif
    1: }
    1: 
    1: PRBool
    1: nsFrameList::RemoveFrame(nsIFrame* aFrame, nsIFrame* aPrevSiblingHint)
    1: {
    1:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
    1:   if (aFrame) {
    1:     nsIFrame* nextFrame = aFrame->GetNextSibling();
    1:     if (aFrame == mFirstChild) {
    1:       mFirstChild = nextFrame;
    1:       aFrame->SetNextSibling(nsnull);
    1:       return PR_TRUE;
    1:     }
    1:     else {
    1:       nsIFrame* prevSibling = aPrevSiblingHint;
    1:       if (!prevSibling || prevSibling->GetNextSibling() != aFrame) {
    1:         prevSibling = GetPrevSiblingFor(aFrame);
    1:       }
    1:       if (prevSibling) {
    1:         prevSibling->SetNextSibling(nextFrame);
    1:         aFrame->SetNextSibling(nsnull);
    1:         return PR_TRUE;
    1:       }
    1:     }
    1:   }
    1:   // aFrame was not in the list. 
    1:   return PR_FALSE;
    1: }
    1: 
    1: PRBool
    1: nsFrameList::RemoveFirstChild()
    1: {
    1:   if (mFirstChild) {
    1:     nsIFrame* nextFrame = mFirstChild->GetNextSibling();
    1:     mFirstChild->SetNextSibling(nsnull);
    1:     mFirstChild = nextFrame;
    1:     return PR_TRUE;
    1:   }
    1:   return PR_FALSE;
    1: }
    1: 
    1: PRBool
    1: nsFrameList::DestroyFrame(nsIFrame* aFrame)
    1: {
    1:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
    1:   if (RemoveFrame(aFrame)) {
    1:     aFrame->Destroy();
    1:     return PR_TRUE;
    1:   }
    1:   return PR_FALSE;
    1: }
    1: 
    1: void
    1: nsFrameList::InsertFrame(nsIFrame* aParent,
    1:                          nsIFrame* aPrevSibling,
    1:                          nsIFrame* aNewFrame)
    1: {
    1:   NS_PRECONDITION(nsnull != aNewFrame, "null ptr");
    1:   if (nsnull != aNewFrame) {
19815:     NS_ASSERTION(!aNewFrame->GetNextSibling(), 
19815:       "the pointer to this sibling will be overwritten");
    1:     if (aParent) {
    1:       aNewFrame->SetParent(aParent);
    1:     }
    1:     if (nsnull == aPrevSibling) {
    1:       aNewFrame->SetNextSibling(mFirstChild);
    1:       mFirstChild = aNewFrame;
    1:     }
    1:     else {
    1:       NS_ASSERTION(aNewFrame->GetParent() == aPrevSibling->GetParent(),
    1:                    "prev sibling has different parent");
    1:       nsIFrame* nextFrame = aPrevSibling->GetNextSibling();
    1:       NS_ASSERTION(!nextFrame ||
    1:                    aNewFrame->GetParent() == nextFrame->GetParent(),
    1:                    "next sibling has different parent");
    1:       aPrevSibling->SetNextSibling(aNewFrame);
    1:       aNewFrame->SetNextSibling(nextFrame);
    1:     }
    1:   }
    1: #ifdef DEBUG
    1:   CheckForLoops();
    1: #endif
    1: }
    1: 
    1: void
    1: nsFrameList::InsertFrames(nsIFrame* aParent,
    1:                           nsIFrame* aPrevSibling,
    1:                           nsIFrame* aFrameList)
    1: {
    1:   NS_PRECONDITION(nsnull != aFrameList, "null ptr");
    1:   if (nsnull != aFrameList) {
    1:     nsIFrame* lastNewFrame = nsnull;
    1:     if (aParent) {
    1:       for (nsIFrame* frame = aFrameList; frame;
    1:            frame = frame->GetNextSibling()) {
    1:         frame->SetParent(aParent);
    1:         lastNewFrame = frame;
    1:       }
    1:     }
    1: 
    1:     // Get the last new frame if necessary
    1:     if (!lastNewFrame) {
    1:       nsFrameList tmp(aFrameList);
    1:       lastNewFrame = tmp.LastChild();
    1:     }
    1: 
    1:     // Link the new frames into the child list
    1:     if (nsnull == aPrevSibling) {
    1:       lastNewFrame->SetNextSibling(mFirstChild);
    1:       mFirstChild = aFrameList;
    1:     }
    1:     else {
    1:       NS_ASSERTION(aFrameList->GetParent() == aPrevSibling->GetParent(),
    1:                    "prev sibling has different parent");
    1:       nsIFrame* nextFrame = aPrevSibling->GetNextSibling();
    1:       NS_ASSERTION(!nextFrame ||
    1:                    aFrameList->GetParent() == nextFrame->GetParent(),
    1:                    "next sibling has different parent");
    1:       aPrevSibling->SetNextSibling(aFrameList);
    1:       lastNewFrame->SetNextSibling(nextFrame);
    1:     }
    1:   }
    1: #ifdef DEBUG
    1:   CheckForLoops();
    1: #endif
    1: }
    1: 
    1: PRBool
    1: nsFrameList::Split(nsIFrame* aAfterFrame, nsIFrame** aNextFrameResult)
    1: {
    1:   NS_PRECONDITION(nsnull != aAfterFrame, "null ptr");
    1:   NS_PRECONDITION(nsnull != aNextFrameResult, "null ptr");
    1:   NS_ASSERTION(ContainsFrame(aAfterFrame), "split after unknown frame");
    1: 
    1:   if (aNextFrameResult && aAfterFrame) {
    1:     nsIFrame* nextFrame = aAfterFrame->GetNextSibling();
    1:     aAfterFrame->SetNextSibling(nsnull);
    1:     *aNextFrameResult = nextFrame;
    1:     return PR_TRUE;
    1:   }
    1:   return PR_FALSE;
    1: }
    1: 
    1: nsIFrame*
    1: nsFrameList::LastChild() const
    1: {
    1:   nsIFrame* frame = mFirstChild;
    1:   if (!frame) {
    1:     return nsnull;
    1:   }
    1: 
    1:   nsIFrame* next = frame->GetNextSibling();
    1:   while (next) {
    1:     frame = next;
    1:     next = frame->GetNextSibling();
    1:   }
    1:   return frame;
    1: }
    1: 
    1: nsIFrame*
    1: nsFrameList::FrameAt(PRInt32 aIndex) const
    1: {
    1:   NS_PRECONDITION(aIndex >= 0, "invalid arg");
    1:   if (aIndex < 0) return nsnull;
    1:   nsIFrame* frame = mFirstChild;
    1:   while ((aIndex-- > 0) && frame) {
    1:     frame = frame->GetNextSibling();
    1:   }
    1:   return frame;
    1: }
    1: 
27841: PRInt32
27841: nsFrameList::IndexOf(nsIFrame* aFrame) const
27841: {
27841:   PRInt32 count = 0;
27841:   for (nsIFrame* f = mFirstChild; f; f = f->GetNextSibling()) {
27841:     if (f == aFrame)
27841:       return count;
27841:     ++count;
27841:   }
27841:   return -1;
27841: }
27841: 
    1: PRBool
    1: nsFrameList::ContainsFrame(const nsIFrame* aFrame) const
    1: {
    1:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
    1:   nsIFrame* frame = mFirstChild;
    1:   while (frame) {
    1:     if (frame == aFrame) {
    1:       return PR_TRUE;
    1:     }
    1:     frame = frame->GetNextSibling();
    1:   }
    1:   return PR_FALSE;
    1: }
    1: 
10962: PRBool
10962: nsFrameList::ContainsFrameBefore(const nsIFrame* aFrame, const nsIFrame* aEnd) const
10962: {
10962:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
10962:   nsIFrame* frame = mFirstChild;
10962:   while (frame) {
10962:     if (frame == aEnd) {
10962:       return PR_FALSE;
10962:     }
10962:     if (frame == aFrame) {
10962:       return PR_TRUE;
10962:     }
10962:     frame = frame->GetNextSibling();
10962:   }
10962:   return PR_FALSE;
10962: }
10962: 
    1: PRInt32
    1: nsFrameList::GetLength() const
    1: {
    1:   PRInt32 count = 0;
    1:   nsIFrame* frame = mFirstChild;
    1:   while (frame) {
    1:     count++;
    1:     frame = frame->GetNextSibling();
    1:   }
    1:   return count;
    1: }
    1: 
24551: static int CompareByContentOrder(const nsIFrame* aF1, const nsIFrame* aF2)
    1: {
24551:   if (aF1->GetContent() != aF2->GetContent()) {
24551:     return nsLayoutUtils::CompareTreePosition(aF1->GetContent(), aF2->GetContent());
    1:   }
    1: 
24551:   if (aF1 == aF2) {
    1:     return 0;
    1:   }
    1: 
    1:   const nsIFrame* f;
24551:   for (f = aF2; f; f = f->GetPrevInFlow()) {
24551:     if (f == aF1) {
    1:       // f1 comes before f2 in the flow
    1:       return -1;
    1:     }
    1:   }
24551:   for (f = aF1; f; f = f->GetPrevInFlow()) {
24551:     if (f == aF2) {
    1:       // f1 comes after f2 in the flow
    1:       return 1;
    1:     }
    1:   }
    1: 
    1:   NS_ASSERTION(PR_FALSE, "Frames for same content but not in relative flow order");
    1:   return 0;
    1: }
    1: 
24551: class CompareByContentOrderComparator
24551: {
24551:   public:
24551:   PRBool Equals(const nsIFrame* aA, const nsIFrame* aB) const {
24551:     return aA == aB;
24551:   }
24551:   PRBool LessThan(const nsIFrame* aA, const nsIFrame* aB) const {
24551:     return CompareByContentOrder(aA, aB) < 0;
24551:   }
24551: };
24551: 
    1: void
    1: nsFrameList::SortByContentOrder()
    1: {
    1:   if (!mFirstChild)
    1:     return;
    1: 
24551:   nsAutoTArray<nsIFrame*, 8> array;
    1:   nsIFrame* f;
    1:   for (f = mFirstChild; f; f = f->GetNextSibling()) {
    1:     array.AppendElement(f);
    1:   }
24551:   array.Sort(CompareByContentOrderComparator());
24551:   f = mFirstChild = array.ElementAt(0);
24551:   for (PRUint32 i = 1; i < array.Length(); ++i) {
24551:     nsIFrame* ff = array.ElementAt(i);
    1:     f->SetNextSibling(ff);
    1:     f = ff;
    1:   }
    1:   f->SetNextSibling(nsnull);
    1: }
    1: 
    1: nsIFrame*
    1: nsFrameList::GetPrevSiblingFor(nsIFrame* aFrame) const
    1: {
    1:   NS_PRECONDITION(nsnull != aFrame, "null ptr");
    1:   if (aFrame == mFirstChild) {
    1:     return nsnull;
    1:   }
    1:   nsIFrame* frame = mFirstChild;
    1:   while (frame) {
    1:     nsIFrame* next = frame->GetNextSibling();
    1:     if (next == aFrame) {
    1:       break;
    1:     }
    1:     frame = next;
    1:   }
    1:   return frame;
    1: }
    1: 
    1: void
    1: nsFrameList::VerifyParent(nsIFrame* aParent) const
    1: {
    1: #ifdef NS_DEBUG
    1:   for (nsIFrame* frame = mFirstChild; frame;
    1:        frame = frame->GetNextSibling()) {
    1:     NS_ASSERTION(frame->GetParent() == aParent, "bad parent");
    1:   }
    1: #endif
    1: }
    1: 
    1: #ifdef NS_DEBUG
    1: void
    1: nsFrameList::List(FILE* out) const
    1: {
    1:   fputs("<\n", out);
    1:   for (nsIFrame* frame = mFirstChild; frame;
    1:        frame = frame->GetNextSibling()) {
23554:     nsIFrameDebug *frameDebug = do_QueryFrame(frame);
23554:     if (frameDebug) {
    1:       frameDebug->List(out, 1);
    1:     }
    1:   }
    1:   fputs(">\n", out);
    1: }
    1: #endif
    1: 
    1: #ifdef IBMBIDI
    1: nsIFrame*
    1: nsFrameList::GetPrevVisualFor(nsIFrame* aFrame) const
    1: {
    1:   if (!mFirstChild)
    1:     return nsnull;
    1:   
    1:   nsIFrame* parent = mFirstChild->GetParent();
    1:   if (!parent)
    1:     return aFrame ? GetPrevSiblingFor(aFrame) : LastChild();
    1: 
    1:   nsBidiLevel baseLevel = nsBidiPresUtils::GetFrameBaseLevel(mFirstChild);  
  238:   nsBidiPresUtils* bidiUtils = mFirstChild->PresContext()->GetBidiUtils();
    1: 
21112:   nsAutoLineIterator iter = parent->GetLineIterator();
21112:   if (!iter) { 
    1:     // Parent is not a block Frame
    1:     if (parent->GetType() == nsGkAtoms::lineFrame) {
    1:       // Line frames are not bidi-splittable, so need to consider bidi reordering
    1:       if (baseLevel == NSBIDI_LTR) {
    1:         return bidiUtils->GetFrameToLeftOf(aFrame, mFirstChild, -1);
    1:       } else { // RTL
    1:         return bidiUtils->GetFrameToRightOf(aFrame, mFirstChild, -1);
    1:       }
    1:     } else {
    1:       // Just get the next or prev sibling, depending on block and frame direction.
    1:       nsBidiLevel frameEmbeddingLevel = nsBidiPresUtils::GetFrameEmbeddingLevel(mFirstChild);
    1:       if ((frameEmbeddingLevel & 1) == (baseLevel & 1)) {
    1:         return aFrame ? GetPrevSiblingFor(aFrame) : LastChild();
    1:       } else {
    1:         return aFrame ? aFrame->GetNextSibling() : mFirstChild;
    1:       }    
    1:     }
    1:   }
    1: 
    1:   // Parent is a block frame, so use the LineIterator to find the previous visual 
    1:   // sibling on this line, or the last one on the previous line.
    1: 
    1:   PRInt32 thisLine;
    1:   if (aFrame) {
21112:     thisLine = iter->FindLineContaining(aFrame);
21112:     if (thisLine < 0)
    1:       return nsnull;
    1:   } else {
21112:     thisLine = iter->GetNumLines();
    1:   }
    1: 
    1:   nsIFrame* frame = nsnull;
    1:   nsIFrame* firstFrameOnLine;
    1:   PRInt32 numFramesOnLine;
    1:   nsRect lineBounds;
    1:   PRUint32 lineFlags;
    1: 
    1:   if (aFrame) {
    1:     iter->GetLine(thisLine, &firstFrameOnLine, &numFramesOnLine, lineBounds, &lineFlags);
    1: 
    1:     if (baseLevel == NSBIDI_LTR) {
    1:       frame = bidiUtils->GetFrameToLeftOf(aFrame, firstFrameOnLine, numFramesOnLine);
    1:     } else { // RTL
    1:       frame = bidiUtils->GetFrameToRightOf(aFrame, firstFrameOnLine, numFramesOnLine);
    1:     }
    1:   }
    1: 
    1:   if (!frame && thisLine > 0) {
    1:     // Get the last frame of the previous line
    1:     iter->GetLine(thisLine - 1, &firstFrameOnLine, &numFramesOnLine, lineBounds, &lineFlags);
    1: 
    1:     if (baseLevel == NSBIDI_LTR) {
    1:       frame = bidiUtils->GetFrameToLeftOf(nsnull, firstFrameOnLine, numFramesOnLine);
    1:     } else { // RTL
    1:       frame = bidiUtils->GetFrameToRightOf(nsnull, firstFrameOnLine, numFramesOnLine);
    1:     }
    1:   }
    1:   return frame;
    1: }
    1: 
    1: nsIFrame*
    1: nsFrameList::GetNextVisualFor(nsIFrame* aFrame) const
    1: {
    1:   if (!mFirstChild)
    1:     return nsnull;
    1:   
    1:   nsIFrame* parent = mFirstChild->GetParent();
    1:   if (!parent)
    1:     return aFrame ? GetPrevSiblingFor(aFrame) : mFirstChild;
    1: 
    1:   nsBidiLevel baseLevel = nsBidiPresUtils::GetFrameBaseLevel(mFirstChild);
  238:   nsBidiPresUtils* bidiUtils = mFirstChild->PresContext()->GetBidiUtils();
    1:   
21112:   nsAutoLineIterator iter = parent->GetLineIterator();
21112:   if (!iter) { 
    1:     // Parent is not a block Frame
    1:     if (parent->GetType() == nsGkAtoms::lineFrame) {
    1:       // Line frames are not bidi-splittable, so need to consider bidi reordering
    1:       if (baseLevel == NSBIDI_LTR) {
    1:         return bidiUtils->GetFrameToRightOf(aFrame, mFirstChild, -1);
    1:       } else { // RTL
    1:         return bidiUtils->GetFrameToLeftOf(aFrame, mFirstChild, -1);
    1:       }
    1:     } else {
    1:       // Just get the next or prev sibling, depending on block and frame direction.
    1:       nsBidiLevel frameEmbeddingLevel = nsBidiPresUtils::GetFrameEmbeddingLevel(mFirstChild);
    1:       if ((frameEmbeddingLevel & 1) == (baseLevel & 1)) {
    1:         return aFrame ? aFrame->GetNextSibling() : mFirstChild;
    1:       } else {
    1:         return aFrame ? GetPrevSiblingFor(aFrame) : LastChild();
    1:       }
    1:     }
    1:   }
    1: 
    1:   // Parent is a block frame, so use the LineIterator to find the next visual 
    1:   // sibling on this line, or the first one on the next line.
    1:   
    1:   PRInt32 thisLine;
    1:   if (aFrame) {
21112:     thisLine = iter->FindLineContaining(aFrame);
21112:     if (thisLine < 0)
    1:       return nsnull;
    1:   } else {
    1:     thisLine = -1;
    1:   }
    1: 
    1:   nsIFrame* frame = nsnull;
    1:   nsIFrame* firstFrameOnLine;
    1:   PRInt32 numFramesOnLine;
    1:   nsRect lineBounds;
    1:   PRUint32 lineFlags;
    1: 
    1:   if (aFrame) {
    1:     iter->GetLine(thisLine, &firstFrameOnLine, &numFramesOnLine, lineBounds, &lineFlags);
    1:     
    1:     if (baseLevel == NSBIDI_LTR) {
    1:       frame = bidiUtils->GetFrameToRightOf(aFrame, firstFrameOnLine, numFramesOnLine);
    1:     } else { // RTL
    1:       frame = bidiUtils->GetFrameToLeftOf(aFrame, firstFrameOnLine, numFramesOnLine);
    1:     }
    1:   }
    1:   
21112:   PRInt32 numLines = iter->GetNumLines();
    1:   if (!frame && thisLine < numLines - 1) {
    1:     // Get the first frame of the next line
    1:     iter->GetLine(thisLine + 1, &firstFrameOnLine, &numFramesOnLine, lineBounds, &lineFlags);
    1:     
    1:     if (baseLevel == NSBIDI_LTR) {
    1:       frame = bidiUtils->GetFrameToRightOf(nsnull, firstFrameOnLine, numFramesOnLine);
    1:     } else { // RTL
    1:       frame = bidiUtils->GetFrameToLeftOf(nsnull, firstFrameOnLine, numFramesOnLine);
    1:     }
    1:   }
    1:   return frame;
    1: }
    1: #endif
    1: 
    1: #ifdef DEBUG
    1: void
    1: nsFrameList::CheckForLoops()
    1: {
    1:   if (!mFirstChild) {
    1:     return;
    1:   }
    1:   
    1:   // Simple algorithm to find a loop in a linked list -- advance pointers
    1:   // through it at speeds of 1 and 2, and if they ever get to be equal bail
    1:   nsIFrame *first = mFirstChild, *second = mFirstChild;
    1:   do {
    1:     first = first->GetNextSibling();
    1:     second = second->GetNextSibling();
    1:     if (!second) {
    1:       break;
    1:     }
    1:     second = second->GetNextSibling();
    1:     if (first == second) {
    1:       // Loop detected!  Since second advances faster, they can't both be null;
    1:       // we would have broken out of the loop long ago.
    1:       NS_ERROR("loop in frame list.  This will probably hang soon.");
    1:       break;
    1:     }                           
    1:   } while (first && second);
    1: }
    1: #endif
