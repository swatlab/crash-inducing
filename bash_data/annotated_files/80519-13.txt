    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla browser.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications, Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Radha Kulkarni <radha@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsSHistory_h
    1: #define nsSHistory_h
    1: 
    1: // Helper Classes
    1: #include "nsCOMPtr.h"
    1: 
    1: //Interfaces Needed
    1: #include "nsISHistory.h"
    1: #include "nsISHistoryInternal.h"
    1: #include "nsISHTransaction.h"
    1: #include "nsIWebNavigation.h"
    1: #include "nsIWeakReference.h"
    1: #include "nsISimpleEnumerator.h"
    1: #include "nsISHistoryListener.h"
    1: #include "nsIHistoryEntry.h"
    1: #include "nsIObserver.h"
    1: 
    1: // Needed to maintain global list of all SHistory objects
    1: #include "prclist.h"
    1: 
    1: class nsIDocShell;
    1: class nsSHEnumerator;
    1: class nsSHistoryObserver;
    1: class nsSHistory: public PRCList,
71957:                   public nsISHistory,
    1:                   public nsISHistoryInternal,
    1:                   public nsIWebNavigation
    1: {
    1: public:
    1:   nsSHistory();
    1: 
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSISHISTORY
    1:   NS_DECL_NSISHISTORYINTERNAL
    1:   NS_DECL_NSIWEBNAVIGATION
    1: 
    1:   // One time initialization method called upon docshell module construction
    1:   static nsresult Startup();
72449:   static void Shutdown();
72449:   static void UpdatePrefs();
    1: 
    1:   // Max number of total cached content viewers.  If the pref
    1:   // browser.sessionhistory.max_total_viewers is negative, then
    1:   // this value is calculated based on the total amount of memory.
    1:   // Otherwise, it comes straight from the pref.
    1:   static PRUint32 GetMaxTotalViewers() { return sHistoryMaxTotalViewers; }
    1: 
    1: protected:
    1:   virtual ~nsSHistory();
    1:   friend class nsSHEnumerator;
    1:   friend class nsSHistoryObserver;
    1: 
    1:    // Could become part of nsIWebNavigation
79445:    NS_IMETHOD GetEntryAtIndex(PRInt32 aIndex, bool aModifyIndex, nsISHEntry** aResult);
    1:    NS_IMETHOD GetTransactionAtIndex(PRInt32 aIndex, nsISHTransaction ** aResult);
79445:    nsresult CompareFrames(nsISHEntry * prevEntry, nsISHEntry * nextEntry, nsIDocShell * rootDocShell, long aLoadType, bool * aIsFrameFound);
    1:    nsresult InitiateLoad(nsISHEntry * aFrameEntry, nsIDocShell * aFrameDS, long aLoadType);
    1: 
    1:    NS_IMETHOD LoadEntry(PRInt32 aIndex, long aLoadType, PRUint32 histCmd);
    1: 
    1: #ifdef DEBUG
    1:    nsresult PrintHistory();
    1: #endif
    1: 
80519:   // Evict content viewers in this window which don't lie in the "safe" range
80519:   // around aIndex.
80519:   void EvictOutOfRangeWindowContentViewers(PRInt32 aIndex);
80519:   static void GloballyEvictContentViewers();
80519:   static void GloballyEvictAllContentViewers();
    1: 
    1:   // Calculates a max number of total
    1:   // content viewers to cache, based on amount of total memory
    1:   static PRUint32 CalcMaxTotalViewers();
    1: 
50721:   void RemoveDynEntries(PRInt32 aOldIndex, PRInt32 aNewIndex);
50721: 
50721:   nsresult LoadNextPossibleEntry(PRInt32 aNewIndex, long aLoadType, PRUint32 aHistCmd);
    1: protected:
57503:   // aIndex is the index of the transaction which may be removed.
80486:   // If aKeepNext is true, aIndex is compared to aIndex + 1,
57503:   // otherwise comparison is done to aIndex - 1.
79445:   bool RemoveDuplicate(PRInt32 aIndex, bool aKeepNext);
52044: 
    1:   nsCOMPtr<nsISHTransaction> mListRoot;
    1:   PRInt32 mIndex;
    1:   PRInt32 mLength;
    1:   PRInt32 mRequestedIndex;
    1:   // Session History listener
    1:   nsWeakPtr mListener;
    1:   // Weak reference. Do not refcount this.
    1:   nsIDocShell *  mRootDocShell;
    1: 
    1:   // Max viewers allowed total, across all SHistory objects
    1:   static PRInt32  sHistoryMaxTotalViewers;
    1: };
    1: //*****************************************************************************
    1: //***    nsSHEnumerator: Object Management
    1: //*****************************************************************************
    1: class nsSHEnumerator : public nsISimpleEnumerator
    1: {
    1: public:
    1: 
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSISIMPLEENUMERATOR
    1: 
    1:   nsSHEnumerator(nsSHistory *  aHistory);
    1:   
    1: protected:
    1:   friend class nsSHistory;
    1:   virtual ~nsSHEnumerator();
    1: private:
    1:   PRInt32     mIndex;
    1:   nsSHistory *  mSHistory;  
    1: };
    1: 
    1: #endif   /* nsSHistory */
