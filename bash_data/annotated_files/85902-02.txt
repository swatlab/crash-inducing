50525: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
50525:  *
50525:  * ***** BEGIN LICENSE BLOCK *****
50525:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
50525:  *
50525:  * The contents of this file are subject to the Mozilla Public License Version
50525:  * 1.1 (the "License"); you may not use this file except in compliance with
50525:  * the License. You may obtain a copy of the License at
50525:  * http://www.mozilla.org/MPL/
50525:  *
50525:  * Software distributed under the License is distributed on an "AS IS" basis,
50525:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
50525:  * for the specific language governing rights and limitations under the
50525:  * License.
50525:  *
50525:  * The Original Code is Mozilla Communicator.
50525:  *
50525:  * The Initial Developer of the Original Code is
50525:  * Netscape Communications Corp.
50525:  * Portions created by the Initial Developer are Copyright (C) 2000
50525:  * the Initial Developer. All Rights Reserved.
50525:  *
50525:  * Contributor(s):
50525:  *
50525:  * Alternatively, the contents of this file may be used under the terms of
50525:  * either of the GNU General Public License Version 2 or later (the "GPL"),
50525:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
50525:  * in which case the provisions of the GPL or the LGPL are applicable instead
50525:  * of those above. If you wish to allow use of your version of this file only
50525:  * under the terms of either the GPL or the LGPL, and not to allow others to
50525:  * use your version of this file under the terms of the MPL, indicate your
50525:  * decision by deleting the provisions above and replace them with the notice
50525:  * and other provisions required by the GPL or the LGPL. If you do not delete
50525:  * the provisions above, a recipient may use your version of this file under
50525:  * the terms of any one of the MPL, the GPL or the LGPL.
50525:  *
50525:  * ***** END LICENSE BLOCK ***** */
50525: 
50525: #include "nsISupports.idl"
50525: 
50655: /* NOTE: this interface is completely undesigned, not stable and likely to change */
50655: 
69664: [scriptable, uuid(a67c77af-2952-4028-93ab-e7bc3b43cf81)]
50525: interface nsIGfxInfo : nsISupports
50525: {
54887:   /*
54887:    * These are win32-specific
54887:    */
50525:   readonly attribute boolean D2DEnabled;
50655:   readonly attribute boolean DWriteEnabled;
72430:   readonly attribute boolean AzureEnabled;
60493:   readonly attribute DOMString DWriteVersion;
69664:   readonly attribute DOMString cleartypeParameters;
51578: 
76321:   // XXX: Switch to a list of devices, rather than explicitly numbering them. 
76321: 
51578:   /**
51578:    * The name of the display adapter.
51578:    */
51578:   readonly attribute DOMString adapterDescription;
76321:   readonly attribute DOMString adapterDescription2;
51578: 
51578:   readonly attribute DOMString adapterDriver;
76321:   readonly attribute DOMString adapterDriver2;
51578:   
51578:   /* These types are inspired by DXGI_ADAPTER_DESC */
85902:   readonly attribute unsigned long adapterVendorID;
85902:   readonly attribute unsigned long adapterVendorID2;
51578:   
85902:   readonly attribute unsigned long adapterDeviceID;
85902:   readonly attribute unsigned long adapterDeviceID2;
51578: 
51578:   /**
51578:    * The amount of RAM in MB in the display adapter.
51578:    */
51578:   readonly attribute DOMString adapterRAM;
76321:   readonly attribute DOMString adapterRAM2;
51578:   
51578:   readonly attribute DOMString adapterDriverVersion;
76321:   readonly attribute DOMString adapterDriverVersion2;
51578:   
51578:   readonly attribute DOMString adapterDriverDate;
76321:   readonly attribute DOMString adapterDriverDate2;
76321: 
76321:   readonly attribute boolean isGPU2Active;
51736: 
62106:   void getFailures(
62106:                [optional] out unsigned long failureCount,
62106:                [retval, array, size_is(failureCount)] out string failures);
62106: 
62106:   [noscript, notxpcom] void logFailure(in ACString failure);
51736:   /*
51736:    * A set of constants for features that we can ask this GfxInfo object
51736:    * about via GetFeatureStatus
51736:    */
51736:   /* Don't assign 0 or -1 */
51736:   /* Whether Direct2D is supported for content rendering. */
51736:   const long FEATURE_DIRECT2D = 1;
51736:   /* Whether Direct3D 9 is supported for layers. */
51736:   const long FEATURE_DIRECT3D_9_LAYERS = 2;
51736:   /* Whether Direct3D 10.0 is supported for layers. */
51736:   const long FEATURE_DIRECT3D_10_LAYERS = 3;
51736:   /* Whether Direct3D 10.1 is supported for layers. */
51736:   const long FEATURE_DIRECT3D_10_1_LAYERS = 4;
51736:   /* Whether OpenGL is supported for layers */
51736:   const long FEATURE_OPENGL_LAYERS = 5;
51736:   /* Whether WebGL is supported via OpenGL. */
51736:   const long FEATURE_WEBGL_OPENGL = 6;
51736:   /* Whether WebGL is supported via ANGLE (D3D9 -- does not check for the presence of ANGLE libs). */
51736:   const long FEATURE_WEBGL_ANGLE = 7;
81329:   /* Whether WebGL antialiasing is supported. */
81329:   const long FEATURE_WEBGL_MSAA = 8;
51736: 
51736:   /*
51736:    * A set of return values from GetFeatureStatus
51736:    */
84603: 
55059:   /* We don't explicitly block or discourage the feature. Which means we'll try getting it from the
55059:    * hardware, and see what happens. */
55059:   const long FEATURE_NO_INFO = 1;
84603:   /* We don't know the status of the feature yet. The analysis probably hasn't finished yet. */
84603:   const long FEATURE_STATUS_UNKNOWN = 2;
55059:   /* This feature is blocked on this driver version. Updating driver will typically unblock it. */
84603:   const long FEATURE_BLOCKED_DRIVER_VERSION = 3;
55059:   /* This feature is blocked on this device, regardless of driver version.
55059:    * Typically means we hit too many driver crashes without a good reason to hope for them to
55059:    * get fixed soon. */
84603:   const long FEATURE_BLOCKED_DEVICE = 4;
51736:   /* This feature is available and can be used, but is not suggested (e.g. shouldn't be used by default */
84603:   const long FEATURE_DISCOURAGED = 5;
55386:   /* This feature is blocked on this OS version. */
84603:   const long FEATURE_BLOCKED_OS_VERSION = 6;
51736: 
51736:   /**
51736:    * Ask about a feature, and return the status of that feature
51736:    */
51736:   long getFeatureStatus(in long aFeature);
55059: 
55059:   /*
55059:    * Ask about a feature, return the minimum driver version required for it if its status is
55059:    * FEATURE_BLOCKED_DRIVER_VERSION, otherwise return an empty string. 
55059:    */
55059:   DOMString getFeatureSuggestedDriverVersion(in long aFeature);
59414: 
59414:   /**
59414:    * WebGL info; valid params are "full-renderer", "vendor", "renderer", "version",
59414:    * "shading_language_version", "extensions".  These return info from
59414:    * underlying GL impl that's used to implement WebGL.
59414:    */
59414:   DOMString getWebGLParameter(in DOMString aParam);
78440: 
78440:   // only useful on X11
78440:   [noscript, notxpcom] void GetData();
82320: 
82320:   [implicit_jscontext]
82320:   jsval getInfo();
50525: };
50525: 
