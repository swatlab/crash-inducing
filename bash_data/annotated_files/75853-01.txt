52558: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52558:  * vim: set ts=4 sw=4 et tw=99:
52558:  *
52558:  * ***** BEGIN LICENSE BLOCK *****
52558:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52558:  *
52558:  * The contents of this file are subject to the Mozilla Public License Version
52558:  * 1.1 (the "License"); you may not use this file except in compliance with
52558:  * the License. You may obtain a copy of the License at
52558:  * http://www.mozilla.org/MPL/
52558:  *
52558:  * Software distributed under the License is distributed on an "AS IS" basis,
52558:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52558:  * for the specific language governing rights and limitations under the
52558:  * License.
52558:  *
52558:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52558:  * May 28, 2008.
52558:  *
52558:  * The Initial Developer of the Original Code is
52558:  *   Brendan Eich <brendan@mozilla.org>
52558:  *
52558:  * Contributor(s):
52558:  *   David Anderson <danderson@mozilla.com>
52558:  *   David Mandelin <dmandelin@mozilla.com>
57718:  *   Jan de Mooij <jandemooij@gmail.com>
52558:  *
52558:  * Alternatively, the contents of this file may be used under the terms of
52558:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52558:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52558:  * in which case the provisions of the GPL or the LGPL are applicable instead
52558:  * of those above. If you wish to allow use of your version of this file only
52558:  * under the terms of either the GPL or the LGPL, and not to allow others to
52558:  * use your version of this file under the terms of the MPL, indicate your
52558:  * decision by deleting the provisions above and replace them with the notice
52558:  * and other provisions required by the GPL or the LGPL. If you do not delete
52558:  * the provisions above, a recipient may use your version of this file under
52558:  * the terms of any one of the MPL, the GPL or the LGPL.
52558:  *
52558:  * ***** END LICENSE BLOCK ***** */
53270: 
52558: #include "MethodJIT.h"
52651: #include "jsnum.h"
52686: #include "jsbool.h"
59882: #include "jsemit.h"
52737: #include "jsiter.h"
52558: #include "Compiler.h"
52611: #include "StubCalls.h"
52826: #include "MonoIC.h"
53270: #include "PolyIC.h"
60597: #include "ICChecker.h"
53168: #include "Retcon.h"
52611: #include "assembler/jit/ExecutableAllocator.h"
52826: #include "assembler/assembler/LinkBuffer.h"
52618: #include "FrameState-inl.h"
55746: #include "jsobjinlines.h"
52668: #include "jsscriptinlines.h"
53590: #include "InlineFrameAssembler.h"
54707: #include "jscompartment.h"
54840: #include "jsobjinlines.h"
54855: #include "jsopcodeinlines.h"
60534: #include "jshotloop.h"
52560: 
52560: #include "jsautooplen.h"
52558: 
52558: using namespace js;
52558: using namespace js::mjit;
56462: #if defined(JS_POLYIC) || defined(JS_MONOIC)
53270: using namespace js::mjit::ic;
53270: #endif
52558: 
56037: #define RETURN_IF_OOM(retval)                                   \
56037:     JS_BEGIN_MACRO                                              \
61233:         if (oomInVector || masm.oom() || stubcc.masm.oom())     \
56037:             return retval;                                      \
56037:     JS_END_MACRO
53168: 
52558: #if defined(JS_METHODJIT_SPEW)
52558: static const char *OpcodeNames[] = {
52558: # define OPDEF(op,val,name,token,length,nuses,ndefs,prec,format) #name,
52558: # include "jsopcode.tbl"
52558: # undef OPDEF
52558: };
52558: #endif
52558: 
75828: mjit::Compiler::Compiler(JSContext *cx, JSStackFrame *fp, const Vector<PatchableFrame> *frames)
55463:   : BaseCompiler(cx),
55503:     fp(fp),
75828:     frames(frames),
55503:     script(fp->script()),
55503:     scopeChain(&fp->scopeChain()),
55463:     globalObj(scopeChain->getGlobal()),
55503:     fun(fp->isFunctionFrame() && !fp->isEvalFrame()
55503:         ? fp->fun()
55503:         : NULL),
55503:     isConstructing(fp->isConstructing()),
57766:     analysis(NULL), jumpMap(NULL), savedTraps(NULL),
75649:     frame(cx, script, fun, *this, masm, stubcc, liveness),
57679:     branchPatches(CompilerAllocPolicy(cx, *thisFromCtor())),
53119: #if defined JS_MONOIC
62386:     getGlobalNames(CompilerAllocPolicy(cx, *thisFromCtor())),
62386:     setGlobalNames(CompilerAllocPolicy(cx, *thisFromCtor())),
57679:     callICs(CompilerAllocPolicy(cx, *thisFromCtor())),
57679:     equalityICs(CompilerAllocPolicy(cx, *thisFromCtor())),
57679:     traceICs(CompilerAllocPolicy(cx, *thisFromCtor())),
53119: #endif
53119: #if defined JS_POLYIC
57679:     pics(CompilerAllocPolicy(cx, *thisFromCtor())), 
57679:     getElemICs(CompilerAllocPolicy(cx, *thisFromCtor())),
57679:     setElemICs(CompilerAllocPolicy(cx, *thisFromCtor())),
53119: #endif
57679:     callPatches(CompilerAllocPolicy(cx, *thisFromCtor())),
57679:     callSites(CompilerAllocPolicy(cx, *thisFromCtor())), 
57679:     doubleList(CompilerAllocPolicy(cx, *thisFromCtor())),
59979:     jumpTables(CompilerAllocPolicy(cx, *thisFromCtor())),
59979:     jumpTableOffsets(CompilerAllocPolicy(cx, *thisFromCtor())),
75763:     loopEntries(CompilerAllocPolicy(cx, *thisFromCtor())),
56774:     stubcc(cx, *thisFromCtor(), frame, script),
57766:     debugMode_(cx->compartment->debugMode),
53136: #if defined JS_TRACER
57718:     addTraceHints(cx->traceJitEnabled),
75649: #else
75649:     addTraceHints(false),
53136: #endif
75636:     recompiling(false),
75631:     hasThisType(false),
75631:     thisType(JSVAL_TYPE_UNKNOWN),
75631:     argumentTypes(ContextAllocPolicy(cx)),
75631:     localTypes(ContextAllocPolicy(cx)),
57718:     oomInVector(false),
57718:     applyTricks(NoApplyTricks)
52558: {
75724:     /* :FIXME: bug 637856 disabling traceJit if inference is enabled */
75724:     if (cx->typeInferenceEnabled())
75724:         addTraceHints = false;
52558: }
52558: 
55503: CompileStatus
75828: mjit::Compiler::compile()
55503: {
55503:     JS_ASSERT_IF(isConstructing, !script->jitCtor);
55503:     JS_ASSERT_IF(!isConstructing, !script->jitNormal);
55503: 
55503:     JITScript **jit = isConstructing ? &script->jitCtor : &script->jitNormal;
55503:     void **checkAddr = isConstructing
55503:                        ? &script->jitArityCheckCtor
55503:                        : &script->jitArityCheckNormal;
55503: 
75828:     CompileStatus status = performCompilation(jit);
55503:     if (status == Compile_Okay) {
55503:         // Global scripts don't have an arity check entry. That's okay, we
55503:         // just need a pointer so the VM can quickly decide whether this
55503:         // method can be JIT'd or not. Global scripts cannot be IC'd, since
55503:         // they have no functions, so there is no danger.
55503:         *checkAddr = (*jit)->arityCheckEntry
55503:                      ? (*jit)->arityCheckEntry
55503:                      : (*jit)->invokeEntry;
55503:     } else {
55503:         *checkAddr = JS_UNJITTABLE_SCRIPT;
55503:     }
55503: 
55503:     return status;
55503: }
55503: 
52558: #define CHECK_STATUS(expr)                                           \
52558:     JS_BEGIN_MACRO                                                   \
52558:         CompileStatus status_ = (expr);                              \
61233:         if (status_ != Compile_Okay) {                               \
61233:             if (oomInVector || masm.oom() || stubcc.masm.oom())      \
61233:                 js_ReportOutOfMemory(cx);                            \
75720:             if (!cx->compartment->types.checkPendingRecompiles(cx))  \
75720:                 return Compile_Error;                                \
52558:             return status_;                                          \
61233:         }                                                            \
52558:     JS_END_MACRO
52558: 
52558: CompileStatus
75828: mjit::Compiler::performCompilation(JITScript **jitp)
52558: {
52558:     JaegerSpew(JSpew_Scripts, "compiling script (file \"%s\") (line \"%d\") (length \"%d\")\n",
52558:                script->filename, script->lineno, script->length);
52558: 
75615:     analyze::Script analysis_;
75708:     analysis_.analyze(cx, script);
75615: 
75615:     this->analysis = &analysis_;
75623: 
75615:     if (analysis->OOM())
57671:         return Compile_Error;
75615:     if (analysis->failed()) {
59895:         JaegerSpew(JSpew_Abort, "couldn't analyze bytecode; probably switchX or OOM\n");
59895:         return Compile_Abort;
59895:     }
75649:     frame.setAnalysis(analysis);
75649: 
75649:     if (!liveness.analyze(cx, analysis, script, fun)) {
61233:         js_ReportOutOfMemory(cx);
52558:         return Compile_Error;
61233:     }
75649: 
75720: #ifdef JS_METHODJIT_SPEW
75720:     if (IsJaegerSpewChannelActive(JSpew_Regalloc)) {
75720:         for (unsigned i = 0; i < script->nfixed; i++) {
75720:             if (!analysis->localEscapes(i)) {
75720:                 JaegerSpew(JSpew_Regalloc, "Local %u:", i);
75720:                 liveness.dumpLocal(i);
75720:             }
75720:         }
75720:         for (unsigned i = 0; fun && i < fun->nargs; i++) {
75720:             if (!analysis->argEscapes(i)) {
75720:                 JaegerSpew(JSpew_Regalloc, "Argument %u:", i);
75720:                 liveness.dumpArg(i);
75720:             }
75720:         }
75720:     }
75720: #endif
56602: 
61233:     if (!frame.init()) {
61233:         js_ReportOutOfMemory(cx);
61233:         return Compile_Error;
61233:     }
52560: 
52558:     jumpMap = (Label *)cx->malloc(sizeof(Label) * script->length);
61233:     if (!jumpMap) {
61233:         js_ReportOutOfMemory(cx);
52558:         return Compile_Error;
61233:     }
52558: #ifdef DEBUG
52558:     for (uint32 i = 0; i < script->length; i++)
52558:         jumpMap[i] = Label();
52558: #endif
52558: 
52654: #ifdef JS_METHODJIT_SPEW
52558:     Profiler prof;
52558:     prof.start();
52654: #endif
52558: 
53590:     /* Initialize PC early so stub calls in the prologue can be fallible. */
53590:     PC = script->code;
53590: 
53590: #ifdef JS_METHODJIT
57766:     script->debugMode = debugMode();
53590: #endif
53590: 
75720:     types::AutoEnterTypeInference enter(cx, true);
75720: 
75720:     if (cx->typeInferenceEnabled()) {
75828:         CompileStatus status = prepareInferenceTypes();
75720:         if (status != Compile_Okay) {
75720:             if (!cx->compartment->types.checkPendingRecompiles(cx))
75720:                 return Compile_Error;
75720:             return status;
75720:         }
75720:     }
75720: 
52558:     CHECK_STATUS(generatePrologue());
52558:     CHECK_STATUS(generateMethod());
52558:     CHECK_STATUS(generateEpilogue());
55503:     CHECK_STATUS(finishThisUp(jitp));
52558: 
52558: #ifdef JS_METHODJIT_SPEW
52558:     prof.stop();
52558:     JaegerSpew(JSpew_Prof, "compilation took %d us\n", prof.time_us());
52558: #endif
52558: 
52558:     JaegerSpew(JSpew_Scripts, "successfully compiled (code \"%p\") (size \"%ld\")\n",
55503:                (*jitp)->code.m_code.executableAddress(), (*jitp)->code.m_size);
52558: 
75720:     if (!cx->compartment->types.checkPendingRecompiles(cx))
75720:         return Compile_Error;
75720: 
75720:     if (!*jitp)
75720:         return Compile_Abort;
75720: 
52560:     return Compile_Okay;
52558: }
52558: 
52558: #undef CHECK_STATUS
52558: 
52558: mjit::Compiler::~Compiler()
52558: {
52558:     cx->free(jumpMap);
57766:     cx->free(savedTraps);
52558: }
52558: 
75720: CompileStatus
75828: mjit::Compiler::prepareInferenceTypes()
75720: {
75720:     /* Analyze the script if we have not already done so. */
75720:     if (!script->types) {
75720:         /* Uncached eval scripts are not analyzed or compiled. */
75720:         if (script->isUncachedEval)
75720:             return Compile_Abort;
75720:         types::AnalyzeScriptTypes(cx, script);
75720:         if (!script->types)
75720:             return Compile_Error;
75720:     }
75718: 
75828:     /* Get the known types of arguments and locals. */
75708: 
75708:     uint32 nargs = fun ? fun->nargs : 0;
75708:     if (!argumentTypes.reserve(nargs))
75708:         return Compile_Error;
75708:     for (unsigned i = 0; i < nargs; i++) {
75708:         JSValueType type = JSVAL_TYPE_UNKNOWN;
75708:         if (!analysis->argEscapes(i))
75718:             type = script->argTypes(i)->getKnownTypeTag(cx, script);
75708:         argumentTypes.append(type);
75708:     }
75708: 
75708:     if (!localTypes.reserve(script->nfixed))
75708:         return Compile_Error;
75708:     for (unsigned i = 0; i < script->nfixed; i++) {
75708:         JSValueType type = JSVAL_TYPE_UNKNOWN;
75708:         if (!analysis->localHasUseBeforeDef(i))
75718:             type = script->localTypes(i)->getKnownTypeTag(cx, script);
75708:         localTypes.append(type);
75708:     }
62574: 
62574:     return Compile_Okay;
62574: }
62574: 
54626: CompileStatus JS_NEVER_INLINE
55503: mjit::TryCompile(JSContext *cx, JSStackFrame *fp)
52611: {
55503:     JS_ASSERT(cx->fp() == fp);
55503: 
57705: #if JS_HAS_SHARP_VARS
57705:     if (fp->script()->hasSharps)
57705:         return Compile_Abort;
57705: #endif
57705: 
56201:     // Ensure that constructors have at least one slot.
56201:     if (fp->isConstructing() && !fp->script()->nslots)
56201:         fp->script()->nslots++;
56201: 
75668:     // If there are static overflows in the function, try recompiling it a few
75668:     // times, using a limit to handle scripts with many static overflows.
75668:     CompileStatus status = Compile_Overflow;
75668:     for (unsigned i = 0; status == Compile_Overflow && i < 5; i++) {
75828:         Compiler cc(cx, fp, NULL);
75828:         status = cc.compile();
75668:     }
75668: 
75668:     return status;
53471: }
53471: 
57766: bool
57766: mjit::Compiler::loadOldTraps(const Vector<CallSite> &sites)
57766: {
75636:     recompiling = true;
75636: 
57766:     savedTraps = (bool *)cx->calloc(sizeof(bool) * script->length);
57766:     if (!savedTraps)
57766:         return false;
57766:     
57766:     for (size_t i = 0; i < sites.length(); i++) {
57766:         const CallSite &site = sites[i];
57766:         if (site.isTrap())
57766:             savedTraps[site.pcOffset] = true;
57766:     }
57766: 
57766:     return true;
57766: }
57766: 
52611: CompileStatus
52558: mjit::Compiler::generatePrologue()
52558: {
52873:     invokeLabel = masm.label();
53471: 
52873:     /*
52873:      * If there is no function, then this can only be called via JaegerShot(),
52873:      * which expects an existing frame to be initialized like the interpreter.
52873:      */
52872:     if (fun) {
52873:         Jump j = masm.jump();
53590: 
53590:         /*
53590:          * Entry point #2: The caller has partially constructed a frame, and
53590:          * either argc >= nargs or the arity check has corrected the frame.
53590:          */
52873:         invokeLabel = masm.label();
53590: 
53590:         Label fastPath = masm.label();
53590: 
54832:         /* Store this early on so slow paths can access it. */
53840:         masm.storePtr(ImmPtr(fun), Address(JSFrameReg, JSStackFrame::offsetOfExec()));
53590: 
53590:         {
53590:             /*
53590:              * Entry point #3: The caller has partially constructed a frame,
53590:              * but argc might be != nargs, so an arity check might be called.
53590:              *
53590:              * This loops back to entry point #2.
53590:              */
53590:             arityLabel = stubcc.masm.label();
75776: 
53840:             Jump argMatch = stubcc.masm.branch32(Assembler::Equal, JSParamReg_Argc,
53590:                                                  Imm32(fun->nargs));
53590: 
53840:             if (JSParamReg_Argc != Registers::ArgReg1)
53840:                 stubcc.masm.move(JSParamReg_Argc, Registers::ArgReg1);
53840: 
53590:             /* Slow path - call the arity check function. Returns new fp. */
53840:             stubcc.masm.storePtr(ImmPtr(fun), Address(JSFrameReg, JSStackFrame::offsetOfExec()));
53590:             stubcc.masm.storePtr(JSFrameReg, FrameAddress(offsetof(VMFrame, regs.fp)));
57766:             OOL_STUBCALL(stubs::FixupArity);
53590:             stubcc.masm.move(Registers::ReturnReg, JSFrameReg);
75776:             argMatch.linkTo(stubcc.masm.label(), &stubcc.masm);
75776: 
75791:             /* Type check the arguments as well. */
75776:             if (cx->typeInferenceEnabled()) {
75791: #ifdef JS_MONOIC
75791:                 this->argsCheckJump = stubcc.masm.jump();
75791:                 this->argsCheckStub = stubcc.masm.label();
75791:                 this->argsCheckJump.linkTo(this->argsCheckStub, &stubcc.masm);
75791: #endif
75776:                 stubcc.masm.storePtr(ImmPtr(fun), Address(JSFrameReg, JSStackFrame::offsetOfExec()));
75791:                 OOL_STUBCALL(stubs::CheckArgumentTypes);
75791: #ifdef JS_MONOIC
75791:                 this->argsCheckFallthrough = stubcc.masm.label();
75791: #endif
75776:             }
75776: 
53590:             stubcc.crossJump(stubcc.masm.jump(), fastPath);
53590:         }
53590: 
53590:         /*
53590:          * Guard that there is enough stack space. Note we include the size of
53590:          * a second frame, to ensure we can create a frame from call sites.
53590:          */
53590:         masm.addPtr(Imm32((script->nslots + VALUES_PER_STACK_FRAME * 2) * sizeof(Value)),
53590:                     JSFrameReg,
53590:                     Registers::ReturnReg);
53590:         Jump stackCheck = masm.branchPtr(Assembler::AboveOrEqual, Registers::ReturnReg,
53590:                                          FrameAddress(offsetof(VMFrame, stackLimit)));
53590: 
53590:         /* If the stack check fails... */
53590:         {
53590:             stubcc.linkExitDirect(stackCheck, stubcc.masm.label());
57766:             OOL_STUBCALL(stubs::HitStackQuota);
53590:             stubcc.crossJump(stubcc.masm.jump(), masm.label());
53590:         }
53590: 
56602:         /*
56602:          * Set locals to undefined, as in initCallFrameLatePrologue.
56602:          * Skip locals which aren't closed and are known to be defined before used,
56602:          * :FIXME: bug 604541: write undefined if we might be using the tracer, so it works.
56602:          */
53488:         for (uint32 i = 0; i < script->nfixed; i++) {
56602:             if (analysis->localHasUseBeforeDef(i) || addTraceHints) {
52873:                 Address local(JSFrameReg, sizeof(JSStackFrame) + i * sizeof(Value));
53081:                 masm.storeValue(UndefinedValue(), local);
52872:             }
56602:         }
52872: 
52873:         /* Create the call object. */
52873:         if (fun->isHeavyweight()) {
53087:             prepareStubCall(Uses(0));
57766:             INLINE_STUBCALL(stubs::GetCallObject);
52873:         }
52873: 
52873:         j.linkTo(masm.label(), &masm);
55483: 
56602:         if (analysis->usesScopeChain() && !fun->isHeavyweight()) {
55483:             /*
55483:              * Load the scope chain into the frame if necessary.  The scope chain
55483:              * is always set for global and eval frames, and will have been set by
55483:              * GetCallObject for heavyweight function frames.
55483:              */
55483:             RegisterID t0 = Registers::ReturnReg;
55483:             Jump hasScope = masm.branchTest32(Assembler::NonZero,
55483:                                               FrameFlagsAddress(), Imm32(JSFRAME_HAS_SCOPECHAIN));
55483:             masm.loadPayload(Address(JSFrameReg, JSStackFrame::offsetOfCallee(fun)), t0);
55483:             masm.loadPtr(Address(t0, offsetof(JSObject, parent)), t0);
55483:             masm.storePtr(t0, Address(JSFrameReg, JSStackFrame::offsetOfScopeChain()));
55483:             hasScope.linkTo(masm.label(), &masm);
55483:         }
54427:     }
54427: 
56201:     if (isConstructing)
56201:         constructThis();
56201: 
57766:     if (debugMode() || Probes::callTrackingActive(cx))
57766:         INLINE_STUBCALL(stubs::EnterScript);
52872: 
75622:     /*
75622:      * Set initial types of locals with known type.  These will stay synced
75622:      * through the rest of the script.
75622:      */
75622:     for (uint32 i = 0; i < script->nfixed; i++) {
75622:         JSValueType type = knownLocalType(i);
75622:         if (type != JSVAL_TYPE_UNKNOWN) {
75622:             JS_ASSERT(!analysis->localHasUseBeforeDef(i));
75649:             /* Doubles will be written entirely when syncing. */
75630:             if (type != JSVAL_TYPE_DOUBLE) {
75622:                 Address local(JSFrameReg, sizeof(JSStackFrame) + i * sizeof(Value));
75622:                 masm.storeTypeTag(ImmType(type), local);
75630:             }
75622:             frame.learnType(frame.getLocal(i), type, false);
75622:         }
75622:     }
75622: 
75631:     /*
75631:      * Learn types of arguments with known type, and make sure double arguments
75631:      * are actually doubles and not ints.
75631:      */
75631:     for (uint32 i = 0; fun && i < fun->nargs; i++) {
75631:         JSValueType type = knownArgumentType(i);
75631:         if (type != JSVAL_TYPE_UNKNOWN) {
75722:             if (type == JSVAL_TYPE_DOUBLE) {
75722:                 if (!analysis->argEscapes(i))
75631:                     frame.ensureDouble(frame.getArg(i));
75722:             } else {
75631:                 frame.learnType(frame.getArg(i), type, false);
75631:             }
75631:         }
75722:     }
75631: 
52558:     return Compile_Okay;
52558: }
52558: 
52611: CompileStatus
52611: mjit::Compiler::generateEpilogue()
52611: {
52611:     return Compile_Okay;
52611: }
52611: 
52611: CompileStatus
55503: mjit::Compiler::finishThisUp(JITScript **jitp)
52611: {
56037:     RETURN_IF_OOM(Compile_Error);
56037: 
52611:     for (size_t i = 0; i < branchPatches.length(); i++) {
52611:         Label label = labelOf(branchPatches[i].pc);
52611:         branchPatches[i].jump.linkTo(label, &masm);
52611:     }
52611: 
53147: #ifdef JS_CPU_ARM
53147:     masm.forceFlushConstantPool();
53147:     stubcc.masm.forceFlushConstantPool();
53147: #endif
53147:     JaegerSpew(JSpew_Insns, "## Fast code (masm) size = %u, Slow code (stubcc) size = %u.\n", masm.size(), stubcc.size());
53147: 
53183:     size_t totalSize = masm.size() +
53183:                        stubcc.size() +
75649:                        (masm.numDoubles() * sizeof(double)) +
75716:                        (stubcc.masm.numDoubles() * sizeof(double)) +
59979:                        jumpTableOffsets.length() * sizeof(void *);
53183: 
64243:     JSC::ExecutablePool *execPool;
64243:     uint8 *result =
64243:         (uint8 *)script->compartment->jaegerCompartment->execAlloc()->alloc(totalSize, &execPool);
64243:     if (!result) {
61233:         js_ReportOutOfMemory(cx);
61233:         return Compile_Error;
61233:     }
64243:     JS_ASSERT(execPool);
53183:     JSC::ExecutableAllocator::makeWritable(result, totalSize);
53147:     masm.executableCopy(result);
53147:     stubcc.masm.executableCopy(result + masm.size());
52611:     
53498:     JSC::LinkBuffer fullCode(result, totalSize);
53498:     JSC::LinkBuffer stubCode(result + masm.size(), stubcc.size());
53498: 
75763:     size_t nNmapLive = loopEntries.length();
58993:     for (size_t i = 0; i < script->length; i++) {
58993:         analyze::Bytecode *opinfo = analysis->maybeCode(i);
75763:         if (opinfo && opinfo->safePoint && !liveness.getCode(i).loopBackedge)
58993:             nNmapLive++;
58993:     }
58993: 
60207:     /* Please keep in sync with JITScript::scriptDataSize! */
53498:     size_t totalBytes = sizeof(JITScript) +
58993:                         sizeof(NativeMapEntry) * nNmapLive +
53498: #if defined JS_MONOIC
62386:                         sizeof(ic::GetGlobalNameIC) * getGlobalNames.length() +
62386:                         sizeof(ic::SetGlobalNameIC) * setGlobalNames.length() +
53590:                         sizeof(ic::CallICInfo) * callICs.length() +
56192:                         sizeof(ic::EqualityICInfo) * equalityICs.length() +
56217:                         sizeof(ic::TraceICInfo) * traceICs.length() +
53498: #endif
53498: #if defined JS_POLYIC
53498:                         sizeof(ic::PICInfo) * pics.length() +
56738:                         sizeof(ic::GetElementIC) * getElemICs.length() +
57671:                         sizeof(ic::SetElementIC) * setElemICs.length() +
53498: #endif
53498:                         sizeof(CallSite) * callSites.length();
53498: 
53498:     uint8 *cursor = (uint8 *)cx->calloc(totalBytes);
53498:     if (!cursor) {
52661:         execPool->release();
61233:         js_ReportOutOfMemory(cx);
52661:         return Compile_Error;
52661:     }
52661: 
57758:     JITScript *jit = new(cursor) JITScript;
53498:     cursor += sizeof(JITScript);
53498: 
55503:     jit->code = JSC::MacroAssemblerCodeRef(result, execPool, masm.size() + stubcc.size());
55503:     jit->invokeEntry = result;
59882:     jit->singleStepMode = script->singleStepMode;
62075:     if (fun) {
62075:         jit->arityCheckEntry = stubCode.locationOf(arityLabel).executableAddress();
62075:         jit->fastEntry = fullCode.locationOf(invokeLabel).executableAddress();
62075:     }
62075: 
62075:     /* 
62075:      * WARNING: mics(), callICs() et al depend on the ordering of these
62075:      * variable-length sections.  See JITScript's declaration for details.
62075:      */
53520: 
53498:     /* Build the pc -> ncode mapping. */
62075:     NativeMapEntry *jitNmap = (NativeMapEntry *)cursor;
62075:     jit->nNmapPairs = nNmapLive;
62075:     cursor += sizeof(NativeMapEntry) * jit->nNmapPairs;
58993:     size_t ix = 0;
62075:     if (jit->nNmapPairs > 0) {
52661:         for (size_t i = 0; i < script->length; i++) {
56602:             analyze::Bytecode *opinfo = analysis->maybeCode(i);
56602:             if (opinfo && opinfo->safePoint) {
58993:                 Label L = jumpMap[i];
52661:                 JS_ASSERT(L.isValid());
62075:                 jitNmap[ix].bcOff = i;
62075:                 jitNmap[ix].ncode = (uint8 *)(result + masm.distanceOf(L));
58993:                 ix++;
58993:             }
58993:         }
75763:         for (size_t i = 0; i < loopEntries.length(); i++) {
75763:             /* Insert the entry at the right position. */
75763:             const LoopEntry &entry = loopEntries[i];
75763:             size_t j;
75763:             for (j = 0; j < ix; j++) {
75763:                 if (jitNmap[j].bcOff > entry.pcOffset) {
75763:                     memmove(jitNmap + j + 1, jitNmap + j, (ix - j) * sizeof(NativeMapEntry));
75763:                     break;
75763:                 }
75763:             }
75763:             jitNmap[j].bcOff = entry.pcOffset;
75763:             jitNmap[j].ncode = (uint8 *) stubCode.locationOf(entry.label).executableAddress();
75763:             ix++;
75763:         }
58993:     }
62075:     JS_ASSERT(ix == jit->nNmapPairs);
53590: 
53119: #if defined JS_MONOIC
75636:     JS_INIT_CLIST(&jit->callers);
75636: 
75791:     if (fun && cx->typeInferenceEnabled()) {
75791:         jit->argsCheckStub = stubCode.locationOf(argsCheckStub);
75791:         jit->argsCheckFallthrough = stubCode.locationOf(argsCheckFallthrough);
75791:         jit->argsCheckJump = stubCode.locationOf(argsCheckJump);
75791:         jit->argsCheckPool = NULL;
75791:     }
75791: 
62386:     ic::GetGlobalNameIC *getGlobalNames_ = (ic::GetGlobalNameIC *)cursor;
62386:     jit->nGetGlobalNames = getGlobalNames.length();
62386:     cursor += sizeof(ic::GetGlobalNameIC) * jit->nGetGlobalNames;
62386:     for (size_t i = 0; i < jit->nGetGlobalNames; i++) {
62386:         ic::GetGlobalNameIC &to = getGlobalNames_[i];
62386:         GetGlobalNameICInfo &from = getGlobalNames[i];
62386:         from.copyTo(to, fullCode, stubCode);
62386: 
62386:         int offset = fullCode.locationOf(from.load) - to.fastPathStart;
62386:         to.loadStoreOffset = offset;
62386:         JS_ASSERT(to.loadStoreOffset == offset);
62386: 
62386:         stubCode.patch(from.addrLabel, &to);
62386:     }
62386: 
62386:     ic::SetGlobalNameIC *setGlobalNames_ = (ic::SetGlobalNameIC *)cursor;
62386:     jit->nSetGlobalNames = setGlobalNames.length();
62386:     cursor += sizeof(ic::SetGlobalNameIC) * jit->nSetGlobalNames;
62386:     for (size_t i = 0; i < jit->nSetGlobalNames; i++) {
62386:         ic::SetGlobalNameIC &to = setGlobalNames_[i];
62386:         SetGlobalNameICInfo &from = setGlobalNames[i];
62386:         from.copyTo(to, fullCode, stubCode);
62386:         to.slowPathStart = stubCode.locationOf(from.slowPathStart);
62386: 
62386:         int offset = fullCode.locationOf(from.store).labelAtOffset(0) -
62386:                      to.fastPathStart;
62386:         to.loadStoreOffset = offset;
62386:         JS_ASSERT(to.loadStoreOffset == offset);
62386: 
62409:         to.hasExtraStub = 0;
62386:         to.objConst = from.objConst;
62386:         to.shapeReg = from.shapeReg;
62386:         to.objReg = from.objReg;
62386:         to.vr = from.vr;
62386: 
62386:         offset = fullCode.locationOf(from.shapeGuardJump) -
62386:                  to.fastPathStart;
62386:         to.inlineShapeJump = offset;
62386:         JS_ASSERT(to.inlineShapeJump == offset);
62386: 
62386:         offset = fullCode.locationOf(from.fastPathRejoin) -
62386:                  to.fastPathStart;
62386:         to.fastRejoinOffset = offset;
62386:         JS_ASSERT(to.fastRejoinOffset == offset);
62386: 
62386:         stubCode.patch(from.addrLabel, &to);
62075:     }
62075: 
62075:     ic::CallICInfo *jitCallICs = (ic::CallICInfo *)cursor;
55503:     jit->nCallICs = callICs.length();
62075:     cursor += sizeof(ic::CallICInfo) * jit->nCallICs;
62075:     for (size_t i = 0; i < jit->nCallICs; i++) {
62075:         jitCallICs[i].reset();
62075:         jitCallICs[i].funGuard = fullCode.locationOf(callICs[i].funGuard);
62075:         jitCallICs[i].funJump = fullCode.locationOf(callICs[i].funJump);
62075:         jitCallICs[i].slowPathStart = stubCode.locationOf(callICs[i].slowPathStart);
75776:         jitCallICs[i].typeMonitored = callICs[i].typeMonitored;
75776:         jitCallICs[i].argTypes = callICs[i].argTypes;
53590: 
53590:         /* Compute the hot call offset. */
54832:         uint32 offset = fullCode.locationOf(callICs[i].hotJump) -
53590:                         fullCode.locationOf(callICs[i].funGuard);
62075:         jitCallICs[i].hotJumpOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].hotJumpOffset == offset);
53590: 
53590:         /* Compute the join point offset. */
53590:         offset = fullCode.locationOf(callICs[i].joinPoint) -
53590:                  fullCode.locationOf(callICs[i].funGuard);
62075:         jitCallICs[i].joinPointOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].joinPointOffset == offset);
53590:                                         
53590:         /* Compute the OOL call offset. */
53590:         offset = stubCode.locationOf(callICs[i].oolCall) -
53590:                  stubCode.locationOf(callICs[i].slowPathStart);
62075:         jitCallICs[i].oolCallOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].oolCallOffset == offset);
53590: 
53590:         /* Compute the OOL jump offset. */
53590:         offset = stubCode.locationOf(callICs[i].oolJump) -
53590:                  stubCode.locationOf(callICs[i].slowPathStart);
62075:         jitCallICs[i].oolJumpOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].oolJumpOffset == offset);
53590: 
59895:         /* Compute the start of the OOL IC call. */
59895:         offset = stubCode.locationOf(callICs[i].icCall) -
59895:                  stubCode.locationOf(callICs[i].slowPathStart);
62075:         jitCallICs[i].icCallOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].icCallOffset == offset);
59895: 
53590:         /* Compute the slow join point offset. */
53590:         offset = stubCode.locationOf(callICs[i].slowJoinPoint) -
53590:                  stubCode.locationOf(callICs[i].slowPathStart);
62075:         jitCallICs[i].slowJoinOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].slowJoinOffset == offset);
53590: 
53590:         /* Compute the join point offset for continuing on the hot path. */
53590:         offset = stubCode.locationOf(callICs[i].hotPathLabel) -
53590:                  stubCode.locationOf(callICs[i].funGuard);
62075:         jitCallICs[i].hotPathOffset = offset;
62075:         JS_ASSERT(jitCallICs[i].hotPathOffset == offset);
62075: 
62075:         jitCallICs[i].pc = callICs[i].pc;
62075:         jitCallICs[i].frameSize = callICs[i].frameSize;
62075:         jitCallICs[i].funObjReg = callICs[i].funObjReg;
62075:         jitCallICs[i].funPtrReg = callICs[i].funPtrReg;
62075:         stubCode.patch(callICs[i].addrLabel1, &jitCallICs[i]);
62075:         stubCode.patch(callICs[i].addrLabel2, &jitCallICs[i]);
62075:     }
62075: 
62075:     ic::EqualityICInfo *jitEqualityICs = (ic::EqualityICInfo *)cursor;
56192:     jit->nEqualityICs = equalityICs.length();
62075:     cursor += sizeof(ic::EqualityICInfo) * jit->nEqualityICs;
62075:     for (size_t i = 0; i < jit->nEqualityICs; i++) {
75721:         if (equalityICs[i].trampoline) {
75721:             jitEqualityICs[i].target = stubCode.locationOf(equalityICs[i].trampolineStart);
75721:         } else {
56192:             uint32 offs = uint32(equalityICs[i].jumpTarget - script->code);
56192:             JS_ASSERT(jumpMap[offs].isValid());
62075:             jitEqualityICs[i].target = fullCode.locationOf(jumpMap[offs]);
75721:         }
62075:         jitEqualityICs[i].stubEntry = stubCode.locationOf(equalityICs[i].stubEntry);
62075:         jitEqualityICs[i].stubCall = stubCode.locationOf(equalityICs[i].stubCall);
62075:         jitEqualityICs[i].stub = equalityICs[i].stub;
62075:         jitEqualityICs[i].lvr = equalityICs[i].lvr;
62075:         jitEqualityICs[i].rvr = equalityICs[i].rvr;
62075:         jitEqualityICs[i].tempReg = equalityICs[i].tempReg;
62075:         jitEqualityICs[i].cond = equalityICs[i].cond;
56192:         if (equalityICs[i].jumpToStub.isSet())
62075:             jitEqualityICs[i].jumpToStub = fullCode.locationOf(equalityICs[i].jumpToStub.get());
62075:         jitEqualityICs[i].fallThrough = fullCode.locationOf(equalityICs[i].fallThrough);
62075:         
62075:         stubCode.patch(equalityICs[i].addrLabel, &jitEqualityICs[i]);
62075:     }
62075: 
62075:     ic::TraceICInfo *jitTraceICs = (ic::TraceICInfo *)cursor;
56217:     jit->nTraceICs = traceICs.length();
62075:     cursor += sizeof(ic::TraceICInfo) * jit->nTraceICs;
62075:     for (size_t i = 0; i < jit->nTraceICs; i++) {
62075:         jitTraceICs[i].initialized = traceICs[i].initialized;
56220:         if (!traceICs[i].initialized)
56220:             continue;
56220: 
75695:         if (traceICs[i].fastTrampoline) {
75716:             jitTraceICs[i].fastTarget = stubCode.locationOf(traceICs[i].trampolineStart);
75649:         } else {
56217:             uint32 offs = uint32(traceICs[i].jumpTarget - script->code);
56217:             JS_ASSERT(jumpMap[offs].isValid());
75716:             jitTraceICs[i].fastTarget = fullCode.locationOf(jumpMap[offs]);
75716:         }
75716:         jitTraceICs[i].slowTarget = stubCode.locationOf(traceICs[i].trampolineStart);
75716: 
62075:         jitTraceICs[i].traceHint = fullCode.locationOf(traceICs[i].traceHint);
62075:         jitTraceICs[i].stubEntry = stubCode.locationOf(traceICs[i].stubEntry);
62075:         jitTraceICs[i].traceData = NULL;
56217: #ifdef DEBUG
62075:         jitTraceICs[i].jumpTargetPC = traceICs[i].jumpTarget;
56217: #endif
75716: 
62075:         jitTraceICs[i].hasSlowTraceHint = traceICs[i].slowTraceHint.isSet();
56217:         if (traceICs[i].slowTraceHint.isSet())
62075:             jitTraceICs[i].slowTraceHint = stubCode.locationOf(traceICs[i].slowTraceHint.get());
60534: #ifdef JS_TRACER
64280:         uint32 hotloop = GetHotloop(cx);
64280:         uint32 prevCount = cx->compartment->backEdgeCount(traceICs[i].jumpTarget);
64280:         jitTraceICs[i].loopCounterStart = hotloop;
64280:         jitTraceICs[i].loopCounter = hotloop < prevCount ? 1 : hotloop - prevCount;
60534: #endif
62075:         
62075:         stubCode.patch(traceICs[i].addrLabel, &jitTraceICs[i]);
53590:     }
53119: #endif /* JS_MONOIC */
53119: 
54832:     for (size_t i = 0; i < callPatches.length(); i++) {
55463:         CallPatchInfo &patch = callPatches[i];
55463: 
57713:         if (patch.hasFastNcode)
55463:             fullCode.patch(patch.fastNcodePatch, fullCode.locationOf(patch.joinPoint));
55463:         if (patch.hasSlowNcode)
55463:             stubCode.patch(patch.slowNcodePatch, fullCode.locationOf(patch.joinPoint));
54832:     }
54832: 
60598: #ifdef JS_POLYIC
62075:     ic::GetElementIC *jitGetElems = (ic::GetElementIC *)cursor;
56738:     jit->nGetElems = getElemICs.length();
62075:     cursor += sizeof(ic::GetElementIC) * jit->nGetElems;
62075:     for (size_t i = 0; i < jit->nGetElems; i++) {
62075:         ic::GetElementIC &to = jitGetElems[i];
56738:         GetElementICInfo &from = getElemICs[i];
57671: 
57671:         new (&to) ic::GetElementIC();
56738:         from.copyTo(to, fullCode, stubCode);
56738: 
56738:         to.typeReg = from.typeReg;
56738:         to.objReg = from.objReg;
56738:         to.idRemat = from.id;
56738: 
56738:         if (from.typeGuard.isSet()) {
56738:             int inlineTypeGuard = fullCode.locationOf(from.typeGuard.get()) -
56738:                                   fullCode.locationOf(from.fastPathStart);
56738:             to.inlineTypeGuard = inlineTypeGuard;
56738:             JS_ASSERT(to.inlineTypeGuard == inlineTypeGuard);
56738:         }
56738:         int inlineClaspGuard = fullCode.locationOf(from.claspGuard) -
56738:                                fullCode.locationOf(from.fastPathStart);
56738:         to.inlineClaspGuard = inlineClaspGuard;
56738:         JS_ASSERT(to.inlineClaspGuard == inlineClaspGuard);
56738: 
56738:         stubCode.patch(from.paramAddr, &to);
56738:     }
60598: 
62075:     ic::SetElementIC *jitSetElems = (ic::SetElementIC *)cursor;
57671:     jit->nSetElems = setElemICs.length();
62075:     cursor += sizeof(ic::SetElementIC) * jit->nSetElems;
62075:     for (size_t i = 0; i < jit->nSetElems; i++) {
62075:         ic::SetElementIC &to = jitSetElems[i];
57671:         SetElementICInfo &from = setElemICs[i];
57671: 
57671:         new (&to) ic::SetElementIC();
57671:         from.copyTo(to, fullCode, stubCode);
57671: 
57671:         to.strictMode = script->strictModeCode;
57671:         to.vr = from.vr;
57671:         to.objReg = from.objReg;
57671:         to.objRemat = from.objRemat.toInt32();
57671:         JS_ASSERT(to.objRemat == from.objRemat.toInt32());
57671: 
57671:         to.hasConstantKey = from.key.isConstant();
57671:         if (from.key.isConstant())
57671:             to.keyValue = from.key.index();
57671:         else
57671:             to.keyReg = from.key.reg();
57671: 
57671:         int inlineClaspGuard = fullCode.locationOf(from.claspGuard) -
57671:                                fullCode.locationOf(from.fastPathStart);
57671:         to.inlineClaspGuard = inlineClaspGuard;
57671:         JS_ASSERT(to.inlineClaspGuard == inlineClaspGuard);
57671: 
57671:         int inlineHoleGuard = fullCode.locationOf(from.holeGuard) -
57671:                                fullCode.locationOf(from.fastPathStart);
57671:         to.inlineHoleGuard = inlineHoleGuard;
57671:         JS_ASSERT(to.inlineHoleGuard == inlineHoleGuard);
57671: 
60597:         CheckIsStubCall(to.slowPathCall.labelAtOffset(0));
60597: 
60164:         to.volatileMask = from.volatileMask;
60164:         JS_ASSERT(to.volatileMask == from.volatileMask);
60164: 
57671:         stubCode.patch(from.paramAddr, &to);
57671:     }
60598: 
62075:     ic::PICInfo *jitPics = (ic::PICInfo *)cursor;
55503:     jit->nPICs = pics.length();
62075:     cursor += sizeof(ic::PICInfo) * jit->nPICs;
62075:     for (size_t i = 0; i < jit->nPICs; i++) {
62075:         new (&jitPics[i]) ic::PICInfo();
62075:         pics[i].copyTo(jitPics[i], fullCode, stubCode);
62075:         pics[i].copySimpleMembersTo(jitPics[i]);
62075: 
62075:         jitPics[i].shapeGuard = masm.distanceOf(pics[i].shapeGuard) -
53270:                                 masm.distanceOf(pics[i].fastPathStart);
62075:         JS_ASSERT(jitPics[i].shapeGuard == masm.distanceOf(pics[i].shapeGuard) -
53426:                                            masm.distanceOf(pics[i].fastPathStart));
62075:         jitPics[i].shapeRegHasBaseShape = true;
62075:         jitPics[i].pc = pics[i].pc;
52887: 
53620:         if (pics[i].kind == ic::PICInfo::SET ||
53620:             pics[i].kind == ic::PICInfo::SETMETHOD) {
62075:             jitPics[i].u.vr = pics[i].vr;
53054:         } else if (pics[i].kind != ic::PICInfo::NAME) {
52884:             if (pics[i].hasTypeCheck) {
52884:                 int32 distance = stubcc.masm.distanceOf(pics[i].typeCheck) -
52884:                                  stubcc.masm.distanceOf(pics[i].slowPathStart);
53264:                 JS_ASSERT(distance <= 0);
62075:                 jitPics[i].u.get.typeCheckOffset = distance;
62075:             }
62075:         }
62075:         stubCode.patch(pics[i].paramAddr, &jitPics[i]);
52880:     }
60597: #endif
52880: 
52613:     /* Link fast and slow paths together. */
52613:     stubcc.fixCrossJumps(result, masm.size(), masm.size() + stubcc.size());
52613: 
53183:     size_t doubleOffset = masm.size() + stubcc.size();
75649:     double *inlineDoubles = (double *) (result + doubleOffset);
75649:     double *oolDoubles = (double*) (result + doubleOffset +
75649:                                     masm.numDoubles() * sizeof(double));
53183: 
59979:     /* Generate jump tables. */
75716:     void **jumpVec = (void **)(oolDoubles + stubcc.masm.numDoubles());
59979: 
59979:     for (size_t i = 0; i < jumpTableOffsets.length(); i++) {
59979:         uint32 offset = jumpTableOffsets[i];
59979:         JS_ASSERT(jumpMap[offset].isValid());
59979:         jumpVec[i] = (void *)(result + masm.distanceOf(jumpMap[offset]));
59979:     }
59979: 
59979:     /* Patch jump table references. */
59979:     for (size_t i = 0; i < jumpTables.length(); i++) {
59979:         JumpTable &jumpTable = jumpTables[i];
59979:         fullCode.patch(jumpTable.label, &jumpVec[jumpTable.offsetIndex]);
59979:     }
59979: 
52613:     /* Patch all outgoing calls. */
75649:     masm.finalize(fullCode, inlineDoubles);
75649:     stubcc.masm.finalize(stubCode, oolDoubles);
52611: 
52611:     JSC::ExecutableAllocator::makeExecutable(result, masm.size() + stubcc.size());
52611:     JSC::ExecutableAllocator::cacheFlush(result, masm.size() + stubcc.size());
52611: 
53168:     /* Build the table of call sites. */
62075:     CallSite *jitCallSites = (CallSite *)cursor;
55503:     jit->nCallSites = callSites.length();
62075:     cursor += sizeof(CallSite) * jit->nCallSites;
62075:     for (size_t i = 0; i < jit->nCallSites; i++) {
62075:         CallSite &to = jitCallSites[i];
57766:         InternalCallSite &from = callSites[i];
57766:         uint32 codeOffset = from.ool
57766:                             ? masm.size() + from.returnOffset
57766:                             : from.returnOffset;
57766:         to.initialize(codeOffset, from.pc - script->code, from.id);
57766:     }
54427: 
55503:     JS_ASSERT(size_t(cursor - (uint8*)jit) == totalBytes);
55503: 
55503:     *jitp = jit;
53168: 
60207:     /* We tolerate a race in the stats. */
60207:     cx->runtime->mjitMemoryUsed += totalSize + totalBytes;
60207: 
52611:     return Compile_Okay;
52611: }
52611: 
59882: class SrcNoteLineScanner {
59882:     ptrdiff_t offset;
59882:     jssrcnote *sn;
59882: 
59882: public:
60153:     SrcNoteLineScanner(jssrcnote *sn) : offset(SN_DELTA(sn)), sn(sn) {}
59882: 
59882:     bool firstOpInLine(ptrdiff_t relpc) {
59882:         while ((offset < relpc) && !SN_IS_TERMINATOR(sn)) {
60153:             sn = SN_NEXT(sn);
59882:             offset += SN_DELTA(sn);
59882:         }
59882: 
59882:         while ((offset == relpc) && !SN_IS_TERMINATOR(sn)) {
59882:             JSSrcNoteType type = (JSSrcNoteType) SN_TYPE(sn);
59882:             if (type == SRC_SETLINE || type == SRC_NEWLINE)
59882:                 return true;
59882: 
60153:             sn = SN_NEXT(sn);
59882:             offset += SN_DELTA(sn);
59882:         }
59882: 
59882:         return false;
59882:     }
59882: };
59882: 
52776: #ifdef DEBUG
52776: #define SPEW_OPCODE()                                                         \
52776:     JS_BEGIN_MACRO                                                            \
52776:         if (IsJaegerSpewChannelActive(JSpew_JSOps)) {                         \
52776:             JaegerSpew(JSpew_JSOps, "    %2d ", frame.stackDepth());          \
52776:             js_Disassemble1(cx, script, PC, PC - script->code,                \
52776:                             JS_TRUE, stdout);                                 \
52776:         }                                                                     \
52776:     JS_END_MACRO;
52776: #else
52776: #define SPEW_OPCODE()
52776: #endif /* DEBUG */
52776: 
52560: #define BEGIN_CASE(name)        case name:
52560: #define END_CASE(name)                      \
52560:     JS_BEGIN_MACRO                          \
52560:         PC += name##_LENGTH;                \
52560:     JS_END_MACRO;                           \
52560:     break;
52560: 
75828: static inline void
75828: FixDouble(Value &val)
75828: {
75828:     if (val.isInt32())
75828:         val.setDouble((double)val.toInt32());
75828: }
75828: 
52558: CompileStatus
52558: mjit::Compiler::generateMethod()
52558: {
53168:     mjit::AutoScriptRetrapper trapper(cx, script);
59882:     SrcNoteLineScanner scanner(script->notes());
52558: 
75649:     /* For join points, whether there was fallthrough from the previous opcode. */
75649:     bool fallthrough = true;
75649: 
52558:     for (;;) {
52558:         JSOp op = JSOp(*PC);
59882:         int trap = stubs::JSTRAP_NONE;
59882:         if (op == JSOP_TRAP) {
53168:             if (!trapper.untrap(PC))
53168:                 return Compile_Error;
53168:             op = JSOp(*PC);
59882:             trap |= stubs::JSTRAP_TRAP;
59882:         }
59882:         if (script->singleStepMode && scanner.firstOpInLine(PC - script->code))
59882:             trap |= stubs::JSTRAP_SINGLESTEP;
53168: 
56602:         analyze::Bytecode *opinfo = analysis->maybeCode(PC);
56602: 
56602:         if (!opinfo) {
52558:             if (op == JSOP_STOP)
52558:                 break;
52558:             if (js_CodeSpec[op].length != -1)
52558:                 PC += js_CodeSpec[op].length;
52558:             else
52558:                 PC += js_GetVariableBytecodeLength(PC);
52558:             continue;
52558:         }
52558: 
75649:         frame.setPC(PC);
56602:         frame.setInTryBlock(opinfo->inTryBlock);
56602:         if (opinfo->jumpTarget || trap) {
75649:             if (fallthrough) {
75630:                 fixDoubleTypes(Uses(0));
75649: 
75649:                 /*
75649:                  * Watch for fallthrough to the head of a 'do while' loop.
75649:                  * We don't know what register state we will be using at the head
75649:                  * of the loop so sync, branch, and fix it up after the loop
75649:                  * has been processed.
75649:                  */
75649:                 if (liveness.getCode(PC).loopBackedge) {
75649:                     frame.syncAndForgetEverything();
75649:                     Jump j = masm.jump();
75649:                     if (!frame.pushLoop(PC, j, PC))
75649:                         return Compile_Error;
75649:                 } else {
75649:                     if (!frame.syncForBranch(PC, Uses(0)))
75649:                         return Compile_Error;
75649:                     JS_ASSERT(frame.consistentRegisters(PC));
75649:                 }
75649:             }
75649: 
75649:             if (!frame.discardForJoin(PC, opinfo->stackDepth))
75649:                 return Compile_Error;
75649:             restoreAnalysisTypes(opinfo->stackDepth);
75649:             fallthrough = true;
75649:         }
75649: 
56602:         jumpMap[uint32(PC - script->code)] = masm.label();
56602: 
52776:         SPEW_OPCODE();
56602:         JS_ASSERT(frame.stackDepth() == opinfo->stackDepth);
56602: 
56602:         if (trap) {
53168:             prepareStubCall(Uses(0));
59882:             masm.move(Imm32(trap), Registers::ArgReg1);
57766:             Call cl = emitStubCall(JS_FUNC_TO_DATA_PTR(void *, stubs::Trap));
57766:             InternalCallSite site(masm.callReturnOffset(cl), PC,
57766:                                   CallSite::MAGIC_TRAP_ID, true, false);
57766:             addCallSite(site);
57766:         } else if (savedTraps && savedTraps[PC - script->code]) {
57766:             // Normally when we patch return addresses, we have generated the
57766:             // same exact code at that site. For example, patching a stub call's
57766:             // return address will resume at the same stub call.
57766:             //
57766:             // In the case we're handling here, we could potentially be
57766:             // recompiling to remove a trap, and therefore we won't generate
57766:             // a call to the trap. However, we could be re-entering from that
57766:             // trap. The callsite will be missing, and fixing the stack will
57766:             // fail! Worse, we can't just put a label here, because on some
57766:             // platforms the stack needs to be adjusted when returning from
57766:             // the old trap call.
57766:             //
57766:             // To deal with this, we add a small bit of code in the OOL path
57766:             // that will adjust the stack and jump back into the script.
57766:             // Note that this uses MAGIC_TRAP_ID, which is necessary for
57766:             // repatching to detect the callsite as identical to the return
57766:             // address.
57766:             //
57766:             // Unfortunately, this means that if a bytecode is ever trapped,
57766:             // we will always generate a CallSite (either Trapped or not) for
57766:             // every debug recompilation of the script thereafter. The reason
57766:             // is that MAGIC_TRAP_ID callsites always propagate to the next
57766:             // recompilation. That's okay, and not worth fixing - it's a small
57766:             // amount of memory.
57766:             uint32 offset = stubcc.masm.distanceOf(stubcc.masm.label());
57766:             if (Assembler::ReturnStackAdjustment) {
57766:                 stubcc.masm.addPtr(Imm32(Assembler::ReturnStackAdjustment),
57766:                                    Assembler::stackPointerRegister);
57766:             }
57766:             stubcc.crossJump(stubcc.masm.jump(), masm.label());
57766: 
57766:             InternalCallSite site(offset, PC, CallSite::MAGIC_TRAP_ID, false, true);
57766:             addCallSite(site);
57766:         }
53168: 
75828:         /*
75828:          * If we are recompiling, check for any frames on the stack at this
75828:          * opcode, and patch the types of any arg/local/stack slots which are
75828:          * integers but need to be doubles. Any value assumed to be a double in
75828:          * this compilation may instead be an int in the earlier compilation
75828:          * and stack frames. Other transitions between known types are not
75828:          * possible --- type sets can only grow, and if new non-double type
75828:          * tags become possible we will treat that slot as unknown in this
75828:          * compilation.
75828:          */
75828:         for (unsigned i = 0; frames && i < frames->length(); i++) {
75828:             if ((*frames)[i].pc != PC)
75828:                 continue;
75828:             JSStackFrame *patchfp = (*frames)[i].fp;
75828: 
75828:             for (unsigned j = 0; fun && j < fun->nargs; j++) {
75828:                 FrameEntry *fe = frame.getArg(j);
75828:                 if (fe->isType(JSVAL_TYPE_DOUBLE))
75828:                     FixDouble(patchfp->formalArg(j));
75828:             }
75828: 
75828:             for (unsigned j = 0; j < script->nfixed; j++) {
75828:                 FrameEntry *fe = frame.getLocal(j);
75828:                 if (fe->isType(JSVAL_TYPE_DOUBLE))
75828:                     FixDouble(patchfp->varSlot(j));
75828:             }
75828: 
75828:             unsigned depth = opinfo->stackDepth - analyze::GetUseCount(script, PC - script->code);
75828:             for (unsigned j = 0; j < depth; j++) {
75828:                 FrameEntry *fe = frame.getStack(j);
75828:                 if (fe->isType(JSVAL_TYPE_DOUBLE))
75828:                     FixDouble(patchfp->base()[j]);
75828:             }
75828:         }
75828: 
52560:     /**********************
52560:      * BEGIN COMPILER OPS *
52560:      **********************/ 
52560: 
75790:         jsbytecode *oldPC = PC;
75790: 
52558:         switch (op) {
52647:           BEGIN_CASE(JSOP_NOP)
52647:           END_CASE(JSOP_NOP)
52647: 
52769:           BEGIN_CASE(JSOP_PUSH)
53081:             frame.push(UndefinedValue());
52769:           END_CASE(JSOP_PUSH)
52769: 
52662:           BEGIN_CASE(JSOP_POPV)
52806:           BEGIN_CASE(JSOP_SETRVAL)
52662:           {
54832:             RegisterID reg = frame.allocReg();
54832:             masm.load32(FrameFlagsAddress(), reg);
55483:             masm.or32(Imm32(JSFRAME_HAS_RVAL), reg);
54832:             masm.store32(reg, FrameFlagsAddress());
54832:             frame.freeReg(reg);
54832: 
52662:             FrameEntry *fe = frame.peek(-1);
53840:             frame.storeTo(fe, Address(JSFrameReg, JSStackFrame::offsetOfReturnValue()), true);
52662:             frame.pop();
52662:           }
52662:           END_CASE(JSOP_POPV)
52662: 
52650:           BEGIN_CASE(JSOP_RETURN)
54832:             emitReturn(frame.peek(-1));
75649:             fallthrough = false;
52650:           END_CASE(JSOP_RETURN)
52650: 
52599:           BEGIN_CASE(JSOP_GOTO)
64230:           BEGIN_CASE(JSOP_DEFAULT)
52599:           {
75649:             jsbytecode *target = PC + GET_JUMP_OFFSET(PC);
75630:             fixDoubleTypes(Uses(0));
75649: 
75649:             /*
75649:              * Watch out for backward jumps emitted to link 'continue' statements
75649:              * together. These are jumping to another GOTO at the head of the loop,
75649:              * which should be short circuited so we don't mistake this for an
75649:              * actual loop back edge. :XXX: what if there is a trap at the target?
75649:              */
75649:             if (target < PC) {
75649:                 if (JSOp(*target) == JSOP_GOTO) {
75649:                     target = target + GET_JUMP_OFFSET(target);
75649:                     JS_ASSERT(target >= PC);
75649:                 } else if (JSOp(*target) == JSOP_GOTOX) {
75649:                     return Compile_Abort;
75649:                 }
75649:             }
75649: 
75649:             /*
75649:              * Watch for gotos which are entering a 'for' or 'while' loop. These jump
75649:              * to the loop condition test and are immediately followed by the head of the loop.
75649:              */
75649:             jsbytecode *next = PC + JSOP_GOTO_LENGTH;
75649:             if (analysis->maybeCode(next) && liveness.getCode(next).loopBackedge) {
54719:                 frame.syncAndForgetEverything();
52599:                 Jump j = masm.jump();
75649:                 if (!frame.pushLoop(next, j, target))
56766:                     return Compile_Error;
75649:             } else {
75649:                 if (!frame.syncForBranch(target, Uses(0)))
75649:                     return Compile_Error;
75649:                 Jump j = masm.jump();
75649:                 if (!jumpAndTrace(j, target))
75649:                     return Compile_Error;
75649:             }
75649:             fallthrough = false;
52599:           }
52599:           END_CASE(JSOP_GOTO)
52599: 
52686:           BEGIN_CASE(JSOP_IFEQ)
52686:           BEGIN_CASE(JSOP_IFNE)
75630:             fixDoubleTypes(Uses(1));
56766:             if (!jsop_ifneq(op, PC + GET_JUMP_OFFSET(PC)))
56766:                 return Compile_Error;
52737:           END_CASE(JSOP_IFNE)
52737: 
52778:           BEGIN_CASE(JSOP_ARGUMENTS)
57718:             /*
57718:              * For calls of the form 'f.apply(x, arguments)' we can avoid
57718:              * creating an args object by having ic::SplatApplyArgs pull
57718:              * directly from the stack. To do this, we speculate here that
57718:              * 'apply' actually refers to js_fun_apply. If this is not true,
57718:              * the slow path in JSOP_FUNAPPLY will create the args object.
57718:              */
57718:             if (canUseApplyTricks())
57718:                 applyTricks = LazyArgsObj;
57718:             else
57718:                 jsop_arguments();
75708:             pushSyncedEntry(0);
52778:           END_CASE(JSOP_ARGUMENTS)
52778: 
56586:           BEGIN_CASE(JSOP_FORARG)
75708:           {
75708:             uint32 arg = GET_SLOTNO(PC);
56586:             iterNext();
75790:             frame.storeArg(arg, knownArgumentType(arg), true);
56586:             frame.pop();
75708:           }
56586:           END_CASE(JSOP_FORARG)
56586: 
52737:           BEGIN_CASE(JSOP_FORLOCAL)
75708:           {
75708:             uint32 slot = GET_SLOTNO(PC);
52737:             iterNext();
75790:             frame.storeLocal(slot, knownLocalType(slot), true, true);
52737:             frame.pop();
75708:           }
52737:           END_CASE(JSOP_FORLOCAL)
52686: 
52714:           BEGIN_CASE(JSOP_DUP)
52714:             frame.dup();
52714:           END_CASE(JSOP_DUP)
52714: 
52715:           BEGIN_CASE(JSOP_DUP2)
52715:             frame.dup2();
52715:           END_CASE(JSOP_DUP2)
52715: 
52721:           BEGIN_CASE(JSOP_BITOR)
52718:           BEGIN_CASE(JSOP_BITXOR)
52685:           BEGIN_CASE(JSOP_BITAND)
52685:             jsop_bitop(op);
52685:           END_CASE(JSOP_BITAND)
52685: 
52651:           BEGIN_CASE(JSOP_LT)
52651:           BEGIN_CASE(JSOP_LE)
52651:           BEGIN_CASE(JSOP_GT)
52651:           BEGIN_CASE(JSOP_GE)
52679:           BEGIN_CASE(JSOP_EQ)
52679:           BEGIN_CASE(JSOP_NE)
52651:           {
52652:             /* Detect fusions. */
52652:             jsbytecode *next = &PC[JSOP_GE_LENGTH];
52652:             JSOp fused = JSOp(*next);
56602:             if ((fused != JSOP_IFEQ && fused != JSOP_IFNE) || analysis->jumpTarget(next))
52651:                 fused = JSOP_NOP;
52652: 
52652:             /* Get jump target, if any. */
52652:             jsbytecode *target = NULL;
75630:             if (fused != JSOP_NOP) {
52652:                 target = next + GET_JUMP_OFFSET(next);
75630:                 fixDoubleTypes(Uses(2));
75630:             }
52651: 
52652:             BoolStub stub = NULL;
52652:             switch (op) {
52652:               case JSOP_LT:
52652:                 stub = stubs::LessThan;
52652:                 break;
52652:               case JSOP_LE:
52652:                 stub = stubs::LessEqual;
52652:                 break;
52652:               case JSOP_GT:
52652:                 stub = stubs::GreaterThan;
52652:                 break;
52652:               case JSOP_GE:
52652:                 stub = stubs::GreaterEqual;
52652:                 break;
52679:               case JSOP_EQ:
52679:                 stub = stubs::Equal;
52679:                 break;
52679:               case JSOP_NE:
52679:                 stub = stubs::NotEqual;
52679:                 break;
52652:               default:
52652:                 JS_NOT_REACHED("WAT");
52652:                 break;
52652:             }
52653: 
52653:             FrameEntry *rhs = frame.peek(-1);
52653:             FrameEntry *lhs = frame.peek(-2);
52653: 
52653:             /* Check for easy cases that the parser does not constant fold. */
52653:             if (lhs->isConstant() && rhs->isConstant()) {
52653:                 /* Primitives can be trivially constant folded. */
52653:                 const Value &lv = lhs->getValue();
52653:                 const Value &rv = rhs->getValue();
52653: 
52653:                 if (lv.isPrimitive() && rv.isPrimitive()) {
52653:                     bool result = compareTwoValues(cx, op, lv, rv);
52653: 
52652:                     frame.pop();
52652:                     frame.pop();
52652: 
52652:                     if (!target) {
75790:                         frame.push(Value(BooleanValue(result)));
52652:                     } else {
52653:                         if (fused == JSOP_IFEQ)
52653:                             result = !result;
52653: 
52653:                         if (result) {
75649:                             fixDoubleTypes(Uses(0));
75649:                             if (!frame.syncForBranch(target, Uses(0)))
75649:                                 return Compile_Error;
52653:                             Jump j = masm.jump();
56766:                             if (!jumpAndTrace(j, target))
56766:                                 return Compile_Error;
75649:                         } else {
75649:                             /*
75649:                              * Branch is never taken, but clean up any loop
75649:                              * if this is a backedge.
75649:                              */
75649:                             if (target < PC && !finishLoop(target))
75649:                                 return Compile_Error;
52652:                         }
52652:                     }
52652:                 } else {
56766:                     if (!emitStubCmpOp(stub, target, fused))
56766:                         return Compile_Error;
52653:                 }
52653:             } else {
52651:                 /* Anything else should go through the fast path generator. */
56766:                 if (!jsop_relational(op, stub, target, fused))
56766:                     return Compile_Error;
52651:             }
52651: 
52651:             /* Advance PC manually. */
52679:             JS_STATIC_ASSERT(JSOP_LT_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_LE_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_GT_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_EQ_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_NE_LENGTH == JSOP_GE_LENGTH);
52679: 
52651:             PC += JSOP_GE_LENGTH;
52776:             if (fused != JSOP_NOP) {
52776:                 SPEW_OPCODE();
52651:                 PC += JSOP_IFNE_LENGTH;
52776:             }
52651:             break;
52651:           }
52651:           END_CASE(JSOP_GE)
52651: 
52685:           BEGIN_CASE(JSOP_LSH)
53230:             jsop_bitop(op);
53230:           END_CASE(JSOP_LSH)
53230: 
52685:           BEGIN_CASE(JSOP_RSH)
53230:             jsop_rsh();
52685:           END_CASE(JSOP_RSH)
52560: 
52725:           BEGIN_CASE(JSOP_URSH)
53581:             jsop_bitop(op);
52725:           END_CASE(JSOP_URSH)
52725: 
52692:           BEGIN_CASE(JSOP_ADD)
75851:             if (!jsop_binary(op, stubs::Add, knownPushedType(0), pushedTypeSet(0)))
75668:                 return Compile_Overflow;
52692:           END_CASE(JSOP_ADD)
52692: 
52692:           BEGIN_CASE(JSOP_SUB)
75851:             if (!jsop_binary(op, stubs::Sub, knownPushedType(0), pushedTypeSet(0)))
75668:                 return Compile_Overflow;
52692:           END_CASE(JSOP_SUB)
52692: 
52692:           BEGIN_CASE(JSOP_MUL)
75851:             if (!jsop_binary(op, stubs::Mul, knownPushedType(0), pushedTypeSet(0)))
75668:                 return Compile_Overflow;
52692:           END_CASE(JSOP_MUL)
52692: 
52692:           BEGIN_CASE(JSOP_DIV)
75851:             if (!jsop_binary(op, stubs::Div, knownPushedType(0), pushedTypeSet(0)))
75668:                 return Compile_Overflow;
52692:           END_CASE(JSOP_DIV)
52692: 
52692:           BEGIN_CASE(JSOP_MOD)
75668:             if (!jsop_mod())
75668:                 return Compile_Overflow;
52692:           END_CASE(JSOP_MOD)
52692: 
52734:           BEGIN_CASE(JSOP_NOT)
52734:             jsop_not();
52734:           END_CASE(JSOP_NOT)
52734: 
52724:           BEGIN_CASE(JSOP_BITNOT)
52724:           {
52724:             FrameEntry *top = frame.peek(-1);
52724:             if (top->isConstant() && top->getValue().isPrimitive()) {
52724:                 int32_t i;
52724:                 ValueToECMAInt32(cx, top->getValue(), &i);
52724:                 i = ~i;
52724:                 frame.pop();
53081:                 frame.push(Int32Value(i));
52724:             } else {
52724:                 jsop_bitnot();
52724:             }
52724:           }
52724:           END_CASE(JSOP_BITNOT)
52724: 
52713:           BEGIN_CASE(JSOP_NEG)
52713:           {
52713:             FrameEntry *top = frame.peek(-1);
52713:             if (top->isConstant() && top->getValue().isPrimitive()) {
52713:                 double d;
52713:                 ValueToNumber(cx, top->getValue(), &d);
52713:                 d = -d;
75668:                 Value v = NumberValue(d);
75668: 
75668:                 /* Watch for overflow in constant propagation. */
75851:                 types::TypeSet *pushed = pushedTypeSet(0);
75851:                 if (!v.isInt32() && pushed && !pushed->hasType(types::TYPE_DOUBLE)) {
75851:                     script->typeMonitorResult(cx, PC, types::TYPE_DOUBLE);
75668:                     return Compile_Overflow;
75668:                 }
75668: 
52713:                 frame.pop();
75668:                 frame.push(v);
52713:             } else {
52713:                 jsop_neg();
52713:             }
52713:           }
52713:           END_CASE(JSOP_NEG)
52713: 
53039:           BEGIN_CASE(JSOP_POS)
53039:             jsop_pos();
53039:           END_CASE(JSOP_POS)
53039: 
54409:           BEGIN_CASE(JSOP_DELNAME)
54409:           {
54409:             uint32 index = fullAtomIndex(PC);
54409:             JSAtom *atom = script->getAtom(index);
54409: 
54409:             prepareStubCall(Uses(0));
54409:             masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::DelName);
75708:             pushSyncedEntry(0);
54409:           }
54409:           END_CASE(JSOP_DELNAME)
54409: 
54406:           BEGIN_CASE(JSOP_DELPROP)
54406:           {
54406:             uint32 index = fullAtomIndex(PC);
54406:             JSAtom *atom = script->getAtom(index);
54406: 
54406:             prepareStubCall(Uses(1));
54406:             masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:             INLINE_STUBCALL(STRICT_VARIANT(stubs::DelProp));
54406:             frame.pop();
75708:             pushSyncedEntry(0);
54406:           }
54406:           END_CASE(JSOP_DELPROP) 
54406: 
54406:           BEGIN_CASE(JSOP_DELELEM)
54406:             prepareStubCall(Uses(2));
57766:             INLINE_STUBCALL(STRICT_VARIANT(stubs::DelElem));
54406:             frame.popn(2);
75708:             pushSyncedEntry(0);
54406:           END_CASE(JSOP_DELELEM)
54406: 
52738:           BEGIN_CASE(JSOP_TYPEOF)
52784:           BEGIN_CASE(JSOP_TYPEOFEXPR)
52738:             jsop_typeof();
52738:           END_CASE(JSOP_TYPEOF)
52738: 
52676:           BEGIN_CASE(JSOP_VOID)
52676:             frame.pop();
53081:             frame.push(UndefinedValue());
52676:           END_CASE(JSOP_VOID)
52676: 
52732:           BEGIN_CASE(JSOP_INCNAME)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::IncName), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_INCNAME)
52732: 
52825:           BEGIN_CASE(JSOP_INCGNAME)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::IncGlobalName), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_INCGNAME)
52825: 
52746:           BEGIN_CASE(JSOP_INCPROP)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::IncProp), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_INCPROP)
52746: 
52815:           BEGIN_CASE(JSOP_INCELEM)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::IncElem));
52815:           END_CASE(JSOP_INCELEM)
52815: 
52732:           BEGIN_CASE(JSOP_DECNAME)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::DecName), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_DECNAME)
52732: 
52825:           BEGIN_CASE(JSOP_DECGNAME)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::DecGlobalName), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_DECGNAME)
52825: 
52746:           BEGIN_CASE(JSOP_DECPROP)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::DecProp), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_DECPROP)
52746: 
52815:           BEGIN_CASE(JSOP_DECELEM)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::DecElem));
52815:           END_CASE(JSOP_DECELEM)
52815: 
53118:           BEGIN_CASE(JSOP_NAMEINC)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::NameInc), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
53118:           END_CASE(JSOP_NAMEINC)
53118: 
52825:           BEGIN_CASE(JSOP_GNAMEINC)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::GlobalNameInc), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_GNAMEINC)
52732: 
52746:           BEGIN_CASE(JSOP_PROPINC)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::PropInc), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_PROPINC)
52746: 
52815:           BEGIN_CASE(JSOP_ELEMINC)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::ElemInc));
52815:           END_CASE(JSOP_ELEMINC)
52815: 
52732:           BEGIN_CASE(JSOP_NAMEDEC)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::NameDec), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_NAMEDEC)
52732: 
52825:           BEGIN_CASE(JSOP_GNAMEDEC)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::GlobalNameDec), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_GNAMEDEC)
52825: 
52746:           BEGIN_CASE(JSOP_PROPDEC)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::PropDec), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_PROPDEC)
52746: 
52815:           BEGIN_CASE(JSOP_ELEMDEC)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::ElemDec));
52815:           END_CASE(JSOP_ELEMDEC)
52815: 
52741:           BEGIN_CASE(JSOP_GETTHISPROP)
52741:             /* Push thisv onto stack. */
52741:             jsop_this();
75790:             if (!jsop_getprop(script->getAtom(fullAtomIndex(PC)), knownPushedType(0)))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETTHISPROP);
52741: 
52741:           BEGIN_CASE(JSOP_GETARGPROP)
75631:           {
52741:             /* Push arg onto stack. */
75631:             uint32 arg = GET_SLOTNO(PC);
75790:             frame.pushArg(arg, knownArgumentType(arg));
75790:             if (!jsop_getprop(script->getAtom(fullAtomIndex(&PC[ARGNO_LEN])), knownPushedType(0)))
56037:                 return Compile_Error;
75631:           }
52741:           END_CASE(JSOP_GETARGPROP)
52741: 
52741:           BEGIN_CASE(JSOP_GETLOCALPROP)
75630:           {
75630:             uint32 local = GET_SLOTNO(PC);
75790:             frame.pushLocal(local, knownLocalType(local));
75790:             if (!jsop_getprop(script->getAtom(fullAtomIndex(&PC[SLOTNO_LEN])), knownPushedType(0)))
56037:                 return Compile_Error;
75630:           }
52741:           END_CASE(JSOP_GETLOCALPROP)
52741: 
52741:           BEGIN_CASE(JSOP_GETPROP)
75790:             if (!jsop_getprop(script->getAtom(fullAtomIndex(PC)), knownPushedType(0)))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETPROP)
52741: 
52762:           BEGIN_CASE(JSOP_LENGTH)
56037:             if (!jsop_length())
56037:                 return Compile_Error;
52762:           END_CASE(JSOP_LENGTH)
52762: 
52693:           BEGIN_CASE(JSOP_GETELEM)
57723:             if (!jsop_getelem(false))
56037:                 return Compile_Error;
52693:           END_CASE(JSOP_GETELEM)
52693: 
52693:           BEGIN_CASE(JSOP_SETELEM)
60164:           {
60164:             jsbytecode *next = &PC[JSOP_SETELEM_LENGTH];
60164:             bool pop = (JSOp(*next) == JSOP_POP && !analysis->jumpTarget(next));
60164:             if (!jsop_setelem(pop))
57671:                 return Compile_Error;
60164:           }
52693:           END_CASE(JSOP_SETELEM);
52693: 
52644:           BEGIN_CASE(JSOP_CALLNAME)
53087:             prepareStubCall(Uses(0));
52644:             masm.move(Imm32(fullAtomIndex(PC)), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::CallName);
75708:             pushSyncedEntry(0);
75708:             pushSyncedEntry(1);
52644:           END_CASE(JSOP_CALLNAME)
52644: 
56556:           BEGIN_CASE(JSOP_EVAL)
56775:           {
56775:             JaegerSpew(JSpew_Insns, " --- EVAL --- \n");
56775:             emitEval(GET_ARGC(PC));
56775:             JaegerSpew(JSpew_Insns, " --- END EVAL --- \n");
56775:           }
56556:           END_CASE(JSOP_EVAL)
56556: 
52645:           BEGIN_CASE(JSOP_CALL)
57712:           BEGIN_CASE(JSOP_FUNAPPLY)
57712:           BEGIN_CASE(JSOP_FUNCALL)
52645:           {
75845:             bool done = false;
75845:             if (op == JSOP_CALL) {
75845:                 CompileStatus status = inlineNativeFunction(GET_ARGC(PC), false);
75845:                 if (status == Compile_Okay)
75845:                     done = true;
75845:                 else if (status != Compile_Abort)
75845:                     return status;
75845:             }
75845:             if (!done) {
52648:                 JaegerSpew(JSpew_Insns, " --- SCRIPTED CALL --- \n");
52850:                 inlineCallHelper(GET_ARGC(PC), false);
52648:                 JaegerSpew(JSpew_Insns, " --- END SCRIPTED CALL --- \n");
52645:             }
75845:           }
52645:           END_CASE(JSOP_CALL)
52645: 
52615:           BEGIN_CASE(JSOP_NAME)
75790:             jsop_name(script->getAtom(fullAtomIndex(PC)), knownPushedType(0));
52615:           END_CASE(JSOP_NAME)
52615: 
52605:           BEGIN_CASE(JSOP_DOUBLE)
52605:           {
52605:             uint32 index = fullAtomIndex(PC);
53081:             double d = script->getConst(index).toDouble();
75790:             frame.push(Value(DoubleValue(d)));
52605:           }
52605:           END_CASE(JSOP_DOUBLE)
52605: 
52653:           BEGIN_CASE(JSOP_STRING)
52653:           {
52653:             JSAtom *atom = script->getAtom(fullAtomIndex(PC));
52653:             JSString *str = ATOM_TO_STRING(atom);
75790:             frame.push(Value(StringValue(str)));
52653:           }
52653:           END_CASE(JSOP_STRING)
52653: 
52560:           BEGIN_CASE(JSOP_ZERO)
75790:             frame.push(Valueify(JSVAL_ZERO));
52560:           END_CASE(JSOP_ZERO)
52560: 
52560:           BEGIN_CASE(JSOP_ONE)
75790:             frame.push(Valueify(JSVAL_ONE));
52560:           END_CASE(JSOP_ONE)
52560: 
52675:           BEGIN_CASE(JSOP_NULL)
75790:             frame.push(NullValue());
52675:           END_CASE(JSOP_NULL)
52675: 
52704:           BEGIN_CASE(JSOP_THIS)
52741:             jsop_this();
52704:           END_CASE(JSOP_THIS)
52704: 
52666:           BEGIN_CASE(JSOP_FALSE)
75790:             frame.push(Value(BooleanValue(false)));
52666:           END_CASE(JSOP_FALSE)
52666: 
52665:           BEGIN_CASE(JSOP_TRUE)
75790:             frame.push(Value(BooleanValue(true)));
52665:           END_CASE(JSOP_TRUE)
52665: 
52733:           BEGIN_CASE(JSOP_OR)
52733:           BEGIN_CASE(JSOP_AND)
75630:             fixDoubleTypes(Uses(0));
56766:             if (!jsop_andor(op, PC + GET_JUMP_OFFSET(PC)))
56766:                 return Compile_Error;
52733:           END_CASE(JSOP_AND)
52733: 
52794:           BEGIN_CASE(JSOP_TABLESWITCH)
75649:             /*
75649:              * Note: there is no need to syncForBranch for the various targets of
75649:              * switch statement.  The liveness analysis has already marked these as
75649:              * allocated with no registers in use.
75649:              */
75630:             fixDoubleTypes(Uses(1));
59979: #if defined JS_CPU_ARM /* Need to implement jump(BaseIndex) for ARM */
54719:             frame.syncAndForgetEverything();
52794:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53338: 
54719:             /* prepareStubCall() is not needed due to syncAndForgetEverything() */
57766:             INLINE_STUBCALL(stubs::TableSwitch);
53338:             frame.pop();
53338: 
52794:             masm.jump(Registers::ReturnReg);
59979: #else
61233:             if (!jsop_tableswitch(PC))
61233:                 return Compile_Error;
59979: #endif
52794:             PC += js_GetVariableBytecodeLength(PC);
52794:             break;
52794:           END_CASE(JSOP_TABLESWITCH)
52794: 
52793:           BEGIN_CASE(JSOP_LOOKUPSWITCH)
75630:             fixDoubleTypes(Uses(1));
54719:             frame.syncAndForgetEverything();
52793:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53338: 
54719:             /* prepareStubCall() is not needed due to syncAndForgetEverything() */
57766:             INLINE_STUBCALL(stubs::LookupSwitch);
53338:             frame.pop();
53338: 
52793:             masm.jump(Registers::ReturnReg);
52793:             PC += js_GetVariableBytecodeLength(PC);
52793:             break;
52793:           END_CASE(JSOP_LOOKUPSWITCH)
52793: 
64230:           BEGIN_CASE(JSOP_CASE)
64230:             // X Y
64230: 
64230:             frame.dupAt(-2);
64230:             // X Y X
64230: 
64230:             jsop_stricteq(JSOP_STRICTEQ);
64230:             // X cond
64230: 
64230:             if (!jsop_ifneq(JSOP_IFNE, PC + GET_JUMP_OFFSET(PC)))
64230:                 return Compile_Error;
64230:           END_CASE(JSOP_CASE)
64230: 
52739:           BEGIN_CASE(JSOP_STRICTEQ)
52855:             jsop_stricteq(op);
52739:           END_CASE(JSOP_STRICTEQ)
52739: 
52739:           BEGIN_CASE(JSOP_STRICTNE)
52855:             jsop_stricteq(op);
52739:           END_CASE(JSOP_STRICTNE)
52739: 
52736:           BEGIN_CASE(JSOP_ITER)
61055:             if (!iter(PC[1]))
61055:                 return Compile_Error;
52736:           END_CASE(JSOP_ITER)
52736: 
52737:           BEGIN_CASE(JSOP_MOREITER)
61055:             /* At the byte level, this is always fused with IFNE or IFNEX. */
61055:             if (!iterMore())
61055:                 return Compile_Error;
60785:             break;
52737:           END_CASE(JSOP_MOREITER)
52737: 
52737:           BEGIN_CASE(JSOP_ENDITER)
53404:             iterEnd();
52737:           END_CASE(JSOP_ENDITER)
52737: 
52575:           BEGIN_CASE(JSOP_POP)
52575:             frame.pop();
52575:           END_CASE(JSOP_POP)
52575: 
52697:           BEGIN_CASE(JSOP_NEW)
52697:           {
52697:             JaegerSpew(JSpew_Insns, " --- NEW OPERATOR --- \n");
52850:             inlineCallHelper(GET_ARGC(PC), true);
52697:             JaegerSpew(JSpew_Insns, " --- END NEW OPERATOR --- \n");
52697:           }
52697:           END_CASE(JSOP_NEW)
52697: 
52656:           BEGIN_CASE(JSOP_GETARG)
75845:           {
75845:             uint32 arg = GET_SLOTNO(PC);
75845:             frame.pushArg(arg, knownArgumentType(arg));
75845:           }
75845:           END_CASE(JSOP_GETARG)
75845: 
52678:           BEGIN_CASE(JSOP_CALLARG)
52656:           {
75631:             uint32 arg = GET_SLOTNO(PC);
75845:             if (JSObject *singleton = pushedSingleton(0))
75845:                 frame.push(ObjectValue(*singleton));
75845:             else
75790:                 frame.pushArg(arg, knownArgumentType(arg));
55712:             frame.push(UndefinedValue());
52656:           }
52656:           END_CASE(JSOP_GETARG)
52656: 
52825:           BEGIN_CASE(JSOP_BINDGNAME)
52826:             jsop_bindgname();
52825:           END_CASE(JSOP_BINDGNAME)
52825: 
52728:           BEGIN_CASE(JSOP_SETARG)
57787:           {
75708:             uint32 arg = GET_SLOTNO(PC);
57787:             jsbytecode *next = &PC[JSOP_SETLOCAL_LENGTH];
57787:             bool pop = JSOp(*next) == JSOP_POP && !analysis->jumpTarget(next);
75790:             frame.storeArg(arg, knownArgumentType(arg), pop);
57787:             if (pop) {
57787:                 frame.pop();
57787:                 PC += JSOP_SETARG_LENGTH + JSOP_POP_LENGTH;
57787:                 break;
57787:             }
57787:           }
52728:           END_CASE(JSOP_SETARG)
52728: 
52670:           BEGIN_CASE(JSOP_GETLOCAL)
52670:           {
52670:             uint32 slot = GET_SLOTNO(PC);
75790:             frame.pushLocal(slot, knownPushedType(0));
52670:           }
52670:           END_CASE(JSOP_GETLOCAL)
52670: 
52670:           BEGIN_CASE(JSOP_SETLOCAL)
54719:           {
75708:             uint32 slot = GET_SLOTNO(PC);
54719:             jsbytecode *next = &PC[JSOP_SETLOCAL_LENGTH];
56602:             bool pop = JSOp(*next) == JSOP_POP && !analysis->jumpTarget(next);
75790:             frame.storeLocal(slot, knownLocalType(slot), pop, true);
54719:             if (pop) {
54719:                 frame.pop();
54719:                 PC += JSOP_SETLOCAL_LENGTH + JSOP_POP_LENGTH;
54719:                 break;
54719:             }
54719:           }
54719:           END_CASE(JSOP_SETLOCAL)
54719: 
52786:           BEGIN_CASE(JSOP_SETLOCALPOP)
75631:           {
75708:             uint32 slot = GET_SLOTNO(PC);
75790:             frame.storeLocal(slot, knownLocalType(slot), true, true);
52786:             frame.pop();
75631:           }
54719:           END_CASE(JSOP_SETLOCALPOP)
52670: 
52575:           BEGIN_CASE(JSOP_UINT16)
53081:             frame.push(Value(Int32Value((int32_t) GET_UINT16(PC))));
52575:           END_CASE(JSOP_UINT16)
52575: 
52719:           BEGIN_CASE(JSOP_NEWINIT)
75720:             if (!jsop_newinit())
75720:                 return Compile_Error;
52719:           END_CASE(JSOP_NEWINIT)
52719: 
58056:           BEGIN_CASE(JSOP_NEWARRAY)
75720:             if (!jsop_newinit())
75720:                 return Compile_Error;
58056:           END_CASE(JSOP_NEWARRAY)
58056: 
58056:           BEGIN_CASE(JSOP_NEWOBJECT)
75720:             if (!jsop_newinit())
75720:                 return Compile_Error;
58056:           END_CASE(JSOP_NEWOBJECT)
58056: 
52719:           BEGIN_CASE(JSOP_ENDINIT)
52719:           END_CASE(JSOP_ENDINIT)
52719: 
58056:           BEGIN_CASE(JSOP_INITMETHOD)
58056:             jsop_initmethod();
58056:             frame.pop();
58056:           END_CASE(JSOP_INITMETHOD)
58056: 
52735:           BEGIN_CASE(JSOP_INITPROP)
58056:             jsop_initprop();
52735:             frame.pop();
52735:           END_CASE(JSOP_INITPROP)
52735: 
52723:           BEGIN_CASE(JSOP_INITELEM)
58056:             jsop_initelem();
52723:             frame.popn(2);
52723:           END_CASE(JSOP_INITELEM)
52723: 
52804:           BEGIN_CASE(JSOP_INCARG)
52804:           BEGIN_CASE(JSOP_DECARG)
52804:           BEGIN_CASE(JSOP_ARGINC)
52804:           BEGIN_CASE(JSOP_ARGDEC)
52804:           {
52804:             jsbytecode *next = &PC[JSOP_ARGINC_LENGTH];
52804:             bool popped = false;
56602:             if (JSOp(*next) == JSOP_POP && !analysis->jumpTarget(next))
52804:                 popped = true;
75668:             if (!jsop_arginc(op, GET_SLOTNO(PC), popped))
75668:                 return Compile_Overflow;
52804:             PC += JSOP_ARGINC_LENGTH;
52804:             if (popped)
52804:                 PC += JSOP_POP_LENGTH;
52804:             break;
52804:           }
52804:           END_CASE(JSOP_ARGDEC)
52804: 
52808:           BEGIN_CASE(JSOP_INCLOCAL)
52808:           BEGIN_CASE(JSOP_DECLOCAL)
52808:           BEGIN_CASE(JSOP_LOCALINC)
52808:           BEGIN_CASE(JSOP_LOCALDEC)
52808:           {
52808:             jsbytecode *next = &PC[JSOP_LOCALINC_LENGTH];
52808:             bool popped = false;
56602:             if (JSOp(*next) == JSOP_POP && !analysis->jumpTarget(next))
52808:                 popped = true;
52808:             /* These manually advance the PC. */
75668:             if (!jsop_localinc(op, GET_SLOTNO(PC), popped))
75668:                 return Compile_Overflow;
52808:             PC += JSOP_LOCALINC_LENGTH;
52808:             if (popped)
52808:                 PC += JSOP_POP_LENGTH;
52808:             break;
52808:           }
52808:           END_CASE(JSOP_LOCALDEC)
52808: 
56586:           BEGIN_CASE(JSOP_FORNAME)
60526:             jsop_forname(script->getAtom(fullAtomIndex(PC)));
60526:           END_CASE(JSOP_FORNAME)
60526: 
60526:           BEGIN_CASE(JSOP_FORGNAME)
60526:             jsop_forgname(script->getAtom(fullAtomIndex(PC)));
60526:           END_CASE(JSOP_FORGNAME)
56586: 
56586:           BEGIN_CASE(JSOP_FORPROP)
60526:             jsop_forprop(script->getAtom(fullAtomIndex(PC)));
56586:           END_CASE(JSOP_FORPROP)
56586: 
56586:           BEGIN_CASE(JSOP_FORELEM)
56586:             // This opcode is for the decompiler; it is succeeded by an
56586:             // ENUMELEM, which performs the actual array store.
56586:             iterNext();
56586:           END_CASE(JSOP_FORELEM)
56586: 
52560:           BEGIN_CASE(JSOP_BINDNAME)
60526:             jsop_bindname(script->getAtom(fullAtomIndex(PC)), true);
52560:           END_CASE(JSOP_BINDNAME)
52560: 
52886:           BEGIN_CASE(JSOP_SETPROP)
56201:             if (!jsop_setprop(script->getAtom(fullAtomIndex(PC)), true))
56037:                 return Compile_Error;
52886:           END_CASE(JSOP_SETPROP)
52886: 
52611:           BEGIN_CASE(JSOP_SETNAME)
52747:           BEGIN_CASE(JSOP_SETMETHOD)
56201:             if (!jsop_setprop(script->getAtom(fullAtomIndex(PC)), true))
56037:                 return Compile_Error;
52611:           END_CASE(JSOP_SETNAME)
52611: 
52772:           BEGIN_CASE(JSOP_THROW)
53087:             prepareStubCall(Uses(1));
57766:             INLINE_STUBCALL(stubs::Throw);
52772:             frame.pop();
52772:           END_CASE(JSOP_THROW)
52772: 
54413:           BEGIN_CASE(JSOP_IN)
54413:             prepareStubCall(Uses(2));
57766:             INLINE_STUBCALL(stubs::In);
54413:             frame.popn(2);
54413:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
54413:           END_CASE(JSOP_IN)
54413: 
52780:           BEGIN_CASE(JSOP_INSTANCEOF)
56037:             if (!jsop_instanceof())
56037:                 return Compile_Error;
52780:           END_CASE(JSOP_INSTANCEOF)
52780: 
52786:           BEGIN_CASE(JSOP_EXCEPTION)
60211:             prepareStubCall(Uses(0));
60211:             INLINE_STUBCALL(stubs::Exception);
75716:             frame.pushSynced(JSVAL_TYPE_UNKNOWN);
52786:           END_CASE(JSOP_EXCEPTION)
52786: 
52768:           BEGIN_CASE(JSOP_LINENO)
52768:           END_CASE(JSOP_LINENO)
52768: 
56586:           BEGIN_CASE(JSOP_ENUMELEM)
56586:             // Normally, SETELEM transforms the stack
56586:             //  from: OBJ ID VALUE
56586:             //  to:   VALUE
56586:             //
56586:             // Here, the stack transition is
56586:             //  from: VALUE OBJ ID
56586:             //  to:
56586:             // So we make the stack look like a SETELEM, and re-use it.
56586: 
56586:             // Before: VALUE OBJ ID
56586:             // After:  VALUE OBJ ID VALUE
56586:             frame.dupAt(-3);
56586: 
56586:             // Before: VALUE OBJ ID VALUE
56586:             // After:  VALUE VALUE
60164:             if (!jsop_setelem(true))
57671:                 return Compile_Error;
56586: 
56586:             // Before: VALUE VALUE
56586:             // After:
56586:             frame.popn(2);
56586:           END_CASE(JSOP_ENUMELEM)
56586: 
54855:           BEGIN_CASE(JSOP_BLOCKCHAIN)
54855:           END_CASE(JSOP_BLOCKCHAIN)
54855: 
54855:           BEGIN_CASE(JSOP_NULLBLOCKCHAIN)
54855:           END_CASE(JSOP_NULLBLOCKCHAIN)
54855: 
54415:           BEGIN_CASE(JSOP_CONDSWITCH)
54415:             /* No-op for the decompiler. */
54415:           END_CASE(JSOP_CONDSWITCH)
54415: 
52647:           BEGIN_CASE(JSOP_DEFFUN)
53591:           {
53591:             uint32 index = fullAtomIndex(PC);
59968:             JSFunction *innerFun = script->getFunction(index);
59968: 
59992:             if (fun && script->bindings.hasBinding(cx, innerFun->atom))
54719:                 frame.syncAndForgetEverything();
53591: 
53087:             prepareStubCall(Uses(0));
59968:             masm.move(ImmPtr(innerFun), Registers::ArgReg1);
57766:             INLINE_STUBCALL(STRICT_VARIANT(stubs::DefFun));
53591:           }
52647:           END_CASE(JSOP_DEFFUN)
52647: 
54408:           BEGIN_CASE(JSOP_DEFVAR)
57795:           BEGIN_CASE(JSOP_DEFCONST)
54408:           {
54408:             uint32 index = fullAtomIndex(PC);
54408:             JSAtom *atom = script->getAtom(index);
54408: 
54408:             prepareStubCall(Uses(0));
54408:             masm.move(ImmPtr(atom), Registers::ArgReg1);
57795:             INLINE_STUBCALL(stubs::DefVarOrConst);
54408:           }
54408:           END_CASE(JSOP_DEFVAR)
54408: 
57795:           BEGIN_CASE(JSOP_SETCONST)
57795:           {
57795:             uint32 index = fullAtomIndex(PC);
57795:             JSAtom *atom = script->getAtom(index);
57795: 
59992:             if (fun && script->bindings.hasBinding(cx, atom))
57795:                 frame.syncAndForgetEverything();
57795: 
57795:             prepareStubCall(Uses(1));
57795:             masm.move(ImmPtr(atom), Registers::ArgReg1);
57795:             INLINE_STUBCALL(stubs::SetConst);
57795:           }
57795:           END_CASE(JSOP_SETCONST)
57795: 
53038:           BEGIN_CASE(JSOP_DEFLOCALFUN_FC)
53038:           {
53038:             uint32 slot = GET_SLOTNO(PC);
53038:             JSFunction *fun = script->getFunction(fullAtomIndex(&PC[SLOTNO_LEN]));
57787:             prepareStubCall(Uses(frame.frameSlots()));
53038:             masm.move(ImmPtr(fun), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::DefLocalFun_FC);
53038:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
75790:             frame.storeLocal(slot, JSVAL_TYPE_OBJECT, true);
53038:             frame.pop();
53038:           }
53340:           END_CASE(JSOP_DEFLOCALFUN_FC)
53038: 
52730:           BEGIN_CASE(JSOP_LAMBDA)
52730:           {
52730:             JSFunction *fun = script->getFunction(fullAtomIndex(PC));
53249: 
53249:             JSObjStubFun stub = stubs::Lambda;
53249:             uint32 uses = 0;
53249: 
57755:             jsbytecode *pc2 = AdvanceOverBlockchainOp(PC + JSOP_LAMBDA_LENGTH);
54855:             JSOp next = JSOp(*pc2);
54855:             
53249:             if (next == JSOP_INITMETHOD) {
53249:                 stub = stubs::LambdaForInit;
53249:             } else if (next == JSOP_SETMETHOD) {
53249:                 stub = stubs::LambdaForSet;
53249:                 uses = 1;
53249:             } else if (fun->joinable()) {
53249:                 if (next == JSOP_CALL) {
53249:                     stub = stubs::LambdaJoinableForCall;
57787:                     uses = frame.frameSlots();
53249:                 } else if (next == JSOP_NULL) {
53249:                     stub = stubs::LambdaJoinableForNull;
53249:                 }
53249:             }
53249: 
53249:             prepareStubCall(Uses(uses));
52730:             masm.move(ImmPtr(fun), Registers::ArgReg1);
53128: 
54855:             if (stub == stubs::Lambda) {
57766:                 INLINE_STUBCALL(stub);
54855:             } else {
54855:                 jsbytecode *savedPC = PC;
54855:                 PC = pc2;
57766:                 INLINE_STUBCALL(stub);
54855:                 PC = savedPC;
54855:             }
53249: 
52730:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52730:           }
52730:           END_CASE(JSOP_LAMBDA)
52730: 
52774:           BEGIN_CASE(JSOP_TRY)
54719:             frame.syncAndForgetEverything();
52774:           END_CASE(JSOP_TRY)
52774: 
53531:           BEGIN_CASE(JSOP_GETFCSLOT)
53531:           BEGIN_CASE(JSOP_CALLFCSLOT)
52716:           {
53531:             uintN index = GET_UINT16(PC);
57787: 
57787:             // Load the callee's payload into a register.
57787:             frame.pushCallee();
57787:             RegisterID reg = frame.copyDataIntoReg(frame.peek(-1));
57787:             frame.pop();
57787: 
53531:             // obj->getFlatClosureUpvars()
55746:             masm.loadPtr(Address(reg, offsetof(JSObject, slots)), reg);
55746:             Address upvarAddress(reg, JSObject::JSSLOT_FLAT_CLOSURE_UPVARS * sizeof(Value));
53531:             masm.loadPrivate(upvarAddress, reg);
53531:             // push ((Value *) reg)[index]
52716:             frame.freeReg(reg);
75790:             frame.push(Address(reg, index * sizeof(Value)), knownPushedType(0));
53531:             if (op == JSOP_CALLFCSLOT)
55712:                 frame.push(UndefinedValue());
52716:           }
53531:           END_CASE(JSOP_CALLFCSLOT)
52716: 
53037:           BEGIN_CASE(JSOP_ARGSUB)
53087:             prepareStubCall(Uses(0));
53037:             masm.move(Imm32(GET_ARGNO(PC)), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::ArgSub);
75708:             pushSyncedEntry(0);
53037:           END_CASE(JSOP_ARGSUB)
53037: 
52781:           BEGIN_CASE(JSOP_ARGCNT)
53087:             prepareStubCall(Uses(0));
57766:             INLINE_STUBCALL(stubs::ArgCnt);
75708:             pushSyncedEntry(0);
52781:           END_CASE(JSOP_ARGCNT)
52781: 
52727:           BEGIN_CASE(JSOP_DEFLOCALFUN)
52727:           {
52727:             uint32 slot = GET_SLOTNO(PC);
52727:             JSFunction *fun = script->getFunction(fullAtomIndex(&PC[SLOTNO_LEN]));
53087:             prepareStubCall(Uses(0));
52727:             masm.move(ImmPtr(fun), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::DefLocalFun);
52727:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
75790:             frame.storeLocal(slot, JSVAL_TYPE_OBJECT, true);
52727:             frame.pop();
52727:           }
52727:           END_CASE(JSOP_DEFLOCALFUN)
52727: 
52806:           BEGIN_CASE(JSOP_RETRVAL)
54832:             emitReturn(NULL);
52806:           END_CASE(JSOP_RETRVAL)
52806: 
52825:           BEGIN_CASE(JSOP_GETGNAME)
52825:           BEGIN_CASE(JSOP_CALLGNAME)
75790:             jsop_getgname(fullAtomIndex(PC), knownPushedType(0));
52825:             if (op == JSOP_CALLGNAME)
63236:                 jsop_callgname_epilogue();
52825:           END_CASE(JSOP_GETGNAME)
52825: 
52825:           BEGIN_CASE(JSOP_SETGNAME)
60526:             jsop_setgname(script->getAtom(fullAtomIndex(PC)), true);
52825:           END_CASE(JSOP_SETGNAME)
52825: 
52729:           BEGIN_CASE(JSOP_REGEXP)
52729:           {
52729:             JSObject *regex = script->getRegExp(fullAtomIndex(PC));
53087:             prepareStubCall(Uses(0));
52729:             masm.move(ImmPtr(regex), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::RegExp);
52729:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52729:           }
52729:           END_CASE(JSOP_REGEXP)
52729: 
59962:           BEGIN_CASE(JSOP_OBJECT)
59962:           {
59962:             JSObject *object = script->getObject(fullAtomIndex(PC));
59962:             RegisterID reg = frame.allocReg();
59962:             masm.move(ImmPtr(object), reg);
59962:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, reg);
59962:           }
59962:           END_CASE(JSOP_OBJECT)
59962: 
52761:           BEGIN_CASE(JSOP_CALLPROP)
52903:             if (!jsop_callprop(script->getAtom(fullAtomIndex(PC))))
52903:                 return Compile_Error;
52761:           END_CASE(JSOP_CALLPROP)
52761: 
52575:           BEGIN_CASE(JSOP_UINT24)
53081:             frame.push(Value(Int32Value((int32_t) GET_UINT24(PC))));
52575:           END_CASE(JSOP_UINT24)
52575: 
52771:           BEGIN_CASE(JSOP_CALLELEM)
57723:             jsop_getelem(true);
52771:           END_CASE(JSOP_CALLELEM)
52771: 
52560:           BEGIN_CASE(JSOP_STOP)
54832:             emitReturn(NULL);
52560:             goto done;
52560:           END_CASE(JSOP_STOP)
52560: 
54847:           BEGIN_CASE(JSOP_GETXPROP)
56037:             if (!jsop_xname(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
54847:           END_CASE(JSOP_GETXPROP)
54847: 
52785:           BEGIN_CASE(JSOP_ENTERBLOCK)
54840:             enterBlock(script->getObject(fullAtomIndex(PC)));
54840:           END_CASE(JSOP_ENTERBLOCK);
52785: 
52785:           BEGIN_CASE(JSOP_LEAVEBLOCK)
54840:             leaveBlock();
52785:           END_CASE(JSOP_LEAVEBLOCK)
52785: 
52742:           BEGIN_CASE(JSOP_CALLLOCAL)
75708:           {
75708:             uint32 slot = GET_SLOTNO(PC);
75845:             if (JSObject *singleton = pushedSingleton(0))
75845:                 frame.push(ObjectValue(*singleton));
75845:             else
75790:                 frame.pushLocal(slot, knownPushedType(0));
55712:             frame.push(UndefinedValue());
75708:           }
52742:           END_CASE(JSOP_CALLLOCAL)
52742: 
52575:           BEGIN_CASE(JSOP_INT8)
53081:             frame.push(Value(Int32Value(GET_INT8(PC))));
52575:           END_CASE(JSOP_INT8)
52575: 
52575:           BEGIN_CASE(JSOP_INT32)
53081:             frame.push(Value(Int32Value(GET_INT32(PC))));
52575:           END_CASE(JSOP_INT32)
52575: 
54415:           BEGIN_CASE(JSOP_HOLE)
54415:             frame.push(MagicValue(JS_ARRAY_HOLE));
54415:           END_CASE(JSOP_HOLE)
54415: 
52775:           BEGIN_CASE(JSOP_LAMBDA_FC)
52775:           {
52775:             JSFunction *fun = script->getFunction(fullAtomIndex(PC));
57787:             prepareStubCall(Uses(frame.frameSlots()));
52775:             masm.move(ImmPtr(fun), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::FlatLambda);
52775:             frame.takeReg(Registers::ReturnReg);
75790:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52775:           }
52775:           END_CASE(JSOP_LAMBDA_FC)
52775: 
52617:           BEGIN_CASE(JSOP_TRACE)
56217:           BEGIN_CASE(JSOP_NOTRACE)
52753:           {
56602:             if (analysis->jumpTarget(PC))
53223:                 interruptCheckHelper();
52753:           }
52617:           END_CASE(JSOP_TRACE)
52617: 
53395:           BEGIN_CASE(JSOP_DEBUGGER)
53395:             prepareStubCall(Uses(0));
53396:             masm.move(ImmPtr(PC), Registers::ArgReg1);
57766:             INLINE_STUBCALL(stubs::Debugger);
53395:           END_CASE(JSOP_DEBUGGER)
53395: 
52874:           BEGIN_CASE(JSOP_UNBRAND)
52874:             jsop_unbrand();
52874:           END_CASE(JSOP_UNBRAND)
52874: 
52874:           BEGIN_CASE(JSOP_UNBRANDTHIS)
52874:             jsop_this();
52874:             jsop_unbrand();
52875:             frame.pop();
52874:           END_CASE(JSOP_UNBRANDTHIS)
52874: 
52560:           BEGIN_CASE(JSOP_GETGLOBAL)
75846:           BEGIN_CASE(JSOP_CALLGLOBAL)
75845:             jsop_getglobal(GET_SLOTNO(PC));
75846:             if (op == JSOP_CALLGLOBAL)
55712:                 frame.push(UndefinedValue());
52560:           END_CASE(JSOP_GETGLOBAL)
52560: 
52558:           default:
52558:            /* Sorry, this opcode isn't implemented yet. */
52558: #ifdef JS_METHODJIT_SPEW
52825:             JaegerSpew(JSpew_Abort, "opcode %s not handled yet (%s line %d)\n", OpcodeNames[op],
52825:                        script->filename, js_PCToLineNumber(cx, script, PC));
52558: #endif
52558:             return Compile_Abort;
52558:         }
52560: 
52560:     /**********************
52560:      *  END COMPILER OPS  *
52560:      **********************/ 
52578: 
75790:         if (cx->typeInferenceEnabled()) {
75790:             /* Inform the frame of the type sets for values just pushed. */
75790:             unsigned nuses = analyze::GetUseCount(script, oldPC - script->code);
75790:             unsigned ndefs = analyze::GetDefCount(script, oldPC - script->code);
75790:             for (unsigned i = 0; i < ndefs; i++) {
75790:                 frame.learnTypeSet(opinfo->stackDepth - nuses + i,
75790:                                    script->types->pushed(oldPC - script->code, i));
75790:             }
75790:         }
75790: 
52618: #ifdef DEBUG
52578:         frame.assertValidRegisterState();
52618: #endif
52558:     }
52558: 
52560:   done:
52558:     return Compile_Okay;
52558: }
52558: 
52560: #undef END_CASE
52560: #undef BEGIN_CASE
52560: 
52653: JSC::MacroAssembler::Label
52599: mjit::Compiler::labelOf(jsbytecode *pc)
52599: {
52599:     uint32 offs = uint32(pc - script->code);
52599:     JS_ASSERT(jumpMap[offs].isValid());
52599:     return jumpMap[offs];
52599: }
52599: 
52560: uint32
52560: mjit::Compiler::fullAtomIndex(jsbytecode *pc)
52560: {
52560:     return GET_SLOTNO(pc);
52560: 
52560:     /* If we ever enable INDEXBASE garbage, use this below. */
52560: #if 0
52560:     return GET_SLOTNO(pc) + (atoms - script->atomMap.vector);
52560: #endif
52560: }
52560: 
52653: bool
52653: mjit::Compiler::knownJump(jsbytecode *pc)
52653: {
52653:     return pc < PC;
52653: }
52653: 
53168: void *
53168: mjit::Compiler::findCallSite(const CallSite &callSite)
53168: {
53498:     JS_ASSERT(callSite.pcOffset < script->length);
53168: 
55503:     JITScript *jit = script->getJIT(fp->isConstructing());
55503:     uint8* ilPath = (uint8 *)jit->code.m_code.executableAddress();
55503:     uint8* oolPath = ilPath + masm.size();
55503: 
53168:     for (uint32 i = 0; i < callSites.length(); i++) {
57766:         InternalCallSite &cs = callSites[i];
57766:         if (cs.pc == script->code + callSite.pcOffset && cs.id == callSite.id) {
75778: #ifdef DEBUG
75778:             for (i++; i < callSites.length(); i++)
75778:                 JS_ASSERT(cs.pc != callSites[i].pc || cs.id != callSites[i].id);
75778: #endif
57766:             if (cs.ool)
57766:                 return oolPath + cs.returnOffset;
57766:             return ilPath + cs.returnOffset;
53168:         }
53168:     }
53168: 
53168:     /* We have no idea where to patch up to. */
53168:     JS_NOT_REACHED("Call site vanished.");
53168:     return NULL;
53168: }
53168: 
56766: bool
52599: mjit::Compiler::jumpInScript(Jump j, jsbytecode *pc)
52599: {
52599:     JS_ASSERT(pc >= script->code && uint32(pc - script->code) < script->length);
52599: 
56766:     if (pc < PC) {
52599:         j.linkTo(jumpMap[uint32(pc - script->code)], &masm);
56766:         return true;
56766:     }
56766:     return branchPatches.append(BranchPatch(j, pc));
52599: }
52599: 
52560: void
52560: mjit::Compiler::jsop_getglobal(uint32 index)
52560: {
52560:     JS_ASSERT(globalObj);
52560:     uint32 slot = script->getGlobalSlot(index);
52560: 
75846:     JSObject *singleton = pushedSingleton(0);
75846:     if (singleton && !globalObj->getSlot(slot).isUndefined()) {
75846:         frame.push(ObjectValue(*singleton));
75846:         return;
75846:     }
75846: 
52560:     RegisterID reg = frame.allocReg();
52622:     Address address = masm.objSlotRef(globalObj, reg, slot);
75790:     frame.push(address, knownPushedType(0));
52560:     frame.freeReg(reg);
75635: 
75635:     /*
75635:      * If the global is currently undefined, it might still be undefined at the point
75635:      * of this access, which type inference will not account for. Insert a check.
75635:      */
75635:     if (globalObj->getSlot(slot).isUndefined() &&
75635:         (JSOp(*PC) == JSOP_CALLGLOBAL || PC[JSOP_GETGLOBAL_LENGTH] != JSOP_POP)) {
75635:         Jump jump = masm.testUndefined(Assembler::Equal, address);
75635:         stubcc.linkExit(jump, Uses(0));
75635:         stubcc.leave();
75635:         OOL_STUBCALL(stubs::UndefinedHelper);
75846:         stubcc.rejoin(Changes(1));
75635:     }
52560: }
52560: 
52560: void
54832: mjit::Compiler::emitFinalReturn(Assembler &masm)
52560: {
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfncode()), Registers::ReturnReg);
54832:     masm.jump(Registers::ReturnReg);
54832: }
54832: 
55503: // Emits code to load a return value of the frame into the scripted-ABI
55503: // type & data register pair. If the return value is in fp->rval, then |fe|
55503: // is NULL. Otherwise, |fe| contains the return value.
55503: //
55503: // If reading from fp->rval, |undefined| is loaded optimistically, before
55503: // checking if fp->rval is set in the frame flags and loading that instead.
55503: //
55503: // Otherwise, if |masm| is the inline path, it is loaded as efficiently as
55503: // the FrameState can manage. If |masm| is the OOL path, the value is simply
55503: // loaded from its slot in the frame, since the caller has guaranteed it's
55503: // been synced.
55503: //
54832: void
55503: mjit::Compiler::loadReturnValue(Assembler *masm, FrameEntry *fe)
54427: {
55503:     RegisterID typeReg = JSReturnReg_Type;
55503:     RegisterID dataReg = JSReturnReg_Data;
55503: 
55503:     if (fe) {
55503:         // If using the OOL assembler, the caller signifies that the |fe| is
55503:         // synced, but not to rely on its register state.
55503:         if (masm != &this->masm) {
55503:             if (fe->isConstant()) {
55503:                 stubcc.masm.loadValueAsComponents(fe->getValue(), typeReg, dataReg);
55503:             } else {
55503:                 Address rval(frame.addressOf(fe));
75630:                 if (fe->isTypeKnown() && !fe->isType(JSVAL_TYPE_DOUBLE)) {
55503:                     stubcc.masm.loadPayload(rval, dataReg);
55503:                     stubcc.masm.move(ImmType(fe->getKnownType()), typeReg);
55503:                 } else {
55503:                     stubcc.masm.loadValueAsComponents(rval, typeReg, dataReg);
55503:                 }
55503:             }
55503:         } else {
56572:             frame.loadForReturn(fe, typeReg, dataReg, Registers::ReturnReg);
55503:         }
55503:     } else {
55503:          // Load a return value from POPV or SETRVAL into the return registers,
55503:          // otherwise return undefined.
55503:         masm->loadValueAsComponents(UndefinedValue(), typeReg, dataReg);
56602:         if (analysis->usesReturnValue()) {
55503:             Jump rvalClear = masm->branchTest32(Assembler::Zero,
55503:                                                FrameFlagsAddress(),
55503:                                                Imm32(JSFRAME_HAS_RVAL));
55490:             Address rvalAddress(JSFrameReg, JSStackFrame::offsetOfReturnValue());
55503:             masm->loadValueAsComponents(rvalAddress, typeReg, dataReg);
55503:             rvalClear.linkTo(masm->label(), masm);
55487:         }
55487:     }
55503: }
55503: 
55503: // This ensures that constructor return values are an object. If a non-object
55503: // is returned, either explicitly or implicitly, the newly created object is
55503: // loaded out of the frame. Otherwise, the explicitly returned object is kept.
55503: //
55503: void
55503: mjit::Compiler::fixPrimitiveReturn(Assembler *masm, FrameEntry *fe)
55503: {
55503:     JS_ASSERT(isConstructing);
55503: 
57787:     bool ool = (masm != &this->masm);
55503:     Address thisv(JSFrameReg, JSStackFrame::offsetOfThis(fun));
55503: 
58700:     // We can just load |thisv| if either of the following is true:
58700:     //  (1) There is no explicit return value, AND fp->rval is not used.
58700:     //  (2) There is an explicit return value, and it's known to be primitive.
58700:     if ((!fe && !analysis->usesReturnValue()) ||
58700:         (fe && fe->isTypeKnown() && fe->getKnownType() != JSVAL_TYPE_OBJECT))
58700:     {
57787:         if (ool)
55503:             masm->loadValueAsComponents(thisv, JSReturnReg_Type, JSReturnReg_Data);
57787:         else
57787:             frame.loadThisForReturn(JSReturnReg_Type, JSReturnReg_Data, Registers::ReturnReg);
55503:         return;
55503:     }
55503: 
55503:     // If the type is known to be an object, just load the return value as normal.
58700:     if (fe && fe->isTypeKnown() && fe->getKnownType() == JSVAL_TYPE_OBJECT) {
55503:         loadReturnValue(masm, fe);
55503:         return;
55503:     }
55503: 
55503:     // There's a return value, and its type is unknown. Test the type and load
55503:     // |thisv| if necessary.
55503:     loadReturnValue(masm, fe);
55503:     Jump j = masm->testObject(Assembler::Equal, JSReturnReg_Type);
55503:     masm->loadValueAsComponents(thisv, JSReturnReg_Type, JSReturnReg_Data);
55503:     j.linkTo(masm->label(), masm);
55503: }
55503: 
55503: // Loads the return value into the scripted ABI register pair, such that JS
55503: // semantics in constructors are preserved.
55503: //
55503: void
55503: mjit::Compiler::emitReturnValue(Assembler *masm, FrameEntry *fe)
55503: {
55503:     if (isConstructing)
55503:         fixPrimitiveReturn(masm, fe);
55503:     else
55503:         loadReturnValue(masm, fe);
55503: }
54832: 
54832: void
54832: mjit::Compiler::emitReturn(FrameEntry *fe)
54832: {
52847:     JS_ASSERT_IF(!fun, JSOp(*PC) == JSOP_STOP);
52847: 
54832:     /* Only the top of the stack can be returned. */
54832:     JS_ASSERT_IF(fe, fe == frame.peek(-1));
54832: 
57766:     if (debugMode() || Probes::callTrackingActive(cx)) {
56201:         prepareStubCall(Uses(0));
57766:         INLINE_STUBCALL(stubs::LeaveScript);
56201:     }
56201: 
52847:     /*
52847:      * If there's a function object, deal with the fact that it can escape.
52847:      * Note that after we've placed the call object, all tracked state can
52847:      * be thrown away. This will happen anyway because the next live opcode
52847:      * (if any) must have an incoming edge.
52847:      *
52847:      * However, it's an optimization to throw it away early - the tracker
52847:      * won't be spilled on further exits or join points.
52847:      */
52847:     if (fun) {
52847:         if (fun->isHeavyweight()) {
52847:             /* There will always be a call object. */
54832:             prepareStubCall(Uses(fe ? 1 : 0));
57766:             INLINE_STUBCALL(stubs::PutActivationObjects);
52847:         } else {
53840:             /* if (hasCallObj() || hasArgsObj()) stubs::PutActivationObjects() */
53840:             Jump putObjs = masm.branchTest32(Assembler::NonZero,
53840:                                              Address(JSFrameReg, JSStackFrame::offsetOfFlags()),
53840:                                              Imm32(JSFRAME_HAS_CALL_OBJ | JSFRAME_HAS_ARGS_OBJ));
57787:             stubcc.linkExit(putObjs, Uses(frame.frameSlots()));
52847: 
52847:             stubcc.leave();
57766:             OOL_STUBCALL(stubs::PutActivationObjects);
54832: 
55503:             emitReturnValue(&stubcc.masm, fe);
54832:             emitFinalReturn(stubcc.masm);
54427:         }
60250:     } else {
60250:         if (fp->isEvalFrame() && script->strictModeCode) {
60250:             /* There will always be a call object. */
60250:             prepareStubCall(Uses(fe ? 1 : 0));
60250:             INLINE_STUBCALL(stubs::PutStrictEvalCallObject);
60250:         }
54832:     }
54832: 
55503:     emitReturnValue(&masm, fe);
54832:     emitFinalReturn(masm);
54832:     frame.discardFrame();
52560: }
52560: 
52611: void
53087: mjit::Compiler::prepareStubCall(Uses uses)
52611: {
52613:     JaegerSpew(JSpew_Insns, " ---- STUB CALL, SYNCING FRAME ---- \n");
75647:     frame.syncAndKill(Registers(Registers::TempAnyRegs), uses);
52611:     JaegerSpew(JSpew_Insns, " ---- FRAME SYNCING DONE ---- \n");
52611: }
52611: 
52611: JSC::MacroAssembler::Call
57766: mjit::Compiler::emitStubCall(void *ptr)
52611: {
52611:     JaegerSpew(JSpew_Insns, " ---- CALLING STUB ---- \n");
57766:     Call cl = masm.fallibleVMCall(ptr, PC, frame.stackDepth() + script->nfixed);
52613:     JaegerSpew(JSpew_Insns, " ---- END STUB CALL ---- \n");
52611:     return cl;
52611: }
52611: 
52645: void
53223: mjit::Compiler::interruptCheckHelper()
53223: {
56559:     /*
56559:      * Bake in and test the address of the interrupt counter for the runtime.
56559:      * This is faster than doing two additional loads for the context's
56559:      * thread data, but will cause this thread to run slower if there are
56559:      * pending interrupts on some other thread.  For non-JS_THREADSAFE builds
56559:      * we can skip this, as there is only one flag to poll.
56559:      */
53223: #ifdef JS_THREADSAFE
56559:     void *interrupt = (void*) &cx->runtime->interruptCounter;
53223: #else
56559:     void *interrupt = (void*) &JS_THREAD_DATA(cx)->interruptFlags;
53223: #endif
56559: 
56559: #if defined(JS_CPU_X86) || defined(JS_CPU_ARM)
56559:     Jump jump = masm.branch32(Assembler::NotEqual, AbsoluteAddress(interrupt), Imm32(0));
56559: #else
56559:     /* Handle processors that can't load from absolute addresses. */
75649:     RegisterID reg = frame.allocReg();
56559:     masm.move(ImmPtr(interrupt), reg);
56559:     Jump jump = masm.branchTest32(Assembler::NonZero, Address(reg, 0));
75649:     frame.freeReg(reg);
56559: #endif
56559: 
56559:     stubcc.linkExitDirect(jump, stubcc.masm.label());
56559: 
56559:     frame.sync(stubcc.masm, Uses(0));
53223:     stubcc.masm.move(ImmPtr(PC), Registers::ArgReg1);
57766:     OOL_STUBCALL(stubs::Interrupt);
53223:     stubcc.rejoin(Changes(0));
53223: }
53223: 
53223: void
75636: mjit::Compiler::addReturnSite(Label joinPoint)
57766: {
75636:     InternalCallSite site(masm.distanceOf(joinPoint), PC, CallSite::NCODE_RETURN_ID, false, false);
57766:     addCallSite(site);
57766: }
57766: 
57766: void
53590: mjit::Compiler::emitUncachedCall(uint32 argc, bool callingNew)
53590: {
54832:     CallPatchInfo callPatch;
54832: 
53590:     RegisterID r0 = Registers::ReturnReg;
53590:     VoidPtrStubUInt32 stub = callingNew ? stubs::UncachedNew : stubs::UncachedCall;
53590: 
75647:     frame.syncAndKill(Uses(argc + 2));
53590:     prepareStubCall(Uses(argc + 2));
53590:     masm.move(Imm32(argc), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stub);
53590: 
75712:     if (recompiling) {
75712:         /* In case we recompiled this call to an uncached call. */
75712:         OOL_STUBCALL(JS_FUNC_TO_DATA_PTR(void *, callingNew ? ic::New : ic::Call));
75712:         stubcc.crossJump(stubcc.masm.jump(), masm.label());
75712:     }
75712: 
53590:     Jump notCompiled = masm.branchTestPtr(Assembler::Zero, r0, r0);
54427: 
54832:     masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
57713:     callPatch.hasFastNcode = true;
54832:     callPatch.fastNcodePatch =
54832:         masm.storePtrWithPatch(ImmPtr(NULL),
54832:                                Address(JSFrameReg, JSStackFrame::offsetOfncode()));
54832: 
54832:     masm.jump(r0);
54832:     callPatch.joinPoint = masm.label();
75636:     addReturnSite(callPatch.joinPoint);
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfPrev()), JSFrameReg);
53590: 
52850:     frame.popn(argc + 2);
75622: 
52850:     frame.takeReg(JSReturnReg_Type);
52850:     frame.takeReg(JSReturnReg_Data);
75790:     frame.pushRegs(JSReturnReg_Type, JSReturnReg_Data, knownPushedType(0));
62574: 
75732:     if (recompiling) {
75732:         /* Native call case for recompilation. */
75732:         OOL_STUBCALL(JS_FUNC_TO_DATA_PTR(void *, callingNew ? ic::NativeNew : ic::NativeCall));
75732:     }
52850: 
54578:     stubcc.linkExitDirect(notCompiled, stubcc.masm.label());
75630:     stubcc.rejoin(Changes(1));
54832:     callPatches.append(callPatch);
53590: }
53590: 
57713: static bool
57717: IsLowerableFunCallOrApply(jsbytecode *pc)
57713: {
57713: #ifdef JS_MONOIC
57717:     return (*pc == JSOP_FUNCALL && GET_ARGC(pc) >= 1) ||
57717:            (*pc == JSOP_FUNAPPLY && GET_ARGC(pc) == 2);
57713: #else
57713:     return false;
57713: #endif
57713: }
57713: 
57713: void
57718: mjit::Compiler::checkCallApplySpeculation(uint32 callImmArgc, uint32 speculatedArgc,
57718:                                           FrameEntry *origCallee, FrameEntry *origThis,
57713:                                           MaybeRegisterID origCalleeType, RegisterID origCalleeData,
57713:                                           MaybeRegisterID origThisType, RegisterID origThisData,
57713:                                           Jump *uncachedCallSlowRejoin, CallPatchInfo *uncachedCallPatch)
57713: {
57717:     JS_ASSERT(IsLowerableFunCallOrApply(PC));
57713: 
57713:     /*
57713:      * if (origCallee.isObject() &&
57713:      *     origCallee.toObject().isFunction &&
57717:      *     origCallee.toObject().getFunctionPrivate() == js_fun_{call,apply})
57713:      */
57713:     MaybeJump isObj;
57713:     if (origCalleeType.isSet())
57713:         isObj = masm.testObject(Assembler::NotEqual, origCalleeType.reg());
57713:     Jump isFun = masm.testFunction(Assembler::NotEqual, origCalleeData);
60777:     masm.loadObjPrivate(origCalleeData, origCalleeData);
57717:     Native native = *PC == JSOP_FUNCALL ? js_fun_call : js_fun_apply;
57713:     Jump isNative = masm.branchPtr(Assembler::NotEqual,
57713:                                    Address(origCalleeData, JSFunction::offsetOfNativeOrScript()),
57717:                                    ImmPtr(JS_FUNC_TO_DATA_PTR(void *, native)));
57713: 
57713:     /*
57713:      * If speculation fails, we can't use the ic, since it is compiled on the
57713:      * assumption that speculation succeeds. Instead, just do an uncached call.
57713:      */
57713:     {
57713:         if (isObj.isSet())
57713:             stubcc.linkExitDirect(isObj.getJump(), stubcc.masm.label());
57713:         stubcc.linkExitDirect(isFun, stubcc.masm.label());
57713:         stubcc.linkExitDirect(isNative, stubcc.masm.label());
57713: 
57718:         int32 frameDepthAdjust;
57718:         if (applyTricks == LazyArgsObj) {
57766:             OOL_STUBCALL(stubs::Arguments);
57718:             frameDepthAdjust = +1;
57718:         } else {
57718:             frameDepthAdjust = 0;
57718:         }
57718: 
57718:         stubcc.masm.move(Imm32(callImmArgc), Registers::ArgReg1);
57718:         JaegerSpew(JSpew_Insns, " ---- BEGIN SLOW CALL CODE ---- \n");
57787:         OOL_STUBCALL_LOCAL_SLOTS(JS_FUNC_TO_DATA_PTR(void *, stubs::UncachedCall),
57787:                            frame.localSlots() + frameDepthAdjust);
57718:         JaegerSpew(JSpew_Insns, " ---- END SLOW CALL CODE ---- \n");
57713: 
57713:         RegisterID r0 = Registers::ReturnReg;
57713:         Jump notCompiled = stubcc.masm.branchTestPtr(Assembler::Zero, r0, r0);
57713: 
57713:         stubcc.masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
57713:         Address ncodeAddr(JSFrameReg, JSStackFrame::offsetOfncode());
57713:         uncachedCallPatch->hasSlowNcode = true;
57713:         uncachedCallPatch->slowNcodePatch = stubcc.masm.storePtrWithPatch(ImmPtr(NULL), ncodeAddr);
57713: 
57713:         stubcc.masm.jump(r0);
57713:         notCompiled.linkTo(stubcc.masm.label(), &stubcc.masm);
57713: 
57713:         /*
57713:          * inlineCallHelper will link uncachedCallSlowRejoin to the join point
57713:          * at the end of the ic. At that join point, the return value of the
57713:          * call is assumed to be in registers, so load them before jumping.
57713:          */
57713:         JaegerSpew(JSpew_Insns, " ---- BEGIN SLOW RESTORE CODE ---- \n");
57713:         Address rval = frame.addressOf(origCallee);  /* vp[0] == rval */
75776:         if (knownPushedType(0) == JSVAL_TYPE_DOUBLE)
75776:             stubcc.masm.ensureInMemoryDouble(rval);
57713:         stubcc.masm.loadValueAsComponents(rval, JSReturnReg_Type, JSReturnReg_Data);
57713:         *uncachedCallSlowRejoin = stubcc.masm.jump();
57713:         JaegerSpew(JSpew_Insns, " ---- END SLOW RESTORE CODE ---- \n");
57713:     }
57718: 
57718:     /*
57718:      * For simplicity, we don't statically specialize calls to
57718:      * ic::SplatApplyArgs based on applyTricks. Rather, this state is
57718:      * communicated dynamically through the VMFrame.
57718:      */
57718:     if (*PC == JSOP_FUNAPPLY) {
57718:         masm.store32(Imm32(applyTricks == LazyArgsObj),
57718:                      FrameAddress(offsetof(VMFrame, u.call.lazyArgsObj)));
57718:     }
57718: }
57718: 
57718: /* This predicate must be called before the current op mutates the FrameState. */
57718: bool
57718: mjit::Compiler::canUseApplyTricks()
57718: {
57718:     JS_ASSERT(*PC == JSOP_ARGUMENTS);
57718:     jsbytecode *nextpc = PC + JSOP_ARGUMENTS_LENGTH;
57718:     return *nextpc == JSOP_FUNAPPLY &&
57718:            IsLowerableFunCallOrApply(nextpc) &&
58124:            !analysis->jumpTarget(nextpc) &&
57766:            !debugMode();
57713: }
57713: 
53590: /* See MonoIC.cpp, CallCompiler for more information on call ICs. */
75776: bool
57718: mjit::Compiler::inlineCallHelper(uint32 callImmArgc, bool callingNew)
53590: {
53590:     /* Check for interrupts on function call */
53590:     interruptCheckHelper();
53590: 
57718:     int32 speculatedArgc;
57718:     if (applyTricks == LazyArgsObj) {
57718:         frame.pop();
57718:         speculatedArgc = 1;
57718:     } else {
57718:         speculatedArgc = callImmArgc;
57718:     }
57718: 
57718:     FrameEntry *origCallee = frame.peek(-(speculatedArgc + 2));
57718:     FrameEntry *origThis = frame.peek(-(speculatedArgc + 1));
57713: 
57713:     /* 'this' does not need to be synced for constructing. */
55503:     if (callingNew)
57713:         frame.discardFe(origThis);
57713: 
57713:     /*
57717:      * From the presence of JSOP_FUN{CALL,APPLY}, we speculate that we are
57717:      * going to call js_fun_{call,apply}. Normally, this call would go through
57717:      * js::Invoke to ultimately call 'this'. We can do much better by having
57717:      * the callIC cache and call 'this' directly. However, if it turns out that
57717:      * we are not actually calling js_fun_call, the callIC must act as normal.
57713:      */
57717:     bool lowerFunCallOrApply = IsLowerableFunCallOrApply(PC);
57713: 
75788:     bool newType = callingNew && cx->typeInferenceEnabled() && types::UseNewType(cx, script, PC);
75788: 
57718: #ifdef JS_MONOIC
75846:     if (debugMode() || newType || origCallee->isNotType(JSVAL_TYPE_OBJECT) ||
75846:         (lowerFunCallOrApply && origThis->isNotType(JSVAL_TYPE_OBJECT))) {
57718: #endif
57718:         if (applyTricks == LazyArgsObj) {
57718:             /* frame.pop() above reset us to pre-JSOP_ARGUMENTS state */
57718:             jsop_arguments();
75790:             frame.pushSynced(JSVAL_TYPE_UNKNOWN);
57718:         }
57718:         emitUncachedCall(callImmArgc, callingNew);
75776:         applyTricks = NoApplyTricks;
75845: 
75845:         /* Rejoin from inlined native slow path. */
75845:         if (recompiling) {
75845:             OOL_STUBCALL(stubs::SlowCall);
75845:             stubcc.rejoin(Changes(1));
75845:         }
75776:         return true;
53301: #ifdef JS_MONOIC
57718:     }
57718: 
75846:     frame.forgetConstantData(origCallee);
75846:     if (lowerFunCallOrApply)
75846:         frame.forgetConstantData(origThis);
75846: 
57713:     /* Initialized by both branches below. */
57713:     CallGenInfo     callIC(PC);
54832:     CallPatchInfo   callPatch;
57713:     MaybeRegisterID icCalleeType; /* type to test for function-ness */
57713:     RegisterID      icCalleeData; /* data to call */
57713:     Address         icRvalAddr;   /* return slot on slow-path rejoin */
57713: 
62361:     /*
62361:      * IC space must be reserved (using RESERVE_IC_SPACE or RESERVE_OOL_SPACE) between the
62361:      * following labels (as used in finishThisUp):
62361:      *  - funGuard -> hotJump
62361:      *  - funGuard -> joinPoint
62361:      *  - funGuard -> hotPathLabel
62361:      *  - slowPathStart -> oolCall
62361:      *  - slowPathStart -> oolJump
62361:      *  - slowPathStart -> icCall
62361:      *  - slowPathStart -> slowJoinPoint
62361:      * Because the call ICs are fairly long (compared to PICs), we don't reserve the space in each
62361:      * path until the first usage of funGuard (for the in-line path) or slowPathStart (for the
62361:      * out-of-line path).
62361:      */
62361: 
57717:     /* Initialized only on lowerFunCallOrApply branch. */
57713:     Jump            uncachedCallSlowRejoin;
57713:     CallPatchInfo   uncachedCallPatch;
57713: 
57713:     {
57713:         MaybeRegisterID origCalleeType, maybeOrigCalleeData;
57713:         RegisterID origCalleeData;
57713: 
57713:         /* Get the callee in registers. */
57713:         frame.ensureFullRegs(origCallee, &origCalleeType, &maybeOrigCalleeData);
57713:         origCalleeData = maybeOrigCalleeData.reg();
57713:         PinRegAcrossSyncAndKill p1(frame, origCalleeData), p2(frame, origCalleeType);
57713: 
57717:         if (lowerFunCallOrApply) {
57713:             MaybeRegisterID origThisType, maybeOrigThisData;
57713:             RegisterID origThisData;
57713:             {
57713:                 /* Get thisv in registers. */
57713:                 frame.ensureFullRegs(origThis, &origThisType, &maybeOrigThisData);
57713:                 origThisData = maybeOrigThisData.reg();
57713:                 PinRegAcrossSyncAndKill p3(frame, origThisData), p4(frame, origThisType);
57713: 
57713:                 /* Leaves pinned regs untouched. */
75647:                 frame.syncAndKill(Uses(speculatedArgc + 2));
57718:             }
57718: 
57718:             checkCallApplySpeculation(callImmArgc, speculatedArgc,
57718:                                       origCallee, origThis,
57713:                                       origCalleeType, origCalleeData,
57713:                                       origThisType, origThisData,
57713:                                       &uncachedCallSlowRejoin, &uncachedCallPatch);
57713: 
57713:             icCalleeType = origThisType;
57713:             icCalleeData = origThisData;
57713:             icRvalAddr = frame.addressOf(origThis);
53590: 
53590:             /*
57717:              * For f.call(), since we compile the ic under the (checked)
57717:              * assumption that call == js_fun_call, we still have a static
57717:              * frame size. For f.apply(), the frame size depends on the dynamic
57717:              * length of the array passed to apply.
53590:              */
57717:             if (*PC == JSOP_FUNCALL)
57787:                 callIC.frameSize.initStatic(frame.localSlots(), speculatedArgc - 1);
57717:             else
57717:                 callIC.frameSize.initDynamic();
57713:         } else {
57713:             /* Leaves pinned regs untouched. */
75647:             frame.syncAndKill(Uses(speculatedArgc + 2));
57713: 
57713:             icCalleeType = origCalleeType;
57713:             icCalleeData = origCalleeData;
57713:             icRvalAddr = frame.addressOf(origCallee);
57787:             callIC.frameSize.initStatic(frame.localSlots(), speculatedArgc);
57713:         }
57713:     }
53590: 
75776:     callIC.argTypes = NULL;
75776:     callIC.typeMonitored = monitored(PC);
75776:     if (callIC.typeMonitored && callIC.frameSize.isStatic()) {
75777:         unsigned argc = callIC.frameSize.staticArgc();
75794:         callIC.argTypes = (types::ClonedTypeSet *)
75794:             js_calloc((1 + argc) * sizeof(types::ClonedTypeSet));
75794:         if (!callIC.argTypes) {
75794:             js_ReportOutOfMemory(cx);
75776:             return false;
75794:         }
75790:         types::TypeSet *types = frame.getTypeSet(frame.peek(-(argc + 1)));
75794:         types::TypeSet::Clone(cx, script, types, &callIC.argTypes[0]);
75777:         for (unsigned i = 0; i < argc; i++) {
75790:             types::TypeSet *types = frame.getTypeSet(frame.peek(-(argc - i)));
75794:             types::TypeSet::Clone(cx, script, types, &callIC.argTypes[i + 1]);
75776:         }
75776:     }
75776: 
53590:     /* Test the type if necessary. Failing this always takes a really slow path. */
53590:     MaybeJump notObjectJump;
57713:     if (icCalleeType.isSet())
57713:         notObjectJump = masm.testObject(Assembler::NotEqual, icCalleeType.reg());
57713: 
57717:     /*
57717:      * For an optimized apply, keep icCalleeData and funPtrReg in a
57717:      * callee-saved registers for the subsequent ic::SplatApplyArgs call.
57717:      */
75647:     Registers tempRegs(Registers::AvailRegs);
57717:     if (callIC.frameSize.isDynamic() && !Registers::isSaved(icCalleeData)) {
75647:         RegisterID x = tempRegs.takeAnyReg(Registers::SavedRegs).reg();
57717:         masm.move(icCalleeData, x);
57717:         icCalleeData = x;
57717:     } else {
57713:         tempRegs.takeReg(icCalleeData);
57717:     }
75647:     RegisterID funPtrReg = tempRegs.takeAnyReg(Registers::SavedRegs).reg();
53590: 
62361:     /* Reserve space just before initialization of funGuard. */
62361:     RESERVE_IC_SPACE(masm);
62361: 
53590:     /*
53590:      * Guard on the callee identity. This misses on the first run. If the
53590:      * callee is scripted, compiled/compilable, and argc == nargs, then this
53590:      * guard is patched, and the compiled code address is baked in.
53590:      */
57713:     Jump j = masm.branchPtrWithPatch(Assembler::NotEqual, icCalleeData, callIC.funGuard);
53590:     callIC.funJump = j;
53590: 
62361:     /* Reserve space just before initialization of slowPathStart. */
62361:     RESERVE_OOL_SPACE(stubcc.masm);
62361: 
53590:     Jump rejoin1, rejoin2;
53590:     {
62379:         RESERVE_OOL_SPACE(stubcc.masm);
53590:         stubcc.linkExitDirect(j, stubcc.masm.label());
53590:         callIC.slowPathStart = stubcc.masm.label();
53590: 
53590:         /*
53590:          * Test if the callee is even a function. If this doesn't match, we
53590:          * take a _really_ slow path later.
53590:          */
57713:         Jump notFunction = stubcc.masm.testFunction(Assembler::NotEqual, icCalleeData);
53590: 
53590:         /* Test if the function is scripted. */
75647:         RegisterID tmp = tempRegs.takeAnyReg().reg();
60777:         stubcc.masm.loadObjPrivate(icCalleeData, funPtrReg);
57717:         stubcc.masm.load16(Address(funPtrReg, offsetof(JSFunction, flags)), tmp);
57717:         stubcc.masm.and32(Imm32(JSFUN_KINDMASK), tmp);
57717:         Jump isNative = stubcc.masm.branch32(Assembler::Below, tmp, Imm32(JSFUN_INTERPRETED));
57717:         tempRegs.putReg(tmp);
53590: 
53590:         /*
57717:          * N.B. After this call, the frame will have a dynamic frame size.
57717:          * Check after the function is known not to be a native so that the
57717:          * catch-all/native path has a static depth.
57717:          */
57717:         if (callIC.frameSize.isDynamic())
57766:             OOL_STUBCALL(ic::SplatApplyArgs);
57717: 
57717:         /*
57717:          * No-op jump that gets patched by ic::New/Call to the stub generated
57717:          * by generateFullCallStub.
53590:          */
53590:         Jump toPatch = stubcc.masm.jump();
53590:         toPatch.linkTo(stubcc.masm.label(), &stubcc.masm);
53590:         callIC.oolJump = toPatch;
59895:         callIC.icCall = stubcc.masm.label();
53590: 
57717:         /*
57717:          * At this point the function is definitely scripted, so we try to
57717:          * compile it and patch either funGuard/funJump or oolJump. This code
57717:          * is only executed once.
57717:          */
55503:         callIC.addrLabel1 = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
57717:         void *icFunPtr = JS_FUNC_TO_DATA_PTR(void *, callingNew ? ic::New : ic::Call);
57717:         if (callIC.frameSize.isStatic())
57787:             callIC.oolCall = OOL_STUBCALL_LOCAL_SLOTS(icFunPtr, frame.localSlots());
57717:         else
57787:             callIC.oolCall = OOL_STUBCALL_LOCAL_SLOTS(icFunPtr, -1);
56775: 
57713:         callIC.funObjReg = icCalleeData;
57717:         callIC.funPtrReg = funPtrReg;
53590: 
53590:         /*
53590:          * The IC call either returns NULL, meaning call completed, or a
53590:          * function pointer to jump to. Caveat: Must restore JSFrameReg
53590:          * because a new frame has been pushed.
53590:          */
53590:         rejoin1 = stubcc.masm.branchTestPtr(Assembler::Zero, Registers::ReturnReg,
53590:                                             Registers::ReturnReg);
57717:         if (callIC.frameSize.isStatic())
57717:             stubcc.masm.move(Imm32(callIC.frameSize.staticArgc()), JSParamReg_Argc);
57717:         else
57717:             stubcc.masm.load32(FrameAddress(offsetof(VMFrame, u.call.dynamicArgc)), JSParamReg_Argc);
53590:         stubcc.masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
54832:         callPatch.hasSlowNcode = true;
54832:         callPatch.slowNcodePatch =
54832:             stubcc.masm.storePtrWithPatch(ImmPtr(NULL),
54832:                                           Address(JSFrameReg, JSStackFrame::offsetOfncode()));
54832:         stubcc.masm.jump(Registers::ReturnReg);
53590: 
57717:         /*
57717:          * This ool path is the catch-all for everything but scripted function
57717:          * callees. For native functions, ic::NativeNew/NativeCall will repatch
57717:          * funGaurd/funJump with a fast call stub. All other cases
57717:          * (non-function callable objects and invalid callees) take the slow
57717:          * path through js::Invoke.
57717:          */
53590:         if (notObjectJump.isSet())
53590:             stubcc.linkExitDirect(notObjectJump.get(), stubcc.masm.label());
53590:         notFunction.linkTo(stubcc.masm.label(), &stubcc.masm);
53590:         isNative.linkTo(stubcc.masm.label(), &stubcc.masm);
53590: 
55503:         callIC.addrLabel2 = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
57766:         OOL_STUBCALL(callingNew ? ic::NativeNew : ic::NativeCall);
53590: 
53590:         rejoin2 = stubcc.masm.jump();
53590:     }
53590: 
53590:     /*
53590:      * If the call site goes to a closure over the same function, it will
53590:      * generate an out-of-line stub that joins back here.
53590:      */
53590:     callIC.hotPathLabel = masm.label();
53590: 
53590:     uint32 flags = 0;
53590:     if (callingNew)
53590:         flags |= JSFRAME_CONSTRUCTING;
53590: 
54163:     InlineFrameAssembler inlFrame(masm, callIC, flags);
57713:     callPatch.hasFastNcode = true;
54832:     callPatch.fastNcodePatch = inlFrame.assemble(NULL);
54832: 
54832:     callIC.hotJump = masm.jump();
54832:     callIC.joinPoint = callPatch.joinPoint = masm.label();
75636:     addReturnSite(callPatch.joinPoint);
57717:     if (lowerFunCallOrApply)
57713:         uncachedCallPatch.joinPoint = callIC.joinPoint;
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfPrev()), JSFrameReg);
53590: 
62361:     /*
62361:      * We've placed hotJump, joinPoint and hotPathLabel, and no other labels are located by offset
62361:      * in the in-line path so we can check the IC space now.
62361:      */
62361:     CHECK_IC_SPACE();
62361: 
75622:     JSValueType type = knownPushedType(0);
75630: 
57718:     frame.popn(speculatedArgc + 2);
53590:     frame.takeReg(JSReturnReg_Type);
53590:     frame.takeReg(JSReturnReg_Data);
75790:     FPRegisterID fpreg = frame.pushRegs(JSReturnReg_Type, JSReturnReg_Data, type);
53590: 
57713:     /*
57713:      * Now that the frame state is set, generate the rejoin path. Note that, if
57717:      * lowerFunCallOrApply, we cannot just call 'stubcc.rejoin' since the return
57713:      * value has been placed at vp[1] which is not the stack address associated
57713:      * with frame.peek(-1).
57713:      */
53590:     callIC.slowJoinPoint = stubcc.masm.label();
53590:     rejoin1.linkTo(callIC.slowJoinPoint, &stubcc.masm);
53590:     rejoin2.linkTo(callIC.slowJoinPoint, &stubcc.masm);
57713:     JaegerSpew(JSpew_Insns, " ---- BEGIN SLOW RESTORE CODE ---- \n");
75631:     if (type == JSVAL_TYPE_DOUBLE)
75631:         stubcc.masm.moveInt32OrDouble(icRvalAddr, fpreg);
75631:     else
57713:         stubcc.masm.loadValueAsComponents(icRvalAddr, JSReturnReg_Type, JSReturnReg_Data);
57713:     stubcc.crossJump(stubcc.masm.jump(), masm.label());
57713:     JaegerSpew(JSpew_Insns, " ---- END SLOW RESTORE CODE ---- \n");
57713: 
62361:     CHECK_OOL_SPACE();
62361: 
57717:     if (lowerFunCallOrApply)
57713:         stubcc.crossJump(uncachedCallSlowRejoin, masm.label());
53590: 
53590:     callICs.append(callIC);
54832:     callPatches.append(callPatch);
57717:     if (lowerFunCallOrApply)
57713:         callPatches.append(uncachedCallPatch);
57718: 
75845:     if (!lowerFunCallOrApply && recompiling) {
75846:         /* Recompiled from inlined native slow path. */
75846:         if (!callingNew) {
75846:             OOL_STUBCALL(stubs::SlowCall);
75846:             stubcc.rejoin(Changes(1));
75846:         }
75846: 
75845:         /* Recompiled uncached call to cached call. */
75846:         OOL_STUBCALL(callingNew ? stubs::UncachedNew : stubs::UncachedCall);
75845:         stubcc.rejoin(Changes(1));
75845:     }
75845: 
57718:     applyTricks = NoApplyTricks;
75776: 
75776:     return true;
53301: #endif
52645: }
52645: 
53168: /*
53168:  * This function must be called immediately after any instruction which could
53168:  * cause a new JSStackFrame to be pushed and could lead to a new debug trap
53168:  * being set. This includes any API callbacks and any scripted or native call.
53168:  */
53168: void
57766: mjit::Compiler::addCallSite(const InternalCallSite &site)
53168: {
75817: #if 1 /* Expensive assertion on some tests. */
75778:     for (unsigned i = 0; i < callSites.length(); i++)
75778:         JS_ASSERT(site.pc != callSites[i].pc || site.id != callSites[i].id);
75778: #endif
53168:     callSites.append(site);
53168: }
53168: 
52645: void
53133: mjit::Compiler::restoreFrameRegs(Assembler &masm)
52645: {
53482:     masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
52645: }
52645: 
52651: bool
52651: mjit::Compiler::compareTwoValues(JSContext *cx, JSOp op, const Value &lhs, const Value &rhs)
52651: {
52651:     JS_ASSERT(lhs.isPrimitive());
52651:     JS_ASSERT(rhs.isPrimitive());
52651: 
52651:     if (lhs.isString() && rhs.isString()) {
59890:         int32 cmp;
59890:         CompareStrings(cx, lhs.toString(), rhs.toString(), &cmp);
52651:         switch (op) {
52651:           case JSOP_LT:
52651:             return cmp < 0;
52651:           case JSOP_LE:
52651:             return cmp <= 0;
52651:           case JSOP_GT:
52651:             return cmp > 0;
52651:           case JSOP_GE:
52651:             return cmp >= 0;
52679:           case JSOP_EQ:
52679:             return cmp == 0;
52679:           case JSOP_NE:
52679:             return cmp != 0;
52651:           default:
52651:             JS_NOT_REACHED("NYI");
52651:         }
52651:     } else {
52651:         double ld, rd;
52651:         
52651:         /* These should be infallible w/ primitives. */
52651:         ValueToNumber(cx, lhs, &ld);
52651:         ValueToNumber(cx, rhs, &rd);
52651:         switch(op) {
52651:           case JSOP_LT:
52651:             return ld < rd;
52651:           case JSOP_LE:
52651:             return ld <= rd;
52651:           case JSOP_GT:
52651:             return ld > rd;
52651:           case JSOP_GE:
52651:             return ld >= rd;
52679:           case JSOP_EQ: /* fall through */
52679:           case JSOP_NE:
52679:             /* Special case null/undefined/void comparisons. */
52679:             if (lhs.isNullOrUndefined()) {
52679:                 if (rhs.isNullOrUndefined())
52679:                     return op == JSOP_EQ;
52679:                 return op == JSOP_NE;
52679:             }
52679:             if (rhs.isNullOrUndefined())
52679:                 return op == JSOP_NE;
52679: 
52679:             /* Normal return. */
52679:             return (op == JSOP_EQ) ? (ld == rd) : (ld != rd);
52651:           default:
52651:             JS_NOT_REACHED("NYI");
52651:         }
52651:     }
52651: 
52651:     JS_NOT_REACHED("NYI");
52651:     return false;
52651: }
52651: 
56766: bool
52653: mjit::Compiler::emitStubCmpOp(BoolStub stub, jsbytecode *target, JSOp fused)
52653: {
75649:     fixDoubleTypes(Uses(2));
75778:     if (target)
75649:         frame.syncAndForgetEverything();
75778:     else
75778:         frame.syncAndKill(Uses(2));
75649: 
53087:     prepareStubCall(Uses(2));
57766:     INLINE_STUBCALL(stub);
52653:     frame.pop();
52653:     frame.pop();
52653: 
52653:     if (!target) {
52653:         frame.takeReg(Registers::ReturnReg);
75790:         frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
56766:         return true;
56766:     }
56766: 
52679:     JS_ASSERT(fused == JSOP_IFEQ || fused == JSOP_IFNE);
52653:     Assembler::Condition cond = (fused == JSOP_IFEQ)
52653:                                 ? Assembler::Zero
52653:                                 : Assembler::NonZero;
52653:     Jump j = masm.branchTest32(cond, Registers::ReturnReg,
52653:                                Registers::ReturnReg);
56766:     return jumpAndTrace(j, target);
52653: }
52653: 
52692: void
56201: mjit::Compiler::jsop_setprop_slow(JSAtom *atom, bool usePropCache)
52886: {
53087:     prepareStubCall(Uses(2));
52886:     masm.move(ImmPtr(atom), Registers::ArgReg1);
56201:     if (usePropCache)
57766:         INLINE_STUBCALL(STRICT_VARIANT(stubs::SetName));
56201:     else
57766:         INLINE_STUBCALL(STRICT_VARIANT(stubs::SetPropNoCache));
52886:     JS_STATIC_ASSERT(JSOP_SETNAME_LENGTH == JSOP_SETPROP_LENGTH);
52886:     frame.shimmy(1);
52886: }
52886: 
52886: void
56201: mjit::Compiler::jsop_getprop_slow(JSAtom *atom, bool usePropCache)
52743: {
53087:     prepareStubCall(Uses(1));
56201:     if (usePropCache) {
57766:         INLINE_STUBCALL(stubs::GetProp);
56201:     } else {
56201:         masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:         INLINE_STUBCALL(stubs::GetPropNoCache);
56201:     }
52743:     frame.pop();
75790:     frame.pushSynced(JSVAL_TYPE_UNKNOWN);
75838: 
75838:     if (recompiling) {
75838:         OOL_STUBCALL(usePropCache ? ic::GetProp : ic::GetPropNoCache);
75838:         stubcc.rejoin(Changes(1));
75838:     }
52743: }
52743: 
52903: bool
52896: mjit::Compiler::jsop_callprop_slow(JSAtom *atom)
52896: {
53087:     prepareStubCall(Uses(1));
52896:     masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stubs::CallProp);
52896:     frame.pop();
75708:     pushSyncedEntry(0);
75708:     pushSyncedEntry(1);
75853: 
75853:     if (recompiling) {
75853:         OOL_STUBCALL(stubs::GetProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(ic::CallProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(ic::GetProp);
75853:         stubcc.rejoin(Changes(2));
75853:     }
75853: 
52903:     return true;
52896: }
52896: 
56037: bool
52884: mjit::Compiler::jsop_length()
52884: {
52884:     FrameEntry *top = frame.peek(-1);
52884: 
53025:     if (top->isTypeKnown() && top->getKnownType() == JSVAL_TYPE_STRING) {
52884:         if (top->isConstant()) {
53081:             JSString *str = top->getValue().toString();
52884:             Value v;
52885:             v.setNumber(uint32(str->length()));
52884:             frame.pop();
52884:             frame.push(v);
52884:         } else {
52884:             RegisterID str = frame.ownRegForData(top);
59888:             masm.loadPtr(Address(str, JSString::offsetOfLengthAndFlags()), str);
59977:             masm.urshift32(Imm32(JSString::LENGTH_SHIFT), str);
52884:             frame.pop();
75790:             frame.pushTypedPayload(JSVAL_TYPE_INT32, str);
52884:         }
56037:         return true;
52884:     }
52884: 
53119: #if defined JS_POLYIC
75790:     return jsop_getprop(cx->runtime->atomState.lengthAtom, knownPushedType(0));
52884: #else
53087:     prepareStubCall(Uses(1));
57766:     INLINE_STUBCALL(stubs::Length);
52884:     frame.pop();
75708:     pushSyncedEntry(0);
56037:     return true;
52884: #endif
52884: }
52884: 
55503: #ifdef JS_MONOIC
55503: void
62386: mjit::Compiler::passMICAddress(GlobalNameICInfo &ic)
55503: {
62386:     ic.addrLabel = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
55503: }
55503: #endif
55503: 
53119: #if defined JS_POLYIC
52880: void
56738: mjit::Compiler::passICAddress(BaseICInfo *ic)
55503: {
56738:     ic->paramAddr = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
55503: }
60598: 
56037: bool
75790: mjit::Compiler::jsop_getprop(JSAtom *atom, JSValueType knownType,
75708:                              bool doTypeCheck, bool usePropCache)
52880: {
52880:     FrameEntry *top = frame.peek(-1);
52880: 
52884:     /* If the incoming type will never PIC, take slow path. */
53025:     if (top->isTypeKnown() && top->getKnownType() != JSVAL_TYPE_OBJECT) {
52892:         JS_ASSERT_IF(atom == cx->runtime->atomState.lengthAtom,
53025:                      top->getKnownType() != JSVAL_TYPE_STRING);
56201:         jsop_getprop_slow(atom, usePropCache);
56037:         return true;
52880:     }
52880: 
75846:     frame.forgetConstantData(top);
75846: 
52884:     /*
52884:      * These two must be loaded first. The objReg because the string path
52884:      * wants to read it, and the shapeReg because it could cause a spill that
52884:      * the string path wouldn't sink back.
52884:      */
52884:     RegisterID objReg = Registers::ReturnReg;
52884:     RegisterID shapeReg = Registers::ReturnReg;
52892:     if (atom == cx->runtime->atomState.lengthAtom) {
52884:         objReg = frame.copyDataIntoReg(top);
52884:         shapeReg = frame.allocReg();
52884:     }
52884: 
60592:     RESERVE_IC_SPACE(masm);
60592: 
56738:     PICGenInfo pic(ic::PICInfo::GET, JSOp(*PC), usePropCache);
52880: 
52880:     /* Guard that the type is an object. */
60592:     Label typeCheck;
52894:     if (doTypeCheck && !top->isTypeKnown()) {
52880:         RegisterID reg = frame.tempRegForType(top);
52884:         pic.typeReg = reg;
52884: 
52884:         /* Start the hot path where it's easy to patch it. */
53270:         pic.fastPathStart = masm.label();
53023:         Jump j = masm.testObject(Assembler::NotEqual, reg);
60592:         typeCheck = masm.label();
56037:         RETURN_IF_OOM(false);
53270: 
53479:         pic.typeCheck = stubcc.linkExit(j, Uses(1));
52884:         pic.hasTypeCheck = true;
52884:     } else {
53270:         pic.fastPathStart = masm.label();
52884:         pic.hasTypeCheck = false;
52884:         pic.typeReg = Registers::ReturnReg;
52880:     }
52880: 
52892:     if (atom != cx->runtime->atomState.lengthAtom) {
52884:         objReg = frame.copyDataIntoReg(top);
52884:         shapeReg = frame.allocReg();
52884:     }
52884: 
52880:     pic.shapeReg = shapeReg;
52892:     pic.atom = atom;
52880: 
52880:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52880:     pic.shapeGuard = masm.label();
53270: 
53408:     DataLabel32 inlineShapeLabel;
53270:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53270:                                     Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                                     inlineShapeLabel);
60592:     Label inlineShapeJump = masm.label();
60592: 
60592:     RESERVE_OOL_SPACE(stubcc.masm);
53479:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52880: 
52880:     stubcc.leave();
56738:     passICAddress(&pic);
75778:     pic.slowPathCall = OOL_STUBCALL(usePropCache ? ic::GetProp : ic::GetPropNoCache);
60592:     CHECK_OOL_SPACE();
60592: 
60592:     /* Load the base slot address. */
60592:     Label dslotsLoadLabel = masm.loadPtrWithPatchToLEA(Address(objReg, offsetof(JSObject, slots)),
60592:                                                                objReg);
52880: 
52880:     /* Copy the slot value to the expression stack. */
52880:     Address slot(objReg, 1 << 24);
52880:     frame.pop();
53270: 
60592:     Label fastValueLoad = masm.loadValueWithAddressOffsetPatch(slot, shapeReg, objReg);
60592:     pic.fastPathRejoin = masm.label();
60592: 
60592:     RETURN_IF_OOM(false);
60592: 
60592:     /* Initialize op labels. */
60592:     GetPropLabels &labels = pic.getPropLabels();
60592:     labels.setDslotsLoad(masm, pic.fastPathRejoin, dslotsLoadLabel);
60592:     labels.setInlineShapeData(masm, pic.shapeGuard, inlineShapeLabel);
60592: 
60592:     labels.setValueLoad(masm, pic.fastPathRejoin, fastValueLoad);
60592:     if (pic.hasTypeCheck)
60592:         labels.setInlineTypeJump(masm, pic.fastPathStart, typeCheck);
60592: #ifdef JS_CPU_X64
60592:     labels.setInlineShapeJump(masm, inlineShapeLabel, inlineShapeJump);
60592: #else
60592:     labels.setInlineShapeJump(masm, pic.shapeGuard, inlineShapeJump);
53315: #endif
53270: 
52880:     pic.objReg = objReg;
75790:     frame.pushRegs(shapeReg, objReg, knownType);
52880: 
53088:     stubcc.rejoin(Changes(1));
52880: 
75778:     if (recompiling) {
75778:         if (usePropCache)
75778:             OOL_STUBCALL(stubs::GetProp);
75778:         else
75778:             OOL_STUBCALL(stubs::GetPropNoCache);
75778:         stubcc.rejoin(Changes(1));
75778:     }
75778: 
52880:     pics.append(pic);
56037:     return true;
52880: }
60598: 
52903: bool
52906: mjit::Compiler::jsop_callprop_generic(JSAtom *atom)
52906: {
52906:     FrameEntry *top = frame.peek(-1);
52906: 
52906:     /*
52906:      * These two must be loaded first. The objReg because the string path
52906:      * wants to read it, and the shapeReg because it could cause a spill that
52906:      * the string path wouldn't sink back.
52906:      */
52906:     RegisterID objReg = frame.copyDataIntoReg(top);
52906:     RegisterID shapeReg = frame.allocReg();
52906: 
56738:     PICGenInfo pic(ic::PICInfo::CALL, JSOp(*PC), true);
52906: 
56551:     pic.pc = PC;
56551: 
52906:     /* Guard that the type is an object. */
52906:     pic.typeReg = frame.copyTypeIntoReg(top);
52906: 
60596:     RESERVE_IC_SPACE(masm);
60596: 
52906:     /* Start the hot path where it's easy to patch it. */
53270:     pic.fastPathStart = masm.label();
52906: 
52906:     /*
52906:      * Guard that the value is an object. This part needs some extra gunk
52906:      * because the leave() after the shape guard will emit a jump from this
52906:      * path to the final call. We need a label in between that jump, which
52906:      * will be the target of patched jumps in the PIC.
52906:      */
60596:     Jump typeCheckJump = masm.testObject(Assembler::NotEqual, pic.typeReg);
60596:     Label typeCheck = masm.label();
60596:     RETURN_IF_OOM(false);
60596: 
60596:     pic.typeCheck = stubcc.linkExit(typeCheckJump, Uses(1));
52906:     pic.hasTypeCheck = true;
52906:     pic.objReg = objReg;
52906:     pic.shapeReg = shapeReg;
52906:     pic.atom = atom;
52906: 
52906:     /*
52906:      * Store the type and object back. Don't bother keeping them in registers,
52906:      * since a sync will be needed for the upcoming call.
52906:      */
57787:     uint32 thisvSlot = frame.localSlots();
52906:     Address thisv = Address(JSFrameReg, sizeof(JSStackFrame) + thisvSlot * sizeof(Value));
60596: 
53315: #if defined JS_NUNBOX32
54582:     masm.storeValueFromComponents(pic.typeReg, pic.objReg, thisv);
53315: #elif defined JS_PUNBOX64
53315:     masm.orPtr(pic.objReg, pic.typeReg);
53315:     masm.storePtr(pic.typeReg, thisv);
53315: #endif
60596: 
52906:     frame.freeReg(pic.typeReg);
52906: 
52906:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52906:     pic.shapeGuard = masm.label();
53307: 
53408:     DataLabel32 inlineShapeLabel;
53307:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53307:                            Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                            inlineShapeLabel);
60596:     Label inlineShapeJump = masm.label();
60596: 
60596:     /* Slow path. */
60596:     RESERVE_OOL_SPACE(stubcc.masm);
53479:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52906:     stubcc.leave();
56738:     passICAddress(&pic);
57766:     pic.slowPathCall = OOL_STUBCALL(ic::CallProp);
60596:     CHECK_OOL_SPACE();
52906: 
52906:     /* Adjust the frame. None of this will generate code. */
52906:     frame.pop();
75790:     frame.pushRegs(shapeReg, objReg, knownPushedType(0));
75708:     pushSyncedEntry(1);
52906: 
60596:     /* Load the base slot address. */
60596:     Label dslotsLoadLabel = masm.loadPtrWithPatchToLEA(Address(objReg, offsetof(JSObject, slots)),
60596:                                                                objReg);
52906: 
52906:     /* Copy the slot value to the expression stack. */
52906:     Address slot(objReg, 1 << 24);
53307: 
60592:     Label fastValueLoad = masm.loadValueWithAddressOffsetPatch(slot, shapeReg, objReg);
56575:     pic.fastPathRejoin = masm.label();
52906: 
56037:     RETURN_IF_OOM(false);
60596: 
60596:     /* 
60596:      * Initialize op labels. We use GetPropLabels here because we have the same patching
60596:      * requirements for CallProp.
60596:      */
60590:     GetPropLabels &labels = pic.getPropLabels();
60590:     labels.setDslotsLoadOffset(masm.differenceBetween(pic.fastPathRejoin, dslotsLoadLabel));
60590:     labels.setInlineShapeOffset(masm.differenceBetween(pic.shapeGuard, inlineShapeLabel));
60592:     labels.setValueLoad(masm, pic.fastPathRejoin, fastValueLoad);
60596:     labels.setInlineTypeJump(masm, pic.fastPathStart, typeCheck);
60596: #ifdef JS_CPU_X64
60596:     labels.setInlineShapeJump(masm, inlineShapeLabel, inlineShapeJump);
60596: #else
60596:     labels.setInlineShapeJump(masm, pic.shapeGuard, inlineShapeJump);
53315: #endif
53307: 
53088:     stubcc.rejoin(Changes(2));
52906:     pics.append(pic);
52906: 
75778:     if (recompiling) {
75778:         OOL_STUBCALL(stubs::CallProp);
75778:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(stubs::GetProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(ic::GetProp);
75853:         stubcc.rejoin(Changes(2));
75778:     }
75778: 
52906:     return true;
52906: }
52906: 
52906: bool
52903: mjit::Compiler::jsop_callprop_str(JSAtom *atom)
52903: {
52903:     if (!script->compileAndGo) {
52903:         jsop_callprop_slow(atom);
52903:         return true; 
52903:     }
52903: 
60240:     /*
60240:      * Bake in String.prototype. This is safe because of compileAndGo.
60240:      * We must pass an explicit scope chain only because JSD calls into
60240:      * here via the recompiler with a dummy context, and we need to use
60240:      * the global object for the script we are now compiling.
60240:      */
52903:     JSObject *obj;
60240:     if (!js_GetClassPrototype(cx, &fp->scopeChain(), JSProto_String, &obj))
52903:         return false;
52903: 
52903:     /* Force into a register because getprop won't expect a constant. */
52903:     RegisterID reg = frame.allocReg();
54832: 
52903:     masm.move(ImmPtr(obj), reg);
75790:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, reg);
52903: 
52903:     /* Get the property. */
75790:     if (!jsop_getprop(atom, knownPushedType(0)))
56037:         return false;
52903: 
52903:     /* Perform a swap. */
52903:     frame.dup2();
52903:     frame.shift(-3);
52903:     frame.shift(-1);
52903: 
53374:     /*
53374:      * See bug 584579 - need to forget string type, since wrapping could
53374:      * create an object. forgetType() alone is not valid because it cannot be
53374:      * used on copies or constants.
53374:      */
53374:     RegisterID strReg;
53374:     FrameEntry *strFe = frame.peek(-1);
53374:     if (strFe->isConstant()) {
53374:         strReg = frame.allocReg();
53374:         masm.move(ImmPtr(strFe->getValue().toString()), strReg);
53374:     } else {
53374:         strReg = frame.ownRegForData(strFe);
53374:     }
53374:     frame.pop();
75790:     frame.pushTypedPayload(JSVAL_TYPE_STRING, strReg);
53374:     frame.forgetType(frame.peek(-1));
53374: 
75853:     if (recompiling) {
75853:         OOL_STUBCALL(stubs::CallProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(ic::CallProp);
75853:         stubcc.rejoin(Changes(2));
75853:     }
75853: 
52903:     return true;
52903: }
52903: 
52903: bool
52896: mjit::Compiler::jsop_callprop_obj(JSAtom *atom)
52896: {
52896:     FrameEntry *top = frame.peek(-1);
52896: 
56738:     PICGenInfo pic(ic::PICInfo::CALL, JSOp(*PC), true);
52896: 
52896:     JS_ASSERT(top->isTypeKnown());
53025:     JS_ASSERT(top->getKnownType() == JSVAL_TYPE_OBJECT);
52896:     
60596:     RESERVE_IC_SPACE(masm);
60596: 
56551:     pic.pc = PC;
53270:     pic.fastPathStart = masm.label();
52896:     pic.hasTypeCheck = false;
52896:     pic.typeReg = Registers::ReturnReg;
52896: 
52896:     RegisterID shapeReg = frame.allocReg();
52896:     pic.shapeReg = shapeReg;
52896:     pic.atom = atom;
52896: 
75845:     RegisterID objReg;
75845:     if (top->isConstant()) {
75845:         objReg = frame.allocReg();
75845:         masm.move(ImmPtr(&top->getValue().toObject()), objReg);
75845:     } else {
75845:         objReg = frame.copyDataIntoReg(top);
75845:     }
75845: 
52896:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52896:     pic.shapeGuard = masm.label();
53307: 
53408:     DataLabel32 inlineShapeLabel;
53307:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53307:                            Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                            inlineShapeLabel);
60596:     Label inlineShapeJump = masm.label();
60596: 
60596:     /* Slow path. */
60596:     RESERVE_OOL_SPACE(stubcc.masm);
53588:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52896:     stubcc.leave();
56738:     passICAddress(&pic);
57766:     pic.slowPathCall = OOL_STUBCALL(ic::CallProp);
60596:     CHECK_OOL_SPACE();
60596: 
60596:     /* Load the base slot address. */
60596:     Label dslotsLoadLabel = masm.loadPtrWithPatchToLEA(Address(objReg, offsetof(JSObject, slots)),
60596:                                                                objReg);
52896: 
52896:     /* Copy the slot value to the expression stack. */
52896:     Address slot(objReg, 1 << 24);
53307: 
60592:     Label fastValueLoad = masm.loadValueWithAddressOffsetPatch(slot, shapeReg, objReg);
53307: 
56575:     pic.fastPathRejoin = masm.label();
52896:     pic.objReg = objReg;
52896: 
52896:     /*
52896:      * 1) Dup the |this| object.
52896:      * 2) Push the property value onto the stack.
52896:      * 3) Move the value below the dup'd |this|, uncopying it. This could
56575:      * generate code, thus the fastPathRejoin label being prior. This is safe
52896:      * as a stack transition, because JSOP_CALLPROP has JOF_TMPSLOT. It is
52896:      * also safe for correctness, because if we know the LHS is an object, it
52896:      * is the resulting vp[1].
52896:      */
52896:     frame.dup();
75790:     frame.pushRegs(shapeReg, objReg, knownPushedType(0));
52896:     frame.shift(-2);
52896: 
53315:     /* 
53315:      * Assert correctness of hardcoded offsets.
53315:      * No type guard: type is asserted.
53315:      */
56037:     RETURN_IF_OOM(false);
60590: 
60590:     GetPropLabels &labels = pic.getPropLabels();
60590:     labels.setDslotsLoadOffset(masm.differenceBetween(pic.fastPathRejoin, dslotsLoadLabel));
60590:     labels.setInlineShapeOffset(masm.differenceBetween(pic.shapeGuard, inlineShapeLabel));
60592:     labels.setValueLoad(masm, pic.fastPathRejoin, fastValueLoad);
60596: #ifdef JS_CPU_X64
60596:     labels.setInlineShapeJump(masm, inlineShapeLabel, inlineShapeJump);
60596: #else
60596:     labels.setInlineShapeJump(masm, pic.shapeGuard, inlineShapeJump);
53315: #endif
53307: 
53088:     stubcc.rejoin(Changes(2));
52896:     pics.append(pic);
52903: 
75853:     if (recompiling) {
75853:         OOL_STUBCALL(stubs::CallProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(stubs::GetProp);
75853:         stubcc.rejoin(Changes(2));
75853:         OOL_STUBCALL(ic::GetProp);
75853:         stubcc.rejoin(Changes(2));
75853:     }
75853: 
52903:     return true;
52896: }
52896: 
52903: bool
75845: mjit::Compiler::testSingletonProperty(JSObject *obj, jsid id)
75845: {
75846:     /*
75846:      * We would like to completely no-op property/global accesses which can
75846:      * produce only a particular JSObject or undefined, provided we can
75846:      * determine the pushed value must not be undefined (or, if it could be
75846:      * undefined, a recompilation will be triggered).
75846:      *
75846:      * If the access definitely goes through obj, either directly or on the
75846:      * prototype chain, then if obj has a defined property now, and the
75846:      * property has a default or method shape, the only way it can produce
75846:      * undefined in the future is if it is deleted. Deletion causes type
75846:      * properties to be explicitly marked with undefined.
75846:      */
75846: 
75845:     if (!obj->isNative())
75845:         return false;
75845:     if (obj->getClass()->ops.lookupProperty)
75845:         return false;
75845: 
75845:     JSObject *holder;
75845:     JSProperty *prop = NULL;
75845:     if (!obj->lookupProperty(cx, id, &holder, &prop))
75845:         return false;
75845:     if (!prop)
75845:         return false;
75845: 
75845:     Shape *shape = (Shape *) prop;
75845:     if (shape->hasDefaultGetter()) {
75845:         if (!shape->hasSlot())
75845:             return false;
75845:         if (holder->getSlot(shape->slot).isUndefined())
75845:             return false;
75845:     } else if (!shape->isMethod()) {
75845:         return false;
75845:     }
75845: 
75845:     return true;
75845: }
75845: 
75845: bool
75845: mjit::Compiler::testSingletonPropertyTypes(types::TypeSet *types, jsid id)
75845: {
75850:     if (!types)
75850:         return false;
75850: 
75845:     JSObject *singleton = types->getSingleton(cx, script);
75845:     if (singleton)
75845:         return testSingletonProperty(singleton, id);
75845: 
75845:     if (!script->compileAndGo)
75845:         return false;
75845: 
75845:     JSProtoKey key;
75845:     JSValueType type = types->getKnownTypeTag(cx, script);
75845:     switch (type) {
75845:       case JSVAL_TYPE_STRING:
75845:         key = JSProto_String;
75845:         break;
75845: 
75845:       case JSVAL_TYPE_INT32:
75845:       case JSVAL_TYPE_DOUBLE:
75845:         key = JSProto_Number;
75845:         break;
75845: 
75845:       case JSVAL_TYPE_BOOLEAN:
75845:         key = JSProto_Boolean;
75845:         break;
75845: 
75845:       default:
75845:         return false;
75845:     }
75845: 
75845:     JSObject *proto;
75845:     if (!js_GetClassPrototype(cx, globalObj, key, &proto, NULL))
75845:         return NULL;
75845: 
75845:     return testSingletonProperty(proto, id);
75845: }
75845: 
75845: bool
52896: mjit::Compiler::jsop_callprop(JSAtom *atom)
52896: {
52896:     FrameEntry *top = frame.peek(-1);
52896: 
75845:     JSObject *singleton = pushedSingleton(0);
75845:     if (singleton && singleton->isFunction() &&
75845:         testSingletonPropertyTypes(frame.getTypeSet(top), ATOM_TO_JSID(atom))) {
75845:         // THIS
75845: 
75845:         frame.dup();
75845:         // THIS THIS
75845: 
75845:         frame.push(ObjectValue(*singleton));
75845:         // THIS THIS FUN
75845: 
75845:         frame.shift(-2);
75845:         // FUN THIS
75845: 
75845:         return true;
75845:     }
75845: 
52896:     /* If the incoming type will never PIC, take slow path. */
53025:     if (top->isTypeKnown() && top->getKnownType() != JSVAL_TYPE_OBJECT) {
53025:         if (top->getKnownType() == JSVAL_TYPE_STRING)
52903:             return jsop_callprop_str(atom);
52903:         return jsop_callprop_slow(atom);
52896:     }
52896: 
52896:     if (top->isTypeKnown())
52903:         return jsop_callprop_obj(atom);
52906:     return jsop_callprop_generic(atom);
52896: }
60598: 
56037: bool
56201: mjit::Compiler::jsop_setprop(JSAtom *atom, bool usePropCache)
52886: {
52887:     FrameEntry *lhs = frame.peek(-2);
52887:     FrameEntry *rhs = frame.peek(-1);
52887: 
52887:     /* If the incoming type will never PIC, take slow path. */
53025:     if (lhs->isTypeKnown() && lhs->getKnownType() != JSVAL_TYPE_OBJECT) {
56201:         jsop_setprop_slow(atom, usePropCache);
56037:         return true;
52887:     }
52887: 
53620:     JSOp op = JSOp(*PC);
53620: 
56738:     ic::PICInfo::Kind kind = (op == JSOP_SETMETHOD)
56738:                              ? ic::PICInfo::SETMETHOD
56738:                              : ic::PICInfo::SET;
56738:     PICGenInfo pic(kind, op, usePropCache);
52892:     pic.atom = atom;
52887: 
75775:     if (monitored(PC)) {
75790:         types::TypeSet *types = frame.getTypeSet(rhs);
75775:         pic.typeMonitored = true;
75794:         pic.rhsTypes = (types::ClonedTypeSet *) ::js_calloc(sizeof(types::ClonedTypeSet));
75794:         if (!pic.rhsTypes) {
75794:             js_ReportOutOfMemory(cx);
75794:             return false;
75794:         }
75794:         types::TypeSet::Clone(cx, script, types, pic.rhsTypes);
75775:     } else {
75775:         pic.typeMonitored = false;
75794:         pic.rhsTypes = NULL;
75775:     }
75775: 
60595:     RESERVE_IC_SPACE(masm);
60595:     RESERVE_OOL_SPACE(stubcc.masm);
60595: 
52887:     /* Guard that the type is an object. */
52887:     Jump typeCheck;
52887:     if (!lhs->isTypeKnown()) {
52887:         RegisterID reg = frame.tempRegForType(lhs);
52887:         pic.typeReg = reg;
52887: 
52887:         /* Start the hot path where it's easy to patch it. */
53270:         pic.fastPathStart = masm.label();
53025:         Jump j = masm.testObject(Assembler::NotEqual, reg);
52887: 
53588:         pic.typeCheck = stubcc.linkExit(j, Uses(2));
52887:         stubcc.leave();
53492: 
52892:         stubcc.masm.move(ImmPtr(atom), Registers::ArgReg1);
56201:         if (usePropCache)
57766:             OOL_STUBCALL(STRICT_VARIANT(stubs::SetName));
56201:         else
57766:             OOL_STUBCALL(STRICT_VARIANT(stubs::SetPropNoCache));
52887:         typeCheck = stubcc.masm.jump();
52887:         pic.hasTypeCheck = true;
52887:     } else {
53270:         pic.fastPathStart = masm.label();
52887:         pic.hasTypeCheck = false;
52887:         pic.typeReg = Registers::ReturnReg;
52887:     }
52887: 
75846:     frame.forgetConstantData(lhs);
75846: 
52887:     /* Get the object into a mutable register. */
52887:     RegisterID objReg = frame.copyDataIntoReg(lhs);
52887:     pic.objReg = objReg;
52887: 
52887:     /* Get info about the RHS and pin it. */
52887:     ValueRemat vr;
54160:     frame.pinEntry(rhs, vr);
52887:     pic.vr = vr;
52887: 
52887:     RegisterID shapeReg = frame.allocReg();
52887:     pic.shapeReg = shapeReg;
52887: 
54160:     frame.unpinEntry(vr);
52887: 
52887:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52887:     pic.shapeGuard = masm.label();
60595:     DataLabel32 inlineShapeData;
53270:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53270:                                     Imm32(int32(JSObjectMap::INVALID_SHAPE)),
60595:                                     inlineShapeData);
60595:     Label afterInlineShapeJump = masm.label();
52887: 
52887:     /* Slow path. */
52887:     {
53588:         pic.slowPathStart = stubcc.linkExit(j, Uses(2));
52887: 
52887:         stubcc.leave();
56738:         passICAddress(&pic);
57766:         pic.slowPathCall = OOL_STUBCALL(ic::SetProp);
60595:         CHECK_OOL_SPACE();
52887:     }
52887: 
52887:     /* Load dslots. */
60595:     Label dslotsLoadLabel = masm.loadPtrWithPatchToLEA(Address(objReg, offsetof(JSObject, slots)),
60595:                                                        objReg);
52887: 
52887:     /* Store RHS into object slot. */
53315:     Address slot(objReg, 1 << 24);
60781:     DataLabel32 inlineValueStore = masm.storeValueWithAddressOffsetPatch(vr, slot);
56575:     pic.fastPathRejoin = masm.label();
53315: 
52887:     frame.freeReg(objReg);
52887:     frame.freeReg(shapeReg);
52887: 
52887:     /* "Pop under", taking out object (LHS) and leaving RHS. */
52887:     frame.shimmy(1);
52887: 
52887:     /* Finish slow path. */
52887:     {
52887:         if (pic.hasTypeCheck)
52887:             typeCheck.linkTo(stubcc.masm.label(), &stubcc.masm);
53088:         stubcc.rejoin(Changes(1));
52887:     }
52887: 
56037:     RETURN_IF_OOM(false);
60590: 
60590:     SetPropLabels &labels = pic.setPropLabels();
60595:     labels.setInlineShapeData(masm, pic.shapeGuard, inlineShapeData);
60595:     labels.setDslotsLoad(masm, pic.fastPathRejoin, dslotsLoadLabel, vr);
60595:     labels.setInlineValueStore(masm, pic.fastPathRejoin, inlineValueStore, vr);
60595:     labels.setInlineShapeJump(masm, pic.shapeGuard, afterInlineShapeJump);
53270: 
52887:     pics.append(pic);
56037:     return true;
52886: }
60598: 
53054: void
75790: mjit::Compiler::jsop_name(JSAtom *atom, JSValueType type)
53054: {
56738:     PICGenInfo pic(ic::PICInfo::NAME, JSOp(*PC), true);
53054: 
60594:     RESERVE_IC_SPACE(masm);
60594: 
53054:     pic.shapeReg = frame.allocReg();
53054:     pic.objReg = frame.allocReg();
53054:     pic.typeReg = Registers::ReturnReg;
53054:     pic.atom = atom;
53054:     pic.hasTypeCheck = false;
53270:     pic.fastPathStart = masm.label();
53054: 
60594:     /* There is no inline implementation, so we always jump to the slow path or to a stub. */
53054:     pic.shapeGuard = masm.label();
60594:     Jump inlineJump = masm.jump();
53054:     {
60594:         RESERVE_OOL_SPACE(stubcc.masm);
60594:         pic.slowPathStart = stubcc.linkExit(inlineJump, Uses(0));
53054:         stubcc.leave();
56738:         passICAddress(&pic);
57766:         pic.slowPathCall = OOL_STUBCALL(ic::Name);
60594:         CHECK_OOL_SPACE();
60594:     }
56575:     pic.fastPathRejoin = masm.label();
60594: 
60594:     /* Initialize op labels. */
60594:     ScopeNameLabels &labels = pic.scopeNameLabels();
60594:     labels.setInlineJump(masm, pic.fastPathStart, inlineJump);
60594: 
75635:     /* Always test for undefined. */
75635:     Jump undefinedGuard = masm.testUndefined(Assembler::Equal, pic.shapeReg);
59895: 
75846:     /*
75846:      * We can't optimize away the PIC for the NAME access itself, but if we've
75846:      * only seen a single value pushed by this access, mark it as such and
75846:      * recompile if a different value becomes possible.
75846:      */
75846:     JSObject *singleton = pushedSingleton(0);
75846:     if (singleton) {
75846:         frame.push(ObjectValue(*singleton));
75846:         frame.freeReg(pic.shapeReg);
75846:         frame.freeReg(pic.objReg);
75846:     } else {
75790:         frame.pushRegs(pic.shapeReg, pic.objReg, type);
75846:     }
53054: 
53088:     stubcc.rejoin(Changes(1));
53054: 
75635:     stubcc.linkExit(undefinedGuard, Uses(0));
75635:     stubcc.leave();
75635:     OOL_STUBCALL(stubs::UndefinedHelper);
75846:     stubcc.rejoin(Changes(1));
75635: 
53054:     pics.append(pic);
53054: }
53054: 
56037: bool
54847: mjit::Compiler::jsop_xname(JSAtom *atom)
54847: {
56738:     PICGenInfo pic(ic::PICInfo::XNAME, JSOp(*PC), true);
54847: 
54847:     FrameEntry *fe = frame.peek(-1);
54847:     if (fe->isNotType(JSVAL_TYPE_OBJECT)) {
75790:         return jsop_getprop(atom, knownPushedType(0));
54847:     }
54847: 
54847:     if (!fe->isTypeKnown()) {
54847:         Jump notObject = frame.testObject(Assembler::NotEqual, fe);
54847:         stubcc.linkExit(notObject, Uses(1));
54847:     }
54847: 
75846:     frame.forgetConstantData(fe);
75846: 
60594:     RESERVE_IC_SPACE(masm);
60594: 
54847:     pic.shapeReg = frame.allocReg();
54847:     pic.objReg = frame.copyDataIntoReg(fe);
54847:     pic.typeReg = Registers::ReturnReg;
54847:     pic.atom = atom;
54847:     pic.hasTypeCheck = false;
54847:     pic.fastPathStart = masm.label();
54847: 
60594:     /* There is no inline implementation, so we always jump to the slow path or to a stub. */
54847:     pic.shapeGuard = masm.label();
60594:     Jump inlineJump = masm.jump();
54847:     {
60594:         RESERVE_OOL_SPACE(stubcc.masm);
60594:         pic.slowPathStart = stubcc.linkExit(inlineJump, Uses(1));
54847:         stubcc.leave();
56738:         passICAddress(&pic);
57766:         pic.slowPathCall = OOL_STUBCALL(ic::XName);
60594:         CHECK_OOL_SPACE();
56575:     }
56575: 
56575:     pic.fastPathRejoin = masm.label();
60594: 
60594:     RETURN_IF_OOM(false);
60594: 
60594:     /* Initialize op labels. */
60598:     ScopeNameLabels &labels = pic.scopeNameLabels();
60594:     labels.setInlineJumpOffset(masm.differenceBetween(pic.fastPathStart, inlineJump));
60594: 
54847:     frame.pop();
75790:     frame.pushRegs(pic.shapeReg, pic.objReg, knownPushedType(0));
57802: 
75635:     /* Always test for undefined. */
75635:     Jump undefinedGuard = masm.testUndefined(Assembler::Equal, pic.shapeReg);
54847: 
54847:     stubcc.rejoin(Changes(1));
54847: 
75635:     stubcc.linkExit(undefinedGuard, Uses(0));
75635:     stubcc.leave();
75635:     OOL_STUBCALL(stubs::UndefinedHelper);
75846:     stubcc.rejoin(Changes(1));
75635: 
54847:     pics.append(pic);
56037:     return true;
54847: }
54847: 
53055: void
60526: mjit::Compiler::jsop_bindname(JSAtom *atom, bool usePropCache)
53055: {
56738:     PICGenInfo pic(ic::PICInfo::BIND, JSOp(*PC), usePropCache);
53055: 
56586:     // This code does not check the frame flags to see if scopeChain has been
56586:     // set. Rather, it relies on the up-front analysis statically determining
56586:     // whether BINDNAME can be used, which reifies the scope chain at the
56586:     // prologue.
56602:     JS_ASSERT(analysis->usesScopeChain());
56586: 
53055:     pic.shapeReg = frame.allocReg();
53055:     pic.objReg = frame.allocReg();
53055:     pic.typeReg = Registers::ReturnReg;
60526:     pic.atom = atom;
53055:     pic.hasTypeCheck = false;
60593: 
60593:     RESERVE_IC_SPACE(masm);
53270:     pic.fastPathStart = masm.label();
53055: 
53244:     Address parent(pic.objReg, offsetof(JSObject, parent));
53840:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfScopeChain()), pic.objReg);
53055: 
53055:     pic.shapeGuard = masm.label();
60593:     Jump inlineJump = masm.branchPtr(Assembler::NotEqual, masm.payloadOf(parent), ImmPtr(0));
53055:     {
60593:         RESERVE_OOL_SPACE(stubcc.masm);
60593:         pic.slowPathStart = stubcc.linkExit(inlineJump, Uses(0));
53055:         stubcc.leave();
56738:         passICAddress(&pic);
57766:         pic.slowPathCall = OOL_STUBCALL(ic::BindName);
60593:         CHECK_OOL_SPACE();
56575:     }
56575: 
56575:     pic.fastPathRejoin = masm.label();
60593: 
60593:     /* Initialize op labels. */
60593:     BindNameLabels &labels = pic.bindNameLabels();
60593:     labels.setInlineJump(masm, pic.shapeGuard, inlineJump);
60593: 
75790:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, pic.objReg);
53055:     frame.freeReg(pic.shapeReg);
53055: 
53088:     stubcc.rejoin(Changes(1));
53055: 
53055:     pics.append(pic);
53055: }
60598: 
60598: #else /* !JS_POLYIC */
60598: 
52880: void
75708: mjit::Compiler::jsop_name(JSAtom *atom, JSValueType type, types::TypeSet *typeSet)
53054: {
53087:     prepareStubCall(Uses(0));
57766:     INLINE_STUBCALL(stubs::Name);
75708:     frame.pushSynced(type, typeSet);
53054: }
53054: 
56037: bool
54860: mjit::Compiler::jsop_xname(JSAtom *atom)
52880: {
75708:     return jsop_getprop(atom, knownPushedType(0), pushedTypeSet(0));
54860: }
60598: 
56037: bool
75708: mjit::Compiler::jsop_getprop(JSAtom *atom, JSValueType knownType, types::TypeSet *typeSet,
75708:                              bool typecheck, bool usePropCache)
54427: {
56201:     jsop_getprop_slow(atom, usePropCache);
56037:     return true;
52886: }
60598: 
53119: bool
52896: mjit::Compiler::jsop_callprop(JSAtom *atom)
52896: {
53119:     return jsop_callprop_slow(atom);
52896: }
60598: 
56037: bool
56201: mjit::Compiler::jsop_setprop(JSAtom *atom, bool usePropCache)
54427: {
56201:     jsop_setprop_slow(atom, usePropCache);
56037:     return true;
54427: }
60598: 
52896: void
60526: mjit::Compiler::jsop_bindname(JSAtom *atom, bool usePropCache)
53055: {
53055:     RegisterID reg = frame.allocReg();
53840:     Address scopeChain(JSFrameReg, JSStackFrame::offsetOfScopeChain());
53162:     masm.loadPtr(scopeChain, reg);
53055: 
53246:     Address address(reg, offsetof(JSObject, parent));
53246: 
53055:     Jump j = masm.branchPtr(Assembler::NotEqual, masm.payloadOf(address), ImmPtr(0));
53055: 
53088:     stubcc.linkExit(j, Uses(0));
53055:     stubcc.leave();
56201:     if (usePropCache) {
57766:         OOL_STUBCALL(stubs::BindName);
56201:     } else {
60526:         stubcc.masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:         OOL_STUBCALL(stubs::BindNameNoCache);
56201:     }
53055: 
53055:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, reg);
53055: 
53088:     stubcc.rejoin(Changes(1));
53055: }
52880: #endif
52880: 
52743: void
52741: mjit::Compiler::jsop_this()
52741: {
57787:     frame.pushThis();
57787: 
55713:     /* 
55713:      * In strict mode code, we don't wrap 'this'.
55713:      * In direct-call eval code, we wrapped 'this' before entering the eval.
55713:      * In global code, 'this' is always an object.
55713:      */
55713:     if (fun && !script->strictModeCode) {
57787:         FrameEntry *thisFe = frame.peek(-1);
57787:         if (!thisFe->isTypeKnown()) {
75645:             JSValueType type = knownThisType();
75645:             if (type != JSVAL_TYPE_OBJECT) {
57787:                 Jump notObj = frame.testObject(Assembler::NotEqual, thisFe);
55713:                 stubcc.linkExit(notObj, Uses(1));
52854:                 stubcc.leave();
57766:                 OOL_STUBCALL(stubs::This);
53088:                 stubcc.rejoin(Changes(1));
57671:             }
57787: 
57787:             // Now we know that |this| is an object.
57787:             frame.pop();
57787:             frame.learnThisIsObject();
57787:             frame.pushThis();
57787:         }
57787: 
57787:         JS_ASSERT(thisFe->isType(JSVAL_TYPE_OBJECT));
52741:     }
53023: }
52741: 
52741: void
53118: mjit::Compiler::jsop_gnameinc(JSOp op, VoidStubAtom stub, uint32 index)
52732: {
60526:     JSAtom *atom = script->getAtom(index);
60526: 
53511: #if defined JS_MONOIC
53511:     jsbytecode *next = &PC[JSOP_GNAMEINC_LENGTH];
56602:     bool pop = (JSOp(*next) == JSOP_POP) && !analysis->jumpTarget(next);
53511:     int amt = (op == JSOP_GNAMEINC || op == JSOP_INCGNAME) ? -1 : 1;
53511: 
53511:     if (pop || (op == JSOP_INCGNAME || op == JSOP_DECGNAME)) {
53511:         /* These cases are easy, the original value is not observed. */
53511: 
75790:         jsop_getgname(index, JSVAL_TYPE_UNKNOWN);
53511:         // V
53511: 
53511:         frame.push(Int32Value(amt));
53511:         // V 1
53511: 
53511:         /* Use sub since it calls ValueToNumber instead of string concat. */
75851:         jsop_binary(JSOP_SUB, stubs::Sub, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
53511:         // N+1
53511: 
53511:         jsop_bindgname();
53511:         // V+1 OBJ
53511: 
53511:         frame.dup2();
53511:         // V+1 OBJ V+1 OBJ
53511: 
53511:         frame.shift(-3);
53511:         // OBJ OBJ V+1
53511: 
53511:         frame.shift(-1);
53511:         // OBJ V+1
53511: 
60526:         jsop_setgname(atom, false);
53511:         // V+1
53511: 
53511:         if (pop)
53511:             frame.pop();
53511:     } else {
53511:         /* The pre-value is observed, making this more tricky. */
53511: 
75790:         jsop_getgname(index, JSVAL_TYPE_UNKNOWN);
53511:         // V
53511: 
53511:         jsop_pos();
53511:         // N
53511: 
53511:         frame.dup();
53511:         // N N
53511: 
53511:         frame.push(Int32Value(-amt));
53511:         // N N 1
53511: 
75851:         jsop_binary(JSOP_ADD, stubs::Add, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
53511:         // N N+1
53511: 
53511:         jsop_bindgname();
53511:         // N N+1 OBJ
53511: 
53511:         frame.dup2();
53511:         // N N+1 OBJ N+1 OBJ
53511: 
53511:         frame.shift(-3);
53511:         // N OBJ OBJ N+1
53511: 
53511:         frame.shift(-1);
53511:         // N OBJ N+1
53511: 
60526:         jsop_setgname(atom, false);
53511:         // N N+1
53511: 
53511:         frame.pop();
53511:         // N
53511:     }
53511: 
53511:     if (pop)
53511:         PC += JSOP_POP_LENGTH;
53511: #else
53087:     prepareStubCall(Uses(0));
52732:     masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stub);
75630:     frame.pushSynced(knownPushedType(0));
53511: #endif
53511: 
53511:     PC += JSOP_GNAMEINC_LENGTH;
52732: }
52732: 
56037: bool
53118: mjit::Compiler::jsop_nameinc(JSOp op, VoidStubAtom stub, uint32 index)
53118: {
53118:     JSAtom *atom = script->getAtom(index);
53119: #if defined JS_POLYIC
53118:     jsbytecode *next = &PC[JSOP_NAMEINC_LENGTH];
56602:     bool pop = (JSOp(*next) == JSOP_POP) && !analysis->jumpTarget(next);
53118:     int amt = (op == JSOP_NAMEINC || op == JSOP_INCNAME) ? -1 : 1;
53118: 
53118:     if (pop || (op == JSOP_INCNAME || op == JSOP_DECNAME)) {
53118:         /* These cases are easy, the original value is not observed. */
53118: 
75716:         jsop_bindname(atom, false);
75708:         // OBJ
75708: 
75790:         jsop_name(atom, JSVAL_TYPE_UNKNOWN);
75708:         // OBJ V
53118: 
53118:         frame.push(Int32Value(amt));
75708:         // OBJ V 1
53118: 
53118:         /* Use sub since it calls ValueToNumber instead of string concat. */
75708:         frame.syncAt(-3);
75851:         jsop_binary(JSOP_SUB, stubs::Sub, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
75708:         // OBJ N+1
53118: 
56201:         if (!jsop_setprop(atom, false))
56037:             return false;
75716:         // N+1
53118: 
53118:         if (pop)
53118:             frame.pop();
53118:     } else {
53118:         /* The pre-value is observed, making this more tricky. */
53118: 
75790:         jsop_name(atom, JSVAL_TYPE_UNKNOWN);
53118:         // V
53118: 
53118:         jsop_pos();
53118:         // N
53118: 
75716:         jsop_bindname(atom, false);
75708:         // N OBJ
75708: 
75708:         frame.dupAt(-2);
75708:         // N OBJ N
53118: 
53118:         frame.push(Int32Value(-amt));
75708:         // N OBJ N 1
75708: 
75708:         frame.syncAt(-3);
75851:         jsop_binary(JSOP_ADD, stubs::Add, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
53118:         // N OBJ N+1
53118: 
56201:         if (!jsop_setprop(atom, false))
56037:             return false;
53118:         // N N+1
53118: 
53118:         frame.pop();
53118:         // N
53118:     }
53119: 
53119:     if (pop)
53119:         PC += JSOP_POP_LENGTH;
53118: #else
53122:     prepareStubCall(Uses(0));
53118:     masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stub);
75630:     frame.pushSynced(knownPushedType(0));
53118: #endif
53118: 
53118:     PC += JSOP_NAMEINC_LENGTH;
56037:     return true;
54427: }
54427: 
56037: bool
52746: mjit::Compiler::jsop_propinc(JSOp op, VoidStubAtom stub, uint32 index)
52746: {
52746:     JSAtom *atom = script->getAtom(index);
53119: #if defined JS_POLYIC
53172:     FrameEntry *objFe = frame.peek(-1);
53172:     if (!objFe->isTypeKnown() || objFe->getKnownType() == JSVAL_TYPE_OBJECT) {
52916:         jsbytecode *next = &PC[JSOP_PROPINC_LENGTH];
56602:         bool pop = (JSOp(*next) == JSOP_POP) && !analysis->jumpTarget(next);
52916:         int amt = (op == JSOP_PROPINC || op == JSOP_INCPROP) ? -1 : 1;
52916: 
52916:         if (pop || (op == JSOP_INCPROP || op == JSOP_DECPROP)) {
75708:             /*
75708:              * These cases are easier, the original value is not observed.
75708:              * Use a consistent stack layout for the value as the observed case,
75708:              * so that if the operation overflows the stub will be able to find
75708:              * the modified object.
75708:              */
52916: 
52916:             frame.dup();
52916:             // OBJ OBJ
52916: 
75708:             frame.dup();
75708:             // OBJ * OBJ
75708: 
75790:             if (!jsop_getprop(atom, JSVAL_TYPE_UNKNOWN))
56037:                 return false;
75708:             // OBJ * V
52916: 
53081:             frame.push(Int32Value(amt));
75708:             // OBJ * V 1
52916: 
52916:             /* Use sub since it calls ValueToNumber instead of string concat. */
75708:             frame.syncAt(-4);
75851:             jsop_binary(JSOP_SUB, stubs::Sub, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
75708:             // OBJ * V+1
75708: 
75708:             frame.shimmy(1);
52916:             // OBJ V+1
52916: 
56201:             if (!jsop_setprop(atom, false))
56037:                 return false;
52916:             // V+1
52916: 
52916:             if (pop)
52916:                 frame.pop();
52916:         } else {
52916:             /* The pre-value is observed, making this more tricky. */
52916: 
52916:             frame.dup();
52916:             // OBJ OBJ 
52916: 
75790:             if (!jsop_getprop(atom, JSVAL_TYPE_UNKNOWN))
56037:                 return false;
52916:             // OBJ V
52916: 
52916:             jsop_pos();
52916:             // OBJ N
52916: 
52916:             frame.dup();
52916:             // OBJ N N
52916: 
53081:             frame.push(Int32Value(-amt));
52916:             // OBJ N N 1
52916: 
75708:             frame.syncAt(-4);
75851:             jsop_binary(JSOP_ADD, stubs::Add, JSVAL_TYPE_UNKNOWN, pushedTypeSet(0));
52916:             // OBJ N N+1
52916: 
52916:             frame.dupAt(-3);
52916:             // OBJ N N+1 OBJ
52916: 
52916:             frame.dupAt(-2);
52916:             // OBJ N N+1 OBJ N+1
52916: 
56201:             if (!jsop_setprop(atom, false))
56037:                 return false;
52916:             // OBJ N N+1 N+1
52916: 
52916:             frame.popn(2);
52916:             // OBJ N
52916: 
52916:             frame.shimmy(1);
52916:             // N
52916:         }
53119:         if (pop)
53119:             PC += JSOP_POP_LENGTH;
53172:     } else
53173: #endif
53172:     {
53087:         prepareStubCall(Uses(1));
52746:         masm.move(ImmPtr(atom), Registers::ArgReg1);
57766:         INLINE_STUBCALL(stub);
52746:         frame.pop();
75708:         pushSyncedEntry(0);
53172:     }
52916: 
52916:     PC += JSOP_PROPINC_LENGTH;
56037:     return true;
52746: }
52746: 
61055: bool
53404: mjit::Compiler::iter(uintN flags)
53404: {
53404:     FrameEntry *fe = frame.peek(-1);
53404: 
53404:     /*
53404:      * Stub the call if this is not a simple 'for in' loop or if the iterated
53404:      * value is known to not be an object.
53404:      */
53404:     if ((flags != JSITER_ENUMERATE) || fe->isNotType(JSVAL_TYPE_OBJECT)) {
53404:         prepareStubCall(Uses(1));
53404:         masm.move(Imm32(flags), Registers::ArgReg1);
57766:         INLINE_STUBCALL(stubs::Iter);
53404:         frame.pop();
75790:         frame.pushSynced(JSVAL_TYPE_UNKNOWN);
61055:         return true;
53404:     }
53404: 
53404:     if (!fe->isTypeKnown()) {
53404:         Jump notObject = frame.testObject(Assembler::NotEqual, fe);
53404:         stubcc.linkExit(notObject, Uses(1));
53404:     }
53404: 
75846:     frame.forgetConstantData(fe);
75846: 
53404:     RegisterID reg = frame.tempRegForData(fe);
53404: 
53404:     frame.pinReg(reg);
53404:     RegisterID ioreg = frame.allocReg();  /* Will hold iterator JSObject */
53404:     RegisterID nireg = frame.allocReg();  /* Will hold NativeIterator */
53404:     RegisterID T1 = frame.allocReg();
53404:     RegisterID T2 = frame.allocReg();
53404:     frame.unpinReg(reg);
53404: 
59954:     /* Fetch the most recent iterator. */
59954:     masm.loadPtr(&script->compartment->nativeIterCache.last, ioreg);
53404: 
53404:     /* Test for NULL. */
53404:     Jump nullIterator = masm.branchTest32(Assembler::Zero, ioreg, ioreg);
53404:     stubcc.linkExit(nullIterator, Uses(1));
53404: 
60777:     /* Get NativeIterator from iter obj. */
60777:     masm.loadObjPrivate(ioreg, nireg);
53404: 
53404:     /* Test for active iterator. */
53404:     Address flagsAddr(nireg, offsetof(NativeIterator, flags));
53404:     masm.load32(flagsAddr, T1);
62573:     Jump activeIterator = masm.branchTest32(Assembler::NonZero, T1,
62573:                                             Imm32(JSITER_ACTIVE|JSITER_UNREUSABLE));
53404:     stubcc.linkExit(activeIterator, Uses(1));
53404: 
53404:     /* Compare shape of object with iterator. */
53404:     masm.loadShape(reg, T1);
53404:     masm.loadPtr(Address(nireg, offsetof(NativeIterator, shapes_array)), T2);
53404:     masm.load32(Address(T2, 0), T2);
53404:     Jump mismatchedObject = masm.branch32(Assembler::NotEqual, T1, T2);
53404:     stubcc.linkExit(mismatchedObject, Uses(1));
53404: 
53404:     /* Compare shape of object's prototype with iterator. */
75679:     masm.loadPtr(Address(reg, offsetof(JSObject, type)), T1);
75679:     masm.loadPtr(Address(T1, offsetof(types::TypeObject, proto)), T1);
53404:     masm.loadShape(T1, T1);
53404:     masm.loadPtr(Address(nireg, offsetof(NativeIterator, shapes_array)), T2);
53404:     masm.load32(Address(T2, sizeof(uint32)), T2);
53404:     Jump mismatchedProto = masm.branch32(Assembler::NotEqual, T1, T2);
53404:     stubcc.linkExit(mismatchedProto, Uses(1));
53404: 
53404:     /*
53404:      * Compare object's prototype's prototype with NULL. The last native
53404:      * iterator will always have a prototype chain length of one
53404:      * (i.e. it must be a plain object), so we do not need to generate
53404:      * a loop here.
53404:      */
75679:     masm.loadPtr(Address(reg, offsetof(JSObject, type)), T1);
75679:     masm.loadPtr(Address(T1, offsetof(types::TypeObject, proto)), T1);
75679:     masm.loadPtr(Address(T1, offsetof(JSObject, type)), T1);
75679:     masm.loadPtr(Address(T1, offsetof(types::TypeObject, proto)), T1);
53404:     Jump overlongChain = masm.branchPtr(Assembler::NonZero, T1, T1);
53404:     stubcc.linkExit(overlongChain, Uses(1));
53404: 
53404:     /* Found a match with the most recent iterator. Hooray! */
53404: 
53404:     /* Mark iterator as active. */
60777:     masm.storePtr(reg, Address(nireg, offsetof(NativeIterator, obj)));
53404:     masm.load32(flagsAddr, T1);
53404:     masm.or32(Imm32(JSITER_ACTIVE), T1);
53404:     masm.store32(T1, flagsAddr);
53404: 
53404:     /* Chain onto the active iterator stack. */
53404:     masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), T1);
53404:     masm.loadPtr(Address(T1, offsetof(JSContext, enumerators)), T2);
53404:     masm.storePtr(T2, Address(nireg, offsetof(NativeIterator, next)));
53404:     masm.storePtr(ioreg, Address(T1, offsetof(JSContext, enumerators)));
53404: 
53404:     frame.freeReg(nireg);
53404:     frame.freeReg(T1);
53404:     frame.freeReg(T2);
53404: 
53404:     stubcc.leave();
53404:     stubcc.masm.move(Imm32(flags), Registers::ArgReg1);
57766:     OOL_STUBCALL(stubs::Iter);
53404: 
53404:     /* Push the iterator object. */
53404:     frame.pop();
75790:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, ioreg);
53404: 
53404:     stubcc.rejoin(Changes(1));
61055: 
61055:     return true;
53404: }
53404: 
52737: /*
52737:  * This big nasty function emits a fast-path for native iterators, producing
52737:  * a temporary value on the stack for FORLOCAL,ARG,GLOBAL,etc ops to use.
52737:  */
52737: void
52737: mjit::Compiler::iterNext()
52737: {
52737:     FrameEntry *fe = frame.peek(-1);
52737:     RegisterID reg = frame.tempRegForData(fe);
52737: 
52737:     /* Is it worth trying to pin this longer? Prolly not. */
52737:     frame.pinReg(reg);
52737:     RegisterID T1 = frame.allocReg();
52737:     frame.unpinReg(reg);
52737: 
52737:     /* Test clasp */
56575:     Jump notFast = masm.testObjClass(Assembler::NotEqual, reg, &js_IteratorClass);
53088:     stubcc.linkExit(notFast, Uses(1));
52737: 
53178:     /* Get private from iter obj. */
60777:     masm.loadObjPrivate(reg, T1);
52737: 
52737:     RegisterID T3 = frame.allocReg();
52973:     RegisterID T4 = frame.allocReg();
52737: 
61055:     /* Test for a value iterator, which could come through an Iterator object. */
52737:     masm.load32(Address(T1, offsetof(NativeIterator, flags)), T3);
53841:     notFast = masm.branchTest32(Assembler::NonZero, T3, Imm32(JSITER_FOREACH));
53088:     stubcc.linkExit(notFast, Uses(1));
52973: 
52973:     RegisterID T2 = frame.allocReg();
52973: 
52973:     /* Get cursor. */
52973:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_cursor)), T2);
52973: 
52973:     /* Test if the jsid is a string. */
52973:     masm.loadPtr(T2, T3);
52973:     masm.move(T3, T4);
52973:     masm.andPtr(Imm32(JSID_TYPE_MASK), T4);
52973:     notFast = masm.branchTestPtr(Assembler::NonZero, T4, T4);
53088:     stubcc.linkExit(notFast, Uses(1));
52737: 
52737:     /* It's safe to increase the cursor now. */
52973:     masm.addPtr(Imm32(sizeof(jsid)), T2, T4);
52973:     masm.storePtr(T4, Address(T1, offsetof(NativeIterator, props_cursor)));
52973: 
52973:     frame.freeReg(T4);
52737:     frame.freeReg(T1);
52973:     frame.freeReg(T2);
52737: 
52737:     stubcc.leave();
57766:     OOL_STUBCALL(stubs::IterNext);
52737: 
53025:     frame.pushUntypedPayload(JSVAL_TYPE_STRING, T3);
52737: 
52737:     /* Join with the stub call. */
53088:     stubcc.rejoin(Changes(1));
52737: }
52737: 
56766: bool
52737: mjit::Compiler::iterMore()
52737: {
75649:     jsbytecode *target = &PC[JSOP_MOREITER_LENGTH];
75649:     JSOp next = JSOp(*target);
75649:     JS_ASSERT(next == JSOP_IFNE || next == JSOP_IFNEX);
75649: 
75649:     target += (next == JSOP_IFNE)
75649:               ? GET_JUMP_OFFSET(target)
75649:               : GET_JUMPX_OFFSET(target);
75649: 
75649:     fixDoubleTypes(Uses(0));
75649:     if (!frame.syncForBranch(target, Uses(1)))
75649:         return false;
75649: 
52737:     FrameEntry *fe = frame.peek(-1);
52737:     RegisterID reg = frame.tempRegForData(fe);
75649:     RegisterID tempreg = frame.allocReg();
52737: 
52737:     /* Test clasp */
56575:     Jump notFast = masm.testObjClass(Assembler::NotEqual, reg, &js_IteratorClass);
53277:     stubcc.linkExitForBranch(notFast);
52737: 
53178:     /* Get private from iter obj. */
75716:     masm.loadObjPrivate(reg, reg);
52737: 
61055:     /* Test that the iterator supports fast iteration. */
75716:     notFast = masm.branchTest32(Assembler::NonZero, Address(reg, offsetof(NativeIterator, flags)),
61055:                                 Imm32(JSITER_FOREACH));
61055:     stubcc.linkExitForBranch(notFast);
61055: 
52737:     /* Get props_cursor, test */
75649:     masm.loadPtr(Address(reg, offsetof(NativeIterator, props_cursor)), tempreg);
75649:     masm.loadPtr(Address(reg, offsetof(NativeIterator, props_end)), reg);
75649: 
75649:     Jump jFast = masm.branchPtr(Assembler::LessThan, tempreg, reg);
52737: 
52737:     stubcc.leave();
57766:     OOL_STUBCALL(stubs::IterMore);
53133:     Jump j = stubcc.masm.branchTest32(Assembler::NonZero, Registers::ReturnReg,
53133:                                       Registers::ReturnReg);
53133: 
52737:     PC += JSOP_MOREITER_LENGTH;
52737:     PC += js_CodeSpec[next].length;
52737: 
53088:     stubcc.rejoin(Changes(1));
75649:     frame.freeReg(tempreg);
53133: 
56766:     return jumpAndTrace(jFast, target, &j);
52737: }
52737: 
52815: void
53404: mjit::Compiler::iterEnd()
53404: {
53404:     FrameEntry *fe= frame.peek(-1);
53404:     RegisterID reg = frame.tempRegForData(fe);
53404: 
53404:     frame.pinReg(reg);
53404:     RegisterID T1 = frame.allocReg();
53404:     frame.unpinReg(reg);
53404: 
53404:     /* Test clasp */
56575:     Jump notIterator = masm.testObjClass(Assembler::NotEqual, reg, &js_IteratorClass);
53404:     stubcc.linkExit(notIterator, Uses(1));
53404: 
60777:     /* Get private from iter obj. */
60777:     masm.loadObjPrivate(reg, T1);
53404: 
53404:     RegisterID T2 = frame.allocReg();
53404: 
53404:     /* Load flags. */
53404:     Address flagAddr(T1, offsetof(NativeIterator, flags));
53404:     masm.loadPtr(flagAddr, T2);
53404: 
62573:     /* Test for a normal enumerate iterator. */
62573:     Jump notEnumerate = masm.branchTest32(Assembler::Zero, T2, Imm32(JSITER_ENUMERATE));
62413:     stubcc.linkExit(notEnumerate, Uses(1));
53404: 
53404:     /* Clear active bit. */
53404:     masm.and32(Imm32(~JSITER_ACTIVE), T2);
53404:     masm.storePtr(T2, flagAddr);
53404: 
53404:     /* Reset property cursor. */
53404:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_array)), T2);
53404:     masm.storePtr(T2, Address(T1, offsetof(NativeIterator, props_cursor)));
53404: 
53404:     /* Advance enumerators list. */
53404:     masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), T2);
53404:     masm.loadPtr(Address(T1, offsetof(NativeIterator, next)), T1);
53404:     masm.storePtr(T1, Address(T2, offsetof(JSContext, enumerators)));
53404: 
53404:     frame.freeReg(T1);
53404:     frame.freeReg(T2);
53404: 
53404:     stubcc.leave();
57766:     OOL_STUBCALL(stubs::EndIter);
53404: 
53404:     frame.pop();
53404: 
53404:     stubcc.rejoin(Changes(1));
53404: }
53404: 
53404: void
52815: mjit::Compiler::jsop_eleminc(JSOp op, VoidStub stub)
52815: {
53087:     prepareStubCall(Uses(2));
57766:     INLINE_STUBCALL(stub);
52815:     frame.popn(2);
75708:     pushSyncedEntry(0);
52815: }
52815: 
52826: void
52826: mjit::Compiler::jsop_getgname_slow(uint32 index)
52826: {
53087:     prepareStubCall(Uses(0));
57766:     INLINE_STUBCALL(stubs::GetGlobalName);
75790:     frame.pushSynced(JSVAL_TYPE_UNKNOWN);
52826: }
52826: 
52826: void
52826: mjit::Compiler::jsop_bindgname()
52826: {
52826:     if (script->compileAndGo && globalObj) {
53081:         frame.push(ObjectValue(*globalObj));
52826:         return;
52826:     }
52826: 
52826:     /* :TODO: this is slower than it needs to be. */
53087:     prepareStubCall(Uses(0));
57766:     INLINE_STUBCALL(stubs::BindGlobalName);
52826:     frame.takeReg(Registers::ReturnReg);
75790:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52826: }
52826: 
52826: void
75790: mjit::Compiler::jsop_getgname(uint32 index, JSValueType type)
52826: {
57823:     /* Optimize undefined, NaN and Infinity. */
57823:     JSAtom *atom = script->getAtom(index);
57823:     if (atom == cx->runtime->atomState.typeAtoms[JSTYPE_VOID]) {
57823:         frame.push(UndefinedValue());
57823:         return;
57823:     }
57823:     if (atom == cx->runtime->atomState.NaNAtom) {
57823:         frame.push(cx->runtime->NaNValue);
57823:         return;
57823:     }
57823:     if (atom == cx->runtime->atomState.InfinityAtom) {
57823:         frame.push(cx->runtime->positiveInfinityValue);
57823:         return;
57823:     }
75845: 
75846:     /* Optimize singletons like Math for JSOP_CALLPROP. */
75845:     JSObject *obj = pushedSingleton(0);
75846:     if (obj && testSingletonProperty(globalObj, ATOM_TO_JSID(atom))) {
75845:         frame.push(ObjectValue(*obj));
75845:         return;
75845:     }
75846: 
53119: #if defined JS_MONOIC
52826:     jsop_bindgname();
52826: 
52826:     FrameEntry *fe = frame.peek(-1);
53025:     JS_ASSERT(fe->isTypeKnown() && fe->getKnownType() == JSVAL_TYPE_OBJECT);
52826: 
62386:     GetGlobalNameICInfo ic;
58198:     RESERVE_IC_SPACE(masm);
52826:     RegisterID objReg;
52826:     Jump shapeGuard;
52826: 
62386:     ic.usePropertyCache = true;
62386: 
62386:     ic.fastPathStart = masm.label();
52826:     if (fe->isConstant()) {
53081:         JSObject *obj = &fe->getValue().toObject();
52826:         frame.pop();
52826:         JS_ASSERT(obj->isNative());
52826: 
52826:         objReg = frame.allocReg();
52826: 
53531:         masm.load32FromImm(&obj->objShape, objReg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, objReg,
62386:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)), ic.shape);
52826:         masm.move(ImmPtr(obj), objReg);
52826:     } else {
52826:         objReg = frame.ownRegForData(fe);
52826:         frame.pop();
52826:         RegisterID reg = frame.allocReg();
52826: 
53445:         masm.loadShape(objReg, reg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, reg,
62386:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)), ic.shape);
52826:         frame.freeReg(reg);
52826:     }
62386:     stubcc.linkExit(shapeGuard, Uses(0));
52826: 
52826:     stubcc.leave();
62386:     passMICAddress(ic);
62386:     ic.slowPathCall = OOL_STUBCALL(ic::GetGlobalName);
52826: 
52826:     /* Garbage value. */
52826:     uint32 slot = 1 << 24;
52826: 
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52826:     Address address(objReg, slot);
53269:     
53269:     /* Allocate any register other than objReg. */
60592:     RegisterID treg = frame.allocReg();
53269:     /* After dreg is loaded, it's safe to clobber objReg. */
60592:     RegisterID dreg = objReg;
53269: 
62386:     ic.load = masm.loadValueWithAddressOffsetPatch(address, treg, dreg);
53269: 
75790:     frame.pushRegs(treg, dreg, type);
52826: 
53088:     stubcc.rejoin(Changes(1));
62385: 
62386:     getGlobalNames.append(ic);
53269: 
52826: #else
52826:     jsop_getgname_slow(index);
52826: #endif
75635: 
75635:     /*
75635:      * Note: no undefined check is needed for GNAME opcodes. These were not declared with
75635:      * 'var', so cannot be undefined without triggering an error or having been a pre-existing
75635:      * global whose value is undefined (which type inference will know about).
75635:      */
52826: }
52826: 
63236: /*
63236:  * Generate just the epilogue code that is specific to callgname. The rest
63236:  * is shared with getgname.
63236:  */
63236: void
63236: mjit::Compiler::jsop_callgname_epilogue()
63236: {
63236:     /*
63236:      * This slow path does the same thing as the interpreter.
63236:      */
63236:     if (!script->compileAndGo) {
63236:         prepareStubCall(Uses(1));
63236:         INLINE_STUBCALL(stubs::PushImplicitThisForGlobal);
75760:         frame.pushSynced(JSVAL_TYPE_UNKNOWN);
63236:         return;
63236:     }
63236: 
63236:     /* Fast path for known-not-an-object callee. */
63236:     FrameEntry *fval = frame.peek(-1);
63236:     if (fval->isNotType(JSVAL_TYPE_OBJECT)) {
63236:         frame.push(UndefinedValue());
63236:         return;
63236:     }
63236: 
75846:     /* Paths for known object callee. */
75846:     if (fval->isConstant()) {
75846:         JSObject *obj = &fval->getValue().toObject();
75846:         if (obj->getParent() == globalObj) {
75846:             frame.push(UndefinedValue());
75846:         } else {
75846:             prepareStubCall(Uses(1));
75846:             INLINE_STUBCALL(stubs::PushImplicitThisForGlobal);
75846:             frame.pushSynced(JSVAL_TYPE_UNKNOWN);
75846:         }
75846:         return;
75846:     }
75846: 
63236:     /*
63236:      * Optimized version. This inlines the common case, calling a
63236:      * (non-proxied) function that has the same global as the current
63236:      * script. To make the code simpler, we:
63236:      *      1. test the stronger property that the callee's parent is
63236:      *         equal to the global of the current script, and
63236:      *      2. bake in the global of the current script, which is why
63236:      *         this optimized path requires compile-and-go.
63236:      */
63236: 
63236:     /* If the callee is not an object, jump to the inline fast path. */
63236:     MaybeRegisterID typeReg = frame.maybePinType(fval);
63236:     RegisterID objReg = frame.copyDataIntoReg(fval);
63236: 
63236:     MaybeJump isNotObj;
63236:     if (!fval->isType(JSVAL_TYPE_OBJECT)) {
63236:         isNotObj = frame.testObject(Assembler::NotEqual, fval);
63236:         frame.maybeUnpinReg(typeReg);
63236:     }
63236: 
63236:     /*
63236:      * If the callee is not a function, jump to OOL slow path.
63236:      */
63236:     Jump notFunction = masm.testFunction(Assembler::NotEqual, objReg);
63236:     stubcc.linkExit(notFunction, Uses(1));
63236: 
63236:     /*
63236:      * If the callee's parent is not equal to the global, jump to
63236:      * OOL slow path.
63236:      */
63236:     masm.loadPtr(Address(objReg, offsetof(JSObject, parent)), objReg);
63236:     Jump globalMismatch = masm.branchPtr(Assembler::NotEqual, objReg, ImmPtr(globalObj));
63236:     stubcc.linkExit(globalMismatch, Uses(1));
63236:     frame.freeReg(objReg);
63236: 
63236:     /* OOL stub call path. */
63236:     stubcc.leave();
63236:     OOL_STUBCALL(stubs::PushImplicitThisForGlobal);
63236: 
63236:     /* Fast path. */
63236:     if (isNotObj.isSet())
63236:         isNotObj.getJump().linkTo(masm.label(), &masm);
63236:     frame.pushUntypedValue(UndefinedValue());
63236: 
63236:     stubcc.rejoin(Changes(1));
63236: }
63236: 
52831: void
60526: mjit::Compiler::jsop_setgname_slow(JSAtom *atom, bool usePropertyCache)
52831: {
53087:     prepareStubCall(Uses(2));
52831:     masm.move(ImmPtr(atom), Registers::ArgReg1);
57784:     if (usePropertyCache)
57766:         INLINE_STUBCALL(STRICT_VARIANT(stubs::SetGlobalName));
57784:     else
57784:         INLINE_STUBCALL(STRICT_VARIANT(stubs::SetGlobalNameNoCache));
52831:     frame.popn(2);
75708:     pushSyncedEntry(0);
52831: }
52831: 
52831: void
60526: mjit::Compiler::jsop_setgname(JSAtom *atom, bool usePropertyCache)
52831: {
75708:     if (monitored(PC)) {
75775:         /* Global accesses are monitored only for a few names like __proto__. */
75716:         jsop_setgname_slow(atom, usePropertyCache);
75636:         return;
75636:     }
75636: 
53119: #if defined JS_MONOIC
52831:     FrameEntry *objFe = frame.peek(-2);
62385:     FrameEntry *fe = frame.peek(-1);
53025:     JS_ASSERT_IF(objFe->isTypeKnown(), objFe->getKnownType() == JSVAL_TYPE_OBJECT);
52831: 
75716:     if (!fe->isConstant() && fe->isType(JSVAL_TYPE_DOUBLE))
75716:         frame.forgetKnownDouble(fe);
75716: 
62386:     SetGlobalNameICInfo ic;
62386: 
62386:     frame.pinEntry(fe, ic.vr);
62386:     Jump shapeGuard;
62385: 
58198:     RESERVE_IC_SPACE(masm);
62386:     ic.fastPathStart = masm.label();
52831:     if (objFe->isConstant()) {
53081:         JSObject *obj = &objFe->getValue().toObject();
52831:         JS_ASSERT(obj->isNative());
52831: 
62386:         ic.objReg = frame.allocReg();
62386:         ic.shapeReg = ic.objReg;
62386:         ic.objConst = true;
62386: 
62386:         masm.load32FromImm(&obj->objShape, ic.shapeReg);
62386:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, ic.shapeReg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)),
62386:                                             ic.shape);
62386:         masm.move(ImmPtr(obj), ic.objReg);
52831:     } else {
62386:         ic.objReg = frame.copyDataIntoReg(objFe);
62386:         ic.shapeReg = frame.allocReg();
62386:         ic.objConst = false;
62386: 
62386:         masm.loadShape(ic.objReg, ic.shapeReg);
62386:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, ic.shapeReg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)),
62386:                                             ic.shape);
62386:         frame.freeReg(ic.shapeReg);
62386:     }
62386:     ic.shapeGuardJump = shapeGuard;
62386:     ic.slowPathStart = stubcc.linkExit(shapeGuard, Uses(2));
52831: 
52831:     stubcc.leave();
62386:     passMICAddress(ic);
62386:     ic.slowPathCall = OOL_STUBCALL(ic::SetGlobalName);
52831: 
52831:     /* Garbage value. */
52831:     uint32 slot = 1 << 24;
52831: 
62386:     ic.usePropertyCache = usePropertyCache;
62386: 
62386:     masm.loadPtr(Address(ic.objReg, offsetof(JSObject, slots)), ic.objReg);
62386:     Address address(ic.objReg, slot);
62386: 
62386:     if (ic.vr.isConstant()) {
62386:         ic.store = masm.storeValueWithAddressOffsetPatch(ic.vr.value(), address);
62386:     } else if (ic.vr.isTypeKnown()) {
62386:         ic.store = masm.storeValueWithAddressOffsetPatch(ImmType(ic.vr.knownType()),
62386:                                                           ic.vr.dataReg(), address);
52831:     } else {
62386:         ic.store = masm.storeValueWithAddressOffsetPatch(ic.vr.typeReg(), ic.vr.dataReg(), address);
62386:     }
62386: 
62386:     frame.freeReg(ic.objReg);
62386:     frame.unpinEntry(ic.vr);
62385:     frame.shimmy(1);
52831: 
53088:     stubcc.rejoin(Changes(1));
52831: 
62386:     ic.fastPathRejoin = masm.label();
62386:     setGlobalNames.append(ic);
52831: #else
60526:     jsop_setgname_slow(atom, usePropertyCache);
52831: #endif
52831: }
52831: 
52838: void
52838: mjit::Compiler::jsop_setelem_slow()
52838: {
53087:     prepareStubCall(Uses(3));
57766:     INLINE_STUBCALL(STRICT_VARIANT(stubs::SetElem));
52838:     frame.popn(3);
75790:     frame.pushSynced(JSVAL_TYPE_UNKNOWN);
75810: 
75810:     if (recompiling) {
75810:         OOL_STUBCALL(STRICT_VARIANT(ic::SetElement));
75810:         stubcc.rejoin(Changes(2));
75810:     }
52838: }
52838: 
52843: void
52843: mjit::Compiler::jsop_getelem_slow()
52843: {
53087:     prepareStubCall(Uses(2));
57766:     INLINE_STUBCALL(stubs::GetElem);
52843:     frame.popn(2);
75708:     pushSyncedEntry(0);
75817: 
75817:     if (recompiling) {
75817:         OOL_STUBCALL(ic::GetElement);
75817:         stubcc.rejoin(Changes(1));
75817:     }
52843: }
52843: 
52874: void
52874: mjit::Compiler::jsop_unbrand()
52874: {
53087:     prepareStubCall(Uses(1));
57766:     INLINE_STUBCALL(stubs::Unbrand);
52874: }
52874: 
56037: bool
52894: mjit::Compiler::jsop_instanceof()
52894: {
53124:     FrameEntry *lhs = frame.peek(-2);
52894:     FrameEntry *rhs = frame.peek(-1);
52894: 
53124:     // The fast path applies only when both operands are objects.
53124:     if (rhs->isNotType(JSVAL_TYPE_OBJECT) || lhs->isNotType(JSVAL_TYPE_OBJECT)) {
53087:         prepareStubCall(Uses(2));
57766:         INLINE_STUBCALL(stubs::InstanceOf);
52894:         frame.popn(2);
52894:         frame.takeReg(Registers::ReturnReg);
75790:         frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
56037:         return true;
52894:     }
52894: 
53124:     MaybeJump firstSlow;
53124:     if (!rhs->isTypeKnown()) {
53023:         Jump j = frame.testObject(Assembler::NotEqual, rhs);
53088:         stubcc.linkExit(j, Uses(2));
75797:     }
75797: 
75846:     frame.forgetConstantData(lhs);
75846:     frame.forgetConstantData(rhs);
75846: 
75797:     RegisterID obj = frame.tempRegForData(rhs);
75797:     Jump notFunction = masm.testFunction(Assembler::NotEqual, obj);
75797:     stubcc.linkExit(notFunction, Uses(2));
54410: 
54410:     /* Test for bound functions. */
54410:     Jump isBound = masm.branchTest32(Assembler::NonZero, Address(obj, offsetof(JSObject, flags)),
54410:                                      Imm32(JSObject::BOUND_FUNCTION));
54410:     {
54410:         stubcc.linkExit(isBound, Uses(2));
52894:         stubcc.leave();
57766:         OOL_STUBCALL(stubs::InstanceOf);
52911:         firstSlow = stubcc.masm.jump();
52911:     }
52911:     
54410: 
52911:     /* This is sadly necessary because the error case needs the object. */
52894:     frame.dup();
52894: 
75790:     if (!jsop_getprop(cx->runtime->atomState.classPrototypeAtom, JSVAL_TYPE_UNKNOWN, false))
56037:         return false;
52894: 
52911:     /* Primitive prototypes are invalid. */
52911:     rhs = frame.peek(-1);
52911:     Jump j = frame.testPrimitive(Assembler::Equal, rhs);
53088:     stubcc.linkExit(j, Uses(3));
52911: 
52911:     /* Allocate registers up front, because of branchiness. */
54410:     obj = frame.copyDataIntoReg(lhs);
52911:     RegisterID proto = frame.copyDataIntoReg(rhs);
52911:     RegisterID temp = frame.allocReg();
52911: 
53124:     MaybeJump isFalse;
53124:     if (!lhs->isTypeKnown())
53124:         isFalse = frame.testPrimitive(Assembler::Equal, lhs);
52911: 
52911:     Label loop = masm.label();
52911: 
52911:     /* Walk prototype chain, break out on NULL or hit. */
75679:     masm.loadPtr(Address(obj, offsetof(JSObject, type)), obj);
75679:     masm.loadPtr(Address(obj, offsetof(types::TypeObject, proto)), obj);
52911:     Jump isFalse2 = masm.branchTestPtr(Assembler::Zero, obj, obj);
52911:     Jump isTrue = masm.branchPtr(Assembler::NotEqual, obj, proto);
52911:     isTrue.linkTo(loop, &masm);
52911:     masm.move(Imm32(1), temp);
52911:     isTrue = masm.jump();
52911: 
53124:     if (isFalse.isSet())
53124:         isFalse.getJump().linkTo(masm.label(), &masm);
52911:     isFalse2.linkTo(masm.label(), &masm);
52911:     masm.move(Imm32(0), temp);
52911:     isTrue.linkTo(masm.label(), &masm);
52911: 
52911:     frame.freeReg(proto);
52911:     frame.freeReg(obj);
52911: 
52911:     stubcc.leave();
57766:     OOL_STUBCALL(stubs::FastInstanceOf);
52911: 
52894:     frame.popn(3);
75790:     frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, temp);
52911: 
53124:     if (firstSlow.isSet())
53124:         firstSlow.getJump().linkTo(stubcc.masm.label(), &stubcc.masm);
53088:     stubcc.rejoin(Changes(1));
56037:     return true;
52894: }
52894: 
56556: void
56775: mjit::Compiler::emitEval(uint32 argc)
56556: {
56775:     /* Check for interrupts on function call */
56775:     interruptCheckHelper();
56775: 
75647:     frame.syncAndKill(Uses(argc + 2));
56775:     prepareStubCall(Uses(argc + 2));
56775:     masm.move(Imm32(argc), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stubs::Eval);
56775:     frame.popn(argc + 2);
75708:     pushSyncedEntry(0);
56556: }
56556: 
57718: void
57718: mjit::Compiler::jsop_arguments()
57718: {
57718:     prepareStubCall(Uses(0));
57766:     INLINE_STUBCALL(stubs::Arguments);
57718: }
57718: 
75720: bool
58056: mjit::Compiler::jsop_newinit()
58056: {
58056:     bool isArray;
58056:     unsigned count = 0;
58056:     JSObject *baseobj = NULL;
58056:     switch (*PC) {
58056:       case JSOP_NEWINIT:
58056:         isArray = (PC[1] == JSProto_Array);
58056:         break;
58056:       case JSOP_NEWARRAY:
58056:         isArray = true;
58056:         count = GET_UINT24(PC);
58056:         break;
58056:       case JSOP_NEWOBJECT:
58056:         isArray = false;
58056:         baseobj = script->getObject(fullAtomIndex(PC));
58056:         break;
58056:       default:
58056:         JS_NOT_REACHED("Bad op");
75720:         return false;
58056:     }
58056: 
58056:     prepareStubCall(Uses(0));
75639: 
75686:     /* Don't bake in types for non-compileAndGo scripts. */
75686:     types::TypeObject *type = NULL;
75720:     if (script->compileAndGo) {
75686:         type = script->getTypeInitObject(cx, PC, isArray);
75720:         if (!type)
75720:             return false;
75720:     }
75639:     masm.storePtr(ImmPtr(type), FrameAddress(offsetof(VMFrame, scratch)));
75639: 
58056:     if (isArray) {
58056:         masm.move(Imm32(count), Registers::ArgReg1);
58056:         INLINE_STUBCALL(stubs::NewInitArray);
58056:     } else {
58056:         masm.move(ImmPtr(baseobj), Registers::ArgReg1);
58056:         INLINE_STUBCALL(stubs::NewInitObject);
58056:     }
58056:     frame.takeReg(Registers::ReturnReg);
58056:     frame.pushInitializerObject(Registers::ReturnReg, *PC == JSOP_NEWARRAY, baseobj);
75720: 
75720:     return true;
62574: }
62574: 
75649: bool
75649: mjit::Compiler::finishLoop(jsbytecode *head)
75649: {
75649:     /*
75649:      * We're done processing the current loop. Every loop has exactly one backedge
75649:      * at the end ('continue' statements are forward jumps to the loop test),
75649:      * and after jumpAndTrace'ing on that edge we can pop it from the frame.
75649:      */
75649: 
75649:     /*
75649:      * Fix up the jump entering the loop. We are doing this after all code has
75649:      * been emitted for the backedge, so that we are now in the loop's fallthrough
75649:      * (where we will emit the entry code).
75649:      */
75649:     Jump fallthrough = masm.jump();
75649: 
75649:     Jump entry;
75649:     jsbytecode *entryTarget;
75649:     frame.popLoop(head, &entry, &entryTarget);
75649: 
75649:     if (!jumpInScript(entry, entryTarget))
75649:         return false;
75649: 
75649:     fallthrough.linkTo(masm.label(), &masm);
75649: 
75763:     if (!analysis->getCode(head).safePoint) {
75763:         /*
75763:          * Emit a stub into the OOL path which loads registers from a synced state
75763:          * and jumps to the loop head, for rejoining from the interpreter.
75763:          */
75763:         LoopEntry entry;
75763:         entry.pcOffset = head - script->code;
75763:         entry.label = stubcc.masm.label();
75763:         loopEntries.append(entry);
75763: 
75763:         frame.prepareForJump(head, stubcc.masm, true);
75763:         if (!stubcc.jumpInScript(stubcc.masm.jump(), head))
75763:             return false;
75763:     }
75763: 
75649:     return true;
58056: }
58056: 
53133: /*
53133:  * Note: This function emits tracer hooks into the OOL path. This means if
53460:  * it is used in the middle of an in-progress slow path, the stream will be
53133:  * hopelessly corrupted. Take care to only call this before linkExits() and
53133:  * after rejoin()s.
75649:  *
75649:  * The state at the fast jump must reflect the frame's current state. If specified
75649:  * the state at the slow jump must be fully synced.
75649:  *
75649:  * The 'trampoline' argument indicates whether a trampoline was emitted into
75649:  * the OOL path loading some registers for the target. If this is the case,
75649:  * the fast path jump was redirected to the stub code's initial label, and the
75649:  * same must happen for any other fast paths for the target (i.e. paths from
75649:  * inline caches).
53133:  */
56766: bool
75649: mjit::Compiler::jumpAndTrace(Jump j, jsbytecode *target, Jump *slow, bool *trampoline)
53133: {
75649:     if (trampoline)
75649:         *trampoline = false;
75649: 
75649:     /*
75649:      * Unless we are coming from a branch which synced everything, syncForBranch
75649:      * must have been called and ensured an allocation at the target.
75649:      */
75649:     RegisterAllocation *&lvtarget = liveness.getCode(target).allocation;
75649:     if (!lvtarget) {
75649:         lvtarget = ArenaNew<RegisterAllocation>(liveness.pool, false);
75649:         if (!lvtarget)
56766:             return false;
75720:     }
75720: 
75720:     bool consistent = frame.consistentRegisters(target);
75649: 
59895:     if (!addTraceHints || target >= PC ||
59895:         (JSOp(*target) != JSOP_TRACE && JSOp(*target) != JSOP_NOTRACE)
56218: #ifdef JS_MONOIC
56218:         || GET_UINT16(target) == BAD_TRACEIC_INDEX
56218: #endif
56218:         )
56217:     {
75649:         if (lvtarget->synced()) {
75695:             JS_ASSERT(consistent);
56766:             if (!jumpInScript(j, target))
56766:                 return false;
59895:             if (slow && !stubcc.jumpInScript(*slow, target))
59895:                 return false;
75649:         } else {
75695:             if (consistent) {
75649:                 if (!jumpInScript(j, target))
75649:                     return false;
75649:             } else {
75649:                 /*
75649:                  * Make a trampoline to issue remaining loads for the register
75649:                  * state at target.
75649:                  */
75649:                 stubcc.linkExitDirect(j, stubcc.masm.label());
75649:                 frame.prepareForJump(target, stubcc.masm, false);
75649:                 if (!stubcc.jumpInScript(stubcc.masm.jump(), target))
75649:                     return false;
75649:                 if (trampoline)
75649:                     *trampoline = true;
75649:             }
75649: 
58700:             if (slow) {
75649:                 slow->linkTo(stubcc.masm.label(), &stubcc.masm);
75649:                 frame.prepareForJump(target, stubcc.masm, true);
75649:                 if (!stubcc.jumpInScript(stubcc.masm.jump(), target))
75649:                     return false;
75649:             }
75649:         }
75649: 
75763:         if (target < PC)
75763:             return finishLoop(target);
56766:         return true;
53133:     }
53133: 
75649:     /* The trampoline should not be specified if we need to generate a trace IC. */
75649:     JS_ASSERT(!trampoline);
75649: 
75649: #ifndef JS_TRACER
75649:     JS_NOT_REACHED("Bad addTraceHints");
75649:     return false;
75649: #else
75649: 
53133: # if JS_MONOIC
56217:     TraceGenInfo ic;
56217: 
56220:     ic.initialized = true;
56217:     ic.stubEntry = stubcc.masm.label();
56217:     ic.traceHint = j;
56192:     if (slow)
56217:         ic.slowTraceHint = *slow;
56217: 
56217:     uint16 index = GET_UINT16(target);
56217:     if (traceICs.length() <= index)
57679:         if (!traceICs.resize(index+1))
57679:             return false;
53133: # endif
53133: 
54160:     Label traceStart = stubcc.masm.label();
54160: 
54160:     stubcc.linkExitDirect(j, traceStart);
56192:     if (slow)
56192:         slow->linkTo(traceStart, &stubcc.masm);
59895: 
53133: # if JS_MONOIC
56217:     ic.addrLabel = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
53133: # endif
53133: 
53133:     /* Save and restore compiler-tracked PC, so cx->regs is right in InvokeTracer. */
53133:     {
53133:         jsbytecode* pc = PC;
53133:         PC = target;
53133: 
57766:         OOL_STUBCALL(stubs::InvokeTracer);
53133: 
53133:         PC = pc;
53133:     }
53133: 
53133:     Jump no = stubcc.masm.branchTestPtr(Assembler::Zero, Registers::ReturnReg,
53133:                                         Registers::ReturnReg);
53133:     restoreFrameRegs(stubcc.masm);
53133:     stubcc.masm.jump(Registers::ReturnReg);
59895:     no.linkTo(stubcc.masm.label(), &stubcc.masm);
75649: 
75649: #ifdef JS_MONOIC
75649:     ic.jumpTarget = target;
75695:     ic.fastTrampoline = !consistent;
75649:     ic.trampolineStart = stubcc.masm.label();
75649: 
75649:     traceICs[index] = ic;
53133: #endif
75649: 
75649:     /*
75695:      * Jump past the tracer call if the trace has been blacklisted. We still make
75695:      * a trace IC in such cases, in case it is un-blacklisted later.
75695:      */
75695:     if (JSOp(*target) == JSOP_NOTRACE) {
75695:         if (consistent) {
75695:             if (!jumpInScript(j, target))
75695:                 return false;
75695:         } else {
75695:             stubcc.linkExitDirect(j, stubcc.masm.label());
75695:         }
75695:         if (slow)
75695:             slow->linkTo(stubcc.masm.label(), &stubcc.masm);
75695:     }
75695: 
75695:     /*
75649:      * Reload any registers needed at the head of the loop. Note that we didn't
75649:      * need to do syncing before calling InvokeTracer, as state is always synced
75649:      * on backwards jumps.
75649:      */
75649:     frame.prepareForJump(target, stubcc.masm, true);
75649: 
59895:     if (!stubcc.jumpInScript(stubcc.masm.jump(), target))
59895:         return false;
59895: #endif
75649: 
75763:     return finishLoop(target);
54427: }
54427: 
54840: void
54840: mjit::Compiler::enterBlock(JSObject *obj)
54840: {
54840:     // If this is an exception entry point, then jsl_InternalThrow has set
54840:     // VMFrame::fp to the correct fp for the entry point. We need to copy
54840:     // that value here to FpReg so that FpReg also has the correct sp.
54840:     // Otherwise, we would simply be using a stale FpReg value.
60161:     // Additionally, we check the interrupt flag to allow interrupting
60161:     // deeply nested exception handling.
60161:     if (analysis->getCode(PC).exceptionEntry) {
54840:         restoreFrameRegs(masm);
60161:         interruptCheckHelper();
60161:     }
54840: 
54840:     /* For now, don't bother doing anything for this opcode. */
54840:     frame.syncAndForgetEverything();
54840:     masm.move(ImmPtr(obj), Registers::ArgReg1);
54840:     uint32 n = js_GetEnterBlockStackDefs(cx, script, PC);
57766:     INLINE_STUBCALL(stubs::EnterBlock);
54840:     frame.enterBlock(n);
54840: }
54840: 
54840: void
54840: mjit::Compiler::leaveBlock()
54840: {
54840:     /*
54840:      * Note: After bug 535912, we can pass the block obj directly, inline
54840:      * PutBlockObject, and do away with the muckiness in PutBlockObject.
54840:      */
54840:     uint32 n = js_GetVariableStackUses(JSOP_LEAVEBLOCK, PC);
54855:     JSObject *obj = script->getObject(fullAtomIndex(PC + UINT16_LEN));
54840:     prepareStubCall(Uses(n));
54855:     masm.move(ImmPtr(obj), Registers::ArgReg1);
57766:     INLINE_STUBCALL(stubs::LeaveBlock);
54840:     frame.leaveBlock(n);
54840: }
54840: 
55503: // Creates the new object expected for constructors, and places it in |thisv|.
55503: // It is broken down into the following operations:
55503: //   CALLEE
55503: //   GETPROP "prototype"
55503: //   IFPRIMTOP:
55503: //       NULL
55503: //   call js_CreateThisFromFunctionWithProto(...)
55503: //
56037: bool
55503: mjit::Compiler::constructThis()
55503: {
55503:     JS_ASSERT(isConstructing);
55503: 
55503:     // Load the callee.
57787:     frame.pushCallee();
55503: 
55503:     // Get callee.prototype.
75790:     if (!jsop_getprop(cx->runtime->atomState.classPrototypeAtom, JSVAL_TYPE_UNKNOWN, false, false))
56037:         return false;
55503: 
55503:     // Reach into the proto Value and grab a register for its data.
55503:     FrameEntry *protoFe = frame.peek(-1);
55503:     RegisterID protoReg = frame.ownRegForData(protoFe);
55503: 
55503:     // Now, get the type. If it's not an object, set protoReg to NULL.
75630:     JS_ASSERT_IF(protoFe->isTypeKnown(), protoFe->isType(JSVAL_TYPE_OBJECT));
75630:     if (!protoFe->isType(JSVAL_TYPE_OBJECT)) {
55503:         Jump isNotObject = frame.testObject(Assembler::NotEqual, protoFe);
55503:         stubcc.linkExitDirect(isNotObject, stubcc.masm.label());
55503:         stubcc.masm.move(ImmPtr(NULL), protoReg);
55503:         stubcc.crossJump(stubcc.masm.jump(), masm.label());
75630:     }
55503: 
55503:     // Done with the protoFe.
55503:     frame.pop();
55503: 
55503:     prepareStubCall(Uses(0));
55503:     if (protoReg != Registers::ArgReg1)
55503:         masm.move(protoReg, Registers::ArgReg1);
57766:     INLINE_STUBCALL(stubs::CreateThis);
55503:     frame.freeReg(protoReg);
56037:     return true;
55503: }
55503: 
61233: bool
59979: mjit::Compiler::jsop_tableswitch(jsbytecode *pc)
59979: {
59979: #if defined JS_CPU_ARM
59979:     JS_NOT_REACHED("Implement jump(BaseIndex) for ARM");
61248:     return true;
59979: #else
59979:     jsbytecode *originalPC = pc;
59979: 
59979:     uint32 defaultTarget = GET_JUMP_OFFSET(pc);
59979:     pc += JUMP_OFFSET_LEN;
59979: 
59979:     jsint low = GET_JUMP_OFFSET(pc);
59979:     pc += JUMP_OFFSET_LEN;
59979:     jsint high = GET_JUMP_OFFSET(pc);
59979:     pc += JUMP_OFFSET_LEN;
59979:     int numJumps = high + 1 - low;
59979:     JS_ASSERT(numJumps >= 0);
59979: 
59979:     /*
59979:      * If there are no cases, this is a no-op. The default case immediately
59979:      * follows in the bytecode and is always taken.
59979:      */
59979:     if (numJumps == 0) {
59979:         frame.pop();
61233:         return true;
59979:     }
59979: 
59979:     FrameEntry *fe = frame.peek(-1);
59979:     if (fe->isNotType(JSVAL_TYPE_INT32) || numJumps > 256) {
59979:         frame.syncAndForgetEverything();
59979:         masm.move(ImmPtr(originalPC), Registers::ArgReg1);
59979: 
59979:         /* prepareStubCall() is not needed due to forgetEverything() */
59979:         INLINE_STUBCALL(stubs::TableSwitch);
59979:         frame.pop();
59979:         masm.jump(Registers::ReturnReg);
61233:         return true;
59979:     }
59979: 
59979:     RegisterID dataReg;
59979:     if (fe->isConstant()) {
59979:         JS_ASSERT(fe->isType(JSVAL_TYPE_INT32));
59979:         dataReg = frame.allocReg();
59979:         masm.move(Imm32(fe->getValue().toInt32()), dataReg);
59979:     } else {
59979:         dataReg = frame.copyDataIntoReg(fe);
59979:     }
59979: 
59979:     RegisterID reg = frame.allocReg();
59979:     frame.syncAndForgetEverything();
59979: 
59979:     MaybeJump notInt;
59979:     if (!fe->isType(JSVAL_TYPE_INT32))
59979:         notInt = masm.testInt32(Assembler::NotEqual, frame.addressOf(fe));
59979: 
59979:     JumpTable jt;
59979:     jt.offsetIndex = jumpTableOffsets.length();
59979:     jt.label = masm.moveWithPatch(ImmPtr(NULL), reg);
59979:     jumpTables.append(jt);
59979: 
59979:     for (int i = 0; i < numJumps; i++) {
59979:         uint32 target = GET_JUMP_OFFSET(pc);
59979:         if (!target)
59979:             target = defaultTarget;
59979:         uint32 offset = (originalPC + target) - script->code;
59979:         jumpTableOffsets.append(offset);
59979:         pc += JUMP_OFFSET_LEN;
59979:     }
59979:     if (low != 0)
59979:         masm.sub32(Imm32(low), dataReg);
59979:     Jump defaultCase = masm.branch32(Assembler::AboveOrEqual, dataReg, Imm32(numJumps));
59979:     BaseIndex jumpTarget(reg, dataReg, Assembler::ScalePtr);
59979:     masm.jump(jumpTarget);
59979: 
59979:     if (notInt.isSet()) {
59979:         stubcc.linkExitDirect(notInt.get(), stubcc.masm.label());
59979:         stubcc.leave();
59979:         stubcc.masm.move(ImmPtr(originalPC), Registers::ArgReg1);
59979:         OOL_STUBCALL(stubs::TableSwitch);
59979:         stubcc.masm.jump(Registers::ReturnReg);
59979:     }
59979:     frame.pop();
61233:     return jumpAndTrace(defaultCase, originalPC + defaultTarget);
59979: #endif
59979: }
59979: 
59979: void
57723: mjit::Compiler::jsop_callelem_slow()
57723: {
57723:     prepareStubCall(Uses(2));
57766:     INLINE_STUBCALL(stubs::CallElem);
57723:     frame.popn(2);
75708:     pushSyncedEntry(0);
75708:     pushSyncedEntry(1);
75817: 
75817:     if (recompiling) {
75817:         OOL_STUBCALL(ic::CallElement);
75817:         stubcc.rejoin(Changes(2));
75817:     }
57723: }
57723: 
60526: void
60526: mjit::Compiler::jsop_forprop(JSAtom *atom)
60526: {
60526:     // Before: ITER OBJ
60526:     // After:  ITER OBJ ITER
60526:     frame.dupAt(-2);
60526: 
60526:     // Before: ITER OBJ ITER 
60526:     // After:  ITER OBJ ITER VALUE
60526:     iterNext();
60526: 
60526:     // Before: ITER OBJ ITER VALUE
60526:     // After:  ITER OBJ VALUE
60526:     frame.shimmy(1);
60526: 
60526:     // Before: ITER OBJ VALUE
60526:     // After:  ITER VALUE
60526:     jsop_setprop(atom, false);
60526: 
60526:     // Before: ITER VALUE
60526:     // After:  ITER
60526:     frame.pop();
60526: }
60526: 
60526: void
60526: mjit::Compiler::jsop_forname(JSAtom *atom)
60526: {
60526:     // Before: ITER
60526:     // After:  ITER SCOPEOBJ
60526:     jsop_bindname(atom, false);
60526:     jsop_forprop(atom);
60526: }
60526: 
60526: void
60526: mjit::Compiler::jsop_forgname(JSAtom *atom)
60526: {
60526:     // Before: ITER
60526:     // After:  ITER GLOBAL
60526:     jsop_bindgname();
60526: 
60526:     // Before: ITER GLOBAL
60526:     // After:  ITER GLOBAL ITER
60526:     frame.dupAt(-2);
60526: 
60526:     // Before: ITER GLOBAL ITER 
60526:     // After:  ITER GLOBAL ITER VALUE
60526:     iterNext();
60526: 
60526:     // Before: ITER GLOBAL ITER VALUE
60526:     // After:  ITER GLOBAL VALUE
60526:     frame.shimmy(1);
60526: 
60526:     // Before: ITER GLOBAL VALUE
60526:     // After:  ITER VALUE
60526:     jsop_setgname(atom, false);
60526: 
60526:     // Before: ITER VALUE
60526:     // After:  ITER
60526:     frame.pop();
60526: }
60526: 
75649: /*
75716:  * For any locals or args which we know to be integers but are treated as
75649:  * doubles by the type inference, convert to double.  These will be assumed to be
75649:  * doubles at control flow join points.  This function must be called before branching
75689:  * to another opcode.
75649:  */
75716: 
75630: void
75630: mjit::Compiler::fixDoubleTypes(Uses uses)
75630: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return;
75720: 
75631:     for (uint32 i = 0; fun && i < fun->nargs; i++) {
75631:         JSValueType type = knownArgumentType(i);
75722:         if (type == JSVAL_TYPE_DOUBLE && !analysis->argEscapes(i)) {
75631:             FrameEntry *fe = frame.getArg(i);
75631:             if (!fe->isType(JSVAL_TYPE_DOUBLE))
75631:                 frame.ensureDouble(fe);
75631:         }
75631:     }
75649: 
75630:     for (uint32 i = 0; i < script->nfixed; i++) {
75630:         JSValueType type = knownLocalType(i);
75722:         if (type == JSVAL_TYPE_DOUBLE && !analysis->localEscapes(i)) {
75630:             FrameEntry *fe = frame.getLocal(i);
75630:             if (!fe->isType(JSVAL_TYPE_DOUBLE))
75630:                 frame.ensureDouble(fe);
75630:         }
75630:     }
57671: }
57671: 
75622: void
75622: mjit::Compiler::restoreAnalysisTypes(uint32 stackDepth)
75622: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return;
75720: 
75631:     /* Restore known types of locals/args, for join points or after forgetting everything. */
75622:     for (uint32 i = 0; i < script->nfixed; i++) {
75622:         JSValueType type = knownLocalType(i);
75722:         if (type != JSVAL_TYPE_UNKNOWN && (type != JSVAL_TYPE_DOUBLE || !analysis->localEscapes(i))) {
75622:             FrameEntry *fe = frame.getLocal(i);
75815:             JS_ASSERT_IF(fe->isTypeKnown(), fe->isType(type));
75815:             if (!fe->isTypeKnown())
75622:                 frame.learnType(fe, type, false);
75622:         }
75622:     }
75631:     for (uint32 i = 0; fun && i < fun->nargs; i++) {
75631:         JSValueType type = knownArgumentType(i);
75722:         if (type != JSVAL_TYPE_UNKNOWN && (type != JSVAL_TYPE_DOUBLE || !analysis->argEscapes(i))) {
75631:             FrameEntry *fe = frame.getArg(i);
75815:             JS_ASSERT_IF(fe->isTypeKnown(), fe->isType(type));
75815:             if (!fe->isTypeKnown())
75631:                 frame.learnType(fe, type, false);
75631:         }
75631:     }
75622: }
75622: 
75622: JSValueType
75630: mjit::Compiler::knownThisType()
75630: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return JSVAL_TYPE_UNKNOWN;
75630:     if (hasThisType)
75630:         return thisType;
75630:     hasThisType = true;
75718:     thisType = script->thisTypes()->getKnownTypeTag(cx, script);
75630:     return thisType;
75630: }
75630: 
75630: JSValueType
75622: mjit::Compiler::knownArgumentType(uint32 arg)
75622: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return JSVAL_TYPE_UNKNOWN;
75623:     JS_ASSERT(fun && arg < fun->nargs);
75623:     return argumentTypes[arg];
75622: }
75622: 
75622: JSValueType
75622: mjit::Compiler::knownLocalType(uint32 local)
75622: {
75720:     if (!cx->typeInferenceEnabled() || local >= script->nfixed)
75627:         return JSVAL_TYPE_UNKNOWN;
75623:     return localTypes[local];
75622: }
75622: 
75622: JSValueType
75622: mjit::Compiler::knownPushedType(uint32 pushed)
75622: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return JSVAL_TYPE_UNKNOWN;
75708:     types::TypeSet *types = script->types->pushed(PC - script->code, pushed);
75636:     return types->getKnownTypeTag(cx, script);
75622: }
75625: 
75677: bool
75677: mjit::Compiler::mayPushUndefined(uint32 pushed)
75677: {
75720:     JS_ASSERT(cx->typeInferenceEnabled());
75720: 
75677:     /*
75677:      * This should only be used when the compiler is checking if it is OK to push
75677:      * undefined without going to a stub that can trigger recompilation.
75677:      * If this returns false and undefined subsequently becomes a feasible
75677:      * value pushed by the bytecode, recompilation will *NOT* be triggered.
75677:      */
75708:     types::TypeSet *types = script->types->pushed(PC - script->code, pushed);
75677:     return types->hasType(types::TYPE_UNDEFINED);
75677: }
75677: 
75708: types::TypeSet *
75708: mjit::Compiler::argTypeSet(uint32 arg)
75708: {
75720:     return cx->typeInferenceEnabled() ? script->argTypes(arg) : NULL;
75708: }
75708: 
75708: types::TypeSet *
75708: mjit::Compiler::localTypeSet(uint32 local)
75708: {
75720:     if (!cx->typeInferenceEnabled() || local >= script->nfixed)
75708:         return NULL;
75718:     return script->localTypes(local);
75708: }
75708: 
75851: types::TypeSet *
75851: mjit::Compiler::pushedTypeSet(uint32 pushed)
75851: {
75851:     if (!cx->typeInferenceEnabled())
75851:         return NULL;
75851:     return script->types->pushed(PC - script->code, pushed);
75851: }
75851: 
75708: bool
75708: mjit::Compiler::monitored(jsbytecode *pc)
75708: {
75720:     return cx->typeInferenceEnabled() && script->types->monitored(pc - script->code);
75708: }
75708: 
75708: void
75708: mjit::Compiler::pushSyncedEntry(uint32 pushed)
75708: {
75790:     frame.pushSynced(knownPushedType(pushed));
75708: }
75708: 
75845: JSObject *
75845: mjit::Compiler::pushedSingleton(unsigned pushed)
75845: {
75845:     if (!cx->typeInferenceEnabled())
75845:         return NULL;
75845: 
75845:     types::TypeSet *types = script->types->pushed(PC - script->code, pushed);
75845:     return types->getSingleton(cx, script);
75845: }
75845: 
75625: bool
75677: mjit::Compiler::arrayPrototypeHasIndexedProperty()
75625: {
75720:     if (!cx->typeInferenceEnabled())
75720:         return true;
75720: 
75679:     /*
75679:      * Get the types of Array.prototype and Object.prototype to use. :XXX: This is broken
75679:      * in the presence of multiple global objects, we should figure out the possible
75679:      * prototype(s) from the objects in the type set that triggered this call.
75679:      */
75679:     JSObject *proto;
75679:     if (!js_GetClassPrototype(cx, NULL, JSProto_Array, &proto, NULL))
75679:         return false;
75679:     types::TypeSet *arrayTypes = proto->getType()->getProperty(cx, JSID_VOID, false);
75679:     types::TypeSet *objectTypes = proto->getProto()->getType()->getProperty(cx, JSID_VOID, false);
75677:     return arrayTypes->knownNonEmpty(cx, script)
75677:         || objectTypes->knownNonEmpty(cx, script);
75720: }
