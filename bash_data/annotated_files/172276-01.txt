153453: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-*/
153453: /* This Source Code Form is subject to the terms of the Mozilla Public
153453:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
153453:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
153453: 
153453: #ifndef MOZILLA_AUDIONODEEXTERNALINPUTSTREAM_H_
153453: #define MOZILLA_AUDIONODEEXTERNALINPUTSTREAM_H_
153453: 
153453: #include "MediaStreamGraph.h"
153453: #include "AudioNodeStream.h"
153453: 
172276: #ifdef PR_LOGGING
172276: #define LOG(type, msg) PR_LOG(gMediaStreamGraphLog, type, msg)
172276: #else
172276: #define LOG(type, msg)
172276: #endif
172276: 
153453: // Forward declaration for mResamplerMap
153453: typedef struct SpeexResamplerState_ SpeexResamplerState;
153453: 
153453: namespace mozilla {
153453: 
153453: /**
153453:  * This is a MediaStream implementation that acts for a Web Audio node but
153453:  * unlike other AudioNodeStreams, supports any kind of MediaStream as an
153453:  * input --- handling any number of audio tracks, resampling them from whatever
153453:  * sample rate they're using, and handling blocking of the input MediaStream.
153453:  */
153453: class AudioNodeExternalInputStream : public AudioNodeStream {
153453: public:
153453:   AudioNodeExternalInputStream(AudioNodeEngine* aEngine, TrackRate aSampleRate);
153453:   ~AudioNodeExternalInputStream();
153453: 
153453:   virtual void ProduceOutput(GraphTime aFrom, GraphTime aTo) MOZ_OVERRIDE;
153453: 
153453: private:
153453:   // For storing pointers and data about input tracks, like the last TrackTick which
153453:   // was read, and the associated speex resampler.
153453:   struct TrackMapEntry {
153453:     ~TrackMapEntry();
153453: 
153453:     /**
153453:      * Resamples data from all chunks in aIterator and following, using mResampler,
153453:      * adding the results to mResampledData.
153453:      */
153453:     void ResampleInputData(AudioSegment* aSegment);
153453:     /**
153453:      * Resamples a set of channel buffers using mResampler, adding the results
153453:      * to mResampledData.
153453:      */
153453:     void ResampleChannels(const nsTArray<const void*>& aBuffers,
153453:                           uint32_t aInputDuration,
153453:                           AudioSampleFormat aFormat,
153453:                           float aVolume);
153453: 
155441:     // mEndOfConsumedInputTicks is the end of the input ticks that we've consumed.
155441:     // 0 if we haven't consumed any yet.
155441:     TrackTicks mEndOfConsumedInputTicks;
155441:     // mEndOfLastInputIntervalInInputStream is the timestamp for the end of the
155441:     // previous interval which was unblocked for both the input and output
155441:     // stream, in the input stream's timeline, or -1 if there wasn't one.
155441:     StreamTime mEndOfLastInputIntervalInInputStream;
155441:     // mEndOfLastInputIntervalInOutputStream is the timestamp for the end of the
155441:     // previous interval which was unblocked for both the input and output
155441:     // stream, in the output stream's timeline, or -1 if there wasn't one.
155441:     StreamTime mEndOfLastInputIntervalInOutputStream;
153453:     /**
153453:      * Number of samples passed to the resampler so far.
153453:      */
153453:     TrackTicks mSamplesPassedToResampler;
153453:     /**
153453:      * Resampler being applied to this track.
153453:      */
153453:     SpeexResamplerState* mResampler;
153453:     /**
153453:      * The track data that has been resampled to the rate of the
153453:      * AudioNodeExternalInputStream. All data in these chunks is in floats (or null),
153453:      * and has the number of channels given in mResamplerChannelCount.
153453:      * mResampledData starts at zero in the stream's output track (so generally
153453:      * it will consist of null data followed by actual data).
153453:      */
153453:     AudioSegment mResampledData;
153453:     /**
153453:      * Number of channels used to create mResampler.
153453:      */
153453:     uint32_t mResamplerChannelCount;
153453:     /**
153453:      * The ID for the track of the input stream this entry is for.
153453:      */
153453:     TrackID mTrackID;
153453:   };
153453: 
153453:   nsTArray<TrackMapEntry> mTrackMap;
153453:   // Amount of track data produced so far. A multiple of WEBAUDIO_BLOCK_SIZE.
153453:   TrackTicks mCurrentOutputPosition;
153453: 
153453:   /**
153453:    * Creates a TrackMapEntry for the track, if needed. Returns the index
153453:    * of the TrackMapEntry or NoIndex if no entry is needed yet.
153453:    */
153453:   uint32_t GetTrackMapEntry(const StreamBuffer::Track& aTrack,
153453:                             GraphTime aFrom);
153453: };
153453: 
153453: }
153453: 
153453: #endif /* MOZILLA_AUDIONODESTREAM_H_ */
