43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com> (original author)
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttpPipeline_h__
43113: #define nsHttpPipeline_h__
43113: 
43113: #include "nsHttp.h"
43113: #include "nsAHttpConnection.h"
43113: #include "nsAHttpTransaction.h"
43113: #include "nsIInputStream.h"
43113: #include "nsIOutputStream.h"
43113: #include "nsTArray.h"
43113: #include "nsCOMPtr.h"
43113: 
43113: class nsHttpPipeline : public nsAHttpConnection
43113:                      , public nsAHttpTransaction
43113:                      , public nsAHttpSegmentReader
43113: {
43113: public:
43113:     NS_DECL_ISUPPORTS
43113:     NS_DECL_NSAHTTPCONNECTION
43113:     NS_DECL_NSAHTTPTRANSACTION
43113:     NS_DECL_NSAHTTPSEGMENTREADER
43113: 
43113:     nsHttpPipeline();
43113:     virtual ~nsHttpPipeline();
43113: 
43113:     nsresult AddTransaction(nsAHttpTransaction *);
43113: 
43113: private:
43113:     nsresult FillSendBuf();
43113:     
43113:     static NS_METHOD ReadFromPipe(nsIInputStream *, void *, const char *,
43113:                                   PRUint32, PRUint32, PRUint32 *);
43113: 
43113:     // convenience functions
43113:     nsAHttpTransaction *Request(PRInt32 i)
43113:     {
43113:         if (mRequestQ.Length() == 0)
43113:             return nsnull;
43113: 
43113:         return mRequestQ[i];
43113:     }
43113:     nsAHttpTransaction *Response(PRInt32 i)
43113:     {
43113:         if (mResponseQ.Length() == 0)
43113:             return nsnull;
43113: 
43113:         return mResponseQ[i];
43113:     }
43113: 
43113:     nsAHttpConnection            *mConnection;
43113:     nsTArray<nsAHttpTransaction*> mRequestQ;  // array of transactions
43113:     nsTArray<nsAHttpTransaction*> mResponseQ; // array of transactions
43113:     nsresult                      mStatus;
43113: 
43113:     // these flags indicate whether or not the first request or response
43113:     // is partial.  a partial request means that Request(0) has been 
43113:     // partially written out to the socket.  a partial response means
43113:     // that Response(0) has been partially read in from the socket.
79445:     bool mRequestIsPartial;
79445:     bool mResponseIsPartial;
43113: 
43113:     // indicates whether or not the pipeline has been explicitly closed.
79445:     bool mClosed;
43113: 
43113:     // used when calling ReadSegments/WriteSegments on a transaction.
43113:     nsAHttpSegmentReader *mReader;
43113:     nsAHttpSegmentWriter *mWriter;
43113: 
43113:     // send buffer
43113:     nsCOMPtr<nsIInputStream>  mSendBufIn;
43113:     nsCOMPtr<nsIOutputStream> mSendBufOut;
43113: 
43113:     // the push back buffer.  not exceeding nsIOService::gDefaultSegmentSize bytes.
43113:     char     *mPushBackBuf;
43113:     PRUint32  mPushBackLen;
43113:     PRUint32  mPushBackMax;
83069: 
83069:     // For support of OnTransportStatus()
83069:     PRUint64  mReceivingFromProgress;
83069:     PRUint64  mSendingToProgress;
83069:     bool      mSuppressSendEvents;
43113: };
43113: 
43113: #endif // nsHttpPipeline_h__
