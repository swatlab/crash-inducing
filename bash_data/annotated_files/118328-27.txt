 47243: // -*- mode: c++ -*-
 47243: 
114869: // Copyright (c) 2011, Google Inc.
 22509: // All rights reserved.
 22509: //
 22509: // Redistribution and use in source and binary forms, with or without
 22509: // modification, are permitted provided that the following conditions are
 22509: // met:
 22509: //
 22509: //     * Redistributions of source code must retain the above copyright
 22509: // notice, this list of conditions and the following disclaimer.
 22509: //     * Redistributions in binary form must reproduce the above
 22509: // copyright notice, this list of conditions and the following disclaimer
 22509: // in the documentation and/or other materials provided with the
 22509: // distribution.
 22509: //     * Neither the name of Google Inc. nor the names of its
 22509: // contributors may be used to endorse or promote products derived from
 22509: // this software without specific prior written permission.
 22509: //
 22509: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 22509: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 22509: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 22509: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 22509: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 22509: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 22509: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 22509: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 22509: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 22509: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 22509: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 22509: 
 47243: // dump_syms_tool.mm: Command line tool that uses the DumpSymbols class.
 22509: // TODO(waylonis): accept stdin
 22509: 
 47243: #include <mach-o/arch.h>
 22509: #include <unistd.h>
 22509: 
114869: #include <iostream>
 47243: #include <vector>
 47243: 
 47243: #include "common/mac/dump_syms.h"
118328: #include "common/mac/arch_utilities.h"
 22509: #include "common/mac/macho_utilities.h"
 22509: 
 47243: using google_breakpad::DumpSymbols;
 47243: using std::vector;
 47243: 
 47243: struct Options {
114869:   Options() : srcPath(), arch(), cfi(true) { }
 22509:   NSString *srcPath;
 47243:   const NXArchInfo *arch;
114869:   bool cfi;
 47243: };
 22509: 
 22509: //=============================================================================
 47243: static bool Start(const Options &options) {
 47243:   DumpSymbols dump_symbols;
 22509: 
 47243:   if (!dump_symbols.Read(options.srcPath))
 47243:     return false;
 47243: 
 47243:   if (options.arch) {
 47243:     if (!dump_symbols.SetArchitecture(options.arch->cputype,
 47243:                                       options.arch->cpusubtype)) {
 47243:       fprintf(stderr, "%s: no architecture '%s' is present in file.\n",
 47243:               [options.srcPath fileSystemRepresentation], options.arch->name);
 47243:       size_t available_size;
 47243:       const struct fat_arch *available =
 47243:         dump_symbols.AvailableArchitectures(&available_size);
 47243:       if (available_size == 1)
 47243:         fprintf(stderr, "the file's architecture is: ");
 47243:       else
 47243:         fprintf(stderr, "architectures present in the file are:\n");
 47243:       for (size_t i = 0; i < available_size; i++) {
 47243:         const struct fat_arch *arch = &available[i];
 47243:         const NXArchInfo *arch_info =
118328:           google_breakpad::BreakpadGetArchInfoFromCpuType(
118328:               arch->cputype, arch->cpusubtype);
 47243:         if (arch_info)
 47243:           fprintf(stderr, "%s (%s)\n", arch_info->name, arch_info->description);
 47243:         else
 47243:           fprintf(stderr, "unrecognized cpu type 0x%x, subtype 0x%x\n",
 47243:                   arch->cputype, arch->cpusubtype);
 47243:       }
 47243:       return false;
 47243:     }
 22509:   }
 22509: 
114869:   return dump_symbols.WriteSymbolFile(std::cout, options.cfi);
 22509: }
 22509: 
 22509: //=============================================================================
 22509: static void Usage(int argc, const char *argv[]) {
 22509:   fprintf(stderr, "Output a Breakpad symbol file from a Mach-o file.\n");
114869:   fprintf(stderr, "Usage: %s [-a ARCHITECTURE] [-c] <Mach-o file>\n",
 22509:           argv[0]);
 47243:   fprintf(stderr, "\t-a: Architecture type [default: native, or whatever is\n");
 47243:   fprintf(stderr, "\t    in the file, if it contains only one architecture]\n");
114869:   fprintf(stderr, "\t-c: Do not generate CFI section\n");
 22509:   fprintf(stderr, "\t-h: Usage\n");
 22509:   fprintf(stderr, "\t-?: Usage\n");
 22509: }
 22509: 
 22509: //=============================================================================
 22509: static void SetupOptions(int argc, const char *argv[], Options *options) {
 22509:   extern int optind;
 22509:   signed char ch;
 22509: 
114869:   while ((ch = getopt(argc, (char * const *)argv, "a:ch?")) != -1) {
 22509:     switch (ch) {
 47243:       case 'a': {
118328:         const NXArchInfo *arch_info =
118328:             google_breakpad::BreakpadGetArchInfoFromName(optarg);
 47243:         if (!arch_info) {
 22509:           fprintf(stderr, "%s: Invalid architecture: %s\n", argv[0], optarg);
 22509:           Usage(argc, argv);
 22509:           exit(1);
 22509:         }
 47243:         options->arch = arch_info;
 22509:         break;
 47243:       }
114869:       case 'c':
114869:         options->cfi = false;
114869:         break;
 22509:       case '?':
 22509:       case 'h':
 22509:         Usage(argc, argv);
 22509:         exit(0);
 22509:         break;
 22509:     }
 22509:   }
 22509: 
 22509:   if ((argc - optind) != 1) {
 22509:     fprintf(stderr, "Must specify Mach-o file\n");
 22509:     Usage(argc, argv);
 22509:     exit(1);
 22509:   }
 22509: 
 22509:   options->srcPath = [[NSFileManager defaultManager]
 22509:                        stringWithFileSystemRepresentation:argv[optind]
 22509:                        length:strlen(argv[optind])];
 22509: }
 22509: 
 22509: //=============================================================================
 22509: int main (int argc, const char * argv[]) {
 22509:   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
 22509:   Options options;
 47243:   bool result;
 22509: 
 22509:   SetupOptions(argc, argv, &options);
 47243:   result = Start(options);
 22509: 
 22509:   [pool release];
 22509: 
 47243:   return !result;
 22509: }
