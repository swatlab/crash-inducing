63382: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42153:  * ***** BEGIN LICENSE BLOCK *****
42153:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42153:  *
42153:  * The contents of this file are subject to the Mozilla Public License Version
42153:  * 1.1 (the "License"); you may not use this file except in compliance with
42153:  * the License. You may obtain a copy of the License at
42153:  * http://www.mozilla.org/MPL/
42153:  *
42153:  * Software distributed under the License is distributed on an "AS IS" basis,
42153:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42153:  * for the specific language governing rights and limitations under the
42153:  * License.
42153:  *
42153:  * The Original Code is Android port code.
42153:  *
42153:  * The Initial Developer of the Original Code is
42153:  *   Mozilla Foundation
42153:  * Portions created by the Initial Developer are Copyright (C) 2010
42153:  * the Initial Developer. All Rights Reserved.
42153:  *
42153:  * Contributor(s):
42153:  *   Vladimir Vukicevic <vladimir@pobox.com>
42153:  *
42153:  * Alternatively, the contents of this file may be used under the terms of
42153:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42153:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42153:  * in which case the provisions of the GPL or the LGPL are applicable instead
42153:  * of those above. If you wish to allow use of your version of this file only
42153:  * under the terms of either the GPL or the LGPL, and not to allow others to
42153:  * use your version of this file under the terms of the MPL, indicate your
42153:  * decision by deleting the provisions above and replace them with the notice
42153:  * and other provisions required by the GPL or the LGPL. If you do not delete
42153:  * the provisions above, a recipient may use your version of this file under
42153:  * the terms of any one of the MPL, the GPL or the LGPL.
42153:  *
42153:  * ***** END LICENSE BLOCK ***** */
42153: 
42153: #include "gfxAndroidPlatform.h"
81281: #include "mozilla/gfx/2D.h"
42153: 
78722: #include "gfxFT2FontList.h"
42153: #include "gfxImageSurface.h"
42153: 
78722: #include "cairo.h"
42153: 
42153: #include "ft2build.h"
42153: #include FT_FREETYPE_H
81281: using namespace mozilla;
81281: using namespace mozilla::gfx;
42153: 
42153: static FT_Library gPlatformFTLibrary = NULL;
42153: 
62921: #define LOG(args...)  __android_log_print(ANDROID_LOG_INFO, "GeckoFonts" , ## args)
42153: 
42153: gfxAndroidPlatform::gfxAndroidPlatform()
42153: {
42153:     FT_Init_FreeType(&gPlatformFTLibrary);
42153: }
42153: 
42153: gfxAndroidPlatform::~gfxAndroidPlatform()
42153: {
42153:     cairo_debug_reset_static_data();
42153: 
42153:     FT_Done_FreeType(gPlatformFTLibrary);
42153:     gPlatformFTLibrary = NULL;
42153: }
42153: 
42153: already_AddRefed<gfxASurface>
42153: gfxAndroidPlatform::CreateOffscreenSurface(const gfxIntSize& size,
54253:                                       gfxASurface::gfxContentType contentType)
42153: {
46392:     nsRefPtr<gfxASurface> newSurface;
54253:     if (contentType == gfxImageSurface::CONTENT_COLOR)
59199:         newSurface = new gfxImageSurface (size, GetOffscreenFormat());
46392:     else
54253:         newSurface = new gfxImageSurface (size, gfxASurface::FormatFromContent(contentType));
42153: 
42153:     return newSurface.forget();
42153: }
42153: 
82359: RefPtr<DrawTarget>
82359: gfxAndroidPlatform::CreateOffscreenDrawTarget(const IntSize& aSize, SurfaceFormat aFormat)
82359: {
82359:   return Factory::CreateDrawTarget(BACKEND_SKIA, aSize, aFormat);
82359: }
82359: 
42153: nsresult
42153: gfxAndroidPlatform::GetFontList(nsIAtom *aLangGroup,
42153:                                 const nsACString& aGenericFamily,
42153:                                 nsTArray<nsString>& aListOfFonts)
42153: {
78722:     gfxPlatformFontList::PlatformFontList()->GetFontList(aLangGroup,
78722:                                                          aGenericFamily,
78722:                                                          aListOfFonts);
42153:     return NS_OK;
42153: }
42153: 
63382: void
62921: gfxAndroidPlatform::GetFontList(InfallibleTArray<FontListEntry>* retValue)
62921: {
78722:     gfxFT2FontList::PlatformFontList()->GetFontList(retValue);
62921: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::UpdateFontList()
42153: {
78722:     gfxPlatformFontList::PlatformFontList()->UpdateFontList();
42153:     return NS_OK;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::ResolveFontName(const nsAString& aFontName,
42153:                                     FontResolverCallback aCallback,
42153:                                     void *aClosure,
79445:                                     bool& aAborted)
42153: {
48022:     nsAutoString resolvedName;
78722:     if (!gfxPlatformFontList::PlatformFontList()->
78722:              ResolveFontName(aFontName, resolvedName)) {
80486:         aAborted = false;
48022:         return NS_OK;
48022:     }
78722:     aAborted = !(*aCallback)(resolvedName, aClosure);
42153:     return NS_OK;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName)
42153: {
78722:     gfxPlatformFontList::PlatformFontList()->GetStandardFamilyName(aFontName, aFamilyName);
78722:     return NS_OK;
42153: }
42153: 
48022: gfxPlatformFontList*
48022: gfxAndroidPlatform::CreatePlatformFontList()
48022: {
57104:     gfxPlatformFontList* list = new gfxFT2FontList();
57104:     if (NS_SUCCEEDED(list->InitFontList())) {
57104:         return list;
57104:     }
57104:     gfxPlatformFontList::Shutdown();
57104:     return nsnull;
48022: }
48022: 
79445: bool
48022: gfxAndroidPlatform::IsFontFormatSupported(nsIURI *aFontURI, PRUint32 aFormatFlags)
48022: {
48022:     // check for strange format flags
48022:     NS_ASSERTION(!(aFormatFlags & gfxUserFontSet::FLAG_FORMAT_NOT_USED),
48022:                  "strange font format hint set");
48022: 
48022:     // accept supported formats
48022:     if (aFormatFlags & (gfxUserFontSet::FLAG_FORMAT_OPENTYPE |
64657:                         gfxUserFontSet::FLAG_FORMAT_WOFF |
48022:                         gfxUserFontSet::FLAG_FORMAT_TRUETYPE)) {
80486:         return true;
48022:     }
48022: 
48022:     // reject all other formats, known and unknown
48022:     if (aFormatFlags != 0) {
80486:         return false;
48022:     }
48022: 
48022:     // no format hint set, need to look at data
80486:     return true;
48022: }
48022: 
42153: gfxFontGroup *
42153: gfxAndroidPlatform::CreateFontGroup(const nsAString &aFamilies,
42153:                                const gfxFontStyle *aStyle,
42153:                                gfxUserFontSet* aUserFontSet)
42153: {
78722:     return new gfxFontGroup(aFamilies, aStyle, aUserFontSet);
42153: }
42153: 
42153: FT_Library
42153: gfxAndroidPlatform::GetFTLibrary()
42153: {
42153:     return gPlatformFTLibrary;
42153: }
42153: 
48022: gfxFontEntry* 
48022: gfxAndroidPlatform::MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
48022:                                      const PRUint8 *aFontData, PRUint32 aLength)
48022: {
48022:     return gfxPlatformFontList::PlatformFontList()->MakePlatformFont(aProxyEntry,
48022:                                                                      aFontData,
48022:                                                                      aLength);
48022: }
48022: 
81281: RefPtr<ScaledFont>
81281: gfxAndroidPlatform::GetScaledFontForFont(gfxFont *aFont)
81281: {
81281:     NativeFont nativeFont;
81281:     nativeFont.mType = NATIVE_FONT_SKIA_FONT_FACE;
81281:     nativeFont.mFont = aFont;
81281:     RefPtr<ScaledFont> scaledFont =
81281:       Factory::CreateScaledFontForNativeFont(nativeFont, aFont->GetAdjustedSize());
81281: 
81281:     return scaledFont;
81281: }
81281: 
