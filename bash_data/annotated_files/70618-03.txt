    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is TransforMiiX XSLT processor code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2001
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Peter Van der Beken <peterv@propagandism.org>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "txUnknownHandler.h"
    1: #include "txExecutionState.h"
    1: #include "txStringUtils.h"
    1: #include "txStylesheet.h"
    1: #include "txAtoms.h"
    1: 
    1: txUnknownHandler::txUnknownHandler(txExecutionState* aEs)
70618:     : mEs(aEs),
70618:       mFlushed(PR_FALSE)
    1: {
58491:     MOZ_COUNT_CTOR_INHERITED(txUnknownHandler, txBufferingHandler);
58491: }
58491: 
58491: txUnknownHandler::~txUnknownHandler()
58491: {
58491:     MOZ_COUNT_DTOR_INHERITED(txUnknownHandler, txBufferingHandler);
    1: }
    1: 
    1: nsresult
70618: txUnknownHandler::attribute(nsIAtom* aPrefix, nsIAtom* aLocalName,
70618:                             nsIAtom* aLowercaseLocalName, PRInt32 aNsID,
70618:                             const nsString& aValue)
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->attribute(aPrefix, aLocalName,
70618:                                           aLowercaseLocalName, aNsID, aValue) :
70618:            txBufferingHandler::attribute(aPrefix, aLocalName,
70618:                                          aLowercaseLocalName, aNsID, aValue);
70618: }
70618: 
70618: nsresult
70618: txUnknownHandler::attribute(nsIAtom* aPrefix, const nsSubstring& aLocalName,
70618:                             const PRInt32 aNsID, const nsString& aValue)
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->attribute(aPrefix, aLocalName, aNsID, aValue) :
70618:            txBufferingHandler::attribute(aPrefix, aLocalName, aNsID, aValue);
70618: }
70618: 
70618: nsresult
70618: txUnknownHandler::characters(const nsSubstring& aData, PRBool aDOE)
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->characters(aData, aDOE) :
70618:            txBufferingHandler::characters(aData, aDOE);
70618: }
70618: 
70618: nsresult
70618: txUnknownHandler::comment(const nsString& aData)
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->comment(aData) :
70618:            txBufferingHandler::comment(aData);
70618: }
70618: 
70618: nsresult
    1: txUnknownHandler::endDocument(nsresult aResult)
    1: {
70618:     if (!mFlushed) {
    1:         if (NS_FAILED(aResult)) {
    1:             return NS_OK;
    1:         }
    1: 
    1:         // This is an unusual case, no output method has been set and we
    1:         // didn't create a document element. Switching to XML output mode
    1:         // anyway.
    1: 
    1:         // Make sure that mEs->mResultHandler == this is true, otherwise we'll
70618:         // leak mEs->mResultHandler in createHandlerAndFlush.
    1:         NS_ASSERTION(mEs->mResultHandler == this,
70618:                      "We're leaking mEs->mResultHandler.");
    1: 
    1:         nsresult rv = createHandlerAndFlush(PR_FALSE, EmptyString(),
    1:                                             kNameSpaceID_None);
    1:         NS_ENSURE_SUCCESS(rv, rv);
70618:     }
    1: 
70618:     return mEs->mResultHandler->endDocument(aResult);
70618: }
    1: 
70618: nsresult
70618: txUnknownHandler::endElement()
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->endElement() :
70618:            txBufferingHandler::endElement();
70618: }
    1: 
70618: nsresult
70618: txUnknownHandler::processingInstruction(const nsString& aTarget,
70618:                                         const nsString& aData)
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->processingInstruction(aTarget, aData) :
70618:            txBufferingHandler::processingInstruction(aTarget, aData);
70618: }
70618: 
70618: nsresult
70618: txUnknownHandler::startDocument()
70618: {
70618:     return mFlushed ?
70618:            mEs->mResultHandler->startDocument() :
70618:            txBufferingHandler::startDocument();
    1: }
    1: 
    1: nsresult
    1: txUnknownHandler::startElement(nsIAtom* aPrefix, nsIAtom* aLocalName,
    1:                                nsIAtom* aLowercaseLocalName, PRInt32 aNsID)
    1: {
70618:     if (!mFlushed) {
    1:         // Make sure that mEs->mResultHandler == this is true, otherwise we'll
70618:         // leak mEs->mResultHandler in createHandlerAndFlush.
    1:         NS_ASSERTION(mEs->mResultHandler == this,
    1:                      "We're leaking mEs->mResultHandler.");
    1: 
    1:         nsCOMPtr<nsIAtom> owner;
    1:         if (!aLowercaseLocalName) {
    1:             owner = TX_ToLowerCaseAtom(aLocalName);
    1:             NS_ENSURE_TRUE(owner, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:             aLowercaseLocalName = owner;
    1:         }
    1: 
29760:         PRBool htmlRoot = aNsID == kNameSpaceID_None && !aPrefix &&
    1:                           aLowercaseLocalName == txHTMLAtoms::html;
    1: 
    1:         // Use aLocalName and not aLowercaseLocalName in case the output
    1:         // handler cares about case. For eHTMLOutput the handler will hardcode
    1:         // to 'html' anyway.
39101:         nsresult rv = createHandlerAndFlush(htmlRoot,
39101:                                             nsDependentAtomString(aLocalName),
39101:                                             aNsID);
    1:         NS_ENSURE_SUCCESS(rv, rv);
70618:     }
    1: 
70618:     return mEs->mResultHandler->startElement(aPrefix, aLocalName,
    1:                                              aLowercaseLocalName, aNsID);
    1: }
    1: 
    1: nsresult
    1: txUnknownHandler::startElement(nsIAtom* aPrefix, const nsSubstring& aLocalName,
    1:                                const PRInt32 aNsID)
    1: {
70618:     if (!mFlushed) {
    1:         // Make sure that mEs->mResultHandler == this is true, otherwise we'll
70618:         // leak mEs->mResultHandler in createHandlerAndFlush.
    1:         NS_ASSERTION(mEs->mResultHandler == this,
    1:                      "We're leaking mEs->mResultHandler.");
    1: 
    1:         PRBool htmlRoot = aNsID == kNameSpaceID_None && !aPrefix &&
    1:                           aLocalName.Equals(NS_LITERAL_STRING("html"),
    1:                                             txCaseInsensitiveStringComparator());
    1:         nsresult rv = createHandlerAndFlush(htmlRoot, aLocalName, aNsID);
    1:         NS_ENSURE_SUCCESS(rv, rv);
70618:     }
    1: 
70618:     return mEs->mResultHandler->startElement(aPrefix, aLocalName, aNsID);
    1: }
    1: 
    1: nsresult txUnknownHandler::createHandlerAndFlush(PRBool aHTMLRoot,
    1:                                                  const nsSubstring& aName,
    1:                                                  const PRInt32 aNsID)
    1: {
    1:     NS_ENSURE_TRUE(mBuffer, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:     txOutputFormat format;
    1:     format.merge(*(mEs->mStylesheet->getOutputFormat()));
    1:     if (format.mMethod == eMethodNotSet) {
    1:         format.mMethod = aHTMLRoot ? eHTMLOutput : eXMLOutput;
    1:     }
    1: 
67678:     nsAutoPtr<txAXMLEventHandler> handler;
    1:     nsresult rv = mEs->mOutputHandlerFactory->createHandlerWith(&format, aName,
    1:                                                                 aNsID,
67678:                                                                 getter_Transfers(handler));
67678:     NS_ENSURE_SUCCESS(rv, rv);
67678: 
    1:     mEs->mOutputHandler = handler;
67678:     mEs->mResultHandler = handler.forget();
70618:     // Let the executionstate delete us. We need to stay alive because we might
70618:     // need to forward hooks to mEs->mResultHandler if someone is currently
70618:     // flushing a buffer to mEs->mResultHandler.
70618:     mEs->mObsoleteHandler = this;
    1: 
70618:     mFlushed = PR_TRUE;
70618: 
70618:     // Let go of out buffer as soon as we're done flushing it, we're not going
70618:     // to need it anymore from this point on (all hooks get forwarded to
70618:     // mEs->mResultHandler.
70618:     nsAutoPtr<txResultBuffer> buffer(mBuffer);
70618:     return buffer->flushToHandler(mEs->mResultHandler);
    1: }
