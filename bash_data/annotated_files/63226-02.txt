 3940: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 3940: /* ***** BEGIN LICENSE BLOCK *****
 3940:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 3940:  *
 3940:  * The contents of this file are subject to the Mozilla Public License Version
 3940:  * 1.1 (the "License"); you may not use this file except in compliance with
 3940:  * the License. You may obtain a copy of the License at
 3940:  * http://www.mozilla.org/MPL/
 3940:  *
 3940:  * Software distributed under the License is distributed on an "AS IS" basis,
 3940:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 3940:  * for the specific language governing rights and limitations under the
 3940:  * License.
 3940:  *
 3940:  * The Original Code is mozila.org code.
 3940:  *
 3940:  * The Initial Developer of the Original Code is
52042:  * Mozilla Foundation
 3940:  * Portions created by the Initial Developer are Copyright (C) 2007
 3940:  * the Initial Developer. All Rights Reserved.
 3940:  *
 3940:  * Contributor(s):
 3940:  *   Dave Camp <dcamp@mozilla.com>
 3940:  *
 3940:  * Alternatively, the contents of this file may be used under the terms of
 3940:  * either the GNU General Public License Version 2 or later (the "GPL"), or
 3940:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 3940:  * in which case the provisions of the GPL or the LGPL are applicable instead
 3940:  * of those above. If you wish to allow use of your version of this file only
 3940:  * under the terms of either the GPL or the LGPL, and not to allow others to
 3940:  * use your version of this file under the terms of the MPL, indicate your
 3940:  * decision by deleting the provisions above and replace them with the notice
 3940:  * and other provisions required by the GPL or the LGPL. If you do not delete
 3940:  * the provisions above, a recipient may use your version of this file under
 3940:  * the terms of any one of the MPL, the GPL or the LGPL.
 3940:  *
 3940:  * ***** END LICENSE BLOCK ***** */
 3940: 
 3940: #include "nsDOMFile.h"
 3940: 
 3940: #include "nsCExternalHandlerService.h"
 3940: #include "nsContentCID.h"
 3940: #include "nsContentUtils.h"
 3940: #include "nsDOMClassInfo.h"
 3940: #include "nsDOMError.h"
 3940: #include "nsICharsetAlias.h"
 3940: #include "nsICharsetDetector.h"
 3940: #include "nsICharsetConverterManager.h"
 3940: #include "nsIConverterInputStream.h"
 3940: #include "nsIDocument.h"
 3940: #include "nsIDOMDocument.h"
 3940: #include "nsIFile.h"
 3940: #include "nsIFileStreams.h"
 3940: #include "nsIInputStream.h"
 3940: #include "nsIMIMEService.h"
 3940: #include "nsIPlatformCharset.h"
 3940: #include "nsISeekableStream.h"
 3940: #include "nsIUnicharInputStream.h"
 3940: #include "nsIUnicodeDecoder.h"
 3940: #include "nsNetCID.h"
 3940: #include "nsNetUtil.h"
38871: #include "nsIUUIDGenerator.h"
38871: #include "nsFileDataProtocolHandler.h"
52042: #include "nsStringStream.h"
55459: #include "CheckedInt.h"
 3940: 
 3940: #include "plbase64.h"
 3940: #include "prmem.h"
 3940: 
55459: using namespace mozilla;
55459: 
63226: // XXXkhuey the input stream that we pass out of a DOMFile
63226: // can outlive the actual DOMFile object.  Thus, we must
63226: // ensure that the buffer underlying the stream we get
63226: // from NS_NewByteInputStream is held alive as long as the
63226: // stream is.  We do that by passing back this class instead.
63226: class DataOwnerAdapter : public nsIInputStream,
63226:                          public nsISeekableStream {
63226:   typedef nsDOMMemoryFile::DataOwner DataOwner;
63226: public:
63226:   static nsresult Create(DataOwner* aDataOwner,
63226:                          PRUint32 aStart,
63226:                          PRUint32 aLength,
63226:                          nsIInputStream** _retval);
63226: 
63226:   NS_DECL_ISUPPORTS
63226: 
63226:   NS_FORWARD_NSIINPUTSTREAM(mStream->)
63226: 
63226:   NS_FORWARD_NSISEEKABLESTREAM(mSeekableStream->)
63226: 
63226: private:
63226:   DataOwnerAdapter(DataOwner* aDataOwner,
63226:                    nsIInputStream* aStream)
63226:     : mDataOwner(aDataOwner), mStream(aStream),
63226:       mSeekableStream(do_QueryInterface(aStream))
63226:   {
63226:     NS_ASSERTION(mSeekableStream, "Somebody gave us the wrong stream!");
63226:   }
63226: 
63226:   nsRefPtr<DataOwner> mDataOwner;
63226:   nsCOMPtr<nsIInputStream> mStream;
63226:   nsCOMPtr<nsISeekableStream> mSeekableStream;
63226: };
63226: 
63226: NS_IMPL_THREADSAFE_ISUPPORTS2(DataOwnerAdapter, nsIInputStream, nsISeekableStream)
63226: 
63226: nsresult DataOwnerAdapter::Create(DataOwner* aDataOwner,
63226:                                   PRUint32 aStart,
63226:                                   PRUint32 aLength,
63226:                                   nsIInputStream** _retval)
63226: {
63226:   nsresult rv;
63226:   NS_ASSERTION(aDataOwner, "Uh ...");
63226: 
63226:   nsCOMPtr<nsIInputStream> stream;
63226: 
63226:   rv = NS_NewByteInputStream(getter_AddRefs(stream),
63226:                              static_cast<const char*>(aDataOwner->mData) +
63226:                              aStart,
63226:                              (PRInt32)aLength,
63226:                              NS_ASSIGNMENT_DEPEND);
63226:   NS_ENSURE_SUCCESS(rv, rv);
63226: 
63226:   NS_ADDREF(*_retval = new DataOwnerAdapter(aDataOwner, stream));
63226: 
63226:   return NS_OK;
63226: }
63226: 
 3940: // nsDOMFile implementation
 3940: 
40490: DOMCI_DATA(File, nsDOMFile)
55459: DOMCI_DATA(Blob, nsDOMFile)
40490: 
 3940: NS_INTERFACE_MAP_BEGIN(nsDOMFile)
 3940:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMFile)
55459:   NS_INTERFACE_MAP_ENTRY(nsIDOMBlob)
55459:   NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIDOMFile, mIsFullFile)
52042:   NS_INTERFACE_MAP_ENTRY(nsIXHRSendable)
 3940:   NS_INTERFACE_MAP_ENTRY(nsICharsetDetectionObserver)
55459:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO_CONDITIONAL(File, mIsFullFile)
55459:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO_CONDITIONAL(Blob, !mIsFullFile)
 3940: NS_INTERFACE_MAP_END
 3940: 
 3940: NS_IMPL_ADDREF(nsDOMFile)
 3940: NS_IMPL_RELEASE(nsDOMFile)
 3940: 
 3940: static nsresult
 3940: DOMFileResult(nsresult rv)
 3940: {
 3940:   if (rv == NS_ERROR_FILE_NOT_FOUND) {
 3940:     return NS_ERROR_DOM_FILE_NOT_FOUND_ERR;
 3940:   }
 3940: 
 3940:   if (NS_ERROR_GET_MODULE(rv) == NS_ERROR_MODULE_FILES) {
 3940:     return NS_ERROR_DOM_FILE_NOT_READABLE_ERR;
 3940:   }
 3940: 
 3940:   return rv;
 3940: }
 3940: 
 3940: NS_IMETHODIMP
 3940: nsDOMFile::GetFileName(nsAString &aFileName)
 3940: {
33620:   return GetName(aFileName);
33620: }
33620: 
33620: NS_IMETHODIMP
33620: nsDOMFile::GetFileSize(PRUint64 *aFileSize)
33620: {
33620:   return GetSize(aFileSize);
33620: }
33620: 
33620: NS_IMETHODIMP
33620: nsDOMFile::GetName(nsAString &aFileName)
33620: {
55459:   NS_ASSERTION(mIsFullFile, "Should only be called on files");
 3940:   return mFile->GetLeafName(aFileName);
 3940: }
 3940: 
 3940: NS_IMETHODIMP
37851: nsDOMFile::GetMozFullPath(nsAString &aFileName)
37851: {
55459:   NS_ASSERTION(mIsFullFile, "Should only be called on files");
37851:   if (nsContentUtils::IsCallerTrustedForCapability("UniversalFileRead")) {
52042:     return GetMozFullPathInternal(aFileName);
37851:   }
37851:   aFileName.Truncate();
37851:   return NS_OK;
37851: }
37851: 
37851: NS_IMETHODIMP
52042: nsDOMFile::GetMozFullPathInternal(nsAString &aFilename)
52042: {
55459:   NS_ASSERTION(mIsFullFile, "Should only be called on files");
52042:   return mFile->GetPath(aFilename);
52042: }
52042: 
52042: NS_IMETHODIMP
33620: nsDOMFile::GetSize(PRUint64 *aFileSize)
 3940: {
55459:   if (mIsFullFile) {
 3940:     PRInt64 fileSize;
 3940:     nsresult rv = mFile->GetFileSize(&fileSize);
 3940:     NS_ENSURE_SUCCESS(rv, rv);
 3940:   
 3940:     if (fileSize < 0) {
 3940:       return NS_ERROR_FAILURE;
 3940:     }
 3940:   
 3940:     *aFileSize = fileSize;
55459:   }
55459:   else {
55459:     *aFileSize = mLength;
55459:   }
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: NS_IMETHODIMP
34929: nsDOMFile::GetType(nsAString &aType)
33620: {
55459:   if (mContentType.IsEmpty() && mFile && mIsFullFile) {
33620:     nsresult rv;
33620:     nsCOMPtr<nsIMIMEService> mimeService =
33620:       do_GetService(NS_MIMESERVICE_CONTRACTID, &rv);
33620:     NS_ENSURE_SUCCESS(rv, rv);
33620: 
34929:     nsCAutoString mimeType;
34929:     rv = mimeService->GetTypeFromFile(mFile, mimeType);
33620:     if (NS_FAILED(rv)) {
34929:       aType.Truncate();
33620:       return NS_OK;
33620:     }
33620: 
34929:     AppendUTF8toUTF16(mimeType, mContentType);
33620:   }
33620: 
34929:   aType = mContentType;
33620: 
33620:   return NS_OK;
33620: }
33620: 
55459: // Makes sure that aStart and aStart + aLength is less then or equal to aSize
55459: void
55459: ClampToSize(PRUint64 aSize, PRUint64& aStart, PRUint64& aLength)
55459: {
55459:   if (aStart > aSize) {
55459:     aStart = aLength = 0;
55459:   }
55459:   CheckedUint64 endOffset = aStart;
55459:   endOffset += aLength;
55459:   if (!endOffset.valid() || endOffset.value() > aSize) {
55459:     aLength = aSize - aStart;
55459:   }
55459: }
55459: 
55459: NS_IMETHODIMP
55459: nsDOMFile::Slice(PRUint64 aStart, PRUint64 aLength,
55459:                  const nsAString& aContentType, nsIDOMBlob **aBlob)
55459: {
55459:   *aBlob = nsnull;
55459: 
55459:   // Truncate aLength and aStart so that we stay within this file.
55459:   PRUint64 thisLength;
55459:   nsresult rv = GetSize(&thisLength);
55459:   NS_ENSURE_SUCCESS(rv, rv);
55459:   ClampToSize(thisLength, aStart, aLength);
55459:   
55459:   // Create the new file
55459:   NS_ADDREF(*aBlob = new nsDOMFile(this, aStart, aLength, aContentType));
55459:   
55459:   return NS_OK;
55459: }
55459: 
33620: NS_IMETHODIMP
52042: nsDOMFile::GetInternalStream(nsIInputStream **aStream)
52042: {
55459:   return mIsFullFile ?
55459:     NS_NewLocalFileInputStream(aStream, mFile, -1, -1,
55459:                                nsIFileInputStream::CLOSE_ON_EOF |
55459:                                nsIFileInputStream::REOPEN_ON_REWIND) :
55459:     NS_NewPartialLocalFileInputStream(aStream, mFile, mStart, mLength,
55459:                                       -1, -1,
52042:                                       nsIFileInputStream::CLOSE_ON_EOF |
52042:                                       nsIFileInputStream::REOPEN_ON_REWIND);
52042: }
52042: 
52042: NS_IMETHODIMP
54295: nsDOMFile::GetInternalUrl(nsIPrincipal* aPrincipal, nsAString& aURL)
52042: {
54295:   NS_ENSURE_STATE(aPrincipal);
54295: 
38871:   nsresult rv;
38871:   nsCOMPtr<nsIUUIDGenerator> uuidgen =
38871:     do_GetService("@mozilla.org/uuid-generator;1", &rv);
38871:   NS_ENSURE_SUCCESS(rv, rv);
38871:   
38871:   nsID id;
38871:   rv = uuidgen->GenerateUUIDInPlace(&id);
38871:   NS_ENSURE_SUCCESS(rv, rv);
38871:   
38871:   char chars[NSID_LENGTH];
38871:   id.ToProvidedString(chars);
38871:     
38871:   nsCString url = NS_LITERAL_CSTRING(FILEDATA_SCHEME ":") +
38871:     Substring(chars + 1, chars + NSID_LENGTH - 2);
38871: 
54295:   nsFileDataProtocolHandler::AddFileDataEntry(url, this,
54295:                                               aPrincipal);
38871: 
52042:   CopyASCIItoUTF16(url, aURL);
38871:   
38871:   return NS_OK;
38871: }
38871: 
38871: NS_IMETHODIMP
 3940: nsDOMFile::GetAsText(const nsAString &aCharset, nsAString &aResult)
 3940: {
 3940:   aResult.Truncate();
 3940: 
 3940:   nsCOMPtr<nsIInputStream> stream;
52042:   nsresult rv = GetInternalStream(getter_AddRefs(stream));
 3940:   NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940: 
 3940:   nsCAutoString charsetGuess;
 3940:   if (!aCharset.IsEmpty()) {
 3940:     CopyUTF16toUTF8(aCharset, charsetGuess);
 3940:   } else {
 3940:     rv = GuessCharset(stream, charsetGuess);
 3940:     NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940: 
 3940:     nsCOMPtr<nsISeekableStream> seekable = do_QueryInterface(stream);
 3940:     if (!seekable) return NS_ERROR_FAILURE;
 3940:     rv = seekable->Seek(nsISeekableStream::NS_SEEK_SET, 0);
 3940:     NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940:   }
 3940: 
 3940:   nsCAutoString charset;
 3940:   nsCOMPtr<nsICharsetAlias> alias =
 3940:     do_GetService(NS_CHARSETALIAS_CONTRACTID, &rv);
 3940:   NS_ENSURE_SUCCESS(rv, rv);
 3940: 
 3940:   rv = alias->GetPreferred(charsetGuess, charset);
 3940:   NS_ENSURE_SUCCESS(rv, rv);
 3940: 
56391:   return DOMFileResult(ConvertStream(stream, charset.get(), aResult));
 3940: }
 3940: 
 3940: NS_IMETHODIMP
 3940: nsDOMFile::GetAsDataURL(nsAString &aResult)
 3940: {
 3940:   aResult.AssignLiteral("data:");
 3940: 
 3940:   nsresult rv;
52042:   if (!mContentType.Length()) {
 3940:     nsCOMPtr<nsIMIMEService> mimeService =
 3940:       do_GetService(NS_MIMESERVICE_CONTRACTID, &rv);
 3940:     NS_ENSURE_SUCCESS(rv, rv);
 3940: 
 3940:     nsCAutoString contentType;
 3940:     rv = mimeService->GetTypeFromFile(mFile, contentType);
 3940:     if (NS_SUCCEEDED(rv)) {
52042:       CopyUTF8toUTF16(contentType, mContentType);
52042:     }
52042:   }
52042: 
52042:   if (mContentType.Length()) {
52042:     aResult.Append(mContentType);
 3940:   } else {
 3940:     aResult.AppendLiteral("application/octet-stream");
 3940:   }
 3940:   aResult.AppendLiteral(";base64,");
 3940: 
 3940:   nsCOMPtr<nsIInputStream> stream;
52042:   rv = GetInternalStream(getter_AddRefs(stream));
 3940:   NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940: 
 3940:   char readBuf[4096];
 3940:   PRUint32 leftOver = 0;
 3940:   PRUint32 numRead;
 3940:   do {
 3940:     rv = stream->Read(readBuf + leftOver, sizeof(readBuf) - leftOver, &numRead);
 3940:     NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940: 
 3940:     PRUint32 numEncode = numRead + leftOver;
 3940:     leftOver = 0;
 3940: 
 3940:     if (numEncode == 0) break;
 3940: 
 3940:     // unless this is the end of the file, encode in multiples of 3
 3940:     if (numRead > 0) {
 3940:       leftOver = numEncode % 3;
 3940:       numEncode -= leftOver;
 3940:     }
 3940: 
 3940:     // out buffer should be at least 4/3rds the read buf, plus a terminator
 3940:     char *base64 = PL_Base64Encode(readBuf, numEncode, nsnull);
56391:     if (!base64) {
56391:       return DOMFileResult(NS_ERROR_OUT_OF_MEMORY);
56391:     }
56391:     nsDependentCString str(base64);
56391:     PRUint32 strLen = str.Length();
56391:     PRUint32 oldLength = aResult.Length();
56391:     AppendASCIItoUTF16(str, aResult);
 3940:     PR_Free(base64);
56391:     if (aResult.Length() - oldLength != strLen) {
56391:       return DOMFileResult(NS_ERROR_OUT_OF_MEMORY);
56391:     }
 3940: 
 3940:     if (leftOver) {
 3940:       memmove(readBuf, readBuf + numEncode, leftOver);
 3940:     }
 3940:   } while (numRead > 0);
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: NS_IMETHODIMP
 3940: nsDOMFile::GetAsBinary(nsAString &aResult)
 3940: {
 3940:   aResult.Truncate();
 3940: 
 3940:   nsCOMPtr<nsIInputStream> stream;
52042:   nsresult rv = GetInternalStream(getter_AddRefs(stream));
 3940:   NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
 3940: 
 3940:   PRUint32 numRead;
 3940:   do {
 3940:     char readBuf[4096];
 3940:     rv = stream->Read(readBuf, sizeof(readBuf), &numRead);
 3940:     NS_ENSURE_SUCCESS(rv, DOMFileResult(rv));
56391:     PRUint32 oldLength = aResult.Length();
 3940:     AppendASCIItoUTF16(Substring(readBuf, readBuf + numRead), aResult);
56391:     if (aResult.Length() - oldLength != numRead) {
56391:       return DOMFileResult(NS_ERROR_OUT_OF_MEMORY);
56391:     }
 3940:   } while (numRead > 0);
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: nsresult
 3940: nsDOMFile::GuessCharset(nsIInputStream *aStream,
 3940:                         nsACString &aCharset)
 3940: {
 3940: 
 3940:   if (!mCharset.IsEmpty()) {
 3940:     aCharset = mCharset;
 3940:     return NS_OK;
 3940:   }
 3940: 
 3940:   // First try the universal charset detector
 3940:   nsCOMPtr<nsICharsetDetector> detector
 3940:     = do_CreateInstance(NS_CHARSET_DETECTOR_CONTRACTID_BASE
 3940:                         "universal_charset_detector");
 3940:   if (!detector) {
 3940:     // No universal charset detector, try the default charset detector
 3940:     const nsAdoptingString& detectorName =
 3940:       nsContentUtils::GetLocalizedStringPref("intl.charset.detector");
 3940:     if (!detectorName.IsEmpty()) {
 3940:       nsCAutoString detectorContractID;
 3940:       detectorContractID.AssignLiteral(NS_CHARSET_DETECTOR_CONTRACTID_BASE);
 3940:       AppendUTF16toUTF8(detectorName, detectorContractID);
 3940:       detector = do_CreateInstance(detectorContractID.get());
 3940:     }
 3940:   }
 3940: 
 3940:   nsresult rv;
 3940:   if (detector) {
 3940:     detector->Init(this);
 3940: 
 3940:     PRBool done;
 3940:     PRUint32 numRead;
 3940:     do {
 3940:       char readBuf[4096];
 3940:       rv = aStream->Read(readBuf, sizeof(readBuf), &numRead);
 3940:       NS_ENSURE_SUCCESS(rv, rv);
 3940: 
 3940:       rv = detector->DoIt(readBuf, numRead, &done);
 3940:       NS_ENSURE_SUCCESS(rv, rv);
 3940:     } while (!done && numRead > 0);
 3940: 
 3940:     rv = detector->Done();
 3940:     NS_ENSURE_SUCCESS(rv, rv);
 3940:   } else {
 3940:     // no charset detector available, check the BOM
 3940:     unsigned char sniffBuf[4];
 3940:     PRUint32 numRead;
 3940:     rv = aStream->Read(reinterpret_cast<char*>(sniffBuf),
 3940:                        sizeof(sniffBuf), &numRead);
 3940:     NS_ENSURE_SUCCESS(rv, rv);
 3940: 
 3940:     if (numRead >= 4 &&
 3940:         sniffBuf[0] == 0x00 &&
 3940:         sniffBuf[1] == 0x00 &&
 3940:         sniffBuf[2] == 0xfe &&
 3940:         sniffBuf[3] == 0xff) {
 3940:       mCharset = "UTF-32BE";
 3940:     } else if (numRead >= 4 &&
 3940:                sniffBuf[0] == 0xff &&
 3940:                sniffBuf[1] == 0xfe &&
 3940:                sniffBuf[2] == 0x00 &&
 3940:                sniffBuf[3] == 0x00) {
 3940:       mCharset = "UTF-32LE";
 3940:     } else if (numRead >= 2 &&
 3940:                sniffBuf[0] == 0xfe &&
 3940:                sniffBuf[1] == 0xff) {
 3940:       mCharset = "UTF-16BE";
 3940:     } else if (numRead >= 2 &&
 3940:                sniffBuf[0] == 0xff &&
 3940:                sniffBuf[1] == 0xfe) {
 3940:       mCharset = "UTF-16LE";
 3940:     } else if (numRead >= 3 &&
 3940:                sniffBuf[0] == 0xef &&
 3940:                sniffBuf[1] == 0xbb &&
 3940:                sniffBuf[2] == 0xbf) {
 3940:       mCharset = "UTF-8";
 3940:     }
 3940:   }
 3940: 
 3940:   if (mCharset.IsEmpty()) {
 3940:     // no charset detected, default to the system charset
 3940:     nsCOMPtr<nsIPlatformCharset> platformCharset =
 3940:       do_GetService(NS_PLATFORMCHARSET_CONTRACTID, &rv);
 3940:     if (NS_SUCCEEDED(rv)) {
 3940:       rv = platformCharset->GetCharset(kPlatformCharsetSel_PlainTextInFile,
 3940:                                        mCharset);
 3940:     }
 3940:   }
 3940: 
 3940:   if (mCharset.IsEmpty()) {
 3940:     // no sniffed or default charset, try UTF-8
 3940:     mCharset.AssignLiteral("UTF-8");
 3940:   }
 3940: 
 3940:   aCharset = mCharset;
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: NS_IMETHODIMP
52042: nsDOMFile::GetSendInfo(nsIInputStream** aBody,
52042:                        nsACString& aContentType,
52042:                        nsACString& aCharset)
52042: {
52042:   nsresult rv;
52042: 
52042:   nsCOMPtr<nsIInputStream> stream;
52042:   rv = this->GetInternalStream(getter_AddRefs(stream));
52042:   NS_ENSURE_SUCCESS(rv, rv);
52042: 
52042:   nsString contentType;
52042:   rv = this->GetType(contentType);
52042:   NS_ENSURE_SUCCESS(rv, rv);
52042: 
52042:   CopyUTF16toUTF8(contentType, aContentType);
52042: 
52042:   aCharset.Truncate();
52042: 
52042:   stream.forget(aBody);
52042:   return NS_OK;
52042: }
52042: 
52042: NS_IMETHODIMP
 3940: nsDOMFile::Notify(const char* aCharset, nsDetectionConfident aConf)
 3940: {
 3940:   mCharset.Assign(aCharset);
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: nsresult
 3940: nsDOMFile::ConvertStream(nsIInputStream *aStream,
 3940:                          const char *aCharset,
 3940:                          nsAString &aResult)
 3940: {
11371:   aResult.Truncate();
11371: 
 3940:   nsCOMPtr<nsIConverterInputStream> converterStream =
 3940:     do_CreateInstance("@mozilla.org/intl/converter-input-stream;1");
 3940:   if (!converterStream) return NS_ERROR_FAILURE;
 3940: 
 3940:   nsresult rv = converterStream->Init
 3940:                   (aStream, aCharset,
 3940:                    8192,
 3940:                    nsIConverterInputStream::DEFAULT_REPLACEMENT_CHARACTER);
 3940:   NS_ENSURE_SUCCESS(rv, rv);
 3940: 
 3940:   nsCOMPtr<nsIUnicharInputStream> unicharStream =
 3940:     do_QueryInterface(converterStream);
 3940:   if (!unicharStream) return NS_ERROR_FAILURE;
 3940: 
 3940:   PRUint32 numChars;
11371:   nsString result;
11371:   rv = unicharStream->ReadString(8192, result, &numChars);
11371:   while (NS_SUCCEEDED(rv) && numChars > 0) {
56391:     PRUint32 oldLength = aResult.Length();
11371:     aResult.Append(result);
56391:     if (aResult.Length() - oldLength != result.Length()) {
56391:       return NS_ERROR_OUT_OF_MEMORY;
56391:     }
11371:     rv = unicharStream->ReadString(8192, result, &numChars);
11371:   }
11371: 
11371:   return rv;
 3940: }
 3940: 
52042: // nsDOMMemoryFile Implementation
52042: NS_IMETHODIMP
52042: nsDOMMemoryFile::GetName(nsAString &aFileName)
52042: {
55459:   NS_ASSERTION(mIsFullFile, "Should only be called on files");
54294:   aFileName = mName;
52042:   return NS_OK;
52042: }
52042: 
52042: NS_IMETHODIMP
52042: nsDOMMemoryFile::GetSize(PRUint64 *aFileSize)
52042: {
52042:   *aFileSize = mLength;
52042:   return NS_OK;
52042: }
52042: 
52042: NS_IMETHODIMP
55459: nsDOMMemoryFile::Slice(PRUint64 aStart, PRUint64 aLength,
55459:                        const nsAString& aContentType, nsIDOMBlob **aBlob)
55459: {
55459:   *aBlob = nsnull;
55459: 
55459:   // Truncate aLength and aStart so that we stay within this file.
55459:   ClampToSize(mLength, aStart, aLength);
55459: 
55459:   // Create the new file
55459:   NS_ADDREF(*aBlob = new nsDOMMemoryFile(this, aStart, aLength, aContentType));
55459:   
55459:   return NS_OK;
55459: }
55459: 
55459: NS_IMETHODIMP
52042: nsDOMMemoryFile::GetInternalStream(nsIInputStream **aStream)
52042: {
52042:   if (mLength > PR_INT32_MAX)
52042:     return NS_ERROR_FAILURE;
52042: 
63226:   return DataOwnerAdapter::Create(mDataOwner, mStart, mLength, aStream);
54294: }
54294: 
54294: NS_IMETHODIMP
52042: nsDOMMemoryFile::GetMozFullPathInternal(nsAString &aFilename)
52042: {
55459:   NS_ASSERTION(mIsFullFile, "Should only be called on files");
55459:   aFilename.Truncate();
55459:   return NS_OK;
52042: }
52042: 
 3940: // nsDOMFileList implementation
 3940: 
40490: DOMCI_DATA(FileList, nsDOMFileList)
40490: 
 3940: NS_INTERFACE_MAP_BEGIN(nsDOMFileList)
 3940:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMFileList)
 3940:   NS_INTERFACE_MAP_ENTRY(nsIDOMFileList)
 3940:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(FileList)
 3940: NS_INTERFACE_MAP_END
 3940: 
 3940: NS_IMPL_ADDREF(nsDOMFileList)
 3940: NS_IMPL_RELEASE(nsDOMFileList)
 3940: 
 3940: NS_IMETHODIMP
 3940: nsDOMFileList::GetLength(PRUint32* aLength)
 3940: {
 3940:   *aLength = mFiles.Count();
 3940: 
 3940:   return NS_OK;
 3940: }
 3940: 
 3940: NS_IMETHODIMP
 3940: nsDOMFileList::Item(PRUint32 aIndex, nsIDOMFile **aFile)
 3940: {
20752:   NS_IF_ADDREF(*aFile = GetItemAt(aIndex));
 3940: 
 3940:   return NS_OK;
 3940: }
33620: 
33620: // nsDOMFileError implementation
33620: 
40490: DOMCI_DATA(FileError, nsDOMFileError)
40490: 
33620: NS_INTERFACE_MAP_BEGIN(nsDOMFileError)
33620:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMFileError)
33620:   NS_INTERFACE_MAP_ENTRY(nsIDOMFileError)
33620:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(FileError)
33620: NS_INTERFACE_MAP_END
33620: 
33620: NS_IMPL_ADDREF(nsDOMFileError)
33620: NS_IMPL_RELEASE(nsDOMFileError)
33620: 
33620: NS_IMETHODIMP
33620: nsDOMFileError::GetCode(PRUint16* aCode)
33620: {
33620:   *aCode = mCode;
33620:   return NS_OK;
33620: }
52042: 
55459: nsDOMFileInternalUrlHolder::nsDOMFileInternalUrlHolder(nsIDOMBlob* aFile,
54295:                                                        nsIPrincipal* aPrincipal
52042:                                                        MOZILLA_GUARD_OBJECT_NOTIFIER_PARAM_IN_IMPL) {
52042:   MOZILLA_GUARD_OBJECT_NOTIFIER_INIT;
54295:   aFile->GetInternalUrl(aPrincipal, mUrl);
52042: }
52042:  
52042: nsDOMFileInternalUrlHolder::~nsDOMFileInternalUrlHolder() {
52042:   if (!mUrl.IsEmpty()) {
52042:     nsCAutoString narrowUrl;
52042:     CopyUTF16toUTF8(mUrl, narrowUrl);
52042:     nsFileDataProtocolHandler::RemoveFileDataEntry(narrowUrl);
52042:   }
52042: }
