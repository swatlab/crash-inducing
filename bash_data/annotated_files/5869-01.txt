   1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Doug Turner <dougt@netscape.com> (Original Author)
   1:  *   Judson Valeski <valeski@netscape.com>
   1:  *   Dan Matejka <danm@netscape.com>
   1:  *   Scott Collins <scc@netscape.com>
   1:  *   Heikki Toivonen <heiki@citec.fi>
   1:  *   Patrick Beard <beard@netscape.com>
   1:  *   Pierre Phaneuf <pp@ludusdesign.com>
   1:  *   Warren Harris <warren@netscape.com>
   1:  *   Chris Seawood <cls@seawood.org>
   1:  *   Chris Waterson <waterson@netscape.com>
   1:  *   Dan Mosedale <dmose@netscape.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "nsProxyEventPrivate.h"
   1: 
   1: #include "nsIComponentManager.h"
   1: #include "nsIProxyObjectManager.h"
   1: #include "nsIServiceManager.h"
   1: #include "nsIThread.h"
   1: 
   1: #include "nsAutoLock.h"
   1: #include "nsCOMPtr.h"
   1: #include "nsThreadUtils.h"
   1: #include "xptiprivate.h"
   1: 
   1: 
   1: #ifdef PR_LOGGING
   1: PRLogModuleInfo *nsProxyObjectManager::sLog = PR_NewLogModule("xpcomproxy");
   1: #endif
   1: 
   1: class nsProxyEventKey : public nsHashKey
   1: {
   1: public:
   1:     nsProxyEventKey(void* rootObjectKey, void* targetKey, PRInt32 proxyType)
   1:         : mRootObjectKey(rootObjectKey), mTargetKey(targetKey), mProxyType(proxyType) {
   1:     }
   1:   
   1:     PRUint32 HashCode(void) const {
   1:         return NS_PTR_TO_INT32(mRootObjectKey) ^ 
   1:             NS_PTR_TO_INT32(mTargetKey) ^ mProxyType;
   1:     }
   1: 
   1:     PRBool Equals(const nsHashKey *aKey) const {
   1:         const nsProxyEventKey* other = (const nsProxyEventKey*)aKey;
   1:         return mRootObjectKey == other->mRootObjectKey
   1:             && mTargetKey == other->mTargetKey
   1:             && mProxyType == other->mProxyType;
   1:     }
   1: 
   1:     nsHashKey *Clone() const {
   1:         return new nsProxyEventKey(mRootObjectKey, mTargetKey, mProxyType);
   1:     }
   1: 
   1: protected:
   1:     void*       mRootObjectKey;
   1:     void*       mTargetKey;
   1:     PRInt32     mProxyType;
   1: };
   1: 
   1: /////////////////////////////////////////////////////////////////////////
   1: // nsProxyObjectManager
   1: /////////////////////////////////////////////////////////////////////////
   1: 
   1: nsProxyObjectManager* nsProxyObjectManager::mInstance = nsnull;
   1: 
   1: NS_IMPL_THREADSAFE_ISUPPORTS1(nsProxyObjectManager, nsIProxyObjectManager)
   1: 
   1: nsProxyObjectManager::nsProxyObjectManager()
   1:     : mProxyObjectMap(256, PR_FALSE)
   1: {
4730:     mProxyCreationLock = PR_NewLock();
   1:     mProxyClassMap.Init(256);
   1: }
   1: 
   1: nsProxyObjectManager::~nsProxyObjectManager()
   1: {
   1:     mProxyClassMap.Clear();
   1: 
4730:     if (mProxyCreationLock)
4730:         PR_DestroyLock(mProxyCreationLock);
   1: 
   1:     nsProxyObjectManager::mInstance = nsnull;
   1: }
   1: 
   1: PRBool
   1: nsProxyObjectManager::IsManagerShutdown()
   1: {
   1:     return mInstance == nsnull;
   1: }
   1: 
   1: nsProxyObjectManager *
   1: nsProxyObjectManager::GetInstance()
   1: {
   1:     if (!mInstance) 
   1:         mInstance = new nsProxyObjectManager();
   1:     return mInstance;
   1: }
   1: 
   1: void
   1: nsProxyObjectManager::Shutdown()
   1: {
   1:     mInstance = nsnull;
   1: }
   1: 
   1: NS_IMETHODIMP 
   1: nsProxyObjectManager::Create(nsISupports* outer, const nsIID& aIID,
   1:                              void* *aInstancePtr)
   1: {
   1:     nsProxyObjectManager *proxyObjectManager = GetInstance();
   1:     if (!proxyObjectManager)
   1:         return NS_ERROR_OUT_OF_MEMORY;
   1: 
   1:     return proxyObjectManager->QueryInterface(aIID, aInstancePtr);
   1: }
   1: 
5869: class nsProxyLockedRefPtr
5869: {
5869: public:
5869:     nsProxyLockedRefPtr(nsProxyObject* aPtr) :
5869:         mProxyObject(aPtr)
5869:     {
5869:         if (mProxyObject)
5869:             mProxyObject->LockedAddRef();
5869:     }
5869: 
5869:     ~nsProxyLockedRefPtr()
5869:     {
5869:         if (mProxyObject)
5869:             mProxyObject->LockedRelease();
5869:     }
5869: 
5869:     operator nsProxyObject*() const
5869:     {
5869:         return mProxyObject;
5869:     }
5869: 
5869:     nsProxyObject* operator->() const
5869:     {
5869:         return mProxyObject;
5869:     }
5869: 
5869: private:
5869:     nsProxyObject *mProxyObject;
5869: };
5869: 
   1: NS_IMETHODIMP 
   1: nsProxyObjectManager::GetProxyForObject(nsIEventTarget* aTarget, 
   1:                                         REFNSIID aIID, 
   1:                                         nsISupports* aObj, 
   1:                                         PRInt32 proxyType, 
   1:                                         void** aProxyObject)
   1: {
   1:     NS_ENSURE_ARG_POINTER(aObj);
   1: 
   1:     *aProxyObject = nsnull;
   1: 
   1:     // handle special values
   1:     nsCOMPtr<nsIThread> thread;
   1:     if (aTarget == NS_PROXY_TO_CURRENT_THREAD) {
   1:       aTarget = NS_GetCurrentThread();
   1:     } else if (aTarget == NS_PROXY_TO_MAIN_THREAD) {
   1:       thread = do_GetMainThread();
   1:       aTarget = thread.get();
   1:     }
   1: 
   1:     // check to see if the target is on our thread.  If so, just return the
   1:     // real object.
   1:     
   1:     if (!(proxyType & NS_PROXY_ASYNC) && !(proxyType & NS_PROXY_ALWAYS))
   1:     {
   1:         PRBool result;
   1:         aTarget->IsOnCurrentThread(&result);
   1:      
   1:         if (result)
   1:             return aObj->QueryInterface(aIID, aProxyObject);
   1:     }
   1:     
   1:     nsCOMPtr<nsISupports> realObj = do_QueryInterface(aObj);
   1: 
   1:     // Make sure the object passed in is not a proxy; if it is, be nice and
   1:     // build the proxy for the real object.
   1:     nsCOMPtr<nsProxyObject> po = do_QueryInterface(aObj);
   1:     if (po) {
   1:         realObj = po->GetRealObject();
   1:     }
   1: 
   1:     nsCOMPtr<nsISupports> realEQ = do_QueryInterface(aTarget);
   1: 
   1:     nsProxyEventKey rootKey(realObj, realEQ, proxyType);
   1: 
4730:     {
4730:         nsAutoLock lock(mProxyCreationLock);
5869:         nsProxyLockedRefPtr root =
4730:             (nsProxyObject*) mProxyObjectMap.Get(&rootKey);
4730:         if (root)
   1:             return root->LockedFind(aIID, aProxyObject);
   1:     }
   1: 
4730:     // don't lock while creating the nsProxyObject
4730:     nsProxyObject *newRoot = new nsProxyObject(aTarget, proxyType, realObj);
4730:     if (!newRoot)
4730:         return NS_ERROR_OUT_OF_MEMORY;
4730: 
4730:     // lock again, and check for a race putting into mProxyObjectMap
4730:     {
4730:         nsAutoLock lock(mProxyCreationLock);
5869:         nsProxyLockedRefPtr root = 
4730:             (nsProxyObject*) mProxyObjectMap.Get(&rootKey);
4730:         if (root) {
4730:             delete newRoot;
4730:             return root->LockedFind(aIID, aProxyObject);
4730:         }
4730: 
4730:         mProxyObjectMap.Put(&rootKey, newRoot);
5869: 
5869:         nsProxyLockedRefPtr kungFuDeathGrip(newRoot);
4730:         return newRoot->LockedFind(aIID, aProxyObject);
4730:     }
4730: }
4730: 
   1: void
4730: nsProxyObjectManager::LockedRemove(nsProxyObject *aProxy)
   1: {
   1:     nsCOMPtr<nsISupports> realEQ = do_QueryInterface(aProxy->GetTarget());
   1: 
   1:     nsProxyEventKey rootKey(aProxy->GetRealObject(), realEQ, aProxy->GetProxyType());
   1: 
   1:     if (!mProxyObjectMap.Remove(&rootKey)) {
   1:         NS_ERROR("nsProxyObject not found in global hash.");
   1:     }
   1: }
   1: 
   1: nsresult
   1: nsProxyObjectManager::GetClass(REFNSIID aIID, nsProxyEventClass **aResult)
   1: {
4730:     {
4730:         nsAutoLock lock(mProxyCreationLock);
4730:         if (mProxyClassMap.Get(aIID, aResult)) {
4730:             NS_ASSERTION(*aResult, "Null data in mProxyClassMap");
4730:             return NS_OK;
4730:         }
4730:     }
   1: 
   1:     nsIInterfaceInfoManager *iim =
   1:         xptiInterfaceInfoManager::GetInterfaceInfoManagerNoAddRef();
   1:     if (!iim)
   1:         return NS_ERROR_FAILURE;
   1: 
   1:     nsCOMPtr<nsIInterfaceInfo> ii;
   1:     nsresult rv = iim->GetInfoForIID(&aIID, getter_AddRefs(ii));
   1:     if (NS_FAILED(rv))
   1:         return rv;
   1: 
4730:     nsProxyEventClass *pec = new nsProxyEventClass(aIID, ii);
   1:     if (!pec)
   1:         return NS_ERROR_OUT_OF_MEMORY;
   1: 
4730:     // Re-lock to put this class into our map. Before putting, check to see
4730:     // if another thread raced to put before us
4730:     nsAutoLock lock(mProxyCreationLock);
4730: 
4730:     if (mProxyClassMap.Get(aIID, aResult)) {
4730:         NS_ASSERTION(*aResult, "Null data in mProxyClassMap");
4730:         delete pec;
4836:         return NS_OK;
4730:     }
4730: 
   1:     if (!mProxyClassMap.Put(aIID, pec)) {
   1:         delete pec;
   1:         return NS_ERROR_OUT_OF_MEMORY;
   1:     }
   1: 
   1:     *aResult = pec;
   1:     return NS_OK;
   1: }
   1: 
   1: /**
   1:  * Helper function for code that already has a link-time dependency on
   1:  * libxpcom and needs to get proxies in a bunch of different places.
   1:  * This way, the caller isn't forced to get the proxy object manager
   1:  * themselves every single time, thus making the calling code more
   1:  * readable.
   1:  */
   1: NS_COM nsresult
   1: NS_GetProxyForObject(nsIEventTarget *target, 
   1:                      REFNSIID aIID, 
   1:                      nsISupports* aObj, 
   1:                      PRInt32 proxyType, 
   1:                      void** aProxyObject) 
   1: {
   1:     static NS_DEFINE_CID(proxyObjMgrCID, NS_PROXYEVENT_MANAGER_CID);
   1: 
   1:     nsresult rv;
   1: 
   1:     // get the proxy object manager
   1:     //
   1:     nsCOMPtr<nsIProxyObjectManager> proxyObjMgr = 
   1:         do_GetService(proxyObjMgrCID, &rv);
   1:     if (NS_FAILED(rv))
   1:         return rv;
   1:     
   1:     // and try to get the proxy object
   1:     //
   1:     return proxyObjMgr->GetProxyForObject(target, aIID, aObj,
   1:                                           proxyType, aProxyObject);
   1: }
