43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com> (original author)
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttpTransaction_h__
43113: #define nsHttpTransaction_h__
43113: 
43113: #include "nsHttp.h"
43113: #include "nsHttpHeaderArray.h"
43113: #include "nsAHttpTransaction.h"
43113: #include "nsAHttpConnection.h"
43113: #include "nsCOMPtr.h"
43113: 
43113: #include "nsIPipe.h"
43113: #include "nsIInputStream.h"
43113: #include "nsIOutputStream.h"
43113: #include "nsIInterfaceRequestor.h"
43113: #include "nsISocketTransportService.h"
43113: #include "nsITransport.h"
43113: #include "nsIEventTarget.h"
70188: #include "TimingStruct.h"
43113: 
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsHttpTransaction;
43113: class nsHttpRequestHead;
43113: class nsHttpResponseHead;
43113: class nsHttpChunkedDecoder;
43113: class nsIHttpActivityObserver;
43113: 
43113: //-----------------------------------------------------------------------------
43113: // nsHttpTransaction represents a single HTTP transaction.  It is thread-safe,
43113: // intended to run on the socket thread.
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsHttpTransaction : public nsAHttpTransaction
43113:                         , public nsIInputStreamCallback
43113:                         , public nsIOutputStreamCallback
43113: {
43113: public:
43113:     NS_DECL_ISUPPORTS
43113:     NS_DECL_NSAHTTPTRANSACTION
43113:     NS_DECL_NSIINPUTSTREAMCALLBACK
43113:     NS_DECL_NSIOUTPUTSTREAMCALLBACK
43113: 
43113:     nsHttpTransaction();
43113:     virtual ~nsHttpTransaction();
43113: 
43113:     //
43113:     // called to initialize the transaction
43113:     // 
43113:     // @param caps
43113:     //        the transaction capabilities (see nsHttp.h)
43113:     // @param connInfo
43113:     //        the connection type for this transaction.
43113:     // @param reqHeaders
43113:     //        the request header struct
43113:     // @param reqBody
43113:     //        the request body (POST or PUT data stream)
43113:     // @param reqBodyIncludesHeaders
43113:     //        fun stuff to support NPAPI plugins.
43113:     // @param target
43113:     //        the dispatch target were notifications should be sent.
43113:     // @param callbacks
43113:     //        the notification callbacks to be given to PSM.
43113:     // @param responseBody
43113:     //        the input stream that will contain the response data.  async
43113:     //        wait on this input stream for data.  on first notification,
43113:     //        headers should be available (check transaction status).
43113:     //
43113:     nsresult Init(PRUint8                caps,
43113:                   nsHttpConnectionInfo  *connInfo,
43113:                   nsHttpRequestHead     *reqHeaders,
43113:                   nsIInputStream        *reqBody,
79445:                   bool                   reqBodyIncludesHeaders,
43113:                   nsIEventTarget        *consumerTarget,
43113:                   nsIInterfaceRequestor *callbacks,
43113:                   nsITransportEventSink *eventsink,
43113:                   nsIAsyncInputStream  **responseBody);
43113: 
43113:     // attributes
43113:     PRUint8                Caps()           { return mCaps; }
43113:     nsHttpConnectionInfo  *ConnectionInfo() { return mConnInfo; }
43113:     nsHttpResponseHead    *ResponseHead()   { return mHaveAllHeaders ? mResponseHead : nsnull; }
43113:     nsISupports           *SecurityInfo()   { return mSecurityInfo; }
43113: 
43113:     nsIInterfaceRequestor *Callbacks()      { return mCallbacks; } 
43113:     nsIEventTarget        *ConsumerTarget() { return mConsumerTarget; }
84396:     nsAHttpConnection     *Connection()     { return mConnection; }
43113: 
43113:     // Called to take ownership of the response headers; the transaction
43113:     // will drop any reference to the response headers after this call.
43113:     nsHttpResponseHead *TakeResponseHead();
43113: 
43113:     // Called to find out if the transaction generated a complete response.
79445:     bool ResponseIsComplete() { return mResponseIsComplete; }
43113: 
79445:     bool      SSLConnectFailed() { return mSSLConnectFailed; }
43113: 
84396:     // These methods may only be used by the connection manager.
43113:     void    SetPriority(PRInt32 priority) { mPriority = priority; }
43113:     PRInt32    Priority()                 { return mPriority; }
43113: 
70188:     const TimingStruct& Timings() const { return mTimings; }
70188: 
43113: private:
43113:     nsresult Restart();
58521:     char    *LocateHttpStart(char *buf, PRUint32 len,
79445:                              bool aAllowPartialMatch);
71093:     nsresult ParseLine(char *line);
43113:     nsresult ParseLineSegment(char *seg, PRUint32 len);
43113:     nsresult ParseHead(char *, PRUint32 count, PRUint32 *countRead);
43113:     nsresult HandleContentStart();
43113:     nsresult HandleContent(char *, PRUint32 count, PRUint32 *contentRead, PRUint32 *contentRemaining);
43113:     nsresult ProcessData(char *, PRUint32, PRUint32 *);
43113:     void     DeleteSelfOnConsumerThread();
43113: 
43113:     static NS_METHOD ReadRequestSegment(nsIInputStream *, void *, const char *,
43113:                                         PRUint32, PRUint32, PRUint32 *);
43113:     static NS_METHOD WritePipeSegment(nsIOutputStream *, void *, char *,
43113:                                       PRUint32, PRUint32, PRUint32 *);
43113: 
79445:     bool TimingEnabled() const { return mCaps & NS_HTTP_TIMING_ENABLED; }
70188: 
43113: private:
43113:     nsCOMPtr<nsIInterfaceRequestor> mCallbacks;
43113:     nsCOMPtr<nsITransportEventSink> mTransportSink;
43113:     nsCOMPtr<nsIEventTarget>        mConsumerTarget;
43113:     nsCOMPtr<nsISupports>           mSecurityInfo;
43113:     nsCOMPtr<nsIAsyncInputStream>   mPipeIn;
43113:     nsCOMPtr<nsIAsyncOutputStream>  mPipeOut;
43113: 
43113:     nsCOMPtr<nsISupports>             mChannel;
43113:     nsCOMPtr<nsIHttpActivityObserver> mActivityDistributor;
43113: 
43113:     nsCString                       mReqHeaderBuf;    // flattened request headers
43113:     nsCOMPtr<nsIInputStream>        mRequestStream;
43113:     PRUint32                        mRequestSize;
43113: 
43113:     nsAHttpConnection              *mConnection;      // hard ref
43113:     nsHttpConnectionInfo           *mConnInfo;        // hard ref
43113:     nsHttpRequestHead              *mRequestHead;     // weak ref
43113:     nsHttpResponseHead             *mResponseHead;    // hard ref
43113: 
43113:     nsAHttpSegmentReader           *mReader;
43113:     nsAHttpSegmentWriter           *mWriter;
43113: 
43113:     nsCString                       mLineBuf;         // may contain a partial line
43113: 
64617:     PRInt64                         mContentLength;   // equals -1 if unknown
64617:     PRInt64                         mContentRead;     // count of consumed content bytes
43113: 
61543:     // After a 304/204 or other "no-content" style response we will skip over
61543:     // up to MAX_INVALID_RESPONSE_BODY_SZ bytes when looking for the next
61543:     // response header to deal with servers that actually sent a response
61543:     // body where they should not have. This member tracks how many bytes have
61543:     // so far been skipped.
61543:     PRUint32                        mInvalidResponseBytesRead;
61543: 
43113:     nsHttpChunkedDecoder           *mChunkedDecoder;
43113: 
70188:     TimingStruct                    mTimings;
70188: 
43113:     nsresult                        mStatus;
43113: 
43113:     PRInt16                         mPriority;
43113: 
43113:     PRUint16                        mRestartCount;        // the number of times this transaction has been restarted
43113:     PRUint8                         mCaps;
43113: 
64625:     // state flags, all logically boolean, but not packed together into a
64625:     // bitfield so as to avoid bitfield-induced races.  See bug 560579.
79445:     bool                            mClosed;
79445:     bool                            mConnected;
79445:     bool                            mHaveStatusLine;
79445:     bool                            mHaveAllHeaders;
79445:     bool                            mTransactionDone;
79445:     bool                            mResponseIsComplete;
79445:     bool                            mDidContentStart;
79445:     bool                            mNoContent; // expecting an empty entity body
79445:     bool                            mSentData;
79445:     bool                            mReceivedData;
79445:     bool                            mStatusEventPending;
79445:     bool                            mHasRequestBody;
79445:     bool                            mSSLConnectFailed;
79445:     bool                            mHttpResponseMatched;
79445:     bool                            mPreserveStream;
43113: 
43113:     // mClosed           := transaction has been explicitly closed
43113:     // mTransactionDone  := transaction ran to completion or was interrupted
43113:     // mResponseComplete := transaction ran to completion
43113: };
43113: 
43113: #endif // nsHttpTransaction_h__
