29805: /* ***** BEGIN LICENSE BLOCK *****
29805:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
29805:  *
29805:  * The contents of this file are subject to the Mozilla Public License Version
29805:  * 1.1 (the "License"); you may not use this file except in compliance with
29805:  * the License. You may obtain a copy of the License at
29805:  * http://www.mozilla.org/MPL/
29805:  *
29805:  * Software distributed under the License is distributed on an "AS IS" basis,
29805:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
29805:  * for the specific language governing rights and limitations under the
29805:  * License.
29805:  *
29805:  * The Original Code is HTML Parser C++ Translator code.
29805:  *
29805:  * The Initial Developer of the Original Code is
29805:  * Mozilla Foundation.
29805:  * Portions created by the Initial Developer are Copyright (C) 2008
29805:  * the Initial Developer. All Rights Reserved.
29805:  *
29805:  * Contributor(s):
29805:  *   Henri Sivonen <hsivonen@iki.fi>
29805:  *
29805:  * Alternatively, the contents of this file may be used under the terms of
29805:  * either the GNU General Public License Version 2 or later (the "GPL"), or
29805:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
29805:  * in which case the provisions of the GPL or the LGPL are applicable instead
29805:  * of those above. If you wish to allow use of your version of this file only
29805:  * under the terms of either the GPL or the LGPL, and not to allow others to
29805:  * use your version of this file under the terms of the MPL, indicate your
29805:  * decision by deleting the provisions above and replace them with the notice
29805:  * and other provisions required by the GPL or the LGPL. If you do not delete
29805:  * the provisions above, a recipient may use your version of this file under
29805:  * the terms of any one of the MPL, the GPL or the LGPL.
29805:  *
29805:  * ***** END LICENSE BLOCK ***** */
29805: 
29805: #include "nsContentUtils.h"
29805: #include "nsHtml5AttributeName.h"
29805: #include "nsHtml5ElementName.h"
29805: #include "nsHtml5HtmlAttributes.h"
29805: #include "nsHtml5NamedCharacters.h"
29805: #include "nsHtml5Portability.h"
29805: #include "nsHtml5StackNode.h"
29805: #include "nsHtml5Tokenizer.h"
29805: #include "nsHtml5TreeBuilder.h"
29805: #include "nsHtml5UTF16Buffer.h"
29805: #include "nsHtml5Module.h"
29805: 
29805: // static
30334: PRBool nsHtml5Module::sEnabled = PR_FALSE;
34980: PRBool nsHtml5Module::sOffMainThread = PR_TRUE;
34980: nsIThread* nsHtml5Module::sStreamParserThread = nsnull;
34980: nsIThread* nsHtml5Module::sMainThread = nsnull;
29805: 
29805: // static
29805: void
29805: nsHtml5Module::InitializeStatics()
29805: {
30334:   nsContentUtils::AddBoolPrefVarCache("html5.enable", &sEnabled);
34980:   nsContentUtils::AddBoolPrefVarCache("html5.offmainthread", &sOffMainThread);
29805:   nsHtml5Atoms::AddRefAtoms();
29805:   nsHtml5AttributeName::initializeStatics();
29805:   nsHtml5ElementName::initializeStatics();
29805:   nsHtml5HtmlAttributes::initializeStatics();
29805:   nsHtml5NamedCharacters::initializeStatics();
29805:   nsHtml5Portability::initializeStatics();
29805:   nsHtml5StackNode::initializeStatics();
29805:   nsHtml5Tokenizer::initializeStatics();
29805:   nsHtml5TreeBuilder::initializeStatics();
29805:   nsHtml5UTF16Buffer::initializeStatics();
29805: #ifdef DEBUG
29805:   sNsHtml5ModuleInitialized = PR_TRUE;
29805: #endif
29805: }
29805: 
29805: // static
29805: void
29805: nsHtml5Module::ReleaseStatics()
29805: {
29805: #ifdef DEBUG
29805:   sNsHtml5ModuleInitialized = PR_FALSE;
29805: #endif
29805:   nsHtml5AttributeName::releaseStatics();
29805:   nsHtml5ElementName::releaseStatics();
29805:   nsHtml5HtmlAttributes::releaseStatics();
29805:   nsHtml5NamedCharacters::releaseStatics();
29805:   nsHtml5Portability::releaseStatics();
29805:   nsHtml5StackNode::releaseStatics();
29805:   nsHtml5Tokenizer::releaseStatics();
29805:   nsHtml5TreeBuilder::releaseStatics();
29805:   nsHtml5UTF16Buffer::releaseStatics();
35124:   if (sStreamParserThread) {
34980:     sStreamParserThread->Shutdown();
35124:   }
34980:   NS_IF_RELEASE(sStreamParserThread);
34980:   NS_IF_RELEASE(sMainThread);
29805: }
29805: 
29805: // static
29805: already_AddRefed<nsIParser>
29805: nsHtml5Module::NewHtml5Parser()
29805: {
29805:   NS_ABORT_IF_FALSE(sNsHtml5ModuleInitialized, "nsHtml5Module not initialized.");
29805:   nsIParser* rv = static_cast<nsIParser*> (new nsHtml5Parser());
29805:   NS_ADDREF(rv);
29805:   return rv;
29805: }
29805: 
29805: // static
29805: nsresult
29805: nsHtml5Module::Initialize(nsIParser* aParser, nsIDocument* aDoc, nsIURI* aURI, nsISupports* aContainer, nsIChannel* aChannel)
29805: {
29805:   NS_ABORT_IF_FALSE(sNsHtml5ModuleInitialized, "nsHtml5Module not initialized.");
29805:   nsHtml5Parser* parser = static_cast<nsHtml5Parser*> (aParser);
29805:   return parser->Initialize(aDoc, aURI, aContainer, aChannel);
29805: }
29805: 
34980: // static 
34980: nsIThread*
34980: nsHtml5Module::GetStreamParserThread()
34980: {
35124:   if (sOffMainThread) {
35124:     if (!sStreamParserThread) {
35124:       NS_NewThread(&sStreamParserThread);
35124:       NS_ASSERTION(sStreamParserThread, "Thread creation failed!");
35124:     }
35124:     return sStreamParserThread;
35124:   }
35134:   if (!sMainThread) {
35134:     NS_GetMainThread(&sMainThread);
35134:     NS_ASSERTION(sMainThread, "Main thread getter failed");
35134:   }
35124:   return sMainThread;
34980: }
34980: 
29805: #ifdef DEBUG
29805: PRBool nsHtml5Module::sNsHtml5ModuleInitialized = PR_FALSE;
29805: #endif
