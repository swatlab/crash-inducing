     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef nsHTMLEditRules_h__
     1: #define nsHTMLEditRules_h__
     1: 
104487: #include "TypeInState.h"
104487: #include "nsAutoPtr.h"
104487: #include "nsCOMPtr.h"
104487: #include "nsEditor.h"
104487: #include "nsIEditActionListener.h"
104487: #include "nsIEditor.h"
104487: #include "nsIHTMLEditor.h"
104487: #include "nsISupportsImpl.h"
104487: #include "nsSelectionState.h"
104487: #include "nsTArray.h"
     1: #include "nsTextEditRules.h"
104487: #include "nsTraceRefcnt.h"
104487: #include "nscore.h"
104487: #include "prtypes.h"
     1: 
104487: class nsHTMLEditor;
104487: class nsIAtom;
104487: class nsIDOMCharacterData;
104487: class nsIDOMDocument;
     1: class nsIDOMElement;
104487: class nsIDOMNode;
104487: class nsIDOMRange;
     1: class nsIEditor;
104487: class nsINode;
104487: class nsISelection;
104487: class nsPlaintextEditor;
104487: class nsRange;
104487: class nsRulesInfo;
104487: namespace mozilla {
104487: class Selection;
104487: namespace dom {
104487: class Element;
104487: }  // namespace dom
104487: }  // namespace mozilla
104487: struct DOMPoint;
104487: template <class E> class nsCOMArray;
     1: 
     1: struct StyleCache : public PropItem
     1: {
 79445:   bool mPresent;
     1:   
 80486:   StyleCache() : PropItem(), mPresent(false) {
  8943:     MOZ_COUNT_CTOR(StyleCache);
  8943:   }
  8943: 
     1:   StyleCache(nsIAtom *aTag, const nsAString &aAttr, const nsAString &aValue) : 
 80486:              PropItem(aTag, aAttr, aValue), mPresent(false) {
  8943:     MOZ_COUNT_CTOR(StyleCache);
  8943:   }
  8943: 
  8943:   ~StyleCache() {
  8943:     MOZ_COUNT_DTOR(StyleCache);
  8943:   }
     1: };
     1: 
     1: 
     1: #define SIZE_STYLE_TABLE 19
     1: 
 69469: class nsHTMLEditRules : public nsTextEditRules, public nsIEditActionListener
     1: {
     1: public:
     1: 
     1:   NS_DECL_ISUPPORTS_INHERITED
     1:   
     1:             nsHTMLEditRules();
     1:   virtual   ~nsHTMLEditRules();
     1: 
     1: 
     1:   // nsIEditRules methods
 40703:   NS_IMETHOD Init(nsPlaintextEditor *aEditor);
 28152:   NS_IMETHOD DetachEditor();
 97808:   NS_IMETHOD BeforeEdit(nsEditor::OperationID action,
 97808:                         nsIEditor::EDirection aDirection);
 97808:   NS_IMETHOD AfterEdit(nsEditor::OperationID action,
 97808:                        nsIEditor::EDirection aDirection);
101616:   NS_IMETHOD WillDoAction(mozilla::Selection* aSelection, nsRulesInfo* aInfo,
 99469:                           bool* aCancel, bool* aHandled);
     1:   NS_IMETHOD DidDoAction(nsISelection *aSelection, nsRulesInfo *aInfo, nsresult aResult);
 57481:   NS_IMETHOD DocumentModified();
     1: 
 79445:   nsresult GetListState(bool *aMixed, bool *aOL, bool *aUL, bool *aDL);
 79445:   nsresult GetListItemState(bool *aMixed, bool *aLI, bool *aDT, bool *aDD);
 79445:   nsresult GetIndentState(bool *aCanIndent, bool *aCanOutdent);
 79445:   nsresult GetAlignment(bool *aMixed, nsIHTMLEditor::EAlignment *aAlign);
 79445:   nsresult GetParagraphState(bool *aMixed, nsAString &outFormat);
 69469:   nsresult MakeSureElemStartsOrEndsOnCR(nsIDOMNode *aNode);
     1: 
     1:   // nsIEditActionListener methods
     1:   
     1:   NS_IMETHOD WillCreateNode(const nsAString& aTag, nsIDOMNode *aParent, PRInt32 aPosition);
     1:   NS_IMETHOD DidCreateNode(const nsAString& aTag, nsIDOMNode *aNode, nsIDOMNode *aParent, PRInt32 aPosition, nsresult aResult);
     1:   NS_IMETHOD WillInsertNode(nsIDOMNode *aNode, nsIDOMNode *aParent, PRInt32 aPosition);
     1:   NS_IMETHOD DidInsertNode(nsIDOMNode *aNode, nsIDOMNode *aParent, PRInt32 aPosition, nsresult aResult);
     1:   NS_IMETHOD WillDeleteNode(nsIDOMNode *aChild);
     1:   NS_IMETHOD DidDeleteNode(nsIDOMNode *aChild, nsresult aResult);
     1:   NS_IMETHOD WillSplitNode(nsIDOMNode *aExistingRightNode, PRInt32 aOffset);
     1:   NS_IMETHOD DidSplitNode(nsIDOMNode *aExistingRightNode, PRInt32 aOffset, nsIDOMNode *aNewLeftNode, nsresult aResult);
     1:   NS_IMETHOD WillJoinNodes(nsIDOMNode *aLeftNode, nsIDOMNode *aRightNode, nsIDOMNode *aParent);
     1:   NS_IMETHOD DidJoinNodes(nsIDOMNode  *aLeftNode, nsIDOMNode *aRightNode, nsIDOMNode *aParent, nsresult aResult);
     1:   NS_IMETHOD WillInsertText(nsIDOMCharacterData *aTextNode, PRInt32 aOffset, const nsAString &aString);
     1:   NS_IMETHOD DidInsertText(nsIDOMCharacterData *aTextNode, PRInt32 aOffset, const nsAString &aString, nsresult aResult);
     1:   NS_IMETHOD WillDeleteText(nsIDOMCharacterData *aTextNode, PRInt32 aOffset, PRInt32 aLength);
     1:   NS_IMETHOD DidDeleteText(nsIDOMCharacterData *aTextNode, PRInt32 aOffset, PRInt32 aLength, nsresult aResult);
     1:   NS_IMETHOD WillDeleteSelection(nsISelection *aSelection);
     1:   NS_IMETHOD DidDeleteSelection(nsISelection *aSelection);
     1: 
     1: protected:
     1: 
     1:   enum RulesEndpoint
     1:   {
     1:     kStart,
     1:     kEnd
     1:   };
     1: 
     1:   enum BRLocation
     1:   {
     1:     kBeforeBlock,
     1:     kBlockEnd
     1:   };
     1: 
     1:   // nsHTMLEditRules implementation methods
 79445:   nsresult WillInsert(nsISelection *aSelection, bool *aCancel);
 97808:   nsresult WillInsertText(  nsEditor::OperationID aAction,
101616:                             mozilla::Selection* aSelection,
 79445:                             bool            *aCancel,
 79445:                             bool            *aHandled,
     1:                             const nsAString *inString,
     1:                             nsAString       *outString,
     1:                             PRInt32          aMaxLength);
 79445:   nsresult WillLoadHTML(nsISelection *aSelection, bool *aCancel);
101616:   nsresult WillInsertBreak(mozilla::Selection* aSelection,
101616:                            bool* aCancel, bool* aHandled);
     1:   nsresult StandardBreakImpl(nsIDOMNode *aNode, PRInt32 aOffset, nsISelection *aSelection);
     1:   nsresult DidInsertBreak(nsISelection *aSelection, nsresult aResult);
 79445:   nsresult SplitMailCites(nsISelection *aSelection, bool aPlaintext, bool *aHandled);
101616:   nsresult WillDeleteSelection(mozilla::Selection* aSelection,
 98852:                                nsIEditor::EDirection aAction,
 98852:                                nsIEditor::EStripWrappers aStripWrappers,
 79445:                                bool* aCancel, bool* aHandled);
     1:   nsresult DidDeleteSelection(nsISelection *aSelection, 
     1:                               nsIEditor::EDirection aDir, 
     1:                               nsresult aResult);
     1:   nsresult InsertBRIfNeeded(nsISelection *aSelection);
     1:   nsresult GetGoodSelPointForNode(nsIDOMNode *aNode, nsIEditor::EDirection aAction, 
     1:                                   nsCOMPtr<nsIDOMNode> *outSelNode, PRInt32 *outSelOffset);
 79445:   nsresult JoinBlocks(nsCOMPtr<nsIDOMNode> *aLeftBlock, nsCOMPtr<nsIDOMNode> *aRightBlock, bool *aCanceled);
     1:   nsresult MoveBlock(nsIDOMNode *aLeft, nsIDOMNode *aRight, PRInt32 aLeftOffset, PRInt32 aRightOffset);
     1:   nsresult MoveNodeSmart(nsIDOMNode *aSource, nsIDOMNode *aDest, PRInt32 *aOffset);
     1:   nsresult MoveContents(nsIDOMNode *aSource, nsIDOMNode *aDest, PRInt32 *aOffset);
 98826:   nsresult DeleteNonTableElements(nsINode* aNode);
106286:   nsresult WillMakeList(mozilla::Selection* aSelection,
106286:                         const nsAString* aListType,
106286:                         bool aEntireList,
106286:                         const nsAString* aBulletType,
106286:                         bool* aCancel, bool* aHandled,
106286:                         const nsAString* aItemType = nsnull);
106286:   nsresult WillRemoveList(mozilla::Selection* aSelection,
106286:                           bool aOrdered, bool* aCancel, bool* aHandled);
106286:   nsresult WillIndent(mozilla::Selection* aSelection,
106286:                       bool* aCancel, bool* aHandled);
106286:   nsresult WillCSSIndent(mozilla::Selection* aSelection,
106286:                          bool* aCancel, bool* aHandled);
106286:   nsresult WillHTMLIndent(mozilla::Selection* aSelection,
106286:                           bool* aCancel, bool* aHandled);
106286:   nsresult WillOutdent(mozilla::Selection* aSelection,
106286:                        bool* aCancel, bool* aHandled);
106286:   nsresult WillAlign(mozilla::Selection* aSelection,
106286:                      const nsAString* alignType,
106286:                      bool* aCancel, bool* aHandled);
106286:   nsresult WillAbsolutePosition(mozilla::Selection* aSelection,
106286:                                 bool* aCancel, bool* aHandled);
106286:   nsresult WillRemoveAbsolutePosition(mozilla::Selection* aSelection,
106286:                                       bool* aCancel, bool* aHandled);
106286:   nsresult WillRelativeChangeZIndex(mozilla::Selection* aSelection,
106286:                                     PRInt32 aChange,
106286:                                     bool* aCancel, bool* aHandled);
106286:   nsresult WillMakeDefListItem(mozilla::Selection* aSelection,
106286:                                const nsAString* aBlockType, bool aEntireList,
106286:                                bool* aCancel, bool* aHandled);
106286:   nsresult WillMakeBasicBlock(mozilla::Selection* aSelection,
106286:                               const nsAString* aBlockType,
106286:                               bool* aCancel, bool* aHandled);
     1:   nsresult DidMakeBasicBlock(nsISelection *aSelection, nsRulesInfo *aInfo, nsresult aResult);
     1:   nsresult DidAbsolutePosition();
     1:   nsresult AlignInnerBlocks(nsIDOMNode *aNode, const nsAString *alignType);
     1:   nsresult AlignBlockContents(nsIDOMNode *aNode, const nsAString *alignType);
     1:   nsresult AppendInnerFormatNodes(nsCOMArray<nsIDOMNode>& aArray,
 98825:                                   nsINode* aNode);
 98825:   nsresult AppendInnerFormatNodes(nsCOMArray<nsIDOMNode>& aArray,
     1:                                   nsIDOMNode *aNode);
     1:   nsresult GetFormatString(nsIDOMNode *aNode, nsAString &outFormat);
 79445:   nsresult GetInnerContent(nsIDOMNode *aNode, nsCOMArray<nsIDOMNode>& outArrayOfNodes, PRInt32 *aIndex, bool aList = true, bool aTble = true);
 89780:   already_AddRefed<nsIDOMNode> IsInListItem(nsIDOMNode* aNode);
 89780:   nsINode* IsInListItem(nsINode* aNode);
     1:   nsresult ReturnInHeader(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, PRInt32 aOffset);
 79445:   nsresult ReturnInParagraph(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, PRInt32 aOffset, bool *aCancel, bool *aHandled);
     1:   nsresult SplitParagraph(nsIDOMNode *aPara,
     1:                           nsIDOMNode *aBRNode, 
     1:                           nsISelection *aSelection,
     1:                           nsCOMPtr<nsIDOMNode> *aSelNode, 
     1:                           PRInt32 *aOffset);
     1:   nsresult ReturnInListItem(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, PRInt32 aOffset);
 97808:   nsresult AfterEditInner(nsEditor::OperationID action,
 97808:                           nsIEditor::EDirection aDirection);
     1:   nsresult RemovePartOfBlock(nsIDOMNode *aBlock, 
     1:                              nsIDOMNode *aStartChild, 
     1:                              nsIDOMNode *aEndChild,
     1:                              nsCOMPtr<nsIDOMNode> *aLeftNode = 0,
     1:                              nsCOMPtr<nsIDOMNode> *aRightNode = 0);
     1:   nsresult SplitBlock(nsIDOMNode *aBlock, 
     1:                       nsIDOMNode *aStartChild, 
     1:                       nsIDOMNode *aEndChild,
     1:                       nsCOMPtr<nsIDOMNode> *aLeftNode = 0,
     1:                       nsCOMPtr<nsIDOMNode> *aRightNode = 0,
     1:                       nsCOMPtr<nsIDOMNode> *aMiddleNode = 0);
     1:   nsresult OutdentPartOfBlock(nsIDOMNode *aBlock, 
     1:                               nsIDOMNode *aStartChild, 
     1:                               nsIDOMNode *aEndChild,
 79445:                               bool aIsBlockIndentedWithCSS,
     1:                               nsCOMPtr<nsIDOMNode> *aLeftNode = 0,
     1:                               nsCOMPtr<nsIDOMNode> *aRightNode = 0);
101130: 
101130:   nsresult ConvertListType(nsIDOMNode* aList,
101130:                            nsCOMPtr<nsIDOMNode>* outList,
101130:                            nsIAtom* aListType,
101130:                            nsIAtom* aItemType);
101130:   nsresult ConvertListType(nsINode* aList,
101130:                            mozilla::dom::Element** aOutList,
101130:                            nsIAtom* aListType,
101130:                            nsIAtom* aItemType);
101130: 
     1:   nsresult CreateStyleForInsertText(nsISelection *aSelection, nsIDOMDocument *aDoc);
     1:   nsresult IsEmptyBlock(nsIDOMNode *aNode, 
 79445:                         bool *outIsEmptyBlock, 
 79445:                         bool aMozBRDoesntCount = false,
 79445:                         bool aListItemsNotEmpty = false);
     1:   nsresult CheckForEmptyBlock(nsIDOMNode *aStartNode, 
     1:                               nsIDOMNode *aBodyNode,
     1:                               nsISelection *aSelection,
 79445:                               bool *aHandled);
     1:   nsresult CheckForInvisibleBR(nsIDOMNode *aBlock, nsHTMLEditRules::BRLocation aWhere, 
     1:                                nsCOMPtr<nsIDOMNode> *outBRNode, PRInt32 aOffset=0);
 74431:   nsresult ExpandSelectionForDeletion(nsISelection *aSelection);
 79445:   bool IsFirstNode(nsIDOMNode *aNode);
 79445:   bool IsLastNode(nsIDOMNode *aNode);
     1:   nsresult NormalizeSelection(nsISelection *inSelection);
103676:   void GetPromotedPoint(RulesEndpoint aWhere, nsIDOMNode* aNode,
 97808:                         PRInt32 aOffset, nsEditor::OperationID actionID,
 97808:                         nsCOMPtr<nsIDOMNode>* outNode, PRInt32* outOffset);
     1:   nsresult GetPromotedRanges(nsISelection *inSelection, 
     1:                              nsCOMArray<nsIDOMRange> &outArrayOfRanges, 
 97808:                              nsEditor::OperationID inOperationType);
 97808:   nsresult PromoteRange(nsIDOMRange *inRange,
 97808:                         nsEditor::OperationID inOperationType);
     1:   nsresult GetNodesForOperation(nsCOMArray<nsIDOMRange>& inArrayOfRanges, 
     1:                                 nsCOMArray<nsIDOMNode>& outArrayOfNodes, 
 97808:                                 nsEditor::OperationID inOperationType,
 79445:                                 bool aDontTouchContent=false);
     1:   nsresult GetChildNodesForOperation(nsIDOMNode *inNode, 
     1:                                      nsCOMArray<nsIDOMNode>& outArrayOfNodes);
     1:   nsresult GetNodesFromPoint(DOMPoint point,
 97808:                              nsEditor::OperationID operation,
     1:                              nsCOMArray<nsIDOMNode>& arrayOfNodes,
 79445:                              bool dontTouchContent);
     1:   nsresult GetNodesFromSelection(nsISelection *selection,
 97808:                                  nsEditor::OperationID operation,
     1:                                  nsCOMArray<nsIDOMNode>& arrayOfNodes,
 79445:                                  bool aDontTouchContent=false);
 79445:   nsresult GetListActionNodes(nsCOMArray<nsIDOMNode> &outArrayOfNodes, bool aEntireList, bool aDontTouchContent=false);
102189:   void GetDefinitionListItemTypes(mozilla::dom::Element* aElement, bool* aDT, bool* aDD);
 79445:   nsresult GetParagraphFormatNodes(nsCOMArray<nsIDOMNode>& outArrayOfNodes, bool aDontTouchContent=false);
     1:   nsresult LookInsideDivBQandList(nsCOMArray<nsIDOMNode>& aNodeArray);
     1:   nsresult BustUpInlinesAtRangeEndpoints(nsRangeStore &inRange);
     1:   nsresult BustUpInlinesAtBRs(nsIDOMNode *inNode, 
     1:                               nsCOMArray<nsIDOMNode>& outArrayOfNodes);
     1:   nsCOMPtr<nsIDOMNode> GetHighestInlineParent(nsIDOMNode* aNode);
     1:   nsresult MakeTransitionList(nsCOMArray<nsIDOMNode>& inArrayOfNodes, 
 79445:                               nsTArray<bool> &inTransitionArray);
     1:   nsresult RemoveBlockStyle(nsCOMArray<nsIDOMNode>& arrayOfNodes);
     1:   nsresult ApplyBlockStyle(nsCOMArray<nsIDOMNode>& arrayOfNodes, const nsAString *aBlockTag);
     1:   nsresult MakeBlockquote(nsCOMArray<nsIDOMNode>& arrayOfNodes);
     1:   nsresult SplitAsNeeded(const nsAString *aTag, nsCOMPtr<nsIDOMNode> *inOutParent, PRInt32 *inOutOffset);
     1:   nsresult AddTerminatingBR(nsIDOMNode *aBlock);
     1:   nsresult JoinNodesSmart( nsIDOMNode *aNodeLeft, 
     1:                            nsIDOMNode *aNodeRight, 
     1:                            nsCOMPtr<nsIDOMNode> *aOutMergeParent, 
     1:                            PRInt32 *aOutMergeOffset);
 79445:   nsresult GetTopEnclosingMailCite(nsIDOMNode *aNode, nsCOMPtr<nsIDOMNode> *aOutCiteNode, bool aPlaintext);
 79445:   nsresult PopListItem(nsIDOMNode *aListItem, bool *aOutOfList);
     1:   nsresult RemoveListStructure(nsIDOMNode *aList);
     1:   nsresult CacheInlineStyles(nsIDOMNode *aNode);
     1:   nsresult ReapplyCachedStyles();
     1:   nsresult ClearCachedStyles();
 79445:   nsresult AdjustSpecialBreaks(bool aSafeToAskFrames = false);
     1:   nsresult AdjustWhitespace(nsISelection *aSelection);
     1:   nsresult PinSelectionToNewBlock(nsISelection *aSelection);
     1:   nsresult CheckInterlinePosition(nsISelection *aSelection);
     1:   nsresult AdjustSelection(nsISelection *aSelection, nsIEditor::EDirection aAction);
     1:   nsresult FindNearSelectableNode(nsIDOMNode *aSelNode, 
     1:                                   PRInt32 aSelOffset, 
     1:                                   nsIEditor::EDirection &aDirection,
     1:                                   nsCOMPtr<nsIDOMNode> *outSelectableNode);
 79445:   nsresult InDifferentTableElements(nsIDOMNode *aNode1, nsIDOMNode *aNode2, bool *aResult);
     1:   nsresult RemoveEmptyNodes();
 97764:   nsresult SelectionEndpointInNode(nsINode *aNode, bool *aResult);
     1:   nsresult UpdateDocChangeRange(nsIDOMRange *aRange);
     1:   nsresult ConfirmSelectionInBody();
     1:   nsresult InsertMozBRIfNeeded(nsIDOMNode *aNode);
 79445:   bool     IsEmptyInline(nsIDOMNode *aNode);
 79445:   bool     ListIsEmptyLine(nsCOMArray<nsIDOMNode> &arrayOfNodes);
 79445:   nsresult RemoveAlignment(nsIDOMNode * aNode, const nsAString & aAlignType, bool aChildrenOnly);
 79445:   nsresult MakeSureElemStartsOrEndsOnCR(nsIDOMNode *aNode, bool aStarts);
 79445:   nsresult AlignBlock(nsIDOMElement * aElement, const nsAString * aAlignType, bool aContentsOnly);
     1:   nsresult RelativeChangeIndentationOfElementNode(nsIDOMNode *aNode, PRInt8 aRelativeChange);
 57481:   void DocumentModifiedWorker();
     1: 
     1: // data members
     1: protected:
     1:   nsHTMLEditor           *mHTMLEditor;
 86939:   nsRefPtr<nsRange>       mDocChangeRange;
 79445:   bool                    mListenerEnabled;
 79445:   bool                    mReturnInEmptyLIKillsList;
 79445:   bool                    mDidDeleteSelection;
 79445:   bool                    mDidRangedDelete;
 79445:   bool                    mRestoreContentEditableCount;
 86939:   nsRefPtr<nsRange>       mUtilRange;
     1:   PRUint32                mJoinOffset;  // need to remember an int across willJoin/didJoin...
     1:   nsCOMPtr<nsIDOMNode>    mNewBlock;
104447:   nsRefPtr<nsRangeStore>  mRangeItem;
     1:   StyleCache              mCachedStyles[SIZE_STYLE_TABLE];
     1: };
     1: 
     1: #endif //nsHTMLEditRules_h__
     1: 
