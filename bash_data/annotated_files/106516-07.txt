     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef __nsAccessibilityService_h__
     1: #define __nsAccessibilityService_h__
     1: 
     1: #include "nsIAccessibilityService.h"
 37480: 
 41384: #include "a11yGeneric.h"
 43310: #include "nsAccDocManager.h"
 37480: 
 79384: #include "mozilla/a11y/FocusManager.h"
 79384: 
     1: #include "nsIObserver.h"
     1: 
 93267: class nsImageFrame;
 94579: class nsITreeView;
 93267: 
 79384: namespace mozilla {
 79384: namespace a11y {
 79384: 
 79384: /**
 79384:  * Return focus manager.
 79384:  */
 79384: FocusManager* FocusMgr();
 79384: 
102366: enum EPlatformDisabledState {
102366:   ePlatformIsForceEnabled = -1,
102366:   ePlatformIsEnabled = 0,
102366:   ePlatformIsDisabled = 1
102366: };
102366: 
102366: /**
102366:  * Return the platform disabled state.
102366:  */
102366: EPlatformDisabledState PlatformDisabledState();
102366: 
 86928: #ifdef MOZ_ACCESSIBILITY_ATK
 86928: /**
 86928:  * Perform initialization that should be done as soon as possible, in order
 86928:  * to minimize startup time.
 96920:  * XXX: this function and the next defined in ApplicationAccessibleWrap.cpp
 86928:  */
 86928: void PreInit();
101309: #endif
 86928: 
101309: #if defined(MOZ_ACCESSIBILITY_ATK) || defined(XP_MACOSX)
 86928: /**
 86928:  * Is platform accessibility enabled.
101309:  * Only used on linux with atk and MacOS for now.
 86928:  */
 86928: bool ShouldA11yBeEnabled();
 86928: #endif
 86928: 
 79384: } // namespace a11y
 79384: } // namespace mozilla
 79384: 
 43310: class nsAccessibilityService : public nsAccDocManager,
 79384:                                public mozilla::a11y::FocusManager,
 43310:                                public nsIAccessibilityService,
 43310:                                public nsIObserver
  5188: {
  5188: public:
  5188:   virtual ~nsAccessibilityService();
  5188: 
 43310:   NS_DECL_ISUPPORTS_INHERITED
  5188:   NS_DECL_NSIACCESSIBLERETRIEVAL
  5188:   NS_DECL_NSIOBSERVER
  5188: 
 41336:   // nsIAccessibilityService
 99648:   virtual Accessible* GetRootDocumentAccessible(nsIPresShell* aPresShell,
 79445:                                                 bool aCanCreate);
 99648:   already_AddRefed<Accessible>
 90705:     CreateHTMLButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLBRAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 82770:     CreateHTMLCanvasAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLCaptionAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLCheckboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLComboboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 83000:     CreateHTMLFileInputAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLGroupboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLHRAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLImageAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 93267:     CreateHTMLImageMapAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLLabelAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 55763:     CreateHTMLLIAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLListboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLMediaAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLObjectFrameAccessible(nsObjectFrame* aFrame, nsIContent* aContent,
 46338:                                     nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLRadioButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLTableAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLTableCellAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 96899:     CreateHTMLTableRowAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 99295:     CreateTextLeafAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLTextFieldAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateHyperTextAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 99648:   already_AddRefed<Accessible>
 46338:     CreateOuterDocAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
 41336: 
102814:   /**
102814:    * Adds/remove ATK root accessible for gtk+ native window to/from children
102814:    * of the application accessible.
102814:    */
 99648:   virtual Accessible* AddNativeRootAccessible(void* aAtkAccessible);
 99648:   virtual void RemoveNativeRootAccessible(Accessible* aRootAccessible);
 41336: 
102814:   /**
102814:    * Notification used to update the accessible tree when new content is
102814:    * inserted.
102814:    */
102814:   void ContentRangeInserted(nsIPresShell* aPresShell, nsIContent* aContainer,
102814:                             nsIContent* aStartChild, nsIContent* aEndChild);
 56292: 
102814:   /**
102814:    * Notification used to update the accessible tree when content is removed.
102814:    */
102814:   void ContentRemoved(nsIPresShell* aPresShell, nsIContent* aContainer,
 56292:                       nsIContent* aChild);
 41336: 
 61516:   virtual void UpdateText(nsIPresShell* aPresShell, nsIContent* aContent);
 61516: 
 64006:   /**
 94579:    * Update XUL:tree accessible tree when treeview is changed.
 94579:    */
 94579:   void TreeViewChanged(nsIPresShell* aPresShell, nsIContent* aContent,
 94579:                        nsITreeView* aView);
 94579: 
 94579:   /**
 64006:    * Update list bullet accessible.
 64006:    */
 64006:   virtual void UpdateListBullet(nsIPresShell* aPresShell,
 64006:                                 nsIContent* aHTMLListItemContent,
 64006:                                 bool aHasBullet);
 64006: 
 93267:   /**
 93267:    * Update the image map.
 93267:    */
 93267:   void UpdateImageMap(nsImageFrame* aImageFrame);
 93267: 
102814:   /**
102814:    * Notify accessibility that anchor jump has been accomplished to the given
102814:    * target. Used by layout.
102814:    */
102814:   void NotifyOfAnchorJumpTo(nsIContent *aTarget);
 41336: 
102814:   /**
106516:    * Notify the accessibility service that the given presshell is
106516:    * being destroyed.
106516:    */
106516:   void PresShellDestroyed(nsIPresShell* aPresShell);
106516: 
106516:   /**
 63261:    * Notify that presshell is activated.
 63261:    */
 63261:   virtual void PresShellActivated(nsIPresShell* aPresShell);
 63261: 
 93850:   /**
 93850:    * Recreate an accessible for the given content node in the presshell.
 93850:    */
 93850:   void RecreateAccessible(nsIPresShell* aPresShell, nsIContent* aContent);
 56292: 
 99648:   virtual void FireAccessibleEvent(PRUint32 aEvent, Accessible* aTarget);
 41336: 
 41336:   // nsAccessibiltiyService
 41336: 
  5188:   /**
 43310:    * Return true if accessibility service has been shutdown.
 30820:    */
 79445:   static bool IsShutdown() { return gIsShutdown; }
 30820: 
 37808:   /**
 46469:    * Return an accessible for the given DOM node from the cache or create new
 46469:    * one.
 37808:    *
 37808:    * @param  aNode             [in] the given node
 89801:    * @param  aDoc              [in] the doc accessible of the node
 57448:    * @param  aIsSubtreeHidden  [out, optional] indicates whether the node's
 57448:    *                             frame and its subtree is hidden
 37808:    */
 99648:   Accessible* GetOrCreateAccessible(nsINode* aNode, DocAccessible* aDoc,
 57448:                                     bool* aIsSubtreeHidden = nsnull);
 37808: 
 43310: private:
 43310:   // nsAccessibilityService creation is controlled by friend
 43310:   // NS_GetAccessibilityService, keep constructors private.
 43310:   nsAccessibilityService();
 43310:   nsAccessibilityService(const nsAccessibilityService&);
 43310:   nsAccessibilityService& operator =(const nsAccessibilityService&);
 43310: 
 43310: private:
 43310:   /**
 43310:    * Initialize accessibility service.
 43310:    */
 79445:   bool Init();
 43310: 
 43310:   /**
 43310:    * Shutdowns accessibility service.
 43310:    */
 43310:   void Shutdown();
 43310: 
 43310:   /**
 38359:    * Create accessible for the element implementing nsIAccessibleProvider
  5188:    * interface.
  5188:    */
 99648:   already_AddRefed<Accessible>
 99568:     CreateAccessibleByType(nsIContent* aContent, DocAccessible* aDoc);
  5188: 
  5188:   /**
 38359:    * Create accessible for HTML node by tag name.
 38359:    */
 99648:   already_AddRefed<Accessible>
 46338:     CreateHTMLAccessibleByMarkup(nsIFrame* aFrame, nsIContent* aContent,
 99568:                                  DocAccessible* aDoc);
 38359: 
 38359:   /**
 38359:    * Create accessible if parent is a deck frame.
 38359:    */
 99648:   already_AddRefed<Accessible>
 43504:     CreateAccessibleForDeckChild(nsIFrame* aFrame, nsIContent* aContent,
 99568:                                  DocAccessible* aDoc);
  5188: 
 31673: #ifdef MOZ_XUL
 31673:   /**
 31673:    * Create accessible for XUL tree element.
 31673:    */
 99648:   already_AddRefed<Accessible>
 99568:     CreateAccessibleForXULTree(nsIContent* aContent, DocAccessible* aDoc);
 31673: #endif
 31673: 
 43310:   /**
 79384:    * Reference for accessibility service instance.
 43310:    */
  5188:   static nsAccessibilityService* gAccessibilityService;
  6279: 
  6279:   /**
 43310:    * Indicates whether accessibility service was shutdown.
 43310:    */
 79445:   static bool gIsShutdown;
 43310: 
 43310:   /**
  6279:    * Does this content node have a universal ARIA property set on it?
  6279:    * A universal ARIA property is one that can be defined on any element even if there is no role.
  6279:    *
  6279:    * @param aContent The content node to test
 80486:    * @return true if there is a universal ARIA property set on the node
  6279:    */
 79445:   bool HasUniversalAriaProperty(nsIContent *aContent);
 12240: 
 37808:   friend nsAccessibilityService* GetAccService();
 79384:   friend mozilla::a11y::FocusManager* mozilla::a11y::FocusMgr();
 37808: 
 37808:   friend nsresult NS_GetAccessibilityService(nsIAccessibilityService** aResult);
  5188: };
  5188: 
  5188: /**
 37808:  * Return the accessibility service instance. (Handy global function)
 37808:  */
 37808: inline nsAccessibilityService*
 37808: GetAccService()
 37808: {
 37808:   return nsAccessibilityService::gAccessibilityService;
 37808: }
 37808: 
 37808: /**
  5188:  * Map nsIAccessibleEvents constants to strings. Used by
  5188:  * nsIAccessibleRetrieval::getStringEventType() method.
     1:  */
  5188: static const char kEventTypeNames[][40] = {
  5188:   "unknown",                                 //
 32336:   "show",                                    // EVENT_SHOW
 32336:   "hide",                                    // EVENT_HIDE
 32336:   "reorder",                                 // EVENT_REORDER
  5188:   "active decendent change",                 // EVENT_ACTIVE_DECENDENT_CHANGED
  5188:   "focus",                                   // EVENT_FOCUS
  5188:   "state change",                            // EVENT_STATE_CHANGE
  5188:   "location change",                         // EVENT_LOCATION_CHANGE
  5188:   "name changed",                            // EVENT_NAME_CHANGE
  5188:   "description change",                      // EVENT_DESCRIPTION_CHANGE
  5188:   "value change",                            // EVENT_VALUE_CHANGE
  5188:   "help change",                             // EVENT_HELP_CHANGE
  5188:   "default action change",                   // EVENT_DEFACTION_CHANGE
  5188:   "action change",                           // EVENT_ACTION_CHANGE
  5188:   "accelerator change",                      // EVENT_ACCELERATOR_CHANGE
  5188:   "selection",                               // EVENT_SELECTION
  5188:   "selection add",                           // EVENT_SELECTION_ADD
  5188:   "selection remove",                        // EVENT_SELECTION_REMOVE
  5188:   "selection within",                        // EVENT_SELECTION_WITHIN
  5188:   "alert",                                   // EVENT_ALERT
  5188:   "foreground",                              // EVENT_FOREGROUND
  5188:   "menu start",                              // EVENT_MENU_START
  5188:   "menu end",                                // EVENT_MENU_END
  5188:   "menupopup start",                         // EVENT_MENUPOPUP_START
  5188:   "menupopup end",                           // EVENT_MENUPOPUP_END
  5188:   "capture start",                           // EVENT_CAPTURE_START
  5188:   "capture end",                             // EVENT_CAPTURE_END
  5188:   "movesize start",                          // EVENT_MOVESIZE_START
  5188:   "movesize end",                            // EVENT_MOVESIZE_END
  5188:   "contexthelp start",                       // EVENT_CONTEXTHELP_START
  5188:   "contexthelp end",                         // EVENT_CONTEXTHELP_END
  5188:   "dragdrop start",                          // EVENT_DRAGDROP_START
  5188:   "dragdrop end",                            // EVENT_DRAGDROP_END
  5188:   "dialog start",                            // EVENT_DIALOG_START
  5188:   "dialog end",                              // EVENT_DIALOG_END
  5188:   "scrolling start",                         // EVENT_SCROLLING_START
  5188:   "scrolling end",                           // EVENT_SCROLLING_END
  5188:   "minimize start",                          // EVENT_MINIMIZE_START
  5188:   "minimize end",                            // EVENT_MINIMIZE_END
  5188:   "document load complete",                  // EVENT_DOCUMENT_LOAD_COMPLETE
  5188:   "document reload",                         // EVENT_DOCUMENT_RELOAD
  5188:   "document load stopped",                   // EVENT_DOCUMENT_LOAD_STOPPED
  5188:   "document attributes changed",             // EVENT_DOCUMENT_ATTRIBUTES_CHANGED
  5188:   "document content changed",                // EVENT_DOCUMENT_CONTENT_CHANGED
  5188:   "property changed",                        // EVENT_PROPERTY_CHANGED
 81286:   "page changed",                           // EVENT_PAGE_CHANGED
  5188:   "text attribute changed",                  // EVENT_TEXT_ATTRIBUTE_CHANGED
  5188:   "text caret moved",                        // EVENT_TEXT_CARET_MOVED
  5188:   "text changed",                            // EVENT_TEXT_CHANGED
  5188:   "text inserted",                           // EVENT_TEXT_INSERTED
  5188:   "text removed",                            // EVENT_TEXT_REMOVED
  5188:   "text updated",                            // EVENT_TEXT_UPDATED
  5188:   "text selection changed",                  // EVENT_TEXT_SELECTION_CHANGED
  5188:   "visible data changed",                    // EVENT_VISIBLE_DATA_CHANGED
  5188:   "text column changed",                     // EVENT_TEXT_COLUMN_CHANGED
  5188:   "section changed",                         // EVENT_SECTION_CHANGED
  5188:   "table caption changed",                   // EVENT_TABLE_CAPTION_CHANGED
  5188:   "table model changed",                     // EVENT_TABLE_MODEL_CHANGED
  5188:   "table summary changed",                   // EVENT_TABLE_SUMMARY_CHANGED
  5188:   "table row description changed",           // EVENT_TABLE_ROW_DESCRIPTION_CHANGED
  5188:   "table row header changed",                // EVENT_TABLE_ROW_HEADER_CHANGED
  5188:   "table row insert",                        // EVENT_TABLE_ROW_INSERT
  5188:   "table row delete",                        // EVENT_TABLE_ROW_DELETE
  5188:   "table row reorder",                       // EVENT_TABLE_ROW_REORDER
  5188:   "table column description changed",        // EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED
  5188:   "table column header changed",             // EVENT_TABLE_COLUMN_HEADER_CHANGED
  5188:   "table column insert",                     // EVENT_TABLE_COLUMN_INSERT
  5188:   "table column delete",                     // EVENT_TABLE_COLUMN_DELETE
  5188:   "table column reorder",                    // EVENT_TABLE_COLUMN_REORDER
  5188:   "window activate",                         // EVENT_WINDOW_ACTIVATE
  5188:   "window create",                           // EVENT_WINDOW_CREATE
  5188:   "window deactivate",                       // EVENT_WINDOW_DEACTIVATE
  5188:   "window destroy",                          // EVENT_WINDOW_DESTROY
  5188:   "window maximize",                         // EVENT_WINDOW_MAXIMIZE
  5188:   "window minimize",                         // EVENT_WINDOW_MINIMIZE
  5188:   "window resize",                           // EVENT_WINDOW_RESIZE
  5188:   "window restore",                          // EVENT_WINDOW_RESTORE
  5188:   "hyperlink end index changed",             // EVENT_HYPERLINK_END_INDEX_CHANGED
  5188:   "hyperlink number of anchors changed",     // EVENT_HYPERLINK_NUMBER_OF_ANCHORS_CHANGED
  5188:   "hyperlink selected link changed",         // EVENT_HYPERLINK_SELECTED_LINK_CHANGED
  5188:   "hypertext link activated",                // EVENT_HYPERTEXT_LINK_ACTIVATED
  5188:   "hypertext link selected",                 // EVENT_HYPERTEXT_LINK_SELECTED
  5188:   "hyperlink start index changed",           // EVENT_HYPERLINK_START_INDEX_CHANGED
  5188:   "hypertext changed",                       // EVENT_HYPERTEXT_CHANGED
  5188:   "hypertext links count changed",           // EVENT_HYPERTEXT_NLINKS_CHANGED
  5188:   "object attribute changed",                // EVENT_OBJECT_ATTRIBUTE_CHANGED
 89309:   "virtual cursor changed"                   // EVENT_VIRTUALCURSOR_CHANGED
     1: };
     1: 
  6812: /**
  6812:  * Map nsIAccessibleRelation constants to strings. Used by
  6812:  * nsIAccessibleRetrieval::getStringRelationType() method.
  6812:  */
  6812: static const char kRelationTypeNames[][20] = {
  6812:   "unknown",             // RELATION_NUL
  6812:   "controlled by",       // RELATION_CONTROLLED_BY
  6812:   "controller for",      // RELATION_CONTROLLER_FOR
  6812:   "label for",           // RELATION_LABEL_FOR
  6812:   "labelled by",         // RELATION_LABELLED_BY
  6812:   "member of",           // RELATION_MEMBER_OF
  6812:   "node child of",       // RELATION_NODE_CHILD_OF
  6812:   "flows to",            // RELATION_FLOWS_TO
  6812:   "flows from",          // RELATION_FLOWS_FROM
  6812:   "subwindow of",        // RELATION_SUBWINDOW_OF
  6812:   "embeds",              // RELATION_EMBEDS
  6812:   "embedded by",         // RELATION_EMBEDDED_BY
  6812:   "popup for",           // RELATION_POPUP_FOR
  6812:   "parent window of",    // RELATION_PARENT_WINDOW_OF
  6812:   "described by",        // RELATION_DESCRIBED_BY
  6812:   "description for",     // RELATION_DESCRIPTION_FOR
  6812:   "default button"       // RELATION_DEFAULT_BUTTON
  6812: };
  6812: 
     1: #endif /* __nsIAccessibilityService_h__ */
  6812: 
