    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #ifndef nsBaseWidget_h__
    1: #define nsBaseWidget_h__
    1: 
    1: #include "nsRect.h"
    1: #include "nsIWidget.h"
    1: #include "nsIEventListener.h"
    1: #include "nsIToolkit.h"
    1: #include "nsIAppShell.h"
    1: #include "nsILocalFile.h"
    1: #include "nsString.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsGUIEvent.h"
    1: 
 8591: class nsIContent;
 8591: class nsAutoRollup;
 8591: 
    1: /**
    1:  * Common widget implementation used as base class for native
    1:  * or crossplatform implementations of Widgets. 
    1:  * All cross-platform behavior that all widgets need to implement 
    1:  * should be placed in this class. 
    1:  * (Note: widget implementations are not required to use this
    1:  * class, but it gives them a head start.)
    1:  */
    1: 
    1: class nsBaseWidget : public nsIWidget
    1: {
 8591:   friend class nsAutoRollup;
    1: 
    1: public:
    1:   nsBaseWidget();
    1:   virtual ~nsBaseWidget();
    1:   
    1:   NS_DECL_ISUPPORTS
    1:   
    1:   NS_IMETHOD              PreCreateWidget(nsWidgetInitData *aWidgetInitData) { return NS_OK;}
    1:   
    1:   // nsIWidget interface
    1:   NS_IMETHOD              CaptureMouse(PRBool aCapture);
    1:   NS_IMETHOD              Validate();
    1:   NS_IMETHOD              GetClientData(void*& aClientData);
    1:   NS_IMETHOD              SetClientData(void* aClientData);
    1:   NS_IMETHOD              Destroy();
    1:   NS_IMETHOD              SetParent(nsIWidget* aNewParent);
    1:   virtual nsIWidget*      GetParent(void);
19295:   virtual nsIWidget*      GetTopLevelWidget(PRInt32* aLevelsUp = NULL);
14886:   virtual nsIWidget*      GetSheetWindowParent(void);
    1:   virtual void            AddChild(nsIWidget* aChild);
    1:   virtual void            RemoveChild(nsIWidget* aChild);
    1: 
    1:   NS_IMETHOD              SetZIndex(PRInt32 aZIndex);
    1:   NS_IMETHOD              GetZIndex(PRInt32* aZIndex);
    1:   NS_IMETHOD              PlaceBehind(nsTopLevelWidgetZPlacement aPlacement,
    1:                                       nsIWidget *aWidget, PRBool aActivate);
    1: 
    1:   NS_IMETHOD              SetSizeMode(PRInt32 aMode);
    1:   NS_IMETHOD              GetSizeMode(PRInt32* aMode);
    1: 
    1:   virtual nscolor         GetForegroundColor(void);
    1:   NS_IMETHOD              SetForegroundColor(const nscolor &aColor);
    1:   virtual nscolor         GetBackgroundColor(void);
    1:   NS_IMETHOD              SetBackgroundColor(const nscolor &aColor);
    1:   virtual nsCursor        GetCursor();
    1:   NS_IMETHOD              SetCursor(nsCursor aCursor);
    1:   NS_IMETHOD              SetCursor(imgIContainer* aCursor,
    1:                                     PRUint32 aHotspotX, PRUint32 aHotspotY);
    1:   NS_IMETHOD              GetWindowType(nsWindowType& aWindowType);
    1:   NS_IMETHOD              SetWindowType(nsWindowType aWindowType);
16601:   virtual void            SetTransparencyMode(nsTransparencyMode aMode);
16601:   virtual nsTransparencyMode GetTransparencyMode();
20467:   NS_IMETHOD              SetWindowShadowStyle(PRInt32 aStyle);
    1:   NS_IMETHOD              HideWindowChrome(PRBool aShouldHide);
    1:   NS_IMETHOD              MakeFullScreen(PRBool aFullScreen);
    1:   virtual nsIRenderingContext* GetRenderingContext();
    1:   virtual nsIDeviceContext* GetDeviceContext();
    1:   virtual nsIToolkit*     GetToolkit();  
    1:   virtual gfxASurface*    GetThebesSurface();
    1:   NS_IMETHOD              SetModal(PRBool aModal); 
    1:   NS_IMETHOD              SetWindowClass(const nsAString& xulWinType);
    1:   NS_IMETHOD              SetBorderStyle(nsBorderStyle aBorderStyle); 
    1:   NS_IMETHOD              AddEventListener(nsIEventListener * aListener);
23738:   NS_IMETHOD              SetBounds(const nsIntRect &aRect);
23738:   NS_IMETHOD              GetBounds(nsIntRect &aRect);
23738:   NS_IMETHOD              GetClientBounds(nsIntRect &aRect);
23738:   NS_IMETHOD              GetScreenBounds(nsIntRect &aRect);
    1:   NS_IMETHOD              EnableDragDrop(PRBool aEnable);
    1:   NS_IMETHOD              GetAttention(PRInt32 aCycleCount);
26911:   NS_IMETHOD              GetLastInputEventTime(PRUint32& aTime);
    1:   NS_IMETHOD              SetIcon(const nsAString &anIconSpec);
 6348:   NS_IMETHOD              BeginSecureKeyboardInput();
 6348:   NS_IMETHOD              EndSecureKeyboardInput();
14886:   NS_IMETHOD              SetWindowTitlebarColor(nscolor aColor, PRBool aActive);
16520:   virtual PRBool          ShowsResizeIndicator(nsIntRect* aResizerRect);
 6348:   virtual void            FreeNativeData(void * data, PRUint32 aDataType) {}
 8892:   NS_IMETHOD              BeginResizeDrag(nsGUIEvent* aEvent, PRInt32 aHorizontal, PRInt32 aVertical);
15578:   virtual nsresult        ActivateNativeMenuItemAt(const nsAString& indexString) { return NS_ERROR_NOT_IMPLEMENTED; }
21081:   virtual nsresult        ForceUpdateNativeMenuAt(const nsAString& indexString) { return NS_ERROR_NOT_IMPLEMENTED; }
24836:   NS_IMETHOD              ResetInputState() { return NS_OK; }
15919:   NS_IMETHOD              SetIMEOpenState(PRBool aState) { return NS_ERROR_NOT_IMPLEMENTED; }
15919:   NS_IMETHOD              GetIMEOpenState(PRBool* aState) { return NS_ERROR_NOT_IMPLEMENTED; }
15919:   NS_IMETHOD              SetIMEEnabled(PRUint32 aState) { return NS_ERROR_NOT_IMPLEMENTED; }
15919:   NS_IMETHOD              GetIMEEnabled(PRUint32* aState) { return NS_ERROR_NOT_IMPLEMENTED; }
24836:   NS_IMETHOD              CancelIMEComposition() { return NS_OK; }
15919:   NS_IMETHOD              GetToggledKeyState(PRUint32 aKeyCode, PRBool* aLEDState) { return NS_ERROR_NOT_IMPLEMENTED; }
24836:   NS_IMETHOD              OnIMEFocusChange(PRBool aFocus) { return NS_ERROR_NOT_IMPLEMENTED; }
24836:   NS_IMETHOD              OnIMETextChange(PRUint32 aStart, PRUint32 aOldEnd, PRUint32 aNewEnd) { return NS_ERROR_NOT_IMPLEMENTED; }
24836:   NS_IMETHOD              OnIMESelectionChange(void) { return NS_ERROR_NOT_IMPLEMENTED; }
    1: 
    1: protected:
    1: 
    1:   virtual void            ResolveIconName(const nsAString &aIconName,
    1:                                           const nsAString &aIconSuffix,
    1:                                           nsILocalFile **aResult);
    1:   virtual void            OnDestroy();
    1:   virtual void            BaseCreate(nsIWidget *aParent,
23738:                                      const nsIntRect &aRect,
    1:                                      EVENT_CALLBACK aHandleEventFunction,
    1:                                      nsIDeviceContext *aContext,
    1:                                      nsIAppShell *aAppShell,
    1:                                      nsIToolkit *aToolkit,
    1:                                      nsWidgetInitData *aInitData);
    1: 
 8591:   virtual nsIContent* GetLastRollup()
 8591:   {
 8591:     return mLastRollup;
 8591:   }
 8591: 
14998:   virtual nsresult SynthesizeNativeKeyEvent(PRInt32 aNativeKeyboardLayout,
14962:                                             PRInt32 aNativeKeyCode,
14962:                                             PRUint32 aModifierFlags,
14962:                                             const nsAString& aCharacters,
14998:                                             const nsAString& aUnmodifiedCharacters)
14998:   { return NS_ERROR_UNEXPECTED; }
14962: 
    1: protected: 
    1:   void*             mClientData;
    1:   EVENT_CALLBACK    mEventCallback;
    1:   nsIDeviceContext  *mContext;
    1:   nsIToolkit        *mToolkit;
    1:   nsIEventListener  *mEventListener;
    1:   nscolor           mBackground;
    1:   nscolor           mForeground;
    1:   nsCursor          mCursor;
    1:   nsWindowType      mWindowType;
    1:   nsBorderStyle     mBorderStyle;
    1:   PRPackedBool      mOnDestroyCalled;
23738:   nsIntRect         mBounds;
23738:   nsIntRect*        mOriginalBounds;
    1:   PRInt32           mZIndex;
    1:   nsSizeMode        mSizeMode;
    1: 
 8591:   // the last rolled up popup. Only set this when an nsAutoRollup is in scope,
 8591:   // so it can be cleared automatically.
 8591:   static nsIContent* mLastRollup;
 8591:     
    1:     // Enumeration of the methods which are accessible on the "main GUI thread"
    1:     // via the CallMethod(...) mechanism...
    1:     // see nsSwitchToUIThread
    1:   enum {
    1:     CREATE       = 0x0101,
    1:     CREATE_NATIVE,
    1:     DESTROY, 
    1:     SET_FOCUS,
    1:     SET_CURSOR,
    1:     CREATE_HACK
    1:   };
    1: 
    1: #ifdef DEBUG
    1: protected:
    1:   static nsAutoString debug_GuiEventToString(nsGUIEvent * aGuiEvent);
    1:   static PRBool debug_WantPaintFlashing();
    1: 
    1:   static void debug_DumpInvalidate(FILE *                aFileOut,
    1:                                    nsIWidget *           aWidget,
23738:                                    const nsIntRect *     aRect,
    1:                                    PRBool                aIsSynchronous,
    1:                                    const nsCAutoString & aWidgetName,
    1:                                    PRInt32               aWindowID);
    1: 
    1:   static void debug_DumpEvent(FILE *                aFileOut,
    1:                               nsIWidget *           aWidget,
    1:                               nsGUIEvent *          aGuiEvent,
    1:                               const nsCAutoString & aWidgetName,
    1:                               PRInt32               aWindowID);
    1:   
    1:   static void debug_DumpPaintEvent(FILE *                aFileOut,
    1:                                    nsIWidget *           aWidget,
    1:                                    nsPaintEvent *        aPaintEvent,
    1:                                    const nsCAutoString & aWidgetName,
    1:                                    PRInt32               aWindowID);
    1: 
    1:   static PRBool debug_GetCachedBoolPref(const char* aPrefName);
    1: #endif
    1: };
    1: 
 8591: // A situation can occur when a mouse event occurs over a menu label while the
 8591: // menu popup is already open. The expected behaviour is to close the popup.
 8591: // This happens by calling nsIRollupListener::Rollup before the mouse event is
 8591: // processed. However, in cases where the mouse event is not consumed, this
 8591: // event will then get targeted at the menu label causing the menu to open
 8591: // again. To prevent this, we store in mLastRollup a reference to the popup
 8591: // that was closed during the Rollup call, and prevent this popup from
 8591: // reopening while processing the mouse event.
 8591: // mLastRollup should only be set while an nsAutoRollup is in scope;
 8591: // when it goes out of scope mLastRollup is cleared automatically.
 8591: // As mLastRollup is static, it can be retrieved by calling
 8591: // nsIWidget::GetLastRollup on any widget.
 8591: class nsAutoRollup
 8591: {
 8591:   PRBool wasClear;
 8591: 
 8591:   public:
 8591: 
 8591:   nsAutoRollup();
 8591:   ~nsAutoRollup();
 8591: };
 8591: 
    1: #endif // nsBaseWidget_h__
