 27840: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 27840: 
121842: #include <windows.h>
121842: #include <ras.h>
121842: #include <wininet.h>
 27840: 
104076: #include "mozilla/Util.h"
 27840: #include "nsISystemProxySettings.h"
 27840: #include "nsIServiceManager.h"
 46997: #include "mozilla/ModuleUtils.h"
 27840: #include "nsPrintfCString.h"
 27840: #include "nsNetUtil.h"
 27840: #include "nsISupportsPrimitives.h"
 27840: #include "nsIURI.h"
 27840: 
121842: class nsWindowsSystemProxySettings : public nsISystemProxySettings
 27840: {
 27840: public:
 27840:     NS_DECL_ISUPPORTS
 27840:     NS_DECL_NSISYSTEMPROXYSETTINGS
 27840: 
121842:     nsWindowsSystemProxySettings() {};
 27840:     nsresult Init();
 27840: 
 27840: private:
121842:     ~nsWindowsSystemProxySettings() {};
121842: 
121842:     bool MatchOverride(const nsACString& aHost);
121842:     bool PatternMatch(const nsACString& aHost, const nsACString& aOverride);
 27840: };
 27840: 
121842: NS_IMPL_THREADSAFE_ISUPPORTS1(nsWindowsSystemProxySettings, nsISystemProxySettings)
115189: 
115189: NS_IMETHODIMP
121842: nsWindowsSystemProxySettings::GetMainThreadOnly(bool *aMainThreadOnly)
115189: {
121842:   *aMainThreadOnly = false;
115189:   return NS_OK;
115189: }
115189: 
 27840: 
 27840: nsresult
121842: nsWindowsSystemProxySettings::Init()
 27840: {
 27840:     return NS_OK;
 27840: }
 27840: 
121842: static void SetProxyResult(const char* aType, const nsACString& aHostPort,
121842:                            nsACString& aResult)
114103: {
121842:     aResult.AssignASCII(aType);
121842:     aResult.Append(' ');
121842:     aResult.Append(aHostPort);
121842: }
121842: 
121842: static void SetProxyResultDirect(nsACString& aResult)
121842: {
121842:     // For whatever reason, a proxy is not to be used.
121842:     aResult.AssignASCII("DIRECT");
121842: }
121842: 
121842: static nsresult ReadInternetOption(uint32_t aOption, uint32_t& aFlags,
121842:                                    nsAString& aValue)
121842: {
121842:     DWORD connFlags = 0;
121842:     WCHAR connName[RAS_MaxEntryName + 1];
121842:     InternetGetConnectedStateExW(&connFlags, connName,
121842:                                  mozilla::ArrayLength(connName), 0);
121842: 
121842:     INTERNET_PER_CONN_OPTIONW options[2];
121842:     options[0].dwOption = INTERNET_PER_CONN_FLAGS_UI;
121842:     options[1].dwOption = aOption;
121842: 
121842:     INTERNET_PER_CONN_OPTION_LISTW list;
121842:     list.dwSize = sizeof(INTERNET_PER_CONN_OPTION_LISTW);
121842:     list.pszConnection = connFlags & INTERNET_CONNECTION_MODEM ?
121842:                          connName : NULL;
121842:     list.dwOptionCount = mozilla::ArrayLength(options);
121842:     list.dwOptionError = 0;
121842:     list.pOptions = options;
121842: 
121842:     unsigned long size = sizeof(INTERNET_PER_CONN_OPTION_LISTW);
121842:     if (!InternetQueryOptionW(NULL, INTERNET_OPTION_PER_CONNECTION_OPTION,
121842:                               &list, &size)) {
121842:         if (GetLastError() != ERROR_INVALID_PARAMETER) {
121842:             return NS_ERROR_FAILURE;
121842:         }
121842:         options[0].dwOption = INTERNET_PER_CONN_FLAGS;
121842:         size = sizeof(INTERNET_PER_CONN_OPTION_LISTW);
121842:         if (!InternetQueryOptionW(NULL, INTERNET_OPTION_PER_CONNECTION_OPTION,
121842:                                   &list, &size)) {
121842:             return NS_ERROR_FAILURE;
121842:         }
121842:     }
121842: 
121842:     aFlags = options[0].Value.dwValue;
121842:     aValue.Assign(options[1].Value.pszValue);
121842:     GlobalFree(options[1].Value.pszValue);
121842: 
101932:     return NS_OK;
101932: }
101932: 
121842: bool
121842: nsWindowsSystemProxySettings::MatchOverride(const nsACString& aHost)
121842: {
121842:     nsresult rv;
121842:     uint32_t flags = 0;
121842:     nsAutoString buf;
121842: 
121842:     rv = ReadInternetOption(INTERNET_PER_CONN_PROXY_BYPASS, flags, buf);
121842:     if (NS_FAILED(rv))
121842:         return false;
121842: 
121842:     NS_ConvertUTF16toUTF8 cbuf(buf);
121842: 
121842:     nsAutoCString host(aHost);
121842:     int32_t start = 0;
121842:     int32_t end = cbuf.Length();
121842: 
121842:     // Windows formats its proxy override list in the form:
121842:     // server;server;server where 'server' is a server name pattern or IP
121842:     // address, or "<local>". "<local>" must be translated to
121842:     // "localhost;127.0.0.1".
121842:     // In a server name pattern, a '*' character matches any substring and
121842:     // all other characters must match themselves; the whole pattern must match
121842:     // the whole hostname.
121842:     while (true) {
121842:         int32_t delimiter = cbuf.FindCharInSet(" ;", start);
121842:         if (delimiter == -1)
121842:             delimiter = end;
121842: 
121842:         if (delimiter != start) {
121842:             const nsAutoCString override(Substring(cbuf, start,
121842:                                                    delimiter - start));
121842:             if (override.EqualsLiteral("<local>")) {
121842:                 // This override matches local addresses.
121842:                 if (host.EqualsLiteral("localhost") ||
121842:                     host.EqualsLiteral("127.0.0.1"))
121842:                     return true;
121842:             } else if (PatternMatch(host, override)) {
121842:                 return true;
121842:             }
121842:         }
121842: 
121842:         if (delimiter == end)
121842:             break;
121842:         start = ++delimiter;
121842:     }
121842: 
121842:     return false;
121842: }
121842: 
121842: bool
121842: nsWindowsSystemProxySettings::PatternMatch(const nsACString& aHost,
121842:                                            const nsACString& aOverride)
121842: {
121842:     nsAutoCString host(aHost);
121842:     nsAutoCString override(aOverride);
121842:     int32_t overrideLength = override.Length();
121842:     int32_t tokenStart = 0;
121842:     int32_t offset = 0;
121842:     bool star = false;
121842: 
121842:     while (tokenStart < overrideLength) {
121842:         int32_t tokenEnd = override.FindChar('*', tokenStart);
121842:         if (tokenEnd == tokenStart) {
121842:             star = true;
121842:             tokenStart++;
121842:             // If the character following the '*' is a '.' character then skip
121842:             // it so that "*.foo.com" allows "foo.com".
121842:             if (override.FindChar('.', tokenStart) == tokenStart)
121842:                 tokenStart++;
121842:         } else {
121842:             if (tokenEnd == -1)
121842:                 tokenEnd = overrideLength;
121842:             nsAutoCString token(Substring(override, tokenStart,
121842:                                           tokenEnd - tokenStart));
121842:             offset = host.Find(token, offset);
121842:             if (offset == -1 || (!star && offset))
121842:                 return false;
121842:             star = false;
121842:             tokenStart = tokenEnd;
121842:             offset += token.Length();
121842:         }
121842:     }
121842: 
121842:     return (star || (offset == host.Length()));
121842: }
121842: 
 27840: nsresult
121842: nsWindowsSystemProxySettings::GetPACURI(nsACString& aResult)
121842: {
121842:     nsresult rv;
121842:     uint32_t flags = 0;
121842:     nsAutoString buf;
121842: 
121842:     rv = ReadInternetOption(INTERNET_PER_CONN_AUTOCONFIG_URL, flags, buf);
121842:     if (!(flags & PROXY_TYPE_AUTO_PROXY_URL)) {
121842:         aResult.Truncate();
121842:         return rv;
121842:     }
121842: 
121842:     if (NS_SUCCEEDED(rv))
121842:         aResult = NS_ConvertUTF16toUTF8(buf);
121842:     return rv;
121842: }
121842: 
121842: nsresult
121842: nsWindowsSystemProxySettings::GetProxyForURI(const nsACString & aSpec,
115189:                                              const nsACString & aScheme,
115189:                                              const nsACString & aHost,
115189:                                              const int32_t      aPort,
115189:                                              nsACString & aResult)
 27840: {
121842:     nsresult rv;
121842:     uint32_t flags = 0;
121842:     nsAutoString buf;
121842: 
121842:     rv = ReadInternetOption(INTERNET_PER_CONN_PROXY_SERVER, flags, buf);
121842:     if (NS_FAILED(rv) || !(flags & PROXY_TYPE_PROXY)) {
121842:         SetProxyResultDirect(aResult);
121842:         return NS_OK;
 27840:     }
 27840: 
121842:     if (MatchOverride(aHost)) {
121842:         SetProxyResultDirect(aResult);
121842:         return NS_OK;
121842:     }
 27840: 
121842:     NS_ConvertUTF16toUTF8 cbuf(buf);
 27840: 
121842:     nsAutoCString prefix;
121842:     ToLowerCase(aScheme, prefix);
 27840: 
121842:     prefix.Append('=');
121842: 
121842:     nsAutoCString specificProxy;
121842:     nsAutoCString defaultProxy;
121842:     nsAutoCString socksProxy;
121842:     int32_t start = 0;
121842:     int32_t end = cbuf.Length();
121842: 
121842:     while (true) {
121842:         int32_t delimiter = cbuf.FindCharInSet(" ;", start);
121842:         if (delimiter == -1)
121842:             delimiter = end;
121842: 
121842:         if (delimiter != start) {
121842:             const nsAutoCString proxy(Substring(cbuf, start,
121842:                                                 delimiter - start));
121842:             if (proxy.FindChar('=') == -1) {
121842:                 // If a proxy name is listed by itself, it is used as the
121842:                 // default proxy for any protocols that do not have a specific
121842:                 // proxy specified.
121842:                 // (http://msdn.microsoft.com/en-us/library/aa383996%28VS.85%29.aspx)
121842:                 defaultProxy = proxy;
121842:             } else if (proxy.Find(prefix) == 0) {
121842:                 // To list a proxy for a specific protocol, the string must
121842:                 // follow the format "<protocol>=<protocol>://<proxy_name>".
121842:                 // (http://msdn.microsoft.com/en-us/library/aa383996%28VS.85%29.aspx)
121842:                 specificProxy = Substring(proxy, prefix.Length());
121842:                 break;
121842:             } else if (proxy.Find("socks=") == 0) {
121842:                 // SOCKS proxy.
121842:                 socksProxy = Substring(proxy, 5); // "socks=" length.
121842:             }
121842:         }
121842: 
121842:         if (delimiter == end)
121842:             break;
121842:         start = ++delimiter;
121842:     }
121842: 
121842:     if (!specificProxy.IsEmpty())
121842:         SetProxyResult("PROXY", specificProxy, aResult); // Protocol-specific proxy.
121842:     else if (!defaultProxy.IsEmpty())
121842:         SetProxyResult("PROXY", defaultProxy, aResult); // Default proxy.
121842:     else if (!socksProxy.IsEmpty())
121842:         SetProxyResult("SOCKS", socksProxy, aResult); // SOCKS proxy.
121842:     else
121842:         SetProxyResultDirect(aResult); // Direct connection.
121842: 
121842:     return NS_OK;
121842: }
121842: 
121842: #define NS_WINDOWSSYSTEMPROXYSERVICE_CID  /* 4e22d3ea-aaa2-436e-ada4-9247de57d367 */\
121842:     { 0x4e22d3ea, 0xaaa2, 0x436e, \
121842:         {0xad, 0xa4, 0x92, 0x47, 0xde, 0x57, 0xd3, 0x67 } }
121842: 
121842: NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsWindowsSystemProxySettings, Init)
121842: NS_DEFINE_NAMED_CID(NS_WINDOWSSYSTEMPROXYSERVICE_CID);
 27840: 
 46997: static const mozilla::Module::CIDEntry kSysProxyCIDs[] = {
121842:     { &kNS_WINDOWSSYSTEMPROXYSERVICE_CID, false, NULL, nsWindowsSystemProxySettingsConstructor },
 46997:     { NULL }
 27840: };
 27840: 
 46997: static const mozilla::Module::ContractIDEntry kSysProxyContracts[] = {
121842:     { NS_SYSTEMPROXYSETTINGS_CONTRACTID, &kNS_WINDOWSSYSTEMPROXYSERVICE_CID },
 46997:     { NULL }
 46997: };
 46997: 
 46997: static const mozilla::Module kSysProxyModule = {
 46997:     mozilla::Module::kVersion,
 46997:     kSysProxyCIDs,
 46997:     kSysProxyContracts
 46997: };
 46997: 
121842: NSMODULE_DEFN(nsWindowsProxyModule) = &kSysProxyModule;
