    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* vim:expandtab:shiftwidth=4:tabstop=4:
    1:  */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Sun Microsystems, Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 2002
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Bolian Yin (bolian.yin@sun.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsMaiInterfaceComponent.h"
41384: 
    1: #include "nsAccessibleWrap.h"
41384: #include "nsAccUtils.h"
41384: #include "nsCoreUtils.h"
41384: 
    1: #include "nsIDOMDocument.h"
68870: #include "nsIDOMDocumentView.h"
68870: #include "nsIDOMAbstractView.h"
    1: #include "nsIDOMWindowInternal.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIInterfaceRequestorUtils.h"
    1: 
    1: void
    1: componentInterfaceInitCB(AtkComponentIface *aIface)
    1: {
    1:     NS_ASSERTION(aIface, "Invalid Interface");
    1:     if(!aIface)
    1:         return;
    1: 
    1:     /*
    1:      * Use default implementation in atk for contains, get_position,
    1:      * and get_size
    1:      */
    1:     aIface->ref_accessible_at_point = refAccessibleAtPointCB;
    1:     aIface->get_extents = getExtentsCB;
    1:     aIface->grab_focus = grabFocusCB;
    1: }
    1: 
    1: AtkObject *
    1: refAccessibleAtPointCB(AtkComponent *aComponent,
    1:                        gint aAccX, gint aAccY,
    1:                        AtkCoordType aCoordType)
    1: {
    1:     nsAccessibleWrap *accWrap = GetAccessibleWrap(ATK_OBJECT(aComponent));
20566:     if (!accWrap || nsAccUtils::MustPrune(accWrap))
 2211:         return nsnull;
    1: 
 6037:     // nsIAccessible getChildAtPoint (x,y) is in screen pixels.
    1:     if (aCoordType == ATK_XY_WINDOW) {
43504:         nsIntPoint winCoords =
43504:           nsCoreUtils::GetScreenCoordsForWindow(accWrap->GetNode());
 6037:         aAccX += winCoords.x;
 6037:         aAccY += winCoords.y;
    1:     }
    1: 
    1:     nsCOMPtr<nsIAccessible> pointAcc;
 2092:     accWrap->GetChildAtPoint(aAccX, aAccY, getter_AddRefs(pointAcc));
 2092:     if (!pointAcc) {
    1:         return nsnull;
 2092:     }
    1: 
 2211:     AtkObject *atkObj = nsAccessibleWrap::GetAtkObject(pointAcc);
 2211:     if (atkObj) {
 2211:         g_object_ref(atkObj);
 2092:     }
    1:     return atkObj;
    1: }
    1: 
    1: void
    1: getExtentsCB(AtkComponent *aComponent,
    1:              gint *aAccX,
    1:              gint *aAccY,
    1:              gint *aAccWidth,
    1:              gint *aAccHeight,
    1:              AtkCoordType aCoordType)
    1: {
    1:     *aAccX = *aAccY = *aAccWidth = *aAccHeight = 0;
    1: 
    1:     nsAccessibleWrap *accWrap = GetAccessibleWrap(ATK_OBJECT(aComponent));
    1:     if (!accWrap)
    1:         return;
    1: 
    1:     PRInt32 nsAccX, nsAccY, nsAccWidth, nsAccHeight;
    1:     // Returned in screen coordinates
    1:     nsresult rv = accWrap->GetBounds(&nsAccX, &nsAccY,
    1:                                      &nsAccWidth, &nsAccHeight);
    1:     if (NS_FAILED(rv))
    1:         return;
    1:     if (aCoordType == ATK_XY_WINDOW) {
43504:         nsIntPoint winCoords =
43504:           nsCoreUtils::GetScreenCoordsForWindow(accWrap->GetNode());
 5679:         nsAccX -= winCoords.x;
 5679:         nsAccY -= winCoords.y;
    1:     }
    1: 
    1:     *aAccX = nsAccX;
    1:     *aAccY = nsAccY;
    1:     *aAccWidth = nsAccWidth;
    1:     *aAccHeight = nsAccHeight;
    1: }
    1: 
    1: gboolean
    1: grabFocusCB(AtkComponent *aComponent)
    1: {
    1:     nsAccessibleWrap *accWrap = GetAccessibleWrap(ATK_OBJECT(aComponent));
 2211:     if (!accWrap)
 2211:         return FALSE;
    1: 
    1:     nsresult rv = accWrap->TakeFocus();
    1:     return (NS_FAILED(rv)) ? FALSE : TRUE;
    1: }
