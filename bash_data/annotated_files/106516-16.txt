     1: /* -*- Mode: Objective-C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: /* For documentation of the accessibility architecture, 
     1:  * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
     1:  */
     1: 
 99648: #ifndef _AccessibleWrap_H_
 99648: #define _AccessibleWrap_H_
     1: 
 70017: #include <objc/objc.h>
 70017: 
 99648: #include "Accessible.h"
106516: #include "nsAccUtils.h"
 67844: #include "States.h"
 41384: 
     1: #include "nsCOMPtr.h"
     1: #include "nsRect.h"
     1: 
     1: #include "nsTArray.h"
     1: #include "nsAutoPtr.h"
     1: 
 84478: #if defined(__OBJC__)
 84478: @class mozAccessible;
 84478: #endif
     1: 
 99648: class AccessibleWrap : public Accessible
     1: {
     1: public: // construction, destruction
 99648:   AccessibleWrap(nsIContent* aContent, DocAccessible* aDoc);
 99648:   virtual ~AccessibleWrap();
     1:     
 86113:   /**
 86113:    * Get the native Obj-C object (mozAccessible).
 86113:    */
     1:   NS_IMETHOD GetNativeInterface (void** aOutAccessible);
     1:   
 86113:   /**
 86113:    * The objective-c |Class| type that this accessible's native object
 86113:    * should be instantied with.   used on runtime to determine the
 86113:    * right type for this accessible's associated native object.
 86113:    */
 70017:   virtual Class GetNativeType ();
     1: 
 43538:   virtual void Shutdown ();
 29320:   virtual void InvalidateChildren();
     1: 
 99648:   virtual bool AppendChild(Accessible* aAccessible);
 99648:   virtual bool RemoveChild(Accessible* aAccessible);
 86113: 
 51377:   virtual nsresult HandleAccEvent(AccEvent* aEvent);
  3152: 
 86113:   /**
 86113:    * Ignored means that the accessible might still have children, but is not
 86113:    * displayed to the user. it also has no native accessible object represented
 86113:    * for it.
 86113:    */
 79445:   bool IsIgnored();
     1:   
 86113:   inline bool HasPopup () 
 86113:     { return (NativeState() & mozilla::a11y::states::HASPOPUP); }
     1:   
 86113:   /**
 86113:    * Returns this accessible's all children, adhering to "flat" accessibles by 
 86113:    * not returning their children.
 86113:    */
 99648:   void GetUnignoredChildren(nsTArray<Accessible*>* aChildrenArray);
 99648:   Accessible* GetUnignoredParent() const;
     1: 
     1: protected:
     1: 
 51377:   virtual nsresult FirePlatformEvent(AccEvent* aEvent);
 15375: 
 41384:   /**
 41384:    * Return true if the parent doesn't have children to expose to AT.
 41384:    */
 79445:   bool AncestorIsFlat();
     1: 
 84478:   /**
 84640:    * Get the native object. Create it if needed.
 84478:    */
 84478: #if defined(__OBJC__)
 84640:   mozAccessible* GetNativeObject();
 84640: #else
 84640:   id GetNativeObject();
 84640: #endif
 84640: 
 84640: private:
 84640: 
 84640:   /**
 84640:    * Our native object. Private because its creation is done lazily.
 86113:    * Don't access it directly. Ever. Unless you are GetNativeObject() or 
 86113:    * Shutdown()
 84640:    */
 84640: #if defined(__OBJC__)
 84640:   // if we are in Objective-C, we use the actual Obj-C class.
 84478:   mozAccessible* mNativeObject;
 84478: #else
 84478:   id mNativeObject;
 84478: #endif
 84640: 
 84640:   /**
 84640:    * We have created our native. This does not mean there is one.
 84640:    * This can never go back to false.
 84640:    * We need it because checking whether we need a native object cost time.
 84640:    */
 84640:   bool mNativeInited;  
     1: };
     1: 
     1: #endif
