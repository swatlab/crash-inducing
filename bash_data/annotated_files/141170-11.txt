     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
     1:  *
 99778:  * This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef _nsNSSComponent_h_
     1: #define _nsNSSComponent_h_
     1: 
 64576: #include "mozilla/Mutex.h"
119899: #include "mozilla/RefPtr.h"
     1: #include "nsCOMPtr.h"
     1: #include "nsISignatureVerifier.h"
     1: #include "nsIURIContentListener.h"
     1: #include "nsIStreamListener.h"
     1: #include "nsIEntropyCollector.h"
     1: #include "nsString.h"
     1: #include "nsIStringBundle.h"
     1: #include "nsIPrefBranch.h"
     1: #include "nsIObserver.h"
     1: #include "nsIObserverService.h"
     1: #include "nsWeakReference.h"
     1: #include "nsIScriptSecurityManager.h"
132823: #ifndef MOZ_DISABLE_CRYPTOLEGACY
141079: #include "nsIDOMEventTarget.h"
     1: #include "nsSmartCardMonitor.h"
132823: #endif
     1: #include "nsINSSErrorsService.h"
     1: #include "nsITimer.h"
     1: #include "nsNetUtil.h"
     1: #include "nsHashtable.h"
     1: #include "nsICryptoHash.h"
 12341: #include "nsICryptoHMAC.h"
     1: #include "hasht.h"
     1: #include "nsNSSCallbacks.h"
 30802: #include "nsNSSShutDown.h"
     1: 
     1: #include "nsNSSHelper.h"
 28675: #include "nsClientAuthRemember.h"
141170: 
141170: #ifndef NSS_NO_LIBPKIX
140656: #include "nsCERTValInParamWrapper.h"
141170: #endif
     1: 
     1: #define NS_NSSCOMPONENT_CID \
     1: {0xa277189c, 0x1dd1, 0x11b2, {0xa8, 0xc9, 0xe4, 0xe8, 0xbf, 0xb1, 0x33, 0x8e}}
     1: 
     1: #define PSM_COMPONENT_CONTRACTID "@mozilla.org/psm;1"
     1: 
     1: //Define an interface that we can use to look up from the
     1: //callbacks passed to NSS.
     1: 
 29543: #define NS_INSSCOMPONENT_IID_STR "6ffbb526-205b-49c5-ae3f-5959c084075e"
     1: #define NS_INSSCOMPONENT_IID \
 29543:   { 0x6ffbb526, 0x205b, 0x49c5, \
 29550:     { 0xae, 0x3f, 0x59, 0x59, 0xc0, 0x84, 0x7, 0x5e } }
     1: 
     1: #define NS_PSMCONTENTLISTEN_CID {0xc94f4a30, 0x64d7, 0x11d4, {0x99, 0x60, 0x00, 0xb0, 0xd0, 0x23, 0x54, 0xa0}}
     1: #define NS_PSMCONTENTLISTEN_CONTRACTID "@mozilla.org/security/psmdownload;1"
     1: #define NS_CRYPTO_HASH_CID {0x36a1d3b3, 0xd886, 0x4317, {0x96, 0xff, 0x87, 0xb0, 0x00, 0x5c, 0xfe, 0xf7}}
 12341: #define NS_CRYPTO_HMAC_CID {0xa496d0a2, 0xdff7, 0x4e23, {0xbd, 0x65, 0x1c, 0xa7, 0x42, 0xfa, 0x17, 0x8a}}
 12341: 
 25625: enum EnsureNSSOperator
 25625: {
 56495:   nssLoadingComponent = 0,
 25625:   nssInitSucceeded = 1,
 25625:   nssInitFailed = 2,
 25625:   nssShutdown = 3,
 56495:   nssEnsure = 100,
 56496:   nssEnsureOnChromeOnly = 101
 25625: };
 25625: 
 79445: extern bool EnsureNSSInitialized(EnsureNSSOperator op);
 25625: 
     1: //--------------------------------------------
     1: // Now we need a content listener to register 
     1: //--------------------------------------------
     1: class PSMContentDownloader : public nsIStreamListener
     1: {
     1: public:
 80486:   PSMContentDownloader() {NS_ASSERTION(false, "don't use this constructor."); }
108991:   PSMContentDownloader(uint32_t type);
     1:   virtual ~PSMContentDownloader();
 79445:   void setSilentDownload(bool flag);
     1:   void setCrlAutodownloadKey(nsAutoString key);
     1: 
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSIREQUESTOBSERVER
     1:   NS_DECL_NSISTREAMLISTENER
     1: 
     1:   enum {UNKNOWN_TYPE = 0};
     1:   enum {X509_CA_CERT  = 1};
     1:   enum {X509_USER_CERT  = 2};
     1:   enum {X509_EMAIL_CERT  = 3};
     1:   enum {X509_SERVER_CERT  = 4};
     1:   enum {PKCS7_CRL = 5};
     1: 
     1: protected:
     1:   char* mByteData;
108991:   int32_t mBufferOffset;
108991:   int32_t mBufferSize;
108991:   uint32_t mType;
 79445:   bool mDoSilentDownload;
 16996:   nsString mCrlAutoDownloadKey;
     1:   nsCOMPtr<nsIURI> mURI;
     1:   nsresult handleContentDownloadError(nsresult errCode);
     1: };
     1: 
 69383: class nsNSSComponent;
 69383: 
     1: class NS_NO_VTABLE nsINSSComponent : public nsISupports {
     1:  public:
     1:   NS_DECLARE_STATIC_IID_ACCESSOR(NS_INSSCOMPONENT_IID)
     1: 
 81303:   NS_IMETHOD ShowAlertFromStringBundle(const char * messageID) = 0;
 81303: 
     1:   NS_IMETHOD GetPIPNSSBundleString(const char *name,
     1:                                    nsAString &outString) = 0;
     1:   NS_IMETHOD PIPBundleFormatStringFromName(const char *name,
     1:                                            const PRUnichar **params,
108991:                                            uint32_t numParams,
     1:                                            nsAString &outString) = 0;
     1: 
  2850:   NS_IMETHOD GetNSSBundleString(const char *name,
  2850:                                 nsAString &outString) = 0;
  2850:   NS_IMETHOD NSSBundleFormatStringFromName(const char *name,
  2850:                                            const PRUnichar **params,
108991:                                            uint32_t numParams,
  2850:                                            nsAString &outString) = 0;
  2850: 
     1:   // This method will just disable OCSP in NSS, it will not
     1:   // alter the respective pref values.
     1:   NS_IMETHOD SkipOcsp() = 0;
     1: 
     1:   // This method will set the OCSP value according to the 
     1:   // values in the preferences.
     1:   NS_IMETHOD SkipOcspOff() = 0;
     1: 
     1:   NS_IMETHOD RememberCert(CERTCertificate *cert) = 0;
     1: 
     1:   NS_IMETHOD RemoveCrlFromList(nsAutoString) = 0;
     1: 
     1:   NS_IMETHOD DefineNextTimer() = 0;
     1: 
     1:   NS_IMETHOD DownloadCRLDirectly(nsAutoString, nsAutoString) = 0;
     1:   
     1:   NS_IMETHOD LogoutAuthenticatedPK11() = 0;
     1: 
132823: #ifndef MOZ_DISABLE_CRYPTOLEGACY
     1:   NS_IMETHOD LaunchSmartCardThread(SECMODModule *module) = 0;
     1: 
     1:   NS_IMETHOD ShutdownSmartCardThread(SECMODModule *module) = 0;
     1: 
     1:   NS_IMETHOD PostEvent(const nsAString &eventType, const nsAString &token) = 0;
     1: 
     1:   NS_IMETHOD DispatchEvent(const nsAString &eventType, const nsAString &token) = 0;
132823: #endif
     1: 
 79445:   NS_IMETHOD IsNSSInitialized(bool *initialized) = 0;
 69383: 
141170: #ifndef NSS_NO_LIBPKIX
141170:   NS_IMETHOD EnsureIdentityInfoLoaded() = 0;
140656:   NS_IMETHOD GetDefaultCERTValInParam(
140656:                   mozilla::RefPtr<nsCERTValInParamWrapper> &out) = 0;
140656:   NS_IMETHOD GetDefaultCERTValInParamLocalOnly(
140656:                   mozilla::RefPtr<nsCERTValInParamWrapper> &out) = 0;
141170: #endif
141170: 
     1: };
     1: 
     1: NS_DEFINE_STATIC_IID_ACCESSOR(nsINSSComponent, NS_INSSCOMPONENT_IID)
     1: 
 30802: class nsCryptoHash : public nsICryptoHash, public nsNSSShutDownObject
     1: {
     1: public:
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSICRYPTOHASH
     1: 
     1:   nsCryptoHash();
     1: 
     1: private:
     1:   ~nsCryptoHash();
 29646: 
     1:   HASHContext* mHashContext;
 79445:   bool mInitialized;
 30802: 
 30802:   virtual void virtualDestroyNSSReference();
 30802:   void destructorSafeDestroyNSSReference();
     1: };
     1: 
 30802: class nsCryptoHMAC : public nsICryptoHMAC, public nsNSSShutDownObject
 12341: {
 12341: public:
 12341:   NS_DECL_ISUPPORTS
 12341:   NS_DECL_NSICRYPTOHMAC
 12341: 
 12341:   nsCryptoHMAC();
 12341: 
 12341: private:
 12341:   ~nsCryptoHMAC();
 30802:   PK11Context* mHMACContext;
 12341: 
 30802:   virtual void virtualDestroyNSSReference();
 30802:   void destructorSafeDestroyNSSReference();
 12341: };
 12341: 
     1: class nsNSSShutDownList;
     1: class nsCertVerificationThread;
     1: 
     1: // Implementation of the PSM component interface.
     1: class nsNSSComponent : public nsISignatureVerifier,
     1:                        public nsIEntropyCollector,
     1:                        public nsINSSComponent,
     1:                        public nsIObserver,
     1:                        public nsSupportsWeakReference,
 56656:                        public nsITimerCallback
     1: {
 64576:   typedef mozilla::Mutex Mutex;
 64576: 
     1: public:
   731:   NS_DEFINE_STATIC_CID_ACCESSOR( NS_NSSCOMPONENT_CID )
     1: 
     1:   nsNSSComponent();
     1:   virtual ~nsNSSComponent();
     1: 
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSISIGNATUREVERIFIER
     1:   NS_DECL_NSIENTROPYCOLLECTOR
     1:   NS_DECL_NSIOBSERVER
     1:   NS_DECL_NSITIMERCALLBACK
     1: 
     1:   NS_METHOD Init();
     1: 
 81303:   static nsresult GetNewPrompter(nsIPrompt ** result);
 81303:   static nsresult ShowAlertWithConstructedString(const nsString & message);
 81303:   NS_IMETHOD ShowAlertFromStringBundle(const char * messageID);
 81303: 
     1:   NS_IMETHOD GetPIPNSSBundleString(const char *name,
     1:                                    nsAString &outString);
     1:   NS_IMETHOD PIPBundleFormatStringFromName(const char *name,
     1:                                            const PRUnichar **params,
108991:                                            uint32_t numParams,
     1:                                            nsAString &outString);
  2850:   NS_IMETHOD GetNSSBundleString(const char *name,
  2850:                                nsAString &outString);
  2850:   NS_IMETHOD NSSBundleFormatStringFromName(const char *name,
  2850:                                            const PRUnichar **params,
108991:                                            uint32_t numParams,
  2850:                                            nsAString &outString);
     1:   NS_IMETHOD SkipOcsp();
     1:   NS_IMETHOD SkipOcspOff();
     1:   nsresult InitializeCRLUpdateTimer();
     1:   nsresult StopCRLUpdateTimer();
     1:   NS_IMETHOD RemoveCrlFromList(nsAutoString);
     1:   NS_IMETHOD DefineNextTimer();
     1:   NS_IMETHOD LogoutAuthenticatedPK11();
     1:   NS_IMETHOD DownloadCRLDirectly(nsAutoString, nsAutoString);
     1:   NS_IMETHOD RememberCert(CERTCertificate *cert);
     1: 
132823: #ifndef MOZ_DISABLE_CRYPTOLEGACY
     1:   NS_IMETHOD LaunchSmartCardThread(SECMODModule *module);
     1:   NS_IMETHOD ShutdownSmartCardThread(SECMODModule *module);
     1:   NS_IMETHOD PostEvent(const nsAString &eventType, const nsAString &token);
     1:   NS_IMETHOD DispatchEvent(const nsAString &eventType, const nsAString &token);
132823:   void LaunchSmartCardThreads();
132823:   void ShutdownSmartCardThreads();
132823:   nsresult DispatchEventToWindow(nsIDOMWindow *domWin, const nsAString &eventType, const nsAString &token);
132823: #endif
141170: 
 79445:   NS_IMETHOD IsNSSInitialized(bool *initialized);
     1: 
     1: private:
     1: 
 79445:   nsresult InitializeNSS(bool showWarningBox);
126658:   void ShutdownNSS();
     1: 
     1: #ifdef XP_MACOSX
     1:   void TryCFM2MachOMigration(nsIFile *cfmPath, nsIFile *machoPath);
     1: #endif
     1:   
     1:   void InstallLoadableRoots();
     1:   void UnloadLoadableRoots();
 69383:   void setValidationOptions(nsIPrefBranch * pref);
140253:   nsresult setEnabledTLSVersions(nsIPrefBranch * pref);
     1:   nsresult InitializePIPNSSBundle();
     1:   nsresult ConfigureInternalPKCS11Token();
     1:   nsresult RegisterPSMContentListener();
     1:   nsresult RegisterObservers();
 25625:   nsresult DeregisterObservers();
     1:   nsresult DownloadCrlSilently();
     1:   nsresult PostCRLImportEvent(const nsCSubstring &urlString, nsIStreamListener *psmDownloader);
     1:   nsresult getParamsForNextCrlToDownload(nsAutoString *url, PRTime *time, nsAutoString *key);
  1427: 
  1427:   // Methods that we use to handle the profile change notifications (and to
  1427:   // synthesize a full profile change when we're just doing a profile startup):
  1427:   void DoProfileChangeNetTeardown();
  1427:   void DoProfileChangeTeardown(nsISupports* aSubject);
  1427:   void DoProfileBeforeChange(nsISupports* aSubject);
  1427:   void DoProfileChangeNetRestore();
  1427: 
141170: #ifndef NSS_NO_LIBPKIX
141170:   NS_IMETHOD EnsureIdentityInfoLoaded();
141170:   static PRStatus IdentityInfoInit(void);
141170:   void CleanupIdentityInfo();
141170:   NS_IMETHOD GetDefaultCERTValInParam(
141170:                   mozilla::RefPtr<nsCERTValInParamWrapper> &out);
141170:   NS_IMETHOD GetDefaultCERTValInParamLocalOnly(
141170:                   mozilla::RefPtr<nsCERTValInParamWrapper> &out);
141170: #endif
141170:   
 64576:   Mutex mutex;
     1:   
     1:   nsCOMPtr<nsIScriptSecurityManager> mScriptSecurityManager;
     1:   nsCOMPtr<nsIStringBundle> mPIPNSSBundle;
  2850:   nsCOMPtr<nsIStringBundle> mNSSErrorsBundle;
     1:   nsCOMPtr<nsIURIContentListener> mPSMContentListener;
     1:   nsCOMPtr<nsIPrefBranch> mPrefBranch;
     1:   nsCOMPtr<nsITimer> mTimer;
 79445:   bool mNSSInitialized;
 79445:   bool mObserversRegistered;
     1:   PLHashTable *hashTableCerts;
     1:   nsAutoString mDownloadURL;
     1:   nsAutoString mCrlUpdateKey;
 64576:   Mutex mCrlTimerLock;
     1:   nsHashtable *crlsScheduledForDownload;
 79445:   bool crlDownloadTimerOn;
 79445:   bool mUpdateTimerInitialized;
     1:   static int mInstanceCount;
     1:   nsNSSShutDownList *mShutdownObjectList;
132823: #ifndef MOZ_DISABLE_CRYPTOLEGACY
     1:   SmartCardThreadList *mThreadList;
132823: #endif
 79445:   bool mIsNetworkDown;
 72444: 
 72444:   void deleteBackgroundThreads();
 72444:   void createBackgroundThreads();
     1:   nsCertVerificationThread *mCertVerificationThread;
 72444: 
     1:   nsNSSHttpInterface mHttpForNSS;
141170: 
141170: #ifndef NSS_NO_LIBPKIX
141170: private:
140656:   mozilla::RefPtr<nsCERTValInParamWrapper> mDefaultCERTValInParam;
140656:   mozilla::RefPtr<nsCERTValInParamWrapper> mDefaultCERTValInParamLocalOnly;
  7105:   PRCallOnceType mIdentityInfoCallOnce;
 69383: public:
 79445:   static bool globalConstFlagUsePKIXVerification;
141170: #endif
141170: 
     1: };
     1: 
     1: class PSMContentListener : public nsIURIContentListener,
     1:                             public nsSupportsWeakReference {
     1: public:
     1:   PSMContentListener();
     1:   virtual ~PSMContentListener();
     1:   nsresult init();
     1: 
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSIURICONTENTLISTENER
     1: private:
     1:   nsCOMPtr<nsISupports> mLoadCookie;
     1:   nsCOMPtr<nsIURIContentListener> mParentContentListener;
     1: };
     1: 
     1: class nsNSSErrors
     1: {
     1: public:
 97075:   static const char *getDefaultErrorStringName(PRErrorCode err);
 97075:   static const char *getOverrideErrorStringName(PRErrorCode aErrorCode);
 97075:   static nsresult getErrorMessageFromCode(PRErrorCode err,
     1:                                           nsINSSComponent *component,
     1:                                           nsString &returnedMessage);
     1: };
     1: 
 57159: class nsPSMInitPanic
 57159: {
 57159: private:
 79445:   static bool isPanic;
 57159: public:
 80486:   static void SetPanic() {isPanic = true;}
 79445:   static bool GetPanic() {return isPanic;}
 57159: };
 57159: 
     1: #endif // _nsNSSComponent_h_
     1: 
