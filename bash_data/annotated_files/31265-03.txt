 3639: /* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- /
    1: /* vim: set shiftwidth=4 tabstop=8 autoindent cindent expandtab: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla's layout acceptance tests.
    1:  *
    1:  * The Initial Developer of the Original Code is the Mozilla Foundation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   L. David Baron <dbaron@dbaron.org>, Mozilla Corporation (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: const CC = Components.classes;
    1: const CI = Components.interfaces;
    1: const CR = Components.results;
    1: 
    1: const XHTML_NS = "http://www.w3.org/1999/xhtml";
    1: 
    1: const NS_LOCAL_FILE_CONTRACTID = "@mozilla.org/file/local;1";
    1: const IO_SERVICE_CONTRACTID = "@mozilla.org/network/io-service;1";
23486: const DEBUG_CONTRACTID = "@mozilla.org/xpcom/debug;1";
    1: const NS_LOCALFILEINPUTSTREAM_CONTRACTID =
    1:           "@mozilla.org/network/file-input-stream;1";
 2300: const NS_SCRIPTSECURITYMANAGER_CONTRACTID =
 2300:           "@mozilla.org/scriptsecuritymanager;1";
 4221: const NS_REFTESTHELPER_CONTRACTID =
 4221:           "@mozilla.org/reftest-helper;1";
16457: const NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX =
16457:           "@mozilla.org/network/protocol;1?name=";
24547: const NS_XREAPPINFO_CONTRACTID =
24547:           "@mozilla.org/xre/app-info;1";
24547: 
    1: 
29396: var gLoadTimeout = 0;
    1: 
24889: // "<!--CLEAR-->"
24889: const BLANK_URL_FOR_CLEARING = "data:text/html,%3C%21%2D%2DCLEAR%2D%2D%3E";
24889: 
    1: var gBrowser;
22863: var gCanvas1, gCanvas2;
23350: // gCurrentCanvas is non-null between InitCurrentCanvasWithSnapshot and the next
23350: // DocumentLoaded.
23350: var gCurrentCanvas = null;
    1: var gURLs;
22490: // Map from URI spec to the number of times it remains to be used
22490: var gURIUseCounts;
22490: // Map from URI spec to the canvas rendered for that URI
22490: var gURICanvases;
22153: var gTestResults = {
22712:   // Successful...
22712:   Pass: 0,
22712:   LoadOnly: 0,
22712:   // Unexpected...
22153:   Exception: 0,
22153:   FailedLoad: 0,
22153:   UnexpectedFail: 0,
22153:   UnexpectedPass: 0,
23486:   AssertionUnexpected: 0,
23486:   AssertionUnexpectedFixed: 0,
22712:   // Known problems...
22153:   KnownFail : 0,
23486:   AssertionKnown: 0,
22153:   Random : 0,
22153:   Skip: 0,
22153: };
16063: var gTotalTests = 0;
    1: var gState;
20632: var gCurrentURL;
24771: var gFailureTimeout = null;
20632: var gFailureReason;
 3639: var gServer;
 3639: var gCount = 0;
23486: var gAssertionCount = 0;
 3639: 
 3639: var gIOService;
23486: var gDebug;
22197: var gWindowUtils;
    1: 
14795: var gCurrentTestStartTime;
14795: var gSlowestTestTime = 0;
14795: var gSlowestTestURL;
23486: var gClearingForAssertionCheck = false;
14795: 
    1: const EXPECTED_PASS = 0;
    1: const EXPECTED_FAIL = 1;
    1: const EXPECTED_RANDOM = 2;
 1277: const EXPECTED_DEATH = 3;  // test must be skipped to avoid e.g. crash/hang
 6614: const EXPECTED_LOAD = 4; // test without a reference (just test that it does
 6614:                          // not assert, crash, hang, or leak)
    1: 
24706: var HTTP_SERVER_PORT = 4444;
24706: const HTTP_SERVER_PORTS_TO_TRY = 50;
 3639: 
22490: var gRecycledCanvases = new Array();
22490: 
22490: function AllocateCanvas()
22490: {
22490:     var windowElem = document.documentElement;
22490: 
22490:     if (gRecycledCanvases.length > 0)
22490:         return gRecycledCanvases.shift();
22490: 
22490:     var canvas = document.createElementNS(XHTML_NS, "canvas");
22490:     canvas.setAttribute("width", windowElem.getAttribute("width"));
22490:     canvas.setAttribute("height", windowElem.getAttribute("height"));
22490:     return canvas;
22490: }
22490: 
22490: function ReleaseCanvas(canvas)
22490: {
22490:     gRecycledCanvases.push(canvas);
22490: }
22490: 
    1: function OnRefTestLoad()
    1: {
    1:     gBrowser = document.getElementById("browser");
    1: 
29396:     /* set the gLoadTimeout */
29396:     try {
29396:       var prefs = Components.classes["@mozilla.org/preferences-service;1"].
29396:                   getService(Components.interfaces.nsIPrefBranch2);
29396:       gLoadTimeout = prefs.getIntPref("reftest.timeout");
29396:     }                  
29396:     catch(e) {
29396:       gLoadTimeout = 5 * 60 * 1000; //5 minutes as per bug 479518
29396:     }
29396: 
    1:     gBrowser.addEventListener("load", OnDocumentLoad, true);
    1: 
 4221:     try {
22197:         gWindowUtils = window.QueryInterface(CI.nsIInterfaceRequestor).getInterface(CI.nsIDOMWindowUtils);
22197:         if (gWindowUtils && !gWindowUtils.compareCanvases)
22197:             gWindowUtils = null;
 4221:     } catch (e) {
22197:         gWindowUtils = null;
 4221:     }
 4221: 
    1:     var windowElem = document.documentElement;
 4221: 
 3639:     gIOService = CC[IO_SERVICE_CONTRACTID].getService(CI.nsIIOService);
23486:     gDebug = CC[DEBUG_CONTRACTID].getService(CI.nsIDebug2);
24706:     gServer = CC["@mozilla.org/server/jshttp;1"].
24706:                   createInstance(CI.nsIHttpServer);
 3639: 
    1:     try {
27361:         if (gServer)
27361:             StartHTTPServer();
27361:     } catch (ex) {
27361:         //gBrowser.loadURI('data:text/plain,' + ex);
27361:         ++gTestResults.Exception;
27361:         dump("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + ex + "\n");
27361:         DoneTests();
27361:     }
27361: 
27361:     StartTests();
27361: }
27361: 
27361: function StartHTTPServer()
27361: {
24706:     gServer.registerContentType("sjs", "sjs");
24706:     // We want to try different ports in case the port we want
24706:     // is being used.
24706:     var tries = HTTP_SERVER_PORTS_TO_TRY;
24706:     do {
24706:         try {
24706:             gServer.start(HTTP_SERVER_PORT);
27361:             return;
24706:         } catch (ex) {
24706:             ++HTTP_SERVER_PORT;
27361:             if (--tries == 0)
24706:                 throw ex;
24706:         }
27361:     } while (true);
24706: }
27361: 
27361: function StartTests()
27361: {
27361:     try {
24706:         // Need to read the manifest once we have the final HTTP_SERVER_PORT.
    1:         ReadTopManifest(window.arguments[0]);
22490:         BuildUseCounts();
16063:         gTotalTests = gURLs.length;
28335: 
28335:         if (!gTotalTests)
28335:             throw "No tests to run";
28335: 
22490:         gURICanvases = {};
    1:         StartCurrentTest();
    1:     } catch (ex) {
 4149:         //gBrowser.loadURI('data:text/plain,' + ex);
22153:         ++gTestResults.Exception;
22516:         dump("REFTEST TEST-UNEXPECTED-FAIL | | EXCEPTION: " + ex + "\n");
 4149:         DoneTests();
    1:     }
    1: }
    1: 
    1: function OnRefTestUnload()
    1: {
19003:     /* Clear the sRGB forcing pref to leave the profile as we found it. */
19003:     var prefs = Components.classes["@mozilla.org/preferences-service;1"].
19003:                 getService(Components.interfaces.nsIPrefBranch2);
19003:     prefs.clearUserPref("gfx.color_management.force_srgb");
19003: 
    1:     gBrowser.removeEventListener("load", OnDocumentLoad, true);
    1: }
    1: 
    1: function ReadTopManifest(aFileURL)
    1: {
    1:     gURLs = new Array();
 3639:     var url = gIOService.newURI(aFileURL, null, null);
    1:     if (!url || !url.schemeIs("file"))
    1:         throw "Expected a file URL for the manifest.";
    1:     ReadManifest(url);
    1: }
    1: 
26052: // Note: If you materially change the reftest manifest parsing,
26052: // please keep the parser in print-manifest-dirs.py in sync.
    1: function ReadManifest(aURL)
    1: {
    1:     var listURL = aURL.QueryInterface(CI.nsIFileURL);
    1: 
 2300:     var secMan = CC[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
 2300:                      .getService(CI.nsIScriptSecurityManager);
 2300: 
    1:     var fis = CC[NS_LOCALFILEINPUTSTREAM_CONTRACTID].
    1:                   createInstance(CI.nsIFileInputStream);
    1:     fis.init(listURL.file, -1, -1, false);
    1:     var lis = fis.QueryInterface(CI.nsILineInputStream);
    1: 
16457:     // Build the sandbox for fails-if(), etc., condition evaluation.
    1:     var sandbox = new Components.utils.Sandbox(aURL.spec);
24547:     var xr = CC[NS_XREAPPINFO_CONTRACTID].getService(CI.nsIXULRuntime);
24547:     sandbox.MOZ_WIDGET_TOOLKIT = xr.widgetToolkit;
29396:     sandbox.xulRuntime = {widgetToolkit: xr.widgettoolkit, OS: xr.OS};
29396: 
29396:     // xr.XPCOMABI throws exception for configurations without full ABI support (mobile builds on ARM)
29396:     try {
29396:       sandbox.XPCOMABI = xr.XPCOMABI;
29396:     } catch(e) {}
29396: 
16457:     var hh = CC[NS_NETWORK_PROTOCOL_CONTRACTID_PREFIX + "http"].
16457:                  getService(CI.nsIHttpProtocolHandler);
16457:     sandbox.http = {};
16457:     for each (var prop in [ "userAgent", "appName", "appVersion",
16457:                             "vendor", "vendorSub", "vendorComment",
16457:                             "product", "productSub", "productComment",
16457:                             "platform", "oscpu", "language", "misc" ])
16457:         sandbox.http[prop] = hh[prop];
23822:     // see if we have the test plugin available,
23822:     // and set a sandox prop accordingly
23822:     sandbox.haveTestPlugin = false;
23822:     for (var i = 0; i < navigator.mimeTypes.length; i++) {
23822:         if (navigator.mimeTypes[i].type == "application/x-test" &&
23822:             navigator.mimeTypes[i].enabledPlugin != null &&
23822:             navigator.mimeTypes[i].enabledPlugin.name == "Test Plug-in") {
23822:             sandbox.haveTestPlugin = true;
23822:             break;
23822:         }
23822:     }
    1: 
    1:     var line = {value:null};
    1:     var lineNo = 0;
    1:     do {
    1:         var more = lis.readLine(line);
    1:         ++lineNo;
    1:         var str = line.value;
 9563:         if (str.charAt(0) == "#")
    1:             continue; // entire line was a comment
 9563:         var i = str.search(/\s+#/);
 9563:         if (i >= 0)
 9563:             str = str.substring(0, i);
    1:         // strip leading and trailing whitespace
    1:         str = str.replace(/^\s*/, '').replace(/\s*$/, '');
    1:         if (!str || str == "")
    1:             continue;
    1:         var items = str.split(/\s+/); // split on whitespace
    1: 
    1:         var expected_status = EXPECTED_PASS;
23486:         var minAsserts = 0;
23486:         var maxAsserts = 0;
23486:         while (items[0].match(/^(fails|random|skip|asserts)/)) {
    1:             var item = items.shift();
    1:             var stat;
    1:             var cond;
 1277:             var m = item.match(/^(fails|random|skip)-if(\(.*\))$/);
    1:             if (m) {
    1:                 stat = m[1];
    1:                 // Note: m[2] contains the parentheses, and we want them.
    1:                 cond = Components.utils.evalInSandbox(m[2], sandbox);
 1277:             } else if (item.match(/^(fails|random|skip)$/)) {
    1:                 stat = item;
    1:                 cond = true;
23486:             } else if ((m = item.match(/^asserts\((\d+)(-\d+)?\)$/))) {
23486:                 cond = false;
23486:                 minAsserts = Number(m[1]);
23486:                 maxAsserts = (m[2] == undefined) ? minAsserts
23486:                                                  : Number(m[2].substring(1));
23486:             } else if ((m = item.match(/^asserts-if\((.*?),(\d+)(-\d+)?\)$/))) {
23486:                 cond = false;
23486:                 if (Components.utils.evalInSandbox("(" + m[1] + ")", sandbox)) {
23486:                     minAsserts = Number(m[2]);
23486:                     maxAsserts =
23486:                       (m[3] == undefined) ? minAsserts
23486:                                           : Number(m[3].substring(1));
23486:                 }
    1:             } else {
    1:                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
    1:             }
    1: 
    1:             if (cond) {
    1:                 if (stat == "fails") {
    1:                     expected_status = EXPECTED_FAIL;
    1:                 } else if (stat == "random") {
    1:                     expected_status = EXPECTED_RANDOM;
 1277:                 } else if (stat == "skip") {
 1277:                     expected_status = EXPECTED_DEATH;
    1:                 }
    1:             }
    1:         }
    1: 
23486:         if (minAsserts > maxAsserts) {
23486:             throw "Bad range in manifest file " + aURL.spec + " line " + lineNo;
23486:         }
23486: 
21530:         var runHttp = false;
21530:         var httpDepth;
21530:         if (items[0] == "HTTP") {
21530:             runHttp = true;
21530:             httpDepth = 0;
 3639:             items.shift();
21530:         } else if (items[0].match(/HTTP\(\.\.(\/\.\.)*\)/)) {
21530:             // Accept HTTP(..), HTTP(../..), HTTP(../../..), etc.
21530:             runHttp = true;
21530:             httpDepth = (items[0].length - 5) / 3;
21530:             items.shift();
21530:         }
 3639: 
    1:         if (items[0] == "include") {
 3639:             if (items.length != 2 || runHttp)
    1:                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
 3639:             var incURI = gIOService.newURI(items[1], null, listURL);
 2300:             secMan.checkLoadURI(aURL, incURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 2300:             ReadManifest(incURI);
 6614:         } else if (items[0] == "load") {
 6614:             if (expected_status == EXPECTED_PASS)
 6614:                 expected_status = EXPECTED_LOAD;
 6614:             if (items.length != 2 ||
 6614:                 (expected_status != EXPECTED_LOAD &&
 6614:                  expected_status != EXPECTED_DEATH))
 6614:                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
 6614:             var [testURI] = runHttp
21530:                             ? ServeFiles(aURL, httpDepth,
 6614:                                          listURL.file.parent, [items[1]])
 6614:                             : [gIOService.newURI(items[1], null, listURL)];
 6614:             var prettyPath = runHttp
 6614:                            ? gIOService.newURI(items[1], null, listURL).spec
 6614:                            : testURI.spec;
 6614:             secMan.checkLoadURI(aURL, testURI,
 6614:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 6614:             gURLs.push( { equal: true /* meaningless */,
 6614:                           expected: expected_status,
 6614:                           prettyPath: prettyPath,
23486:                           minAsserts: minAsserts,
23486:                           maxAsserts: maxAsserts,
22863:                           url1: testURI,
22863:                           url2: null } );
    1:         } else if (items[0] == "==" || items[0] == "!=") {
    1:             if (items.length != 3)
    1:                 throw "Error in manifest file " + aURL.spec + " line " + lineNo;
 3639:             var [testURI, refURI] = runHttp
21530:                                   ? ServeFiles(aURL, httpDepth,
 6614:                                                listURL.file.parent, [items[1], items[2]])
 3639:                                   : [gIOService.newURI(items[1], null, listURL),
 3639:                                      gIOService.newURI(items[2], null, listURL)];
 3639:             var prettyPath = runHttp
 3639:                            ? gIOService.newURI(items[1], null, listURL).spec
 3639:                            : testURI.spec;
 2300:             secMan.checkLoadURI(aURL, testURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 2300:             secMan.checkLoadURI(aURL, refURI,
 2300:                                 CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
    1:             gURLs.push( { equal: (items[0] == "=="),
    1:                           expected: expected_status,
 3639:                           prettyPath: prettyPath,
23486:                           minAsserts: minAsserts,
23486:                           maxAsserts: maxAsserts,
22863:                           url1: testURI,
22863:                           url2: refURI } );
    1:         } else {
    1:             throw "Error in manifest file " + aURL.spec + " line " + lineNo;
    1:         }
    1:     } while (more);
    1: }
    1: 
22863: function AddURIUseCount(uri)
22490: {
22490:     if (uri == null)
22490:         return;
22490: 
22863:     var spec = uri.spec;
22490:     if (spec in gURIUseCounts) {
22490:         gURIUseCounts[spec]++;
22490:     } else {
22490:         gURIUseCounts[spec] = 1;
22490:     }
22490: }
22490: 
22490: function BuildUseCounts()
22490: {
22490:     gURIUseCounts = {};
22490:     for (var i = 0; i < gURLs.length; ++i) {
22490:         var expected = gURLs[i].expected;
22490:         if (expected != EXPECTED_DEATH && expected != EXPECTED_LOAD) {
22863:             AddURIUseCount(gURLs[i].url1);
22863:             AddURIUseCount(gURLs[i].url2);
22490:         }
22490:     }
22490: }
22490: 
21530: function ServeFiles(manifestURL, depth, directory, files)
 3639: {
21530:     // Allow serving a tree that's an ancestor of the directory containing
21530:     // the files so that they can use resources in ../ (etc.).
21530:     var dirPath = "/";
21530:     while (depth > 0) {
21530:         dirPath = "/" + directory.leafName + dirPath;
21530:         directory = directory.parent;
21530:         --depth;
21530:     }
21530: 
 3639:     gCount++;
25347:     var path = "/" + Date.now() + "/" + gCount;
21530:     gServer.registerDirectory(path + "/", directory);
 3639: 
 3639:     var secMan = CC[NS_SCRIPTSECURITYMANAGER_CONTRACTID]
 3639:                      .getService(CI.nsIScriptSecurityManager);
 3639: 
21530:     var testbase = gIOService.newURI("http://localhost:" + HTTP_SERVER_PORT +
21530:                                          path + dirPath,
21529:                                      null, null);
21529: 
 6614:     function FileToURI(file)
 6614:     {
21529:         // Only serve relative URIs via the HTTP server, not absolute
21529:         // ones like about:blank.
21529:         var testURI = gIOService.newURI(file, null, testbase);
 6614: 
 3639:         // XXX necessary?  manifestURL guaranteed to be file, others always HTTP
 3639:         secMan.checkLoadURI(manifestURL, testURI,
 3639:                             CI.nsIScriptSecurityManager.DISALLOW_SCRIPT);
 3639: 
 6614:         return testURI;
 6614:     }
 6614: 
 6614:     return files.map(FileToURI);
 3639: }
 3639: 
    1: function StartCurrentTest()
    1: {
 1277:     // make sure we don't run tests that are expected to kill the browser
 1277:     while (gURLs.length > 0 && gURLs[0].expected == EXPECTED_DEATH) {
22153:         ++gTestResults.Skip;
22863:         dump("REFTEST TEST-KNOWN-FAIL | " + gURLs[0].url1.spec + " | (SKIP)\n");
 1277:         gURLs.shift();
 1277:     }
 1277: 
16063:     if (gURLs.length == 0) {
    1:         DoneTests();
16063:     }
16063:     else {
16063:         var currentTest = gTotalTests - gURLs.length;
16347:         document.title = "reftest: " + currentTest + " / " + gTotalTests +
16063:             " (" + Math.floor(100 * (currentTest / gTotalTests)) + "%)";
22863:         StartCurrentURI(1);
    1:     }
16063: }
    1: 
    1: function StartCurrentURI(aState)
    1: {
14795:     gCurrentTestStartTime = Date.now();
24771:     if (gFailureTimeout != null) {
24771:         dump("REFTEST TEST-UNEXPECTED-FAIL | " +
24771:              "| program error managing timeouts\n");
24771:         ++gTestResults.Exception;
24771:     }
29396:     gFailureTimeout = setTimeout(LoadFailed, gLoadTimeout);
20632:     gFailureReason = "timed out waiting for onload to fire";
    1: 
    1:     gState = aState;
20632:     gCurrentURL = gURLs[0]["url" + aState].spec;
22490: 
23486:     if (gURICanvases[gCurrentURL] && gURLs[0].expected != EXPECTED_LOAD &&
23486:         gURLs[0].maxAsserts == 0) {
22490:         // Pretend the document loaded --- DocumentLoaded will notice
22490:         // there's already a canvas for this URL
22490:         setTimeout(DocumentLoaded, 0);
22490:     } else {
20632:         gBrowser.loadURI(gCurrentURL);
    1:     }
22490: }
    1: 
    1: function DoneTests()
    1: {
14795:     dump("REFTEST FINISHED: Slowest test took " + gSlowestTestTime +
14795:          "ms (" + gSlowestTestURL + ")\n");
14795: 
22153:     dump("REFTEST INFO | Result summary:\n");
22712:     var count = gTestResults.Pass + gTestResults.LoadOnly;
22712:     dump("REFTEST INFO | Successful: " + count + " (" +
22712:          gTestResults.Pass + " pass, " +
22712:          gTestResults.LoadOnly + " load only)\n");
22712:     count = gTestResults.Exception + gTestResults.FailedLoad +
23486:             gTestResults.UnexpectedFail + gTestResults.UnexpectedPass +
23486:             gTestResults.AssertionUnexpected +
23486:             gTestResults.AssertionUnexpectedFixed;
22712:     dump("REFTEST INFO | Unexpected: " + count + " (" +
22712:          gTestResults.UnexpectedFail + " unexpected fail, " +
22712:          gTestResults.UnexpectedPass + " unexpected pass, " +
23486:          gTestResults.AssertionUnexpected + " unexpected asserts, " +
23486:          gTestResults.AssertionUnexpectedFixed + " unexpected fixed asserts, " +
22712:          gTestResults.FailedLoad + " failed load, " +
22712:          gTestResults.Exception + " exception)\n");
23486:     count = gTestResults.KnownFail + gTestResults.AssertionKnown +
23486:             gTestResults.Random + gTestResults.Skip;
22712:     dump("REFTEST INFO | Known problems: " + count + " (" +
22712:          gTestResults.KnownFail + " known fail, " +
23486:          gTestResults.AssertionKnown + " known asserts, " +
22712:          gTestResults.Random + " random, " +
22712:          gTestResults.Skip + " skipped)\n");
22153: 
22490:     dump("REFTEST INFO | Total canvas count = " + gRecycledCanvases.length + "\n");
22490: 
27361:     function onStopped() {
27361:         dump("REFTEST INFO | Quitting...\n");
27361:         goQuitApplication();
27361:     }
 3639:     if (gServer)
27361:         gServer.stop(onStopped);
27361:     else
27361:         onStopped();
    1: }
    1: 
20512: function setupZoom(contentRootElement) {
31265:     if (!contentRootElement || !contentRootElement.hasAttribute('reftest-zoom'))
20512:         return;
20512:     gBrowser.markupDocumentViewer.fullZoom =
20512:         contentRootElement.getAttribute('reftest-zoom');
20512: }
20512: 
20512: function resetZoom() {
20512:     gBrowser.markupDocumentViewer.fullZoom = 1.0;
    1: }
    1: 
    1: function OnDocumentLoad(event)
    1: {
    1:     if (event.target != gBrowser.contentDocument)
    1:         // Ignore load events for subframes.
    1:         return;
    1: 
24889:     if (gClearingForAssertionCheck &&
24889:         gBrowser.contentDocument.location.href == BLANK_URL_FOR_CLEARING) {
23486:         DoAssertionCheck();
23486:         return;
23486:     }
23486: 
20632:     if (gBrowser.contentDocument.location.href != gCurrentURL)
20632:         // Ignore load events for previous documents.
20632:         return;
20632: 
  156:     var contentRootElement = gBrowser.contentDocument.documentElement;
  156: 
    1:     function shouldWait() {
  156:         // use getAttribute because className works differently in HTML and SVG
31265:         return contentRootElement &&
31265:                contentRootElement.hasAttribute('class') &&
  156:                contentRootElement.getAttribute('class').split(/\s+/)
    1:                                  .indexOf("reftest-wait") != -1;
    1:     }
    1: 
    1:     function doPrintMode() {
  156:         // use getAttribute because className works differently in HTML and SVG
31265:         return contentRootElement &&
31265:                contentRootElement.hasAttribute('class') &&
  156:                contentRootElement.getAttribute('class').split(/\s+/)
    1:                                  .indexOf("reftest-print") != -1;
    1:     }
    1: 
18874:     function setupPrintMode() {
    1:        var PSSVC = Components.classes["@mozilla.org/gfx/printsettings-service;1"]
    1:                   .getService(Components.interfaces.nsIPrintSettingsService);
    1:        var ps = PSSVC.newPrintSettings;
    1:        ps.paperWidth = 5;
    1:        ps.paperHeight = 3;
13309: 
13309:        // Override any os-specific unwriteable margins
13309:        ps.unwriteableMarginTop = 0;
13309:        ps.unwriteableMarginLeft = 0;
13309:        ps.unwriteableMarginBottom = 0;
13309:        ps.unwriteableMarginRight = 0;
13309: 
    1:        ps.headerStrLeft = "";
    1:        ps.headerStrCenter = "";
    1:        ps.headerStrRight = "";
    1:        ps.footerStrLeft = "";
    1:        ps.footerStrCenter = "";
    1:        ps.footerStrRight = "";
    1:        gBrowser.docShell.contentViewer.setPageMode(true, ps);
    1:     }
    1: 
20512:     setupZoom(contentRootElement);
20512: 
18874:     if (shouldWait()) {
18874:         // The testcase will let us know when the test snapshot should be made.
18874:         // Register a mutation listener to know when the 'reftest-wait' class
18874:         // gets removed.
20632:         gFailureReason = "timed out waiting for reftest-wait to be removed (after onload fired)"
23350: 
23350:         var stopAfterPaintReceived = false;
23350:         var currentDoc = gBrowser.contentDocument;
23350:         var utils = gBrowser.contentWindow.QueryInterface(CI.nsIInterfaceRequestor)
23350:             .getInterface(CI.nsIDOMWindowUtils);
23350: 
23350:         function FlushRendering() {
23350:             // Flush pending restyles and reflows
23350:             contentRootElement.getBoundingClientRect();
23350:             // Flush out invalidation
23350:             utils.processUpdates();
23350:         }
23350: 
23407:         function WhenMozAfterPaintFlushed(continuation) {
23407:             if (utils.isMozAfterPaintPending) {
23407:                 function handler() {
23407:                     gBrowser.removeEventListener("MozAfterPaint", handler, false);
23407:                     continuation();
23407:                 }
23407:                 gBrowser.addEventListener("MozAfterPaint", handler, false);
23407:             } else {
23407:                 continuation();
23407:             }
23407:         }
23407: 
23350:         function AfterPaintListener(event) {
23350:             if (event.target.document != currentDoc) {
23350:                 // ignore paint events for subframes or old documents in the window.
23350:                 // Invalidation in subframes will cause invalidation in the main document anyway.
23350:                 return;
23350:             }
23350: 
23350:             FlushRendering();
23350:             UpdateCurrentCanvasForEvent(event);
23350:             // When stopAfteraintReceived is set, we can stop --- but we should keep going as long
23350:             // as there are paint events coming (there probably shouldn't be any, but it doesn't
23350:             // hurt to process them)
23350:             if (stopAfterPaintReceived && !utils.isMozAfterPaintPending) {
23350:                 FinishWaitingForTestEnd();
23350:             }
23350:         }
23350: 
23350:         function FinishWaitingForTestEnd() {
23350:             gBrowser.removeEventListener("MozAfterPaint", AfterPaintListener, false);
23350:             setTimeout(DocumentLoaded, 0);
23350:         }
23350: 
23350:         function AttrModifiedListener() {
23350:             if (shouldWait())
23350:                 return;
23350: 
23350:             // We don't want to be notified again
23350:             contentRootElement.removeEventListener("DOMAttrModified", AttrModifiedListener, false);
24032:             // Wait for the next return-to-event-loop before continuing to flush rendering and
24032:             // check isMozAfterPaintPending --- for example, the attribute may have been modified
24032:             // in an subdocument's load event handler, in which case we need load event processing
24032:             // to complete and unsuppress painting before we check isMozAfterPaintPending.
24032:             setTimeout(AttrModifiedListenerContinuation, 0);
24032:         }
24032: 
24032:         function AttrModifiedListenerContinuation() {
18874:             if (doPrintMode())
18874:                 setupPrintMode();
23350:             FlushRendering();
23350: 
23350:             if (utils.isMozAfterPaintPending) {
23350:                 // Wait for the last invalidation to have happened and been snapshotted before
23350:                 // we stop the test
23350:                 stopAfterPaintReceived = true;
23350:             } else {
23350:                 // Nothing to wait for, so stop now
23350:                 FinishWaitingForTestEnd();
18874:             }
23350:         }
23350: 
23350:         function StartWaitingForTestEnd() {
23350:             FlushRendering();
23350: 
23407:             function continuation() {
23350:                 gBrowser.addEventListener("MozAfterPaint", AfterPaintListener, false);
23350:                 contentRootElement.addEventListener("DOMAttrModified", AttrModifiedListener, false);
23350: 
23350:                 // Take a snapshot of the window in its current state
23350:                 InitCurrentCanvasWithSnapshot();
23350: 
23350:                 if (!shouldWait()) {
23350:                     // reftest-wait was already removed (during the interval between OnDocumentLoaded
23350:                     // calling setTimeout(StartWaitingForTestEnd,0) below, and this function
23350:                     // actually running), so let's fake a direct notification of the attribute
23350:                     // change.
23350:                     AttrModifiedListener();
23350:                     return;
23350:                 }
23350: 
23350:                 // Notify the test document that now is a good time to test some invalidation
23350:                 var notification = document.createEvent("Events");
23350:                 notification.initEvent("MozReftestInvalidate", true, false);
23350:                 contentRootElement.dispatchEvent(notification);
23350:             }
23407:             WhenMozAfterPaintFlushed(continuation);
23407:         }
23350: 
23350:         // After this load event has finished being dispatched, painting is normally
23350:         // unsuppressed, which invalidates the entire window. So ensure
23350:         // StartWaitingForTestEnd runs after that invalidation has been requested.
23350:         setTimeout(StartWaitingForTestEnd, 0);
18874:     } else {
18874:         if (doPrintMode())
18874:             setupPrintMode();
18874: 
    1:         // Since we can't use a bubbling-phase load listener from chrome,
    1:         // this is a capturing phase listener.  So do setTimeout twice, the
    1:         // first to get us after the onload has fired in the content, and
    1:         // the second to get us after any setTimeout(foo, 0) in the content.
    1:         setTimeout(setTimeout, 0, DocumentLoaded, 0);
    1:     }
    1: }
    1: 
22863: function UpdateCanvasCache(url, canvas)
22490: {
22863:     var spec = url.spec;
22490: 
22490:     --gURIUseCounts[spec];
22490:     if (gURIUseCounts[spec] == 0) {
22490:         ReleaseCanvas(canvas);
22490:         delete gURICanvases[spec];
22490:     } else if (gURIUseCounts[spec] > 0) {
22490:         gURICanvases[spec] = canvas;
22490:     } else {
22490:         throw "Use counts were computed incorrectly";
22490:     }
22490: }
22490: 
23350: function InitCurrentCanvasWithSnapshot()
23350: {
23350:     gCurrentCanvas = AllocateCanvas();
23350: 
23350:     /* XXX This needs to be rgb(255,255,255) because otherwise we get
23350:      * black bars at the bottom of every test that are different size
23350:      * for the first test and the rest (scrollbar-related??) */
23350:     var win = gBrowser.contentWindow;
23350:     var ctx = gCurrentCanvas.getContext("2d");
23350:     var scale = gBrowser.markupDocumentViewer.fullZoom;
23350:     ctx.save();
23350:     // drawWindow always draws one canvas pixel for each CSS pixel in the source
23350:     // window, so scale the drawing to show the zoom (making each canvas pixel be one
23350:     // device pixel instead)
23350:     ctx.scale(scale, scale);
23350:     ctx.drawWindow(win, win.scrollX, win.scrollY,
23350:                    Math.ceil(gCurrentCanvas.width / scale),
23350:                    Math.ceil(gCurrentCanvas.height / scale),
23350:                    "rgb(255,255,255)");
23350:     ctx.restore();
23350: }
23350: 
23350: function roundTo(x, fraction)
23350: {
23350:     return Math.round(x/fraction)*fraction;
23350: }
23350: 
23350: function UpdateCurrentCanvasForEvent(event)
23350: {
23350:     var win = gBrowser.contentWindow;
23350:     var ctx = gCurrentCanvas.getContext("2d");
23350:     var scale = gBrowser.markupDocumentViewer.fullZoom;
23350: 
23350:     var rectList = event.clientRects;
23350:     for (var i = 0; i < rectList.length; ++i) {
23350:         var r = rectList[i];
23350:         // Set left/top/right/bottom to "device pixel" boundaries
23350:         var left = Math.floor(roundTo(r.left*scale, 0.001))/scale;
23350:         var top = Math.floor(roundTo(r.top*scale, 0.001))/scale;
23350:         var right = Math.ceil(roundTo(r.right*scale, 0.001))/scale;
23350:         var bottom = Math.ceil(roundTo(r.bottom*scale, 0.001))/scale;
23350: 
23350:         ctx.save();
23350:         ctx.scale(scale, scale);
23350:         ctx.translate(left, top);
23350:         ctx.drawWindow(win, left + win.scrollX, top + win.scrollY,
23350:                        right - left, bottom - top,
23350:                        "rgb(255,255,255)");
23350:         ctx.restore();
23350:     }
23350: }
23350: 
    1: function DocumentLoaded()
    1: {
14795:     // Keep track of which test was slowest, and how long it took.
14795:     var currentTestRunTime = Date.now() - gCurrentTestStartTime;
14795:     if (currentTestRunTime > gSlowestTestTime) {
14795:         gSlowestTestTime = currentTestRunTime;
22490:         gSlowestTestURL  = gCurrentURL;
14795:     }
14795: 
    1:     clearTimeout(gFailureTimeout);
20632:     gFailureReason = null;
24771:     gFailureTimeout = null;
 4221: 
 6614:     if (gURLs[0].expected == EXPECTED_LOAD) {
22153:         ++gTestResults.LoadOnly;
15963:         dump("REFTEST TEST-PASS | " + gURLs[0].prettyPath + " | (LOAD ONLY)\n");
23486:         FinishTestItem();
 6614:         return;
 6614:     }
 6614: 
22863:     if (gURICanvases[gCurrentURL]) {
23350:         gCurrentCanvas = gURICanvases[gCurrentURL];
23350:     } else if (gCurrentCanvas == null) {
23350:         InitCurrentCanvasWithSnapshot();
23350:     }
23350:     if (gState == 1) {
23350:         gCanvas1 = gCurrentCanvas;
22490:     } else {
23350:         gCanvas2 = gCurrentCanvas;
22490:     }
23350:     gCurrentCanvas = null;
20512: 
20512:     resetZoom();
 4221: 
    1:     switch (gState) {
22863:         case 1:
 4221:             // First document has been loaded.
 4221:             // Proceed to load the second document.
    1: 
22863:             StartCurrentURI(2);
    1:             break;
22863:         case 2:
    1:             // Both documents have been loaded. Compare the renderings and see
    1:             // if the comparison result matches the expected result specified
    1:             // in the manifest.
    1: 
 4221:             // number of different pixels
 4221:             var differences;
    1:             // whether the two renderings match:
 4221:             var equal;
 4221: 
22197:             if (gWindowUtils) {
22863:                 differences = gWindowUtils.compareCanvases(gCanvas1, gCanvas2, {});
 4221:                 equal = (differences == 0);
 4221:             } else {
 4221:                 differences = -1;
22863:                 var k1 = gCanvas1.toDataURL();
22863:                 var k2 = gCanvas2.toDataURL();
 4221:                 equal = (k1 == k2);
 4221:             }
 4221: 
    1:             // whether the comparison result matches what is in the manifest
    1:             var test_passed = (equal == gURLs[0].equal);
    1:             // what is expected on this platform (PASS, FAIL, or RANDOM)
    1:             var expected = gURLs[0].expected;
    1: 
28335:             // Not 'const ...' because of 'EXPECTED_*' value dependency.
    1:             var outputs = {};
15963:             const randomMsg = "(EXPECTED RANDOM)";
22153:             outputs[EXPECTED_PASS] = {
22153:               true:  {s: "TEST-PASS"                  , n: "Pass"},
22153:               false: {s: "TEST-UNEXPECTED-FAIL"       , n: "UnexpectedFail"}
22153:             };
22153:             outputs[EXPECTED_FAIL] = {
22153:               true:  {s: "TEST-UNEXPECTED-PASS"       , n: "UnexpectedPass"},
22153:               false: {s: "TEST-KNOWN-FAIL"            , n: "KnownFail"}
22153:             };
22153:             outputs[EXPECTED_RANDOM] = {
22153:               true:  {s: "TEST-PASS" + randomMsg      , n: "Random"},
22153:               false: {s: "TEST-KNOWN-FAIL" + randomMsg, n: "Random"}
22153:             };
    1: 
22153:             ++gTestResults[outputs[expected][test_passed].n];
22153: 
22153:             var result = "REFTEST " + outputs[expected][test_passed].s + " | " +
22153:                          gURLs[0].prettyPath + " | "; // the URL being tested
    1:             if (!gURLs[0].equal) {
    1:                 result += "(!=) ";
    1:             }
    1:             dump(result + "\n");
22153: 
 8332:             if (!test_passed && expected == EXPECTED_PASS ||
 8332:                 test_passed && expected == EXPECTED_FAIL) {
 8401:                 if (!equal) {
22863:                     dump("REFTEST   IMAGE 1 (TEST): " + gCanvas1.toDataURL() + "\n");
22863:                     dump("REFTEST   IMAGE 2 (REFERENCE): " + gCanvas2.toDataURL() + "\n");
 4221:                     dump("REFTEST number of differing pixels: " + differences + "\n");
 8332:                 } else {
22863:                     dump("REFTEST   IMAGE: " + gCanvas1.toDataURL() + "\n");
 8332:                 }
    1:             }
    1: 
22863:             UpdateCanvasCache(gURLs[0].url1, gCanvas1);
22863:             UpdateCanvasCache(gURLs[0].url2, gCanvas2);
22490: 
23486:             FinishTestItem();
    1:             break;
    1:         default:
 3639:             throw "Unexpected state.";
    1:     }
    1: }
    1: 
    1: function LoadFailed()
    1: {
24771:     gFailureTimeout = null;
22153:     ++gTestResults.FailedLoad;
15963:     dump("REFTEST TEST-UNEXPECTED-FAIL | " +
20632:          gURLs[0]["url" + gState].spec + " | " + gFailureReason + "\n");
23486:     FinishTestItem();
23486: }
23486: 
23486: function FinishTestItem()
23486: {
24889:     // Replace document with BLANK_URL_FOR_CLEARING in case there are
23486:     // assertions when unloading.
23486:     gClearingForAssertionCheck = true;
24889:     gBrowser.loadURI(BLANK_URL_FOR_CLEARING);
23486: }
23486: 
23486: function DoAssertionCheck()
23486: {
23486:     gClearingForAssertionCheck = false;
23486: 
23625:     if (gDebug.isDebugBuild) {
23486:         // TEMPORARILY DISABLING ASSERTION CHECKS FOR NOW.  TO RE-ENABLE,
23486:         // USE COMMENTED LINE TO REPLACE FOLLOWING ONE.
23486:         // var newAssertionCount = gDebug.assertionCount;
23486:         var newAssertionCount = 0;
23486:         var numAsserts = newAssertionCount - gAssertionCount;
23486:         gAssertionCount = newAssertionCount;
23486: 
23486:         var minAsserts = gURLs[0].minAsserts;
23486:         var maxAsserts = gURLs[0].maxAsserts;
23486: 
23486:         var expectedAssertions = "expected " + minAsserts;
23486:         if (minAsserts != maxAsserts) {
23486:             expectedAssertions += " to " + maxAsserts;
23486:         }
23486:         expectedAssertions += " assertions";
23486: 
23486:         if (numAsserts < minAsserts) {
23486:             ++gTestResults.AssertionUnexpectedFixed;
23486:             dump("REFTEST TEST-UNEXPECTED-PASS | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " is less than " +
23486:                  expectedAssertions + "\n");
23486:         } else if (numAsserts > maxAsserts) {
23486:             ++gTestResults.AssertionUnexpected;
23486:             dump("REFTEST TEST-UNEXPECTED-FAIL | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " is more than " +
23486:                  expectedAssertions + "\n");
23486:         } else if (numAsserts != 0) {
23486:             ++gTestResults.AssertionKnown;
23486:             dump("REFTEST TEST-KNOWN-FAIL | " + gURLs[0].prettyPath +
23486:                  " | assertion count " + numAsserts + " matches " +
23486:                  expectedAssertions + "\n");
23486:         }
23625:     }
23486: 
23486:     // And start the next test.
    1:     gURLs.shift();
    1:     StartCurrentTest();
    1: }
