   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
   1:  *
   1:  * ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is the Mozilla browser.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1999
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Paul Sandoz (paul.sandoz@sun.com)
   1:  *   Bill Haneman (bill.haneman@sun.com)
   1:  *   John Gaunt (jgaunt@netscape.com)
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "nsISupports.idl"
   1: 
   1: interface nsIAccessible;
   1: 
3151: [scriptable, uuid(dc13d184-a6df-45a1-92f0-5476fdaebc5a)]
   1: interface nsIAccessibleTable : nsISupports
   1: {
3151:   readonly attribute nsIAccessible       caption;
3151:   readonly attribute AString             summary;
   1:   readonly attribute long                columns;
   1:   readonly attribute nsIAccessibleTable  columnHeader;
   1:   readonly attribute long                rows;
   1:   readonly attribute nsIAccessibleTable  rowHeader;
   1: 
   1:   /**
1370:    * Returns the accessible object at the specified row and column in the table.
1370:    * If both row and column index are valid then the corresponding accessible
1370:    * object is returned that represents the requested cell regardless of whether
1370:    * the cell is currently visible (on the screen).
1370:    *
1370:    * @param row - The row index for which to retrieve the cell.
1370:    * @param column - The column index for which to retrieve the cell.
   1:    */
   1:   nsIAccessible cellRefAt(in long row, in long column);
   1: 
   1:     /**
   1:       * get an index
   1:       */
   1:   long getIndexAt (in long row, in long column);
   1:   long getColumnAtIndex (in long index);
   1:   long getRowAtIndex (in long index);
1370: 
1370:   /**
1370:    * Returns the number of columns occupied by the accessible object
1370:    * at the specified row and column in the table. The result differs from 1
1370:    * if the specified cell spans multiple columns.
1370:    *
1370:    * @param row - Row index of the accessible for which to return
1370:    *              the column extent.
1370:    * @param column - Column index of the accessible for which to return
1370:    *                 the column extent.
1370:    */
   1:   long getColumnExtentAt(in long row, in long column);
1370: 
1370:   /**
1370:    * Returns the number of rows occupied by the accessible oject
1370:    * at the specified row and column in the table. The result differs from 1
1370:    * if the specified cell spans multiple rows.
1370:    *
1370:    * @param row  - Row index of the accessible for which to return
1370:    *               the column extent.
1370:    * @param column - Column index of the accessible for which to return
1370:    *                 the column extent.
1370:    */
   1:   long getRowExtentAt(in long row, in long column);
   1: 
1370:   /**
1370:    * Returns the description text of the specified column in the table.
1370:    * @param column - The index of the column for which to retrieve
1370:    *                 the description.
1370:    */
   1:   AString getColumnDescription(in long column);
1370: 
1370:   /**
1370:    * Returns the description text of the specified row in the table.
1370:    * @param row - The index of the row for which to retrieve the description.
1370:    */
   1:   AString getRowDescription(in long row);
   1: 
1370:   /**
1370:    * Returns a boolean value indicating whether the specified column is
1370:    * completely selected.
1370:    *
1370:    * @param column  - Index of the column for which to determine whether it is
1370:    *                   selected.
1370:    */
   1:   boolean isColumnSelected(in long column);
1370: 
1370:   /**
1370:    * Returns a boolean value indicating whether the specified row is completely
1370:    * selected.
1370:    *
1370:    * @param row - Index of the row for which to determine whether it is
1370:    *              selected.
1370:    */
   1:   boolean isRowSelected(in  long row);
1370: 
1370:   /**
1370:    * Returns a boolean value indicating whether the specified cell is selected.
1370:    *
1370:    * @param row - Index of the row for the cell to determine whether it is
1370:    *              selected.
1370:    * @param column - Index of the column for the cell to determine whether it
1370:    *                 is selected.
1370:    */
   1:   boolean isCellSelected(in long row, in long column);
   1: 
   1:   /**
1370:    * Returns a list of column indexes currently selected.
1370:    *
1370:    * @param columnsSize - Length of array
1370:    * @param columns - Array of indexes of selected columns
1370:    */
1370:   void getSelectedColumns(out unsigned long columnsSize,
1370:                           [retval, array, size_is(columnsSize)] out long columns);
1370: 
1370:   /**
1370:    * Returns a list of row indexes currently selected.
1370:    *
1370:    * @param rowsSize - Length of array
1370:    * @param rows - Array of indexes of selected rows
1370:    */
1370:   void getSelectedRows(out unsigned long rowsSize,
1370:                        [retval, array, size_is(rowsSize)] out long rows);
1370: 
1370:   /**
1370:    * Selects a row and unselects all previously selected rows.
1370:    *
1370:    * @param row - Index of the row to be selected.
1370:    */
1370:   void selectRow(in long row);
1370: 
1370:   /**
1370:    * Selects a column and unselects all previously selected columns.
1370:    *
1370:    * @param column - Index of the column to be selected.
1370:    */
1370:   void selectColumn(in long column);
1370: 
1370:   /**
1370:    * Unselects one row, leaving other selected rows selected (if any).
1370:    *
1370:    * @param row  - Index of the row to be selected.
1370:   */
1370:   void unselectRow(in long row);
1370: 
1370:   /**
1370:    * Unselects one column, leaving other selected columns selected (if any).
1370:    *
1370:    * @param column - Index of the column to be selected.
1370:    */
1370:   void unselectColumn(in long column);
1370: 
1370:   /**
1370:    * Use heuristics to determine if table is most likely used for layout.
   1:    */
   1:   boolean isProbablyForLayout();
   1: };
1370: 
