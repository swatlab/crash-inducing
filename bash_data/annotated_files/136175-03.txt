     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: /* base class #1 for rendering objects that have child lists */
     1: 
     1: #ifndef nsContainerFrame_h___
     1: #define nsContainerFrame_h___
     1: 
113981: #include "mozilla/Attributes.h"
     1: #include "nsSplittableFrame.h"
     1: #include "nsFrameList.h"
     1: #include "nsLayoutUtils.h"
 30781: #include "nsAutoPtr.h"
     1: 
     1: // Option flags for ReflowChild() and FinishReflowChild()
     1: // member functions
     1: #define NS_FRAME_NO_MOVE_VIEW         0x0001
     1: #define NS_FRAME_NO_MOVE_FRAME        (0x0002 | NS_FRAME_NO_MOVE_VIEW)
     1: #define NS_FRAME_NO_SIZE_VIEW         0x0004
     1: #define NS_FRAME_NO_VISIBILITY        0x0008
136026: // Only applies to ReflowChild: if true, invalidate the child if it's
136026: // being moved
136026: #define NS_FRAME_INVALIDATE_ON_MOVE   0x0010 
136175: // Only applies to ReflowChild; if true, don't delete the next-in-flow, even
136175: // if the reflow is fully complete.
136175: #define NS_FRAME_NO_DELETE_NEXT_IN_FLOW_CHILD 0x0020
     1: 
  4006: class nsOverflowContinuationTracker;
132146: namespace mozilla {
132146: class FramePropertyTable;
132146: }
  4006: 
 86231: // Some macros for container classes to do sanity checking on
 86231: // width/height/x/y values computed during reflow.
 86231: // NOTE: AppUnitsPerCSSPixel value hardwired here to remove the
 86231: // dependency on nsDeviceContext.h.  It doesn't matter if it's a
 86231: // little off.
 86231: #ifdef DEBUG
 86231: #define CRAZY_W (1000000*60)
 86231: #define CRAZY_H CRAZY_W
 86231: 
 86231: #define CRAZY_WIDTH(_x) (((_x) < -CRAZY_W) || ((_x) > CRAZY_W))
 86231: #define CRAZY_HEIGHT(_y) (((_y) < -CRAZY_H) || ((_y) > CRAZY_H))
 86231: #endif
 86231: 
     1: /**
     1:  * Implementation of a container frame.
     1:  */
     1: class nsContainerFrame : public nsSplittableFrame
     1: {
     1: public:
 32423:   NS_DECL_FRAMEARENA_HELPERS
 32841:   NS_DECL_QUERYFRAME_TARGET(nsContainerFrame)
 32841:   NS_DECL_QUERYFRAME
 32423: 
     1:   // nsIFrame overrides
     1:   NS_IMETHOD Init(nsIContent* aContent,
     1:                   nsIFrame*   aParent,
     1:                   nsIFrame*   aPrevInFlow);
 77154:   NS_IMETHOD SetInitialChildList(ChildListID  aListID,
113981:                                  nsFrameList& aChildList) MOZ_OVERRIDE;
 77154:   NS_IMETHOD AppendFrames(ChildListID  aListID,
 30941:                           nsFrameList& aFrameList);
 77154:   NS_IMETHOD InsertFrames(ChildListID aListID,
     1:                           nsIFrame* aPrevFrame,
 30941:                           nsFrameList& aFrameList);
 77154:   NS_IMETHOD RemoveFrame(ChildListID aListID,
113981:                          nsIFrame* aOldFrame) MOZ_OVERRIDE;
     1: 
113981:   virtual const nsFrameList& GetChildList(ChildListID aList) const MOZ_OVERRIDE;
113981:   virtual void GetChildLists(nsTArray<ChildList>* aLists) const MOZ_OVERRIDE;
113981:   virtual void DestroyFrom(nsIFrame* aDestructRoot) MOZ_OVERRIDE;
113981:   virtual void ChildIsDirty(nsIFrame* aChild) MOZ_OVERRIDE;
     1: 
 79445:   virtual bool IsLeaf() const;
113981:   virtual bool PeekOffsetNoAmount(bool aForward, int32_t* aOffset) MOZ_OVERRIDE;
108991:   virtual bool PeekOffsetCharacter(bool aForward, int32_t* aOffset,
113981:                                      bool aRespectClusters = true) MOZ_OVERRIDE;
     1:   
     1: #ifdef DEBUG
114372:   NS_IMETHOD List(FILE* out, int32_t aIndent, uint32_t aFlags = 0) const MOZ_OVERRIDE;
     1: #endif  
     1: 
     1:   // nsContainerFrame methods
 22195: 
 22195:   /**
 86231:    * Helper method to create next-in-flows if necessary. If aFrame
 86231:    * already has a next-in-flow then this method does
 86231:    * nothing. Otherwise, a new continuation frame is created and
 86231:    * linked into the flow. In addition, the new frame is inserted
 86231:    * into the principal child list after aFrame.
 86231:    * @note calling this method on a block frame is illegal. Use
 86231:    * nsBlockFrame::CreateContinuationFor() instead.
 86231:    * @param aNextInFlowResult will contain the next-in-flow
 86231:    *        <b>if and only if</b> one is created. If a next-in-flow already
106838:    *        exists aNextInFlowResult is set to nullptr.
 86231:    * @return NS_OK if a next-in-flow already exists or is successfully created.
 86231:    */
 86231:   nsresult CreateNextInFlow(nsPresContext* aPresContext,
 86231:                             nsIFrame*       aFrame,
 86231:                             nsIFrame*&      aNextInFlowResult);
 86231: 
 86231:   /**
 22195:    * Delete aNextInFlow and its next-in-flows.
 22195:    * @param aDeletingEmptyFrames if set, then the reflow for aNextInFlow's
 22195:    * content was complete before aNextInFlow, so aNextInFlow and its
 22195:    * next-in-flows no longer map any real content.
 22195:    */
     1:   virtual void DeleteNextInFlowChild(nsPresContext* aPresContext,
 22195:                                      nsIFrame*      aNextInFlow,
 79445:                                      bool           aDeletingEmptyFrames);
     1: 
 68656:   /**
 68656:    * Helper method to wrap views around frames. Used by containers
 68656:    * under special circumstances (can be used by leaf frames as well)
 68656:    */
 68656:   static nsresult CreateViewForFrame(nsIFrame* aFrame,
 79445:                                      bool aForce);
 68656: 
     1:   // Positions the frame's view based on the frame's origin
     1:   static void PositionFrameView(nsIFrame* aKidFrame);
     1: 
 68656:   static nsresult ReparentFrameView(nsPresContext* aPresContext,
 68656:                                     nsIFrame*       aChildFrame,
 68656:                                     nsIFrame*       aOldParentFrame,
 68656:                                     nsIFrame*       aNewParentFrame);
 68656: 
 68656:   static nsresult ReparentFrameViewList(nsPresContext*     aPresContext,
 68656:                                         const nsFrameList& aChildFrameList,
 68656:                                         nsIFrame*          aOldParentFrame,
 68656:                                         nsIFrame*          aNewParentFrame);
 68656: 
     1:   // Set the view's size and position after its frame has been reflowed.
     1:   //
     1:   // Flags:
     1:   // NS_FRAME_NO_MOVE_VIEW - don't position the frame's view. Set this if you
     1:   //    don't want to automatically sync the frame and view
     1:   // NS_FRAME_NO_SIZE_VIEW - don't size the view
     1:   static void SyncFrameViewAfterReflow(nsPresContext* aPresContext,
     1:                                        nsIFrame*       aFrame,
127357:                                        nsView*        aView,
 55021:                                        const nsRect&   aVisualOverflowArea,
108991:                                        uint32_t        aFlags = 0);
     1: 
 31401:   // Syncs properties to the top level view and window, like transparency and
 31401:   // shadow.
 31401:   static void SyncWindowProperties(nsPresContext*       aPresContext,
 31401:                                    nsIFrame*            aFrame,
127357:                                    nsView*             aView,
106923:                                    nsRenderingContext*  aRC = nullptr);
 31401: 
     1:   // Sets the view's attributes from the frame style.
     1:   // - visibility
     1:   // - clip
     1:   // Call this when one of these styles changes or when the view has just
     1:   // been created.
     1:   // @param aStyleContext can be null, in which case the frame's style context is used
     1:   static void SyncFrameViewProperties(nsPresContext*  aPresContext,
     1:                                       nsIFrame*        aFrame,
     1:                                       nsStyleContext*  aStyleContext,
127357:                                       nsView*         aView,
108991:                                       uint32_t         aFlags = 0);
     1: 
106923:   /**
106923:    * Converts the minimum and maximum sizes given in inner window app units to
106923:    * outer window device pixel sizes and assigns these constraints to the widget.
106923:    *
106923:    * @param aPresContext pres context
106923:    * @param aWidget widget for this frame
106923:    * @param minimum size of the window in app units
106923:    * @param maxmimum size of the window in app units
106923:    */
106923:   static void SetSizeConstraints(nsPresContext* aPresContext,
106923:                                  nsIWidget* aWidget,
106923:                                  const nsSize& aMinSize,
106923:                                  const nsSize& aMaxSize);
106923: 
     1:   // Used by both nsInlineFrame and nsFirstLetterFrame.
 68481:   void DoInlineIntrinsicWidth(nsRenderingContext *aRenderingContext,
     1:                               InlineIntrinsicWidthData *aData,
     1:                               nsLayoutUtils::IntrinsicWidthType aType);
     1: 
     1:   /**
     1:    * This is the CSS block concept of computing 'auto' widths, which most
     1:    * classes derived from nsContainerFrame want.
     1:    */
 68481:   virtual nsSize ComputeAutoSize(nsRenderingContext *aRenderingContext,
     1:                                  nsSize aCBSize, nscoord aAvailableWidth,
     1:                                  nsSize aMargin, nsSize aBorder,
113981:                                  nsSize aPadding, bool aShrinkWrap) MOZ_OVERRIDE;
     1: 
     1:   /**
     1:    * Invokes the WillReflow() function, positions the frame and its view (if
     1:    * requested), and then calls Reflow(). If the reflow succeeds and the child
     1:    * frame is complete, deletes any next-in-flows using DeleteNextInFlowChild()
     1:    *
     1:    * Flags:
     1:    * NS_FRAME_NO_MOVE_VIEW - don't position the frame's view. Set this if you
     1:    *    don't want to automatically sync the frame and view
  3107:    * NS_FRAME_NO_MOVE_FRAME - don't move the frame. aX and aY are ignored in this
     1:    *    case. Also implies NS_FRAME_NO_MOVE_VIEW
     1:    */
     1:   nsresult ReflowChild(nsIFrame*                      aKidFrame,
     1:                        nsPresContext*                 aPresContext,
     1:                        nsHTMLReflowMetrics&           aDesiredSize,
     1:                        const nsHTMLReflowState&       aReflowState,
     1:                        nscoord                        aX,
     1:                        nscoord                        aY,
108991:                        uint32_t                       aFlags,
  4006:                        nsReflowStatus&                aStatus,
106838:                        nsOverflowContinuationTracker* aTracker = nullptr);
     1: 
     1:   /**
     1:    * The second half of frame reflow. Does the following:
     1:    * - sets the frame's bounds
     1:    * - sizes and positions (if requested) the frame's view. If the frame's final
     1:    *   position differs from the current position and the frame itself does not
     1:    *   have a view, then any child frames with views are positioned so they stay
     1:    *   in sync
     1:    * - sets the view's visibility, opacity, content transparency, and clip
     1:    * - invoked the DidReflow() function
     1:    *
     1:    * Flags:
     1:    * NS_FRAME_NO_MOVE_FRAME - don't move the frame. aX and aY are ignored in this
     1:    *    case. Also implies NS_FRAME_NO_MOVE_VIEW
     1:    * NS_FRAME_NO_MOVE_VIEW - don't position the frame's view. Set this if you
     1:    *    don't want to automatically sync the frame and view
     1:    * NS_FRAME_NO_SIZE_VIEW - don't size the frame's view
     1:    */
     1:   static nsresult FinishReflowChild(nsIFrame*                  aKidFrame,
     1:                                     nsPresContext*             aPresContext,
     1:                                     const nsHTMLReflowState*   aReflowState,
  9771:                                     const nsHTMLReflowMetrics& aDesiredSize,
     1:                                     nscoord                    aX,
     1:                                     nscoord                    aY,
108991:                                     uint32_t                   aFlags);
     1: 
     1:   
     1:   static void PositionChildViews(nsIFrame* aFrame);
     1: 
  4006:   // ==========================================================================
  4006:   /* Overflow containers are continuation frames that hold overflow. They
  4006:    * are created when the frame runs out of computed height, but still has
  4006:    * too much content to fit in the availableHeight. The parent creates a
  4006:    * continuation as usual, but marks it as NS_FRAME_IS_OVERFLOW_CONTAINER
  4006:    * and adds it to its next-in-flow's overflow container list, either by
  4006:    * adding it directly or by putting it in its own excess overflow containers
  4006:    * list (to be drained by the next-in-flow when it calls
  4006:    * ReflowOverflowContainerChildren). The parent continues reflow as if
  4006:    * the frame was complete once it ran out of computed height, but returns
  4006:    * either an NS_FRAME_NOT_COMPLETE or NS_FRAME_OVERFLOW_INCOMPLETE reflow
  4006:    * status to request a next-in-flow. The parent's next-in-flow is then
  4006:    * responsible for calling ReflowOverflowContainerChildren to (drain and)
  4006:    * reflow these overflow continuations. Overflow containers do not affect
  4006:    * other frames' size or position during reflow (but do affect their
  4006:    * parent's overflow area).
  4006:    *
  4006:    * Overflow container continuations are different from normal continuations
  4006:    * in that
  4006:    *   - more than one child of the frame can have its next-in-flow broken
  4006:    *     off and pushed into the frame's next-in-flow
  4006:    *   - new continuations may need to be spliced into the middle of the list
  4006:    *     or deleted continuations slipped out
  4006:    *     e.g. A, B, C are all fixed-size containers on one page, all have
  4006:    *      overflow beyond availableHeight, and content is dynamically added
  4006:    *      and removed from B
  4006:    * As a result, it is not possible to simply prepend the new continuations
  4006:    * to the old list as with the overflowProperty mechanism. To avoid
  4006:    * complicated list splicing, the code assumes only one overflow containers
  4006:    * list exists for a given frame: either its own overflowContainersProperty
  4006:    * or its prev-in-flow's excessOverflowContainersProperty, not both.
  4006:    *
  4006:    * The nsOverflowContinuationTracker helper class should be used for tracking
  4006:    * overflow containers and adding them to the appropriate list.
  4006:    * See nsBlockFrame::Reflow for a sample implementation.
  4006:    */
  4006: 
  4006:   friend class nsOverflowContinuationTracker;
  4006: 
  4006:   /**
  4006:    * Reflow overflow container children. They are invisible to normal reflow
  4006:    * (i.e. don't affect sizing or placement of other children) and inherit
  4006:    * width and horizontal position from their prev-in-flow.
  4006:    *
  4006:    * This method
  4006:    *   1. Pulls excess overflow containers from the prev-in-flow and adds
  4006:    *      them to our overflow container list
  4006:    *   2. Reflows all our overflow container kids
  4006:    *   3. Expands aOverflowRect as necessary to accomodate these children.
  4006:    *   4. Sets aStatus's NS_FRAME_OVERFLOW_IS_INCOMPLETE flag (along with
  4006:    *      NS_FRAME_REFLOW_NEXTINFLOW as necessary) if any overflow children
  4006:    *      are incomplete and
  4006:    *   5. Prepends a list of their continuations to our excess overflow
  4006:    *      container list, to be drained into our next-in-flow when it is
  4006:    *      reflowed.
  4006:    *
  4006:    * The caller is responsible for tracking any new overflow container
  4006:    * continuations it makes, removing them from its child list, and
  4006:    * making sure they are stored properly in the overflow container lists.
  4006:    * The nsOverflowContinuationTracker helper class should be used for this.
  4006:    *
  4006:    * (aFlags just gets passed through to ReflowChild)
  4006:    */
  4006:   nsresult ReflowOverflowContainerChildren(nsPresContext*           aPresContext,
  4006:                                            const nsHTMLReflowState& aReflowState,
 55023:                                            nsOverflowAreas&         aOverflowRects,
108991:                                            uint32_t                 aFlags,
  4006:                                            nsReflowStatus&          aStatus);
  4006: 
  4006:   /**
114181:    * Move any frames on our overflow list to the end of our principal list.
114181:    * @return true if there were any overflow frames
114181:    */
114181:   virtual bool DrainSelfOverflowList();
114181: 
114181:   /**
  4006:    * Removes aChild without destroying it and without requesting reflow.
  4006:    * Continuations are not affected. Checks the primary and overflow
  4006:    * or overflow containers and excess overflow containers lists, depending
  4006:    * on whether the NS_FRAME_IS_OVERFLOW_CONTAINER flag is set. Does not
  4006:    * check any other auxiliary lists.
  4006:    * Returns NS_ERROR_UNEXPECTED if we failed to remove aChild.
  4006:    * Returns other error codes if we failed to put back a proptable list.
  4006:    * If aForceNormal is true, only checks the primary and overflow lists
  4006:    * even when the NS_FRAME_IS_OVERFLOW_CONTAINER flag is set.
  4006:    */
  4006:   virtual nsresult StealFrame(nsPresContext* aPresContext,
  4006:                               nsIFrame*      aChild,
 79445:                               bool           aForceNormal = false);
  4006: 
  4006:   /**
 32841:    * Removes the next-siblings of aChild without destroying them and without
 32841:    * requesting reflow. Checks the principal and overflow lists (not
 32841:    * overflow containers / excess overflow containers). Does not check any
 32841:    * other auxiliary lists.
106838:    * @param aChild a child frame or nullptr
 32841:    * @return If aChild is non-null, the next-siblings of aChild, if any.
 32841:    *         If aChild is null, all child frames on the principal list, if any.
 32841:    */
 32841:   nsFrameList StealFramesAfter(nsIFrame* aChild);
 32841: 
 32841:   /**
  4006:    * Add overflow containers to the display list
  4006:    */
  4006:   void DisplayOverflowContainers(nsDisplayListBuilder*   aBuilder,
  4006:                                  const nsRect&           aDirtyRect,
  4006:                                  const nsDisplayListSet& aLists);
  4006: 
     1:   /**
     1:    * Builds display lists for the children. The background
     1:    * of each child is placed in the Content() list (suitable for inline
     1:    * children and other elements that behave like inlines,
     1:    * but not for in-flow block children of blocks).  DOES NOT
     1:    * paint the background/borders/outline of this frame. This should
     1:    * probably be avoided and eventually removed. It's currently here
     1:    * to emulate what nsContainerFrame::Paint did.
     1:    */
132778:   virtual void BuildDisplayList(nsDisplayListBuilder*   aBuilder,
     1:                                 const nsRect&           aDirtyRect,
132778:                                 const nsDisplayListSet& aLists) MOZ_OVERRIDE;
     1: 
 39965:   // Destructor function for the proptable-stored framelists
 39965:   static void DestroyFrameList(void* aPropertyValue)
 39965:   {
 39965:     if (aPropertyValue) {
 39965:       static_cast<nsFrameList*>(aPropertyValue)->Destroy();
 39965:     }
 39965:   }
 39965: 
 39965:   NS_DECLARE_FRAME_PROPERTY(OverflowProperty, DestroyFrameList)
 39965:   NS_DECLARE_FRAME_PROPERTY(OverflowContainersProperty, DestroyFrameList)
 39965:   NS_DECLARE_FRAME_PROPERTY(ExcessOverflowContainersProperty, DestroyFrameList)
 39965: 
     1: protected:
     1:   nsContainerFrame(nsStyleContext* aContext) : nsSplittableFrame(aContext) {}
     1:   ~nsContainerFrame();
     1: 
     1:   /**
120780:    * Helper for DestroyFrom. DestroyAbsoluteFrames is called before
120780:    * destroying frames on lists that can contain placeholders.
120780:    * Derived classes must do that too, if they destroy such frame lists.
120780:    * See nsBlockFrame::DestroyFrom for an example.
120780:    */
120780:   void DestroyAbsoluteFrames(nsIFrame* aDestructRoot);
120780: 
120780:   /**
     1:    * Builds a display list for non-block children that behave like
     1:    * inlines. This puts the background of each child into the
     1:    * Content() list (suitable for inline children but not for
     1:    * in-flow block children of blocks).
     1:    * @param aForcePseudoStack forces each child into a pseudo-stacking-context
     1:    * so its background and all other display items (except for positioned
     1:    * display items) go into the Content() list.
     1:    */
132778:   void BuildDisplayListForNonBlockChildren(nsDisplayListBuilder*   aBuilder,
     1:                                            const nsRect&           aDirtyRect,
     1:                                            const nsDisplayListSet& aLists,
108991:                                            uint32_t                aFlags = 0);
     1: 
 86231:   /**
 86231:    * A version of BuildDisplayList that use DISPLAY_CHILD_INLINE.
 86231:    * Intended as a convenience for derived classes.
 86231:    */
132778:   void BuildDisplayListForInline(nsDisplayListBuilder*   aBuilder,
 86231:                                  const nsRect&           aDirtyRect,
 86231:                                  const nsDisplayListSet& aLists) {
132777:     DisplayBorderBackgroundOutline(aBuilder, aLists);
132777:     BuildDisplayListForNonBlockChildren(aBuilder, aDirtyRect, aLists,
 86231:                                         DISPLAY_CHILD_INLINE);
 86231:   }
 86231: 
  4006: 
  4006:   // ==========================================================================
  4006:   /* Overflow Frames are frames that did not fit and must be pulled by
  4006:    * our next-in-flow during its reflow. (The same concept for overflow
  4006:    * containers is called "excess frames". We should probably make the
  4006:    * names match.)
  4006:    */
  4006: 
     1:   /**
 30781:    * Get the frames on the overflow list.  Can return null if there are no
 30781:    * overflow frames.  The caller does NOT take ownership of the list; it's
 30781:    * still owned by this frame.  A non-null return value indicates that the
 30781:    * list is nonempty.
     1:    */
 30781:   inline nsFrameList* GetOverflowFrames() const;
 30781: 
     1:   /**
 30781:    * As GetOverflowFrames, but removes the overflow frames property.  The
 30781:    * caller is responsible for deleting nsFrameList and either passing
 30781:    * ownership of the frames to someone else or destroying the frames.  A
 30781:    * non-null return value indicates that the list is nonempty.  The
 30781:    * recommended way to use this function it to assign its return value
 30781:    * into an nsAutoPtr.
 30781:    */
 30781:   inline nsFrameList* StealOverflowFrames();
 30781:   
 30781:   /**
 30781:    * Set the overflow list.  aOverflowFrames must not be an empty list.
     1:    */
 72505:   void SetOverflowFrames(nsPresContext*  aPresContext,
 30781:                          const nsFrameList& aOverflowFrames);
 30781: 
 30781:   /**
 30781:    * Destroy the overflow list and any frames that are on it.
 50444:    * Calls DestructFrom() insead of Destruct() on the frames if
 50444:    * aDestructRoot is non-null.
 30781:    */
 36647:   void DestroyOverflowList(nsPresContext* aPresContext,
 50444:                            nsIFrame*      aDestructRoot);
     1: 
     1:   /**
     1:    * Moves any frames on both the prev-in-flow's overflow list and the
     1:    * receiver's overflow to the receiver's child list.
     1:    *
106838:    * Resets the overlist pointers to nullptr, and updates the receiver's child
     1:    * count and content mapping.
     1:    *
 80486:    * @return true if any frames were moved and false otherwise
     1:    */
 79445:   bool MoveOverflowToChildList(nsPresContext* aPresContext);
     1: 
     1:   /**
     1:    * Push aFromChild and its next siblings to the next-in-flow. Change
     1:    * the geometric parent of each frame that's pushed. If there is no
     1:    * next-in-flow the frames are placed on the overflow list (and the
     1:    * geometric parent is left unchanged).
     1:    *
     1:    * Updates the next-in-flow's child count. Does <b>not</b> update the
     1:    * pusher's child count.
     1:    *
     1:    * @param   aFromChild the first child frame to push. It is disconnected from
     1:    *            aPrevSibling
     1:    * @param   aPrevSibling aFromChild's previous sibling. Must not be null.
     1:    *            It's an error to push a parent's first child frame
     1:    */
     1:   void PushChildren(nsPresContext*  aPresContext,
     1:                     nsIFrame*       aFromChild,
     1:                     nsIFrame*       aPrevSibling);
     1: 
  4006:   // ==========================================================================
  4006:   /*
  4006:    * Convenience methods for nsFrameLists stored in the
  4006:    * PresContext's proptable
  4006:    */
  4006: 
  4006:   /**
  4006:    * Get the PresContext-stored nsFrameList named aPropID for this frame.
  4006:    * May return null.
  4006:    */
  4006:   nsFrameList* GetPropTableFrames(nsPresContext*                 aPresContext,
 39965:                                   const FramePropertyDescriptor* aProperty) const;
  4006: 
  4006:   /**
  4006:    * Remove and return the PresContext-stored nsFrameList named aPropID for
  4006:    * this frame. May return null.
  4006:    */
  4006:   nsFrameList* RemovePropTableFrames(nsPresContext*                 aPresContext,
 39965:                                      const FramePropertyDescriptor* aProperty);
  4006: 
  4006:   /**
  4006:    * Set the PresContext-stored nsFrameList named aPropID for this frame
  4006:    * to the given aFrameList, which must not be null.
  4006:    */
  4006:   nsresult SetPropTableFrames(nsPresContext*                 aPresContext,
  4006:                               nsFrameList*                   aFrameList,
 39965:                               const FramePropertyDescriptor* aProperty);
132146: 
132146:   /**
132146:    * Safely destroy the frames on the nsFrameList stored on aProp for this
132146:    * frame then remove the property and delete the frame list.
132146:    * Nothing happens if the property doesn't exist.
132146:    */
132146:   void SafelyDestroyFrameListProp(nsIFrame* aDestructRoot,
132146:                                   mozilla::FramePropertyTable* aPropTable,
132146:                                   const FramePropertyDescriptor* aProp);
132146: 
  4006:   // ==========================================================================
  4006: 
     1:   nsFrameList mFrames;
     1: };
     1: 
  6521: // ==========================================================================
  6521: /* The out-of-flow-related code below is for a hacky way of splitting
  6521:  * absolutely-positioned frames. Basically what we do is split the frame
  6521:  * in nsAbsoluteContainingBlock and pretend the continuation is an overflow
  6521:  * container. This isn't an ideal solution, but it lets us print the content
  6521:  * at least. See bug 154892.
  6521:  */
  6521: 
  6521: #define IS_TRUE_OVERFLOW_CONTAINER(frame)                      \
  6521:   (  (frame->GetStateBits() & NS_FRAME_IS_OVERFLOW_CONTAINER)  \
 32108:   && !( (frame->GetStateBits() & NS_FRAME_OUT_OF_FLOW) &&      \
107225:         frame->IsAbsolutelyPositioned()  )  )
  6521: //XXXfr This check isn't quite correct, because it doesn't handle cases
  6521: //      where the out-of-flow has overflow.. but that's rare.
  6521: //      We'll need to revisit the way abspos continuations are handled later
  6521: //      for various reasons, this detail is one of them. See bug 154892
  6521: 
  4006: /**
  4006:  * Helper class for tracking overflow container continuations during reflow.
  4006:  *
  4006:  * A frame is related to two sets of overflow containers: those that /are/
  4006:  * its own children, and those that are /continuations/ of its children.
  4006:  * This tracker walks through those continuations (the frame's NIF's children)
  4006:  * and their prev-in-flows (a subset of the frame's normal and overflow
  4006:  * container children) in parallel. It allows the reflower to synchronously
  4006:  * walk its overflow continuations while it loops through and reflows its
  4006:  * children. This makes it possible to insert new continuations at the correct
  4006:  * place in the overflow containers list.
  4006:  *
  4006:  * The reflower is expected to loop through its children in the same order it
  4006:  * looped through them the last time (if there was a last time).
  4006:  * For each child, the reflower should either
  4006:  *   - call Skip for the child if was not reflowed in this pass
  4006:  *   - call Insert for the overflow continuation if the child was reflowed
  4006:  *     but has incomplete overflow
  4006:  *   - call Finished for the child if it was reflowed in this pass but
  4006:  *     is either complete or has a normal next-in-flow. This call can
  4006:  *     be skipped if the child did not previously have an overflow
  4006:  *     continuation.
  4006:  */
  4006: class nsOverflowContinuationTracker {
  4006: public:
  4006:   /**
  4006:    * Initializes an nsOverflowContinuationTracker to help track overflow
  4006:    * continuations of aFrame's children. Typically invoked on 'this'.
  4006:    *
  6521:    * aWalkOOFFrames determines whether the walker skips out-of-flow frames
  6521:    * or skips non-out-of-flow frames.
  6521:    *
 80486:    * Don't set aSkipOverflowContainerChildren to false unless you plan
  4006:    * to walk your own overflow container children. (Usually they are handled
  6521:    * by calling ReflowOverflowContainerChildren.) aWalkOOFFrames is ignored
  6521:    * if aSkipOverflowContainerChildren is false.
  4006:    */
  4006:   nsOverflowContinuationTracker(nsPresContext*    aPresContext,
  4006:                                 nsContainerFrame* aFrame,
 79445:                                 bool              aWalkOOFFrames,
 79445:                                 bool              aSkipOverflowContainerChildren = true);
  4006:   /**
  4006:    * This function adds an overflow continuation to our running list and
  4006:    * sets its NS_FRAME_IS_OVERFLOW_CONTAINER flag.
  4006:    *
  4006:    * aReflowStatus should preferably be specific to the recently-reflowed
  4006:    * child and not influenced by any of its siblings' statuses. This
  4006:    * function sets the NS_FRAME_IS_DIRTY bit on aOverflowCont if it needs
  4006:    * to be reflowed. (Its need for reflow depends on changes to its
  4006:    * prev-in-flow, not to its parent--for whom it is invisible, reflow-wise.)
  4006:    *
  4006:    * The caller MUST disconnect the frame from its parent's child list
  4006:    * if it was not previously an NS_FRAME_IS_OVERFLOW_CONTAINER (because
  4006:    * StealFrame is much more inefficient than disconnecting in place
  4006:    * during Reflow, which the caller is able to do but we are not).
  4006:    *
  4006:    * The caller MUST NOT disconnect the frame from its parent's
  4006:    * child list if it is already an NS_FRAME_IS_OVERFLOW_CONTAINER.
  4006:    * (In this case we will disconnect and reconnect it ourselves.)
  4006:    */
  4006:   nsresult Insert(nsIFrame*       aOverflowCont,
  4006:                   nsReflowStatus& aReflowStatus);
  4006:   /**
  6521:    * This function must be called for each child that is reflowed
  6521:    * but no longer has an overflow continuation. (It may be called for
  6521:    * other children, but in that case has no effect.) It increments our
  4006:    * walker and makes sure we drop any dangling pointers to its
  4006:    * next-in-flow. This function MUST be called before stealing or
  4006:    * deleting aChild's next-in-flow.
  4006:    */
  4006:   void Finish(nsIFrame* aChild);
  4006: 
  4006:   /**
  4006:    * This function should be called for each child that isn't reflowed.
  4006:    * It increments our walker and sets the NS_FRAME_OVERFLOW_INCOMPLETE
  4006:    * reflow flag if it encounters an overflow continuation so that our
  4006:    * next-in-flow doesn't get prematurely deleted. It MUST be called on
  4006:    * each unreflowed child that has an overflow container continuation;
  4006:    * it MAY be called on other children, but it isn't necessary (doesn't
  4006:    * do anything).
  4006:    */
  4006:   void Skip(nsIFrame* aChild, nsReflowStatus& aReflowStatus)
  4006:   {
  4006:     NS_PRECONDITION(aChild, "null ptr");
  4006:     if (aChild == mSentry) {
  4006:       StepForward();
 15183:       NS_MergeReflowStatusInto(&aReflowStatus, NS_FRAME_OVERFLOW_INCOMPLETE);
  4006:     }
  4006:   }
  4006: 
  4006: private:
  4006: 
  4006:   void SetUpListWalker();
  4006:   void StepForward();
  4006: 
  4006:   /* We hold a pointer to either the next-in-flow's overflow containers list
  4006:      or, if that doesn't exist, our frame's excess overflow containers list.
  4006:      We need to make sure that we drop that pointer if the list becomes
  4006:      empty and is deleted elsewhere. */
  4006:   nsFrameList* mOverflowContList;
  4006:   /* We hold a pointer to the most recently-reflowed child that has an
  4006:      overflow container next-in-flow. We do this because it's a known
  4006:      good point; this pointer won't be deleted on us. We can use it to
  4006:      recover our place in the list. */
  4006:   nsIFrame* mPrevOverflowCont;
  4006:   /* This is a pointer to the next overflow container's prev-in-flow, which
  4006:      is (or should be) a child of our frame. When we hit this, we will need
  4006:      to increment this walker to the next overflow container. */
  4006:   nsIFrame* mSentry;
  4006:   /* Parent of all frames in mOverflowContList. If our mOverflowContList
 42242:      is an excessOverflowContainersProperty, or null, then this is our frame
 42242:      (the frame that was passed in to our constructor). Otherwise this is
 42242:      that frame's next-in-flow, and our mOverflowContList is mParent's
  4006:      overflowContainersProperty */
  4006:   nsContainerFrame* mParent;
  4006:   /* Tells SetUpListWalker whether or not to walk us past any continuations
  6521:      of overflow containers. aWalkOOFFrames is ignored when this is false. */
 79445:   bool mSkipOverflowContainerChildren;
  6521:   /* Tells us whether to pay attention to OOF frames or non-OOF frames */
 79445:   bool mWalkOOFFrames;
  4006: };
  4006: 
 30781: inline
 30781: nsFrameList*
 30781: nsContainerFrame::GetOverflowFrames() const
 30781: {
 30781:   nsFrameList* list =
 39965:     static_cast<nsFrameList*>(Properties().Get(OverflowProperty()));
 30781:   NS_ASSERTION(!list || !list->IsEmpty(), "Unexpected empty overflow list");
 30781:   return list;
 30781: }
 30781: 
 30781: inline
 30781: nsFrameList*
 30781: nsContainerFrame::StealOverflowFrames()
 30781: {
 30781:   nsFrameList* list =
 39965:     static_cast<nsFrameList*>(Properties().Remove(OverflowProperty()));
 30781:   NS_ASSERTION(!list || !list->IsEmpty(), "Unexpected empty overflow list");
 30781:   return list;
 30781: }
 30781: 
     1: #endif /* nsContainerFrame_h___ */
