31590: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
31590:  * ***** BEGIN LICENSE BLOCK *****
31590:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
31590:  *
31590:  * The contents of this file are subject to the Mozilla Public License Version
31590:  * 1.1 (the "License"); you may not use this file except in compliance with
31590:  * the License. You may obtain a copy of the License at
31590:  * http://www.mozilla.org/MPL/
31590:  *
31590:  * Software distributed under the License is distributed on an "AS IS" basis,
31590:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
31590:  * for the specific language governing rights and limitations under the
31590:  * License.
31590:  *
31590:  * The Original Code is Mozilla Corporation code.
31590:  *
36532:  * The Initial Developer of the Original Code is Mozilla Foundation.
31590:  * Portions created by the Initial Developer are Copyright (C) 2008-2009
31590:  * the Initial Developer. All Rights Reserved.
31590:  *
31590:  * Contributor(s):
31590:  *   Jonathan Kew <jfkthame@gmail.com>
31590:  *
31590:  * Alternatively, the contents of this file may be used under the terms of
31590:  * either the GNU General Public License Version 2 or later (the "GPL"), or
31590:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
31590:  * in which case the provisions of the GPL or the LGPL are applicable instead
31590:  * of those above. If you wish to allow use of your version of this file only
31590:  * under the terms of either the GPL or the LGPL, and not to allow others to
31590:  * use your version of this file under the terms of the MPL, indicate your
31590:  * decision by deleting the provisions above and replace them with the notice
31590:  * and other provisions required by the GPL or the LGPL. If you do not delete
31590:  * the provisions above, a recipient may use your version of this file under
31590:  * the terms of any one of the MPL, the GPL or the LGPL.
31590:  *
31590:  * ***** END LICENSE BLOCK ***** */
31590: 
31590: #ifndef GFXPLATFORMFONTLIST_H_
31590: #define GFXPLATFORMFONTLIST_H_
31590: 
31590: #include "nsDataHashtable.h"
31590: #include "nsRefPtrHashtable.h"
38060: #include "nsHashSets.h"
31590: 
31590: #include "gfxFontUtils.h"
31590: #include "gfxFont.h"
31590: #include "gfxPlatform.h"
31590: 
42480: #include "mozilla/FunctionTimer.h"
42480: 
31590: // gfxPlatformFontList is an abstract class for the global font list on the system;
31590: // concrete subclasses for each platform implement the actual interface to the system fonts.
31590: // This class exists because we cannot rely on the platform font-finding APIs to behave
31590: // in sensible/similar ways, particularly with rich, complex OpenType families,
31590: // so we do our own font family/style management here instead.
31590: 
31590: // Much of this is based on the old gfxQuartzFontCache, but adapted for use on all platforms.
31590: 
31590: class gfxPlatformFontList : protected gfxFontInfoLoader
31590: {
31590: public:
31590:     static gfxPlatformFontList* PlatformFontList() {
31590:         return sPlatformFontList;
31590:     }
31590: 
31590:     static nsresult Init() {
42480:         NS_TIME_FUNCTION;
42480: 
31590:         NS_ASSERTION(!sPlatformFontList, "What's this doing here?");
57104:         gfxPlatform::GetPlatform()->CreatePlatformFontList();
57104:         if (!sPlatformFontList) {
57104:             return NS_ERROR_OUT_OF_MEMORY;
57104:         }
31590:         return NS_OK;
31590:     }
31590: 
31590:     static void Shutdown() {
31590:         delete sPlatformFontList;
31590:         sPlatformFontList = nsnull;
31590:     }
31590: 
57104:     // initialize font lists
57104:     virtual nsresult InitFontList();
57104: 
38493:     void GetFontList (nsIAtom *aLangGroup,
31590:                       const nsACString& aGenericFamily,
31590:                       nsTArray<nsString>& aListOfFonts);
31590: 
31590:     virtual PRBool ResolveFontName(const nsAString& aFontName,
31590:                                    nsAString& aResolvedFontName);
31590: 
31590:     void UpdateFontList() { InitFontList(); }
31590: 
31590:     void ClearPrefFonts() { mPrefFonts.Clear(); }
31590: 
31590:     void GetFontFamilyList(nsTArray<nsRefPtr<gfxFontFamily> >& aFamilyArray);
31590: 
31590:     gfxFontEntry* FindFontForChar(const PRUint32 aCh, gfxFont *aPrevFont);
31590: 
43527:     // TODO: make this virtual, for lazily adding to the font list
31590:     gfxFontFamily* FindFamily(const nsAString& aFamily);
31590: 
31590:     gfxFontEntry* FindFontForFamily(const nsAString& aFamily, const gfxFontStyle* aStyle, PRBool& aNeedsBold);
31590: 
31590:     PRBool GetPrefFontFamilyEntries(eFontPrefLang aLangGroup, nsTArray<nsRefPtr<gfxFontFamily> > *array);
31590:     void SetPrefFontFamilyEntries(eFontPrefLang aLangGroup, nsTArray<nsRefPtr<gfxFontFamily> >& array);
31590: 
37618:     // name lookup table methods
37618: 
31590:     void AddOtherFamilyName(gfxFontFamily *aFamilyEntry, nsAString& aOtherFamilyName);
31590: 
37618:     void AddFullname(gfxFontEntry *aFontEntry, nsAString& aFullname);
37618: 
37618:     void AddPostscriptName(gfxFontEntry *aFontEntry, nsAString& aPostscriptName);
37618: 
37618:     PRBool NeedFullnamePostscriptNames() { return mNeedFullnamePostscriptNames; }
37618: 
31590:     // pure virtual functions, to be provided by concrete subclasses
31590: 
31590:     // get the system default font
31590:     virtual gfxFontEntry* GetDefaultFont(const gfxFontStyle* aStyle,
31590:                                          PRBool& aNeedsBold) = 0;
31590: 
31590:     // look up a font by name on the host platform
31590:     virtual gfxFontEntry* LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
31590:                                           const nsAString& aFontName) = 0;
31590: 
31590:     // create a new platform font from downloaded data (@font-face)
32808:     // this method is responsible to ensure aFontData is NS_Free()'d
36949:     virtual gfxFontEntry* MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
31590:                                            const PRUint8 *aFontData,
31590:                                            PRUint32 aLength) = 0;
31590: 
31590:     // get the standard family name on the platform for a given font name
36949:     // (platforms may override, eg Mac)
36949:     virtual PRBool GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName);
31590: 
31590: protected:
37618:     gfxPlatformFontList(PRBool aNeedFullnamePostscriptNames = PR_TRUE);
31590: 
31590:     static gfxPlatformFontList *sPlatformFontList;
31590: 
31590:     static PLDHashOperator FindFontForCharProc(nsStringHashKey::KeyType aKey,
31590:                                                nsRefPtr<gfxFontFamily>& aFamilyEntry,
31590:                                                void* userArg);
31590: 
31590:     // separate initialization for reading in name tables, since this is expensive
31590:     void InitOtherFamilyNames();
31590: 
37618:     static PLDHashOperator InitOtherFamilyNamesProc(nsStringHashKey::KeyType aKey,
37618:                                                     nsRefPtr<gfxFontFamily>& aFamilyEntry,
37618:                                                     void* userArg);
37618: 
37618:     // read in all fullname/Postscript names for all font faces
37618:     void InitFaceNameLists();
37618: 
37618:     static PLDHashOperator InitFaceNameListsProc(nsStringHashKey::KeyType aKey,
37618:                                                  nsRefPtr<gfxFontFamily>& aFamilyEntry,
37618:                                                  void* userArg);
37618: 
31590:     // commonly used fonts for which the name table should be loaded at startup
31590:     virtual void PreloadNamesList();
31590: 
37599:     // load the bad underline blacklist from pref.
37599:     void LoadBadUnderlineList();
31590: 
31590:     // explicitly set fixed-pitch flag for all faces
31590:     void SetFixedPitch(const nsAString& aFamilyName);
31590: 
31590:     void GenerateFontListKey(const nsAString& aKeyName, nsAString& aResult);
31590: 
31590:     static PLDHashOperator
31590:         HashEnumFuncForFamilies(nsStringHashKey::KeyType aKey,
31590:                                 nsRefPtr<gfxFontFamily>& aFamilyEntry,
31590:                                 void* aUserArg);
31590: 
31590:     // gfxFontInfoLoader overrides, used to load in font cmaps
31590:     virtual void InitLoader();
31590:     virtual PRBool RunLoader();
31590:     virtual void FinishLoader();
31590: 
31590:     // canonical family name ==> family entry (unique, one name per family entry)
31590:     nsRefPtrHashtable<nsStringHashKey, gfxFontFamily> mFontFamilies;
31590: 
31590:     // other family name ==> family entry (not unique, can have multiple names per
31590:     // family entry, only names *other* than the canonical names are stored here)
31590:     nsRefPtrHashtable<nsStringHashKey, gfxFontFamily> mOtherFamilyNames;
31590: 
43527:     // flag set after InitOtherFamilyNames is called upon first name lookup miss
43527:     PRPackedBool mOtherFamilyNamesInitialized;
43527: 
37618:     // flag set after fullname and Postcript name lists are populated
37618:     PRPackedBool mFaceNamesInitialized;
37618: 
37618:     // whether these are needed for a given platform
37618:     PRPackedBool mNeedFullnamePostscriptNames;
37618: 
37618:     // fullname ==> font entry (unique, one name per font entry)
37618:     nsRefPtrHashtable<nsStringHashKey, gfxFontEntry> mFullnames;
37618: 
37618:     // Postscript name ==> font entry (unique, one name per font entry)
37618:     nsRefPtrHashtable<nsStringHashKey, gfxFontEntry> mPostscriptNames;
37618: 
31590:     // cached pref font lists
31590:     // maps list of family names ==> array of family entries, one per lang group
31590:     nsDataHashtable<nsUint32HashKey, nsTArray<nsRefPtr<gfxFontFamily> > > mPrefFonts;
31590: 
31590:     // when system-wide font lookup fails for a character, cache it to skip future searches
31590:     gfxSparseBitSet mCodepointsWithNoFonts;
31590: 
31590:     // the family to use for U+FFFD fallback, to avoid expensive search every time
31590:     // on pages with lots of problems
31590:     nsString mReplacementCharFallbackFamily;
31590: 
38060:     nsStringHashSet mBadUnderlineFamilyNames;
37599: 
31590:     // data used as part of the font cmap loading process
31590:     nsTArray<nsRefPtr<gfxFontFamily> > mFontFamiliesToLoad;
31590:     PRUint32 mStartIndex;
31590:     PRUint32 mIncrement;
31590:     PRUint32 mNumFamilies;
31590: };
31590: 
31590: #endif /* GFXPLATFORMFONTLIST_H_ */
