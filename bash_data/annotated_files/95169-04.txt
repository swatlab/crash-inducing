39447: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
39447:  * ***** BEGIN LICENSE BLOCK *****
39447:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
39447:  *
39447:  * The contents of this file are subject to the Mozilla Public License Version
39447:  * 1.1 (the "License"); you may not use this file except in compliance with
39447:  * the License. You may obtain a copy of the License at
39447:  * http://www.mozilla.org/MPL/
39447:  *
39447:  * Software distributed under the License is distributed on an "AS IS" basis,
39447:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
39447:  * for the specific language governing rights and limitations under the
39447:  * License.
39447:  *
39447:  * The Original Code is Mozilla Foundation code.
39447:  *
39447:  * The Initial Developer of the Original Code is Mozilla Foundation.
39447:  * Portions created by the Initial Developer are Copyright (C) 2005-2010
39447:  * the Initial Developer. All Rights Reserved.
39447:  *
39447:  * Contributor(s):
39447:  *   Stuart Parmenter <stuart@mozilla.com>
39447:  *   Masayuki Nakano <masayuki@d-toybox.com>
39447:  *   John Daggett <jdaggett@mozilla.com>
39447:  *   Jonathan Kew <jfkthame@gmail.com>
39447:  *
39447:  * Alternatively, the contents of this file may be used under the terms of
39447:  * either the GNU General Public License Version 2 or later (the "GPL"), or
39447:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
39447:  * in which case the provisions of the GPL or the LGPL are applicable instead
39447:  * of those above. If you wish to allow use of your version of this file only
39447:  * under the terms of either the GPL or the LGPL, and not to allow others to
39447:  * use your version of this file under the terms of the MPL, indicate your
39447:  * decision by deleting the provisions above and replace them with the notice
39447:  * and other provisions required by the GPL or the LGPL. If you do not delete
39447:  * the provisions above, a recipient may use your version of this file under
39447:  * the terms of any one of the MPL, the GPL or the LGPL.
39447:  *
39447:  * ***** END LICENSE BLOCK ***** */
39447: 
39447: #ifndef GFX_GDIFONT_H
39447: #define GFX_GDIFONT_H
39447: 
39447: #include "gfxFont.h"
39447: #include "gfxGDIFontList.h"
39447: 
43527: #include "nsDataHashtable.h"
43527: #include "nsHashKeys.h"
43527: 
39447: #include "cairo.h"
39447: 
39447: class gfxGDIFont : public gfxFont
39447: {
39447: public:
39447:     gfxGDIFont(GDIFontEntry *aFontEntry,
39447:                const gfxFontStyle *aFontStyle,
79445:                bool aNeedsBold,
39447:                AntialiasOption anAAOption = kAntialiasDefault);
39447: 
39447:     virtual ~gfxGDIFont();
39447: 
46221:     HFONT GetHFONT() { if (!mMetrics) Initialize(); return mFont; }
39447: 
61083:     gfxFloat GetAdjustedSize() { if (!mMetrics) Initialize(); return mAdjustedSize; }
39447: 
39447:     cairo_font_face_t   *CairoFontFace() { return mFontFace; }
39447:     cairo_scaled_font_t *CairoScaledFont() { return mScaledFont; }
39447: 
39447:     /* overrides for the pure virtual methods in gfxFont */
39447:     virtual const gfxFont::Metrics& GetMetrics();
39447: 
39447:     virtual PRUint32 GetSpaceGlyph();
39447: 
79445:     virtual bool SetupCairoFont(gfxContext *aContext);
39447: 
72200:     /* override Measure to add padding for antialiasing */
72200:     virtual RunMetrics Measure(gfxTextRun *aTextRun,
72200:                                PRUint32 aStart, PRUint32 aEnd,
72200:                                BoundingBoxType aBoundingBoxType,
72200:                                gfxContext *aContextForTightBoundingBox,
72200:                                Spacing *aSpacing);
72200: 
39447:     /* required for MathML to suppress effects of ClearType "padding" */
39447:     virtual gfxFont* CopyWithAntialiasOption(AntialiasOption anAAOption);
39447: 
79445:     virtual bool ProvidesGlyphWidths() { return true; }
60118: 
60118:     // get hinted glyph width in pixels as 16.16 fixed-point value
61073:     virtual PRInt32 GetGlyphWidth(gfxContext *aCtx, PRUint16 aGID);
60118: 
93997:     virtual void SizeOfExcludingThis(nsMallocSizeOfFun aMallocSizeOf,
93997:                                      FontCacheSizes*   aSizes) const;
93997:     virtual void SizeOfIncludingThis(nsMallocSizeOfFun aMallocSizeOf,
93997:                                      FontCacheSizes*   aSizes) const;
93997: 
95169:     virtual FontType GetType() const { return FONT_TYPE_GDI; }
95169: 
60118: protected:
60118:     virtual void CreatePlatformShaper();
60118: 
39447:     /* override to check for uniscribe failure and fall back to GDI */
86693:     virtual bool ShapeWord(gfxContext *aContext,
86693:                            gfxShapedWord *aShapedWord,
39447:                            const PRUnichar *aString,
79445:                            bool aPreferPlatformShaping = false);
39447: 
41898:     void Initialize(); // creates metrics and Cairo fonts
39447: 
41898:     void FillLogFont(LOGFONTW& aLogFont, gfxFloat aSize);
39447: 
46221:     // mPlatformShaper is used for the GDI shaper, mUniscribeShaper
46221:     // for the Uniscribe version if needed
46221:     nsAutoPtr<gfxFontShaper>   mUniscribeShaper;
46221: 
39447:     HFONT                 mFont;
39447:     cairo_font_face_t    *mFontFace;
39447: 
41898:     Metrics              *mMetrics;
39447:     PRUint32              mSpaceGlyph;
41898: 
79445:     bool                  mNeedsBold;
43527: 
43527:     // cache of glyph widths in 16.16 fixed-point pixels
43527:     nsDataHashtable<nsUint32HashKey,PRInt32>    mGlyphWidths;
39447: };
39447: 
39447: #endif /* GFX_GDIFONT_H */
