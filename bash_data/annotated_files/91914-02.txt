21002: ////////////////////////////////////////////////////////////////////////////////
21002: // Object attributes.
21002: 
21002: /**
21002:  * Test object attributes.
21002:  *
29977:  * @param aAccOrElmOrID         [in] the accessible identifier
21002:  * @param aAttrs                [in] the map of expected object attributes
21002:  *                              (name/value pairs)
21002:  * @param aSkipUnexpectedAttrs  [in] points this function doesn't fail if
21002:  *                              unexpected attribute is encountered
21002:  */
23326: function testAttrs(aAccOrElmOrID, aAttrs, aSkipUnexpectedAttrs)
21002: {
29977:   testAttrsInternal(aAccOrElmOrID, aAttrs, aSkipUnexpectedAttrs);
21002: }
21002: 
29977: /**
29977:  * Test object attributes that must not be present.
29977:  *
29977:  * @param aAccOrElmOrID         [in] the accessible identifier
29977:  * @param aAbsentAttrs          [in] map of attributes that should not be
29977:  *                              present (name/value pairs)
29977:  */
32053: function testAbsentAttrs(aAccOrElmOrID, aAbsentAttrs)
29977: {
29977:   testAttrsInternal(aAccOrElmOrID, {}, true, aAbsentAttrs);
21002: }
21002: 
23326: /**
90500:  * Test CSS based object attributes.
90500:  */
90500: function testCSSAttrs(aID)
90500: {
90500:   var node = document.getElementById(aID);
90500:   var computedStyle = document.defaultView.getComputedStyle(node, "");
90500: 
90500:   var attrs = {
90500:     "display": computedStyle.display,
90500:     "text-align": computedStyle.textAlign,
90500:     "text-indent": computedStyle.textIndent,
90500:     "margin-left": computedStyle.marginLeft,
90500:     "margin-right": computedStyle.marginRight,
90500:     "margin-top": computedStyle.marginTop,
90500:     "margin-bottom": computedStyle.marginBottom
90500:   };
90500:   testAttrs(aID, attrs, true);
90500: }
90500: 
90500: /**
91914:  * Test the accessible that it doesn't have CSS-based object attributes.
91914:  */
91914: function testAbsentCSSAttrs(aID)
91914: {
91914:   var attrs = {
91914:     "display": "",
91914:     "text-align": "",
91914:     "text-indent": "",
91914:     "margin-left": "",
91914:     "margin-right": "",
91914:     "margin-top": "",
91914:     "margin-bottom": ""
91914:   };
91914:   testAbsentAttrs(aID, attrs);
91914: }
91914: 
91914: /**
36879:  * Test group object attributes (posinset, setsize and level) and
36879:  * nsIAccessible::groupPosition() method.
23326:  *
23326:  * @param aAccOrElmOrID  [in] the ID, DOM node or accessible
23326:  * @param aPosInSet      [in] the value of 'posinset' attribute
23326:  * @param aSetSize       [in] the value of 'setsize' attribute
23326:  * @param aLevel         [in, optional] the value of 'level' attribute
23326:  */
23326: function testGroupAttrs(aAccOrElmOrID, aPosInSet, aSetSize, aLevel)
23326: {
36879:   var acc = getAccessible(aAccOrElmOrID);
36879:   var levelObj = {}, posInSetObj = {}, setSizeObj = {};
36879:   acc.groupPosition(levelObj, setSizeObj, posInSetObj);
36879: 
36879:   if (aPosInSet && aSetSize) {
36879:     is(posInSetObj.value, aPosInSet,
36879:        "Wrong group position (posinset) for " + prettyName(aAccOrElmOrID));
36879:     is(setSizeObj.value, aSetSize,
36879:        "Wrong size of the group (setsize) for " + prettyName(aAccOrElmOrID));
36879: 
23326:     var attrs = {
23326:       "posinset": String(aPosInSet),
23326:       "setsize": String(aSetSize)
23326:     };
36879:     testAttrs(aAccOrElmOrID, attrs, true);
36879:   }
23326: 
36879:   if (aLevel) {
36879:     is(levelObj.value, aLevel,
36879:        "Wrong group level for " + prettyName(aAccOrElmOrID));
23326: 
36879:     var attrs = { "level" : String(aLevel) };
23326:     testAttrs(aAccOrElmOrID, attrs, true);
23326:   }
36879: }
23326: 
21002: ////////////////////////////////////////////////////////////////////////////////
21002: // Text attributes.
21002: 
21002: /**
21002:  * Test text attributes.
21002:  *
21002:  * @param aID                   [in] the ID of DOM element having text
21002:  *                              accessible
21002:  * @param aOffset               [in] the offset inside text accessible to fetch
21002:  *                              text attributes
21002:  * @param aAttrs                [in] the map of expected text attributes
24999:  *                              (name/value pairs) exposed at the offset
24999:  * @param aDefAttrs             [in] the map of expected text attributes
24999:  *                              (name/value pairs) exposed on hyper text
24999:  *                              accessible
21002:  * @param aStartOffset          [in] expected start offset where text attributes
21002:  *                              are applied
21002:  * @param aEndOffset            [in] expected end offset where text attribute
21002:  *                              are applied
21002:  * @param aSkipUnexpectedAttrs  [in] points the function doesn't fail if
21002:  *                              unexpected attribute is encountered
21002:  */
24999: function testTextAttrs(aID, aOffset, aAttrs, aDefAttrs,
24999:                        aStartOffset, aEndOffset, aSkipUnexpectedAttrs)
21002: {
21002:   var accessible = getAccessible(aID, [nsIAccessibleText]);
21002:   if (!accessible)
21002:     return;
21002: 
21002:   var startOffset = { value: -1 };
21002:   var endOffset = { value: -1 };
24999: 
24999:   // do not include attributes exposed on hyper text accessbile
24999:   var attrs = getTextAttributes(aID, accessible, false, aOffset,
24963:                                 startOffset, endOffset);
24958: 
24999:   if (!attrs)
21002:     return;
21002: 
21002:   var errorMsg = " for " + aID + " at offset " + aOffset;
21002: 
21002:   is(startOffset.value, aStartOffset, "Wrong start offset" + errorMsg);
21002:   is(endOffset.value, aEndOffset, "Wrong end offset" + errorMsg);
21002: 
21002:   compareAttrs(errorMsg, attrs, aAttrs, aSkipUnexpectedAttrs);
24999: 
24999:   // include attributes exposed on hyper text accessbile
24999:   var expectedAttrs = {};
24999:   for (var name in aAttrs)
24999:     expectedAttrs[name] = aAttrs[name];
24999: 
24999:   for (var name in aDefAttrs) {
24999:     if (!(name in expectedAttrs))
24999:       expectedAttrs[name] = aDefAttrs[name];
24999:   }
24999: 
24999:   attrs = getTextAttributes(aID, accessible, true, aOffset,
24999:                             startOffset, endOffset);
24999:   
24999:   if (!attrs)
24999:     return;
24999: 
24999:   compareAttrs(errorMsg, attrs, expectedAttrs, aSkipUnexpectedAttrs);
21002: }
21002: 
21002: /**
21002:  * Test default text attributes.
21002:  *
21002:  * @param aID                   [in] the ID of DOM element having text
21002:  *                              accessible
21002:  * @param aDefAttrs             [in] the map of expected text attributes
21002:  *                              (name/value pairs)
21002:  * @param aSkipUnexpectedAttrs  [in] points the function doesn't fail if
21002:  *                              unexpected attribute is encountered
21002:  */
21002: function testDefaultTextAttrs(aID, aDefAttrs, aSkipUnexpectedAttrs)
21002: {
21002:   var accessible = getAccessible(aID, [nsIAccessibleText]);
21002:   if (!accessible)
21002:     return;
21002:   
21002:   var defAttrs = null;
21002:   try{
21002:     defAttrs = accessible.defaultTextAttributes;
21002:   } catch (e) {
21002:   }
21002:   
21002:   if (!defAttrs) {
21002:     ok(false, "Can't get default text attributes for " + aID);
21002:     return;
21002:   }
21002:   
21002:   var errorMsg = ". Getting default text attributes for " + aID;
21002:   compareAttrs(errorMsg, defAttrs, aDefAttrs, aSkipUnexpectedAttrs);
21002: }
21002: 
42530: /**
42530:  * Test text attributes for wrong offset.
42530:  */
42530: function testTextAttrsWrongOffset(aID, aOffset)
42530: {
42530:   var res = false;
42530:   try {
42530:   var s = {}, e = {};
42530:   var acc = getAccessible(ID, [nsIAccessibleText]);
42530:     acc.getTextAttributes(false, 157, s, e);
42530:   } catch (e) {
42530:     res = true;
42530:   }
42530: 
42530:   ok(res,
42530:      "text attributes are calculated successfully at wrong offset " + aOffset + " for " + prettyName(aID));
42530: }
42530: 
42530: const kNormalFontWeight =
42530:   function equalsToNormal(aWeight) { return aWeight <= 400 ; }
42530: 
42530: const kBoldFontWeight =
42530:   function equalsToBold(aWeight) { return aWeight > 400; }
42530: 
42530: // The pt font size of the input element can vary by Linux distro.
42530: const kInputFontSize = WIN ?
42530:   "10pt" : (MAC ? "8pt" : function() { return true; });
42530: 
91236: const kAbsentFontFamily =
91236:   function(aFontFamily) { return aFontFamily != "sans-serif"; }
91236: const kInputFontFamily =
91236:   function(aFontFamily) { return aFontFamily != "sans-serif"; }
91236: 
91236: const kMonospaceFontFamily =
91236:   function(aFontFamily) { return aFontFamily != "monospace"; }
91236: const kSansSerifFontFamily =
91236:   function(aFontFamily) { return aFontFamily != "sans-serif"; }
91236: const kSerifFontFamily =
91236:   function(aFontFamily) { return aFontFamily != "serif"; }
91236: 
91236: const kCursiveFontFamily = WIN ? "Comic Sans MS" :
91236:   (LINUX ? "DejaVu Serif" : "MacFont");
91236: 
91236: /**
91236:  * Return used font from the given computed style.
91236:  */
91236: function fontFamily(aComputedStyle)
91236: {
91236:   var name = aComputedStyle.fontFamily;
91236:   switch (name) {
91236:     case "monospace":
91236:       return kMonospaceFontFamily;
91236:     case "sans-serif":
91236:       return kSansSerifFontFamily;
91236:     case "serif":
91236:       return kSerifFontFamily;
91236:     default:
91236:       return name;
91236:   }
91236: }
91236: 
42530: /**
42530:  * Build an object of default text attributes expected for the given accessible.
42530:  *
42530:  * @param aID          [in] identifier of accessible
42530:  * @param aFontSize    [in] font size
42530:  * @param aFontWeight  [in, optional] kBoldFontWeight or kNormalFontWeight,
42530:  *                      default value is kNormalFontWeight
42530:  */
91236: function buildDefaultTextAttrs(aID, aFontSize, aFontWeight, aFontFamily)
42530: {
42530:   var elm = getNode(aID);
42530:   var computedStyle = document.defaultView.getComputedStyle(elm, "");
42530:   var bgColor = computedStyle.backgroundColor == "transparent" ?
42530:     "rgb(255, 255, 255)" : computedStyle.backgroundColor;
42530: 
42530:   var defAttrs = {
42530:     "font-style": computedStyle.fontStyle,
42530:     "font-size": aFontSize,
42530:     "background-color": bgColor,
42530:     "font-weight": aFontWeight ? aFontWeight : kNormalFontWeight,
42530:     "color": computedStyle.color,
91236:     "font-family": aFontFamily ? aFontFamily : fontFamily(computedStyle),
42530:     "text-position": computedStyle.verticalAlign
42530:   };
42530: 
42530:   return defAttrs;
42530: }
42530: 
21002: ////////////////////////////////////////////////////////////////////////////////
21002: // Private.
21002: 
24999: function getTextAttributes(aID, aAccessible, aIncludeDefAttrs, aOffset,
24999:                            aStartOffset, aEndOffset)
24999: {
24999:   // This function expects the passed in accessible to already be queried for
24999:   // nsIAccessibleText.
24999:   var attrs = null;
24999:   try {
24999:     attrs = aAccessible.getTextAttributes(aIncludeDefAttrs, aOffset,
24999:                                           aStartOffset, aEndOffset);
24999:   } catch (e) {
24999:   }
24999: 
24999:   if (attrs)
24999:     return attrs;
24999: 
24999:   ok(false, "Can't get text attributes for " + aID);
24999:   return null;
24999: }
24999: 
29977: function testAttrsInternal(aAccOrElmOrID, aAttrs, aSkipUnexpectedAttrs,
29977:                    aAbsentAttrs)
29977: {
29977:   var accessible = getAccessible(aAccOrElmOrID);
29977:   if (!accessible)
29977:     return;
29977: 
29977:   var attrs = null;
29977:   try {
29977:     attrs = accessible.attributes;
29977:   } catch (e) { }
29977:   
29977:   if (!attrs) {
31673:     ok(false, "Can't get object attributes for " + prettyName(aAccOrElmOrID));
29977:     return;
29977:   }
29977:   
31673:   var errorMsg = " for " + prettyName(aAccOrElmOrID);
29977:   compareAttrs(errorMsg, attrs, aAttrs, aSkipUnexpectedAttrs, aAbsentAttrs);
29977: }
29977: 
29977: function compareAttrs(aErrorMsg, aAttrs, aExpectedAttrs, aSkipUnexpectedAttrs,
29977:                       aAbsentAttrs)
21002: {
32053:   // Check if all obtained attributes are expected and have expected value.
21002:   var enumerate = aAttrs.enumerate();
21002:   while (enumerate.hasMoreElements()) {
21002:     var prop = enumerate.getNext().QueryInterface(nsIPropertyElement);
21002: 
21002:     if (!(prop.key in aExpectedAttrs)) {
21002:       if (!aSkipUnexpectedAttrs)
21002:         ok(false, "Unexpected attribute '" + prop.key + "' having '" +
21002:            prop.value + "'" + aErrorMsg);
21002:     } else {
25728:       var msg = "Attribute '" + prop.key + "' has wrong value" + aErrorMsg;
25728:       var expectedValue = aExpectedAttrs[prop.key];
25728: 
25728:       if (typeof expectedValue == "function")
25728:         ok(expectedValue(prop.value), msg);
25728:       else
25728:         is(prop.value, expectedValue, msg);
21002:     }
21002:   }
21002: 
32053:   // Check if all expected attributes are presented.
21002:   for (var name in aExpectedAttrs) {
21002:     var value = "";
21002:     try {
21002:       value = aAttrs.getStringProperty(name);
21002:     } catch(e) { }
21002: 
21002:     if (!value)
21002:       ok(false,
21002:          "There is no expected attribute '" + name + "' " + aErrorMsg);
21002:   }
29977: 
32053:   // Check if all unexpected attributes are absent.
32053:   if (aAbsentAttrs) {
29977:     for (var name in aAbsentAttrs) {
32053:       var wasFound = false;
29977: 
32053:       var enumerate = aAttrs.enumerate();
32053:       while (enumerate.hasMoreElements()) {
32053:         var prop = enumerate.getNext().QueryInterface(nsIPropertyElement);
32053:         if (prop.key == name)
32053:           wasFound = true;
32053:       }
32053:     }
32053: 
32053:     ok(!wasFound,
29977:        "There is an unexpected attribute '" + name + "' " + aErrorMsg);
21002:   }
29977: }
