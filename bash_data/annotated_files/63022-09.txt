22840: /* ***** BEGIN LICENSE BLOCK *****
22840:  * 
22840:  * Copyright (c) 2008, Mozilla Corporation
22840:  * All rights reserved.
22840:  * 
22840:  * Redistribution and use in source and binary forms, with or without
22840:  * modification, are permitted provided that the following conditions are met:
22840:  * 
22840:  * * Redistributions of source code must retain the above copyright notice, this
22840:  *   list of conditions and the following disclaimer.
22840:  * * Redistributions in binary form must reproduce the above copyright notice,
22840:  *   this list of conditions and the following disclaimer in the documentation
22840:  *   and/or other materials provided with the distribution.
22840:  * * Neither the name of the Mozilla Corporation nor the names of its
22840:  *   contributors may be used to endorse or promote products derived from this
22840:  *   software without specific prior written permission.
22840:  * 
22840:  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
22840:  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
22840:  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
22840:  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
22840:  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
22840:  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
22840:  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
22840:  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
22840:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
22840:  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
22840:  * 
22840:  * Contributor(s):
22840:  *   Josh Aas <josh@mozilla.com>
22840:  * 
22840:  * ***** END LICENSE BLOCK ***** */
22840: 
22840: #ifndef nptest_h_
22840: #define nptest_h_
22840: 
22840: #include "mozilla-config.h"
22840: 
22840: #include "npapi.h"
22840: #include "npfunctions.h"
22840: #include "npruntime.h"
23866: #include "prtypes.h"
32918: #include <string>
32918: #include <sstream>
32918: 
23823: typedef enum  {
23823:   DM_DEFAULT,
23823:   DM_SOLID_COLOR
23823: } DrawMode;
23823: 
32918: typedef enum {
32918:   FUNCTION_NONE,
32918:   FUNCTION_NPP_GETURL,
32918:   FUNCTION_NPP_GETURLNOTIFY,
32918:   FUNCTION_NPP_POSTURL,
33404:   FUNCTION_NPP_POSTURLNOTIFY,
33404:   FUNCTION_NPP_NEWSTREAM,
33404:   FUNCTION_NPP_WRITEREADY,
33404:   FUNCTION_NPP_WRITE,
38760:   FUNCTION_NPP_DESTROYSTREAM,
38760:   FUNCTION_NPP_WRITE_RPC
32918: } TestFunction;
32918: 
41061: typedef enum {
41061:   ACTIVATION_STATE_UNKNOWN,
41061:   ACTIVATION_STATE_ACTIVATED,
41061:   ACTIVATION_STATE_DEACTIVATED
41061: } ActivationState;
41061: 
33404: typedef struct FunctionTable {
33404:   TestFunction funcId;
33686:   const char* funcName;
33404: } FunctionTable;
33404: 
32918: typedef enum {
32918:   POSTMODE_FRAME,
32918:   POSTMODE_STREAM
32918: } PostMode;
32918: 
22840: typedef struct TestNPObject : NPObject {
22840:   NPP npp;
23823:   DrawMode drawMode;
24475:   PRUint32 drawColor; // 0xAARRGGBB
22840: } TestNPObject;
22840: 
28484: typedef struct _PlatformData PlatformData;
28484: 
32918: typedef struct TestRange : NPByteRange {
32918:   bool waiting;
32918: } TestRange;
32918: 
22840: typedef struct InstanceData {
22840:   NPP npp;
22840:   NPWindow window;
22840:   TestNPObject* scriptableObject;
28484:   PlatformData* platformData;
33686:   int32_t instanceCountWatchGeneration;
26802:   bool lastReportedPrivateModeState;
26802:   bool hasWidget;
33296:   bool npnNewStream;
34018:   bool throwOnNextInvoke;
54262:   bool runScriptOnPaint;
37426:   uint32_t timerID[2];
37426:   bool timerTestResult;
37426:   bool asyncCallbackResult;
47770:   bool invalidateDuringPaint;
37315:   int32_t winX;
37315:   int32_t winY;
31130:   int32_t lastMouseX;
31130:   int32_t lastMouseY;
36907:   int32_t widthAtLastPaint;
34501:   int32_t paintCount;
33404:   int32_t writeCount;
33404:   int32_t writeReadyCount;
37426:   int32_t asyncTestPhase;
32918:   TestFunction testFunction;
33404:   TestFunction functionToFail;
33404:   NPError failureCode;
39210:   NPObject* callOnDestroy;
32918:   PostMode postMode;
33639:   std::string testUrl;
33639:   std::string frame;
37426:   std::string timerTestScriptCallback;
37426:   std::string asyncTestScriptCallback;
33639:   std::ostringstream err;
32918:   uint16_t streamMode;
32918:   int32_t streamChunkSize;
32918:   int32_t streamBufSize;
32918:   int32_t fileBufSize;
32918:   TestRange* testrange;
32918:   void* streamBuf;
32918:   void* fileBuf;
36611:   bool crashOnDestroy;
41489:   bool cleanupWidget;
41061:   ActivationState topLevelWindowActivationState;
41061:   int32_t topLevelWindowActivationEventCount;
41321:   ActivationState focusState;
41321:   int32_t focusEventCount;
41061:   int32_t eventModel;
22840: } InstanceData;
22840: 
36907: void notifyDidPaint(InstanceData* instanceData);
36907: 
22840: #endif // nptest_h_
