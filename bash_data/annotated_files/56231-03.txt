53162: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
53162:  * vim: set ts=4 sw=4 et tw=99:
53162:  *
53162:  * ***** BEGIN LICENSE BLOCK *****
53162:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
53162:  *
53162:  * The contents of this file are subject to the Mozilla Public License Version
53162:  * 1.1 (the "License"); you may not use this file except in compliance with
53162:  * the License. You may obtain a copy of the License at
53162:  * http://www.mozilla.org/MPL/
53162:  *
53162:  * Software distributed under the License is distributed on an "AS IS" basis,
53162:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
53162:  * for the specific language governing rights and limitations under the
53162:  * License.
53162:  *
53162:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
53162:  * May 28, 2008.
53162:  *
53162:  * The Initial Developer of the Original Code is
53162:  *   Brendan Eich <brendan@mozilla.org>
53162:  *
53162:  * Contributor(s):
53162:  *   Sean Stangl <sstangl@mozilla.com>
53162:  *
53162:  * Alternatively, the contents of this file may be used under the terms of
53162:  * either of the GNU General Public License Version 2 or later (the "GPL"),
53162:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
53162:  * in which case the provisions of the GPL or the LGPL are applicable instead
53162:  * of those above. If you wish to allow use of your version of this file only
53162:  * under the terms of either the GPL or the LGPL, and not to allow others to
53162:  * use your version of this file under the terms of the MPL, indicate your
53162:  * decision by deleting the provisions above and replace them with the notice
53162:  * and other provisions required by the GPL or the LGPL. If you do not delete
53162:  * the provisions above, a recipient may use your version of this file under
53162:  * the terms of any one of the MPL, the GPL or the LGPL.
53162:  *
53162:  * ***** END LICENSE BLOCK ***** */
53162: 
53224: #if !defined jsjaeger_assembler64_h__ && defined JS_METHODJIT && defined JS_PUNBOX64
53162: #define jsjaeger_assembler64_h__
53162: 
56176: #include "methodjit/BaseAssembler.h"
53162: #include "methodjit/MachineRegs.h"
54582: #include "methodjit/RematInfo.h"
53162: 
53162: namespace js {
53162: namespace mjit {
53162: 
55514: struct Imm64 : JSC::MacroAssembler::ImmPtr
53162: {
53162:     Imm64(uint64 u)
53162:       : ImmPtr((const void *)u)
53162:     { }
53162: };
53162: 
55514: /* Tag stored in shifted format. */
55514: struct ImmTag : JSC::MacroAssembler::ImmPtr
53162: {
55514:     ImmTag(JSValueShiftedTag shtag)
53162:       : ImmPtr((const void *)shtag)
53162:     { }
53162: };
53162: 
55514: struct ImmType : ImmTag
53162: {
53162:     ImmType(JSValueType type)
55514:       : ImmTag(JSValueShiftedTag(JSVAL_TYPE_TO_SHIFTED_TAG(type)))
55514:     { }
55514: };
55514: 
55514: struct ImmPayload : Imm64
55514: {
55514:     ImmPayload(uint64 payload)
55514:       : Imm64(payload)
53162:     { }
53162: };
53162: 
56176: class Assembler : public BaseAssembler
53162: {
53162:     static const uint32 PAYLOAD_OFFSET = 0;
53162: 
53162:   public:
53162:     static const JSC::MacroAssembler::Scale JSVAL_SCALE = JSC::MacroAssembler::TimesEight;
53162: 
54709:     template <typename T>
54709:     T payloadOf(T address) {
53162:         return address;
53162:     }
53162: 
54709:     template <typename T>
54709:     T valueOf(T address) {
53162:         return address;
53162:     }
53162: 
55746:     void loadSlot(RegisterID obj, RegisterID clobber, uint32 slot, bool inlineAccess,
55746:                   RegisterID type, RegisterID data) {
53315:         JS_ASSERT(type != data);
55746:         Address address(obj, JSObject::getFixedSlotOffset(slot));
55746:         if (!inlineAccess) {
55746:             loadPtr(Address(obj, offsetof(JSObject, slots)), clobber);
55746:             address = Address(clobber, slot * sizeof(Value));
53315:         }
53315:         
53386:         loadValueAsComponents(address, type, data);
53315:     }
53315: 
54709:     template <typename T>
54709:     void loadValue(T address, RegisterID dst) {
53162:         loadPtr(address, dst);
53162:     }
53162: 
53199:     void convertValueToType(RegisterID val) {
53476:         andPtr(Registers::TypeMaskReg, val);
53199:     }
53199: 
53199:     void convertValueToPayload(RegisterID val) {
53476:         andPtr(Registers::PayloadMaskReg, val);
53199:     }
53199: 
56231:     // Returns a label after the one Value load.
54709:     template <typename T>
54709:     Label loadValueAsComponents(T address, RegisterID type, RegisterID payload) {
53427:         loadValue(address, type);
53386:         Label l = label();
53386: 
53476:         move(Registers::PayloadMaskReg, payload);
53427:         andPtr(type, payload);
53427:         xorPtr(payload, type);
53162: 
53386:         return l;
53162:     }
53162: 
54832:     void loadValueAsComponents(const Value &val, RegisterID type, RegisterID payload) {
56004:         move(Imm64(val.asRawBits() & JSVAL_TAG_MASK), type);
56004:         move(Imm64(val.asRawBits() & JSVAL_PAYLOAD_MASK), payload);
54832:     }
54832: 
54709:     template <typename T>
54709:     void storeValueFromComponents(RegisterID type, RegisterID payload, T address) {
54582:         move(type, Registers::ValueReg);
54582:         orPtr(payload, Registers::ValueReg);
54582:         storeValue(Registers::ValueReg, address);
54582:     }
54582: 
54709:     template <typename T>
55514:     void storeValueFromComponents(ImmTag type, RegisterID payload, T address) {
54582:         move(type, Registers::ValueReg);
54582:         orPtr(payload, Registers::ValueReg);
54582:         storeValue(Registers::ValueReg, address);
54582:     }
54582: 
54709:     template <typename T>
54709:     void loadTypeTag(T address, RegisterID reg) {
53386:         loadValue(address, reg);
53386:         convertValueToType(reg);
53162:     }
53162: 
54709:     template <typename T>
55514:     void storeTypeTag(ImmTag imm, T address) {
56036:         loadPayload(address, Registers::ValueReg);
53162:         orPtr(imm, Registers::ValueReg);
53162:         storePtr(Registers::ValueReg, valueOf(address));
53162:     }
53162: 
54709:     template <typename T>
54709:     void storeTypeTag(RegisterID reg, T address) {
53162:         /* The type tag must be stored in shifted format. */
56036:         loadPayload(address, Registers::ValueReg);
53162:         orPtr(reg, Registers::ValueReg);
53162:         storePtr(Registers::ValueReg, valueOf(address));
53162:     }
53162: 
54709:     template <typename T>
54709:     void loadPayload(T address, RegisterID reg) {
53386:         loadValue(address, reg);
53386:         convertValueToPayload(reg);
53162:     }
53162: 
54709:     template <typename T>
54709:     void storePayload(RegisterID reg, T address) {
53162:         /* Not for doubles. */
56036:         loadTypeTag(address, Registers::ValueReg);
53162:         orPtr(reg, Registers::ValueReg);
53162:         storePtr(Registers::ValueReg, valueOf(address));
53162:     }
53162:     
54709:     template <typename T>
55514:     void storePayload(ImmPayload imm, T address) {
53162:         /* Not for doubles. */
53162:         storePtr(imm, valueOf(address));
53162:     }
53162: 
54709:     template <typename T>
54709:     void storeValue(RegisterID reg, T address) {
54582:         storePtr(reg, valueOf(address));
54582:     }
54582: 
54709:     template <typename T>
54709:     void storeValue(const Value &v, T address) {
53275:         jsval_layout jv;
53275:         jv.asBits = JSVAL_BITS(Jsvalify(v));
53275: 
53275:         storePtr(Imm64(jv.asBits), valueOf(address));
53275:     }
53275: 
54709:     template <typename T>
54709:     void storeValue(const ValueRemat &vr, T address) {
56176:         if (vr.isConstant)
56176:             storeValue(Valueify(vr.u.v), address);
56176:         else if (vr.u.s.isTypeKnown)
56176:             storeValueFromComponents(ImmType(vr.u.s.type.knownType), vr.u.s.data, address);
54582:         else
56176:             storeValueFromComponents(vr.u.s.type.reg, vr.u.s.data, address);
53162:     }
53162: 
53531:     void loadPrivate(Address privAddr, RegisterID to) {
53531:         loadPtr(privAddr, to);
53531:         lshiftPtr(Imm32(1), to);
53531:     }
53531: 
53162:     void loadFunctionPrivate(RegisterID base, RegisterID to) {
55746:         Address priv(base, offsetof(JSObject, privateData));
55746:         loadPtr(priv, to);
53162:     }
53162: 
56176:     Jump testNull(Assembler::Condition cond, RegisterID reg) {
55514:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_NULL));
53162:     }
53162: 
56176:     Jump testNull(Assembler::Condition cond, Address address) {
53386:         loadValue(address, Registers::ValueReg);
56036:         return testNull(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testUndefined(Assembler::Condition cond, RegisterID reg) {
55712:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_UNDEFINED));
55712:     }
55712: 
56176:     Jump testUndefined(Assembler::Condition cond, Address address) {
55712:         loadValue(address, Registers::ValueReg);
56036:         return testUndefined(cond, Registers::ValueReg);
55712:     }
55712: 
56176:     Jump testInt32(Assembler::Condition cond, RegisterID reg) {
55514:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_INT32));
53162:     }
53162: 
56176:     Jump testInt32(Assembler::Condition cond, Address address) {
56036:         loadTypeTag(address, Registers::ValueReg);
56036:         return testInt32(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testNumber(Assembler::Condition cond, RegisterID reg) {
56176:         cond = (cond == Assembler::Equal) ? Assembler::Below : Assembler::AboveOrEqual;
56036:         return branchPtr(cond, reg,
56036:                          ImmTag(JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_NUMBER_SET));
53162:     }
53162: 
56176:     Jump testNumber(Assembler::Condition cond, Address address) {
53386:         loadValue(address, Registers::ValueReg);
56036:         return testNumber(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testPrimitive(Assembler::Condition cond, RegisterID reg) {
56176:         cond = (cond == Assembler::Equal) ? Assembler::Below : Assembler::AboveOrEqual;
56036:         return branchPtr(cond, reg,
56036:                          ImmTag(JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_PRIMITIVE_SET));
53162:     }
53162: 
56176:     Jump testPrimitive(Assembler::Condition cond, Address address) {
53386:         loadValue(address, Registers::ValueReg);
56036:         return testPrimitive(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testObject(Assembler::Condition cond, RegisterID reg) {
56176:         cond = (cond == Assembler::Equal) ? Assembler::AboveOrEqual : Assembler::Below;
55514:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_OBJECT));
53162:     }
53162: 
56176:     Jump testObject(Assembler::Condition cond, Address address) {
53386:         loadValue(address, Registers::ValueReg);
56036:         return testObject(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testDouble(Assembler::Condition cond, RegisterID reg) {
56176:         cond = (cond == Assembler::Equal) ? Assembler::BelowOrEqual : Assembler::Above;
56036:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_MAX_DOUBLE));
53162:     }
53162: 
56176:     Jump testDouble(Assembler::Condition cond, Address address) {
53386:         loadValue(address, Registers::ValueReg);
56036:         return testDouble(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testBoolean(Assembler::Condition cond, RegisterID reg) {
55514:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_BOOLEAN));
53162:     }
53162: 
56176:     Jump testBoolean(Assembler::Condition cond, Address address) {
56036:         loadTypeTag(address, Registers::ValueReg);
56036:         return testBoolean(cond, Registers::ValueReg);
53162:     }
53162: 
56176:     Jump testString(Assembler::Condition cond, RegisterID reg) {
55514:         return branchPtr(cond, reg, ImmTag(JSVAL_SHIFTED_TAG_STRING));
53162:     }
53162: 
56176:     Jump testString(Assembler::Condition cond, Address address) {
56036:         loadTypeTag(address, Registers::ValueReg);
56036:         return testString(cond, Registers::ValueReg);
53162:     }
53162: };
53162: 
54709: } /* namespace mjit */
53162: } /* namespace js */
53162: 
53162: #endif
53162: 
