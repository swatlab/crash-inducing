98983: /* This Source Code Form is subject to the terms of the Mozilla Public
98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
21192:  */
21192: 
21192: const Cc = Components.classes;
21192: const Ci = Components.interfaces;
21192: 
29020: // v0.9 registry field meanings are different on Mac OS X
29020: const CWD = do_get_cwd();
29020: function checkOS(os) {
29020:   const nsILocalFile_ = "nsILocalFile" + os;
29020:   return nsILocalFile_ in Components.interfaces &&
29020:          CWD instanceof Components.interfaces[nsILocalFile_];
29020: }
29020: const isMac = checkOS("Mac");
29020: 
21192: // Plugin registry uses different field delimeters on different platforms
21192: var DELIM = ":";
21192: if ("@mozilla.org/windows-registry-key;1" in Components.classes)
21192:   DELIM = "|";
21192: 
31180: var gProfD = do_get_profile();
21192: var gDirSvc = Cc["@mozilla.org/file/directory_service;1"].
21192:              getService(Ci.nsIProperties);
21192: 
21192: // Writes out some plugin registry to the profile
21192: function write_registry(version, info) {
21192:   var header = "Generated File. Do not edit.\n\n";
21192:   header += "[HEADER]\n";
21192:   header += "Version" + DELIM + version + DELIM + "$\n\n";
21192:   header += "[PLUGINS]\n";
21192: 
21192:   var registry = gProfD.clone();
21192:   registry.append("pluginreg.dat");
21192:   var foStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
21192:                            .createInstance(Components.interfaces.nsIFileOutputStream);
21192:   // write, create, truncate
21192:   foStream.init(registry, 0x02 | 0x08 | 0x20, 0666, 0);
21192: 
21192:   var charset = "UTF-8"; // Can be any character encoding name that Mozilla supports
21192:   var os = Cc["@mozilla.org/intl/converter-output-stream;1"].
21192:            createInstance(Ci.nsIConverterOutputStream);
21192:   os.init(foStream, charset, 0, 0x0000);
21192: 
21192:   os.writeString(header);
21192:   os.writeString(info);
21192:   os.close();
21192: }
21192: 
21192: function run_test() {
21192:   var file = get_test_plugin();
21192:   if (!file)
21192:     do_throw("Plugin library not found");
21192: 
21192:   // Write out a 0.9 version registry that marks the test plugin as disabled
21192:   var registry = "";
29020:   if (isMac) {
21192:     registry += file.leafName + DELIM + "$\n";
21192:     registry += file.path + DELIM + "$\n";
29020:   } else {
29020:     registry += file.path + DELIM + "$\n";
29020:     registry += DELIM + "$\n";
29020:   }
21192:   registry += file.lastModifiedTime + DELIM + "0" + DELIM + "0" + DELIM + "$\n";
60772:   registry += "Plug-in for testing purposes.\u2122 " + 
60772:                 "(\u0939\u093f\u0928\u094d\u0926\u0940 " + 
60772:                 "\u4e2d\u6587 " +
60772:                 "\u0627\u0644\u0639\u0631\u0628\u064a\u0629)" +
60772:                 DELIM + "$\n";
21192:   registry += "Test Plug-in" + DELIM + "$\n";
21192:   registry += "1\n";
21192:   registry += "0" + DELIM + "application/x-test" + DELIM + "Test mimetype" +
21192:               DELIM + "tst" + DELIM + "$\n";
21192:   write_registry("0.9", registry);
21192: 
21192:   var plugin = get_test_plugintag();
21192:   if (!plugin)
21192:     do_throw("Plugin tag not found");
21192: 
21192:   // If the plugin was not rescanned then this version will not be correct
21192:   do_check_eq(plugin.version, "1.0.0.0");
60772:   do_check_eq(plugin.description,
60772:               "Plug-in for testing purposes.\u2122 " + 
60772:                 "(\u0939\u093f\u0928\u094d\u0926\u0940 " + 
60772:                 "\u4e2d\u6587 " +
60772:                 "\u0627\u0644\u0639\u0631\u0628\u064a\u0629)");
21192:   // If the plugin registry was not read then the plugin will not be disabled
21192:   do_check_true(plugin.disabled);
21192:   do_check_false(plugin.blocklisted);
21192: }
