29990: <?xml version="1.0"?>
29990: <?xml-stylesheet type="text/css" href="chrome://global/skin"?>
29990: <?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
29990:                  type="text/css"?>
29990: <window onload="runTests()"
29990:         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
29990: <iframe height="200" width="600"></iframe>
35581: <iframe height="200" width="600"></iframe>
29990: <script type="application/javascript">
29990: <![CDATA[
29990: var is = window.opener.wrappedJSObject.is;
29990: var isnot = window.opener.wrappedJSObject.isnot;
29990: var ok = window.opener.wrappedJSObject.ok;
29990: var SimpleTest = window.opener.wrappedJSObject.SimpleTest;
26353: var gWbp;
26353: var ctx1;
26353: var ctx2;
26353: var counter = 0;
26353: 
26353: function printpreview() {
35581:   gWbp = window.frames[1].QueryInterface(Components.interfaces.nsIInterfaceRequestor)
26353:              .getInterface(Components.interfaces.nsIWebBrowserPrint);
26353:   var listener = {
26353:     onLocationChange: function(webProgress, request, location) { },
26353:     onProgressChange: function(webProgress, request, curSelfProgress, 
26353:                                maxSelfProgress, curTotalProgress,
26353:                                maxTotalProgress) { },
26353:     onSecurityChange: function(webProgress, request, state) { },
26353:     onStateChange: function(webProgress, request, stateFlags, status) { },
26353:     onStatusChange: function(webProgress, request, status, message) { },
26353:     QueryInterface: function(iid) {
29990:       if (iid.equals(Components.interfaces.nsIWebProgressListener) ||
26353:           iid.equals(Components.interfaces.nsISupportsWeakReference))
26353:             return this;
26353:       throw Components.results.NS_NOINTERFACE;
26353:     }
26353:   }
26353:   var prefs = Components.classes["@mozilla.org/preferences-service;1"]
26353:                             .getService(Components.interfaces.nsIPrefBranch);
26353:   prefs.setBoolPref('print.show_print_progress', false);
26353:   //XXX I would have thought this would work, instead I'm forced to use prefs service
26353:   gWbp.globalPrintSettings.showPrintProgress = false;
35581:   gWbp.printPreview(gWbp.globalPrintSettings, window.frames[0], listener);
26353:   prefs.clearUserPref('print.show_print_progress');
26353: }
26353: 
26353: function exitprintpreview() {
35581:   window.frames[1].QueryInterface(Components.interfaces.nsIInterfaceRequestor)
26353:    .getInterface(Components.interfaces.nsIWebBrowserPrint).exitPrintPreview(); 
26353: }
26353: 
26353: function runTests()
26353: {
26353:   var printService = Components.classes["@mozilla.org/gfx/printsettings-service;1"]
26353:                                .getService(Components.interfaces.nsIPrintSettingsService);
26353: 
26353:   try {
26353:      var printerEnumerator = Components.classes["@mozilla.org/gfx/printerenumerator;1"]
26353:                              .getService(Components.interfaces.nsIPrinterEnumerator);
26353:   } catch(e) {
26353:      //don't try to test on Mac, since the print preview code doesn't work there
26353:      SimpleTest.finish();
26353:      return;
26353:   }
26353: 
26353:   if (printService.defaultPrinterName != '') {
26353:     startTest1();
26353:   } else {
26353:     todo(false, "No printer seems installed on this machine, that is necessary for this test");
26353:     SimpleTest.finish();
26353:   }
26353: }
26353: 
26353: function compareCanvases() {
26353:   return window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
26353:                .getInterface(Components.interfaces.nsIDOMWindowUtils)
26353:                .compareCanvases(document.getElementsByTagName("canvas")[0],
26353:                                 document.getElementsByTagName("canvas")[1],
26353:                                 {}) == 0;
26353: }
26353: 
26353: function addHTMLContent(parent) {
26353:   var n = parent.ownerDocument.createElement("div");
26353:   parent.appendChild(n);
26353:   var s = "<iframe width='500' height='40' src='data:text/plain,ThisIsAnIframeCreatedDuringPrintPreview'></iframe>";
26353:   s += "<table>";
26353:   for (var i = 1; i < 501; ++i) {
26353:     s += "<tr><td>Cell A" + i + "</td><td>Cell B" + i + "</td><td>Cell C" + i + "</td></tr>";
26353:   }
26353:   s += "</table>";
26353:   n.innerHTML = s;
26353: }
26353: 
26353: function startTest1() {
26353:   ctx1 = document.getElementsByTagName("canvas")[0].getContext("2d");
26353:   ctx2 = document.getElementsByTagName("canvas")[1].getContext("2d");
26353:   window.frames[0].document.body.innerHTML = "<div> </div><div>" + counter + " timers</div><div> </div>";
26353: 
26353:   // Note this timeout is needed so that we can check that timers run
26353:   // after print preview, but not during it.
26353:   window.frames[0].counter = counter;
26353:   window.frames[0].counterTimeout = "document.body.firstChild.nextSibling.innerHTML = ++counter + ' timers';" +
26353:                                     "window.setTimeout(counterTimeout, 0);";
26353:   window.frames[0].setTimeout(window.frames[0].counterTimeout, 0);
26353:   window.frames[0].document.body.firstChild.innerHTML = "Print preview";
26353: 
26353:   printpreview();
35581:   ctx1.drawWindow(window.frames[1], 0, 0, 300, 300, "rgb(256,256,256)");
26353:   window.frames[0].document.body.firstChild.innerHTML = "Galley presentation";
26353: 
26353:   // Add some elements.
26353:   addHTMLContent(window.frames[0].document.body.lastChild);
26353:   // Delete them.
26353:   window.frames[0].document.body.lastChild.innerHTML = "";
26353:   // And readd.
26353:   addHTMLContent(window.frames[0].document.body.lastChild);
26353: 
26353:   setTimeout(finalizeTest1, 1000);
26353: }
26353: 
26353: function finalizeTest1() {
35581:   ctx2.drawWindow(window.frames[1], 0, 0, 300, 300, "rgb(256,256,256)");
26353:   exitprintpreview();
26353:   ok(compareCanvases(), "Canvas should be the same!");
26353:   counter = window.frames[0].counter;
26353:   // This timeout is needed so that we can check that timers do run after
26353:   // print preview.
26353:   setTimeout(runTest2, 1000);
26353: }
26353: 
26353: function runTest2() {
26353:   isnot(window.frames[0].document.body.firstChild.nextSibling.textContent, "0 timers", "Timers should have run!");
26353:   isnot(window.frames[0].counter, 0, "Timers should have run!");
26353:   counter = window.frames[0].counter;
26353:   window.frames[0].counterTimeout = "";
27606:   setTimeout(runTest3, 0);
27606: }
27606: 
27606: var elementIndex = 0;
27606: var compareEmptyElement = true;
27606: var emptyFormElements =
27606:   ["<input type='text'>",
27606:    "<input type='password'>",
27606:    "<input type='file'>",
27606:    "<input type='button'>",
27606:    "<input type='submit'>",
27606:    "<input type='reset'>",
27606:    "<input type='checkbox'>",
27606:    "<input type='radio'>",
27606:    "<select></select>",
27606:    "<select size='5'></select>",
27606:    "<textarea></textarea>"];
27606: 
27606: var formElements =
27606:   ["<input type='text' value='text'>",
27606:    "<input type='password' value='password'>",
27606:    "<input type='file' value='file'>",
27606:    "<input type='button' value='button'>",
27606:    "<input type='submit' value='submit button'>",
27606:    "<input type='reset' value='reset button'>",
27606:    "<input type='checkbox' checked>",
27606:    "<input type='radio' checked>",
27606:    "<select><option>option1</option></select>",
27606:    "<select size='5'><option>1</option><option>2</option><option>3</option></select>",
27606:    "<textarea value='textarea'>textarea</textarea>"];
27606: 
27606: function runTest3() {
27606:   if (compareEmptyElement) {
27606:     var currentIndex = elementIndex;
27606:     ++elementIndex;
27606:     if (elementIndex >= emptyFormElements.length) {
27606:       elementIndex = 0;
27606:       compareEmptyElement = false;
27606:     }
27606:     compareFormElementPrint(emptyFormElements[currentIndex], emptyFormElements[currentIndex], true);
27606:     return;
27606:   } else if (elementIndex < emptyFormElements.length) {
27606:     var currentIndex = elementIndex;
27606:     ++elementIndex;
27606:     compareFormElementPrint(emptyFormElements[currentIndex], formElements[currentIndex], false);
27606:     return;
27606:   }
27606: 
37469:   setTimeout(runTest4, 0)
26353: }
26353: 
27606: function compareFormElementPrint(el1, el2, equals) {
27606:   window.frames[0].document.body.innerHTML = el1;
27606:   window.frames[0].document.body.firstChild.value =
27606:     window.frames[0].document.body.firstChild.getAttribute('value');
27606:   printpreview();
35581:   ctx1.drawWindow(window.frames[1], 0, 0, 300, 300, "rgb(256,256,256)");
27606:   exitprintpreview();
27606:   window.frames[0].document.body.innerHTML = el2;
27606:   window.frames[0].document.body.firstChild.value =
27606:     window.frames[0].document.body.firstChild.getAttribute('value');
27606:   printpreview();
35581:   ctx2.drawWindow(window.frames[1], 0, 0, 300, 300, "rgb(256,256,256)");
27606:   exitprintpreview();
27606:   is(compareCanvases(), equals,
27606:      "Comparing print preview didn't succeed [" + el1 + " : " + el2 + "]");
27606:   setTimeout(runTest3, 100);
27606: }
37469: 
37469: // This is a crash test for bug 539060.
37469: function runTest4() {
37469:   window.frames[0].document.body.innerHTML =
37469:     "<iframe style='display: none;' src='data:text/html,<iframe>'></iframe>";
37469:   setTimeout(runTest4end, 500);
37469: }
37469: 
37469: function runTest4end() {
37469:   printpreview();
37469:   exitprintpreview();
37469:   SimpleTest.finish();
37469:   window.close();
37469: }
37469: 
29990: ]]></script>
29990: <table style="border: 1px solid black;" xmlns="http://www.w3.org/1999/xhtml">
27606: <tr><th>Print preview canvas 1</th><th>Print preview canvas 2</th></tr>
26353: <tr>
26353: <td><canvas height="300" width="300"></canvas></td>
26353: <td><canvas height="300" width="300"></canvas></td>
26353: </tr></table>
29990: </window>
