51350: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
51350: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla browser.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications, Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Radha Kulkarni <radha@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
80574: #ifdef DEBUG_bryner
80574: #define DEBUG_PAGE_CACHE
80574: #endif
80574: 
    1: // Local Includes
    1: #include "nsSHEntry.h"
    1: #include "nsXPIDLString.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsIDocShellLoadInfo.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMDocument.h"
80574: #include "nsAutoPtr.h"
80574: #include "nsThreadUtils.h"
80574: #include "nsIWebNavigation.h"
 6187: #include "nsISHistory.h"
 6187: #include "nsISHistoryInternal.h"
14631: #include "nsDocShellEditorData.h"
80574: #include "nsIDocShell.h"
    1: 
51350: namespace dom = mozilla::dom;
51350: 
80574: // Hardcode this to time out unused content viewers after 30 minutes
80574: #define CONTENT_VIEWER_TIMEOUT_SECONDS 30*60
80574: 
80574: typedef nsExpirationTracker<nsSHEntry,3> HistoryTrackerBase;
80574: class HistoryTracker : public HistoryTrackerBase {
80574: public:
80574:   // Expire cached contentviewers after 20-30 minutes in the cache.
80574:   HistoryTracker() : HistoryTrackerBase((CONTENT_VIEWER_TIMEOUT_SECONDS/2)*1000) {}
80574:   
80574: protected:
80574:   virtual void NotifyExpired(nsSHEntry* aObj) {
80574:     RemoveObject(aObj);
80574:     aObj->Expire();
80574:   }
80574: };
80574: 
80574: static HistoryTracker *gHistoryTracker = nsnull;
    1: static PRUint32 gEntryID = 0;
80574: static PRUint64 gEntryDocIdentifier = 0;
80574: 
80574: nsresult nsSHEntry::Startup()
80574: {
80574:   gHistoryTracker = new HistoryTracker();
80574:   return gHistoryTracker ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
80574: }
80574: 
80574: void nsSHEntry::Shutdown()
80574: {
80574:   delete gHistoryTracker;
80574:   gHistoryTracker = nsnull;
80574: }
80574: 
80574: static void StopTrackingEntry(nsSHEntry *aEntry)
80574: {
80574:   if (aEntry->GetExpirationState()->IsTracked()) {
80574:     gHistoryTracker->RemoveObject(aEntry);
80574:   }
80574: }
 6187: 
    1: //*****************************************************************************
    1: //***    nsSHEntry: Object Management
    1: //*****************************************************************************
    1: 
 6187: 
    1: nsSHEntry::nsSHEntry() 
    1:   : mLoadType(0)
    1:   , mID(gEntryID++)
80574:   , mDocIdentifier(gEntryDocIdentifier++)
    1:   , mScrollPositionX(0)
    1:   , mScrollPositionY(0)
80486:   , mURIWasModified(false)
80574:   , mIsFrameNavigation(false)
80574:   , mSaveLayoutState(true)
80574:   , mExpired(false)
80574:   , mSticky(true)
80574:   , mDynamicallyCreated(false)
80574:   , mParent(nsnull)
80574:   , mViewerBounds(0, 0, 0, 0)
80574:   , mDocShellID(0)
80574:   , mLastTouched(0)
    1: {
    1: }
    1: 
    1: nsSHEntry::nsSHEntry(const nsSHEntry &other)
80574:   : mURI(other.mURI)
    1:   , mReferrerURI(other.mReferrerURI)
80574:   // XXX why not copy mDocument?
    1:   , mTitle(other.mTitle)
    1:   , mPostData(other.mPostData)
80574:   , mLayoutHistoryState(other.mLayoutHistoryState)
    1:   , mLoadType(0)         // XXX why not copy?
    1:   , mID(other.mID)
80574:   , mDocIdentifier(other.mDocIdentifier)
    1:   , mScrollPositionX(0)  // XXX why not copy?
    1:   , mScrollPositionY(0)  // XXX why not copy?
73554:   , mURIWasModified(other.mURIWasModified)
80574:   , mIsFrameNavigation(other.mIsFrameNavigation)
80574:   , mSaveLayoutState(other.mSaveLayoutState)
80574:   , mExpired(other.mExpired)
80574:   , mSticky(true)
80574:   , mDynamicallyCreated(other.mDynamicallyCreated)
80574:   // XXX why not copy mContentType?
80574:   , mCacheKey(other.mCacheKey)
80574:   , mParent(other.mParent)
80574:   , mViewerBounds(0, 0, 0, 0)
80574:   , mOwner(other.mOwner)
80574:   , mDocShellID(other.mDocShellID)
61863:   , mStateData(other.mStateData)
    1: {
    1: }
    1: 
79445: static bool
    1: ClearParentPtr(nsISHEntry* aEntry, void* /* aData */)
    1: {
    1:   if (aEntry) {
    1:     aEntry->SetParent(nsnull);
    1:   }
80486:   return true;
    1: }
    1: 
    1: nsSHEntry::~nsSHEntry()
    1: {
80574:   StopTrackingEntry(this);
80574: 
80574:   // Since we never really remove kids from SHEntrys, we need to null
80574:   // out the mParent pointers on all our kids.
    1:   mChildren.EnumerateForwards(ClearParentPtr, nsnull);
80574:   mChildren.Clear();
80574: 
80574:   if (mContentViewer) {
80574:     // RemoveFromBFCacheSync is virtual, so call the nsSHEntry version
80574:     // explicitly
80574:     nsSHEntry::RemoveFromBFCacheSync();
80574:   }
80574: 
80574:   mEditorData = nsnull;
80574: 
80574: #ifdef DEBUG
80574:   // This is not happening as far as I can tell from breakpad as of early November 2007
80574:   nsExpirationTracker<nsSHEntry,3>::Iterator iterator(gHistoryTracker);
80574:   nsSHEntry* elem;
80574:   while ((elem = iterator.Next()) != nsnull) {
80574:     NS_ASSERTION(elem != this, "Found dead entry still in the tracker!");
80574:   }
80574: #endif
    1: }
    1: 
    1: //*****************************************************************************
    1: //    nsSHEntry: nsISupports
    1: //*****************************************************************************
    1: 
80574: NS_IMPL_ISUPPORTS5(nsSHEntry, nsISHContainer, nsISHEntry, nsIHistoryEntry,
80574:                    nsIMutationObserver, nsISHEntryInternal)
    1: 
    1: //*****************************************************************************
    1: //    nsSHEntry: nsISHEntry
    1: //*****************************************************************************
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetScrollPosition(PRInt32 x, PRInt32 y)
    1: {
    1:   mScrollPositionX = x;
    1:   mScrollPositionY = y;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetScrollPosition(PRInt32 *x, PRInt32 *y)
    1: {
    1:   *x = mScrollPositionX;
    1:   *y = mScrollPositionY;
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::GetURIWasModified(bool* aOut)
73554: {
73554:   *aOut = mURIWasModified;
73554:   return NS_OK;
73554: }
73554: 
79445: NS_IMETHODIMP nsSHEntry::SetURIWasModified(bool aIn)
73554: {
73554:   mURIWasModified = aIn;
73554:   return NS_OK;
73554: }
73554: 
    1: NS_IMETHODIMP nsSHEntry::GetURI(nsIURI** aURI)
    1: {
    1:   *aURI = mURI;
    1:   NS_IF_ADDREF(*aURI);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetURI(nsIURI* aURI)
    1: {
    1:   mURI = aURI;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetReferrerURI(nsIURI **aReferrerURI)
    1: {
    1:   *aReferrerURI = mReferrerURI;
    1:   NS_IF_ADDREF(*aReferrerURI);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetReferrerURI(nsIURI *aReferrerURI)
    1: {
    1:   mReferrerURI = aReferrerURI;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::SetContentViewer(nsIContentViewer *aViewer)
    1: {
80574:   NS_PRECONDITION(!aViewer || !mContentViewer, "SHEntry already contains viewer");
80574: 
80574:   if (mContentViewer || !aViewer) {
80574:     DropPresentationState();
80574:   }
80574: 
80574:   mContentViewer = aViewer;
80574: 
80574:   if (mContentViewer) {
80574:     gHistoryTracker->AddObject(this);
80574: 
80574:     nsCOMPtr<nsIDOMDocument> domDoc;
80574:     mContentViewer->GetDOMDocument(getter_AddRefs(domDoc));
80574:     // Store observed document in strong pointer in case it is removed from
80574:     // the contentviewer
80574:     mDocument = do_QueryInterface(domDoc);
80574:     if (mDocument) {
80574:       mDocument->SetBFCacheEntry(this);
80574:       mDocument->AddMutationObserver(this);
80574:     }
80574:   }
80574: 
80574:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetContentViewer(nsIContentViewer **aResult)
    1: {
80574:   *aResult = mContentViewer;
    1:   NS_IF_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetAnyContentViewer(nsISHEntry **aOwnerEntry,
    1:                                nsIContentViewer **aResult)
    1: {
    1:   // Find a content viewer in the root node or any of its children,
    1:   // assuming that there is only one content viewer total in any one
    1:   // nsSHEntry tree
    1:   GetContentViewer(aResult);
    1:   if (*aResult) {
    1: #ifdef DEBUG_PAGE_CACHE 
    1:     printf("Found content viewer\n");
    1: #endif
    1:     *aOwnerEntry = this;
    1:     NS_ADDREF(*aOwnerEntry);
    1:     return NS_OK;
    1:   }
    1:   // The root SHEntry doesn't have a ContentViewer, so check child nodes
    1:   for (PRInt32 i = 0; i < mChildren.Count(); i++) {
    1:     nsISHEntry* child = mChildren[i];
    1:     if (child) {
    1: #ifdef DEBUG_PAGE_CACHE
    1:       printf("Evaluating SHEntry child %d\n", i);
    1: #endif
    1:       child->GetAnyContentViewer(aOwnerEntry, aResult);
    1:       if (*aResult) {
    1:         return NS_OK;
    1:       }
    1:     }
    1:   }
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
79445: nsSHEntry::SetSticky(bool aSticky)
    1: {
80574:   mSticky = aSticky;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
79445: nsSHEntry::GetSticky(bool *aSticky)
    1: {
80574:   *aSticky = mSticky;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetTitle(PRUnichar** aTitle)
    1: {
    1:   // Check for empty title...
    1:   if (mTitle.IsEmpty() && mURI) {
    1:     // Default title is the URL.
    1:     nsCAutoString spec;
    1:     if (NS_SUCCEEDED(mURI->GetSpec(spec)))
    1:       AppendUTF8toUTF16(spec, mTitle);
    1:   }
    1: 
    1:   *aTitle = ToNewUnicode(mTitle);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetTitle(const nsAString &aTitle)
    1: {
    1:   mTitle = aTitle;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetPostData(nsIInputStream** aResult)
    1: {
    1:   *aResult = mPostData;
    1:   NS_IF_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetPostData(nsIInputStream* aPostData)
    1: {
    1:   mPostData = aPostData;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetLayoutHistoryState(nsILayoutHistoryState** aResult)
    1: {
80574:   *aResult = mLayoutHistoryState;
    1:   NS_IF_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetLayoutHistoryState(nsILayoutHistoryState* aState)
    1: {
80574:   mLayoutHistoryState = aState;
80574:   if (mLayoutHistoryState)
80574:     mLayoutHistoryState->SetScrollPositionOnly(!mSaveLayoutState);
22262: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetLoadType(PRUint32 * aResult)
    1: {
    1:   *aResult = mLoadType;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetLoadType(PRUint32  aLoadType)
    1: {
    1:   mLoadType = aLoadType;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetID(PRUint32 * aResult)
    1: {
    1:   *aResult = mID;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetID(PRUint32  aID)
    1: {
    1:   mID = aID;
    1:   return NS_OK;
    1: }
    1: 
80574: NS_IMETHODIMP nsSHEntry::GetDocIdentifier(PRUint64 * aResult)
37802: {
80574:   *aResult = mDocIdentifier;
80574:   return NS_OK;
80574: }
80574: 
80574: NS_IMETHODIMP nsSHEntry::SetDocIdentifier(PRUint64 aDocIdentifier)
80574: {
80574:   // This ensures that after a session restore, gEntryDocIdentifier is greater
80574:   // than all SHEntries' docIdentifiers, which ensures that we'll never repeat
80574:   // a doc identifier.
80574:   if (aDocIdentifier >= gEntryDocIdentifier)
80574:     gEntryDocIdentifier = aDocIdentifier + 1;
80574: 
80574:   mDocIdentifier = aDocIdentifier;
80574:   return NS_OK;
80574: }
80574: 
80574: NS_IMETHODIMP nsSHEntry::SetUniqueDocIdentifier()
80574: {
80574:   mDocIdentifier = gEntryDocIdentifier++;
80574:   return NS_OK;
37802: }
37802: 
79445: NS_IMETHODIMP nsSHEntry::GetIsSubFrame(bool * aFlag)
    1: {
80574:   *aFlag = mIsFrameNavigation;
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::SetIsSubFrame(bool    aFlag)
    1: {
80574:   mIsFrameNavigation = aFlag;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetCacheKey(nsISupports** aResult)
    1: {
80574:   *aResult = mCacheKey;
    1:   NS_IF_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetCacheKey(nsISupports* aCacheKey)
    1: {
80574:   mCacheKey = aCacheKey;
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::GetSaveLayoutStateFlag(bool * aFlag)
    1: {
80574:   *aFlag = mSaveLayoutState;
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::SetSaveLayoutStateFlag(bool    aFlag)
    1: {
80574:   mSaveLayoutState = aFlag;
80574:   if (mLayoutHistoryState)
80574:     mLayoutHistoryState->SetScrollPositionOnly(!aFlag);
    1: 
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::GetExpirationStatus(bool * aFlag)
    1: {
80574:   *aFlag = mExpired;
    1:   return NS_OK;
    1: }
    1: 
79445: NS_IMETHODIMP nsSHEntry::SetExpirationStatus(bool    aFlag)
    1: {
80574:   mExpired = aFlag;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::GetContentType(nsACString& aContentType)
    1: {
80574:   aContentType = mContentType;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsSHEntry::SetContentType(const nsACString& aContentType)
    1: {
80574:   mContentType = aContentType;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::Create(nsIURI * aURI, const nsAString &aTitle,
    1:                   nsIInputStream * aInputStream,
    1:                   nsILayoutHistoryState * aLayoutHistoryState,
    1:                   nsISupports * aCacheKey, const nsACString& aContentType,
50721:                   nsISupports* aOwner,
79445:                   PRUint64 aDocShellID, bool aDynamicCreation)
    1: {
    1:   mURI = aURI;
    1:   mTitle = aTitle;
    1:   mPostData = aInputStream;
80574:   mCacheKey = aCacheKey;
80574:   mContentType = aContentType;
80574:   mOwner = aOwner;
80574:   mDocShellID = aDocShellID;
80574:   mDynamicallyCreated = aDynamicCreation;
    1: 
    1:   // Set the LoadType by default to loadHistory during creation
    1:   mLoadType = (PRUint32) nsIDocShellLoadInfo::loadHistory;
    1: 
    1:   // By default all entries are set false for subframe flag. 
    1:   // nsDocShell::CloneAndReplace() which creates entries for
    1:   // all subframe navigations, sets the flag to true.
80574:   mIsFrameNavigation = false;
    1: 
    1:   // By default we save LayoutHistoryState
80574:   mSaveLayoutState = true;
80574:   mLayoutHistoryState = aLayoutHistoryState;
    1: 
    1:   //By default the page is not expired
80574:   mExpired = false;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::Clone(nsISHEntry ** aResult)
    1: {
    1:   *aResult = new nsSHEntry(*this);
80574:   if (!*aResult)
80574:     return NS_ERROR_OUT_OF_MEMORY;
    1:   NS_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetParent(nsISHEntry ** aResult)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aResult);
80574:   *aResult = mParent;
    1:   NS_IF_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::SetParent(nsISHEntry * aParent)
    1: {
    1:   /* parent not Addrefed on purpose to avoid cyclic reference
    1:    * Null parent is OK
    1:    *
    1:    * XXX this method should not be scriptable if this is the case!!
    1:    */
80574:   mParent = aParent;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::SetWindowState(nsISupports *aState)
    1: {
80574:   mWindowState = aState;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetWindowState(nsISupports **aState)
    1: {
80574:   NS_IF_ADDREF(*aState = mWindowState);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
23738: nsSHEntry::SetViewerBounds(const nsIntRect &aBounds)
    1: {
80574:   mViewerBounds = aBounds;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
23738: nsSHEntry::GetViewerBounds(nsIntRect &aBounds)
    1: {
80574:   aBounds = mViewerBounds;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetOwner(nsISupports **aOwner)
    1: {
80574:   NS_IF_ADDREF(*aOwner = mOwner);
    1:   return NS_OK;
    1: }
    1: 
 6007: NS_IMETHODIMP
 6007: nsSHEntry::SetOwner(nsISupports *aOwner)
 6007: {
80574:   mOwner = aOwner;
 6007:   return NS_OK;
 6007: }
 6007: 
    1: //*****************************************************************************
    1: //    nsSHEntry: nsISHContainer
    1: //*****************************************************************************
    1: 
    1: NS_IMETHODIMP 
    1: nsSHEntry::GetChildCount(PRInt32 * aCount)
    1: {
    1:   *aCount = mChildren.Count();
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::AddChild(nsISHEntry * aChild, PRInt32 aOffset)
    1: {
50721:   if (aChild) {
50721:     NS_ENSURE_SUCCESS(aChild->SetParent(this), NS_ERROR_FAILURE);
50721:   }
    1: 
50721:   if (aOffset < 0) {
50721:     mChildren.AppendObject(aChild);
50721:     return NS_OK;
50721:   }
    1: 
    1:   //
    1:   // Bug 52670: Ensure children are added in order.
    1:   //
    1:   //  Later frames in the child list may load faster and get appended
    1:   //  before earlier frames, causing session history to be scrambled.
    1:   //  By growing the list here, they are added to the right position.
    1:   //
    1:   //  Assert that aOffset will not be so high as to grow us a lot.
    1:   //
    1:   NS_ASSERTION(aOffset < (mChildren.Count()+1023), "Large frames array!\n");
    1: 
79445:   bool newChildIsDyn = false;
63711:   if (aChild) {
63711:     aChild->IsDynamicallyAdded(&newChildIsDyn);
63711:   }
63711: 
63711:   // If the new child is dynamically added, try to add it to aOffset, but if
63711:   // there are non-dynamically added children, the child must be after those.
63711:   if (newChildIsDyn) {
63711:     PRInt32 lastNonDyn = aOffset - 1;
63711:     for (PRInt32 i = aOffset; i < mChildren.Count(); ++i) {
63711:       nsISHEntry* entry = mChildren[i];
63711:       if (entry) {
79445:         bool dyn = false;
63711:         entry->IsDynamicallyAdded(&dyn);
63711:         if (dyn) {
63711:           break;
63711:         } else {
63711:           lastNonDyn = i;
    1:         }
    1:       }
63711:     }
63137:     // InsertObjectAt allows only appending one object.
63137:     // If aOffset is larger than Count(), we must first manually
63137:     // set the capacity.
63137:     if (aOffset > mChildren.Count()) {
63137:       mChildren.SetCount(aOffset);
63137:     }
63711:     if (!mChildren.InsertObjectAt(aChild, lastNonDyn + 1)) {
51138:       NS_WARNING("Adding a child failed!");
51138:       aChild->SetParent(nsnull);
51138:       return NS_ERROR_FAILURE;
51138:     }
63711:   } else {
63711:     // If the new child isn't dynamically added, it should be set to aOffset.
63711:     // If there are dynamically added children before that, those must be
63711:     // moved to be after aOffset.
63711:     if (mChildren.Count() > 0) {
72496:       PRInt32 start = NS_MIN(mChildren.Count() - 1, aOffset);
63711:       PRInt32 dynEntryIndex = -1;
63711:       nsISHEntry* dynEntry = nsnull;
63711:       for (PRInt32 i = start; i >= 0; --i) {
63711:         nsISHEntry* entry = mChildren[i];
63711:         if (entry) {
79445:           bool dyn = false;
63711:           entry->IsDynamicallyAdded(&dyn);
63711:           if (dyn) {
63711:             dynEntryIndex = i;
63711:             dynEntry = entry;
63711:           } else {
63711:             break;
63711:           }
63711:         }
63711:       }
63711:   
63711:       if (dynEntry) {
63711:         nsCOMArray<nsISHEntry> tmp;
63711:         tmp.SetCount(aOffset - dynEntryIndex + 1);
63711:         mChildren.InsertObjectsAt(tmp, dynEntryIndex);
63711:         NS_ASSERTION(mChildren[aOffset + 1] == dynEntry, "Whaat?");
63711:       }
63711:     }
63711:     
63711: 
63711:     // Make sure there isn't anything at aOffset.
63711:     if (aOffset < mChildren.Count()) {
63711:       nsISHEntry* oldChild = mChildren[aOffset];
63711:       if (oldChild && oldChild != aChild) {
63711:         NS_ERROR("Adding a child where we already have a child? This may misbehave");
63711:         oldChild->SetParent(nsnull);
63711:       }
63711:     }
63711: 
63711:     if (!mChildren.ReplaceObjectAt(aChild, aOffset)) {
63711:       NS_WARNING("Adding a child failed!");
63711:       aChild->SetParent(nsnull);
63711:       return NS_ERROR_FAILURE;
63711:     }
63711:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::RemoveChild(nsISHEntry * aChild)
    1: {
    1:   NS_ENSURE_TRUE(aChild, NS_ERROR_FAILURE);
79445:   bool childRemoved = false;
79445:   bool dynamic = false;
50721:   aChild->IsDynamicallyAdded(&dynamic);
50721:   if (dynamic) {
50721:     childRemoved = mChildren.RemoveObject(aChild);
50721:   } else {
50721:     PRInt32 index = mChildren.IndexOfObject(aChild);
50721:     if (index >= 0) {
50721:       childRemoved = mChildren.ReplaceObjectAt(nsnull, index);
50721:     }
50721:   }
    1:   if (childRemoved)
    1:     aChild->SetParent(nsnull);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetChildAt(PRInt32 aIndex, nsISHEntry ** aResult)
    1: {
    1:   if (aIndex >= 0 && aIndex < mChildren.Count()) {
    1:     *aResult = mChildren[aIndex];
    1:     // yes, mChildren can have holes in it.  AddChild's offset parameter makes
    1:     // that possible.
    1:     NS_IF_ADDREF(*aResult);
    1:   } else {
    1:     *aResult = nsnull;
    1:   }
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::AddChildShell(nsIDocShellTreeItem *aShell)
    1: {
    1:   NS_ASSERTION(aShell, "Null child shell added to history entry");
80574:   mChildShells.AppendObject(aShell);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::ChildShellAt(PRInt32 aIndex, nsIDocShellTreeItem **aShell)
    1: {
80574:   NS_IF_ADDREF(*aShell = mChildShells.SafeObjectAt(aIndex));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::ClearChildShells()
    1: {
80574:   mChildShells.Clear();
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::GetRefreshURIList(nsISupportsArray **aList)
    1: {
80574:   NS_IF_ADDREF(*aList = mRefreshURIList);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::SetRefreshURIList(nsISupportsArray *aList)
    1: {
80574:   mRefreshURIList = aList;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsSHEntry::SyncPresentationState()
    1: {
80574:   if (mContentViewer && mWindowState) {
80574:     // If we have a content viewer and a window state, we should be ok.
80574:     return NS_OK;
    1:   }
    1: 
80574:   DropPresentationState();
80574: 
80574:   return NS_OK;
80574: }
80574: 
80574: void
80574: nsSHEntry::DropPresentationState()
80574: {
80574:   nsRefPtr<nsSHEntry> kungFuDeathGrip = this;
80574: 
80574:   if (mDocument) {
80574:     mDocument->SetBFCacheEntry(nsnull);
80574:     mDocument->RemoveMutationObserver(this);
80574:     mDocument = nsnull;
80574:   }
80574:   if (mContentViewer)
80574:     mContentViewer->ClearHistoryEntry();
80574: 
80574:   StopTrackingEntry(this);
80574:   mContentViewer = nsnull;
80574:   mSticky = true;
80574:   mWindowState = nsnull;
80574:   mViewerBounds.SetRect(0, 0, 0, 0);
80574:   mChildShells.Clear();
80574:   mRefreshURIList = nsnull;
80574:   mEditorData = nsnull;
80574: }
80574: 
80574: void
80574: nsSHEntry::Expire()
80574: {
80574:   // This entry has timed out. If we still have a content viewer, we need to
80574:   // get it evicted.
80574:   if (!mContentViewer)
80574:     return;
80574:   nsCOMPtr<nsISupports> container;
80574:   mContentViewer->GetContainer(getter_AddRefs(container));
80574:   nsCOMPtr<nsIDocShellTreeItem> treeItem = do_QueryInterface(container);
80574:   if (!treeItem)
80574:     return;
80574:   // We need to find the root DocShell since only that object has an
80574:   // SHistory and we need the SHistory to evict content viewers
80574:   nsCOMPtr<nsIDocShellTreeItem> root;
80574:   treeItem->GetSameTypeRootTreeItem(getter_AddRefs(root));
80574:   nsCOMPtr<nsIWebNavigation> webNav = do_QueryInterface(root);
80574:   nsCOMPtr<nsISHistory> history;
80574:   webNav->GetSessionHistory(getter_AddRefs(history));
80574:   nsCOMPtr<nsISHistoryInternal> historyInt = do_QueryInterface(history);
80574:   if (!historyInt)
80574:     return;
80574:   historyInt->EvictExpiredContentViewerForEntry(this);
80574: }
80574: 
80574: //*****************************************************************************
80574: //    nsSHEntry: nsIMutationObserver
80574: //*****************************************************************************
80574: 
80574: void
80574: nsSHEntry::NodeWillBeDestroyed(const nsINode* aNode)
80574: {
80574:   NS_NOTREACHED("Document destroyed while we're holding a strong ref to it");
80574: }
80574: 
80574: void
80574: nsSHEntry::CharacterDataWillChange(nsIDocument* aDocument,
80574:                                    nsIContent* aContent,
80574:                                    CharacterDataChangeInfo* aInfo)
80574: {
80574: }
80574: 
80574: void
80574: nsSHEntry::CharacterDataChanged(nsIDocument* aDocument,
80574:                                 nsIContent* aContent,
80574:                                 CharacterDataChangeInfo* aInfo)
80574: {
80574:   RemoveFromBFCacheAsync();
80574: }
80574: 
80574: void
80574: nsSHEntry::AttributeWillChange(nsIDocument* aDocument,
80574:                                dom::Element* aContent,
80574:                                PRInt32 aNameSpaceID,
80574:                                nsIAtom* aAttribute,
80574:                                PRInt32 aModType)
80574: {
80574: }
80574: 
80574: void
80574: nsSHEntry::AttributeChanged(nsIDocument* aDocument,
80574:                             dom::Element* aElement,
80574:                             PRInt32 aNameSpaceID,
80574:                             nsIAtom* aAttribute,
80574:                             PRInt32 aModType)
80574: {
80574:   RemoveFromBFCacheAsync();
80574: }
80574: 
80574: void
80574: nsSHEntry::ContentAppended(nsIDocument* aDocument,
80574:                            nsIContent* aContainer,
80574:                            nsIContent* aFirstNewContent,
80574:                            PRInt32 /* unused */)
80574: {
80574:   RemoveFromBFCacheAsync();
80574: }
80574: 
80574: void
80574: nsSHEntry::ContentInserted(nsIDocument* aDocument,
80574:                            nsIContent* aContainer,
80574:                            nsIContent* aChild,
80574:                            PRInt32 /* unused */)
80574: {
80574:   RemoveFromBFCacheAsync();
80574: }
80574: 
80574: void
80574: nsSHEntry::ContentRemoved(nsIDocument* aDocument,
80574:                           nsIContent* aContainer,
80574:                           nsIContent* aChild,
80574:                           PRInt32 aIndexInContainer,
80574:                           nsIContent* aPreviousSibling)
80574: {
80574:   RemoveFromBFCacheAsync();
80574: }
80574: 
80574: void
80574: nsSHEntry::ParentChainChanged(nsIContent *aContent)
80574: {
80574: }
80574: 
80574: class DestroyViewerEvent : public nsRunnable
80574: {
80574: public:
80574:   DestroyViewerEvent(nsIContentViewer* aViewer, nsIDocument* aDocument)
80574:     : mViewer(aViewer),
80574:       mDocument(aDocument)
80574:   {}
80574: 
80574:   NS_IMETHOD Run()
80574:   {
80574:     if (mViewer)
80574:       mViewer->Destroy();
80574:     return NS_OK;
80574:   }
80574: 
80574:   nsCOMPtr<nsIContentViewer> mViewer;
80574:   nsCOMPtr<nsIDocument> mDocument;
80574: };
80574: 
    1: void
58185: nsSHEntry::RemoveFromBFCacheSync()
    1: {
80574:   NS_ASSERTION(mContentViewer && mDocument,
80574:                "we're not in the bfcache!");
80574: 
80574:   nsCOMPtr<nsIContentViewer> viewer = mContentViewer;
80574:   DropPresentationState();
80574: 
80574:   // Warning! The call to DropPresentationState could have dropped the last
80574:   // reference to this nsSHEntry, so no accessing members beyond here.
80574: 
80574:   if (viewer) {
80574:     viewer->Destroy();
80574:   }
58185: }
58185: 
58185: void
58185: nsSHEntry::RemoveFromBFCacheAsync()
58185: {
80574:   NS_ASSERTION(mContentViewer && mDocument,
80574:                "we're not in the bfcache!");
80574: 
80574:   // Release the reference to the contentviewer asynchronously so that the
80574:   // document doesn't get nuked mid-mutation.
80574: 
80574:   nsCOMPtr<nsIRunnable> evt =
80574:       new DestroyViewerEvent(mContentViewer, mDocument);
80574:   nsresult rv = NS_DispatchToCurrentThread(evt);
80574:   if (NS_FAILED(rv)) {
80574:     NS_WARNING("failed to dispatch DestroyViewerEvent");
80574:   }
80574:   else {
80574:     // Drop presentation. Also ensures that we don't post more then one
80574:     // PLEvent. Only do this if we succeeded in posting the event since
80574:     // otherwise the document could be torn down mid mutation causing crashes.
80574:     DropPresentationState();
80574:   }
80574:   // Warning! The call to DropPresentationState could have dropped the last
80574:   // reference to this nsSHEntry, so no accessing members beyond here.
    1: }
14631: 
14631: nsDocShellEditorData*
14631: nsSHEntry::ForgetEditorData()
14631: {
80574:   return mEditorData.forget();
14631: }
14631: 
14631: void
14631: nsSHEntry::SetEditorData(nsDocShellEditorData* aData)
14631: {
80574:   NS_ASSERTION(!(aData && mEditorData),
14631:                "We're going to overwrite an owning ref!");
80574:   if (mEditorData != aData)
80574:     mEditorData = aData;
14631: }
14631: 
79445: bool
14631: nsSHEntry::HasDetachedEditor()
14631: {
80574:   return mEditorData != nsnull;
14631: }
14631: 
37802: NS_IMETHODIMP
69563: nsSHEntry::GetStateData(nsIStructuredCloneContainer **aContainer)
37802: {
69563:   NS_ENSURE_ARG_POINTER(aContainer);
69563:   NS_IF_ADDREF(*aContainer = mStateData);
37802:   return NS_OK;
37802: }
37802: 
37802: NS_IMETHODIMP
69563: nsSHEntry::SetStateData(nsIStructuredCloneContainer *aContainer)
37802: {
69563:   mStateData = aContainer;
37802:   return NS_OK;
37802: }
37802: 
50721: NS_IMETHODIMP
79445: nsSHEntry::IsDynamicallyAdded(bool* aAdded)
50721: {
80574:   *aAdded = mDynamicallyCreated;
50721:   return NS_OK;
50721: }
50721: 
50721: NS_IMETHODIMP
79445: nsSHEntry::HasDynamicallyAddedChild(bool* aAdded)
50721: {
80486:   *aAdded = false;
50721:   for (PRInt32 i = 0; i < mChildren.Count(); ++i) {
50721:     nsISHEntry* entry = mChildren[i];
50721:     if (entry) {
50721:       entry->IsDynamicallyAdded(aAdded);
50721:       if (*aAdded) {
50721:         break;
50721:       }
50721:     }
50721:   }
50721:   return NS_OK;
50721: }
50721: 
50721: NS_IMETHODIMP
50721: nsSHEntry::GetDocshellID(PRUint64* aID)
50721: {
80574:   *aID = mDocShellID;
50721:   return NS_OK;
50721: }
50721: 
50721: NS_IMETHODIMP
50721: nsSHEntry::SetDocshellID(PRUint64 aID)
50721: {
80574:   mDocShellID = aID;
50721:   return NS_OK;
50721: }
50721: 
60876: 
60876: NS_IMETHODIMP
61326: nsSHEntry::GetLastTouched(PRUint32 *aLastTouched)
60876: {
80574:   *aLastTouched = mLastTouched;
60876:   return NS_OK;
60876: }
60876: 
60876: NS_IMETHODIMP
61326: nsSHEntry::SetLastTouched(PRUint32 aLastTouched)
60876: {
80574:   mLastTouched = aLastTouched;
60876:   return NS_OK;
60876: }
80574: 
