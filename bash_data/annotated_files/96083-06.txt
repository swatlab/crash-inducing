    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Implementation of DOM Core's nsIDOMText node.
    1:  */
    1: 
20503: #include "nsTextNode.h"
    1: #include "nsContentUtils.h"
    1: #include "nsIDOMEventListener.h"
    1: #include "nsIDOMMutationEvent.h"
96083: #include "nsIAttribute.h"
    1: #include "nsIDocument.h"
    1: #include "nsThreadUtils.h"
85101: #ifdef DEBUG
86939: #include "nsRange.h"
85101: #endif
    1: 
51350: using namespace mozilla::dom;
    1: 
    1: /**
    1:  * class used to implement attr() generated content
    1:  */
    1: class nsAttributeTextNode : public nsTextNode,
    1:                             public nsStubMutationObserver
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS_INHERITED
    1:   
94340:   nsAttributeTextNode(already_AddRefed<nsINodeInfo> aNodeInfo,
    1:                       PRInt32 aNameSpaceID,
    1:                       nsIAtom* aAttrName) :
    1:     nsTextNode(aNodeInfo),
16976:     mGrandparent(nsnull),
    1:     mNameSpaceID(aNameSpaceID),
    1:     mAttrName(aAttrName)
    1:   {
    1:     NS_ASSERTION(mNameSpaceID != kNameSpaceID_Unknown, "Must know namespace");
    1:     NS_ASSERTION(mAttrName, "Must have attr name");
    1:   }
    1: 
    1:   virtual ~nsAttributeTextNode() {
16976:     NS_ASSERTION(!mGrandparent, "We were not unbound!");
    1:   }
    1: 
    1:   virtual nsresult BindToTree(nsIDocument* aDocument, nsIContent* aParent,
    1:                               nsIContent* aBindingParent,
79445:                               bool aCompileEventHandlers);
79445:   virtual void UnbindFromTree(bool aDeep = true,
79445:                               bool aNullParent = true);
    1: 
 3410:   NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
20134:   NS_DECL_NSIMUTATIONOBSERVER_NODEWILLBEDESTROYED
    1: 
94340:   virtual nsGenericDOMDataNode *CloneDataNode(nsINodeInfo *aNodeInfo,
79445:                                               bool aCloneText) const
    1:   {
94340:     nsCOMPtr<nsINodeInfo> ni = aNodeInfo;
48124:     nsAttributeTextNode *it = new nsAttributeTextNode(ni.forget(),
    1:                                                       mNameSpaceID,
    1:                                                       mAttrName);
    1:     if (it && aCloneText) {
    1:       it->mText = mText;
    1:     }
    1: 
    1:     return it;
    1:   }
    1: 
    1:   // Public method for the event to run
    1:   void UpdateText() {
80486:     UpdateText(true);
    1:   }
    1: 
    1: private:
    1:   // Update our text to our parent's current attr value
79445:   void UpdateText(bool aNotify);
    1: 
16976:   // This doesn't need to be a strong pointer because it's only non-null
16976:   // while we're bound to the document tree, and it points to an ancestor
16976:   // so the ancestor must be bound to the document tree the whole time
16976:   // and can't be deleted.
16976:   nsIContent* mGrandparent;
    1:   // What attribute we're showing
    1:   PRInt32 mNameSpaceID;
    1:   nsCOMPtr<nsIAtom> mAttrName;
    1: };
    1: 
    1: nsresult
    1: NS_NewTextNode(nsIContent** aInstancePtrResult,
    1:                nsNodeInfoManager *aNodeInfoManager)
    1: {
    1:   NS_PRECONDITION(aNodeInfoManager, "Missing nodeInfoManager");
    1: 
    1:   *aInstancePtrResult = nsnull;
    1: 
94340:   nsCOMPtr<nsINodeInfo> ni = aNodeInfoManager->GetTextNodeInfo();
    1:   if (!ni) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
48124:   nsTextNode *instance = new nsTextNode(ni.forget());
    1:   if (!instance) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
    1:   NS_ADDREF(*aInstancePtrResult = instance);
    1: 
    1:   return NS_OK;
    1: }
    1: 
94340: nsTextNode::nsTextNode(already_AddRefed<nsINodeInfo> aNodeInfo)
70839:   : nsGenericDOMDataNode(aNodeInfo)
    1: {
71770:   NS_ABORT_IF_FALSE(mNodeInfo->NodeType() == nsIDOMNode::TEXT_NODE,
71770:                     "Bad NodeType in aNodeInfo");
    1: }
    1: 
    1: nsTextNode::~nsTextNode()
    1: {
    1: }
    1: 
    1: NS_IMPL_ADDREF_INHERITED(nsTextNode, nsGenericDOMDataNode)
    1: NS_IMPL_RELEASE_INHERITED(nsTextNode, nsGenericDOMDataNode)
    1: 
48124: DOMCI_NODE_DATA(Text, nsTextNode)
    1: 
    1: // QueryInterface implementation for nsTextNode
21218: NS_INTERFACE_TABLE_HEAD(nsTextNode)
21218:   NS_NODE_INTERFACE_TABLE3(nsTextNode, nsIDOMNode, nsIDOMText,
21218:                            nsIDOMCharacterData)
21218:   NS_INTERFACE_MAP_ENTRIES_CYCLE_COLLECTION(nsTextNode)
39587:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(Text)
    1: NS_INTERFACE_MAP_END_INHERITING(nsGenericDOMDataNode)
    1: 
79445: bool
    1: nsTextNode::IsNodeOfType(PRUint32 aFlags) const
    1: {
    1:   return !(aFlags & ~(eCONTENT | eTEXT | eDATA_NODE));
    1: }
    1: 
    1: nsGenericDOMDataNode*
94340: nsTextNode::CloneDataNode(nsINodeInfo *aNodeInfo, bool aCloneText) const
    1: {
94340:   nsCOMPtr<nsINodeInfo> ni = aNodeInfo;
48124:   nsTextNode *it = new nsTextNode(ni.forget());
    1:   if (it && aCloneText) {
    1:     it->mText = mText;
    1:   }
    1: 
    1:   return it;
    1: }
    1: 
76359: nsresult
96083: nsTextNode::BindToAttribute(nsIAttribute* aAttr)
96083: {
96083:   NS_ASSERTION(!IsInDoc(), "Unbind before binding!");
96083:   NS_ASSERTION(!GetNodeParent(), "Unbind before binding!");
96083:   NS_ASSERTION(HasSameOwnerDoc(aAttr), "Wrong owner document!");
96083: 
96083:   mParent = aAttr;
96083:   SetParentIsContent(false);
96083:   ClearInDocument();
96083:   return NS_OK;
96083: }
96083: 
96083: nsresult
96083: nsTextNode::UnbindFromAttribute()
96083: {
96083:   NS_ASSERTION(GetNodeParent(), "Bind before unbinding!");
96083:   NS_ASSERTION(GetNodeParent() &&
96083:                GetNodeParent()->IsNodeOfType(nsINode::eATTRIBUTE),
96083:                "Use this method only to unbind from an attribute!");
96083:   mParent = nsnull;
96083:   return NS_OK;
96083: }
96083: 
96083: nsresult
76359: nsTextNode::AppendTextForNormalize(const PRUnichar* aBuffer, PRUint32 aLength,
79445:                                    bool aNotify, nsIContent* aNextSibling)
76359: {
76359:   CharacterDataChangeInfo::Details details = {
76359:     CharacterDataChangeInfo::Details::eMerge, aNextSibling
76359:   };
76359:   return SetTextInternal(mText.GetLength(), 0, aBuffer, aLength, aNotify, &details);
76359: }
76359: 
    1: #ifdef DEBUG
    1: void
    1: nsTextNode::List(FILE* out, PRInt32 aIndent) const
    1: {
    1:   PRInt32 index;
    1:   for (index = aIndent; --index >= 0; ) fputs("  ", out);
    1: 
37267:   fprintf(out, "Text@%p", static_cast<const void*>(this));
42285:   fprintf(out, " flags=[%08x]", static_cast<unsigned int>(GetFlags()));
85101:   if (IsCommonAncestorForRangeInSelection()) {
86939:     typedef nsTHashtable<nsPtrHashKey<nsRange> > RangeHashTable;
85101:     RangeHashTable* ranges =
85101:       static_cast<RangeHashTable*>(GetProperty(nsGkAtoms::range));
85101:     fprintf(out, " ranges:%d", ranges ? ranges->Count() : 0);
85101:   }
41676:   fprintf(out, " primaryframe=%p", static_cast<void*>(GetPrimaryFrame()));
 2896:   fprintf(out, " refcount=%d<", mRefCnt.get());
    1: 
    1:   nsAutoString tmp;
    1:   ToCString(tmp, 0, mText.GetLength());
    1:   fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
    1: 
    1:   fputs(">\n", out);
    1: }
    1: 
    1: void
79445: nsTextNode::DumpContent(FILE* out, PRInt32 aIndent, bool aDumpAll) const
    1: {
    1:   if(aDumpAll) {
    1:     PRInt32 index;
    1:     for (index = aIndent; --index >= 0; ) fputs("  ", out);
    1: 
    1:     nsAutoString tmp;
    1:     ToCString(tmp, 0, mText.GetLength());
    1: 
    1:     if(!tmp.EqualsLiteral("\\n")) {
    1:       fputs(NS_LossyConvertUTF16toASCII(tmp).get(), out);
    1:       if(aIndent) fputs("\n", out);
    1:     }
    1:   }
    1: }
    1: #endif
    1: 
    1: nsresult
    1: NS_NewAttributeContent(nsNodeInfoManager *aNodeInfoManager,
    1:                        PRInt32 aNameSpaceID, nsIAtom* aAttrName,
    1:                        nsIContent** aResult)
    1: {
    1:   NS_PRECONDITION(aNodeInfoManager, "Missing nodeInfoManager");
    1:   NS_PRECONDITION(aAttrName, "Must have an attr name");
    1:   NS_PRECONDITION(aNameSpaceID != kNameSpaceID_Unknown, "Must know namespace");
    1:   
    1:   *aResult = nsnull;
    1: 
94340:   nsCOMPtr<nsINodeInfo> ni = aNodeInfoManager->GetTextNodeInfo();
    1:   if (!ni) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
48124:   nsAttributeTextNode* textNode = new nsAttributeTextNode(ni.forget(),
48124:                                                           aNameSpaceID,
    1:                                                           aAttrName);
    1:   if (!textNode) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
    1:   NS_ADDREF(*aResult = textNode);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMPL_ISUPPORTS_INHERITED1(nsAttributeTextNode, nsTextNode,
    1:                              nsIMutationObserver)
    1: 
    1: nsresult
    1: nsAttributeTextNode::BindToTree(nsIDocument* aDocument, nsIContent* aParent,
    1:                                 nsIContent* aBindingParent,
79445:                                 bool aCompileEventHandlers)
    1: {
16976:   NS_PRECONDITION(aParent && aParent->GetParent(),
16976:                   "This node can't be a child of the document or of the document root");
    1: 
    1:   nsresult rv = nsTextNode::BindToTree(aDocument, aParent,
    1:                                        aBindingParent, aCompileEventHandlers);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
16976:   NS_ASSERTION(!mGrandparent, "We were already bound!");
16976:   mGrandparent = aParent->GetParent();
16976:   mGrandparent->AddMutationObserver(this);
    1: 
    1:   // Note that there is no need to notify here, since we have no
    1:   // frame yet at this point.
80486:   UpdateText(false);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: void
79445: nsAttributeTextNode::UnbindFromTree(bool aDeep, bool aNullParent)
    1: {
16976:   // UnbindFromTree can be called anytime so we have to be safe.
16976:   if (mGrandparent) {
16976:     // aNullParent might not be true here, but we want to remove the
16976:     // mutation observer anyway since we only need it while we're
16976:     // in the document.
16976:     mGrandparent->RemoveMutationObserver(this);
16976:     mGrandparent = nsnull;
    1:   }
    1:   nsTextNode::UnbindFromTree(aDeep, aNullParent);
    1: }
    1: 
    1: void
    1: nsAttributeTextNode::AttributeChanged(nsIDocument* aDocument,
51350:                                       Element* aElement,
    1:                                       PRInt32 aNameSpaceID,
    1:                                       nsIAtom* aAttribute,
35535:                                       PRInt32 aModType)
    1: {
    1:   if (aNameSpaceID == mNameSpaceID && aAttribute == mAttrName &&
51350:       aElement == mGrandparent) {
48013:     // Since UpdateText notifies, do it when it's safe to run script.  Note
48013:     // that if we get unbound while the event is up that's ok -- we'll just
48013:     // have no grandparent when it fires, and will do nothing.
41361:     void (nsAttributeTextNode::*update)() = &nsAttributeTextNode::UpdateText;
41361:     nsCOMPtr<nsIRunnable> ev = NS_NewRunnableMethod(this, update);
48013:     nsContentUtils::AddScriptRunner(ev);
    1:   }
    1: }
    1: 
    1: void
20134: nsAttributeTextNode::NodeWillBeDestroyed(const nsINode* aNode)
20134: {
20134:   NS_ASSERTION(aNode == static_cast<nsINode*>(mGrandparent), "Wrong node!");
20134:   mGrandparent = nsnull;
20134: }
20134: 
20134: void
79445: nsAttributeTextNode::UpdateText(bool aNotify)
    1: {
16976:   if (mGrandparent) {
    1:     nsAutoString attrValue;
16976:     mGrandparent->GetAttr(mNameSpaceID, mAttrName, attrValue);
    1:     SetText(attrValue, aNotify);
    1:   }  
    1: }
