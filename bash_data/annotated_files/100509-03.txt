     1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef GFX_IMAGESURFACE_H
     1: #define GFX_IMAGESURFACE_H
     1: 
     1: #include "gfxASurface.h"
     1: #include "gfxPoint.h"
     1: 
     1: // ARGB -- raw buffer.. wont be changed.. good for storing data.
     1: 
 53939: class gfxSubimageSurface;
 53939: 
100509: namespace mozilla {
100509: namespace gfx {
100509: class SourceSurface;
100509: }
100509: }
100509: 
     1: /**
     1:  * A raw image buffer. The format can be set in the constructor. Its main
     1:  * purpose is for storing read-only images and using it as a source surface,
     1:  * but it can also be drawn to.
     1:  */
     1: class THEBES_API gfxImageSurface : public gfxASurface {
     1: public:
     1:     /**
 15751:      * Construct an image surface around an existing buffer of image data.
 15751:      * @param aData A buffer containing the image data
 15751:      * @param aSize The size of the buffer
 15751:      * @param aStride The stride of the buffer
     1:      * @param format Format of the data
     1:      *
     1:      * @see gfxImageFormat
 15751:      */
 15751:     gfxImageSurface(unsigned char *aData, const gfxIntSize& aSize,
 15751:                     long aStride, gfxImageFormat aFormat);
 15751: 
 15751:     /**
 15751:      * Construct an image surface.
 15751:      * @param aSize The size of the buffer
 15751:      * @param format Format of the data
     1:      *
 15751:      * @see gfxImageFormat
     1:      */
 95670:     gfxImageSurface(const gfxIntSize& size, gfxImageFormat format, bool aClear = true);
     1:     gfxImageSurface(cairo_surface_t *csurf);
     1: 
     1:     virtual ~gfxImageSurface();
     1: 
     1:     // ImageSurface methods
     1:     gfxImageFormat Format() const { return mFormat; }
     1: 
 52185:     virtual const gfxIntSize GetSize() const { return mSize; }
 15297:     PRInt32 Width() const { return mSize.width; }
 15297:     PRInt32 Height() const { return mSize.height; }
     1: 
     1:     /**
     1:      * Distance in bytes between the start of a line and the start of the
     1:      * next line.
     1:      */
 15297:     PRInt32 Stride() const { return mStride; }
     1:     /**
     1:      * Returns a pointer for the image data. Users of this function can
     1:      * write to it, but must not attempt to free the buffer.
     1:      */
 15297:     unsigned char* Data() const { return mData; } // delete this data under us and die.
 15297:     /**
 15297:      * Returns the total size of the image data.
 15297:      */
 15297:     PRInt32 GetDataSize() const { return mStride*mSize.height; }
     1: 
 11244:     /* Fast copy from another image surface; returns TRUE if successful, FALSE otherwise */
 79445:     bool CopyFrom (gfxImageSurface *other);
 11244: 
100509:     /**
100509:      * Fast copy from a source surface; returns TRUE if successful, FALSE otherwise
100509:      * Assumes that the format of this surface is compatable with aSurface
100509:      */
100509:     bool CopyFrom (mozilla::gfx::SourceSurface *aSurface);
100509: 
 53939:     /* return new Subimage with pointing to original image starting from aRect.pos
 53939:      * and size of aRect.size. New subimage keeping current image reference
 53939:      */
 53939:     already_AddRefed<gfxSubimageSurface> GetSubimage(const gfxRect& aRect);
 53939: 
 57344:     virtual already_AddRefed<gfxImageSurface> GetAsImageSurface();
 57344: 
 63369:     /** See gfxASurface.h. */
 63369:     NS_OVERRIDE
 63369:     virtual void MovePixels(const nsIntRect& aSourceRect,
 63369:                             const nsIntPoint& aDestTopLeft);
 63369: 
 42262: protected:
 42262:     gfxImageSurface();
 57209:     void InitWithData(unsigned char *aData, const gfxIntSize& aSize,
 57209:                       long aStride, gfxImageFormat aFormat);
 42262:     void InitFromSurface(cairo_surface_t *csurf);
 59847:     long ComputeStride() const { return ComputeStride(mSize, mFormat); }
 59847: 
 59847:     static long ComputeStride(const gfxIntSize&, gfxImageFormat);
     1: 
 79633:     void MakeInvalid();
 79633: 
     1:     gfxIntSize mSize;
 79445:     bool mOwnsData;
     1:     unsigned char *mData;
     1:     gfxImageFormat mFormat;
     1:     long mStride;
     1: };
     1: 
 53939: class THEBES_API gfxSubimageSurface : public gfxImageSurface {
 53939: protected:
 53939:     friend class gfxImageSurface;
 53939:     gfxSubimageSurface(gfxImageSurface* aParent,
 53939:                        unsigned char* aData,
 53939:                        const gfxIntSize& aSize);
 53939: private:
 53939:     nsRefPtr<gfxImageSurface> mParent;
 53939: };
 53939: 
     1: #endif /* GFX_IMAGESURFACE_H */
