 86341: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 86341: 
 86341: #include <windows.h>
 86341: #include <tlhelp32.h>
 93230: #include <dbghelp.h>
 86341: 
 86341: #include "shared-libraries.h"
 88319: #include "nsWindowsHelpers.h"
 86341: 
 92058: #define CV_SIGNATURE 0x53445352 // 'SDSR'
 92058: 
 92058: struct CodeViewRecord70
 92058: {
 92058:   uint32_t signature;
 92058:   GUID pdbSignature;
 92058:   uint32_t pdbAge;
 93529:   char pdbFileName[1];
 92058: };
 92058: 
 93529: static bool GetPdbInfo(uintptr_t aStart, nsID& aSignature, uint32_t& aAge, char** aPdbName)
 92058: {
 92058:   if (!aStart) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   PIMAGE_DOS_HEADER dosHeader = reinterpret_cast<PIMAGE_DOS_HEADER>(aStart);
 92058:   if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   PIMAGE_NT_HEADERS ntHeaders = reinterpret_cast<PIMAGE_NT_HEADERS>(
 92058:       aStart + dosHeader->e_lfanew);
 92058:   if (ntHeaders->Signature != IMAGE_NT_SIGNATURE) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   uint32_t relativeVirtualAddress =
 92058:     ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG].VirtualAddress;
 92058:   if (!relativeVirtualAddress) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   PIMAGE_DEBUG_DIRECTORY debugDirectory =
 92058:     reinterpret_cast<PIMAGE_DEBUG_DIRECTORY>(aStart + relativeVirtualAddress);
 92058:   if (!debugDirectory || debugDirectory->Type != IMAGE_DEBUG_TYPE_CODEVIEW) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   CodeViewRecord70 *debugInfo = reinterpret_cast<CodeViewRecord70 *>(
 92058:       aStart + debugDirectory->AddressOfRawData);
 92058:   if (!debugInfo || debugInfo->signature != CV_SIGNATURE) {
 92058:     return false;
 92058:   }
 92058: 
 92058:   aAge = debugInfo->pdbAge;
 92058:   GUID& pdbSignature = debugInfo->pdbSignature;
 92058:   aSignature.m0 = pdbSignature.Data1;
 92058:   aSignature.m1 = pdbSignature.Data2;
 92058:   aSignature.m2 = pdbSignature.Data3;
 92058:   memcpy(aSignature.m3, pdbSignature.Data4, sizeof(pdbSignature.Data4));
 93529: 
 93529:   // The PDB file name could be different from module filename, so report both
 93529:   // e.g. The PDB for C:\Windows\SysWOW64\ntdll.dll is wntdll.pdb
 93529:   char * leafName = strrchr(debugInfo->pdbFileName, '\\');
 93529:   if (leafName) {
 93529:     // Only report the file portion of the path
 93529:     *aPdbName = leafName + 1;
 93529:   } else {
 93529:     *aPdbName = debugInfo->pdbFileName;
 93529:   }
 93529: 
 92058:   return true;
 92058: }
 92058: 
 86341: SharedLibraryInfo SharedLibraryInfo::GetInfoForSelf()
 86341: {
 86341:   SharedLibraryInfo sharedLibraryInfo;
 86341: 
 88319:   nsAutoHandle snap(CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, GetCurrentProcessId()));
 86341: 
 88319:   MODULEENTRY32 module = {0};
 88319:   module.dwSize = sizeof(MODULEENTRY32);
 88319:   if (Module32First(snap, &module)) {
 86341:     do {
 92058:       nsID pdbSig;
 92058:       uint32_t pdbAge;
 93529:       char *pdbName = NULL;
103843: 
103843:       // Load the module again to make sure that its handle will remain remain
103843:       // valid as we attempt to read the PDB information from it.  We load the
103843:       // DLL as a datafile so that if the module actually gets unloaded between
103843:       // the call to Module32Next and the following LoadLibraryEx, we don't end
103843:       // up running the now newly loaded module's DllMain function.  If the
103843:       // module is already loaded, LoadLibraryEx just increments its refcount.
103843:       //
103843:       // Note that because of the race condition above, merely loading the DLL
103843:       // again is not safe enough, therefore we also need to make sure that we
103843:       // can read the memory mapped at the base address before we can safely
103843:       // proceed to actually access those pages.
103843:       HMODULE handleLock = LoadLibraryEx(module.szExePath, NULL, LOAD_LIBRARY_AS_DATAFILE);
103843:       MEMORY_BASIC_INFORMATION vmemInfo = {0};
103843:       if (handleLock &&
103843:           sizeof(vmemInfo) == VirtualQuery(module.modBaseAddr, &vmemInfo, sizeof(vmemInfo)) &&
103843:           vmemInfo.State == MEM_COMMIT &&
103843:           GetPdbInfo((uintptr_t)module.modBaseAddr, pdbSig, pdbAge, &pdbName)) {
 88319:         SharedLibrary shlib((uintptr_t)module.modBaseAddr,
 88319:                             (uintptr_t)module.modBaseAddr+module.modBaseSize,
 88319:                             0, // DLLs are always mapped at offset 0 on Windows
 92058:                             pdbSig,
 92058:                             pdbAge,
 93529:                             pdbName,
 88319:                             module.szModule);
 88319:         sharedLibraryInfo.AddSharedLibrary(shlib);
 92058:       }
103843:       FreeLibrary(handleLock); // ok to free null handles
 86341:     } while (Module32Next(snap, &module));
 88319:   }
 86341: 
 86341:   return sharedLibraryInfo;
 86341: }
 86341: 
