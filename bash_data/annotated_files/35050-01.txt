29366: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * vim: set ts=8 sw=4 et tw=78:
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * JS script operations.
    1:  */
    1: #include <string.h>
    1: #include "jstypes.h"
26316: #include "jsstdint.h"
    1: #include "jsutil.h" /* Added by JSIFY */
    1: #include "jsprf.h"
    1: #include "jsapi.h"
    1: #include "jsatom.h"
    1: #include "jscntxt.h"
18863: #include "jsversion.h"
    1: #include "jsdbgapi.h"
    1: #include "jsemit.h"
    1: #include "jsfun.h"
    1: #include "jsinterp.h"
    1: #include "jslock.h"
    1: #include "jsnum.h"
    1: #include "jsopcode.h"
 6561: #include "jsparse.h"
18955: #include "jsscope.h"
    1: #include "jsscript.h"
24879: #include "jstracer.h"
    1: #if JS_HAS_XDR
    1: #include "jsxdrapi.h"
    1: #endif
    1: 
32737: #include "jsscriptinlines.h"
32737: 
    1: #if JS_HAS_SCRIPT_OBJECT
    1: 
 4127: static const char js_script_exec_str[]    = "Script.prototype.exec";
 4127: static const char js_script_compile_str[] = "Script.prototype.compile";
    1: 
    1: /*
    1:  * This routine requires that obj has been locked previously.
    1:  */
    1: static jsint
    1: GetScriptExecDepth(JSContext *cx, JSObject *obj)
    1: {
    1:     jsval v;
    1: 
    1:     JS_ASSERT(JS_IS_OBJ_LOCKED(cx, obj));
    1:     v = LOCKED_OBJ_GET_SLOT(obj, JSSLOT_START(&js_ScriptClass));
34664:     return JSVAL_IS_VOID(v) ? 0 : JSVAL_TO_INT(v);
    1: }
    1: 
    1: static void
    1: AdjustScriptExecDepth(JSContext *cx, JSObject *obj, jsint delta)
    1: {
    1:     jsint execDepth;
    1: 
    1:     JS_LOCK_OBJ(cx, obj);
    1:     execDepth = GetScriptExecDepth(cx, obj);
    1:     LOCKED_OBJ_SET_SLOT(obj, JSSLOT_START(&js_ScriptClass),
    1:                         INT_TO_JSVAL(execDepth + delta));
    1:     JS_UNLOCK_OBJ(cx, obj);
    1: }
    1: 
    1: #if JS_HAS_TOSOURCE
    1: static JSBool
 4127: script_toSource(JSContext *cx, uintN argc, jsval *vp)
    1: {
 4127:     JSObject *obj;
    1:     uint32 indent;
    1:     JSScript *script;
    1:     size_t i, j, k, n;
    1:     char buf[16];
    1:     jschar *s, *t;
    1:     JSString *str;
    1: 
 4127:     obj = JS_THIS_OBJECT(cx, vp);
 4127:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, vp + 2))
    1:         return JS_FALSE;
    1: 
    1:     indent = 0;
12681:     if (argc != 0) {
12681:         indent = js_ValueToECMAUint32(cx, &vp[2]);
12694:         if (JSVAL_IS_NULL(vp[2]))
    1:             return JS_FALSE;
12681:     }
    1: 
31452:     script = (JSScript *) obj->getPrivate();
    1: 
    1:     /* Let n count the source string length, j the "front porch" length. */
    1:     j = JS_snprintf(buf, sizeof buf, "(new %s(", js_ScriptClass.name);
    1:     n = j + 2;
    1:     if (!script) {
    1:         /* Let k count the constructor argument string length. */
    1:         k = 0;
    1:         s = NULL;               /* quell GCC overwarning */
    1:     } else {
    1:         str = JS_DecompileScript(cx, script, "Script.prototype.toSource",
    1:                                  (uintN)indent);
    1:         if (!str)
    1:             return JS_FALSE;
    1:         str = js_QuoteString(cx, str, '\'');
    1:         if (!str)
    1:             return JS_FALSE;
34664:         const jschar *cs;
34664:         str->getCharsAndLength(cs, k);
34664:         s = const_cast<jschar *>(cs);
    1:         n += k;
    1:     }
    1: 
    1:     /* Allocate the source string and copy into it. */
30851:     t = (jschar *) cx->malloc((n + 1) * sizeof(jschar));
    1:     if (!t)
    1:         return JS_FALSE;
    1:     for (i = 0; i < j; i++)
    1:         t[i] = buf[i];
    1:     for (j = 0; j < k; i++, j++)
    1:         t[i] = s[j];
    1:     t[i++] = ')';
    1:     t[i++] = ')';
    1:     t[i] = 0;
    1: 
    1:     /* Create and return a JS string for t. */
    1:     str = JS_NewUCString(cx, t, n);
    1:     if (!str) {
30851:         cx->free(t);
    1:         return JS_FALSE;
    1:     }
 4127:     *vp = STRING_TO_JSVAL(str);
    1:     return JS_TRUE;
    1: }
    1: #endif /* JS_HAS_TOSOURCE */
    1: 
    1: static JSBool
 4127: script_toString(JSContext *cx, uintN argc, jsval *vp)
    1: {
    1:     uint32 indent;
 4127:     JSObject *obj;
    1:     JSScript *script;
    1:     JSString *str;
    1: 
    1:     indent = 0;
12681:     if (argc != 0) {
12681:         indent = js_ValueToECMAUint32(cx, &vp[2]);
12694:         if (JSVAL_IS_NULL(vp[2]))
    1:             return JS_FALSE;
12681:     }
    1: 
 4127:     obj = JS_THIS_OBJECT(cx, vp);
 4127:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, vp + 2))
    1:         return JS_FALSE;
31452:     script = (JSScript *) obj->getPrivate();
    1:     if (!script) {
 4127:         *vp = STRING_TO_JSVAL(cx->runtime->emptyString);
    1:         return JS_TRUE;
    1:     }
    1: 
    1:     str = JS_DecompileScript(cx, script, "Script.prototype.toString",
    1:                              (uintN)indent);
    1:     if (!str)
    1:         return JS_FALSE;
 4127:     *vp = STRING_TO_JSVAL(str);
    1:     return JS_TRUE;
    1: }
    1: 
    1: static JSBool
 4127: script_compile_sub(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
    1:                    jsval *rval)
    1: {
    1:     JSString *str;
    1:     JSObject *scopeobj;
    1:     JSScript *script, *oldscript;
18955:     JSStackFrame *caller;
    1:     const char *file;
    1:     uintN line;
    1:     JSPrincipals *principals;
    1:     jsint execDepth;
    1: 
    1:     /* Make sure obj is a Script object. */
    1:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, argv))
    1:         return JS_FALSE;
    1: 
    1:     /* If no args, leave private undefined and return early. */
    1:     if (argc == 0)
    1:         goto out;
    1: 
    1:     /* Otherwise, the first arg is the script source to compile. */
    1:     str = js_ValueToString(cx, argv[0]);
    1:     if (!str)
    1:         return JS_FALSE;
    1:     argv[0] = STRING_TO_JSVAL(str);
    1: 
    1:     scopeobj = NULL;
    1:     if (argc >= 2) {
    1:         if (!js_ValueToObject(cx, argv[1], &scopeobj))
    1:             return JS_FALSE;
    1:         argv[1] = OBJECT_TO_JSVAL(scopeobj);
    1:     }
    1: 
    1:     /* Compile using the caller's scope chain, which js_Invoke passes to fp. */
22652:     caller = js_GetScriptedCaller(cx, NULL);
18955:     JS_ASSERT(!caller || cx->fp->scopeChain == caller->scopeChain);
    1: 
    1:     if (caller) {
    1:         if (!scopeobj) {
    1:             scopeobj = js_GetScopeChain(cx, caller);
    1:             if (!scopeobj)
    1:                 return JS_FALSE;
    1:         }
    1: 
18955:         principals = JS_EvalFramePrincipals(cx, cx->fp, caller);
12690:         file = js_ComputeFilename(cx, caller, principals, &line);
    1:     } else {
    1:         file = NULL;
    1:         line = 0;
    1:         principals = NULL;
    1:     }
    1: 
    1:     /* Ensure we compile this script with the right (inner) principals. */
 4127:     scopeobj = js_CheckScopeChainValidity(cx, scopeobj, js_script_compile_str);
    1:     if (!scopeobj)
    1:         return JS_FALSE;
    1: 
    1:     /*
    1:      * Compile the new script using the caller's scope chain, a la eval().
 8444:      * Unlike jsobj.c:obj_eval, however, we do not pass TCF_COMPILE_N_GO in
18955:      * tcflags and use NULL for the callerFrame argument, because compilation
18955:      * is here separated from execution, and the run-time scope chain may not
18955:      * match the compile-time. TCF_COMPILE_N_GO is tested in jsemit.c and
18955:      * jsparse.c to optimize based on identity of run- and compile-time scope.
    1:      */
34290:     script = JSCompiler::compileScript(cx, scopeobj, NULL, principals,
34290:                                        TCF_NEED_MUTABLE_SCRIPT,
29366:                                        str->chars(), str->length(),
 8444:                                        NULL, file, line);
    1:     if (!script)
    1:         return JS_FALSE;
    1: 
    1:     JS_LOCK_OBJ(cx, obj);
    1:     execDepth = GetScriptExecDepth(cx, obj);
    1: 
    1:     /*
    1:      * execDepth must be 0 to allow compilation here, otherwise the JSScript
    1:      * struct can be released while running.
    1:      */
    1:     if (execDepth > 0) {
    1:         JS_UNLOCK_OBJ(cx, obj);
    1:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                              JSMSG_COMPILE_EXECED_SCRIPT);
    1:         return JS_FALSE;
    1:     }
    1: 
    1:     /* Swap script for obj's old script, if any. */
31452:     oldscript = (JSScript*) obj->getPrivate();
31452:     obj->setPrivate(script);
    1:     JS_UNLOCK_OBJ(cx, obj);
    1: 
    1:     if (oldscript)
    1:         js_DestroyScript(cx, oldscript);
    1: 
18285:     script->u.object = obj;
    1:     js_CallNewScriptHook(cx, script, NULL);
    1: 
    1: out:
    1:     /* Return the object. */
    1:     *rval = OBJECT_TO_JSVAL(obj);
    1:     return JS_TRUE;
    1: }
    1: 
    1: static JSBool
 4127: script_compile(JSContext *cx, uintN argc, jsval *vp)
 4127: {
 4127:     return script_compile_sub(cx, JS_THIS_OBJECT(cx, vp), argc, vp + 2, vp);
 4127: }
 4127: 
 4127: static JSBool
 4127: script_exec_sub(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
 4127:                 jsval *rval)
    1: {
25217:     JSObject *scopeobj;
22652:     JSStackFrame *caller;
    1:     JSPrincipals *principals;
    1:     JSScript *script;
    1:     JSBool ok;
    1: 
    1:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, argv))
    1:         return JS_FALSE;
    1: 
    1:     scopeobj = NULL;
 4127:     if (argc != 0) {
    1:         if (!js_ValueToObject(cx, argv[0], &scopeobj))
    1:             return JS_FALSE;
    1:         argv[0] = OBJECT_TO_JSVAL(scopeobj);
    1:     }
    1: 
    1:     /*
    1:      * Emulate eval() by using caller's this, var object, sharp array, etc.,
    1:      * all propagated by js_Execute via a non-null fourth (down) argument to
    1:      * js_Execute.  If there is no scripted caller, js_Execute uses its second
32774:      * (chain) argument to set the exec frame's varobj, thisv, and scopeChain.
    1:      *
    1:      * Unlike eval, which the compiler detects, Script.prototype.exec may be
    1:      * called from a lightweight function, or even from native code (in which
    1:      * case fp->varobj and fp->scopeChain are null).  If exec is called from
    1:      * a lightweight function, we will need to get a Call object representing
    1:      * its frame, to act as the var object and scope chain head.
    1:      */
22652:     caller = js_GetScriptedCaller(cx, NULL);
    1:     if (caller && !caller->varobj) {
    1:         /* Called from a lightweight function. */
    1:         JS_ASSERT(caller->fun && !JSFUN_HEAVYWEIGHT_TEST(caller->fun->flags));
    1: 
25217:         /* Scope chain links from Call object to caller's scope chain. */
25217:         if (!js_GetCallObject(cx, caller))
    1:             return JS_FALSE;
    1:     }
    1: 
    1:     if (!scopeobj) {
    1:         /* No scope object passed in: try to use the caller's scope chain. */
    1:         if (caller) {
    1:             /*
    1:              * Load caller->scopeChain after the conditional js_GetCallObject
    1:              * call above, which resets scopeChain as well as varobj.
    1:              */
    1:             scopeobj = js_GetScopeChain(cx, caller);
    1:             if (!scopeobj)
    1:                 return JS_FALSE;
    1:         } else {
    1:             /*
    1:              * Called from native code, so we don't know what scope object to
25217:              * use.  We could use the caller's scope chain (see above), but Script.prototype.exec
    1:              * might be a shared/sealed "superglobal" method.  A more general
    1:              * approach would use cx->globalObject, which will be the same as
    1:              * exec.__parent__ in the non-superglobal case.  In the superglobal
    1:              * case it's the right object: the global, not the superglobal.
    1:              */
    1:             scopeobj = cx->globalObject;
    1:         }
    1:     }
    1: 
 4127:     scopeobj = js_CheckScopeChainValidity(cx, scopeobj, js_script_exec_str);
    1:     if (!scopeobj)
    1:         return JS_FALSE;
    1: 
    1:     /* Keep track of nesting depth for the script. */
    1:     AdjustScriptExecDepth(cx, obj, 1);
    1: 
    1:     /* Must get to out label after this */
31452:     script = (JSScript *) obj->getPrivate();
    1:     if (!script) {
    1:         ok = JS_FALSE;
    1:         goto out;
    1:     }
    1: 
    1:     /* Belt-and-braces: check that this script object has access to scopeobj. */
    1:     principals = script->principals;
    1:     ok = js_CheckPrincipalsAccess(cx, scopeobj, principals,
    1:                                   CLASS_ATOM(cx, Script));
    1:     if (!ok)
    1:         goto out;
    1: 
    1:     ok = js_Execute(cx, scopeobj, script, caller, JSFRAME_EVAL, rval);
    1: 
    1: out:
    1:     AdjustScriptExecDepth(cx, obj, -1);
    1:     return ok;
    1: }
    1: 
 4127: static JSBool
 4127: script_exec(JSContext *cx, uintN argc, jsval *vp)
 4127: {
 4127:     return script_exec_sub(cx, JS_THIS_OBJECT(cx, vp), argc, vp + 2, vp);
 4127: }
 4127: 
    1: #endif /* JS_HAS_SCRIPT_OBJECT */
    1: 
34290: static const jsbytecode emptyScriptCode[] = {JSOP_STOP, SRC_NULL};
34290: 
34290: /* static */ const JSScript JSScript::emptyScriptConst = {
34290:     const_cast<jsbytecode*>(emptyScriptCode),
34290:     1, JSVERSION_DEFAULT, 0, 0, 0, 0, 0, 1, 0, 0,
34290:     const_cast<jsbytecode*>(emptyScriptCode),
34290:     {0, NULL}, NULL, 0, 0, 0, NULL
34290: };
34290: 
    1: #if JS_HAS_XDR
    1: 
    1: JSBool
34290: js_XDRScript(JSXDRState *xdr, JSScript **scriptp, bool needMutableScript,
34290:              JSBool *hasMagic)
    1: {
    1:     JSContext *cx;
 3235:     JSScript *script, *oldscript;
13474:     JSBool ok;
13474:     jsbytecode *code;
16072:     uint32 length, lineno, nslots, magic;
18308:     uint32 natoms, nsrcnotes, ntrynotes, nobjects, nupvars, nregexps, i;
    1:     uint32 prologLength, version;
11089:     JSTempValueRooter tvr;
 3235:     JSPrincipals *principals;
 3235:     uint32 encodeable;
    1:     JSBool filenameWasSaved;
    1:     jssrcnote *notes, *sn;
18870:     JSSecurityCallbacks *callbacks;
    1: 
    1:     cx = xdr->cx;
    1:     script = *scriptp;
18308:     nsrcnotes = ntrynotes = natoms = nobjects = nupvars = nregexps = 0;
    1:     filenameWasSaved = JS_FALSE;
    1:     notes = NULL;
    1: 
    1:     if (xdr->mode == JSXDR_ENCODE)
    1:         magic = JSXDR_MAGIC_SCRIPT_CURRENT;
    1:     if (!JS_XDRUint32(xdr, &magic))
    1:         return JS_FALSE;
 3235:     if (magic != JSXDR_MAGIC_SCRIPT_CURRENT) {
 3235:         /* We do not provide binary compatibility with older scripts. */
    1:         if (!hasMagic) {
    1:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                                  JSMSG_BAD_SCRIPT_MAGIC);
    1:             return JS_FALSE;
    1:         }
    1:         *hasMagic = JS_FALSE;
    1:         return JS_TRUE;
    1:     }
    1:     if (hasMagic)
    1:         *hasMagic = JS_TRUE;
    1: 
34290:     /*
34290:      * Since the shortest possible script has JSOP_STOP as its only bytecode,
34664:      * encode only the length 0 for the emptyScript singleton, and return the
34664:      * emptyScript instead of a new script when decoding a script of length 0.
34290:      */
34290:     if (xdr->mode == JSXDR_ENCODE)
34664:         length = (script == JSScript::emptyScript()) ? 0 : script->length;
34290:     if (!JS_XDRUint32(xdr, &length))
34290:         return JS_FALSE;
34664:     if (length == 0) {
    1:         if (xdr->mode == JSXDR_ENCODE) {
34290:             JS_ASSERT(*scriptp == JSScript::emptyScript());
34290:             return JS_TRUE;
34290:         }
34290: 
34290:         /* Decoding: check whether we need a mutable empty script. */
34290:         if (cx->debugHooks->newScriptHook)
34290:             needMutableScript = true;
34664:         if (needMutableScript) {
34664:             /*
34664:              * We need a mutable empty script but the encoder serialized only
34664:              * the shorthand (0 length word) for us. Make a new mutable empty
34664:              * script here and return it immediately.
34664:              */
35050:             script = js_NewScript(cx, 1, 1, 0, 0, 0, 0, 0);
34664:             if (!script)
34664:                 return JS_FALSE;
35050: 
35050:             script->version = JSVERSION_DEFAULT;
35050:             script->noScriptRval = true;
35050:             script->code[0] = JSOP_STOP;
35050:             script->code[1] = SRC_NULL;
34664:             *scriptp = script;
34664:             return JS_TRUE;
34664:         }
35050: 
34290:         *scriptp = JSScript::emptyScript();
34290:         return JS_TRUE;
34290:     }
34290: 
34290:     if (xdr->mode == JSXDR_ENCODE) {
25144:         prologLength = script->main - script->code;
    1:         JS_ASSERT((int16)script->version != JSVERSION_UNKNOWN);
16072:         version = (uint32)script->version | (script->nfixed << 16);
    1:         lineno = (uint32)script->lineno;
16072:         nslots = (uint32)script->nslots;
27012:         nslots = (uint32)((script->staticLevel << 16) | script->nslots);
 3235:         natoms = (uint32)script->atomMap.length;
    1: 
    1:         /* Count the srcnotes, keeping notes pointing at the first one. */
32723:         notes = script->notes();
    1:         for (sn = notes; !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn))
    1:             continue;
25144:         nsrcnotes = sn - notes;
    1:         nsrcnotes++;            /* room for the terminator */
    1: 
 3235:         if (script->objectsOffset != 0)
32723:             nobjects = script->objects()->length;
18308:         if (script->upvarsOffset != 0)
32723:             nupvars = script->upvars()->length;
 3235:         if (script->regexpsOffset != 0)
32723:             nregexps = script->regexps()->length;
 3235:         if (script->trynotesOffset != 0)
32723:             ntrynotes = script->trynotes()->length;
    1:     }
    1: 
    1:     if (!JS_XDRUint32(xdr, &prologLength))
    1:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &version))
    1:         return JS_FALSE;
    1: 
 3235:     /*
18308:      * To fuse allocations, we need srcnote, atom, objects, upvar, regexp,
18308:      * and trynote counts early.
 3235:      */
 3235:     if (!JS_XDRUint32(xdr, &natoms))
 3235:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &nsrcnotes))
    1:         return JS_FALSE;
    1:     if (!JS_XDRUint32(xdr, &ntrynotes))
    1:         return JS_FALSE;
 3235:     if (!JS_XDRUint32(xdr, &nobjects))
 3235:         return JS_FALSE;
18308:     if (!JS_XDRUint32(xdr, &nupvars))
18308:         return JS_FALSE;
 3235:     if (!JS_XDRUint32(xdr, &nregexps))
 3235:         return JS_FALSE;
    1: 
    1:     if (xdr->mode == JSXDR_DECODE) {
18308:         script = js_NewScript(cx, length, nsrcnotes, natoms, nobjects, nupvars,
18308:                               nregexps, ntrynotes);
    1:         if (!script)
    1:             return JS_FALSE;
 3235: 
    1:         script->main += prologLength;
25628:         script->version = JSVersion(version & 0xffff);
25628:         script->nfixed = uint16(version >> 16);
    1: 
    1:         /* If we know nsrcnotes, we allocated space for notes in script. */
32723:         notes = script->notes();
    1:         *scriptp = script;
11089:         JS_PUSH_TEMP_ROOT_SCRIPT(cx, script, &tvr);
    1:     }
    1: 
    1:     /*
 3235:      * Control hereafter must goto error on failure, in order for the
 3235:      * DECODE case to destroy script.
    1:      */
    1:     oldscript = xdr->script;
13474:     code = script->code;
13474:     if (xdr->mode == JSXDR_ENCODE) {
13496:         code = js_UntrapScriptCode(cx, script);
13474:         if (!code)
13474:             goto error;
13474:     }
13474: 
    1:     xdr->script = script;
13474:     ok = JS_XDRBytes(xdr, (char *) code, length * sizeof(jsbytecode));
13474: 
13474:     if (code != script->code)
30851:         cx->free(code);
13474: 
13474:     if (!ok)
    1:         goto error;
    1: 
    1:     if (!JS_XDRBytes(xdr, (char *)notes, nsrcnotes * sizeof(jssrcnote)) ||
    1:         !JS_XDRCStringOrNull(xdr, (char **)&script->filename) ||
    1:         !JS_XDRUint32(xdr, &lineno) ||
16072:         !JS_XDRUint32(xdr, &nslots)) {
    1:         goto error;
    1:     }
    1: 
18870:     callbacks = JS_GetSecurityCallbacks(cx);
    1:     if (xdr->mode == JSXDR_ENCODE) {
    1:         principals = script->principals;
18870:         encodeable = callbacks && callbacks->principalsTranscoder;
    1:         if (!JS_XDRUint32(xdr, &encodeable))
    1:             goto error;
    1:         if (encodeable &&
18870:             !callbacks->principalsTranscoder(xdr, &principals)) {
    1:             goto error;
    1:         }
    1:     } else {
    1:         if (!JS_XDRUint32(xdr, &encodeable))
    1:             goto error;
    1:         if (encodeable) {
18870:             if (!(callbacks && callbacks->principalsTranscoder)) {
    1:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                                      JSMSG_CANT_DECODE_PRINCIPALS);
    1:                 goto error;
    1:             }
18870:             if (!callbacks->principalsTranscoder(xdr, &principals))
    1:                 goto error;
    1:             script->principals = principals;
    1:         }
    1:     }
    1: 
    1:     if (xdr->mode == JSXDR_DECODE) {
    1:         const char *filename = script->filename;
    1:         if (filename) {
    1:             filename = js_SaveScriptFilename(cx, filename);
    1:             if (!filename)
    1:                 goto error;
30851:             cx->free((void *) script->filename);
    1:             script->filename = filename;
    1:             filenameWasSaved = JS_TRUE;
    1:         }
    1:         script->lineno = (uintN)lineno;
18308:         script->nslots = (uint16)nslots;
27012:         script->staticLevel = (uint16)(nslots >> 16);
 3235:     }
    1: 
 3235:     for (i = 0; i != natoms; ++i) {
 3235:         if (!js_XDRAtom(xdr, &script->atomMap.vector[i]))
 3235:             goto error;
 3235:     }
 1825: 
    1:     /*
 3235:      * Here looping from 0-to-length to xdr objects is essential. It ensures
18308:      * that block objects from the script->objects array will be written and
28093:      * restored in the outer-to-inner order. js_XDRBlockObject relies on this
28093:      * to restore the parent chain.
    1:      */
 3235:     for (i = 0; i != nobjects; ++i) {
32723:         JSObject **objp = &script->objects()->vector[i];
28093:         uint32 isBlock;
28093:         if (xdr->mode == JSXDR_ENCODE) {
28093:             JSClass *clasp = STOBJ_GET_CLASS(*objp);
28093:             JS_ASSERT(clasp == &js_FunctionClass ||
28093:                       clasp == &js_BlockClass);
28093:             isBlock = (clasp == &js_BlockClass) ? 1 : 0;
28093:         }
28093:         if (!JS_XDRUint32(xdr, &isBlock))
    1:             goto error;
28093:         if (isBlock == 0) {
28093:             if (!js_XDRFunctionObject(xdr, objp))
28093:                 goto error;
28093:         } else {
28093:             JS_ASSERT(isBlock == 1);
28093:             if (!js_XDRBlockObject(xdr, objp))
28093:                 goto error;
28093:         }
    1:     }
18308:     for (i = 0; i != nupvars; ++i) {
32723:         if (!JS_XDRUint32(xdr, &script->upvars()->vector[i]))
18308:             goto error;
18308:     }
 3235:     for (i = 0; i != nregexps; ++i) {
32723:         if (!js_XDRRegExpObject(xdr, &script->regexps()->vector[i]))
 3235:             goto error;
    1:     }
    1: 
 3235:     if (ntrynotes != 0) {
 1825:         /*
 3235:          * We combine tn->kind and tn->stackDepth when serializing as XDR is not
 1825:          * efficient when serializing small integer types.
 1825:          */
 3235:         JSTryNote *tn, *tnfirst;
 3235:         uint32 kindAndDepth;
 1825:         JS_STATIC_ASSERT(sizeof(tn->kind) == sizeof(uint8));
 1825:         JS_STATIC_ASSERT(sizeof(tn->stackDepth) == sizeof(uint16));
    1: 
32723:         tnfirst = script->trynotes()->vector;
32723:         JS_ASSERT(script->trynotes()->length == ntrynotes);
 3235:         tn = tnfirst + ntrynotes;
 3235:         do {
 3235:             --tn;
 3235:             if (xdr->mode == JSXDR_ENCODE) {
 3235:                 kindAndDepth = ((uint32)tn->kind << 16)
 3235:                                | (uint32)tn->stackDepth;
 3235:             }
 1825:             if (!JS_XDRUint32(xdr, &kindAndDepth) ||
 1825:                 !JS_XDRUint32(xdr, &tn->start) ||
 1825:                 !JS_XDRUint32(xdr, &tn->length)) {
    1:                 goto error;
    1:             }
 3235:             if (xdr->mode == JSXDR_DECODE) {
 1825:                 tn->kind = (uint8)(kindAndDepth >> 16);
 1825:                 tn->stackDepth = (uint16)kindAndDepth;
    1:             }
 3235:         } while (tn != tnfirst);
 3235:     }
    1: 
    1:     xdr->script = oldscript;
11089:     if (xdr->mode == JSXDR_DECODE)
11089:         JS_POP_TEMP_ROOT(cx, &tvr);
    1:     return JS_TRUE;
    1: 
    1:   error:
    1:     if (xdr->mode == JSXDR_DECODE) {
11089:         JS_POP_TEMP_ROOT(cx, &tvr);
    1:         if (script->filename && !filenameWasSaved) {
30851:             cx->free((void *) script->filename);
    1:             script->filename = NULL;
    1:         }
    1:         js_DestroyScript(cx, script);
    1:         *scriptp = NULL;
    1:     }
 3235:     xdr->script = oldscript;
    1:     return JS_FALSE;
    1: }
    1: 
    1: #if JS_HAS_SCRIPT_OBJECT && JS_HAS_XDR_FREEZE_THAW
    1: /*
    1:  * These cannot be exposed to web content, and chrome does not need them, so
    1:  * we take them out of the Mozilla client altogether.  Fortunately, there is
    1:  * no way to serialize a native function (see fun_xdrObject in jsfun.c).
    1:  */
    1: 
    1: static JSBool
 4127: script_freeze(JSContext *cx, uintN argc, jsval *vp)
    1: {
 4127:     JSObject *obj;
    1:     JSXDRState *xdr;
    1:     JSScript *script;
    1:     JSBool ok, hasMagic;
    1:     uint32 len;
    1:     void *buf;
    1:     JSString *str;
    1: 
11809:     obj = JS_THIS_OBJECT(cx, vp);
 4127:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, vp + 2))
    1:         return JS_FALSE;
31452:     script = (JSScript *) obj->getPrivate();
    1:     if (!script)
    1:         return JS_TRUE;
    1: 
    1:     /* create new XDR */
    1:     xdr = JS_XDRNewMem(cx, JSXDR_ENCODE);
    1:     if (!xdr)
    1:         return JS_FALSE;
    1: 
    1:     /* write  */
34290:     ok = js_XDRScript(xdr, &script, false, &hasMagic);
    1:     if (!ok)
    1:         goto out;
    1:     if (!hasMagic) {
 4127:         *vp = JSVAL_VOID;
    1:         goto out;
    1:     }
    1: 
    1:     buf = JS_XDRMemGetData(xdr, &len);
    1:     if (!buf) {
    1:         ok = JS_FALSE;
    1:         goto out;
    1:     }
    1: 
    1:     JS_ASSERT((jsword)buf % sizeof(jschar) == 0);
    1:     len /= sizeof(jschar);
    1: #if IS_BIG_ENDIAN
    1:   {
    1:     jschar *chars;
    1:     uint32 i;
    1: 
    1:     /* Swap bytes in Unichars to keep frozen strings machine-independent. */
    1:     chars = (jschar *)buf;
    1:     for (i = 0; i < len; i++)
    1:         chars[i] = JSXDR_SWAB16(chars[i]);
    1:   }
    1: #endif
    1:     str = JS_NewUCStringCopyN(cx, (jschar *)buf, len);
    1:     if (!str) {
    1:         ok = JS_FALSE;
    1:         goto out;
    1:     }
    1: 
 4127:     *vp = STRING_TO_JSVAL(str);
    1: 
    1: out:
    1:     JS_XDRDestroy(xdr);
    1:     return ok;
    1: }
    1: 
    1: static JSBool
 4127: script_thaw(JSContext *cx, uintN argc, jsval *vp)
    1: {
 4127:     JSObject *obj;
    1:     JSXDRState *xdr;
    1:     JSString *str;
    1:     void *buf;
34664:     size_t len;
    1:     JSScript *script, *oldscript;
    1:     JSBool ok, hasMagic;
 1804:     jsint execDepth;
    1: 
11809:     obj = JS_THIS_OBJECT(cx, vp);
 4127:     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, vp + 2))
    1:         return JS_FALSE;
    1: 
    1:     if (argc == 0)
    1:         return JS_TRUE;
 4127:     str = js_ValueToString(cx, vp[2]);
    1:     if (!str)
    1:         return JS_FALSE;
 4127:     vp[2] = STRING_TO_JSVAL(str);
    1: 
    1:     /* create new XDR */
    1:     xdr = JS_XDRNewMem(cx, JSXDR_DECODE);
    1:     if (!xdr)
    1:         return JS_FALSE;
    1: 
34664:     const jschar *cs;
34664:     str->getCharsAndLength(cs, len);
34664:     buf = const_cast<jschar *>(cs);
    1: #if IS_BIG_ENDIAN
    1:   {
    1:     jschar *from, *to;
    1:     uint32 i;
    1: 
    1:     /* Swap bytes in Unichars to keep frozen strings machine-independent. */
    1:     from = (jschar *)buf;
30851:     to = (jschar *) cx->malloc(len * sizeof(jschar));
    1:     if (!to) {
    1:         JS_XDRDestroy(xdr);
    1:         return JS_FALSE;
    1:     }
    1:     for (i = 0; i < len; i++)
    1:         to[i] = JSXDR_SWAB16(from[i]);
    1:     buf = (char *)to;
    1:   }
    1: #endif
    1:     len *= sizeof(jschar);
    1:     JS_XDRMemSetData(xdr, buf, len);
    1: 
    1:     /* XXXbe should magic mismatch be error, or false return value? */
34290:     ok = js_XDRScript(xdr, &script, true, &hasMagic);
    1:     if (!ok)
    1:         goto out;
    1:     if (!hasMagic) {
 4127:         *vp = JSVAL_FALSE;
    1:         goto out;
    1:     }
    1: 
    1:     JS_LOCK_OBJ(cx, obj);
    1:     execDepth = GetScriptExecDepth(cx, obj);
    1: 
    1:     /*
    1:      * execDepth must be 0 to allow compilation here, otherwise the JSScript
    1:      * struct can be released while running.
    1:      */
    1:     if (execDepth > 0) {
    1:         JS_UNLOCK_OBJ(cx, obj);
    1:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
    1:                              JSMSG_COMPILE_EXECED_SCRIPT);
    1:         goto out;
    1:     }
    1: 
    1:     /* Swap script for obj's old script, if any. */
31452:     oldscript = (JSScript *) obj->getPrivate();
31452:     obj->setPrivate(script);
    1:     JS_UNLOCK_OBJ(cx, obj);
    1: 
    1:     if (oldscript)
    1:         js_DestroyScript(cx, oldscript);
    1: 
18285:     script->u.object = obj;
    1:     js_CallNewScriptHook(cx, script, NULL);
    1: 
    1: out:
    1:     /*
    1:      * We reset the buffer to be NULL so that it doesn't free the chars
 4127:      * memory owned by str (vp[2]).
    1:      */
    1:     JS_XDRMemSetData(xdr, NULL, 0);
    1:     JS_XDRDestroy(xdr);
    1: #if IS_BIG_ENDIAN
30851:     cx->free(buf);
    1: #endif
 4127:     *vp = JSVAL_TRUE;
    1:     return ok;
    1: }
    1: 
    1: static const char js_thaw_str[] = "thaw";
    1: 
    1: #endif /* JS_HAS_SCRIPT_OBJECT && JS_HAS_XDR_FREEZE_THAW */
    1: #endif /* JS_HAS_XDR */
    1: 
    1: #if JS_HAS_SCRIPT_OBJECT
    1: 
    1: static JSFunctionSpec script_methods[] = {
    1: #if JS_HAS_TOSOURCE
18955:     JS_FN(js_toSource_str,   script_toSource,   0,0),
    1: #endif
18955:     JS_FN(js_toString_str,   script_toString,   0,0),
18955:     JS_FN("compile",         script_compile,    2,0),
18955:     JS_FN("exec",            script_exec,       1,0),
    1: #if JS_HAS_XDR_FREEZE_THAW
18955:     JS_FN("freeze",          script_freeze,     0,0),
18955:     JS_FN(js_thaw_str,       script_thaw,       1,0),
    1: #endif /* JS_HAS_XDR_FREEZE_THAW */
 4127:     JS_FS_END
    1: };
    1: 
    1: #endif /* JS_HAS_SCRIPT_OBJECT */
    1: 
    1: static void
    1: script_finalize(JSContext *cx, JSObject *obj)
    1: {
31452:     JSScript *script = (JSScript *) obj->getPrivate();
    1:     if (script)
    1:         js_DestroyScript(cx, script);
    1: }
    1: 
    1: static JSBool
    1: script_call(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
    1: {
    1: #if JS_HAS_SCRIPT_OBJECT
 4127:     return script_exec_sub(cx, JSVAL_TO_OBJECT(argv[-2]), argc, argv, rval);
    1: #else
    1:     return JS_FALSE;
    1: #endif
    1: }
    1: 
  583: static void
  583: script_trace(JSTracer *trc, JSObject *obj)
    1: {
31452:     JSScript *script = (JSScript *) obj->getPrivate();
    1:     if (script)
  583:         js_TraceScript(trc, script);
    1: }
    1: 
    1: #if !JS_HAS_SCRIPT_OBJECT
    1: #define JSProto_Script  JSProto_Object
    1: #endif
    1: 
    1: JS_FRIEND_DATA(JSClass) js_ScriptClass = {
    1:     js_Script_str,
  583:     JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(1) |
  583:     JSCLASS_MARK_IS_TRACE | JSCLASS_HAS_CACHED_PROTO(JSProto_Script),
    1:     JS_PropertyStub,  JS_PropertyStub,  JS_PropertyStub,  JS_PropertyStub,
    1:     JS_EnumerateStub, JS_ResolveStub,   JS_ConvertStub,   script_finalize,
    1:     NULL,             NULL,             script_call,      NULL,/*XXXbe xdr*/
  583:     NULL,             NULL,             JS_CLASS_TRACE(script_trace), NULL
    1: };
    1: 
    1: #if JS_HAS_SCRIPT_OBJECT
    1: 
    1: static JSBool
    1: Script(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
    1: {
    1:     /* If not constructing, replace obj with a new Script object. */
22652:     if (!JS_IsConstructing(cx)) {
30439:         obj = js_NewObject(cx, &js_ScriptClass, NULL, NULL);
    1:         if (!obj)
    1:             return JS_FALSE;
    1: 
    1:         /*
 4127:          * script_compile_sub does not use rval to root its temporaries so we
 4127:          * can use it to root obj.
    1:          */
    1:         *rval = OBJECT_TO_JSVAL(obj);
    1:     }
    1: 
    1:     if (!JS_SetReservedSlot(cx, obj, 0, INT_TO_JSVAL(0)))
    1:         return JS_FALSE;
    1: 
 4127:     return script_compile_sub(cx, obj, argc, argv, rval);
    1: }
    1: 
    1: #if JS_HAS_SCRIPT_OBJECT && JS_HAS_XDR_FREEZE_THAW
    1: 
    1: static JSBool
 4127: script_static_thaw(JSContext *cx, uintN argc, jsval *vp)
    1: {
 4127:     JSObject *obj;
 4127: 
    1:     obj = js_NewObject(cx, &js_ScriptClass, NULL, NULL);
    1:     if (!obj)
    1:         return JS_FALSE;
 4127:     vp[1] = OBJECT_TO_JSVAL(obj);
18955:     if (!script_thaw(cx, argc, vp))
    1:         return JS_FALSE;
 4127:     *vp = OBJECT_TO_JSVAL(obj);
    1:     return JS_TRUE;
    1: }
    1: 
    1: static JSFunctionSpec script_static_methods[] = {
18955:     JS_FN(js_thaw_str,       script_static_thaw,     1,0),
 4127:     JS_FS_END
    1: };
    1: 
    1: #else  /* !JS_HAS_SCRIPT_OBJECT || !JS_HAS_XDR_FREEZE_THAW */
    1: 
    1: #define script_static_methods   NULL
    1: 
    1: #endif /* !JS_HAS_SCRIPT_OBJECT || !JS_HAS_XDR_FREEZE_THAW */
    1: 
    1: JSObject *
    1: js_InitScriptClass(JSContext *cx, JSObject *obj)
    1: {
    1:     return JS_InitClass(cx, obj, NULL, &js_ScriptClass, Script, 1,
    1:                         NULL, script_methods, NULL, script_static_methods);
    1: }
    1: 
    1: #endif /* JS_HAS_SCRIPT_OBJECT */
    1: 
    1: /*
    1:  * Shared script filename management.
    1:  */
18907: static int
    1: js_compare_strings(const void *k1, const void *k2)
    1: {
 3164:     return strcmp((const char *) k1, (const char *) k2) == 0;
    1: }
    1: 
    1: /* NB: This struct overlays JSHashEntry -- see jshash.h, do not reorganize. */
    1: typedef struct ScriptFilenameEntry {
    1:     JSHashEntry         *next;          /* hash chain linkage */
    1:     JSHashNumber        keyHash;        /* key hash function result */
    1:     const void          *key;           /* ptr to filename, below */
    1:     uint32              flags;          /* user-defined filename prefix flags */
    1:     JSPackedBool        mark;           /* GC mark flag */
    1:     char                filename[3];    /* two or more bytes, NUL-terminated */
    1: } ScriptFilenameEntry;
    1: 
18907: static void *
 4529: js_alloc_table_space(void *priv, size_t size)
 4529: {
30851:     return js_malloc(size);
 4529: }
 4529: 
18907: static void
27012: js_free_table_space(void *priv, void *item, size_t size)
 4529: {
30851:     js_free(item);
 4529: }
 4529: 
18907: static JSHashEntry *
    1: js_alloc_sftbl_entry(void *priv, const void *key)
    1: {
 3164:     size_t nbytes = offsetof(ScriptFilenameEntry, filename) +
 3164:                     strlen((const char *) key) + 1;
    1: 
30851:     return (JSHashEntry *) js_malloc(JS_MAX(nbytes, sizeof(JSHashEntry)));
    1: }
    1: 
18907: static void
    1: js_free_sftbl_entry(void *priv, JSHashEntry *he, uintN flag)
    1: {
    1:     if (flag != HT_FREE_ENTRY)
    1:         return;
30851:     js_free(he);
    1: }
    1: 
    1: static JSHashAllocOps sftbl_alloc_ops = {
    1:     js_alloc_table_space,   js_free_table_space,
    1:     js_alloc_sftbl_entry,   js_free_sftbl_entry
    1: };
    1: 
33534: static void
33534: FinishRuntimeScriptState(JSRuntime *rt)
33534: {
33534:     if (rt->scriptFilenameTable) {
33534:         JS_HashTableDestroy(rt->scriptFilenameTable);
33534:         rt->scriptFilenameTable = NULL;
33534:     }
33534: #ifdef JS_THREADSAFE
33534:     if (rt->scriptFilenameTableLock) {
33534:         JS_DESTROY_LOCK(rt->scriptFilenameTableLock);
33534:         rt->scriptFilenameTableLock = NULL;
33534:     }
33534: #endif
33534: }
33534: 
    1: JSBool
    1: js_InitRuntimeScriptState(JSRuntime *rt)
    1: {
    1: #ifdef JS_THREADSAFE
    1:     JS_ASSERT(!rt->scriptFilenameTableLock);
    1:     rt->scriptFilenameTableLock = JS_NEW_LOCK();
    1:     if (!rt->scriptFilenameTableLock)
    1:         return JS_FALSE;
    1: #endif
    1:     JS_ASSERT(!rt->scriptFilenameTable);
    1:     rt->scriptFilenameTable =
    1:         JS_NewHashTable(16, JS_HashString, js_compare_strings, NULL,
    1:                         &sftbl_alloc_ops, NULL);
    1:     if (!rt->scriptFilenameTable) {
33534:         FinishRuntimeScriptState(rt);       /* free lock if threadsafe */
    1:         return JS_FALSE;
    1:     }
    1:     JS_INIT_CLIST(&rt->scriptFilenamePrefixes);
    1:     return JS_TRUE;
    1: }
    1: 
    1: typedef struct ScriptFilenamePrefix {
    1:     JSCList     links;      /* circular list linkage for easy deletion */
    1:     const char  *name;      /* pointer to pinned ScriptFilenameEntry string */
    1:     size_t      length;     /* prefix string length, precomputed */
    1:     uint32      flags;      /* user-defined flags to inherit from this prefix */
    1: } ScriptFilenamePrefix;
    1: 
    1: void
    1: js_FreeRuntimeScriptState(JSRuntime *rt)
    1: {
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
    1:     while (!JS_CLIST_IS_EMPTY(&rt->scriptFilenamePrefixes)) {
33534:         ScriptFilenamePrefix *sfp = (ScriptFilenamePrefix *)
33534:                                     rt->scriptFilenamePrefixes.next;
    1:         JS_REMOVE_LINK(&sfp->links);
30851:         js_free(sfp);
    1:     }
33534:     FinishRuntimeScriptState(rt);
    1: }
    1: 
    1: #ifdef DEBUG_brendan
    1: #define DEBUG_SFTBL
    1: #endif
    1: #ifdef DEBUG_SFTBL
    1: size_t sftbl_savings = 0;
    1: #endif
    1: 
    1: static ScriptFilenameEntry *
    1: SaveScriptFilename(JSRuntime *rt, const char *filename, uint32 flags)
    1: {
    1:     JSHashTable *table;
    1:     JSHashNumber hash;
    1:     JSHashEntry **hep;
    1:     ScriptFilenameEntry *sfe;
    1:     size_t length;
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     table = rt->scriptFilenameTable;
    1:     hash = JS_HashString(filename);
    1:     hep = JS_HashTableRawLookup(table, hash, filename);
    1:     sfe = (ScriptFilenameEntry *) *hep;
    1: #ifdef DEBUG_SFTBL
    1:     if (sfe)
    1:         sftbl_savings += strlen(sfe->filename);
    1: #endif
    1: 
    1:     if (!sfe) {
    1:         sfe = (ScriptFilenameEntry *)
    1:               JS_HashTableRawAdd(table, hep, hash, filename, NULL);
    1:         if (!sfe)
    1:             return NULL;
    1:         sfe->key = strcpy(sfe->filename, filename);
    1:         sfe->flags = 0;
    1:         sfe->mark = JS_FALSE;
    1:     }
    1: 
    1:     /* If saving a prefix, add it to the set in rt->scriptFilenamePrefixes. */
    1:     if (flags != 0) {
    1:         /* Search in case filename was saved already; we must be idempotent. */
    1:         sfp = NULL;
    1:         length = strlen(filename);
    1:         for (head = link = &rt->scriptFilenamePrefixes;
    1:              link->next != head;
    1:              link = link->next) {
    1:             /* Lag link behind sfp to insert in non-increasing length order. */
    1:             sfp = (ScriptFilenamePrefix *) link->next;
    1:             if (!strcmp(sfp->name, filename))
    1:                 break;
    1:             if (sfp->length <= length) {
    1:                 sfp = NULL;
    1:                 break;
    1:             }
    1:             sfp = NULL;
    1:         }
    1: 
    1:         if (!sfp) {
    1:             /* No such prefix: add one now. */
30851:             sfp = (ScriptFilenamePrefix *) js_malloc(sizeof(ScriptFilenamePrefix));
    1:             if (!sfp)
    1:                 return NULL;
    1:             JS_INSERT_AFTER(&sfp->links, link);
    1:             sfp->name = sfe->filename;
    1:             sfp->length = length;
    1:             sfp->flags = 0;
    1:         }
    1: 
    1:         /*
    1:          * Accumulate flags in both sfe and sfp: sfe for later access from the
    1:          * JS_GetScriptedCallerFilenameFlags debug-API, and sfp so that longer
    1:          * filename entries can inherit by prefix.
    1:          */
    1:         sfe->flags |= flags;
    1:         sfp->flags |= flags;
    1:     }
    1: 
27012: #ifdef JS_FUNCTION_METERING
27012:     size_t len = strlen(sfe->filename);
27012:     if (len >= sizeof rt->lastScriptFilename)
27012:         len = sizeof rt->lastScriptFilename - 1;
27012:     memcpy(rt->lastScriptFilename, sfe->filename, len);
27012:     rt->lastScriptFilename[len] = '\0';
27012: #endif
27012: 
    1:     return sfe;
    1: }
    1: 
    1: const char *
    1: js_SaveScriptFilename(JSContext *cx, const char *filename)
    1: {
    1:     JSRuntime *rt;
    1:     ScriptFilenameEntry *sfe;
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     rt = cx->runtime;
    1:     JS_ACQUIRE_LOCK(rt->scriptFilenameTableLock);
    1:     sfe = SaveScriptFilename(rt, filename, 0);
    1:     if (!sfe) {
    1:         JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:         JS_ReportOutOfMemory(cx);
    1:         return NULL;
    1:     }
    1: 
    1:     /*
    1:      * Try to inherit flags by prefix.  We assume there won't be more than a
    1:      * few (dozen! ;-) prefixes, so linear search is tolerable.
    1:      * XXXbe every time I've assumed that in the JS engine, I've been wrong!
    1:      */
    1:     for (head = &rt->scriptFilenamePrefixes, link = head->next;
    1:          link != head;
    1:          link = link->next) {
    1:         sfp = (ScriptFilenamePrefix *) link;
    1:         if (!strncmp(sfp->name, filename, sfp->length)) {
    1:             sfe->flags |= sfp->flags;
    1:             break;
    1:         }
    1:     }
    1:     JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:     return sfe->filename;
    1: }
    1: 
    1: const char *
    1: js_SaveScriptFilenameRT(JSRuntime *rt, const char *filename, uint32 flags)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     /* This may be called very early, via the jsdbgapi.h entry point. */
    1:     if (!rt->scriptFilenameTable && !js_InitRuntimeScriptState(rt))
    1:         return NULL;
    1: 
    1:     JS_ACQUIRE_LOCK(rt->scriptFilenameTableLock);
    1:     sfe = SaveScriptFilename(rt, filename, flags);
    1:     JS_RELEASE_LOCK(rt->scriptFilenameTableLock);
    1:     if (!sfe)
    1:         return NULL;
    1: 
    1:     return sfe->filename;
    1: }
    1: 
    1: /*
    1:  * Back up from a saved filename by its offset within its hash table entry.
    1:  */
    1: #define FILENAME_TO_SFE(fn) \
    1:     ((ScriptFilenameEntry *) ((fn) - offsetof(ScriptFilenameEntry, filename)))
    1: 
    1: /*
    1:  * The sfe->key member, redundant given sfe->filename but required by the old
    1:  * jshash.c code, here gives us a useful sanity check.  This assertion will
    1:  * very likely botch if someone tries to mark a string that wasn't allocated
    1:  * as an sfe->filename.
    1:  */
    1: #define ASSERT_VALID_SFE(sfe)   JS_ASSERT((sfe)->key == (sfe)->filename)
    1: 
    1: uint32
    1: js_GetScriptFilenameFlags(const char *filename)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     sfe = FILENAME_TO_SFE(filename);
    1:     ASSERT_VALID_SFE(sfe);
    1:     return sfe->flags;
    1: }
    1: 
    1: void
    1: js_MarkScriptFilename(const char *filename)
    1: {
    1:     ScriptFilenameEntry *sfe;
    1: 
    1:     sfe = FILENAME_TO_SFE(filename);
    1:     ASSERT_VALID_SFE(sfe);
    1:     sfe->mark = JS_TRUE;
    1: }
    1: 
18907: static intN
    1: js_script_filename_marker(JSHashEntry *he, intN i, void *arg)
    1: {
    1:     ScriptFilenameEntry *sfe = (ScriptFilenameEntry *) he;
    1: 
    1:     sfe->mark = JS_TRUE;
    1:     return HT_ENUMERATE_NEXT;
    1: }
    1: 
    1: void
    1: js_MarkScriptFilenames(JSRuntime *rt, JSBool keepAtoms)
    1: {
    1:     JSCList *head, *link;
    1:     ScriptFilenamePrefix *sfp;
    1: 
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
    1:     if (keepAtoms) {
    1:         JS_HashTableEnumerateEntries(rt->scriptFilenameTable,
    1:                                      js_script_filename_marker,
    1:                                      rt);
    1:     }
    1:     for (head = &rt->scriptFilenamePrefixes, link = head->next;
    1:          link != head;
    1:          link = link->next) {
    1:         sfp = (ScriptFilenamePrefix *) link;
    1:         js_MarkScriptFilename(sfp->name);
    1:     }
    1: }
    1: 
18907: static intN
    1: js_script_filename_sweeper(JSHashEntry *he, intN i, void *arg)
    1: {
    1:     ScriptFilenameEntry *sfe = (ScriptFilenameEntry *) he;
    1: 
    1:     if (!sfe->mark)
    1:         return HT_ENUMERATE_REMOVE;
    1:     sfe->mark = JS_FALSE;
    1:     return HT_ENUMERATE_NEXT;
    1: }
    1: 
    1: void
    1: js_SweepScriptFilenames(JSRuntime *rt)
    1: {
    1:     if (!rt->scriptFilenameTable)
    1:         return;
    1: 
33534:     /*
33534:      * JS_HashTableEnumerateEntries shrinks the table if many entries are
33534:      * removed preventing wasting memory on a too sparse table.
33534:      */
    1:     JS_HashTableEnumerateEntries(rt->scriptFilenameTable,
    1:                                  js_script_filename_sweeper,
    1:                                  rt);
    1: #ifdef DEBUG_notme
    1: #ifdef DEBUG_SFTBL
    1:     printf("script filename table savings so far: %u\n", sftbl_savings);
    1: #endif
    1: #endif
    1: }
    1: 
 3235: /*
 3235:  * JSScript data structures memory alignment:
 3235:  *
 3235:  * JSScript
 3235:  * JSObjectArray    script objects' descriptor if JSScript.objectsOffset != 0,
32723:  *                    use script->objects() to access it.
 3235:  * JSObjectArray    script regexps' descriptor if JSScript.regexpsOffset != 0,
32723:  *                    use script->regexps() to access it.
 3235:  * JSTryNoteArray   script try notes' descriptor if JSScript.tryNotesOffset
32723:  *                    != 0, use script->trynotes() to access it.
 3235:  * JSAtom *a[]      array of JSScript.atomMap.length atoms pointed by
 3235:  *                    JSScript.atomMap.vector if any.
32723:  * JSObject *o[]    array of script->objects()->length objects if any
32723:  *                    pointed by script->objects()->vector.
32723:  * JSObject *r[]    array of script->regexps()->length regexps if any
32723:  *                    pointed by script->regexps()->vector.
32723:  * JSTryNote t[]    array of script->trynotes()->length try notes if any
32723:  *                    pointed by script->trynotes()->vector.
 3235:  * jsbytecode b[]   script bytecode pointed by JSScript.code.
32723:  * jssrcnote  s[]   script source notes, use script->notes() to access it
 3235:  *
 3235:  * The alignment avoids gaps between entries as alignment requirement for each
 3235:  * subsequent structure or array is the same or divides the alignment
 3235:  * requirement for the previous one.
 3235:  *
 3235:  * The followings asserts checks that assuming that the alignment requirement
 3235:  * for JSObjectArray and JSTryNoteArray are sizeof(void *) and for JSTryNote
 3235:  * it is sizeof(uint32) as the structure consists of 3 uint32 fields.
 3235:  */
 3235: JS_STATIC_ASSERT(sizeof(JSScript) % sizeof(void *) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSObjectArray) % sizeof(void *) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSTryNoteArray) == sizeof(JSObjectArray));
 3235: JS_STATIC_ASSERT(sizeof(JSAtom *) == sizeof(JSObject *));
 3235: JS_STATIC_ASSERT(sizeof(JSObject *) % sizeof(uint32) == 0);
 3235: JS_STATIC_ASSERT(sizeof(JSTryNote) == 3 * sizeof(uint32));
 3235: JS_STATIC_ASSERT(sizeof(uint32) % sizeof(jsbytecode) == 0);
 3235: JS_STATIC_ASSERT(sizeof(jsbytecode) % sizeof(jssrcnote) == 0);
 3235: 
 3235: /*
18308:  * Check that uint8 offset for object, upvar, regexp, and try note arrays is
18308:  * sufficient.
 3235:  */
18308: JS_STATIC_ASSERT(sizeof(JSScript) + 2 * sizeof(JSObjectArray) +
18308:                  sizeof(JSUpvarArray) < JS_BIT(8));
 3235: 
    1: JSScript *
18308: js_NewScript(JSContext *cx, uint32 length, uint32 nsrcnotes, uint32 natoms,
18308:              uint32 nobjects, uint32 nupvars, uint32 nregexps,
18308:              uint32 ntrynotes)
    1: {
 3235:     size_t size, vectorSize;
    1:     JSScript *script;
 3235:     uint8 *cursor;
    1: 
 3235:     size = sizeof(JSScript) +
 3235:            sizeof(JSAtom *) * natoms +
 3235:            length * sizeof(jsbytecode) +
 3235:            nsrcnotes * sizeof(jssrcnote);
 3235:     if (nobjects != 0)
 3235:         size += sizeof(JSObjectArray) + nobjects * sizeof(JSObject *);
18308:     if (nupvars != 0)
18308:         size += sizeof(JSUpvarArray) + nupvars * sizeof(uint32);
 3235:     if (nregexps != 0)
 3235:         size += sizeof(JSObjectArray) + nregexps * sizeof(JSObject *);
 3235:     if (ntrynotes != 0)
 3235:         size += sizeof(JSTryNoteArray) + ntrynotes * sizeof(JSTryNote);
 3235: 
30851:     script = (JSScript *) cx->malloc(size);
    1:     if (!script)
    1:         return NULL;
    1:     memset(script, 0, sizeof(JSScript));
    1:     script->length = length;
    1:     script->version = cx->version;
 3235: 
 3235:     cursor = (uint8 *)script + sizeof(JSScript);
 3235:     if (nobjects != 0) {
 3235:         script->objectsOffset = (uint8)(cursor - (uint8 *)script);
 3235:         cursor += sizeof(JSObjectArray);
 3235:     }
18308:     if (nupvars != 0) {
18308:         script->upvarsOffset = (uint8)(cursor - (uint8 *)script);
18308:         cursor += sizeof(JSUpvarArray);
18308:     }
 3235:     if (nregexps != 0) {
 3235:         script->regexpsOffset = (uint8)(cursor - (uint8 *)script);
 3235:         cursor += sizeof(JSObjectArray);
 3235:     }
 3235:     if (ntrynotes != 0) {
 3235:         script->trynotesOffset = (uint8)(cursor - (uint8 *)script);
 3235:         cursor += sizeof(JSTryNoteArray);
 3235:     }
 3235: 
 3235:     if (natoms != 0) {
 3235:         script->atomMap.length = natoms;
 3235:         script->atomMap.vector = (JSAtom **)cursor;
 3235:         vectorSize = natoms * sizeof(script->atomMap.vector[0]);
 3235: 
 3235:         /*
 3235:          * Clear object map's vector so the GC tracing can run when not yet
 3235:          * all atoms are copied to the array.
 3235:          */
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
17218: 
 3235:     if (nobjects != 0) {
32723:         script->objects()->length = nobjects;
32723:         script->objects()->vector = (JSObject **)cursor;
32723:         vectorSize = nobjects * sizeof(script->objects()->vector[0]);
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
18308: 
 3235:     if (nregexps != 0) {
32723:         script->regexps()->length = nregexps;
32723:         script->regexps()->vector = (JSObject **)cursor;
32723:         vectorSize = nregexps * sizeof(script->regexps()->vector[0]);
 3235:         memset(cursor, 0, vectorSize);
 3235:         cursor += vectorSize;
 3235:     }
18308: 
 3235:     if (ntrynotes != 0) {
32723:         script->trynotes()->length = ntrynotes;
32723:         script->trynotes()->vector = (JSTryNote *)cursor;
32723:         vectorSize = ntrynotes * sizeof(script->trynotes()->vector[0]);
 3235: #ifdef DEBUG
 3235:         memset(cursor, 0, vectorSize);
 3235: #endif
 3235:         cursor += vectorSize;
 3235:     }
 3235: 
32689:     /*
32689:      * NB: We allocate the vector of uint32 upvar cookies after all vectors of
32689:      * pointers, to avoid misalignment on 64-bit platforms. See bug 514645.
32689:      */
32689:     if (nupvars != 0) {
32723:         script->upvars()->length = nupvars;
32723:         script->upvars()->vector = (uint32 *)cursor;
32723:         vectorSize = nupvars * sizeof(script->upvars()->vector[0]);
32689:         memset(cursor, 0, vectorSize);
32689:         cursor += vectorSize;
32689:     }
32689: 
 3235:     script->code = script->main = (jsbytecode *)cursor;
 3235:     JS_ASSERT(cursor +
 3235:               length * sizeof(jsbytecode) +
 3235:               nsrcnotes * sizeof(jssrcnote) ==
 3235:               (uint8 *)script + size);
 3235: 
11377: #ifdef CHECK_SCRIPT_OWNER
11377:     script->owner = cx->thread;
11377: #endif
    1:     return script;
    1: }
    1: 
 8444: JSScript *
 8444: js_NewScriptFromCG(JSContext *cx, JSCodeGenerator *cg)
    1: {
16072:     uint32 mainLength, prologLength, nsrcnotes, nfixed;
    1:     JSScript *script;
    1:     const char *filename;
13702:     JSFunction *fun;
    1: 
 3235:     /* The counts of indexed things must be checked during code generation. */
 3235:     JS_ASSERT(cg->atomList.count <= INDEX_LIMIT);
 3235:     JS_ASSERT(cg->objectList.length <= INDEX_LIMIT);
 3235:     JS_ASSERT(cg->regexpList.length <= INDEX_LIMIT);
 3235: 
    1:     mainLength = CG_OFFSET(cg);
    1:     prologLength = CG_PROLOG_OFFSET(cg);
34290: 
34664:     if (prologLength + mainLength <= 3) {
34290:         /*
34290:          * Check very short scripts to see whether they are "empty" and return
34290:          * the const empty-script singleton if so. We are deliberately flexible
34290:          * about whether JSOP_TRACE is in the prolog.
34290:          */
34290:         jsbytecode *pc = prologLength ? CG_PROLOG_BASE(cg) : CG_BASE(cg);
34290: 
34290:         if (JSOp(*pc) == JSOP_TRACE) {
34290:             ++pc;
34290:             if (pc == CG_PROLOG_BASE(cg) + prologLength)
34290:                 pc = CG_BASE(cg);
34290:         }
34290:         if ((cg->flags & TCF_NO_SCRIPT_RVAL) && JSOp(*pc) == JSOP_FALSE)
34290:             ++pc;
34664: 
35050:         if (JSOp(*pc) == JSOP_STOP &&
35050:             !cx->debugHooks->newScriptHook &&
35050:             !(cg->flags & TCF_NEED_MUTABLE_SCRIPT))
35050:         {
35050:             /*
35050:              * We can probably use the immutable empty script singleton, just
35050:              * one hard case (nupvars != 0) may stand in our way.
35050:              */
34290:             JSScript *empty = JSScript::emptyScript();
35050: 
34290:             if (cg->flags & TCF_IN_FUNCTION) {
34290:                 fun = cg->fun;
34290:                 JS_ASSERT(FUN_INTERPRETED(fun) && !FUN_SCRIPT(fun));
34309:                 if (fun->u.i.nupvars != 0) {
34309:                     /*
34309:                      * FIXME: upvar uses that were all optimized away may leave
34309:                      * fun->u.i.nupvars non-zero, and since that count is added
34309:                      * into fun->countLocalNames() in order to discriminate the
34309:                      * fun->u.i.names union, we cannot force fun->u.i.nupvars
34309:                      * to 0 to match JSScript::emptyScript()->upvars()->length.
34309:                      * So we skip the empty script optimization.
34309:                      *
34309:                      * Fixing this requires the compiler to track upvar uses as
34309:                      * it analyzes and optimizes closures, and subsequently as
34309:                      * the emitter performs useless expression elimination.
34309:                      */
34309:                     goto skip_empty;
34309:                 }
34290:                 js_FreezeLocalNames(cx, fun);
34290:                 fun->u.i.script = empty;
34290:             }
34290: 
34290:             JS_RUNTIME_METER(cx->runtime, liveEmptyScripts);
34290:             JS_RUNTIME_METER(cx->runtime, totalEmptyScripts);
34290:             return empty;
34290:         }
34290:     }
34290: 
34309:   skip_empty:
    1:     CG_COUNT_FINAL_SRCNOTES(cg, nsrcnotes);
18308:     script = js_NewScript(cx, prologLength + mainLength, nsrcnotes,
18308:                           cg->atomList.count, cg->objectList.length,
18308:                           cg->upvarList.count, cg->regexpList.length,
18308:                           cg->ntrynotes);
    1:     if (!script)
    1:         return NULL;
    1: 
    1:     /* Now that we have script, error control flow must go to label bad. */
    1:     script->main += prologLength;
    1:     memcpy(script->code, CG_PROLOG_BASE(cg), prologLength * sizeof(jsbytecode));
    1:     memcpy(script->main, CG_BASE(cg), mainLength * sizeof(jsbytecode));
27012:     nfixed = (cg->flags & TCF_IN_FUNCTION)
27012:              ? cg->fun->u.i.nvars
32729:              : cg->ngvars + cg->regexpList.length + cg->sharpSlots();
16072:     JS_ASSERT(nfixed < SLOTNO_LIMIT);
16072:     script->nfixed = (uint16) nfixed;
 3235:     js_InitAtomMap(cx, &script->atomMap, &cg->atomList);
    1: 
27012:     filename = cg->compiler->tokenStream.filename;
    1:     if (filename) {
    1:         script->filename = js_SaveScriptFilename(cx, filename);
    1:         if (!script->filename)
    1:             goto bad;
    1:     }
    1:     script->lineno = cg->firstLine;
18308:     if (script->nfixed + cg->maxStackDepth >= JS_BIT(16)) {
18308:         js_ReportCompileErrorNumber(cx, CG_TS(cg), NULL, JSREPORT_ERROR,
18308:                                     JSMSG_NEED_DIET, "script");
18308:         goto bad;
18308:     }
16072:     script->nslots = script->nfixed + cg->maxStackDepth;
27012:     script->staticLevel = cg->staticLevel;
27012:     script->principals = cg->compiler->principals;
 6561:     if (script->principals)
    1:         JSPRINCIPALS_HOLD(cx, script->principals);
    1: 
32723:     if (!js_FinishTakingSrcNotes(cx, cg, script->notes()))
    1:         goto bad;
 3235:     if (cg->ntrynotes != 0)
32723:         js_FinishTakingTryNotes(cg, script->trynotes());
 3235:     if (cg->objectList.length != 0)
32723:         cg->objectList.finish(script->objects());
 3235:     if (cg->regexpList.length != 0)
32723:         cg->regexpList.finish(script->regexps());
27012:     if (cg->flags & TCF_NO_SCRIPT_RVAL)
33750:         script->noScriptRval = true;
32729:     if (cg->hasSharps())
33750:         script->hasSharps = true;
    1: 
18308:     if (cg->upvarList.count != 0) {
18308:         JS_ASSERT(cg->upvarList.count <= cg->upvarMap.length);
32723:         memcpy(script->upvars()->vector, cg->upvarMap.vector,
18308:                cg->upvarList.count * sizeof(uint32));
27012:         cg->upvarList.clear();
30851:         cx->free(cg->upvarMap.vector);
18308:         cg->upvarMap.vector = NULL;
18308:     }
18308: 
    1:     /*
    1:      * We initialize fun->u.script to be the script constructed above
    1:      * so that the debugger has a valid FUN_SCRIPT(fun).
    1:      */
13691:     fun = NULL;
27012:     if (cg->flags & TCF_IN_FUNCTION) {
27012:         fun = cg->fun;
    1:         JS_ASSERT(FUN_INTERPRETED(fun) && !FUN_SCRIPT(fun));
34290:         if (script->upvarsOffset != 0)
34290:             JS_ASSERT(script->upvars()->length == fun->u.i.nupvars);
34290:         else
34290:             fun->u.i.nupvars = 0;
18308: 
13691:         js_FreezeLocalNames(cx, fun);
    1:         fun->u.i.script = script;
11377: #ifdef CHECK_SCRIPT_OWNER
11377:         script->owner = NULL;
11377: #endif
27012:         if (cg->flags & TCF_FUN_HEAVYWEIGHT)
    1:             fun->flags |= JSFUN_HEAVYWEIGHT;
    1:     }
    1: 
    1:     /* Tell the debugger about this compiled script. */
    1:     js_CallNewScriptHook(cx, script, fun);
34290:     JS_RUNTIME_METER(cx->runtime, liveScripts);
34290:     JS_RUNTIME_METER(cx->runtime, totalScripts);
    1:     return script;
    1: 
    1: bad:
    1:     js_DestroyScript(cx, script);
    1:     return NULL;
    1: }
    1: 
    1: JS_FRIEND_API(void)
    1: js_CallNewScriptHook(JSContext *cx, JSScript *script, JSFunction *fun)
    1: {
34290:     JS_ASSERT(script != JSScript::emptyScript());
34290: 
    1:     JSNewScriptHook hook;
    1: 
 2433:     hook = cx->debugHooks->newScriptHook;
    1:     if (hook) {
 2433:         JS_KEEP_ATOMS(cx->runtime);
    1:         hook(cx, script->filename, script->lineno, script, fun,
 2433:              cx->debugHooks->newScriptHookData);
 2433:         JS_UNKEEP_ATOMS(cx->runtime);
    1:     }
    1: }
    1: 
    1: JS_FRIEND_API(void)
    1: js_CallDestroyScriptHook(JSContext *cx, JSScript *script)
    1: {
34290:     JS_ASSERT(script != JSScript::emptyScript());
34290: 
    1:     JSDestroyScriptHook hook;
    1: 
 2433:     hook = cx->debugHooks->destroyScriptHook;
    1:     if (hook)
 2433:         hook(cx, script, cx->debugHooks->destroyScriptHookData);
    1: }
    1: 
    1: void
    1: js_DestroyScript(JSContext *cx, JSScript *script)
    1: {
34290:     if (script == JSScript::emptyScript()) {
34290:         JS_RUNTIME_UNMETER(cx->runtime, liveEmptyScripts);
34290:         return;
34290:     }
34290: 
    1:     js_CallDestroyScriptHook(cx, script);
11377:     JS_ClearScriptTraps(cx, script);
    1: 
    1:     if (script->principals)
    1:         JSPRINCIPALS_DROP(cx, script->principals);
11377: 
15530:     if (JS_GSN_CACHE(cx).code == script->code)
26569:         JS_PURGE_GSN_CACHE(cx);
11377: 
11377:     /*
30714:      * Worry about purging the property cache and any compiled traces related
30714:      * to its bytecode if this script is being destroyed from JS_DestroyScript
30714:      * or equivalent according to a mandatory "New/Destroy" protocol.
30714:      *
30733:      * The GC purges all property caches when regenerating shapes upon shape
30733:      * generator overflow, so no need in that event to purge just the entries
30733:      * for this script.
30733:      *
30733:      * The GC purges trace-JITted code on every GC activation, not just when
30733:      * regenerating shapes, so we don't have to purge fragments if the GC is
30733:      * currently running.
30733:      *
33121:      * JS_THREADSAFE note: js_PurgePropertyCacheForScript purges only the
11377:      * current thread's property cache, so a script not owned by a function
11377:      * or object, which hands off lifetime management for that script to the
11377:      * GC, must be used by only one thread over its lifetime.
11377:      *
11377:      * This should be an API-compatible change, since a script is never safe
11377:      * against premature GC if shared among threads without a rooted object
11377:      * wrapping it to protect the script's mapped atoms against GC. We use
11377:      * script->owner to enforce this requirement via assertions.
11377:      */
11377: #ifdef CHECK_SCRIPT_OWNER
11377:     JS_ASSERT_IF(cx->runtime->gcRunning, !script->owner);
11377: #endif
11377: 
30735:     /* FIXME: bug 506341; would like to do this only if regenerating shapes. */
30735:     if (!cx->runtime->gcRunning) {
22652:         JSStackFrame *fp = js_GetTopStackFrame(cx);
22652: 
22652:         if (!(fp && (fp->flags & JSFRAME_EVAL))) {
33121:             js_PurgePropertyCacheForScript(cx, script);
30734: 
11377: #ifdef CHECK_SCRIPT_OWNER
11377:             JS_ASSERT(script->owner == cx->thread);
11377: #endif
31843:         }
31843:     }
31843: 
24879: #ifdef JS_TRACER
26569:     js_PurgeScriptFragments(cx, script);
24879: #endif
11377: 
30851:     cx->free(script);
34290: 
34290:     JS_RUNTIME_UNMETER(cx->runtime, liveScripts);
    1: }
    1: 
    1: void
  583: js_TraceScript(JSTracer *trc, JSScript *script)
    1: {
    1:     JSAtomMap *map;
    1:     uintN i, length;
    1:     JSAtom **vector;
 4529:     jsval v;
 3235:     JSObjectArray *objarray;
    1: 
    1:     map = &script->atomMap;
    1:     length = map->length;
    1:     vector = map->vector;
 3235:     for (i = 0; i < length; i++) {
 4529:         v = ATOM_KEY(vector[i]);
 4529:         if (JSVAL_IS_TRACEABLE(v)) {
 3235:             JS_SET_TRACING_INDEX(trc, "atomMap", i);
 4529:             JS_CallTracer(trc, JSVAL_TO_TRACEABLE(v), JSVAL_TRACE_KIND(v));
 4529:         }
 3235:     }
 3235: 
 3235:     if (script->objectsOffset != 0) {
32723:         objarray = script->objects();
 3235:         i = objarray->length;
 3235:         do {
 3235:             --i;
11089:             if (objarray->vector[i]) {
 3235:                 JS_SET_TRACING_INDEX(trc, "objects", i);
 3235:                 JS_CallTracer(trc, objarray->vector[i], JSTRACE_OBJECT);
11089:             }
 3235:         } while (i != 0);
 3235:     }
 3235: 
 3235:     if (script->regexpsOffset != 0) {
32723:         objarray = script->regexps();
 3235:         i = objarray->length;
 3235:         do {
 3235:             --i;
11089:             if (objarray->vector[i]) {
 3235:                 JS_SET_TRACING_INDEX(trc, "regexps", i);
 3235:                 JS_CallTracer(trc, objarray->vector[i], JSTRACE_OBJECT);
11089:             }
 3235:         } while (i != 0);
 3235:     }
    1: 
18285:     if (script->u.object) {
15336:         JS_SET_TRACING_NAME(trc, "object");
18285:         JS_CallTracer(trc, script->u.object, JSTRACE_OBJECT);
15336:     }
15336: 
  583:     if (IS_GC_MARKING_TRACER(trc) && script->filename)
    1:         js_MarkScriptFilename(script->filename);
    1: }
    1: 
    1: typedef struct GSNCacheEntry {
    1:     JSDHashEntryHdr     hdr;
    1:     jsbytecode          *pc;
    1:     jssrcnote           *sn;
    1: } GSNCacheEntry;
    1: 
    1: #define GSN_CACHE_THRESHOLD     100
    1: 
26569: void
26569: js_PurgeGSNCache(JSGSNCache *cache)
26569: {
26569:     cache->code = NULL;
26569:     if (cache->table.ops) {
26569:         JS_DHashTableFinish(&cache->table);
26569:         cache->table.ops = NULL;
26569:     }
26569:     GSN_CACHE_METER(cache, purges);
26569: }
26569: 
    1: jssrcnote *
    1: js_GetSrcNoteCached(JSContext *cx, JSScript *script, jsbytecode *pc)
    1: {
    1:     ptrdiff_t target, offset;
    1:     GSNCacheEntry *entry;
    1:     jssrcnote *sn, *result;
    1:     uintN nsrcnotes;
    1: 
    1: 
25144:     target = pc - script->code;
    1:     if ((uint32)target >= script->length)
    1:         return NULL;
    1: 
15530:     if (JS_GSN_CACHE(cx).code == script->code) {
    1:         JS_METER_GSN_CACHE(cx, hits);
    1:         entry = (GSNCacheEntry *)
    1:                 JS_DHashTableOperate(&JS_GSN_CACHE(cx).table, pc,
    1:                                      JS_DHASH_LOOKUP);
    1:         return entry->sn;
    1:     }
    1: 
    1:     JS_METER_GSN_CACHE(cx, misses);
    1:     offset = 0;
32723:     for (sn = script->notes(); ; sn = SN_NEXT(sn)) {
    1:         if (SN_IS_TERMINATOR(sn)) {
    1:             result = NULL;
    1:             break;
    1:         }
    1:         offset += SN_DELTA(sn);
    1:         if (offset == target && SN_IS_GETTABLE(sn)) {
    1:             result = sn;
    1:             break;
    1:         }
    1:     }
    1: 
15530:     if (JS_GSN_CACHE(cx).code != script->code &&
    1:         script->length >= GSN_CACHE_THRESHOLD) {
26569:         JS_PURGE_GSN_CACHE(cx);
    1:         nsrcnotes = 0;
32723:         for (sn = script->notes(); !SN_IS_TERMINATOR(sn);
    1:              sn = SN_NEXT(sn)) {
    1:             if (SN_IS_GETTABLE(sn))
    1:                 ++nsrcnotes;
    1:         }
    1:         if (!JS_DHashTableInit(&JS_GSN_CACHE(cx).table, JS_DHashGetStubOps(),
    1:                                NULL, sizeof(GSNCacheEntry),
    1:                                JS_DHASH_DEFAULT_CAPACITY(nsrcnotes))) {
    1:             JS_GSN_CACHE(cx).table.ops = NULL;
    1:         } else {
    1:             pc = script->code;
32723:             for (sn = script->notes(); !SN_IS_TERMINATOR(sn);
    1:                  sn = SN_NEXT(sn)) {
    1:                 pc += SN_DELTA(sn);
    1:                 if (SN_IS_GETTABLE(sn)) {
    1:                     entry = (GSNCacheEntry *)
    1:                             JS_DHashTableOperate(&JS_GSN_CACHE(cx).table, pc,
    1:                                                  JS_DHASH_ADD);
    1:                     entry->pc = pc;
    1:                     entry->sn = sn;
    1:                 }
    1:             }
15530:             JS_GSN_CACHE(cx).code = script->code;
    1:             JS_METER_GSN_CACHE(cx, fills);
    1:         }
    1:     }
    1: 
    1:     return result;
    1: }
    1: 
    1: uintN
21685: js_FramePCToLineNumber(JSContext *cx, JSStackFrame *fp)
21685: {
21685:     return js_PCToLineNumber(cx, fp->script, fp->imacpc ? fp->imacpc : fp->regs->pc);
21685: }
21685: 
21685: uintN
    1: js_PCToLineNumber(JSContext *cx, JSScript *script, jsbytecode *pc)
    1: {
25215:     JSOp op;
    1:     JSFunction *fun;
    1:     uintN lineno;
    1:     ptrdiff_t offset, target;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     /* Cope with JSStackFrame.pc value prior to entering js_Interpret. */
    1:     if (!pc)
    1:         return 0;
    1: 
    1:     /*
    1:      * Special case: function definition needs no line number note because
    1:      * the function's script contains its starting line number.
    1:      */
25215:     op = js_GetOpcode(cx, script, pc);
25215:     if (js_CodeSpec[op].format & JOF_INDEXBASE)
25215:         pc += js_CodeSpec[op].length;
    1:     if (*pc == JSOP_DEFFUN) {
13824:         GET_FUNCTION_FROM_BYTECODE(script, pc, 0, fun);
    1:         return fun->u.i.script->lineno;
    1:     }
    1: 
    1:     /*
    1:      * General case: walk through source notes accumulating their deltas,
    1:      * keeping track of line-number notes, until we pass the note for pc's
    1:      * offset within script->code.
    1:      */
    1:     lineno = script->lineno;
    1:     offset = 0;
25144:     target = pc - script->code;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
    1:         offset += SN_DELTA(sn);
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             if (offset <= target)
    1:                 lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             if (offset <= target)
    1:                 lineno++;
    1:         }
    1:         if (offset > target)
    1:             break;
    1:     }
    1:     return lineno;
    1: }
    1: 
    1: /* The line number limit is the same as the jssrcnote offset limit. */
    1: #define SN_LINE_LIMIT   (SN_3BYTE_OFFSET_FLAG << 16)
    1: 
    1: jsbytecode *
    1: js_LineNumberToPC(JSScript *script, uintN target)
    1: {
    1:     ptrdiff_t offset, best;
    1:     uintN lineno, bestdiff, diff;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     offset = 0;
    1:     best = -1;
    1:     lineno = script->lineno;
    1:     bestdiff = SN_LINE_LIMIT;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
  267:         /*
  267:          * Exact-match only if offset is not in the prolog; otherwise use
  267:          * nearest greater-or-equal line number match.
  267:          */
  267:         if (lineno == target && script->code + offset >= script->main)
    1:             goto out;
  267:         if (lineno >= target) {
    1:             diff = lineno - target;
    1:             if (diff < bestdiff) {
    1:                 bestdiff = diff;
    1:                 best = offset;
    1:             }
    1:         }
    1:         offset += SN_DELTA(sn);
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             lineno++;
    1:         }
    1:     }
    1:     if (best >= 0)
    1:         offset = best;
    1: out:
    1:     return script->code + offset;
    1: }
    1: 
    1: JS_FRIEND_API(uintN)
    1: js_GetScriptLineExtent(JSScript *script)
    1: {
    1:     uintN lineno;
    1:     jssrcnote *sn;
    1:     JSSrcNoteType type;
    1: 
    1:     lineno = script->lineno;
32723:     for (sn = script->notes(); !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
    1:         type = (JSSrcNoteType) SN_TYPE(sn);
    1:         if (type == SRC_SETLINE) {
    1:             lineno = (uintN) js_GetSrcNoteOffset(sn, 0);
    1:         } else if (type == SRC_NEWLINE) {
    1:             lineno++;
    1:         }
    1:     }
    1:     return 1 + lineno - script->lineno;
    1: }
