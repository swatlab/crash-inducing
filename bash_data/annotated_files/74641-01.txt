74556: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
74556: /* vim: set sw=2 ts=2 et tw=80: */
74556: /* ***** BEGIN LICENSE BLOCK *****
74556:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
74556:  *
74556:  * The contents of this file are subject to the Mozilla Public License Version
74556:  * 1.1 (the "License"); you may not use this file except in compliance with
74556:  * the License. You may obtain a copy of the License at
74556:  * http://www.mozilla.org/MPL/
74556:  *
74556:  * Software distributed under the License is distributed on an "AS IS" basis,
74556:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
74556:  * for the specific language governing rights and limitations under the
74556:  * License.
74556:  *
74556:  * The Original Code is mozilla.org code.
74556:  *
74556:  * The Initial Developer of the Original Code is
74556:  * Netscape Communications Corporation.
74556:  * Portions created by the Initial Developer are Copyright (C) 1998
74556:  * the Initial Developer. All Rights Reserved.
74556:  *
74556:  * Contributor(s):
74556:  *   Robert Sayre <sayrer@gmail.com>
74556:  *   Henri Sivonen <hsivonen@iki.fi>
74556:  *
74556:  * Alternatively, the contents of this file may be used under the terms of
74556:  * either of the GNU General Public License Version 2 or later (the "GPL"),
74556:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
74556:  * in which case the provisions of the GPL or the LGPL are applicable instead
74556:  * of those above. If you wish to allow use of your version of this file only
74556:  * under the terms of either the GPL or the LGPL, and not to allow others to
74556:  * use your version of this file under the terms of the MPL, indicate your
74556:  * decision by deleting the provisions above and replace them with the notice
74556:  * and other provisions required by the GPL or the LGPL. If you do not delete
74556:  * the provisions above, a recipient may use your version of this file under
74556:  * the terms of any one of the MPL, the GPL or the LGPL.
74556:  *
74556:  * ***** END LICENSE BLOCK ***** */
74556: 
74556: #include "nsTreeSanitizer.h"
74556: #include "nsCSSParser.h"
74556: #include "nsCSSProperty.h"
74556: #include "mozilla/css/Declaration.h"
74556: #include "mozilla/css/StyleRule.h"
74556: #include "mozilla/css/Rule.h"
74556: #include "nsUnicharInputStream.h"
74556: #include "nsCSSStyleSheet.h"
74556: #include "nsIDOMCSSRule.h"
74556: #include "nsAttrName.h"
74556: #include "nsIScriptSecurityManager.h"
74556: #include "nsNetUtil.h"
74556: #include "nsComponentManagerUtils.h"
74556: #include "nsNullPrincipal.h"
74556: 
74556: //
74556: // Thanks to Mark Pilgrim and Sam Ruby for the initial whitelist
74556: //
74556: nsIAtom** const kElementsHTML[] = {
74556:   &nsGkAtoms::a,
74556:   &nsGkAtoms::abbr,
74556:   &nsGkAtoms::acronym,
74556:   &nsGkAtoms::address,
74556:   &nsGkAtoms::area,
74556:   &nsGkAtoms::article,
74556:   &nsGkAtoms::aside,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::audio,
74556: #endif
74556:   &nsGkAtoms::b,
74556:   &nsGkAtoms::bdo,
74556:   &nsGkAtoms::big,
74556:   &nsGkAtoms::blockquote,
74556:   &nsGkAtoms::br,
74556:   &nsGkAtoms::button,
74556:   &nsGkAtoms::canvas,
74556:   &nsGkAtoms::caption,
74556:   &nsGkAtoms::center,
74556:   &nsGkAtoms::cite,
74556:   &nsGkAtoms::code,
74556:   &nsGkAtoms::col,
74556:   &nsGkAtoms::colgroup,
74556:   &nsGkAtoms::command,
74556:   &nsGkAtoms::datalist,
74556:   &nsGkAtoms::dd,
74556:   &nsGkAtoms::del,
74556:   &nsGkAtoms::details,
74556:   &nsGkAtoms::dfn,
74556:   &nsGkAtoms::dir,
74556:   &nsGkAtoms::div,
74556:   &nsGkAtoms::dl,
74556:   &nsGkAtoms::dt,
74556:   &nsGkAtoms::em,
74556:   &nsGkAtoms::fieldset,
74556:   &nsGkAtoms::figcaption,
74556:   &nsGkAtoms::figure,
74556:   &nsGkAtoms::font,
74556:   &nsGkAtoms::footer,
74556:   &nsGkAtoms::form,
74556:   &nsGkAtoms::h1,
74556:   &nsGkAtoms::h2,
74556:   &nsGkAtoms::h3,
74556:   &nsGkAtoms::h4,
74556:   &nsGkAtoms::h5,
74556:   &nsGkAtoms::h6,
74556:   &nsGkAtoms::header,
74556:   &nsGkAtoms::hgroup,
74556:   &nsGkAtoms::hr,
74556:   &nsGkAtoms::i,
74556:   &nsGkAtoms::img,
74556:   &nsGkAtoms::input,
74556:   &nsGkAtoms::ins,
74556:   &nsGkAtoms::kbd,
74556:   &nsGkAtoms::label,
74556:   &nsGkAtoms::legend,
74556:   &nsGkAtoms::li,
74556:   &nsGkAtoms::link,
74556:   &nsGkAtoms::listing,
74556:   &nsGkAtoms::map,
74556:   &nsGkAtoms::mark,
74556:   &nsGkAtoms::menu,
74556:   &nsGkAtoms::meta,
74556:   &nsGkAtoms::meter,
74556:   &nsGkAtoms::nav,
74556:   &nsGkAtoms::nobr,
74556:   &nsGkAtoms::noscript,
74556:   &nsGkAtoms::ol,
74556:   &nsGkAtoms::optgroup,
74556:   &nsGkAtoms::option,
74556:   &nsGkAtoms::output,
74556:   &nsGkAtoms::p,
74556:   &nsGkAtoms::pre,
74556:   &nsGkAtoms::progress,
74556:   &nsGkAtoms::q,
74556:   &nsGkAtoms::rp,
74556:   &nsGkAtoms::rt,
74556:   &nsGkAtoms::ruby,
74556:   &nsGkAtoms::s,
74556:   &nsGkAtoms::samp,
74556:   &nsGkAtoms::section,
74556:   &nsGkAtoms::select,
74556:   &nsGkAtoms::small,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::source,
74556: #endif
74556:   &nsGkAtoms::span,
74556:   &nsGkAtoms::strike,
74556:   &nsGkAtoms::strong,
74556:   &nsGkAtoms::sub,
74556:   &nsGkAtoms::summary,
74556:   &nsGkAtoms::sup,
74556:   &nsGkAtoms::table,
74556:   &nsGkAtoms::tbody,
74556:   &nsGkAtoms::td,
74556:   &nsGkAtoms::textarea,
74556:   &nsGkAtoms::tfoot,
74556:   &nsGkAtoms::th,
74556:   &nsGkAtoms::thead,
74556:   &nsGkAtoms::time,
74556:   &nsGkAtoms::tr,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::track,
74556: #endif
74556:   &nsGkAtoms::tt,
74556:   &nsGkAtoms::u,
74556:   &nsGkAtoms::ul,
74556:   &nsGkAtoms::var,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::video,
74556: #endif
74556:   &nsGkAtoms::wbr,
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kAttributesHTML[] = {
74556:   &nsGkAtoms::abbr,
74556:   &nsGkAtoms::accept,
74556:   &nsGkAtoms::acceptcharset,
74556:   &nsGkAtoms::accesskey,
74556:   &nsGkAtoms::action,
74556:   &nsGkAtoms::align,
74556:   &nsGkAtoms::alt,
74556:   &nsGkAtoms::autocomplete,
74556:   &nsGkAtoms::autofocus,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::autoplay,
74556: #endif
74556:   &nsGkAtoms::axis,
74556:   &nsGkAtoms::background,
74556:   &nsGkAtoms::bgcolor,
74556:   &nsGkAtoms::border,
74556:   &nsGkAtoms::cellpadding,
74556:   &nsGkAtoms::cellspacing,
74556:   &nsGkAtoms::_char,
74556:   &nsGkAtoms::charoff,
74556:   &nsGkAtoms::charset,
74556:   &nsGkAtoms::checked,
74556:   &nsGkAtoms::cite,
74556:   &nsGkAtoms::_class,
74556:   &nsGkAtoms::clear,
74556:   &nsGkAtoms::cols,
74556:   &nsGkAtoms::colspan,
74556:   &nsGkAtoms::color,
74556:   &nsGkAtoms::contenteditable,
74556:   &nsGkAtoms::contextmenu,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::controls,
74556: #endif
74556:   &nsGkAtoms::compact,
74556:   &nsGkAtoms::coords,
74556:   &nsGkAtoms::datetime,
74556:   &nsGkAtoms::dir,
74556:   &nsGkAtoms::disabled,
74556:   &nsGkAtoms::draggable,
74556:   &nsGkAtoms::enctype,
74556:   &nsGkAtoms::face,
74556:   &nsGkAtoms::_for,
74556:   &nsGkAtoms::frame,
74556:   &nsGkAtoms::headers,
74556:   &nsGkAtoms::height,
74556:   &nsGkAtoms::hidden,
74556:   &nsGkAtoms::high,
74556:   &nsGkAtoms::href,
74556:   &nsGkAtoms::hreflang,
74556:   &nsGkAtoms::hspace,
74556:   &nsGkAtoms::icon,
74556:   &nsGkAtoms::id,
74556:   &nsGkAtoms::ismap,
74556:   &nsGkAtoms::itemid,
74556:   &nsGkAtoms::itemprop,
74556:   &nsGkAtoms::itemref,
74556:   &nsGkAtoms::itemscope,
74556:   &nsGkAtoms::itemtype,
74556:   &nsGkAtoms::kind,
74556:   &nsGkAtoms::label,
74556:   &nsGkAtoms::lang,
74556:   &nsGkAtoms::list,
74556:   &nsGkAtoms::longdesc,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::loop,
74556:   &nsGkAtoms::loopend,
74556:   &nsGkAtoms::loopstart,
74556: #endif
74556:   &nsGkAtoms::low,
74556:   &nsGkAtoms::max,
74556:   &nsGkAtoms::maxlength,
74556:   &nsGkAtoms::media,
74556:   &nsGkAtoms::method,
74556:   &nsGkAtoms::min,
74556:   &nsGkAtoms::mozdonotsend,
74556:   &nsGkAtoms::multiple,
74556:   &nsGkAtoms::name,
74556:   &nsGkAtoms::nohref,
74556:   &nsGkAtoms::noshade,
74556:   &nsGkAtoms::novalidate,
74556:   &nsGkAtoms::nowrap,
74556:   &nsGkAtoms::open,
74556:   &nsGkAtoms::optimum,
74556:   &nsGkAtoms::pattern,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::pixelratio,
74556: #endif
74556:   &nsGkAtoms::placeholder,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::playbackrate,
74556:   &nsGkAtoms::playcount,
74556: #endif
74556:   &nsGkAtoms::pointSize,
74556: #ifdef MOZ_MEDIA
74556:   &nsGkAtoms::poster,
74556:   &nsGkAtoms::preload,
74556: #endif
74556:   &nsGkAtoms::prompt,
74556:   &nsGkAtoms::pubdate,
74556:   &nsGkAtoms::radiogroup,
74556:   &nsGkAtoms::readonly,
74556:   &nsGkAtoms::rel,
74556:   &nsGkAtoms::required,
74556:   &nsGkAtoms::rev,
74556:   &nsGkAtoms::reversed,
74556:   &nsGkAtoms::role,
74556:   &nsGkAtoms::rows,
74556:   &nsGkAtoms::rowspan,
74556:   &nsGkAtoms::rules,
74556:   &nsGkAtoms::scoped,
74556:   &nsGkAtoms::scope,
74556:   &nsGkAtoms::selected,
74556:   &nsGkAtoms::shape,
74556:   &nsGkAtoms::size,
74556:   &nsGkAtoms::span,
74556:   &nsGkAtoms::spellcheck,
74556:   &nsGkAtoms::src,
74556:   &nsGkAtoms::srclang,
74556:   &nsGkAtoms::start,
74556:   &nsGkAtoms::summary,
74556:   &nsGkAtoms::tabindex,
74556:   &nsGkAtoms::target,
74556:   &nsGkAtoms::title,
74556:   &nsGkAtoms::type,
74556:   &nsGkAtoms::usemap,
74556:   &nsGkAtoms::valign,
74556:   &nsGkAtoms::value,
74556:   &nsGkAtoms::vspace,
74556:   &nsGkAtoms::width,
74556:   &nsGkAtoms::wrap,
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kURLAttributesHTML[] = {
74556:   &nsGkAtoms::action,
74556:   &nsGkAtoms::href,
74556:   &nsGkAtoms::src,
74556:   &nsGkAtoms::longdesc,
74556:   &nsGkAtoms::cite,
74556:   &nsGkAtoms::background,
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kElementsSVG[] = {
74556: #ifdef MOZ_SVG
74556:   &nsGkAtoms::a, // a
74556:   &nsGkAtoms::altGlyph, // altGlyph
74556:   &nsGkAtoms::altGlyphDef, // altGlyphDef
74556:   &nsGkAtoms::altGlyphItem, // altGlyphItem
74556:   &nsGkAtoms::animate, // animate
74556:   &nsGkAtoms::animateColor, // animateColor
74556:   &nsGkAtoms::animateMotion, // animateMotion
74556:   &nsGkAtoms::animateTransform, // animateTransform
74556:   &nsGkAtoms::circle, // circle
74556:   &nsGkAtoms::clipPath, // clipPath
74556:   &nsGkAtoms::colorProfile, // color-profile
74556:   &nsGkAtoms::cursor, // cursor
74556:   &nsGkAtoms::defs, // defs
74556:   &nsGkAtoms::desc, // desc
74556:   &nsGkAtoms::ellipse, // ellipse
74556:   &nsGkAtoms::elevation, // elevation
74556:   &nsGkAtoms::erode, // erode
74556:   &nsGkAtoms::ex, // ex
74556:   &nsGkAtoms::exact, // exact
74556:   &nsGkAtoms::exponent, // exponent
74556:   &nsGkAtoms::feBlend, // feBlend
74556:   &nsGkAtoms::feColorMatrix, // feColorMatrix
74556:   &nsGkAtoms::feComponentTransfer, // feComponentTransfer
74556:   &nsGkAtoms::feComposite, // feComposite
74556:   &nsGkAtoms::feConvolveMatrix, // feConvolveMatrix
74556:   &nsGkAtoms::feDiffuseLighting, // feDiffuseLighting
74556:   &nsGkAtoms::feDisplacementMap, // feDisplacementMap
74556:   &nsGkAtoms::feDistantLight, // feDistantLight
74556:   &nsGkAtoms::feFlood, // feFlood
74556:   &nsGkAtoms::feFuncA, // feFuncA
74556:   &nsGkAtoms::feFuncB, // feFuncB
74556:   &nsGkAtoms::feFuncG, // feFuncG
74556:   &nsGkAtoms::feFuncR, // feFuncR
74556:   &nsGkAtoms::feGaussianBlur, // feGaussianBlur
74556:   &nsGkAtoms::feImage, // feImage
74556:   &nsGkAtoms::feMerge, // feMerge
74556:   &nsGkAtoms::feMergeNode, // feMergeNode
74556:   &nsGkAtoms::feMorphology, // feMorphology
74556:   &nsGkAtoms::feOffset, // feOffset
74556:   &nsGkAtoms::fePointLight, // fePointLight
74556:   &nsGkAtoms::feSpecularLighting, // feSpecularLighting
74556:   &nsGkAtoms::feSpotLight, // feSpotLight
74556:   &nsGkAtoms::feTile, // feTile
74556:   &nsGkAtoms::feTurbulence, // feTurbulence
74556:   &nsGkAtoms::filter, // filter
74556:   &nsGkAtoms::font, // font
74556:   &nsGkAtoms::font_face, // font-face
74556:   &nsGkAtoms::font_face_format, // font-face-format
74556:   &nsGkAtoms::font_face_name, // font-face-name
74556:   &nsGkAtoms::font_face_src, // font-face-src
74556:   &nsGkAtoms::font_face_uri, // font-face-uri
74556:   &nsGkAtoms::foreignObject, // foreignObject
74556:   &nsGkAtoms::g, // g
74556:   &nsGkAtoms::glyph, // glyph
74556:   &nsGkAtoms::glyphRef, // glyphRef
74556:   &nsGkAtoms::hkern, // hkern
74556:   &nsGkAtoms::image, // image
74556:   &nsGkAtoms::line, // line
74556:   &nsGkAtoms::linearGradient, // linearGradient
74556:   &nsGkAtoms::marker, // marker
74556:   &nsGkAtoms::mask, // mask
74556:   &nsGkAtoms::metadata, // metadata
74556:   &nsGkAtoms::missingGlyph, // missingGlyph
74556:   &nsGkAtoms::mpath, // mpath
74556:   &nsGkAtoms::path, // path
74556:   &nsGkAtoms::pattern, // pattern
74556:   &nsGkAtoms::polygon, // polygon
74556:   &nsGkAtoms::polyline, // polyline
74556:   &nsGkAtoms::radialGradient, // radialGradient
74556:   &nsGkAtoms::rect, // rect
74556:   &nsGkAtoms::set, // set
74556:   &nsGkAtoms::stop, // stop
74556:   &nsGkAtoms::svg, // svg
74556:   &nsGkAtoms::svgSwitch, // switch
74556:   &nsGkAtoms::symbol, // symbol
74556:   &nsGkAtoms::text, // text
74556:   &nsGkAtoms::textPath, // textPath
74556:   &nsGkAtoms::title, // title
74556:   &nsGkAtoms::tref, // tref
74556:   &nsGkAtoms::tspan, // tspan
74556:   &nsGkAtoms::use, // use
74556:   &nsGkAtoms::view, // view
74556:   &nsGkAtoms::vkern, // vkern
74556: #endif
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kAttributesSVG[] = {
74556: #ifdef MOZ_SVG
74556:   // accent-height
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::accumulate, // accumulate
74556:   &nsGkAtoms::additive, // additive
74556: #endif
74556:   &nsGkAtoms::alignment_baseline, // alignment-baseline
74556:   // alphabetic
74556:   &nsGkAtoms::amplitude, // amplitude
74556:   // arabic-form
74556:   // ascent
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::attributeName, // attributeName
74556:   &nsGkAtoms::attributeType, // attributeType
74556: #endif
74556:   &nsGkAtoms::azimuth, // azimuth
74556:   &nsGkAtoms::baseFrequency, // baseFrequency
74556:   &nsGkAtoms::baseline_shift, // baseline-shift
74556:   // baseProfile
74556:   // bbox
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::begin, // begin
74556: #endif
74556:   &nsGkAtoms::bias, // bias
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::by, // by
74556:   &nsGkAtoms::calcMode, // calcMode
74556: #endif
74556:   // cap-height
74556:   &nsGkAtoms::_class, // class
74556:   &nsGkAtoms::clip_path, // clip-path
74556:   &nsGkAtoms::clip_rule, // clip-rule
74556:   &nsGkAtoms::clipPathUnits, // clipPathUnits
74556:   &nsGkAtoms::color, // color
74556:   &nsGkAtoms::colorInterpolation, // color-interpolation
74556:   &nsGkAtoms::colorInterpolationFilters, // color-interpolation-filters
74556:   // contentScriptType
74556:   // contentStyleType
74556:   &nsGkAtoms::cursor, // cursor
74556:   &nsGkAtoms::cx, // cx
74556:   &nsGkAtoms::cy, // cy
74556:   &nsGkAtoms::d, // d
74556:   // descent
74556:   &nsGkAtoms::diffuseConstant, // diffuseConstant
74556:   &nsGkAtoms::direction, // direction
74556:   &nsGkAtoms::display, // display
74556:   &nsGkAtoms::divisor, // divisor
74556:   &nsGkAtoms::dominant_baseline, // dominant-baseline
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::dur, // dur
74556: #endif
74556:   &nsGkAtoms::dx, // dx
74556:   &nsGkAtoms::dy, // dy
74556:   &nsGkAtoms::edgeMode, // edgeMode
74556:   &nsGkAtoms::elevation, // elevation
74556:   // enable-background
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::end, // end
74556: #endif
74556:   &nsGkAtoms::fill, // fill
74556:   &nsGkAtoms::fill_opacity, // fill-opacity
74556:   &nsGkAtoms::fill_rule, // fill-rule
74556:   &nsGkAtoms::filter, // filter
74556:   &nsGkAtoms::filterRes, // filterRes
74556:   &nsGkAtoms::filterUnits, // filterUnits
74556:   &nsGkAtoms::flood_color, // flood-color
74556:   &nsGkAtoms::flood_opacity, // flood-opacity
74556:   // XXX focusable
74556:   &nsGkAtoms::font, // font
74556:   &nsGkAtoms::font_family, // font-family
74556:   &nsGkAtoms::font_size, // font-size
74556:   &nsGkAtoms::font_size_adjust, // font-size-adjust
74556:   &nsGkAtoms::font_stretch, // font-stretch
74556:   &nsGkAtoms::font_style, // font-style
74556:   &nsGkAtoms::font_variant, // font-variant
74556:   &nsGkAtoms::fontWeight, // font-weight
74556:   &nsGkAtoms::format, // format
74556:   &nsGkAtoms::from, // from
74556:   &nsGkAtoms::fx, // fx
74556:   &nsGkAtoms::fy, // fy
74556:   // g1
74556:   // g2
74556:   // glyph-name
74556:   // glyphRef
74556:   &nsGkAtoms::glyph_orientation_horizontal, // glyph-orientation-horizontal
74556:   &nsGkAtoms::glyph_orientation_vertical, // glyph-orientation-vertical
74556:   &nsGkAtoms::gradientTransform, // gradientTransform
74556:   &nsGkAtoms::gradientUnits, // gradientUnits
74556:   &nsGkAtoms::height, // height
74556:   // horiz-adv-x
74556:   // horiz-origin-x
74556:   // horiz-origin-y
74556:   &nsGkAtoms::id, // id
74556:   // ideographic
74556:   &nsGkAtoms::image_rendering, // image-rendering
74556:   &nsGkAtoms::in, // in
74556:   &nsGkAtoms::in2, // in2
74556:   &nsGkAtoms::intercept, // intercept
74556:   // k
74556:   &nsGkAtoms::k1, // k1
74556:   &nsGkAtoms::k2, // k2
74556:   &nsGkAtoms::k3, // k3
74556:   &nsGkAtoms::k4, // k4
74556:   &nsGkAtoms::kerning, // kerning
74556:   &nsGkAtoms::kernelMatrix, // kernelMatrix
74556:   &nsGkAtoms::kernelUnitLength, // kernelUnitLength
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::keyPoints, // keyPoints
74556:   &nsGkAtoms::keySplines, // keySplines
74556:   &nsGkAtoms::keyTimes, // keyTimes
74556: #endif
74556:   &nsGkAtoms::lang, // lang
74556:   // lengthAdjust
74556:   &nsGkAtoms::letter_spacing, // letter-spacing
74556:   &nsGkAtoms::lighting_color, // lighting-color
74556:   &nsGkAtoms::limitingConeAngle, // limitingConeAngle
74556:   // local
74556:   &nsGkAtoms::marker, // marker
74556:   &nsGkAtoms::marker_end, // marker-end
74556:   &nsGkAtoms::marker_mid, // marker-mid
74556:   &nsGkAtoms::marker_start, // marker-start
74556:   &nsGkAtoms::markerHeight, // markerHeight
74556:   &nsGkAtoms::markerUnits, // markerUnits
74556:   &nsGkAtoms::markerWidth, // markerWidth
74556:   &nsGkAtoms::mask, // mask
74556:   &nsGkAtoms::maskContentUnits, // maskContentUnits
74556:   &nsGkAtoms::maskUnits, // maskUnits
74556:   // mathematical
74556:   &nsGkAtoms::max, // max
74556:   &nsGkAtoms::media, // media
74556:   &nsGkAtoms::method, // method
74556:   &nsGkAtoms::min, // min
74556:   &nsGkAtoms::mode, // mode
74556:   &nsGkAtoms::name, // name
74556:   &nsGkAtoms::numOctaves, // numOctaves
74556:   &nsGkAtoms::offset, // offset
74556:   &nsGkAtoms::opacity, // opacity
74556:   &nsGkAtoms::_operator, // operator
74556:   &nsGkAtoms::order, // order
74556:   &nsGkAtoms::orient, // orient
74556:   &nsGkAtoms::orientation, // orientation
74556:   // origin
74556:   // overline-position
74556:   // overline-thickness
74556:   &nsGkAtoms::overflow, // overflow
74556:   // panose-1
74556:   &nsGkAtoms::path, // path
74556:   &nsGkAtoms::pathLength, // pathLength
74556:   &nsGkAtoms::patternContentUnits, // patternContentUnits
74556:   &nsGkAtoms::patternTransform, // patternTransform
74556:   &nsGkAtoms::patternUnits, // patternUnits
74556:   &nsGkAtoms::pointer_events, // pointer-events XXX is this safe?
74556:   &nsGkAtoms::points, // points
74556:   &nsGkAtoms::pointsAtX, // pointsAtX
74556:   &nsGkAtoms::pointsAtY, // pointsAtY
74556:   &nsGkAtoms::pointsAtZ, // pointsAtZ
74556:   &nsGkAtoms::preserveAlpha, // preserveAlpha
74556:   &nsGkAtoms::preserveAspectRatio, // preserveAspectRatio
74556:   &nsGkAtoms::primitiveUnits, // primitiveUnits
74556:   &nsGkAtoms::r, // r
74556:   &nsGkAtoms::radius, // radius
74556:   &nsGkAtoms::refX, // refX
74556:   &nsGkAtoms::refY, // refY
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::repeatCount, // repeatCount
74556:   &nsGkAtoms::repeatDur, // repeatDur
74556: #endif
74556:   &nsGkAtoms::requiredExtensions, // requiredExtensions
74556:   &nsGkAtoms::requiredFeatures, // requiredFeatures
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::restart, // restart
74556: #endif
74556:   &nsGkAtoms::result, // result
74556:   &nsGkAtoms::rotate, // rotate
74556:   &nsGkAtoms::rx, // rx
74556:   &nsGkAtoms::ry, // ry
74556:   &nsGkAtoms::scale, // scale
74556:   &nsGkAtoms::seed, // seed
74556:   &nsGkAtoms::shape_rendering, // shape-rendering
74556:   &nsGkAtoms::slope, // slope
74556:   &nsGkAtoms::spacing, // spacing
74556:   &nsGkAtoms::specularConstant, // specularConstant
74556:   &nsGkAtoms::specularExponent, // specularExponent
74556:   &nsGkAtoms::spreadMethod, // spreadMethod
74556:   &nsGkAtoms::startOffset, // startOffset
74556:   &nsGkAtoms::stdDeviation, // stdDeviation
74556:   // stemh
74556:   // stemv
74556:   &nsGkAtoms::stitchTiles, // stitchTiles
74556:   &nsGkAtoms::stop_color, // stop-color
74556:   &nsGkAtoms::stop_opacity, // stop-opacity
74556:   // strikethrough-position
74556:   // strikethrough-thickness
74556:   &nsGkAtoms::string, // string
74556:   &nsGkAtoms::stroke, // stroke
74556:   &nsGkAtoms::stroke_dasharray, // stroke-dasharray
74556:   &nsGkAtoms::stroke_dashoffset, // stroke-dashoffset
74556:   &nsGkAtoms::stroke_linecap, // stroke-linecap
74556:   &nsGkAtoms::stroke_linejoin, // stroke-linejoin
74556:   &nsGkAtoms::stroke_miterlimit, // stroke-miterlimit
74556:   &nsGkAtoms::stroke_opacity, // stroke-opacity
74556:   &nsGkAtoms::stroke_width, // stroke-width
74556:   &nsGkAtoms::surfaceScale, // surfaceScale
74556:   &nsGkAtoms::systemLanguage, // systemLanguage
74556:   &nsGkAtoms::tableValues, // tableValues
74556:   &nsGkAtoms::target, // target
74556:   &nsGkAtoms::targetX, // targetX
74556:   &nsGkAtoms::targetY, // targetY
74556:   &nsGkAtoms::text_anchor, // text-anchor
74556:   &nsGkAtoms::text_decoration, // text-decoration
74556:   // textLength
74556:   &nsGkAtoms::text_rendering, // text-rendering
74556:   &nsGkAtoms::title, // title
74556: #ifdef MOZ_SMIL
74556:   &nsGkAtoms::to, // to
74556: #endif
74556:   &nsGkAtoms::transform, // transform
74556:   &nsGkAtoms::type, // type
74556:   // u1
74556:   // u2
74556:   // underline-position
74556:   // underline-thickness
74556:   // unicode
74556:   &nsGkAtoms::unicode_bidi, // unicode-bidi
74556:   // unicode-range
74556:   // units-per-em
74556:   // v-alphabetic
74556:   // v-hanging
74556:   // v-ideographic
74556:   // v-mathematical
74556:   &nsGkAtoms::values, // values
74556:   // vert-adv-y
74556:   // vert-origin-x
74556:   // vert-origin-y
74556:   &nsGkAtoms::viewBox, // viewBox
74556:   &nsGkAtoms::visibility, // visibility
74556:   // viewTarget
74556:   &nsGkAtoms::width, // width
74556:   // widths
74556:   &nsGkAtoms::word_spacing, // word-spacing
74556:   // writing-mode
74556:   &nsGkAtoms::x, // x
74556:   // x-height
74556:   &nsGkAtoms::x1, // x1
74556:   &nsGkAtoms::x2, // x2
74556:   &nsGkAtoms::xChannelSelector, // xChannelSelector
74556:   &nsGkAtoms::y, // y
74556:   &nsGkAtoms::y1, // y1
74556:   &nsGkAtoms::y2, // y2
74556:   &nsGkAtoms::yChannelSelector, // yChannelSelector
74556:   &nsGkAtoms::z, // z
74556:   &nsGkAtoms::zoomAndPan, // zoomAndPan
74556: #endif
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kURLAttributesSVG[] = {
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kElementsMathML[] = {
74556:    &nsGkAtoms::abs_, // abs
74556:    &nsGkAtoms::_and, // and
74556:    &nsGkAtoms::annotation_, // annotation
74556:    &nsGkAtoms::annotation_xml_, // annotation-xml
74556:    &nsGkAtoms::apply_, // apply
74556:    &nsGkAtoms::approx_, // approx
74556:    &nsGkAtoms::arccos_, // arccos
74556:    &nsGkAtoms::arccosh_, // arccosh
74556:    &nsGkAtoms::arccot_, // arccot
74556:    &nsGkAtoms::arccoth_, // arccoth
74556:    &nsGkAtoms::arccsc_, // arccsc
74556:    &nsGkAtoms::arccsch_, // arccsch
74556:    &nsGkAtoms::arcsec_, // arcsec
74556:    &nsGkAtoms::arcsech_, // arcsech
74556:    &nsGkAtoms::arcsin_, // arcsin
74556:    &nsGkAtoms::arcsinh_, // arcsinh
74556:    &nsGkAtoms::arctan_, // arctan
74556:    &nsGkAtoms::arctanh_, // arctanh
74556:    &nsGkAtoms::arg_, // arg
74556:    &nsGkAtoms::bind_, // bind
74556:    &nsGkAtoms::bvar_, // bvar
74556:    &nsGkAtoms::card_, // card
74556:    &nsGkAtoms::cartesianproduct_, // cartesianproduct
74556:    &nsGkAtoms::cbytes_, // cbytes
74556:    &nsGkAtoms::ceiling, // ceiling
74556:    &nsGkAtoms::cerror_, // cerror
74556:    &nsGkAtoms::ci_, // ci
74556:    &nsGkAtoms::cn_, // cn
74556:    &nsGkAtoms::codomain_, // codomain
74556:    &nsGkAtoms::complexes_, // complexes
74556:    &nsGkAtoms::compose_, // compose
74556:    &nsGkAtoms::condition_, // condition
74556:    &nsGkAtoms::conjugate_, // conjugate
74556:    &nsGkAtoms::cos_, // cos
74556:    &nsGkAtoms::cosh_, // cosh
74556:    &nsGkAtoms::cot_, // cot
74556:    &nsGkAtoms::coth_, // coth
74556:    &nsGkAtoms::cs_, // cs
74556:    &nsGkAtoms::csc_, // csc
74556:    &nsGkAtoms::csch_, // csch
74556:    &nsGkAtoms::csymbol_, // csymbol
74556:    &nsGkAtoms::curl_, // curl
74556:    &nsGkAtoms::declare, // declare
74556:    &nsGkAtoms::degree_, // degree
74556:    &nsGkAtoms::determinant_, // determinant
74556:    &nsGkAtoms::diff_, // diff
74556:    &nsGkAtoms::divergence_, // divergence
74556:    &nsGkAtoms::divide_, // divide
74556:    &nsGkAtoms::domain_, // domain
74556:    &nsGkAtoms::domainofapplication_, // domainofapplication
74556:    &nsGkAtoms::el_, // el
74556:    &nsGkAtoms::emptyset_, // emptyset
74556:    &nsGkAtoms::eq_, // eq
74556:    &nsGkAtoms::equivalent_, // equivalent
74556:    &nsGkAtoms::eulergamma_, // eulergamma
74556:    &nsGkAtoms::exists_, // exists
74556:    &nsGkAtoms::exp_, // exp
74556:    &nsGkAtoms::exponentiale_, // exponentiale
74556:    &nsGkAtoms::factorial_, // factorial
74556:    &nsGkAtoms::factorof_, // factorof
74556:    &nsGkAtoms::_false, // false
74556:    &nsGkAtoms::floor, // floor
74556:    &nsGkAtoms::fn_, // fn
74556:    &nsGkAtoms::forall_, // forall
74556:    &nsGkAtoms::gcd_, // gcd
74556:    &nsGkAtoms::geq_, // geq
74556:    &nsGkAtoms::grad, // grad
74556:    &nsGkAtoms::gt_, // gt
74556:    &nsGkAtoms::ident_, // ident
74556:    &nsGkAtoms::image, // image
74556:    &nsGkAtoms::imaginary_, // imaginary
74556:    &nsGkAtoms::imaginaryi_, // imaginaryi
74556:    &nsGkAtoms::implies_, // implies
74556:    &nsGkAtoms::in, // in
74556:    &nsGkAtoms::infinity, // infinity
74556:    &nsGkAtoms::int_, // int
74556:    &nsGkAtoms::integers_, // integers
74556:    &nsGkAtoms::intersect_, // intersect
74556:    &nsGkAtoms::interval_, // interval
74556:    &nsGkAtoms::inverse_, // inverse
74556:    &nsGkAtoms::lambda_, // lambda
74556:    &nsGkAtoms::laplacian_, // laplacian
74556:    &nsGkAtoms::lcm_, // lcm
74556:    &nsGkAtoms::leq_, // leq
74556:    &nsGkAtoms::limit_, // limit
74556:    &nsGkAtoms::list_, // list
74556:    &nsGkAtoms::ln_, // ln
74556:    &nsGkAtoms::log_, // log
74556:    &nsGkAtoms::logbase_, // logbase
74556:    &nsGkAtoms::lowlimit_, // lowlimit
74556:    &nsGkAtoms::lt_, // lt
74556:    &nsGkAtoms::maction_, // maction
74556:    &nsGkAtoms::malign_, // malign
74556:    &nsGkAtoms::maligngroup_, // maligngroup
74556:    &nsGkAtoms::malignmark_, // malignmark
74556:    &nsGkAtoms::malignscope_, // malignscope
74556:    &nsGkAtoms::math, // math
74556:    &nsGkAtoms::matrix, // matrix
74556:    &nsGkAtoms::matrixrow_, // matrixrow
74556:    &nsGkAtoms::max, // max
74556:    &nsGkAtoms::mean_, // mean
74556:    &nsGkAtoms::median_, // median
74556:    &nsGkAtoms::menclose_, // menclose
74556:    &nsGkAtoms::merror_, // merror
74556:    &nsGkAtoms::mfenced_, // mfenced
74556:    &nsGkAtoms::mfrac_, // mfrac
74556:    &nsGkAtoms::mfraction_, // mfraction
74556:    &nsGkAtoms::mglyph_, // mglyph
74556:    &nsGkAtoms::mi_, // mi
74556:    &nsGkAtoms::min, // min
74556:    &nsGkAtoms::minus_, // minus
74556:    &nsGkAtoms::mlabeledtr_, // mlabeledtr
74556:    &nsGkAtoms::mlongdiv_, // mlongdiv
74556:    &nsGkAtoms::mmultiscripts_, // mmultiscripts
74556:    &nsGkAtoms::mn_, // mn
74556:    &nsGkAtoms::mo_, // mo
74556:    &nsGkAtoms::mode, // mode
74556:    &nsGkAtoms::moment_, // moment
74556:    &nsGkAtoms::momentabout_, // momentabout
74556:    &nsGkAtoms::mover_, // mover
74556:    &nsGkAtoms::mpadded_, // mpadded
74556:    &nsGkAtoms::mphantom_, // mphantom
74556:    &nsGkAtoms::mprescripts_, // mprescripts
74556:    &nsGkAtoms::mroot_, // mroot
74556:    &nsGkAtoms::mrow_, // mrow
74556:    &nsGkAtoms::ms_, // ms
74556:    &nsGkAtoms::mscarries_, // mscarries
74556:    &nsGkAtoms::mscarry_, // mscarry
74556:    &nsGkAtoms::msgroup_, // msgroup
74556:    &nsGkAtoms::msline_, // msline
74556:    &nsGkAtoms::mspace_, // mspace
74556:    &nsGkAtoms::msqrt_, // msqrt
74556:    &nsGkAtoms::msrow_, // msrow
74556:    &nsGkAtoms::mstack_, // mstack
74556:    &nsGkAtoms::mstyle_, // mstyle
74556:    &nsGkAtoms::msub_, // msub
74556:    &nsGkAtoms::msubsup_, // msubsup
74556:    &nsGkAtoms::msup_, // msup
74556:    &nsGkAtoms::mtable_, // mtable
74556:    &nsGkAtoms::mtd_, // mtd
74556:    &nsGkAtoms::mtext_, // mtext
74556:    &nsGkAtoms::mtr_, // mtr
74556:    &nsGkAtoms::munder_, // munder
74556:    &nsGkAtoms::munderover_, // munderover
74556:    &nsGkAtoms::naturalnumbers_, // naturalnumbers
74556:    &nsGkAtoms::neq_, // neq
74556:    &nsGkAtoms::none, // none
74556:    &nsGkAtoms::_not, // not
74556:    &nsGkAtoms::notanumber_, // notanumber
74556:    &nsGkAtoms::note_, // note
74556:    &nsGkAtoms::notin_, // notin
74556:    &nsGkAtoms::notprsubset_, // notprsubset
74556:    &nsGkAtoms::notsubset_, // notsubset
74556:    &nsGkAtoms::_or, // or
74556:    &nsGkAtoms::otherwise, // otherwise
74556:    &nsGkAtoms::outerproduct_, // outerproduct
74556:    &nsGkAtoms::partialdiff_, // partialdiff
74556:    &nsGkAtoms::pi_, // pi
74556:    &nsGkAtoms::piece_, // piece
74556:    &nsGkAtoms::piecewise_, // piecewise
74556:    &nsGkAtoms::plus_, // plus
74556:    &nsGkAtoms::power_, // power
74556:    &nsGkAtoms::primes_, // primes
74556:    &nsGkAtoms::product_, // product
74556:    &nsGkAtoms::prsubset_, // prsubset
74556:    &nsGkAtoms::quotient_, // quotient
74556:    &nsGkAtoms::rationals_, // rationals
74556:    &nsGkAtoms::real_, // real
74556:    &nsGkAtoms::reals_, // reals
74556:    &nsGkAtoms::reln_, // reln
74556:    &nsGkAtoms::rem, // rem
74556:    &nsGkAtoms::root_, // root
74556:    &nsGkAtoms::scalarproduct_, // scalarproduct
74556:    &nsGkAtoms::sdev_, // sdev
74556:    &nsGkAtoms::sec_, // sec
74556:    &nsGkAtoms::sech_, // sech
74556:    &nsGkAtoms::selector_, // selector
74556:    &nsGkAtoms::semantics_, // semantics
74556:    &nsGkAtoms::sep_, // sep
74556:    &nsGkAtoms::set_, // set
74556:    &nsGkAtoms::setdiff_, // setdiff
74556:    &nsGkAtoms::share_, // share
74556:    &nsGkAtoms::sin_, // sin
74556:    &nsGkAtoms::sinh_, // sinh
74556:    &nsGkAtoms::subset_, // subset
74556:    &nsGkAtoms::sum, // sum
74556:    &nsGkAtoms::tan_, // tan
74556:    &nsGkAtoms::tanh_, // tanh
74556:    &nsGkAtoms::tendsto_, // tendsto
74556:    &nsGkAtoms::times_, // times
74556:    &nsGkAtoms::transpose_, // transpose
74556:    &nsGkAtoms::_true, // true
74556:    &nsGkAtoms::union_, // union
74556:    &nsGkAtoms::uplimit_, // uplimit
74556:    &nsGkAtoms::variance_, // variance
74556:    &nsGkAtoms::vector_, // vector
74556:    &nsGkAtoms::vectorproduct_, // vectorproduct
74556:    &nsGkAtoms::xor_, // xor
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kAttributesMathML[] = {
74556:    &nsGkAtoms::accent_, // accent
74556:    &nsGkAtoms::accentunder_, // accentunder
74556:    &nsGkAtoms::actiontype_, // actiontype
74556:    &nsGkAtoms::align, // align
74556:    &nsGkAtoms::alignmentscope_, // alignmentscope
74556:    &nsGkAtoms::alt, // alt
74556:    &nsGkAtoms::altimg_, // altimg
74556:    &nsGkAtoms::altimg_height_, // altimg-height
74556:    &nsGkAtoms::altimg_valign_, // altimg-valign
74556:    &nsGkAtoms::altimg_width_, // altimg-width
74556:    &nsGkAtoms::background, // background
74556:    &nsGkAtoms::base, // base
74556:    &nsGkAtoms::bevelled_, // bevelled
74556:    &nsGkAtoms::cd_, // cd
74556:    &nsGkAtoms::cdgroup_, // cdgroup
74556:    &nsGkAtoms::charalign_, // charalign
74556:    &nsGkAtoms::close, // close
74556:    &nsGkAtoms::closure_, // closure
74556:    &nsGkAtoms::color, // color
74556:    &nsGkAtoms::columnalign_, // columnalign
74556:    &nsGkAtoms::columnalignment_, // columnalignment
74556:    &nsGkAtoms::columnlines_, // columnlines
74556:    &nsGkAtoms::columnspacing_, // columnspacing
74556:    &nsGkAtoms::columnspan_, // columnspan
74556:    &nsGkAtoms::columnwidth_, // columnwidth
74556:    &nsGkAtoms::crossout_, // crossout
74556:    &nsGkAtoms::decimalpoint_, // decimalpoint
74556:    &nsGkAtoms::definitionURL_, // definitionURL
74556:    &nsGkAtoms::denomalign_, // denomalign
74556:    &nsGkAtoms::depth_, // depth
74556:    &nsGkAtoms::dir, // dir
74556:    &nsGkAtoms::display, // display
74556:    &nsGkAtoms::displaystyle_, // displaystyle
74556:    &nsGkAtoms::edge_, // edge
74556:    &nsGkAtoms::encoding, // encoding
74556:    &nsGkAtoms::equalcolumns_, // equalcolumns
74556:    &nsGkAtoms::equalrows_, // equalrows
74556:    &nsGkAtoms::fence_, // fence
74556:    &nsGkAtoms::fontfamily_, // fontfamily
74556:    &nsGkAtoms::fontsize_, // fontsize
74556:    &nsGkAtoms::fontstyle_, // fontstyle
74556:    &nsGkAtoms::fontweight_, // fontweight
74556:    &nsGkAtoms::form, // form
74556:    &nsGkAtoms::frame, // frame
74556:    &nsGkAtoms::framespacing_, // framespacing
74556:    &nsGkAtoms::groupalign_, // groupalign
74556:    &nsGkAtoms::height, // height
74556:    &nsGkAtoms::href, // href
74556:    &nsGkAtoms::id, // id
74556:    &nsGkAtoms::indentalign_, // indentalign
74556:    &nsGkAtoms::indentalignfirst_, // indentalignfirst
74556:    &nsGkAtoms::indentalignlast_, // indentalignlast
74556:    &nsGkAtoms::indentshift_, // indentshift
74556:    &nsGkAtoms::indentshiftfirst_, // indentshiftfirst
74556:    &nsGkAtoms::indenttarget_, // indenttarget
74556:    &nsGkAtoms::index, // index
74556:    &nsGkAtoms::integer, // integer
74556:    &nsGkAtoms::largeop_, // largeop
74556:    &nsGkAtoms::length, // length
74556:    &nsGkAtoms::linebreak_, // linebreak
74556:    &nsGkAtoms::linebreakmultchar_, // linebreakmultchar
74556:    &nsGkAtoms::linebreakstyle_, // linebreakstyle
74556:    &nsGkAtoms::linethickness_, // linethickness
74556:    &nsGkAtoms::location_, // location
74556:    &nsGkAtoms::longdivstyle_, // longdivstyle
74556:    &nsGkAtoms::lquote_, // lquote
74556:    &nsGkAtoms::lspace_, // lspace
74556:    &nsGkAtoms::ltr, // ltr
74556:    &nsGkAtoms::mathbackground_, // mathbackground
74556:    &nsGkAtoms::mathcolor_, // mathcolor
74556:    &nsGkAtoms::mathsize_, // mathsize
74556:    &nsGkAtoms::mathvariant_, // mathvariant
74556:    &nsGkAtoms::maxsize_, // maxsize
74556:    &nsGkAtoms::mediummathspace_, // mediummathspace
74556:    &nsGkAtoms::minlabelspacing_, // minlabelspacing
74556:    &nsGkAtoms::minsize_, // minsize
74556:    &nsGkAtoms::monospaced_, // monospaced
74556:    &nsGkAtoms::movablelimits_, // movablelimits
74556:    &nsGkAtoms::msgroup_, // msgroup
74556:    &nsGkAtoms::name, // name
74556:    &nsGkAtoms::negativemediummathspace_, // negativemediummathspace
74556:    &nsGkAtoms::negativethickmathspace_, // negativethickmathspace
74556:    &nsGkAtoms::negativethinmathspace_, // negativethinmathspace
74556:    &nsGkAtoms::negativeverythickmathspace_, // negativeverythickmathspace
74556:    &nsGkAtoms::negativeverythinmathspace_, // negativeverythinmathspace
74556:    &nsGkAtoms::negativeveryverythickmathspace_, // negativeveryverythickmathspace
74556:    &nsGkAtoms::negativeveryverythinmathspace_, // negativeveryverythinmathspace
74556:    &nsGkAtoms::newline, // newline
74556:    &nsGkAtoms::notation_, // notation
74556:    &nsGkAtoms::numalign_, // numalign
74556:    &nsGkAtoms::number, // number
74556:    &nsGkAtoms::open, // open
74556:    &nsGkAtoms::order, // order
74556:    &nsGkAtoms::other_, // other
74556:    &nsGkAtoms::overflow, // overflow
74556:    &nsGkAtoms::position, // position
74556:    &nsGkAtoms::role, // role
74556:    &nsGkAtoms::rowalign_, // rowalign
74556:    &nsGkAtoms::rowlines_, // rowlines
74556:    &nsGkAtoms::rowspacing_, // rowspacing
74556:    &nsGkAtoms::rowspan, // rowspan
74556:    &nsGkAtoms::rquote_, // rquote
74556:    &nsGkAtoms::rspace_, // rspace
74556:    &nsGkAtoms::schemaLocation_, // schemaLocation
74556:    &nsGkAtoms::scriptlevel_, // scriptlevel
74556:    &nsGkAtoms::scriptminsize_, // scriptminsize
74556:    &nsGkAtoms::scriptsize_, // scriptsize
74556:    &nsGkAtoms::scriptsizemultiplier_, // scriptsizemultiplier
74556:    &nsGkAtoms::selection_, // selection
74556:    &nsGkAtoms::separator_, // separator
74556:    &nsGkAtoms::separators_, // separators
74556:    &nsGkAtoms::shift_, // shift
74556:    &nsGkAtoms::side_, // side
74556:    &nsGkAtoms::src, // src
74556:    &nsGkAtoms::stackalign_, // stackalign
74556:    &nsGkAtoms::stretchy_, // stretchy
74556:    &nsGkAtoms::subscriptshift_, // subscriptshift
74556:    &nsGkAtoms::superscriptshift_, // superscriptshift
74556:    &nsGkAtoms::symmetric_, // symmetric
74556:    &nsGkAtoms::thickmathspace_, // thickmathspace
74556:    &nsGkAtoms::thinmathspace_, // thinmathspace
74556:    &nsGkAtoms::type, // type
74556:    &nsGkAtoms::verythickmathspace_, // verythickmathspace
74556:    &nsGkAtoms::verythinmathspace_, // verythinmathspace
74556:    &nsGkAtoms::veryverythickmathspace_, // veryverythickmathspace
74556:    &nsGkAtoms::veryverythinmathspace_, // veryverythinmathspace
74556:    &nsGkAtoms::voffset_, // voffset
74556:    &nsGkAtoms::width, // width
74556:    &nsGkAtoms::xref_, // xref
74556:   nsnull
74556: };
74556: 
74556: nsIAtom** const kURLAttributesMathML[] = {
74556:   &nsGkAtoms::href,
74556:   &nsGkAtoms::src,
74556:   &nsGkAtoms::definitionURL_,
74556:   nsnull
74556: };
74556: 
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sElementsHTML = nsnull;
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sAttributesHTML = nsnull;
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sElementsSVG = nsnull;
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sAttributesSVG = nsnull;
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sElementsMathML = nsnull;
74556: nsTHashtable<nsISupportsHashKey>* nsTreeSanitizer::sAttributesMathML = nsnull;
74556: nsIPrincipal* nsTreeSanitizer::sNullPrincipal = nsnull;
74556: 
74556: nsTreeSanitizer::nsTreeSanitizer(PRBool aAllowStyles, PRBool aAllowComments)
74556:  : mAllowStyles(aAllowStyles)
74556:  , mAllowComments(aAllowComments)
74556: {
74556:   if (!sElementsHTML) {
74556:     // Initialize lazily to avoid having to initialize at all if the user
74556:     // doesn't paste HTML or load feeds.
74556:     InitializeStatics();
74556:   }
74556: }
74556: 
74556: PRBool
74556: nsTreeSanitizer::MustFlatten(PRInt32 aNamespace, nsIAtom* aLocal)
74556: {
74556:   if (aNamespace == kNameSpaceID_XHTML) {
74556:     return !sElementsHTML->GetEntry(aLocal);
74556:   }
74556:   if (aNamespace == kNameSpaceID_SVG) {
74556:     return !sElementsSVG->GetEntry(aLocal);
74556:   }
74556:   if (aNamespace == kNameSpaceID_MathML) {
74556:     return !sElementsMathML->GetEntry(aLocal);
74556:   }
74556:   return PR_TRUE;
74556: }
74556: 
74556: PRBool
74556: nsTreeSanitizer::IsURL(nsIAtom*** aURLs, nsIAtom* aLocalName)
74556: {
74556:   nsIAtom** atomPtrPtr;
74556:   while ((atomPtrPtr = *aURLs)) {
74556:     if (*atomPtrPtr == aLocalName) {
74556:       return PR_TRUE;
74556:     }
74556:     ++aURLs;
74556:   }
74556:   return PR_FALSE;
74556: }
74556: 
74556: PRBool
74556: nsTreeSanitizer::MustPrune(PRInt32 aNamespace,
74556:                            nsIAtom* aLocal,
74556:                            mozilla::dom::Element* aElement)
74556: {
74556:   // To avoid attacks where a MathML script becomes something that gets
74556:   // serialized in a way that it parses back as an HTML script, let's just
74556:   // drop elements with the local name 'script' regardless of namespace.
74556:   if (nsGkAtoms::script == aLocal) {
74556:     return PR_TRUE;
74556:   }
74556:   if (aNamespace == kNameSpaceID_XHTML) {
74556:     if (nsGkAtoms::title == aLocal) {
74556:       // emulate the quirks of the old parser
74556:       return PR_TRUE;
74556:     }
74556:     if ((nsGkAtoms::meta == aLocal || nsGkAtoms::link == aLocal) &&
74556:         !(aElement->HasAttr(kNameSpaceID_None, nsGkAtoms::itemprop) ||
74556:           aElement->HasAttr(kNameSpaceID_None, nsGkAtoms::itemscope))) {
74556:       // emulate old behavior for non-Microdata <meta> and <link> presumably
74556:       // in <head>. <meta> and <link> are whitelisted in order to avoid
74556:       // corrupting Microdata when they appear in <body>. Note that
74556:       // SanitizeAttributes() will remove the rel attribute from <link> and
74556:       // the name attribute from <meta>.
74556:       return PR_TRUE;
74556:     }
74556:   }
74556:   if (mAllowStyles) {
74556:     if (nsGkAtoms::style == aLocal && !(aNamespace == kNameSpaceID_XHTML
74556:         || aNamespace == kNameSpaceID_SVG)) {
74556:       return PR_TRUE;
74556:     }
74556:     return PR_FALSE;
74556:   }
74556:   if (nsGkAtoms::style == aLocal) {
74556:     return PR_TRUE;
74556:   }
74556:   return PR_FALSE;
74556: }
74556: 
74556: PRBool
74556: nsTreeSanitizer::SanitizeStyleRule(mozilla::css::StyleRule *aRule,
74556:                                    nsAutoString &aRuleText)
74556: {
74556:   PRBool didSanitize = PR_FALSE;
74556:   aRuleText.Truncate();
74556:   mozilla::css::Declaration* style = aRule->GetDeclaration();
74556:   if (style) {
74556:     didSanitize = style->HasProperty(eCSSProperty_binding);
74556:     style->RemoveProperty(eCSSProperty_binding);
74556:     style->ToString(aRuleText);
74556:   }
74556:   return didSanitize;
74556: }
74556: 
74556: PRBool
74556: nsTreeSanitizer::SanitizeStyleSheet(const nsAString& aOriginal,
74556:                                     nsAString& aSanitized,
74556:                                     nsIDocument* aDocument,
74556:                                     nsIURI* aBaseURI)
74556: {
74556:   nsresult rv;
74556:   aSanitized.Truncate();
74556:   // aSanitized will hold the permitted CSS text.
74556:   // -moz-binding is blacklisted.
74556:   PRBool didSanitize = PR_FALSE;
74556:   // Create a sheet to hold the parsed CSS
74556:   nsRefPtr<nsCSSStyleSheet> sheet;
74556:   rv = NS_NewCSSStyleSheet(getter_AddRefs(sheet));
74556:   NS_ENSURE_SUCCESS(rv, PR_TRUE);
74556:   sheet->SetURIs(aDocument->GetDocumentURI(), nsnull, aBaseURI);
74556:   sheet->SetPrincipal(aDocument->NodePrincipal());
74556:   // Create the CSS parser, and parse the CSS text.
74556:   nsCSSParser parser(nsnull, sheet);
74556:   rv = parser.ParseSheet(aOriginal, aDocument->GetDocumentURI(), aBaseURI,
74556:                          aDocument->NodePrincipal(), 0, PR_FALSE);
74556:   NS_ENSURE_SUCCESS(rv, PR_TRUE);
74556:   // Mark the sheet as complete.
74556:   NS_ABORT_IF_FALSE(!sheet->IsModified(),
74556:       "should not get marked modified during parsing");
74556:   sheet->SetComplete();
74556:   // Loop through all the rules found in the CSS text
74556:   PRInt32 ruleCount = sheet->StyleRuleCount();
74556:   for (PRInt32 i = 0; i < ruleCount; ++i) {
74556:     nsRefPtr<mozilla::css::Rule> rule;
74556:     rv = sheet->GetStyleRuleAt(i, *getter_AddRefs(rule));
74556:     if (NS_FAILED(rv))
74556:       continue; NS_ASSERTION(rule, "We should have a rule by now");
74556:     switch (rule->GetType()) {
74556:       default:
74556:         didSanitize = PR_TRUE;
74556:         // Ignore these rule types.
74556:         break;
74556:       case mozilla::css::Rule::NAMESPACE_RULE:
74556:       case mozilla::css::Rule::FONT_FACE_RULE: {
74556:         // Append @namespace and @font-face rules verbatim.
74556:         nsAutoString cssText;
74556:         nsCOMPtr<nsIDOMCSSRule> styleRule = do_QueryInterface(rule);
74556:         if (styleRule) {
74556:           rv = styleRule->GetCssText(cssText);
74556:           if (NS_SUCCEEDED(rv)) {
74556:             aSanitized.Append(cssText);
74556:           }
74556:         }
74556:         break;
74556:       }
74556:       case mozilla::css::Rule::STYLE_RULE: {
74556:         // For style rules, we will just look for and remove the
74556:         // -moz-binding properties.
74556:         nsRefPtr<mozilla::css::StyleRule> styleRule = do_QueryObject(rule);
74556:         NS_ASSERTION(styleRule, "Must be a style rule");
74556:         nsAutoString decl;
74556:         PRBool sanitized = SanitizeStyleRule(styleRule, decl);
74556:         didSanitize = sanitized || didSanitize;
74556:         if (!sanitized) {
74556:           styleRule->GetCssText(decl);
74556:         }
74556:         aSanitized.Append(decl);
74556:       }
74556:     }
74556:   }
74556:   return didSanitize;
74556: }
74556: 
74556: void
74556: nsTreeSanitizer::SanitizeAttributes(mozilla::dom::Element* aElement,
74556:                                     nsTHashtable<nsISupportsHashKey>* aAllowed,
74556:                                     nsIAtom*** aURLs,
74556:                                     PRBool aAllowXLink,
74556:                                     PRBool aAllowStyle,
74556:                                     PRBool aAllowDangerousSrc)
74556: {
74556:   PRUint32 ac = aElement->GetAttrCount();
74556: 
74556:   nsresult rv;
74556: 
74556:   for (PRInt32 i = ac - 1; i >= 0; --i) {
74556:     rv = NS_OK;
74556:     const nsAttrName* attrName = aElement->GetAttrNameAt(i);
74556:     PRInt32 attrNs = attrName->NamespaceID();
74641:     nsIAtom* attrLocal = attrName->LocalName();
74556: 
74556:     if (kNameSpaceID_None == attrNs) {
74556:       if (aAllowStyle && nsGkAtoms::style == attrLocal) {
74556:         nsCOMPtr<nsIURI> baseURI = aElement->GetBaseURI();
74556:         nsIDocument* document = aElement->GetOwnerDoc();
74556:         // Pass the CSS Loader object to the parser, to allow parser error
74556:         // reports to include the outer window ID.
74556:         nsCSSParser parser(document->CSSLoader());
74556:         nsRefPtr<mozilla::css::StyleRule> rule;
74556:         nsAutoString value;
74556:         aElement->GetAttr(attrNs, attrLocal, value);
74556:         rv = parser.ParseStyleAttribute(value,
74556:                                         document->GetDocumentURI(),
74556:                                         baseURI,
74556:                                         document->NodePrincipal(),
74556:                                         getter_AddRefs(rule));
74556:         if (NS_SUCCEEDED(rv)) {
74556:           nsAutoString cleanValue;
74556:           if (SanitizeStyleRule(rule, cleanValue)) {
74556:             aElement->SetAttr(kNameSpaceID_None,
74556:                               nsGkAtoms::style,
74556:                               cleanValue,
74556:                               PR_FALSE);
74556:           }
74556:         }
74556:         continue;
74556:       }
74556:       if (aAllowDangerousSrc && nsGkAtoms::src == attrLocal) {
74556:         continue;
74556:       }
74556:       if (IsURL(aURLs, attrLocal)) {
74556:         SanitizeURL(aElement, attrNs, attrLocal);
74556:         continue;
74556:       }
74556:       if (aAllowed->GetEntry(attrLocal) &&
74556:           !(attrLocal == nsGkAtoms::rel &&
74556:             aElement->IsHTML(nsGkAtoms::link)) &&
74556:           !(attrLocal == nsGkAtoms::name &&
74556:             aElement->IsHTML(nsGkAtoms::meta))) {
74556:         // name="" and rel="" are whitelisted, but treat them as blacklisted
74556:         // for <meta name> and <link rel> to avoid document-wide metadata
74556:         // or styling overrides with non-conforming <meta name itemprop> or
74556:         // <link rel itemprop>
74556:         continue;
74556:       }
74556:       const PRUnichar* localStr = attrLocal->GetUTF16String();
74556:       // Allow underscore to cater to the MCE editor library.
74556:       // Allow data-* on SVG and MathML, too, as a forward-compat measure.
74556:       if (*localStr == '_' || (attrLocal->GetLength() > 5 && localStr[0] == 'd'
74556:           && localStr[1] == 'a' && localStr[2] == 't' && localStr[3] == 'a'
74556:           && localStr[4] == '-')) {
74556:         continue;
74556:       }
74556:       // else not allowed
74556:     } else if (kNameSpaceID_XML == attrNs) {
74556:       if (nsGkAtoms::base == attrLocal) {
74556:         SanitizeURL(aElement, attrNs, attrLocal);
74556:         continue;
74556:       }
74556:       if (nsGkAtoms::lang == attrLocal || nsGkAtoms::space == attrLocal) {
74556:         continue;
74556:       }
74556:       // else not allowed
74556:     } else if (aAllowXLink && kNameSpaceID_XLink == attrNs) {
74556:       if (nsGkAtoms::href == attrLocal) {
74556:         SanitizeURL(aElement, attrNs, attrLocal);
74556:         continue;
74556:       }
74556:       if (nsGkAtoms::type == attrLocal || nsGkAtoms::title == attrLocal
74556:           || nsGkAtoms::show == attrLocal || nsGkAtoms::actuate == attrLocal) {
74556:         continue;
74556:       }
74556:       // else not allowed
74556:     }
74556:     aElement->UnsetAttr(kNameSpaceID_None, attrLocal, PR_FALSE);
74556:     // in case the attribute removal shuffled the attribute order, start the
74556:     // loop again.
74556:     --ac;
74556:     i = ac; // i will be decremented immediately thanks to the for loop
74556:   }
74556: 
74556:   // If we've got HTML audio or video, add the controls attribute, because
74556:   // otherwise the content is unplayable with scripts removed.
74556:   if (aElement->IsHTML(nsGkAtoms::video) ||
74556:       aElement->IsHTML(nsGkAtoms::audio)) {
74556:     aElement->SetAttr(kNameSpaceID_None,
74556:                       nsGkAtoms::controls,
74556:                       EmptyString(),
74556:                       PR_FALSE);
74556:   }
74556: }
74556: 
74556: void
74556: nsTreeSanitizer::SanitizeURL(mozilla::dom::Element* aElement,
74556:                              PRInt32 aNamespace,
74556:                              nsIAtom* aLocalName)
74556: {
74556:   nsAutoString value;
74556:   aElement->GetAttr(aNamespace, aLocalName, value);
74556: 
74556:   // Get value and remove mandatory quotes
74556:   static const char* kWhitespace = "\n\r\t\b";
74556:   const nsAString& v =
74556:     nsContentUtils::TrimCharsInSet(kWhitespace, value);
74556: 
74556:   nsIScriptSecurityManager* secMan = nsContentUtils::GetSecurityManager();
74556:   PRUint32 flags = nsIScriptSecurityManager::DISALLOW_INHERIT_PRINCIPAL;
74556: 
74556:   nsCOMPtr<nsIURI> baseURI = aElement->GetBaseURI();
74556:   nsCOMPtr<nsIURI> attrURI;
74556:   nsresult rv = NS_NewURI(getter_AddRefs(attrURI), v, nsnull, baseURI);
74556:   if (NS_SUCCEEDED(rv)) {
74556:     rv = secMan->CheckLoadURIWithPrincipal(sNullPrincipal, attrURI, flags);
74556:   }
74556:   if (NS_FAILED(rv)) {
74556:     aElement->UnsetAttr(aNamespace, aLocalName, PR_FALSE);
74556:   }
74556: }
74556: 
74556: void
74556: nsTreeSanitizer::Sanitize(nsIContent* aFragment) {
74556:   // If you want to relax these preconditions, be sure to check the code in
74556:   // here that notifies / does not notify or that fires mutation events if
74556:   // in tree.
74556:   NS_PRECONDITION(aFragment->IsNodeOfType(nsINode::eDOCUMENT_FRAGMENT),
74556:       "Argument was not DOM fragment.");
74556:   NS_PRECONDITION(!aFragment->IsInDoc(), "The fragment is in doc?");
74556: 
74556:   nsIContent* node = aFragment->GetFirstChild();
74556:   while (node) {
74556:     if (node->IsElement()) {
74556:       mozilla::dom::Element* elt = node->AsElement();
74556:       nsINodeInfo* nodeInfo = node->NodeInfo();
74556:       nsIAtom* localName = nodeInfo->NameAtom();
74556:       PRInt32 ns = nodeInfo->NamespaceID();
74556: 
74556:       if (MustPrune(ns, localName, elt)) {
74556:         nsIContent* next = node->GetNextNonChildNode(aFragment);
74556:         node->GetParent()->RemoveChild(node);
74556:         node = next;
74556:         continue;
74556:       }
74556:       if (nsGkAtoms::style == localName) {
74556:         // If styles aren't allowed, style elements got pruned above. Even
74556:         // if styles are allowed, non-HTML, non-SVG style elements got pruned
74556:         // above.
74556:         NS_ASSERTION(ns == kNameSpaceID_XHTML || ns == kNameSpaceID_SVG,
74556:             "Should have only HTML or SVG here!");
74556:         nsAutoString styleText;
74556:         nsContentUtils::GetNodeTextContent(node, PR_FALSE, styleText);
74556:         nsAutoString sanitizedStyle;
74556:         nsCOMPtr<nsIURI> baseURI = node->GetBaseURI();
74556:         if (SanitizeStyleSheet(styleText,
74556:                                sanitizedStyle,
74556:                                aFragment->GetOwnerDoc(),
74556:                                baseURI)) {
74556:           nsContentUtils::SetNodeTextContent(node, sanitizedStyle, PR_TRUE);
74556:         } else {
74556:           // If the node had non-text child nodes, this operation zaps those.
74556:           nsContentUtils::SetNodeTextContent(node, styleText, PR_TRUE);
74556:         }
74556:         if (ns == kNameSpaceID_XHTML) {
74556:           SanitizeAttributes(elt,
74556:                              sAttributesHTML,
74556:                              (nsIAtom***)kURLAttributesHTML,
74556:                              PR_FALSE,
74556:                              mAllowStyles,
74556:                              PR_FALSE);
74556:         } else {
74556:           SanitizeAttributes(elt,
74556:                              sAttributesSVG,
74556:                              (nsIAtom***)kURLAttributesSVG,
74556:                              PR_TRUE,
74556:                              mAllowStyles,
74556:                              PR_FALSE);
74556:         }
74556:         node = node->GetNextNonChildNode(aFragment);
74556:         continue;
74556:       }
74556:       if (MustFlatten(ns, localName)) {
74556:         nsIContent* next = node->GetNextNode(aFragment);
74556:         nsIContent* parent = node->GetParent();
74556:         nsCOMPtr<nsIContent> child; // Must keep the child alive during move
74556:         nsresult rv;
74556:         while ((child = node->GetFirstChild())) {
74556:           parent->InsertBefore(child, node, &rv);
74556:           if (NS_FAILED(rv)) {
74556:             break;
74556:           }
74556:         }
74556:         parent->RemoveChild(node);
74556:         node = next;
74556:         continue;
74556:       }
74556:       NS_ASSERTION(ns == kNameSpaceID_XHTML ||
74556:                    ns == kNameSpaceID_SVG ||
74556:                    ns == kNameSpaceID_MathML,
74556:           "Should have only HTML, MathML or SVG here!");
74556:       if (ns == kNameSpaceID_XHTML) {
74556:         SanitizeAttributes(elt,
74556:                            sAttributesHTML,
74556:                            (nsIAtom***)kURLAttributesHTML,
74556:                            PR_FALSE, mAllowStyles,
74556:                            (nsGkAtoms::img == localName));
74556:       } else if (ns == kNameSpaceID_SVG) {
74556:         SanitizeAttributes(elt,
74556:                            sAttributesSVG,
74556:                            (nsIAtom***)kURLAttributesSVG,
74556:                            PR_TRUE,
74556:                            mAllowStyles,
74556:                            PR_FALSE);
74556:       } else {
74556:         SanitizeAttributes(elt,
74556:                            sAttributesMathML,
74556:                            (nsIAtom***)kURLAttributesMathML,
74556:                            PR_TRUE,
74556:                            PR_FALSE,
74556:                            PR_FALSE);
74556:       }
74556:       node = node->GetNextNode(aFragment);
74556:       continue;
74556:     }
74556:     NS_ASSERTION(!node->GetFirstChild(), "How come non-element node had kids?");
74556:     nsIContent* next = node->GetNextNonChildNode(aFragment);
74556:     if (!mAllowComments && node->IsNodeOfType(nsINode::eCOMMENT)) {
74556:       node->GetParent()->RemoveChild(node);
74556:     }
74556:     node = next;
74556:   }
74556: }
74556: 
74556: void
74556: nsTreeSanitizer::InitializeStatics()
74556: {
74556:   NS_PRECONDITION(!sElementsHTML, "Initializing a second time.");
74556: 
74556:   sElementsHTML = new nsTHashtable<nsISupportsHashKey> ();
74556:   sElementsHTML->Init(NS_ARRAY_LENGTH(kElementsHTML));
74556:   for (PRUint32 i = 0; kElementsHTML[i]; i++) {
74556:     sElementsHTML->PutEntry(*kElementsHTML[i]);
74556:   }
74556: 
74556:   sAttributesHTML = new nsTHashtable<nsISupportsHashKey> ();
74556:   sAttributesHTML->Init(NS_ARRAY_LENGTH(kAttributesHTML));
74556:   for (PRUint32 i = 0; kAttributesHTML[i]; i++) {
74556:     sAttributesHTML->PutEntry(*kAttributesHTML[i]);
74556:   }
74556: 
74556:   sElementsSVG = new nsTHashtable<nsISupportsHashKey> ();
74556:   sElementsSVG->Init(NS_ARRAY_LENGTH(kElementsSVG));
74556:   for (PRUint32 i = 0; kElementsSVG[i]; i++) {
74556:     sElementsSVG->PutEntry(*kElementsSVG[i]);
74556:   }
74556: 
74556:   sAttributesSVG = new nsTHashtable<nsISupportsHashKey> ();
74556:   sAttributesSVG->Init(NS_ARRAY_LENGTH(kAttributesSVG));
74556:   for (PRUint32 i = 0; kAttributesSVG[i]; i++) {
74556:     sAttributesSVG->PutEntry(*kAttributesSVG[i]);
74556:   }
74556: 
74556:   sElementsMathML = new nsTHashtable<nsISupportsHashKey> ();
74556:   sElementsMathML->Init(NS_ARRAY_LENGTH(kElementsMathML));
74556:   for (PRUint32 i = 0; kElementsMathML[i]; i++) {
74556:     sElementsMathML->PutEntry(*kElementsMathML[i]);
74556:   }
74556: 
74556:   sAttributesMathML = new nsTHashtable<nsISupportsHashKey> ();
74556:   sAttributesMathML->Init(NS_ARRAY_LENGTH(kAttributesMathML));
74556:   for (PRUint32 i = 0; kAttributesMathML[i]; i++) {
74556:     sAttributesMathML->PutEntry(*kAttributesMathML[i]);
74556:   }
74556: 
74556:   nsCOMPtr<nsIPrincipal> principal =
74556:       do_CreateInstance(NS_NULLPRINCIPAL_CONTRACTID);
74556:   principal.forget(&sNullPrincipal);
74556: }
74556: 
74556: void
74556: nsTreeSanitizer::ReleaseStatics()
74556: {
74556:   delete sElementsHTML;
74556:   sElementsHTML = nsnull;
74556: 
74556:   delete sAttributesHTML;
74556:   sAttributesHTML = nsnull;
74556: 
74556:   delete sElementsSVG;
74556:   sElementsSVG = nsnull;
74556: 
74556:   delete sAttributesSVG;
74556:   sAttributesSVG = nsnull;
74556: 
74556:   delete sElementsMathML;
74556:   sElementsMathML = nsnull;
74556: 
74556:   delete sAttributesMathML;
74556:   sAttributesMathML = nsnull;
74556: 
74556:   NS_IF_RELEASE(sNullPrincipal);
74556: }
