 86308: /* Any copyright is dedicated to the Public Domain.
 86308:    http://creativecommons.org/publicdomain/zero/1.0/ */
 86308: "use strict";
 86308: 
 86308: function test() {
 86308:   if (!isTiltEnabled()) {
 86308:     info("Skipping controller test because Tilt isn't enabled.");
 86308:     return;
 86308:   }
 86308:   if (!isWebGLSupported()) {
 86308:     info("Skipping controller test because WebGL isn't supported.");
 86308:     return;
 86308:   }
 86308: 
 86308:   waitForExplicitFinish();
 86308: 
 86308:   createTab(function() {
 86308:     createTilt({
 86308:       onTiltOpen: function(instance)
 86308:       {
 86308:         let canvas = instance.presenter.canvas;
 86308:         let prev_tran = vec3.create([0, 0, 0]);
 86308:         let prev_rot = quat4.create([0, 0, 0, 1]);
 86308: 
 86308:         function tran() {
 86308:           return instance.presenter.transforms.translation;
 86308:         }
 86308: 
 86308:         function rot() {
 86308:           return instance.presenter.transforms.rotation;
 86308:         }
 86308: 
 86308:         function save() {
 86308:           prev_tran = vec3.create(tran());
 86308:           prev_rot = quat4.create(rot());
 86308:         }
 86308: 
 86308:         ok(isEqualVec(tran(), prev_tran),
 86308:           "At init, the translation should be zero.");
 86308:         ok(isEqualVec(rot(), prev_rot),
 86308:           "At init, the rotation should be zero.");
 86308: 
 86308: 
 86486:         function testEventCancel(cancellingEvent) {
 87862:           is(document.activeElement, canvas,
 87862:             "The visualizer canvas should be focused when performing this test.");
 87862: 
 86308:           EventUtils.synthesizeKey("VK_A", { type: "keydown" });
 86308:           EventUtils.synthesizeKey("VK_LEFT", { type: "keydown" });
 91042:           instance.controller._update();
 86308: 
 86308:           ok(!isEqualVec(tran(), prev_tran),
 86308:             "After a translation key is pressed, the vector should change.");
 86308:           ok(!isEqualVec(rot(), prev_rot),
 86308:             "After a rotation key is pressed, the quaternion should change.");
 86308: 
 86308:           save();
 86308: 
 86308: 
 86486:           cancellingEvent();
 91042:           instance.controller._update();
 86308: 
 86308:           ok(!isEqualVec(tran(), prev_tran),
 86308:             "Even if the canvas lost focus, the vector has some inertia.");
 86308:           ok(!isEqualVec(rot(), prev_rot),
 86308:             "Even if the canvas lost focus, the quaternion has some inertia.");
 86308: 
 86308:           save();
 86308: 
 86308: 
 86486:           while (!isEqualVec(tran(), prev_tran) ||
 86486:                  !isEqualVec(rot(), prev_rot)) {
 91042:             instance.controller._update();
 86308:             save();
 86308:           }
 86308: 
 86308:           ok(isEqualVec(tran(), prev_tran) && isEqualVec(rot(), prev_rot),
 86486:             "After focus lost, the transforms inertia eventually stops.");
 86486:         }
 86486: 
 87862:         info("Setting typeaheadfind to true.");
 87862: 
 87862:         Services.prefs.setBoolPref("accessibility.typeaheadfind", true);
 86486:         testEventCancel(function() {
 86486:           EventUtils.synthesizeKey("T", { type: "keydown", altKey: 1 });
 86486:         });
 86486:         testEventCancel(function() {
 86486:           EventUtils.synthesizeKey("I", { type: "keydown", ctrlKey: 1 });
 86486:         });
 86486:         testEventCancel(function() {
 86486:           EventUtils.synthesizeKey("L", { type: "keydown", metaKey: 1 });
 86486:         });
 86486:         testEventCancel(function() {
 86486:           EventUtils.synthesizeKey("T", { type: "keydown", shiftKey: 1 });
 86486:         });
 87862: 
 87862:         info("Setting typeaheadfind to false.");
 87862: 
 87862:         Services.prefs.setBoolPref("accessibility.typeaheadfind", false);
 87862:         testEventCancel(function() {
 87862:           EventUtils.synthesizeKey("T", { type: "keydown", altKey: 1 });
 87862:         });
 87862:         testEventCancel(function() {
 87862:           EventUtils.synthesizeKey("I", { type: "keydown", ctrlKey: 1 });
 87862:         });
 87862:         testEventCancel(function() {
 87862:           EventUtils.synthesizeKey("L", { type: "keydown", metaKey: 1 });
 87862:         });
 87862:         testEventCancel(function() {
 87862:           EventUtils.synthesizeKey("T", { type: "keydown", shiftKey: 1 });
 87862:         });
 87862: 
 87862:         info("Testing if loosing focus halts any stacked arcball animations.");
 87862: 
 86486:         testEventCancel(function() {
 86486:           gBrowser.selectedBrowser.contentWindow.focus();
 86486:         });
 86308:       },
 86308:       onEnd: function()
 86308:       {
100193:         cleanup();
100193:       }
100193:     }, true, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
100193:     });
100193:   });
100193: }
100193: 
100193: function cleanup() {
 86308:   gBrowser.removeCurrentTab();
 86308:   finish();
 86308: }
