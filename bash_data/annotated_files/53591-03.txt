52557: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52557:  * vim: set ts=4 sw=4 et tw=99:
52557:  *
52557:  * ***** BEGIN LICENSE BLOCK *****
52557:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52557:  *
52557:  * The contents of this file are subject to the Mozilla Public License Version
52557:  * 1.1 (the "License"); you may not use this file except in compliance with
52557:  * the License. You may obtain a copy of the License at
52557:  * http://www.mozilla.org/MPL/
52557:  *
52557:  * Software distributed under the License is distributed on an "AS IS" basis,
52557:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52557:  * for the specific language governing rights and limitations under the
52557:  * License.
52557:  *
52557:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52557:  * May 28, 2008.
52557:  *
52557:  * The Initial Developer of the Original Code is
52557:  *   Brendan Eich <brendan@mozilla.org>
52557:  *
52557:  * Contributor(s):
52557:  *
52557:  * Alternatively, the contents of this file may be used under the terms of
52557:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52557:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52557:  * in which case the provisions of the GPL or the LGPL are applicable instead
52557:  * of those above. If you wish to allow use of your version of this file only
52557:  * under the terms of either the GPL or the LGPL, and not to allow others to
52557:  * use your version of this file under the terms of the MPL, indicate your
52557:  * decision by deleting the provisions above and replace them with the notice
52557:  * and other provisions required by the GPL or the LGPL. If you do not delete
52557:  * the provisions above, a recipient may use your version of this file under
52557:  * the terms of any one of the MPL, the GPL or the LGPL.
52557:  *
52557:  * ***** END LICENSE BLOCK ***** */
52557: 
52557: #if !defined jsjaeger_h__ && defined JS_METHODJIT
52557: #define jsjaeger_h__
52557: 
52557: #include "jscntxt.h"
52557: 
52557: #include "assembler/assembler/MacroAssemblerCodeRef.h"
52557: 
52557: #if !defined JS_CPU_X64 && \
52557:     !defined JS_CPU_X86 && \
52557:     !defined JS_CPU_ARM
52557: # error "Oh no, you should define a platform so this compiles."
52557: #endif
52557: 
53224: #if !defined(JS_NUNBOX32) && !defined(JS_PUNBOX64)
53224: # error "No boxing format selected."
52560: #endif
52560: 
52557: namespace js {
52557: 
52557: struct VMFrame
52557: {
52557:     union Arguments {
52825:         struct {
52825:             void *ptr;
52825:             void *ptr2;
53471:             void *ptr3;
52825:         } x;
52557:     } u;
52557: 
53168:     VMFrame      *previous;
52557:     JSFrameRegs  *oldRegs;
52557:     JSFrameRegs  regs;
52557:     JSContext    *cx;
53422:     Value        *stackLimit;
53422:     JSStackFrame *entryFp;
52557: 
52557: #if defined(JS_CPU_X86)
52557:     void *savedEBX;
52557:     void *savedEDI;
52557:     void *savedESI;
52557:     void *savedEBP;
52557:     void *savedEIP;
52557: 
53012: # ifdef JS_NO_FASTCALL
53168:     inline void** returnAddressLocation() {
53168:         return reinterpret_cast<void**>(this) - 3;
53012:     }
53012: # else
53168:     inline void** returnAddressLocation() {
53168:         return reinterpret_cast<void**>(this) - 1;
52557:     }
53012: # endif
52557: #elif defined(JS_CPU_X64)
52557:     void *savedRBX;
53477: # ifdef _WIN64
52557:     void *savedRSI;
52557:     void *savedRDI;
52557: # endif
52557:     void *savedR15;
52557:     void *savedR14;
52557:     void *savedR13;
52557:     void *savedR12;
52557:     void *savedRBP;
52557:     void *savedRIP;
52557: 
53477: # ifdef _WIN64
53168:     inline void** returnAddressLocation() {
53168:         return reinterpret_cast<void**>(this) - 5;
52557:     }
52557: # else
53168:     inline void** returnAddressLocation() {
53168:         return reinterpret_cast<void**>(this) - 1;
52557:     }
52557: # endif
52557: 
52557: #elif defined(JS_CPU_ARM)
52557:     void *savedR4;
52557:     void *savedR5;
52557:     void *savedR6;
52557:     void *savedR7;
52557:     void *savedR8;
52557:     void *savedR9;
52557:     void *savedR10;
52557:     void *savedR11;
52557:     void *savedLR;
52557: 
53168:     inline void** returnAddressLocation() {
53361:         return reinterpret_cast<void**>(this) - 1;
52557:     }
52557: #else
52557: # error "The VMFrame layout isn't defined for your processor architecture!"
52557: #endif
52557: 
52557:     JSRuntime *runtime() { return cx->runtime; }
53422: 
53482:     JSStackFrame *&fp() { return regs.fp; }
53482: 
53422:     bool slowEnsureSpace(uint32 nslots);
53422: 
53482:     bool ensureSpace(uint32 nmissing, uint32 nslots) {
53422:         /* Fast check - if it's below the limit, it's safe to just get a frame. */
53423:         if (JS_LIKELY(regs.sp + VALUES_PER_STACK_FRAME + nmissing + nslots < stackLimit))
53422:             return true;
53422: 
53422:         /* Slower check that might have to commit memory or throw an error. */
53422:         return slowEnsureSpace(nmissing + nslots);
53422:     }
52557: };
52557: 
52557: #ifdef JS_CPU_ARM
53361: // WARNING: Do not call this function directly from C(++) code because it is not ABI-compliant.
52557: extern "C" void JaegerStubVeneer(void);
52557: #endif
52557: 
52557: typedef void (JS_FASTCALL *VoidStub)(VMFrame &);
52623: typedef void (JS_FASTCALL *VoidVpStub)(VMFrame &, Value *);
52557: typedef void (JS_FASTCALL *VoidStubUInt32)(VMFrame &, uint32);
52557: typedef void (JS_FASTCALL *VoidStubInt32)(VMFrame &, int32);
52557: typedef JSBool (JS_FASTCALL *BoolStub)(VMFrame &);
52557: typedef void * (JS_FASTCALL *VoidPtrStub)(VMFrame &);
52557: typedef void * (JS_FASTCALL *VoidPtrStubPC)(VMFrame &, jsbytecode *);
52557: typedef void * (JS_FASTCALL *VoidPtrStubUInt32)(VMFrame &, uint32);
52557: typedef JSObject * (JS_FASTCALL *JSObjStub)(VMFrame &);
52557: typedef JSObject * (JS_FASTCALL *JSObjStubUInt32)(VMFrame &, uint32);
52727: typedef JSObject * (JS_FASTCALL *JSObjStubFun)(VMFrame &, JSFunction *);
53591: typedef void (JS_FASTCALL *VoidStubFun)(VMFrame &, JSFunction *);
52738: typedef JSObject * (JS_FASTCALL *JSObjStubJSObj)(VMFrame &, JSObject *);
52738: typedef void (JS_FASTCALL *VoidStubAtom)(VMFrame &, JSAtom *);
52738: typedef JSString * (JS_FASTCALL *JSStrStub)(VMFrame &);
52740: typedef JSString * (JS_FASTCALL *JSStrStubUInt32)(VMFrame &, uint32);
52785: typedef void (JS_FASTCALL *VoidStubJSObj)(VMFrame &, JSObject *);
53168: typedef void (JS_FASTCALL *VoidStubPC)(VMFrame &, jsbytecode *);
53590: typedef JSBool (JS_FASTCALL *BoolStubUInt32)(VMFrame &f, uint32);
52557: 
52872: #define JS_UNJITTABLE_METHOD (reinterpret_cast<void*>(1))
52557: 
52557: namespace mjit {
52557: 
53498: struct JITScript {
53498:     JSC::ExecutablePool *execPool;   /* pool that contains |ncode|; script owns the pool */
53498:     uint32          inlineLength;    /* length of inline JIT'd code */
53498:     uint32          outOfLineLength; /* length of out of line JIT'd code */
53498:     js::mjit::CallSite *callSites;
53498:     uint32          nCallSites;
53498: #ifdef JS_MONOIC
53498:     uint32          nMICs;           /* number of MonoICs */
53590:     uint32          nCallICs;        /* number of call ICs */
53498: #endif
53498: #ifdef JS_POLYIC
53498:     uint32          nPICs;           /* number of PolyICs */
53498: #endif
53498:     void            *invoke;         /* invoke address */
53590:     void            *arityCheck;     /* arity check address */
53520:     uint32          *escaping;       /* list of escaping slots */
53520:     uint32          nescaping;       /* number of escaping slots */
53498: };
53498: 
53471: /* Execute a method that has been JIT compiled. */
53471: JSBool JaegerShot(JSContext *cx);
53471: 
53471: /* Drop into the middle of a method at an arbitrary point, and execute. */
53471: JSBool JaegerShotAtSafePoint(JSContext *cx, void *safePoint);
52557: 
52557: enum CompileStatus
52557: {
52557:     Compile_Okay,
52557:     Compile_Abort,
52557:     Compile_Error
52557: };
52557: 
52853: void JS_FASTCALL
52853: ProfileStubCall(VMFrame &f);
52853: 
52557: CompileStatus
52560: TryCompile(JSContext *cx, JSScript *script, JSFunction *fun, JSObject *scopeChain);
52557: 
52559: void
52559: ReleaseScriptCode(JSContext *cx, JSScript *script);
52559: 
53590: void
53590: SweepCallICs(JSContext *cx);
53590: 
52557: static inline CompileStatus
52560: CanMethodJIT(JSContext *cx, JSScript *script, JSFunction *fun, JSObject *scopeChain)
52557: {
52557:     if (!(cx->options & JSOPTION_METHODJIT) || script->ncode == JS_UNJITTABLE_METHOD)
52557:         return Compile_Abort;
52557:     if (script->ncode == NULL)
52560:         return TryCompile(cx, script, fun, scopeChain);
52557:     return Compile_Okay;
52557: }
52557: 
53498: struct CallSite
53168: {
53168:     uint32 codeOffset;
53168:     uint32 pcOffset;
53168:     uint32 id;
53168: };
53168: 
52557: } /* namespace mjit */
52557: 
52557: } /* namespace js */
52557: 
52557: #ifdef _MSC_VER
52557: extern "C" void *JaegerThrowpoline(js::VMFrame *vmFrame);
52557: #else
52557: extern "C" void JaegerThrowpoline();
52557: #endif
53471: extern "C" void InjectJaegerReturn();
52557: 
52557: #endif /* jsjaeger_h__ */
52880: 
