    1: /* vim: set sw=4 sts=4 et cin: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is OS/2 code in Thebes.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Peter Weilbacher <mozilla@Weilbacher.org>.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef GFX_OS2_FONTS_H
    1: #define GFX_OS2_FONTS_H
    1: 
    1: #include "gfxTypes.h"
    1: #include "gfxFont.h"
 1637: #include "gfxMatrix.h"
 1637: #include "nsDataHashtable.h"
    1: 
    1: #define INCL_GPI
    1: #include <os2.h>
    1: #include <cairo-os2.h>
 1637: #include "cairo-ft.h" // includes fontconfig.h, too
 1637: #include <freetype/tttables.h>
    1: 
    1: #include "nsICharsetConverterManager.h"
    1: 
16475: class gfxOS2FontEntry : public gfxFontEntry {
16475: public:
16475:     gfxOS2FontEntry(const nsAString& aName) : gfxFontEntry(aName) {}
16475:     ~gfxOS2FontEntry() {}
16475: };
16475: 
    1: class gfxOS2Font : public gfxFont {
    1: public:
16475:     gfxOS2Font(gfxOS2FontEntry *aFontEntry, const gfxFontStyle *aFontStyle);
    1:     virtual ~gfxOS2Font();
    1: 
    1:     virtual const gfxFont::Metrics& GetMetrics();
 1637:     cairo_font_face_t *CairoFontFace();
 1637:     cairo_scaled_font_t *CairoScaledFont();
 1637: 
 1637:     // Get the glyphID of a space
 1637:     virtual PRUint32 GetSpaceGlyph() {
 1637:         if (!mMetrics)
 1637:             GetMetrics();
 1637:         return mSpaceGlyph;
 1637:     }
    1: 
16071:     static already_AddRefed<gfxOS2Font> GetOrMakeFont(const nsAString& aName,
16071:                                                       const gfxFontStyle *aStyle);
16071: 
    1: protected:
79445:     virtual bool SetupCairoFont(gfxContext *aContext);
    1: 
95169:     virtual FontType GetType() const { return FONT_TYPE_OS2; }
95169: 
    1: private:
 1637:     cairo_font_face_t *mFontFace;
 1637:     Metrics *mMetrics;
 4791:     gfxFloat mAdjustedSize;
 1637:     PRUint32 mSpaceGlyph;
15181:     int mHinting;
79445:     bool mAntialias;
    1: };
    1: 
    1: 
    1: class THEBES_API gfxOS2FontGroup : public gfxFontGroup {
    1: public:
19962:     gfxOS2FontGroup(const nsAString& aFamilies, const gfxFontStyle* aStyle, gfxUserFontSet *aUserFontSet);
    1:     virtual ~gfxOS2FontGroup();
    1: 
 1637:     virtual gfxFontGroup *Copy(const gfxFontStyle *aStyle);
    1: 
 1637:     // create and initialize the textRun using FreeType font
 1637:     virtual gfxTextRun *MakeTextRun(const PRUnichar* aString, PRUint32 aLength,
 1637:                                     const Parameters* aParams, PRUint32 aFlags);
 1637:     virtual gfxTextRun *MakeTextRun(const PRUint8* aString, PRUint32 aLength,
 1637:                                     const Parameters* aParams, PRUint32 aFlags);
    1: 
    1:     gfxOS2Font *GetFontAt(PRInt32 i) {
21927:         // If it turns out to be hard for all clients that cache font
21927:         // groups to call UpdateFontList at appropriate times, we could
21927:         // instead consider just calling UpdateFontList from someplace
21927:         // more central (such as here).
21927:         NS_ASSERTION(!mUserFontSet || mCurrGeneration == GetGeneration(),
21927:                      "Whoever was caching this font group should have "
21927:                      "called UpdateFontList on it");
21927: 
 1637: #ifdef DEBUG_thebes_2
 1637:         printf("gfxOS2FontGroup[%#x]::GetFontAt(%d), %#x, %#x\n",
 1637:                (unsigned)this, i, (unsigned)&mFonts, (unsigned)&mFonts[i]);
 1637: #endif
 3233:         return static_cast<gfxOS2Font*>(static_cast<gfxFont*>(mFonts[i]));
    1:     }
    1: 
    1: protected:
 1637:     void InitTextRun(gfxTextRun *aTextRun, const PRUint8 *aUTF8Text,
 2990:                      PRUint32 aUTF8Length, PRUint32 aUTF8HeaderLength);
 1637:     void CreateGlyphRunsFT(gfxTextRun *aTextRun, const PRUint8 *aUTF8,
 1637:                            PRUint32 aUTF8Length);
79445:     static bool FontCallback(const nsAString& aFontName,
74614:                                const nsACString& aGenericName,
79445:                                bool aUseFontSet,
74614:                                void *aClosure);
    1: 
    1: private:
79445:     bool mEnableKerning;
    1: };
    1: 
    1: #endif /* GFX_OS2_FONTS_H */
