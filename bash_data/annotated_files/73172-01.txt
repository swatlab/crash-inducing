    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Gagan Saksena <gagan@netscape.com> (original author)
    1:  *   Darin Fisher <darin@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: 
    1: /**
    1:  * URIs are essentially structured names for things -- anything. This interface
    1:  * provides accessors to set and query the most basic components of an URI.
    1:  * Subclasses, including nsIURL, impose greater structure on the URI.
    1:  *
    1:  * This interface follows Tim Berners-Lee's URI spec (RFC2396) [1], where the
    1:  * basic URI components are defined as such:
  894:  * <pre>
70211:  *      ftp://username:password@hostname:portnumber/pathname#ref
70211:  *      \ /   \               / \      / \        /\         \ /
70211:  *       -     ---------------   ------   --------  |         -
70211:  *       |            |             |        |      |         |
70211:  *       |            |             |        |      |        Ref
70211:  *       |            |             |       Port    \        /
70211:  *       |            |            Host      /       --------
70211:  *       |         UserPass                 /	         |
70211:  *     Scheme                              /	        Path
    1:  *       \                                /
    1:  *        --------------------------------
    1:  *                       |
    1:  *                    PrePath
  894:  * </pre>
    1:  * The definition of the URI components has been extended to allow for
    1:  * internationalized domain names [2] and the more generic IRI structure [3].
    1:  *
70211:  * Note also that the RFC defines #-separated fragment identifiers as being
70211:  * "not part of the URI".  Despite this, we bundle them as part of the URI, for
70211:  * convenience.
70211:  *
    1:  * [1] http://www.ietf.org/rfc/rfc2396.txt
    1:  * [2] http://www.ietf.org/internet-drafts/draft-ietf-idn-idna-06.txt
    1:  * [3] http://www.ietf.org/internet-drafts/draft-masinter-url-i18n-08.txt
    1:  */
    1: 
    1: %{C++
    1: #undef GetPort  // XXX Windows!
    1: #undef SetPort  // XXX Windows!
    1: %}
    1: 
    1: /**
    1:  * nsIURI - interface for an uniform resource identifier w/ i18n support.
    1:  *
    1:  * AUTF8String attributes may contain unescaped UTF-8 characters.
    1:  * Consumers should be careful to escape the UTF-8 strings as necessary, but
    1:  * should always try to "display" the UTF-8 version as provided by this
    1:  * interface.
    1:  *
    1:  * AUTF8String attributes may also contain escaped characters.
    1:  * 
    1:  * Unescaping URI segments is unadvised unless there is intimate
    1:  * knowledge of the underlying charset or there is no plan to display (or
    1:  * otherwise enforce a charset on) the resulting URI substring.
    1:  *
25404:  * The correct way to create an nsIURI from a string is via
25404:  * nsIIOService.newURI.
71514:  *
71514:  * NOTE: nsBinaryInputStream::ReadObject contains a hackaround to intercept the
71514:  * old (pre-gecko6) nsIURI IID and swap in the current IID instead, in order
71514:  * for sessionstore to work after an upgrade.  If this IID is revved further,
71514:  * we will need to add additional checks there for all intermediate IIDs, until
71514:  * nsPrincipal is fixed to serialize its URIs as nsISupports (bug 662693).
    1:  */
70212: [scriptable, uuid(d6d04c36-0fa4-4db3-be05-4a18397103e2)]
    1: interface nsIURI : nsISupports
    1: {
    1:     /************************************************************************
    1:      * The URI is broken down into the following principal components:
    1:      */
    1: 
    1:     /**
    1:      * Returns a string representation of the URI. Setting the spec causes
25404:      * the new spec to be parsed per the rules for the scheme the URI
25404:      * currently has.  In particular, setting the spec to a URI string with a
25404:      * different scheme will generally produce incorrect results; no one
25404:      * outside of a protocol handler implementation should be doing that.  If
25404:      * the URI stores information from the nsIIOService.newURI call used to
25404:      * create it other than just the parsed string, then behavior of this
25404:      * information on setting the spec attribute is undefined.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String spec;
    1: 
    1:     /**
    1:      * The prePath (eg. scheme://user:password@host:port) returns the string
    1:      * before the path.  This is useful for authentication or managing sessions.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     readonly attribute AUTF8String prePath;
    1: 
    1:     /**
    1:      * The Scheme is the protocol to which this URI refers.  The scheme is
25404:      * restricted to the US-ASCII charset per RFC2396.  Setting this is
25404:      * highly discouraged outside of a protocol handler implementation, since
25404:      * that will generally lead to incorrect results.
    1:      */
    1:     attribute ACString scheme;
    1: 
    1:     /**
    1:      * The username:password (or username only if value doesn't contain a ':')
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String userPass;
    1: 
    1:     /**
    1:      * The optional username and password, assuming the preHost consists of
    1:      * username:password.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String username;
    1:     attribute AUTF8String password;
    1: 
    1:     /**
    1:      * The host:port (or simply the host, if port == -1).
    1:      *
    1:      * Characters are NOT escaped.
    1:      */
    1:     attribute AUTF8String hostPort;
    1: 
    1:     /**
    1:      * The host is the internet domain name to which this URI refers.  It could
    1:      * be an IPv4 (or IPv6) address literal.  If supported, it could be a
    1:      * non-ASCII internationalized domain name.
    1:      *
    1:      * Characters are NOT escaped.
    1:      */
    1:     attribute AUTF8String host;
    1: 
    1:     /**
    1:      * A port value of -1 corresponds to the protocol's default port (eg. -1
    1:      * implies port 80 for http URIs).
    1:      */
    1:     attribute long port;
    1: 
    1:     /**
    1:      * The path, typically including at least a leading '/' (but may also be
    1:      * empty, depending on the protocol).
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String path;
    1: 
    1: 
    1:     /************************************************************************
    1:      * An URI supports the following methods:
    1:      */
    1: 
    1:     /**
    1:      * URI equivalence test (not a strict string comparison).
    1:      *
    1:      * eg. http://foo.com:80/ == http://foo.com/
    1:      */
    1:     boolean equals(in nsIURI other);
    1: 
    1:     /**
    1:      * An optimization to do scheme checks without requiring the users of nsIURI
    1:      * to GetScheme, thereby saving extra allocating and freeing. Returns true if
    1:      * the schemes match (case ignored).
    1:      */
    1:     boolean schemeIs(in string scheme);
    1: 
    1:     /**
70209:      * Clones the current URI.
    1:      */
    1:     nsIURI clone();
    1: 
    1:     /**
    1:      * This method resolves a relative string into an absolute URI string,
    1:      * using this URI as the base. 
    1:      *
    1:      * NOTE: some implementations may have no concept of a relative URI.
    1:      */
    1:     AUTF8String resolve(in AUTF8String relativePath);
    1: 
    1: 
    1:     /************************************************************************
    1:      * Additional attributes:
    1:      */
    1: 
    1:     /**
    1:      * The URI spec with an ASCII compatible encoding.  Host portion follows
    1:      * the IDNA draft spec.  Other parts are URL-escaped per the rules of
    1:      * RFC2396.  The result is strictly ASCII.
    1:      */
    1:     readonly attribute ACString asciiSpec;
    1: 
    1:     /**
    1:      * The URI host with an ASCII compatible encoding.  Follows the IDNA
    1:      * draft spec for converting internationalized domain names (UTF-8) to
    1:      * ASCII for compatibility with existing internet infrasture.
    1:      */
    1:     readonly attribute ACString asciiHost;
    1: 
    1:     /**
    1:      * The charset of the document from which this URI originated.  An empty
    1:      * value implies UTF-8.
    1:      *
    1:      * If this value is something other than UTF-8 then the URI components
    1:      * (e.g., spec, prePath, username, etc.) will all be fully URL-escaped.
    1:      * Otherwise, the URI components may contain unescaped multibyte UTF-8
    1:      * characters.
    1:      */
    1:     readonly attribute ACString originCharset;
73172: 
73172:     /************************************************************************
73172:      * Additional attribute & methods added for .ref support:
73172:      */
73172: 
73172:     /**
73172:      * Returns the reference portion (the part after the "#") of the URI.
73172:      * If there isn't one, an empty string is returned.
73172:      *
73172:      * Some characters may be escaped.
73172:      */
73172:     attribute AUTF8String ref;
73172: 
73172:     /**
73172:      * URI equivalence test (not a strict string comparison), ignoring
73172:      * the value of the .ref member.
73172:      *
73172:      * eg. http://foo.com/# == http://foo.com/
73172:      *     http://foo.com/#aaa == http://foo.com/#bbb
73172:      */
73172:     boolean equalsExceptRef(in nsIURI other);
73172: 
73172:     /**
73172:      * Clones the current URI, clearing the 'ref' attribute in the clone.
73172:      */
73172:     nsIURI cloneIgnoringRef();
73172: 
    1: };
