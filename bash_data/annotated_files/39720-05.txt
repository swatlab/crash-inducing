36033: /* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8; -*- */
36033: /* vim: set sw=2 ts=8 et tw=80 : */
36033: /* ***** BEGIN LICENSE BLOCK *****
36033:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
36033:  *
36033:  * The contents of this file are subject to the Mozilla Public License Version
36033:  * 1.1 (the "License"); you may not use this file except in compliance with
36033:  * the License. You may obtain a copy of the License at
36033:  * http://www.mozilla.org/MPL/
36033:  *
36033:  * Software distributed under the License is distributed on an "AS IS" basis,
36033:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
36033:  * for the specific language governing rights and limitations under the
36033:  * License.
36033:  *
36033:  * The Original Code is Mozilla Content App.
36033:  *
36033:  * The Initial Developer of the Original Code is
36033:  *   The Mozilla Foundation.
36033:  * Portions created by the Initial Developer are Copyright (C) 2009
36033:  * the Initial Developer. All Rights Reserved.
36033:  *
36033:  * Contributor(s):
36033:  *
36033:  * Alternatively, the contents of this file may be used under the terms of
36033:  * either the GNU General Public License Version 2 or later (the "GPL"), or
36033:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
36033:  * in which case the provisions of the GPL or the LGPL are applicable instead
36033:  * of those above. If you wish to allow use of your version of this file only
36033:  * under the terms of either the GPL or the LGPL, and not to allow others to
36033:  * use your version of this file under the terms of the MPL, indicate your
36033:  * decision by deleting the provisions above and replace them with the notice
36033:  * and other provisions required by the GPL or the LGPL. If you do not delete
36033:  * the provisions above, a recipient may use your version of this file under
36033:  * the terms of any one of the MPL, the GPL or the LGPL.
36033:  *
36033:  * ***** END LICENSE BLOCK ***** */
36033: 
36033: #include "PluginMessageUtils.h"
36033: #include "nsIRunnable.h"
36033: #include "nsThreadUtils.h"
36033: 
37311: #include "PluginInstanceParent.h"
37311: #include "PluginInstanceChild.h"
37311: #include "PluginScriptableObjectParent.h"
37311: #include "PluginScriptableObjectChild.h"
37311: 
39265: using mozilla::ipc::RPCChannel;
39265: 
36033: namespace {
36033: 
36033: class DeferNPObjectReleaseRunnable : public nsRunnable
36033: {
36033: public:
36033:   DeferNPObjectReleaseRunnable(const NPNetscapeFuncs* f, NPObject* o)
36033:     : mFuncs(f)
36033:     , mObject(o)
36033:   {
36033:     NS_ASSERTION(o, "no release null objects");
36033:   }
36033: 
36033:   NS_IMETHOD Run();
36033: 
36033: private:
36033:   const NPNetscapeFuncs* mFuncs;
36033:   NPObject* mObject;
36033: };
36033: 
36033: NS_IMETHODIMP
36033: DeferNPObjectReleaseRunnable::Run()
36033: {
36033:   mFuncs->releaseobject(mObject);
36033:   return NS_OK;
36033: }
36033: 
36033: } // anonymous namespace
36033: 
36033: namespace mozilla {
36033: namespace plugins {
36033: 
39265: RPCChannel::RacyRPCPolicy
39265: MediateRace(const RPCChannel::Message& parent,
39265:             const RPCChannel::Message& child)
39265: {
39720:   switch (parent.type()) {
39720:   case PPluginInstance::Msg_Paint__ID:
39720:   case PPluginInstance::Msg_NPP_SetWindow__ID:
39720:     // our code relies on the frame list not changing during paints and
39720:     // reflows
39720:     return RPCChannel::RRPParentWins;
39265: 
39720:   default:
39720:     return RPCChannel::RRPChildWins;
39720:   }
39265: }
39265: 
37099: PRLogModuleInfo* gPluginLog = PR_NewLogModule("IPCPlugins");
37099: 
36033: void
36033: DeferNPObjectLastRelease(const NPNetscapeFuncs* f, NPObject* o)
36033: {
36033:   if (!o)
36033:     return;
36033: 
36033:   if (o->referenceCount > 1) {
36033:     f->releaseobject(o);
36033:     return;
36033:   }
36033: 
36033:   NS_DispatchToCurrentThread(new DeferNPObjectReleaseRunnable(f, o));
36033: }
36033: 
36033: void DeferNPVariantLastRelease(const NPNetscapeFuncs* f, NPVariant* v)
36033: {
36033:   if (!NPVARIANT_IS_OBJECT(*v)) {
36033:     f->releasevariantvalue(v);
36033:     return;
36033:   }
36033:   DeferNPObjectLastRelease(f, v->value.objectValue);
36033:   VOID_TO_NPVARIANT(*v);
36033: }
36033: 
36033: } // namespace plugins
36033: } // namespace mozilla
