    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim: set ts=2 sw=2 et tw=78: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Johnny Stenback <jst@netscape.com> (original author)
16549:  *   Boris Zbarsky <bzbarsky@mit.edu>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Class for managing loading of a subframe (creation of the docshell,
    1:  * handling of loads in it, recursion-checking).
    1:  */
    1: 
    1: #include "nsIDOMHTMLIFrameElement.h"
    1: #include "nsIDOMHTMLFrameElement.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsPresContext.h"
    1: #include "nsIPresShell.h"
    1: #include "nsIContent.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMDocument.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsPIDOMWindow.h"
    1: #include "nsIWebNavigation.h"
    1: #include "nsIDocShell.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIDocShellTreeNode.h"
    1: #include "nsIDocShellTreeOwner.h"
    1: #include "nsIDocShellLoadInfo.h"
    1: #include "nsIBaseWindow.h"
    1: #include "nsContentUtils.h"
    1: #include "nsUnicharUtils.h"
    1: #include "nsIScriptGlobalObject.h"
    1: #include "nsIScriptSecurityManager.h"
    1: #include "nsFrameLoader.h"
    1: #include "nsIDOMEventTarget.h"
16549: #include "nsIFrame.h"
16549: #include "nsIFrameFrame.h"
16549: #include "nsDOMError.h"
16549: #include "nsPresShellIterator.h"
16549: #include "nsGUIEvent.h"
16549: #include "nsEventDispatcher.h"
20146: #include "nsISHistory.h"
    1: 
    1: #include "nsIURI.h"
    1: #include "nsIURL.h"
    1: #include "nsNetUtil.h"
    1: 
    1: #include "nsGkAtoms.h"
    1: #include "nsINameSpaceManager.h"
    1: 
12256: #include "nsThreadUtils.h"
12256: 
12256: class nsAsyncDocShellDestroyer : public nsRunnable
12256: {
12256: public:
12256:   nsAsyncDocShellDestroyer(nsIDocShell* aDocShell)
12256:     : mDocShell(aDocShell)
12256:   {
12256:   }
12256: 
12256:   NS_IMETHOD Run()
12256:   {
12256:     nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
12256:     if (base_win) {
12256:       base_win->Destroy();
12256:     }
12261:     return NS_OK;
12256:   }
12256:   nsRefPtr<nsIDocShell> mDocShell;
12256: };
12256: 
    1: // Bug 136580: Limit to the number of nested content frames that can have the
    1: //             same URL. This is to stop content that is recursively loading
    1: //             itself.  Note that "#foo" on the end of URL doesn't affect
    1: //             whether it's considered identical, but "?foo" or ";foo" are
    1: //             considered and compared.
    1: // Bug 228829: Limit this to 1, like IE does.
    1: #define MAX_SAME_URL_CONTENT_FRAMES 1
    1: 
    1: // Bug 8065: Limit content frame depth to some reasonable level. This
    1: // does not count chrome frames when determining depth, nor does it
    1: // prevent chrome recursion.  Number is fairly arbitrary, but meant to
    1: // keep number of shells to a reasonable number on accidental recursion with a
    1: // small (but not 1) branching factor.  With large branching factors the number
    1: // of shells can rapidly become huge and run us out of memory.  To solve that,
    1: // we'd need to re-institute a fixed version of bug 98158.
    1: #define MAX_DEPTH_CONTENT_FRAMES 10
    1: 
    1: NS_IMPL_CYCLE_COLLECTION_1(nsFrameLoader, mDocShell)
    1: 
    1: NS_IMPL_CYCLE_COLLECTING_ADDREF(nsFrameLoader)
    1: NS_IMPL_CYCLE_COLLECTING_RELEASE(nsFrameLoader)
    1: 
  791: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(nsFrameLoader)
    1:   NS_INTERFACE_MAP_ENTRY(nsIFrameLoader)
    1:   NS_INTERFACE_MAP_ENTRY(nsISupports)
    1: NS_INTERFACE_MAP_END
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::LoadFrame()
    1: {
    1:   NS_ENSURE_TRUE(mOwnerContent, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:   nsAutoString src;
    1:   GetURL(src);
    1: 
    1:   src.Trim(" \t\n\r");
    1: 
    1:   if (src.IsEmpty()) {
    1:     src.AssignLiteral("about:blank");
    1:   }
    1: 
    1:   nsIDocument* doc = mOwnerContent->GetOwnerDoc();
    1:   if (!doc) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIURI> base_uri = mOwnerContent->GetBaseURI();
    1:   const nsAFlatCString &doc_charset = doc->GetDocumentCharacterSet();
    1:   const char *charset = doc_charset.IsEmpty() ? nsnull : doc_charset.get();
    1: 
    1:   nsCOMPtr<nsIURI> uri;
    1:   nsresult rv = NS_NewURI(getter_AddRefs(uri), src, charset, base_uri);
    1: 
    1:   // If the URI was malformed, try to recover by loading about:blank.
    1:   if (rv == NS_ERROR_MALFORMED_URI) {
    1:     rv = NS_NewURI(getter_AddRefs(uri), NS_LITERAL_STRING("about:blank"),
    1:                    charset);
    1:   }
    1: 
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   return LoadURI(uri);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::LoadURI(nsIURI* aURI)
    1: {
    1:   if (!aURI)
    1:     return NS_ERROR_INVALID_POINTER;
13433:   NS_ENSURE_STATE(!mDestroyCalled && mOwnerContent);
    1: 
13433:   nsCOMPtr<nsIDocument> doc = mOwnerContent->GetOwnerDoc();
    1:   if (!doc) {
    1:     return NS_OK;
    1:   }
    1: 
13433:   nsresult rv = CheckURILoad(aURI);
13433:   NS_ENSURE_SUCCESS(rv, rv);
13433: 
13433:   mURIToLoad = aURI;
13433:   rv = doc->InitializeFrameLoader(this);
13433:   if (NS_FAILED(rv)) {
13433:     mURIToLoad = nsnull;
13433:   }
13433:   return rv;
13433: }
13433: 
13433: nsresult
13433: nsFrameLoader::ReallyStartLoading()
13433: {
13433:   NS_ENSURE_STATE(mURIToLoad && mOwnerContent && mOwnerContent->IsInDoc());
13433:   // Just to be safe, recheck uri.
13433:   nsresult rv = CheckURILoad(mURIToLoad);
13433:   NS_ENSURE_SUCCESS(rv, rv);
13433: 
13433:   rv = EnsureDocShell();
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsIDocShellLoadInfo> loadInfo;
    1:   mDocShell->CreateLoadInfo(getter_AddRefs(loadInfo));
    1:   NS_ENSURE_TRUE(loadInfo, NS_ERROR_FAILURE);
    1: 
13433:   // We'll use our principal, not that of the document loaded inside us.  This
13433:   // is very important; needed to prevent XSS attacks on documents loaded in
13433:   // subframes!
13433:   loadInfo->SetOwner(mOwnerContent->NodePrincipal());
13433: 
13433:   nsCOMPtr<nsIURI> referrer;
13433:   rv = mOwnerContent->NodePrincipal()->GetURI(getter_AddRefs(referrer));
13433:   NS_ENSURE_SUCCESS(rv, rv);
13433: 
13433:   loadInfo->SetReferrer(referrer);
13433: 
13433:   // Kick off the load...
13433:   rv = mDocShell->LoadURI(mURIToLoad, loadInfo,
13433:                           nsIWebNavigation::LOAD_FLAGS_NONE, PR_FALSE);
13433:   mURIToLoad = nsnull;
13433: #ifdef DEBUG
13433:   if (NS_FAILED(rv)) {
13433:     NS_WARNING("Failed to load the URL");
13433:   }
13433: #endif
13433:   return NS_OK;
13433: }
13433: 
13433: nsresult
13433: nsFrameLoader::CheckURILoad(nsIURI* aURI)
13433: {
    1:   // Check for security.  The fun part is trying to figure out what principals
    1:   // to use.  The way I figure it, if we're doing a LoadFrame() accidentally
    1:   // (eg someone created a frame/iframe node, we're being parsed, XUL iframes
    1:   // are being reframed, etc.) then we definitely want to use the node
    1:   // principal of mOwnerContent for security checks.  If, on the other hand,
    1:   // someone's setting the src on our owner content, or created it via script,
    1:   // or whatever, then they can clearly access it... and we should still use
    1:   // the principal of mOwnerContent.  I don't think that leads to privilege
    1:   // escalation, and it's reasonably guaranteed to not lead to XSS issues
    1:   // (since caller can already access mOwnerContent in this case).  So just use
    1:   // the principal of mOwnerContent no matter what.  If script wants to run
    1:   // things with its own permissions, which differ from those of mOwnerContent
    1:   // (which means the script is privileged in some way) it should set
    1:   // window.location instead.
    1:   nsIScriptSecurityManager *secMan = nsContentUtils::GetSecurityManager();
    1: 
    1:   // Get our principal
    1:   nsIPrincipal* principal = mOwnerContent->NodePrincipal();
    1: 
    1:   // Check if we are allowed to load absURL
13433:   nsresult rv =
13433:     secMan->CheckLoadURIWithPrincipal(principal, aURI,
    1:                                       nsIScriptSecurityManager::STANDARD);
    1:   if (NS_FAILED(rv)) {
    1:     return rv; // We're not
    1:   }
    1: 
    1:   // Bail out if this is an infinite recursion scenario
13433:   return CheckForRecursiveLoad(aURI);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::GetDocShell(nsIDocShell **aDocShell)
    1: {
    1:   *aDocShell = nsnull;
    1: 
    1:   // If we have an owner, make sure we have a docshell and return
    1:   // that. If not, we're most likely in the middle of being torn down,
    1:   // then we just return null.
    1:   if (mOwnerContent) {
    1:     nsresult rv = EnsureDocShell();
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1:   }
    1: 
    1:   *aDocShell = mDocShell;
    1:   NS_IF_ADDREF(*aDocShell);
    1: 
    1:   return NS_OK;
    1: }
    1: 
12256: void
12256: nsFrameLoader::Finalize()
12256: {
12256:   nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
12256:   if (base_win) {
12256:     base_win->Destroy();
12256:   }
12256:   mDocShell = nsnull;
12256: }
12256: 
16549: static void
16549: FirePageHideEvent(nsIDocShellTreeItem* aItem,
16549:                   nsIDOMEventTarget* aChromeEventHandler)
16549: {
16549:   nsPageTransitionEvent event(PR_TRUE, NS_PAGE_HIDE, PR_TRUE);
16549:   nsCOMPtr<nsIDOMDocument> doc = do_GetInterface(aItem);
16549:   event.target = do_QueryInterface(doc);
16549:   nsEventDispatcher::Dispatch(aChromeEventHandler, nsnull, &event);
16549:   
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   nsAutoTArray<nsCOMPtr<nsIDocShellTreeItem>, 8> kids;
16549:   kids.AppendElements(childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     aItem->GetChildAt(i, getter_AddRefs(kids[i]));
16549:   }
16549: 
16549:   for (PRUint32 i = 0; i < kids.Length(); ++i) {
16549:     if (kids[i]) {
16549:       FirePageHideEvent(kids[i], aChromeEventHandler);
16549:     }
16549:   }
16549: }
16549: 
16549: static void
16549: FirePageShowEvent(nsIDocShellTreeItem* aItem,
16549:                   nsIDOMEventTarget* aChromeEventHandler)
16549: {
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   nsAutoTArray<nsCOMPtr<nsIDocShellTreeItem>, 8> kids;
16549:   kids.AppendElements(childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     aItem->GetChildAt(i, getter_AddRefs(kids[i]));
16549:   }
16549: 
16549:   for (PRUint32 i = 0; i < kids.Length(); ++i) {
16549:     if (kids[i]) {
16549:       FirePageShowEvent(kids[i], aChromeEventHandler);
16549:     }
16549:   }
16549: 
16549:   nsPageTransitionEvent event(PR_TRUE, NS_PAGE_SHOW, PR_TRUE);
16549:   nsCOMPtr<nsIDOMDocument> doc = do_GetInterface(aItem);
16549:   event.target = do_QueryInterface(doc);
16549:   nsEventDispatcher::Dispatch(aChromeEventHandler, nsnull, &event);
16549: }
16549: 
16549: static void
16549: SetTreeOwnerAndChromeEventHandlerOnDocshellTree(nsIDocShellTreeItem* aItem,
16549:                                                 nsIDocShellTreeOwner* aOwner,
16549:                                                 nsIDOMEventTarget* aHandler)
16549: {
16549:   NS_PRECONDITION(aItem, "Must have item");
16549: 
16549:   aItem->SetTreeOwner(aOwner);
16549:   nsCOMPtr<nsIDocShell> shell(do_QueryInterface(aItem));
16549:   shell->SetChromeEventHandler(aHandler);
16549: 
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     nsCOMPtr<nsIDocShellTreeItem> item;
16549:     aItem->GetChildAt(i, getter_AddRefs(item));
16549:     SetTreeOwnerAndChromeEventHandlerOnDocshellTree(item, aOwner, aHandler);
16549:   }
16549: }
16549: 
16549: /**
16549:  * Set the type of the treeitem and hook it up to the treeowner.
16549:  * @param aItem the treeitem we're wrking working with
16549:  * @param aOwningContent the content node that owns aItem
16549:  * @param aTreeOwner the relevant treeowner; might be null
16549:  * @param aParentType the nsIDocShellTreeItem::GetType of our parent docshell
16549:  * @param aParentNode if non-null, the docshell we should be added as a child to
16549:  *
16549:  * @return whether aItem is top-level content
16549:  */
16549: static PRBool
16549: AddTreeItemToTreeOwner(nsIDocShellTreeItem* aItem, nsIContent* aOwningContent,
16549:                        nsIDocShellTreeOwner* aOwner, PRInt32 aParentType,
16549:                        nsIDocShellTreeNode* aParentNode)
16549: {
16549:   NS_PRECONDITION(aItem, "Must have docshell treeitem");
16549:   NS_PRECONDITION(aOwningContent, "Must have owning content");
16549:   
16549:   nsAutoString value;
16549:   PRBool isContent = PR_FALSE;
16549: 
16549:   if (aOwningContent->IsNodeOfType(nsINode::eXUL)) {
16549:       aOwningContent->GetAttr(kNameSpaceID_None, nsGkAtoms::type, value);
16549:   }
16549: 
16549:   // we accept "content" and "content-xxx" values.
16549:   // at time of writing, we expect "xxx" to be "primary" or "targetable", but
16549:   // someday it might be an integer expressing priority or something else.
16549: 
16549:   isContent = value.LowerCaseEqualsLiteral("content") ||
16549:     StringBeginsWith(value, NS_LITERAL_STRING("content-"),
16549:                      nsCaseInsensitiveStringComparator());
16549: 
16549:   if (isContent) {
16549:     // The web shell's type is content.
16549: 
16549:     aItem->SetItemType(nsIDocShellTreeItem::typeContent);
16549:   } else {
16549:     // Inherit our type from our parent webshell.  If it is
16549:     // chrome, we'll be chrome.  If it is content, we'll be
16549:     // content.
16549: 
16549:     aItem->SetItemType(aParentType);
16549:   }
16549: 
16549:   // Now that we have our type set, add ourselves to the parent, as needed.
16549:   if (aParentNode) {
16549:     aParentNode->AddChild(aItem);
16549:   }
16549: 
16549:   PRBool retval = PR_FALSE;
16549:   if (aParentType == nsIDocShellTreeItem::typeChrome && isContent) {
16549:     retval = PR_TRUE;
16549: 
16549:     PRBool is_primary = value.LowerCaseEqualsLiteral("content-primary");
16549: 
16549:     if (aOwner) {
16549:       PRBool is_targetable = is_primary ||
16549:         value.LowerCaseEqualsLiteral("content-targetable");
16549:       aOwner->ContentShellAdded(aItem, is_primary, is_targetable, value);
16549:     }
16549:   }
16549: 
16549:   return retval;
16549: }
16549: 
20146: static PRBool
20146: AllDescendantsOfType(nsIDocShellTreeItem* aParentItem, PRInt32 aType)
20146: {
20146:   PRInt32 childCount = 0;
20146:   aParentItem->GetChildCount(&childCount);
20146: 
20146:   for (PRInt32 i = 0; i < childCount; ++i) {
20146:     nsCOMPtr<nsIDocShellTreeItem> kid;
20146:     aParentItem->GetChildAt(i, getter_AddRefs(kid));
20146: 
20146:     PRInt32 kidType;
20146:     kid->GetItemType(&kidType);
20146:     if (kidType != aType || !AllDescendantsOfType(kid, aType)) {
20146:       return PR_FALSE;
20146:     }
20146:   }
20146: 
20146:   return PR_TRUE;
20146: }
20146: 
16549: nsresult
16549: nsFrameLoader::SwapWithOtherLoader(nsFrameLoader* aOther,
16549:                                    nsRefPtr<nsFrameLoader>& aFirstToSwap,
16549:                                    nsRefPtr<nsFrameLoader>& aSecondToSwap)
16549: {
16549:   NS_PRECONDITION((aFirstToSwap == this && aSecondToSwap == aOther) ||
16549:                   (aFirstToSwap == aOther && aSecondToSwap == this),
16549:                   "Swapping some sort of random loaders?");
16549: 
16549:   nsIContent* ourContent = mOwnerContent;
16549:   nsIContent* otherContent = aOther->mOwnerContent;
16549: 
16549:   if (!ourContent || !otherContent) {
16549:     // Can't handle this
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // Make sure there are no same-origin issues
16549:   PRBool equal;
16549:   nsresult rv =
16549:     ourContent->NodePrincipal()->Equals(otherContent->NodePrincipal(), &equal);
16549:   if (NS_FAILED(rv) || !equal) {
16549:     // Security problems loom.  Just bail on it all
16549:     return NS_ERROR_DOM_SECURITY_ERR;
16549:   }
16549: 
16549:   nsCOMPtr<nsIDocShell> ourDochell = GetExistingDocShell();
16549:   nsCOMPtr<nsIDocShell> otherDocshell = aOther->GetExistingDocShell();
16549:   if (!ourDochell || !otherDocshell) {
16549:     // How odd
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // To avoid having to mess with session history, avoid swapping
20146:   // frameloaders that don't correspond to root same-type docshells,
20146:   // unless both roots have session history disabled.
16549:   nsCOMPtr<nsIDocShellTreeItem> ourTreeItem = do_QueryInterface(ourDochell);
16549:   nsCOMPtr<nsIDocShellTreeItem> otherTreeItem =
16549:     do_QueryInterface(otherDocshell);
16549:   nsCOMPtr<nsIDocShellTreeItem> ourRootTreeItem, otherRootTreeItem;
16549:   ourTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(ourRootTreeItem));
16549:   otherTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(otherRootTreeItem));
16549:   if (ourRootTreeItem != ourTreeItem || otherRootTreeItem != otherTreeItem) {
20146:     nsCOMPtr<nsIWebNavigation> ourRootWebnav =
20146:       do_QueryInterface(ourRootTreeItem);
20146:     nsCOMPtr<nsIWebNavigation> otherRootWebnav =
20146:       do_QueryInterface(otherRootTreeItem);
20146: 
20146:     if (!ourRootWebnav || !otherRootWebnav) {
16549:       return NS_ERROR_NOT_IMPLEMENTED;
16549:     }
16549: 
20146:     nsCOMPtr<nsISHistory> ourHistory;
20146:     nsCOMPtr<nsISHistory> otherHistory;
20146:     ourRootWebnav->GetSessionHistory(getter_AddRefs(ourHistory));
20146:     otherRootWebnav->GetSessionHistory(getter_AddRefs(otherHistory));
20146: 
20146:     if (ourHistory || otherHistory) {
20146:       return NS_ERROR_NOT_IMPLEMENTED;
20146:     }
20146:   }
20146: 
16549:   // Also make sure that the two docshells are the same type. Otherwise
20146:   // swapping is certainly not safe.
16549:   PRInt32 ourType = nsIDocShellTreeItem::typeChrome;
16549:   PRInt32 otherType = nsIDocShellTreeItem::typeChrome;
16549:   ourTreeItem->GetItemType(&ourType);
16549:   otherTreeItem->GetItemType(&otherType);
20146:   if (ourType != otherType) {
20146:     return NS_ERROR_NOT_IMPLEMENTED;
20146:   }
20146: 
20146:   // One more twist here.  Setting up the right treeowners in a heterogenous
20146:   // tree is a bit of a pain.  So make sure that if ourType is not
20146:   // nsIDocShellTreeItem::typeContent then all of our descendants are the same
20146:   // type as us.
20146:   if (ourType != nsIDocShellTreeItem::typeContent &&
20146:       (!AllDescendantsOfType(ourTreeItem, ourType) ||
20146:        !AllDescendantsOfType(otherTreeItem, otherType))) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549:   
16549:   // Save off the tree owners, frame elements, chrome event handlers, and
16549:   // docshell and document parents before doing anything else.
16549:   nsCOMPtr<nsIDocShellTreeOwner> ourOwner, otherOwner;
16549:   ourTreeItem->GetTreeOwner(getter_AddRefs(ourOwner));
16549:   otherTreeItem->GetTreeOwner(getter_AddRefs(otherOwner));
16549:   // Note: it's OK to have null treeowners.
16549: 
16549:   nsCOMPtr<nsIDocShellTreeItem> ourParentItem, otherParentItem;
16549:   ourTreeItem->GetParent(getter_AddRefs(ourParentItem));
16549:   otherTreeItem->GetParent(getter_AddRefs(otherParentItem));
16549:   if (!ourParentItem || !otherParentItem) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
20146:   // Make sure our parents are the same type too
20146:   PRInt32 ourParentType = nsIDocShellTreeItem::typeContent;
20146:   PRInt32 otherParentType = nsIDocShellTreeItem::typeContent;
20146:   ourParentItem->GetItemType(&ourParentType);
20146:   otherParentItem->GetItemType(&otherParentType);
20146:   if (ourParentType != otherParentType) {
20146:     return NS_ERROR_NOT_IMPLEMENTED;
20146:   }
20146: 
16549:   nsCOMPtr<nsPIDOMWindow> ourWindow = do_GetInterface(ourDochell);
16549:   nsCOMPtr<nsPIDOMWindow> otherWindow = do_GetInterface(otherDocshell);
16549: 
16549:   nsCOMPtr<nsIDOMElement> ourFrameElement =
16549:     ourWindow->GetFrameElementInternal();
16549:   nsCOMPtr<nsIDOMElement> otherFrameElement =
16549:     otherWindow->GetFrameElementInternal();
16549: 
16549:   nsCOMPtr<nsIDOMEventTarget> ourChromeEventHandler =
16549:     do_QueryInterface(ourWindow->GetChromeEventHandler());
16549:   nsCOMPtr<nsIDOMEventTarget> otherChromeEventHandler =
16549:     do_QueryInterface(otherWindow->GetChromeEventHandler());
16549: 
16549:   NS_ASSERTION(SameCOMIdentity(ourFrameElement, ourContent) &&
16549:                SameCOMIdentity(otherFrameElement, otherContent) &&
16549:                SameCOMIdentity(ourChromeEventHandler, ourContent) &&
16549:                SameCOMIdentity(otherChromeEventHandler, otherContent),
16549:                "How did that happen, exactly?");
16549: 
16549:   nsCOMPtr<nsIDocument> ourChildDocument =
16549:     do_QueryInterface(ourWindow->GetExtantDocument());
16549:   nsCOMPtr<nsIDocument> otherChildDocument =
16549:     do_QueryInterface(otherWindow->GetExtantDocument());
16549:   if (!ourChildDocument || !otherChildDocument) {
16549:     // This shouldn't be happening
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   nsCOMPtr<nsIDocument> ourParentDocument =
16549:     ourChildDocument->GetParentDocument();
16549:   nsCOMPtr<nsIDocument> otherParentDocument =
16549:     otherChildDocument->GetParentDocument();
16549: 
16549:   // Make sure to swap docshells between the two frames.
16549:   nsIDocument* ourDoc = ourContent->GetCurrentDoc();
16549:   nsIDocument* otherDoc = otherContent->GetCurrentDoc();
16549:   if (!ourDoc || !otherDoc) {
16549:     // Again, how odd, given that we had docshells
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   NS_ASSERTION(ourDoc == ourParentDocument, "Unexpected parent document");
16549:   NS_ASSERTION(otherDoc == otherParentDocument, "Unexpected parent document");
16549: 
16549:   nsPresShellIterator iter1(ourDoc);
16549:   nsPresShellIterator iter2(otherDoc);
16549:   if (iter1.HasMoreThanOneShell() || iter2.HasMoreThanOneShell()) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   nsIPresShell* ourShell = ourDoc->GetPrimaryShell();
16549:   nsIPresShell* otherShell = otherDoc->GetPrimaryShell();
16549:   if (!ourShell || !otherShell) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   if (mInSwap || aOther->mInSwap) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549:   mInSwap = aOther->mInSwap = PR_TRUE;
16549: 
16549:   // Fire pagehide events.  Note that we do NOT fire these in the normal way,
16549:   // but just fire them on the chrome event handlers.
16549:   FirePageHideEvent(ourTreeItem, ourChromeEventHandler);
16549:   FirePageHideEvent(otherTreeItem, otherChromeEventHandler);
16549:   
16549:   nsIFrame* ourFrame = ourShell->GetPrimaryFrameFor(ourContent);
16549:   nsIFrame* otherFrame = otherShell->GetPrimaryFrameFor(otherContent);
16549:   if (!ourFrame || !otherFrame) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
16549:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler);
16549:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler);
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   nsIFrameFrame* ourFrameFrame = nsnull;
16549:   CallQueryInterface(ourFrame, &ourFrameFrame);
16549:   if (!ourFrameFrame) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
16549:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler);
16549:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler);
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // OK.  First begin to swap the docshells in the two nsIFrames
16549:   rv = ourFrameFrame->BeginSwapDocShells(otherFrame);
16549:   if (NS_FAILED(rv)) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
16549:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler);
16549:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler);
16549:     return rv;
16549:   }
16549: 
16549:   // Now move the docshells to the right docshell trees.  Note that this
16549:   // resets their treeowners to null.
16549:   ourParentItem->RemoveChild(ourTreeItem);
16549:   otherParentItem->RemoveChild(otherTreeItem);
16549:   if (ourType == nsIDocShellTreeItem::typeContent) {
16549:     ourOwner->ContentShellRemoved(ourTreeItem);
16549:     otherOwner->ContentShellRemoved(otherTreeItem);
16549:   }
16549:   
16549:   ourParentItem->AddChild(otherTreeItem);
16549:   otherParentItem->AddChild(ourTreeItem);
16549: 
16549:   // Restore the correct treeowners
16549:   SetTreeOwnerAndChromeEventHandlerOnDocshellTree(ourTreeItem, otherOwner,
16549:                                                   otherChromeEventHandler);
16549:   SetTreeOwnerAndChromeEventHandlerOnDocshellTree(otherTreeItem, ourOwner,
16549:                                                   ourChromeEventHandler);
16549: 
16549:   AddTreeItemToTreeOwner(ourTreeItem, otherContent, otherOwner,
20146:                          otherParentType, nsnull);
20146:   AddTreeItemToTreeOwner(otherTreeItem, ourContent, ourOwner, ourParentType,
20146:                          nsnull);
16549: 
16549:   // SetSubDocumentFor nulls out parent documents on the old child doc if a
16549:   // new non-null document is passed in, so just go ahead and remove both
16549:   // kids before reinserting in the parent subdoc maps, to avoid
16549:   // complications.
16549:   ourParentDocument->SetSubDocumentFor(ourContent, nsnull);
16549:   otherParentDocument->SetSubDocumentFor(otherContent, nsnull);
16549:   ourParentDocument->SetSubDocumentFor(ourContent, otherChildDocument);
16549:   otherParentDocument->SetSubDocumentFor(otherContent, ourChildDocument);
16549: 
16549:   ourWindow->SetFrameElementInternal(otherFrameElement);
16549:   otherWindow->SetFrameElementInternal(ourFrameElement);
16549: 
16549:   mOwnerContent = otherContent;
16549:   aOther->mOwnerContent = ourContent;
16549: 
16549:   aFirstToSwap.swap(aSecondToSwap);
16549: 
16549:   // We shouldn't have changed frames, but be really careful about it
16549:   if (ourFrame == ourShell->GetPrimaryFrameFor(ourContent) &&
16549:       otherFrame == otherShell->GetPrimaryFrameFor(otherContent)) {
16549:     ourFrameFrame->EndSwapDocShells(otherFrame);
16549:   }
16549: 
16549:   ourParentDocument->FlushPendingNotifications(Flush_Layout);
16549:   otherParentDocument->FlushPendingNotifications(Flush_Layout);
16549:   
16549:   FirePageShowEvent(ourTreeItem, otherChromeEventHandler);
16549:   FirePageShowEvent(otherTreeItem, ourChromeEventHandler);
16549: 
16549:   mInSwap = aOther->mInSwap = PR_FALSE;
16549:   return NS_OK;
16549: }
16549: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::Destroy()
    1: {
12256:   if (mDestroyCalled) {
12256:     return NS_OK;
12256:   }
12256:   mDestroyCalled = PR_TRUE;
12256: 
12256:   nsCOMPtr<nsIDocument> doc;
    1:   if (mOwnerContent) {
12256:     doc = mOwnerContent->GetOwnerDoc();
    1: 
    1:     if (doc) {
    1:       doc->SetSubDocumentFor(mOwnerContent, nsnull);
    1:     }
    1: 
    1:     mOwnerContent = nsnull;
    1:   }
    1: 
    1:   // Let the tree owner know we're gone.
    1:   if (mIsTopLevelContent) {
    1:     nsCOMPtr<nsIDocShellTreeItem> ourItem = do_QueryInterface(mDocShell);
    1:     if (ourItem) {
    1:       nsCOMPtr<nsIDocShellTreeItem> parentItem;
    1:       ourItem->GetParent(getter_AddRefs(parentItem));
    1:       nsCOMPtr<nsIDocShellTreeOwner> owner = do_GetInterface(parentItem);
 6683:       if (owner) {
 6683:         owner->ContentShellRemoved(ourItem);
    1:       }
    1:     }
    1:   }
    1:   
    1:   // Let our window know that we are gone
    1:   nsCOMPtr<nsPIDOMWindow> win_private(do_GetInterface(mDocShell));
    1:   if (win_private) {
    1:     win_private->SetFrameElementInternal(nsnull);
    1:   }
    1: 
12256:   if ((mInDestructor || !doc ||
12256:        NS_FAILED(doc->FinalizeFrameLoader(this))) && mDocShell) {
12256:     nsCOMPtr<nsIRunnable> event = new nsAsyncDocShellDestroyer(mDocShell);
12256:     NS_ENSURE_TRUE(event, NS_ERROR_OUT_OF_MEMORY);
12256:     NS_DispatchToCurrentThread(event);
    1: 
12256:     // Let go of our docshell now that the async destroyer holds on to
12256:     // the docshell.
12256: 
12256:     mDocShell = nsnull;
    1:   }
    1: 
12256:   // NOTE: 'this' may very well be gone by now.
12256: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::GetDepthTooGreat(PRBool* aDepthTooGreat)
    1: {
    1:   *aDepthTooGreat = mDepthTooGreat;
    1:   return NS_OK;
    1: }
    1: 
    1: nsresult
    1: nsFrameLoader::EnsureDocShell()
    1: {
    1:   if (mDocShell) {
    1:     return NS_OK;
    1:   }
12256:   NS_ENSURE_STATE(!mDestroyCalled);
    1: 
    1:   // Get our parent docshell off the document of mOwnerContent
    1:   // XXXbz this is such a total hack.... We really need to have a
    1:   // better setup for doing this.
    1:   nsIDocument* doc = mOwnerContent->GetDocument();
    1:   if (!doc) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
20078:   if (doc->GetDisplayDocument()) {
20078:     // Don't allow subframe loads in external reference documents
20078:     return NS_ERROR_NOT_AVAILABLE;
20078:   }
20078: 
    1:   nsCOMPtr<nsIWebNavigation> parentAsWebNav =
    1:     do_GetInterface(doc->GetScriptGlobalObject());
    1: 
    1:   // Create the docshell...
    1:   mDocShell = do_CreateInstance("@mozilla.org/webshell;1");
    1:   NS_ENSURE_TRUE(mDocShell, NS_ERROR_FAILURE);
    1: 
    1:   // Get the frame name and tell the docshell about it.
    1:   nsCOMPtr<nsIDocShellTreeItem> docShellAsItem(do_QueryInterface(mDocShell));
    1:   NS_ENSURE_TRUE(docShellAsItem, NS_ERROR_FAILURE);
    1:   nsAutoString frameName;
    1: 
    1:   PRInt32 namespaceID = mOwnerContent->GetNameSpaceID();
    1:   if (namespaceID == kNameSpaceID_XHTML) {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::id, frameName);
    1:   } else {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::name, frameName);
    1:     // XXX if no NAME then use ID, after a transition period this will be
    1:     // changed so that XUL only uses ID too (bug 254284).
    1:     if (frameName.IsEmpty() && namespaceID == kNameSpaceID_XUL) {
    1:       mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::id, frameName);
    1:     }
    1:   }
    1: 
    1:   if (!frameName.IsEmpty()) {
    1:     docShellAsItem->SetName(frameName.get());
    1:   }
    1: 
    1:   // If our container is a web-shell, inform it that it has a new
    1:   // child. If it's not a web-shell then some things will not operate
    1:   // properly.
    1: 
    1:   nsCOMPtr<nsIDocShellTreeNode> parentAsNode(do_QueryInterface(parentAsWebNav));
    1:   if (parentAsNode) {
    1:     // Note: This logic duplicates a lot of logic in
    1:     // nsSubDocumentFrame::AttributeChanged.  We should fix that.
    1: 
    1:     nsCOMPtr<nsIDocShellTreeItem> parentAsItem =
    1:       do_QueryInterface(parentAsNode);
    1: 
    1:     PRInt32 parentType;
    1:     parentAsItem->GetItemType(&parentType);
    1: 
    1:     // XXXbz why is this in content code, exactly?  We should handle
    1:     // this some other way.....  Not sure how yet.
    1:     nsCOMPtr<nsIDocShellTreeOwner> parentTreeOwner;
    1:     parentAsItem->GetTreeOwner(getter_AddRefs(parentTreeOwner));
16549:     mIsTopLevelContent =
16549:       AddTreeItemToTreeOwner(docShellAsItem, mOwnerContent, parentTreeOwner,
16549:                              parentType, parentAsNode);
    1: 
    1:     // Make sure all shells have links back to the content element
    1:     // in the nearest enclosing chrome shell.
    1:     nsCOMPtr<nsIDOMEventTarget> chromeEventHandler;
    1: 
    1:     if (parentType == nsIDocShellTreeItem::typeChrome) {
    1:       // Our parent shell is a chrome shell. It is therefore our nearest
    1:       // enclosing chrome shell.
    1: 
    1:       chromeEventHandler = do_QueryInterface(mOwnerContent);
    1:       NS_ASSERTION(chromeEventHandler,
    1:                    "This mContent should implement this.");
    1:     } else {
    1:       nsCOMPtr<nsIDocShell> parentShell(do_QueryInterface(parentAsNode));
    1: 
    1:       // Our parent shell is a content shell. Get the chrome event
    1:       // handler from it and use that for our shell as well.
    1: 
    1:       parentShell->GetChromeEventHandler(getter_AddRefs(chromeEventHandler));
    1:     }
    1: 
    1:     mDocShell->SetChromeEventHandler(chromeEventHandler);
    1:   }
    1: 
    1:   // This is nasty, this code (the do_GetInterface(mDocShell) below)
    1:   // *must* come *after* the above call to
    1:   // mDocShell->SetChromeEventHandler() for the global window to get
    1:   // the right chrome event handler.
    1: 
    1:   // Tell the window about the frame that hosts it.
    1:   nsCOMPtr<nsIDOMElement> frame_element(do_QueryInterface(mOwnerContent));
    1:   NS_ASSERTION(frame_element, "frame loader owner element not a DOM element!");
    1: 
    1:   nsCOMPtr<nsPIDOMWindow> win_private(do_GetInterface(mDocShell));
22769:   nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
22769:   if (win_private) {
    1:     win_private->SetFrameElementInternal(frame_element);
22769:   }
    1: 
    1:   // This is kinda whacky, this call doesn't really create anything,
    1:   // but it must be called to make sure things are properly
22769:   // initialized...
22769:   if (NS_FAILED(base_win->Create()) || !win_private) {
22769:     // ...but if we couldn't create the shell properly, better
22769:     // to make sure it gets removed.
22769:     Destroy();
22769:     return NS_ERROR_FAILURE;
22769:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: void
    1: nsFrameLoader::GetURL(nsString& aURI)
    1: {
    1:   aURI.Truncate();
    1: 
    1:   if (mOwnerContent->Tag() == nsGkAtoms::object) {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::data, aURI);
    1:   } else {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::src, aURI);
    1:   }
    1: }
    1: 
    1: nsresult
    1: nsFrameLoader::CheckForRecursiveLoad(nsIURI* aURI)
    1: {
    1:   mDepthTooGreat = PR_FALSE;
 3556:   nsresult rv = EnsureDocShell();
 3556:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsIDocShellTreeItem> treeItem = do_QueryInterface(mDocShell);
    1:   NS_ASSERTION(treeItem, "docshell must be a treeitem!");
    1:   
    1:   PRInt32 ourType;
 3556:   rv = treeItem->GetItemType(&ourType);
    1:   if (NS_SUCCEEDED(rv) && ourType != nsIDocShellTreeItem::typeContent) {
    1:     // No need to do recursion-protection here XXXbz why not??  Do we really
    1:     // trust people not to screw up with non-content docshells?
    1:     return NS_OK;
    1:   }
    1: 
    1:   // Bug 8065: Don't exceed some maximum depth in content frames
    1:   // (MAX_DEPTH_CONTENT_FRAMES)
    1:   nsCOMPtr<nsIDocShellTreeItem> parentAsItem;
    1:   treeItem->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   PRInt32 depth = 0;
    1:   while (parentAsItem) {
    1:     ++depth;
    1:     
    1:     if (depth >= MAX_DEPTH_CONTENT_FRAMES) {
    1:       mDepthTooGreat = PR_TRUE;
    1:       NS_WARNING("Too many nested content frames so giving up");
    1: 
    1:       return NS_ERROR_UNEXPECTED; // Too deep, give up!  (silently?)
    1:     }
    1: 
    1:     nsCOMPtr<nsIDocShellTreeItem> temp;
    1:     temp.swap(parentAsItem);
    1:     temp->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   }
    1:   
    1:   // Bug 136580: Check for recursive frame loading
    1:   // pre-grab these for speed
    1:   nsCOMPtr<nsIURI> cloneURI;
    1:   rv = aURI->Clone(getter_AddRefs(cloneURI));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   
    1:   // Bug 98158/193011: We need to ignore data after the #
    1:   nsCOMPtr<nsIURL> cloneURL(do_QueryInterface(cloneURI)); // QI can fail
    1:   if (cloneURL) {
    1:     rv = cloneURL->SetRef(EmptyCString());
    1:     NS_ENSURE_SUCCESS(rv,rv);
    1:   }
    1: 
    1:   PRInt32 matchCount = 0;
    1:   treeItem->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   while (parentAsItem) {
    1:     // Check the parent URI with the URI we're loading
    1:     nsCOMPtr<nsIWebNavigation> parentAsNav(do_QueryInterface(parentAsItem));
    1:     if (parentAsNav) {
    1:       // Does the URI match the one we're about to load?
    1:       nsCOMPtr<nsIURI> parentURI;
    1:       parentAsNav->GetCurrentURI(getter_AddRefs(parentURI));
    1:       if (parentURI) {
    1:         nsCOMPtr<nsIURI> parentClone;
    1:         rv = parentURI->Clone(getter_AddRefs(parentClone));
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1:         nsCOMPtr<nsIURL> parentURL(do_QueryInterface(parentClone));
    1:         if (parentURL) {
    1:           rv = parentURL->SetRef(EmptyCString());
    1:           NS_ENSURE_SUCCESS(rv,rv);
    1:         }
    1: 
    1:         PRBool equal;
    1:         rv = cloneURI->Equals(parentClone, &equal);
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1:         
    1:         if (equal) {
    1:           matchCount++;
    1:           if (matchCount >= MAX_SAME_URL_CONTENT_FRAMES) {
    1:             NS_WARNING("Too many nested content frames have the same url (recursion?) so giving up");
    1:             return NS_ERROR_UNEXPECTED;
    1:           }
    1:         }
    1:       }
    1:     }
    1:     nsCOMPtr<nsIDocShellTreeItem> temp;
    1:     temp.swap(parentAsItem);
    1:     temp->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   }
    1: 
    1:   return NS_OK;
    1: }
