63285: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
63285: /* ***** BEGIN LICENSE BLOCK *****
63285:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
63285:  *
63285:  * The contents of this file are subject to the Mozilla Public License Version
63285:  * 1.1 (the "License"); you may not use this file except in compliance with
63285:  * the License. You may obtain a copy of the License at
63285:  * http://www.mozilla.org/MPL/
63285:  *
63285:  * Software distributed under the License is distributed on an "AS IS" basis,
63285:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
63285:  * for the specific language governing rights and limitations under the
63285:  * License.
63285:  *
63285:  * The Original Code is Mozilla Corporation code.
63285:  *
63285:  * The Initial Developer of the Original Code is Mozilla Foundation.
63285:  * Portions created by the Initial Developer are Copyright (C) 2011
63285:  * the Initial Developer. All Rights Reserved.
63285:  *
63285:  * Alternatively, the contents of this file may be used under the terms of
63285:  * either of the GNU General Public License Version 2 or later (the "GPL"),
63285:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
63285:  * in which case the provisions of the GPL or the LGPL are applicable instead
63285:  * of those above. If you wish to allow use of your version of this file only
63285:  * under the terms of either the GPL or the LGPL, and not to allow others to
63285:  * use your version of this file under the terms of the MPL, indicate your
63285:  * decision by deleting the provisions above and replace them with the notice
63285:  * and other provisions required by the GPL or the LGPL. If you do not delete
63285:  * the provisions above, a recipient may use your version of this file under
63285:  * the terms of any one of the MPL, the GPL or the LGPL.
63285:  *
63285:  * ***** END LICENSE BLOCK ***** */
63285: 
63285: #include "gfxCrashReporterUtils.h"
63285: 
70361: #if defined(MOZ_CRASHREPORTER)
63285: #define MOZ_GFXFEATUREREPORTER 1
63285: #endif
63285: 
63285: #ifdef MOZ_GFXFEATUREREPORTER
63285: #include "nsExceptionHandler.h"
63285: #include "nsString.h"
63285: #include "nsIObserverService.h"
63285: #include "nsIObserver.h"
63285: #include "nsAutoPtr.h"
63285: #include "nsServiceManagerUtils.h"
63285: #include "mozilla/Services.h"
63285: 
63285: namespace mozilla {
63285: 
63285: static nsTArray<nsCString> *gFeaturesAlreadyReported = nsnull;
63285: 
63285: class ObserverToDestroyFeaturesAlreadyReported : public nsIObserver
63285: {
63285: 
63285: public:
63285:   NS_DECL_ISUPPORTS
63285:   NS_DECL_NSIOBSERVER
63285: 
63285:   ObserverToDestroyFeaturesAlreadyReported() {}
63285:   virtual ~ObserverToDestroyFeaturesAlreadyReported() {}
63285: };
63285: 
63285: NS_IMPL_ISUPPORTS1(ObserverToDestroyFeaturesAlreadyReported,
63285:                    nsIObserver)
63285: 
63285: NS_IMETHODIMP
63285: ObserverToDestroyFeaturesAlreadyReported::Observe(nsISupports* aSubject,
63285:                                                   const char* aTopic,
63285:                                                   const PRUnichar* aData)
63285: {
63285:   if (!strcmp(aTopic, "xpcom-shutdown")) {
63285:     if (gFeaturesAlreadyReported) {
63285:       delete gFeaturesAlreadyReported;
63285:       gFeaturesAlreadyReported = nsnull;
63285:     }
63285:   }
63285:   return NS_OK;
63285: }
63285: 
63285: 
63285: void
63285: ScopedGfxFeatureReporter::WriteAppNote(char statusChar)
63285: {
63285:   // LeakLog made me do this. Basically, I just wanted gFeaturesAlreadyReported to be a static nsTArray<nsCString>,
63285:   // and LeakLog was complaining about leaks like this:
63285:   //    leaked 1 instance of nsTArray_base with size 8 bytes
63285:   //    leaked 7 instances of nsStringBuffer with size 8 bytes each (56 bytes total)
63285:   // So this is a work-around using a pointer, and using a nsIObserver to deallocate on xpcom shutdown.
63285:   // Yay for fighting bloat.
63285:   if (!gFeaturesAlreadyReported) {
63285:     nsCOMPtr<nsIObserverService> observerService = mozilla::services::GetObserverService();
63285:     if (!observerService)
63285:       return;
63285:     nsRefPtr<ObserverToDestroyFeaturesAlreadyReported> observer = new ObserverToDestroyFeaturesAlreadyReported;
80486:     nsresult rv = observerService->AddObserver(observer, "xpcom-shutdown", false);
63285:     if (NS_FAILED(rv)) {
63285:       observer = nsnull;
63285:       return;
63285:     }
63285:     gFeaturesAlreadyReported = new nsTArray<nsCString>;
63285:   }
63285: 
63285:   nsCAutoString featureString;
88849:   featureString.AppendPrintf("%s%c ",
63285:                              mFeature,
88849:                              statusChar);
63285: 
63285:   if (!gFeaturesAlreadyReported->Contains(featureString)) {
63285:     gFeaturesAlreadyReported->AppendElement(featureString);
63285:     CrashReporter::AppendAppNotesToCrashReport(featureString);
63285:   }
63285: }
63285: 
63285: } // end namespace mozilla
63285: 
63285: #else
63285: 
63285: namespace mozilla {
63285: void ScopedGfxFeatureReporter::WriteAppNote(char) {}
63285: }
63285: 
63285: #endif
