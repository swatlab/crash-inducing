    1: dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
67788: dnl vi: set tabstop=4 shiftwidth=4 expandtab syntax=m4:
    1: dnl ***** BEGIN LICENSE BLOCK *****
    1: dnl Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: dnl
    1: dnl The contents of this file are subject to the Mozilla Public License Version
    1: dnl 1.1 (the "License"); you may not use this file except in compliance with
    1: dnl the License. You may obtain a copy of the License at
    1: dnl http://www.mozilla.org/MPL/
    1: dnl
    1: dnl Software distributed under the License is distributed on an "AS IS" basis,
    1: dnl WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: dnl for the specific language governing rights and limitations under the
    1: dnl License.
    1: dnl
    1: dnl The Original Code is this file as it was released upon August 6, 1998.
    1: dnl
    1: dnl The Initial Developer of the Original Code is
    1: dnl Christopher Seawood.
    1: dnl Portions created by the Initial Developer are Copyright (C) 1998-2001
    1: dnl the Initial Developer. All Rights Reserved.
    1: dnl
    1: dnl Contributor(s):
    1: dnl   Jamie Zawinski <jwz@jwz.org>
    1: dnl   gettimeofday args check
    1: dnl   Christopher Blizzard <blizzard@appliedtheory.com>
    1: dnl   gnomefe update & enable-pthreads
    1: dnl   Ramiro Estrugo <ramiro@netscape.com>
    1: dnl   X11 makedepend support
    1: dnl   Insure support.
    1: dnl   Henry Sobotka <sobotka@axess.com>
    1: dnl   OS/2 support
    1: dnl   Dan Mosedale <dmose@mozilla.org>
    1: dnl   LDAP support
    1: dnl   Seth Spitzer <sspitzer@netscape.com>
    1: dnl   xpctools support
    1: dnl   Benjamin Smedberg <benjamin@smedbergs.us>
    1: dnl   Howard Chu <hyc@symas.com>
    1: dnl   MSYS support
    1: dnl   Mark Mentovai <mark@moxienet.com>:
    1: dnl   Mac OS X 10.4 support
    1: dnl   Giorgio Maone <g.maone@informaction.com>
    1: dnl   MSVC l10n compatible version check
 1796: dnl   Ben Turner <mozilla@songbirdnest.com>
33494: dnl   Windows x64 support
33494: dnl   Makoto Kato <m_kato@ga2.so-net.ne.jp>
    1: dnl
    1: dnl Alternatively, the contents of this file may be used under the terms of
    1: dnl either the GNU General Public License Version 2 or later (the "GPL"), or
    1: dnl the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: dnl in which case the provisions of the GPL or the LGPL are applicable instead
    1: dnl of those above. If you wish to allow use of your version of this file only
    1: dnl under the terms of either the GPL or the LGPL, and not to allow others to
    1: dnl use your version of this file under the terms of the MPL, indicate your
    1: dnl decision by deleting the provisions above and replace them with the notice
    1: dnl and other provisions required by the GPL or the LGPL. If you do not delete
    1: dnl the provisions above, a recipient may use your version of this file under
    1: dnl the terms of any one of the MPL, the GPL or the LGPL.
    1: dnl
    1: dnl ***** END LICENSE BLOCK *****
    1: 
    1: dnl Process this file with autoconf to produce a configure script.
    1: dnl ========================================================
    1: 
    1: AC_PREREQ(2.13)
    1: AC_INIT(config/config.mk)
    1: AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
    1: AC_CANONICAL_SYSTEM
    1: TARGET_CPU="${target_cpu}"
    1: TARGET_VENDOR="${target_vendor}"
    1: TARGET_OS="${target_os}"
    1: 
15396: MOZ_DEB_TIMESTAMP=`date +"%a, %d  %b %Y %T %z"   2>&1`
15396: AC_SUBST(MOZ_DEB_TIMESTAMP)
15396: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Don't change the following two lines.  Doing so breaks:
    1: dnl =
    1: dnl = CFLAGS="-foo" ./configure
    1: dnl =
    1: dnl ========================================================
    1: CFLAGS="${CFLAGS=}"
    1: CPPFLAGS="${CPPFLAGS=}"
    1: CXXFLAGS="${CXXFLAGS=}"
    1: LDFLAGS="${LDFLAGS=}"
    1: HOST_CFLAGS="${HOST_CFLAGS=}"
    1: HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
    1: HOST_LDFLAGS="${HOST_LDFLAGS=}"
    1: 
    1: dnl ========================================================
    1: dnl = Preserve certain environment flags passed to configure
    1: dnl = We want sub projects to receive the same flags
    1: dnl = untainted by this configure script
    1: dnl ========================================================
    1: _SUBDIR_CC="$CC"
    1: _SUBDIR_CXX="$CXX"
    1: _SUBDIR_CFLAGS="$CFLAGS"
    1: _SUBDIR_CPPFLAGS="$CPPFLAGS"
    1: _SUBDIR_CXXFLAGS="$CXXFLAGS"
    1: _SUBDIR_LDFLAGS="$LDFLAGS"
    1: _SUBDIR_HOST_CC="$HOST_CC"
    1: _SUBDIR_HOST_CFLAGS="$HOST_CFLAGS"
    1: _SUBDIR_HOST_CXXFLAGS="$HOST_CXXFLAGS"
    1: _SUBDIR_HOST_LDFLAGS="$HOST_LDFLAGS"
    1: _SUBDIR_CONFIG_ARGS="$ac_configure_args"
    1: 
    1: dnl Set the version number of the libs included with mozilla
    1: dnl ========================================================
    1: MOZJPEG=62
91489: MOZPNG=10509
   25: MOZZLIB=0x1230
    1: NSPR_VERSION=4
    1: NSS_VERSION=3
    1: 
    1: dnl Set the minimum version of toolkit libs used by mozilla
    1: dnl ========================================================
    1: GLIB_VERSION=1.2.0
    1: PERL_VERSION=5.006
50939: PYTHON_VERSION=2.5
55342: CAIRO_VERSION=1.10
21056: PANGO_VERSION=1.14.0
12668: GTK2_VERSION=2.10.0
    1: WINDRES_VERSION=2.14.90
73782: W32API_VERSION=3.14
    1: GNOMEVFS_VERSION=2.0
    1: GNOMEUI_VERSION=2.2.0
    1: GCONF_VERSION=1.2.1
71998: GIO_VERSION=2.18
    1: STARTUP_NOTIFICATION_VERSION=0.8
  643: DBUS_VERSION=0.60
93978: SQLITE_VERSION=3.7.11
23463: LIBNOTIFY_VERSION=0.4
    1: 
    1: MSMANIFEST_TOOL=
    1: 
    1: dnl Set various checks
    1: dnl ========================================================
    1: MISSING_X=
    1: AC_PROG_AWK
    1: 
    1: dnl Initialize the Pthread test variables early so they can be
    1: dnl  overridden by each platform.
    1: dnl ========================================================
    1: USE_PTHREADS=
    1: _PTHREAD_LDFLAGS=""
    1: 
    1: dnl Do not allow a separate objdir build if a srcdir build exists.
    1: dnl ==============================================================
    1: _topsrcdir=`cd \`dirname $0\`; pwd`
    1: _objdir=`pwd`
11967: 
    1: if test "$_topsrcdir" != "$_objdir"
    1: then
    1:   # Check for a couple representative files in the source tree
    1:   _conflict_files=
    1:   for file in $_topsrcdir/Makefile $_topsrcdir/config/autoconf.mk; do
    1:     if test -f $file; then
    1:       _conflict_files="$_conflict_files $file"
    1:     fi
    1:   done
    1:   if test "$_conflict_files"; then
    1:     echo "***"
    1:     echo "*   Your source tree contains these files:"
    1:     for file in $_conflict_files; do
    1:       echo "*         $file"
    1:     done
    1:     cat 1>&2 <<-EOF
    1: 	*   This indicates that you previously built in the source tree.
    1: 	*   A source tree build can confuse the separate objdir build.
    1: 	*
    1: 	*   To clean up the source tree:
    1: 	*     1. cd $_topsrcdir
    1: 	*     2. gmake distclean
    1: 	***
    1: 	EOF
    1:     exit 1
    1:     break
    1:   fi
    1: fi
    1: MOZ_BUILD_ROOT=`pwd`
    1: 
84910: dnl Default to MSVC for win32 and gcc for darwin
    1: dnl ==============================================================
    1: if test -z "$CROSS_COMPILE"; then
    1: case "$target" in
63450: *-mingw*)
    1:     if test -z "$CC"; then CC=cl; fi
    1:     if test -z "$CXX"; then CXX=cl; fi
14341:     if test -z "$CPP"; then CPP="cl -E -nologo"; fi
14341:     if test -z "$CXXCPP"; then CXXCPP="cl -TP -E -nologo"; ac_cv_prog_CXXCPP="$CXXCPP"; fi
    1:     if test -z "$LD"; then LD=link; fi
33494:     if test -z "$AS"; then
33494:         case "${target_cpu}" in
33494:         i*86)
33494:             AS=ml;
33494:             ;;
33494:         x86_64)
33494:             AS=ml64;
33494:             ;;
33494:         esac
33494:     fi
    1:     if test -z "$MIDL"; then MIDL=midl; fi
90551: 
90551:     # need override this flag since we don't use $(LDFLAGS) for this.
90551:     if test -z "$HOST_LDFLAGS" ; then
90551:         HOST_LDFLAGS=" "
90551:     fi
    1:     ;;
33298: *-darwin*)
84910:     # we prefer gcc-4.2 over gcc on older darwin, so
84910:     # use that specific version if it's available.
84910:     MOZ_PATH_PROGS(CC, $CC gcc-4.2 gcc)
84910:     MOZ_PATH_PROGS(CXX, $CXX g++-4.2 g++)
33298:     ;;
    1: esac
    1: fi
    1: 
    1: COMPILE_ENVIRONMENT=1
39010: MOZ_ARG_DISABLE_BOOL(compile-environment,
    1: [  --disable-compile-environment
    1:                           Disable compiler/library checks.],
    1:     COMPILE_ENVIRONMENT= )
30216: AC_SUBST(COMPILE_ENVIRONMENT)
    1: 
16114: MOZ_ARG_WITH_STRING(l10n-base,
16728: [  --with-l10n-base=DIR    path to l10n repositories],
16114:     L10NBASEDIR=$withval)
69923: if test -n "$L10NBASEDIR"; then
16114:     if test "$L10NBASEDIR" = "yes" -o "$L10NBASEDIR" = "no"; then
16114:         AC_MSG_ERROR([--with-l10n-base must specify a path])
16114:     elif test -d "$L10NBASEDIR"; then
16114:         L10NBASEDIR=`cd "$L10NBASEDIR" && pwd`
16114:     else
16114:         AC_MSG_ERROR([Invalid value --with-l10n-base, $L10NBASEDIR doesn't exist])
16114:     fi
16114: fi
16114: AC_SUBST(L10NBASEDIR)
16114: 
27567: dnl Check for Perl first -- needed for win32 SDK checks
27567: MOZ_PATH_PROGS(PERL, $PERL perl5 perl )
47975: if test -z "$PERL" -o "$PERL" = ":"; then
27567:     AC_MSG_ERROR([perl not found in \$PATH])
27567: fi
27567: 
    1: dnl ========================================================
42466: dnl = Android uses a very custom (hacky) toolchain; we need to do this
42466: dnl = here, so that the compiler checks can succeed
42466: dnl ========================================================
42466: 
42466: MOZ_ARG_WITH_STRING(android-ndk,
42466: [  --with-android-ndk=DIR
42466:                           location where the Android NDK can be found],
42466:     android_ndk=$withval)
42466: 
42466: MOZ_ARG_WITH_STRING(android-toolchain,
42466: [  --with-android-toolchain=DIR
42466:                           location of the android toolchain, default NDK/build/prebuilt/HOST/arm-eabi-4.4.0],
42466:     android_toolchain=$withval)
42466: 
47826: 
47826: MOZ_ARG_WITH_STRING(android-version,
47826: [  --with-android-version=VER
47826:                           android platform version, default 5],
47826:     android_version=$withval,
47826:     android_version=5)
47826: 
42466: MOZ_ARG_WITH_STRING(android-sdk,
42466: [  --with-android-sdk=DIR
42466:                           location where the Android SDK can be found (base directory, e.g. .../android/platforms/android-6)],
42466:     android_sdk=$withval)
42466: 
70914: MOZ_ARG_WITH_STRING(android-platform,
70914: [  --with-android-platform=DIR
70914:                            location of platform dir, default NDK/build/platforms/android-5/arch-arm],
70914:     android_platform=$withval)
70914: 
74263: MOZ_ARG_ENABLE_BOOL(android-libstdcxx,
74263: [  --enable-android-libstdcxx
74263:                           use GNU libstdc++ instead of STLPort for NDK >= 5],
74263:     MOZ_ANDROID_LIBSTDCXX=1,
74263:     MOZ_ANDROID_LIBSTDCXX= )
74263: 
70914: case "$target" in
70914: arm-linux*-android*|*-linuxandroid*)
70914:     android_tool_prefix="arm-linux-androideabi"
70914:     ;;
79443: i?86-*android*)
79443:     android_tool_prefix="i686-android-linux"
79443:     ;;
70914: arm-android-eabi)
70914:     android_tool_prefix="arm-eabi"
70914:     ;;
70914: *)
70914:     android_tool_prefix="$target_os"
70914:     ;;
70914: esac
70914: 
82142: MOZ_ARG_WITH_STRING(gonk,
82142: [  --with-gonk=DIR
82142:                location of gonk dir],
82142:     gonkdir=$withval)
82142: 
93987: MOZ_ARG_WITH_STRING(gonk-toolchain-prefix,
93987: [  --with-gonk-toolchain-prefix=DIR
93987:                           prefix to gonk toolchain commands],
93987:     gonk_toolchain_prefix=$withval)
93987: 
82142: if test -n "$gonkdir" ; then
82142:     kernel_name=`uname -s | tr "[[:upper:]]" "[[:lower:]]"`
93990:     android_source="$gonkdir"
93990:     ANDROID_SOURCE="$android_source"
82142: 
82142:     dnl set up compilers
93987:     AS="$gonk_toolchain_prefix"as
93987:     CC="$gonk_toolchain_prefix"gcc
93987:     CXX="$gonk_toolchain_prefix"g++
93987:     CPP="$gonk_toolchain_prefix"cpp
93987:     LD="$gonk_toolchain_prefix"ld
93987:     AR="$gonk_toolchain_prefix"ar
93987:     RANLIB="$gonk_toolchain_prefix"ranlib
93987:     STRIP="$gonk_toolchain_prefix"strip
82142: 
82142:     STLPORT_CPPFLAGS="-I$gonkdir/ndk/sources/cxx-stl/stlport/stlport/"
82142:     STLPORT_LIBS="-lstlport"
82142: 
93113:     CPPFLAGS="-DANDROID -isystem $gonkdir/bionic/libc/include/ -isystem $gonkdir/bionic/libc/kernel/common -isystem $gonkdir/bionic/libc/arch-arm/include -isystem $gonkdir/bionic/libc/kernel/arch-arm -isystem $gonkdir/bionic/libm/include -I$gonkdir/frameworks/base/opengl/include -I$gonkdir/frameworks/base/native/include -I$gonkdir/hardware/libhardware/include -I$gonkdir/hardware/libhardware_legacy/include -I$gonkdir/system/core/include -isystem $gonkdir/bionic -I$gonkdir/frameworks/base/include $CPPFLAGS -I$gonkdir/frameworks/base/services/sensorservice"
82142:     CFLAGS="-mandroid -fno-short-enums -fno-exceptions $CFLAGS"
93113:     CXXFLAGS="-mandroid -fno-short-enums -fno-exceptions $CXXFLAGS $STLPORT_CPPFLAGS"
82142:     LIBS="$LIBS $STLPORT_LIBS"
82142: 
82142:     dnl Add -llog by default, since we use it all over the place.
82142:     LDFLAGS="-mandroid -L$gonkdir/out/target/product/$GONK_PRODUCT/obj/lib -Wl,-rpath-link=$gonkdir/out/target/product/$GONK_PRODUCT/obj/lib --sysroot=$gonkdir/out/target/product/$GONK_PRODUCT/obj/ -llog $LDFLAGS"
82142: 
82142:     dnl prevent cross compile section from using these flags as host flags
82142:     if test -z "$HOST_CPPFLAGS" ; then
82142:         HOST_CPPFLAGS=" "
82142:     fi
82142:     if test -z "$HOST_CFLAGS" ; then
82142:         HOST_CFLAGS=" "
82142:     fi
82142:     if test -z "$HOST_CXXFLAGS" ; then
82142:         HOST_CXXFLAGS=" "
82142:     fi
82142:     if test -z "$HOST_LDFLAGS" ; then
82142:         HOST_LDFLAGS=" "
82142:     fi
82142: 
82142:     AC_DEFINE(ANDROID)
86363:     AC_DEFINE(HAVE_SYS_UIO_H)
88184:     AC_DEFINE(HAVE_PTHREADS)
82142:     CROSS_COMPILE=1
82142:     MOZ_CHROME_FILE_FORMAT=omni
82142:     ZLIB_DIR=yes
82142:     direct_nspr_config=1
82142: else
70914: case "$target" in
70914: *-android*|*-linuxandroid*)
42466:     if test -z "$android_ndk" ; then
42466:         AC_MSG_ERROR([You must specify --with-android-ndk=/path/to/ndk when targeting Android.])
42466:     fi
42466: 
42466:     if test -z "$android_sdk" ; then
42466:         AC_MSG_ERROR([You must specify --with-android-sdk=/path/to/sdk when targeting Android.])
78238:     else
78238:         if ! test -e "$android_sdk"/source.properties ; then
78238:             AC_MSG_ERROR([The path in --with-android-sdk isn't valid (source.properties hasn't been found).])
78238:         fi
78238: 
78238:         # Minimum Android SDK API Level we require.
78238:         android_min_api_level=13
78238: 
78238:         # Get the api level from "$android_sdk"/source.properties.
78238:         android_api_level=`$AWK -F = '$1 == "AndroidVersion.ApiLevel" {print $2}' "$android_sdk"/source.properties`
78238: 
78238:         if test -z "$android_api_level" ; then
78238:             AC_MSG_ERROR([Unexpected error: no AndroidVersion.ApiLevel field has been found in source.properties.])
78238:         fi
78238: 
78238:         if ! test "$android_api_level" -eq "$android_api_level" ; then
78238:             AC_MSG_ERROR([Unexpected error: the found android api value isn't a number! (found $android_api_level)])
78238:         fi
78238: 
78238:         if test $android_api_level -lt $android_min_api_level ; then
78238:             AC_MSG_ERROR([The given Android SDK provides API level $android_api_level ($android_min_api_level or higher required).])
78238:         fi
42466:     fi
42466: 
59214:     android_platform_tools="$android_sdk"/../../platform-tools
59214:     if test ! -d "$android_platform_tools" ; then
59214:         android_platform_tools="$android_sdk"/tools # SDK Tools < r8
42466:     fi
42466: 
42466:     if test -z "$android_toolchain" ; then
75224:         AC_MSG_CHECKING([for android toolchain directory])
75224: 
75224:         kernel_name=`uname -s | tr "[[:upper:]]" "[[:lower:]]"`
75224: 
75224:         android_toolchain="$android_ndk"/build/prebuilt/$kernel_name-x86/arm-eabi-4.4.0
75224: 
75224:         # With newer NDK, the toolchain path has changed.
75224:         if ! test -d "$android_toolchain" ; then
75224:             android_toolchain="$android_ndk"/toolchains/arm-$kernel_name-androideabi-4.4.3/prebuilt/$kernel_name-x86
75224:         fi
75224: 
75224:         if test -d "$android_toolchain" ; then
75224:             AC_MSG_RESULT([$android_toolchain])
75224:         else
75224:             AC_MSG_ERROR([not found. You have to specify --with-android-toolchain=/path/to/ndk/toolchain.])
75224:         fi
42466:     fi
42466: 
42466:     if test -z "$android_platform" ; then
75225:         AC_MSG_CHECKING([for android platform directory])
75225: 
47837:         android_platform="$android_ndk"/build/platforms/android-"$android_version"/arch-"$target_cpu"
75225: 
75225:         # With newer NDK, the platform path has changed.
75225:         if ! test -d "$android_platform" ; then
75225:             android_platform="$android_ndk"/platforms/android-"$android_version"/arch-"$target_cpu"
75225:         fi
75225: 
75225:         if test -d "$android_platform" ; then
75225:             AC_MSG_RESULT([$android_platform])
75225:         else
75225:             AC_MSG_ERROR([not found. You have to specify --with-android-platform=/path/to/ndk/platform.])
75225:         fi
42466:     fi
42466: 
42466:     dnl set up compilers
70914:     AS="$android_toolchain"/bin/"$android_tool_prefix"-as
70914:     CC="$android_toolchain"/bin/"$android_tool_prefix"-gcc
70914:     CXX="$android_toolchain"/bin/"$android_tool_prefix"-g++
70914:     CPP="$android_toolchain"/bin/"$android_tool_prefix"-cpp
70914:     LD="$android_toolchain"/bin/"$android_tool_prefix"-ld
70914:     AR="$android_toolchain"/bin/"$android_tool_prefix"-ar
70914:     RANLIB="$android_toolchain"/bin/"$android_tool_prefix"-ranlib
70914:     STRIP="$android_toolchain"/bin/"$android_tool_prefix"-strip
79862:     OBJCOPY="$android_toolchain"/bin/"$android_tool_prefix"-objcopy
70914: 
91084:     CPPFLAGS="-isystem $android_platform/usr/include $CPPFLAGS"
91084:     CFLAGS="-mandroid -fno-short-enums -fno-exceptions $CFLAGS"
91084:     CXXFLAGS="-mandroid -fno-short-enums -fno-exceptions $CXXFLAGS"
42466: 
42466:     dnl Add -llog by default, since we use it all over the place.
42466:     dnl Add --allow-shlib-undefined, because libGLESv2 links to an
42466:     dnl undefined symbol (present on the hardware, just not in the
42466:     dnl NDK.)
81109:     LDFLAGS="-mandroid -L$android_platform/usr/lib -Wl,-rpath-link=$android_platform/usr/lib --sysroot=$android_platform -llog -Wl,--allow-shlib-undefined $LDFLAGS"
42466: 
42466:     dnl prevent cross compile section from using these flags as host flags
42466:     if test -z "$HOST_CPPFLAGS" ; then
42466:         HOST_CPPFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_CFLAGS" ; then
42466:         HOST_CFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_CXXFLAGS" ; then
42466:         HOST_CXXFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_LDFLAGS" ; then
42466:         HOST_LDFLAGS=" "
42466:     fi
42466: 
42466:     ANDROID_NDK="${android_ndk}"
75100:     ANDROID_TOOLCHAIN="${android_toolchain}"
75100:     ANDROID_PLATFORM="${android_platform}"
42466:     ANDROID_SDK="${android_sdk}"
59214:     ANDROID_PLATFORM_TOOLS="${android_platform_tools}"
47932:     ANDROID_VERSION="${android_version}"
59565:     if test -z "$ANDROID_PACKAGE_NAME" ; then
59565:         ANDROID_PACKAGE_NAME='org.mozilla.$(MOZ_APP_NAME)'
59565:     fi
42466: 
42466:     AC_DEFINE(ANDROID)
47826:     AC_DEFINE_UNQUOTED(ANDROID_VERSION, $android_version)
47932:     AC_SUBST(ANDROID_VERSION)
42466:     CROSS_COMPILE=1
42466:     MOZ_CHROME_FILE_FORMAT=omni
55919:     ZLIB_DIR=yes
70914:     ;;
79862: *-linux*)
79862:     AC_PATH_PROG(OBJCOPY,objcopy)
79862:     ;;
70914: esac
42466: 
82142: fi
82142: 
42466: AC_SUBST(ANDROID_NDK)
42466: AC_SUBST(ANDROID_TOOLCHAIN)
42466: AC_SUBST(ANDROID_PLATFORM)
42466: AC_SUBST(ANDROID_SDK)
59214: AC_SUBST(ANDROID_PLATFORM_TOOLS)
59565: AC_SUBST(ANDROID_PACKAGE_NAME)
79862: AC_SUBST(OBJCOPY)
42466: 
42466: dnl ========================================================
    1: dnl Checks for compilers.
    1: dnl ========================================================
    1: dnl Set CROSS_COMPILE in the environment when running configure
    1: dnl to use the cross-compile setup for now
    1: dnl ========================================================
    1: 
37887: dnl AR_FLAGS set here so HOST_AR_FLAGS can be set correctly (see bug 538269)
37887: AR_FLAGS='cr $@'
37887: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
47975: if test -n "$CROSS_COMPILE" -a "$target" != "$host"; then
    1:     echo "cross compiling from $host to $target"
    1:     cross_compiling=yes
    1: 
    1:     _SAVE_CC="$CC"
    1:     _SAVE_CFLAGS="$CFLAGS"
    1:     _SAVE_LDFLAGS="$LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([for host c compiler])
    1:     AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
    1:     if test -z "$HOST_CC"; then
    1:         AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CC])
    1:     AC_MSG_CHECKING([for host c++ compiler])
    1:     AC_CHECK_PROGS(HOST_CXX, $HOST_CXX $CCC c++ g++ gcc CC cxx cc++ cl icc, "")
    1:     if test -z "$HOST_CXX"; then
    1:         AC_MSG_ERROR([no acceptable c++ compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CXX])
    1: 
    1:     if test -z "$HOST_CFLAGS"; then
    1:         HOST_CFLAGS="$CFLAGS"
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
    1:         HOST_CXXFLAGS="$CXXFLAGS"
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
    1:         HOST_LDFLAGS="$LDFLAGS"
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
37887:         HOST_AR_FLAGS="$AR_FLAGS"
37887:     fi
    1:     AC_CHECK_PROGS(HOST_RANLIB, $HOST_RANLIB ranlib, ranlib, :)
    1:     AC_CHECK_PROGS(HOST_AR, $HOST_AR ar, ar, :)
    1:     CC="$HOST_CC"
    1:     CFLAGS="$HOST_CFLAGS"
    1:     LDFLAGS="$HOST_LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);],
    1: 	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
    1: 
    1:     CC="$HOST_CXX"
    1:     CFLAGS="$HOST_CXXFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);],
    1: 	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
    1: 
    1:     CC=$_SAVE_CC
    1:     CFLAGS=$_SAVE_CFLAGS
    1:     LDFLAGS=$_SAVE_LDFLAGS
    1: 
    1:     AC_CHECK_PROGS(CC, $CC "${target_alias}-gcc" "${target}-gcc", :)
    1:     unset ac_cv_prog_CC
    1:     AC_PROG_CC
    1:     AC_CHECK_PROGS(CXX, $CXX "${target_alias}-g++" "${target}-g++", :)
    1:     unset ac_cv_prog_CXX
    1:     AC_PROG_CXX
    1: 
    1:     AC_CHECK_PROGS(RANLIB, $RANLIB "${target_alias}-ranlib" "${target}-ranlib", :)
    1:     AC_CHECK_PROGS(AR, $AR "${target_alias}-ar" "${target}-ar", :)
25869:     MOZ_PATH_PROGS(AS, $AS "${target_alias}-as" "${target}-as", :)
    1:     AC_CHECK_PROGS(LD, $LD "${target_alias}-ld" "${target}-ld", :)
    1:     AC_CHECK_PROGS(STRIP, $STRIP "${target_alias}-strip" "${target}-strip", :)
    1:     AC_CHECK_PROGS(WINDRES, $WINDRES "${target_alias}-windres" "${target}-windres", :)
    1:     AC_DEFINE(CROSS_COMPILE)
    1: else
    1:     AC_PROG_CC
87645:     case "$target" in
87645:     *-mingw*)
87645:       # Work around the conftest.exe access problem on Windows
87645:       sleep 1
87645:     esac
    1:     AC_PROG_CXX
    1:     AC_PROG_RANLIB
25869:     MOZ_PATH_PROGS(AS, $AS as, $CC)
    1:     AC_CHECK_PROGS(AR, ar, :)
    1:     AC_CHECK_PROGS(LD, ld, :)
    1:     AC_CHECK_PROGS(STRIP, strip, :)
    1:     AC_CHECK_PROGS(WINDRES, windres, :)
    1:     if test -z "$HOST_CC"; then
38023:         HOST_CC='$(CC)'
    1:     fi
    1:     if test -z "$HOST_CFLAGS"; then
38023:         HOST_CFLAGS='$(CFLAGS)'
    1:     fi
    1:     if test -z "$HOST_CXX"; then
38023:         HOST_CXX='$(CXX)'
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
38023:         HOST_CXXFLAGS='$(CXXFLAGS)'
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
38023:         HOST_LDFLAGS='$(LDFLAGS)'
    1:     fi
    1:     if test -z "$HOST_RANLIB"; then
38023:         HOST_RANLIB='$(RANLIB)'
    1:     fi
    1:     if test -z "$HOST_AR"; then
38023:         HOST_AR='$(AR)'
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
38023:         HOST_AR_FLAGS='$(AR_FLAGS)'
37887:     fi
    1: fi
    1: 
    1: GNU_AS=
    1: GNU_LD=
    1: GNU_CC=
    1: GNU_CXX=
    1: CC_VERSION='N/A'
    1: CXX_VERSION='N/A'
    1: if test "$GCC" = "yes"; then
    1:     GNU_CC=1
    1:     CC_VERSION=`$CC -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "$GXX" = "yes"; then
    1:     GNU_CXX=1
    1:     CXX_VERSION=`$CXX -v 2>&1 | grep 'gcc version'`
    1: fi
91639: if test "`echo | $AS -o conftest.out -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_AS=1
    1: fi
91639: rm -f conftest.out
    1: if test "`echo | $LD -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_LD=1
    1: fi
    1: if test "$GNU_CC"; then
    1:     if `$CC -print-prog-name=ld` -v 2>&1 | grep -c GNU >/dev/null; then
    1:         GCC_USE_GNU_LD=1
    1:     fi
    1: fi
    1: 
13232: INTEL_CC=
13232: INTEL_CXX=
13232: if test "$GCC" = yes; then
32016:    if test "`$CC -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CC=1
13232:    fi
13232: fi
13232: 
13232: if test "$GXX" = yes; then
13232:    if test "`$CXX -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CXX=1
13232:    fi
13232: fi
13232: 
72621: CLANG_CC=
72621: CLANG_CXX=
72621: if test "$GCC" = yes; then
72621:    if test "`$CC -v 2>&1 | grep -c 'clang version'`" != "0"; then
72621:      CLANG_CC=1
72621:    fi
72621: fi
72621: 
72621: if test "$GXX" = yes; then
72621:    if test "`$CXX -v 2>&1 | grep -c 'clang version'`" != "0"; then
72621:      CLANG_CXX=1
72621:    fi
72621: fi
72621: 
68662: dnl ========================================================
    1: dnl Special win32 checks
    1: dnl ========================================================
35745: WINVER=502
33397: dnl Target the Windows 7 SDK by default
33397: WINSDK_TARGETVER=601
38848: 
    1: MOZ_ARG_WITH_STRING(windows-version,
27567: [  --with-windows-version=WINSDK_TARGETVER
27567:                           Highest Windows version to target using this SDK
27567:                               601: Windows 7],
27567:   WINSDK_TARGETVER=$withval)
27567: 
27567: case "$WINSDK_TARGETVER" in
88305: 601)
27567:     MOZ_WINSDK_TARGETVER=0${WINSDK_TARGETVER}0000
    1:     ;;
55800: 
    1: *)
88305:     AC_MSG_ERROR([Invalid value for --with-windows-version ($WINSDK_TARGETVER), must be 601]);
    1:     ;;
55800: 
    1: esac
    1: 
    1: case "$target" in
68662: *-mingw*)
    1:     if test "$GCC" != "yes"; then
    1:         # Check to see if we are really running in a msvc environemnt
    1:         _WIN32_MSVC=1
    1:         AC_CHECK_PROGS(MIDL, midl)
    1: 
    1:         # Make sure compilers are valid
    1:         CFLAGS="$CFLAGS -TC -nologo"
    1:         CXXFLAGS="$CXXFLAGS -TP -nologo"
    1:         AC_LANG_SAVE
    1:         AC_LANG_C
    1:         AC_TRY_COMPILE([#include <stdio.h>],
    1:             [ printf("Hello World\n"); ],,
    1:             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
    1: 
    1:         AC_LANG_CPLUSPLUS
    1:         AC_TRY_COMPILE([#include <new.h>],
    1:             [ unsigned *test = new unsigned(42); ],,
    1:             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
    1:         AC_LANG_RESTORE
    1: 
    1:         changequote(,)
12601:         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
    1:         changequote([,])
    1: 
    1:         # Determine compiler version
12601:         CC_VERSION=`"${CC}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CC_MAJOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _CC_MINOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $2 }'`
12601:         _CC_RELEASE=`echo ${CC_VERSION} | $AWK -F\. '{ print $3 }'`
12601:         _CC_BUILD=`echo ${CC_VERSION} | $AWK -F\. '{ print $4 }'`
    1:         _MSC_VER=${_CC_MAJOR_VERSION}${_CC_MINOR_VERSION}
    1: 
12601:         CXX_VERSION=`"${CXX}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CXX_MAJOR_VERSION=`echo ${CXX_VERSION} | $AWK -F\. '{ print $1 }'`
    1: 
    1:         if test "$_CC_MAJOR_VERSION" != "$_CXX_MAJOR_VERSION"; then
    1:             AC_MSG_ERROR([The major versions of \$CC and \$CXX do not match.])
    1:         fi
58110: 
58110:         if test "$_CC_MAJOR_VERSION" = "14"; then
58110:             dnl Require VC8SP1 or newer.
58110:             dnl VC8 is 14.00.50727.42, VC8SP1 is 14.00.50727.762.
58110:             if test "$_CC_RELEASE" -lt 50727 -o \
58110:                     \( "$_CC_RELEASE" -eq 50727 -a "$_CC_BUILD" -lt 762 \); then
58110:               AC_MSG_ERROR([This version ($CC_VERSION) of the MSVC compiler is unsupported. You probably need to install Service Pack 1 of Visual Studio 2005. See https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
58110:             fi
58110: 
    1:             _CC_SUITE=8
    1:             AC_DEFINE(_CRT_SECURE_NO_DEPRECATE)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_DEPRECATE)
    1:         elif test "$_CC_MAJOR_VERSION" = "15"; then
    1:             _CC_SUITE=9
    1:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
35725:         elif test "$_CC_MAJOR_VERSION" = "16"; then
35725:             _CC_SUITE=10
35725:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
35725:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
80182:         elif test "$_CC_MAJOR_VERSION" = "17"; then
80182:             _CC_SUITE=11
80182:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
80182:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
    1:         else
58110:             AC_MSG_ERROR([This version ($CC_VERSION) of the MSVC compiler is unsupported. See https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
    1:         fi
    1: 
    1:         _MOZ_RTTI_FLAGS_ON='-GR'
    1:         _MOZ_RTTI_FLAGS_OFF='-GR-'
60281:         AC_DEFINE(HAVE_SEH_EXCEPTIONS)
    1: 
    1:         if test -n "$WIN32_REDIST_DIR"; then
68572:           if test ! -d "$WIN32_REDIST_DIR"; then
68572:             AC_MSG_ERROR([Invalid Win32 Redist directory: ${WIN32_REDIST_DIR}])
68572:           fi
    1:           WIN32_REDIST_DIR=`cd "$WIN32_REDIST_DIR" && pwd`
    1:         fi
    1: 
58110:         dnl Ensure that mt.exe is 'Microsoft (R) Manifest Tool',
58110:         dnl not something else like "magnetic tape manipulation utility".
58110:         MSMT_TOOL=`mt 2>&1|grep 'Microsoft (R) Manifest Tool'`
58110:         if test -z "$MSMT_TOOL"; then
58110:           AC_MSG_ERROR([Microsoft (R) Manifest Tool must be in your \$PATH.])
58110:         fi
58110: 
  735:         changequote(,)
  735:         _MSMT_VER_FILTER='s|.* \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*|\1|p'
  735:         changequote([,])
  735:         MSMANIFEST_TOOL_VERSION=`echo ${MSMT_TOOL}|sed -ne "$_MSMT_VER_FILTER"`
  735:         if test -z "$MSMANIFEST_TOOL_VERSION"; then
    1:           AC_MSG_WARN([Unknown version of the Microsoft (R) Manifest Tool.])
    1:         fi
58110: 
    1:         MSMANIFEST_TOOL=1
    1:         unset MSMT_TOOL
    1: 
    1:         # Check linker version
12601:         _LD_FULL_VERSION=`"${LD}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _LD_MAJOR_VERSION=`echo ${_LD_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         if test "$_LD_MAJOR_VERSION" != "$_CC_SUITE"; then
    1:             AC_MSG_ERROR([The linker major version, $_LD_FULL_VERSION,  does not match the compiler suite version, $_CC_SUITE.])
    1:         fi
58110: 
    1:         INCREMENTAL_LINKER=1
    1: 
    1:         # Check midl version
12601:         _MIDL_FULL_VERSION=`"${MIDL}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _MIDL_MAJOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _MIDL_MINOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:         _MIDL_REV_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:         # Add flags if necessary
    1:         AC_MSG_CHECKING([for midl flags])
24005:         case "$target" in
24005:         i*86-*)
24005:             if test \( "$_MIDL_MAJOR_VERSION" = "7" -a "$_MIDL_MINOR_VERSION" = "00" -a "$_MIDL_REV_VERSION" = "0499" \); then
24005:                 # MIDL version 7.00.0499 defaults /env win64 on x64 platforms.
24005:                 # MIDL version 7.00.0500 or later has no problem.
24005:                 MIDL_FLAGS="${MIDL_FLAGS} -env win32"
24005:                 AC_MSG_RESULT([need -env win32])
24005:             else
    1:                 AC_MSG_RESULT([none needed])
    1:             fi
24005:             ;;
33494:         x86_64-*)
33494:             MIDL_FLAGS="${MIDL_FLAGS} -env x64"
33494:             ;;
24005:         *)
23433:             AC_MSG_RESULT([none needed])
24005:             ;;
24005:         esac
    1: 
25340:         # Identify which version of the SDK we're building with
25340:         # Windows Server 2008 and newer SDKs have WinSDKVer.h, get the version
25340:         # from there
63478:         MOZ_CHECK_HEADERS([winsdkver.h])
25340:         if test "$ac_cv_header_winsdkver_h" = "yes"; then
25340:             # Get the highest _WIN32_WINNT and NTDDI versions supported
25340:             # Take the higher of the two
25340:             # This is done because the Windows 7 beta SDK reports its
25340:             # NTDDI_MAXVER to be 0x06000100 instead of 0x06010000, as it should
25340:             AC_CACHE_CHECK(for highest Windows version supported by this SDK,
25340:                            ac_cv_winsdk_maxver,
25340:                            [cat > conftest.h <<EOF
25340: #include <winsdkver.h>
25340: #include <sdkddkver.h>
25340: 
25340: #if (NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER) > NTDDI_MAXVER)
25340: #define WINSDK_MAXVER NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER)
25340: #else
25340: #define WINSDK_MAXVER NTDDI_MAXVER
25340: #endif
25340: 
25340: WINSDK_MAXVER
25340: EOF
25340:                             ac_cv_winsdk_maxver=`$CPP conftest.h 2>/dev/null | tail -n1`
25340:                             rm -f conftest.h
25340:                            ])
25340:             MOZ_WINSDK_MAXVER=${ac_cv_winsdk_maxver}
25340:         else
88305:             # Any SDK which doesn't have WinSDKVer.h is too old.
88305:             AC_MSG_ERROR([Your SDK does not have WinSDKVer.h. It is probably too old. Please upgrade to a newer SDK or try running the Windows SDK Configuration Tool and selecting a newer SDK. See https://developer.mozilla.org/En/Windows_SDK_versions for more details on fixing this.])
25340:         fi
25340: 
    1:         unset _MSVC_VER_FILTER
    1: 
41151:         AC_CACHE_CHECK(for std::_Throw, ac_cv_have_std__Throw,
41151:             [
41151:                 AC_LANG_SAVE
41151:                 AC_LANG_CPLUSPLUS
41151:                 _SAVE_CXXFLAGS="$CXXFLAGS"
41151:                 CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41151:                 AC_TRY_COMPILE([#include <exception>],
41151:                             [std::_Throw(std::exception()); return 0;],
41151:                             ac_cv_have_std__Throw="yes",
41151:                             ac_cv_have_std__Throw="no")
41151:                 CXXFLAGS="$_SAVE_CXXFLAGS"
41151:                 AC_LANG_RESTORE
41151:             ])
41151: 
58494:         if test "$ac_cv_have_std__Throw" = "yes"; then
41151:             AC_CACHE_CHECK(for |class __declspec(dllimport) exception| bug,
41151:                            ac_cv_have_dllimport_exception_bug,
41151:                 [
41151:                     AC_LANG_SAVE
41151:                     AC_LANG_CPLUSPLUS
41151:                     _SAVE_CXXFLAGS="$CXXFLAGS"
41151:                     CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41151:                     AC_TRY_LINK([#include <vector>],
41151:                                 [std::vector<int> v; return v.at(1);],
41151:                                 ac_cv_have_dllimport_exception_bug="no",
41151:                                 ac_cv_have_dllimport_exception_bug="yes")
41151:                     CXXFLAGS="$_SAVE_CXXFLAGS"
41151:                     AC_LANG_RESTORE
41151:                 ])
41151:             if test "$ac_cv_have_dllimport_exception_bug" = "no"; then
41511:                 WRAP_STL_INCLUDES=1
41511:                 MOZ_MSVC_STL_WRAP__Throw=1
41511:                 AC_DEFINE(MOZ_MSVC_STL_WRAP__Throw)
41511:             fi
41511:         else
41511:             AC_CACHE_CHECK(for overridable _RAISE,
41511:                            ac_cv_have__RAISE,
41511:                 [
41511:                     AC_LANG_SAVE
41511:                     AC_LANG_CPLUSPLUS
41511:                     _SAVE_CXXFLAGS="$CXXFLAGS"
41511:                     CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41511:                     AC_TRY_COMPILE([#include <xstddef>
41511:                                     #undef _RAISE
41511:                                     #define _RAISE(x) externallyDefinedFunction((x).what())
41511:                                     #include <vector>
41511:                                    ],
41511:                                    [std::vector<int> v; return v.at(1);],
41511:                                    ac_cv_have__RAISE="no",
41511:                                    ac_cv_have__RAISE="yes")
41511:                     CXXFLAGS="$_SAVE_CXXFLAGS"
41511:                     AC_LANG_RESTORE
41511:                 ])
41511:             if test "$ac_cv_have__RAISE" = "yes"; then
41511:                 WRAP_STL_INCLUDES=1
41511:                 MOZ_MSVC_STL_WRAP__RAISE=1
41511:                 AC_DEFINE(MOZ_MSVC_STL_WRAP__RAISE)
41511:             else
41511:                 AC_MSG_ERROR([Gecko exception wrapping doesn't understand your your MSVC/SDK.  Please file a bug describing this error and your build configuration.])
41511:             fi
41511:         fi
41511: 
41511:         if test "$WRAP_STL_INCLUDES" = "1"; then
41151:             STL_FLAGS='-D_HAS_EXCEPTIONS=0 -I$(DIST)/stl_wrappers'
41151:         fi
    1:     else
    1:         # Check w32api version
    1:         _W32API_MAJOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _W32API_MINOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $2 }'`
    1:         AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
    1:         AC_TRY_COMPILE([#include <w32api.h>],
    1:             #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
    1:                 (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
    1:                  __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
    1:                 #error "test failed."
    1:             #endif
    1:             , [ res=yes ], [ res=no ])
    1:         AC_MSG_RESULT([$res])
    1:         if test "$res" != "yes"; then
    1:             AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
    1:         fi
    1:         # Check windres version
    1:         AC_MSG_CHECKING([for windres version >= $WINDRES_VERSION])
    1:         _WINDRES_VERSION=`${WINDRES} --version 2>&1 | grep -i windres 2>/dev/null | $AWK '{ print $3 }'`
    1:         AC_MSG_RESULT([$_WINDRES_VERSION])
    1:         _WINDRES_MAJOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _WINDRES_MINOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         _WINDRES_RELEASE_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         WINDRES_MAJOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         WINDRES_MINOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         WINDRES_RELEASE_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         if test "$_WINDRES_MAJOR_VERSION" -lt "$WINDRES_MAJOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -lt "$WINDRES_MINOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -eq "$WINDRES_MINOR_VERSION" -a \
    1:                 "$_WINDRES_RELEASE_VERSION" -lt "$WINDRES_RELEASE_VERSION"
    1:         then
    1:             AC_MSG_ERROR([windres version $WINDRES_VERSION or higher is required to build.])
    1:         fi
25340: 
73782:         MOZ_WINSDK_MAXVER=0x06010000
    1:     fi # !GNU_CC
    1: 
    1:     AC_DEFINE_UNQUOTED(WINVER,0x$WINVER)
    1:     AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x$WINVER)
90997:     # Require OS features provided by IE 6.0 SP2 (XP SP2)
90997:     AC_DEFINE_UNQUOTED(_WIN32_IE,0x0603)
27567: 
27567:     # If the maximum version supported by this SDK is lower than the target
27567:     # version, error out
27567:     AC_MSG_CHECKING([for Windows SDK being recent enough])
27567:     if $PERL -e "exit(0x$MOZ_WINSDK_TARGETVER > $MOZ_WINSDK_MAXVER)"; then
27567:         AC_MSG_RESULT("yes")
27567:     else
27567:         AC_MSG_RESULT("no")
48094:         AC_MSG_ERROR([You are targeting Windows version 0x$MOZ_WINSDK_TARGETVER, but your SDK only supports up to version $MOZ_WINSDK_MAXVER. Install and use an updated SDK, or target a lower version using --with-windows-version. Alternatively, try running the Windows SDK Configuration Tool and selecting a newer SDK. See https://developer.mozilla.org/En/Windows_SDK_versions for more details on fixing this.])
27567:     fi
27567: 
27567:     AC_DEFINE_UNQUOTED(MOZ_WINSDK_TARGETVER,0x$MOZ_WINSDK_TARGETVER)
27958:     # Definitions matching sdkddkver.h
27958:     AC_DEFINE_UNQUOTED(MOZ_NTDDI_WIN7, 0x06010000)
    1:     ;;
    1: esac
    1: 
    1: AC_PROG_CPP
    1: AC_PROG_CXXCPP
    1: 
14341: if test -n "$_WIN32_MSVC"; then
14341:     SKIP_PATH_CHECKS=1
14341:     SKIP_COMPILER_CHECKS=1
14341:     SKIP_LIBRARY_CHECKS=1
23834: 
23834:     # Since we're skipping compiler and library checks, hard-code
23834:     # some facts here.
23834:     AC_DEFINE(HAVE_IO_H)
23834:     AC_DEFINE(HAVE_SETBUF)
23834:     AC_DEFINE(HAVE_ISATTY)
14341: fi
14341: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MIDL_FLAGS)
    1: AC_SUBST(_MSC_VER)
    1: 
    1: AC_SUBST(GNU_AS)
    1: AC_SUBST(GNU_LD)
    1: AC_SUBST(GNU_CC)
    1: AC_SUBST(GNU_CXX)
13232: AC_SUBST(INTEL_CC)
13232: AC_SUBST(INTEL_CXX)
72621: AC_SUBST(CLANG_CC)
72621: AC_SUBST(CLANG_CXX)
    1: 
40161: AC_SUBST(STL_FLAGS)
40161: AC_SUBST(WRAP_STL_INCLUDES)
41511: AC_SUBST(MOZ_MSVC_STL_WRAP__Throw)
41511: AC_SUBST(MOZ_MSVC_STL_WRAP__RAISE)
40161: 
    1: dnl ========================================================
    1: dnl Checks for programs.
    1: dnl ========================================================
    1: AC_PROG_INSTALL
    1: AC_PROG_LN_S
    1: 
    1: if test -z "$TINDERBOX_SKIP_PERL_VERSION_CHECK"; then
    1: AC_MSG_CHECKING([for minimum required perl version >= $PERL_VERSION])
    1: _perl_version=`PERL_VERSION=$PERL_VERSION $PERL -e 'print "$]"; if ($] >= $ENV{PERL_VERSION}) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: AC_MSG_RESULT([$_perl_version])
    1: 
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_ERROR([Perl $PERL_VERSION or higher is required.])
    1: fi
    1: fi
    1: 
    1: AC_MSG_CHECKING([for full perl installation])
    1: _perl_archlib=`$PERL -e 'use Config; if ( -d $Config{archlib} ) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_RESULT([no])
    1:     AC_MSG_ERROR([Cannot find Config.pm or \$Config{archlib}.  A full perl installation is required.])
    1: else
    1:     AC_MSG_RESULT([yes])
    1: fi
    1: 
56983: MOZ_PATH_PROGS(PYTHON, $PYTHON python2.7 python2.6 python2.5 python)
    1: if test -z "$PYTHON"; then
    1:     AC_MSG_ERROR([python was not found in \$PATH])
    1: fi
    1: 
90791: MOZ_ARG_WITH_BOOL(system-ply,
90791: [  --with-system-ply       Use system installed python ply library],
90791:     [if $PYTHON -c 'import ply' 2>&5; then
90791:          MOZ_SYSTEM_PLY=1
90791:      else
90791:          AC_MSG_ERROR([python ply library is not found but --with-system-ply was requested])
90791:      fi])
90791: 
90791: AC_SUBST(MOZ_SYSTEM_PLY)
90791: 
 3564: if test -z "$COMPILE_ENVIRONMENT"; then
 3564:     NSINSTALL_BIN='$(PYTHON) $(topsrcdir)/config/nsinstall.py'
 3564: fi
 3564: AC_SUBST(NSINSTALL_BIN)
 3564: 
25869: MOZ_PATH_PROG(DOXYGEN, doxygen, :)
25869: MOZ_PATH_PROG(AUTOCONF, autoconf, :)
74078: MOZ_PATH_PROGS(UNZIP, unzip)
74078: if test -z "$UNZIP" -o "$UNZIP" = ":"; then
74078:     AC_MSG_ERROR([unzip not found in \$PATH])
74078: fi
25869: MOZ_PATH_PROGS(ZIP, zip)
47975: if test -z "$ZIP" -o "$ZIP" = ":"; then
    1:     AC_MSG_ERROR([zip not found in \$PATH])
    1: fi
25869: MOZ_PATH_PROG(SYSTEM_MAKEDEPEND, makedepend)
25869: MOZ_PATH_PROG(XARGS, xargs)
47975: if test -z "$XARGS" -o "$XARGS" = ":"; then
    1:     AC_MSG_ERROR([xargs not found in \$PATH .])
    1: fi
    1: 
64447: MOZ_PATH_PROG(RPMBUILD, rpmbuild, :)
64447: AC_SUBST(RPMBUILD)
64447: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: dnl ========================================================
    1: dnl = Mac OS X toolchain support
    1: dnl ========================================================
    1: 
    1: case "$target_os" in
    1: darwin*)
    1:     dnl Current known valid versions for GCC_VERSION are 2.95.2 3.1 3.3 4.0.
    1:     dnl 4.0 identifies itself as 4.0.x, so strip the decidecimal for
    1:     dnl the environment and includedir purposes (when using an SDK, below),
    1:     dnl but remember the full version number for the libdir (SDK).
    1:     changequote(,)
    1:     GCC_VERSION_FULL=`echo $CXX_VERSION | $PERL -pe 's/^.*gcc version ([^ ]*).*/$1/'`
    1:     GCC_VERSION=`echo $GCC_VERSION_FULL | $PERL -pe '(split(/\./))[0]>=4&&s/(^\d*\.\d*).*/$1/;'`
    1:     changequote([,])
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:         dnl Bug 280479, but this keeps popping up in bug 292530 too because
    1:         dnl 4.0.0/4061 is the default compiler in Tiger.
    1:         changequote(,)
    1:         GCC_BUILD=`echo $CXX_VERSION | $PERL -pe 's/^.*build ([^ )]*).*/$1/'`
    1:         changequote([,])
    1:         if test "$GCC_BUILD" = "4061" ; then
    1:             AC_MSG_ERROR([You are attempting to use Apple gcc 4.0 build 4061.
    1: This compiler was supplied with Xcode 2.0, and contains bugs that prevent it
 3572: from building Mozilla. Upgrade to Xcode 2.1 or later.])
    1:         fi
    1:     fi
    1: 
    1:     dnl xcodebuild needs GCC_VERSION defined in the environment, since it
    1:     dnl doesn't respect the CC/CXX setting.  With GCC_VERSION set, it will use
    1:     dnl /usr/bin/g(cc|++)-$GCC_VERSION.
25869:     MOZ_PATH_PROGS(PBBUILD, pbbuild xcodebuild pbxbuild)
    1: 
    1:     dnl sdp was formerly in /Developer/Tools.  As of Mac OS X 10.4 (Darwin 8),
    1:     dnl it has moved into /usr/bin.
25869:     MOZ_PATH_PROG(SDP, sdp, :, [$PATH:/usr/bin:/Developer/Tools])
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(GCC_VERSION)
    1: 
    1: dnl The universal machinery sets UNIVERSAL_BINARY to inform packager.mk
78434: dnl that a universal binary is being produced and MOZ_CAN_RUN_PROGRAMS
78434: dnl when we can run target binaries.
    1: AC_SUBST(UNIVERSAL_BINARY)
78434: AC_SUBST(MOZ_CAN_RUN_PROGRAMS)
    1: 
    1: dnl ========================================================
 8484: dnl Check for MacOS deployment target version
 8484: dnl ========================================================
 8484: 
 8484: MOZ_ARG_ENABLE_STRING(macos-target,
32504:                       [  --enable-macos-target=VER (default=10.5)
 8484:                           Set the minimum MacOS version needed at runtime],
 8484:                       [_MACOSX_DEPLOYMENT_TARGET=$enableval])
 8484: 
 8484: case "$target" in
 8484: *-darwin*)
 8484:     if test -n "$_MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl Use the specified value
 8484:         export MACOSX_DEPLOYMENT_TARGET=$_MACOSX_DEPLOYMENT_TARGET
51143:     else
 8484:         dnl No value specified on the command line or in the environment,
28234:         dnl use architecture minimum.
51143:         case "${target_cpu}" in
51143:           i*86)
51143:             export MACOSX_DEPLOYMENT_TARGET=10.5
51143:             ;;
51143:           x86_64)
51143:             export MACOSX_DEPLOYMENT_TARGET=10.6
51143:             ;;
51143:         esac
 8484:     fi
 8484:     ;;
 8484: esac
 8484: 
 8484: AC_SUBST(MACOSX_DEPLOYMENT_TARGET)
 8484: 
 8484: dnl ========================================================
    1: dnl = Mac OS X SDK support
    1: dnl ========================================================
    1: MACOS_SDK_DIR=
    1: NEXT_ROOT=
    1: MOZ_ARG_WITH_STRING(macos-sdk,
    1: [  --with-macos-sdk=dir    Location of platform SDK to use (Mac OS X only)],
    1:     MACOS_SDK_DIR=$withval)
    1: 
    1: dnl MACOS_SDK_DIR will be set to the SDK location whenever one is in use.
    1: dnl NEXT_ROOT will be set and exported only if it's needed.
    1: AC_SUBST(MACOS_SDK_DIR)
    1: AC_SUBST(NEXT_ROOT)
    1: 
    1: if test "$MACOS_SDK_DIR"; then
    1:   dnl Sync this section with the ones in NSPR and NSS.
    1:   dnl Changes to the cross environment here need to be accounted for in
    1:   dnl the libIDL checks (below) and xpidl build.
    1: 
    1:   if test ! -d "$MACOS_SDK_DIR"; then
    1:     AC_MSG_ERROR([SDK not found.  When using --with-macos-sdk, you must
    1: specify a valid SDK.  SDKs are installed when the optional cross-development
    1: tools are selected during the Xcode/Developer Tools installation.])
    1:   fi
    1: 
    1:   GCC_VERSION_MAJOR=`echo $GCC_VERSION_FULL | $PERL -pe 's/(^\d*).*/$1/;'`
    1:   if test "$GCC_VERSION_MAJOR" -lt "4" ; then
31305:     AC_MSG_ERROR([You need to upgrade the compiler version to 4.x])
31305:   else
    1:     CFLAGS="$CFLAGS -isysroot ${MACOS_SDK_DIR}"
    1:     CXXFLAGS="$CXXFLAGS -isysroot ${MACOS_SDK_DIR}"
    1: 
63478:     dnl CPP/CXXCPP needs to be set for MOZ_CHECK_HEADER.
    1:     CPP="$CPP -isysroot ${MACOS_SDK_DIR}"
    1:     CXXCPP="$CXXCPP -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:       dnl If gcc >= 4.0, we're guaranteed to be on Tiger, which has an ld
    1:       dnl that supports -syslibroot.  Don't set NEXT_ROOT because it will
    1:       dnl be ignored and cause warnings when -syslibroot is specified.
    1:       dnl gcc 4.0.1 will pass -syslibroot to ld automatically based on
    1:       dnl the -isysroot it receives, so this is only needed with 4.0.0.
    1:       LDFLAGS="$LDFLAGS -Wl,-syslibroot,${MACOS_SDK_DIR}"
    1:     fi
    1:   fi
    1: 
    1:   AC_LANG_SAVE
    1:   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
    1:   AC_LANG_CPLUSPLUS
63486:   AC_TRY_COMPILE([#include <new>],[],
    1:    result=yes,
    1:    result=no)
    1:   AC_LANG_RESTORE
    1:   AC_MSG_RESULT($result)
    1: 
    1:   if test "$result" = "no" ; then
    1:     AC_MSG_ERROR([The selected compiler and Mac OS X SDK are incompatible.])
    1:   fi
    1: fi
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
64038: dnl clang prior to 2.9 (including Xcode 4) does not support all the
64038: dnl constructs required by the libtheora inline asm. This is used to
64038: dnl detect and disable it
81636: AC_MSG_CHECKING([whether the C compiler is clang older than version 2.9])
64038: AC_LANG_SAVE
64038: AC_LANG_C
64038: AC_TRY_COMPILE([
64038: #if defined(__clang__)
64038: # if __clang_major__<2 || (__clang_major__==2 && __clang_minor__<9)
64038: #  error "clang older than 2.9 detected"
64038: # endif
64038: #endif
64038:                ],
64038:                [],
81636:                result="no",
81636:                result="yes")
64038: AC_LANG_RESTORE
81636: AC_MSG_RESULT([$result])
81636: if test "$result" = "yes"; then
81636:   MOZ_NO_THEORA_ASM=1
81636: fi
81636: dnl XCode 4.2 also shipped an llvm-gcc which couldn't compile
81636: dnl the libtheora inline asm.
81636: AC_MSG_CHECKING([bad gcc versions])
81636: if `$CC --version | grep -q "Apple Inc. build 5658"`; then
81636:   AC_MSG_RESULT([Apple build 5658])
81636:   MOZ_NO_THEORA_ASM=1
81636: else
81636:   AC_MSG_RESULT([we're ok])
81636: fi
81636: 
81636: AC_SUBST(MOZ_NO_THEORA_ASM)
81636: 
81636: if test "x$MOZ_NO_THEORA_ASM" = x1; then
81636:   AC_MSG_WARN([Disabling libtheora inline assembly])
81636: fi
64038: 
26777: if test -n "$MAKE"; then
26777:   if test `echo $MAKE | grep -c make.py` != 1; then
26777:      NOT_PYMAKE=$MAKE
26777:   fi
26777: fi
26777: 
    1: case "$host_os" in
63450: mingw*)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE make gmake, :)
    1:     ;;
    1: *)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE gmake make, :)
    1:     ;;
    1: esac
26777: if test "$GMAKE" = ":"; then
26777:    AC_MSG_ERROR([GNU make not found])
26777: fi
26777: AC_SUBST(GMAKE)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: AC_PATH_XTRA
    1: 
    1: XCFLAGS="$X_CFLAGS"
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl set the defaults first
    1: dnl ========================================================
    1: AS_BIN=$AS
    1: AR_LIST='$(AR) t'
    1: AR_EXTRACT='$(AR) x'
    1: AR_DELETE='$(AR) d'
    1: AS='$(CC)'
    1: AS_DASH_C_FLAG='-c'
    1: DLL_PREFIX=lib
    1: LIB_PREFIX=lib
    1: DLL_SUFFIX=.so
    1: OBJ_SUFFIX=o
    1: LIB_SUFFIX=a
    1: ASM_SUFFIX=s
    1: IMPORT_LIB_SUFFIX=
    1: TARGET_MD_ARCH=unix
    1: DIRENT_INO=d_ino
    1: WIN_TOP_SRC=
    1: MOZ_USER_DIR=".mozilla"
    1: 
    1: MOZ_JPEG_CFLAGS=
80488: MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,mozjpeg,$(DEPTH)/media/libjpeg)'
    1: MOZ_ZLIB_CFLAGS=
    1: MOZ_ZLIB_LIBS='$(call EXPAND_LIBNAME_PATH,mozz,$(DEPTH)/modules/zlib/src)'
12936: MOZ_BZ2_CFLAGS=
12936: MOZ_BZ2_LIBS='$(call EXPAND_LIBNAME_PATH,bz2,$(DEPTH)/modules/libbz2/src)'
    1: MOZ_PNG_CFLAGS=
80489: MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,mozpng,$(DEPTH)/media/libpng)'
    1: 
88641: MOZ_JS_STATIC_LIBS='$(call EXPAND_LIBNAME_PATH,js_static,$(LIBXUL_DIST)/lib)'
63472: MOZ_JS_SHARED_LIBS='$(call EXPAND_LIBNAME_PATH,mozjs,$(LIBXUL_DIST)/lib)'
38924: DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/bin -lxpcom -lxpcom_core -lmozalloc'
22757: MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(prefix)/lib'
38924: XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/bin -lxpcom -lmozalloc'
    1: LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) -lxul'
    1: XPCOM_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue_s.$(LIB_SUFFIX) $(XPCOM_FROZEN_LDOPTS)'
    1: XPCOM_STANDALONE_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue.$(LIB_SUFFIX)'
    1: 
27353: MOZ_FS_LAYOUT=unix
27353: 
    1: MOZ_COMPONENT_NSPR_LIBS='-L$(LIBXUL_DIST)/bin $(NSPR_LIBS)'
    1: 
    1: USE_DEPENDENT_LIBS=1
    1: 
    1: _PLATFORM_DEFAULT_TOOLKIT=cairo-gtk2
    1: 
    1: if test -n "$CROSS_COMPILE"; then
    1:     OS_TARGET="${target_os}"
    1:     OS_ARCH=`echo $target_os | sed -e 's|/|_|g'`
    1:     OS_RELEASE=
    1:     case "${target_os}" in
 1785:         linux*)       OS_ARCH=Linux OS_TARGET=Linux ;;
12932:         kfreebsd*-gnu) OS_ARCH=GNU_kFreeBSD OS_TARGET=GNU_kFreeBSD ;;
41013:         gnu*)         OS_ARCH=GNU ;;
    1:         solaris*)     OS_ARCH=SunOS OS_RELEASE=5 ;;
78145:         mingw*)       OS_ARCH=WINNT OS_TARGET=WINNT ;;
    1:         darwin*)      OS_ARCH=Darwin OS_TARGET=Darwin ;;
    1:     esac
42466:     case "${target}" in
70914:         *-android*|*-linuxandroid*) OS_ARCH=Linux OS_TARGET=Android ;;
42466:     esac
    1: else
    1:     OS_TARGET=`uname -s`
    1:     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
    1:     OS_RELEASE=`uname -r`
 3488: fi
 3488: 
 3488: # Before this used `uname -m` when not cross compiling
 3488: # but that breaks when you have a 64 bit kernel with a 32 bit userland.
 3488: OS_TEST="${target_cpu}"
 3488: 
    1: HOST_OS_ARCH=`echo $host_os | sed -e 's|/|_|g'`
    1: 
    1: #######################################################################
    1: # Master "Core Components" macros for getting the OS target           #
    1: #######################################################################
    1: 
    1: #
    1: # If OS_TARGET is not specified, it defaults to $(OS_ARCH), i.e., no
    1: # cross-compilation.
    1: #
    1: 
    1: #
    1: # Define and override various archtecture-specific variables, including
    1: # HOST_OS_ARCH
    1: # OS_ARCH
    1: # OS_TEST
    1: # OS_TARGET
    1: # OS_RELEASE
    1: # OS_MINOR_RELEASE
    1: #
    1: 
    1: case "$HOST_OS_ARCH" in
63450: mingw*)
    1:     HOST_OS_ARCH=WINNT
    1:     ;;
39658: darwin*)
39658:     HOST_OS_ARCH=Darwin
39658:     ;;
    1: linux*)
    1:     HOST_OS_ARCH=Linux
    1:     ;;
    1: solaris*)
    1:     HOST_OS_ARCH=SunOS
24783:     SOLARIS_SUNPRO_CC=
24783:     SOLARIS_SUNPRO_CXX=
24783:     if test -z "$GNU_CC"; then
27517:         if test "`$CC -V 2>&1 | egrep -c 'Sun.*C '`" != "0"; then
24783:             SOLARIS_SUNPRO_CC=1
24783:        fi
24783:     fi
24783: 
24783:     if test -z "$GNU_CXX"; then
27517:        if test "`$CXX -V 2>&1 | egrep -c 'Sun.*C\+\+ '`" != "0"; then
24783:            SOLARIS_SUNPRO_CXX=1
24783:        fi
24783:     fi
24783:     AC_SUBST(SOLARIS_SUNPRO_CC)
24783:     AC_SUBST(SOLARIS_SUNPRO_CXX)
    1:     ;;
    1: BSD_386)
    1:     HOST_OS_ARCH=BSD
    1:     ;;
    1: OS_2)
    1:     HOST_OS_ARCH=OS2
    1:     ;;
    1: esac
    1: 
    1: case "$OS_ARCH" in
    1: WINNT)
35674:     if test -z "$CROSS_COMPILE" ; then
    1:         OS_TEST=`uname -p`
35674:     fi
    1:     ;;
    1: Windows_NT)
    1: #
    1: # If uname -s returns "Windows_NT", we assume that we are using
    1: # the uname.exe in MKS toolkit.
    1: #
    1: # The -r option of MKS uname only returns the major version number.
    1: # So we need to use its -v option to get the minor version number.
    1: # Moreover, it doesn't have the -p option, so we need to use uname -m.
    1: #
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     OS_MINOR_RELEASE=`uname -v`
    1:     if test "$OS_MINOR_RELEASE" = "00"; then
    1:         OS_MINOR_RELEASE=0
    1:     fi
    1:     OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    1:     ;;
63450: MINGW*_NT*)
    1: #
    1: # If uname -s returns MINGW32_NT-5.1, we assume that we are using
    1: # the uname.exe in the MSYS tools.
    1: #
    1:     OS_RELEASE=`expr $OS_ARCH : '.*NT-\(.*\)'`
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     ;;
    1: AIX)
    1:     OS_RELEASE=`uname -v`.`uname -r`
20692:     OS_TEST=${target_cpu}
    1:     ;;
    1: BSD_386)
    1:     OS_ARCH=BSD
    1:     ;;
    1: OS_2)
    1:     OS_ARCH=OS2
    1:     OS_TARGET=OS2
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: Darwin)
    1:     case "${target_cpu}" in
    1:     powerpc*)
    1:         OS_TEST=ppc
    1:         ;;
    1:     i*86*)
    1:         OS_TEST=i386
    1:         ;;
22679:     x86_64)
22679:         OS_TEST=x86_64
22679:         ;;
    1:     *)
    1:         if test -z "$CROSS_COMPILE" ; then
    1:             OS_TEST=`uname -p`
    1:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: esac
    1: 
    1: # Only set CPU_ARCH if we recognize the value of OS_TEST
    1: 
    1: case "$OS_TEST" in
    1: *86 | i86pc)
    1:     CPU_ARCH=x86
    1:     ;;
    1: 
33472: powerpc64 | ppc64)
33472:     CPU_ARCH=ppc64
33472:     ;;
33472: 
33472: powerpc | ppc | rs6000)
    1:     CPU_ARCH=ppc
    1:     ;;
    1: 
    1: Alpha | alpha | ALPHA)
    1:     CPU_ARCH=Alpha
    1:     ;;
    1: 
33472: s390)
33472:     CPU_ARCH=s390
33472:     ;;
33472: 
33472: s390x)
33472:     CPU_ARCH=s390x
33472:     ;;
33472: 
15835: hppa* | parisc)
15835:     CPU_ARCH=hppa
15835:     ;;
15835: 
13790: sun4u | sparc*)
    1:     CPU_ARCH=sparc
    1:     ;;
    1: 
13790: x86_64 | ia64)
    1:     CPU_ARCH="$OS_TEST"
    1:     ;;
31004: 
47320: arm*)
41043:     CPU_ARCH=arm
31004:     ;;
60071: 
60071: mips|mipsel)
60071:     CPU_ARCH="mips"
60071:     ;;
    1: esac
    1: 
    1: if test -z "$OS_TARGET"; then
    1:     OS_TARGET=$OS_ARCH
    1: fi
    1: OS_CONFIG="${OS_TARGET}${OS_RELEASE}"
    1: 
60422: dnl Set INTEL_ARCHITECTURE if we're compiling for x86-32 or x86-64.
60422: dnl ===============================================================
60422: INTEL_ARCHITECTURE=
60422: case "$OS_TEST" in
60422:     x86_64|i?86)
60422:       INTEL_ARCHITECTURE=1
60422: esac
60422: 
93446: dnl Configure platform-specific CPU architecture compiler options.
93446: dnl ==============================================================
93446: MOZ_ARCH_OPTS
81109: 
    1: dnl =================================================================
    1: dnl Set up and test static assertion macros used to avoid AC_TRY_RUN,
    1: dnl which is bad when cross compiling.
    1: dnl =================================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: configure_static_assert_macros='
    1: #define CONFIGURE_STATIC_ASSERT(condition) CONFIGURE_STATIC_ASSERT_IMPL(condition, __LINE__)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL(condition, line) CONFIGURE_STATIC_ASSERT_IMPL2(condition, line)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL2(condition, line) typedef int static_assert_line_##line[(condition) ? 1 : -1]
    1: '
    1: 
    1: dnl test that the macros actually work:
    1: AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
    1: AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
    1:  [AC_LANG_SAVE
    1:   AC_LANG_C
    1:   ac_cv_static_assertion_macros_work="yes"
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_RESTORE
    1:  ])
    1: AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
    1: if test "$ac_cv_static_assertion_macros_work" = "no"; then
    1:     AC_MSG_ERROR([Compiler cannot compile macros used in autoconf tests.])
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
82149: dnl Android libstdc++, placed here so it can use MOZ_ARCH
82149: dnl computed above.
82149: dnl ========================================================
82149: 
82149: if test "$OS_TARGET" = "Android"; then
82149:     case "${CPU_ARCH}-${MOZ_ARCH}" in
82149:     arm-armv7*)
82149:       ANDROID_CPU_ARCH=armeabi-v7a
82149:       ;;
82149:     arm-*)
82149:       ANDROID_CPU_ARCH=armeabi
82149:       ;;
82149:     x86-*)
82149:       ANDROID_CPU_ARCH=x86
82149:       ;;
82149:     esac
93113: fi
93113: 
93113: if test "$OS_TARGET" = "Android" -a -z "$gonkdir"; then
82149:     if test -n "$MOZ_ANDROID_LIBSTDCXX" ; then
82149:        if test ! -e "$android_ndk/sources/cxx-stl/gnu-libstdc++/libs/$ANDROID_CPU_ARCH/libstdc++.a" ; then
82149:           AC_MSG_ERROR([Cannot find path to libstdc++ (NDK version >= 5?)])
82149:        fi
93113:        STLPORT_CPPFLAGS="-I$android_ndk/sources/cxx-stl/gnu-libstdc++/include -I$android_ndk/sources/cxx-stl/gnu-libstdc++/libs/$ANDROID_CPU_ARCH/include -D_GLIBCXX_PERMIT_BACKWARD_HASH"
82149:        STLPORT_LDFLAGS="-L$android_ndk/sources/cxx-stl/gnu-libstdc++/libs/$ANDROID_CPU_ARCH"
82149:        STLPORT_LIBS="-lstdc++"
93907:     elif test -e "$android_ndk/sources/cxx-stl/stlport/src/iostream.cpp" ; then
94099:        if test -e "$android_ndk/sources/cxx-stl/stlport/libs/$ANDROID_CPU_ARCH/libstlport_static.a"; then
94099:           STLPORT_LDFLAGS="-L$_objdir/build/stlport -L$android_ndk/sources/cxx-stl/stlport/libs/$ANDROID_CPU_ARCH/"
94099:        elif test -e "$android_ndk/tmp/ndk-digit/build/install/sources/cxx-stl/stlport/libs/$ANDROID_CPU_ARCH/libstlport_static.a"; then
94099:           STLPORT_LDFLAGS="-L$_objdir/build/stlport -L$android_ndk/tmp/ndk-digit/build/install/sources/cxx-stl/stlport/libs/$ANDROID_CPU_ARCH/"
94099:        else
94099:           AC_MSG_ERROR([Couldn't find path to stlport in the android ndk])
94099:        fi
93907:        STLPORT_SOURCES="$android_ndk/sources/cxx-stl/stlport"
93907:        STLPORT_CPPFLAGS="-I$_objdir/build/stlport -I$android_ndk/sources/cxx-stl/stlport/stlport"
82149:        STLPORT_LIBS="-lstlport_static"
82149:     elif test "$target" != "arm-android-eabi"; then
82149:        dnl fail if we're not building with NDKr4
82149:        AC_MSG_ERROR([Couldn't find path to stlport in the android ndk])
82149:     fi
93113:     CXXFLAGS="$CXXFLAGS $STLPORT_CPPFLAGS"
82149:     LDFLAGS="$LDFLAGS $STLPORT_LDFLAGS"
82149:     LIBS="$LIBS $STLPORT_LIBS"
82149: fi
82149: 
93907: AC_SUBST([STLPORT_SOURCES])
93907: 
82149: dnl ========================================================
87957: dnl Suppress Clang Argument Warnings
87957: dnl ========================================================
87957: if test -n "$CLANG_CC"; then
87957:     _WARNINGS_CFLAGS="-Qunused-arguments ${_WARNINGS_CFLAGS}"
87957:     CPPFLAGS="-Qunused-arguments ${CPPFLAGS}"
87957: fi
87957: if test -n "$CLANG_CXX"; then
87957:     _WARNINGS_CXXFLAGS="-Qunused-arguments ${_WARNINGS_CXXFLAGS}"
87957: fi
87957: 
87957: dnl ========================================================
91741: dnl = Use Address Sanitizer
91741: dnl ========================================================
91741: MOZ_ARG_ENABLE_BOOL(address-sanitizer,
91741: [  --enable-address-sanitizer       Enable Address Sanitizer (default=no)],
91741:     MOZ_ASAN=1,
91741:     MOZ_ASAN= )
91741: if test -n "$MOZ_ASAN"; then
91741:     MOZ_LLVM_HACKS=1
91741:     AC_DEFINE(MOZ_ASAN)
91741: fi
91741: AC_SUBST(MOZ_ASAN)
91741: 
91741: dnl ========================================================
91741: dnl = Enable hacks required for LLVM instrumentations
91741: dnl ========================================================
91741: MOZ_ARG_ENABLE_BOOL(llvm-hacks,
91741: [  --enable-llvm-hacks       Enable workarounds required for several LLVM instrumentations (default=no)],
91741:     MOZ_LLVM_HACKS=1,
91741:     MOZ_LLVM_HACKS= )
91741: if test -n "$MOZ_LLVM_HACKS"; then
91741:     MOZ_NO_WLZDEFS=1
91741:     MOZ_CFLAGS_NSS=1
91741: fi
91741: AC_SUBST(MOZ_NO_WLZDEFS)
91741: AC_SUBST(MOZ_CFLAGS_NSS)
91741: 
91741: dnl ========================================================
82149: dnl GNU specific defaults
82149: dnl ========================================================
82149: if test "$GNU_CC"; then
82149:     # FIXME: Let us build with strict aliasing. bug 414641.
82149:     CFLAGS="$CFLAGS -fno-strict-aliasing"
82149:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
82149:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
82149:     DSO_LDOPTS='-shared'
82149:     if test "$GCC_USE_GNU_LD"; then
91741:         # Some tools like ASan use a runtime library that is only
91741:         # linked against executables, so we must allow undefined
91741:         # symbols for shared objects in some cases.
91741:         if test -z "$MOZ_NO_WLZDEFS"; then
82149:             # Don't allow undefined symbols in libraries
82149:             DSO_LDOPTS="$DSO_LDOPTS -Wl,-z,defs"
82149:         fi
91741:     fi
86868:     WARNINGS_AS_ERRORS='-Werror -Wno-error=uninitialized'
82149:     DSO_CFLAGS=''
82149:     DSO_PIC_CFLAGS='-fPIC'
82149:     ASFLAGS="$ASFLAGS -fPIC"
82169:     _MOZ_RTTI_FLAGS_ON=-frtti
82169:     _MOZ_RTTI_FLAGS_OFF=-fno-rtti
82149: 
94709:     # Turn on GNU-specific warnings:
94709:     # -Wall - turn on a lot of warnings
94709:     # -pedantic - this is turned on below
94709:     # -Wpointer-arith - enabled with -pedantic, but good to have even if not
93760:     # -Wdeclaration-after-statement - MSVC doesn't like these
94709:     # -Werror=return-type - catches missing returns, zero false positives
94709:     # -Wtype-limits - catches overflow bugs, few false positives
94709:     # -Wempty-body - catches bugs, e.g. "if (c); foo();", few false positives
94709:     #
94709:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wall -Wpointer-arith -Wdeclaration-after-statement"
94709:     MOZ_C_SUPPORTS_WARNING(-W, error=return-type, ac_c_has_werror_return_type)
94709:     MOZ_C_SUPPORTS_WARNING(-W, type-limits, ac_c_has_wtype_limits)
94709:     MOZ_C_SUPPORTS_WARNING(-W, empty-body, ac_c_has_wempty_body)
94709:     
94709:     # Turn off the following warnings that -Wall/-pedantic turn on:
94709:     # -Wno-unused - lots of violations in third-party code
94709:     # -Wno-overlength-strings - we exceed the minimum maximum length frequently
94709:     #
94709:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wno-unused"
94709:     MOZ_C_SUPPORTS_WARNING(-Wno-, overlength-strings, ac_c_has_wno_overlength_strings)
94709: 
82149:     if test -z "$INTEL_CC" -a -z "$CLANG_CC"; then
82149:        # Don't use -Wcast-align with ICC or clang
82149:        case "$CPU_ARCH" in
82149:            # And don't use it on hppa, ia64, sparc, arm, since it's noisy there
82149:            hppa | ia64 | sparc | arm)
82149:            ;;
82149:            *)
82149:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wcast-align"
82149:            ;;
82149:        esac
82149:     fi
82149: 
82149:     dnl Turn pedantic on but disable the warnings for long long
82149:     _PEDANTIC=1
82149: 
82149:     _DEFINES_CFLAGS='-include $(DEPTH)/mozilla-config.h -DMOZILLA_CLIENT'
82149:     _USE_CPP_INCLUDE_FLAG=1
94709: 
82149: elif test "$SOLARIS_SUNPRO_CC"; then
82149:     DSO_CFLAGS=''
82149:     if test "$CPU_ARCH" = "sparc"; then
82149:         # for Sun Studio on Solaris/SPARC
82149:         DSO_PIC_CFLAGS='-xcode=pic32'
82149:     else
82149:         DSO_PIC_CFLAGS='-KPIC'
82149:     fi
82149:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
82149: else
82149:     MKSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
82149:     MKCSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
82149: 
82149:     DSO_LDOPTS='-shared'
82149:     if test "$GNU_LD"; then
82149:         # Don't allow undefined symbols in libraries
82149:         DSO_LDOPTS="$DSO_LDOPTS -z defs"
82149:     fi
82149: 
82149:     DSO_CFLAGS=''
82149:     DSO_PIC_CFLAGS='-KPIC'
82149:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
82149: fi
82149: 
82149: if test "$GNU_CXX"; then
82149:     # FIXME: Let us build with strict aliasing. bug 414641.
82149:     CXXFLAGS="$CXXFLAGS -fno-exceptions -fno-strict-aliasing"
94709: 
94709:     # Turn on GNU-specific warnings:
94709:     # -Wall - turn on a lot of warnings
94709:     # -pedantic - this is turned on below
94709:     # -Wpointer-arith - enabled with -pedantic, but good to have even if not
94709:     # -Woverloaded-virtual - ???
94709:     # -Werror=return-type - catches missing returns, zero false positives
94709:     # -Wtype-limits - catches overflow bugs, few false positives
94709:     # -Wempty-body - catches bugs, e.g. "if (c); foo();", few false positives
94709:     #
94709:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wall -Wpointer-arith -Woverloaded-virtual"
94709:     MOZ_CXX_SUPPORTS_WARNING(-W, error=return-type, ac_cxx_has_werror_return_type)
94709:     MOZ_CXX_SUPPORTS_WARNING(-W, type-limits, ac_cxx_has_wtype_limits)
94709:     MOZ_CXX_SUPPORTS_WARNING(-W, empty-body, ac_cxx_has_wempty_body)
94709: 
94709:     # Turn off the following warnings that -Wall/-pedantic turn on:
94709:     # -Wno-ctor-dtor-privacy - ???
94709:     # -Wno-overlength-strings - we exceed the minimum maximum length frequently 
94709:     # -Wno-invalid-offsetof - we use offsetof on non-POD types frequently
94709:     # -Wno-variadic-macros - ???
94709:     #
94709:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wno-ctor-dtor-privacy"
94709:     MOZ_CXX_SUPPORTS_WARNING(-Wno-, overlength-strings, ac_cxx_has_wno_overlength_strings)
94709:     MOZ_CXX_SUPPORTS_WARNING(-Wno-, invalid-offsetof, ac_cxx_has_wno_invalid_offsetof)
94709:     MOZ_CXX_SUPPORTS_WARNING(-Wno-, variadic-macros, ac_cxx_has_wno_variadic_macros)
94709: 
82149:     if test -z "$INTEL_CXX" -a -z "$CLANG_CXX"; then
82149:        # Don't use -Wcast-align with ICC or clang
82149:        case "$CPU_ARCH" in
82149:            # And don't use it on hppa, ia64, sparc, arm, since it's noisy there
82149:            hppa | ia64 | sparc | arm)
82149:            ;;
82149:            *)
82149:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wcast-align"
82149:            ;;
82149:        esac
82149:     fi
82149: 
82149:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/mozilla-config.h'
82149:     _USE_CPP_INCLUDE_FLAG=1
82149: 
82149:     # Recent clang and gcc support C++11 deleted functions without warnings if
82149:     # compiling with -std=c++0x or -std=gnu++0x (or c++11 or gnu++11 in very new
82149:     # versions).  We can't use -std=c++0x yet, so gcc's support must remain
82149:     # unused.  But clang's warning can be disabled, so when compiling with clang
82149:     # we use it to opt out of the warning, enabling (macro-encapsulated) use of
82149:     # deleted function syntax.
82149:     if test "$CLANG_CXX"; then
82149:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wno-c++0x-extensions"
94709:         MOZ_CXX_SUPPORTS_WARNING(-Wno-, extended-offsetof, ac_cxx_has_wno_extended_offsetof)
82149:     fi
82149: 
82149: else
82149:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -D_MOZILLA_CONFIG_H_ $(ACDEFINES)'
82149: fi
82149: 
82149: dnl gcc can come with its own linker so it is better to use the pass-thru calls
82149: dnl MKSHLIB_FORCE_ALL is used to force the linker to include all object
82149: dnl files present in an archive. MKSHLIB_UNFORCE_ALL reverts the linker to
82149: dnl normal behavior.
82149: dnl ========================================================
82149: MKSHLIB_FORCE_ALL=
82149: MKSHLIB_UNFORCE_ALL=
82149: 
82149: if test "$COMPILE_ENVIRONMENT"; then
82149: if test "$GNU_CC"; then
82149:   AC_MSG_CHECKING(whether ld has archive extraction flags)
82149:   AC_CACHE_VAL(ac_cv_mkshlib_force_and_unforce,
82149:    [_SAVE_LDFLAGS=$LDFLAGS; _SAVE_LIBS=$LIBS
82149:     ac_cv_mkshlib_force_and_unforce="no"
82149:     exec 3<&0 <<LOOP_INPUT
82149: 	force="-Wl,--whole-archive";   unforce="-Wl,--no-whole-archive"
82149: 	force="-Wl,-z -Wl,allextract"; unforce="-Wl,-z -Wl,defaultextract"
82149: 	force="-Wl,-all";              unforce="-Wl,-none"
82149: LOOP_INPUT
82149:     while read line
82149:     do
82149:       eval $line
82149:       LDFLAGS=$force
82149:       LIBS=$unforce
82149:       AC_TRY_LINK(,, ac_cv_mkshlib_force_and_unforce=$line; break)
82149:     done
82149:     exec 0<&3 3<&-
82149:     LDFLAGS=$_SAVE_LDFLAGS; LIBS=$_SAVE_LIBS
82149:    ])
82149:   if test "$ac_cv_mkshlib_force_and_unforce" = "no"; then
82149:     AC_MSG_RESULT(no)
82149:   else
82149:     AC_MSG_RESULT(yes)
82149:     eval $ac_cv_mkshlib_force_and_unforce
82149:     MKSHLIB_FORCE_ALL=$force
82149:     MKSHLIB_UNFORCE_ALL=$unforce
82149:   fi
82149: fi # GNU_CC
82149: fi # COMPILE_ENVIRONMENT
82149: 
82149: dnl ========================================================
    1: dnl Checking for 64-bit OS
    1: dnl ========================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: AC_LANG_SAVE
    1: AC_LANG_C
    1: AC_MSG_CHECKING(for 64-bit OS)
    1: AC_TRY_COMPILE([$configure_static_assert_macros],
33494:                [CONFIGURE_STATIC_ASSERT(sizeof(void*) == 8)],
    1:                result="yes", result="no")
    1: AC_MSG_RESULT("$result")
    1: if test "$result" = "yes"; then
    1:     AC_DEFINE(HAVE_64BIT_OS)
    1:     HAVE_64BIT_OS=1
    1: fi
    1: AC_SUBST(HAVE_64BIT_OS)
    1: AC_LANG_RESTORE
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
14801: dnl Enable high-memory support on OS/2 by default.
14801: dnl ========================================================
14801: MOZ_OS2_HIGH_MEMORY=1
14801: MOZ_ARG_DISABLE_BOOL(os2-high-mem,
14801: [  --disable-os2-high-mem  Disable high-memory support on OS/2],
14801:     MOZ_OS2_HIGH_MEMORY=,
14801:     MOZ_OS2_HIGH_MEMORY=1 )
    1: AC_SUBST(MOZ_OS2_HIGH_MEMORY)
    1: 
    1: dnl ========================================================
55914: dnl = Use profiling compile flags
55914: dnl ========================================================
55914: MOZ_ARG_ENABLE_BOOL(profiling,
55914: [  --enable-profiling      Set compile flags necessary for using sampling profilers (e.g. shark, perf)],
55914:     MOZ_PROFILING=1,
55914:     MOZ_PROFILING= )
55914: 
55914: dnl ========================================================
63051: dnl = Use Valgrind
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(valgrind,
63051: [  --enable-valgrind       Enable Valgrind integration hooks (default=no)],
63051:     MOZ_VALGRIND=1,
63051:     MOZ_VALGRIND= )
63051: if test -n "$MOZ_VALGRIND"; then
63478:     MOZ_CHECK_HEADER([valgrind/valgrind.h], [],
63051:         AC_MSG_ERROR(
63051:             [--enable-valgrind specified but Valgrind is not installed]))
63051:     AC_DEFINE(MOZ_VALGRIND)
74251: fi
74251: AC_SUBST(MOZ_VALGRIND)
63051: 
63051: dnl ========================================================
84340: dnl = Use DMD
84340: dnl ========================================================
84340: MOZ_ARG_ENABLE_BOOL(dmd,
84340: [  --enable-dmd            Enable DMD; also disables jemalloc (default=no)],
84340:     MOZ_DMD=1,
84340:     MOZ_DMD= )
84340: if test -n "$MOZ_DMD"; then
84340:     MOZ_CHECK_HEADER([valgrind/valgrind.h], [],
84340:         AC_MSG_ERROR(
84340:             [--enable-dmd specified but Valgrind is not installed]))
84340:     AC_DEFINE(MOZ_DMD)
84340: fi
84340: AC_SUBST(MOZ_DMD)
84340: 
84340: dnl ========================================================
63051: dnl jprof
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(jprof,
63051: [  --enable-jprof          Enable jprof profiling tool (needs mozilla/tools/jprof). Implies --enable-profiling.],
63051:     MOZ_JPROF=1,
63051:     MOZ_JPROF= )
63051: if test -n "$MOZ_JPROF"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_JPROF)
63051: fi
63051: 
63051: dnl ========================================================
81024: dnl SPS Profiler
81024: dnl ========================================================
92206: MOZ_ENABLE_PROFILER_SPS=1
92206: 
92206: case "${OS_TARGET}" in
92206: Android)
92206:     case "${CPU_ARCH}" in
92206:     x86 | arm) ;;
92206:     *)
92206:         MOZ_ENABLE_PROFILER_SPS=
92206:     esac
92206:     ;;
92206: Linux)
92206:     case "${CPU_ARCH}" in
92206:     x86 | x86_64) ;;
92206:     *)
92206:         MOZ_ENABLE_PROFILER_SPS=
92206:     esac
92206:     ;;
92206: WINNT|Darwin) ;;
92206: *)
92206:     MOZ_ENABLE_PROFILER_SPS=
92206:     ;;
92206: esac
92206: 
81024: if test -n "$MOZ_ENABLE_PROFILER_SPS"; then
81024:     AC_DEFINE(MOZ_ENABLE_PROFILER_SPS)
81024: fi
81024: 
81024: dnl ========================================================
63051: dnl shark
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(shark,
63051: [  --enable-shark          Enable shark remote profiling. Implies --enable-profiling.],
63051:     MOZ_SHARK=1,
63051:     MOZ_SHARK= )
63051: if test -n "$MOZ_SHARK"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_SHARK)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl callgrind
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(callgrind,
74653: [  --enable-callgrind      Enable callgrind profiling. Implies --enable-profiling.],
63051:     MOZ_CALLGRIND=1,
63051:     MOZ_CALLGRIND= )
63051: if test -n "$MOZ_CALLGRIND"; then
74653:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_CALLGRIND)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl vtune
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(vtune,
63051: [  --enable-vtune          Enable vtune profiling. Implies --enable-profiling.],
63051:     MOZ_VTUNE=1,
63051:     MOZ_VTUNE= )
63051: if test -n "$MOZ_VTUNE"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_VTUNE)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl Profiling
63051: dnl ========================================================
63051: if test -n "$MOZ_PROFILING"; then
63051:     AC_DEFINE(MOZ_PROFILING)
63051: fi
63051: 
63051: dnl ========================================================
    1: dnl System overrides of the defaults for host
    1: dnl ========================================================
    1: case "$host" in
68662: *mingw*)
    1:     if test -n "$_WIN32_MSVC"; then
    1:         HOST_AR=lib
    1:         HOST_AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:         HOST_CFLAGS="$HOST_CFLAGS -TC -nologo -Fd\$(HOST_PDBFILE)"
    1:         HOST_RANLIB='echo ranlib'
    1:     else
68658:         HOST_CFLAGS="$HOST_CFLAGS -mwindows"
    1:     fi
63525:     HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN32 -DXP_WIN -DWIN32 -D_WIN32 -DNO_X11 -D_CRT_SECURE_NO_WARNINGS"
    1:     HOST_NSPR_MDCPUCFG='\"md/_winnt.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     case "$host" in
    1:     *mingw*)
33295:         PERL="/bin/sh ${_topsrcdir}/build/msys-perl-wrapper"
    1:         ;;
    1:     esac
33494: 
33494:     case "${host_cpu}" in
90551:     i*86)
90551:         if test -n "$_WIN32_MSVC"; then
90551:             HOST_LDFLAGS="$HOST_LDFLAGS -MACHINE:X86"
90551:         fi
90551:         ;;
33494:     x86_64)
90551:         if test -n "$_WIN32_MSVC"; then
90551:             HOST_LDFLAGS="$HOST_LDFLAGS -MACHINE:X64"
90551:         fi
33494:         HOST_CFLAGS="$HOST_CFLAGS -D_AMD64_"
33494:         ;;
33494:     esac
    1:     ;;
    1: 
    1: *-darwin*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
41013: *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
    1: *os2*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_OS2 -DNO_X11 -Zomf"
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     MOZ_FIX_LINK_PATHS=
    1:     ;;
    1: 
    1: *)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: esac
    1: 
56983: dnl We require version 2.5 or newer of Python to build.
59225: AC_MSG_CHECKING([for Python version >= $PYTHON_VERSION but not 3.x])
27609: changequote(,)
59225: $PYTHON -c "import sys; sys.exit(sys.version[:3] < sys.argv[1] or sys.version[:2] != '2.')" $PYTHON_VERSION
27609: _python_res=$?
27609: changequote([,])
27609: if test "$_python_res" != 0; then
59225:     AC_MSG_ERROR([Python $PYTHON_VERSION or higher (but not Python 3.x) is required.])
27609: fi
27609: AC_MSG_RESULT([yes])
27609: 
84270: dnl Check for using a custom <stdint.h> implementation
84270: dnl ========================================================
84270: AC_MSG_CHECKING(for custom <stdint.h> implementation)
84270: if test "$MOZ_CUSTOM_STDINT_H"; then
84270:   AC_DEFINE_UNQUOTED(MOZ_CUSTOM_STDINT_H, "$MOZ_CUSTOM_STDINT_H")
84270:   AC_SUBST(MOZ_CUSTOM_STDINT_H)
84270:   AC_MSG_RESULT(using $MOZ_CUSTOM_STDINT_H)
84270: else
84270:   AC_MSG_RESULT(none specified)
84270: fi
84270: 
    1: dnl Get mozilla version from central milestone file
    1: MOZILLA_VERSION=`$PERL $srcdir/config/milestone.pl -topsrcdir $srcdir`
90477: MOZILLA_UAVERSION=`$PERL $srcdir/config/milestone.pl -topsrcdir $srcdir -uaversion`
    1: 
    1: dnl Get version of various core apps from the version files.
62084: FIREFOX_VERSION=`cat $_topsrcdir/browser/config/version.txt`
62084: 
62084: if test -z "$FIREFOX_VERSION"; then
62084:     AC_MSG_ERROR([FIREFOX_VERSION is unexpectedly blank.])
62084: fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION,"$MOZILLA_VERSION")
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION_U,$MOZILLA_VERSION)
90477: AC_DEFINE_UNQUOTED(MOZILLA_UAVERSION,"$MOZILLA_UAVERSION")
    1: 
67706: MOZ_DOING_LTO(lto_is_enabled)
67706: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for target
    1: dnl ========================================================
    1: 
    1: case "$target" in
    1: *-aix*)
    1:     AC_DEFINE(AIX)
    1:     if test ! "$GNU_CC"; then
    1:         if test ! "$HAVE_64BIT_OS"; then
    1:             # Compiling with Visual Age C++ object model compat is the
    1:             # default. To compile with object model ibm, add
    1:             # AIX_OBJMODEL=ibm to .mozconfig.
    1:             if test "$AIX_OBJMODEL" = "ibm"; then
    1:                 CXXFLAGS="$CXXFLAGS -qobjmodel=ibm"
    1:             else
    1:                 AIX_OBJMODEL=compat
    1:             fi
    1:         else
    1:             AIX_OBJMODEL=compat
    1:         fi
    1:         AC_SUBST(AIX_OBJMODEL)
    1:         DSO_LDOPTS='-qmkshrobj=1'
    1:         DSO_CFLAGS='-qflag=w:w'
    1:         DSO_PIC_CFLAGS=
    1:         LDFLAGS="$LDFLAGS -Wl,-brtl -blibpath:/usr/lib:/lib"
    1:         MOZ_FIX_LINK_PATHS=
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         if test "$COMPILE_ENVIRONMENT"; then
    1:             AC_LANG_SAVE
    1:             AC_LANG_CPLUSPLUS
62250:             AC_MSG_CHECKING([for IBM XLC/C++ compiler version >= 9.0.0.7])
    1:             AC_TRY_COMPILE([],
62250:                 [#if (__IBMCPP__ < 900)
    1:                  #error "Bad compiler"
    1:                  #endif],
    1:                 _BAD_COMPILER=,_BAD_COMPILER=1)
    1:             if test -n "$_BAD_COMPILER"; then
    1:                 AC_MSG_RESULT([no])
62250:                 AC_MSG_ERROR([IBM XLC/C++ 9.0.0.7 or higher is required to build.])
    1:             else
    1:                 AC_MSG_RESULT([yes])
    1:             fi
    1:             AC_LANG_RESTORE
    1:             TARGET_COMPILER_ABI="ibmc"
    1:             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
    1:             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
    1:         fi
    1:     fi
    1:     case "${target_os}" in
    1:     aix4.1*)
    1:         DLL_SUFFIX='_shr.a'
    1:         ;;
    1:     esac
    1:     if test "$COMPILE_ENVIRONMENT"; then
63478:         MOZ_CHECK_HEADERS(sys/inttypes.h)
    1:     fi
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-bsdi*)
    1:     dnl -pedantic doesn't play well with BSDI's _very_ modified gcc (shlicc2)
    1:     _PEDANTIC=
    1:     case $OS_RELEASE in
    1: 	4.*|5.*)
    1:             STRIP="$STRIP -d"
    1:             ;;
    1: 	*)
    1: 	    DSO_CFLAGS=''
    1: 	    DSO_LDOPTS='-r'
    1: 	    _WARNINGS_CFLAGS="-Wall"
    1: 	    _WARNINGS_CXXFLAGS="-Wall"
    1: 	    # The test above doesn't work properly, at least on 3.1.
    1: 	    MKSHLIB_FORCE_ALL=''
    1: 	    MKSHLIB_UNFORCE_ALL=''
    1: 	;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*)
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
77828:     MOZ_OPTIMIZE_FLAGS="-O3"
    1:     _PEDANTIC=
82556:     # Statically disable jemalloc on 10.5 and 32-bit 10.6.  See bug 702250.
82556:     if test "$HAVE_64BIT_OS"; then
79793:         MOZ_MEMORY=1
82556:     fi
70238:     CFLAGS="$CFLAGS -fno-common"
70238:     CXXFLAGS="$CXXFLAGS -fno-common"
    1:     DLL_SUFFIX=".dylib"
    1:     DSO_LDOPTS=''
    1:     STRIP="$STRIP -x -S"
77587:     # Check whether we're targeting OS X or iOS
77587:     AC_CACHE_CHECK(for iOS target,
77587:                    ac_cv_ios_target,
77587:                    [AC_TRY_COMPILE([#include <TargetConditionals.h>
77587: #if !(TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)
77587: #error not iOS
77587: #endif],
77587:                                    [],
77587:                                    ac_cv_ios_target="yes",
77587:                                    ac_cv_ios_target="no")])
77587:     if test "$ac_cv_ios_target" = "yes"; then
77587:         AC_DEFINE(XP_IOS)
77587:         AC_DEFINE(XP_DARWIN)
77587:         _PLATFORM_DEFAULT_TOOLKIT='cairo-uikit'
77587:     else
77587:         AC_DEFINE(XP_MACOSX)
77587:         AC_DEFINE(XP_DARWIN)
    1:         _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
14692:         # The ExceptionHandling framework is needed for Objective-C exception
14692:         # logging code in nsObjCExceptions.h. Currently we only use that in debug
14692:         # builds.
77114:         MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -framework ExceptionHandling";
77114:     fi
77587:     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
77587: 
    1: 
67706:     if test "x$lto_is_enabled" = "xyes"; then
67706:         echo "Skipping -dead_strip because lto is enabled."
15321:     dnl DTrace and -dead_strip don't interact well. See bug 403132.
15321:     dnl ===================================================================
67706:     elif test "x$enable_dtrace" = "xyes"; then
15321:         echo "Skipping -dead_strip because DTrace is enabled. See bug 403132."
15321:     else
    1:         dnl check for the presence of the -dead_strip linker flag
    1:         AC_MSG_CHECKING([for -dead_strip option to ld])
    1:         _SAVE_LDFLAGS=$LDFLAGS
    1:         LDFLAGS="$LDFLAGS -Wl,-dead_strip"
    1:         AC_TRY_LINK(,[return 0;],_HAVE_DEAD_STRIP=1,_HAVE_DEAD_STRIP=)
    1:         if test -n "$_HAVE_DEAD_STRIP" ; then
    1:             AC_MSG_RESULT([yes])
    1:             MOZ_OPTIMIZE_LDFLAGS="-Wl,-dead_strip"
    1:         else
    1:             AC_MSG_RESULT([no])
    1:         fi
15321: 
    1:         LDFLAGS=$_SAVE_LDFLAGS
15321:     fi
96510: 
96510:     dnl With newer linkers we need to pass -allow_heap_execute because of
96510:     dnl Microsoft Silverlight (5.1.10411.0 at least).
96510:     AC_MSG_CHECKING([for -allow_heap_execute option to ld])
96510:     _SAVE_LDFLAGS=$LDFLAGS
96510:     LDFLAGS="$LDFLAGS -Wl,-allow_heap_execute"
96510:     AC_TRY_LINK(,[return 0;],_HAVE_ALLOW_HEAP_EXECUTE=1,
96510:                 _HAVE_ALLOW_HEAP_EXECUTE=)
96510:     if test -n "$_HAVE_ALLOW_HEAP_EXECUTE" ; then
96510:         AC_MSG_RESULT([yes])
96510:         MOZ_ALLOW_HEAP_EXECUTE_FLAGS="-Wl,-allow_heap_execute"
96510:     else
96510:         AC_MSG_RESULT([no])
96510:     fi
96510:     LDFLAGS=$_SAVE_LDFLAGS
96510: 
38007:     MOZ_FIX_LINK_PATHS='-Wl,-executable_path,$(LIBXUL_DIST)/bin'
    1:     ;;
    1: 
    1: *-freebsd*)
15860:     if test `test -x /usr/bin/objformat && /usr/bin/objformat || echo elf` != "elf"; then
    1: 	DLL_SUFFIX=".so.1.0"
    1: 	DSO_LDOPTS="-shared"
    1:     fi
    1:     if test ! "$GNU_CC"; then
    1: 	DSO_LDOPTS="-Bshareable $DSO_LDOPTS"
    1:     fi
    1:     ;;
    1: 
41441: ia64*-hpux*)
41441:     DLL_SUFFIX=".so"
41441:     if test ! "$GNU_CC"; then
41441:        DSO_LDOPTS='-b'
41441:        DSO_CFLAGS=""
41441:        DSO_PIC_CFLAGS=
41441:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_LDOPTS) -o $@'
41441:        CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
41441:     else
41441:        DSO_LDOPTS='-b -E'
41441:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:     fi
41441:     MOZ_FIX_LINK_PATHS=
41441:     SYSTEM_MAKEDEPEND=
41441:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
41441:     AC_DEFINE(_LARGEFILE64_SOURCE)
41441:     ;;
41441: 
    1: *-hpux*)
    1:     DLL_SUFFIX=".sl"
    1:     if test ! "$GNU_CC"; then
    1:     	DSO_LDOPTS='-b -Wl,+s'
    1:     	DSO_CFLAGS=""
    1:     	DSO_PIC_CFLAGS="+Z"
    1:     	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -o $@'
    1:     	MKCSHLIB='$(LD) -b +s -L$(LIBXUL_DIST)/bin -o $@'
    1:         CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
    1:     else
    1:         DSO_LDOPTS='-b -E +s'
    1:         MKSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:         MKCSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:     fi
    1:     MOZ_POST_PROGRAM_COMMAND='chatr +s enable'
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
70914: *-android*|*-linuxandroid*)
70914:     AC_DEFINE(NO_PW_GECOS)
70914:     no_x=yes
82142:     if test -n "$gonkdir"; then
82142:         _PLATFORM_DEFAULT_TOOLKIT=cairo-gonk
91866:         MOZ_B2G_RIL=1
91866:         MOZ_B2G_BT=1
82142:     else
70914:         _PLATFORM_DEFAULT_TOOLKIT=cairo-android
87076:         MOZ_LINKER=1
82142:     fi
70914:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
70914: 
70914:     MOZ_GFX_OPTIMIZE_MOBILE=1
77828:     MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions"
70914:     ;;
70914: 
    1: *-*linux*)
21716:     # Note: both GNU_CC and INTEL_CC are set when using Intel's C compiler.
21716:     # Similarly for GNU_CXX and INTEL_CXX.
47975:     if test "$INTEL_CC" -o "$INTEL_CXX"; then
21716:         # -Os has been broken on Intel's C/C++ compilers for quite a
21716:         # while; Intel recommends against using it.
21716:         MOZ_OPTIMIZE_FLAGS="-O2"
39277:         MOZ_DEBUG_FLAGS="-g"
47975:     elif test "$GNU_CC" -o "$GNU_CXX"; then
13176:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
52418:         case $GCC_VERSION in
52418:         4.1.*|4.2.*|4.5.*)
52418:             # -Os is broken on gcc 4.1.x 4.2.x, 4.5.x we need to tweak it to get good results.
52418:             MOZ_OPTIMIZE_SIZE_TWEAK="-finline-limit=50"
52418:         esac
77828:         MOZ_PGO_OPTIMIZE_FLAGS="-O3"
77828:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks $MOZ_OPTIMIZE_SIZE_TWEAK"
77265:         MOZ_DEBUG_FLAGS="-g"
21716:     fi
21716: 
21716:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1: 
11611:     MOZ_MEMORY=1
11611: 
    1:     case "${target_cpu}" in
    1:     alpha*)
    1:     	CFLAGS="$CFLAGS -mieee"
    1:     	CXXFLAGS="$CXXFLAGS -mieee"
    1:     ;;
    1:     i*86)
    1:     	USE_ELF_DYNSTR_GC=1
    1:     ;;
    1:     mips*)
20694:         MOZ_DEBUG_FLAGS="-g" # We want inlining
    1:     ;;
    1:     esac
73745: 
73745:     if test -z "$MC"; then
73745:         MC=mc.exe
73745:     fi
73745:     ;;
63450: *-mingw*)
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     RC=rc.exe
73745:     MC=mc.exe
    1:     # certain versions of cygwin's makedepend barf on the
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1:     if test -n "$GNU_CC"; then
68658:         CC="$CC -mwindows"
68658:         CXX="$CXX -mwindows"
68658:         CPP="$CPP -mwindows"
    1:         CFLAGS="$CFLAGS -mms-bitfields"
    1:         CXXFLAGS="$CXXFLAGS -mms-bitfields"
    1:         DSO_LDOPTS='-shared'
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         RC='$(WINDRES)'
    1:         # Use temp file for windres (bug 213281)
    1:         RCFLAGS='-O coff --use-temp-file'
    1:         # mingw doesn't require kernel32, user32, and advapi32 explicitly
87233:         LIBS="$LIBS -luuid -lgdi32 -lwinmm -lwsock32 -luserenv"
    1:         MOZ_FIX_LINK_PATHS=
38924:         DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib -lxpcom -lxpcom_core -lmozalloc'
38924:         XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/lib -lxpcom -lmozalloc'
    1:         DLL_PREFIX=
    1:         IMPORT_LIB_SUFFIX=dll.a
42204:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
    1:     else
    1:         TARGET_COMPILER_ABI=msvc
    1:         HOST_CC='$(CC)'
    1:         HOST_CXX='$(CXX)'
    1:         HOST_LD='$(LD)'
33494:         if test "$AS_BIN"; then
33494:             AS="$(basename "$AS_BIN")"
33494:         fi
63466:         AR='lib'
63466:         AR_FLAGS='-NOLOGO -OUT:"$@"'
63466:         AR_EXTRACT=
    1:         RANLIB='echo not_ranlib'
    1:         STRIP='echo not_strip'
51803:         PKG_SKIP_STRIP=1
    1:         XARGS=xargs
    1:         ZIP=zip
    1:         UNZIP=unzip
    1:         DOXYGEN=:
33494:         ASM_SUFFIX=asm
    1:         OBJ_SUFFIX=obj
    1:         LIB_SUFFIX=lib
    1:         DLL_PREFIX=
    1:         LIB_PREFIX=
    1:         IMPORT_LIB_SUFFIX=lib
21344:         MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
21344:         MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
    1:         MKSHLIB_FORCE_ALL=
    1:         MKSHLIB_UNFORCE_ALL=
    1:         DSO_LDOPTS=-SUBSYSTEM:WINDOWS
31530:         _USE_CPP_INCLUDE_FLAG=1
31530:         _DEFINES_CFLAGS='-FI $(DEPTH)/dist/include/mozilla-config.h -DMOZILLA_CLIENT'
31530:         _DEFINES_CXXFLAGS='-FI $(DEPTH)/dist/include/mozilla-config.h -DMOZILLA_CLIENT'
21344:         CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:         CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
42157:         CXXFLAGS="$CXXFLAGS -wd4800" # disable warning "forcing value to bool"
72469:         # make 'foo == bar;' error out
72469:         CFLAGS="$CFLAGS -we4553"
72469:         CXXFLAGS="$CXXFLAGS -we4553"
    1:         LIBS="$LIBS kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib"
77265:         MOZ_DEBUG_FLAGS='-Zi'
    1:         MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
 5384:         WARNINGS_AS_ERRORS='-WX'
    1:         MOZ_OPTIMIZE_FLAGS='-O1'
    1:         MOZ_FIX_LINK_PATHS=
38924:         DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
38924:         XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
38924:         LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
    1:         MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
 3563:         if test $_MSC_VER -ge 1400; then
57891:             LDFLAGS="$LDFLAGS -LARGEADDRESSAWARE -NXCOMPAT"
12601:             dnl For profile-guided optimization
11977:             PROFILE_GEN_CFLAGS="-GL"
11977:             PROFILE_GEN_LDFLAGS="-LTCG:PGINSTRUMENT"
14519:             dnl XXX: PGO builds can fail with warnings treated as errors,
14519:             dnl specifically "no profile data available" appears to be
14519:             dnl treated as an error sometimes. This might be a consequence
14519:             dnl of using WARNINGS_AS_ERRORS in some modules, combined
14519:             dnl with the linker doing most of the work in the whole-program
14519:             dnl optimization/PGO case. I think it's probably a compiler bug,
14519:             dnl but we work around it here.
14519:             PROFILE_USE_CFLAGS="-GL -wd4624 -wd4952"
14519:             dnl XXX: should be -LTCG:PGOPTIMIZE, but that fails on libxul.
14519:             dnl Probably also a compiler bug, but what can you do?
11977:             PROFILE_USE_LDFLAGS="-LTCG:PGUPDATE"
12601:             LDFLAGS="$LDFLAGS -DYNAMICBASE"
12601:         fi
 3563:     fi
80488:     MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,jpeg32$(VERSION_NUMBER),$(DEPTH)/media/libjpeg)'
80489:     MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,png,$(DEPTH)/media/libpng)'
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-windows'
    1:     BIN_SUFFIX='.exe'
    1:     MOZ_USER_DIR="Mozilla"
    1: 
    1:     dnl Hardcode to win95 for now - cls
    1:     TARGET_NSPR_MDCPUCFG='\"md/_win95.cfg\"'
    1: 
    1:     dnl set NO_X11 defines here as the general check is skipped on win32
    1:     no_x=yes
    1:     AC_DEFINE(NO_X11)
    1: 
    1:     case "$host" in
    1:     *-mingw*)
    1:         MOZ_BUILD_ROOT=`cd $MOZ_BUILD_ROOT && pwd -W`
91067:         L10NBASEDIR=`cd $L10NBASEDIR && pwd -W`
    1:         ;;
    1:     esac
63450: 
    1:     case "$host" in
63450:     *-mingw*)
    1:         if test -z "$MOZ_TOOLS"; then
    1:             AC_MSG_ERROR([MOZ_TOOLS is not set])
    1:         fi
25869:         MOZ_TOOLS_DIR=`cd $MOZ_TOOLS && pwd -W`
47975:         if test "$?" != "0" -o -z "$MOZ_TOOLS_DIR"; then
    1:             AC_MSG_ERROR([cd \$MOZ_TOOLS failed. MOZ_TOOLS ==? $MOZ_TOOLS])
    1:         fi
25869:         MOZ_TOOLS_BIN_DIR="$(cd "$MOZ_TOOLS_DIR/bin" && pwd)"
25869:         if test `echo ${PATH}: | grep -ic "$MOZ_TOOLS_BINDIR:"` = 0; then
    1:             AC_MSG_ERROR([\$MOZ_TOOLS\\bin must be in your path.])
    1:         fi
    1:         ;;
    1:     esac
    1: 
14512:     case "$host_os" in
15187:     cygwin*|msvc*|mks*)
63450:         AC_MSG_ERROR([Using a Cygwin build environment is unsupported. Configure cannot check for presence of necessary headers. Please upgrade to MozillaBuild; see https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
63450:         ;;
14512:     esac
14341: 
    1:     case "$target" in
    1:     i*86-*)
33494:         if test "$HAVE_64BIT_OS"; then
33494:             AC_MSG_ERROR([You are targeting i386 but using the 64-bit compiler.])
33494:         fi
33494: 
33494:         if test $_MSC_VER -ge 1400; then
33494:             LDFLAGS="$LDFLAGS -SAFESEH"
33494:         fi
61928: 
61928:         if test -n "$GNU_CC"; then
83065:             CFLAGS="$CFLAGS -mstackrealign -fno-keep-inline-dllexport"
83065:             CXXFLAGS="$CXXFLAGS -mstackrealign -fno-keep-inline-dllexport"
76971:         else
76971:             AC_DEFINE(HAVE_STDCALL)
90551:             DSO_LDOPTS="$DSO_LDOPTS -MACHINE:X86"
61928:         fi
61928: 
63478:         MOZ_CHECK_HEADERS(mmintrin.h)
    1:     	AC_DEFINE(_X86_)
    1: 	;;
33494:     x86_64-*)
90551:         if test -n "$_WIN32_MSVC"; then
90551:             DSO_LDOPTS="$DSO_LDOPTS -MACHINE:X64"
90551:         fi
33494:         AC_DEFINE(_AMD64_)
33494:         ;;
    1:     *)
    1:     	AC_DEFINE(_CPU_ARCH_NOT_DEFINED)
    1: 	;;
    1:     esac
33494: 
33494:     if test "$HAVE_64BIT_OS"; then
33494:     	AC_DEFINE(_WIN64)
33494:     fi
    1:     ;;
    1: 
    1: *-netbsd*)
    1:     DSO_CFLAGS=''
    1:     CFLAGS="$CFLAGS -Dunix"
    1:     CXXFLAGS="$CXXFLAGS -Dunix"
    1:     if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
    1:         DLL_SUFFIX=".so"
    1:         DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:         DSO_LDOPTS='-shared'
    1: 	BIN_FLAGS='-Wl,--export-dynamic'
    1:     else
    1:     	DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:     	DLL_SUFFIX=".so.1.0"
    1:     	DSO_LDOPTS='-shared'
    1:     fi
    1:     # This will fail on a.out systems prior to 1.5.1_ALPHA.
    1:     MKSHLIB_FORCE_ALL='-Wl,--whole-archive'
    1:     MKSHLIB_UNFORCE_ALL='-Wl,--no-whole-archive'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-Wl,-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     ;;
    1: 
    1: *-openbsd*)
68740:     if test "$SO_VERSION"; then
68740:         DLL_SUFFIX=".so.$SO_VERSION"
68740:     else
68740:         DLL_SUFFIX=".so.1.0"
68740:     fi
68598:     MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(prefix)/lib -Wl,-rpath-link,$(if $(X11BASE),$(X11BASE),/usr/X11R6)/lib'
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
    1:     DSO_LDOPTS='-shared -fPIC'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     ;;
    1: 
    1: *-os2*)
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
20288:     AC_DEFINE(OS2)
    1:     AC_DEFINE(XP_OS2)
20288:     AC_DEFINE(OS2EMX_PLAIN_CHAR)
20288:     AC_DEFINE(TCPV40HDRS)
    1:     DLL_PREFIX=
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib
    1:     BIN_SUFFIX=".exe"
    1:     DLL_SUFFIX=".dll"
    1:     IMPORT_LIB_SUFFIX=lib
    1:     DSO_PIC_CFLAGS=
    1:     AR=emxomfar
    1:     AR_FLAGS='r $@'
    1:     CFLAGS="$CFLAGS -Zomf"
    1:     CXXFLAGS="$CXXFLAGS -Zomf"
    1:     DSO_LDOPTS='-Zdll'
    1:     BIN_FLAGS='-Zlinker /ST:0x100000'
    1:     IMPLIB='emximp -o'
57150:     FILTER='true'
    1:     LDFLAGS='-Zmap'
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     MOZ_DEBUG_FLAGS="-g -fno-inline"
11455:     MOZ_OPTIMIZE_FLAGS="-O2"
11455:     MOZ_OPTIMIZE_LDFLAGS="-s -Zlinker /EXEPACK:2 -Zlinker /PACKCODE -Zlinker /PACKDATA"
39033:     DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
39033:     LIBXUL_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
20288:     TARGET_MD_ARCH=os2
20288:     _PLATFORM_DEFAULT_TOOLKIT="cairo-os2"
20288:     RC=rc.exe
73745:     MC=mc.exe
20288:     RCFLAGS='-n'
20288:     MOZ_USER_DIR="Mozilla"
67795:     ZIP="$ZIP -X"
20288: 
20288:     if test "$MOZTOOLS"; then
20288:         MOZ_TOOLS_DIR=`echo $MOZTOOLS | sed -e 's|\\\\|/|g'`
20288:     else
20288:         AC_MSG_ERROR([MOZTOOLS is not set])
20288:     fi
    1:     if test -n "$MOZ_OS2_HIGH_MEMORY"; then
    1:         DSO_LDOPTS="$DSO_LDOPTS -Zhigh-mem"
    1:         LDFLAGS="$LDFLAGS -Zhigh-mem"
    1:         MOZ_OPTIMIZE_LDFLAGS="$MOZ_OPTIMIZE_LDFLAGS -Zhigh-mem"
    1:         AC_DEFINE(MOZ_OS2_HIGH_MEMORY)
    1:     fi
    1: 
    1:     # GCC for OS/2 currently predefines these, but we don't want them
    1:     _DEFINES_CFLAGS="$_DEFINES_CFLAGS -Uunix -U__unix -U__unix__"
    1:     _DEFINES_CXXFLAGS="$_DEFINES_CXXFLAGS -Uunix -U__unix -U__unix__"
    1: 
    1:     AC_CACHE_CHECK(for __declspec(dllexport),
    1:         ac_os2_declspec,
    1:         [AC_TRY_COMPILE([__declspec(dllexport) void ac_os2_declspec(void) {}],
    1:                         [return 0;],
    1:                         ac_os2_declspec="yes",
    1:                         ac_os2_declspec="no")])
57150:     if test "$ac_os2_declspec" != "yes"; then
57150:         AC_MSG_ERROR([Compiler does not support __declspec(dllexport), install GCC-4.3.2 or newer])
    1:     fi
    1:     ;;
    1: 
    1: *-solaris*)
    1:     AC_DEFINE(SOLARIS)
    1:     TARGET_NSPR_MDCPUCFG='\"md/_solaris.cfg\"'
    1:     SYSTEM_MAKEDEPEND=
46279:     MOZ_FIX_LINK_PATHS=
    1:     # $ORIGIN/.. is for shared libraries under components/ to locate shared
    1:     # libraries one level up (e.g. libnspr4.so)
24783:     if test "$SOLARIS_SUNPRO_CC"; then
46279:        LDFLAGS="$LDFLAGS -z ignore -R '\$\$ORIGIN:\$\$ORIGIN/..' -z lazyload -z combreloc -z muldefs"
46279:        LIBS="-lCrun -lCstd -lc $LIBS"
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
46279:        CFLAGS="$CFLAGS -xlibmieee -xstrconst -xbuiltin=%all -D__FUNCTION__=__func__"
80734:        CXXFLAGS="$CXXFLAGS -xlibmieee -xbuiltin=%all -features=tmplife,tmplrefstatic,extensions,no%except -norunpath -D__FUNCTION__=__func__ -template=no%extdef"
46279:        LDFLAGS="-xildoff $LDFLAGS"
47975:        if test -z "$CROSS_COMPILE" -a -f /usr/lib/ld/map.noexstk; then
    1:            _SAVE_LDFLAGS=$LDFLAGS
    1:            LDFLAGS="-M /usr/lib/ld/map.noexstk $LDFLAGS"
    1:            AC_TRY_LINK([#include <stdio.h>],
    1:                        [printf("Hello World\n");],
    1:                        ,
    1:                        [LDFLAGS=$_SAVE_LDFLAGS])
    1:        fi
    1:        MOZ_OPTIMIZE_FLAGS="-xO4"
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
46281:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
    1:        MKSHLIB_FORCE_ALL='-z allextract'
 2607:        MKSHLIB_UNFORCE_ALL='-z defaultextract'
46279:        DSO_LDOPTS='-G'
    1:        AR_LIST="$AR t"
    1:        AR_EXTRACT="$AR x"
    1:        AR_DELETE="$AR d"
    1:        AR='$(CXX) -xar'
    1:        AR_FLAGS='-o $@'
    1:        AS='/usr/ccs/bin/as'
    1:        ASFLAGS="$ASFLAGS -K PIC -L -P -D_ASM -D__STDC__=0"
    1:        AS_DASH_C_FLAG=''
    1:        TARGET_COMPILER_ABI="sunc"
    1:        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
    1:        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
24783:        AC_MSG_CHECKING([for Sun C++ compiler version >= 5.9])
    1:        AC_LANG_SAVE
    1:        AC_LANG_CPLUSPLUS
    1:        AC_TRY_COMPILE([],
24783:            [#if (__SUNPRO_CC < 0x590)
    1:            #error "Denied"
    1:            #endif],
    1:            _BAD_COMPILER=,_BAD_COMPILER=1)
    1:        if test -n "$_BAD_COMPILER"; then
    1:            _res="no"
24783:            AC_MSG_ERROR([Sun C++ 5.9 (Sun Studio 12) or higher is required to build. Your compiler version is $CXX_VERSION .])
    1:        else
    1:            _res="yes"
    1:        fi
46279:        AC_TRY_COMPILE([],
46279:            [#if (__SUNPRO_CC >= 0x5100)
46279:            #error "Sun C++ 5.10 or above"
46279:            #endif],
46279:            _ABOVE_SS12U1=,_ABOVE_SS12U1=1)
46279:        if test "$_ABOVE_SS12U1"; then
46279:            # disable xannotate
46279:            CXXFLAGS="$CXXFLAGS -xannotate=no"
46279:        fi
    1:        AC_MSG_RESULT([$_res])
    1:        AC_LANG_RESTORE
    1:     else
46279:        LDFLAGS="$LDFLAGS -Wl,-z,ignore -Wl,-R,'\$\$ORIGIN:\$\$ORIGIN/..' -Wl,-z,lazyload -Wl,-z,combreloc -Wl,-z,muldefs"
46279:        LIBS="-lc $LIBS"
46279:        MKSHLIB_FORCE_ALL='-Wl,-z -Wl,allextract'
46279:        MKSHLIB_UNFORCE_ALL='-Wl,-z -Wl,defaultextract'
    1:        ASFLAGS="$ASFLAGS -fPIC"
46279:        DSO_LDOPTS='-shared'
64499:        WARNINGS_AS_ERRORS='-Werror'
    1:        _WARNINGS_CFLAGS=''
    1:        _WARNINGS_CXXFLAGS=''
    1:        if test "$OS_RELEASE" = "5.3"; then
    1:            AC_DEFINE(MUST_UNDEF_HAVE_BOOLEAN_AFTER_INCLUDES)
    1:        fi
    1:     fi
    1:     if test "$OS_RELEASE" = "5.5.1"; then
    1:         AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     fi
    1:     ;;
    1: 
    1: *-sunos*)
    1:     DSO_LDOPTS='-Bdynamic'
    1:     MKSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     AC_DEFINE(SUNOS4)
    1:     AC_DEFINE(SPRINTF_RETURNS_STRING)
    1:     case "$(target_os)" in
    1:     sunos4.1*)
    1:         DLL_SUFFIX='.so.1.0'
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-os2*)
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     ;;
    1: 
    1: esac
    1: 
87076: AC_SUBST(MOZ_LINKER)
90652: if test -n "$MOZ_LINKER"; then
90652:   AC_DEFINE(MOZ_LINKER)
90652: fi
90650: AC_SUBST(MOZ_ENABLE_SZIP)
87076: 
    1: dnl Only one oddball right now (QNX), but this gives us flexibility
    1: dnl if any other platforms need to override this in the future.
    1: AC_DEFINE_UNQUOTED(D_INO,$DIRENT_INO)
    1: 
    1: dnl ========================================================
    1: dnl Any platform that doesn't have MKSHLIB_FORCE_ALL defined
    1: dnl by now will not have any way to link most binaries (tests
    1: dnl as well as viewer, apprunner, etc.), because some symbols
    1: dnl will be left out of the "composite" .so's by ld as unneeded.
    1: dnl So, by defining NO_LD_ARCHIVE_FLAGS for these platforms,
    1: dnl they can link in the static libs that provide the missing
    1: dnl symbols.
    1: dnl ========================================================
    1: NO_LD_ARCHIVE_FLAGS=
47975: if test -z "$MKSHLIB_FORCE_ALL" -o -z "$MKSHLIB_UNFORCE_ALL"; then
    1:     NO_LD_ARCHIVE_FLAGS=1
    1: fi
    1: case "$target" in
    1: *-os2*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-aix4.3*|*-aix5*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
68662: *-mingw*)
    1:     if test -z "$GNU_CC"; then
    1:         NO_LD_ARCHIVE_FLAGS=
    1:     fi
    1:     ;;
    1: esac
    1: AC_SUBST(NO_LD_ARCHIVE_FLAGS)
    1: 
    1: dnl ========================================================
57645: dnl = Flags to strip unused symbols from .so components and
57645: dnl = to export jemalloc symbols when linking a program
    1: dnl ========================================================
    1: case "$target" in
41013:     *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-solaris*)
    1:         if test -z "$GNU_CC"; then
    1:          MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-M $(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:         else
    1:          if test -z "$GCC_USE_GNU_LD"; then
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-M -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:          else
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:          fi
    1:         fi
    1:         ;;
    1:     *-darwin*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-exported_symbols_list -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-export-list'
    1:         ;;
68662:     *-mingw*)
    1:         if test -n "$GNU_CC"; then
    1:            MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         fi
    1:         ;;
    1: esac
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_COMPILER_CHECKS=1
 2271:     SKIP_LIBRARY_CHECKS=1
    1: fi
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl Checks for typedefs, structures, and compiler characteristics.
    1: dnl ========================================================
    1: AC_HEADER_STDC
    1: AC_C_CONST
    1: AC_TYPE_MODE_T
    1: AC_TYPE_OFF_T
    1: AC_TYPE_PID_T
    1: AC_TYPE_SIZE_T
46164: AC_LANG_CPLUSPLUS
41360: AC_MSG_CHECKING(for __stdcall)
41360: AC_CACHE_VAL(ac_cv___stdcall,
46164:  [AC_TRY_COMPILE([template <typename Method> struct foo;
46164:                   template <> struct foo<void (*)()> {};
46164:                   template <> struct foo<void (__stdcall*)()> {};],
46164:                  [],
41360:                  [ac_cv___stdcall=true],
41360:                  [ac_cv___stdcall=false])])
41360: if test "$ac_cv___stdcall" = true ; then
41360:   AC_DEFINE(HAVE_STDCALL)
41360:   AC_MSG_RESULT(yes)
41360: else
41360:   AC_MSG_RESULT(no)
41360: fi
46164: AC_LANG_C
39303: AC_MSG_CHECKING(for ssize_t)
39303: AC_CACHE_VAL(ac_cv_type_ssize_t,
39303:  [AC_TRY_COMPILE([#include <stdio.h>
39303:                   #include <sys/types.h>],
39303:                  [ssize_t foo = 0;],
39303:                  [ac_cv_type_ssize_t=true],
39303:                  [ac_cv_type_ssize_t=false])])
39303: if test "$ac_cv_type_ssize_t" = true ; then
39303:   AC_DEFINE(HAVE_SSIZE_T)
39303:   AC_MSG_RESULT(yes)
39303: else
39303:   AC_MSG_RESULT(no)
39303: fi
    1: AC_STRUCT_ST_BLKSIZE
    1: AC_MSG_CHECKING(for siginfo_t)
    1: AC_CACHE_VAL(ac_cv_siginfo_t,
    1:  [AC_TRY_COMPILE([#define _POSIX_C_SOURCE 199506L
    1:                   #include <signal.h>],
    1:                  [siginfo_t* info;],
    1:                  [ac_cv_siginfo_t=true],
    1:                  [ac_cv_siginfo_t=false])])
    1: if test "$ac_cv_siginfo_t" = true ; then
    1:   AC_DEFINE(HAVE_SIGINFO_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
84270: dnl Check for int64, uint, and uint_t.
84270: dnl ========================================================
    1: AC_MSG_CHECKING(for int64)
    1: AC_CACHE_VAL(ac_cv_int64,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64 foo = 0;],
    1:                  [ac_cv_int64=true],
    1:                  [ac_cv_int64=false])])
    1: if test "$ac_cv_int64" = true ; then
    1:   AC_DEFINE(HAVE_INT64)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint)
    1: AC_CACHE_VAL(ac_cv_uint,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint foo = 0;],
    1:                  [ac_cv_uint=true],
    1:                  [ac_cv_uint=false])])
    1: if test "$ac_cv_uint" = true ; then
    1:   AC_DEFINE(HAVE_UINT)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint_t)
    1: AC_CACHE_VAL(ac_cv_uint_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint_t foo = 0;],
    1:                  [ac_cv_uint_t=true],
    1:                  [ac_cv_uint_t=false])])
    1: if test "$ac_cv_uint_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
    1: dnl are defined when compiling C++ but not C.  Since the result of this
    1: dnl test is used only in C++, do it in C++.
    1: AC_LANG_CPLUSPLUS
    1: 
    1: AC_MSG_CHECKING(for uname.domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain;
    1:             (void)uname(res);  if (res != 0) { domain = res->domainname; } ],
    1:         [ac_cv_have_uname_domainname_field=true],
    1:         [ac_cv_have_uname_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_MSG_CHECKING(for uname.__domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_us_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain;
    1:             (void)uname(res);  if (res != 0) { domain = res->__domainname; } ],
    1:         [ac_cv_have_uname_us_domainname_field=true],
    1:         [ac_cv_have_uname_us_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_us_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_US_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
69365: dnl ========================================================
69365: dnl C++ rtti
69365: dnl Should be smarter and check that the compiler does indeed have rtti
69365: dnl ========================================================
69365: 
69365: MOZ_ARG_ENABLE_BOOL(cpp-rtti,
69365: [  --enable-cpp-rtti       Enable C++ RTTI ],
69365: [ _MOZ_USE_RTTI=1 ],
69365: [ _MOZ_USE_RTTI= ])
69365: 
69365: if test "$_MOZ_USE_RTTI"; then
69365:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_ON
69365: else
69365:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_OFF
69365: fi
69365: 
69365: AC_SUBST(_MOZ_RTTI_FLAGS_ON)
69365: 
79441: dnl Check whether we can use gcc's c++0x mode
30421: AC_LANG_CPLUSPLUS
30421: 
69257: if test "$GNU_CXX"; then
69257:     _SAVE_CXXFLAGS=$CXXFLAGS
69257:     CXXFLAGS="$CXXFLAGS -std=gnu++0x"
69365: 
79441:     if test -z "$_MOZ_USE_RTTI"; then
69365:         CXXFLAGS="$CXXFLAGS $_MOZ_RTTI_FLAGS"
79441:         AC_CACHE_CHECK(for gcc c++0x headers bug without rtti,
79441:             ac_cv_cxx0x_headers_bug,
79441:             [AC_TRY_COMPILE([#include <memory>], [],
79441:                             ac_cv_cxx0x_headers_bug="no",
79441:                             ac_cv_cxx0x_headers_bug="yes")])
69365:         CXXFLAGS="$_SAVE_CXXFLAGS"
79441:         if test "$ac_cv_cxx0x_headers_bug" = "no"; then
69365:             CXXFLAGS="$CXXFLAGS -std=gnu++0x"
69365:         fi
69365:     fi
79441: fi
69257: 
30421: dnl Check for usable char16_t (2 bytes, unsigned)
30421: dnl (we might not need the unsignedness check anymore)
30421: AC_CACHE_CHECK(for usable char16_t (2 bytes, unsigned),
30421:     ac_cv_have_usable_char16_t,
30421:     [AC_TRY_COMPILE([$configure_static_assert_macros],
30421:                     [CONFIGURE_STATIC_ASSERT(sizeof(char16_t) == 2);
30421:                      CONFIGURE_STATIC_ASSERT(char16_t(-1) > char16_t(0));
30421:                      CONFIGURE_STATIC_ASSERT(sizeof((u"hello")[0]) == 2);
30421:                      CONFIGURE_STATIC_ASSERT(sizeof(u'a') == 2);
30421:                      CONFIGURE_STATIC_ASSERT(u'\xFFFF' > u'\x0')],
30421:                     ac_cv_have_usable_char16_t="yes",
30421:                     ac_cv_have_usable_char16_t="no")])
30421: if test "$ac_cv_have_usable_char16_t" = "yes"; then
30421:     AC_DEFINE(HAVE_CPP_CHAR16_T)
30421:     HAVE_CPP_CHAR16_T=1
69296: elif test "$GNU_CXX"; then
69257:     CXXFLAGS="$_SAVE_CXXFLAGS"
30421: fi
    1: 
    1: dnl Check for usable wchar_t (2 bytes, unsigned)
    1: dnl (we really don't need the unsignedness check anymore)
    1: dnl ========================================================
    1: 
    1: AC_CACHE_CHECK(for usable wchar_t (2 bytes, unsigned),
    1:     ac_cv_have_usable_wchar_v2,
    1:     [AC_TRY_COMPILE([#include <stddef.h>
    1:                      $configure_static_assert_macros],
    1:                     [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                      CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                     ac_cv_have_usable_wchar_v2="yes",
    1:                     ac_cv_have_usable_wchar_v2="no")])
    1: if test "$ac_cv_have_usable_wchar_v2" = "yes"; then
    1:     AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:     HAVE_CPP_2BYTE_WCHAR_T=1
30421: elif test "$ac_cv_have_usable_char16_t" != "yes"; then
    1: dnl This is really gcc-only
    1: dnl Do this test using CXX only since some versions of gcc
    1: dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
    1: dnl only have short-wchar support for c++.
    1: dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
    1: 
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
    1:     CXXFLAGS="$CXXFLAGS -fshort-wchar"
    1: 
    1:     AC_CACHE_CHECK(for compiler -fshort-wchar option,
    1:         ac_cv_have_usable_wchar_option_v2,
15236:         [AC_TRY_LINK([#include <stddef.h>
    1:                       $configure_static_assert_macros],
    1:                      [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                       CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                      ac_cv_have_usable_wchar_option_v2="yes",
    1:                      ac_cv_have_usable_wchar_option_v2="no")])
    1: 
    1:     if test "$ac_cv_have_usable_wchar_option_v2" = "yes"; then
    1:         AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:         HAVE_CPP_2BYTE_WCHAR_T=1
55888:         if test "$OS_TARGET" = Android; then
55888:             WCHAR_CFLAGS="-fshort-wchar -Wl,--no-wchar-size-warning"
55888:             CXXFLAGS="$CXXFLAGS -Wl,--no-wchar-size-warning"
55888:             CFLAGS="$CFLAGS -Wl,--no-wchar-size-warning"
55888:             DSO_LDOPTS="$DSO_LDOPTS -Wl,--no-wchar-size-warning"
55888:         else
20702:             WCHAR_CFLAGS="-fshort-wchar"
55888:         fi
    1:     else
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:     fi
30421: fi
30421: 
30421: AC_LANG_C
    1: 
    1: dnl Check for .hidden assembler directive and visibility attribute.
    1: dnl Borrowed from glibc configure.in
    1: dnl ===============================================================
    1: if test "$GNU_CC"; then
    1:   AC_CACHE_CHECK(for visibility(hidden) attribute,
    1:                  ac_cv_visibility_hidden,
    1:                  [cat > conftest.c <<EOF
    1:                   int foo __attribute__ ((visibility ("hidden"))) = 1;
    1: EOF
    1:                   ac_cv_visibility_hidden=no
    1:                   if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                     if egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                       ac_cv_visibility_hidden=yes
    1:                     fi
    1:                   fi
    1:                   rm -f conftest.[cs]
    1:                  ])
    1:   if test "$ac_cv_visibility_hidden" = "yes"; then
    1:     AC_DEFINE(HAVE_VISIBILITY_HIDDEN_ATTRIBUTE)
    1: 
    1:     AC_CACHE_CHECK(for visibility(default) attribute,
    1:                    ac_cv_visibility_default,
    1:                    [cat > conftest.c <<EOF
    1:                     int foo __attribute__ ((visibility ("default"))) = 1;
    1: EOF
    1:                     ac_cv_visibility_default=no
    1:                     if ${CC-cc} -fvisibility=hidden -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                       if ! egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                         ac_cv_visibility_default=yes
    1:                       fi
    1:                     fi
    1:                     rm -f conftest.[cs]
    1:                    ])
    1:     if test "$ac_cv_visibility_default" = "yes"; then
    1:       AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE)
    1: 
    1:       AC_CACHE_CHECK(for visibility pragma support,
    1:                      ac_cv_visibility_pragma,
    1:                      [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1:                       int foo_hidden = 1;
    1: #pragma GCC visibility push(default)
    1:                       int foo_default = 1;
    1: EOF
    1:                       ac_cv_visibility_pragma=no
    1:                       if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
 2576:                         if egrep '\.(hidden|private_extern).*foo_hidden' conftest.s >/dev/null; then
 2576:                           if ! egrep '\.(hidden|private_extern).*foo_default' conftest.s > /dev/null; then
    1:                             ac_cv_visibility_pragma=yes
    1:                           fi
    1:                         fi
    1:                       fi
    1:                       rm -f conftest.[cs]
    1:                     ])
    1:       if test "$ac_cv_visibility_pragma" = "yes"; then
    1:         AC_CACHE_CHECK(For gcc visibility bug with class-level attributes (GCC bug 26905),
    1:                        ac_cv_have_visibility_class_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: struct __attribute__ ((visibility ("default"))) TestStruct {
    1:   static void Init();
    1: };
    1: __attribute__ ((visibility ("default"))) void TestFunc() {
    1:   TestStruct::Init();
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_class_bug=no
    1:                        if ! ${CXX-g++} ${CXXFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_class_bug=yes
    1:                        else
 2576:                          if test `egrep -c '@PLT|\\$stub' conftest.S` = 0; then
    1:                            ac_cv_have_visibility_class_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -rf conftest.{c,S}
    1:                        ])
    1: 
    1:         AC_CACHE_CHECK(For x86_64 gcc visibility bug with builtins (GCC bug 20297),
    1:                        ac_cv_have_visibility_builtin_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: #pragma GCC visibility push(default)
    1: #include <string.h>
    1: #pragma GCC visibility pop
    1: 
    1: __attribute__ ((visibility ("default"))) void Func() {
    1:   char c[[100]];
    1:   memset(c, 0, sizeof(c));
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_builtin_bug=no
    1:                        if ! ${CC-cc} ${CFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -O2 -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_builtin_bug=yes
    1:                        else
    1:                          if test `grep -c "@PLT" conftest.S` = 0; then
    1:                            ac_cv_visibility_builtin_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -f conftest.{c,S}
    1:                        ])
    1:         if test "$ac_cv_have_visibility_builtin_bug" = "no" -a \
    1:                 "$ac_cv_have_visibility_class_bug" = "no"; then
29557:           VISIBILITY_FLAGS='-I$(DIST)/system_wrappers -include $(topsrcdir)/config/gcc_hidden.h'
    1:           WRAP_SYSTEM_INCLUDES=1
40161:           STL_FLAGS='-I$(DIST)/stl_wrappers'
40161:           WRAP_STL_INCLUDES=1
    1:         else
    1:           VISIBILITY_FLAGS='-fvisibility=hidden'
    1:         fi # have visibility pragma bug
    1:       fi   # have visibility pragma
    1:     fi     # have visibility(default) attribute
    1:   fi       # have visibility(hidden) attribute
    1: fi         # GNU_CC
    1: 
18946: # visibility hidden flag for Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
18946: VISIBILITY_FLAGS='-xldscope=hidden'
18946: fi         # Sun Studio on Solaris
18946: 
    1: AC_SUBST(WRAP_SYSTEM_INCLUDES)
    1: AC_SUBST(VISIBILITY_FLAGS)
    1: 
77278: MOZ_GCC_PR49911
90292: MOZ_COMPILER_OPTS
77278: 
38799: dnl Check for __force_align_arg_pointer__ for SSE2 on gcc
38799: dnl ========================================================
38799: if test "$GNU_CC"; then
38799:   CFLAGS_save="${CFLAGS}"
38799:   CFLAGS="${CFLAGS} -Werror"
38799:   AC_CACHE_CHECK(for __force_align_arg_pointer__ attribute,
38799:                  ac_cv_force_align_arg_pointer,
38799:                  [AC_TRY_COMPILE([__attribute__ ((__force_align_arg_pointer__)) void test() {}],
38799:                                  [],
38799:                                  ac_cv_force_align_arg_pointer="yes",
38799:                                  ac_cv_force_align_arg_pointer="no")])
38799:   CFLAGS="${CFLAGS_save}"
38799:   if test "$ac_cv_force_align_arg_pointer" = "yes"; then
38799:     HAVE_GCC_ALIGN_ARG_POINTER=1
38799:   else
38799:     HAVE_GCC_ALIGN_ARG_POINTER=
38799:   fi
38799: fi
38799: AC_SUBST(HAVE_GCC_ALIGN_ARG_POINTER)
38799: 
    1: dnl Checks for header files.
    1: dnl ========================================================
    1: AC_HEADER_DIRENT
    1: case "$target_os" in
69206: freebsd*|openbsd*)
    1: # for stuff like -lXshm
    1:     CPPFLAGS="${CPPFLAGS} ${X_CFLAGS}"
    1:     ;;
    1: esac
82882: MOZ_CHECK_COMMON_HEADERS
    1: 
    1: dnl These are all the places some variant of statfs can be hiding.
63478: MOZ_CHECK_HEADERS(sys/statvfs.h sys/statfs.h sys/vfs.h sys/mount.h)
    1: 
33332: dnl Quota support
77114: MOZ_CHECK_HEADERS(sys/quota.h sys/sysmacros.h)
63478: MOZ_CHECK_HEADERS(linux/quota.h)
33332: 
    1: dnl Try for MMX support
    1: dnl NB - later gcc versions require -mmmx for this header to be successfully
    1: dnl included (or another option which implies it, such as -march=pentium-mmx)
63478: MOZ_CHECK_HEADERS(mmintrin.h)
    1: 
    1: dnl Check whether the compiler supports the new-style C++ standard
    1: dnl library headers (i.e. <new>) or needs the old "new.h"
    1: AC_LANG_CPLUSPLUS
    1: NEW_H=new.h
63478: MOZ_CHECK_HEADER(new, [NEW_H=new])
    1: AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
    1: AC_LANG_C
    1: 
 6804: AC_ARG_ENABLE(dtrace,
10431:               [  --enable-dtrace         build with dtrace support if available (default=no)],
 6804:               [enable_dtrace="yes"],)
 6804: if test "x$enable_dtrace" = "xyes"; then
63478:   MOZ_CHECK_HEADER(sys/sdt.h, HAVE_DTRACE=1)
 6804:   if test -n "$HAVE_DTRACE"; then
 6804:       AC_DEFINE(INCLUDE_MOZILLA_DTRACE)
 6804:   else
 9752:       AC_MSG_ERROR([dtrace enabled but sys/sdt.h not found]);
 6804:   fi
 6804: fi
 6804: AC_SUBST(HAVE_DTRACE)
 6804: 
    1: case $target in
    1: *-aix4.3*|*-aix5*)
    1: 	;;
    1: *)
63478: 	MOZ_CHECK_HEADERS(sys/cdefs.h)
    1: 	;;
    1: esac
    1: 
    1: dnl Checks for libraries.
    1: dnl ========================================================
    1: case $target in
    1: *-hpux11.*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_LIB(c_r, gethostbyname_r)
    1: 	;;
    1: esac
    1: 
    1: dnl We don't want to link with libdl even if it's present on OS X, since
63458: dnl it's not used and not part of the default installation. OS/2 has dlfcn
63458: dnl in libc.
    1: dnl We don't want to link against libm or libpthread on Darwin since
    1: dnl they both are just symlinks to libSystem and explicitly linking
    1: dnl against libSystem causes issues when debugging (see bug 299601).
    1: case $target in
    1: *-darwin*)
    1:     ;;
32958: *-os2*)
32958:     ;;
    1: *)
56940:     AC_SEARCH_LIBS(dlopen, dl,
63478:         MOZ_CHECK_HEADER(dlfcn.h,
56940:         AC_DEFINE(HAVE_DLOPEN)))
    1:     ;;
    1: esac
 7836: 
 7836: _SAVE_CFLAGS="$CFLAGS"
 7836: CFLAGS="$CFLAGS -D_GNU_SOURCE"
72467: AC_CHECK_FUNCS(dladdr memmem)
 7836: CFLAGS="$_SAVE_CFLAGS"
 7836: 
    1: if test ! "$GNU_CXX"; then
    1: 
    1:     case $target in
    1:     *-aix*)
    1: 	AC_CHECK_LIB(C_r, demangle)
    1: 	;;
    1:      *)
    1: 	AC_CHECK_LIB(C, demangle)
    1: 	;;
    1:      esac
    1: fi
32958: 
32958: dnl OS/2 has socket in libc.
32958: case $target in
32958: *-os2*)
32958:     ;;
32958: *)
    1:     AC_CHECK_LIB(socket, socket)
32958: esac
    1: 
    1: XLDFLAGS="$X_LIBS"
    1: XLIBS="$X_EXTRA_LIBS"
    1: 
    1: dnl ========================================================
    1: dnl Checks for X libraries.
    1: dnl Ordering is important.
    1: dnl Xt is dependent upon SM as of X11R6
    1: dnl ========================================================
    1: if test "$no_x" = "yes"; then
    1:     AC_DEFINE(NO_X11)
    1: else
    1:     AC_DEFINE_UNQUOTED(FUNCPROTO,15)
    1: 	XLIBS="-lX11 $XLIBS"
    1: 	_SAVE_LDFLAGS="$LDFLAGS"
    1: 	LDFLAGS="$XLDFLAGS $LDFLAGS"
    1: 	AC_CHECK_LIB(X11, XDrawLines, [X11_LIBS="-lX11"],
    1: 		[MISSING_X="$MISSING_X -lX11"], $XLIBS)
    1: 	AC_CHECK_LIB(Xext, XextAddDisplay, [XEXT_LIBS="-lXext"],
    1: 		[MISSING_X="$MISSING_X -lXext"], $XLIBS)
    1: 
    1: 	AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt"], [
    1:         unset ac_cv_lib_Xt_XtFree
    1: 	    AC_CHECK_LIB(ICE, IceFlush, [XT_LIBS="-lICE $XT_LIBS"],, $XT_LIBS $XLIBS)
    1: 	    AC_CHECK_LIB(SM, SmcCloseConnection, [XT_LIBS="-lSM $XT_LIBS"],, $XT_LIBS $XLIBS)
    1:         AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt $XT_LIBS"],
    1: 		    [MISSING_X="$MISSING_X -lXt"], $X_PRE_LIBS $XT_LIBS $XLIBS)
    1:         ])
    1: 
    1:     # AIX needs the motif library linked before libXt to prevent
    1:     # crashes in plugins linked against Motif - Bug #98892
    1:     case "${target_os}" in
    1:     aix*)
    1:         XT_LIBS="-lXm $XT_LIBS"
    1:         ;;
    1:     esac
    1: 
    1:     dnl ========================================================
    1:     dnl = Check for XShm
    1:     dnl ========================================================
    1:     AC_CHECK_LIB(Xext, XShmCreateImage, _HAVE_XSHM_XEXT=1,,
    1:         $XLIBS $XEXT_LIBS)
    1: 
    1:     dnl ========================================================
51226:     dnl = Check for Xss
51226:     dnl ========================================================
63478:     MOZ_CHECK_HEADER(X11/extensions/scrnsaver.h,
51226:         AC_CHECK_LIB(Xss, XScreenSaverQueryInfo,
51226:             [XSS_LIBS="-lXss $XEXT_LIBS $XLIBS"
51226:              AC_DEFINE(HAVE_LIBXSS)],, $XEXT_LIBS $XLIBS))
51226: 
    1: 	LDFLAGS="$_SAVE_LDFLAGS"
    1: 
 4844:     dnl ========================================================
 4844:     dnl = Check for freetype2 and its functionality
 4844:     dnl ========================================================
94888:     PKG_CHECK_MODULES(FT2, freetype2 >= 6.1.0, _HAVE_FREETYPE2=1, _HAVE_FREETYPE2=)
    1: 
 4844:     if test "$_HAVE_FREETYPE2"; then
 4844:     	_SAVE_LIBS="$LIBS"
 4844:     	_SAVE_CFLAGS="$CFLAGS"
 4844:     	LIBS="$LIBS $FT2_LIBS"
 4844:     	CFLAGS="$CFLAGS $FT2_CFLAGS"
 4844: 
 4844:         AC_CACHE_CHECK(for FT_Bitmap_Size.y_ppem,
 4844:             ac_cv_member_FT_Bitmap_Size_y_ppem,
 4844:             [AC_TRY_COMPILE([#include <ft2build.h>
 4844:                              #include FT_FREETYPE_H],
 4844:                             [FT_Bitmap_Size s;
 4844:                              if (sizeof s.y_ppem) return 0;
 4844:                              return 1],
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=yes,
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=no)])
 4844:         if test "$ac_cv_member_FT_Bitmap_Size_y_ppem" = yes; then
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=1
 4844:         else
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=0
 4844:         fi
 4844:         AC_DEFINE_UNQUOTED(HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            $HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            [FT_Bitmap_Size structure includes y_ppem field])
 4844: 
 4844:         AC_CHECK_FUNCS(FT_GlyphSlot_Embolden FT_Load_Sfnt_Table FT_Select_Size)
 4844: 
 4844:     	LIBS="$_SAVE_LIBS"
 4844:     	CFLAGS="$_SAVE_CFLAGS"
 4844:     fi
 4844: 
    1: fi # $no_x
    1: 
    1: AC_SUBST(XCFLAGS)
    1: AC_SUBST(XLDFLAGS)
    1: AC_SUBST(XLIBS)
25500: AC_SUBST(XEXT_LIBS)
    1: AC_SUBST(XT_LIBS)
51226: AC_SUBST(XSS_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = pthread support
    1: dnl = Start by checking whether the system support pthreads
    1: dnl ========================================================
    1: case "$target_os" in
    1: darwin*)
    1:     USE_PTHREADS=1
    1:     ;;
    1: *)
    1:     MOZ_CHECK_PTHREADS(pthreads,
    1:         USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthreads",
    1:         MOZ_CHECK_PTHREADS(pthread,
    1:             USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthread",
    1:             MOZ_CHECK_PTHREADS(c_r,
    1:                 USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lc_r",
    1:                 MOZ_CHECK_PTHREADS(c,
    1:                     USE_PTHREADS=1
    1:                 )
    1:             )
    1:         )
    1:     )
    1:     ;;
    1: esac
    1: 
    1: dnl ========================================================
    1: dnl Check the command line for --with-pthreads
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(pthreads,
    1: [  --with-pthreads         Force use of system pthread library with NSPR ],
    1: [ if test "$USE_PTHREADS"x = x; then
    1:     AC_MSG_ERROR([ --with-pthreads specified for a system without pthread support ]);
    1: fi],
    1:     USE_PTHREADS=
    1:     _PTHREAD_LDFLAGS=
    1: )
    1: 
    1: dnl ========================================================
    1: dnl Do the platform specific pthread hackery
    1: dnl ========================================================
    1: if test "$USE_PTHREADS"x != x
    1: then
    1: 	dnl
    1: 	dnl See if -pthread is supported.
    1: 	dnl
    1: 	rm -f conftest*
    1: 	ac_cv_have_dash_pthread=no
    1: 	AC_MSG_CHECKING(whether ${CC-cc} accepts -pthread)
    1: 	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	${CC-cc} -pthread -o conftest conftest.c > conftest.out 2>&1
    1: 	if test $? -eq 0; then
47975: 		if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthread`" -a -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			ac_cv_have_dash_pthread=yes
    1: 	        case "$target_os" in
    1: 	        freebsd*)
    1: # Freebsd doesn't use -pthread for compiles, it uses them for linking
    1:                 ;;
    1: 	        *)
    1: 			    CFLAGS="$CFLAGS -pthread"
    1: 			    CXXFLAGS="$CXXFLAGS -pthread"
    1:                 ;;
    1: 	        esac
    1: 		fi
    1: 	fi
    1: 	rm -f conftest*
    1:     AC_MSG_RESULT($ac_cv_have_dash_pthread)
    1: 
    1: 	dnl
    1: 	dnl See if -pthreads is supported.
    1: 	dnl
    1:     ac_cv_have_dash_pthreads=no
    1:     if test "$ac_cv_have_dash_pthread" = "no"; then
    1: 	    AC_MSG_CHECKING(whether ${CC-cc} accepts -pthreads)
    1:     	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	    ${CC-cc} -pthreads -o conftest conftest.c > conftest.out 2>&1
    1:     	if test $? -eq 0; then
47975: 	    	if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthreads`" -a -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			    ac_cv_have_dash_pthreads=yes
    1: 			    CFLAGS="$CFLAGS -pthreads"
    1: 			    CXXFLAGS="$CXXFLAGS -pthreads"
    1: 		    fi
    1: 	    fi
    1: 	    rm -f conftest*
    1:     	AC_MSG_RESULT($ac_cv_have_dash_pthreads)
    1:     fi
    1: 
    1: 	case "$target" in
    1: 	    *-*-freebsd*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1: 				_PTHREAD_LDFLAGS="-pthread"
    1: 			else
    1: 				_PTHREAD_LDFLAGS="-lc_r"
    1: 			fi
    1: 			;;
    1: 
    1: 	    *-*-openbsd*|*-*-bsdi*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1:                 _PTHREAD_LDFLAGS="-pthread"
    1: 			fi
    1: 			;;
    1: 
41013: 	    *-*-linux*|*-*-kfreebsd*-gnu|*-*-gnu*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-aix4.3*|*-aix5*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-hpux11.*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-*-solaris*)
    1: 			AC_DEFINE(_REENTRANT)
24783: 			if test "$SOLARIS_SUNPRO_CC"; then
    1: 				CFLAGS="$CFLAGS -mt"
    1: 				CXXFLAGS="$CXXFLAGS -mt"
    1: 			fi
    1: 			;;
    1: 	esac
    1:     LDFLAGS="${_PTHREAD_LDFLAGS} ${LDFLAGS}"
    1: fi
    1: 
    1: 
    1: dnl Checks for library functions.
    1: dnl ========================================================
    1: AC_PROG_GCC_TRADITIONAL
    1: AC_FUNC_MEMCMP
56763: AC_CHECK_FUNCS(random strerror lchown fchmod snprintf statvfs memmove rint stat64 lstat64 truncate64 statvfs64 setbuf isatty)
56763: AC_CHECK_FUNCS(flockfile getpagesize)
56763: AC_CHECK_FUNCS(localtime_r strtok_r)
    1: 
90792: dnl check for clock_gettime(), the CLOCK_MONOTONIC clock
90792: AC_CACHE_CHECK(for clock_gettime(CLOCK_MONOTONIC),
90792:                ac_cv_clock_monotonic,
90792:                [for libs in "" -lrt; do
90792:                     _SAVE_LDFLAGS="$LDFLAGS"
90792:                     LDFLAGS="$LDFLAGS $libs"
90792:                     AC_TRY_LINK([#include <time.h>],
36932:                                  [ struct timespec ts;
36932:                                    clock_gettime(CLOCK_MONOTONIC, &ts); ],
90792:                                  ac_cv_clock_monotonic=$libs
90792:                                  break,
90792:                                  ac_cv_clock_monotonic=no)
90792:                     LDFLAGS="$_SAVE_LDFLAGS"
90792:                 done])
90792: if test "$ac_cv_clock_monotonic" != "no"; then
36932:     HAVE_CLOCK_MONOTONIC=1
90792:     REALTIME_LIBS=$ac_cv_clock_monotonic
36932:     AC_DEFINE(HAVE_CLOCK_MONOTONIC)
36932:     AC_SUBST(HAVE_CLOCK_MONOTONIC)
36932:     AC_SUBST(REALTIME_LIBS)
36932: fi
36932: 
    1: dnl check for wcrtomb/mbrtowc
    1: dnl =======================================================================
58494: if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
    1: AC_LANG_SAVE
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(for wcrtomb,
    1:     ac_cv_have_wcrtomb,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};wcrtomb(0,'f',&ps);],
    1:                  ac_cv_have_wcrtomb="yes",
    1:                  ac_cv_have_wcrtomb="no")])
    1: if test "$ac_cv_have_wcrtomb" = "yes"; then
    1:     AC_DEFINE(HAVE_WCRTOMB)
    1: fi
    1: AC_CACHE_CHECK(for mbrtowc,
    1:     ac_cv_have_mbrtowc,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};mbrtowc(0,0,0,&ps);],
    1:                  ac_cv_have_mbrtowc="yes",
    1:                  ac_cv_have_mbrtowc="no")])
    1: if test "$ac_cv_have_mbrtowc" = "yes"; then
    1:     AC_DEFINE(HAVE_MBRTOWC)
    1: fi
    1: AC_LANG_RESTORE
    1: fi
    1: 
    1: AC_CACHE_CHECK(
    1:     [for res_ninit()],
    1:     ac_cv_func_res_ninit,
    1:     [AC_TRY_LINK([
    1:         #ifdef linux
    1:         #define _BSD_SOURCE 1
    1:         #endif
    1:         #include <resolv.h>
    1:         ],
    1:         [int foo = res_ninit(&_res);],
    1:         [ac_cv_func_res_ninit=yes],
    1:         [ac_cv_func_res_ninit=no])
    1:     ])
    1: 
    1: if test "$ac_cv_func_res_ninit" = "yes"; then
    1:     AC_DEFINE(HAVE_RES_NINIT)
    1: dnl must add the link line we do something as foolish as this... dougt
    1: dnl else
    1: dnl    AC_CHECK_LIB(bind, res_ninit, AC_DEFINE(HAVE_RES_NINIT),
    1: dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
    1: fi
    1: 
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(
    1:     [for gnu_get_libc_version()],
    1:     ac_cv_func_gnu_get_libc_version,
    1:     [AC_TRY_LINK([
    1:         #ifdef HAVE_GNU_LIBC_VERSION_H
    1:         #include <gnu/libc-version.h>
    1:         #endif
    1:         ],
    1:         [const char *glibc_version = gnu_get_libc_version();],
    1:         [ac_cv_func_gnu_get_libc_version=yes],
    1:         [ac_cv_func_gnu_get_libc_version=no]
    1:         )]
    1:     )
    1: 
    1: if test "$ac_cv_func_gnu_get_libc_version" = "yes"; then
    1:     AC_DEFINE(HAVE_GNU_GET_LIBC_VERSION)
    1: fi
    1: 
    1: case $target_os in
68662:     darwin*|mingw*|os2*)
    1:         ;;
    1:     *)
    1: 
    1: AC_CHECK_LIB(c, iconv, [_ICONV_LIBS="$_ICONV_LIBS"],
    1:     AC_CHECK_LIB(iconv, iconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"],
    1:         AC_CHECK_LIB(iconv, libiconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"])))
    1: _SAVE_LIBS=$LIBS
    1: LIBS="$LIBS $_ICONV_LIBS"
    1: AC_CACHE_CHECK(
    1:     [for iconv()],
    1:     ac_cv_func_iconv,
    1:     [AC_TRY_LINK([
    1:         #include <stdlib.h>
    1:         #include <iconv.h>
    1:         ],
    1:         [
    1:             iconv_t h = iconv_open("", "");
    1:             iconv(h, NULL, NULL, NULL, NULL);
    1:             iconv_close(h);
    1:         ],
    1:         [ac_cv_func_iconv=yes],
    1:         [ac_cv_func_iconv=no]
    1:         )]
    1:     )
    1: if test "$ac_cv_func_iconv" = "yes"; then
    1:     AC_DEFINE(HAVE_ICONV)
    1:     DYNAMIC_XPCOM_LIBS="$DYNAMIC_XPCOM_LIBS $_ICONV_LIBS"
    1:     LIBXUL_LIBS="$LIBXUL_LIBS $_ICONV_LIBS"
    1:     LIBICONV="$_ICONV_LIBS"
    1:     AC_CACHE_CHECK(
    1:         [for iconv() with const input],
    1:         ac_cv_func_const_iconv,
    1:         [AC_TRY_COMPILE([
    1:             #include <stdlib.h>
    1:             #include <iconv.h>
    1:             ],
    1:             [
    1:                 const char *input = "testing";
    1:                 iconv_t h = iconv_open("", "");
    1:                 iconv(h, &input, NULL, NULL, NULL);
    1:                 iconv_close(h);
    1:             ],
    1:             [ac_cv_func_const_iconv=yes],
    1:             [ac_cv_func_const_iconv=no]
    1:             )]
    1:         )
    1:     if test "$ac_cv_func_const_iconv" = "yes"; then
    1:         AC_DEFINE(HAVE_ICONV_WITH_CONST_INPUT)
    1:     fi
    1: fi
    1: LIBS=$_SAVE_LIBS
    1: 
    1:     ;;
    1: esac
    1: 
    1: AM_LANGINFO_CODESET
    1: 
    1: AC_LANG_C
    1: 
    1: dnl **********************
    1: dnl *** va_copy checks ***
    1: dnl **********************
    1: dnl we currently check for all three va_copy possibilities, so we get
    1: dnl all results in config.log for bug reports.
    1: AC_MSG_CHECKING(for an implementation of va_copy())
    1: AC_CACHE_VAL(ac_cv_va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_copy=yes,
    1:         ac_cv_va_copy=no,
    1:         ac_cv_va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv_va_copy)
    1: AC_MSG_CHECKING(for an implementation of __va_copy())
    1: AC_CACHE_VAL(ac_cv___va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             __va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv___va_copy=yes,
    1:         ac_cv___va_copy=no,
    1:         ac_cv___va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv___va_copy)
    1: AC_MSG_CHECKING(whether va_lists can be copied by value)
    1: AC_CACHE_VAL(ac_cv_va_val_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             args2 = args1;
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_val_copy=yes,
    1:         ac_cv_va_val_copy=no,
    1:         ac_cv_va_val_copy=yes
    1:     )
    1: ])
    1: if test "x$ac_cv_va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: elif test "x$ac_cv___va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, __va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: fi
    1: 
    1: if test "x$ac_cv_va_val_copy" = "xno"; then
    1:    AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)
    1: fi
    1: AC_MSG_RESULT($ac_cv_va_val_copy)
    1: 
    1: dnl ===================================================================
    1: dnl ========================================================
    1: dnl Put your C++ language/feature checks below
    1: dnl ========================================================
    1: AC_LANG_CPLUSPLUS
    1: 
41043: ARM_ABI_PREFIX=
    1: if test "$GNU_CC"; then
41043:   if test "$CPU_ARCH" = "arm" ; then
41043:     AC_CACHE_CHECK(for ARM EABI,
41043:         ac_cv_gcc_arm_eabi,
41043:         [AC_TRY_COMPILE([],
41043:                         [
41043: #if defined(__ARM_EABI__)
41043:   return 0;
41043: #else
41043: #error Not ARM EABI.
41043: #endif
41043:                         ],
41043:                         ac_cv_gcc_arm_eabi="yes",
41043:                         ac_cv_gcc_arm_eabi="no")])
41043:     if test "$ac_cv_gcc_arm_eabi" = "yes"; then
41043:         HAVE_ARM_EABI=1
41043:         ARM_ABI_PREFIX=eabi-
41043:     else
41043:         ARM_ABI_PREFIX=oabi-
41043:     fi
41043:   fi
41043: 
41043:   TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-${ARM_ABI_PREFIX}gcc3}"
79477: fi
    1: 
    1: dnl Check for support of modern template specialization syntax
    1: dnl Test code and requirement from scc@netscape.com.
    1: dnl Autoconf cut-and-paste job by waterson@netscape.com
    1: AC_CACHE_CHECK(for modern C++ template specialization syntax support,
    1:                ac_cv_cpp_modern_specialize_template_syntax,
    1:                [AC_TRY_COMPILE(template <class T> struct X { int a; };
    1:                                class Y {};
    1:                                template <> struct X<Y> { double a; };,
    1:                                X<int> int_x;
    1:                                X<Y> y_x;,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=yes,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=no)])
84477: if test "$ac_cv_cpp_modern_specialize_template_syntax" = no ; then
84477:   AC_MSG_ERROR([The C++ compiler does not support template specialization])
84477: fi
    1: 
    1: dnl Some compilers support only full specialization, and some don't.
    1: AC_CACHE_CHECK(whether partial template specialization works,
    1:                ac_cv_cpp_partial_specialization,
    1:                [AC_TRY_COMPILE(template <class T> class Foo {};
    1:                                template <class T> class Foo<T*> {};,
    1:                                return 0;,
    1:                                ac_cv_cpp_partial_specialization=yes,
    1:                                ac_cv_cpp_partial_specialization=no)])
    1: if test "$ac_cv_cpp_partial_specialization" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_PARTIAL_SPECIALIZATION)
    1: fi
    1: 
    1: dnl Check to see if we can resolve ambiguity with |using|.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword resolves ambiguity,
    1:                ac_cv_cpp_ambiguity_resolving_using,
    1:                [AC_TRY_COMPILE(class X {
    1:                                  public: int go(const X&) {return 3;}
    1:                                          int jo(const X&) {return 3;}
    1:                                };
    1:                                class Y : public X {
    1:                                  public:  int go(int) {return 2;}
    1:                                           int jo(int) {return 2;}
    1:                                           using X::jo;
    1:                                  private: using X::go;
    1:                                };,
    1:                                X x; Y y; y.jo(x);,
    1:                                ac_cv_cpp_ambiguity_resolving_using=yes,
    1:                                ac_cv_cpp_ambiguity_resolving_using=no)])
    1: if test "$ac_cv_cpp_ambiguity_resolving_using" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_AMBIGUITY_RESOLVING_USING)
    1: fi
    1: 
    1: dnl See if a dynamic_cast to void* gives the most derived object.
    1: AC_CACHE_CHECK(for C++ dynamic_cast to void*,
    1:                ac_cv_cpp_dynamic_cast_void_ptr,
    1:                [AC_TRY_RUN([class X { int i; public: virtual ~X() { } };
    1:                             class Y { int j; public: virtual ~Y() { } };
    1:                             class Z : public X, public Y { int k; };
    1: 
    1:                             int main() {
    1:                                  Z mdo;
    1:                                  X *subx = (X*)&mdo;
    1:                                  Y *suby = (Y*)&mdo;
    1:                                  return !((((void*)&mdo != (void*)subx) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(subx))) ||
    1:                                           (((void*)&mdo != (void*)suby) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(suby))));
    1:                             }],
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=yes,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no)])
    1: if test "$ac_cv_cpp_dynamic_cast_void_ptr" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR)
    1: fi
    1: 
    1: 
    1: dnl note that this one is reversed - if the test fails, then
    1: dnl we require implementations of unused virtual methods. Which
    1: dnl really blows because it means we'll have useless vtable
    1: dnl bloat.
    1: AC_CACHE_CHECK(whether C++ requires implementation of unused virtual methods,
    1:                ac_cv_cpp_unused_required,
    1:                [AC_TRY_LINK(class X {private: virtual void never_called();};,
    1:                                X x;,
    1:                                ac_cv_cpp_unused_required=no,
    1:                                ac_cv_cpp_unused_required=yes)])
    1: if test "$ac_cv_cpp_unused_required" = yes ; then
    1:    AC_DEFINE(NEED_CPP_UNUSED_IMPLEMENTATIONS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble comparing a constant reference to a templatized
    1: dnl class to zero, and require an explicit operator==() to be defined that takes
    1: dnl an int. This test separates the strong from the weak.
    1: 
    1: AC_CACHE_CHECK(for trouble comparing to zero near std::operator!=(),
    1:                ac_cv_trouble_comparing_to_zero,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 template <class T> class Foo {};
    1:                                 class T2;
    1:                                 template <class T> int operator==(const T2*, const T&) { return 0; }
    1:                                 template <class T> int operator!=(const T2*, const T&) { return 0; }],
    1:                                [Foo<int> f; return (0 != f);],
    1:                                ac_cv_trouble_comparing_to_zero=no,
    1:                                ac_cv_trouble_comparing_to_zero=yes)])
    1: if test "$ac_cv_trouble_comparing_to_zero" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_TROUBLE_COMPARING_TO_ZERO)
    1: fi
    1: 
34907: # try harder, when checking for __thread support, see bug 521750 comment #33 and below
74575: # We pass MOZ_OPTIMIZE_LDFLAGS to the linker because if dead_strip is
74575: # enabled, the linker in xcode 4.1 will crash. Without this it would crash when
74575: # linking XUL.
34907: _SAVE_LDFLAGS=$LDFLAGS
74575: LDFLAGS="$LDFLAGS $DSO_PIC_CFLAGS $DSO_LDOPTS $MOZ_OPTIMIZE_LDFLAGS"
34250: AC_CACHE_CHECK(for __thread keyword for TLS variables,
34250:                ac_cv_thread_keyword,
34418:                [AC_TRY_LINK([__thread bool tlsIsMainThread = false;],
34250:                             [return tlsIsMainThread;],
34250:                             ac_cv_thread_keyword=yes,
34250:                             ac_cv_thread_keyword=no)])
34907: LDFLAGS=$_SAVE_LDFLAGS
87076: # The custom dynamic linker doesn't support TLS variables
87076: if test "$ac_cv_thread_keyword" = yes -a "$MOZ_LINKER" != 1; then
41016:   # mips builds fail with TLS variables because of a binutils bug.
41016:   # See bug 528687
42466:   case "${target}" in
42466:     mips*-*)
42466:       :
42466:       ;;
70914:     *-android*|*-linuxandroid*)
41016:       :
41016:       ;;
41016:     *)
34250:       AC_DEFINE(HAVE_THREAD_TLS_KEYWORD)
41016:       ;;
41016:   esac
34250: fi
    1: 
90357: dnl Using the custom linker on ARMv6 requires 16k alignment of ELF segments.
90357: if test -n "$MOZ_LINKER"; then
90357:   if test "$CPU_ARCH" = arm; then
90357:     dnl Determine the target ARM architecture (5 for ARMv5, v5T, v5E, etc.; 6 for ARMv6, v6K, etc.)
90357:     ARM_ARCH=`${CC-cc} ${CFLAGS} -dM -E - < /dev/null | sed -n 's/.*__ARM_ARCH_\([[0-9]]*\).*/\1/p'`
90357:     dnl When building for < ARMv7, we need to ensure 16k alignment of ELF segments
90357:     if test -n "$ARM_ARCH" && test "$ARM_ARCH" -lt 7; then
90357:       LDFLAGS="$LDFLAGS -Wl,-z,max-page-size=0x4000"
90357:       _SUBDIR_LDFLAGS="$_SUBDIR_LDFLAGS -Wl,-z,max-page-size=0x4000"
90357:     fi
90357:   fi
90357: fi
90357: 
90358: dnl The custom linker doesn't support text relocations, but NDK >= r6b
90358: dnl creates some (http://code.google.com/p/android/issues/detail?id=23203)
90358: dnl We however want to avoid these text relocations, and this can be done
90358: dnl by making gcc not link crtbegin and crtend. In the broken NDKs, crtend
90358: dnl doesn't contain anything at all, beside placeholders for some sections,
90358: dnl and crtbegin only contains a finalizer function that calls
90358: dnl __cxa_finalize. The custom linker actually takes care of calling
90358: dnl __cxa_finalize when the library doesn't call it itself, which makes it
90358: dnl safe not to link crtbegin. Besides, previous versions of the NDK didn't
90358: dnl link crtbegin and crtend at all.
90358: if test -n "$MOZ_LINKER" -a -z "$MOZ_OLD_LINKER" -a "$OS_TARGET" = "Android"; then
90358:   AC_CACHE_CHECK([whether the CRT objects have text relocations],
90358:     ac_cv_crt_has_text_relocations,
90358:     [echo 'int foo() { return 0; }' > conftest.cpp
90358:      if AC_TRY_COMMAND(${CXX-g++} -o conftest${DLL_SUFFIX} $CXXFLAGS $DSO_LDOPTS $LDFLAGS conftest.cpp $LIBS 1>&5) &&
90358:         test -s conftest${DLL_SUFFIX}; then
90358:        if readelf -d conftest${DLL_SUFFIX} | grep TEXTREL > /dev/null; then
90358:          ac_cv_crt_has_text_relocations=yes
90358:        else
90358:          ac_cv_crt_has_text_relocations=no
90358:        fi
90358:      else
90358:        AC_ERROR([couldn't compile a simple C file])
90358:      fi
90358:      rm -rf conftest*])
90358:   if test "$ac_cv_crt_has_text_relocations" = yes; then
90358:     dnl While we want libraries to skip the CRT files, we don't want
90358:     dnl executables to be treated the same way. We thus set the flag
90358:     dnl in DSO_LDOPTS and not LDFLAGS. However, to pass it to nspr,
90358:     dnl we need to use LDFLAGS because nspr doesn't inherit DSO_LDOPTS.
90358:     dnl Using LDFLAGS in nspr is safe, since we only really build
90358:     dnl libraries there.
90358:     DSO_LDOPTS="$DSO_LDOPTS -nostartfiles"
90358:     NSPR_LDFLAGS=-nostartfiles
90358:   fi
90358: fi
90358: 
38924: dnl Check for the existence of various allocation headers/functions
38924: 
38924: MALLOC_H=
63478: MOZ_CHECK_HEADER(malloc.h,        [MALLOC_H=malloc.h])
38924: if test "$MALLOC_H" = ""; then
63478:   MOZ_CHECK_HEADER(malloc/malloc.h, [MALLOC_H=malloc/malloc.h])
38924:   if test "$MALLOC_H" = ""; then
63478:     MOZ_CHECK_HEADER(sys/malloc.h,    [MALLOC_H=sys/malloc.h])
38924:   fi
38924: fi
38924: if test "$MALLOC_H" != ""; then
38924:    AC_DEFINE_UNQUOTED(MALLOC_H, <$MALLOC_H>)
38924: fi
38924: 
38924: MOZ_ALLOCATING_FUNCS="strndup posix_memalign memalign valloc"
38924: AC_CHECK_FUNCS(strndup posix_memalign memalign valloc)
38924: 
38924: dnl See if compiler supports some gcc-style attributes
38924: 
38924: AC_CACHE_CHECK(for __attribute__((always_inline)),
38924:                ac_cv_attribute_always_inline,
71277:                [AC_TRY_COMPILE([inline void f(void) __attribute__((always_inline));],
71277:                                [],
38924:                                ac_cv_attribute_always_inline=yes,
38924:                                ac_cv_attribute_always_inline=no)])
38924: 
38924: AC_CACHE_CHECK(for __attribute__((malloc)),
38924:                ac_cv_attribute_malloc,
71277:                [AC_TRY_COMPILE([void* f(int) __attribute__((malloc));],
71277:                                [],
38924:                                ac_cv_attribute_malloc=yes,
38924:                                ac_cv_attribute_malloc=no)])
38924: 
38924: AC_CACHE_CHECK(for __attribute__((warn_unused_result)),
38924:                ac_cv_attribute_warn_unused,
71277:                [AC_TRY_COMPILE([int f(void) __attribute__((warn_unused_result));],
71277:                                [],
38924:                                ac_cv_attribute_warn_unused=yes,
38924:                                ac_cv_attribute_warn_unused=no)])
38924: 
    1: dnl End of C++ language/feature checks
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =  Internationalization checks
    1: dnl ========================================================
    1: dnl
    1: dnl Internationalization and Locale support is different
    1: dnl on various UNIX platforms.  Checks for specific i18n
    1: dnl features go here.
    1: 
    1: dnl check for LC_MESSAGES
    1: AC_CACHE_CHECK(for LC_MESSAGES,
    1: 		ac_cv_i18n_lc_messages,
    1: 		[AC_TRY_COMPILE([#include <locale.h>],
    1: 				[int category = LC_MESSAGES;],
    1: 				ac_cv_i18n_lc_messages=yes,
    1: 				ac_cv_i18n_lc_messages=no)])
    1: if test "$ac_cv_i18n_lc_messages" = yes; then
    1:    AC_DEFINE(HAVE_I18N_LC_MESSAGES)
    1: fi
    1: 
42807: AC_HAVE_FUNCS(localeconv)
69923: fi # ! SKIP_COMPILER_CHECKS
    1: 
    1: TARGET_XPCOM_ABI=
    1: if test -n "${CPU_ARCH}" -a -n "${TARGET_COMPILER_ABI}"; then
    1:     TARGET_XPCOM_ABI="${CPU_ARCH}-${TARGET_COMPILER_ABI}"
    1: fi
    1: 
    1: dnl Mozilla specific options
    1: dnl ========================================================
    1: dnl The macros used for command line options
    1: dnl are defined in build/autoconf/altoptions.m4.
    1: 
38924: dnl If the compiler supports these attributes, define them as
38924: dnl convenience macros.
38924: if test "$ac_cv_attribute_always_inline" = yes ; then
38924:   AC_DEFINE(NS_ALWAYS_INLINE, [__attribute__((always_inline))])
38924: else
38924:   AC_DEFINE(NS_ALWAYS_INLINE,)
38924: fi
38924: 
38924: if test "$ac_cv_attribute_malloc" = yes ; then
38924:   AC_DEFINE(NS_ATTR_MALLOC, [__attribute__((malloc))])
38924: else
38924:   AC_DEFINE(NS_ATTR_MALLOC,)
38924: fi
38924: 
38924: if test "$ac_cv_attribute_warn_unused" = yes ; then
38924:   AC_DEFINE(NS_WARN_UNUSED_RESULT, [__attribute__((warn_unused_result))])
38924: else
38924:   AC_DEFINE(NS_WARN_UNUSED_RESULT,)
38924: fi
38924: 
38924: dnl We can't run TRY_COMPILE tests on Windows, so hard-code some
38924: dnl features that Windows actually does support.
38924: 
38924: if test -n "$SKIP_COMPILER_CHECKS"; then
38924:    dnl Windows has malloc.h
38924:    AC_DEFINE(MALLOC_H, [<malloc.h>])
38924:    AC_DEFINE(HAVE_FORCEINLINE)
42807:    AC_DEFINE(HAVE_LOCALECONV)
38924: fi # SKIP_COMPILER_CHECKS
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Check for external package dependencies
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(External Packages)
    1: 
    1: MOZ_ARG_WITH_STRING(libxul-sdk,
    1: [  --with-libxul-sdk=PFX   Use the libXUL SDK at <PFX>],
    1:   LIBXUL_SDK_DIR=$withval)
    1: 
    1: if test "$LIBXUL_SDK_DIR" = "yes"; then
    1:     AC_MSG_ERROR([--with-libxul-sdk must specify a path])
    1: elif test -n "$LIBXUL_SDK_DIR" -a "$LIBXUL_SDK_DIR" != "no"; then
    1:     LIBXUL_SDK=`cd "$LIBXUL_SDK_DIR" && pwd`
    1: 
28584:     if test ! -f "$LIBXUL_SDK/include/xpcom-config.h"; then
28584:         AC_MSG_ERROR([$LIBXUL_SDK/include/xpcom-config.h doesn't exist])
    1:     fi
    1: 
    1: fi
    1: AC_SUBST(LIBXUL_SDK)
    1: 
18864: if test -n "$LIBXUL_SDK"; then
18864:     LIBXUL_DIST="$LIBXUL_SDK"
18864: else
18864:     LIBXUL_DIST="$MOZ_BUILD_ROOT/dist"
18864: fi
18864: AC_SUBST(LIBXUL_DIST)
18864: 
24320: SYSTEM_LIBXUL=
24320: 
24320: MOZ_ARG_WITH_BOOL(system-libxul,
24320: [  --with-system-libxul    Use system installed libxul SDK],
24320:     SYSTEM_LIBXUL=1)
24320: 
    1: dnl ========================================================
    1: dnl = If NSPR was not detected in the system,
    1: dnl = use the one in the source tree (mozilla/nsprpub)
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(system-nspr,
    1: [  --with-system-nspr      Use system installed NSPR],
    1:     _USE_SYSTEM_NSPR=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSPR"; then
87074:     AM_PATH_NSPR(4.9.0, [MOZ_NATIVE_NSPR=1], [AC_MSG_ERROR([your don't have NSPR installed or your version is too old])])
    1: fi
    1: 
 2496: if test -n "$MOZ_NATIVE_NSPR"; then
 2496:     _SAVE_CFLAGS=$CFLAGS
 2496:     CFLAGS="$CFLAGS $NSPR_CFLAGS"
42420:     AC_TRY_COMPILE([#include "prtypes.h"],
 2496:                 [#ifndef PR_STATIC_ASSERT
87074:                  #error PR_STATIC_ASSERT not defined or requires including prtypes.h
 2496:                  #endif],
 2496:                 [MOZ_NATIVE_NSPR=1],
42420:                 AC_MSG_ERROR([system NSPR does not support PR_STATIC_ASSERT or including prtypes.h does not provide it]))
87074:     AC_TRY_COMPILE([#include "prtypes.h"],
87074:                 [#ifndef PR_UINT64
87074:                  #error PR_UINT64 not defined or requires including prtypes.h
87074:                  #endif],
87074:                 [MOZ_NATIVE_NSPR=1],
87074:                 AC_MSG_ERROR([system NSPR does not support PR_UINT64 or including prtypes.h does not provide it]))
 2496:     CFLAGS=$_SAVE_CFLAGS
 2496: else
68662:     if test "$OS_ARCH" = "WINNT"; then
18865:         NSPR_CFLAGS="-I${LIBXUL_DIST}/include/nspr"
    1:         if test -n "$GNU_CC"; then
18865:             NSPR_LIBS="-L${LIBXUL_DIST}/lib -lnspr${NSPR_VERSION} -lplc${NSPR_VERSION} -lplds${NSPR_VERSION}"
18865:         else
18865:             NSPR_LIBS="${LIBXUL_DIST}/lib/nspr${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plc${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plds${NSPR_VERSION}.lib "
18865:         fi
18865:     else
60682:         NSPR_CFLAGS='`$(LIBXUL_DIST)/sdk/bin/nspr-config --prefix='${LIBXUL_DIST}' --includedir='${LIBXUL_DIST}'/include/nspr --cflags`'
60682:         NSPR_LIBS='`$(LIBXUL_DIST)/sdk/bin/nspr-config --prefix='${LIBXUL_DIST}' --libdir='${LIBXUL_DIST}'/lib --libs`'
    1:     fi
    1: fi
    1: 
41018: dnl system libevent Support
41018: dnl ========================================================
41018: MOZ_ARG_WITH_STRING(system-libevent,
41018: [  --with-system-libevent=[PFX]
41018:                           Use system libevent [installed at prefix PFX]],
41018:     LIBEVENT_DIR=$withval)
41018: 
41018: _SAVE_CFLAGS=$CFLAGS
41018: _SAVE_LDFLAGS=$LDFLAGS
41018: _SAVE_LIBS=$LIBS
41018: if test -z "$LIBEVENT_DIR" -o "$LIBEVENT_DIR" = no; then
41018:     MOZ_NATIVE_LIBEVENT=
41018: else
41018:     if test "${LIBEVENT_DIR}" = "yes"; then
41018:         LIBEVENT_DIR=/usr
41018:     fi
41018:     CFLAGS="-I${LIBEVENT_DIR}/include $CFLAGS"
41018:     LDFLAGS="-L${LIBEVENT_DIR}/lib $LDFLAGS"
63478:     MOZ_CHECK_HEADER(event.h,
41018:         [if test ! -f "${LIBEVENT_DIR}/include/event.h"; then
41018:              AC_MSG_ERROR([event.h found, but is not in ${LIBEVENT_DIR}/include])
41018:          fi],
41018:         AC_MSG_ERROR([--with-system-libevent requested but event.h not found]))
41018:     AC_CHECK_LIB(event, event_init,
41018:                  [MOZ_NATIVE_LIBEVENT=1
41018:                   MOZ_LIBEVENT_INCLUDES="${LIBEVENT_DIR}/include"
41018:                   MOZ_LIBEVENT_LIBS="-L${LIBEVENT_DIR}/lib -levent"],
41018:                  [MOZ_NATIVE_LIBEVENT= MOZ_LIBEVENT_INCLUDES= MOZ_LIBEVENT_LIBS=])
41018: fi
41018: CFLAGS=$_SAVE_CFLAGS
41018: LDFLAGS=$_SAVE_LDFLAGS
41018: LIBS=$_SAVE_LIBS
41018: 
41018: AC_SUBST(MOZ_NATIVE_LIBEVENT)
41018: AC_SUBST(MOZ_LIBEVENT_INCLUDES)
41018: AC_SUBST(MOZ_LIBEVENT_LIBS)
41018: 
    1: dnl ========================================================
    1: dnl = If NSS was not detected in the system,
    1: dnl = use the one in the source tree (mozilla/security/nss)
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_WITH_BOOL(system-nss,
    1: [  --with-system-nss       Use system installed NSS],
    1:     _USE_SYSTEM_NSS=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSS"; then
83079:     AM_PATH_NSS(3.13.2, [MOZ_NATIVE_NSS=1], [AC_MSG_ERROR([you don't have NSS installed or your version is too old])])
    1: fi
    1: 
    1: if test -n "$MOZ_NATIVE_NSS"; then
    1:    NSS_LIBS="$NSS_LIBS -lcrmf"
    1: else
 4233:    NSS_CFLAGS='-I$(LIBXUL_DIST)/include/nss'
12926:    NSS_DEP_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)smime$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)ssl$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nss$NSS_VERSION\$(DLL_SUFFIX) \
32255:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nssutil$NSS_VERSION\$(DLL_SUFFIX)"
    1: 
68662:    if test -z "$GNU_CC" -a "$OS_ARCH" = "WINNT" -o "$OS_ARCH" = "OS2"; then
12926:        NSS_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)smime$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)ssl$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nss$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nssutil$NSS_VERSION.\$(LIB_SUFFIX)"
32255:    else
32255:        NSS_LIBS='$(LIBS_DIR)'" -lcrmf -lsmime$NSS_VERSION -lssl$NSS_VERSION -lnss$NSS_VERSION -lnssutil$NSS_VERSION"
    1:    fi
    1: fi
    1: 
52191: dnl ======================
52191: dnl Detect yasm
52191: dnl ======================
52191: 
52191: AC_MSG_CHECKING([for YASM assembler])
52191: AC_CHECK_PROGS(YASM, yasm, "")
52191: 
52191: if test -n "$YASM"; then
52191:   dnl Pull out yasm's version string
52191:   changequote(,)
62616:   _YASM_VER_FILTER='s|.* \([0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\).*|\1|p'
52191:   changequote([,])
52191: 
56975:   YASM_VERSION=`yasm --version | sed -ne "$_YASM_VER_FILTER"`
52191:   _YASM_MAJOR_VERSION=`echo ${YASM_VERSION} | $AWK -F\. '{ print $1 }'`
52191:   _YASM_MINOR_VERSION=`echo ${YASM_VERSION} | $AWK -F\. '{ print $2 }'`
52191:   _YASM_RELEASE=`      echo ${YASM_VERSION} | $AWK -F\. '{ print $3 }'`
52191:   _YASM_BUILD=`        echo ${YASM_VERSION} | $AWK -F\. '{ print $4 }'`
52191: fi
52191: 
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1: dnl system JPEG support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-jpeg,
    1: [  --with-system-jpeg[=PFX]
    1:                           Use system libjpeg [installed at prefix PFX]],
    1:     JPEG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${JPEG_DIR}" -a "${JPEG_DIR}" != "yes"; then
    1:     CFLAGS="-I${JPEG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${JPEG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$JPEG_DIR" -o "$JPEG_DIR" = no; then
    1:     SYSTEM_JPEG=
    1: else
    1:     AC_CHECK_LIB(jpeg, jpeg_destroy_compress, [SYSTEM_JPEG=1 JPEG_LIBS="-ljpeg $JPEG_LIBS"], SYSTEM_JPEG=, $JPEG_LIBS)
    1: fi
    1: 
    1: if test "$SYSTEM_JPEG" = 1; then
    1:     LIBS="$JPEG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <jpeglib.h> ],
   25:                    [ #if JPEG_LIB_VERSION < $MOZJPEG
   25:                      #error "Insufficient JPEG library version ($MOZJPEG required)."
   25:                      #endif ],
   25:                    SYSTEM_JPEG=1,
   25:                    [SYSTEM_JPEG= JPEG_CFLAGS= JPEG_LIBS=])
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test -n "${JPEG_DIR}" -a -d "${JPEG_DIR}" -a "$SYSTEM_JPEG" = 1; then
    1:     JPEG_CFLAGS="-I${JPEG_DIR}/include"
    1:     JPEG_LIBS="-L${JPEG_DIR}/lib ${JPEG_LIBS}"
    1: fi
    1: 
    1: dnl system ZLIB support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-zlib,
    1: [  --with-system-zlib[=PFX]
    1:                           Use system libz [installed at prefix PFX]],
    1:     ZLIB_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${ZLIB_DIR}" -a "${ZLIB_DIR}" != "yes"; then
    1:     CFLAGS="-I${ZLIB_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${ZLIB_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$ZLIB_DIR" -o "$ZLIB_DIR" = no; then
    1:     SYSTEM_ZLIB=
    1: else
    1:     AC_CHECK_LIB(z, gzread, [SYSTEM_ZLIB=1 ZLIB_LIBS="-lz $ZLIB_LIBS"],
    1: 	[SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=], $ZLIB_LIBS)
    1: fi
    1: if test "$SYSTEM_ZLIB" = 1; then
    1:     LIBS="$ZLIB_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <string.h>
   25:                      #include <zlib.h> ],
   25:                    [ #if ZLIB_VERNUM < $MOZZLIB
   25:                      #error "Insufficient zlib version ($MOZZLIB required)."
   25:                      #endif ],
   25:                    SYSTEM_ZLIB=1,
   25:                    [SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=])
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${ZLIB_DIR}" -a -d "${ZLIB_DIR}" -a "$SYSTEM_ZLIB" = 1; then
    1:     ZLIB_CFLAGS="-I${ZLIB_DIR}/include"
    1:     ZLIB_LIBS="-L${ZLIB_DIR}/lib ${ZLIB_LIBS}"
    1: fi
    1: 
87076: if test "$MOZ_LINKER" = 1 -a "$SYSTEM_ZLIB" != 1; then
87076:     AC_MSG_ERROR([Custom dynamic linker requires --with-system-zlib])
87076: fi
87076: 
12936: dnl system BZIP2 Support
12936: dnl ========================================================
12936: MOZ_ARG_WITH_STRING(system-bz2,
12936: [  --with-system-bz2[=PFX]
12936:                           Use system libbz2 [installed at prefix PFX]],
12936:     BZ2_DIR=$withval)
12936: 
12936: _SAVE_CFLAGS=$CFLAGS
12936: _SAVE_LDFLAGS=$LDFLAGS
12936: _SAVE_LIBS=$LIBS
12936: if test -n "${BZ2_DIR}" -a "${BZ2_DIR}" != "yes"; then
12936:     CFLAGS="-I${BZ2_DIR}/include $CFLAGS"
12936:     LDFLAGS="-L${BZ2_DIR}/lib $LDFLAGS"
12936: fi
12936: if test -z "$BZ2_DIR" -o "$BZ2_DIR" = no; then
12936:     SYSTEM_BZ2=
12936: else
12936:     AC_CHECK_LIB(bz2, BZ2_bzread, [SYSTEM_BZ2=1 BZ2_LIBS="-lbz2"],
41159: 	[SYSTEM_BZ2= BZ2_CFLAGS= BZ2_LIBS=])
12936: fi
12936: CFLAGS=$_SAVE_CFLAGS
12936: LDFLAGS=$_SAVE_LDFLAGS
12936: LIBS=$_SAVE_LIBS
12936: 
12936: if test "${BZ2_DIR}" -a -d "${BZ2_DIR}" -a "$SYSTEM_BZ2" = 1; then
12936:     BZ2_CFLAGS="-I${BZ2_DIR}/include"
41159:     BZ2_LIBS="-L${BZ2_DIR}/lib ${BZ2_LIBS}"
12936: fi
12936: 
    1: dnl system PNG Support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-png,
    1: [  --with-system-png[=PFX]
    1:                           Use system libpng [installed at prefix PFX]],
    1:     PNG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: CFLAGS="$ZLIB_CFLAGS $CFLAGS"
    1: LDFLAGS="$ZLIB_LIBS -lz $LDFLAGS"
    1: if test -n "${PNG_DIR}" -a "${PNG_DIR}" != "yes"; then
    1:     CFLAGS="-I${PNG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${PNG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$PNG_DIR" -o "$PNG_DIR" = no; then
    1:     SYSTEM_PNG=
    1: else
    1:     _SAVE_PNG_LIBS=$PNG_LIBS
    1:     AC_CHECK_LIB(png, png_get_valid, [SYSTEM_PNG=1 PNG_LIBS="-lpng $PNG_LIBS"],
 2532:                  AC_MSG_ERROR([--with-system-png requested but no working libpng found]),
 2532:                  $PNG_LIBS)
  663:     AC_CHECK_LIB(png, png_get_acTL, ,
 2532:                  AC_MSG_ERROR([--with-system-png won't work because the system's libpng doesn't have APNG support]),
 2532:                  $_SAVE_PNG_LIBS)
    1: fi
    1: if test "$SYSTEM_PNG" = 1; then
    1:     LIBS="$PNG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <png.h> ],
   25:                    [ #if PNG_LIBPNG_VER < $MOZPNG
   25:                      #error "Insufficient libpng version ($MOZPNG required)."
    1:                      #endif
   25:                      #ifndef PNG_UINT_31_MAX
   25:                      #error "Insufficient libpng version."
   25:                      #endif ],
   25:                    SYSTEM_PNG=1,
 2532:                    AC_MSG_ERROR([--with-system-png requested but no working libpng found]))
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${PNG_DIR}" -a -d "${PNG_DIR}" -a "$SYSTEM_PNG" = 1; then
    1:     PNG_CFLAGS="-I${PNG_DIR}/include"
    1:     PNG_LIBS="-L${PNG_DIR}/lib ${PNG_LIBS}"
    1: fi
    1: 
    1: fi # SKIP_LIBRARY_CHECKS
    1: 
11718: dnl system HunSpell Support
11718: dnl ========================================================
11718: MOZ_ARG_ENABLE_BOOL(system-hunspell,
43027: [  --enable-system-hunspell
43027:                           Use system hunspell (located with pkgconfig)],
11718:     SYSTEM_HUNSPELL=1 )
11718: 
11718: if test -n "$SYSTEM_HUNSPELL"; then
11718:     PKG_CHECK_MODULES(MOZ_HUNSPELL, hunspell)
11718: fi
11718: 
11718: AC_SUBST(SYSTEM_HUNSPELL)
11718: 
    1: dnl ========================================================
74349: dnl system libffi Support
74349: dnl ========================================================
74349: MOZ_ARG_ENABLE_BOOL(system-ffi,
74349: [  --enable-system-ffi       Use system libffi (located with pkgconfig)],
74349:     MOZ_NATIVE_FFI=1 )
74349: 
74349: if test -n "$MOZ_NATIVE_FFI"; then
74349:     # Vanilla libffi 3.0.9 needs a few patches from upcoming version 3.0.10
74349:     # for non-GCC compilers.
74349:     if test -z "$GNU_CC"; then
74349:         PKG_CHECK_MODULES(MOZ_FFI, libffi > 3.0.9)
74349:     else
74349:         PKG_CHECK_MODULES(MOZ_FFI, libffi >= 3.0.9)
74349:     fi
74349:     MOZ_JS_STATIC_LIBS="$MOZ_JS_STATIC_LIBS $MOZ_FFI_LIBS"
74349: fi
74349: 
74349: dnl ========================================================
    1: dnl Java SDK support
    1: dnl ========================================================
    1: 
    1: JAVA_BIN_PATH=
    1: MOZ_ARG_WITH_STRING(java-bin-path,
43027: [  --with-java-bin-path=dir
43027:                           Location of Java binaries (java, javac, jar)],
    1:     JAVA_BIN_PATH=$withval)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Application
    1: dnl =
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_HEADER(Application)
    1: 
    1: ENABLE_TESTS=1
80496: ENABLE_SYSTEM_EXTENSION_DIRS=1
    1: MOZ_BRANDING_DIRECTORY=
32277: MOZ_OFFICIAL_BRANDING=
    1: MOZ_FEEDS=1
93421: MOZ_FLEXBOX=
95600: MOZ_WEBAPP_RUNTIME=
    1: MOZ_JSDEBUGGER=1
    1: MOZ_AUTH_EXTENSION=1
16302: MOZ_OGG=1
55277: MOZ_RAW=
21394: MOZ_SYDNEYAUDIO=
89287: MOZ_CUBEB=
43342: MOZ_VORBIS=
56071: MOZ_TREMOR=
21394: MOZ_WAVE=1
15751: MOZ_MEDIA=
43342: MOZ_WEBM=1
80366: MOZ_VP8_ERROR_CONCEALMENT=
80367: MOZ_VP8_ENCODER=
43343: VPX_AS=
43343: VPX_ASFLAGS=
57090: VPX_AS_DASH_C_FLAG=
57090: VPX_AS_CONVERSION=
57090: VPX_ASM_SUFFIX=
43343: VPX_X86_ASM=
57090: VPX_ARM_ASM=
64166: LIBJPEG_TURBO_AS=
64166: LIBJPEG_TURBO_ASFLAGS=
64166: LIBJPEG_TURBO_X86_ASM=
64166: LIBJPEG_TURBO_X64_ASM=
90293: LIBJPEG_TURBO_ARM_ASM=
39052: MOZ_PANGO=1
    1: MOZ_PERMISSIONS=1
40035: MOZ_PLACES=1
    1: MOZ_PREF_EXTENSIONS=1
    1: MOZ_PROFILELOCKING=1
    1: MOZ_PSM=1
    1: MOZ_REFLOW_PERF=
    1: MOZ_SAFE_BROWSING=
13679: MOZ_HELP_VIEWER=
    1: MOZ_SPELLCHECK=1
82230: MOZ_JAVA_COMPOSITOR=
89306: MOZ_ONLY_TOUCH_EVENTS=
70848: MOZ_SVG_DLISTS=
39184: MOZ_TOOLKIT_SEARCH=1
    1: MOZ_UI_LOCALE=en-US
    1: MOZ_UNIVERSALCHARDET=1
    1: MOZ_URL_CLASSIFIER=
    1: MOZ_XTF=1
    1: MOZ_XUL=1
 5938: MOZ_ZIPWRITER=1
    1: NS_PRINTING=1
57613: MOZ_PDF_PRINTING=
54926: MOZ_DISABLE_DOMCRYPTO=
43128: NSS_DISABLE_DBM=
26270: NECKO_WIFI=1
    1: NECKO_COOKIES=1
78958: NECKO_PROTOCOLS_DEFAULT="about data file ftp http res viewsource websocket wyciwyg device"
43128: USE_ARM_KUSER=
39469: BUILD_CTYPES=1
72208: MOZ_USE_NATIVE_POPUP_WINDOWS=
82443: MOZ_ANDROID_HISTORY=
88349: MOZ_WEBSMS_BACKEND=
84952: MOZ_GRAPHITE=1
55800: 
56461: case "${target}" in
82578: *darwin*)
    1:     ACCESSIBILITY=
    1:     ;;
    1: *)
    1:     ACCESSIBILITY=1
    1:     ;;
    1: esac
    1: 
    1: case "$target_os" in
63450:     mingw*)
31956:         NS_ENABLE_TSF=1
31956:         AC_DEFINE(NS_ENABLE_TSF)
    1:         ;;
    1: esac
    1: 
43128: case "${target}" in
70914:     *-android*|*-linuxandroid*)
79443:         if test "$CPU_ARCH" = "arm" ; then
79443:           USE_ARM_KUSER=1
79443:         fi
79443: 
43128:         NSS_DISABLE_DBM=1
43128:         NECKO_WIFI=
43128:         MOZ_THEME_FASTSTRIPE=1
43128:         MOZ_TREE_FREETYPE=1
43128:         MOZ_MEMORY=1
81019:         MOZ_RAW=1
43128:         ;;
43128: esac
43128: 
    1: MOZ_ARG_ENABLE_STRING(application,
    1: [  --enable-application=APP
    1:                           Options include:
    1:                             browser (Firefox)
    1:                             xulrunner
77187:                             tools/update-packaging (AUS-related packaging tools)],
    1: [ MOZ_BUILD_APP=$enableval ] )
    1: 
 6837: MOZ_ARG_WITH_STRING(xulrunner-stub-name,
 6837: [  --with-xulrunner-stub-name=appname   Create the xulrunner stub with the given name],
 6837:   XULRUNNER_STUB_NAME=$withval)
 6837: 
 6837: if test -z "$XULRUNNER_STUB_NAME"; then
 6837:   case "$target_os" in
 6837:   darwin*)
 6837:     XULRUNNER_STUB_NAME=xulrunner
 6837:     ;;
 6837:   *)
 6837:     XULRUNNER_STUB_NAME=xulrunner-stub
 6837:   esac
 6837: fi
 6837: AC_SUBST(XULRUNNER_STUB_NAME)
 6837: 
64011: AC_MSG_CHECKING([for application to build])
 1796: if test -z "$MOZ_BUILD_APP"; then
64011:   AC_MSG_RESULT([browser])
64011:   MOZ_BUILD_APP=browser
 1796: else
82361:   # default mobile to be mobile/xul
82361:   if test "$MOZ_BUILD_APP" = "mobile" ; then
82361:     MOZ_BUILD_APP=mobile/xul
82361:   fi
 1796:   # We have a valid application only if it has a build.mk file in its top
 1796:   # directory.
 1796:   if test ! -f "${srcdir}/${MOZ_BUILD_APP}/build.mk" ; then
64011:     AC_MSG_RESULT([none])
 1796:     AC_MSG_ERROR([--enable-application value not recognized (${MOZ_BUILD_APP}/build.mk does not exist).])
64011:   else
64011:     AC_MSG_RESULT([$MOZ_BUILD_APP])
 1796:   fi
 1796: fi
 1796: 
 1796: # Allow the application to influence configure with a confvars.sh script.
55800: 
 1796: AC_MSG_CHECKING([if app-specific confvars.sh exists])
 1796: if test -f "${srcdir}/${MOZ_BUILD_APP}/confvars.sh" ; then
 1796:   AC_MSG_RESULT([${srcdir}/${MOZ_BUILD_APP}/confvars.sh])
 1832:   . "${srcdir}/${MOZ_BUILD_APP}/confvars.sh"
 1796: else
 1796:   AC_MSG_RESULT([no])
 1796: fi
 1796: 
80496: # Allow someone to change MOZ_APP_NAME and MOZ_APP_BASENAME in mozconfig
68555: MOZ_ARG_WITH_STRING(app-name,
68555: [--with-app-name=APPNAME sets MOZ_APP_NAME to APPNAME],
68555: WITH_APP_NAME=$withval,
68555: )
68555: 
68555: if test -n "$WITH_APP_NAME" ; then
68555:     MOZ_APP_NAME="$WITH_APP_NAME"
68555: fi
68555: 
80496: MOZ_ARG_WITH_STRING(app-basename,
80496: [--with-app-basename=BASENAME sets MOZ_APP_BASENAME to BASENAME],
80496: WITH_APP_BASENAME=$withval,
80496: )
80496: 
80496: if test -n "$WITH_APP_BASENAME" ; then
80496:     MOZ_APP_BASENAME="$WITH_APP_BASENAME"
80496: fi
80496: 
 1796: # Now is a good time to test for logic errors, define mismatches, etc.
 1796: case "$MOZ_BUILD_APP" in
 1796: xulrunner)
 1796:   if test "$LIBXUL_SDK"; then
 1796:     AC_MSG_ERROR([Building XULRunner --with-libxul-sdk doesn't make sense; XULRunner provides the libxul SDK.])
 1796:   fi
 1796:   ;;
 1796: esac
 1796: 
 1796: # Special cases where we need to AC_DEFINE something. Also a holdover for apps
 1796: # that haven't made a confvars.sh yet. Don't add new stuff here, use
 1796: # MOZ_BUILD_APP.
    1: case "$MOZ_BUILD_APP" in
    1: browser)
    1:   AC_DEFINE(MOZ_PHOENIX)
    1:   ;;
    1: 
    1: xulrunner)
    1:   AC_DEFINE(MOZ_XULRUNNER)
    1:   ;;
    1: esac
    1: 
    1: AC_SUBST(MOZ_BUILD_APP)
    1: AC_SUBST(MOZ_PHOENIX)
    1: AC_SUBST(MOZ_XULRUNNER)
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_BUILD_APP,$MOZ_BUILD_APP)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Toolkit Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Toolkit Options)
    1: 
    1:     dnl ========================================================
    1:     dnl = Select the default toolkit
    1:     dnl ========================================================
    1: 	MOZ_ARG_ENABLE_STRING(default-toolkit,
    1: 	[  --enable-default-toolkit=TK
    1:                           Select default toolkit
    1:                           Platform specific defaults:
  346:                             Mac OS X - cairo-cocoa
  346:                             OS/2 - cairo-os2
68662:                             Win32 - cairo-windows
16757:                             * - cairo-gtk2
16757:                             * - cairo-qt],
    1:     [ _DEFAULT_TOOLKIT=$enableval ],
    1:     [ _DEFAULT_TOOLKIT=$_PLATFORM_DEFAULT_TOOLKIT])
    1: 
75186:     if test "$_DEFAULT_TOOLKIT" = "cairo-windows" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2" \
16526:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2-x11" \
16757:         -o "$_DEFAULT_TOOLKIT" = "cairo-qt" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-os2" \
42466:         -o "$_DEFAULT_TOOLKIT" = "cairo-cocoa" \
77587:         -o "$_DEFAULT_TOOLKIT" = "cairo-uikit" \
82142:         -o "$_DEFAULT_TOOLKIT" = "cairo-android" \
82142:         -o "$_DEFAULT_TOOLKIT" = "cairo-gonk"
    1:     then
    1:         dnl nglayout only supports building with one toolkit,
    1:         dnl so ignore everything after the first comma (",").
    1:         MOZ_WIDGET_TOOLKIT=`echo "$_DEFAULT_TOOLKIT" | sed -e "s/,.*$//"`
    1:     else
16526:         AC_MSG_ERROR([You must specify a default toolkit (perhaps $_PLATFORM_DEFAULT_TOOLKIT).])
    1:     fi
    1: 
92022: MOZ_ARG_WITHOUT_BOOL(x,
92022: [  --without-x              Build without X11],
92022:     WITHOUT_X11=1)
92022: 
    1: dnl ========================================================
    1: dnl = Enable the toolkit as needed                         =
    1: dnl ========================================================
    1: 
    1: case "$MOZ_WIDGET_TOOLKIT" in
    1: 
    1: cairo-windows)
    1:     MOZ_WIDGET_TOOLKIT=windows
34228:     MOZ_WEBGL=1
57613:     MOZ_PDF_PRINTING=1
68748:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
    1: 
16526: cairo-gtk2|cairo-gtk2-x11)
    1:     MOZ_WIDGET_TOOLKIT=gtk2
    1:     MOZ_ENABLE_GTK2=1
    1:     MOZ_ENABLE_XREMOTE=1
34228:     MOZ_WEBGL=1
93982:     MOZ_GL_DEFAULT_PROVIDER=GLX
16526: 
16526:     AC_DEFINE(MOZ_X11)
16526:     MOZ_X11=1
35250:     USE_FC_FREETYPE=1
16526: 
 3585:     TK_CFLAGS='$(MOZ_GTK2_CFLAGS)'
 3585:     TK_LIBS='$(MOZ_GTK2_LIBS)'
    1:     AC_DEFINE(MOZ_WIDGET_GTK2)
57613:     MOZ_PDF_PRINTING=1
68747:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
16526: 
16757: cairo-qt)
16757:     MOZ_WIDGET_TOOLKIT=qt
16757:     MOZ_ENABLE_QT=1
92022:     if test -z "$WITHOUT_X11"; then
16757:       MOZ_ENABLE_XREMOTE=1
93982:       MOZ_GL_DEFAULT_PROVIDER=GLX
92022:       MOZ_X11=1
92022:       AC_DEFINE(MOZ_X11)
92022:       XT_LIBS=
92022:     fi
92022: 
40145:     MOZ_WEBGL=1
19858:     USE_ELF_DYNSTR_GC=
35250:     USE_FC_FREETYPE=1
16757:     TK_CFLAGS='$(MOZ_QT_CFLAGS)'
16757:     TK_LIBS='$(MOZ_QT_LIBS)'
16757:     AC_DEFINE(MOZ_WIDGET_QT)
57613:     MOZ_PDF_PRINTING=1
16757:     ;;
16958: 
    1: cairo-os2)
    1:     MOZ_WIDGET_TOOLKIT=os2
35250:     USE_FC_FREETYPE=1
    1:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
    1:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
57613:     MOZ_PDF_PRINTING=1
    1:     ;;
    1: 
22484: cairo-cocoa)
    1:     MOZ_WIDGET_TOOLKIT=cocoa
    1:     AC_DEFINE(MOZ_WIDGET_COCOA)
77587:     LDFLAGS="$LDFLAGS -framework Cocoa -lobjc"
77114:     TK_LIBS='-framework QuartzCore -framework Carbon -framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework AddressBook -framework OpenGL'
27353:     TK_CFLAGS="-DNO_X11"
    1:     CFLAGS="$CFLAGS $TK_CFLAGS"
    1:     CXXFLAGS="$CXXFLAGS $TK_CFLAGS"
38009:     LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
77587:     MOZ_USER_DIR="Mozilla"
27353:     MOZ_FS_LAYOUT=bundle
34228:     MOZ_WEBGL=1
68749:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
42466: 
77587: cairo-uikit)
77587:     MOZ_WIDGET_TOOLKIT=uikit
77587:     AC_DEFINE(MOZ_WIDGET_UIKIT)
77587:     LDFLAGS="$LDFLAGS -framework UIKit -lobjc"
77587:     TK_CFLAGS="-DNO_X11"
77587:     TK_LIBS='-framework Foundation -framework CoreFoundation -framework CoreGraphics -framework CoreText'
77587:     CFLAGS="$CFLAGS $TK_CFLAGS"
77587:     CXXFLAGS="$CXXFLAGS $TK_CFLAGS"
77587:     LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
77587:     MOZ_USER_DIR="Mozilla"
77587:     MOZ_FS_LAYOUT=bundle
77587:     ;;
77587: 
42466: cairo-android)
42466:     AC_DEFINE(MOZ_WIDGET_ANDROID)
42466:     MOZ_WIDGET_TOOLKIT=android
57613:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
57613:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
51421:     MOZ_WEBGL=1
57613:     MOZ_PDF_PRINTING=1
81028:     MOZ_INSTRUMENT_EVENT_LOOP=1
87909:     if test "$MOZ_BUILD_APP" = "mobile/xul"; then
87076:         MOZ_OLD_LINKER=1
87909:     fi
42466:     ;;
42466: 
82142: cairo-gonk)
82142:     AC_DEFINE(MOZ_WIDGET_GONK)
88602:     AC_DEFINE(MOZ_TOUCH)
82142:     MOZ_WIDGET_TOOLKIT=gonk
82142:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
82142:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
82142:     MOZ_WEBGL=1
82142:     MOZ_PDF_PRINTING=1
88602:     MOZ_TOUCH=1
82142:     ;;
82142: 
    1: esac
    1: 
87076: AC_SUBST(MOZ_OLD_LINKER)
57613: AC_SUBST(MOZ_PDF_PRINTING)
57613: if test "$MOZ_PDF_PRINTING"; then
57613:    PDF_SURFACE_FEATURE="#define CAIRO_HAS_PDF_SURFACE 1"
57613:    AC_DEFINE(MOZ_PDF_PRINTING)
57613: fi
57613: 
    1: if test "$MOZ_ENABLE_XREMOTE"; then
    1:     AC_DEFINE(MOZ_ENABLE_XREMOTE)
    1: fi
    1: 
68747: if test "$MOZ_INSTRUMENT_EVENT_LOOP"; then
68747:    AC_DEFINE(MOZ_INSTRUMENT_EVENT_LOOP)
68747: fi
68747: 
    1: if test "$COMPILE_ENVIRONMENT"; then
16526:   if test "$MOZ_ENABLE_GTK2"; then
16526:     if test "$MOZ_X11"; then
16526:       GDK_PACKAGES=gdk-x11-2.0
16526:     fi
16526: 
16526:     PKG_CHECK_MODULES(MOZ_GTK2, gtk+-2.0 >= $GTK2_VERSION gtk+-unix-print-2.0 glib-2.0 gobject-2.0 $GDK_PACKAGES)
16526:   fi
16526: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
27353: AC_SUBST(MOZ_FS_LAYOUT)
    1: 
    1: dnl ========================================================
43128: dnl Use ARM userspace kernel helpers; tell NSPR to enable
43128: dnl their usage and use them in spidermonkey.
43128: dnl ========================================================
43128: MOZ_ARG_WITH_BOOL(arm-kuser,
43128: [  --with-arm-kuser         Use kuser helpers (Linux/ARM only -- requires kernel 2.6.13 or later)],
43128:     USE_ARM_KUSER=1,)
43128: if test -n "$USE_ARM_KUSER"; then
43128:    AC_DEFINE(USE_ARM_KUSER)
43128: fi
43128: 
43128: dnl ========================================================
    1: dnl = startup-notification support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_STARTUP_NOTIFICATION=
    1: 
    1:     MOZ_ARG_ENABLE_BOOL(startup-notification,
43027:     [  --enable-startup-notification
43027:                           Enable startup-notification support (default: disabled) ],
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=force,
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=)
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_STARTUP_NOTIFICATION,
    1:                           libstartup-notification-1.0 >= $STARTUP_NOTIFICATION_VERSION,
    1:         [MOZ_ENABLE_STARTUP_NOTIFICATION=1], [
    1:             if test "$MOZ_ENABLE_STARTUP_NOTIFICATION" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find startup-notification >= $STARTUP_NOTIFICATION_VERSION])
    1:             fi
    1:             MOZ_ENABLE_STARTUP_NOTIFICATION=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"; then
    1:         AC_DEFINE(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1:     fi
    1: 
    1:     TK_LIBS="$TK_LIBS $MOZ_STARTUP_NOTIFICATION_LIBS"
    1: fi
    1: AC_SUBST(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_CFLAGS)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_LIBS)
    1: 
16757: dnl ========================================================
16757: dnl = QT support
16757: dnl ========================================================
16757: if test "$MOZ_ENABLE_QT"
16757: then
16757:     MOZ_ARG_WITH_STRING(qtdir,
16757:     [  --with-qtdir=\$dir       Specify Qt directory ],
16757:     [ QTDIR=$withval])
16757: 
16757:     if test -z "$QTDIR"; then
40144:         PKG_CHECK_MODULES(MOZ_QT, QtGui QtNetwork QtCore QtOpenGL)
94111:         PKG_CHECK_MODULES(MOZ_QT5, QtWidgets QtMultimedia QtPrintSupport QtQuick1,
94111:                       MOZ_ENABLE_QT5=1,
94111:                       MOZ_ENABLE_QT5=)
94111:         if test "$MOZ_ENABLE_QT5"; then
94111:             echo "Using qt5"
94111:             MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS $MOZ_QT5_CFLAGS"
94111:             MOZ_QT_LIBS="$MOZ_QT_LIBS $MOZ_QT5_LIBS"
94111:         fi
94111: 
50722:         AC_CHECK_PROGS(HOST_MOC, $MOC moc, "")
86189:         AC_CHECK_PROGS(HOST_RCC, $RCC rcc, "")
39111:     else
77137:         MOZ_QT_LIBS="-L$QTDIR/lib/ -lQtGui -lQtNetwork -lQtCore -lQtXml -lQtOpenGL"
39111: 
39111:         MOZ_QT_CFLAGS="-DQT_SHARED"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/Qt"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtGui"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtCore"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtNetwork"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtXml"
94111:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtDeclarative"
39711:         HOST_MOC="$QTDIR/bin/moc"
86189:         HOST_RCC="$QTDIR/bin/rcc"
94111: 
94111:         # QtWidgets was introduced only in Qt5
94111:         if test -d $QTDIR/include/QtWidgets; then
94111:             echo "Using qt5"
94111:             MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtWidgets"
94111:             MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtMultimedia"
94111:             MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtPrintSupport"
94111:             MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtQuick1"
94111:             MOZ_QT_LIBS="$MOZ_QT_LIBS -lQtWidgets -lQtMultimedia -lQtPrintSupport -lQtQuick1"
94111:         fi
16757:     fi
16757:     if test -z "$HOST_MOC"; then
39111:         AC_MSG_ERROR([No acceptable moc preprocessor found. Qt SDK is not installed or --with-qt is
39111: incorrect])
16757:     fi
86189:     if test -z "$HOST_RCC"; then
86189:         AC_MSG_ERROR([No acceptable rcc preprocessor found. Qt SDK is not installed or --with-qt is
86189: incorrect])
86189:     fi
86189: 
16757:     MOC=$HOST_MOC
86189:     RCC=$HOST_RCC
51789: 
70890:     MOZ_ENABLE_QMSYSTEM2=
70890:     PKG_CHECK_MODULES(_QMSYSTEM2, qmsystem2,
70890:                       MOZ_ENABLE_QMSYSTEM2=1,
70890:                       MOZ_ENABLE_QMSYSTEM2=)
70890: 
70890:     if test "$MOZ_ENABLE_QMSYSTEM2"; then
70890:       MOZ_ENABLE_QMSYSTEM2=1
70890:       MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS $_QMSYSTEM2_CFLAGS"
70890:       MOZ_QT_LIBS="$MOZ_QT_LIBS $_QMSYSTEM2_LIBS"
70890:       AC_DEFINE(MOZ_ENABLE_QMSYSTEM2)
70890:     fi
70890: 
51789:     MOZ_ENABLE_QTNETWORK=
51789:     PKG_CHECK_MODULES(_QTNETWORK, QtNetwork >= 4.7,
51789:                       MOZ_ENABLE_QTNETWORK=1,
51789:                       MOZ_ENABLE_QTNETWORK=)
51789: 
51789:     if test "$MOZ_ENABLE_QTNETWORK"; then
51789:       MOZ_ENABLE_QTNETWORK=1
51789:       AC_DEFINE(MOZ_ENABLE_QTNETWORK)
51789:     fi
63422: 
63422:     MOZ_ENABLE_QTMOBILITY=
76802:     PKG_CHECK_MODULES(_QTMOBILITY, QtSensors QtFeedback QtLocation,
63422:                       MOZ_ENABLE_QTMOBILITY=1,
63422:                       MOZ_ENABLE_QTMOBILITY=)
63422:     if test "$MOZ_ENABLE_QTMOBILITY"; then
63422:        MOZ_ENABLE_QTMOBILITY=1
63422:        MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS $_QTMOBILITY_CFLAGS"
63422:        MOZ_QT_LIBS="$MOZ_QT_LIBS $_QTMOBILITY_LIBS"
63422:     else
77068:        AC_CHECK_LIB(QtSensors, main, [
63422:           MOZ_ENABLE_QTMOBILITY=1
91400:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtMobility"
91400:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtSensors"
91400:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtFeedback"
91400:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtLocation"
76802:           MOZ_QT_LIBS="$MOZ_QT_LIBS -lQtSensors -lQtFeedback -lQtLocation"
63422:        ])
63422:     fi
63422:     if test "$MOZ_ENABLE_QTMOBILITY"; then
63422:        AC_DEFINE(MOZ_ENABLE_QTMOBILITY)
63422:     fi
16757: fi
16757: 
    1: AC_SUBST(GTK_CONFIG)
    1: AC_SUBST(TK_CFLAGS)
    1: AC_SUBST(TK_LIBS)
    1: 
    1: AC_SUBST(MOZ_ENABLE_GTK2)
16757: AC_SUBST(MOZ_ENABLE_QT)
51789: AC_SUBST(MOZ_ENABLE_QTNETWORK)
70890: AC_SUBST(MOZ_ENABLE_QMSYSTEM2)
63422: AC_SUBST(MOZ_ENABLE_QTMOBILITY)
    1: AC_SUBST(MOZ_ENABLE_XREMOTE)
    1: AC_SUBST(MOZ_GTK2_CFLAGS)
    1: AC_SUBST(MOZ_GTK2_LIBS)
16757: AC_SUBST(MOZ_QT_CFLAGS)
16757: AC_SUBST(MOZ_QT_LIBS)
    1: 
    1: AC_SUBST(MOC)
86189: AC_SUBST(RCC)
    1: 
    1: AC_SUBST(MOZ_X11)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Components & Features
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Components and Features)
    1: 
    1: dnl ========================================================
    1: dnl = Localization
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(ui-locale,
    1: [  --enable-ui-locale=ab-CD
    1:                           Select the user interface locale (default: en-US)],
    1:     MOZ_UI_LOCALE=$enableval )
    1: AC_SUBST(MOZ_UI_LOCALE)
    1: 
    1: dnl ========================================================
    1: dnl = Trademarked Branding
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(official-branding,
43027: [  --enable-official-branding
43027:                           Enable Official mozilla.org Branding
    1:                           Do not distribute builds with
    1:                           --enable-official-branding unless you have
    1:                           permission to use trademarks per
    1:                           http://www.mozilla.org/foundation/trademarks/ .],
32235: [
32235:   if test -z "$MOZ_OFFICIAL_BRANDING_DIRECTORY"; then
32235:     AC_MSG_ERROR([You must specify MOZ_OFFICIAL_BRANDING_DIRECTORY to use --enable-official-branding.])
32235:   else
32235:     MOZ_BRANDING_DIRECTORY=${MOZ_OFFICIAL_BRANDING_DIRECTORY}
32277:     MOZ_OFFICIAL_BRANDING=1
32277:   fi
32277: ], MOZ_OFFICIAL_BRANDING=)
32277: 
32277: AC_SUBST(MOZ_OFFICIAL_BRANDING)
32277: if test -n "$MOZ_OFFICIAL_BRANDING"; then
32277:   AC_DEFINE(MOZ_OFFICIAL_BRANDING)
32277: fi
    1: 
    1: MOZ_ARG_WITH_STRING(branding,
    1: [  --with-branding=dir     Use branding from the specified directory.],
    1:     MOZ_BRANDING_DIRECTORY=$withval)
    1: 
    1: REAL_BRANDING_DIRECTORY="${MOZ_BRANDING_DIRECTORY}"
    1: if test -z "$REAL_BRANDING_DIRECTORY"; then
    1:   REAL_BRANDING_DIRECTORY=${MOZ_BUILD_APP}/branding/nightly
    1: fi
    1: 
39743: if test -f "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"; then
39743:   . "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"
    1: fi
    1: 
    1: AC_SUBST(MOZ_BRANDING_DIRECTORY)
    1: 
    1: dnl ========================================================
    1: dnl = Distribution ID
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(distribution-id,
43027: [  --with-distribution-id=ID
43027:                           Set distribution-specific id (default=org.mozilla)],
    1: [ val=`echo $withval`
    1:     MOZ_DISTRIBUTION_ID="$val"])
    1: 
    1: if test -z "$MOZ_DISTRIBUTION_ID"; then
    1:    MOZ_DISTRIBUTION_ID="org.mozilla"
    1: fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_DISTRIBUTION_ID,"$MOZ_DISTRIBUTION_ID")
    1: AC_SUBST(MOZ_DISTRIBUTION_ID)
    1: 
16526: 
16526: dnl ========================================================
16526: dnl complex text support off by default
16526: dnl ========================================================
16526: MOZ_ARG_DISABLE_BOOL(pango,
16526: [  --disable-pango         Disable usage of Pango ],
16526:     MOZ_PANGO=,
16526:     MOZ_PANGO=1)
16526: 
    1: dnl ========================================================
19744: dnl = Pango
10568: dnl ========================================================
10568: if test "$MOZ_ENABLE_GTK2"
    1: then
16526:     AC_SUBST(MOZ_PANGO)
    1: 
10568:     PKG_CHECK_MODULES(_PANGOCHK, pango >= $PANGO_VERSION)
16526: 
57292:     PKG_CHECK_MODULES(MOZ_PANGO, pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION pangocairo >= $PANGO_VERSION)
    1:     AC_SUBST(MOZ_PANGO_CFLAGS)
    1:     AC_SUBST(MOZ_PANGO_LIBS)
39052:     if test "$MOZ_PANGO"
39052:     then
16526:         AC_DEFINE(MOZ_PANGO)
16526:     else
16526:         PKG_CHECK_MODULES(FT2, freetype2 > 6.1.0 fontconfig)
16526:         AC_SUBST(FT2_CFLAGS)
16526:         AC_SUBST(FT2_LIBS)
16526:     fi
    1: fi
    1: 
39022: if test "$MOZ_ENABLE_QT"
39022: then
39022:     if test "$MOZ_PANGO"
39022:     then
57475:         PKG_CHECK_MODULES(MOZ_PANGO, [pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION pangocairo >= $PANGO_VERSION],
39022:         [
39022:             AC_SUBST(MOZ_PANGO_CFLAGS)
39022:             AC_SUBST(MOZ_PANGO_LIBS)
39022:             AC_DEFINE(MOZ_PANGO)
39022:         ],
39022:         [
39022:             echo "Pango library not found, will use FT2 font engine"
39022:             MOZ_PANGO=
39022:         ])
39022:     fi
39022:     AC_SUBST(MOZ_PANGO)
39022: fi
39022: 
    1: dnl ========================================================
36586: dnl = GnomeVFS, GIO and GConf support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_X11"
    1: then
    1:     dnl build the gnomevfs extension by default only when the
    1:     dnl GTK2 toolkit is in use.
    1:     if test "$MOZ_ENABLE_GTK2"
    1:     then
    1:         MOZ_ENABLE_GNOMEVFS=1
    1:         MOZ_ENABLE_GCONF=1
    1:     fi
    1: 
36586:     dnl ========================================================
36586:     dnl = GnomeVFS support module
36586:     dnl ========================================================
    1:     MOZ_ARG_DISABLE_BOOL(gnomevfs,
    1:     [  --disable-gnomevfs      Disable GnomeVFS support ],
    1:         MOZ_ENABLE_GNOMEVFS=,
    1:         MOZ_ENABLE_GNOMEVFS=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEVFS"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEVFS, gnome-vfs-2.0 >= $GNOMEVFS_VERSION gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION,[
    1:             MOZ_GNOMEVFS_LIBS=`echo $MOZ_GNOMEVFS_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEVFS=1
31951:             AC_DEFINE(MOZ_ENABLE_GNOMEVFS)
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEVFS" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEVFS=
    1:         ])
36599:     else
36599:         if test `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
36599:             PKG_CHECK_MODULES(MOZ_GNOMEVFS, gnome-vfs-2.0 >= $GNOMEVFS_VERSION gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION,[
36599:               MOZ_GNOMEVFS_LIBS=`echo $MOZ_GNOMEVFS_LIBS | sed 's/-llinc\>//'`
36599:             ])
36599:         fi
    1:     fi
    1: 
25956:     AC_SUBST(MOZ_ENABLE_GNOMEVFS)
    1:     AC_SUBST(MOZ_GNOMEVFS_CFLAGS)
    1:     AC_SUBST(MOZ_GNOMEVFS_LIBS)
    1: 
31951:     dnl ========================================================
31951:     dnl = GIO support module
31951:     dnl ========================================================
31951:     MOZ_ARG_ENABLE_BOOL(gio,
31951:     [  --enable-gio            Enable GIO support (default: disabled)],
31951:         MOZ_ENABLE_GIO=force,
31951:         MOZ_ENABLE_GIO=)
31951: 
31951:     if test "$MOZ_ENABLE_GIO" -a "$MOZ_ENABLE_GTK2"
31951:     then
71998:         PKG_CHECK_MODULES(_GTKCHECK, gtk+-2.0 >= 2.14, ,
71998:                           [AC_MSG_ERROR([* * * Could not find gtk+-2.0 > 2.14. Required for build with gio.])])
31951:         PKG_CHECK_MODULES(MOZ_GIO, gio-2.0 >= $GIO_VERSION,[
31951:             MOZ_GIO_LIBS=`echo $MOZ_GIO_LIBS | sed 's/-llinc\>//'`
31951:             MOZ_ENABLE_GIO=1
31951:             AC_DEFINE(MOZ_ENABLE_GIO)
31951:         ],[
31951:             if test "$MOZ_ENABLE_GIO" = "force"
31951:             then
31951:                 AC_MSG_ERROR([* * * Could not find gio-2.0 >= $GIO_VERSION])
31951:             fi
31951:             MOZ_ENABLE_GIO=
31951:         ])
31951:     fi
31951: 
31951:     AC_SUBST(MOZ_ENABLE_GIO)
31951:     AC_SUBST(MOZ_GIO_CFLAGS)
31951:     AC_SUBST(MOZ_GIO_LIBS)
36586: 
36586:     dnl ========================================================
36586:     dnl = GConf support module
36586:     dnl ========================================================
64650:     MOZ_ARG_DISABLE_BOOL(gconf,
64650:     [  --disable-gconf      Disable Gconf support ],
64650:         MOZ_ENABLE_GCONF=,
64650:         MOZ_ENABLE_GCONF=force)
64650: 
36586:     if test "$MOZ_ENABLE_GCONF"
36586:     then
36586:         PKG_CHECK_MODULES(MOZ_GCONF, gconf-2.0 >= $GCONF_VERSION gobject-2.0 ,[
86653:             MOZ_GCONF_LIBS=`$PKG_CONFIG --libs gobject-2.0`
36586:             MOZ_ENABLE_GCONF=1
36586:         ],[
36586:             if test "$MOZ_ENABLE_GCONF" = "force"
36586:             then
36586:                 AC_MSG_ERROR([* * * Could not find gconf-2.0 ])
36586:             fi
36586:             MOZ_ENABLE_GCONF=
36586:         ])
36586:     fi
36586: 
36586:     if test "$MOZ_ENABLE_GCONF"; then
36586:         AC_DEFINE(MOZ_ENABLE_GCONF)
36586:     fi
36586: 
36586:     AC_SUBST(MOZ_ENABLE_GCONF)
36586:     AC_SUBST(MOZ_GCONF_CFLAGS)
36586:     AC_SUBST(MOZ_GCONF_LIBS)
36586: fi
36586: 
36586: dnl ========================================================
48830: dnl = libproxy support
48830: dnl ========================================================
48830: 
60013: if test "$MOZ_ENABLE_GTK2" -o "$MOZ_ENABLE_QT"
48830: then
48830:     MOZ_ENABLE_LIBPROXY=
48830: 
48830:     MOZ_ARG_ENABLE_BOOL(libproxy,
48830:     [  --enable-libproxy         Enable libproxy support ],
48830:     MOZ_ENABLE_LIBPROXY=1,
48830:     MOZ_ENABLE_LIBPROXY=)
48830: 
48830:     if test "$MOZ_ENABLE_LIBPROXY"
48830:     then
48830:         PKG_CHECK_MODULES(MOZ_LIBPROXY, libproxy-1.0)
48830:         AC_DEFINE(MOZ_ENABLE_LIBPROXY)
48830:     fi
48830: fi
48830: AC_SUBST(MOZ_ENABLE_LIBPROXY)
48830: AC_SUBST(MOZ_LIBPROXY_CFLAGS)
48830: AC_SUBST(MOZ_LIBPROXY_LIBS)
48830: 
48830: dnl ========================================================
36586: dnl = libnotify support
36586: dnl ========================================================
36586: 
36586: if test "$MOZ_ENABLE_GTK2"
36586: then
36586:     MOZ_ENABLE_LIBNOTIFY=1
36586: 
36586:     MOZ_ARG_DISABLE_BOOL(libnotify,
36586:     [  --disable-libnotify     Disable libnotify support ],
36586:     MOZ_ENABLE_LIBNOTIFY=,
36586:     MOZ_ENABLE_LIBNOTIFY=1)
36586: 
36586:     if test "$MOZ_ENABLE_LIBNOTIFY"
36586:     then
36586:         AC_DEFINE(MOZ_ENABLE_LIBNOTIFY)
36586:     fi
36586: fi
36586: 
36586: if test -z "$SKIP_LIBRARY_CHECKS"
36586: then
36586:     if test "$MOZ_ENABLE_GTK2"
36586:     then
36586:         if test "$MOZ_ENABLE_LIBNOTIFY"
36586:         then
36586:             PKG_CHECK_MODULES(MOZ_LIBNOTIFY, libnotify >= $LIBNOTIFY_VERSION)
36586:         fi
36586:     fi
36586: fi
36586: AC_SUBST(MOZ_ENABLE_LIBNOTIFY)
36586: AC_SUBST(MOZ_LIBNOTIFY_CFLAGS)
36586: AC_SUBST(MOZ_LIBNOTIFY_LIBS)
36586: 
36586: dnl ========================================================
36586: dnl = GNOME component (mozgnome)
36586: dnl ========================================================
36586: 
36586: # The GNOME component is built if one of
36586: # gnome-vfs, gio, gconf or libnotify is available.
47975: if test "$MOZ_ENABLE_GCONF" -o \
47975:    "$MOZ_ENABLE_GNOMEVFS" -o \
47975:    "$MOZ_ENABLE_GIO" -o \
47975:    "$MOZ_ENABLE_LIBNOTIFY"; then
36586:     MOZ_ENABLE_GNOME_COMPONENT=1
36586: else
36586:     MOZ_ENABLE_GNOME_COMPONENT=
36586: fi
36586: AC_SUBST(MOZ_ENABLE_GNOME_COMPONENT)
    1: 
    1: dnl ========================================================
    1: dnl = libgnomeui support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_GNOMEUI=1
    1: 
    1:     MOZ_ARG_DISABLE_BOOL(gnomeui,
    1:     [  --disable-gnomeui       Disable libgnomeui support (default: auto, optional at runtime) ],
    1:         MOZ_ENABLE_GNOMEUI=,
    1:         MOZ_ENABLE_GNOMEUI=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEUI, libgnomeui-2.0 >= $GNOMEUI_VERSION,
    1:         [
    1:             MOZ_GNOMEUI_LIBS=`echo $MOZ_GNOMEUI_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEUI=1
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEUI" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find libgnomeui-2.0 >= $GNOMEUI_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEUI=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"; then
    1:         AC_DEFINE(MOZ_ENABLE_GNOMEUI)
    1:     fi
36586: fi
36586: 
    1: AC_SUBST(MOZ_ENABLE_GNOMEUI)
    1: AC_SUBST(MOZ_GNOMEUI_CFLAGS)
    1: AC_SUBST(MOZ_GNOMEUI_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = dbus support
    1: dnl ========================================================
    1: 
47975: if test "$MOZ_ENABLE_GTK2" -o "$MOZ_ENABLE_QT"
    1: then
 8250:     MOZ_ENABLE_DBUS=1
 8250: 
 8250:     MOZ_ARG_DISABLE_BOOL(dbus,
 8250:     [  --disable-dbus          Disable dbus support ],
 8250:         MOZ_ENABLE_DBUS=,
 8250:         MOZ_ENABLE_DBUS=1)
    1: 
    1:     if test "$MOZ_ENABLE_DBUS"
    1:     then
41237:         PKG_CHECK_MODULES(MOZ_DBUS, dbus-1 >= $DBUS_VERSION)
 8250:         PKG_CHECK_MODULES(MOZ_DBUS_GLIB, dbus-glib-1 >= $DBUS_VERSION)
    1:         AC_DEFINE(MOZ_ENABLE_DBUS)
    1:     fi
    1: fi
    1: AC_SUBST(MOZ_ENABLE_DBUS)
41237: AC_SUBST(MOZ_DBUS_CFLAGS)
41237: AC_SUBST(MOZ_DBUS_LIBS)
    1: AC_SUBST(MOZ_DBUS_GLIB_CFLAGS)
    1: AC_SUBST(MOZ_DBUS_GLIB_LIBS)
    1: 
    1: dnl ========================================================
84839: dnl = Enable Android History instead of Places
84839: dnl ========================================================
84839: if test -n "$MOZ_ANDROID_HISTORY"; then
84839:      dnl Do this if defined in confvars.sh
84839:      AC_DEFINE(MOZ_ANDROID_HISTORY)
84839: fi
84839: 
90510: 
90510: dnl ========================================================
90510: dnl = Build with the Android Java compositor
90510: dnl ========================================================
90510: if test -n "$MOZ_JAVA_COMPOSITOR"; then
90510:      dnl Do this if defined in confvars.sh
90510:      AC_DEFINE(MOZ_JAVA_COMPOSITOR)
90510: fi
90510: 
87553: dnl ========================================================
87553: dnl = Disable WebSMS backend
87553: dnl ========================================================
87553: MOZ_ARG_DISABLE_BOOL(websms-backend,
87553: [  --disable-websms-backend
87553:                            Disable WebSMS backend],
87553:     MOZ_WEBSMS_BACKEND=,
87553:     MOZ_WEBSMS_BACKEND=1)
87553: 
89882: if test -n "$MOZ_WEBSMS_BACKEND"; then
87553:     AC_DEFINE(MOZ_WEBSMS_BACKEND)
87553: fi
84839: 
84839: dnl ========================================================
    1: dnl = Build Personal Security Manager
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(crypto,
    1: [  --disable-crypto        Disable crypto support (Personal Security Manager)],
    1:     MOZ_PSM=,
    1:     MOZ_PSM=1 )
    1: 
    1: dnl ========================================================
    1: dnl = JS Debugger XPCOM component (js/jsd)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(jsd,
    1: [  --disable-jsd           Disable JavaScript debug library],
    1:     MOZ_JSDEBUGGER=,
    1:     MOZ_JSDEBUGGER=1)
    1: 
    1: 
    1: dnl ========================================================
35963: dnl = Enable IPDL's "expensive" unit tests
35963: dnl ========================================================
35963: MOZ_IPDL_TESTS=
35963: 
35963: MOZ_ARG_ENABLE_BOOL(ipdl-tests,
35963: [  --enable-ipdl-tests     Enable expensive IPDL tests],
35963:     MOZ_IPDL_TESTS=1,
35963:     MOZ_IPDL_TESTS=)
35963: 
35963: if test -n "$MOZ_IPDL_TESTS"; then
35963:     AC_DEFINE(MOZ_IPDL_TESTS)
35963: fi
35963: 
35963: AC_SUBST(MOZ_IPDL_TESTS)
35963: 
35963: dnl ========================================================
73587: dnl = Turns off code necessary for e10s compatibility
73587: dnl ========================================================
73587: dnl This is a temporary flag to be removed in bug 662601 when
73587: dnl it's no longer needed
73587: 
73587: MOZ_E10S_COMPAT=
73587: 
73587: MOZ_ARG_ENABLE_BOOL(e10s-compat,
73587: [  --enable-e10s-compat     Turns off code for e10s compat],
73587:     MOZ_E10S_COMPAT=1,
73587:     MOZ_E10S_COMPAT=)
73587: 
73587: if test -n "$MOZ_E10S_COMPAT"; then
73587:     AC_DEFINE(MOZ_E10S_COMPAT)
73587: fi
73587: 
73587: dnl ========================================================
22249: dnl = Disable building dbm
22249: dnl ========================================================
22249: MOZ_ARG_DISABLE_BOOL(dbm,
22249: [  --disable-dbm           Disable building dbm],
22249:     NSS_DISABLE_DBM=1,
22249:     NSS_DISABLE_DBM=)
22249: 
    1: dnl bi-directional support always on
    1: IBMBIDI=1
    1: AC_DEFINE(IBMBIDI)
    1: 
    1: dnl ========================================================
    1: dnl accessibility support on by default on all platforms
    1: dnl except OS X.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(accessibility,
    1: [  --disable-accessibility Disable accessibility support (off by default on OS X)],
    1:     ACCESSIBILITY=,
    1:     ACCESSIBILITY=1 )
    1: if test "$ACCESSIBILITY"; then
    1:     AC_DEFINE(ACCESSIBILITY)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Disable printing
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(printing,
    1: [  --disable-printing      Disable printing support],
    1:     NS_PRINTING=,
    1:     NS_PRINTING=1)
    1: 
    1: if test "$NS_PRINTING"; then
    1:     AC_DEFINE(NS_PRINTING)
    1:     AC_DEFINE(NS_PRINT_PREVIEW)
    1: fi
    1: 
    1: dnl ========================================================
54972: dnl = Enable Raw Codecs
54972: dnl ========================================================
54972: MOZ_ARG_ENABLE_BOOL(raw,
54972: [  --enable-raw           Enable support for RAW media],
54972:     MOZ_RAW=1,
54972:     MOZ_RAW=)
51805: 
51805: if test -n "$MOZ_RAW"; then
51805:     AC_DEFINE(MOZ_RAW)
51805:     MOZ_MEDIA=1
51805: fi
51805: 
48220: AC_SUBST(MOZ_RAW)
48220: 
    1: dnl ========================================================
21394: dnl = Disable Ogg Codecs
16300: dnl ========================================================
16300: MOZ_ARG_DISABLE_BOOL(ogg,
43342: [  --disable-ogg           Disable support for OGG media (Theora video and Vorbis audio)],
16300:     MOZ_OGG=,
16300:     MOZ_OGG=1)
16300: 
16300: if test -n "$MOZ_OGG"; then
16300:     AC_DEFINE(MOZ_OGG)
21394:     MOZ_SYDNEYAUDIO=1
89287:     MOZ_CUBEB=1
16300:     MOZ_MEDIA=1
56071:     case "$target_cpu" in
56071:     arm*)
56071:         MOZ_TREMOR=1
56071:     ;;
56071:     *)
43342:         MOZ_VORBIS=1
56071:     ;;
56071:     esac
26904: 
26904:     dnl Checks for __attribute__(aligned()) directive
26904:     AC_CACHE_CHECK([__attribute__ ((aligned ())) support],
26904:         [ac_cv_c_attribute_aligned],
26904:         [ac_cv_c_attribute_aligned=0
26904:          CFLAGS_save="${CFLAGS}"
26904:          CFLAGS="${CFLAGS} -Werror"
26904:          for ac_cv_c_attr_align_try in 64 32 16 8; do
26904:            echo "trying $ac_cv_c_attr_align_try"
26904:            AC_TRY_COMPILE([],
26904:                           [static char c __attribute__ ((aligned(${ac_cv_c_attr_align_try}))) = 0; return c;],
26904:                           [ac_cv_c_attribute_aligned="${ac_cv_c_attr_align_try}"])
26904:            if test "$ac_cv_c_attribute_aligned" != 0; then
26904:              break;
26904:            fi
26904:          done
26904:            CFLAGS="${CFLAGS_save}"])
26904:     if test "${ac_cv_c_attribute_aligned}" != "0"; then
26904:       AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX],
26904:                          [${ac_cv_c_attribute_aligned}],[Maximum supported data alignment])
26904:     fi
16300: fi
15751: 
21394: dnl ========================================================
43342: dnl = Disable VP8 decoder support
43342: dnl ========================================================
43442: MOZ_ARG_DISABLE_BOOL(webm,
43342: [  --disable-webm          Disable support for WebM media (VP8 video and Vorbis audio)],
43342:     MOZ_WEBM=,
43342:     MOZ_WEBM=1)
43342: 
56939: dnl system libvpx Support
56939: dnl ========================================================
95642: MOZ_ARG_WITH_BOOL(system-libvpx,
95642: [  --with-system-libvpx    Use system libvpx (located with pkgconfig)],
95642:     MOZ_NATIVE_LIBVPX=1)
95642: 
56939: MOZ_LIBVPX_INCLUDES=
56939: MOZ_LIBVPX_LIBS=
56939: 
43342: if test -n "$MOZ_WEBM"; then
43342:     AC_DEFINE(MOZ_WEBM)
80366:     if test -n "$MOZ_VP8_ERROR_CONCEALMENT" ; then
80366:         AC_DEFINE(MOZ_VP8_ERROR_CONCEALMENT)
80366:     fi
80367:     if test -n "$MOZ_VP8_ENCODER" ; then
80367:         AC_DEFINE(MOZ_VP8_ENCODER)
80367:     fi
56939: 
95642:     if test -n "$MOZ_NATIVE_LIBVPX"; then
95642:         dnl ============================
95642:         dnl === libvpx Version check ===
95642:         dnl ============================
95642:         dnl Check to see if we have a system libvpx package.
95642:         PKG_CHECK_MODULES(LIBVPX, vpx >= 1.0.0)
95642: 
95642:         MOZ_CHECK_HEADER([vpx/vpx_decoder.h], [], 
95642:          [AC_MSG_ERROR([Couldn't find vpx/vpx_decoder.h which is required for build with system libvpx. Use --without-system-libvpx to build with in-tree libvpx.])])
95642: 
95642:         AC_CHECK_LIB(vpx, vpx_codec_dec_init_ver, [], 
95642:          [AC_MSG_ERROR([--with-system-libvpx requested but symbol vpx_codec_dec_init_ver not found])])
56939:     fi
56939: fi
56939: 
56939: AC_SUBST(MOZ_NATIVE_LIBVPX)
56939: AC_SUBST(MOZ_LIBVPX_INCLUDES)
56939: AC_SUBST(MOZ_LIBVPX_LIBS)
56939: 
56939: if test -n "$MOZ_WEBM" -a -z "$MOZ_NATIVE_LIBVPX"; then
43342:     MOZ_SYDNEYAUDIO=1
89287:     MOZ_CUBEB=1
43342:     MOZ_MEDIA=1
56071:     case "$target_cpu" in
56071:     arm*)
56071:         MOZ_TREMOR=1
56071:     ;;
56071:     *)
43342:         MOZ_VORBIS=1
56071:     ;;
56071:     esac
56071: 
43343: 
43343:     dnl Detect if we can use an assembler to compile optimized assembly for libvpx.
57090:     dnl We currently require yasm on all x86 platforms and require yasm 1.1.0 on Win32.
57090:     dnl We currently require gcc on all arm platforms.
52191:     VPX_AS=$YASM
57090:     VPX_ASM_SUFFIX=asm
80367:     VPX_NEED_OBJ_INT_EXTRACT=
52191: 
52191:     dnl See if we have assembly on this platform.
52191:     case "$OS_ARCH:$CPU_ARCH" in
52191:     Linux:x86)
43343:       VPX_ASFLAGS="-f elf32 -rnasm -pnasm"
43343:       VPX_X86_ASM=1
43343:     ;;
43927:     Linux:x86_64)
43927:       VPX_ASFLAGS="-f elf64 -rnasm -pnasm -DPIC"
43927:       VPX_X86_ASM=1
43927:     ;;
52191:     SunOS:x86)
46279:       VPX_ASFLAGS="-f elf32 -rnasm -pnasm"
46279:       VPX_X86_ASM=1
46279:     ;;
46279:     SunOS:x86_64)
46279:       VPX_ASFLAGS="-f elf64 -rnasm -pnasm -DPIC"
46279:       VPX_X86_ASM=1
46279:     ;;
52191:     Darwin:x86)
43343:       VPX_ASFLAGS="-f macho32 -rnasm -pnasm -DPIC"
43343:       VPX_X86_ASM=1
43343:     ;;
43343:     Darwin:x86_64)
43343:       VPX_ASFLAGS="-f macho64 -rnasm -pnasm -DPIC"
43343:       VPX_X86_ASM=1
43343:     ;;
43394:     WINNT:x86_64)
46219:       if test -z "$GNU_CC"; then
43394:         VPX_ASFLAGS="-f x64 -rnasm -pnasm"
43394:         VPX_X86_ASM=1
46219:       fi
43394:     ;;
52191:     WINNT:x86)
52191:       if test -z "$GNU_CC"; then
52191:         dnl Check for yasm 1.1 or greater.
54653:         if test -n "$COMPILE_ENVIRONMENT" -a -z "$YASM"; then
54652:           AC_MSG_ERROR([yasm 1.1 or greater is required to build libvpx on Win32, but it appears not to be installed.  Install it (included in MozillaBuild 1.5.1 and newer) or configure with --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
54653:         elif test -n "$COMPILE_ENVIRONMENT" -a "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -lt "1" \) ; then
54652:           AC_MSG_ERROR([yasm 1.1 or greater is required to build libvpx on Win32, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.  Upgrade to the newest version (included in MozillaBuild 1.5.1 and newer) or configure with --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
54652:         else
52191:           VPX_ASFLAGS="-f win32 -rnasm -pnasm -DPIC"
52191:           VPX_X86_ASM=1
80367:           dnl The encoder needs obj_int_extract to get asm offsets.
52191:         fi
52191:       fi
52191:     ;;
57090:     *:arm*)
57090:       if test -n "$GNU_AS" ; then
57090:         VPX_AS=$AS
57090:         dnl These flags are a lie; they're just used to enable the requisite
57090:         dnl opcodes; actual arch detection is done at runtime.
57090:         VPX_ASFLAGS="-march=armv7-a -mfpu=neon"
57090:         VPX_DASH_C_FLAG="-c"
57365:         VPX_AS_CONVERSION='$(PERL) $(topsrcdir)/media/libvpx/build/make/ads2gas.pl'
57090:         VPX_ASM_SUFFIX="$ASM_SUFFIX"
57090:         VPX_ARM_ASM=1
57090:       fi
43343:     esac
52191: 
54652:     if test -n "$COMPILE_ENVIRONMENT" -a -n "$VPX_X86_ASM" -a -z "$VPX_AS"; then
49288:       AC_MSG_ERROR([yasm is a required build tool for this architecture when webm is enabled. You may either install yasm or --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
49288:     fi
43343: 
80367:     if test -n "$MOZ_VP8_ENCODER" -a \
80367:             -z "$GNU_CC" -a -z "$INTEL_CC" -a -z "$CLANG_CC" ; then
80367:       dnl We prefer to get asm offsets using inline assembler, which the above
80367:       dnl compilers can do. When we're not using one of those, we have to fall
80367:       dnl back to obj_int_extract, which reads them from a compiled object
80367:       dnl file. Unfortunately, that only works if we're compiling on a system
80367:       dnl with the header files for the appropriate object file format.
80367:       VPX_NEED_OBJ_INT_EXTRACT=1
80367:     fi
80367: 
43343:     if test -n "$VPX_X86_ASM"; then
43343:       AC_DEFINE(VPX_X86_ASM)
57090:     elif test -n "$VPX_ARM_ASM"; then
57090:       AC_DEFINE(VPX_ARM_ASM)
43343:     else
52191:       AC_MSG_WARN([No assembler or assembly support for libvpx. Using unoptimized C routines.])
43343:     fi
43342: fi
43342: 
43342: dnl ========================================================
21394: dnl = Disable Wave decoder support
21394: dnl ========================================================
21755: MOZ_ARG_DISABLE_BOOL(wave,
21394: [  --disable-wave          Disable Wave decoder support],
21394:     MOZ_WAVE=,
21394:     MOZ_WAVE=1)
21394: 
21394: if test -n "$MOZ_WAVE"; then
21394:     AC_DEFINE(MOZ_WAVE)
21394:     MOZ_SYDNEYAUDIO=1
89287:     MOZ_CUBEB=1
21394:     MOZ_MEDIA=1
21394: fi
21394: 
21394: dnl ========================================================
89287: dnl = Handle dependent SYDNEYAUDIO, CUBEB, and MEDIA defines
21394: dnl ========================================================
21394: 
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
21394:     AC_DEFINE(MOZ_SYDNEYAUDIO)
21394: fi
21394: 
89287: if test -n "$MOZ_CUBEB"; then
89287:     case "$target" in
89287:     *-mingw*)
89287:         AC_DEFINE(MOZ_CUBEB)
89287:         ;;
89287:     *)
89287:         dnl Other targets will be enabled soon.
89287:         ;;
89287:     esac
89287: fi
89287: 
15751: if test -n "$MOZ_MEDIA"; then
15751:     AC_DEFINE(MOZ_MEDIA)
15751: fi
15751: 
56071: if test -n "$MOZ_VORBIS" -a -n "$MOZ_TREMOR"; then
56071:     AC_MSG_ERROR([MOZ_VORBIS and MOZ_TREMOR are mutually exclusive!  The build system should not allow them both to be set, but they are.  Please file a bug at https://bugzilla.mozilla.org/])
56071: fi
56071: 
43342: if test -n "$MOZ_VORBIS"; then
43342:     AC_DEFINE(MOZ_VORBIS)
43342: fi
43342: 
56071: if test -n "$MOZ_TREMOR"; then
56071:     AC_DEFINE(MOZ_TREMOR)
56071: fi
56071: 
21394: dnl ========================================================
21394: dnl = Check alsa availability on Linux if using sydneyaudio
21394: dnl ========================================================
21394: 
21394: dnl If using sydneyaudio with Linux, ensure that the alsa library is available
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
16300:    case "$target_os" in
16300: linux*)
31710:       PKG_CHECK_MODULES(MOZ_ALSA, alsa, ,
31710:          [echo "$MOZ_ALSA_PKG_ERRORS"
47235:           AC_MSG_ERROR([Need alsa for Ogg, Wave or WebM decoding on Linux.  Disable with --disable-ogg --disable-wave --disable-webm.  (On Ubuntu, you might try installing the package libasound2-dev.)])])
16300:       ;;
16300:    esac
16300: fi
16300: 
15751: dnl ========================================================
95677: dnl = Enable GStreamer
95677: dnl ========================================================
95677: MOZ_ARG_ENABLE_BOOL(gstreamer,
95677: [  --enable-gstreamer           Enable GStreamer support],
95677: MOZ_GSTREAMER=1,
95677: MOZ_GSTREAMER=)
95677: 
95677: if test "$MOZ_GSTREAMER"; then
95677:     # API version, eg 0.10, 1.0 etc
95677:     GST_API_VERSION=0.10
95677:     # core/base release number
95677:     # depend on >= 0.10.33 as that's when the playbin2 source-setup signal was
95677:     # introduced
95677:     GST_VERSION=0.10.33
95677:     PKG_CHECK_MODULES(GSTREAMER,
95677:                       gstreamer-$GST_API_VERSION >= $GST_VERSION
95677:                       gstreamer-app-$GST_API_VERSION
95677:                       gstreamer-plugins-base-$GST_API_VERSION)
95677:     if test -n "$GSTREAMER_LIBS"; then
95677:        _SAVE_LDFLAGS=$LDFLAGS
95677:        LDFLAGS="$LDFLAGS -lgstvideo-$GST_API_VERSION"
95677:        AC_TRY_LINK(,[return 0;],_HAVE_LIBGSTVIDEO=1,_HAVE_LIBGSTVIDEO=)
95677:        if test -n "$_HAVE_LIBGSTVIDEO" ; then
95677:           GSTREAMER_LIBS="$GSTREAMER_LIBS -lgstvideo-$GST_API_VERSION"
95677:        else
95677:           AC_MSG_ERROR([gstreamer video backend requires libgstvideo])
95677:        fi
95677:        LDFLAGS=$_SAVE_LDFLAGS
95677:     else
95677:        AC_MSG_ERROR([gstreamer backend requires the gstreamer packages])
95677:     fi
95677: fi
95677: AC_SUBST(GSTREAMER_CFLAGS)
95677: AC_SUBST(GSTREAMER_LIBS)
95677: AC_SUBST(MOZ_GSTREAMER)
95677: 
95677: if test -n "$MOZ_GSTREAMER"; then
95677:    AC_DEFINE(MOZ_GSTREAMER)
95677:    MOZ_MEDIA=1
95677: fi
95677: 
95677: 
95677: dnl ========================================================
    1: dnl Permissions System
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(permissions,
    1: [  --disable-permissions   Disable permissions (popup and cookie blocking)],
    1:     MOZ_PERMISSIONS=,
    1:     MOZ_PERMISSIONS=1
    1: )
    1: 
    1: dnl ========================================================
    1: dnl NegotiateAuth
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(negotiateauth,
    1: [  --disable-negotiateauth Disable GSS-API negotiation ],
    1:     MOZ_AUTH_EXTENSION=,
    1:     MOZ_AUTH_EXTENSION=1 )
    1: 
    1: dnl ========================================================
    1: dnl XTF
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xtf,
    1: [  --disable-xtf           Disable XTF (pluggable xml tags) support],
    1:     MOZ_XTF=,
    1:     MOZ_XTF=1 )
    1: if test "$MOZ_XTF"; then
    1:   AC_DEFINE(MOZ_XTF)
    1: fi
    1: 
    1: dnl ========================================================
82832: dnl Pref extensions (autoconfig)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pref-extensions,
    1: [  --disable-pref-extensions
82832:                           Disable pref extensions such as autoconfig],
    1:   MOZ_PREF_EXTENSIONS=,
    1:   MOZ_PREF_EXTENSIONS=1 )
    1: 
    1: dnl ========================================================
80496: dnl Searching of system directories for extensions.
80496: dnl Note: this switch is meant to be used for test builds
80496: dnl whose behavior should not depend on what happens to be
80496: dnl installed on the local machine.
80496: dnl ========================================================
80496: MOZ_ARG_DISABLE_BOOL(system-extension-dirs,
80496: [  --disable-system-extension-dirs
80496:                           Disable searching system- and account-global
80496:                           directories for extensions of any kind; use
80496:                           only profile-specific extension directories],
80496:   ENABLE_SYSTEM_EXTENSION_DIRS=,
80496:   ENABLE_SYSTEM_EXTENSION_DIRS=1 )
80496: if test "$ENABLE_SYSTEM_EXTENSION_DIRS"; then
80496:   AC_DEFINE(ENABLE_SYSTEM_EXTENSION_DIRS)
80496: fi
80496: 
80496: dnl ========================================================
    1: dnl = Universalchardet
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(universalchardet,
    1: [  --disable-universalchardet
    1:                           Disable universal encoding detection],
    1:   MOZ_UNIVERSALCHARDET=,
    1:   MOZ_UNIVERSALCHARDET=1 )
    1: 
67748: if test -n "${JAVA_BIN_PATH}"; then
67748:   dnl Look for javac and jar in the specified path.
67748:   JAVA_PATH="$JAVA_BIN_PATH"
67748: else
67748:   dnl No path specified, so look for javac and jar in $JAVA_HOME & $PATH.
67748:   JAVA_PATH="$JAVA_HOME/bin:$PATH"
67748: fi
67748: 
43032: MOZ_PATH_PROG(JAVA, java, :, [$JAVA_PATH])
43032: MOZ_PATH_PROG(JAVAC, javac, :, [$JAVA_PATH])
43032: MOZ_PATH_PROG(JAR, jar, :, [$JAVA_PATH])
43032: 
89917: if test -n "${JAVA_BIN_PATH}" -o \
89917:   \( "$OS_TARGET" = Android -a x"$MOZ_WIDGET_TOOLKIT" != x"gonk" \); then
47975:   if test -z "$JAVA" -o "$JAVA" = ":" -o -z "$JAVAC" -o "$JAVAC" = ":" -o -z "$JAR" -o "$JAR" = ":"; then
43032:     AC_MSG_ERROR([The programs java, javac and jar were not found.  Set \$JAVA_HOME to your java sdk directory or use --with-java-bin-path={java-bin-dir}])
43032:   fi
43032: fi
43032: 
    1: dnl ========================================================
58583: dnl = ANGLE OpenGL->D3D translator for WebGL
58583: dnl = * only applies to win32
58583: dnl = * enabled by default (shipping build); requires explicit --disable to disable
58583: dnl ========================================================
58583: MOZ_ANGLE=
58583: MOZ_DIRECTX_SDK_PATH=
62103: MOZ_DIRECTX_SDK_CPU_SUFFIX=
62103: MOZ_D3DX9_VERSION=
62103: MOZ_D3DX9_CAB=
62103: MOZ_D3DCOMPILER_CAB=
62103: MOZ_D3DX9_DLL=
62103: MOZ_D3DCOMPILER_DLL=
58583: case "$target_os" in
63450: *mingw*)
58583:     MOZ_ANGLE=1
58583:     ;;
58583: esac
58583: 
62103: # The DirectX SDK libraries are split into x86 and x64 sub-directories
62103: case "${target_cpu}" in
62103: i*86)
62103:   MOZ_DIRECTX_SDK_CPU_SUFFIX=x86
62103:   ;;
62103: x86_64)
62103:   MOZ_DIRECTX_SDK_CPU_SUFFIX=x64
62103:   ;;
62103: esac
62103: 
58583: if test -n "$MOZ_ANGLE"; then
58583: MOZ_ARG_DISABLE_BOOL(angle,
58583: [  --disable-angle     Disable building of ANGLE for WebGL->D3D translation],
58583:     MOZ_ANGLE=,
58583:     MOZ_ANGLE=1)
58583: 
58583: if test -n "$MOZ_ANGLE"; then
58583:   if test -z "$_WIN32_MSVC"; then
58583:     AC_MSG_ERROR([Building ANGLE requires MSVC.  To build without ANGLE, reconfigure with --disable-angle.])
58583:   fi
58583: 
61669:   # Get the SDK path from the registry.
70031:   # First try to get the June 2010 SDK
70031:   MOZ_DIRECTX_SDK_REG_KEY=`reg query 'HKLM\Software\Microsoft\DirectX' //s | grep 'Microsoft DirectX SDK (June 2010)' | head -n 1`
70031:   if test -z "$MOZ_DIRECTX_SDK_REG_KEY" ; then
70031:     # Otherwise just take whatever comes first
61669:     MOZ_DIRECTX_SDK_REG_KEY=`reg query 'HKLM\Software\Microsoft\DirectX' //s | grep 'Microsoft DirectX SDK' | head -n 1`
70031:   fi
70456: 
70456:   if test -n "`echo $MOZ_DIRECTX_SDK_REG_KEY | grep 'February 2010'`" ; then
74254:     AC_MSG_ERROR([Found the February 2010 DirectX SDK. This is too old. We now require the June 2010 DirectX SDK, or newer.  Upgrade your SDK or to explicitly build without ANGLE, reconfigure with --disable-angle.])
70456:   else
70031:     MOZ_DIRECTX_SDK_PATH=`reg query "$MOZ_DIRECTX_SDK_REG_KEY" //v InstallPath | grep REG_SZ | sed 's/.*\([[a-zA-Z]]\)\\:\\\\/\\1\\:\\\\/'`
70456:   fi
61669: 
61658:   MOZ_ANGLE=
61658: 
58583:   if test -n "$MOZ_DIRECTX_SDK_PATH" ; then
62103:     if test -f "$MOZ_DIRECTX_SDK_PATH"/include/d3dx9.h && test -f "$MOZ_DIRECTX_SDK_PATH"/lib/$MOZ_DIRECTX_SDK_CPU_SUFFIX/dxguid.lib ; then
62103:       AC_MSG_RESULT([Found DirectX SDK via registry, using $MOZ_DIRECTX_SDK_PATH])
58583:       MOZ_ANGLE=1
58583:     fi
58583:   fi
58583: 
58583:   if test -z "$MOZ_ANGLE" ; then
74254:     AC_MSG_ERROR([Couldn't find the DirectX SDK, needed for ANGLE. Please install it (June 2010 or newer). To explicitly build without ANGLE, reconfigure with --disable-angle.])
58583:   fi
62103: 
62105:   if test -n "$MOZ_ANGLE" ; then
70456:     # Get the SDK numeric version (e.g. 43) by looking at the dependencies of d3dx9.lib
62103:     MOZ_D3DX9_VERSION=`dumpbin //headers "$MOZ_DIRECTX_SDK_PATH"/lib/$MOZ_DIRECTX_SDK_CPU_SUFFIX/d3dx9.lib | egrep d3dx9_[[0-9]][[0-9]]\.dll | head -n1 | sed 's/.*\([[0-9]][[0-9]]\).*/\\1/g'`
62103: 
62103:     if test -z "$MOZ_D3DX9_VERSION" ; then
74254:       AC_MSG_ERROR([Couldn't determine the D3DX9 version, needed for ANGLE. To explicitly build without ANGLE, reconfigure with --disable-angle.])
62105:     fi
62105: 
62105:     if test -n "$MOZ_ANGLE" ; then
62103:       MOZ_D3DX9_CAB=`find "$MOZ_DIRECTX_SDK_PATH"/Redist -name *d3dx9_${MOZ_D3DX9_VERSION}_${MOZ_DIRECTX_SDK_CPU_SUFFIX}.cab | head -n1`
62103:       MOZ_D3DCOMPILER_CAB=`find "$MOZ_DIRECTX_SDK_PATH"/Redist -name *D3DCompiler_${MOZ_D3DX9_VERSION}_${MOZ_DIRECTX_SDK_CPU_SUFFIX}.cab | head -n1`
62103: 
62103:       MOZ_D3DX9_DLL=d3dx9_$MOZ_D3DX9_VERSION.dll
62103:       MOZ_D3DCOMPILER_DLL=D3DCompiler_$MOZ_D3DX9_VERSION.dll
58583:     fi
58583:   fi
62105: fi
62105: fi
58583: 
58583: dnl ========================================================
 4389: dnl = Breakpad crash reporting (on by default on supported platforms)
    1: dnl ========================================================
    1: 
39878: case $target in
56361: i?86-*-mingw*|x86_64-*-mingw*)
 4389:   MOZ_CRASHREPORTER=1
39878:   ;;
50390: i?86-apple-darwin*|powerpc-apple-darwin*|x86_64-apple-darwin*)
39878:   MOZ_CRASHREPORTER=1
39878:   ;;
40607: i?86-*-linux*|x86_64-*-linux*|arm-*-linux*)
61739:   if test "$MOZ_ENABLE_GTK2"; then
39878:     MOZ_CRASHREPORTER=1
61739:   fi
39878:   ;;
70914: *-android*|*-linuxandroid*)
56281:   MOZ_CRASHREPORTER=1
56281:   ;;
39878: *solaris*)
39878:   MOZ_CRASHREPORTER=1
39878:   ;;
39878: esac
 4389: 
 4389: MOZ_ARG_DISABLE_BOOL(crashreporter,
 4389: [  --disable-crashreporter Disable breakpad crash reporting],
 4389:     MOZ_CRASHREPORTER=,
 4389:     MOZ_CRASHREPORTER=1)
 4389: 
 4389: if test -n "$MOZ_CRASHREPORTER"; then
 4389:    AC_DEFINE(MOZ_CRASHREPORTER)
 2639: 
56279:   if (test "$OS_TARGET" = "Linux" -o "$OS_ARCH" = "SunOS") && \
 3665:     test -z "$SKIP_LIBRARY_CHECKS"; then
10553:     PKG_CHECK_MODULES(MOZ_GTHREAD, gthread-2.0)
10553:     AC_SUBST(MOZ_GTHREAD_CFLAGS)
10553:     AC_SUBST(MOZ_GTHREAD_LIBS)
10553: 
63478:     MOZ_CHECK_HEADERS([curl/curl.h], [], [AC_MSG_ERROR([Couldn't find curl/curl.h which is required for the crash reporter.  Use --disable-crashreporter to disable the crash reporter.])])
 3665:   fi
78106: 
78106:   if (test "$OS_ARCH" != "$HOST_OS_ARCH"); then
78106:     AC_MSG_ERROR([Breakpad tools do not support compiling on $HOST_OS_ARCH while targeting $OS_ARCH.  Use --disable-crashreporter.])
78106:   fi
 3665: fi
    1: 
14003: MOZ_ARG_WITH_STRING(crashreporter-enable-percent,
43027: [  --with-crashreporter-enable-percent=NN
43027:                           Enable sending crash reports by default on NN% of users. (default=100)],
14003: [ val=`echo $withval | sed 's/[^0-9]//g'`
14003:     MOZ_CRASHREPORTER_ENABLE_PERCENT="$val"])
14003: 
14003: if test -z "$MOZ_CRASHREPORTER_ENABLE_PERCENT"; then
14003:    MOZ_CRASHREPORTER_ENABLE_PERCENT=100
14003: fi
14003: AC_DEFINE_UNQUOTED(MOZ_CRASHREPORTER_ENABLE_PERCENT, $MOZ_CRASHREPORTER_ENABLE_PERCENT)
14003: 
    1: dnl ========================================================
64166: dnl = libjpeg-turbo configuration
64166: dnl ========================================================
75004: MOZ_LIBJPEG_TURBO=
75004: if test -z "$SYSTEM_JPEG"; then
75004:     MOZ_LIBJPEG_TURBO=1
75004: fi
64166: 
64427: MOZ_ARG_DISABLE_BOOL(libjpeg_turbo,
64427: [ --disable-libjpeg-turbo  Disable optimized jpeg decoding routines],
64427:     MOZ_LIBJPEG_TURBO=,
64427:     MOZ_LIBJPEG_TURBO=1)
64427: 
75004: if test "$SYSTEM_JPEG" = 1 -a "$MOZ_LIBJPEG_TURBO" = 1; then
75004:     AC_MSG_ERROR([cannot use --with-system-jpeg with --enable-libjpeg-turbo.])
75004: fi
75004: 
64166: dnl Detect if we can use yasm to compile libjpeg-turbo's optimized assembly
64166: dnl files.
64427: 
64427: if test -n "$MOZ_LIBJPEG_TURBO"; then
64427: 
64427:   dnl Do we support libjpeg-turbo on this platform?
64166:   case "$OS_ARCH:$OS_TEST" in
64166:   Linux:x86|Linux:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf32 -rnasm -pnasm -DPIC -DELF"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   Linux:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf64 -rnasm -pnasm -D__x86_64__ -DPIC -DELF"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   SunOS:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf32 -rnasm -pnasm -DPIC -DELF"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   SunOS:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf64 -rnasm -pnasm -D__x86_64__ -DPIC -DELF"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   Darwin:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f macho32 -rnasm -pnasm -DPIC -DMACHO"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   Darwin:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f macho64 -rnasm -pnasm -D__x86_64__ -DPIC -DMACHO"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   WINNT:x86|WINNT:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f win32 -rnasm -pnasm -DPIC -DWIN32"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   WINNT:x86_64)
67573:     LIBJPEG_TURBO_ASFLAGS="-f win64 -rnasm -pnasm -D__x86_64__ -DPIC -DWIN64 -DMSVC"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
90293:   *:arm*)
90293:     LIBJPEG_TURBO_ASFLAGS="-march=armv7-a -mfpu=neon"
90293:     LIBJPEG_TURBO_ARM_ASM=1
90293:   ;;
64166:   esac
64166: 
64427: fi
64427: 
90293: dnl If we're on an x86 or x64 system which supports libjpeg-turbo's asm routines
90293: dnl and --disable-libjpeg-turbo wasn't passed, check for Yasm, and error out if
90293: dnl it doesn't exist or we have too old of a version.
64427: if test -n "$LIBJPEG_TURBO_X86_ASM" -o -n "$LIBJPEG_TURBO_X64_ASM" ; then
90293:     AC_MSG_CHECKING([for Yasm assembler])
64427:     AC_CHECK_PROGS(LIBJPEG_TURBO_AS, yasm, "")
64427: 
64427:     if test -z "$LIBJPEG_TURBO_AS" ; then
90293:         AC_MSG_ERROR([Yasm is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you do not appear to have Yasm installed.  Either install it or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
64427:     fi
64427: 
67788:     dnl Check that we have the right yasm version.  We require 1.0.1 or newer
67788:     dnl on Linux and 1.1 or newer everywhere else.
67788:     if test "$OS_ARCH" = "Linux" ; then
67788:         if test "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -eq "0" -a "$_YASM_RELEASE" -lt "1" \) ; then
90293:             AC_MSG_ERROR([Yasm 1.0.1 or greater is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.$_YASM_RELEASE.  Upgrade to the newest version or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
67788:         fi
67788:     else
64427:         if test "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -lt "1" \) ; then
90293:             AC_MSG_ERROR([Yasm 1.1 or greater is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.  Upgrade to the newest version or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
90293:         fi
90293:     fi
90293: fi
90293: 
90293: dnl If we're on an ARM system which supports libjpeg-turbo's asm routines and
90293: dnl --disable-libjpeg-turbo wasn't passed, use the C compiler as the assembler.
90293: if test -n "$LIBJPEG_TURBO_ARM_ASM" ; then
90293:     echo "Using $AS as the assembler for ARM code."
90293:     LIBJPEG_TURBO_AS=$AS
67788: fi
64166: 
64166: if test -n "$LIBJPEG_TURBO_X86_ASM"; then
64166:     AC_DEFINE(LIBJPEG_TURBO_X86_ASM)
64166: elif test -n "$LIBJPEG_TURBO_X64_ASM"; then
64166:     AC_DEFINE(LIBJPEG_TURBO_X64_ASM)
90293: elif test -n "$LIBJPEG_TURBO_ARM_ASM"; then
90293:     AC_DEFINE(LIBJPEG_TURBO_ARM_ASM)
64427: elif test -n "$MOZ_LIBJPEG_TURBO"; then
64427:     dnl Warn if we're not building the optimized routines, even though the user
64427:     dnl didn't specify --disable-libjpeg-turbo.
64166:     AC_MSG_WARN([No assembler or assembly support for libjpeg-turbo.  Using unoptimized C routines.])
64166: fi
64166: 
64166: dnl ========================================================
    1: dnl = Enable compilation of specific extension modules
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_ENABLE_STRING(extensions,
    1: [  --enable-extensions     Enable extensions],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
47975:     if test "$option" = "yes" -o "$option" = "all"; then
20889:         AC_MSG_ERROR([--enable-extensions=$option is no longer supported.])
47975:     elif test "$option" = "no" -o "$option" = "none"; then
    1:         MOZ_EXTENSIONS=""
    1:     elif test "$option" = "default"; then
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $MOZ_EXTENSIONS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         MOZ_EXTENSIONS=`echo "$MOZ_EXTENSIONS" | sed "s/ ${option}//"`
    1:     else
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $option"
    1:     fi
    1: done],
    1:     MOZ_EXTENSIONS="$MOZ_EXTENSIONS_DEFAULT")
    1: 
47975: if test -z "$MOZ_ENABLE_GNOMEVFS" -a -z "$MOZ_GNOMEVFS_LIBS" -a `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
    1:     # Suppress warning on non-X11 platforms
    1:     if test -n "$MOZ_X11"; then
    1:         AC_MSG_WARN([Cannot build gnomevfs without required libraries. Removing gnomevfs from MOZ_EXTENSIONS.])
    1:     fi
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gnomevfs||'`
    1: fi
    1: 
32528: dnl Do not build gnomevfs with libxul based apps
47975: if test -n "$LIBXUL_SDK_DIR" -a `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
32528:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gnomevfs||'`
32528: fi
32528: 
47975: if test -z "$MOZ_ENABLE_GIO" -a `echo "$MOZ_EXTENSIONS" | grep -c gio` -ne 0; then
31951:     # Suppress warning on non-X11 platforms
31951:     if test -n "$MOZ_X11"; then
31951:         AC_MSG_WARN([Cannot build gio without required libraries. Removing gio from MOZ_EXTENSIONS.])
31951:     fi
31951:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gio||'`
31951: fi
31951: 
32528: dnl Do not build gio with libxul based apps
47975: if test -n "$LIBXUL_SDK_DIR" -a `echo "$MOZ_EXTENSIONS" | grep -c gio` -ne 0; then
32528:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gio||'`
32528: fi
32528: 
47975: if test -z "$MOZ_JSDEBUGGER" -a `echo "$MOZ_EXTENSIONS" | grep -c venkman` -ne 0; then
    1:     AC_MSG_WARN([Cannot build venkman without JavaScript debug library. Removing venkman from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|venkman||'`
    1: fi
    1: 
56985: dnl xforms requires xtf
47975: if test -z "$MOZ_XTF" -a `echo "$MOZ_EXTENSIONS" | grep -c xforms` -ne 0; then
    1:     AC_MSG_WARN([Cannot build XForms without XTF support.  Removing XForms from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|xforms||g'`
    1: fi
    1: 
    1: dnl Remove dupes
    1: MOZ_EXTENSIONS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_EXTENSIONS}`
    1: 
 2776: dnl Ensure every extension exists, to avoid mostly-inscrutable error messages
42587: dnl when trying to build a nonexistent extension.
 2776: for extension in $MOZ_EXTENSIONS; do
 2776:     if test ! -d "${srcdir}/extensions/${extension}"; then
 2776:         AC_MSG_ERROR([Unrecognized extension provided to --enable-extensions: ${extension}.])
 2776:     fi
 2776: done
 2776: 
72208: if test -n "$MOZ_USE_NATIVE_POPUP_WINDOWS"; then
72208:   AC_DEFINE(MOZ_USE_NATIVE_POPUP_WINDOWS)
72208: fi
72208: 
    1: dnl ========================================================
93421: dnl CSS3 Flexbox Support
93421: dnl ========================================================
93421: if test -n "$MOZ_FLEXBOX"; then
93421:   AC_DEFINE(MOZ_FLEXBOX)
93421: fi
93421: 
93421: dnl ========================================================
70848: dnl SVG Display Lists
70848: dnl ========================================================
70848: if test -n "$MOZ_SVG_DLISTS"; then
70848:   AC_DEFINE(MOZ_SVG_DLISTS)
70848: fi
70848: 
70848: dnl ========================================================
24104: dnl Build Freetype in the tree
24104: dnl ========================================================
24104: MOZ_ARG_ENABLE_BOOL(tree-freetype,
24104: [  --enable-tree-freetype  Enable Tree FreeType],
24104:     MOZ_TREE_FREETYPE=1,
24104:     MOZ_TREE_FREETYPE= )
24104: if test -n "$MOZ_TREE_FREETYPE"; then
57366:    if test -n "$_WIN32_MSVC"; then
57366:       AC_ERROR("building with in-tree freetype is not supported on MSVC")
57366:    fi
24104:    AC_DEFINE(MOZ_TREE_FREETYPE)
24104:    AC_SUBST(MOZ_TREE_FREETYPE)
24104:    MOZ_ENABLE_CAIRO_FT=1
24104:    FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
27324:    FT2_CFLAGS='-I$(topsrcdir)/modules/freetype2/include'
27324:    CAIRO_FT_CFLAGS='-I$(topsrcdir)/modules/freetype2/include'
57366:    FT2_LIBS='$(call EXPAND_LIBNAME_PATH,freetype,$(DEPTH)/modules/freetype2/.libs)'
57366:    CAIRO_FT_LIBS='$(call EXPAND_LIBNAME_PATH,freetype,$(DEPTH)/modules/freetype2/.libs)'
24104:    AC_DEFINE(HAVE_FT_BITMAP_SIZE_Y_PPEM)
24104:    AC_DEFINE(HAVE_FT_GLYPHSLOT_EMBOLDEN)
24104:    AC_DEFINE(HAVE_FT_LOAD_SFNT_TABLE)
24104:    AC_SUBST(CAIRO_FT_CFLAGS)
24104: fi
24104: 
24104: dnl ========================================================
95600: dnl Web App Runtime
95600: dnl ========================================================
95600: MOZ_ARG_DISABLE_BOOL(webapp-runtime,
95600: [  --disable-webapp-runtime  Disable Web App Runtime],
95600:     MOZ_WEBAPP_RUNTIME=,
95600:     MOZ_WEBAPP_RUNTIME=1)
95600: if test -n "$MOZ_WEBAPP_RUNTIME" -a "$OS_ARCH" = "WINNT"; then
95600:     # Disable Web App Runtime for Windows builds that use the new toolkit if the
95600:     # required major version and minimum minor version of Unicode NSIS isn't in
95600:     # the path.
95600:     REQ_NSIS_MAJOR_VER=2
95600:     MIN_NSIS_MINOR_VER=33
95600:     MOZ_PATH_PROGS(MAKENSISU, $MAKENSISU makensisu-2.46 makensisu makensis)
95600:     if test -z "$MAKENSISU" -o "$MAKENSISU" = ":"; then
95600:         AC_MSG_ERROR([To build the Web App Runtime you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path. To build without the Web App Runtime reconfigure using --disable-webapp-runtime.])
95600:     fi
95600:     changequote(,)
95600:     MAKENSISU_VER=`"$MAKENSISU" -version 2>/dev/null | sed -e '/-Unicode/!s/.*//g' -e 's/^v\([0-9]\+\.[0-9]\+\)\-Unicode$/\1/g'`
95600:     changequote([,])
95600:     if test ! "$MAKENSISU_VER" = ""; then
95600:         MAKENSISU_MAJOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $1 }'`
95600:         MAKENSISU_MINOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $2 }'`
95600:     fi
95600:     AC_MSG_CHECKING([for Unicode NSIS with major version == $REQ_NSIS_MAJOR_VER and minor version >= $MIN_NSIS_MINOR_VER])
95600:     if test "$MAKENSISU_VER" = "" ||
95600:        test ! "$MAKENSISU_MAJOR_VER" = "$REQ_NSIS_MAJOR_VER" -o \
95600:             ! "$MAKENSISU_MINOR_VER" -ge $MIN_NSIS_MINOR_VER; then
95600:         AC_MSG_RESULT([no])
95600:         AC_MSG_ERROR([To build the Web App Runtime you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path. To build without the Web App Runtime reconfigure using --disable-webapp-runtime.])
95600:     fi
95600:     AC_MSG_RESULT([yes])
95600: fi
95600: AC_SUBST(MOZ_WEBAPP_RUNTIME)
95600: if test "$MOZ_WEBAPP_RUNTIME"; then
95600:     AC_DEFINE(MOZ_WEBAPP_RUNTIME)
95600: fi
95600: 
95600: dnl ========================================================
    1: dnl Installer
    1: dnl ========================================================
93802: dnl Abort Windows build if the required major version and
94243: dnl minimum minor version of Unicode NSIS isn't in the path
94243: dnl (unless in case of cross compiling, for which Unicode
94243: dnl is not yet sufficient).
93874: if test "$OS_ARCH" = "WINNT"; then
43429:     REQ_NSIS_MAJOR_VER=2
43429:     MIN_NSIS_MINOR_VER=33
43433:     MOZ_PATH_PROGS(MAKENSISU, $MAKENSISU makensisu-2.46 makensisu makensis)
94243:     if test -n "$MAKENSISU" -a "$MAKENSISU" != ":"; then
94243:       AC_MSG_RESULT([yes])
43429:       changequote(,)
43433:       MAKENSISU_VER=`"$MAKENSISU" -version 2>/dev/null | sed -e '/-Unicode/!s/.*//g' -e 's/^v\([0-9]\+\.[0-9]\+\)\-Unicode$/\1/g'`
43429:       changequote([,])
58494:       if test ! "$MAKENSISU_VER" = ""; then
43433:           MAKENSISU_MAJOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $1 }'`
43433:           MAKENSISU_MINOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $2 }'`
43429:       fi
43429:       AC_MSG_CHECKING([for Unicode NSIS with major version == $REQ_NSIS_MAJOR_VER and minor version >= $MIN_NSIS_MINOR_VER])
94243:       if test "$MAKENSISU_VER" = "" || \
58494:          test ! "$MAKENSISU_MAJOR_VER" = "$REQ_NSIS_MAJOR_VER" -o \
47975:               ! "$MAKENSISU_MINOR_VER" -ge $MIN_NSIS_MINOR_VER; then
43429:           AC_MSG_RESULT([no])
94243:           if test -z "$CROSS_COMPILE"; then
93802:             AC_MSG_ERROR([To build the installer you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path.])
94243:           else
94243:             MAKENSISU=
94243:           fi
94243:       fi
94243:     elif test -z "$CROSS_COMPILE"; then
94243:       AC_MSG_ERROR([To build the installer you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path.])
94243:     else
94243:       MAKENSISU=
94243:     fi
    1: fi
    1: 
    1: AC_MSG_CHECKING([for tar archiver])
    1: AC_CHECK_PROGS(TAR, gnutar gtar tar, "")
    1: if test -z "$TAR"; then
    1:     AC_MSG_ERROR([no tar archiver found in \$PATH])
    1: fi
    1: AC_MSG_RESULT([$TAR])
    1: AC_SUBST(TAR)
    1: 
18450: AC_MSG_CHECKING([for wget])
18450: AC_CHECK_PROGS(WGET, wget, "")
18450: AC_MSG_RESULT([$WGET])
18450: AC_SUBST(WGET)
18450: 
    1: dnl ========================================================
86587: dnl Maintenance Service
86587: dnl ========================================================
86587: 
86587: MOZ_ARG_ENABLE_BOOL(maintenance-service,
86587: [  --enable-maintenance-service       Enable building of maintenanceservice],
86587:     MOZ_MAINTENANCE_SERVICE=1,
86587:     MOZ_MAINTENANCE_SERVICE= )
86587: 
86587: if test -n "$MOZ_MAINTENANCE_SERVICE"; then
86587:   if test "$OS_ARCH" = "WINNT"; then
86587:     AC_DEFINE(MOZ_MAINTENANCE_SERVICE)
86587:   else
86587:     AC_MSG_ERROR([Can only build with --enable-maintenance-service with a Windows target])
86587:   fi
86587: fi
86587: 
86587: dnl ========================================================
90901: dnl Verify MAR signatures
90901: dnl ========================================================
90901: 
90901: MOZ_ARG_ENABLE_BOOL(verify-mar,
90901: [  --enable-verify-mar     Enable verifying MAR signatures],
90901:     MOZ_VERIFY_MAR_SIGNATURE=1,
90901:     MOZ_VERIFY_MAR_SIGNATURE= )
90901: 
90901: if test -n "$MOZ_VERIFY_MAR_SIGNATURE"; then
90901:   if test "$OS_ARCH" = "WINNT"; then
90901:     AC_DEFINE(MOZ_VERIFY_MAR_SIGNATURE)
90901:   else
90901:     AC_MSG_ERROR([Can only build with --enable-verify-mar with a Windows target])
90901:   fi
90901: fi
90901: 
90901: dnl ========================================================
91180: dnl Enable building the signmar program.
91180: dnl This option is much different than the --enable-verify-mar option.
91180: dnl --enable-verify-mar is for enabling the verification check on MAR
91180: dnl files in the updater.  The --enable-signmar option is for building
91180: dnl the signmar program.
91180: dnl ========================================================
91180: 
95252: MOZ_ARG_ENABLE_BOOL(signmar,
91180: [  --enable-signmar     Enable building the signmar program],
91180:     MOZ_ENABLE_SIGNMAR=1,
91180:     MOZ_ENABLE_SIGNMAR= )
91180: 
91180: if test -n "$MOZ_ENABLE_SIGNMAR"; then
91180:   AC_DEFINE(MOZ_ENABLE_SIGNMAR)
91180: fi
91180: 
91180: dnl ========================================================
    1: dnl Updater
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_DISABLE_BOOL(updater,
    1: [  --disable-updater       Disable building of updater],
    1:     MOZ_UPDATER=,
    1:     MOZ_UPDATER=1 )
43430: 
43430: if test -n "$MOZ_UPDATER"; then
43430:     AC_DEFINE(MOZ_UPDATER)
43430: fi
    1: 
    1: # app update channel is 'default' when not supplied.
    1: MOZ_ARG_ENABLE_STRING([update-channel],
    1: [  --enable-update-channel=CHANNEL
    1:                           Select application update channel (default=default)],
    1:     MOZ_UPDATE_CHANNEL=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_UPDATE_CHANNEL"; then
    1:     MOZ_UPDATE_CHANNEL=default
    1: fi
    1: AC_DEFINE_UNQUOTED(MOZ_UPDATE_CHANNEL, $MOZ_UPDATE_CHANNEL)
46184: AC_SUBST(MOZ_UPDATE_CHANNEL)
    1: 
    1: # tools/update-packaging is not checked out by default.
    1: MOZ_ARG_ENABLE_BOOL(update-packaging,
    1: [  --enable-update-packaging
    1:                           Enable tools/update-packaging],
    1:     MOZ_UPDATE_PACKAGING=1,
    1:     MOZ_UPDATE_PACKAGING= )
    1: AC_SUBST(MOZ_UPDATE_PACKAGING)
    1: 
    1: dnl ========================================================
    1: dnl leaky
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(leaky,
    1: [  --enable-leaky          Build leaky memory tool],
    1:     MOZ_LEAKY=1,
    1:     MOZ_LEAKY=)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl build the tests by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(tests,
    1: [  --disable-tests         Do not build test libraries & programs],
    1:     ENABLE_TESTS=,
    1:     ENABLE_TESTS=1 )
    1: 
    1: dnl ========================================================
55800: dnl parental controls (for Windows Vista)
14121: dnl ========================================================
14121: MOZ_ARG_DISABLE_BOOL(parental-controls,
14121: [  --disable-parental-controls
14121:                           Do not build parental controls],
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=1,
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=)
14121: if test -n "$MOZ_DISABLE_PARENTAL_CONTROLS"; then
14121:     AC_DEFINE(MOZ_DISABLE_PARENTAL_CONTROLS)
14683: fi
14683: 
14121: AC_SUBST(MOZ_DISABLE_PARENTAL_CONTROLS)
14121: 
14121: dnl ========================================================
54926: dnl = Disable DOMCrypto
54926: dnl ========================================================
54926: if test -n "$MOZ_DISABLE_DOMCRYPTO"; then
54926:     AC_DEFINE(MOZ_DISABLE_DOMCRYPTO)
54926: fi
54926: 
54926: dnl ========================================================
    1: dnl =
    1: dnl = Module specific options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Individual module options)
    1: 
    1: dnl ========================================================
    1: dnl = Disable feed handling components
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(feeds,
    1: [  --disable-feeds         Disable feed handling and processing components],
    1:     MOZ_FEEDS=,
    1:     MOZ_FEEDS=1 )
    1: if test -n "$MOZ_FEEDS"; then
    1:     AC_DEFINE(MOZ_FEEDS)
    1: else
    1:     if test "$MOZ_BUILD_APP" = "browser"; then
    1:         AC_MSG_ERROR([Cannot build Firefox with --disable-feeds.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
12096: dnl Check for sqlite
12096: dnl ========================================================
12096: 
12096: MOZ_NATIVE_SQLITE=
12096: MOZ_ARG_ENABLE_BOOL(system-sqlite,
12096: [  --enable-system-sqlite  Use system sqlite (located with pkgconfig)],
12096: MOZ_NATIVE_SQLITE=1,
12096: MOZ_NATIVE_SQLITE= )
12096: 
12096: if test -z "$MOZ_NATIVE_SQLITE"
12096: then
12096:     SQLITE_CFLAGS=
36200:     SQLITE_LIBS='$(call EXPAND_LIBNAME_PATH,mozsqlite3,$(DIST)/lib)'
12096: else
39713:     dnl ============================
39713:     dnl === SQLite Version check ===
39713:     dnl ============================
39713:     dnl Check to see if the system SQLite package is new enough.
12096:     PKG_CHECK_MODULES(SQLITE, sqlite3 >= $SQLITE_VERSION)
39713: 
39713:     dnl ==================================
39713:     dnl === SQLITE_SECURE_DELETE check ===
39713:     dnl ==================================
39713:     dnl Check to see if the system SQLite package is compiled with
36518:     dnl SQLITE_SECURE_DELETE enabled.
39713:     AC_MSG_CHECKING(for SQLITE_SECURE_DELETE support in system SQLite)
36518:     _SAVE_CFLAGS="$CFLAGS"
36518:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
36518:     _SAVE_LIBS="$LIBS"
36518:     LIBS="$LIBS $SQLITE_LIBS"
36518:     AC_CACHE_VAL(ac_cv_sqlite_secure_delete,[
36518:         AC_TRY_RUN([
36518:             #include "sqlite3.h"
36518: 
36518:             int main(int argc, char **argv){
40728:               return !sqlite3_compileoption_used("SQLITE_SECURE_DELETE");
36518:             }],
36518:             ac_cv_sqlite_secure_delete=yes,
36518:             ac_cv_sqlite_secure_delete=no,
36518:             ac_cv_sqlite_secure_delete=no
36518:         )
36518:     ])
36518:     AC_MSG_RESULT($ac_cv_sqlite_secure_delete)
36518:     CFLAGS="$_SAVE_CFLAGS"
36518:     LIBS="$_SAVE_LIBS"
36518:     if test "x$ac_cv_sqlite_secure_delete" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_SECURE_DELETE.])
39713:     fi
39713: 
39713:     dnl ===============================
39713:     dnl === SQLITE_THREADSAFE check ===
39713:     dnl ===============================
39713:     dnl Check to see if the system SQLite package is compiled with
39713:     dnl SQLITE_THREADSAFE enabled.
39713:     AC_MSG_CHECKING(for SQLITE_THREADSAFE support in system SQLite)
39713:     _SAVE_CFLAGS="$CFLAGS"
39713:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
39713:     _SAVE_LIBS="$LIBS"
39713:     LIBS="$LIBS $SQLITE_LIBS"
39713:     AC_CACHE_VAL(ac_cv_sqlite_threadsafe,[
39713:         AC_TRY_RUN([
39713:             #include "sqlite3.h"
39713: 
39713:             int main(int argc, char **argv){
39713:               return !sqlite3_compileoption_used("SQLITE_THREADSAFE=1");
39713:             }],
39713:             ac_cv_sqlite_threadsafe=yes,
39713:             ac_cv_sqlite_threadsafe=no,
39713:             ac_cv_sqlite_threadsafe=no
39713:         )
39713:     ])
39713:     AC_MSG_RESULT($ac_cv_sqlite_threadsafe)
39713:     CFLAGS="$_SAVE_CFLAGS"
39713:     LIBS="$_SAVE_LIBS"
39713:     if test "x$ac_cv_sqlite_threadsafe" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_THREADSAFE.])
39713:     fi
39713: 
39713:     dnl ================================
39713:     dnl === SQLITE_ENABLE_FTS3 check ===
39713:     dnl ================================
39713:     dnl check to see if the system SQLite package is compiled with
44141:     dnl SQLITE_ENABLE_FTS3 enabled.
39713:     AC_MSG_CHECKING(for SQLITE_ENABLE_FTS3 support in system SQLite)
39713:     _SAVE_CFLAGS="$CFLAGS"
39713:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
39713:     _SAVE_LIBS="$LIBS"
39713:     LIBS="$LIBS $SQLITE_LIBS"
39713:     AC_CACHE_VAL(ac_cv_sqlite_enable_fts3,[
39713:         AC_TRY_RUN([
39713:             #include "sqlite3.h"
39713: 
39713:             int main(int argc, char **argv){
40728:               return !sqlite3_compileoption_used("SQLITE_ENABLE_FTS3");
39713:             }],
39713:             ac_cv_sqlite_enable_fts3=yes,
39713:             ac_cv_sqlite_enable_fts3=no,
39713:             ac_cv_sqlite_enable_fts3=no
39713:         )
39713:     ])
39713:     AC_MSG_RESULT($ac_cv_sqlite_enable_fts3)
39713:     CFLAGS="$_SAVE_CFLAGS"
39713:     LIBS="$_SAVE_LIBS"
39713:     if test "x$ac_cv_sqlite_enable_fts3" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_FTS3.])
39543:     fi
44141: 
44141:     dnl =========================================
44141:     dnl === SQLITE_ENABLE_UNLOCK_NOTIFY check ===
44141:     dnl =========================================
44141:     dnl check to see if the system SQLite package is compiled with
44141:     dnl SQLITE_ENABLE_UNLOCK_NOTIFY enabled.
44141:     AC_MSG_CHECKING(for SQLITE_ENABLE_UNLOCK_NOTIFY support in system SQLite)
44141:     _SAVE_CFLAGS="$CFLAGS"
44141:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
44141:     _SAVE_LIBS="$LIBS"
44141:     LIBS="$LIBS $SQLITE_LIBS"
44141:     AC_CACHE_VAL(ac_cv_sqlite_enable_unlock_notify,[
44141:         AC_TRY_RUN([
44141:             #include "sqlite3.h"
44141: 
44141:             int main(int argc, char **argv){
44141:               return !sqlite3_compileoption_used("SQLITE_ENABLE_UNLOCK_NOTIFY");
44141:             }],
44141:             ac_cv_sqlite_enable_unlock_notify=yes,
44141:             ac_cv_sqlite_enable_unlock_notify=no,
44141:             ac_cv_sqlite_enable_unlock_notify=no
44141:         )
44141:     ])
44141:     AC_MSG_RESULT($ac_cv_sqlite_enable_unlock_notify)
44141:     CFLAGS="$_SAVE_CFLAGS"
44141:     LIBS="$_SAVE_LIBS"
44141:     if test "x$ac_cv_sqlite_enable_unlock_notify" = "xno"; then
44141:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_UNLOCK_NOTIFY.])
36518:     fi
12096: fi
12096: 
64502: if test -n "$MOZ_NATIVE_SQLITE"; then
64502:     AC_DEFINE(MOZ_NATIVE_SQLITE)
64502: fi
12096: AC_SUBST(MOZ_NATIVE_SQLITE)
12096: 
16570: dnl ========================================================
13679: dnl = Enable help viewer (off by default)
13679: dnl ========================================================
13679: if test -n "$MOZ_HELP_VIEWER"; then
41442:      dnl Do this if defined in confvars.sh
13679:      AC_DEFINE(MOZ_HELP_VIEWER)
13679: fi
13679: 
12096: dnl ========================================================
    1: dnl = Enable safe browsing (anti-phishing)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(safe-browsing,
    1: [  --enable-safe-browsing  Enable safe browsing (anti-phishing) implementation],
    1:     MOZ_SAFE_BROWSING=1,
    1:     MOZ_SAFE_BROWSING= )
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     AC_DEFINE(MOZ_SAFE_BROWSING)
    1: fi
    1: AC_SUBST(MOZ_SAFE_BROWSING)
    1: 
    1: dnl ========================================================
    1: dnl = Enable url-classifier
    1: dnl ========================================================
    1: dnl Implicitly enabled by default if building with safe-browsing
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     MOZ_URL_CLASSIFIER=1
    1: fi
    1: MOZ_ARG_ENABLE_BOOL(url-classifier,
    1: [  --enable-url-classifier Enable url classifier module],
    1:     MOZ_URL_CLASSIFIER=1,
    1:     MOZ_URL_CLASSIFIER= )
    1: if test -n "$MOZ_URL_CLASSIFIER"; then
    1:     AC_DEFINE(MOZ_URL_CLASSIFIER)
    1: fi
    1: AC_SUBST(MOZ_URL_CLASSIFIER)
    1: 
    1: dnl ========================================================
 5928: dnl = Disable zipwriter
 5928: dnl ========================================================
 5928: MOZ_ARG_DISABLE_BOOL(zipwriter,
 5928: [  --disable-zipwriter     Disable zipwriter component],
 5928:     MOZ_ZIPWRITER=,
 5928:     MOZ_ZIPWRITER=1 )
 5928: AC_SUBST(MOZ_ZIPWRITER)
 5928: 
 5928: dnl ========================================================
51789: dnl = libconic
51789: dnl ========================================================
51789: dnl superseded by QtNetwork starting from 4.7
35003: MOZ_ENABLE_LIBCONIC=1
51789: 
51789: if test -n "$MOZ_ENABLE_QT"; then
51789:   if test "$MOZ_ENABLE_QTNETWORK"; then
51789:     MOZ_ENABLE_LIBCONIC=
51789:   fi
51789: fi
51789: 
35003: MOZ_ARG_DISABLE_BOOL(libconic,
35003: [  --disable-libconic      Disable libconic],
35003:     MOZ_ENABLE_LIBCONIC=,
35003:     MOZ_ENABLE_LIBCONIC=1 )
35003: 
35003: if test -n "$MOZ_ENABLE_LIBCONIC"; then
35003:     PKG_CHECK_MODULES(LIBCONIC, conic,
35003:                       MOZ_ENABLE_LIBCONIC=1,
35003:                       MOZ_ENABLE_LIBCONIC=)
35003: fi
35003: if test "$MOZ_ENABLE_LIBCONIC"; then
35003:     AC_DEFINE(MOZ_ENABLE_LIBCONIC)
35003: fi
35003: 
35003: AC_SUBST(MOZ_ENABLE_LIBCONIC)
35003: AC_SUBST(LIBCONIC_CFLAGS)
35003: AC_SUBST(LIBCONIC_LIBS)
35003: 
35003: dnl ========================================================
38014: dnl = Maemo checks
38014: dnl ========================================================
38014: 
38014: MAEMO_SDK_TARGET_VER=-1
38014: 
38014: MOZ_ARG_WITH_STRING(maemo-version,
38014: [  --with-maemo-version=MAEMO_SDK_TARGET_VER
38014:                           Maemo SDK Version],
38014:   MAEMO_SDK_TARGET_VER=$withval)
38014: 
38014: case "$MAEMO_SDK_TARGET_VER" in
38014: 5)
38014:     MOZ_PLATFORM_MAEMO=5
38014:     ;;
38014: 
38014: 6)
38014:     MOZ_PLATFORM_MAEMO=6
38014:     ;;
38014: 
38014: -1)
38014:     dnl We aren't compiling for Maemo, move on.
38014:     ;;
38014: *)
38014:     AC_MSG_ERROR([Unknown Maemo Version.  Try setting --with-maemo-version to 5 or 6.])
38014:     ;;
38014: esac
38014: 
38014: if test $MOZ_PLATFORM_MAEMO; then
38014:    AC_DEFINE_UNQUOTED([MOZ_PLATFORM_MAEMO], $MOZ_PLATFORM_MAEMO)
38014: 
38014:    if test -z "$MOZ_ENABLE_DBUS"; then
38014:        AC_MSG_ERROR([DBus is required when building for Maemo])
38014:    fi
38014: 
38014:    MOZ_GFX_OPTIMIZE_MOBILE=1
93982:    MOZ_GL_DEFAULT_PROVIDER=EGL
40748:    MOZ_MAEMO_LIBLOCATION=
38014: 
38014:    if test $MOZ_PLATFORM_MAEMO = 5; then
25500:       dnl if we have Xcomposite we should also have Xdamage and Xfixes
63478:       MOZ_CHECK_HEADERS([X11/extensions/Xdamage.h], [],
38014:           [AC_MSG_ERROR([Couldn't find X11/extensions/Xdamage.h which is required for composited plugins.])])
25500:       AC_CHECK_LIB(Xcomposite, XCompositeRedirectWindow, [XCOMPOSITE_LIBS="-lXcomposite -lXdamage -lXfixes"],
25500:                    [MISSING_X="$MISSING_X -lXcomposite"], $XLIBS)
38014: 
25500:       AC_SUBST(XCOMPOSITE_LIBS)
25500: 
38014:       PKG_CHECK_MODULES(LIBHILDONMIME,libhildonmime, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBHILDONMIME_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBHILDONMIME_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([Hildon Mime is required when building for Maemo])
38014:       fi
38014: 
38014: 
38014:       PKG_CHECK_MODULES(LIBOSSO,libosso, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBOSSO_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBOSSO_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([LibOSSO is required when building for Maemo])
38014:       fi
38014: 
38014:       PKG_CHECK_MODULES(LIBHILDONFM,hildon-fm-2, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBHILDONFM_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBHILDONFM_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([Hildon FM-2 is required when building for Maemo])
38014:       fi
40116: 
40748:    fi
48430:    if test $MOZ_PLATFORM_MAEMO = 6; then
78272: 
78272:       PKG_CHECK_MODULES(LIBCONTENTMANAGER, ContentManager QtSparql,
78272:                         _LIB_FOUND=1,
78272:                         _LIB_FOUND=)
78272:       if test "$_LIB_FOUND"; then
78272:          MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBCONTENTMANAGER_LIBS"
78272:          MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBCONTENTMANAGER_CFLAGS"
78272:          MOZ_ENABLE_CONTENTMANAGER=1
78272:          AC_DEFINE(MOZ_ENABLE_CONTENTMANAGER)
78272:       else
78272:          AC_MSG_WARN([Cannot find libcontentmanager and or QtSparql building for Maemo 6])
78272:       fi
78272:       AC_SUBST(MOZ_ENABLE_CONTENTMANAGER)
78272: 
61828:       dnl ========================================================
61828:       dnl = Enable meego libcontentaction
61828:       dnl ========================================================
61828:       MOZ_ARG_ENABLE_BOOL(meegocontentaction,
61828:       [  --enable-meegocontentaction           Enable meegocontentaction support],
61828:          MOZ_MEEGOCONTENTACTION=1,
61828:          MOZ_MEEGOCONTENTACTION=)
61828: 
61828:       if test -n "$MOZ_MEEGOCONTENTACTION"; then
61828: 
48430:          PKG_CHECK_MODULES(LIBCONTENTACTION, contentaction-0.1, _LIB_FOUND=1, _LIB_FOUND=)
61828:          if test "$_LIB_FOUND"; then
48430:             MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBCONTENTACTION_LIBS"
48430:             MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBCONTENTACTION_CFLAGS"
61828:             MOZ_ENABLE_CONTENTACTION=1
61828:             AC_DEFINE(MOZ_ENABLE_CONTENTACTION)
61828:             AC_SUBST(MOZ_ENABLE_CONTENTACTION)
61828:          fi
48430:       fi
72455: 
72455:       MOZ_ARG_ENABLE_BOOL(meegotouch,
72455:       [  --enable-meegotouch  Enable meegotouch support],
72455:          MOZ_MEEGOTOUCHENABLED=1,
72455:          MOZ_MEEGOTOUCHENABLED=)
72455: 
72455:       if test -n "$MOZ_MEEGOTOUCHENABLED"; then
72455:           PKG_CHECK_MODULES(MOZ_MEEGOTOUCH, meegotouchcore, _LIB_FOUND=1, _LIB_FOUND=)
72455:           if test "$_LIB_FOUND"; then
72455:               MOZ_QT_CFLAGS="$MOZ_MEEGOTOUCH_CFLAGS $MOZ_QT_CFLAGS"
72455:               MOZ_QT_LIBS="$MOZ_MEEGOTOUCH_LIBS $MOZ_QT_LIBS"
72455:               AC_DEFINE(MOZ_ENABLE_MEEGOTOUCH)
72455:           else
72455:               AC_MSG_WARN([Cannot meegotouchcore-dev. Disabling Meegotouch support.])
72455:           fi
72455:       fi
42804:    fi
42804: 
40116:    PKG_CHECK_MODULES(LIBLOCATION,liblocation, _LIB_FOUND=1, _LIB_FOUND=)
40116:    MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBLOCATION_LIBS"
40116:    MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBLOCATION_CFLAGS"
40748:    if test "$_LIB_FOUND"; then
40748:       MOZ_MAEMO_LIBLOCATION=1
40748:       AC_DEFINE(MOZ_MAEMO_LIBLOCATION)
40748:    else
40748:       AC_MSG_WARN([Cannot liblocation-dev. Disabling Maemo geolocation.])
40748:    fi
40748:    AC_SUBST(MOZ_MAEMO_LIBLOCATION)
38014: 
56000:    PKG_CHECK_MODULES(LIBMEEGOTOUCHSHARE, ShareUiInterface-maemo-meegotouch >= 0.3.31 mdatauri, _LIB_FOUND=1, _LIB_FOUND=)
56000:    MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBMEEGOTOUCHSHARE_LIBS"
56000:    MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBMEEGOTOUCHSHARE_CFLAGS"
56000:    if test "$_LIB_FOUND"; then
56000:       MOZ_ENABLE_MEEGOTOUCHSHARE=1
56000:       AC_DEFINE(MOZ_ENABLE_MEEGOTOUCHSHARE)
56000:    else
56000:       AC_MSG_WARN([Cannot find maemo-meegotouch-interfaces-dev or libmdatauri-dev. Disabling meegotouch share ui.])
56000:    fi
56000:    AC_SUBST(MOZ_ENABLE_MEEGOTOUCHSHARE)
56000: 
38014:    AC_SUBST(MOZ_PLATFORM_MAEMO_LIBS)
38014:    AC_SUBST(MOZ_PLATFORM_MAEMO_CFLAGS)
38014: fi
33886: 
71187: dnl ========================================================
74436: dnl = XRender Composite
74436: dnl ========================================================
74436: MOZ_ARG_ENABLE_BOOL(egl-xrender-composite,
74436: [  --enable-egl-xrender-composite
74436:                           Enable EGL xrender composite optimizations],
74436:     MOZ_EGL_XRENDER_COMPOSITE=1)
74436: 
74436: if test -n "$MOZ_EGL_XRENDER_COMPOSITE"; then
74436:     AC_DEFINE(MOZ_EGL_XRENDER_COMPOSITE)
74436: fi
74436: 
74436: AC_SUBST(MOZ_EGL_XRENDER_COMPOSITE)
74436: 
74436: dnl ========================================================
93982: dnl GL provider
93982: dnl ========================================================
93982: MOZ_GL_PROVIDER=
93982: MOZ_ARG_WITH_STRING(gl-provider,
93982: [  --with-gl-provider=ID
93982:                           Set GL provider backend type],
93982: [ val=`echo $withval`
93982:     MOZ_GL_PROVIDER="$val"])
93982: 
93982: if test -n "$MOZ_GL_PROVIDER"; then
93982: MOZ_GL_DEFAULT_PROVIDER=$MOZ_GL_PROVIDER
93982: AC_SUBST(MOZ_GL_PROVIDER)
93982: AC_DEFINE_UNQUOTED(MOZ_GL_PROVIDER, GLContextProvider$MOZ_GL_PROVIDER)
93982: fi
95210: AC_SUBST(MOZ_GL_DEFAULT_PROVIDER)
93982: 
93982: dnl ========================================================
27655: dnl = faststripe theme
27655: dnl ========================================================
27655: MOZ_ARG_ENABLE_BOOL(faststripe,
27655: [  --enable-faststripe     Use faststripe theme],
27655:     MOZ_THEME_FASTSTRIPE=1,
27655:     MOZ_THEME_FASTSTRIPE= )
27655: AC_SUBST(MOZ_THEME_FASTSTRIPE)
27655: 
27655: dnl ========================================================
    1: dnl =
    1: dnl = Feature options that require extra sources to be pulled
    1: dnl =
    1: dnl ========================================================
    1: dnl MOZ_ARG_HEADER(Features that require extra sources)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Debugging Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Debugging and Optimizations)
    1: 
    1: dnl ========================================================
    1: dnl = Disable building with debug info.
    1: dnl = Debugging is OFF by default
    1: dnl ========================================================
47975: if test -z "$MOZ_DEBUG_FLAGS"; then
    1:   MOZ_DEBUG_FLAGS="-g"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(debug,
    1: [  --enable-debug[=DBG]    Enable building with developer debug info
39277:                            (using compiler flags DBG)],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_DEBUG=1
39277:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:         _MOZ_DEBUG_FLAGS_SET=1
    1:     fi
    1:   else
    1:     MOZ_DEBUG=
    1:   fi ],
    1:   MOZ_DEBUG=)
    1: 
43109: MOZ_DEBUG_ENABLE_DEFS="-DDEBUG -D_DEBUG -DTRACING"
42838: MOZ_ARG_WITH_STRING(debug-label,
42838: [  --with-debug-label=LABELS
42838:                           Define DEBUG_<value> for each comma-separated
42838:                           value given.],
42838: [ for option in `echo $withval | sed 's/,/ /g'`; do
42838:     MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_${option}"
42838: done])
    1: 
    1: MOZ_DEBUG_DISABLE_DEFS="-DNDEBUG -DTRIMMED"
    1: 
    1: if test -n "$MOZ_DEBUG"; then
    1:     AC_MSG_CHECKING([for valid debug flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_DEBUG_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>],
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_DEBUG_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: 
    1: dnl ========================================================
24388: dnl enable mobile optimizations
24388: dnl ========================================================
24388: MOZ_ARG_ENABLE_BOOL(mobile-optimize,
43027: [  --enable-mobile-optimize
43027:                           Enable mobile optimizations],
24388:     MOZ_GFX_OPTIMIZE_MOBILE=1)
24388: 
24388: AC_SUBST(MOZ_GFX_OPTIMIZE_MOBILE)
24388: 
24388: if test "$MOZ_GFX_OPTIMIZE_MOBILE"; then
24388:     AC_DEFINE(MOZ_GFX_OPTIMIZE_MOBILE)
24388: fi
24388: 
24388: dnl ========================================================
    1: dnl = Enable code optimization. ON by default.
    1: dnl ========================================================
    1: if test -z "$MOZ_OPTIMIZE_FLAGS"; then
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(optimize,
    1: [  --disable-optimize      Disable compiler optimization
    1:   --enable-optimize=[OPT] Specify compiler optimization flags [OPT=-O]],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_OPTIMIZE=1
47975:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_OPTIMIZE_FLAGS=`echo "$enableval" | sed -e 's|\\\ | |g'`
    1:         MOZ_OPTIMIZE=2
    1:     fi
    1: else
    1:     MOZ_OPTIMIZE=
    1: fi ], MOZ_OPTIMIZE=1)
    1: 
77828: MOZ_SET_FRAMEPTR_FLAGS
77828: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test -n "$MOZ_OPTIMIZE"; then
    1:     AC_MSG_CHECKING([for valid optimization flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_OPTIMIZE_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>],
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_OPTIMIZE_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MOZ_OPTIMIZE)
77828: AC_SUBST(MOZ_FRAMEPTR_FLAGS)
    1: AC_SUBST(MOZ_OPTIMIZE_FLAGS)
    1: AC_SUBST(MOZ_OPTIMIZE_LDFLAGS)
96510: AC_SUBST(MOZ_ALLOW_HEAP_EXECUTE_FLAGS)
57336: AC_SUBST(MOZ_OPTIMIZE_SIZE_TWEAK)
71833: AC_SUBST(MOZ_PGO_OPTIMIZE_FLAGS)
    1: 
    1: dnl ========================================================
39277: dnl = Enable generation of debug symbols
39277: dnl ========================================================
39277: MOZ_ARG_ENABLE_STRING(debug-symbols,
43027: [  --enable-debug-symbols[=DBG]
43027:                           Enable debugging symbols (using compiler flags DBG)],
39277: [ if test "$enableval" != "no"; then
39277:       MOZ_DEBUG_SYMBOLS=1
39277:       if test -n "$enableval" -a "$enableval" != "yes"; then
39277:           if test -z "$_MOZ_DEBUG_FLAGS_SET"; then
39277:               MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:           else
39277:               AC_MSG_ERROR([--enable-debug-symbols flags cannot be used with --enable-debug flags])
39277:           fi
39277:       fi
63490:   else
63490:       MOZ_DEBUG_SYMBOLS=
63490:   fi ],
63490:   MOZ_DEBUG_SYMBOLS=1)
39277: 
39277: if test -n "$MOZ_DEBUG" -o -n "$MOZ_DEBUG_SYMBOLS"; then
39277:     AC_DEFINE(MOZ_DEBUG_SYMBOLS)
39277:     export MOZ_DEBUG_SYMBOLS
39277: fi
    1: 
    1: dnl ========================================================
86792: dnl = Enable any treating of compile warnings as errors
86792: dnl ========================================================
86792: MOZ_ARG_ENABLE_BOOL(warnings-as-errors,
86792: [  --enable-warnings-as-errors
86792:                           Enable treating of warnings as errors],
86792:     MOZ_ENABLE_WARNINGS_AS_ERRORS=1,
86792:     MOZ_ENABLE_WARNINGS_AS_ERRORS=)
86792: if test -z "$MOZ_ENABLE_WARNINGS_AS_ERRORS"; then
42001:    WARNINGS_AS_ERRORS=''
42001: fi
42001: 
42001: dnl ========================================================
42001: dnl = Disable runtime logging checks
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(logging,
    1: [  --disable-logging       Disable logging facilities],
    1:     NS_DISABLE_LOGGING=1,
    1:     NS_DISABLE_LOGGING= )
    1: if test "$NS_DISABLE_LOGGING"; then
    1:     AC_DEFINE(NS_DISABLE_LOGGING)
    1: else
    1:     AC_DEFINE(MOZ_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
42001: dnl = This will enable logging of addref, release, ctor, dtor.
    1: dnl ========================================================
    1: _ENABLE_LOGREFCNT=42
    1: MOZ_ARG_ENABLE_BOOL(logrefcnt,
    1: [  --enable-logrefcnt      Enable logging of refcounts (default=debug) ],
    1:     _ENABLE_LOGREFCNT=1,
    1:     _ENABLE_LOGREFCNT= )
    1: if test "$_ENABLE_LOGREFCNT" = "1"; then
    1:     AC_DEFINE(FORCE_BUILD_REFCNT_LOGGING)
    1: elif test -z "$_ENABLE_LOGREFCNT"; then
    1:     AC_DEFINE(NO_BUILD_REFCNT_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
82351: dnl moz_dump_painting
82351: dnl ========================================================
82351: MOZ_ARG_ENABLE_BOOL(dump-painting,
82351: [  --enable-dump-painting          Enable paint debugging.],
82351:     MOZ_DUMP_PAINTING=1,
82351:     MOZ_DUMP_PAINTING= )
82351: if test -n "$MOZ_DUMP_PAINTING"; then
82351:     AC_DEFINE(MOZ_DUMP_PAINTING)
82351:     AC_DEFINE(MOZ_LAYERS_HAVE_LOG)
82351: fi
82351: if test -n "$MOZ_DEBUG"; then
82351:     AC_DEFINE(MOZ_DUMP_PAINTING)
82351: fi
82351: 
82351: dnl ========================================================
11612: dnl = Enable trace malloc
11612: dnl ========================================================
11612: NS_TRACE_MALLOC=${MOZ_TRACE_MALLOC}
11612: MOZ_ARG_ENABLE_BOOL(trace-malloc,
84340: [  --enable-trace-malloc   Enable malloc tracing; also disables jemalloc],
11612:     NS_TRACE_MALLOC=1,
11612:     NS_TRACE_MALLOC= )
11612: if test "$NS_TRACE_MALLOC"; then
11612:   # Please, Mr. Linker Man, don't take away our symbol names
11612:   MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
11612:   USE_ELF_DYNSTR_GC=
11612:   AC_DEFINE(NS_TRACE_MALLOC)
11612: fi
11612: AC_SUBST(NS_TRACE_MALLOC)
11612: 
11612: dnl ========================================================
11612: dnl = Enable jemalloc
11227: dnl ========================================================
11227: MOZ_ARG_ENABLE_BOOL(jemalloc,
11227: [  --enable-jemalloc       Replace memory allocator with jemalloc],
11227:     MOZ_MEMORY=1,
11227:     MOZ_MEMORY=)
11612: 
11612: if test "$NS_TRACE_MALLOC"; then
11612:     MOZ_MEMORY=
11612: fi
84340: if test "$MOZ_DMD"; then
84340:     MOZ_MEMORY=
84340: fi
11612: 
78307: if test "${OS_TARGET}" = "Android"; then
86905:   dnl On Android, we use WRAP_LDFLAGS to link everything to mozglue
78307:   :
78307: elif test "${OS_TARGET}" = "WINNT" -o "${OS_TARGET}" = "Darwin" -o "${OS_TARGET}" = "OS2"; then
86905:   dnl On Windows, OSX and OS2, we want to link all our binaries against mozglue
91416:   if test -z "$GNU_CC"; then
86905:     MOZ_GLUE_LDFLAGS='$(call EXPAND_LIBNAME_PATH,mozglue,$(LIBXUL_DIST)/lib)'
86905:   else
91416:     MOZ_GLUE_LDFLAGS='-L$(LIBXUL_DIST)/lib $(call EXPAND_LIBNAME,mozglue)'
91416:   fi
91416: else
86905:   dnl On other Unix systems, we only want to link executables against mozglue
86905:   MOZ_GLUE_PROGRAM_LDFLAGS='$(MKSHLIB_FORCE_ALL) $(call EXPAND_LIBNAME_PATH,mozglue,$(LIBXUL_DIST)/lib) $(MKSHLIB_UNFORCE_ALL)'
78307:   if test -n "$GNU_CC"; then
86905:     dnl And we need mozglue symbols to be exported.
86905:     MOZ_GLUE_PROGRAM_LDFLAGS="$MOZ_GLUE_PROGRAM_LDFLAGS -rdynamic"
78307:   fi
87789:   if test "$MOZ_LINKER" = 1; then
87789:     MOZ_GLUE_PROGRAM_LDFLAGS="$MOZ_GLUE_PROGRAM_LDFLAGS $ZLIB_LIBS"
87789:   fi
78307: fi
78307: 
68572: if test -z "$MOZ_MEMORY"; then
68572:   case "${target}" in
68572:     *-mingw*)
68789:       if test -z "$WIN32_REDIST_DIR" -a -z "$MOZ_DEBUG"; then
68572:         AC_MSG_WARN([When not building jemalloc, you need to set WIN32_REDIST_DIR to the path to the Visual C++ Redist (usually VCINSTALLDIR\redist\x86\Microsoft.VC80.CRT, for VC++ v8) if you intend to distribute your build.])
68572:       fi
68572:       ;;
68572:   esac
68572: else
11227:   dnl Don't try to run compiler tests on Windows
11227:   if test "$OS_ARCH" = "WINNT"; then
11227:     if test -z "$HAVE_64BIT_OS"; then
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:     else
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:     fi
11227:   else
11227:     AC_CHECK_SIZEOF([int *], [4])
11227:     case "${ac_cv_sizeof_int_p}" in
11227:     4)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:       ;;
11227:     8)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:       ;;
11227:     *)
11227:       AC_MSG_ERROR([Unexpected pointer size])
11227:       ;;
11227:     esac
11227:   fi
11227: 
11227:   AC_DEFINE(MOZ_MEMORY)
11227:   if test "x$MOZ_DEBUG" = "x1"; then
11227:     AC_DEFINE(MOZ_MEMORY_DEBUG)
11227:   fi
11227:   dnl The generic feature tests that determine how to compute ncpus are long and
11227:   dnl complicated.  Therefore, simply define special cpp variables for the
11227:   dnl platforms we have special knowledge of.
42803:   case "${target}" in
42803:   *-darwin*)
11227:     AC_DEFINE(MOZ_MEMORY_DARWIN)
11227:     ;;
42803:   *-*freebsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
70914:   *-android*|*-linuxandroid*)
70914:     AC_DEFINE(MOZ_MEMORY_LINUX)
70914:     AC_DEFINE(MOZ_MEMORY_ANDROID)
70914:     _WRAP_MALLOC=1
86905:     MOZ_GLUE_LDFLAGS=
70914:     ;;
42803:   *-*linux*)
11227:     AC_DEFINE(MOZ_MEMORY_LINUX)
11227:     ;;
42803:   *-netbsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
42803:   *-solaris*)
11227:     AC_DEFINE(MOZ_MEMORY_SOLARIS)
11227:     ;;
63450:   *-mingw*)
11227:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
72611:     if test -z "$MOZ_DEBUG"; then
72611:       WIN32_CRT_LIBS="msvcrt.lib msvcprt.lib"
72611:     else
72611:       WIN32_CRT_LIBS="msvcrtd.lib msvcprtd.lib"
72611:     fi
73922:     dnl Look for a broken crtdll.obj
74453:     WIN32_CRTDLL_FULLPATH=`lib -nologo -list $WIN32_CRT_LIBS | grep crtdll\\.obj`
74453:     lib -NOLOGO -OUT:crtdll.obj $WIN32_CRT_LIBS -EXTRACT:$WIN32_CRTDLL_FULLPATH
73934:     if grep -q '__imp__\{0,1\}free' crtdll.obj; then
86905:       MOZ_GLUE_LDFLAGS='-LIBPATH:$(DIST)/lib -NODEFAULTLIB:msvcrt -NODEFAULTLIB:msvcrtd -NODEFAULTLIB:msvcprt -NODEFAULTLIB:msvcprtd -DEFAULTLIB:mozcrt'
12206:       dnl Also pass this to NSPR/NSS
86905:       DLLFLAGS="$DLLFLAGS $MOZ_GLUE_LDFLAGS"
86905:     else
86905:       DLLFLAGS="$DLLFLAGS -LIBPATH:\$(DIST)/lib -DEFAULTLIB:mozglue"
81083:     fi
81083:     rm crtdll.obj
81083: 
12206:     export DLLFLAGS
11227:     ;;
11227:   *)
11227:     AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
11227:     ;;
11227:   esac
68572: fi # MOZ_MEMORY
11227: AC_SUBST(MOZ_MEMORY)
86905: AC_SUBST(MOZ_GLUE_LDFLAGS)
86905: AC_SUBST(MOZ_GLUE_PROGRAM_LDFLAGS)
72611: AC_SUBST(WIN32_CRT_LIBS)
12206: dnl Need to set this for make because NSS doesn't have configure
12206: AC_SUBST(DLLFLAGS)
11227: 
77590: dnl We need to wrap dlopen and related functions on Android because we use
77590: dnl our own linker.
77590: if test "$OS_TARGET" = Android; then
86905:     WRAP_LDFLAGS="${WRAP_LDFLAGS} -L$_objdir/dist/lib -lmozglue"
87076:     if test -n "$MOZ_OLD_LINKER"; then
87076:         WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=dlopen,--wrap=dlclose,--wrap=dlerror,--wrap=dlsym,--wrap=dladdr"
87076:     fi
89770:     WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=getaddrinfo,--wrap=freeaddrinfo,--wrap=gai_strerror"
95021:     WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=fork,--wrap=pthread_atfork,--wrap=raise"
77590: fi
77590: 
11227: dnl ========================================================
    1: dnl = Use malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(wrap-malloc,
    1: [  --enable-wrap-malloc    Wrap malloc calls (gnu linker only)],
    1:     _WRAP_MALLOC=1,
    1:     _WRAP_MALLOC= )
    1: 
    1: if test -n "$_WRAP_MALLOC"; then
77590:     if test -n "$GNU_CC"; then
77590:         WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=malloc,--wrap=calloc,--wrap=valloc,--wrap=free,--wrap=realloc,--wrap=memalign"
77590:         WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=__builtin_new,--wrap=__builtin_vec_new,--wrap=__builtin_delete,--wrap=__builtin_vec_delete"
77590:         WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=strdup,--wrap=strndup"
77590:         WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=posix_memalign,--wrap=malloc_usable_size"
96307:         dnl Wrap operator new and operator delete on Android.
96307:         if test "$OS_TARGET" = "Android"; then
96307:             WRAP_LDFLAGS="${WRAP_LDFLAGS} -Wl,--wrap=_Znwj,--wrap=_Znaj,--wrap=_ZdlPv,--wrap=_ZdaPv"
96307:         fi
77590:     else
77590:         AC_MSG_ERROR([--enable-wrap-malloc is not supported for non-GNU toolchains])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Location of malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(wrap-malloc,
    1: [  --with-wrap-malloc=DIR  Location of malloc wrapper library],
77590:     WRAP_LDFLAGS="${WRAP_LDFLAGS} $withval")
    1: 
    1: dnl ========================================================
50455: dnl = Use JS Call tracing
50455: dnl ========================================================
50455: MOZ_ARG_ENABLE_BOOL(trace-jscalls,
50455: [  --enable-trace-jscalls  Enable JS call enter/exit callback (default=no)],
50455:     MOZ_TRACE_JSCALLS=1,
50455:     MOZ_TRACE_JSCALLS= )
50455: if test -n "$MOZ_TRACE_JSCALLS"; then
50455:     AC_DEFINE(MOZ_TRACE_JSCALLS)
50455: fi
50455: 
50455: dnl ========================================================
82129: dnl = Use incremental GC
82129: dnl ========================================================
82129: JSGC_INCREMENTAL=1
82129: MOZ_ARG_DISABLE_BOOL(gcincremental,
82129: [  --disable-gcincremental Disable incremental GC],
82129:     JSGC_INCREMENTAL= )
82129: if test -n "$JSGC_INCREMENTAL"; then
82129:     AC_DEFINE(JSGC_INCREMENTAL)
82129: fi
82129: 
82129: dnl ========================================================
73745: dnl ETW - Event Tracing for Windows
73745: dnl ========================================================
73745: MOZ_ARG_ENABLE_BOOL(ETW,
88305: [  --enable-ETW            Enable ETW (Event Tracing for Windows) event reporting],
73745:     MOZ_ETW=1,
73745:     MOZ_ETW= )
73745: if test -n "$MOZ_ETW"; then
73745:     AC_DEFINE(MOZ_ETW)
73745: fi
73745: 
73745: if test -n "$MOZ_ETW"; then
73745:     if test -z "$MOZ_WINSDK_TARGETVER"; then
73745:         AC_MSG_ERROR([--enable-ETW is only valid on Windows])
73745:     fi
73745: fi
73745: 
73745: dnl ========================================================
23530: dnl Zealous JavaScript GC
23530: dnl ========================================================
23530: MOZ_ARG_ENABLE_BOOL(gczeal,
23530: [  --enable-gczeal         Enable zealous JavaScript GCing],
23530:     JS_GC_ZEAL=1,
23530:     JS_GC_ZEAL= )
23530: if test -n "$JS_GC_ZEAL"; then
23530:     AC_DEFINE(JS_GC_ZEAL)
23530: fi
23530: 
75365: dnl ========================================================
75365: dnl JS opt-mode assertions and minidump instrumentation
75365: dnl ========================================================
75365: MOZ_ARG_ENABLE_BOOL(js-diagnostics,
75365: [  --enable-js-diagnostics
75365:                           Enable JS diagnostic assertions and breakpad data],
75365:     JS_CRASH_DIAGNOSTICS=1,
75365:     JS_CRASH_DIAGNOSTICS= )
75365: if test -n "$JS_CRASH_DIAGNOSTICS"; then
75365:     AC_DEFINE(JS_CRASH_DIAGNOSTICS)
75365: fi
75365: 
47824: dnl ======================================================
47824: dnl = Enable compiling with ccache
47824: dnl ======================================================
47824: MOZ_ARG_WITH_STRING(ccache,
48218: [  --with-ccache[=path/to/ccache]
47824:                           Enable compiling with ccache],
48218:     CCACHE=$withval, CCACHE="no")
48218: 
48218: if test "$CCACHE" != "no"; then
48218:     if test -z "$CCACHE" -o "$CCACHE" = "yes"; then
48218:         CCACHE=
48218:     else
48218:         if test ! -e "$CCACHE"; then
48218:             AC_MSG_ERROR([$CCACHE not found])
48218:         fi
48218:     fi
48218:     MOZ_PATH_PROGS(CCACHE, $CCACHE ccache)
48218:     if test -z "$CCACHE" -o "$CCACHE" = ":"; then
48218:         AC_MSG_ERROR([ccache not found])
48218:     elif test -x "$CCACHE"; then
48218:         CC="$CCACHE $CC"
48218:         CXX="$CCACHE $CXX"
48218:     else
48218:         AC_MSG_ERROR([$CCACHE is not executable])
48218:     fi
47824: fi
47824: 
23530: dnl ========================================================
12116: dnl = Enable static checking using gcc-dehydra
12116: dnl ========================================================
12116: 
12116: MOZ_ARG_WITH_STRING(static-checking,
12116: [  --with-static-checking=path/to/gcc_dehydra.so
12116:                           Enable static checking of code using GCC-dehydra],
12116:     DEHYDRA_PATH=$withval,
12116:     DEHYDRA_PATH= )
12116: 
12116: if test -n "$DEHYDRA_PATH"; then
24371:     if test ! -f "$DEHYDRA_PATH"; then
12116:         AC_MSG_ERROR([The dehydra plugin is not at the specified path.])
12116:     fi
12116:     AC_DEFINE(NS_STATIC_CHECKING)
12116: fi
12116: AC_SUBST(DEHYDRA_PATH)
12116: 
12116: dnl ========================================================
    1: dnl = Enable stripping of libs & executables
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(strip,
    1: [  --enable-strip          Enable stripping of libs & executables ],
    1:     ENABLE_STRIP=1,
    1:     ENABLE_STRIP= )
    1: 
    1: dnl ========================================================
 4703: dnl = Enable stripping of libs & executables when packaging
 4703: dnl ========================================================
 4703: MOZ_ARG_ENABLE_BOOL(install-strip,
 4703: [  --enable-install-strip  Enable stripping of libs & executables when packaging ],
 4703:     PKG_SKIP_STRIP= ,
 4703:     PKG_SKIP_STRIP=1)
 4703: 
 4703: dnl ========================================================
    1: dnl = --enable-elf-dynstr-gc
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(elf-dynstr-gc,
    1: [  --enable-elf-dynstr-gc  Enable elf dynstr garbage collector (opt builds only)],
    1:     USE_ELF_DYNSTR_GC=1,
    1:     USE_ELF_DYNSTR_GC= )
    1: 
    1: dnl ========================================================
61171: dnl = --disable-elf-hack
61171: dnl ========================================================
61171: 
63513: USE_ELF_HACK=1
61171: MOZ_ARG_DISABLE_BOOL(elf-hack,
61171: [  --disable-elf-hack      Disable elf hacks],
61171:     USE_ELF_HACK=,
61171:     USE_ELF_HACK=1)
61171: 
63509: # Only enable elfhack where supported
63509: if test "$USE_ELF_HACK" = 1; then
63509:     case "${HOST_OS_ARCH},${OS_ARCH}" in
63509:     Linux,Linux)
63509:         case "${CPU_ARCH}" in
63509:         arm | x86 | x86_64)
63509:             USE_ELF_HACK=1
63509:             ;;
63509:         *)
63509:             USE_ELF_HACK=
63509:             ;;
63509:         esac
63509:         ;;
63509:     *)
63509:         USE_ELF_HACK=
63509:         ;;
63509:     esac
63509: fi
63509: 
72134: if test "$USE_ELF_HACK" = 1; then
72134:     dnl PT_GNU_RELRO segment makes the dynamic linker set a read-only flag on
72134:     dnl memory addresses it maps to. The result is that by the time elfhack
72134:     dnl kicks in, it is not possible to apply relocations because of that,
72134:     dnl thus elfhack effectively skips relocations inside the PT_GNU_RELRO
72134:     dnl segment. It makes elfhack mostly useless, so considering the problems
72134:     dnl we have we PT_GNU_RELRO (e.g. bug 664366), and until elfhack can deal
72134:     dnl with PT_GNU_RELRO segments, it's just simpler to disable elfhack when
72134:     dnl the linker creates PT_GNU_RELRO segments.
72134:     AC_CACHE_CHECK([whether linker creates PT_GNU_RELRO segments],
72134:         LINK_WITH_PT_GNU_RELRO,
72134:         [echo "int main() {return 0;}" > conftest.${ac_ext}
72134:          if AC_TRY_COMMAND(${CC-cc} -o conftest${ac_exeext} $LDFLAGS conftest.${ac_ext} $LIBS 1>&2) &&
72134:             test -s conftest${ac_exeext}; then
72134:             if readelf -l conftest${ac_exeext} | grep GNU_RELRO > /dev/null; then
72134:                 LINK_WITH_PT_GNU_RELRO=yes
72134:             else
72134:                 LINK_WITH_PT_GNU_RELRO=no
72134:             fi
72134:          else
72134:              dnl We really don't expect to get here, but just in case
72134:              AC_ERROR([couldn't compile a simple C file])
72134:          fi
72134:          rm -rf conftest*])
72134:     if test "$LINK_WITH_PT_GNU_RELRO" = yes; then
72134:         AC_MSG_WARN([Disabling elfhack])
72134:         USE_ELF_HACK=
72134:     fi
72134: fi
72134: 
61171: dnl ========================================================
68511: dnl = libstdc++ compatibility hacks
68511: dnl ========================================================
68511: 
68511: STDCXX_COMPAT=
68556: MOZ_ARG_ENABLE_BOOL(stdcxx-compat,
68556: [  --enable-stdcxx-compat  Enable compatibility with older libstdc++],
68556:     STDCXX_COMPAT=stdc++compat.cpp)
68511: 
68511: AC_SUBST(STDCXX_COMPAT)
68511: 
71526: if test -n "$STDCXX_COMPAT"; then
86964:    eval $(CXX="$CXX" MACOS_SDK_DIR="$MACOS_SDK_DIR" $PYTHON $_topsrcdir/build/autoconf/libstdcxx.py)
71526:    AC_SUBST(MOZ_LIBSTDCXX_TARGET_VERSION)
71526:    AC_SUBST(MOZ_LIBSTDCXX_HOST_VERSION)
71526: fi
71526: 
68511: dnl ========================================================
    1: dnl =
    1: dnl = Profiling and Instrumenting
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Profiling and Instrumenting)
    1: 
    1: dnl ========================================================
41042: dnl = Enable NS_FUNCTION_TIMER, which provides Function
41042: dnl = timing for identifying code bottlenecks
41042: dnl = NS_FUNCTION_TIMER is off by default.
41042: dnl ========================================================
41042: MOZ_ARG_ENABLE_BOOL(functiontimer,
41042: [  --enable-functiontimer  Enable NS_FUNCTION_TIMER ],
41042:     NS_FUNCTION_TIMER=1,
41042:     NS_FUNCTION_TIMER= )
41042: if test -n "$NS_FUNCTION_TIMER"; then
41042:     AC_DEFINE(NS_FUNCTION_TIMER)
41042: fi
41042: 
41042: dnl ========================================================
    1: dnl Turn on reflow counting
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(reflow-perf,
    1: [  --enable-reflow-perf    Enable reflow performance tracing],
    1:     MOZ_REFLOW_PERF=1,
    1:     MOZ_REFLOW_PERF= )
27962: if test -n "$MOZ_REFLOW_PERF"; then
27962:     AC_DEFINE(MOZ_REFLOW_PERF)
27962: fi
    1: 
    1: dnl ========================================================
    1: dnl Enable code size metrics.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(codesighs,
    1: [  --enable-codesighs      Enable code size analysis tools],
    1:     _ENABLE_CODESIGHS=1,
    1:     _ENABLE_CODESIGHS= )
    1: if test -n "$_ENABLE_CODESIGHS"; then
    1:     if test -d $srcdir/tools/codesighs; then
    1:         MOZ_MAPINFO=1
    1:     else
    1:         AC_MSG_ERROR([Codesighs directory $srcdir/tools/codesighs required.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Support for Quantify (Windows)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(quantify,
    1: [  --enable-quantify       Enable Quantify support (Windows only) ],
    1:     MOZ_QUANTIFY=1,
    1:     MOZ_QUANTIFY= )
    1: 
    1: dnl ========================================================
83421: dnl = Enable Radio Interface for B2G (Gonk usually)
83421: dnl ========================================================
83421: MOZ_ARG_ENABLE_BOOL(b2g-ril,
83421: [  --enable-b2g-ril      Set compile flags necessary for testing B2G Radio Interface Layer via network sockets ],
83421:     MOZ_B2G_RIL=1,
83421:     MOZ_B2G_RIL= )
83421: if test -n "$MOZ_B2G_RIL"; then
83421:    AC_DEFINE(MOZ_B2G_RIL)
83421: fi
83421: AC_SUBST(MOZ_B2G_RIL)
83421: 
83421: dnl ========================================================
90498: dnl = Enable Bluetooth Interface for B2G (Gonk usually)
90498: dnl ========================================================
90498: MOZ_ARG_ENABLE_BOOL(b2g-bt,
90498: [  --enable-b2g-bt      Set compile flags necessary for compiling Bluetooth API for B2G ],
90498:     MOZ_B2G_BT=1,
90498:     MOZ_B2G_BT= )
90498: if test -n "$MOZ_B2G_BT"; then
90498:    AC_DEFINE(MOZ_B2G_BT)
90498: fi
90498: AC_SUBST(MOZ_B2G_BT)
90498: 
90498: dnl ========================================================
    1: dnl = Support for demangling undefined symbols
    1: dnl ========================================================
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
    1:     AC_LANG_RESTORE
    1: fi
    1: 
    1: # Demangle only for debug or trace-malloc builds
    1: MOZ_DEMANGLE_SYMBOLS=
79477: if test "$HAVE_DEMANGLE" && test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_DEMANGLE_SYMBOLS=1
    1:     AC_DEFINE(MOZ_DEMANGLE_SYMBOLS)
    1: fi
    1: AC_SUBST(MOZ_DEMANGLE_SYMBOLS)
    1: 
 7836: dnl ========================================================
 7836: dnl = Support for gcc stack unwinding (from gcc 3.3)
 7836: dnl ========================================================
79477: if test -z "$SKIP_LIBRARY_CHECKS"; then
63478:     MOZ_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
 7836: fi
    1: 
    1: dnl ========================================================
80221: dnl JIT observers
80221: dnl ========================================================
80221: 
80221: MOZ_ARG_WITH_STRING(jitreport-granularity,
80221: [  --jitreport-granularity=N
80221:                            Default granularity at which to report JIT code
80221:                            to external tools
80221:                              0 - no info
80221:                              1 - code ranges for whole functions only
80221:                              2 - per-line information
80221:                              3 - per-op information],
80221:   JITREPORT_GRANULARITY=$withval,
80221:   JITREPORT_GRANULARITY=3)
80221: 
80221: AC_DEFINE_UNQUOTED(JS_DEFAULT_JITREPORT_GRANULARITY, $JITREPORT_GRANULARITY)
80221: 
80221: dnl ========================================================
    1: dnl =
    1: dnl = Misc. Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Misc. Options)
    1: 
    1: dnl ========================================================
    1: dnl update xterm title
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xterm-updates,
    1: [  --enable-xterm-updates  Update XTERM titles with current command.],
    1:     MOZ_UPDATE_XTERM=1,
    1:     MOZ_UPDATE_XTERM= )
    1: 
    1: dnl =========================================================
    1: dnl = Chrome format
    1: dnl =========================================================
    1: MOZ_ARG_ENABLE_STRING([chrome-format],
42462: [  --enable-chrome-format=jar|flat|both|symlink|omni
    1:                           Select FORMAT of chrome files (default=jar)],
    1:     MOZ_CHROME_FILE_FORMAT=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_CHROME_FILE_FORMAT"; then
    1:     MOZ_CHROME_FILE_FORMAT=jar
    1: fi
    1: 
    1: if test "$MOZ_CHROME_FILE_FORMAT" != "jar" &&
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "flat" &&
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "symlink" &&
42462:     test "$MOZ_CHROME_FILE_FORMAT" != "both" &&
42462:     test "$MOZ_CHROME_FILE_FORMAT" != "omni"; then
42462:     AC_MSG_ERROR([--enable-chrome-format must be set to either jar, flat, both, symlink, or omni])
42462: fi
42462: 
42462: dnl =========================================================
42462: dnl Omnijar packaging (bug 552121)
42462: dnl =========================================================
42462: dnl Omnijar packaging is compatible with flat packaging.
42462: dnl In unpackaged builds, omnijar looks for files as if
42462: dnl things were flat packaged. After packaging, all files
42462: dnl are loaded from a single jar. MOZ_CHROME_FILE_FORMAT
42462: dnl is set to flat since putting files into jars is only
42462: dnl done during packaging with omnijar.
42462: if test "$MOZ_CHROME_FILE_FORMAT" = "omni"; then
42462:     MOZ_OMNIJAR=1
42462:     AC_DEFINE(MOZ_OMNIJAR)
82176:     if test "$OS_ARCH" = "WINNT" -o "$OS_ARCH" = "OS2" -o "$OS_TARGET" = "Android"; then
82176:         MOZ_CHROME_FILE_FORMAT=flat
82176:     else
82176:         MOZ_CHROME_FILE_FORMAT=symlink
82176:     fi
82176: elif test "$MOZ_CHROME_FILE_FORMAT" = "jar"; then
82176:     AC_DEFINE(MOZ_CHROME_FILE_FORMAT_JAR)
82176: fi
82176: 
82175: OMNIJAR_NAME=omni.ja
82175: AC_SUBST(OMNIJAR_NAME)
42462: AC_SUBST(MOZ_OMNIJAR)
42462: 
    1: dnl ========================================================
    1: dnl = Define default location for MOZILLA_FIVE_HOME
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(default-mozilla-five-home,
    1: [  --with-default-mozilla-five-home
    1:                           Set the default value for MOZILLA_FIVE_HOME],
    1: [ val=`echo $withval`
    1:   AC_DEFINE_UNQUOTED(MOZ_DEFAULT_MOZILLA_FIVE_HOME,"$val") ])
    1: 
    1: dnl ========================================================
    1: dnl = Location of the mozilla user directory (default is ~/.mozilla).],
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(user-appdir,
    1: [  --with-user-appdir=DIR  Set user-specific appdir (default=.mozilla)],
    1: [ val=`echo $withval`
    1: if echo "$val" | grep "\/" >/dev/null; then
    1:     AC_MSG_ERROR("Homedir must be single relative path.")
    1: else
    1:     MOZ_USER_DIR="$val"
    1: fi])
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_USER_DIR,"$MOZ_USER_DIR")
    1: 
    1: dnl ========================================================
    1: dnl = Doxygen configuration
    1: dnl ========================================================
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INPUT_DIRS='./dist/include ./dist/idl'
    1: MOZ_ARG_WITH_STRING(doc-input-dirs,
    1: [  --with-doc-input-dirs=DIRS
    1:                           Header/idl dirs to create docs from],
    1: [ MOZ_DOC_INPUT_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INPUT_DIRS)
    1: 
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INCLUDE_DIRS='./dist/include ./dist/include/nspr'
    1: MOZ_ARG_WITH_STRING(doc-include-dirs,
    1: [  --with-doc-include-dirs=DIRS
    1:                           Include dirs to preprocess doc headers],
    1: [ MOZ_DOC_INCLUDE_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INCLUDE_DIRS)
    1: 
    1: MOZ_DOC_OUTPUT_DIR='./dist/docs'
    1: MOZ_ARG_WITH_STRING(doc-output-dir,
    1: [  --with-doc-output-dir=DIR
    1:                           Dir to generate docs into],
    1: [ MOZ_DOC_OUTPUT_DIR=$withval ] )
    1: AC_SUBST(MOZ_DOC_OUTPUT_DIR)
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl ========================================================
    1: dnl =
    1: dnl = Compiler Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Compiler Options)
    1: 
    1: dnl ========================================================
    1: dnl Check for gcc -pipe support
    1: dnl ========================================================
84341: AC_MSG_CHECKING([for -pipe support])
84341: if test -n "$GNU_CC" -a -n "$GNU_CXX"; then
84341:     dnl Any gcc that supports firefox supports -pipe.
    1:     CFLAGS="$CFLAGS -pipe"
    1:     CXXFLAGS="$CXXFLAGS -pipe"
84341:     AC_MSG_RESULT([yes])
    1: else
    1:     AC_MSG_RESULT([no])
    1: fi
    1: 
11977: dnl ========================================================
69923: dnl Profile guided optimization (gcc checks)
11977: dnl ========================================================
    1: dnl Test for profiling options
    1: dnl Under gcc 3.4+, use -fprofile-generate/-fprofile-use
    1: 
    1: _SAVE_CFLAGS="$CFLAGS"
41961: CFLAGS="$CFLAGS -fprofile-generate -fprofile-correction"
    1: 
    1: AC_MSG_CHECKING([whether C compiler supports -fprofile-generate])
    1: AC_TRY_COMPILE([], [return 0;],
    1:                [ PROFILE_GEN_CFLAGS="-fprofile-generate"
    1:                  result="yes" ], result="no")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test $result = "yes"; then
11787:   PROFILE_GEN_LDFLAGS="-fprofile-generate"
69374:   PROFILE_USE_CFLAGS="-fprofile-use -fprofile-correction -Wcoverage-mismatch"
11787:   PROFILE_USE_LDFLAGS="-fprofile-use"
    1: fi
    1: 
    1: CFLAGS="$_SAVE_CFLAGS"
    1: 
13273: if test -n "$INTEL_CC"; then
13232:   PROFILE_GEN_CFLAGS="-prof-gen -prof-dir ."
13232:   PROFILE_GEN_LDFLAGS=
13232:   PROFILE_USE_CFLAGS="-prof-use -prof-dir ."
13232:   PROFILE_USE_LDFLAGS=
13232: fi
13232: 
14124: dnl Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
14124:   PROFILE_GEN_CFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_GEN_LDFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_USE_CFLAGS="-xprofile=use:$_objdir/$enable_application"
14124:   PROFILE_USE_LDFLAGS="-xprofile=use:$_objdir/$enable_application"
14124: fi
14124: 
    1: AC_SUBST(PROFILE_GEN_CFLAGS)
11787: AC_SUBST(PROFILE_GEN_LDFLAGS)
    1: AC_SUBST(PROFILE_USE_CFLAGS)
11787: AC_SUBST(PROFILE_USE_LDFLAGS)
    1: 
    1: AC_LANG_CPLUSPLUS
    1: 
    1: dnl ========================================================
    1: dnl Test for -pedantic bustage
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pedantic,
    1: [  --disable-pedantic      Issue all warnings demanded by strict ANSI C ],
    1: _PEDANTIC= )
    1: if test "$_PEDANTIC"; then
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
82169:     CXXFLAGS="$CXXFLAGS -pedantic ${_WARNINGS_CXXFLAGS} -Wno-long-long"
    1:     AC_MSG_CHECKING([whether C++ compiler has -pedantic long long bug])
    1:     AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                    [CONFIGURE_STATIC_ASSERT(sizeof(long long) == 8)],
    1:                    result="no", result="yes" )
    1:     AC_MSG_RESULT([$result])
    1:     CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1:     case "$result" in
    1:     no)
82169:         _WARNINGS_CFLAGS="-pedantic ${_WARNINGS_CFLAGS} -Wno-long-long"
82169:         _WARNINGS_CXXFLAGS="-pedantic ${_WARNINGS_CXXFLAGS} -Wno-long-long"
    1:         ;;
    1:     yes)
    1:         AC_MSG_ERROR([Your compiler appears to have a known bug where long long is miscompiled when using -pedantic.  Reconfigure using --disable-pedantic. ])
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Autoconf test for gcc 2.7.2.x (and maybe others?) so that we don't
    1: dnl provide non-const forms of the operator== for comparing nsCOMPtrs to
    1: dnl raw pointers in nsCOMPtr.h.  (VC++ has the same bug.)
    1: dnl ========================================================
    1: _SAVE_CXXFLAGS=$CXXFLAGS
    1: CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS}"
    1: AC_CACHE_CHECK(for correct overload resolution with const and templates,
    1:     ac_nscap_nonconst_opeq_bug,
    1:     [AC_TRY_COMPILE([
    1:                       template <class T>
    1:                       class Pointer
    1:                         {
    1:                         public:
    1:                           T* myPtr;
    1:                         };
    1: 
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1: 
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, const U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                     ],
    1:                     [
    1:                       Pointer<int> foo;
    1:                       const int* bar;
    1:                       return foo == bar;
    1:                     ],
    1:                     ac_nscap_nonconst_opeq_bug="no",
    1:                     ac_nscap_nonconst_opeq_bug="yes")])
    1: CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1: if test "$ac_nscap_nonconst_opeq_bug" = "yes" ; then
    1:     AC_DEFINE(NSCAP_DONT_PROVIDE_NONCONST_OPEQ)
    1: fi
69923: fi # ! SKIP_COMPILER_CHECKS
    1: 
    1: AC_DEFINE(CPP_THROW_NEW, [throw()])
    1: AC_LANG_C
    1: 
91800: MOZ_EXPAND_LIBS
63472: 
63472: dnl ========================================================
63472: dnl =
    1: dnl = Build depencency options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Build dependencies)
    1: 
    1: dnl ========================================================
    1: dnl = Do not auto generate dependency info
    1: dnl ========================================================
    1: MOZ_AUTO_DEPS=1
    1: MOZ_ARG_DISABLE_BOOL(auto-deps,
    1: [  --disable-auto-deps     Do not automatically generate dependency info],
    1:     MOZ_AUTO_DEPS=,
    1:     MOZ_AUTO_DEPS=1)
    1: 
    1: if test -n "$MOZ_AUTO_DEPS"; then
    1: dnl ========================================================
    1: dnl = Use mkdepend instead of $CC -MD for dependency generation
    1: dnl ========================================================
    1: _cpp_md_flag=
    1: MOZ_ARG_DISABLE_BOOL(md,
    1: [  --disable-md            Do not use compiler-based dependencies ],
    1:   [_cpp_md_flag=],
    1:   [_cpp_md_flag=1],
    1:   [dnl Default is to turn on -MD if using GNU-compatible compilers
63508:    if test "$GNU_CC" -a "$GNU_CXX"; then
    1:      _cpp_md_flag=1
 4766:    fi
 4766:   dnl Default is to use -xM if using Sun Studio on Solaris
24783:    if test "$SOLARIS_SUNPRO_CC"; then
 4766:      _cpp_md_flag=1
    1:    fi])
    1: if test "$_cpp_md_flag"; then
    1:   COMPILER_DEPEND=1
47213:   _DEPEND_CFLAGS='$(filter-out %/.pp,-MD -MF $(MDDEPDIR)/$(basename $(@F)).pp)'
 4766:   dnl Sun Studio on Solaris use -xM instead of -MD, see config/rules.mk
24783:   if test "$SOLARIS_SUNPRO_CC"; then
 4766:     _DEPEND_CFLAGS=
 4766:   fi
    1: else
    1:   COMPILER_DEPEND=
31530:   dnl Don't override this for MSVC
31530:   if test -z "$_WIN32_MSVC"; then
    1:     _USE_CPP_INCLUDE_FLAG=
    1:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1:     _DEFINES_CXXFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
48881:   else
54266:     echo '#include <stdio.h>' > dummy-hello.c
54266:     changequote(,)
79475:     CL_INCLUDES_PREFIX=`${CC} -showIncludes -c -Fonul dummy-hello.c 2>&1 | sed -ne 's/^\([^:]*:[^:]*:\).*stdio.h$/\1/p'`
54266:     changequote([,])
54266:     if test -z "$CL_INCLUDES_PREFIX"; then
54266:         AC_MSG_ERROR([Cannot find cl -showIncludes prefix.])
54266:     fi
54266:     AC_SUBST(CL_INCLUDES_PREFIX)
54266:     rm -f dummy-hello.c
58618:     _topsrcdirwin=`cd \`dirname $0\`; pwd -W`
48881:     dnl cl.py provides dependency generation for MSVC
58618:     CC_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
58618:     CXX_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
48881:     COMPILER_DEPEND=1
    1:   fi
31530: fi
    1: fi # MOZ_AUTO_DEPS
    1: MDDEPDIR='.deps'
    1: AC_SUBST(MOZ_AUTO_DEPS)
    1: AC_SUBST(COMPILER_DEPEND)
    1: AC_SUBST(MDDEPDIR)
58618: AC_SUBST(CC_WRAPPER)
58618: AC_SUBST(CXX_WRAPPER)
58618: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Static Build Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Static build options)
    1: 
57995: # split JS out by default to avoid VS2005 PGO crash (bug 591836).
63163: if test "$OS_ARCH" = "WINNT" -a "$CPU_ARCH" != "x86_64" ; then
57995:   ENABLE_SHARED_JS=1
57995: fi
57995: 
50667: MOZ_ARG_ENABLE_BOOL(shared-js,
50667: [  --enable-shared-js
50667:                           Create a shared JavaScript library.],
50667:     ENABLE_SHARED_JS=1,
50667:     ENABLE_SHARED_JS=)
50667: 
50667: if test -n "$ENABLE_SHARED_JS"; then
50667:   JS_SHARED_LIBRARY=1
74349:   MOZ_JS_LIBS="$MOZ_JS_SHARED_LIBS"
74349: else
74349:   MOZ_JS_LIBS="$MOZ_JS_STATIC_LIBS"
50667:   AC_DEFINE(MOZ_STATIC_JS)
50667: fi
50667: AC_SUBST(JS_SHARED_LIBRARY)
50667: 
24548: AC_SUBST(LIBXUL_LIBS)
    1: XPCOM_LIBS="$LIBXUL_LIBS"
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Standalone module options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Standalone module options (Not for building Mozilla))
    1: 
78993: dnl Check for GLib.
78993: dnl ========================================================
    1: 
    1: if test -z "$SKIP_PATH_CHECKS"; then
47975: if test -z "${GLIB_CFLAGS}" -o -z "${GLIB_LIBS}" ; then
47975:     if test "$MOZ_ENABLE_GTK2" -o "$USE_ELF_DYNSTR_GC" ; then
    1:         PKG_CHECK_MODULES(GLIB, glib-2.0 >= 1.3.7 gobject-2.0)
    1:     else
    1:         AM_PATH_GLIB(${GLIB_VERSION})
    1:     fi
    1: fi
    1: fi
    1: 
72853: if test -z "${GLIB_GMODULE_LIBS}" \
72853:    -a -n "${GLIB_CONFIG}"\
72853:     -a "${GLIB_CONFIG}" != no\
72853: ; then
    1:     GLIB_GMODULE_LIBS=`$GLIB_CONFIG gmodule --libs`
    1: fi
    1: 
    1: AC_SUBST(GLIB_CFLAGS)
    1: AC_SUBST(GLIB_LIBS)
    1: AC_SUBST(GLIB_GMODULE_LIBS)
    1: 
    1: dnl ========================================================
84535: dnl Graphics checks.
84535: dnl ========================================================
84535: 
88236: if test "${OS_ARCH}" = "Darwin" -o "${MOZ_WIDGET_TOOLKIT}" = "android" -o "${MOZ_WIDGET_TOOLKIT}" = "gtk2"; then
84535: MOZ_ENABLE_SKIA=1
84535: else
84535: MOZ_ENABLE_SKIA=
84535: fi
84535: 
84535: MOZ_ARG_ENABLE_BOOL(skia,
84535: [  --enable-skia   Enable use of Skia],
84535: MOZ_ENABLE_SKIA=1,
84535: MOZ_ENABLE_SKIA=)
84535: 
84535: dnl ========================================================
    1: dnl Check for cairo
    1: dnl ========================================================
    1: MOZ_CAIRO_CFLAGS='-I$(LIBXUL_DIST)/include/cairo'
    1: 
    1: MOZ_TREE_CAIRO=1
    1: MOZ_ARG_ENABLE_BOOL(system-cairo,
    1: [  --enable-system-cairo   Use system cairo (located with pkgconfig)],
    1: MOZ_TREE_CAIRO=,
    1: MOZ_TREE_CAIRO=1 )
    1: 
54391: MOZ_TREE_PIXMAN=1
54391: MOZ_ARG_ENABLE_BOOL(system-pixman,
54391: [ --enable-system-pixman Use system pixman (located with pkgconfig)],
54391: MOZ_TREE_PIXMAN=,
54391: MOZ_TREE_PIXMAN=1 )
54391: 
    1: # Check for headers defining standard int types.
63478: MOZ_CHECK_HEADERS(stdint.h inttypes.h sys/int_types.h)
    1: 
 8213: if test "$MOZ_TREE_CAIRO"; then
11579:     AC_DEFINE(MOZ_TREE_CAIRO)
11579: 
    1:     # For now we assume that we will have a uint64_t available through
    1:     # one of the above headers or mozstdint.h.
    1:     AC_DEFINE(HAVE_UINT64_T)
    1: 
    1:     # Define macros for cairo-features.h
70960:     TEE_SURFACE_FEATURE="#define CAIRO_HAS_TEE_SURFACE 1"
    1:     if test "$MOZ_X11"; then
    1:         XLIB_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_SURFACE 1"
 3836:         XLIB_XRENDER_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_XRENDER_SURFACE 1"
    1:         PS_SURFACE_FEATURE="#define CAIRO_HAS_PS_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="$FT2_CFLAGS"
    1:     fi
68571:     case "$MOZ_WIDGET_TOOLKIT" in
68571:       qt)
33200:         QT_SURFACE_FEATURE="#define CAIRO_HAS_QT_SURFACE 1"
68571:         ;;
77114:       cocoa | uikit)
    1:         QUARTZ_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_SURFACE 1"
13107:         QUARTZ_IMAGE_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_IMAGE_SURFACE 1"
13979:         QUARTZ_FONT_FEATURE="#define CAIRO_HAS_QUARTZ_FONT 1"
68571:         ;;
68571:       windows)
    1:         WIN32_SURFACE_FEATURE="#define CAIRO_HAS_WIN32_SURFACE 1"
    1:         WIN32_FONT_FEATURE="#define CAIRO_HAS_WIN32_FONT 1"
55800:         if test "$MOZ_WINSDK_TARGETVER" -ge "06010000"; then
37411:             WIN32_DWRITE_FONT_FEATURE="#define CAIRO_HAS_DWRITE_FONT 1"
37411:             WIN32_D2D_SURFACE_FEATURE="#define CAIRO_HAS_D2D_SURFACE 1"
37411:             MOZ_ENABLE_D2D_SURFACE=1
37411:             MOZ_ENABLE_DWRITE_FONT=1
55800:         else
55800:             WIN32_DWRITE_FONT_FEATURE=
55800:             WIN32_D2D_SURFACE_FEATURE=
55800:         fi
27651: 
63478:         MOZ_CHECK_HEADER(d3d9.h, MOZ_ENABLE_D3D9_LAYER=1)
55809: 
55809:         dnl D3D10 Layers depend on D2D Surfaces.
55809:         if test -n "$WIN32_D2D_SURFACE_FEATURE"; then
63478:           MOZ_CHECK_HEADER(d3d10.h, MOZ_ENABLE_D3D10_LAYER=1)
55809:         fi
68571:         ;;
68571:       os2)
    1:         OS2_SURFACE_FEATURE="#define CAIRO_HAS_OS2_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="-I${MZFTCFGFT2}/include"
    1:         CAIRO_FT_LIBS="-L${MZFTCFGFT2}/lib -lmozft -lmzfntcfg"
68571:         ;;
68571:     esac
35250:     if test "$USE_FC_FREETYPE"; then
26419:         FC_FONT_FEATURE="#define CAIRO_HAS_FC_FONT 1"
    1:     fi
    1:     AC_SUBST(MOZ_ENABLE_CAIRO_FT)
37411:     AC_SUBST(MOZ_ENABLE_DWRITE_FONT)
37411:     AC_SUBST(MOZ_ENABLE_D2D_SURFACE)
43174:     AC_SUBST(MOZ_ENABLE_D3D9_LAYER)
54812:     AC_SUBST(MOZ_ENABLE_D3D10_LAYER)
    1:     AC_SUBST(CAIRO_FT_CFLAGS)
    1: 
    1:     AC_SUBST(PS_SURFACE_FEATURE)
    1:     AC_SUBST(PDF_SURFACE_FEATURE)
    1:     AC_SUBST(SVG_SURFACE_FEATURE)
    1:     AC_SUBST(XLIB_SURFACE_FEATURE)
 3836:     AC_SUBST(XLIB_XRENDER_SURFACE_FEATURE)
    1:     AC_SUBST(QUARTZ_SURFACE_FEATURE)
13107:     AC_SUBST(QUARTZ_IMAGE_SURFACE_FEATURE)
    1:     AC_SUBST(WIN32_SURFACE_FEATURE)
    1:     AC_SUBST(OS2_SURFACE_FEATURE)
    1:     AC_SUBST(DIRECTFB_SURFACE_FEATURE)
    1:     AC_SUBST(FT_FONT_FEATURE)
24104:     AC_SUBST(FC_FONT_FEATURE)
    1:     AC_SUBST(WIN32_FONT_FEATURE)
37411:     AC_SUBST(WIN32_DWRITE_FONT_FEATURE)
37411:     AC_SUBST(WIN32_D2D_SURFACE_FEATURE)
13979:     AC_SUBST(QUARTZ_FONT_FEATURE)
    1:     AC_SUBST(PNG_FUNCTIONS_FEATURE)
33200:     AC_SUBST(QT_SURFACE_FEATURE)
70960:     AC_SUBST(TEE_SURFACE_FEATURE)
    1: 
54391:     MOZ_CAIRO_LIBS='$(call EXPAND_LIBNAME_PATH,mozcairo,$(DEPTH)/gfx/cairo/cairo/src)'" $CAIRO_FT_LIBS"
54391: 
54391:     if test "$MOZ_TREE_PIXMAN"; then
58362:         AC_DEFINE(MOZ_TREE_PIXMAN)
54391:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS"' $(call EXPAND_LIBNAME_PATH,mozlibpixman,$(DEPTH)/gfx/cairo/libpixman/src)'
54391:     else
57012:         PKG_CHECK_MODULES(PIXMAN, pixman-1 >= 0.19.2)
54391:         MOZ_CAIRO_CFLAGS="$MOZ_CAIRO_CFLAGS $PIXMAN_CFLAGS"
54391:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $PIXMAN_LIBS"
54391:     fi
54391: 
    1:     if test "$MOZ_X11"; then
    1:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS -lXrender -lfreetype -lfontconfig"
    1:     fi
16289: 
16289:     CAIRO_FEATURES_H=gfx/cairo/cairo/src/cairo-features.h
16289:     mv -f $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig 2> /dev/null
16289: 
    1: else
35697:    PKG_CHECK_MODULES(CAIRO, cairo >= $CAIRO_VERSION pixman-1 freetype2 fontconfig)
    1:    MOZ_CAIRO_CFLAGS=$CAIRO_CFLAGS
    1:    MOZ_CAIRO_LIBS=$CAIRO_LIBS
62101:    PKG_CHECK_MODULES(CAIRO_TEE, cairo-tee >= $CAIRO_VERSION)
11270:    if test "$MOZ_X11"; then
11270:         PKG_CHECK_MODULES(CAIRO_XRENDER, cairo-xlib-xrender >= $CAIRO_VERSION)
11270:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS $CAIRO_XRENDER_LIBS"
11270:         MOZ_CAIRO_CFLAGS="$MOZ_CAIRO_CFLAGS $CAIRO_XRENDER_CFLAGS"
11270:    fi
    1: fi
    1: 
    1: AC_SUBST(MOZ_TREE_CAIRO)
    1: AC_SUBST(MOZ_CAIRO_CFLAGS)
    1: AC_SUBST(MOZ_CAIRO_LIBS)
54391: AC_SUBST(MOZ_TREE_PIXMAN)
    1: 
43521: dnl ========================================================
27035: dnl qcms
27035: dnl ========================================================
27035: 
89975: QCMS_LIBS='$(DEPTH)/gfx/qcms/$(LIB_PREFIX)mozqcms.$(LIB_SUFFIX)'
27035: AC_SUBST(QCMS_LIBS)
 3787: 
 3787: dnl ========================================================
43521: dnl HarfBuzz
43521: dnl ========================================================
43521: MOZ_HARFBUZZ_LIBS='$(DEPTH)/gfx/harfbuzz/src/$(LIB_PREFIX)mozharfbuzz.$(LIB_SUFFIX)'
43521: AC_SUBST(MOZ_HARFBUZZ_LIBS)
43521: 
43521: dnl ========================================================
84390: dnl SIL Graphite
84390: dnl ========================================================
84390: if test "$MOZ_GRAPHITE"; then
84390:   MOZ_GRAPHITE_LIBS='$(DEPTH)/gfx/graphite2/src/$(LIB_PREFIX)mozgraphite2.$(LIB_SUFFIX)'
84390:   AC_DEFINE(MOZ_GRAPHITE)
84390: else
84390:   MOZ_GRAPHITE_LIBS=
84390: fi
84390: AC_SUBST(MOZ_GRAPHITE)
84390: AC_SUBST(MOZ_GRAPHITE_LIBS)
84390: 
84390: dnl ========================================================
55083: dnl OTS
55083: dnl ========================================================
55083: MOZ_OTS_LIBS='$(DEPTH)/gfx/ots/src/$(LIB_PREFIX)mozots.$(LIB_SUFFIX)'
55083: AC_SUBST(MOZ_OTS_LIBS)
55083: 
55083: dnl ========================================================
81006: dnl Skia 
81006: dnl ========================================================
84535: if test "$MOZ_ENABLE_SKIA"; then
81006:   MOZ_SKIA_LIBS='$(DEPTH)/gfx/skia/$(LIB_PREFIX)skia.$(LIB_SUFFIX)'
84535:   AC_DEFINE(MOZ_ENABLE_SKIA)
84535: else
84535:   MOZ_SKIA_LIBS=
84535: fi
84535: AC_SUBST(MOZ_ENABLE_SKIA)
81006: AC_SUBST(MOZ_SKIA_LIBS)
81006: 
81006: dnl ========================================================
    1: dnl disable xul
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xul,
    1: [  --disable-xul           Disable XUL],
    1:     MOZ_XUL= )
    1: if test "$MOZ_XUL"; then
    1:   AC_DEFINE(MOZ_XUL)
    1: else
    1:   dnl remove extensions that require XUL
    1:   MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's/inspector//' -e 's/venkman//' -e 's/irc//' -e 's/tasks//'`
    1: fi
    1: 
    1: AC_SUBST(MOZ_XUL)
    1: 
    1: dnl ========================================================
    1: dnl disable profile locking
    1: dnl   do no use this in applications that can have more than
    1: dnl   one process accessing the profile directory.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(profilelocking,
43027: [  --disable-profilelocking
43027:                           Disable profile locking],
    1:     MOZ_PROFILELOCKING=,
    1:     MOZ_PROFILELOCKING=1 )
    1: if test "$MOZ_PROFILELOCKING"; then
    1:   AC_DEFINE(MOZ_PROFILELOCKING)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl necko configuration options
    1: dnl ========================================================
    1: 
    1: dnl
    1: dnl option to disable various necko protocols
    1: dnl
    1: MOZ_ARG_ENABLE_STRING(necko-protocols,
    1: [  --enable-necko-protocols[={http,ftp,default,all,none}]
    1:                           Enable/disable specific protocol handlers],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
47975:     if test "$option" = "yes" -o "$option" = "all"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
47975:     elif test "$option" = "no" -o "$option" = "none"; then
    1:         NECKO_PROTOCOLS=""
    1:     elif test "$option" = "default"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         NECKO_PROTOCOLS=`echo "$NECKO_PROTOCOLS" | sed "s/ ${option}//"`
    1:     else
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $option"
    1:     fi
    1: done],
    1:     NECKO_PROTOCOLS="$NECKO_PROTOCOLS_DEFAULT")
    1: dnl Remove dupes
    1: NECKO_PROTOCOLS=`${PERL} ${srcdir}/build/unix/uniq.pl ${NECKO_PROTOCOLS}`
    1: AC_SUBST(NECKO_PROTOCOLS)
    1: for p in $NECKO_PROTOCOLS; do
    1:     AC_DEFINE_UNQUOTED(NECKO_PROTOCOL_$p)
    1: done
    1: 
    1: dnl
26270: dnl option to disable necko's wifi scanner
26270: dnl
26270: MOZ_ARG_DISABLE_BOOL(necko-wifi,
26270: [  --disable-necko-wifi    Disable necko wifi scanner],
26270:     NECKO_WIFI=,
43405:     NECKO_WIFI=1)
32391: 
32391: if test "$OS_ARCH" = "OS2"; then
30684:   dnl OS/2 implementation of Necko-WiFi support will be added in bug 506566
30684:   NECKO_WIFI=
32391: fi
32391: if test "$NECKO_WIFI" -a \
32391:         "$OS_ARCH" != "Linux" -a \
32391:         "$OS_ARCH" != "Darwin" -a \
38834:         "$OS_ARCH" != "SunOS" -a \
68662:         "$OS_ARCH" != "WINNT"; then
29927:   AC_MSG_ERROR([Necko WiFi scanning not supported on your platform, use --disable-necko-wifi])
26270: fi
32391: 
32391: if test -z "$SKIP_LIBRARY_CHECKS" -a "$NECKO_WIFI" -a "$OS_ARCH" = "Linux"
32391: then
63478:   MOZ_CHECK_HEADER([iwlib.h])
32391:   if test "$ac_cv_header_iwlib_h" != "yes"; then
64653:     AC_MSG_ERROR([Can't find header iwlib.h for Necko WiFi scanning (might be in package libiw-dev (Ubuntu) or wireless-tools-devel (Fedora) or libiw-devel (openSUSE)); use --disable-necko-wifi to disable])
32391:   fi
32391: fi
26270: 
26270: if test "$NECKO_WIFI"; then
26270:   AC_DEFINE(NECKO_WIFI)
26270: fi
26270: AC_SUBST(NECKO_WIFI)
26270: 
26270: dnl
    1: dnl option to disable cookies
    1: dnl
    1: MOZ_ARG_DISABLE_BOOL(cookies,
    1: [  --disable-cookies       Disable cookie support],
    1:     NECKO_COOKIES=,
    1:     NECKO_COOKIES=1)
    1: AC_SUBST(NECKO_COOKIES)
    1: if test "$NECKO_COOKIES"; then
    1:     AC_DEFINE(NECKO_COOKIES)
    1: fi
    1: 
32999: dnl
39469: dnl Build jsctypes on the platforms we can, unless it's explicitly disabled.
32999: dnl
39469: MOZ_ARG_DISABLE_BOOL(ctypes,
39469: [  --disable-ctypes        Disable js-ctypes],
39469:     BUILD_CTYPES=,
39469:     BUILD_CTYPES=1)
32999: AC_SUBST(BUILD_CTYPES)
39469: if test "$BUILD_CTYPES"; then
32999:     AC_DEFINE(BUILD_CTYPES)
34757: fi
32999: 
    1: dnl NECKO_ configuration options are not global
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES NECKO_"
    1: 
40486: dnl Build Places if required
40486: if test "$MOZ_PLACES"; then
40486:   AC_DEFINE(MOZ_PLACES)
40486: fi
40486: 
46134: dnl Build Sync Services if required
46134: AC_SUBST(MOZ_SERVICES_SYNC)
46134: if test -n "$MOZ_SERVICES_SYNC"; then
46134:   AC_DEFINE(MOZ_SERVICES_SYNC)
46134: fi
46134: 
    1: dnl ========================================================
47975: if test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
    1: fi
    1: 
54493: if test "$MOZ_APP_COMPONENT_INCLUDE"; then
54493:   AC_DEFINE_UNQUOTED(MOZ_APP_COMPONENT_INCLUDE, "$MOZ_APP_COMPONENT_INCLUDE")
54493: fi
54493: 
68024: if test "$MOZ_APP_COMPONENT_MODULES"; then
68024:   AC_DEFINE_UNQUOTED(MOZ_APP_COMPONENT_MODULES, $MOZ_APP_COMPONENT_MODULES)
68024: fi
68024: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Maintainer debug option (no --enable equivalent)
    1: dnl =
    1: dnl ========================================================
    1: 
    1: AC_SUBST(AR)
    1: AC_SUBST(AR_FLAGS)
    1: AC_SUBST(AR_LIST)
    1: AC_SUBST(AR_EXTRACT)
    1: AC_SUBST(AR_DELETE)
    1: AC_SUBST(AS)
    1: AC_SUBST(ASFLAGS)
    1: AC_SUBST(AS_DASH_C_FLAG)
    1: AC_SUBST(LD)
    1: AC_SUBST(RC)
    1: AC_SUBST(RCFLAGS)
73745: AC_SUBST(MC)
    1: AC_SUBST(WINDRES)
    1: AC_SUBST(IMPLIB)
    1: AC_SUBST(FILTER)
    1: AC_SUBST(BIN_FLAGS)
    1: AC_SUBST(MOZ_WIDGET_TOOLKIT)
    1: AC_SUBST(MOZ_UPDATE_XTERM)
38014: AC_SUBST(MOZ_PLATFORM_MAEMO)
    1: AC_SUBST(MOZ_AUTH_EXTENSION)
    1: AC_SUBST(MOZ_PERMISSIONS)
    1: AC_SUBST(MOZ_XTF)
    1: AC_SUBST(MOZ_PREF_EXTENSIONS)
    1: AC_SUBST(MOZ_JS_LIBS)
    1: AC_SUBST(MOZ_PSM)
    1: AC_SUBST(MOZ_DEBUG)
39277: AC_SUBST(MOZ_DEBUG_SYMBOLS)
    1: AC_SUBST(MOZ_DEBUG_ENABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_DISABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_FLAGS)
    1: AC_SUBST(MOZ_DEBUG_LDFLAGS)
 5382: AC_SUBST(WARNINGS_AS_ERRORS)
    1: AC_SUBST(MOZ_EXTENSIONS)
    1: AC_SUBST(MOZ_JSDEBUGGER)
    1: AC_SUBST(MOZ_LOG_REFCNT)
    1: AC_SUBST(MOZ_LEAKY)
81024: AC_SUBST(MOZ_ENABLE_PROFILER_SPS)
    1: AC_SUBST(MOZ_JPROF)
10339: AC_SUBST(MOZ_SHARK)
15763: AC_SUBST(MOZ_CALLGRIND)
16288: AC_SUBST(MOZ_VTUNE)
73745: AC_SUBST(MOZ_ETW)
55929: AC_SUBST(MOZ_PROFILING)
    1: AC_SUBST(MOZ_QUANTIFY)
    1: AC_SUBST(LIBICONV)
    1: AC_SUBST(MOZ_PLACES)
39184: AC_SUBST(MOZ_TOOLKIT_SEARCH)
    1: AC_SUBST(MOZ_FEEDS)
    1: AC_SUBST(NS_PRINTING)
34228: AC_SUBST(MOZ_WEBGL)
40035: AC_SUBST(MOZ_HELP_VIEWER)
    1: 
    1: AC_SUBST(JAVA)
    1: AC_SUBST(JAVAC)
    1: AC_SUBST(JAR)
    1: 
    1: AC_SUBST(MOZ_PROFILELOCKING)
    1: 
    1: AC_SUBST(ENABLE_TESTS)
93787: AC_SUBST(ENABLE_MARIONETTE)
    1: AC_SUBST(IBMBIDI)
    1: AC_SUBST(MOZ_UNIVERSALCHARDET)
    1: AC_SUBST(ACCESSIBILITY)
    1: AC_SUBST(MOZ_SPELLCHECK)
82230: AC_SUBST(MOZ_JAVA_COMPOSITOR)
89306: AC_SUBST(MOZ_ONLY_TOUCH_EVENTS)
    1: AC_SUBST(MOZ_USER_DIR)
 4389: AC_SUBST(MOZ_CRASHREPORTER)
86587: AC_SUBST(MOZ_MAINTENANCE_SERVICE)
90901: AC_SUBST(MOZ_VERIFY_MAR_SIGNATURE)
91180: AC_SUBST(MOZ_ENABLE_SIGNMAR)
43430: AC_SUBST(MOZ_UPDATER)
58583: AC_SUBST(MOZ_ANGLE)
58583: AC_SUBST(MOZ_DIRECTX_SDK_PATH)
62103: AC_SUBST(MOZ_DIRECTX_SDK_CPU_SUFFIX)
62103: AC_SUBST(MOZ_D3DX9_VERSION)
62103: AC_SUBST(MOZ_D3DX9_CAB)
62103: AC_SUBST(MOZ_D3DCOMPILER_CAB)
62103: AC_SUBST(MOZ_D3DX9_DLL)
62103: AC_SUBST(MOZ_D3DCOMPILER_DLL)
    1: 
82443: AC_SUBST(MOZ_ANDROID_HISTORY)
87553: AC_SUBST(MOZ_WEBSMS_BACKEND)
    1: AC_SUBST(ENABLE_STRIP)
 4703: AC_SUBST(PKG_SKIP_STRIP)
94940: AC_SUBST(STRIP_FLAGS)
    1: AC_SUBST(USE_ELF_DYNSTR_GC)
61171: AC_SUBST(USE_ELF_HACK)
    1: AC_SUBST(INCREMENTAL_LINKER)
    1: AC_SUBST(MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS)
    1: AC_SUBST(MOZ_COMPONENT_NSPR_LIBS)
    1: 
    1: AC_SUBST(MOZ_FIX_LINK_PATHS)
    1: AC_SUBST(XPCOM_LIBS)
    1: AC_SUBST(XPCOM_FROZEN_LDOPTS)
    1: AC_SUBST(XPCOM_GLUE_LDOPTS)
    1: AC_SUBST(XPCOM_STANDALONE_GLUE_LDOPTS)
    1: 
    1: AC_SUBST(USE_DEPENDENT_LIBS)
    1: 
    1: AC_SUBST(MOZ_BUILD_ROOT)
    1: AC_SUBST(MOZ_OS2_TOOLS)
    1: 
    1: AC_SUBST(MOZ_POST_DSO_LIB_COMMAND)
    1: AC_SUBST(MOZ_POST_PROGRAM_COMMAND)
    1: 
84735: dnl ========================================================
84735: dnl = Mac bundle name prefix
84735: dnl ========================================================
84735: MOZ_ARG_WITH_STRING(macbundlename-prefix,
84735: [  --with-macbundlename-prefix=prefix
84735:                           Prefix for MOZ_MACBUNDLE_NAME],
84735: [ MOZ_MACBUNDLE_NAME_PREFIX="$withval"])
84735: 
84735: MOZ_MACBUNDLE_NAME=`echo $MOZ_APP_DISPLAYNAME | tr -d ' '`
84735: if test "$MOZ_MACBUNDLE_NAME_PREFIX"; then
84735:   MOZ_MACBUNDLE_NAME="${MOZ_MACBUNDLE_NAME_PREFIX}${MOZ_MACBUNDLE_NAME}"
84735: fi
84735: 
84735: if test "$MOZ_DEBUG"; then
84735:   MOZ_MACBUNDLE_NAME=${MOZ_MACBUNDLE_NAME}Debug.app
84735: else
84735:   MOZ_MACBUNDLE_NAME=${MOZ_MACBUNDLE_NAME}.app
84735: fi
84735: AC_SUBST(MOZ_MACBUNDLE_NAME)
84735: 
69733: # The following variables are available to branding and application
69733: # configuration ($BRANDING/configure.sh and $APPLICATION/confvars.sh):
69733: # - MOZ_APP_VENDOR: Used for application.ini's "Vendor" field, which also
69733: # impacts profile location and user-visible fields.
69733: # - MOZ_APP_BASENAME: Typically stays consistent for multiple branded
69733: # versions of a given application (e.g. Aurora and Firefox both use
69733: # "Firefox"), but may vary for full rebrandings (e.g. Iceweasel). Used
69733: # for application.ini's "Name" field, which controls profile location in
69733: # the absence of a "Profile" field (see below), and various system
69733: # integration hooks (Unix remoting, Windows MessageWindow name, etc.)
69733: # - MOZ_APP_DISPLAYNAME: Used in user-visible fields (DLL properties,
69733: # Mac Bundle name, Updater, Installer), it is typically used for nightly
69733: # builds (e.g. Aurora for Firefox).
82614: # - MOZ_APP_VERSION: Defines the application version number.
69733: # - MOZ_APP_NAME: Used for e.g. the binary program file name. If not set,
69733: # defaults to a lowercase form of MOZ_APP_BASENAME.
69733: # - MOZ_APP_PROFILE: When set, used for application.ini's
69733: # "Profile" field, which controls profile location.
82614: # - MOZ_APP_ID: When set, used for application.ini's "ID" field, and
82614: # crash reporter server url.
82614: # - MOZ_PROFILE_MIGRATOR: When set, enables profile migrator.
82614: # - MOZ_EXTENSION_MANAGER: When set, enabled extension manager.
69733: 
69733: if test -z "$MOZ_APP_NAME"; then
69733:    MOZ_APP_NAME=`echo $MOZ_APP_BASENAME | tr A-Z a-z`
69733: fi
69733: 
    1: AC_SUBST(MOZ_APP_NAME)
    1: AC_SUBST(MOZ_APP_DISPLAYNAME)
69733: AC_SUBST(MOZ_APP_BASENAME)
69733: AC_SUBST(MOZ_APP_VENDOR)
69733: AC_SUBST(MOZ_APP_PROFILE)
82614: AC_SUBST(MOZ_APP_ID)
90904: AC_SUBST(MAR_CHANNEL_ID)
90908: AC_SUBST(ACCEPTED_MAR_CHANNEL_IDS)
82614: AC_SUBST(MOZ_PROFILE_MIGRATOR)
82614: AC_SUBST(MOZ_EXTENSION_MANAGER)
51553: AC_DEFINE_UNQUOTED(MOZ_APP_UA_NAME, "$MOZ_APP_UA_NAME")
51553: AC_SUBST(MOZ_APP_UA_NAME)
51732: AC_DEFINE_UNQUOTED(MOZ_APP_UA_VERSION, "$MOZ_APP_VERSION")
    1: AC_SUBST(MOZ_APP_VERSION)
51675: AC_DEFINE_UNQUOTED(MOZ_UA_FIREFOX_VERSION, "$FIREFOX_VERSION")
70990: AC_DEFINE_UNQUOTED(FIREFOX_VERSION,$FIREFOX_VERSION)
    1: AC_SUBST(FIREFOX_VERSION)
90474: AC_DEFINE_UNQUOTED(MOZ_UA_BUILDID, "$MOZ_UA_BUILDID")
90474: AC_SUBST(MOZ_UA_BUILDID)
    1: 
82616: # We can't use the static application.ini data when building against
82616: # a libxul SDK.
82616: if test -n "$LIBXUL_SDK"; then
82616:     MOZ_APP_STATIC_INI=
82616: fi
82616: AC_SUBST(MOZ_APP_STATIC_INI)
82616: 
    1: AC_SUBST(MOZ_PKG_SPECIAL)
    1: 
    1: AC_SUBST(MOZILLA_OFFICIAL)
    1: 
73937: if test "$MOZ_TELEMETRY_REPORTING"; then
73937:     AC_DEFINE(MOZ_TELEMETRY_REPORTING)
73937: fi
73937: 
    1: dnl win32 options
    1: AC_SUBST(MOZ_MAPINFO)
    1: AC_SUBST(MOZ_BROWSE_INFO)
    1: AC_SUBST(MOZ_TOOLS_DIR)
    1: AC_SUBST(WIN32_REDIST_DIR)
    1: AC_SUBST(PYTHON)
43433: AC_SUBST(MAKENSISU)
    1: 
    1: dnl Echo the CFLAGS to remove extra whitespace.
    1: CFLAGS=`echo \
    1: 	$_WARNINGS_CFLAGS \
    1: 	$CFLAGS`
    1: 
    1: CXXFLAGS=`echo \
    1: 	$_MOZ_RTTI_FLAGS \
    1: 	$_WARNINGS_CXXFLAGS \
    1: 	$CXXFLAGS`
    1: 
    1: COMPILE_CFLAGS=`echo \
    1:     $_DEFINES_CFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CFLAGS`
    1: 
    1: COMPILE_CXXFLAGS=`echo \
    1:     $_DEFINES_CXXFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CXXFLAGS`
    1: 
    1: AC_SUBST(SYSTEM_MAKEDEPEND)
24320: AC_SUBST(SYSTEM_LIBXUL)
    1: AC_SUBST(SYSTEM_JPEG)
    1: AC_SUBST(SYSTEM_PNG)
    1: AC_SUBST(SYSTEM_ZLIB)
12936: AC_SUBST(SYSTEM_BZ2)
    1: 
    1: AC_SUBST(JPEG_CFLAGS)
    1: AC_SUBST(JPEG_LIBS)
    1: AC_SUBST(ZLIB_CFLAGS)
    1: AC_SUBST(ZLIB_LIBS)
12936: AC_SUBST(BZ2_CFLAGS)
12936: AC_SUBST(BZ2_LIBS)
    1: AC_SUBST(PNG_CFLAGS)
    1: AC_SUBST(PNG_LIBS)
    1: 
93421: AC_SUBST(MOZ_FLEXBOX)
    1: AC_SUBST(MOZ_JPEG_CFLAGS)
    1: AC_SUBST(MOZ_JPEG_LIBS)
    1: AC_SUBST(MOZ_ZLIB_CFLAGS)
    1: AC_SUBST(MOZ_ZLIB_LIBS)
12936: AC_SUBST(MOZ_BZ2_CFLAGS)
12936: AC_SUBST(MOZ_BZ2_LIBS)
    1: AC_SUBST(MOZ_PNG_CFLAGS)
    1: AC_SUBST(MOZ_PNG_LIBS)
    1: 
    1: AC_SUBST(NSPR_CFLAGS)
    1: AC_SUBST(NSPR_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSPR)
    1: 
    1: AC_SUBST(NSS_CFLAGS)
    1: AC_SUBST(NSS_LIBS)
    1: AC_SUBST(NSS_DEP_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSS)
22249: AC_SUBST(NSS_DISABLE_DBM)
    1: 
    1: AC_SUBST(CFLAGS)
    1: AC_SUBST(CXXFLAGS)
    1: AC_SUBST(CPPFLAGS)
    1: AC_SUBST(COMPILE_CFLAGS)
    1: AC_SUBST(COMPILE_CXXFLAGS)
    1: AC_SUBST(LDFLAGS)
    1: AC_SUBST(LIBS)
    1: AC_SUBST(CROSS_COMPILE)
20702: AC_SUBST(WCHAR_CFLAGS)
    1: 
    1: AC_SUBST(HOST_CC)
    1: AC_SUBST(HOST_CXX)
    1: AC_SUBST(HOST_CFLAGS)
    1: AC_SUBST(HOST_CXXFLAGS)
61514: AC_SUBST(HOST_LDFLAGS)
    1: AC_SUBST(HOST_OPTIMIZE_FLAGS)
    1: AC_SUBST(HOST_AR)
    1: AC_SUBST(HOST_AR_FLAGS)
    1: AC_SUBST(HOST_LD)
    1: AC_SUBST(HOST_RANLIB)
    1: AC_SUBST(HOST_NSPR_MDCPUCFG)
    1: AC_SUBST(HOST_BIN_SUFFIX)
    1: AC_SUBST(HOST_OS_ARCH)
    1: 
    1: AC_SUBST(TARGET_CPU)
    1: AC_SUBST(TARGET_VENDOR)
    1: AC_SUBST(TARGET_OS)
    1: AC_SUBST(TARGET_NSPR_MDCPUCFG)
    1: AC_SUBST(TARGET_MD_ARCH)
    1: AC_SUBST(TARGET_XPCOM_ABI)
    1: AC_SUBST(OS_TARGET)
    1: AC_SUBST(OS_ARCH)
    1: AC_SUBST(OS_RELEASE)
    1: AC_SUBST(OS_TEST)
60422: AC_SUBST(CPU_ARCH)
60422: AC_SUBST(INTEL_ARCHITECTURE)
    1: 
    1: AC_SUBST(MOZ_DISABLE_JAR_PACKAGING)
    1: AC_SUBST(MOZ_CHROME_FILE_FORMAT)
    1: 
77590: AC_SUBST(WRAP_LDFLAGS)
    1: AC_SUBST(MKSHLIB)
    1: AC_SUBST(MKCSHLIB)
    1: AC_SUBST(MKSHLIB_FORCE_ALL)
    1: AC_SUBST(MKSHLIB_UNFORCE_ALL)
    1: AC_SUBST(DSO_CFLAGS)
    1: AC_SUBST(DSO_PIC_CFLAGS)
    1: AC_SUBST(DSO_LDOPTS)
    1: AC_SUBST(LIB_PREFIX)
    1: AC_SUBST(DLL_PREFIX)
    1: AC_SUBST(DLL_SUFFIX)
    1: AC_DEFINE_UNQUOTED(MOZ_DLL_SUFFIX, "$DLL_SUFFIX")
    1: AC_SUBST(LIB_SUFFIX)
    1: AC_SUBST(OBJ_SUFFIX)
    1: AC_SUBST(BIN_SUFFIX)
    1: AC_SUBST(ASM_SUFFIX)
    1: AC_SUBST(IMPORT_LIB_SUFFIX)
    1: AC_SUBST(USE_N32)
    1: AC_SUBST(CC_VERSION)
    1: AC_SUBST(CXX_VERSION)
    1: AC_SUBST(MSMANIFEST_TOOL)
31956: AC_SUBST(NS_ENABLE_TSF)
32304: AC_SUBST(MOZ_NSS_PATCH)
54493: AC_SUBST(MOZ_APP_COMPONENT_LIBS)
54493: AC_SUBST(MOZ_APP_EXTRA_LIBS)
    1: 
43342: AC_SUBST(MOZ_MEDIA)
43342: AC_SUBST(MOZ_SYDNEYAUDIO)
89287: AC_SUBST(MOZ_CUBEB)
43342: AC_SUBST(MOZ_WAVE)
43342: AC_SUBST(MOZ_VORBIS)
56071: AC_SUBST(MOZ_TREMOR)
43342: AC_SUBST(MOZ_WEBM)
80366: AC_SUBST(MOZ_VP8_ERROR_CONCEALMENT)
80367: AC_SUBST(MOZ_VP8_ENCODER)
43342: AC_SUBST(MOZ_OGG)
43342: AC_SUBST(MOZ_ALSA_LIBS)
95162: AC_SUBST(MOZ_ALSA_CFLAGS)
43343: AC_SUBST(VPX_AS)
43343: AC_SUBST(VPX_ASFLAGS)
57090: AC_SUBST(VPX_DASH_C_FLAG)
57090: AC_SUBST(VPX_AS_CONVERSION)
57090: AC_SUBST(VPX_ASM_SUFFIX)
43343: AC_SUBST(VPX_X86_ASM)
57090: AC_SUBST(VPX_ARM_ASM)
80367: AC_SUBST(VPX_NEED_OBJ_INT_EXTRACT)
68747: AC_SUBST(MOZ_INSTRUMENT_EVENT_LOOP)
64166: AC_SUBST(LIBJPEG_TURBO_AS)
64166: AC_SUBST(LIBJPEG_TURBO_ASFLAGS)
64166: AC_SUBST(LIBJPEG_TURBO_X86_ASM)
64166: AC_SUBST(LIBJPEG_TURBO_X64_ASM)
90293: AC_SUBST(LIBJPEG_TURBO_ARM_ASM)
43342: 
92060: AC_SUBST(MOZ_PACKAGE_JSSHELL)
92060: 
54197: AC_MSG_CHECKING([for posix_fallocate])
54197: AC_TRY_LINK([#define _XOPEN_SOURCE 600
54197:   #include <fcntl.h>],
54197:                  [posix_fallocate(0, 0, 0);],
54197:                  [ac_cv___posix_fallocate=true],
54197:                  [ac_cv___posix_fallocate=false])
54197: 
54197: if test "$ac_cv___posix_fallocate" = true ; then
54197:   AC_DEFINE(HAVE_POSIX_FALLOCATE)
54197:   AC_MSG_RESULT(yes)
54197: else
54197:   AC_MSG_RESULT(no)
54197: fi
54197: 
    1: dnl Check for missing components
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$MOZ_X11"; then
92022:     if test "$WITHOUT_X11"; then
92022:         AC_MSG_ERROR([--without-x specified and MOZ_X11 still defined])
92022:     fi
    1:     dnl ====================================================
    1:     dnl = Check if X headers exist
    1:     dnl ====================================================
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $XCFLAGS"
    1:     AC_TRY_COMPILE([
    1:         #include <stdio.h>
13878:         #include <stdlib.h>
    1:         #include <X11/Xlib.h>
    1:         #include <X11/Intrinsic.h>
69206:         #include <X11/extensions/XShm.h>
    1:     ],
    1:     [
    1:         Display *dpy = 0;
    1:         if ((dpy = XOpenDisplay(NULL)) == NULL) {
    1:             fprintf(stderr, ": can't open %s\n", XDisplayName(NULL));
    1:             exit(1);
    1:         }
    1:     ], [],
    1:     [ AC_MSG_ERROR([Could not compile basic X program.]) ])
    1:     CFLAGS="$_SAVE_CFLAGS"
    1: 
69923:     if test -n "$MISSING_X"; then
    1:         AC_MSG_ERROR([ Could not find the following X libraries: $MISSING_X ]);
    1:     fi
    1: 
    1: fi # MOZ_X11
34236: 
34236: dnl Check for headers, etc. needed by WebGL.
93982: if test "$MOZ_GL_DEFAULT_PROVIDER" = "GLX"; then
63478:     MOZ_CHECK_HEADER(GL/glx.h)
34236:     if test "$ac_cv_header_GL_glx_h" != "yes"; then
64653:         AC_MSG_ERROR([Can't find header GL/glx.h for WebGL (install mesa-common-dev (Ubuntu), mesa-libGL-devel (Fedora), or Mesa-devel (openSUSE))])
34236:     fi
93982: fi # MOZ_GL_DEFAULT_PROVIDER=GLX
    1: fi # COMPILE_ENVIRONMENT
    1: 
35250: if test "$USE_FC_FREETYPE"; then
35250:     if test "$COMPILE_ENVIRONMENT"; then
35250:     	_SAVE_CPPFLAGS="$CPPFLAGS"
35434:     	CPPFLAGS="$CPPFLAGS $FT2_CFLAGS $XCFLAGS"
82834:         MOZ_CHECK_HEADERS([fontconfig/fcfreetype.h], ,
82834:             [AC_MSG_ERROR(Can't find header fontconfig/fcfreetype.h.)], [#include <fontconfig/fontconfig.h>])
35250:     	CPPFLAGS="$_SAVE_CPPFLAGS"
35250:     else
35250:         AC_DEFINE(HAVE_FONTCONFIG_FCFREETYPE_H)
35250:     fi
35250: fi
35250: 
    1: dnl Set various defines and substitutions
    1: dnl ========================================================
    1: 
63458: if test "$OS_ARCH" = "Darwin"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
68662: elif test "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "OS2"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
39009: fi
    1: 
    1: if test "$MOZ_DEBUG"; then
    1:     AC_DEFINE(MOZ_REFLOW_PERF)
    1:     AC_DEFINE(MOZ_REFLOW_PERF_DSP)
    1: fi
    1: 
    1: if test "$ACCESSIBILITY" -a "$MOZ_ENABLE_GTK2" ; then
    1:     AC_DEFINE(MOZ_ACCESSIBILITY_ATK)
    1:     ATK_FULL_VERSION=`$PKG_CONFIG --modversion atk`
    1:     ATK_MAJOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:     ATK_MINOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:     ATK_REV_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:     AC_DEFINE_UNQUOTED(ATK_MAJOR_VERSION, $ATK_MAJOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_MINOR_VERSION, $ATK_MINOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_REV_VERSION, $ATK_REV_VERSION)
    1: fi
    1: 
    1: case "$host_os" in
    1: mingw*)
    1:     WIN_TOP_SRC=`cd $srcdir; pwd -W`
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(WIN_TOP_SRC)
    1: 
    1: AC_SUBST(MOZILLA_VERSION)
    1: 
    1: AC_SUBST(ac_configure_args)
    1: 
    1: dnl Spit out some output
    1: dnl ========================================================
    1: 
    1: dnl The following defines are used by xpcom
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES
    1: CPP_THROW_NEW
    1: HAVE_CPP_2BYTE_WCHAR_T
    1: HAVE_CPP_AMBIGUITY_RESOLVING_USING
30421: HAVE_CPP_CHAR16_T
    1: HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR
    1: HAVE_CPP_PARTIAL_SPECIALIZATION
    1: HAVE_CPP_TROUBLE_COMPARING_TO_ZERO
    1: HAVE_STATVFS
    1: NEED_CPP_UNUSED_IMPLEMENTATIONS
    1: NEW_H
    1: HAVE_GETPAGESIZE
    1: HAVE_ICONV
    1: HAVE_ICONV_WITH_CONST_INPUT
    1: HAVE_MBRTOWC
    1: HAVE_SYS_MOUNT_H
    1: HAVE_SYS_VFS_H
    1: HAVE_WCRTOMB
    1: "
    1: 
    1: AC_CONFIG_HEADER(
    1: netwerk/necko-config.h
    1: xpcom/xpcom-config.h
    1: xpcom/xpcom-private.h
    1: )
    1: 
74822: # Hack around an Apple bug that effects the egrep that comes with OS X 10.7.
74822: # "arch -arch i386 egrep" always uses the 32-bit Intel part of the egrep fat
74822: # binary, even on 64-bit systems.  It should work on OS X 10.4.5 and up.  We
74822: # (apparently) only need this hack when egrep's "pattern" is particularly
74822: # long (as in the following code).  See bug 655339.
74822: case "$host" in
76342: *-apple-darwin*)
74822:     FIXED_EGREP="arch -arch i386 egrep"
74822:     ;;
74822: *)
74822:     FIXED_EGREP="egrep"
74822:     ;;
74822: esac
74822: 
    1: # Save the defines header file before autoconf removes it.
    1: # (Do not add AC_DEFINE calls after this line.)
    1:   _CONFIG_TMP=confdefs-tmp.h
    1:   _CONFIG_DEFS_H=mozilla-config.h
    1: 
    1:   cat > $_CONFIG_TMP <<\EOF
    1: /* List of defines generated by configure. Included with preprocessor flag,
    1:  * -include, to avoid long list of -D defines on the compile command-line.
    1:  * Do not edit.
    1:  */
    1: 
    1: #ifndef _MOZILLA_CONFIG_H_
    1: #define _MOZILLA_CONFIG_H_
    1: EOF
    1: 
    1: _EGREP_PATTERN='^#define ('
    1: if test -n "$_NON_GLOBAL_ACDEFINES"; then
    1:     for f in $_NON_GLOBAL_ACDEFINES; do
    1:         _EGREP_PATTERN="${_EGREP_PATTERN}$f|"
    1:     done
    1: fi
    1: _EGREP_PATTERN="${_EGREP_PATTERN}dummy_never_defined)"
    1: 
74822:   sort confdefs.h | $FIXED_EGREP -v "$_EGREP_PATTERN" >> $_CONFIG_TMP
    1: 
74327:   if test "$?" != 0; then
74327:     AC_MSG_ERROR([Error outputting config definitions])
74327:   fi
74327: 
    1:   cat >> $_CONFIG_TMP <<\EOF
    1: 
74413: /* The c99 defining the limit macros (UINT32_MAX for example), says:
74413:  * C++ implementations should define these macros only when __STDC_LIMIT_MACROS
74413:  * is defined before <stdint.h> is included. */
74413: #define __STDC_LIMIT_MACROS
74413: 
76347: /* Force-include hunspell_alloc_hooks.h for hunspell, so that we don't need to
76347:  * modify it directly.
76347:  *
76347:  * HUNSPELL_STATIC is defined in extensions/spellcheck/hunspell/src/Makefile.in,
76347:  * unless --enable-system-hunspell is defined.
76347:  */
76347: #if defined(HUNSPELL_STATIC)
76347: #include "hunspell_alloc_hooks.h"
76347: #endif
76347: 
    1: #endif /* _MOZILLA_CONFIG_H_ */
    1: 
    1: EOF
    1: 
    1:   # Only write mozilla-config.h when something changes (or it doesn't exist)
    1:   if cmp -s $_CONFIG_TMP $_CONFIG_DEFS_H; then
    1:     rm $_CONFIG_TMP
    1:   else
    1:     AC_MSG_RESULT("creating $_CONFIG_DEFS_H")
    1:     mv -f $_CONFIG_TMP $_CONFIG_DEFS_H
    1: 
    1:     echo ==== $_CONFIG_DEFS_H =================================
    1:     cat $_CONFIG_DEFS_H
    1:   fi
    1: 
    1: dnl Probably shouldn't call this manually but we always want the output of DEFS
    1: rm -f confdefs.h.save
    1: mv confdefs.h confdefs.h.save
74822: $FIXED_EGREP -v "$_EGREP_PATTERN" confdefs.h.save > confdefs.h
74327: if test "$?" != 0; then
74327:   AC_MSG_ERROR([Error outputting confdefs.h])
74327: fi
    1: AC_OUTPUT_MAKE_DEFS()
    1: MOZ_DEFINES=$DEFS
    1: AC_SUBST(MOZ_DEFINES)
    1: rm -f confdefs.h
    1: mv confdefs.h.save confdefs.h
    1: 
    1: dnl Load the list of Makefiles to generate.
    1: dnl   To add new Makefiles, edit allmakefiles.sh.
    1: dnl   allmakefiles.sh sets the variable, MAKEFILES.
    1: . ${srcdir}/allmakefiles.sh
    1: dnl
    1: dnl Run a perl script to quickly create the makefiles.
    1: dnl If it succeeds, it outputs a shell command to set CONFIG_FILES
    1: dnl   for the files it cannot handle correctly. This way, config.status
    1: dnl   will handle these files.
    1: dnl If it fails, nothing is set and config.status will run as usual.
    1: dnl
    1: dnl This does not change the $MAKEFILES variable.
    1: dnl
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl > conftest.sh
    1: . ./conftest.sh
    1: rm conftest.sh
    1: 
    1: echo $MAKEFILES > unallmakefiles
    1: 
24557: mv -f config/autoconf.mk config/autoconf.mk.orig 2> /dev/null
24557: 
    1: AC_OUTPUT($MAKEFILES)
    1: 
71675: # Generate a JSON config file for unittest harnesses etc to read
71675: # build configuration details from in a standardized way.
71675: OS_TARGET=${OS_TARGET} TARGET_CPU=${TARGET_CPU} MOZ_DEBUG=${MOZ_DEBUG} \
72672: MOZ_WIDGET_TOOLKIT=${MOZ_WIDGET_TOOLKIT} UNIVERSAL_BINARY=${UNIVERSAL_BINARY} \
71675:   $PYTHON ${_topsrcdir}/config/writemozinfo.py ./mozinfo.json.tmp
71675: if cmp -s ./mozinfo.json.tmp ./mozinfo.json; then
71675:   rm ./mozinfo.json.tmp
71675: else
71675:   mv -f ./mozinfo.json.tmp ./mozinfo.json
71675: fi
71675: 
16289: dnl Prevent the regeneration of cairo-features.h forcing rebuilds of gfx stuff
16289: if test "$CAIRO_FEATURES_H"; then
16289:   if cmp -s $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig; then
24557:     echo "$CAIRO_FEATURES_H is unchanged"
16289:     mv -f "$CAIRO_FEATURES_H".orig "$CAIRO_FEATURES_H" 2> /dev/null
16289:   else
16289:     rm -f "$CAIRO_FEATURES_H".orig 2> /dev/null
16289:   fi
16289: fi
16289: 
93709: dnl Build libunwind for Android profiling builds
93709: if test "$OS_TARGET" = "Android" -a "$MOZ_PROFILING"; then
93709:   old_ac_configure_arg="$ac_configure_args"
93709:   ac_configure_args="--build=${build} --host=${target_alias} --disable-shared --enable-block-signals=no"
93709:   if test "$MOZ_DEBUG"; then
93709:     ac_configure_args="$ac_configure_args --enable-debug"
93709:   fi
93709:   if test "$DSO_PIC_CFLAGS"; then
93709:     ac_configure_args="$ac_configure_args --with-pic"
93709:   fi
93709:   ac_configure_args="$ac_configure_args \
93709:       CC=\"$CC\" \
93709:       CXX=\"$CXX\" \
93709:       CPP=\"$CPP\" \
93709:       CFLAGS=\"$CFLAGS\" \
93709:       CXXFLAGS=\"$CXXFLAGS\" \
93709:       CPPFLAGS=\"$CPPFLAGS\" \
93709:       LD=\"$LD\" \
93709:       LDFLAGS=\"$LDFLAGS\" \
93709:       AR=\"$AR\" \
93709:       RANLIB=\"$RANLIB\" \
93709:       STRIP=\"$STRIP\" \
93709:       LIBS=\"$LIBS\""
93709: 
93709:   # Use a separate cache file for libunwind, since it does not use caching.
93709:   mkdir -p $_objdir/tools/profiler/libunwind/src
93709:   old_cache_file=$cache_file
93709:   cache_file=$_objdir/tools/profiler/libunwind/src/config.cache
93709:   old_config_files=$CONFIG_FILES
93709:   unset CONFIG_FILES
93709:   AC_OUTPUT_SUBDIRS(tools/profiler/libunwind/src)
93709:   cache_file=$old_cache_file
93709:   ac_configure_args="$old_ac_configure_args"
93709:   CONFIG_FILES=$old_config_files
93709: fi
93709: 
57366: # Run freetype configure script
57366: 
57366: if test "$MOZ_TREE_FREETYPE"; then
57366:    export CFLAGS="$CFLAGS -std=c99"
57366:    export CPPFLAGS="$CPPFLAGS"
57366:    export CXXFLAGS="$CXXFLAGS"
57366:    export LDFLAGS="$LDFLAGS"
57366:    export CONFIG_FILES="unix-cc.mk:unix-cc.in unix-def.mk:unix-def.in freetype-config freetype2.pc:freetype2.in"
57366:    ac_configure_args="$ac_configure_args --host=$target --disable-shared --with-pic=yes"
57366:    AC_OUTPUT_SUBDIRS(modules/freetype2)
57366: fi
57366: 
82142: if test -z "$direct_nspr_config"; then
    1:     dnl ========================================================
    1:     dnl = Setup a nice relatively clean build environment for
    1:     dnl = sub-configures.
    1:     dnl ========================================================
    1:     CC="$_SUBDIR_CC"
    1:     CXX="$_SUBDIR_CXX"
    1:     CFLAGS="$_SUBDIR_CFLAGS"
    1:     CPPFLAGS="$_SUBDIR_CPPFLAGS"
    1:     CXXFLAGS="$_SUBDIR_CXXFLAGS"
    1:     LDFLAGS="$_SUBDIR_LDFLAGS"
    1:     HOST_CC="$_SUBDIR_HOST_CC"
    1:     HOST_CFLAGS="$_SUBDIR_HOST_CFLAGS"
    1:     HOST_LDFLAGS="$_SUBDIR_HOST_LDFLAGS"
    1:     RC=
82142: fi
    1: 
    1: unset MAKEFILES
    1: unset CONFIG_FILES
    1: 
21115: # No need to run subconfigures when building with LIBXUL_SDK_DIR
21115: if test "$COMPILE_ENVIRONMENT" -a -z "$LIBXUL_SDK_DIR"; then
21115: 
77590: export WRAP_LDFLAGS
77590: 
43127: if test -n "$_WRAP_MALLOC"; then
77590:     # Avoid doubling wrap malloc arguments
77590:     _SUBDIR_CONFIG_ARGS="`echo $_SUBDIR_CONFIG_ARGS | sed -e 's/--enable-wrap-malloc *//'`"
43127: fi
43127: 
17103: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS --with-dist-prefix=$MOZ_BUILD_ROOT/dist --with-mozilla"
    1:     if test -z "$MOZ_DEBUG"; then
    1:         ac_configure_args="$ac_configure_args --disable-debug"
80149:     else
80149:         ac_configure_args="$ac_configure_args --enable-debug"
    1:     fi
    1:     if test "$MOZ_OPTIMIZE" = "1"; then
    1:         ac_configure_args="$ac_configure_args --enable-optimize"
91556:     elif test -z "$MOZ_OPTIMIZE"; then
80149:         ac_configure_args="$ac_configure_args --disable-optimize"
    1:     fi
    1:     if test -n "$HAVE_64BIT_OS"; then
    1:         ac_configure_args="$ac_configure_args --enable-64bit"
    1:     fi
15258:     if test -n "$USE_ARM_KUSER"; then
15258:         ac_configure_args="$ac_configure_args --with-arm-kuser"
15258:     fi
93446:     ac_configure_args="$ac_configure_args $NSPR_CONFIGURE_ARGS"
89881:     if test -n "$MOZ_LINKER" -a -z "$MOZ_OLD_LINKER" -a "$ac_cv_func_dladdr" = no ; then
87792:       # dladdr is supported by the new linker, even when the system linker doesn't
87792:       # support it. Trick nspr into using dladdr when it's not supported.
87792:       _SAVE_CPPFLAGS="$CPPFLAGS"
87792:       export CPPFLAGS="-include $_topsrcdir/mozglue/linker/dladdr.h $CPPFLAGS"
87792:     fi
90358:     _SAVE_LDFLAGS="$LDFLAGS"
90358:     export LDFLAGS="$LDFLAGS $NSPR_LDFLAGS"
    1:     AC_OUTPUT_SUBDIRS(nsprpub)
90358:     LDFLAGS="$_SAVE_LDFLAGS"
89881:     if test -n "$MOZ_LINKER" -a -z "$MOZ_OLD_LINKER" -a "$ac_cv_func_dladdr" = no; then
87792:       unset CPPFLAGS
87792:       CPPFLAGS="$_SAVE_CFLAGS"
87792:     fi
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS"
    1: fi
    1: 
    1: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     # Hack to deal with the fact that we use NSPR_CFLAGS everywhere
    1:     AC_MSG_WARN([Recreating autoconf.mk with updated nspr-config output])
68662:     if test "$OS_ARCH" != "WINNT"; then
18865:        NSPR_LIBS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --libdir=$LIBXUL_DIST/lib --libs`
18865:        $PERL -pi.bak -e "s '^NSPR_LIBS\\s*=.*'NSPR_LIBS = $NSPR_LIBS'" config/autoconf.mk
18865:        NSPR_CFLAGS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --includedir=$LIBXUL_DIST/include/nspr --cflags`
18865:        $PERL -pi.bak -e "s '^NSPR_CFLAGS\\s*=.*'NSPR_CFLAGS = $NSPR_CFLAGS'" config/autoconf.mk
    1:     fi
    1:     rm -f config/autoconf.mk.bak
    1: fi
    1: 
82142: dnl ========================================================
82142: dnl = Setup a nice relatively clean build environment for
82142: dnl = sub-configures.
82142: dnl ========================================================
90564: CC="$_SUBDIR_CC"
90564: CXX="$_SUBDIR_CXX"
90564: CFLAGS="$_SUBDIR_CFLAGS"
90564: CPPFLAGS="$_SUBDIR_CPPFLAGS"
90564: CXXFLAGS="$_SUBDIR_CXXFLAGS"
90564: LDFLAGS="$_SUBDIR_LDFLAGS"
90564: HOST_CC="$_SUBDIR_HOST_CC"
90564: HOST_CFLAGS="$_SUBDIR_HOST_CFLAGS"
90564: HOST_LDFLAGS="$_SUBDIR_HOST_LDFLAGS"
90564: RC=
82142: 
21062: # Run the SpiderMonkey 'configure' script.
21062: dist=$MOZ_BUILD_ROOT/dist
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: ac_configure_args="$ac_configure_args --enable-threadsafe"
40442: if test "$BUILD_CTYPES"; then
40442:     # Build js-ctypes on the platforms we can.
40442:     ac_configure_args="$ac_configure_args --enable-ctypes"
40442: fi
50577: if test -z "$JS_SHARED_LIBRARY" ; then
50577:     ac_configure_args="$ac_configure_args --disable-shared-js"
50577: fi
21152: if test -z "$MOZ_NATIVE_NSPR"; then
21062:     ac_configure_args="$ac_configure_args --with-nspr-cflags='$NSPR_CFLAGS'"
21062:     ac_configure_args="$ac_configure_args --with-nspr-libs='$NSPR_LIBS'"
21152: fi
23004: ac_configure_args="$ac_configure_args --with-dist-dir=../../dist"
39697: ac_configure_args="$ac_configure_args --prefix=$dist"
22636: ac_configure_args="$ac_configure_args --with-sync-build-files=$_topsrcdir"
21062: if test "$MOZ_MEMORY"; then
21062:    ac_configure_args="$ac_configure_args --enable-jemalloc"
90070: fi
86905: if test -n "$MOZ_GLUE_LDFLAGS"; then
86905:    export MOZ_GLUE_LDFLAGS
86905: fi
86905: if test -n "$MOZ_GLUE_PROGRAM_LDFLAGS"; then
86905:    export MOZ_GLUE_PROGRAM_LDFLAGS
27523: fi
63445: export MOZ_APP_NAME
93907: export STLPORT_CPPFLAGS
93907: export STLPORT_LDFLAGS
93907: export STLPORT_LIBS
21062: AC_OUTPUT_SUBDIRS(js/src)
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: 
21115: fi # COMPILE_ENVIRONMENT && !LIBXUL_SDK_DIR
24557: 
24557: dnl Prevent the regeneration of autoconf.mk forcing rebuilds of the world
24557: dnl Needs to be at the end to respect possible changes from NSPR configure
24778: if cmp -s config/autoconf.mk config/autoconf.mk.orig; then
24557:   echo "config/autoconf.mk is unchanged"
24557:   mv -f config/autoconf.mk.orig config/autoconf.mk 2> /dev/null
24557: else
24557:   rm -f config/autoconf.mk.orig 2> /dev/null
24557: fi
63142: 
