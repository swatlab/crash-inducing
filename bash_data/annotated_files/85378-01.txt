    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Makoto Kato <m_kato@ga2.so-net.ne.jp >
    1:  *   Ryoichi Furukawa <oliver@1000cp.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
64101: #include "nsAtomicRefcnt.h"
    1: #include "nsString.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsIServiceManager.h"
    1: #include "nsICharsetConverterManager.h"
    1: #include "nsIScriptableUConv.h"
    1: #include "nsScriptableUConv.h"
    1: #include "nsIStringStream.h"
    1: #include "nsCRT.h"
46998: #include "nsComponentManagerUtils.h"
    1: 
    1: static PRInt32          gInstanceCount = 0;
    1: 
    1: /* Implementation file */
    1: NS_IMPL_ISUPPORTS1(nsScriptableUnicodeConverter, nsIScriptableUnicodeConverter)
    1: 
    1: nsScriptableUnicodeConverter::nsScriptableUnicodeConverter()
80486: : mIsInternal(false)
    1: {
64101:   PR_ATOMIC_INCREMENT(&gInstanceCount);
    1: }
    1: 
    1: nsScriptableUnicodeConverter::~nsScriptableUnicodeConverter()
    1: {
64101:   PR_ATOMIC_DECREMENT(&gInstanceCount);
    1: }
    1: 
    1: nsresult
    1: nsScriptableUnicodeConverter::ConvertFromUnicodeWithLength(const nsAString& aSrc,
    1:                                                            PRInt32* aOutLen,
    1:                                                            char **_retval)
    1: {
    1:   if (!mEncoder)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   nsresult rv = NS_OK;
    1:   PRInt32 inLength = aSrc.Length();
    1:   const nsAFlatString& flatSrc = PromiseFlatString(aSrc);
    1:   rv = mEncoder->GetMaxLength(flatSrc.get(), inLength, aOutLen);
    1:   if (NS_SUCCEEDED(rv)) {
85378:     *_retval = (char*)moz_malloc(*aOutLen+1);
    1:     if (!*_retval)
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:     rv = mEncoder->Convert(flatSrc.get(), &inLength, *_retval, aOutLen);
    1:     if (NS_SUCCEEDED(rv))
    1:     {
    1:       (*_retval)[*aOutLen] = '\0';
    1:       return NS_OK;
    1:     }
85378:     moz_free(*_retval);
    1:   }
    1:   *_retval = nsnull;
    1:   return NS_ERROR_FAILURE;
    1: }
    1: 
    1: /* ACString ConvertFromUnicode (in AString src); */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::ConvertFromUnicode(const nsAString& aSrc,
    1:                                                  nsACString& _retval)
    1: {
    1:   PRInt32 len;
    1:   char* str;
    1:   nsresult rv = ConvertFromUnicodeWithLength(aSrc, &len, &str);
    1:   if (NS_SUCCEEDED(rv)) {
    1:     // No Adopt on nsACString :(
    1:     _retval.Assign(str, len);
85378:     moz_free(str);
    1:   }
    1:   return rv;
    1: }
    1: 
    1: nsresult
    1: nsScriptableUnicodeConverter::FinishWithLength(char **_retval, PRInt32* aLength)
    1: {
    1:   if (!mEncoder)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   PRInt32 finLength = 32;
    1: 
85378:   *_retval = (char *)moz_malloc(finLength);
    1:   if (!*_retval)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   nsresult rv = mEncoder->Finish(*_retval, &finLength);
    1:   if (NS_SUCCEEDED(rv))
    1:     *aLength = finLength;
    1:   else
85378:     moz_free(*_retval);
    1: 
    1:   return rv;
    1: 
    1: }
    1: 
    1: /* ACString Finish(); */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::Finish(nsACString& _retval)
    1: {
    1:   PRInt32 len;
    1:   char* str;
    1:   nsresult rv = FinishWithLength(&str, &len);
    1:   if (NS_SUCCEEDED(rv)) {
    1:     // No Adopt on nsACString :(
    1:     _retval.Assign(str, len);
85378:     moz_free(str);
    1:   }
    1:   return rv;
    1: }
    1: 
    1: /* AString ConvertToUnicode (in ACString src); */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::ConvertToUnicode(const nsACString& aSrc, nsAString& _retval)
    1: {
    1:   nsACString::const_iterator i;
    1:   aSrc.BeginReading(i);
 3233:   return ConvertFromByteArray(reinterpret_cast<const PRUint8*>(i.get()),
    1:                               aSrc.Length(),
    1:                               _retval);
    1: }
    1: 
    1: /* AString convertFromByteArray([const,array,size_is(aCount)] in octet aData,
    1:                                 in unsigned long aCount);
    1:  */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::ConvertFromByteArray(const PRUint8* aData,
    1:                                                    PRUint32 aCount,
    1:                                                    nsAString& _retval)
    1: {
    1:   if (!mDecoder)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   nsresult rv = NS_OK;
    1:   PRInt32 inLength = aCount;
    1:   PRInt32 outLength;
 3233:   rv = mDecoder->GetMaxLength(reinterpret_cast<const char*>(aData),
    1:                               inLength, &outLength);
    1:   if (NS_SUCCEEDED(rv))
    1:   {
85378:     PRUnichar* buf = (PRUnichar*)moz_malloc((outLength+1)*sizeof(PRUnichar));
    1:     if (!buf)
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1: 
 3233:     rv = mDecoder->Convert(reinterpret_cast<const char*>(aData),
    1:                            &inLength, buf, &outLength);
    1:     if (NS_SUCCEEDED(rv))
    1:     {
    1:       buf[outLength] = 0;
    1:       _retval.Assign(buf, outLength);
    1:     }
85378:     moz_free(buf);
    1:     return rv;
    1:   }
    1:   return NS_ERROR_FAILURE;
    1: 
    1: }
    1: 
    1: /* void convertToByteArray(in AString aString,
34790:                           [optional] out unsigned long aLen,
    1:                           [array, size_is(aLen),retval] out octet aData);
    1:  */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::ConvertToByteArray(const nsAString& aString,
    1:                                                  PRUint32* aLen,
    1:                                                  PRUint8** _aData)
    1: {
    1:   char* data;
    1:   PRInt32 len;
    1:   nsresult rv = ConvertFromUnicodeWithLength(aString, &len, &data);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1:   nsXPIDLCString str;
    1:   str.Adopt(data, len); // NOTE: This uses the XPIDLCString as a byte array
    1: 
    1:   rv = FinishWithLength(&data, &len);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
    1:   str.Append(data, len);
85378:   moz_free(data);
    1:   // NOTE: this being a byte array, it needs no null termination
85378:   *_aData = reinterpret_cast<PRUint8*>(moz_malloc(str.Length()));
    1:   if (!*_aData)
    1:     return NS_ERROR_OUT_OF_MEMORY;
85378:   memcpy(*_aData, str.get(), str.Length());
    1:   *aLen = str.Length();
    1:   return NS_OK;
    1: }
    1: 
    1: /* nsIInputStream convertToInputStream(in AString aString); */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::ConvertToInputStream(const nsAString& aString,
    1:                                                    nsIInputStream** _retval)
    1: {
    1:   nsresult rv;
    1:   nsCOMPtr<nsIStringInputStream> inputStream =
    1:     do_CreateInstance("@mozilla.org/io/string-input-stream;1", &rv);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
    1:   PRUint8* data;
    1:   PRUint32 dataLen;
    1:   rv = ConvertToByteArray(aString, &dataLen, &data);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
 3233:   rv = inputStream->AdoptData(reinterpret_cast<char*>(data), dataLen);
    1:   if (NS_FAILED(rv)) {
85378:     moz_free(data);
    1:     return rv;
    1:   }
    1: 
    1:   NS_ADDREF(*_retval = inputStream);
    1:   return rv;
    1: }
    1: 
    1: /* attribute string charset; */
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::GetCharset(char * *aCharset)
    1: {
    1:   *aCharset = ToNewCString(mCharset);
    1:   if (!*aCharset)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsScriptableUnicodeConverter::SetCharset(const char * aCharset)
    1: {
    1:   mCharset.Assign(aCharset);
    1:   return InitConverter();
    1: }
    1: 
57099: NS_IMETHODIMP
79445: nsScriptableUnicodeConverter::GetIsInternal(bool *aIsInternal)
57099: {
57099:   *aIsInternal = mIsInternal;
57099:   return NS_OK;
57099: }
57099: 
57099: NS_IMETHODIMP
79445: nsScriptableUnicodeConverter::SetIsInternal(const bool aIsInternal)
57099: {
57099:   mIsInternal = aIsInternal;
57099:   return NS_OK;
57099: }
57099: 
    1: nsresult
    1: nsScriptableUnicodeConverter::InitConverter()
    1: {
    1:   nsresult rv = NS_OK;
    1:   mEncoder = NULL ;
    1: 
    1:   nsCOMPtr<nsICharsetConverterManager> ccm = do_GetService(NS_CHARSETCONVERTERMANAGER_CONTRACTID, &rv);
    1: 
    1:   if (NS_SUCCEEDED( rv) && (nsnull != ccm)) {
    1:     // get charset atom due to getting unicode converter
    1:     
    1:     // get an unicode converter
    1:     rv = ccm->GetUnicodeEncoder(mCharset.get(), getter_AddRefs(mEncoder));
    1:     if(NS_SUCCEEDED(rv)) {
    1:       rv = mEncoder->SetOutputErrorBehavior(nsIUnicodeEncoder::kOnError_Replace, nsnull, (PRUnichar)'?');
    1:       if(NS_SUCCEEDED(rv)) {
57099:         rv = mIsInternal ?
57099:           ccm->GetUnicodeDecoderInternal(mCharset.get(),
57099:                                          getter_AddRefs(mDecoder)) :
57099:           ccm->GetUnicodeDecoder(mCharset.get(),
57099:                                  getter_AddRefs(mDecoder));
    1:       }
    1:     }
    1:   }
    1: 
    1:   return rv ;
    1: }
