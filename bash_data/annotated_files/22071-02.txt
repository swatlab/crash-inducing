    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim: set ts=2 sw=2 et tw=80: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2000
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Johnny Stenback <jst@netscape.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsDOMClassInfo_h___
    1: #define nsDOMClassInfo_h___
    1: 
    1: #include "nsIDOMClassInfo.h"
    1: #include "nsIXPCScriptable.h"
    1: #include "jsapi.h"
    1: #include "nsIScriptSecurityManager.h"
    1: #include "nsIScriptContext.h"
    1: #include "nsDOMJSUtils.h" // for GetScriptContextFromJSContext
    1: 
    1: class nsIDOMWindow;
    1: class nsIDOMNSHTMLOptionCollection;
    1: class nsIPluginInstance;
    1: class nsIForm;
    1: class nsIDOMNodeList;
    1: class nsIDOMDocument;
    1: class nsIHTMLDocument;
    1: class nsGlobalWindow;
    1: 
    1: struct nsDOMClassInfoData;
    1: 
    1: typedef nsIClassInfo* (*nsDOMClassInfoConstructorFnc)
    1:   (nsDOMClassInfoData* aData);
    1: 
21376: typedef nsresult (*nsDOMConstructorFunc)(nsISupports** aNewObject);
    1: 
    1: struct nsDOMClassInfoData
    1: {
    1:   const char *mName;
    1:   union {
    1:     nsDOMClassInfoConstructorFnc mConstructorFptr;
    1:     nsDOMClassInfoExternalConstructorFnc mExternalConstructorFptr;
    1:   } u;
    1: 
    1:   nsIClassInfo *mCachedClassInfo; // low bit is set to 1 if external,
    1:                                   // so be sure to mask if necessary!
    1:   const nsIID *mProtoChainInterface;
    1:   const nsIID **mInterfaces;
    1:   PRUint32 mScriptableFlags : 31; // flags must not use more than 31 bits!
19796:   PRUint32 mHasClassInterface : 1;
    1: #ifdef NS_DEBUG
    1:   PRUint32 mDebugID;
    1: #endif
    1: };
    1: 
    1: struct nsExternalDOMClassInfoData : public nsDOMClassInfoData
    1: {
    1:   const nsCID *mConstructorCID;
    1: };
    1: 
    1: 
    1: typedef unsigned long PtrBits;
    1: 
    1: // To be used with the nsDOMClassInfoData::mCachedClassInfo pointer.
    1: // The low bit is set when we created a generic helper for an external
    1: // (which holds on to the nsDOMClassInfoData).
    1: #define GET_CLEAN_CI_PTR(_ptr) (nsIClassInfo*)(PtrBits(_ptr) & ~0x1)
    1: #define MARK_EXTERNAL(_ptr) (nsIClassInfo*)(PtrBits(_ptr) | 0x1)
    1: #define IS_EXTERNAL(_ptr) (PtrBits(_ptr) & 0x1)
    1: 
    1: 
    1: class nsDOMClassInfo : public nsIXPCScriptable,
    1:                        public nsIClassInfo
    1: {
    1: public:
    1:   nsDOMClassInfo(nsDOMClassInfoData* aData);
    1:   virtual ~nsDOMClassInfo();
    1: 
    1:   NS_DECL_NSIXPCSCRIPTABLE
    1: 
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   NS_DECL_NSICLASSINFO
    1: 
    1:   // Helper method that returns a *non* refcounted pointer to a
    1:   // helper. So please note, don't release this pointer, if you do,
    1:   // you better make sure you've addreffed before release.
    1:   //
    1:   // Whaaaaa! I wanted to name this method GetClassInfo, but nooo,
    1:   // some of Microsoft devstudio's headers #defines GetClassInfo to
    1:   // GetClassInfoA so I can't, those $%#@^! bastards!!! What gives
    1:   // them the right to do that?
    1: 
    1:   static nsIClassInfo* GetClassInfoInstance(nsDOMClassInfoData* aData);
    1: 
    1:   static void ShutDown();
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsDOMClassInfo(aData);
    1:   }
    1: 
    1:   static nsresult WrapNative(JSContext *cx, JSObject *scope,
22071:                              nsISupports *native, const nsIID& aIID,
    1:                              jsval *vp,
22065:                              // If non-null aHolder will keep the jsval alive
22065:                              // while there's a ref to it
22065:                              nsIXPConnectJSObjectHolder** aHolder = nsnull);
    1:   static nsresult ThrowJSException(JSContext *cx, nsresult aResult);
    1: 
    1:   static nsresult InitDOMJSClass(JSContext *cx, JSObject *obj);
    1: 
    1:   static JSClass sDOMJSClass;
    1: 
    1:   /**
    1:    * Get our JSClass pointer for the XPCNativeWrapper class
    1:    */
    1:   static const JSClass* GetXPCNativeWrapperClass() {
    1:     return sXPCNativeWrapperClass;
    1:   }
    1:   
    1:   /**
    1:    * Set our JSClass pointer for the XPCNativeWrapper class
    1:    */
    1:   static void SetXPCNativeWrapperClass(JSClass* aClass) {
    1:     NS_ASSERTION(!sXPCNativeWrapperClass,
    1:                  "Double set of sXPCNativeWrapperClass");
    1:     sXPCNativeWrapperClass = aClass;
    1:   }
    1: 
    1:   static PRBool ObjectIsNativeWrapper(JSContext* cx, JSObject* obj)
    1:   {
    1: #ifdef DEBUG
    1:     {
    1:       nsIScriptContext *scx = GetScriptContextFromJSContext(cx);
    1: 
    1:       NS_PRECONDITION(!scx || !scx->IsContextInitialized() ||
    1:                       sXPCNativeWrapperClass,
    1:                       "Must know what the XPCNativeWrapper class is!");
    1:     }
    1: #endif
    1: 
    1:     return sXPCNativeWrapperClass &&
12197:       ::JS_GET_CLASS(cx, obj) == sXPCNativeWrapperClass;
    1:   }
    1: 
21618:   static void PreserveNodeWrapper(nsIXPConnectWrappedNative *aWrapper);
    1: 
    1: protected:
    1:   friend nsIClassInfo* NS_GetDOMClassInfoInstance(nsDOMClassInfoID aID);
    1: 
    1:   const nsDOMClassInfoData* mData;
    1: 
    1:   static nsresult Init();
    1:   static nsresult RegisterClassName(PRInt32 aDOMClassInfoID);
    1:   static nsresult RegisterClassProtos(PRInt32 aDOMClassInfoID);
    1:   static nsresult RegisterExternalClasses();
    1:   nsresult ResolveConstructor(JSContext *cx, JSObject *obj,
    1:                               JSObject **objp);
    1: 
    1:   // Checks if id is a number and returns the number, if aIsNumber is
    1:   // non-null it's set to true if the id is a number and false if it's
    1:   // not a number. If id is not a number this method returns -1
    1:   static PRInt32 GetArrayIndexFromId(JSContext *cx, jsval id,
    1:                                      PRBool *aIsNumber = nsnull);
    1: 
    1:   static inline PRBool IsReadonlyReplaceable(jsval id)
    1:   {
    1:     return (id == sTop_id          ||
    1:             id == sParent_id       ||
    1:             id == sScrollbars_id   ||
    1:             id == sContent_id      ||
    1:             id == sMenubar_id      ||
    1:             id == sToolbar_id      ||
    1:             id == sLocationbar_id  ||
    1:             id == sPersonalbar_id  ||
    1:             id == sStatusbar_id    ||
    1:             id == sDirectories_id  ||
    1:             id == sControllers_id  ||
    1:             id == sScrollX_id      ||
    1:             id == sScrollY_id      ||
    1:             id == sScrollMaxX_id   ||
    1:             id == sScrollMaxY_id   ||
    1:             id == sLength_id       ||
    1:             id == sFrames_id       ||
    1:             id == sSelf_id);
    1:   }
    1: 
    1:   static inline PRBool IsWritableReplaceable(jsval id)
    1:   {
    1:     return (id == sInnerHeight_id  ||
    1:             id == sInnerWidth_id   ||
    1:             id == sOpener_id       ||
    1:             id == sOuterHeight_id  ||
    1:             id == sOuterWidth_id   ||
    1:             id == sScreenX_id      ||
    1:             id == sScreenY_id      ||
    1:             id == sStatus_id       ||
    1:             id == sName_id);
    1:   }
    1: 
    1:   static JSClass sDOMConstructorProtoClass;
    1:   static JSFunctionSpec sDOMJSClass_methods[];
    1: 
    1:   static nsIXPConnect *sXPConnect;
    1:   static nsIScriptSecurityManager *sSecMan;
    1: 
    1:   // nsIXPCScriptable code
    1:   static nsresult DefineStaticJSVals(JSContext *cx);
    1: 
    1:   static PRBool sIsInitialized;
    1:   static PRBool sDisableDocumentAllSupport;
    1:   static PRBool sDisableGlobalScopePollutionSupport;
    1: 
    1:   static jsval sTop_id;
    1:   static jsval sParent_id;
    1:   static jsval sScrollbars_id;
    1:   static jsval sLocation_id;
    1:   static jsval sConstructor_id;
    1:   static jsval s_content_id;
    1:   static jsval sContent_id;
    1:   static jsval sMenubar_id;
    1:   static jsval sToolbar_id;
    1:   static jsval sLocationbar_id;
    1:   static jsval sPersonalbar_id;
    1:   static jsval sStatusbar_id;
    1:   static jsval sDirectories_id;
    1:   static jsval sControllers_id;
    1:   static jsval sLength_id;
    1:   static jsval sInnerHeight_id;
    1:   static jsval sInnerWidth_id;
    1:   static jsval sOuterHeight_id;
    1:   static jsval sOuterWidth_id;
    1:   static jsval sScreenX_id;
    1:   static jsval sScreenY_id;
    1:   static jsval sStatus_id;
    1:   static jsval sName_id;
    1:   static jsval sOnmousedown_id;
    1:   static jsval sOnmouseup_id;
    1:   static jsval sOnclick_id;
    1:   static jsval sOndblclick_id;
    1:   static jsval sOncontextmenu_id;
    1:   static jsval sOnmouseover_id;
    1:   static jsval sOnmouseout_id;
    1:   static jsval sOnkeydown_id;
    1:   static jsval sOnkeyup_id;
    1:   static jsval sOnkeypress_id;
    1:   static jsval sOnmousemove_id;
    1:   static jsval sOnfocus_id;
    1:   static jsval sOnblur_id;
    1:   static jsval sOnsubmit_id;
    1:   static jsval sOnreset_id;
    1:   static jsval sOnchange_id;
    1:   static jsval sOnselect_id;
    1:   static jsval sOnload_id;
    1:   static jsval sOnbeforeunload_id;
    1:   static jsval sOnunload_id;
    1:   static jsval sOnpageshow_id;
    1:   static jsval sOnpagehide_id;
    1:   static jsval sOnabort_id;
    1:   static jsval sOnerror_id;
    1:   static jsval sOnpaint_id;
    1:   static jsval sOnresize_id;
    1:   static jsval sOnscroll_id;
    1:   static jsval sScrollIntoView_id;
    1:   static jsval sScrollX_id;
    1:   static jsval sScrollY_id;
    1:   static jsval sScrollMaxX_id;
    1:   static jsval sScrollMaxY_id;
    1:   static jsval sOpen_id;
    1:   static jsval sItem_id;
    1:   static jsval sNamedItem_id;
    1:   static jsval sEnumerate_id;
    1:   static jsval sNavigator_id;
    1:   static jsval sDocument_id;
    1:   static jsval sWindow_id;
    1:   static jsval sFrames_id;
    1:   static jsval sSelf_id;
    1:   static jsval sOpener_id;
    1:   static jsval sAdd_id;
    1:   static jsval sAll_id;
    1:   static jsval sTags_id;
    1:   static jsval sAddEventListener_id;
    1:   static jsval sBaseURIObject_id;
    1:   static jsval sNodePrincipal_id;
    1:   static jsval sDocumentURIObject_id;
 4010:   static jsval sOncopy_id;
 4010:   static jsval sOncut_id;
 4010:   static jsval sOnpaste_id;
 6774:   static jsval sJava_id;
 6774:   static jsval sPackages_id;
15819: #ifdef OJI
 6774:   static jsval sNetscape_id;
 6774:   static jsval sSun_id;
 6774:   static jsval sJavaObject_id;
 6774:   static jsval sJavaClass_id;
 6774:   static jsval sJavaArray_id;
 6774:   static jsval sJavaMember_id;
 6774: #endif
    1: 
    1:   static const JSClass *sObjectClass;
    1:   static const JSClass *sXPCNativeWrapperClass;
    1: 
    1: public:
    1:   static PRBool sDoSecurityCheckInAddProperty;
    1: };
    1: 
    1: typedef nsDOMClassInfo nsDOMGenericSH;
    1: 
    1: // EventProp scriptable helper, this class should be the base class of
    1: // all objects that should support things like
    1: // obj.onclick=function{...}
    1: 
    1: class nsEventReceiverSH : public nsDOMGenericSH
    1: {
    1: protected:
    1:   nsEventReceiverSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsEventReceiverSH()
    1:   {
    1:   }
    1: 
    1:   static PRBool ReallyIsEventName(jsval id, jschar aFirstChar);
    1: 
    1:   static inline PRBool IsEventName(jsval id)
    1:   {
    1:     NS_ASSERTION(JSVAL_IS_STRING(id), "Don't pass non-string jsval's here!");
    1: 
    1:     jschar *str = ::JS_GetStringChars(JSVAL_TO_STRING(id));
    1: 
    1:     if (str[0] == 'o' && str[1] == 'n') {
    1:       return ReallyIsEventName(id, str[2]);
    1:     }
    1: 
    1:     return PR_FALSE;
    1:   }
    1: 
18907:   static JSBool AddEventListenerHelper(JSContext *cx, JSObject *obj,
18907:                                        uintN argc, jsval *argv, jsval *rval);
    1: 
    1:   nsresult RegisterCompileHandler(nsIXPConnectWrappedNative *wrapper,
    1:                                   JSContext *cx, JSObject *obj, jsval id,
    1:                                   PRBool compile, PRBool remove,
    1:                                   PRBool *did_define);
    1: 
    1: public:
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp,
    1:                          PRBool *_retval);
    1:   NS_IMETHOD AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
16664:   static nsresult DefineAddEventListener(JSContext *cx, JSObject *obj,
16664:                                         jsval id, JSObject **objp);
    1: };
    1: 
16664: // Adds support for 4th parameter of addEventListener.
16664: // Simpler than nsEventReceiverSH
19701: // Makes also sure that the wrapper is preserved if new properties are added.
16664: class nsEventTargetSH : public nsDOMGenericSH
16664: {
16664: protected:
16664:   nsEventTargetSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
16664:   {
16664:   }
16664: 
16664:   virtual ~nsEventTargetSH()
16664:   {
16664:   }
16664: public:
21618:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
21618:                        JSObject *globalObj, JSObject **parentObj);
21618:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                         JSObject *obj);
16664:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
16664:                         JSObject *obj, jsval id, PRUint32 flags,
16664:                         JSObject **objp, PRBool *_retval);
19701:   NS_IMETHOD AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
19701:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
21618:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                       JSObject *obj);
16664: 
16664:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
16664:   {
16664:     return new nsEventTargetSH(aData);
16664:   }
16664: };
    1: 
    1: // Window scriptable helper
    1: 
    1: class nsWindowSH : public nsEventReceiverSH
    1: {
    1: protected:
    1:   nsWindowSH(nsDOMClassInfoData* aData) : nsEventReceiverSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsWindowSH()
    1:   {
    1:   }
    1: 
    1:   static nsresult GlobalResolve(nsGlobalWindow *aWin, JSContext *cx,
    1:                                 JSObject *obj, JSString *str, PRUint32 flags,
    1:                                 PRBool *did_resolve);
    1: 
    1: public:
    1:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                        JSObject *globalObj, JSObject **parentObj);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, PRUint32 enum_op, jsval *statep,
    1:                           jsid *idp, PRBool *_retval);
    1:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                       JSObject *obj);
    1:   NS_IMETHOD Equality(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                       JSObject * obj, jsval val, PRBool *bp);
    1:   NS_IMETHOD OuterObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                          JSObject * obj, JSObject * *_retval);
    1:   NS_IMETHOD InnerObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                          JSObject * obj, JSObject * *_retval);
    1: 
18907:   static JSBool GlobalScopePolluterNewResolve(JSContext *cx, JSObject *obj,
18907:                                               jsval id, uintN flags,
    1:                                               JSObject **objp);
18907:   static JSBool GlobalScopePolluterGetProperty(JSContext *cx, JSObject *obj,
18907:                                                jsval id, jsval *vp);
18907:   static JSBool SecurityCheckOnSetProp(JSContext *cx, JSObject *obj, jsval id,
    1:                                        jsval *vp);
    1:   static void InvalidateGlobalScopePolluter(JSContext *cx, JSObject *obj);
    1:   static nsresult InstallGlobalScopePolluter(JSContext *cx, JSObject *obj,
    1:                                              nsIHTMLDocument *doc);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsWindowSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Location scriptable helper
    1: 
    1: class nsLocationSH : public nsDOMGenericSH
    1: {
    1: protected:
    1:   nsLocationSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsLocationSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD CheckAccess(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, PRUint32 mode,
    1:                          jsval *vp, PRBool *_retval);
    1: 
    1:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                        JSObject *globalObj, JSObject **parentObj);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsLocationSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Navigator scriptable helper
    1: 
    1: class nsNavigatorSH : public nsDOMGenericSH
    1: {
    1: protected:
    1:   nsNavigatorSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsNavigatorSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                        JSObject *globalObj, JSObject **parentObj);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsNavigatorSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // DOM Node helper, this class deals with setting the parent for the
    1: // wrappers
    1: 
    1: class nsNodeSH : public nsEventReceiverSH
    1: {
    1: protected:
    1:   nsNodeSH(nsDOMClassInfoData* aData) : nsEventReceiverSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsNodeSH()
    1:   {
    1:   }
    1: 
    1:   // Helper to check whether a capability is enabled
    1:   PRBool IsCapabilityEnabled(const char* aCapability);
    1: 
    1:   inline PRBool IsPrivilegedScript() {
    1:     return IsCapabilityEnabled("UniversalXPConnect");
    1:   }
    1: 
    1:   // Helper to define a void property with JSPROP_SHARED; this can do all the
    1:   // work so it's safe to just return whatever it returns.  |obj| is the object
    1:   // we're defining on, |id| is the name of the prop.  This must be a string
    1:   // jsval.  |objp| is the out param if we define successfully.
    1:   nsresult DefineVoidProp(JSContext* cx, JSObject* obj, jsval id,
    1:                           JSObject** objp);
    1: 
    1: public:
    1:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                        JSObject *globalObj, JSObject **parentObj);
21618:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                         JSObject *obj);
    1:   NS_IMETHOD AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD GetFlags(PRUint32 *aFlags);
21618:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                       JSObject *obj);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsNodeSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Element helper
    1: 
    1: class nsElementSH : public nsNodeSH
    1: {
    1: protected:
    1:   nsElementSH(nsDOMClassInfoData* aData) : nsNodeSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsElementSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj);
 6392:   NS_IMETHOD Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 6392:                        JSObject *obj, PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsElementSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Generic array scriptable helper
    1: 
    1: class nsGenericArraySH : public nsDOMClassInfo
    1: {
    1: protected:
    1:   nsGenericArraySH(nsDOMClassInfoData* aData) : nsDOMClassInfo(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsGenericArraySH()
    1:   {
    1:   }
    1:   
    1: public:
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                        JSObject *obj, PRBool *_retval);
    1:   
20752:   virtual nsresult GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
20752:                              JSObject *obj, PRUint32 *length);
20752: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsGenericArraySH(aData);
    1:   }
    1: };
    1: 
    1: 
20752: // Array scriptable helper
    1: 
    1: class nsArraySH : public nsGenericArraySH
    1: {
    1: protected:
    1:   nsArraySH(nsDOMClassInfoData* aData) : nsGenericArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsArraySH()
    1:   {
    1:   }
    1: 
20752:   // Subclasses need to override this, if the implementation can't fail it's
20752:   // allowed to not set *aResult.
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult) = 0;
    1: 
    1: public:
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1: 
20752: private:
20752:   // Not implemented, nothing should create an instance of this class.
20752:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData);
20752: };
20752: 
20752: 
20752: // NodeList scriptable helper
20752:  
20752: class nsNodeListSH : public nsArraySH
20752: {
20752: protected:
20752:   nsNodeListSH(nsDOMClassInfoData* aData) : nsArraySH(aData)
20752:   {
20752:   }
20752: 
20752: public:
21618:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
21618:                        JSObject *globalObj, JSObject **parentObj);
21618:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                         JSObject *obj);
21618:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                       JSObject *obj);
21618: 
20752:   virtual nsresult GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
20752:                              JSObject *obj, PRUint32 *length);
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
20752:  
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
20752:     return new nsNodeListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // NamedArray helper
    1: 
    1: class nsNamedArraySH : public nsArraySH
    1: {
    1: protected:
    1:   nsNamedArraySH(nsDOMClassInfoData* aData) : nsArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsNamedArraySH()
    1:   {
    1:   }
    1: 
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult) = 0;
    1: 
    1: public:
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
20752: 
20752: private:
20752:   // Not implemented, nothing should create an instance of this class.
20752:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData);
    1: };
    1: 
    1: 
    1: // NamedNodeMap helper
    1: 
    1: class nsNamedNodeMapSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsNamedNodeMapSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsNamedNodeMapSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsNamedNodeMapSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLCollection helper
    1: 
    1: class nsHTMLCollectionSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsHTMLCollectionSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLCollectionSH()
    1:   {
    1:   }
    1: 
21159:   virtual nsresult GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21159:                              JSObject *obj, PRUint32 *length);
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLCollectionSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // ContentList helper
    1: 
21159: class nsContentListSH : public nsNamedArraySH
    1: {
    1: protected:
21159:   nsContentListSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                        JSObject *globalObj, JSObject **parentObj);
21618:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                         JSObject *obj);
21618:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                       JSObject *obj);
21159: 
21159:   virtual nsresult GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21159:                              JSObject *obj, PRUint32 *length);
21159:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
21159:                                  nsresult *aResult);
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsContentListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: 
    1: // Document helper, for document.location and document.on*
    1: 
    1: class nsDocumentSH : public nsNodeSH
    1: {
    1: public:
    1:   nsDocumentSH(nsDOMClassInfoData* aData) : nsNodeSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsDocumentSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD GetFlags(PRUint32* aFlags);
    1:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj);
 8635:   NS_IMETHOD Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 8635:                       JSObject *obj);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsDocumentSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLDocument helper
    1: 
    1: class nsHTMLDocumentSH : public nsDocumentSH
    1: {
    1: protected:
    1:   nsHTMLDocumentSH(nsDOMClassInfoData* aData) : nsDocumentSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLDocumentSH()
    1:   {
    1:   }
    1: 
    1:   static nsresult ResolveImpl(JSContext *cx,
    1:                               nsIXPConnectWrappedNative *wrapper, jsval id,
    1:                               nsISupports **result);
18907:   static JSBool DocumentOpen(JSContext *cx, JSObject *obj, uintN argc,
18907:                              jsval *argv, jsval *rval);
    1:   static JSBool GetDocumentAllNodeList(JSContext *cx, JSObject *obj,
    1:                                        nsIDOMDocument *doc,
    1:                                        nsIDOMNodeList **nodeList);
    1: 
    1: public:
18907:   static JSBool DocumentAllGetProperty(JSContext *cx, JSObject *obj, jsval id,
    1:                                        jsval *vp);
18907:   static JSBool DocumentAllNewResolve(JSContext *cx, JSObject *obj, jsval id,
18907:                                       uintN flags, JSObject **objp);
18907:   static void ReleaseDocument(JSContext *cx, JSObject *obj);
18907:   static JSBool CallToGetPropMapper(JSContext *cx, JSObject *obj, uintN argc,
18907:                                     jsval *argv, jsval *rval);
18907:   static JSBool DocumentAllHelperGetProperty(JSContext *cx, JSObject *obj,
18907:                                              jsval id, jsval *vp);
18907:   static JSBool DocumentAllHelperNewResolve(JSContext *cx, JSObject *obj,
18907:                                             jsval id, uintN flags,
    1:                                             JSObject **objp);
18907:   static JSBool DocumentAllTagsNewResolve(JSContext *cx, JSObject *obj,
18907:                                           jsval id, uintN flags,
    1:                                           JSObject **objp);
    1: 
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLDocumentSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLElement helper
    1: 
    1: class nsHTMLElementSH : public nsElementSH
    1: {
    1: protected:
    1:   nsHTMLElementSH(nsDOMClassInfoData* aData) : nsElementSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLElementSH()
    1:   {
    1:   }
    1: 
18907:   static JSBool ScrollIntoView(JSContext *cx, JSObject *obj, uintN argc,
18907:                                jsval *argv, jsval *rval);
    1: 
    1: public:
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLElementSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLFormElement helper
    1: 
    1: class nsHTMLFormElementSH : public nsHTMLElementSH
    1: {
    1: protected:
    1:   nsHTMLFormElementSH(nsDOMClassInfoData* aData) : nsHTMLElementSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLFormElementSH()
    1:   {
    1:   }
    1: 
    1:   static nsresult FindNamedItem(nsIForm *aForm, JSString *str,
    1:                                 nsISupports **aResult);
    1: 
    1: public:
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp,
    1:                          PRBool *_retval);
    1: 
    1:   NS_IMETHOD NewEnumerate(nsIXPConnectWrappedNative *wrapper,
    1:                           JSContext *cx, JSObject *obj,
    1:                           PRUint32 enum_op, jsval *statep,
    1:                           jsid *idp, PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLFormElementSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLSelectElement helper
    1: 
    1: class nsHTMLSelectElementSH : public nsHTMLElementSH
    1: {
    1: protected:
    1:   nsHTMLSelectElementSH(nsDOMClassInfoData* aData) : nsHTMLElementSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLSelectElementSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp,
    1:                          PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1: 
    1:   static nsresult SetOption(JSContext *cx, jsval *vp, PRUint32 aIndex,
    1:                             nsIDOMNSHTMLOptionCollection *aOptCollection);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLSelectElementSH(aData);
    1:   }
    1: };
    1: 
    1: 
 5405: // HTMLEmbed/Object/AppletElement helper
    1: 
 5405: class nsHTMLPluginObjElementSH : public nsHTMLElementSH
    1: {
    1: protected:
 5405:   nsHTMLPluginObjElementSH(nsDOMClassInfoData* aData)
 5405:     : nsHTMLElementSH(aData)
    1:   {
    1:   }
    1: 
 5405:   virtual ~nsHTMLPluginObjElementSH()
    1:   {
    1:   }
    1: 
13098:   static nsresult GetPluginInstanceIfSafe(nsIXPConnectWrappedNative *aWrapper,
    1:                                           nsIPluginInstance **aResult);
    1: 
 5405:   static nsresult GetPluginJSObject(JSContext *cx, JSObject *obj,
    1:                                     nsIPluginInstance *plugin_inst,
    1:                                     JSObject **plugin_obj,
 5405:                                     JSObject **plugin_proto);
 5405: 
 5405:   static nsresult GetJavaPluginJSObject(JSContext *cx, JSObject *obj,
 5405:                                         nsIPluginInstance *plugin_inst,
 5405:                                         JSObject **plugin_obj,
 5405:                                         JSObject **plugin_proto);
    1: 
    1: public:
 5405:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 5405:                         JSObject *obj, jsval id, PRUint32 flags,
 5405:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj);
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                   JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
    1:                   PRBool *_retval);
    1: 
13098: 
13098:   static nsresult SetupProtoChain(nsIXPConnectWrappedNative *wrapper,
13098:                                   JSContext *cx, JSObject *obj);
13098: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLPluginObjElementSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // HTMLOptionsCollection helper
    1: 
    1: class nsHTMLOptionsCollectionSH : public nsHTMLCollectionSH
    1: {
    1: protected:
    1:   nsHTMLOptionsCollectionSH(nsDOMClassInfoData* aData)
    1:     : nsHTMLCollectionSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHTMLOptionsCollectionSH()
    1:   {
    1:   }
    1: 
18907:   static JSBool Add(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
18907:                     jsval *rval);
    1: 
    1: public:
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHTMLOptionsCollectionSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Plugin helper
    1: 
    1: class nsPluginSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsPluginSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsPluginSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsPluginSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // PluginArray helper
    1: 
    1: class nsPluginArraySH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsPluginArraySH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsPluginArraySH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsPluginArraySH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // MimeTypeArray helper
    1: 
    1: class nsMimeTypeArraySH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsMimeTypeArraySH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsMimeTypeArraySH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsMimeTypeArraySH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // String array helper
    1: 
    1: class nsStringArraySH : public nsGenericArraySH
    1: {
    1: protected:
    1:   nsStringArraySH(nsDOMClassInfoData* aData) : nsGenericArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsStringArraySH()
    1:   {
    1:   }
    1: 
    1:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                                nsAString& aResult) = 0;
    1: 
    1: public:
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1: };
    1: 
    1: 
    1: // History helper
    1: 
    1: class nsHistorySH : public nsStringArraySH
    1: {
    1: protected:
    1:   nsHistorySH(nsDOMClassInfoData* aData) : nsStringArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsHistorySH()
    1:   {
    1:   }
    1: 
    1:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                                nsAString& aResult);
    1: 
    1: public:
    1:   NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsHistorySH(aData);
    1:   }
    1: };
    1: 
    1: // StringList scriptable helper
    1: 
    1: class nsStringListSH : public nsStringArraySH
    1: {
    1: protected:
    1:   nsStringListSH(nsDOMClassInfoData* aData) : nsStringArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsStringListSH()
    1:   {
    1:   }
    1: 
    1:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                                nsAString& aResult);
    1: 
    1: public:
    1:   // Inherit GetProperty, Enumerate from nsStringArraySH
    1:   
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsStringListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // MediaList helper
    1: 
    1: class nsMediaListSH : public nsStringArraySH
    1: {
    1: protected:
    1:   nsMediaListSH(nsDOMClassInfoData* aData) : nsStringArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsMediaListSH()
    1:   {
    1:   }
    1: 
    1:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                                nsAString& aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsMediaListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // StyleSheetList helper
    1: 
    1: class nsStyleSheetListSH : public nsArraySH
    1: {
    1: protected:
    1:   nsStyleSheetListSH(nsDOMClassInfoData* aData) : nsArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsStyleSheetListSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsStyleSheetListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // CSSValueList helper
    1: 
    1: class nsCSSValueListSH : public nsArraySH
    1: {
    1: protected:
    1:   nsCSSValueListSH(nsDOMClassInfoData* aData) : nsArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsCSSValueListSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsCSSValueListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // CSSStyleDeclaration helper
    1: 
    1: class nsCSSStyleDeclSH : public nsStringArraySH
    1: {
    1: protected:
    1:   nsCSSStyleDeclSH(nsDOMClassInfoData* aData) : nsStringArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsCSSStyleDeclSH()
    1:   {
    1:   }
    1: 
    1:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                                nsAString& aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsCSSStyleDeclSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // CSSRuleList helper
    1: 
    1: class nsCSSRuleListSH : public nsArraySH
    1: {
    1: protected:
    1:   nsCSSRuleListSH(nsDOMClassInfoData* aData) : nsArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsCSSRuleListSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsCSSRuleListSH(aData);
    1:   }
    1: };
    1: 
12915: // ClientRectList helper
 2014: 
12915: class nsClientRectListSH : public nsArraySH
 2014: {
 2014: protected:
12915:   nsClientRectListSH(nsDOMClassInfoData* aData) : nsArraySH(aData)
 2014:   {
 2014:   }
 2014: 
12915:   virtual ~nsClientRectListSH()
 2014:   {
 2014:   }
 2014: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
 2014: 
 2014: public:
 2014:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
 2014:   {
12915:     return new nsClientRectListSH(aData);
 2014:   }
 2014: };
 2014: 
    1: 
    1: #ifdef MOZ_XUL
    1: // TreeColumns helper
    1: 
    1: class nsTreeColumnsSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsTreeColumnsSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsTreeColumnsSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
    1: 
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsTreeColumnsSH(aData);
    1:   }
    1: };
    1: #endif
    1: 
    1: // WebApps Storage helpers
    1: 
    1: class nsStorageSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsStorageSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsStorageSH()
    1:   {
    1:   }
    1: 
    1:   NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval);
    1:   NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval);
    1:   NS_IMETHOD NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, PRUint32 enum_op, jsval *statep,
    1:                           jsid *idp, PRBool *_retval);
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult)
20752:   {
20752:     return nsnull;
20752:   }
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsStorageSH(aData);
    1:   }
    1: };
    1: 
    1: class nsStorageListSH : public nsNamedArraySH
    1: {
    1: protected:
    1:   nsStorageListSH(nsDOMClassInfoData* aData) : nsNamedArraySH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsStorageListSH()
    1:   {
    1:   }
    1: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult)
20752:   {
20752:     return nsnull;
20752:   }
    1:   // Override nsNamedArraySH::GetNamedItem()
21159:   virtual nsISupports* GetNamedItem(nsISupports *aNative,
21159:                                     const nsAString& aName,
21159:                                     nsresult *aResult);
    1: 
    1: public:
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsStorageListSH(aData);
    1:   }
    1: };
    1: 
    1: 
    1: // Event handler 'this' translator class, this is called by XPConnect
    1: // when a "function interface" (nsIDOMEventListener) is called, this
    1: // class extracts 'this' fomr the first argument to the called
    1: // function (nsIDOMEventListener::HandleEvent(in nsIDOMEvent)), this
    1: // class will pass back nsIDOMEvent::currentTarget to be used as
    1: // 'this'.
    1: 
    1: class nsEventListenerThisTranslator : public nsIXPCFunctionThisTranslator
    1: {
    1: public:
    1:   nsEventListenerThisTranslator()
    1:   {
    1:   }
    1: 
    1:   virtual ~nsEventListenerThisTranslator()
    1:   {
    1:   }
    1: 
    1:   // nsISupports
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   // nsIXPCFunctionThisTranslator
    1:   NS_DECL_NSIXPCFUNCTIONTHISTRANSLATOR
    1: };
    1: 
    1: class nsDOMConstructorSH : public nsDOMGenericSH
    1: {
    1: protected:
    1:   nsDOMConstructorSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
    1:   {
    1:   }
    1: 
 1312: public:
 1312:   NS_IMETHOD Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 1312:                   JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
 1312:                   PRBool *_retval);
    1: 
    1:   NS_IMETHOD Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                        JSObject *obj, PRUint32 argc, jsval *argv,
    1:                        jsval *vp, PRBool *_retval);
    1: 
    1:   NS_IMETHOD HasInstance(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval val, PRBool *bp,
    1:                          PRBool *_retval);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsDOMConstructorSH(aData);
    1:   }
    1: };
    1: 
    1: class nsNonDOMObjectSH : public nsDOMGenericSH
    1: {
    1: protected:
    1:   nsNonDOMObjectSH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsNonDOMObjectSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD GetFlags(PRUint32 *aFlags);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsNonDOMObjectSH(aData);
    1:   }
    1: };
    1: 
    1: // Need this to override GetFlags() on nsNodeSH
    1: class nsAttributeSH : public nsNodeSH
    1: {
    1: protected:
    1:   nsAttributeSH(nsDOMClassInfoData* aData) : nsNodeSH(aData)
    1:   {
    1:   }
    1: 
    1:   virtual ~nsAttributeSH()
    1:   {
    1:   }
    1: 
    1: public:
    1:   NS_IMETHOD GetFlags(PRUint32 *aFlags);
    1: 
    1:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
    1:   {
    1:     return new nsAttributeSH(aData);
    1:   }
    1: };
    1: 
 1938: class nsOfflineResourceListSH : public nsStringArraySH
 1938: {
 1938: protected:
 1938:   nsOfflineResourceListSH(nsDOMClassInfoData* aData) : nsStringArraySH(aData)
 1938:   {
 1938:   }
 1938: 
 1938:   virtual ~nsOfflineResourceListSH()
 1938:   {
 1938:   }
 1938: 
 1938:   virtual nsresult GetStringAt(nsISupports *aNative, PRInt32 aIndex,
 1938:                                nsAString& aResult);
 1938: 
 1938: public:
 1938:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
 1938:   {
 1938:     return new nsOfflineResourceListSH(aData);
 1938:   }
 1938: };
 1938: 
 3940: class nsFileListSH : public nsArraySH
 3940: {
 3940: protected:
 3940:   nsFileListSH(nsDOMClassInfoData *aData) : nsArraySH(aData)
 3940:   {
 3940:   }
 3940: 
 3940:   virtual ~nsFileListSH()
 3940:   {
 3940:   }
 3940: 
20752:   virtual nsISupports* GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                                  nsresult *aResult);
 3940: 
 3940: public:
 3940:   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
 3940:   {
 3940:     return new nsFileListSH(aData);
 3940:   }
 3940: };
 1938: 
    1: #endif /* nsDOMClassInfo_h___ */
