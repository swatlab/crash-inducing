    1: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2000
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Vidur Apparao <vidur@netscape.com> (original author)
    1:  *   Johnny Stenback <jst@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsIDOMWindow2.idl"
    1: 
    1: interface nsIPrompt;
    1: interface nsIControllers;
    1: interface nsIDOMLocation;
 4040: interface nsIVariant;
52255: interface nsIAnimationFrameListener;
68769: interface nsIDOMMediaQueryList;
    1: 
68870: [scriptable, uuid(04eafa93-efbe-4254-9d65-91c344fa7ff2)]
    1: interface nsIDOMWindowInternal : nsIDOMWindow2
    1: {
    1:   readonly attribute nsIDOMWindowInternal        window;
    1: 
    1:   /* [replaceable] self */
    1:   readonly attribute nsIDOMWindowInternal        self;
    1: 
    1:   readonly attribute nsIDOMNavigator             navigator;
    1:   readonly attribute nsIDOMScreen                screen;
    1:   readonly attribute nsIDOMHistory               history;
    1: 
    1:   /* [replaceable] content */
    1:   readonly attribute nsIDOMWindow                content;
    1: 
    1:   /* [replaceable] prompter */
    1:   [noscript] readonly attribute nsIPrompt        prompter;
    1: 
    1:   /* [replaceable] menubar */
    1:   readonly attribute nsIDOMBarProp               menubar;
    1: 
    1:   /* [replaceable] toolbar */
    1:   readonly attribute nsIDOMBarProp               toolbar;
    1: 
    1:   /* [replaceable] locationbar */
    1:   readonly attribute nsIDOMBarProp               locationbar;
    1: 
    1:   /* [replaceable] personalbar */
    1:   readonly attribute nsIDOMBarProp               personalbar;
    1: 
    1:   /* [replaceable] statusbar */
    1:   readonly attribute nsIDOMBarProp               statusbar;
    1: 
    1:   readonly attribute boolean                     closed;
    1:   readonly attribute nsIDOMCrypto                crypto;
28788:   readonly attribute nsIDOMPkcs11                pkcs11;
    1: 
    1:   // XXX Shouldn't this be in nsIDOMChromeWindow?
    1:   /* [replaceable] controllers */
    1:   readonly attribute nsIControllers              controllers;
    1: 
    1:            attribute nsIDOMWindowInternal        opener;
    1: 
    1:   /* [replaceable] */
    1:            attribute DOMString                   status;
    1:            attribute DOMString                   defaultStatus;
    1: 
    1:   // XXX: The setter that takes a string argument needs to be special
    1:   // cased!
    1:   readonly attribute nsIDOMLocation              location;
    1:   
    1:   /* [replaceable] */
    1:            attribute long                        innerWidth;
    1:            attribute long                        innerHeight;
    1:            attribute long                        outerWidth;
    1:            attribute long                        outerHeight;
    1:            attribute long                        screenX;
    1:            attribute long                        screenY;
30882:   readonly attribute float                       mozInnerScreenX;
30882:   readonly attribute float                       mozInnerScreenY;
    1: 
    1:   /* The offset in pixels by which the window is scrolled */
    1:   readonly attribute long                        pageXOffset;
    1:   readonly attribute long                        pageYOffset;
    1: 
    1:   /* The maximum offset that the window can be scrolled to
    1:      (i.e., the document width/height minus the scrollport width/height) */
    1:   readonly attribute long                        scrollMaxX;
    1:   readonly attribute long                        scrollMaxY;
    1: 
    1:   /* [replaceable] length */
    1:   readonly attribute unsigned long               length;
    1: 
    1:            attribute boolean                     fullScreen;
    1: 
    1:   void                      alert(in DOMString text);
    1:   boolean                   confirm(in DOMString text);
    1: 
    1:   // prompt() should return a null string if cancel is pressed
18869:   DOMString                 prompt([optional] in DOMString aMessage,
42304:                                    [optional] in DOMString aInitial);
    1: 
    1:   void                      focus();
    1:   void                      blur();
    1: 
    1:   void                      back();
    1:   void                      forward();
    1:   void                      home();
    1:   void                      stop();
    1: 
    1:   void                      print();
    1: 
    1:   void                      moveTo(in long xPos, in long yPos);
    1:   void                      moveBy(in long xDif, in long yDif);
    1:   void                      resizeTo(in long width, in long height);
    1:   void                      resizeBy(in long widthDif, in long heightDif);
    1:   void                      scroll(in long xScroll, in long yScroll);
    1: 
    1:   /**
    1:    * Open a new window with this one as the parent.  This method will
    1:    * NOT examine the JS stack for purposes of determining a caller.
    1:    * This window will be used for security checks during the search by
    1:    * name and the default character set on the newly opened window
    1:    * will just be the default character set of this window.
    1:    */
    1:   [noscript] nsIDOMWindow   open(in DOMString url, in DOMString name,
    1:                                  in DOMString options);
19026: 
19026:   /**
19026:    * This method works like open except that aExtraArgument gets
19026:    * converted into the array window.arguments in JS, if
19026:    * aExtraArgument is a nsISupportsArray then the individual items in
19026:    * the array are inserted into window.arguments, and primitive
19026:    * nsISupports (nsISupportsPrimitives) types are converted to native
19026:    * JS types when possible.
19026:    */
    1:   [noscript] nsIDOMWindow   openDialog(in DOMString url, in DOMString name,
    1:                                        in DOMString options,
    1:                                        in nsISupports aExtraArgument);
    1:   void                      close();
    1: 
    1:   // XXX Should this be in nsIDOMChromeWindow?
    1:   void                      updateCommands(in DOMString action);
    1: 
18869:   /* Find in page.
    1:    * @param str: the search pattern
    1:    * @param caseSensitive: is the search caseSensitive
    1:    * @param backwards: should we search backwards
    1:    * @param wrapAround: should we wrap the search
    1:    * @param wholeWord: should we search only for whole words
    1:    * @param searchInFrames: should we search through all frames
    1:    * @param showDialog: should we show the Find dialog
    1:    */
18869:   boolean                   find([optional] in DOMString str,
18869:                                  [optional] in boolean caseSensitive,
18869:                                  [optional] in boolean backwards,
18869:                                  [optional] in boolean wrapAround,
18869:                                  [optional] in boolean wholeWord,
18869:                                  [optional] in boolean searchInFrames,
18869:                                  [optional] in boolean showDialog);
    1: 
    1:   // Ascii base64 data to binary data and vice versa...
    1:   DOMString                 atob(in DOMString aAsciiString);
    1:   DOMString                 btoa(in DOMString aBase64Data);
    1: 
    1:   readonly attribute nsIDOMElement               frameElement;
 4040: 
 4040:   nsIVariant                showModalDialog(in DOMString aURI,
 4040:                                             [optional] in nsIVariant aArgs,
 4040:                                             [optional] in DOMString aOptions);
10976: 
10976:   /**
10976:    * Implements a safe message-passing system which can cross same-origin
10976:    * boundaries.
10976:    *
14898:    * This method, when called, causes a MessageEvent to be asynchronously
14898:    * dispatched at the primary document for the window upon which this method is
14898:    * called.  (Note that the postMessage property on windows is allAccess and
14898:    * thus is readable cross-origin.)  The dispatched event will have message as
14898:    * its data, the calling context's window as its source, and an origin
14898:    * determined by the calling context's main document URI.  The targetOrigin
14898:    * argument specifies a URI and is used to restrict the message to be sent
14898:    * only when the target window has the same origin as targetOrigin (since,
14898:    * when the sender and the target have different origins, neither can read the
14898:    * location of the other).
10976:    * 
10976:    * See the WHATWG HTML5 specification, section 6.4, for more details.
10976:    */
12322:   [binaryname(PostMessageMoz)] void postMessage(in DOMString message,
14898:                                                 in DOMString targetOrigin);
42240: 
42240:   /**
42240:    * Returns the number of times this document for this window has
42240:    * been painted to the screen.
42240:    */
42240:   readonly attribute unsigned long long mozPaintCount;
50368: 
50368:   /**
50368:    * Request a refresh of this browser window.
50368:    */
52255:   void
52255:     mozRequestAnimationFrame([optional] in nsIAnimationFrameListener aListener);
50368: 
50368:   /**
50368:    * The current animation start time in milliseconds since the epoch.
50368:    */
50368:   readonly attribute long long mozAnimationStartTime;
68769: 
68769:   /**
68769:    * http://dev.w3.org/csswg/cssom-view/#extensions-to-the-window-interface
68769:    */
68769:   nsIDOMMediaQueryList matchMedia(in DOMString media_query_list);
    1: };
58023: 
58023: [scriptable, uuid(8fc58f56-f769-4368-a098-edd08550cf1a)]
58023: interface nsIDOMMozURLProperty : nsISupports
58023: {
58023:   DOMString createObjectURL(in nsIDOMBlob blob);
58023:   void revokeObjectURL(in DOMString URL);
58023: };
58023: 
58023: [scriptable, uuid(05563c0c-b74c-41ad-91d1-bc22d580a581)]
58023: interface nsIDOMWindow_2_0_BRANCH : nsISupports
58023: {
58023:   readonly attribute nsIDOMMozURLProperty URL;
58023: };
