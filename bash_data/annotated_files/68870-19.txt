    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim:set ts=2 sw=2 sts=2 et cindent: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Gecko.
    1:  *
    1:  * The Initial Developer of the Original Code is Google Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *  Brian Ryner <bryner@brianryner.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsDOMXULCommandEvent.h"
    1: #include "nsContentUtils.h"
    1: 
    1: nsDOMXULCommandEvent::nsDOMXULCommandEvent(nsPresContext* aPresContext,
29844:                                            nsInputEvent* aEvent)
    1:   : nsDOMUIEvent(aPresContext,
29844:                  aEvent ? aEvent : new nsInputEvent(PR_FALSE, 0, nsnull))
    1: {
    1:   if (aEvent) {
    1:     mEventIsInternal = PR_FALSE;
    1:   }
    1:   else {
    1:     mEventIsInternal = PR_TRUE;
    1:     mEvent->time = PR_Now();
    1:   }
    1: }
    1: 
29844: NS_IMPL_CYCLE_COLLECTION_CLASS(nsDOMXULCommandEvent)
    1: 
    1: NS_IMPL_ADDREF_INHERITED(nsDOMXULCommandEvent, nsDOMUIEvent)
    1: NS_IMPL_RELEASE_INHERITED(nsDOMXULCommandEvent, nsDOMUIEvent)
    1: 
29844: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(nsDOMXULCommandEvent,
29844:                                                 nsDOMUIEvent)
29844:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mSourceEvent)
29844: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
29844: 
29844: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsDOMXULCommandEvent,
29844:                                                   nsDOMUIEvent)
29844:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mSourceEvent)
29844: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
29844: 
40490: DOMCI_DATA(XULCommandEvent, nsDOMXULCommandEvent)
40490: 
29844: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(nsDOMXULCommandEvent)
    1:   NS_INTERFACE_MAP_ENTRY(nsIDOMXULCommandEvent)
39587:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(XULCommandEvent)
    1: NS_INTERFACE_MAP_END_INHERITING(nsDOMUIEvent)
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::GetAltKey(PRBool* aIsDown)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aIsDown);
    1:   *aIsDown = Event()->isAlt;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::GetCtrlKey(PRBool* aIsDown)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aIsDown);
    1:   *aIsDown = Event()->isControl;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::GetShiftKey(PRBool* aIsDown)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aIsDown);
    1:   *aIsDown = Event()->isShift;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::GetMetaKey(PRBool* aIsDown)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aIsDown);
    1:   *aIsDown = Event()->isMeta;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::GetSourceEvent(nsIDOMEvent** aSourceEvent)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aSourceEvent);
29844:   NS_IF_ADDREF(*aSourceEvent = mSourceEvent);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMXULCommandEvent::InitCommandEvent(const nsAString& aType,
    1:                                        PRBool aCanBubble, PRBool aCancelable,
68870:                                        nsIDOMAbstractView *aView,
    1:                                        PRInt32 aDetail,
    1:                                        PRBool aCtrlKey, PRBool aAltKey,
    1:                                        PRBool aShiftKey, PRBool aMetaKey,
    1:                                        nsIDOMEvent* aSourceEvent)
    1: {
    1:   nsresult rv = nsDOMUIEvent::InitUIEvent(aType, aCanBubble, aCancelable,
    1:                                           aView, aDetail);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
29844:   nsInputEvent *event = Event();
    1:   event->isControl = aCtrlKey;
    1:   event->isAlt = aAltKey;
    1:   event->isShift = aShiftKey;
    1:   event->isMeta = aMetaKey;
29844:   mSourceEvent = aSourceEvent;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: nsresult NS_NewDOMXULCommandEvent(nsIDOMEvent** aInstancePtrResult,
    1:                                   nsPresContext* aPresContext,
29844:                                   nsInputEvent *aEvent) 
    1: {
    1:   nsDOMXULCommandEvent* it = new nsDOMXULCommandEvent(aPresContext, aEvent);
68870:   if (nsnull == it) {
68870:     return NS_ERROR_OUT_OF_MEMORY;
68870:   }
68870: 
    1:   return CallQueryInterface(it, aInstancePtrResult);
    1: }
