     1: /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
     1: /* vim:set ts=2 sw=2 sts=2 et: */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: // This testcase exercises the Protocol Proxy Service
     1: 
115189: // These are the major sub tests:
115189: // run_filter_test();
115189: // run_filter_test2()
115189: // run_filter_test3()
115189: // run_pref_test();
115189: // run_pac_test();
115189: // run_pac_cancel_test();
115189: // run_proxy_host_filters_test();
115191: // run_myipaddress_test();
115192: // run_failed_script_test();
115189: 
     1: var ios = Components.classes["@mozilla.org/network/io-service;1"]
     1:                     .getService(Components.interfaces.nsIIOService);
     1: var pps = Components.classes["@mozilla.org/network/protocol-proxy-service;1"]
     1:                     .getService();
115189: var prefs = Components.classes["@mozilla.org/preferences-service;1"]
115189:                      .getService(Components.interfaces.nsIPrefBranch);
     1: 
     1: /**
     1:  * Test nsIProtocolHandler that allows proxying, but doesn't allow HTTP
     1:  * proxying.
     1:  */
     1: function TestProtocolHandler() {
     1: }
     1: TestProtocolHandler.prototype = {
     1:   QueryInterface: function(iid) {
     1:     if (iid.equals(Components.interfaces.nsIProtocolHandler) ||
     1:         iid.equals(Components.interfaces.nsISupports))
     1:       return this;
     1:     throw Components.results.NS_ERROR_NO_INTERFACE;
     1:   },
     1:   scheme: "moz-test",
     1:   defaultPort: -1,
     1:   protocolFlags: Components.interfaces.nsIProtocolHandler.URI_NOAUTH |
     1:                  Components.interfaces.nsIProtocolHandler.URI_NORELATIVE |
     1:                  Components.interfaces.nsIProtocolHandler.ALLOWS_PROXY |
     1:                  Components.interfaces.nsIProtocolHandler.URI_DANGEROUS_TO_LOAD,
     1:   newURI: function(spec, originCharset, baseURI) {
     1:     var uri = Components.classes["@mozilla.org/network/simple-uri;1"]
     1:                         .createInstance(Components.interfaces.nsIURI);
     1:     uri.spec = spec;
     1:     return uri;
     1:   },
     1:   newChannel: function(uri) {
     1:     throw Components.results.NS_ERROR_NOT_IMPLEMENTED;
     1:   },
     1:   allowPort: function(port, scheme) {
     1:     return true;
     1:   }
     1: };
     1: 
     1: function TestProtocolHandlerFactory() {
     1: }
     1: TestProtocolHandlerFactory.prototype = {
     1:   createInstance: function(delegate, iid) {
     1:     return new TestProtocolHandler().QueryInterface(iid);
     1:   },
     1:   lockFactory: function(lock) {
     1:   }
     1: };
     1: 
     1: function register_test_protocol_handler() {
     1:   var reg = Components.manager.QueryInterface(
     1:       Components.interfaces.nsIComponentRegistrar);
     1:   reg.registerFactory(Components.ID("{4ea7dd3a-8cae-499c-9f18-e1de773ca25b}"),
     1:                       "TestProtocolHandler",
     1:                       "@mozilla.org/network/protocol;1?name=moz-test",
     1:                       new TestProtocolHandlerFactory());
     1: }
     1: 
     1: function check_proxy(pi, type, host, port, flags, timeout, hasNext) {
     1:   do_check_neq(pi, null);
     1:   do_check_eq(pi.type, type);
     1:   do_check_eq(pi.host, host);
     1:   do_check_eq(pi.port, port);
     1:   if (flags != -1)
     1:     do_check_eq(pi.flags, flags);
     1:   if (timeout != -1)
     1:     do_check_eq(pi.failoverTimeout, timeout);
     1:   if (hasNext)
     1:     do_check_neq(pi.failoverProxy, null);
     1:   else
     1:     do_check_eq(pi.failoverProxy, null);
     1: }
     1: 
     1: function TestFilter(type, host, port, flags, timeout) {
     1:   this._type = type;
     1:   this._host = host;
     1:   this._port = port;
     1:   this._flags = flags;
     1:   this._timeout = timeout;
     1: }
     1: TestFilter.prototype = {
     1:   _type: "",
     1:   _host: "",
     1:   _port: -1,
     1:   _flags: 0,
     1:   _timeout: 0,
     1:   QueryInterface: function(iid) {
     1:     if (iid.equals(Components.interfaces.nsIProtocolProxyFilter) ||
     1:         iid.equals(Components.interfaces.nsISupports))
     1:       return this;
     1:     throw Components.results.NS_ERROR_NO_INTERFACE;
     1:   },
     1:   applyFilter: function(pps, uri, pi) {
     1:     var pi_tail = pps.newProxyInfo(this._type, this._host, this._port,
     1:                                    this._flags, this._timeout, null);
     1:     if (pi)
     1:       pi.failoverProxy = pi_tail;
     1:     else
     1:       pi = pi_tail;
     1:     return pi;
     1:   }
     1: };
     1: 
     1: function BasicFilter() {}
     1: BasicFilter.prototype = {
     1:   QueryInterface: function(iid) {
     1:     if (iid.equals(Components.interfaces.nsIProtocolProxyFilter) ||
     1:         iid.equals(Components.interfaces.nsISupports))
     1:       return this;
     1:     throw Components.results.NS_ERROR_NO_INTERFACE;
     1:   },
     1:   applyFilter: function(pps, uri, pi) {
     1:     return pps.newProxyInfo("http", "localhost", 8080, 0, 10,
     1:            pps.newProxyInfo("direct", "", -1, 0, 0, null));
     1:   }
     1: };
     1: 
110519: function resolveCallback() { }
110519: resolveCallback.prototype = {
110519:   nextFunction: null,
110519: 
110519:   QueryInterface : function (iid) {
110519:     const interfaces = [Components.interfaces.nsIProtocolProxyCallback,
110519:                         Components.interfaces..nsISupports];
110519:     if (!interfaces.some( function(v) { return iid.equals(v) } ))
110519:       throw Components.results.NS_ERROR_NO_INTERFACE;
110519:     return this;
110519:   },
110519: 
110519:   onProxyAvailable : function (req, uri, pi, status) {
110519:     this.nextFunction(pi);
110519:   }
110519: };
110519: 
     1: function run_filter_test() {
     1:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
     1: 
     1:   // Verify initial state
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test0_1;
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
     1: 
115189: var filter01;
115189: var filter02;
115189: 
115189: function filter_test0_1(pi) {
     1:   do_check_eq(pi, null);
     1: 
     1:   // Push a filter and verify the results
     1: 
115189:   filter01 = new BasicFilter();
115189:   filter02 = new BasicFilter();
115189:   pps.registerFilter(filter01, 10);
115189:   pps.registerFilter(filter02, 20);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test0_2;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function filter_test0_2(pi)
115189: {
     1:   check_proxy(pi, "http", "localhost", 8080, 0, 10, true);
     1:   check_proxy(pi.failoverProxy, "direct", "", -1, 0, 0, false);
     1: 
115189:   pps.unregisterFilter(filter02);
115189: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test0_3;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function filter_test0_3(pi)
115189: {
     1:   check_proxy(pi, "http", "localhost", 8080, 0, 10, true);
     1:   check_proxy(pi.failoverProxy, "direct", "", -1, 0, 0, false);
     1: 
     1:   // Remove filter and verify that we return to the initial state
     1: 
115189:   pps.unregisterFilter(filter01);
115189: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test0_4;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
     1: }
     1: 
115189: function filter_test0_4(pi)
115189: {
115189:   do_check_eq(pi, null);
115189:   run_filter_test2();
115189: }
115189: 
115189: var filter11;
115189: var filter12;
115189: 
114103: function run_filter_test2() {
     1:   // Push a filter and verify the results
     1: 
115189:   filter11 = new TestFilter("http", "foo", 8080, 0, 10);
115189:   filter12 = new TestFilter("http", "bar", 8090, 0, 10);
115189:   pps.registerFilter(filter11, 20);
115189:   pps.registerFilter(filter12, 10);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test1_1;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function filter_test1_1(pi) {
     1:   check_proxy(pi, "http", "bar", 8090, 0, 10, true);
     1:   check_proxy(pi.failoverProxy, "http", "foo", 8080, 0, 10, false);
     1: 
115189:   pps.unregisterFilter(filter12);
115189: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test1_2;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function filter_test1_2(pi) {
     1:   check_proxy(pi, "http", "foo", 8080, 0, 10, false);
     1: 
     1:   // Remove filter and verify that we return to the initial state
     1: 
115189:   pps.unregisterFilter(filter11);
115189: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = filter_test1_3;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function filter_test1_3(pi) {
     1:   do_check_eq(pi, null);
115189:   run_filter_test3();
     1: }
     1: 
110519: var filter_3_1;
110519: 
110519: function run_filter_test3() {
110519:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
110519: 
110519:   // Push a filter and verify the results asynchronously
110519: 
110519:   filter_3_1 = new TestFilter("http", "foo", 8080, 0, 10);
110519:   pps.registerFilter(filter_3_1, 20);
110519: 
110519:   var cb = new resolveCallback();
110519:   cb.nextFunction = filter_test3_1;
110519:   var req = pps.asyncResolve(uri, 0, cb);
110519: }
110519: 
110519: function filter_test3_1(pi) {
110519:   check_proxy(pi, "http", "foo", 8080, 0, 10, false);
110519:   pps.unregisterFilter(filter_3_1);
115189:   run_pref_test();
110519: }
110519: 
     1: function run_pref_test() {
     1:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
     1: 
     1:   // Verify 'direct' setting
     1: 
     1:   prefs.setIntPref("network.proxy.type", 0);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = pref_test1_1;
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function pref_test1_1(pi)
115189: {
     1:   do_check_eq(pi, null);
     1: 
     1:   // Verify 'manual' setting
     1:   prefs.setIntPref("network.proxy.type", 1);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = pref_test1_2;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function pref_test1_2(pi)
115189: {
     1:   // nothing yet configured
     1:   do_check_eq(pi, null);
     1: 
     1:   // try HTTP configuration
     1:   prefs.setCharPref("network.proxy.http", "foopy");
     1:   prefs.setIntPref("network.proxy.http_port", 8080);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = pref_test1_3;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function pref_test1_3(pi)
115189: {
     1:   check_proxy(pi, "http", "foopy", 8080, 0, -1, false);
     1: 
     1:   prefs.setCharPref("network.proxy.http", "");
     1:   prefs.setIntPref("network.proxy.http_port", 0);
     1: 
     1:   // try SOCKS configuration
     1:   prefs.setCharPref("network.proxy.socks", "barbar");
     1:   prefs.setIntPref("network.proxy.socks_port", 1203);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = pref_test1_4;
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function pref_test1_4(pi)
115189: {
     1:   check_proxy(pi, "socks", "barbar", 1203, 0, -1, false);
115189:   run_pac_test();
     1: }
     1: 
     1: function run_protocol_handler_test() {
     1:   var uri = ios.newURI("moz-test:foopy", null, null);
     1: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = protocol_handler_test_1;
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function protocol_handler_test_1(pi)
115189: {
     1:   do_check_eq(pi, null);
115189:   prefs.setCharPref("network.proxy.autoconfig_url", "");
115189:   prefs.setIntPref("network.proxy.type", 0);
115189: 
115189:   run_pac_cancel_test();
     1: }
     1: 
     1: function TestResolveCallback() {
     1: }
     1: TestResolveCallback.prototype = {
     1:   QueryInterface:
     1:   function TestResolveCallback_QueryInterface(iid) {
     1:     if (iid.equals(Components.interfaces.nsIProtocolProxyCallback) ||
     1:         iid.equals(Components.interfaces.nsISupports))
     1:       return this;
     1:     throw Components.results.NS_ERROR_NO_INTERFACE;
     1:   },
     1: 
     1:   onProxyAvailable:
     1:   function TestResolveCallback_onProxyAvailable(req, uri, pi, status) {
     1:     dump("*** uri=" + uri.spec + ", status=" + status + "\n");
     1: 
     1:     do_check_neq(req, null);
     1:     do_check_neq(uri, null);
     1:     do_check_eq(status, 0);
     1:     do_check_neq(pi, null);
     1: 
     1:     check_proxy(pi, "http", "foopy", 8080, 0, -1, true);
     1:     check_proxy(pi.failoverProxy, "direct", "", -1, -1, -1, false);
     1: 
     1:     run_protocol_handler_test();
     1:   }
     1: };
     1: 
     1: function run_pac_test() {
     1:   var pac = 'data:text/plain,' +
     1:             'function FindProxyForURL(url, host) {' +
     1:             '  return "PROXY foopy:8080; DIRECT";' +
     1:             '}';
     1:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
     1: 
     1:   // Configure PAC
     1: 
     1:   prefs.setIntPref("network.proxy.type", 2);
     1:   prefs.setCharPref("network.proxy.autoconfig_url", pac);
     1: 
     1:   var req = pps.asyncResolve(uri, 0, new TestResolveCallback());
     1: }
     1: 
     1: function TestResolveCancelationCallback() {
     1: }
     1: TestResolveCancelationCallback.prototype = {
     1:   QueryInterface:
     1:   function TestResolveCallback_QueryInterface(iid) {
     1:     if (iid.equals(Components.interfaces.nsIProtocolProxyCallback) ||
     1:         iid.equals(Components.interfaces.nsISupports))
     1:       return this;
     1:     throw Components.results.NS_ERROR_NO_INTERFACE;
     1:   },
     1: 
     1:   onProxyAvailable:
     1:   function TestResolveCancelationCallback_onProxyAvailable(req, uri, pi, status) {
     1:     dump("*** uri=" + uri.spec + ", status=" + status + "\n");
     1: 
     1:     do_check_neq(req, null);
     1:     do_check_neq(uri, null);
     1:     do_check_eq(status, Components.results.NS_ERROR_ABORT);
     1:     do_check_eq(pi, null);
     1: 
     1:     prefs.setCharPref("network.proxy.autoconfig_url", "");
     1:     prefs.setIntPref("network.proxy.type", 0);
     1: 
115189:     run_proxy_host_filters_test();
     1:   }
     1: };
     1: 
     1: function run_pac_cancel_test() {
     1:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
     1: 
     1:   // Configure PAC
     1:   var pac = 'data:text/plain,' +
     1:             'function FindProxyForURL(url, host) {' +
     1:             '  return "PROXY foopy:8080; DIRECT";' +
     1:             '}';
     1:   prefs.setIntPref("network.proxy.type", 2);
     1:   prefs.setCharPref("network.proxy.autoconfig_url", pac);
     1: 
     1:   var req = pps.asyncResolve(uri, 0, new TestResolveCancelationCallback());
     1:   req.cancel(Components.results.NS_ERROR_ABORT);
     1: }
     1: 
115189: var hostList;
115189: var hostIDX;
115189: var bShouldBeFiltered;
115189: var hostNextFX;
115189: 
115189: function check_host_filters(hl, shouldBe, nextFX) {
115189:   hostList = hl;
115189:   hostIDX = 0;
115189:   bShouldBeFiltered = shouldBe;
115189:   hostNextFX = nextFX;
115189: 
115189:   if (hostList.length > hostIDX)
115189:     check_host_filter(hostIDX);
115189: }
115189: 
115189: function check_host_filters_cb()
115189: {
115189:   hostIDX++;
115189:   if (hostList.length > hostIDX)
115189:     check_host_filter(hostIDX);
115189:   else
115189:     hostNextFX();
115189: }
115189: 
115189: function check_host_filter(i) {
 78606:   var uri;
 78606:   dump("*** uri=" + hostList[i] + " bShouldBeFiltered=" + bShouldBeFiltered + "\n");
115189:   uri = ios.newURI(hostList[i], null, null);
115189: 
115189:   var cb = new resolveCallback();
115189:   cb.nextFunction = host_filter_cb;
115189:   var req = pps.asyncResolve(uri, 0, cb);
115189: }
115189: 
115189: function host_filter_cb(proxy)
115189: {
 78606:   if (bShouldBeFiltered) {
 78606:     do_check_eq(proxy, null);
 78606:   } else {
 78606:     do_check_neq(proxy, null);
 78606:     // Just to be sure, let's check that the proxy is correct
 78606:     // - this should match the proxy setup in the calling function
 78606:     check_proxy(proxy, "http", "foopy", 8080, 0, -1, false);
 78606:   }
115189:   check_host_filters_cb();
 78606: }
 78606: 
 78606: 
 78606: // Verify that hists in the host filter list are not proxied
 78606: // refers to "network.proxy.no_proxies_on"
 78606: 
115189: var uriStrUseProxyList;
115189: var uriStrUseProxyList;
115189: var hostFilterList;
115189: 
 78606: function run_proxy_host_filters_test() {
 78606:   // Get prefs object from DOM
 78606:   // Setup a basic HTTP proxy configuration
 78606:   // - pps.resolve() needs this to return proxy info for non-filtered hosts
 78606:   prefs.setIntPref("network.proxy.type", 1);
 78606:   prefs.setCharPref("network.proxy.http", "foopy");
 78606:   prefs.setIntPref("network.proxy.http_port", 8080);
 78606: 
 78606:   // Setup host filter list string for "no_proxies_on"
115189:   hostFilterList = "www.mozilla.org, www.google.com, www.apple.com, "
 78606:                        + ".domain, .domain2.org"
 78606:   prefs.setCharPref("network.proxy.no_proxies_on", hostFilterList);
 78606:   do_check_eq(prefs.getCharPref("network.proxy.no_proxies_on"), hostFilterList);
 78606: 
 78606:   var rv;
 78606:   // Check the hosts that should be filtered out
115189:   uriStrFilterList = [ "http://www.mozilla.org/",
 78606:                            "http://www.google.com/",
 78606:                            "http://www.apple.com/",
 78606:                            "http://somehost.domain/",
 78606:                            "http://someotherhost.domain/",
 78606:                            "http://somehost.domain2.org/",
 78606:                            "http://somehost.subdomain.domain2.org/" ];
115189:   check_host_filters(uriStrFilterList, true, host_filters_1);
115189: }
 78606: 
115189: function host_filters_1()
115189: {
 78606:   // Check the hosts that should be proxied
115189:   uriStrUseProxyList = [ "http://www.mozilla.com/",
 78606:                              "http://mail.google.com/",
 78606:                              "http://somehost.domain.co.uk/",
 78606:                              "http://somelocalhost/" ];  
115189:   check_host_filters(uriStrUseProxyList, false, host_filters_2);
115189: }
 78606: 
115189: function host_filters_2()
115189: {
 78606:   // Set no_proxies_on to include local hosts
 78606:   prefs.setCharPref("network.proxy.no_proxies_on", hostFilterList + ", <local>");
 78606:   do_check_eq(prefs.getCharPref("network.proxy.no_proxies_on"),
 78606:               hostFilterList + ", <local>");
 78606:   // Amend lists - move local domain to filtered list
 78606:   uriStrFilterList.push(uriStrUseProxyList.pop());
115189:   check_host_filters(uriStrFilterList, true, host_filters_3);
115189: }
 78606: 
115189: function host_filters_3()
115189: {
115189:   check_host_filters(uriStrUseProxyList, false, host_filters_4);
115189: }
115189: 
115189: function host_filters_4()
115189: {
 78606:   // Cleanup
 78606:   prefs.setCharPref("network.proxy.no_proxies_on", "");
 78606:   do_check_eq(prefs.getCharPref("network.proxy.no_proxies_on"), "");  
 78606: 
115191:   run_myipaddress_test();
115191: }
115191: 
115191: function run_myipaddress_test()
115191: {
115191:   // This test makes sure myIpAddress() comes up with some valid
115191:   // IP address other than localhost. The DUT must be configured with
115191:   // an Internet route for this to work - though no Internet traffic
115191:   // should be created.
115191: 
115191:   var pac = 'data:text/plain,' +
115191:             'function FindProxyForURL(url, host) {' +
115191:             ' return "PROXY " + myIpAddress() + ":1234";' +
115191:             '}';
115191: 
115191:   // no traffic to this IP is ever sent, it is just a public IP that
115191:   // does not require DNS to determine a route.
115191:   var uri = ios.newURI("http://192.0.43.10/", null, null);
115191: 
115191:   prefs.setIntPref("network.proxy.type", 2);
115191:   prefs.setCharPref("network.proxy.autoconfig_url", pac);
115191: 
115191:   var cb = new resolveCallback();
115191:   cb.nextFunction = myipaddress_callback;
115191:   var req = pps.asyncResolve(uri, 0, cb);
115191: }
115191: 
115191: function myipaddress_callback(pi)
115191: {
115191:   do_check_neq(pi, null);
115191:   do_check_eq(pi.type, "http");
115191:   do_check_eq(pi.port, 1234);
115191: 
115191:   // make sure we didn't return localhost
115191:   do_check_neq(pi.host, null);
115191:   do_check_neq(pi.host, "127.0.0.1");
115191:   do_check_neq(pi.host, "::1");
115191: 
115192:   run_failed_script_test();
115192: }
115192: 
115192: function run_failed_script_test()
115192: {
115192:   // test to make sure we go direct with invalid PAC
115192:   var pac = 'data:text/plain,' +
115192:             '\nfor(;\n';
115192: 
115192:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115192: 
115192:   prefs.setIntPref("network.proxy.type", 2);
115192:   prefs.setCharPref("network.proxy.autoconfig_url", pac);
115192: 
115192:   var cb = new resolveCallback();
115192:   cb.nextFunction = failed_script_callback;
115192:   var req = pps.asyncResolve(uri, 0, cb);
115192: }
115192: 
115192: function failed_script_callback(pi)
115192: {
115192:   // we should go direct
115192:   do_check_eq(pi, null);
115192: 
115191:   prefs.setIntPref("network.proxy.type", 0);
 78606:   do_test_finished();
 78606: }
 78606: 
115189: function run_deprecated_sync_test()
115189: {
115189:   var uri = ios.newURI("http://www.mozilla.org/", null, null);
115189: 
115189:   pps.QueryInterface(Components.interfaces.nsIProtocolProxyService2);
115189: 
115189:   // Verify initial state
115189:   var pi = pps.deprecatedBlockingResolve(uri, 0);
115189:   do_check_eq(pi, null);
115189: 
115189:   // Push a filter and verify the results
115189:   var filter1 = new BasicFilter();
115189:   var filter2 = new BasicFilter();
115189:   pps.registerFilter(filter1, 10);
115189:   pps.registerFilter(filter2, 20);
115189: 
115189:   pi = pps.deprecatedBlockingResolve(uri, 0);
115189:   check_proxy(pi, "http", "localhost", 8080, 0, 10, true);
115189:   check_proxy(pi.failoverProxy, "direct", "", -1, 0, 0, false);
115189: 
115189:   pps.unregisterFilter(filter2);
115189:   pi = pps.deprecatedBlockingResolve(uri, 0);
115189:   check_proxy(pi, "http", "localhost", 8080, 0, 10, true);
115189:   check_proxy(pi.failoverProxy, "direct", "", -1, 0, 0, false);
115189: 
115189:   // Remove filter and verify that we return to the initial state
115189:   pps.unregisterFilter(filter1);
115189:   pi = pps.deprecatedBlockingResolve(uri, 0);
115189:   do_check_eq(pi, null);
115189: }
115189: 
     1: function run_test() {
     1:   register_test_protocol_handler();
115189: 
115189:   // any synchronous tests
115189:   run_deprecated_sync_test();
115189: 
115189:   // start of asynchronous test chain
114103:   run_filter_test();
115189:   do_test_pending();
114103: }
