 86486: /* Any copyright is dedicated to the Public Domain.
 86486:    http://creativecommons.org/publicdomain/zero/1.0/ */
 86486: "use strict";
 86486: 
 86486: const ZOOM = 2;
 86486: const RESIZE = 50;
100193: let tiltOpened = false;
 86486: 
 88395: function test() {
 86486:   if (!isTiltEnabled()) {
 86486:     info("Skipping controller test because Tilt isn't enabled.");
 86486:     return;
 86486:   }
 86486:   if (!isWebGLSupported()) {
 86486:     info("Skipping controller test because WebGL isn't supported.");
 86486:     return;
 86486:   }
 86486: 
 86486:   waitForExplicitFinish();
 86486: 
 86486:   createTab(function() {
 86486:     createTilt({
 86486:       onInspectorOpen: function()
 86486:       {
 88395:         TiltUtils.setDocumentZoom(window, ZOOM);
 86486:       },
 86486:       onTiltOpen: function(instance)
 86486:       {
100193:         tiltOpened = true;
100193: 
 89939:         ok(isApprox(InspectorUI.highlighter.zoom, ZOOM),
 89939:           "The Highlighter zoom doesn't have the expected results.");
 89939: 
 86486:         ok(isApprox(instance.presenter.transforms.zoom, ZOOM),
 86486:           "The presenter transforms zoom wasn't initially set correctly.");
 86486: 
 86486:         let contentWindow = gBrowser.selectedBrowser.contentWindow;
 86486:         let initialWidth = contentWindow.innerWidth;
 86486:         let initialHeight = contentWindow.innerHeight;
 86486: 
 91042:         let renderer = instance.presenter._renderer;
 86486:         let arcball = instance.controller.arcball;
 86486: 
 86486:         ok(isApprox(contentWindow.innerWidth * ZOOM, renderer.width, 1),
 88395:           "The renderer width wasn't set correctly before the resize.");
 86486:         ok(isApprox(contentWindow.innerHeight * ZOOM, renderer.height, 1),
 88395:           "The renderer height wasn't set correctly before the resize.");
 86486: 
 86486:         ok(isApprox(contentWindow.innerWidth * ZOOM, arcball.width, 1),
 88395:           "The arcball width wasn't set correctly before the resize.");
 86486:         ok(isApprox(contentWindow.innerHeight * ZOOM, arcball.height, 1),
 88395:           "The arcball height wasn't set correctly before the resize.");
 86486: 
 86486: 
 86486:         window.resizeBy(-RESIZE * ZOOM, -RESIZE * ZOOM);
 86486: 
 86486:         executeSoon(function() {
 86486:           ok(isApprox(contentWindow.innerWidth + RESIZE, initialWidth, 1),
 88395:             "The content window width wasn't set correctly after the resize.");
 86486:           ok(isApprox(contentWindow.innerHeight + RESIZE, initialHeight, 1),
 88395:             "The content window height wasn't set correctly after the resize.");
 86486: 
 86486:           ok(isApprox(contentWindow.innerWidth * ZOOM, renderer.width, 1),
 88395:             "The renderer width wasn't set correctly after the resize.");
 86486:           ok(isApprox(contentWindow.innerHeight * ZOOM, renderer.height, 1),
 88395:             "The renderer height wasn't set correctly after the resize.");
 86486: 
 86486:           ok(isApprox(contentWindow.innerWidth * ZOOM, arcball.width, 1),
 88395:             "The arcball width wasn't set correctly after the resize.");
 86486:           ok(isApprox(contentWindow.innerHeight * ZOOM, arcball.height, 1),
 88395:             "The arcball height wasn't set correctly after the resize.");
 86486: 
 86486: 
 86486:           window.resizeBy(RESIZE * ZOOM, RESIZE * ZOOM);
 86486: 
 89939: 
 88393:           Services.obs.addObserver(cleanup, DESTROYED, false);
 86486:           InspectorUI.closeInspectorUI();
 86486:         });
 89939:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 86486:     });
 86486:   });
 86486: }
 86486: 
 86486: function cleanup() {
100193:   if (tiltOpened) { Services.obs.removeObserver(cleanup, DESTROYED); }
 86486:   gBrowser.removeCurrentTab();
 86486:   finish();
 86486: }
