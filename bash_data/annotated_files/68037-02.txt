 2039: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 2039: /* vim:expandtab:shiftwidth=4:tabstop=4:
 2039:  */
 2039: /* ***** BEGIN LICENSE BLOCK *****
 2039:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 2039:  *
 2039:  * The contents of this file are subject to the Mozilla Public License Version
 2039:  * 1.1 (the "License"); you may not use this file except in compliance with
 2039:  * the License. You may obtain a copy of the License at
 2039:  * http://www.mozilla.org/MPL/
 2039:  *
 2039:  * Software distributed under the License is distributed on an "AS IS" basis,
 2039:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 2039:  * for the specific language governing rights and limitations under the
 2039:  * License.
 2039:  *
 2039:  * The Original Code is mozilla.org code.
 2039:  *
 2039:  * The Initial Developer of the Original Code is
 2039:  * Mozilla Foundation.
 2039:  * Portions created by the Initial Developer are Copyright (C) 2007
 2039:  * the Initial Developer. All Rights Reserved.
 2039:  *
 2039:  * Contributor(s):
 2039:  *   Bolian Yin <bolian.yin@sun.com>
 2039:  *   Ginn Chen <ginn.chen@sun.com>
 2039:  *   Alexander Surkov <surkov.alexander@gmail.com>
 2039:  *
 2039:  * Alternatively, the contents of this file may be used under the terms of
 2039:  * either the GNU General Public License Version 2 or later (the "GPL"), or
 2039:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 2039:  * in which case the provisions of the GPL or the LGPL are applicable instead
 2039:  * of those above. If you wish to allow use of your version of this file only
 2039:  * under the terms of either the GPL or the LGPL, and not to allow others to
 2039:  * use your version of this file under the terms of the MPL, indicate your
 2039:  * decision by deleting the provisions above and replace them with the notice
 2039:  * and other provisions required by the GPL or the LGPL. If you do not delete
 2039:  * the provisions above, a recipient may use your version of this file under
 2039:  * the terms of any one of the MPL, the GPL or the LGPL.
 2039:  *
 2039:  * ***** END LICENSE BLOCK ***** */
 2039:  
 2039: #include "nsApplicationAccessible.h"
 2039: 
67790: #include "States.h"
35523: #include "nsAccessibilityService.h"
41384: #include "nsAccUtils.h"
35523: 
 2039: #include "nsIComponentManager.h"
41229: #include "nsIDOMDocument.h"
41229: #include "nsIDOMWindow.h"
41229: #include "nsIWindowMediator.h"
 2039: #include "nsServiceManagerUtils.h"
42314: #include "mozilla/Services.h"
 2039: 
 2039: nsApplicationAccessible::nsApplicationAccessible() :
35523:   nsAccessibleWrap(nsnull, nsnull)
 2039: {
62919:   mFlags |= eApplicationAccessible;
 2039: }
 2039: 
16428: ////////////////////////////////////////////////////////////////////////////////
 2039: // nsISupports
16428: 
39600: NS_IMPL_ISUPPORTS_INHERITED1(nsApplicationAccessible, nsAccessible,
39600:                              nsIAccessibleApplication)
16428: 
16428: ////////////////////////////////////////////////////////////////////////////////
43504: // nsIAccessible
41228: 
41228: NS_IMETHODIMP
43504: nsApplicationAccessible::GetParent(nsIAccessible **aAccessible)
41228: {
43504:   NS_ENSURE_ARG_POINTER(aAccessible);
43504:   *aAccessible = nsnull;
41228:   return NS_OK;
41228: }
41228: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetNextSibling(nsIAccessible **aNextSibling)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aNextSibling);
43504:   *aNextSibling = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetPreviousSibling(nsIAccessible **aPreviousSibling)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aPreviousSibling);
43504:   *aPreviousSibling = nsnull;
43504:   return NS_OK;
43504: }
 2039: 
 2039: NS_IMETHODIMP
 2039: nsApplicationAccessible::GetName(nsAString& aName)
 2039: {
18347:   aName.Truncate();
18347: 
 2039:   nsCOMPtr<nsIStringBundleService> bundleService =
42314:     mozilla::services::GetStringBundleService();
 2039: 
 2039:   NS_ASSERTION(bundleService, "String bundle service must be present!");
 2039:   NS_ENSURE_STATE(bundleService);
 2039: 
 2039:   nsCOMPtr<nsIStringBundle> bundle;
20141:   nsresult rv = bundleService->CreateBundle("chrome://branding/locale/brand.properties",
 2039:                                             getter_AddRefs(bundle));
20141:   NS_ENSURE_SUCCESS(rv, rv);
 2039: 
 2039:   nsXPIDLString appName;
20141:   rv = bundle->GetStringFromName(NS_LITERAL_STRING("brandShortName").get(),
 2039:                                  getter_Copies(appName));
20141:   if (NS_FAILED(rv) || appName.IsEmpty()) {
20141:     NS_WARNING("brandShortName not found, using default app name");
20141:     appName.AssignLiteral("Gecko based application");
 2039:   }
 2039: 
 2039:   aName.Assign(appName);
 2039:   return NS_OK;
 2039: }
 2039: 
35523: NS_IMETHODIMP
43504: nsApplicationAccessible::GetValue(nsAString &aValue)
 2039: {
35523:   aValue.Truncate();
 2039:   return NS_OK;
 2039: }
 2039: 
 2039: NS_IMETHODIMP
43504: nsApplicationAccessible::GetDescription(nsAString &aDescription)
43504: {
43504:   aDescription.Truncate();
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetKeyboardShortcut(nsAString &aKeyboardShortcut)
43504: {
43504:   aKeyboardShortcut.Truncate();
43504:   return NS_OK;
43504: }
43504: 
67790: PRUint64
67790: nsApplicationAccessible::State()
35523: {
68037:   return NativeState();
35523: }
35523: 
35523: NS_IMETHODIMP
43504: nsApplicationAccessible::GetAttributes(nsIPersistentProperties **aAttributes)
35523: {
43504:   NS_ENSURE_ARG_POINTER(aAttributes);
43504:   *aAttributes = nsnull;
43504:   return NS_OK;
43504: }
35523: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GroupPosition(PRInt32 *aGroupLevel,
43504:                                        PRInt32 *aSimilarItemsInGroup,
43504:                                        PRInt32 *aPositionInGroup)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aGroupLevel);
43504:   *aGroupLevel = 0;
43504:   NS_ENSURE_ARG_POINTER(aSimilarItemsInGroup);
43504:   *aSimilarItemsInGroup = 0;
43504:   NS_ENSURE_ARG_POINTER(aPositionInGroup);
43504:   *aPositionInGroup = 0;
43504:   return NS_OK;
43504: }
43504: 
64131: nsAccessible*
43504: nsApplicationAccessible::GetChildAtPoint(PRInt32 aX, PRInt32 aY,
64131:                                          EWhichChildAtPoint aWhichChild)
43504: {
64131:   return nsnull;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetRelationByType(PRUint32 aRelationType,
43504:                                            nsIAccessibleRelation **aRelation)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aRelation);
43504:   *aRelation = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetRelationsCount(PRUint32 *aCount)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aCount);
43504:   *aCount = 0;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetRelation(PRUint32 aIndex,
43504:                                      nsIAccessibleRelation **aRelation)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aRelation);
43504:   *aRelation = nsnull;
43504:   return NS_ERROR_INVALID_ARG;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetRelations(nsIArray **aRelations)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aRelations);
43504:   *aRelations = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetBounds(PRInt32 *aX, PRInt32 *aY,
43504:                                    PRInt32 *aWidth, PRInt32 *aHeight)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aX);
43504:   *aX = 0;
43504:   NS_ENSURE_ARG_POINTER(aY);
43504:   *aY = 0;
43504:   NS_ENSURE_ARG_POINTER(aWidth);
43504:   *aWidth = 0;
43504:   NS_ENSURE_ARG_POINTER(aHeight);
43504:   *aHeight = 0;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::SetSelected(PRBool aIsSelected)
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::TakeSelection()
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::TakeFocus()
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetNumActions(PRUint8 *aNumActions)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aNumActions);
43504:   *aNumActions = 0;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetActionName(PRUint8 aIndex, nsAString &aName)
43504: {
43504:   aName.Truncate();
43504:   return NS_ERROR_INVALID_ARG;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetActionDescription(PRUint8 aIndex,
43504:                                               nsAString &aDescription)
43504: {
43504:   aDescription.Truncate();
43504:   return NS_ERROR_INVALID_ARG;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::DoAction(PRUint8 aIndex)
43504: {
43504:   return NS_OK;
35523: }
35523: 
35523: ////////////////////////////////////////////////////////////////////////////////
39600: // nsIAccessibleApplication
39600: 
39600: NS_IMETHODIMP
39600: nsApplicationAccessible::GetAppName(nsAString& aName)
39600: {
39600:   aName.Truncate();
39600: 
39600:   if (!mAppInfo)
39600:     return NS_ERROR_FAILURE;
39600: 
39600:   nsCAutoString cname;
39600:   nsresult rv = mAppInfo->GetName(cname);
39600:   NS_ENSURE_SUCCESS(rv, rv);
39600: 
39600:   AppendUTF8toUTF16(cname, aName);
39600:   return NS_OK;
39600: }
39600: 
39600: NS_IMETHODIMP
39600: nsApplicationAccessible::GetAppVersion(nsAString& aVersion)
39600: {
39600:   aVersion.Truncate();
39600: 
39600:   if (!mAppInfo)
39600:     return NS_ERROR_FAILURE;
39600: 
39600:   nsCAutoString cversion;
39600:   nsresult rv = mAppInfo->GetVersion(cversion);
39600:   NS_ENSURE_SUCCESS(rv, rv);
39600: 
39600:   AppendUTF8toUTF16(cversion, aVersion);
39600:   return NS_OK;
39600: }
39600: 
39600: NS_IMETHODIMP
39600: nsApplicationAccessible::GetPlatformName(nsAString& aName)
39600: {
39600:   aName.AssignLiteral("Gecko");
39600:   return NS_OK;
39600: }
39600: 
39600: NS_IMETHODIMP
39600: nsApplicationAccessible::GetPlatformVersion(nsAString& aVersion)
39600: {
39600:   aVersion.Truncate();
39600: 
39600:   if (!mAppInfo)
39600:     return NS_ERROR_FAILURE;
39600: 
39600:   nsCAutoString cversion;
39600:   nsresult rv = mAppInfo->GetPlatformVersion(cversion);
39600:   NS_ENSURE_SUCCESS(rv, rv);
39600: 
39600:   AppendUTF8toUTF16(cversion, aVersion);
39600:   return NS_OK;
39600: }
39600: 
39600: ////////////////////////////////////////////////////////////////////////////////
35523: // nsAccessNode public methods
35523: 
35523: PRBool
35523: nsApplicationAccessible::IsDefunct()
35523: {
43310:   return nsAccessibilityService::IsShutdown();
35523: }
35523: 
43538: PRBool
35523: nsApplicationAccessible::Init()
35523: {
39600:   mAppInfo = do_GetService("@mozilla.org/xre/app-info;1");
43538:   return PR_TRUE;
39600: }
39600: 
43538: void
39600: nsApplicationAccessible::Shutdown()
39600: {
39600:   mAppInfo = nsnull;
35523: }
35523: 
56292: bool
56292: nsApplicationAccessible::IsPrimaryForNode() const
56292: {
56292:   return false;
56292: }
56292: 
35523: ////////////////////////////////////////////////////////////////////////////////
35523: // nsAccessible public methods
35523: 
67790: void
67790: nsApplicationAccessible::ApplyARIAState(PRUint64* aState)
43504: {
43504: }
43504: 
52027: PRUint32
52027: nsApplicationAccessible::NativeRole()
35523: {
52027:   return nsIAccessibleRole::ROLE_APP_ROOT;
35523: }
35523: 
67790: PRUint64
67790: nsApplicationAccessible::NativeState()
 2039: {
68037:   return IsDefunct() ? states::DEFUNCT : 0;
 2039: }
 2039: 
35523: void
35523: nsApplicationAccessible::InvalidateChildren()
 2039: {
46207:   // Do nothing because application children are kept updated by AppendChild()
46207:   // and RemoveChild() method calls.
 2039: }
 2039: 
35523: ////////////////////////////////////////////////////////////////////////////////
35523: // nsAccessible protected methods
13730: 
 2039: void
 2039: nsApplicationAccessible::CacheChildren()
 2039: {
41229:   // CacheChildren is called only once for application accessible when its
41229:   // children are requested because empty InvalidateChldren() prevents its
41229:   // repeated calls.
41229: 
46207:   // Basically children are kept updated by Append/RemoveChild method calls.
46207:   // However if there are open windows before accessibility was started
41229:   // then we need to make sure root accessibles for open windows are created so
41230:   // that all root accessibles are stored in application accessible children
41229:   // array.
41229: 
41229:   nsCOMPtr<nsIWindowMediator> windowMediator =
41229:     do_GetService(NS_WINDOWMEDIATOR_CONTRACTID);
41229: 
41229:   nsCOMPtr<nsISimpleEnumerator> windowEnumerator;
41229:   nsresult rv = windowMediator->GetEnumerator(nsnull,
41229:                                               getter_AddRefs(windowEnumerator));
41229:   if (NS_FAILED(rv))
41229:     return;
41229: 
41229:   PRBool hasMore = PR_FALSE;
41229:   windowEnumerator->HasMoreElements(&hasMore);
41229:   while (hasMore) {
41229:     nsCOMPtr<nsISupports> window;
41229:     windowEnumerator->GetNext(getter_AddRefs(window));
41229:     nsCOMPtr<nsIDOMWindow> DOMWindow = do_QueryInterface(window);
41229:     if (DOMWindow) {
41229:       nsCOMPtr<nsIDOMDocument> DOMDocument;
41229:       DOMWindow->GetDocument(getter_AddRefs(DOMDocument));
41229:       if (DOMDocument) {
46340:         nsCOMPtr<nsIDocument> docNode(do_QueryInterface(DOMDocument));
46340:         GetAccService()->GetDocAccessible(docNode); // ensure creation
41229:       }
41229:     }
41229:     windowEnumerator->HasMoreElements(&hasMore);
41229:   }
 2039: }
 2039: 
39191: nsAccessible*
35523: nsApplicationAccessible::GetSiblingAtOffset(PRInt32 aOffset, nsresult* aError)
35523: {
35523:   if (IsDefunct()) {
35523:     if (aError)
35523:       *aError = NS_ERROR_FAILURE;
 2039: 
35523:     return nsnull;
 2039:   }
 2039: 
35523:   if (aError)
35523:     *aError = NS_OK; // fail peacefully
35523: 
35523:   return nsnull;
 2039: }
 2039: 
35523: ////////////////////////////////////////////////////////////////////////////////
56292: // nsIAccessNode and nsAccessNode
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetDOMNode(nsIDOMNode **aDOMNode)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aDOMNode);
43504:   *aDOMNode = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetDocument(nsIAccessibleDocument **aDocument)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aDocument);
43504:   *aDocument = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetRootDocument(nsIAccessibleDocument **aRootDocument)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aRootDocument);
43504:   *aRootDocument = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetInnerHTML(nsAString &aInnerHTML)
43504: {
43504:   aInnerHTML.Truncate();
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::ScrollTo(PRUint32 aScrollType)
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::ScrollToPoint(PRUint32 aCoordinateType,
43504:                                        PRInt32 aX, PRInt32 aY)
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetOwnerWindow(void **aOwnerWindow)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aOwnerWindow);
43504:   *aOwnerWindow = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetComputedStyleValue(const nsAString &aPseudoElt,
43504:                                                const nsAString &aPropertyName,
43504:                                                nsAString &aValue)
43504: {
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetComputedStyleCSSValue(const nsAString &aPseudoElt,
43504:                                                   const nsAString &aPropertyName,
43504:                                                   nsIDOMCSSPrimitiveValue **aCSSPrimitiveValue)
43504: {
43504:   NS_ENSURE_ARG_POINTER(aCSSPrimitiveValue);
43504:   *aCSSPrimitiveValue = nsnull;
43504:   return NS_OK;
43504: }
43504: 
43504: NS_IMETHODIMP
43504: nsApplicationAccessible::GetLanguage(nsAString &aLanguage)
43504: {
43504:   aLanguage.Truncate();
43504:   return NS_OK;
43504: }
56292: 
