43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com> (original author)
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttpConnection_h__
43113: #define nsHttpConnection_h__
43113: 
43113: #include "nsHttp.h"
43113: #include "nsHttpConnectionInfo.h"
43113: #include "nsAHttpConnection.h"
43113: #include "nsAHttpTransaction.h"
43113: #include "nsXPIDLString.h"
43113: #include "nsCOMPtr.h"
59399: #include "nsAutoPtr.h"
64613: #include "prinrval.h"
43113: 
43113: #include "nsIStreamListener.h"
43113: #include "nsISocketTransport.h"
43113: #include "nsIAsyncInputStream.h"
43113: #include "nsIAsyncOutputStream.h"
43113: #include "nsIInterfaceRequestor.h"
64613: #include "nsIEventTarget.h"
43113: 
43113: //-----------------------------------------------------------------------------
43113: // nsHttpConnection - represents a connection to a HTTP server (or proxy)
43113: //
43113: // NOTE: this objects lives on the socket thread only.  it should not be
43113: // accessed from any other thread.
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsHttpConnection : public nsAHttpSegmentReader
43113:                        , public nsAHttpSegmentWriter
43113:                        , public nsIInputStreamCallback
43113:                        , public nsIOutputStreamCallback
43113:                        , public nsITransportEventSink
43113:                        , public nsIInterfaceRequestor
43113: {
43113: public:
43113:     NS_DECL_ISUPPORTS
43113:     NS_DECL_NSAHTTPSEGMENTREADER
43113:     NS_DECL_NSAHTTPSEGMENTWRITER
43113:     NS_DECL_NSIINPUTSTREAMCALLBACK
43113:     NS_DECL_NSIOUTPUTSTREAMCALLBACK
43113:     NS_DECL_NSITRANSPORTEVENTSINK
43113:     NS_DECL_NSIINTERFACEREQUESTOR
43113: 
43113:     nsHttpConnection();
43113:     virtual ~nsHttpConnection();
43113: 
43113:     // Initialize the connection:
43113:     //  info        - specifies the connection parameters.
43113:     //  maxHangTime - limits the amount of time this connection can spend on a
43113:     //                single transaction before it should no longer be kept 
43113:     //                alive.  a value of 0xffff indicates no limit.
64613:     nsresult Init(nsHttpConnectionInfo *info, PRUint16 maxHangTime,
64613:                   nsISocketTransport *, nsIAsyncInputStream *,
64613:                   nsIAsyncOutputStream *, nsIInterfaceRequestor *,
64613:                   nsIEventTarget *);
43113: 
43113:     // Activate causes the given transaction to be processed on this
84396:     // connection.  It fails if there is already an existing transaction.
84396:     nsresult Activate(nsAHttpTransaction *, PRUint8 caps);
43113: 
43113:     // Close the underlying socket transport.
43113:     void Close(nsresult reason);
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // XXX document when these are ok to call
43113: 
79445:     bool     SupportsPipelining() { return mSupportsPipelining; }
84396:     bool     IsKeepAlive() { return mKeepAliveMask && mKeepAlive; }
79445:     bool     CanReuse();   // can this connection be reused?
55822: 
55822:     // Returns time in seconds for how long connection can be reused.
55822:     PRUint32 TimeToLive();
55822: 
84396:     void     DontReuse()   { mKeepAliveMask = false;
84396:                              mKeepAlive = false;
84396:                              mIdleTimeout = 0; }
43113:     void     DropTransport() { DontReuse(); mSocketTransport = 0; }
43113: 
79445:     bool     LastTransactionExpectedNoContent()
61543:     {
61543:         return mLastTransactionExpectedNoContent;
61543:     }
61543: 
79445:     void     SetLastTransactionExpectedNoContent(bool val)
61543:     {
61543:         mLastTransactionExpectedNoContent = val;
61543:     }
61543: 
83069:     nsISocketTransport   *Transport()      { return mSocketTransport; }
43113:     nsAHttpTransaction   *Transaction()    { return mTransaction; }
43113:     nsHttpConnectionInfo *ConnectionInfo() { return mConnInfo; }
43113: 
43113:     // nsAHttpConnection compatible methods (non-virtual):
79445:     nsresult OnHeadersAvailable(nsAHttpTransaction *, nsHttpRequestHead *, nsHttpResponseHead *, bool *reset);
43113:     void     CloseTransaction(nsAHttpTransaction *, nsresult reason);
43113:     void     GetConnectionInfo(nsHttpConnectionInfo **ci) { NS_IF_ADDREF(*ci = mConnInfo); }
70090:     nsresult TakeTransport(nsISocketTransport **,
70090:                            nsIAsyncInputStream **,
70090:                            nsIAsyncOutputStream **);
43113:     void     GetSecurityInfo(nsISupports **);
79445:     bool     IsPersistent() { return IsKeepAlive(); }
79445:     bool     IsReused();
64613:     void     SetIsReusedAfter(PRUint32 afterMilliseconds);
64613:     void     SetIdleTimeout(PRUint16 val) {mIdleTimeout = val;}
70090:     nsresult PushBack(const char *data, PRUint32 length);
84396:     nsresult ResumeSend();
84396:     nsresult ResumeRecv();
67709:     PRInt64  MaxBytesRead() {return mMaxBytesRead;}
43113: 
43113:     static NS_METHOD ReadFromStream(nsIInputStream *, void *, const char *,
43113:                                     PRUint32, PRUint32, PRUint32 *);
43113: 
70873:     // When a persistent connection is in the connection manager idle 
70873:     // connection pool, the nsHttpConnection still reads errors and hangups
70873:     // on the socket so that it can be proactively released if the server
70873:     // initiates a termination. Only call on socket thread.
70873:     void BeginIdleMonitoring();
70873:     void EndIdleMonitoring();
70873: 
43113: private:
43113:     // called to cause the underlying socket to start speaking SSL
43113:     nsresult ProxyStartSSL();
43113: 
43113:     nsresult OnTransactionDone(nsresult reason);
43113:     nsresult OnSocketWritable();
43113:     nsresult OnSocketReadable();
43113: 
69816:     nsresult SetupProxyConnect();
43113: 
79445:     bool     IsAlive();
79445:     bool     SupportsPipelining(nsHttpResponseHead *);
43113:     
43113: private:
43113:     nsCOMPtr<nsISocketTransport>    mSocketTransport;
43113:     nsCOMPtr<nsIAsyncInputStream>   mSocketIn;
43113:     nsCOMPtr<nsIAsyncOutputStream>  mSocketOut;
43113: 
43113:     nsresult                        mSocketInCondition;
43113:     nsresult                        mSocketOutCondition;
43113: 
69816:     nsCOMPtr<nsIInputStream>        mProxyConnectStream;
43113:     nsCOMPtr<nsIInputStream>        mRequestStream;
43113: 
64613:     // mTransaction only points to the HTTP Transaction callbacks if the
64613:     // transaction is open, otherwise it is null.
64613:     nsRefPtr<nsAHttpTransaction>    mTransaction;
64613: 
64613:     nsCOMPtr<nsIInterfaceRequestor> mCallbacks;
64613:     nsCOMPtr<nsIEventTarget>        mCallbackTarget;
64613: 
64613:     nsRefPtr<nsHttpConnectionInfo> mConnInfo;
43113: 
43113:     PRUint32                        mLastReadTime;
43113:     PRUint16                        mMaxHangTime;    // max download time before dropping keep-alive status
43113:     PRUint16                        mIdleTimeout;    // value of keep-alive: timeout=
64613:     PRIntervalTime                  mConsiderReusedAfterInterval;
64613:     PRIntervalTime                  mConsiderReusedAfterEpoch;
67709:     PRInt64                         mCurrentBytesRead;   // data read per activation
67709:     PRInt64                         mMaxBytesRead;       // max read in 1 activation
43113: 
70090:     nsRefPtr<nsIAsyncInputStream>   mInputOverflow;
70090: 
79445:     bool                            mKeepAlive;
79445:     bool                            mKeepAliveMask;
79445:     bool                            mSupportsPipelining;
79445:     bool                            mIsReused;
79445:     bool                            mCompletedProxyConnect;
79445:     bool                            mLastTransactionExpectedNoContent;
79445:     bool                            mIdleMonitoring;
43113: };
43113: 
43113: #endif // nsHttpConnection_h__
