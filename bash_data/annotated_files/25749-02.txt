    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Author: Kyle Yuan (kyle.yuan@sun.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #ifndef __nsXULTreeAccessible_h__
    1: #define __nsXULTreeAccessible_h__
    1: 
    1: #include "nsITreeBoxObject.h"
    1: #include "nsITreeView.h"
    1: #include "nsITreeColumns.h"
    1: #include "nsXULSelectAccessible.h"
    1: #include "nsIAccessibleTreeCache.h"
    1: 
    1: /*
    1:  * A class the represents the XUL Tree widget.
    1:  */
 8868: const PRUint32 kMaxTreeColumns = 100;
    1: const PRUint32 kDefaultTreeCacheSize = 256;
    1: 
    1: class nsXULTreeAccessible : public nsXULSelectableAccessible,
    1:                             public nsIAccessibleTreeCache
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS_INHERITED
    1:   NS_DECL_NSIACCESSIBLESELECTABLE
    1:   NS_DECL_NSIACCESSIBLETREECACHE
    1: 
    1:   nsXULTreeAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);
  731:   virtual ~nsXULTreeAccessible() {}
    1: 
21256:   // nsIAccessible
    1:   NS_IMETHOD GetRole(PRUint32 *_retval);
    1:   NS_IMETHOD GetValue(nsAString& _retval);
    1: 
    1:   NS_IMETHOD GetFirstChild(nsIAccessible **_retval);
    1:   NS_IMETHOD GetLastChild(nsIAccessible **_retval);
    1:   NS_IMETHOD GetChildCount(PRInt32 *_retval);
    1:   NS_IMETHOD GetFocusedChild(nsIAccessible **aFocusedChild);
19323: 
19323:   NS_IMETHOD GetDeepestChildAtPoint(PRInt32 aX, PRInt32 aY,
19323:                                     nsIAccessible **aAccessible);
    1: 
21169:   // nsAccessNode
21169:   virtual nsresult Shutdown();
21169: 
21256:   // nsAccessible
21256:   virtual nsresult GetStateInternal(PRUint32 *aState, PRUint32 *aExtraState);
21256: 
21256:   // nsXULTreeAccessible
    1:   static void GetTreeBoxObject(nsIDOMNode* aDOMNode, nsITreeBoxObject** aBoxObject);
    1:   static nsresult GetColumnCount(nsITreeBoxObject* aBoxObject, PRInt32 *aCount);
    1: 
    1:   static PRBool IsColumnHidden(nsITreeColumn *aColumn);
    1:   static already_AddRefed<nsITreeColumn> GetNextVisibleColumn(nsITreeColumn *aColumn);
    1:   static already_AddRefed<nsITreeColumn> GetFirstVisibleColumn(nsITreeBoxObject *aTree);
    1:   static already_AddRefed<nsITreeColumn> GetLastVisibleColumn(nsITreeBoxObject *aTree);
    1: 
    1: protected:
    1:   nsCOMPtr<nsITreeBoxObject> mTree;
    1:   nsCOMPtr<nsITreeView> mTreeView;
 3466:   nsAccessNodeHashtable *mAccessNodeCache;
    1: 
    1:   NS_IMETHOD ChangeSelection(PRInt32 aIndex, PRUint8 aMethod, PRBool *aSelState);
    1: };
    1: 
    1: /**
    1:   * Treeitems -- used in Trees
    1:   */
11389: class nsXULTreeitemAccessible : public nsLeafAccessible,
11389:                                 public nsPIAccessibleTreeItem
    1: {
    1: public:
    1:   enum { eAction_Click = 0, eAction_Expand = 1 };
    1: 
    1:   NS_DECL_ISUPPORTS_INHERITED
11389:   NS_DECL_NSPIACCESSIBLETREEITEM
    1: 
    1:   nsXULTreeitemAccessible(nsIAccessible *aParent, nsIDOMNode *aDOMNode, nsIWeakReference *aShell, PRInt32 aRow, nsITreeColumn* aColumn = nsnull);
    1:   virtual ~nsXULTreeitemAccessible() {}
    1: 
11389:   // nsIAccessible
20246:   NS_IMETHOD GetName(nsAString& aName);
    1:   NS_IMETHOD GetRole(PRUint32 *_retval);
    1:   NS_IMETHOD GetNumActions(PRUint8 *_retval);
    1:   NS_IMETHOD GetActionName(PRUint8 aIndex, nsAString& aName);
  401:   virtual nsresult GetAttributesInternal(nsIPersistentProperties *aAttributes);
    1: 
    1:   NS_IMETHOD GetParent(nsIAccessible **_retval);
    1:   NS_IMETHOD GetNextSibling(nsIAccessible **_retval);
    1:   NS_IMETHOD GetPreviousSibling(nsIAccessible **_retval);
    1: 
    1:   NS_IMETHOD DoAction(PRUint8 index);
    1:   NS_IMETHOD GetBounds(PRInt32 *x, PRInt32 *y, PRInt32 *width, PRInt32 *height);
    1:   NS_IMETHOD SetSelected(PRBool aSelect); 
    1:   NS_IMETHOD TakeFocus(void); 
    1: 
24822:   NS_IMETHOD GetRelationByType(PRUint32 aRelationType,
24822:                                nsIAccessibleRelation **aRelation);
11389: 
11389:   // nsIAccessNode
    1:   NS_IMETHOD GetUniqueID(void **aUniqueID);
    1: 
 9622:   // nsAccessNode
 9622:   virtual PRBool IsDefunct();
21169:   virtual nsresult Init();
21169:   virtual nsresult Shutdown();
 9622: 
21256:   // nsAccessible
21256:   virtual nsresult GetStateInternal(PRUint32 *aState, PRUint32 *aExtraState);
21256: 
    1: protected:
 5694:   PRBool IsExpandable();
    1:   nsCOMPtr<nsITreeBoxObject> mTree;
    1:   nsCOMPtr<nsITreeView> mTreeView;
    1:   PRInt32 mRow;
    1:   nsCOMPtr<nsITreeColumn> mColumn;
11389:   nsString mCachedName;
    1: };
    1: 
 6094: class nsXULTreeColumnsAccessible : public nsXULColumnsAccessible
    1: {
    1: public:
 6094:   nsXULTreeColumnsAccessible(nsIDOMNode* aDOMNode, nsIWeakReference* aShell);
    1: 
 6094:   // nsIAccessible
 6094:   NS_IMETHOD GetNextSibling(nsIAccessible **aNextSibling);
    1: };
    1: 
    1: #endif
