     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
104487: #include "mozilla/Assertions.h"
104487: #include "mozilla/dom/Element.h"
104487: #include "nsAString.h"
104487: #include "nsCOMPtr.h"
104487: #include "nsCaseTreatment.h"
104487: #include "nsDebug.h"
104487: #include "nsEditor.h"
104487: #include "nsError.h"
104487: #include "nsGkAtoms.h"
104487: #include "nsIDOMElement.h"
104487: #include "nsIDOMNode.h"
189329: #include "nsNameSpaceManager.h"
104487: #include "nsLiteralString.h"
104487: #include "nsPlaintextEditor.h"
104487: #include "nsString.h"
     1: #include "nsTextEditUtils.h"
     1: 
 86982: using namespace mozilla;
 86982: 
     1: ///////////////////////////////////////////////////////////////////////////
     1: // IsBody: true if node an html body node
 79445: bool 
     1: nsTextEditUtils::IsBody(nsIDOMNode *node)
     1: {
 98850:   return nsEditor::NodeIsType(node, nsGkAtoms::body);
     1: }
     1: 
     1: 
     1: ///////////////////////////////////////////////////////////////////////////
     1: // IsBreak: true if node an html break node
 79445: bool 
     1: nsTextEditUtils::IsBreak(nsIDOMNode *node)
     1: {
 98850:   return nsEditor::NodeIsType(node, nsGkAtoms::br);
     1: }
     1: 
     1: 
     1: ///////////////////////////////////////////////////////////////////////////
     1: // IsMozBR: true if node an html br node with type = _moz
     1: //                  
 79445: bool 
     1: nsTextEditUtils::IsMozBR(nsIDOMNode *node)
     1: {
     1:   NS_PRECONDITION(node, "null node passed to nsHTMLEditUtils::IsMozBR");
 86982:   return IsBreak(node) && HasMozAttr(node);
     1: }
     1: 
     1: 
 86982: bool
140152: nsTextEditUtils::IsMozBR(nsINode* aNode)
 86982: {
 86982:   MOZ_ASSERT(aNode);
140152:   return aNode->IsElement() &&
140152:          aNode->AsElement()->IsHTML(nsGkAtoms::br) &&
140152:          aNode->AsElement()->AttrValueIs(kNameSpaceID_None, nsGkAtoms::type,
140152:                                          NS_LITERAL_STRING("_moz"),
140152:                                          eIgnoreCase);
 86982: }
 86982: 
     1: ///////////////////////////////////////////////////////////////////////////
     1: // HasMozAttr: true if node has type attribute = _moz
     1: //             (used to indicate the div's and br's we use in
     1: //              mail compose rules)
     1: //                  
 79445: bool 
     1: nsTextEditUtils::HasMozAttr(nsIDOMNode *node)
     1: {
     1:   NS_PRECONDITION(node, "null parent passed to nsHTMLEditUtils::HasMozAttr");
     1:   nsCOMPtr<nsIDOMElement> elem = do_QueryInterface(node);
     1:   if (elem)
     1:   {
     1:     nsAutoString typeAttrVal;
     1:     nsresult res = elem->GetAttribute(NS_LITERAL_STRING("type"), typeAttrVal);
     1:     if (NS_SUCCEEDED(res) && (typeAttrVal.LowerCaseEqualsLiteral("_moz")))
 80486:       return true;
     1:   }
 80486:   return false;
     1: }
     1: 
     1: 
     1: ///////////////////////////////////////////////////////////////////////////
     1: // nsAutoEditInitRulesTrigger methods
     1: //
     1: nsAutoEditInitRulesTrigger::nsAutoEditInitRulesTrigger( nsPlaintextEditor *aEd, nsresult &aRes) : mEd(aEd), mRes(aRes)
     1: {
     1:     if (mEd) mEd->BeginEditorInit();
     1: }
     1: 
     1: nsAutoEditInitRulesTrigger::~nsAutoEditInitRulesTrigger()
     1: {
     1:     if (mEd) mRes = mEd->EndEditorInit();
     1: }
     1: 
