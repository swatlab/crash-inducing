29783: /*
29783:  * Copyright (c) 2009 Mozilla Foundation
29783:  *
29783:  * Permission is hereby granted, free of charge, to any person obtaining a 
29783:  * copy of this software and associated documentation files (the "Software"), 
29783:  * to deal in the Software without restriction, including without limitation 
29783:  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
29783:  * and/or sell copies of the Software, and to permit persons to whom the 
29783:  * Software is furnished to do so, subject to the following conditions:
29783:  *
29783:  * The above copyright notice and this permission notice shall be included in 
29783:  * all copies or substantial portions of the Software.
29783:  *
29783:  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
29783:  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
29783:  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
29783:  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
29783:  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
29783:  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
29783:  * DEALINGS IN THE SOFTWARE.
29783:  */
29783: 
29783: package nu.validator.htmlparser.impl;
29783: 
29783: 
39864: public class StateSnapshot<T> implements TreeBuilderState<T> {
39864: 
39864:     private final StackNode<T>[] stack;
39864: 
39864:     private final StackNode<T>[] listOfActiveFormattingElements;
39864: 
39864:     private final T formPointer;
39864: 
39864:     private final T headPointer;
39864: 
53890:     private final T deepTreeSurrogateParent;
53890: 
39864:     private final int mode;
39864: 
39864:     private final int originalMode;
39864:     
39864:     private final boolean framesetOk;
39864: 
41449:     private final boolean inForeign;
39864: 
39864:     private final boolean needToDropLF;
39864: 
39864:     private final boolean quirks;
29783: 
29783:     /**
29783:      * @param stack
29783:      * @param listOfActiveFormattingElements
29783:      * @param formPointer
39864:      * @param quirks 
39864:      * @param needToDropLF 
39864:      * @param foreignFlag 
39864:      * @param originalMode 
39864:      * @param mode 
29783:      */
29783:     StateSnapshot(StackNode<T>[] stack,
53890:             StackNode<T>[] listOfActiveFormattingElements, T formPointer, T headPointer, T deepTreeSurrogateParent, int mode, int originalMode, boolean framesetOk, boolean inForeign, boolean needToDropLF, boolean quirks) {
29783:         this.stack = stack;
29783:         this.listOfActiveFormattingElements = listOfActiveFormattingElements;
29783:         this.formPointer = formPointer;
39864:         this.headPointer = headPointer;
53890:         this.deepTreeSurrogateParent = deepTreeSurrogateParent;
39864:         this.mode = mode;
39864:         this.originalMode = originalMode;
39864:         this.framesetOk = framesetOk;
41449:         this.inForeign = inForeign;
39864:         this.needToDropLF = needToDropLF;
39864:         this.quirks = quirks;
29783:     }
29783:     
39864:     /**
39864:      * @see nu.validator.htmlparser.impl.TreeBuilderState#getStack()
39864:      */
39864:     public StackNode<T>[] getStack() {
39864:         return stack;
39864:     }
29783: 
39864:     /**
39864:      * @see nu.validator.htmlparser.impl.TreeBuilderState#getListOfActiveFormattingElements()
39864:      */
39864:     public StackNode<T>[] getListOfActiveFormattingElements() {
39864:         return listOfActiveFormattingElements;
39864:     }
29783: 
39864:     /**
39864:      * @see nu.validator.htmlparser.impl.TreeBuilderState#getFormPointer()
39864:      */
39864:     public T getFormPointer() {
39864:         return formPointer;
39864:     }
39864: 
39864:     /**
39864:      * Returns the headPointer.
39864:      * 
39864:      * @return the headPointer
39864:      */
39864:     public T getHeadPointer() {
39864:         return headPointer;
39864:     }
39864: 
39864:     /**
53890:      * Returns the deepTreeSurrogateParent.
53890:      * 
53890:      * @return the deepTreeSurrogateParent
53890:      */
53890:     public T getDeepTreeSurrogateParent() {
53890:         return deepTreeSurrogateParent;
53890:     }
53890:     
53890:     /**
39864:      * Returns the mode.
39864:      * 
39864:      * @return the mode
39864:      */
39864:     public int getMode() {
39864:         return mode;
39864:     }
39864: 
39864:     /**
39864:      * Returns the originalMode.
39864:      * 
39864:      * @return the originalMode
39864:      */
39864:     public int getOriginalMode() {
39864:         return originalMode;
39864:     }
39864: 
39864:     /**
39864:      * Returns the framesetOk.
39864:      * 
39864:      * @return the framesetOk
39864:      */
39864:     public boolean isFramesetOk() {
39864:         return framesetOk;
39864:     }
39864: 
39864:     /**
41449:      * Returns the inForeign.
39864:      * 
41449:      * @return the inForeign
39864:      */
41449:     public boolean isInForeign() {
41449:         return inForeign;
39864:     }
39864: 
39864:     /**
39864:      * Returns the needToDropLF.
39864:      * 
39864:      * @return the needToDropLF
39864:      */
39864:     public boolean isNeedToDropLF() {
39864:         return needToDropLF;
39864:     }
39864: 
39864:     /**
39864:      * Returns the quirks.
39864:      * 
39864:      * @return the quirks
39864:      */
39864:     public boolean isQuirks() {
39864:         return quirks;
39864:     }
39864:     
39864:     /**
40984:      * @see nu.validator.htmlparser.impl.TreeBuilderState#getListOfActiveFormattingElementsLength()
39864:      */
40984:     public int getListOfActiveFormattingElementsLength() {
39864:         return listOfActiveFormattingElements.length;
39864:     }
39864: 
39864:     /**
39864:      * @see nu.validator.htmlparser.impl.TreeBuilderState#getStackLength()
39864:      */
39864:     public int getStackLength() {
39864:         return stack.length;
39864:     }
29783: 
29783:     @SuppressWarnings("unused") private void destructor() {
29783:         for (int i = 0; i < stack.length; i++) {
29783:             stack[i].release();
29783:         }
29783:         Portability.releaseArray(stack);
29783:         for (int i = 0; i < listOfActiveFormattingElements.length; i++) {
29783:             if (listOfActiveFormattingElements[i] != null) {
29783:                 listOfActiveFormattingElements[i].release();                
29783:             }
29783:         }
29783:         Portability.releaseArray(listOfActiveFormattingElements);
29783:         Portability.retainElement(formPointer);
29783:     }
29783: }
