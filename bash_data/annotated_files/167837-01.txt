     1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsSupportsPrimitives.h"
     1: #include "nsMemory.h"
     1: #include "prprf.h"
     1: 
167837: using mozilla::fallible_t;
167837: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsIDImpl, nsISupportsID, nsISupportsPrimitive)
 12033: 
     1: nsSupportsIDImpl::nsSupportsIDImpl()
106838:     : mData(nullptr)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsIDImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_ID;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsIDImpl::GetData(nsID **aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     if(mData)
     1:     {
     1:         *aData = (nsID*) nsMemory::Clone(mData, sizeof(nsID));
     1:         return *aData ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1:     }
106838:     *aData = nullptr;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsIDImpl::SetData(const nsID *aData)
     1: {
     1:     if(mData)
     1:       nsMemory::Free(mData);
     1:     if(aData)
     1:         mData = (nsID*) nsMemory::Clone(aData, sizeof(nsID));
     1:     else
106838:         mData = nullptr;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsIDImpl::ToString(char **_retval)
     1: {
     1:     char* result;
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     if(mData)
     1:     {
     1:         result = mData->ToString();
     1:     }
     1:     else
     1:     {
     1:         static const char nullStr[] = "null";
     1:         result = (char*) nsMemory::Clone(nullStr, sizeof(nullStr));
     1:     }
     1: 
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /*****************************************************************************
     1:  * nsSupportsCStringImpl
     1:  *****************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsCStringImpl, nsISupportsCString,
 12033:                    nsISupportsPrimitive)
 12033: 
108991: NS_IMETHODIMP nsSupportsCStringImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1: 
     1:     *aType = TYPE_CSTRING;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCStringImpl::GetData(nsACString& aData)
     1: {
     1:     aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCStringImpl::ToString(char **_retval)
     1: {
     1:     *_retval = ToNewCString(mData);
     1: 
     1:     if (!*_retval)
     1:         return NS_ERROR_OUT_OF_MEMORY;
     1:     
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCStringImpl::SetData(const nsACString& aData)
     1: {
167837:     bool ok = mData.Assign(aData, fallible_t());
167837:     if (!ok)
167837:         return NS_ERROR_OUT_OF_MEMORY;
     1:     return NS_OK;
     1: }
     1: 
     1: /*****************************************************************************
     1:  * nsSupportsStringImpl
     1:  *****************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsStringImpl, nsISupportsString,
 12033:                    nsISupportsPrimitive)
 12033: 
108991: NS_IMETHODIMP nsSupportsStringImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1: 
     1:     *aType = TYPE_STRING;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsStringImpl::GetData(nsAString& aData)
     1: {
     1:     aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsStringImpl::ToString(PRUnichar **_retval)
     1: {
     1:     *_retval = ToNewUnicode(mData);
     1:     
     1:     if (!*_retval)
     1:         return NS_ERROR_OUT_OF_MEMORY;
     1:     
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsStringImpl::SetData(const nsAString& aData)
     1: {
167837:     bool ok = mData.Assign(aData, fallible_t());
167837:     if (!ok)
167837:         return NS_ERROR_OUT_OF_MEMORY;
     1:     return NS_OK;
     1: }
     1: 
     1: /***************************************************************************/
     1: 
152792: NS_IMPL_ISUPPORTS2(nsSupportsPRBoolImpl, nsISupportsPRBool,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRBoolImpl::nsSupportsPRBoolImpl()
 80486:     : mData(false)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRBoolImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRBOOL;
     1: 
     1:     return NS_OK;
     1: }
     1: 
 79445: NS_IMETHODIMP nsSupportsPRBoolImpl::GetData(bool *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
 79445: NS_IMETHODIMP nsSupportsPRBoolImpl::SetData(bool aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRBoolImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     const char * str = mData ? "true" : "false";
     1:     char* result = (char*) nsMemory::Clone(str,
     1:                                 (strlen(str)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRUint8Impl, nsISupportsPRUint8,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRUint8Impl::nsSupportsPRUint8Impl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint8Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRUINT8;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint8Impl::GetData(uint8_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint8Impl::SetData(uint8_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRUint8Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 8;
     1:     char buf[size];
     1: 
108991:     PR_snprintf(buf, size, "%u", (uint16_t) mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRUint16Impl, nsISupportsPRUint16,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRUint16Impl::nsSupportsPRUint16Impl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint16Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRUINT16;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint16Impl::GetData(uint16_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint16Impl::SetData(uint16_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRUint16Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 8;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%u", (int) mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRUint32Impl, nsISupportsPRUint32,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRUint32Impl::nsSupportsPRUint32Impl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint32Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRUINT32;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint32Impl::GetData(uint32_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint32Impl::SetData(uint32_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRUint32Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 16;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%lu", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRUint64Impl, nsISupportsPRUint64,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRUint64Impl::nsSupportsPRUint64Impl()
120112:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint64Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRUINT64;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint64Impl::GetData(uint64_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRUint64Impl::SetData(uint64_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRUint64Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 32;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%llu", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRTimeImpl, nsISupportsPRTime,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRTimeImpl::nsSupportsPRTimeImpl()
120112:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRTimeImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRTIME;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRTimeImpl::GetData(PRTime *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRTimeImpl::SetData(PRTime aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRTimeImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 32;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%llu", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsCharImpl, nsISupportsChar,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsCharImpl::nsSupportsCharImpl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsCharImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_CHAR;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCharImpl::GetData(char *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCharImpl::SetData(char aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsCharImpl::ToString(char **_retval)
     1: {
     1:     char* result;
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1: 
106838:     if(nullptr != (result = (char*) nsMemory::Alloc(2*sizeof(char))))
     1:     {
     1:         result[0] = mData;
     1:         result[1] = '\0';
     1:     }
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRInt16Impl, nsISupportsPRInt16,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRInt16Impl::nsSupportsPRInt16Impl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt16Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRINT16;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt16Impl::GetData(int16_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt16Impl::SetData(int16_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRInt16Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 8;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%d", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRInt32Impl, nsISupportsPRInt32,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRInt32Impl::nsSupportsPRInt32Impl()
     1:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt32Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRINT32;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt32Impl::GetData(int32_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt32Impl::SetData(int32_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRInt32Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 16;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%ld", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsPRInt64Impl, nsISupportsPRInt64,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsPRInt64Impl::nsSupportsPRInt64Impl()
120112:     : mData(0)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt64Impl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_PRINT64;
     1: 
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt64Impl::GetData(int64_t *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsPRInt64Impl::SetData(int64_t aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsPRInt64Impl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 32;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%lld", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsFloatImpl, nsISupportsFloat,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsFloatImpl::nsSupportsFloatImpl()
     1:     : mData(float(0.0))
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsFloatImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_FLOAT;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsFloatImpl::GetData(float *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsFloatImpl::SetData(float aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsFloatImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 32;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%f", (double) mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsDoubleImpl, nsISupportsDouble,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsDoubleImpl::nsSupportsDoubleImpl()
     1:     : mData(double(0.0))
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsDoubleImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_DOUBLE;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsDoubleImpl::GetData(double *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsDoubleImpl::SetData(double aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsDoubleImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1:     static const int size = 32;
     1:     char buf[size];
     1: 
     1:     PR_snprintf(buf, size, "%f", mData);
     1: 
     1:     char* result = (char*) nsMemory::Clone(buf,
     1:                                 (strlen(buf)+1)*sizeof(char));
     1:     *_retval = result;
     1:     return  result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
     1: 
152792: NS_IMPL_ISUPPORTS2(nsSupportsVoidImpl, nsISupportsVoid,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsVoidImpl::nsSupportsVoidImpl()
106838:     : mData(nullptr)
     1: {
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsVoidImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_VOID;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsVoidImpl::GetData(void * *aData)
     1: {
     1:     NS_ASSERTION(aData, "Bad pointer");
     1:     *aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsVoidImpl::SetData(void * aData)
     1: {
     1:     mData = aData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsVoidImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1: 
     1:     static const char str[] = "[raw data]";
     1:     char* result = (char*) nsMemory::Clone(str, sizeof(str));
     1:     *_retval = result;
     1:     return  result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }  
     1: 
     1: /***************************************************************************/
     1: 
     1: 
152792: NS_IMPL_ISUPPORTS2(nsSupportsInterfacePointerImpl,
 12033:                    nsISupportsInterfacePointer,
 12033:                    nsISupportsPrimitive)
 12033: 
     1: nsSupportsInterfacePointerImpl::nsSupportsInterfacePointerImpl()
106838:     : mIID(nullptr)
     1: {
     1: }
     1: 
     1: nsSupportsInterfacePointerImpl::~nsSupportsInterfacePointerImpl()
     1: {
     1:     if (mIID) {
     1:         nsMemory::Free(mIID);
     1:     }
     1: }
     1: 
108991: NS_IMETHODIMP nsSupportsInterfacePointerImpl::GetType(uint16_t *aType)
     1: {
     1:     NS_ASSERTION(aType, "Bad pointer");
     1:     *aType = TYPE_INTERFACE_POINTER;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsInterfacePointerImpl::GetData(nsISupports **aData)
     1: {
     1:     NS_ASSERTION(aData,"Bad pointer");
     1: 
     1:     *aData = mData;
     1:     NS_IF_ADDREF(*aData);
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsInterfacePointerImpl::SetData(nsISupports * aData)
     1: {
     1:     mData = aData;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsInterfacePointerImpl::GetDataIID(nsID **aIID)
     1: {
     1:     NS_ASSERTION(aIID,"Bad pointer");
     1: 
     1:     if(mIID)
     1:     {
     1:         *aIID = (nsID*) nsMemory::Clone(mIID, sizeof(nsID));
     1:         return *aIID ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1:     }
106838:     *aIID = nullptr;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsInterfacePointerImpl::SetDataIID(const nsID *aIID)
     1: {
     1:     if(mIID)
     1:         nsMemory::Free(mIID);
     1:     if(aIID)
     1:         mIID = (nsID*) nsMemory::Clone(aIID, sizeof(nsID));
     1:     else
106838:         mIID = nullptr;
     1: 
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP nsSupportsInterfacePointerImpl::ToString(char **_retval)
     1: {
     1:     NS_ASSERTION(_retval, "Bad pointer");
     1: 
     1:     static const char str[] = "[interface pointer]";
     1: 
     1:     // jband sez: think about asking nsIInterfaceInfoManager whether
     1:     // the interface has a known human-readable name
     1:     char* result = (char*) nsMemory::Clone(str, sizeof(str));
     1:     *_retval = result;
     1:     return  result ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
     1: }
     1: 
     1: /***************************************************************************/
     1: 
 12033: NS_IMPL_ISUPPORTS2(nsSupportsDependentCString,nsISupportsCString,nsISupportsPrimitive)
 12033: 
     1: nsSupportsDependentCString::nsSupportsDependentCString(const char* aStr)
     1:     : mData(aStr)
     1: { }
     1: 
     1: NS_IMETHODIMP
108991: nsSupportsDependentCString::GetType(uint16_t *aType)
     1: {
     1:     NS_ENSURE_ARG_POINTER(aType);
     1: 
     1:     *aType = TYPE_CSTRING;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsSupportsDependentCString::GetData(nsACString& aData)
     1: {
     1:     aData = mData;
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsSupportsDependentCString::ToString(char **_retval)
     1: {
     1:     NS_ENSURE_ARG_POINTER(_retval);
     1: 
     1:     *_retval = ToNewCString(mData);
     1:     if (!*_retval)
     1:         return NS_ERROR_OUT_OF_MEMORY;
     1:     
     1:     return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsSupportsDependentCString::SetData(const nsACString& aData)
     1: {
     1:     return NS_ERROR_NOT_IMPLEMENTED;
     1: }
