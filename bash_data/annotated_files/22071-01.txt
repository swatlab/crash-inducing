    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim: set ts=2 sw=2 et tw=78: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2000
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Johnny Stenback <jst@netscape.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nscore.h"
    1: #include "nsDOMClassInfo.h"
    1: #include "nsCRT.h"
    1: #include "nsCRTGlue.h"
    1: #include "nsIServiceManager.h"
    1: #include "nsICategoryManager.h"
    1: #include "nsIComponentRegistrar.h"
    1: #include "nsXPCOM.h"
    1: #include "nsISupportsPrimitives.h"
    1: #include "nsIXPConnect.h"
    1: #include "nsIJSContextStack.h"
    1: #include "nsIXPCSecurityManager.h"
    1: #include "nsIStringBundle.h"
    1: #include "nsIConsoleService.h"
    1: #include "nsIScriptError.h"
    1: #include "nsXPIDLString.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsUnicharUtils.h"
    1: #include "xptcall.h"
    1: #include "prprf.h"
    1: #include "nsTArray.h"
 3645: #include "nsCSSValue.h"
13098: #include "nsIRunnable.h"
13098: #include "nsThreadUtils.h"
    1: 
    1: // JavaScript includes
    1: #include "jsapi.h"
12583: #include "jsprvtd.h"    // we are using private JS typedefs...
12583: #include "jscntxt.h"
12583: #include "jsdbgapi.h"
    1: #include "jsnum.h"
12583: #include "jsscope.h"
    1: 
    1: // General helper includes
    1: #include "nsGlobalWindow.h"
    1: #include "nsIContent.h"
    1: #include "nsIAttribute.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMDocument.h"
    1: #include "nsIDOM3Document.h"
    1: #include "nsIDOMXMLDocument.h"
    1: #include "nsIDOMNSDocument.h"
    1: #include "nsIDOMEvent.h"
    1: #include "nsIDOMNSEvent.h"
    1: #include "nsIDOMKeyEvent.h"
    1: #include "nsIDOMEventListener.h"
    1: #include "nsContentUtils.h"
    1: #include "nsDOMWindowUtils.h"
    1: 
    1: // Window scriptable helper includes
    1: #include "nsIDocShell.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIDocShellTreeNode.h"
    1: #include "nsIScriptExternalNameSet.h"
    1: #include "nsJSUtils.h"
    1: #include "nsIInterfaceRequestor.h"
    1: #include "nsIInterfaceRequestorUtils.h"
    1: #include "nsScriptNameSpaceManager.h"
    1: #include "nsIScriptObjectOwner.h"
    1: #include "nsIJSNativeInitializer.h"
 7941: #include "nsJSEnvironment.h"
    1: 
    1: // DOM base includes
    1: #include "nsIDOMPluginArray.h"
    1: #include "nsIDOMPlugin.h"
    1: #include "nsIDOMMimeTypeArray.h"
    1: #include "nsIDOMMimeType.h"
    1: #include "nsIDOMLocation.h"
    1: #include "nsIDOMWindowInternal.h"
    1: #include "nsPIDOMWindow.h"
    1: #include "nsIDOMJSWindow.h"
    1: #include "nsIDOMWindowCollection.h"
    1: #include "nsIDOMHistory.h"
    1: #include "nsIDOMMediaList.h"
    1: #include "nsIDOMChromeWindow.h"
    1: #include "nsIDOMConstructor.h"
20752: #include "nsClientRect.h"
    1: 
    1: // DOM core includes
    1: #include "nsDOMError.h"
    1: #include "nsIDOMDOMException.h"
    1: #include "nsIDOMNode.h"
    1: #include "nsIDOM3Node.h"
    1: #include "nsIDOM3Attr.h"
    1: #include "nsIDOMNodeList.h"
    1: #include "nsIDOMNamedNodeMap.h"
    1: #include "nsIDOMDOMStringList.h"
    1: #include "nsIDOMNameList.h"
    1: #include "nsIDOMNSElement.h"
    1: 
    1: // HTMLFormElement helper includes
    1: #include "nsIForm.h"
    1: #include "nsIFormControl.h"
    1: #include "nsIDOMHTMLFormElement.h"
    1: #include "nsIDOMNSHTMLFormControlList.h"
    1: #include "nsIDOMHTMLCollection.h"
20752: #include "nsIHTMLCollection.h"
 9596: #include "nsHTMLDocument.h"
    1: 
    1: // HTMLSelectElement helper includes
    1: #include "nsIDOMHTMLSelectElement.h"
    1: #include "nsIDOMNSXBLFormControl.h"
    1: 
    1: // HTMLEmbed/ObjectElement helper includes
    1: #include "nsIPluginInstance.h"
    1: #include "nsIPluginInstanceInternal.h"
    1: #include "nsIObjectFrame.h"
    1: #include "nsIObjectLoadingContent.h"
    1: #include "nsIScriptablePlugin.h"
    1: #include "nsIPluginHost.h"
    1: #include "nsPIPluginHost.h"
    1: 
    1: #ifdef OJI
    1: // HTMLAppletElement helper includes
    1: #include "nsIJVMManager.h"
    1: #include "nsILiveConnectManager.h"
    1: #include "nsIJVMPluginInstance.h"
    1: #endif
    1: 
21297: // Oh, did I mention that I hate Microsoft for doing this to me?
21303: #ifdef XP_WIN
21297: #undef GetClassName
21297: #endif
21297: 
21297: 
    1: // HTMLOptionsCollection includes
    1: #include "nsIDOMHTMLOptionElement.h"
    1: #include "nsIDOMNSHTMLOptionElement.h"
    1: #include "nsIDOMHTMLOptionsCollection.h"
    1: #include "nsIDOMNSHTMLOptionCollectn.h"
    1: #include "nsIDOMHTMLOptionsCollection.h"
    1: 
    1: // ContentList includes
    1: #include "nsContentList.h"
21618: #include "nsGenericElement.h"
    1: 
    1: // Event related includes
    1: #include "nsIEventListenerManager.h"
 1418: #include "nsIDOMEventTarget.h"
    1: #include "nsIDOMNSEventTarget.h"
    1: 
    1: // CSS related includes
    1: #include "nsIDOMStyleSheet.h"
    1: #include "nsIDOMStyleSheetList.h"
    1: #include "nsIDOMCSSStyleDeclaration.h"
    1: #include "nsIDOMCSSRule.h"
20752: #include "nsICSSRule.h"
20752: #include "nsICSSRuleList.h"
    1: #include "nsIDOMRect.h"
    1: #include "nsIDOMRGBColor.h"
    1: #include "nsIDOMNSRGBAColor.h"
    1: 
    1: // XBL related includes.
    1: #include "nsIXBLService.h"
    1: #include "nsXBLBinding.h"
    1: #include "nsBindingManager.h"
    1: #include "nsIFrame.h"
    1: #include "nsIPresShell.h"
    1: #include "nsIDOMViewCSS.h"
    1: #include "nsIDOMElement.h"
    1: #include "nsIDOMCSSStyleDeclaration.h"
    1: #include "nsIScriptGlobalObject.h"
    1: #include "nsStyleSet.h"
    1: #include "nsStyleContext.h"
    1: #include "nsAutoPtr.h"
    1: #include "nsMemory.h"
    1: 
    1: // Tranformiix
    1: #include "nsIDOMXPathEvaluator.h"
    1: #include "nsIXSLTProcessor.h"
    1: #include "nsIXSLTProcessorObsolete.h"
    1: #include "nsIXSLTProcessorPrivate.h"
    1: 
    1: #include "nsIDOMLSProgressEvent.h"
    1: #include "nsIDOMParser.h"
    1: #include "nsIDOMSerializer.h"
21618: #include "nsXMLHttpRequest.h"
    1: 
    1: // includes needed for the prototype chain interfaces
    1: #include "nsIDOMNavigator.h"
    1: #include "nsIDOMBarProp.h"
    1: #include "nsIDOMScreen.h"
    1: #include "nsIDOMDocumentType.h"
    1: #include "nsIDOMDOMImplementation.h"
    1: #include "nsIDOMDocumentFragment.h"
    1: #include "nsIDOMDocumentEvent.h"
    1: #include "nsIDOMAttr.h"
    1: #include "nsIDOMText.h"
15250: #include "nsIDOM3Text.h"
    1: #include "nsIDOMComment.h"
    1: #include "nsIDOMCDATASection.h"
    1: #include "nsIDOMProcessingInstruction.h"
    1: #include "nsIDOMNotation.h"
    1: #include "nsIDOMNSEvent.h"
 8868: #include "nsIDOMDataContainerEvent.h"
    1: #include "nsIDOMKeyEvent.h"
    1: #include "nsIDOMMouseEvent.h"
16604: #include "nsIDOMMouseScrollEvent.h"
18445: #include "nsIDOMDragEvent.h"
    1: #include "nsIDOMCommandEvent.h"
    1: #include "nsIDOMPopupBlockedEvent.h"
    1: #include "nsIDOMBeforeUnloadEvent.h"
    1: #include "nsIDOMMutationEvent.h"
    1: #include "nsIDOMSmartCardEvent.h"
    1: #include "nsIDOMXULCommandEvent.h"
    1: #include "nsIDOMPageTransitionEvent.h"
10976: #include "nsIDOMMessageEvent.h"
19380: #include "nsIDOMNotifyPaintEvent.h"
    1: #include "nsIDOMNSDocumentStyle.h"
    1: #include "nsIDOMDocumentRange.h"
    1: #include "nsIDOMDocumentTraversal.h"
    1: #include "nsIDOMDocumentXBL.h"
    1: #include "nsIDOMDocumentView.h"
    1: #include "nsIDOMElementCSSInlineStyle.h"
    1: #include "nsIDOMLinkStyle.h"
    1: #include "nsIDOMHTMLDocument.h"
    1: #include "nsIDOMNSHTMLDocument.h"
    1: #include "nsIDOMNSHTMLElement.h"
    1: #include "nsIDOMHTMLAnchorElement.h"
    1: #include "nsIDOMNSHTMLAnchorElement2.h"
    1: #include "nsIDOMHTMLAppletElement.h"
    1: #include "nsIDOMHTMLAreaElement.h"
    1: #include "nsIDOMNSHTMLAreaElement2.h"
    1: #include "nsIDOMHTMLBRElement.h"
    1: #include "nsIDOMHTMLBaseElement.h"
    1: #include "nsIDOMHTMLBaseFontElement.h"
    1: #include "nsIDOMHTMLBodyElement.h"
    1: #include "nsIDOMHTMLButtonElement.h"
    1: #include "nsIDOMNSHTMLButtonElement.h"
    1: #include "nsIDOMHTMLCanvasElement.h"
    1: #include "nsIDOMHTMLDListElement.h"
    1: #include "nsIDOMHTMLDirectoryElement.h"
    1: #include "nsIDOMHTMLDivElement.h"
    1: #include "nsIDOMHTMLEmbedElement.h"
    1: #include "nsIDOMHTMLFieldSetElement.h"
    1: #include "nsIDOMHTMLFontElement.h"
    1: #include "nsIDOMNSHTMLFormElement.h"
    1: #include "nsIDOMHTMLFrameElement.h"
    1: #include "nsIDOMHTMLFrameSetElement.h"
    1: #include "nsIDOMNSHTMLFrameElement.h"
    1: #include "nsIDOMHTMLHRElement.h"
    1: #include "nsIDOMNSHTMLHRElement.h"
    1: #include "nsIDOMHTMLHeadElement.h"
    1: #include "nsIDOMHTMLHeadingElement.h"
    1: #include "nsIDOMHTMLHtmlElement.h"
    1: #include "nsIDOMHTMLIFrameElement.h"
    1: #include "nsIDOMHTMLImageElement.h"
    1: #include "nsIDOMNSHTMLImageElement.h"
    1: #include "nsIDOMHTMLInputElement.h"
    1: #include "nsIDOMNSHTMLInputElement.h"
    1: #include "nsIDOMHTMLIsIndexElement.h"
    1: #include "nsIDOMHTMLLIElement.h"
    1: #include "nsIDOMHTMLLabelElement.h"
    1: #include "nsIDOMHTMLLegendElement.h"
    1: #include "nsIDOMHTMLLinkElement.h"
    1: #include "nsIDOMHTMLMapElement.h"
    1: #include "nsIDOMHTMLMenuElement.h"
    1: #include "nsIDOMHTMLMetaElement.h"
    1: #include "nsIDOMHTMLModElement.h"
    1: #include "nsIDOMHTMLOListElement.h"
    1: #include "nsIDOMHTMLObjectElement.h"
    1: #include "nsIDOMHTMLOptGroupElement.h"
    1: #include "nsIDOMHTMLParagraphElement.h"
    1: #include "nsIDOMHTMLParamElement.h"
    1: #include "nsIDOMHTMLPreElement.h"
    1: #include "nsIDOMHTMLQuoteElement.h"
    1: #include "nsIDOMHTMLScriptElement.h"
    1: #include "nsIDOMNSHTMLSelectElement.h"
    1: #include "nsIDOMHTMLStyleElement.h"
    1: #include "nsIDOMHTMLTableCaptionElem.h"
    1: #include "nsIDOMHTMLTableCellElement.h"
    1: #include "nsIDOMHTMLTableColElement.h"
    1: #include "nsIDOMHTMLTableElement.h"
    1: #include "nsIDOMHTMLTableRowElement.h"
    1: #include "nsIDOMHTMLTableSectionElem.h"
    1: #include "nsIDOMHTMLTextAreaElement.h"
    1: #include "nsIDOMNSHTMLTextAreaElement.h"
    1: #include "nsIDOMHTMLTitleElement.h"
    1: #include "nsIDOMHTMLUListElement.h"
15751: #if defined(MOZ_MEDIA)
15751: #include "nsIDOMHTMLMediaError.h"
15751: #include "nsIDOMHTMLSourceElement.h"
15751: #include "nsIDOMHTMLVideoElement.h"
15751: #include "nsIDOMHTMLAudioElement.h"
16665: #endif
15751: #include "nsIDOMProgressEvent.h"
    1: #include "nsIDOMNSUIEvent.h"
    1: #include "nsIDOMCSS2Properties.h"
    1: #include "nsIDOMCSSCharsetRule.h"
    1: #include "nsIDOMCSSImportRule.h"
    1: #include "nsIDOMCSSMediaRule.h"
16545: #include "nsIDOMCSSFontFaceRule.h"
    1: #include "nsIDOMCSSMozDocumentRule.h"
    1: #include "nsIDOMCSSPrimitiveValue.h"
    1: #include "nsIDOMCSSStyleRule.h"
    1: #include "nsIDOMCSSStyleSheet.h"
20752: #include "nsDOMCSSValueList.h"
    1: #include "nsIDOMRange.h"
    1: #include "nsIDOMNSRange.h"
    1: #include "nsIDOMRangeException.h"
16103: #include "nsIDOMNodeIterator.h"
    1: #include "nsIDOMTreeWalker.h"
    1: #include "nsIDOMXULDocument.h"
    1: #include "nsIDOMXULElement.h"
    1: #include "nsIDOMXULCommandDispatcher.h"
    1: #include "nsIDOMCrypto.h"
    1: #include "nsIDOMCRMFObject.h"
    1: #include "nsIDOMPkcs11.h"
    1: #include "nsIControllers.h"
    1: #include "nsISelection.h"
    1: #include "nsIBoxObject.h"
    1: #ifdef MOZ_XUL
    1: #include "nsITreeSelection.h"
    1: #include "nsITreeContentView.h"
    1: #include "nsITreeView.h"
    1: #include "nsIXULTemplateBuilder.h"
20752: #include "nsTreeColumns.h"
    1: #endif
    1: #include "nsIDOMXPathException.h"
    1: #include "nsIDOMXPathExpression.h"
    1: #include "nsIDOMNSXPathExpression.h"
    1: #include "nsIDOMXPathNSResolver.h"
    1: #include "nsIDOMXPathResult.h"
    1: 
    1: #ifdef MOZ_SVG
    1: #include "nsIDOMGetSVGDocument.h"
    1: #include "nsIDOMSVGAElement.h"
    1: #include "nsIDOMSVGAngle.h"
    1: #include "nsIDOMSVGAnimatedAngle.h"
 2863: #include "nsIDOMSVGAnimatedBoolean.h"
    1: #include "nsIDOMSVGAnimatedEnum.h"
    1: #include "nsIDOMSVGAnimatedInteger.h"
    1: #include "nsIDOMSVGAnimatedLength.h"
    1: #include "nsIDOMSVGAnimatedLengthList.h"
    1: #include "nsIDOMSVGAnimatedNumber.h"
    1: #include "nsIDOMSVGAnimatedNumberList.h"
    1: #include "nsIDOMSVGAnimatedPathData.h"
    1: #include "nsIDOMSVGAnimatedPoints.h"
    1: #include "nsIDOMSVGAnimPresAspRatio.h"
    1: #include "nsIDOMSVGAnimatedRect.h"
    1: #include "nsIDOMSVGAnimatedString.h"
    1: #include "nsIDOMSVGAnimTransformList.h"
    1: #include "nsIDOMSVGCircleElement.h"
    1: #include "nsIDOMSVGClipPathElement.h"
    1: #include "nsIDOMSVGDefsElement.h"
    1: #include "nsIDOMSVGDescElement.h"
    1: #include "nsIDOMSVGDocument.h"
    1: #include "nsIDOMSVGElement.h"
    1: #include "nsIDOMSVGEllipseElement.h"
    1: #include "nsIDOMSVGEvent.h"
    1: #include "nsIDOMSVGException.h"
    1: #include "nsIDOMSVGFilterElement.h"
    1: #include "nsIDOMSVGFilters.h"
    1: #include "nsIDOMSVGFitToViewBox.h"
    1: #include "nsIDOMSVGForeignObjectElem.h"
    1: #include "nsIDOMSVGGElement.h"
    1: #include "nsIDOMSVGGradientElement.h"
    1: #include "nsIDOMSVGImageElement.h"
    1: #include "nsIDOMSVGLength.h"
    1: #include "nsIDOMSVGLengthList.h"
    1: #include "nsIDOMSVGLineElement.h"
    1: #include "nsIDOMSVGLocatable.h"
    1: #include "nsIDOMSVGMarkerElement.h"
    1: #include "nsIDOMSVGMaskElement.h"
    1: #include "nsIDOMSVGMatrix.h"
    1: #include "nsIDOMSVGMetadataElement.h"
    1: #include "nsIDOMSVGNumber.h"
    1: #include "nsIDOMSVGNumberList.h"
    1: #include "nsIDOMSVGPathElement.h"
    1: #include "nsIDOMSVGPathSeg.h"
    1: #include "nsIDOMSVGPathSegList.h"
    1: #include "nsIDOMSVGPatternElement.h"
    1: #include "nsIDOMSVGPoint.h"
    1: #include "nsIDOMSVGPointList.h"
    1: #include "nsIDOMSVGPolygonElement.h"
    1: #include "nsIDOMSVGPolylineElement.h"
    1: #include "nsIDOMSVGPresAspectRatio.h"
    1: #include "nsIDOMSVGRect.h"
    1: #include "nsIDOMSVGRectElement.h"
    1: #include "nsIDOMSVGScriptElement.h"
    1: #include "nsIDOMSVGStopElement.h"
    1: #include "nsIDOMSVGStylable.h"
    1: #include "nsIDOMSVGStyleElement.h"
    1: #include "nsIDOMSVGSVGElement.h"
    1: #include "nsIDOMSVGSwitchElement.h"
    1: #include "nsIDOMSVGSymbolElement.h"
    1: #include "nsIDOMSVGTextElement.h"
    1: #include "nsIDOMSVGTextPathElement.h"
    1: #include "nsIDOMSVGTitleElement.h"
    1: #include "nsIDOMSVGTransform.h"
    1: #include "nsIDOMSVGTransformable.h"
    1: #include "nsIDOMSVGTransformList.h"
    1: #include "nsIDOMSVGTSpanElement.h"
    1: #include "nsIDOMSVGURIReference.h"
    1: #include "nsIDOMSVGUseElement.h"
 5347: #include "nsIDOMSVGUnitTypes.h"
    1: #include "nsIDOMSVGZoomAndPan.h"
    1: #include "nsIDOMSVGZoomEvent.h"
    1: #endif // MOZ_SVG
    1: 
    1: #ifdef MOZ_ENABLE_CANVAS
    1: #include "nsIDOMCanvasRenderingContext2D.h"
    1: #endif
    1: 
    1: #include "nsIImageDocument.h"
    1: 
    1: // Storage includes
21159: #include "nsDOMStorage.h"
    1: 
18445: // Drag and drop
18445: #include "nsIDOMDataTransfer.h"
18445: 
 3254: // Offline includes
 3254: #include "nsIDOMLoadStatus.h"
 3254: #include "nsIDOMLoadStatusEvent.h"
 3254: 
15958: // Geolocation
16677: #include "nsIDOMGeoGeolocation.h"
16677: #include "nsIDOMGeoPosition.h"
16677: #include "nsIDOMGeoPositionError.h"
15958: 
21376: // Workers
21376: #include "nsDOMWorker.h"
21376: 
20752: #include "nsDOMFile.h"
 3940: #include "nsIDOMFileException.h"
 3940: 
20793: // Simple gestures include
20793: #include "nsIDOMSimpleGestureEvent.h"
20793: 
    1: static NS_DEFINE_CID(kCPluginManagerCID, NS_PLUGINMANAGER_CID);
    1: static NS_DEFINE_CID(kDOMSOF_CID, NS_DOM_SCRIPT_OBJECT_FACTORY_CID);
    1: 
    1: static const char kDOMStringBundleURL[] =
    1:   "chrome://global/locale/dom/dom.properties";
    1: 
    1: // NOTE: DEFAULT_SCRIPTABLE_FLAGS and DOM_DEFAULT_SCRIPTABLE_FLAGS
    1: //       are defined in nsIDOMClassInfo.h.
    1: 
    1: #define WINDOW_SCRIPTABLE_FLAGS                                               \
    1:  (nsIXPCScriptable::WANT_GETPROPERTY |                                        \
    1:   nsIXPCScriptable::WANT_SETPROPERTY |                                        \
    1:   nsIXPCScriptable::WANT_PRECREATE |                                          \
    1:   nsIXPCScriptable::WANT_ADDPROPERTY |                                        \
    1:   nsIXPCScriptable::WANT_DELPROPERTY |                                        \
    1:   nsIXPCScriptable::WANT_NEWENUMERATE |                                       \
    1:   nsIXPCScriptable::WANT_FINALIZE |                                           \
    1:   nsIXPCScriptable::WANT_EQUALITY |                                           \
    1:   nsIXPCScriptable::WANT_OUTER_OBJECT |                                       \
    1:   nsIXPCScriptable::WANT_INNER_OBJECT |                                       \
    1:   nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE)
    1: 
    1: #define NODE_SCRIPTABLE_FLAGS                                                 \
    1:  ((DOM_DEFAULT_SCRIPTABLE_FLAGS |                                             \
    1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_ADDPROPERTY |                                       \
21618:    nsIXPCScriptable::WANT_SETPROPERTY |                                       \
21618:    nsIXPCScriptable::WANT_FINALIZE) &                                         \
    1:   ~nsIXPCScriptable::USE_JSSTUB_FOR_ADDPROPERTY)
    1: 
    1: // We need to let JavaScript QI elements to interfaces that are not in
    1: // the classinfo since XBL can be used to dynamically implement new
    1: // unknown interfaces on elements, accessibility relies on this being
    1: // possible.
    1: 
    1: #define ELEMENT_SCRIPTABLE_FLAGS                                              \
 6392:   ((NODE_SCRIPTABLE_FLAGS & ~nsIXPCScriptable::CLASSINFO_INTERFACES_ONLY) |   \
 6392:    nsIXPCScriptable::WANT_ENUMERATE)
    1: 
    1: #define EXTERNAL_OBJ_SCRIPTABLE_FLAGS                                         \
20773:   ((ELEMENT_SCRIPTABLE_FLAGS &                                                \
20773:     ~nsIXPCScriptable::USE_JSSTUB_FOR_SETPROPERTY) |                          \
    1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_SETPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_CALL)
    1: 
    1: #define DOCUMENT_SCRIPTABLE_FLAGS                                             \
    1:   (NODE_SCRIPTABLE_FLAGS |                                                    \
    1:    nsIXPCScriptable::WANT_ADDPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_DELPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
21618:    nsIXPCScriptable::WANT_ENUMERATE)
    1: 
    1: #define ARRAY_SCRIPTABLE_FLAGS                                                \
    1:   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
    1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
    1:    nsIXPCScriptable::WANT_ENUMERATE)
    1: 
21618: #define NODELIST_SCRIPTABLE_FLAGS                                             \
21618:   (ARRAY_SCRIPTABLE_FLAGS             |                                       \
21618:    nsIXPCScriptable::WANT_FINALIZE)
21618: 
21618: #define EVENTTARGET_SCRIPTABLE_FLAGS                                          \
21618:   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
21618:    nsIXPCScriptable::WANT_ADDPROPERTY |                                       \
21618:    nsIXPCScriptable::WANT_FINALIZE)
21618: 
    1: #define DOMCLASSINFO_STANDARD_FLAGS                                           \
    1:   (nsIClassInfo::MAIN_THREAD_ONLY | nsIClassInfo::DOM_OBJECT)
    1: 
    1: 
    1: #ifdef NS_DEBUG
    1: #define NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                \
    1:     eDOMClassInfo_##_class##_id,
    1: #else
    1: #define NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                \
    1:   // nothing
    1: #endif
    1: 
    1: 
    1: #define NS_DEFINE_CLASSINFO_DATA_WITH_NAME(_class, _name, _helper,            \
    1:                                            _flags)                            \
    1:   { #_name,                                                                   \
    1:     { _helper::doCreate },                                                    \
    1:     nsnull,                                                                   \
    1:     nsnull,                                                                   \
    1:     nsnull,                                                                   \
    1:     _flags,                                                                   \
    1:     PR_TRUE,                                                                  \
    1:     NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                    \
    1:   },
    1: 
    1: #define NS_DEFINE_CLASSINFO_DATA(_class, _helper, _flags)                     \
    1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(_class, _class, _helper, _flags)
    1: 
    1: 
    1: // This list of NS_DEFINE_CLASSINFO_DATA macros is what gives the DOM
    1: // classes their correct behavior when used through XPConnect. The
    1: // arguments that are passed to NS_DEFINE_CLASSINFO_DATA are
    1: //
    1: // 1. Class name as it should appear in JavaScript, this name is also
    1: //    used to find the id of the class in nsDOMClassInfo
    1: //    (i.e. e<classname>_id)
    1: // 2. Scriptable helper class
    1: // 3. nsIClassInfo/nsIXPCScriptable flags (i.e. for GetScriptableFlags)
    1: 
    1: static nsDOMClassInfoData sClassInfoData[] = {
    1:   // Base classes
    1: 
    1:   // The Window class lets you QI into interfaces that are not in the
    1:   // flattened set (i.e. nsIXPCScriptable::CLASSINFO_INTERFACES_ONLY
    1:   // is not set), because of this make sure all scriptable interfaces
    1:   // that are implemented by nsGlobalWindow can securely be exposed
    1:   // to JS.
    1: 
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(Window, nsWindowSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS |
    1:                            WINDOW_SCRIPTABLE_FLAGS)
    1: 
    1:   // Don't allow modifications to Location.prototype
    1:   NS_DEFINE_CLASSINFO_DATA(Location, nsLocationSH,
    1:                            (DOM_DEFAULT_SCRIPTABLE_FLAGS |
    1:                             nsIXPCScriptable::WANT_PRECREATE) &
    1:                            ~nsIXPCScriptable::ALLOW_PROP_MODS_TO_PROTOTYPE)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(Navigator, nsNavigatorSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
    1:                            nsIXPCScriptable::WANT_PRECREATE)
    1:   NS_DEFINE_CLASSINFO_DATA(Plugin, nsPluginSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(PluginArray, nsPluginArraySH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(MimeType, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(MimeTypeArray, nsMimeTypeArraySH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(BarProp, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(History, nsHistorySH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Screen, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 7842:   NS_DEFINE_CLASSINFO_DATA(DOMPrototype, nsDOMConstructorSH,
 1312:                            DOM_BASE_SCRIPTABLE_FLAGS |
 2389:                            nsIXPCScriptable::WANT_HASINSTANCE |
 2389:                            nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE)
 7842:   NS_DEFINE_CLASSINFO_DATA(DOMConstructor, nsDOMConstructorSH,
 1312:                            DOM_BASE_SCRIPTABLE_FLAGS |
 1312:                            nsIXPCScriptable::WANT_HASINSTANCE |
 1312:                            nsIXPCScriptable::WANT_CALL |
 2389:                            nsIXPCScriptable::WANT_CONSTRUCT |
 2389:                            nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE)
    1: 
    1:   // Core classes
    1:   NS_DEFINE_CLASSINFO_DATA(XMLDocument, nsDocumentSH,
12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(DocumentType, nsNodeSH,
    1:                            NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(DOMImplementation, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(DOMException, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(DocumentFragment, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Element, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Attr, nsAttributeSH,
20379:                            NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Text, nsNodeSH,
    1:                            NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Comment, nsNodeSH,
    1:                            NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CDATASection, nsNodeSH, NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(ProcessingInstruction, nsNodeSH,
    1:                            NODE_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Notation, nsNodeSH, NODE_SCRIPTABLE_FLAGS)
21618:   NS_DEFINE_CLASSINFO_DATA(NodeList, nsNodeListSH, NODELIST_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(NamedNodeMap, nsNamedNodeMapSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1: 
    1:   // Misc Core related classes
    1: 
    1:   // StyleSheet classes
    1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(DocumentStyleSheetList, StyleSheetList,
    1:                                      nsStyleSheetListSH,
    1:                                      ARRAY_SCRIPTABLE_FLAGS)
    1: 
    1:   // Event
    1:   NS_DEFINE_CLASSINFO_DATA(Event, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(MutationEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(UIEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(MouseEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16604:   NS_DEFINE_CLASSINFO_DATA(MouseScrollEvent, nsDOMGenericSH,
16604:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
18445:   NS_DEFINE_CLASSINFO_DATA(DragEvent, nsDOMGenericSH,
18445:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(KeyboardEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(PopupBlockedEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // Misc HTML classes
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLDocument, nsHTMLDocumentSH,
12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLOptionsCollection,
    1:                            nsHTMLOptionsCollectionSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS |
    1:                            nsIXPCScriptable::WANT_SETPROPERTY)
    1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(HTMLFormControlCollection, HTMLCollection,
21159:                                      nsHTMLCollectionSH,
    1:                                      ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(HTMLGenericCollection, HTMLCollection,
    1:                                      nsHTMLCollectionSH,
    1:                                      ARRAY_SCRIPTABLE_FLAGS)
    1: 
    1:   // HTML element classes
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLAnchorElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
 5405:   NS_DEFINE_CLASSINFO_DATA(HTMLAppletElement, nsHTMLPluginObjElementSH,
    1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLAreaElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLBRElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLBaseElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLBaseFontElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLBodyElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLButtonElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLDListElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLDelElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLDirectoryElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLDivElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLEmbedElement, nsHTMLPluginObjElementSH,
    1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLFieldSetElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLFontElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLFormElement, nsHTMLFormElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS |
    1:                            nsIXPCScriptable::WANT_GETPROPERTY |
    1:                            nsIXPCScriptable::WANT_NEWENUMERATE)
 4042:   NS_DEFINE_CLASSINFO_DATA(HTMLFrameElement, nsHTMLElementSH,
 4042:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLFrameSetElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLHRElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLHeadElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLHeadingElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLHtmlElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
 4042:   NS_DEFINE_CLASSINFO_DATA(HTMLIFrameElement, nsHTMLElementSH,
 4042:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLImageElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLInputElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLInsElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLIsIndexElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLLIElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLLabelElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLLegendElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLLinkElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLMapElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLMenuElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLMetaElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLOListElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLObjectElement, nsHTMLPluginObjElementSH,
    1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLOptGroupElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLOptionElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLParagraphElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLParamElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLPreElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLQuoteElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLScriptElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLSelectElement, nsHTMLSelectElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS |
    1:                            nsIXPCScriptable::WANT_GETPROPERTY)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLSpacerElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLSpanElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLStyleElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableCaptionElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableCellElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableColElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableRowElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTableSectionElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTextAreaElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLTitleElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLUListElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLUnknownElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLWBRElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1: 
    1:   // CSS classes
    1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSCharsetRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSImportRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSMediaRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSNameSpaceRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSRuleList, nsCSSRuleListSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSGroupRuleRuleList, nsCSSRuleListSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(MediaList, nsMediaListSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(StyleSheetList, nsDOMGenericSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleSheet, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleDeclaration, nsCSSStyleDeclSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(ComputedCSSStyleDeclaration, nsCSSStyleDeclSH,
16545:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(ROCSSPrimitiveValue, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // Range classes
    1:   NS_DEFINE_CLASSINFO_DATA(Range, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Selection, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // XUL classes
    1: #ifdef MOZ_XUL
    1:   NS_DEFINE_CLASSINFO_DATA(XULDocument, nsDocumentSH,
12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XULElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XULCommandDispatcher, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: #endif
    1:   NS_DEFINE_CLASSINFO_DATA(XULControllers, nsNonDOMObjectSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(BoxObject, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
10311: #ifdef MOZ_XUL
    1:   NS_DEFINE_CLASSINFO_DATA(TreeSelection, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(TreeContentView, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1: #endif
    1: 
    1:   // Crypto classes
    1:   NS_DEFINE_CLASSINFO_DATA(Crypto, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CRMFObject, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(Pkcs11, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // DOM Traversal classes
    1:   NS_DEFINE_CLASSINFO_DATA(TreeWalker, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // We are now trying to preserve binary compat in classinfo.  No
    1:   // more putting things in those categories up there.  New entries
    1:   // are to be added to the end of the list
    1:   NS_DEFINE_CLASSINFO_DATA(CSSRect, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // DOM Chrome Window class.
    1:   NS_DEFINE_CLASSINFO_DATA(ChromeWindow, nsWindowSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS |
    1:                            WINDOW_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(CSSRGBColor, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(RangeException, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(CSSValueList, nsCSSValueListSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(ContentList, HTMLCollection,
21618:                                      nsContentListSH, NODELIST_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XMLStylesheetProcessingInstruction, nsNodeSH,
    1:                            NODE_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(ImageDocument, nsHTMLDocumentSH,
12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
    1: 
    1: #ifdef MOZ_XUL
    1:   NS_DEFINE_CLASSINFO_DATA(XULTemplateBuilder, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XULTreeBuilder, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1: #endif
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(DOMStringList, nsStringListSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(NameList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1: #ifdef MOZ_XUL
    1:   NS_DEFINE_CLASSINFO_DATA(TreeColumn, nsDOMGenericSH,
    1:                            DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(TreeColumns, nsTreeColumnsSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1: #endif
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(CSSMozDocumentRule, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(BeforeUnloadEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1: #ifdef MOZ_SVG
    1:   // SVG document
    1:   NS_DEFINE_CLASSINFO_DATA(SVGDocument, nsDocumentSH,
    1:                            DOCUMENT_SCRIPTABLE_FLAGS)
    1: 
    1:   // SVG element classes
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGCircleElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGClipPathElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGDefsElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGDescElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGEllipseElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEBlendElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
 9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEColorMatrixElement, nsElementSH,
 9790:                            ELEMENT_SCRIPTABLE_FLAGS)
 9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEComponentTransferElement, nsElementSH,
 9790:                            ELEMENT_SCRIPTABLE_FLAGS)
 9790:   NS_DEFINE_CLASSINFO_DATA(SVGFECompositeElement, nsElementSH,
 9790:                            ELEMENT_SCRIPTABLE_FLAGS)
 9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEConvolveMatrixElement, nsElementSH,
 9790:                            ELEMENT_SCRIPTABLE_FLAGS)
 4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEDiffuseLightingElement, nsElementSH,
 4029:                            ELEMENT_SCRIPTABLE_FLAGS)
 9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEDisplacementMapElement, nsElementSH,
 9790:                            ELEMENT_SCRIPTABLE_FLAGS)
 4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEDistantLightElement, nsElementSH,
 4029:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFloodElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncAElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncBElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncGElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncRElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEGaussianBlurElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
 9764:   NS_DEFINE_CLASSINFO_DATA(SVGFEImageElement, nsElementSH,
 9764:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMergeElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMergeNodeElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMorphologyElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFEOffsetElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
 4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEPointLightElement, nsElementSH,
 4029:                            ELEMENT_SCRIPTABLE_FLAGS)
 4029:   NS_DEFINE_CLASSINFO_DATA(SVGFESpecularLightingElement, nsElementSH,
 4029:                            ELEMENT_SCRIPTABLE_FLAGS)
 4029:   NS_DEFINE_CLASSINFO_DATA(SVGFESpotLightElement, nsElementSH,
 4029:                            ELEMENT_SCRIPTABLE_FLAGS)
 4057:   NS_DEFINE_CLASSINFO_DATA(SVGFETileElement, nsElementSH,
 4057:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFETurbulenceElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGFilterElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGGElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGImageElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGLinearGradientElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGLineElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGMarkerElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGMaskElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGMetadataElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPatternElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPolygonElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPolylineElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGRadialGradientElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGRectElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGScriptElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGStopElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGStyleElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGSVGElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGSwitchElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGSymbolElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTextElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTextPathElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTitleElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTSpanElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGUseElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1: 
    1:   // other SVG classes
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAngle, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedAngle, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 2863:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedBoolean, nsDOMGenericSH,
 2863:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedEnumeration, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedInteger, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedLength, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedLengthList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedNumber, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)    
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedNumberList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)    
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedPreserveAspectRatio, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedRect, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedString, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedTransformList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGException, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGLength, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGLengthList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGMatrix, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGNumber, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGNumberList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)    
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegArcAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegArcRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegClosePath, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicSmoothAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicSmoothRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticSmoothAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticSmoothRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoHorizontalAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoHorizontalRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoVerticalAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoVerticalRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegMovetoAbs, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegMovetoRel, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPoint, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPointList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGPreserveAspectRatio, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGRect, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTransform, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGTransformList, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 5347:   NS_DEFINE_CLASSINFO_DATA(SVGUnitTypes, nsDOMGenericSH,
 5347:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(SVGZoomEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: #endif // MOZ_SVG
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(HTMLCanvasElement, nsHTMLElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1: #ifdef MOZ_ENABLE_CANVAS
    1:   NS_DEFINE_CLASSINFO_DATA(CanvasRenderingContext2D, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CanvasGradient, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(CanvasPattern, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
15295:   NS_DEFINE_CLASSINFO_DATA(TextMetrics, nsDOMGenericSH,
15295:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: #endif // MOZ_ENABLE_CANVAS
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(SmartCardEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(PageTransitionEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(WindowUtils, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XSLTProcessor, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XPathEvaluator, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XPathException, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XPathExpression, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XPathNSResolver, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XPathResult, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // WhatWG Storage
    1: 
    1:   // mrbkap says we don't need WANT_ADDPROPERTY on Storage objects
    1:   // since a call to addProperty() is always followed by a call to
    1:   // setProperty(), except in the case when a getter or setter is set
    1:   // for a property. But we don't care about getters or setters here.
    1:   NS_DEFINE_CLASSINFO_DATA(Storage, nsStorageSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
    1:                            nsIXPCScriptable::WANT_NEWRESOLVE |
    1:                            nsIXPCScriptable::WANT_GETPROPERTY |
    1:                            nsIXPCScriptable::WANT_SETPROPERTY |
    1:                            nsIXPCScriptable::WANT_DELPROPERTY |
    1:                            nsIXPCScriptable::DONT_ENUM_STATIC_PROPS |
    1:                            nsIXPCScriptable::WANT_NEWENUMERATE)
    1:   NS_DEFINE_CLASSINFO_DATA(StorageList, nsStorageListSH,
    1:                            ARRAY_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(StorageItem, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(StorageEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   // We just want this to have classinfo so it gets mark callbacks for marking
    1:   // event listeners.
    1:   // We really don't want any of the default flags!
    1:   NS_DEFINE_CLASSINFO_DATA(WindowRoot, nsEventReceiverSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(DOMParser, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1:   NS_DEFINE_CLASSINFO_DATA(XMLSerializer, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XMLHttpProgressEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16664:   NS_DEFINE_CLASSINFO_DATA(XMLHttpRequest, nsEventTargetSH,
21618:                            EVENTTARGET_SCRIPTABLE_FLAGS)
    1: 
12915:   NS_DEFINE_CLASSINFO_DATA(ClientRect, nsDOMGenericSH,
12915:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
12915:   NS_DEFINE_CLASSINFO_DATA(ClientRectList, nsClientRectListSH,
 2014:                            ARRAY_SCRIPTABLE_FLAGS)
 2014: 
16967: #ifdef MOZ_SVG
    1:   NS_DEFINE_CLASSINFO_DATA(SVGForeignObjectElement, nsElementSH,
    1:                            ELEMENT_SCRIPTABLE_FLAGS)
    1: #endif
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(XULCommandEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: 
    1:   NS_DEFINE_CLASSINFO_DATA(CommandEvent, nsDOMGenericSH,
    1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 1938:   NS_DEFINE_CLASSINFO_DATA(OfflineResourceList, nsOfflineResourceListSH,
 1938:                            ARRAY_SCRIPTABLE_FLAGS)
 3254: 
 3254:   NS_DEFINE_CLASSINFO_DATA(LoadStatus, nsDOMGenericSH,
 3254:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 3254:   NS_DEFINE_CLASSINFO_DATA(LoadStatusEvent, nsDOMGenericSH,
 3254:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 3940: 
 3940:   NS_DEFINE_CLASSINFO_DATA(FileList, nsFileListSH,
 9323:                            ARRAY_SCRIPTABLE_FLAGS)
 3940:   NS_DEFINE_CLASSINFO_DATA(File, nsDOMGenericSH,
 3940:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 3940:   NS_DEFINE_CLASSINFO_DATA(FileException, nsDOMGenericSH,
 3940:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 3940: 
 4040:   NS_DEFINE_CLASSINFO_DATA(ModalContentWindow, nsWindowSH,
 4040:                            DEFAULT_SCRIPTABLE_FLAGS |
 4040:                            WINDOW_SCRIPTABLE_FLAGS)
 8868: 
 8868:   NS_DEFINE_CLASSINFO_DATA(DataContainerEvent, nsDOMGenericSH,
 8868:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
10976: 
10976:   NS_DEFINE_CLASSINFO_DATA(MessageEvent, nsDOMGenericSH,
10976:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
15751: 
16677:   NS_DEFINE_CLASSINFO_DATA(GeoGeolocation, nsDOMGenericSH,
16677:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16677:   
16677:   NS_DEFINE_CLASSINFO_DATA(GeoPosition, nsDOMGenericSH,
16677:                            DOM_DEFAULT_SCRIPTABLE_FLAGS) 
16677:   
16677:   NS_DEFINE_CLASSINFO_DATA(GeoPositionError, nsDOMGenericSH,
15958:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
15958:   
16545:   NS_DEFINE_CLASSINFO_DATA(CSSFontFaceRule, nsDOMGenericSH,
16545:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16545:   NS_DEFINE_CLASSINFO_DATA(CSSFontFaceStyleDecl, nsCSSStyleDeclSH,
16545:                            ARRAY_SCRIPTABLE_FLAGS)
16545: 
15751: #if defined(MOZ_MEDIA) 
15751:   NS_DEFINE_CLASSINFO_DATA(HTMLVideoElement, nsHTMLElementSH,
15751:                            ELEMENT_SCRIPTABLE_FLAGS)
15751:   NS_DEFINE_CLASSINFO_DATA(HTMLSourceElement, nsHTMLElementSH,
15751:                            ELEMENT_SCRIPTABLE_FLAGS)
16665:   NS_DEFINE_CLASSINFO_DATA(HTMLMediaError, nsDOMGenericSH,
16665:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16665:   NS_DEFINE_CLASSINFO_DATA(HTMLAudioElement, nsHTMLElementSH,
16665:                            ELEMENT_SCRIPTABLE_FLAGS)
16665: #endif
16665: 
15751:   NS_DEFINE_CLASSINFO_DATA(ProgressEvent, nsDOMGenericSH,
15751:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
16665: 
16665:   NS_DEFINE_CLASSINFO_DATA(XMLHttpRequestUpload, nsEventTargetSH,
21618:                            EVENTTARGET_SCRIPTABLE_FLAGS)
16103: 
16103:   // DOM Traversal NodeIterator class  
16103:   NS_DEFINE_CLASSINFO_DATA(NodeIterator, nsDOMGenericSH,
16103:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
18445: 
18445:   // data transfer for drag and drop
18445:   NS_DEFINE_CLASSINFO_DATA(DataTransfer, nsDOMGenericSH,
18445:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
18445: 
19380:   NS_DEFINE_CLASSINFO_DATA(NotifyPaintEvent, nsDOMGenericSH,
19380:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
20793: 
20793:   NS_DEFINE_CLASSINFO_DATA(SimpleGestureEvent, nsDOMGenericSH,
20793:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
21291: 
21291: #ifdef MOZ_MATHML
21291:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(MathMLElement, Element, nsElementSH,
21291:                                      ELEMENT_SCRIPTABLE_FLAGS)
21291: #endif
21376: 
21376:   NS_DEFINE_CLASSINFO_DATA(Worker, nsDOMGenericSH,
21376:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
    1: };
    1: 
    1: // Objects that shuld be constructable through |new Name();|
    1: struct nsContractIDMapData
    1: {
    1:   PRInt32 mDOMClassInfoID;
    1:   const char *mContractID;
    1: };
    1: 
    1: #define NS_DEFINE_CONSTRUCTOR_DATA(_class, _contract_id)                      \
    1:   { eDOMClassInfo_##_class##_id, _contract_id },
    1: 
    1: static const nsContractIDMapData kConstructorMap[] =
    1: {
    1:   NS_DEFINE_CONSTRUCTOR_DATA(DOMParser, NS_DOMPARSER_CONTRACTID)
    1:   NS_DEFINE_CONSTRUCTOR_DATA(XMLSerializer, NS_XMLSERIALIZER_CONTRACTID)
    1:   NS_DEFINE_CONSTRUCTOR_DATA(XMLHttpRequest, NS_XMLHTTPREQUEST_CONTRACTID)
    1:   NS_DEFINE_CONSTRUCTOR_DATA(XPathEvaluator, NS_XPATH_EVALUATOR_CONTRACTID)
    1:   NS_DEFINE_CONSTRUCTOR_DATA(XSLTProcessor,
    1:                              "@mozilla.org/document-transformer;1?type=xslt")
    1: };
    1: 
21376: struct nsConstructorFuncMapData
21376: {
21376:   PRInt32 mDOMClassInfoID;
21376:   nsDOMConstructorFunc mConstructorFunc;
21376: };
21376: 
21376: #define NS_DEFINE_CONSTRUCTOR_FUNC_DATA(_class, _func)                        \
21376:   { eDOMClassInfo_##_class##_id, _func },
21376: 
21376: static const nsConstructorFuncMapData kConstructorFuncMap[] =
21376: {
21376:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(Worker, nsDOMWorker::NewWorker)
21376: };
21376: 
    1: nsIXPConnect *nsDOMClassInfo::sXPConnect = nsnull;
    1: nsIScriptSecurityManager *nsDOMClassInfo::sSecMan = nsnull;
    1: PRBool nsDOMClassInfo::sIsInitialized = PR_FALSE;
    1: PRBool nsDOMClassInfo::sDisableDocumentAllSupport = PR_FALSE;
    1: PRBool nsDOMClassInfo::sDisableGlobalScopePollutionSupport = PR_FALSE;
    1: 
    1: 
    1: jsval nsDOMClassInfo::sTop_id             = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sParent_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollbars_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sLocation_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sConstructor_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::s_content_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sContent_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sMenubar_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sToolbar_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sLocationbar_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sPersonalbar_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sStatusbar_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sDirectories_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sControllers_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sLength_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sInnerHeight_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sInnerWidth_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOuterHeight_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOuterWidth_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScreenX_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScreenY_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sStatus_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sName_id            = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnmousedown_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnmouseup_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnclick_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOndblclick_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOncontextmenu_id   = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnmouseover_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnmouseout_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnkeydown_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnkeyup_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnkeypress_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnmousemove_id     = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnfocus_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnblur_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnsubmit_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnreset_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnchange_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnselect_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnload_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnbeforeunload_id  = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnunload_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnpageshow_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnpagehide_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnabort_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnerror_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnpaint_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnresize_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOnscroll_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollIntoView_id  = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollX_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollY_id         = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollMaxX_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sScrollMaxY_id      = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOpen_id            = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sItem_id            = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sNamedItem_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sEnumerate_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sNavigator_id       = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sDocument_id        = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sWindow_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sFrames_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sSelf_id            = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sOpener_id          = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sAdd_id             = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sAll_id             = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sTags_id            = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sAddEventListener_id= JSVAL_VOID;
    1: jsval nsDOMClassInfo::sBaseURIObject_id   = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sNodePrincipal_id   = JSVAL_VOID;
    1: jsval nsDOMClassInfo::sDocumentURIObject_id=JSVAL_VOID;
 4010: jsval nsDOMClassInfo::sOncopy_id          = JSVAL_VOID;
 4010: jsval nsDOMClassInfo::sOncut_id           = JSVAL_VOID;
 4010: jsval nsDOMClassInfo::sOnpaste_id         = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sJava_id            = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sPackages_id        = JSVAL_VOID;
15819: #ifdef OJI
 6774: jsval nsDOMClassInfo::sNetscape_id        = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sSun_id             = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sJavaObject_id      = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sJavaClass_id       = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sJavaArray_id       = JSVAL_VOID;
 6774: jsval nsDOMClassInfo::sJavaMember_id      = JSVAL_VOID;
 6774: #endif
    1: 
    1: const JSClass *nsDOMClassInfo::sObjectClass = nsnull;
    1: const JSClass *nsDOMClassInfo::sXPCNativeWrapperClass = nsnull;
    1: 
    1: PRBool nsDOMClassInfo::sDoSecurityCheckInAddProperty = PR_TRUE;
    1: 
    1: const JSClass*
    1: NS_DOMClassInfo_GetXPCNativeWrapperClass()
    1: {
    1:   return nsDOMClassInfo::GetXPCNativeWrapperClass();
    1: }
    1: 
    1: void
    1: NS_DOMClassInfo_SetXPCNativeWrapperClass(JSClass* aClass)
    1: {
    1:   nsDOMClassInfo::SetXPCNativeWrapperClass(aClass);
    1: }
    1: 
    1: static void
    1: PrintWarningOnConsole(JSContext *cx, const char *stringBundleProperty)
    1: {
    1:   nsCOMPtr<nsIStringBundleService>
    1:     stringService(do_GetService(NS_STRINGBUNDLE_CONTRACTID));
    1:   if (!stringService) {
    1:     return;
    1:   }
    1: 
    1:   nsCOMPtr<nsIStringBundle> bundle;
    1:   stringService->CreateBundle(kDOMStringBundleURL, getter_AddRefs(bundle));
    1:   if (!bundle) {
    1:     return;
    1:   }
    1: 
    1:   nsXPIDLString msg;
    1:   bundle->GetStringFromName(NS_ConvertASCIItoUTF16(stringBundleProperty).get(),
    1:                             getter_Copies(msg));
    1: 
    1:   if (msg.IsEmpty()) {
    1:     NS_ERROR("Failed to get strings from dom.properties!");
    1:     return;
    1:   }
    1: 
    1:   nsCOMPtr<nsIConsoleService> consoleService
    1:     (do_GetService("@mozilla.org/consoleservice;1"));
    1:   if (!consoleService) {
    1:     return;
    1:   }
    1: 
    1:   nsCOMPtr<nsIScriptError> scriptError =
    1:     do_CreateInstance(NS_SCRIPTERROR_CONTRACTID);
    1:   if (!scriptError) {
    1:     return;
    1:   }
    1: 
    1:   JSStackFrame *fp, *iterator = nsnull;
    1:   fp = ::JS_FrameIterator(cx, &iterator);
    1:   PRUint32 lineno = 0;
    1:   nsAutoString sourcefile;
    1:   if (fp) {
    1:     JSScript* script = ::JS_GetFrameScript(cx, fp);
    1:     if (script) {
    1:       const char* filename = ::JS_GetScriptFilename(cx, script);
    1:       if (filename) {
    1:         CopyUTF8toUTF16(nsDependentCString(filename), sourcefile);
    1:       }
    1:       jsbytecode* pc = ::JS_GetFramePC(cx, fp);
    1:       if (pc) {
    1:         lineno = ::JS_PCToLineNumber(cx, script, pc);
    1:       }
    1:     }
    1:   }
    1:   nsresult rv = scriptError->Init(msg.get(),
    1:                                   sourcefile.get(),
    1:                                   EmptyString().get(),
    1:                                   lineno,
    1:                                   0, // column for error is not available
    1:                                   nsIScriptError::warningFlag,
    1:                                   "DOM:HTML");
    1:   if (NS_SUCCEEDED(rv)){
    1:     consoleService->LogMessage(scriptError);
    1:   }
    1: }
    1: 
    1: static jsval
    1: GetInternedJSVal(JSContext *cx, const char *str)
    1: {
    1:   JSString *s = ::JS_InternString(cx, str);
    1: 
    1:   if (!s) {
    1:     return JSVAL_VOID;
    1:   }
    1: 
    1:   return STRING_TO_JSVAL(s);
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::DefineStaticJSVals(JSContext *cx)
    1: {
    1: #define SET_JSVAL_TO_STRING(_val, _cx, _str)                                  \
    1:   _val = GetInternedJSVal(_cx, _str);                                         \
    1:   if (!JSVAL_IS_STRING(_val)) {                                               \
    1:     return NS_ERROR_OUT_OF_MEMORY;                                            \
    1:   }
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   SET_JSVAL_TO_STRING(sTop_id,             cx, "top");
    1:   SET_JSVAL_TO_STRING(sParent_id,          cx, "parent");
    1:   SET_JSVAL_TO_STRING(sScrollbars_id,      cx, "scrollbars");
    1:   SET_JSVAL_TO_STRING(sLocation_id,        cx, "location");
    1:   SET_JSVAL_TO_STRING(sConstructor_id,     cx, "constructor");
    1:   SET_JSVAL_TO_STRING(s_content_id,        cx, "_content");
    1:   SET_JSVAL_TO_STRING(sContent_id,         cx, "content");
    1:   SET_JSVAL_TO_STRING(sMenubar_id,         cx, "menubar");
    1:   SET_JSVAL_TO_STRING(sToolbar_id,         cx, "toolbar");
    1:   SET_JSVAL_TO_STRING(sLocationbar_id,     cx, "locationbar");
    1:   SET_JSVAL_TO_STRING(sPersonalbar_id,     cx, "personalbar");
    1:   SET_JSVAL_TO_STRING(sStatusbar_id,       cx, "statusbar");
    1:   SET_JSVAL_TO_STRING(sDirectories_id,     cx, "directories");
    1:   SET_JSVAL_TO_STRING(sControllers_id,     cx, "controllers");
    1:   SET_JSVAL_TO_STRING(sLength_id,          cx, "length");
    1:   SET_JSVAL_TO_STRING(sInnerHeight_id,     cx, "innerHeight");
    1:   SET_JSVAL_TO_STRING(sInnerWidth_id,      cx, "innerWidth");
    1:   SET_JSVAL_TO_STRING(sOuterHeight_id,     cx, "outerHeight");
    1:   SET_JSVAL_TO_STRING(sOuterWidth_id,      cx, "outerWidth");
    1:   SET_JSVAL_TO_STRING(sScreenX_id,         cx, "screenX");
    1:   SET_JSVAL_TO_STRING(sScreenY_id,         cx, "screenY");
    1:   SET_JSVAL_TO_STRING(sStatus_id,          cx, "status");
    1:   SET_JSVAL_TO_STRING(sName_id,            cx, "name");
    1:   SET_JSVAL_TO_STRING(sOnmousedown_id,     cx, "onmousedown");
    1:   SET_JSVAL_TO_STRING(sOnmouseup_id,       cx, "onmouseup");
    1:   SET_JSVAL_TO_STRING(sOnclick_id,         cx, "onclick");
    1:   SET_JSVAL_TO_STRING(sOndblclick_id,      cx, "ondblclick");
    1:   SET_JSVAL_TO_STRING(sOncontextmenu_id,   cx, "oncontextmenu");
    1:   SET_JSVAL_TO_STRING(sOnmouseover_id,     cx, "onmouseover");
    1:   SET_JSVAL_TO_STRING(sOnmouseout_id,      cx, "onmouseout");
    1:   SET_JSVAL_TO_STRING(sOnkeydown_id,       cx, "onkeydown");
    1:   SET_JSVAL_TO_STRING(sOnkeyup_id,         cx, "onkeyup");
    1:   SET_JSVAL_TO_STRING(sOnkeypress_id,      cx, "onkeypress");
    1:   SET_JSVAL_TO_STRING(sOnmousemove_id,     cx, "onmousemove");
    1:   SET_JSVAL_TO_STRING(sOnfocus_id,         cx, "onfocus");
    1:   SET_JSVAL_TO_STRING(sOnblur_id,          cx, "onblur");
    1:   SET_JSVAL_TO_STRING(sOnsubmit_id,        cx, "onsubmit");
    1:   SET_JSVAL_TO_STRING(sOnreset_id,         cx, "onreset");
    1:   SET_JSVAL_TO_STRING(sOnchange_id,        cx, "onchange");
    1:   SET_JSVAL_TO_STRING(sOnselect_id,        cx, "onselect");
    1:   SET_JSVAL_TO_STRING(sOnload_id,          cx, "onload");
    1:   SET_JSVAL_TO_STRING(sOnbeforeunload_id,  cx, "onbeforeunload");
    1:   SET_JSVAL_TO_STRING(sOnunload_id,        cx, "onunload");
    1:   SET_JSVAL_TO_STRING(sOnpageshow_id,      cx, "onpageshow");
    1:   SET_JSVAL_TO_STRING(sOnpagehide_id,      cx, "onpagehide");
    1:   SET_JSVAL_TO_STRING(sOnabort_id,         cx, "onabort");
    1:   SET_JSVAL_TO_STRING(sOnerror_id,         cx, "onerror");
    1:   SET_JSVAL_TO_STRING(sOnpaint_id,         cx, "onpaint");
    1:   SET_JSVAL_TO_STRING(sOnresize_id,        cx, "onresize");
    1:   SET_JSVAL_TO_STRING(sOnscroll_id,        cx, "onscroll");
    1:   SET_JSVAL_TO_STRING(sScrollIntoView_id,  cx, "scrollIntoView");
    1:   SET_JSVAL_TO_STRING(sScrollX_id,         cx, "scrollX");
    1:   SET_JSVAL_TO_STRING(sScrollY_id,         cx, "scrollY");
    1:   SET_JSVAL_TO_STRING(sScrollMaxX_id,      cx, "scrollMaxX");
    1:   SET_JSVAL_TO_STRING(sScrollMaxY_id,      cx, "scrollMaxY");
    1:   SET_JSVAL_TO_STRING(sOpen_id,            cx, "open");
    1:   SET_JSVAL_TO_STRING(sItem_id,            cx, "item");
    1:   SET_JSVAL_TO_STRING(sNamedItem_id,       cx, "namedItem");
    1:   SET_JSVAL_TO_STRING(sEnumerate_id,       cx, "enumerateProperties");
    1:   SET_JSVAL_TO_STRING(sNavigator_id,       cx, "navigator");
    1:   SET_JSVAL_TO_STRING(sDocument_id,        cx, "document");
    1:   SET_JSVAL_TO_STRING(sWindow_id,          cx, "window");
    1:   SET_JSVAL_TO_STRING(sFrames_id,          cx, "frames");
    1:   SET_JSVAL_TO_STRING(sSelf_id,            cx, "self");
    1:   SET_JSVAL_TO_STRING(sOpener_id,          cx, "opener");
    1:   SET_JSVAL_TO_STRING(sAdd_id,             cx, "add");
    1:   SET_JSVAL_TO_STRING(sAll_id,             cx, "all");
    1:   SET_JSVAL_TO_STRING(sTags_id,            cx, "tags");
    1:   SET_JSVAL_TO_STRING(sAddEventListener_id,cx, "addEventListener");
    1:   SET_JSVAL_TO_STRING(sBaseURIObject_id,   cx, "baseURIObject");
    1:   SET_JSVAL_TO_STRING(sNodePrincipal_id,   cx, "nodePrincipal");
    1:   SET_JSVAL_TO_STRING(sDocumentURIObject_id,cx,"documentURIObject");
 4010:   SET_JSVAL_TO_STRING(sOncopy_id,          cx, "oncopy");
 4010:   SET_JSVAL_TO_STRING(sOncut_id,           cx, "oncut");
 4010:   SET_JSVAL_TO_STRING(sOnpaste_id,         cx, "onpaste");
 6774:   SET_JSVAL_TO_STRING(sJava_id,            cx, "java");
 6774:   SET_JSVAL_TO_STRING(sPackages_id,        cx, "Packages");
15819: #ifdef OJI
 6774:   SET_JSVAL_TO_STRING(sNetscape_id,        cx, "netscape");
 6774:   SET_JSVAL_TO_STRING(sSun_id,             cx, "sun");
 6774:   SET_JSVAL_TO_STRING(sJavaObject_id,      cx, "JavaObject");
 6774:   SET_JSVAL_TO_STRING(sJavaClass_id,       cx, "JavaClass");
 6774:   SET_JSVAL_TO_STRING(sJavaArray_id,       cx, "JavaArray");
 6774:   SET_JSVAL_TO_STRING(sJavaMember_id,      cx, "JavaMember");
 6774: #endif
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
22071:                            const nsIID& aIID, jsval *vp,
    1:                            nsIXPConnectJSObjectHolder **aHolder)
    1: {
    1:   if (!native) {
22065:     NS_ASSERTION(!aHolder || !*aHolder, "*aHolder should be null!");
22065: 
    1:     *vp = JSVAL_NULL;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   NS_ENSURE_TRUE(sXPConnect, NS_ERROR_UNEXPECTED);
    1: 
22065:   return sXPConnect->WrapNativeToJSVal(cx, ::JS_GetGlobalForObject(cx, scope),
22065:                                        native, aIID, vp, aHolder);
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::ThrowJSException(JSContext *cx, nsresult aResult)
    1: {
    1:   JSAutoRequest ar(cx);
    1: 
    1:   do {
    1:     nsCOMPtr<nsIExceptionService> xs =
    1:       do_GetService(NS_EXCEPTIONSERVICE_CONTRACTID);
    1:     if (!xs) {
    1:       break;
    1:     }
    1: 
    1:     nsCOMPtr<nsIExceptionManager> xm;
    1:     nsresult rv = xs->GetCurrentExceptionManager(getter_AddRefs(xm));
    1:     if (NS_FAILED(rv)) {
    1:       break;
    1:     }
    1: 
    1:     nsCOMPtr<nsIException> exception;
    1:     rv = xm->GetExceptionFromProvider(aResult, 0, getter_AddRefs(exception));
    1:     if (NS_FAILED(rv) || !exception) {
    1:       break;
    1:     }
    1: 
    1:     jsval jv;
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:     rv = WrapNative(cx, ::JS_GetGlobalObject(cx), exception,
22071:                     NS_GET_IID(nsIException), &jv, getter_AddRefs(holder));
    1:     if (NS_FAILED(rv) || JSVAL_IS_NULL(jv)) {
    1:       break;
    1:     }
    1:     JS_SetPendingException(cx, jv);
    1: 
    1:     return NS_OK;
    1:   } while (0);
    1: 
    1:   // XXX This probably wants to be localized, but that can fail in ways that
    1:   // are hard to report correctly.
    1:   JSString *str =
    1:     JS_NewStringCopyZ(cx, "An error occured throwing an exception");
    1:   if (!str) {
    1:     // JS_NewStringCopyZ reported the error for us.
    1:     return NS_OK; 
    1:   }
    1:   JS_SetPendingException(cx, STRING_TO_JSVAL(str));
    1:   return NS_OK;
    1: }
    1: 
    1: nsDOMClassInfo::nsDOMClassInfo(nsDOMClassInfoData* aData) : mData(aData)
    1: {
    1: }
    1: 
    1: nsDOMClassInfo::~nsDOMClassInfo()
    1: {
    1:   if (IS_EXTERNAL(mData->mCachedClassInfo)) {
    1:     // Some compilers don't like delete'ing a const nsDOMClassInfo*
 3233:     nsDOMClassInfoData* data = const_cast<nsDOMClassInfoData*>(mData);
 3233:     delete static_cast<nsExternalDOMClassInfoData*>(data);
    1:   }
    1: }
    1: 
    1: NS_IMPL_ADDREF(nsDOMClassInfo)
    1: NS_IMPL_RELEASE(nsDOMClassInfo)
    1: 
    1: NS_INTERFACE_MAP_BEGIN(nsDOMClassInfo)
    1:   NS_INTERFACE_MAP_ENTRY(nsIXPCScriptable)
    1:   NS_INTERFACE_MAP_ENTRY(nsIClassInfo)
    1:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIXPCScriptable)
    1: NS_INTERFACE_MAP_END
    1: 
    1: 
    1: JSClass nsDOMClassInfo::sDOMConstructorProtoClass = {
    1:   "DOM Constructor.prototype", 0,
    1:   JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
    1:   JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub
    1: };
    1: 
    1: 
    1: static const char *
    1: CutPrefix(const char *aName) {
    1:   static const char prefix_nsIDOM[] = "nsIDOM";
    1:   static const char prefix_nsI[]    = "nsI";
    1: 
    1:   if (strncmp(aName, prefix_nsIDOM, sizeof(prefix_nsIDOM) - 1) == 0) {
    1:     return aName + sizeof(prefix_nsIDOM) - 1;
    1:   }
    1: 
    1:   if (strncmp(aName, prefix_nsI, sizeof(prefix_nsI) - 1) == 0) {
    1:     return aName + sizeof(prefix_nsI) - 1;
    1:   }
    1: 
    1:   return aName;
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::RegisterClassName(PRInt32 aClassInfoID)
    1: {
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
 7941: 
 7941:   nameSpaceManager->RegisterClassName(sClassInfoData[aClassInfoID].mName,
    1:                                       aClassInfoID);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::RegisterClassProtos(PRInt32 aClassInfoID)
    1: {
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
    1:   PRBool found_old;
    1: 
    1:   const nsIID *primary_iid = sClassInfoData[aClassInfoID].mProtoChainInterface;
    1: 
    1:   if (!primary_iid || primary_iid == &NS_GET_IID(nsISupports)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIInterfaceInfoManager>
    1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1:   NS_ENSURE_TRUE(iim, NS_ERROR_NOT_AVAILABLE);
    1: 
    1:   nsCOMPtr<nsIInterfaceInfo> if_info;
    1:   PRBool first = PR_TRUE;
    1: 
    1:   iim->GetInfoForIID(primary_iid, getter_AddRefs(if_info));
    1: 
    1:   while (if_info) {
10204:     const nsIID *iid = nsnull;
10204: 
10204:     if_info->GetIIDShared(&iid);
    1:     NS_ENSURE_TRUE(iid, NS_ERROR_UNEXPECTED);
    1: 
    1:     if (iid->Equals(NS_GET_IID(nsISupports))) {
    1:       break;
    1:     }
    1: 
10204:     const char *name = nsnull;
10204:     if_info->GetNameShared(&name);
10204:     NS_ENSURE_TRUE(name, NS_ERROR_UNEXPECTED);
    1: 
 7941:     nameSpaceManager->RegisterClassProto(CutPrefix(name), iid, &found_old);
    1: 
    1:     if (first) {
    1:       first = PR_FALSE;
    1:     } else if (found_old) {
    1:       break;
    1:     }
    1: 
    1:     nsCOMPtr<nsIInterfaceInfo> tmp(if_info);
    1:     tmp->GetParent(getter_AddRefs(if_info));
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsDOMClassInfo::RegisterExternalClasses()
    1: {
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
 7941: 
    1:   nsCOMPtr<nsIComponentRegistrar> registrar;
 7941:   nsresult rv = NS_GetComponentRegistrar(getter_AddRefs(registrar));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsICategoryManager> cm =
    1:     do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsISimpleEnumerator> e;
    1:   rv = cm->EnumerateCategory(JAVASCRIPT_DOM_CLASS, getter_AddRefs(e));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsXPIDLCString contractId;
    1:   nsCAutoString categoryEntry;
    1:   nsCOMPtr<nsISupports> entry;
    1: 
    1:   while (NS_SUCCEEDED(e->GetNext(getter_AddRefs(entry)))) {
    1:     nsCOMPtr<nsISupportsCString> category(do_QueryInterface(entry));
    1: 
    1:     if (!category) {
    1:       NS_WARNING("Category entry not an nsISupportsCString!");
    1:       continue;
    1:     }
    1: 
    1:     rv = category->GetData(categoryEntry);
    1: 
    1:     cm->GetCategoryEntry(JAVASCRIPT_DOM_CLASS, categoryEntry.get(),
    1:                          getter_Copies(contractId));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     nsCID *cid;
    1:     rv = registrar->ContractIDToCID(contractId, &cid);
    1:     if (NS_FAILED(rv)) {
    1:       NS_WARNING("Bad contract id registered with the script namespace manager");
    1:       continue;
    1:     }
    1: 
 7941:     rv = nameSpaceManager->RegisterExternalClassName(categoryEntry.get(), *cid);
    1:     nsMemory::Free(cid);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1:   }
    1: 
 7941:   return nameSpaceManager->RegisterExternalInterfaces(PR_TRUE);
    1: }
    1: 
    1: #define _DOM_CLASSINFO_MAP_BEGIN(_class, _ifptr, _has_class_if)               \
    1:   {                                                                           \
    1:     nsDOMClassInfoData &d = sClassInfoData[eDOMClassInfo_##_class##_id];      \
    1:     d.mProtoChainInterface = _ifptr;                                          \
    1:     d.mHasClassInterface = _has_class_if;                                     \
    1:     static const nsIID *interface_list[] = {
    1: 
    1: #define DOM_CLASSINFO_MAP_BEGIN(_class, _interface)                           \
    1:   _DOM_CLASSINFO_MAP_BEGIN(_class, &NS_GET_IID(_interface), PR_TRUE)
    1: 
    1: #define DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(_class, _interface)               \
    1:   _DOM_CLASSINFO_MAP_BEGIN(_class, &NS_GET_IID(_interface), PR_FALSE)
    1: 
    1: #define DOM_CLASSINFO_MAP_ENTRY(_if)                                          \
    1:       &NS_GET_IID(_if),
    1: 
    1: #define DOM_CLASSINFO_MAP_END                                                 \
    1:       nsnull                                                                  \
    1:     };                                                                        \
    1:                                                                               \
    1:     d.mInterfaces = interface_list;                                           \
    1:   }
    1: 
    1: #define DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES                                    \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSDocument)                                 \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentEvent)                              \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentStyle)                              \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSDocumentStyle)                            \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentView)                               \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentRange)                              \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentTraversal)                          \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentXBL)                                \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                                \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Document)                                  \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)                                      \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)                             \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
16106: 
    1: 
    1: #define DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES                                \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLElement)                              \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementCSSInlineStyle)                      \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                                \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)                                      \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSElement)                                  \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
    1: 
    1: #define DOM_CLASSINFO_EVENT_MAP_ENTRIES                                       \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEvent)                                      \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSEvent)                                    \
    1: 
    1: #define DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES                                    \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMUIEvent)                                    \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSUIEvent)                                  \
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1: 
    1: nsresult
    1: nsDOMClassInfo::Init()
    1: {
    1:   /* Errors that can trigger early returns are done first,
    1:      otherwise nsDOMClassInfo is left in a half inited state. */
    1:   NS_ASSERTION(sizeof(PtrBits) == sizeof(void*),
    1:                "BAD! You'll need to adjust the size of PtrBits to the size "
    1:                "of a pointer on your platform.");
    1: 
    1:   NS_ENSURE_TRUE(!sIsInitialized, NS_ERROR_ALREADY_INITIALIZED);
    1: 
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:   nsresult rv = CallGetService(nsIXPConnect::GetCID(), &sXPConnect);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsIXPCFunctionThisTranslator> old;
    1: 
    1:   nsCOMPtr<nsIXPCFunctionThisTranslator> elt = new nsEventListenerThisTranslator();
    1:   NS_ENSURE_TRUE(elt, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:   sXPConnect->SetFunctionThisTranslator(NS_GET_IID(nsIDOMEventListener),
    1:                                         elt, getter_AddRefs(old));
    1: 
    1:   nsCOMPtr<nsIScriptSecurityManager> sm =
    1:     do_GetService("@mozilla.org/scriptsecuritymanager;1", &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   sSecMan = sm;
    1:   NS_ADDREF(sSecMan);
    1: 
    1:   nsCOMPtr<nsIThreadJSContextStack> stack =
    1:     do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   JSContext *cx = nsnull;
    1: 
    1:   rv = stack->GetSafeJSContext(&cx);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Window, nsIDOMWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMJSWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindowInternal)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMViewCSS)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAbstractView)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageWindow)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(WindowUtils, nsIDOMWindowUtils)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindowUtils)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Location, nsIDOMLocation)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLocation)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Navigator, nsIDOMNavigator)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigator)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMJSNavigator)
16677:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorGeolocation)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientInformation)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Plugin, nsIDOMPlugin)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPlugin)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(PluginArray, nsIDOMPluginArray)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPluginArray)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(MimeType, nsIDOMMimeType)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMimeType)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(MimeTypeArray, nsIDOMMimeTypeArray)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMimeTypeArray)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(BarProp, nsIDOMBarProp)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBarProp)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(History, nsIDOMHistory)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHistory)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Screen, nsIDOMScreen)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMScreen)
    1:   DOM_CLASSINFO_MAP_END
    1: 
 7842:   DOM_CLASSINFO_MAP_BEGIN(DOMPrototype, nsIDOMDOMConstructor)
 7842:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMConstructor)
 7842:   DOM_CLASSINFO_MAP_END
 7842: 
 7842:   DOM_CLASSINFO_MAP_BEGIN(DOMConstructor, nsIDOMDOMConstructor)
 7842:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMConstructor)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XMLDocument, nsIDOMXMLDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXMLDocument)
    1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(DocumentType, nsIDOMDocumentType)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentType)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(DOMImplementation, nsIDOMDOMImplementation)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMImplementation)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(DOMException, nsIDOMDOMException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(DocumentFragment, nsIDOMDocumentFragment)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentFragment)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Element, nsIDOMElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Attr, nsIDOMAttr)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAttr)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Attr)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Text, nsIDOMText)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMText)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
15250:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Text)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Comment, nsIDOMComment)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMComment)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CDATASection, nsIDOMCDATASection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCDATASection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
15250:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Text)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(ProcessingInstruction, nsIDOMProcessingInstruction)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProcessingInstruction)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Notation, nsIDOMNotation)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNotation)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(NodeList, nsIDOMNodeList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(NamedNodeMap, nsIDOMNamedNodeMap)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNamedNodeMap)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(DocumentStyleSheetList,
    1:                                       nsIDOMStyleSheetList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStyleSheetList)
    1:   DOM_CLASSINFO_MAP_END
    1:   
    1:   DOM_CLASSINFO_MAP_BEGIN(Event, nsIDOMEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(PopupBlockedEvent, nsIDOMPopupBlockedEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPopupBlockedEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SmartCardEvent, nsIDOMSmartCardEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSmartCardEvent)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(PageTransitionEvent, nsIDOMPageTransitionEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPageTransitionEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(MutationEvent, nsIDOMMutationEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMutationEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(UIEvent, nsIDOMUIEvent)
    1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1:   
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(KeyboardEvent, nsIDOMKeyEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMKeyEvent)
    1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(MouseEvent, nsIDOMMouseEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
    1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
16604:   DOM_CLASSINFO_MAP_BEGIN(MouseScrollEvent, nsIDOMMouseScrollEvent)
16604:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseScrollEvent)
19150:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
16604:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
16604:   DOM_CLASSINFO_MAP_END
16604: 
18445:   DOM_CLASSINFO_MAP_BEGIN(DragEvent, nsIDOMDragEvent)
18445:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDragEvent)
18445:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
18445:   DOM_CLASSINFO_MAP_END
18445: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDocument, nsIDOMHTMLDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLDocument)
    1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptionsCollection, nsIDOMHTMLOptionsCollection)
19259:     // Order is significant.  nsIDOMHTMLOptionsCollection.length shadows
19259:     // nsIDOMHTMLCollection.length, which is readonly.
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptionsCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLOptionCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLFormControlCollection,
    1:                                       nsIDOMHTMLCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLFormControlList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLGenericCollection,
    1:                                       nsIDOMHTMLCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAnchorElement, nsIDOMHTMLAnchorElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAnchorElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLAnchorElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLAnchorElement2)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAppletElement, nsIDOMHTMLAppletElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAppletElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAreaElement, nsIDOMHTMLAreaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAreaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLAreaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLAreaElement2)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBRElement, nsIDOMHTMLBRElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBRElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBaseElement, nsIDOMHTMLBaseElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBaseElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBaseFontElement, nsIDOMHTMLBaseFontElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBaseFontElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBodyElement, nsIDOMHTMLBodyElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBodyElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLButtonElement, nsIDOMHTMLButtonElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLButtonElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLButtonElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDListElement, nsIDOMHTMLDListElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDListElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLDelElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLModElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDirectoryElement, nsIDOMHTMLDirectoryElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDirectoryElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDivElement, nsIDOMHTMLDivElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDivElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLEmbedElement, nsIDOMHTMLEmbedElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLEmbedElement)
    1: #ifdef MOZ_SVG
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
    1: #endif
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFieldSetElement, nsIDOMHTMLFieldSetElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFieldSetElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFontElement, nsIDOMHTMLFontElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFontElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFormElement, nsIDOMHTMLFormElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFormElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLFormElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFrameElement, nsIDOMHTMLFrameElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFrameElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLFrameElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFrameSetElement, nsIDOMHTMLFrameSetElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFrameSetElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHRElement, nsIDOMHTMLHRElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHRElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLHRElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHeadElement, nsIDOMHTMLHeadElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHeadElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHeadingElement, nsIDOMHTMLHeadingElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHeadingElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHtmlElement, nsIDOMHTMLHtmlElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHtmlElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLIFrameElement, nsIDOMHTMLIFrameElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLIFrameElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLFrameElement)
15382: #ifdef MOZ_SVG
15382:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
15382: #endif
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLImageElement, nsIDOMHTMLImageElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLImageElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLImageElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLInputElement, nsIDOMHTMLInputElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLInputElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLInputElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLInsElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLModElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLIsIndexElement, nsIDOMHTMLIsIndexElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLIsIndexElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLIElement, nsIDOMHTMLLIElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLIElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLabelElement, nsIDOMHTMLLabelElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLabelElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLegendElement, nsIDOMHTMLLegendElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLegendElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLinkElement, nsIDOMHTMLLinkElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLinkElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMapElement, nsIDOMHTMLMapElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMapElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMenuElement, nsIDOMHTMLMenuElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMenuElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMetaElement, nsIDOMHTMLMetaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMetaElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOListElement, nsIDOMHTMLOListElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOListElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLObjectElement, nsIDOMHTMLObjectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLObjectElement)
15382: #ifdef MOZ_SVG
15382:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
15382: #endif
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptGroupElement, nsIDOMHTMLOptGroupElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptGroupElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptionElement, nsIDOMHTMLOptionElement)
19259:     // Order is significant.  nsIDOMNSHTMLOptionElement.text shdaows
19259:     // nsIDOMHTMLOptionElement.text, which is readonly.
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLOptionElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptionElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLParagraphElement, nsIDOMHTMLParagraphElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLParagraphElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLParamElement, nsIDOMHTMLParamElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLParamElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLPreElement, nsIDOMHTMLPreElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLPreElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLQuoteElement, nsIDOMHTMLQuoteElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLQuoteElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLScriptElement, nsIDOMHTMLScriptElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLScriptElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLSelectElement, nsIDOMHTMLSelectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLSelectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLSelectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSXBLFormControl)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLSpacerElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLSpanElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLStyleElement, nsIDOMHTMLStyleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLStyleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableCaptionElement,
    1:                           nsIDOMHTMLTableCaptionElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableCaptionElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableCellElement, nsIDOMHTMLTableCellElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableCellElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableColElement, nsIDOMHTMLTableColElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableColElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableElement, nsIDOMHTMLTableElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableRowElement, nsIDOMHTMLTableRowElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableRowElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableSectionElement,
    1:                           nsIDOMHTMLTableSectionElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableSectionElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTextAreaElement, nsIDOMHTMLTextAreaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTextAreaElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLTextAreaElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTitleElement, nsIDOMHTMLTitleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTitleElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLUListElement, nsIDOMHTMLUListElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLUListElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLUnknownElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLWBRElement, nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleRule, nsIDOMCSSStyleRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSCharsetRule, nsIDOMCSSCharsetRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSCharsetRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSImportRule, nsIDOMCSSImportRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSImportRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSMediaRule, nsIDOMCSSMediaRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSMediaRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSNameSpaceRule, nsIDOMCSSRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSRuleList, nsIDOMCSSRuleList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRuleList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSGroupRuleRuleList, nsIDOMCSSRuleList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRuleList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(MediaList, nsIDOMMediaList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMediaList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(StyleSheetList, nsIDOMStyleSheetList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStyleSheetList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleSheet, nsIDOMCSSStyleSheet)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleSheet)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleDeclaration, nsIDOMCSSStyleDeclaration)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleDeclaration)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSS2Properties)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSCSS2Properties)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ComputedCSSStyleDeclaration,
    1:                                       nsIDOMCSSStyleDeclaration)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleDeclaration)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSS2Properties)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSCSS2Properties)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ROCSSPrimitiveValue,
    1:                                       nsIDOMCSSPrimitiveValue)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSPrimitiveValue)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSValueList, nsIDOMCSSValueList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSValueList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSRect, nsIDOMRect)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRect)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSRGBColor, nsIDOMRGBColor)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRGBColor)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSRGBAColor)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Range, nsIDOMRange)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRange)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSRange)
    1:   DOM_CLASSINFO_MAP_END
    1: 
16103:   DOM_CLASSINFO_MAP_BEGIN(NodeIterator, nsIDOMNodeIterator)
16103:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeIterator)
16103:   DOM_CLASSINFO_MAP_END
16103: 
    1:   DOM_CLASSINFO_MAP_BEGIN(TreeWalker, nsIDOMTreeWalker)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTreeWalker)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Selection, nsISelection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsISelection)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1: #ifdef MOZ_XUL
    1:   DOM_CLASSINFO_MAP_BEGIN(XULDocument, nsIDOMXULDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULDocument)
    1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XULElement, nsIDOMXULElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementCSSInlineStyle)
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XULCommandDispatcher, nsIDOMXULCommandDispatcher)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULCommandDispatcher)
    1:   DOM_CLASSINFO_MAP_END
    1: #endif
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XULControllers, nsIControllers)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIControllers)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(BoxObject, nsIBoxObject)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIBoxObject)
    1:   DOM_CLASSINFO_MAP_END
    1: 
10311: #ifdef MOZ_XUL
    1:   DOM_CLASSINFO_MAP_BEGIN(TreeSelection, nsITreeSelection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeSelection)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(TreeContentView, nsITreeContentView)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeContentView)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeView)
    1:   DOM_CLASSINFO_MAP_END
    1: #endif
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Crypto, nsIDOMCrypto)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCrypto)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CRMFObject, nsIDOMCRMFObject)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCRMFObject)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Pkcs11, nsIDOMPkcs11)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPkcs11)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLStylesheetProcessingInstruction, nsIDOMProcessingInstruction)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProcessingInstruction)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ChromeWindow, nsIDOMWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMJSWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindowInternal)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMChromeWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
  834:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageWindow)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMViewCSS)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAbstractView)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(RangeException, nsIDOMRangeException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRangeException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ContentList, nsIDOMHTMLCollection)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(ImageDocument, nsIImageDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIImageDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSHTMLDocument)
    1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1: #ifdef MOZ_XUL
    1:   DOM_CLASSINFO_MAP_BEGIN(XULTemplateBuilder, nsIXULTemplateBuilder)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXULTemplateBuilder)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XULTreeBuilder, nsIXULTreeBuilder)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXULTreeBuilder)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeView)
    1:   DOM_CLASSINFO_MAP_END
    1: #endif
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(DOMStringList, nsIDOMDOMStringList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMStringList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(NameList, nsIDOMNameList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNameList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1: #ifdef MOZ_XUL
    1:   DOM_CLASSINFO_MAP_BEGIN(TreeColumn, nsITreeColumn)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeColumn)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(TreeColumns, nsITreeColumns)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeColumns)
    1:   DOM_CLASSINFO_MAP_END
    1: #endif
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CSSMozDocumentRule, nsIDOMCSSMozDocumentRule)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSMozDocumentRule)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(BeforeUnloadEvent, nsIDOMBeforeUnloadEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBeforeUnloadEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1: #ifdef MOZ_SVG
    1: #define DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGElement) \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSElement)  \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)      \
16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
    1: 
    1: #define DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)        \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)       \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformable)   \
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)        \
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1: 
    1:   // XXX - the proto chain stuff is sort of hackish, because of the MI in
    1:   // the SVG interfaces. I doubt that extending the proto on one interface
    1:   // works properly on an element which inherits off multiple interfaces.
    1:   // Tough luck. - bbaetz
    1: 
    1:   // The SVG document
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGDocument, nsIDOMSVGDocument)
19259:     // Order is significant.  nsIDOMDocument.title shadows
19259:     // nsIDOMSVGDocument.title, which is readonly.
19259:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDocument)
    1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   // SVG element classes
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAElement, nsIDOMSVGAElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGCircleElement, nsIDOMSVGCircleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGCircleElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGClipPathElement, nsIDOMSVGClipPathElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGClipPathElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformable)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGDefsElement, nsIDOMSVGDefsElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDefsElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGDescElement, nsIDOMSVGDescElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDescElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGEllipseElement, nsIDOMSVGEllipseElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGEllipseElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEBlendElement, nsIDOMSVGFEBlendElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEBlendElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEColorMatrixElement, nsIDOMSVGFEColorMatrixElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEColorMatrixElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 9790:   DOM_CLASSINFO_MAP_END
 9790: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEComponentTransferElement, nsIDOMSVGFEComponentTransferElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEComponentTransferElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 9790:   DOM_CLASSINFO_MAP_END
 9790: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFECompositeElement, nsIDOMSVGFECompositeElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFECompositeElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 9790:   DOM_CLASSINFO_MAP_END
 9790: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEConvolveMatrixElement, nsIDOMSVGFEConvolveMatrixElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEConvolveMatrixElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 9790:   DOM_CLASSINFO_MAP_END
 9790: 
 4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDiffuseLightingElement, nsIDOMSVGFEDiffuseLightingElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDiffuseLightingElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 4029:   DOM_CLASSINFO_MAP_END
 4029: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDisplacementMapElement, nsIDOMSVGFEDisplacementMapElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDisplacementMapElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
 9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDistantLightElement, nsIDOMSVGFEDistantLightElement)
 9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDistantLightElement)
 2863:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 2863:   DOM_CLASSINFO_MAP_END
 2863: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFloodElement, nsIDOMSVGFEFloodElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFloodElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncAElement, nsIDOMSVGFEFuncAElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncAElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncBElement, nsIDOMSVGFEFuncBElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncBElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncGElement, nsIDOMSVGFEFuncGElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncGElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncRElement, nsIDOMSVGFEFuncRElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncRElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEGaussianBlurElement, nsIDOMSVGFEGaussianBlurElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEGaussianBlurElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
 9764:   DOM_CLASSINFO_MAP_BEGIN(SVGFEImageElement, nsIDOMSVGFEImageElement)
 9779:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEImageElement)
 9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
 9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 9764:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 9764:   DOM_CLASSINFO_MAP_END
 9764: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMergeElement, nsIDOMSVGFEMergeElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMergeElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMorphologyElement, nsIDOMSVGFEMorphologyElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMorphologyElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMergeNodeElement, nsIDOMSVGFEMergeNodeElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMergeNodeElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEOffsetElement, nsIDOMSVGFEOffsetElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEOffsetElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
 4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFEPointLightElement, nsIDOMSVGFEPointLightElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEPointLightElement)
 4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 4029:   DOM_CLASSINFO_MAP_END
 4029: 
 4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFESpecularLightingElement, nsIDOMSVGFESpecularLightingElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFESpecularLightingElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 4029:   DOM_CLASSINFO_MAP_END
 4029: 
 4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFESpotLightElement, nsIDOMSVGFESpotLightElement)
 4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFESpotLightElement)
 4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 4029:   DOM_CLASSINFO_MAP_END
 4029: 
 4057:   DOM_CLASSINFO_MAP_BEGIN(SVGFETileElement, nsIDOMSVGFETileElement)
 4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFETileElement)
 4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
 4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 4057:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 4057:   DOM_CLASSINFO_MAP_END
 4057: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFETurbulenceElement, nsIDOMSVGFETurbulenceElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFETurbulenceElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGFilterElement, nsIDOMSVGFilterElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGGElement, nsIDOMSVGGElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGImageElement, nsIDOMSVGImageElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGImageElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGLinearGradientElement, nsIDOMSVGLinearGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLinearGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGLineElement, nsIDOMSVGLineElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLineElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGMarkerElement, nsIDOMSVGMarkerElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMarkerElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGMaskElement, nsIDOMSVGMaskElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMaskElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGMetadataElement, nsIDOMSVGMetadataElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMetadataElement)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathElement, nsIDOMSVGPathElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPathData)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPatternElement, nsIDOMSVGPatternElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPatternElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPolygonElement, nsIDOMSVGPolygonElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPolygonElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPoints)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPolylineElement, nsIDOMSVGPolylineElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPolylineElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPoints)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGRadialGradientElement, nsIDOMSVGRadialGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRadialGradientElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGRectElement, nsIDOMSVGRectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRectElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGScriptElement, nsIDOMSVGScriptElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGScriptElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGStopElement, nsIDOMSVGStopElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStopElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1:   
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGStyleElement, nsIDOMSVGStyleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStyleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGSVGElement, nsIDOMSVGSVGElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSVGElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomAndPan)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGSwitchElement, nsIDOMSVGSwitchElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSwitchElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGSymbolElement, nsIDOMSVGSymbolElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSymbolElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTextElement, nsIDOMSVGTextElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextPositioningElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextContentElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTextPathElement, nsIDOMSVGTextPathElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextContentElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTitleElement, nsIDOMSVGTitleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTitleElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTSpanElement, nsIDOMSVGTSpanElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextPositioningElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextContentElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
    1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGUseElement, nsIDOMSVGUseElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUseElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   // other SVG classes
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAngle, nsIDOMSVGAngle)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAngle)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedAngle, nsIDOMSVGAnimatedAngle)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedAngle)
    1:   DOM_CLASSINFO_MAP_END
    1: 
 2863:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedBoolean, nsIDOMSVGAnimatedBoolean)
 2863:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedBoolean)
 2863:   DOM_CLASSINFO_MAP_END
 2863: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedEnumeration, nsIDOMSVGAnimatedEnumeration)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedEnumeration)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedInteger, nsIDOMSVGAnimatedInteger)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedInteger)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedLength, nsIDOMSVGAnimatedLength)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedLength)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedLengthList, nsIDOMSVGAnimatedLengthList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedLengthList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedNumber, nsIDOMSVGAnimatedNumber)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedNumber)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedNumberList, nsIDOMSVGAnimatedNumberList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedNumberList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedPreserveAspectRatio, nsIDOMSVGAnimatedPreserveAspectRatio)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPreserveAspectRatio)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedRect, nsIDOMSVGAnimatedRect)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedRect)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedString, nsIDOMSVGAnimatedString)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedString)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedTransformList, nsIDOMSVGAnimatedTransformList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedTransformList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGEvent, nsIDOMSVGEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGException, nsIDOMSVGException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGLength, nsIDOMSVGLength)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLength)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGLengthList, nsIDOMSVGLengthList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLengthList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGMatrix, nsIDOMSVGMatrix)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMatrix)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGNumber, nsIDOMSVGNumber)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGNumber)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGNumberList, nsIDOMSVGNumberList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGNumberList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegArcAbs, nsIDOMSVGPathSegArcAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegArcAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegArcRel, nsIDOMSVGPathSegArcRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegArcRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegClosePath, nsIDOMSVGPathSegClosePath)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegClosePath)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicAbs, nsIDOMSVGPathSegCurvetoCubicAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicRel, nsIDOMSVGPathSegCurvetoCubicRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicSmoothAbs, nsIDOMSVGPathSegCurvetoCubicSmoothAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicSmoothAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicSmoothRel, nsIDOMSVGPathSegCurvetoCubicSmoothRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicSmoothRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticAbs, nsIDOMSVGPathSegCurvetoQuadraticAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticRel, nsIDOMSVGPathSegCurvetoQuadraticRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticSmoothAbs, nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticSmoothRel, nsIDOMSVGPathSegCurvetoQuadraticSmoothRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticSmoothRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoAbs, nsIDOMSVGPathSegLinetoAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoHorizontalAbs, nsIDOMSVGPathSegLinetoHorizontalAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoHorizontalAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoHorizontalRel, nsIDOMSVGPathSegLinetoHorizontalRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoHorizontalRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoRel, nsIDOMSVGPathSegLinetoRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoVerticalAbs, nsIDOMSVGPathSegLinetoVerticalAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoVerticalAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoVerticalRel, nsIDOMSVGPathSegLinetoVerticalRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoVerticalRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegList, nsIDOMSVGPathSegList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegMovetoAbs, nsIDOMSVGPathSegMovetoAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegMovetoAbs)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegMovetoRel, nsIDOMSVGPathSegMovetoRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegMovetoRel)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPoint, nsIDOMSVGPoint)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPoint)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPointList, nsIDOMSVGPointList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPointList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGPreserveAspectRatio, nsIDOMSVGPreserveAspectRatio)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPreserveAspectRatio)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGRect, nsIDOMSVGRect)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRect)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTransform, nsIDOMSVGTransform)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransform)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGTransformList, nsIDOMSVGTransformList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
 5347:   DOM_CLASSINFO_MAP_BEGIN(SVGUnitTypes, nsIDOMSVGUnitTypes)
 5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
 5347:   DOM_CLASSINFO_MAP_END
 5347: 
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGZoomEvent, nsIDOMSVGZoomEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: #endif // MOZ_SVG
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(HTMLCanvasElement, nsIDOMHTMLCanvasElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCanvasElement)
    1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1: #ifdef MOZ_ENABLE_CANVAS
    1:   DOM_CLASSINFO_MAP_BEGIN(CanvasRenderingContext2D, nsIDOMCanvasRenderingContext2D)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasRenderingContext2D)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CanvasGradient, nsIDOMCanvasGradient)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasGradient)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CanvasPattern, nsIDOMCanvasPattern)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasPattern)
    1:   DOM_CLASSINFO_MAP_END
15295: 
15295:   DOM_CLASSINFO_MAP_BEGIN(TextMetrics, nsIDOMTextMetrics)
15295:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTextMetrics)
15295:   DOM_CLASSINFO_MAP_END
    1: #endif // MOZ_ENABLE_CANVAS
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XSLTProcessor, nsIXSLTProcessor)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessor)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessorObsolete) // XXX DEPRECATED
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessorPrivate)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XPathEvaluator, nsIDOMXPathEvaluator)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XPathException, nsIDOMXPathException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathException)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XPathExpression, nsIDOMXPathExpression)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathExpression)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSXPathExpression)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XPathNSResolver, nsIDOMXPathNSResolver)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathNSResolver)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XPathResult, nsIDOMXPathResult)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathResult)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(Storage, nsIDOMStorage)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorage)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(StorageList, nsIDOMStorageList)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageList)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(StorageItem, nsIDOMStorageItem)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageItem)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMToString)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(StorageEvent, nsIDOMStorageEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageEvent)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   // We just want this to have classinfo so it gets mark callbacks for marking
    1:   // event listeners.
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(WindowRoot, nsISupports)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(DOMParser, nsIDOMParser)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMParser)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMParserJS)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLSerializer, nsIDOMSerializer)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSerializer)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XMLHttpRequest, nsIXMLHttpRequest)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequest)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIJSXMLHttpRequest)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIInterfaceRequestor)
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLHttpProgressEvent, nsIDOMEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLSProgressEvent)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProgressEvent)
16665:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
16968: #ifdef MOZ_SVG
    1:   DOM_CLASSINFO_MAP_BEGIN(SVGForeignObjectElement, nsIDOMSVGForeignObjectElement)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGForeignObjectElement)
    1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: #endif
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(XULCommandEvent, nsIDOMXULCommandEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULCommandEvent)
    1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
    1:   DOM_CLASSINFO_MAP_BEGIN(CommandEvent, nsIDOMCommandEvent)
    1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCommandEvent)
    1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
    1:   DOM_CLASSINFO_MAP_END
    1: 
 1938:   DOM_CLASSINFO_MAP_BEGIN(OfflineResourceList, nsIDOMOfflineResourceList)
 1938:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMOfflineResourceList)
15075:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 1938:   DOM_CLASSINFO_MAP_END
 1938: 
 3254:   DOM_CLASSINFO_MAP_BEGIN(LoadStatus, nsIDOMLoadStatus)
 3254:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLoadStatus)
 3254:   DOM_CLASSINFO_MAP_END
 3254: 
 3254:   DOM_CLASSINFO_MAP_BEGIN(LoadStatusEvent, nsIDOMLoadStatusEvent)
 3254:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLoadStatusEvent)
 3254:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 3254:   DOM_CLASSINFO_MAP_END
 3254: 
12915:   DOM_CLASSINFO_MAP_BEGIN(ClientRect, nsIDOMClientRect)
12915:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientRect)
12915:    DOM_CLASSINFO_MAP_END
12915:  
12915:   DOM_CLASSINFO_MAP_BEGIN(ClientRectList, nsIDOMClientRectList)
12915:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientRectList)
 2014:   DOM_CLASSINFO_MAP_END
 2014: 
 3940:   DOM_CLASSINFO_MAP_BEGIN(FileList, nsIDOMFileList)
 3940:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileList)
 3940:   DOM_CLASSINFO_MAP_END
 3940: 
 3940:   DOM_CLASSINFO_MAP_BEGIN(File, nsIDOMFile)
 3940:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFile)
 3940:   DOM_CLASSINFO_MAP_END
 3940: 
 3940:   DOM_CLASSINFO_MAP_BEGIN(FileException, nsIDOMFileException)
 3940:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileException)
 3940:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
 3940:   DOM_CLASSINFO_MAP_END
 3940: 
 8679:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ModalContentWindow, nsIDOMWindow)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindow)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMJSWindow)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindowInternal)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMViewCSS)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAbstractView)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageWindow)
 4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMModalContentWindow)
 4040:   DOM_CLASSINFO_MAP_END
 4040: 
 8868:   DOM_CLASSINFO_MAP_BEGIN(DataContainerEvent, nsIDOMDataContainerEvent)
 8868:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDataContainerEvent)
 8868:   DOM_CLASSINFO_MAP_END
 8868: 
10976:   DOM_CLASSINFO_MAP_BEGIN(MessageEvent, nsIDOMMessageEvent)
10976:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMessageEvent)
10976:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
10976:   DOM_CLASSINFO_MAP_END
10976: 
16677:   DOM_CLASSINFO_MAP_BEGIN(GeoGeolocation, nsIDOMGeoGeolocation)
16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoGeolocation)
16677:   DOM_CLASSINFO_MAP_END
16677: 
16677:   DOM_CLASSINFO_MAP_BEGIN(GeoPosition, nsIDOMGeoPosition)
16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoPosition)
16677:   DOM_CLASSINFO_MAP_END
16677: 
16677:   DOM_CLASSINFO_MAP_BEGIN(GeoPositionError, nsIDOMGeoPositionError)
16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoPositionError)
15958:   DOM_CLASSINFO_MAP_END
15958: 
16545:   DOM_CLASSINFO_MAP_BEGIN(CSSFontFaceRule, nsIDOMCSSFontFaceRule)
16545:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSFontFaceRule)
16545:   DOM_CLASSINFO_MAP_END
16545: 
16545:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSFontFaceStyleDecl,
16545:                                       nsIDOMCSSStyleDeclaration)
16545:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleDeclaration)
16545:   DOM_CLASSINFO_MAP_END
16545: 
15751: #if defined(MOZ_MEDIA)
15751:   DOM_CLASSINFO_MAP_BEGIN(HTMLVideoElement, nsIDOMHTMLVideoElement)
15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLVideoElement)
15751:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
15751:   DOM_CLASSINFO_MAP_END
15751: 
15751:   DOM_CLASSINFO_MAP_BEGIN(HTMLSourceElement, nsIDOMHTMLSourceElement)
15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLSourceElement)
15751:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
15751:   DOM_CLASSINFO_MAP_END
15751: 
16665:   DOM_CLASSINFO_MAP_BEGIN(HTMLMediaError, nsIDOMHTMLMediaError)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMediaError)
16665:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
16665:   DOM_CLASSINFO_MAP_END
16665: 
16665:   DOM_CLASSINFO_MAP_BEGIN(HTMLAudioElement, nsIDOMHTMLAudioElement)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAudioElement)
16665:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
16665:   DOM_CLASSINFO_MAP_END
18445: 
16665: #endif
15751:   DOM_CLASSINFO_MAP_BEGIN(ProgressEvent, nsIDOMProgressEvent)
15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProgressEvent)
15751:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
15751:   DOM_CLASSINFO_MAP_END
15751: 
16665:   DOM_CLASSINFO_MAP_BEGIN(XMLHttpRequestUpload, nsIXMLHttpRequestUpload)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestEventTarget)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestUpload)
16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
16665:   DOM_CLASSINFO_MAP_END
15751: 
18445:   DOM_CLASSINFO_MAP_BEGIN(DataTransfer, nsIDOMDataTransfer)
18445:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDataTransfer)
18445:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSDataTransfer)
18445:   DOM_CLASSINFO_MAP_END
18445: 
19380:   DOM_CLASSINFO_MAP_BEGIN(NotifyPaintEvent, nsIDOMNotifyPaintEvent)
19380:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNotifyPaintEvent)
19380:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
19380:   DOM_CLASSINFO_MAP_END
19380: 
20793:   DOM_CLASSINFO_MAP_BEGIN(SimpleGestureEvent, nsIDOMSimpleGestureEvent)
20793:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSimpleGestureEvent)
20793:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
20793:   DOM_CLASSINFO_MAP_END
20793: 
21291: #ifdef MOZ_MATHML
21291:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(MathMLElement, nsIDOMElement)
21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElement)
21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSElement)
21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOM3Node)
21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
21291:   DOM_CLASSINFO_MAP_END
21291: #endif
21291: 
21376:   DOM_CLASSINFO_MAP_BEGIN(Worker, nsIWorker)
21376:     DOM_CLASSINFO_MAP_ENTRY(nsIWorker)
21376:     DOM_CLASSINFO_MAP_ENTRY(nsIAbstractWorker)
21376:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
21376:   DOM_CLASSINFO_MAP_END
21376: 
    1: #ifdef NS_DEBUG
    1:   {
    1:     PRUint32 i = NS_ARRAY_LENGTH(sClassInfoData);
    1: 
    1:     if (i != eDOMClassInfoIDCount) {
    1:       NS_ERROR("The number of items in sClassInfoData doesn't match the "
    1:                "number of nsIDOMClassInfo ID's, this is bad! Fix it!");
    1: 
    1:       return NS_ERROR_NOT_INITIALIZED;
    1:     }
    1: 
    1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
    1:       if (!sClassInfoData[i].u.mConstructorFptr ||
    1:           sClassInfoData[i].mDebugID != i) {
    1:         NS_ERROR("Class info data out of sync, you forgot to update "
    1:                  "nsDOMClassInfo.h and nsDOMClassInfo.cpp! Fix this, "
    1:                  "mozilla will not work without this fixed!");
    1: 
    1:         return NS_ERROR_NOT_INITIALIZED;
    1:       }
    1:     }
    1: 
    1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
    1:       if (!sClassInfoData[i].mInterfaces) {
    1:         NS_ERROR("Class info data without an interface list! Fix this, "
    1:                  "mozilla will not work without this fixed!");
    1: 
    1:         return NS_ERROR_NOT_INITIALIZED;
    1:       }
    1:     }
    1:   }
    1: #endif
    1: 
    1:   // Initialize static JSString's
    1:   DefineStaticJSVals(cx);
    1: 
    1:   PRInt32 i;
    1: 
    1:   for (i = 0; i < eDOMClassInfoIDCount; ++i) {
    1:     RegisterClassName(i);
    1:   }
    1: 
    1:   for (i = 0; i < eDOMClassInfoIDCount; ++i) {
    1:     RegisterClassProtos(i);
    1:   }
    1: 
    1:   PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:   sDoSecurityCheckInAddProperty = PR_FALSE;
    1:   RegisterExternalClasses();
    1:   sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:   sDisableDocumentAllSupport =
    1:     nsContentUtils::GetBoolPref("browser.dom.document.all.disabled");
    1: 
    1:   sDisableGlobalScopePollutionSupport =
    1:     nsContentUtils::GetBoolPref("browser.dom.global_scope_pollution.disabled");
    1: 
    1:   sIsInitialized = PR_TRUE;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // static
    1: PRInt32
    1: nsDOMClassInfo::GetArrayIndexFromId(JSContext *cx, jsval id, PRBool *aIsNumber)
    1: {
    1:   jsdouble array_index;
    1: 
    1:   if (aIsNumber) {
    1:     *aIsNumber = PR_FALSE;
    1:   }
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   if (!::JS_ValueToNumber(cx, id, &array_index)) {
    1:     return -1;
    1:   }
    1: 
    1:   jsint i = -1;
    1: 
    1:   if (!JSDOUBLE_IS_INT(array_index, i)) {
    1:     return -1;
    1:   }
    1: 
    1:   if (aIsNumber) {
    1:     *aIsNumber = PR_TRUE;
    1:   }
    1: 
    1:   return i;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetInterfaces(PRUint32 *aCount, nsIID ***aArray)
    1: {
    1:   PRUint32 count = 0;
    1: 
    1:   while (mData->mInterfaces[count]) {
    1:     count++;
    1:   }
    1: 
    1:   *aCount = count;
    1: 
    1:   if (!count) {
    1:     *aArray = nsnull;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
 3233:   *aArray = static_cast<nsIID **>(nsMemory::Alloc(count * sizeof(nsIID *)));
    1:   NS_ENSURE_TRUE(*aArray, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:   PRUint32 i;
    1:   for (i = 0; i < count; i++) {
 3233:     nsIID *iid = static_cast<nsIID *>(nsMemory::Clone(mData->mInterfaces[i],
    1:                                                          sizeof(nsIID)));
    1: 
    1:     if (!iid) {
    1:       NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(i, *aArray);
    1: 
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1:     }
    1: 
    1:     *((*aArray) + i) = iid;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetHelperForLanguage(PRUint32 language, nsISupports **_retval)
    1: {
    1:   if (language == nsIProgrammingLanguage::JAVASCRIPT) {
 3233:     *_retval = static_cast<nsIXPCScriptable *>(this);
    1: 
    1:     NS_ADDREF(*_retval);
    1:   } else {
    1:     *_retval = nsnull;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetContractID(char **aContractID)
    1: {
    1:   *aContractID = nsnull;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetClassDescription(char **aClassDescription)
    1: {
    1:   return GetClassName(aClassDescription);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetClassID(nsCID **aClassID)
    1: {
    1:   *aClassID = nsnull;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetClassIDNoAlloc(nsCID *aClassID)
    1: {
    1:   return NS_ERROR_NOT_AVAILABLE;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetImplementationLanguage(PRUint32 *aImplLanguage)
    1: {
    1:   *aImplLanguage = nsIProgrammingLanguage::CPLUSPLUS;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetFlags(PRUint32 *aFlags)
    1: {
    1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // nsIXPCScriptable
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetClassName(char **aClassName)
    1: {
    1:   *aClassName = NS_strdup(mData->mName);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetScriptableFlags(PRUint32 *aFlags)
    1: {
    1:   *aFlags = mData->mScriptableFlags;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                           JSObject *globalObj, JSObject **parentObj)
    1: {
    1:   *parentObj = globalObj;
    1: 
    1:   nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1:   nsresult rv =
    1:     sXPConnect->GetWrappedNativeOfJSObject(cx, globalObj,
    1:                                            getter_AddRefs(wrapper));
    1:   if (NS_FAILED(rv)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsPIDOMWindow> piwin = do_QueryWrappedNative(wrapper);
    1: 
    1:   if (!piwin) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (piwin->IsOuterWindow()) {
    1:     *parentObj = ((nsGlobalWindow *)piwin.get())->
    1:       GetCurrentInnerWindowInternal()->GetGlobalJSObject();
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Create(nsIXPConnectWrappedNative *wrapper,
    1:                        JSContext *cx, JSObject *obj)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Create Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::PostCreate(nsIXPConnectWrappedNative *wrapper,
    1:                            JSContext *cx, JSObject *obj)
    1: {
    1:   static const nsIID *sSupportsIID = &NS_GET_IID(nsISupports);
    1: 
    1:   // This is safe because...
    1:   if (mData->mProtoChainInterface == sSupportsIID ||
    1:       !mData->mProtoChainInterface) {
    1:     return NS_OK;
    1:   }
    1: 
    1: #ifdef DEBUG
    1:   {
    1:     nsCOMPtr<nsIScriptGlobalObject> sgo(do_QueryWrappedNative(wrapper));
    1: 
    1:     NS_ASSERTION(!sgo || sgo->GetGlobalJSObject() == nsnull,
    1:                  "Multiple wrappers created for global object!");
    1:   }
    1: #endif
    1: 
    1:   JSObject *proto = nsnull;
    1: 
    1:   wrapper->GetJSObjectPrototype(&proto);
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   JSObject *proto_proto = ::JS_GetPrototype(cx, proto);
    1:   if (!proto_proto) {
    1:     // If our prototype doesn't have a proto, then we've probably already
    1:     // wrapped this object and someone's done something evil, like set
    1:     // our prototype's proto to null, so bail.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   JSClass *proto_proto_class = JS_GET_CLASS(cx, proto_proto);
    1:   if (proto_proto_class != sObjectClass) {
    1:     // We've just wrapped an object of a type that has been wrapped on
    1:     // this scope already so the prototype of the xpcwrapped native's
    1:     // prototype is already set up.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1: #ifdef DEBUG
    1:   if (mData->mHasClassInterface) {
    1:     nsCOMPtr<nsIInterfaceInfoManager>
    1:       iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1: 
    1:     if (iim) {
    1:       nsCOMPtr<nsIInterfaceInfo> if_info;
    1:       iim->GetInfoForIID(mData->mProtoChainInterface,
    1:                          getter_AddRefs(if_info));
    1: 
    1:       if (if_info) {
    1:         nsXPIDLCString name;
    1:         if_info->GetName(getter_Copies(name));
    1:         NS_ASSERTION(nsCRT::strcmp(CutPrefix(name), mData->mName) == 0,
    1:                      "Class name and proto chain interface name mismatch!");
    1:       }
    1:     }
    1:   }
    1: #endif
    1: 
    1:   // Look up the name of our constructor in the current global scope. We do
    1:   // this because triggering this lookup can cause us to call
    1:   // nsWindowSH::NewResolve, which will end up in nsWindowSH::GlobalResolve.
    1:   // GlobalResolve does some prototype magic (which satisfies the if condition
    1:   // above) in order to make sure that prototype delegation works correctly.
    1:   // Consider if a site sets HTMLElement.prototype.foopy = function () { ... }
    1:   // Now, calling document.body.foopy() needs to ensure that looking up foopy
16677:   // on document.body's prototype will find the right function. Thisb
    1:   // LookupProperty accomplishes that.
    1:   // XXX This shouldn't need to go through the JS engine. Instead, we should
    1:   // be calling nsWindowSH::GlobalResolve directly.
 4427:   JSObject *global = ::JS_GetGlobalForObject(cx, obj);
    1:   jsval val;
18543:   if (!::JS_LookupPropertyWithFlags(cx, global, mData->mName,
18543:                                     JSRESOLVE_CLASSNAME, &val)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, jsval *vp,
    1:                             PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::AddProperty Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, jsval *vp,
    1:                             PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::DelProperty Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, jsval *vp,
    1:                             PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::GetProperty Don't call me!");
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, jsval *vp,
    1:                             PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::SetProperty Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, PRBool *_retval)
    1: {
12678: #ifdef DEBUG
12678:   if (!sSecMan) {
12678:     NS_ERROR("No security manager!!!");
12678:     return NS_OK;
12678:   }
    1: 
    1:   // Ask the security manager if it's OK to enumerate
    1:   nsresult rv =
    1:     sSecMan->CheckPropertyAccess(cx, obj, mData->mName, sEnumerate_id,
    1:                                  nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
    1: 
12678:   NS_ASSERTION(NS_SUCCEEDED(rv),
12678:                "XOWs should have stopped us from getting here!!!");
12678: #endif
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::NewEnumerate(nsIXPConnectWrappedNative *wrapper,
    1:                              JSContext *cx, JSObject *obj, PRUint32 enum_op,
    1:                              jsval *statep, jsid *idp, PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::NewEnumerate Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: nsresult
    1: nsDOMClassInfo::ResolveConstructor(JSContext *cx, JSObject *obj,
    1:                                    JSObject **objp)
    1: {
 4427:   JSObject *global = ::JS_GetGlobalForObject(cx, obj);
    1: 
    1:   jsval val;
    1:   JSAutoRequest ar(cx);
13196:   if (!::JS_LookupProperty(cx, global, mData->mName, &val)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   if (!JSVAL_IS_PRIMITIVE(val)) {
    1:     // If val is not an (non-null) object there either is no
    1:     // constructor for this class, or someone messed with
    1:     // window.classname, just fall through and let the JS engine
    1:     // return the Object constructor.
    1: 
    1:     JSString *str = JSVAL_TO_STRING(sConstructor_id);
    1:     if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                ::JS_GetStringLength(str), val, nsnull, nsnull,
    1:                                JSPROP_ENUMERATE)) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     *objp = obj;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                            JSObject *obj, jsval id, PRUint32 flags,
    1:                            JSObject **objp, PRBool *_retval)
    1: {
    1:   if (id == sConstructor_id && !(flags & JSRESOLVE_ASSIGNING)) {
    1:     return ResolveConstructor(cx, obj, objp);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Convert(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, PRUint32 type, jsval *vp,
    1:                         PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Convert Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Finalize Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::CheckAccess(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, PRUint32 mode,
    1:                             jsval *vp, PRBool *_retval)
    1: {
    1:   PRUint32 mode_type = mode & JSACC_TYPEMASK;
    1: 
    1:   if ((mode_type == JSACC_WATCH ||
    1:        mode_type == JSACC_PROTO ||
    1:        mode_type == JSACC_PARENT) &&
    1:       sSecMan) {
    1: 
    1:     JSObject *real_obj = nsnull;
    1:     nsresult rv = wrapper->GetJSObject(&real_obj);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     rv =
    1:       sSecMan->CheckPropertyAccess(cx, real_obj, mData->mName, id,
    1:                                    nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
    1: 
    1:     if (NS_FAILED(rv)) {
    1:       // Let XPConnect know that the access was not granted.
    1:       *_retval = PR_FALSE;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                      JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
    1:                      PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Call Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, PRUint32 argc, jsval *argv,
    1:                           jsval *vp, PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Construct Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::HasInstance(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval val, PRBool *bp,
    1:                             PRBool *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::HasInstance Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
 1025: nsDOMClassInfo::Trace(nsIXPConnectWrappedNative *wrapper, JSTracer *trc,
 1025:                       JSObject *obj)
 1025: {
 1025:   NS_WARNING("nsDOMClassInfo::Trace Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::Equality(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                          JSObject * obj, jsval val, PRBool *bp)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::Equality Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::OuterObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                             JSObject * obj, JSObject * *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::OuterObject Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMClassInfo::InnerObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                             JSObject * obj, JSObject * *_retval)
    1: {
    1:   NS_WARNING("nsDOMClassInfo::InnerObject Don't call me!");
    1: 
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
18543: NS_IMETHODIMP
18543: nsDOMClassInfo::PostCreatePrototype(JSContext * cx, JSObject * proto)
18543: {
18543:   PRUint32 flags = (mData->mScriptableFlags & DONT_ENUM_STATIC_PROPS)
18543:                    ? 0
18543:                    : JSPROP_ENUMERATE;
18543: 
18543:   PRUint32 count = 0;
18543:   while (mData->mInterfaces[count]) {
18543:     count++;
18543:   }
18543: 
18543:   if (!sXPConnect->DefineDOMQuickStubs(cx, proto, flags,
18543:                                        count, mData->mInterfaces)) {
18543:     JS_ClearPendingException(cx);
18543:   }
18543:   return NS_OK;
18543: }
18543: 
    1: // static
    1: nsIClassInfo *
    1: NS_GetDOMClassInfoInstance(nsDOMClassInfoID aID)
    1: {
    1:   if (aID >= eDOMClassInfoIDCount) {
    1:     NS_ERROR("Bad ID!");
    1: 
    1:     return nsnull;
    1:   }
    1: 
    1:   if (!nsDOMClassInfo::sIsInitialized) {
    1:     nsresult rv = nsDOMClassInfo::Init();
    1: 
    1:     NS_ENSURE_SUCCESS(rv, nsnull);
    1:   }
    1: 
    1:   if (!sClassInfoData[aID].mCachedClassInfo) {
    1:     nsDOMClassInfoData& data = sClassInfoData[aID];
    1: 
    1:     data.mCachedClassInfo = data.u.mConstructorFptr(&data);
    1:     NS_ENSURE_TRUE(data.mCachedClassInfo, nsnull);
    1: 
    1:     NS_ADDREF(data.mCachedClassInfo);
    1:   }
    1: 
    1:   NS_ASSERTION(!IS_EXTERNAL(sClassInfoData[aID].mCachedClassInfo),
    1:                "This is bad, internal class marked as external!");
    1: 
    1:   return sClassInfoData[aID].mCachedClassInfo;
    1: }
    1: 
    1: // static
    1: nsIClassInfo *
    1: nsDOMClassInfo::GetClassInfoInstance(nsDOMClassInfoData* aData)
    1: {
    1:   NS_ASSERTION(IS_EXTERNAL(aData->mCachedClassInfo)
    1:                || !aData->mCachedClassInfo,
    1:                "This is bad, external class marked as internal!");
    1: 
    1:   if (!aData->mCachedClassInfo) {
    1:     if (aData->u.mExternalConstructorFptr) {
    1:       aData->mCachedClassInfo =
    1:         aData->u.mExternalConstructorFptr(aData->mName);
    1:     } else {
    1:       aData->mCachedClassInfo = nsDOMGenericSH::doCreate(aData);
    1:     }
    1:     NS_ENSURE_TRUE(aData->mCachedClassInfo, nsnull);
    1: 
    1:     NS_ADDREF(aData->mCachedClassInfo);
    1:     aData->mCachedClassInfo = MARK_EXTERNAL(aData->mCachedClassInfo);
    1:   }
    1: 
    1:   return GET_CLEAN_CI_PTR(aData->mCachedClassInfo);
    1: }
    1: 
    1: // static
21618: void
    1: nsDOMClassInfo::PreserveNodeWrapper(nsIXPConnectWrappedNative *aWrapper)
    1: {
21618:   nsWrapperCache* cache = nsnull;
21618:   CallQueryInterface(aWrapper->Native(), &cache);
21618:   if (cache) {
21618:     cache->PreserveWrapper();
21618:   }
    1: }
    1: 
    1: 
    1: // static
    1: void
    1: nsDOMClassInfo::ShutDown()
    1: {
    1:   if (sClassInfoData[0].u.mConstructorFptr) {
    1:     PRUint32 i;
    1: 
    1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
    1:       NS_IF_RELEASE(sClassInfoData[i].mCachedClassInfo);
    1:     }
    1:   }
    1: 
    1:   sTop_id             = JSVAL_VOID;
    1:   sParent_id          = JSVAL_VOID;
    1:   sScrollbars_id      = JSVAL_VOID;
    1:   sLocation_id        = JSVAL_VOID;
    1:   sConstructor_id     = JSVAL_VOID;
    1:   s_content_id        = JSVAL_VOID;
    1:   sContent_id         = JSVAL_VOID;
    1:   sMenubar_id         = JSVAL_VOID;
    1:   sToolbar_id         = JSVAL_VOID;
    1:   sLocationbar_id     = JSVAL_VOID;
    1:   sPersonalbar_id     = JSVAL_VOID;
    1:   sStatusbar_id       = JSVAL_VOID;
    1:   sDirectories_id     = JSVAL_VOID;
    1:   sControllers_id     = JSVAL_VOID;
    1:   sLength_id          = JSVAL_VOID;
    1:   sInnerHeight_id     = JSVAL_VOID;
    1:   sInnerWidth_id      = JSVAL_VOID;
    1:   sOuterHeight_id     = JSVAL_VOID;
    1:   sOuterWidth_id      = JSVAL_VOID;
    1:   sScreenX_id         = JSVAL_VOID;
    1:   sScreenY_id         = JSVAL_VOID;
    1:   sStatus_id          = JSVAL_VOID;
    1:   sName_id            = JSVAL_VOID;
    1:   sOnmousedown_id     = JSVAL_VOID;
    1:   sOnmouseup_id       = JSVAL_VOID;
    1:   sOnclick_id         = JSVAL_VOID;
    1:   sOndblclick_id      = JSVAL_VOID;
    1:   sOncontextmenu_id   = JSVAL_VOID;
    1:   sOnmouseover_id     = JSVAL_VOID;
    1:   sOnmouseout_id      = JSVAL_VOID;
    1:   sOnkeydown_id       = JSVAL_VOID;
    1:   sOnkeyup_id         = JSVAL_VOID;
    1:   sOnkeypress_id      = JSVAL_VOID;
    1:   sOnmousemove_id     = JSVAL_VOID;
    1:   sOnfocus_id         = JSVAL_VOID;
    1:   sOnblur_id          = JSVAL_VOID;
    1:   sOnsubmit_id        = JSVAL_VOID;
    1:   sOnreset_id         = JSVAL_VOID;
    1:   sOnchange_id        = JSVAL_VOID;
    1:   sOnselect_id        = JSVAL_VOID;
    1:   sOnload_id          = JSVAL_VOID;
    1:   sOnbeforeunload_id  = JSVAL_VOID;
    1:   sOnunload_id        = JSVAL_VOID;
    1:   sOnpageshow_id      = JSVAL_VOID;
    1:   sOnpagehide_id      = JSVAL_VOID;
    1:   sOnabort_id         = JSVAL_VOID;
    1:   sOnerror_id         = JSVAL_VOID;
    1:   sOnpaint_id         = JSVAL_VOID;
    1:   sOnresize_id        = JSVAL_VOID;
    1:   sOnscroll_id        = JSVAL_VOID;
    1:   sScrollIntoView_id  = JSVAL_VOID;
    1:   sScrollX_id         = JSVAL_VOID;
    1:   sScrollY_id         = JSVAL_VOID;
    1:   sScrollMaxX_id      = JSVAL_VOID;
    1:   sScrollMaxY_id      = JSVAL_VOID;
    1:   sOpen_id            = JSVAL_VOID;
    1:   sItem_id            = JSVAL_VOID;
    1:   sEnumerate_id       = JSVAL_VOID;
    1:   sNavigator_id       = JSVAL_VOID;
    1:   sDocument_id        = JSVAL_VOID;
    1:   sWindow_id          = JSVAL_VOID;
    1:   sFrames_id          = JSVAL_VOID;
    1:   sSelf_id            = JSVAL_VOID;
    1:   sOpener_id          = JSVAL_VOID;
    1:   sAdd_id             = JSVAL_VOID;
    1:   sAll_id             = JSVAL_VOID;
    1:   sTags_id            = JSVAL_VOID;
    1:   sAddEventListener_id= JSVAL_VOID;
    1:   sBaseURIObject_id   = JSVAL_VOID;
    1:   sNodePrincipal_id   = JSVAL_VOID;
    1:   sDocumentURIObject_id=JSVAL_VOID;
 4010:   sOncopy_id          = JSVAL_VOID;
 4010:   sOncut_id           = JSVAL_VOID;
 4010:   sOnpaste_id         = JSVAL_VOID;
 6774:   sJava_id            = JSVAL_VOID;
 6774:   sPackages_id        = JSVAL_VOID;
15819: #ifdef OJI
 6774:   sNetscape_id        = JSVAL_VOID;
 6774:   sSun_id             = JSVAL_VOID;
 6774:   sJavaObject_id      = JSVAL_VOID;
 6774:   sJavaClass_id       = JSVAL_VOID;
 6774:   sJavaArray_id       = JSVAL_VOID;
 6774:   sJavaMember_id      = JSVAL_VOID;
 6774: #endif
    1: 
    1:   NS_IF_RELEASE(sXPConnect);
    1:   NS_IF_RELEASE(sSecMan);
    1:   sIsInitialized = PR_FALSE;
    1: }
    1: 
    1: // Window helper
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                       JSObject *globalObj, JSObject **parentObj)
    1: {
    1:   // Since this is one of the first calls we'll get from XPConnect,
    1:   // grab the pointer to the Object class so we'll have it later on.
    1: 
    1:   if (!sObjectClass) {
    1:     JSObject *obj, *proto = globalObj;
    1:     JSAutoRequest ar(cx);
    1: 
    1:     do {
    1:       obj = proto;
    1:       proto = ::JS_GetPrototype(cx, obj);
    1:     } while (proto);
    1: 
    1:     sObjectClass = JS_GET_CLASS(cx, obj);
    1:   }
    1: 
    1:   // Normally ::PreCreate() is used to give XPConnect the parent
    1:   // object for the object that's being wrapped, this parent object is
    1:   // set as the parent of the wrapper and it's also used to find the
    1:   // right scope for the object being wrapped. Now, in the case of the
    1:   // global object the wrapper shouldn't have a parent but we supply
    1:   // one here anyway (the global object itself) and this will be used
    1:   // by XPConnect only to find the right scope, once the scope is
    1:   // found XPConnect will find the existing wrapper (which always
    1:   // exists since it's created on window construction), since an
    1:   // existing wrapper is found the parent we supply here is ignored
    1:   // after the wrapper is found.
    1: 
    1:   nsCOMPtr<nsIScriptGlobalObject> sgo(do_QueryInterface(nativeObj));
    1:   NS_ASSERTION(sgo, "nativeObj not a global object!");
    1: 
    1:   if (sgo) {
    1:     *parentObj = sgo->GetGlobalJSObject();
    1: 
    1:     if (*parentObj) {
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // We're most likely being called when the global object is
    1:   // created, at that point we won't get a nsIScriptContext but we
    1:   // know we're called on the correct context so we return globalObj
    1: 
    1:   *parentObj = globalObj;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: // This JS class piggybacks on nsHTMLDocumentSH::ReleaseDocument()...
    1: 
    1: static JSClass sGlobalScopePolluterClass = {
    1:   "Global Scope Polluter",
    1:   JSCLASS_HAS_PRIVATE | JSCLASS_PRIVATE_IS_NSISUPPORTS | JSCLASS_NEW_RESOLVE,
    1:   nsWindowSH::SecurityCheckOnSetProp, nsWindowSH::SecurityCheckOnSetProp,
    1:   nsWindowSH::GlobalScopePolluterGetProperty,
    1:   nsWindowSH::SecurityCheckOnSetProp, JS_EnumerateStub,
    1:   (JSResolveOp)nsWindowSH::GlobalScopePolluterNewResolve, JS_ConvertStub,
    1:   nsHTMLDocumentSH::ReleaseDocument
    1: };
    1: 
    1: 
    1: // static
18907: JSBool
    1: nsWindowSH::GlobalScopePolluterGetProperty(JSContext *cx, JSObject *obj,
    1:                                            jsval id, jsval *vp)
    1: {
    1:   // Someone is accessing a element by referencing its name/id in the
    1:   // global scope, do a security check to make sure that's ok.
    1: 
    1:   nsresult rv =
 4427:     sSecMan->CheckPropertyAccess(cx, ::JS_GetGlobalForObject(cx, obj),
 4427:                                  "Window", id,
    1:                                  nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
    1: 
    1:   if (NS_FAILED(rv)) {
    1:     // The security check failed. The security manager set a JS
    1:     // exception for us.
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   // Print a warning on the console so developers have a chance to
    1:   // catch and fix these mistakes.
    1:   PrintWarningOnConsole(cx, "GlobalScopeElementReference");
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
    1: // static
18907: JSBool
    1: nsWindowSH::SecurityCheckOnSetProp(JSContext *cx, JSObject *obj, jsval id,
    1:                                    jsval *vp)
    1: {
    1:   // Someone is accessing a element by referencing its name/id in the
    1:   // global scope, do a security check to make sure that's ok.
    1: 
    1:   nsresult rv =
 4427:     sSecMan->CheckPropertyAccess(cx, ::JS_GetGlobalForObject(cx, obj),
 4427:                                  "Window", id,
    1:                                  nsIXPCSecurityManager::ACCESS_SET_PROPERTY);
    1: 
    1:   // If !NS_SUCCEEDED(rv) the security check failed. The security
    1:   // manager set a JS exception for us.
    1:   return NS_SUCCEEDED(rv);
    1: }
    1: 
    1: // static
18907: JSBool
    1: nsWindowSH::GlobalScopePolluterNewResolve(JSContext *cx, JSObject *obj,
    1:                                           jsval id, uintN flags,
    1:                                           JSObject **objp)
    1: {
    1:   if (flags & (JSRESOLVE_ASSIGNING | JSRESOLVE_DECLARING |
    1:                JSRESOLVE_CLASSNAME | JSRESOLVE_QUALIFIED) ||
    1:       !JSVAL_IS_STRING(id)) {
    1:     // Nothing to do here if we're either assigning or declaring,
    1:     // resolving a class name, doing a qualified resolve, or
    1:     // resolving a number.
    1: 
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, obj);
    1:   nsCOMPtr<nsIDocument> document(do_QueryInterface(doc));
    1: 
    1:   if (!document ||
    1:       document->GetCompatibilityMode() != eCompatibility_NavQuirks) {
    1:     // If we don't have a document, or if the document is not in
    1:     // quirks mode, return early.
    1: 
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   JSObject *proto = ::JS_GetPrototype(cx, obj);
    1:   JSString *jsstr = JSVAL_TO_STRING(id);
    1:   JSBool hasProp;
    1: 
    1:   if (!proto || !::JS_HasUCProperty(cx, proto, ::JS_GetStringChars(jsstr),
    1:                                     ::JS_GetStringLength(jsstr), &hasProp) ||
    1:       hasProp) {
    1:     // No prototype, or the property exists on the prototype. Do
    1:     // nothing.
    1: 
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   nsDependentJSString str(jsstr);
    1:   nsCOMPtr<nsISupports> result;
    1: 
    1:   {
    1:     nsCOMPtr<nsIDOMDocument> dom_doc(do_QueryInterface(doc));
    1:     nsCOMPtr<nsIDOMElement> element;
    1: 
    1:     dom_doc->GetElementById(str, getter_AddRefs(element));
    1: 
    1:     result = element;
    1:   }
    1: 
    1:   if (!result) {
    1:     doc->ResolveName(str, nsnull, getter_AddRefs(result));
    1:   }
    1: 
    1:   if (result) {
    1:     jsval v;
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     nsresult rv = WrapNative(cx, obj, result, NS_GET_IID(nsISupports), &v,
22071:                              getter_AddRefs(holder));
 7872:     NS_ENSURE_SUCCESS(rv, JS_FALSE);
    1: 
    1:     if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(jsstr),
    1:                                ::JS_GetStringLength(jsstr), v, nsnull, nsnull,
    1:                                0)) {
    1:       nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_UNEXPECTED);
    1: 
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     *objp = obj;
    1:   }
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
    1: // static
    1: void
    1: nsWindowSH::InvalidateGlobalScopePolluter(JSContext *cx, JSObject *obj)
    1: {
    1:   JSObject *proto;
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   while ((proto = ::JS_GetPrototype(cx, obj))) {
    1:     if (JS_GET_CLASS(cx, proto) == &sGlobalScopePolluterClass) {
    1:       nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, proto);
    1: 
    1:       NS_IF_RELEASE(doc);
    1: 
    1:       ::JS_SetPrivate(cx, proto, nsnull);
    1: 
    1:       // Pull the global scope polluter out of the prototype chain so
    1:       // that it can be freed.
    1:       ::JS_SetPrototype(cx, obj, ::JS_GetPrototype(cx, proto));
    1: 
    1:       break;
    1:     }
    1: 
    1:     obj = proto;
    1:   }
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsWindowSH::InstallGlobalScopePolluter(JSContext *cx, JSObject *obj,
    1:                                        nsIHTMLDocument *doc)
    1: {
    1:   // If global scope pollution is disabled, or if our document is not
    1:   // a HTML document, do nothing
    1:   if (sDisableGlobalScopePollutionSupport || !doc) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   JSObject *gsp = ::JS_NewObject(cx, &sGlobalScopePolluterClass, nsnull, obj);
    1:   if (!gsp) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
    1:   JSObject *o = obj, *proto;
    1: 
    1:   // Find the place in the prototype chain where we want this global
    1:   // scope polluter (right before Object.prototype).
    1: 
    1:   while ((proto = ::JS_GetPrototype(cx, o))) {
    1:     if (JS_GET_CLASS(cx, proto) == sObjectClass) {
    1:       // Set the global scope polluters prototype to Object.prototype
    1:       if (!::JS_SetPrototype(cx, gsp, proto)) {
    1:         return NS_ERROR_UNEXPECTED;
    1:       }
    1: 
    1:       break;
    1:     }
    1: 
    1:     o = proto;
    1:   }
    1: 
    1:   // And then set the prototype of the object whose prototype was
    1:   // Object.prototype to be the global scope polluter.
    1:   if (!::JS_SetPrototype(cx, o, gsp)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   if (!::JS_SetPrivate(cx, gsp, doc)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   // The global scope polluter will release doc on destruction (or
    1:   // invalidation).
    1:   NS_ADDREF(doc);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: static
    1: already_AddRefed<nsIDOMWindow>
    1: GetChildFrame(nsGlobalWindow *win, jsval id)
    1: {
    1:   nsCOMPtr<nsIDOMWindowCollection> frames;
    1:   win->GetFrames(getter_AddRefs(frames));
    1: 
    1:   nsIDOMWindow *frame = nsnull;
    1: 
    1:   if (frames) {
    1:     frames->Item(JSVAL_TO_INT(id), &frame);
    1:   }
    1: 
    1:   return frame;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1: #ifdef DEBUG_SH_FORWARDING
    1:   {
    1:     JSString *jsstr = ::JS_ValueToString(cx, id);
    1:     if (jsstr) {
    1:       nsDependentJSString str(jsstr);
    1: 
    1:       if (win->IsInnerWindow()) {
    1: #ifdef DEBUG_PRINT_INNER
    1:         printf("Property '%s' get on inner window %p\n",
    1:               NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1: #endif
    1:       } else {
    1:         printf("Property '%s' get on outer window %p\n",
    1:               NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1:       }
    1:     }
    1:   }
    1: #endif
    1: 
 4042:   JSObject *realObj;
 4042:   wrapper->GetJSObject(&realObj);
 4042:   if (win->IsOuterWindow() && realObj == obj) {
    1:     // XXXjst: Do security checks here when we remove the security
    1:     // checks on the inner window.
    1: 
    1:     nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:     JSObject *innerObj;
    1:     if (innerWin && (innerObj = innerWin->GetGlobalJSObject())) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:       printf(" --- Forwarding get to inner window %p\n", (void *)innerWin);
    1: #endif
    1: 
    1:       // Forward the get to the inner object
    1:       if (JSVAL_IS_STRING(id)) {
    1:         JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:         *_retval = ::JS_GetUCProperty(cx, innerObj, ::JS_GetStringChars(str),
    1:                                       ::JS_GetStringLength(str), vp);
    1:       } else if (JSVAL_IS_INT(id)) {
    1:         *_retval = ::JS_GetElement(cx, innerObj, JSVAL_TO_INT(id), vp);
    1:       } else {
    1:         NS_ERROR("Write me!");
    1: 
    1:         return NS_ERROR_NOT_IMPLEMENTED;
    1:       }
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // The order in which things are done in this method are a bit
    1:   // whacky, that's because this method is *extremely* performace
    1:   // critical. Don't touch this unless you know what you're doing.
    1: 
    1:   if (JSVAL_IS_INT(id)) {
    1:     // If we're accessing a numeric property we'll treat that as if
    1:     // window.frames[n] is accessed (since window.frames === window),
    1:     // if window.frames[n] is a child frame, wrap the frame and return
    1:     // it without doing a security check.
    1: 
    1:     nsCOMPtr<nsIDOMWindow> frame = GetChildFrame(win, id);
    1:     nsresult rv = NS_OK;
    1: 
    1:     if (frame) {
    1:       // A numeric property accessed and the numeric property is a
    1:       // child frame, wrap the child frame without doing a security
    1:       // check and return.
    1: 
    1:       nsGlobalWindow *frameWin = (nsGlobalWindow *)frame.get();
    1: 
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:       rv = WrapNative(cx, frameWin->GetGlobalJSObject(), frame,
22071:                       NS_GET_IID(nsIDOMWindow), vp,
    1:                       getter_AddRefs(holder));
    1:     }
    1: 
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   if (JSVAL_IS_STRING(id) && !JSVAL_IS_PRIMITIVE(*vp) &&
    1:       ::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION) {
    1:     // A named property accessed which could have been resolved to a
    1:     // child frame in nsWindowSH::NewResolve() (*vp will tell us if
    1:     // that's the case). If *vp is a window object (i.e. a child
    1:     // frame), return without doing a security check.
 8636:     //
 8636:     // Calling GetWrappedNativeOfJSObject() is not all that cheap, so
 8636:     // only do that if the JSClass name is one that is likely to be a
 8636:     // window object.
 8636: 
 8636:     const char *name = JS_GET_CLASS(cx, JSVAL_TO_OBJECT(*vp))->name;
 8636: 
 8636:     // The list of Window class names here need to be kept in sync
15541:     // with the actual class names! The class name
15541:     // XPCCrossOriginWrapper needs to be handled here too as XOWs
15541:     // define child frame names with a XOW as the value, and thus
15541:     // we'll need to get through here with XOWs class name too.
 8636:     if ((*name == 'W' && strcmp(name, "Window") == 0) ||
 8636:         (*name == 'C' && strcmp(name, "ChromeWindow") == 0) ||
15541:         (*name == 'M' && strcmp(name, "ModalContentWindow") == 0) ||
15541:         (*name == 'X' && strcmp(name, "XPCCrossOriginWrapper") == 0)) {
    1:       nsCOMPtr<nsIXPConnectWrappedNative> vpwrapper;
    1:       sXPConnect->GetWrappedNativeOfJSObject(cx, JSVAL_TO_OBJECT(*vp),
    1:                                              getter_AddRefs(vpwrapper));
    1: 
    1:       if (vpwrapper) {
    1:         nsCOMPtr<nsIDOMWindow> window(do_QueryWrappedNative(vpwrapper));
    1: 
    1:         if (window) {
    1:           // Yup, *vp is a window object, return early (*vp is already
    1:           // the window, so no need to wrap it again).
    1: 
    1:           return NS_SUCCESS_I_DID_SOMETHING;
    1:         }
    1:       }
    1:     }
 8636:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1: #ifdef DEBUG_SH_FORWARDING
    1:   {
    1:     nsDependentJSString str(::JS_ValueToString(cx, id));
    1: 
    1:     if (win->IsInnerWindow()) {
    1: #ifdef DEBUG_PRINT_INNER
    1:       printf("Property '%s' set on inner window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1: #endif
    1:     } else {
    1:       printf("Property '%s' set on outer window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1:     }
    1:   }
    1: #endif
    1: 
 5280:   JSObject *realObj;
 5280:   wrapper->GetJSObject(&realObj);
 5280:   if (win->IsOuterWindow() && obj == realObj) {
    1:     // XXXjst: Do security checks here when we remove the security
    1:     // checks on the inner window.
    1: 
    1:     nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:     JSObject *innerObj;
    1:     if (innerWin && (innerObj = innerWin->GetGlobalJSObject())) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:       printf(" --- Forwarding set to inner window %p\n", (void *)innerWin);
    1: #endif
    1: 
    1:       // Forward the set to the inner object
    1:       if (JSVAL_IS_STRING(id)) {
    1:         JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:         *_retval = ::JS_SetUCProperty(cx, innerObj, ::JS_GetStringChars(str),
    1:                                       ::JS_GetStringLength(str), vp);
    1:       } else if (JSVAL_IS_INT(id)) {
    1:         *_retval = ::JS_SetElement(cx, innerObj, JSVAL_TO_INT(id), vp);
    1:       } else {
    1:         NS_ERROR("Write me!");
    1: 
    1:         return NS_ERROR_NOT_IMPLEMENTED;
    1:       }
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   if (id == sLocation_id) {
    1:     JSAutoRequest ar(cx);
    1: 
    1:     JSString *val = ::JS_ValueToString(cx, *vp);
    1:     NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIDOMWindowInternal> window(do_QueryWrappedNative(wrapper));
    1:     NS_ENSURE_TRUE(window, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIDOMLocation> location;
    1:     nsresult rv = window->GetLocation(getter_AddRefs(location));
 7839:     NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && location, rv);
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv = WrapNative(cx, obj, location, NS_GET_IID(nsIDOMLocation), vp,
    1:                     getter_AddRefs(holder));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     rv = location->SetHref(nsDependentJSString(val));
    1: 
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   return nsEventReceiverSH::SetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, jsval *vp,
    1:                         PRBool *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1: #ifdef DEBUG_SH_FORWARDING
    1:   {
    1:     nsDependentJSString str(::JS_ValueToString(cx, id));
    1: 
    1:     if (win->IsInnerWindow()) {
    1: #ifdef DEBUG_PRINT_INNER
    1:       printf("Property '%s' add on inner window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1: #endif
    1:     } else {
    1:       printf("Property '%s' add on outer window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1:     }
    1:   }
    1: #endif
    1: 
 5280:   JSObject *realObj;
 5280:   wrapper->GetJSObject(&realObj);
 5280:   if (win->IsOuterWindow() && obj == realObj) {
    1:     // XXXjst: Do security checks here when we remove the security
    1:     // checks on the inner window.
    1: 
    1:     nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:     JSObject *innerObj;
    1:     if (innerWin && (innerObj = innerWin->GetGlobalJSObject())) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:       printf(" --- Forwarding add to inner window %p\n", (void *)innerWin);
    1: #endif
    1: 
 3994:       jsid interned_id;
 3994:       if (!::JS_ValueToId(cx, id, &interned_id)) {
 3994:         *_retval = JS_FALSE;
 3994:         return NS_OK;
 3994:       }
 3994: 
 3994:       JSProperty *prop = nsnull;
 3994:       JSObject *pobj;
 3994:       if (!OBJ_LOOKUP_PROPERTY(cx, obj, interned_id, &pobj, &prop)) {
 3994:         *_retval = JS_FALSE;
 3994:         return NS_OK;
 3994:       }
 3994: 
 3994:       NS_ASSERTION(prop && obj == pobj, "The JS engine lies");
 3994:       JSScopeProperty *sprop = reinterpret_cast<JSScopeProperty *>(prop);
 3994:       JSPropertyOp getter = sprop->getter;
 3994:       JSPropertyOp setter = sprop->setter;
 3994:       uintN attrs = sprop->attrs;
 3994:       OBJ_DROP_PROPERTY(cx, pobj, prop);
 3994: 
 3984:       // Forward the add to the inner object
 3994:       *_retval = OBJ_DEFINE_PROPERTY(cx, innerObj, interned_id, *vp, getter,
 3994:                                      setter, attrs | JSPROP_ENUMERATE, nsnull);
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // If we're in a state where we're not supposed to do a security
    1:   // check, return early.
    1:   if (!sDoSecurityCheckInAddProperty) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (id == sLocation_id) {
    1:     // Don't allow adding a window.location setter or getter, allowing
    1:     // that could lead to security bugs (see bug 143369).
    1: 
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
    1:   return nsEventReceiverSH::AddProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, jsval *vp,
    1:                         PRBool *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1: #ifdef DEBUG_SH_FORWARDING
    1:   {
    1:     nsDependentJSString str(::JS_ValueToString(cx, id));
    1: 
    1:     if (win->IsInnerWindow()) {
    1: #ifdef DEBUG_PRINT_INNER
    1:       printf("Property '%s' del on inner window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1: #endif
    1:     } else {
    1:       printf("Property '%s' del on outer window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1:     }
    1:   }
    1: #endif
    1: 
    1:   if (win->IsOuterWindow() && !ObjectIsNativeWrapper(cx, obj)) {
    1:     // XXXjst: Do security checks here when we remove the security
    1:     // checks on the inner window.
    1: 
    1:     nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:     JSObject *innerObj;
    1:     if (innerWin && (innerObj = innerWin->GetGlobalJSObject())) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:       printf(" --- Forwarding del to inner window %p\n", (void *)innerWin);
    1: #endif
    1: 
    1:       // Forward the del to the inner object
    1:       jsid interned_id;
    1:       *_retval = (::JS_ValueToId(cx, id, &interned_id) &&
    1:                   OBJ_DELETE_PROPERTY(cx, innerObj, interned_id, vp));
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   if (id == sLocation_id) {
    1:     // Don't allow deleting window.location, allowing that could lead
    1:     // to security bugs (see bug 143369).
    1: 
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
 9848:   // Notify any XOWs on our outer window.
 9848: 
 9848:   nsGlobalWindow *outerWin = win->GetOuterWindowInternal();
 9848:   if (outerWin) {
 9848:     nsCOMPtr<nsIXPConnectWrappedNative> wn;
 9848:     nsIXPConnect *xpc = nsContentUtils::XPConnect();
 9848:     nsresult rv =
 9848:       xpc->GetWrappedNativeOfJSObject(cx, outerWin->GetGlobalJSObject(),
 9848:                                       getter_AddRefs(wn));
 9848:     NS_ENSURE_SUCCESS(rv, rv);
 9848: 
 9848:     rv = xpc->UpdateXOWs(cx, wn, nsIXPConnect::XPC_XOW_CLEARSCOPE);
 9848:     NS_ENSURE_SUCCESS(rv, rv);
 9848:   }
 9848: 
    1:   return NS_OK;
    1: }
    1: 
    1: static const char*
    1: FindConstructorContractID(PRInt32 aDOMClassInfoID)
    1: {
    1:   PRUint32 i;
    1:   for (i = 0; i < NS_ARRAY_LENGTH(kConstructorMap); ++i) {
    1:     if (kConstructorMap[i].mDOMClassInfoID == aDOMClassInfoID) {
    1:       return kConstructorMap[i].mContractID;
    1:     }
    1:   }
    1:   return nsnull;
    1: }
    1: 
21376: static nsDOMConstructorFunc
21376: FindConstructorFunc(PRInt32 aDOMClassInfoID)
21376: {
21376:   for (PRUint32 i = 0; i < NS_ARRAY_LENGTH(kConstructorFuncMap); ++i) {
21376:     if (kConstructorFuncMap[i].mDOMClassInfoID == aDOMClassInfoID) {
21376:       return kConstructorFuncMap[i].mConstructorFunc;
21376:     }
21376:   }
21376:   return nsnull;
21376: }
21376: 
    1: static nsresult
 8947: BaseStubConstructor(nsIWeakReference* aWeakOwner,
 8947:                     const nsGlobalNameStruct *name_struct, JSContext *cx,
    1:                     JSObject *obj, uintN argc, jsval *argv, jsval *rval)
    1: {
    1:   nsresult rv;
    1:   nsCOMPtr<nsISupports> native;
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
    1:     const char *contractid =
    1:       FindConstructorContractID(name_struct->mDOMClassInfoID);
21376:     if (contractid) {
    1:       native = do_CreateInstance(contractid, &rv);
21376:     }
21376:     else {
21376:       nsDOMConstructorFunc func =
21376:         FindConstructorFunc(name_struct->mDOMClassInfoID);
21376:       if (func) {
21376:         rv = func(getter_AddRefs(native));
21376:       }
21376:     }
    1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
    1:     native = do_CreateInstance(name_struct->mCID, &rv);
    1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
    1:     native = do_CreateInstance(name_struct->mAlias->mCID, &rv);
    1:   } else {
    1:     native = do_CreateInstance(*name_struct->mData->mConstructorCID, &rv);
    1:   }
    1:   if (NS_FAILED(rv)) {
    1:     NS_ERROR("Failed to create the object");
    1:     return rv;
    1:   }
    1: 
    1:   nsCOMPtr<nsIJSNativeInitializer> initializer(do_QueryInterface(native));
    1:   if (initializer) {
14783:     // Initialize object using the current inner window, but only if
14783:     // the caller can access it.
12313:     nsCOMPtr<nsPIDOMWindow> owner = do_QueryReferent(aWeakOwner);
14783:     nsPIDOMWindow* outerWindow = owner ? owner->GetOuterWindow() : nsnull;
14783:     nsPIDOMWindow* currentInner =
14783:       outerWindow ? outerWindow->GetCurrentInnerWindow() : nsnull;
14783:     if (!currentInner ||
14783:         (owner != currentInner &&
14783:          !nsContentUtils::CanCallerAccess(currentInner))) {
14783:       return NS_ERROR_DOM_SECURITY_ERR;
14783:     }
14783: 
14783:     rv = initializer->Initialize(currentInner, cx, obj, argc, argv);
    1:     if (NS_FAILED(rv)) {
    1:       return NS_ERROR_NOT_INITIALIZED;
    1:     }
    1:   }
    1: 
    1:   nsCOMPtr<nsIScriptObjectOwner> owner(do_QueryInterface(native));
    1:   if (owner) {
    1:     nsIScriptContext *context = nsJSUtils::GetStaticScriptContext(cx, obj);
    1:     if (!context) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     JSObject* new_obj;
    1:     rv = owner->GetScriptObject(context, (void**)&new_obj);
    1: 
    1:     if (NS_SUCCEEDED(rv)) {
    1:       *rval = OBJECT_TO_JSVAL(new_obj);
    1:     }
    1: 
    1:     return rv;
    1:   }
    1: 
    1:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:   rv = nsDOMGenericSH::WrapNative(cx, obj, native, NS_GET_IID(nsISupports),
22071:                                   rval, getter_AddRefs(holder));
    1: 
    1:   return rv;
    1: }
    1: 
    1: static nsresult
    1: DefineInterfaceConstants(JSContext *cx, JSObject *obj, const nsIID *aIID)
    1: {
    1:   nsCOMPtr<nsIInterfaceInfoManager>
    1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1:   NS_ENSURE_TRUE(iim, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsCOMPtr<nsIInterfaceInfo> if_info;
    1: 
    1:   nsresult rv = iim->GetInfoForIID(aIID, getter_AddRefs(if_info));
    1:   NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && if_info, rv);
    1: 
    1:   PRUint16 constant_count;
    1: 
    1:   if_info->GetConstantCount(&constant_count);
    1: 
    1:   if (!constant_count) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIInterfaceInfo> parent_if_info;
    1: 
    1:   rv = if_info->GetParent(getter_AddRefs(parent_if_info));
    1:   NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && parent_if_info, rv);
    1: 
    1:   PRUint16 parent_constant_count, i;
    1:   parent_if_info->GetConstantCount(&parent_constant_count);
    1: 
    1:   for (i = parent_constant_count; i < constant_count; i++) {
    1:     const nsXPTConstant *c = nsnull;
    1: 
    1:     rv = if_info->GetConstant(i, &c);
    1:     NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && c, rv);
    1: 
    1:     PRUint16 type = c->GetType().TagPart();
    1: 
    1:     jsval v;
    1:     switch (type) {
    1:       case nsXPTType::T_I8:
    1:       case nsXPTType::T_U8:
    1:       {
    1:         v = INT_TO_JSVAL(c->GetValue()->val.u8);
    1:         break;
    1:       }
    1:       case nsXPTType::T_I16:
    1:       case nsXPTType::T_U16:
    1:       {
    1:         v = INT_TO_JSVAL(c->GetValue()->val.u16);
    1:         break;
    1:       }
    1:       case nsXPTType::T_I32:
    1:       case nsXPTType::T_U32:
    1:       {
    1:         v = INT_TO_JSVAL(c->GetValue()->val.u32);
    1:         break;
    1:       }
    1:       default:
    1:       {
    1: #ifdef NS_DEBUG
    1:         NS_ERROR("Non-numeric constant found in interface.");
    1: #endif
    1:         continue;
    1:       }
    1:     }
    1: 
    1:     if (!::JS_DefineProperty(cx, obj, c->GetName(), v, nsnull, nsnull,
    1:                              JSPROP_ENUMERATE)) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
 7842: class nsDOMConstructor : public nsIDOMDOMConstructor
    1: {
12313: protected:
 1312:   nsDOMConstructor(const PRUnichar *aName,
 8947:                    const nsGlobalNameStruct *aNameStruct,
12313:                    nsPIDOMWindow* aOwner)
 1312:     : mClassName(aName),
 8947:       mConstructable(IsConstructable(aNameStruct)),
 8947:       mWeakOwner(do_GetWeakReference(aOwner))
 1312:   {
 1312:   }
    1: 
12313: public:
12313: 
12313:   static nsresult Create(const PRUnichar* aName,
12313:                          const nsGlobalNameStruct* aNameStruct,
12313:                          nsPIDOMWindow* aOwner,
12313:                          nsDOMConstructor** aResult);
12313: 
    1:   NS_DECL_ISUPPORTS
 7842:   NS_DECL_NSIDOMDOMCONSTRUCTOR
    1: 
    1:   nsresult Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                      JSObject *obj, PRUint32 argc, jsval *argv,
    1:                      jsval *vp, PRBool *_retval);
    1: 
    1:   nsresult HasInstance(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                        JSObject *obj, jsval val, PRBool *bp,
    1:                        PRBool *_retval);
    1: 
    1:   nsresult Install(JSContext *cx, JSObject *target, jsval thisAsVal)
    1:   {
    1:     PRBool doSecurityCheckInAddProperty =
    1:       nsDOMClassInfo::sDoSecurityCheckInAddProperty;
    1:     nsDOMClassInfo::sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:     JSBool ok =
    1:       ::JS_DefineUCProperty(cx, target,
 3233:                             reinterpret_cast<const jschar *>(mClassName),
    1:                             nsCRT::strlen(mClassName), thisAsVal, nsnull,
    1:                             nsnull, 0);
    1: 
    1:     nsDOMClassInfo::sDoSecurityCheckInAddProperty =
    1:       doSecurityCheckInAddProperty;
    1:     return ok ? NS_OK : NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1: private:
 1312:   const nsGlobalNameStruct *GetNameStruct()
 1312:   {
 1312:     if (!mClassName) {
 1312:       NS_ERROR("Can't get name");
 1312:       return nsnull;
 1312:     }
 1312: 
 1312:     const nsGlobalNameStruct *nameStruct;
 1312: #ifdef DEBUG
 1312:     nsresult rv =
 1312: #endif
 1312:       GetNameStruct(nsDependentString(mClassName), &nameStruct);
 1312: 
 1312:     NS_ASSERTION(NS_FAILED(rv) || nameStruct, "Name isn't in hash.");
 1312: 
 1312:     return nameStruct;
 1312:   }
 1312: 
 1312:   static nsresult GetNameStruct(const nsAString& aName,
 1312:                                 const nsGlobalNameStruct **aNameStruct)
 1312:   {
 1312:     *aNameStruct = nsnull;
 1312: 
 7941:     nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:     if (!nameSpaceManager) {
 1312:       NS_ERROR("Can't get namespace manager.");
 1312:       return NS_ERROR_UNEXPECTED;
 1312:     }
 1312: 
 7941:     nameSpaceManager->LookupName(aName, aNameStruct);
 1312: 
 1312:     // Return NS_OK here, aName just isn't a DOM class but nothing failed.
 1312:     return NS_OK;
 1312:   }
 1312: 
 1312:   static PRBool IsConstructable(const nsGlobalNameStruct *aNameStruct)
 1312:   {
 1312:     return
 1312:       (aNameStruct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
21376:        (FindConstructorContractID(aNameStruct->mDOMClassInfoID) ||
21376:         FindConstructorFunc(aNameStruct->mDOMClassInfoID))) ||
 1312:       (aNameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo &&
 1312:        aNameStruct->mData->mConstructorCID) ||
 1312:       aNameStruct->mType == nsGlobalNameStruct::eTypeExternalConstructor ||
 1312:       aNameStruct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias;
 1312:   }
 1312: 
    1:   const PRUnichar*   mClassName;
 1312:   const PRPackedBool mConstructable;
 8947:   nsWeakPtr          mWeakOwner;
    1: };
    1: 
12313: //static
12313: nsresult
12313: nsDOMConstructor::Create(const PRUnichar* aName,
12313:                          const nsGlobalNameStruct* aNameStruct,
12313:                          nsPIDOMWindow* aOwner,
12313:                          nsDOMConstructor** aResult)
12313: {
12313:   *aResult = nsnull;
14677:   // Prevent creating a constructor if
14677:   // - aOwner is inner window which doesn't have outer window or
14677:   // - outer window doesn't have inner window or
14677:   // - caller can't access outer window's inner window.
14677:   nsPIDOMWindow* outerWindow = aOwner->GetOuterWindow();
14677:   nsPIDOMWindow* currentInner =
14677:     outerWindow ? outerWindow->GetCurrentInnerWindow() : nsnull;
14677:   if (!currentInner ||
14677:       (aOwner != currentInner &&
14677:        !nsContentUtils::CanCallerAccess(currentInner))) {
12313:     return NS_ERROR_DOM_SECURITY_ERR;
14677:   }
14677:   *aResult = new nsDOMConstructor(aName, aNameStruct, currentInner);
12313:   NS_ENSURE_TRUE(*aResult, NS_ERROR_OUT_OF_MEMORY);
12313:   NS_ADDREF(*aResult);
12313:   return NS_OK;
12313: }
12313: 
    1: NS_IMPL_ADDREF(nsDOMConstructor)
    1: NS_IMPL_RELEASE(nsDOMConstructor)
    1: NS_INTERFACE_MAP_BEGIN(nsDOMConstructor)
 7842:   NS_INTERFACE_MAP_ENTRY(nsIDOMDOMConstructor)
    1:   NS_INTERFACE_MAP_ENTRY(nsISupports)
 1312:   if (aIID.Equals(NS_GET_IID(nsIClassInfo))) {
 1312: #ifdef DEBUG
 1312:     {
 1312:       const nsGlobalNameStruct *name_struct = GetNameStruct();
 1312:       NS_ASSERTION(!name_struct ||
 1312:                    mConstructable == IsConstructable(name_struct),
 1312:                    "Can't change constructability dynamically!");
 1312:     }
 1312: #endif
 1312:     foundInterface =
 1312:       NS_GetDOMClassInfoInstance(mConstructable ?
 7842:                                  eDOMClassInfo_DOMConstructor_id :
 7842:                                  eDOMClassInfo_DOMPrototype_id);
 1312:     if (!foundInterface) {
 1312:       *aInstancePtr = nsnull;
 1312:       return NS_ERROR_OUT_OF_MEMORY;
 1312:     }
 1312:   } else
    1: NS_INTERFACE_MAP_END
    1: 
    1: nsresult
    1: nsDOMConstructor::Construct(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                             JSObject * obj, PRUint32 argc, jsval * argv,
    1:                             jsval * vp, PRBool *_retval)
    1: {
    1:   JSObject* class_obj = JSVAL_TO_OBJECT(argv[-2]);
    1:   if (!class_obj) {
    1:     NS_ERROR("nsDOMConstructor::Construct couldn't get constructor object.");
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
 1312:   const nsGlobalNameStruct *name_struct = GetNameStruct();
 1312:   NS_ENSURE_TRUE(name_struct, NS_ERROR_FAILURE);
 1312: 
 1312:   if (!IsConstructable(name_struct)) {
    1:     // ignore return value, we return JS_FALSE anyway
    1:     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
    1:   }
    1: 
 8947:   return BaseStubConstructor(mWeakOwner, name_struct, cx, obj, argc, argv, vp);
    1: }
    1: 
    1: nsresult
    1: nsDOMConstructor::HasInstance(nsIXPConnectWrappedNative *wrapper,
    1:                               JSContext * cx, JSObject * obj,
    1:                               jsval v, PRBool *bp, PRBool *_retval)
    1: 
    1: {
    1:   // No need to look these up in the hash.
    1:   if (JSVAL_IS_PRIMITIVE(v)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   JSObject *dom_obj = JSVAL_TO_OBJECT(v);
    1:   NS_ASSERTION(dom_obj, "nsDOMConstructor::HasInstance couldn't get object");
    1: 
    1:   // This might not be the right object, if XPCNativeWrapping
    1:   // happened.  Get the wrapped native for this object, then get its
    1:   // JS object.
    1:   nsCOMPtr<nsIXPConnectWrappedNative> wrapped_native;
    1:   nsContentUtils::XPConnect()->
    1:     GetWrappedNativeOfJSObject(cx, dom_obj, getter_AddRefs(wrapped_native));
    1:   if (wrapped_native) {
    1:     wrapped_native->GetJSObject(&dom_obj);
    1:   }
    1: 
    1:   JSClass *dom_class = JS_GET_CLASS(cx, dom_obj);
    1:   if (!dom_class) {
    1:     NS_ERROR("nsDOMConstructor::HasInstance can't get class.");
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
 1312:   const nsGlobalNameStruct *name_struct;
 1312:   nsresult rv = GetNameStruct(NS_ConvertASCIItoUTF16(dom_class->name),
    1:                               &name_struct);
    1:   if (!name_struct) {
 1312:     return rv;
    1:   }
    1: 
    1:   if (name_struct->mType != nsGlobalNameStruct::eTypeClassConstructor &&
    1:       name_struct->mType != nsGlobalNameStruct::eTypeExternalClassInfo &&
    1:       name_struct->mType != nsGlobalNameStruct::eTypeExternalConstructorAlias) {
    1:     // Doesn't have DOM interfaces.
    1:     return NS_OK;
    1:   }
    1: 
 1312:   const nsGlobalNameStruct *class_name_struct = GetNameStruct();
 1312:   NS_ENSURE_TRUE(class_name_struct, NS_ERROR_FAILURE);
    1: 
    1:   if (name_struct == class_name_struct) {
    1:     *bp = JS_TRUE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ASSERTION(nameSpaceManager, "Can't get namespace manager?");
 1312: 
    1:   const nsIID *class_iid;
    1:   if (class_name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
    1:       class_name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
    1:     class_iid = &class_name_struct->mIID;
    1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
    1:     class_iid =
    1:       sClassInfoData[class_name_struct->mDOMClassInfoID].mProtoChainInterface;
    1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:     class_iid = class_name_struct->mData->mProtoChainInterface;
    1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
    1:     const nsGlobalNameStruct* alias_struct =
 7941:       nameSpaceManager->GetConstructorProto(class_name_struct);
    1:     if (!alias_struct) {
    1:       NS_ERROR("Couldn't get constructor prototype.");
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
    1:       class_iid =
    1:         sClassInfoData[alias_struct->mDOMClassInfoID].mProtoChainInterface;
    1:     } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:       class_iid = alias_struct->mData->mProtoChainInterface;
    1:     } else {
    1:       NS_ERROR("Expected eTypeClassConstructor or eTypeExternalClassInfo.");
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   } else {
    1:     *bp = JS_FALSE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
 7941:     name_struct = nameSpaceManager->GetConstructorProto(name_struct);
    1:     if (!name_struct) {
    1:       NS_ERROR("Couldn't get constructor prototype.");
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   NS_ASSERTION(name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
    1:                name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo,
    1:                "The constructor was set up with a struct of the wrong type.");
    1: 
    1:   const nsDOMClassInfoData *ci_data = nsnull;
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
    1:       name_struct->mDOMClassInfoID >= 0) {
    1:     ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
    1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:     ci_data = name_struct->mData;
    1:   }
    1: 
    1:   nsCOMPtr<nsIInterfaceInfoManager>
    1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1:   if (!iim) {
    1:     NS_ERROR("nsDOMConstructor::HasInstance can't get interface info mgr.");
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   nsCOMPtr<nsIInterfaceInfo> if_info;
    1:   PRUint32 count = 0;
    1:   const nsIID* class_interface;
    1:   while ((class_interface = ci_data->mInterfaces[count++])) {
    1:     if (class_iid->Equals(*class_interface)) {
    1:       *bp = JS_TRUE;
    1: 
    1:       return NS_OK;
    1:     }
    1: 
    1:     iim->GetInfoForIID(class_interface, getter_AddRefs(if_info));
    1:     if (!if_info) {
    1:       NS_ERROR("nsDOMConstructor::HasInstance can't get interface info.");
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     if_info->HasAncestor(class_iid, bp);
    1: 
    1:     if (*bp) {
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMConstructor::ToString(nsAString &aResult)
    1: {
    1:   aResult.AssignLiteral("[object ");
    1:   aResult.Append(mClassName);
    1:   aResult.Append(PRUnichar(']'));
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // static
    1: nsresult
    1: nsWindowSH::GlobalResolve(nsGlobalWindow *aWin, JSContext *cx,
    1:                           JSObject *obj, JSString *str, PRUint32 flags,
    1:                           PRBool *did_resolve)
    1: {
    1:   *did_resolve = PR_FALSE;
    1: 
 7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
 7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:   nsDependentJSString name(str);
    1: 
    1:   const nsGlobalNameStruct *name_struct = nsnull;
    1:   const PRUnichar *class_name = nsnull;
    1: 
 7941:   nameSpaceManager->LookupName(name, &name_struct, &class_name);
    1: 
    1:   if (!name_struct) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   NS_ENSURE_TRUE(class_name, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsresult rv = NS_OK;
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
    1:     nsCOMPtr<nsIDOMCIExtension> creator(do_CreateInstance(name_struct->mCID, &rv));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     nsCOMPtr<nsIDOMScriptObjectFactory> sof(do_GetService(kDOMSOF_CID));
    1:     NS_ENSURE_TRUE(sof, NS_ERROR_FAILURE);
    1: 
    1:     rv = creator->RegisterDOMCI(NS_ConvertUTF16toUTF8(name).get(), sof);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
 7941:     rv = nameSpaceManager->LookupName(name, &name_struct);
    1:     if (NS_FAILED(rv) || !name_struct ||
    1:         name_struct->mType != nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:       NS_ERROR("Couldn't get the DOM ClassInfo data.");
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeInterface) {
    1:     // We're resolving a name of a DOM interface for which there is no
    1:     // direct DOM class, create a constructor object...
    1: 
12313:     nsRefPtr<nsDOMConstructor> constructor;
12313:     rv = nsDOMConstructor::Create(reinterpret_cast<PRUnichar *>
 3233:                                     (::JS_GetStringChars(str)),
 8947:                                   name_struct,
12313:                                   static_cast<nsPIDOMWindow*>(aWin),
12313:                                   getter_AddRefs(constructor));
12313:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:     sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:     jsval v;
    1: 
22071:     rv = WrapNative(cx, obj, constructor, NS_GET_IID(nsIDOMDOMConstructor), &v,
    1:                     getter_AddRefs(holder));
    1: 
    1:     sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     rv = constructor->Install(cx, obj, v);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     JSObject *class_obj;
    1:     holder->GetJSObject(&class_obj);
    1:     NS_ASSERTION(class_obj, "The return value lied");
    1: 
    1:     // ... and define the constants from the DOM interface on that
    1:     // constructor object.
    1: 
    1:     rv = DefineInterfaceConstants(cx, class_obj, &name_struct->mIID);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     *did_resolve = PR_TRUE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
    1:       name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo ||
    1:       name_struct->mType == nsGlobalNameStruct::eTypeClassProto ||
    1:       name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
    1:     const nsDOMClassInfoData *ci_data = nsnull;
    1:     const nsGlobalNameStruct* alias_struct = nsnull;
    1: 
    1:     if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
    1:         name_struct->mDOMClassInfoID >= 0) {
    1:       ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
    1:     } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:       ci_data = name_struct->mData;
    1:     } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
 7941:       alias_struct = nameSpaceManager->GetConstructorProto(name_struct);
    1:       NS_ENSURE_TRUE(alias_struct, NS_ERROR_UNEXPECTED);
    1: 
    1:       if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
    1:         ci_data = &sClassInfoData[alias_struct->mDOMClassInfoID];
    1:       } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:         ci_data = alias_struct->mData;
    1:       }
    1:     }
    1: 
 3233:     const PRUnichar *name = reinterpret_cast<PRUnichar *>
 3233:                                             (::JS_GetStringChars(str));
12313:     nsRefPtr<nsDOMConstructor> constructor;
12313:     rv = nsDOMConstructor::Create(name, name_struct,
12313:                                   static_cast<nsPIDOMWindow*>(aWin),
12313:                                   getter_AddRefs(constructor));
12313:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:     sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:     jsval v;
    1: 
22071:     rv = WrapNative(cx, obj, constructor, NS_GET_IID(nsIDOMDOMConstructor), &v,
    1:                     getter_AddRefs(holder));
    1: 
    1:     sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     rv = constructor->Install(cx, obj, v);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     JSObject *class_obj;
    1:     holder->GetJSObject(&class_obj);
    1:     NS_ASSERTION(class_obj, "The return value lied");
    1: 
    1:     const nsIID *primary_iid = &NS_GET_IID(nsISupports);
    1: 
    1:     if (name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
    1:       primary_iid = &name_struct->mIID;
    1:     } else if (ci_data && ci_data->mProtoChainInterface) {
    1:       primary_iid = ci_data->mProtoChainInterface;
    1:     }
    1: 
10204:     nsCOMPtr<nsIInterfaceInfo> if_info;
10204:     nsCOMPtr<nsIInterfaceInfo> parent;
10204:     const char *class_parent_name = nsnull;
    1: 
    1:     if (!primary_iid->Equals(NS_GET_IID(nsISupports))) {
    1:       rv = DefineInterfaceConstants(cx, class_obj, primary_iid);
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       // Special case for |Node|, which needs constants from Node3
    1:       // too for forwards compatibility.
    1:       if (primary_iid->Equals(NS_GET_IID(nsIDOMNode))) {
    1:         rv = DefineInterfaceConstants(cx, class_obj,
    1:                                       &NS_GET_IID(nsIDOM3Node));
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1:       }
    1: 
    1:       // Special case for |Event|, Event needs constants from NSEvent
    1:       // too for backwards compatibility.
    1:       if (primary_iid->Equals(NS_GET_IID(nsIDOMEvent))) {
    1:         rv = DefineInterfaceConstants(cx, class_obj,
    1:                                       &NS_GET_IID(nsIDOMNSEvent));
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1:       }
    1: 
    1:       nsCOMPtr<nsIInterfaceInfoManager>
    1:         iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1:       NS_ENSURE_TRUE(iim, NS_ERROR_NOT_AVAILABLE);
    1: 
    1:       iim->GetInfoForIID(primary_iid, getter_AddRefs(if_info));
    1:       NS_ENSURE_TRUE(if_info, NS_ERROR_UNEXPECTED);
    1: 
10204:       const nsIID *iid = nsnull;
    1: 
    1:       if (ci_data && !ci_data->mHasClassInterface) {
10204:         if_info->GetIIDShared(&iid);
    1:       } else {
    1:         if_info->GetParent(getter_AddRefs(parent));
    1:         NS_ENSURE_TRUE(parent, NS_ERROR_UNEXPECTED);
    1: 
10204:         parent->GetIIDShared(&iid);
    1:       }
    1: 
    1:       if (iid) {
    1:         if (!iid->Equals(NS_GET_IID(nsISupports))) {
    1:           if (ci_data && !ci_data->mHasClassInterface) {
    1:             // If the class doesn't have a class interface the primary
    1:             // interface is the interface that should be
    1:             // constructor.prototype.__proto__.
    1: 
10204:             if_info->GetNameShared(&class_parent_name);
    1:           } else {
    1:             // If the class does have a class interface (or there's no
    1:             // real class for this name) then the parent of the
    1:             // primary interface is what we want on
    1:             // constructor.prototype.__proto__.
    1: 
    1:             NS_ASSERTION(parent, "Whoa, this is bad, null parent here!");
    1: 
10204:             parent->GetNameShared(&class_parent_name);
10204:           }
10204:         }
    1:       }
    1:     }
    1: 
    1:     JSObject *proto = nsnull;
    1: 
    1:     if (class_parent_name) {
    1:       jsval val;
    1: 
13196:       if (!::JS_LookupProperty(cx, obj, CutPrefix(class_parent_name), &val)) {
    1:         return NS_ERROR_UNEXPECTED;
    1:       }
    1: 
    1:       JSObject *tmp = JSVAL_IS_OBJECT(val) ? JSVAL_TO_OBJECT(val) : nsnull;
    1: 
    1:       if (tmp) {
13196:         if (!::JS_LookupProperty(cx, tmp, "prototype", &val)) {
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1: 
    1:         if (JSVAL_IS_OBJECT(val)) {
    1:           proto = JSVAL_TO_OBJECT(val);
    1:         }
    1:       }
    1:     }
    1: 
    1:     JSObject *dot_prototype = nsnull;
    1: 
    1:     if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
    1:       name_struct = alias_struct;
    1:     }
    1: 
    1:     if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
    1:       PRInt32 id = name_struct->mDOMClassInfoID;
    1:       NS_ABORT_IF_FALSE(id >= 0, "Negative DOM classinfo?!?");
    1: 
    1:       nsDOMClassInfoID ci_id = (nsDOMClassInfoID)id;
    1: 
    1:       nsCOMPtr<nsIClassInfo> ci(NS_GetDOMClassInfoInstance(ci_id));
    1:       NS_ENSURE_TRUE(ci, NS_ERROR_UNEXPECTED);
    1: 
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
    1: 
    1:       // In most cases we want to find the wrapped native prototype in
    1:       // aWin's scope and use that prototype for
    1:       // ClassName.prototype. But in the case where we're setting up
    1:       // "Window.prototype" or "ChromeWindow.prototype" we want to do
    1:       // the look up in aWin's outer window's scope since the inner
    1:       // window's wrapped native prototype comes from the outer
    1:       // window's scope.
    1:       nsGlobalWindow *scopeWindow;
    1: 
    1:       if (ci_id == eDOMClassInfo_Window_id ||
    1:           ci_id == eDOMClassInfo_ChromeWindow_id) {
    1:         scopeWindow = aWin->GetOuterWindowInternal();
    1: 
    1:         if (!scopeWindow) {
    1:           scopeWindow = aWin;
    1:         }
    1:       } else {
    1:         scopeWindow = aWin;
    1:       }
    1: 
    1:       rv =
    1:         sXPConnect->GetWrappedNativePrototype(cx,
    1:                                               scopeWindow->GetGlobalJSObject(),
    1:                                               ci,
    1:                                               getter_AddRefs(proto_holder));
    1:       NS_ENSURE_SUCCESS(rv, NS_ERROR_UNEXPECTED);
    1: 
    1:       rv = proto_holder->GetJSObject(&dot_prototype);
    1:       NS_ENSURE_SUCCESS(rv, NS_ERROR_UNEXPECTED);
    1: 
    1:       JSObject *xpc_proto_proto = ::JS_GetPrototype(cx, dot_prototype);
    1: 
 6767:       if (proto &&
 6767:           (!xpc_proto_proto ||
 6767:            JS_GET_CLASS(cx, xpc_proto_proto) == sObjectClass)) {
    1:         if (!::JS_SetPrototype(cx, dot_prototype, proto)) {
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1:       }
    1:     } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
    1:       nsCOMPtr<nsIClassInfo> ci = GetClassInfoInstance(name_struct->mData);
    1:       NS_ENSURE_TRUE(ci, NS_ERROR_UNEXPECTED);
    1: 
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
    1: 
    1:       rv =
    1:         sXPConnect->GetWrappedNativePrototype(cx, obj, ci,
    1:                                               getter_AddRefs(proto_holder));
    1:       NS_ENSURE_SUCCESS(rv, NS_ERROR_UNEXPECTED);
    1: 
    1:       rv = proto_holder->GetJSObject(&dot_prototype);
    1:       NS_ENSURE_SUCCESS(rv, NS_ERROR_UNEXPECTED);
    1: 
    1:       JSObject *xpc_proto_proto = ::JS_GetPrototype(cx, dot_prototype);
    1: 
 6767:       if (proto &&
 6767:           (!xpc_proto_proto ||
 6767:            JS_GET_CLASS(cx, xpc_proto_proto) == sObjectClass)) {
    1:         if (!::JS_SetPrototype(cx, dot_prototype, proto)) {
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1:       }
    1:     } else {
    1:       dot_prototype = ::JS_NewObject(cx, &sDOMConstructorProtoClass, proto,
    1:                                      obj);
    1:       NS_ENSURE_TRUE(dot_prototype, NS_ERROR_OUT_OF_MEMORY);
    1:     }
    1: 
    1:     v = OBJECT_TO_JSVAL(dot_prototype);
    1: 
    1:     // Per ECMA, the prototype property is {DontEnum, DontDelete, ReadOnly}
    1:     if (!::JS_DefineProperty(cx, class_obj, "prototype", v, nsnull, nsnull,
    1:                              JSPROP_PERMANENT | JSPROP_READONLY)) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     *did_resolve = PR_TRUE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
12313:     nsRefPtr<nsDOMConstructor> constructor;
12313:     rv = nsDOMConstructor::Create(class_name, name_struct,
12313:                                   static_cast<nsPIDOMWindow*>(aWin),
12313:                                   getter_AddRefs(constructor));
12313:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     jsval val;
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv = WrapNative(cx, obj, constructor, NS_GET_IID(nsIDOMDOMConstructor),
 7842:                     &val, getter_AddRefs(holder));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     rv = constructor->Install(cx, obj, val);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     JSObject* class_obj;
    1:     holder->GetJSObject(&class_obj);
    1:     NS_ASSERTION(class_obj, "Why didn't we get a JSObject?");
    1: 
    1:     *did_resolve = PR_TRUE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeProperty) {
 2797:     if (name_struct->mPrivilegedOnly && !nsContentUtils::IsCallerChrome())
 2797:       return NS_OK;
 2797: 
    1:     nsCOMPtr<nsISupports> native(do_CreateInstance(name_struct->mCID, &rv));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     jsval prop_val; // Property value.
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:     nsCOMPtr<nsIScriptObjectOwner> owner(do_QueryInterface(native));
    1:     if (owner) {
    1:       nsIScriptContext *context = nsJSUtils::GetStaticScriptContext(cx, obj);
    1:       NS_ENSURE_TRUE(context, NS_ERROR_UNEXPECTED);
    1: 
    1:       JSObject *prop_obj = nsnull;
    1:       rv = owner->GetScriptObject(context, (void**)&prop_obj);
    1:       NS_ENSURE_TRUE(prop_obj, NS_ERROR_UNEXPECTED);
    1: 
    1:       prop_val = OBJECT_TO_JSVAL(prop_obj);
    1:     } else {
    1:       JSObject *scope;
    1: 
    1:       if (aWin->IsOuterWindow()) {
    1:         nsGlobalWindow *inner = aWin->GetCurrentInnerWindowInternal();
    1:         NS_ENSURE_TRUE(inner, NS_ERROR_UNEXPECTED);
    1: 
    1:         scope = inner->GetGlobalJSObject();
    1:       } else {
    1:         scope = aWin->GetGlobalJSObject();
    1:       }
    1: 
22071:       rv = WrapNative(cx, scope, native, NS_GET_IID(nsISupports), &prop_val,
22071:                       getter_AddRefs(holder));
    1:     }
    1: 
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:     sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:     JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                       ::JS_GetStringLength(str),
    1:                                       prop_val, nsnull, nsnull,
    1:                                       JSPROP_ENUMERATE);
    1: 
    1:     sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1:     *did_resolve = PR_TRUE;
    1: 
    1:     return ok ? NS_OK : NS_ERROR_FAILURE;
    1:   }
    1: 
    1:   if (name_struct->mType == nsGlobalNameStruct::eTypeDynamicNameSet) {
    1:     nsCOMPtr<nsIScriptExternalNameSet> nameset =
    1:       do_CreateInstance(name_struct->mCID, &rv);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     nsIScriptContext *context = aWin->GetContext();
    1:     NS_ENSURE_TRUE(context, NS_ERROR_UNEXPECTED);
    1: 
    1:     rv = nameset->InitializeNameSet(context);
    1: 
    1:     *did_resolve = PR_TRUE;
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
    1: // Native code for window._content getter, this simply maps
    1: // window._content to window.content for backwards compatibility only.
18907: static JSBool
    1: ContentWindowGetter(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
    1:                     jsval *rval)
    1: {
    1:   return ::JS_GetProperty(cx, obj, "content", rval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                        JSObject *obj, jsval id, PRUint32 flags,
    1:                        JSObject **objp, PRBool *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1: #ifdef DEBUG_SH_FORWARDING
    1:   {
    1:     nsDependentJSString str(::JS_ValueToString(cx, id));
    1: 
    1:     if (win->IsInnerWindow()) {
    1: #ifdef DEBUG_PRINT_INNER
    1:       printf("Property '%s' resolve on inner window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1: #endif
    1:     } else {
    1:       printf("Property '%s' resolve on outer window %p\n",
    1:              NS_ConvertUTF16toUTF8(str).get(), (void *)win);
    1:     }
    1:   }
    1: #endif
    1: 
    1:   // Note, we won't forward resolve of the location property to the
    1:   // inner window, we need to deal with that one for the outer too
    1:   // since we've got special security protection code for that
    1:   // property.  Also note that we want to enter this block even for
    1:   // native wrappers, so that we'll ensure an inner window to wrap
    1:   // against for the result of whatever we're getting.
    1:   if (win->IsOuterWindow() && id != sLocation_id) {
    1:     // XXXjst: Do security checks here when we remove the security
    1:     // checks on the inner window.
    1: 
    1:     nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:     if ((!innerWin || !innerWin->GetExtantDocument()) &&
    1:         !win->IsCreatingInnerWindow()) {
    1:       // We're resolving a property on an outer window for which there
    1:       // is no inner window yet, and we're not in the midst of
    1:       // creating the inner window or in the middle of initializing
    1:       // XPConnect classes on it. If the context is already
    1:       // initialized, force creation of a new inner window. This will
    1:       // create a synthetic about:blank document, and an inner window
    1:       // which may be reused by the actual document being loaded into
    1:       // this outer window. This way properties defined on the window
    1:       // before the document load started will be visible to the
    1:       // document once it's loaded, assuming same origin etc.
    1:       nsIScriptContext *scx = win->GetContextInternal();
    1: 
    1:       if (scx && scx->IsContextInitialized()) {
    1:         // Grab the new inner window.
    1:         innerWin = win->EnsureInnerWindowInternal();
    1: 
    1:         if (!innerWin) {
    1:           return NS_ERROR_OUT_OF_MEMORY;
    1:         }
    1:       }
    1:     }
    1: 
    1:     JSObject *innerObj;
 5280:     JSObject *realObj;
 5280:     wrapper->GetJSObject(&realObj);
 5280:     if (realObj == obj &&
    1:         innerWin && (innerObj = innerWin->GetGlobalJSObject())) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:       printf(" --- Forwarding resolve to inner window %p\n", (void *)innerWin);
    1: #endif
    1: 
    1:       jsid interned_id;
19712:       JSObject *pobj = NULL;
19712:       jsval val;
    1: 
    1:       *_retval = (::JS_ValueToId(cx, id, &interned_id) &&
20964:                   ::JS_LookupPropertyWithFlagsById(cx, innerObj, interned_id,
19712:                                                    flags, &pobj, &val));
19712: 
19712:       if (*_retval && pobj) {
    1: #ifdef DEBUG_SH_FORWARDING
    1:         printf(" --- Resolve on inner window found property.\n");
    1: #endif
    1:         *objp = pobj;
    1:       }
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   if (!JSVAL_IS_STRING(id)) {
    1:     if (JSVAL_IS_INT(id) && !(flags & JSRESOLVE_ASSIGNING)) {
    1:       // If we're resolving a numeric property, treat that as if
    1:       // window.frames[n] is resolved (since window.frames ===
    1:       // window), if window.frames[n] is a child frame, define a
    1:       // property for this index.
    1: 
    1:       nsCOMPtr<nsIDOMWindow> frame = GetChildFrame(win, id);
    1: 
    1:       if (frame) {
    1:         // A numeric property accessed and the numeric property is a
    1:         // child frame. Define a property for this index.
    1: 
    1:         PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:         sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:         *_retval = ::JS_DefineElement(cx, obj, JSVAL_TO_INT(id), JSVAL_VOID,
    1:                                       nsnull, nsnull, 0);
    1: 
    1:         sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:         if (*_retval) {
    1:           *objp = obj;
    1:         }
    1:       }
    1:     }
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsIScriptContext *my_context = win->GetContextInternal();
    1: 
    1:   nsresult rv = NS_OK;
    1: 
    1:   // Resolve standard classes on my_context's JSContext (or on cx,
    1:   // if we don't have a my_context yet), in case the two contexts
    1:   // have different origins.  We want lazy standard class
    1:   // initialization to behave as if it were done eagerly, on each
    1:   // window's own context (not on some other window-caller's
    1:   // context).
    1: 
16685:   JSBool did_resolve = JS_FALSE;
    1:   JSContext *my_cx;
    1: 
    1:   if (!my_context) {
    1:     my_cx = cx;
    1:   } else {
    1:     my_cx = (JSContext *)my_context->GetNativeContext();
    1:   }
    1: 
16685:   JSBool ok;
16685:   jsval exn;
16685:   {
16685:     JSAutoSuspendRequest asr(my_cx != cx ? cx : nsnull);
16685:     {
16685:       JSAutoRequest ar(my_cx);
16685: 
16685:       JSObject *realObj;
16685:       wrapper->GetJSObject(&realObj);
16685: 
    1:       // Resolving a standard class won't do any evil, and it's possible
    1:       // for caps to get the answer wrong, so disable the security check
    1:       // for this case.
    1:     
    1:       PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:       sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
13266:       // Don't resolve standard classes on XPCNativeWrapper etc, only
13266:       // resolve them if we're resolving on the real global object.
16685:       ok = obj == realObj ?
    1:            ::JS_ResolveStandardClass(my_cx, obj, id, &did_resolve) :
    1:            JS_TRUE;
    1: 
    1:       sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:       if (!ok) {
    1:         // Trust the JS engine (or the script security manager) to set
    1:         // the exception in the JS engine.
    1: 
    1:         if (!JS_GetPendingException(my_cx, &exn)) {
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1: 
    1:         // Return NS_OK to avoid stomping over the exception that was passed
    1:         // down from the ResolveStandardClass call.
    1:         // Note that the order of the JS_ClearPendingException and
    1:         // JS_SetPendingException is important in the case that my_cx == cx.
    1: 
    1:         JS_ClearPendingException(my_cx);
16685:       }
16685:     }
16685:   }
16685: 
16685:   if (!ok) {
    1:     JS_SetPendingException(cx, exn);
    1:     *_retval = JS_FALSE;
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (did_resolve) {
    1:     *objp = obj;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
    1:     // We want this code to be before the child frame lookup code
    1:     // below so that a child frame named 'constructor' doesn't
    1:     // shadow the window's constructor property.
    1:     if (id == sConstructor_id) {
    1:       return ResolveConstructor(cx, obj, objp);
    1:     }
    1:   }
    1: 
    1:   if (!my_context || !my_context->IsContextInitialized()) {
    1:     // The context is not yet initialized so there's nothing we can do
    1:     // here yet.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1: 
    1:   // Hmm, we do an awful lot of QIs here; maybe we should add a
    1:   // method on an interface that would let us just call into the
    1:   // window code directly...
    1: 
    1:   JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:   // Don't resolve named frames on native wrappers
    1:   if (!ObjectIsNativeWrapper(cx, obj)) {
    1:     nsCOMPtr<nsIDocShellTreeNode> dsn(do_QueryInterface(win->GetDocShell()));
    1: 
    1:     PRInt32 count = 0;
    1: 
    1:     if (dsn) {
    1:       dsn->GetChildCount(&count);
    1:     }
    1: 
    1:     if (count > 0) {
    1:       nsCOMPtr<nsIDocShellTreeItem> child;
    1: 
    1:       const jschar *chars = ::JS_GetStringChars(str);
    1: 
 3233:       dsn->FindChildWithName(reinterpret_cast<const PRUnichar*>(chars),
    1:                              PR_FALSE, PR_TRUE, nsnull, nsnull,
    1:                              getter_AddRefs(child));
    1: 
    1:       nsCOMPtr<nsIDOMWindow> child_win(do_GetInterface(child));
    1: 
    1:       if (child_win) {
    1:         // We found a subframe of the right name, define the property
    1:         // on the wrapper so that ::NewResolve() doesn't get called
    1:         // again for this property name.
    1: 
    1:         JSObject *wrapperObj;
    1:         wrapper->GetJSObject(&wrapperObj);
    1: 
    1:         jsval v;
    1:         nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:         rv = WrapNative(cx, wrapperObj, child_win,
22071:                         NS_GET_IID(nsIDOMWindowInternal), &v,
    1:                         getter_AddRefs(holder));
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:         // Script is accessing a child frame and this access can
    1:         // potentially come from a context from a different domain.
    1:         // ::JS_DefineUCProperty() will call
    1:         // nsWindowSH::AddProperty(), and that method will do a
    1:         // security check and that security check will fail since
    1:         // other domains can't add properties to a global object in
    1:         // this domain. Set the sDoSecurityCheckInAddProperty flag to
    1:         // false (and set it to true immediagtely when we're done) to
    1:         // tell nsWindowSH::AddProperty() that defining this new
    1:         // property is 'ok' in this case, even if the call comes from
    1:         // a different context.
    1: 
 4209:         if (!win->IsChromeWindow()) {
 9848:           rv = sXPConnect->GetXOWForObject(cx, win->GetGlobalJSObject(),
 9848:                                            JSVAL_TO_OBJECT(v), &v);
 4042:           NS_ENSURE_SUCCESS(rv, rv);
 4042:         }
    1: 
    1:         JSAutoRequest ar(cx);
    1: 
 4042:         PRBool ok = ::JS_DefineUCProperty(cx, obj, chars,
 4042:                                           ::JS_GetStringLength(str),
    1:                                           v, nsnull, nsnull, 0);
    1: 
    1:         if (!ok) {
    1:           return NS_ERROR_FAILURE;
    1:         }
    1: 
    1:         *objp = obj;
    1: 
    1:         return NS_OK;
    1:       }
    1:     }
    1:   }
    1: 
    1:   // It is not worth calling GlobalResolve() if we are resolving
    1:   // for assignment, since only read-write properties get dealt
    1:   // with there.
    1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
    1:     JSAutoRequest ar(cx);
    1: 
    1:     // Call GlobalResolve() after we call FindChildWithName() so
    1:     // that named child frames will override external properties
    1:     // which have been registered with the script namespace manager.
    1: 
    1:     JSBool did_resolve = JS_FALSE;
    1:     rv = GlobalResolve(win, cx, obj, str, flags, &did_resolve);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if (did_resolve) {
    1:       // GlobalResolve() resolved something, so we're done here.
    1:       *objp = obj;
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   if (id == s_content_id) {
    1:     // Map window._content to window.content for backwards
    1:     // compatibility, this should spit out an message on the JS
    1:     // console.
    1: 
    1:     JSObject *windowObj = win->GetGlobalJSObject();
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
    1:     JSFunction *fun = ::JS_NewFunction(cx, ContentWindowGetter, 0, 0,
    1:                                        windowObj, "_content");
    1:     if (!fun) {
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1:     }
    1: 
    1:     JSObject *funObj = ::JS_GetFunctionObject(fun);
    1: 
    1:     nsAutoGCRoot root(&funObj, &rv);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if (!::JS_DefineUCProperty(cx, windowObj, ::JS_GetStringChars(str),
    1:                                ::JS_GetStringLength(str), JSVAL_VOID,
    1:                                (JSPropertyOp)funObj, nsnull,
    1:                                JSPROP_ENUMERATE | JSPROP_GETTER |
    1:                                JSPROP_SHARED)) {
    1:       return NS_ERROR_FAILURE;
    1:     }
    1: 
    1:     *objp = obj;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (id == sLocation_id) {
    1:     // This must be done even if we're just getting the value of
    1:     // window.location (i.e. no checking flags & JSRESOLVE_ASSIGNING
    1:     // here) since we must define window.location to prevent the
    1:     // getter from being overriden (for security reasons).
    1: 
    1:     nsCOMPtr<nsIDOMLocation> location;
    1:     rv = win->GetLocation(getter_AddRefs(location));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     // Make sure we wrap the location object in the inner window's
    1:     // scope if we've got an inner window.
    1:     JSObject *scope = nsnull;
    1:     if (win->IsOuterWindow()) {
    1:       nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
    1: 
    1:       if (innerWin) {
    1:         scope = innerWin->GetGlobalJSObject();
    1:       }
    1:     }
    1: 
    1:     if (!scope) {
    1:       wrapper->GetJSObject(&scope);
    1:     }
    1: 
    1:     jsval v;
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv = WrapNative(cx, scope, location, NS_GET_IID(nsIDOMLocation), &v,
    1:                     getter_AddRefs(holder));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:     sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
 4209:     if (!win->IsChromeWindow()) {
 9848:       rv = sXPConnect->GetXOWForObject(cx, scope, JSVAL_TO_OBJECT(v), &v);
 4042:       NS_ENSURE_SUCCESS(rv, rv);
 4042:     }
 4042: 
    1:     JSAutoRequest ar(cx);
    1: 
    1:     JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                       ::JS_GetStringLength(str), v, nsnull,
    1:                                       nsnull, JSPROP_ENUMERATE);
    1: 
    1:     sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:     if (!ok) {
    1:       return NS_ERROR_FAILURE;
    1:     }
    1: 
    1:     *objp = obj;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (flags & JSRESOLVE_ASSIGNING) {
    1:     if (IsReadonlyReplaceable(id) ||
    1:         (!(flags & JSRESOLVE_QUALIFIED) && IsWritableReplaceable(id))) {
    1:       // A readonly "replaceable" property is being set, or a
    1:       // readwrite "replaceable" property is being set w/o being
    1:       // fully qualified. Define the property on obj with the value
    1:       // undefined to override the predefined property. This is done
    1:       // for compatibility with other browsers.
    1:       JSAutoRequest ar(cx);
    1: 
    1:       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                  ::JS_GetStringLength(str),
    1:                                  JSVAL_VOID, nsnull, nsnull,
    1:                                  JSPROP_ENUMERATE)) {
    1:         return NS_ERROR_FAILURE;
    1:       }
    1:       *objp = obj;
    1: 
    1:       return NS_OK;
    1:     }
    1:   } else {
    1:     if (id == sNavigator_id) {
    1:       nsCOMPtr<nsIDOMNavigator> navigator;
    1:       rv = win->GetNavigator(getter_AddRefs(navigator));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       jsval v;
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:       rv = WrapNative(cx, obj, navigator, NS_GET_IID(nsIDOMNavigator), &v,
    1:                       getter_AddRefs(holder));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       JSAutoRequest ar(cx);
    1: 
    1:       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                  ::JS_GetStringLength(str), v, nsnull, nsnull,
    1:                                  JSPROP_READONLY | JSPROP_PERMANENT |
    1:                                  JSPROP_ENUMERATE)) {
    1:         return NS_ERROR_FAILURE;
    1:       }
    1:       *objp = obj;
    1: 
    1:       return NS_OK;
    1:     }
    1: 
    1:     if (id == sDocument_id) {
    1:       nsCOMPtr<nsIDOMDocument> document;
    1:       rv = win->GetDocument(getter_AddRefs(document));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       jsval v;
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:       rv = WrapNative(cx, obj, document, NS_GET_IID(nsIDOMDocument), &v,
    1:                       getter_AddRefs(holder));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       // The PostCreate hook for the document will handle defining the
    1:       // property
    1:       *objp = obj;
    1: 
    1:       return NS_OK;
    1:     }
    1: 
    1:     if (id == sWindow_id) {
    1:       // window should *always* be the outer window object.
 4096:       nsGlobalWindow *oldWin = win;
    1:       win = win->GetOuterWindowInternal();
    1:       NS_ENSURE_TRUE(win, NS_ERROR_NOT_AVAILABLE);
    1: 
    1:       JSAutoRequest ar(cx);
    1: 
    1:       PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:       sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
 4042:       jsval winVal = OBJECT_TO_JSVAL(win->GetGlobalJSObject());
 4209:       if (!win->IsChromeWindow()) {
 4096:         JSObject *scope;
 4096:         nsGlobalWindow *innerWin;
 4096:         if (oldWin->IsInnerWindow()) {
 4096:           scope = oldWin->GetGlobalJSObject();
 4096:         } else if ((innerWin = oldWin->GetCurrentInnerWindowInternal())) {
 4096:           scope = innerWin->GetGlobalJSObject();
 4096:         } else {
 4096:           NS_ERROR("I don't know what scope to use!");
 4096:           scope = oldWin->GetGlobalJSObject();
 4096:         }
 4096: 
 9848:         rv = sXPConnect->GetXOWForObject(cx, scope, JSVAL_TO_OBJECT(winVal),
 4042:                                          &winVal);
 4042:         NS_ENSURE_SUCCESS(rv, rv);
 4042:       }
    1:       PRBool ok =
    1:         ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                               ::JS_GetStringLength(str),
 4042:                               winVal, nsnull, nsnull,
    1:                               JSPROP_READONLY | JSPROP_ENUMERATE);
    1: 
    1:       sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:       if (!ok) {
    1:         return NS_ERROR_FAILURE;
    1:       }
    1:       *objp = obj;
    1: 
    1:       return NS_OK;
    1:     }
 6774: 
15819:     if (id == sJava_id || id == sPackages_id
 6774: #ifdef OJI
15819:         || id == sNetscape_id || id == sSun_id || id == sJavaObject_id ||
15819:         id == sJavaClass_id || id == sJavaArray_id || id == sJavaMember_id
15819: #endif
 6774:         ) {
 6774:       static PRBool isResolvingJavaProperties;
 6774: 
 6774:       if (!isResolvingJavaProperties) {
 6774:         isResolvingJavaProperties = PR_TRUE;
 6774: 
 6774:         PRBool oldVal = sDoSecurityCheckInAddProperty;
 6774:         sDoSecurityCheckInAddProperty = PR_FALSE;
 6774: 
 6774:         // Tell the window to initialize the Java properties. The
 6774:         // window needs to do this as we need to do this only once,
 6774:         // and detecting that reliably from here is hard.
 6774: 
 6774:         win->InitJavaProperties(); 
 6774: 
 6774:         sDoSecurityCheckInAddProperty = oldVal;
 6774: 
 6774:         PRBool hasProp;
 6774:         PRBool ok = ::JS_HasProperty(cx, obj, ::JS_GetStringBytes(str),
 6774:                                      &hasProp);
 6774: 
 6774:         isResolvingJavaProperties = PR_FALSE;
 6774: 
 6774:         if (!ok) {
 6774:           return NS_ERROR_FAILURE;
 6774:         }
 6774: 
 6774:         if (hasProp) {
 6774:           *objp = obj;
 6774: 
 6774:           return NS_OK;
 6774:         }
 6774:       }
 6774:     }
    1:   }
    1: 
12524:   JSObject *oldobj = *objp;
12524:   rv = nsEventReceiverSH::NewResolve(wrapper, cx, obj, id, flags, objp,
    1:                                      _retval);
12524: 
12524:   if (NS_FAILED(rv) || *objp != oldobj) {
12524:     // Something went wrong, or the property got resolved. Return.
12524:     return rv;
12524:   }
12524: 
12586:   // Make a fast expando if we're assigning to (not declaring or
12586:   // binding a name) a new undefined property that's not already
12586:   // defined on our prototype chain. This way we can access this
12586:   // expando w/o ever getting back into XPConnect.
19712:   if ((flags & (JSRESOLVE_ASSIGNING)) &&
19712:       !(cx->fp && cx->fp->regs && (JSOp)*cx->fp->regs->pc == JSOP_BINDNAME) &&
19712:       win->IsInnerWindow()) {
12524:     JSObject *realObj;
12524:     wrapper->GetJSObject(&realObj);
12524: 
12524:     if (obj == realObj) {
12524:       JSObject *proto = STOBJ_GET_PROTO(obj);
12524:       if (proto) {
12524:         jsid interned_id;
19712:         JSObject *pobj = NULL;
19712:         jsval val;
12524: 
12524:         if (!::JS_ValueToId(cx, id, &interned_id) ||
20964:             !::JS_LookupPropertyWithFlagsById(cx, proto, interned_id, flags,
19712:                                               &pobj, &val)) {
12524:           *_retval = JS_FALSE;
12524: 
12524:           return NS_OK;
12524:         }
12524: 
19712:         if (pobj) {
19712:           // A property was found on the prototype chain.
19712:           *objp = pobj;
12524:           return NS_OK;
12524:         }
12524:       }
12524: 
12524:       // Define a fast expando, the key here is to use JS_PropertyStub
12524:       // as the getter/setter, which makes us stay out of XPConnect
12524:       // when using this property.
12524:       //
12524:       // We don't need to worry about property attributes here as we
12524:       // know here we're dealing with an undefined property set, so
12524:       // we're not declaring readonly or permanent properties.
12524: 
12524:       JSString *str = JSVAL_TO_STRING(id);
12524:       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
12524:                                  ::JS_GetStringLength(str), JSVAL_VOID,
12524:                                  JS_PropertyStub, JS_PropertyStub,
12524:                                  JSPROP_ENUMERATE)) {
12524:         *_retval = JS_FALSE;
12524: 
12524:         return NS_OK;
12524:       }
12524: 
12524:       *objp = obj;
12524:     }
12524:   }
12524: 
12524:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, PRUint32 enum_op, jsval *statep,
    1:                          jsid *idp, PRBool *_retval)
    1: {
    1:   switch ((JSIterateOp)enum_op) {
    1:     case JSENUMERATE_INIT:
    1:     {
    1:       // First, do the security check that nsDOMClassInfo does to see
    1:       // if we need to do any work at all.
    1:       nsDOMClassInfo::Enumerate(wrapper, cx, obj, _retval);
    1:       if (!*_retval) {
    1:         return NS_OK;
    1:       }
    1: 
    1:       // The security check passed, let's see if we need to get the inner
    1:       // window's JS object or if we can just start enumerating.
    1:       nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1:       JSObject *enumobj = win->GetGlobalJSObject();
    1:       if (win->IsOuterWindow()) {
    1:         nsGlobalWindow *inner = win->GetCurrentInnerWindowInternal();
    1:         if (inner) {
    1:           enumobj = inner->GetGlobalJSObject();
    1:         }
    1:       }
    1: 
    1:       // Great, we have the js object, now let's enumerate it.
    1:       JSObject *iterator = JS_NewPropertyIterator(cx, enumobj);
    1:       if (!iterator) {
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1:       }
    1: 
    1:       *statep = OBJECT_TO_JSVAL(iterator);
    1:       if (idp) {
    1:         // Note: With these property iterators, we can't tell ahead of time how
    1:         // many properties we're going to be iterating over.
    1:         *idp = JSVAL_ZERO;
    1:       }
    1:       break;
    1:     }
    1:     case JSENUMERATE_NEXT:
    1:     {
    1:       JSObject *iterator = (JSObject*)JSVAL_TO_OBJECT(*statep);
    1:       if (!JS_NextProperty(cx, iterator, idp)) {
    1:         return NS_ERROR_UNEXPECTED;
    1:       }
    1: 
    1:       if (*idp != JSVAL_VOID) {
    1:         break;
    1:       }
    1: 
    1:       // Fall through.
    1:     }
    1:     case JSENUMERATE_DESTROY:
    1:       // Let GC at our iterator object.
    1:       *statep = JSVAL_NULL;
    1:       break;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                      JSObject *obj)
    1: {
    1:   nsCOMPtr<nsIScriptGlobalObject> sgo(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(sgo, NS_ERROR_UNEXPECTED);
    1: 
    1:   sgo->OnFinalize(nsIProgrammingLanguage::JAVASCRIPT, obj);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::Equality(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                      JSObject * obj, jsval val, PRBool *bp)
    1: {
    1:   *bp = PR_FALSE;
    1: 
    1:   if (JSVAL_IS_PRIMITIVE(val)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIXPConnectWrappedNative> other_wrapper;
    1:   nsContentUtils::XPConnect()->
    1:     GetWrappedNativeOfJSObject(cx, JSVAL_TO_OBJECT(val),
    1:                                getter_AddRefs(other_wrapper));
    1:   if (!other_wrapper) {
    1:     // Not equal.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1:   NS_ASSERTION(win->IsOuterWindow(),
    1:                "Inner window detected in Equality hook!");
    1: 
    1:   nsCOMPtr<nsPIDOMWindow> other = do_QueryWrappedNative(other_wrapper);
    1: 
    1:   if (other) {
    1:     NS_ASSERTION(other->IsOuterWindow(),
    1:                  "Inner window detected in Equality hook!");
    1: 
    1:     *bp = win->GetOuterWindow() == other->GetOuterWindow();
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::OuterObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                         JSObject * obj, JSObject * *_retval)
    1: {
12451:   nsGlobalWindow *origWin = nsGlobalWindow::FromWrapper(wrapper);
12451:   nsGlobalWindow *win = origWin->GetOuterWindowInternal();
    1: 
    1:   if (!win) {
    1:     // If we no longer have an outer window. No code should ever be
    1:     // running on a window w/o an outer, which means this hook should
    1:     // never be called when we have no outer. But just in case, return
    1:     // null to prevent leaking an inner window to code in a different
    1:     // window.
    1: 
    1:     *_retval = nsnull;
    1: 
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   // Return the outer window.
    1: 
12451:   // FIXME bug 420372: Our window should always have a JS object here. It
12451:   // doesn't because of nsJSContext::FindXPCNativeWrapperClass.
 4209:   nsresult rv;
 4209:   if (win->IsChromeWindow()) {
 4209:     // Chrome windows don't get XOW wrapping.
12451:     JSObject *outerObj = win->GetGlobalJSObject();
12451:     if (!outerObj) {
12451:       NS_ASSERTION(origWin->IsOuterWindow(), "What window is this?");
12451:       *_retval = obj;
12451:     } else {
12451:       *_retval = outerObj;
12451:     }
12451: 
 4209:     rv = NS_OK;
 4209:   } else {
 4209:     JSObject *winObj = win->GetGlobalJSObject();
12451:     if (!winObj) {
12451:       NS_ASSERTION(origWin->IsOuterWindow(), "What window is this?");
12451:       *_retval = obj;
12451:       rv = NS_OK;
12451:     } else {
 4209:       JSObject *scope = JS_GetScopeChain(cx);
 4209:       if (!scope) {
 4209:         *_retval = nsnull;
 4209:         return NS_ERROR_FAILURE;
 4209:       }
 4427:       scope = ::JS_GetGlobalForObject(cx, scope);
 4209:       jsval v;
 9848:       rv = sXPConnect->GetXOWForObject(cx, scope, winObj, &v);
 4209:       *_retval = NS_SUCCEEDED(rv) ? JSVAL_TO_OBJECT(v) : nsnull;
 4209:     }
12451:   }
 4209: 
 4209:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsWindowSH::InnerObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
    1:                         JSObject * obj, JSObject * *_retval)
    1: {
    1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
    1: 
    1:   if (win->IsInnerWindow() || win->IsFrozen()) {
    1:     // Return the inner window, or the outer if we're dealing with a
    1:     // frozen outer.
    1: 
    1:     *_retval = obj;
    1:   } else {
    1:     // Try to find the current inner window.
    1: 
    1:     nsGlobalWindow *inner = win->GetCurrentInnerWindowInternal();
    1:     if (!inner) {
    1:       // Yikes! No inner window! Instead of leaking the outer window into the
    1:       // scope chain, let's return an error.
    1: 
    1:       *_retval = nsnull;
    1: 
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     *_retval = inner->GetGlobalJSObject();
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // DOM Location helper
    1: 
    1: NS_IMETHODIMP
    1: nsLocationSH::CheckAccess(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, jsval id, PRUint32 mode,
    1:                           jsval *vp, PRBool *_retval)
    1: {
    1:   if ((mode & JSACC_TYPEMASK) == JSACC_PROTO && (mode & JSACC_WRITE)) {
    1:     // No setting location.__proto__, ever!
    1: 
    1:     // Let XPConnect know that the access was not granted.
    1:     *_retval = PR_FALSE;
    1: 
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
    1:   return nsDOMGenericSH::CheckAccess(wrapper, cx, obj, id, mode, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsLocationSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                         JSObject *globalObj, JSObject **parentObj)
    1: {
    1:   // window.location can be held onto by both evil pages that want to track the
    1:   // user's progress on the web and bookmarklets that want to use the location
    1:   // object. Parent it to the outer window so that access checks do the Right
    1:   // Thing.
    1:   *parentObj = globalObj;
    1: 
    1:   nsCOMPtr<nsIDOMLocation> safeLoc(do_QueryInterface(nativeObj));
    1:   if (!safeLoc) {
    1:     // Oops, this wasn't really a location object. This can happen if someone
    1:     // tries to use our scriptable helper as a real object and tries to wrap
    1:     // it, see bug 319296
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsLocation *loc = (nsLocation *)safeLoc.get();
    1:   nsIDocShell *ds = loc->GetDocShell();
    1:   if (!ds) {
    1:     NS_WARNING("Refusing to create a location in the wrong scope");
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   nsCOMPtr<nsIScriptGlobalObject> sgo = do_GetInterface(ds);
    1: 
    1:   if (sgo) {
    1:     JSObject *global = sgo->GetGlobalJSObject();
    1: 
    1:     if (global) {
    1:       *parentObj = global;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // DOM Navigator helper
    1: nsresult
    1: nsNavigatorSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
    1:                          JSObject *globalObj, JSObject **parentObj)
    1: {
    1:   // window.navigator is persisted across document transitions if
    1:   // we're loading a page from the same origin. Because of that we
    1:   // need to parent the navigator wrapper at the outer window to avoid
    1:   // holding on to the inner window where the navigator was initially
    1:   // created too long.
    1:   *parentObj = globalObj;
    1: 
    1:   nsCOMPtr<nsIDOMNavigator> safeNav(do_QueryInterface(nativeObj));
    1:   if (!safeNav) {
    1:     // Oops, this wasn't really a navigator object. This can happen if someone
    1:     // tries to use our scriptable helper as a real object and tries to wrap
    1:     // it, see bug 319296.
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsNavigator *nav = (nsNavigator *)safeNav.get();
    1:   nsIDocShell *ds = nav->GetDocShell();
    1:   if (!ds) {
    1:     NS_WARNING("Refusing to create a navigator in the wrong scope");
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   nsCOMPtr<nsIScriptGlobalObject> sgo = do_GetInterface(ds);
    1: 
    1:   if (sgo) {
    1:     JSObject *global = sgo->GetGlobalJSObject();
    1: 
    1:     if (global) {
    1:       *parentObj = global;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: // DOM Node helper
    1: 
    1: PRBool
    1: nsNodeSH::IsCapabilityEnabled(const char* aCapability)
    1: {
    1:   PRBool enabled;
    1:   return sSecMan &&
    1:     NS_SUCCEEDED(sSecMan->IsCapabilityEnabled(aCapability, &enabled)) &&
    1:     enabled;
    1: }
    1: 
    1: nsresult
    1: nsNodeSH::DefineVoidProp(JSContext* cx, JSObject* obj, jsval id,
    1:                          JSObject** objp)
    1: {
    1:   NS_ASSERTION(JSVAL_IS_STRING(id), "id must be a string");
    1: 
    1:   JSString* str = JSVAL_TO_STRING(id);
    1: 
    1:   // We might have a document here.
    1:   PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:   sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:   // We want this to be as invisible to content script as possible.  So
    1:   // don't enumerate this, and set is as JSPROP_SHARED so it won't get
    1:   // cached on the object.
    1:   JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                     ::JS_GetStringLength(str), JSVAL_VOID,
    1:                                     nsnull, nsnull, JSPROP_SHARED);
    1: 
    1:   sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:   if (!ok) {
    1:     return NS_ERROR_FAILURE;
    1:   }
    1: 
    1:   *objp = obj;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNodeSH::PreCreate(nsISupports *nativeObj, JSContext *cx, JSObject *globalObj,
    1:                     JSObject **parentObj)
    1: {
 8856:   nsINode *node = static_cast<nsINode*>(nativeObj);
 8856:   
 8856: #ifdef DEBUG
 8856:   {
 8856:     nsCOMPtr<nsINode> node_qi(do_QueryInterface(nativeObj));
 8856: 
 8856:     // If this assertion fires the QI implementation for the object in
 8856:     // question doesn't use the nsINode pointer as the nsISupports
 8856:     // pointer. That must be fixed, or we'll crash...
 8856:     NS_ASSERTION(node_qi == node, "Uh, fix QI!");
 8856:   }
 8856: #endif
    1: 
    1:   // Make sure that we get the owner document of the content node, in case
    1:   // we're in document teardown.  If we are, it's important to *not* use
    1:   // globalObj as the nodes parent since that would give the node the
    1:   // principal of globalObj (i.e. the principal of the document that's being
    1:   // loaded) and not the principal of the document that's being unloaded.
    1:   // See http://bugzilla.mozilla.org/show_bug.cgi?id=227417
    1:   nsIDocument* doc = node->GetOwnerDoc();
    1: 
    1:   if (!doc) {
    1:     // No document reachable from nativeObj, use the global object
    1:     // that was passed to this method.
    1: 
    1:     *parentObj = globalObj;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
20377:   // If we have a document, make sure one of these is true
20377:   // (1) it has a script handling object,
20377:   // (2) has had one, or has been marked to have had one,
20377:   // (3) we are running a privileged script.
20377:   // Event handling is possible only if (1). If (2) event handling is prevented.
20377:   // If document has never had a script handling object,
20377:   // untrusted scripts (3) shouldn't touch it!
20377:   PRBool hasHadScriptHandlingObject = PR_FALSE;
20377:   NS_ENSURE_STATE(doc->GetScriptHandlingObject(hasHadScriptHandlingObject) ||
20377:                   hasHadScriptHandlingObject ||
20377:                   IsPrivilegedScript());
20377: 
    1:   nsISupports *native_parent;
    1: 
    1:   if (node->IsNodeOfType(nsINode::eELEMENT | nsINode::eXUL)) {
    1:     // For XUL elements, use the parent, if any.
    1:     native_parent = node->GetParent();
    1: 
    1:     if (!native_parent) {
    1:       native_parent = doc;
    1:     }
    1:   } else if (!node->IsNodeOfType(nsINode::eDOCUMENT)) {
    1:     NS_ASSERTION(node->IsNodeOfType(nsINode::eCONTENT) ||
    1:                  node->IsNodeOfType(nsINode::eATTRIBUTE),
    1:                  "Unexpected node type");
    1:                  
    1:     // For attributes and non-XUL content, use the document as scope parent.
    1:     native_parent = doc;
    1: 
    1:     // But for HTML form controls, use the form as scope parent.
    1:     if (node->IsNodeOfType(nsINode::eELEMENT |
    1:                            nsIContent::eHTML |
    1:                            nsIContent::eHTML_FORM_CONTROL)) {
    1:       nsCOMPtr<nsIFormControl> form_control(do_QueryInterface(node));
    1: 
    1:       if (form_control) {
    1:         nsCOMPtr<nsIDOMHTMLFormElement> form;
    1:         form_control->GetForm(getter_AddRefs(form));
    1: 
    1:         if (form) {
    1:           // Found a form, use it.
    1:           native_parent = form;
    1:         }
    1:       }
    1:     }
    1:   } else {
    1:     // We're called for a document object; set the parent to be the
    1:     // document's global object, if there is one
    1: 
    1:     // Get the scope object from the document.
    1:     native_parent = doc->GetScopeObject();
    1: 
    1:     if (!native_parent) {
    1:       // No global object reachable from this document, use the
    1:       // global object that was passed to this method.
    1: 
    1:       *parentObj = globalObj;
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // XXXjst: Maybe we need to find the global to use from the
    1:   // nsIScriptGlobalObject that's reachable from the node we're about
    1:   // to wrap here? But that's not always reachable, let's use
    1:   // globalObj for now...
    1: 
 8635:   if (native_parent == doc && (*parentObj = doc->GetJSObject())) {
 8635:     return NS_OK;
 8635:   }
 8635: 
    1:   jsval v;
    1:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:   nsresult rv = WrapNative(cx, globalObj, native_parent,
22071:                            NS_GET_IID(nsISupports), &v,
    1:                            getter_AddRefs(holder));
    1: 
    1:   *parentObj = JSVAL_TO_OBJECT(v);
    1: 
    1:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP
21618: nsNodeSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                      JSObject *obj)
21618: {
21618:   nsINode* node = static_cast<nsINode*>(wrapper->Native());
21618:   node->SetWrapper(wrapper);
21618: 
21618:   return nsEventReceiverSH::PostCreate(wrapper, cx, obj);
21618: }
21618: 
21618: NS_IMETHODIMP
    1: nsNodeSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                       JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   nsDOMClassInfo::PreserveNodeWrapper(wrapper);
    1:   return nsEventReceiverSH::AddProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNodeSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                      JSObject *obj, jsval id, PRUint32 flags,
    1:                      JSObject **objp, PRBool *_retval)
    1: {
    1:   if ((id == sBaseURIObject_id || id == sNodePrincipal_id) &&
    1:       IsPrivilegedScript()) {
    1:     return DefineVoidProp(cx, obj, id, objp);
    1:   }
    1: 
21618:   if (id == sOnload_id || id == sOnerror_id) {
21618:     // Make sure that this node can't go away while waiting for a
21618:     // network load that could fire an event handler.
21618:     nsINode* node = static_cast<nsINode*>(wrapper->Native());
21618:     node->PreserveWrapper();
21618:   }
21618: 
    1:   return nsEventReceiverSH::NewResolve(wrapper, cx, obj, id, flags, objp,
    1:                                        _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNodeSH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                       JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   if (id == sBaseURIObject_id && IsPrivilegedScript()) {
    1:     // I wish GetBaseURI lived on nsINode
    1:     nsCOMPtr<nsIURI> uri;
    1:     nsCOMPtr<nsIContent> content = do_QueryWrappedNative(wrapper);
    1:     if (content) {
    1:       uri = content->GetBaseURI();
    1:       NS_ENSURE_TRUE(uri, NS_ERROR_OUT_OF_MEMORY);
    1:     } else {
    1:       nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper);
    1:       NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
    1: 
    1:       uri = doc->GetBaseURI();
    1:       NS_ENSURE_TRUE(uri, NS_ERROR_NOT_AVAILABLE);
    1:     }
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     nsresult rv = WrapNative(cx, obj, uri, NS_GET_IID(nsIURI), vp,
    1:                              getter_AddRefs(holder));
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   if (id == sNodePrincipal_id && IsPrivilegedScript()) {
    1:     nsCOMPtr<nsINode> node = do_QueryWrappedNative(wrapper);
    1:     NS_ENSURE_TRUE(node, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:     nsresult rv = WrapNative(cx, obj, node->NodePrincipal(),
22071:                              NS_GET_IID(nsIPrincipal), vp,
    1:                              getter_AddRefs(holder));
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }    
    1: 
    1:   // Note: none of our ancestors want GetProperty
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNodeSH::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                       JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   if ((id == sBaseURIObject_id || id == sNodePrincipal_id) &&
    1:       IsPrivilegedScript()) {
 7217:     // We don't want privileged script that can read this property to set it,
 7217:     // but _do_ want to allow everyone else to set a value they can then read.
 7217:     //
 7217:     // XXXbz Is there a better error we could use here?
    1:     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
    1:   }
    1: 
    1:   return nsEventReceiverSH::SetProperty(wrapper, cx, obj, id, vp,_retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNodeSH::GetFlags(PRUint32 *aFlags)
    1: {
    1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS | nsIClassInfo::CONTENT_NODE;
    1: 
    1:   return NS_OK;
    1: }
    1: 
21618: NS_IMETHODIMP
21618: nsNodeSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                    JSObject *obj)
21618: {
21618:   nsINode* node = static_cast<nsINode*>(wrapper->Native());
21618:   node->ClearWrapper();
21618: 
21618:   return NS_OK;
21618: }
21618:  
    1: // EventReceiver helper
    1: 
    1: // static
    1: PRBool
    1: nsEventReceiverSH::ReallyIsEventName(jsval id, jschar aFirstChar)
    1: {
    1:   // I wonder if this is faster than using a hash...
    1: 
    1:   switch (aFirstChar) {
    1:   case 'a' :
    1:     return id == sOnabort_id;
    1:   case 'b' :
    1:     return (id == sOnbeforeunload_id ||
12176:             id == sOnblur_id);
    1:   case 'e' :
    1:     return id == sOnerror_id;
    1:   case 'f' :
    1:     return id == sOnfocus_id;
    1:   case 'c' :
    1:     return (id == sOnchange_id       ||
    1:             id == sOnclick_id        ||
 4010:             id == sOncontextmenu_id  ||
 4010:             id == sOncopy_id         ||
 4010:             id == sOncut_id);
    1:   case 'd' :
    1:     return id == sOndblclick_id;
    1:   case 'l' :
    1:     return id == sOnload_id;
    1:   case 'p' :
    1:     return (id == sOnpaint_id        ||
    1:             id == sOnpageshow_id     ||
 4010:             id == sOnpagehide_id     ||
 4010:             id == sOnpaste_id);
    1:   case 'k' :
    1:     return (id == sOnkeydown_id      ||
    1:             id == sOnkeypress_id     ||
    1:             id == sOnkeyup_id);
    1:   case 'u' :
    1:     return id == sOnunload_id;
    1:   case 'm' :
    1:     return (id == sOnmousemove_id    ||
    1:             id == sOnmouseout_id     ||
    1:             id == sOnmouseover_id    ||
    1:             id == sOnmouseup_id      ||
    1:             id == sOnmousedown_id);
    1:   case 'r' :
    1:     return (id == sOnreset_id        ||
    1:             id == sOnresize_id);
    1:   case 's' :
    1:     return (id == sOnscroll_id       ||
    1:             id == sOnselect_id       ||
    1:             id == sOnsubmit_id);
    1:   }
    1: 
    1:   return PR_FALSE;
    1: }
    1: 
    1: // static
18907: JSBool
    1: nsEventReceiverSH::AddEventListenerHelper(JSContext *cx, JSObject *obj,
    1:                                           uintN argc, jsval *argv, jsval *rval)
    1: {
    1:   if (argc < 3 || argc > 4) {
    1:     ThrowJSException(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
 2890:   OBJ_TO_INNER_OBJECT(cx, obj);
 2890: 
  569:   nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
  569:   nsresult rv =
  569:     sXPConnect->GetWrappedNativeOfJSObject(cx, obj, getter_AddRefs(wrapper));
  569:   if (NS_FAILED(rv)) {
  569:     nsDOMClassInfo::ThrowJSException(cx, rv);
  569: 
  569:     return JS_FALSE;
  569:   }
  569: 
  569:   // Set obj to be the object on which we'll actually register the
  569:   // event listener.
  569:   wrapper->GetJSObject(&obj);
  569: 
  457:   // Check that the caller has permission to call obj's addEventListener.
  457:   if (NS_FAILED(sSecMan->CheckPropertyAccess(cx, obj,
  457:                                              JS_GET_CLASS(cx, obj)->name,
  457:                                              sAddEventListener_id,
  457:                                              nsIXPCSecurityManager::ACCESS_GET_PROPERTY)) ||
  457:       NS_FAILED(sSecMan->CheckPropertyAccess(cx, obj,
  457:                                              JS_GET_CLASS(cx, obj)->name,
  457:                                              sAddEventListener_id,
  457:                                              nsIXPCSecurityManager::ACCESS_CALL_METHOD))) {
  457:     // The caller doesn't have access to get or call the callee
  457:     // object's addEventListener method. The security manager already
  457:     // threw an exception for us, so simply return false.
  457: 
  457:     return JS_FALSE;
  457:   }
  457: 
    1:   if (JSVAL_IS_PRIMITIVE(argv[1])) {
    1:     // The second argument must be a function, or a
    1:     // nsIDOMEventListener. Throw an error.
    1:     ThrowJSException(cx, NS_ERROR_XPC_BAD_CONVERT_JS);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   JSString* jsstr = JS_ValueToString(cx, argv[0]);
    1:   if (!jsstr) {
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   nsDependentJSString type(jsstr);
    1: 
    1:   nsCOMPtr<nsIDOMEventListener> listener;
    1: 
    1:   {
    1:     nsCOMPtr<nsISupports> tmp;
    1:     sXPConnect->WrapJS(cx, JSVAL_TO_OBJECT(argv[1]),
    1:                        NS_GET_IID(nsIDOMEventListener), getter_AddRefs(tmp));
    1: 
    1:     listener = do_QueryInterface(tmp, &rv);
    1:     if (NS_FAILED(rv)) {
    1:       ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
    1:   }
    1: 
    1:   JSBool useCapture;
    1:   if (!JS_ValueToBoolean(cx, argv[2], &useCapture)) {
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   if (argc == 4) {
    1:     JSBool wantsUntrusted;
    1:     if (!JS_ValueToBoolean(cx, argv[3], &wantsUntrusted)) {
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     nsCOMPtr<nsIDOMNSEventTarget> eventTarget(do_QueryWrappedNative(wrapper,
    1:                                                                     &rv));
    1:     if (NS_FAILED(rv)) {
    1:       ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     rv = eventTarget->AddEventListener(type, listener, useCapture,
    1:                                        wantsUntrusted);
    1:     if (NS_FAILED(rv)) {
    1:       ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
    1:   } else {
    1:     nsCOMPtr<nsIDOMEventTarget> eventTarget(do_QueryWrappedNative(wrapper,
    1:                                                                   &rv));
    1:     if (NS_FAILED(rv)) {
    1:       ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     rv = eventTarget->AddEventListener(type, listener, useCapture);
    1:     if (NS_FAILED(rv)) {
    1:       ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
    1:   }
    1:   
    1:   return JS_TRUE;
    1: }
    1: 
    1: nsresult
    1: nsEventReceiverSH::RegisterCompileHandler(nsIXPConnectWrappedNative *wrapper,
    1:                                           JSContext *cx, JSObject *obj,
    1:                                           jsval id, PRBool compile,
    1:                                           PRBool remove,
    1:                                           PRBool *did_define)
    1: {
    1:   NS_PRECONDITION(!compile || !remove,
    1:                   "Can't both compile and remove at the same time");
    1:   *did_define = PR_FALSE;
    1: 
    1:   if (!IsEventName(id)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (ObjectIsNativeWrapper(cx, obj)) {
    1:     return NS_ERROR_NOT_AVAILABLE;
    1:   }
    1: 
    1:   nsIScriptContext *script_cx = nsJSUtils::GetStaticScriptContext(cx, obj);
    1:   NS_ENSURE_TRUE(script_cx, NS_ERROR_UNEXPECTED);
    1: 
 1418:   nsCOMPtr<nsPIDOMEventTarget> piTarget(do_QueryWrappedNative(wrapper));
 1418:   if (!piTarget) {
    1:     // Doesn't do events
 1418:     NS_WARNING("Doesn't QI to nsPIDOMEventTarget?");
    1:     return NS_OK;
    1:   }
    1:   
    1:   nsCOMPtr<nsIEventListenerManager> manager;
 1418:   piTarget->GetListenerManager(PR_TRUE, getter_AddRefs(manager));
    1:   NS_ENSURE_TRUE(manager, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsCOMPtr<nsIAtom> atom(do_GetAtom(nsDependentJSString(id)));
    1:   NS_ENSURE_TRUE(atom, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:   nsresult rv;
    1: 
 4427:   JSObject *scope = ::JS_GetGlobalForObject(cx, obj);
    1: 
    1:   if (compile) {
 1418:     rv = manager->CompileScriptEventListener(script_cx, scope, piTarget, atom,
    1:                                              did_define);
    1:   } else if (remove) {
    1:     rv = manager->RemoveScriptEventListener(atom);
    1:   } else {
 1418:     rv = manager->RegisterScriptEventListener(script_cx, scope, piTarget,
    1:                                               atom);
    1:   }
    1: 
    1:   return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1: }
    1: 
16664: nsresult
16664: nsEventReceiverSH::DefineAddEventListener(JSContext *cx, JSObject *obj,
16664:                                           jsval id, JSObject **objp)
16664: {
16664:   NS_ASSERTION(id == sAddEventListener_id, "Wrong call?!?");
16664:   JSString *str = JSVAL_TO_STRING(id);
16664:   // addEventListener always takes at least 3 arguments.
16664:   JSFunction *fnc =
16664:     ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str),
16664:                         nsEventReceiverSH::AddEventListenerHelper, 3,
16664:                         JSPROP_ENUMERATE);
16664:   *objp = obj;
16664:   return fnc ? NS_OK : NS_ERROR_UNEXPECTED;
16664: }
16664: 
    1: NS_IMETHODIMP
    1: nsEventReceiverSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
    1:                               JSContext *cx, JSObject *obj, jsval id,
    1:                               PRUint32 flags, JSObject **objp, PRBool *_retval)
    1: {
    1:   if (!JSVAL_IS_STRING(id)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (flags & JSRESOLVE_ASSIGNING) {
    1:     if (!IsEventName(id)) {
    1:       // Bail out.  We don't care about this assignment.
    1:       return NS_OK;
    1:     }
    1: 
    1:     // If we're assigning to an on* property, just resolve to null for
 8297:     // now; the assignment will then set the right value. Only do this
 8297:     // in the case where the property isn't already defined on the
 8297:     // object's prototype chain though.
    1:     JSString* str = JSVAL_TO_STRING(id);
    1:     JSAutoRequest ar(cx);
 8297: 
 8297:     JSObject *proto = ::JS_GetPrototype(cx, obj);
 8297:     PRBool ok = PR_TRUE, hasProp = PR_FALSE;
 8297:     if (!proto || ((ok = ::JS_HasUCProperty(cx, proto, ::JS_GetStringChars(str),
 8297:                                             ::JS_GetStringLength(str),
 8297:                                             &hasProp)) &&
 8297:                    !hasProp)) {
    1:       // Make sure the flags here match those in
    1:       // nsJSContext::BindCompiledEventHandler
    1:       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                  ::JS_GetStringLength(str), JSVAL_NULL,
    1:                                  nsnull, nsnull,
    1:                                  JSPROP_ENUMERATE | JSPROP_PERMANENT)) {
    1:         return NS_ERROR_FAILURE;
    1:       }
    1: 
    1:       *objp = obj;
    1:       return NS_OK;
    1:     }
    1: 
 8297:     return ok ? NS_OK : NS_ERROR_FAILURE;
 8297:   }
 8297: 
    1:   if (id == sAddEventListener_id) {
16664:     return nsEventReceiverSH::DefineAddEventListener(cx, obj, id, objp);
    1:   }
    1: 
    1:   PRBool did_define = PR_FALSE;
    1:   nsresult rv = RegisterCompileHandler(wrapper, cx, obj, id, PR_TRUE, PR_FALSE,
    1:                                        &did_define);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (did_define) {
    1:     *objp = obj;
    1:   }
    1: 
    1:   return nsDOMGenericSH::NewResolve(wrapper, cx, obj, id, flags, objp,
    1:                                     _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsEventReceiverSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                JSContext *cx, JSObject *obj, jsval id,
    1:                                jsval *vp, PRBool *_retval)
    1: {
    1:   JSAutoRequest ar(cx);
    1: 
    1:   if ((::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION && !JSVAL_IS_NULL(*vp)) ||
    1:       !JSVAL_IS_STRING(id) || id == sAddEventListener_id) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   PRBool did_compile; // Ignored here.
    1: 
    1:   return RegisterCompileHandler(wrapper, cx, obj, id, PR_FALSE,
    1:                                 JSVAL_IS_NULL(*vp), &did_compile);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsEventReceiverSH::AddProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                JSContext *cx, JSObject *obj, jsval id,
    1:                                jsval *vp, PRBool *_retval)
    1: {
    1:   return nsEventReceiverSH::SetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
16664: // EventTarget helper
16664: 
16664: NS_IMETHODIMP
21618: nsEventTargetSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
21618:                            JSObject *globalObj, JSObject **parentObj)
21618: {
21618:   nsXHREventTarget *target = nsXHREventTarget::FromSupports(nativeObj);
21618: 
21618:   nsCOMPtr<nsIScriptGlobalObject> native_parent;
21618:   target->GetParentObject(getter_AddRefs(native_parent));
21618: 
21618:   *parentObj = native_parent ? native_parent->GetGlobalJSObject() : globalObj;
21618: 
21618:   return NS_OK;
21618: }
21618: 
21618: NS_IMETHODIMP
21618: nsEventTargetSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                             JSObject *obj)
21618: {
21618:   nsXHREventTarget *target = nsXHREventTarget::FromSupports(wrapper->Native());
21618:   target->SetWrapper(wrapper);
21618: 
21618:   return nsDOMGenericSH::PostCreate(wrapper, cx, obj);
21618: }
21618: 
21618: NS_IMETHODIMP
16664: nsEventTargetSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
16664:                             JSContext *cx, JSObject *obj, jsval id,
16664:                             PRUint32 flags, JSObject **objp, PRBool *_retval)
16664: {
16664:   if ((flags & JSRESOLVE_ASSIGNING) || !JSVAL_IS_STRING(id)) {
16664:     return NS_OK;
16664:   }
16664:   if (id == sAddEventListener_id) {
16664:     return nsEventReceiverSH::DefineAddEventListener(cx, obj, id, objp);
16664:   }
16664:   return nsDOMGenericSH::NewResolve(wrapper, cx, obj, id, flags, objp,
16664:                                     _retval);
16664: }
    1: 
19701: NS_IMETHODIMP
19701: nsEventTargetSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
19701:                              JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
19701: {
19701:   if (id == sAddEventListener_id) {
19701:     return NS_OK;
19701:   }
21618: 
21618:   nsXHREventTarget *target = nsXHREventTarget::FromSupports(wrapper->Native());
21618:   target->PreserveWrapper();
21618: 
21618:   return NS_OK;
21618: }
21618: 
21618: NS_IMETHODIMP
21618: nsEventTargetSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                           JSObject *obj)
21618: {
21618:   nsXHREventTarget *target = nsXHREventTarget::FromSupports(wrapper->Native());
21618:   target->ClearWrapper();
21618: 
21618:   return NS_OK;
21618: }
21618: 
19701: 
    1: // Element helper
    1: 
    1: NS_IMETHODIMP
    1: nsElementSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj)
    1: {
    1:   nsresult rv = nsNodeSH::PostCreate(wrapper, cx, obj);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
 8856:   nsIContent *content = static_cast<nsIContent*>(wrapper->Native());
 8856: 
 8856: #ifdef DEBUG
 8856:   {
 8856:     nsCOMPtr<nsIContent> content_qi(do_QueryWrappedNative(wrapper));
 8856: 
 8856:     // If this assertion fires the QI implementation for the object in
 8856:     // question doesn't use the nsIContent pointer as the nsISupports
 8856:     // pointer. That must be fixed, or we'll crash...
 8856:     NS_ASSERTION(content_qi == content, "Uh, fix QI!");
 8856:   }
 8856: #endif
    1: 
 1498:   nsCOMPtr<nsIDocument> doc;
 1498:   if (content->HasFlag(NODE_FORCE_XBL_BINDINGS)) {
 1498:     doc = content->GetOwnerDoc();
 1498:   }
 1498:   else {
 1498:     doc = content->GetCurrentDoc();
 1498:   }
    1: 
    1:   if (!doc) {
    1:     // There's no baseclass that cares about this call so we just
    1:     // return here.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
 7216:   // We must ensure that the XBL Binding is installed before we hand
 7216:   // back this object.
 7216: 
 7216:   if (content->HasFlag(NODE_MAY_BE_IN_BINDING_MNGR) &&
13098:       doc->BindingManager()->GetBinding(content)) {
13098:     // There's already a binding for this element so nothing left to
13098:     // be done here.
13098: 
13098:     // In theory we could call ExecuteAttachedHandler here when it's safe to
13098:     // run script if we also removed the binding from the PAQ queue, but that
13098:     // seems like a scary change that would mosly just add more
13098:     // inconsistencies.
13098: 
13098:     return NS_OK;
 7216:   }
 7216: 
    1:   // See if we have a frame.
  981:   nsIPresShell *shell = doc->GetPrimaryShell();
    1: 
    1:   if (!shell) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsIFrame* frame = shell->GetPrimaryFrameFor(content);
    1: 
    1:   if (frame) {
    1:     // If we have a frame the frame has already loaded the binding.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   // Get the computed -moz-binding directly from the style context
    1:   nsPresContext *pctx = shell->GetPresContext();
    1:   NS_ENSURE_TRUE(pctx, NS_ERROR_UNEXPECTED);
    1: 
 1103:   // Make sure the style context goes away _before_ we execute the binding
 1103:   // constructor, since the constructor can destroy the relevant presshell.
13098:   nsRefPtr<nsXBLBinding> binding;
 1103:   {
 1103:     // Scope for the nsRefPtr
    1:     nsRefPtr<nsStyleContext> sc = pctx->StyleSet()->ResolveStyleFor(content,
    1:                                                                     nsnull);
    1:     NS_ENSURE_TRUE(sc, NS_ERROR_FAILURE);
    1: 
 3645:     nsCSSValue::URL *bindingURL = sc->GetStyleDisplay()->mBinding;
    1:     if (!bindingURL) {
    1:       // No binding, nothing left to do here.
    1:       return NS_OK;
    1:     }
    1: 
    1:     // We have a binding that must be installed.
    1:     PRBool dummy;
    1: 
    1:     nsCOMPtr<nsIXBLService> xblService(do_GetService("@mozilla.org/xbl;1"));
    1:     NS_ENSURE_TRUE(xblService, NS_ERROR_NOT_AVAILABLE);
    1: 
 3645:     xblService->LoadBindings(content, bindingURL->mURI,
 3645:                              bindingURL->mOriginPrincipal, PR_FALSE,
    1:                              getter_AddRefs(binding), &dummy);
 1103:   }
    1:   
    1:   if (binding) {
13098:     if (nsContentUtils::IsSafeToRunScript()) {
    1:       binding->ExecuteAttachedHandler();
    1:     }
13098:     else {
13098:       nsContentUtils::AddScriptRunner(new nsRunnableMethod<nsXBLBinding>(
13098:         binding, &nsXBLBinding::ExecuteAttachedHandler));
13098:     }
13098:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
 6392: NS_IMETHODIMP
 6392: nsElementSH::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 6392:                        JSObject *obj, PRBool *_retval)
 6392: {
 6392:   // Make sure to not call the superclass here!
 6392:   nsCOMPtr<nsIContent> content(do_QueryWrappedNative(wrapper));
 6392:   NS_ENSURE_TRUE(content, NS_ERROR_UNEXPECTED);
 6392: 
 6392:   nsIDocument* doc = content->GetOwnerDoc();
 6392:   if (!doc) {
 6392:     // Nothing else to do here
 6392:     return NS_OK;
 6392:   }
 6392: 
 8384:   nsRefPtr<nsXBLBinding> binding = doc->BindingManager()->GetBinding(content);
 6392:   if (!binding) {
 6392:     // Nothing else to do here
 6392:     return NS_OK;
 6392:   }
 6392: 
 6392:   *_retval = binding->ResolveAllFields(cx, obj);
 6392:   
 6392:   return NS_OK;
 6392: }
 6392:   
 6392: 
    1: // Generic array scriptable helper.
    1: 
    1: NS_IMETHODIMP
    1: nsGenericArraySH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                              JSObject *obj, jsval id, PRUint32 flags,
    1:                              JSObject **objp, PRBool *_retval)
    1: {
18877:   if (id == sLength_id) {
18877:     // Bail early; this isn't something we're interested in
18877:     return NS_OK;
18877:   }
18877:   
    1:   PRBool is_number = PR_FALSE;
    1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
    1: 
    1:   if (is_number && n >= 0) {
    1:     // XXX The following is a cheap optimization to avoid hitting xpconnect to
    1:     // get the length. We may want to consider asking our concrete
    1:     // implementation for the length, and falling back onto the GetProperty if
    1:     // it doesn't provide one.
    1: 
    1:     PRUint32 length;
20752:     nsresult rv = GetLength(wrapper, cx, obj, &length);
20752:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if ((PRUint32)n < length) {
    1:       *_retval = ::JS_DefineElement(cx, obj, n, JSVAL_VOID, nsnull, nsnull,
    1:                                     JSPROP_ENUMERATE | JSPROP_SHARED);
    1:       *objp = obj;
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
20752: nsresult
20752: nsGenericArraySH::GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
20752:                              JSObject *obj, PRUint32 *length)
20752: {
20752:   *length = 0;
20752: 
20752:   jsval lenval;
20752:   if (!JS_GetProperty(cx, obj, "length", &lenval)) {
20752:     return NS_ERROR_UNEXPECTED;
20752:   }
20752: 
20752:   if (!JSVAL_IS_INT(lenval)) {
20752:     // This can apparently happen with some sparse array impls falling back
20752:     // onto this code.
20752:     return NS_OK;
20752:   }
20752: 
20752:   PRInt32 slen = JSVAL_TO_INT(lenval);
20752:   if (slen < 0) {
20752:     return NS_OK;
20752:   }
20752: 
20752:   *length = (PRUint32)slen;
20752: 
20752:   return NS_OK;
20752: }
20752: 
    1: NS_IMETHODIMP
    1: nsGenericArraySH::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, PRBool *_retval)
    1: {
    1:   // Recursion protection in case someone tries to be smart and call
    1:   // the enumerate hook from a user defined .length getter, or
    1:   // somesuch.
    1: 
    1:   static PRBool sCurrentlyEnumerating;
    1: 
    1:   if (sCurrentlyEnumerating) {
    1:     // Don't recurse to death.
    1:     return NS_OK;
    1:   }
    1: 
    1:   sCurrentlyEnumerating = PR_TRUE;
    1: 
    1:   jsval len_val;
    1:   JSAutoRequest ar(cx);
    1:   JSBool ok = ::JS_GetProperty(cx, obj, "length", &len_val);
    1: 
    1:   if (ok && JSVAL_IS_INT(len_val)) {
    1:     PRInt32 length = JSVAL_TO_INT(len_val);
    1: 
    1:     for (PRInt32 i = 0; ok && i < length; ++i) {
20148:       ok = ::JS_DefineElement(cx, obj, i, JSVAL_VOID, nsnull, nsnull,
    1:                               JSPROP_ENUMERATE | JSPROP_SHARED);
    1:     }
    1:   }
    1: 
    1:   sCurrentlyEnumerating = PR_FALSE;
    1: 
    1:   return ok ? NS_OK : NS_ERROR_UNEXPECTED;
    1: }
    1: 
20752: // Array scriptable helper
    1: 
    1: NS_IMETHODIMP
    1: nsArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                        JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   PRBool is_number = PR_FALSE;
    1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
    1: 
    1:   nsresult rv = NS_OK;
    1: 
    1:   if (is_number) {
    1:     if (n < 0) {
    1:       return NS_ERROR_DOM_INDEX_SIZE_ERR;
    1:     }
    1: 
20752:     // Make sure rv == NS_OK here, so GetItemAt implementations that never fail
20752:     // don't have to set rv.
20752:     rv = NS_OK;
20752:     nsISupports* array_item = GetItemAt(wrapper->Native(), n, &rv);
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if (array_item) {
22071:       rv = WrapNative(cx, obj, array_item, NS_GET_IID(nsISupports), vp);
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       rv = NS_SUCCESS_I_DID_SOMETHING;
    1:     }
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
    1: 
20752: // NodeList scriptable helper
20752: 
20752: nsresult
21618: nsNodeListSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
21618:                         JSObject *globalObj, JSObject **parentObj)
21618: {
21618:   nsWrapperCache* cache = nsnull;
21618:   CallQueryInterface(nativeObj, &cache);
21618:   if (!cache) {
21618:     *parentObj = globalObj;
21618:     return NS_OK;
21618:   }
21618: 
21618:   // nsChildContentList is the only class that uses nsNodeListSH and has a
21618:   // cached wrapper.
21618:   nsChildContentList *list = nsChildContentList::FromSupports(nativeObj);
21618:   nsISupports *native_parent = list->GetParentObject();
21618:   if (!native_parent) {
21618:     return NS_ERROR_FAILURE;
21618:   }
21618: 
21618:   jsval v;
21618:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:   nsresult rv = WrapNative(cx, globalObj, native_parent,
22071:                            NS_GET_IID(nsISupports), &v,
21618:                            getter_AddRefs(holder));
21618: 
21618:   *parentObj = JSVAL_TO_OBJECT(v);
21618: 
21618:   return rv;
21618: }
21618: 
21618: NS_IMETHODIMP
21618: nsNodeListSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                          JSObject *obj)
21618: {
21618:   nsWrapperCache* cache = nsnull;
21618:   CallQueryInterface(wrapper->Native(), &cache);
21618:   if (cache) {
21618:     cache->SetWrapper(wrapper);
21618:   }
21618: 
21618:   return nsArraySH::PostCreate(wrapper, cx, obj);
21618: }
21618: 
21618: nsresult
21384: nsNodeListSH::GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21384:                         JSObject *obj, PRUint32 *length)
21384: {
21384:   nsINodeList* list = static_cast<nsINodeList*>(wrapper->Native());
21384: #ifdef DEBUG
21384:   {
21384:     nsCOMPtr<nsINodeList> list_qi = do_QueryWrappedNative(wrapper);
21384: 
21384:     // If this assertion fires the QI implementation for the object in
21384:     // question doesn't use the nsINodeList pointer as the nsISupports
21384:     // pointer. That must be fixed, or we'll crash...
21384:     NS_ASSERTION(list_qi == list, "Uh, fix QI!");
21384:   }
21384: #endif
21384: 
21384:   return list->GetLength(length);
21384: }
21384: 
21384: nsISupports*
21384: nsNodeListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
21384:                         nsresult *aResult)
21384: {
21384:   nsINodeList* list = static_cast<nsINodeList*>(aNative);
21384: #ifdef DEBUG
21384:   {
21384:     nsCOMPtr<nsINodeList> list_qi = do_QueryInterface(aNative);
21384: 
21384:     // If this assertion fires the QI implementation for the object in
21384:     // question doesn't use the nsINodeList pointer as the nsISupports
21384:     // pointer. That must be fixed, or we'll crash...
21384:     NS_ASSERTION(list_qi == list, "Uh, fix QI!");
21384:   }
21384: #endif
21384: 
21384:   return list->GetNodeAt(aIndex);
21384: }
21384: 
21618: NS_IMETHODIMP
21618: nsNodeListSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                        JSObject *obj)
21618: {
21618:   nsWrapperCache* cache = nsnull;
21618:   CallQueryInterface(wrapper->Native(), &cache);
21618:   if (cache) {
21618:     cache->ClearWrapper();
21618:   }
21618: 
21618:   return NS_OK;
21618: }
21618: 
21384: 
21384: // StringList scriptable helper
21384: 
21384: nsresult
21384: nsStringListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
21384:                             nsAString& aResult)
21384: {
21384:   nsCOMPtr<nsIDOMDOMStringList> list(do_QueryInterface(aNative));
21384:   NS_ENSURE_TRUE(list, NS_ERROR_UNEXPECTED);
21384: 
21384:   return list->Item(aIndex, aResult);
21384: }
21384: 
21384: 
21384: // Named Array helper
21384: 
21384: NS_IMETHODIMP
21384: nsNamedArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21384:                             JSObject *obj, jsval id, jsval *vp,
21384:                             PRBool *_retval)
21384: {
21384:   if (JSVAL_IS_STRING(id) && !ObjectIsNativeWrapper(cx, obj)) {
21384:     nsresult rv = NS_OK;
21384:     nsISupports* item = GetNamedItem(wrapper->Native(), nsDependentJSString(id),
21384:                                      &rv);
21384:     NS_ENSURE_SUCCESS(rv, rv);
21384: 
21384:     if (item) {
22071:       rv = WrapNative(cx, obj, item, NS_GET_IID(nsISupports), vp);
21384:       NS_ENSURE_SUCCESS(rv, rv);
21384: 
21384:       rv = NS_SUCCESS_I_DID_SOMETHING;
21384:     }
21384: 
21384:     // Don't fall through to nsArraySH::GetProperty() here
21384:     return rv;
21384:   }
21384: 
21384:   return nsArraySH::GetProperty(wrapper, cx, obj, id, vp, _retval);
21384: }
21384: 
21384: 
21384: // NamedNodeMap helper
21384: 
21384: nsISupports*
21384: nsNamedNodeMapSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
21384:                             nsresult *aResult)
21384: {
21384:   nsDOMAttributeMap* map = nsDOMAttributeMap::FromSupports(aNative);
21384: 
21384:   return map->GetItemAt(aIndex, aResult);
21384: }
21384: 
21384: nsISupports*
21384: nsNamedNodeMapSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21384:                                nsresult *aResult)
21384: {
21384:   nsDOMAttributeMap* map = nsDOMAttributeMap::FromSupports(aNative);
21384: 
21384:   return map->GetNamedItem(aName, aResult);
21384: }
21384: 
21384: 
21384: // HTMLCollection helper
21384: 
21384: nsresult
21384: nsHTMLCollectionSH::GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21384:                               JSObject *obj, PRUint32 *length)
21384: {
21384:   nsIHTMLCollection* collection =
21384:     static_cast<nsIHTMLCollection*>(wrapper->Native());
21384: #ifdef DEBUG
21384:   {
21384:     nsCOMPtr<nsIHTMLCollection> collection_qi =
21384:       do_QueryInterface(wrapper->Native());
21384: 
21384:     // If this assertion fires the QI implementation for the object in
21384:     // question doesn't use the nsIHTMLCollection pointer as the nsISupports
21384:     // pointer. That must be fixed, or we'll crash...
21384:     NS_ASSERTION(collection_qi == collection, "Uh, fix QI!");
21384:   }
21384: #endif
21384: 
21384:   return collection->GetLength(length);
21384: }
21384: 
21384: nsISupports*
21384: nsHTMLCollectionSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
21384:                               nsresult *aResult)
21384: {
21384:   nsIHTMLCollection* collection = static_cast<nsIHTMLCollection*>(aNative);
21384: #ifdef DEBUG
21384:   {
21384:     nsCOMPtr<nsIHTMLCollection> collection_qi = do_QueryInterface(aNative);
21384: 
21384:     // If this assertion fires the QI implementation for the object in
21384:     // question doesn't use the nsIHTMLCollection pointer as the nsISupports
21384:     // pointer. That must be fixed, or we'll crash...
21384:     NS_ASSERTION(collection_qi == collection, "Uh, fix QI!");
21384:   }
21384: #endif
21384: 
21384:   return collection->GetNodeAt(aIndex, aResult);
21384: }
21384: 
21384: nsISupports*
21384: nsHTMLCollectionSH::GetNamedItem(nsISupports *aNative,
21384:                                  const nsAString& aName,
21384:                                  nsresult *aResult)
21384: {
21384:   nsIHTMLCollection* collection = static_cast<nsIHTMLCollection*>(aNative);
21384: #ifdef DEBUG
21384:   {
21384:     nsCOMPtr<nsIHTMLCollection> collection_qi = do_QueryInterface(aNative);
21384: 
21384:     // If this assertion fires the QI implementation for the object in
21384:     // question doesn't use the nsIHTMLCollection pointer as the nsISupports
21384:     // pointer. That must be fixed, or we'll crash...
21384:     NS_ASSERTION(collection_qi == collection, "Uh, fix QI!");
21384:   }
21384: #endif
21384: 
21384:   return collection->GetNamedItem(aName, aResult);
21384: }
21384: 
21384: 
21384: // ContentList helper
21384: nsresult
21384: nsContentListSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
21383:                            JSObject *globalObj, JSObject **parentObj)
21383: {
21384:   nsContentList *contentList = nsContentList::FromSupports(nativeObj);
21384:   nsISupports *native_parent = contentList->GetParentObject();
21384: 
21384:   if (!native_parent) {
21618:     return NS_ERROR_FAILURE;
21383:   }
21383: 
21383:   jsval v;
21383:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:   nsresult rv = WrapNative(cx, globalObj, native_parent,
22071:                            NS_GET_IID(nsISupports), &v,
21383:                            getter_AddRefs(holder));
21383: 
21383:   *parentObj = JSVAL_TO_OBJECT(v);
21383: 
21383:   return rv;
21383: }
21383: 
21618: NS_IMETHODIMP
21618: nsContentListSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                             JSObject *obj)
21618: {
21618:   nsContentList *list = nsContentList::FromSupports(wrapper->Native());
21618:   list->SetWrapper(wrapper);
21618: 
21618:   return nsNamedArraySH::PostCreate(wrapper, cx, obj);
21618: }
21618: 
21159: nsresult
21159: nsContentListSH::GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21159:                            JSObject *obj, PRUint32 *length)
21159: {
21154:   nsContentList *list = nsContentList::FromSupports(wrapper->Native());
21159: 
21159:   return list->GetLength(length);
21159: }
21159: 
21159: nsISupports*
21159: nsContentListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
21159:                            nsresult *aResult)
21159: {
21159:   nsContentList *list = nsContentList::FromSupports(aNative);
21159: 
21159:   return list->GetNodeAt(aIndex, aResult);
21159: }
21159: 
21159: nsISupports*
21159: nsContentListSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                               nsresult *aResult)
21159: {
21159:   nsContentList *list = nsContentList::FromSupports(aNative);
21159: 
21159:   return list->GetNamedItem(aName, aResult);
21159: }
21159: 
21618: NS_IMETHODIMP
21618: nsContentListSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
21618:                           JSObject *obj)
21618: {
21618:   nsContentList *list = nsContentList::FromSupports(wrapper->Native());
21618:   list->ClearWrapper();
21618: 
21618:   return NS_OK;
21618: }
    1: 
    1: // Document helper for document.location and document.on*
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, jsval id, jsval *vp,
    1:                           PRBool *_retval)
    1: {
    1:   // If we're in a state where we're not supposed to do a security
    1:   // check, return early.
    1:   if (!sDoSecurityCheckInAddProperty) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (id == sLocation_id) {
    1:     // Don't allow adding a document.location setter or getter, allowing
    1:     // that could lead to security bugs (see bug 143369).
    1: 
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, jsval id, jsval *vp,
    1:                           PRBool *_retval)
    1: {
    1:   if (id == sLocation_id) {
    1:     // Don't allow deleting document.location, allowing that could lead
    1:     // to security bugs (see bug 143369).
    1: 
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, PRUint32 flags,
    1:                          JSObject **objp, PRBool *_retval)
    1: {
    1:   nsresult rv;
    1: 
    1:   if (id == sLocation_id) {
    1:     // This must be done even if we're just getting the value of
    1:     // document.location (i.e. no checking flags & JSRESOLVE_ASSIGNING
    1:     // here) since we must define document.location to prevent the
    1:     // getter from being overriden (for security reasons).
    1: 
    1:     nsCOMPtr<nsIDOMNSDocument> doc(do_QueryWrappedNative(wrapper));
    1:     NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIDOMLocation> location;
    1:     rv = doc->GetLocation(getter_AddRefs(location));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     jsval v;
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv = WrapNative(cx, obj, location, NS_GET_IID(nsIDOMLocation), &v,
    1:                     getter_AddRefs(holder));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     PRBool doSecurityCheckInAddProperty = sDoSecurityCheckInAddProperty;
    1:     sDoSecurityCheckInAddProperty = PR_FALSE;
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
    1:     JSString *str = JSVAL_TO_STRING(id);
    1:     JSBool ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                       ::JS_GetStringLength(str), v, nsnull,
    1:                                       nsnull, JSPROP_ENUMERATE);
    1: 
    1:     sDoSecurityCheckInAddProperty = doSecurityCheckInAddProperty;
    1: 
    1:     if (!ok) {
    1:       return NS_ERROR_FAILURE;
    1:     }
    1: 
    1:     *objp = obj;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (id == sDocumentURIObject_id && IsPrivilegedScript()) {
    1:     return DefineVoidProp(cx, obj, id, objp);
    1:   } 
    1: 
    1:   return nsNodeSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   if (id == sDocumentURIObject_id && IsPrivilegedScript()) {
    1:     nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper);
    1:     NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsIURI* uri = doc->GetDocumentURI();
    1:     NS_ENSURE_TRUE(uri, NS_ERROR_NOT_AVAILABLE);
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     nsresult rv = WrapNative(cx, obj, uri, NS_GET_IID(nsIURI), vp,
    1:                              getter_AddRefs(holder));
    1: 
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   return nsNodeSH::GetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   if (id == sLocation_id) {
    1:     nsCOMPtr<nsIDOMNSDocument> doc(do_QueryWrappedNative(wrapper));
    1:     NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIDOMLocation> location;
    1: 
    1:     nsresult rv = doc->GetLocation(getter_AddRefs(location));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if (location) {
    1:       JSAutoRequest ar(cx);
    1: 
    1:       JSString *val = ::JS_ValueToString(cx, *vp);
    1:       NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
    1: 
    1:       rv = location->SetHref(nsDependentJSString(val));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:       rv = WrapNative(cx, obj, location, NS_GET_IID(nsIDOMLocation), vp,
    1:                       getter_AddRefs(holder));
    1:       return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:     }
    1:   }
    1: 
    1:   if (id == sDocumentURIObject_id && IsPrivilegedScript()) {
 7218:     // We don't want privileged script that can read this property to set it,
 7218:     // but _do_ want to allow everyone else to set a value they can then read.
 7218:     //
 7218:     // XXXbz Is there a better error we could use here?
    1:     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
    1:   }
    1:   
    1:   return nsNodeSH::SetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::GetFlags(PRUint32* aFlags)
    1: {
    1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDocumentSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj)
    1: {
    1:   // If this is the current document for the window that's the script global
    1:   // object of this document, then define this document object on the window.
    1:   // That will make sure that the document is referenced (via window.document)
    1:   // and prevent it from going away in GC.
    1:   nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper);
    1:   if (!doc) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
 8635:   // Cache the document's JSObject on the document so we can optimize
 8635:   // nsNodeSH::PreCreate() to avoid nested WrapNative() calls.
 8635:   doc->SetJSObject(obj);
 8635: 
 8635:   nsresult rv = nsNodeSH::PostCreate(wrapper, cx, obj);
 8635:   NS_ENSURE_SUCCESS(rv, rv);
 8635: 
 4042:   nsIScriptGlobalObject *sgo = doc->GetScriptGlobalObject();
 4042:   nsCOMPtr<nsPIDOMWindow> win = do_QueryInterface(sgo);
    1:   if (!win) {
    1:     // No window, nothing else to do here
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsIDOMDocument* currentDoc = win->GetExtantDocument();
    1: 
    1:   if (SameCOMIdentity(doc, currentDoc)) {
12451:     jsval winVal;
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv = WrapNative(cx, obj, win, NS_GET_IID(nsIDOMWindow), &winVal,
    1:                     getter_AddRefs(holder));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     NS_NAMED_LITERAL_STRING(doc_str, "document");
    1: 
    1:     if (!::JS_DefineUCProperty(cx, JSVAL_TO_OBJECT(winVal),
 3233:                                reinterpret_cast<const jschar *>
 3233:                                                (doc_str.get()),
10980:                                doc_str.Length(), OBJECT_TO_JSVAL(obj), nsnull,
    1:                                nsnull, JSPROP_READONLY | JSPROP_ENUMERATE)) {
    1:       return NS_ERROR_FAILURE;
    1:     }
    1:   }
    1:   return NS_OK;
    1: }
    1: 
 8635: NS_IMETHODIMP
 8635: nsDocumentSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 8635:                        JSObject *obj)
 8635: {
 8635:   nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper);
 8635:   if (!doc) {
 8635:     return NS_ERROR_UNEXPECTED;
 8635:   }
 8635: 
 8635:   doc->SetJSObject(nsnull);
 8635: 
21618:   return nsNodeSH::Finalize(wrapper, cx, obj);
 8635: }
 8635: 
    1: // HTMLDocument helper
    1: 
    1: // static
    1: nsresult
    1: nsHTMLDocumentSH::ResolveImpl(JSContext *cx,
    1:                               nsIXPConnectWrappedNative *wrapper, jsval id,
    1:                               nsISupports **result)
    1: {
 9596:   nsHTMLDocument *doc =
 9596:     static_cast<nsHTMLDocument*>(static_cast<nsINode*>
 9596:                                  (wrapper->Native()));
    1: 
    1:   // 'id' is not always a string, it can be a number since document.1
    1:   // should map to <input name="1">. Thus we can't use
    1:   // JSVAL_TO_STRING() here.
    1:   JSString *str = JS_ValueToString(cx, id);
    1:   NS_ENSURE_TRUE(str, NS_ERROR_UNEXPECTED);
    1: 
    1:   return doc->ResolveName(nsDependentJSString(str), nsnull, result);
    1: }
    1: 
    1: // static
18907: JSBool
    1: nsHTMLDocumentSH::DocumentOpen(JSContext *cx, JSObject *obj, uintN argc,
    1:                                jsval *argv, jsval *rval)
    1: {
    1:   if (argc > 2) {
 4427:     JSObject *global = ::JS_GetGlobalForObject(cx, obj);
    1: 
    1:     // DOM0 quirk that makes document.open() call window.open() if
    1:     // called with 3 or more arguments.
    1: 
    1:     return ::JS_CallFunctionName(cx, global, "open", argc, argv, rval);
    1:   }
    1: 
    1:   nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1: 
    1:   nsresult rv =
    1:     sXPConnect->GetWrappedNativeOfJSObject(cx, obj, getter_AddRefs(wrapper));
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMNSHTMLDocument> doc(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(doc, JS_FALSE);
    1: 
    1:   nsCAutoString contentType("text/html");
    1:   if (argc > 0) {
    1:     JSString* jsstr = JS_ValueToString(cx, argv[0]);
    1:     if (!jsstr) {
    1:       nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_OUT_OF_MEMORY);
    1:       return JS_FALSE;
    1:     }
    1:     nsAutoString type;
    1:     type.Assign(nsDependentJSString(jsstr));
    1:     ToLowerCase(type);
    1:     nsCAutoString actualType, dummy;
    1:     NS_ParseContentType(NS_ConvertUTF16toUTF8(type), actualType, dummy);
    1:     if (!actualType.EqualsLiteral("text/html") &&
    1:         !type.EqualsLiteral("replace")) {
    1:       contentType = "text/plain";
    1:     }
    1:   }
    1:   
    1:   PRBool replace = PR_FALSE;
    1:   if (argc > 1) {
    1:     JSString* jsstr = JS_ValueToString(cx, argv[1]);
    1:     if (!jsstr) {
    1:       nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_OUT_OF_MEMORY);
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     replace = NS_LITERAL_STRING("replace").
 3233:       Equals(reinterpret_cast<const PRUnichar*>
 3233:                              (::JS_GetStringChars(jsstr)));
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMDocument> retval;
    1:   rv = doc->Open(contentType, replace, getter_AddRefs(retval));
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:   rv = WrapNative(cx, obj, retval, NS_GET_IID(nsIDOMDocument), rval,
    1:                   getter_AddRefs(holder));
    1:   NS_ASSERTION(NS_SUCCEEDED(rv), "Failed to wrap native!");
    1: 
    1:   return NS_SUCCEEDED(rv);
    1: }
    1: 
    1: 
    1: static JSClass sHTMLDocumentAllClass = {
    1:   "HTML document.all class",
    1:   JSCLASS_HAS_PRIVATE | JSCLASS_PRIVATE_IS_NSISUPPORTS | JSCLASS_NEW_RESOLVE |
    1:   JSCLASS_HAS_RESERVED_SLOTS(1),
    1:   JS_PropertyStub, JS_PropertyStub, nsHTMLDocumentSH::DocumentAllGetProperty,
    1:   JS_PropertyStub, JS_EnumerateStub,
    1:   (JSResolveOp)nsHTMLDocumentSH::DocumentAllNewResolve, JS_ConvertStub,
    1:   nsHTMLDocumentSH::ReleaseDocument, nsnull, nsnull,
    1:   nsHTMLDocumentSH::CallToGetPropMapper
    1: };
    1: 
    1: 
    1: static JSClass sHTMLDocumentAllHelperClass = {
    1:   "HTML document.all helper class", JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE,
    1:   JS_PropertyStub, JS_PropertyStub,
    1:   nsHTMLDocumentSH::DocumentAllHelperGetProperty,
    1:   JS_PropertyStub, JS_EnumerateStub,
    1:   (JSResolveOp)nsHTMLDocumentSH::DocumentAllHelperNewResolve, JS_ConvertStub,
    1:   JS_FinalizeStub
    1: };
    1: 
    1: 
    1: static JSClass sHTMLDocumentAllTagsClass = {
    1:   "HTML document.all.tags class",
    1:   JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE | JSCLASS_PRIVATE_IS_NSISUPPORTS,
    1:   JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
    1:   JS_EnumerateStub, (JSResolveOp)nsHTMLDocumentSH::DocumentAllTagsNewResolve,
    1:   JS_ConvertStub, nsHTMLDocumentSH::ReleaseDocument, nsnull, nsnull,
    1:   nsHTMLDocumentSH::CallToGetPropMapper
    1: };
    1: 
    1: // static
    1: JSBool
    1: nsHTMLDocumentSH::GetDocumentAllNodeList(JSContext *cx, JSObject *obj,
    1:                                          nsIDOMDocument *domdoc,
    1:                                          nsIDOMNodeList **nodeList)
    1: {
    1:   // The document.all object is a mix of the node list returned by
    1:   // document.getElementsByTagName("*") and a map of elements in the
    1:   // document exposed by their id and/or name. To make access to the
    1:   // node list part (i.e. access to elements by index) not walk the
    1:   // document each time, we create a nsContentList and hold on to it
    1:   // in a reserved slot (0) on the document.all JSObject.
    1:   jsval collection;
    1:   nsresult rv = NS_OK;
    1: 
    1:   if (!JS_GetReservedSlot(cx, obj, 0, &collection)) {
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   if (!JSVAL_IS_PRIMITIVE(collection)) {
    1:     // We already have a node list in our reserved slot, use it.
    1: 
    1:     nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1:     rv |=
    1:       sXPConnect->GetWrappedNativeOfJSObject(cx, JSVAL_TO_OBJECT(collection),
    1:                                              getter_AddRefs(wrapper));
    1: 
    1:     if (wrapper) {
    1:       CallQueryInterface(wrapper->Native(), nodeList);
    1:     }
    1:   } else {
    1:     // No node list for this document.all yet, create one...
    1: 
    1:     rv |= domdoc->GetElementsByTagName(NS_LITERAL_STRING("*"), nodeList);
    1: 
    1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:     rv |= nsDOMClassInfo::WrapNative(cx, obj, *nodeList,
22071:                                      NS_GET_IID(nsISupports), &collection,
    1:                                      getter_AddRefs(holder));
    1: 
    1:     // ... and store it in our reserved slot.
    1:     if (!JS_SetReservedSlot(cx, obj, 0, collection)) {
    1:       return JS_FALSE;
    1:     }
    1:   }
    1: 
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   return *nodeList != nsnull;
    1: }
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::DocumentAllGetProperty(JSContext *cx, JSObject *obj,
    1:                                          jsval id, jsval *vp)
    1: {
    1:   // document.all.item and .namedItem get their value in the
    1:   // newResolve hook, so nothing to do for those properties here. And
    1:   // we need to return early to prevent <div id="item"> from shadowing
    1:   // document.all.item(), etc.
    1:   if (id == sItem_id || id == sNamedItem_id) {
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, obj);
    1:   nsCOMPtr<nsIDOMHTMLDocument> domdoc(do_QueryInterface(doc));
    1:   nsCOMPtr<nsISupports> result;
    1:   nsresult rv = NS_OK;
    1: 
    1:   if (JSVAL_IS_STRING(id)) {
    1:     if (id == sLength_id) {
    1:       // Map document.all.length to the length of the collection
    1:       // document.getElementsByTagName("*"), and make sure <div
    1:       // id="length"> doesn't shadow document.all.length.
    1: 
    1:       nsCOMPtr<nsIDOMNodeList> nodeList;
    1:       if (!GetDocumentAllNodeList(cx, obj, domdoc, getter_AddRefs(nodeList))) {
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       PRUint32 length;
    1:       rv = nodeList->GetLength(&length);
    1: 
    1:       if (NS_FAILED(rv)) {
    1:         nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       *vp = INT_TO_JSVAL(length);
18404: 
18404:       return JS_TRUE;
    1:     } else if (id != sTags_id) {
    1:       // For all other strings, look for an element by id or name.
    1: 
    1:       nsDependentJSString str(id);
    1: 
 3991:       rv = doc->GetDocumentAllResult(str, getter_AddRefs(result));
    1: 
    1:       if (NS_FAILED(rv)) {
    1:         nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:         return JS_FALSE;
    1:       }
    1:     }
18404:   } else if (JSVAL_IS_INT(id) && JSVAL_TO_INT(id) >= 0) {
    1:     // Map document.all[n] (where n is a number) to the n:th item in
    1:     // the document.all node list.
    1: 
    1:     nsCOMPtr<nsIDOMNodeList> nodeList;
    1:     if (!GetDocumentAllNodeList(cx, obj, domdoc, getter_AddRefs(nodeList))) {
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     nsCOMPtr<nsIDOMNode> node;
    1:     nodeList->Item(JSVAL_TO_INT(id), getter_AddRefs(node));
    1: 
    1:     result = node;
    1:   }
    1: 
    1:   if (result) {
22071:     rv = WrapNative(cx, obj, result, NS_GET_IID(nsISupports), vp);
    1:     if (NS_FAILED(rv)) {
    1:       nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:       return JS_FALSE;
    1:     }
 3991:   } else {
 3991:     *vp = JSVAL_VOID;
    1:   }
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::DocumentAllNewResolve(JSContext *cx, JSObject *obj, jsval id,
    1:                                         uintN flags, JSObject **objp)
    1: {
    1:   if (flags & JSRESOLVE_ASSIGNING) {
    1:     // Nothing to do here if we're assigning
    1: 
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   jsval v = JSVAL_VOID;
    1: 
    1:   if (id == sItem_id || id == sNamedItem_id) {
    1:     // Define the item() or namedItem() method.
    1: 
    1:     JSFunction *fnc =
    1:       ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(JSVAL_TO_STRING(id)),
    1:                           CallToGetPropMapper, 0, JSPROP_ENUMERATE);
    1: 
    1:     *objp = obj;
    1: 
    1:     return fnc != nsnull;
    1:   }
    1: 
    1:   if (id == sLength_id) {
    1:     // document.all.length. Any jsval other than undefined would do
    1:     // here, all we need is to get into the code below that defines
    1:     // this propery on obj, the rest happens in
    1:     // DocumentAllGetProperty().
    1: 
    1:     v = JSVAL_ONE;
    1:   } else if (id == sTags_id) {
    1:     nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, obj);
    1: 
    1:     JSObject *tags = ::JS_NewObject(cx, &sHTMLDocumentAllTagsClass, nsnull,
 4427:                                     ::JS_GetGlobalForObject(cx, obj));
    1:     if (!tags) {
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     if (!::JS_SetPrivate(cx, tags, doc)) {
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     // The "tags" JSObject now also owns doc.
    1:     NS_ADDREF(doc);
    1: 
    1:     v = OBJECT_TO_JSVAL(tags);
    1:   } else {
    1:     if (!DocumentAllGetProperty(cx, obj, id, &v)) {
    1:       return JS_FALSE;
    1:     }
    1:   }
    1: 
    1:   JSBool ok = JS_TRUE;
    1: 
    1:   if (v != JSVAL_VOID) {
    1:     if (JSVAL_IS_STRING(id)) {
    1:       JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:       ok = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                  ::JS_GetStringLength(str), v, nsnull, nsnull,
    1:                                  0);
    1:     } else {
    1:       ok = ::JS_DefineElement(cx, obj, JSVAL_TO_INT(id), v, nsnull, nsnull, 0);
    1:     }
    1: 
    1:     *objp = obj;
    1:   }
    1: 
    1:   return ok;
    1: }
    1: 
    1: // Finalize hook used by document related JS objects, but also by
    1: // sGlobalScopePolluterClass!
    1: 
18907: void
    1: nsHTMLDocumentSH::ReleaseDocument(JSContext *cx, JSObject *obj)
    1: {
    1:   nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, obj);
    1: 
    1:   NS_IF_RELEASE(doc);
    1: }
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::CallToGetPropMapper(JSContext *cx, JSObject *obj, uintN argc,
    1:                                       jsval *argv, jsval *rval)
    1: {
    1:   // Handle document.all("foo") style access to document.all.
    1: 
    1:   if (argc != 1) {
    1:     // XXX: Should throw NS_ERROR_XPC_NOT_ENOUGH_ARGS for argc < 1,
    1:     // and create a new NS_ERROR_XPC_TOO_MANY_ARGS for argc > 1? IE
    1:     // accepts nothing other than one arg.
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_INVALID_ARG);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   // Convert all types to string.
    1:   JSString *str = ::JS_ValueToString(cx, argv[0]);
    1:   if (!str) {
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   JSObject *self;
    1: 
    1:   if (::JS_TypeOfValue(cx, argv[-2]) == JSTYPE_FUNCTION) {
    1:     // If argv[-2] is a function, we're called through
    1:     // document.all.item() or something similar. In such a case, self
    1:     // is passed as obj.
    1: 
    1:     self = obj;
    1:   } else {
    1:     // In other cases (i.e. document.all("foo")), self is passed as
    1:     // argv[-2].
    1: 
    1:     self = JSVAL_TO_OBJECT(argv[-2]);
    1:   }
    1: 
    1:   return ::JS_GetUCProperty(cx, self, ::JS_GetStringChars(str),
    1:                             ::JS_GetStringLength(str), rval);
    1: }
    1: 
    1: 
    1: static inline JSObject *
    1: GetDocumentAllHelper(JSContext *cx, JSObject *obj)
    1: {
    1:   while (obj && JS_GET_CLASS(cx, obj) != &sHTMLDocumentAllHelperClass) {
    1:     obj = ::JS_GetPrototype(cx, obj);
    1:   }
    1: 
    1:   return obj;
    1: }
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::DocumentAllHelperGetProperty(JSContext *cx, JSObject *obj,
    1:                                                jsval id, jsval *vp)
    1: {
    1:   if (id != nsDOMClassInfo::sAll_id) {
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   JSObject *helper = GetDocumentAllHelper(cx, obj);
    1: 
    1:   if (!helper) {
    1:     NS_ERROR("Uh, how'd we get here?");
    1: 
    1:     // Let scripts continue, if we somehow did get here...
    1: 
    1:     return JS_TRUE;
    1:   }
    1: 
    1:   PRUint32 flags = JSVAL_TO_INT(PRIVATE_TO_JSVAL(::JS_GetPrivate(cx, helper)));
    1: 
    1:   if (flags & JSRESOLVE_DETECTING || !(flags & JSRESOLVE_QUALIFIED)) {
    1:     // document.all is either being detected, e.g. if (document.all),
    1:     // or it was not being resolved with a qualified name. Claim that
    1:     // document.all is undefined.
    1: 
    1:     *vp = JSVAL_VOID;
    1:   } else {
    1:     // document.all is not being detected, and it resolved with a
    1:     // qualified name. Expose the document.all collection.
    1: 
    1:     if (!JSVAL_IS_OBJECT(*vp)) {
    1:       // First time through, create the collection, and set the
    1:       // document as its private nsISupports data.
    1:       nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1:       nsresult rv =
    1:         sXPConnect->GetWrappedNativeOfJSObject(cx, obj,
    1:                                                getter_AddRefs(wrapper));
    1:       if (NS_FAILED(rv)) {
    1:         nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       JSObject *all = ::JS_NewObject(cx, &sHTMLDocumentAllClass, nsnull,
 4427:                                      ::JS_GetGlobalForObject(cx, obj));
    1:       if (!all) {
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       nsIHTMLDocument *doc;
    1:       CallQueryInterface(wrapper->Native(), &doc);
    1: 
    1:       // Let the JSObject take over ownership of doc.
    1:       if (!::JS_SetPrivate(cx, all, doc)) {
    1:         NS_RELEASE(doc);
    1: 
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       *vp = OBJECT_TO_JSVAL(all);
    1:     }
    1:   }
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::DocumentAllHelperNewResolve(JSContext *cx, JSObject *obj,
    1:                                               jsval id, uintN flags,
    1:                                               JSObject **objp)
    1: {
    1:   if (id == nsDOMClassInfo::sAll_id) {
    1:     // document.all is resolved for the first time. Define it.
    1:     JSObject *helper = GetDocumentAllHelper(cx, obj);
    1: 
    1:     if (helper) {
    1:       if (!::JS_DefineProperty(cx, helper, "all", JSVAL_VOID, nsnull, nsnull,
    1:                                JSPROP_ENUMERATE)) {
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       *objp = helper;
    1:     }
    1:   }
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
    1: 
18907: JSBool
    1: nsHTMLDocumentSH::DocumentAllTagsNewResolve(JSContext *cx, JSObject *obj,
    1:                                             jsval id, uintN flags,
    1:                                             JSObject **objp)
    1: {
    1:   if (JSVAL_IS_STRING(id)) {
    1:     nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(cx, obj);
    1: 
    1:     JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:     JSObject *proto = ::JS_GetPrototype(cx, obj);
    1:     if (NS_UNLIKELY(!proto)) {
    1:       return JS_TRUE;
    1:     }
    1: 
    1:     JSBool found;
    1:     if (!::JS_HasUCProperty(cx, proto,
    1:                             ::JS_GetStringChars(str),
    1:                             ::JS_GetStringLength(str), &found)) {
    1:       return JS_FALSE;
    1:     }
    1: 
    1:     if (found) {
    1:       return JS_TRUE;
    1:     }
    1: 
    1:     nsCOMPtr<nsIDOMDocument> domdoc(do_QueryInterface(doc));
    1: 
    1:     nsCOMPtr<nsIDOMNodeList> tags;
    1:     domdoc->GetElementsByTagName(nsDependentJSString(str),
    1:                                  getter_AddRefs(tags));
    1: 
    1:     if (tags) {
    1:       jsval v;
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
22071:       nsresult rv = nsDOMClassInfo::WrapNative(cx, obj, tags,
22071:                                                NS_GET_IID(nsISupports), &v,
    1:                                                getter_AddRefs(holder));
    1:       if (NS_FAILED(rv)) {
    1:         nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       if (!::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                  ::JS_GetStringLength(str), v, nsnull, nsnull,
    1:                                  0)) {
    1:         return JS_FALSE;
    1:       }
    1: 
    1:       *objp = obj;
    1:     }
    1:   }
    1: 
    1:   return JS_TRUE;
    1: }
    1: 
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLDocumentSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                              JSObject *obj, jsval id, PRUint32 flags,
    1:                              JSObject **objp, PRBool *_retval)
    1: {
    1:   // nsDocumentSH::NewResolve() does a security check that we'd kinda
    1:   // want to do here too before doing anything else. But given that we
    1:   // only define dynamic properties here before the call to
    1:   // nsDocumentSH::NewResolve() we're ok, since once those properties
    1:   // are accessed, we'll do the necessary security check.
    1: 
    1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
    1:     // For native wrappers, do not resolve random names on document
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
    1:     if (!ObjectIsNativeWrapper(cx, obj)) {
    1:       nsCOMPtr<nsISupports> result;
    1: 
    1:       nsresult rv = ResolveImpl(cx, wrapper, id, getter_AddRefs(result));
    1:       NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:       if (result) {
    1:         JSString *str = JS_ValueToString(cx, id);
    1: 
    1:         JSBool ok = *_retval =
    1:           ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                 ::JS_GetStringLength(str), JSVAL_VOID, nsnull,
    1:                                 nsnull, 0);
    1:         *objp = obj;
    1: 
    1:         return ok ? NS_OK : NS_ERROR_FAILURE;
    1:       }
    1:     }
    1: 
    1:     if (id == sOpen_id) {
    1:       JSString *str = JSVAL_TO_STRING(id);
    1:       JSFunction *fnc =
    1:         ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str),
    1:                             DocumentOpen, 0, JSPROP_ENUMERATE);
    1: 
    1:       *objp = obj;
    1: 
    1:       return fnc ? NS_OK : NS_ERROR_UNEXPECTED;
    1:     }
    1: 
    1:     if (id == sAll_id && !sDisableDocumentAllSupport &&
    1:         !ObjectIsNativeWrapper(cx, obj)) {
 9596:       nsIDocument *doc = static_cast<nsIDocument*>(wrapper->Native());
    1: 
    1:       if (doc->GetCompatibilityMode() == eCompatibility_NavQuirks) {
    1:         JSObject *helper =
    1:           GetDocumentAllHelper(cx, ::JS_GetPrototype(cx, obj));
    1: 
    1:         JSObject *proto = ::JS_GetPrototype(cx, helper ? helper : obj);
    1: 
    1:         // Check if the property all is defined on obj's (or helper's
    1:         // if obj doesn't exist) prototype, if it is, don't expose our
    1:         // document.all helper.
    1: 
    1:         JSBool hasAll = JS_FALSE;
    1:         if (proto && !JS_HasProperty(cx, proto, "all", &hasAll)) {
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1: 
    1:         if (hasAll && helper) {
    1:           // Our helper's prototype now has an "all" property, remove
    1:           // the helper out of the prototype chain to prevent
    1:           // shadowing of the now defined "all" property.
    1:           JSObject *tmp = obj, *tmpProto;
    1: 
    1:           while ((tmpProto = ::JS_GetPrototype(cx, tmp)) != helper) {
    1:             tmp = tmpProto;
    1:           }
    1: 
    1:           ::JS_SetPrototype(cx, tmp, proto);
    1:         }
    1: 
    1:         // If we don't already have a helper, and we're resolving
    1:         // document.all qualified, and we're *not* detecting
    1:         // document.all, e.g. if (document.all), and "all" isn't
    1:         // already defined on our prototype, create a helper.
    1:         if (!helper && flags & JSRESOLVE_QUALIFIED &&
    1:             !(flags & JSRESOLVE_DETECTING) && !hasAll) {
    1:           // Print a warning so developers can stop using document.all
    1:           PrintWarningOnConsole(cx, "DocumentAllUsed");
    1: 
    1:           helper = ::JS_NewObject(cx, &sHTMLDocumentAllHelperClass,
    1:                                   ::JS_GetPrototype(cx, obj),
 4427:                                   ::JS_GetGlobalForObject(cx, obj));
    1: 
    1:           if (!helper) {
    1:             return NS_ERROR_OUT_OF_MEMORY;
    1:           }
    1: 
    1:           // Insert the helper into our prototype chain. helper's prototype
    1:           // is already obj's current prototype.
    1:           if (!::JS_SetPrototype(cx, obj, helper)) {
    1:             nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_UNEXPECTED);
    1: 
    1:             return NS_ERROR_UNEXPECTED;
    1:           }
    1:         }
    1: 
    1:         // If we have (or just created) a helper, pass the resolve flags
    1:         // to the helper as its private data.
    1:         if (helper &&
    1:             !::JS_SetPrivate(cx, helper,
    1:                              JSVAL_TO_PRIVATE(INT_TO_JSVAL(flags)))) {
    1:           nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_UNEXPECTED);
    1: 
    1:           return NS_ERROR_UNEXPECTED;
    1:         }
    1:       }
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   return nsDocumentSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLDocumentSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                               JSContext *cx, JSObject *obj, jsval id,
    1:                               jsval *vp, PRBool *_retval)
    1: {
    1:   // For native wrappers, do not get random names on document
 6394:   if (!ObjectIsNativeWrapper(cx, obj)) {
    1:     nsCOMPtr<nsISupports> result;
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
 6394:     nsresult rv = ResolveImpl(cx, wrapper, id, getter_AddRefs(result));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     if (result) {
22071:       rv = WrapNative(cx, obj, result, NS_GET_IID(nsISupports), vp);
    1:       if (NS_SUCCEEDED(rv)) {
    1:         rv = NS_SUCCESS_I_DID_SOMETHING;
    1:       }
    1:       return rv;
    1:     }
 6394:   }
 6394: 
 6394:   return nsDocumentSH::GetProperty(wrapper, cx, obj, id, vp, _retval);
 6394: }
    1: 
    1: // HTMLElement helper
    1: 
    1: // static
18907: JSBool
    1: nsHTMLElementSH::ScrollIntoView(JSContext *cx, JSObject *obj, uintN argc,
    1:                                 jsval *argv, jsval *rval)
    1: {
    1:   nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1: 
    1:   nsresult rv =
    1:     sXPConnect->GetWrappedNativeOfJSObject(cx, obj, getter_AddRefs(wrapper));
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1: 
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMNSHTMLElement> element(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(element, JS_FALSE);
    1: 
    1:   JSBool top = JS_TRUE;
    1: 
    1:   if (argc > 0) {
    1:     ::JS_ValueToBoolean(cx, argv[0], &top);
    1:   }
    1: 
    1:   rv = element->ScrollIntoView(top);
    1: 
    1:   *rval = JSVAL_VOID;
    1: 
    1:   return NS_SUCCEEDED(rv);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                             JSObject *obj, jsval id, PRUint32 flags,
    1:                             JSObject **objp, PRBool *_retval)
    1: {
    1:   if (id == sScrollIntoView_id && !(JSRESOLVE_ASSIGNING & flags)) {
    1:     JSString *str = JSVAL_TO_STRING(id);
    1:     JSAutoRequest ar(cx);
    1:     JSFunction *cfnc =
    1:       ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str), ScrollIntoView,
    1:                           0, 0);
    1: 
    1:     *objp = obj;
    1: 
    1:     return cfnc ? NS_OK : NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   return nsElementSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
    1: }
    1: 
    1: // HTMLFormElement helper
    1: 
    1: // static
    1: nsresult
    1: nsHTMLFormElementSH::FindNamedItem(nsIForm *aForm, JSString *str,
    1:                                    nsISupports **aResult)
    1: {
    1:   nsDependentJSString name(str);
    1: 
20237:   *aResult = aForm->ResolveName(name).get();
    1: 
    1:   if (!*aResult) {
    1:     nsCOMPtr<nsIContent> content(do_QueryInterface(aForm));
    1:     nsCOMPtr<nsIDOMHTMLFormElement> form_element(do_QueryInterface(aForm));
    1: 
    1:     nsCOMPtr<nsIHTMLDocument> html_doc =
    1:       do_QueryInterface(content->GetDocument());
    1: 
    1:     if (html_doc && form_element) {
    1:       html_doc->ResolveName(name, form_element, aResult);
    1:     }
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLFormElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
    1:                                 JSContext *cx, JSObject *obj, jsval id,
    1:                                 PRUint32 flags, JSObject **objp,
    1:                                 PRBool *_retval)
    1: {
    1:   // For native wrappers, do not resolve random names on form
    1:   if ((!(JSRESOLVE_ASSIGNING & flags)) && JSVAL_IS_STRING(id) &&
    1:       !ObjectIsNativeWrapper(cx, obj)) {
    1:     nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper));
    1:     nsCOMPtr<nsISupports> result;
    1: 
    1:     JSString *str = JSVAL_TO_STRING(id);
    1:     FindNamedItem(form, str, getter_AddRefs(result));
    1: 
    1:     if (result) {
    1:       JSAutoRequest ar(cx);
    1:       *_retval = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                        ::JS_GetStringLength(str),
    1:                                        JSVAL_VOID, nsnull, nsnull, 0);
    1: 
    1:       *objp = obj;
    1: 
    1:       return *_retval ? NS_OK : NS_ERROR_FAILURE;
    1:     }
    1:   }
    1: 
    1:   return nsHTMLElementSH::NewResolve(wrapper, cx, obj, id, flags, objp,
    1:                                      _retval);
    1: }
    1: 
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLFormElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                  JSContext *cx, JSObject *obj, jsval id,
    1:                                  jsval *vp, PRBool *_retval)
    1: {
    1:   nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper));
    1: 
    1:   if (JSVAL_IS_STRING(id)) {
    1:     // For native wrappers, do not get random names on form
    1:     if (!ObjectIsNativeWrapper(cx, obj)) {
    1:       nsCOMPtr<nsISupports> result;
    1: 
    1:       JSString *str = JSVAL_TO_STRING(id);
    1:       FindNamedItem(form, str, getter_AddRefs(result));
    1: 
    1:       if (result) {
    1:         // Wrap result, result can be either an element or a list of
    1:         // elements
22071:         nsresult rv = WrapNative(cx, obj, result, NS_GET_IID(nsISupports), vp);
    1:         return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:       }
    1:     }
 6394:   } else {
    1:     PRInt32 n = GetArrayIndexFromId(cx, id);
    1: 
    1:     if (n >= 0) {
    1:       nsCOMPtr<nsIFormControl> control;
    1:       form->GetElementAt(n, getter_AddRefs(control));
    1: 
    1:       if (control) {
22071:         nsresult rv = WrapNative(cx, obj, control, NS_GET_IID(nsISupports), vp);
    1:         return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:       }
    1:     }
 6394:   }
 6394: 
 6394:   return nsHTMLElementSH::GetProperty(wrapper, cx, obj, id, vp, _retval);;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLFormElementSH::NewEnumerate(nsIXPConnectWrappedNative *wrapper,
    1:                                   JSContext *cx, JSObject *obj,
    1:                                   PRUint32 enum_op, jsval *statep,
    1:                                   jsid *idp, PRBool *_retval)
    1: {
    1:   switch (enum_op) {
    1:   case JSENUMERATE_INIT:
    1:     {
    1:       nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper));
    1: 
    1:       if (!form) {
    1:         *statep = JSVAL_NULL;
    1:         return NS_ERROR_UNEXPECTED;
    1:       }
    1: 
    1:       *statep = INT_TO_JSVAL(0);
    1: 
    1:       if (idp) {
20237:         PRUint32 count = form->GetElementCount();
    1: 
    1:         *idp = INT_TO_JSVAL(count);
    1:       }
    1: 
    1:       break;
    1:     }
    1:   case JSENUMERATE_NEXT:
    1:     {
    1:       nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper));
    1:       NS_ENSURE_TRUE(form, NS_ERROR_FAILURE);
    1: 
    1:       PRInt32 index = (PRInt32)JSVAL_TO_INT(*statep);
    1: 
20237:       PRUint32 count = form->GetElementCount();
    1: 
    1:       if ((PRUint32)index < count) {
    1:         nsCOMPtr<nsIFormControl> controlNode;
    1:         form->GetElementAt(index, getter_AddRefs(controlNode));
    1:         NS_ENSURE_TRUE(controlNode, NS_ERROR_FAILURE);
    1: 
    1:         nsCOMPtr<nsIDOMElement> domElement = do_QueryInterface(controlNode);
    1:         NS_ENSURE_TRUE(domElement, NS_ERROR_FAILURE);
    1: 
    1:         nsAutoString attr;
    1:         domElement->GetAttribute(NS_LITERAL_STRING("name"), attr);
    1:         if (attr.IsEmpty()) {
    1:           // If name is not there, use index instead
    1:           attr.AppendInt(index);
    1:         }
    1: 
    1:         JSAutoRequest ar(cx);
    1: 
    1:         JSString *jsname =
 3233:           JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>
 3233:                                                   (attr.get()),
    1:                               attr.Length());
    1:         NS_ENSURE_TRUE(jsname, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:         JS_ValueToId(cx, STRING_TO_JSVAL(jsname), idp);
    1: 
    1:         *statep = INT_TO_JSVAL(++index);
    1:       } else {
    1:         *statep = JSVAL_NULL;
    1:       }
    1: 
    1:       break;
    1:     }
    1:   case JSENUMERATE_DESTROY:
    1:     *statep = JSVAL_NULL;
    1: 
    1:     break;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: // HTMLSelectElement helper
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLSelectElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                    JSContext *cx, JSObject *obj, jsval id,
    1:                                    jsval *vp, PRBool *_retval)
    1: {
    1:   PRInt32 n = GetArrayIndexFromId(cx, id);
    1: 
    1:   nsresult rv = NS_OK;
    1:   if (n >= 0) {
    1:     nsCOMPtr<nsIDOMHTMLSelectElement> s(do_QueryWrappedNative(wrapper));
    1: 
    1:     nsCOMPtr<nsIDOMHTMLOptionsCollection> options;
    1:     s->GetOptions(getter_AddRefs(options));
    1: 
    1:     if (options) {
    1:       nsCOMPtr<nsIDOMNode> node;
    1: 
    1:       options->Item(n, getter_AddRefs(node));
    1: 
22071:       rv = WrapNative(cx, obj, node, NS_GET_IID(nsIDOMNode), vp);
    1:       if (NS_SUCCEEDED(rv)) {
    1:         rv = NS_SUCCESS_I_DID_SOMETHING;
    1:       }
    1:       return rv;
    1:     }
 6394:   }
 6394: 
 6394:   return nsHTMLElementSH::GetProperty(wrapper, cx, obj, id, vp, _retval);;
 6394: }
    1: 
    1: // static
    1: nsresult
    1: nsHTMLSelectElementSH::SetOption(JSContext *cx, jsval *vp, PRUint32 aIndex,
    1:                                  nsIDOMNSHTMLOptionCollection *aOptCollection)
    1: {
    1:   JSAutoRequest ar(cx);
    1: 
    1:   // vp must refer to an object
    1:   if (!JSVAL_IS_OBJECT(*vp) && !::JS_ConvertValue(cx, *vp, JSTYPE_OBJECT, vp)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMHTMLOptionElement> new_option;
    1: 
    1:   if (!JSVAL_IS_NULL(*vp)) {
    1:     nsCOMPtr<nsIXPConnectWrappedNative> new_wrapper;
    1:     nsresult rv;
    1: 
    1:     rv = sXPConnect->GetWrappedNativeOfJSObject(cx, JSVAL_TO_OBJECT(*vp),
    1:                                                 getter_AddRefs(new_wrapper));
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:     new_option = do_QueryWrappedNative(new_wrapper);
    1: 
    1:     if (!new_option) {
    1:       // Someone is trying to set an option to a non-option object.
    1: 
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   return aOptCollection->SetOption(aIndex, new_option);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLSelectElementSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                    JSContext *cx, JSObject *obj, jsval id,
    1:                                    jsval *vp, PRBool *_retval)
    1: {
    1:   PRInt32 n = GetArrayIndexFromId(cx, id);
    1: 
    1:   if (n >= 0) {
    1:     nsCOMPtr<nsIDOMHTMLSelectElement> select(do_QueryWrappedNative(wrapper));
    1:     NS_ENSURE_TRUE(select, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsCOMPtr<nsIDOMHTMLOptionsCollection> options;
    1:     select->GetOptions(getter_AddRefs(options));
    1: 
    1:     nsCOMPtr<nsIDOMNSHTMLOptionCollection> oc(do_QueryInterface(options));
    1:     NS_ENSURE_TRUE(oc, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsresult rv = SetOption(cx, vp, n, oc);
    1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   return nsElementSH::SetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: 
    1: // HTMLObject/EmbedElement helper
    1: 
    1: // This resolve hook makes embed.nsIFoo work as if
    1: // QueryInterface(Components.interfaces.nsIFoo) was called on the
    1: // plugin instance, the result of calling QI, assuming it's
    1: // successful, will be defined on the embed element as a nsIFoo
    1: // property.
    1: 
 5405: // static
    1: nsresult
13098: nsHTMLPluginObjElementSH::GetPluginInstanceIfSafe(nsIXPConnectWrappedNative *wrapper,
    1:                                                   nsIPluginInstance **_result)
    1: {
    1:   *_result = nsnull;
    1: 
    1:   nsCOMPtr<nsIContent> content(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(content, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsCOMPtr<nsIObjectLoadingContent> objlc(do_QueryInterface(content));
    1:   NS_ASSERTION(objlc, "Object nodes must implement nsIObjectLoadingContent");
13098: 
13098:   // If it's not safe to run script we'll only return the instance if it
13098:   // exists.
13098:   if (!nsContentUtils::IsSafeToRunScript()) {
13098:     return objlc->GetPluginInstance(_result);
13098:   }
13098: 
13098:   // Make sure that there is a plugin
    1:   return objlc->EnsureInstantiation(_result);
    1: }
    1: 
    1: // Check if proto is already in obj's prototype chain.
    1: 
    1: static PRBool
    1: IsObjInProtoChain(JSContext *cx, JSObject *obj, JSObject *proto)
    1: {
    1:   JSObject *o = obj;
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   while (o) {
    1:     JSObject *p = ::JS_GetPrototype(cx, o);
    1: 
    1:     if (p == proto) {
    1:       return PR_TRUE;
    1:     }
    1: 
    1:     o = p;
    1:   }
    1: 
    1:   return PR_FALSE;
    1: }
    1: 
13098: class nsPluginProtoChainInstallRunner : public nsIRunnable
13098: {
13098: public:
13098:   NS_DECL_ISUPPORTS
13098: 
13098:   nsPluginProtoChainInstallRunner(nsIXPConnectWrappedNative* wrapper,
13098:                                   nsIScriptContext* scriptContext)
13098:     : mWrapper(wrapper),
13098:       mContext(scriptContext)
13098:   {
13098:   }
13098: 
13098:   NS_IMETHOD Run()
13098:   {
14986:     JSContext* cx = nsnull;
14986:     if (mContext) {
14986:       cx = (JSContext*)mContext->GetNativeContext();
14986:     } else {
14986:       nsCOMPtr<nsIThreadJSContextStack> stack =
14986:         do_GetService("@mozilla.org/js/xpc/ContextStack;1");
14986:       NS_ENSURE_TRUE(stack, NS_OK);
14986: 
14986:       stack->GetSafeJSContext(&cx);
14986:       NS_ENSURE_TRUE(cx, NS_OK);
14986:     }
14986: 
13098:     JSObject* obj = nsnull;
13098:     mWrapper->GetJSObject(&obj);
13098:     NS_ASSERTION(obj, "Should never be null");
14986:     nsHTMLPluginObjElementSH::SetupProtoChain(mWrapper, cx, obj);
13098:     return NS_OK;
13098:   }
13098: 
13098: private:
13098:   nsCOMPtr<nsIXPConnectWrappedNative> mWrapper;
13098:   nsCOMPtr<nsIScriptContext> mContext;
13098: };
13098: 
13098: NS_IMPL_ISUPPORTS1(nsPluginProtoChainInstallRunner, nsIRunnable)
13098: 
13098: // static
13098: nsresult
13098: nsHTMLPluginObjElementSH::SetupProtoChain(nsIXPConnectWrappedNative *wrapper,
13098:                                           JSContext *cx,
13098:                                           JSObject *obj)
13098: {
13098:   NS_ASSERTION(nsContentUtils::IsSafeToRunScript(),
13098:                "Shouldn't have gotten in here");
13098: 
13098:   nsCxPusher cxPusher;
13098:   if (!cxPusher.Push(cx)) {
13098:     return NS_OK;
13098:   }
    1: 
    1:   nsCOMPtr<nsIPluginInstance> pi;
13098:   nsresult rv = GetPluginInstanceIfSafe(wrapper, getter_AddRefs(pi));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (!pi) {
    1:     // No plugin around for this object.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   JSObject *pi_obj = nsnull; // XPConnect-wrapped peer object, when we get it.
    1:   JSObject *pi_proto = nsnull; // 'pi.__proto__'
    1: 
    1:   rv = GetPluginJSObject(cx, obj, pi, &pi_obj, &pi_proto);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (!pi_obj) {
    1:     // Didn't get a plugin instance JSObject, nothing we can do then.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (IsObjInProtoChain(cx, obj, pi_obj)) {
    1:     // We must have re-entered ::PostCreate() from nsObjectFrame()
    1:     // (through the EnsureInstantiation() call in
13098:     // GetPluginInstanceIfSafe()), this means that we've already done what
    1:     // we're about to do in this function so we can just return here.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1: 
    1:   // If we got an xpconnect-wrapped plugin object, set obj's
    1:   // prototype's prototype to the scriptable plugin.
    1: 
    1:   JSObject *my_proto = nsnull;
    1: 
    1:   // Get 'this.__proto__'
    1:   rv = wrapper->GetJSObjectPrototype(&my_proto);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   // Set 'this.__proto__' to pi
    1:   if (!::JS_SetPrototype(cx, obj, pi_obj)) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   if (pi_proto && JS_GET_CLASS(cx, pi_proto) != sObjectClass) {
    1:     // The plugin wrapper has a proto that's not Object.prototype, set
    1:     // 'pi.__proto__.__proto__' to the original 'this.__proto__'
14601:     if (pi_proto != my_proto && !::JS_SetPrototype(cx, pi_proto, my_proto)) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   } else {
    1:     // 'pi' didn't have a prototype, or pi's proto was 'Object.prototype'
    1:     // (i.e. pi is an LiveConnect wrapped Java applet), set
    1:     // 'pi.__proto__' to the original 'this.__proto__'
    1:     if (!::JS_SetPrototype(cx, pi_obj, my_proto)) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   // Before this proto dance the objects involved looked like this:
    1:   //
    1:   // this.__proto__.__proto__
    1:   //   ^      ^         ^
    1:   //   |      |         |__ Object.prototype
    1:   //   |      |
    1:   //   |      |__ xpc embed wrapper proto (shared)
    1:   //   |
    1:   //   |__ xpc wrapped native embed node
    1:   //
    1:   // pi.__proto__.__proto__
    1:   // ^      ^         ^
    1:   // |      |         |__ Object.prototype
    1:   // |      |
    1:   // |      |__ plugin proto (not shared in the xpc wrapper case)
    1:   // |
    1:   // |__ xpc wrapped native pi (plugin instance)
    1:   //
    1:   // Now, after the above prototype setup the prototype chain should
    1:   // look like this if the plugin had a proto (other than
    1:   // Object.prototype):
    1:   //
    1:   // this.__proto__.__proto__.__proto__.__proto__
    1:   //   ^      ^         ^         ^         ^
    1:   //   |      |         |         |         |__ Object.prototype
    1:   //   |      |         |         |
    1:   //   |      |         |         |__ xpc embed wrapper proto (shared)
    1:   //   |      |         |
    1:   //   |      |         |__ plugin proto (not shared in the xpc wrapper case)
    1:   //   |      |
    1:   //   |      |__ xpc wrapped native pi (plugin instance)
    1:   //   |
    1:   //   |__ xpc wrapped native embed node
    1:   //
    1:   // If the plugin's proto was Object.prototype, the prototype chain
    1:   // should look like this:
    1:   //
    1:   // this.__proto__.__proto__.__proto__
    1:   //   ^      ^         ^         ^
    1:   //   |      |         |         |__ Object.prototype
    1:   //   |      |         |
    1:   //   |      |         |__ xpc embed wrapper proto (shared)
    1:   //   |      |
    1:   //   |      |__ pi (plugin instance) wrapper, most likely wrapped
    1:   //   |          by LiveConnect
    1:   //   |
    1:   //   |__ xpc wrapped native embed node
    1:   //
    1: 
    1:   return NS_OK;
    1: }
    1: 
13098: NS_IMETHODIMP
13098: nsHTMLPluginObjElementSH::PostCreate(nsIXPConnectWrappedNative *wrapper,
13098:                                      JSContext *cx, JSObject *obj)
13098: {
13098:   nsresult rv = nsElementSH::PostCreate(wrapper, cx, obj);
13098:   NS_ENSURE_SUCCESS(rv, rv);
13098: 
13098:   if (nsContentUtils::IsSafeToRunScript()) {
14986:     rv = SetupProtoChain(wrapper, cx, obj);
14986: 
14986:     // If SetupProtoChain failed then we're in real trouble. We're about to fail
14986:     // PostCreate but it's more than likely that we handed our (now invalid)
14986:     // wrapper to someone already. Bug 429442 is an example of the kind of crash
14986:     // that can result from such a situation. We'll return NS_OK for the time
14986:     // being and hope for the best.
14986:     NS_WARN_IF_FALSE(NS_SUCCEEDED(rv), "SetupProtoChain failed!");
14986:     return NS_OK;
14986:   }
14986: 
14986:   // This may be null if the JS context is not a DOM context. That's ok, we'll
14986:   // use the safe context from XPConnect in the runnable.
14986:   nsCOMPtr<nsIScriptContext> scriptContext = GetScriptContextFromJSContext(cx);
14986: 
14986:   nsRefPtr<nsPluginProtoChainInstallRunner> runner =
14986:     new nsPluginProtoChainInstallRunner(wrapper, scriptContext);
14986:   nsContentUtils::AddScriptRunner(runner);
13098: 
13098:   return NS_OK;
13098: }
    1: 
    1: NS_IMETHODIMP
 5405: nsHTMLPluginObjElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                       JSContext *cx, JSObject *obj, jsval id,
    1:                                       jsval *vp, PRBool *_retval)
    1: {
    1:   JSAutoRequest ar(cx);
    1: 
    1:   JSObject *pi_obj = ::JS_GetPrototype(cx, obj);
    1:   if (NS_UNLIKELY(!pi_obj)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   const jschar *id_chars = nsnull;
    1:   size_t id_length = 0;
    1: 
    1:   JSBool found = PR_FALSE;
    1: 
    1:   if (!ObjectIsNativeWrapper(cx, obj)) {
    1:     if (JSVAL_IS_STRING(id)) {
    1:       JSString *id_str = JSVAL_TO_STRING(id);
    1: 
    1:       id_chars = ::JS_GetStringChars(id_str);
    1:       id_length = ::JS_GetStringLength(id_str);
    1: 
    1:       *_retval = ::JS_HasUCProperty(cx, pi_obj, id_chars, id_length, &found);
    1:     } else {
    1:       *_retval = JS_HasElement(cx, pi_obj, JSVAL_TO_INT(id), &found);
    1:     }
    1: 
    1:     if (!*_retval) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   if (found) {
    1:     if (JSVAL_IS_STRING(id)) {
    1:       *_retval = ::JS_GetUCProperty(cx, pi_obj, id_chars, id_length, vp);
    1:     } else {
    1:       *_retval = ::JS_GetElement(cx, pi_obj, JSVAL_TO_INT(id), vp);
    1:     }
    1: 
    1:     return *_retval ? NS_SUCCESS_I_DID_SOMETHING : NS_ERROR_FAILURE;
    1:   }
    1: 
 6394:   return nsHTMLElementSH::GetProperty(wrapper, cx, obj, id, vp, _retval);;
    1: }
    1: 
    1: NS_IMETHODIMP
 5405: nsHTMLPluginObjElementSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                       JSContext *cx, JSObject *obj, jsval id,
    1:                                       jsval *vp, PRBool *_retval)
    1: {
    1:   JSAutoRequest ar(cx);
    1: 
    1:   JSObject *pi_obj = ::JS_GetPrototype(cx, obj);
    1:   if (NS_UNLIKELY(!pi_obj)) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   const jschar *id_chars = nsnull;
    1:   size_t id_length = 0;
    1: 
    1:   JSBool found = PR_FALSE;
    1: 
    1:   if (!ObjectIsNativeWrapper(cx, obj)) {
    1:     if (JSVAL_IS_STRING(id)) {
    1:       JSString *id_str = JSVAL_TO_STRING(id);
    1: 
    1:       id_chars = ::JS_GetStringChars(id_str);
    1:       id_length = ::JS_GetStringLength(id_str);
    1: 
    1:       *_retval = ::JS_HasUCProperty(cx, pi_obj, id_chars, id_length, &found);
    1:     } else {
    1:       *_retval = JS_HasElement(cx, pi_obj, JSVAL_TO_INT(id), &found);
    1:     }
    1: 
    1:     if (!*_retval) {
    1:       return NS_ERROR_UNEXPECTED;
    1:     }
    1:   }
    1: 
    1:   if (found) {
    1:     if (JSVAL_IS_STRING(id)) {
    1:       *_retval = ::JS_SetUCProperty(cx, pi_obj, id_chars, id_length, vp);
    1:     } else {
    1:       *_retval = ::JS_SetElement(cx, pi_obj, JSVAL_TO_INT(id), vp);
    1:     }
    1: 
    1:     return *_retval ? NS_SUCCESS_I_DID_SOMETHING : NS_ERROR_FAILURE;
    1:   }
    1: 
 5405:   return nsHTMLElementSH::SetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
 5405: nsHTMLPluginObjElementSH::Call(nsIXPConnectWrappedNative *wrapper,
 5405:                                JSContext *cx, JSObject *obj, PRUint32 argc,
 5405:                                jsval *argv, jsval *vp, PRBool *_retval)
    1: {
    1:   nsCOMPtr<nsIPluginInstance> pi;
13098:   nsresult rv = GetPluginInstanceIfSafe(wrapper, getter_AddRefs(pi));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (!pi) {
    1:     // No plugin around for this object.
    1: 
    1:     return NS_ERROR_NOT_AVAILABLE;
    1:   }
    1: 
    1:   JSObject *pi_obj = nsnull;
    1:   JSObject *pi_proto = nsnull;
    1: 
    1:   rv = GetPluginJSObject(cx, obj, pi, &pi_obj, &pi_proto);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (!pi) {
    1:     return NS_ERROR_NOT_AVAILABLE;
    1:   }
    1: 
    1:   // XPConnect passes us the XPConnect wrapper JSObject as obj, and
    1:   // not the 'this' parameter that the JS engine passes in. Pass in
    1:   // the real this parameter from JS (argv[-1]) here.
    1:   JSAutoRequest ar(cx);
    1:   *_retval = ::JS_CallFunctionValue(cx, JSVAL_TO_OBJECT(argv[-1]),
    1:                                     OBJECT_TO_JSVAL(pi_obj), argc, argv, vp);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: // HTMLAppletElement helper
    1: 
 5405: // static
    1: nsresult
 5405: nsHTMLPluginObjElementSH::GetJavaPluginJSObject(JSContext *cx, JSObject *obj,
    1:                                                 nsIPluginInstance *plugin_inst,
    1:                                                 JSObject **plugin_obj,
    1:                                                 JSObject **plugin_proto)
    1: {
    1: #ifdef OJI
    1:   *plugin_obj = nsnull;
    1:   *plugin_proto = nsnull;
    1: 
    1:   nsCOMPtr<nsIJVMManager> jvm(do_GetService(nsIJVMManager::GetCID()));
    1: 
    1:   if (!jvm) {
    1: #endif
    1:     return NS_OK;
    1: #ifdef OJI
    1:   }
    1: 
 5405:   nsCOMPtr<nsIJVMPluginInstance> javaPluginInstance =
 5405:     do_QueryInterface(plugin_inst);
    1: 
    1:   if (!javaPluginInstance) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   jobject appletObject = nsnull;
    1:   nsresult rv = javaPluginInstance->GetJavaObject(&appletObject);
    1: 
    1:   if (NS_FAILED(rv) || !appletObject) {
    1:     return rv;
    1:   }
    1: 
    1:   nsCOMPtr<nsILiveConnectManager> manager =
    1:     do_GetService(nsIJVMManager::GetCID());
    1: 
    1:   if (!manager) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   return manager->WrapJavaObject(cx, appletObject, plugin_obj);
    1: #endif /* OJI */
    1: }
    1: 
    1: 
    1: // HTMLEmbed/ObjectElement helper
    1: 
    1: nsresult
    1: nsHTMLPluginObjElementSH::GetPluginJSObject(JSContext *cx, JSObject *obj,
    1:                                             nsIPluginInstance *plugin_inst,
    1:                                             JSObject **plugin_obj,
    1:                                             JSObject **plugin_proto)
    1: {
    1:   *plugin_obj = nsnull;
    1:   *plugin_proto = nsnull;
    1: 
    1:   nsCOMPtr<nsIPluginInstanceInternal> plugin_internal =
    1:     do_QueryInterface(plugin_inst);
    1: 
 6082:   JSAutoRequest ar(cx);
 6082: 
    1:   if (plugin_internal) {
    1:     *plugin_obj = plugin_internal->GetJSObject(cx);
    1: 
    1:     if (*plugin_obj) {
    1:       *plugin_proto = ::JS_GetPrototype(cx, *plugin_obj);
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // Check if the plugin object has the nsIScriptablePlugin interface,
    1:   // describing how to expose it to JavaScript. Given this interface,
    1:   // use it to get the scriptable peer object (possibly the plugin
    1:   // object itself) and the scriptable interface to expose it with.
    1: 
    1:   // default to nsISupports's IID
    1:   nsIID scriptableIID = NS_GET_IID(nsISupports);
    1:   nsCOMPtr<nsISupports> scriptable_peer;
    1: 
    1:   nsCOMPtr<nsIScriptablePlugin> spi(do_QueryInterface(plugin_inst));
    1: 
    1:   if (spi) {
    1:     nsIID *scriptableInterfacePtr = nsnull;
    1:     spi->GetScriptableInterface(&scriptableInterfacePtr);
    1: 
    1:     if (scriptableInterfacePtr) {
    1:       spi->GetScriptablePeer(getter_AddRefs(scriptable_peer));
    1: 
    1:       scriptableIID = *scriptableInterfacePtr;
    1: 
    1:       nsMemory::Free(scriptableInterfacePtr);
    1:     }
    1:   }
    1: 
    1:   nsCOMPtr<nsIClassInfo> ci(do_QueryInterface(plugin_inst));
    1: 
    1:   if (!scriptable_peer) {
    1:     if (!ci) {
 5405:       // This plugin doesn't support NPRuntime or nsIScriptablePlugin,
 5405:       // nor does it have classinfo, this plugin is not scriptable
 5405:       // using those methods. It might however be a Java plugin so
 5405:       // let's try that.
 5405: 
 5405:       return GetJavaPluginJSObject(cx, obj, plugin_inst, plugin_obj,
    1:                                    plugin_proto);
    1:     }
    1: 
    1:     // The plugin instance has classinfo, use it as the scriptable
    1:     // plugin
    1:     scriptable_peer = plugin_inst;
    1:   }
    1: 
    1:   // Check if the plugin can be safely scriptable, the plugin wrapper
    1:   // must not have a shared prototype for this to work since we'll end
    1:   // up setting it's prototype here, and we want this change to affect
    1:   // this plugin object only.
    1: 
    1:   if (ci) {
    1:     // If we have class info we must make sure that the "share my
    1:     // proto" flag is *not* set
    1: 
    1:     PRUint32 flags;
    1:     ci->GetFlags(&flags);
    1: 
    1:     if (!(flags & nsIClassInfo::PLUGIN_OBJECT)) {
    1:       // The plugin classinfo doesn't claim it's a plugin object, this
    1:       // means the plugin object's proto might be shared, can't do
    1:       // this prototype setup then.
    1: 
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // notify the PluginManager that this one is scriptable --
    1:   // it will need some special treatment later
    1:   nsCOMPtr<nsIPluginHost> pluginManager =
    1:     do_GetService(kCPluginManagerCID);
    1: 
    1:   nsCOMPtr<nsPIPluginHost> pluginHost(do_QueryInterface(pluginManager));
    1: 
    1:   if(pluginHost) {
    1:     pluginHost->SetIsScriptableInstance(plugin_inst, PR_TRUE);
    1:   }
    1: 
    1:   // Wrap it.
    1: 
    1:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:   nsresult rv = sXPConnect->WrapNative(cx, ::JS_GetParent(cx, obj),
    1:                                        scriptable_peer,
    1:                                        scriptableIID, getter_AddRefs(holder));
    1:   // Wrapping a plugin object can fail if the plugins XPT file can't
    1:   // be found (i.e. is incorrectly installed). Return NS_OK in such a
    1:   // case to avoid having this generate exceptions in JS and to let
    1:   // the script still access the DOM node, even if the underlying
    1:   // plugin won't be scriptable.
    1:   NS_ENSURE_SUCCESS(rv, NS_OK);
    1: 
    1:   // QI holder to nsIXPConnectWrappedNative so that we can reliably
    1:   // access it's prototype
    1:   nsCOMPtr<nsIXPConnectWrappedNative> pi_wrapper(do_QueryInterface(holder));
    1:   NS_ENSURE_TRUE(pi_wrapper, NS_ERROR_UNEXPECTED);
    1: 
    1:   rv = pi_wrapper->GetJSObject(plugin_obj);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   return pi_wrapper->GetJSObjectPrototype(plugin_proto);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLPluginObjElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
    1:                                      JSContext *cx, JSObject *obj, jsval id,
    1:                                      PRUint32 flags, JSObject **objp,
    1:                                      PRBool *_retval)
    1: {
 5405:   if (!JSVAL_IS_STRING(id)) {
 5405:     return NS_OK;
 5405:   }
 5405: 
    1:   // This code resolves embed.nsIFoo to the nsIFoo wrapper of the
 5405:   // plugin/applet instance. We only want to do that for plugin
 5405:   // instances that are not scriptable using NPRuntime or are Java
 5405:   // plugin instances.
 5405: 
 5405:   nsCOMPtr<nsIPluginInstance> pi;
13098:   nsresult rv = GetPluginInstanceIfSafe(wrapper, getter_AddRefs(pi));
 5405:   NS_ENSURE_SUCCESS(rv, rv);
 5405: 
 5405:   nsCOMPtr<nsIPluginInstanceInternal> plugin_internal =
 5405:     do_QueryInterface(pi);
 5405: 
 5408: #ifdef OJI
 5405:   nsCOMPtr<nsIJVMPluginInstance> java_plugin_instance =
 5405:     do_QueryInterface(pi);
 5408: #endif
 5405: 
 5405:   JSObject *proto = ::JS_GetPrototype(cx, obj);
 5405: 
 5405:   if (pi && (!plugin_internal ||
 5405:              (!proto || strcmp(JS_GET_CLASS(cx, proto)->name,
 5408:                                NPRUNTIME_JSCLASS_NAME) != 0))
 5408: #ifdef OJI
 5408:       && !java_plugin_instance
 5408: #endif
 5408:       ) {
 5405:     // This is not an NPRuntime plugin or Java plugin, continue on...
    1: 
    1:     JSString *str = JSVAL_TO_STRING(id);
    1:     char* cstring = ::JS_GetStringBytes(str);
    1: 
    1:     nsCOMPtr<nsIInterfaceInfoManager>
    1:       iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
    1:     NS_ENSURE_TRUE(iim, NS_ERROR_UNEXPECTED);
    1: 
    1:     nsIID* iid = nsnull;
    1: 
    1:     nsresult rv = iim->GetIIDForName(cstring, &iid);
    1: 
    1:     if (NS_SUCCEEDED(rv) && iid) {
 5405:       // Notify the PluginManager that this one is scriptable -- it
 5405:       // will need some special treatment later
    1: 
    1:       nsCOMPtr<nsIPluginHost> pluginManager =
    1:         do_GetService(kCPluginManagerCID);
    1: 
    1:       nsCOMPtr<nsPIPluginHost> pluginHost(do_QueryInterface(pluginManager));
    1: 
    1:       if (pluginHost) {
    1:         pluginHost->SetIsScriptableInstance(pi, PR_TRUE);
    1:       }
    1: 
    1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
    1:       rv = sXPConnect->WrapNative(cx, obj, pi, *iid, getter_AddRefs(holder));
    1: 
    1:       if (NS_SUCCEEDED(rv)) {
    1:         JSObject* ifaceObj;
    1: 
    1:         rv = holder->GetJSObject(&ifaceObj);
    1: 
    1:         if (NS_SUCCEEDED(rv)) {
    1:           nsMemory::Free(iid);
    1: 
    1:           *_retval = ::JS_DefineUCProperty(cx, obj, ::JS_GetStringChars(str),
    1:                                            ::JS_GetStringLength(str),
    1:                                            OBJECT_TO_JSVAL(ifaceObj), nsnull,
    1:                                            nsnull, JSPROP_ENUMERATE);
    1: 
    1:           *objp = obj;
    1: 
    1:           return *_retval ? NS_OK : NS_ERROR_FAILURE;
    1:         }
    1:       }
    1:     }
    1: 
    1:     nsMemory::Free(iid);
    1:   }
    1: 
    1:   return nsHTMLElementSH::NewResolve(wrapper, cx, obj, id, flags, objp,
    1:                                      _retval);
    1: }
    1: 
    1: 
    1: // HTMLOptionsCollection helper
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLOptionsCollectionSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                                        JSContext *cx, JSObject *obj, jsval id,
    1:                                        jsval *vp, PRBool *_retval)
    1: {
    1:   PRInt32 n = GetArrayIndexFromId(cx, id);
    1: 
    1:   if (n < 0) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMNSHTMLOptionCollection> oc(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(oc, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsresult rv = nsHTMLSelectElementSH::SetOption(cx, vp, n, oc);
    1:   if (NS_SUCCEEDED(rv)) {
    1:     rv = NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLOptionsCollectionSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
    1:                                       JSContext *cx, JSObject *obj, 
    1:                                       jsval id, PRUint32 flags, 
    1:                                       JSObject **objp, PRBool *_retval)
    1: {
    1:   if (id == sAdd_id) {
    1:     JSString *str = JSVAL_TO_STRING(id);
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
    1:     JSFunction *fnc =
    1:       ::JS_DefineFunction(cx, obj, ::JS_GetStringBytes(str),
    1:                           Add, 0, JSPROP_ENUMERATE);
    1:     
    1:     *objp = obj;
    1:     
    1:     return fnc ? NS_OK : NS_ERROR_UNEXPECTED;
    1:   }
    1: 
    1:   return nsHTMLCollectionSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
    1: }
    1: 
18907: JSBool
    1: nsHTMLOptionsCollectionSH::Add(JSContext *cx, JSObject *obj, uintN argc,
    1:                                jsval *argv, jsval *rval)
    1: {
    1:   *rval = JSVAL_VOID;
    1: 
    1:   nsCOMPtr<nsIXPConnectWrappedNative> wrapper;
    1:   nsresult rv =
    1:     sXPConnect->GetWrappedNativeOfJSObject(cx, obj, getter_AddRefs(wrapper));
    1: 
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMHTMLOptionsCollection> options(do_QueryWrappedNative(wrapper));
    1:   NS_ASSERTION(options, "native should have been an options collection");
    1: 
    1:   if (argc < 1) {
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_XPC_NOT_ENOUGH_ARGS);
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   if (JSVAL_IS_PRIMITIVE(argv[0])) {
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_DOM_WRONG_TYPE_ERR);
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   rv = sXPConnect->GetWrappedNativeOfJSObject(cx, JSVAL_TO_OBJECT(argv[0]),
    1:                                               getter_AddRefs(wrapper));
    1:   
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1:     return JS_FALSE;
    1:   }
    1:   
    1:   nsCOMPtr<nsIDOMHTMLOptionElement> newOption(do_QueryWrappedNative(wrapper));
    1:   if (!newOption) {
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_DOM_WRONG_TYPE_ERR);
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   int32 index = -1;
    1:   if (argc > 1) {
    1:     if (!JS_ValueToInt32(cx, argv[1], &index)) {
    1:       return JS_FALSE;
    1:     }
    1:   }
    1: 
    1:   if (index < -1) {
    1:     nsDOMClassInfo::ThrowJSException(cx, NS_ERROR_DOM_INDEX_SIZE_ERR);
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   PRUint32 length;
    1:   options->GetLength(&length);
    1: 
    1:   if (index == -1 || index > (int32)length) {
    1:     // IE appends in these cases
    1:     index = length;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMNode> beforeNode;
    1:   options->Item(index, getter_AddRefs(beforeNode));
    1:   
    1:   nsCOMPtr<nsIDOMHTMLOptionElement> beforeElement(do_QueryInterface(beforeNode));
    1: 
    1:   nsCOMPtr<nsIDOMNSHTMLOptionCollection> nsoptions(do_QueryInterface(options));
    1: 
    1:   nsCOMPtr<nsIDOMHTMLSelectElement> select;
    1:   nsoptions->GetSelect(getter_AddRefs(select));
    1:                              
    1:   rv = select->Add(newOption, beforeElement);
    1: 
    1:   if (NS_FAILED(rv)) {
    1:     nsDOMClassInfo::ThrowJSException(cx, rv);
    1:   }
    1: 
    1:   return NS_SUCCEEDED(rv);
    1: }
    1: 
    1: 
    1: // Plugin helper
    1: 
20752: nsISupports*
    1: nsPluginSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                       nsresult *aResult)
20752: {
20752:   nsPluginElement* plugin = nsPluginElement::FromSupports(aNative);
20752: 
20752:   return plugin->GetItemAt(aIndex, aResult);
    1: }
    1: 
21159: nsISupports*
    1: nsPluginSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                          nsresult *aResult)
21159: {
21159:   nsPluginElement* plugin = nsPluginElement::FromSupports(aNative);
21159: 
21159:   return plugin->GetNamedItem(aName, aResult);
    1: }
    1: 
    1: 
    1: // PluginArray helper
    1: 
20752: nsISupports*
    1: nsPluginArraySH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                            nsresult *aResult)
20752: {
20752:   nsPluginArray* array = nsPluginArray::FromSupports(aNative);
20752: 
20752:   return array->GetItemAt(aIndex, aResult);
    1: }
    1: 
21159: nsISupports*
    1: nsPluginArraySH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                               nsresult *aResult)
21159: {
21159:   nsPluginArray* array = nsPluginArray::FromSupports(aNative);
21159: 
21159:   return array->GetNamedItem(aName, aResult);
    1: }
    1: 
    1: 
    1: // MimeTypeArray helper
    1: 
20752: nsISupports*
    1: nsMimeTypeArraySH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                              nsresult *aResult)
20752: {
20752:   nsMimeTypeArray* array = nsMimeTypeArray::FromSupports(aNative);
20752: 
20752:   return array->GetItemAt(aIndex, aResult);
    1: }
    1: 
21159: nsISupports*
    1: nsMimeTypeArraySH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                                 nsresult *aResult)
21159: {
21159:   nsMimeTypeArray* array = nsMimeTypeArray::FromSupports(aNative);
21159: 
21159:   return array->GetNamedItem(aName, aResult);
    1: }
    1: 
    1: 
    1: // StringArray helper
    1: 
    1: NS_IMETHODIMP
    1: nsStringArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                              JSObject *obj, jsval id, jsval *vp,
    1:                              PRBool *_retval)
    1: {
    1:   PRBool is_number = PR_FALSE;
    1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
    1: 
    1:   if (!is_number) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsAutoString val;
    1: 
    1:   nsresult rv = GetStringAt(wrapper->Native(), n, val);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   // XXX: Null strings?
    1: 
    1:   JSAutoRequest ar(cx);
    1: 
    1:   JSString *str =
 3233:     ::JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>(val.get()),
    1:                           val.Length());
    1:   NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:   *vp = STRING_TO_JSVAL(str);
    1: 
    1:   return NS_SUCCESS_I_DID_SOMETHING;
    1: }
    1: 
    1: 
    1: // History helper
    1: 
    1: NS_IMETHODIMP
    1: nsHistorySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                          JSObject *obj, jsval id, jsval *vp, PRBool *_retval)
    1: {
    1:   PRBool is_number = PR_FALSE;
    1:   GetArrayIndexFromId(cx, id, &is_number);
    1: 
    1:   if (!is_number) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsresult rv =
    1:     sSecMan->CheckPropertyAccess(cx, obj, mData->mName, sItem_id,
    1:                                  nsIXPCSecurityManager::ACCESS_CALL_METHOD);
    1: 
    1:   if (NS_FAILED(rv)) {
    1:     // Let XPConnect know that the access was not granted.
    1:     *_retval = PR_FALSE;
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   // sec check
    1: 
    1:   return nsStringArraySH::GetProperty(wrapper, cx, obj, id, vp, _retval);
    1: }
    1: 
    1: nsresult
    1: nsHistorySH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                          nsAString& aResult)
    1: {
    1:   if (aIndex < 0) {
    1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMHistory> history(do_QueryInterface(aNative));
    1: 
    1:   return history->Item(aIndex, aResult);
    1: }
    1: 
    1: 
    1: // MediaList helper
    1: 
    1: nsresult
    1: nsMediaListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                            nsAString& aResult)
    1: {
    1:   if (aIndex < 0) {
    1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMMediaList> media_list(do_QueryInterface(aNative));
    1: 
    1:   return media_list->Item(PRUint32(aIndex), aResult);
    1: }
    1: 
    1: 
    1: // StyleSheetList helper
    1: 
20752: nsISupports*
    1: nsStyleSheetListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                               nsresult *rv)
20752: {
20752:   nsDOMStyleSheetList* list = nsDOMStyleSheetList::FromSupports(aNative);
20752: 
20752:   return list->GetItemAt(aIndex);
    1: }
    1: 
    1: 
    1: // CSSValueList helper
    1: 
20752: nsISupports*
    1: nsCSSValueListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                             nsresult *aResult)
20752: {
20752:   nsDOMCSSValueList* list = nsDOMCSSValueList::FromSupports(aNative);
20752: 
20752:   return list->GetItemAt(aIndex);
    1: }
    1: 
    1: 
    1: // CSSStyleDeclaration helper
    1: 
    1: nsresult
    1: nsCSSStyleDeclSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
    1:                               nsAString& aResult)
    1: {
    1:   if (aIndex < 0) {
    1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
    1:   }
    1: 
    1:   nsCOMPtr<nsIDOMCSSStyleDeclaration> style_decl(do_QueryInterface(aNative));
    1: 
    1:   return style_decl->Item(PRUint32(aIndex), aResult);
    1: }
    1: 
    1: 
    1: // CSSRuleList scriptable helper
    1: 
20752: nsISupports*
    1: nsCSSRuleListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                            nsresult *aResult)
20752: {
20752:   nsICSSRuleList* list = static_cast<nsICSSRuleList*>(aNative);
20752: #ifdef DEBUG
20752:   {
20752:     nsCOMPtr<nsICSSRuleList> list_qi = do_QueryInterface(aNative);
20752: 
20752:     // If this assertion fires the QI implementation for the object in
20752:     // question doesn't use the nsICSSRuleList pointer as the nsISupports
20752:     // pointer. That must be fixed, or we'll crash...
20752:     NS_ASSERTION(list_qi == list, "Uh, fix QI!");
20752:   }
20752: #endif
20752: 
20752:   return list->GetItemAt(aIndex, aResult);
    1: }
    1: 
12915: // ClientRectList scriptable helper
 2014: 
20752: nsISupports*
12915: nsClientRectListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                               nsresult *aResult)
20752: {
20752:   nsClientRectList* list = nsClientRectList::FromSupports(aNative);
20752: 
20752:   return list->GetItemAt(aIndex);
 2014: }
    1: 
    1: #ifdef MOZ_XUL
    1: // TreeColumns helper
    1: 
20752: nsISupports*
    1: nsTreeColumnsSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                            nsresult *aResult)
20752: {
20752:   nsTreeColumns* columns = nsTreeColumns::FromSupports(aNative);
20752: 
20752:   return columns->GetColumnAt(aIndex);
    1: }
    1: 
21159: nsISupports*
    1: nsTreeColumnsSH::GetNamedItem(nsISupports *aNative,
    1:                               const nsAString& aName,
21159:                               nsresult *aResult)
21159: {
21159:   nsTreeColumns* columns = nsTreeColumns::FromSupports(aNative);
21159: 
21159:   return columns->GetNamedColumn(aName);
    1: }
    1: #endif
    1: 
    1: 
    1: // Storage scriptable helper
    1: 
    1: // One reason we need a newResolve hook is that in order for
    1: // enumeration of storage object keys to work the keys we're
    1: // enumerating need to exist on the storage object for the JS engine
    1: // to find them.
    1: 
    1: NS_IMETHODIMP
    1: nsStorageSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                         JSObject *obj, jsval id, PRUint32 flags,
    1:                         JSObject **objp, PRBool *_retval)
    1: {
    1:   JSObject *realObj;
    1:   wrapper->GetJSObject(&realObj);
    1: 
    1:   // First check to see if the property is defined on our prototype,
    1:   // after converting id to a string if it's an integer.
    1: 
    1:   JSString *jsstr = JS_ValueToString(cx, id);
    1:   if (!jsstr) {
    1:     return JS_FALSE;
    1:   }
    1: 
    1:   JSObject *proto = ::JS_GetPrototype(cx, realObj);
    1:   JSBool hasProp;
    1: 
    1:   if (proto &&
    1:       (::JS_HasUCProperty(cx, proto, ::JS_GetStringChars(jsstr),
    1:                           ::JS_GetStringLength(jsstr), &hasProp) &&
    1:        hasProp)) {
    1:     // We found the property we're resolving on the prototype,
    1:     // nothing left to do here then.
    1: 
    1:     return NS_OK;
    1:   }
    1: 
    1:   // We're resolving property that doesn't exist on the prototype,
    1:   // check if the key exists in the storage object.
    1: 
    1:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
    1: 
    1:   // GetItem() will return null if the caller can't access the session
    1:   // storage item.
    1:   nsCOMPtr<nsIDOMStorageItem> item;
    1:   nsresult rv = storage->GetItem(nsDependentJSString(jsstr),
    1:                                  getter_AddRefs(item));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   if (item) {
    1:     if (!::JS_DefineUCProperty(cx, realObj, ::JS_GetStringChars(jsstr),
    1:                                ::JS_GetStringLength(jsstr), JSVAL_VOID, nsnull,
    1:                                nsnull, 0)) {
    1:       return NS_ERROR_FAILURE;
    1:     }
    1: 
    1:     *objp = realObj;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
21159: nsISupports*
    1: nsStorageSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                           nsresult *aResult)
21159: {
21159:   nsDOMStorage* storage = nsDOMStorage::FromSupports(aNative);
21159: 
21159:   return storage->GetNamedItem(aName, aResult);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsStorageSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
    1:                          JSContext *cx, JSObject *obj, jsval id,
    1:                          jsval *vp, PRBool *_retval)
    1: {
    1:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
    1: 
    1:   JSString *key = ::JS_ValueToString(cx, id);
    1:   NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
    1: 
    1:   JSString *value = ::JS_ValueToString(cx, *vp);
    1:   NS_ENSURE_TRUE(value, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsresult rv = storage->SetItem(nsDependentJSString(key),
    1:                                  nsDependentJSString(value));
    1:   if (NS_SUCCEEDED(rv)) {
    1:     rv = NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsStorageSH::DelProperty(nsIXPConnectWrappedNative *wrapper,
    1:                          JSContext *cx, JSObject *obj, jsval id,
    1:                          jsval *vp, PRBool *_retval)
    1: {
    1:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
    1:   NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
    1: 
    1:   JSString *key = ::JS_ValueToString(cx, id);
    1:   NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsresult rv = storage->RemoveItem(nsDependentJSString(key));
    1:   if (NS_SUCCEEDED(rv)) {
    1:     rv = NS_SUCCESS_I_DID_SOMETHING;
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
    1: 
    1: NS_IMETHODIMP
    1: nsStorageSH::NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                           JSObject *obj, PRUint32 enum_op, jsval *statep,
    1:                           jsid *idp, PRBool *_retval)
    1: {
    1:   nsTArray<nsString> *keys =
    1:     (nsTArray<nsString> *)JSVAL_TO_PRIVATE(*statep);
    1: 
    1:   switch (enum_op) {
    1:     case JSENUMERATE_INIT:
    1:     {
    1:       nsCOMPtr<nsPIDOMStorage> storage(do_QueryWrappedNative(wrapper));
    1: 
    1:       // XXXndeakin need to free the keys afterwards
    1:       keys = storage->GetKeys();
    1:       NS_ENSURE_TRUE(keys, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:       *statep = PRIVATE_TO_JSVAL(keys);
    1: 
    1:       if (idp) {
    1:         *idp = INT_TO_JSVAL(keys->Length());
    1:       }
    1:       break;
    1:     }
    1:     case JSENUMERATE_NEXT:
    1:       if (keys->Length() != 0) {
    1:         nsString& key = keys->ElementAt(0);
    1:         JSString *str =
 3233:           JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>
 3233:                                                   (key.get()),
    1:                               key.Length());
    1:         NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:         JS_ValueToId(cx, STRING_TO_JSVAL(str), idp);
    1: 
    1:         keys->RemoveElementAt(0);
    1: 
    1:         break;
    1:       }
    1: 
    1:       // Fall through
    1:     case JSENUMERATE_DESTROY:
    1:       delete keys;
    1: 
    1:       *statep = JSVAL_NULL;
    1: 
    1:       break;
    1:     default:
    1:       NS_NOTREACHED("Bad call from the JS engine");
    1: 
    1:       return NS_ERROR_FAILURE;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: // StorageList scriptable helper
    1: 
21159: nsISupports*
    1: nsStorageListSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
21159:                               nsresult *aResult)
21159: {
21159:   nsDOMStorageList* storagelist = static_cast<nsDOMStorageList*>(aNative);
21159: 
21159:   return storagelist->GetNamedItem(aName, aResult);
    1: }
    1: 
    1: 
    1: // nsIDOMEventListener::HandleEvent() 'this' converter helper
    1: 
    1: NS_INTERFACE_MAP_BEGIN(nsEventListenerThisTranslator)
    1:   NS_INTERFACE_MAP_ENTRY(nsIXPCFunctionThisTranslator)
    1:   NS_INTERFACE_MAP_ENTRY(nsISupports)
    1: NS_INTERFACE_MAP_END
    1: 
    1: 
    1: NS_IMPL_ADDREF(nsEventListenerThisTranslator)
    1: NS_IMPL_RELEASE(nsEventListenerThisTranslator)
    1: 
    1: 
    1: NS_IMETHODIMP
    1: nsEventListenerThisTranslator::TranslateThis(nsISupports *aInitialThis,
    1:                                              nsIInterfaceInfo *aInterfaceInfo,
    1:                                              PRUint16 aMethodIndex,
    1:                                              PRBool *aHideFirstParamFromJS,
    1:                                              nsIID * *aIIDOfResult,
    1:                                              nsISupports **_retval)
    1: {
    1:   *aHideFirstParamFromJS = PR_FALSE;
    1:   *aIIDOfResult = nsnull;
    1: 
    1:   nsCOMPtr<nsIDOMEvent> event(do_QueryInterface(aInitialThis));
    1:   NS_ENSURE_TRUE(event, NS_ERROR_UNEXPECTED);
    1: 
    1:   nsCOMPtr<nsIDOMEventTarget> target;
    1:   event->GetCurrentTarget(getter_AddRefs(target));
    1: 
    1:   *_retval = target;
    1:   NS_IF_ADDREF(*_retval);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
 1312: nsDOMConstructorSH::Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 1312:                          JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
 1312:                          PRBool *_retval)
 1312: {
 1312:   nsDOMConstructor *wrapped =
 3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
 1312: 
 1312: #ifdef DEBUG
 1312:   {
 7842:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
 7842:       do_QueryWrappedNative(wrapper);
 1312:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
 1312:   }
 1312: #endif
 1312: 
 1312:   return wrapped->Construct(wrapper, cx, obj, argc, argv, vp, _retval);
 1312: }
 1312: 
 1312: NS_IMETHODIMP
    1: nsDOMConstructorSH::Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
    1:                               JSObject *obj, PRUint32 argc, jsval *argv,
    1:                               jsval *vp, PRBool *_retval)
    1: {
    1:   nsDOMConstructor *wrapped =
 3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
    1: 
    1: #ifdef DEBUG
    1:   {
 7843:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
 7842:       do_QueryWrappedNative(wrapper);
    1:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
    1:   }
    1: #endif
    1: 
    1:   return wrapped->Construct(wrapper, cx, obj, argc, argv, vp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsDOMConstructorSH::HasInstance(nsIXPConnectWrappedNative *wrapper,
    1:                                 JSContext *cx, JSObject *obj, jsval val,
    1:                                 PRBool *bp, PRBool *_retval)
    1: {
    1:   nsDOMConstructor *wrapped =
 3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
    1: 
    1: #ifdef DEBUG
    1:   {
 7842:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
 7842:       do_QueryWrappedNative(wrapper);
    1:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
    1:   }
    1: #endif
    1: 
    1:   return wrapped->HasInstance(wrapper, cx, obj, val, bp, _retval);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsNonDOMObjectSH::GetFlags(PRUint32 *aFlags)
    1: {
    1:   // This is NOT a DOM Object.  Use this helper class for cases when you need
    1:   // to do something like implement nsISecurityCheckedComponent in a meaningful
    1:   // way.
    1:   *aFlags = nsIClassInfo::MAIN_THREAD_ONLY;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsAttributeSH::GetFlags(PRUint32 *aFlags)
    1: {
    1:   // Just like nsNodeSH, but without CONTENT_NODE
    1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
    1: 
    1:   return NS_OK;
    1: }
 1938: 
 1938: // nsOfflineResourceListSH
 1938: nsresult
 1938: nsOfflineResourceListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
 1938:                                      nsAString& aResult)
 1938: {
 1938:   nsCOMPtr<nsIDOMOfflineResourceList> list(do_QueryInterface(aNative));
 1938:   NS_ENSURE_TRUE(list, NS_ERROR_UNEXPECTED);
 1938: 
 1938:   return list->Item(aIndex, aResult);
 1938: }
 3254: 
 3940: // nsFileListSH
20752: nsISupports*
 3940: nsFileListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
20752:                         nsresult *aResult)
20752: {
20752:   nsDOMFileList* list = nsDOMFileList::FromSupports(aNative);
20752: 
20752:   return list->GetItemAt(aIndex);
20752: }
