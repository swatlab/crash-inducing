63382: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42153:  * ***** BEGIN LICENSE BLOCK *****
42153:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42153:  *
42153:  * The contents of this file are subject to the Mozilla Public License Version
42153:  * 1.1 (the "License"); you may not use this file except in compliance with
42153:  * the License. You may obtain a copy of the License at
42153:  * http://www.mozilla.org/MPL/
42153:  *
42153:  * Software distributed under the License is distributed on an "AS IS" basis,
42153:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42153:  * for the specific language governing rights and limitations under the
42153:  * License.
42153:  *
42153:  * The Original Code is Android port code.
42153:  *
42153:  * The Initial Developer of the Original Code is
42153:  *   Mozilla Foundation
42153:  * Portions created by the Initial Developer are Copyright (C) 2010
42153:  * the Initial Developer. All Rights Reserved.
42153:  *
42153:  * Contributor(s):
42153:  *   Vladimir Vukicevic <vladimir@pobox.com>
42153:  *
42153:  * Alternatively, the contents of this file may be used under the terms of
42153:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42153:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42153:  * in which case the provisions of the GPL or the LGPL are applicable instead
42153:  * of those above. If you wish to allow use of your version of this file only
42153:  * under the terms of either the GPL or the LGPL, and not to allow others to
42153:  * use your version of this file under the terms of the MPL, indicate your
42153:  * decision by deleting the provisions above and replace them with the notice
42153:  * and other provisions required by the GPL or the LGPL. If you do not delete
42153:  * the provisions above, a recipient may use your version of this file under
42153:  * the terms of any one of the MPL, the GPL or the LGPL.
42153:  *
42153:  * ***** END LICENSE BLOCK ***** */
62921: #ifdef MOZ_IPC
62921: #include "mozilla/dom/ContentChild.h"
62921: #include "nsXULAppAPI.h"
62921: #endif
42153: 
42153: #include <android/log.h>
42153: 
42153: #include <sys/types.h>
62921: #include <sys/stat.h>
42153: #include <dirent.h>
42153: 
42153: #include "gfxAndroidPlatform.h"
42153: 
42153: #include "cairo.h"
42153: #include "cairo-ft.h"
42153: 
42153: #include "gfxImageSurface.h"
42153: 
42153: #include "nsUnicharUtils.h"
42153: 
42153: #include "nsMathUtils.h"
42153: #include "nsTArray.h"
42153: 
42153: #include "qcms.h"
42153: 
42153: #include "ft2build.h"
42153: #include FT_FREETYPE_H
42153: #include "gfxFT2Fonts.h"
48022: #include "gfxPlatformFontList.h"
48022: #include "gfxFT2FontList.h"
62921: #include "mozilla/scache/StartupCache.h"
62921: #include "nsXPCOMStrings.h"
62921: 
62921: using namespace mozilla;
62921: using namespace dom;
42153: 
42153: static FT_Library gPlatformFTLibrary = NULL;
42153: 
62921: #define LOG(args...)  __android_log_print(ANDROID_LOG_INFO, "GeckoFonts" , ## args)
42153: 
42153: gfxAndroidPlatform::gfxAndroidPlatform()
42153: {
42153:     FT_Init_FreeType(&gPlatformFTLibrary);
42153: 
42153:     mFonts.Init(200);
42153:     mFontAliases.Init(20);
42153:     mFontSubstitutes.Init(50);
42153:     mPrefFonts.Init(10);
42153: 
42153:     UpdateFontList();
42153: }
42153: 
42153: gfxAndroidPlatform::~gfxAndroidPlatform()
42153: {
42153:     cairo_debug_reset_static_data();
42153: 
42153:     FT_Done_FreeType(gPlatformFTLibrary);
42153:     gPlatformFTLibrary = NULL;
42153: }
42153: 
42153: already_AddRefed<gfxASurface>
42153: gfxAndroidPlatform::CreateOffscreenSurface(const gfxIntSize& size,
54253:                                       gfxASurface::gfxContentType contentType)
42153: {
46392:     nsRefPtr<gfxASurface> newSurface;
54253:     if (contentType == gfxImageSurface::CONTENT_COLOR)
59199:         newSurface = new gfxImageSurface (size, GetOffscreenFormat());
46392:     else
54253:         newSurface = new gfxImageSurface (size, gfxASurface::FormatFromContent(contentType));
42153: 
42153:     return newSurface.forget();
42153: }
42153: 
42153: struct FontListData {
42153:     FontListData(nsIAtom *aLangGroup, const nsACString& aGenericFamily, nsTArray<nsString>& aListOfFonts) :
42153:         mLangGroup(aLangGroup), mGenericFamily(aGenericFamily), mStringArray(aListOfFonts) {}
42153:     nsIAtom *mLangGroup;
42153:     const nsACString& mGenericFamily;
42153:     nsTArray<nsString>& mStringArray;
42153: };
42153: 
42153: static PLDHashOperator
42153: FontListHashEnumFunc(nsStringHashKey::KeyType aKey,
42153:                      nsRefPtr<FontFamily>& aFontFamily,
42153:                      void* userArg)
42153: {
42153:     FontListData *data = (FontListData*)userArg;
42153: 
42153:     // use the first variation for now.  This data should be the same
42153:     // for all the variations and should probably be moved up to
42153:     // the Family
42153:     gfxFontStyle style;
42153:     style.language = data->mLangGroup;
42153:     nsRefPtr<FontEntry> aFontEntry = aFontFamily->FindFontEntry(style);
42153:     NS_ASSERTION(aFontEntry, "couldn't find any font entry in family");
42153:     if (!aFontEntry)
42153:         return PL_DHASH_NEXT;
42153: 
42153: 
42153:     data->mStringArray.AppendElement(aFontFamily->Name());
42153: 
42153:     return PL_DHASH_NEXT;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::GetFontList(nsIAtom *aLangGroup,
42153:                                 const nsACString& aGenericFamily,
42153:                                 nsTArray<nsString>& aListOfFonts)
42153: {
42153:     FontListData data(aLangGroup, aGenericFamily, aListOfFonts);
42153: 
42153:     mFonts.Enumerate(FontListHashEnumFunc, &data);
42153: 
42153:     aListOfFonts.Sort();
42153:     aListOfFonts.Compact();
42153: 
42153:     return NS_OK;
42153: }
42153: 
62921: class FontNameCache {
62921: public:
62921:     typedef nsAutoTArray<PRUint32, 8> IndexList;
62921:     PLDHashTableOps ops;
62921:     FontNameCache() : mWriteNeeded(PR_FALSE) {
62921:         ops = {
62921:             PL_DHashAllocTable,
62921:             PL_DHashFreeTable,
62921:             StringHash,
62921:             HashMatchEntry,
62921:             MoveEntry,
62921:             PL_DHashClearEntryStub,
62921:             PL_DHashFinalizeStub,
62921:             NULL};
62921:         if (!PL_DHashTableInit(&mMap, &ops, nsnull,
62921:                                sizeof(FNCMapEntry), 0)) {
62921:             mMap.ops = nsnull;
62921:             LOG("initializing the map failed");
62921:         }
62921: #ifdef MOZ_IPC
62921:         NS_ABORT_IF_FALSE(XRE_GetProcessType() == GeckoProcessType_Default,
62921:                           "StartupCacheFontNameCache should only be used in chrome procsess");
62921: #endif
62921:         mCache = mozilla::scache::StartupCache::GetSingleton();
62921:         Init();
62921:     }
62921: 
62921:     void Init()
62921:     {
62921:         if (!mMap.ops)
62921:             return;
62921:         nsCAutoString prefName("font.cache");
62921:         PRUint32 size;
62921:         char* buf;
62921:         if (NS_FAILED(mCache->GetBuffer(prefName.get(), &buf, &size)))
62921:             return;
62921: 
62921:         LOG("got: %s from the cache", nsDependentCString(buf, size).get());
62921:         char* entry = strtok(buf, ";");
62921:         while (entry) {
62921:             nsCString faceList, filename, indexes;
62921:             PRUint32 timestamp, fileSize;
62921:             filename.Assign(entry);
62921:             entry = strtok(NULL, ";");
62921:             if (!entry)
62921:                 break;
62921:             faceList.Assign(entry);
62921:             entry = strtok(NULL, ";");
62921:             if (!entry)
62921:                 break;
62921:             char* endptr;
62921:             timestamp = strtoul(entry, &endptr, 10);
62921:             if (*endptr != '\0')
62921:                 break;
62921:             entry = strtok(NULL, ";");
62921:             if (!entry)
62921:                 break;
62921:             fileSize = strtoul(entry, &endptr, 10);
62921:             if (*endptr != '\0')
62921:                 break;
62921:             entry = strtok(NULL, ";");
62921:             if (!entry)
62921:                 break;
62921:             indexes.Assign(entry);
62921:             FNCMapEntry* mapEntry =
62921:                 static_cast<FNCMapEntry*>
62921:                 (PL_DHashTableOperate(&mMap, filename.get(), PL_DHASH_ADD));
62921:             if (mapEntry) {
62921:                 mapEntry->mFilename = filename;
62921:                 mapEntry->mTimestamp = timestamp;
62921:                 mapEntry->mFilesize = fileSize;
62921:                 mapEntry->mFaces.AssignWithConversion(faceList);
62921:                 mapEntry->mIndexes = indexes;
62921:             }
62921:             entry = strtok(NULL, ";");
62921:         }
62921:         free(buf);
62921:     }
62921: 
62921:     virtual void
62921:     GetInfoForFile(nsCString& aFileName, nsAString& aFaceList,
62921:                    PRUint32 *aTimestamp, PRUint32 *aFileSize,
62921:                    IndexList &aIndexList)
62921:     {
62921:         if (!mMap.ops)
62921:             return;
62921:         PLDHashEntryHdr *hdr = PL_DHashTableOperate(&mMap, aFileName.get(), PL_DHASH_LOOKUP);
62921:         if (!hdr)
62921:             return;
62921:         FNCMapEntry* entry = static_cast<FNCMapEntry*>(hdr);
62921:         if (entry && entry->mTimestamp && entry->mFilesize) {
62921:             *aTimestamp = entry->mTimestamp;
62921:             *aFileSize = entry->mFilesize;
62921:             char* indexes = const_cast<char*>(entry->mIndexes.get());
62921:             char* endptr = indexes + 1;
62921:             unsigned long index = strtoul(indexes, &endptr, 10);
62921:             while (indexes < endptr && indexes[0] != '\0') {
62921:                 aIndexList.AppendElement(index);
62921:                 indexes = endptr + 1;
62921:             }
62921:             aFaceList.Assign(entry->mFaces);
62921:         }
62921:     }
62921: 
62921:     virtual void
62921:     CacheFileInfo(nsCString& aFileName, nsAString& aFaceList,
62921:                   PRUint32 aTimestamp, PRUint32 aFileSize,
62921:                   IndexList &aIndexList)
62921:     {
62921:         if (!mMap.ops)
62921:             return;
62921:         FNCMapEntry* entry =
62921:             static_cast<FNCMapEntry*>
62921:             (PL_DHashTableOperate(&mMap, aFileName.get(), PL_DHASH_ADD));
62921:         if (entry) {
62921:             entry->mFilename = aFileName;
62921:             entry->mTimestamp = aTimestamp;
62921:             entry->mFilesize = aFileSize;
62921:             entry->mFaces.Assign(aFaceList);
62921:             for (PRUint32 i = 0; i < aIndexList.Length(); i++) {
62921:                 entry->mIndexes.AppendInt(aIndexList[i]);
62921:                 entry->mIndexes.Append(",");
62921:             }
62921:         }
62921:         mWriteNeeded = PR_TRUE;
62921:     }
62921:     ~FontNameCache() {
62921:         if (!mMap.ops)
62921:             return;
62921: 
62921:         if (!mWriteNeeded || !mCache) {
62921:             PL_DHashTableFinish(&mMap);
62921:             return;
62921:         }
62921: 
62921:         nsCAutoString buf;
62921:         PL_DHashTableEnumerate(&mMap, WriteOutMap, &buf);
62921:         PL_DHashTableFinish(&mMap);
62921:         nsCAutoString prefName("font.cache");
62921:         mCache->PutBuffer(prefName.get(), buf.get(), buf.Length());
62921:     }
62921: private:
62921:     mozilla::scache::StartupCache* mCache;
62921:     PLDHashTable mMap;
62921:     PRBool mWriteNeeded;
62921: 
62921:     static PLDHashOperator WriteOutMap(PLDHashTable *aTable,
62921:                                        PLDHashEntryHdr *aHdr,
62921:                                        PRUint32 aNumber, void *aData)
62921:     {
62921:         nsCAutoString* buf = (nsCAutoString*)aData;
62921:         FNCMapEntry* entry = static_cast<FNCMapEntry*>(aHdr);
62921: 
62921:         buf->Append(entry->mFilename);
62921:         buf->Append(";");
62921:         buf->AppendWithConversion(entry->mFaces);
62921:         buf->Append(";");
62921:         buf->AppendInt(entry->mTimestamp);
62921:         buf->Append(";");
62921:         buf->AppendInt(entry->mFilesize);
62921:         buf->Append(";");
62921:         buf->Append(entry->mIndexes);
62921:         buf->Append(";");
62921: 
62921:         return PL_DHASH_NEXT;
62921:     }
62921: 
62921:     typedef struct : public PLDHashEntryHdr {
62921:     public:
62921:         nsCString mFilename;
62921:         PRUint32 mTimestamp;
62921:         PRUint32 mFilesize;
62921:         nsString mFaces;
62921:         nsCString mIndexes;
62921:     } FNCMapEntry;
62921: 
62921: 
62921:     static PLDHashNumber StringHash(PLDHashTable *table, const void *key) {
62921:         PLDHashNumber h = 0;
62921:         for (const char *s = reinterpret_cast<const char*>(key); *s; ++s)
62921:             h = PR_ROTATE_LEFT32(h, 4) ^ NS_ToLower(*s);
62921:         return h;
62921:     }
62921: 
62921:     static PRBool HashMatchEntry(PLDHashTable *table,
62921:                                  const PLDHashEntryHdr *aHdr, const void *key)
62921:     {
62921:         const FNCMapEntry* entry =
62921:             static_cast<const FNCMapEntry*>(aHdr);
62921:         return entry->mFilename.Equals((char*)key);
62921:     }
62921: 
62921:     static void MoveEntry(PLDHashTable *table, const PLDHashEntryHdr *aFrom,
62921:                           PLDHashEntryHdr *aTo)
62921:     {
62921:         FNCMapEntry* to =
62921:             static_cast<FNCMapEntry*>(aTo);
62921:         const FNCMapEntry* from =
62921:             static_cast<const FNCMapEntry*>(aFrom);
62921:         to->mFilename.Assign(from->mFilename);
62921:         to->mTimestamp = from->mTimestamp;
62921:         to->mFilesize = from->mFilesize;
62921:         to->mFaces.Assign(from->mFaces);
62921:         to->mIndexes.Assign(from->mIndexes);
62921:     }
62921: 
62921: };
42153: 
42153: void
62921: gfxAndroidPlatform::AppendFacesFromFontFile(const char *aFileName, FontNameCache* aFontCache, InfallibleTArray<FontListEntry>* aFontList)
42153: {
62921:     nsString faceList;
62921:     PRUint32 timestamp = 0;
62921:     PRUint32 filesize = 0;
62921:     FontNameCache::IndexList indexList;
62921:     nsCString fileName(aFileName);
62921:     if (aFontCache)
62921:         aFontCache->GetInfoForFile(fileName, faceList, &timestamp, &filesize, indexList);
62921:     struct stat s;
62921:     int stat_ret = stat(aFileName, &s);
62921:     if (!faceList.IsEmpty() && indexList.Length() && 0 == stat_ret &&
62921:         s.st_mtime == timestamp && s.st_size == filesize) {
62921:         PRInt32 beginning = 0;
62921:         PRInt32 end = faceList.Find(",", PR_TRUE, beginning, -1);
62921:         for (PRUint32 i = 0; i < indexList.Length() && end != kNotFound; i++) {
62921:             nsDependentSubstring name(faceList, beginning, end);
62921:             ToLowerCase(name);
62921:             FontListEntry fle(NS_ConvertUTF16toUTF8(name), fileName,
62921:                               indexList[i]);
62921:             aFontList->AppendElement(fle);
62921:             beginning = end + 1;
62921:             end = faceList.Find(",", PR_TRUE, beginning, -1);
62921:         }
62921:         return;
62921:     }
62921: 
62921:     faceList.AssignLiteral("");
62921:     timestamp = s.st_mtime;
62921:     filesize = s.st_size;
42153:     FT_Face dummy;
62921:     if (FT_Err_Ok == FT_New_Face(GetFTLibrary(), aFileName, -1, &dummy)) {
42153:         for (FT_Long i = 0; i < dummy->num_faces; i++) {
42153:             FT_Face face;
62921:             if (FT_Err_Ok != FT_New_Face(GetFTLibrary(), aFileName,
42153:                                          i, &face))
42153:                 continue;
62921:             nsDependentCString name(face->family_name);
42153:             ToLowerCase(name);
42153: 
42153:             nsRefPtr<FontFamily> ff;
62921:             faceList.AppendWithConversion(name);
62921:             faceList.AppendLiteral(",");
62921:             indexList.AppendElement(i);
62921:             ToLowerCase(name);
62921:             FontListEntry fle(name, fileName, i);
62921:             aFontList->AppendElement(fle);
62921:         }
62921:         FT_Done_Face(dummy);
62921:         if (aFontCache && 0 == stat_ret)
62921:             aFontCache->CacheFileInfo(fileName, faceList, timestamp, filesize, indexList);
62921:     }
42153: }
42153: 
62921: void
63382: gfxAndroidPlatform::FindFontsInDirectory(const char *aDirectory, FontNameCache* aFontCache)
63382: {
63382:     DIR *d = opendir(aDirectory);
63382:     struct dirent *ent = NULL;
63382:     while(d && (ent = readdir(d)) != NULL) {
63382:         int namelen = strlen(ent->d_name);
63382:         if (namelen > 4 &&
63382:             strcasecmp(ent->d_name + namelen - 4, ".ttf") == 0)
63382:         {
63382:             nsCString s(aDirectory);
63382:             s.Append("/fonts/");
63382:             s.Append(nsDependentCString(ent->d_name));
63382: 
63382:             AppendFacesFromFontFile(nsPromiseFlatCString(s).get(),
63382:                                     aFontCache, &mFontList);
63382:         }
63382:     }
63382: }
63382: 
63382: void
62921: gfxAndroidPlatform::GetFontList(InfallibleTArray<FontListEntry>* retValue)
62921: {
62921: #ifdef MOZ_IPC
62921:     if (XRE_GetProcessType() != GeckoProcessType_Default) {
62921:         mozilla::dom::ContentChild::GetSingleton()->SendReadFontList(retValue);
62921:         return;
42153:     }
62921: #endif
62921: 
62921:     if (mFontList.Length() > 0) {
62921:         *retValue = mFontList;
62921:         return;
42153:     }
63382: 
63382:     // Check in both /system and $ANDROID_ROOT
62921:     FontNameCache fnc;
63382:     const char *systemDirectory = "/system";
63382:     FindFontsInDirectory(systemDirectory, &fnc);
63382:     char *androidRoot = PR_GetEnv("ANDROID_ROOT");
63382:     if (androidRoot && strcmp(androidRoot, systemDirectory))
63382:         FindFontsInDirectory(androidRoot, &fnc);
62921: 
62921:     *retValue = mFontList;
62921: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::UpdateFontList()
42153: {
42153:     gfxFontCache *fc = gfxFontCache::GetCache();
42153:     if (fc)
42153:         fc->AgeAllGenerations();
42153:     mFonts.Clear();
42153:     mFontAliases.Clear();
42153:     mFontSubstitutes.Clear();
42153:     mPrefFonts.Clear();
42153:     mCodepointsWithNoFonts.reset();
42153: 
62921:     InfallibleTArray<FontListEntry> fontList;
62921:     GetFontList(&fontList);
62921:     for (PRUint32 i = 0; i < fontList.Length(); i++) {
62921:         NS_ConvertUTF8toUTF16 name(fontList[i].familyName());
62921:         nsRefPtr<FontFamily> ff;
62921:         if (!mFonts.Get(name, &ff)) {
62921:             ff = new FontFamily(name);
62921:             mFonts.Put(name, ff);
42153:         }
62921:         ff->AddFontFileAndIndex(fontList[i].filepath(), fontList[i].index());
42153:     }
42153: 
42153:     // initialize the cmap loading process after font list has been initialized
42153:     //StartLoader(kDelayBeforeLoadingCmaps, kIntervalBetweenLoadingCmaps);
42153: 
42153:     // initialize ranges of characters for which system-wide font search should be skipped
42153:     mCodepointsWithNoFonts.SetRange(0,0x1f);     // C0 controls
42153:     mCodepointsWithNoFonts.SetRange(0x7f,0x9f);  // C1 controls
42153: 
42153:     return NS_OK;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::ResolveFontName(const nsAString& aFontName,
42153:                                     FontResolverCallback aCallback,
42153:                                     void *aClosure,
42153:                                     PRBool& aAborted)
42153: {
42153:     if (aFontName.IsEmpty())
42153:         return NS_ERROR_FAILURE;
42153: 
48022:     nsAutoString resolvedName;
48022:     gfxPlatformFontList* platformFontList = gfxPlatformFontList::PlatformFontList();
48022:     if (platformFontList) {
48022:         if (!platformFontList->ResolveFontName(aFontName, resolvedName)) {
48022:             aAborted = PR_FALSE;
48022:             return NS_OK;
48022:         }
48022:     }
48022: 
42153:     nsAutoString keyName(aFontName);
42153:     ToLowerCase(keyName);
42153: 
42153:     nsRefPtr<FontFamily> ff;
42153:     if (mFonts.Get(keyName, &ff) ||
42153:         mFontSubstitutes.Get(keyName, &ff) ||
42153:         mFontAliases.Get(keyName, &ff))
42153:     {
42153:         aAborted = !(*aCallback)(ff->Name(), aClosure);
42153:     } else {
42153:         aAborted = PR_FALSE;
42153:     }
42153: 
42153:     return NS_OK;
42153: }
42153: 
42153: static PRBool SimpleResolverCallback(const nsAString& aName, void* aClosure)
42153: {
42153:     nsString *result = static_cast<nsString*>(aClosure);
42153:     result->Assign(aName);
42153:     return PR_FALSE;
42153: }
42153: 
42153: nsresult
42153: gfxAndroidPlatform::GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName)
42153: {
42153:     aFamilyName.Truncate();
42153:     PRBool aborted;
42153:     return ResolveFontName(aFontName, SimpleResolverCallback, &aFamilyName, aborted);
42153: }
42153: 
48022: gfxPlatformFontList*
48022: gfxAndroidPlatform::CreatePlatformFontList()
48022: {
57104:     gfxPlatformFontList* list = new gfxFT2FontList();
57104:     if (NS_SUCCEEDED(list->InitFontList())) {
57104:         return list;
57104:     }
57104:     gfxPlatformFontList::Shutdown();
57104:     return nsnull;
48022: }
48022: 
48022: PRBool
48022: gfxAndroidPlatform::IsFontFormatSupported(nsIURI *aFontURI, PRUint32 aFormatFlags)
48022: {
48022:     // check for strange format flags
48022:     NS_ASSERTION(!(aFormatFlags & gfxUserFontSet::FLAG_FORMAT_NOT_USED),
48022:                  "strange font format hint set");
48022: 
48022:     // accept supported formats
48022:     if (aFormatFlags & (gfxUserFontSet::FLAG_FORMAT_OPENTYPE | 
48022:                         gfxUserFontSet::FLAG_FORMAT_TRUETYPE)) {
48022:         return PR_TRUE;
48022:     }
48022: 
48022:     // reject all other formats, known and unknown
48022:     if (aFormatFlags != 0) {
48022:         return PR_FALSE;
48022:     }
48022: 
48022:     // no format hint set, need to look at data
48022:     return PR_TRUE;
48022: }
48022: 
42153: gfxFontGroup *
42153: gfxAndroidPlatform::CreateFontGroup(const nsAString &aFamilies,
42153:                                const gfxFontStyle *aStyle,
42153:                                gfxUserFontSet* aUserFontSet)
42153: {
48022:     return new gfxFT2FontGroup(aFamilies, aStyle, aUserFontSet);
42153: }
42153: 
42153: FT_Library
42153: gfxAndroidPlatform::GetFTLibrary()
42153: {
42153:     return gPlatformFTLibrary;
42153: }
42153: 
42153: FontFamily *
42153: gfxAndroidPlatform::FindFontFamily(const nsAString& aName)
42153: {
42153:     nsAutoString name(aName);
42153:     ToLowerCase(name);
42153: 
42153:     nsRefPtr<FontFamily> ff;
42153:     if (!mFonts.Get(name, &ff) &&
42153:         !mFontSubstitutes.Get(name, &ff) &&
42153:         !mFontAliases.Get(name, &ff)) {
42153:         return nsnull;
42153:     }
42153:     return ff.get();
42153: }
42153: 
42153: FontEntry *
42153: gfxAndroidPlatform::FindFontEntry(const nsAString& aName, const gfxFontStyle& aFontStyle)
42153: {
42153:     nsRefPtr<FontFamily> ff = FindFontFamily(aName);
42153:     if (!ff)
42153:         return nsnull;
42153: 
42153:     return ff->FindFontEntry(aFontStyle);
42153: }
42153: 
42153: static PLDHashOperator
42153: FindFontForCharProc(nsStringHashKey::KeyType aKey,
42153:                     nsRefPtr<FontFamily>& aFontFamily,
42153:                     void* aUserArg)
42153: {
42153:     FontSearch *data = (FontSearch*)aUserArg;
42153:     aFontFamily->FindFontForChar(data);
42153:     return PL_DHASH_NEXT;
42153: }
42153: 
42153: already_AddRefed<gfxFont>
42153: gfxAndroidPlatform::FindFontForChar(PRUint32 aCh, gfxFont *aFont)
42153: {
42153:     // is codepoint with no matching font? return null immediately
42153:     if (mCodepointsWithNoFonts.test(aCh)) {
42153:         return nsnull;
42153:     }
42153: 
42153:     FontSearch data(aCh, aFont);
42153: 
42153:     // find fonts that support the character
42153:     mFonts.Enumerate(FindFontForCharProc, &data);
42153: 
42153:     if (data.mBestMatch) {
42153:         nsRefPtr<gfxFT2Font> font =
42153:             gfxFT2Font::GetOrMakeFont(static_cast<FontEntry*>(data.mBestMatch.get()), 
42153:                                       aFont->GetStyle()); 
42153:         gfxFont* ret = font.forget().get();
42153:         return already_AddRefed<gfxFont>(ret);
42153:     }
42153: 
42153:     // no match? add to set of non-matching codepoints
42153:     mCodepointsWithNoFonts.set(aCh);
42153: 
42153:     return nsnull;
42153: }
42153: 
48022: gfxFontEntry* 
48022: gfxAndroidPlatform::MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
48022:                                      const PRUint8 *aFontData, PRUint32 aLength)
48022: {
48022:     return gfxPlatformFontList::PlatformFontList()->MakePlatformFont(aProxyEntry,
48022:                                                                      aFontData,
48022:                                                                      aLength);
48022: }
48022: 
42153: PRBool
42153: gfxAndroidPlatform::GetPrefFontEntries(const nsCString& aKey, nsTArray<nsRefPtr<gfxFontEntry> > *aFontEntryList)
42153: {
42153:     return mPrefFonts.Get(aKey, aFontEntryList);
42153: }
42153: 
42153: void
42153: gfxAndroidPlatform::SetPrefFontEntries(const nsCString& aKey, nsTArray<nsRefPtr<gfxFontEntry> >& aFontEntryList)
42153: {
42153:     mPrefFonts.Put(aKey, aFontEntryList);
42153: }
