36171: #ifndef mozilla__ipdltest_TestRPCRaces_h
36171: #define mozilla__ipdltest_TestRPCRaces_h
36171: 
36171: #include "mozilla/_ipdltest/IPDLUnitTests.h"
36171: 
36171: #include "mozilla/_ipdltest/PTestRPCRacesParent.h"
36171: #include "mozilla/_ipdltest/PTestRPCRacesChild.h"
36171: 
36171: namespace mozilla {
36171: namespace _ipdltest {
36171: 
39266: mozilla::ipc::RPCChannel::RacyRPCPolicy
39266: MediateRace(const mozilla::ipc::RPCChannel::Message& parent,
39266:             const mozilla::ipc::RPCChannel::Message& child);
36171: 
36171: class TestRPCRacesParent :
36171:     public PTestRPCRacesParent
36171: {
36171: public:
39266:     TestRPCRacesParent() : mHasReply(false),
39266:                            mChildHasReply(false),
39266:                            mAnsweredParent(false)
36171:     { }
36171:     virtual ~TestRPCRacesParent() { }
36171: 
36171:     void Main();
36171: 
36171: protected:
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     RecvStartRace();
36171: 
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     AnswerRace(bool* hasRace);
36171: 
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     AnswerStackFrame();
36171: 
36171:     NS_OVERRIDE
39266:     virtual bool
39266:     AnswerStackFrame3();
39266: 
39266:     NS_OVERRIDE
39266:     virtual bool
39266:     AnswerParent();
39266: 
39266:     NS_OVERRIDE
39266:     virtual bool
39266:     RecvGetAnsweredParent(bool* answeredParent);
39266: 
39266:     NS_OVERRIDE
39266:     virtual mozilla::ipc::RPCChannel::RacyRPCPolicy
39266:     MediateRPCRace(const Message& parent, const Message& child)
39266:     {
39266:         return MediateRace(parent, child);
39266:     }
39266: 
39266:     NS_OVERRIDE
36171:     virtual void ActorDestroy(ActorDestroyReason why)
36171:     {
36171:         if (NormalShutdown != why)
36171:             fail("unexpected destruction!");
36171:         if (!(mHasReply && mChildHasReply))
36171:             fail("both sides should have replies!");
36171:         passed("ok");
36171:         QuitParent();
36171:     }
36171: 
36171: private:
36171:     void OnRaceTime();
36171: 
36171:     void Test2();
39266:     void Test3();
36171: 
36171:     bool mHasReply;
36171:     bool mChildHasReply;
39266:     bool mAnsweredParent;
36171: };
36171: 
36171: 
36171: class TestRPCRacesChild :
36171:     public PTestRPCRacesChild
36171: {
36171: public:
36171:     TestRPCRacesChild() : mHasReply(false) { }
36171:     virtual ~TestRPCRacesChild() { }
36171: 
36171: protected:
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     RecvStart();
36171: 
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     AnswerRace(bool* hasRace);
36171: 
36171:     NS_OVERRIDE
36171:     virtual bool
36171:     AnswerStackFrame();
36171: 
36171:     NS_OVERRIDE
36171:     virtual bool
39266:     AnswerStackFrame3();
39266: 
39266:     NS_OVERRIDE
39266:     virtual bool
36171:     RecvWakeup();
36171: 
36171:     NS_OVERRIDE
39266:     virtual bool
39266:     RecvWakeup3();
39266: 
39266:     NS_OVERRIDE
39266:     virtual bool
39266:     AnswerChild();
39266: 
39266:     NS_OVERRIDE
39266:     virtual mozilla::ipc::RPCChannel::RacyRPCPolicy
39266:     MediateRPCRace(const Message& parent, const Message& child)
39266:     {
39266:         return MediateRace(parent, child);
39266:     }
39266: 
39266:     NS_OVERRIDE
36171:     virtual void ActorDestroy(ActorDestroyReason why)
36171:     {
36171:         if (NormalShutdown != why)
36171:             fail("unexpected destruction!");
36171:         QuitChild();
36171:     }
36171: 
36171: private:
36171:     bool mHasReply;
36171: };
36171: 
36171: 
36171: } // namespace _ipdltest
36171: } // namespace mozilla
36171: 
36171: 
36171: #endif // ifndef mozilla__ipdltest_TestRPCRaces_h
