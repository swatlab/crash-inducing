  3869: // Copyright (c) 2006, Google Inc.
  3869: // All rights reserved.
  3869: //
  3869: // Redistribution and use in source and binary forms, with or without
  3869: // modification, are permitted provided that the following conditions are
  3869: // met:
  3869: //
  3869: //     * Redistributions of source code must retain the above copyright
  3869: // notice, this list of conditions and the following disclaimer.
  3869: //     * Redistributions in binary form must reproduce the above
  3869: // copyright notice, this list of conditions and the following disclaimer
  3869: // in the documentation and/or other materials provided with the
  3869: // distribution.
  3869: //     * Neither the name of Google Inc. nor the names of its
  3869: // contributors may be used to endorse or promote products derived from
  3869: // this software without specific prior written permission.
  3869: //
  3869: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  3869: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  3869: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  3869: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  3869: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  3869: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  3869: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  3869: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  3869: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  3869: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  3869: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  3869: 
114869: #include <string.h>
114869: 
114534: #include "common/convert_UTF.h"
114869: #include "common/string_conversion.h"
114869: #include "common/using_std_string.h"
114534: #include "processor/scoped_ptr.h"
114508: 
  3869: namespace google_breakpad {
  3869: 
  3869: using std::vector;
  3869: 
  3869: void UTF8ToUTF16(const char *in, vector<u_int16_t> *out) {
  3869:   size_t source_length = strlen(in);
  3869:   const UTF8 *source_ptr = reinterpret_cast<const UTF8 *>(in);
  3869:   const UTF8 *source_end_ptr = source_ptr + source_length;
  3869:   // Erase the contents and zero fill to the expected size
114869:   out->clear();
  3869:   out->insert(out->begin(), source_length, 0);
  3869:   u_int16_t *target_ptr = &(*out)[0];
  3869:   u_int16_t *target_end_ptr = target_ptr + out->capacity() * sizeof(u_int16_t);
  3869:   ConversionResult result = ConvertUTF8toUTF16(&source_ptr, source_end_ptr,
  3869:                                                &target_ptr, target_end_ptr,
  3869:                                                strictConversion);
  3869: 
  3869:   // Resize to be the size of the # of converted characters + NULL
  3869:   out->resize(result == conversionOK ? target_ptr - &(*out)[0] + 1: 0);
  3869: }
  3869: 
  3869: int UTF8ToUTF16Char(const char *in, int in_length, u_int16_t out[2]) {
  3869:   const UTF8 *source_ptr = reinterpret_cast<const UTF8 *>(in);
  3869:   const UTF8 *source_end_ptr = source_ptr + sizeof(char);
  3869:   u_int16_t *target_ptr = out;
  3869:   u_int16_t *target_end_ptr = target_ptr + 2 * sizeof(u_int16_t);
  3869:   out[0] = out[1] = 0;
  3869: 
  3869:   // Process one character at a time
  3869:   while (1) {
  3869:     ConversionResult result = ConvertUTF8toUTF16(&source_ptr, source_end_ptr,
  3869:                                                  &target_ptr, target_end_ptr,
  3869:                                                  strictConversion);
  3869: 
  3869:     if (result == conversionOK)
 50677:       return static_cast<int>(source_ptr - reinterpret_cast<const UTF8 *>(in));
  3869: 
  3869:     // Add another character to the input stream and try again
  3869:     source_ptr = reinterpret_cast<const UTF8 *>(in);
  3869:     ++source_end_ptr;
  3869: 
  3869:     if (source_end_ptr > reinterpret_cast<const UTF8 *>(in) + in_length)
  3869:       break;
  3869:   }
  3869: 
  3869:   return 0;
  3869: }
  3869: 
  3869: void UTF32ToUTF16(const wchar_t *in, vector<u_int16_t> *out) {
  3869:   size_t source_length = wcslen(in);
  3869:   const UTF32 *source_ptr = reinterpret_cast<const UTF32 *>(in);
  3869:   const UTF32 *source_end_ptr = source_ptr + source_length;
  3869:   // Erase the contents and zero fill to the expected size
114869:   out->clear();
  3869:   out->insert(out->begin(), source_length, 0);
  3869:   u_int16_t *target_ptr = &(*out)[0];
  3869:   u_int16_t *target_end_ptr = target_ptr + out->capacity() * sizeof(u_int16_t);
  3869:   ConversionResult result = ConvertUTF32toUTF16(&source_ptr, source_end_ptr,
  3869:                                                 &target_ptr, target_end_ptr,
  3869:                                                 strictConversion);
  3869: 
  3869:   // Resize to be the size of the # of converted characters + NULL
  3869:   out->resize(result == conversionOK ? target_ptr - &(*out)[0] + 1: 0);
  3869: }
  3869: 
  3869: void UTF32ToUTF16Char(wchar_t in, u_int16_t out[2]) {
  3869:   const UTF32 *source_ptr = reinterpret_cast<const UTF32 *>(&in);
  3869:   const UTF32 *source_end_ptr = source_ptr + 1;
  3869:   u_int16_t *target_ptr = out;
  3869:   u_int16_t *target_end_ptr = target_ptr + 2 * sizeof(u_int16_t);
  3869:   out[0] = out[1] = 0;
  3869:   ConversionResult result = ConvertUTF32toUTF16(&source_ptr, source_end_ptr,
  3869:                                                 &target_ptr, target_end_ptr,
  3869:                                                 strictConversion);
  3869: 
  3869:   if (result != conversionOK) {
  3869:     out[0] = out[1] = 0;
  3869:   }
  3869: }
  3869: 
  3869: static inline u_int16_t Swap(u_int16_t value) {
118328:   return (value >> 8) | static_cast<u_int16_t>(value << 8);
  3869: }
  3869: 
  3869: string UTF16ToUTF8(const vector<u_int16_t> &in, bool swap) {
  3869:   const UTF16 *source_ptr = &in[0];
  3869:   scoped_ptr<u_int16_t> source_buffer;
  3869: 
  3869:   // If we're to swap, we need to make a local copy and swap each byte pair
  3869:   if (swap) {
  3869:     int idx = 0;
  3869:     source_buffer.reset(new u_int16_t[in.size()]);
  3869:     UTF16 *source_buffer_ptr = source_buffer.get();
  3869:     for (vector<u_int16_t>::const_iterator it = in.begin();
  3869:          it != in.end(); ++it, ++idx)
  3869:       source_buffer_ptr[idx] = Swap(*it);
  3869: 
  3869:     source_ptr = source_buffer.get();
  3869:   }
  3869: 
  3869:   // The maximum expansion would be 4x the size of the input string.
  3869:   const UTF16 *source_end_ptr = source_ptr + in.size();
 50677:   size_t target_capacity = in.size() * 4;
  3869:   scoped_array<UTF8> target_buffer(new UTF8[target_capacity]);
  3869:   UTF8 *target_ptr = target_buffer.get();
  3869:   UTF8 *target_end_ptr = target_ptr + target_capacity;
  3869:   ConversionResult result = ConvertUTF16toUTF8(&source_ptr, source_end_ptr, 
  3869:                                                &target_ptr, target_end_ptr,
  3869:                                                strictConversion);
  3869: 
  3869:   if (result == conversionOK) {
  3869:     const char *targetPtr = reinterpret_cast<const char *>(target_buffer.get());
 50677:     return targetPtr;
  3869:   }
  3869: 
  3869:   return "";
  3869: }
  3869: 
  3869: }  // namespace google_breakpad
