42200: /* ***** BEGIN LICENSE BLOCK *****
42200:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42200:  *
42200:  * The contents of this file are subject to the Mozilla Public License Version
42200:  * 1.1 (the "License"); you may not use this file except in compliance with
42200:  * the License. You may obtain a copy of the License at
42200:  * http://www.mozilla.org/MPL/
42200:  *
42200:  * Software distributed under the License is distributed on an "AS IS" basis,
42200:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42200:  * for the specific language governing rights and limitations under the
42200:  * License.
42200:  *
42200:  * The Original Code is libpref
42200:  *
42200:  * The Initial Developer of the Original Code is Collabora ltd.
42200:  * Portions created by the Initial Developer are Copyright (C) 2007
42200:  * the Initial Developer. All Rights Reserved.
42200:  *
42200:  * Contributor(s):
42200:  *   Frederic Plourde <frederic.plourde@collabora.co.uk>
42200:  *
42200:  * Alternatively, the contents of this file may be used under the terms of
42200:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42200:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42200:  * in which case the provisions of the GPL or the LGPL are applicable instead
42200:  * of those above. If you wish to allow use of your version of this file only
42200:  * under the terms of either the GPL or the LGPL, and not to allow others to
42200:  * use your version of this file under the terms of the MPL, indicate your
42200:  * decision by deleting the provisions above and replace them with the notice
42200:  * and other provisions required by the GPL or the LGPL. If you do not delete
42200:  * the provisions above, a recipient may use your version of this file under
42200:  * the terms of any one of the MPL, the GPL or the LGPL.
42200:  *
42200:  * ***** END LICENSE BLOCK ***** */
42200: 
42200: const PREF_INVALID = 0;
42200: const PREF_BOOL    = 128;
42200: const PREF_INT     = 64;
42200: const PREF_STRING  = 32;
42200: 
42200: function makeList(a)
42200: {
42200:   var o = {};
42200:   for(var i=0; i<a.length; i++)
42200:   {
42200:     o[a[i]] = '';
42200:   }
42200:   return o;
42200: }
42200: 
42200: function run_test() {
42200: 
42200:   var ps = Cc["@mozilla.org/preferences-service;1"].
42200:             getService(Ci.nsIPrefService);
42200: 
42200:   var pb2= Cc["@mozilla.org/preferences-service;1"].
42200:             getService(Ci.nsIPrefBranch2);
42200: 
42200:   var pb = Cc["@mozilla.org/preferences-service;1"].
42200:             getService(Ci.nsIPrefBranch);
42200: 
42200:   //**************************************************************************//
55147:   // Nullsafety
55147: 
55147:   do_check_throws(function() {
55147:     pb.getPrefType(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.getBoolPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.setBoolPref(null, false); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.getIntPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.setIntPref(null, 0); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.getCharPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.setCharPref(null, null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.getComplexValue(null, Components.interfaces.nsISupportsString); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.setComplexValue(null, Components.interfaces.nsISupportsString, pb); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.clearUserPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.prefHasUserValue(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.lockPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.prefIsLocked(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.unlockPref(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.deleteBranch(null); },  Cr.NS_ERROR_INVALID_ARG);
55147:   do_check_throws(function() {
55147:     pb.getChildList(null); },  Cr.NS_ERROR_INVALID_ARG);
55147: 
55147:   //**************************************************************************//
42200:   // Nonexisting user preferences
42200: 
42200:   do_check_eq(pb.prefHasUserValue("UserPref.nonexistent.hasUserValue"), false);
42200:   do_check_throws(function() {
42200:     pb.clearUserPref("UserPref.nonexistent.clearUserPref");},  Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_eq(pb.getPrefType("UserPref.nonexistent.getPrefType"), PREF_INVALID);
42200:   do_check_eq(pb.root, "");
42200: 
42200:   // bool...
42200:   do_check_throws(function() {
42200:     pb.getBoolPref("UserPref.nonexistent.getBoolPref");}, Cr.NS_ERROR_UNEXPECTED);
42200:   pb.setBoolPref("UserPref.nonexistent.setBoolPref", false);
42200:   do_check_eq(pb.getBoolPref("UserPref.nonexistent.setBoolPref"), false);
42200: 
42200:   // int...
42200:   do_check_throws(function() {
42200:     pb.getIntPref("UserPref.nonexistent.getIntPref");}, Cr.NS_ERROR_UNEXPECTED);
42200:   pb.setIntPref("UserPref.nonexistent.setIntPref", 5);
42200:   do_check_eq(pb.getIntPref("UserPref.nonexistent.setIntPref"), 5);
42200: 
42200:   // char
42200:   do_check_throws(function() {
42200:     pb.getCharPref("UserPref.nonexistent.getCharPref");}, Cr.NS_ERROR_UNEXPECTED);
42200:   pb.setCharPref("UserPref.nonexistent.setCharPref", "_test");
42200:   do_check_eq(pb.getCharPref("UserPref.nonexistent.setCharPref"), "_test");
42200: 
42200:   //**************************************************************************//
42200:   // Existing user Prefs and data integrity test (round-trip match)
42200: 
42200:   pb.setBoolPref("UserPref.existing.bool", true);
42200:   pb.setIntPref("UserPref.existing.int", 23);
42200:   pb.setCharPref("UserPref.existing.char", "hey");
42200: 
42200:   // getPref should return the pref value
42200:   do_check_eq(pb.getBoolPref("UserPref.existing.bool"), true);
42200:   do_check_eq(pb.getIntPref("UserPref.existing.int"), 23);
42200:   do_check_eq(pb.getCharPref("UserPref.existing.char"), "hey");
42200: 
42200:   // setPref should not complain and should change the value of the pref
42200:   pb.setBoolPref("UserPref.existing.bool", false);
42200:   do_check_eq(pb.getBoolPref("UserPref.existing.bool"), false);
42200:   pb.setIntPref("UserPref.existing.int", 24);
42200:   do_check_eq(pb.getIntPref("UserPref.existing.int"), 24);
42200:   pb.setCharPref("UserPref.existing.char", "hej då!");
42200:   do_check_eq(pb.getCharPref("UserPref.existing.char"), "hej då!");
42200: 
42200:   // prefHasUserValue should return true now
42200:   do_check_true(pb.prefHasUserValue("UserPref.existing.bool"));
42200:   do_check_true(pb.prefHasUserValue("UserPref.existing.int"));
42200:   do_check_true(pb.prefHasUserValue("UserPref.existing.char"));
42200: 
42200:   // clearUserPref should remove the pref
42200:   pb.clearUserPref("UserPref.existing.bool");
42200:   do_check_false(pb.prefHasUserValue("UserPref.existing.bool"));
42200:   pb.clearUserPref("UserPref.existing.int");
42200:   do_check_false(pb.prefHasUserValue("UserPref.existing.int"));
42200:   pb.clearUserPref("UserPref.existing.char");
42200:   do_check_false(pb.prefHasUserValue("UserPref.existing.char"));
42200: 
42200:   //**************************************************************************//
42200:   // getPrefType test
42200: 
42200:   // bool...
42200:   pb.setBoolPref("UserPref.getPrefType.bool", true);
42200:   do_check_eq(pb.getPrefType("UserPref.getPrefType.bool"), PREF_BOOL);
42200: 
42200:   // int...
42200:   pb.setIntPref("UserPref.getPrefType.int", -234);
42200:   do_check_eq(pb.getPrefType("UserPref.getPrefType.int"), PREF_INT);
42200: 
42200:   // char...
42200:   pb.setCharPref("UserPref.getPrefType.char", "testing1..2");
42200:   do_check_eq(pb.getPrefType("UserPref.getPrefType.char"), PREF_STRING);
42200: 
42200:   //**************************************************************************//
42200:   // getBranch tests
42200:   
42200:   do_check_eq(ps.root, "");
42200: 
42200:   // bool ...
42200:   pb.setBoolPref("UserPref.root.boolPref", true);
42200:   let pb_1 = ps.getBranch("UserPref.root.");
42200:   do_check_eq(pb_1.getBoolPref("boolPref"), true);
42200:   let pb_2 = ps.getBranch("UserPref.root.boolPref");
42200:   do_check_eq(pb_2.getBoolPref(""), true);
42200:   pb_2.setBoolPref(".anotherPref", false);
42200:   let pb_3 = ps.getBranch("UserPref.root.boolPre");
42200:   do_check_eq(pb_3.getBoolPref("f.anotherPref"), false);
42200: 
42200:   // int ...
42200:   pb.setIntPref("UserPref.root.intPref", 23);
42200:   let pb_1 = ps.getBranch("UserPref.root.");
42200:   do_check_eq(pb_1.getIntPref("intPref"), 23);
42200:   let pb_2 = ps.getBranch("UserPref.root.intPref");
42200:   do_check_eq(pb_2.getIntPref(""), 23);
42200:   pb_2.setIntPref(".anotherPref", 69);
42200:   let pb_3 = ps.getBranch("UserPref.root.intPre");
42200:   do_check_eq(pb_3.getIntPref("f.anotherPref"), 69);
42200: 
42200:   // char...
42200:   pb.setCharPref("UserPref.root.charPref", "_char");
42200:   let pb_1 = ps.getBranch("UserPref.root.");
42200:   do_check_eq(pb_1.getCharPref("charPref"), "_char");
42200:   let pb_2 = ps.getBranch("UserPref.root.charPref");
42200:   do_check_eq(pb_2.getCharPref(""), "_char");
42200:   pb_2.setCharPref(".anotherPref", "_another");
42200:   let pb_3 = ps.getBranch("UserPref.root.charPre");
42200:   do_check_eq(pb_3.getCharPref("f.anotherPref"), "_another");
42200: 
42200:   //**************************************************************************//
42200:   // getChildlist tests
42200: 
42200:   // get an already set prefBranch
42200:   pb1 = ps.getBranch("UserPref.root.");
42200:   let prefList = pb1.getChildList("");
42200:   do_check_eq(prefList.length, 6);
42200: 
42200:   // check for specific prefs in the array : the order is not important
42200:   do_check_true("boolPref" in makeList(prefList));
42200:   do_check_true("intPref" in makeList(prefList));
42200:   do_check_true("charPref" in makeList(prefList));
42200:   do_check_true("boolPref.anotherPref" in makeList(prefList));
42200:   do_check_true("intPref.anotherPref" in makeList(prefList));
42200:   do_check_true("charPref.anotherPref" in makeList(prefList));
42200: 
42200:   //**************************************************************************//
42200:   // Default branch tests
42200: 
42200:   // bool...
42200:   pb1 = ps.getDefaultBranch("");
42200:   pb1.setBoolPref("DefaultPref.bool", true);
42200:   do_check_eq(pb1.getBoolPref("DefaultPref.bool"), true);  
42200:   do_check_false(pb1.prefHasUserValue("DefaultPref.bool"));
42200:   ps.setBoolPref("DefaultPref.bool", false);
42200:   do_check_true(pb1.prefHasUserValue("DefaultPref.bool"));
42200:   do_check_eq(ps.getBoolPref("DefaultPref.bool"), false); 
42200: 
42200:   // int...
42200:   pb1 = ps.getDefaultBranch("");
42200:   pb1.setIntPref("DefaultPref.int", 100);
42200:   do_check_eq(pb1.getIntPref("DefaultPref.int"), 100);  
42200:   do_check_false(pb1.prefHasUserValue("DefaultPref.int"));
42200:   ps.setIntPref("DefaultPref.int", 50);
42200:   do_check_true(pb1.prefHasUserValue("DefaultPref.int"));
42200:   do_check_eq(ps.getIntPref("DefaultPref.int"), 50); 
42200: 
42200:   // char...
42200:   pb1 = ps.getDefaultBranch("");
42200:   pb1.setCharPref("DefaultPref.char", "_default");
42200:   do_check_eq(pb1.getCharPref("DefaultPref.char"), "_default");  
42200:   do_check_false(pb1.prefHasUserValue("DefaultPref.char"));
42200:   ps.setCharPref("DefaultPref.char", "_user");
42200:   do_check_true(pb1.prefHasUserValue("DefaultPref.char"));
42200:   do_check_eq(ps.getCharPref("DefaultPref.char"), "_user"); 
42200: 
42200:   //**************************************************************************//
42200:   // pref Locking/Unlocking tests
42200: 
42200:   // locking and unlocking a nonexistent pref should throw
42200:   do_check_throws(function() {
42200:     ps.lockPref("DefaultPref.nonexistent");}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     ps.unlockPref("DefaultPref.nonexistent");}, Cr.NS_ERROR_UNEXPECTED);
42200: 
42200:   // getting a locked pref branch should return the "default" value
42200:   do_check_false(ps.prefIsLocked("DefaultPref.char"));
42200:   ps.lockPref("DefaultPref.char");
42200:   do_check_eq(ps.getCharPref("DefaultPref.char"), "_default"); 
42200:   do_check_true(ps.prefIsLocked("DefaultPref.char"));
42200: 
42200:   // getting an unlocked pref branch should return the "user" value 
42200:   ps.unlockPref("DefaultPref.char");
42200:   do_check_eq(ps.getCharPref("DefaultPref.char"), "_user"); 
42200:   do_check_false(ps.prefIsLocked("DefaultPref.char"));
42200: 
42200:   // setting the "default" value to a user pref branch should
42200:   // make prefHasUserValue return false (documented behavior)
42200:   ps.setCharPref("DefaultPref.char", "_default");
42200:   do_check_false(pb1.prefHasUserValue("DefaultPref.char"));
42200: 
42200:   // unlocking and locking multiple times shouldn't throw
42200:   ps.unlockPref("DefaultPref.char");
42200:   ps.lockPref("DefaultPref.char");
42200:   ps.lockPref("DefaultPref.char");
42200: 
42200:   //**************************************************************************//
42200:   // resetBranch test
42200: 
42200:   // NOT IMPLEMENTED YET in module/libpref. So we're not testing !
42200:   // uncomment the following if resetBranch ever gets implemented.
42200:   /*ps.resetBranch("DefaultPref");
42200:   do_check_eq(ps.getBoolPref("DefaultPref.bool"), true);
42200:   do_check_eq(ps.getIntPref("DefaultPref.int"), 100);
42200:   do_check_eq(ps.getCharPref("DefaultPref.char"), "_default");*/
42200: 
42200:   //**************************************************************************//
42200:   // deleteBranch tests
42200: 
42200:   // TODO : Really, this should throw!, by documentation.
42200:   // do_check_throws(function() {
42200:   // ps.deleteBranch("UserPref.nonexistent.deleteBranch");}, Cr.NS_ERROR_UNEXPECTED);
42200: 
42200:   ps.deleteBranch("DefaultPref");
42200:   pb = ps.getBranch("DefaultPref");
42200:   pb1 = ps.getDefaultBranch("DefaultPref");
42200: 
42200:   // getting prefs on deleted user branches should throw
42200:   do_check_throws(function() {
42200:     pb.getBoolPref("DefaultPref.bool");}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     pb.getIntPref("DefaultPref.int");}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     pb.getCharPref("DefaultPref.char");}, Cr.NS_ERROR_UNEXPECTED);
42200: 
42200:   // getting prefs on deleted default branches should throw
42200:   do_check_throws(function() {
42200:     pb1.getBoolPref("DefaultPref.bool");}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     pb1.getIntPref("DefaultPref.int");}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     pb1.getCharPref("DefaultPref.char");}, Cr.NS_ERROR_UNEXPECTED);
42200: 
42200:   //**************************************************************************//
42200:   // savePrefFile & readPrefFile tests
42200: 
42200:   // set some prefs
42200:   ps.setBoolPref("ReadPref.bool", true);
42200:   ps.setIntPref("ReadPref.int", 230);
42200:   ps.setCharPref("ReadPref.char", "hello");
42200: 
42200:   // save those prefs in a file
42200:   let savePrefFile = do_get_cwd();
42200:   savePrefFile.append("data");
42200:   savePrefFile.append("savePref.js");
42200:   if (savePrefFile.exists())
42200:     savePrefFile.remove(false);
42200:   savePrefFile.create(Ci.nsIFile.NORMAL_FILE_TYPE, 0666);
42200:   ps.savePrefFile(savePrefFile);
42200:   ps.resetPrefs();
42200: 
42200:   // load a preexisting pref file
42200:   let prefFile = do_get_file("data/testPref.js");
42200:   ps.readUserPrefs(prefFile);
42200: 
42200:   // former prefs should have been replaced/lost
42200:   do_check_throws(function() {
42200:     do_check_eq(pb.getBoolPref("ReadPref.bool"));}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     do_check_eq(pb.getIntPref("ReadPref.int"));}, Cr.NS_ERROR_UNEXPECTED);
42200:   do_check_throws(function() {
42200:     do_check_eq(pb.getCharPref("ReadPref.char"));}, Cr.NS_ERROR_UNEXPECTED);
42200: 
42200:   // loaded prefs should read ok.
42200:   pb = ps.getBranch("testPref.");
42200:   do_check_eq(pb.getBoolPref("bool1"), true);
42200:   do_check_eq(pb.getBoolPref("bool2"), false);
42200:   do_check_eq(pb.getIntPref("int1"), 23);
42200:   do_check_eq(pb.getIntPref("int2"), -1236);
42200:   do_check_eq(pb.getCharPref("char1"), "_testPref");
42200:   do_check_eq(pb.getCharPref("char2"), "älskar");
42200: 
42200:   // loading our former savePrefFile should allow us to read former prefs
42200:   ps.readUserPrefs(savePrefFile);
42200:   do_check_eq(ps.getBoolPref("ReadPref.bool"), true);
42200:   do_check_eq(ps.getIntPref("ReadPref.int"), 230);
42200:   do_check_eq(ps.getCharPref("ReadPref.char"), "hello");
42200: 
42200:   // ... and still be able to access "prior-to-readUserPrefs" preferences
42200:   do_check_eq(pb.getBoolPref("bool1"), true);
42200:   do_check_eq(pb.getBoolPref("bool2"), false);
42200:   do_check_eq(pb.getIntPref("int1"), 23);
42200: 
42200:   //**************************************************************************//
42200:   // preference Observers
42200: 
42200:   // an observer...
42200:   var observer = {
42200:     QueryInterface: function QueryInterface(aIID) {
42200:       if (aIID.equals(Ci.nsIObserver) ||
42200:           aIID.equals(Ci.nsISupports))
42200:          return this;
42200:       throw Components.results.NS_NOINTERFACE;
42200:     },
42200: 
42200:     observe: function observe(aSubject, aTopic, aState) {
42200:       do_check_eq(aTopic, "nsPref:changed");
42200:       do_check_eq(aState, "ReadPref.int");
42200:       do_check_eq(ps.getIntPref(aState), 76);
42200:       ps.removeObserver("ReadPref.int", this);
42200: 
42200:       // notification received, we may go on...
42200:       do_test_finished();
42200:     }
42200:   }
42200: 
42200:   pb2.addObserver("ReadPref.int", observer, false);
42200:   ps.setIntPref("ReadPref.int", 76);
42200: 
42200:   // test will continue upon notification...
42200:   do_test_pending();
42200: 
42200:   // removed observer should not fire
42200:   pb2.removeObserver("ReadPref.int", observer);
42200:   ps.setIntPref("ReadPref.int", 32);
42200: 
42200:   // let's test observers once more with a non-root prefbranch
42200:   pb2.getBranch("ReadPref.");
42200:   pb2.addObserver("int", observer, false);
42200:   ps.setIntPref("ReadPref.int", 76);
42200: 
42200:   // test will complete upon notification...
42200:   do_test_pending();
42200: }
