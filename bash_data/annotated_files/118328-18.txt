  3869: // Copyright (c) 2006, Google Inc.
  3869: // All rights reserved.
  3869: //
  3869: // Redistribution and use in source and binary forms, with or without
  3869: // modification, are permitted provided that the following conditions are
  3869: // met:
  3869: //
  3869: //     * Redistributions of source code must retain the above copyright
  3869: // notice, this list of conditions and the following disclaimer.
  3869: //     * Redistributions in binary form must reproduce the above
  3869: // copyright notice, this list of conditions and the following disclaimer
  3869: // in the documentation and/or other materials provided with the
  3869: // distribution.
  3869: //     * Neither the name of Google Inc. nor the names of its
  3869: // contributors may be used to endorse or promote products derived from
  3869: // this software without specific prior written permission.
  3869: //
  3869: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  3869: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  3869: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  3869: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  3869: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  3869: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  3869: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  3869: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  3869: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  3869: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  3869: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  3869: 
  3869: // macho_id.h: Functions to gather identifying information from a macho file
  3869: //
  3869: // Author: Dan Waylonis
  3869: 
  3869: #ifndef COMMON_MAC_MACHO_ID_H__
  3869: #define COMMON_MAC_MACHO_ID_H__
  3869: 
  3869: #include <limits.h>
118328: #include <mach/machine.h>
  3869: #include <mach-o/loader.h>
  3869: 
114869: #include "common/mac/macho_walker.h"
 57961: #include "common/md5.h"
 57961: 
  3869: namespace MacFileUtilities {
  3869: 
  3869: class MachoID {
  3869:  public:
  3869:   MachoID(const char *path);
114869:   MachoID(const char *path, void *memory, size_t size);
  3869:   ~MachoID();
  3869: 
118328:   // For the given |cpu_type| and |cpu_subtype|, return a UUID from the LC_UUID
118328:   // command.
  3869:   // Return false if there isn't a LC_UUID command.
118328:   bool UUIDCommand(cpu_type_t cpu_type,
118328:                    cpu_subtype_t cpu_subtype,
118328:                    unsigned char identifier[16]);
  3869: 
118328:   // For the given |cpu_type| and |cpu_subtype|, return a UUID from the
118328:   // LC_ID_DYLIB command.
  3869:   // Return false if there isn't a LC_ID_DYLIB command.
118328:   bool IDCommand(cpu_type_t cpu_type,
118328:                  cpu_subtype_t cpu_subtype,
118328:                  unsigned char identifier[16]);
  3869: 
118328:   // For the given |cpu_type| and |cpu_subtype|, return the Adler32 CRC for the
118328:   // mach-o data segment(s).
  3869:   // Return 0 on error (e.g., if the file is not a mach-o file)
118328:   uint32_t Adler32(cpu_type_t cpu_type,
118328:                    cpu_subtype_t cpu_subtype);
  3869: 
118328:   // For the given |cpu_type|, and |cpu_subtype| return the MD5 for the mach-o
118328:   // data segment(s).
  3869:   // Return true on success, false otherwise
118328:   bool MD5(cpu_type_t cpu_type,
118328:            cpu_subtype_t cpu_subtype,
118328:            unsigned char identifier[16]);
  3869: 
  3869:  private:
  3869:   // Signature of class member function to be called with data read from file
  3869:   typedef void (MachoID::*UpdateFunction)(unsigned char *bytes, size_t size);
  3869: 
  3869:   // Update the CRC value by examining |size| |bytes| and applying the algorithm
  3869:   // to each byte.
  3869:   void UpdateCRC(unsigned char *bytes, size_t size);
  3869: 
  3869:   // Update the MD5 value by examining |size| |bytes| and applying the algorithm
  3869:   // to each byte.
  3869:   void UpdateMD5(unsigned char *bytes, size_t size);
  3869: 
  3869:   // Bottleneck for update routines
 50677:   void Update(MachoWalker *walker, off_t offset, size_t size);
  3869: 
114869:   // Factory for the MachoWalker
118328:   bool WalkHeader(cpu_type_t cpu_type, cpu_subtype_t cpu_subtype,
118328:                   MachoWalker::LoadCommandCallback callback, void *context);
114869: 
 74646:   // The callback from the MachoWalker for CRC and MD5
  3869:   static bool WalkerCB(MachoWalker *walker, load_command *cmd, off_t offset,
  3869:                        bool swap, void *context);
  3869: 
  3869:   // The callback from the MachoWalker for LC_UUID
  3869:   static bool UUIDWalkerCB(MachoWalker *walker, load_command *cmd, off_t offset,
  3869:                            bool swap, void *context);
  3869: 
  3869:   // The callback from the MachoWalker for LC_ID_DYLIB
  3869:   static bool IDWalkerCB(MachoWalker *walker, load_command *cmd, off_t offset,
  3869:                          bool swap, void *context);
  3869: 
  3869:   // File path
  3869:   char path_[PATH_MAX];
  3869: 
114869:   // Memory region to read from
114869:   void *memory_;
114869: 
114869:   // Size of the memory region
114869:   size_t memory_size_;
  3869: 
  3869:   // The current crc value
  3869:   uint32_t crc_;
  3869: 
  3869:   // The MD5 context
 82975:   google_breakpad::MD5Context md5_context_;
  3869: 
  3869:   // The current update to call from the Update callback
  3869:   UpdateFunction update_function_;
  3869: };
  3869: 
  3869: }  // namespace MacFileUtilities
  3869: 
  3869: #endif  // COMMON_MAC_MACHO_ID_H__
