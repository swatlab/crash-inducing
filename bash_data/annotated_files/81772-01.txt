70158: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
70158: /* vim: set ts=2 et sw=2 tw=80: */
70158: /* ***** BEGIN LICENSE BLOCK *****
70158:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
70158:  *
70158:  * The contents of this file are subject to the Mozilla Public License Version
70158:  * 1.1 (the "License"); you may not use this file except in compliance with
70158:  * the License. You may obtain a copy of the License at
70158:  * http://www.mozilla.org/MPL/
70158:  *
70158:  * Software distributed under the License is distributed on an "AS IS" basis,
70158:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
70158:  * for the specific language governing rights and limitations under the
70158:  * License.
70158:  *
70158:  * The Original Code is mozilla.org code.
70158:  *
70158:  * The Initial Developer of the Original Code is
70158:  * the Mozilla Foundation.
70158:  * Portions created by the Initial Developer are Copyright (C) 2011
70158:  * the Initial Developer. All Rights Reserved.
70158:  *
70158:  * Contributor(s):
70158:  *   William Chen <wchen@mozilla.com> (Original Author)
70158:  *
70158:  * Alternatively, the contents of this file may be used under the terms of
70158:  * either the GNU General Public License Version 2 or later (the "GPL"), or
70158:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
70158:  * in which case the provisions of the GPL or the LGPL are applicable instead
70158:  * of those above. If you wish to allow use of your version of this file only
70158:  * under the terms of either the GPL or the LGPL, and not to allow others to
70158:  * use your version of this file under the terms of the MPL, indicate your
70158:  * decision by deleting the provisions above and replace them with the notice
70158:  * and other provisions required by the GPL or the LGPL. If you do not delete
70158:  * the provisions above, a recipient may use your version of this file under
70158:  * the terms of any one of the MPL, the GPL or the LGPL.
70158:  *
70158:  * ***** END LICENSE BLOCK ***** */
70158: 
70158: #include "nsDOMStringMap.h"
70158: 
80058: #include "nsDOMClassInfoID.h"
70158: #include "nsGenericHTMLElement.h"
70158: #include "nsContentUtils.h"
70158: 
70158: DOMCI_DATA(DOMStringMap, nsDOMStringMap)
70158: 
70158: NS_IMPL_CYCLE_COLLECTION_CLASS(nsDOMStringMap)
70158: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(nsDOMStringMap)
70158: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mElement)
70158: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
70158: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsDOMStringMap)
81772:   // Check that mElement exists in case the unlink code is run more than once.
81772:   if (tmp->mElement) {
70158:     // Call back to element to null out weak reference to this object.
70158:     tmp->mElement->ClearDataset();
70158:     tmp->mElement = nsnull;
81772:   }
70158: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
70158: 
70158: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(nsDOMStringMap)
70158:   NS_INTERFACE_MAP_ENTRY(nsIDOMDOMStringMap)
70158:   NS_INTERFACE_MAP_ENTRY(nsISupports)
70158:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(DOMStringMap)
70158: NS_INTERFACE_MAP_END
70158: 
70158: NS_IMPL_CYCLE_COLLECTING_ADDREF(nsDOMStringMap)
70158: NS_IMPL_CYCLE_COLLECTING_RELEASE(nsDOMStringMap)
70158: 
70158: nsDOMStringMap::nsDOMStringMap(nsGenericHTMLElement* aElement)
70158:   : mElement(aElement),
80486:     mRemovingProp(false)
70158: {
70158: }
70158: 
70158: nsDOMStringMap::~nsDOMStringMap()
70158: {
70158:   // Check if element still exists, may have been unlinked by cycle collector.
70158:   if (mElement) {
70158:     // Call back to element to null out weak reference to this object.
70158:     mElement->ClearDataset();
70158:   }
70158: }
70158: 
70158: class nsDOMStringMapRemoveProp : public nsRunnable {
70158: public:
70158:   nsDOMStringMapRemoveProp(nsDOMStringMap* aDataset, nsIAtom* aProperty)
70158:   : mDataset(aDataset),
70158:     mProperty(aProperty)
70158:   {
70158:   }
70158: 
70158:   NS_IMETHOD Run()
70158:   {
70158:     return mDataset->RemovePropInternal(mProperty);
70158:   }
70158: 
70158:   virtual ~nsDOMStringMapRemoveProp()
70158:   {
70158:   }
70158: 
70158: protected:
70158:   nsRefPtr<nsDOMStringMap> mDataset;
70158:   nsCOMPtr<nsIAtom> mProperty;
70158: };
70158: 
70158: /* [notxpcom] boolean hasDataAttr (in DOMString prop); */
79445: NS_IMETHODIMP_(bool) nsDOMStringMap::HasDataAttr(const nsAString& aProp)
70158: {
70158:   nsAutoString attr;
70158:   if (!DataPropToAttr(aProp, attr)) {
80486:     return false;
70158:   }
70158: 
70158:   nsCOMPtr<nsIAtom> attrAtom = do_GetAtom(attr);
70158:   if (!attrAtom) {
80486:     return false;
70158:   }
70158: 
70158:   return mElement->HasAttr(kNameSpaceID_None, attrAtom);
70158: }
70158: 
70158: /* [noscript] DOMString getDataAttr (in DOMString prop); */
70158: NS_IMETHODIMP nsDOMStringMap::GetDataAttr(const nsAString& aProp,
70158:                                           nsAString& aResult NS_OUTPARAM)
70158: {
70158:   nsAutoString attr;
70158: 
70158:   if (!DataPropToAttr(aProp, attr)) {
80486:     aResult.SetIsVoid(true);
70158:     return NS_OK;
70158:   }
70158: 
70158:   nsCOMPtr<nsIAtom> attrAtom = do_GetAtom(attr);
70158:   NS_ENSURE_TRUE(attrAtom, NS_ERROR_OUT_OF_MEMORY);
70158: 
70158:   if (!mElement->GetAttr(kNameSpaceID_None, attrAtom, aResult)) {
80486:     aResult.SetIsVoid(true);
70158:     return NS_OK;
70158:   }
70158: 
70158:   return NS_OK;
70158: }
70158: 
70158: /* [noscript] void setDataAttr (in DOMString prop, in DOMString value); */
70158: NS_IMETHODIMP nsDOMStringMap::SetDataAttr(const nsAString& aProp,
70158:                                           const nsAString& aValue)
70158: {
70158:   nsAutoString attr;
70158:   NS_ENSURE_TRUE(DataPropToAttr(aProp, attr), NS_ERROR_DOM_SYNTAX_ERR);
70158: 
80486:   nsresult rv = nsContentUtils::CheckQName(attr, false);
70158:   NS_ENSURE_SUCCESS(rv, rv);
70158: 
70158:   nsCOMPtr<nsIAtom> attrAtom = do_GetAtom(attr);
70158:   NS_ENSURE_TRUE(attrAtom, NS_ERROR_OUT_OF_MEMORY);
70158: 
80486:   return mElement->SetAttr(kNameSpaceID_None, attrAtom, aValue, true);
70158: }
70158: 
70158: /* [notxpcom] void removeDataAttr (in DOMString prop); */
70158: NS_IMETHODIMP_(void) nsDOMStringMap::RemoveDataAttr(const nsAString& aProp)
70158: {
70158:   // Currently removing property, attribute is already removed.
70158:   if (mRemovingProp) {
70158:     return;
70158:   }
70158:   
70158:   nsAutoString attr;
70158:   if (!DataPropToAttr(aProp, attr)) {
70158:     return;
70158:   }
70158: 
70158:   nsCOMPtr<nsIAtom> attrAtom = do_GetAtom(attr);
70158:   if (!attrAtom) {
70158:     return;
70158:   }
70158: 
80486:   mElement->UnsetAttr(kNameSpaceID_None, attrAtom, true);
70158: }
70158: 
70158: nsGenericHTMLElement* nsDOMStringMap::GetElement()
70158: {
70158:   return mElement;
70158: }
70158: 
70158: /* [notxpcom] void removeProp (in nsIAtom attr); */
70158: NS_IMETHODIMP_(void) nsDOMStringMap::RemoveProp(nsIAtom* aAttr)
70158: {
70158:   nsContentUtils::AddScriptRunner(new nsDOMStringMapRemoveProp(this, aAttr));
70158: }
70158: 
70158: nsresult nsDOMStringMap::RemovePropInternal(nsIAtom* aAttr)
70158: {
70158:   nsAutoString attr;
70158:   aAttr->ToString(attr);
70158:   nsAutoString prop;
70158:   NS_ENSURE_TRUE(AttrToDataProp(attr, prop), NS_OK);
70158: 
70158:   jsval val;
70158:   JSContext* cx = nsContentUtils::GetCurrentJSContext();
80154:   nsresult rv = nsContentUtils::WrapNative(cx, JS_GetGlobalForScopeChain(cx),
70158:                                            this, &val);
70158:   NS_ENSURE_SUCCESS(rv, rv);
70158: 
70158:   JSAutoEnterCompartment ac;
70158:   if (!ac.enter(cx, JSVAL_TO_OBJECT(val))) {
70158:     return NS_ERROR_FAILURE;
70158:   }
70158: 
70158:   // Guard against infinite recursion. Prevents the stack from looking like
70158:   // ...
70158:   // RemoveProp
70158:   // ...
70158:   // RemoveDataAttr
70158:   // ...
70158:   // RemoveProp
80486:   mRemovingProp = true;
70158:   jsval dummy;
70158:   JS_DeleteUCProperty2(cx, JSVAL_TO_OBJECT(val), prop.get(), prop.Length(),
70158:                        &dummy);
80486:   mRemovingProp = false;
70158: 
70158:   return NS_OK;
70158: }
70158: 
70158: /**
70158:  * Returns a list of dataset properties corresponding to the data
70158:  * attributes on the element.
70158:  */
70158: nsresult nsDOMStringMap::GetDataPropList(nsTArray<nsString>& aResult)
70158: {
70158:   PRUint32 attrCount = mElement->GetAttrCount();
70158: 
70158:   // Iterate through all the attributes and add property
70158:   // names corresponding to data attributes to return array.
70158:   for (PRUint32 i = 0; i < attrCount; ++i) {
70158:     nsAutoString attrString;
70158:     const nsAttrName* attrName = mElement->GetAttrNameAt(i);
70158:     attrName->LocalName()->ToString(attrString);
70158: 
70158:     nsAutoString prop;
70158:     if (!AttrToDataProp(attrString, prop)) {
70158:       continue;
70158:     }
70158: 
70158:     aResult.AppendElement(prop);
70158:   }
70158: 
70158:   return NS_OK;
70158: }
70158: 
70158: /**
70158:  * Converts a dataset property name to the corresponding data attribute name.
70158:  * (ex. aBigFish to data-a-big-fish).
70158:  */
79445: bool nsDOMStringMap::DataPropToAttr(const nsAString& aProp,
70158:                                       nsAString& aResult)
70158: {
70158:   const PRUnichar* cur = aProp.BeginReading();
70158:   const PRUnichar* end = aProp.EndReading();
70158: 
70158:   // String corresponding to the data attribute on the element.
70158:   nsAutoString attr;
70158:   // Length of attr will be at least the length of the property + 5 for "data-".
70158:   attr.SetCapacity(aProp.Length() + 5);
70158: 
70158:   attr.Append(NS_LITERAL_STRING("data-"));
70158: 
70158:   // Iterate property by character to form attribute name.
70158:   // Return syntax error if there is a sequence of "-" followed by a character
70158:   // in the range "a" to "z".
70158:   // Replace capital characters with "-" followed by lower case character.
70158:   // Otherwise, simply append character to attribute name.
70158:   for (; cur < end; ++cur) {
70158:     const PRUnichar* next = cur + 1;
70158:     if (PRUnichar('-') == *cur && next < end &&
70158:         PRUnichar('a') <= *next && *next <= PRUnichar('z')) {
70158:       // Syntax error if character following "-" is in range "a" to "z".
80486:       return false;
70158:     }
70158: 
70158:     if (PRUnichar('A') <= *cur && *cur <= PRUnichar('Z')) {
70158:       // Uncamel-case characters in the range of "A" to "Z".
70158:       attr.Append(PRUnichar('-'));
70158:       attr.Append(*cur - 'A' + 'a');
70158:     } else {
70158:       attr.Append(*cur);
70158:     }
70158:   }
70158: 
70158:   aResult.Assign(attr);
80486:   return true;
70158: }
70158: 
70158: /**
70158:  * Converts a data attribute name to the corresponding dataset property name.
70158:  * (ex. data-a-big-fish to aBigFish).
70158:  */
79445: bool nsDOMStringMap::AttrToDataProp(const nsAString& aAttr,
70158:                                       nsAString& aResult)
70158: {
70158:   // If the attribute name does not begin with "data-" then it can not be
70158:   // a data attribute.
70158:   if (!StringBeginsWith(aAttr, NS_LITERAL_STRING("data-"))) {
80486:     return false;
70158:   }
70158: 
70158:   // Start reading attribute from first character after "data-".
70158:   const PRUnichar* cur = aAttr.BeginReading() + 5;
70158:   const PRUnichar* end = aAttr.EndReading();
70158: 
70158:   // Dataset property name. Ensure that the string is large enough to store
70158:   // all the characters in the property name.
70158:   nsAutoString prop;
70158: 
70158:   // Iterate through attrName by character to form property name.
70158:   // If there is a sequence of "-" followed by a character in the range "a" to
70158:   // "z" then replace with upper case letter.
70158:   // Otherwise append character to property name.
70158:   for (; cur < end; ++cur) {
70158:     const PRUnichar* next = cur + 1;
70158:     if (PRUnichar('-') == *cur && next < end && 
70158:         PRUnichar('a') <= *next && *next <= PRUnichar('z')) {
70158:       // Upper case the lower case letters that follow a "-".
70158:       prop.Append(*next - 'a' + 'A');
70158:       // Consume character to account for "-" character.
70158:       ++cur;
70158:     } else {
70158:       // Simply append character if camel case is not necessary.
70158:       prop.Append(*cur);
70158:     }
70158:   }
70158: 
70158:   aResult.Assign(prop);
80486:   return true;
70158: }
