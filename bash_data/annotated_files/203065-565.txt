138652: # -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
134447: # vim: set filetype=python:
134447: # This Source Code Form is subject to the terms of the Mozilla Public
134447: # License, v. 2.0. If a copy of the MPL was not distributed with this
134447: # file, You can obtain one at http://mozilla.org/MPL/2.0/.
134447: 
140753: EXPORTS += [
164318:     'DrawMode.h',
140753:     'gfx2DGlue.h',
140753:     'gfx3DMatrix.h',
166678:     'gfxAlphaRecovery.h',
140753:     'gfxASurface.h',
140753:     'gfxBaseSharedMemorySurface.h',
140753:     'gfxBlur.h',
140753:     'gfxCachedTempSurface.h',
140753:     'gfxColor.h',
140753:     'gfxContext.h',
140753:     'gfxDrawable.h',
140753:     'gfxFailure.h',
140753:     'gfxFont.h',
140753:     'gfxFontConstants.h',
140753:     'gfxFontFeatures.h',
182724:     'gfxFontInfoLoader.h',
140753:     'gfxFontTest.h',
140753:     'gfxFontUtils.h',
169638:     'gfxGradientCache.h',
140753:     'gfxImageSurface.h',
140753:     'gfxLineSegment.h',
199329:     'gfxMathTable.h',
140753:     'gfxMatrix.h',
140753:     'gfxPath.h',
140753:     'gfxPattern.h',
140753:     'gfxPlatform.h',
140753:     'gfxPoint.h',
140753:     'gfxPoint3D.h',
140753:     'gfxPointH3D.h',
186824:     'gfxPrefs.h',
140753:     'gfxQuad.h',
140753:     'gfxQuaternion.h',
140753:     'gfxRect.h',
156950:     'gfxReusableImageSurfaceWrapper.h',
156949:     'gfxReusableSharedImageSurfaceWrapper.h',
140753:     'gfxReusableSurfaceWrapper.h',
140753:     'gfxSharedImageSurface.h',
140753:     'gfxSharedQuartzSurface.h',
140753:     'gfxSkipChars.h',
166678:     'gfxSVGGlyphs.h',
140753:     'gfxTeeSurface.h',
140753:     'gfxTypes.h',
140753:     'gfxUserFontSet.h',
140753:     'gfxUtils.h',
166678:     'GraphicsFilter.h',
140753:     'nsSurfaceTexture.h',
166678:     'RoundedRect.h',
140753: ]
140753: 
140753: if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':
140753:     EXPORTS += [
140753:         'gfxAndroidPlatform.h',
144533:         'gfxFT2FontBase.h',
140753:         'gfxFT2Fonts.h',
140753:         'gfxPDFSurface.h',
140753:     ]
166802:     SOURCES += [
145395:         'gfxAndroidPlatform.cpp',
166677:         'gfxFT2FontBase.cpp',
166677:         'gfxFT2FontList.cpp',
145395:         'gfxFT2Fonts.cpp',
145395:         'gfxFT2Utils.cpp',
145395:         'gfxPDFSurface.cpp',
145395:     ]
140753: elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gonk':
140753:     EXPORTS += [
140753:         'gfxAndroidPlatform.h',
144533:         'gfxFT2FontBase.h',
140753:         'gfxFT2Fonts.h',
140753:         'gfxPDFSurface.h',
140753:     ]
166802:     SOURCES += [
145395:         'gfxAndroidPlatform.cpp',
166677:         'gfxFT2FontBase.cpp',
166677:         'gfxFT2FontList.cpp',
145395:         'gfxFT2Fonts.cpp',
145395:         'gfxFT2Utils.cpp',
145395:         'gfxPDFSurface.cpp',
145395:     ]
140753: elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
140753:     EXPORTS += [
140753:         'gfxPlatformMac.h',
140753:         'gfxQuartzImageSurface.h',
140753:         'gfxQuartzNativeDrawing.h',
143060:         'gfxQuartzSurface.h',
140753:     ]
166802:     SOURCES += [
166677:         'gfxCoreTextShaper.cpp',
166677:         'gfxMacFont.cpp',
166677:         'gfxPlatformMac.cpp',
166677:         'gfxQuartzImageSurface.cpp',
166677:         'gfxQuartzNativeDrawing.cpp',
145395:         'gfxQuartzSurface.cpp',
145395:     ]
147026: elif CONFIG['MOZ_WIDGET_GTK']:
140753:     EXPORTS += [
140753:         'gfxFT2FontBase.h',
140753:         'gfxGdkNativeRenderer.h',
176643:         'gfxPangoFonts.h',
140753:         'gfxPDFSurface.h',
166678:         'gfxPlatformGtk.h',
140753:         'gfxPSSurface.h',
140753:     ]
140753: 
166802:     SOURCES += [
166678:         'gfxFontconfigUtils.cpp',
166677:         'gfxFT2FontBase.cpp',
166677:         'gfxFT2Utils.cpp',
145395:         'gfxGdkNativeRenderer.cpp',
176643:         'gfxPangoFonts.cpp',
145395:         'gfxPDFSurface.cpp',
166678:         'gfxPlatformGtk.cpp',
145395:         'gfxPSSurface.cpp',
145395:     ]
145395: 
140753:     if CONFIG['MOZ_X11']:
140753:         EXPORTS += [
142529:             'gfxXlibNativeRenderer.h',
140753:             'gfxXlibSurface.h',
140753:         ]
166802:         SOURCES += [
166677:             'gfxXlibNativeRenderer.cpp',
145395:             'gfxXlibSurface.cpp',
145395:         ]
140753: 
140753: elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'qt':
140753:     EXPORTS += [
140753:         'gfxFT2FontBase.h',
176643:         'gfxPangoFonts.h',
144533:         'gfxPDFSurface.h',
140753:         'gfxQPainterSurface.h',
140753:         'gfxQtNativeRenderer.h',
140753:         'gfxQtPlatform.h',
140753:     ]
166802:     SOURCES += [
166678:         'gfxFontconfigUtils.cpp',
145395:         'gfxFT2FontBase.cpp',
145395:         'gfxFT2Utils.cpp',
176643:         'gfxPangoFonts.cpp',
166677:         'gfxPDFSurface.cpp',
166677:         'gfxQPainterSurface.cpp',
166677:         'gfxQtPlatform.cpp',
145395:     ]
140753: 
140753:     if CONFIG['MOZ_X11']:
140753:         EXPORTS += [
140753:             'gfxXlibSurface.h',
140753:         ]
166802:         SOURCES += [
166677:             'gfxQtNativeRenderer.cpp',
145395:             'gfxXlibSurface.cpp',
145395:         ]
140753: 
140753: elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
140753:     EXPORTS += [
144533:         'gfxD2DSurface.h',
144533:         'gfxDWriteFonts.h',
144533:         'gfxGDIFont.h',
144533:         'gfxGDIFontList.h',
144496:         'gfxPDFSurface.h',
144533:         'gfxPlatformFontList.h',
144533:         'gfxWindowsNativeDrawing.h',
144496:         'gfxWindowsPlatform.h',
144496:         'gfxWindowsSurface.h',
140753:     ]
173416:     # gfxGDIFontList.cpp and gfxGDIShaper.cpp force NSPR logging, so they cannot be built in unified mode.
166802:     SOURCES += [
145395:         'gfxGDIFont.cpp',
145395:         'gfxGDIFontList.cpp',
145395:         'gfxGDIShaper.cpp',
166677:         'gfxPDFSurface.cpp',
145395:         'gfxUniscribeShaper.cpp',
166677:         'gfxWindowsNativeDrawing.cpp',
166677:         'gfxWindowsPlatform.cpp',
166677:         'gfxWindowsSurface.cpp',
145395:     ]
145395:     if CONFIG['MOZ_ENABLE_DWRITE_FONT']:
173416:         # gfxDWriteFontList.cpp forces NSPR logging, so it cannot be built in unified mode.
166802:         SOURCES += [
166677:             'gfxD2DSurface.cpp',
166677:             'gfxDWriteCommon.cpp',
166677:             'gfxDWriteFontList.cpp',
145395:             'gfxDWriteFonts.cpp',
145395:             'gfxDWriteShaper.cpp',
145395:             'gfxDWriteTextAnalysis.cpp',
145395:         ]
145395: 
145395: # Are we targeting x86 or x64?  If so, build gfxAlphaRecoverySSE2.cpp.
145395: if CONFIG['INTEL_ARCHITECTURE']:
190022:     SOURCES += ['gfxAlphaRecoverySSE2.cpp']
190022:     # The file uses SSE2 intrinsics, so it needs special compile flags on some
190022:     # compilers.
193956:     SOURCES['gfxAlphaRecoverySSE2.cpp'].flags += CONFIG['SSE2_FLAGS']
145395: 
166802: SOURCES += [
173416:     # Includes mac system header conflicting with point/size,
173416:     # and includes glxXlibSurface.h which drags in Xrender.h
173416:     'gfxASurface.cpp',
173416:     # on X11, gfxDrawable.cpp includes X headers for an old workaround which
173416:     # we could consider removing soon (affects Ubuntus older than 10.04 LTS)
173416:     # which currently prevent it from joining UNIFIED_SOURCES.
173416:     'gfxDrawable.cpp',
173416:     # Uses FORCE_PR_LOG
173416:     'gfxFont.cpp',
173416:     # Uses FORCE_PR_LOG
173416:     'gfxFontUtils.cpp',
173416:     # Includes mac system header conflicting with point/size, and also uses FORCE_PR_LOG
173416:     'gfxPlatform.cpp',
173416:     # Uses FORCE_PR_LOG
173416:     'gfxPlatformFontList.cpp',
186824:     'gfxPrefs.cpp',
173416:     # Uses FORCE_PR_LOG
173416:     'gfxUserFontSet.cpp',
173416: ]
173416: 
173416: UNIFIED_SOURCES += [
195799:     'CJKCompatSVS.cpp',
145395:     'gfx3DMatrix.cpp',
166678:     'gfxAlphaRecovery.cpp',
145395:     'gfxBaseSharedMemorySurface.cpp',
145395:     'gfxBlur.cpp',
145395:     'gfxCachedTempSurface.cpp',
145395:     'gfxContext.cpp',
145395:     'gfxFontFeatures.cpp',
182724:     'gfxFontInfoLoader.cpp',
145395:     'gfxFontMissingGlyphs.cpp',
145395:     'gfxFontTest.cpp',
169638:     'gfxGradientCache.cpp',
145395:     'gfxGraphiteShaper.cpp',
145395:     'gfxHarfBuzzShaper.cpp',
145395:     'gfxImageSurface.cpp',
199329:     'gfxMathTable.cpp',
145395:     'gfxMatrix.cpp',
145395:     'gfxPath.cpp',
145395:     'gfxPattern.cpp',
145395:     'gfxRect.cpp',
156950:     'gfxReusableImageSurfaceWrapper.cpp',
156949:     'gfxReusableSharedImageSurfaceWrapper.cpp',
145395:     'gfxScriptItemizer.cpp',
145395:     'gfxSkipChars.cpp',
166678:     'gfxSVGGlyphs.cpp',
145395:     'gfxTeeSurface.cpp',
145395:     'gfxUtils.cpp',
145395:     'nsSurfaceTexture.cpp',
197104:     'nsUnicodeRange.cpp',
145395: ]
145395: 
150204: if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
173416:     # gfxMacPlatformFontList.mm forces NSPR logging so it cannot be built in unified mode.
166802:     SOURCES += [
150204:         'gfxMacPlatformFontList.mm',
150204:     ]
157587: 
157587: FAIL_ON_WARNINGS = not CONFIG['_MSC_VER']
157594: 
157600: MSVC_ENABLE_PGO = True
157600: 
158598: LIBRARY_NAME = 'thebes'
158598: 
166713: include('/ipc/chromium/chromium-config.mozbuild')
166713: 
171742: FINAL_LIBRARY = 'xul'
172832: 
172832: GENERATED_FILES = [
186604:     'DeprecatedPremultiplyTables.h',
172832: ]
173525: 
173599: LOCAL_INCLUDES += [
203065:     '/content/xml/document/src',
173599: ]
173599: 
173525: if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('android', 'gtk2', 'gtk3', 'gonk', 'qt'):
173525:     DEFINES['MOZ_ENABLE_FREETYPE'] = True
173525: 
173525: if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
173525:     for var in ('MOZ_ENABLE_D3D9_LAYER', 'MOZ_ENABLE_D3D10_LAYER'):
173525:         if CONFIG[var]:
173525:             DEFINES[var] = True
173525: 
173525: if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':
173525:     # This is set for "normal Android", that is, when Gecko is running on
173525:     # top of the android java runtime.
173525:     DEFINES['MOZ_USING_ANDROID_JAVA_WIDGETS'] = True
173525: 
173525: DEFINES['GRAPHITE2_STATIC'] = True
173525: 
173525: if CONFIG['OS_TARGET'] == 'WINNT':
173525:     DEFINES['OTS_DLL'] = True
