 42402: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 42402: 
 42402: #ifndef GFX_CANVASLAYEROGL_H
 42402: #define GFX_CANVASLAYEROGL_H
 42402: 
 55453: 
 42402: #include "LayerManagerOGL.h"
 42402: #include "gfxASurface.h"
111133: #if defined(MOZ_X11) && !defined(MOZ_PLATFORM_MAEMO)
 67634: #include "GLXLibrary.h"
 67634: #include "mozilla/X11Util.h"
 67634: #endif
 42402: 
108987: #include "mozilla/Preferences.h"
108987: 
 42402: namespace mozilla {
 42402: namespace layers {
 42402: 
 42402: class THEBES_API CanvasLayerOGL :
 42402:   public CanvasLayer,
 42402:   public LayerOGL
 42402: {
 42402: public:
 42402:   CanvasLayerOGL(LayerManagerOGL *aManager)
 42402:     : CanvasLayer(aManager, NULL),
 42402:       LayerOGL(aManager),
115352:       mLayerProgram(gl::RGBALayerProgramType),
 59435:       mTexture(0),
106986:       mTextureTarget(LOCAL_GL_TEXTURE_2D),
 80486:       mDelayedUpdates(false)
111133: #if defined(MOZ_X11) && !defined(MOZ_PLATFORM_MAEMO)
 67634:       ,mPixmap(0)
 67634: #endif
 42402:   { 
 42402:       mImplData = static_cast<LayerOGL*>(this);
108987:       mForceReadback = Preferences::GetBool("webgl.force-layers-readback", false);
 42402:   }
 49072:   ~CanvasLayerOGL() { Destroy(); }
 42402: 
 42402:   // CanvasLayer implementation
 42402:   virtual void Initialize(const Data& aData);
 42402: 
 42402:   // LayerOGL implementation
 49072:   virtual void Destroy();
 42402:   virtual Layer* GetLayer() { return this; }
 42791:   virtual void RenderLayer(int aPreviousFrameBuffer,
 57097:                            const nsIntPoint& aOffset);
 87402:   virtual void CleanupResources();
 42402: 
 42402: protected:
 64540:   void UpdateSurface();
 64540: 
 42791:   nsRefPtr<gfxASurface> mCanvasSurface;
 42791:   nsRefPtr<GLContext> mCanvasGLContext;
 59438:   gl::ShaderProgramType mLayerProgram;
 81280:   RefPtr<gfx::DrawTarget> mDrawTarget;
 42402: 
 42791:   GLuint mTexture;
106986:   GLenum mTextureTarget;
 42402: 
 79445:   bool mDelayedUpdates;
 79445:   bool mGLBufferIsPremultiplied;
 79445:   bool mNeedsYFlip;
108987:   bool mForceReadback;
111133: #if defined(MOZ_X11) && !defined(MOZ_PLATFORM_MAEMO)
 67634:   GLXPixmap mPixmap;
 67634: #endif
 94020: 
 94020:   nsRefPtr<gfxImageSurface> mCachedTempSurface;
 94020:   gfxIntSize mCachedSize;
108747:   gfxASurface::gfxImageFormat mCachedFormat;
 94020: 
108747:   gfxImageSurface* GetTempSurface(const gfxIntSize& aSize,
108747:                                   const gfxASurface::gfxImageFormat aFormat)
 94020:   {
 94020:     if (!mCachedTempSurface ||
 94020:         aSize.width != mCachedSize.width ||
 94020:         aSize.height != mCachedSize.height ||
 94020:         aFormat != mCachedFormat)
 94020:     {
 94020:       mCachedTempSurface = new gfxImageSurface(aSize, aFormat);
 94020:       mCachedSize = aSize;
 94020:       mCachedFormat = aFormat;
 94020:     }
 94020: 
 94020:     return mCachedTempSurface;
 94020:   }
 94020: 
 94020:   void DiscardTempSurface()
 94020:   {
106838:     mCachedTempSurface = nullptr;
 94020:   }
 42402: };
 42402: 
 55453: // NB: eventually we'll have separate shadow canvas2d and shadow
 55453: // canvas3d layers, but currently they look the same from the
 55453: // perspective of the compositor process
 55453: class ShadowCanvasLayerOGL : public ShadowCanvasLayer,
 55453:                              public LayerOGL
 55453: {
 55453:   typedef gl::TextureImage TextureImage;
 55453: 
 55453: public:
 55453:   ShadowCanvasLayerOGL(LayerManagerOGL* aManager);
 55453:   virtual ~ShadowCanvasLayerOGL();
 55453: 
 55453:   // CanvasLayer impl
 55453:   virtual void Initialize(const Data& aData);
 79426:   virtual void Init(const CanvasSurface& aNewFront, bool needYFlip);
 69106: 
 55453:   // This isn't meaningful for shadow canvas.
 55453:   virtual void Updated(const nsIntRect&) {}
 55453: 
 55453:   // ShadowCanvasLayer impl
 79426:   virtual void Swap(const CanvasSurface& aNewFront,
 79426:                     bool needYFlip,
 79426:                     CanvasSurface* aNewBack);
 55453: 
 55453:   virtual void DestroyFrontBuffer();
 55453: 
 60065:   virtual void Disconnect();
 60065: 
 55453:   // LayerOGL impl
 55453:   void Destroy();
 55453:   Layer* GetLayer();
 55453:   virtual void RenderLayer(int aPreviousFrameBuffer,
 57097:                            const nsIntPoint& aOffset);
 87402:   virtual void CleanupResources();
 55453: 
 55453: private:
 55453:   nsRefPtr<TextureImage> mTexImage;
 55453: 
 79445:   bool mNeedsYFlip;
104652:   SurfaceDescriptor mFrontBufferDescriptor;
104652:   GLuint mTexture;
 55453: };
 55453: 
 42402: } /* layers */
 42402: } /* mozilla */
 42402: #endif /* GFX_IMAGELAYEROGL_H */
