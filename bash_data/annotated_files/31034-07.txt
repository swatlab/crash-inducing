16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:  function: basic shared codebook operations
31034:  last mod: $Id: codebook.h 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #ifndef _V_CODEBOOK_H_
16295: #define _V_CODEBOOK_H_
16295: 
16295: #include <ogg/ogg.h>
16295: 
16295: /* This structure encapsulates huffman and VQ style encoding books; it
16295:    doesn't do anything specific to either.
16295: 
16295:    valuelist/quantlist are nonNULL (and q_* significant) only if
16295:    there's entry->value mapping to be done.
16295: 
16295:    If encode-side mapping must be done (and thus the entry needs to be
16295:    hunted), the auxiliary encode pointer will point to a decision
16295:    tree.  This is true of both VQ and huffman, but is mostly useful
16295:    with VQ.
16295: 
16295: */
16295: 
16295: typedef struct static_codebook{
16295:   long   dim;            /* codebook dimensions (elements per vector) */
16295:   long   entries;        /* codebook entries */
16295:   long  *lengthlist;     /* codeword lengths in bits */
16295: 
16295:   /* mapping ***************************************************************/
16295:   int    maptype;        /* 0=none
16295:                             1=implicitly populated values from map column
16295:                             2=listed arbitrary values */
16295: 
16295:   /* The below does a linear, single monotonic sequence mapping. */
16295:   long     q_min;       /* packed 32 bit float; quant value 0 maps to minval */
16295:   long     q_delta;     /* packed 32 bit float; val 1 - val 0 == delta */
16295:   int      q_quant;     /* bits: 0 < quant <= 16 */
16295:   int      q_sequencep; /* bitflag */
16295: 
16295:   long     *quantlist;  /* map == 1: (int)(entries^(1/dim)) element column map
16295:                            map == 2: list of dim*entries quantized entry vals
16295:                         */
16295: 
16295:   /* encode helpers ********************************************************/
16295:   struct encode_aux_nearestmatch *nearest_tree;
16295:   struct encode_aux_threshmatch  *thresh_tree;
16295:   struct encode_aux_pigeonhole  *pigeon_tree;
16295: 
16295:   int allocedp;
16295: } static_codebook;
16295: 
16295: /* this structures an arbitrary trained book to quickly find the
16295:    nearest cell match */
16295: typedef struct encode_aux_nearestmatch{
16295:   /* pre-calculated partitioning tree */
16295:   long   *ptr0;
16295:   long   *ptr1;
16295: 
16295:   long   *p;         /* decision points (each is an entry) */
16295:   long   *q;         /* decision points (each is an entry) */
16295:   long   aux;        /* number of tree entries */
16295:   long   alloc;
16295: } encode_aux_nearestmatch;
16295: 
16295: /* assumes a maptype of 1; encode side only, so that's OK */
16295: typedef struct encode_aux_threshmatch{
16295:   float *quantthresh;
16295:   long   *quantmap;
16295:   int     quantvals;
16295:   int     threshvals;
16295: } encode_aux_threshmatch;
16295: 
16295: typedef struct encode_aux_pigeonhole{
16295:   float min;
16295:   float del;
16295: 
16295:   int  mapentries;
16295:   int  quantvals;
16295:   long *pigeonmap;
16295: 
16295:   long fittotal;
16295:   long *fitlist;
16295:   long *fitmap;
16295:   long *fitlength;
16295: } encode_aux_pigeonhole;
16295: 
16295: typedef struct codebook{
16295:   long dim;           /* codebook dimensions (elements per vector) */
16295:   long entries;       /* codebook entries */
16295:   long used_entries;  /* populated codebook entries */
16295:   const static_codebook *c;
16295: 
16295:   /* for encode, the below are entry-ordered, fully populated */
16295:   /* for decode, the below are ordered by bitreversed codeword and only
16295:      used entries are populated */
16295:   float        *valuelist;  /* list of dim*entries actual entry values */
16295:   ogg_uint32_t *codelist;   /* list of bitstream codewords for each entry */
16295: 
16295:   int          *dec_index;  /* only used if sparseness collapsed */
16295:   char         *dec_codelengths;
16295:   ogg_uint32_t *dec_firsttable;
16295:   int           dec_firsttablen;
16295:   int           dec_maxlength;
16295: 
16295: } codebook;
16295: 
16295: extern void vorbis_staticbook_clear(static_codebook *b);
16295: extern void vorbis_staticbook_destroy(static_codebook *b);
16295: extern int vorbis_book_init_encode(codebook *dest,const static_codebook *source);
16295: extern int vorbis_book_init_decode(codebook *dest,const static_codebook *source);
16295: extern void vorbis_book_clear(codebook *b);
16295: 
16295: extern float *_book_unquantize(const static_codebook *b,int n,int *map);
16295: extern float *_book_logdist(const static_codebook *b,float *vals);
16295: extern float _float32_unpack(long val);
16295: extern long   _float32_pack(float val);
16295: extern int  _best(codebook *book, float *a, int step);
16295: extern int _ilog(unsigned int v);
16295: extern long _book_maptype1_quantvals(const static_codebook *b);
16295: 
16295: extern int vorbis_book_besterror(codebook *book,float *a,int step,int addmul);
16295: extern long vorbis_book_codeword(codebook *book,int entry);
16295: extern long vorbis_book_codelen(codebook *book,int entry);
16295: 
16295: 
16295: 
16295: extern int vorbis_staticbook_pack(const static_codebook *c,oggpack_buffer *b);
16295: extern int vorbis_staticbook_unpack(oggpack_buffer *b,static_codebook *c);
16295: 
16295: extern int vorbis_book_encode(codebook *book, int a, oggpack_buffer *b);
16295: extern int vorbis_book_errorv(codebook *book, float *a);
16295: extern int vorbis_book_encodev(codebook *book, int best,float *a,
16295:                                oggpack_buffer *b);
16295: 
16295: extern long vorbis_book_decode(codebook *book, oggpack_buffer *b);
16295: extern long vorbis_book_decodevs_add(codebook *book, float *a,
16295:                                      oggpack_buffer *b,int n);
16295: extern long vorbis_book_decodev_set(codebook *book, float *a,
16295:                                     oggpack_buffer *b,int n);
16295: extern long vorbis_book_decodev_add(codebook *book, float *a,
16295:                                     oggpack_buffer *b,int n);
16295: extern long vorbis_book_decodevv_add(codebook *book, float **a,
16295:                                      long off,int ch,
16295:                                     oggpack_buffer *b,int n);
16295: 
16295: 
16295: 
16295: #endif
