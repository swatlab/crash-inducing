    1: # ***** BEGIN LICENSE BLOCK *****
    1: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: #
    1: # The contents of this file are subject to the Mozilla Public License Version
    1: # 1.1 (the "License"); you may not use this file except in compliance with
    1: # the License. You may obtain a copy of the License at
    1: # http://www.mozilla.org/MPL/
    1: #
    1: # Software distributed under the License is distributed on an "AS IS" basis,
    1: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: # for the specific language governing rights and limitations under the
    1: # License.
    1: #
    1: # The Original Code is mozilla.org code.
    1: #
    1: # The Initial Developer of the Original Code is
    1: # Netscape Communications Corporation.
    1: # Portions created by the Initial Developer are Copyright (C) 1998
    1: # the Initial Developer. All Rights Reserved.
    1: #
    1: # Contributor(s):
    1: #   Stephen Lamm
    1: #   Benjamin Smedberg <bsmedberg@covad.net>
    1: #   Chase Phillips <chase@mozilla.org>
    1: #   Mark Mentovai <mark@moxienet.com>
    1: #
    1: # Alternatively, the contents of this file may be used under the terms of
    1: # either the GNU General Public License Version 2 or later (the "GPL"), or
    1: # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: # in which case the provisions of the GPL or the LGPL are applicable instead
    1: # of those above. If you wish to allow use of your version of this file only
    1: # under the terms of either the GPL or the LGPL, and not to allow others to
    1: # use your version of this file under the terms of the MPL, indicate your
    1: # decision by deleting the provisions above and replace them with the notice
    1: # and other provisions required by the GPL or the LGPL. If you do not delete
    1: # the provisions above, a recipient may use your version of this file under
    1: # the terms of any one of the MPL, the GPL or the LGPL.
    1: #
    1: # ***** END LICENSE BLOCK *****
    1: 
    1: # Build a mozilla application.
    1: #
    1: # To checkout and build a tree,
    1: #    1. cvs co mozilla/client.mk
    1: #    2. cd mozilla
    1: #    3. create your .mozconfig file with
    1: #       mk_add_options MOZ_CO_PROJECT=
    1: #         suite,browser
    1: #    4. gmake -f client.mk 
    1: #
    1: # This script will pick up the CVSROOT from the CVS/Root file. If you wish
    1: # to use a different CVSROOT, you must set CVSROOT in your environment:
    1: #
    1: #   export CVSROOT=:pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/cvsroot
    1: #   export CVSROOT=:pserver:username%somedomain.org@cvs.mozilla.org:/cvsroot
    1: # 
    1: # You must specify which products/modules you wish to checkout, with
    1: #   MOZ_CO_PROJECT and MOZ_CO_MODULE variables.
    1: #
    1: #   MOZ_CO_PROJECT possibilities include the following:
    1: #     suite (Seamonkey suite)
    1: #     browser (aka Firefox)
    1: #     mail (aka Thunderbird)
    1: #     minimo (small browser for devices)
    1: #     composer (standalone composer, aka NVU)
    1: #     calendar (aka Sunbird, use this to build the calendar extensions also)
    1: #     xulrunner
    1: #     camino
    1: #     tamarin
    1: #
    1: # Other common MOZ_CO_MODULE options include the following:
    1: #   mozilla/other-licenses/libart_lgpl
    1: #   mozilla/other-licenses/bsdiff
    1: #   mozilla/tools/codesighs
    1: #
    1: # Other targets (gmake -f client.mk [targets...]),
    1: #    checkout
    1: #    build
    1: #    clean (realclean is now the same as clean)
    1: #    distclean
    1: #
 8347: # See http://developer.mozilla.org/en/docs/Build_Documentation for 
 8347: # more information.
    1: #
    1: # Options:
    1: #   MOZ_BUILD_PROJECTS   - Build multiple projects in subdirectories
    1: #                          of MOZ_OBJDIR
    1: #   MOZ_OBJDIR           - Destination object directory
    1: #   MOZ_CO_DATE          - Date tag to use for checkout (default: none)
    1: #   MOZ_CO_LOCALES_DATE  - Date tag to use for locale checkout
    1: #                          (default: MOZ_CO_DATE)
    1: #   MOZ_CO_MODULE        - Module to checkout
    1: #   MOZ_CVS_FLAGS        - Flags to pass cvs (default: -q -z3)
    1: #   MOZ_CO_FLAGS         - Flags to pass after 'cvs co' (default: -P)
    1: #   MOZ_MAKE_FLAGS       - Flags to pass to $(MAKE)
    1: #   MOZ_CO_LOCALES       - localizations to pull (MOZ_CO_LOCALES="de-DE,pt-BR")
    1: #   MOZ_LOCALE_DIRS      - directories which contain localizations
    1: #   LOCALES_CVSROOT      - CVSROOT to use to pull localizations
    1: #   MOZ_PREFLIGHT_ALL  } - Makefiles to run before any project in
    1: #   MOZ_PREFLIGHT      }   MOZ_BUILD_PROJECTS, before each project, after
    1: #   MOZ_POSTFLIGHT     }   each project, and after all projects; these
    1: #   MOZ_POSTFLIGHT_ALL }   variables contain space-separated lists
    1: #   MOZ_UNIFY_BDATE      - Set to use the same bdate for each project in
    1: #                          MOZ_BUILD_PROJECTS
    1: #
    1: 
    1: AVAILABLE_PROJECTS = \
    1:   all \
    1:   suite \
    1:   toolkit \
    1:   browser \
    1:   mail \
    1:   minimo \
    1:   composer \
    1:   calendar \
    1:   xulrunner \
    1:   camino \
    1:   necko \
    1:   tamarin \
    1:   $(NULL)
    1: 
    1: # Trailing / on top-level mozilla dir required to stop fast-update thinking
    1: # it is a module name.
    1: MODULES_NS_necko :=                             \
    1:   mozilla/                                      \
    1:   $(NULL)
    1: 
    1: MODULES_necko :=                                \
    1:   mozilla/README                                \
    1:   mozilla/config                                \
    1:   mozilla/build                                 \
    1:   mozilla/intl                                  \
    1:   mozilla/modules/libpref                       \
    1:   mozilla/modules/zlib                          \
    1:   mozilla/netwerk                               \
    1:   mozilla/xpcom                                 \
    1:   mozilla/tools/test-harness                    \
    1:   $(NULL)
    1: 
    1: MODULES_NS_core :=                              \
    1:   $(MODULES_NS_necko)                           \
    1:   mozilla/js                                    \
    1:   mozilla/js/src                                \
    1:   mozilla/js/jsd                                \
    1:   mozilla/db                                    \
    1:   $(NULL)
    1: 
    1: MODULES_core :=                                 \
    1:   $(MODULES_necko)                              \
    1:   mozilla/caps                                  \
    1:   mozilla/content                               \
    1:   mozilla/db/mdb                                \
    1:   mozilla/db/mork                               \
    1:   mozilla/docshell                              \
    1:   mozilla/dom                                   \
    1:   mozilla/editor                                \
    1:   mozilla/embedding                             \
    1:   mozilla/extensions                            \
    1:   mozilla/gfx                                   \
    1:   mozilla/parser                                \
    1:   mozilla/layout                                \
11206:   mozilla/memory/jemalloc                       \
    1:   mozilla/jpeg                                  \
    1:   mozilla/js/src/fdlibm                         \
    1:   mozilla/js/src/liveconnect                    \
    1:   mozilla/js/src/xpconnect                      \
    1:   mozilla/js/jsd/idl                            \
 3791:   mozilla/modules/lcms                          \
    1:   mozilla/modules/libimg                        \
    1:   mozilla/modules/libjar                        \
    1:   mozilla/modules/libpr0n                       \
    1:   mozilla/modules/libreg                        \
    1:   mozilla/modules/libutil                       \
    1:   mozilla/modules/oji                           \
    1:   mozilla/modules/plugin                        \
    1:   mozilla/modules/staticmod                     \
    1:   mozilla/plugin/oji                            \
    1:   mozilla/profile                               \
 6806:   mozilla/probes                                \
    1:   mozilla/rdf                                   \
    1:   mozilla/security/manager                      \
    1:   mozilla/sun-java                              \
    1:   mozilla/ipc/ipcd                              \
    1:   mozilla/modules/libpr0n                       \
    1:   mozilla/modules/libmar                        \
    1:   mozilla/modules/libbz2                        \
    1:   mozilla/accessible                            \
    1:   mozilla/other-licenses/atk-1.0                \
    1:   mozilla/other-licenses/ia2                    \
    1:   mozilla/security/manager                      \
    1:   mozilla/tools/elf-dynstr-gc                   \
    1:   mozilla/uriloader                             \
    1:   mozilla/view                                  \
    1:   mozilla/webshell                              \
    1:   mozilla/widget                                \
    1:   mozilla/xpfe                                  \
    1:   mozilla/xpinstall                             \
    1:   mozilla/toolkit                               \
    1:   mozilla/storage                               \
    1:   mozilla/db/sqlite3                            \
    1:   mozilla/db/morkreader                         \
 8768:   mozilla/testing/crashtest                     \
    1:   mozilla/testing/mochitest                     \
    1:   $(NULL)
    1: 
    1: LOCALES_necko :=                                \
    1:   netwerk                                       \
    1:   $(NULL)
    1: 
    1: LOCALES_core :=                                 \
    1:   $(LOCALES_necko)                              \
    1:   dom                                           \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_necko :=                              \
    1:   mozilla/browser/config/version.txt            \
    1:   mozilla/mail/config/version.txt               \
    1:   mozilla/calendar/sunbird/config/version.txt   \
    1:   mozilla/suite/config/version.txt              \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_core :=                               \
    1:   $(BOOTSTRAP_necko)                            \
    1:   $(NULL)
    1: 
    1: MODULES_NS_toolkit :=                           \
    1:   $(MODULES_NS_core)                            \
    1:   $(NULL)
    1: 
    1: MODULES_toolkit :=                              \
    1:   $(MODULES_core)                               \
    1:   mozilla/chrome                                \
    1:   $(NULL)
    1: 
    1: LOCALES_toolkit :=                              \
    1:   $(LOCALES_core)                               \
    1:   toolkit                                       \
    1:   security/manager                              \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_toolkit :=                            \
    1:   $(BOOTSTRAP_core)                             \
    1:   $(NULL)
    1: 
    1: MODULES_NS_suite :=                             \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_suite :=                                \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/directory/xpcom                       \
    1:   mozilla/mailnews                              \
    1:   mozilla/suite                                 \
 1951:   mozilla/other-licenses/7zstub/seamonkey       \
    1:   $(NULL)
    1: 
    1: LOCALES_suite :=                                \
    1:   $(LOCALES_toolkit)                            \
    1:   suite                                         \
    1:   editor/ui                                     \
    1:   extensions/reporter                           \
 9412:   extensions/spellcheck                         \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_suite :=                              \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   $(NULL)
    1: 
    1: MODULES_NS_browser :=                           \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_browser :=                              \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/browser                               \
    1:   mozilla/other-licenses/branding/firefox       \
    1:   mozilla/other-licenses/7zstub/firefox         \
    1:   $(NULL)
    1: 
    1: LOCALES_browser :=                              \
    1:   $(LOCALES_toolkit)                            \
    1:   browser                                       \
    1:   extensions/reporter                           \
    1:   extensions/spellcheck                         \
    1:   other-licenses/branding/firefox               \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_browser :=                            \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   mozilla/browser/config/mozconfig              \
    1:   $(NULL)
    1: 
    1: MODULES_NS_minimo :=                            \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_minimo :=                               \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/minimo                                \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_minimo :=                             \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   $(NULL)
    1: 
    1: MODULES_NS_mail :=                              \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_mail :=                                 \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/directory/xpcom                       \
    1:   mozilla/mailnews                              \
    1:   mozilla/mail                                  \
    1:   mozilla/other-licenses/branding/thunderbird   \
    1:   mozilla/other-licenses/7zstub/thunderbird     \
    1:   $(NULL)
    1: 
    1: LOCALES_mail :=                                 \
    1:   $(LOCALES_toolkit)                            \
    1:   mail                                          \
    1:   other-licenses/branding/thunderbird           \
    1:   editor/ui                                     \
    1:   extensions/spellcheck                         \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_mail :=                               \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   mozilla/mail/config/mozconfig                 \
    1:   $(NULL)
    1: 
    1: MODULES_composer :=                             \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/composer                              \
    1:   $(NULL)
    1: 
    1: MODULES_NS_calendar :=                          \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_calendar :=                             \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/storage                               \
    1:   mozilla/db/sqlite3                            \
    1:   mozilla/calendar                              \
    1:   mozilla/other-licenses/branding/sunbird       \
    1:   mozilla/other-licenses/7zstub/sunbird         \
    1:   $(NULL)
    1: 
    1: LOCALES_calendar :=                             \
    1:   $(LOCALES_toolkit)                            \
    1:   calendar                                      \
    1:   other-licenses/branding/sunbird               \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_calendar :=                           \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   mozilla/calendar/sunbird/config/mozconfig     \
    1:   $(NULL)
    1: 
    1: MODULES_NS_xulrunner :=                         \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_xulrunner :=                            \
    1:   $(MODULES_toolkit)                            \
    1:   mozilla/xulrunner                             \
    1:   $(NULL)
    1: 
    1: LOCALES_xulrunner :=                            \
    1:   $(LOCALES_toolkit)                            \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_xulrunner :=                          \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   mozilla/xulrunner/config/mozconfig            \
    1:   $(NULL)
    1: 
    1: MODULES_NS_camino :=                            \
    1:   $(MODULES_NS_toolkit)                         \
    1:   $(NULL)
    1: 
    1: MODULES_camino :=                               \
    1:   $(MODULES_core)                               \
    1:   mozilla/camino                                \
    1:   mozilla/themes                                \
    1:   $(NULL)
    1: 
    1: BOOTSTRAP_camino :=                             \
    1:   $(BOOTSTRAP_toolkit)                          \
    1:   mozilla/camino/config/mozconfig               \
    1:   $(NULL)
    1: 
    1: MODULES_tamarin :=                              \
    1:   mozilla/js/tamarin                            \
    1:   mozilla/modules/zlib                          \
    1:   $(NULL)
    1: 
    1: MODULES_all :=                                  \
    1:   mozilla/other-licenses/bsdiff                 \
    1:   mozilla/other-licenses/libart_lgpl            \
    1:   mozilla/tools/trace-malloc                    \
    1:   mozilla/tools/jprof                           \
    1:   mozilla/tools/codesighs                       \
    1:   mozilla/tools/update-packaging                \
    1:   $(NULL)
    1: 
    1: #######################################################################
    1: # Checkout Tags
    1: #
    1: # For branches, uncomment the MOZ_CO_TAG line with the proper tag,
    1: # and commit this file on that tag.
    1: #MOZ_CO_TAG          = <tag>
14863: NSPR_CO_TAG          = NSPR_4_7_1_RTM
15186: NSS_CO_TAG           = NSS_3_12_RC4
 3237: LDAPCSDK_CO_TAG      = LDAPCSDK_6_0_3_CLIENT_BRANCH
    1: LOCALES_CO_TAG       =
    1: 
    1: #######################################################################
    1: # Defines
    1: #
    1: CVS = cvs
    1: comma := ,
    1: 
    1: CWD := $(shell pwd)
    1: ifneq (1,$(words $(CWD)))
    1: $(error The mozilla directory cannot be located in a path with spaces.)
    1: endif
    1: 
    1: ifeq "$(CWD)" "/"
    1: CWD   := /.
    1: endif
    1: 
    1: ifneq (, $(wildcard client.mk))
    1: # Ran from mozilla directory
    1: ROOTDIR   := $(shell dirname $(CWD))
    1: TOPSRCDIR := $(CWD)
    1: else
    1: # Ran from mozilla/.. directory (?)
    1: ROOTDIR   := $(CWD)
    1: TOPSRCDIR := $(CWD)/mozilla
    1: endif
    1: 
    1: # on os2, TOPSRCDIR may have two forward slashes in a row, which doesn't
    1: #  work;  replace first instance with one forward slash
    1: TOPSRCDIR := $(shell echo "$(TOPSRCDIR)" | sed -e 's%//%/%')
    1: 
    1: ifndef TOPSRCDIR_MOZ
    1: TOPSRCDIR_MOZ=$(TOPSRCDIR)
    1: endif
    1: 
    1: # if ROOTDIR equals only drive letter (i.e. "C:"), set to "/"
    1: DIRNAME := $(shell echo "$(ROOTDIR)" | sed -e 's/^.://')
    1: ifeq ($(DIRNAME),)
    1: ROOTDIR := /.
    1: endif
    1: 
    1: AUTOCONF := autoconf
    1: MKDIR := mkdir
    1: SH := /bin/sh
    1: ifndef MAKE
    1: MAKE := gmake
    1: endif
    1: PERL ?= perl
 3041: PYTHON ?= python
    1: 
    1: CONFIG_GUESS_SCRIPT := $(wildcard $(TOPSRCDIR)/build/autoconf/config.guess)
    1: ifdef CONFIG_GUESS_SCRIPT
    1:   CONFIG_GUESS = $(shell $(CONFIG_GUESS_SCRIPT))
    1: else
    1:   _IS_FIRST_CHECKOUT := 1
    1: endif
    1: 
    1: ####################################
    1: # Sanity checks
    1: 
    1: ifneq (,$(filter MINGW%,$(shell uname -s)))
    1: # check for CRLF line endings
    1: ifneq (0,$(shell $(PERL) -e 'binmode(STDIN); while (<STDIN>) { if (/\r/) { print "1"; exit } } print "0"' < $(TOPSRCDIR)/client.mk))
    1: $(error This source tree appears to have Windows-style line endings. To \
    1: convert it to Unix-style line endings, run \
    1: "python mozilla/build/win32/mozilla-dos2unix.py")
    1: endif
    1: endif
    1: 
    1: ####################################
    1: # CVS
    1: 
    1: # Add the CVS root to CVS_FLAGS if needed
    1: CVS_ROOT_IN_TREE := $(shell cat $(TOPSRCDIR)/CVS/Root 2>/dev/null)
    1: ifneq ($(CVS_ROOT_IN_TREE),)
    1: ifneq ($(CVS_ROOT_IN_TREE),$(CVSROOT))
    1:   CVS_FLAGS := -d $(CVS_ROOT_IN_TREE)
    1: endif
    1: endif
    1: 
    1: CVS_CO_DATE_FLAGS = $(if $(MOZ_CO_DATE),-D "$(MOZ_CO_DATE)")
    1: CVS_CO_LOCALES_DATE_FLAGS = $(if $(MOZ_CO_LOCALES_DATE),-D "$(MOZ_CO_LOCALES_DATE)")
    1: CVSCO = $(CVS) $(CVS_FLAGS) co $(MOZ_CO_FLAGS) $(if $(MOZ_CO_TAG),-r $(MOZ_CO_TAG)) $(CVS_CO_DATE_FLAGS)
    1: 
    1: MOZ_CO_LOCALES_DATE ?= $(MOZ_CO_DATE)
    1: 
    1: CVSCO_LOGFILE := $(ROOTDIR)/cvsco.log
    1: CVSCO_LOGFILE := $(shell echo $(CVSCO_LOGFILE) | sed s%//%/%)
    1: 
    1: # if LOCALES_CVSROOT is not specified, set it here
    1: # (and let mozconfig override it)
    1: LOCALES_CVSROOT ?= :pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/l10n
    1: 
    1: ####################################
    1: # Load mozconfig Options
    1: 
    1: # See build pages, http://www.mozilla.org/build/ for how to set up mozconfig.
    1: 
    1: MOZCONFIG_LOADER := mozilla/build/autoconf/mozconfig2client-mk
    1: MOZCONFIG_FINDER := mozilla/build/autoconf/mozconfig-find 
    1: MOZCONFIG_MODULES := mozilla/build/unix/uniq.pl
    1: run_for_side_effects := \
    1:   $(shell cd $(ROOTDIR); \
    1:      if test "$(_IS_FIRST_CHECKOUT)"; then \
    1:         $(CVSCO) $(MOZCONFIG_FINDER) $(MOZCONFIG_LOADER) $(MOZCONFIG_MODULES); \
    1:      else true; \
    1:      fi; \
    1:      $(MOZCONFIG_LOADER) $(TOPSRCDIR) mozilla/.mozconfig.mk > mozilla/.mozconfig.out)
    1: include $(TOPSRCDIR)/.mozconfig.mk
    1: 
    1: ####################################
    1: # Options that may come from mozconfig
    1: 
    1: MOZ_PROJECT_LIST := $(subst $(comma), ,$(MOZ_CO_PROJECT))
    1: MOZ_PROJECT_LIST := $(subst macbrowser,camino,$(MOZ_PROJECT_LIST))
    1: 
    1: ifneq (,$(filter-out $(AVAILABLE_PROJECTS),$(MOZ_PROJECT_LIST)))
    1: $(error MOZ_CO_PROJECT contains an unrecognized project.)
    1: endif
    1: 
    1: ifeq (all,$(filter all,$(MOZ_PROJECT_LIST)))
    1:   MOZ_PROJECT_LIST := $(AVAILABLE_PROJECTS)
    1: endif
    1: 
    1: MOZ_MODULE_LIST := $(subst $(comma), ,$(MOZ_CO_MODULE)) $(foreach project,$(MOZ_PROJECT_LIST),$(MODULES_$(project)))
    1: MOZ_MODULE_LIST_NS := $(foreach project,$(MOZ_PROJECT_LIST),$(MODULES_NS_$(project)))
    1: LOCALE_DIRS := $(MOZ_LOCALE_DIRS) $(foreach project,$(MOZ_PROJECT_LIST),$(LOCALES_$(project)))
    1: 
    1: MOZCONFIG_MODULES += $(foreach project,$(MOZ_PROJECT_LIST),$(BOOTSTRAP_$(project)))
    1: 
    1: # Using $(sort) here because it also removes duplicate entries.
    1: MOZ_MODULE_LIST := $(sort $(MOZ_MODULE_LIST))
    1: LOCALE_DIRS := $(sort $(LOCALE_DIRS))
    1: MOZCONFIG_MODULES := $(sort $(MOZCONFIG_MODULES))
    1: 
    1: # Change CVS flags if anonymous root is requested
    1: ifdef MOZ_CO_USE_MIRROR
    1:   CVS_FLAGS := -d :pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/cvsroot
    1: endif
    1: 
    1: # MOZ_CVS_FLAGS - Basic CVS flags
    1: ifeq "$(origin MOZ_CVS_FLAGS)" "undefined"
    1:   CVS_FLAGS := $(CVS_FLAGS) -q -z 3 
    1: else
    1:   CVS_FLAGS := $(MOZ_CVS_FLAGS)
    1: endif
    1: 
    1: ifdef MOZ_BUILD_PROJECTS
    1: 
    1: ifndef MOZ_OBJDIR
    1:   $(error When MOZ_BUILD_PROJECTS is set, you must set MOZ_OBJDIR)
    1: endif
    1: ifdef MOZ_CURRENT_PROJECT
    1:   OBJDIR = $(MOZ_OBJDIR)/$(MOZ_CURRENT_PROJECT)
    1:   MOZ_MAKE = $(MAKE) $(MOZ_MAKE_FLAGS) -C $(OBJDIR)
    1:   BUILD_PROJECT_ARG = MOZ_BUILD_APP=$(MOZ_CURRENT_PROJECT)
    1: else
    1:   OBJDIR = $(error Cannot find the OBJDIR when MOZ_CURRENT_PROJECT is not set.)
    1:   MOZ_MAKE = $(error Cannot build in the OBJDIR when MOZ_CURRENT_PROJECT is not set.)
    1: endif
    1: 
    1: else # MOZ_BUILD_PROJECTS
    1: 
    1: ifdef MOZ_OBJDIR
    1:   OBJDIR = $(MOZ_OBJDIR)
    1:   MOZ_MAKE = $(MAKE) $(MOZ_MAKE_FLAGS) -C $(OBJDIR)
    1: else
    1:   OBJDIR := $(TOPSRCDIR)
    1:   MOZ_MAKE := $(MAKE) $(MOZ_MAKE_FLAGS)
    1: endif
    1: 
    1: endif # MOZ_BUILD_PROJECTS
    1: 
    1: ####################################
    1: # CVS defines for NSS
    1: #
    1: NSS_CO_MODULE =               \
    1: 		mozilla/dbm               \
    1: 		mozilla/security/nss      \
    1: 		mozilla/security/coreconf \
    1: 		mozilla/security/dbm      \
    1: 		$(NULL)
    1: 
    1: NSS_CO_FLAGS := -P
    1: ifdef MOZ_CO_FLAGS
    1:   NSS_CO_FLAGS := $(MOZ_CO_FLAGS)
    1: endif
    1: NSS_CO_FLAGS := $(NSS_CO_FLAGS) $(if $(NSS_CO_TAG),-r $(NSS_CO_TAG),-A)
    1: 
    1: # Can only pull the tip or branch tags by date
    1: ifeq (,$(filter-out HEAD %BRANCH,$(NSS_CO_TAG)))
    1: CVSCO_NSS = $(CVS) $(CVS_FLAGS) co $(NSS_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(NSS_CO_MODULE)
    1: else
    1: CVSCO_NSS = $(CVS) $(CVS_FLAGS) co $(NSS_CO_FLAGS) $(NSS_CO_MODULE)
    1: endif
    1: 
    1: ####################################
    1: # CVS defines for NSPR
    1: #
    1: NSPR_CO_MODULE = mozilla/nsprpub
    1: NSPR_CO_FLAGS := -P
    1: ifdef MOZ_CO_FLAGS
    1:   NSPR_CO_FLAGS := $(MOZ_CO_FLAGS)
    1: endif
    1: NSPR_CO_FLAGS := $(NSPR_CO_FLAGS) $(if $(NSPR_CO_TAG),-r $(NSPR_CO_TAG),-A)
    1: 
    1: # Can only pull the tip or branch tags by date
    1: ifeq (,$(filter-out HEAD %BRANCH,$(NSPR_CO_TAG)))
    1: CVSCO_NSPR = $(CVS) $(CVS_FLAGS) co $(NSPR_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(NSPR_CO_MODULE)
    1: else
    1: CVSCO_NSPR = $(CVS) $(CVS_FLAGS) co $(NSPR_CO_FLAGS) $(NSPR_CO_MODULE)
    1: endif
    1: 
    1: ####################################
    1: # CVS defines for the C LDAP SDK
    1: #
    1: LDAPCSDK_CO_MODULE = mozilla/directory/c-sdk
    1: LDAPCSDK_CO_FLAGS := -P
    1: ifdef MOZ_CO_FLAGS
    1:   LDAPCSDK_CO_FLAGS := $(MOZ_CO_FLAGS)
    1: endif
    1: LDAPCSDK_CO_FLAGS := $(LDAPCSDK_CO_FLAGS) $(if $(LDAPCSDK_CO_TAG),-r $(LDAPCSDK_CO_TAG),-A)
  227: 
  227: # Can only pull the tip or branch tags by date
  227: ifeq (,$(filter-out HEAD %BRANCH,$(LDAPCSDK_CO_TAG)))
    1: CVSCO_LDAPCSDK = $(CVS) $(CVS_FLAGS) co $(LDAPCSDK_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(LDAPCSDK_CO_MODULE)
  227: else
  227: CVSCO_LDAPCSDK = $(CVS) $(CVS_FLAGS) co $(LDAPCSDK_CO_FLAGS) $(LDAPCSDK_CO_MODULE)
  227: endif
    1: 
    1: ####################################
    1: # Error on obsolete variables.
    1: #
    1: 
    1: ifdef MOZ_MAPINFO
    1: $(warning MOZ_MAPINFO is obsolete, use MOZ_CO_MODULE=mozilla/tools/codesighs instead.)
    1: MOZ_MODULE_LIST += mozilla/tools/codesighs
    1: endif
    1: ifdef MOZ_INTERNAL_LIBART_LGPL
    1: $(error MOZ_INTERNAL_LIBART_LGPL is obsolete, use MOZ_CO_MODULE=mozilla/other-licenses/libart_lgpl instead.)
    1: endif
    1: ifdef MOZ_PHOENIX
    1: $(warning MOZ_PHOENIX is obsolete.)
    1: MOZ_MODULE_LIST += $(MODULES_browser)
    1: # $(error MOZ_PHOENIX is obsolete, use MOZ_CO_PROJECT=browser and --enable-application=browser)
    1: endif
    1: ifdef MOZ_THUNDERBIRD
    1: $(warning MOZ_THUNDERBIRD is obsolete.)
    1: MOZ_MODULE_LIST += $(MODULES_mail)
    1: # $(error MOZ_THUNDERBIRD is obsolete, use MOZ_CO_PROJECT=mail and --enable-application=mail)
    1: endif
    1: 
    1: ###################################
    1: # Checkout main modules
    1: #
    1: 
    1: # sort is used to remove duplicates.
    1: MOZ_MODULE_LIST := $(sort $(MOZ_MODULE_LIST))
    1: MOZ_MODULE_LIST_NS := $(sort $(MOZ_MODULE_LIST_NS))
    1: 
    1: ####################################
    1: # Suppress standalone modules if they're not needed.
    1: #
  528: CONFIGURES := $(TOPSRCDIR)/configure
    1: ifeq (,$(filter mozilla/xpcom,$(MOZ_MODULE_LIST)))
    1:   CVSCO_NSPR :=
  528: else
  528:   CONFIGURES += $(TOPSRCDIR)/nsprpub/configure
    1: endif
    1: 
    1: ifeq (,$(filter mozilla/security/manager,$(MOZ_MODULE_LIST)))
    1:   CVSCO_NSS :=
    1: endif
    1: ifeq (,$(filter mozilla/directory/xpcom,$(MOZ_MODULE_LIST)))
    1:   CVSCO_LDAPCSDK :=
  528: else
  528:   CONFIGURES += $(TOPSRCDIR)/directory/c-sdk/configure
    1: endif
    1: 
    1: MODULES_CO_FLAGS := -P
    1: ifdef MOZ_CO_FLAGS
    1:   MODULES_CO_FLAGS := $(MOZ_CO_FLAGS)
    1: endif
    1: MODULES_CO_FLAGS := $(MODULES_CO_FLAGS) $(if $(MOZ_CO_TAG),-r $(MOZ_CO_TAG),-A)
    1: 
    1: CVSCO_MODULES_NS = $(CVS) $(CVS_FLAGS) co $(MODULES_CO_FLAGS) $(CVS_CO_DATE_FLAGS) -l $(MOZ_MODULE_LIST_NS)
    1: 
    1: ifeq (,$(strip $(MOZ_MODULE_LIST)))
    1: FASTUPDATE_MODULES = $(error No modules or projects were specified. Use MOZ_CO_PROJECT to specify a project for checkout.)
    1: CHECKOUT_MODULES   = $(error No modules or projects were specified. Use MOZ_CO_PROJECT to specify a project for checkout.)
    1: else
    1: FASTUPDATE_MODULES := fast_update $(CVS) $(CVS_FLAGS) co $(MODULES_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(MOZ_MODULE_LIST)
    1: CHECKOUT_MODULES   := cvs_co $(CVS) $(CVS_FLAGS) co $(MODULES_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(MOZ_MODULE_LIST);
    1: endif
    1: ifeq (,$(MOZ_MODULE_LIST_NS))
    1: FASTUPDATE_MODULES_NS := true
    1: CHECKOUT_MODULES_NS   := true
    1: else
    1: FASTUPDATE_MODULES_NS := fast_update $(CVSCO_MODULES_NS)
    1: CHECKOUT_MODULES_NS   := cvs_co      $(CVSCO_MODULES_NS)
    1: endif
    1: 
    1: ###################################
    1: # CVS defines for locales
    1: #
    1: 
    1: LOCALES_CO_FLAGS := -P
    1: ifdef MOZ_CO_FLAGS
    1:   LOCALES_CO_FLAGS := $(MOZ_CO_FLAGS)
    1: endif
    1: LOCALES_CO_FLAGS := $(LOCALES_CO_FLAGS) $(if $(LOCALES_CO_TAG),-r $(LOCALES_CO_TAG),-A)
    1: 
    1: ifndef MOZ_CO_LOCALES
    1: FASTUPDATE_LOCALES := true
    1: CHECKOUT_LOCALES := true
    1: else
    1: 
    1: override MOZ_CO_LOCALES := $(subst $(comma), ,$(MOZ_CO_LOCALES))
    1: 
    1: ifeq (all,$(MOZ_CO_LOCALES))
    1: MOZCONFIG_MODULES += $(foreach project,$(MOZ_PROJECT_LIST),mozilla/$(project)/locales/all-locales)
    1: 
 9411: LOCALE_CO_DIRS := $(sort $(foreach project,$(MOZ_PROJECT_LIST),$(foreach locale,$(shell cat mozilla/$(project)/locales/all-locales),l10n/$(locale)/)))
    1: else # MOZ_CO_LOCALES != all
 9411: LOCALE_CO_DIRS = $(sort $(foreach locale,$(MOZ_CO_LOCALES),l10n/$(locale)/))
    1: endif
    1: 
    1: CVSCO_LOCALES := $(CVS) $(CVS_FLAGS) -d $(LOCALES_CVSROOT) co $(LOCALES_CO_FLAGS) $(CVS_CO_LOCALES_DATE_FLAGS) $(LOCALE_CO_DIRS)
    1: 
    1: FASTUPDATE_LOCALES := fast_update $(CVSCO_LOCALES)
    1: CHECKOUT_LOCALES := cvs_co $(CVSCO_LOCALES)
    1: endif #MOZ_CO_LOCALES
    1: 
    1: #######################################################################
    1: # Rules
    1: # 
    1: 
    1: # Print out any options loaded from mozconfig.
    1: all build checkout clean depend distclean export libs install realclean::
    1: 	@if test -f .mozconfig.out; then \
    1: 	  cat .mozconfig.out; \
    1: 	  rm -f .mozconfig.out; \
    1: 	else true; \
    1: 	fi
    1: 
    1: ifdef _IS_FIRST_CHECKOUT
    1: all:: checkout build
    1: else
    1: all:: checkout alldep
    1: endif
    1: 
    1: # Windows equivalents
    1: pull_all: checkout
    1: build_all: build
    1: build_all_dep: alldep
    1: build_all_depend: alldep
    1: clobber clobber_all: clean
    1: pull_and_build_all: checkout alldep
    1: 
    1: # Do everything from scratch
    1: everything: checkout clean build
    1: 
    1: ####################################
    1: # CVS checkout
    1: #
    1: checkout::
    1: #	@: Backup the last checkout log.
    1: 	@if test -f $(CVSCO_LOGFILE) ; then \
    1: 	  mv $(CVSCO_LOGFILE) $(CVSCO_LOGFILE).old; \
    1: 	else true; \
    1: 	fi
    1: ifdef RUN_AUTOCONF_LOCALLY
    1: 	@echo "Removing local configures" ; \
    1: 	cd $(ROOTDIR) && \
  528: 	$(RM) -f $(CONFIGURES)
    1: endif
    1: 	@echo "checkout start: "`date` | tee $(CVSCO_LOGFILE)
11614: 	@echo '$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)'; \
    1:         cd $(ROOTDIR) && \
11614: 	$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)
    1: 	@cd $(ROOTDIR) && $(MAKE) -f mozilla/client.mk real_checkout
    1: 
    1: #	Start the checkout. Split the output to the tty and a log file.
    1: 
    1: real_checkout:
    1: 	@set -e; \
    1: 	cvs_co() { set -e; echo "$$@" ; \
    1: 	  "$$@" 2>&1 | tee -a $(CVSCO_LOGFILE); }; \
    1: 	cvs_co $(CVSCO_NSPR); \
    1: 	cvs_co $(CVSCO_NSS); \
    1: 	cvs_co $(CVSCO_LDAPCSDK); \
    1: 	$(CHECKOUT_MODULES_NS); \
    1: 	$(CHECKOUT_MODULES) \
    1: 	$(CHECKOUT_LOCALES);
    1: 	@echo "checkout finish: "`date` | tee -a $(CVSCO_LOGFILE)
    1: # update the NSS checkout timestamp, if we checked PSM out
    1: 	@if test -d $(TOPSRCDIR)/security/manager -a \
    1: 		 `egrep -c '^(U|C) mozilla/security/(nss|coreconf)' $(CVSCO_LOGFILE) 2>/dev/null` != 0; then \
13445: 		echo `date` > $(TOPSRCDIR)/security/manager/.nss.checkout; \
    1: 	fi
  521: ifdef RUN_AUTOCONF_LOCALLY
  521: 	cd $(ROOTDIR) && \
  528: 	$(RM) -f $(CONFIGURES)
  521: endif
    1: #	@: Check the log for conflicts. ;
    1: 	@conflicts=`egrep "^C " $(CVSCO_LOGFILE)` ;\
    1: 	if test "$$conflicts" ; then \
    1: 	  echo "$(MAKE): *** Conflicts during checkout." ;\
    1: 	  echo "$$conflicts" ;\
    1: 	  echo "$(MAKE): Refer to $(CVSCO_LOGFILE) for full log." ;\
    1: 	  false; \
    1: 	else true; \
    1: 	fi
    1: 
    1: fast-update:
    1: #	@: Backup the last checkout log.
    1: 	@if test -f $(CVSCO_LOGFILE) ; then \
    1: 	  mv $(CVSCO_LOGFILE) $(CVSCO_LOGFILE).old; \
    1: 	else true; \
    1: 	fi
    1: ifdef RUN_AUTOCONF_LOCALLY
    1: 	@echo "Removing local configures" ; \
    1: 	cd $(ROOTDIR) && \
  528: 	$(RM) -f $(CONFIGURES)
    1: endif
    1: 	@echo "checkout start: "`date` | tee $(CVSCO_LOGFILE)
    1: 	@echo '$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)'; \
    1:         cd $(ROOTDIR) && \
    1: 	$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)
    1: 	@cd $(TOPSRCDIR) && \
    1: 	$(MAKE) -f client.mk real_fast-update
    1: 
    1: # Start the update. Split the output to the tty and a log file.
    1: real_fast-update:
    1: 	@set -e; \
    1: 	fast_update() { set -e; config/cvsco-fast-update.pl $$@ 2>&1 | tee -a $(CVSCO_LOGFILE); }; \
    1: 	cvs_co() { set -e; echo "$$@" ; \
    1: 	  "$$@" 2>&1 | tee -a $(CVSCO_LOGFILE); }; \
    1: 	fast_update $(CVSCO_NSPR); \
    1: 	cd $(ROOTDIR); \
    1: 	cvs_co $(CVSCO_NSS); \
    1: 	cd mozilla; \
    1: 	fast_update $(CVSCO_LDAPCSDK); \
    1: 	$(FASTUPDATE_MODULES); \
    1: 	$(FASTUPDATE_MODULES_NS); \
    1: 	$(FASTUPDATE_LOCALES);
    1: 	@echo "fast_update finish: "`date` | tee -a $(CVSCO_LOGFILE)
    1: # update the NSS checkout timestamp
    1: 	@if test `egrep -c '^(U|C) mozilla/security/(nss|coreconf)' $(CVSCO_LOGFILE) 2>/dev/null` != 0; then \
    1: 		touch $(TOPSRCDIR)/security/manager/.nss.checkout; \
    1: 	fi
  521: ifdef RUN_AUTOCONF_LOCALLY
  521: 	cd $(ROOTDIR) && \
  528: 	$(RM) -f $(CONFIGURES)
  521: endif
    1: #	@: Check the log for conflicts. ;
    1: 	@conflicts=`egrep "^C " $(CVSCO_LOGFILE)` ;\
    1: 	if test "$$conflicts" ; then \
    1: 	  echo "$(MAKE): *** Conflicts during fast-update." ;\
    1: 	  echo "$$conflicts" ;\
    1: 	  echo "$(MAKE): Refer to $(CVSCO_LOGFILE) for full log." ;\
    1: 	  false; \
    1: 	else true; \
    1: 	fi
    1: 
    1: CVSCO_LOGFILE_L10N := $(ROOTDIR)/cvsco-l10n.log
    1: CVSCO_LOGFILE_L10N := $(shell echo $(CVSCO_LOGFILE_L10N) | sed s%//%/%)
    1: 
    1: l10n-checkout:
    1: #	@: Backup the last checkout log.
    1: 	@if test -f $(CVSCO_LOGFILE_L10N) ; then \
    1: 	  mv $(CVSCO_LOGFILE_L10N) $(CVSCO_LOGFILE_L10N).old; \
    1: 	else true; \
    1: 	fi
    1: 	@echo "checkout start: "`date` | tee $(CVSCO_LOGFILE_L10N)
11614: 	@echo '$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)'; \
    1:         cd $(ROOTDIR) && \
11614: 	$(CVSCO) mozilla/client.mk $(MOZCONFIG_MODULES)
    1: 	@cd $(ROOTDIR) && $(MAKE) -f mozilla/client.mk real_l10n-checkout
    1: 
 7943: FULL_EN_US_DIRS := toolkit \
 7943: 	extensions \
 7943: 	$(MOZ_PROJECT_LIST) \
 7943: 	$(NULL)
 7943: 
 7943: EN_US_LOCALE_DIRS := $(foreach dir, \
 7943: 	$(filter-out toolkit extensions/% $(MOZ_PROJECT_LIST), $(LOCALE_DIRS)), \
 7943: 	mozilla/$(dir)/locales)
 7943: 
 7943: EN_US_CO_DIRS := $(EN_US_LOCALE_DIRS) \
 7943:   $(foreach mod,$(FULL_EN_US_DIRS),mozilla/$(mod)) \
    1:   mozilla/client.mk        \
    1:   mozilla/configure        \
    1:   mozilla/configure.in     \
    1:   mozilla/allmakefiles.sh  \
    1:   mozilla/build            \
    1:   mozilla/config           \
    1:   $(NULL)
    1: 
    1: #	Start the checkout. Split the output to the tty and a log file.
    1: real_l10n-checkout:
    1: 	@set -e; \
    1: 	cvs_co() { set -e; echo "$$@" ; \
    1: 	  "$$@" 2>&1 | tee -a $(CVSCO_LOGFILE_L10N); }; \
    1: 	cvs_co $(CVS) $(CVS_FLAGS) co $(MODULES_CO_FLAGS) $(CVS_CO_DATE_FLAGS) $(EN_US_CO_DIRS); \
    1: 	cvs_co $(CVSCO_LOCALES)
    1: 	@echo "checkout finish: "`date` | tee -a $(CVSCO_LOGFILE_L10N)
    1: #	@: Check the log for conflicts. ;
    1: 	@conflicts=`egrep "^C " $(CVSCO_LOGFILE_L10N)` ;\
    1: 	if test "$$conflicts" ; then \
    1: 	  echo "$(MAKE): *** Conflicts during checkout." ;\
    1: 	  echo "$$conflicts" ;\
    1: 	  echo "$(MAKE): Refer to $(CVSCO_LOGFILE_L10N) for full log." ;\
    1: 	  false; \
    1: 	else true; \
    1: 	fi
    1: 
12660: ####################################
12660: # Profile-Guided Optimization
12660: #  To use this, you should set the following variables in your mozconfig
12660: #    mk_add_options PROFILE_GEN_SCRIPT=/path/to/profile-script
12660: #
12660: #  The profile script should exercise the functionality to be included
12660: #  in the profile feedback.
12660: #
12660: #  This is up here, outside of the MOZ_CURRENT_PROJECT logic so that this
12660: #  is usable in multi-pass builds, where you might not have a runnable
12660: #  application until all the build passes and postflight scripts have run.
12660: ifdef MOZ_OBJDIR
12660:   PGO_OBJDIR = $(MOZ_OBJDIR)
12660: else
12660:   PGO_OBJDIR := $(TOPSRCDIR)
12660: endif
12660: 
12660: profiledbuild::
12660: 	$(MAKE) -f $(TOPSRCDIR)/client.mk build MOZ_PROFILE_GENERATE=1
12660: 	OBJDIR=${PGO_OBJDIR} $(PROFILE_GEN_SCRIPT)
12660: 	$(MAKE) -f $(TOPSRCDIR)/client.mk maybe_clobber_profiledbuild
12660: 	$(MAKE) -f $(TOPSRCDIR)/client.mk build MOZ_PROFILE_USE=1
12660: 
12660: 
    1: #####################################################
    1: # First Checkout
    1: 
    1: ifdef _IS_FIRST_CHECKOUT
    1: # First time, do build target in a new process to pick up new files.
    1: build::
    1: 	$(MAKE) -f $(TOPSRCDIR)/client.mk build
    1: else
    1: 
    1: #####################################################
    1: # After First Checkout
    1: 
    1: #####################################################
    1: # Build date unification
    1: 
    1: ifdef MOZ_UNIFY_BDATE
    1: ifndef MOZ_BUILD_DATE
    1: ifdef MOZ_BUILD_PROJECTS
 3041: MOZ_BUILD_DATE = $(shell $(PYTHON) $(TOPSRCDIR)/toolkit/xre/make-platformini.py --print-buildid)
    1: export MOZ_BUILD_DATE
    1: endif
    1: endif
    1: endif
    1: 
    1: #####################################################
    1: # Preflight, before building any project
    1: 
12660: build alldep preflight_all::
    1: ifeq (,$(MOZ_CURRENT_PROJECT)$(if $(MOZ_PREFLIGHT_ALL),,1))
    1: # Don't run preflight_all for individual projects in multi-project builds
    1: # (when MOZ_CURRENT_PROJECT is set.)
    1: ifndef MOZ_BUILD_PROJECTS
    1: # Building a single project, OBJDIR is usable.
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_PREFLIGHT_ALL); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile preflight_all TOPSRCDIR=$(TOPSRCDIR) OBJDIR=$(OBJDIR) MOZ_OBJDIR=$(MOZ_OBJDIR); \
    1: 	done
    1: else
    1: # OBJDIR refers to the project-specific OBJDIR, which is not available at
    1: # this point when building multiple projects.  Only MOZ_OBJDIR is available.
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_PREFLIGHT_ALL); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile preflight_all TOPSRCDIR=$(TOPSRCDIR) MOZ_OBJDIR=$(MOZ_OBJDIR) MOZ_BUILD_PROJECTS="$(MOZ_BUILD_PROJECTS)"; \
    1: 	done
    1: endif
    1: endif
    1: 
    1: # If we're building multiple projects, but haven't specified which project,
    1: # loop through them.
    1: 
    1: ifeq (,$(MOZ_CURRENT_PROJECT)$(if $(MOZ_BUILD_PROJECTS),,1))
12660: configure depend build install export libs clean realclean distclean alldep preflight postflight maybe_clobber_profiledbuild::
    1: 	set -e; \
    1: 	for app in $(MOZ_BUILD_PROJECTS); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/client.mk $@ MOZ_CURRENT_PROJECT=$$app; \
    1: 	done
    1: 
    1: else
    1: 
    1: # MOZ_CURRENT_PROJECT: either doing a single-project build, or building an
    1: # individual project in a multi-project build.
    1: 
    1: ####################################
    1: # Configure
    1: 
    1: CONFIG_STATUS = $(wildcard $(OBJDIR)/config.status)
    1: CONFIG_CACHE  = $(wildcard $(OBJDIR)/config.cache)
    1: 
    1: ifdef RUN_AUTOCONF_LOCALLY
    1: EXTRA_CONFIG_DEPS := \
    1: 	$(TOPSRCDIR)/aclocal.m4 \
    1: 	$(wildcard $(TOPSRCDIR)/build/autoconf/*.m4) \
    1: 	$(NULL)
    1: 
    1: $(TOPSRCDIR)/configure: $(TOPSRCDIR)/configure.in $(EXTRA_CONFIG_DEPS)
    1: 	@echo Generating $@ using autoconf
    1: 	cd $(TOPSRCDIR); $(AUTOCONF)
  521: 
  521: $(TOPSRCDIR)/nsprpub/configure: $(TOPSRCDIR)/nsprpub/configure.in $(EXTRA_CONFIG_DEPS)
  521: 	@echo Generating $@ using autoconf
  521: 	cd $(TOPSRCDIR)/nsprpub; $(AUTOCONF)
  521: 
  521: $(TOPSRCDIR)/directory/c-sdk/configure: $(TOPSRCDIR)/directory/c-sdk/configure.in $(EXTRA_CONFIG_DEPS)
  521: 	@echo Generating $@ using autoconf
  521: 	cd $(TOPSRCDIR)/directory/c-sdk; $(AUTOCONF)
    1: endif
    1: 
    1: CONFIG_STATUS_DEPS := \
    1: 	$(TOPSRCDIR)/configure \
    1: 	$(TOPSRCDIR)/.mozconfig.mk \
    1: 	$(wildcard $(TOPSRCDIR)/nsprpub/configure) \
    1: 	$(wildcard $(TOPSRCDIR)/directory/c-sdk/configure) \
    1: 	$(wildcard $(TOPSRCDIR)/config/milestone.txt) \
    1: 	$(wildcard $(TOPSRCDIR)/config/chrome-versions.sh) \
10410:   $(wildcard $(addsuffix confvars.sh,$(wildcard $(TOPSRCDIR)/*/))) \
    1: 	$(NULL)
    1: 
    1: # configure uses the program name to determine @srcdir@. Calling it without
    1: #   $(TOPSRCDIR) will set @srcdir@ to "."; otherwise, it is set to the full
    1: #   path of $(TOPSRCDIR).
    1: ifeq ($(TOPSRCDIR),$(OBJDIR))
    1:   CONFIGURE = ./configure
    1: else
    1:   CONFIGURE = $(TOPSRCDIR)/configure
    1: endif
    1: 
    1: ifdef MOZ_TOOLS
    1:   CONFIGURE = $(TOPSRCDIR)/configure
    1: endif
    1: 
  528: configure:: $(CONFIGURES)
    1: ifdef MOZ_BUILD_PROJECTS
    1: 	@if test ! -d $(MOZ_OBJDIR); then $(MKDIR) $(MOZ_OBJDIR); else true; fi
    1: endif
    1: 	@if test ! -d $(OBJDIR); then $(MKDIR) $(OBJDIR); else true; fi
    1: 	@echo cd $(OBJDIR);
    1: 	@echo $(CONFIGURE) $(CONFIGURE_ARGS)
    1: 	@cd $(OBJDIR) && $(BUILD_PROJECT_ARG) $(CONFIGURE_ENV_ARGS) $(CONFIGURE) $(CONFIGURE_ARGS) \
    1: 	  || ( echo "*** Fix above errors and then restart with\
    1:                \"$(MAKE) -f client.mk build\"" && exit 1 )
    1: 	@touch $(OBJDIR)/Makefile
    1: 
    1: $(OBJDIR)/Makefile $(OBJDIR)/config.status: $(CONFIG_STATUS_DEPS)
    1: 	@$(MAKE) -f $(TOPSRCDIR)/client.mk configure
    1: 
    1: ifneq (,$(CONFIG_STATUS))
    1: $(OBJDIR)/config/autoconf.mk: $(TOPSRCDIR)/config/autoconf.mk.in
    1: 	cd $(OBJDIR); \
    1: 	  CONFIG_FILES=config/autoconf.mk ./config.status
    1: endif
    1: 
    1: 
    1: ####################################
    1: # Depend
    1: 
    1: depend:: $(OBJDIR)/Makefile $(OBJDIR)/config.status
    1: 	$(MOZ_MAKE) export && $(MOZ_MAKE) depend
    1: 
    1: ####################################
    1: # Preflight
    1: 
12660: build alldep preflight::
    1: ifdef MOZ_PREFLIGHT
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_PREFLIGHT); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile preflight TOPSRCDIR=$(TOPSRCDIR) OBJDIR=$(OBJDIR) MOZ_OBJDIR=$(MOZ_OBJDIR); \
    1: 	done
    1: endif
    1: 
    1: ####################################
    1: # Build it
    1: 
    1: build::  $(OBJDIR)/Makefile $(OBJDIR)/config.status
    1: 	$(MOZ_MAKE)
    1: 
    1: ####################################
    1: # Other targets
    1: 
    1: # Pass these target onto the real build system
12660: install export libs clean realclean distclean alldep maybe_clobber_profiledbuild:: $(OBJDIR)/Makefile $(OBJDIR)/config.status
    1: 	$(MOZ_MAKE) $@
    1: 
    1: ####################################
    1: # Postflight
    1: 
12660: build alldep postflight::
    1: ifdef MOZ_POSTFLIGHT
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_POSTFLIGHT); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile postflight TOPSRCDIR=$(TOPSRCDIR) OBJDIR=$(OBJDIR) MOZ_OBJDIR=$(MOZ_OBJDIR); \
    1: 	done
    1: endif
    1: 
    1: endif # MOZ_CURRENT_PROJECT
    1: 
    1: ####################################
    1: # Postflight, after building all projects
    1: 
12660: build alldep postflight_all::
    1: ifeq (,$(MOZ_CURRENT_PROJECT)$(if $(MOZ_POSTFLIGHT_ALL),,1))
    1: # Don't run postflight_all for individual projects in multi-project builds
    1: # (when MOZ_CURRENT_PROJECT is set.)
    1: ifndef MOZ_BUILD_PROJECTS
    1: # Building a single project, OBJDIR is usable.
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_POSTFLIGHT_ALL); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile postflight_all TOPSRCDIR=$(TOPSRCDIR) OBJDIR=$(OBJDIR) MOZ_OBJDIR=$(MOZ_OBJDIR); \
    1: 	done
    1: else
    1: # OBJDIR refers to the project-specific OBJDIR, which is not available at
    1: # this point when building multiple projects.  Only MOZ_OBJDIR is available.
    1: 	set -e; \
    1: 	for mkfile in $(MOZ_POSTFLIGHT_ALL); do \
    1: 	  $(MAKE) -f $(TOPSRCDIR)/$$mkfile postflight_all TOPSRCDIR=$(TOPSRCDIR) MOZ_OBJDIR=$(MOZ_OBJDIR) MOZ_BUILD_PROJECTS="$(MOZ_BUILD_PROJECTS)"; \
    1: 	done
    1: endif
    1: endif
    1: 
    1: cleansrcdir:
    1: 	@cd $(TOPSRCDIR); \
    1: 	if [ -f Makefile ]; then \
    1: 	  $(MAKE) distclean ; \
    1: 	else \
    1: 	  echo "Removing object files from srcdir..."; \
    1: 	  rm -fr `find . -type d \( -name .deps -print -o -name CVS \
    1: 	          -o -exec test ! -d {}/CVS \; \) -prune \
    1: 	          -o \( -name '*.[ao]' -o -name '*.so' \) -type f -print`; \
    1: 	   build/autoconf/clean-config.sh; \
    1: 	fi;
    1: 
    1: # (! IS_FIRST_CHECKOUT)
    1: endif
    1: 
  882: echo-variable-%:
  882: 	@echo $($*)
    1: 
12660: .PHONY: checkout real_checkout depend build profiledbuild maybe_clobber_profiledbuild export libs alldep install clean realclean distclean cleansrcdir pull_all build_all clobber clobber_all pull_and_build_all everything configure preflight_all preflight postflight postflight_all
