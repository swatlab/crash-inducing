  2585: /*
  2585: #ifdef 0
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  2585: #endif
  2585:  */
  2585: 
  7187: // One of the possible values for the mousewheel.* preferences.
  7187: // From nsEventStateManager.cpp.
 11660: const MOUSE_SCROLL_ZOOM = 3;
  2585: 
137506: Cu.import('resource://gre/modules/ContentPrefInstance.jsm');
137506: 
137506: function getContentPrefs(aWindow) {
137506:   let context = aWindow ? aWindow.QueryInterface(Ci.nsIInterfaceRequestor)
137506:                                  .getInterface(Ci.nsIWebNavigation)
137506:                                  .QueryInterface(Ci.nsILoadContext) : null;
137506:   return new ContentPrefInstance(context);
137506: }
137506: 
  2585: /**
  7187:  * Controls the "full zoom" setting and its site-specific preferences.
  2585:  */
  7187: var FullZoom = {
 48161:   // Identifies the setting in the content prefs database.
  7187:   name: "browser.content.full-zoom",
  2585: 
137506:   // The global value (if any) for the setting.  Lazily loaded from the service
137506:   // when first requested, then updated by the pref change listener as it changes.
137506:   // If there is no global value, then this should be undefined.
137506:   get globalValue() {
137506:     var globalValue = getContentPrefs(gBrowser.contentDocument.defaultView).getPref(null, this.name);
137506:     if (typeof globalValue != "undefined")
137506:       globalValue = this._ensureValid(globalValue);
137506:     delete this.globalValue;
137506:     return this.globalValue = globalValue;
137506:   },
137506: 
 12289:   // browser.zoom.siteSpecific preference cache
 24115:   _siteSpecificPref: undefined,
 12289: 
 25644:   // browser.zoom.updateBackgroundTabs preference cache
 25644:   updateBackgroundTabs: undefined,
 25644: 
 41246:   get siteSpecific() {
 77714:     return this._siteSpecificPref;
 24115:   },
  2585: 
  2585:   //**************************************************************************//
  2585:   // nsISupports
  2585: 
 48161:   QueryInterface: XPCOMUtils.generateQI([Ci.nsIDOMEventListener,
 48161:                                          Ci.nsIObserver,
 48161:                                          Ci.nsIContentPrefObserver,
 48161:                                          Ci.nsISupportsWeakReference,
 48161:                                          Ci.nsISupports]),
  2585: 
  2585:   //**************************************************************************//
  2585:   // Initialization & Destruction
  2585: 
  8331:   init: function FullZoom_init() {
  2585:     // Listen for scrollwheel events so we can save scrollwheel-based changes.
  2585:     window.addEventListener("DOMMouseScroll", this, false);
  2585: 
  2585:     // Register ourselves with the service so we know when our pref changes.
137506:     getContentPrefs().addObserver(this.name, this);
 12289: 
 24115:     this._siteSpecificPref =
 39146:       gPrefService.getBoolPref("browser.zoom.siteSpecific");
 25644:     this.updateBackgroundTabs =
 39146:       gPrefService.getBoolPref("browser.zoom.updateBackgroundTabs");
 25644:     // Listen for changes to the browser.zoom branch so we can enable/disable
 25644:     // updating background tabs and per-site saving and restoring of zoom levels.
 39146:     gPrefService.addObserver("browser.zoom.", this, true);
  2585:   },
  2585: 
  8331:   destroy: function FullZoom_destroy() {
 39146:     gPrefService.removeObserver("browser.zoom.", this);
137506:     getContentPrefs().removeObserver(this.name, this);
  2585:     window.removeEventListener("DOMMouseScroll", this, false);
  2585:   },
  2585: 
  2585: 
  2585:   //**************************************************************************//
  2585:   // Event Handlers
  2585: 
  2585:   // nsIDOMEventListener
  2585: 
  8331:   handleEvent: function FullZoom_handleEvent(event) {
  7187:     switch (event.type) {
  7187:       case "DOMMouseScroll":
  2585:         this._handleMouseScrolled(event);
  7187:         break;
  7187:     }
  2585:   },
  2585: 
  8331:   _handleMouseScrolled: function FullZoom__handleMouseScrolled(event) {
  2585:     // Construct the "mousewheel action" pref key corresponding to this event.
108425:     // Based on nsEventStateManager::WheelPrefs::GetBasePrefName().
108425:     var pref = "mousewheel.";
  2585: 
108425:     var pressedModifierCount = event.shiftKey + event.ctrlKey + event.altKey +
108425:                                  event.metaKey + event.getModifierState("OS");
108425:     if (pressedModifierCount != 1) {
108425:       pref += "default.";
108425:     } else if (event.shiftKey) {
108425:       pref += "with_shift.";
108425:     } else if (event.ctrlKey) {
108425:       pref += "with_control.";
108425:     } else if (event.altKey) {
108425:       pref += "with_alt.";
108425:     } else if (event.metaKey) {
108425:       pref += "with_meta.";
108425:     } else {
108425:       pref += "with_win.";
108425:     }
  2585: 
108425:     pref += "action";
  2585: 
  7187:     // Don't do anything if this isn't a "zoom" scroll event.
  7187:     var isZoomEvent = false;
  7187:     try {
 11660:       isZoomEvent = (gPrefService.getIntPref(pref) == MOUSE_SCROLL_ZOOM);
  7187:     } catch (e) {}
  7187:     if (!isZoomEvent)
  2585:       return;
  2585: 
  2585:     // XXX Lazily cache all the possible action prefs so we don't have to get
  2585:     // them anew from the pref service for every scroll event?  We'd have to
  2585:     // make sure to observe them so we can update the cache when they change.
  2585: 
  2585:     // We have to call _applySettingToPref in a timeout because we handle
  2585:     // the event before the event state manager has a chance to apply the zoom
  2585:     // during nsEventStateManager::PostHandleEvent.
137506:     window.setTimeout(function (self) { self._applySettingToPref() }, 0, this);
  2585:   },
  2585: 
 12289:   // nsIObserver
 12289: 
 12289:   observe: function (aSubject, aTopic, aData) {
 12289:     switch (aTopic) {
 12289:       case "nsPref:changed":
 12289:         switch (aData) {
 12289:           case "browser.zoom.siteSpecific":
 24115:             this._siteSpecificPref =
 39146:               gPrefService.getBoolPref("browser.zoom.siteSpecific");
 12289:             break;
 25644:           case "browser.zoom.updateBackgroundTabs":
 25644:             this.updateBackgroundTabs =
 39146:               gPrefService.getBoolPref("browser.zoom.updateBackgroundTabs");
 25644:             break;
 12289:         }
 12289:         break;
 12289:     }
 12289:   },
 12289: 
  2585:   // nsIContentPrefObserver
  2585: 
  8331:   onContentPrefSet: function FullZoom_onContentPrefSet(aGroup, aName, aValue) {
137506:     let contentPrefs = getContentPrefs(gBrowser.contentDocument.defaultView);
137506:     if (aGroup == contentPrefs.grouper.group(gBrowser.currentURI))
137506:       this._applyPrefToSetting(aValue);
137506:     else if (aGroup == null) {
137506:       this.globalValue = this._ensureValid(aValue);
137506: 
137506:       // If the current page doesn't have a site-specific preference,
137506:       // then its zoom should be set to the new global preference now that
137506:       // the global preference has changed.
137506:       if (!contentPrefs.hasPref(gBrowser.currentURI, this.name))
137506:         this._applyPrefToSetting();
136287:     }
  2585:   },
  2585: 
  8331:   onContentPrefRemoved: function FullZoom_onContentPrefRemoved(aGroup, aName) {
137506:     let contentPrefs = getContentPrefs(gBrowser.contentDocument.defaultView);
137506:     if (aGroup == contentPrefs.grouper.group(gBrowser.currentURI))
137506:       this._applyPrefToSetting();
137506:     else if (aGroup == null) {
137506:       this.globalValue = undefined;
137490: 
137506:       // If the current page doesn't have a site-specific preference,
137506:       // then its zoom should be set to the default preference now that
137506:       // the global preference has changed.
137506:       if (!contentPrefs.hasPref(gBrowser.currentURI, this.name))
137506:         this._applyPrefToSetting();
137490:     }
  2585:   },
  2585: 
  8331:   // location change observer
  2585: 
 31019:   /**
 31019:    * Called when the location of a tab changes.
 31019:    * When that happens, we need to update the current zoom level if appropriate.
 31019:    *
 31019:    * @param aURI
 31019:    *        A URI object representing the new location.
 31019:    * @param aIsTabSwitch
 31019:    *        Whether this location change has happened because of a tab switch.
 31019:    * @param aBrowser
 31019:    *        (optional) browser object displaying the document
 31019:    */
 31019:   onLocationChange: function FullZoom_onLocationChange(aURI, aIsTabSwitch, aBrowser) {
137506:     if (!aURI || (aIsTabSwitch && !this.siteSpecific))
  8331:       return;
 39808: 
 39808:     // Avoid the cps roundtrip and apply the default/global pref.
 97622:     if (aURI.spec == "about:blank") {
137506:       this._applyPrefToSetting(undefined, aBrowser);
 39808:       return;
 39808:     }
 39808: 
 59709:     let browser = aBrowser || gBrowser.selectedBrowser;
 59709: 
 87835:     // Media documents should always start at 1, and are not affected by prefs.
 87835:     if (!aIsTabSwitch && browser.contentDocument.mozSyntheticDocument) {
 87653:       ZoomManager.setZoomForBrowser(browser, 1);
 87653:       return;
 87653:     }
 87653: 
137506:     let contentPrefs = getContentPrefs(gBrowser.contentDocument.defaultView);
137506:     if (contentPrefs.hasCachedPref(aURI, this.name)) {
137506:       let zoomValue = contentPrefs.getPref(aURI, this.name);
137506:       this._applyPrefToSetting(zoomValue, browser);
137506:     } else {
137506:       var self = this;
137506:       contentPrefs.getPref(aURI, this.name, function (aResult) {
137506:         // Check that we're still where we expect to be in case this took a while.
137506:         // Null check currentURI, since the window may have been destroyed before
137506:         // we were called.
137506:         if (browser.currentURI && aURI.equals(browser.currentURI)) {
137506:           self._applyPrefToSetting(aResult, browser);
 51933:         }
137506:       });
137490:     }
  2585:   },
  2585: 
 11660:   // update state of zoom type menu item
 11660: 
 11660:   updateMenu: function FullZoom_updateMenu() {
 11660:     var menuItem = document.getElementById("toggle_zoom");
 11660: 
 11660:     menuItem.setAttribute("checked", !ZoomManager.useFullZoom);
 11660:   },
  2585: 
  2585:   //**************************************************************************//
  2585:   // Setting & Pref Manipulation
  2585: 
137506:   reduce: function FullZoom_reduce() {
  7187:     ZoomManager.reduce();
137506:     this._applySettingToPref();
  2585:   },
  2585: 
137506:   enlarge: function FullZoom_enlarge() {
  7187:     ZoomManager.enlarge();
137506:     this._applySettingToPref();
  2585:   },
  2585: 
137506:   reset: function FullZoom_reset() {
137506:     if (typeof this.globalValue != "undefined")
137506:       ZoomManager.zoom = this.globalValue;
137506:     else
137490:       ZoomManager.reset();
137506: 
137506:     this._removePref();
  2585:   },
  2585: 
  2585:   /**
  7187:    * Set the zoom level for the current tab.
  2585:    *
  8331:    * Per nsPresContext::setFullZoom, we can set the zoom to its current value
  8331:    * without significant impact on performance, as the setting is only applied
  8331:    * if it differs from the current setting.  In fact getting the zoom and then
  8331:    * checking ourselves if it differs costs more.
  2585:    * 
  8331:    * And perhaps we should always set the zoom even if it was more expensive,
124284:    * since nsDocumentViewer::SetTextZoom claims that child documents can have
  8331:    * a different text zoom (although it would be unusual), and it implies that
  8331:    * those child text zooms should get updated when the parent zoom gets set,
  8331:    * and perhaps the same is true for full zoom
124284:    * (although nsDocumentViewer::SetFullZoom doesn't mention it).
  2585:    *
  2585:    * So when we apply new zoom values to the browser, we simply set the zoom.
  2585:    * We don't check first to see if the new value is the same as the current
  2585:    * one.
137506:    **/
137506:   _applyPrefToSetting: function FullZoom__applyPrefToSetting(aValue, aBrowser) {
137506:     if ((!this.siteSpecific) || gInPrintPreviewMode)
 32357:       return;
  7740: 
 39808:     var browser = aBrowser || (gBrowser && gBrowser.selectedBrowser);
137506:     try {
137506:       if (browser.contentDocument.mozSyntheticDocument)
 87653:         return;
137506: 
137506:       if (typeof aValue != "undefined")
137506:         ZoomManager.setZoomForBrowser(browser, this._ensureValid(aValue));
137506:       else if (typeof this.globalValue != "undefined")
137506:         ZoomManager.setZoomForBrowser(browser, this.globalValue);
137506:       else
137506:         ZoomManager.setZoomForBrowser(browser, 1);
137490:     }
137506:     catch(ex) {}
  2585:   },
  2585: 
137506:   _applySettingToPref: function FullZoom__applySettingToPref() {
137506:     if (!this.siteSpecific || gInPrintPreviewMode ||
137506:         content.document.mozSyntheticDocument)
  7740:       return;
  7740: 
137506:     var zoomLevel = ZoomManager.zoom;
137506:     getContentPrefs(gBrowser.contentDocument.defaultView).setPref(gBrowser.currentURI, this.name, zoomLevel);
  2585:   },
  2585: 
137506:   _removePref: function FullZoom__removePref() {
137506:     if (!(content.document.mozSyntheticDocument))
137506:       getContentPrefs(gBrowser.contentDocument.defaultView).removePref(gBrowser.currentURI, this.name);
  2585:   },
  2585: 
  2585: 
  2585:   //**************************************************************************//
  2585:   // Utilities
  2585: 
  8331:   _ensureValid: function FullZoom__ensureValid(aValue) {
  2585:     if (isNaN(aValue))
  7187:       return 1;
  2585: 
  7187:     if (aValue < ZoomManager.MIN)
  7187:       return ZoomManager.MIN;
  2585: 
  7187:     if (aValue > ZoomManager.MAX)
  7187:       return ZoomManager.MAX;
  2585: 
  2585:     return aValue;
  2585:   }
  2585: };
