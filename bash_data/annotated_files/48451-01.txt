    1: /* vim:set sw=4 sts=4 et cin: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org widget code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Christian Biesinger <cbiesinger@web.de>.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include <gdk-pixbuf/gdk-pixbuf.h>
    1: 
    1: #include "gfxASurface.h"
    1: #include "gfxImageSurface.h"
    1: #include "gfxContext.h"
    1: 
30479: #include "imgIContainer.h"
    1: 
    1: #include "nsAutoPtr.h"
    1: 
    1: #include "nsImageToPixbuf.h"
    1: 
    1: NS_IMPL_ISUPPORTS1(nsImageToPixbuf, nsIImageToPixbuf)
    1: 
    1: inline unsigned char
    1: unpremultiply (unsigned char color,
    1:                unsigned char alpha)
    1: {
    1:     if (alpha == 0)
    1:         return 0;
    1:     // plus alpha/2 to round instead of truncate
    1:     return (color * 255 + alpha / 2) / alpha;
    1: }
    1: 
    1: NS_IMETHODIMP_(GdkPixbuf*)
30479: nsImageToPixbuf::ConvertImageToPixbuf(imgIContainer* aImage)
    1: {
    1:     return ImageToPixbuf(aImage);
    1: }
    1: 
    1: GdkPixbuf*
30479: nsImageToPixbuf::ImageToPixbuf(imgIContainer* aImage)
    1: {
30479:     nsRefPtr<gfxImageSurface> frame;
48451:     nsresult rv = aImage->CopyFrame(imgIContainer::FRAME_CURRENT,
32424:                                     imgIContainer::FLAG_SYNC_DECODE,
32424:                                     getter_AddRefs(frame));
    1: 
48451:     // If the last call failed, it was probably because our call stack originates
48451:     // in an imgIDecoderObserver event, meaning that we're not allowed request
48451:     // a sync decode. Presumably the originating event is something sensible like
48451:     // OnStopFrame(), so we can just retry the call without a sync decode.
48451:     if (NS_FAILED(rv))
48451:         aImage->CopyFrame(imgIContainer::FRAME_CURRENT,
48451:                           imgIContainer::FLAG_NONE,
48451:                           getter_AddRefs(frame));
48451: 
48451:     if (!frame)
48451:       return nsnull;
48451: 
30479:     return ImgSurfaceToPixbuf(frame, frame->Width(), frame->Height());
12652: }
12652: 
12652: GdkPixbuf*
12652: nsImageToPixbuf::ImgSurfaceToPixbuf(gfxImageSurface* aImgSurface, PRInt32 aWidth, PRInt32 aHeight)
12652: {
12652:     GdkPixbuf* pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, PR_TRUE, 8,
12652:                                        aWidth, aHeight);
12652:     if (!pixbuf)
12652:         return nsnull;
12652: 
12652:     PRUint32 rowstride = gdk_pixbuf_get_rowstride (pixbuf);
12652:     guchar* pixels = gdk_pixbuf_get_pixels (pixbuf);
12652: 
12652:     long cairoStride = aImgSurface->Stride();
12652:     unsigned char* cairoData = aImgSurface->Data();
12652: 
12652:     gfxASurface::gfxImageFormat format = aImgSurface->Format();
12652: 
12652:     for (PRInt32 row = 0; row < aHeight; ++row) {
12652:         for (PRInt32 col = 0; col < aWidth; ++col) {
12652:             guchar* pixel = pixels + row * rowstride + 4 * col;
12652: 
12652:             PRUint32* cairoPixel = reinterpret_cast<PRUint32*>
12652:                                                    ((cairoData + row * cairoStride + 4 * col));
12652: 
12652:             if (format == gfxASurface::ImageFormatARGB32) {
12652:                 const PRUint8 a = (*cairoPixel >> 24) & 0xFF;
12652:                 const PRUint8 r = unpremultiply((*cairoPixel >> 16) & 0xFF, a);
12652:                 const PRUint8 g = unpremultiply((*cairoPixel >>  8) & 0xFF, a);
12652:                 const PRUint8 b = unpremultiply((*cairoPixel >>  0) & 0xFF, a);
12652: 
12652:                 *pixel++ = r;
12652:                 *pixel++ = g;
12652:                 *pixel++ = b;
12652:                 *pixel++ = a;
12652:             } else {
12652:                 NS_ASSERTION(format == gfxASurface::ImageFormatRGB24,
12652:                              "unexpected format");
12652:                 const PRUint8 r = (*cairoPixel >> 16) & 0xFF;
12652:                 const PRUint8 g = (*cairoPixel >>  8) & 0xFF;
12652:                 const PRUint8 b = (*cairoPixel >>  0) & 0xFF;
12652: 
12652:                 *pixel++ = r;
12652:                 *pixel++ = g;
12652:                 *pixel++ = b;
12652:                 *pixel++ = 0xFF; // A
12652:             }
12652:         }
12652:     }
12652: 
12652:     return pixbuf;
    1: }
    1: 
    1: GdkPixbuf*
    1: nsImageToPixbuf::SurfaceToPixbuf(gfxASurface* aSurface, PRInt32 aWidth, PRInt32 aHeight)
    1: {
 1562:     if (aSurface->CairoStatus()) {
 1562:         NS_ERROR("invalid surface");
 1562:         return nsnull;
 1562:     }
 1562: 
    1:     nsRefPtr<gfxImageSurface> imgSurface;
    1:     if (aSurface->GetType() == gfxASurface::SurfaceTypeImage) {
 3233:         imgSurface = static_cast<gfxImageSurface*>
 3233:                                 (static_cast<gfxASurface*>(aSurface));
    1:     } else {
    1:         imgSurface = new gfxImageSurface(gfxIntSize(aWidth, aHeight),
    1: 					 gfxImageSurface::ImageFormatARGB32);
    1:                                        
    1:         if (!imgSurface)
    1:             return nsnull;
    1: 
    1:         nsRefPtr<gfxContext> context = new gfxContext(imgSurface);
    1:         if (!context)
    1:             return nsnull;
    1: 
    1:         context->SetOperator(gfxContext::OPERATOR_SOURCE);
    1:         context->SetSource(aSurface);
    1:         context->Paint();
    1:     }
    1: 
12652:     return ImgSurfaceToPixbuf(imgSurface, aWidth, aHeight);
12652: }
