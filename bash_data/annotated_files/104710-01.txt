 51215: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 51215:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 51215: 
 51215: #ifndef nsPNGDecoder_h__
 51215: #define nsPNGDecoder_h__
 51215: 
 51241: #include "Decoder.h"
 51215: 
 51215: #include "imgIDecoderObserver.h"
 51215: #include "gfxASurface.h"
 51215: 
 51215: #include "nsCOMPtr.h"
 51215: 
 51215: #include "png.h"
 51215: 
 51215: #include "qcms.h"
 51215: 
 51215: namespace mozilla {
 87852: namespace image {
 51215: class RasterImage;
 51215: 
 51241: class nsPNGDecoder : public Decoder
 51215: {
 51215: public:
 80695:   nsPNGDecoder(RasterImage &aImage, imgIDecoderObserver* aObserver);
 51215:   virtual ~nsPNGDecoder();
 51215: 
 53664:   virtual void InitInternal();
 53664:   virtual void WriteInternal(const char* aBuffer, PRUint32 aCount);
 78660:   virtual Telemetry::ID SpeedHistogram();
 51241: 
 51215:   void CreateFrame(png_uint_32 x_offset, png_uint_32 y_offset,
 51215:                    PRInt32 width, PRInt32 height,
 51215:                    gfxASurface::gfxImageFormat format);
 51215:   void SetAnimFrameInfo();
 51215: 
 51215:   void EndImageFrame();
 51215: 
 81491:   // Check if PNG is valid ICO (32bpp RGBA)
 81491:   // http://blogs.msdn.com/b/oldnewthing/archive/2010/10/22/10079192.aspx
 81491:   bool IsValidICO() const
 77228:   {
104710:     // If there are errors in the call to png_get_IHDR, the error_callback in
104710:     // nsPNGDecoder.cpp is called.  In this error callback we do a longjmp, so
104710:     // we need to save the jump buffer here. Oterwise we'll end up without a
104710:     // proper callstack.
104710:     if (setjmp(png_jmpbuf(mPNG))) {
104710:       // We got here from a longjmp call indirectly from png_get_IHDR
104710:       return false;
104710:     }
104710: 
 81491:     png_uint_32
 81491:         png_width,  // Unused
 81491:         png_height; // Unused
 81491: 
 81491:     int png_bit_depth,
 81491:         png_color_type;
 81491: 
 81491:     if (png_get_IHDR(mPNG, mInfo, &png_width, &png_height, &png_bit_depth,
 81491:                      &png_color_type, NULL, NULL, NULL)) {
 81491: 
 81491:       return (png_color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
 81491:               png_bit_depth == 8);
 81491:     } else {
 81491:       return false;
 77228:     }
 77228:   }
 77228: 
 51215: public:
 51215:   png_structp mPNG;
 51215:   png_infop mInfo;
 51215:   nsIntRect mFrameRect;
 51215:   PRUint8 *mCMSLine;
 51215:   PRUint8 *interlacebuf;
 51215:   PRUint8 *mImageData;
 51215:   qcms_profile *mInProfile;
 51215:   qcms_transform *mTransform;
 51215: 
 51215:   gfxASurface::gfxImageFormat format;
 51215: 
 51244:   // For size decodes
 51215:   PRUint8 *mHeaderBuf;
 51215:   PRUint32 mHeaderBytesRead;
 51215: 
 51215:   PRUint8 mChannels;
 79445:   bool mFrameHasNoAlpha;
 79445:   bool mFrameIsHidden;
 51240: 
 60418:   // whether CMS or premultiplied alpha are forced off
 60418:   PRUint32 mCMSMode;
 79445:   bool mDisablePremultipliedAlpha;
 60418:   
 51240:   /*
 51240:    * libpng callbacks
 51240:    *
 51240:    * We put these in the class so that they can access protected members.
 51240:    */
 51240:   static void PNGAPI info_callback(png_structp png_ptr, png_infop info_ptr);
 51240:   static void PNGAPI row_callback(png_structp png_ptr, png_bytep new_row,
 51240:                                   png_uint_32 row_num, int pass);
 51240: #ifdef PNG_APNG_SUPPORTED
 51240:   static void PNGAPI frame_info_callback(png_structp png_ptr,
 51240:                                          png_uint_32 frame_num);
 51240: #endif
 51240:   static void PNGAPI end_callback(png_structp png_ptr, png_infop info_ptr);
 51240:   static void PNGAPI error_callback(png_structp png_ptr,
 51240:                                     png_const_charp error_msg);
 51240:   static void PNGAPI warning_callback(png_structp png_ptr,
 51240:                                       png_const_charp warning_msg);
 77228: 
 77228:   // This is defined in the PNG spec as an invariant. We use it to
 77228:   // do manual validation without libpng.
 77228:   static const PRUint8 pngSignatureBytes[];
 51215: };
 51215: 
 87852: } // namespace image
 51241: } // namespace mozilla
 51241: 
 51215: #endif // nsPNGDecoder_h__
