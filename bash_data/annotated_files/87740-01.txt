 6059: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 6059: /* ***** BEGIN LICENSE BLOCK *****
 6059:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 6059:  *
 6059:  * The contents of this file are subject to the Mozilla Public License Version
 6059:  * 1.1 (the "License"); you may not use this file except in compliance with
 6059:  * the License. You may obtain a copy of the License at
 6059:  * http://www.mozilla.org/MPL/
 6059:  *
 6059:  * Software distributed under the License is distributed on an "AS IS" basis,
 6059:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 6059:  * for the specific language governing rights and limitations under the
 6059:  * License.
 6059:  *
 6059:  * The Original Code is mozilla.org code.
 6059:  *
 6059:  * The Initial Developer of the Original Code is
 6059:  * Netscape Communications Corporation.
 6059:  * Portions created by the Initial Developer are Copyright (C) 1998
 6059:  * the Initial Developer. All Rights Reserved.
 6059:  *
 6059:  * Contributor(s):
 6059:  *
 6059:  * Alternatively, the contents of this file may be used under the terms of
 6059:  * either of the GNU General Public License Version 2 or later (the "GPL"),
 6059:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 6059:  * in which case the provisions of the GPL or the LGPL are applicable instead
 6059:  * of those above. If you wish to allow use of your version of this file only
 6059:  * under the terms of either the GPL or the LGPL, and not to allow others to
 6059:  * use your version of this file under the terms of the MPL, indicate your
 6059:  * decision by deleting the provisions above and replace them with the notice
 6059:  * and other provisions required by the GPL or the LGPL. If you do not delete
 6059:  * the provisions above, a recipient may use your version of this file under
 6059:  * the terms of any one of the MPL, the GPL or the LGPL.
 6059:  *
 6059:  * ***** END LICENSE BLOCK ***** */
 6059: 
 6059: #include "nsDeque.h"
 6059: #include "nsCRT.h"
 6059: #ifdef DEBUG_rickg
 6059: #include <stdio.h>
 6059: #endif
 6059: 
 6059: /**
 6059:  * 07/02/2001  09:17p 509,104 clangref.pdf from openwatcom's site
 6059:  * Watcom C Language Reference Edition 11.0c
 6059:  * page 118 of 297
 6059:  *
 6059:  * The % symbol yields the remainder from the division of the first operand
 6059:  * by the second operand. The operands of % must have integral type.
 6059:  *
 6059:  * When both operands of % are positive, the result is a positive value
 6059:  * smaller than the second operand. When one or both operands is negative,
 6059:  * whether the result is positive or negative is implementation-defined.
 6059:  *
 6059:  */
 6059: /* Ok, so first of all, C is underspecified. joy.
 6059:  * The following functions do not provide a correct implementation of modulus
 6059:  * They provide functionality for x>-y.
 6059:  * There are risks of 2*y being greater than max int, which is part of the
 6059:  * reason no multiplication is used and other operations are avoided.
 6059:  *
 6059:  * modasgn
 6059:  * @param x variable
 6059:  * @param y expression
 6059:  * approximately equivalent to x %= y
 6059:  *
 6059:  * modulus
 6059:  * @param x expression
 6059:  * @param y expression
 6059:  * approximately equivalent to x % y
 6059:  */
 6059: #define modasgn(x,y) if (x<0) x+=y; x%=y
 6059: #define modulus(x,y) ((x<0)?(x+y)%(y):(x)%(y))
 6059: 
 6059: /**
 6059:  * Standard constructor
 6059:  * @param deallocator, called by Erase and ~nsDeque
 6059:  */
 6059: nsDeque::nsDeque(nsDequeFunctor* aDeallocator) {
 6059:   MOZ_COUNT_CTOR(nsDeque);
 6059:   mDeallocator=aDeallocator;
 6059:   mOrigin=mSize=0;
 6059:   mData=mBuffer; // don't allocate space until you must
 6059:   mCapacity=sizeof(mBuffer)/sizeof(mBuffer[0]);
 6059:   memset(mData, 0, mCapacity*sizeof(mBuffer[0]));
 6059: }
 6059: 
 6059: /**
 6059:  * Destructor
 6059:  */
 6059: nsDeque::~nsDeque() {
 6059:   MOZ_COUNT_DTOR(nsDeque);
 6059: 
 6059: #ifdef DEBUG_rickg
 6059:   char buffer[30];
 6059:   printf("Capacity: %i\n", mCapacity);
 6059: 
 6059:   static int mCaps[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 6059:   switch(mCapacity) {
 6059:     case 4:     mCaps[0]++; break;
 6059:     case 8:     mCaps[1]++; break;
 6059:     case 16:    mCaps[2]++; break;
 6059:     case 32:    mCaps[3]++; break;
 6059:     case 64:    mCaps[4]++; break;
 6059:     case 128:   mCaps[5]++; break;
 6059:     case 256:   mCaps[6]++; break;
 6059:     case 512:   mCaps[7]++; break;
 6059:     case 1024:  mCaps[8]++; break;
 6059:     case 2048:  mCaps[9]++; break;
 6059:     case 4096:  mCaps[10]++; break;
 6059:     default:
 6059:       break;
 6059:   }
 6059: #endif
 6059: 
 6059:   Erase();
 6059:   if (mData && (mData!=mBuffer)) {
34868:     free(mData);
 6059:   }
 6059:   mData=0;
 6059:   SetDeallocator(0);
 6059: }
 6059: 
 6059: /**
 6059:  * Set the functor to be called by Erase()
 6059:  * The deque owns the functor.
 6059:  *
 6059:  * @param   aDeallocator functor object for use by Erase()
 6059:  */
 6059: void nsDeque::SetDeallocator(nsDequeFunctor* aDeallocator){
 6059:   delete mDeallocator;
 6059:   mDeallocator=aDeallocator;
 6059: }
 6059: 
 6059: /**
 6059:  * Remove all items from container without destroying them.
 6059:  *
 6059:  * @return  *this
 6059:  */
 6059: nsDeque& nsDeque::Empty() {
 6059:   if (mSize && mData) {
 6059:     memset(mData, 0, mCapacity*sizeof(mData));
 6059:   }
 6059:   mSize=0;
 6059:   mOrigin=0;
 6059:   return *this;
 6059: }
 6059: 
 6059: /**
 6059:  * Remove and delete all items from container
 6059:  *
 6059:  * @return  *this
 6059:  */
 6059: nsDeque& nsDeque::Erase() {
 6059:   if (mDeallocator && mSize) {
 6059:     ForEach(*mDeallocator);
 6059:   }
 6059:   return Empty();
 6059: }
 6059: 
 6059: /**
 6059:  * This method quadruples the size of the deque
 6059:  * Elements in the deque are resequenced so that elements
 6059:  * in the deque are stored sequentially
 6059:  *
 6059:  * If the deque actually overflows, there's very little we can do.
79445:  * Perhaps this function should return bool/nsresult indicating success/failure.
 6059:  *
34421:  * @return  whether growing succeeded
 6059:  */
79445: bool nsDeque::GrowCapacity() {
 6059:   PRInt32 theNewSize=mCapacity<<2;
 6059:   NS_ASSERTION(theNewSize>mCapacity, "Overflow");
 6059:   if (theNewSize<=mCapacity)
80486:     return false;
34868:   void** temp=(void**)malloc(theNewSize * sizeof(void*));
33648:   if (!temp)
80486:     return false;
 6059: 
 6059:   //Here's the interesting part: You can't just move the elements
 6059:   //directly (in situ) from the old buffer to the new one.
 6059:   //Since capacity has changed, the old origin doesn't make
 6059:   //sense anymore. It's better to resequence the elements now.
 6059: 
33648:   memcpy(temp, mData + mOrigin, sizeof(void*) * (mCapacity - mOrigin));
33648:   memcpy(temp + (mCapacity - mOrigin), mData, sizeof(void*) * mOrigin);
33648: 
 6059:   if (mData != mBuffer) {
34868:     free(mData);
 6059:   }
33648: 
 6059:   mCapacity=theNewSize;
 6059:   mOrigin=0; //now realign the origin...
 6059:   mData=temp;
33648: 
80486:   return true;
 6059: }
 6059: 
 6059: /**
 6059:  * This method adds an item to the end of the deque.
 6059:  * This operation has the potential to cause the
 6059:  * underlying buffer to resize.
 6059:  *
 6059:  * @param   aItem: new item to be added to deque
 6059:  * @return  *this
 6059:  */
 6059: nsDeque& nsDeque::Push(void* aItem) {
33648:   if (mSize==mCapacity && !GrowCapacity()) {
33648:     NS_WARNING("out of memory");
33648:     return *this;
 6059:   }
 6059:   mData[modulus(mOrigin + mSize, mCapacity)]=aItem;
 6059:   mSize++;
 6059:   return *this;
 6059: }
 6059: 
 6059: /**
 6059:  * This method adds an item to the front of the deque.
 6059:  * This operation has the potential to cause the
 6059:  * underlying buffer to resize.
 6059:  *
 6059:  * --Commments for GrowCapacity() case
 6059:  * We've grown and shifted which means that the old
 6059:  * final element in the deque is now the first element
 6059:  * in the deque.  This is temporary.
 6059:  * We haven't inserted the new element at the front.
 6059:  *
 6059:  * To continue with the idea of having the front at zero
 6059:  * after a grow, we move the old final item (which through
 6059:  * the voodoo of mOrigin-- is now the first) to its final
 6059:  * position which is conveniently the old length.
 6059:  *
 6059:  * Note that this case only happens when the deque is full.
 6059:  * [And that pieces of this magic only work if the deque is full.]
 6059:  * picture:
 6059:  *   [ABCDEFGH] @[mOrigin:3]:D.
 6059:  * Task: PushFront("Z")
 6059:  * shift mOrigin so, @[mOrigin:2]:C
 6059:  * stretch and rearrange: (mOrigin:0)
 6059:  *   [CDEFGHAB ________ ________ ________]
 6059:  * copy: (The second C is currently out of bounds)
 6059:  *   [CDEFGHAB C_______ ________ ________]
 6059:  * later we will insert Z:
 6059:  *   [ZDEFGHAB C_______ ________ ________]
 6059:  * and increment size: 9. (C is no longer out of bounds)
 6059:  * --
 6059:  * @param   aItem: new item to be added to deque
 6059:  * @return  *this
 6059:  */
 6059: nsDeque& nsDeque::PushFront(void* aItem) {
 6059:   mOrigin--;
 6059:   modasgn(mOrigin,mCapacity);
 6059:   if (mSize==mCapacity) {
33648:     if (!GrowCapacity()) {
33648:       NS_WARNING("out of memory");
33648:       return *this;
33648:     }
 6059:     /* Comments explaining this are above*/
 6059:     mData[mSize]=mData[mOrigin];
 6059:   }
 6059:   mData[mOrigin]=aItem;
 6059:   mSize++;
 6059:   return *this;
 6059: }
 6059: 
 6059: /**
 6059:  * Remove and return the last item in the container.
 6059:  *
 6059:  * @return  ptr to last item in container
 6059:  */
 6059: void* nsDeque::Pop() {
 6059:   void* result=0;
 6059:   if (mSize>0) {
 6059:     --mSize;
 6059:     PRInt32 offset=modulus(mSize + mOrigin, mCapacity);
 6059:     result=mData[offset];
 6059:     mData[offset]=0;
 6059:     if (!mSize) {
 6059:       mOrigin=0;
 6059:     }
 6059:   }
 6059:   return result;
 6059: }
 6059: 
 6059: /**
 6059:  * This method gets called you want to remove and return
 6059:  * the first member in the container.
 6059:  *
 6059:  * @return  last item in container
 6059:  */
 6059: void* nsDeque::PopFront() {
 6059:   void* result=0;
 6059:   if (mSize>0) {
 6059:     NS_ASSERTION(mOrigin < mCapacity, "Error: Bad origin");
 6059:     result=mData[mOrigin];
 6059:     mData[mOrigin++]=0;     //zero it out for debugging purposes.
 6059:     mSize--;
 6059:     // Cycle around if we pop off the end
 6059:     // and reset origin if when we pop the last element
 6059:     if (mCapacity==mOrigin || !mSize) {
 6059:       mOrigin=0;
 6059:     }
 6059:   }
 6059:   return result;
 6059: }
 6059: 
 6059: /**
 6059:  * This method gets called you want to peek at the bottom
 6059:  * member without removing it.
 6059:  *
 6059:  * @return  last item in container
 6059:  */
 6059: void* nsDeque::Peek() {
 6059:   void* result=0;
 6059:   if (mSize>0) {
 6059:     result = mData[modulus(mSize - 1 + mOrigin, mCapacity)];
 6059:   }
 6059:   return result;
 6059: } 
 6059: 
 6059: /**
 6059:  * This method gets called you want to peek at the topmost
 6059:  * member without removing it.
 6059:  *
 6059:  * @return  last item in container
 6059:  */
 6059: void* nsDeque::PeekFront() {
 6059:   void* result=0;
 6059:   if (mSize>0) {
 6059:     result=mData[mOrigin];
 6059:   }
 6059:   return result;
 6059: }
 6059: 
 6059: /**
 6059:  * Call this to retrieve the ith element from this container.
 6059:  * Keep in mind that accessing the underlying elements is
 6059:  * done in a relative fashion. Object 0 is not necessarily
 6059:  * the first element (the first element is at mOrigin).
 6059:  *
 6059:  * @param   aIndex : 0 relative offset of item you want
 6059:  * @return  void* or null
 6059:  */
 6059: void* nsDeque::ObjectAt(PRInt32 aIndex) const {
 6059:   void* result=0;
 6059:   if ((aIndex>=0) && (aIndex<mSize)) {
 6059:     result=mData[modulus(mOrigin + aIndex, mCapacity)];
 6059:   }
 6059:   return result;
 6059: }
 6059: 
87740: void* nsDeque::RemoveObjectAt(PRInt32 aIndex) {
87740:   if ((aIndex<0) || (aIndex>=mSize)) {
87740:     return 0;
87740:   }
87740:   void* result=mData[modulus(mOrigin + aIndex, mCapacity)];
87740: 
87740:   // "Shuffle down" all elements in the array by 1, overwritting the element
87740:   // being removed.
87740:   for (PRInt32 i=aIndex; i<mSize; i++) {
87740:     mData[modulus(mOrigin + i, mCapacity)] = mData[modulus(mOrigin + i + 1, mCapacity)];
87740:   }
87740:   mSize--;
87740: 
87740:   return result;
87740: }
87740: 
 6059: /**
 6059:  * Create and return an iterator pointing to
 6059:  * the beginning of the queue. Note that this
 6059:  * takes the circular buffer semantics into account.
 6059:  *
 6059:  * @return  new deque iterator, init'ed to 1st item
 6059:  */
 6059: nsDequeIterator nsDeque::Begin() const{
 6059:   return nsDequeIterator(*this, 0);
 6059: }
 6059: 
 6059: /**
 6059:  * Create and return an iterator pointing to
 6059:  * the last item in the deque.
 6059:  * Note that this takes the circular buffer semantics
 6059:  * into account.
 6059:  *
 6059:  * @return  new deque iterator, init'ed to the last item
 6059:  */
 6059: nsDequeIterator nsDeque::End() const{
 6059:   return nsDequeIterator(*this, mSize - 1);
 6059: }
 6059: 
 6059: void* nsDeque::Last() const {
 6059:   return End().GetCurrent();
 6059: }
 6059: 
 6059: /**
 6059:  * Call this method when you want to iterate all the
 6059:  * members of the container, passing a functor along
 6059:  * to call your code.
 6059:  *
 6059:  * @param   aFunctor object to call for each member
 6059:  * @return  *this
 6059:  */
 6059: void nsDeque::ForEach(nsDequeFunctor& aFunctor) const{
 6059:   for (PRInt32 i=0; i<mSize; i++) {
 6059:     aFunctor(ObjectAt(i));
 6059:   }
 6059: }
 6059: 
 6059: /**
 6059:  * Call this method when you want to iterate all the
 6059:  * members of the container, calling the functor you 
 6059:  * passed with each member. This process will interrupt
 6059:  * if your function returns non 0 to this method.
 6059:  *
 6059:  * @param   aFunctor object to call for each member
 6059:  * @return  first nonzero result of aFunctor or 0.
 6059:  */
 6059: const void* nsDeque::FirstThat(nsDequeFunctor& aFunctor) const{
 6059:   for (PRInt32 i=0; i<mSize; i++) {
 6059:     void* obj=aFunctor(ObjectAt(i));
 6059:     if (obj) {
 6059:       return obj;
 6059:     }
 6059:   }
 6059:   return 0;
 6059: }
 6059: 
 6059: /******************************************************
 6059:  * Here comes the nsDequeIterator class...
 6059:  ******************************************************/
 6059: 
 6059: /**
 6059:  * DequeIterator is an object that knows how to iterate (forward and backward)
 6059:  * through a Deque. Normally, you don't need to do this, but there are some special
 6059:  * cases where it is pretty handy, so here you go.
 6059:  *
 6059:  * This is a standard dequeiterator constructor
 6059:  *
 6059:  * @param   aQueue is the deque object to be iterated
 6059:  * @param   aIndex is the starting position for your iteration
 6059:  */
 6059: nsDequeIterator::nsDequeIterator(const nsDeque& aQueue, int aIndex)
 6059: : mIndex(aIndex),
 6059:   mDeque(aQueue)
 6059: {
 6059: }
 6059: 
 6059: /**
 6059:  * Create a copy of a DequeIterator
 6059:  *
 6059:  * @param   aCopy is another iterator to copy from
 6059:  */
 6059: nsDequeIterator::nsDequeIterator(const nsDequeIterator& aCopy)
 6059: : mIndex(aCopy.mIndex),
 6059:   mDeque(aCopy.mDeque)
 6059: {
 6059: }
 6059: 
 6059: /**
 6059:  * Moves iterator to first element in deque
 6059:  * @return  *this
 6059:  */
 6059: nsDequeIterator& nsDequeIterator::First(){
 6059:   mIndex=0;
 6059:   return *this;
 6059: }
 6059: 
 6059: /**
 6059:  * Standard assignment operator for dequeiterator
 6059:  *
 6059:  * @param   aCopy is an iterator to be copied from
 6059:  * @return  *this
 6059:  */
 6059: nsDequeIterator& nsDequeIterator::operator=(const nsDequeIterator& aCopy) {
 6059:   NS_ASSERTION(&mDeque==&aCopy.mDeque,"you can't change the deque that an interator is iterating over, sorry.");
 6059:   mIndex=aCopy.mIndex;
 6059:   return *this;
 6059: }
 6059: 
 6059: /**
 6059:  * preform ! operation against to iterators to test for equivalence
 6059:  * (or lack thereof)!
 6059:  *
 6059:  * @param   aIter is the object to be compared to
 6059:  * @return  TRUE if NOT equal.
 6059:  */
79445: bool nsDequeIterator::operator!=(nsDequeIterator& aIter) {
79445:   return bool(!this->operator==(aIter));
 6059: }
 6059: 
 6059: /**
 6059:  * Compare two iterators for increasing order.
 6059:  *
 6059:  * @param   aIter is the other iterator to be compared to
 6059:  * @return  TRUE if this object points to an element before
 6059:  *          the element pointed to by aIter.
 6059:  *          FALSE if this and aIter are not iterating over the same deque.
 6059:  */
79445: bool nsDequeIterator::operator<(nsDequeIterator& aIter) {
79445:   return bool(((mIndex<aIter.mIndex) && (&mDeque==&aIter.mDeque)));
 6059: }
 6059: 
 6059: /**
 6059:  * Compare two iterators for equivalence.
 6059:  *
 6059:  * @param   aIter is the other iterator to be compared to
 6059:  * @return  TRUE if EQUAL
 6059:  */
79445: bool nsDequeIterator::operator==(nsDequeIterator& aIter) {
79445:   return bool(((mIndex==aIter.mIndex) && (&mDeque==&aIter.mDeque)));
 6059: }
 6059: 
 6059: /**
 6059:  * Compare two iterators for non strict decreasing order.
 6059:  *
 6059:  * @param   aIter is the other iterator to be compared to
 6059:  * @return  TRUE if this object points to the same element, or
 6059:  *          an element after the element pointed to by aIter.
 6059:  *          FALSE if this and aIter are not iterating over the same deque.
 6059:  */
79445: bool nsDequeIterator::operator>=(nsDequeIterator& aIter) {
79445:   return bool(((mIndex>=aIter.mIndex) && (&mDeque==&aIter.mDeque)));
 6059: }
 6059: 
 6059: /**
 6059:  * Pre-increment operator
 6059:  *
 6059:  * @return  object at post-incremented index
 6059:  */
 6059: void* nsDequeIterator::operator++() {
 6059:   NS_ASSERTION(mIndex<mDeque.mSize,
 6059:     "You have reached the end of the Internet."\
 6059:     "You have seen everything there is to see. Please go back. Now."
 6059:   );
 6059: #ifndef TIMELESS_LIGHTWEIGHT
 6059:   if (mIndex>=mDeque.mSize) return 0;
 6059: #endif
 6059:   return mDeque.ObjectAt(++mIndex);
 6059: }
 6059: 
 6059: /**
 6059:  * Post-increment operator
 6059:  *
 6059:  * @param   param is ignored
 6059:  * @return  object at pre-incremented index
 6059:  */
 6059: void* nsDequeIterator::operator++(int) {
 6059:   NS_ASSERTION(mIndex<=mDeque.mSize,
 6059:     "You have already reached the end of the Internet."\
 6059:     "You have seen everything there is to see. Please go back. Now."
 6059:   );
 6059: #ifndef TIMELESS_LIGHTWEIGHT
 6059:   if (mIndex>mDeque.mSize) return 0;
 6059: #endif
 6059:   return mDeque.ObjectAt(mIndex++);
 6059: }
 6059: 
 6059: /**
 6059:  * Pre-decrement operator
 6059:  *
 6059:  * @return  object at pre-decremented index
 6059:  */
 6059: void* nsDequeIterator::operator--() {
 6059:   NS_ASSERTION(mIndex>=0,
 6059:     "You have reached the beginning of the Internet."\
 6059:     "You have seen everything there is to see. Please go forward. Now."
 6059:   );
 6059: #ifndef TIMELESS_LIGHTWEIGHT
 6059:   if (mIndex<0) return 0;
 6059: #endif
 6059:   return mDeque.ObjectAt(--mIndex);
 6059: }
 6059: 
 6059: /**
 6059:  * Post-decrement operator
 6059:  *
 6059:  * @param   param is ignored
 6059:  * @return  object at post-decremented index
 6059:  */
 6059: void* nsDequeIterator::operator--(int) {
 6059:   NS_ASSERTION(mIndex>=0,
 6059:     "You have already reached the beginning of the Internet."\
 6059:     "You have seen everything there is to see. Please go forward. Now."
 6059:   );
 6059: #ifndef TIMELESS_LIGHTWEIGHT
 6059:   if (mIndex<0) return 0;
 6059: #endif
 6059:   return mDeque.ObjectAt(mIndex--);
 6059: }
 6059: 
 6059: /**
 6059:  * Dereference operator
 6059:  * Note that the iterator floats, so you don't need to do:
 6059:  * <code>++iter; aDeque.PopFront();</code>
 6059:  * Unless you actually want your iterator to jump 2 spaces.
 6059:  *
 6059:  * Picture: [1 2I 3 4]
 6059:  * PopFront()
 6059:  * Picture: [2 3I 4]
 6059:  * Note that I still happily points to object at the second index
 6059:  *
 6059:  * @return  object at ith index
 6059:  */
 6059: void* nsDequeIterator::GetCurrent() {
 6059:   NS_ASSERTION(mIndex<mDeque.mSize&&mIndex>=0,"Current is out of bounds");
 6059: #ifndef TIMELESS_LIGHTWEIGHT
 6059:   if (mIndex>=mDeque.mSize||mIndex<0) return 0;
 6059: #endif
 6059:   return mDeque.ObjectAt(mIndex);
 6059: }
 6059: 
 6059: /**
 6059:  * Call this method when you want to iterate all the
 6059:  * members of the container, passing a functor along
 6059:  * to call your code.
 6059:  *
 6059:  * @param   aFunctor object to call for each member
 6059:  * @return  *this
 6059:  */
 6059: void nsDequeIterator::ForEach(nsDequeFunctor& aFunctor) const{
 6059:   mDeque.ForEach(aFunctor);
 6059: }
 6059: 
 6059: /**
 6059:  * Call this method when you want to iterate all the
 6059:  * members of the container, calling the functor you 
 6059:  * passed with each member. This process will interrupt
 6059:  * if your function returns non 0 to this method.
 6059:  *
 6059:  * @param   aFunctor object to call for each member
 6059:  * @return  first nonzero result of aFunctor or 0.
 6059:  */
 6059: const void* nsDequeIterator::FirstThat(nsDequeFunctor& aFunctor) const{
 6059:   return mDeque.FirstThat(aFunctor);
 6059: }
