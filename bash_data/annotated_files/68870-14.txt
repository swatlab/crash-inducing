48711: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
48711: /* ***** BEGIN LICENSE BLOCK *****
48711:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
48711:  *
48711:  * The contents of this file are subject to the Mozilla Public License Version
48711:  * 1.1 (the "License"); you may not use this file except in compliance with
48711:  * the License. You may obtain a copy of the License at
48711:  * http://www.mozilla.org/MPL/
48711:  *
48711:  * Software distributed under the License is distributed on an "AS IS" basis,
48711:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
48711:  * for the specific language governing rights and limitations under the
48711:  * License.
48711:  *
48711:  * The Original Code is mozilla.org code.
48711:  *
48711:  * The Initial Developer of the Original Code is
48711:  * the Mozilla Foundation.
48711:  * Portions created by the Initial Developer are Copyright (C) 2010
48711:  * the Initial Developer. All Rights Reserved.
48711:  *
48711:  * Contributor(s):
48711:  *   Felipe Gomes <felipc@gmail.com>
48711:  *
48711:  * Alternatively, the contents of this file may be used under the terms of
48711:  * either the GNU General Public License Version 2 or later (the "GPL"), or
48711:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
48711:  * in which case the provisions of the GPL or the LGPL are applicable instead
48711:  * of those above. If you wish to allow use of your version of this file only
48711:  * under the terms of either the GPL or the LGPL, and not to allow others to
48711:  * use your version of this file under the terms of the MPL, indicate your
48711:  * decision by deleting the provisions above and replace them with the notice
48711:  * and other provisions required by the GPL or the LGPL. If you do not delete
48711:  * the provisions above, a recipient may use your version of this file under
48711:  * the terms of any one of the MPL, the GPL or the LGPL.
48711:  *
48711:  * ***** END LICENSE BLOCK ***** */
48711: 
48711: #include "nsDOMMozTouchEvent.h"
48711: #include "nsGUIEvent.h"
48711: #include "nsContentUtils.h"
48711: 
48711: nsDOMMozTouchEvent::nsDOMMozTouchEvent(nsPresContext* aPresContext, nsMozTouchEvent* aEvent)
48711:   : nsDOMMouseEvent(aPresContext, aEvent ? aEvent : new nsMozTouchEvent(PR_FALSE, 0, nsnull, 0))
48711: {
48711:   NS_ASSERTION(mEvent->eventStructType == NS_MOZTOUCH_EVENT, "event type mismatch NS_MOZTOUCH_EVENT");
48711: 
48711:   if (aEvent) {
48711:     mEventIsInternal = PR_FALSE;
48711:   } else {
48711:     mEventIsInternal = PR_TRUE;
48711:     mEvent->time = PR_Now();
48711:     mEvent->refPoint.x = mEvent->refPoint.y = 0;
48711:   }
48711: }
48711: 
48711: nsDOMMozTouchEvent::~nsDOMMozTouchEvent()
48711: {
48711:   if (mEventIsInternal) {
48711:     delete static_cast<nsMozTouchEvent*>(mEvent);
48711:     mEvent = nsnull;
48711:   }
48711: }
48711: 
48711: NS_IMPL_ADDREF_INHERITED(nsDOMMozTouchEvent, nsDOMMouseEvent)
48711: NS_IMPL_RELEASE_INHERITED(nsDOMMozTouchEvent, nsDOMMouseEvent)
48711: 
48711: DOMCI_DATA(MozTouchEvent, nsDOMMozTouchEvent)
48711: 
48711: NS_INTERFACE_MAP_BEGIN(nsDOMMozTouchEvent)
48711:   NS_INTERFACE_MAP_ENTRY(nsIDOMMozTouchEvent)
48711:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(MozTouchEvent)
48711: NS_INTERFACE_MAP_END_INHERITING(nsDOMMouseEvent)
48711: 
48711: /* readonly attribute unsigned long steramId; */
48711: NS_IMETHODIMP
48711: nsDOMMozTouchEvent::GetStreamId(PRUint32 *aStreamId)
48711: {
48711:   NS_ENSURE_ARG_POINTER(aStreamId);
48711:   *aStreamId = static_cast<nsMozTouchEvent*>(mEvent)->streamId;
48711:   return NS_OK;
48711: }
48711: 
48711: NS_IMETHODIMP
48711: nsDOMMozTouchEvent::InitMozTouchEvent(const nsAString& aTypeArg,
48711:                                       PRBool aCanBubbleArg,
48711:                                       PRBool aCancelableArg,
68870:                                       nsIDOMAbstractView* aViewArg,
48711:                                       PRInt32 aDetailArg,
48711:                                       PRInt32 aScreenX,
48711:                                       PRInt32 aScreenY,
48711:                                       PRInt32 aClientX,
48711:                                       PRInt32 aClientY,
48711:                                       PRBool aCtrlKeyArg,
48711:                                       PRBool aAltKeyArg,
48711:                                       PRBool aShiftKeyArg,
48711:                                       PRBool aMetaKeyArg,
48711:                                       PRUint16 aButton,
48711:                                       nsIDOMEventTarget* aRelatedTarget,
48711:                                       PRUint32 aStreamId)
48711: {
48711:   nsresult rv = nsDOMMouseEvent::InitMouseEvent(aTypeArg,
48711:                                                 aCanBubbleArg,
48711:                                                 aCancelableArg,
48711:                                                 aViewArg,
48711:                                                 aDetailArg,
48711:                                                 aScreenX,
48711:                                                 aScreenY,
48711:                                                 aClientX,
48711:                                                 aClientY,
48711:                                                 aCtrlKeyArg,
48711:                                                 aAltKeyArg,
48711:                                                 aShiftKeyArg,
48711:                                                 aMetaKeyArg,
48711:                                                 aButton,
48711:                                                 aRelatedTarget);
48711:   NS_ENSURE_SUCCESS(rv, rv);
48711: 
48711:   nsMozTouchEvent* mozTouchEvent = static_cast<nsMozTouchEvent*>(mEvent);
48711:   mozTouchEvent->streamId = aStreamId;
48711: 
48711:   return NS_OK;
48711: }
48711: 
48711: nsresult NS_NewDOMMozTouchEvent(nsIDOMEvent** aInstancePtrResult,
48711:                                      nsPresContext* aPresContext,
48711:                                      nsMozTouchEvent *aEvent)
48711: {
48711:   nsDOMMozTouchEvent *it = new nsDOMMozTouchEvent(aPresContext, aEvent);
68870:   if (nsnull == it) {
68870:     return NS_ERROR_OUT_OF_MEMORY;
68870:   }
48711:   return CallQueryInterface(it, aInstancePtrResult);
48711: }
