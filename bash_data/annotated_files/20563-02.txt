    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Daniel Glazman <glazman@netscape.com>
    1:  *   Mats Palmgren <mats.palmgren@bredband.net>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * temporary (expanded) representation of the property-value pairs
    1:  * within a CSS declaration using during parsing and mutation, and
    1:  * representation of complex values for CSS properties
    1:  */
    1: 
    1: #include "nscore.h"
    1: #include "nsCSSStruct.h"
    1: #include "nsString.h"
    1: #include "nsIAtom.h"
    1: #include "nsUnicharUtils.h"
    1: #include "nsCRT.h"
    1: #include "nsCSSProps.h"
    1: #include "nsFont.h"
    1: 
    1: #include "nsStyleConsts.h"
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsPrintfCString.h"
    1: 
    1: // --- nsCSSFont -----------------
    1: 
    1: nsCSSFont::nsCSSFont(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSFont);
    1: }
    1: 
    1: nsCSSFont::~nsCSSFont(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSFont);
    1: }
    1: 
20563: // --- nsCSSValueList -----------------
    1: 
20563: nsCSSValueList::~nsCSSValueList()
    1: {
20563:   MOZ_COUNT_DTOR(nsCSSValueList);
20563:   NS_CSS_DELETE_LIST_MEMBER(nsCSSValueList, this, mNext);
    1: }
    1: 
20563: nsCSSValueList*
20563: nsCSSValueList::Clone(PRBool aDeep) const
    1: {
20563:   nsCSSValueList* result = new nsCSSValueList(*this);
20563:   if (NS_UNLIKELY(!result))
20563:     return result;
20563:   if (aDeep)
20563:     NS_CSS_CLONE_LIST_MEMBER(nsCSSValueList, this, mNext, result, (PR_FALSE));
20563:   return result;
    1: }
    1: 
    1: /* static */ PRBool
    1: nsCSSValueList::Equal(nsCSSValueList* aList1, nsCSSValueList* aList2)
    1: {
    1:   if (aList1 == aList2)
    1:     return PR_TRUE;
    1:     
    1:   nsCSSValueList *p1 = aList1, *p2 = aList2;
    1:   for ( ; p1 && p2; p1 = p1->mNext, p2 = p2->mNext) {
    1:     if (p1->mValue != p2->mValue)
    1:       return PR_FALSE;
    1:   }
    1:   return !p1 && !p2; // true if same length, false otherwise
    1: }
    1: 
    1: // --- nsCSSColor -----------------
    1: 
    1: nsCSSColor::nsCSSColor(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSColor);
    1: }
    1: 
    1: nsCSSColor::~nsCSSColor(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSColor);
    1: }
    1: 
    1: // --- nsCSSText -----------------
    1: 
    1: nsCSSText::nsCSSText(void)
    1:   : mTextShadow(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSText);
    1: }
    1: 
    1: nsCSSText::~nsCSSText(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSText);
20563:   delete mTextShadow;
    1: }
    1: 
    1: // --- nsCSSRect -----------------
    1: 
    1: nsCSSRect::nsCSSRect(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSRect);
    1: }
    1: 
    1: nsCSSRect::nsCSSRect(const nsCSSRect& aCopy)
    1:   : mTop(aCopy.mTop),
    1:     mRight(aCopy.mRight),
    1:     mBottom(aCopy.mBottom),
    1:     mLeft(aCopy.mLeft)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSRect);
    1: }
    1: 
    1: nsCSSRect::~nsCSSRect()
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSRect);
    1: }
    1: 
    1: void nsCSSRect::SetAllSidesTo(const nsCSSValue& aValue)
    1: {
    1:   mTop = aValue;
    1:   mRight = aValue;
    1:   mBottom = aValue;
    1:   mLeft = aValue;
    1: }
    1: 
    1: #if (NS_SIDE_TOP != 0) || (NS_SIDE_RIGHT != 1) || (NS_SIDE_BOTTOM != 2) || (NS_SIDE_LEFT != 3)
    1: #error "Somebody changed the side constants."
    1: #endif
    1: 
    1: /* static */ const nsCSSRect::side_type nsCSSRect::sides[4] = {
    1:   &nsCSSRect::mTop,
    1:   &nsCSSRect::mRight,
    1:   &nsCSSRect::mBottom,
    1:   &nsCSSRect::mLeft,
    1: };
    1: 
20039: // --- nsCSSCornerSizes -----------------
20039: 
20039: nsCSSCornerSizes::nsCSSCornerSizes(void)
20039: {
20039:   MOZ_COUNT_CTOR(nsCSSCornerSizes);
20039: }
20039: 
20039: nsCSSCornerSizes::nsCSSCornerSizes(const nsCSSCornerSizes& aCopy)
20039:   : mTopLeft(aCopy.mTopLeft),
20039:     mTopRight(aCopy.mTopRight),
20039:     mBottomRight(aCopy.mBottomRight),
20039:     mBottomLeft(aCopy.mBottomLeft)
20039: {
20039:   MOZ_COUNT_CTOR(nsCSSCornerSizes);
20039: }
20039: 
20039: nsCSSCornerSizes::~nsCSSCornerSizes()
20039: {
20039:   MOZ_COUNT_DTOR(nsCSSCornerSizes);
20039: }
20039: 
20039: void
20039: nsCSSCornerSizes::SetAllCornersTo(const nsCSSValue& aValue)
20039: {
20039:   NS_FOR_CSS_FULL_CORNERS(corner) {
20039:     this->GetFullCorner(corner).SetBothValuesTo(aValue);
20039:   }
20039: }
20039: 
20039: void
20563: nsCSSCornerSizes::Reset()
20563: {
20039:   NS_FOR_CSS_FULL_CORNERS(corner) {
20039:     this->GetFullCorner(corner).Reset();
20039:   }
20039: }
20039: 
20039: #if NS_CORNER_TOP_LEFT != 0 || NS_CORNER_TOP_RIGHT != 1 || \
20039:     NS_CORNER_BOTTOM_RIGHT != 2 || NS_CORNER_BOTTOM_LEFT != 3
20039: #error "Somebody changed the corner constants."
20039: #endif
20039: 
20039: /* static */ const nsCSSCornerSizes::corner_type
20039: nsCSSCornerSizes::corners[4] = {
20039:   &nsCSSCornerSizes::mTopLeft,
20039:   &nsCSSCornerSizes::mTopRight,
20039:   &nsCSSCornerSizes::mBottomRight,
20039:   &nsCSSCornerSizes::mBottomLeft,
20039: };
20039: 
    1: // --- nsCSSValueListRect -----------------
    1: 
    1: nsCSSValueListRect::nsCSSValueListRect(void)
    1:   : mTop(nsnull),
    1:     mRight(nsnull),
    1:     mBottom(nsnull),
    1:     mLeft(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSValueListRect);
    1: }
    1: 
    1: nsCSSValueListRect::nsCSSValueListRect(const nsCSSValueListRect& aCopy)
    1:   : mTop(aCopy.mTop),
    1:     mRight(aCopy.mRight),
    1:     mBottom(aCopy.mBottom),
    1:     mLeft(aCopy.mLeft)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSValueListRect);
    1: }
    1: 
    1: nsCSSValueListRect::~nsCSSValueListRect()
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSValueListRect);
    1: }
    1: 
    1: /* static */ const nsCSSValueListRect::side_type
    1: nsCSSValueListRect::sides[4] = {
    1:   &nsCSSValueListRect::mTop,
    1:   &nsCSSValueListRect::mRight,
    1:   &nsCSSValueListRect::mBottom,
    1:   &nsCSSValueListRect::mLeft,
    1: };
    1: 
    1: // --- nsCSSDisplay -----------------
    1: 
19214: /* During allocation, null-out the transform list. */
19214: nsCSSDisplay::nsCSSDisplay(void) : mTransform(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSDisplay);
    1: }
    1: 
    1: nsCSSDisplay::~nsCSSDisplay(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSDisplay);
    1: }
    1: 
    1: // --- nsCSSMargin -----------------
    1: 
    1: nsCSSMargin::nsCSSMargin(void)
15699:   : mBoxShadow(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSMargin);
    1: }
    1: 
    1: nsCSSMargin::~nsCSSMargin(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSMargin);
20563:   delete mBoxShadow;
    1: }
    1: 
    1: // --- nsCSSPosition -----------------
    1: 
    1: nsCSSPosition::nsCSSPosition(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSPosition);
    1: }
    1: 
    1: nsCSSPosition::~nsCSSPosition(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSPosition);
    1: }
    1: 
    1: // --- nsCSSList -----------------
    1: 
    1: nsCSSList::nsCSSList(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSList);
    1: }
    1: 
    1: nsCSSList::~nsCSSList(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSList);
    1: }
    1: 
    1: // --- nsCSSTable -----------------
    1: 
    1: nsCSSTable::nsCSSTable(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSTable);
    1: }
    1: 
    1: nsCSSTable::~nsCSSTable(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSTable);
    1: }
    1: 
    1: // --- nsCSSBreaks -----------------
    1: 
    1: nsCSSBreaks::nsCSSBreaks(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSBreaks);
    1: }
    1: 
    1: nsCSSBreaks::~nsCSSBreaks(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSBreaks);
    1: }
    1: 
    1: // --- nsCSSPage -----------------
    1: 
    1: nsCSSPage::nsCSSPage(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSPage);
    1: }
    1: 
    1: nsCSSPage::~nsCSSPage(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSPage);
    1: }
    1: 
    1: // --- nsCSSContent support -----------------
    1: 
16372: nsCSSValuePairList::~nsCSSValuePairList()
    1: {
16372:   MOZ_COUNT_DTOR(nsCSSValuePairList);
20563:   NS_CSS_DELETE_LIST_MEMBER(nsCSSValuePairList, this, mNext);
20563: }
20563: 
20563: nsCSSValuePairList*
20563: nsCSSValuePairList::Clone(PRBool aDeep) const
20563: {
20563:   nsCSSValuePairList* result = new nsCSSValuePairList(*this);
20563:   if (NS_UNLIKELY(!result))
20563:     return result;
20563:   if (aDeep)
20563:     NS_CSS_CLONE_LIST_MEMBER(nsCSSValuePairList, this, mNext, result,
20563:                              (PR_FALSE));
20563:   return result;
    1: }
    1: 
    1: /* static */ PRBool
16372: nsCSSValuePairList::Equal(nsCSSValuePairList* aList1,
16372:                           nsCSSValuePairList* aList2)
    1: {
    1:   if (aList1 == aList2)
    1:     return PR_TRUE;
    1: 
16372:   nsCSSValuePairList *p1 = aList1, *p2 = aList2;
    1:   for ( ; p1 && p2; p1 = p1->mNext, p2 = p2->mNext) {
16372:     if (p1->mXValue != p2->mXValue ||
16372:         p1->mYValue != p2->mYValue)
    1:       return PR_FALSE;
    1:   }
    1:   return !p1 && !p2; // true if same length, false otherwise
    1: }
    1: 
    1: // --- nsCSSContent -----------------
    1: 
    1: nsCSSContent::nsCSSContent(void)
    1:   : mContent(nsnull),
    1:     mCounterIncrement(nsnull),
    1:     mCounterReset(nsnull),
    1:     mQuotes(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSContent);
    1: }
    1: 
    1: nsCSSContent::~nsCSSContent(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSContent);
20563:   delete mContent;
20563:   delete mCounterIncrement;
20563:   delete mCounterReset;
20563:   delete mQuotes;
    1: }
    1: 
    1: // --- nsCSSUserInterface -----------------
    1: 
    1: nsCSSUserInterface::nsCSSUserInterface(void)
    1:   : mCursor(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSUserInterface);
    1: }
    1: 
    1: nsCSSUserInterface::~nsCSSUserInterface(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSUserInterface);
20563:   delete mCursor;
    1: }
    1: 
    1: // --- nsCSSAural -----------------
    1: 
    1: nsCSSAural::nsCSSAural(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSAural);
    1: }
    1: 
    1: nsCSSAural::~nsCSSAural(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSAural);
    1: }
    1: 
    1: // --- nsCSSXUL -----------------
    1: 
    1: nsCSSXUL::nsCSSXUL(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSXUL);
    1: }
    1: 
    1: nsCSSXUL::~nsCSSXUL(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSXUL);
    1: }
    1: 
    1: // --- nsCSSColumn -----------------
    1: 
    1: nsCSSColumn::nsCSSColumn(void)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSColumn);
    1: }
    1: 
    1: nsCSSColumn::~nsCSSColumn(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSColumn);
    1: }
    1: 
    1: #ifdef MOZ_SVG
    1: // --- nsCSSSVG -----------------
    1: 
    1: nsCSSSVG::nsCSSSVG(void) : mStrokeDasharray(nsnull)
    1: {
    1:   MOZ_COUNT_CTOR(nsCSSSVG);
    1: }
    1: 
    1: nsCSSSVG::~nsCSSSVG(void)
    1: {
    1:   MOZ_COUNT_DTOR(nsCSSSVG);
20563:   delete mStrokeDasharray;
    1: }
    1: 
    1: #endif // MOZ_SVG
