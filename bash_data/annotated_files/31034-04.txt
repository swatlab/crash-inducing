16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
16295:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2001             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295: 
16295:  ********************************************************************
16295: 
16295:  function: libvorbis codec headers
31034:  last mod: $Id: codec.h 16037 2009-05-26 21:10:58Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #ifndef _vorbis_codec_h_
16295: #define _vorbis_codec_h_
16295: 
16295: #ifdef __cplusplus
16295: extern "C"
16295: {
16295: #endif /* __cplusplus */
16295: 
16295: #include <ogg/ogg.h>
16295: 
16295: typedef struct vorbis_info{
16295:   int version;
16295:   int channels;
16295:   long rate;
16295: 
16295:   /* The below bitrate declarations are *hints*.
16295:      Combinations of the three values carry the following implications:
16295: 
16295:      all three set to the same value:
16295:        implies a fixed rate bitstream
16295:      only nominal set:
16295:        implies a VBR stream that averages the nominal bitrate.  No hard
16295:        upper/lower limit
16295:      upper and or lower set:
16295:        implies a VBR bitstream that obeys the bitrate limits. nominal
16295:        may also be set to give a nominal rate.
16295:      none set:
16295:        the coder does not care to speculate.
16295:   */
16295: 
16295:   long bitrate_upper;
16295:   long bitrate_nominal;
16295:   long bitrate_lower;
16295:   long bitrate_window;
16295: 
16295:   void *codec_setup;
16295: } vorbis_info;
16295: 
16295: /* vorbis_dsp_state buffers the current vorbis audio
16295:    analysis/synthesis state.  The DSP state belongs to a specific
16295:    logical bitstream ****************************************************/
16295: typedef struct vorbis_dsp_state{
16295:   int analysisp;
16295:   vorbis_info *vi;
16295: 
16295:   float **pcm;
16295:   float **pcmret;
16295:   int      pcm_storage;
16295:   int      pcm_current;
16295:   int      pcm_returned;
16295: 
16295:   int  preextrapolate;
16295:   int  eofflag;
16295: 
16295:   long lW;
16295:   long W;
16295:   long nW;
16295:   long centerW;
16295: 
16295:   ogg_int64_t granulepos;
16295:   ogg_int64_t sequence;
16295: 
16295:   ogg_int64_t glue_bits;
16295:   ogg_int64_t time_bits;
16295:   ogg_int64_t floor_bits;
16295:   ogg_int64_t res_bits;
16295: 
16295:   void       *backend_state;
16295: } vorbis_dsp_state;
16295: 
16295: typedef struct vorbis_block{
16295:   /* necessary stream state for linking to the framing abstraction */
16295:   float  **pcm;       /* this is a pointer into local storage */
16295:   oggpack_buffer opb;
16295: 
16295:   long  lW;
16295:   long  W;
16295:   long  nW;
16295:   int   pcmend;
16295:   int   mode;
16295: 
16295:   int         eofflag;
16295:   ogg_int64_t granulepos;
16295:   ogg_int64_t sequence;
16295:   vorbis_dsp_state *vd; /* For read-only access of configuration */
16295: 
16295:   /* local storage to avoid remallocing; it's up to the mapping to
16295:      structure it */
16295:   void               *localstore;
16295:   long                localtop;
16295:   long                localalloc;
16295:   long                totaluse;
16295:   struct alloc_chain *reap;
16295: 
16295:   /* bitmetrics for the frame */
16295:   long glue_bits;
16295:   long time_bits;
16295:   long floor_bits;
16295:   long res_bits;
16295: 
16295:   void *internal;
16295: 
16295: } vorbis_block;
16295: 
16295: /* vorbis_block is a single block of data to be processed as part of
16295: the analysis/synthesis stream; it belongs to a specific logical
16295: bitstream, but is independant from other vorbis_blocks belonging to
16295: that logical bitstream. *************************************************/
16295: 
16295: struct alloc_chain{
16295:   void *ptr;
16295:   struct alloc_chain *next;
16295: };
16295: 
16295: /* vorbis_info contains all the setup information specific to the
16295:    specific compression/decompression mode in progress (eg,
16295:    psychoacoustic settings, channel setup, options, codebook
16295:    etc). vorbis_info and substructures are in backends.h.
16295: *********************************************************************/
16295: 
16295: /* the comments are not part of vorbis_info so that vorbis_info can be
16295:    static storage */
16295: typedef struct vorbis_comment{
16295:   /* unlimited user comment fields.  libvorbis writes 'libvorbis'
16295:      whatever vendor is set to in encode */
16295:   char **user_comments;
16295:   int   *comment_lengths;
16295:   int    comments;
16295:   char  *vendor;
16295: 
16295: } vorbis_comment;
16295: 
16295: 
16295: /* libvorbis encodes in two abstraction layers; first we perform DSP
16295:    and produce a packet (see docs/analysis.txt).  The packet is then
16295:    coded into a framed OggSquish bitstream by the second layer (see
16295:    docs/framing.txt).  Decode is the reverse process; we sync/frame
16295:    the bitstream and extract individual packets, then decode the
16295:    packet back into PCM audio.
16295: 
16295:    The extra framing/packetizing is used in streaming formats, such as
16295:    files.  Over the net (such as with UDP), the framing and
16295:    packetization aren't necessary as they're provided by the transport
16295:    and the streaming layer is not used */
16295: 
16295: /* Vorbis PRIMITIVES: general ***************************************/
16295: 
16295: extern void     vorbis_info_init(vorbis_info *vi);
16295: extern void     vorbis_info_clear(vorbis_info *vi);
16295: extern int      vorbis_info_blocksize(vorbis_info *vi,int zo);
16295: extern void     vorbis_comment_init(vorbis_comment *vc);
30043: extern void     vorbis_comment_add(vorbis_comment *vc, const char *comment);
16295: extern void     vorbis_comment_add_tag(vorbis_comment *vc,
30043:                                        const char *tag, const char *contents);
30043: extern char    *vorbis_comment_query(vorbis_comment *vc, const char *tag, int count);
30043: extern int      vorbis_comment_query_count(vorbis_comment *vc, const char *tag);
16295: extern void     vorbis_comment_clear(vorbis_comment *vc);
16295: 
16295: extern int      vorbis_block_init(vorbis_dsp_state *v, vorbis_block *vb);
16295: extern int      vorbis_block_clear(vorbis_block *vb);
25959: extern void     vorbis_dsp_init(vorbis_dsp_state *v);
16295: extern void     vorbis_dsp_clear(vorbis_dsp_state *v);
16295: extern double   vorbis_granule_time(vorbis_dsp_state *v,
16295:                                     ogg_int64_t granulepos);
16295: 
30043: extern const char *vorbis_version_string(void);
30043: 
16295: /* Vorbis PRIMITIVES: analysis/DSP layer ****************************/
16295: 
16295: extern int      vorbis_analysis_init(vorbis_dsp_state *v,vorbis_info *vi);
16295: extern int      vorbis_commentheader_out(vorbis_comment *vc, ogg_packet *op);
16295: extern int      vorbis_analysis_headerout(vorbis_dsp_state *v,
16295:                                           vorbis_comment *vc,
16295:                                           ogg_packet *op,
16295:                                           ogg_packet *op_comm,
16295:                                           ogg_packet *op_code);
16295: extern float  **vorbis_analysis_buffer(vorbis_dsp_state *v,int vals);
16295: extern int      vorbis_analysis_wrote(vorbis_dsp_state *v,int vals);
16295: extern int      vorbis_analysis_blockout(vorbis_dsp_state *v,vorbis_block *vb);
16295: extern int      vorbis_analysis(vorbis_block *vb,ogg_packet *op);
16295: 
16295: extern int      vorbis_bitrate_addblock(vorbis_block *vb);
16295: extern int      vorbis_bitrate_flushpacket(vorbis_dsp_state *vd,
16295:                                            ogg_packet *op);
16295: 
16295: /* Vorbis PRIMITIVES: synthesis layer *******************************/
16295: extern int      vorbis_synthesis_idheader(ogg_packet *op);
16295: extern int      vorbis_synthesis_headerin(vorbis_info *vi,vorbis_comment *vc,
16295:                                           ogg_packet *op);
16295: 
16295: extern int      vorbis_synthesis_init(vorbis_dsp_state *v,vorbis_info *vi);
16295: extern int      vorbis_synthesis_restart(vorbis_dsp_state *v);
16295: extern int      vorbis_synthesis(vorbis_block *vb,ogg_packet *op);
16295: extern int      vorbis_synthesis_trackonly(vorbis_block *vb,ogg_packet *op);
16295: extern int      vorbis_synthesis_blockin(vorbis_dsp_state *v,vorbis_block *vb);
16295: extern int      vorbis_synthesis_pcmout(vorbis_dsp_state *v,float ***pcm);
16295: extern int      vorbis_synthesis_lapout(vorbis_dsp_state *v,float ***pcm);
16295: extern int      vorbis_synthesis_read(vorbis_dsp_state *v,int samples);
16295: extern long     vorbis_packet_blocksize(vorbis_info *vi,ogg_packet *op);
16295: 
16295: extern int      vorbis_synthesis_halfrate(vorbis_info *v,int flag);
16295: extern int      vorbis_synthesis_halfrate_p(vorbis_info *v);
16295: 
16295: /* Vorbis ERRORS and return codes ***********************************/
16295: 
16295: #define OV_FALSE      -1
16295: #define OV_EOF        -2
16295: #define OV_HOLE       -3
16295: 
16295: #define OV_EREAD      -128
16295: #define OV_EFAULT     -129
16295: #define OV_EIMPL      -130
16295: #define OV_EINVAL     -131
16295: #define OV_ENOTVORBIS -132
16295: #define OV_EBADHEADER -133
16295: #define OV_EVERSION   -134
16295: #define OV_ENOTAUDIO  -135
16295: #define OV_EBADPACKET -136
16295: #define OV_EBADLINK   -137
16295: #define OV_ENOSEEK    -138
16295: 
16295: #ifdef __cplusplus
16295: }
16295: #endif /* __cplusplus */
16295: 
16295: #endif
16295: 
