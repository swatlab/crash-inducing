50491: /*
50491:  * Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies)
50491:  *
50491:  *  This library is free software; you can redistribute it and/or
50491:  *  modify it under the terms of the GNU Lesser General Public
50491:  *  License as published by the Free Software Foundation; either
50491:  *  version 2 of the License, or (at your option) any later version.
50491:  *
50491:  *  This library is distributed in the hope that it will be useful,
50491:  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
50491:  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
50491:  *  Lesser General Public License for more details.
50491:  *
50491:  *  You should have received a copy of the GNU Lesser General Public
50491:  *  License along with this library; if not, write to the Free Software
50491:  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, 
50491:  *  Boston, MA  02110-1301  USA
50491:  *
50491:  */
50491: 
50491: #include "config.h"
50491: 
50491: #include "ExecutableAllocator.h"
50491: 
50491: #if ENABLE_ASSEMBLER && WTF_PLATFORM_SYMBIAN
50491: 
50491: #include <e32hal.h>
50491: #include <e32std.h>
50491: 
50491: // Set the page size to 256 Kb to compensate for moving memory model limitation
50491: const size_t MOVING_MEM_PAGE_SIZE = 256 * 1024; 
50491: 
50491: namespace JSC {
50491: 
50491: void ExecutableAllocator::intializePageSize()
50491: {
50491: #if WTF_CPU_ARMV5_OR_LOWER
50491:     // The moving memory model (as used in ARMv5 and earlier platforms)
50491:     // on Symbian OS limits the number of chunks for each process to 16. 
50491:     // To mitigate this limitation increase the pagesize to 
50491:     // allocate less of larger chunks.
50491:     ExecutableAllocator::pageSize = MOVING_MEM_PAGE_SIZE;
50491: #else
50491:     TInt page_size;
50491:     UserHal::PageSizeInBytes(page_size);
50491:     ExecutableAllocator::pageSize = page_size;
50491: #endif
50491: }
50491: 
50491: ExecutablePool::Allocation ExecutablePool::systemAlloc(size_t n)
50491: {
50491:     RChunk* codeChunk = new RChunk();
50491: 
50491:     TInt errorCode = codeChunk->CreateLocalCode(n, n);
50491: 
50491:     char* allocation = reinterpret_cast<char*>(codeChunk->Base());
50491:     ExecutablePool::Allocation alloc = { allocation, n, codeChunk };
50491:     return alloc;
50491: }
50491: 
50491: void ExecutablePool::systemRelease(const ExecutablePool::Allocation& alloc)
50491: { 
50491:     alloc.chunk->Close();
50491:     delete alloc.chunk;
50491: }
50491: 
50491: #if ENABLE_ASSEMBLER_WX_EXCLUSIVE
50491: #error "ASSEMBLER_WX_EXCLUSIVE not yet suported on this platform."
50491: #endif
50491: 
50491: }
50491: 
50491: #endif // HAVE(ASSEMBLER)
