93271: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
93271: /* This Source Code Form is subject to the terms of the Mozilla Public
93271:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
93271:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
46991: 
50547: #ifndef mozilla_imagelib_DiscardTracker_h_
50547: #define mozilla_imagelib_DiscardTracker_h_
46991: 
93271: #include "mozilla/LinkedList.h"
93271: #include "mozilla/TimeStamp.h"
47317: 
46991: class nsITimer;
46991: 
50547: namespace mozilla {
87852: namespace image {
93271: 
50549: class RasterImage;
50547: 
46991: /**
93271:  * This static class maintains a linked list of RasterImage objects which are
93271:  * eligible for discarding.
93271:  *
93271:  * When Reset() is called, the node is removed from its position in the list
93271:  * (if it was there before) and appended to the beginnings of the list.
93271:  *
93271:  * Periodically (on a timer and when we notice that we're using more memory
93271:  * than we'd like for decoded images), we go through the list and discard
93271:  * decoded data from images at the end of the list.
46991:  */
50547: class DiscardTracker
46991: {
46991:   public:
93271:     /**
93271:      * The DiscardTracker keeps a linked list of Node objects.  Each object
93271:      * points to a RasterImage and contains a timestamp indicating when the
93271:      * node was inserted into the tracker.
93271:      *
93271:      * This structure is embedded within each RasterImage object, and we do
93271:      * |mDiscardTrackerNode.img = this| on RasterImage construction.  Thus, a
93271:      * RasterImage must always call DiscardTracker::Remove() in its destructor
93271:      * to avoid having the tracker point to bogus memory.
93271:      */
93271:     struct Node : public LinkedListElement<Node>
93271:     {
93271:       RasterImage *img;
93271:       TimeStamp timestamp;
93271:     };
93271: 
93271:     /**
93271:      * Add an image to the front of the tracker's list, or move it to the front
97995:      * if it's already in the list.  This function is main thread only.
93271:      */
93271:     static nsresult Reset(struct Node* node);
93271: 
93271:     /**
93271:      * Remove a node from the tracker; do nothing if the node is currently
97995:      * untracked.  This function is main thread only.
93271:      */
93271:     static void Remove(struct Node* node);
93271: 
93271:     /**
97995:      * Initializes the discard tracker.  This function is main thread only.
97995:      */
97995:     static nsresult Initialize();
97995: 
97995:     /**
93271:      * Shut the discard tracker down.  This should be called on XPCOM shutdown
97995:      * so we destroy the discard timer's nsITimer.  This function is main thread
97995:      * only.
93271:      */
46991:     static void Shutdown();
93271: 
93271:     /**
93271:      * Discard the decoded image data for all images tracked by the discard
97995:      * tracker.  This function is main thread only.
93271:      */
93271:     static void DiscardAll();
93271: 
93271:     /**
93271:      * Inform the discard tracker that we've allocated or deallocated some
93271:      * memory for a decoded image.  We use this to determine when we've
97995:      * allocated too much memory and should discard some images.  This function
97995:      * can be called from any thread and is thread-safe.
93271:      */
93271:     static void InformAllocation(PRInt64 bytes);
93271: 
93271:   private:
93271:     /**
93271:      * This is called when the discard timer fires; it calls into DiscardNow().
93271:      */
93271:     friend int DiscardTimeoutChangedCallback(const char* aPref, void *aClosure);
93271: 
93271:     /**
93271:      * When run, this runnable sets sDiscardRunnablePending to false and calls
93271:      * DiscardNow().
93271:      */
93271:     class DiscardRunnable : public nsRunnable
93271:     {
93271:       NS_IMETHOD Run();
93271:     };
93271: 
91943:     static void ReloadTimeout();
93271:     static nsresult EnableTimer();
93271:     static void DisableTimer();
93271:     static void MaybeDiscardSoon();
46991:     static void TimerCallback(nsITimer *aTimer, void *aClosure);
93271:     static void DiscardNow();
93271: 
93271:     static LinkedList<Node> sDiscardableImages;
93271:     static nsCOMPtr<nsITimer> sTimer;
93271:     static bool sInitialized;
93271:     static bool sTimerOn;
97995:     static PRInt32 sDiscardRunnablePending;
93271:     static PRInt64 sCurrentDecodedImageBytes;
93271:     static PRUint32 sMinDiscardTimeoutMs;
93271:     static PRUint32 sMaxDecodedImageKB;
97995:     // Lock for safegarding the 64-bit sCurrentDecodedImageBytes
97995:     static PRLock *sAllocationLock;
46991: };
46991: 
87852: } // namespace image
50547: } // namespace mozilla
50547: 
50547: #endif /* mozilla_imagelib_DiscardTracker_h_ */
