71697: // |jit-test| mjitalways;debug
71697: 
71697: function stackToString(stack) {
71697:     var str = "|";
71697:     for (var i = 0; i < stack.length; ++i) {
71697:         if (typeof stack[i] === "string")
71697:             str += stack[i];
71697:         else
71697:             str += stack[i].name;
71697:         str += "|";
71697:     }
71697:     return str;
71697: }
71697: 
71697: function assertStackIs(s1) {
71697:     var s2 = dumpStack();
71697:     var me = s2.shift();
71697:     assertEq(me, assertStackIs);
71697:     try {
71697:         if (s1.length != s2.length)
71697:             throw "Length " + s1.length + " not equal " + s2.length;
71697:         for (var i = 0; i < s1.length; ++i) {
71697:             var match;
71697:             if (typeof s1[i] === "string" && (m = s1[i].match(/bound\((.*)\)/))) {
71697:                 if (s2[i].name != m[1] || s2[i].toSource().indexOf("[native code]") < 0)
71697:                     throw "Element " + i + " not bound function";
71697:             } else if (s1[i] != s2[i]) {
71697:                 throw "Element " + i + " not equal";
71697:             }
71697:         }
71697:     }
71697:     catch (e) {
71697:         print("Given     = " + stackToString(s1));
71697:         print("dumpStack = " + stackToString(s2));
71697:         throw e;
71697:     }
71697: }
71697: 
71697: /*********************************************/
71697: 
71697: (function f() { evalInFrame(0, "assertStackIs(['eval-code', evalInFrame, f, 'global-code'])"); })();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'global-code'])"); })() })();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'bound(f)', 'global-code'])"); })() }).bind()();
71697: 
71697: (function f() { evalInFrame(0, "assertStackIs(['eval-code', evalInFrame, f, 'global-code'])", true); })();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'global-code'])", true); })() })();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'bound(f)', 'global-code'])", true); })() }).bind()();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'bound(f)', 'global-code'])", true); }).bind()() }).bind()();
71697: (function f() { (function g() { evalInFrame(1, "assertStackIs(['eval-code', f, 'bound(f)', 'global-code'])", true); }).bind().bind()() }).bind()();
71697: 
71697: (function f() { var o = { toString:function() { evalInFrame(1, "assertStackIs(['eval-code', f, 'global-code'])"); }}; [o,o].sort() })();
71697: (function f() { var o = { toString:function() { evalInFrame(1, "assertStackIs(['eval-code', f, 'global-code'])", true); }}; [o,o].sort() })();
72063: 
72063: function inner() {
72063:     (function puppies() {
72063:         evalInFrame(1, "assertStackIs(['eval-code', inner, String.prototype.replace, outer, String.prototype.replace, 'global-code'])");
72063:     })();
72063: }
72063: function outer() {
72063:     "bbb".replace(/b/g, inner);
72063: }
72063: "aaa".replace(/a/g, outer);
