47584: /*
47584:  * Copyright (C) 2008 Apple Inc. All rights reserved.
47584:  *
47584:  * Redistribution and use in source and binary forms, with or without
47584:  * modification, are permitted provided that the following conditions
47584:  * are met:
47584:  * 1. Redistributions of source code must retain the above copyright
47584:  *    notice, this list of conditions and the following disclaimer.
47584:  * 2. Redistributions in binary form must reproduce the above copyright
47584:  *    notice, this list of conditions and the following disclaimer in the
47584:  *    documentation and/or other materials provided with the distribution.
47584:  *
47584:  * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
47584:  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
47584:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
47584:  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
47584:  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
47584:  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
47584:  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
47584:  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
47584:  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
47584:  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
47584:  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
47584:  */
47584: 
47584: #include "ExecutableAllocator.h"
47584: 
47584: #if ENABLE_ASSEMBLER
47584: 
90106: #include "prmjtime.h"
90106: 
47584: namespace JSC {
47584: 
47584: size_t ExecutableAllocator::pageSize = 0;
64268: size_t ExecutableAllocator::largeAllocSize = 0;
47584: 
69289: ExecutablePool::~ExecutablePool()
69289: {
69289:     m_allocator->releasePoolPages(this);
69289: }
69289: 
77559: void
83122: ExecutableAllocator::sizeOfCode(size_t *method, size_t *regexp, size_t *unused) const
69289: {
83122:     *method = 0;
83122:     *regexp = 0;
83122:     *unused = 0;
77559: 
96396:     if (m_pools.initialized()) {
69289:         for (ExecPoolHashSet::Range r = m_pools.all(); !r.empty(); r.popFront()) {
69289:             ExecutablePool* pool = r.front();
83122:             *method += pool->m_mjitCodeMethod;
83122:             *regexp += pool->m_mjitCodeRegexp;
83122:             *unused += pool->m_allocation.size - pool->m_mjitCodeMethod - pool->m_mjitCodeRegexp;
69289:         }
69289:     }
96396: }
69289: 
47584: }
47584: 
47584: #endif // HAVE(ASSEMBLER)
