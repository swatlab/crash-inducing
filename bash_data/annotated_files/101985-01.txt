     1: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 99753: /* This Source Code Form is subject to the terms of the Mozilla Public
 99753:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99753:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #include "nsString.h"
     1: #include "nsIComponentManager.h"
     1: #include "nsCOMPtr.h"
     1: #include "nsXPCOM.h"
     1: #include "nsISupportsPrimitives.h"
     1: #include "nsXPIDLString.h"
     1: #include "nsScriptLoader.h"
     1: #include "nsEscape.h"
     1: #include "nsIParser.h"
     1: #include "nsIDTD.h"
     1: #include "nsNetCID.h"
     1: #include "nsNetUtil.h"
     1: #include "nsParserCIID.h"
 75263: #include "nsContentUtils.h"
     1: #include "nsIContentSink.h"
     1: #include "nsIDocumentEncoder.h"
     1: #include "nsIDOMDocumentFragment.h"
     1: #include "nsIFragmentContentSink.h"
     1: #include "nsIDOMDocument.h"
     1: #include "nsIDOMNodeList.h"
     1: #include "nsIDOMNode.h"
     1: #include "nsIDOMElement.h"
     1: #include "nsIDocument.h"
     1: #include "nsIContent.h"
     1: #include "nsAttrName.h"
     1: #include "nsHTMLParts.h"
     1: #include "nsContentCID.h"
     1: #include "nsIScriptableUnescapeHTML.h"
 91109: #include "nsParserUtils.h"
     1: #include "nsAutoPtr.h"
 74556: #include "nsTreeSanitizer.h"
 74556: #include "nsHtml5Module.h"
     1: 
     1: #define XHTML_DIV_TAG "div xmlns=\"http://www.w3.org/1999/xhtml\""
     1: 
 91109: NS_IMPL_ISUPPORTS2(nsParserUtils,
 91108:                    nsIScriptableUnescapeHTML,
 91108:                    nsIParserUtils)
     1: 
     1: static NS_DEFINE_CID(kCParserCID, NS_PARSER_CID);
     1: 
 91108: 
 91108: 
 91108: NS_IMETHODIMP
 91109: nsParserUtils::ConvertToPlainText(const nsAString& aFromStr,
 91108:                                   PRUint32 aFlags,
 91108:                                   PRUint32 aWrapCol,
 91108:                                   nsAString& aToStr)
 91108: {
 91108:   return nsContentUtils::ConvertToPlainText(aFromStr,
 91108:     aToStr,
 91108:     aFlags,
 91108:     aWrapCol);
 91108: }
 91108: 
     1: NS_IMETHODIMP
 91109: nsParserUtils::Unescape(const nsAString& aFromStr,
     1:                         nsAString& aToStr)
     1: {
 91108:   return nsContentUtils::ConvertToPlainText(aFromStr,
 91108:     aToStr,
 91108:     nsIDocumentEncoder::OutputSelectionOnly |
 91108:     nsIDocumentEncoder::OutputAbsoluteLinks,
 91108:     0);
     1: }
     1: 
 93448: NS_IMETHODIMP
 93448: nsParserUtils::Sanitize(const nsAString& aFromStr,
 93448:                         PRUint32 aFlags,
 93448:                         nsAString& aToStr)
 93448: {
 93448:   nsCOMPtr<nsIURI> uri;
 93448:   NS_NewURI(getter_AddRefs(uri), "about:blank");
 93448:   nsCOMPtr<nsIPrincipal> principal =
 93448:     do_CreateInstance("@mozilla.org/nullprincipal;1");
 93448:   nsCOMPtr<nsIDOMDocument> domDocument;
 93448:   nsresult rv = nsContentUtils::CreateDocument(EmptyString(),
 93448:                                                EmptyString(),
 93448:                                                nsnull,
 93448:                                                uri,
 93448:                                                uri,
 93448:                                                principal,
 93448:                                                nsnull,
 93448:                                                DocumentFlavorHTML,
 93448:                                                getter_AddRefs(domDocument));
 93448:   NS_ENSURE_SUCCESS(rv, rv);
 93448: 
 93448:   nsCOMPtr<nsIDocument> document = do_QueryInterface(domDocument);
 93448:   rv = nsContentUtils::ParseDocumentHTML(aFromStr, document, false);
 93448:   NS_ENSURE_SUCCESS(rv, rv);
 93448: 
 93448:   nsTreeSanitizer sanitizer(aFlags);
 93448:   sanitizer.Sanitize(document);
 93448: 
 93448:   nsCOMPtr<nsIDocumentEncoder> encoder =
 93448:     do_CreateInstance(NS_DOC_ENCODER_CONTRACTID_BASE "text/html");
 93448: 
 93448:   encoder->NativeInit(document,
 93448:                       NS_LITERAL_STRING("text/html"),
 93448:                       nsIDocumentEncoder::OutputDontRewriteEncodingDeclaration |
 93448:                       nsIDocumentEncoder::OutputNoScriptContent |
 93448:                       nsIDocumentEncoder::OutputEncodeBasicEntities |
 93448:                       nsIDocumentEncoder::OutputLFLineBreak |
 93448:                       nsIDocumentEncoder::OutputRaw);
 93448: 
 93448:   return encoder->EncodeToString(aToStr);
 93448: }
 93448: 
     1: NS_IMETHODIMP
 91109: nsParserUtils::ParseFragment(const nsAString& aFragment,
 79445:                              bool aIsXML,
     1:                              nsIURI* aBaseURI,
     1:                              nsIDOMElement* aContextElement,
     1:                              nsIDOMDocumentFragment** aReturn)
     1: {
 93647:   return nsParserUtils::ParseFragment(aFragment,
 93647:                                       0,
 93647:                                       aIsXML,
 93647:                                       aBaseURI,
 93647:                                       aContextElement,
 93647:                                       aReturn);
 93647: }
 93647: 
 93647: NS_IMETHODIMP
 93647: nsParserUtils::ParseFragment(const nsAString& aFragment,
 93647:                              PRUint32 aFlags,
 93647:                              bool aIsXML,
 93647:                              nsIURI* aBaseURI,
 93647:                              nsIDOMElement* aContextElement,
 93647:                              nsIDOMDocumentFragment** aReturn)
 93647: {
     1:   NS_ENSURE_ARG(aContextElement);
     1:   *aReturn = nsnull;
     1: 
     1:   nsresult rv;
101985:   nsCOMPtr<nsIParser> parser = do_CreateInstance(kCParserCID, &rv);
101985:   NS_ENSURE_SUCCESS(rv, rv);
101985: 
     1:   nsCOMPtr<nsIDocument> document;
     1:   nsCOMPtr<nsIDOMDocument> domDocument;
     1:   nsCOMPtr<nsIDOMNode> contextNode;
     1:   contextNode = do_QueryInterface(aContextElement);
     1:   contextNode->GetOwnerDocument(getter_AddRefs(domDocument));
     1:   document = do_QueryInterface(domDocument);
     1:   NS_ENSURE_TRUE(document, NS_ERROR_NOT_AVAILABLE);
     1: 
101969:   nsAutoScriptBlockerSuppressNodeRemoved autoBlocker;
101969: 
     1:   // stop scripts
     1:   nsRefPtr<nsScriptLoader> loader;
 79445:   bool scripts_enabled = false;
     1:   if (document) {
  2007:     loader = document->ScriptLoader();
     1:     scripts_enabled = loader->GetEnabled();
     1:   }
     1:   if (scripts_enabled) {
 80486:     loader->SetEnabled(false);
     1:   }
     1: 
     1:   // Wrap things in a div or body for parsing, but it won't show up in
     1:   // the fragment.
 14205:   nsAutoTArray<nsString, 2> tagStack;
     1:   nsCAutoString base, spec;
     1:   if (aIsXML) {
     1:     // XHTML
     1:     if (aBaseURI) {
     1:       base.Append(NS_LITERAL_CSTRING(XHTML_DIV_TAG));
     1:       base.Append(NS_LITERAL_CSTRING(" xml:base=\""));
     1:       aBaseURI->GetSpec(spec);
     1:       // nsEscapeHTML is good enough, because we only need to get
     1:       // quotes, ampersands, and angle brackets
     1:       char* escapedSpec = nsEscapeHTML(spec.get());
     1:       if (escapedSpec)
     1:         base += escapedSpec;
     1:       NS_Free(escapedSpec);
     1:       base.Append(NS_LITERAL_CSTRING("\""));
  7884:       tagStack.AppendElement(NS_ConvertUTF8toUTF16(base));
     1:     }  else {
  7884:       tagStack.AppendElement(NS_LITERAL_STRING(XHTML_DIV_TAG));
     1:     }
     1:   }
     1: 
     1:   if (NS_SUCCEEDED(rv)) {
 74556:     nsCOMPtr<nsIContent> fragment;
 74556:     if (aIsXML) {
 74622:       rv = nsContentUtils::ParseFragmentXML(aFragment,
 74622:                                             document,
 74622:                                             tagStack,
 80486:                                             true,
 74622:                                             aReturn);
 74556:       fragment = do_QueryInterface(*aReturn);
     1:     } else {
 74556:       NS_NewDocumentFragment(aReturn,
 74556:                              document->NodeInfoManager());
 74556:       fragment = do_QueryInterface(*aReturn);
 80380:       rv = nsContentUtils::ParseFragmentHTML(aFragment,
 74556:                                              fragment,
 74556:                                              nsGkAtoms::body,
 74556:                                              kNameSpaceID_XHTML,
 80486:                                              false,
 80486:                                              true);
 74556:       // Now, set the base URI on all subtree roots.
 74728:       if (aBaseURI) {
 74556:         aBaseURI->GetSpec(spec);
 74556:         nsAutoString spec16;
 74556:         CopyUTF8toUTF16(spec, spec16);
 74556:         nsIContent* node = fragment->GetFirstChild();
 74556:         while (node) {
 74556:           if (node->IsElement()) {
 74556:             node->SetAttr(kNameSpaceID_XML,
 74556:                           nsGkAtoms::base,
 74556:                           nsGkAtoms::xml,
 74556:                           spec16,
 80486:                           false);
 74556:           }
 74556:           node = node->GetNextSibling();
 74556:         }
 74556:       }
 74728:     }
 74556:     if (fragment) {
 93647:       nsTreeSanitizer sanitizer(aFlags);
 74556:       sanitizer.Sanitize(fragment);
 74556:     }
     1:   }
     1: 
     1:   if (scripts_enabled)
 80486:       loader->SetEnabled(true);
     1:   
     1:   return rv;
     1: }
