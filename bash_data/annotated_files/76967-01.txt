34531: /* -*- Mode: C++; tab-width: 40; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
34531: /* ***** BEGIN LICENSE BLOCK *****
34531:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
34531:  *
34531:  * The contents of this file are subject to the Mozilla Public License Version
34531:  * 1.1 (the "License"); you may not use this file except in compliance with
34531:  * the License. You may obtain a copy of the License at
34531:  * http://www.mozilla.org/MPL/
34531:  *
34531:  * Software distributed under the License is distributed on an "AS IS" basis,
34531:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
34531:  * for the specific language governing rights and limitations under the
34531:  * License.
34531:  *
34531:  * The Original Code is mozilla.org code.
34531:  *
67612:  * The Initial Developer of the Original Code is the Mozilla Foundation.
34531:  * Portions created by the Initial Developer are Copyright (C) 2009
34531:  * the Initial Developer. All Rights Reserved.
34531:  *
34531:  * Contributor(s):
34531:  *  Vladimir Vukicevic <vladimir@pobox.com>
34531:  *
34531:  * Alternatively, the contents of this file may be used under the terms of
34531:  * either the GNU General Public License Version 2 or later (the "GPL"), or
34531:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
34531:  * in which case the provisions of the GPL or the LGPL are applicable instead
34531:  * of those above. If you wish to allow use of your version of this file only
34531:  * under the terms of either the GPL or the LGPL, and not to allow others to
34531:  * use your version of this file under the terms of the MPL, indicate your
34531:  * decision by deleting the provisions above and replace them with the notice
34531:  * and other provisions required by the GPL or the LGPL. If you do not delete
34531:  * the provisions above, a recipient may use your version of this file under
34531:  * the terms of any one of the MPL, the GPL or the LGPL.
34531:  *
34531:  * ***** END LICENSE BLOCK ***** */
34531: 
34531: #ifndef NS_WINDOWS_DLL_INTERCEPTOR_H_
34531: #define NS_WINDOWS_DLL_INTERCEPTOR_H_
34531: #include <windows.h>
34531: #include <winternl.h>
34531: 
34531: /*
34531:  * Simple trampoline interception
34531:  *
34531:  * 1. Save first N bytes of OrigFunction to trampoline, where N is a
34531:  *    number of bytes >= 5 that are instruction aligned.
34531:  *
34531:  * 2. Replace first 5 bytes of OrigFunction with a jump to the Hook
34531:  *    function.
34531:  *
34531:  * 3. After N bytes of the trampoline, add a jump to OrigFunction+N to
34531:  *    continue original program flow.
34531:  *
34531:  * 4. Hook function needs to call the trampoline during its execution,
34531:  *    to invoke the original function (so address of trampoline is
34531:  *    returned).
34531:  * 
75217:  * When the WindowsDllInterceptor class is destructed, OrigFunction is
75217:  * patched again to jump directly to the trampoline instead of going
75217:  * through the hook function. As such, re-intercepting the same function
75217:  * won't work, as jump instructions are not supported.
34531:  */
34531: 
34531: class WindowsDllInterceptor
34531: {
34531:   typedef unsigned char *byteptr_t;
34531: public:
34531:   WindowsDllInterceptor() 
34531:     : mModule(0)
34531:   {
34531:   }
34531: 
34531:   WindowsDllInterceptor(const char *modulename, int nhooks = 0) {
34531:     Init(modulename, nhooks);
34531:   }
34531: 
75217:   ~WindowsDllInterceptor() {
75217:     int i;
75217:     byteptr_t p;
75217:     for (i = 0, p = mHookPage; i < mCurHooks; i++, p += kHookSize) {
75217: #if defined(_M_IX86)
75217:       size_t nBytes = 1 + sizeof(intptr_t);
75217: #elif defined(_M_X64)
75217:       size_t nBytes = 2 + sizeof(intptr_t);
75217: #else
75217: #error "Unknown processor type"
75217: #endif
75217:       byteptr_t origBytes = *((byteptr_t *)p);
75217:       // ensure we can modify the original code
75217:       DWORD op;
75217:       if (!VirtualProtectEx(GetCurrentProcess(), origBytes, nBytes, PAGE_EXECUTE_READWRITE, &op)) {
75217:         //printf ("VirtualProtectEx failed! %d\n", GetLastError());
75217:         continue;
75217:       }
75217:       // Remove the hook by making the original function jump directly
75217:       // in the trampoline.
75217:       intptr_t dest = (intptr_t)(p + sizeof(void *));
75217: #if defined(_M_IX86)
75217:       *((intptr_t*)(origBytes+1)) = dest - (intptr_t)(origBytes+5); // target displacement
75217: #elif defined(_M_X64)
75217:       *((intptr_t*)(origBytes+2)) = dest;
75217: #else
75217: #error "Unknown processor type"
75217: #endif
75217:       // restore protection; if this fails we can't really do anything about it
75217:       VirtualProtectEx(GetCurrentProcess(), origBytes, nBytes, op, &op);
75217:     }
75217:   }
75217: 
34531:   void Init(const char *modulename, int nhooks = 0) {
34531:     if (mModule)
34531:       return;
34531: 
39729:     mModule = LoadLibraryExA(modulename, NULL, 0);
34531:     if (!mModule) {
34531:       //printf("LoadLibraryEx for '%s' failed\n", modulename);
34531:       return;
34531:     }
34531: 
34531:     int hooksPerPage = 4096 / kHookSize;
34531:     if (nhooks == 0)
34531:       nhooks = hooksPerPage;
34531: 
34531:     mMaxHooks = nhooks + (hooksPerPage % nhooks);
34531:     mCurHooks = 0;
34531: 
34531:     mHookPage = (byteptr_t) VirtualAllocEx(GetCurrentProcess(), NULL, mMaxHooks * kHookSize,
34531:              MEM_COMMIT | MEM_RESERVE,
34531:              PAGE_EXECUTE_READWRITE);
34531: 
34531:     if (!mHookPage) {
34531:       mModule = 0;
34531:       return;
34531:     }
34531:   }
34531: 
34531:   void LockHooks() {
34531:     if (!mModule)
34531:       return;
34531: 
34531:     DWORD op;
34531:     VirtualProtectEx(GetCurrentProcess(), mHookPage, mMaxHooks * kHookSize, PAGE_EXECUTE_READ, &op);
34531: 
34531:     mModule = 0;
34531:   }
34531: 
34531:   bool AddHook(const char *pname,
69198:          intptr_t hookDest,
34531:          void **origFunc)
34531:   {
34531:     if (!mModule)
34531:       return false;
34531: 
34531:     void *pAddr = (void *) GetProcAddress(mModule, pname);
34531:     if (!pAddr) {
34531:       //printf ("GetProcAddress failed\n");
34531:       return false;
34531:     }
34531: 
34531:     void *tramp = CreateTrampoline(pAddr, hookDest);
34531:     if (!tramp) {
34531:       //printf ("CreateTrampoline failed\n");
34531:       return false;
34531:     }
34531: 
34531:     *origFunc = tramp;
34531: 
34531:     return true;
34531:   }
34531: 
34531: protected:
34531:   const static int kPageSize = 4096;
34531:   const static int kHookSize = 128;
34531: 
34531:   HMODULE mModule;
34531:   byteptr_t mHookPage;
34531:   int mMaxHooks;
34531:   int mCurHooks;
34531: 
34531:   byteptr_t CreateTrampoline(void *origFunction,
69198:            intptr_t dest)
34531:   {
34531:     byteptr_t tramp = FindTrampolineSpace();
34531:     if (!tramp)
34531:       return 0;
34531: 
34531:     byteptr_t origBytes = (byteptr_t) origFunction;
34531: 
34531:     int nBytes = 0;
68859: #if defined(_M_IX86)
34531:     while (nBytes < 5) {
34531:       // Understand some simple instructions that might be found in a
34531:       // prologue; we might need to extend this as necessary.
34531:       //
34531:       // Note!  If we ever need to understand jump instructions, we'll
34531:       // need to rewrite the displacement argument.
34531:       if (origBytes[nBytes] >= 0x88 && origBytes[nBytes] <= 0x8B) {
34531:         // various MOVs; but only handle the case where it truly is a 2-byte instruction
34531:         unsigned char b = origBytes[nBytes+1];
34531:         if (((b & 0xc0) == 0xc0) ||
34531:             (((b & 0xc0) == 0x00) &&
34531:              ((b & 0x38) != 0x20) && ((b & 0x38) != 0x28)))
34531:         {
34531:           nBytes += 2;
34531:         } else {
34531:           // complex MOV, bail
34531:           return 0;
34531:         }
34531:       } else if (origBytes[nBytes] == 0x68) {
34531:         // PUSH with 4-byte operand
34531:         nBytes += 5;
34531:       } else if ((origBytes[nBytes] & 0xf0) == 0x50) {
34531:         // 1-byte PUSH/POP
34531:         nBytes++;
57388:       } else if (origBytes[nBytes] == 0x6A) {
57388:         // PUSH imm8
57388:         nBytes += 2;
34531:       } else {
34531:         //printf ("Unknown x86 instruction byte 0x%02x, aborting trampoline\n", origBytes[nBytes]);
34531:         return 0;
34531:       }
34531:     }
68859: #elif defined(_M_X64)
69467:     int pJmp32 = -1;
68859: 
68859:     while (nBytes < 13) {
68859: 
68859:       // if found JMP 32bit offset, next bytes must be NOP 
69467:       if (pJmp32 >= 0) {
68859:         if (origBytes[nBytes++] != 0x90)
68859:           return 0;
68859: 
68859:         continue;
68859:       } 
68859:         
68859:       if (origBytes[nBytes] == 0x41) {
68859:         // REX.B
68859:         nBytes++;
68859: 
68859:         if ((origBytes[nBytes] & 0xf0) == 0x50) {
68859:           // push/pop with Rx register
68859:           nBytes++;
68859:         } else if (origBytes[nBytes] >= 0xb8 && origBytes[nBytes] <= 0xbf) {
68859:           // mov r32, imm32
68859:           nBytes += 5;
68859:         } else {
68859:           return 0;
68859:         }
68859:       } else if (origBytes[nBytes] == 0x45) {
68859:         // REX.R & REX.B
68859:         nBytes++;
68859: 
68859:         if (origBytes[nBytes] == 0x33) {
68859:           // xor r32, r32
68859:           nBytes += 2;
68859:         } else {
68859:           return 0;
68859:         }
68859:       } else if (origBytes[nBytes] == 0x48) {
68859:         // REX.W
68859:         nBytes++;
68859: 
68859:         if (origBytes[nBytes] == 0x81 && (origBytes[nBytes+1] & 0xf8) == 0xe8) {
68859:           // sub r, dword
68859:           nBytes += 6;
68859:         } else if (origBytes[nBytes] == 0x83 &&
68859:                   (origBytes[nBytes+1] & 0xf8) == 0xe8) {
68859:           // sub r, byte
68859:           nBytes += 3;
68859:         } else if (origBytes[nBytes] == 0x83 &&
68859:                   (origBytes[nBytes+1] & 0xf8) == 0x60) {
68859:           // and [r+d], imm8
68859:           nBytes += 5;
68859:         } else if (origBytes[nBytes] == 0x89) {
68859:           // MOV r/m64, r64
68859:           if ((origBytes[nBytes+1] & 0xc0) == 0x40) {
68859:             if ((origBytes[nBytes+1] & 0x7) == 0x04) {
68859:               // mov [SIB+disp8], r64
68859:               nBytes += 4;
68859:             } else {
68859:               // mov [r64+disp8], r64
68859:               nBytes += 3;
68859:             }
68859:           } else {
68859:             // complex mov
68859:             return 0;
68859:           }
68859:         } else if (origBytes[nBytes] == 0x8b) {
68859:           // mov r64, r/m64
68859:           if ((origBytes[nBytes+1] & 0xc0) == 0x40) {
68859:             if ((origBytes[nBytes+1] & 0x7) == 0x04) {
68859:               // mov r64, [SIB+disp8]
68859:               nBytes += 4;
68859:             } else {
68859:               // mov r64, [r64+disp8]
68859:               nBytes += 3;
68859:             }
68859:           } else if ((origBytes[nBytes+1] & 0xc0) == 0xc0) {
68859:             // MOV r64, r64
68859:             nBytes += 2;
68859:           } else {
68859:             // complex MOV
68859:             return 0;
68859:           }
68859:         } else {
68859:           // not support yet!
68859:           return 0;
68859:         }
68859:       } else if ((origBytes[nBytes] & 0xf0) == 0x50) {
68859:         // 1-byte push/pop
68859:         nBytes++;
68859:       } else if (origBytes[nBytes] == 0x90) {
68859:         // nop
68859:         nBytes++;
68859:       } else if (origBytes[nBytes] == 0xe9) {
68859:         pJmp32 = nBytes;
68859:         // jmp 32bit offset
68859:         nBytes += 5;
68859:       } else if (origBytes[nBytes] == 0xff) {
68859:         nBytes++;
68859:         if ((origBytes[nBytes] & 0xf8) == 0xf0) {
68859:           // push r64
68859:           nBytes++;
68859:         } else {
68859:           return 0;
68859:         }
68859:       } else {
68859:         return 0;
68859:       }
68859:     }
68859: #else
68859: #error "Unknown processor type"
68859: #endif
34531: 
34531:     if (nBytes > 100) {
34531:       //printf ("Too big!");
34531:       return 0;
34531:     }
34531: 
75217:     // We keep the address of the original function in the first bytes of
75217:     // the trampoline buffer
75217:     *((void **)tramp) = origFunction;
75217:     tramp += sizeof(void *);
75217: 
34531:     memcpy(tramp, origFunction, nBytes);
34531: 
34531:     // OrigFunction+N, the target of the trampoline
34531:     byteptr_t trampDest = origBytes + nBytes;
34531: 
68859: #if defined(_M_IX86)
34531:     tramp[nBytes] = 0xE9; // jmp
34531:     *((intptr_t*)(tramp+nBytes+1)) = (intptr_t)trampDest - (intptr_t)(tramp+nBytes+5); // target displacement
68859: #elif defined(_M_X64)
68859:     // If JMP32 opcode found, we don't insert to trampoline jump 
69467:     if (pJmp32 >= 0) {
68859:       // convert JMP 32bit offset to JMP 64bit direct
68859:       byteptr_t directJmpAddr = origBytes + pJmp32 + 5 + (*((LONG*)(origBytes+pJmp32+1)));
68859:       // mov r11, address
68859:       tramp[pJmp32]   = 0x49;
68859:       tramp[pJmp32+1] = 0xbb;
68859:       *((intptr_t*)(tramp+pJmp32+2)) = (intptr_t)directJmpAddr;
68859: 
68859:       // jmp r11
68859:       tramp[pJmp32+10] = 0x41;
68859:       tramp[pJmp32+11] = 0xff;
68859:       tramp[pJmp32+12] = 0xe3;
68859:     } else {
68859:       // mov r11, address
68859:       tramp[nBytes] = 0x49;
68859:       tramp[nBytes+1] = 0xbb;
68859:       *((intptr_t*)(tramp+nBytes+2)) = (intptr_t)trampDest;
68859: 
68859:       // jmp r11
68859:       tramp[nBytes+10] = 0x41;
68859:       tramp[nBytes+11] = 0xff;
68859:       tramp[nBytes+12] = 0xe3;
68859:     }
68859: #endif
34531: 
34531:     // ensure we can modify the original code
34531:     DWORD op;
34531:     if (!VirtualProtectEx(GetCurrentProcess(), origFunction, nBytes, PAGE_EXECUTE_READWRITE, &op)) {
34531:       //printf ("VirtualProtectEx failed! %d\n", GetLastError());
34531:       return 0;
34531:     }
34531: 
68859: #if defined(_M_IX86)
34531:     // now modify the original bytes
34531:     origBytes[0] = 0xE9; // jmp
69198:     *((intptr_t*)(origBytes+1)) = dest - (intptr_t)(origBytes+5); // target displacement
68859: #elif defined(_M_X64)
68859:     // mov r11, address
68859:     origBytes[0] = 0x49;
68859:     origBytes[1] = 0xbb;
68859: 
69198:     *((intptr_t*)(origBytes+2)) = dest;
68859: 
68859:     // jmp r11
68859:     origBytes[10] = 0x41;
68859:     origBytes[11] = 0xff;
68859:     origBytes[12] = 0xe3;
68859: #endif
34531: 
34531:     // restore protection; if this fails we can't really do anything about it
34531:     VirtualProtectEx(GetCurrentProcess(), origFunction, nBytes, op, &op);
34531: 
34531:     return tramp;
34531:   }
34531: 
34531:   byteptr_t FindTrampolineSpace() {
34531:     if (mCurHooks >= mMaxHooks)
34531:       return 0;
34531: 
34531:     byteptr_t p = mHookPage + mCurHooks*kHookSize;
34531: 
34531:     mCurHooks++;
34531: 
34531:     return p;
34531:   }
34531: };
34531: 
34531: 
34531: #endif /* NS_WINDOWS_DLL_INTERCEPTOR_H_ */
