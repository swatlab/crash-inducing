    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: // vim: ft=cpp tw=78 sw=2 et ts=2
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Boris Zbarsky <bzbarsky@mit.edu>.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Christian Biesinger <cbiesinger@web.de>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * A base class which implements nsIImageLoadingContent and can be
    1:  * subclassed by various content nodes that want to provide image
    1:  * loading functionality (eg <img>, <object>, etc).
    1:  */
    1: 
    1: #include "nsImageLoadingContent.h"
    1: #include "nsAutoPtr.h"
    1: #include "nsContentErrors.h"
    1: #include "nsIContent.h"
    1: #include "nsIDocument.h"
    1: #include "nsIScriptGlobalObject.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsServiceManagerUtils.h"
    1: #include "nsContentPolicyUtils.h"
    1: #include "nsIURI.h"
    1: #include "nsILoadGroup.h"
    1: #include "imgIContainer.h"
    1: #include "imgILoader.h"
    1: #include "nsThreadUtils.h"
    1: #include "nsNetUtil.h"
    1: 
    1: #include "nsPresContext.h"
    1: #include "nsIPresShell.h"
    1: #include "nsIEventStateManager.h"
    1: #include "nsGUIEvent.h"
    1: 
    1: #include "nsIChannel.h"
    1: #include "nsIStreamListener.h"
    1: 
    1: #include "nsIFrame.h"
    1: #include "nsIDOMNode.h"
    1: 
    1: #include "nsContentUtils.h"
    1: #include "nsIContentPolicy.h"
    1: #include "nsContentPolicyUtils.h"
    1: #include "nsEventDispatcher.h"
    1: #include "nsDOMClassInfo.h"
    1: 
14228: #include "mozAutoDocUpdate.h"
14228: 
    1: #ifdef DEBUG_chb
    1: static void PrintReqURL(imgIRequest* req) {
    1:   if (!req) {
    1:     printf("(null req)\n");
    1:     return;
    1:   }
    1: 
    1:   nsCOMPtr<nsIURI> uri;
    1:   req->GetURI(getter_AddRefs(uri));
    1:   if (!uri) {
    1:     printf("(null uri)\n");
    1:     return;
    1:   }
    1: 
    1:   nsCAutoString spec;
    1:   uri->GetSpec(spec);
    1:   printf("spec='%s'\n", spec.get());
    1: }
    1: #endif /* DEBUG_chb */
    1: 
    1: 
    1: nsImageLoadingContent::nsImageLoadingContent()
    1:   : mObserverList(nsnull),
    1:     mImageBlockingStatus(nsIContentPolicy::ACCEPT),
    1:     mLoadingEnabled(PR_TRUE),
    1:     mStartingLoad(PR_FALSE),
32426:     mIsImageStateForced(PR_FALSE),
    1:     mLoading(PR_FALSE),
    1:     // mBroken starts out true, since an image without a URI is broken....
    1:     mBroken(PR_TRUE),
    1:     mUserDisabled(PR_FALSE),
29590:     mSuppressed(PR_FALSE),
32426:     mBlockingOnload(PR_FALSE)
    1: {
    1:   if (!nsContentUtils::GetImgLoader()) {
    1:     mLoadingEnabled = PR_FALSE;
    1:   }
    1: }
    1: 
    1: void
    1: nsImageLoadingContent::DestroyImageLoadingContent()
    1: {
32426:   // If we're blocking onload for any reason, now's a good time to stop
32426:   SetBlockingOnload(PR_FALSE);
32426: 
    1:   // Cancel our requests so they won't hold stale refs to us
    1:   if (mCurrentRequest) {
22953:     mCurrentRequest->CancelAndForgetObserver(NS_ERROR_FAILURE);
    1:     mCurrentRequest = nsnull;
    1:   }
    1:   if (mPendingRequest) {
22953:     mPendingRequest->CancelAndForgetObserver(NS_ERROR_FAILURE);
    1:     mPendingRequest = nsnull;
    1:   }
    1: }
    1: 
    1: nsImageLoadingContent::~nsImageLoadingContent()
    1: {
    1:   NS_ASSERTION(!mCurrentRequest && !mPendingRequest,
    1:                "DestroyImageLoadingContent not called");
    1:   NS_ASSERTION(!mObserverList.mObserver && !mObserverList.mNext,
    1:                "Observers still registered?");
    1: }
    1: 
    1: // Macro to call some func on each observer.  This handles observers
    1: // removing themselves.
    1: #define LOOP_OVER_OBSERVERS(func_)                                       \
    1:   PR_BEGIN_MACRO                                                         \
    1:     for (ImageObserver* observer = &mObserverList, *next; observer;      \
    1:          observer = next) {                                              \
    1:       next = observer->mNext;                                            \
    1:       if (observer->mObserver) {                                         \
    1:         observer->mObserver->func_;                                      \
    1:       }                                                                  \
    1:     }                                                                    \
    1:   PR_END_MACRO
    1: 
    1: 
    1: /*
    1:  * imgIContainerObserver impl
    1:  */
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::FrameChanged(imgIContainer* aContainer,
23738:                                     nsIntRect* aDirtyRect)
    1: {
30479:   LOOP_OVER_OBSERVERS(FrameChanged(aContainer, aDirtyRect));
    1:   return NS_OK;
    1: }
    1:             
    1: /*
    1:  * imgIDecoderObserver impl
    1:  */
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStartRequest(imgIRequest* aRequest)
    1: {
    1:   LOOP_OVER_OBSERVERS(OnStartRequest(aRequest));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStartDecode(imgIRequest* aRequest)
    1: {
32426:   // Block onload if it's the current request
32426:   if (aRequest == mCurrentRequest) {
32426:     NS_ABORT_IF_FALSE(!mBlockingOnload, "Shouldn't already be blocking");
32426:     SetBlockingOnload(PR_TRUE);
32426:   }
32426: 
    1:   LOOP_OVER_OBSERVERS(OnStartDecode(aRequest));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStartContainer(imgIRequest* aRequest,
    1:                                         imgIContainer* aContainer)
    1: {
    1:   LOOP_OVER_OBSERVERS(OnStartContainer(aRequest, aContainer));
    1: 
    1:   // Have to check for state changes here, since we might have been in
    1:   // the LOADING state before.
    1:   UpdateImageState(PR_TRUE);
    1:   return NS_OK;    
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStartFrame(imgIRequest* aRequest,
30479:                                     PRUint32 aFrame)
    1: {
    1:   LOOP_OVER_OBSERVERS(OnStartFrame(aRequest, aFrame));
    1:   return NS_OK;    
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnDataAvailable(imgIRequest* aRequest,
30479:                                        PRBool aCurrentFrame,
23738:                                        const nsIntRect* aRect)
    1: {
30479:   LOOP_OVER_OBSERVERS(OnDataAvailable(aRequest, aCurrentFrame, aRect));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStopFrame(imgIRequest* aRequest,
30479:                                    PRUint32 aFrame)
    1: {
32426:   // If we're blocking a load, one frame is enough
32426:   if (aRequest == mCurrentRequest)
32426:     SetBlockingOnload(PR_FALSE);
32426: 
    1:   LOOP_OVER_OBSERVERS(OnStopFrame(aRequest, aFrame));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStopContainer(imgIRequest* aRequest,
    1:                                        imgIContainer* aContainer)
    1: {
32426:   // This is really hacky. We need to handle the case where we start decoding,
32426:   // block onload, but then hit an error before we get to our first frame. In
32426:   // theory we would just hook in at OnStopDecode, but OnStopDecode is broken
32426:   // until we fix bug 505385. OnStopContainer is actually going away at that
32426:   // point. So for now we take advantage of the fact that OnStopContainer is
32426:   // always fired in the decoders at the same time as OnStopDecode.
32426:   if (aRequest == mCurrentRequest)
32426:     SetBlockingOnload(PR_FALSE);
32426: 
    1:   LOOP_OVER_OBSERVERS(OnStopContainer(aRequest, aContainer));
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStopDecode(imgIRequest* aRequest,
    1:                                     nsresult aStatus,
    1:                                     const PRUnichar* aStatusArg)
    1: {
32426:   // We should definitely have a request here
32426:   NS_ABORT_IF_FALSE(aRequest, "no request?");
32426: 
    1:   NS_PRECONDITION(aRequest == mCurrentRequest || aRequest == mPendingRequest,
    1:                   "Unknown request");
    1:   LOOP_OVER_OBSERVERS(OnStopDecode(aRequest, aStatus, aStatusArg));
    1: 
    1:   if (aRequest == mPendingRequest) {
32426: 
32426:     // If we were blocking for the soon-to-be-obsolete request, stop doing so
32426:     SetBlockingOnload(PR_FALSE);
32426: 
32426:     // The new image is decoded - switch to it
32426:     // XXXbholley - This is technically not true pre bug 505385, but I don't
32426:     // think it's a big enough issue to worry about handling in the mean time
    1:     mCurrentRequest->Cancel(NS_ERROR_IMAGE_SRC_CHANGED);
    1:     mPendingRequest.swap(mCurrentRequest);
    1:     mPendingRequest = nsnull;
    1:   }
    1: 
32426:   // XXXbholley - When we fix bug 505385,  this should go in OnStopRequest.
32426:   //
32426:   // We just loaded all the data we're going to get. If we haven't done an
32426:   // initial paint, we want to make sure the image starts decoding for 2
32426:   // reasons:
32426:   //
32426:   // 1) This image is sitting idle but might need to be decoded as soon as we
32426:   // start painting, in which case we've wasted time.
32426:   //
32426:   // 2) We want to block onload until all visible images are decoded. We do this
32426:   // by blocking onload until all in progress decodes get at least one frame
32426:   // decoded. However, if all the data comes in while painting is suppressed
32426:   // (ie, before the initial paint delay is finished), we fire onload without
32426:   // doing a paint first. This means that decode-on-draw images don't start
32426:   // decoding, so we can't wait for them to finish. See bug 512435.
32426: 
32426:   // We can only do this if we have a presshell
32539:   nsIDocument* doc = GetOurDocument();
32539:   nsIPresShell* shell = doc ? doc->GetPrimaryShell() : nsnull;
32426:   if (shell) {
32426: 
32426:     // We need to figure out whether to kick off decoding
32426:     PRBool doRequestDecode = PR_FALSE;
32426: 
32426:     // If we haven't got the initial reflow yet, IsPaintingSuppressed actually
32426:     // returns false
32426:     if (!shell->DidInitialReflow())
32426:       doRequestDecode = PR_TRUE;
32426: 
32426:     // Figure out if painting is suppressed. Note that it's possible for painting
32426:     // to be suppressed for reasons other than the initial paint delay (for
32426:     // example - being in the bfcache), but we probably aren't loading images in
32426:     // those situations.
32426:     PRBool isSuppressed = PR_FALSE;
32426:     nsresult rv = shell->IsPaintingSuppressed(&isSuppressed);
32426:     if (NS_SUCCEEDED(rv) && isSuppressed)
32426:       doRequestDecode = PR_TRUE;
32426: 
32426:     // If we're requesting a decode, do it
32426:     if (doRequestDecode)
32426:       aRequest->RequestDecode();
32426:   }
32426: 
    1:   // XXXldb What's the difference between when OnStopDecode and OnStopRequest
    1:   // fire?  Should we do this work there instead?  Should they just be the
    1:   // same?
    1: 
    1:   if (NS_SUCCEEDED(aStatus)) {
    1:     FireEvent(NS_LITERAL_STRING("load"));
    1:   } else {
    1:     FireEvent(NS_LITERAL_STRING("error"));
    1:   }
    1: 
    1:   // Have to check for state changes here (for example, the new load could
    1:   // have resulted in a broken image).  Note that we don't want to do this
    1:   // async, unlike the event, because while this is waiting to happen our
    1:   // state could change yet again, and then we'll get confused about our
    1:   // state.
    1:   UpdateImageState(PR_TRUE);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::OnStopRequest(imgIRequest* aRequest, PRBool aLastPart)
    1: {
    1:   LOOP_OVER_OBSERVERS(OnStopRequest(aRequest, aLastPart));
    1: 
    1:   return NS_OK;
    1: }
    1: 
32424: NS_IMETHODIMP
32424: nsImageLoadingContent::OnDiscard(imgIRequest *aRequest)
32424: {
32424:   LOOP_OVER_OBSERVERS(OnDiscard(aRequest));
32424: 
32424:   return NS_OK;
32424: }
32424: 
    1: /*
    1:  * nsIImageLoadingContent impl
    1:  */
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::GetLoadingEnabled(PRBool *aLoadingEnabled)
    1: {
    1:   *aLoadingEnabled = mLoadingEnabled;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::SetLoadingEnabled(PRBool aLoadingEnabled)
    1: {
    1:   if (nsContentUtils::GetImgLoader()) {
    1:     mLoadingEnabled = aLoadingEnabled;
    1:   }
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::GetImageBlockingStatus(PRInt16* aStatus)
    1: {
    1:   NS_PRECONDITION(aStatus, "Null out param");
    1:   *aStatus = mImageBlockingStatus;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::AddObserver(imgIDecoderObserver* aObserver)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aObserver);
    1: 
    1:   if (!mObserverList.mObserver) {
    1:     mObserverList.mObserver = aObserver;
    1:     // Don't touch the linking of the list!
    1:     return NS_OK;
    1:   }
    1: 
    1:   // otherwise we have to create a new entry
    1: 
    1:   ImageObserver* observer = &mObserverList;
    1:   while (observer->mNext) {
    1:     observer = observer->mNext;
    1:   }
    1: 
    1:   observer->mNext = new ImageObserver(aObserver);
    1:   if (! observer->mNext) {
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::RemoveObserver(imgIDecoderObserver* aObserver)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aObserver);
    1: 
    1:   if (mObserverList.mObserver == aObserver) {
    1:     mObserverList.mObserver = nsnull;
    1:     // Don't touch the linking of the list!
    1:     return NS_OK;
    1:   }
    1: 
    1:   // otherwise have to find it and splice it out
    1:   ImageObserver* observer = &mObserverList;
    1:   while (observer->mNext && observer->mNext->mObserver != aObserver) {
    1:     observer = observer->mNext;
    1:   }
    1: 
    1:   // At this point, we are pointing to the list element whose mNext is
    1:   // the right observer (assuming of course that mNext is not null)
    1:   if (observer->mNext) {
    1:     // splice it out
    1:     ImageObserver* oldObserver = observer->mNext;
    1:     observer->mNext = oldObserver->mNext;
    1:     oldObserver->mNext = nsnull;  // so we don't destroy them all
    1:     delete oldObserver;
    1:   }
    1: #ifdef DEBUG
    1:   else {
    1:     NS_WARNING("Asked to remove non-existent observer");
    1:   }
    1: #endif
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::GetRequest(PRInt32 aRequestType,
    1:                                   imgIRequest** aRequest)
    1: {
    1:   switch(aRequestType) {
    1:   case CURRENT_REQUEST:
    1:     *aRequest = mCurrentRequest;
    1:     break;
    1:   case PENDING_REQUEST:
    1:     *aRequest = mPendingRequest;
    1:     break;
    1:   default:
    1:     NS_ERROR("Unknown request type");
    1:     *aRequest = nsnull;
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1:   
    1:   NS_IF_ADDREF(*aRequest);
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::GetRequestType(imgIRequest* aRequest,
    1:                                       PRInt32* aRequestType)
    1: {
    1:   NS_PRECONDITION(aRequestType, "Null out param");
    1:   
    1:   if (aRequest == mCurrentRequest) {
    1:     *aRequestType = CURRENT_REQUEST;
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (aRequest == mPendingRequest) {
    1:     *aRequestType = PENDING_REQUEST;
    1:     return NS_OK;
    1:   }
    1: 
    1:   *aRequestType = UNKNOWN_REQUEST;
    1:   NS_ERROR("Unknown request");
    1:   return NS_ERROR_UNEXPECTED;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::GetCurrentURI(nsIURI** aURI)
    1: {
    1:   if (mCurrentRequest) {
    1:     return mCurrentRequest->GetURI(aURI);
    1:   }
    1: 
    1:   if (!mCurrentURI) {
    1:     *aURI = nsnull;
    1:     return NS_OK;
    1:   }
    1:   
    1:   return NS_EnsureSafeToReturn(mCurrentURI, aURI);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::LoadImageWithChannel(nsIChannel* aChannel,
    1:                                             nsIStreamListener** aListener)
    1: {
    1:   NS_PRECONDITION(aListener, "null out param");
    1:   
    1:   NS_ENSURE_ARG_POINTER(aChannel);
    1: 
    1:   if (!nsContentUtils::GetImgLoader()) {
    1:     return NS_ERROR_NULL_POINTER;
    1:   }
    1: 
    1:   // XXX what should we do with content policies here, if anything?
    1:   // Shouldn't that be done before the start of the load?
    1:   // XXX what about shouldProcess?
    1:   
    1:   nsCOMPtr<nsIDocument> doc = GetOurDocument();
    1:   if (!doc) {
    1:     // Don't bother
    1:     return NS_OK;
    1:   }
    1: 
    1:   // Null out our mCurrentURI, in case we have no image requests right now.
    1:   mCurrentURI = nsnull;
    1:   
    1:   CancelImageRequests(NS_ERROR_IMAGE_SRC_CHANGED, PR_FALSE,
    1:                       nsIContentPolicy::ACCEPT);
    1: 
    1:   nsCOMPtr<imgIRequest> & req = mCurrentRequest ? mPendingRequest : mCurrentRequest;
    1: 
    1:   nsresult rv = nsContentUtils::GetImgLoader()->
    1:     LoadImageWithChannel(aChannel, this, doc, aListener, getter_AddRefs(req));
    1: 
    1:   // Make sure our state is up to date
    1:   UpdateImageState(PR_TRUE);
    1: 
    1:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP nsImageLoadingContent::ForceReload()
    1: {
    1:   nsCOMPtr<nsIURI> currentURI;
    1:   GetCurrentURI(getter_AddRefs(currentURI));
    1:   if (!currentURI) {
    1:     return NS_ERROR_NOT_AVAILABLE;
    1:   }
    1: 
    1:   return LoadImage(currentURI, PR_TRUE, PR_TRUE, nsnull, nsIRequest::VALIDATE_ALWAYS);
    1: }
    1: 
    1: /*
    1:  * Non-interface methods
    1:  */
    1: 
    1: nsresult
    1: nsImageLoadingContent::LoadImage(const nsAString& aNewURI,
    1:                                  PRBool aForce,
    1:                                  PRBool aNotify)
    1: {
    1:   // First, get a document (needed for security checks and the like)
    1:   nsIDocument* doc = GetOurDocument();
    1:   if (!doc) {
    1:     // No reason to bother, I think...
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIURI> imageURI;
    1:   nsresult rv = StringToURI(aNewURI, doc, getter_AddRefs(imageURI));
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1:   // XXXbiesi fire onerror if that failed?
    1: 
16505:   PRBool equal;
16505: 
16505:   if (aNewURI.IsEmpty() &&
16505:       doc->GetDocumentURI() &&
16505:       NS_SUCCEEDED(doc->GetDocumentURI()->Equals(imageURI, &equal)) && 
16505:       equal)  {
16505: 
16505:     // Loading an embedded img from the same URI as the document URI will not work
16505:     // as a resource cannot recursively embed itself. Attempting to do so generally
16505:     // results in having to pre-emptively close down an in-flight HTTP transaction 
16505:     // and then incurring the significant cost of establishing a new TCP channel.
16505:     // This is generally triggered from <img src=""> 
16505:     // In light of that, just skip loading it..
22743:     // Do make sure to drop our existing image, if any
22743:     CancelImageRequests(aNotify);
16505:     return NS_OK;
16505:   }
16505: 
    1:   NS_TryToSetImmutable(imageURI);
    1: 
    1:   return LoadImage(imageURI, aForce, aNotify, doc);
    1: }
    1: 
    1: nsresult
    1: nsImageLoadingContent::LoadImage(nsIURI* aNewURI,
    1:                                  PRBool aForce,
    1:                                  PRBool aNotify,
    1:                                  nsIDocument* aDocument,
    1:                                  nsLoadFlags aLoadFlags)
    1: {
    1:   if (!mLoadingEnabled) {
    1:     FireEvent(NS_LITERAL_STRING("error"));
    1:     return NS_OK;
    1:   }
    1: 
    1:   NS_ASSERTION(!aDocument || aDocument == GetOurDocument(),
    1:                "Bogus document passed in");
    1:   // First, get a document (needed for security checks and the like)
    1:   if (!aDocument) {
    1:     aDocument = GetOurDocument();
    1:     if (!aDocument) {
    1:       // No reason to bother, I think...
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1: 
    1:   nsresult rv;   // XXXbz Should failures in this method fire onerror?
    1: 
    1:   // Skip the URI equality check if our current image was blocked.  If
    1:   // that happened, we really do want to try loading again.
    1:   if (!aForce && NS_CP_ACCEPTED(mImageBlockingStatus)) {
    1:     nsCOMPtr<nsIURI> currentURI;
    1:     GetCurrentURI(getter_AddRefs(currentURI));
    1:     PRBool equal;
    1:     if (currentURI &&
    1:         NS_SUCCEEDED(currentURI->Equals(aNewURI, &equal)) &&
    1:         equal) {
    1:       // Nothing to do here.
    1:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   // From this point on, our state could change before return, so make
    1:   // sure to notify if it does.
    1:   AutoStateChanger changer(this, aNotify);
    1: 
 3088:   // Use the principal of aDocument to avoid having to QI |this| an extra time.
 3088:   // It should be the same as the principal of this node in any case.
 3088: #ifdef DEBUG
 3088:   nsCOMPtr<nsIContent> thisContent = do_QueryInterface(this);
 3088:   NS_ASSERTION(thisContent &&
 3088:                thisContent->NodePrincipal() == aDocument->NodePrincipal(),
 3088:                "Principal mismatch?");
 3088: #endif
 3088:   
    1:   // If we'll be loading a new image, we want to cancel our existing
    1:   // requests; the question is what reason to pass in.  If everything
    1:   // is going smoothly, that reason should be
    1:   // NS_ERROR_IMAGE_SRC_CHANGED so that our frame (if any) will know
    1:   // not to show the broken image icon.  If the load is blocked by the
    1:   // content policy or security manager, we will want to cancel with
    1:   // the error code from those.
    1: 
    1:   PRInt16 newImageStatus;
    1:   PRBool loadImage = nsContentUtils::CanLoadImage(aNewURI, this, aDocument,
 3088:                                                   aDocument->NodePrincipal(),
    1:                                                   &newImageStatus);
    1:   NS_ASSERTION(loadImage || !NS_CP_ACCEPTED(newImageStatus),
    1:                "CanLoadImage lied");
    1: 
    1:   nsresult cancelResult = loadImage ? NS_ERROR_IMAGE_SRC_CHANGED
    1:                                     : NS_ERROR_IMAGE_BLOCKED;
    1: 
    1:   CancelImageRequests(cancelResult, PR_FALSE, newImageStatus);
    1: 
    1:   // Remember the URL of this request, in case someone asks us for it later.
    1:   // But this only matters if we are affecting the current request.  Need to do
    1:   // this after CancelImageRequests, since that affects the value of
    1:   // mCurrentRequest.
    1:   if (!mCurrentRequest) {
    1:     mCurrentURI = aNewURI;
    1:   }
    1:   
    1:   if (!loadImage) {
    1:     // Don't actually load anything!  This was blocked by CanLoadImage.
    1:     FireEvent(NS_LITERAL_STRING("error"));
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<imgIRequest> & req = mCurrentRequest ? mPendingRequest : mCurrentRequest;
    1: 
    1:   rv = nsContentUtils::LoadImage(aNewURI, aDocument,
 3088:                                  aDocument->NodePrincipal(),
    1:                                  aDocument->GetDocumentURI(),
    1:                                  this, aLoadFlags,
    1:                                  getter_AddRefs(req));
    1:   if (NS_FAILED(rv)) {
    1:     FireEvent(NS_LITERAL_STRING("error"));
    1:     return NS_OK;
    1:   }
    1: 
    1:   // If we now have a current request, we don't need to store the URI, since
    1:   // we can get it off the request. Release it.
    1:   if (mCurrentRequest) {
    1:     mCurrentURI = nsnull;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
29590: nsresult
29590: nsImageLoadingContent::ForceImageState(PRBool aForce, PRInt32 aState)
29590: {
29590:   mIsImageStateForced = aForce;
29590:   mForcedImageState = aState;
29590:   return NS_OK;
29590: }
29590: 
    1: PRInt32
    1: nsImageLoadingContent::ImageState() const
    1: {
29590:   return mIsImageStateForced ? mForcedImageState :
    1:     (mBroken * NS_EVENT_STATE_BROKEN) |
    1:     (mUserDisabled * NS_EVENT_STATE_USERDISABLED) |
    1:     (mSuppressed * NS_EVENT_STATE_SUPPRESSED) |
    1:     (mLoading * NS_EVENT_STATE_LOADING);
    1: }
    1: 
    1: void
    1: nsImageLoadingContent::UpdateImageState(PRBool aNotify)
    1: {
    1:   if (mStartingLoad) {
    1:     // Ignore this call; we'll update our state when the state changer is
    1:     // destroyed.  Need this to work around the fact that some libpr0n stuff is
    1:     // actually sync and hence we can get OnStopDecode called while we're still
    1:     // under LoadImage, and OnStopDecode doesn't know anything about
    1:     // aNotify
    1:     return;
    1:   }
    1:   
    1:   nsCOMPtr<nsIContent> thisContent = do_QueryInterface(this);
    1:   if (!thisContent) {
    1:     return;
    1:   }
    1: 
    1:   PRInt32 oldState = ImageState();
    1: 
    1:   mLoading = mBroken = mUserDisabled = mSuppressed = PR_FALSE;
    1:   
    1:   // If we were blocked by server-based content policy, we claim to be
    1:   // suppressed.  If we were blocked by type-based content policy, we claim to
    1:   // be user-disabled.  Otherwise, claim to be broken.
    1:   if (mImageBlockingStatus == nsIContentPolicy::REJECT_SERVER) {
    1:     mSuppressed = PR_TRUE;
    1:   } else if (mImageBlockingStatus == nsIContentPolicy::REJECT_TYPE) {
    1:     mUserDisabled = PR_TRUE;
    1:   } else if (!mCurrentRequest) {
    1:     // No current request means error, since we weren't disabled or suppressed
    1:     mBroken = PR_TRUE;
    1:   } else {
    1:     PRUint32 currentLoadStatus;
    1:     nsresult rv = mCurrentRequest->GetImageStatus(&currentLoadStatus);
    1:     if (NS_FAILED(rv) || (currentLoadStatus & imgIRequest::STATUS_ERROR)) {
    1:       mBroken = PR_TRUE;
    1:     } else if (!(currentLoadStatus & imgIRequest::STATUS_SIZE_AVAILABLE)) {
    1:       mLoading = PR_TRUE;
    1:     }
    1:   }
    1: 
    1:   if (aNotify) {
    1:     nsIDocument* doc = thisContent->GetCurrentDoc();
    1:     if (doc) {
    1:       NS_ASSERTION(thisContent->IsInDoc(), "Something is confused");
    1:       PRInt32 changedBits = oldState ^ ImageState();
    1:       if (changedBits) {
    1:         mozAutoDocUpdate upd(doc, UPDATE_CONTENT_STATE, PR_TRUE);
    1:         doc->ContentStatesChanged(thisContent, nsnull, changedBits);
    1:       }
    1:     }
    1:   }
    1: }
    1: 
    1: void
    1: nsImageLoadingContent::CancelImageRequests(PRBool aNotify)
    1: {
    1:   // Make sure to null out mCurrentURI here, so we no longer look like an image
22743:   AutoStateChanger changer(this, aNotify);
    1:   mCurrentURI = nsnull;
    1:   CancelImageRequests(NS_BINDING_ABORTED, PR_TRUE, nsIContentPolicy::ACCEPT);
    1: }
    1: 
    1: void
    1: nsImageLoadingContent::CancelImageRequests(nsresult aReason,
    1:                                            PRBool   aEvenIfSizeAvailable,
    1:                                            PRInt16  aNewImageStatus)
    1: {
    1:   // Cancel the pending request, if any
    1:   if (mPendingRequest) {
    1:     mPendingRequest->Cancel(aReason);
    1:     mPendingRequest = nsnull;
    1:   }
    1: 
    1:   // Cancel the current request if it has not progressed enough to
    1:   // have a size yet
    1:   if (mCurrentRequest) {
    1:     PRUint32 loadStatus = imgIRequest::STATUS_ERROR;
    1:     mCurrentRequest->GetImageStatus(&loadStatus);
    1: 
    1:     NS_ASSERTION(NS_CP_ACCEPTED(mImageBlockingStatus),
    1:                  "Have current request but blocked image?");
    1:     
    1:     if (aEvenIfSizeAvailable ||
    1:         !(loadStatus & imgIRequest::STATUS_SIZE_AVAILABLE)) {
    1:       // The new image is going to become the current request.  Make sure to
    1:       // set mImageBlockingStatus _before_ we cancel the request... if we set
    1:       // it after, things that are watching the mCurrentRequest will get wrong
    1:       // data.
32426: 
32426:       // If we were blocking onload for this image, stop doing so
32426:       SetBlockingOnload(PR_FALSE);
32426: 
32426:       // Get rid of it
    1:       mImageBlockingStatus = aNewImageStatus;
    1:       mCurrentRequest->Cancel(aReason);
    1:       mCurrentRequest = nsnull;
    1:     }
    1:   } else {
    1:     // No current request so the new image status will become the
    1:     // status of the current request
    1:     mImageBlockingStatus = aNewImageStatus;
    1:   }
    1: 
    1:   // Note that the only way we could have avoided setting the image blocking
    1:   // status above is if we have a current request and have kept it as the
    1:   // current request.  In that case, we want to leave our old status, since the
    1:   // status corresponds to the current request.  Even if we plan to do a
    1:   // pending request load, having an mCurrentRequest means that our current
    1:   // status is not a REJECT_* status, and doing the load shouldn't change that.
    1:   // XXXbz there is an issue here if different ACCEPT statuses are used, but...
    1: }
    1: 
    1: nsresult
    1: nsImageLoadingContent::UseAsPrimaryRequest(imgIRequest* aRequest,
    1:                                            PRBool aNotify)
    1: {
    1:   // Use an AutoStateChanger so that the clone call won't
    1:   // automatically notify from inside OnStopDecode.
22743:   // Also, make sure to use the CancelImageRequests which doesn't
22743:   // notify, so that the changer is handling the notifications.
    1:   NS_PRECONDITION(aRequest, "Must have a request here!");
    1:   AutoStateChanger changer(this, aNotify);
    1:   mCurrentURI = nsnull;
    1:   CancelImageRequests(NS_BINDING_ABORTED, PR_TRUE, nsIContentPolicy::ACCEPT);
    1: 
    1:   NS_ASSERTION(!mCurrentRequest, "We should not have a current request now");
    1: 
    1:   return aRequest->Clone(this, getter_AddRefs(mCurrentRequest));
    1: }
    1: 
    1: nsIDocument*
    1: nsImageLoadingContent::GetOurDocument()
    1: {
    1:   nsCOMPtr<nsIContent> thisContent = do_QueryInterface(this);
    1:   NS_ENSURE_TRUE(thisContent, nsnull);
    1: 
    1:   return thisContent->GetOwnerDoc();
    1: }
    1: 
    1: nsresult
    1: nsImageLoadingContent::StringToURI(const nsAString& aSpec,
    1:                                    nsIDocument* aDocument,
    1:                                    nsIURI** aURI)
    1: {
    1:   NS_PRECONDITION(aDocument, "Must have a document");
    1:   NS_PRECONDITION(aURI, "Null out param");
    1: 
    1:   // (1) Get the base URI
    1:   nsCOMPtr<nsIContent> thisContent = do_QueryInterface(this);
    1:   NS_ASSERTION(thisContent, "An image loading content must be an nsIContent");
    1:   nsCOMPtr<nsIURI> baseURL = thisContent->GetBaseURI();
    1: 
    1:   // (2) Get the charset
    1:   const nsAFlatCString &charset = aDocument->GetDocumentCharacterSet();
    1: 
    1:   // (3) Construct the silly thing
    1:   return NS_NewURI(aURI,
    1:                    aSpec,
    1:                    charset.IsEmpty() ? nsnull : charset.get(),
    1:                    baseURL,
    1:                    nsContentUtils::GetIOService());
    1: }
    1: 
    1: 
    1: /**
    1:  * Class used to dispatch events
    1:  */
    1: 
    1: class nsImageLoadingContent::Event : public nsRunnable
    1: {
    1: public:
    1:   Event(nsPresContext* aPresContext, nsImageLoadingContent* aContent,
    1:              const nsAString& aMessage, nsIDocument* aDocument)
    1:     : mPresContext(aPresContext),
    1:       mContent(aContent),
    1:       mMessage(aMessage),
    1:       mDocument(aDocument)
    1:   {
    1:   }
    1:   ~Event()
    1:   {
    1:     mDocument->UnblockOnload(PR_TRUE);
    1:   }
    1: 
    1:   NS_IMETHOD Run();
    1:   
    1:   nsCOMPtr<nsPresContext> mPresContext;
    1:   nsRefPtr<nsImageLoadingContent> mContent;
    1:   nsString mMessage;
    1:   // Need to hold on to the document in case our event outlives document
    1:   // teardown... Wantto be able to get back to the document even if the
    1:   // prescontext and content can't.
    1:   nsCOMPtr<nsIDocument> mDocument;
    1: };
    1: 
    1: NS_IMETHODIMP
    1: nsImageLoadingContent::Event::Run()
    1: {
    1:   PRUint32 eventMsg;
    1: 
    1:   if (mMessage.EqualsLiteral("load")) {
    1:     eventMsg = NS_LOAD;
    1:   } else {
    1:     eventMsg = NS_LOAD_ERROR;
    1:   }
    1: 
    1:   nsCOMPtr<nsIContent> ourContent = do_QueryInterface(mContent);
    1: 
    1:   nsEvent event(PR_TRUE, eventMsg);
    1:   event.flags |= NS_EVENT_FLAG_CANT_BUBBLE;
    1:   nsEventDispatcher::Dispatch(ourContent, mPresContext, &event);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: nsresult
    1: nsImageLoadingContent::FireEvent(const nsAString& aEventType)
    1: {
    1:   // We have to fire the event asynchronously so that we won't go into infinite
    1:   // loops in cases when onLoad handlers reset the src and the new src is in
    1:   // cache.
    1: 
    1:   nsCOMPtr<nsIDocument> document = GetOurDocument();
    1:   if (!document) {
    1:     // no use to fire events if there is no document....
    1:     return NS_OK;
    1:   }                                                                             
    1: 
    1:   // We should not be getting called from off the UI thread...
    1:   NS_ASSERTION(NS_IsMainThread(), "should be on the main thread");
    1: 
  981:   nsIPresShell *shell = document->GetPrimaryShell();
    1:   nsPresContext *presContext = shell ? shell->GetPresContext() : nsnull;
    1: 
    1:   nsCOMPtr<nsIRunnable> evt =
    1:       new nsImageLoadingContent::Event(presContext, this, aEventType, document);
    1:   NS_ENSURE_TRUE(evt, NS_ERROR_OUT_OF_MEMORY);
    1: 
    1:   // Block onload for our event.  Since we unblock in the event destructor, we
    1:   // want to block now, even if posting will fail.
    1:   document->BlockOnload();
    1:   
    1:   return NS_DispatchToCurrentThread(evt);
    1: }
    1: 
32426: void
32426: nsImageLoadingContent::SetBlockingOnload(PRBool aBlocking)
32426: {
32426:   // If we're already in the desired state, we have nothing to do
32426:   if (mBlockingOnload == aBlocking)
32426:     return;
32426: 
32426:   // Get the document
32426:   nsIDocument* doc = GetOurDocument();
32426: 
32426:   if (doc) {
32426:     // Take the appropriate action
32426:     if (aBlocking)
32426:       doc->BlockOnload();
32426:     else
32426:       doc->UnblockOnload(PR_FALSE);
32426: 
32426:     // Update our state
32426:     mBlockingOnload = aBlocking;
32426:   }
32426: }
