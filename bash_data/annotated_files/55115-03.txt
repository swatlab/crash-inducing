33620: <!DOCTYPE HTML>
33620: <html>
33620: <head>
33620: <!--
33620: https://bugzilla.mozilla.org/show_bug.cgi?id=414796
33620: -->
33620:   <title>Test for Bug 414796</title>
33620:   <script type="text/javascript" src="/MochiKit/packed.js"></script>
33620:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
33620:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
33620: </head>
33620: 
33620: <body>
33620: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=414796">Mozilla Bug 414796</a>
33620: <p id="display">
33620:   <input id="fileList" type="file"></input>
33620: </p>
33620: <div id="content" style="display: none">
33620: </div>
33620: 
33620: <pre id="test">
33620: <script class="testbody" type="text/javascript">
35194: const minFileSize = 20000;
35194: var fileNum = 1;
35194: var testRanCounter = 0;
35194: var expectedTestCount = 0;
33620: SimpleTest.waitForExplicitFinish();
33620: netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
33620: 
34929: is(FileReader.EMPTY, 0, "correct EMPTY value");
34929: is(FileReader.LOADING, 1, "correct LOADING value");
34929: is(FileReader.DONE, 2, "correct DONE value");
34929: 
35194: // Create strings containing data we'll test with. We'll want long
35194: // strings to ensure they span multiple buffers while loading
35194: var testTextData = "asd b\tlah\u1234w\u00a0r";
35194: while (testTextData.length < minFileSize) {
35194:   testTextData = testTextData + testTextData;
35187: }
35187: 
35194: var testASCIIData = "abcdef 123456\n";
35194: while (testASCIIData.length < minFileSize) {
35194:   testASCIIData = testASCIIData + testASCIIData;
35194: }
35187: 
35194: var testBinaryData = "";
35194: for (var i = 0; i < 256; i++) {
35194:   testBinaryData += String.fromCharCode(i);
35187: }
35194: while (testBinaryData.length < minFileSize) {
35194:   testBinaryData = testBinaryData + testBinaryData;
35194: }
35187: 
35187: 
35194: //Set up files for testing
35194: var asciiFile = createFileWithData(testASCIIData);
35194: var binaryFile = createFileWithData(testBinaryData);
35187: 
35194: var fileList = document.getElementById('fileList');
35194: fileList.value = "/none/existing/path/fileAPI/testing";
35194: var nonExistingFile = fileList.files[0];
35187: 
35194: // Test that plain reading works and fires events as expected, both
35194: // for text and binary reading
55115: 
35194: var onloadHasRunText = false;
35194: var onloadStartHasRunText = false;
35194: r = new FileReader();
35194: is(r.readyState, FileReader.EMPTY, "correct initial text readyState");
35194: r.onload = getLoadHandler(testASCIIData, testASCIIData.length, "plain reading");
35194: r.addEventListener("load", function() { onloadHasRunText = true }, false);
35194: r.addEventListener("loadstart", function() { onloadStartHasRunText = true }, false);
35194: r.readAsText(asciiFile);
35194: is(r.readyState, FileReader.LOADING, "correct loading text readyState");
35194: is(onloadHasRunText, false, "text loading must be async");
35194: is(onloadStartHasRunText, true, "text loadstart should fire sync");
35194: expectedTestCount++;
35187: 
35194: var onloadHasRunBinary = false;
35194: var onloadStartHasRunBinary = false;
35194: r = new FileReader();
35194: is(r.readyState, FileReader.EMPTY, "correct initial binary readyState");
35194: r.addEventListener("load", function() { onloadHasRunBinary = true }, false);
35194: r.addEventListener("loadstart", function() { onloadStartHasRunBinary = true }, false);
35194: r.readAsBinaryString(binaryFile);
35194: r.onload = getLoadHandler(testBinaryData, testBinaryData.length, "binary reading");
35194: is(r.readyState, FileReader.LOADING, "correct loading binary readyState");
35194: is(onloadHasRunBinary, false, "binary loading must be async");
35194: is(onloadStartHasRunBinary, true, "binary loadstart should fire sync");
35194: expectedTestCount++;
35187: 
35187: 
35187: // Test a variety of encodings, and make sure they work properly
35194: r = new FileReader();
35194: r.onload = getLoadHandler(testASCIIData, testASCIIData.length, "no encoding reading");
35194: r.readAsText(asciiFile, "");
35194: expectedTestCount++;
35187: 
35194: r = new FileReader();
35194: r.onload = getLoadHandler(testASCIIData, testASCIIData.length, "iso8859 reading");
35194: r.readAsText(asciiFile, "iso-8859-1");
35194: expectedTestCount++;
35187: 
35194: r = new FileReader();
35194: r.onload = getLoadHandler(testTextData,
35194:                           convertToUTF8(testTextData).length,
35194:                           "utf8 reading");
35194: r.readAsText(createFileWithData(convertToUTF8(testTextData)), "utf8");
35194: expectedTestCount++;
35187: 
35194: r = new FileReader();
35194: r.readAsText(createFileWithData(convertToUTF16(testTextData)), "utf-16");
35194: r.onload = getLoadHandler(testTextData,
35194:                           convertToUTF16(testTextData).length,
35194:                           "utf16 reading");
35194: expectedTestCount++;
35187: 
35194: r = new FileReader();
35194: r.onload = getLoadHandler(testTextData,
35194:                           convertToUTF32(testTextData).length,
35194:                           "utf32 reading");
35194: r.readAsText(createFileWithData(convertToUTF32(testTextData)), "UTF-32");
35194: expectedTestCount++;
35187: 
35187: 
55115: // Test loading an empty file works (and doesn't crash!)
55115: var emptyFile = createFileWithData("");
55115: dump("hello nurse");
55115: r = new FileReader();
55115: r.onload = getLoadHandler("", 0, "empty no encoding reading");
55115: r.readAsText(emptyFile, "");
55115: expectedTestCount++;
55115: 
55115: r = new FileReader();
55115: r.onload = getLoadHandler("", 0, "empty utf8 reading");
55115: r.readAsText(emptyFile, "utf8");
55115: expectedTestCount++;
55115: 
55115: r = new FileReader();
55115: r.onload = getLoadHandler("", 0, "empty utf16 reading");
55115: r.readAsText(emptyFile, "utf-16");
55115: expectedTestCount++;
55115: 
55115: r = new FileReader();
55115: r.onload = getLoadHandler("", 0, "empty binary string reading");
55115: r.readAsBinaryString(emptyFile);
55115: expectedTestCount++;
55115: 
55115: r = new FileReader();
55115: r.onload = getLoadHandler(convertToDataURL(""), 0, "empt binary string reading");
55115: r.readAsDataURL(emptyFile);
55115: expectedTestCount++;
55115: 
55115: 
35195: // Test reusing a FileReader to read multiple times
35195: r = new FileReader();
35195: r.onload = getLoadHandler(testASCIIData,
35195:                           testASCIIData.length,
35198:                           "to-be-reused reading text")
35195: var makeAnotherReadListener = function(event) {
35195:   r = event.target;
35195:   r.removeEventListener("load", makeAnotherReadListener, false);
35198:   r.onload = getLoadHandler(testASCIIData,
35198:                             testASCIIData.length,
35198:                             "reused reading text");
35198:   r.readAsText(asciiFile);
35198: };
35198: r.addEventListener("load", makeAnotherReadListener, false);
35198: r.readAsText(asciiFile);
35198: expectedTestCount += 2;
35198: 
35198: r = new FileReader();
35195: r.onload = getLoadHandler(testBinaryData,
35195:                           testBinaryData.length,
35198:                           "to-be-reused reading binary")
35198: var makeAnotherReadListener2 = function(event) {
35198:   r = event.target;
35198:   r.removeEventListener("load", makeAnotherReadListener2, false);
35198:   r.onload = getLoadHandler(testBinaryData,
35198:                             testBinaryData.length,
35198:                             "reused reading binary");
35195:   r.readAsBinaryString(binaryFile);
35195: };
35198: r.addEventListener("load", makeAnotherReadListener2, false);
35198: r.readAsBinaryString(binaryFile);
35198: expectedTestCount += 2;
35198: 
35198: r = new FileReader();
35198: r.onload = getLoadHandler(convertToDataURL(testBinaryData),
35198:                           testBinaryData.length,
35198:                           "to-be-reused reading data url")
35198: var makeAnotherReadListener3 = function(event) {
35198:   r = event.target;
35198:   r.removeEventListener("load", makeAnotherReadListener3, false);
35198:   r.onload = getLoadHandler(convertToDataURL(testBinaryData),
35198:                             testBinaryData.length,
35198:                             "reused reading data url");
35198:   r.readAsDataURL(binaryFile);
35198: };
35198: r.addEventListener("load", makeAnotherReadListener3, false);
35198: r.readAsDataURL(binaryFile);
35195: expectedTestCount += 2;
35195: 
35195: 
35194: //Test data-URI encoding on differing file sizes
35194: dataurldata = testBinaryData.substr(0, testBinaryData.length -
35194:                                        testBinaryData.length % 3);
35194: is(dataurldata.length % 3, 0, "Want to test data with length % 3 == 0");
35194: r = new FileReader();
35194: r.onload = getLoadHandler(convertToDataURL(dataurldata),
35194:                           dataurldata.length,
35194:                           "dataurl reading, %3 = 0");
35194: r.readAsDataURL(createFileWithData(dataurldata));
35194: expectedTestCount++;
35187: 
35194: dataurldata = testBinaryData.substr(0, testBinaryData.length - 2 -
35194:                                        testBinaryData.length % 3);
35194: is(dataurldata.length % 3, 1, "Want to test data with length % 3 == 1");
35194: r = new FileReader();
35194: r.onload = getLoadHandler(convertToDataURL(dataurldata),
35194:                           dataurldata.length,
35194:                           "dataurl reading, %3 = 1");
35194: r.readAsDataURL(createFileWithData(dataurldata));
35194: expectedTestCount++;
35187: 
35194: dataurldata = testBinaryData.substr(0, testBinaryData.length - 1 -
35194:                                        testBinaryData.length % 3);
35194: is(dataurldata.length % 3, 2, "Want to test data with length % 3 == 2");
35194: r = new FileReader();
35194: r.onload = getLoadHandler(convertToDataURL(dataurldata),
35194:                           dataurldata.length,
35194:                           "dataurl reading, %3 = 2");
35194: r.readAsDataURL(createFileWithData(dataurldata));
35194: expectedTestCount++;
35187: 
35187: 
35194: // Test abort()
35194: var abortHasRun = false;
35194: var loadEndHasRun = false;
35194: r = new FileReader();
35194: r.onabort = function (event) {
35194:   is(abortHasRun, false, "abort should only fire once");
35194:   is(loadEndHasRun, false, "loadend shouldn't have fired yet");
35194:   abortHasRun = true;
35194:   is(event.target.readyState, FileReader.DONE, "should be DONE while firing onabort");
35194:   is(event.target.error.code, FileError.ABORT_ERR, "error code set to ABORT for aborted reads");
35194:   is(event.target.result, null, "file data should be null on aborted reads");
35194: }
35194: r.onloadend = function (event) {
35194:   is(abortHasRun, true, "abort should fire before loadend");
35194:   is(loadEndHasRun, false, "loadend should only fire once");
35194:   loadEndHasRun = true;
35194:   is(event.target.readyState, FileReader.DONE, "should be DONE while firing onabort");
35194:   is(event.target.error.code, FileError.ABORT_ERR, "error code set to ABORT for aborted reads");
35194:   is(event.target.result, null, "file data should be null on aborted reads");
35194: }
35194: r.onload = function() { ok(false, "load should not fire for aborted reads") };
35194: r.onerror = function() { ok(false, "error should not fire for aborted reads") };
35194: r.onprogress = function() { ok(false, "progress should not fire for aborted reads") };
35194: r.abort();
35194: is(abortHasRun, false, "abort() is a no-op unless loading");
35194: r.readAsText(asciiFile);
35194: r.abort();
35194: is(abortHasRun, true, "abort should fire sync");
35194: is(loadEndHasRun, true, "loadend should fire sync");
35187: 
35194: // Test calling readAsX to cause abort()
35194: var reuseAbortHasRun = false;
35194: r = new FileReader();
35194: r.onabort = function (event) {
35194:   is(reuseAbortHasRun, false, "abort should only fire once");
35194:   reuseAbortHasRun = true;
35194:   is(event.target.readyState, FileReader.DONE, "should be DONE while firing onabort");
35194:   is(event.target.error.code, FileError.ABORT_ERR, "error code set to ABORT for aborted reads");
35194:   is(event.target.result, null, "file data should be null on aborted reads");
35194: }
35194: r.onload = function() { ok(false, "load should not fire for aborted reads") };
35194: r.abort();
35194: is(reuseAbortHasRun, false, "abort() is a no-op unless loading");
35194: r.readAsText(asciiFile);
35194: r.readAsText(asciiFile);
35194: is(reuseAbortHasRun, true, "abort should fire sync");
35194: r.onload = getLoadHandler(testASCIIData, testASCIIData.length, "reuse-as-abort reading");
35194: expectedTestCount++;
35187: 
35187: 
42587: // Test reading from nonexistent files
35194: r = new FileReader();
35194: var didThrow = false;
35194: try {
35194:   r.readAsDataURL(nonExistingFile);
35194: } catch(ex) {
35194:   didThrow = true;
35194: }
47264: // Once this test passes, we should test that onerror gets called and
35194: // that the FileReader object is in the right state during that call.
42587: todo(!didThrow, "shouldn't throw when opening nonexistent file, should fire error instead");
35187: 
35187: 
35194: function getLoadHandler(expectedResult, expectedLength, testName) {
35194:   return function (event) {
35194:     is(event.target.readyState, FileReader.DONE,
35194:        "readyState in test " + testName);
35194:     is(event.target.error, null,
35194:        "no error in test " + testName);
35194:     is(event.target.result, expectedResult,
35194:        "result in test " + testName);
35194:     is(event.lengthComputable, true,
35194:        "lengthComputable in test " + testName);
35194:     is(event.loaded, expectedLength,
35194:        "lengthComputable in test " + testName);
35194:     is(event.total, expectedLength,
35194:        "lengthComputable in test " + testName);
35187:     testHasRun();
35182:   }
33620: }
33620: 
33620: function testHasRun() {
35194:  //alert(testRanCounter);
35194:  ++testRanCounter;
35194:  if (testRanCounter == expectedTestCount) {
35194:     is(onloadHasRunText, true, "onload text should have fired by now"); 
35194:     is(onloadHasRunBinary, true, "onload binary should have fired by now"); 
35194:     SimpleTest.finish();
35194:   }
33620: }
33620: 
35194: function createFileWithData(fileData) {
33620:   var dirSvc = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties);
33620:   var testFile = dirSvc.get("ProfD", Components.interfaces.nsIFile);
35194:   testFile.append("fileAPItestfile" + fileNum);
35194:   fileNum++;
33620:   var outStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
33620:   outStream.init(testFile, 0x02 | 0x08 | 0x20, // write, create, truncate
33620:                  0666, 0);
33620:   outStream.write(fileData, fileData.length);
33620:   outStream.close();
33620: 
33620:   var fileList = document.getElementById('fileList');
33620:   fileList.value = testFile.path;
33620: 
33620:   return fileList.files[0];
33620: }
33620: 
35194: function convertToUTF16(s) {
35194:   res = "";
35194:   for (var i = 0; i < s.length; ++i) {
35194:     c = s.charCodeAt(i);
35194:     res += String.fromCharCode(c >>> 8, c & 255);
35194:   }
35194:   return res;
35194: }
35194: 
35194: function convertToUTF32(s) {
35194:   res = "";
35194:   for (var i = 0; i < s.length; ++i) {
35194:     c = s.charCodeAt(i);
35194:     res += "\0\0" + String.fromCharCode(c >>> 8, c & 255);
35194:   }
35194:   return res;
35194: }
35194: 
35194: function convertToUTF8(s) {
35194:   return unescape(encodeURIComponent(s));
35194: }
35194: 
35194: function convertToDataURL(s) {
35194:   return "data:application/octet-stream;base64," + btoa(s);
35194: }
35194: 
33620: </script>
33620: </pre>
33620: </body> </html>
