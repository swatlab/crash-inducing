    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsIOService_h__
    1: #define nsIOService_h__
    1: 
    1: #include "necko-config.h"
    1: 
    1: #include "nsString.h"
    1: #include "nsIIOService2.h"
25383: #include "nsTArray.h"
    1: #include "nsPISocketTransportService.h" 
    1: #include "nsPIDNSService.h" 
    1: #include "nsIProtocolProxyService2.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsURLHelper.h"
    1: #include "nsWeakPtr.h"
    1: #include "nsIURLParser.h"
    1: #include "nsIObserver.h"
    1: #include "nsWeakReference.h"
    1: #include "nsINetUtil.h"
    1: #include "nsIChannelEventSink.h"
    1: #include "nsIContentSniffer.h"
    1: #include "nsCategoryCache.h"
    1: #include "nsINetworkLinkService.h"
48889: #include "nsAsyncRedirectVerifyHelper.h"
    1: 
    1: #define NS_N(x) (sizeof(x)/sizeof(*x))
    1: 
46844: // We don't want to expose this observer topic.
46844: // Intended internal use only for remoting offline/inline events.
46844: // See Bug 552829
46845: #define NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC "ipc:network:set-offline"
46844: 
    1: static const char gScheme[][sizeof("resource")] =
    1:     {"chrome", "file", "http", "jar", "resource"};
    1: 
    1: class nsIPrefBranch;
    1: class nsIPrefBranch2;
    1: 
    1: class nsIOService : public nsIIOService2
    1:                   , public nsIObserver
    1:                   , public nsINetUtil
    1:                   , public nsSupportsWeakReference
    1: {
    1: public:
    1:     NS_DECL_ISUPPORTS
    1:     NS_DECL_NSIIOSERVICE
    1:     NS_DECL_NSIIOSERVICE2
    1:     NS_DECL_NSIOBSERVER
    1:     NS_DECL_NSINETUTIL
    1: 
    1:     // Gets the singleton instance of the IO Service, creating it as needed
    1:     // Returns nsnull on out of memory or failure to initialize.
    1:     // Returns an addrefed pointer.
    1:     static nsIOService* GetInstance();
    1: 
    1:     NS_HIDDEN_(nsresult) Init();
    1:     NS_HIDDEN_(nsresult) NewURI(const char* aSpec, nsIURI* aBaseURI,
    1:                                 nsIURI* *result,
    1:                                 nsIProtocolHandler* *hdlrResult);
    1: 
    1:     // Called by channels before a redirect happens. This notifies the global
    1:     // redirect observers.
48889:     nsresult AsyncOnChannelRedirect(nsIChannel* oldChan, nsIChannel* newChan,
48889:                                     PRUint32 flags,
48889:                                     nsAsyncRedirectVerifyHelper *helper);
    1: 
    1:     // Gets the array of registered content sniffers
 3860:     const nsCOMArray<nsIContentSniffer>& GetContentSniffers() {
    1:       return mContentSniffers.GetEntries();
    1:     }
    1: 
    1:     PRBool IsOffline() { return mOffline; }
21613:     PRBool IsLinkUp();
    1: 
    1: private:
    1:     // These shouldn't be called directly:
    1:     // - construct using GetInstance
    1:     // - destroy using Release
    1:     nsIOService() NS_HIDDEN;
    1:     ~nsIOService() NS_HIDDEN;
    1: 
    1:     NS_HIDDEN_(nsresult) TrackNetworkLinkStatusForOffline();
    1: 
    1:     NS_HIDDEN_(nsresult) GetCachedProtocolHandler(const char *scheme,
    1:                                                   nsIProtocolHandler* *hdlrResult,
    1:                                                   PRUint32 start=0,
    1:                                                   PRUint32 end=0);
    1:     NS_HIDDEN_(nsresult) CacheProtocolHandler(const char *scheme,
    1:                                               nsIProtocolHandler* hdlr);
    1: 
    1:     // Prefs wrangling
    1:     NS_HIDDEN_(void) PrefsChanged(nsIPrefBranch *prefs, const char *pref = nsnull);
    1:     NS_HIDDEN_(void) GetPrefBranch(nsIPrefBranch2 **);
    1:     NS_HIDDEN_(void) ParsePortList(nsIPrefBranch *prefBranch, const char *pref, PRBool remove);
    1: 
    1: private:
    1:     PRPackedBool                         mOffline;
    1:     PRPackedBool                         mOfflineForProfileChange;
    1:     PRPackedBool                         mManageOfflineStatus;
25375: 
25375:     // Used to handle SetOffline() reentrancy.  See the comment in
25375:     // SetOffline() for more details.
25375:     PRPackedBool                         mSettingOffline;
25375:     PRPackedBool                         mSetOfflineValue;
25375: 
26303:     PRPackedBool                         mShutdown;
26303: 
    1:     nsCOMPtr<nsPISocketTransportService> mSocketTransportService;
    1:     nsCOMPtr<nsPIDNSService>             mDNSService;
    1:     nsCOMPtr<nsIProtocolProxyService2>   mProxyService;
    1:     nsCOMPtr<nsINetworkLinkService>      mNetworkLinkService;
    1:     
    1:     // Cached protocol handlers
    1:     nsWeakPtr                            mWeakHandler[NS_N(gScheme)];
    1: 
    1:     // cached categories
    1:     nsCategoryCache<nsIChannelEventSink> mChannelEventSinks;
    1:     nsCategoryCache<nsIContentSniffer>   mContentSniffers;
    1: 
25383:     nsTArray<PRInt32>                    mRestrictedPortList;
    1: 
    1: public:
    1:     // Necko buffer cache. Used for all default buffer sizes that necko
    1:     // allocates.
    1:     static nsIMemory *gBufferCache;
41031:     static PRUint32   gDefaultSegmentSize;
41031:     static PRUint32   gDefaultSegmentCount;
    1: };
    1: 
    1: /**
    1:  * Reference to the IO service singleton. May be null.
    1:  */
    1: extern nsIOService* gIOService;
    1: 
    1: #endif // nsIOService_h__
