82142: /* ***** BEGIN LICENSE BLOCK *****
82142:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
82142:  *
82142:  * The contents of this file are subject to the Mozilla Public License Version
82142:  * 1.1 (the "License"); you may not use this file except in compliance with
82142:  * the License. You may obtain a copy of the License at
82142:  * http://www.mozilla.org/MPL/
82142:  *
82142:  * Software distributed under the License is distributed on an "AS IS" basis,
82142:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
82142:  * for the specific language governing rights and limitations under the
82142:  * License.
82142:  *
82142:  * The Original Code is Gonk.
82142:  *
82142:  * The Initial Developer of the Original Code is
82142:  *   Mozilla Foundation.
82142:  * Portions created by the Initial Developer are Copyright (C) 2011
82142:  * the Initial Developer. All Rights Reserved.
82142:  *
82142:  * Contributor(s):
82142:  *   Michael Wu <mwu@mozilla.com>
82142:  *
82142:  * Alternatively, the contents of this file may be used under the terms of
82142:  * either the GNU General Public License Version 2 or later (the "GPL"), or
82142:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
82142:  * in which case the provisions of the GPL or the LGPL are applicable instead
82142:  * of those above. If you wish to allow use of your version of this file only
82142:  * under the terms of either the GPL or the LGPL, and not to allow others to
82142:  * use your version of this file under the terms of the MPL, indicate your
82142:  * decision by deleting the provisions above and replace them with the notice
82142:  * and other provisions required by the GPL or the LGPL. If you do not delete
82142:  * the provisions above, a recipient may use your version of this file under
82142:  * the terms of any one of the MPL, the GPL or the LGPL.
82142:  *
82142:  * ***** END LICENSE BLOCK ***** */
82142: 
82142: #ifndef nsWindow_h
82142: #define nsWindow_h
82142: 
82142: #include "nsBaseWidget.h"
82142: 
82142: extern nsIntRect gScreenBounds;
82142: 
87022: class nsIdleService;
87022: 
82142: namespace mozilla {
82142: namespace gl {
82142: class GLContext;
82142: }
82142: namespace layers {
82142: class LayersManager;
82142: }
82142: }
82142: 
82142: namespace android {
82142: class FramebufferNativeWindow;
82142: }
82142: 
84713: namespace widget {
84713: struct InputContext;
84713: struct InputContextAction;
84713: }
84713: 
82142: class nsWindow : public nsBaseWidget
82142: {
82142: public:
82142:     nsWindow();
82142:     virtual ~nsWindow();
82142: 
82142:     static void DoDraw(void);
82142:     static nsEventStatus DispatchInputEvent(nsGUIEvent &aEvent);
82142: 
82142:     NS_IMETHOD Create(nsIWidget *aParent,
82142:                       void *aNativeParent,
82142:                       const nsIntRect &aRect,
82142:                       EVENT_CALLBACK aHandleEventFunction,
82142:                       nsDeviceContext *aContext,
82142:                       nsWidgetInitData *aInitData);
82142:     NS_IMETHOD Destroy(void);
82142: 
82142:     NS_IMETHOD Show(bool aState);
82142:     NS_IMETHOD IsVisible(bool & aState);
82142:     NS_IMETHOD ConstrainPosition(bool aAllowSlop,
82142:                                  PRInt32 *aX,
82142:                                  PRInt32 *aY);
82142:     NS_IMETHOD Move(PRInt32 aX,
82142:                     PRInt32 aY);
82142:     NS_IMETHOD Resize(PRInt32 aWidth,
82142:                       PRInt32 aHeight,
82142:                       bool  aRepaint);
82142:     NS_IMETHOD Resize(PRInt32 aX,
82142:                       PRInt32 aY,
82142:                       PRInt32 aWidth,
82142:                       PRInt32 aHeight,
82142:                       bool aRepaint);
82142:     NS_IMETHOD Enable(bool aState);
82142:     NS_IMETHOD IsEnabled(bool *aState);
82142:     NS_IMETHOD SetFocus(bool aRaise = false);
82142:     NS_IMETHOD ConfigureChildren(const nsTArray<nsIWidget::Configuration>&);
87643:     NS_IMETHOD Invalidate(const nsIntRect &aRect);
82142:     virtual void* GetNativeData(PRUint32 aDataType);
82142:     NS_IMETHOD SetTitle(const nsAString& aTitle)
82142:     {
82142:         return NS_OK;
82142:     }
82142:     virtual nsIntPoint WidgetToScreenOffset();
82142:     NS_IMETHOD DispatchEvent(nsGUIEvent *aEvent, nsEventStatus &aStatus);
82142:     NS_IMETHOD CaptureRollupEvents(nsIRollupListener *aListener,
82142:                                    bool aDoCapture,
82142:                                    bool aConsumeRollupEvent)
82142:     {
82142:         return NS_ERROR_NOT_IMPLEMENTED;
82142:     }
82142:     NS_IMETHOD ReparentNativeWidget(nsIWidget* aNewParent);
82142: 
82142:     virtual float GetDPI();
82142:     virtual mozilla::layers::LayerManager*
82142:         GetLayerManager(PLayersChild* aShadowManager = nsnull,
82142:                         LayersBackend aBackendHint = LayerManager::LAYERS_NONE,
82142:                         LayerManagerPersistence aPersistence = LAYER_MANAGER_CURRENT,
82142:                         bool* aAllowRetaining = nsnull);
82142:     gfxASurface* GetThebesSurface();
82142: 
84713:     NS_IMETHOD_(void) SetInputContext(const InputContext& aContext,
84713:                                       const InputContextAction& aAction);
84713:     NS_IMETHOD_(InputContext) GetInputContext();
84713: 
82142: protected:
82142:     nsWindow* mParent;
82142:     bool mVisible;
86364:     nsIntRegion mDirtyRegion;
86364:     InputContext mInputContext;
87022:     nsCOMPtr<nsIdleService> mIdleService;
82142: 
82142:     void BringToTop();
87022: 
87022:     // Call this function when the users activity is the direct cause of an
87022:     // event (like a keypress or mouse click).
87022:     void UserActivity();
82142: };
82142: 
82142: #endif /* nsWindow_h */
