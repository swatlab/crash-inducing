43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
43113:  *
43113:  * ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is nsCacheEntryDescriptor.h, released
43113:  * February 22, 2001.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Gordon Sheridan, 22-February-2001
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: 
43113: #ifndef _nsCacheEntryDescriptor_h_
43113: #define _nsCacheEntryDescriptor_h_
43113: 
43113: #include "nsICacheEntryDescriptor.h"
43113: #include "nsCacheEntry.h"
43113: #include "nsIInputStream.h"
43113: #include "nsIOutputStream.h"
60325: #include "nsCacheService.h"
60325: #include "nsIDiskCacheStreamInternal.h"
84841: #include "zlib.h"
43113: 
43113: /******************************************************************************
43113: * nsCacheEntryDescriptor
43113: *******************************************************************************/
43113: class nsCacheEntryDescriptor :
43113:     public PRCList,
43113:     public nsICacheEntryDescriptor
43113: {
43113: public:
43113:     NS_DECL_ISUPPORTS
43113:     NS_DECL_NSICACHEENTRYDESCRIPTOR
43113:     NS_DECL_NSICACHEENTRYINFO
43113:     
43113:     nsCacheEntryDescriptor(nsCacheEntry * entry, nsCacheAccessMode  mode);
43113:     virtual ~nsCacheEntryDescriptor();
43113:     
43113:     /**
43113:      * utility method to attempt changing data size of associated entry
43113:      */
43113:     nsresult  RequestDataSizeChange(PRInt32 deltaSize);
43113:     
43113:     /**
43113:      * methods callbacks for nsCacheService
43113:      */
43113:     nsCacheEntry * CacheEntry(void)      { return mCacheEntry; }
43113:     void           ClearCacheEntry(void) { mCacheEntry = nsnull; }
43113: 
88288:     nsresult       CloseOutput(void)
60325:     {
88288:       nsresult rv = InternalCleanup(mOutput);
72221:       mOutput = nsnull;
88288:       return rv;
72221:     }
72221: 
72221: private:
88288:     nsresult       InternalCleanup(nsIOutputStream *stream)
72221:     {
72221:       if (stream) {
72221:         nsCOMPtr<nsIDiskCacheStreamInternal> tmp (do_QueryInterface(stream));
70080:         if (tmp)
88288:           return tmp->CloseInternal();
70080:         else
88288:           return stream->Close();
70069:       }
88288:       return NS_OK;
70080:     }
70069: 
43113: 
43113:      /*************************************************************************
43113:       * input stream wrapper class -
43113:       *
43113:       * The input stream wrapper references the descriptor, but the descriptor
43113:       * doesn't need any references to the stream wrapper.
43113:       *************************************************************************/
43113:      class nsInputStreamWrapper : public nsIInputStream {
43113:      private:
43113:          nsCacheEntryDescriptor    * mDescriptor;
43113:          nsCOMPtr<nsIInputStream>    mInput;
43113:          PRUint32                    mStartOffset;
79445:          bool                        mInitialized;
43113:      public:
43113:          NS_DECL_ISUPPORTS
43113:          NS_DECL_NSIINPUTSTREAM
43113: 
43113:          nsInputStreamWrapper(nsCacheEntryDescriptor * desc, PRUint32 off)
43113:              : mDescriptor(desc)
43113:              , mStartOffset(off)
80486:              , mInitialized(false)
43113:          {
43113:              NS_ADDREF(mDescriptor);
43113:          }
43113:          virtual ~nsInputStreamWrapper()
43113:          {
43113:              NS_RELEASE(mDescriptor);
43113:          }
43113: 
43113:      private:
43113:          nsresult LazyInit();
43113:          nsresult EnsureInit() { return mInitialized ? NS_OK : LazyInit(); }
43113:      };
43113:      friend class nsInputStreamWrapper;
43113: 
43113: 
84841:      class nsDecompressInputStreamWrapper : public nsInputStreamWrapper {
84841:      private:
84841:          unsigned char* mReadBuffer;
84841:          PRUint32 mReadBufferLen;
84841:          z_stream mZstream;
84841:          PRBool mStreamInitialized;
84841:          PRBool mStreamEnded;
84841:      public:
84841:          NS_DECL_ISUPPORTS
84841: 
84841:          nsDecompressInputStreamWrapper(nsCacheEntryDescriptor * desc,
84841:                                       PRUint32 off)
84841:           : nsInputStreamWrapper(desc, off)
84841:           , mReadBuffer(0)
84841:           , mReadBufferLen(0)
84841:           , mStreamInitialized(PR_FALSE)
84841:           , mStreamEnded(PR_FALSE)
84841:          {
84841:          }
84841:          virtual ~nsDecompressInputStreamWrapper()
84841:          {
84841:              Close();
84841:          }
84841:          NS_IMETHOD Read(char* buf, PRUint32 count, PRUint32 * result);
84841:          NS_IMETHOD Close();
84841:      private:
84841:          nsresult InitZstream();
84841:          nsresult EndZstream();
84841:      };
84841: 
84841: 
43113:      /*************************************************************************
43113:       * output stream wrapper class -
43113:       *
43113:       * The output stream wrapper references the descriptor, but the descriptor
43113:       * doesn't need any references to the stream wrapper.
43113:       *************************************************************************/
43113:      class nsOutputStreamWrapper : public nsIOutputStream {
84841:      protected:
43113:          nsCacheEntryDescriptor *    mDescriptor;
43113:          nsCOMPtr<nsIOutputStream>   mOutput;
43113:          PRUint32                    mStartOffset;
79445:          bool                        mInitialized;
43113:      public:
43113:          NS_DECL_ISUPPORTS
43113:          NS_DECL_NSIOUTPUTSTREAM
43113: 
43113:          nsOutputStreamWrapper(nsCacheEntryDescriptor * desc, PRUint32 off)
43113:              : mDescriptor(desc)
43113:              , mStartOffset(off)
80486:              , mInitialized(false)
43113:          {
43113:              NS_ADDREF(mDescriptor); // owning ref
43113:          }
43113:          virtual ~nsOutputStreamWrapper()
43113:          { 
43113:              // XXX _HACK_ the storage stream needs this!
43113:              Close();
60325:              {
60325:              nsCacheServiceAutoLock lock;
60325:              mDescriptor->mOutput = nsnull;
60325:              }
43113:              NS_RELEASE(mDescriptor);
43113:          }
43113: 
43113:      private:
43113:          nsresult LazyInit();
43113:          nsresult EnsureInit() { return mInitialized ? NS_OK : LazyInit(); }
43113:          nsresult OnWrite(PRUint32 count);
43113:      };
43113:      friend class nsOutputStreamWrapper;
43113: 
84841:      class nsCompressOutputStreamWrapper : public nsOutputStreamWrapper {
84841:      private:
84841:          unsigned char* mWriteBuffer;
84841:          PRUint32 mWriteBufferLen;
84841:          z_stream mZstream;
84841:          PRBool mStreamInitialized;
84841:          PRUint32 mUncompressedCount;
84841:      public:
84841:          NS_DECL_ISUPPORTS
84841: 
84841:          nsCompressOutputStreamWrapper(nsCacheEntryDescriptor * desc, 
84841:                                        PRUint32 off)
84841:           : nsOutputStreamWrapper(desc, off)
84841:           , mWriteBuffer(0)
84841:           , mWriteBufferLen(0)
84841:           , mStreamInitialized(PR_FALSE)
84841:           , mUncompressedCount(0)
84841:          {
84841:          }
84841:          virtual ~nsCompressOutputStreamWrapper()
84841:          { 
84841:              Close();
84841:          }
84841:          NS_IMETHOD Write(const char* buf, PRUint32 count, PRUint32 * result);
84841:          NS_IMETHOD Close();
84841:      private:
84841:          nsresult InitZstream();
84841:          nsresult WriteBuffer();
84841:      };
84841: 
43113:  private:
43113:      /**
43113:       * nsCacheEntryDescriptor data members
43113:       */
43113:      nsCacheEntry          * mCacheEntry; // we are a child of the entry
43113:      nsCacheAccessMode       mAccessGranted;
60325:      nsIOutputStream       * mOutput;
43113: };
43113: 
43113: 
43113: #endif // _nsCacheEntryDescriptor_h_
