    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
36532:  * The Initial Developer of the Original Code is Mozilla Foundation.
30479:  * Portions created by the Initial Developer are Copyright (C) 2009
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
30479:  *   Joe Drew <joe@drew.ca> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
30479: #include "imgFrame.h"
30479: 
 7123: #include <limits.h>
30479: 
 7671: #include "prmem.h"
30479: #include "prenv.h"
    1: 
30479: #include "gfxPlatform.h"
50417: #include "gfxUtils.h"
    1: 
30479: static PRBool gDisableOptimize = PR_FALSE;
30479: 
30479: #include "cairo.h"
30479: 
69431: #if defined(XP_WIN)
69431: 
30479: #include "gfxWindowsPlatform.h"
30479: 
30479: /* Whether to use the windows surface; only for desktop win32 */
30479: #define USE_WIN_SURFACE 1
30479: 
30479: static PRUint32 gTotalDDBs = 0;
30479: static PRUint32 gTotalDDBSize = 0;
30479: // only use up a maximum of 64MB in DDBs
30479: #define kMaxDDBSize (64*1024*1024)
30479: // and don't let anything in that's bigger than 4MB
30479: #define kMaxSingleDDBSize (4*1024*1024)
30479: 
30479: #endif
30479: 
30479: // Returns true if an image of aWidth x aHeight is allowed and legal.
30479: static PRBool AllowedImageSize(PRInt32 aWidth, PRInt32 aHeight)
30479: {
72903:   NS_ASSERTION(aWidth > 0, "invalid image width");
72903:   NS_ASSERTION(aHeight > 0, "invalid image height");
72903: 
30479:   // reject over-wide or over-tall images
30479:   const PRInt32 k64KLimit = 0x0000FFFF;
30479:   if (NS_UNLIKELY(aWidth > k64KLimit || aHeight > k64KLimit )) {
30479:     NS_WARNING("image too big");
30479:     return PR_FALSE;
30479:   }
30479: 
72903:   // protect against division by zero - this really shouldn't happen
72903:   // if our consumers were well behaved, but they aren't (bug 368427)
72903:   if (NS_UNLIKELY(aHeight == 0)) {
30479:     return PR_FALSE;
30479:   }
30479: 
30479:   // check to make sure we don't overflow a 32-bit
30479:   PRInt32 tmp = aWidth * aHeight;
30479:   if (NS_UNLIKELY(tmp / aHeight != aWidth)) {
30479:     NS_WARNING("width or height too large");
30479:     return PR_FALSE;
30479:   }
30479:   tmp = tmp * 4;
30479:   if (NS_UNLIKELY(tmp / 4 != aWidth * aHeight)) {
30479:     NS_WARNING("width or height too large");
30479:     return PR_FALSE;
30479:   }
30479: #if defined(XP_MACOSX)
30479:   // CoreGraphics is limited to images < 32K in *height*, so clamp all surfaces on the Mac to that height
30479:   if (NS_UNLIKELY(aHeight > SHRT_MAX)) {
30479:     NS_WARNING("image too big");
30479:     return PR_FALSE;
30479:   }
30479: #endif
30479:   return PR_TRUE;
30479: }
30479: 
30479: // Returns whether we should, at this time, use image surfaces instead of
30479: // optimized platform-specific surfaces.
30479: static PRBool ShouldUseImageSurfaces()
30479: {
69431: #if defined(USE_WIN_SURFACE)
30479:   static const DWORD kGDIObjectsHighWaterMark = 7000;
30479: 
38727:   if (gfxWindowsPlatform::GetPlatform()->GetRenderMode() ==
38727:       gfxWindowsPlatform::RENDER_DIRECT2D) {
38727:     return PR_TRUE;
38727:   }
38727: 
30479:   // at 7000 GDI objects, stop allocating normal images to make sure
30479:   // we never hit the 10k hard limit.
30479:   // GetCurrentProcess() just returns (HANDLE)-1, it's inlined afaik
30479:   DWORD count = GetGuiResources(GetCurrentProcess(), GR_GDIOBJECTS);
30479:   if (count == 0 ||
30479:       count > kGDIObjectsHighWaterMark)
30479:   {
30479:     // either something's broken (count == 0),
30479:     // or we hit our high water mark; disable
30479:     // image allocations for a bit.
30479:     return PR_TRUE;
30479:   }
30479: #endif
30479: 
30479:   return PR_FALSE;
30479: }
30479: 
30479: imgFrame::imgFrame() :
30479:   mDecoded(0, 0, 0, 0),
30479:   mPalettedImageData(nsnull),
30479:   mSinglePixelColor(0),
    1:   mTimeout(100),
 7108:   mDisposalMethod(0), /* imgIContainer::kDisposeNotSpecified */
 7671:   mBlendMethod(1), /* imgIContainer::kBlendOver */
30479:   mSinglePixel(PR_FALSE),
30479:   mNeverUseDeviceSurface(PR_FALSE),
34809:   mFormatChanged(PR_FALSE),
34809:   mCompositingFailed(PR_FALSE)
30479: #ifdef USE_WIN_SURFACE
30479:   , mIsDDBSurface(PR_FALSE)
30479: #endif
38698:   , mLocked(PR_FALSE)
    1: {
30479:   static PRBool hasCheckedOptimize = PR_FALSE;
30479:   if (!hasCheckedOptimize) {
30479:     if (PR_GetEnv("MOZ_DISABLE_IMAGE_OPTIMIZE")) {
30479:       gDisableOptimize = PR_TRUE;
30479:     }
30479:     hasCheckedOptimize = PR_TRUE;
30479:   }
    1: }
    1: 
30479: imgFrame::~imgFrame()
    1: {
30479:   PR_FREEIF(mPalettedImageData);
30479: #ifdef USE_WIN_SURFACE
30479:   if (mIsDDBSurface) {
30479:       gTotalDDBs--;
30479:       gTotalDDBSize -= mSize.width * mSize.height * 4;
30479:   }
30479: #endif
    1: }
    1: 
30479: nsresult imgFrame::Init(PRInt32 aX, PRInt32 aY, PRInt32 aWidth, PRInt32 aHeight, 
30479:                         gfxASurface::gfxImageFormat aFormat, PRInt8 aPaletteDepth /* = 0 */)
    1: {
30479:   // assert for properties that should be verified by decoders, warn for properties related to bad content
30479:   if (!AllowedImageSize(aWidth, aHeight))
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   mOffset.MoveTo(aX, aY);
    1:   mSize.SizeTo(aWidth, aHeight);
    1: 
    1:   mFormat = aFormat;
30479:   mPaletteDepth = aPaletteDepth;
    1: 
30479:   if (aPaletteDepth != 0) {
30479:     // We're creating for a paletted image.
30479:     if (aPaletteDepth > 8) {
43756:       NS_ERROR("This Depth is not supported");
 7671:       return NS_ERROR_FAILURE;
    1:     }
    1: 
51291:     // Use the fallible allocator here
51291:     mPalettedImageData = (PRUint8*)moz_malloc(PaletteDataLength() + GetImageDataLength());
30479:     NS_ENSURE_TRUE(mPalettedImageData, NS_ERROR_OUT_OF_MEMORY);
30479:   } else {
30479:     // For Windows, we must create the device surface first (if we're
30479:     // going to) so that the image surface can wrap it.  Can't be done
30479:     // the other way around.
30479: #ifdef USE_WIN_SURFACE
30479:     if (!mNeverUseDeviceSurface && !ShouldUseImageSurfaces()) {
30479:       mWinSurface = new gfxWindowsSurface(gfxIntSize(mSize.width, mSize.height), mFormat);
30479:       if (mWinSurface && mWinSurface->CairoStatus() == 0) {
30479:         // no error
57344:         mImageSurface = mWinSurface->GetAsImageSurface();
30479:       } else {
30479:         mWinSurface = nsnull;
30479:       }
30479:     }
30479: #endif
30479: 
30479:     // For other platforms we create the image surface first and then
30479:     // possibly wrap it in a device surface.  This branch is also used
30479:     // on Windows if we're not using device surfaces or if we couldn't
30479:     // create one.
30479:     if (!mImageSurface)
30479:       mImageSurface = new gfxImageSurface(gfxIntSize(mSize.width, mSize.height), mFormat);
30479: 
30479:     if (!mImageSurface || mImageSurface->CairoStatus()) {
30479:       mImageSurface = nsnull;
30479:       // guess
30479:       return NS_ERROR_OUT_OF_MEMORY;
 7671:     }
 7671: 
30479: #ifdef XP_MACOSX
30479:     if (!mNeverUseDeviceSurface && !ShouldUseImageSurfaces()) {
30479:       mQuartzSurface = new gfxQuartzImageSurface(mImageSurface);
 7671:     }
30479: #endif
 7671:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
30479: nsresult imgFrame::Optimize()
    1: {
30479:   if (gDisableOptimize)
30479:     return NS_OK;
    1: 
30479:   if (mPalettedImageData || mOptSurface || mSinglePixel)
30479:     return NS_OK;
30479: 
30479:   /* Figure out if the entire image is a constant color */
30479: 
30479:   // this should always be true
30479:   if (mImageSurface->Stride() == mSize.width * 4) {
30479:     PRUint32 *imgData = (PRUint32*) mImageSurface->Data();
30479:     PRUint32 firstPixel = * (PRUint32*) imgData;
30479:     PRUint32 pixelCount = mSize.width * mSize.height + 1;
30479: 
30479:     while (--pixelCount && *imgData++ == firstPixel)
30479:       ;
30479: 
30479:     if (pixelCount == 0) {
30479:       // all pixels were the same
30479:       if (mFormat == gfxASurface::ImageFormatARGB32 ||
30479:           mFormat == gfxASurface::ImageFormatRGB24)
30479:       {
30479:         mSinglePixelColor = gfxRGBA
30479:           (firstPixel,
30479:            (mFormat == gfxImageSurface::ImageFormatRGB24 ?
30479:             gfxRGBA::PACKED_XRGB :
30479:             gfxRGBA::PACKED_ARGB_PREMULTIPLIED));
30479: 
30479:         mSinglePixel = PR_TRUE;
30479: 
30479:         // blow away the older surfaces (if they exist), to release their memory
30479:         mImageSurface = nsnull;
30479:         mOptSurface = nsnull;
30479: #ifdef USE_WIN_SURFACE
30479:         mWinSurface = nsnull;
30479: #endif
30479: #ifdef XP_MACOSX
30479:         mQuartzSurface = nsnull;
30479: #endif
    1:         return NS_OK;
    1:       }
    1:     }
    1: 
30479:     // if it's not RGB24/ARGB32, don't optimize, but we never hit this at the moment
    1:   }
    1: 
30479:   // if we're being forced to use image surfaces due to
30479:   // resource constraints, don't try to optimize beyond same-pixel.
30479:   if (mNeverUseDeviceSurface || ShouldUseImageSurfaces())
30479:     return NS_OK;
30479: 
30479:   mOptSurface = nsnull;
30479: 
30479: #ifdef USE_WIN_SURFACE
30479:   // we need to special-case windows here, because windows has
30479:   // a distinction between DIB and DDB and we want to use DDBs as much
30479:   // as we can.
30479:   if (mWinSurface) {
30479:     // Don't do DDBs for large images; see bug 359147
30479:     // Note that we bother with DDBs at all because they are much faster
30479:     // on some systems; on others there isn't much of a speed difference
30479:     // between DIBs and DDBs.
30479:     //
30479:     // Originally this just limited to 1024x1024; but that still
30479:     // had us hitting overall total memory usage limits (which was
30479:     // around 220MB on my intel shared memory system with 2GB RAM
30479:     // and 16-128mb in use by the video card, so I can't make
30479:     // heads or tails out of this limit).
30479:     //
30479:     // So instead, we clamp the max size to 64MB (this limit shuld
30479:     // be made dynamic based on.. something.. as soon a we figure
30479:     // out that something) and also limit each individual image to
30479:     // be less than 4MB to keep very large images out of DDBs.
30479: 
30479:     // assume (almost -- we don't quadword-align) worst-case size
30479:     PRUint32 ddbSize = mSize.width * mSize.height * 4;
30479:     if (ddbSize <= kMaxSingleDDBSize &&
30479:         ddbSize + gTotalDDBSize <= kMaxDDBSize)
    1:     {
30479:       nsRefPtr<gfxWindowsSurface> wsurf = mWinSurface->OptimizeToDDB(nsnull, gfxIntSize(mSize.width, mSize.height), mFormat);
30479:       if (wsurf) {
30479:         gTotalDDBs++;
30479:         gTotalDDBSize += ddbSize;
30479:         mIsDDBSurface = PR_TRUE;
30479:         mOptSurface = wsurf;
30479:       }
30479:     }
30479:     if (!mOptSurface && !mFormatChanged) {
30479:       // just use the DIB if the format has not changed
30479:       mOptSurface = mWinSurface;
30479:     }
30479:   }
30479: #endif
    1: 
30479: #ifdef XP_MACOSX
30479:   if (mQuartzSurface) {
30479:     mQuartzSurface->Flush();
30479:     mOptSurface = mQuartzSurface;
    1:   }
30479: #endif
    1: 
30479:   if (mOptSurface == nsnull)
30479:     mOptSurface = gfxPlatform::GetPlatform()->OptimizeImage(mImageSurface, mFormat);
    1: 
30479:   if (mOptSurface) {
30479:     mImageSurface = nsnull;
30479: #ifdef USE_WIN_SURFACE
30479:     mWinSurface = nsnull;
30479: #endif
30479: #ifdef XP_MACOSX
30479:     mQuartzSurface = nsnull;
30479: #endif
30479:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
50417: static void
50417: DoSingleColorFastPath(gfxContext*    aContext,
50417:                       const gfxRGBA& aSinglePixelColor,
50417:                       const gfxRect& aFill)
    1: {
50417:   // if a == 0, it's a noop
50417:   if (aSinglePixelColor.a == 0.0)
50417:     return;
50417: 
50417:   gfxContext::GraphicsOperator op = aContext->CurrentOperator();
50417:   if (op == gfxContext::OPERATOR_OVER && aSinglePixelColor.a == 1.0) {
50417:     aContext->SetOperator(gfxContext::OPERATOR_SOURCE);
50417:   }
50417: 
50417:   aContext->SetDeviceColor(aSinglePixelColor);
50417:   aContext->NewPath();
50417:   aContext->Rectangle(aFill);
50417:   aContext->Fill();
50417:   aContext->SetOperator(op);
50417:   aContext->SetDeviceColor(gfxRGBA(0,0,0,0));
50417: }
50417: 
50417: imgFrame::SurfaceWithFormat
50417: imgFrame::SurfaceForDrawing(PRBool             aDoPadding,
50417:                             PRBool             aDoPartialDecode,
50417:                             PRBool             aDoTile,
50417:                             const nsIntMargin& aPadding,
50417:                             gfxMatrix&         aUserSpaceToImageSpace,
50417:                             gfxRect&           aFill,
50417:                             gfxRect&           aSubimage,
50417:                             gfxRect&           aSourceRect,
50417:                             gfxRect&           aImageRect)
50417: {
50419:   gfxIntSize size(PRInt32(aImageRect.Width()), PRInt32(aImageRect.Height()));
50417:   if (!aDoPadding && !aDoPartialDecode) {
50417:     NS_ASSERTION(!mSinglePixel, "This should already have been handled");
50419:     return SurfaceWithFormat(new gfxSurfaceDrawable(ThebesSurface(), size), mFormat);
50417:   }
50417: 
50417:   gfxRect available = gfxRect(mDecoded.x, mDecoded.y, mDecoded.width, mDecoded.height);
50417: 
50417:   if (aDoTile || mSinglePixel) {
50417:     // Create a temporary surface.
50417:     // Give this surface an alpha channel because there are
50417:     // transparent pixels in the padding or undecoded area
50417:     gfxImageSurface::gfxImageFormat format = gfxASurface::ImageFormatARGB32;
50417:     nsRefPtr<gfxASurface> surface =
54253:       gfxPlatform::GetPlatform()->CreateOffscreenSurface(size, gfxImageSurface::ContentFromFormat(format));
50417:     if (!surface || surface->CairoStatus())
50417:       return SurfaceWithFormat();
50417: 
50417:     // Fill 'available' with whatever we've got
50417:     gfxContext tmpCtx(surface);
50417:     tmpCtx.SetOperator(gfxContext::OPERATOR_SOURCE);
50417:     if (mSinglePixel) {
50417:       tmpCtx.SetDeviceColor(mSinglePixelColor);
50417:     } else {
50417:       tmpCtx.SetSource(ThebesSurface(), gfxPoint(aPadding.left, aPadding.top));
50417:     }
50417:     tmpCtx.Rectangle(available);
50417:     tmpCtx.Fill();
50419:     return SurfaceWithFormat(new gfxSurfaceDrawable(surface, size), format);
50417:   }
50417: 
50417:   // Not tiling, and we have a surface, so we can account for
50417:   // padding and/or a partial decode just by twiddling parameters.
50417:   // First, update our user-space fill rect.
50417:   aSourceRect = aSourceRect.Intersect(available);
50417:   gfxMatrix imageSpaceToUserSpace = aUserSpaceToImageSpace;
50417:   imageSpaceToUserSpace.Invert();
50417:   aFill = imageSpaceToUserSpace.Transform(aSourceRect);
50417: 
50417:   aSubimage = aSubimage.Intersect(available) - gfxPoint(aPadding.left, aPadding.top);
50417:   aUserSpaceToImageSpace.Multiply(gfxMatrix().Translate(-gfxPoint(aPadding.left, aPadding.top)));
50417:   aSourceRect = aSourceRect - gfxPoint(aPadding.left, aPadding.top);
50417:   aImageRect = gfxRect(0, 0, mSize.width, mSize.height);
50417: 
50419:   gfxIntSize availableSize(mDecoded.width, mDecoded.height);
50419:   return SurfaceWithFormat(new gfxSurfaceDrawable(ThebesSurface(),
50419:                                                   availableSize),
50419:                            mFormat);
    1: }
    1: 
30479: void imgFrame::Draw(gfxContext *aContext, gfxPattern::GraphicsFilter aFilter,
30479:                     const gfxMatrix &aUserSpaceToImageSpace, const gfxRect& aFill,
30479:                     const nsIntMargin &aPadding, const nsIntRect &aSubimage)
    1: {
30479:   NS_ASSERTION(!aFill.IsEmpty(), "zero dest size --- fix caller");
30479:   NS_ASSERTION(!aSubimage.IsEmpty(), "zero source size --- fix caller");
30479:   NS_ASSERTION(!mPalettedImageData, "Directly drawing a paletted image!");
    1: 
30479:   PRBool doPadding = aPadding != nsIntMargin(0,0,0,0);
30479:   PRBool doPartialDecode = !ImageComplete();
30479: 
50417:   if (mSinglePixel && !doPadding && !doPartialDecode) {
50417:     DoSingleColorFastPath(aContext, mSinglePixelColor, aFill);
30479:     return;
    1:   }
    1: 
30479:   gfxMatrix userSpaceToImageSpace = aUserSpaceToImageSpace;
30479:   gfxRect sourceRect = userSpaceToImageSpace.Transform(aFill);
50417:   gfxRect imageRect(0, 0, mSize.width + aPadding.LeftRight(),
50417:                     mSize.height + aPadding.TopBottom());
30479:   gfxRect subimage(aSubimage.x, aSubimage.y, aSubimage.width, aSubimage.height);
30479:   gfxRect fill = aFill;
    1: 
30479:   NS_ASSERTION(!sourceRect.Intersect(subimage).IsEmpty(),
30479:                "We must be allowed to sample *some* source pixels!");
    1: 
30479:   PRBool doTile = !imageRect.Contains(sourceRect);
50417:   SurfaceWithFormat surfaceResult =
50417:     SurfaceForDrawing(doPadding, doPartialDecode, doTile, aPadding,
50417:                       userSpaceToImageSpace, fill, subimage, sourceRect,
50417:                       imageRect);
30479: 
50417:   if (surfaceResult.IsValid()) {
50419:     gfxUtils::DrawPixelSnapped(aContext, surfaceResult.mDrawable,
50417:                                userSpaceToImageSpace,
50417:                                subimage, sourceRect, imageRect, fill,
50417:                                surfaceResult.mFormat, aFilter);
30479:   }
30479: }
30479: 
30479: nsresult imgFrame::Extract(const nsIntRect& aRegion, imgFrame** aResult)
30479: {
30479:   nsAutoPtr<imgFrame> subImage(new imgFrame());
30479:   if (!subImage)
30479:     return NS_ERROR_OUT_OF_MEMORY;
30479: 
30479:   // The scaling problems described in bug 468496 are especially
30479:   // likely to be visible for the sub-image, as at present the only
30479:   // user is the border-image code and border-images tend to get
30479:   // stretched a lot.  At the same time, the performance concerns
30479:   // that prevent us from just using Cairo's fallback scaler when
30479:   // accelerated graphics won't cut it are less relevant to such
30479:   // images, since they also tend to be small.  Thus, we forcibly
30479:   // disable the use of anything other than a client-side image
30479:   // surface for the sub-image; this ensures that the correct
30479:   // (albeit slower) Cairo fallback scaler will be used.
30479:   subImage->mNeverUseDeviceSurface = PR_TRUE;
30479: 
30479:   nsresult rv = subImage->Init(0, 0, aRegion.width, aRegion.height, 
30479:                                mFormat, mPaletteDepth);
30479:   NS_ENSURE_SUCCESS(rv, rv);
30479: 
30479:   // scope to destroy ctx
30479:   {
30479:     gfxContext ctx(subImage->ThebesSurface());
30479:     ctx.SetOperator(gfxContext::OPERATOR_SOURCE);
30479:     if (mSinglePixel) {
30479:       ctx.SetDeviceColor(mSinglePixelColor);
30479:     } else {
30479:       // SetSource() places point (0,0) of its first argument at
30479:       // the coordinages given by its second argument.  We want
30479:       // (x,y) of the image to be (0,0) of source space, so we
30479:       // put (0,0) of the image at (-x,-y).
30479:       ctx.SetSource(this->ThebesSurface(), gfxPoint(-aRegion.x, -aRegion.y));
30479:     }
30479:     ctx.Rectangle(gfxRect(0, 0, aRegion.width, aRegion.height));
30479:     ctx.Fill();
30479:   }
30479: 
30479:   nsIntRect filled(0, 0, aRegion.width, aRegion.height);
30479: 
30479:   rv = subImage->ImageUpdated(filled);
30479:   NS_ENSURE_SUCCESS(rv, rv);
30479: 
30479:   subImage->Optimize();
30479: 
30479:   *aResult = subImage.forget();
 7671: 
 7671:   return NS_OK;
 7671: }
 7671: 
30479: nsresult imgFrame::ImageUpdated(const nsIntRect &aUpdateRect)
 7671: {
30479:   mDecoded.UnionRect(mDecoded, aUpdateRect);
30479: 
30479:   // clamp to bounds, in case someone sends a bogus updateRect (I'm looking at
30479:   // you, gif decoder)
39231:   nsIntRect boundsRect(mOffset, mSize);
30479:   mDecoded.IntersectRect(mDecoded, boundsRect);
30479: 
30479: #ifdef XP_MACOSX
30479:   if (mQuartzSurface)
30479:     mQuartzSurface->Flush();
30479: #endif
30479:   return NS_OK;
30479: }
30479: 
30479: PRInt32 imgFrame::GetX() const
30479: {
30479:   return mOffset.x;
30479: }
30479: 
30479: PRInt32 imgFrame::GetY() const
30479: {
30479:   return mOffset.y;
30479: }
30479: 
30479: PRInt32 imgFrame::GetWidth() const
30479: {
30479:   return mSize.width;
30479: }
30479: 
30479: PRInt32 imgFrame::GetHeight() const
30479: {
30479:   return mSize.height;
30479: }
30479: 
30479: nsIntRect imgFrame::GetRect() const
30479: {
30479:   return nsIntRect(mOffset, mSize);
30479: }
30479: 
30479: gfxASurface::gfxImageFormat imgFrame::GetFormat() const
30479: {
30479:   return mFormat;
30479: }
30479: 
30479: PRBool imgFrame::GetNeedsBackground() const
30479: {
30479:   // We need a background painted if we have alpha or we're incomplete.
30479:   return (mFormat == gfxASurface::ImageFormatARGB32 || !ImageComplete());
30479: }
30479: 
30479: PRUint32 imgFrame::GetImageBytesPerRow() const
30479: {
30479:   if (mImageSurface)
30479:     return mImageSurface->Stride();
42553: 
42553:   if (mPaletteDepth)
30479:     return mSize.width;
42553: 
42553:   NS_ERROR("GetImageBytesPerRow called with mImageSurface == null and mPaletteDepth == 0");
42553: 
42553:   return 0;
30479: }
30479: 
30479: PRUint32 imgFrame::GetImageDataLength() const
30479: {
42553:   return GetImageBytesPerRow() * mSize.height;
30479: }
30479: 
30479: void imgFrame::GetImageData(PRUint8 **aData, PRUint32 *length) const
30479: {
30479:   if (mImageSurface)
30479:     *aData = mImageSurface->Data();
30479:   else if (mPalettedImageData)
30479:     *aData = mPalettedImageData + PaletteDataLength();
30479:   else
30479:     *aData = nsnull;
30479: 
30479:   *length = GetImageDataLength();
30479: }
30479: 
30479: PRBool imgFrame::GetIsPaletted() const
30479: {
30479:   return mPalettedImageData != nsnull;
30479: }
30479: 
30479: PRBool imgFrame::GetHasAlpha() const
30479: {
30544:   return mFormat == gfxASurface::ImageFormatARGB32;
30479: }
30479: 
30479: void imgFrame::GetPaletteData(PRUint32 **aPalette, PRUint32 *length) const
30479: {
30479:   if (!mPalettedImageData) {
30479:     *aPalette = nsnull;
30479:     *length = 0;
30479:   } else {
30479:     *aPalette = (PRUint32 *) mPalettedImageData;
 7671:     *length = PaletteDataLength();
30479:   }
30479: }
30479: 
30479: nsresult imgFrame::LockImageData()
30479: {
30479:   if (mPalettedImageData)
35020:     return NS_ERROR_NOT_AVAILABLE;
30479: 
38698:   NS_ABORT_IF_FALSE(!mLocked, "Trying to lock already locked image data.");
38698:   if (mLocked) {
38698:     return NS_ERROR_FAILURE;
38698:   }
38698:   mLocked = PR_TRUE;
38698: 
30479:   if ((mOptSurface || mSinglePixel) && !mImageSurface) {
30479:     // Recover the pixels
30479:     mImageSurface = new gfxImageSurface(gfxIntSize(mSize.width, mSize.height),
30479:                                         gfxImageSurface::ImageFormatARGB32);
30479:     if (!mImageSurface || mImageSurface->CairoStatus())
30479:       return NS_ERROR_OUT_OF_MEMORY;
30479: 
30479:     gfxContext context(mImageSurface);
30479:     context.SetOperator(gfxContext::OPERATOR_SOURCE);
30479:     if (mSinglePixel)
30479:       context.SetDeviceColor(mSinglePixelColor);
30479:     else
30479:       context.SetSource(mOptSurface);
30479:     context.Paint();
30479: 
30479:     mOptSurface = nsnull;
30479: #ifdef USE_WIN_SURFACE
30479:     mWinSurface = nsnull;
30479: #endif
30479: #ifdef XP_MACOSX
30479:     mQuartzSurface = nsnull;
30479: #endif
30479:   }
    1: 
38826:   // We might write to the bits in this image surface, so we need to make the
38826:   // surface ready for that.
38826:   if (mImageSurface)
38826:     mImageSurface->Flush();
38826: 
41339: #ifdef USE_WIN_SURFACE
41339:   if (mWinSurface)
41339:     mWinSurface->Flush();
41339: #endif
41339: 
    1:   return NS_OK;
    1: }
    1: 
30479: nsresult imgFrame::UnlockImageData()
    1: {
30479:   if (mPalettedImageData)
35020:     return NS_ERROR_NOT_AVAILABLE;
    1: 
38698:   NS_ABORT_IF_FALSE(mLocked, "Unlocking an unlocked image!");
38698:   if (!mLocked) {
38698:     return NS_ERROR_FAILURE;
38698:   }
38698: 
38698:   mLocked = PR_FALSE;
38698: 
38826:   // Assume we've been written to.
38826:   if (mImageSurface)
38826:     mImageSurface->MarkDirty();
38826: 
41339: #ifdef USE_WIN_SURFACE
41339:   if (mWinSurface)
41339:     mWinSurface->MarkDirty();
41339: #endif
41339: 
30479: #ifdef XP_MACOSX
38826:   // The quartz image surface (ab)uses the flush method to get the
38826:   // cairo_image_surface data into a CGImage, so we have to call Flush() here.
30479:   if (mQuartzSurface)
30479:     mQuartzSurface->Flush();
30479: #endif
 7671:   return NS_OK;
    1: }
    1: 
30479: PRInt32 imgFrame::GetTimeout() const
    1: {
    1:   // Ensure a minimal time between updates so we don't throttle the UI thread.
    1:   // consider 0 == unspecified and make it fast but not too fast.  See bug
    1:   // 125137, bug 139677, and bug 207059.  The behavior of recent IE and Opera
    1:   // versions seems to be:
    1:   // IE 6/Win:
    1:   //   10 - 50ms go 100ms
    1:   //   >50ms go correct speed
    1:   // Opera 7 final/Win:
    1:   //   10ms goes 100ms
    1:   //   >10ms go correct speed
    1:   // It seems that there are broken tools out there that set a 0ms or 10ms
    1:   // timeout when they really want a "default" one.  So munge values in that
    1:   // range.
    1:   if (mTimeout >= 0 && mTimeout <= 10)
30479:     return 100;
    1:   else
30479:     return mTimeout;
    1: }
    1: 
30479: void imgFrame::SetTimeout(PRInt32 aTimeout)
    1: {
    1:   mTimeout = aTimeout;
    1: }
    1: 
30479: PRInt32 imgFrame::GetFrameDisposalMethod() const
    1: {
30479:   return mDisposalMethod;
    1: }
    1: 
30479: void imgFrame::SetFrameDisposalMethod(PRInt32 aFrameDisposalMethod)
 7108: {
30479:   mDisposalMethod = aFrameDisposalMethod;
 7108: }
 7108: 
30479: PRInt32 imgFrame::GetBlendMethod() const
    1: {
30479:   return mBlendMethod;
30479: }
    1: 
30479: void imgFrame::SetBlendMethod(PRInt32 aBlendMethod)
30479: {
30479:   mBlendMethod = (PRInt8)aBlendMethod;
30479: }
    1: 
30479: PRBool imgFrame::ImageComplete() const
30479: {
68638:   return mDecoded.IsEqualInterior(nsIntRect(mOffset, mSize));
30479: }
    1: 
30479: // A hint from the image decoders that this image has no alpha, even
30479: // though we created is ARGB32.  This changes our format to RGB24,
30479: // which in turn will cause us to Optimize() to RGB24.  Has no effect
30479: // after Optimize() is called, though in all cases it will be just a
30479: // performance win -- the pixels are still correct and have the A byte
30479: // set to 0xff.
30479: void imgFrame::SetHasNoAlpha()
30479: {
30479:   if (mFormat == gfxASurface::ImageFormatARGB32) {
30479:       mFormat = gfxASurface::ImageFormatRGB24;
30479:       mFormatChanged = PR_TRUE;
    1:   }
30479: }
34809: 
34809: PRBool imgFrame::GetCompositingFailed() const
34809: {
34809:   return mCompositingFailed;
34809: }
34809: 
34809: void imgFrame::SetCompositingFailed(PRBool val)
34809: {
34809:   mCompositingFailed = val;
34809: }
39344: 
42553: PRUint32 imgFrame::EstimateMemoryUsed() const
42553: {
42553:   PRUint32 size = 0;
42553: 
42553:   if (mSinglePixel) {
42553:     size += sizeof(gfxRGBA);
42553:   }
42553: 
42553:   if (mPalettedImageData) {
42553:     size += GetImageDataLength() + PaletteDataLength();
42553:   }
42553: 
42553: #ifdef USE_WIN_SURFACE
42553:   if (mWinSurface) {
42553:     size += mWinSurface->KnownMemoryUsed();
42553:   } else
42553: #endif
42553: #ifdef XP_MACOSX
42553:   if (mQuartzSurface) {
42553:     size += mSize.width * mSize.height * 4;
42553:   } else
42553: #endif
42553:   if (mImageSurface) {
42553:     size += mImageSurface->KnownMemoryUsed();
42553:   }
42553: 
42553:   if (mOptSurface) {
42553:     size += mOptSurface->KnownMemoryUsed();
42553:   }
42553: 
42553:   // fall back to pessimistic/approximate size
42553:   if (size == 0) {
42553:     size = mSize.width * mSize.height * 4;
42553:   }
42553: 
42553:   return size;
42553: }
