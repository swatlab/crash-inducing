   1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
   1:  * ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is Mozilla Foundation code.
   1:  *
   1:  * The Initial Developer of the Original Code is Mozilla Foundation.
   1:  * Portions created by the Initial Developer are Copyright (C) 2006
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Stuart Parmenter <stuart@mozilla.com>
   1:  *   Vladimir Vukicevic <vladimir@pobox.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
   1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "gfxASurface.h"
   1: 
   1: #include "gfxImageSurface.h"
   1: 
   1: #include "cairo.h"
   1: 
   1: #ifdef CAIRO_HAS_WIN32_SURFACE
   1: #include "gfxWindowsSurface.h"
   1: #endif
   1: 
   1: #ifdef CAIRO_HAS_XLIB_SURFACE
   1: #include "gfxXlibSurface.h"
   1: #endif
   1: 
 314: #ifdef CAIRO_HAS_QUARTZ_SURFACE
   1: #include "gfxQuartzSurface.h"
   1: #endif
   1: 
   1: #include <stdio.h>
   1: 
   1: static cairo_user_data_key_t gfxasurface_pointer_key;
   1: 
   1: // Surfaces use refcounting that's tied to the cairo surface refcnt, to avoid
   1: // refcount mismatch issues.
   1: nsrefcnt
   1: gfxASurface::AddRef(void)
   1: {
   1:     NS_PRECONDITION(mSurface != nsnull, "gfxASurface::AddRef without mSurface");
   1: 
1349:     if (mSurfaceValid) {
1349:         if (mFloatingRefs) {
1349:             // eat a floating ref
1349:             mFloatingRefs--;
   1:         } else {
   1:             cairo_surface_reference(mSurface);
   1:         }
   1: 
   1:         return (nsrefcnt) cairo_surface_get_reference_count(mSurface);
1349:     } else {
1349:         // the surface isn't valid, but we still need to refcount
1349:         // the gfxASurface
1349:         return ++mFloatingRefs;
1349:     }
   1: }
   1: 
   1: nsrefcnt
   1: gfxASurface::Release(void)
   1: {
   1:     NS_PRECONDITION(mSurface != nsnull, "gfxASurface::Release without mSurface");
1349: 
1349:     if (mSurfaceValid) {
1349:         NS_ASSERTION(mFloatingRefs == 0, "gfxASurface::Release with floating refs still hanging around!");
1349: 
   1:         // Note that there is a destructor set on user data for mSurface,
   1:         // which will delete this gfxASurface wrapper when the surface's refcount goes
   1:         // out of scope.
   1:         nsrefcnt refcnt = (nsrefcnt) cairo_surface_get_reference_count(mSurface);
   1:         cairo_surface_destroy(mSurface);
   1: 
   1:         // |this| may not be valid any more, don't use it!
   1: 
   1:         return --refcnt;
1349:     } else {
1349:         if (--mFloatingRefs == 0) {
1349:             delete this;
1349:             return 0;
1349:         }
1349: 
1349:         return mFloatingRefs;
1349:     }
   1: }
   1: 
   1: void
   1: gfxASurface::SurfaceDestroyFunc(void *data) {
   1:     gfxASurface *surf = (gfxASurface*) data;
   1:     // fprintf (stderr, "Deleting wrapper for %p (wrapper: %p)\n", surf->mSurface, data);
   1:     delete surf;
   1: }
   1: 
   1: gfxASurface*
   1: gfxASurface::GetSurfaceWrapper(cairo_surface_t *csurf)
   1: {
   1:     return (gfxASurface*) cairo_surface_get_user_data(csurf, &gfxasurface_pointer_key);
   1: }
   1: 
   1: void
   1: gfxASurface::SetSurfaceWrapper(cairo_surface_t *csurf, gfxASurface *asurf)
   1: {
   1:     cairo_surface_set_user_data(csurf, &gfxasurface_pointer_key, asurf, SurfaceDestroyFunc);
   1: }
   1: 
   1: already_AddRefed<gfxASurface>
   1: gfxASurface::Wrap (cairo_surface_t *csurf)
   1: {
   1:     gfxASurface *result;
   1: 
   1:     /* Do we already have a wrapper for this surface? */
   1:     result = GetSurfaceWrapper(csurf);
   1:     if (result) {
   1:         // fprintf(stderr, "Existing wrapper for %p -> %p\n", csurf, result);
   1:         NS_ADDREF(result);
   1:         return result;
   1:     }
   1: 
   1:     /* No wrapper; figure out the surface type and create it */
   1:     cairo_surface_type_t stype = cairo_surface_get_type(csurf);
   1: 
   1:     if (stype == CAIRO_SURFACE_TYPE_IMAGE) {
   1:         result = new gfxImageSurface(csurf);
   1:     }
   1: #ifdef CAIRO_HAS_WIN32_SURFACE
   1:     else if (stype == CAIRO_SURFACE_TYPE_WIN32) {
   1:         result = new gfxWindowsSurface(csurf);
   1:     }
   1: #endif
   1: #ifdef CAIRO_HAS_XLIB_SURFACE
   1:     else if (stype == CAIRO_SURFACE_TYPE_XLIB) {
   1:         result = new gfxXlibSurface(csurf);
   1:     }
   1: #endif
 314: #ifdef CAIRO_HAS_QUARTZ_SURFACE
 314:     else if (stype == CAIRO_SURFACE_TYPE_QUARTZ) {
   1:         result = new gfxQuartzSurface(csurf);
   1:     }
   1: #endif
   1:     else {
   1:         result = new gfxUnknownSurface(csurf);
   1:     }
   1: 
   1:     // fprintf(stderr, "New wrapper for %p -> %p\n", csurf, result);
   1: 
   1:     NS_ADDREF(result);
   1:     return result;
   1: }
   1: 
   1: void
   1: gfxASurface::Init(cairo_surface_t* surface, PRBool existingSurface)
   1: {
1349:     if (cairo_surface_status(surface)) {
1349:         // the surface has an error on it
1349:         mSurfaceValid = PR_FALSE;
1349:         cairo_surface_destroy(surface);
1349:         return;
1349:     }
1349: 
   1:     SetSurfaceWrapper(surface, this);
   1: 
   1:     mSurface = surface;
1349:     mSurfaceValid = PR_TRUE;
   1: 
   1:     if (existingSurface) {
1349:         mFloatingRefs = 0;
   1:     } else {
1349:         mFloatingRefs = 1;
   1:     }
   1: }
   1: 
   1: gfxASurface::gfxSurfaceType
   1: gfxASurface::GetType() const
   1: {
   1:     return (gfxSurfaceType)cairo_surface_get_type(mSurface);
   1: }
   1: 
   1: gfxASurface::gfxContentType
   1: gfxASurface::GetContentType() const
   1: {
   1:     return (gfxContentType)cairo_surface_get_content(mSurface);
   1: }
   1: 
   1: void
   1: gfxASurface::SetDeviceOffset(const gfxPoint& offset)
   1: {
   1:     cairo_surface_set_device_offset(mSurface,
   1:                                     offset.x, offset.y);
   1: }
   1: 
   1: gfxPoint
   1: gfxASurface::GetDeviceOffset() const
   1: {
   1:     gfxPoint pt;
   1:     cairo_surface_get_device_offset(mSurface, &pt.x, &pt.y);
   1:     return pt;
   1: }
   1: 
   1: void
   1: gfxASurface::Flush()
   1: {
   1:     cairo_surface_flush(mSurface);
   1: }
   1: 
   1: void
   1: gfxASurface::MarkDirty()
   1: {
   1:     cairo_surface_mark_dirty(mSurface);
   1: }
   1: 
   1: void
   1: gfxASurface::MarkDirty(const gfxRect& r)
   1: {
   1:     cairo_surface_mark_dirty_rectangle(mSurface,
   1:                                        (int) r.pos.x, (int) r.pos.y,
   1:                                        (int) r.size.width, (int) r.size.height);
   1: }
   1: 
   1: void
   1: gfxASurface::SetData(const cairo_user_data_key_t *key,
   1:                      void *user_data,
   1:                      thebes_destroy_func_t destroy)
   1: {
   1:     cairo_surface_set_user_data(mSurface, key, user_data, destroy);
   1: }
   1: 
   1: void *
   1: gfxASurface::GetData(const cairo_user_data_key_t *key)
   1: {
   1:     return cairo_surface_get_user_data(mSurface, key);
   1: }
   1: 
   1: void
   1: gfxASurface::Finish()
   1: {
   1:     cairo_surface_finish(mSurface);
   1: }
1349: 
1349: int
1349: gfxASurface::Status()
1349: {
1349:     if (!mSurfaceValid)
1349:         return -1;
1349: 
1349:     return cairo_surface_status(mSurface);
1349: }
1349: 
1349: /* static */
1349: PRBool
1349: gfxASurface::CheckSurfaceSize(const gfxIntSize& sz, PRInt32 limit)
1349: {
1349:     if (sz.width <= 0 || sz.height <= 0)
1349:         return PR_FALSE;
1349: 
1349:     // check to make sure we don't overflow a 32-bit
1349:     PRInt32 tmp = sz.width * sz.height;
1349:     if (tmp / sz.height != sz.width)
1349:         return PR_FALSE;
1349: 
1349:     // always assume 4-byte stride
1349:     tmp = tmp * 4;
1349:     if (tmp / 4 != sz.width * sz.height)
1349:         return PR_FALSE;
1349: 
1349:     // reject images with sides bigger than limit
1349:     if (limit &&
1349:         (sz.width > limit || sz.height > limit))
1349:         return PR_FALSE;
1349: 
1349:     return PR_TRUE;
1349: }
