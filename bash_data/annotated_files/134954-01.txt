     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
     1: #ifndef TimerThread_h___
     1: #define TimerThread_h___
     1: 
     1: #include "nsIObserver.h"
     1: #include "nsIRunnable.h"
     1: #include "nsIThread.h"
     1: 
     1: #include "nsTimerImpl.h"
     1: 
 26914: #include "nsTArray.h"
     1: 
101787: #include "mozilla/Attributes.h"
 69145: #include "mozilla/Monitor.h"
 48031: #include "mozilla/TimeStamp.h"
     1: 
101787: class TimerThread MOZ_FINAL : public nsIRunnable,
     1:                               public nsIObserver
     1: {
     1: public:
 69145:   typedef mozilla::Monitor Monitor;
 48031:   typedef mozilla::TimeStamp TimeStamp;
 48031:   typedef mozilla::TimeDuration TimeDuration;
 48031: 
     1:   TimerThread();
     1:   NS_HIDDEN_(nsresult) InitLocks();
     1: 
     1:   NS_DECL_ISUPPORTS
     1:   NS_DECL_NSIRUNNABLE
     1:   NS_DECL_NSIOBSERVER
     1:   
     1:   NS_HIDDEN_(nsresult) Init();
     1:   NS_HIDDEN_(nsresult) Shutdown();
     1: 
     1:   nsresult AddTimer(nsTimerImpl *aTimer);
     1:   nsresult TimerDelayChanged(nsTimerImpl *aTimer);
     1:   nsresult RemoveTimer(nsTimerImpl *aTimer);
     1: 
134323: #define FILTER_DURATION         1e3     /* one second */
134323: #define FILTER_FEEDBACK_MAX     100     /* 1/10th of a second */
134323: 
134323:   void UpdateFilter(uint32_t aDelay, TimeStamp aTimeout,
134323:                     TimeStamp aNow);
134323: 
     1:   void DoBeforeSleep();
     1:   void DoAfterSleep();
     1: 
     1: private:
     1:   ~TimerThread();
     1: 
108991:   int32_t mInitInProgress;
 79445:   bool    mInitialized;
     1: 
     1:   // These two internal helper methods must be called while mLock is held.
     1:   // AddTimerInternal returns the position where the timer was added in the
     1:   // list, or -1 if it failed.
108991:   int32_t AddTimerInternal(nsTimerImpl *aTimer);
 79445:   bool    RemoveTimerInternal(nsTimerImpl *aTimer);
 13077:   void    ReleaseTimerInternal(nsTimerImpl *aTimer);
     1: 
     1:   nsCOMPtr<nsIThread> mThread;
 69145:   Monitor mMonitor;
     1: 
 79445:   bool mShutdown;
 79445:   bool mWaiting;
 79445:   bool mSleeping;
     1:   
 26914:   nsTArray<nsTimerImpl*> mTimers;
134323: 
134323: #define DELAY_LINE_LENGTH_LOG2  5
134323: #define DELAY_LINE_LENGTH_MASK  ((1u << DELAY_LINE_LENGTH_LOG2) - 1)
134323: #define DELAY_LINE_LENGTH       (1u << DELAY_LINE_LENGTH_LOG2)
134323: 
134323:   int32_t  mDelayLine[DELAY_LINE_LENGTH]; // milliseconds
134323:   uint32_t mDelayLineCounter;
134323:   uint32_t mMinTimerPeriod;     // milliseconds
134323:   TimeDuration mTimeoutAdjustment;
     1: };
     1: 
132408: struct TimerAdditionComparator {
132408:   TimerAdditionComparator(const mozilla::TimeStamp &aNow,
134323:                           const mozilla::TimeDuration &aTimeoutAdjustment,
132408:                           nsTimerImpl *aTimerToInsert) :
134323:     now(aNow),
134323:     timeoutAdjustment(aTimeoutAdjustment)
132408: #ifdef DEBUG
132408:     , timerToInsert(aTimerToInsert)
132408: #endif
132408:   {}
132408: 
132408:   PRBool LessThan(nsTimerImpl *fromArray, nsTimerImpl *newTimer) const {
132408:     NS_ABORT_IF_FALSE(newTimer == timerToInsert, "Unexpected timer ordering");
132408: 
132408:     // Skip any overdue timers.
134323: 
134323:     // XXXbz why?  Given our definition of overdue in terms of
134323:     // mTimeoutAdjustment, aTimer might be overdue already!  Why not
134323:     // just fire timers in order?
134323:     return now >= fromArray->mTimeout + timeoutAdjustment ||
132408:            fromArray->mTimeout <= newTimer->mTimeout;
132408:   }
132408: 
132408:   PRBool Equals(nsTimerImpl* fromArray, nsTimerImpl* newTimer) const {
132408:     return PR_FALSE;
132408:   }
132408: 
132408: private:
132408:   const mozilla::TimeStamp &now;
134323:   const mozilla::TimeDuration &timeoutAdjustment;
132408: #ifdef DEBUG
132408:   const nsTimerImpl * const timerToInsert;
132408: #endif
132408: };
132408: 
     1: #endif /* TimerThread_h___ */
