100178: /* This Source Code Form is subject to the terms of the Mozilla Public
100178:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
100178:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
100178: 
100178: #ifndef MEDIAENGINEDEFAULT_H_
100178: #define MEDIAENGINEDEFAULT_H_
100178: 
100178: #include "prmem.h"
100178: #include "nsITimer.h"
100178: 
100178: #include "nsCOMPtr.h"
100178: #include "nsDOMMediaStream.h"
100178: #include "nsComponentManagerUtils.h"
100178: 
100178: #include "VideoUtils.h"
100178: #include "MediaEngine.h"
100178: #include "VideoSegment.h"
100178: #include "AudioSegment.h"
100178: #include "StreamBuffer.h"
100178: #include "MediaStreamGraph.h"
100178: 
100178: namespace mozilla {
100178: 
106914: namespace layers {
106914: class ImageContainer;
106914: class PlanarYCbCrImage;
106914: }
106914: 
100178: /**
100178:  * The default implementation of the MediaEngine interface.
100178:  */
100178: class MediaEngineDefaultVideoSource : public nsITimerCallback,
100178:                                       public MediaEngineVideoSource
100178: {
100178: public:
106914:   MediaEngineDefaultVideoSource();
106914:   ~MediaEngineDefaultVideoSource();
100178: 
100178:   virtual void GetName(nsAString&);
100178:   virtual void GetUUID(nsAString&);
100178: 
116149:   virtual const MediaEngineVideoOptions *GetOptions();
104315:   virtual nsresult Allocate();
100178:   virtual nsresult Deallocate();
100178:   virtual nsresult Start(SourceMediaStream*, TrackID);
100178:   virtual nsresult Stop();
108991:   virtual nsresult Snapshot(uint32_t aDuration, nsIDOMFile** aFile);
119168:   virtual void NotifyPull(MediaStreamGraph* aGraph, StreamTime aDesiredTime);
100178: 
100178:   NS_DECL_ISUPPORTS
100178:   NS_DECL_NSITIMERCALLBACK
100178: 
116149:   // Need something better...
116149:   static const int DEFAULT_WIDTH=640;
116149:   static const int DEFAULT_HEIGHT=480;
116149:   static const int DEFAULT_FPS=30;
116149: 
100178: protected:
100178:   TrackID mTrackID;
100178:   nsCOMPtr<nsITimer> mTimer;
100178:   nsRefPtr<layers::ImageContainer> mImageContainer;
100178: 
100178:   SourceMediaStream* mSource;
100178:   layers::PlanarYCbCrImage* mImage;
116149:   static const MediaEngineVideoOptions mOpts;
100178: };
100178: 
100178: class MediaEngineDefaultAudioSource : public nsITimerCallback,
100178:                                       public MediaEngineAudioSource
100178: {
100178: public:
119135:   MediaEngineDefaultAudioSource();
119135:   ~MediaEngineDefaultAudioSource();
100178: 
100178:   virtual void GetName(nsAString&);
100178:   virtual void GetUUID(nsAString&);
100178: 
104315:   virtual nsresult Allocate();
100178:   virtual nsresult Deallocate();
100178:   virtual nsresult Start(SourceMediaStream*, TrackID);
100178:   virtual nsresult Stop();
108991:   virtual nsresult Snapshot(uint32_t aDuration, nsIDOMFile** aFile);
119168:   virtual void NotifyPull(MediaStreamGraph* aGraph, StreamTime aDesiredTime);
100178: 
100178:   NS_DECL_ISUPPORTS
100178:   NS_DECL_NSITIMERCALLBACK
100178: 
100178: protected:
100178:   TrackID mTrackID;
100178:   nsCOMPtr<nsITimer> mTimer;
100178: 
100178:   SourceMediaStream* mSource;
100178: };
100178: 
100178: class MediaEngineDefault : public MediaEngine
100178: {
100178: public:
119499:   MediaEngineDefault()
119499:   : mMutex("mozilla::MediaEngineDefault")
119499:   {}
100178:   ~MediaEngineDefault() {}
100178: 
100178:   virtual void EnumerateVideoDevices(nsTArray<nsRefPtr<MediaEngineVideoSource> >*);
100178:   virtual void EnumerateAudioDevices(nsTArray<nsRefPtr<MediaEngineAudioSource> >*);
100178: 
100178: private:
119499:   Mutex mMutex;
119499:   // protected with mMutex:
119499: 
119135:   nsTArray<nsRefPtr<MediaEngineVideoSource> > mVSources;
119135:   nsTArray<nsRefPtr<MediaEngineAudioSource> > mASources;
100178: };
100178: 
100178: }
100178: 
100178: #endif /* NSMEDIAENGINEDEFAULT_H_ */
