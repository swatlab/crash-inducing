    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Joe Hewitt <hewitt@netscape.com> (Original Author)
    1:  *   Dean Tessman <dean_tessman@hotmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef __nsFormFillController__
    1: #define __nsFormFillController__
    1: 
    1: #include "nsIFormFillController.h"
    1: #include "nsIAutoCompleteInput.h"
    1: #include "nsIAutoCompleteSearch.h"
    1: #include "nsIAutoCompleteController.h"
    1: #include "nsIAutoCompletePopup.h"
72597: #include "nsIDOMEventListener.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsISupportsArray.h"
 1511: #include "nsDataHashtable.h"
    1: #include "nsIDocShell.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsIDOMHTMLInputElement.h"
 1511: #include "nsILoginManager.h"
52365: #include "nsIMutationObserver.h"
    1: 
75043: // X.h defines KeyPress
75043: #ifdef KeyPress
75043: #undef KeyPress
75043: #endif
75043: 
    1: class nsFormHistory;
90586: class nsINode;
    1: 
    1: class nsFormFillController : public nsIFormFillController,
    1:                              public nsIAutoCompleteInput,
    1:                              public nsIAutoCompleteSearch,
72597:                              public nsIDOMEventListener,
52365:                              public nsIMutationObserver
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSIFORMFILLCONTROLLER
    1:   NS_DECL_NSIAUTOCOMPLETESEARCH
    1:   NS_DECL_NSIAUTOCOMPLETEINPUT
    1:   NS_DECL_NSIDOMEVENTLISTENER
52365:   NS_DECL_NSIMUTATIONOBSERVER
    1: 
72597:   nsresult Focus(nsIDOMEvent* aEvent);
72597:   nsresult KeyPress(nsIDOMEvent* aKeyEvent);
72597:   nsresult MouseDown(nsIDOMEvent* aMouseEvent);
    1: 
    1:   nsFormFillController();
    1:   virtual ~nsFormFillController();
    1: 
    1: protected:
    1:   void AddWindowListeners(nsIDOMWindow *aWindow);
    1:   void RemoveWindowListeners(nsIDOMWindow *aWindow);
    1: 
  345:   void AddKeyListener(nsIDOMHTMLInputElement *aInput);
  345:   void RemoveKeyListener();
  345: 
    1:   void StartControllingInput(nsIDOMHTMLInputElement *aInput);
    1:   void StopControllingInput();
    1: 
52365:   void RevalidateDataList();
79445:   bool RowMatch(nsFormHistory *aHistory, PRUint32 aIndex, const nsAString &aInputName, const nsAString &aInputValue);
    1: 
    1:   inline nsIDocShell *GetDocShellForInput(nsIDOMHTMLInputElement *aInput);
    1:   inline nsIDOMWindow *GetWindowForDocShell(nsIDocShell *aDocShell);
    1:   inline PRInt32 GetIndexOfDocShell(nsIDocShell *aDocShell);
    1: 
91090:   void MaybeRemoveMutationObserver(nsINode* aNode);
91090: 
90586:   static PLDHashOperator RemoveForDocumentEnumerator(const nsINode* aKey,
90586:                                                      bool& aEntry,
 1511:                                                      void* aUserData);
79445:   bool IsEventTrusted(nsIDOMEvent *aEvent);
    1:   // members //////////////////////////////////////////
    1: 
    1:   nsCOMPtr<nsIAutoCompleteController> mController;
 1511:   nsCOMPtr<nsILoginManager> mLoginManager;
90586:   nsIDOMHTMLInputElement* mFocusedInput;
90586:   nsINode* mFocusedInputNode;
90586:   nsINode* mListNode;
    1:   nsCOMPtr<nsIAutoCompletePopup> mFocusedPopup;
    1: 
    1:   nsCOMPtr<nsISupportsArray> mDocShells;
    1:   nsCOMPtr<nsISupportsArray> mPopups;
    1: 
52365:   //these are used to dynamically update the autocomplete
52365:   nsCOMPtr<nsIAutoCompleteResult> mLastSearchResult;
52365:   nsCOMPtr<nsIAutoCompleteObserver> mLastListener;
52365:   nsString mLastSearchString;
52365: 
90586:   nsDataHashtable<nsPtrHashKey<const nsINode>, bool> mPwmgrInputs;
 1511: 
    1:   PRUint32 mTimeout;
    1:   PRUint32 mMinResultsForPopup;
    1:   PRUint32 mMaxRows;
79445:   bool mDisableAutoComplete;
79445:   bool mCompleteDefaultIndex;
79445:   bool mCompleteSelectedIndex;
79445:   bool mForceComplete;
79445:   bool mSuppressOnInput;
    1: };
    1: 
    1: #endif // __nsFormFillController__
