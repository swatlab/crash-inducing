    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsIUnicodeDecoder_h___
    1: #define nsIUnicodeDecoder_h___
    1: 
    1: #include "nscore.h"
    1: #include "nsISupports.h"
    1: 
    1: // Interface ID for our Unicode Decoder interface
25035: // {25359602-FC70-4d13-A9AB-8086D3827C0D}
    1: //NS_DECLARE_ID(kIUnicodeDecoderIID,
25035: //  0x25359602, 0xfc70, 0x4d13, 0xa9, 0xab, 0x80, 0x86, 0xd3, 0x82, 0x7c, 0xd);
    1: 
    1: #define NS_IUNICODEDECODER_IID	\
25035: 	{ 0x25359602, 0xfc70, 0x4d13,	\
25035: 		{ 0xa9, 0xab, 0x80, 0x86, 0xd3, 0x82, 0x7c, 0xd }}
    1: 
    1: // XXX deprecated
    1: /*---------- BEGIN DEPRECATED */ 
    1: #define NS_EXACT_LENGTH \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 11)
    1: 
    1: #define NS_PARTIAL_MORE_INPUT \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 12)
    1: 
    1: #define NS_PARTIAL_MORE_OUTPUT \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 13)
    1: 
    1: #define NS_ERROR_ILLEGAL_INPUT \
    1:   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_UCONV, 14)
    1: /*---------- END DEPRECATED */ 
    1: 
    1: // XXX make us hex! (same digits though)
    1: #define NS_OK_UDEC_EXACTLENGTH      \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 11)
    1: 
    1: #define NS_OK_UDEC_MOREINPUT        \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 12)
    1: 
    1: #define NS_OK_UDEC_MOREOUTPUT       \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 13)
    1: 
    1: #define NS_ERROR_UDEC_ILLEGALINPUT  \
    1:   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_UCONV, 14)
    1: 
    1: #define NS_OK_UDEC_NOBOMFOUND       \
    1:   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_UCONV, 14)
    1: 
    1: 
    1: #define NS_UNICODEDECODER_CONTRACTID_BASE "@mozilla.org/intl/unicode/decoder;1?charset="
    1: 
    1: /**
    1:  * Interface for a Converter from a Charset into Unicode.
    1:  *
    1:  * @created         23/Nov/1998
    1:  * @author  Catalin Rotaru [CATA]
    1:  */
    1: class nsIUnicodeDecoder : public nsISupports
    1: {
    1: public:
    1:   NS_DECLARE_STATIC_IID_ACCESSOR(NS_IUNICODEDECODER_IID)
    1: 
    1:   enum {
    1:     kOnError_Recover,       // on an error, recover and continue
    1:     kOnError_Signal         // on an error, stop and signal
    1:   };
    1: 
    1:   /**
    1:    * Converts the data from one Charset to Unicode.
    1:    *
    1:    * About the byte ordering:
    1:    * - For input, if the converter cares (that depends of the charset, for 
    1:    * example a singlebyte will ignore the byte ordering) it should assume 
    1:    * network order. If necessary and requested, we can add a method 
    1:    * SetInputByteOrder() so that the reverse order can be used, too. That 
    1:    * method would have as default the assumed network order.
    1:    * - The output stream is Unicode, having the byte order which is internal
    1:    * for the machine on which the converter is running on.
    1:    *
    1:    * Unless there is not enough output space, this method must consume all the
    1:    * available input data! The eventual incomplete final character data will be
    1:    * stored internally in the converter and used when the method is called 
    1:    * again for continuing the conversion. This way, the caller will not have to
    1:    * worry about managing incomplete input data by mergeing it with the next 
    1:    * buffer.
    1:    *
    1:    * Error conditions: 
    1:    * If the read value does not belong to this character set, one should 
    1:    * replace it with the Unicode special 0xFFFD. When an actual input error is 
    1:    * encountered, like a format error, the converter stop and return error.
41395:    * However, we should keep in mind that we need to be lax in decoding. When
41395:    * a decoding error is returned to the caller, it is the caller's
48213:    * responsibility to advance over the bad byte (unless aSrcLength is -1 in
48213:    * which case the caller should call the decoder with 0 offset again) and
48213:    * reset the decoder before trying to call the decoder again.
    1:    *
    1:    * Converter required behavior:
    1:    * In this order: when output space is full - return right away. When input
    1:    * data is wrong, return input pointer right after the wrong byte. When 
    1:    * partial input, it will be consumed and cached. All the time input pointer
    1:    * will show how much was actually consumed and how much was actually 
    1:    * written.
    1:    *
    1:    * @param aSrc        [IN] the source data buffer
    1:    * @param aSrcLength  [IN/OUT] the length of source data buffer; after
48213:    *                    conversion will contain the number of bytes read or
48213:    *                    -1 on error to indicate that the caller should re-push
48213:    *                    the same buffer after resetting the decoder
    1:    * @param aDest       [OUT] the destination data buffer
    1:    * @param aDestLength [IN/OUT] the length of the destination data buffer;
    1:    *                    after conversion will contain the number of Unicode
    1:    *                    characters written
    1:    * @return            NS_PARTIAL_MORE_INPUT if only a partial conversion was
    1:    *                    done; more input is needed to continue
    1:    *                    NS_PARTIAL_MORE_OUTPUT if only  a partial conversion
    1:    *                    was done; more output space is needed to continue
    1:    *                    NS_ERROR_ILLEGAL_INPUT if an illegal input sequence
41395:    *                    was encountered and the behavior was set to "signal";
41395:    *                    the caller must skip over one byte, reset the decoder
41395:    *                    and retry.
    1:    */
    1:   NS_IMETHOD Convert(const char * aSrc, PRInt32 * aSrcLength, 
    1:       PRUnichar * aDest, PRInt32 * aDestLength) = 0;
    1: 
    1:   /**
    1:    * Returns a quick estimation of the size of the buffer needed to hold the
    1:    * converted data. Remember: this estimation is >= with the actual size of 
    1:    * the buffer needed. It will be computed for the "worst case"
    1:    *
    1:    * @param aSrc        [IN] the source data buffer
    1:    * @param aSrcLength  [IN] the length of source data buffer
    1:    * @param aDestLength [OUT] the needed size of the destination buffer
    1:    * @return            NS_EXACT_LENGTH if an exact length was computed
    1:    *                    NS_OK is all we have is an approximation
    1:    */
    1:   NS_IMETHOD GetMaxLength(const char * aSrc, PRInt32 aSrcLength, 
    1:       PRInt32 * aDestLength) = 0;
    1: 
    1:   /**
    1:    * Resets the charset converter so it may be recycled for a completely 
    1:    * different and urelated buffer of data.
    1:    */
    1:   NS_IMETHOD Reset() = 0;
25035: 
25035:   /**
25035:    * Specify what to do when a character cannot be mapped into unicode
25035:    *
25035:    * @param aBehavior [IN] the desired behavior
25035:    * @see kOnError_Recover
25035:    * @see kOnError_Signal
25035:    */
25035:   virtual void SetInputErrorBehavior(PRInt32 aBehavior) = 0;
25035: 
25035:   /**
25035:    * return the UNICODE character for unmapped character
25035:    */
25035:   virtual PRUnichar GetCharacterForUnMapped() = 0;
    1: };
    1: 
    1: NS_DEFINE_STATIC_IID_ACCESSOR(nsIUnicodeDecoder, NS_IUNICODEDECODER_IID)
    1: 
    1: #endif /* nsIUnicodeDecoder_h___ */
