    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   John Gaunt (jgaunt@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef __nsAccessibilityService_h__
    1: #define __nsAccessibilityService_h__
    1: 
    1: #include "nsIAccessibilityService.h"
37480: 
41384: #include "a11yGeneric.h"
43310: #include "nsAccDocManager.h"
37480: 
    1: #include "nsIObserver.h"
    1: 
43310: class nsAccessibilityService : public nsAccDocManager,
43310:                                public nsIAccessibilityService,
43310:                                public nsIObserver
 5188: {
 5188: public:
 5188:   virtual ~nsAccessibilityService();
 5188: 
43310:   NS_DECL_ISUPPORTS_INHERITED
 5188:   NS_DECL_NSIACCESSIBLERETRIEVAL
 5188:   NS_DECL_NSIOBSERVER
 5188: 
41336:   // nsIAccessibilityService
46338:   virtual nsAccessible* GetAccessibleInShell(nsINode* aNode,
42313:                                              nsIPresShell* aPresShell);
54519:   virtual nsAccessible* GetRootDocumentAccessible(nsIPresShell* aPresShell,
54519:                                                   PRBool aCanCreate);
42313: 
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLBRAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTML4ButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLCaptionAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLCheckboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLComboboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLGroupboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLHRAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLImageAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLLabelAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLLIAccessible(nsIContent* aContent, nsIPresShell* aPresShell,
46338:                            const nsAString& aBulletText);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLListboxAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLMediaAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLObjectFrameAccessible(nsObjectFrame* aFrame, nsIContent* aContent,
46338:                                     nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLRadioButtonAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTableAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTableCellAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTextAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHTMLTextFieldAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateHyperTextAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
46338:   virtual already_AddRefed<nsAccessible>
46338:     CreateOuterDocAccessible(nsIContent* aContent, nsIPresShell* aPresShell);
41336: 
46207:   virtual nsAccessible* AddNativeRootAccessible(void* aAtkAccessible);
46207:   virtual void RemoveNativeRootAccessible(nsAccessible* aRootAccessible);
41336: 
41336:   virtual nsresult InvalidateSubtreeFor(nsIPresShell *aPresShell,
41336:                                         nsIContent *aContent,
41336:                                         PRUint32 aChangeType);
41336: 
41476:   virtual void NotifyOfAnchorJumpTo(nsIContent *aTarget);
41336: 
43765:   virtual void PresShellDestroyed(nsIPresShell* aPresShell);
43765: 
54519:   virtual void FireAccessibleEvent(PRUint32 aEvent, nsAccessible* aTarget);
41336: 
41336:   // nsAccessibiltiyService
41336: 
 5188:   /**
43310:    * Return true if accessibility service has been shutdown.
30820:    */
43310:   static PRBool IsShutdown() { return gIsShutdown; }
30820: 
37808:   /**
46469:    * Return an accessible for the given DOM node from the cache or create new
46469:    * one.
37808:    *
37808:    * @param  aNode       [in] the given node
37808:    * @param  aPresShell  [in] the pres shell of the node
37808:    * @param  aWeakShell  [in] the weak shell for the pres shell
38359:    * @param  aIsHidden   [out, optional] indicates whether the node's frame is
38359:    *                       hidden
37808:    */
38359:   already_AddRefed<nsAccessible>
46469:     GetOrCreateAccessible(nsINode* aNode, nsIPresShell* aPresShell,
46469:                           nsIWeakReference* aWeakShell,
46469:                           PRBool* aIsHidden = nsnull);
37808: 
37808:   /**
42795:    * Return an accessible for the given DOM node.
42795:    */
43504:   nsAccessible* GetAccessible(nsINode* aNode);
42795: 
42795:   /**
37808:    * Return an accessible for a DOM node in the given presshell.
37808:    *
46469:    * @param aNode       [in] the given node
46469:    * @param aWeakShell  [in] the presentation shell for the given node
37808:    */
46469:   inline nsAccessible* GetAccessibleInWeakShell(nsINode* aNode,
46469:                                                 nsIWeakReference* aWeakShell)
46469:   {
46469:     return GetAccessibleByRule(aNode, aWeakShell, eGetAccForNode);
46469:   }
37808: 
38062:   /**
46469:    * Return an accessible for the given DOM node or container accessible if
46469:    * the node is not accessible.
46469:    */
46469:   inline nsAccessible* GetAccessibleOrContainer(nsINode* aNode,
46469:                                                 nsIWeakReference* aWeakShell)
46469:   {
46469:     return GetAccessibleByRule(aNode, aWeakShell, eGetAccForNodeOrContainer);
46469:   }
46469: 
46469:   /**
46469:    * Return a container accessible for the given DOM node.
46469:    */
46469:   inline nsAccessible* GetContainerAccessible(nsINode* aNode,
46469:                                               nsIWeakReference* aWeakShell)
46469:   {
46469:     return GetAccessibleByRule(aNode, aWeakShell, eGetAccForContainer);
46469:   }
46469: 
46469:   /**
46469:    * Return the first cached accessible parent of a DOM node.
42800:    *
42800:    * @param aDOMNode    [in] the DOM node to get an accessible for
42800:    */
46469:   nsAccessible* GetCachedContainerAccessible(nsINode *aNode);
42800: 
42800:   /**
 5188:    * Initialize an accessible and cache it. The method should be called for
 5188:    * every created accessible.
 5188:    *
38359:    * @param  aAccessible    [in] accessible to initialize.
38359:    * @param  aRoleMapEntry  [in] the role map entry role the ARIA role or nsnull
38359:    *                          if none
38359:    *
38359:    * @return true if the accessible was initialized, otherwise false
 5188:    */
38359:   PRBool InitAccessible(nsAccessible *aAccessible,
38359:                         nsRoleMapEntry *aRoleMapEntry);
 5188: 
43538: protected:
43538:   /**
43538:    * Return an accessible for the DOM node in the given presentation shell if
43538:    * the accessible already exists, otherwise null.
43538:    *
43538:    * @param  aNode       [in] the DOM node to get an access node for
43538:    * @param  aPresShell  [in] the presentation shell which contains layout info
43538:    *                       for the DOM node
43538:    */
43538:   nsAccessible *GetCachedAccessible(nsINode *aNode,
43538:                                     nsIWeakReference *aShell);
43538: 
43310: private:
43310:   // nsAccessibilityService creation is controlled by friend
43310:   // NS_GetAccessibilityService, keep constructors private.
43310:   nsAccessibilityService();
43310:   nsAccessibilityService(const nsAccessibilityService&);
43310:   nsAccessibilityService& operator =(const nsAccessibilityService&);
43310: 
43310: private:
43310:   /**
43310:    * Initialize accessibility service.
43310:    */
43310:   PRBool Init();
43310: 
43310:   /**
43310:    * Shutdowns accessibility service.
43310:    */
43310:   void Shutdown();
43310: 
46469:   enum EWhatAccToGet {
46469:     eGetAccForNode = 0x1,
46469:     eGetAccForContainer = 0x2,
46469:     eGetAccForNodeOrContainer = eGetAccForNode | eGetAccForContainer
46469:   };
46469: 
46469:   /**
46469:    * Return accessible or accessible container for the given node in presshell.
46469:    */
46469:   nsAccessible* GetAccessibleByRule(nsINode* aNode,
46469:                                     nsIWeakReference* aWeakShell,
46469:                                     EWhatAccToGet aWhatToGet);
46469: 
43310:   /**
40575:    * Return accessible for HTML area element associated with an image map.
46469:    *
46469:    * @param  aImageFrame       [in] image frame
46469:    * @param  aAreaNode         [in] area node
46469:    * @param  aWeakShell        [in] presshell of image frame
46469:    * @param  aImageAccessible  [out, optional] image accessible, isn't addrefed
40575:    */
46338:   nsAccessible* GetAreaAccessible(nsIFrame* aImageFrame, nsINode* aAreaNode,
46469:                                   nsIWeakReference* aWeakShell,
46469:                                   nsAccessible** aImageAccessible = nsnull);
40575: 
40575:   /**
38359:    * Create accessible for the element implementing nsIAccessibleProvider
 5188:    * interface.
 5188:    */
38359:   already_AddRefed<nsAccessible>
43504:     CreateAccessibleByType(nsIContent* aContent, nsIWeakReference* aWeakShell);
 5188: 
 5188:   /**
38359:    * Create accessible for HTML node by tag name.
38359:    */
38359:   already_AddRefed<nsAccessible>
46338:     CreateHTMLAccessibleByMarkup(nsIFrame* aFrame, nsIContent* aContent,
46338:                                  nsIWeakReference* aWeakShell);
38359: 
38359:   /**
38359:    * Create accessible if parent is a deck frame.
38359:    */
38359:   already_AddRefed<nsAccessible>
43504:     CreateAccessibleForDeckChild(nsIFrame* aFrame, nsIContent* aContent,
38359:                                  nsIWeakReference* aWeakShell);
 5188: 
31673: #ifdef MOZ_XUL
31673:   /**
31673:    * Create accessible for XUL tree element.
31673:    */
38359:   already_AddRefed<nsAccessible>
46338:     CreateAccessibleForXULTree(nsIContent* aContent, nsIWeakReference* aWeakShell);
31673: #endif
31673: 
43310:   /**
43310:    * Reference for accessibility service.
43310:    */
 5188:   static nsAccessibilityService *gAccessibilityService;
 6279: 
 6279:   /**
43310:    * Indicates whether accessibility service was shutdown.
43310:    */
43310:   static PRBool gIsShutdown;
43310: 
43310:   /**
 6279:    * Does this content node have a universal ARIA property set on it?
 6279:    * A universal ARIA property is one that can be defined on any element even if there is no role.
 6279:    *
 6279:    * @param aContent The content node to test
 6279:    * @return PR_TRUE if there is a universal ARIA property set on the node
 6279:    */
39578:   PRBool HasUniversalAriaProperty(nsIContent *aContent);
12240: 
37808:   friend nsAccessibilityService* GetAccService();
37808: 
37808:   friend nsresult NS_GetAccessibilityService(nsIAccessibilityService** aResult);
 5188: };
 5188: 
 5188: /**
37808:  * Return the accessibility service instance. (Handy global function)
37808:  */
37808: inline nsAccessibilityService*
37808: GetAccService()
37808: {
37808:   return nsAccessibilityService::gAccessibilityService;
37808: }
37808: 
37808: /**
 5188:  * Map nsIAccessibleRole constants to strings. Used by
 5188:  * nsIAccessibleRetrieval::getStringRole() method.
 5188:  */
 2064: static const char kRoleNames[][20] = {
 2064:   "nothing",             //ROLE_NOTHING
 2064:   "titlebar",            //ROLE_TITLEBAR
 2064:   "menubar",             //ROLE_MENUBAR
 2064:   "scrollbar",           //ROLE_SCROLLBAR
 2064:   "grip",                //ROLE_GRIP
 2064:   "sound",               //ROLE_SOUND
 2064:   "cursor",              //ROLE_CURSOR
 2064:   "caret",               //ROLE_CARET
 2064:   "alert",               //ROLE_ALERT
 2064:   "window",              //ROLE_WINDOW
10594:   "internal frame",      //ROLE_INTERNAL_FRAME
 2064:   "menupopup",           //ROLE_MENUPOPUP
 2064:   "menuitem",            //ROLE_MENUITEM
 2064:   "tooltip",             //ROLE_TOOLTIP
 2064:   "application",         //ROLE_APPLICATION
 2064:   "document",            //ROLE_DOCUMENT
 2064:   "pane",                //ROLE_PANE
 2064:   "chart",               //ROLE_CHART
 2064:   "dialog",              //ROLE_DIALOG
 2064:   "border",              //ROLE_BORDER
 2064:   "grouping",            //ROLE_GROUPING
 2064:   "separator",           //ROLE_SEPARATOR
 2064:   "toolbar",             //ROLE_TOOLBAR
 2064:   "statusbar",           //ROLE_STATUSBAR
 2064:   "table",               //ROLE_TABLE
 2064:   "columnheader",        //ROLE_COLUMNHEADER
 2064:   "rowheader",           //ROLE_ROWHEADER
 2064:   "column",              //ROLE_COLUMN
 2064:   "row",                 //ROLE_ROW
 2064:   "cell",                //ROLE_CELL
 2064:   "link",                //ROLE_LINK
 2064:   "helpballoon",         //ROLE_HELPBALLOON
 2064:   "character",           //ROLE_CHARACTER
 2064:   "list",                //ROLE_LIST
 2064:   "listitem",            //ROLE_LISTITEM
 2064:   "outline",             //ROLE_OUTLINE
 2064:   "outlineitem",         //ROLE_OUTLINEITEM
 2064:   "pagetab",             //ROLE_PAGETAB
 2064:   "propertypage",        //ROLE_PROPERTYPAGE
 2064:   "indicator",           //ROLE_INDICATOR
 2064:   "graphic",             //ROLE_GRAPHIC
 2064:   "statictext",          //ROLE_STATICTEXT
 2064:   "text leaf",           //ROLE_TEXT_LEAF
 2064:   "pushbutton",          //ROLE_PUSHBUTTON
 2064:   "checkbutton",         //ROLE_CHECKBUTTON
 2064:   "radiobutton",         //ROLE_RADIOBUTTON
 2064:   "combobox",            //ROLE_COMBOBOX
 2064:   "droplist",            //ROLE_DROPLIST
 2064:   "progressbar",         //ROLE_PROGRESSBAR
 2064:   "dial",                //ROLE_DIAL
 2064:   "hotkeyfield",         //ROLE_HOTKEYFIELD
 2064:   "slider",              //ROLE_SLIDER
 2064:   "spinbutton",          //ROLE_SPINBUTTON
 2064:   "diagram",             //ROLE_DIAGRAM
 2064:   "animation",           //ROLE_ANIMATION
 2064:   "equation",            //ROLE_EQUATION
 2064:   "buttondropdown",      //ROLE_BUTTONDROPDOWN
 2064:   "buttonmenu",          //ROLE_BUTTONMENU
 2064:   "buttondropdowngrid",  //ROLE_BUTTONDROPDOWNGRID
 2064:   "whitespace",          //ROLE_WHITESPACE
 2064:   "pagetablist",         //ROLE_PAGETABLIST
 2064:   "clock",               //ROLE_CLOCK
 2064:   "splitbutton",         //ROLE_SPLITBUTTON
 2064:   "ipaddress",           //ROLE_IPADDRESS
 2064:   "accel label",         //ROLE_ACCEL_LABEL
 2064:   "arrow",               //ROLE_ARROW
 2064:   "canvas",              //ROLE_CANVAS
 2064:   "check menu item",     //ROLE_CHECK_MENU_ITEM
 2064:   "color chooser",       //ROLE_COLOR_CHOOSER
 2064:   "date editor",         //ROLE_DATE_EDITOR
 2064:   "desktop icon",        //ROLE_DESKTOP_ICON
 2064:   "desktop frame",       //ROLE_DESKTOP_FRAME
 2064:   "directory pane",      //ROLE_DIRECTORY_PANE
 2064:   "file chooser",        //ROLE_FILE_CHOOSER
 2064:   "font chooser",        //ROLE_FONT_CHOOSER
 2064:   "chrome window",       //ROLE_CHROME_WINDOW
 2064:   "glass pane",          //ROLE_GLASS_PANE
 2064:   "html container",      //ROLE_HTML_CONTAINER
 2064:   "icon",                //ROLE_ICON
 2064:   "label",               //ROLE_LABEL
 2064:   "layered pane",        //ROLE_LAYERED_PANE
 2064:   "option pane",         //ROLE_OPTION_PANE
 2064:   "password text",       //ROLE_PASSWORD_TEXT
 2064:   "popup menu",          //ROLE_POPUP_MENU
 2064:   "radio menu item",     //ROLE_RADIO_MENU_ITEM
 2064:   "root pane",           //ROLE_ROOT_PANE
 2064:   "scroll pane",         //ROLE_SCROLL_PANE
 2064:   "split pane",          //ROLE_SPLIT_PANE
 2064:   "table column header", //ROLE_TABLE_COLUMN_HEADER
 2064:   "table row header",    //ROLE_TABLE_ROW_HEADER
 2064:   "tear off menu item",  //ROLE_TEAR_OFF_MENU_ITEM
 2064:   "terminal",            //ROLE_TERMINAL
 2064:   "text container",      //ROLE_TEXT_CONTAINER
 2064:   "toggle button",       //ROLE_TOGGLE_BUTTON
 2064:   "tree table",          //ROLE_TREE_TABLE
 2064:   "viewport",            //ROLE_VIEWPORT
 2064:   "header",              //ROLE_HEADER
 2064:   "footer",              //ROLE_FOOTER
 2064:   "paragraph",           //ROLE_PARAGRAPH
 2064:   "ruler",               //ROLE_RULER
 2064:   "autocomplete",        //ROLE_AUTOCOMPLETE
 2064:   "editbar",             //ROLE_EDITBAR
 2064:   "entry",               //ROLE_ENTRY
 2064:   "caption",             //ROLE_CAPTION
 2064:   "document frame",      //ROLE_DOCUMENT_FRAME
 2064:   "heading",             //ROLE_HEADING
 2064:   "page",                //ROLE_PAGE
 2064:   "section",             //ROLE_SECTION
 2064:   "redundant object",    //ROLE_REDUNDANT_OBJECT
 2064:   "form",                //ROLE_FORM
 2064:   "ime",                 //ROLE_IME
 2064:   "app root",            //ROLE_APP_ROOT
 2064:   "parent menuitem",     //ROLE_PARENT_MENUITEM
 2064:   "calendar",            //ROLE_CALENDAR
 2064:   "combobox list",       //ROLE_COMBOBOX_LIST
 8051:   "combobox option",     //ROLE_COMBOBOX_OPTION
11854:   "image map",           //ROLE_IMAGE_MAP
11854:   "listbox option",      //ROLE_OPTION
11854:   "listbox rich option", //ROLE_RICH_OPTION
14234:   "listbox",             //ROLE_LISTBOX
23969:   "flat equation",       //ROLE_FLAT_EQUATION
33872:   "gridcell",            //ROLE_GRID_CELL
33872:   "embedded object"      //ROLE_EMBEDDED_OBJECT
 2064: };
 2064: 
    1: /**
 5188:  * Map nsIAccessibleEvents constants to strings. Used by
 5188:  * nsIAccessibleRetrieval::getStringEventType() method.
    1:  */
 5188: static const char kEventTypeNames[][40] = {
 5188:   "unknown",                                 //
32336:   "show",                                    // EVENT_SHOW
32336:   "hide",                                    // EVENT_HIDE
32336:   "reorder",                                 // EVENT_REORDER
 5188:   "active decendent change",                 // EVENT_ACTIVE_DECENDENT_CHANGED
 5188:   "focus",                                   // EVENT_FOCUS
 5188:   "state change",                            // EVENT_STATE_CHANGE
 5188:   "location change",                         // EVENT_LOCATION_CHANGE
 5188:   "name changed",                            // EVENT_NAME_CHANGE
 5188:   "description change",                      // EVENT_DESCRIPTION_CHANGE
 5188:   "value change",                            // EVENT_VALUE_CHANGE
 5188:   "help change",                             // EVENT_HELP_CHANGE
 5188:   "default action change",                   // EVENT_DEFACTION_CHANGE
 5188:   "action change",                           // EVENT_ACTION_CHANGE
 5188:   "accelerator change",                      // EVENT_ACCELERATOR_CHANGE
 5188:   "selection",                               // EVENT_SELECTION
 5188:   "selection add",                           // EVENT_SELECTION_ADD
 5188:   "selection remove",                        // EVENT_SELECTION_REMOVE
 5188:   "selection within",                        // EVENT_SELECTION_WITHIN
 5188:   "alert",                                   // EVENT_ALERT
 5188:   "foreground",                              // EVENT_FOREGROUND
 5188:   "menu start",                              // EVENT_MENU_START
 5188:   "menu end",                                // EVENT_MENU_END
 5188:   "menupopup start",                         // EVENT_MENUPOPUP_START
 5188:   "menupopup end",                           // EVENT_MENUPOPUP_END
 5188:   "capture start",                           // EVENT_CAPTURE_START
 5188:   "capture end",                             // EVENT_CAPTURE_END
 5188:   "movesize start",                          // EVENT_MOVESIZE_START
 5188:   "movesize end",                            // EVENT_MOVESIZE_END
 5188:   "contexthelp start",                       // EVENT_CONTEXTHELP_START
 5188:   "contexthelp end",                         // EVENT_CONTEXTHELP_END
 5188:   "dragdrop start",                          // EVENT_DRAGDROP_START
 5188:   "dragdrop end",                            // EVENT_DRAGDROP_END
 5188:   "dialog start",                            // EVENT_DIALOG_START
 5188:   "dialog end",                              // EVENT_DIALOG_END
 5188:   "scrolling start",                         // EVENT_SCROLLING_START
 5188:   "scrolling end",                           // EVENT_SCROLLING_END
 5188:   "minimize start",                          // EVENT_MINIMIZE_START
 5188:   "minimize end",                            // EVENT_MINIMIZE_END
 5188:   "document load complete",                  // EVENT_DOCUMENT_LOAD_COMPLETE
 5188:   "document reload",                         // EVENT_DOCUMENT_RELOAD
 5188:   "document load stopped",                   // EVENT_DOCUMENT_LOAD_STOPPED
 5188:   "document attributes changed",             // EVENT_DOCUMENT_ATTRIBUTES_CHANGED
 5188:   "document content changed",                // EVENT_DOCUMENT_CONTENT_CHANGED
 5188:   "property changed",                        // EVENT_PROPERTY_CHANGED
 5188:   "selection changed",                       // EVENT_SELECTION_CHANGED
 5188:   "text attribute changed",                  // EVENT_TEXT_ATTRIBUTE_CHANGED
 5188:   "text caret moved",                        // EVENT_TEXT_CARET_MOVED
 5188:   "text changed",                            // EVENT_TEXT_CHANGED
 5188:   "text inserted",                           // EVENT_TEXT_INSERTED
 5188:   "text removed",                            // EVENT_TEXT_REMOVED
 5188:   "text updated",                            // EVENT_TEXT_UPDATED
 5188:   "text selection changed",                  // EVENT_TEXT_SELECTION_CHANGED
 5188:   "visible data changed",                    // EVENT_VISIBLE_DATA_CHANGED
 5188:   "text column changed",                     // EVENT_TEXT_COLUMN_CHANGED
 5188:   "section changed",                         // EVENT_SECTION_CHANGED
 5188:   "table caption changed",                   // EVENT_TABLE_CAPTION_CHANGED
 5188:   "table model changed",                     // EVENT_TABLE_MODEL_CHANGED
 5188:   "table summary changed",                   // EVENT_TABLE_SUMMARY_CHANGED
 5188:   "table row description changed",           // EVENT_TABLE_ROW_DESCRIPTION_CHANGED
 5188:   "table row header changed",                // EVENT_TABLE_ROW_HEADER_CHANGED
 5188:   "table row insert",                        // EVENT_TABLE_ROW_INSERT
 5188:   "table row delete",                        // EVENT_TABLE_ROW_DELETE
 5188:   "table row reorder",                       // EVENT_TABLE_ROW_REORDER
 5188:   "table column description changed",        // EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED
 5188:   "table column header changed",             // EVENT_TABLE_COLUMN_HEADER_CHANGED
 5188:   "table column insert",                     // EVENT_TABLE_COLUMN_INSERT
 5188:   "table column delete",                     // EVENT_TABLE_COLUMN_DELETE
 5188:   "table column reorder",                    // EVENT_TABLE_COLUMN_REORDER
 5188:   "window activate",                         // EVENT_WINDOW_ACTIVATE
 5188:   "window create",                           // EVENT_WINDOW_CREATE
 5188:   "window deactivate",                       // EVENT_WINDOW_DEACTIVATE
 5188:   "window destroy",                          // EVENT_WINDOW_DESTROY
 5188:   "window maximize",                         // EVENT_WINDOW_MAXIMIZE
 5188:   "window minimize",                         // EVENT_WINDOW_MINIMIZE
 5188:   "window resize",                           // EVENT_WINDOW_RESIZE
 5188:   "window restore",                          // EVENT_WINDOW_RESTORE
 5188:   "hyperlink end index changed",             // EVENT_HYPERLINK_END_INDEX_CHANGED
 5188:   "hyperlink number of anchors changed",     // EVENT_HYPERLINK_NUMBER_OF_ANCHORS_CHANGED
 5188:   "hyperlink selected link changed",         // EVENT_HYPERLINK_SELECTED_LINK_CHANGED
 5188:   "hypertext link activated",                // EVENT_HYPERTEXT_LINK_ACTIVATED
 5188:   "hypertext link selected",                 // EVENT_HYPERTEXT_LINK_SELECTED
 5188:   "hyperlink start index changed",           // EVENT_HYPERLINK_START_INDEX_CHANGED
 5188:   "hypertext changed",                       // EVENT_HYPERTEXT_CHANGED
 5188:   "hypertext links count changed",           // EVENT_HYPERTEXT_NLINKS_CHANGED
 5188:   "object attribute changed",                // EVENT_OBJECT_ATTRIBUTE_CHANGED
43310:   "page changed"                             // EVENT_PAGE_CHANGED
    1: };
    1: 
 6812: /**
 6812:  * Map nsIAccessibleRelation constants to strings. Used by
 6812:  * nsIAccessibleRetrieval::getStringRelationType() method.
 6812:  */
 6812: static const char kRelationTypeNames[][20] = {
 6812:   "unknown",             // RELATION_NUL
 6812:   "controlled by",       // RELATION_CONTROLLED_BY
 6812:   "controller for",      // RELATION_CONTROLLER_FOR
 6812:   "label for",           // RELATION_LABEL_FOR
 6812:   "labelled by",         // RELATION_LABELLED_BY
 6812:   "member of",           // RELATION_MEMBER_OF
 6812:   "node child of",       // RELATION_NODE_CHILD_OF
 6812:   "flows to",            // RELATION_FLOWS_TO
 6812:   "flows from",          // RELATION_FLOWS_FROM
 6812:   "subwindow of",        // RELATION_SUBWINDOW_OF
 6812:   "embeds",              // RELATION_EMBEDS
 6812:   "embedded by",         // RELATION_EMBEDDED_BY
 6812:   "popup for",           // RELATION_POPUP_FOR
 6812:   "parent window of",    // RELATION_PARENT_WINDOW_OF
 6812:   "described by",        // RELATION_DESCRIBED_BY
 6812:   "description for",     // RELATION_DESCRIPTION_FOR
 6812:   "default button"       // RELATION_DEFAULT_BUTTON
 6812: };
 6812: 
    1: #endif /* __nsIAccessibilityService_h__ */
 6812: 
