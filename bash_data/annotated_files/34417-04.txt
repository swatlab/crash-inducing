    1: /*
    1: ** 2001 September 15
    1: **
    1: ** The author disclaims copyright to this source code.  In place of
    1: ** a legal notice, here is a blessing:
    1: **
    1: **    May you do good and not evil.
    1: **    May you find forgiveness for yourself and forgive others.
    1: **    May you share freely, never taking more than you give.
    1: **
    1: *************************************************************************
    1: ** This header file defines the interface that the SQLite library
 4159: ** presents to client programs.  If a C-function, structure, datatype,
 4159: ** or constant definition does not appear in this file, then it is
 4159: ** not a published API of SQLite, is subject to change without
 4159: ** notice, and should not be referenced by programs that use SQLite.
    1: **
 4159: ** Some of the definitions that are in this file are marked as
 4159: ** "experimental".  Experimental interfaces are normally new
 4159: ** features recently added to SQLite.  We do not anticipate changes
34100: ** to experimental interfaces but reserve to make minor changes if
34100: ** experience from use "in the wild" suggest such changes are prudent.
 4159: **
 4159: ** The official C-language API documentation for SQLite is derived
 4159: ** from comments in this file.  This file is the authoritative source
 4159: ** on how SQLite interfaces are suppose to operate.
 4159: **
 4159: ** The name of this file under configuration management is "sqlite.h.in".
 4159: ** The makefile makes some minor changes to this file (such as inserting
 4159: ** the version number) and changes its name to "sqlite3.h" as
 4159: ** part of the build process.
34100: **
34100: ** @(#) $Id: sqlite.h.in,v 1.458 2009/06/19 22:50:31 drh Exp $
    1: */
    1: #ifndef _SQLITE3_H_
    1: #define _SQLITE3_H_
    1: #include <stdarg.h>     /* Needed for the definition of va_list */
    1: 
    1: /*
    1: ** Make sure we can call this stuff from C++.
    1: */
    1: #ifdef __cplusplus
    1: extern "C" {
    1: #endif
    1: 
10178: 
10178: /*
10178: ** Add the ability to override 'extern'
10178: */
10178: #ifndef SQLITE_EXTERN
10178: # define SQLITE_EXTERN extern
10178: #endif
10178: 
    1: /*
20545: ** These no-op macros are used in front of interfaces to mark those
20545: ** interfaces as either deprecated or experimental.  New applications
34100: ** should not use deprecated intrfaces - they are support for backwards
20545: ** compatibility only.  Application writers should be aware that
20545: ** experimental interfaces are subject to change in point releases.
20545: **
20545: ** These macros used to resolve to various kinds of compiler magic that
20545: ** would generate warning messages when they were used.  But that
20545: ** compiler magic ended up generating such a flurry of bug reports
20545: ** that we have taken it all out and gone back to using simple
20545: ** noop macros.
20545: */
20545: #define SQLITE_DEPRECATED
20545: #define SQLITE_EXPERIMENTAL
20545: 
20545: /*
20545: ** Ensure these symbols were not defined by some previous header file.
    1: */
    1: #ifdef SQLITE_VERSION
    1: # undef SQLITE_VERSION
    1: #endif
 4159: #ifdef SQLITE_VERSION_NUMBER
 4159: # undef SQLITE_VERSION_NUMBER
 4159: #endif
    1: 
    1: /*
20545: ** CAPI3REF: Compile-Time Library Version Numbers {H10010} <S60100>
20545: **
20545: ** The SQLITE_VERSION and SQLITE_VERSION_NUMBER #defines in
20545: ** the sqlite3.h file specify the version of SQLite with which
20545: ** that header file is associated.
20545: **
34100: ** The "version" of SQLite is a string of the form "X.Y.Z".
34100: ** The phrase "alpha" or "beta" might be appended after the Z.
34100: ** The X value is major version number always 3 in SQLite3.
34100: ** The X value only changes when backwards compatibility is
20545: ** broken and we intend to never break backwards compatibility.
34100: ** The Y value is the minor version number and only changes when
 4159: ** there are major feature enhancements that are forwards compatible
20545: ** but not backwards compatible.
34100: ** The Z value is the release number and is incremented with
34100: ** each release but resets back to 0 whenever Y is incremented.
34100: **
34100: ** See also: [sqlite3_libversion()] and [sqlite3_libversion_number()].
20545: **
29099: ** Requirements: [H10011] [H10014]
    1: */
34417: #define SQLITE_VERSION         "3.6.16.1"
34100: #define SQLITE_VERSION_NUMBER  3006016
    1: 
    1: /*
20545: ** CAPI3REF: Run-Time Library Version Numbers {H10020} <S60100>
20545: ** KEYWORDS: sqlite3_version
20545: **
34100: ** These features provide the same information as the [SQLITE_VERSION]
34100: ** and [SQLITE_VERSION_NUMBER] #defines in the header, but are associated
34100: ** with the library instead of the header file.  Cautious programmers might
34100: ** include a check in their application to verify that
34100: ** sqlite3_libversion_number() always returns the value
34100: ** [SQLITE_VERSION_NUMBER].
10178: **
20545: ** The sqlite3_libversion() function returns the same information as is
20545: ** in the sqlite3_version[] string constant.  The function is provided
20545: ** for use in DLLs since DLL users usually do not have direct access to string
34100: ** constants within the DLL.
20545: **
29099: ** Requirements: [H10021] [H10022] [H10023]
    1: */
34100: SQLITE_EXTERN const char sqlite3_version[];
34100: const char *sqlite3_libversion(void);
34100: int sqlite3_libversion_number(void);
    1: 
    1: /*
20545: ** CAPI3REF: Test To See If The Library Is Threadsafe {H10100} <S60100>
20545: **
20545: ** SQLite can be compiled with or without mutexes.  When
34100: ** the [SQLITE_THREADSAFE] C preprocessor macro 1 or 2, mutexes
20545: ** are enabled and SQLite is threadsafe.  When the
20545: ** [SQLITE_THREADSAFE] macro is 0, 
20545: ** the mutexes are omitted.  Without the mutexes, it is not safe
20545: ** to use SQLite concurrently from more than one thread.
20545: **
20545: ** Enabling mutexes incurs a measurable performance penalty.
20545: ** So if speed is of utmost importance, it makes sense to disable
20545: ** the mutexes.  But for maximum safety, mutexes should be enabled.
20545: ** The default behavior is for mutexes to be enabled.
20545: **
34100: ** This interface can be used by a program to make sure that the
20545: ** version of SQLite that it is linking against was compiled with
20545: ** the desired setting of the [SQLITE_THREADSAFE] macro.
20545: **
20545: ** This interface only reports on the compile-time mutex setting
20545: ** of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with
20545: ** SQLITE_THREADSAFE=1 then mutexes are enabled by default but
20545: ** can be fully or partially disabled using a call to [sqlite3_config()]
20545: ** with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD],
20545: ** or [SQLITE_CONFIG_MUTEX].  The return value of this function shows
20545: ** only the default compile-time setting, not any run-time changes
20545: ** to that setting.
20545: **
20545: ** See the [threading mode] documentation for additional information.
20545: **
29099: ** Requirements: [H10101] [H10102]
10178: */
34100: int sqlite3_threadsafe(void);
10178: 
10178: /*
20545: ** CAPI3REF: Database Connection Handle {H12000} <S40200>
20545: ** KEYWORDS: {database connection} {database connections}
20545: **
20545: ** Each open SQLite database is represented by a pointer to an instance of
20545: ** the opaque structure named "sqlite3".  It is useful to think of an sqlite3
10178: ** pointer as an object.  The [sqlite3_open()], [sqlite3_open16()], and
20545: ** [sqlite3_open_v2()] interfaces are its constructors, and [sqlite3_close()]
20545: ** is its destructor.  There are many other interfaces (such as
20545: ** [sqlite3_prepare_v2()], [sqlite3_create_function()], and
20545: ** [sqlite3_busy_timeout()] to name but three) that are methods on an
20545: ** sqlite3 object.
    1: */
    1: typedef struct sqlite3 sqlite3;
    1: 
    1: /*
20545: ** CAPI3REF: 64-Bit Integer Types {H10200} <S10110>
20545: ** KEYWORDS: sqlite_int64 sqlite_uint64
20545: **
20545: ** Because there is no cross-platform way to specify 64-bit integer types
10178: ** SQLite includes typedefs for 64-bit signed and unsigned integers.
20545: **
20545: ** The sqlite3_int64 and sqlite3_uint64 are the preferred type definitions.
20545: ** The sqlite_int64 and sqlite_uint64 types are supported for backwards
20545: ** compatibility only.
20545: **
29099: ** Requirements: [H10201] [H10202]
    1: */
    1: #ifdef SQLITE_INT64_TYPE
    1:   typedef SQLITE_INT64_TYPE sqlite_int64;
    1:   typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;
    1: #elif defined(_MSC_VER) || defined(__BORLANDC__)
    1:   typedef __int64 sqlite_int64;
    1:   typedef unsigned __int64 sqlite_uint64;
    1: #else
    1:   typedef long long int sqlite_int64;
    1:   typedef unsigned long long int sqlite_uint64;
    1: #endif
10178: typedef sqlite_int64 sqlite3_int64;
10178: typedef sqlite_uint64 sqlite3_uint64;
    1: 
    1: /*
    1: ** If compiling for a processor that lacks floating point support,
20545: ** substitute integer for floating-point.
    1: */
    1: #ifdef SQLITE_OMIT_FLOATING_POINT
10178: # define double sqlite3_int64
    1: #endif
    1: 
    1: /*
20545: ** CAPI3REF: Closing A Database Connection {H12010} <S30100><S40200>
20545: **
20545: ** This routine is the destructor for the [sqlite3] object.
20545: **
20545: ** Applications should [sqlite3_finalize | finalize] all [prepared statements]
20545: ** and [sqlite3_blob_close | close] all [BLOB handles] associated with
20545: ** the [sqlite3] object prior to attempting to close the object.
20545: ** The [sqlite3_next_stmt()] interface can be used to locate all
20545: ** [prepared statements] associated with a [database connection] if desired.
20545: ** Typical code might look like this:
20545: **
20545: ** <blockquote><pre>
20545: ** sqlite3_stmt *pStmt;
20545: ** while( (pStmt = sqlite3_next_stmt(db, 0))!=0 ){
20545: ** &nbsp;   sqlite3_finalize(pStmt);
20545: ** }
20545: ** </pre></blockquote>
20545: **
20545: ** If [sqlite3_close()] is invoked while a transaction is open,
20545: ** the transaction is automatically rolled back.
20545: **
29099: ** The C parameter to [sqlite3_close(C)] must be either a NULL
20545: ** pointer or an [sqlite3] object pointer obtained
20545: ** from [sqlite3_open()], [sqlite3_open16()], or
20545: ** [sqlite3_open_v2()], and not previously closed.
29099: **
29099: ** Requirements:
29099: ** [H12011] [H12012] [H12013] [H12014] [H12015] [H12019]
    1: */
34100: int sqlite3_close(sqlite3 *);
    1: 
    1: /*
    1: ** The type for a callback function.
 4159: ** This is legacy and deprecated.  It is included for historical
 4159: ** compatibility and is not documented.
    1: */
    1: typedef int (*sqlite3_callback)(void*,int,char**, char**);
    1: 
    1: /*
20545: ** CAPI3REF: One-Step Query Execution Interface {H12100} <S10000>
20545: **
20545: ** The sqlite3_exec() interface is a convenient way of running one or more
20545: ** SQL statements without having to write a lot of C code.  The UTF-8 encoded
20545: ** SQL statements are passed in as the second parameter to sqlite3_exec().
20545: ** The statements are evaluated one by one until either an error or
20545: ** an interrupt is encountered, or until they are all done.  The 3rd parameter
20545: ** is an optional callback that is invoked once for each row of any query
20545: ** results produced by the SQL statements.  The 5th parameter tells where
20545: ** to write any error messages.
20545: **
20545: ** The error message passed back through the 5th parameter is held
20545: ** in memory obtained from [sqlite3_malloc()].  To avoid a memory leak,
20545: ** the calling application should call [sqlite3_free()] on any error
20545: ** message returned through the 5th parameter when it has finished using
20545: ** the error message.
20545: **
20545: ** If the SQL statement in the 2nd parameter is NULL or an empty string
20545: ** or a string containing only whitespace and comments, then no SQL
20545: ** statements are evaluated and the database is not changed.
20545: **
20545: ** The sqlite3_exec() interface is implemented in terms of
20545: ** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()].
20545: ** The sqlite3_exec() routine does nothing to the database that cannot be done
20545: ** by [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()].
20545: **
29099: ** The first parameter to [sqlite3_exec()] must be an valid and open
20545: ** [database connection].
20545: **
29099: ** The database connection must not be closed while
20545: ** [sqlite3_exec()] is running.
20545: **
29099: ** The calling function should use [sqlite3_free()] to free
20545: ** the memory that *errmsg is left pointing at once the error
20545: ** message is no longer needed.
20545: **
29099: ** The SQL statement text in the 2nd parameter to [sqlite3_exec()]
20545: ** must remain unchanged while [sqlite3_exec()] is running.
29099: **
29099: ** Requirements:
29099: ** [H12101] [H12102] [H12104] [H12105] [H12107] [H12110] [H12113] [H12116]
29099: ** [H12119] [H12122] [H12125] [H12131] [H12134] [H12137] [H12138]
    1: */
34100: int sqlite3_exec(
    1:   sqlite3*,                                  /* An open database */
20545:   const char *sql,                           /* SQL to be evaluated */
 4159:   int (*callback)(void*,int,char**,char**),  /* Callback function */
 4159:   void *,                                    /* 1st argument to callback */
    1:   char **errmsg                              /* Error msg written here */
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Result Codes {H10210} <S10700>
20545: ** KEYWORDS: SQLITE_OK {error code} {error codes}
20545: ** KEYWORDS: {result code} {result codes}
 4159: **
 4159: ** Many SQLite functions return an integer result code from the set shown
20545: ** here in order to indicates success or failure.
20545: **
20545: ** New error codes may be added in future versions of SQLite.
 4159: **
 4159: ** See also: [SQLITE_IOERR_READ | extended result codes]
    1: */
    1: #define SQLITE_OK           0   /* Successful result */
    1: /* beginning-of-error-codes */
    1: #define SQLITE_ERROR        1   /* SQL error or missing database */
10178: #define SQLITE_INTERNAL     2   /* Internal logic error in SQLite */
    1: #define SQLITE_PERM         3   /* Access permission denied */
    1: #define SQLITE_ABORT        4   /* Callback routine requested an abort */
    1: #define SQLITE_BUSY         5   /* The database file is locked */
    1: #define SQLITE_LOCKED       6   /* A table in the database is locked */
    1: #define SQLITE_NOMEM        7   /* A malloc() failed */
    1: #define SQLITE_READONLY     8   /* Attempt to write a readonly database */
    1: #define SQLITE_INTERRUPT    9   /* Operation terminated by sqlite3_interrupt()*/
    1: #define SQLITE_IOERR       10   /* Some kind of disk I/O error occurred */
    1: #define SQLITE_CORRUPT     11   /* The database disk image is malformed */
    1: #define SQLITE_NOTFOUND    12   /* NOT USED. Table or record not found */
    1: #define SQLITE_FULL        13   /* Insertion failed because database is full */
    1: #define SQLITE_CANTOPEN    14   /* Unable to open the database file */
 2623: #define SQLITE_PROTOCOL    15   /* NOT USED. Database lock protocol error */
    1: #define SQLITE_EMPTY       16   /* Database is empty */
    1: #define SQLITE_SCHEMA      17   /* The database schema changed */
 4159: #define SQLITE_TOOBIG      18   /* String or BLOB exceeds size limit */
10178: #define SQLITE_CONSTRAINT  19   /* Abort due to constraint violation */
    1: #define SQLITE_MISMATCH    20   /* Data type mismatch */
    1: #define SQLITE_MISUSE      21   /* Library used incorrectly */
    1: #define SQLITE_NOLFS       22   /* Uses OS features not supported on host */
    1: #define SQLITE_AUTH        23   /* Authorization denied */
    1: #define SQLITE_FORMAT      24   /* Auxiliary database format error */
    1: #define SQLITE_RANGE       25   /* 2nd parameter to sqlite3_bind out of range */
    1: #define SQLITE_NOTADB      26   /* File opened that is not a database file */
    1: #define SQLITE_ROW         100  /* sqlite3_step() has another row ready */
    1: #define SQLITE_DONE        101  /* sqlite3_step() has finished executing */
    1: /* end-of-error-codes */
    1: 
    1: /*
20545: ** CAPI3REF: Extended Result Codes {H10220} <S10700>
20545: ** KEYWORDS: {extended error code} {extended error codes}
20545: ** KEYWORDS: {extended result code} {extended result codes}
 2623: **
 4159: ** In its default configuration, SQLite API routines return one of 26 integer
20545: ** [SQLITE_OK | result codes].  However, experience has shown that many of
20545: ** these result codes are too coarse-grained.  They do not provide as
10178: ** much information about problems as programmers might like.  In an effort to
 4159: ** address this, newer versions of SQLite (version 3.3.8 and later) include
 4159: ** support for additional result codes that provide more detailed information
20545: ** about errors. The extended result codes are enabled or disabled
20545: ** on a per database connection basis using the
20545: ** [sqlite3_extended_result_codes()] API.
20545: **
20545: ** Some of the available extended result codes are listed here.
20545: ** One may expect the number of extended result codes will be expand
20545: ** over time.  Software that uses extended result codes should expect
20545: ** to see new result codes in future releases of SQLite.
 2623: **
 2623: ** The SQLITE_OK result code will never be extended.  It will always
 2623: ** be exactly zero.
 2623: */
 2623: #define SQLITE_IOERR_READ              (SQLITE_IOERR | (1<<8))
 2623: #define SQLITE_IOERR_SHORT_READ        (SQLITE_IOERR | (2<<8))
 2623: #define SQLITE_IOERR_WRITE             (SQLITE_IOERR | (3<<8))
 2623: #define SQLITE_IOERR_FSYNC             (SQLITE_IOERR | (4<<8))
 2623: #define SQLITE_IOERR_DIR_FSYNC         (SQLITE_IOERR | (5<<8))
 2623: #define SQLITE_IOERR_TRUNCATE          (SQLITE_IOERR | (6<<8))
 2623: #define SQLITE_IOERR_FSTAT             (SQLITE_IOERR | (7<<8))
 2623: #define SQLITE_IOERR_UNLOCK            (SQLITE_IOERR | (8<<8))
 2623: #define SQLITE_IOERR_RDLOCK            (SQLITE_IOERR | (9<<8))
 2623: #define SQLITE_IOERR_DELETE            (SQLITE_IOERR | (10<<8))
 4159: #define SQLITE_IOERR_BLOCKED           (SQLITE_IOERR | (11<<8))
10178: #define SQLITE_IOERR_NOMEM             (SQLITE_IOERR | (12<<8))
20545: #define SQLITE_IOERR_ACCESS            (SQLITE_IOERR | (13<<8))
20545: #define SQLITE_IOERR_CHECKRESERVEDLOCK (SQLITE_IOERR | (14<<8))
20545: #define SQLITE_IOERR_LOCK              (SQLITE_IOERR | (15<<8))
23606: #define SQLITE_IOERR_CLOSE             (SQLITE_IOERR | (16<<8))
23606: #define SQLITE_IOERR_DIR_CLOSE         (SQLITE_IOERR | (17<<8))
29099: #define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED | (1<<8) )
 2623: 
 2623: /*
20545: ** CAPI3REF: Flags For File Open Operations {H10230} <H11120> <H12700>
20545: **
20545: ** These bit values are intended for use in the
20545: ** 3rd parameter to the [sqlite3_open_v2()] interface and
20545: ** in the 4th parameter to the xOpen method of the
10178: ** [sqlite3_vfs] object.
10178: */
31098: #define SQLITE_OPEN_READONLY         0x00000001  /* Ok for sqlite3_open_v2() */
31098: #define SQLITE_OPEN_READWRITE        0x00000002  /* Ok for sqlite3_open_v2() */
31098: #define SQLITE_OPEN_CREATE           0x00000004  /* Ok for sqlite3_open_v2() */
31098: #define SQLITE_OPEN_DELETEONCLOSE    0x00000008  /* VFS only */
31098: #define SQLITE_OPEN_EXCLUSIVE        0x00000010  /* VFS only */
31098: #define SQLITE_OPEN_MAIN_DB          0x00000100  /* VFS only */
31098: #define SQLITE_OPEN_TEMP_DB          0x00000200  /* VFS only */
31098: #define SQLITE_OPEN_TRANSIENT_DB     0x00000400  /* VFS only */
31098: #define SQLITE_OPEN_MAIN_JOURNAL     0x00000800  /* VFS only */
31098: #define SQLITE_OPEN_TEMP_JOURNAL     0x00001000  /* VFS only */
31098: #define SQLITE_OPEN_SUBJOURNAL       0x00002000  /* VFS only */
31098: #define SQLITE_OPEN_MASTER_JOURNAL   0x00004000  /* VFS only */
31098: #define SQLITE_OPEN_NOMUTEX          0x00008000  /* Ok for sqlite3_open_v2() */
31098: #define SQLITE_OPEN_FULLMUTEX        0x00010000  /* Ok for sqlite3_open_v2() */
10178: 
10178: /*
20545: ** CAPI3REF: Device Characteristics {H10240} <H11120>
20545: **
20545: ** The xDeviceCapabilities method of the [sqlite3_io_methods]
10178: ** object returns an integer which is a vector of the these
10178: ** bit values expressing I/O characteristics of the mass storage
10178: ** device that holds the file that the [sqlite3_io_methods]
20545: ** refers to.
20545: **
20545: ** The SQLITE_IOCAP_ATOMIC property means that all writes of
20545: ** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values
10178: ** mean that writes of blocks that are nnn bytes in size and
10178: ** are aligned to an address which is an integer multiple of
20545: ** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means
10178: ** that when data is appended to a file, the data is appended
10178: ** first then the size of the file is extended, never the other
20545: ** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that
10178: ** information is written to disk in the same order as calls
10178: ** to xWrite().
10178: */
10178: #define SQLITE_IOCAP_ATOMIC          0x00000001
10178: #define SQLITE_IOCAP_ATOMIC512       0x00000002
10178: #define SQLITE_IOCAP_ATOMIC1K        0x00000004
10178: #define SQLITE_IOCAP_ATOMIC2K        0x00000008
10178: #define SQLITE_IOCAP_ATOMIC4K        0x00000010
10178: #define SQLITE_IOCAP_ATOMIC8K        0x00000020
10178: #define SQLITE_IOCAP_ATOMIC16K       0x00000040
10178: #define SQLITE_IOCAP_ATOMIC32K       0x00000080
10178: #define SQLITE_IOCAP_ATOMIC64K       0x00000100
10178: #define SQLITE_IOCAP_SAFE_APPEND     0x00000200
10178: #define SQLITE_IOCAP_SEQUENTIAL      0x00000400
10178: 
10178: /*
20545: ** CAPI3REF: File Locking Levels {H10250} <H11120> <H11310>
20545: **
20545: ** SQLite uses one of these integer values as the second
10178: ** argument to calls it makes to the xLock() and xUnlock() methods
20545: ** of an [sqlite3_io_methods] object.
10178: */
10178: #define SQLITE_LOCK_NONE          0
10178: #define SQLITE_LOCK_SHARED        1
10178: #define SQLITE_LOCK_RESERVED      2
10178: #define SQLITE_LOCK_PENDING       3
10178: #define SQLITE_LOCK_EXCLUSIVE     4
10178: 
10178: /*
20545: ** CAPI3REF: Synchronization Type Flags {H10260} <H11120>
20545: **
20545: ** When SQLite invokes the xSync() method of an
20545: ** [sqlite3_io_methods] object it uses a combination of
10178: ** these integer values as the second argument.
10178: **
20545: ** When the SQLITE_SYNC_DATAONLY flag is used, it means that the
10178: ** sync operation only needs to flush data to mass storage.  Inode
29099: ** information need not be flushed. If the lower four bits of the flag
29099: ** equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics.
29099: ** If the lower four bits equal SQLITE_SYNC_FULL, that means
22150: ** to use Mac OS X style fullsync instead of fsync().
10178: */
10178: #define SQLITE_SYNC_NORMAL        0x00002
10178: #define SQLITE_SYNC_FULL          0x00003
10178: #define SQLITE_SYNC_DATAONLY      0x00010
10178: 
10178: /*
20545: ** CAPI3REF: OS Interface Open File Handle {H11110} <S20110>
10178: **
34100: ** An [sqlite3_file] object represents an open file in the OS
34100: ** interface layer.  Individual OS interface implementations will
10178: ** want to subclass this object by appending additional fields
10178: ** for their own use.  The pMethods entry is a pointer to an
10178: ** [sqlite3_io_methods] object that defines methods for performing
10178: ** I/O operations on the open file.
10178: */
10178: typedef struct sqlite3_file sqlite3_file;
10178: struct sqlite3_file {
10178:   const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */
10178: };
10178: 
10178: /*
20545: ** CAPI3REF: OS Interface File Virtual Methods Object {H11120} <S20110>
20545: **
20545: ** Every file opened by the [sqlite3_vfs] xOpen method populates an
20545: ** [sqlite3_file] object (or, more commonly, a subclass of the
20545: ** [sqlite3_file] object) with a pointer to an instance of this object.
20545: ** This object defines the methods used to perform various operations
20545: ** against the open file represented by the [sqlite3_file] object.
10178: **
31098: ** If the xOpen method sets the sqlite3_file.pMethods element 
31098: ** to a non-NULL pointer, then the sqlite3_io_methods.xClose method
31098: ** may be invoked even if the xOpen reported that it failed.  The
31098: ** only way to prevent a call to xClose following a failed xOpen
31098: ** is for the xOpen to set the sqlite3_file.pMethods element to NULL.
31098: **
10178: ** The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or
10178: ** [SQLITE_SYNC_FULL].  The first choice is the normal fsync().
22150: ** The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY]
20545: ** flag may be ORed in to indicate that only the data of the file
20545: ** and not its inode needs to be synced.
10178: **
10178: ** The integer values to xLock() and xUnlock() are one of
10178: ** <ul>
10178: ** <li> [SQLITE_LOCK_NONE],
10178: ** <li> [SQLITE_LOCK_SHARED],
10178: ** <li> [SQLITE_LOCK_RESERVED],
10178: ** <li> [SQLITE_LOCK_PENDING], or
10178: ** <li> [SQLITE_LOCK_EXCLUSIVE].
10178: ** </ul>
10178: ** xLock() increases the lock. xUnlock() decreases the lock.
20545: ** The xCheckReservedLock() method checks whether any database connection,
20545: ** either in this process or in some other process, is holding a RESERVED,
10178: ** PENDING, or EXCLUSIVE lock on the file.  It returns true
20545: ** if such a lock exists and false otherwise.
10178: **
10178: ** The xFileControl() method is a generic interface that allows custom
10178: ** VFS implementations to directly control an open file using the
20545: ** [sqlite3_file_control()] interface.  The second "op" argument is an
20545: ** integer opcode.  The third argument is a generic pointer intended to
20545: ** point to a structure that may contain arguments or space in which to
10178: ** write return values.  Potential uses for xFileControl() might be
10178: ** functions to enable blocking locks with timeouts, to change the
10178: ** locking strategy (for example to use dot-file locks), to inquire
10178: ** about the status of a lock, or to break stale locks.  The SQLite
20545: ** core reserves all opcodes less than 100 for its own use.
10178: ** A [SQLITE_FCNTL_LOCKSTATE | list of opcodes] less than 100 is available.
10178: ** Applications that define a custom xFileControl method should use opcodes
10178: ** greater than 100 to avoid conflicts.
10178: **
10178: ** The xSectorSize() method returns the sector size of the
10178: ** device that underlies the file.  The sector size is the
10178: ** minimum write that can be performed without disturbing
10178: ** other bytes in the file.  The xDeviceCharacteristics()
10178: ** method returns a bit vector describing behaviors of the
10178: ** underlying device:
10178: **
10178: ** <ul>
10178: ** <li> [SQLITE_IOCAP_ATOMIC]
10178: ** <li> [SQLITE_IOCAP_ATOMIC512]
10178: ** <li> [SQLITE_IOCAP_ATOMIC1K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC2K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC4K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC8K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC16K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC32K]
10178: ** <li> [SQLITE_IOCAP_ATOMIC64K]
10178: ** <li> [SQLITE_IOCAP_SAFE_APPEND]
10178: ** <li> [SQLITE_IOCAP_SEQUENTIAL]
10178: ** </ul>
10178: **
10178: ** The SQLITE_IOCAP_ATOMIC property means that all writes of
10178: ** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values
10178: ** mean that writes of blocks that are nnn bytes in size and
10178: ** are aligned to an address which is an integer multiple of
10178: ** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means
10178: ** that when data is appended to a file, the data is appended
10178: ** first then the size of the file is extended, never the other
10178: ** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that
10178: ** information is written to disk in the same order as calls
10178: ** to xWrite().
22150: **
22150: ** If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill
22150: ** in the unread portions of the buffer with zeros.  A VFS that
22150: ** fails to zero-fill short reads might seem to work.  However,
22150: ** failure to zero-fill short reads will eventually lead to
22150: ** database corruption.
10178: */
10178: typedef struct sqlite3_io_methods sqlite3_io_methods;
10178: struct sqlite3_io_methods {
10178:   int iVersion;
10178:   int (*xClose)(sqlite3_file*);
10178:   int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);
10178:   int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);
10178:   int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);
10178:   int (*xSync)(sqlite3_file*, int flags);
10178:   int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);
10178:   int (*xLock)(sqlite3_file*, int);
10178:   int (*xUnlock)(sqlite3_file*, int);
20545:   int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);
10178:   int (*xFileControl)(sqlite3_file*, int op, void *pArg);
10178:   int (*xSectorSize)(sqlite3_file*);
10178:   int (*xDeviceCharacteristics)(sqlite3_file*);
10178:   /* Additional methods may be added in future releases */
10178: };
10178: 
10178: /*
20545: ** CAPI3REF: Standard File Control Opcodes {H11310} <S30800>
10178: **
10178: ** These integer constants are opcodes for the xFileControl method
20545: ** of the [sqlite3_io_methods] object and for the [sqlite3_file_control()]
10178: ** interface.
10178: **
20545: ** The [SQLITE_FCNTL_LOCKSTATE] opcode is used for debugging.  This
20545: ** opcode causes the xFileControl method to write the current state of
10178: ** the lock (one of [SQLITE_LOCK_NONE], [SQLITE_LOCK_SHARED],
10178: ** [SQLITE_LOCK_RESERVED], [SQLITE_LOCK_PENDING], or [SQLITE_LOCK_EXCLUSIVE])
20545: ** into an integer that the pArg argument points to. This capability
10178: ** is used during testing and only needs to be supported when SQLITE_TEST
10178: ** is defined.
10178: */
10178: #define SQLITE_FCNTL_LOCKSTATE        1
23606: #define SQLITE_GET_LOCKPROXYFILE      2
23606: #define SQLITE_SET_LOCKPROXYFILE      3
23606: #define SQLITE_LAST_ERRNO             4
10178: 
10178: /*
20545: ** CAPI3REF: Mutex Handle {H17110} <S20130>
10178: **
10178: ** The mutex module within SQLite defines [sqlite3_mutex] to be an
20545: ** abstract type for a mutex object.  The SQLite core never looks
20545: ** at the internal representation of an [sqlite3_mutex].  It only
10178: ** deals with pointers to the [sqlite3_mutex] object.
10178: **
10178: ** Mutexes are created using [sqlite3_mutex_alloc()].
10178: */
10178: typedef struct sqlite3_mutex sqlite3_mutex;
10178: 
10178: /*
20545: ** CAPI3REF: OS Interface Object {H11140} <S20100>
20545: **
20545: ** An instance of the sqlite3_vfs object defines the interface between
20545: ** the SQLite core and the underlying operating system.  The "vfs"
10178: ** in the name of the object stands for "virtual file system".
10178: **
20545: ** The value of the iVersion field is initially 1 but may be larger in
20545: ** future versions of SQLite.  Additional fields may be appended to this
20545: ** object when the iVersion value is increased.  Note that the structure
20545: ** of the sqlite3_vfs object changes in the transaction between
20545: ** SQLite version 3.5.9 and 3.6.0 and yet the iVersion field was not
20545: ** modified.
10178: **
10178: ** The szOsFile field is the size of the subclassed [sqlite3_file]
10178: ** structure used by this VFS.  mxPathname is the maximum length of
10178: ** a pathname in this VFS.
10178: **
20545: ** Registered sqlite3_vfs objects are kept on a linked list formed by
10178: ** the pNext pointer.  The [sqlite3_vfs_register()]
10178: ** and [sqlite3_vfs_unregister()] interfaces manage this list
10178: ** in a thread-safe way.  The [sqlite3_vfs_find()] interface
20545: ** searches the list.  Neither the application code nor the VFS
20545: ** implementation should use the pNext pointer.
20545: **
20545: ** The pNext field is the only field in the sqlite3_vfs
10178: ** structure that SQLite will ever modify.  SQLite will only access
10178: ** or modify this field while holding a particular static mutex.
10178: ** The application should never modify anything within the sqlite3_vfs
10178: ** object once the object has been registered.
10178: **
10178: ** The zName field holds the name of the VFS module.  The name must
10178: ** be unique across all VFS modules.
10178: **
23606: ** SQLite will guarantee that the zFilename parameter to xOpen
20545: ** is either a NULL pointer or string obtained
20545: ** from xFullPathname().  SQLite further guarantees that
20545: ** the string will be valid and unchanged until xClose() is
31098: ** called. Because of the previous sentence,
20545: ** the [sqlite3_file] can safely store a pointer to the
10178: ** filename if it needs to remember the filename for some reason.
20545: ** If the zFilename parameter is xOpen is a NULL pointer then xOpen
31098: ** must invent its own temporary name for the file.  Whenever the 
20545: ** xFilename parameter is NULL it will also be the case that the
20545: ** flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].
20545: **
23606: ** The flags argument to xOpen() includes all bits set in
10178: ** the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]
10178: ** or [sqlite3_open16()] is used, then flags includes at least
23606: ** [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]. 
10178: ** If xOpen() opens a file read-only then it sets *pOutFlags to
20545: ** include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.
20545: **
23606: ** SQLite will also add one of the following flags to the xOpen()
10178: ** call, depending on the object being opened:
10178: **
10178: ** <ul>
10178: ** <li>  [SQLITE_OPEN_MAIN_DB]
10178: ** <li>  [SQLITE_OPEN_MAIN_JOURNAL]
10178: ** <li>  [SQLITE_OPEN_TEMP_DB]
10178: ** <li>  [SQLITE_OPEN_TEMP_JOURNAL]
10178: ** <li>  [SQLITE_OPEN_TRANSIENT_DB]
10178: ** <li>  [SQLITE_OPEN_SUBJOURNAL]
10178: ** <li>  [SQLITE_OPEN_MASTER_JOURNAL]
23606: ** </ul>
10178: **
10178: ** The file I/O implementation can use the object type flags to
20545: ** change the way it deals with files.  For example, an application
20545: ** that does not care about crash recovery or rollback might make
20545: ** the open of a journal file a no-op.  Writes to this journal would
20545: ** also be no-ops, and any attempt to read the journal would return
20545: ** SQLITE_IOERR.  Or the implementation might recognize that a database
20545: ** file will be doing page-aligned sector reads and writes in a random
20545: ** order and set up its I/O subsystem accordingly.
20545: **
20545: ** SQLite might also add one of the following flags to the xOpen method:
10178: **
10178: ** <ul>
10178: ** <li> [SQLITE_OPEN_DELETEONCLOSE]
10178: ** <li> [SQLITE_OPEN_EXCLUSIVE]
10178: ** </ul>
10178: **
23606: ** The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be
23606: ** deleted when it is closed.  The [SQLITE_OPEN_DELETEONCLOSE]
10178: ** will be set for TEMP  databases, journals and for subjournals.
20545: **
31098: ** The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction
31098: ** with the [SQLITE_OPEN_CREATE] flag, which are both directly
31098: ** analogous to the O_EXCL and O_CREAT flags of the POSIX open()
31098: ** API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the 
31098: ** SQLITE_OPEN_CREATE, is used to indicate that file should always
31098: ** be created, and that it is an error if it already exists.
31098: ** It is <i>not</i> used to indicate the file should be opened 
31098: ** for exclusive access.
20545: **
23606: ** At least szOsFile bytes of memory are allocated by SQLite
10178: ** to hold the  [sqlite3_file] structure passed as the third
23606: ** argument to xOpen.  The xOpen method does not have to
31098: ** allocate the structure; it should just fill it in.  Note that
31098: ** the xOpen method must set the sqlite3_file.pMethods to either
31098: ** a valid [sqlite3_io_methods] object or to NULL.  xOpen must do
31098: ** this even if the open fails.  SQLite expects that the sqlite3_file.pMethods
31098: ** element will be valid after xOpen returns regardless of the success
31098: ** or failure of the xOpen call.
10178: **
23606: ** The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]
20545: ** to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to
20545: ** test whether a file is readable and writable, or [SQLITE_ACCESS_READ]
23606: ** to test whether a file is at least readable.   The file can be a
10178: ** directory.
10178: **
23606: ** SQLite will always allocate at least mxPathname+1 bytes for the
23606: ** output buffer xFullPathname.  The exact size of the output buffer
23606: ** is also passed as a parameter to both  methods. If the output buffer
20545: ** is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is
20545: ** handled as a fatal error by SQLite, vfs implementations should endeavor
20545: ** to prevent this by setting mxPathname to a sufficiently large value.
10178: **
10178: ** The xRandomness(), xSleep(), and xCurrentTime() interfaces
10178: ** are not strictly a part of the filesystem, but they are
10178: ** included in the VFS structure for completeness.
10178: ** The xRandomness() function attempts to return nBytes bytes
10178: ** of good-quality randomness into zOut.  The return value is
20545: ** the actual number of bytes of randomness obtained.
20545: ** The xSleep() method causes the calling thread to sleep for at
10178: ** least the number of microseconds given.  The xCurrentTime()
20545: ** method returns a Julian Day Number for the current date and time.
23606: **
10178: */
10178: typedef struct sqlite3_vfs sqlite3_vfs;
10178: struct sqlite3_vfs {
10178:   int iVersion;            /* Structure version number */
10178:   int szOsFile;            /* Size of subclassed sqlite3_file */
10178:   int mxPathname;          /* Maximum file pathname length */
10178:   sqlite3_vfs *pNext;      /* Next registered VFS */
10178:   const char *zName;       /* Name of this virtual file system */
10178:   void *pAppData;          /* Pointer to application-specific data */
10178:   int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,
10178:                int flags, int *pOutFlags);
10178:   int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);
20545:   int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);
10178:   int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);
10178:   void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);
10178:   void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);
23606:   void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);
10178:   void (*xDlClose)(sqlite3_vfs*, void*);
10178:   int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);
10178:   int (*xSleep)(sqlite3_vfs*, int microseconds);
10178:   int (*xCurrentTime)(sqlite3_vfs*, double*);
20545:   int (*xGetLastError)(sqlite3_vfs*, int, char *);
10178:   /* New fields may be appended in figure versions.  The iVersion
10178:   ** value will increment whenever this happens. */
10178: };
10178: 
10178: /*
20545: ** CAPI3REF: Flags for the xAccess VFS method {H11190} <H11140>
20545: **
23606: ** These integer constants can be used as the third parameter to
10178: ** the xAccess method of an [sqlite3_vfs] object. {END}  They determine
20545: ** what kind of permissions the xAccess method is looking for.
23606: ** With SQLITE_ACCESS_EXISTS, the xAccess method
20545: ** simply checks whether the file exists.
23606: ** With SQLITE_ACCESS_READWRITE, the xAccess method
20545: ** checks whether the file is both readable and writable.
23606: ** With SQLITE_ACCESS_READ, the xAccess method
20545: ** checks whether the file is readable.
10178: */
10178: #define SQLITE_ACCESS_EXISTS    0
10178: #define SQLITE_ACCESS_READWRITE 1
10178: #define SQLITE_ACCESS_READ      2
10178: 
10178: /*
20545: ** CAPI3REF: Initialize The SQLite Library {H10130} <S20000><S30100>
20545: **
20545: ** The sqlite3_initialize() routine initializes the
20545: ** SQLite library.  The sqlite3_shutdown() routine
20545: ** deallocates any resources that were allocated by sqlite3_initialize().
20545: **
20545: ** A call to sqlite3_initialize() is an "effective" call if it is
20545: ** the first time sqlite3_initialize() is invoked during the lifetime of
20545: ** the process, or if it is the first time sqlite3_initialize() is invoked
20545: ** following a call to sqlite3_shutdown().  Only an effective call
20545: ** of sqlite3_initialize() does any initialization.  All other calls
20545: ** are harmless no-ops.
20545: **
29099: ** A call to sqlite3_shutdown() is an "effective" call if it is the first
29099: ** call to sqlite3_shutdown() since the last sqlite3_initialize().  Only
29099: ** an effective call to sqlite3_shutdown() does any deinitialization.
29099: ** All other calls to sqlite3_shutdown() are harmless no-ops.
29099: **
20545: ** Among other things, sqlite3_initialize() shall invoke
20545: ** sqlite3_os_init().  Similarly, sqlite3_shutdown()
20545: ** shall invoke sqlite3_os_end().
20545: **
20545: ** The sqlite3_initialize() routine returns [SQLITE_OK] on success.
20545: ** If for some reason, sqlite3_initialize() is unable to initialize
20545: ** the library (perhaps it is unable to allocate a needed resource such
20545: ** as a mutex) it returns an [error code] other than [SQLITE_OK].
20545: **
20545: ** The sqlite3_initialize() routine is called internally by many other
20545: ** SQLite interfaces so that an application usually does not need to
20545: ** invoke sqlite3_initialize() directly.  For example, [sqlite3_open()]
20545: ** calls sqlite3_initialize() so the SQLite library will be automatically
20545: ** initialized when [sqlite3_open()] is called if it has not be initialized
20545: ** already.  However, if SQLite is compiled with the [SQLITE_OMIT_AUTOINIT]
20545: ** compile-time option, then the automatic calls to sqlite3_initialize()
20545: ** are omitted and the application must call sqlite3_initialize() directly
20545: ** prior to using any other SQLite interface.  For maximum portability,
20545: ** it is recommended that applications always invoke sqlite3_initialize()
20545: ** directly prior to using any other SQLite interface.  Future releases
20545: ** of SQLite may require this.  In other words, the behavior exhibited
20545: ** when SQLite is compiled with [SQLITE_OMIT_AUTOINIT] might become the
20545: ** default behavior in some future release of SQLite.
20545: **
20545: ** The sqlite3_os_init() routine does operating-system specific
20545: ** initialization of the SQLite library.  The sqlite3_os_end()
20545: ** routine undoes the effect of sqlite3_os_init().  Typical tasks
20545: ** performed by these routines include allocation or deallocation
20545: ** of static resources, initialization of global variables,
20545: ** setting up a default [sqlite3_vfs] module, or setting up
20545: ** a default configuration using [sqlite3_config()].
20545: **
20545: ** The application should never invoke either sqlite3_os_init()
20545: ** or sqlite3_os_end() directly.  The application should only invoke
20545: ** sqlite3_initialize() and sqlite3_shutdown().  The sqlite3_os_init()
20545: ** interface is called automatically by sqlite3_initialize() and
20545: ** sqlite3_os_end() is called by sqlite3_shutdown().  Appropriate
20545: ** implementations for sqlite3_os_init() and sqlite3_os_end()
34100: ** are built into SQLite when it is compiled for unix, windows, or os/2.
34100: ** When built for other platforms (using the [SQLITE_OS_OTHER=1] compile-time
20545: ** option) the application must supply a suitable implementation for
20545: ** sqlite3_os_init() and sqlite3_os_end().  An application-supplied
20545: ** implementation of sqlite3_os_init() or sqlite3_os_end()
20545: ** must return [SQLITE_OK] on success and some other [error code] upon
20545: ** failure.
20545: */
34100: int sqlite3_initialize(void);
34100: int sqlite3_shutdown(void);
34100: int sqlite3_os_init(void);
34100: int sqlite3_os_end(void);
20545: 
20545: /*
20545: ** CAPI3REF: Configuring The SQLite Library {H14100} <S20000><S30200>
20545: ** EXPERIMENTAL
20545: **
20545: ** The sqlite3_config() interface is used to make global configuration
20545: ** changes to SQLite in order to tune SQLite to the specific needs of
20545: ** the application.  The default configuration is recommended for most
20545: ** applications and so this routine is usually not necessary.  It is
20545: ** provided to support rare applications with unusual needs.
20545: **
20545: ** The sqlite3_config() interface is not threadsafe.  The application
20545: ** must insure that no other SQLite interfaces are invoked by other
20545: ** threads while sqlite3_config() is running.  Furthermore, sqlite3_config()
20545: ** may only be invoked prior to library initialization using
20545: ** [sqlite3_initialize()] or after shutdown by [sqlite3_shutdown()].
20545: ** Note, however, that sqlite3_config() can be called as part of the
20545: ** implementation of an application-defined [sqlite3_os_init()].
20545: **
20545: ** The first argument to sqlite3_config() is an integer
20545: ** [SQLITE_CONFIG_SINGLETHREAD | configuration option] that determines
20545: ** what property of SQLite is to be configured.  Subsequent arguments
20545: ** vary depending on the [SQLITE_CONFIG_SINGLETHREAD | configuration option]
20545: ** in the first argument.
20545: **
20545: ** When a configuration option is set, sqlite3_config() returns [SQLITE_OK].
20545: ** If the option is unknown or SQLite is unable to set the option
20545: ** then this routine returns a non-zero [error code].
20545: **
29099: ** Requirements:
29099: ** [H14103] [H14106] [H14120] [H14123] [H14126] [H14129] [H14132] [H14135]
29099: ** [H14138] [H14141] [H14144] [H14147] [H14150] [H14153] [H14156] [H14159]
29099: ** [H14162] [H14165] [H14168]
20545: */
34100: SQLITE_EXPERIMENTAL int sqlite3_config(int, ...);
20545: 
20545: /*
20545: ** CAPI3REF: Configure database connections  {H14200} <S20000>
20545: ** EXPERIMENTAL
20545: **
20545: ** The sqlite3_db_config() interface is used to make configuration
20545: ** changes to a [database connection].  The interface is similar to
20545: ** [sqlite3_config()] except that the changes apply to a single
20545: ** [database connection] (specified in the first argument).  The
20545: ** sqlite3_db_config() interface can only be used immediately after
20545: ** the database connection is created using [sqlite3_open()],
20545: ** [sqlite3_open16()], or [sqlite3_open_v2()].  
20545: **
20545: ** The second argument to sqlite3_db_config(D,V,...)  is the
20545: ** configuration verb - an integer code that indicates what
20545: ** aspect of the [database connection] is being configured.
20545: ** The only choice for this value is [SQLITE_DBCONFIG_LOOKASIDE].
20545: ** New verbs are likely to be added in future releases of SQLite.
20545: ** Additional arguments depend on the verb.
20545: **
29099: ** Requirements:
29099: ** [H14203] [H14206] [H14209] [H14212] [H14215]
20545: */
34100: SQLITE_EXPERIMENTAL int sqlite3_db_config(sqlite3*, int op, ...);
20545: 
20545: /*
20545: ** CAPI3REF: Memory Allocation Routines {H10155} <S20120>
20545: ** EXPERIMENTAL
20545: **
20545: ** An instance of this object defines the interface between SQLite
20545: ** and low-level memory allocation routines.
20545: **
20545: ** This object is used in only one place in the SQLite interface.
20545: ** A pointer to an instance of this object is the argument to
20545: ** [sqlite3_config()] when the configuration option is
34100: ** [SQLITE_CONFIG_MALLOC].  By creating an instance of this object
34100: ** and passing it to [sqlite3_config()] during configuration, an
34100: ** application can specify an alternative memory allocation subsystem
34100: ** for SQLite to use for all of its dynamic memory needs.
34100: **
34100: ** Note that SQLite comes with a built-in memory allocator that is
34100: ** perfectly adequate for the overwhelming majority of applications
20545: ** and that this object is only useful to a tiny minority of applications
20545: ** with specialized memory allocation requirements.  This object is
20545: ** also used during testing of SQLite in order to specify an alternative
20545: ** memory allocator that simulates memory out-of-memory conditions in
20545: ** order to verify that SQLite recovers gracefully from such
20545: ** conditions.
20545: **
34100: ** The xMalloc, xFree, and xRealloc methods must work like the
34100: ** malloc(), free(), and realloc() functions from the standard library.
20545: **
20545: ** xSize should return the allocated size of a memory allocation
20545: ** previously obtained from xMalloc or xRealloc.  The allocated size
20545: ** is always at least as big as the requested size but may be larger.
20545: **
20545: ** The xRoundup method returns what would be the allocated size of
20545: ** a memory allocation given a particular requested size.  Most memory
20545: ** allocators round up memory allocations at least to the next multiple
20545: ** of 8.  Some allocators round up to a larger multiple or to a power of 2.
20545: **
20545: ** The xInit method initializes the memory allocator.  (For example,
20545: ** it might allocate any require mutexes or initialize internal data
20545: ** structures.  The xShutdown method is invoked (indirectly) by
20545: ** [sqlite3_shutdown()] and should deallocate any resources acquired
20545: ** by xInit.  The pAppData pointer is used as the only parameter to
20545: ** xInit and xShutdown.
20545: */
20545: typedef struct sqlite3_mem_methods sqlite3_mem_methods;
20545: struct sqlite3_mem_methods {
20545:   void *(*xMalloc)(int);         /* Memory allocation function */
20545:   void (*xFree)(void*);          /* Free a prior allocation */
20545:   void *(*xRealloc)(void*,int);  /* Resize an allocation */
20545:   int (*xSize)(void*);           /* Return the size of an allocation */
20545:   int (*xRoundup)(int);          /* Round up request size to allocation size */
20545:   int (*xInit)(void*);           /* Initialize the memory allocator */
20545:   void (*xShutdown)(void*);      /* Deinitialize the memory allocator */
20545:   void *pAppData;                /* Argument to xInit() and xShutdown() */
20545: };
20545: 
20545: /*
20545: ** CAPI3REF: Configuration Options {H10160} <S20000>
20545: ** EXPERIMENTAL
20545: **
20545: ** These constants are the available integer configuration options that
20545: ** can be passed as the first argument to the [sqlite3_config()] interface.
20545: **
20545: ** New configuration options may be added in future releases of SQLite.
20545: ** Existing configuration options might be discontinued.  Applications
20545: ** should check the return code from [sqlite3_config()] to make sure that
20545: ** the call worked.  The [sqlite3_config()] interface will return a
20545: ** non-zero [error code] if a discontinued or unsupported configuration option
20545: ** is invoked.
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_CONFIG_SINGLETHREAD</dt>
20545: ** <dd>There are no arguments to this option.  This option disables
20545: ** all mutexing and puts SQLite into a mode where it can only be used
20545: ** by a single thread.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_MULTITHREAD</dt>
20545: ** <dd>There are no arguments to this option.  This option disables
20545: ** mutexing on [database connection] and [prepared statement] objects.
20545: ** The application is responsible for serializing access to
20545: ** [database connections] and [prepared statements].  But other mutexes
20545: ** are enabled so that SQLite will be safe to use in a multi-threaded
20545: ** environment as long as no two threads attempt to use the same
20545: ** [database connection] at the same time.  See the [threading mode]
20545: ** documentation for additional information.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_SERIALIZED</dt>
20545: ** <dd>There are no arguments to this option.  This option enables
20545: ** all mutexes including the recursive
20545: ** mutexes on [database connection] and [prepared statement] objects.
20545: ** In this mode (which is the default when SQLite is compiled with
20545: ** [SQLITE_THREADSAFE=1]) the SQLite library will itself serialize access
20545: ** to [database connections] and [prepared statements] so that the
20545: ** application is free to use the same [database connection] or the
20545: ** same [prepared statement] in different threads at the same time.
20545: ** See the [threading mode] documentation for additional information.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_MALLOC</dt>
20545: ** <dd>This option takes a single argument which is a pointer to an
20545: ** instance of the [sqlite3_mem_methods] structure.  The argument specifies
20545: ** alternative low-level memory allocation routines to be used in place of
20545: ** the memory allocation routines built into SQLite.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_GETMALLOC</dt>
20545: ** <dd>This option takes a single argument which is a pointer to an
20545: ** instance of the [sqlite3_mem_methods] structure.  The [sqlite3_mem_methods]
20545: ** structure is filled with the currently defined memory allocation routines.
20545: ** This option can be used to overload the default memory allocation
20545: ** routines with a wrapper that simulations memory allocation failure or
20545: ** tracks memory usage, for example.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_MEMSTATUS</dt>
20545: ** <dd>This option takes single argument of type int, interpreted as a 
20545: ** boolean, which enables or disables the collection of memory allocation 
20545: ** statistics. When disabled, the following SQLite interfaces become 
20545: ** non-operational:
20545: **   <ul>
20545: **   <li> [sqlite3_memory_used()]
20545: **   <li> [sqlite3_memory_highwater()]
20545: **   <li> [sqlite3_soft_heap_limit()]
20545: **   <li> [sqlite3_status()]
20545: **   </ul>
20545: ** </dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_SCRATCH</dt>
20545: ** <dd>This option specifies a static memory buffer that SQLite can use for
31098: ** scratch memory.  There are three arguments:  A pointer an 8-byte
31098: ** aligned memory buffer from which the scrach allocations will be
31098: ** drawn, the size of each scratch allocation (sz),
31098: ** and the maximum number of scratch allocations (N).  The sz
20545: ** argument must be a multiple of 16. The sz parameter should be a few bytes
31098: ** larger than the actual scratch space required due to internal overhead.
31098: ** The first argument should pointer to an 8-byte aligned buffer
31098: ** of at least sz*N bytes of memory.
20545: ** SQLite will use no more than one scratch buffer at once per thread, so
20545: ** N should be set to the expected maximum number of threads.  The sz
20545: ** parameter should be 6 times the size of the largest database page size.
20545: ** Scratch buffers are used as part of the btree balance operation.  If
20545: ** The btree balancer needs additional memory beyond what is provided by
20545: ** scratch buffers or if no scratch buffer space is specified, then SQLite
20545: ** goes to [sqlite3_malloc()] to obtain the memory it needs.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_PAGECACHE</dt>
20545: ** <dd>This option specifies a static memory buffer that SQLite can use for
22150: ** the database page cache with the default page cache implemenation.  
22150: ** This configuration should not be used if an application-define page
22150: ** cache implementation is loaded using the SQLITE_CONFIG_PCACHE option.
31098: ** There are three arguments to this option: A pointer to 8-byte aligned
20545: ** memory, the size of each page buffer (sz), and the number of pages (N).
31098: ** The sz argument should be the size of the largest database page
31098: ** (a power of two between 512 and 32768) plus a little extra for each
31098: ** page header.  The page header size is 20 to 40 bytes depending on
31098: ** the host architecture.  It is harmless, apart from the wasted memory,
31098: ** to make sz a little too large.  The first
20545: ** argument should point to an allocation of at least sz*N bytes of memory.
20545: ** SQLite will use the memory provided by the first argument to satisfy its
20545: ** memory needs for the first N pages that it adds to cache.  If additional
20545: ** page cache memory is needed beyond what is provided by this option, then
20545: ** SQLite goes to [sqlite3_malloc()] for the additional storage space.
20545: ** The implementation might use one or more of the N buffers to hold 
31098: ** memory accounting information. The pointer in the first argument must
31098: ** be aligned to an 8-byte boundary or subsequent behavior of SQLite
31098: ** will be undefined.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_HEAP</dt>
20545: ** <dd>This option specifies a static memory buffer that SQLite will use
20545: ** for all of its dynamic memory allocation needs beyond those provided
20545: ** for by [SQLITE_CONFIG_SCRATCH] and [SQLITE_CONFIG_PAGECACHE].
31098: ** There are three arguments: An 8-byte aligned pointer to the memory,
31098: ** the number of bytes in the memory buffer, and the minimum allocation size.
31098: ** If the first pointer (the memory pointer) is NULL, then SQLite reverts
20545: ** to using its default memory allocator (the system malloc() implementation),
20545: ** undoing any prior invocation of [SQLITE_CONFIG_MALLOC].  If the
20545: ** memory pointer is not NULL and either [SQLITE_ENABLE_MEMSYS3] or
20545: ** [SQLITE_ENABLE_MEMSYS5] are defined, then the alternative memory
31098: ** allocator is engaged to handle all of SQLites memory allocation needs.
31098: ** The first pointer (the memory pointer) must be aligned to an 8-byte
31098: ** boundary or subsequent behavior of SQLite will be undefined.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_MUTEX</dt>
20545: ** <dd>This option takes a single argument which is a pointer to an
20545: ** instance of the [sqlite3_mutex_methods] structure.  The argument specifies
20545: ** alternative low-level mutex routines to be used in place
20545: ** the mutex routines built into SQLite.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_GETMUTEX</dt>
20545: ** <dd>This option takes a single argument which is a pointer to an
20545: ** instance of the [sqlite3_mutex_methods] structure.  The
20545: ** [sqlite3_mutex_methods]
20545: ** structure is filled with the currently defined mutex routines.
20545: ** This option can be used to overload the default mutex allocation
20545: ** routines with a wrapper used to track mutex usage for performance
20545: ** profiling or testing, for example.</dd>
20545: **
20545: ** <dt>SQLITE_CONFIG_LOOKASIDE</dt>
20545: ** <dd>This option takes two arguments that determine the default
34100: ** memory allcation lookaside optimization.  The first argument is the
20545: ** size of each lookaside buffer slot and the second is the number of
34100: ** slots allocated to each database connection.</dd>
20545: **
22150: ** <dt>SQLITE_CONFIG_PCACHE</dt>
22150: ** <dd>This option takes a single argument which is a pointer to
22150: ** an [sqlite3_pcache_methods] object.  This object specifies the interface
22150: ** to a custom page cache implementation.  SQLite makes a copy of the
22150: ** object and uses it for page cache memory allocations.</dd>
22150: **
22150: ** <dt>SQLITE_CONFIG_GETPCACHE</dt>
22150: ** <dd>This option takes a single argument which is a pointer to an
22150: ** [sqlite3_pcache_methods] object.  SQLite copies of the current
22150: ** page cache implementation into that object.</dd>
22150: **
20545: ** </dl>
20545: */
20545: #define SQLITE_CONFIG_SINGLETHREAD  1  /* nil */
20545: #define SQLITE_CONFIG_MULTITHREAD   2  /* nil */
20545: #define SQLITE_CONFIG_SERIALIZED    3  /* nil */
20545: #define SQLITE_CONFIG_MALLOC        4  /* sqlite3_mem_methods* */
20545: #define SQLITE_CONFIG_GETMALLOC     5  /* sqlite3_mem_methods* */
20545: #define SQLITE_CONFIG_SCRATCH       6  /* void*, int sz, int N */
20545: #define SQLITE_CONFIG_PAGECACHE     7  /* void*, int sz, int N */
20545: #define SQLITE_CONFIG_HEAP          8  /* void*, int nByte, int min */
20545: #define SQLITE_CONFIG_MEMSTATUS     9  /* boolean */
20545: #define SQLITE_CONFIG_MUTEX        10  /* sqlite3_mutex_methods* */
20545: #define SQLITE_CONFIG_GETMUTEX     11  /* sqlite3_mutex_methods* */
22150: /* previously SQLITE_CONFIG_CHUNKALLOC 12 which is now unused. */ 
20545: #define SQLITE_CONFIG_LOOKASIDE    13  /* int int */
22150: #define SQLITE_CONFIG_PCACHE       14  /* sqlite3_pcache_methods* */
22150: #define SQLITE_CONFIG_GETPCACHE    15  /* sqlite3_pcache_methods* */
20545: 
20545: /*
20545: ** CAPI3REF: Configuration Options {H10170} <S20000>
20545: ** EXPERIMENTAL
20545: **
20545: ** These constants are the available integer configuration options that
20545: ** can be passed as the second argument to the [sqlite3_db_config()] interface.
20545: **
20545: ** New configuration options may be added in future releases of SQLite.
20545: ** Existing configuration options might be discontinued.  Applications
20545: ** should check the return code from [sqlite3_db_config()] to make sure that
20545: ** the call worked.  The [sqlite3_db_config()] interface will return a
20545: ** non-zero [error code] if a discontinued or unsupported configuration option
20545: ** is invoked.
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_DBCONFIG_LOOKASIDE</dt>
20545: ** <dd>This option takes three additional arguments that determine the 
20545: ** [lookaside memory allocator] configuration for the [database connection].
20545: ** The first argument (the third parameter to [sqlite3_db_config()] is a
34100: ** pointer to an 8-byte aligned memory buffer to use for lookaside memory.
31098: ** The first argument may be NULL in which case SQLite will allocate the
31098: ** lookaside buffer itself using [sqlite3_malloc()].  The second argument is the
20545: ** size of each lookaside buffer slot and the third argument is the number of
20545: ** slots.  The size of the buffer in the first argument must be greater than
34100: ** or equal to the product of the second and third arguments.</dd>
20545: **
20545: ** </dl>
20545: */
20545: #define SQLITE_DBCONFIG_LOOKASIDE    1001  /* void* int int */
20545: 
20545: 
20545: /*
20545: ** CAPI3REF: Enable Or Disable Extended Result Codes {H12200} <S10700>
20545: **
20545: ** The sqlite3_extended_result_codes() routine enables or disables the
20545: ** [extended result codes] feature of SQLite. The extended result
20545: ** codes are disabled by default for historical compatibility considerations.
20545: **
29099: ** Requirements:
29099: ** [H12201] [H12202]
 2623: */
34100: int sqlite3_extended_result_codes(sqlite3*, int onoff);
 2623: 
 2623: /*
20545: ** CAPI3REF: Last Insert Rowid {H12220} <S10700>
20545: **
20545: ** Each entry in an SQLite table has a unique 64-bit signed
23606: ** integer key called the [ROWID | "rowid"]. The rowid is always available
10178: ** as an undeclared column named ROWID, OID, or _ROWID_ as long as those
20545: ** names are not also used by explicitly declared columns. If
23606: ** the table has a column of type [INTEGER PRIMARY KEY] then that column
20545: ** is another alias for the rowid.
20545: **
23606: ** This routine returns the [rowid] of the most recent
20545: ** successful [INSERT] into the database from the [database connection]
20545: ** in the first argument.  If no successful [INSERT]s
20545: ** have ever occurred on that database connection, zero is returned.
20545: **
23606: ** If an [INSERT] occurs within a trigger, then the [rowid] of the inserted
20545: ** row is returned by this routine as long as the trigger is running.
20545: ** But once the trigger terminates, the value returned by this routine
20545: ** reverts to the last value inserted before the trigger fired.
20545: **
20545: ** An [INSERT] that fails due to a constraint violation is not a
20545: ** successful [INSERT] and does not change the value returned by this
20545: ** routine.  Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK,
10178: ** and INSERT OR ABORT make no changes to the return value of this
20545: ** routine when their insertion fails.  When INSERT OR REPLACE
10178: ** encounters a constraint violation, it does not fail.  The
10178: ** INSERT continues to completion after deleting rows that caused
10178: ** the constraint problem so INSERT OR REPLACE will always change
10178: ** the return value of this interface.
10178: **
20545: ** For the purposes of this routine, an [INSERT] is considered to
20545: ** be successful even if it is subsequently rolled back.
20545: **
29099: ** Requirements:
29099: ** [H12221] [H12223]
29099: **
29099: ** If a separate thread performs a new [INSERT] on the same
20545: ** database connection while the [sqlite3_last_insert_rowid()]
23606: ** function is running and thus changes the last insert [rowid],
20545: ** then the value returned by [sqlite3_last_insert_rowid()] is
20545: ** unpredictable and might not equal either the old or the new
23606: ** last insert [rowid].
    1: */
34100: sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);
    1: 
    1: /*
20545: ** CAPI3REF: Count The Number Of Rows Modified {H12240} <S10600>
20545: **
20545: ** This function returns the number of database rows that were changed
10178: ** or inserted or deleted by the most recently completed SQL statement
20545: ** on the [database connection] specified by the first parameter.
20545: ** Only changes that are directly specified by the [INSERT], [UPDATE],
20545: ** or [DELETE] statement are counted.  Auxiliary changes caused by
20545: ** triggers are not counted. Use the [sqlite3_total_changes()] function
 4159: ** to find the total number of changes including changes caused by triggers.
 4159: **
29099: ** Changes to a view that are simulated by an [INSTEAD OF trigger]
29099: ** are not counted.  Only real table changes are counted.
29099: **
20545: ** A "row change" is a change to a single row of a single table
20545: ** caused by an INSERT, DELETE, or UPDATE statement.  Rows that
29099: ** are changed as side effects of [REPLACE] constraint resolution,
29099: ** rollback, ABORT processing, [DROP TABLE], or by any other
20545: ** mechanisms do not count as direct row changes.
20545: **
20545: ** A "trigger context" is a scope of execution that begins and
29099: ** ends with the script of a [CREATE TRIGGER | trigger]. 
29099: ** Most SQL statements are
20545: ** evaluated outside of any trigger.  This is the "top level"
20545: ** trigger context.  If a trigger fires from the top level, a
20545: ** new trigger context is entered for the duration of that one
20545: ** trigger.  Subtriggers create subcontexts for their duration.
20545: **
20545: ** Calling [sqlite3_exec()] or [sqlite3_step()] recursively does
20545: ** not create a new trigger context.
20545: **
20545: ** This function returns the number of direct row changes in the
20545: ** most recent INSERT, UPDATE, or DELETE statement within the same
20545: ** trigger context.
20545: **
20545: ** Thus, when called from the top level, this function returns the
20545: ** number of changes in the most recent INSERT, UPDATE, or DELETE
20545: ** that also occurred at the top level.  Within the body of a trigger,
20545: ** the sqlite3_changes() interface can be called to find the number of
 2623: ** changes in the most recently completed INSERT, UPDATE, or DELETE
10178: ** statement within the body of the same trigger.
20545: ** However, the number returned does not include changes
20545: ** caused by subtriggers since those have their own context.
20545: **
29099: ** See also the [sqlite3_total_changes()] interface and the
29099: ** [count_changes pragma].
29099: **
29099: ** Requirements:
29099: ** [H12241] [H12243]
29099: **
29099: ** If a separate thread makes changes on the same database connection
20545: ** while [sqlite3_changes()] is running then the value returned
20545: ** is unpredictable and not meaningful.
    1: */
34100: int sqlite3_changes(sqlite3*);
    1: 
    1: /*
20545: ** CAPI3REF: Total Number Of Rows Modified {H12260} <S10600>
20545: **
29099: ** This function returns the number of row changes caused by [INSERT],
29099: ** [UPDATE] or [DELETE] statements since the [database connection] was opened.
29099: ** The count includes all changes from all 
29099: ** [CREATE TRIGGER | trigger] contexts.  However,
29099: ** the count does not include changes used to implement [REPLACE] constraints,
29099: ** do rollbacks or ABORT processing, or [DROP TABLE] processing.  The
31098: ** count does not include rows of views that fire an [INSTEAD OF trigger],
31098: ** though if the INSTEAD OF trigger makes changes of its own, those changes 
31098: ** are counted.
20545: ** The changes are counted as soon as the statement that makes them is
20545: ** completed (when the statement handle is passed to [sqlite3_reset()] or
20545: ** [sqlite3_finalize()]).
20545: **
29099: ** See also the [sqlite3_changes()] interface and the
29099: ** [count_changes pragma].
29099: **
29099: ** Requirements:
29099: ** [H12261] [H12263]
29099: **
29099: ** If a separate thread makes changes on the same database connection
20545: ** while [sqlite3_total_changes()] is running then the value
20545: ** returned is unpredictable and not meaningful.
    1: */
34100: int sqlite3_total_changes(sqlite3*);
    1: 
 4159: /*
20545: ** CAPI3REF: Interrupt A Long-Running Query {H12270} <S30500>
20545: **
20545: ** This function causes any pending database operation to abort and
20545: ** return at its earliest opportunity. This routine is typically
    1: ** called in response to a user action such as pressing "Cancel"
    1: ** or Ctrl-C where the user wants a long query operation to halt
    1: ** immediately.
 2623: **
20545: ** It is safe to call this routine from a thread different from the
20545: ** thread that is currently running the database operation.  But it
20545: ** is not safe to call this routine with a [database connection] that
10178: ** is closed or might close before sqlite3_interrupt() returns.
10178: **
20545: ** If an SQL operation is very nearly finished at the time when
20545: ** sqlite3_interrupt() is called, then it might not have an opportunity
20545: ** to be interrupted and might continue to completion.
20545: **
20545: ** An SQL operation that is interrupted will return [SQLITE_INTERRUPT].
20545: ** If the interrupted SQL operation is an INSERT, UPDATE, or DELETE
20545: ** that is inside an explicit transaction, then the entire transaction
20545: ** will be rolled back automatically.
20545: **
29099: ** The sqlite3_interrupt(D) call is in effect until all currently running
29099: ** SQL statements on [database connection] D complete.  Any new SQL statements
29099: ** that are started after the sqlite3_interrupt() call and before the 
29099: ** running statements reaches zero are interrupted as if they had been
29099: ** running prior to the sqlite3_interrupt() call.  New SQL statements
29099: ** that are started after the running statement count reaches zero are
29099: ** not effected by the sqlite3_interrupt().
29099: ** A call to sqlite3_interrupt(D) that occurs when there are no running
29099: ** SQL statements is a no-op and has no effect on SQL statements
29099: ** that are started after the sqlite3_interrupt() call returns.
29099: **
29099: ** Requirements:
29099: ** [H12271] [H12272]
29099: **
29099: ** If the database connection closes while [sqlite3_interrupt()]
20545: ** is running then bad things will likely happen.
    1: */
34100: void sqlite3_interrupt(sqlite3*);
    1: 
 4159: /*
20545: ** CAPI3REF: Determine If An SQL Statement Is Complete {H10510} <S70200>
    1: **
29099: ** These routines are useful during command-line input to determine if the
29099: ** currently entered text seems to form a complete SQL statement or
10178: ** if additional input is needed before sending the text into
29099: ** SQLite for parsing.  These routines return 1 if the input string
10178: ** appears to be a complete SQL statement.  A statement is judged to be
29099: ** complete if it ends with a semicolon token and is not a prefix of a
29099: ** well-formed CREATE TRIGGER statement.  Semicolons that are embedded within
20545: ** string literals or quoted identifier names or comments are not
20545: ** independent tokens (they are part of the token in which they are
29099: ** embedded) and thus do not count as a statement terminator.  Whitespace
29099: ** and comments that follow the final semicolon are ignored.
29099: **
29099: ** These routines return 0 if the statement is incomplete.  If a
29099: ** memory allocation fails, then SQLITE_NOMEM is returned.
20545: **
20545: ** These routines do not parse the SQL statements thus
20545: ** will not detect syntactically incorrect SQL.
20545: **
29099: ** If SQLite has not been initialized using [sqlite3_initialize()] prior 
29099: ** to invoking sqlite3_complete16() then sqlite3_initialize() is invoked
29099: ** automatically by sqlite3_complete16().  If that initialization fails,
29099: ** then the return value from sqlite3_complete16() will be non-zero
29099: ** regardless of whether or not the input SQL is complete.
29099: **
29099: ** Requirements: [H10511] [H10512]
29099: **
29099: ** The input to [sqlite3_complete()] must be a zero-terminated
20545: ** UTF-8 string.
20545: **
29099: ** The input to [sqlite3_complete16()] must be a zero-terminated
20545: ** UTF-16 string in native byte order.
    1: */
34100: int sqlite3_complete(const char *sql);
34100: int sqlite3_complete16(const void *sql);
    1: 
    1: /*
20545: ** CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors {H12310} <S40400>
20545: **
20545: ** This routine sets a callback function that might be invoked whenever
20545: ** an attempt is made to open a database table that another thread
20545: ** or process has locked.
20545: **
20545: ** If the busy callback is NULL, then [SQLITE_BUSY] or [SQLITE_IOERR_BLOCKED]
20545: ** is returned immediately upon encountering the lock. If the busy callback
20545: ** is not NULL, then the callback will be invoked with two arguments.
20545: **
20545: ** The first argument to the handler is a copy of the void* pointer which
20545: ** is the third argument to sqlite3_busy_handler().  The second argument to
20545: ** the handler callback is the number of times that the busy handler has
20545: ** been invoked for this locking event.  If the
 4159: ** busy callback returns 0, then no additional attempts are made to
 4159: ** access the database and [SQLITE_BUSY] or [SQLITE_IOERR_BLOCKED] is returned.
20545: ** If the callback returns non-zero, then another attempt
10178: ** is made to open the database for reading and the cycle repeats.
    1: **
20545: ** The presence of a busy handler does not guarantee that it will be invoked
20545: ** when there is lock contention. If SQLite determines that invoking the busy
20545: ** handler could result in a deadlock, it will go ahead and return [SQLITE_BUSY]
20545: ** or [SQLITE_IOERR_BLOCKED] instead of invoking the busy handler.
 2623: ** Consider a scenario where one process is holding a read lock that
 2623: ** it is trying to promote to a reserved lock and
 2623: ** a second process is holding a reserved lock that it is trying
 2623: ** to promote to an exclusive lock.  The first process cannot proceed
 2623: ** because it is blocked by the second and the second process cannot
 2623: ** proceed because it is blocked by the first.  If both processes
 2623: ** invoke the busy handlers, neither will make any progress.  Therefore,
 4159: ** SQLite returns [SQLITE_BUSY] for the first process, hoping that this
 2623: ** will induce the first process to release its read lock and allow
 2623: ** the second process to proceed.
 2623: **
20545: ** The default busy callback is NULL.
20545: **
20545: ** The [SQLITE_BUSY] error is converted to [SQLITE_IOERR_BLOCKED]
10178: ** when SQLite is in the middle of a large transaction where all the
20545: ** changes will not fit into the in-memory cache.  SQLite will
 4159: ** already hold a RESERVED lock on the database file, but it needs
 4159: ** to promote this lock to EXCLUSIVE so that it can spill cache
 4159: ** pages into the database file without harm to concurrent
20545: ** readers.  If it is unable to promote the lock, then the in-memory
 4159: ** cache will be left in an inconsistent state and so the error
 4159: ** code is promoted from the relatively benign [SQLITE_BUSY] to
20545: ** the more severe [SQLITE_IOERR_BLOCKED].  This error code promotion
20545: ** forces an automatic rollback of the changes.  See the
20545: ** <a href="/cvstrac/wiki?p=CorruptionFollowingBusyError">
 4159: ** CorruptionFollowingBusyError</a> wiki page for a discussion of why
 4159: ** this is important.
 4159: **
20545: ** There can only be a single busy handler defined for each
20545: ** [database connection].  Setting a new busy handler clears any
20545: ** previously set handler.  Note that calling [sqlite3_busy_timeout()]
20545: ** will also set or clear the busy handler.
20545: **
20545: ** The busy callback should not take any actions which modify the
20545: ** database connection that invoked the busy handler.  Any such actions
20545: ** result in undefined behavior.
20545: ** 
29099: ** Requirements:
29099: ** [H12311] [H12312] [H12314] [H12316] [H12318]
29099: **
29099: ** A busy handler must not close the database connection
20545: ** or [prepared statement] that invoked the busy handler.
    1: */
34100: int sqlite3_busy_handler(sqlite3*, int(*)(void*,int), void*);
    1: 
    1: /*
20545: ** CAPI3REF: Set A Busy Timeout {H12340} <S40410>
20545: **
20545: ** This routine sets a [sqlite3_busy_handler | busy handler] that sleeps
20545: ** for a specified amount of time when a table is locked.  The handler
20545: ** will sleep multiple times until at least "ms" milliseconds of sleeping
20545: ** have accumulated. {H12343} After "ms" milliseconds of sleeping,
20545: ** the handler returns 0 which causes [sqlite3_step()] to return
20545: ** [SQLITE_BUSY] or [SQLITE_IOERR_BLOCKED].
20545: **
20545: ** Calling this routine with an argument less than or equal to zero
    1: ** turns off all busy handlers.
 4159: **
20545: ** There can only be a single busy handler for a particular
20545: ** [database connection] any any given moment.  If another busy handler
20545: ** was defined  (using [sqlite3_busy_handler()]) prior to calling
 4159: ** this routine, that other busy handler is cleared.
20545: **
29099: ** Requirements:
29099: ** [H12341] [H12343] [H12344]
    1: */
34100: int sqlite3_busy_timeout(sqlite3*, int ms);
    1: 
    1: /*
20545: ** CAPI3REF: Convenience Routines For Running Queries {H12370} <S10000>
20545: **
20545: ** Definition: A <b>result table</b> is memory data structure created by the
20545: ** [sqlite3_get_table()] interface.  A result table records the
20545: ** complete query results from one or more queries.
20545: **
20545: ** The table conceptually has a number of rows and columns.  But
20545: ** these numbers are not part of the result table itself.  These
20545: ** numbers are obtained separately.  Let N be the number of rows
20545: ** and M be the number of columns.
20545: **
20545: ** A result table is an array of pointers to zero-terminated UTF-8 strings.
20545: ** There are (N+1)*M elements in the array.  The first M pointers point
20545: ** to zero-terminated strings that  contain the names of the columns.
20545: ** The remaining entries all point to query results.  NULL values result
20545: ** in NULL pointers.  All other values are in their UTF-8 zero-terminated
20545: ** string representation as returned by [sqlite3_column_text()].
20545: **
20545: ** A result table might consist of one or more memory allocations.
20545: ** It is not safe to pass a result table directly to [sqlite3_free()].
20545: ** A result table should be deallocated using [sqlite3_free_table()].
20545: **
20545: ** As an example of the result table format, suppose a query result
20545: ** is as follows:
    1: **
10178: ** <blockquote><pre>
    1: **        Name        | Age
    1: **        -----------------------
    1: **        Alice       | 43
    1: **        Bob         | 28
    1: **        Cindy       | 21
10178: ** </pre></blockquote>
    1: **
20545: ** There are two column (M==2) and three rows (N==3).  Thus the
20545: ** result table has 8 entries.  Suppose the result table is stored
20545: ** in an array names azResult.  Then azResult holds this content:
    1: **
10178: ** <blockquote><pre>
10178: **        azResult&#91;0] = "Name";
10178: **        azResult&#91;1] = "Age";
10178: **        azResult&#91;2] = "Alice";
10178: **        azResult&#91;3] = "43";
10178: **        azResult&#91;4] = "Bob";
10178: **        azResult&#91;5] = "28";
10178: **        azResult&#91;6] = "Cindy";
10178: **        azResult&#91;7] = "21";
10178: ** </pre></blockquote>
    1: **
20545: ** The sqlite3_get_table() function evaluates one or more
20545: ** semicolon-separated SQL statements in the zero-terminated UTF-8
20545: ** string of its 2nd parameter.  It returns a result table to the
20545: ** pointer given in its 3rd parameter.
20545: **
20545: ** After the calling function has finished using the result, it should
20545: ** pass the pointer to the result table to sqlite3_free_table() in order to
20545: ** release the memory that was malloced.  Because of the way the
20545: ** [sqlite3_malloc()] happens within sqlite3_get_table(), the calling
20545: ** function must not try to call [sqlite3_free()] directly.  Only
20545: ** [sqlite3_free_table()] is able to release the memory properly and safely.
20545: **
20545: ** The sqlite3_get_table() interface is implemented as a wrapper around
20545: ** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access
20545: ** to any internal data structures of SQLite.  It uses only the public
20545: ** interface defined here.  As a consequence, errors that occur in the
20545: ** wrapper layer outside of the internal [sqlite3_exec()] call are not
20545: ** reflected in subsequent calls to [sqlite3_errcode()] or [sqlite3_errmsg()].
20545: **
29099: ** Requirements:
29099: ** [H12371] [H12373] [H12374] [H12376] [H12379] [H12382]
    1: */
34100: int sqlite3_get_table(
20545:   sqlite3 *db,          /* An open database */
20545:   const char *zSql,     /* SQL to be evaluated */
20545:   char ***pazResult,    /* Results of the query */
20545:   int *pnRow,           /* Number of result rows written here */
20545:   int *pnColumn,        /* Number of result columns written here */
20545:   char **pzErrmsg       /* Error msg written here */
    1: );
34100: void sqlite3_free_table(char **result);
    1: 
    1: /*
20545: ** CAPI3REF: Formatted String Printing Functions {H17400} <S70000><S20000>
 4159: **
34100: ** These routines are workalikes of the "printf()" family of functions
 4159: ** from the standard C library.
 4159: **
20545: ** The sqlite3_mprintf() and sqlite3_vmprintf() routines write their
10178: ** results into memory obtained from [sqlite3_malloc()].
20545: ** The strings returned by these two routines should be
20545: ** released by [sqlite3_free()].  Both routines return a
 4159: ** NULL pointer if [sqlite3_malloc()] is unable to allocate enough
 4159: ** memory to hold the resulting string.
 4159: **
20545: ** In sqlite3_snprintf() routine is similar to "snprintf()" from
 4159: ** the standard C library.  The result is written into the
 4159: ** buffer supplied as the second parameter whose size is given by
20545: ** the first parameter. Note that the order of the
 4159: ** first two parameters is reversed from snprintf().  This is an
 4159: ** historical accident that cannot be fixed without breaking
20545: ** backwards compatibility.  Note also that sqlite3_snprintf()
 4159: ** returns a pointer to its buffer instead of the number of
20545: ** characters actually written into the buffer.  We admit that
 4159: ** the number of characters written would be a more useful return
 4159: ** value but we cannot change the implementation of sqlite3_snprintf()
 4159: ** now without breaking compatibility.
 4159: **
20545: ** As long as the buffer size is greater than zero, sqlite3_snprintf()
20545: ** guarantees that the buffer is always zero-terminated.  The first
 4159: ** parameter "n" is the total size of the buffer, including space for
20545: ** the zero terminator.  So the longest string that can be completely
 4159: ** written will be n-1 characters.
 4159: **
 4159: ** These routines all implement some additional formatting
    1: ** options that are useful for constructing SQL statements.
20545: ** All of the usual printf() formatting options apply.  In addition, there
10178: ** is are "%q", "%Q", and "%z" options.
10178: **
20545: ** The %q option works like %s in that it substitutes a null-terminated
    1: ** string from the argument list.  But %q also doubles every '\'' character.
20545: ** %q is designed for use inside a string literal.  By doubling each '\''
    1: ** character it escapes that character and allows it to be inserted into
    1: ** the string.
    1: **
20545: ** For example, assume the string variable zText contains text as follows:
    1: **
 4159: ** <blockquote><pre>
    1: **  char *zText = "It's a happy day!";
 4159: ** </pre></blockquote>
    1: **
 4159: ** One can use this text in an SQL statement as follows:
    1: **
 4159: ** <blockquote><pre>
 4159: **  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES('%q')", zText);
 4159: **  sqlite3_exec(db, zSQL, 0, 0, 0);
 4159: **  sqlite3_free(zSQL);
 4159: ** </pre></blockquote>
    1: **
    1: ** Because the %q format string is used, the '\'' character in zText
    1: ** is escaped and the SQL generated is as follows:
    1: **
 4159: ** <blockquote><pre>
    1: **  INSERT INTO table1 VALUES('It''s a happy day!')
 4159: ** </pre></blockquote>
    1: **
    1: ** This is correct.  Had we used %s instead of %q, the generated SQL
    1: ** would have looked like this:
    1: **
 4159: ** <blockquote><pre>
    1: **  INSERT INTO table1 VALUES('It's a happy day!');
 4159: ** </pre></blockquote>
    1: **
20545: ** This second example is an SQL syntax error.  As a general rule you should
20545: ** always use %q instead of %s when inserting text into a string literal.
20545: **
20545: ** The %Q option works like %q except it also adds single quotes around
20545: ** the outside of the total string.  Additionally, if the parameter in the
20545: ** argument list is a NULL pointer, %Q substitutes the text "NULL" (without
20545: ** single quotes) in place of the %Q option.  So, for example, one could say:
 4159: **
 4159: ** <blockquote><pre>
 4159: **  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES(%Q)", zText);
 4159: **  sqlite3_exec(db, zSQL, 0, 0, 0);
 4159: **  sqlite3_free(zSQL);
 4159: ** </pre></blockquote>
 4159: **
 4159: ** The code above will render a correct SQL statement in the zSQL
 4159: ** variable even if the zText variable is a NULL pointer.
10178: **
20545: ** The "%z" formatting option works exactly like "%s" with the
10178: ** addition that after the string has been read and copied into
10178: ** the result, [sqlite3_free()] is called on the input string. {END}
20545: **
29099: ** Requirements:
29099: ** [H17403] [H17406] [H17407]
    1: */
34100: char *sqlite3_mprintf(const char*,...);
34100: char *sqlite3_vmprintf(const char*, va_list);
34100: char *sqlite3_snprintf(int,char*,const char*, ...);
    1: 
 2623: /*
20545: ** CAPI3REF: Memory Allocation Subsystem {H17300} <S20000>
20545: **
20545: ** The SQLite core  uses these three routines for all of its own
20545: ** internal memory allocation needs. "Core" in the previous sentence
10178: ** does not include operating-system specific VFS implementation.  The
20545: ** Windows VFS uses native malloc() and free() for some operations.
20545: **
20545: ** The sqlite3_malloc() routine returns a pointer to a block
10178: ** of memory at least N bytes in length, where N is the parameter.
20545: ** If sqlite3_malloc() is unable to obtain sufficient free
20545: ** memory, it returns a NULL pointer.  If the parameter N to
10178: ** sqlite3_malloc() is zero or negative then sqlite3_malloc() returns
10178: ** a NULL pointer.
10178: **
20545: ** Calling sqlite3_free() with a pointer previously returned
10178: ** by sqlite3_malloc() or sqlite3_realloc() releases that memory so
20545: ** that it might be reused.  The sqlite3_free() routine is
10178: ** a no-op if is called with a NULL pointer.  Passing a NULL pointer
20545: ** to sqlite3_free() is harmless.  After being freed, memory
10178: ** should neither be read nor written.  Even reading previously freed
10178: ** memory might result in a segmentation fault or other severe error.
20545: ** Memory corruption, a segmentation fault, or other severe error
10178: ** might result if sqlite3_free() is called with a non-NULL pointer that
22150: ** was not obtained from sqlite3_malloc() or sqlite3_realloc().
10178: **
20545: ** The sqlite3_realloc() interface attempts to resize a
10178: ** prior memory allocation to be at least N bytes, where N is the
10178: ** second parameter.  The memory allocation to be resized is the first
20545: ** parameter.  If the first parameter to sqlite3_realloc()
10178: ** is a NULL pointer then its behavior is identical to calling
10178: ** sqlite3_malloc(N) where N is the second parameter to sqlite3_realloc().
20545: ** If the second parameter to sqlite3_realloc() is zero or
10178: ** negative then the behavior is exactly the same as calling
10178: ** sqlite3_free(P) where P is the first parameter to sqlite3_realloc().
20545: ** sqlite3_realloc() returns a pointer to a memory allocation
10178: ** of at least N bytes in size or NULL if sufficient memory is unavailable.
20545: ** If M is the size of the prior allocation, then min(N,M) bytes
10178: ** of the prior allocation are copied into the beginning of buffer returned
10178: ** by sqlite3_realloc() and the prior allocation is freed.
20545: ** If sqlite3_realloc() returns NULL, then the prior allocation
10178: ** is not freed.
10178: **
20545: ** The memory returned by sqlite3_malloc() and sqlite3_realloc()
10178: ** is always aligned to at least an 8 byte boundary. {END}
10178: **
20545: ** The default implementation of the memory allocation subsystem uses
20545: ** the malloc(), realloc() and free() provided by the standard C library.
20545: ** {H17382} However, if SQLite is compiled with the
20545: ** SQLITE_MEMORY_SIZE=<i>NNN</i> C preprocessor macro (where <i>NNN</i>
20545: ** is an integer), then SQLite create a static array of at least
20545: ** <i>NNN</i> bytes in size and uses that array for all of its dynamic
20545: ** memory allocation needs. {END}  Additional memory allocator options
20545: ** may be added in future releases.
10178: **
10178: ** In SQLite version 3.5.0 and 3.5.1, it was possible to define
10178: ** the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in
10178: ** implementation of these routines to be omitted.  That capability
20545: ** is no longer provided.  Only built-in memory allocators can be used.
20545: **
20545: ** The Windows OS interface layer calls
10178: ** the system malloc() and free() directly when converting
10178: ** filenames between the UTF-8 encoding used by SQLite
20545: ** and whatever filename encoding is used by the particular Windows
10178: ** installation.  Memory allocation errors are detected, but
10178: ** they are reported back as [SQLITE_CANTOPEN] or
10178: ** [SQLITE_IOERR] rather than [SQLITE_NOMEM].
20545: **
29099: ** Requirements:
29099: ** [H17303] [H17304] [H17305] [H17306] [H17310] [H17312] [H17315] [H17318]
29099: ** [H17321] [H17322] [H17323]
29099: **
29099: ** The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()]
20545: ** must be either NULL or else pointers obtained from a prior
20545: ** invocation of [sqlite3_malloc()] or [sqlite3_realloc()] that have
20545: ** not yet been released.
20545: **
29099: ** The application must not read or write any part of
20545: ** a block of memory after it has been released using
20545: ** [sqlite3_free()] or [sqlite3_realloc()].
 2623: */
34100: void *sqlite3_malloc(int);
34100: void *sqlite3_realloc(void*, int);
34100: void sqlite3_free(void*);
 2623: 
    1: /*
20545: ** CAPI3REF: Memory Allocator Statistics {H17370} <S30210>
20545: **
20545: ** SQLite provides these two interfaces for reporting on the status
20545: ** of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()]
20545: ** routines, which form the built-in memory allocation subsystem.
20545: **
29099: ** Requirements:
29099: ** [H17371] [H17373] [H17374] [H17375]
10178: */
34100: sqlite3_int64 sqlite3_memory_used(void);
34100: sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
10178: 
10178: /*
20545: ** CAPI3REF: Pseudo-Random Number Generator {H17390} <S20000>
20545: **
20545: ** SQLite contains a high-quality pseudo-random number generator (PRNG) used to
23606: ** select random [ROWID | ROWIDs] when inserting new records into a table that
23606: ** already uses the largest possible [ROWID].  The PRNG is also used for
20545: ** the build-in random() and randomblob() SQL functions.  This interface allows
20545: ** applications to access the same PRNG for other purposes.
20545: **
20545: ** A call to this routine stores N bytes of randomness into buffer P.
20545: **
20545: ** The first time this routine is invoked (either internally or by
20545: ** the application) the PRNG is seeded using randomness obtained
20545: ** from the xRandomness method of the default [sqlite3_vfs] object.
20545: ** On all subsequent invocations, the pseudo-randomness is generated
20545: ** internally and without recourse to the [sqlite3_vfs] xRandomness
20545: ** method.
20545: **
29099: ** Requirements:
29099: ** [H17392]
20545: */
34100: void sqlite3_randomness(int N, void *P);
20545: 
20545: /*
20545: ** CAPI3REF: Compile-Time Authorization Callbacks {H12500} <S70100>
20545: **
20545: ** This routine registers a authorizer callback with a particular
20545: ** [database connection], supplied in the first argument.
 4159: ** The authorizer callback is invoked as SQL statements are being compiled
 4159: ** by [sqlite3_prepare()] or its variants [sqlite3_prepare_v2()],
20545: ** [sqlite3_prepare16()] and [sqlite3_prepare16_v2()].  At various
 4159: ** points during the compilation process, as logic is being created
 4159: ** to perform various actions, the authorizer callback is invoked to
 4159: ** see if those actions are allowed.  The authorizer callback should
20545: ** return [SQLITE_OK] to allow the action, [SQLITE_IGNORE] to disallow the
 4159: ** specific action but allow the SQL statement to continue to be
 4159: ** compiled, or [SQLITE_DENY] to cause the entire SQL statement to be
20545: ** rejected with an error.  If the authorizer callback returns
10178: ** any value other than [SQLITE_IGNORE], [SQLITE_OK], or [SQLITE_DENY]
20545: ** then the [sqlite3_prepare_v2()] or equivalent call that triggered
20545: ** the authorizer will fail with an error message.
10178: **
10178: ** When the callback returns [SQLITE_OK], that means the operation
20545: ** requested is ok.  When the callback returns [SQLITE_DENY], the
10178: ** [sqlite3_prepare_v2()] or equivalent call that triggered the
20545: ** authorizer will fail with an error message explaining that
29099: ** access is denied. 
29099: **
29099: ** The first parameter to the authorizer callback is a copy of the third
29099: ** parameter to the sqlite3_set_authorizer() interface. The second parameter
29099: ** to the callback is an integer [SQLITE_COPY | action code] that specifies
29099: ** the particular action to be authorized. The third through sixth parameters
29099: ** to the callback are zero-terminated strings that contain additional
29099: ** details about the action to be authorized.
29099: **
29099: ** If the action code is [SQLITE_READ]
28599: ** and the callback returns [SQLITE_IGNORE] then the
28599: ** [prepared statement] statement is constructed to substitute
28599: ** a NULL value in place of the table column that would have
28599: ** been read if [SQLITE_OK] had been returned.  The [SQLITE_IGNORE]
28599: ** return can be used to deny an untrusted user access to individual
28599: ** columns of a table.
29099: ** If the action code is [SQLITE_DELETE] and the callback returns
29099: ** [SQLITE_IGNORE] then the [DELETE] operation proceeds but the
29099: ** [truncate optimization] is disabled and all rows are deleted individually.
28589: **
20545: ** An authorizer is used when [sqlite3_prepare | preparing]
20545: ** SQL statements from an untrusted source, to ensure that the SQL statements
20545: ** do not try to access data they are not allowed to see, or that they do not
20545: ** try to execute malicious statements that damage the database.  For
 4159: ** example, an application may allow a user to enter arbitrary
 4159: ** SQL queries for evaluation by a database.  But the application does
 4159: ** not want the user to be able to make arbitrary changes to the
 4159: ** database.  An authorizer could then be put in place while the
20545: ** user-entered SQL is being [sqlite3_prepare | prepared] that
20545: ** disallows everything except [SELECT] statements.
20545: **
20545: ** Applications that need to process SQL from untrusted sources
20545: ** might also consider lowering resource limits using [sqlite3_limit()]
20545: ** and limiting database size using the [max_page_count] [PRAGMA]
20545: ** in addition to using an authorizer.
20545: **
20545: ** Only a single authorizer can be in place on a database connection
 4159: ** at a time.  Each call to sqlite3_set_authorizer overrides the
20545: ** previous call.  Disable the authorizer by installing a NULL callback.
20545: ** The authorizer is disabled by default.
20545: **
20545: ** The authorizer callback must not do anything that will modify
20545: ** the database connection that invoked the authorizer callback.
20545: ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their
20545: ** database connections for the meaning of "modify" in this paragraph.
20545: **
20545: ** When [sqlite3_prepare_v2()] is used to prepare a statement, the
34100: ** statement might be reprepared during [sqlite3_step()] due to a 
20545: ** schema change.  Hence, the application should ensure that the
20545: ** correct authorizer callback remains in place during the [sqlite3_step()].
 4159: **
 4159: ** Note that the authorizer callback is invoked only during
20545: ** [sqlite3_prepare()] or its variants.  Authorization is not
29099: ** performed during statement evaluation in [sqlite3_step()], unless
29099: ** as stated in the previous paragraph, sqlite3_step() invokes
29099: ** sqlite3_prepare_v2() to reprepare a statement after a schema change.
29099: **
29099: ** Requirements:
29099: ** [H12501] [H12502] [H12503] [H12504] [H12505] [H12506] [H12507] [H12510]
29099: ** [H12511] [H12512] [H12520] [H12521] [H12522]
    1: */
34100: int sqlite3_set_authorizer(
    1:   sqlite3*,
    1:   int (*xAuth)(void*,int,const char*,const char*,const char*,const char*),
    1:   void *pUserData
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Authorizer Return Codes {H12590} <H12500>
 4159: **
 4159: ** The [sqlite3_set_authorizer | authorizer callback function] must
 4159: ** return either [SQLITE_OK] or one of these two constants in order
 4159: ** to signal SQLite whether or not the action is permitted.  See the
 4159: ** [sqlite3_set_authorizer | authorizer documentation] for additional
 4159: ** information.
 4159: */
 4159: #define SQLITE_DENY   1   /* Abort the SQL statement with an error */
 4159: #define SQLITE_IGNORE 2   /* Don't allow access, but don't generate an error */
 4159: 
 4159: /*
20545: ** CAPI3REF: Authorizer Action Codes {H12550} <H12500>
 4159: **
 4159: ** The [sqlite3_set_authorizer()] interface registers a callback function
20545: ** that is invoked to authorize certain SQL statement actions.  The
 4159: ** second parameter to the callback is an integer code that specifies
 4159: ** what action is being authorized.  These are the integer action codes that
20545: ** the authorizer callback may be passed.
 4159: **
 4159: ** These action code values signify what kind of operation is to be
20545: ** authorized.  The 3rd and 4th parameters to the authorization
10178: ** callback function will be parameters or NULL depending on which of these
20545: ** codes is used as the second parameter.  The 5th parameter to the
 4159: ** authorizer callback is the name of the database ("main", "temp",
20545: ** etc.) if applicable.  The 6th parameter to the authorizer callback
    1: ** is the name of the inner-most trigger or view that is responsible for
    1: ** the access attempt or NULL if this access attempt is directly from
 4159: ** top-level SQL code.
20545: **
29099: ** Requirements:
29099: ** [H12551] [H12552] [H12553] [H12554]
    1: */
 4159: /******************************************* 3rd ************ 4th ***********/
    1: #define SQLITE_CREATE_INDEX          1   /* Index Name      Table Name      */
    1: #define SQLITE_CREATE_TABLE          2   /* Table Name      NULL            */
    1: #define SQLITE_CREATE_TEMP_INDEX     3   /* Index Name      Table Name      */
    1: #define SQLITE_CREATE_TEMP_TABLE     4   /* Table Name      NULL            */
    1: #define SQLITE_CREATE_TEMP_TRIGGER   5   /* Trigger Name    Table Name      */
    1: #define SQLITE_CREATE_TEMP_VIEW      6   /* View Name       NULL            */
    1: #define SQLITE_CREATE_TRIGGER        7   /* Trigger Name    Table Name      */
    1: #define SQLITE_CREATE_VIEW           8   /* View Name       NULL            */
    1: #define SQLITE_DELETE                9   /* Table Name      NULL            */
    1: #define SQLITE_DROP_INDEX           10   /* Index Name      Table Name      */
    1: #define SQLITE_DROP_TABLE           11   /* Table Name      NULL            */
    1: #define SQLITE_DROP_TEMP_INDEX      12   /* Index Name      Table Name      */
    1: #define SQLITE_DROP_TEMP_TABLE      13   /* Table Name      NULL            */
    1: #define SQLITE_DROP_TEMP_TRIGGER    14   /* Trigger Name    Table Name      */
    1: #define SQLITE_DROP_TEMP_VIEW       15   /* View Name       NULL            */
    1: #define SQLITE_DROP_TRIGGER         16   /* Trigger Name    Table Name      */
    1: #define SQLITE_DROP_VIEW            17   /* View Name       NULL            */
    1: #define SQLITE_INSERT               18   /* Table Name      NULL            */
    1: #define SQLITE_PRAGMA               19   /* Pragma Name     1st arg or NULL */
    1: #define SQLITE_READ                 20   /* Table Name      Column Name     */
    1: #define SQLITE_SELECT               21   /* NULL            NULL            */
25013: #define SQLITE_TRANSACTION          22   /* Operation       NULL            */
    1: #define SQLITE_UPDATE               23   /* Table Name      Column Name     */
    1: #define SQLITE_ATTACH               24   /* Filename        NULL            */
    1: #define SQLITE_DETACH               25   /* Database Name   NULL            */
    1: #define SQLITE_ALTER_TABLE          26   /* Database Name   Table Name      */
    1: #define SQLITE_REINDEX              27   /* Index Name      NULL            */
    1: #define SQLITE_ANALYZE              28   /* Table Name      NULL            */
 2623: #define SQLITE_CREATE_VTABLE        29   /* Table Name      Module Name     */
 2623: #define SQLITE_DROP_VTABLE          30   /* Table Name      Module Name     */
22150: #define SQLITE_FUNCTION             31   /* NULL            Function Name   */
25013: #define SQLITE_SAVEPOINT            32   /* Operation       Savepoint Name  */
 4159: #define SQLITE_COPY                  0   /* No longer used */
    1: 
    1: /*
20545: ** CAPI3REF: Tracing And Profiling Functions {H12280} <S60400>
20545: ** EXPERIMENTAL
 4159: **
 4159: ** These routines register callback functions that can be used for
 4159: ** tracing and profiling the execution of SQL statements.
10178: **
20545: ** The callback function registered by sqlite3_trace() is invoked at
20545: ** various times when an SQL statement is being run by [sqlite3_step()].
20545: ** The callback returns a UTF-8 rendering of the SQL statement text
20545: ** as the statement first begins executing.  Additional callbacks occur
20545: ** as each triggered subprogram is entered.  The callbacks for triggers
20545: ** contain a UTF-8 SQL comment that identifies the trigger.
20545: **
20545: ** The callback function registered by sqlite3_profile() is invoked
20545: ** as each SQL statement finishes.  The profile callback contains
20545: ** the original statement text and an estimate of wall-clock time
20545: ** of how long that statement took to run.
20545: **
29099: ** Requirements:
29099: ** [H12281] [H12282] [H12283] [H12284] [H12285] [H12287] [H12288] [H12289]
29099: ** [H12290]
    1: */
34100: SQLITE_EXPERIMENTAL void *sqlite3_trace(sqlite3*, void(*xTrace)(void*,const char*), void*);
34100: SQLITE_EXPERIMENTAL void *sqlite3_profile(sqlite3*,
10178:    void(*xProfile)(void*,const char*,sqlite3_uint64), void*);
    1: 
    1: /*
20545: ** CAPI3REF: Query Progress Callbacks {H12910} <S60400>
20545: **
20545: ** This routine configures a callback function - the
10178: ** progress callback - that is invoked periodically during long
10178: ** running calls to [sqlite3_exec()], [sqlite3_step()] and
20545: ** [sqlite3_get_table()].  An example use for this
 4159: ** interface is to keep a GUI updated during a large query.
    1: **
20545: ** If the progress callback returns non-zero, the operation is
20545: ** interrupted.  This feature can be used to implement a
20545: ** "Cancel" button on a GUI progress dialog box.
20545: **
20545: ** The progress handler must not do anything that will modify
20545: ** the database connection that invoked the progress handler.
20545: ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their
20545: ** database connections for the meaning of "modify" in this paragraph.
20545: **
29099: ** Requirements:
29099: ** [H12911] [H12912] [H12913] [H12914] [H12915] [H12916] [H12917] [H12918]
29099: **
    1: */
34100: void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);
    1: 
    1: /*
20545: ** CAPI3REF: Opening A New Database Connection {H12700} <S40200>
20545: **
20545: ** These routines open an SQLite database file whose name is given by the
20545: ** filename argument. The filename argument is interpreted as UTF-8 for
20545: ** sqlite3_open() and sqlite3_open_v2() and as UTF-16 in the native byte
20545: ** order for sqlite3_open16(). A [database connection] handle is usually
20545: ** returned in *ppDb, even if an error occurs.  The only exception is that
20545: ** if SQLite is unable to allocate memory to hold the [sqlite3] object,
20545: ** a NULL will be written into *ppDb instead of a pointer to the [sqlite3]
20545: ** object. If the database is opened (and/or created) successfully, then
20545: ** [SQLITE_OK] is returned.  Otherwise an [error code] is returned.  The
20545: ** [sqlite3_errmsg()] or [sqlite3_errmsg16()] routines can be used to obtain
20545: ** an English language description of the error.
20545: **
20545: ** The default encoding for the database will be UTF-8 if
20545: ** sqlite3_open() or sqlite3_open_v2() is called and
20545: ** UTF-16 in the native byte order if sqlite3_open16() is used.
20545: **
20545: ** Whether or not an error occurs when it is opened, resources
20545: ** associated with the [database connection] handle should be released by
20545: ** passing it to [sqlite3_close()] when it is no longer required.
20545: **
20545: ** The sqlite3_open_v2() interface works like sqlite3_open()
20545: ** except that it accepts two additional parameters for additional control
20545: ** over the new database connection.  The flags parameter can take one of
20545: ** the following three values, optionally combined with the 
34100: ** [SQLITE_OPEN_NOMUTEX] or [SQLITE_OPEN_FULLMUTEX] flags:
20545: **
20545: ** <dl>
20545: ** <dt>[SQLITE_OPEN_READONLY]</dt>
20545: ** <dd>The database is opened in read-only mode.  If the database does not
20545: ** already exist, an error is returned.</dd>
20545: **
20545: ** <dt>[SQLITE_OPEN_READWRITE]</dt>
20545: ** <dd>The database is opened for reading and writing if possible, or reading
20545: ** only if the file is write protected by the operating system.  In either
20545: ** case the database must already exist, otherwise an error is returned.</dd>
20545: **
20545: ** <dt>[SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]</dt>
20545: ** <dd>The database is opened for reading and writing, and is creates it if
20545: ** it does not already exist. This is the behavior that is always used for
20545: ** sqlite3_open() and sqlite3_open16().</dd>
20545: ** </dl>
20545: **
20545: ** If the 3rd parameter to sqlite3_open_v2() is not one of the
20545: ** combinations shown above or one of the combinations shown above combined
34100: ** with the [SQLITE_OPEN_NOMUTEX] or [SQLITE_OPEN_FULLMUTEX] flags,
20545: ** then the behavior is undefined.
20545: **
20545: ** If the [SQLITE_OPEN_NOMUTEX] flag is set, then the database connection
20545: ** opens in the multi-thread [threading mode] as long as the single-thread
20545: ** mode has not been set at compile-time or start-time.  If the
20545: ** [SQLITE_OPEN_FULLMUTEX] flag is set then the database connection opens
20545: ** in the serialized [threading mode] unless single-thread was
20545: ** previously selected at compile-time or start-time.
20545: **
20545: ** If the filename is ":memory:", then a private, temporary in-memory database
20545: ** is created for the connection.  This in-memory database will vanish when
20545: ** the database connection is closed.  Future versions of SQLite might
20545: ** make use of additional special filenames that begin with the ":" character.
20545: ** It is recommended that when a database filename actually does begin with
20545: ** a ":" character you should prefix the filename with a pathname such as
20545: ** "./" to avoid ambiguity.
20545: **
20545: ** If the filename is an empty string, then a private, temporary
20545: ** on-disk database will be created.  This private database will be
20545: ** automatically deleted as soon as the database connection is closed.
20545: **
20545: ** The fourth parameter to sqlite3_open_v2() is the name of the
20545: ** [sqlite3_vfs] object that defines the operating system interface that
20545: ** the new database connection should use.  If the fourth parameter is
20545: ** a NULL pointer then the default [sqlite3_vfs] object is used.
20545: **
20545: ** <b>Note to Windows users:</b>  The encoding used for the filename argument
20545: ** of sqlite3_open() and sqlite3_open_v2() must be UTF-8, not whatever
20545: ** codepage is currently defined.  Filenames containing international
20545: ** characters must be converted to UTF-8 prior to passing them into
20545: ** sqlite3_open() or sqlite3_open_v2().
20545: **
29099: ** Requirements:
29099: ** [H12701] [H12702] [H12703] [H12704] [H12706] [H12707] [H12709] [H12711]
29099: ** [H12712] [H12713] [H12714] [H12717] [H12719] [H12721] [H12723]
    1: */
34100: int sqlite3_open(
    1:   const char *filename,   /* Database filename (UTF-8) */
    1:   sqlite3 **ppDb          /* OUT: SQLite db handle */
    1: );
34100: int sqlite3_open16(
    1:   const void *filename,   /* Database filename (UTF-16) */
    1:   sqlite3 **ppDb          /* OUT: SQLite db handle */
    1: );
34100: int sqlite3_open_v2(
10178:   const char *filename,   /* Database filename (UTF-8) */
10178:   sqlite3 **ppDb,         /* OUT: SQLite db handle */
10178:   int flags,              /* Flags */
10178:   const char *zVfs        /* Name of VFS module to use */
10178: );
    1: 
    1: /*
20545: ** CAPI3REF: Error Codes And Messages {H12800} <S60200>
20545: **
20545: ** The sqlite3_errcode() interface returns the numeric [result code] or
20545: ** [extended result code] for the most recent failed sqlite3_* API call
20545: ** associated with a [database connection]. If a prior API call failed
20545: ** but the most recent API call succeeded, the return value from
22150: ** sqlite3_errcode() is undefined.  The sqlite3_extended_errcode()
22150: ** interface is the same except that it always returns the 
22150: ** [extended result code] even when extended result codes are
22150: ** disabled.
20545: **
20545: ** The sqlite3_errmsg() and sqlite3_errmsg16() return English-language
20545: ** text that describes the error, as either UTF-8 or UTF-16 respectively.
20545: ** Memory to hold the error message string is managed internally.
20545: ** The application does not need to worry about freeing the result.
20545: ** However, the error string might be overwritten or deallocated by
20545: ** subsequent calls to other SQLite interface functions.
20545: **
22150: ** When the serialized [threading mode] is in use, it might be the
22150: ** case that a second error occurs on a separate thread in between
22150: ** the time of the first error and the call to these interfaces.
22150: ** When that happens, the second error will be reported since these
22150: ** interfaces always report the most recent result.  To avoid
22150: ** this, each thread can obtain exclusive use of the [database connection] D
22150: ** by invoking [sqlite3_mutex_enter]([sqlite3_db_mutex](D)) before beginning
22150: ** to use D and invoking [sqlite3_mutex_leave]([sqlite3_db_mutex](D)) after
22150: ** all calls to the interfaces listed here are completed.
22150: **
20545: ** If an interface fails with SQLITE_MISUSE, that means the interface
20545: ** was invoked incorrectly by the application.  In that case, the
20545: ** error code and message may or may not be set.
20545: **
29099: ** Requirements:
29099: ** [H12801] [H12802] [H12803] [H12807] [H12808] [H12809]
    1: */
34100: int sqlite3_errcode(sqlite3 *db);
34100: int sqlite3_extended_errcode(sqlite3 *db);
34100: const char *sqlite3_errmsg(sqlite3*);
34100: const void *sqlite3_errmsg16(sqlite3*);
    1: 
    1: /*
20545: ** CAPI3REF: SQL Statement Object {H13000} <H13010>
20545: ** KEYWORDS: {prepared statement} {prepared statements}
20545: **
20545: ** An instance of this object represents a single SQL statement.
20545: ** This object is variously known as a "prepared statement" or a
 4159: ** "compiled SQL statement" or simply as a "statement".
 4159: **
 4159: ** The life of a statement object goes something like this:
 4159: **
 4159: ** <ol>
 4159: ** <li> Create the object using [sqlite3_prepare_v2()] or a related
 4159: **      function.
20545: ** <li> Bind values to [host parameters] using the sqlite3_bind_*()
20545: **      interfaces.
 4159: ** <li> Run the SQL by calling [sqlite3_step()] one or more times.
 4159: ** <li> Reset the statement using [sqlite3_reset()] then go back
 4159: **      to step 2.  Do this zero or more times.
 4159: ** <li> Destroy the object using [sqlite3_finalize()].
 4159: ** </ol>
 4159: **
 4159: ** Refer to documentation on individual methods above for additional
 4159: ** information.
    1: */
    1: typedef struct sqlite3_stmt sqlite3_stmt;
    1: 
    1: /*
20545: ** CAPI3REF: Run-time Limits {H12760} <S20600>
20545: **
20545: ** This interface allows the size of various constructs to be limited
20545: ** on a connection by connection basis.  The first parameter is the
20545: ** [database connection] whose limit is to be set or queried.  The
20545: ** second parameter is one of the [limit categories] that define a
20545: ** class of constructs to be size limited.  The third parameter is the
20545: ** new limit for that construct.  The function returns the old limit.
20545: **
20545: ** If the new limit is a negative number, the limit is unchanged.
29099: ** For the limit category of SQLITE_LIMIT_XYZ there is a 
29099: ** [limits | hard upper bound]
29099: ** set by a compile-time C preprocessor macro named 
29099: ** [limits | SQLITE_MAX_XYZ].
20545: ** (The "_LIMIT_" in the name is changed to "_MAX_".)
20545: ** Attempts to increase a limit above its hard upper bound are
20545: ** silently truncated to the hard upper limit.
20545: **
20545: ** Run time limits are intended for use in applications that manage
20545: ** both their own internal database and also databases that are controlled
20545: ** by untrusted external sources.  An example application might be a
20545: ** web browser that has its own databases for storing history and
20545: ** separate databases controlled by JavaScript applications downloaded
20545: ** off the Internet.  The internal databases can be given the
20545: ** large, default limits.  Databases managed by external sources can
20545: ** be given much smaller limits designed to prevent a denial of service
20545: ** attack.  Developers might also want to use the [sqlite3_set_authorizer()]
20545: ** interface to further control untrusted SQL.  The size of the database
20545: ** created by an untrusted script can be contained using the
20545: ** [max_page_count] [PRAGMA].
20545: **
20545: ** New run-time limit categories may be added in future releases.
20545: **
29099: ** Requirements:
29099: ** [H12762] [H12766] [H12769]
20545: */
34100: int sqlite3_limit(sqlite3*, int id, int newVal);
20545: 
20545: /*
20545: ** CAPI3REF: Run-Time Limit Categories {H12790} <H12760>
20545: ** KEYWORDS: {limit category} {limit categories}
20545: **
29099: ** These constants define various performance limits
29099: ** that can be lowered at run-time using [sqlite3_limit()].
29099: ** The synopsis of the meanings of the various limits is shown below.
29099: ** Additional information is available at [limits | Limits in SQLite].
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_LIMIT_LENGTH</dt>
20545: ** <dd>The maximum size of any string or BLOB or table row.<dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_SQL_LENGTH</dt>
20545: ** <dd>The maximum length of an SQL statement.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_COLUMN</dt>
20545: ** <dd>The maximum number of columns in a table definition or in the
29099: ** result set of a [SELECT] or the maximum number of columns in an index
20545: ** or in an ORDER BY or GROUP BY clause.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_EXPR_DEPTH</dt>
20545: ** <dd>The maximum depth of the parse tree on any expression.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_COMPOUND_SELECT</dt>
20545: ** <dd>The maximum number of terms in a compound SELECT statement.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_VDBE_OP</dt>
20545: ** <dd>The maximum number of instructions in a virtual machine program
20545: ** used to implement an SQL statement.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_FUNCTION_ARG</dt>
20545: ** <dd>The maximum number of arguments on a function.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_ATTACHED</dt>
29099: ** <dd>The maximum number of [ATTACH | attached databases].</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_LIKE_PATTERN_LENGTH</dt>
29099: ** <dd>The maximum length of the pattern argument to the [LIKE] or
29099: ** [GLOB] operators.</dd>
20545: **
20545: ** <dt>SQLITE_LIMIT_VARIABLE_NUMBER</dt>
20545: ** <dd>The maximum number of variables in an SQL statement that can
20545: ** be bound.</dd>
20545: ** </dl>
20545: */
20545: #define SQLITE_LIMIT_LENGTH                    0
20545: #define SQLITE_LIMIT_SQL_LENGTH                1
20545: #define SQLITE_LIMIT_COLUMN                    2
20545: #define SQLITE_LIMIT_EXPR_DEPTH                3
20545: #define SQLITE_LIMIT_COMPOUND_SELECT           4
20545: #define SQLITE_LIMIT_VDBE_OP                   5
20545: #define SQLITE_LIMIT_FUNCTION_ARG              6
20545: #define SQLITE_LIMIT_ATTACHED                  7
20545: #define SQLITE_LIMIT_LIKE_PATTERN_LENGTH       8
20545: #define SQLITE_LIMIT_VARIABLE_NUMBER           9
20545: 
20545: /*
20545: ** CAPI3REF: Compiling An SQL Statement {H13010} <S10000>
20545: ** KEYWORDS: {SQL statement compiler}
 4159: **
    1: ** To execute an SQL query, it must first be compiled into a byte-code
 4159: ** program using one of these routines.
    1: **
20545: ** The first argument, "db", is a [database connection] obtained from a
29099: ** prior successful call to [sqlite3_open()], [sqlite3_open_v2()] or
29099: ** [sqlite3_open16()].  The database connection must not have been closed.
20545: **
20545: ** The second argument, "zSql", is the statement to be compiled, encoded
 4159: ** as either UTF-8 or UTF-16.  The sqlite3_prepare() and sqlite3_prepare_v2()
20545: ** interfaces use UTF-8, and sqlite3_prepare16() and sqlite3_prepare16_v2()
20545: ** use UTF-16.
20545: **
20545: ** If the nByte argument is less than zero, then zSql is read up to the
20545: ** first zero terminator. If nByte is non-negative, then it is the maximum
20545: ** number of  bytes read from zSql.  When nByte is non-negative, the
10178: ** zSql string ends at either the first '\000' or '\u0000' character or
20545: ** the nByte-th byte, whichever comes first. If the caller knows
20545: ** that the supplied string is nul-terminated, then there is a small
20545: ** performance advantage to be gained by passing an nByte parameter that
20545: ** is equal to the number of bytes in the input string <i>including</i>
20545: ** the nul-terminator bytes.
20545: **
29099: ** If pzTail is not NULL then *pzTail is made to point to the first byte
29099: ** past the end of the first SQL statement in zSql.  These routines only
29099: ** compile the first statement in zSql, so *pzTail is left pointing to
29099: ** what remains uncompiled.
20545: **
20545: ** *ppStmt is left pointing to a compiled [prepared statement] that can be
20545: ** executed using [sqlite3_step()].  If there is an error, *ppStmt is set
20545: ** to NULL.  If the input text contains no SQL (if the input is an empty
20545: ** string or a comment) then *ppStmt is set to NULL.
29099: ** The calling procedure is responsible for deleting the compiled
20545: ** SQL statement using [sqlite3_finalize()] after it has finished with it.
29099: ** ppStmt may not be NULL.
20545: **
20545: ** On success, [SQLITE_OK] is returned, otherwise an [error code] is returned.
 4159: **
 4159: ** The sqlite3_prepare_v2() and sqlite3_prepare16_v2() interfaces are
 4159: ** recommended for all new programs. The two older interfaces are retained
 4159: ** for backwards compatibility, but their use is discouraged.
20545: ** In the "v2" interfaces, the prepared statement
 4159: ** that is returned (the [sqlite3_stmt] object) contains a copy of the
20545: ** original SQL text. This causes the [sqlite3_step()] interface to
 4159: ** behave a differently in two ways:
 4159: **
 4159: ** <ol>
20545: ** <li>
 4159: ** If the database schema changes, instead of returning [SQLITE_SCHEMA] as it
 4159: ** always used to do, [sqlite3_step()] will automatically recompile the SQL
20545: ** statement and try to run it again.  If the schema has changed in
10178: ** a way that makes the statement no longer valid, [sqlite3_step()] will still
20545: ** return [SQLITE_SCHEMA].  But unlike the legacy behavior, [SQLITE_SCHEMA] is
20545: ** now a fatal error.  Calling [sqlite3_prepare_v2()] again will not make the
20545: ** error go away.  Note: use [sqlite3_errmsg()] to find the text
20545: ** of the parsing error that results in an [SQLITE_SCHEMA] return.
 4159: ** </li>
 4159: **
 4159: ** <li>
20545: ** When an error occurs, [sqlite3_step()] will return one of the detailed
20545: ** [error codes] or [extended error codes].  The legacy behavior was that
20545: ** [sqlite3_step()] would only return a generic [SQLITE_ERROR] result code
20545: ** and you would have to make a second call to [sqlite3_reset()] in order
20545: ** to find the underlying cause of the problem. With the "v2" prepare
20545: ** interfaces, the underlying reason for the error is returned immediately.
 4159: ** </li>
 4159: ** </ol>
20545: **
29099: ** Requirements:
29099: ** [H13011] [H13012] [H13013] [H13014] [H13015] [H13016] [H13019] [H13021]
29099: **
    1: */
34100: int sqlite3_prepare(
    1:   sqlite3 *db,            /* Database handle */
    1:   const char *zSql,       /* SQL statement, UTF-8 encoded */
 4159:   int nByte,              /* Maximum length of zSql in bytes. */
 4159:   sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
 4159:   const char **pzTail     /* OUT: Pointer to unused portion of zSql */
 4159: );
34100: int sqlite3_prepare_v2(
 4159:   sqlite3 *db,            /* Database handle */
 4159:   const char *zSql,       /* SQL statement, UTF-8 encoded */
 4159:   int nByte,              /* Maximum length of zSql in bytes. */
    1:   sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
    1:   const char **pzTail     /* OUT: Pointer to unused portion of zSql */
    1: );
34100: int sqlite3_prepare16(
    1:   sqlite3 *db,            /* Database handle */
    1:   const void *zSql,       /* SQL statement, UTF-16 encoded */
 4159:   int nByte,              /* Maximum length of zSql in bytes. */
 4159:   sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
 4159:   const void **pzTail     /* OUT: Pointer to unused portion of zSql */
 4159: );
34100: int sqlite3_prepare16_v2(
 4159:   sqlite3 *db,            /* Database handle */
 4159:   const void *zSql,       /* SQL statement, UTF-16 encoded */
 4159:   int nByte,              /* Maximum length of zSql in bytes. */
    1:   sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
    1:   const void **pzTail     /* OUT: Pointer to unused portion of zSql */
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Retrieving Statement SQL {H13100} <H13000>
20545: **
20545: ** This interface can be used to retrieve a saved copy of the original
20545: ** SQL text used to create a [prepared statement] if that statement was
20545: ** compiled using either [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()].
20545: **
29099: ** Requirements:
29099: ** [H13101] [H13102] [H13103]
10178: */
34100: const char *sqlite3_sql(sqlite3_stmt *pStmt);
10178: 
10178: /*
20545: ** CAPI3REF: Dynamically Typed Value Object {H15000} <S20200>
20545: ** KEYWORDS: {protected sqlite3_value} {unprotected sqlite3_value}
20545: **
20545: ** SQLite uses the sqlite3_value object to represent all values
20545: ** that can be stored in a database table. SQLite uses dynamic typing
20545: ** for the values it stores. Values stored in sqlite3_value objects
20545: ** can be integers, floating point values, strings, BLOBs, or NULL.
20545: **
20545: ** An sqlite3_value object may be either "protected" or "unprotected".
20545: ** Some interfaces require a protected sqlite3_value.  Other interfaces
20545: ** will accept either a protected or an unprotected sqlite3_value.
20545: ** Every interface that accepts sqlite3_value arguments specifies
20545: ** whether or not it requires a protected sqlite3_value.
20545: **
20545: ** The terms "protected" and "unprotected" refer to whether or not
20545: ** a mutex is held.  A internal mutex is held for a protected
20545: ** sqlite3_value object but no mutex is held for an unprotected
20545: ** sqlite3_value object.  If SQLite is compiled to be single-threaded
20545: ** (with [SQLITE_THREADSAFE=0] and with [sqlite3_threadsafe()] returning 0)
20545: ** or if SQLite is run in one of reduced mutex modes 
20545: ** [SQLITE_CONFIG_SINGLETHREAD] or [SQLITE_CONFIG_MULTITHREAD]
20545: ** then there is no distinction between protected and unprotected
20545: ** sqlite3_value objects and they can be used interchangeably.  However,
20545: ** for maximum code portability it is recommended that applications
20545: ** still make the distinction between between protected and unprotected
20545: ** sqlite3_value objects even when not strictly required.
20545: **
20545: ** The sqlite3_value objects that are passed as parameters into the
20545: ** implementation of [application-defined SQL functions] are protected.
20545: ** The sqlite3_value object returned by
20545: ** [sqlite3_column_value()] is unprotected.
20545: ** Unprotected sqlite3_value objects may only be used with
20545: ** [sqlite3_result_value()] and [sqlite3_bind_value()].
20545: ** The [sqlite3_value_blob | sqlite3_value_type()] family of
20545: ** interfaces require protected sqlite3_value objects.
 2623: */
    1: typedef struct Mem sqlite3_value;
    1: 
    1: /*
20545: ** CAPI3REF: SQL Function Context Object {H16001} <S20200>
    1: **
 4159: ** The context in which an SQL function executes is stored in an
20545: ** sqlite3_context object.  A pointer to an sqlite3_context object
20545: ** is always first parameter to [application-defined SQL functions].
20545: ** The application-defined SQL function implementation will pass this
20545: ** pointer through into calls to [sqlite3_result_int | sqlite3_result()],
20545: ** [sqlite3_aggregate_context()], [sqlite3_user_data()],
20545: ** [sqlite3_context_db_handle()], [sqlite3_get_auxdata()],
20545: ** and/or [sqlite3_set_auxdata()].
 4159: */
 4159: typedef struct sqlite3_context sqlite3_context;
 4159: 
 4159: /*
20545: ** CAPI3REF: Binding Values To Prepared Statements {H13500} <S70300>
20545: ** KEYWORDS: {host parameter} {host parameters} {host parameter name}
20545: ** KEYWORDS: {SQL parameter} {SQL parameters} {parameter binding}
20545: **
20545: ** In the SQL strings input to [sqlite3_prepare_v2()] and its variants,
34100: ** literals may be replaced by a [parameter] in one of these forms:
 4159: **
 4159: ** <ul>
 4159: ** <li>  ?
 4159: ** <li>  ?NNN
20545: ** <li>  :VVV
20545: ** <li>  @VVV
 4159: ** <li>  $VVV
 4159: ** </ul>
 4159: **
34100: ** In the parameter forms shown above NNN is an integer literal,
34100: ** and VVV is an alpha-numeric parameter name. The values of these
20545: ** parameters (also called "host parameter names" or "SQL parameters")
 4159: ** can be set using the sqlite3_bind_*() routines defined here.
 4159: **
20545: ** The first argument to the sqlite3_bind_*() routines is always
20545: ** a pointer to the [sqlite3_stmt] object returned from
20545: ** [sqlite3_prepare_v2()] or its variants.
20545: **
20545: ** The second argument is the index of the SQL parameter to be set.
20545: ** The leftmost SQL parameter has an index of 1.  When the same named
20545: ** SQL parameter is used more than once, second and subsequent
10178: ** occurrences have the same index as the first occurrence.
20545: ** The index for named parameters can be looked up using the
20545: ** [sqlite3_bind_parameter_index()] API if desired.  The index
10178: ** for "?NNN" parameters is the value of NNN.
20545: ** The NNN value must be between 1 and the [sqlite3_limit()]
20545: ** parameter [SQLITE_LIMIT_VARIABLE_NUMBER] (default value: 999).
20545: **
20545: ** The third argument is the value to bind to the parameter.
20545: **
20545: ** In those routines that have a fourth argument, its value is the
20545: ** number of bytes in the parameter.  To be clear: the value is the
20545: ** number of <u>bytes</u> in the value, not the number of characters.
 4159: ** If the fourth parameter is negative, the length of the string is
20545: ** the number of bytes up to the first zero terminator.
20545: **
 2623: ** The fifth argument to sqlite3_bind_blob(), sqlite3_bind_text(), and
    1: ** sqlite3_bind_text16() is a destructor used to dispose of the BLOB or
20545: ** string after SQLite has finished with it. If the fifth argument is
20545: ** the special value [SQLITE_STATIC], then SQLite assumes that the
10178: ** information is in static, unmanaged space and does not need to be freed.
20545: ** If the fifth argument has the value [SQLITE_TRANSIENT], then
10178: ** SQLite makes its own private copy of the data immediately, before
20545: ** the sqlite3_bind_*() routine returns.
20545: **
20545: ** The sqlite3_bind_zeroblob() routine binds a BLOB of length N that
20545: ** is filled with zeroes.  A zeroblob uses a fixed amount of memory
20545: ** (just an integer to hold its size) while it is being processed.
20545: ** Zeroblobs are intended to serve as placeholders for BLOBs whose
 4159: ** content is later written using
20545: ** [sqlite3_blob_open | incremental BLOB I/O] routines.
20545: ** A negative value for the zeroblob results in a zero-length BLOB.
20545: **
20545: ** The sqlite3_bind_*() routines must be called after
 4159: ** [sqlite3_prepare_v2()] (and its variants) or [sqlite3_reset()] and
20545: ** before [sqlite3_step()].
 4159: ** Bindings are not cleared by the [sqlite3_reset()] routine.
20545: ** Unbound parameters are interpreted as NULL.
20545: **
20545: ** These routines return [SQLITE_OK] on success or an error code if
20545: ** anything goes wrong.  [SQLITE_RANGE] is returned if the parameter
20545: ** index is out of range.  [SQLITE_NOMEM] is returned if malloc() fails.
20545: ** [SQLITE_MISUSE] might be returned if these routines are called on a
10178: ** virtual machine that is the wrong state or which has already been finalized.
20545: ** Detection of misuse is unreliable.  Applications should not depend
20545: ** on SQLITE_MISUSE returns.  SQLITE_MISUSE is intended to indicate a
20545: ** a logic error in the application.  Future versions of SQLite might
20545: ** panic rather than return SQLITE_MISUSE.
20545: **
20545: ** See also: [sqlite3_bind_parameter_count()],
20545: ** [sqlite3_bind_parameter_name()], and [sqlite3_bind_parameter_index()].
20545: **
29099: ** Requirements:
29099: ** [H13506] [H13509] [H13512] [H13515] [H13518] [H13521] [H13524] [H13527]
29099: ** [H13530] [H13533] [H13536] [H13539] [H13542] [H13545] [H13548] [H13551]
29099: **
    1: */
34100: int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));
34100: int sqlite3_bind_double(sqlite3_stmt*, int, double);
34100: int sqlite3_bind_int(sqlite3_stmt*, int, int);
34100: int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);
34100: int sqlite3_bind_null(sqlite3_stmt*, int);
34100: int sqlite3_bind_text(sqlite3_stmt*, int, const char*, int n, void(*)(void*));
34100: int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));
34100: int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);
34100: int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);
    1: 
    1: /*
20545: ** CAPI3REF: Number Of SQL Parameters {H13600} <S70300>
20545: **
20545: ** This routine can be used to find the number of [SQL parameters]
20545: ** in a [prepared statement].  SQL parameters are tokens of the
20545: ** form "?", "?NNN", ":AAA", "$AAA", or "@AAA" that serve as
20545: ** placeholders for values that are [sqlite3_bind_blob | bound]
20545: ** to the parameters at a later time.
20545: **
20545: ** This routine actually returns the index of the largest (rightmost)
20545: ** parameter. For all forms except ?NNN, this will correspond to the
20545: ** number of unique parameters.  If parameters of the ?NNN are used,
20545: ** there may be gaps in the list.
20545: **
20545: ** See also: [sqlite3_bind_blob|sqlite3_bind()],
20545: ** [sqlite3_bind_parameter_name()], and
20545: ** [sqlite3_bind_parameter_index()].
20545: **
29099: ** Requirements:
29099: ** [H13601]
    1: */
34100: int sqlite3_bind_parameter_count(sqlite3_stmt*);
    1: 
    1: /*
20545: ** CAPI3REF: Name Of A Host Parameter {H13620} <S70300>
20545: **
20545: ** This routine returns a pointer to the name of the n-th
20545: ** [SQL parameter] in a [prepared statement].
20545: ** SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA"
20545: ** have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA"
20545: ** respectively.
20545: ** In other words, the initial ":" or "$" or "@" or "?"
20545: ** is included as part of the name.
20545: ** Parameters of the form "?" without a following integer have no name
20545: ** and are also referred to as "anonymous parameters".
20545: **
20545: ** The first host parameter has an index of 1, not 0.
20545: **
20545: ** If the value n is out of range or if the n-th parameter is
20545: ** nameless, then NULL is returned.  The returned string is
20545: ** always in UTF-8 encoding even if the named parameter was
10178: ** originally specified as UTF-16 in [sqlite3_prepare16()] or
10178: ** [sqlite3_prepare16_v2()].
20545: **
20545: ** See also: [sqlite3_bind_blob|sqlite3_bind()],
20545: ** [sqlite3_bind_parameter_count()], and
20545: ** [sqlite3_bind_parameter_index()].
20545: **
29099: ** Requirements:
29099: ** [H13621]
    1: */
34100: const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);
    1: 
    1: /*
20545: ** CAPI3REF: Index Of A Parameter With A Given Name {H13640} <S70300>
20545: **
20545: ** Return the index of an SQL parameter given its name.  The
20545: ** index value returned is suitable for use as the second
20545: ** parameter to [sqlite3_bind_blob|sqlite3_bind()].  A zero
20545: ** is returned if no matching parameter is found.  The parameter
20545: ** name must be given in UTF-8 even if the original statement
20545: ** was prepared from UTF-16 text using [sqlite3_prepare16_v2()].
20545: **
20545: ** See also: [sqlite3_bind_blob|sqlite3_bind()],
20545: ** [sqlite3_bind_parameter_count()], and
20545: ** [sqlite3_bind_parameter_index()].
20545: **
29099: ** Requirements:
29099: ** [H13641]
    1: */
34100: int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);
    1: 
    1: /*
20545: ** CAPI3REF: Reset All Bindings On A Prepared Statement {H13660} <S70300>
20545: **
20545: ** Contrary to the intuition of many, [sqlite3_reset()] does not reset
20545: ** the [sqlite3_bind_blob | bindings] on a [prepared statement].
20545: ** Use this routine to reset all host parameters to NULL.
20545: **
29099: ** Requirements:
29099: ** [H13661]
    1: */
34100: int sqlite3_clear_bindings(sqlite3_stmt*);
    1: 
    1: /*
20545: ** CAPI3REF: Number Of Columns In A Result Set {H13710} <S10700>
20545: **
20545: ** Return the number of columns in the result set returned by the
20545: ** [prepared statement]. This routine returns 0 if pStmt is an SQL
20545: ** statement that does not return data (for example an [UPDATE]).
20545: **
29099: ** Requirements:
29099: ** [H13711]
    1: */
34100: int sqlite3_column_count(sqlite3_stmt *pStmt);
    1: 
    1: /*
20545: ** CAPI3REF: Column Names In A Result Set {H13720} <S10700>
20545: **
20545: ** These routines return the name assigned to a particular column
20545: ** in the result set of a [SELECT] statement.  The sqlite3_column_name()
20545: ** interface returns a pointer to a zero-terminated UTF-8 string
10178: ** and sqlite3_column_name16() returns a pointer to a zero-terminated
20545: ** UTF-16 string.  The first parameter is the [prepared statement]
20545: ** that implements the [SELECT] statement. The second parameter is the
20545: ** column number.  The leftmost column is number 0.
20545: **
20545: ** The returned string pointer is valid until either the [prepared statement]
20545: ** is destroyed by [sqlite3_finalize()] or until the next call to
20545: ** sqlite3_column_name() or sqlite3_column_name16() on the same column.
20545: **
20545: ** If sqlite3_malloc() fails during the processing of either routine
10178: ** (for example during a conversion from UTF-8 to UTF-16) then a
10178: ** NULL pointer is returned.
20545: **
20545: ** The name of a result column is the value of the "AS" clause for
20545: ** that column, if there is an AS clause.  If there is no AS clause
20545: ** then the name of the column is unspecified and may change from
20545: ** one release of SQLite to the next.
20545: **
29099: ** Requirements:
29099: ** [H13721] [H13723] [H13724] [H13725] [H13726] [H13727]
    1: */
34100: const char *sqlite3_column_name(sqlite3_stmt*, int N);
34100: const void *sqlite3_column_name16(sqlite3_stmt*, int N);
    1: 
    1: /*
20545: ** CAPI3REF: Source Of Data In A Query Result {H13740} <S10700>
20545: **
20545: ** These routines provide a means to determine what column of what
20545: ** table in which database a result of a [SELECT] statement comes from.
20545: ** The name of the database or table or column can be returned as
20545: ** either a UTF-8 or UTF-16 string.  The _database_ routines return
 4159: ** the database name, the _table_ routines return the table name, and
20545: ** the origin_ routines return the column name.
20545: ** The returned string is valid until the [prepared statement] is destroyed
20545: ** using [sqlite3_finalize()] or until the same information is requested
 4159: ** again in a different encoding.
 4159: **
20545: ** The names returned are the original un-aliased names of the
 4159: ** database, table, and column.
 4159: **
20545: ** The first argument to the following calls is a [prepared statement].
20545: ** These functions return information about the Nth column returned by
    1: ** the statement, where N is the second function argument.
    1: **
20545: ** If the Nth column returned by the statement is an expression or
20545: ** subquery and is not a column value, then all of these functions return
20545: ** NULL.  These routine might also return NULL if a memory allocation error
20545: ** occurs.  Otherwise, they return the name of the attached database, table
20545: ** and column that query result column was extracted from.
20545: **
20545: ** As with all other SQLite APIs, those postfixed with "16" return
10178: ** UTF-16 encoded strings, the other functions return UTF-8. {END}
    1: **
    1: ** These APIs are only available if the library was compiled with the
20545: ** [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol defined.
20545: **
20545: ** {A13751}
10178: ** If two or more threads call one or more of these routines against the same
10178: ** prepared statement and column at the same time then the results are
10178: ** undefined.
20545: **
29099: ** Requirements:
29099: ** [H13741] [H13742] [H13743] [H13744] [H13745] [H13746] [H13748]
29099: **
29099: ** If two or more threads call one or more
20545: ** [sqlite3_column_database_name | column metadata interfaces]
20545: ** for the same [prepared statement] and result column
20545: ** at the same time then the results are undefined.
    1: */
34100: const char *sqlite3_column_database_name(sqlite3_stmt*,int);
34100: const void *sqlite3_column_database_name16(sqlite3_stmt*,int);
34100: const char *sqlite3_column_table_name(sqlite3_stmt*,int);
34100: const void *sqlite3_column_table_name16(sqlite3_stmt*,int);
34100: const char *sqlite3_column_origin_name(sqlite3_stmt*,int);
34100: const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);
    1: 
    1: /*
20545: ** CAPI3REF: Declared Datatype Of A Query Result {H13760} <S10700>
20545: **
20545: ** The first parameter is a [prepared statement].
20545: ** If this statement is a [SELECT] statement and the Nth column of the
20545: ** returned result set of that [SELECT] is a table column (not an
 4159: ** expression or subquery) then the declared type of the table
20545: ** column is returned.  If the Nth column of the result set is an
 4159: ** expression or subquery, then a NULL pointer is returned.
20545: ** The returned string is always UTF-8 encoded. {END}
20545: **
20545: ** For example, given the database schema:
    1: **
    1: ** CREATE TABLE t1(c1 VARIANT);
    1: **
20545: ** and the following statement to be compiled:
    1: **
    1: ** SELECT c1 + 1, c1 FROM t1;
    1: **
20545: ** this routine would return the string "VARIANT" for the second result
20545: ** column (i==1), and a NULL pointer for the first result column (i==0).
 4159: **
 4159: ** SQLite uses dynamic run-time typing.  So just because a column
 4159: ** is declared to contain a particular type does not mean that the
 4159: ** data stored in that column is of the declared type.  SQLite is
 4159: ** strongly typed, but the typing is dynamic not static.  Type
 4159: ** is associated with individual values, not with the containers
 4159: ** used to hold those values.
20545: **
29099: ** Requirements:
29099: ** [H13761] [H13762] [H13763]
    1: */
34100: const char *sqlite3_column_decltype(sqlite3_stmt*,int);
34100: const void *sqlite3_column_decltype16(sqlite3_stmt*,int);
    1: 
    1: /*
20545: ** CAPI3REF: Evaluate An SQL Statement {H13200} <S10000>
20545: **
20545: ** After a [prepared statement] has been prepared using either
20545: ** [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()] or one of the legacy
20545: ** interfaces [sqlite3_prepare()] or [sqlite3_prepare16()], this function
20545: ** must be called one or more times to evaluate the statement.
20545: **
20545: ** The details of the behavior of the sqlite3_step() interface depend
 4159: ** on whether the statement was prepared using the newer "v2" interface
 4159: ** [sqlite3_prepare_v2()] and [sqlite3_prepare16_v2()] or the older legacy
 4159: ** interface [sqlite3_prepare()] and [sqlite3_prepare16()].  The use of the
 4159: ** new "v2" interface is recommended for new applications but the legacy
 4159: ** interface will continue to be supported.
    1: **
20545: ** In the legacy interface, the return value will be either [SQLITE_BUSY],
 4159: ** [SQLITE_DONE], [SQLITE_ROW], [SQLITE_ERROR], or [SQLITE_MISUSE].
20545: ** With the "v2" interface, any of the other [result codes] or
20545: ** [extended result codes] might be returned as well.
 4159: **
 4159: ** [SQLITE_BUSY] means that the database engine was unable to acquire the
20545: ** database locks it needs to do its job.  If the statement is a [COMMIT]
 4159: ** or occurs outside of an explicit transaction, then you can retry the
20545: ** statement.  If the statement is not a [COMMIT] and occurs within a
 4159: ** explicit transaction then you should rollback the transaction before
 4159: ** continuing.
 4159: **
 4159: ** [SQLITE_DONE] means that the statement has finished executing
    1: ** successfully.  sqlite3_step() should not be called again on this virtual
 4159: ** machine without first calling [sqlite3_reset()] to reset the virtual
 4159: ** machine back to its initial state.
    1: **
20545: ** If the SQL statement being executed returns any data, then [SQLITE_ROW]
20545: ** is returned each time a new row of data is ready for processing by the
20545: ** caller. The values may be accessed using the [column access functions].
 4159: ** sqlite3_step() is called again to retrieve the next row of data.
    1: **
 4159: ** [SQLITE_ERROR] means that a run-time error (such as a constraint
    1: ** violation) has occurred.  sqlite3_step() should not be called again on
 4159: ** the VM. More information may be found by calling [sqlite3_errmsg()].
20545: ** With the legacy interface, a more specific error code (for example,
 4159: ** [SQLITE_INTERRUPT], [SQLITE_SCHEMA], [SQLITE_CORRUPT], and so forth)
 4159: ** can be obtained by calling [sqlite3_reset()] on the
20545: ** [prepared statement].  In the "v2" interface,
 4159: ** the more specific error code is returned directly by sqlite3_step().
    1: **
 4159: ** [SQLITE_MISUSE] means that the this routine was called inappropriately.
20545: ** Perhaps it was called on a [prepared statement] that has
 4159: ** already been [sqlite3_finalize | finalized] or on one that had
 4159: ** previously returned [SQLITE_ERROR] or [SQLITE_DONE].  Or it could
 4159: ** be the case that the same database connection is being used by two or
 4159: ** more threads at the same moment in time.
 4159: **
20545: ** <b>Goofy Interface Alert:</b> In the legacy interface, the sqlite3_step()
20545: ** API always returns a generic error code, [SQLITE_ERROR], following any
20545: ** error other than [SQLITE_BUSY] and [SQLITE_MISUSE].  You must call
20545: ** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the
20545: ** specific [error codes] that better describes the error.
 4159: ** We admit that this is a goofy design.  The problem has been fixed
 4159: ** with the "v2" interface.  If you prepare all of your SQL statements
 4159: ** using either [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()] instead
20545: ** of the legacy [sqlite3_prepare()] and [sqlite3_prepare16()] interfaces,
20545: ** then the more specific [error codes] are returned directly
 4159: ** by sqlite3_step().  The use of the "v2" interface is recommended.
20545: **
29099: ** Requirements:
29099: ** [H13202] [H15304] [H15306] [H15308] [H15310]
    1: */
34100: int sqlite3_step(sqlite3_stmt*);
    1: 
    1: /*
20545: ** CAPI3REF: Number of columns in a result set {H13770} <S10700>
20545: **
20545: ** Returns the number of values in the current row of the result set.
20545: **
29099: ** Requirements:
29099: ** [H13771] [H13772]
    1: */
34100: int sqlite3_data_count(sqlite3_stmt *pStmt);
    1: 
    1: /*
20545: ** CAPI3REF: Fundamental Datatypes {H10265} <S10110><S10120>
20545: ** KEYWORDS: SQLITE_TEXT
20545: **
20545: ** {H10266} Every value in SQLite has one of five fundamental datatypes:
 4159: **
 4159: ** <ul>
 4159: ** <li> 64-bit signed integer
 4159: ** <li> 64-bit IEEE floating point number
 4159: ** <li> string
 4159: ** <li> BLOB
 4159: ** <li> NULL
10178: ** </ul> {END}
 4159: **
 4159: ** These constants are codes for each of those types.
 4159: **
 4159: ** Note that the SQLITE_TEXT constant was also used in SQLite version 2
 4159: ** for a completely different meaning.  Software that links against both
20545: ** SQLite version 2 and SQLite version 3 should use SQLITE3_TEXT, not
 4159: ** SQLITE_TEXT.
    1: */
    1: #define SQLITE_INTEGER  1
    1: #define SQLITE_FLOAT    2
    1: #define SQLITE_BLOB     4
    1: #define SQLITE_NULL     5
    1: #ifdef SQLITE_TEXT
    1: # undef SQLITE_TEXT
    1: #else
    1: # define SQLITE_TEXT     3
    1: #endif
    1: #define SQLITE3_TEXT     3
    1: 
    1: /*
20545: ** CAPI3REF: Result Values From A Query {H13800} <S10700>
20545: ** KEYWORDS: {column access functions}
20545: **
20545: ** These routines form the "result set query" interface.
20545: **
20545: ** These routines return information about a single column of the current
20545: ** result row of a query.  In every case the first argument is a pointer
20545: ** to the [prepared statement] that is being evaluated (the [sqlite3_stmt*]
20545: ** that was returned from [sqlite3_prepare_v2()] or one of its variants)
20545: ** and the second argument is the index of the column for which information
20545: ** should be returned.  The leftmost column of the result set has the index 0.
20545: **
20545: ** If the SQL statement does not currently point to a valid row, or if the
20545: ** column index is out of range, the result is undefined.
10178: ** These routines may only be called when the most recent call to
10178: ** [sqlite3_step()] has returned [SQLITE_ROW] and neither
20545: ** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.
10178: ** If any of these routines are called after [sqlite3_reset()] or
10178: ** [sqlite3_finalize()] or after [sqlite3_step()] has returned
10178: ** something other than [SQLITE_ROW], the results are undefined.
10178: ** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]
10178: ** are called from a different thread while any of these routines
10178: ** are pending, then the results are undefined.
 4159: **
20545: ** The sqlite3_column_type() routine returns the
 4159: ** [SQLITE_INTEGER | datatype code] for the initial data type
 4159: ** of the result column.  The returned value is one of [SQLITE_INTEGER],
 4159: ** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].  The value
 4159: ** returned by sqlite3_column_type() is only meaningful if no type
 4159: ** conversions have occurred as described below.  After a type conversion,
 4159: ** the value returned by sqlite3_column_type() is undefined.  Future
 4159: ** versions of SQLite may change the behavior of sqlite3_column_type()
 4159: ** following a type conversion.
 4159: **
 4159: ** If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes()
 4159: ** routine returns the number of bytes in that BLOB or string.
 4159: ** If the result is a UTF-16 string, then sqlite3_column_bytes() converts
 4159: ** the string to UTF-8 and then returns the number of bytes.
 4159: ** If the result is a numeric value then sqlite3_column_bytes() uses
 4159: ** [sqlite3_snprintf()] to convert that value to a UTF-8 string and returns
 4159: ** the number of bytes in that string.
 4159: ** The value returned does not include the zero terminator at the end
 4159: ** of the string.  For clarity: the value returned is the number of
 4159: ** bytes in the string, not the number of characters.
 4159: **
10178: ** Strings returned by sqlite3_column_text() and sqlite3_column_text16(),
20545: ** even empty strings, are always zero terminated.  The return
20545: ** value from sqlite3_column_blob() for a zero-length BLOB is an arbitrary
10178: ** pointer, possibly even a NULL pointer.
10178: **
 4159: ** The sqlite3_column_bytes16() routine is similar to sqlite3_column_bytes()
20545: ** but leaves the result in UTF-16 in native byte order instead of UTF-8.
 4159: ** The zero terminator is not included in this count.
    1: **
20545: ** The object returned by [sqlite3_column_value()] is an
20545: ** [unprotected sqlite3_value] object.  An unprotected sqlite3_value object
20545: ** may only be used with [sqlite3_bind_value()] and [sqlite3_result_value()].
20545: ** If the [unprotected sqlite3_value] object returned by
20545: ** [sqlite3_column_value()] is used in any other way, including calls
20545: ** to routines like [sqlite3_value_int()], [sqlite3_value_text()],
20545: ** or [sqlite3_value_bytes()], then the behavior is undefined.
20545: **
    1: ** These routines attempt to convert the value where appropriate.  For
    1: ** example, if the internal representation is FLOAT and a text result
20545: ** is requested, [sqlite3_snprintf()] is used internally to perform the
20545: ** conversion automatically.  The following table details the conversions
20545: ** that are applied:
    1: **
 4159: ** <blockquote>
 4159: ** <table border="1">
10178: ** <tr><th> Internal<br>Type <th> Requested<br>Type <th>  Conversion
    1: **
 4159: ** <tr><td>  NULL    <td> INTEGER   <td> Result is 0
 4159: ** <tr><td>  NULL    <td>  FLOAT    <td> Result is 0.0
 4159: ** <tr><td>  NULL    <td>   TEXT    <td> Result is NULL pointer
 4159: ** <tr><td>  NULL    <td>   BLOB    <td> Result is NULL pointer
 4159: ** <tr><td> INTEGER  <td>  FLOAT    <td> Convert from integer to float
 4159: ** <tr><td> INTEGER  <td>   TEXT    <td> ASCII rendering of the integer
20545: ** <tr><td> INTEGER  <td>   BLOB    <td> Same as INTEGER->TEXT
 4159: ** <tr><td>  FLOAT   <td> INTEGER   <td> Convert from float to integer
 4159: ** <tr><td>  FLOAT   <td>   TEXT    <td> ASCII rendering of the float
 4159: ** <tr><td>  FLOAT   <td>   BLOB    <td> Same as FLOAT->TEXT
 4159: ** <tr><td>  TEXT    <td> INTEGER   <td> Use atoi()
 4159: ** <tr><td>  TEXT    <td>  FLOAT    <td> Use atof()
 4159: ** <tr><td>  TEXT    <td>   BLOB    <td> No change
 4159: ** <tr><td>  BLOB    <td> INTEGER   <td> Convert to TEXT then use atoi()
 4159: ** <tr><td>  BLOB    <td>  FLOAT    <td> Convert to TEXT then use atof()
 4159: ** <tr><td>  BLOB    <td>   TEXT    <td> Add a zero terminator if needed
 4159: ** </table>
 4159: ** </blockquote>
    1: **
 4159: ** The table above makes reference to standard C library functions atoi()
 4159: ** and atof().  SQLite does not really use these functions.  It has its
20545: ** own equivalent internal routines.  The atoi() and atof() names are
 4159: ** used in the table for brevity and because they are familiar to most
 4159: ** C programmers.
 4159: **
 4159: ** Note that when type conversions occur, pointers returned by prior
 4159: ** calls to sqlite3_column_blob(), sqlite3_column_text(), and/or
 4159: ** sqlite3_column_text16() may be invalidated.
 4159: ** Type conversions and pointer invalidations might occur
 4159: ** in the following cases:
 4159: **
 4159: ** <ul>
20545: ** <li> The initial content is a BLOB and sqlite3_column_text() or
20545: **      sqlite3_column_text16() is called.  A zero-terminator might
20545: **      need to be added to the string.</li>
20545: ** <li> The initial content is UTF-8 text and sqlite3_column_bytes16() or
 4159: **      sqlite3_column_text16() is called.  The content must be converted
20545: **      to UTF-16.</li>
20545: ** <li> The initial content is UTF-16 text and sqlite3_column_bytes() or
 4159: **      sqlite3_column_text() is called.  The content must be converted
20545: **      to UTF-8.</li>
 4159: ** </ul>
 4159: **
 4159: ** Conversions between UTF-16be and UTF-16le are always done in place and do
 4159: ** not invalidate a prior pointer, though of course the content of the buffer
 4159: ** that the prior pointer points to will have been modified.  Other kinds
20545: ** of conversion are done in place when it is possible, but sometimes they
20545: ** are not possible and in those cases prior pointers are invalidated.
 4159: **
 4159: ** The safest and easiest to remember policy is to invoke these routines
 4159: ** in one of the following ways:
 4159: **
 4159: ** <ul>
 4159: **  <li>sqlite3_column_text() followed by sqlite3_column_bytes()</li>
 4159: **  <li>sqlite3_column_blob() followed by sqlite3_column_bytes()</li>
 4159: **  <li>sqlite3_column_text16() followed by sqlite3_column_bytes16()</li>
 4159: ** </ul>
 4159: **
20545: ** In other words, you should call sqlite3_column_text(),
20545: ** sqlite3_column_blob(), or sqlite3_column_text16() first to force the result
20545: ** into the desired format, then invoke sqlite3_column_bytes() or
20545: ** sqlite3_column_bytes16() to find the size of the result.  Do not mix calls
20545: ** to sqlite3_column_text() or sqlite3_column_blob() with calls to
20545: ** sqlite3_column_bytes16(), and do not mix calls to sqlite3_column_text16()
20545: ** with calls to sqlite3_column_bytes().
10178: **
10178: ** The pointers returned are valid until a type conversion occurs as
10178: ** described above, or until [sqlite3_step()] or [sqlite3_reset()] or
10178: ** [sqlite3_finalize()] is called.  The memory space used to hold strings
20545: ** and BLOBs is freed automatically.  Do <b>not</b> pass the pointers returned
10178: ** [sqlite3_column_blob()], [sqlite3_column_text()], etc. into
10178: ** [sqlite3_free()].
10178: **
10178: ** If a memory allocation error occurs during the evaluation of any
10178: ** of these routines, a default value is returned.  The default value
10178: ** is either the integer 0, the floating point number 0.0, or a NULL
10178: ** pointer.  Subsequent calls to [sqlite3_errcode()] will return
10178: ** [SQLITE_NOMEM].
20545: **
29099: ** Requirements:
29099: ** [H13803] [H13806] [H13809] [H13812] [H13815] [H13818] [H13821] [H13824]
29099: ** [H13827] [H13830]
    1: */
34100: const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
34100: int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
34100: int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
34100: double sqlite3_column_double(sqlite3_stmt*, int iCol);
34100: int sqlite3_column_int(sqlite3_stmt*, int iCol);
34100: sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
34100: const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
34100: const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
34100: int sqlite3_column_type(sqlite3_stmt*, int iCol);
34100: sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
    1: 
    1: /*
20545: ** CAPI3REF: Destroy A Prepared Statement Object {H13300} <S70300><S30100>
20545: **
20545: ** The sqlite3_finalize() function is called to delete a [prepared statement].
20545: ** If the statement was executed successfully or not executed at all, then
20545: ** SQLITE_OK is returned. If execution of the statement failed then an
20545: ** [error code] or [extended error code] is returned.
    1: **
    1: ** This routine can be called at any point during the execution of the
20545: ** [prepared statement].  If the virtual machine has not
 4159: ** completed execution when this routine is called, that is like
20545: ** encountering an error or an [sqlite3_interrupt | interrupt].
20545: ** Incomplete updates may be rolled back and transactions canceled,
 4159: ** depending on the circumstances, and the
20545: ** [error code] returned will be [SQLITE_ABORT].
20545: **
29099: ** Requirements:
29099: ** [H11302] [H11304]
    1: */
34100: int sqlite3_finalize(sqlite3_stmt *pStmt);
    1: 
    1: /*
20545: ** CAPI3REF: Reset A Prepared Statement Object {H13330} <S70300>
20545: **
20545: ** The sqlite3_reset() function is called to reset a [prepared statement]
20545: ** object back to its initial state, ready to be re-executed.
    1: ** Any SQL statement variables that had values bound to them using
 4159: ** the [sqlite3_bind_blob | sqlite3_bind_*() API] retain their values.
 4159: ** Use [sqlite3_clear_bindings()] to reset the bindings.
20545: **
20545: ** {H11332} The [sqlite3_reset(S)] interface resets the [prepared statement] S
20545: **          back to the beginning of its program.
20545: **
20545: ** {H11334} If the most recent call to [sqlite3_step(S)] for the
20545: **          [prepared statement] S returned [SQLITE_ROW] or [SQLITE_DONE],
20545: **          or if [sqlite3_step(S)] has never before been called on S,
20545: **          then [sqlite3_reset(S)] returns [SQLITE_OK].
20545: **
20545: ** {H11336} If the most recent call to [sqlite3_step(S)] for the
20545: **          [prepared statement] S indicated an error, then
20545: **          [sqlite3_reset(S)] returns an appropriate [error code].
20545: **
20545: ** {H11338} The [sqlite3_reset(S)] interface does not change the values
20545: **          of any [sqlite3_bind_blob|bindings] on the [prepared statement] S.
    1: */
34100: int sqlite3_reset(sqlite3_stmt *pStmt);
    1: 
    1: /*
20545: ** CAPI3REF: Create Or Redefine SQL Functions {H16100} <S20200>
20545: ** KEYWORDS: {function creation routines}
20545: ** KEYWORDS: {application-defined SQL function}
20545: ** KEYWORDS: {application-defined SQL functions}
20545: **
20545: ** These two functions (collectively known as "function creation routines")
20545: ** are used to add SQL functions or aggregates or to redefine the behavior
20545: ** of existing SQL functions or aggregates.  The only difference between the
20545: ** two is that the second parameter, the name of the (scalar) function or
20545: ** aggregate, is encoded in UTF-8 for sqlite3_create_function() and UTF-16
20545: ** for sqlite3_create_function16().
20545: **
20545: ** The first parameter is the [database connection] to which the SQL
20545: ** function is to be added.  If a single program uses more than one database
20545: ** connection internally, then SQL functions must be added individually to
20545: ** each database connection.
20545: **
20545: ** The second parameter is the name of the SQL function to be created or
20545: ** redefined.  The length of the name is limited to 255 bytes, exclusive of
20545: ** the zero-terminator.  Note that the name length limit is in bytes, not
 4159: ** characters.  Any attempt to create a function with a longer name
20545: ** will result in [SQLITE_ERROR] being returned.
20545: **
20545: ** The third parameter (nArg)
20545: ** is the number of arguments that the SQL function or
31098: ** aggregate takes. If this parameter is -1, then the SQL function or
31098: ** aggregate may take any number of arguments between 0 and the limit
31098: ** set by [sqlite3_limit]([SQLITE_LIMIT_FUNCTION_ARG]).  If the third
31098: ** parameter is less than -1 or greater than 127 then the behavior is
31098: ** undefined.
    1: **
 4159: ** The fourth parameter, eTextRep, specifies what
 4159: ** [SQLITE_UTF8 | text encoding] this SQL function prefers for
 4159: ** its parameters.  Any SQL function implementation should be able to work
 4159: ** work with UTF-8, UTF-16le, or UTF-16be.  But some implementations may be
34100: ** more efficient with one encoding than another.  It is allowed to
10178: ** invoke sqlite3_create_function() or sqlite3_create_function16() multiple
 4159: ** times with the same function but with different values of eTextRep.
 4159: ** When multiple implementations of the same function are available, SQLite
 4159: ** will pick the one that involves the least amount of data conversion.
20545: ** If there is only a single implementation which does not care what text
20545: ** encoding is used, then the fourth argument should be [SQLITE_ANY].
20545: **
20545: ** The fifth parameter is an arbitrary pointer.  The implementation of the
20545: ** function can gain access to this pointer using [sqlite3_user_data()].
    1: **
    1: ** The seventh, eighth and ninth parameters, xFunc, xStep and xFinal, are
20545: ** pointers to C-language functions that implement the SQL function or
20545: ** aggregate. A scalar SQL function requires an implementation of the xFunc
20545: ** callback only, NULL pointers should be passed as the xStep and xFinal
20545: ** parameters. An aggregate SQL function requires an implementation of xStep
20545: ** and xFinal and NULL should be passed for xFunc. To delete an existing
20545: ** SQL function or aggregate, pass NULL for all three function callbacks.
 4159: **
 4159: ** It is permitted to register multiple implementations of the same
 4159: ** functions with the same name but with either differing numbers of
20545: ** arguments or differing preferred text encodings.  SQLite will use
34100: ** the implementation most closely matches the way in which the
20545: ** SQL function is used.  A function implementation with a non-negative
20545: ** nArg parameter is a better match than a function implementation with
20545: ** a negative nArg.  A function where the preferred text encoding
20545: ** matches the database encoding is a better
20545: ** match than a function where the encoding is different.  
20545: ** A function where the encoding difference is between UTF16le and UTF16be
20545: ** is a closer match than a function where the encoding difference is
20545: ** between UTF8 and UTF16.
20545: **
20545: ** Built-in functions may be overloaded by new application-defined functions.
20545: ** The first application-defined function with a given name overrides all
20545: ** built-in functions in the same [database connection] with the same name.
20545: ** Subsequent application-defined functions of the same name only override 
20545: ** prior application-defined functions that are an exact match for the
20545: ** number of parameters and preferred encoding.
20545: **
20545: ** An application-defined function is permitted to call other
20545: ** SQLite interfaces.  However, such calls must not
20545: ** close the database connection nor finalize or reset the prepared
20545: ** statement in which the function is running.
20545: **
29099: ** Requirements:
31098: ** [H16103] [H16106] [H16109] [H16112] [H16118] [H16121] [H16127]
29099: ** [H16130] [H16133] [H16136] [H16139] [H16142]
    1: */
34100: int sqlite3_create_function(
20545:   sqlite3 *db,
    1:   const char *zFunctionName,
    1:   int nArg,
    1:   int eTextRep,
20545:   void *pApp,
    1:   void (*xFunc)(sqlite3_context*,int,sqlite3_value**),
    1:   void (*xStep)(sqlite3_context*,int,sqlite3_value**),
    1:   void (*xFinal)(sqlite3_context*)
    1: );
34100: int sqlite3_create_function16(
20545:   sqlite3 *db,
    1:   const void *zFunctionName,
    1:   int nArg,
    1:   int eTextRep,
20545:   void *pApp,
    1:   void (*xFunc)(sqlite3_context*,int,sqlite3_value**),
    1:   void (*xStep)(sqlite3_context*,int,sqlite3_value**),
    1:   void (*xFinal)(sqlite3_context*)
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Text Encodings {H10267} <S50200> <H16100>
 4159: **
 4159: ** These constant define integer codes that represent the various
 4159: ** text encodings supported by SQLite.
 4159: */
 4159: #define SQLITE_UTF8           1
 4159: #define SQLITE_UTF16LE        2
 4159: #define SQLITE_UTF16BE        3
 4159: #define SQLITE_UTF16          4    /* Use native byte order */
 4159: #define SQLITE_ANY            5    /* sqlite3_create_function only */
 4159: #define SQLITE_UTF16_ALIGNED  8    /* sqlite3_create_collation only */
 4159: 
 4159: /*
20545: ** CAPI3REF: Deprecated Functions
20545: ** DEPRECATED
20545: **
20545: ** These functions are [deprecated].  In order to maintain
20545: ** backwards compatibility with older code, these functions continue 
20545: ** to be supported.  However, new applications should avoid
 4159: ** the use of these functions.  To help encourage people to avoid
22150: ** using these functions, we are not going to tell you what they do.
    1: */
20545: #ifndef SQLITE_OMIT_DEPRECATED
34100: SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);
34100: SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);
34100: SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);
34100: SQLITE_DEPRECATED int sqlite3_global_recover(void);
34100: SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);
34100: SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),void*,sqlite3_int64);
20545: #endif
    1: 
    1: /*
20545: ** CAPI3REF: Obtaining SQL Function Parameter Values {H15100} <S20200>
 4159: **
 4159: ** The C-language implementation of SQL functions and aggregates uses
 4159: ** this set of interface routines to access the parameter values on
 4159: ** the function or aggregate.
 4159: **
 4159: ** The xFunc (for scalar functions) or xStep (for aggregates) parameters
 4159: ** to [sqlite3_create_function()] and [sqlite3_create_function16()]
 4159: ** define callbacks that implement the SQL functions and aggregates.
 4159: ** The 4th parameter to these callbacks is an array of pointers to
20545: ** [protected sqlite3_value] objects.  There is one [sqlite3_value] object for
 4159: ** each parameter to the SQL function.  These routines are used to
 4159: ** extract values from the [sqlite3_value] objects.
 4159: **
20545: ** These routines work only with [protected sqlite3_value] objects.
20545: ** Any attempt to use these routines on an [unprotected sqlite3_value]
20545: ** object results in undefined behavior.
20545: **
20545: ** These routines work just like the corresponding [column access functions]
20545: ** except that  these routines take a single [protected sqlite3_value] object
20545: ** pointer instead of a [sqlite3_stmt*] pointer and an integer column number.
20545: **
20545: ** The sqlite3_value_text16() interface extracts a UTF-16 string
 4159: ** in the native byte-order of the host machine.  The
 4159: ** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces
20545: ** extract UTF-16 strings as big-endian and little-endian respectively.
 4159: **
 4159: ** The sqlite3_value_numeric_type() interface attempts to apply
 4159: ** numeric affinity to the value.  This means that an attempt is
 4159: ** made to convert the value to an integer or floating point.  If
10178: ** such a conversion is possible without loss of information (in other
20545: ** words, if the value is a string that looks like a number)
20545: ** then the conversion is performed.  Otherwise no conversion occurs.
20545: ** The [SQLITE_INTEGER | datatype] after conversion is returned.
20545: **
20545: ** Please pay particular attention to the fact that the pointer returned
20545: ** from [sqlite3_value_blob()], [sqlite3_value_text()], or
 4159: ** [sqlite3_value_text16()] can be invalidated by a subsequent call to
10178: ** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],
 4159: ** or [sqlite3_value_text16()].
10178: **
10178: ** These routines must be called from the same thread as
20545: ** the SQL function that supplied the [sqlite3_value*] parameters.
20545: **
29099: ** Requirements:
29099: ** [H15103] [H15106] [H15109] [H15112] [H15115] [H15118] [H15121] [H15124]
29099: ** [H15127] [H15130] [H15133] [H15136]
    1: */
34100: const void *sqlite3_value_blob(sqlite3_value*);
34100: int sqlite3_value_bytes(sqlite3_value*);
34100: int sqlite3_value_bytes16(sqlite3_value*);
34100: double sqlite3_value_double(sqlite3_value*);
34100: int sqlite3_value_int(sqlite3_value*);
34100: sqlite3_int64 sqlite3_value_int64(sqlite3_value*);
34100: const unsigned char *sqlite3_value_text(sqlite3_value*);
34100: const void *sqlite3_value_text16(sqlite3_value*);
34100: const void *sqlite3_value_text16le(sqlite3_value*);
34100: const void *sqlite3_value_text16be(sqlite3_value*);
34100: int sqlite3_value_type(sqlite3_value*);
34100: int sqlite3_value_numeric_type(sqlite3_value*);
    1: 
    1: /*
20545: ** CAPI3REF: Obtain Aggregate Function Context {H16210} <S20200>
 4159: **
 4159: ** The implementation of aggregate SQL functions use this routine to allocate
10178: ** a structure for storing their state.
20545: **
20545: ** The first time the sqlite3_aggregate_context() routine is called for a
20545: ** particular aggregate, SQLite allocates nBytes of memory, zeroes out that
20545: ** memory, and returns a pointer to it. On second and subsequent calls to
20545: ** sqlite3_aggregate_context() for the same aggregate function index,
20545: ** the same buffer is returned. The implementation of the aggregate can use
20545: ** the returned buffer to accumulate data.
20545: **
20545: ** SQLite automatically frees the allocated buffer when the aggregate
20545: ** query concludes.
 4159: **
 4159: ** The first parameter should be a copy of the
20545: ** [sqlite3_context | SQL function context] that is the first parameter
20545: ** to the callback routine that implements the aggregate function.
10178: **
10178: ** This routine must be called from the same thread in which
10178: ** the aggregate SQL function is running.
20545: **
29099: ** Requirements:
29099: ** [H16211] [H16213] [H16215] [H16217]
    1: */
34100: void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);
    1: 
    1: /*
20545: ** CAPI3REF: User Data For Functions {H16240} <S20200>
20545: **
20545: ** The sqlite3_user_data() interface returns a copy of
10178: ** the pointer that was the pUserData parameter (the 5th parameter)
20545: ** of the [sqlite3_create_function()]
10178: ** and [sqlite3_create_function16()] routines that originally
10178: ** registered the application defined function. {END}
10178: **
20545: ** This routine must be called from the same thread in which
10178: ** the application-defined function is running.
20545: **
29099: ** Requirements:
29099: ** [H16243]
    1: */
34100: void *sqlite3_user_data(sqlite3_context*);
    1: 
    1: /*
20545: ** CAPI3REF: Database Connection For Functions {H16250} <S60600><S20200>
20545: **
20545: ** The sqlite3_context_db_handle() interface returns a copy of
20545: ** the pointer to the [database connection] (the 1st parameter)
20545: ** of the [sqlite3_create_function()]
20545: ** and [sqlite3_create_function16()] routines that originally
20545: ** registered the application defined function.
20545: **
29099: ** Requirements:
29099: ** [H16253]
20545: */
34100: sqlite3 *sqlite3_context_db_handle(sqlite3_context*);
20545: 
20545: /*
20545: ** CAPI3REF: Function Auxiliary Data {H16270} <S20200>
 4159: **
 4159: ** The following two functions may be used by scalar SQL functions to
20545: ** associate metadata with argument values. If the same value is passed to
 4159: ** multiple invocations of the same SQL function during query execution, under
20545: ** some circumstances the associated metadata may be preserved. This may
    1: ** be used, for example, to add a regular-expression matching scalar
    1: ** function. The compiled version of the regular expression is stored as
20545: ** metadata associated with the SQL value passed as the regular expression
 4159: ** pattern.  The compiled regular expression can be reused on multiple
 4159: ** invocations of the same function so that the original pattern string
 4159: ** does not need to be recompiled on each invocation.
    1: **
20545: ** The sqlite3_get_auxdata() interface returns a pointer to the metadata
10178: ** associated by the sqlite3_set_auxdata() function with the Nth argument
20545: ** value to the application-defined function. If no metadata has been ever
20545: ** been set for the Nth argument of the function, or if the corresponding
20545: ** function parameter has changed since the meta-data was set,
20545: ** then sqlite3_get_auxdata() returns a NULL pointer.
20545: **
20545: ** The sqlite3_set_auxdata() interface saves the metadata
20545: ** pointed to by its 3rd parameter as the metadata for the N-th
20545: ** argument of the application-defined function.  Subsequent
10178: ** calls to sqlite3_get_auxdata() might return this data, if it has
10178: ** not been destroyed.
20545: ** If it is not NULL, SQLite will invoke the destructor
10178: ** function given by the 4th parameter to sqlite3_set_auxdata() on
20545: ** the metadata when the corresponding function parameter changes
20545: ** or when the SQL statement completes, whichever comes first.
20545: **
20545: ** SQLite is free to call the destructor and drop metadata on any
20545: ** parameter of any function at any time.  The only guarantee is that
20545: ** the destructor will be called before the metadata is dropped.
20545: **
20545: ** In practice, metadata is preserved between function calls for
    1: ** expressions that are constant at compile time. This includes literal
    1: ** values and SQL variables.
10178: **
10178: ** These routines must be called from the same thread in which
10178: ** the SQL function is running.
20545: **
29099: ** Requirements:
29099: ** [H16272] [H16274] [H16276] [H16277] [H16278] [H16279]
    1: */
34100: void *sqlite3_get_auxdata(sqlite3_context*, int N);
34100: void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
    1: 
    1: 
    1: /*
20545: ** CAPI3REF: Constants Defining Special Destructor Behavior {H10280} <S30100>
20545: **
20545: ** These are special values for the destructor that is passed in as the
 4159: ** final argument to routines like [sqlite3_result_blob()].  If the destructor
    1: ** argument is SQLITE_STATIC, it means that the content pointer is constant
    1: ** and will never change.  It does not need to be destroyed.  The
    1: ** SQLITE_TRANSIENT value means that the content will likely change in
    1: ** the near future and that SQLite should make its own private copy of
    1: ** the content before returning.
 2623: **
 2623: ** The typedef is necessary to work around problems in certain
 2623: ** C++ compilers.  See ticket #2191.
    1: */
 2623: typedef void (*sqlite3_destructor_type)(void*);
 2623: #define SQLITE_STATIC      ((sqlite3_destructor_type)0)
 2623: #define SQLITE_TRANSIENT   ((sqlite3_destructor_type)-1)
    1: 
    1: /*
20545: ** CAPI3REF: Setting The Result Of An SQL Function {H16400} <S20200>
 4159: **
 4159: ** These routines are used by the xFunc or xFinal callbacks that
 4159: ** implement SQL functions and aggregates.  See
 4159: ** [sqlite3_create_function()] and [sqlite3_create_function16()]
 4159: ** for additional information.
 4159: **
20545: ** These functions work very much like the [parameter binding] family of
20545: ** functions used to bind values to host parameters in prepared statements.
20545: ** Refer to the [SQL parameter] documentation for additional information.
20545: **
20545: ** The sqlite3_result_blob() interface sets the result from
20545: ** an application-defined function to be the BLOB whose content is pointed
10178: ** to by the second parameter and which is N bytes long where N is the
10178: ** third parameter.
20545: **
20545: ** The sqlite3_result_zeroblob() interfaces set the result of
20545: ** the application-defined function to be a BLOB containing all zero
10178: ** bytes and N bytes in size, where N is the value of the 2nd parameter.
10178: **
20545: ** The sqlite3_result_double() interface sets the result from
20545: ** an application-defined function to be a floating point value specified
10178: ** by its 2nd argument.
10178: **
20545: ** The sqlite3_result_error() and sqlite3_result_error16() functions
10178: ** cause the implemented SQL function to throw an exception.
20545: ** SQLite uses the string pointed to by the
10178: ** 2nd parameter of sqlite3_result_error() or sqlite3_result_error16()
20545: ** as the text of an error message.  SQLite interprets the error
20545: ** message string from sqlite3_result_error() as UTF-8. SQLite
20545: ** interprets the string from sqlite3_result_error16() as UTF-16 in native
20545: ** byte order.  If the third parameter to sqlite3_result_error()
10178: ** or sqlite3_result_error16() is negative then SQLite takes as the error
10178: ** message all text up through the first zero character.
20545: ** If the third parameter to sqlite3_result_error() or
10178: ** sqlite3_result_error16() is non-negative then SQLite takes that many
10178: ** bytes (not characters) from the 2nd parameter as the error message.
20545: ** The sqlite3_result_error() and sqlite3_result_error16()
20545: ** routines make a private copy of the error message text before
20545: ** they return.  Hence, the calling function can deallocate or
10178: ** modify the text after they return without harm.
20545: ** The sqlite3_result_error_code() function changes the error code
20545: ** returned by SQLite as a result of an error in a function.  By default,
20545: ** the error code is SQLITE_ERROR.  A subsequent call to sqlite3_result_error()
20545: ** or sqlite3_result_error16() resets the error code to SQLITE_ERROR.
20545: **
20545: ** The sqlite3_result_toobig() interface causes SQLite to throw an error
20545: ** indicating that a string or BLOB is to long to represent.
20545: **
20545: ** The sqlite3_result_nomem() interface causes SQLite to throw an error
20545: ** indicating that a memory allocation failed.
20545: **
20545: ** The sqlite3_result_int() interface sets the return value
10178: ** of the application-defined function to be the 32-bit signed integer
10178: ** value given in the 2nd argument.
20545: ** The sqlite3_result_int64() interface sets the return value
10178: ** of the application-defined function to be the 64-bit signed integer
10178: ** value given in the 2nd argument.
10178: **
20545: ** The sqlite3_result_null() interface sets the return value
10178: ** of the application-defined function to be NULL.
10178: **
20545: ** The sqlite3_result_text(), sqlite3_result_text16(),
10178: ** sqlite3_result_text16le(), and sqlite3_result_text16be() interfaces
10178: ** set the return value of the application-defined function to be
10178: ** a text string which is represented as UTF-8, UTF-16 native byte order,
10178: ** UTF-16 little endian, or UTF-16 big endian, respectively.
20545: ** SQLite takes the text result from the application from
10178: ** the 2nd parameter of the sqlite3_result_text* interfaces.
20545: ** If the 3rd parameter to the sqlite3_result_text* interfaces
10178: ** is negative, then SQLite takes result text from the 2nd parameter
10178: ** through the first zero character.
20545: ** If the 3rd parameter to the sqlite3_result_text* interfaces
10178: ** is non-negative, then as many bytes (not characters) of the text
10178: ** pointed to by the 2nd parameter are taken as the application-defined
10178: ** function result.
20545: ** If the 4th parameter to the sqlite3_result_text* interfaces
10178: ** or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that
20545: ** function as the destructor on the text or BLOB result when it has
10178: ** finished using that result.
34100: ** If the 4th parameter to the sqlite3_result_text* interfaces or
20545: ** sqlite3_result_blob is the special constant SQLITE_STATIC, then SQLite
20545: ** assumes that the text or BLOB result is in constant space and does not
34100: ** copy the it or call a destructor when it has finished using that result.
20545: ** If the 4th parameter to the sqlite3_result_text* interfaces
10178: ** or sqlite3_result_blob is the special constant SQLITE_TRANSIENT
10178: ** then SQLite makes a copy of the result into space obtained from
10178: ** from [sqlite3_malloc()] before it returns.
10178: **
20545: ** The sqlite3_result_value() interface sets the result of
20545: ** the application-defined function to be a copy the
20545: ** [unprotected sqlite3_value] object specified by the 2nd parameter.  The
10178: ** sqlite3_result_value() interface makes a copy of the [sqlite3_value]
20545: ** so that the [sqlite3_value] specified in the parameter may change or
10178: ** be deallocated after sqlite3_result_value() returns without harm.
20545: ** A [protected sqlite3_value] object may always be used where an
20545: ** [unprotected sqlite3_value] object is required, so either
20545: ** kind of [sqlite3_value] object can be used with this interface.
20545: **
20545: ** If these routines are called from within the different thread
20545: ** than the one containing the application-defined function that received
10178: ** the [sqlite3_context] pointer, the results are undefined.
20545: **
29099: ** Requirements:
29099: ** [H16403] [H16406] [H16409] [H16412] [H16415] [H16418] [H16421] [H16424]
29099: ** [H16427] [H16430] [H16433] [H16436] [H16439] [H16442] [H16445] [H16448]
29099: ** [H16451] [H16454] [H16457] [H16460] [H16463]
    1: */
34100: void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));
34100: void sqlite3_result_double(sqlite3_context*, double);
34100: void sqlite3_result_error(sqlite3_context*, const char*, int);
34100: void sqlite3_result_error16(sqlite3_context*, const void*, int);
34100: void sqlite3_result_error_toobig(sqlite3_context*);
34100: void sqlite3_result_error_nomem(sqlite3_context*);
34100: void sqlite3_result_error_code(sqlite3_context*, int);
34100: void sqlite3_result_int(sqlite3_context*, int);
34100: void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);
34100: void sqlite3_result_null(sqlite3_context*);
34100: void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));
34100: void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));
34100: void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));
34100: void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));
34100: void sqlite3_result_value(sqlite3_context*, sqlite3_value*);
34100: void sqlite3_result_zeroblob(sqlite3_context*, int n);
    1: 
    1: /*
20545: ** CAPI3REF: Define New Collating Sequences {H16600} <S20300>
20545: **
 4159: ** These functions are used to add new collation sequences to the
20545: ** [database connection] specified as the first argument.
20545: **
    1: ** The name of the new collation sequence is specified as a UTF-8 string
 4159: ** for sqlite3_create_collation() and sqlite3_create_collation_v2()
20545: ** and a UTF-16 string for sqlite3_create_collation16(). In all cases
 4159: ** the name is passed as the second function argument.
    1: **
10178: ** The third argument may be one of the constants [SQLITE_UTF8],
29099: ** [SQLITE_UTF16LE], or [SQLITE_UTF16BE], indicating that the user-supplied
    1: ** routine expects to be passed pointers to strings encoded using UTF-8,
20545: ** UTF-16 little-endian, or UTF-16 big-endian, respectively. The
29099: ** third argument might also be [SQLITE_UTF16] to indicate that the routine
29099: ** expects pointers to be UTF-16 strings in the native byte order, or the
29099: ** argument can be [SQLITE_UTF16_ALIGNED] if the
10178: ** the routine expects pointers to 16-bit word aligned strings
29099: ** of UTF-16 in the native byte order.
20545: **
    1: ** A pointer to the user supplied routine must be passed as the fifth
20545: ** argument.  If it is NULL, this is the same as deleting the collation
10178: ** sequence (so that SQLite cannot call it anymore).
20545: ** Each time the application supplied function is invoked, it is passed
20545: ** as its first parameter a copy of the void* passed as the fourth argument
20545: ** to sqlite3_create_collation() or sqlite3_create_collation16().
20545: **
10178: ** The remaining arguments to the application-supplied routine are two strings,
20545: ** each represented by a (length, data) pair and encoded in the encoding
    1: ** that was passed as the third argument when the collation sequence was
10178: ** registered. {END}  The application defined collation routine should
20545: ** return negative, zero or positive if the first string is less than,
20545: ** equal to, or greater than the second string. i.e. (STRING1 - STRING2).
20545: **
 4159: ** The sqlite3_create_collation_v2() works like sqlite3_create_collation()
20545: ** except that it takes an extra argument which is a destructor for
20545: ** the collation.  The destructor is called when the collation is
 4159: ** destroyed and is passed a copy of the fourth parameter void* pointer
10178: ** of the sqlite3_create_collation_v2().
20545: ** Collations are destroyed when they are overridden by later calls to the
20545: ** collation creation functions or when the [database connection] is closed
20545: ** using [sqlite3_close()].
20545: **
29099: ** See also:  [sqlite3_collation_needed()] and [sqlite3_collation_needed16()].
29099: **
29099: ** Requirements:
29099: ** [H16603] [H16604] [H16606] [H16609] [H16612] [H16615] [H16618] [H16621]
29099: ** [H16624] [H16627] [H16630]
    1: */
34100: int sqlite3_create_collation(
    1:   sqlite3*, 
    1:   const char *zName, 
    1:   int eTextRep, 
    1:   void*,
    1:   int(*xCompare)(void*,int,const void*,int,const void*)
    1: );
34100: int sqlite3_create_collation_v2(
 4159:   sqlite3*, 
 4159:   const char *zName, 
 4159:   int eTextRep, 
 4159:   void*,
 4159:   int(*xCompare)(void*,int,const void*,int,const void*),
 4159:   void(*xDestroy)(void*)
 4159: );
34100: int sqlite3_create_collation16(
    1:   sqlite3*, 
20545:   const void *zName,
    1:   int eTextRep, 
    1:   void*,
    1:   int(*xCompare)(void*,int,const void*,int,const void*)
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Collation Needed Callbacks {H16700} <S20300>
20545: **
    1: ** To avoid having to register all collation sequences before a database
    1: ** can be used, a single callback function may be registered with the
20545: ** [database connection] to be called whenever an undefined collation
20545: ** sequence is required.
20545: **
    1: ** If the function is registered using the sqlite3_collation_needed() API,
    1: ** then it is passed the names of undefined collation sequences as strings
20545: ** encoded in UTF-8. {H16703} If sqlite3_collation_needed16() is used,
20545: ** the names are passed as UTF-16 in machine native byte order.
20545: ** A call to either function replaces any existing callback.
20545: **
20545: ** When the callback is invoked, the first argument passed is a copy
    1: ** of the second argument to sqlite3_collation_needed() or
20545: ** sqlite3_collation_needed16().  The second argument is the database
20545: ** connection.  The third argument is one of [SQLITE_UTF8], [SQLITE_UTF16BE],
20545: ** or [SQLITE_UTF16LE], indicating the most desirable form of the collation
20545: ** sequence function required.  The fourth parameter is the name of the
20545: ** required collation sequence.
    1: **
 4159: ** The callback function should register the desired collation using
 4159: ** [sqlite3_create_collation()], [sqlite3_create_collation16()], or
 4159: ** [sqlite3_create_collation_v2()].
20545: **
29099: ** Requirements:
29099: ** [H16702] [H16704] [H16706]
    1: */
34100: int sqlite3_collation_needed(
    1:   sqlite3*, 
    1:   void*, 
    1:   void(*)(void*,sqlite3*,int eTextRep,const char*)
    1: );
34100: int sqlite3_collation_needed16(
    1:   sqlite3*, 
    1:   void*,
    1:   void(*)(void*,sqlite3*,int eTextRep,const void*)
    1: );
    1: 
    1: /*
    1: ** Specify the key for an encrypted database.  This routine should be
    1: ** called right after sqlite3_open().
    1: **
    1: ** The code to implement this API is not available in the public release
    1: ** of SQLite.
    1: */
34100: int sqlite3_key(
    1:   sqlite3 *db,                   /* Database to be rekeyed */
    1:   const void *pKey, int nKey     /* The key */
    1: );
    1: 
    1: /*
    1: ** Change the key on an open database.  If the current database is not
    1: ** encrypted, this routine will encrypt it.  If pNew==0 or nNew==0, the
    1: ** database is decrypted.
    1: **
    1: ** The code to implement this API is not available in the public release
    1: ** of SQLite.
    1: */
34100: int sqlite3_rekey(
    1:   sqlite3 *db,                   /* Database to be rekeyed */
    1:   const void *pKey, int nKey     /* The new key */
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Suspend Execution For A Short Time {H10530} <S40410>
20545: **
20545: ** The sqlite3_sleep() function causes the current thread to suspend execution
10178: ** for at least a number of milliseconds specified in its parameter.
10178: **
20545: ** If the operating system does not support sleep requests with
 4159: ** millisecond time resolution, then the time will be rounded up to
20545: ** the nearest second. The number of milliseconds of sleep actually
    1: ** requested from the operating system is returned.
10178: **
20545: ** SQLite implements this interface by calling the xSleep()
20545: ** method of the default [sqlite3_vfs] object.
20545: **
29099: ** Requirements: [H10533] [H10536]
    1: */
34100: int sqlite3_sleep(int);
    1: 
    1: /*
20545: ** CAPI3REF: Name Of The Folder Holding Temporary Files {H10310} <S20000>
    1: **
 4159: ** If this global variable is made to point to a string which is
20545: ** the name of a folder (a.k.a. directory), then all temporary files
    1: ** created by SQLite will be placed in that directory.  If this variable
20545: ** is a NULL pointer, then SQLite performs a search for an appropriate
20545: ** temporary file directory.
20545: **
29099: ** It is not safe to read or modify this variable in more than one
29099: ** thread at a time.  It is not safe to read or modify this variable
29099: ** if a [database connection] is being used at the same time in a separate
29099: ** thread.
29099: ** It is intended that this variable be set once
10178: ** as part of process initialization and before any SQLite interface
29099: ** routines have been called and that this variable remain unchanged
29099: ** thereafter.
29099: **
29099: ** The [temp_store_directory pragma] may modify this variable and cause
29099: ** it to point to memory obtained from [sqlite3_malloc].  Furthermore,
29099: ** the [temp_store_directory pragma] always assumes that any string
29099: ** that this variable points to is held in memory obtained from 
29099: ** [sqlite3_malloc] and the pragma may attempt to free that memory
29099: ** using [sqlite3_free].
29099: ** Hence, if this variable is modified directly, either it should be
29099: ** made NULL or made to point to memory obtained from [sqlite3_malloc]
29099: ** or else the use of the [temp_store_directory pragma] should be avoided.
    1: */
34100: SQLITE_EXTERN char *sqlite3_temp_directory;
    1: 
    1: /*
20545: ** CAPI3REF: Test For Auto-Commit Mode {H12930} <S60200>
20545: ** KEYWORDS: {autocommit mode}
20545: **
20545: ** The sqlite3_get_autocommit() interface returns non-zero or
10178: ** zero if the given database connection is or is not in autocommit mode,
20545: ** respectively.  Autocommit mode is on by default.
20545: ** Autocommit mode is disabled by a [BEGIN] statement.
20545: ** Autocommit mode is re-enabled by a [COMMIT] or [ROLLBACK].
10178: **
10178: ** If certain kinds of errors occur on a statement within a multi-statement
20545: ** transaction (errors including [SQLITE_FULL], [SQLITE_IOERR],
10178: ** [SQLITE_NOMEM], [SQLITE_BUSY], and [SQLITE_INTERRUPT]) then the
20545: ** transaction might be rolled back automatically.  The only way to
20545: ** find out whether SQLite automatically rolled back the transaction after
20545: ** an error is to use this function.
20545: **
29099: ** If another thread changes the autocommit status of the database
10178: ** connection while this routine is running, then the return value
20545: ** is undefined.
29099: **
29099: ** Requirements: [H12931] [H12932] [H12933] [H12934]
    1: */
34100: int sqlite3_get_autocommit(sqlite3*);
    1: 
    1: /*
20545: ** CAPI3REF: Find The Database Handle Of A Prepared Statement {H13120} <S60600>
20545: **
20545: ** The sqlite3_db_handle interface returns the [database connection] handle
29099: ** to which a [prepared statement] belongs.  The [database connection]
29099: ** returned by sqlite3_db_handle is the same [database connection] that was the first argument
20545: ** to the [sqlite3_prepare_v2()] call (or its variants) that was used to
20545: ** create the statement in the first place.
20545: **
29099: ** Requirements: [H13123]
    1: */
34100: sqlite3 *sqlite3_db_handle(sqlite3_stmt*);
    1: 
20545: /*
20545: ** CAPI3REF: Find the next prepared statement {H13140} <S60600>
20545: **
20545: ** This interface returns a pointer to the next [prepared statement] after
20545: ** pStmt associated with the [database connection] pDb.  If pStmt is NULL
20545: ** then this interface returns a pointer to the first prepared statement
20545: ** associated with the database connection pDb.  If no prepared statement
20545: ** satisfies the conditions of this routine, it returns NULL.
20545: **
29099: ** The [database connection] pointer D in a call to
20545: ** [sqlite3_next_stmt(D,S)] must refer to an open database
20545: ** connection and in particular must not be a NULL pointer.
29099: **
29099: ** Requirements: [H13143] [H13146] [H13149] [H13152]
20545: */
34100: sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);
 4159: 
    1: /*
20545: ** CAPI3REF: Commit And Rollback Notification Callbacks {H12950} <S60400>
20545: **
20545: ** The sqlite3_commit_hook() interface registers a callback
31098: ** function to be invoked whenever a transaction is [COMMIT | committed].
20545: ** Any callback set by a previous call to sqlite3_commit_hook()
10178: ** for the same database connection is overridden.
20545: ** The sqlite3_rollback_hook() interface registers a callback
31098: ** function to be invoked whenever a transaction is [ROLLBACK | rolled back].
20545: ** Any callback set by a previous call to sqlite3_commit_hook()
10178: ** for the same database connection is overridden.
20545: ** The pArg argument is passed through to the callback.
20545: ** If the callback on a commit hook function returns non-zero,
20545: ** then the commit is converted into a rollback.
20545: **
20545: ** If another function was previously registered, its
10178: ** pArg value is returned.  Otherwise NULL is returned.
10178: **
20545: ** The callback implementation must not do anything that will modify
20545: ** the database connection that invoked the callback.  Any actions
20545: ** to modify the database connection must be deferred until after the
20545: ** completion of the [sqlite3_step()] call that triggered the commit
20545: ** or rollback hook in the first place.
20545: ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their
20545: ** database connections for the meaning of "modify" in this paragraph.
20545: **
20545: ** Registering a NULL function disables the callback.
20545: **
31098: ** When the commit hook callback routine returns zero, the [COMMIT]
31098: ** operation is allowed to continue normally.  If the commit hook
31098: ** returns non-zero, then the [COMMIT] is converted into a [ROLLBACK].
31098: ** The rollback hook is invoked on a rollback that results from a commit
31098: ** hook returning non-zero, just as it would be with any other rollback.
31098: **
20545: ** For the purposes of this API, a transaction is said to have been
 4159: ** rolled back if an explicit "ROLLBACK" statement is executed, or
10178: ** an error or constraint causes an implicit rollback to occur.
20545: ** The rollback callback is not invoked if a transaction is
10178: ** automatically rolled back because the database connection is closed.
20545: ** The rollback callback is not invoked if a transaction is
10178: ** rolled back because a commit callback returned non-zero.
20545: ** <todo> Check on this </todo>
20545: **
31098: ** See also the [sqlite3_update_hook()] interface.
31098: **
29099: ** Requirements:
29099: ** [H12951] [H12952] [H12953] [H12954] [H12955]
29099: ** [H12961] [H12962] [H12963] [H12964]
 4159: */
34100: void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);
34100: void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);
 4159: 
 4159: /*
20545: ** CAPI3REF: Data Change Notification Callbacks {H12970} <S60400>
20545: **
20545: ** The sqlite3_update_hook() interface registers a callback function
20545: ** with the [database connection] identified by the first argument
20545: ** to be invoked whenever a row is updated, inserted or deleted.
20545: ** Any callback set by a previous call to this function
20545: ** for the same database connection is overridden.
20545: **
20545: ** The second argument is a pointer to the function to invoke when a
10178: ** row is updated, inserted or deleted.
20545: ** The first argument to the callback is a copy of the third argument
20545: ** to sqlite3_update_hook().
20545: ** The second callback argument is one of [SQLITE_INSERT], [SQLITE_DELETE],
20545: ** or [SQLITE_UPDATE], depending on the operation that caused the callback
20545: ** to be invoked.
20545: ** The third and fourth arguments to the callback contain pointers to the
20545: ** database and table name containing the affected row.
23606: ** The final callback parameter is the [rowid] of the row.
23606: ** In the case of an update, this is the [rowid] after the update takes place.
20545: **
20545: ** The update hook is not invoked when internal system tables are
20545: ** modified (i.e. sqlite_master and sqlite_sequence).
20545: **
31098: ** In the current implementation, the update hook
31098: ** is not invoked when duplication rows are deleted because of an
31098: ** [ON CONFLICT | ON CONFLICT REPLACE] clause.  Nor is the update hook
31098: ** invoked when rows are deleted using the [truncate optimization].
31098: ** The exceptions defined in this paragraph might change in a future
31098: ** release of SQLite.
31098: **
20545: ** The update hook implementation must not do anything that will modify
20545: ** the database connection that invoked the update hook.  Any actions
20545: ** to modify the database connection must be deferred until after the
20545: ** completion of the [sqlite3_step()] call that triggered the update hook.
20545: ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their
20545: ** database connections for the meaning of "modify" in this paragraph.
20545: **
20545: ** If another function was previously registered, its pArg value
20545: ** is returned.  Otherwise NULL is returned.
20545: **
31098: ** See also the [sqlite3_commit_hook()] and [sqlite3_rollback_hook()]
31098: ** interfaces.
31098: **
29099: ** Requirements:
29099: ** [H12971] [H12973] [H12975] [H12977] [H12979] [H12981] [H12983] [H12986]
    1: */
34100: void *sqlite3_update_hook(
    1:   sqlite3*, 
10178:   void(*)(void *,int ,char const *,char const *,sqlite3_int64),
    1:   void*
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Enable Or Disable Shared Pager Cache {H10330} <S30900>
34100: ** KEYWORDS: {shared cache} {shared cache mode}
20545: **
 4159: ** This routine enables or disables the sharing of the database cache
20545: ** and schema data structures between [database connection | connections]
20545: ** to the same database. Sharing is enabled if the argument is true
20545: ** and disabled if the argument is false.
20545: **
29099: ** Cache sharing is enabled and disabled for an entire process.
20545: ** This is a change as of SQLite version 3.5.0. In prior versions of SQLite,
20545: ** sharing was enabled or disabled for each thread separately.
20545: **
10178: ** The cache sharing mode set by this interface effects all subsequent
10178: ** calls to [sqlite3_open()], [sqlite3_open_v2()], and [sqlite3_open16()].
20545: ** Existing database connections continue use the sharing mode
20545: ** that was in effect at the time they were opened.
20545: **
20545: ** Virtual tables cannot be used with a shared cache.  When shared
10178: ** cache is enabled, the [sqlite3_create_module()] API used to register
20545: ** virtual tables will always return an error.
20545: **
20545: ** This routine returns [SQLITE_OK] if shared cache was enabled or disabled
20545: ** successfully.  An [error code] is returned otherwise.
20545: **
20545: ** Shared cache is disabled by default. But this might change in
10178: ** future releases of SQLite.  Applications that care about shared
10178: ** cache setting should set it explicitly.
20545: **
29099: ** See Also:  [SQLite Shared-Cache Mode]
29099: **
29099: ** Requirements: [H10331] [H10336] [H10337] [H10339]
    1: */
34100: int sqlite3_enable_shared_cache(int);
    1: 
    1: /*
20545: ** CAPI3REF: Attempt To Free Heap Memory {H17340} <S30220>
20545: **
20545: ** The sqlite3_release_memory() interface attempts to free N bytes
20545: ** of heap memory by deallocating non-essential memory allocations
20545: ** held by the database library. {END}  Memory used to cache database
20545: ** pages to improve performance is an example of non-essential memory.
20545: ** sqlite3_release_memory() returns the number of bytes actually freed,
20545: ** which might be more or less than the amount requested.
20545: **
29099: ** Requirements: [H17341] [H17342]
    1: */
34100: int sqlite3_release_memory(int);
    1: 
    1: /*
20545: ** CAPI3REF: Impose A Limit On Heap Size {H17350} <S30220>
20545: **
20545: ** The sqlite3_soft_heap_limit() interface places a "soft" limit
20545: ** on the amount of heap memory that may be allocated by SQLite.
20545: ** If an internal allocation is requested that would exceed the
20545: ** soft heap limit, [sqlite3_release_memory()] is invoked one or
20545: ** more times to free up some space before the allocation is performed.
20545: **
20545: ** The limit is called "soft", because if [sqlite3_release_memory()]
20545: ** cannot free sufficient memory to prevent the limit from being exceeded,
10178: ** the memory is allocated anyway and the current operation proceeds.
10178: **
 4159: ** A negative or zero value for N means that there is no soft heap limit and
10178: ** [sqlite3_release_memory()] will only be called when memory is exhausted.
20545: ** The default value for the soft heap limit is zero.
10178: **
10178: ** SQLite makes a best effort to honor the soft heap limit.
20545: ** But if the soft heap limit cannot be honored, execution will
20545: ** continue without error or notification.  This is why the limit is
 4159: ** called a "soft" limit.  It is advisory only.
 4159: **
10178: ** Prior to SQLite version 3.5.0, this routine only constrained the memory
10178: ** allocated by a single thread - the same thread in which this routine
10178: ** runs.  Beginning with SQLite version 3.5.0, the soft heap limit is
20545: ** applied to all threads. The value specified for the soft heap limit
20545: ** is an upper bound on the total memory allocation for all threads. In
10178: ** version 3.5.0 there is no mechanism for limiting the heap usage for
10178: ** individual threads.
20545: **
29099: ** Requirements:
29099: ** [H16351] [H16352] [H16353] [H16354] [H16355] [H16358]
    1: */
34100: void sqlite3_soft_heap_limit(int);
    1: 
    1: /*
20545: ** CAPI3REF: Extract Metadata About A Column Of A Table {H12850} <S60300>
20545: **
20545: ** This routine returns metadata about a specific column of a specific
20545: ** database table accessible using the [database connection] handle
20545: ** passed as the first function argument.
    1: **
    1: ** The column is identified by the second, third and fourth parameters to
    1: ** this function. The second parameter is either the name of the database
    1: ** (i.e. "main", "temp" or an attached database) containing the specified
    1: ** table or NULL. If it is NULL, then all attached databases are searched
20545: ** for the table using the same algorithm used by the database engine to
    1: ** resolve unqualified table references.
    1: **
    1: ** The third and fourth parameters to this function are the table and column
    1: ** name of the desired column, respectively. Neither of these parameters
    1: ** may be NULL.
    1: **
20545: ** Metadata is returned by writing to the memory locations passed as the 5th
20545: ** and subsequent parameters to this function. Any of these arguments may be
20545: ** NULL, in which case the corresponding element of metadata is omitted.
20545: **
20545: ** <blockquote>
20545: ** <table border="1">
20545: ** <tr><th> Parameter <th> Output<br>Type <th>  Description
20545: **
20545: ** <tr><td> 5th <td> const char* <td> Data type
20545: ** <tr><td> 6th <td> const char* <td> Name of default collation sequence
20545: ** <tr><td> 7th <td> int         <td> True if column has a NOT NULL constraint
20545: ** <tr><td> 8th <td> int         <td> True if column is part of the PRIMARY KEY
23606: ** <tr><td> 9th <td> int         <td> True if column is [AUTOINCREMENT]
20545: ** </table>
20545: ** </blockquote>
    1: **
    1: ** The memory pointed to by the character pointers returned for the
    1: ** declaration type and collation sequence is valid only until the next
20545: ** call to any SQLite API function.
20545: **
20545: ** If the specified table is actually a view, an [error code] is returned.
    1: **
    1: ** If the specified column is "rowid", "oid" or "_rowid_" and an
23606: ** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output
    1: ** parameters are set for the explicitly declared column. If there is no
23606: ** explicitly declared [INTEGER PRIMARY KEY] column, then the output
20545: ** parameters are set as follows:
    1: **
 4159: ** <pre>
    1: **     data type: "INTEGER"
    1: **     collation sequence: "BINARY"
    1: **     not null: 0
    1: **     primary key: 1
    1: **     auto increment: 0
 4159: ** </pre>
    1: **
    1: ** This function may load one or more schemas from database files. If an
    1: ** error occurs during this process, or if the requested table or column
20545: ** cannot be found, an [error code] is returned and an error message left
20545: ** in the [database connection] (to be retrieved using sqlite3_errmsg()).
    1: **
    1: ** This API is only available if the library was compiled with the
20545: ** [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol defined.
    1: */
34100: int sqlite3_table_column_metadata(
    1:   sqlite3 *db,                /* Connection handle */
    1:   const char *zDbName,        /* Database name or NULL */
    1:   const char *zTableName,     /* Table name */
    1:   const char *zColumnName,    /* Column name */
    1:   char const **pzDataType,    /* OUTPUT: Declared data type */
    1:   char const **pzCollSeq,     /* OUTPUT: Collation sequence name */
    1:   int *pNotNull,              /* OUTPUT: True if NOT NULL constraint exists */
    1:   int *pPrimaryKey,           /* OUTPUT: True if column part of PK */
10178:   int *pAutoinc               /* OUTPUT: True if column is auto-increment */
    1: );
    1: 
    1: /*
20545: ** CAPI3REF: Load An Extension {H12600} <S20500>
20545: **
20545: ** This interface loads an SQLite extension library from the named file.
20545: **
20545: ** {H12601} The sqlite3_load_extension() interface attempts to load an
20545: **          SQLite extension library contained in the file zFile.
20545: **
20545: ** {H12602} The entry point is zProc.
20545: **
20545: ** {H12603} zProc may be 0, in which case the name of the entry point
20545: **          defaults to "sqlite3_extension_init".
20545: **
20545: ** {H12604} The sqlite3_load_extension() interface shall return
20545: **          [SQLITE_OK] on success and [SQLITE_ERROR] if something goes wrong.
20545: **
20545: ** {H12605} If an error occurs and pzErrMsg is not 0, then the
20545: **          [sqlite3_load_extension()] interface shall attempt to
20545: **          fill *pzErrMsg with error message text stored in memory
20545: **          obtained from [sqlite3_malloc()]. {END}  The calling function
20545: **          should free this memory by calling [sqlite3_free()].
20545: **
20545: ** {H12606} Extension loading must be enabled using
20545: **          [sqlite3_enable_load_extension()] prior to calling this API,
20545: **          otherwise an error will be returned.
 2623: */
34100: int sqlite3_load_extension(
 2623:   sqlite3 *db,          /* Load the extension into this database connection */
 2623:   const char *zFile,    /* Name of the shared library containing extension */
 2623:   const char *zProc,    /* Entry point.  Derived from zFile if 0 */
 2623:   char **pzErrMsg       /* Put error message here if not 0 */
 2623: );
 2623: 
 2623: /*
20545: ** CAPI3REF: Enable Or Disable Extension Loading {H12620} <S20500>
 4159: **
 2623: ** So as not to open security holes in older applications that are
 4159: ** unprepared to deal with extension loading, and as a means of disabling
20545: ** extension loading while evaluating user-entered SQL, the following API
20545: ** is provided to turn the [sqlite3_load_extension()] mechanism on and off.
20545: **
20545: ** Extension loading is off by default. See ticket #1863.
20545: **
20545: ** {H12621} Call the sqlite3_enable_load_extension() routine with onoff==1
20545: **          to turn extension loading on and call it with onoff==0 to turn
20545: **          it back off again.
20545: **
20545: ** {H12622} Extension loading is off by default.
 2623: */
34100: int sqlite3_enable_load_extension(sqlite3 *db, int onoff);
 2623: 
 2623: /*
20545: ** CAPI3REF: Automatically Load An Extensions {H12640} <S20500>
16392: **
 2623: ** This API can be invoked at program startup in order to register
 2623: ** one or more statically linked extensions that will be available
20545: ** to all new [database connections]. {END}
20545: **
20545: ** This routine stores a pointer to the extension in an array that is
20545: ** obtained from [sqlite3_malloc()].  If you run a memory leak checker
20545: ** on your program and it reports a leak because of this array, invoke
20545: ** [sqlite3_reset_auto_extension()] prior to shutdown to free the memory.
20545: **
20545: ** {H12641} This function registers an extension entry point that is
20545: **          automatically invoked whenever a new [database connection]
20545: **          is opened using [sqlite3_open()], [sqlite3_open16()],
20545: **          or [sqlite3_open_v2()].
20545: **
20545: ** {H12642} Duplicate extensions are detected so calling this routine
20545: **          multiple times with the same extension is harmless.
20545: **
20545: ** {H12643} This routine stores a pointer to the extension in an array
20545: **          that is obtained from [sqlite3_malloc()].
20545: **
20545: ** {H12644} Automatic extensions apply across all threads.
 2623: */
34100: int sqlite3_auto_extension(void (*xEntryPoint)(void));
 2623: 
 2623: /*
20545: ** CAPI3REF: Reset Automatic Extension Loading {H12660} <S20500>
20545: **
20545: ** This function disables all previously registered automatic
20545: ** extensions. {END}  It undoes the effect of all prior
20545: ** [sqlite3_auto_extension()] calls.
20545: **
20545: ** {H12661} This function disables all previously registered
20545: **          automatic extensions.
20545: **
20545: ** {H12662} This function disables automatic extensions in all threads.
 2623: */
34100: void sqlite3_reset_auto_extension(void);
 2623: 
 2623: /*
 2623: ****** EXPERIMENTAL - subject to change without notice **************
 2623: **
 2623: ** The interface to the virtual-table mechanism is currently considered
 2623: ** to be experimental.  The interface might change in incompatible ways.
 2623: ** If this is a problem for you, do not use the interface at this time.
 2623: **
20545: ** When the virtual-table mechanism stabilizes, we will declare the
 2623: ** interface fixed, support it indefinitely, and remove this comment.
 2623: */
 2623: 
 2623: /*
 2623: ** Structures used by the virtual table interface
 2623: */
 2623: typedef struct sqlite3_vtab sqlite3_vtab;
 2623: typedef struct sqlite3_index_info sqlite3_index_info;
 2623: typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;
 2623: typedef struct sqlite3_module sqlite3_module;
 2623: 
 2623: /*
20545: ** CAPI3REF: Virtual Table Object {H18000} <S20400>
29099: ** KEYWORDS: sqlite3_module {virtual table module}
20545: ** EXPERIMENTAL
20545: **
29099: ** This structure, sometimes called a a "virtual table module", 
29099: ** defines the implementation of a [virtual tables].  
29099: ** This structure consists mostly of methods for the module.
29099: **
29099: ** A virtual table module is created by filling in a persistent
29099: ** instance of this structure and passing a pointer to that instance
29099: ** to [sqlite3_create_module()] or [sqlite3_create_module_v2()].
29099: ** The registration remains valid until it is replaced by a different
29099: ** module or until the [database connection] closes.  The content
29099: ** of this structure must not change while it is registered with
29099: ** any database connection.
 2623: */
 2623: struct sqlite3_module {
 2623:   int iVersion;
 2623:   int (*xCreate)(sqlite3*, void *pAux,
 2623:                int argc, const char *const*argv,
 2623:                sqlite3_vtab **ppVTab, char**);
 2623:   int (*xConnect)(sqlite3*, void *pAux,
 2623:                int argc, const char *const*argv,
 2623:                sqlite3_vtab **ppVTab, char**);
 2623:   int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);
 2623:   int (*xDisconnect)(sqlite3_vtab *pVTab);
 2623:   int (*xDestroy)(sqlite3_vtab *pVTab);
 2623:   int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);
 2623:   int (*xClose)(sqlite3_vtab_cursor*);
 2623:   int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,
 2623:                 int argc, sqlite3_value **argv);
 2623:   int (*xNext)(sqlite3_vtab_cursor*);
 2623:   int (*xEof)(sqlite3_vtab_cursor*);
 2623:   int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);
10178:   int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);
10178:   int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);
 2623:   int (*xBegin)(sqlite3_vtab *pVTab);
 2623:   int (*xSync)(sqlite3_vtab *pVTab);
 2623:   int (*xCommit)(sqlite3_vtab *pVTab);
 2623:   int (*xRollback)(sqlite3_vtab *pVTab);
 2623:   int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,
 2623:                        void (**pxFunc)(sqlite3_context*,int,sqlite3_value**),
 2623:                        void **ppArg);
 4159:   int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);
 2623: };
 2623: 
 2623: /*
20545: ** CAPI3REF: Virtual Table Indexing Information {H18100} <S20400>
20545: ** KEYWORDS: sqlite3_index_info
20545: ** EXPERIMENTAL
20545: **
 2623: ** The sqlite3_index_info structure and its substructures is used to
29099: ** pass information into and receive the reply from the [xBestIndex]
29099: ** method of a [virtual table module].  The fields under **Inputs** are the
 2623: ** inputs to xBestIndex and are read-only.  xBestIndex inserts its
 2623: ** results into the **Outputs** fields.
 2623: **
20545: ** The aConstraint[] array records WHERE clause constraints of the form:
20545: **
20545: ** <pre>column OP expr</pre>
20545: **
20545: ** where OP is =, &lt;, &lt;=, &gt;, or &gt;=.  The particular operator is
20545: ** stored in aConstraint[].op.  The index of the column is stored in
 2623: ** aConstraint[].iColumn.  aConstraint[].usable is TRUE if the
 2623: ** expr on the right-hand side can be evaluated (and thus the constraint
 2623: ** is usable) and false if it cannot.
 2623: **
 2623: ** The optimizer automatically inverts terms of the form "expr OP column"
10178: ** and makes other simplifications to the WHERE clause in an attempt to
 2623: ** get as many WHERE clause terms into the form shown above as possible.
 2623: ** The aConstraint[] array only reports WHERE clause terms in the correct
 2623: ** form that refer to the particular virtual table being queried.
 2623: **
 2623: ** Information about the ORDER BY clause is stored in aOrderBy[].
 2623: ** Each term of aOrderBy records a column of the ORDER BY clause.
 2623: **
29099: ** The [xBestIndex] method must fill aConstraintUsage[] with information
 2623: ** about what parameters to pass to xFilter.  If argvIndex>0 then
 2623: ** the right-hand side of the corresponding aConstraint[] is evaluated
 2623: ** and becomes the argvIndex-th entry in argv.  If aConstraintUsage[].omit
 2623: ** is true, then the constraint is assumed to be fully handled by the
 2623: ** virtual table and is not checked again by SQLite.
 2623: **
29099: ** The idxNum and idxPtr values are recorded and passed into the
29099: ** [xFilter] method.
29099: ** [sqlite3_free()] is used to free idxPtr if and only iff
29099: ** needToFreeIdxPtr is true.
29099: **
29099: ** The orderByConsumed means that output from [xFilter]/[xNext] will occur in
 2623: ** the correct order to satisfy the ORDER BY clause so that no separate
 2623: ** sorting step is required.
 2623: **
 2623: ** The estimatedCost value is an estimate of the cost of doing the
 2623: ** particular lookup.  A full scan of a table with N entries should have
 2623: ** a cost of N.  A binary search of a table of N entries should have a
 2623: ** cost of approximately log(N).
 2623: */
 2623: struct sqlite3_index_info {
 2623:   /* Inputs */
10178:   int nConstraint;           /* Number of entries in aConstraint */
10178:   struct sqlite3_index_constraint {
 2623:      int iColumn;              /* Column on left-hand side of constraint */
 2623:      unsigned char op;         /* Constraint operator */
 2623:      unsigned char usable;     /* True if this constraint is usable */
 2623:      int iTermOffset;          /* Used internally - xBestIndex should ignore */
10178:   } *aConstraint;            /* Table of WHERE clause constraints */
10178:   int nOrderBy;              /* Number of terms in the ORDER BY clause */
10178:   struct sqlite3_index_orderby {
 2623:      int iColumn;              /* Column number */
 2623:      unsigned char desc;       /* True for DESC.  False for ASC. */
10178:   } *aOrderBy;               /* The ORDER BY clause */
 2623:   /* Outputs */
 2623:   struct sqlite3_index_constraint_usage {
 2623:     int argvIndex;           /* if >0, constraint is part of argv to xFilter */
 2623:     unsigned char omit;      /* Do not code a test for this constraint */
10178:   } *aConstraintUsage;
 2623:   int idxNum;                /* Number used to identify the index */
 2623:   char *idxStr;              /* String, possibly obtained from sqlite3_malloc */
 2623:   int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */
 2623:   int orderByConsumed;       /* True if output is already ordered */
 2623:   double estimatedCost;      /* Estimated cost of using this index */
 2623: };
 2623: #define SQLITE_INDEX_CONSTRAINT_EQ    2
 2623: #define SQLITE_INDEX_CONSTRAINT_GT    4
 2623: #define SQLITE_INDEX_CONSTRAINT_LE    8
 2623: #define SQLITE_INDEX_CONSTRAINT_LT    16
 2623: #define SQLITE_INDEX_CONSTRAINT_GE    32
 2623: #define SQLITE_INDEX_CONSTRAINT_MATCH 64
 2623: 
 2623: /*
20545: ** CAPI3REF: Register A Virtual Table Implementation {H18200} <S20400>
20545: ** EXPERIMENTAL
20545: **
29099: ** This routine is used to register a new [virtual table module] name.
29099: ** Module names must be registered before
29099: ** creating a new [virtual table] using the module, or before using a
29099: ** preexisting [virtual table] for the module.
29099: **
29099: ** The module name is registered on the [database connection] specified
29099: ** by the first parameter.  The name of the module is given by the 
29099: ** second parameter.  The third parameter is a pointer to
29099: ** the implementation of the [virtual table module].   The fourth
29099: ** parameter is an arbitrary client data pointer that is passed through
29099: ** into the [xCreate] and [xConnect] methods of the virtual table module
29099: ** when a new virtual table is be being created or reinitialized.
29099: **
29099: ** This interface has exactly the same effect as calling
29099: ** [sqlite3_create_module_v2()] with a NULL client data destructor.
 2623: */
34100: SQLITE_EXPERIMENTAL int sqlite3_create_module(
 2623:   sqlite3 *db,               /* SQLite connection to register module with */
 2623:   const char *zName,         /* Name of the module */
29099:   const sqlite3_module *p,   /* Methods for the module */
29099:   void *pClientData          /* Client data for xCreate/xConnect */
 2623: );
 2623: 
 2623: /*
20545: ** CAPI3REF: Register A Virtual Table Implementation {H18210} <S20400>
20545: ** EXPERIMENTAL
20545: **
29099: ** This routine is identical to the [sqlite3_create_module()] method,
29099: ** except that it has an extra parameter to specify 
29099: ** a destructor function for the client data pointer.  SQLite will
29099: ** invoke the destructor function (if it is not NULL) when SQLite
29099: ** no longer needs the pClientData pointer.  
 4159: */
34100: SQLITE_EXPERIMENTAL int sqlite3_create_module_v2(
 4159:   sqlite3 *db,               /* SQLite connection to register module with */
 4159:   const char *zName,         /* Name of the module */
29099:   const sqlite3_module *p,   /* Methods for the module */
29099:   void *pClientData,         /* Client data for xCreate/xConnect */
 4159:   void(*xDestroy)(void*)     /* Module destructor function */
 4159: );
 4159: 
 4159: /*
20545: ** CAPI3REF: Virtual Table Instance Object {H18010} <S20400>
20545: ** KEYWORDS: sqlite3_vtab
20545: ** EXPERIMENTAL
20545: **
29099: ** Every [virtual table module] implementation uses a subclass
29099: ** of the following structure to describe a particular instance
29099: ** of the [virtual table].  Each subclass will
20545: ** be tailored to the specific needs of the module implementation.
20545: ** The purpose of this superclass is to define certain fields that are
20545: ** common to all module implementations.
 2623: **
 2623: ** Virtual tables methods can set an error message by assigning a
20545: ** string obtained from [sqlite3_mprintf()] to zErrMsg.  The method should
20545: ** take care that any prior string is freed by a call to [sqlite3_free()]
 2623: ** prior to assigning a new string to zErrMsg.  After the error message
 2623: ** is delivered up to the client application, the string will be automatically
29099: ** freed by sqlite3_free() and the zErrMsg field will be zeroed.
 2623: */
 2623: struct sqlite3_vtab {
 2623:   const sqlite3_module *pModule;  /* The module for this virtual table */
34100:   int nRef;                       /* Used internally */
 2623:   char *zErrMsg;                  /* Error message from sqlite3_mprintf() */
 2623:   /* Virtual table implementations will typically add additional fields */
 2623: };
 2623: 
20545: /*
20545: ** CAPI3REF: Virtual Table Cursor Object  {H18020} <S20400>
29099: ** KEYWORDS: sqlite3_vtab_cursor {virtual table cursor}
20545: ** EXPERIMENTAL
20545: **
29099: ** Every [virtual table module] implementation uses a subclass of the
29099: ** following structure to describe cursors that point into the
29099: ** [virtual table] and are used
 2623: ** to loop through the virtual table.  Cursors are created using the
29099: ** [sqlite3_module.xOpen | xOpen] method of the module and are destroyed
29099: ** by the [sqlite3_module.xClose | xClose] method.  Cussors are used
29099: ** by the [xFilter], [xNext], [xEof], [xColumn], and [xRowid] methods
29099: ** of the module.  Each module implementation will define
 2623: ** the content of a cursor structure to suit its own needs.
 2623: **
 2623: ** This superclass exists in order to define fields of the cursor that
 2623: ** are common to all implementations.
 2623: */
 2623: struct sqlite3_vtab_cursor {
 2623:   sqlite3_vtab *pVtab;      /* Virtual table of this cursor */
 2623:   /* Virtual table implementations will typically add additional fields */
 2623: };
 2623: 
 2623: /*
20545: ** CAPI3REF: Declare The Schema Of A Virtual Table {H18280} <S20400>
20545: ** EXPERIMENTAL
20545: **
29099: ** The [xCreate] and [xConnect] methods of a
29099: ** [virtual table module] call this interface
 2623: ** to declare the format (the names and datatypes of the columns) of
 2623: ** the virtual tables they implement.
 2623: */
34100: SQLITE_EXPERIMENTAL int sqlite3_declare_vtab(sqlite3*, const char *zSQL);
 2623: 
 2623: /*
20545: ** CAPI3REF: Overload A Function For A Virtual Table {H18300} <S20400>
20545: ** EXPERIMENTAL
20545: **
 2623: ** Virtual tables can provide alternative implementations of functions
29099: ** using the [xFindFunction] method of the [virtual table module].  
29099: ** But global versions of those functions
 2623: ** must exist in order to be overloaded.
 2623: **
 2623: ** This API makes sure a global version of a function with a particular
 2623: ** name and number of parameters exists.  If no such function exists
 2623: ** before this API is called, a new function is created.  The implementation
 2623: ** of the new function always causes an exception to be thrown.  So
 2623: ** the new function is not good for anything by itself.  Its only
20545: ** purpose is to be a placeholder function that can be overloaded
29099: ** by a [virtual table].
 2623: */
34100: SQLITE_EXPERIMENTAL int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);
 2623: 
 2623: /*
 2623: ** The interface to the virtual-table mechanism defined above (back up
 2623: ** to a comment remarkably similar to this one) is currently considered
 2623: ** to be experimental.  The interface might change in incompatible ways.
 2623: ** If this is a problem for you, do not use the interface at this time.
 2623: **
10178: ** When the virtual-table mechanism stabilizes, we will declare the
 2623: ** interface fixed, support it indefinitely, and remove this comment.
 2623: **
 2623: ****** EXPERIMENTAL - subject to change without notice **************
 2623: */
 2623: 
 2623: /*
20545: ** CAPI3REF: A Handle To An Open BLOB {H17800} <S30230>
20545: ** KEYWORDS: {BLOB handle} {BLOB handles}
20545: **
20545: ** An instance of this object represents an open BLOB on which
20545: ** [sqlite3_blob_open | incremental BLOB I/O] can be performed.
20545: ** Objects of this type are created by [sqlite3_blob_open()]
20545: ** and destroyed by [sqlite3_blob_close()].
 4159: ** The [sqlite3_blob_read()] and [sqlite3_blob_write()] interfaces
20545: ** can be used to read or write small subsections of the BLOB.
20545: ** The [sqlite3_blob_bytes()] interface returns the size of the BLOB in bytes.
 4159: */
 4159: typedef struct sqlite3_blob sqlite3_blob;
 4159: 
 4159: /*
20545: ** CAPI3REF: Open A BLOB For Incremental I/O {H17810} <S30230>
20545: **
20545: ** This interfaces opens a [BLOB handle | handle] to the BLOB located
20545: ** in row iRow, column zColumn, table zTable in database zDb;
20545: ** in other words, the same BLOB that would be selected by:
 4159: **
 4159: ** <pre>
23606: **     SELECT zColumn FROM zDb.zTable WHERE [rowid] = iRow;
10178: ** </pre> {END}
10178: **
31098: ** If the flags parameter is non-zero, then the BLOB is opened for read
20545: ** and write access. If it is zero, the BLOB is opened for read access.
20545: **
20545: ** Note that the database name is not the filename that contains
20545: ** the database but rather the symbolic name of the database that
20545: ** is assigned when the database is connected using [ATTACH].
20545: ** For the main database file, the database name is "main".
20545: ** For TEMP tables, the database name is "temp".
20545: **
20545: ** On success, [SQLITE_OK] is returned and the new [BLOB handle] is written
31098: ** to *ppBlob. Otherwise an [error code] is returned and *ppBlob is set
31098: ** to be a null pointer.
20545: ** This function sets the [database connection] error code and message
31098: ** accessible via [sqlite3_errcode()] and [sqlite3_errmsg()] and related
31098: ** functions.  Note that the *ppBlob variable is always initialized in a
31098: ** way that makes it safe to invoke [sqlite3_blob_close()] on *ppBlob
31098: ** regardless of the success or failure of this routine.
20545: **
20545: ** If the row that a BLOB handle points to is modified by an
20545: ** [UPDATE], [DELETE], or by [ON CONFLICT] side-effects
20545: ** then the BLOB handle is marked as "expired".
20545: ** This is true if any column of the row is changed, even a column
20545: ** other than the one the BLOB handle is open on.
20545: ** Calls to [sqlite3_blob_read()] and [sqlite3_blob_write()] for
20545: ** a expired BLOB handle fail with an return code of [SQLITE_ABORT].
20545: ** Changes written into a BLOB prior to the BLOB expiring are not
20545: ** rollback by the expiration of the BLOB.  Such changes will eventually
20545: ** commit if the transaction continues to completion.
20545: **
31098: ** Use the [sqlite3_blob_bytes()] interface to determine the size of
31098: ** the opened blob.  The size of a blob may not be changed by this
34100: ** underface.  Use the [UPDATE] SQL command to change the size of a
31098: ** blob.
31098: **
31098: ** The [sqlite3_bind_zeroblob()] and [sqlite3_result_zeroblob()] interfaces
31098: ** and the built-in [zeroblob] SQL function can be used, if desired,
31098: ** to create an empty, zero-filled blob in which to read or write using
31098: ** this interface.
31098: **
31098: ** To avoid a resource leak, every open [BLOB handle] should eventually
31098: ** be released by a call to [sqlite3_blob_close()].
31098: **
29099: ** Requirements:
29099: ** [H17813] [H17814] [H17816] [H17819] [H17821] [H17824]
 4159: */
34100: int sqlite3_blob_open(
 4159:   sqlite3*,
 4159:   const char *zDb,
 4159:   const char *zTable,
 4159:   const char *zColumn,
10178:   sqlite3_int64 iRow,
 4159:   int flags,
 4159:   sqlite3_blob **ppBlob
 4159: );
 4159: 
 4159: /*
20545: ** CAPI3REF: Close A BLOB Handle {H17830} <S30230>
20545: **
20545: ** Closes an open [BLOB handle].
20545: **
20545: ** Closing a BLOB shall cause the current transaction to commit
10178: ** if there are no other BLOBs, no pending prepared statements, and the
20545: ** database connection is in [autocommit mode].
20545: ** If any writes were made to the BLOB, they might be held in cache
31098: ** until the close operation if they will fit.
20545: **
10178: ** Closing the BLOB often forces the changes
10178: ** out to disk and so if any I/O errors occur, they will likely occur
31098: ** at the time when the BLOB is closed.  Any errors that occur during
10178: ** closing are reported as a non-zero return value.
10178: **
20545: ** The BLOB is closed unconditionally.  Even if this routine returns
10178: ** an error code, the BLOB is still closed.
20545: **
31098: ** Calling this routine with a null pointer (which as would be returned
31098: ** by failed call to [sqlite3_blob_open()]) is a harmless no-op.
31098: **
29099: ** Requirements:
29099: ** [H17833] [H17836] [H17839]
 4159: */
34100: int sqlite3_blob_close(sqlite3_blob *);
 4159: 
 4159: /*
20545: ** CAPI3REF: Return The Size Of An Open BLOB {H17840} <S30230>
20545: **
31098: ** Returns the size in bytes of the BLOB accessible via the 
31098: ** successfully opened [BLOB handle] in its only argument.  The
31098: ** incremental blob I/O routines can only read or overwriting existing
31098: ** blob content; they cannot change the size of a blob.
31098: **
31098: ** This routine only works on a [BLOB handle] which has been created
31098: ** by a prior successful call to [sqlite3_blob_open()] and which has not
31098: ** been closed by [sqlite3_blob_close()].  Passing any other pointer in
31098: ** to this routine results in undefined and probably undesirable behavior.
20545: **
29099: ** Requirements:
29099: ** [H17843]
 4159: */
34100: int sqlite3_blob_bytes(sqlite3_blob *);
 4159: 
 4159: /*
20545: ** CAPI3REF: Read Data From A BLOB Incrementally {H17850} <S30230>
20545: **
20545: ** This function is used to read data from an open [BLOB handle] into a
20545: ** caller-supplied buffer. N bytes of data are copied into buffer Z
20545: ** from the open BLOB, starting at offset iOffset.
20545: **
20545: ** If offset iOffset is less than N bytes from the end of the BLOB,
20545: ** [SQLITE_ERROR] is returned and no data is read.  If N or iOffset is
20545: ** less than zero, [SQLITE_ERROR] is returned and no data is read.
31098: ** The size of the blob (and hence the maximum value of N+iOffset)
31098: ** can be determined using the [sqlite3_blob_bytes()] interface.
20545: **
20545: ** An attempt to read from an expired [BLOB handle] fails with an
20545: ** error code of [SQLITE_ABORT].
20545: **
20545: ** On success, SQLITE_OK is returned.
20545: ** Otherwise, an [error code] or an [extended error code] is returned.
20545: **
31098: ** This routine only works on a [BLOB handle] which has been created
31098: ** by a prior successful call to [sqlite3_blob_open()] and which has not
31098: ** been closed by [sqlite3_blob_close()].  Passing any other pointer in
31098: ** to this routine results in undefined and probably undesirable behavior.
31098: **
31098: ** See also: [sqlite3_blob_write()].
31098: **
29099: ** Requirements:
29099: ** [H17853] [H17856] [H17859] [H17862] [H17863] [H17865] [H17868]
 4159: */
34100: int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
 4159: 
 4159: /*
20545: ** CAPI3REF: Write Data Into A BLOB Incrementally {H17870} <S30230>
20545: **
20545: ** This function is used to write data into an open [BLOB handle] from a
20545: ** caller-supplied buffer. N bytes of data are copied from the buffer Z
20545: ** into the open BLOB, starting at offset iOffset.
20545: **
20545: ** If the [BLOB handle] passed as the first argument was not opened for
20545: ** writing (the flags parameter to [sqlite3_blob_open()] was zero),
20545: ** this function returns [SQLITE_READONLY].
20545: **
20545: ** This function may only modify the contents of the BLOB; it is
20545: ** not possible to increase the size of a BLOB using this API.
20545: ** If offset iOffset is less than N bytes from the end of the BLOB,
20545: ** [SQLITE_ERROR] is returned and no data is written.  If N is
10178: ** less than zero [SQLITE_ERROR] is returned and no data is written.
31098: ** The size of the BLOB (and hence the maximum value of N+iOffset)
31098: ** can be determined using the [sqlite3_blob_bytes()] interface.
10178: **
20545: ** An attempt to write to an expired [BLOB handle] fails with an
20545: ** error code of [SQLITE_ABORT].  Writes to the BLOB that occurred
20545: ** before the [BLOB handle] expired are not rolled back by the
20545: ** expiration of the handle, though of course those changes might
20545: ** have been overwritten by the statement that expired the BLOB handle
20545: ** or by other independent statements.
20545: **
20545: ** On success, SQLITE_OK is returned.
20545: ** Otherwise, an  [error code] or an [extended error code] is returned.
20545: **
31098: ** This routine only works on a [BLOB handle] which has been created
31098: ** by a prior successful call to [sqlite3_blob_open()] and which has not
31098: ** been closed by [sqlite3_blob_close()].  Passing any other pointer in
31098: ** to this routine results in undefined and probably undesirable behavior.
31098: **
31098: ** See also: [sqlite3_blob_read()].
31098: **
29099: ** Requirements:
29099: ** [H17873] [H17874] [H17875] [H17876] [H17877] [H17879] [H17882] [H17885]
29099: ** [H17888]
 4159: */
34100: int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);
 4159: 
 4159: /*
20545: ** CAPI3REF: Virtual File System Objects {H11200} <S20100>
10178: **
10178: ** A virtual filesystem (VFS) is an [sqlite3_vfs] object
10178: ** that SQLite uses to interact
20545: ** with the underlying operating system.  Most SQLite builds come with a
10178: ** single default VFS that is appropriate for the host computer.
10178: ** New VFSes can be registered and existing VFSes can be unregistered.
10178: ** The following interfaces are provided.
10178: **
20545: ** The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.
20545: ** Names are case sensitive.
20545: ** Names are zero-terminated UTF-8 strings.
20545: ** If there is no match, a NULL pointer is returned.
20545: ** If zVfsName is NULL then the default VFS is returned.
20545: **
20545: ** New VFSes are registered with sqlite3_vfs_register().
20545: ** Each new VFS becomes the default VFS if the makeDflt flag is set.
20545: ** The same VFS can be registered multiple times without injury.
20545: ** To make an existing VFS into the default VFS, register it again
20545: ** with the makeDflt flag set.  If two different VFSes with the
20545: ** same name are registered, the behavior is undefined.  If a
10178: ** VFS is registered with a name that is NULL or an empty string,
10178: ** then the behavior is undefined.
10178: **
20545: ** Unregister a VFS with the sqlite3_vfs_unregister() interface.
20545: ** If the default VFS is unregistered, another VFS is chosen as
10178: ** the default.  The choice for the new VFS is arbitrary.
20545: **
29099: ** Requirements:
29099: ** [H11203] [H11206] [H11209] [H11212] [H11215] [H11218]
10178: */
34100: sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
34100: int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);
34100: int sqlite3_vfs_unregister(sqlite3_vfs*);
10178: 
10178: /*
20545: ** CAPI3REF: Mutexes {H17000} <S20000>
10178: **
10178: ** The SQLite core uses these routines for thread
10178: ** synchronization. Though they are intended for internal
10178: ** use by SQLite, code that links against SQLite is
10178: ** permitted to use any of these routines.
10178: **
10178: ** The SQLite source code contains multiple implementations
10178: ** of these mutex routines.  An appropriate implementation
10178: ** is selected automatically at compile-time.  The following
10178: ** implementations are available in the SQLite core:
10178: **
10178: ** <ul>
10178: ** <li>   SQLITE_MUTEX_OS2
10178: ** <li>   SQLITE_MUTEX_PTHREAD
10178: ** <li>   SQLITE_MUTEX_W32
10178: ** <li>   SQLITE_MUTEX_NOOP
10178: ** </ul>
10178: **
10178: ** The SQLITE_MUTEX_NOOP implementation is a set of routines
10178: ** that does no real locking and is appropriate for use in
10178: ** a single-threaded application.  The SQLITE_MUTEX_OS2,
10178: ** SQLITE_MUTEX_PTHREAD, and SQLITE_MUTEX_W32 implementations
20545: ** are appropriate for use on OS/2, Unix, and Windows.
10178: **
10178: ** If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor
10178: ** macro defined (with "-DSQLITE_MUTEX_APPDEF=1"), then no mutex
20545: ** implementation is included with the library. In this case the
20545: ** application must supply a custom mutex implementation using the
20545: ** [SQLITE_CONFIG_MUTEX] option of the sqlite3_config() function
20545: ** before calling sqlite3_initialize() or any other public sqlite3_
20545: ** function that calls sqlite3_initialize().
20545: **
20545: ** {H17011} The sqlite3_mutex_alloc() routine allocates a new
20545: ** mutex and returns a pointer to it. {H17012} If it returns NULL
20545: ** that means that a mutex could not be allocated. {H17013} SQLite
20545: ** will unwind its stack and return an error. {H17014} The argument
10178: ** to sqlite3_mutex_alloc() is one of these integer constants:
10178: **
10178: ** <ul>
10178: ** <li>  SQLITE_MUTEX_FAST
10178: ** <li>  SQLITE_MUTEX_RECURSIVE
10178: ** <li>  SQLITE_MUTEX_STATIC_MASTER
10178: ** <li>  SQLITE_MUTEX_STATIC_MEM
10178: ** <li>  SQLITE_MUTEX_STATIC_MEM2
10178: ** <li>  SQLITE_MUTEX_STATIC_PRNG
10178: ** <li>  SQLITE_MUTEX_STATIC_LRU
20545: ** <li>  SQLITE_MUTEX_STATIC_LRU2
20545: ** </ul>
20545: **
20545: ** {H17015} The first two constants cause sqlite3_mutex_alloc() to create
10178: ** a new mutex.  The new mutex is recursive when SQLITE_MUTEX_RECURSIVE
10178: ** is used but not necessarily so when SQLITE_MUTEX_FAST is used. {END}
10178: ** The mutex implementation does not need to make a distinction
10178: ** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does
20545: ** not want to.  {H17016} But SQLite will only request a recursive mutex in
10178: ** cases where it really needs one.  {END} If a faster non-recursive mutex
10178: ** implementation is available on the host platform, the mutex subsystem
10178: ** might return such a mutex in response to SQLITE_MUTEX_FAST.
10178: **
20545: ** {H17017} The other allowed parameters to sqlite3_mutex_alloc() each return
34100: ** a pointer to a static preexisting mutex. {END}  Four static mutexes are
10178: ** used by the current version of SQLite.  Future versions of SQLite
10178: ** may add additional static mutexes.  Static mutexes are for internal
10178: ** use by SQLite only.  Applications that use SQLite mutexes should
10178: ** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or
10178: ** SQLITE_MUTEX_RECURSIVE.
10178: **
20545: ** {H17018} Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST
10178: ** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc()
20545: ** returns a different mutex on every call.  {H17034} But for the static
10178: ** mutex types, the same mutex is returned on every call that has
20545: ** the same type number.
20545: **
20545: ** {H17019} The sqlite3_mutex_free() routine deallocates a previously
20545: ** allocated dynamic mutex. {H17020} SQLite is careful to deallocate every
20545: ** dynamic mutex that it allocates. {A17021} The dynamic mutexes must not be in
20545: ** use when they are deallocated. {A17022} Attempting to deallocate a static
20545: ** mutex results in undefined behavior. {H17023} SQLite never deallocates
10178: ** a static mutex. {END}
10178: **
10178: ** The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt
20545: ** to enter a mutex. {H17024} If another thread is already within the mutex,
10178: ** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return
20545: ** SQLITE_BUSY. {H17025}  The sqlite3_mutex_try() interface returns [SQLITE_OK]
20545: ** upon successful entry.  {H17026} Mutexes created using
10178: ** SQLITE_MUTEX_RECURSIVE can be entered multiple times by the same thread.
20545: ** {H17027} In such cases the,
10178: ** mutex must be exited an equal number of times before another thread
20545: ** can enter.  {A17028} If the same thread tries to enter any other
10178: ** kind of mutex more than once, the behavior is undefined.
20545: ** {H17029} SQLite will never exhibit
20545: ** such behavior in its own use of mutexes.
20545: **
20545: ** Some systems (for example, Windows 95) do not support the operation
20545: ** implemented by sqlite3_mutex_try().  On those systems, sqlite3_mutex_try()
20545: ** will always return SQLITE_BUSY.  {H17030} The SQLite core only ever uses
20545: ** sqlite3_mutex_try() as an optimization so this is acceptable behavior.
20545: **
20545: ** {H17031} The sqlite3_mutex_leave() routine exits a mutex that was
20545: ** previously entered by the same thread.  {A17032} The behavior
10178: ** is undefined if the mutex is not currently entered by the
20545: ** calling thread or is not currently allocated.  {H17033} SQLite will
10178: ** never do either. {END}
10178: **
20545: ** If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(), or
20545: ** sqlite3_mutex_leave() is a NULL pointer, then all three routines
20545: ** behave as no-ops.
20545: **
10178: ** See also: [sqlite3_mutex_held()] and [sqlite3_mutex_notheld()].
10178: */
34100: sqlite3_mutex *sqlite3_mutex_alloc(int);
34100: void sqlite3_mutex_free(sqlite3_mutex*);
34100: void sqlite3_mutex_enter(sqlite3_mutex*);
34100: int sqlite3_mutex_try(sqlite3_mutex*);
34100: void sqlite3_mutex_leave(sqlite3_mutex*);
10178: 
10178: /*
20545: ** CAPI3REF: Mutex Methods Object {H17120} <S20130>
20545: ** EXPERIMENTAL
20545: **
20545: ** An instance of this structure defines the low-level routines
20545: ** used to allocate and use mutexes.
20545: **
20545: ** Usually, the default mutex implementations provided by SQLite are
20545: ** sufficient, however the user has the option of substituting a custom
20545: ** implementation for specialized deployments or systems for which SQLite
20545: ** does not provide a suitable implementation. In this case, the user
20545: ** creates and populates an instance of this structure to pass
20545: ** to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.
20545: ** Additionally, an instance of this structure can be used as an
20545: ** output variable when querying the system for the current mutex
20545: ** implementation, using the [SQLITE_CONFIG_GETMUTEX] option.
20545: **
20545: ** The xMutexInit method defined by this structure is invoked as
20545: ** part of system initialization by the sqlite3_initialize() function.
20545: ** {H17001} The xMutexInit routine shall be called by SQLite once for each
20545: ** effective call to [sqlite3_initialize()].
20545: **
20545: ** The xMutexEnd method defined by this structure is invoked as
20545: ** part of system shutdown by the sqlite3_shutdown() function. The
20545: ** implementation of this method is expected to release all outstanding
20545: ** resources obtained by the mutex methods implementation, especially
20545: ** those obtained by the xMutexInit method. {H17003} The xMutexEnd()
20545: ** interface shall be invoked once for each call to [sqlite3_shutdown()].
20545: **
20545: ** The remaining seven methods defined by this structure (xMutexAlloc,
20545: ** xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and
20545: ** xMutexNotheld) implement the following interfaces (respectively):
20545: **
20545: ** <ul>
20545: **   <li>  [sqlite3_mutex_alloc()] </li>
20545: **   <li>  [sqlite3_mutex_free()] </li>
20545: **   <li>  [sqlite3_mutex_enter()] </li>
20545: **   <li>  [sqlite3_mutex_try()] </li>
20545: **   <li>  [sqlite3_mutex_leave()] </li>
20545: **   <li>  [sqlite3_mutex_held()] </li>
20545: **   <li>  [sqlite3_mutex_notheld()] </li>
20545: ** </ul>
20545: **
20545: ** The only difference is that the public sqlite3_XXX functions enumerated
20545: ** above silently ignore any invocations that pass a NULL pointer instead
20545: ** of a valid mutex handle. The implementations of the methods defined
20545: ** by this structure are not required to handle this case, the results
20545: ** of passing a NULL pointer instead of a valid mutex handle are undefined
20545: ** (i.e. it is acceptable to provide an implementation that segfaults if
20545: ** it is passed a NULL pointer).
20545: */
20545: typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;
20545: struct sqlite3_mutex_methods {
20545:   int (*xMutexInit)(void);
20545:   int (*xMutexEnd)(void);
20545:   sqlite3_mutex *(*xMutexAlloc)(int);
20545:   void (*xMutexFree)(sqlite3_mutex *);
20545:   void (*xMutexEnter)(sqlite3_mutex *);
20545:   int (*xMutexTry)(sqlite3_mutex *);
20545:   void (*xMutexLeave)(sqlite3_mutex *);
20545:   int (*xMutexHeld)(sqlite3_mutex *);
20545:   int (*xMutexNotheld)(sqlite3_mutex *);
20545: };
20545: 
20545: /*
20545: ** CAPI3REF: Mutex Verification Routines {H17080} <S20130> <S30800>
10178: **
10178: ** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routines
20545: ** are intended for use inside assert() statements. {H17081} The SQLite core
10178: ** never uses these routines except inside an assert() and applications
20545: ** are advised to follow the lead of the core.  {H17082} The core only
10178: ** provides implementations for these routines when it is compiled
20545: ** with the SQLITE_DEBUG flag.  {A17087} External mutex implementations
10178: ** are only required to provide these routines if SQLITE_DEBUG is
10178: ** defined and if NDEBUG is not defined.
10178: **
20545: ** {H17083} These routines should return true if the mutex in their argument
20545: ** is held or not held, respectively, by the calling thread.
10178: **
10178: ** {X17084} The implementation is not required to provided versions of these
20545: ** routines that actually work. If the implementation does not provide working
20545: ** versions of these routines, it should at least provide stubs that always
20545: ** return true so that one does not get spurious assertion failures.
20545: **
20545: ** {H17085} If the argument to sqlite3_mutex_held() is a NULL pointer then
10178: ** the routine should return 1.  {END} This seems counter-intuitive since
10178: ** clearly the mutex cannot be held if it does not exist.  But the
10178: ** the reason the mutex does not exist is because the build is not
10178: ** using mutexes.  And we do not want the assert() containing the
10178: ** call to sqlite3_mutex_held() to fail, so a non-zero return is
20545: ** the appropriate thing to do.  {H17086} The sqlite3_mutex_notheld()
10178: ** interface should also return 1 when given a NULL pointer.
10178: */
34100: int sqlite3_mutex_held(sqlite3_mutex*);
34100: int sqlite3_mutex_notheld(sqlite3_mutex*);
10178: 
10178: /*
20545: ** CAPI3REF: Mutex Types {H17001} <H17000>
20545: **
20545: ** The [sqlite3_mutex_alloc()] interface takes a single argument
20545: ** which is one of these integer constants.
20545: **
20545: ** The set of static mutexes may change from one SQLite release to the
20545: ** next.  Applications that override the built-in mutex logic must be
20545: ** prepared to accommodate additional static mutexes.
10178: */
10178: #define SQLITE_MUTEX_FAST             0
10178: #define SQLITE_MUTEX_RECURSIVE        1
10178: #define SQLITE_MUTEX_STATIC_MASTER    2
10178: #define SQLITE_MUTEX_STATIC_MEM       3  /* sqlite3_malloc() */
29099: #define SQLITE_MUTEX_STATIC_MEM2      4  /* NOT USED */
29099: #define SQLITE_MUTEX_STATIC_OPEN      4  /* sqlite3BtreeOpen() */
10178: #define SQLITE_MUTEX_STATIC_PRNG      5  /* sqlite3_random() */
10178: #define SQLITE_MUTEX_STATIC_LRU       6  /* lru page list */
20545: #define SQLITE_MUTEX_STATIC_LRU2      7  /* lru page list */
10178: 
10178: /*
22150: ** CAPI3REF: Retrieve the mutex for a database connection {H17002} <H17000>
22150: **
22150: ** This interface returns a pointer the [sqlite3_mutex] object that 
22150: ** serializes access to the [database connection] given in the argument
22150: ** when the [threading mode] is Serialized.
22150: ** If the [threading mode] is Single-thread or Multi-thread then this
22150: ** routine returns a NULL pointer.
22150: */
34100: sqlite3_mutex *sqlite3_db_mutex(sqlite3*);
22150: 
22150: /*
20545: ** CAPI3REF: Low-Level Control Of Database Files {H11300} <S30800>
20545: **
20545: ** {H11301} The [sqlite3_file_control()] interface makes a direct call to the
10178: ** xFileControl method for the [sqlite3_io_methods] object associated
20545: ** with a particular database identified by the second argument. {H11302} The
10178: ** name of the database is the name assigned to the database by the
10178: ** <a href="lang_attach.html">ATTACH</a> SQL command that opened the
20545: ** database. {H11303} To control the main database file, use the name "main"
20545: ** or a NULL pointer. {H11304} The third and fourth parameters to this routine
10178: ** are passed directly through to the second and third parameters of
20545: ** the xFileControl method.  {H11305} The return value of the xFileControl
10178: ** method becomes the return value of this routine.
10178: **
20545: ** {H11306} If the second parameter (zDbName) does not match the name of any
20545: ** open database file, then SQLITE_ERROR is returned. {H11307} This error
10178: ** code is not remembered and will not be recalled by [sqlite3_errcode()]
20545: ** or [sqlite3_errmsg()]. {A11308} The underlying xFileControl method might
20545: ** also return SQLITE_ERROR.  {A11309} There is no way to distinguish between
10178: ** an incorrect zDbName and an SQLITE_ERROR return from the underlying
10178: ** xFileControl method. {END}
10178: **
10178: ** See also: [SQLITE_FCNTL_LOCKSTATE]
10178: */
34100: int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);
10178: 
10178: /*
20545: ** CAPI3REF: Testing Interface {H11400} <S30800>
20545: **
20545: ** The sqlite3_test_control() interface is used to read out internal
20545: ** state of SQLite and to inject faults into SQLite for testing
20545: ** purposes.  The first parameter is an operation code that determines
20545: ** the number, meaning, and operation of all subsequent parameters.
20545: **
20545: ** This interface is not for use by applications.  It exists solely
20545: ** for verifying the correct operation of the SQLite library.  Depending
20545: ** on how the SQLite library is compiled, this interface might not exist.
20545: **
20545: ** The details of the operation codes, their meanings, the parameters
20545: ** they take, and what they do are all subject to change without notice.
20545: ** Unlike most of the SQLite API, this function is not guaranteed to
20545: ** operate consistently from one release to the next.
20545: */
34100: int sqlite3_test_control(int op, ...);
20545: 
20545: /*
20545: ** CAPI3REF: Testing Interface Operation Codes {H11410} <H11400>
20545: **
20545: ** These constants are the valid operation code parameters used
20545: ** as the first argument to [sqlite3_test_control()].
20545: **
20545: ** These parameters and their meanings are subject to change
20545: ** without notice.  These values are for testing purposes only.
20545: ** Applications should not use any of these parameters or the
20545: ** [sqlite3_test_control()] interface.
20545: */
20545: #define SQLITE_TESTCTRL_PRNG_SAVE                5
20545: #define SQLITE_TESTCTRL_PRNG_RESTORE             6
20545: #define SQLITE_TESTCTRL_PRNG_RESET               7
20545: #define SQLITE_TESTCTRL_BITVEC_TEST              8
20545: #define SQLITE_TESTCTRL_FAULT_INSTALL            9
20545: #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10
29099: #define SQLITE_TESTCTRL_PENDING_BYTE            11
31098: #define SQLITE_TESTCTRL_ASSERT                  12
31098: #define SQLITE_TESTCTRL_ALWAYS                  13
20545: 
20545: /*
20545: ** CAPI3REF: SQLite Runtime Status {H17200} <S60200>
20545: ** EXPERIMENTAL
20545: **
20545: ** This interface is used to retrieve runtime status information
20545: ** about the preformance of SQLite, and optionally to reset various
20545: ** highwater marks.  The first argument is an integer code for
20545: ** the specific parameter to measure.  Recognized integer codes
20545: ** are of the form [SQLITE_STATUS_MEMORY_USED | SQLITE_STATUS_...].
20545: ** The current value of the parameter is returned into *pCurrent.
20545: ** The highest recorded value is returned in *pHighwater.  If the
20545: ** resetFlag is true, then the highest record value is reset after
20545: ** *pHighwater is written. Some parameters do not record the highest
20545: ** value.  For those parameters
20545: ** nothing is written into *pHighwater and the resetFlag is ignored.
20545: ** Other parameters record only the highwater mark and not the current
20545: ** value.  For these latter parameters nothing is written into *pCurrent.
20545: **
20545: ** This routine returns SQLITE_OK on success and a non-zero
20545: ** [error code] on failure.
20545: **
34100: ** This routine is threadsafe but is not atomic.  This routine can
20545: ** called while other threads are running the same or different SQLite
20545: ** interfaces.  However the values returned in *pCurrent and
20545: ** *pHighwater reflect the status of SQLite at different points in time
20545: ** and it is possible that another thread might change the parameter
20545: ** in between the times when *pCurrent and *pHighwater are written.
20545: **
20545: ** See also: [sqlite3_db_status()]
20545: */
34100: SQLITE_EXPERIMENTAL int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
20545: 
20545: 
20545: /*
20545: ** CAPI3REF: Status Parameters {H17250} <H17200>
20545: ** EXPERIMENTAL
20545: **
20545: ** These integer constants designate various run-time status parameters
20545: ** that can be returned by [sqlite3_status()].
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_STATUS_MEMORY_USED</dt>
20545: ** <dd>This parameter is the current amount of memory checked out
20545: ** using [sqlite3_malloc()], either directly or indirectly.  The
20545: ** figure includes calls made to [sqlite3_malloc()] by the application
20545: ** and internal memory usage by the SQLite library.  Scratch memory
20545: ** controlled by [SQLITE_CONFIG_SCRATCH] and auxiliary page-cache
20545: ** memory controlled by [SQLITE_CONFIG_PAGECACHE] is not included in
20545: ** this parameter.  The amount returned is the sum of the allocation
20545: ** sizes as reported by the xSize method in [sqlite3_mem_methods].</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_MALLOC_SIZE</dt>
20545: ** <dd>This parameter records the largest memory allocation request
20545: ** handed to [sqlite3_malloc()] or [sqlite3_realloc()] (or their
20545: ** internal equivalents).  Only the value returned in the
20545: ** *pHighwater parameter to [sqlite3_status()] is of interest.  
20545: ** The value written into the *pCurrent parameter is undefined.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_PAGECACHE_USED</dt>
20545: ** <dd>This parameter returns the number of pages used out of the
20545: ** [pagecache memory allocator] that was configured using 
20545: ** [SQLITE_CONFIG_PAGECACHE].  The
20545: ** value returned is in pages, not in bytes.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_PAGECACHE_OVERFLOW</dt>
20545: ** <dd>This parameter returns the number of bytes of page cache
20545: ** allocation which could not be statisfied by the [SQLITE_CONFIG_PAGECACHE]
20545: ** buffer and where forced to overflow to [sqlite3_malloc()].  The
20545: ** returned value includes allocations that overflowed because they
20545: ** where too large (they were larger than the "sz" parameter to
20545: ** [SQLITE_CONFIG_PAGECACHE]) and allocations that overflowed because
20545: ** no space was left in the page cache.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_PAGECACHE_SIZE</dt>
20545: ** <dd>This parameter records the largest memory allocation request
20545: ** handed to [pagecache memory allocator].  Only the value returned in the
20545: ** *pHighwater parameter to [sqlite3_status()] is of interest.  
20545: ** The value written into the *pCurrent parameter is undefined.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_SCRATCH_USED</dt>
20545: ** <dd>This parameter returns the number of allocations used out of the
20545: ** [scratch memory allocator] configured using
20545: ** [SQLITE_CONFIG_SCRATCH].  The value returned is in allocations, not
20545: ** in bytes.  Since a single thread may only have one scratch allocation
20545: ** outstanding at time, this parameter also reports the number of threads
20545: ** using scratch memory at the same time.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_SCRATCH_OVERFLOW</dt>
20545: ** <dd>This parameter returns the number of bytes of scratch memory
20545: ** allocation which could not be statisfied by the [SQLITE_CONFIG_SCRATCH]
20545: ** buffer and where forced to overflow to [sqlite3_malloc()].  The values
20545: ** returned include overflows because the requested allocation was too
20545: ** larger (that is, because the requested allocation was larger than the
20545: ** "sz" parameter to [SQLITE_CONFIG_SCRATCH]) and because no scratch buffer
20545: ** slots were available.
20545: ** </dd>
20545: **
20545: ** <dt>SQLITE_STATUS_SCRATCH_SIZE</dt>
20545: ** <dd>This parameter records the largest memory allocation request
20545: ** handed to [scratch memory allocator].  Only the value returned in the
20545: ** *pHighwater parameter to [sqlite3_status()] is of interest.  
20545: ** The value written into the *pCurrent parameter is undefined.</dd>
20545: **
20545: ** <dt>SQLITE_STATUS_PARSER_STACK</dt>
20545: ** <dd>This parameter records the deepest parser stack.  It is only
20545: ** meaningful if SQLite is compiled with [YYTRACKMAXSTACKDEPTH].</dd>
20545: ** </dl>
20545: **
20545: ** New status parameters may be added from time to time.
20545: */
20545: #define SQLITE_STATUS_MEMORY_USED          0
20545: #define SQLITE_STATUS_PAGECACHE_USED       1
20545: #define SQLITE_STATUS_PAGECACHE_OVERFLOW   2
20545: #define SQLITE_STATUS_SCRATCH_USED         3
20545: #define SQLITE_STATUS_SCRATCH_OVERFLOW     4
20545: #define SQLITE_STATUS_MALLOC_SIZE          5
20545: #define SQLITE_STATUS_PARSER_STACK         6
20545: #define SQLITE_STATUS_PAGECACHE_SIZE       7
20545: #define SQLITE_STATUS_SCRATCH_SIZE         8
20545: 
20545: /*
20545: ** CAPI3REF: Database Connection Status {H17500} <S60200>
20545: ** EXPERIMENTAL
20545: **
20545: ** This interface is used to retrieve runtime status information 
20545: ** about a single [database connection].  The first argument is the
20545: ** database connection object to be interrogated.  The second argument
20545: ** is the parameter to interrogate.  Currently, the only allowed value
20545: ** for the second parameter is [SQLITE_DBSTATUS_LOOKASIDE_USED].
20545: ** Additional options will likely appear in future releases of SQLite.
20545: **
20545: ** The current value of the requested parameter is written into *pCur
20545: ** and the highest instantaneous value is written into *pHiwtr.  If
20545: ** the resetFlg is true, then the highest instantaneous value is
20545: ** reset back down to the current value.
20545: **
20545: ** See also: [sqlite3_status()] and [sqlite3_stmt_status()].
20545: */
34100: SQLITE_EXPERIMENTAL int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
20545: 
20545: /*
20545: ** CAPI3REF: Status Parameters for database connections {H17520} <H17500>
20545: ** EXPERIMENTAL
20545: **
34100: ** Status verbs for [sqlite3_db_status()].
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_DBSTATUS_LOOKASIDE_USED</dt>
20545: ** <dd>This parameter returns the number of lookaside memory slots currently
20545: ** checked out.</dd>
20545: ** </dl>
20545: */
20545: #define SQLITE_DBSTATUS_LOOKASIDE_USED     0
20545: 
20545: 
20545: /*
20545: ** CAPI3REF: Prepared Statement Status {H17550} <S60200>
20545: ** EXPERIMENTAL
20545: **
20545: ** Each prepared statement maintains various
20545: ** [SQLITE_STMTSTATUS_SORT | counters] that measure the number
20545: ** of times it has performed specific operations.  These counters can
20545: ** be used to monitor the performance characteristics of the prepared
20545: ** statements.  For example, if the number of table steps greatly exceeds
20545: ** the number of table searches or result rows, that would tend to indicate
20545: ** that the prepared statement is using a full table scan rather than
20545: ** an index.  
20545: **
20545: ** This interface is used to retrieve and reset counter values from
20545: ** a [prepared statement].  The first argument is the prepared statement
20545: ** object to be interrogated.  The second argument
20545: ** is an integer code for a specific [SQLITE_STMTSTATUS_SORT | counter]
20545: ** to be interrogated. 
20545: ** The current value of the requested counter is returned.
20545: ** If the resetFlg is true, then the counter is reset to zero after this
20545: ** interface call returns.
20545: **
20545: ** See also: [sqlite3_status()] and [sqlite3_db_status()].
20545: */
34100: SQLITE_EXPERIMENTAL int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);
20545: 
20545: /*
20545: ** CAPI3REF: Status Parameters for prepared statements {H17570} <H17550>
20545: ** EXPERIMENTAL
20545: **
20545: ** These preprocessor macros define integer codes that name counter
20545: ** values associated with the [sqlite3_stmt_status()] interface.
20545: ** The meanings of the various counters are as follows:
20545: **
20545: ** <dl>
20545: ** <dt>SQLITE_STMTSTATUS_FULLSCAN_STEP</dt>
20545: ** <dd>This is the number of times that SQLite has stepped forward in
20545: ** a table as part of a full table scan.  Large numbers for this counter
20545: ** may indicate opportunities for performance improvement through 
20545: ** careful use of indices.</dd>
20545: **
20545: ** <dt>SQLITE_STMTSTATUS_SORT</dt>
20545: ** <dd>This is the number of sort operations that have occurred.
20545: ** A non-zero value in this counter may indicate an opportunity to
20545: ** improvement performance through careful use of indices.</dd>
20545: **
20545: ** </dl>
20545: */
20545: #define SQLITE_STMTSTATUS_FULLSCAN_STEP     1
20545: #define SQLITE_STMTSTATUS_SORT              2
20545: 
20545: /*
22150: ** CAPI3REF: Custom Page Cache Object
22150: ** EXPERIMENTAL
22150: **
22150: ** The sqlite3_pcache type is opaque.  It is implemented by
22150: ** the pluggable module.  The SQLite core has no knowledge of
22150: ** its size or internal structure and never deals with the
22150: ** sqlite3_pcache object except by holding and passing pointers
22150: ** to the object.
22150: **
22150: ** See [sqlite3_pcache_methods] for additional information.
22150: */
22150: typedef struct sqlite3_pcache sqlite3_pcache;
22150: 
22150: /*
22150: ** CAPI3REF: Application Defined Page Cache.
22150: ** EXPERIMENTAL
22150: **
22150: ** The [sqlite3_config]([SQLITE_CONFIG_PCACHE], ...) interface can
22150: ** register an alternative page cache implementation by passing in an 
22150: ** instance of the sqlite3_pcache_methods structure. The majority of the 
34100: ** heap memory used by sqlite is used by the page cache to cache data read 
22150: ** from, or ready to be written to, the database file. By implementing a 
22150: ** custom page cache using this API, an application can control more 
34100: ** precisely the amount of memory consumed by sqlite, the way in which 
34100: ** said memory is allocated and released, and the policies used to 
22150: ** determine exactly which parts of a database file are cached and for 
22150: ** how long.
22150: **
34100: ** The contents of the structure are copied to an internal buffer by sqlite
34100: ** within the call to [sqlite3_config].
22150: **
22150: ** The xInit() method is called once for each call to [sqlite3_initialize()]
22150: ** (usually only once during the lifetime of the process). It is passed
22150: ** a copy of the sqlite3_pcache_methods.pArg value. It can be used to set
22150: ** up global structures and mutexes required by the custom page cache 
34100: ** implementation. The xShutdown() method is called from within 
34100: ** [sqlite3_shutdown()], if the application invokes this API. It can be used
34100: ** to clean up any outstanding resources before process shutdown, if required.
34100: **
34100: ** The xCreate() method is used to construct a new cache instance. The
22150: ** first parameter, szPage, is the size in bytes of the pages that must
34100: ** be allocated by the cache. szPage will not be a power of two. The
34100: ** second argument, bPurgeable, is true if the cache being created will
34100: ** be used to cache database pages read from a file stored on disk, or
22150: ** false if it is used for an in-memory database. The cache implementation
34100: ** does not have to do anything special based on the value of bPurgeable,
34100: ** it is purely advisory. 
22150: **
22150: ** The xCachesize() method may be called at any time by SQLite to set the
22150: ** suggested maximum cache-size (number of pages stored by) the cache
22150: ** instance passed as the first argument. This is the value configured using
22150: ** the SQLite "[PRAGMA cache_size]" command. As with the bPurgeable parameter,
34100: ** the implementation is not required to do anything special with this
34100: ** value, it is advisory only.
22150: **
22150: ** The xPagecount() method should return the number of pages currently
34100: ** stored in the cache supplied as an argument.
22150: ** 
22150: ** The xFetch() method is used to fetch a page and return a pointer to it. 
22150: ** A 'page', in this context, is a buffer of szPage bytes aligned at an
22150: ** 8-byte boundary. The page to be fetched is determined by the key. The
22150: ** mimimum key value is 1. After it has been retrieved using xFetch, the page 
34100: ** is considered to be pinned.
34100: **
34100: ** If the requested page is already in the page cache, then a pointer to
34100: ** the cached buffer should be returned with its contents intact. If the
34100: ** page is not already in the cache, then the expected behaviour of the
34100: ** cache is determined by the value of the createFlag parameter passed
34100: ** to xFetch, according to the following table:
22150: **
22150: ** <table border=1 width=85% align=center>
34100: **   <tr><th>createFlag<th>Expected Behaviour
34100: **   <tr><td>0<td>NULL should be returned. No new cache entry is created.
34100: **   <tr><td>1<td>If createFlag is set to 1, this indicates that 
34100: **                SQLite is holding pinned pages that can be unpinned
34100: **                by writing their contents to the database file (a
34100: **                relatively expensive operation). In this situation the
34100: **                cache implementation has two choices: it can return NULL,
34100: **                in which case SQLite will attempt to unpin one or more 
34100: **                pages before re-requesting the same page, or it can
34100: **                allocate a new page and return a pointer to it. If a new
34100: **                page is allocated, then the first sizeof(void*) bytes of
34100: **                it (at least) must be zeroed before it is returned.
34100: **   <tr><td>2<td>If createFlag is set to 2, then SQLite is not holding any
34100: **                pinned pages associated with the specific cache passed
34100: **                as the first argument to xFetch() that can be unpinned. The
34100: **                cache implementation should attempt to allocate a new
34100: **                cache entry and return a pointer to it. Again, the first
34100: **                sizeof(void*) bytes of the page should be zeroed before 
34100: **                it is returned. If the xFetch() method returns NULL when 
34100: **                createFlag==2, SQLite assumes that a memory allocation 
34100: **                failed and returns SQLITE_NOMEM to the user.
22150: ** </table>
22150: **
22150: ** xUnpin() is called by SQLite with a pointer to a currently pinned page
22150: ** as its second argument. If the third parameter, discard, is non-zero,
22150: ** then the page should be evicted from the cache. In this case SQLite 
22150: ** assumes that the next time the page is retrieved from the cache using
22150: ** the xFetch() method, it will be zeroed. If the discard parameter is
22150: ** zero, then the page is considered to be unpinned. The cache implementation
34100: ** may choose to reclaim (free or recycle) unpinned pages at any time.
34100: ** SQLite assumes that next time the page is retrieved from the cache
34100: ** it will either be zeroed, or contain the same data that it did when it
34100: ** was unpinned.
22150: **
22150: ** The cache is not required to perform any reference counting. A single 
22150: ** call to xUnpin() unpins the page regardless of the number of prior calls 
22150: ** to xFetch().
22150: **
22150: ** The xRekey() method is used to change the key value associated with the
22150: ** page passed as the second argument from oldKey to newKey. If the cache
22150: ** previously contains an entry associated with newKey, it should be
22150: ** discarded. Any prior cache entry associated with newKey is guaranteed not
22150: ** to be pinned.
22150: **
22150: ** When SQLite calls the xTruncate() method, the cache must discard all
22150: ** existing cache entries with page numbers (keys) greater than or equal
22150: ** to the value of the iLimit parameter passed to xTruncate(). If any
22150: ** of these pages are pinned, they are implicitly unpinned, meaning that
22150: ** they can be safely discarded.
22150: **
22150: ** The xDestroy() method is used to delete a cache allocated by xCreate().
22150: ** All resources associated with the specified cache should be freed. After
22150: ** calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]
22150: ** handle invalid, and will not use it with any other sqlite3_pcache_methods
22150: ** functions.
22150: */
22150: typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;
22150: struct sqlite3_pcache_methods {
22150:   void *pArg;
22150:   int (*xInit)(void*);
22150:   void (*xShutdown)(void*);
22150:   sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);
22150:   void (*xCachesize)(sqlite3_pcache*, int nCachesize);
22150:   int (*xPagecount)(sqlite3_pcache*);
22150:   void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);
22150:   void (*xUnpin)(sqlite3_pcache*, void*, int discard);
22150:   void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);
22150:   void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);
22150:   void (*xDestroy)(sqlite3_pcache*);
22150: };
22150: 
22150: /*
29099: ** CAPI3REF: Online Backup Object
29099: ** EXPERIMENTAL
29099: **
29099: ** The sqlite3_backup object records state information about an ongoing
29099: ** online backup operation.  The sqlite3_backup object is created by
29099: ** a call to [sqlite3_backup_init()] and is destroyed by a call to
29099: ** [sqlite3_backup_finish()].
29099: **
29099: ** See Also: [Using the SQLite Online Backup API]
29099: */
29099: typedef struct sqlite3_backup sqlite3_backup;
29099: 
29099: /*
29099: ** CAPI3REF: Online Backup API.
29099: ** EXPERIMENTAL
29099: **
29099: ** This API is used to overwrite the contents of one database with that
29099: ** of another. It is useful either for creating backups of databases or
29099: ** for copying in-memory databases to or from persistent files. 
29099: **
29099: ** See Also: [Using the SQLite Online Backup API]
29099: **
29099: ** Exclusive access is required to the destination database for the 
29099: ** duration of the operation. However the source database is only
29099: ** read-locked while it is actually being read, it is not locked
29099: ** continuously for the entire operation. Thus, the backup may be
29099: ** performed on a live database without preventing other users from
29099: ** writing to the database for an extended period of time.
29099: ** 
29099: ** To perform a backup operation: 
29099: **   <ol>
29099: **     <li><b>sqlite3_backup_init()</b> is called once to initialize the
29099: **         backup, 
29099: **     <li><b>sqlite3_backup_step()</b> is called one or more times to transfer 
29099: **         the data between the two databases, and finally
29099: **     <li><b>sqlite3_backup_finish()</b> is called to release all resources 
29099: **         associated with the backup operation. 
29099: **   </ol>
29099: ** There should be exactly one call to sqlite3_backup_finish() for each
29099: ** successful call to sqlite3_backup_init().
29099: **
29099: ** <b>sqlite3_backup_init()</b>
29099: **
29099: ** The first two arguments passed to [sqlite3_backup_init()] are the database
29099: ** handle associated with the destination database and the database name 
29099: ** used to attach the destination database to the handle. The database name
29099: ** is "main" for the main database, "temp" for the temporary database, or
29099: ** the name specified as part of the [ATTACH] statement if the destination is
29099: ** an attached database. The third and fourth arguments passed to 
29099: ** sqlite3_backup_init() identify the [database connection]
29099: ** and database name used
29099: ** to access the source database. The values passed for the source and 
29099: ** destination [database connection] parameters must not be the same.
29099: **
29099: ** If an error occurs within sqlite3_backup_init(), then NULL is returned
29099: ** and an error code and error message written into the [database connection] 
29099: ** passed as the first argument. They may be retrieved using the
29099: ** [sqlite3_errcode()], [sqlite3_errmsg()], and [sqlite3_errmsg16()] functions.
29099: ** Otherwise, if successful, a pointer to an [sqlite3_backup] object is
29099: ** returned. This pointer may be used with the sqlite3_backup_step() and
29099: ** sqlite3_backup_finish() functions to perform the specified backup 
29099: ** operation.
29099: **
29099: ** <b>sqlite3_backup_step()</b>
29099: **
29099: ** Function [sqlite3_backup_step()] is used to copy up to nPage pages between 
29099: ** the source and destination databases, where nPage is the value of the 
29099: ** second parameter passed to sqlite3_backup_step(). If nPage is a negative
29099: ** value, all remaining source pages are copied. If the required pages are 
29099: ** succesfully copied, but there are still more pages to copy before the 
29099: ** backup is complete, it returns [SQLITE_OK]. If no error occured and there 
29099: ** are no more pages to copy, then [SQLITE_DONE] is returned. If an error 
29099: ** occurs, then an SQLite error code is returned. As well as [SQLITE_OK] and
29099: ** [SQLITE_DONE], a call to sqlite3_backup_step() may return [SQLITE_READONLY],
29099: ** [SQLITE_NOMEM], [SQLITE_BUSY], [SQLITE_LOCKED], or an
29099: ** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] extended error code.
29099: **
29099: ** As well as the case where the destination database file was opened for
29099: ** read-only access, sqlite3_backup_step() may return [SQLITE_READONLY] if
29099: ** the destination is an in-memory database with a different page size
29099: ** from the source database.
29099: **
29099: ** If sqlite3_backup_step() cannot obtain a required file-system lock, then
29099: ** the [sqlite3_busy_handler | busy-handler function]
29099: ** is invoked (if one is specified). If the 
29099: ** busy-handler returns non-zero before the lock is available, then 
29099: ** [SQLITE_BUSY] is returned to the caller. In this case the call to
29099: ** sqlite3_backup_step() can be retried later. If the source
29099: ** [database connection]
29099: ** is being used to write to the source database when sqlite3_backup_step()
29099: ** is called, then [SQLITE_LOCKED] is returned immediately. Again, in this
29099: ** case the call to sqlite3_backup_step() can be retried later on. If
29099: ** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX], [SQLITE_NOMEM], or
29099: ** [SQLITE_READONLY] is returned, then 
29099: ** there is no point in retrying the call to sqlite3_backup_step(). These 
29099: ** errors are considered fatal. At this point the application must accept 
29099: ** that the backup operation has failed and pass the backup operation handle 
29099: ** to the sqlite3_backup_finish() to release associated resources.
29099: **
29099: ** Following the first call to sqlite3_backup_step(), an exclusive lock is
29099: ** obtained on the destination file. It is not released until either 
29099: ** sqlite3_backup_finish() is called or the backup operation is complete 
29099: ** and sqlite3_backup_step() returns [SQLITE_DONE]. Additionally, each time 
29099: ** a call to sqlite3_backup_step() is made a [shared lock] is obtained on
29099: ** the source database file. This lock is released before the
29099: ** sqlite3_backup_step() call returns. Because the source database is not
29099: ** locked between calls to sqlite3_backup_step(), it may be modified mid-way
29099: ** through the backup procedure. If the source database is modified by an
29099: ** external process or via a database connection other than the one being
29099: ** used by the backup operation, then the backup will be transparently
29099: ** restarted by the next call to sqlite3_backup_step(). If the source 
29099: ** database is modified by the using the same database connection as is used
29099: ** by the backup operation, then the backup database is transparently 
29099: ** updated at the same time.
29099: **
29099: ** <b>sqlite3_backup_finish()</b>
29099: **
29099: ** Once sqlite3_backup_step() has returned [SQLITE_DONE], or when the 
29099: ** application wishes to abandon the backup operation, the [sqlite3_backup]
29099: ** object should be passed to sqlite3_backup_finish(). This releases all
29099: ** resources associated with the backup operation. If sqlite3_backup_step()
29099: ** has not yet returned [SQLITE_DONE], then any active write-transaction on the
29099: ** destination database is rolled back. The [sqlite3_backup] object is invalid
29099: ** and may not be used following a call to sqlite3_backup_finish().
29099: **
29099: ** The value returned by sqlite3_backup_finish is [SQLITE_OK] if no error
29099: ** occurred, regardless or whether or not sqlite3_backup_step() was called
29099: ** a sufficient number of times to complete the backup operation. Or, if
29099: ** an out-of-memory condition or IO error occured during a call to
29099: ** sqlite3_backup_step() then [SQLITE_NOMEM] or an
29099: ** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] error code
29099: ** is returned. In this case the error code and an error message are
29099: ** written to the destination [database connection].
29099: **
29099: ** A return of [SQLITE_BUSY] or [SQLITE_LOCKED] from sqlite3_backup_step() is
29099: ** not a permanent error and does not affect the return value of
29099: ** sqlite3_backup_finish().
29099: **
29099: ** <b>sqlite3_backup_remaining(), sqlite3_backup_pagecount()</b>
29099: **
29099: ** Each call to sqlite3_backup_step() sets two values stored internally
29099: ** by an [sqlite3_backup] object. The number of pages still to be backed
29099: ** up, which may be queried by sqlite3_backup_remaining(), and the total
29099: ** number of pages in the source database file, which may be queried by
29099: ** sqlite3_backup_pagecount().
29099: **
29099: ** The values returned by these functions are only updated by
29099: ** sqlite3_backup_step(). If the source database is modified during a backup
29099: ** operation, then the values are not updated to account for any extra
29099: ** pages that need to be updated or the size of the source database file
29099: ** changing.
29099: **
29099: ** <b>Concurrent Usage of Database Handles</b>
29099: **
29099: ** The source [database connection] may be used by the application for other
29099: ** purposes while a backup operation is underway or being initialized.
29099: ** If SQLite is compiled and configured to support threadsafe database
29099: ** connections, then the source database connection may be used concurrently
29099: ** from within other threads.
29099: **
29099: ** However, the application must guarantee that the destination database
29099: ** connection handle is not passed to any other API (by any thread) after 
29099: ** sqlite3_backup_init() is called and before the corresponding call to
29099: ** sqlite3_backup_finish(). Unfortunately SQLite does not currently check
29099: ** for this, if the application does use the destination [database connection]
29099: ** for some other purpose during a backup operation, things may appear to
29099: ** work correctly but in fact be subtly malfunctioning.  Use of the
29099: ** destination database connection while a backup is in progress might
29099: ** also cause a mutex deadlock.
29099: **
29099: ** Furthermore, if running in [shared cache mode], the application must
29099: ** guarantee that the shared cache used by the destination database
29099: ** is not accessed while the backup is running. In practice this means
29099: ** that the application must guarantee that the file-system file being 
29099: ** backed up to is not accessed by any connection within the process,
29099: ** not just the specific connection that was passed to sqlite3_backup_init().
29099: **
29099: ** The [sqlite3_backup] object itself is partially threadsafe. Multiple 
29099: ** threads may safely make multiple concurrent calls to sqlite3_backup_step().
29099: ** However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount()
29099: ** APIs are not strictly speaking threadsafe. If they are invoked at the
29099: ** same time as another thread is invoking sqlite3_backup_step() it is
29099: ** possible that they return invalid values.
29099: */
34100: sqlite3_backup *sqlite3_backup_init(
29099:   sqlite3 *pDest,                        /* Destination database handle */
29099:   const char *zDestName,                 /* Destination database name */
29099:   sqlite3 *pSource,                      /* Source database handle */
29099:   const char *zSourceName                /* Source database name */
29099: );
34100: int sqlite3_backup_step(sqlite3_backup *p, int nPage);
34100: int sqlite3_backup_finish(sqlite3_backup *p);
34100: int sqlite3_backup_remaining(sqlite3_backup *p);
34100: int sqlite3_backup_pagecount(sqlite3_backup *p);
29099: 
29099: /*
29099: ** CAPI3REF: Unlock Notification
29099: ** EXPERIMENTAL
29099: **
29099: ** When running in shared-cache mode, a database operation may fail with
29099: ** an [SQLITE_LOCKED] error if the required locks on the shared-cache or
29099: ** individual tables within the shared-cache cannot be obtained. See
29099: ** [SQLite Shared-Cache Mode] for a description of shared-cache locking. 
29099: ** This API may be used to register a callback that SQLite will invoke 
29099: ** when the connection currently holding the required lock relinquishes it.
29099: ** This API is only available if the library was compiled with the
29099: ** [SQLITE_ENABLE_UNLOCK_NOTIFY] C-preprocessor symbol defined.
29099: **
29099: ** See Also: [Using the SQLite Unlock Notification Feature].
29099: **
29099: ** Shared-cache locks are released when a database connection concludes
29099: ** its current transaction, either by committing it or rolling it back. 
29099: **
29099: ** When a connection (known as the blocked connection) fails to obtain a
29099: ** shared-cache lock and SQLITE_LOCKED is returned to the caller, the
29099: ** identity of the database connection (the blocking connection) that
29099: ** has locked the required resource is stored internally. After an 
29099: ** application receives an SQLITE_LOCKED error, it may call the
29099: ** sqlite3_unlock_notify() method with the blocked connection handle as 
29099: ** the first argument to register for a callback that will be invoked
29099: ** when the blocking connections current transaction is concluded. The
29099: ** callback is invoked from within the [sqlite3_step] or [sqlite3_close]
29099: ** call that concludes the blocking connections transaction.
29099: **
29099: ** If sqlite3_unlock_notify() is called in a multi-threaded application,
29099: ** there is a chance that the blocking connection will have already
29099: ** concluded its transaction by the time sqlite3_unlock_notify() is invoked.
29099: ** If this happens, then the specified callback is invoked immediately,
29099: ** from within the call to sqlite3_unlock_notify().
29099: **
29099: ** If the blocked connection is attempting to obtain a write-lock on a
29099: ** shared-cache table, and more than one other connection currently holds
29099: ** a read-lock on the same table, then SQLite arbitrarily selects one of 
29099: ** the other connections to use as the blocking connection.
29099: **
29099: ** There may be at most one unlock-notify callback registered by a 
29099: ** blocked connection. If sqlite3_unlock_notify() is called when the
29099: ** blocked connection already has a registered unlock-notify callback,
29099: ** then the new callback replaces the old. If sqlite3_unlock_notify() is
29099: ** called with a NULL pointer as its second argument, then any existing
29099: ** unlock-notify callback is cancelled. The blocked connections 
29099: ** unlock-notify callback may also be canceled by closing the blocked
29099: ** connection using [sqlite3_close()].
29099: **
29099: ** The unlock-notify callback is not reentrant. If an application invokes
29099: ** any sqlite3_xxx API functions from within an unlock-notify callback, a
29099: ** crash or deadlock may be the result.
29099: **
29099: ** Unless deadlock is detected (see below), sqlite3_unlock_notify() always
29099: ** returns SQLITE_OK.
29099: **
29099: ** <b>Callback Invocation Details</b>
29099: **
29099: ** When an unlock-notify callback is registered, the application provides a 
29099: ** single void* pointer that is passed to the callback when it is invoked.
29099: ** However, the signature of the callback function allows SQLite to pass
29099: ** it an array of void* context pointers. The first argument passed to
29099: ** an unlock-notify callback is a pointer to an array of void* pointers,
29099: ** and the second is the number of entries in the array.
29099: **
29099: ** When a blocking connections transaction is concluded, there may be
29099: ** more than one blocked connection that has registered for an unlock-notify
29099: ** callback. If two or more such blocked connections have specified the
29099: ** same callback function, then instead of invoking the callback function
29099: ** multiple times, it is invoked once with the set of void* context pointers
29099: ** specified by the blocked connections bundled together into an array.
29099: ** This gives the application an opportunity to prioritize any actions 
29099: ** related to the set of unblocked database connections.
29099: **
29099: ** <b>Deadlock Detection</b>
29099: **
29099: ** Assuming that after registering for an unlock-notify callback a 
29099: ** database waits for the callback to be issued before taking any further
29099: ** action (a reasonable assumption), then using this API may cause the
29099: ** application to deadlock. For example, if connection X is waiting for
29099: ** connection Y's transaction to be concluded, and similarly connection
29099: ** Y is waiting on connection X's transaction, then neither connection
29099: ** will proceed and the system may remain deadlocked indefinitely.
29099: **
29099: ** To avoid this scenario, the sqlite3_unlock_notify() performs deadlock
29099: ** detection. If a given call to sqlite3_unlock_notify() would put the
29099: ** system in a deadlocked state, then SQLITE_LOCKED is returned and no
29099: ** unlock-notify callback is registered. The system is said to be in
29099: ** a deadlocked state if connection A has registered for an unlock-notify
29099: ** callback on the conclusion of connection B's transaction, and connection
29099: ** B has itself registered for an unlock-notify callback when connection
29099: ** A's transaction is concluded. Indirect deadlock is also detected, so
29099: ** the system is also considered to be deadlocked if connection B has
29099: ** registered for an unlock-notify callback on the conclusion of connection
29099: ** C's transaction, where connection C is waiting on connection A. Any
29099: ** number of levels of indirection are allowed.
29099: **
29099: ** <b>The "DROP TABLE" Exception</b>
29099: **
29099: ** When a call to [sqlite3_step()] returns SQLITE_LOCKED, it is almost 
29099: ** always appropriate to call sqlite3_unlock_notify(). There is however,
29099: ** one exception. When executing a "DROP TABLE" or "DROP INDEX" statement,
29099: ** SQLite checks if there are any currently executing SELECT statements
29099: ** that belong to the same connection. If there are, SQLITE_LOCKED is
29099: ** returned. In this case there is no "blocking connection", so invoking
29099: ** sqlite3_unlock_notify() results in the unlock-notify callback being
29099: ** invoked immediately. If the application then re-attempts the "DROP TABLE"
29099: ** or "DROP INDEX" query, an infinite loop might be the result.
29099: **
29099: ** One way around this problem is to check the extended error code returned
29099: ** by an sqlite3_step() call. If there is a blocking connection, then the
29099: ** extended error code is set to SQLITE_LOCKED_SHAREDCACHE. Otherwise, in
29099: ** the special "DROP TABLE/INDEX" case, the extended error code is just 
29099: ** SQLITE_LOCKED.
29099: */
34100: int sqlite3_unlock_notify(
29099:   sqlite3 *pBlocked,                          /* Waiting connection */
29099:   void (*xNotify)(void **apArg, int nArg),    /* Callback function to invoke */
29099:   void *pNotifyArg                            /* Argument to pass to xNotify */
29099: );
29099: 
29099: /*
    1: ** Undo the hack that converts floating point types to integer for
    1: ** builds on processors without floating point support.
    1: */
    1: #ifdef SQLITE_OMIT_FLOATING_POINT
    1: # undef double
    1: #endif
    1: 
    1: #ifdef __cplusplus
    1: }  /* End of the 'extern "C"' block */
    1: #endif
    1: #endif
