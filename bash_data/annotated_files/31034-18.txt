16295: #ifndef _OS_H
16295: #define _OS_H
16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:  function: #ifdef jail to whip a few platforms into the UNIX ideal.
31034:  last mod: $Id: os.h 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #ifdef HAVE_CONFIG_H
16295: #include "config.h"
16295: #endif
16295: 
16295: #include <math.h>
16295: #include <ogg/os_types.h>
16295: 
16295: #include "misc.h"
16295: 
23054: #ifdef SOLARIS
23054: #define HAVE_ALLOCA_H
23054: #endif
23054: 
16295: #ifndef _V_IFDEFJAIL_H_
16295: #  define _V_IFDEFJAIL_H_
16295: 
16295: #  ifdef __GNUC__
16295: #    define STIN static __inline__
16295: #  elif _WIN32
16295: #    define STIN static __inline
16295: #  else
16295: #    define STIN static
16295: #  endif
16295: 
16295: #ifdef DJGPP
16295: #  define rint(x)   (floor((x)+0.5f))
16295: #endif
16295: 
16295: #ifndef M_PI
16295: #  define M_PI (3.1415926536f)
16295: #endif
16295: 
16295: #if defined(_WIN32) && !defined(__SYMBIAN32__)
16295: #  include <malloc.h>
16295: #  define rint(x)   (floor((x)+0.5f))
16295: #  define NO_FLOAT_MATH_LIB
16295: #  define FAST_HYPOT(a, b) sqrt((a)*(a) + (b)*(b))
16295: #endif
16295: 
16295: #if defined(__SYMBIAN32__) && defined(__WINS__)
16295: void *_alloca(size_t size);
16295: #  define alloca _alloca
16295: #endif
16295: 
16295: #ifndef FAST_HYPOT
16295: #  define FAST_HYPOT hypot
16295: #endif
16295: 
16295: #endif
16295: 
16295: #ifdef HAVE_ALLOCA_H
16295: #  include <alloca.h>
16295: #endif
16295: 
16295: #ifdef USE_MEMORY_H
16295: #  include <memory.h>
16295: #endif
16295: 
16295: #ifndef min
16295: #  define min(x,y)  ((x)>(y)?(y):(x))
16295: #endif
16295: 
16295: #ifndef max
16295: #  define max(x,y)  ((x)<(y)?(y):(x))
16295: #endif
16295: 
30043: 
30043: /* Special i386 GCC implementation */
30043: #if defined(__i386__) && defined(__GNUC__) && !defined(__BEOS__)
16295: #  define VORBIS_FPU_CONTROL
16295: /* both GCC and MSVC are kinda stupid about rounding/casting to int.
16295:    Because of encapsulation constraints (GCC can't see inside the asm
16295:    block and so we end up doing stupid things like a store/load that
16295:    is collectively a noop), we do it this way */
16295: 
16295: /* we must set up the fpu before this works!! */
16295: 
16295: typedef ogg_int16_t vorbis_fpu_control;
16295: 
16295: static inline void vorbis_fpu_setround(vorbis_fpu_control *fpu){
16295:   ogg_int16_t ret;
16295:   ogg_int16_t temp;
16295:   __asm__ __volatile__("fnstcw %0\n\t"
16295:           "movw %0,%%dx\n\t"
31034:           "andw $62463,%%dx\n\t"
16295:           "movw %%dx,%1\n\t"
16295:           "fldcw %1\n\t":"=m"(ret):"m"(temp): "dx");
16295:   *fpu=ret;
16295: }
16295: 
16295: static inline void vorbis_fpu_restore(vorbis_fpu_control fpu){
16295:   __asm__ __volatile__("fldcw %0":: "m"(fpu));
16295: }
16295: 
16295: /* assumes the FPU is in round mode! */
16295: static inline int vorbis_ftoi(double f){  /* yes, double!  Otherwise,
16295:                                              we get extra fst/fld to
16295:                                              truncate precision */
16295:   int i;
16295:   __asm__("fistl %0": "=m"(i) : "t"(f));
16295:   return(i);
16295: }
30043: #endif /* Special i386 GCC implementation */
16295: 
16295: 
30043: /* MSVC inline assembly. 32 bit only; inline ASM isn't implemented in the
30043:  * 64 bit compiler */
30043: #if defined(_MSC_VER) && !defined(_WIN64) && !defined(_WIN32_WCE)
16295: #  define VORBIS_FPU_CONTROL
16295: 
16295: typedef ogg_int16_t vorbis_fpu_control;
16295: 
16295: static __inline int vorbis_ftoi(double f){
16295:         int i;
16295:         __asm{
16295:                 fld f
16295:                 fistp i
16295:         }
16295:         return i;
16295: }
16295: 
16295: static __inline void vorbis_fpu_setround(vorbis_fpu_control *fpu){
16295: }
16295: 
16295: static __inline void vorbis_fpu_restore(vorbis_fpu_control fpu){
16295: }
16295: 
30043: #endif /* Special MSVC 32 bit implementation */
16295: 
16295: 
30043: /* Optimized code path for x86_64 builds. Uses SSE2 intrinsics. This can be
30043:    done safely because all x86_64 CPUs supports SSE2. */
30043: #if (defined(_MSC_VER) && defined(_WIN64)) || (defined(__GNUC__) && defined (__x86_64__))
30043: #  define VORBIS_FPU_CONTROL
30043: 
30043: typedef ogg_int16_t vorbis_fpu_control;
30043: 
30043: #include <emmintrin.h>
30043: static __inline int vorbis_ftoi(double f){
30043:         return _mm_cvtsd_si32(_mm_load_sd(&f));
30043: }
30043: 
30043: static __inline void vorbis_fpu_setround(vorbis_fpu_control *fpu){
30043: }
30043: 
30043: static __inline void vorbis_fpu_restore(vorbis_fpu_control fpu){
30043: }
30043: 
30043: #endif /* Special MSVC x64 implementation */
30043: 
30043: 
30043: /* If no special implementation was found for the current compiler / platform,
30043:    use the default implementation here: */
16295: #ifndef VORBIS_FPU_CONTROL
16295: 
16295: typedef int vorbis_fpu_control;
16295: 
16295: static int vorbis_ftoi(double f){
30043:         /* Note: MSVC and GCC (at least on some systems) round towards zero, thus,
30043:            the floor() call is required to ensure correct roudning of
30043:            negative numbers */
30043:         return (int)floor(f+.5);
16295: }
16295: 
16295: /* We don't have special code for this compiler/arch, so do it the slow way */
16295: #  define vorbis_fpu_setround(vorbis_fpu_control) {}
16295: #  define vorbis_fpu_restore(vorbis_fpu_control) {}
16295: 
30043: #endif /* default implementation */
16295: 
16295: #endif /* _OS_H */
