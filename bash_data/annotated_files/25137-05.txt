    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Hubbie Shaw
    1:  *   Doug Turner <dougt@netscape.com>
    1:  *   Brian Ryner <bryner@brianryner.com>
 7054:  *   Kai Engert <kengert@redhat.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsIModule.h"
    1: #include "nsIGenericFactory.h"
    1: 
    1: #include "nsNSSComponent.h"
    1: #include "nsSSLSocketProvider.h"
    1: #include "nsTLSSocketProvider.h"
    1: #include "nsKeygenHandler.h"
    1: 
    1: #include "nsSDR.h"
    1: 
    1: #include "nsPK11TokenDB.h"
    1: #include "nsPKCS11Slot.h"
    1: #include "nsNSSCertificate.h"
    1: #include "nsNSSCertificateDB.h"
    1: #include "nsNSSCertCache.h"
    1: #include "nsCMS.h"
    1: #ifdef MOZ_XUL
    1: #include "nsCertTree.h"
    1: #endif
    1: #include "nsCrypto.h"
    1: //For the NS_CRYPTO_CONTRACTID define
    1: #include "nsDOMCID.h"
    1: 
    1: #include "nsCMSSecureMessage.h"
    1: #include "nsCertPicker.h"
    1: #include "nsCURILoader.h"
    1: #include "nsICategoryManager.h"
    1: #include "nsCRLManager.h"
    1: #include "nsCipherInfo.h"
    1: #include "nsNTLMAuthModule.h"
    1: #include "nsStreamCipher.h"
    1: #include "nsKeyModule.h"
 5604: #include "nsDataSignatureVerifier.h"
 6598: #include "nsCertOverrideService.h"
 6886: #include "nsRandomGenerator.h"
 7054: #include "nsRecentBadCerts.h"
 8463: #include "nsSSLStatus.h"
 8463: #include "nsNSSIOLayer.h"
    1: 
    1: // These two macros are ripped off from nsIGenericFactory.h and slightly
    1: // modified.
    1: #define NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(triggeredByNSSComponent,           \
    1:                                                       _InstanceClass)         \
    1: static NS_IMETHODIMP                                                          \
    1: _InstanceClass##Constructor(nsISupports *aOuter, REFNSIID aIID,               \
    1:                             void **aResult)                                   \
    1: {                                                                             \
    1:     nsresult rv;                                                              \
    1:     _InstanceClass * inst;                                                    \
    1:                                                                               \
25137:     if (!triggeredByNSSComponent &&                                           \
25137:         !EnsureNSSInitialized(PR_TRUE))                                       \
25137:         return NS_ERROR_FAILURE;                                              \
    1:                                                                               \
    1:     *aResult = NULL;                                                          \
    1:     if (NULL != aOuter) {                                                     \
    1:         rv = NS_ERROR_NO_AGGREGATION;                                         \
    1:         return rv;                                                            \
    1:     }                                                                         \
    1:                                                                               \
    1:     NS_NEWXPCOM(inst, _InstanceClass);                                        \
    1:     if (NULL == inst) {                                                       \
    1:         rv = NS_ERROR_OUT_OF_MEMORY;                                          \
    1:         return rv;                                                            \
    1:     }                                                                         \
    1:     NS_ADDREF(inst);                                                          \
    1:     rv = inst->QueryInterface(aIID, aResult);                                 \
    1:     NS_RELEASE(inst);                                                         \
    1:                                                                               \
    1:     return rv;                                                                \
    1: }                                                                             \
    1: 
    1:  
    1: #define NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(triggeredByNSSComponent,      \
    1:                                                 _InstanceClass, _InitMethod)  \
    1: static NS_IMETHODIMP                                                          \
    1: _InstanceClass##Constructor(nsISupports *aOuter, REFNSIID aIID,               \
    1:                             void **aResult)                                   \
    1: {                                                                             \
    1:     nsresult rv;                                                              \
    1:     _InstanceClass * inst;                                                    \
    1:                                                                               \
25137:     if (!triggeredByNSSComponent &&                                           \
25137:         !EnsureNSSInitialized(PR_TRUE))                                       \
25137:         return NS_ERROR_FAILURE;                                              \
    1:                                                                               \
    1:     *aResult = NULL;                                                          \
    1:     if (NULL != aOuter) {                                                     \
    1:         rv = NS_ERROR_NO_AGGREGATION;                                         \
    1:         return rv;                                                            \
    1:     }                                                                         \
    1:                                                                               \
    1:     NS_NEWXPCOM(inst, _InstanceClass);                                        \
    1:     if (NULL == inst) {                                                       \
    1:         rv = NS_ERROR_OUT_OF_MEMORY;                                          \
    1:         return rv;                                                            \
    1:     }                                                                         \
    1:     NS_ADDREF(inst);                                                          \
    1:     rv = inst->_InitMethod();                                                 \
    1:     if(NS_SUCCEEDED(rv)) {                                                    \
    1:         rv = inst->QueryInterface(aIID, aResult);                             \
    1:     }                                                                         \
    1:     NS_RELEASE(inst);                                                         \
    1:                                                                               \
    1:     return rv;                                                                \
    1: }                                                                             \
    1: 
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_TRUE, nsNSSComponent, Init)
    1: 
    1: // Use the special factory constructor for everything this module implements,
    1: // because all code could potentially require the NSS library.
    1: // Our factory constructor takes an additional boolean parameter.
    1: // Only for the nsNSSComponent, set this to PR_TRUE.
    1: // All other classes must have this set to PR_FALSE.
    1: 
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsSSLSocketProvider)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsTLSSocketProvider)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsSecretDecoderRing)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsPK11TokenDB)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsPKCS11ModuleDB)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_FALSE, PSMContentListener, init)
 5210: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertificate)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertificateDB)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSCertCache)
    1: #ifdef MOZ_XUL
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCertTree)
    1: #endif
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCrypto)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsPkcs11)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCMSSecureMessage)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCMSDecoder)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCMSEncoder)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCMSMessage)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCertPicker)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCRLManager)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCipherInfoService)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_FALSE, nsNTLMAuthModule, InitTest)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCryptoHash)
12341: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsCryptoHMAC)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsStreamCipher)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsKeyObject)
    1: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsKeyObjectFactory)
 5604: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsDataSignatureVerifier)
 6598: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_FALSE, nsCertOverrideService, Init)
 6886: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsRandomGenerator)
 7054: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_FALSE, nsRecentBadCertsService, Init)
 8463: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsSSLStatus)
 8463: NS_NSS_GENERIC_FACTORY_CONSTRUCTOR(PR_FALSE, nsNSSSocketInfo)
    1: 
    1: static NS_METHOD RegisterPSMContentListeners(
    1:                       nsIComponentManager *aCompMgr,
    1:                       nsIFile *aPath, const char *registryLocation, 
    1:                       const char *componentType, const nsModuleComponentInfo *info)
    1: {
    1:   nsresult rv;
    1:   nsCOMPtr<nsICategoryManager> catman = 
    1:     do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);
    1:   if (NS_FAILED(rv)) return rv;
    1: 
    1:   nsXPIDLCString previous;
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-x509-ca-cert",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-x509-server-cert",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-x509-user-cert",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-x509-email-cert",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-pkcs7-crl",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/x-x509-crl",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   catman->AddCategoryEntry(
    1:     NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY,
    1:     "application/pkix-crl",
    1:     info->mContractID, PR_TRUE, PR_TRUE, getter_Copies(previous));
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: static const nsModuleComponentInfo components[] =
    1: {
    1:   {
    1:     PSM_COMPONENT_CLASSNAME,
    1:     NS_NSSCOMPONENT_CID,
    1:     PSM_COMPONENT_CONTRACTID,
    1:     nsNSSComponentConstructor
    1:   },
    1:   
    1:   {
    1:     PSM_COMPONENT_CLASSNAME,
    1:     NS_NSSCOMPONENT_CID,
    1:     NS_NSS_ERRORS_SERVICE_CONTRACTID,
    1:     nsNSSComponentConstructor
    1:   },
    1:   
    1:   {
    1:     NS_SSLSOCKETPROVIDER_CLASSNAME,
    1:     NS_SSLSOCKETPROVIDER_CID,
    1:     NS_SSLSOCKETPROVIDER_CONTRACTID,
    1:     nsSSLSocketProviderConstructor
    1:   },
    1:   
    1:   {
    1:     NS_STARTTLSSOCKETPROVIDER_CLASSNAME,
    1:     NS_STARTTLSSOCKETPROVIDER_CID,
    1:     NS_STARTTLSSOCKETPROVIDER_CONTRACTID,
    1:     nsTLSSocketProviderConstructor
    1:   },
    1:   
    1:   {
    1:     NS_SDR_CLASSNAME,
    1:     NS_SDR_CID,
    1:     NS_SDR_CONTRACTID,
    1:     nsSecretDecoderRingConstructor
    1:   },
    1: 
    1:   {
    1:     "PK11 Token Database",
    1:     NS_PK11TOKENDB_CID,
    1:     NS_PK11TOKENDB_CONTRACTID,
    1:     nsPK11TokenDBConstructor
    1:   },
    1: 
    1:   {
    1:     "PKCS11 Module Database",
    1:     NS_PKCS11MODULEDB_CID,
    1:     NS_PKCS11MODULEDB_CONTRACTID,
    1:     nsPKCS11ModuleDBConstructor
    1:   },
    1: 
    1:   {
    1:     "Generic Certificate Content Handler",
    1:     NS_PSMCONTENTLISTEN_CID,
    1:     NS_PSMCONTENTLISTEN_CONTRACTID,
    1:     PSMContentListenerConstructor
    1:   },
    1: 
    1:   {
 5210:     "X509 Certificate",
 5210:     NS_X509CERT_CID,
 5210:     nsnull,
 5210:     nsNSSCertificateConstructor
 5210:   },
 5210:   
 5210:   {
    1:     "X509 Certificate Database",
    1:     NS_X509CERTDB_CID,
    1:     NS_X509CERTDB_CONTRACTID,
    1:     nsNSSCertificateDBConstructor
    1:   },
    1: 
    1:   {
    1:     "NSS Certificate Cache",
    1:     NS_NSSCERTCACHE_CID,
    1:     NS_NSSCERTCACHE_CONTRACTID,
    1:     nsNSSCertCacheConstructor
    1:   },
    1: 
    1:   {
    1:     "Form Processor",
    1:     NS_FORMPROCESSOR_CID,
    1:     NS_FORMPROCESSOR_CONTRACTID,
    1:     nsKeygenFormProcessor::Create
    1:   },
    1: #ifdef MOZ_XUL
    1:   {
    1:     "Certificate Tree",
    1:     NS_CERTTREE_CID,
    1:     NS_CERTTREE_CONTRACTID,
    1:     nsCertTreeConstructor
    1:   },
    1: #endif
    1:   {
    1:     NS_PKCS11_CLASSNAME,
    1:     NS_PKCS11_CID,
    1:     NS_PKCS11_CONTRACTID,
    1:     nsPkcs11Constructor
    1:   },
    1: 
    1:   {
    1:     NS_CRYPTO_CLASSNAME,
    1:     NS_CRYPTO_CID,
    1:     NS_CRYPTO_CONTRACTID,
    1:     nsCryptoConstructor
    1:   },
    1: 
    1:   {
    1:     NS_CMSSECUREMESSAGE_CLASSNAME,
    1:     NS_CMSSECUREMESSAGE_CID,
    1:     NS_CMSSECUREMESSAGE_CONTRACTID,
    1:     nsCMSSecureMessageConstructor
    1:   },
    1: 
    1:   {
    1:     NS_CMSDECODER_CLASSNAME,
    1:     NS_CMSDECODER_CID,
    1:     NS_CMSDECODER_CONTRACTID,
    1:     nsCMSDecoderConstructor
    1:   },
    1: 
    1:   {
    1:     NS_CMSENCODER_CLASSNAME,
    1:     NS_CMSENCODER_CID,
    1:     NS_CMSENCODER_CONTRACTID,
    1:     nsCMSEncoderConstructor
    1:   },
    1: 
    1:   {
    1:     NS_CMSMESSAGE_CLASSNAME,
    1:     NS_CMSMESSAGE_CID,
    1:     NS_CMSMESSAGE_CONTRACTID,
    1:     nsCMSMessageConstructor
    1:   },
    1: 
    1:   {
    1:     NS_CRYPTO_HASH_CLASSNAME,
    1:     NS_CRYPTO_HASH_CID,
    1:     NS_CRYPTO_HASH_CONTRACTID,
    1:     nsCryptoHashConstructor
    1:   },
    1: 
    1:   {
12341:     NS_CRYPTO_HMAC_CLASSNAME,
12341:     NS_CRYPTO_HMAC_CID,
12341:     NS_CRYPTO_HMAC_CONTRACTID,
12341:     nsCryptoHMACConstructor
12341:   },
12341: 
12341:   {
    1:     NS_CERT_PICKER_CLASSNAME,
    1:     NS_CERT_PICKER_CID,
    1:     NS_CERT_PICKER_CONTRACTID,
    1:     nsCertPickerConstructor
    1:   },
    1: 
    1:   {
    1:     "PSM Content Listeners",
    1:     NS_PSMCONTENTLISTEN_CID,
    1:     "@mozilla.org/uriloader/psm-external-content-listener;1",
    1:     PSMContentListenerConstructor,
    1:     RegisterPSMContentListeners
    1:   },
    1: 
    1:   {
    1:     "PSM CRL Manager",
    1:     NS_CRLMANAGER_CID,
    1:     NS_CRLMANAGER_CONTRACTID,
    1:     nsCRLManagerConstructor
    1:   },
    1:   
    1:   {
    1:     "PSM Cipher Info",
    1:     NS_CIPHERINFOSERVICE_CID,
    1:     NS_CIPHERINFOSERVICE_CONTRACTID,
    1:     nsCipherInfoServiceConstructor
    1:   },
    1:   
    1:   {
    1:     NS_CRYPTO_FIPSINFO_SERVICE_CLASSNAME,
    1:     NS_PKCS11MODULEDB_CID,
    1:     NS_CRYPTO_FIPSINFO_SERVICE_CONTRACTID,
    1:     nsPKCS11ModuleDBConstructor
    1:   },
    1: 
    1:   {
    1:     NS_NTLMAUTHMODULE_CLASSNAME,
    1:     NS_NTLMAUTHMODULE_CID,
    1:     NS_NTLMAUTHMODULE_CONTRACTID,
    1:     nsNTLMAuthModuleConstructor
    1:   },
    1: 
    1:   {
    1:     NS_STREAMCIPHER_CLASSNAME,
    1:     NS_STREAMCIPHER_CID,
    1:     NS_STREAMCIPHER_CONTRACTID,
    1:     nsStreamCipherConstructor
    1:   },
    1: 
    1:   {
    1:     NS_KEYMODULEOBJECT_CLASSNAME,
    1:     NS_KEYMODULEOBJECT_CID,
    1:     NS_KEYMODULEOBJECT_CONTRACTID,
    1:     nsKeyObjectConstructor
    1:   },
    1: 
    1:   {
    1:     NS_KEYMODULEOBJECTFACTORY_CLASSNAME,
    1:     NS_KEYMODULEOBJECTFACTORY_CID,
    1:     NS_KEYMODULEOBJECTFACTORY_CONTRACTID,
    1:     nsKeyObjectFactoryConstructor
 5604:   },
 5604: 
 5604:   {
 5604:     "Signature Verifier",
 5604:     NS_DATASIGNATUREVERIFIER_CID,
 5604:     NS_DATASIGNATUREVERIFIER_CONTRACTID,
 5604:     nsDataSignatureVerifierConstructor
 6598:   },
 6598: 
 6598:   {
 6598:     "PSM Cert Override Settings Service",
 6598:     NS_CERTOVERRIDE_CID,
 6598:     NS_CERTOVERRIDE_CONTRACTID,
 6598:     nsCertOverrideServiceConstructor
 6886:   },
 6886: 
 6886:   {
 6886:     "Random Generator",
 6886:     NS_RANDOMGENERATOR_CID,
 6886:     NS_RANDOMGENERATOR_CONTRACTID,
 6886:     nsRandomGeneratorConstructor
 7054:   },
 7054: 
 7054:   {
 7054:     "PSM Recent Bad Certs Service",
 7054:     NS_RECENTBADCERTS_CID,
 7054:     NS_RECENTBADCERTS_CONTRACTID,
 7054:     nsRecentBadCertsServiceConstructor
 8463:   },
 8463: 
 8463:   {
 8463:     "SSL Status object",
 8463:     NS_SSLSTATUS_CID,
 8463:     nsnull,
 8463:     nsSSLStatusConstructor
 8463:   },
 8463: 
 8463:   {
 8463:     "NSS Socket Info",
 8463:     NS_NSSSOCKETINFO_CID,
 8463:     nsnull,
 8463:     nsNSSSocketInfoConstructor
    1:   }
    1: };
    1: 
    1: NS_IMPL_NSGETMODULE(NSS, components)
