47361: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
47361: /* ***** BEGIN LICENSE BLOCK *****
47361:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
47361:  *
47361:  * The contents of this file are subject to the Mozilla Public License Version
47361:  * 1.1 (the "License"); you may not use this file except in compliance with
47361:  * the License. You may obtain a copy of the License at
47361:  * http://www.mozilla.org/MPL/
47361:  *
47361:  * Software distributed under the License is distributed on an "AS IS" basis,
47361:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
47361:  * for the specific language governing rights and limitations under the
47361:  * License.
47361:  *
47361:  * The Original Code is mozilla.org code.
47361:  *
47361:  * The Initial Developer of the Original Code is
47361:  * Netscape Communications Corporation.
47361:  * Portions created by the Initial Developer are Copyright (C) 1998
47361:  * the Initial Developer. All Rights Reserved.
47361:  *
47361:  * Contributor(s):
47361:  *   Sean Echevarria <sean@beatnik.com>
47361:  *   HÃ¥kan Waara <hwaara@chello.se>
47361:  *   Josh Aas <josh@mozilla.com>
47361:  *
47361:  * Alternatively, the contents of this file may be used under the terms of
47361:  * either the GNU General Public License Version 2 or later (the "GPL"), or
47361:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
47361:  * in which case the provisions of the GPL or the LGPL are applicable instead
47361:  * of those above. If you wish to allow use of your version of this file only
47361:  * under the terms of either the GPL or the LGPL, and not to allow others to
47361:  * use your version of this file under the terms of the MPL, indicate your
47361:  * decision by deleting the provisions above and replace them with the notice
47361:  * and other provisions required by the GPL or the LGPL. If you do not delete
47361:  * the provisions above, a recipient may use your version of this file under
47361:  * the terms of any one of the MPL, the GPL or the LGPL.
47361:  *
47361:  * ***** END LICENSE BLOCK ***** */
47361: 
60021: #ifndef nsPluginStreamListenerPeer_h_
60021: #define nsPluginStreamListenerPeer_h_
60021: 
47361: #include "nscore.h"
47361: #include "nsIFile.h"
47361: #include "nsIStreamListener.h"
47361: #include "nsIProgressEventSink.h"
47361: #include "nsIHttpHeaderVisitor.h"
47361: #include "nsWeakReference.h"
47361: #include "nsNPAPIPluginStreamListener.h"
47361: #include "nsHashtable.h"
47835: #include "nsNPAPIPluginInstance.h"
57651: #include "nsIInterfaceRequestor.h"
57651: #include "nsIChannelEventSink.h"
47361: 
47361: class nsIChannel;
47361: 
47361: /**
47361:  * When a plugin requests opens multiple requests to the same URL and
47361:  * the request must be satified by saving a file to disk, each stream
47361:  * listener holds a reference to the backing file: the file is only removed
47361:  * when all the listeners are done.
47361:  */
47361: class CachedFileHolder
47361: {
47361: public:
47361:   CachedFileHolder(nsIFile* cacheFile);
47361:   ~CachedFileHolder();
47361:   
47361:   void AddRef();
47361:   void Release();
47361:   
47361:   nsIFile* file() const { return mFile; }
47361:   
47361: private:
47361:   nsAutoRefCnt mRefCnt;
47361:   nsCOMPtr<nsIFile> mFile;
47361: };
47361: 
47361: class nsPluginStreamListenerPeer : public nsIStreamListener,
47361: public nsIProgressEventSink,
47361: public nsIHttpHeaderVisitor,
47361: public nsSupportsWeakReference,
57651: public nsINPAPIPluginStreamInfo,
57651: public nsIInterfaceRequestor,
57651: public nsIChannelEventSink
47361: {
47361: public:
47361:   nsPluginStreamListenerPeer();
47361:   virtual ~nsPluginStreamListenerPeer();
47361:   
47361:   NS_DECL_ISUPPORTS
47361:   NS_DECL_NSIPROGRESSEVENTSINK
47361:   NS_DECL_NSIREQUESTOBSERVER
47361:   NS_DECL_NSISTREAMLISTENER
47361:   NS_DECL_NSIHTTPHEADERVISITOR
57651:   NS_DECL_NSIINTERFACEREQUESTOR
57651:   NS_DECL_NSICHANNELEVENTSINK
47361: 
47361:   // nsINPAPIPluginStreamInfo interface
47361:   NS_DECL_NSIPLUGINSTREAMINFO
47361:   
47361:   // Called by RequestRead
47361:   void
47361:   MakeByteRangeString(NPByteRange* aRangeList, nsACString &string, PRInt32 *numRequests);
47361:   
47361:   PRBool UseExistingPluginCacheFile(nsPluginStreamListenerPeer* psi);
47361:   
47361:   // Called by GetURL and PostURL (via NewStream)
47361:   nsresult Initialize(nsIURI *aURL,
47835:                       nsNPAPIPluginInstance *aInstance,
63022:                       nsIPluginStreamListener *aListener,
63022:                       PRInt32 requestCount = 1);
47361:   
47361:   nsresult InitializeEmbedded(nsIURI *aURL,
47835:                               nsNPAPIPluginInstance* aInstance,
47361:                               nsIPluginInstanceOwner *aOwner = nsnull);
47361:   
47835:   nsresult InitializeFullPage(nsIURI* aURL, nsNPAPIPluginInstance *aInstance);
47361:   
47361:   nsresult OnFileAvailable(nsIFile* aFile);
47361:   
47361:   nsresult ServeStreamAsFile(nsIRequest *request, nsISupports *ctxt);
47361:   
47835:   nsNPAPIPluginInstance *GetPluginInstance() { return mPluginInstance; }
47361:   
47361: private:
47361:   nsresult SetUpStreamListener(nsIRequest* request, nsIURI* aURL);
47361:   nsresult SetupPluginCacheFile(nsIChannel* channel);
57651:   nsresult GetInterfaceGlobal(const nsIID& aIID, void** result);
47361: 
47361:   nsCOMPtr<nsIURI> mURL;
47361:   nsCString mURLSpec; // Have to keep this member because GetURL hands out char*
47361:   nsCOMPtr<nsIPluginInstanceOwner> mOwner;
60021:   nsRefPtr<nsNPAPIPluginStreamListener> mPStreamListener;
47361: 
47361:   // Set to PR_TRUE if we request failed (like with a HTTP response of 404)
47361:   PRPackedBool            mRequestFailed;
47361:   
47361:   /*
47361:    * Set to PR_TRUE after nsIPluginStreamListener::OnStartBinding() has
47361:    * been called.  Checked in ::OnStopRequest so we can call the
47361:    * plugin's OnStartBinding if, for some reason, it has not already
47361:    * been called.
47361:    */
47361:   PRPackedBool      mStartBinding;
47361:   PRPackedBool      mHaveFiredOnStartRequest;
47361:   // these get passed to the plugin stream listener
51739:   PRUint32                mLength;
47361:   PRInt32                 mStreamType;
47361:   
47361:   // local cached file, we save the content into local cache if browser cache is not available,
47361:   // or plugin asks stream as file and it expects file extension until bug 90558 got fixed
47361:   nsRefPtr<CachedFileHolder> mLocalCachedFileHolder;
47361:   nsCOMPtr<nsIOutputStream> mFileCacheOutputStream;
47361:   nsHashtable             *mDataForwardToRequest;
47361:   
47361:   nsCString mContentType;
47361:   PRBool mSeekable;
47361:   PRUint32 mModified;
47835:   nsRefPtr<nsNPAPIPluginInstance> mPluginInstance;
47361:   PRInt32 mStreamOffset;
47361:   PRBool mStreamComplete;
47361:   
47361: public:
47361:   PRBool                  mAbort;
47361:   PRInt32                 mPendingRequests;
47361:   nsWeakPtr               mWeakPtrChannelCallbacks;
47361:   nsWeakPtr               mWeakPtrChannelLoadGroup;
47361: };
60021: 
60021: #endif // nsPluginStreamListenerPeer_h_
