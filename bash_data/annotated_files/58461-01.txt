    1: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Foundation code.
    1:  *
    1:  * The Initial Developer of the Original Code is Mozilla Foundation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Stuart Parmenter <pavlov@pavlov.net>
    1:  *   Masayuki Nakano <masayuki@d-toybox.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef GFX_WINDOWS_PLATFORM_H
    1: #define GFX_WINDOWS_PLATFORM_H
    1: 
30087: #if defined(WINCE)
30087: #define MOZ_FT2_FONTS 1
30087: #endif
30087: 
38727: 
38727: /**
58162:  * XXX to get CAIRO_HAS_D2D_SURFACE and
38727:  * CAIRO_HAS_DWRITE_FONT
38727:  */
38727: #include "cairo.h"
38727: 
13877: #include "gfxFontUtils.h"
    1: #include "gfxWindowsSurface.h"
39523: #include "gfxFont.h"
24104: #ifdef MOZ_FT2_FONTS
24104: #include "gfxFT2Fonts.h"
24104: #else
38727: #ifdef CAIRO_HAS_DWRITE_FONT
38727: #include "gfxDWriteFonts.h"
38727: #endif
24104: #endif
    1: #include "gfxPlatform.h"
39447: #include "gfxContext.h"
    1: 
23904: #include "nsTArray.h"
    1: #include "nsDataHashtable.h"
    1: 
24104: #ifdef MOZ_FT2_FONTS
24104: typedef struct FT_LibraryRec_ *FT_Library;
24104: #endif
24104: 
    1: #include <windows.h>
51540: #include <objbase.h>
    1: 
39447: // Utility to get a Windows HDC from a thebes context,
39447: // used by both GDI and Uniscribe font shapers
39447: struct DCFromContext {
39447:     DCFromContext(gfxContext *aContext) {
39447:         dc = NULL;
39447:         nsRefPtr<gfxASurface> aSurface = aContext->CurrentSurface();
39447:         NS_ASSERTION(aSurface, "DCFromContext: null surface");
39447:         if (aSurface &&
39447:             (aSurface->GetType() == gfxASurface::SurfaceTypeWin32 ||
39447:              aSurface->GetType() == gfxASurface::SurfaceTypeWin32Printing))
39447:         {
39447:             dc = static_cast<gfxWindowsSurface*>(aSurface.get())->GetDC();
39447:             needsRelease = PR_FALSE;
39447:         }
39447:         if (!dc) {
39447:             dc = GetDC(NULL);
39447:             SetGraphicsMode(dc, GM_ADVANCED);
39447:             needsRelease = PR_TRUE;
39447:         }
39447:     }
39447: 
39447:     ~DCFromContext() {
39447:         if (needsRelease)
39447:             ReleaseDC(NULL, dc);
39447:     }
39447: 
39447:     operator HDC () {
39447:         return dc;
39447:     }
39447: 
39447:     HDC dc;
39447:     PRBool needsRelease;
39447: };
39447: 
36949: class THEBES_API gfxWindowsPlatform : public gfxPlatform {
    1: public:
    1:     gfxWindowsPlatform();
    1:     virtual ~gfxWindowsPlatform();
    1:     static gfxWindowsPlatform *GetPlatform() {
    1:         return (gfxWindowsPlatform*) gfxPlatform::GetPlatform();
    1:     }
    1: 
36949:     virtual gfxPlatformFontList* CreatePlatformFontList();
36949: 
    1:     already_AddRefed<gfxASurface> CreateOffscreenSurface(const gfxIntSize& size,
54253:                                                          gfxASurface::gfxContentType contentType);
    1: 
30087:     enum RenderMode {
30087:         /* Use GDI and windows surfaces */
30087:         RENDER_GDI = 0,
30087: 
30087:         /* Use 32bpp image surfaces and call StretchDIBits */
30087:         RENDER_IMAGE_STRETCH32,
30087: 
30087:         /* Use 32bpp image surfaces, and do 32->24 conversion before calling StretchDIBits */
30087:         RENDER_IMAGE_STRETCH24,
30087: 
30087:         /* Use DirectDraw on Windows CE */
30087:         RENDER_DDRAW,
30087: 
30087:         /* Use 24bpp image surfaces, with final DirectDraw 16bpp blt on Windows CE */
30087:         RENDER_IMAGE_DDRAW16,
30087: 
30087:         /* Use DirectDraw with OpenGL on Windows CE */
30087:         RENDER_DDRAW_GL,
30087: 
38727:         /* Use Direct2D rendering */
38727:         RENDER_DIRECT2D,
38727: 
30087:         /* max */
30087:         RENDER_MODE_MAX
30087:     };
30087: 
30087:     RenderMode GetRenderMode() { return mRenderMode; }
30087:     void SetRenderMode(RenderMode rmode) { mRenderMode = rmode; }
30087: 
53984:     /**
53984:      * Updates render mode with relation to the current preferences and
53984:      * available devices.
53984:      */
53984:     void UpdateRenderMode();
53984: 
53984:     /**
53984:      * Verifies a D2D device is present and working, will attempt to create one
53984:      * it is non-functional or non-existant.
53984:      *
53984:      * \param aAttemptForce Attempt to force D2D cairo device creation by using
53984:      * cairo device creation routines.
53984:      */
53984:     void VerifyD2DDevice(PRBool aAttemptForce);
53984: 
51035:     HDC GetScreenDC() { return mScreenDC; }
51035: 
38493:     nsresult GetFontList(nsIAtom *aLangGroup,
    1:                          const nsACString& aGenericFamily,
23904:                          nsTArray<nsString>& aListOfFonts);
    1: 
    1:     nsresult UpdateFontList();
    1: 
    1:     nsresult ResolveFontName(const nsAString& aFontName,
    1:                              FontResolverCallback aCallback,
    1:                              void *aClosure, PRBool& aAborted);
    1: 
13003:     nsresult GetStandardFamilyName(const nsAString& aFontName, nsAString& aFamilyName);
13003: 
  270:     gfxFontGroup *CreateFontGroup(const nsAString &aFamilies,
19962:                                   const gfxFontStyle *aStyle,
19962:                                   gfxUserFontSet *aUserFontSet);
19962: 
19962:     /**
19962:      * Look up a local platform font using the full font face name (needed to support @font-face src local() )
19962:      */
23273:     virtual gfxFontEntry* LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
23273:                                           const nsAString& aFontName);
19962: 
19962:     /**
19962:      * Activate a platform font (needed to support @font-face src url() )
19962:      */
22397:     virtual gfxFontEntry* MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
22397:                                            const PRUint8 *aFontData,
22397:                                            PRUint32 aLength);
19962: 
19962:     /**
19962:      * Check whether format is supported on a platform or not (if unclear, returns true)
19962:      */
19962:     virtual PRBool IsFontFormatSupported(nsIURI *aFontURI, PRUint32 aFormatFlags);
  270: 
36949:     /* Find a FontFamily/FontEntry object that represents a font on your system given a name */
36949:     gfxFontFamily *FindFontFamily(const nsAString& aName);
36949:     gfxFontEntry *FindFontEntry(const nsAString& aName, const gfxFontStyle& aFontStyle);
    1: 
36949:     PRBool GetPrefFontEntries(const nsCString& aLangGroup, nsTArray<nsRefPtr<gfxFontEntry> > *array);
36949:     void SetPrefFontEntries(const nsCString& aLangGroup, nsTArray<nsRefPtr<gfxFontEntry> >& array);
13280: 
26915:     void ClearPrefFonts() { mPrefFonts.Clear(); }
26915: 
42854:     // ClearType is not always enabled even when available (e.g. Windows XP)
42854:     // if either of these prefs are enabled and apply, use ClearType rendering
42854:     PRBool UseClearTypeForDownloadableFonts();
42854:     PRBool UseClearTypeAlways();
42854: 
42854:     // OS version in 16.16 major/minor form
42854:     // based on http://msdn.microsoft.com/en-us/library/ms724834(VS.85).aspx
42854:     enum {
42854:         kWindowsUnknown = 0,
42854:         kWindows2000 = 0x50000,
42854:         kWindowsXP = 0x50001,
42854:         kWindowsServer2003 = 0x50002,
42854:         kWindowsVista = 0x60000,
42854:         kWindows7 = 0x60001
42854:     };
42854: 
42854:     static PRInt32 WindowsOSVersion();
42854: 
42854:     virtual void FontsPrefsChanged(nsIPrefBranch *aPrefBranch, const char *aPref);
42854: 
38727: #ifdef CAIRO_HAS_DWRITE_FONT
58461:     IDWriteFactory *GetDWriteFactory() { return mDWriteFactory; }
53984:     inline PRBool DWriteEnabled() { return mUseDirectWrite; }
50655: #else
50655:     inline PRBool DWriteEnabled() { return PR_FALSE; }
38727: #endif
49320: #ifdef CAIRO_HAS_D2D_SURFACE
49320:     cairo_device_t *GetD2DDevice() { return mD2DDevice; }
56335:     ID3D10Device1 *GetD3D10Device() { return mD2DDevice ? cairo_d2d_device_get_device(mD2DDevice) : nsnull; }
49320: #endif
38727: 
24104: #ifdef MOZ_FT2_FONTS
24104:     FT_Library GetFTLibrary();
24104: #endif
24104: 
30087: protected:
30087:     RenderMode mRenderMode;
30087: 
42854:     PRBool mUseClearTypeForDownloadableFonts;
42854:     PRBool mUseClearTypeAlways;
51035:     HDC mScreenDC;
42854: 
    1: private:
    1:     void Init();
    1: 
53984:     PRBool mUseDirectWrite;
57104:     PRBool mUsingGDIFonts;
53984: 
38727: #ifdef CAIRO_HAS_DWRITE_FONT
38727:     nsRefPtr<IDWriteFactory> mDWriteFactory;
38727: #endif
49320: #ifdef CAIRO_HAS_D2D_SURFACE
49320:     cairo_device_t *mD2DDevice;
49320: #endif
38727: 
27035:     virtual qcms_profile* GetPlatformCMSOutputProfile();
 3787: 
36949:     // TODO: unify this with mPrefFonts (NB: holds families, not fonts) in gfxPlatformFontList
36949:     nsDataHashtable<nsCStringHashKey, nsTArray<nsRefPtr<gfxFontEntry> > > mPrefFonts;
    1: };
    1: 
    1: #endif /* GFX_WINDOWS_PLATFORM_H */
