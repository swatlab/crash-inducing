    1: dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
    1: dnl vi: set tabstop=4 shiftwidth=4 expandtab:
    1: dnl ***** BEGIN LICENSE BLOCK *****
    1: dnl Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: dnl
    1: dnl The contents of this file are subject to the Mozilla Public License Version
    1: dnl 1.1 (the "License"); you may not use this file except in compliance with
    1: dnl the License. You may obtain a copy of the License at
    1: dnl http://www.mozilla.org/MPL/
    1: dnl
    1: dnl Software distributed under the License is distributed on an "AS IS" basis,
    1: dnl WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: dnl for the specific language governing rights and limitations under the
    1: dnl License.
    1: dnl
    1: dnl The Original Code is this file as it was released upon August 6, 1998.
    1: dnl
    1: dnl The Initial Developer of the Original Code is
    1: dnl Christopher Seawood.
    1: dnl Portions created by the Initial Developer are Copyright (C) 1998-2001
    1: dnl the Initial Developer. All Rights Reserved.
    1: dnl
    1: dnl Contributor(s):
    1: dnl   Jamie Zawinski <jwz@jwz.org>
    1: dnl   gettimeofday args check
    1: dnl   Christopher Blizzard <blizzard@appliedtheory.com>
    1: dnl   gnomefe update & enable-pthreads
    1: dnl   Ramiro Estrugo <ramiro@netscape.com>
    1: dnl   X11 makedepend support
    1: dnl   Insure support.
    1: dnl   Henry Sobotka <sobotka@axess.com>
    1: dnl   OS/2 support
    1: dnl   Dan Mosedale <dmose@mozilla.org>
    1: dnl   LDAP support
    1: dnl   Seth Spitzer <sspitzer@netscape.com>
    1: dnl   xpctools support
    1: dnl   Benjamin Smedberg <benjamin@smedbergs.us>
    1: dnl   Howard Chu <hyc@symas.com>
    1: dnl   MSYS support
    1: dnl   Mark Mentovai <mark@moxienet.com>:
    1: dnl   Mac OS X 10.4 support
    1: dnl   Giorgio Maone <g.maone@informaction.com>
    1: dnl   MSVC l10n compatible version check
 1796: dnl   Ben Turner <mozilla@songbirdnest.com>
    1: dnl
    1: dnl Alternatively, the contents of this file may be used under the terms of
    1: dnl either the GNU General Public License Version 2 or later (the "GPL"), or
    1: dnl the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: dnl in which case the provisions of the GPL or the LGPL are applicable instead
    1: dnl of those above. If you wish to allow use of your version of this file only
    1: dnl under the terms of either the GPL or the LGPL, and not to allow others to
    1: dnl use your version of this file under the terms of the MPL, indicate your
    1: dnl decision by deleting the provisions above and replace them with the notice
    1: dnl and other provisions required by the GPL or the LGPL. If you do not delete
    1: dnl the provisions above, a recipient may use your version of this file under
    1: dnl the terms of any one of the MPL, the GPL or the LGPL.
    1: dnl
    1: dnl ***** END LICENSE BLOCK *****
    1: 
    1: dnl Process this file with autoconf to produce a configure script.
    1: dnl ========================================================
    1: 
    1: AC_PREREQ(2.13)
21062: AC_INIT(jsapi.h)
    1: AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
21063: AC_CONFIG_HEADER(js-config.h)
    1: AC_CANONICAL_SYSTEM
    1: TARGET_CPU="${target_cpu}"
    1: TARGET_VENDOR="${target_vendor}"
    1: TARGET_OS="${target_os}"
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Don't change the following two lines.  Doing so breaks:
    1: dnl =
    1: dnl = CFLAGS="-foo" ./configure
    1: dnl =
    1: dnl ========================================================
    1: CFLAGS="${CFLAGS=}"
    1: CPPFLAGS="${CPPFLAGS=}"
    1: CXXFLAGS="${CXXFLAGS=}"
    1: LDFLAGS="${LDFLAGS=}"
    1: HOST_CFLAGS="${HOST_CFLAGS=}"
    1: HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
    1: HOST_LDFLAGS="${HOST_LDFLAGS=}"
    1: 
    1: dnl ========================================================
    1: dnl = Preserve certain environment flags passed to configure
    1: dnl = We want sub projects to receive the same flags
    1: dnl = untainted by this configure script
    1: dnl ========================================================
    1: _SUBDIR_CC="$CC"
    1: _SUBDIR_CXX="$CXX"
    1: _SUBDIR_CFLAGS="$CFLAGS"
    1: _SUBDIR_CPPFLAGS="$CPPFLAGS"
    1: _SUBDIR_CXXFLAGS="$CXXFLAGS"
    1: _SUBDIR_LDFLAGS="$LDFLAGS"
    1: _SUBDIR_HOST_CC="$HOST_CC"
    1: _SUBDIR_HOST_CFLAGS="$HOST_CFLAGS"
    1: _SUBDIR_HOST_CXXFLAGS="$HOST_CXXFLAGS"
    1: _SUBDIR_HOST_LDFLAGS="$HOST_LDFLAGS"
    1: _SUBDIR_CONFIG_ARGS="$ac_configure_args"
    1: 
    1: dnl Set the version number of the libs included with mozilla
    1: dnl ========================================================
    1: NSPR_VERSION=4
    1: 
    1: dnl Set the minimum version of toolkit libs used by mozilla
    1: dnl ========================================================
    1: PERL_VERSION=5.006
    1: WINDRES_VERSION=2.14.90
    1: W32API_VERSION=3.8
    1: 
    1: MSMANIFEST_TOOL=
    1: 
    1: dnl Set various checks
    1: dnl ========================================================
    1: MISSING_X=
    1: AC_PROG_AWK
    1: 
    1: dnl Initialize the Pthread test variables early so they can be
    1: dnl  overridden by each platform.
    1: dnl ========================================================
    1: USE_PTHREADS=
    1: _PTHREAD_LDFLAGS=""
    1: 
    1: dnl Do not allow a separate objdir build if a srcdir build exists.
    1: dnl ==============================================================
    1: _topsrcdir=`cd \`dirname $0\`; pwd`
    1: _objdir=`pwd`
11967: 
    1: if test "$_topsrcdir" != "$_objdir"
    1: then
    1:   # Check for a couple representative files in the source tree
    1:   _conflict_files=
    1:   for file in $_topsrcdir/Makefile $_topsrcdir/config/autoconf.mk; do
    1:     if test -f $file; then
    1:       _conflict_files="$_conflict_files $file"
    1:     fi
    1:   done
    1:   if test "$_conflict_files"; then
    1:     echo "***"
    1:     echo "*   Your source tree contains these files:"
    1:     for file in $_conflict_files; do
    1:       echo "*         $file"
    1:     done
    1:     cat 1>&2 <<-EOF
    1: 	*   This indicates that you previously built in the source tree.
    1: 	*   A source tree build can confuse the separate objdir build.
    1: 	*
    1: 	*   To clean up the source tree:
    1: 	*     1. cd $_topsrcdir
    1: 	*     2. gmake distclean
    1: 	***
    1: 	EOF
    1:     exit 1
    1:     break
    1:   fi
    1: fi
    1: MOZ_BUILD_ROOT=`pwd`
    1: 
23004: dnl Choose where to put the 'dist' directory.
23004: dnl ==============================================================
23004: 
23004: MOZ_ARG_WITH_STRING(dist-dir,
23004: [  --with-dist-dir=DIR     Use DIR as 'dist' staging area.  DIR may be
23004:                           relative to the top of SpiderMonkey build tree,
23004:                           or absolute.],
23004:     TOP_DIST=$withval,
23004:     TOP_DIST=dist)
23004: AC_SUBST(TOP_DIST)
23004: 
33298: dnl Default to MSVC for win32 and gcc-4.2 for darwin
    1: dnl ==============================================================
    1: if test -z "$CROSS_COMPILE"; then
    1: case "$target" in
    1: *-cygwin*|*-mingw*|*-msvc*|*-mks*)
    1:     if test -z "$CC"; then CC=cl; fi
    1:     if test -z "$CXX"; then CXX=cl; fi
14341:     if test -z "$CPP"; then CPP="cl -E -nologo"; fi
14341:     if test -z "$CXXCPP"; then CXXCPP="cl -TP -E -nologo"; ac_cv_prog_CXXCPP="$CXXCPP"; fi
    1:     if test -z "$LD"; then LD=link; fi
33494:     if test -z "$AS"; then
33494:         case "${target_cpu}" in
33494:         i*86)
33494:             AS=ml;
33494:             ;;
33494:         x86_64)
33494:             AS=ml64;
33494:             ;;
33494:         esac
33494:     fi
33298:     if test -z "$MIDL"; then MIDL=midl; fi
33298:     ;;
33298: *-darwin*)
33298:     if test -z "$CC"; then CC=gcc-4.2; fi
33298:     if test -z "$CXX"; then CXX=g++-4.2; fi
    1:     ;;
    1: esac
    1: fi
    1: 
    1: COMPILE_ENVIRONMENT=1
    1: MOZ_ARG_ENABLE_BOOL(compile-environment,
    1: [  --disable-compile-environment
    1:                           Disable compiler/library checks.],
    1:     COMPILE_ENVIRONMENT=1,
    1:     COMPILE_ENVIRONMENT= )
    1: 
50577: MOZ_ARG_ENABLE_BOOL(shared-js,
50577: [  --disable-shared-js
50577:                           Do not create a shared library.],
50577:     DISABLE_SHARED_JS=0,
50577:     DISABLE_SHARED_JS=1)
50577: 
50577: if test "$DISABLE_SHARED_JS" = "1" ; then
50577:   AC_DEFINE(STATIC_EXPORTABLE_JS_API)
50577: else
50577:   JS_SHARED_LIBRARY=1
50577: fi
50577: AC_SUBST(JS_SHARED_LIBRARY)
50577: 
    1: dnl ========================================================
40165: dnl = Android uses a very custom (hacky) toolchain; we need to do this
40165: dnl = here, so that the compiler checks can succeed
40165: dnl ========================================================
40165: 
40165: MOZ_ARG_WITH_STRING(android-ndk,
43058: [  --with-android-ndk=DIR  location where the Android NDK can be found],
40165:     android_ndk=$withval)
40165: 
40165: MOZ_ARG_WITH_STRING(android-toolchain,
40165: [  --with-android-toolchain=DIR
40165:                           location of the android toolchain, default NDK/build/prebuilt/HOST/arm-eabi-4.4.0],
40165:     android_toolchain=$withval)
40165: 
47826: 
47826: MOZ_ARG_WITH_STRING(android-version,
47826: [  --with-android-version=VER
47826:                           android platform version, default 5],
47826:     android_version=$withval,
47826:     android_version=5)
47826: 
40165: if test "$target" = "arm-android-eabi" ; then
40165:     if test -z "$android_ndk" ; then
40165:         AC_MSG_ERROR([You must specify --with-android-ndk=/path/to/ndk when targeting Android.])
40165:     fi
40165: 
40165:     if test -z "$android_toolchain" ; then
40165:         android_toolchain="$android_ndk"/build/prebuilt/`uname -s | tr "[[:upper:]]" "[[:lower:]]"`-x86/arm-eabi-4.4.0
40165:     fi
40165: 
40165:     if test -z "$android_platform" ; then
47837:        android_platform="$android_ndk"/build/platforms/android-"$android_version"/arch-"$target_cpu"
47826:     fi
40165:     dnl set up compilers
47838:     AS="$android_toolchain"/bin/arm-eabi-as
47838:     CC="$android_toolchain"/bin/arm-eabi-gcc
47838:     CXX="$android_toolchain"/bin/arm-eabi-g++
47838:     CPP="$android_toolchain"/bin/arm-eabi-cpp
47838:     LD="$android_toolchain"/bin/arm-eabi-ld
47838:     AR="$android_toolchain"/bin/arm-eabi-ar
47838:     RANLIB="$android_toolchain"/bin/arm-eabi-ranlib
47838:     STRIP="$android_toolchain"/bin/arm-eabi-strip
40165: 
40165:     CPPFLAGS="-I$android_platform/usr/include $CPPFLAGS"
42805:     CFLAGS="-mandroid -I$android_platform/usr/include -msoft-float -fno-short-enums -fno-exceptions $CFLAGS"
42805:     CXXFLAGS="-mandroid -std=gnu++0x -I$android_platform/usr/include -msoft-float -fno-short-enums -fno-exceptions $CXXFLAGS"
40165:     LDFLAGS="-mandroid -L$android_platform/usr/lib -Wl,-rpath-link=$android_platform/usr/lib --sysroot=$android_platform $LDFLAGS"
40165: 
40165:     dnl prevent cross compile section from using these flags as host flags
40165:     if test -z "$HOST_CPPFLAGS" ; then
40165:         HOST_CPPFLAGS=" "
40165:     fi
40165:     if test -z "$HOST_CFLAGS" ; then
40165:         HOST_CFLAGS=" "
40165:     fi
40165:     if test -z "$HOST_CXXFLAGS" ; then
40165:         HOST_CXXFLAGS=" "
40165:     fi
40165:     if test -z "$HOST_LDFLAGS" ; then
40165:         HOST_LDFLAGS=" "
40165:     fi
40165: 
42520:     # save these for libffi's subconfigure,
42520:     # which doesn't know how to figure this stuff out on its own
42520:     ANDROID_CFLAGS="$CFLAGS"
42520:     ANDROID_CPPFLAGS="$CPPFLAGS"
42520:     ANDROID_LDFLAGS="$LDFLAGS"
42520: 
40165:     AC_DEFINE(ANDROID)
47826:     AC_DEFINE_UNQUOTED(ANDROID_VERSION, $android_version)
40165:     AC_DEFINE(FORCE_LITTLE_ENDIAN)
40165: fi
40165: 
40165: dnl ========================================================
    1: dnl Checks for compilers.
    1: dnl ========================================================
    1: 
37887: dnl AR_FLAGS set here so HOST_AR_FLAGS can be set correctly (see bug 538269)
37887: AR_FLAGS='cr $@'
37887: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
22754: if test "$target" != "$host"; then
    1:     echo "cross compiling from $host to $target"
    1: 
    1:     _SAVE_CC="$CC"
    1:     _SAVE_CFLAGS="$CFLAGS"
    1:     _SAVE_LDFLAGS="$LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([for host c compiler])
    1:     AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
    1:     if test -z "$HOST_CC"; then
    1:         AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CC])
    1:     AC_MSG_CHECKING([for host c++ compiler])
    1:     AC_CHECK_PROGS(HOST_CXX, $HOST_CXX $CCC c++ g++ gcc CC cxx cc++ cl icc, "")
    1:     if test -z "$HOST_CXX"; then
    1:         AC_MSG_ERROR([no acceptable c++ compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CXX])
    1: 
    1:     if test -z "$HOST_CFLAGS"; then
    1:         HOST_CFLAGS="$CFLAGS"
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
    1:         HOST_CXXFLAGS="$CXXFLAGS"
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
    1:         HOST_LDFLAGS="$LDFLAGS"
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
37887:         HOST_AR_FLAGS="$AR_FLAGS"
37887:     fi
    1:     AC_CHECK_PROGS(HOST_RANLIB, $HOST_RANLIB ranlib, ranlib, :)
    1:     AC_CHECK_PROGS(HOST_AR, $HOST_AR ar, ar, :)
    1:     CC="$HOST_CC"
    1:     CFLAGS="$HOST_CFLAGS"
    1:     LDFLAGS="$HOST_LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
    1: 
    1:     CC="$HOST_CXX"
    1:     CFLAGS="$HOST_CXXFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
    1:     
    1:     CC=$_SAVE_CC
    1:     CFLAGS=$_SAVE_CFLAGS
    1:     LDFLAGS=$_SAVE_LDFLAGS
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl The Darwin cross compiler doesn't necessarily point itself at a
    1:         dnl root that has libraries for the proper architecture, it defaults
    1:         dnl to the system root.  The libraries in the system root on current
    1:         dnl versions of PPC OS X 10.4 aren't fat, so these target compiler
    1:         dnl checks will fail.  Fake a working SDK in that case.
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         _SAVE_CXXFLAGS=$CXXLAGS
    1:         CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk $CFLAGS"
    1:         CXXFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk $CXXFLAGS"
    1:         ;;
    1:     esac
    1: 
28509:     case "$target" in
28509:     *symbian*)
28509:         AC_ARG_WITH(symbian-sdk,
28509:         [  --with-symbian-sdk=SYMBIAN_SDK_DIR
28509:                           The path to the Symbian SDK],
28509:         SYMBIAN_SDK_DIR=$withval)
28509: 
28509:         OS_EXE_CFLAGS="$OS_EXE_CFLAGS -D__EXE__"
28509:         CFLAGS="-MD -nostdinc"
28509:         SYMBIAN_SYS_INCLUDE="-I$SYMBIAN_SDK_DIR/Epoc32/include -I$SYMBIAN_SDK_DIR/Epoc32/include/variant -I$SYMBIAN_SDK_DIR/Epoc32/include/stdapis"
28509: 
28509:         case "$target" in
28509:         *-symbianelf)
28509:             OS_TARGET=GCCE
28509:             CC=arm-none-symbianelf-gcc.exe
28509:             CXX=arm-none-symbianelf-g++.exe
28509:             LD=arm-none-symbianelf-ld.exe
28509:             AR=arm-none-symbianelf-ar.exe
28509:             CPP=arm-none-symbianelf-cpp.exe
28509:             CFLAGS="$CFLAGS -c -Wall -Wno-unknown-pragmas -fexceptions -march=armv5t -mapcs -pipe -msoft-float"
28509:             CXXFLAGS="$CFLAGS -Wno-ctor-dtor-privacy"
28509:             GCCE_INCLUDE="-include $SYMBIAN_SDK_DIR/EPOC32/INCLUDE/GCCE/GCCE.h -D__PRODUCT_INCLUDE__=$SYMBIAN_SDK_DIR/Epoc32/include/variant/Symbian_OS_v9.2.hrh"
28509:             CFLAGS="$CFLAGS ${GCCE_INCLUDE} -x c"
28509:             CXXFLAGS="$CXXFLAGS ${GCCE_INCLUDE} -x c++"
28509:             CPPFLAGS="$CPPFLAGS ${SYMBIAN_SYS_INCLUDE}"
28509:             ;;
28509:         *-symbianwinscw)
28509:             dnl TODO: add emulator build code
28509:             OS_TARGET=WINSCW
28509:             ;;
28509:         esac
28509:         ;;
28509:     esac
28509: 
    1:     AC_CHECK_PROGS(CC, $CC "${target_alias}-gcc" "${target}-gcc", :)
    1:     unset ac_cv_prog_CC
    1:     AC_PROG_CC
    1:     AC_CHECK_PROGS(CXX, $CXX "${target_alias}-g++" "${target}-g++", :)
    1:     unset ac_cv_prog_CXX
    1:     AC_PROG_CXX
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl Revert the changes made above.  From this point on, the target
    1:         dnl compiler will never be used without applying the SDK to CFLAGS
    1:         dnl (see --with-macos-sdk below).
    1:         CFLAGS=$_SAVE_CFLAGS
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:         ;;
    1:     esac
    1: 
    1:     AC_CHECK_PROGS(RANLIB, $RANLIB "${target_alias}-ranlib" "${target}-ranlib", :)
    1:     AC_CHECK_PROGS(AR, $AR "${target_alias}-ar" "${target}-ar", :)
25869:     MOZ_PATH_PROGS(AS, $AS "${target_alias}-as" "${target}-as", :)
    1:     AC_CHECK_PROGS(LD, $LD "${target_alias}-ld" "${target}-ld", :)
    1:     AC_CHECK_PROGS(STRIP, $STRIP "${target_alias}-strip" "${target}-strip", :)
    1:     AC_CHECK_PROGS(WINDRES, $WINDRES "${target_alias}-windres" "${target}-windres", :)
    1:     AC_DEFINE(CROSS_COMPILE)
22754: 
22754:     dnl If we cross compile for ppc on Mac OS X x86, cross_compiling will
22754:     dnl have erroneously been set to "no", because the x86 build host is
22756:     dnl able to run ppc code in a translated environment, making a cross
22754:     dnl compiler appear native.  So we override that here.
22754:     cross_compiling=yes
    1: else
    1:     AC_PROG_CC
    1:     AC_PROG_CXX
    1:     AC_PROG_RANLIB
25869:     MOZ_PATH_PROGS(AS, $AS as, $CC)
    1:     AC_CHECK_PROGS(AR, ar, :)
    1:     AC_CHECK_PROGS(LD, ld, :)
    1:     AC_CHECK_PROGS(STRIP, strip, :)
    1:     AC_CHECK_PROGS(WINDRES, windres, :)
    1:     if test -z "$HOST_CC"; then
38023:         HOST_CC='$(CC)'
    1:     fi
    1:     if test -z "$HOST_CFLAGS"; then
38023:         HOST_CFLAGS='$(CFLAGS)'
    1:     fi
    1:     if test -z "$HOST_CXX"; then
38023:         HOST_CXX='$(CXX)'
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
38023:         HOST_CXXFLAGS='$(CXXFLAGS)'
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
38023:         HOST_LDFLAGS='$(LDFLAGS)'
    1:     fi
    1:     if test -z "$HOST_RANLIB"; then
38023:         HOST_RANLIB='$(RANLIB)'
    1:     fi
    1:     if test -z "$HOST_AR"; then
38023:         HOST_AR='$(AR)'
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
38023:         HOST_AR_FLAGS='$(AR_FLAGS)'
37887:     fi
    1: fi
    1: 
    1: GNU_AS=
    1: GNU_LD=
    1: GNU_CC=
    1: GNU_CXX=
    1: CC_VERSION='N/A'
    1: CXX_VERSION='N/A'
    1: if test "$GCC" = "yes"; then
    1:     GNU_CC=1
    1:     CC_VERSION=`$CC -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "$GXX" = "yes"; then
    1:     GNU_CXX=1
    1:     CXX_VERSION=`$CXX -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "`echo | $AS -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_AS=1
    1: fi
    1: if test "`echo | $LD -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_LD=1
    1: fi
    1: if test "$GNU_CC"; then
    1:     if `$CC -print-prog-name=ld` -v 2>&1 | grep -c GNU >/dev/null; then
    1:         GCC_USE_GNU_LD=1
    1:     fi
    1: fi
    1: 
13232: INTEL_CC=
13232: INTEL_CXX=
13232: if test "$GCC" = yes; then
32016:    if test "`$CC -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CC=1
13232:    fi
13232: fi
13232: 
13232: if test "$GXX" = yes; then
13232:    if test "`$CXX -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CXX=1
13232:    fi
13232: fi
13232: 
    1: dnl Special win32 checks
    1: dnl ========================================================
    1: case "$target" in
35551: *-wince|*-winmo)
11967:     WINVER=500
    1:     ;;
    1: *)
    1:     if test -n "$GNU_CC"; then  
    1:         WINVER=501
    1:     else    
    1:         WINVER=500
    1:     fi
    1:     ;;
    1: esac
    1: 
    1: case "$target" in
35551: *-cygwin*|*-mingw*|*-msvc*|*-mks*|*-wince|*-winmo)
    1:     if test "$GCC" != "yes"; then
    1:         # Check to see if we are really running in a msvc environemnt
    1:         _WIN32_MSVC=1
    1: 
    1:         # Make sure compilers are valid
    1:         CFLAGS="$CFLAGS -TC -nologo"
    1:         CXXFLAGS="$CXXFLAGS -TP -nologo"
40437:         # MSVC warning C4345 warns of newly conformant behavior as of VS2003.
48470:         # MSVC warning C4800 is ubiquitous, useless, and annoying.
48470:         CXXFLAGS="$CXXFLAGS -wd4345 -wd4800"
    1:         AC_LANG_SAVE
    1:         AC_LANG_C
    1:         AC_TRY_COMPILE([#include <stdio.h>],
    1:             [ printf("Hello World\n"); ],,
    1:             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
    1: 
    1:         AC_LANG_CPLUSPLUS
    1:         AC_TRY_COMPILE([#include <new.h>],
    1:             [ unsigned *test = new unsigned(42); ],,
    1:             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
    1:         AC_LANG_RESTORE
    1:         
    1:         changequote(,)
12601:         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
    1:         changequote([,])
    1:         
    1:         # Determine compiler version
12601:         CC_VERSION=`"${CC}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CC_MAJOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _CC_MINOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $2 }'`
12601:         _CC_RELEASE=`echo ${CC_VERSION} | $AWK -F\. '{ print $3 }'`
12601:         _CC_BUILD=`echo ${CC_VERSION} | $AWK -F\. '{ print $4 }'`
    1:         _MSC_VER=${_CC_MAJOR_VERSION}${_CC_MINOR_VERSION}
    1: 
12601:         CXX_VERSION=`"${CXX}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CXX_MAJOR_VERSION=`echo ${CXX_VERSION} | $AWK -F\. '{ print $1 }'`
    1: 
    1:         if test "$_CC_MAJOR_VERSION" != "$_CXX_MAJOR_VERSION"; then
    1:             AC_MSG_ERROR([The major versions of \$CC and \$CXX do not match.])
    1:         fi
31240:         if test "$_CC_MAJOR_VERSION" = "13"; then
    1:             _CC_SUITE=7
    1:         elif test "$_CC_MAJOR_VERSION" = "14"; then
    1:             _CC_SUITE=8
49143:             CXXFLAGS="$CXXFLAGS -Zc:wchar_t-"
12601:             dnl -DYNAMICBASE is only supported on VC8SP1 or newer,
12601:             dnl so be very specific here!
12601:             dnl VC8 is 14.00.50727.42, VC8SP1 is 14.00.50727.762
12601:             if test $_CC_RELEASE -gt 50727; then
12601:                _USE_DYNAMICBASE=1
12601:             elif test $_CC_BUILD -ge 762; then
12601:                _USE_DYNAMICBASE=1
12601:             fi
    1:             AC_DEFINE(_CRT_SECURE_NO_DEPRECATE)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_DEPRECATE)
    1:         elif test "$_CC_MAJOR_VERSION" = "15"; then
    1:             _CC_SUITE=9
49143:             CXXFLAGS="$CXXFLAGS -Zc:wchar_t-"
12601:             _USE_DYNAMICBASE=1
    1:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
35725:         elif test "$_CC_MAJOR_VERSION" = "16"; then
35725:             _CC_SUITE=10
49143:             CXXFLAGS="$CXXFLAGS -Zc:wchar_t-"
35725:             _USE_DYNAMICBASE=1
35725:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
35725:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
    1:         else
    1:             AC_MSG_ERROR([This version of the MSVC compiler, $CC_VERSION , is unsupported.])
    1:         fi
    1: 
    1:         _MOZ_RTTI_FLAGS_ON='-GR'
    1:         _MOZ_RTTI_FLAGS_OFF='-GR-'
    1:         _MOZ_EXCEPTIONS_FLAGS_ON='-EHsc'
    1:         _MOZ_EXCEPTIONS_FLAGS_OFF=''
    1: 
    1:         if test -n "$WIN32_REDIST_DIR"; then
    1:             WIN32_REDIST_DIR=`cd "$WIN32_REDIST_DIR" && pwd`
    1:         fi
    1: 	
    1:         # bug #249782
    1:         # ensure that mt.exe is Microsoft (R) Manifest Tool and not magnetic tape manipulation utility (or something else)
    1:         if test "$_CC_SUITE" -ge "8"; then
  735:                 changequote(,)
  735:                 _MSMT_VER_FILTER='s|.* \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*|\1|p'
  735:                 changequote([,])
  735: 
    1:                 MSMT_TOOL=`mt 2>&1|grep 'Microsoft (R) Manifest Tool'`
  735:                 if test -n "$MSMT_TOOL"; then
  735:                         MSMANIFEST_TOOL_VERSION=`echo ${MSMT_TOOL}|sed -ne "$_MSMT_VER_FILTER"`
  735:                         if test -z "$MSMANIFEST_TOOL_VERSION"; then
    1:                                 AC_MSG_WARN([Unknown version of the Microsoft (R) Manifest Tool.])
    1:                         fi
    1:                         MSMANIFEST_TOOL=1
    1:                         unset MSMT_TOOL
    1:                 else
    1:                         AC_MSG_ERROR([Microsoft (R) Manifest Tool must be in your \$PATH.])
    1:                 fi
    1:         fi
    1: 
    1:         # Check linker version
12601:         _LD_FULL_VERSION=`"${LD}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _LD_MAJOR_VERSION=`echo ${_LD_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         if test "$_LD_MAJOR_VERSION" != "$_CC_SUITE"; then
    1:             AC_MSG_ERROR([The linker major version, $_LD_FULL_VERSION,  does not match the compiler suite version, $_CC_SUITE.])
    1:         fi
    1:         INCREMENTAL_LINKER=1
    1: 
    1:         unset _MSVC_VER_FILTER
    1: 
    1:     else
    1:         # Check w32api version
    1:         _W32API_MAJOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _W32API_MINOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $2 }'`
    1:         AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
    1:         AC_TRY_COMPILE([#include <w32api.h>],
    1:             #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
    1:                 (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
    1:                  __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
    1:                 #error "test failed."
    1:             #endif
    1:             , [ res=yes ], [ res=no ])
    1:         AC_MSG_RESULT([$res])
    1:         if test "$res" != "yes"; then
    1:             AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
    1:         fi
    1:         # Check windres version
    1:         AC_MSG_CHECKING([for windres version >= $WINDRES_VERSION])
    1:         _WINDRES_VERSION=`${WINDRES} --version 2>&1 | grep -i windres 2>/dev/null | $AWK '{ print $3 }'`
    1:         AC_MSG_RESULT([$_WINDRES_VERSION])
    1:         _WINDRES_MAJOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _WINDRES_MINOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         _WINDRES_RELEASE_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         WINDRES_MAJOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         WINDRES_MINOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         WINDRES_RELEASE_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         if test "$_WINDRES_MAJOR_VERSION" -lt "$WINDRES_MAJOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -lt "$WINDRES_MINOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -eq "$WINDRES_MINOR_VERSION" -a \
    1:                 "$_WINDRES_RELEASE_VERSION" -lt "$WINDRES_RELEASE_VERSION"
    1:         then
    1:             AC_MSG_ERROR([windres version $WINDRES_VERSION or higher is required to build.])
    1:         fi
    1:     fi # !GNU_CC
    1: 
    1:     AC_DEFINE_UNQUOTED(WINVER,0x$WINVER)
    1:     AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x$WINVER)
  629:     # Require OS features provided by IE 5.0
  629:     AC_DEFINE_UNQUOTED(_WIN32_IE,0x0500)
    1:     ;;
    1: esac
    1: 
    1: dnl Test breaks icc on OS/2 && MSVC
    1: if test "$CC" != "icc" -a -z "$_WIN32_MSVC"; then
    1:     AC_PROG_CC_C_O
    1:     if grep "NO_MINUS_C_MINUS_O 1" ./confdefs.h >/dev/null; then
    1:         USING_HCC=1
    1:         _OLDCC=$CC
    1:         _OLDCXX=$CXX
    1:         CC="${srcdir}/build/hcc '$CC'"
    1:         CXX="${srcdir}/build/hcpp '$CXX'"
    1:     fi
    1: fi
    1: 
    1: AC_PROG_CPP
    1: AC_PROG_CXXCPP
    1: 
14341: if test -n "$_WIN32_MSVC"; then
14341:     SKIP_PATH_CHECKS=1
14341:     SKIP_COMPILER_CHECKS=1
14341:     SKIP_LIBRARY_CHECKS=1
23617: 
23617:     # Since we're skipping compiler and library checks, hard-code
23617:     # some facts here.
23617: 
23834:     # Common to all MSVC environments:
23617:     # Windows lacks <stdint.h>, but has __int8, and so on.
23617:     AC_DEFINE(JS_HAVE___INTN)
41093:     AC_DEFINE(HAVE_LOCALECONV)
23834: 
23834:     case "$target" in
35551:     *-wince|*-winmo)
23834:         AC_DEFINE(HAVE_SYSTEMTIMETOFILETIME)
23834:         AC_DEFINE(JS_CRTDEFS_H_HAS_INTPTR_T)
23834:         ;;
23834:     *)
23834:         AC_DEFINE(HAVE_SYSTEMTIMETOFILETIME)
23834:         AC_DEFINE(HAVE_GETSYSTEMTIMEASFILETIME)
23617:         # Windows <stddef.h> defines intptr_t and uintptr_t.
23617:         # VS2005: http://msdn.microsoft.com/en-us/library/323b6b3k(VS.80).aspx
23617:         # VS2008: http://msdn.microsoft.com/en-us/library/323b6b3k.aspx
23617:         AC_DEFINE(JS_STDDEF_H_HAS_INTPTR_T)
23834:         ;;
23834:     esac
14341: fi
14341: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
21122: if test "$cross_compiling"  = "yes"; then
21122:     CROSS_COMPILE=1
21122: else
21122:     CROSS_COMPILE=
21122: fi
21122: 
39135: # Check to see if we are running in a broken QEMU scratchbox.
39135: # We know that anything below 1.0.16 is broken.
39135: AC_CHECK_PROGS(SBCONF, sb-conf ve, "")
39193: if test -n "$SBCONF"; then
39135:     _sb_version=`$SBCONF ve`
39135:     _sb_version_major=`echo $_sb_version | cut -f1 -d.`
39135:     _sb_version_minor=`echo $_sb_version | cut -f2 -d.`
39135:     _sb_version_point=`echo $_sb_version | cut -f3 -d.`
47975:     if test $_sb_version_major -eq 1 -a $_sb_version_minor -eq 0 -a $_sb_version_point -le 16; then
39135:         QEMU_CANT_RUN_JS_SHELL=1
39135:     fi
39135: fi
39135: AC_SUBST(QEMU_CANT_RUN_JS_SHELL)
39135: 
    1: AC_SUBST(_MSC_VER)
    1: 
    1: AC_SUBST(GNU_AS)
    1: AC_SUBST(GNU_LD)
    1: AC_SUBST(GNU_CC)
    1: AC_SUBST(GNU_CXX)
13232: AC_SUBST(INTEL_CC)
13232: AC_SUBST(INTEL_CXX)
    1: 
    1: dnl ========================================================
    1: dnl Checks for programs.
    1: dnl ========================================================
    1: AC_PROG_INSTALL
    1: AC_PROG_LN_S
25869: MOZ_PATH_PROGS(PERL, $PERL perl5 perl )
47975: if test -z "$PERL" -o "$PERL" = ":"; then
    1:     AC_MSG_ERROR([perl not found in \$PATH])
    1: fi
    1: 
    1: if test -z "$TINDERBOX_SKIP_PERL_VERSION_CHECK"; then
    1: AC_MSG_CHECKING([for minimum required perl version >= $PERL_VERSION])
    1: _perl_version=`PERL_VERSION=$PERL_VERSION $PERL -e 'print "$]"; if ($] >= $ENV{PERL_VERSION}) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: AC_MSG_RESULT([$_perl_version])
    1: 
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_ERROR([Perl $PERL_VERSION or higher is required.])
    1: fi
    1: fi
    1: 
    1: AC_MSG_CHECKING([for full perl installation])
    1: _perl_archlib=`$PERL -e 'use Config; if ( -d $Config{archlib} ) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_RESULT([no])
    1:     AC_MSG_ERROR([Cannot find Config.pm or \$Config{archlib}.  A full perl installation is required.])
    1: else
    1:     AC_MSG_RESULT([yes])    
    1: fi
    1: 
25869: MOZ_PATH_PROGS(PYTHON, $PYTHON python)
    1: if test -z "$PYTHON"; then
    1:     AC_MSG_ERROR([python was not found in \$PATH])
    1: fi
    1: 
 3564: if test -z "$COMPILE_ENVIRONMENT"; then
 3564:     NSINSTALL_BIN='$(PYTHON) $(topsrcdir)/config/nsinstall.py'
 3564: fi
 3564: AC_SUBST(NSINSTALL_BIN)
 3564: 
25869: MOZ_PATH_PROG(DOXYGEN, doxygen, :)
25869: MOZ_PATH_PROG(AUTOCONF, autoconf, :)
25869: MOZ_PATH_PROG(UNZIP, unzip, :)
25869: MOZ_PATH_PROGS(ZIP, zip)
47975: if test -z "$ZIP" -o "$ZIP" = ":"; then
    1:     AC_MSG_ERROR([zip not found in \$PATH])
    1: fi
25869: MOZ_PATH_PROG(SYSTEM_MAKEDEPEND, makedepend)
25869: MOZ_PATH_PROG(XARGS, xargs)
47975: if test -z "$XARGS" -o "$XARGS" = ":"; then
    1:     AC_MSG_ERROR([xargs not found in \$PATH .])
    1: fi
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: dnl ========================================================
    1: dnl = Mac OS X toolchain support
    1: dnl ========================================================
    1: 
    1: case "$target_os" in
    1: darwin*)
    1:     dnl Current known valid versions for GCC_VERSION are 2.95.2 3.1 3.3 4.0.
    1:     dnl 4.0 identifies itself as 4.0.x, so strip the decidecimal for
    1:     dnl the environment and includedir purposes (when using an SDK, below),
    1:     dnl but remember the full version number for the libdir (SDK).
    1:     changequote(,)
    1:     GCC_VERSION_FULL=`echo $CXX_VERSION | $PERL -pe 's/^.*gcc version ([^ ]*).*/$1/'`
    1:     GCC_VERSION=`echo $GCC_VERSION_FULL | $PERL -pe '(split(/\./))[0]>=4&&s/(^\d*\.\d*).*/$1/;'`
    1:     changequote([,])
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:         dnl Bug 280479, but this keeps popping up in bug 292530 too because
    1:         dnl 4.0.0/4061 is the default compiler in Tiger.
    1:         changequote(,)
    1:         GCC_BUILD=`echo $CXX_VERSION | $PERL -pe 's/^.*build ([^ )]*).*/$1/'`
    1:         changequote([,])
    1:         if test "$GCC_BUILD" = "4061" ; then
    1:             AC_MSG_ERROR([You are attempting to use Apple gcc 4.0 build 4061.
    1: This compiler was supplied with Xcode 2.0, and contains bugs that prevent it
 3572: from building Mozilla. Upgrade to Xcode 2.1 or later.])
    1:         fi
    1:     fi
    1: 
    1:     dnl xcodebuild needs GCC_VERSION defined in the environment, since it
    1:     dnl doesn't respect the CC/CXX setting.  With GCC_VERSION set, it will use
    1:     dnl /usr/bin/g(cc|++)-$GCC_VERSION.
25869:     MOZ_PATH_PROGS(PBBUILD, pbbuild xcodebuild pbxbuild)
    1: 
    1:     case "$PBBUILD" in
    1:       *xcodebuild*)
    1:         changequote(,)
13032:         XCODEBUILD_VERSION=`$PBBUILD -version 2>/dev/null | xargs | sed -e 's/.*DevToolsCore-\([0-9]*\).*/\1/'`
    1:         changequote([,])
47975:         if test -n "$XCODEBUILD_VERSION" -a "$XCODEBUILD_VERSION" -ge 620 ; then
    1:           HAS_XCODE_2_1=1;
    1:         fi
    1:       ;;
    1:     esac
    1: 
    1:     dnl sdp was formerly in /Developer/Tools.  As of Mac OS X 10.4 (Darwin 8),
    1:     dnl it has moved into /usr/bin.
25869:     MOZ_PATH_PROG(SDP, sdp, :, [$PATH:/usr/bin:/Developer/Tools])
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(GCC_VERSION)
    1: AC_SUBST(XCODEBUILD_VERSION)
    1: AC_SUBST(HAS_XCODE_2_1)
    1: 
    1: dnl The universal machinery sets UNIVERSAL_BINARY to inform packager.mk
    1: dnl that a universal binary is being produced.
    1: AC_SUBST(UNIVERSAL_BINARY)
    1: 
    1: dnl ========================================================
 8484: dnl Check for MacOS deployment target version
 8484: dnl ========================================================
 8484: 
 8484: MOZ_ARG_ENABLE_STRING(macos-target,
 8484:                       [  --enable-macos-target=VER (default=10.4)
 8484:                           Set the minimum MacOS version needed at runtime],
 8484:                       [_MACOSX_DEPLOYMENT_TARGET=$enableval])
 8484: 
 8484: case "$target" in
 8484: *-darwin*)
 8484:     if test -n "$_MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl Use the specified value
 8484:         export MACOSX_DEPLOYMENT_TARGET=$_MACOSX_DEPLOYMENT_TARGET
13232:         AC_DEFINE_UNQUOTED(__ENVIRONMENT_MAC_OS_X_VERION_MIN_REQUIRED__,$_MACOSX_DEPLOYMENT_TARGET)
 8484:     elif test -z "$MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl No value specified on the command line or in the environment,
 8484:         dnl use the lesser of the application's minimum or the architecture's
 8484:         dnl minimum.
 8484:         export MACOSX_DEPLOYMENT_TARGET=10.4
 8484:     fi
 8484:     ;;
 8484: esac
 8484: 
 8484: AC_SUBST(MACOSX_DEPLOYMENT_TARGET)
 8484: 
 8484: dnl ========================================================
    1: dnl = Mac OS X SDK support
    1: dnl ========================================================
    1: MACOS_SDK_DIR=
    1: NEXT_ROOT=
    1: MOZ_ARG_WITH_STRING(macos-sdk,
    1: [  --with-macos-sdk=dir    Location of platform SDK to use (Mac OS X only)],
    1:     MACOS_SDK_DIR=$withval)
    1: 
    1: dnl MACOS_SDK_DIR will be set to the SDK location whenever one is in use.
    1: dnl NEXT_ROOT will be set and exported only if it's needed.
    1: AC_SUBST(MACOS_SDK_DIR)
    1: AC_SUBST(NEXT_ROOT)
    1: 
    1: if test "$MACOS_SDK_DIR"; then
    1:   dnl Sync this section with the ones in NSPR and NSS.
    1:   dnl Changes to the cross environment here need to be accounted for in
    1:   dnl the libIDL checks (below) and xpidl build.
    1: 
    1:   if test ! -d "$MACOS_SDK_DIR"; then
    1:     AC_MSG_ERROR([SDK not found.  When using --with-macos-sdk, you must
    1: specify a valid SDK.  SDKs are installed when the optional cross-development
    1: tools are selected during the Xcode/Developer Tools installation.])
    1:   fi
    1: 
    1:   GCC_VERSION_MAJOR=`echo $GCC_VERSION_FULL | $PERL -pe 's/(^\d*).*/$1/;'`
    1:   if test "$GCC_VERSION_MAJOR" -lt "4" ; then
31305:     AC_MSG_ERROR([You need to upgrade the compiler version to 4.x])
    1:   else
    1:     CFLAGS="$CFLAGS -isysroot ${MACOS_SDK_DIR}"
    1:     CXXFLAGS="$CXXFLAGS -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     dnl CPP/CXXCPP needs to be set for AC_CHECK_HEADER.
    1:     CPP="$CPP -isysroot ${MACOS_SDK_DIR}"
    1:     CXXCPP="$CXXCPP -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:       dnl If gcc >= 4.0, we're guaranteed to be on Tiger, which has an ld
    1:       dnl that supports -syslibroot.  Don't set NEXT_ROOT because it will
    1:       dnl be ignored and cause warnings when -syslibroot is specified.
    1:       dnl gcc 4.0.1 will pass -syslibroot to ld automatically based on
    1:       dnl the -isysroot it receives, so this is only needed with 4.0.0.
    1:       LDFLAGS="$LDFLAGS -Wl,-syslibroot,${MACOS_SDK_DIR}"
    1:     fi
    1:   fi
    1: 
    1:   AC_LANG_SAVE
    1:   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([#include <new>
    1:                  int main() { return 0; }],
    1:    result=yes,
    1:    result=no)
    1:   AC_LANG_RESTORE
    1:   AC_MSG_RESULT($result)
    1: 
    1:   if test "$result" = "no" ; then
    1:     AC_MSG_ERROR([The selected compiler and Mac OS X SDK are incompatible.])
    1:   fi
    1: fi
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
34234: if test -z "$MAKE"; then
    1:     case "$host_os" in
    1:     cygwin*|mingw*|mks*|msvc*)
25869:         MOZ_PATH_PROGS(MAKE, $MAKE make gmake, :)
    1:         ;;
    1:     *)
25869:         MOZ_PATH_PROGS(MAKE, $MAKE gmake make, :)
    1:         ;;
    1:     esac
34234: fi
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: AC_PATH_XTRA
    1: 
    1: XCFLAGS="$X_CFLAGS"
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl set the defaults first
    1: dnl ========================================================
    1: AS_BIN=$AS
    1: AR_LIST='$(AR) t'
    1: AR_EXTRACT='$(AR) x'
    1: AR_DELETE='$(AR) d'
    1: AS='$(CC)'
    1: AS_DASH_C_FLAG='-c'
    1: DLL_PREFIX=lib
    1: LIB_PREFIX=lib
    1: DLL_SUFFIX=.so
    1: OBJ_SUFFIX=o
    1: LIB_SUFFIX=a
    1: ASM_SUFFIX=s
    1: IMPORT_LIB_SUFFIX=
    1: TARGET_MD_ARCH=unix
    1: DIRENT_INO=d_ino
    1: CYGWIN_WRAPPER=
    1: WIN_TOP_SRC=
    1: MOZ_USER_DIR=".mozilla"
    1: 
21062: MOZ_JS_LIBS='-L$(libdir) -lmozjs'
16526: MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(PREFIX)/lib'
    1: 
    1: MOZ_COMPONENT_NSPR_LIBS='-L$(LIBXUL_DIST)/bin $(NSPR_LIBS)'
    1: 
    1: USE_DEPENDENT_LIBS=1
    1: 
    1: _PLATFORM_DEFAULT_TOOLKIT=cairo-gtk2
    1: 
42805: MOZ_THUMB2=
42805: 
    1: if test -n "$CROSS_COMPILE"; then
    1:     OS_TARGET="${target_os}"
    1:     OS_ARCH=`echo $target_os | sed -e 's|/|_|g'`
    1:     OS_RELEASE=
    1:     case "${target_os}" in
 1785:         linux*)       OS_ARCH=Linux OS_TARGET=Linux ;;
12932:         kfreebsd*-gnu) OS_ARCH=GNU_kFreeBSD OS_TARGET=GNU_kFreeBSD ;;
41013:         gnu*)         OS_ARCH=GNU ;;
    1:         solaris*)     OS_ARCH=SunOS OS_RELEASE=5 ;;
    1:         mingw*)       OS_ARCH=WINNT ;;
    1:         wince*)       OS_ARCH=WINCE ;;
35551:         winmo*)       OS_ARCH=WINCE ;;
    1:         darwin*)      OS_ARCH=Darwin OS_TARGET=Darwin ;;
    1:     esac
    1: else
    1:     OS_TARGET=`uname -s`
    1:     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
    1:     OS_RELEASE=`uname -r`
 3488: fi
 3488: 
 3488: # Before this used `uname -m` when not cross compiling
 3488: # but that breaks when you have a 64 bit kernel with a 32 bit userland.
 3488: OS_TEST="${target_cpu}"
 3488: 
    1: _COMPILER_PREFIX=
    1: 
    1: HOST_OS_ARCH=`echo $host_os | sed -e 's|/|_|g'`
    1: 
    1: #######################################################################
    1: # Master "Core Components" macros for getting the OS target           #
    1: #######################################################################
    1: 
    1: #
    1: # If OS_TARGET is not specified, it defaults to $(OS_ARCH), i.e., no
    1: # cross-compilation.
    1: #
    1: 
    1: #
    1: # Define and override various archtecture-specific variables, including
    1: # HOST_OS_ARCH
    1: # OS_ARCH
    1: # OS_TEST
    1: # OS_TARGET
    1: # OS_RELEASE
    1: # OS_MINOR_RELEASE
    1: #
    1: 
    1: case "$HOST_OS_ARCH" in
    1: cygwin*|mingw*|mks*|msvc*)
    1:     HOST_OS_ARCH=WINNT
    1:     ;;
    1: linux*)
    1:     HOST_OS_ARCH=Linux
    1:     ;;
    1: solaris*)
    1:     HOST_OS_ARCH=SunOS
24783:     SOLARIS_SUNPRO_CC=
24783:     SOLARIS_SUNPRO_CXX=
24783:     if test -z "$GNU_CC"; then
27517:         if test "`$CC -V 2>&1 | egrep -c 'Sun.*C '`" != "0"; then
24783:             SOLARIS_SUNPRO_CC=1
24783:        fi
24783:     fi
24783: 
24783:     if test -z "$GNU_CXX"; then
27517:        if test "`$CXX -V 2>&1 | egrep -c 'Sun.*C\+\+ '`" != "0"; then
24783:            SOLARIS_SUNPRO_CXX=1
24783:        fi
24783:     fi
24783:     AC_SUBST(SOLARIS_SUNPRO_CC)
24783:     AC_SUBST(SOLARIS_SUNPRO_CXX)
    1:     ;;
    1: BSD_386)
    1:     HOST_OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     HOST_OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     HOST_OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         HOST_OS_ARCH=NCR
    1:     else
    1:         HOST_OS_ARCH=UNIXWARE
    1:     fi
    1:     ;;
    1: ncr)
    1:     HOST_OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     HOST_OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     ;;
    1: *OpenVMS*)
    1:     HOST_OS_ARCH=OpenVMS
    1:     ;;
    1: OS_2)
    1:     HOST_OS_ARCH=OS2
    1:     ;;
    1: QNX)
    1:     ;;
    1: SCO_SV)
    1:     HOST_OS_ARCH=SCOOS
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     HOST_OS_ARCH=SINIX
    1:     ;;
    1: UnixWare)
    1:     HOST_OS_ARCH=UNIXWARE
    1:     ;;
    1: esac
    1: 
    1: case "$OS_ARCH" in
    1: WINNT)
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: Windows_NT)
    1: #
    1: # If uname -s returns "Windows_NT", we assume that we are using
    1: # the uname.exe in MKS toolkit.
    1: #
    1: # The -r option of MKS uname only returns the major version number.
    1: # So we need to use its -v option to get the minor version number.
    1: # Moreover, it doesn't have the -p option, so we need to use uname -m.
    1: #
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     OS_MINOR_RELEASE=`uname -v`
    1:     if test "$OS_MINOR_RELEASE" = "00"; then
    1:         OS_MINOR_RELEASE=0
    1:     fi
    1:     OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    1:     ;;
    1: CYGWIN32_NT|CYGWIN_NT*|MINGW*_NT*)
    1: #
    1: # If uname -s returns "CYGWIN_NT-4.0", we assume that we are using
    1: # the uname.exe in the Cygwin tools.
    1: # Prior to the Beta 20 release, Cygwin was called GNU-Win32.
    1: # If uname -s returns "CYGWIN32/NT", we assume that we are using
    1: # the uname.exe in the GNU-Win32 tools.
    1: # If uname -s returns MINGW32_NT-5.1, we assume that we are using
    1: # the uname.exe in the MSYS tools.
    1: #
    1:     OS_RELEASE=`expr $OS_ARCH : '.*NT-\(.*\)'`
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     ;;
    1: AIX)
    1:     OS_RELEASE=`uname -v`.`uname -r`
20692:     OS_TEST=${target_cpu}
    1:     ;;
    1: BSD_386)
    1:     OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         OS_ARCH=NCR
    1:     else
    1:         OS_ARCH=UNIXWARE
    1:         OS_RELEASE=`uname -v`
    1:     fi
    1:     ;;
    1: ncr)
    1:     OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     case `uname -v` in
    1:     148)
    1:         OS_RELEASE=V3.2C
    1:         ;;
    1:     564)
    1:         OS_RELEASE=V4.0B
    1:         ;;
    1:     878)
    1:         OS_RELEASE=V4.0D
    1:         ;;
    1:     esac
    1:     ;;
    1: *OpenVMS*)
    1:     OS_ARCH=OpenVMS
    1:     OS_RELEASE=`uname -v`
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: OS_2)
    1:     OS_ARCH=OS2
    1:     OS_TARGET=OS2
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: QNX)
    1:     if test "$OS_TARGET" != "NTO"; then
    1:         changequote(,)
    1:         OS_RELEASE=`uname -v | sed 's/^\([0-9]\)\([0-9]*\)$/\1.\2/'`
    1:         changequote([,])
    1:     fi
    1:     OS_TEST=x86
    1:     ;;
    1: SCO_SV)
    1:     OS_ARCH=SCOOS
    1:     OS_RELEASE=5.0
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     OS_ARCH=SINIX
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: UnixWare)
    1:     OS_ARCH=UNIXWARE
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: WINCE)
21122:     WINCE=1
    1:     OS_ARCH=WINCE
35551:     if test "$WINCE_WINDOWS_MOBILE"; then
35551:         OS_TARGET=WINMO
35551:     else
    1:         OS_TARGET=WINCE
35551:     fi
    1:     ;;
    1: Darwin)
    1:     case "${target_cpu}" in
    1:     powerpc*)
    1:         OS_TEST=ppc
    1:         ;;
    1:     i*86*)
    1:         OS_TEST=i386 
    1:         ;;
22679:     x86_64)
22679:         OS_TEST=x86_64
22679:         ;;
    1:     *)
    1:         if test -z "$CROSS_COMPILE" ; then
    1:             OS_TEST=`uname -p`
    1:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: esac
    1: 
    1: if test "$OS_ARCH" = "NCR"; then
    1:     changequote(,)
    1:     OS_RELEASE=`awk '{print $3}' /etc/.relid | sed 's/^\([0-9]\)\(.\)\(..\)\(.*\)$/\2.\3/'`
    1:     changequote([,])
    1: fi
    1: 
    1: # Only set CPU_ARCH if we recognize the value of OS_TEST
    1: 
    1: case "$OS_TEST" in
    1: *86 | i86pc)
    1:     CPU_ARCH=x86
    1:     ;;
    1: 
20692: powerpc* | ppc | rs6000)
    1:     CPU_ARCH=ppc
    1:     ;;
    1: 
    1: Alpha | alpha | ALPHA)
    1:     CPU_ARCH=Alpha
    1:     ;;
    1: 
15835: hppa* | parisc)
15835:     CPU_ARCH=hppa
15835:     ;;
15835: 
13790: sun4u | sparc*)
    1:     CPU_ARCH=sparc
    1:     ;;
    1: 
13790: x86_64 | ia64)
    1:     CPU_ARCH="$OS_TEST"
    1:     ;;
31004: 
47320: arm*)
40165:     CPU_ARCH=arm
31004:     ;;
    1: esac
    1: 
    1: if test -z "$OS_TARGET"; then
    1:     OS_TARGET=$OS_ARCH
    1: fi
    1: OS_CONFIG="${OS_TARGET}${OS_RELEASE}"
    1: 
    1: dnl ========================================================
    1: dnl GNU specific defaults
    1: dnl ========================================================
    1: if test "$GNU_CC"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CFLAGS="$CFLAGS -fno-strict-aliasing"
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GCC_USE_GNU_LD"; then
    1:         # Don't allow undefined symbols in libraries
    1:         DSO_LDOPTS="$DSO_LDOPTS -Wl,-z,defs"
    1:     fi
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
20657:     ASFLAGS="$ASFLAGS -fPIC"
    1:     _MOZ_RTTI_FLAGS_ON=${_COMPILER_PREFIX}-frtti
    1:     _MOZ_RTTI_FLAGS_OFF=${_COMPILER_PREFIX}-fno-rtti
47213:     _MOZ_EXCEPTIONS_FLAGS_ON='-fexceptions'
47213:     _MOZ_EXCEPTIONS_FLAGS_OFF='-fno-exceptions'
    1: 
    1:     # Turn on GNU specific features
    1:     # -Wall - turn on all warnings
    1:     # -pedantic - make compiler warn about non-ANSI stuff, and
    1:     #             be a little bit stricter
    1:     # Warnings slamm took out for now (these were giving more noise than help):
    1:     # -Wbad-function-cast - warns when casting a function to a new return type
    1:     # -Wshadow - removed because it generates more noise than help --pete
10033:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wall -W -Wno-unused -Wpointer-arith"
15835:     if test -z "$INTEL_CC"; then
15835:        # Don't use -Wcast-align with ICC
15835:        case "$CPU_ARCH" in
40165:            # And don't use it on hppa, ia64, sparc, or arm since it's noisy there
40165:            hppa | ia64 | sparc | arm)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
    1:     dnl Turn pedantic on but disable the warnings for long long
    1:     _PEDANTIC=1
13232: 
13232:     if test -z "$INTEL_CC"; then
13232:       _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -W"
42455:     fi
    1: 
30837:     _DEFINES_CFLAGS='-include $(DEPTH)/js-confdefs.h -DMOZILLA_CLIENT'
    1:     _USE_CPP_INCLUDE_FLAG=1
24783: elif test "$SOLARIS_SUNPRO_CC"; then
24783:     DSO_CFLAGS=''
24783:     if test "$CPU_ARCH" = "sparc"; then
24783:         # for Sun Studio on Solaris/SPARC
24783:         DSO_PIC_CFLAGS='-xcode=pic32'
24783:     else
24783:         DSO_PIC_CFLAGS='-KPIC'
24783:     fi
30837:     _DEFINES_CFLAGS='$(ACDEFINES) -D_JS_CONFDEFS_H_ -DMOZILLA_CLIENT'
    1: else
    1:     MKSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1:     MKCSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1: 
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GNU_LD"; then
    1:         # Don't allow undefined symbols in libraries
    1:         DSO_LDOPTS="$DSO_LDOPTS -z defs"
    1:     fi
    1: 
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-KPIC'
30837:     _DEFINES_CFLAGS='$(ACDEFINES) -D_JS_CONFDEFS_H_ -DMOZILLA_CLIENT'
    1: fi
    1: 
    1: if test "$GNU_CXX"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"
    1:     # Turn on GNU specific features
16670:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wall -Wpointer-arith -Woverloaded-virtual -Wsynth -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
15835:     if test -z "$INTEL_CC"; then
15835:        # Don't use -Wcast-align with ICC
15835:        case "$CPU_ARCH" in
40165:            # And don't use it on hppa, ia64, sparc, or arm since it's noisy there
40165:            hppa | ia64 | sparc | arm)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
30837:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/js-confdefs.h'
    1:     _USE_CPP_INCLUDE_FLAG=1
18452: 
18452:     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
18452:                    ac_has_wno_invalid_offsetof,
18452:         [
18452:             AC_LANG_SAVE
18506:             AC_LANG_CPLUSPLUS
18452:             _SAVE_CXXFLAGS="$CXXFLAGS"
18452:             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:             AC_TRY_COMPILE([],
18452:                            [return(0);],
18452:                            ac_has_wno_invalid_offsetof="yes",
18452:                            ac_has_wno_invalid_offsetof="no")
18452:             CXXFLAGS="$_SAVE_CXXFLAGS"
18452:             AC_LANG_RESTORE
18452:         ])
18452:     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
18452:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:     fi
24826: 
24826:     AC_CACHE_CHECK(whether the compiler supports -Wno-variadic-macros,
24826:                    ac_has_wno_variadic_macros,
24826:         [
24826:             AC_LANG_SAVE
24826:             AC_LANG_CPLUSPLUS
24826:             _SAVE_CXXFLAGS="$CXXFLAGS"
24826:             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-variadic-macros"
24826:             AC_TRY_COMPILE([],
24826:                            [return(0);],
24826:                            ac_has_wno_variadic_macros="yes",
24826:                            ac_has_wno_variadic_macros="no")
24826:             CXXFLAGS="$_SAVE_CXXFLAGS"
24826:             AC_LANG_RESTORE
24826:         ])
24826:     if test "$ac_has_wno_variadic_macros" = "yes"; then
24826:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-variadic-macros"
24826:     fi
    1: else
30837:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -D_JS_CONFDEFS_H_ $(ACDEFINES)'
    1: fi
    1: 
    1: dnl gcc can come with its own linker so it is better to use the pass-thru calls
    1: dnl MKSHLIB_FORCE_ALL is used to force the linker to include all object
    1: dnl files present in an archive. MKSHLIB_UNFORCE_ALL reverts the linker to
    1: dnl normal behavior.
    1: dnl ========================================================
    1: MKSHLIB_FORCE_ALL=
    1: MKSHLIB_UNFORCE_ALL=
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$GNU_CC"; then
    1:   AC_MSG_CHECKING(whether ld has archive extraction flags)
    1:   AC_CACHE_VAL(ac_cv_mkshlib_force_and_unforce,
    1:    [_SAVE_LDFLAGS=$LDFLAGS; _SAVE_LIBS=$LIBS
    1:     ac_cv_mkshlib_force_and_unforce="no"
    1:     exec 3<&0 <<LOOP_INPUT
    1: 	force="-Wl,--whole-archive";   unforce="-Wl,--no-whole-archive"
    1: 	force="-Wl,-z -Wl,allextract"; unforce="-Wl,-z -Wl,defaultextract"
    1: 	force="-Wl,-all";              unforce="-Wl,-none"
    1: LOOP_INPUT
    1:     while read line
    1:     do
    1:       eval $line
    1:       LDFLAGS=$force
    1:       LIBS=$unforce
    1:       AC_TRY_LINK(,, ac_cv_mkshlib_force_and_unforce=$line; break)
    1:     done
    1:     exec 0<&3 3<&-
    1:     LDFLAGS=$_SAVE_LDFLAGS; LIBS=$_SAVE_LIBS
    1:    ])
    1:   if test "$ac_cv_mkshlib_force_and_unforce" = "no"; then
    1:     AC_MSG_RESULT(no)
    1:   else
    1:     AC_MSG_RESULT(yes)
    1:     eval $ac_cv_mkshlib_force_and_unforce
    1:     MKSHLIB_FORCE_ALL=$force
    1:     MKSHLIB_UNFORCE_ALL=$unforce
    1:   fi
    1: fi # GNU_CC
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl =================================================================
    1: dnl Set up and test static assertion macros used to avoid AC_TRY_RUN,
    1: dnl which is bad when cross compiling.
    1: dnl =================================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: configure_static_assert_macros='
    1: #define CONFIGURE_STATIC_ASSERT(condition) CONFIGURE_STATIC_ASSERT_IMPL(condition, __LINE__)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL(condition, line) CONFIGURE_STATIC_ASSERT_IMPL2(condition, line)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL2(condition, line) typedef int static_assert_line_##line[(condition) ? 1 : -1]
    1: '
    1: 
    1: dnl test that the macros actually work:
    1: AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
    1: AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
    1:  [AC_LANG_SAVE
    1:   AC_LANG_C
    1:   ac_cv_static_assertion_macros_work="yes"
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_RESTORE
    1:  ])
    1: AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
    1: if test "$ac_cv_static_assertion_macros_work" = "no"; then
    1:     AC_MSG_ERROR([Compiler cannot compile macros used in autoconf tests.])
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl Checking for 64-bit OS
    1: dnl ========================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: AC_LANG_SAVE
    1: AC_LANG_C
    1: AC_MSG_CHECKING(for 64-bit OS)
    1: AC_TRY_COMPILE([$configure_static_assert_macros],
33494:                [CONFIGURE_STATIC_ASSERT(sizeof(void*) == 8)],
    1:                result="yes", result="no")
    1: AC_MSG_RESULT("$result")
    1: if test "$result" = "yes"; then
    1:     AC_DEFINE(HAVE_64BIT_OS)
    1:     HAVE_64BIT_OS=1
    1: fi
    1: AC_SUBST(HAVE_64BIT_OS)
    1: AC_LANG_RESTORE
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
14801: dnl Enable high-memory support on OS/2 by default.
14801: dnl ========================================================
14801: MOZ_OS2_HIGH_MEMORY=1
14801: MOZ_ARG_DISABLE_BOOL(os2-high-mem,
14801: [  --disable-os2-high-mem  Disable high-memory support on OS/2],
14801:     MOZ_OS2_HIGH_MEMORY=,
14801:     MOZ_OS2_HIGH_MEMORY=1 )
    1: AC_SUBST(MOZ_OS2_HIGH_MEMORY)
    1: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for host
    1: dnl ========================================================
    1: case "$host" in
    1: *-beos*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_BEOS -DBeOS -DBEOS -D_POSIX_SOURCE -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_beos.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
35551: *cygwin*|*mingw*|*mks*|*msvc*|*wince|*winmo)
    1:     if test -n "$_WIN32_MSVC"; then
    1:         HOST_AR=lib
    1:         HOST_AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:         HOST_CFLAGS="$HOST_CFLAGS -TC -nologo -Fd\$(HOST_PDBFILE)"
    1:         HOST_RANLIB='echo ranlib'
    1:     else
    1:         HOST_CFLAGS="$HOST_CFLAGS -mno-cygwin"
    1:     fi
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN32 -DXP_WIN -DWIN32 -D_WIN32 -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_winnt.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     case "$host" in
    1:     *mingw*)
    1:     dnl MinGW/MSYS does not need CYGWIN_WRAPPER
    1:         ;;
    1:     *)
    1:         CYGWIN_WRAPPER="${srcdir}/build/cygwin-wrapper"
    1:         if test "`echo ${srcdir} | grep -c ^/ 2>/dev/null`" = 0; then
    1:             _pwd=`pwd`
    1:             CYGWIN_WRAPPER="${_pwd}/${srcdir}/build/cygwin-wrapper"
    1:         fi
    1:         if test "`${PERL} -v | grep -c cygwin  2>/dev/null`" = 0; then
    1:             AS_PERL=1
    1:             PERL="${CYGWIN_WRAPPER} $PERL"
    1:         fi
  472: 
  472:         if test "`${PYTHON} -c 'import sys; print sys.platform;'`" != "cygwin"; then
  472:             PYTHON="${CYGWIN_WRAPPER} $PYTHON"
  472:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
38009:     LDFLAGS="$LDFLAGS -lobjc"
38009:     LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
    1:     ;;
    1: 
41013: *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
    1: *os2*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_OS2 -DNO_X11 -Zomf"
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     MOZ_FIX_LINK_PATHS=
    1:     ;;
    1: 
    1: *-osf*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_osf1.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: 
    1: *)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: esac
    1: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for target
    1: dnl ========================================================
    1: 
    1: case "$target" in
    1: *-aix*)
    1:     AC_DEFINE(AIX)
    1:     if test ! "$GNU_CC"; then
    1:         if test ! "$HAVE_64BIT_OS"; then
    1:             # Compiling with Visual Age C++ object model compat is the
    1:             # default. To compile with object model ibm, add 
    1:             # AIX_OBJMODEL=ibm to .mozconfig.
    1:             if test "$AIX_OBJMODEL" = "ibm"; then
    1:                 CXXFLAGS="$CXXFLAGS -qobjmodel=ibm"
    1:             else
    1:                 AIX_OBJMODEL=compat
    1:             fi
    1:         else
    1:             AIX_OBJMODEL=compat
    1:         fi
    1:         AC_SUBST(AIX_OBJMODEL)
    1:         DSO_LDOPTS='-qmkshrobj=1'
    1:         DSO_CFLAGS='-qflag=w:w'
    1:         DSO_PIC_CFLAGS=
    1:         LDFLAGS="$LDFLAGS -Wl,-brtl -blibpath:/usr/lib:/lib"
    1:         AC_MSG_WARN([Clearing MOZ_FIX_LINK_PATHS till we can fix bug 332075.])
    1:         MOZ_FIX_LINK_PATHS=
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         if test "$COMPILE_ENVIRONMENT"; then
    1:             AC_LANG_SAVE
    1:             AC_LANG_CPLUSPLUS
20692:             AC_MSG_CHECKING([for VisualAge C++ compiler version >= 6.0.0.3])
    1:             AC_TRY_COMPILE([],
20692:                 [#if (__IBMCPP__ < 600)
    1:                  #error "Bad compiler"
    1:                  #endif],
    1:                 _BAD_COMPILER=,_BAD_COMPILER=1)
    1:             if test -n "$_BAD_COMPILER"; then
    1:                 AC_MSG_RESULT([no])    
20692:                 AC_MSG_ERROR([VisualAge C++ version 6.0.0.3 or higher is required to build.])
    1:             else
    1:                 AC_MSG_RESULT([yes])    
    1:             fi
    1:             AC_LANG_RESTORE
    1:             TARGET_COMPILER_ABI="ibmc"
    1:             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
    1:             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
    1:         fi
    1:     fi
    1:     case "${target_os}" in
    1:     aix4.1*)
    1:         DLL_SUFFIX='_shr.a'
    1:         ;;
    1:     esac
    1:     if test "$COMPILE_ENVIRONMENT"; then
    1:         AC_CHECK_HEADERS(sys/inttypes.h)
    1:     fi
39034:     AC_DEFINE(JS_SYS_TYPES_H_DEFINES_EXACT_SIZE_TYPES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-beos*)
    1:     no_x=yes
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     _PLATFORM_DEFAULT_TOOLKIT="cairo-beos"
    1:     DSO_LDOPTS='-nostart'
    1:     TK_LIBS='-lbe -lroot'
    1:     LIBS="$LIBS -lbe"
    1:     if test "$COMPILE_ENVIRONMENT"; then
    1:         AC_CHECK_LIB(bind,main,LIBS="$LIBS -lbind")
    1:         AC_CHECK_LIB(zeta,main,LIBS="$LIBS -lzeta")
    1:     fi
    1:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wno-multichar"
    1:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wno-multichar"
    1:     _MOZ_USE_RTTI=1
    1:     USE_DEPENDENT_LIBS=
    1:     MOZ_USER_DIR="Mozilla"
    1:     ;;
    1: 
    1: *-bsdi*)
    1:     dnl -pedantic doesn't play well with BSDI's _very_ modified gcc (shlicc2)
    1:     _PEDANTIC=
    1:     case $OS_RELEASE in
    1: 	4.*|5.*)
    1:             STRIP="$STRIP -d"
    1:             ;;
    1: 	*)
    1: 	    DSO_CFLAGS=''
    1: 	    DSO_LDOPTS='-r'
    1: 	    _WARNINGS_CFLAGS="-Wall"
    1: 	    _WARNINGS_CXXFLAGS="-Wall"
    1: 	    # The test above doesn't work properly, at least on 3.1.
    1: 	    MKSHLIB_FORCE_ALL=''
    1: 	    MKSHLIB_UNFORCE_ALL=''
    1: 	;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*) 
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
51603:     MOZ_OPTIMIZE_FLAGS="-O3 -fomit-frame-pointer"
    1:     _PEDANTIC=
 9559:     CFLAGS="$CFLAGS -fpascal-strings -fno-common"
 9559:     CXXFLAGS="$CXXFLAGS -fpascal-strings -fno-common"
    1:     DLL_SUFFIX=".dylib"
    1:     DSO_LDOPTS=''
    1:     STRIP="$STRIP -x -S"
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
    1:     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
12447:     LDFLAGS="$LDFLAGS -framework Cocoa"
14692:     # The ExceptionHandling framework is needed for Objective-C exception
14692:     # logging code in nsObjCExceptions.h. Currently we only use that in debug
14692:     # builds.
14692:     MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -framework ExceptionHandling"
    1: 
15321:     dnl DTrace and -dead_strip don't interact well. See bug 403132.
15321:     dnl ===================================================================
15321:     if test "x$enable_dtrace" = "xyes"; then
15321:         echo "Skipping -dead_strip because DTrace is enabled. See bug 403132."
15321:     else
    1:         dnl check for the presence of the -dead_strip linker flag
    1:         AC_MSG_CHECKING([for -dead_strip option to ld])
    1:         _SAVE_LDFLAGS=$LDFLAGS
    1:         LDFLAGS="$LDFLAGS -Wl,-dead_strip"
    1:         AC_TRY_LINK(,[return 0;],_HAVE_DEAD_STRIP=1,_HAVE_DEAD_STRIP=)
    1:         if test -n "$_HAVE_DEAD_STRIP" ; then
    1:             AC_MSG_RESULT([yes])
    1:             MOZ_OPTIMIZE_LDFLAGS="-Wl,-dead_strip"
    1:         else
    1:             AC_MSG_RESULT([no])
    1:         fi
15321:         
    1:         LDFLAGS=$_SAVE_LDFLAGS
15321:     fi
38007:     MOZ_FIX_LINK_PATHS='-Wl,-executable_path,$(LIBXUL_DIST)/bin'
    1:     ;;
    1: 
    1: *-freebsd*)
15860:     if test `test -x /usr/bin/objformat && /usr/bin/objformat || echo elf` != "elf"; then
    1: 	DLL_SUFFIX=".so.1.0"
    1: 	DSO_LDOPTS="-shared"
    1:     fi
    1:     if test ! "$GNU_CC"; then
    1: 	DSO_LDOPTS="-Bshareable $DSO_LDOPTS"
    1:     fi
    1:     ;; 
    1: 
41441: ia64*-hpux*)
41441:     DLL_SUFFIX=".so"
41441:     if test ! "$GNU_CC"; then
41441:        DSO_LDOPTS='-b'
41441:        DSO_CFLAGS=""
41441:        DSO_PIC_CFLAGS=
41441:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_LDOPTS) -o $@'
41441:        CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
41441:     else
41441:        DSO_LDOPTS='-b -E'
41441:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:     fi
41441:     MOZ_FIX_LINK_PATHS=
41441:     SYSTEM_MAKEDEPEND=
41441:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
41441:     ;;
41441: 
    1: *-hpux*)
    1:     DLL_SUFFIX=".sl"
    1:     if test ! "$GNU_CC"; then
    1:     	DSO_LDOPTS='-b -Wl,+s'
    1:     	DSO_CFLAGS=""
    1:     	DSO_PIC_CFLAGS="+Z"
    1:     	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -o $@'
    1:     	MKCSHLIB='$(LD) -b +s -L$(LIBXUL_DIST)/bin -o $@'
    1:         CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
    1:     else
    1:         DSO_LDOPTS='-b -E +s'
    1:         MKSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:         MKCSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:     fi
    1:     MOZ_POST_PROGRAM_COMMAND='chatr +s enable'
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-irix5*)
    1:     AC_DEFINE(IRIX)
    1:     DSO_LDOPTS='-elf -shared'
    1: 
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1:     fi
    1:     ;;
    1: 
    1: *-irix6*)
    1:     AC_DEFINE(IRIX)
    1:     dnl the irix specific xptcinvoke code is written against the n32 ABI so we *must* 
    1:     dnl compile and link using -n32
    1:     USE_N32=1
    1:     TARGET_COMPILER_ABI=n32
    1:     DSO_LDOPTS='-elf -shared'
    1:     MKSHLIB='$(CCC) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     _MOZ_EXCEPTIONS_FLAGS_OFF="-LANG:exceptions=OFF"
    1:     _MOZ_EXCEPTIONS_FLAGS_ON="-LANG:exceptions=ON"
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        _WARNINGS_CFLAGS="-Wall"
    1:        _WARNINGS_CXXFLAGS="-Wall"
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1: 	   AR_LIST="$AR t"
    1: 	   AR_EXTRACT="$AR x"
    1: 	   AR_DELETE="$AR d"
    1: 	   AR='$(CXX) -ar'
    1: 	   AR_FLAGS='-o $@'
    1:        CFLAGS="$CFLAGS -woff 3262 -G 4"
    1:        CXXFLAGS="$CXXFLAGS -woff 3262 -G 4"
    1:        if test -n "$USE_N32"; then
    1: 	   ASFLAGS="$ASFLAGS -n32"
    1: 	   CFLAGS="$CFLAGS -n32"
    1: 	   CXXFLAGS="$CXXFLAGS -n32"
    1: 	   LDFLAGS="$LDFLAGS -n32"
    1:        fi
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:        AC_MSG_WARN([Clearing MOZ_FIX_LINK_PATHS for OSF/1 as fix for bug 333545 (till the reference bug 332075 is fixed.])
    1:        MOZ_FIX_LINK_PATHS=
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       MIPSPRO_CXX=1
    1:     fi
    1:     ;;
    1: 
    1: *-*linux*)
21716:     # Note: both GNU_CXX and INTEL_CXX are set when using Intel's C compiler.
21716:     if test "$INTEL_CXX"; then
21716:         # -Os has been broken on Intel's C/C++ compilers for quite a
21716:         # while; Intel recommends against using it.
21716:         MOZ_OPTIMIZE_FLAGS="-O2"
39277:         MOZ_DEBUG_FLAGS="-g"
21716:     elif test "$GNU_CXX"; then
21716:         GCC_VERSION=`$CXX -v 2>&1 | awk '/^gcc version/ { print $3 }'`
13134:         case $GCC_VERSION in
47099:         4.1.*|4.2.*|4.5.*)
47099:             # -Os is broken on gcc 4.1.x 4.2.x, 4.5.x we need to tweak it to get good results.
13134:             MOZ_OPTIMIZE_SIZE_TWEAK="-finline-limit=50"
13134:         esac
39879:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fomit-frame-pointer $MOZ_OPTIMIZE_SIZE_TWEAK"
39277:         MOZ_DEBUG_FLAGS="-g"
21716:     fi
21716: 
21716:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
11611: 
    1:     case "${target_cpu}" in
    1:     alpha*)
    1:     	CFLAGS="$CFLAGS -mieee"
    1:     	CXXFLAGS="$CXXFLAGS -mieee"
    1:     ;;
    1:     mips*)
20694:         MOZ_DEBUG_FLAGS="-g" # We want inlining
    1:     ;;
    1:     esac
    1:     ;;
    1: 
35551: *-wince*|*-winmo*)
31004:     TARGET_COMPILER_ABI=msvc
    1:     MOZ_TOOLS_DIR=`echo $MOZ_TOOLS`
    1:     AR_LIST="$AR -list"
    1:     AR_EXTRACT="$AR -extract"
    1:     AR_DELETE="$AR d"
    1:     AR_FLAGS='-OUT:"$@"'
19305:     AS="$AS_BIN"
26545: 
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     BIN_SUFFIX='.exe'
19305:     if test -z "$RC"; then 
    1:         RC=rc.exe  
19305:     fi
    1:     # certain versions of cygwin's makedepend barf on the 
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1: 
    1:     HOST_CC=cl
    1:     HOST_CXX=cl
    1:     HOST_LD=link
    1:     HOST_AR='lib -OUT:$@'
    1:     HOST_RANLIB='echo ranlib'
11967:     HOST_CFLAGS="$HOST_CFLAGS -D_X86_"
11967:         
    1:         
 5384:     WARNINGS_AS_ERRORS='-WX'
    1: 	MOZ_OPTIMIZE_FLAGS='-O1'
    1:     AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:     ASM_SUFFIX=asm
21344:     CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:     CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
    1:     DLL_PREFIX=
    1:     DOXYGEN=:
    1:     DSO_LDOPTS=-SUBSYSTEM:WINDOWSCE
    1:     DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib'
    1:     GARBAGE=
    1:     IMPORT_LIB_SUFFIX=lib
    1:     LIBS="$LIBS"
    1:     LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib'
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib 
    1:     MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ $(DSO_LDOPTS)'
    1:     MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ $(DSO_LDOPTS)'
    1:     MKSHLIB_FORCE_ALL=
    1:     MKSHLIB_UNFORCE_ALL=
    1:     MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
    1:     MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
    1:     MOZ_DEBUG_FLAGS='-Zi'
    1:     MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
    1:     MOZ_FIX_LINK_PATHS=
33494:     MOZ_JS_LIBS='$(libdir)/mozjs.lib'
    1:     OBJ_SUFFIX=obj
    1:     RANLIB='echo not_ranlib'
    1:     STRIP='echo not_strip'
    1:     TARGET_NSPR_MDCPUCFG='\"md/_wince.cfg\"'
    1:     UNZIP=unzip
    1:     XARGS=xargs
    1:     XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib'
    1:     ZIP=zip
    1: 
21122:     AC_DEFINE(WINCE)
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1: 
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='windows'
    1:     BIN_SUFFIX='.exe'
    1:     MOZ_USER_DIR="Mozilla"
33060: 
33060:     dnl Default to Windows Mobile components enabled
33060:     WINCE_WINDOWS_MOBILE=1
33060: 
33060:     MOZ_ARG_DISABLE_BOOL(windows-mobile-components,
33060:     [  --disable-windows-mobile-components
43058:                           Disable Windows Mobile specific components from
43058:                           CE build],
33060:     WINCE_WINDOWS_MOBILE=,
33060:     WINCE_WINDOWS_MOBILE=1)
33060:  
33060:     if test "$WINCE_WINDOWS_MOBILE"; then
33060:         AC_DEFINE(WINCE_WINDOWS_MOBILE)
33060:     fi
    1: ;;
    1: 
28509: *-symbian*)
28509: 
28509:     AC_DEFINE(XP_UNIX)
28509:     AC_DEFINE(SYMBIAN)
28509:     AC_DEFINE(__arm__)
28509:     AC_DEFINE(__SYMBIAN32__)
28509:     AC_DEFINE(_UNICODE)
28509:     AC_DEFINE(NDEBUG)
28509:     AC_DEFINE(__SUPPORT_CPP_EXCEPTIONS__)
28509:     AC_DEFINE(MOZ_STDERR_TO_STDOUT)
28509:     AC_DEFINE(HAVE_FCNTL_FILE_LOCKING)
28509:     AC_DEFINE(HAVE_SOCKLEN_T)
28509:     AC_DEFINE(__GCCE__)
28509: 
28509:     CPU_ARCH=ARM
28509:     OS_RELEASE=9.2
28509:     OS_ARCH=SYMBIAN
28509:     USE_PTHREADS=1
28509:     LIB_SUFFIX=lib
28509:     DLL_SUFFIX=dll
28509:     MKSHLIB=
28509:     DSO_LDOPTS=
28509:     DSO_CFLAGS=
28509:     VISIBILITY_FLAGS=
28509:     TARGET_NSPR_MDCPUCFG='\"md/_symbian.cfg\"'
28509:     RANLIB='echo no ranlib '
28509: ;;
    1: 
    1: *-mingw*|*-cygwin*|*-msvc*|*-mks*)
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     RC=rc.exe
    1:     # certain versions of cygwin's makedepend barf on the 
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1:     if test -n "$GNU_CC"; then
    1:         CC="$CC -mno-cygwin"
    1:         CXX="$CXX -mno-cygwin"
    1:         CPP="$CPP -mno-cygwin"
    1:         CFLAGS="$CFLAGS -mms-bitfields"
    1:         CXXFLAGS="$CXXFLAGS -mms-bitfields"
    1:         DSO_LDOPTS='-shared'
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         RC='$(WINDRES)'
    1:         # Use temp file for windres (bug 213281)
    1:         RCFLAGS='-O coff --use-temp-file'
    1:         # mingw doesn't require kernel32, user32, and advapi32 explicitly
    1:         LIBS="$LIBS -lgdi32 -lwinmm -lwsock32"
33494:         MOZ_JS_LIBS='-L$(libdir) -lmozjs'
    1:         MOZ_FIX_LINK_PATHS=
    1:         DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib -lxpcom -lxpcom_core'
    1:         XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/lib -lxpcom'
    1:         DLL_PREFIX=
    1:         IMPORT_LIB_SUFFIX=dll.a
42204:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
    1:     else
    1:         TARGET_COMPILER_ABI=msvc
    1:         HOST_CC='$(CC)'
    1:         HOST_CXX='$(CXX)'
    1:         HOST_LD='$(LD)'
53477:         if test "$AS_BIN"; then
53477:           AS="$(basename "$AS_BIN")"
53477:         fi
    1:         AR='lib -NOLOGO -OUT:"$@"'
    1:         AR_FLAGS=
    1:         RANLIB='echo not_ranlib'
    1:         STRIP='echo not_strip'
51803:         PKG_SKIP_STRIP=1
    1:         XARGS=xargs
    1:         ZIP=zip
    1:         UNZIP=unzip
    1:         DOXYGEN=:
    1:         GARBAGE='$(OBJDIR)/vc20.pdb $(OBJDIR)/vc40.pdb'
53477:         ASM_SUFFIX=asm
    1:         OBJ_SUFFIX=obj
    1:         LIB_SUFFIX=lib
    1:         DLL_PREFIX=
    1:         LIB_PREFIX=
    1:         IMPORT_LIB_SUFFIX=lib
21344:         MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
21344:         MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
    1:         MKSHLIB_FORCE_ALL=
    1:         MKSHLIB_UNFORCE_ALL=
    1:         DSO_LDOPTS=-SUBSYSTEM:WINDOWS
31530:         _USE_CPP_INCLUDE_FLAG=1
31530:         _DEFINES_CFLAGS='-FI $(DEPTH)/js-confdefs.h -DMOZILLA_CLIENT'
31530:         _DEFINES_CXXFLAGS='-FI $(DEPTH)/js-confdefs.h -DMOZILLA_CLIENT'
21344:         CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:         CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
42785:         CXXFLAGS="$CXXFLAGS -wd4800" # disable warning "forcing value to bool"
    1:         LIBS="$LIBS kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib"
    1:         MOZ_DEBUG_FLAGS='-Zi'
    1:         MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
 5384:         WARNINGS_AS_ERRORS='-WX'
    1:     	MOZ_OPTIMIZE_FLAGS='-O1'
33494:         MOZ_JS_LIBS='$(libdir)/mozjs.lib'
    1:         MOZ_FIX_LINK_PATHS=
    1:         DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib'
    1:         XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib'
    1:         LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib'
    1:         MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
 3563:         if test $_MSC_VER -ge 1400; then
33494:             LDFLAGS="$LDFLAGS -NXCOMPAT"
12601:             dnl For profile-guided optimization
11977:             PROFILE_GEN_CFLAGS="-GL"
11977:             PROFILE_GEN_LDFLAGS="-LTCG:PGINSTRUMENT"
14519:             dnl XXX: PGO builds can fail with warnings treated as errors,
14519:             dnl specifically "no profile data available" appears to be
14519:             dnl treated as an error sometimes. This might be a consequence
14519:             dnl of using WARNINGS_AS_ERRORS in some modules, combined
14519:             dnl with the linker doing most of the work in the whole-program
14519:             dnl optimization/PGO case. I think it's probably a compiler bug,
14519:             dnl but we work around it here.
14519:             PROFILE_USE_CFLAGS="-GL -wd4624 -wd4952"
14519:             dnl XXX: should be -LTCG:PGOPTIMIZE, but that fails on libxul.
14519:             dnl Probably also a compiler bug, but what can you do?
11977:             PROFILE_USE_LDFLAGS="-LTCG:PGUPDATE"
12601:             if test -n "$_USE_DYNAMICBASE"; then
12601:                LDFLAGS="$LDFLAGS -DYNAMICBASE"
12601:             fi
 3563:         fi
    1:     fi
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-windows'
    1:     BIN_SUFFIX='.exe'
    1:     MOZ_USER_DIR="Mozilla"
    1: 
    1:     dnl Hardcode to win95 for now - cls
    1:     TARGET_NSPR_MDCPUCFG='\"md/_win95.cfg\"'
    1: 
    1:     dnl set NO_X11 defines here as the general check is skipped on win32
    1:     no_x=yes
    1:     AC_DEFINE(NO_X11)
    1: 
    1:     dnl MinGW/MSYS doesn't provide or need cygpath
    1:     case "$host" in
    1:     *-mingw*)
    1: 	CYGPATH_W=echo
    1: 	CYGPATH_S=cat
    1: 	MOZ_BUILD_ROOT=`cd $MOZ_BUILD_ROOT && pwd -W`
    1: 	;;
    1:     *-cygwin*|*-msvc*|*-mks*)
    1: 	CYGPATH_W="cygpath -a -w"
    1: 	CYGPATH_S="sed -e s|\\\\|/|g"
    1: 	MOZ_BUILD_ROOT=`$CYGPATH_W $MOZ_BUILD_ROOT | $CYGPATH_S`
    1: 	;;
    1:     esac
    1:     case "$host" in
    1:     *-mingw*|*-cygwin*|*-msvc*|*-mks*)
    1: 
    1:     if test -z "$MOZ_TOOLS"; then
    1:         AC_MSG_ERROR([MOZ_TOOLS is not set])
    1:     fi
    1: 
    1:     MOZ_TOOLS_DIR=`cd $MOZ_TOOLS && pwd`
47975:     if test "$?" != "0" -o -z "$MOZ_TOOLS_DIR"; then
    1:         AC_MSG_ERROR([cd \$MOZ_TOOLS failed. MOZ_TOOLS ==? $MOZ_TOOLS])
    1:     fi
    1:     if test `echo ${PATH}: | grep -ic "$MOZ_TOOLS_DIR/bin:"` = 0; then
    1:         AC_MSG_ERROR([\$MOZ_TOOLS\\bin must be in your path.])
    1:     fi
    1:     MOZ_TOOLS_DIR=`$CYGPATH_W $MOZ_TOOLS_DIR | $CYGPATH_S`
    1:     ;;
    1:     esac 
    1: 
14512: 
14512:     case "$host_os" in
15187:     cygwin*|msvc*|mks*)
14513:         AC_MSG_WARN([Using a cygwin build environment is unsupported. Configure cannot check for the presence of necessary headers. Please upgrade to MozillaBuild; see http://developer.mozilla.org/en/docs/Windows_Build_Prerequisites])
14512:         ;;
14512:     esac
14341: 
    1:     case "$target" in
    1:     i*86-*)
33494:         if test "$HAVE_64BIT_OS"; then
33494:             AC_MSG_ERROR([You are targeting i386 but using the 64-bit compiler.])
33494:         fi
33494: 
33494:         if test $_MSC_VER -ge 1400; then
33494:             LDFLAGS="$LDFLAGS -SAFESEH"
33494:         fi
33494:     	AC_CHECK_HEADERS(mmintrin.h)
    1:     	AC_DEFINE(_X86_)
    1: 	;;
    1:     alpha-*)
    1:     	AC_DEFINE(_ALPHA_)
    1: 	;;
    1:     mips-*)
    1:     	AC_DEFINE(_MIPS_)
    1: 	;;
33494:     x86_64-*)
33494:     	AC_DEFINE(_AMD64_)
33494: 	;;
    1:     *)
    1:     	AC_DEFINE(_CPU_ARCH_NOT_DEFINED)
    1: 	;;
    1:     esac
33494: 
33494:     if test "$HAVE_64BIT_OS"; then
33494:     	AC_DEFINE(_WIN64)
33494:     fi
    1:     ;;
    1: 
    1: *-netbsd*)
    1:     DSO_CFLAGS=''
    1:     CFLAGS="$CFLAGS -Dunix"
    1:     CXXFLAGS="$CXXFLAGS -Dunix"
    1:     if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
    1:         DLL_SUFFIX=".so"
    1:         DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:         DSO_LDOPTS='-shared'
    1: 	BIN_FLAGS='-Wl,--export-dynamic'
    1:     else
    1:     	DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:     	DLL_SUFFIX=".so.1.0"
    1:     	DSO_LDOPTS='-shared'
    1:     fi
    1:     # This will fail on a.out systems prior to 1.5.1_ALPHA.
    1:     MKSHLIB_FORCE_ALL='-Wl,--whole-archive'
    1:     MKSHLIB_UNFORCE_ALL='-Wl,--no-whole-archive'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-Wl,-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     ;;
    1: 
    1: *-nto*) 
    1: 	AC_DEFINE(NTO)	
    1: 	AC_DEFINE(_QNX_SOURCE)
    1: 	AC_DEFINE(_i386)
    1: 	OS_TARGET=NTO
 5382: 	WARNINGS_AS_ERRORS=''
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: 	MOZ_DEBUG_FLAGS="-gstabs"
    1: 	USE_PTHREADS=1
    1: 	_PEDANTIC=
    1: 	LIBS="$LIBS -lsocket -lstdc++"
47213: 	_DEFINES_CFLAGS='-include $(DEPTH)/js-confdefs.h -DMOZILLA_CLIENT -D_POSIX_C_SOURCE=199506'
47213: 	_DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/js-confdefs.h -D_POSIX_C_SOURCE=199506'
    1: 	if test "$with_x" != "yes"
    1: 	then
    1: 		_PLATFORM_DEFAULT_TOOLKIT="photon"
    1: 	    TK_CFLAGS='-I/usr/include/photon'
    1: 		TK_LIBS='-lph'
    1: 	fi
    1: 	case "${target_cpu}" in
    1: 	ppc*)
    1: 	AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)	
    1: 	;;
    1: 	esac
    1: 	;;
    1: 
    1: *-openbsd*)
    1:     DLL_SUFFIX=".so.1.0"
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
    1:     DSO_LDOPTS='-shared -fPIC'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     ;;
    1: 
    1: *-openvms*) 
    1:     AC_DEFINE(NO_PW_GECOS)
    1:     AC_DEFINE(NO_UDSOCK)
    1:     AC_DEFINE(POLL_WITH_XCONNECTIONNUMBER)
    1:     USE_PTHREADS=1
    1:     MKSHLIB_FORCE_ALL='-all'
    1:     MKSHLIB_UNFORCE_ALL='-none'
    1:     AS='as'
    1:     AS_DASH_C_FLAG='-Wc/names=as_is'
    1:     AR_FLAGS='c $@'
    1:     DSO_LDOPTS='-shared -auto_symvec'
    1:     DSO_PIC_CFLAGS=
    1:     MOZ_DEBUG_LDFLAGS='-g'
    1:     COMPAQ_CXX=1
    1:     CC_VERSION=`$CC -V 2>&1 | awk '/ C / { print $3 }'`
    1:     CXX_VERSION=`$CXX -V 2>&1 | awk '/ C\+\+ / { print $3 }'`
    1:     ;;
    1: 
    1: 
    1: *-os2*)
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
20288:     AC_DEFINE(OS2)
    1:     AC_DEFINE(XP_OS2)
20288:     AC_DEFINE(OS2EMX_PLAIN_CHAR)
20288:     AC_DEFINE(TCPV40HDRS)
    1:     DLL_PREFIX=
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib
    1:     BIN_SUFFIX=".exe"
    1:     DLL_SUFFIX=".dll"
    1:     IMPORT_LIB_SUFFIX=lib
    1:     DSO_PIC_CFLAGS=
    1:     AR=emxomfar
    1:     AR_FLAGS='r $@'
    1:     CFLAGS="$CFLAGS -Zomf"
    1:     CXXFLAGS="$CXXFLAGS -Zomf"
    1:     DSO_LDOPTS='-Zdll'
    1:     BIN_FLAGS='-Zlinker /ST:0x100000'
    1:     IMPLIB='emximp -o'
    1:     FILTER='emxexp -o'
    1:     LDFLAGS='-Zmap'
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     MOZ_DEBUG_FLAGS="-g -fno-inline"
11455:     MOZ_OPTIMIZE_FLAGS="-O2"
11455:     MOZ_OPTIMIZE_LDFLAGS="-s -Zlinker /EXEPACK:2 -Zlinker /PACKCODE -Zlinker /PACKDATA"
39033:     DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
39033:     LIBXUL_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
20288:     TARGET_MD_ARCH=os2
20288:     _PLATFORM_DEFAULT_TOOLKIT="cairo-os2"
20288:     RC=rc.exe
20288:     RCFLAGS='-n'
20288:     MOZ_USER_DIR="Mozilla"
20288: 
20288:     if test "$MOZTOOLS"; then
20288:         MOZ_TOOLS_DIR=`echo $MOZTOOLS | sed -e 's|\\\\|/|g'`
20288:     else
20288:         AC_MSG_ERROR([MOZTOOLS is not set])
20288:     fi
    1:     if test -n "$MOZ_OS2_HIGH_MEMORY"; then
    1:         DSO_LDOPTS="$DSO_LDOPTS -Zhigh-mem"
    1:         LDFLAGS="$LDFLAGS -Zhigh-mem"
    1:         MOZ_OPTIMIZE_LDFLAGS="$MOZ_OPTIMIZE_LDFLAGS -Zhigh-mem"
    1:         AC_DEFINE(MOZ_OS2_HIGH_MEMORY)
    1:     fi
    1: 
    1:     # GCC for OS/2 currently predefines these, but we don't want them
    1:     _DEFINES_CFLAGS="$_DEFINES_CFLAGS -Uunix -U__unix -U__unix__"
    1:     _DEFINES_CXXFLAGS="$_DEFINES_CXXFLAGS -Uunix -U__unix -U__unix__"
    1: 
    1:     AC_CACHE_CHECK(for __declspec(dllexport),
    1:         ac_os2_declspec,
    1:         [AC_TRY_COMPILE([__declspec(dllexport) void ac_os2_declspec(void) {}],
    1:                         [return 0;],
    1:                         ac_os2_declspec="yes",
    1:                         ac_os2_declspec="no")])
    1:     if test "$ac_os2_declspec" = "yes"; then
    1:         FILTER='true'
    1:         MOZ_OS2_USE_DECLSPEC='1'
    1:     fi
    1:     ;;
    1: 
    1: alpha*-*-osf*)
    1:     if test "$GNU_CC"; then
    1:       MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1:       MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1: 
    1:     else
    1: 	MOZ_DEBUG_FLAGS='-g'
    1: 	ASFLAGS='-I$(topsrcdir)/xpcom/reflect/xptcall/public -g'
    1: 	CFLAGS="$CFLAGS -ieee"
    1: 	CXXFLAGS="$CXXFLAGS "'-noexceptions -ieee  -ptr $(DIST)/cxx_repository'
    1: 	DSO_LDOPTS='-shared -msym -expect_unresolved \* -update_registry $(DIST)/so_locations'
    1: 	DSO_CFLAGS=
    1: 	DSO_PIC_CFLAGS=
    1: 	MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB_FORCE_ALL='-all'
    1: 	MKSHLIB_UNFORCE_ALL='-none'
    1: 	dnl Might fix the libxpcom.so breakage on this platform as well....
    1: 	AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1: 	AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       COMPAQ_CXX=1
    1:     fi
    1:     AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     ;;
    1: 
    1: *-qnx*) 
    1:     DIRENT_INO=d_stat.st_ino
    1:     dnl Solves the problems the QNX compiler has with nsCOMPtr.h.
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     dnl Explicit set STDC_HEADERS to workaround QNX 6.0's failing of std test
    1:     AC_DEFINE(STDC_HEADERS)
    1:     if test "$no_x" = "yes"; then
    1: 	    _PLATFORM_DEFAULT_TOOLKIT='photon'
    1: 	    TK_CFLAGS='-I/usr/nto/include/photon'
    1: 	    TK_LIBS='-lphoton -lphrender'
    1:     fi
    1:     ;;
    1: 
    1: *-sco*) 
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     CXXFLAGS="$CXXFLAGS -I/usr/include/CC"
    1:     if test ! "$GNU_CC"; then
    1:        DSO_LDOPTS='-G'
    1:     fi
    1:     ;;
    1: 
    1: *-solaris*) 
    1:     AC_DEFINE(SOLARIS)
    1:     TARGET_NSPR_MDCPUCFG='\"md/_solaris.cfg\"'
30801:     if test -z "$CROSS_COMPILE" && pkginfo -q SUNWpr && pkginfo -q SUNWprd; then
30801:        NO_NSPR_CONFIG_SYSTEM_LDFLAGS="-L/usr/lib/mps -R/usr/lib/mps -lnspr4"
30801:        NO_NSPR_CONFIG_SYSTEM_CFLAGS="-I/usr/include/mps"
30801:        NO_NSPR_CONFIG_SYSTEM_VERSION=["`pkgparam SUNWpr SUNW_PRODVERS | sed -e 's/^[1-9][0-9]*\.[0-9][0-9]*$/&.0/'`"]
30801:     fi
    1:     SYSTEM_MAKEDEPEND=
46279:     MOZ_FIX_LINK_PATHS=
    1:     # $ORIGIN/.. is for shared libraries under components/ to locate shared
    1:     # libraries one level up (e.g. libnspr4.so)
24783:     if test "$SOLARIS_SUNPRO_CC"; then
46279:        LDFLAGS="$LDFLAGS -z ignore -R '\$\$ORIGIN:\$\$ORIGIN/..' -z lazyload -z combreloc -z muldefs"
46279:        LIBS="-lCrun -lCstd -lc $LIBS"
    1:        NS_USE_NATIVE=1
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
46279:        CFLAGS="$CFLAGS -xlibmieee -xstrconst -xbuiltin=%all -D__FUNCTION__=__func__"
49018:        CXXFLAGS="$CXXFLAGS -xlibmieee -xbuiltin=%all -features=tmplife,tmplrefstatic,extensions -norunpath -D__FUNCTION__=__func__ -template=no%extdef"
40533:        _MOZ_EXCEPTIONS_FLAGS_ON='-features=except'
40533:        _MOZ_EXCEPTIONS_FLAGS_OFF='-features=no%except'
46279:        LDFLAGS="-xildoff $LDFLAGS"
47975:        if test -z "$CROSS_COMPILE" -a -f /usr/lib/ld/map.noexstk; then
    1:            _SAVE_LDFLAGS=$LDFLAGS
    1:            LDFLAGS="-M /usr/lib/ld/map.noexstk $LDFLAGS" 
    1:            AC_TRY_LINK([#include <stdio.h>],
    1:                        [printf("Hello World\n");],
    1:                        ,
    1:                        [LDFLAGS=$_SAVE_LDFLAGS])
    1:        fi
 5382:        WARNINGS_AS_ERRORS='-Werror'
    1:        MOZ_OPTIMIZE_FLAGS="-xO4"
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
46281:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
    1:        MKSHLIB_FORCE_ALL='-z allextract'
 2607:        MKSHLIB_UNFORCE_ALL='-z defaultextract'
46279:        DSO_LDOPTS='-G'
    1:        AR_LIST="$AR t"
    1:        AR_EXTRACT="$AR x"
    1:        AR_DELETE="$AR d"
    1:        AR='$(CXX) -xar'
    1:        AR_FLAGS='-o $@'
    1:        AS='/usr/ccs/bin/as'
    1:        ASFLAGS="$ASFLAGS -K PIC -L -P -D_ASM -D__STDC__=0"
    1:        AS_DASH_C_FLAG=''
    1:        TARGET_COMPILER_ABI="sunc"
    1:        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
    1:        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
24783:        AC_MSG_CHECKING([for Sun C++ compiler version >= 5.9])
    1:        AC_LANG_SAVE
    1:        AC_LANG_CPLUSPLUS
    1:        AC_TRY_COMPILE([],
24783:            [#if (__SUNPRO_CC < 0x590)
    1:            #error "Denied"
    1:            #endif],
    1:            _BAD_COMPILER=,_BAD_COMPILER=1)
    1:        if test -n "$_BAD_COMPILER"; then
    1:            _res="no"
24783:            AC_MSG_ERROR([Sun C++ 5.9 (Sun Studio 12) or higher is required to build. Your compiler version is $CXX_VERSION .])
    1:        else
    1:            _res="yes"
    1:        fi
46279:        AC_TRY_COMPILE([],
46279:            [#if (__SUNPRO_CC >= 0x5100)
46279:            #error "Sun C++ 5.10 or above"
46279:            #endif],
46279:            _ABOVE_SS12U1=,_ABOVE_SS12U1=1)
46279:        if test "$_ABOVE_SS12U1"; then
46279:            # disable xannotate
46279:            CXXFLAGS="$CXXFLAGS -xannotate=no"
46279:        fi
    1:        AC_MSG_RESULT([$_res])
    1:        AC_LANG_RESTORE
    1:     else
46279:        LDFLAGS="$LDFLAGS -Wl,-z,ignore -Wl,-R,'\$\$ORIGIN:\$\$ORIGIN/..' -Wl,-z,lazyload -Wl,-z,combreloc -Wl,-z,muldefs"
46279:        LIBS="-lc $LIBS"
46279:        MKSHLIB_FORCE_ALL='-Wl,-z -Wl,allextract'
46279:        MKSHLIB_UNFORCE_ALL='-Wl,-z -Wl,defaultextract'
    1:        ASFLAGS="$ASFLAGS -fPIC"
46279:        DSO_LDOPTS='-shared'
    1:        _WARNINGS_CFLAGS=''
    1:        _WARNINGS_CXXFLAGS=''
    1:        if test "$OS_RELEASE" = "5.3"; then
    1:            AC_DEFINE(MUST_UNDEF_HAVE_BOOLEAN_AFTER_INCLUDES)
    1:        fi
    1:     fi
    1:     if test "$OS_RELEASE" = "5.5.1"; then
    1:         AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     fi
    1:     ;;
    1: 
    1: *-sunos*) 
    1:     DSO_LDOPTS='-Bdynamic'
    1:     MKSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     AC_DEFINE(SUNOS4)
    1:     AC_DEFINE(SPRINTF_RETURNS_STRING)
    1:     case "$(target_os)" in
    1:     sunos4.1*)
    1:         DLL_SUFFIX='.so.1.0'
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-sysv4.2uw7*) 
    1: 	NSPR_LIBS="-lnspr$NSPR_VERSION -lplc$NSPR_VERSION -lplds$NSPR_VERSION -L/usr/ccs/lib -lcrt"
    1:     ;;
    1: 
    1: *-os2*)
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     ;;
    1: 
    1: esac
    1: 
    1: dnl Only one oddball right now (QNX), but this gives us flexibility
    1: dnl if any other platforms need to override this in the future.
    1: AC_DEFINE_UNQUOTED(D_INO,$DIRENT_INO)
    1: 
    1: dnl ========================================================
    1: dnl Any platform that doesn't have MKSHLIB_FORCE_ALL defined
    1: dnl by now will not have any way to link most binaries (tests
    1: dnl as well as viewer, apprunner, etc.), because some symbols
    1: dnl will be left out of the "composite" .so's by ld as unneeded.
    1: dnl So, by defining NO_LD_ARCHIVE_FLAGS for these platforms,
    1: dnl they can link in the static libs that provide the missing
    1: dnl symbols.
    1: dnl ========================================================
    1: NO_LD_ARCHIVE_FLAGS=
47975: if test -z "$MKSHLIB_FORCE_ALL" -o -z "$MKSHLIB_UNFORCE_ALL"; then
    1:     NO_LD_ARCHIVE_FLAGS=1
    1: fi
    1: case "$target" in
    1: *-os2*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-aix4.3*|*-aix5*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-openvms*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
35551: *-msvc*|*-mks*|*-mingw*|*-cygwin*|*-wince|*-winmo)
    1:     if test -z "$GNU_CC"; then
    1:         NO_LD_ARCHIVE_FLAGS=
    1:     fi
    1:     ;;
    1: esac
    1: AC_SUBST(NO_LD_ARCHIVE_FLAGS)
    1: 
    1: dnl ========================================================
    1: dnl = Flags to strip unused symbols from .so components
    1: dnl ========================================================
    1: case "$target" in
41013:     *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-solaris*)
    1:         if test -z "$GNU_CC"; then
    1:          MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-M $(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:         else
    1:          if test -z "$GCC_USE_GNU_LD"; then
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-M -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:          else
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:          fi
    1:         fi
    1:         ;;
    1:     *-nto*) 
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-darwin*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-exported_symbols_list -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-export-list'
    1:         ;;
35551:     *-cygwin*|*-mingw*|*-mks*|*-msvc|*-wince|*-winmo)
    1:         if test -n "$GNU_CC"; then
    1:            MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         fi
    1:         ;;
    1: esac
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_COMPILER_CHECKS=1
 2271:     SKIP_LIBRARY_CHECKS=1
    1: fi
    1: 
23608: dnl Configure JIT support
23608: 
23608: case "$target" in
23608: i?86-*)
38548:     ENABLE_TRACEJIT=1
23608:     NANOJIT_ARCH=i386
52556:     ENABLE_METHODJIT=1
53119:     ENABLE_MONOIC=1
53119:     ENABLE_POLYIC=1
52556:     AC_DEFINE(JS_CPU_X86)
53224:     AC_DEFINE(JS_NUNBOX32)
23608:     ;;
32789: x86_64*-*)
38548:     ENABLE_TRACEJIT=1
32789:     NANOJIT_ARCH=X64
53162:     ENABLE_METHODJIT=1
53269:     ENABLE_MONOIC=1
53315:     ENABLE_POLYIC=1
52556:     AC_DEFINE(JS_CPU_X64)
53224:     AC_DEFINE(JS_PUNBOX64)
32789:     ;;
23608: arm*-*)
38548:     ENABLE_TRACEJIT=1
23608:     NANOJIT_ARCH=ARM
52556:     AC_DEFINE(JS_CPU_ARM)
53224:     AC_DEFINE(JS_NUNBOX32)
23608:     ;;
25109: sparc*-*)
38548:     ENABLE_TRACEJIT=1
25109:     NANOJIT_ARCH=Sparc
52556:     AC_DEFINE(JS_CPU_SPARC)
25109:     ;;
23608: esac
23608: 
52556: MOZ_ARG_DISABLE_BOOL(methodjit,
52556: [  --disable-methodjit           Disable method JIT support],
52556:   ENABLE_METHODJIT= )
52556: 
53119: MOZ_ARG_DISABLE_BOOL(monoic,
53119: [  --disable-monoic      Disable use of MICs by JIT compiler],
53119:   ENABLE_MONOIC= )
53119: 
53119: MOZ_ARG_DISABLE_BOOL(polyic,
53119: [  --disable-polyic      Disable use of PICs by JIT compiler],
53119:   ENABLE_POLYIC= )
53119: 
38548: MOZ_ARG_DISABLE_BOOL(tracejit,
38548: [  --disable-tracejit      Disable tracing JIT support],
38548:   ENABLE_TRACEJIT=)
38548: 
52556: MOZ_ARG_ENABLE_BOOL(methodjit-spew,
52556: [  --enable-methodjit-spew      Enable method JIT spew support],
52556:   ENABLE_METHODJIT_SPEW=1,
52556:   ENABLE_METHODJIT_SPEW= )
52556: 
52556: AC_SUBST(ENABLE_METHODJIT)
52556: 
52556: if test "$ENABLE_METHODJIT"; then
52556:     AC_DEFINE(JS_METHODJIT)
52556: else
52556:     ENABLE_TRACEJIT= 
52556: fi
52556: 
53119: if test "$ENABLE_MONOIC"; then
53119:     AC_DEFINE(JS_MONOIC)
53119: fi
53119: 
53119: if test "$ENABLE_POLYIC"; then
53119:     AC_DEFINE(JS_POLYIC)
53119: fi
53119: 
52556: if test "$ENABLE_METHODJIT_SPEW"; then
52556:     AC_DEFINE(JS_METHODJIT_SPEW)
52556: fi
52556: 
38548: if test "$ENABLE_TRACEJIT"; then
23608: 
23648: AC_DEFINE(FEATURE_NANOJIT)
23648: AC_DEFINE(JS_TRACER)
23648: 
23608: case "$target" in
23608: i?86-*)
23608:     AC_DEFINE(AVMPLUS_IA32)
23608:     ;;
32789: x86_64*-*)
32789:     AC_DEFINE(AVMPLUS_AMD64)
33107:     AC_DEFINE(AVMPLUS_64BIT)
32789:     ;;
23608: arm*-*)
23608:     AC_DEFINE(AVMPLUS_ARM)
23608:     ;;
25109: sparc-*)
25109:     AC_DEFINE(AVMPLUS_SPARC)
25109:     ;;
23608: esac
23608: 
40165: case "$target" in
40165: *-linux*|*-android-eabi)
23608:     AC_DEFINE(AVMPLUS_UNIX)
23608:     AC_DEFINE(AVMPLUS_LINUX)
23608:     ;;
40165: *-darwin*)
23608:     AC_DEFINE(AVMPLUS_UNIX)
23608:     ;;
40165: *-solaris*)
23608:     AC_DEFINE(AVMPLUS_UNIX)
23608:     ;;
40165: *-freebsd*|*-kfreebsd*)
23608:     AC_DEFINE(AVMPLUS_UNIX)
23608:     ;;
41013: *-gnu*)
41013:     AC_DEFINE(AVMPLUS_UNIX)
41013:     ;;
40165: *-cygwin*|*-mingw*|*-mks*|*-msvc*|*-wince|*-winmo)
23608:     AC_DEFINE(AVMPLUS_WIN32)
23608:     ;;
40165: *-os2*)
24825:     AC_DEFINE(AVMPLUS_OS2)
24825:     ;;
23608: *)
38548:     AC_MSG_ERROR([Unrecognized nanojit platform. Use --disable-tracejit to build without tracing JIT support.])
23608: esac
23608: 
38548: fi # ENABLE_TRACEJIT
38548: 
38548: AC_SUBST(ENABLE_TRACEJIT)
23608: AC_SUBST(NANOJIT_ARCH)
23608: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl Checks for typedefs, structures, and compiler characteristics.
    1: dnl ========================================================
    1: AC_LANG_C
    1: AC_HEADER_STDC
    1: AC_C_CONST
    1: AC_TYPE_MODE_T
    1: AC_TYPE_OFF_T
    1: AC_TYPE_PID_T
    1: AC_TYPE_SIZE_T
40812: AC_MSG_CHECKING(for ssize_t)
40812: AC_CACHE_VAL(ac_cv_type_ssize_t,
40812:  [AC_TRY_COMPILE([#include <stdio.h>
40812:                   #include <sys/types.h>],
40812:                  [ssize_t foo = 0;],
40812:                  [ac_cv_type_ssize_t=true],
40812:                  [ac_cv_type_ssize_t=false])])
40812: if test "$ac_cv_type_ssize_t" = true ; then
40812:   AC_DEFINE(HAVE_SSIZE_T)
40812:   AC_MSG_RESULT(yes)
40812: else
40812:   AC_MSG_RESULT(no)
40812: fi
    1: AC_STRUCT_ST_BLKSIZE
    1: AC_MSG_CHECKING(for siginfo_t)
    1: AC_CACHE_VAL(ac_cv_siginfo_t,
    1:  [AC_TRY_COMPILE([#define _POSIX_C_SOURCE 199506L
    1:                   #include <signal.h>],
    1:                  [siginfo_t* info;],
    1:                  [ac_cv_siginfo_t=true],
    1:                  [ac_cv_siginfo_t=false])])
    1: if test "$ac_cv_siginfo_t" = true ; then
    1:   AC_DEFINE(HAVE_SIGINFO_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
23617: dnl Find exact-width integer types, or figure them out
23617: dnl ourselves.
23617: dnl ========================================================
23617: dnl Once this is working, we can delete the code for int16_t,
23617: dnl etc. below.
23617: 
23617: AC_CHECK_HEADER(stdint.h)
23617: if test "$ac_cv_header_stdint_h" = yes; then
23617:     AC_DEFINE(JS_HAVE_STDINT_H)
23617: else
23617:     dnl We'll figure them out for ourselves.  List more likely types
23617:     dnl earlier.  If we ever really encounter a size for which none of
23617:     dnl the listed types are appropriate, we'll get a configure-time
23617:     dnl error; just add the right answer.
23617:     MOZ_N_BYTE_TYPE(JS_INT8_TYPE,  1, [char])
23617:     MOZ_N_BYTE_TYPE(JS_INT16_TYPE, 2, [short int long])
23617:     MOZ_N_BYTE_TYPE(JS_INT32_TYPE, 4, [int long 'long long' short])
23617:     MOZ_N_BYTE_TYPE(JS_INT64_TYPE, 8, [int long 'long long'])
23617:     MOZ_N_BYTE_TYPE(JS_INTPTR_TYPE, sizeof (void *),
23617:                                       [int long 'long long' short])
23617: fi
23617: 
24073: MOZ_SIZE_OF_TYPE(JS_BYTES_PER_WORD, void*, 4 8)
24073: if test "$moz_cv_size_of_JS_BYTES_PER_WORD" -eq "4"; then
24073:   AC_DEFINE(JS_BITS_PER_WORD_LOG2, 5)
24073: elif test "$moz_cv_size_of_JS_BYTES_PER_WORD" -eq "8"; then
24073:   AC_DEFINE(JS_BITS_PER_WORD_LOG2, 6)
24073: else
24073:   AC_MSG_ERROR([Unexpected JS_BYTES_PER_WORD])
24073: fi
24073: 
24073: MOZ_ALIGN_OF_TYPE(JS_ALIGN_OF_POINTER, void*, 2 4 8 16)
24073: MOZ_SIZE_OF_TYPE(JS_BYTES_PER_DOUBLE, double, 6 8 10 12 14)
24073: 
    1: dnl Check for int16_t, int32_t, int64_t, int64, uint, uint_t, and uint16_t.
    1: dnl ========================================================
    1: AC_MSG_CHECKING(for int16_t)
    1: AC_CACHE_VAL(ac_cv_int16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int16_t foo = 0;],
    1:                  [ac_cv_int16_t=true],
    1:                  [ac_cv_int16_t=false])])
    1: if test "$ac_cv_int16_t" = true ; then
    1:   AC_DEFINE(HAVE_INT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int32_t)
    1: AC_CACHE_VAL(ac_cv_int32_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int32_t foo = 0;],
    1:                  [ac_cv_int32_t=true],
    1:                  [ac_cv_int32_t=false])])
    1: if test "$ac_cv_int32_t" = true ; then
    1:   AC_DEFINE(HAVE_INT32_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64_t)
    1: AC_CACHE_VAL(ac_cv_int64_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64_t foo = 0;],
    1:                  [ac_cv_int64_t=true],
    1:                  [ac_cv_int64_t=false])])
    1: if test "$ac_cv_int64_t" = true ; then
    1:   AC_DEFINE(HAVE_INT64_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64)
    1: AC_CACHE_VAL(ac_cv_int64,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64 foo = 0;],
    1:                  [ac_cv_int64=true],
    1:                  [ac_cv_int64=false])])
    1: if test "$ac_cv_int64" = true ; then
    1:   AC_DEFINE(HAVE_INT64)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint)
    1: AC_CACHE_VAL(ac_cv_uint,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint foo = 0;],
    1:                  [ac_cv_uint=true],
    1:                  [ac_cv_uint=false])])
    1: if test "$ac_cv_uint" = true ; then
    1:   AC_DEFINE(HAVE_UINT)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint_t)
    1: AC_CACHE_VAL(ac_cv_uint_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint_t foo = 0;],
    1:                  [ac_cv_uint_t=true],
    1:                  [ac_cv_uint_t=false])])
    1: if test "$ac_cv_uint_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint16_t)
    1: AC_CACHE_VAL(ac_cv_uint16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint16_t foo = 0;],
    1:                  [ac_cv_uint16_t=true],
    1:                  [ac_cv_uint16_t=false])])
    1: if test "$ac_cv_uint16_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
    1: dnl are defined when compiling C++ but not C.  Since the result of this
    1: dnl test is used only in C++, do it in C++.
    1: AC_LANG_CPLUSPLUS
    1: 
    1: AC_MSG_CHECKING(for uname.domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->domainname; } ],
    1:         [ac_cv_have_uname_domainname_field=true],
    1:         [ac_cv_have_uname_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_MSG_CHECKING(for uname.__domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_us_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->__domainname; } ],
    1:         [ac_cv_have_uname_us_domainname_field=true],
    1:         [ac_cv_have_uname_us_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_us_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_US_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_LANG_C
    1: 
    1: dnl Check for .hidden assembler directive and visibility attribute.
    1: dnl Borrowed from glibc configure.in
    1: dnl ===============================================================
    1: if test "$GNU_CC"; then
    1:   AC_CACHE_CHECK(for visibility(hidden) attribute,
    1:                  ac_cv_visibility_hidden,
    1:                  [cat > conftest.c <<EOF
    1:                   int foo __attribute__ ((visibility ("hidden"))) = 1;
    1: EOF
    1:                   ac_cv_visibility_hidden=no
    1:                   if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                     if egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                       ac_cv_visibility_hidden=yes
    1:                     fi
    1:                   fi
    1:                   rm -f conftest.[cs]
    1:                  ])
    1:   if test "$ac_cv_visibility_hidden" = "yes"; then
    1:     AC_DEFINE(HAVE_VISIBILITY_HIDDEN_ATTRIBUTE)
    1: 
    1:     AC_CACHE_CHECK(for visibility(default) attribute,
    1:                    ac_cv_visibility_default,
    1:                    [cat > conftest.c <<EOF
    1:                     int foo __attribute__ ((visibility ("default"))) = 1;
    1: EOF
    1:                     ac_cv_visibility_default=no
    1:                     if ${CC-cc} -fvisibility=hidden -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                       if ! egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                         ac_cv_visibility_default=yes
    1:                       fi
    1:                     fi
    1:                     rm -f conftest.[cs]
    1:                    ])
    1:     if test "$ac_cv_visibility_default" = "yes"; then
    1:       AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE)
    1: 
    1:       AC_CACHE_CHECK(for visibility pragma support,
    1:                      ac_cv_visibility_pragma,
    1:                      [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1:                       int foo_hidden = 1;
    1: #pragma GCC visibility push(default)
    1:                       int foo_default = 1;
    1: EOF
    1:                       ac_cv_visibility_pragma=no
    1:                       if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
 2576:                         if egrep '\.(hidden|private_extern).*foo_hidden' conftest.s >/dev/null; then
 2576:                           if ! egrep '\.(hidden|private_extern).*foo_default' conftest.s > /dev/null; then
    1:                             ac_cv_visibility_pragma=yes
    1:                           fi
    1:                         fi
    1:                       fi
    1:                       rm -f conftest.[cs]
    1:                     ])
    1:       if test "$ac_cv_visibility_pragma" = "yes"; then
    1:         AC_CACHE_CHECK(For gcc visibility bug with class-level attributes (GCC bug 26905),
    1:                        ac_cv_have_visibility_class_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: struct __attribute__ ((visibility ("default"))) TestStruct {
    1:   static void Init();
    1: };
    1: __attribute__ ((visibility ("default"))) void TestFunc() {
    1:   TestStruct::Init();
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_class_bug=no
    1:                        if ! ${CXX-g++} ${CXXFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_class_bug=yes
    1:                        else
 2576:                          if test `egrep -c '@PLT|\\$stub' conftest.S` = 0; then
    1:                            ac_cv_have_visibility_class_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -rf conftest.{c,S}
    1:                        ])
    1: 
    1:         AC_CACHE_CHECK(For x86_64 gcc visibility bug with builtins (GCC bug 20297),
    1:                        ac_cv_have_visibility_builtin_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: #pragma GCC visibility push(default)
    1: #include <string.h>
    1: #pragma GCC visibility pop
    1: 
    1: __attribute__ ((visibility ("default"))) void Func() {
    1:   char c[[100]];
    1:   memset(c, 0, sizeof(c));
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_builtin_bug=no
    1:                        if ! ${CC-cc} ${CFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -O2 -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_builtin_bug=yes
    1:                        else
    1:                          if test `grep -c "@PLT" conftest.S` = 0; then
    1:                            ac_cv_visibility_builtin_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -f conftest.{c,S}
    1:                        ])
    1:         if test "$ac_cv_have_visibility_builtin_bug" = "no" -a \
    1:                 "$ac_cv_have_visibility_class_bug" = "no"; then
29557:           VISIBILITY_FLAGS='-I$(DIST)/system_wrappers_js -include $(topsrcdir)/config/gcc_hidden.h'
    1:           WRAP_SYSTEM_INCLUDES=1
    1:         else
    1:           VISIBILITY_FLAGS='-fvisibility=hidden'
    1:         fi # have visibility pragma bug
    1:       fi   # have visibility pragma
    1:     fi     # have visibility(default) attribute
    1:   fi       # have visibility(hidden) attribute
    1: fi         # GNU_CC
    1: 
18946: # visibility hidden flag for Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
18946: VISIBILITY_FLAGS='-xldscope=hidden'
18946: fi         # Sun Studio on Solaris
18946: 
    1: AC_SUBST(WRAP_SYSTEM_INCLUDES)
    1: AC_SUBST(VISIBILITY_FLAGS)
    1: 
    1: dnl Checks for header files.
    1: dnl ========================================================
    1: AC_HEADER_DIRENT
    1: case "$target_os" in
    1: freebsd*)
    1: # for stuff like -lXshm
    1:     CPPFLAGS="${CPPFLAGS} ${X_CFLAGS}"
    1:     ;;
    1: esac
    1: AC_CHECK_HEADERS(sys/byteorder.h compat.h getopt.h)
    1: AC_CHECK_HEADERS(sys/bitypes.h memory.h unistd.h)
    1: AC_CHECK_HEADERS(gnu/libc-version.h nl_types.h)
    1: AC_CHECK_HEADERS(malloc.h)
    1: AC_CHECK_HEADERS(X11/XKBlib.h)
    1: 
    1: dnl These are all the places some variant of statfs can be hiding.
    1: AC_CHECK_HEADERS(sys/statvfs.h sys/statfs.h sys/vfs.h sys/mount.h)
    1: 
    1: dnl Try for MMX support
    1: dnl NB - later gcc versions require -mmmx for this header to be successfully
    1: dnl included (or another option which implies it, such as -march=pentium-mmx)
    1: AC_CHECK_HEADERS(mmintrin.h)
    1: 
    1: dnl Check whether the compiler supports the new-style C++ standard
    1: dnl library headers (i.e. <new>) or needs the old "new.h"
    1: AC_LANG_CPLUSPLUS
    1: NEW_H=new.h
    1: AC_CHECK_HEADER(new, [NEW_H=new])
    1: AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
    1: AC_LANG_C
    1: 
 6804: AC_ARG_ENABLE(dtrace,
10431:               [  --enable-dtrace         build with dtrace support if available (default=no)],
 6804:               [enable_dtrace="yes"],)
 6804: if test "x$enable_dtrace" = "xyes"; then
 6804:   AC_CHECK_HEADER(sys/sdt.h, HAVE_DTRACE=1)
 6804:   if test -n "$HAVE_DTRACE"; then
 6804:       AC_DEFINE(INCLUDE_MOZILLA_DTRACE)
 6804:   else
 9752:       AC_MSG_ERROR([dtrace enabled but sys/sdt.h not found]);
 6804:   fi
 6804: fi
 6804: AC_SUBST(HAVE_DTRACE)
 6804: 
    1: case $target in
    1: *-aix4.3*|*-aix5*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_HEADERS(sys/cdefs.h)
    1: 	;;
    1: esac
    1: 
48637: dnl Performance measurement headers.
48637: AC_CHECK_HEADER(linux/perf_event.h, HAVE_LINUX_PERF_EVENT_H=1)
48637: AC_SUBST(HAVE_LINUX_PERF_EVENT_H)
48637: 
    1: dnl Checks for libraries.
    1: dnl ========================================================
    1: case $target in
    1: *-hpux11.*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_LIB(c_r, gethostbyname_r)
    1: 	;;
    1: esac
    1: 
    1: dnl We don't want to link with libdl even if it's present on OS X, since
    1: dnl it's not used and not part of the default installation.
32958: dnl The same goes for BeOS. OS/2 has dlfcn in libc.
    1: dnl We don't want to link against libm or libpthread on Darwin since
    1: dnl they both are just symlinks to libSystem and explicitly linking
    1: dnl against libSystem causes issues when debugging (see bug 299601).
    1: case $target in
    1: *-darwin*)
    1:     ;;
    1: *-beos*)
    1:     ;;
32958: *-os2*)
32958:     ;;
    1: *)
    1:     AC_CHECK_LIB(m, atan)
    1:     AC_CHECK_LIB(dl, dlopen,
    1:     AC_CHECK_HEADER(dlfcn.h, 
    1:         LIBS="-ldl $LIBS"
    1:         AC_DEFINE(HAVE_LIBDL)))
    1:     ;;
    1: esac
 7836: 
 7836: _SAVE_CFLAGS="$CFLAGS"
 7836: CFLAGS="$CFLAGS -D_GNU_SOURCE"
 7836: AC_CHECK_FUNCS(dladdr)
 7836: CFLAGS="$_SAVE_CFLAGS"
 7836: 
    1: if test ! "$GNU_CXX"; then
    1: 
    1:     case $target in
    1:     *-aix*)
    1: 	AC_CHECK_LIB(C_r, demangle)
    1: 	;;
    1:      *)
    1: 	AC_CHECK_LIB(C, demangle)
    1: 	;;
    1:      esac
    1: fi
32958: 
32958: dnl OS/2 has socket in libc.
32958: case $target in
32958: *-os2*)
32958:     ;;
32958: *)
    1:     AC_CHECK_LIB(socket, socket)
32958: esac
    1: 
    1: dnl ========================================================
    1: dnl = pthread support
    1: dnl = Start by checking whether the system support pthreads
    1: dnl ========================================================
    1: case "$target_os" in
    1: darwin*)
    1:     USE_PTHREADS=1
    1:     ;;
    1: *)
    1:     MOZ_CHECK_PTHREADS(pthreads,
    1:         USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthreads",
    1:         MOZ_CHECK_PTHREADS(pthread,
    1:             USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthread",
    1:             MOZ_CHECK_PTHREADS(c_r,
    1:                 USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lc_r",
    1:                 MOZ_CHECK_PTHREADS(c,
    1:                     USE_PTHREADS=1
    1:                 )
    1:             )
    1:         )
    1:     )
    1:     ;;
    1: esac
    1: 
    1: dnl ========================================================
    1: dnl Check the command line for --with-pthreads 
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(pthreads,
    1: [  --with-pthreads         Force use of system pthread library with NSPR ],
    1: [ if test "$USE_PTHREADS"x = x; then
    1:     AC_MSG_ERROR([ --with-pthreads specified for a system without pthread support ]);
    1: fi],
    1:     USE_PTHREADS=
    1:     _PTHREAD_LDFLAGS=
    1: )
    1: 
    1: dnl ========================================================
    1: dnl Do the platform specific pthread hackery
    1: dnl ========================================================
    1: if test "$USE_PTHREADS"x != x
    1: then
    1: 	dnl
    1: 	dnl See if -pthread is supported.
    1: 	dnl
    1: 	rm -f conftest*
    1: 	ac_cv_have_dash_pthread=no
    1: 	AC_MSG_CHECKING(whether ${CC-cc} accepts -pthread)
    1: 	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	${CC-cc} -pthread -o conftest conftest.c > conftest.out 2>&1
    1: 	if test $? -eq 0; then
    1: 		if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthread`" && test -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			ac_cv_have_dash_pthread=yes
    1: 	        case "$target_os" in
    1: 	        freebsd*)
    1: # Freebsd doesn't use -pthread for compiles, it uses them for linking
    1:                 ;;
    1: 	        *)
    1: 			    CFLAGS="$CFLAGS -pthread"
    1: 			    CXXFLAGS="$CXXFLAGS -pthread"
    1:                 ;;
    1: 	        esac
    1: 		fi
    1: 	fi
    1: 	rm -f conftest*
    1:     AC_MSG_RESULT($ac_cv_have_dash_pthread)
    1: 
    1: 	dnl
    1: 	dnl See if -pthreads is supported.
    1: 	dnl
    1:     ac_cv_have_dash_pthreads=no
    1:     if test "$ac_cv_have_dash_pthread" = "no"; then
    1: 	    AC_MSG_CHECKING(whether ${CC-cc} accepts -pthreads)
    1:     	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	    ${CC-cc} -pthreads -o conftest conftest.c > conftest.out 2>&1
    1:     	if test $? -eq 0; then
    1: 	    	if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthreads`" && test -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			    ac_cv_have_dash_pthreads=yes
    1: 			    CFLAGS="$CFLAGS -pthreads"
    1: 			    CXXFLAGS="$CXXFLAGS -pthreads"
    1: 		    fi
    1: 	    fi
    1: 	    rm -f conftest*
    1:     	AC_MSG_RESULT($ac_cv_have_dash_pthreads)
    1:     fi
    1: 
    1: 	case "$target" in
    1: 	    *-*-freebsd*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1: 				_PTHREAD_LDFLAGS="-pthread"
    1: 			else
    1: 				_PTHREAD_LDFLAGS="-lc_r"
    1: 			fi
    1: 			;;
    1: 
    1: 	    *-*-openbsd*|*-*-bsdi*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1:                 _PTHREAD_LDFLAGS="-pthread"
    1: 			fi
    1: 			;;
    1: 
41013: 	    *-*-linux*|*-*-kfreebsd*-gnu|*-*-gnu*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-*-nto*) 
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-aix4.3*|*-aix5*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-hpux11.*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    alpha*-*-osf*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-*-solaris*) 
    1: 			AC_DEFINE(_REENTRANT)
24783: 			if test "$SOLARIS_SUNPRO_CC"; then
    1: 				CFLAGS="$CFLAGS -mt" 
    1: 				CXXFLAGS="$CXXFLAGS -mt" 
    1: 			fi
    1: 			;;
    1: 	esac
    1:     LDFLAGS="${_PTHREAD_LDFLAGS} ${LDFLAGS}"
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl See if mmap sees writes
    1: dnl For cross compiling, just define it as no, which is a safe default
    1: dnl ========================================================
    1: AC_MSG_CHECKING(whether mmap() sees write()s)
    1: 
    1: changequote(,)
    1: mmap_test_prog='
    1:     #include <stdlib.h>
    1:     #include <unistd.h>
    1:     #include <sys/mman.h>
    1:     #include <sys/types.h>
    1:     #include <sys/stat.h>
    1:     #include <fcntl.h>
    1: 
    1:     char fname[] = "conftest.file";
    1:     char zbuff[1024]; /* Fractional page is probably worst case */
    1: 
    1:     int main() {
    1: 	char *map;
    1: 	int fd;
    1: 	int i;
    1: 	unlink(fname);
    1: 	fd = open(fname, O_RDWR | O_CREAT, 0660);
    1: 	if(fd<0) return 1;
    1: 	unlink(fname);
    1: 	write(fd, zbuff, sizeof(zbuff));
    1: 	lseek(fd, 0, SEEK_SET);
    1: 	map = (char*)mmap(0, sizeof(zbuff), PROT_READ, MAP_SHARED, fd, 0);
    1: 	if(map==(char*)-1) return 2;
    1: 	for(i=0; fname[i]; i++) {
    1: 	    int rc = write(fd, &fname[i], 1);
    1: 	    if(map[i]!=fname[i]) return 4;
    1: 	}
    1: 	return 0;
    1:     }
    1: '
    1: changequote([,])
    1: 
    1: AC_TRY_RUN($mmap_test_prog , result="yes", result="no", result="yes")
    1: 
    1: AC_MSG_RESULT("$result")
    1: 
    1: if test "$result" = "no"; then
    1:     AC_DEFINE(MMAP_MISSES_WRITES)
    1: fi
    1: 
    1: 
    1: dnl Checks for library functions.
    1: dnl ========================================================
    1: AC_PROG_GCC_TRADITIONAL
    1: AC_FUNC_MEMCMP
32550: 
32550: AC_CHECK_FUNCS([fchmod flockfile getc_unlocked _getc_nolock getpagesize \
32550:                 lchown localtime_r lstat64 memmove random rint sbrk snprintf \
32550:                 stat64 statvfs statvfs64 strerror strtok_r truncate64])
    1: 
26053: dnl Windows functions, for mingw.
26053: AC_TRY_LINK([#include <windows.h>],
26053:              [SYSTEMTIME st;FILETIME ft;SystemTimeToFileTime(&st,&ft);],
26053:              ac_cv_have_systemtimetofiletime="yes",
26053:              ac_cv_have_systemtimetofiletime="no")
26053: if test "$ac_cv_have_systemtimetofiletime" = "yes"; then
26053:     AC_DEFINE(HAVE_SYSTEMTIMETOFILETIME)
26053: fi
26053: AC_TRY_LINK([#include <windows.h>],
26053:              [FILETIME ft;GetSystemTimeAsFileTime(&ft);],
31118:              ac_cv_have_getsystemtimeasfiletime="yes",
26053:              ac_cv_have_getsystemtimeasfiletime="no")
26053: if test "$ac_cv_have_getsystemtimeasfiletime" = "yes"; then
26053:     AC_DEFINE(HAVE_GETSYSTEMTIMEASFILETIME)
26053: fi
26053: 
    1: dnl check for wcrtomb/mbrtowc
    1: dnl =======================================================================
47975: if test -z "$MACOS_DEPLOYMENT_TARGET" -o "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
    1: AC_LANG_SAVE
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(for wcrtomb,
    1:     ac_cv_have_wcrtomb,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};wcrtomb(0,'f',&ps);],
    1:                  ac_cv_have_wcrtomb="yes",
    1:                  ac_cv_have_wcrtomb="no")])
    1: if test "$ac_cv_have_wcrtomb" = "yes"; then
    1:     AC_DEFINE(HAVE_WCRTOMB)
    1: fi
    1: AC_CACHE_CHECK(for mbrtowc,
    1:     ac_cv_have_mbrtowc,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};mbrtowc(0,0,0,&ps);],
    1:                  ac_cv_have_mbrtowc="yes",
    1:                  ac_cv_have_mbrtowc="no")])
    1: if test "$ac_cv_have_mbrtowc" = "yes"; then
    1:     AC_DEFINE(HAVE_MBRTOWC)
    1: fi
    1: AC_LANG_RESTORE
    1: fi
    1: 
    1: AC_CACHE_CHECK(
    1:     [for res_ninit()],
    1:     ac_cv_func_res_ninit,
    1:     [AC_TRY_LINK([
    1:         #ifdef linux
    1:         #define _BSD_SOURCE 1
    1:         #endif
    1:         #include <resolv.h>
    1:         ],
    1:         [int foo = res_ninit(&_res);],
    1:         [ac_cv_func_res_ninit=yes],
    1:         [ac_cv_func_res_ninit=no])
    1:     ])
    1: 
    1: if test "$ac_cv_func_res_ninit" = "yes"; then
    1:     AC_DEFINE(HAVE_RES_NINIT)
    1: dnl must add the link line we do something as foolish as this... dougt
    1: dnl else
    1: dnl    AC_CHECK_LIB(bind, res_ninit, AC_DEFINE(HAVE_RES_NINIT),
    1: dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
    1: fi
    1: 
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(
    1:     [for gnu_get_libc_version()],
    1:     ac_cv_func_gnu_get_libc_version,
    1:     [AC_TRY_LINK([
    1:         #ifdef HAVE_GNU_LIBC_VERSION_H
    1:         #include <gnu/libc-version.h>
    1:         #endif
    1:         ],
    1:         [const char *glibc_version = gnu_get_libc_version();],
    1:         [ac_cv_func_gnu_get_libc_version=yes],
    1:         [ac_cv_func_gnu_get_libc_version=no] 
    1:         )]
    1:     )
    1: 
    1: if test "$ac_cv_func_gnu_get_libc_version" = "yes"; then
    1:     AC_DEFINE(HAVE_GNU_GET_LIBC_VERSION)
    1: fi
    1: 
    1: case $target_os in
35551:     os2*|msvc*|mks*|cygwin*|mingw*|darwin*|wince*|winmo*|beos*)
    1:         ;;
    1:     *)
    1:     
    1: AC_CHECK_LIB(c, iconv, [_ICONV_LIBS="$_ICONV_LIBS"],
    1:     AC_CHECK_LIB(iconv, iconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"],
    1:         AC_CHECK_LIB(iconv, libiconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"])))
    1: _SAVE_LIBS=$LIBS
    1: LIBS="$LIBS $_ICONV_LIBS"
    1: AC_CACHE_CHECK(
    1:     [for iconv()],
    1:     ac_cv_func_iconv,
    1:     [AC_TRY_LINK([
    1:         #include <stdlib.h>
    1:         #include <iconv.h>
    1:         ],
    1:         [
    1:             iconv_t h = iconv_open("", "");
    1:             iconv(h, NULL, NULL, NULL, NULL);
    1:             iconv_close(h);
    1:         ],
    1:         [ac_cv_func_iconv=yes],
    1:         [ac_cv_func_iconv=no] 
    1:         )]
    1:     )
    1: if test "$ac_cv_func_iconv" = "yes"; then
    1:     AC_DEFINE(HAVE_ICONV)
    1:     DYNAMIC_XPCOM_LIBS="$DYNAMIC_XPCOM_LIBS $_ICONV_LIBS"
    1:     LIBXUL_LIBS="$LIBXUL_LIBS $_ICONV_LIBS"
    1:     LIBICONV="$_ICONV_LIBS"
    1:     AC_CACHE_CHECK(
    1:         [for iconv() with const input],
    1:         ac_cv_func_const_iconv,
    1:         [AC_TRY_COMPILE([
    1:             #include <stdlib.h>
    1:             #include <iconv.h>
    1:             ],
    1:             [
    1:                 const char *input = "testing";
    1:                 iconv_t h = iconv_open("", "");
    1:                 iconv(h, &input, NULL, NULL, NULL);
    1:                 iconv_close(h);
    1:             ],
    1:             [ac_cv_func_const_iconv=yes],
    1:             [ac_cv_func_const_iconv=no] 
    1:             )]
    1:         )
    1:     if test "$ac_cv_func_const_iconv" = "yes"; then
    1:         AC_DEFINE(HAVE_ICONV_WITH_CONST_INPUT)
    1:     fi
    1: fi
    1: LIBS=$_SAVE_LIBS
    1: 
    1:     ;;
    1: esac
    1: 
    1: AC_LANG_C
    1: 
    1: dnl **********************
    1: dnl *** va_copy checks ***
    1: dnl **********************
    1: dnl we currently check for all three va_copy possibilities, so we get
    1: dnl all results in config.log for bug reports.
    1: AC_MSG_CHECKING(for an implementation of va_copy())
    1: AC_CACHE_VAL(ac_cv_va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_copy=yes,
    1:         ac_cv_va_copy=no,
    1:         ac_cv_va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv_va_copy)
    1: AC_MSG_CHECKING(for an implementation of __va_copy())
    1: AC_CACHE_VAL(ac_cv___va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             __va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv___va_copy=yes,
    1:         ac_cv___va_copy=no,
    1:         ac_cv___va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv___va_copy)
    1: AC_MSG_CHECKING(whether va_lists can be copied by value)
    1: AC_CACHE_VAL(ac_cv_va_val_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             args2 = args1;
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_val_copy=yes,
    1:         ac_cv_va_val_copy=no,
    1:         ac_cv_va_val_copy=yes
    1:     )
    1: ])
    1: if test "x$ac_cv_va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: elif test "x$ac_cv___va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, __va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: fi
    1: 
    1: if test "x$ac_cv_va_val_copy" = "xno"; then
    1:    AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)
    1: fi
    1: AC_MSG_RESULT($ac_cv_va_val_copy)
    1: 
    1: dnl Check for dll-challenged libc's.
    1: dnl This check is apparently only needed for Linux.
    1: case "$target" in
    1: 	*-linux*)
    1: 	    dnl ===================================================================
    1: 	    _curdir=`pwd`
    1: 	    export _curdir
    1: 	    rm -rf conftest* _conftest
    1: 	    mkdir _conftest
    1: 	    cat >> conftest.C <<\EOF
    1: #include <stdio.h>
    1: #include <link.h>
    1: #include <dlfcn.h>
    1: #ifdef _dl_loaded
    1: void __dump_link_map(void) {
    1:   struct link_map *map = _dl_loaded;
    1:   while (NULL != map) {printf("0x%08x %s\n", map->l_addr, map->l_name); map = map->l_next;}
    1: }
    1: int main() {
    1:   dlopen("./conftest1.so",RTLD_LAZY);
    1:   dlopen("./../_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/../_conftest/conftest1.so",RTLD_LAZY);
    1:   __dump_link_map();
    1: }
    1: #else
    1: /* _dl_loaded isn't defined, so this should be either a libc5 (glibc1) system, or a glibc2 system that doesn't have the multiple load bug (i.e., RH6.0).*/
    1: int main() { printf("./conftest1.so\n"); }
    1: #endif
    1: EOF
    1: 
    1: 	    $PERL -p -i -e "s/CURDIR/\$ENV{_curdir}/g;" conftest.C
    1: 
    1: 	    cat >> conftest1.C <<\EOF
    1: #include <stdio.h>
    1: void foo(void) {printf("foo in dll called\n");}
    1: EOF
    1: 	    ${CXX-g++} -fPIC -c -g conftest1.C
    1: 	    ${CXX-g++} -shared -Wl,-h -Wl,conftest1.so -o conftest1.so conftest1.o
    1: 	    ${CXX-g++} -g conftest.C -o conftest -ldl
    1: 	    cp -f conftest1.so conftest _conftest
    1: 	    cd _conftest
    1: 	    if test `./conftest | grep conftest1.so | wc -l` -gt 1
    1: 	    then
    1: 		echo
    1: 		echo "*** Your libc has a bug that can result in loading the same dynamic"
    1: 		echo "*** library multiple times.  This bug is known to be fixed in glibc-2.0.7-32"
    1: 		echo "*** or later.  However, if you choose not to upgrade, the only effect"
    1: 		echo "*** will be excessive memory usage at runtime."
    1: 		echo
    1: 	    fi
    1: 	    cd ${_curdir}
    1: 	    rm -rf conftest* _conftest
    1: 	    dnl ===================================================================
    1: 	    ;;
    1: esac
    1: 
    1: dnl ===================================================================
    1: dnl ========================================================
    1: dnl Put your C++ language/feature checks below
    1: dnl ========================================================
    1: AC_LANG_CPLUSPLUS
    1: 
40165: ARM_ABI_PREFIX=
    1: HAVE_GCC3_ABI=
    1: if test "$GNU_CC"; then
40165:   if test "$CPU_ARCH" = "arm" ; then
40165:     AC_CACHE_CHECK(for ARM EABI,
40165:         ac_cv_gcc_arm_eabi,
40165:         [AC_TRY_COMPILE([],
40165:                         [
40165: #if defined(__ARM_EABI__)
40165:   return 0;
40165: #else
40165: #error Not ARM EABI.
40165: #endif
40165:                         ],
40165:                         ac_cv_gcc_arm_eabi="yes",
40165:                         ac_cv_gcc_arm_eabi="no")])
40165:     if test "$ac_cv_gcc_arm_eabi" = "yes"; then
40165:         ARM_ABI_PREFIX=eabi-
40165:     else
40165:         ARM_ABI_PREFIX=oabi-
40165:     fi
40165:   fi
40165: 
    1:   AC_CACHE_CHECK(for gcc 3.0 ABI,
    1:       ac_cv_gcc_three_abi,
    1:       [AC_TRY_COMPILE([],
    1:                       [
    1: #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100 /* G++ V3 ABI */
    1:   return 0;
    1: #else
    1: #error Not gcc3.
    1: #endif
    1:                       ],
    1:                       ac_cv_gcc_three_abi="yes",
    1:                       ac_cv_gcc_three_abi="no")])
    1:   if test "$ac_cv_gcc_three_abi" = "yes"; then
40165:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-${ARM_ABI_PREFIX}gcc3}"
    1:       HAVE_GCC3_ABI=1
    1:   else
40165:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-${ARM_ABI_PREFIX}gcc2}"
    1:   fi
    1: fi
    1: AC_SUBST(HAVE_GCC3_ABI)
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ \"explicit\" keyword,
    1:                ac_cv_cpp_explicit,
    1:                [AC_TRY_COMPILE(class X {
    1:                                public: explicit X(int i) : i_(i) {}
    1:                                private: int i_;
    1:                                };,
    1:                                X x(3);,
    1:                                ac_cv_cpp_explicit=yes,
    1:                                ac_cv_cpp_explicit=no)])
    1: if test "$ac_cv_cpp_explicit" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_EXPLICIT)
    1: fi
    1: 
    1: AC_CACHE_CHECK(for C++ \"typename\" keyword,
    1:                ac_cv_cpp_typename,
    1:                [AC_TRY_COMPILE(class param {
    1:                                public:
    1:                                    typedef unsigned long num_type;
    1:                                };
    1: 
    1:                                template <class T> class tplt {
    1:                                public:
    1:                                    typedef typename T::num_type t_num_type;
    1:                                    t_num_type foo(typename T::num_type num) {
    1:                                        return num;
    1:                                    }
    1:                                };,
    1:                                tplt<param> A;
    1:                                A.foo(0);,
    1:                                ac_cv_cpp_typename=yes,
    1:                                ac_cv_cpp_typename=no)])
    1: if test "$ac_cv_cpp_typename" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_TYPENAME)
    1: fi
    1: 
    1: dnl Check for support of modern template specialization syntax
    1: dnl Test code and requirement from scc@netscape.com.
    1: dnl Autoconf cut-and-paste job by waterson@netscape.com
    1: AC_CACHE_CHECK(for modern C++ template specialization syntax support,
    1:                ac_cv_cpp_modern_specialize_template_syntax,
    1:                [AC_TRY_COMPILE(template <class T> struct X { int a; };
    1:                                class Y {};
    1:                                template <> struct X<Y> { double a; };,
    1:                                X<int> int_x;
    1:                                X<Y> y_x;,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=yes,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=no)])
    1: if test "$ac_cv_cpp_modern_specialize_template_syntax" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX)
    1: fi
    1: 
    1: 
    1: dnl Some compilers support only full specialization, and some don't.
    1: AC_CACHE_CHECK(whether partial template specialization works,
    1:                ac_cv_cpp_partial_specialization,
    1:                [AC_TRY_COMPILE(template <class T> class Foo {};
    1:                                template <class T> class Foo<T*> {};,
    1:                                return 0;,
    1:                                ac_cv_cpp_partial_specialization=yes,
    1:                                ac_cv_cpp_partial_specialization=no)])
    1: if test "$ac_cv_cpp_partial_specialization" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_PARTIAL_SPECIALIZATION)
    1: fi
    1: 
    1: dnl Some compilers have limited support for operators with templates;
    1: dnl specifically, it is necessary to define derived operators when a base
    1: dnl class's operator declaration should suffice.
    1: AC_CACHE_CHECK(whether operators must be re-defined for templates derived from templates,
    1:                ac_cv_need_derived_template_operators,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T>
    1:                                 Base<T> operator+(const Base<T>& lhs, const Base<T>& rhs) { return lhs; }
    1:                                 template <class T> class Derived : public Base<T> { };],
    1:                                [Derived<char> a, b;
    1:                                 Base<char> c = a + b;
    1:                                 return 0;],
    1:                                ac_cv_need_derived_template_operators=no,
    1:                                ac_cv_need_derived_template_operators=yes)])
    1: if test "$ac_cv_need_derived_template_operators" = yes ; then
    1:   AC_DEFINE(NEED_CPP_DERIVED_TEMPLATE_OPERATORS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble detecting that a template class
    1: dnl that derives from another template is actually an instance
    1: dnl of the base class. This test checks for that.
    1: AC_CACHE_CHECK(whether we need to cast a derived template to pass as its base class,
    1:                ac_cv_need_cpp_template_cast_to_base,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T> class Derived : public Base<T> { };
    1:                                 template <class T> int foo(const Base<T>&) { return 0; }],
    1:                                [Derived<char> bar; return foo(bar);],
    1:                                ac_cv_need_cpp_template_cast_to_base=no,
    1:                                ac_cv_need_cpp_template_cast_to_base=yes)])
    1: if test "$ac_cv_need_cpp_template_cast_to_base" = yes ; then
    1:   AC_DEFINE(NEED_CPP_TEMPLATE_CAST_TO_BASE)
    1: fi
    1: 
    1: dnl Some compilers have trouble resolving the ambiguity between two
    1: dnl functions whose arguments differ only by cv-qualifications.
    1: AC_CACHE_CHECK(whether the compiler can resolve const ambiguities for templates,
    1:                ac_cv_can_resolve_const_ambiguity,
    1:                [AC_TRY_COMPILE([
    1:                                 template <class T> class ptrClass {
    1:                                   public: T* ptr;
    1:                                 };
    1: 
    1:                                 template <class T> T* a(ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1: 
    1:                                 template <class T>
    1:                                 const T* a(const ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1:                                ],
    1:                                [ ptrClass<int> i;
    1:                                  a(&i); ],
    1:                                ac_cv_can_resolve_const_ambiguity=yes,
    1:                                ac_cv_can_resolve_const_ambiguity=no)])
    1: if test "$ac_cv_can_resolve_const_ambiguity" = no ; then
    1:   AC_DEFINE(CANT_RESOLVE_CPP_CONST_AMBIGUITY)
    1: fi
    1: 
    1: dnl
    1: dnl We don't do exceptions on unix.  The only reason this used to be here
    1: dnl is that mozilla/xpcom/tests/TestCOMPtr.cpp has a test which uses 
    1: dnl exceptions.  But, we turn exceptions off by default and this test breaks.
    1: dnl So im commenting this out until someone writes some artificial 
    1: dnl intelligence to detect not only if the compiler has exceptions, but if 
    1: dnl they are enabled as well.
    1: dnl 
    1: dnl AC_CACHE_CHECK(for C++ \"exceptions\",
    1: dnl                ac_cv_cpp_exceptions,
    1: dnl                [AC_TRY_COMPILE(class X { public: X() {} };
    1: dnl                                static void F() { throw X(); },
    1: dnl                                try { F(); } catch(X & e) { },
    1: dnl                                ac_cv_cpp_exceptions=yes,
    1: dnl                                ac_cv_cpp_exceptions=no)])
    1: dnl if test $ac_cv_cpp_exceptions = yes ; then
    1: dnl    AC_DEFINE(HAVE_CPP_EXCEPTIONS)
    1: dnl fi
    1: 
    1: dnl Some compilers have marginal |using| support; for example, gcc-2.7.2.3
    1: dnl supports it well enough to allow us to use it to change access, but not
    1: dnl to resolve ambiguity. The next two tests determine how well the |using|
    1: dnl keyword is supported.
    1: dnl
    1: dnl Check to see if we can change access with |using|.  Test both a
    1: dnl legal and an illegal example.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword can change access,
    1:                ac_cv_cpp_access_changing_using2,
    1:                [AC_TRY_COMPILE(
    1:                    class A { protected: int foo() { return 0; } };
    1:                    class B : public A { public: using A::foo; };,
    1:                    B b; return b.foo();,
    1:                    [AC_TRY_COMPILE(
    1:                        class A { public: int foo() { return 1; } };
    1:                        class B : public A { private: using A::foo; };,
    1:                        B b; return b.foo();,
    1:                        ac_cv_cpp_access_changing_using2=no,
    1:                        ac_cv_cpp_access_changing_using2=yes)],
    1:                    ac_cv_cpp_access_changing_using2=no)])
    1: if test "$ac_cv_cpp_access_changing_using2" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_ACCESS_CHANGING_USING)
    1: fi
    1: 
    1: dnl Check to see if we can resolve ambiguity with |using|.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword resolves ambiguity,
    1:                ac_cv_cpp_ambiguity_resolving_using,
    1:                [AC_TRY_COMPILE(class X { 
    1:                                  public: int go(const X&) {return 3;}
    1:                                          int jo(const X&) {return 3;}
    1:                                };
    1:                                class Y : public X {
    1:                                  public:  int go(int) {return 2;}
    1:                                           int jo(int) {return 2;}
    1:                                           using X::jo;
    1:                                  private: using X::go;
    1:                                };,
    1:                                X x; Y y; y.jo(x);,
    1:                                ac_cv_cpp_ambiguity_resolving_using=yes,
    1:                                ac_cv_cpp_ambiguity_resolving_using=no)])
    1: if test "$ac_cv_cpp_ambiguity_resolving_using" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_AMBIGUITY_RESOLVING_USING)
    1: fi
    1: 
    1: dnl Check to see if the |std| namespace is supported. If so, we'll want
    1: dnl to qualify any standard library calls with "std::" to ensure that
    1: dnl those functions can be resolved.
    1: AC_CACHE_CHECK(for \"std::\" namespace,
    1:                ac_cv_cpp_namespace_std,
    1:                [AC_TRY_COMPILE([#include <algorithm>],
    1:                                [return std::min(0, 1);],
    1:                                ac_cv_cpp_namespace_std=yes,
    1:                                ac_cv_cpp_namespace_std=no)])
    1: if test "$ac_cv_cpp_namespace_std" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NAMESPACE_STD)
    1: fi
    1: 
    1: dnl Older compilers are overly ambitious with respect to using the standard
    1: dnl template library's |operator!=()| when |operator==()| is defined. In
    1: dnl which case, defining |operator!=()| in addition to |operator==()| causes
    1: dnl ambiguity at compile-time. This test checks for that case.
    1: AC_CACHE_CHECK(whether standard template operator!=() is ambiguous,
    1:                ac_cv_cpp_unambiguous_std_notequal,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 struct T1 {};
    1:                                 int operator==(const T1&, const T1&) { return 0; }
    1:                                 int operator!=(const T1&, const T1&) { return 0; }],
    1:                                [T1 a,b; return a != b;],
    1:                                ac_cv_cpp_unambiguous_std_notequal=unambiguous,
    1:                                ac_cv_cpp_unambiguous_std_notequal=ambiguous)])
    1: if test "$ac_cv_cpp_unambiguous_std_notequal" = unambiguous ; then
    1:   AC_DEFINE(HAVE_CPP_UNAMBIGUOUS_STD_NOTEQUAL)
    1: fi
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ reinterpret_cast,
    1:                ac_cv_cpp_reinterpret_cast,
    1:                [AC_TRY_COMPILE(struct X { int i; };
    1:                                struct Y { int i; };,
    1:                                X x; X*const z = &x;Y*y = reinterpret_cast<Y*>(z);,
    1:                                ac_cv_cpp_reinterpret_cast=yes,
    1:                                ac_cv_cpp_reinterpret_cast=no)])
    1: if test "$ac_cv_cpp_reinterpret_cast" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NEW_CASTS)
    1: fi
    1: 
    1: dnl See if a dynamic_cast to void* gives the most derived object.
    1: AC_CACHE_CHECK(for C++ dynamic_cast to void*,
    1:                ac_cv_cpp_dynamic_cast_void_ptr,
    1:                [AC_TRY_RUN([class X { int i; public: virtual ~X() { } };
    1:                             class Y { int j; public: virtual ~Y() { } };
    1:                             class Z : public X, public Y { int k; };
    1: 
    1:                             int main() {
    1:                                  Z mdo;
    1:                                  X *subx = (X*)&mdo;
    1:                                  Y *suby = (Y*)&mdo;
    1:                                  return !((((void*)&mdo != (void*)subx) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(subx))) ||
    1:                                           (((void*)&mdo != (void*)suby) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(suby))));
    1:                             }],
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=yes,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no)])
    1: if test "$ac_cv_cpp_dynamic_cast_void_ptr" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR)
    1: fi
    1: 
    1: 
    1: dnl note that this one is reversed - if the test fails, then
    1: dnl we require implementations of unused virtual methods. Which
    1: dnl really blows because it means we'll have useless vtable
    1: dnl bloat.
    1: AC_CACHE_CHECK(whether C++ requires implementation of unused virtual methods,
    1:                ac_cv_cpp_unused_required,
    1:                [AC_TRY_LINK(class X {private: virtual void never_called();};,
    1:                                X x;,
    1:                                ac_cv_cpp_unused_required=no,
    1:                                ac_cv_cpp_unused_required=yes)])
    1: if test "$ac_cv_cpp_unused_required" = yes ; then
    1:    AC_DEFINE(NEED_CPP_UNUSED_IMPLEMENTATIONS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble comparing a constant reference to a templatized
    1: dnl class to zero, and require an explicit operator==() to be defined that takes
    1: dnl an int. This test separates the strong from the weak.
    1: 
    1: AC_CACHE_CHECK(for trouble comparing to zero near std::operator!=(),
    1:                ac_cv_trouble_comparing_to_zero,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 template <class T> class Foo {};
    1:                                 class T2;
    1:                                 template <class T> int operator==(const T2*, const T&) { return 0; }
    1:                                 template <class T> int operator!=(const T2*, const T&) { return 0; }],
    1:                                [Foo<int> f; return (0 != f);],
    1:                                ac_cv_trouble_comparing_to_zero=no,
    1:                                ac_cv_trouble_comparing_to_zero=yes)])
    1: if test "$ac_cv_trouble_comparing_to_zero" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_TROUBLE_COMPARING_TO_ZERO)
    1: fi
    1: 
    1: 
    1: 
    1: dnl End of C++ language/feature checks
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =  Internationalization checks
    1: dnl ========================================================
    1: dnl
    1: dnl Internationalization and Locale support is different
    1: dnl on various UNIX platforms.  Checks for specific i18n
    1: dnl features go here.
    1: 
    1: dnl check for LC_MESSAGES
    1: AC_CACHE_CHECK(for LC_MESSAGES,
    1: 		ac_cv_i18n_lc_messages,
    1: 		[AC_TRY_COMPILE([#include <locale.h>],
    1: 				[int category = LC_MESSAGES;],
    1: 				ac_cv_i18n_lc_messages=yes,
    1: 				ac_cv_i18n_lc_messages=no)])
    1: if test "$ac_cv_i18n_lc_messages" = yes; then
    1:    AC_DEFINE(HAVE_I18N_LC_MESSAGES)
    1: fi 	
    1: 
    1: fi # SKIP_COMPILER_CHECKS
    1: 
    1: TARGET_XPCOM_ABI=
    1: if test -n "${CPU_ARCH}" -a -n "${TARGET_COMPILER_ABI}"; then
    1:     TARGET_XPCOM_ABI="${CPU_ARCH}-${TARGET_COMPILER_ABI}"
    1: fi
    1: 
    1: dnl Mozilla specific options
    1: dnl ========================================================
    1: dnl The macros used for command line options
    1: dnl are defined in build/autoconf/altoptions.m4.
    1: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Check for external package dependencies
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(External Packages)
    1: 
    1: dnl ========================================================
21062: dnl = Find the right NSPR to use.
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(system-nspr,
21062: [  --with-system-nspr      Use an NSPR that is already built and installed.
21062:                           Use the 'nspr-config' script in the current path,
21062:                           or look for the script in the directories given with
31120:                           --with-nspr-exec-prefix or --with-nspr-prefix.
31120:                           (Those flags are only checked if you specify
31120:                           --with-system-nspr.)],
    1:     _USE_SYSTEM_NSPR=1 )
    1: 
21062: MOZ_ARG_WITH_STRING(nspr-cflags,
43058: [  --with-nspr-cflags=FLAGS
43058:                           Pass FLAGS to CC when building code that uses NSPR.
21062:                           Use this when there's no accurate nspr-config
21062:                           script available.  This is the case when building
21062:                           SpiderMonkey as part of the Mozilla tree: the
21062:                           top-level configure script computes NSPR flags
21062:                           that accomodate the quirks of that environment.],
21062:     NSPR_CFLAGS=$withval)
21062: MOZ_ARG_WITH_STRING(nspr-libs,
21062: [  --with-nspr-libs=LIBS   Pass LIBS to LD when linking code that uses NSPR.
21062:                           See --with-nspr-cflags for more details.],
21062:     NSPR_LIBS=$withval)
21062: AC_SUBST(NSPR_CFLAGS)
21062: AC_SUBST(NSPR_LIBS)
21062: 
21062: dnl Pass either --with-system-nspr or (--with-nspr-cflags and
21062: dnl --with-nspr-libs), but not both.
47975: if test "$_USE_SYSTEM_NSPR" && (test "$NSPR_CFLAGS" -o "$NSPR_LIBS"); then
21062:     AC_MSG_ERROR([--with-system-nspr and --with-nspr-libs/cflags are mutually exclusive.
21062: See 'configure --help'.])
21062: fi
21062: 
    1: if test -n "$_USE_SYSTEM_NSPR"; then
21062:     MOZ_NATIVE_NSPR=
21062:     AM_PATH_NSPR(4.7.0, [MOZ_NATIVE_NSPR=1])
21062:     if test -z "$MOZ_NATIVE_NSPR"; then
21062:         AC_MSG_ERROR([--with-system-nspr given, but configure could not find a suitable NSPR.
21062: Pass --with-nspr-exec-prefix, --with-nspr-prefix, or --with-nspr-cflags/libs.
21062: See 'configure --help'.])
21062:     fi
    1: fi
    1: 
 2496: if test -n "$MOZ_NATIVE_NSPR"; then
 2496:     _SAVE_CFLAGS=$CFLAGS
 2496:     CFLAGS="$CFLAGS $NSPR_CFLAGS"
 2496:     AC_TRY_COMPILE([#include "prlog.h"],
 2496:                 [#ifndef PR_STATIC_ASSERT
 2496:                  #error PR_STATIC_ASSERT not defined
 2496:                  #endif],
 2496:                 [MOZ_NATIVE_NSPR=1],
 2496:                 AC_MSG_ERROR([system NSPR does not support PR_STATIC_ASSERT]))
 2496:     CFLAGS=$_SAVE_CFLAGS
21062: fi
    1: 
    1: dnl ========================================================
15258: dnl Use ARM userspace kernel helpers; tell NSPR to enable
15258: dnl their usage and use them in spidermonkey.
15258: dnl ========================================================
15258: MOZ_ARG_WITH_BOOL(arm-kuser,
15258: [  --with-arm-kuser        Use kuser helpers (Linux/ARM only -- requires kernel 2.6.13 or later)],
15258:     USE_ARM_KUSER=1,
15258:     USE_ARM_KUSER=)
15258: if test -n "$USE_ARM_KUSER"; then
15258:    AC_DEFINE(USE_ARM_KUSER)
15258: fi
15258: 
15258: dnl ========================================================
    1: dnl =
    1: dnl = Application
    1: dnl =
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_HEADER(Application)
    1: 
    1: BUILD_STATIC_LIBS=
    1: ENABLE_TESTS=1
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Components & Features
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Components and Features)
    1: 
    1: dnl ========================================================
42805: 
42805: dnl ========================================================
42805: dnl = Enable building the Thumb2 instruction set
42805: dnl ========================================================
42805: MOZ_ARG_ENABLE_BOOL(thumb2,
42805:  [  --enable-thumb2         Enable Thumb2 instruction set],
42805:     MOZ_THUMB2=1,)
42805: 
42805: if test -n "$MOZ_THUMB2"; then
42805:   case "$target_cpu" in
42805:     arm*)
42805:       if test "$GNU_CC"; then
42805:         CFLAGS="$CFLAGS -march=armv7-a -mthumb -Wa, -march=armv7-a -Wa, -mthumb"
42805:         CXXFLAGS="$CXXFLAGS -march=armv7-a -mthumb -Wa, -march=armv7-a -Wa, -mthumb"
42805:         ASFLAGS="$ASFLAGS -march=armv7-a -mthumb"
42805:       else
42805:         AC_MSG_ERROR([--enable-thumb2 is not supported for non-GNU toolchains])
42805:       fi
42805:     ;;
42805:     *)
42805:       AC_MSG_ERROR([--enable-thumb2 is not supported for non-ARM CPU architectures])
42805:     ;;
42805:   esac
42805: fi
42805: 
42805: dnl ========================================================
    1: dnl = Localization
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(ui-locale,
    1: [  --enable-ui-locale=ab-CD
    1:                           Select the user interface locale (default: en-US)],
    1:     MOZ_UI_LOCALE=$enableval )
    1: AC_SUBST(MOZ_UI_LOCALE)
    1: 
    1: dnl ========================================================
    1: dnl build the tests by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(tests,
    1: [  --disable-tests         Do not build test libraries & programs],
    1:     ENABLE_TESTS=,
    1:     ENABLE_TESTS=1 )
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Module specific options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Individual module options)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Debugging Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Debugging and Optimizations)
    1: 
    1: dnl ========================================================
    1: dnl = Disable building with debug info.
    1: dnl = Debugging is OFF by default
    1: dnl ========================================================
    1: if test -z "$MOZ_DEBUG_FLAGS"
    1: then
    1:     case "$target" in
    1:     *-irix*)
    1:         if test "$GNU_CC"; then
    1:             GCC_VERSION=`$CC -v 2>&1 | awk '/version/ { print $3 }'`
    1:             case "$GCC_VERSION" in
    1:             2.95.*)
    1:                 MOZ_DEBUG_FLAGS=""
    1:                 ;;
    1:             *)
    1:                 MOZ_DEBUG_FLAGS="-g"
    1:                 ;;
    1:             esac
    1:         else
    1:             MOZ_DEBUG_FLAGS="-g"
    1:         fi
    1:         ;;
    1:     *)
    1:     	MOZ_DEBUG_FLAGS="-g"
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(debug,
    1: [  --enable-debug[=DBG]    Enable building with developer debug info
    1:                           (Using compiler flags DBG)],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_DEBUG=1
39277:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:         _MOZ_DEBUG_FLAGS_SET=1
    1:     fi
    1:   else
    1:     MOZ_DEBUG=
    1:   fi ],
    1:   MOZ_DEBUG=)
    1: 
43751: MOZ_DEBUG_ENABLE_DEFS="-DDEBUG -D_DEBUG -DTRACING"
43767: MOZ_ARG_WITH_STRING(debug-label,
43767: [  --with-debug-label=LABELS
43767:                            Enabled the use of DEBUG_label ifdefs
43767:                            (comma separated)],
43767: [ for option in `echo $withval | sed 's/,/ /g'`; do
43767:     MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_${option}"
43767: done])
43767: 
    1: 
    1: MOZ_DEBUG_DISABLE_DEFS="-DNDEBUG -DTRIMMED"
    1: 
    1: if test -n "$MOZ_DEBUG"; then
    1:     AC_MSG_CHECKING([for valid debug flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_DEBUG_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_DEBUG_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Enable code optimization. ON by default.
    1: dnl ========================================================
    1: if test -z "$MOZ_OPTIMIZE_FLAGS"; then
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(optimize,
    1: [  --disable-optimize      Disable compiler optimization
    1:   --enable-optimize=[OPT] Specify compiler optimization flags [OPT=-O]],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_OPTIMIZE=1
47975:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_OPTIMIZE_FLAGS=`echo "$enableval" | sed -e 's|\\\ | |g'`
    1:         MOZ_OPTIMIZE=2
    1:     fi
    1: else
    1:     MOZ_OPTIMIZE=
    1: fi ], MOZ_OPTIMIZE=1)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test -n "$MOZ_OPTIMIZE"; then
    1:     AC_MSG_CHECKING([for valid optimization flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_OPTIMIZE_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_OPTIMIZE_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MOZ_OPTIMIZE)
    1: AC_SUBST(MOZ_OPTIMIZE_FLAGS)
    1: AC_SUBST(MOZ_OPTIMIZE_LDFLAGS)
13134: AC_SUBST(MOZ_OPTIMIZE_SIZE_TWEAK)
    1: 
    1: dnl ========================================================
39277: dnl = (Deprecated) generation of debugger info for specific modules
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(debugger-info-modules,
    1: [  --enable-debugger-info-modules
    1:                           Enable/disable debugger info for specific modules],
39277: [ if test "$enableval" != "no"; then
39277:     AC_MSG_WARN([--enable-debugger-info-modules is deprecated, use --enable-debug-symbols instead])
39277:     MOZ_DEBUG_SYMBOLS=1
39277:   fi ])
39277: 
39277: dnl ========================================================
39277: dnl = Enable generation of debug symbols
39277: dnl ========================================================
39277: MOZ_ARG_ENABLE_STRING(debug-symbols,
43058: [  --enable-debug-symbols[=DBG]
43058:                           Enable debugging symbols (using compiler flags DBG)],
39277: [ if test "$enableval" != "no"; then
39277:       MOZ_DEBUG_SYMBOLS=1
39277:       if test -n "$enableval" -a "$enableval" != "yes"; then
39277:           if test -z "$_MOZ_DEBUG_FLAGS_SET"; then
39277:               MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:           else
39277:               AC_MSG_ERROR([--enable-debug-symbols flags cannot be used with --enable-debug flags])
39277:           fi
39277:       fi
39277:   fi ])
39277: 
39277: if test -n "$MOZ_DEBUG" -o -n "$MOZ_DEBUG_SYMBOLS"; then
39277:     AC_DEFINE(MOZ_DEBUG_SYMBOLS)
39277:     export MOZ_DEBUG_SYMBOLS
39277: fi
    1: 
    1: dnl ========================================================
11612: dnl = Enable trace malloc
11612: dnl ========================================================
11612: NS_TRACE_MALLOC=${MOZ_TRACE_MALLOC}
11612: MOZ_ARG_ENABLE_BOOL(trace-malloc,
11612: [  --enable-trace-malloc   Enable malloc tracing],
11612:     NS_TRACE_MALLOC=1,
11612:     NS_TRACE_MALLOC= )
11612: if test "$NS_TRACE_MALLOC"; then
11612:   # Please, Mr. Linker Man, don't take away our symbol names
11612:   MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
11612:   AC_DEFINE(NS_TRACE_MALLOC)
11612: fi
11612: AC_SUBST(NS_TRACE_MALLOC)
11612: 
11612: dnl ========================================================
11612: dnl = Enable jemalloc
11227: dnl ========================================================
11227: MOZ_ARG_ENABLE_BOOL(jemalloc,
11227: [  --enable-jemalloc       Replace memory allocator with jemalloc],
11227:     MOZ_MEMORY=1,
11227:     MOZ_MEMORY=)
11612: 
11612: if test "$NS_TRACE_MALLOC"; then
11612:     MOZ_MEMORY=
11612: fi
11612: 
11227: if test "$MOZ_MEMORY"; then
11227: 
11227:   dnl Don't try to run compiler tests on Windows  
11227:   if test "$OS_ARCH" = "WINNT"; then
11227:     if test -z "$HAVE_64BIT_OS"; then
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:     else
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:     fi
11227:   else
11227:     AC_CHECK_SIZEOF([int *], [4])
11227:     case "${ac_cv_sizeof_int_p}" in
11227:     4)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:       ;;
11227:     8)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:       ;;
11227:     *)
11227:       AC_MSG_ERROR([Unexpected pointer size])
11227:       ;;
11227:     esac
11227:   fi
11227: 
11227:   AC_DEFINE(MOZ_MEMORY)
11227:   if test "x$MOZ_DEBUG" = "x1"; then
11227:     AC_DEFINE(MOZ_MEMORY_DEBUG)
11227:   fi
11227:   dnl The generic feature tests that determine how to compute ncpus are long and
11227:   dnl complicated.  Therefore, simply define special cpp variables for the
11227:   dnl platforms we have special knowledge of.
42803:   case "${target}" in
42803:   *-darwin*)
11227:     AC_DEFINE(MOZ_MEMORY_DARWIN)
11227:     ;;
42803:   *-*freebsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
42803:   *-*linux*)
11227:     AC_DEFINE(MOZ_MEMORY_LINUX)
11227:     ;;
42803:   *-netbsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
42803:   *-solaris*)
11227:     AC_DEFINE(MOZ_MEMORY_SOLARIS)
11227:     ;;
42803:   *-msvc*|*-mks*|*-cygwin*|*-mingw*)
11227:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
27523:     # the interesting bits will get passed down in MOZ_MEMORY_LDFLAGS
11227:     ;;
42803:   *-*wince|*-*winmo)
26487:     AC_DEFINE(MOZ_MEMORY_WINCE)
26487:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
26487:     ;;
42803:   *-android*)
42803:     AC_DEFINE(MOZ_MEMORY_LINUX)
42803:     AC_DEFINE(MOZ_MEMORY_ANDROID)
42803:     ;;
11227:   *)
11227:     AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
11227:     ;;
11227:   esac
11227: fi
11227: AC_SUBST(MOZ_MEMORY)
27523: AC_SUBST(MOZ_MEMORY_LDFLAGS)
11227: 
11227: dnl ========================================================
    1: dnl = Use malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(wrap-malloc,
    1: [  --enable-wrap-malloc    Wrap malloc calls (gnu linker only)],
    1:     _WRAP_MALLOC=1,
    1:     _WRAP_MALLOC= )
    1: 
    1: if test -n "$_WRAP_MALLOC"; then
    1:     if test "$GNU_CC"; then
43127:     WRAP_MALLOC_CFLAGS="${LDFLAGS} -Wl,--wrap -Wl,malloc -Wl,--wrap -Wl,calloc -Wl,--wrap -Wl,valloc -Wl,--wrap -Wl,free -Wl,--wrap -Wl,realloc -Wl,--wrap -Wl,memalign -Wl,--wrap -Wl,__builtin_new -Wl,--wrap -Wl,__builtin_vec_new -Wl,--wrap -Wl,__builtin_delete -Wl,--wrap -Wl,__builtin_vec_delete -Wl,--wrap -Wl,PR_Free -Wl,--wrap -Wl,PR_Malloc -Wl,--wrap -Wl,PR_Calloc -Wl,--wrap -Wl,PR_Realloc -Wl,--wrap -Wl,strdup -Wl,--wrap -Wl,strndup -Wl,--wrap -Wl,posix_memalign"
42803:     MKSHLIB='$(CXX) $(DSO_LDOPTS) $(WRAP_MALLOC_CFLAGS) $(WRAP_MALLOC_LIB) -o $@'
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Location of malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(wrap-malloc,
    1: [  --with-wrap-malloc=DIR  Location of malloc wrapper library],
    1:     WRAP_MALLOC_LIB=$withval)
    1: 
    1: dnl ========================================================
40442: dnl = Build jsctypes if it's enabled
40442: dnl ========================================================
40442: MOZ_ARG_ENABLE_BOOL(ctypes,
40442: [  --enable-ctypes         Enable js-ctypes (default=no)],
40442:     JS_HAS_CTYPES=1,
40442:     JS_HAS_CTYPES= )
40442: AC_SUBST(JS_HAS_CTYPES)
40442: if test "$JS_HAS_CTYPES"; then
47975:   if test "$_MSC_VER" -a -z $AS; then
40442:     # Error out if we're on MSVC and MASM is unavailable.
40442:     AC_MSG_ERROR([No suitable assembler found. An assembler is required to build js-ctypes. If you are building with MS Visual Studio 8 Express, you may download the MASM 8.0 package, upgrade to Visual Studio 9 Express, or install the Vista SDK.])
40442:   fi
40442:   AC_DEFINE(JS_HAS_CTYPES)
40442: fi
40442: 
40442: dnl ========================================================
50455: dnl = Use JS Call tracing
50455: dnl ========================================================
50455: MOZ_ARG_ENABLE_BOOL(trace-jscalls,
50455: [  --enable-trace-jscalls  Enable JS call enter/exit callback (default=no)],
50455:     MOZ_TRACE_JSCALLS=1,
50455:     MOZ_TRACE_JSCALLS= )
50455: if test -n "$MOZ_TRACE_JSCALLS"; then
50455:     AC_DEFINE(MOZ_TRACE_JSCALLS)
50455: fi
50455: 
50455: dnl ========================================================
29368: dnl = Use TraceVis
29368: dnl ========================================================
29368: MOZ_ARG_ENABLE_BOOL(tracevis,
29368: [  --enable-tracevis       Enable TraceVis tracing tool (default=no)],
29368:     MOZ_TRACEVIS=1,
29368:     MOZ_TRACEVIS= )
29368: if test -n "$MOZ_TRACEVIS"; then
29368:     AC_DEFINE(MOZ_TRACEVIS)
38548:     if test -z "$ENABLE_TRACEJIT"; then
38548:        AC_MSG_ERROR([--enable-tracevis is incompatible with --disable-tracejit])
29368:     fi
29371: fi
29371: 
40373: dnl ========================================================
40373: dnl = Use GCTimer
40373: dnl ========================================================
40373: MOZ_ARG_ENABLE_BOOL(gctimer,
40373: [  --enable-gctimer        Enable GC timer (default=no)],
40373:     MOZ_GCTIMER=1,
40373:     MOZ_GCTIMER= )
40373: if test -n "$MOZ_GCTIMER"; then
40373:     AC_DEFINE(MOZ_GCTIMER)
40373: fi
29368: 
29368: dnl ========================================================
25902: dnl = Use Valgrind
25902: dnl ========================================================
25902: MOZ_ARG_ENABLE_BOOL(valgrind,
25902: [  --enable-valgrind       Enable Valgrind integration hooks (default=no)],
25902:     MOZ_VALGRIND=1,
25902:     MOZ_VALGRIND= )
25902: if test -n "$MOZ_VALGRIND"; then
25902:     AC_CHECK_HEADER([valgrind/valgrind.h], [],
25902:         AC_MSG_ERROR(
25902:             [--enable-valgrind specified but Valgrind is not installed]))
25902:     AC_DEFINE(MOZ_VALGRIND)
25902: fi
25902: 
25902: dnl ========================================================
    1: dnl jprof
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(jprof,
    1: [  --enable-jprof          Enable jprof profiling tool (needs mozilla/tools/jprof)],
    1:     MOZ_JPROF=1,
    1:     MOZ_JPROF= )
    1: if test -n "$MOZ_JPROF"; then
    1:     AC_DEFINE(MOZ_JPROF)
    1: fi
    1: 
10339: dnl ========================================================
10339: dnl shark
10339: dnl ========================================================
10339: MOZ_ARG_ENABLE_BOOL(shark,
10339: [  --enable-shark          Enable shark remote profiling (needs CHUD framework)],
10339:     MOZ_SHARK=1,
10339:     MOZ_SHARK= )
10339: if test -n "$MOZ_SHARK"; then
10339:     AC_DEFINE(MOZ_SHARK)
10339: fi
    1: 
    1: dnl ========================================================
15763: dnl callgrind
15763: dnl ========================================================
15763: MOZ_ARG_ENABLE_BOOL(callgrind,
15763: [  --enable-callgrind      Enable callgrind profiling],
15763:     MOZ_CALLGRIND=1,
15763:     MOZ_CALLGRIND= )
15763: if test -n "$MOZ_CALLGRIND"; then
15763:     AC_DEFINE(MOZ_CALLGRIND)
15763: fi
15763: 
15763: dnl ========================================================
16288: dnl vtune
16288: dnl ========================================================
16288: MOZ_ARG_ENABLE_BOOL(vtune,
16288: [  --enable-vtune          Enable vtune profiling],
16288:     MOZ_VTUNE=1,
16288:     MOZ_VTUNE= )
16288: if test -n "$MOZ_VTUNE"; then
16288:     AC_DEFINE(MOZ_VTUNE)
16288: fi
16288: 
16288: dnl ========================================================
23530: dnl Zealous GC
23530: dnl ========================================================
23530: MOZ_ARG_ENABLE_BOOL(gczeal,
23530: [  --enable-gczeal         Enable zealous GCing],
23530:     JS_GC_ZEAL=1,
23530:     JS_GC_ZEAL= )
23530: if test -n "$JS_GC_ZEAL"; then
23530:     AC_DEFINE(JS_GC_ZEAL)
23530: fi
23530: 
47824: dnl ======================================================
47824: dnl = Enable compiling with ccache
47824: dnl ======================================================
47824: MOZ_ARG_WITH_STRING(ccache,
48218: [  --with-ccache[=path/to/ccache]
47824:                           Enable compiling with ccache],
48218:     CCACHE=$withval, CCACHE="no")
48218: 
48218: if test "$CCACHE" != "no"; then
48218:     if test -n "$CCACHE"; then
48218:         if test "$CCACHE" = "yes"; then
48218:             CCACHE=
48218:         else
48218:             if test ! -e "$CCACHE"; then
48218:                 AC_MSG_ERROR([$CCACHE not found])
48218:             fi
48218:         fi
48218:     fi
48218:     MOZ_PATH_PROGS(CCACHE, $CCACHE ccache)
48218:     if test -z "$CCACHE" -o "$CCACHE" = ":"; then
48218:         AC_MSG_ERROR([ccache not found])
48218:     elif test -x "$CCACHE"; then
48218:         CC="$CCACHE $CC"
48218:         CXX="$CCACHE $CXX"
48218:     else
48218:         AC_MSG_ERROR([$CCACHE is not executable])
48218:     fi
47824: fi
47824: 
23530: dnl ========================================================
12116: dnl = Enable static checking using gcc-dehydra
12116: dnl ========================================================
12116: 
12116: MOZ_ARG_WITH_STRING(static-checking,
12116: [  --with-static-checking=path/to/gcc_dehydra.so
12116:                           Enable static checking of code using GCC-dehydra],
12116:     DEHYDRA_PATH=$withval,
12116:     DEHYDRA_PATH= )
12116: 
12116: if test -n "$DEHYDRA_PATH"; then
24371:     if test ! -f "$DEHYDRA_PATH"; then
12116:         AC_MSG_ERROR([The dehydra plugin is not at the specified path.])
12116:     fi
12116:     AC_DEFINE(NS_STATIC_CHECKING)
12116: fi
12116: AC_SUBST(DEHYDRA_PATH)
12116: 
12116: dnl ========================================================
    1: dnl = Enable stripping of libs & executables
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(strip,
    1: [  --enable-strip          Enable stripping of libs & executables ],
    1:     ENABLE_STRIP=1,
    1:     ENABLE_STRIP= )
    1: 
    1: dnl ========================================================
 4703: dnl = Enable stripping of libs & executables when packaging
 4703: dnl ========================================================
 4703: MOZ_ARG_ENABLE_BOOL(install-strip,
 4703: [  --enable-install-strip  Enable stripping of libs & executables when packaging ],
 4703:     PKG_SKIP_STRIP= ,
 4703:     PKG_SKIP_STRIP=1)
 4703: 
 4703: dnl ========================================================
    1: dnl = 
    1: dnl = Profiling and Instrumenting
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Profiling and Instrumenting)
    1: 
    1: dnl ========================================================
    1: dnl = Enable timeline service, which provides lightweight
    1: dnl = instrumentation of mozilla for performance measurement.
    1: dnl = Timeline is off by default.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(timeline,
    1: [  --enable-timeline       Enable timeline services ],
    1:     MOZ_TIMELINE=1,
    1:     MOZ_TIMELINE= )
    1: if test -n "$MOZ_TIMELINE"; then
    1:     AC_DEFINE(MOZ_TIMELINE)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Support for Quantify (Windows)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(quantify,
    1: [  --enable-quantify       Enable Quantify support (Windows only) ],
    1:     MOZ_QUANTIFY=1,
    1:     MOZ_QUANTIFY= )
    1: 
    1: dnl ========================================================
    1: dnl = Support for demangling undefined symbols
    1: dnl ========================================================
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
    1:     AC_LANG_RESTORE
    1: fi
    1: 
    1: # Demangle only for debug or trace-malloc builds
    1: MOZ_DEMANGLE_SYMBOLS=
    1: if test "$HAVE_DEMANGLE" -a "$HAVE_GCC3_ABI" && test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_DEMANGLE_SYMBOLS=1
    1:     AC_DEFINE(MOZ_DEMANGLE_SYMBOLS)
    1: fi
    1: AC_SUBST(MOZ_DEMANGLE_SYMBOLS)
    1: 
 7836: dnl ========================================================
 7836: dnl = Support for gcc stack unwinding (from gcc 3.3)
 7836: dnl ========================================================
47975: if test "$HAVE_GCC3_ABI" -a -z "$SKIP_LIBRARY_CHECKS"; then
 8359:     AC_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
 7836: fi
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Misc. Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Misc. Options)
    1: 
    1: dnl ========================================================
    1: dnl update xterm title
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xterm-updates,
    1: [  --enable-xterm-updates  Update XTERM titles with current command.],
    1:     MOZ_UPDATE_XTERM=1,
    1:     MOZ_UPDATE_XTERM= )
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl ========================================================
    1: dnl =
    1: dnl = Compiler Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Compiler Options)
    1: 
    1: dnl ========================================================
    1: dnl Check for gcc -pipe support
    1: dnl ========================================================
    1: AC_MSG_CHECKING([for gcc -pipe support])
47975: if test -n "$GNU_CC" -a -n "$GNU_CXX" -a -n "$GNU_AS"; then
    1:     echo '#include <stdio.h>' > dummy-hello.c
    1:     echo 'int main() { printf("Hello World\n"); exit(0); }' >> dummy-hello.c
    1:     ${CC} -S dummy-hello.c -o dummy-hello.s 2>&5
28000:     cat dummy-hello.s 2> /dev/null | ${AS_BIN} -o dummy-hello.S - 2>&5
    1:     if test $? = 0; then
    1:         _res_as_stdin="yes"
    1:     else
    1:         _res_as_stdin="no"
    1:     fi
    1:     if test "$_res_as_stdin" = "yes"; then
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         CFLAGS="$CFLAGS -pipe"
    1:         AC_TRY_COMPILE( [ #include <stdio.h> ],
    1:             [printf("Hello World\n");],
    1:             [_res_gcc_pipe="yes"],
    1:             [_res_gcc_pipe="no"] )
    1:         CFLAGS=$_SAVE_CFLAGS
    1:     fi
47975:     if test "$_res_as_stdin" = "yes" -a "$_res_gcc_pipe" = "yes"; then
    1:         _res="yes";
    1:         CFLAGS="$CFLAGS -pipe"
    1:         CXXFLAGS="$CXXFLAGS -pipe"
    1:     else
    1:         _res="no"
    1:     fi
    1:     rm -f dummy-hello.c dummy-hello.s dummy-hello.S dummy-hello a.out
    1:     AC_MSG_RESULT([$_res])
    1: else
    1:     AC_MSG_RESULT([no])
    1: fi
    1: 
41996: dnl ========================================================
11977: dnl Profile guided optimization
11977: dnl ========================================================
    1: dnl Test for profiling options
    1: dnl Under gcc 3.4+, use -fprofile-generate/-fprofile-use
    1: 
12660: dnl Provide a switch to disable PGO even when called via profiledbuild.
12660: MOZ_ARG_DISABLE_BOOL(profile-guided-optimization,
12660: [  --disable-profile-guided-optimization
12660:                           Don't build with PGO even if called via make profiledbuild],
12660: MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE=1,
12660: MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE=)
12660: 
12660: AC_SUBST(MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE)
12660: 
    1: _SAVE_CFLAGS="$CFLAGS"
41961: CFLAGS="$CFLAGS -fprofile-generate -fprofile-correction"
    1: 
    1: AC_MSG_CHECKING([whether C compiler supports -fprofile-generate])
    1: AC_TRY_COMPILE([], [return 0;],
    1:                [ PROFILE_GEN_CFLAGS="-fprofile-generate"
    1:                  result="yes" ], result="no")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test $result = "yes"; then
11787:   PROFILE_GEN_LDFLAGS="-fprofile-generate"
41961:   PROFILE_USE_CFLAGS="-fprofile-use -fprofile-correction -Wcoverage-mismatch -freorder-blocks-and-partition"
11787:   PROFILE_USE_LDFLAGS="-fprofile-use"
    1: fi
    1: 
    1: CFLAGS="$_SAVE_CFLAGS"
    1: 
13273: if test -n "$INTEL_CC"; then
13232:   PROFILE_GEN_CFLAGS="-prof-gen -prof-dir ."
13232:   PROFILE_GEN_LDFLAGS=
13232:   PROFILE_USE_CFLAGS="-prof-use -prof-dir ."
13232:   PROFILE_USE_LDFLAGS=
13232: fi
13232: 
14124: dnl Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
14124:   PROFILE_GEN_CFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_GEN_LDFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_USE_CFLAGS="-xprofile=use:$_objdir/$enable_application"
14124:   PROFILE_USE_LDFLAGS="-xprofile=use:$_objdir/$enable_application"
14124: fi
14124: 
    1: AC_SUBST(PROFILE_GEN_CFLAGS)
11787: AC_SUBST(PROFILE_GEN_LDFLAGS)
    1: AC_SUBST(PROFILE_USE_CFLAGS)
11787: AC_SUBST(PROFILE_USE_LDFLAGS)
    1: 
    1: AC_LANG_CPLUSPLUS
    1: 
    1: dnl ========================================================
    1: dnl Test for -pedantic bustage
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pedantic,
    1: [  --disable-pedantic      Issue all warnings demanded by strict ANSI C ],
    1: _PEDANTIC= )
    1: if test "$_PEDANTIC"; then
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
42455:     CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
    1:     AC_MSG_CHECKING([whether C++ compiler has -pedantic long long bug])
    1:     AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                    [CONFIGURE_STATIC_ASSERT(sizeof(long long) == 8)],
    1:                    result="no", result="yes" )
    1:     AC_MSG_RESULT([$result])
    1:     CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1:     case "$result" in
    1:     no)
42455:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
42455:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
    1:         ;;
    1:     yes)
    1:         AC_MSG_ERROR([Your compiler appears to have a known bug where long long is miscompiled when using -pedantic.  Reconfigure using --disable-pedantic. ])
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Test for correct temporary object destruction order
    1: dnl ========================================================
    1: dnl We want to make sure the compiler follows the C++ spec here as 
    1: dnl xpcom and the string classes depend on it (bug 235381).
    1: AC_MSG_CHECKING([for correct temporary object destruction order])
    1: AC_TRY_RUN([ class A {
    1:              public:  A(int& x) : mValue(x) {}
    1:                       ~A() { mValue--; }
    1:                       operator char**() { return 0; }
    1:              private:  int& mValue;
    1:              };
    1:              void func(char **arg) {}
    1:              int m=2;
    1:              void test() {
    1:                   func(A(m));
    1:                   if (m==1) m = 0;
    1:              }
    1:              int main() {
    1:                  test();
    1:                  return(m);
    1:              }
    1:              ],
    1:      result="yes", result="no", result="maybe")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test "$result" = "no"; then
    1:     AC_MSG_ERROR([Your compiler does not follow the C++ specification for temporary object destruction order.])
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Autoconf test for gcc 2.7.2.x (and maybe others?) so that we don't
    1: dnl provide non-const forms of the operator== for comparing nsCOMPtrs to
    1: dnl raw pointers in nsCOMPtr.h.  (VC++ has the same bug.)
    1: dnl ========================================================
    1: _SAVE_CXXFLAGS=$CXXFLAGS
    1: CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS}"
    1: AC_CACHE_CHECK(for correct overload resolution with const and templates,
    1:     ac_nscap_nonconst_opeq_bug,
    1:     [AC_TRY_COMPILE([
    1:                       template <class T>
    1:                       class Pointer
    1:                         {
    1:                         public:
    1:                           T* myPtr;
    1:                         };
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, const U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                     ],
    1:                     [
    1:                       Pointer<int> foo;
    1:                       const int* bar;
    1:                       return foo == bar;
    1:                     ],
    1:                     ac_nscap_nonconst_opeq_bug="no",
    1:                     ac_nscap_nonconst_opeq_bug="yes")])
    1: CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1: if test "$ac_nscap_nonconst_opeq_bug" = "yes" ; then
    1:     AC_DEFINE(NSCAP_DONT_PROVIDE_NONCONST_OPEQ)
    1: fi
23997: 
23997: dnl ========================================================
23997: dnl Check for tm_zone, tm_gmtoff in struct tm
23997: dnl ========================================================
23997: AC_CACHE_CHECK(for tm_zone tm_gmtoff in struct tm,
23997:     ac_cv_struct_tm_zone_tm_gmtoff,
23997:     [AC_TRY_COMPILE([#include <time.h>],
23997:                     [struct tm tm; tm.tm_zone = 0; tm.tm_gmtoff = 1;],
23997:                     [ac_cv_struct_tm_zone_tm_gmtoff="yes"],
23997:                     [ac_cv_struct_tm_zone_tm_gmtoff="no"])])
23997: if test "$ac_cv_struct_tm_zone_tm_gmtoff" = "yes" ; then
23997:     AC_DEFINE(HAVE_TM_ZONE_TM_GMTOFF)
23997: fi
23997: 
    1: fi # SKIP_COMPILER_CHECKS
    1: 
    1: dnl ========================================================
    1: dnl C++ rtti
    1: dnl Should be smarter and check that the compiler does indeed have rtti
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(cpp-rtti,
    1: [  --enable-cpp-rtti       Enable C++ RTTI ],
    1: [ _MOZ_USE_RTTI=1 ],
    1: [ _MOZ_USE_RTTI= ])
    1: 
    1: if test "$_MOZ_USE_RTTI"; then
    1:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_ON
    1: else
    1:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_OFF
    1: fi
    1: 
    1: AC_SUBST(_MOZ_RTTI_FLAGS_ON)
    1: 
    1: dnl ========================================================
40533: dnl C++ exceptions (g++/VC/irix6/Sun only - for now)
    1: dnl Should be smarter and check that the compiler does indeed have exceptions
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(cpp-exceptions,
    1: [  --enable-cpp-exceptions Enable C++ exceptions ],
    1: [ _MOZ_CPP_EXCEPTIONS=1 ],
    1: [ _MOZ_CPP_EXCEPTIONS= ])
    1: 
    1: if test "$_MOZ_CPP_EXCEPTIONS"; then
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_ON
40533:     AC_DEFINE(MOZ_CPP_EXCEPTIONS)
    1: else
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_OFF
    1: fi
    1: 
30854: AC_SUBST(_MOZ_EXCEPTIONS_FLAGS_ON)
30854: 
    1: # Irix & OSF native compilers do not like exception declarations 
    1: # when exceptions are disabled
    1: if test -n "$MIPSPRO_CXX" -o -n "$COMPAQ_CXX" -o -n "$VACPP"; then
    1:     AC_DEFINE(CPP_THROW_NEW, [])
    1: else
    1:     AC_DEFINE(CPP_THROW_NEW, [throw()])
    1: fi
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Build depencency options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Build dependencies)
    1: 
    1: dnl ========================================================
    1: dnl = Do not auto generate dependency info
    1: dnl ========================================================
    1: MOZ_AUTO_DEPS=1
    1: MOZ_ARG_DISABLE_BOOL(auto-deps,
    1: [  --disable-auto-deps     Do not automatically generate dependency info],
    1:     MOZ_AUTO_DEPS=,
    1:     MOZ_AUTO_DEPS=1)
    1: 
    1: if test -n "$MOZ_AUTO_DEPS"; then
    1: dnl ========================================================
    1: dnl = Use mkdepend instead of $CC -MD for dependency generation
    1: dnl ========================================================
    1: _cpp_md_flag=
    1: MOZ_ARG_DISABLE_BOOL(md,
    1: [  --disable-md            Do not use compiler-based dependencies ],
    1:   [_cpp_md_flag=],
    1:   [_cpp_md_flag=1],
    1:   [dnl Default is to turn on -MD if using GNU-compatible compilers
    1:    if test "$GNU_CC" -a "$GNU_CXX" -a "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "WINCE"; then
    1:      _cpp_md_flag=1
 4766:    fi
 4766:   dnl Default is to use -xM if using Sun Studio on Solaris
24783:    if test "$SOLARIS_SUNPRO_CC"; then
 4766:      _cpp_md_flag=1
    1:    fi])
    1: if test "$_cpp_md_flag"; then
    1:   COMPILER_DEPEND=1
    1:   if test "$OS_ARCH" = "OpenVMS"; then
19840:     _DEPEND_CFLAGS='$(subst =, ,$(filter-out %/.pp,-MM=-MD=-MF=$(MDDEPDIR)/$(basename $(@F)).pp))'
19840:   else
47213:     _DEPEND_CFLAGS='$(filter-out %/.pp,-MD -MF $(MDDEPDIR)/$(basename $(@F)).pp)'
    1:   fi
 4766:   dnl Sun Studio on Solaris use -xM instead of -MD, see config/rules.mk
24783:   if test "$SOLARIS_SUNPRO_CC"; then
 4766:     _DEPEND_CFLAGS=
 4766:   fi
    1: else
    1:   COMPILER_DEPEND=
31530:   dnl Don't override this for MSVC
31530:   if test -z "$_WIN32_MSVC"; then
    1:     _USE_CPP_INCLUDE_FLAG=
30837:     _DEFINES_CFLAGS='$(ACDEFINES) -D_JS_CONFDEFS_H_ -DMOZILLA_CLIENT'
30837:     _DEFINES_CXXFLAGS='$(ACDEFINES) -D_JS_CONFDEFS_H_ -DMOZILLA_CLIENT'
48881:   else
48881:     _topsrcdirwin=`cd \`dirname $0\`; pwd -W`
48881:     dnl cl.py provides dependency generation for MSVC
48881:     CC_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
48881:     CXX_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
48881:     COMPILER_DEPEND=1
    1:   fi
31530: fi
    1: fi # MOZ_AUTO_DEPS
    1: MDDEPDIR='.deps'
    1: AC_SUBST(MOZ_AUTO_DEPS)
    1: AC_SUBST(COMPILER_DEPEND)
    1: AC_SUBST(MDDEPDIR)
48881: AC_SUBST(CC_WRAPPER)
48881: AC_SUBST(CXX_WRAPPER)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Static Build Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Static build options)
    1: 
    1: MOZ_ARG_ENABLE_BOOL(static,
    1: [  --enable-static         Enable building of internal static libs],
    1:     BUILD_STATIC_LIBS=1,
    1:     BUILD_STATIC_LIBS=)
    1: 
    1: dnl ========================================================
23648: dnl = Link js shell to system readline
    1: dnl ========================================================
23648: MOZ_ARG_ENABLE_BOOL(readline,
23648: [  --enable-readline       Link js shell to system readline library],
23648:     JS_WANT_READLINE=1,
23648:     JS_WANT_READLINE= )
23648: 
23648: JS_NATIVE_EDITLINE=
23648: EDITLINE_LIBS=
28509: JS_DISABLE_SHELL=
23648: 
26053: case "$target" in
35551: *-wince*|*-winmo*|*-mingw*|*-cygwin*|*-msvc*|*-mks*)
26053:     NO_EDITLINE=1
26053:     ;;
28509: *-symbian*)
28509:     NO_EDITLINE=1
28509:     JS_DISABLE_SHELL=1
28509:     ;;
26053: *)
26053:     ;;
26053: esac
26053: 
26077: if test -z "$SKIP_LIBRARY_CHECKS" -a -z "$NO_EDITLINE"; then
23648:   if test -n "$JS_WANT_READLINE"; then
23648:     AC_CHECK_LIB(readline, readline,
23648:                  EDITLINE_LIBS="-lreadline",
23648:                  AC_MSG_ERROR([No system readline library found.]))
23648:   else
23648:     dnl By default, we use editline
23648:     JS_NATIVE_EDITLINE=1
23648:     EDITLINE_LIBS='$(DEPTH)/editline/$(LIB_PREFIX)editline.$(LIB_SUFFIX)'
23648:   fi
23648: 
23648:   dnl Either way, we want to build with line editing support.
23648:   AC_DEFINE(EDITLINE)
23648: fi
23648: AC_SUBST(JS_NATIVE_EDITLINE)
28509: AC_SUBST(JS_DISABLE_SHELL)
23648: AC_SUBST(EDITLINE_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Standalone module options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Standalone module options (Not for building Mozilla))
    1: 
    1: dnl ========================================================
47975: if test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
    1: fi
    1: 
21064: MOZ_ARG_WITH_STRING(sync-build-files,
21064: [  --with-sync-build-files=DIR
21064:                           Check that files in 'config' and 'build' match
21064:                           their originals in 'DIR/config' and 'DIR/build'.
21064:                           This helps keep the SpiderMonkey build machinery
21064:                           in sync with Mozilla's, on which it is based.],
21064: [MOZ_SYNC_BUILD_FILES=$withval ] )
21064: AC_SUBST(MOZ_SYNC_BUILD_FILES)
21064: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Maintainer debug option (no --enable equivalent)
    1: dnl =
    1: dnl ========================================================
    1: 
    1: AC_SUBST(AR)
    1: AC_SUBST(AR_FLAGS)
    1: AC_SUBST(AR_LIST)
    1: AC_SUBST(AR_EXTRACT)
    1: AC_SUBST(AR_DELETE)
    1: AC_SUBST(AS)
    1: AC_SUBST(ASFLAGS)
    1: AC_SUBST(AS_DASH_C_FLAG)
    1: AC_SUBST(LD)
    1: AC_SUBST(RC)
    1: AC_SUBST(RCFLAGS)
    1: AC_SUBST(WINDRES)
    1: AC_SUBST(IMPLIB)
    1: AC_SUBST(FILTER)
    1: AC_SUBST(BIN_FLAGS)
    1: AC_SUBST(NS_USE_NATIVE)
    1: AC_SUBST(MOZ_JS_LIBS)
    1: AC_SUBST(MOZ_PSM)
    1: AC_SUBST(MOZ_DEBUG)
39277: AC_SUBST(MOZ_DEBUG_SYMBOLS)
    1: AC_SUBST(MOZ_DEBUG_ENABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_DISABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_FLAGS)
    1: AC_SUBST(MOZ_DEBUG_LDFLAGS)
 5382: AC_SUBST(WARNINGS_AS_ERRORS)
    1: AC_SUBST(MOZ_LEAKY)
    1: AC_SUBST(MOZ_JPROF)
10339: AC_SUBST(MOZ_SHARK)
15763: AC_SUBST(MOZ_CALLGRIND)
16288: AC_SUBST(MOZ_VTUNE)
    1: AC_SUBST(MOZ_JSLOADER)
    1: AC_SUBST(MOZ_QUANTIFY)
    1: AC_SUBST(LIBICONV)
21062: 
    1: AC_SUBST(BUILD_STATIC_LIBS)
    1: AC_SUBST(ENABLE_TESTS)
    1: 
    1: AC_SUBST(ENABLE_STRIP)
 4703: AC_SUBST(PKG_SKIP_STRIP)
    1: AC_SUBST(INCREMENTAL_LINKER)
    1: AC_SUBST(MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS)
    1: AC_SUBST(MOZ_COMPONENT_NSPR_LIBS)
    1: 
    1: AC_SUBST(MOZ_FIX_LINK_PATHS)
    1: 
    1: AC_SUBST(USE_DEPENDENT_LIBS)
    1: 
    1: AC_SUBST(MOZ_BUILD_ROOT)
    1: AC_SUBST(MOZ_OS2_TOOLS)
    1: AC_SUBST(MOZ_OS2_USE_DECLSPEC)
    1: 
    1: AC_SUBST(MOZ_POST_DSO_LIB_COMMAND)
    1: AC_SUBST(MOZ_POST_PROGRAM_COMMAND)
    1: AC_SUBST(MOZ_TIMELINE)
    1: AC_SUBST(WINCE)
33060: AC_SUBST(WINCE_WINDOWS_MOBILE)
    1: 
    1: AC_SUBST(MOZ_APP_NAME)
    1: AC_SUBST(MOZ_APP_DISPLAYNAME)
51553: AC_SUBST(MOZ_APP_UA_NAME)
    1: AC_SUBST(MOZ_APP_VERSION)
51675: AC_SUBST(MOZ_UA_FIREFOX_VERSION)
51553: AC_SUBST(FIREFOX_VERSION)
    1: 
    1: AC_SUBST(MOZ_PKG_SPECIAL)
    1: 
    1: AC_SUBST(MOZILLA_OFFICIAL)
    1: 
    1: dnl win32 options
    1: AC_SUBST(MOZ_MAPINFO)
    1: AC_SUBST(MOZ_BROWSE_INFO)
    1: AC_SUBST(MOZ_TOOLS_DIR)
    1: AC_SUBST(CYGWIN_WRAPPER)
    1: AC_SUBST(AS_PERL)
    1: AC_SUBST(WIN32_REDIST_DIR)
    1: AC_SUBST(PYTHON)
    1: 
    1: dnl Echo the CFLAGS to remove extra whitespace.
    1: CFLAGS=`echo \
    1: 	$_WARNINGS_CFLAGS \
    1: 	$CFLAGS`
    1: 
    1: CXXFLAGS=`echo \
    1: 	$_MOZ_RTTI_FLAGS \
    1: 	$_MOZ_EXCEPTIONS_FLAGS \
    1: 	$_WARNINGS_CXXFLAGS \
    1: 	$CXXFLAGS`
    1: 
    1: COMPILE_CFLAGS=`echo \
    1:     $_DEFINES_CFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CFLAGS`
    1: 
    1: COMPILE_CXXFLAGS=`echo \
    1:     $_DEFINES_CXXFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CXXFLAGS`
    1: 
    1: AC_SUBST(SYSTEM_MAKEDEPEND)
    1: 
    1: AC_SUBST(NSPR_CFLAGS)
    1: AC_SUBST(NSPR_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSPR)
    1: 
    1: AC_SUBST(CFLAGS)
    1: AC_SUBST(CXXFLAGS)
    1: AC_SUBST(CPPFLAGS)
    1: AC_SUBST(COMPILE_CFLAGS)
    1: AC_SUBST(COMPILE_CXXFLAGS)
    1: AC_SUBST(LDFLAGS)
    1: AC_SUBST(LIBS)
    1: AC_SUBST(CROSS_COMPILE)
    1: 
    1: AC_SUBST(HOST_CC)
    1: AC_SUBST(HOST_CXX)
    1: AC_SUBST(HOST_CFLAGS)
    1: AC_SUBST(HOST_CXXFLAGS)
    1: AC_SUBST(HOST_OPTIMIZE_FLAGS)
    1: AC_SUBST(HOST_AR)
    1: AC_SUBST(HOST_AR_FLAGS)
    1: AC_SUBST(HOST_LD)
    1: AC_SUBST(HOST_RANLIB)
    1: AC_SUBST(HOST_NSPR_MDCPUCFG)
    1: AC_SUBST(HOST_BIN_SUFFIX)
    1: AC_SUBST(HOST_OS_ARCH)
    1: 
    1: AC_SUBST(TARGET_CPU)
    1: AC_SUBST(TARGET_VENDOR)
    1: AC_SUBST(TARGET_OS)
    1: AC_SUBST(TARGET_NSPR_MDCPUCFG)
    1: AC_SUBST(TARGET_MD_ARCH)
    1: AC_SUBST(TARGET_XPCOM_ABI)
    1: AC_SUBST(OS_TARGET)
    1: AC_SUBST(OS_ARCH)
    1: AC_SUBST(OS_RELEASE)
    1: AC_SUBST(OS_TEST)
    1: 
    1: AC_SUBST(WRAP_MALLOC_CFLAGS)
    1: AC_SUBST(WRAP_MALLOC_LIB)
    1: AC_SUBST(MKSHLIB)
    1: AC_SUBST(MKCSHLIB)
    1: AC_SUBST(MKSHLIB_FORCE_ALL)
    1: AC_SUBST(MKSHLIB_UNFORCE_ALL)
    1: AC_SUBST(DSO_CFLAGS)
    1: AC_SUBST(DSO_PIC_CFLAGS)
    1: AC_SUBST(DSO_LDOPTS)
    1: AC_SUBST(LIB_PREFIX)
    1: AC_SUBST(DLL_PREFIX)
    1: AC_SUBST(DLL_SUFFIX)
    1: AC_DEFINE_UNQUOTED(MOZ_DLL_SUFFIX, "$DLL_SUFFIX")
    1: AC_SUBST(LIB_SUFFIX)
    1: AC_SUBST(OBJ_SUFFIX)
    1: AC_SUBST(BIN_SUFFIX)
    1: AC_SUBST(ASM_SUFFIX)
    1: AC_SUBST(IMPORT_LIB_SUFFIX)
    1: AC_SUBST(USE_N32)
    1: AC_SUBST(CC_VERSION)
    1: AC_SUBST(CXX_VERSION)
    1: AC_SUBST(MSMANIFEST_TOOL)
    1: 
    1: if test "$USING_HCC"; then
    1:    CC='${topsrcdir}/build/hcc'
    1:    CC="$CC '$_OLDCC'"
    1:    CXX='${topsrcdir}/build/hcpp'
    1:    CXX="$CXX '$_OLDCXX'"
    1:    AC_SUBST(CC)
    1:    AC_SUBST(CXX)
    1: fi
    1: 
    1: dnl Check for missing components
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$MOZ_X11"; then
    1:     dnl ====================================================
    1:     dnl = Check if X headers exist
    1:     dnl ====================================================
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $XCFLAGS"
    1:     AC_TRY_COMPILE([
    1:         #include <stdio.h>
13878:         #include <stdlib.h>
    1:         #include <X11/Xlib.h>
    1:         #include <X11/Intrinsic.h>
    1:     ],
    1:     [
    1:         Display *dpy = 0;
    1:         if ((dpy = XOpenDisplay(NULL)) == NULL) {
    1:             fprintf(stderr, ": can't open %s\n", XDisplayName(NULL));
    1:             exit(1);
    1:         }
    1:     ], [], 
    1:     [ AC_MSG_ERROR([Could not compile basic X program.]) ])
    1:     CFLAGS="$_SAVE_CFLAGS"
    1: 
    1:     if test ! -z "$MISSING_X"; then
    1:         AC_MSG_ERROR([ Could not find the following X libraries: $MISSING_X ]);
    1:     fi
    1: 
    1: fi # MOZ_X11
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl Set various defines and substitutions
    1: dnl ========================================================
    1: 
20288: if test "$OS_ARCH" = "BeOS"; then
    1:   AC_DEFINE(XP_BEOS)
    1: elif test "$OS_ARCH" = "Darwin"; then
42729:   AC_DEFINE(XP_MACOSX)
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
    1: elif test "$OS_ARCH" = "OpenVMS"; then
    1:   AC_DEFINE(XP_UNIX)
    1: elif test "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "OS2" -a "$OS_ARCH" != "WINCE"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
39009: fi
    1: 
21062: AC_ARG_ENABLE(threadsafe,
21062:               [  --enable-threadsafe     Enable support for multiple threads.],
21062:               [AC_DEFINE(JS_THREADSAFE)],)
    1: 
    1: if test "$MOZ_DEBUG"; then
    1:     AC_DEFINE(MOZ_REFLOW_PERF)
    1:     AC_DEFINE(MOZ_REFLOW_PERF_DSP)
    1: fi
    1: 
    1: if test "$ACCESSIBILITY" -a "$MOZ_ENABLE_GTK2" ; then
    1:     AC_DEFINE(MOZ_ACCESSIBILITY_ATK)
    1:     ATK_FULL_VERSION=`$PKG_CONFIG --modversion atk`
    1:     ATK_MAJOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:     ATK_MINOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:     ATK_REV_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:     AC_DEFINE_UNQUOTED(ATK_MAJOR_VERSION, $ATK_MAJOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_MINOR_VERSION, $ATK_MINOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_REV_VERSION, $ATK_REV_VERSION)
    1: fi
    1: 
    1: dnl ========================================================
22949: dnl JavaScript shell
22949: dnl ========================================================
22949: 
22949: AC_HAVE_FUNCS(setlocale)
40165: AC_HAVE_FUNCS(localeconv)
22949: 
22949: dnl ========================================================
    1: dnl Use cygwin wrapper for win32 builds, except MSYS/MinGW
    1: dnl ========================================================
    1: case "$host_os" in
    1: mingw*)
    1:     WIN_TOP_SRC=`cd $srcdir; pwd -W`
    1:     ;;
    1: cygwin*|msvc*|mks*)
    1:     HOST_CC="\$(CYGWIN_WRAPPER) $HOST_CC"
    1:     HOST_CXX="\$(CYGWIN_WRAPPER) $HOST_CXX"
    1:     CC="\$(CYGWIN_WRAPPER) $CC"
    1:     CXX="\$(CYGWIN_WRAPPER) $CXX"
    1:     CPP="\$(CYGWIN_WRAPPER) $CPP"
    1:     LD="\$(CYGWIN_WRAPPER) $LD"
    1:     AS="\$(CYGWIN_WRAPPER) $AS"
    1:     RC="\$(CYGWIN_WRAPPER) $RC"
    1:     CYGDRIVE_MOUNT=`mount -p | awk '{ if (/^\//) { print $1; exit } }'`
    1:     WIN_TOP_SRC=`cygpath -a -w $srcdir | sed -e 's|\\\\|/|g'`
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(CYGDRIVE_MOUNT)
    1: AC_SUBST(WIN_TOP_SRC)
    1: 
    1: AC_SUBST(MOZILLA_VERSION)
    1: 
    1: AC_SUBST(ac_configure_args)
    1: 
    1: dnl Spit out some output
    1: dnl ========================================================
    1: 
    1: # Save the defines header file before autoconf removes it.
    1: # (Do not add AC_DEFINE calls after this line.)
    1:   _CONFIG_TMP=confdefs-tmp.h
30837:   _CONFIG_DEFS_H=js-confdefs.h
    1: 
    1:   cat > $_CONFIG_TMP <<\EOF
    1: /* List of defines generated by configure. Included with preprocessor flag,
    1:  * -include, to avoid long list of -D defines on the compile command-line.
    1:  * Do not edit.
    1:  */
    1: 
30837: #ifndef _JS_CONFDEFS_H_
30837: #define _JS_CONFDEFS_H_
    1: EOF
    1: 
    1: _EGREP_PATTERN='^#define ('
    1: if test -n "$_NON_GLOBAL_ACDEFINES"; then
    1:     for f in $_NON_GLOBAL_ACDEFINES; do
    1:         _EGREP_PATTERN="${_EGREP_PATTERN}$f|"
    1:     done
    1: fi
    1: _EGREP_PATTERN="${_EGREP_PATTERN}dummy_never_defined)"
    1:  
    1:   sort confdefs.h | egrep -v "$_EGREP_PATTERN" >> $_CONFIG_TMP
    1: 
    1:   cat >> $_CONFIG_TMP <<\EOF
    1: 
30837: #endif /* _JS_CONFDEFS_H_ */
    1: 
    1: EOF
    1: 
30837:   # Only write js-confdefs.h when something changes (or it doesn't exist)
    1:   if cmp -s $_CONFIG_TMP $_CONFIG_DEFS_H; then
    1:     rm $_CONFIG_TMP
    1:   else
    1:     AC_MSG_RESULT("creating $_CONFIG_DEFS_H")
    1:     mv -f $_CONFIG_TMP $_CONFIG_DEFS_H
    1: 
    1:     echo ==== $_CONFIG_DEFS_H =================================
    1:     cat $_CONFIG_DEFS_H
    1:   fi
    1: 
    1: dnl Probably shouldn't call this manually but we always want the output of DEFS
    1: rm -f confdefs.h.save
    1: mv confdefs.h confdefs.h.save
    1: egrep -v "$_EGREP_PATTERN" confdefs.h.save > confdefs.h
    1: AC_OUTPUT_MAKE_DEFS()
    1: MOZ_DEFINES=$DEFS
    1: AC_SUBST(MOZ_DEFINES)
    1: rm -f confdefs.h
    1: mv confdefs.h.save confdefs.h
    1: 
21062: MAKEFILES="
21062:   Makefile
23648:   shell/Makefile
29355:   lirasm/Makefile
31916:   jsapi-tests/Makefile
33535:   tests/Makefile
21062:   config/Makefile
21062:   config/autoconf.mk
21062:   config/mkdepend/Makefile
21062: "
21062: 
23648: if test -n "$JS_NATIVE_EDITLINE"; then
23648:    MAKEFILES="$MAKEFILES
23648: editline/Makefile
23648: "
23648: fi
23648: 
    1: dnl 
    1: dnl Run a perl script to quickly create the makefiles.
    1: dnl If it succeeds, it outputs a shell command to set CONFIG_FILES
    1: dnl   for the files it cannot handle correctly. This way, config.status
    1: dnl   will handle these files.
    1: dnl If it fails, nothing is set and config.status will run as usual.
    1: dnl
    1: dnl This does not change the $MAKEFILES variable.
    1: dnl
    1: dnl OpenVMS gets a line overflow on the long eval command, so use a temp file.
    1: dnl
    1: if test -z "${AS_PERL}"; then
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl > conftest.sh
    1: else
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl -nowrap --cygwin-srcdir=$srcdir > conftest.sh
    1: fi
    1: . ./conftest.sh
    1: rm conftest.sh
    1: 
    1: echo $MAKEFILES > unallmakefiles
    1: 
24557: mv -f config/autoconf.mk config/autoconf.mk.orig 2> /dev/null
24557: 
    1: AC_OUTPUT($MAKEFILES)
    1: 
24557: dnl Prevent the regeneration of autoconf.mk forcing rebuilds of the world
24557: if cmp -s config/autoconf.mk config/autoconf.mk.orig; then
24557:   echo "config/autoconf.mk is unchanged"
24557:   mv -f config/autoconf.mk.orig config/autoconf.mk 2> /dev/null
24557: else
24557:   rm -f config/autoconf.mk.orig 2> /dev/null
24557: fi
24557: 
21062: # Produce the js-config script at configure time; see the comments for
21062: # 'js-config' in Makefile.in.
21062: AC_MSG_RESULT(invoking make to create js-config script)
21062: $MAKE js-config
40442: 
40442: # Build jsctypes if it's enabled.
40442: if test "$JS_HAS_CTYPES"; then
40442:   # Run the libffi 'configure' script.
40442:   ac_configure_args="--disable-shared --enable-static --disable-raw-api"
40442:   if test "$MOZ_DEBUG"; then
40442:     ac_configure_args="$ac_configure_args --enable-debug"
40442:   fi
40442:   if test "$DSO_PIC_CFLAGS"; then
40442:     ac_configure_args="$ac_configure_args --with-pic"
40442:   fi
40442:   if test "$CROSS_COMPILE"; then
40442:     case "$target" in
40442:     *-mingw*)
40442:       ac_configure_args="$ac_configure_args --build=$build --host=${target_cpu}-${target_os} HOST_CC=\"$HOST_CC\" CC=\"$CC\""
40442:       ;;
42520:     *-android*)
42520:       CFLAGS="$ANDROID_CFLAGS"
42520:       CPPFLAGS="$ANDROID_CPPFLAGS"
42520:       LDFLAGS="$ANDROID_LDFLAGS"
42520: 
42520:       export CC CPP LD CPPFLAGS CFLAGS LDFLAGS
42520: 
42520:       ac_configure_args="$ac_configure_args --build=$build --host=${target_cpu}-${target_os} HOST_CC=\"$HOST_CC\""
42520:       ;;
40442:     *)
40442:       ac_configure_args="$ac_configure_args --build=$build --host=$target HOST_CC=\"$HOST_CC\" CC=\"$CC\""
40442:       ;;
40442:     esac
40442:   fi
40442:   if test "$_MSC_VER"; then
40442:     # Use a wrapper script for cl and ml that looks more like gcc.
40442:     # autotools can't quite handle an MSVC build environment yet.
40442:     ac_configure_args="$ac_configure_args LD=link CPP=\"cl -nologo -EP\" SHELL=sh.exe"
40442:     case "${target_cpu}" in
40442:     x86_64)
40442:       # Need target since MSYS tools into mozilla-build may be 32bit
40442:       ac_configure_args="$ac_configure_args CC=\"$_topsrcdir/ctypes/libffi/msvcc.sh -m64\" --build=$build --host=$target"
40442:       ;;
40442:     *)
40442:       ac_configure_args="$ac_configure_args CC=$_topsrcdir/ctypes/libffi/msvcc.sh"
40442:       ;;
40442:     esac
40442:   fi
40442:   if test "$SOLARIS_SUNPRO_CC"; then
40442:     # Always use gcc for libffi on Solaris
47470:     if test ! "$HAVE_64BIT_OS"; then
47470:       ac_configure_args="$ac_configure_args CC=gcc CFLAGS=-m32"
47470:     else
47470:       ac_configure_args="$ac_configure_args CC=gcc CFLAGS=-m64"
47470:     fi
40442:   fi
40894:   if test "$OS_ARCH" = "OS2"; then
40894:     ac_configure_args="$ac_configure_args CFLAGS=-Zomf AR=emxomfar"
40894:   fi
42805:   if test -n "$MOZ_THUMB2"; then
42805:     ac_configure_args="$ac_configure_args --enable-thumb2"
42805:   fi
40442: 
40442:   # Use a separate cache file for libffi, since it does things differently
40442:   # from our configure.
41092:   mkdir -p $_objdir/ctypes/libffi
40442:   old_cache_file=$cache_file
41092:   cache_file=$_objdir/ctypes/libffi/config.cache
40442:   old_config_files=$CONFIG_FILES
40442:   unset CONFIG_FILES
40442:   AC_OUTPUT_SUBDIRS(ctypes/libffi)
40442:   cache_file=$old_cache_file
40442:   ac_configure_args="$_SUBDIR_CONFIG_ARGS"
40442:   CONFIG_FILES=$old_config_files
40442: fi
40442: 
