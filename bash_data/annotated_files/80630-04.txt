15273: /*
15273:  * NSS utility functions
15273:  *
15273:  * ***** BEGIN LICENSE BLOCK *****
15273:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
15273:  *
15273:  * The contents of this file are subject to the Mozilla Public License Version
15273:  * 1.1 (the "License"); you may not use this file except in compliance with
15273:  * the License. You may obtain a copy of the License at
15273:  * http://www.mozilla.org/MPL/
15273:  *
15273:  * Software distributed under the License is distributed on an "AS IS" basis,
15273:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
15273:  * for the specific language governing rights and limitations under the
15273:  * License.
15273:  *
15273:  * The Original Code is the Netscape security libraries.
15273:  *
15273:  * The Initial Developer of the Original Code is
15273:  * Netscape Communications Corporation.
15273:  * Portions created by the Initial Developer are Copyright (C) 1994-2000
15273:  * the Initial Developer. All Rights Reserved.
15273:  *
15273:  * Contributor(s):
15273:  *
15273:  * Alternatively, the contents of this file may be used under the terms of
15273:  * either the GNU General Public License Version 2 or later (the "GPL"), or
15273:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
15273:  * in which case the provisions of the GPL or the LGPL are applicable instead
15273:  * of those above. If you wish to allow use of your version of this file only
15273:  * under the terms of either the GPL or the LGPL, and not to allow others to
15273:  * use your version of this file under the terms of the MPL, indicate your
15273:  * decision by deleting the provisions above and replace them with the notice
15273:  * and other provisions required by the GPL or the LGPL. If you do not delete
15273:  * the provisions above, a recipient may use your version of this file under
15273:  * the terms of any one of the MPL, the GPL or the LGPL.
15273:  *
15273:  * ***** END LICENSE BLOCK ***** */
80630: /* $Id: nss.h,v 1.85 2011/10/14 00:16:09 wtc%google.com Exp $ */
15273: 
15273: #ifndef __nss_h_
15273: #define __nss_h_
15273: 
15273: /* The private macro _NSS_ECC_STRING is for NSS internal use only. */
15273: #ifdef NSS_ENABLE_ECC
15273: #ifdef NSS_ECC_MORE_THAN_SUITE_B
15273: #define _NSS_ECC_STRING " Extended ECC"
15273: #else
15273: #define _NSS_ECC_STRING " Basic ECC"
15273: #endif
15273: #else
15273: #define _NSS_ECC_STRING ""
15273: #endif
15273: 
15273: /* The private macro _NSS_CUSTOMIZED is for NSS internal use only. */
15273: #if defined(NSS_ALLOW_UNSUPPORTED_CRITICAL)
15273: #define _NSS_CUSTOMIZED " (Customized build)"
15273: #else
15273: #define _NSS_CUSTOMIZED 
15273: #endif
15273: 
15273: /*
37961:  * NSS's major version, minor version, patch level, build number, and whether
15273:  * this is a beta release.
15273:  *
15273:  * The format of the version string should be
37961:  *     "<major version>.<minor version>[.<patch level>[.<build number>]][ <ECC>][ <Beta>]"
15273:  */
80630: #define NSS_VERSION  "3.13.1.0" _NSS_ECC_STRING _NSS_CUSTOMIZED " Beta"
15273: #define NSS_VMAJOR   3
76874: #define NSS_VMINOR   13
80630: #define NSS_VPATCH   1
47913: #define NSS_VBUILD   0
80630: #define NSS_BETA     PR_TRUE
23987: 
23987: #ifndef RC_INVOKED
23987: 
23987: #include "seccomon.h"
23987: 
37961: typedef struct NSSInitParametersStr NSSInitParameters;
37961: 
37961: /*
37961:  * parameters used to initialize softoken. Mostly strings used to 
37961:  * internationalize softoken. Memory for the strings are owned by the caller,
37961:  * who is free to free them once NSS_ContextInit returns. If the string 
37961:  * parameter is NULL (as opposed to empty, zero length), then the softoken
37961:  * default is used. These are equivalent to the parameters for 
37961:  * PK11_ConfigurePKCS11().
37961:  *
37961:  * field names match their equivalent parameter names for softoken strings 
37961:  * documented at https://developer.mozilla.org/en/PKCS11_Module_Specs.
37961:  * 
37961:  * minPWLen 
37961:  *     Minimum password length in bytes. 
37961:  * manufacturerID 
37961:  *     Override the default manufactureID value for the module returned in 
37961:  *     the CK_INFO, CK_SLOT_INFO, and CK_TOKEN_INFO structures with an 
37961:  *     internationalize string (UTF8). This value will be truncated at 32 
37961:  *     bytes (not including the trailing NULL, partial UTF8 characters will be
37961:  *     dropped). 
37961:  * libraryDescription 
37961:  *     Override the default libraryDescription value for the module returned in
37961:  *     the CK_INFO structure with an internationalize string (UTF8). This value
37961:  *     will be truncated at 32 bytes(not including the trailing NULL, partial 
37961:  *     UTF8 characters will be dropped). 
37961:  * cryptoTokenDescription 
37961:  *     Override the default label value for the internal crypto token returned
37961:  *     in the CK_TOKEN_INFO structure with an internationalize string (UTF8).
37961:  *     This value will be truncated at 32 bytes (not including the trailing
37961:  *     NULL, partial UTF8 characters will be dropped). 
37961:  * dbTokenDescription 
37961:  *     Override the default label value for the internal DB token returned in 
37961:  *     the CK_TOKEN_INFO structure with an internationalize string (UTF8). This
37961:  *     value will be truncated at 32 bytes (not including the trailing NULL,
37961:  *     partial UTF8 characters will be dropped). 
37961:  * FIPSTokenDescription 
37961:  *     Override the default label value for the internal FIPS token returned in
37961:  *     the CK_TOKEN_INFO structure with an internationalize string (UTF8). This
37961:  *     value will be truncated at 32 bytes (not including the trailing NULL,
37961:  *     partial UTF8 characters will be dropped). 
37961:  * cryptoSlotDescription 
37961:  *     Override the default slotDescription value for the internal crypto token
37961:  *     returned in the CK_SLOT_INFO structure with an internationalize string
37961:  *     (UTF8). This value will be truncated at 64 bytes (not including the
37961:  *     trailing NULL, partial UTF8 characters will be dropped). 
37961:  * dbSlotDescription 
37961:  *     Override the default slotDescription value for the internal DB token 
37961:  *     returned in the CK_SLOT_INFO structure with an internationalize string 
37961:  *     (UTF8). This value will be truncated at 64 bytes (not including the
37961:  *     trailing NULL, partial UTF8 characters will be dropped). 
37961:  * FIPSSlotDescription 
37961:  *     Override the default slotDecription value for the internal FIPS token
37961:  *     returned in the CK_SLOT_INFO structure with an internationalize string
37961:  *     (UTF8). This value will be truncated at 64 bytes (not including the
37961:  *     trailing NULL, partial UTF8 characters will be dropped). 
37961:  *
37961:  */
37961: struct NSSInitParametersStr {
37961:    unsigned int	  length;      /* allow this structure to grow in the future,
37961: 				* must be set */
37961:    PRBool passwordRequired;
37961:    int    minPWLen;
37961:    char * manufactureID;           /* variable names for strings match the */
37961:    char * libraryDescription;      /*   parameter name in softoken */
37961:    char * cryptoTokenDescription;
37961:    char * dbTokenDescription;
37961:    char * FIPSTokenDescription;
37961:    char * cryptoSlotDescription;
37961:    char * dbSlotDescription;
37961:    char * FIPSSlotDescription;
37961: };
37961:    
37961: 
23987: SEC_BEGIN_PROTOS
15273: 
15273: /*
15273:  * Return a boolean that indicates whether the underlying library
15273:  * will perform as the caller expects.
15273:  *
76874:  * The only argument is a string, which should be the version
15273:  * identifier of the NSS library. That string will be compared
15273:  * against a string that represents the actual build version of
15273:  * the NSS library.  It also invokes the version checking functions
15273:  * of the dependent libraries such as NSPR.
15273:  */
15273: extern PRBool NSS_VersionCheck(const char *importedVersion);
15273: 
15273: /*
76874:  * Returns a const string of the NSS library version.
76874:  */
76874: extern const char *NSS_GetVersion(void);
76874: 
76874: /*
15273:  * Open the Cert, Key, and Security Module databases, read only.
15273:  * Initialize the Random Number Generator.
15273:  * Does not initialize the cipher policies or enables.
15273:  * Default policy settings disallow all ciphers.
15273:  */
15273: extern SECStatus NSS_Init(const char *configdir);
15273: 
15273: /*
15273:  * Returns whether NSS has already been initialized or not.
15273:  */
15273: extern PRBool NSS_IsInitialized(void);
15273: 
15273: /*
15273:  * Open the Cert, Key, and Security Module databases, read/write.
15273:  * Initialize the Random Number Generator.
15273:  * Does not initialize the cipher policies or enables.
15273:  * Default policy settings disallow all ciphers.
15273:  */
15273: extern SECStatus NSS_InitReadWrite(const char *configdir);
15273: 
15273: /*
15273:  * Open the Cert, Key, and Security Module databases, read/write.
15273:  * Initialize the Random Number Generator.
15273:  * Does not initialize the cipher policies or enables.
15273:  * Default policy settings disallow all ciphers.
15273:  *
15273:  * This allows using application defined prefixes for the cert and key db's
15273:  * and an alternate name for the secmod database. NOTE: In future releases,
15273:  * the database prefixes my not necessarily map to database names.
15273:  *
15273:  * configdir - base directory where all the cert, key, and module datbases live.
15273:  * certPrefix - prefix added to the beginning of the cert database example: "
15273:  * 			"https-server1-"
15273:  * keyPrefix - prefix added to the beginning of the key database example: "
15273:  * 			"https-server1-"
15273:  * secmodName - name of the security module database (usually "secmod.db").
15273:  * flags - change the open options of NSS_Initialize as follows:
15273:  * 	NSS_INIT_READONLY - Open the databases read only.
15273:  * 	NSS_INIT_NOCERTDB - Don't open the cert DB and key DB's, just 
15273:  * 			initialize the volatile certdb.
15273:  * 	NSS_INIT_NOMODDB  - Don't open the security module DB, just 
15273:  *			initialize the 	PKCS #11 module.
15273:  *      NSS_INIT_FORCEOPEN - Continue to force initializations even if the 
15273:  * 			databases cannot be opened.
15273:  *      NSS_INIT_NOROOTINIT - Don't try to look for the root certs module
15273:  *			automatically.
15273:  *      NSS_INIT_OPTIMIZESPACE - Use smaller tables and caches.
15273:  *      NSS_INIT_PK11THREADSAFE - only load PKCS#11 modules that are
15273:  *                      thread-safe, ie. that support locking - either OS
15273:  *                      locking or NSS-provided locks . If a PKCS#11
15273:  *                      module isn't thread-safe, don't serialize its
15273:  *                      calls; just don't load it instead. This is necessary
15273:  *                      if another piece of code is using the same PKCS#11
15273:  *                      modules that NSS is accessing without going through
15273:  *                      NSS, for example the Java SunPKCS11 provider.
15273:  *      NSS_INIT_PK11RELOAD - ignore the CKR_CRYPTOKI_ALREADY_INITIALIZED
15273:  *                      error when loading PKCS#11 modules. This is necessary
15273:  *                      if another piece of code is using the same PKCS#11
15273:  *                      modules that NSS is accessing without going through
15273:  *                      NSS, for example Java SunPKCS11 provider.
15273:  *      NSS_INIT_NOPK11FINALIZE - never call C_Finalize on any
15273:  *                      PKCS#11 module. This may be necessary in order to
15273:  *                      ensure continuous operation and proper shutdown
15273:  *                      sequence if another piece of code is using the same
15273:  *                      PKCS#11 modules that NSS is accessing without going
15273:  *                      through NSS, for example Java SunPKCS11 provider.
15273:  *                      The following limitation applies when this is set :
15273:  *                      SECMOD_WaitForAnyTokenEvent will not use
15273:  *                      C_WaitForSlotEvent, in order to prevent the need for
15273:  *                      C_Finalize. This call will be emulated instead.
15273:  *      NSS_INIT_RESERVED - Currently has no effect, but may be used in the
15273:  *                      future to trigger better cooperation between PKCS#11
15273:  *                      modules used by both NSS and the Java SunPKCS11
15273:  *                      provider. This should occur after a new flag is defined
15273:  *                      for C_Initialize by the PKCS#11 working group.
15273:  *      NSS_INIT_COOPERATE - Sets 4 recommended options for applications that
15273:  *                      use both NSS and the Java SunPKCS11 provider.
15273:  *
15273:  * Also NOTE: This is not the recommended method for initializing NSS. 
47913:  * The preferred method is NSS_init().
15273:  */
15273: #define NSS_INIT_READONLY	0x1
15273: #define NSS_INIT_NOCERTDB	0x2
15273: #define NSS_INIT_NOMODDB	0x4
15273: #define NSS_INIT_FORCEOPEN	0x8
15273: #define NSS_INIT_NOROOTINIT     0x10
15273: #define NSS_INIT_OPTIMIZESPACE  0x20
15273: #define NSS_INIT_PK11THREADSAFE   0x40
15273: #define NSS_INIT_PK11RELOAD       0x80
15273: #define NSS_INIT_NOPK11FINALIZE   0x100
15273: #define NSS_INIT_RESERVED         0x200
15273: 
15273: #define NSS_INIT_COOPERATE NSS_INIT_PK11THREADSAFE | \
15273:         NSS_INIT_PK11RELOAD | \
15273:         NSS_INIT_NOPK11FINALIZE | \
15273:         NSS_INIT_RESERVED
15273: 
15273: #define SECMOD_DB "secmod.db"
15273: 
37961: typedef struct NSSInitContextStr NSSInitContext;
37961: 
37961: 
15273: extern SECStatus NSS_Initialize(const char *configdir, 
15273: 	const char *certPrefix, const char *keyPrefix, 
15273: 	const char *secmodName, PRUint32 flags);
15273: 
37961: extern NSSInitContext *NSS_InitContext(const char *configdir, 
37961: 	const char *certPrefix, const char *keyPrefix, 
37961: 	const char *secmodName, NSSInitParameters *initParams, PRUint32 flags);
37961: 
37961: extern SECStatus NSS_ShutdownContext(NSSInitContext *);
37961: 
15273: /*
15273:  * same as NSS_Init, but checks to see if we need to merge an
15273:  * old database in.
15273:  *   updatedir is the directory where the old database lives.
15273:  *   updCertPrefix is the certPrefix for the old database.
15273:  *   updKeyPrefix is the keyPrefix for the old database.
15273:  *   updateID is a unique identifier chosen by the application for
15273:  *      the specific database.
15273:  *   updatName is the name the user will be prompted for when
15273:  *      asking to authenticate to the old database  */
15273: extern SECStatus NSS_InitWithMerge(const char *configdir, 
15273: 	const char *certPrefix, const char *keyPrefix, const char *secmodName,
15273: 	const char *updatedir,  const char *updCertPrefix, 
15273: 	const char *updKeyPrefix, const char *updateID, 
15273: 	const char *updateName, PRUint32 flags);
15273: /*
15273:  * initialize NSS without a creating cert db's, key db's, or secmod db's.
15273:  */
15273: SECStatus NSS_NoDB_Init(const char *configdir);
15273: 
15273: /*
15273:  * Allow applications and libraries to register with NSS so that they are called
15273:  * when NSS shuts down.
15273:  *
15273:  * void *appData application specific data passed in by the application at 
15273:  * NSS_RegisterShutdown() time.
15273:  * void *nssData is NULL in this release, but is reserved for future versions of 
15273:  * NSS to pass some future status information * back to the shutdown function. 
15273:  *
15273:  * If the shutdown function returns SECFailure,
15273:  * Shutdown will still complete, but NSS_Shutdown() will return SECFailure.
15273:  */
15273: typedef SECStatus (*NSS_ShutdownFunc)(void *appData, void *nssData);
15273: 
15273: /*
15273:  * Register a shutdown function.
15273:  */
15273: SECStatus NSS_RegisterShutdown(NSS_ShutdownFunc sFunc, void *appData);
15273: 
15273: /*
15273:  * Remove an existing shutdown function (you may do this if your library is
15273:  * complete and going away, but NSS is still running).
15273:  */
15273: SECStatus NSS_UnregisterShutdown(NSS_ShutdownFunc sFunc, void *appData);
15273: 
15273: /* 
15273:  * Close the Cert, Key databases.
15273:  */
15273: extern SECStatus NSS_Shutdown(void);
15273: 
15273: /*
15273:  * set the PKCS #11 strings for the internal token.
15273:  */
37961: void PK11_ConfigurePKCS11(const char *man, const char *libdesc, 
37961: 	const char *tokdesc, const char *ptokdesc, const char *slotdesc, 
37961: 	const char *pslotdesc, const char *fslotdesc, const char *fpslotdesc,
15273:         int minPwd, int pwRequired);
15273: 
15273: /*
15273:  * Dump the contents of the certificate cache and the temporary cert store.
15273:  * Use to detect leaked references of certs at shutdown time.
15273:  */
15273: void nss_DumpCertificateCacheInfo(void);
15273: 
15273: SEC_END_PROTOS
15273: 
23987: #endif /* RC_INVOKED */
15273: #endif /* __nss_h_ */
