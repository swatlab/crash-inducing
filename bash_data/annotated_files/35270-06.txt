    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Christopher A. Aillon <christopher@aillon.com>
    1:  * Portions created by the Initial Developer are Copyright (C) 2002
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Christopher A. Aillon <christopher@aillon.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /* DOM object returned from element.getComputedStyle() */
    1: 
    1: #ifndef nsComputedDOMStyle_h__
    1: #define nsComputedDOMStyle_h__
    1: 
30385: #include "nsICSSDeclaration.h"
    1: 
    1: #include "nsROCSSPrimitiveValue.h"
    1: #include "nsDOMCSSRGBColor.h"
    1: #include "nsDOMCSSValueList.h"
    1: #include "nsCSSProps.h"
    1: 
    1: #include "nsIPresShell.h"
    1: #include "nsIContent.h"
    1: #include "nsIFrame.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsWeakReference.h"
    1: #include "nsAutoPtr.h"
25276: #include "nsStyleStruct.h"
    1: 
30385: class nsComputedDOMStyle : public nsICSSDeclaration,
30385:                            public nsWrapperCache
    1: {
    1: public:
22063:   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
35270:   NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(nsComputedDOMStyle)
    1: 
    1:   NS_IMETHOD Init(nsIDOMElement *aElement,
    1:                   const nsAString& aPseudoElt,
    1:                   nsIPresShell *aPresShell);
    1: 
    1:   NS_DECL_NSICSSDECLARATION
    1: 
    1:   NS_DECL_NSIDOMCSSSTYLEDECLARATION
    1: 
    1:   nsComputedDOMStyle();
    1:   virtual ~nsComputedDOMStyle();
    1: 
    1:   static void Shutdown();
    1: 
33481:   virtual nsINode *GetParentObject()
30385:   {
30385:     return mContent;
30385:   }
30385: 
31311:   static already_AddRefed<nsStyleContext>
31311:   GetStyleContextForContent(nsIContent* aContent, nsIAtom* aPseudo,
31311:                             nsIPresShell* aPresShell);
31311: 
31707:   static already_AddRefed<nsStyleContext>
31707:   GetStyleContextForContentNoFlush(nsIContent* aContent, nsIAtom* aPseudo,
31707:                                    nsIPresShell* aPresShell);
31707: 
31707:   static nsIPresShell*
31707:   GetPresShellForContent(nsIContent* aContent);
31707: 
    1: private:
25450:   void AssertFlushedPendingReflows() {
25450:     NS_ASSERTION(mFlushedPendingReflows,
25450:                  "property getter should have been marked layout-dependent");
25450:   }
    1:   
    1: #define STYLE_STRUCT(name_, checkdata_cb_, ctor_args_)                  \
    1:   const nsStyle##name_ * GetStyle##name_() {                            \
 1102:     return mStyleContextHolder->GetStyle##name_();                      \
    1:   }
    1: #include "nsStyleStructList.h"
    1: #undef STYLE_STRUCT
    1: 
20039:   nsresult GetEllipseRadii(const nsStyleCorners& aRadius,
20039:                            PRUint8 aFullCorner,
20039:                            nsIDOMCSSValue** aValue);
20039: 
    1:   nsresult GetOffsetWidthFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetAbsoluteOffset(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetRelativeOffset(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetStaticOffset(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetPaddingWidthFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetBorderColorsFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetBorderStyleFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetBorderWidthFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetBorderColorFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetMarginWidthFor(PRUint8 aSide, nsIDOMCSSValue** aValue);
    1: 
    1:   PRBool GetLineHeightCoord(nscoord& aCoord);
    1: 
15699:   nsresult GetCSSShadowArray(nsCSSShadowArray* aArray,
15699:                              const nscolor& aDefaultColor,
24818:                              PRBool aIsBoxShadow,
15699:                              nsIDOMCSSValue** aValue);
15699: 
25276:   nsresult GetBackgroundList(PRUint8 nsStyleBackground::Layer::* aMember,
25276:                              PRUint32 nsStyleBackground::* aCount,
25276:                              const PRInt32 aTable[],
25276:                              nsIDOMCSSValue** aResult);
25276: 
30993:   nsresult GetCSSGradientString(const nsStyleGradient* aGradient,
30993:                                 nsAString& aString);
31749:   nsresult GetImageRectString(nsIURI* aURI,
31749:                               const nsStyleSides& aCropRect,
31749:                               nsString& aString);
30993: 
    1:   /* Properties Queryable as CSSValues */
    1: 
    1:   nsresult GetAppearance(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Box properties */
    1:   nsresult GetBoxAlign(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxDirection(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxFlex(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxOrdinalGroup(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxOrient(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxPack(nsIDOMCSSValue** aValue);
    1:   nsresult GetBoxSizing(nsIDOMCSSValue** aValue);
    1: 
    1:   nsresult GetWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetHeight(nsIDOMCSSValue** aValue);
    1:   nsresult GetMaxHeight(nsIDOMCSSValue** aValue);
    1:   nsresult GetMaxWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetMinHeight(nsIDOMCSSValue** aValue);
    1:   nsresult GetMinWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetTop(nsIDOMCSSValue** aValue);
    1:   nsresult GetRight(nsIDOMCSSValue** aValue);
    1:   nsresult GetBottom(nsIDOMCSSValue** aValue);
15260:   nsresult GetStackSizing(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Font properties */
    1:   nsresult GetColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetFontFamily(nsIDOMCSSValue** aValue);
    1:   nsresult GetFontSize(nsIDOMCSSValue** aValue);
    1:   nsresult GetFontSizeAdjust(nsIDOMCSSValue** aValue);
24408:   nsresult GetFontStretch(nsIDOMCSSValue** aValue);
24408:   nsresult GetFontStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetFontWeight(nsIDOMCSSValue** aValue);
    1:   nsresult GetFontVariant(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Background properties */
    1:   nsresult GetBackgroundAttachment(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundImage(nsIDOMCSSValue** aValue);
 3750:   nsresult GetBackgroundPosition(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundRepeat(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundClip(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundInlinePolicy(nsIDOMCSSValue** aValue);
    1:   nsresult GetBackgroundOrigin(nsIDOMCSSValue** aValue);
30894:   nsresult GetMozBackgroundSize(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Padding properties */
    1:   nsresult GetPadding(nsIDOMCSSValue** aValue);
    1:   nsresult GetPaddingTop(nsIDOMCSSValue** aValue);
    1:   nsresult GetPaddingBottom(nsIDOMCSSValue** aValue);
    1:   nsresult GetPaddingLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetPaddingRight(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Table Properties */
    1:   nsresult GetBorderCollapse(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderSpacing(nsIDOMCSSValue** aValue);
    1:   nsresult GetCaptionSide(nsIDOMCSSValue** aValue);
    1:   nsresult GetEmptyCells(nsIDOMCSSValue** aValue);
    1:   nsresult GetTableLayout(nsIDOMCSSValue** aValue);
    1:   nsresult GetVerticalAlign(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Border Properties */
    1:   nsresult GetBorderStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderTopStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderBottomStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderLeftStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRightStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderTopWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderBottomWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderLeftWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRightWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderTopColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderBottomColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderLeftColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRightColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderBottomColors(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderLeftColors(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRightColors(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderTopColors(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRadiusBottomLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRadiusBottomRight(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRadiusTopLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetBorderRadiusTopRight(nsIDOMCSSValue** aValue);
    1:   nsresult GetFloatEdge(nsIDOMCSSValue** aValue);
15992:   nsresult GetBorderImage(nsIDOMCSSValue** aValue);
    1: 
15699:   /* Box Shadow */
15699:   nsresult GetBoxShadow(nsIDOMCSSValue** aValue);
15699: 
20464:   /* Window Shadow */
20464:   nsresult GetWindowShadow(nsIDOMCSSValue** aValue);
20464: 
    1:   /* Margin Properties */
    1:   nsresult GetMarginWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetMarginTopWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetMarginBottomWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetMarginLeftWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetMarginRightWidth(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Outline Properties */
    1:   nsresult GetOutline(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineStyle(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineColor(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineOffset(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineRadiusBottomLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineRadiusBottomRight(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineRadiusTopLeft(nsIDOMCSSValue** aValue);
    1:   nsresult GetOutlineRadiusTopRight(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Content Properties */
 3750:   nsresult GetContent(nsIDOMCSSValue** aValue);
    1:   nsresult GetCounterIncrement(nsIDOMCSSValue** aValue);
    1:   nsresult GetCounterReset(nsIDOMCSSValue** aValue);
    1:   nsresult GetMarkerOffset(nsIDOMCSSValue** aValue);
    1: 
 3750:   /* Quotes Properties */
 3750:   nsresult GetQuotes(nsIDOMCSSValue** aValue);
 3750: 
    1:   /* z-index */
    1:   nsresult GetZIndex(nsIDOMCSSValue** aValue);
    1: 
    1:   /* List properties */
    1:   nsresult GetListStyleImage(nsIDOMCSSValue** aValue);
    1:   nsresult GetListStylePosition(nsIDOMCSSValue** aValue);
    1:   nsresult GetListStyleType(nsIDOMCSSValue** aValue);
    1:   nsresult GetImageRegion(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Text Properties */
    1:   nsresult GetLineHeight(nsIDOMCSSValue** aValue);
    1:   nsresult GetTextAlign(nsIDOMCSSValue** aValue);
    1:   nsresult GetTextDecoration(nsIDOMCSSValue** aValue);
    1:   nsresult GetTextIndent(nsIDOMCSSValue** aValue);
    1:   nsresult GetTextTransform(nsIDOMCSSValue** aValue);
15268:   nsresult GetTextShadow(nsIDOMCSSValue** aValue);
    1:   nsresult GetLetterSpacing(nsIDOMCSSValue** aValue);
    1:   nsresult GetWordSpacing(nsIDOMCSSValue** aValue);
    1:   nsresult GetWhiteSpace(nsIDOMCSSValue** aValue);
16166:   nsresult GetWordWrap(nsIDOMCSSValue** aValue);
33208:   nsresult GetMozTabSize(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Visibility properties */
    1:   nsresult GetOpacity(nsIDOMCSSValue** aValue);
32021:   nsresult GetPointerEvents(nsIDOMCSSValue** aValue);
    1:   nsresult GetVisibility(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Direction properties */
    1:   nsresult GetDirection(nsIDOMCSSValue** aValue);
    1:   nsresult GetUnicodeBidi(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Display properties */
    1:   nsresult GetBinding(nsIDOMCSSValue** aValue);
    1:   nsresult GetClear(nsIDOMCSSValue** aValue);
    1:   nsresult GetCssFloat(nsIDOMCSSValue** aValue);
    1:   nsresult GetDisplay(nsIDOMCSSValue** aValue);
    1:   nsresult GetPosition(nsIDOMCSSValue** aValue);
    1:   nsresult GetClip(nsIDOMCSSValue** aValue);
    1:   nsresult GetOverflow(nsIDOMCSSValue** aValue);
    1:   nsresult GetOverflowX(nsIDOMCSSValue** aValue);
    1:   nsresult GetOverflowY(nsIDOMCSSValue** aValue);
 3750:   nsresult GetPageBreakAfter(nsIDOMCSSValue** aValue);
 3750:   nsresult GetPageBreakBefore(nsIDOMCSSValue** aValue);
19214:   nsresult GetMozTransform(nsIDOMCSSValue** aValue);
19214:   nsresult GetMozTransformOrigin(nsIDOMCSSValue **aValue);
    1: 
    1:   /* User interface properties */
    1:   nsresult GetCursor(nsIDOMCSSValue** aValue);
 3750:   nsresult GetForceBrokenImageIcon(nsIDOMCSSValue** aValue);
 1520:   nsresult GetIMEMode(nsIDOMCSSValue** aValue);
    1:   nsresult GetUserFocus(nsIDOMCSSValue** aValue);
    1:   nsresult GetUserInput(nsIDOMCSSValue** aValue);
    1:   nsresult GetUserModify(nsIDOMCSSValue** aValue);
    1:   nsresult GetUserSelect(nsIDOMCSSValue** aValue);
    1: 
    1:   /* Column properties */
    1:   nsresult GetColumnCount(nsIDOMCSSValue** aValue);
    1:   nsresult GetColumnWidth(nsIDOMCSSValue** aValue);
    1:   nsresult GetColumnGap(nsIDOMCSSValue** aValue);
16055:   nsresult GetColumnRuleWidth(nsIDOMCSSValue** aValue);
16055:   nsresult GetColumnRuleStyle(nsIDOMCSSValue** aValue);
16055:   nsresult GetColumnRuleColor(nsIDOMCSSValue** aValue);
    1: 
31702:   /* CSS Transitions */
31702:   nsresult GetTransitionProperty(nsIDOMCSSValue** aValue);
31702:   nsresult GetTransitionDuration(nsIDOMCSSValue** aValue);
31702:   nsresult GetTransitionDelay(nsIDOMCSSValue** aValue);
31702:   nsresult GetTransitionTimingFunction(nsIDOMCSSValue** aValue);
31702: 
 3735: #ifdef MOZ_SVG
 3735:   /* SVG properties */
 3735:   nsresult GetSVGPaintFor(PRBool aFill, nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetFill(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStroke(nsIDOMCSSValue** aValue);
 3735:   nsresult GetMarkerEnd(nsIDOMCSSValue** aValue);
 3735:   nsresult GetMarkerMid(nsIDOMCSSValue** aValue);
 3735:   nsresult GetMarkerStart(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeDasharray(nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetStrokeDashoffset(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeWidth(nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetFillOpacity(nsIDOMCSSValue** aValue);
 3735:   nsresult GetFloodOpacity(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStopOpacity(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeMiterlimit(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeOpacity(nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetClipRule(nsIDOMCSSValue** aValue);
 3735:   nsresult GetFillRule(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeLinecap(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStrokeLinejoin(nsIDOMCSSValue** aValue);
 3735:   nsresult GetTextAnchor(nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetColorInterpolation(nsIDOMCSSValue** aValue);
 3735:   nsresult GetColorInterpolationFilters(nsIDOMCSSValue** aValue);
 3735:   nsresult GetDominantBaseline(nsIDOMCSSValue** aValue);
26449:   nsresult GetImageRendering(nsIDOMCSSValue** aValue);
 3735:   nsresult GetShapeRendering(nsIDOMCSSValue** aValue);
 3735:   nsresult GetTextRendering(nsIDOMCSSValue** aValue);
 3735: 
 4029:   nsresult GetFloodColor(nsIDOMCSSValue** aValue);
 4029:   nsresult GetLightingColor(nsIDOMCSSValue** aValue);
 3735:   nsresult GetStopColor(nsIDOMCSSValue** aValue);
 3735: 
 3735:   nsresult GetClipPath(nsIDOMCSSValue** aValue);
 3735:   nsresult GetFilter(nsIDOMCSSValue** aValue);
 3735:   nsresult GetMask(nsIDOMCSSValue** aValue);
 3735: #endif // MOZ_SVG
 3735: 
    1:   nsROCSSPrimitiveValue* GetROCSSPrimitiveValue();
    1:   nsDOMCSSValueList* GetROCSSValueList(PRBool aCommaDelimited);
    1:   nsresult SetToRGBAColor(nsROCSSPrimitiveValue* aValue, nscolor aColor);
31749:   nsresult SetValueToStyleImage(const nsStyleImage& aStyleImage,
31749:                                 nsROCSSPrimitiveValue* aValue);
    1:   
    1:   /**
    1:    * A method to get a percentage base for a percentage value.  Returns PR_TRUE
    1:    * if a percentage base value was determined, PR_FALSE otherwise.
    1:    */
    1:   typedef PRBool (nsComputedDOMStyle::*PercentageBaseGetter)(nscoord&);
    1: 
    1:   /**
    1:    * Method to set aValue to aCoord.  If aCoord is a percentage value and
    1:    * aPercentageBaseGetter is not null, aPercentageBaseGetter is called.  If it
    1:    * returns PR_TRUE, the percentage base it outputs in its out param is used
    1:    * to compute an nscoord value.  If the getter is null or returns PR_FALSE,
    1:    * the percent value of aCoord is set as a percent value on aValue.  aTable,
    1:    * if not null, is the keyword table to handle eStyleUnit_Enumerated.  When
    1:    * calling SetAppUnits on aValue (for coord or percent values), the value
32531:    * passed in will be NS_MAX of the value in aMinAppUnits and the NS_MIN of
  722:    * the actual value in aCoord and the value in aMaxAppUnits.
    1:    *
    1:    * XXXbz should caller pass in some sort of bitfield indicating which units
    1:    * can be expected or something?
    1:    */
  722:   void SetValueToCoord(nsROCSSPrimitiveValue* aValue,
  722:                        const nsStyleCoord& aCoord,
    1:                        PercentageBaseGetter aPercentageBaseGetter = nsnull,
    1:                        const PRInt32 aTable[] = nsnull,
  722:                        nscoord aMinAppUnits = nscoord_MIN,
  722:                        nscoord aMaxAppUnits = nscoord_MAX);
    1: 
    1:   /**
    1:    * If aCoord is a eStyleUnit_Coord returns the nscoord.  If it's
  722:    * eStyleUnit_Percent, attempts to resolve the percentage base and returns
  722:    * the resulting nscoord.  If it's some other unit or a percentge base can't
  722:    * be determined, returns aDefaultValue.
    1:    */
  722:   nscoord StyleCoordToNSCoord(const nsStyleCoord& aCoord,
  722:                               PercentageBaseGetter aPercentageBaseGetter,
  722:                               nscoord aDefaultValue);
    1: 
    1:   PRBool GetCBContentWidth(nscoord& aWidth);
    1:   PRBool GetCBContentHeight(nscoord& aWidth);
19214:   PRBool GetFrameBoundsWidthForTransform(nscoord &aWidth);
19214:   PRBool GetFrameBoundsHeightForTransform(nscoord &aHeight);
    1:   PRBool GetFrameBorderRectWidth(nscoord& aWidth);
    1: 
    1:   struct ComputedStyleMapEntry
    1:   {
    1:     // Create a pointer-to-member-function type.
    1:     typedef nsresult (nsComputedDOMStyle::*ComputeMethod)(nsIDOMCSSValue**);
    1: 
    1:     nsCSSProperty mProperty;
    1:     ComputeMethod mGetter;
25450:     PRBool mNeedsLayoutFlush;
    1:   };
    1: 
    1:   static const ComputedStyleMapEntry* GetQueryablePropertyMap(PRUint32* aLength);
    1: 
    1:   // We don't really have a good immutable representation of "presentation".
    1:   // Given the way GetComputedStyle is currently used, we should just grab the
    1:   // 0th presshell, if any, from the document.
    1:   nsWeakPtr mDocumentWeak;
    1:   nsCOMPtr<nsIContent> mContent;
    1: 
    1:   /*
 1102:    * Strong reference to the style context while we're accessing the data from
 1102:    * it.  This can be either a style context we resolved ourselves or a style
 1102:    * context we got from our frame.
    1:    */
    1:   nsRefPtr<nsStyleContext> mStyleContextHolder;
    1:   nsCOMPtr<nsIAtom> mPseudo;
    1: 
    1:   /*
10950:    * While computing style data, the primary frame for mContent --- named "outer"
10950:    * because we should use it to compute positioning data.  Null
    1:    * otherwise.
    1:    */
10950:   nsIFrame* mOuterFrame;
10950:   /*
10950:    * While computing style data, the "inner frame" for mContent --- the frame
10950:    * which we should use to compute margin, border, padding and content data.  Null
10950:    * otherwise.
10950:    */
10950:   nsIFrame* mInnerFrame;
 1102:   /*
 1102:    * While computing style data, the presshell we're working with.  Null
 1102:    * otherwise.
 1102:    */
 1102:   nsIPresShell* mPresShell;
    1: 
    1:   PRInt32 mAppUnitsPerInch; /* For unit conversions */
25450: 
25450: #ifdef DEBUG
25450:   PRBool mFlushedPendingReflows;
25450: #endif
    1: };
    1: 
30385: nsresult 
30385: NS_NewComputedDOMStyle(nsIDOMElement *aElement, const nsAString &aPseudoElt,
30385:                        nsIPresShell *aPresShell,
30385:                        nsComputedDOMStyle **aComputedStyle);
30385: 
    1: #endif /* nsComputedDOMStyle_h__ */
    1: 
