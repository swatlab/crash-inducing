 98983: # This Source Code Form is subject to the terms of the Mozilla Public
 98983: # License, v. 2.0. If a copy of the MPL was not distributed with this
 98983: # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 35963: 
 35963: import string, sys
 35963: 
 71235: def usage():
 71235:     print >>sys.stderr, """
 71235: %s template_file -t unit_tests... -e extra_protocols...
 71235: 
 71235:   TEMPLATE_FILE is used to generate to generate the unit-tester .cpp
 71235:   UNIT_TESTS are the top-level protocols defining unit tests
 71235:   EXTRA_PROTOCOLS are top-level protocols for subprocesses that can be
 71235:                   spawned in tests but are not unit tests in and of
 71235:                   themselves
 71235: """% (sys.argv[0])
 71235:     sys.exit(1)
 71235: 
 35963: def main(argv):
 35963:     template = argv[1]
 71235: 
 71235:     if argv[2] != '-t': usage()
 71235:     i = 3
 71235:     unittests = []
 71235:     while argv[i] != '-e':
 71235:         unittests.append(argv[i])
 71235:         i += 1
 71235: 
 71235:     extras = argv[(i+1):]
 35963: 
 35963:     includes = '\n'.join([
 35963:         '#include "%s.h"'% (t) for t in unittests ])
 35963: 
 35963: 
 35963:     enum_values = '\n'.join([
 71235:         '    %s,'% (t) for t in unittests+extras ])
 35963:     last_enum = unittests[-1]
 35963: 
 35963: 
 35963:     string_to_enums = '\n'.join([
 35963:         '''    else if (!strcmp(aString, "%s"))
 71235:         return %s;'''% (t, t) for t in unittests+extras ])
 35963: 
 35963:     enum_to_strings = '\n'.join([
 35963:         '''    case %s:
 71235:         return "%s";'''%(t, t) for t in unittests+extras ])
 35963: 
 36159:     parent_delete_cases = '\n'.join([
 36159: '''    case %s: {
 71235:            delete reinterpret_cast<%sParent*>(gParentActor);
 36159:            return;
 36159:        }
 36159: '''% (t, t) for t in unittests ])
 35963: 
 83466:     parent_enabled_cases_proc = '\n'.join([
 83466: '''    case %s: {
 83466:         if (!%sParent::RunTestInProcesses()) {
 83466:             passed("N/A to proc");
 83466:             DeferredParentShutdown();
 83466:             return;
 83466:         }
 83466:         break;
 83466:        }
 83466: ''' % (t, t) for t in unittests ])
 83466: 
 83466:     parent_main_cases_proc = '\n'.join([
 35963: '''    case %s: {
 35963:         %sParent** parent =
 35963:         reinterpret_cast<%sParent**>(&gParentActor);
 35963:         *parent = new %sParent();
 36016:         (*parent)->Open(transport, child);
 35963:         return (*parent)->Main();
 35963:         }
 35963: '''% (t, t, t, t) for t in unittests ])
 35963: 
 83466:     parent_enabled_cases_thread = '\n'.join([
 83466: '''    case %s: {
 83466:         if (!%sParent::RunTestInThreads()) {
 83466:             passed("N/A to threads");
 83466:             DeferredParentShutdown();
 83466:             return;
 83466:         }
 83466:         break;
 83466:        }
 83466: ''' % (t, t) for t in unittests ])
 83466: 
 83466:     parent_main_cases_thread = '\n'.join([
 83466: '''    case %s: {
 83466:         %sParent** parent =
 83466:         reinterpret_cast<%sParent**>(&gParentActor);
 83466:         *parent = new %sParent();
 83466: 
 83466:         %sChild** child =
 83466:         reinterpret_cast<%sChild**>(&gChildActor);
 83466:         *child = new %sChild();
 83466: 
104602:         ::mozilla::ipc::AsyncChannel *childChannel = (*child)->GetIPCChannel();
104602:         ::mozilla::ipc::AsyncChannel::Side parentSide = 
104602:             ::mozilla::ipc::AsyncChannel::Parent;
 83466: 
 83466:         (*parent)->Open(childChannel, childMessageLoop, parentSide);
 83466:         return (*parent)->Main();
 83466:         }
 83466: '''% (t, t, t, t, t, t, t) for t in unittests ])
 83466: 
 36159:     child_delete_cases = '\n'.join([
 36159: '''    case %s: {
 71235:            delete reinterpret_cast<%sChild*>(gChildActor);
 36159:            return;
 36159:        }
 71235: '''% (t, t) for t in unittests+extras ])
 36159: 
 35963: 
 35963:     child_init_cases = '\n'.join([
 35963: '''    case %s: {
 35963:         %sChild** child =
 35963:             reinterpret_cast<%sChild**>(&gChildActor);
 35963:         *child = new %sChild();
 36016:         (*child)->Open(transport, parent, worker);
 35963:         return;
 35963:     }
 71235: '''% (t, t, t, t) for t in unittests+extras ])
 35963: 
 35963:     templatefile = open(template, 'r')
 35963:     sys.stdout.write(
 35963:         string.Template(templatefile.read()).substitute(
 35963:             INCLUDES=includes,
 35963:             ENUM_VALUES=enum_values, LAST_ENUM=last_enum,
 35963:             STRING_TO_ENUMS=string_to_enums,
 35963:             ENUM_TO_STRINGS=enum_to_strings,
 36159:             PARENT_DELETE_CASES=parent_delete_cases,
 83466:             PARENT_ENABLED_CASES_PROC=parent_enabled_cases_proc,
 83466:             PARENT_MAIN_CASES_PROC=parent_main_cases_proc,
 83466:             PARENT_ENABLED_CASES_THREAD=parent_enabled_cases_thread,
 83466:             PARENT_MAIN_CASES_THREAD=parent_main_cases_thread,
 36159:             CHILD_DELETE_CASES=child_delete_cases,
 36063:             CHILD_INIT_CASES=child_init_cases))
 35963:     templatefile.close()
 35963: 
 35963: if __name__ == '__main__':
 35963:     main(sys.argv)
