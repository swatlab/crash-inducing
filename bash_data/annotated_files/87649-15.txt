32218: /* ***** BEGIN LICENSE BLOCK *****
32218:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
32218:  *
32218:  * The contents of this file are subject to the Mozilla Public License Version
32218:  * 1.1 (the "License"); you may not use this file except in compliance with
32218:  * the License. You may obtain a copy of the License at
32218:  * http://www.mozilla.org/MPL/
32218:  *
32218:  * Software distributed under the License is distributed on an "AS IS" basis,
32218:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
32218:  * for the specific language governing rights and limitations under the
32218:  * License.
32218:  *
32218:  * The Original Code is mozilla.org Code.
32218:  *
32218:  * The Initial Developer of the Original Code is
32218:  * Dao Gottwald <dao@mozilla.com>.
32218:  * Portions created by the Initial Developer are Copyright (C) 2009
32218:  * the Initial Developer. All Rights Reserved.
32218:  *
32218:  * Contributor(s):
32218:  *
32218:  * Alternatively, the contents of this file may be used under the terms of
32218:  * either the GNU General Public License Version 2 or later (the "GPL"), or
32218:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
32218:  * in which case the provisions of the GPL or the LGPL are applicable instead
32218:  * of those above. If you wish to allow use of your version of this file only
32218:  * under the terms of either the GPL or the LGPL, and not to allow others to
32218:  * use your version of this file under the terms of the MPL, indicate your
32218:  * decision by deleting the provisions above and replace them with the notice
32218:  * and other provisions required by the GPL or the LGPL. If you do not delete
32218:  * the provisions above, a recipient may use your version of this file under
32218:  * the terms of any one of the MPL, the GPL or the LGPL.
32218:  *
32218:  * ***** END LICENSE BLOCK ***** */
32218: 
32218: let EXPORTED_SYMBOLS = ["LightweightThemeConsumer"];
32218: 
32218: function LightweightThemeConsumer(aDocument) {
32218:   this._doc = aDocument;
32218:   this._footerId = aDocument.documentElement.getAttribute("lightweightthemesfooter");
32218: 
32218:   Components.classes["@mozilla.org/observer-service;1"]
32218:             .getService(Components.interfaces.nsIObserverService)
35218:             .addObserver(this, "lightweight-theme-styling-update", false);
32218: 
32218:   var temp = {};
32218:   Components.utils.import("resource://gre/modules/LightweightThemeManager.jsm", temp);
34618:   this._update(temp.LightweightThemeManager.currentThemeForDisplay);
32218: }
32218: 
32218: LightweightThemeConsumer.prototype = {
32218:   observe: function (aSubject, aTopic, aData) {
35218:     if (aTopic != "lightweight-theme-styling-update")
32218:       return;
32218: 
32218:     this._update(JSON.parse(aData));
32218:   },
32218: 
32218:   destroy: function () {
32218:     Components.classes["@mozilla.org/observer-service;1"]
32218:               .getService(Components.interfaces.nsIObserverService)
35218:               .removeObserver(this, "lightweight-theme-styling-update");
32218: 
32218:     this._doc = null;
32218:   },
32218: 
32218:   _update: function (aData) {
32218:     if (!aData)
32945:       aData = { headerURL: "", footerURL: "", textcolor: "", accentcolor: "" };
32218: 
32218:     var root = this._doc.documentElement;
32218:     var active = !!aData.headerURL;
32218: 
32218:     if (active) {
32945:       root.style.color = aData.textcolor || "black";
32945:       root.style.backgroundColor = aData.accentcolor || "white";
32218:       let [r, g, b] = _parseRGB(this._doc.defaultView.getComputedStyle(root, "").color);
33379:       let luminance = 0.2125 * r + 0.7154 * g + 0.0721 * b;
33379:       root.setAttribute("lwthemetextcolor", luminance <= 110 ? "dark" : "bright");
32218:       root.setAttribute("lwtheme", "true");
32218:     } else {
32218:       root.style.color = "";
32945:       root.style.backgroundColor = "";
32218:       root.removeAttribute("lwthemetextcolor");
32218:       root.removeAttribute("lwtheme");
32218:     }
32218: 
32218:     _setImage(root, active, aData.headerURL);
32218:     if (this._footerId) {
32218:       let footer = this._doc.getElementById(this._footerId);
52007:       footer.style.backgroundColor = active ? aData.accentcolor || "white" : "";
32218:       _setImage(footer, active, aData.footerURL);
32218:       if (active && aData.footerURL)
32218:         footer.setAttribute("lwthemefooter", "true");
32218:       else
32218:         footer.removeAttribute("lwthemefooter");
32218:     }
32218: 
33439: #ifdef XP_MACOSX
34071:     if (active)
34071:       root.setAttribute("drawintitlebar", "true");
34071:     else
34071:       root.removeAttribute("drawintitlebar");
33439: #endif
32218:   }
32218: }
32218: 
32218: function _setImage(aElement, aActive, aURL) {
32218:   aElement.style.backgroundImage =
87639:     (aActive && aURL) ? 'url("' + aURL.replace(/"/g, '\\"') + '")' : "";
32218: }
32218: 
32218: function _parseRGB(aColorString) {
32218:   var rgb = aColorString.match(/^rgba?\((\d+), (\d+), (\d+)/);
32218:   rgb.shift();
32218:   return rgb.map(function (x) parseInt(x));
32218: }
