    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim: set ts=2 sw=2 et tw=78: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Johnny Stenback <jst@netscape.com> (original author)
16549:  *   Boris Zbarsky <bzbarsky@mit.edu>
36268:  *   Frederic Plourde <frederic.plourde@polymtl.ca>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * Class for managing loading of a subframe (creation of the docshell,
    1:  * handling of loads in it, recursion-checking).
    1:  */
    1: 
36268: #include "base/basictypes.h"
36268: 
36268: #include "prenv.h"
36268: 
    1: #include "nsIDOMHTMLIFrameElement.h"
    1: #include "nsIDOMHTMLFrameElement.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsIPresShell.h"
    1: #include "nsIContent.h"
34245: #include "nsIContentViewer.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMDocument.h"
    1: #include "nsIDOMWindow.h"
    1: #include "nsPIDOMWindow.h"
    1: #include "nsIWebNavigation.h"
46771: #include "nsIWebProgress.h"
    1: #include "nsIDocShell.h"
    1: #include "nsIDocShellTreeItem.h"
    1: #include "nsIDocShellTreeNode.h"
    1: #include "nsIDocShellTreeOwner.h"
    1: #include "nsIDocShellLoadInfo.h"
    1: #include "nsIBaseWindow.h"
    1: #include "nsContentUtils.h"
46761: #include "nsIXPConnect.h"
46761: #include "nsIJSContextStack.h"
    1: #include "nsUnicharUtils.h"
    1: #include "nsIScriptGlobalObject.h"
    1: #include "nsIScriptSecurityManager.h"
34245: #include "nsIScrollable.h"
    1: #include "nsFrameLoader.h"
    1: #include "nsIDOMEventTarget.h"
16549: #include "nsIFrame.h"
51754: #include "nsSubDocumentFrame.h"
16549: #include "nsDOMError.h"
16549: #include "nsGUIEvent.h"
16549: #include "nsEventDispatcher.h"
20146: #include "nsISHistory.h"
23620: #include "nsISHistoryInternal.h"
50721: #include "nsIDocShellHistory.h"
34245: #include "nsIDOMNSHTMLDocument.h"
47934: #include "nsIXULWindow.h"
57958: #include "nsIEditor.h"
57958: #include "nsIEditorDocShell.h"
46697: 
36268: #include "nsLayoutUtils.h"
36280: #include "nsIView.h"
38663: #include "nsPLDOMEvent.h"
    1: 
    1: #include "nsIURI.h"
    1: #include "nsIURL.h"
    1: #include "nsNetUtil.h"
    1: 
    1: #include "nsGkAtoms.h"
    1: #include "nsINameSpaceManager.h"
    1: 
12256: #include "nsThreadUtils.h"
35581: #include "nsIContentViewer.h"
36268: #include "nsIView.h"
36268: 
46491: #include "nsIDOMChromeWindow.h"
42412: #include "nsInProcessTabChildGlobal.h"
42907: #include "mozilla/AutoRestore.h"
47933: #include "mozilla/unused.h"
46491: 
60445: #include "Layers.h"
60445: 
47933: #include "ContentParent.h"
36268: #include "TabParent.h"
60446: #include "mozilla/layout/RenderFrameParent.h"
36268: 
36268: using namespace mozilla;
36268: using namespace mozilla::dom;
60445: using namespace mozilla::layers;
60446: typedef FrameMetrics::ViewID ViewID;
60445: 
46761: #include "jsapi.h"
42163: 
12256: class nsAsyncDocShellDestroyer : public nsRunnable
12256: {
12256: public:
12256:   nsAsyncDocShellDestroyer(nsIDocShell* aDocShell)
12256:     : mDocShell(aDocShell)
12256:   {
12256:   }
12256: 
12256:   NS_IMETHOD Run()
12256:   {
12256:     nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
12256:     if (base_win) {
12256:       base_win->Destroy();
12256:     }
12261:     return NS_OK;
12256:   }
12256:   nsRefPtr<nsIDocShell> mDocShell;
12256: };
12256: 
60445: static void InvalidateFrame(nsIFrame* aFrame)
60445: {
60445:   nsRect rect = nsRect(nsPoint(0, 0), aFrame->GetRect().Size());
60445:   // NB: we pass INVALIDATE_NO_THEBES_LAYERS here to keep view
60445:   // semantics the same for both in-process and out-of-process
60445:   // <browser>.  This is just a transform of the layer subtree in
60445:   // both.
60445:   aFrame->InvalidateWithFlags(rect, nsIFrame::INVALIDATE_NO_THEBES_LAYERS);
60445: }
60445: 
60445: NS_IMPL_ISUPPORTS1(nsContentView, nsIContentView)
60445: 
60445: bool
60445: nsContentView::IsRoot() const
60445: {
60445:   return mScrollId == FrameMetrics::ROOT_SCROLL_ID;
60445: }
60445: 
60445: nsresult
60445: nsContentView::Update(const ViewConfig& aConfig)
60445: {
60445:   if (aConfig == mConfig) {
60445:     return NS_OK;
60445:   }
60445:   mConfig = aConfig;
60445: 
60445:   // View changed.  Try to locate our subdoc frame and invalidate
60445:   // it if found.
60445:   if (!mOwnerContent) {
60445:     if (IsRoot()) {
60445:       // Oops, don't have a frame right now.  That's OK; the view
60445:       // config persists and will apply to the next frame we get, if we
60445:       // ever get one.
60445:       return NS_OK;
60445:     } else {
60445:       // This view is no longer valid.
60445:       return NS_ERROR_NOT_AVAILABLE;
60445:     }
60445:   }
60445: 
60445:   nsIFrame* frame = mOwnerContent->GetPrimaryFrame();
60445: 
60445:   // XXX could be clever here and compute a smaller invalidation
60445:   // rect
60445:   InvalidateFrame(frame);
60445:   return NS_OK;
60445: }
60445: 
60445: NS_IMETHODIMP
60445: nsContentView::ScrollTo(float aXpx, float aYpx)
60445: {
60445:   ViewConfig config(mConfig);
60445:   config.mScrollOffset = nsPoint(nsPresContext::CSSPixelsToAppUnits(aXpx),
60445:                                  nsPresContext::CSSPixelsToAppUnits(aYpx));
60445:   return Update(config);
60445: }
60445: 
60445: NS_IMETHODIMP
60445: nsContentView::ScrollBy(float aDXpx, float aDYpx)
60445: {
60445:   ViewConfig config(mConfig);
60445:   config.mScrollOffset.MoveBy(nsPresContext::CSSPixelsToAppUnits(aDXpx),
60445:                               nsPresContext::CSSPixelsToAppUnits(aDYpx));
60445:   return Update(config);
60445: }
60445: 
60445: NS_IMETHODIMP
60445: nsContentView::SetScale(float aXScale, float aYScale)
60445: {
60445:   ViewConfig config(mConfig);
60445:   config.mXScale = aXScale;
60445:   config.mYScale = aYScale;
60445:   return Update(config);
60445: }
60445: 
60445: NS_IMETHODIMP
60445: nsContentView::GetScrollX(float* aViewScrollX)
60445: {
60445:   *aViewScrollX = nsPresContext::AppUnitsToFloatCSSPixels(
60445:     mConfig.mScrollOffset.x);
60445:   return NS_OK;
60445: }
60445: 
60445: NS_IMETHODIMP
60445: nsContentView::GetScrollY(float* aViewScrollY)
60445: {
60445:   *aViewScrollY = nsPresContext::AppUnitsToFloatCSSPixels(
60445:     mConfig.mScrollOffset.y);
60445:   return NS_OK;
60445: }
60445: 
60445: NS_IMETHODIMP
60449: nsContentView::GetViewportWidth(float* aWidth)
60449: {
60449:   *aWidth = nsPresContext::AppUnitsToFloatCSSPixels(mViewportSize.width);
60449:   return NS_OK;
60449: }
60449: 
60449: NS_IMETHODIMP
60449: nsContentView::GetViewportHeight(float* aHeight)
60449: {
60449:   *aHeight = nsPresContext::AppUnitsToFloatCSSPixels(mViewportSize.height);
60449:   return NS_OK;
60449: }
60449: 
60449: NS_IMETHODIMP
60449: nsContentView::GetContentWidth(float* aWidth)
60449: {
60449:   *aWidth = nsPresContext::AppUnitsToFloatCSSPixels(mContentSize.width);
60449:   return NS_OK;
60449: }
60449: 
60449: NS_IMETHODIMP
60449: nsContentView::GetContentHeight(float* aHeight)
60449: {
60449:   *aHeight = nsPresContext::AppUnitsToFloatCSSPixels(mContentSize.height);
60449:   return NS_OK;
60449: }
60449: 
60449: NS_IMETHODIMP
60445: nsContentView::GetId(nsContentViewId* aId)
60445: {
60445:   NS_ASSERTION(sizeof(nsContentViewId) == sizeof(ViewID),
60445:                "ID size for XPCOM ID and internal ID type are not the same!");
60445:   *aId = mScrollId;
60445:   return NS_OK;
60445: }
60445: 
    1: // Bug 136580: Limit to the number of nested content frames that can have the
    1: //             same URL. This is to stop content that is recursively loading
    1: //             itself.  Note that "#foo" on the end of URL doesn't affect
    1: //             whether it's considered identical, but "?foo" or ";foo" are
    1: //             considered and compared.
    1: // Bug 228829: Limit this to 1, like IE does.
    1: #define MAX_SAME_URL_CONTENT_FRAMES 1
    1: 
    1: // Bug 8065: Limit content frame depth to some reasonable level. This
    1: // does not count chrome frames when determining depth, nor does it
    1: // prevent chrome recursion.  Number is fairly arbitrary, but meant to
    1: // keep number of shells to a reasonable number on accidental recursion with a
    1: // small (but not 1) branching factor.  With large branching factors the number
    1: // of shells can rapidly become huge and run us out of memory.  To solve that,
    1: // we'd need to re-institute a fixed version of bug 98158.
    1: #define MAX_DEPTH_CONTENT_FRAMES 10
    1: 
42412: NS_IMPL_CYCLE_COLLECTION_CLASS(nsFrameLoader)
42412: 
42412: NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsFrameLoader)
42412:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mDocShell)
42412:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mMessageManager)
42412:   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mChildMessageManager)
42412: NS_IMPL_CYCLE_COLLECTION_UNLINK_END
42412: 
42412: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(nsFrameLoader)
42412:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mDocShell)
42412:   NS_CYCLE_COLLECTION_NOTE_EDGE_NAME(cb, "nsFrameLoader::mMessageManager");
42412:   cb.NoteXPCOMChild(static_cast<nsIContentFrameMessageManager*>(tmp->mMessageManager.get()));
42412:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mChildMessageManager)
42412: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
    1: 
67682: NS_IMPL_CYCLE_COLLECTING_ADDREF(nsFrameLoader)
67682: NS_IMPL_CYCLE_COLLECTING_RELEASE(nsFrameLoader)
    1: 
  791: NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(nsFrameLoader)
    1:   NS_INTERFACE_MAP_ENTRY(nsIFrameLoader)
60445:   NS_INTERFACE_MAP_ENTRY(nsIContentViewManager)
60322:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIFrameLoader)
    1: NS_INTERFACE_MAP_END
    1: 
60445: nsFrameLoader::nsFrameLoader(nsIContent *aOwner, PRBool aNetworkCreated)
60445:   : mOwnerContent(aOwner)
60445:   , mDepthTooGreat(PR_FALSE)
60445:   , mIsTopLevelContent(PR_FALSE)
60445:   , mDestroyCalled(PR_FALSE)
60445:   , mNeedsAsyncDestroy(PR_FALSE)
60445:   , mInSwap(PR_FALSE)
60445:   , mInShow(PR_FALSE)
60445:   , mHideCalled(PR_FALSE)
60445:   , mNetworkCreated(aNetworkCreated)
60445:   , mDelayRemoteDialogs(PR_FALSE)
60445:   , mRemoteBrowserShown(PR_FALSE)
60445:   , mRemoteFrame(false)
60445:   , mCurrentRemoteFrame(nsnull)
60445:   , mRemoteBrowser(nsnull)
62999:   , mRenderMode(RENDER_MODE_DEFAULT)
60445: {
60445: }
60445: 
31661: nsFrameLoader*
50721: nsFrameLoader::Create(nsIContent* aOwner, PRBool aNetworkCreated)
31661: {
31661:   NS_ENSURE_TRUE(aOwner, nsnull);
35581:   nsIDocument* doc = aOwner->GetOwnerDoc();
31661:   NS_ENSURE_TRUE(doc && !doc->GetDisplayDocument() &&
35581:                  ((!doc->IsLoadedAsData() && aOwner->GetCurrentDoc()) ||
35581:                    doc->IsStaticDocument()),
35581:                  nsnull);
31661: 
50721:   return new nsFrameLoader(aOwner, aNetworkCreated);
31661: }
31661: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::LoadFrame()
    1: {
    1:   NS_ENSURE_TRUE(mOwnerContent, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:   nsAutoString src;
    1:   GetURL(src);
    1: 
    1:   src.Trim(" \t\n\r");
    1: 
    1:   if (src.IsEmpty()) {
    1:     src.AssignLiteral("about:blank");
    1:   }
    1: 
    1:   nsIDocument* doc = mOwnerContent->GetOwnerDoc();
35581:   if (!doc || doc->IsStaticDocument()) {
    1:     return NS_OK;
    1:   }
    1: 
    1:   nsCOMPtr<nsIURI> base_uri = mOwnerContent->GetBaseURI();
    1:   const nsAFlatCString &doc_charset = doc->GetDocumentCharacterSet();
    1:   const char *charset = doc_charset.IsEmpty() ? nsnull : doc_charset.get();
    1: 
    1:   nsCOMPtr<nsIURI> uri;
    1:   nsresult rv = NS_NewURI(getter_AddRefs(uri), src, charset, base_uri);
    1: 
    1:   // If the URI was malformed, try to recover by loading about:blank.
    1:   if (rv == NS_ERROR_MALFORMED_URI) {
    1:     rv = NS_NewURI(getter_AddRefs(uri), NS_LITERAL_STRING("about:blank"),
26246:                    charset, base_uri);
    1:   }
    1: 
38663:   if (NS_SUCCEEDED(rv)) {
38663:     rv = LoadURI(uri);
38663:   }
38663:   
38663:   if (NS_FAILED(rv)) {
38663:     FireErrorEvent();
38663: 
38663:     return rv;
38663:   }
38663: 
38663:   return NS_OK;
38663: }
38663: 
38663: void
38663: nsFrameLoader::FireErrorEvent()
38663: {
38663:   if (mOwnerContent) {
38663:     nsRefPtr<nsPLDOMEvent> event =
38663:       new nsLoadBlockingPLDOMEvent(mOwnerContent, NS_LITERAL_STRING("error"),
38663:                                    PR_FALSE, PR_FALSE);
38663:     event->PostDOMEvent();
38663:   }
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::LoadURI(nsIURI* aURI)
    1: {
    1:   if (!aURI)
    1:     return NS_ERROR_INVALID_POINTER;
13433:   NS_ENSURE_STATE(!mDestroyCalled && mOwnerContent);
    1: 
13433:   nsCOMPtr<nsIDocument> doc = mOwnerContent->GetOwnerDoc();
    1:   if (!doc) {
    1:     return NS_OK;
    1:   }
    1: 
13433:   nsresult rv = CheckURILoad(aURI);
13433:   NS_ENSURE_SUCCESS(rv, rv);
13433: 
13433:   mURIToLoad = aURI;
13433:   rv = doc->InitializeFrameLoader(this);
13433:   if (NS_FAILED(rv)) {
13433:     mURIToLoad = nsnull;
13433:   }
13433:   return rv;
13433: }
13433: 
13433: nsresult
13433: nsFrameLoader::ReallyStartLoading()
13433: {
38663:   nsresult rv = ReallyStartLoadingInternal();
38663:   if (NS_FAILED(rv)) {
38663:     FireErrorEvent();
38663:   }
38663:   
38663:   return rv;
38663: }
38663: 
38663: nsresult
38663: nsFrameLoader::ReallyStartLoadingInternal()
38663: {
13433:   NS_ENSURE_STATE(mURIToLoad && mOwnerContent && mOwnerContent->IsInDoc());
36268: 
36268:   nsresult rv = MaybeCreateDocShell();
36268:   if (NS_FAILED(rv)) {
36268:     return rv;
36268:   }
36268: 
36268:   if (mRemoteFrame) {
47933:     if (!mRemoteBrowser) {
54008:       TryRemoteBrowser();
36268: 
47933:       if (!mRemoteBrowser) {
36268:         NS_WARNING("Couldn't create child process for iframe.");
36268:         return NS_ERROR_FAILURE;
36268:       }
56329:     }
36268: 
36268:     // FIXME get error codes from child
47933:     mRemoteBrowser->LoadURL(mURIToLoad);
36268:     return NS_OK;
36268:   }
36268: 
36268:   NS_ASSERTION(mDocShell,
36268:                "MaybeCreateDocShell succeeded with a null mDocShell");
36268: 
36280:   // Just to be safe, recheck uri.
36268:   rv = CheckURILoad(mURIToLoad);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   nsCOMPtr<nsIDocShellLoadInfo> loadInfo;
    1:   mDocShell->CreateLoadInfo(getter_AddRefs(loadInfo));
    1:   NS_ENSURE_TRUE(loadInfo, NS_ERROR_FAILURE);
    1: 
13433:   // We'll use our principal, not that of the document loaded inside us.  This
13433:   // is very important; needed to prevent XSS attacks on documents loaded in
13433:   // subframes!
13433:   loadInfo->SetOwner(mOwnerContent->NodePrincipal());
13433: 
13433:   nsCOMPtr<nsIURI> referrer;
13433:   rv = mOwnerContent->NodePrincipal()->GetURI(getter_AddRefs(referrer));
13433:   NS_ENSURE_SUCCESS(rv, rv);
13433: 
13433:   loadInfo->SetReferrer(referrer);
13433: 
13433:   // Kick off the load...
23643:   PRBool tmpState = mNeedsAsyncDestroy;
23643:   mNeedsAsyncDestroy = PR_TRUE;
13433:   rv = mDocShell->LoadURI(mURIToLoad, loadInfo,
13433:                           nsIWebNavigation::LOAD_FLAGS_NONE, PR_FALSE);
23643:   mNeedsAsyncDestroy = tmpState;
13433:   mURIToLoad = nsnull;
38663:   NS_ENSURE_SUCCESS(rv, rv);
38663: 
13433:   return NS_OK;
13433: }
13433: 
13433: nsresult
13433: nsFrameLoader::CheckURILoad(nsIURI* aURI)
13433: {
    1:   // Check for security.  The fun part is trying to figure out what principals
    1:   // to use.  The way I figure it, if we're doing a LoadFrame() accidentally
    1:   // (eg someone created a frame/iframe node, we're being parsed, XUL iframes
    1:   // are being reframed, etc.) then we definitely want to use the node
    1:   // principal of mOwnerContent for security checks.  If, on the other hand,
    1:   // someone's setting the src on our owner content, or created it via script,
    1:   // or whatever, then they can clearly access it... and we should still use
    1:   // the principal of mOwnerContent.  I don't think that leads to privilege
    1:   // escalation, and it's reasonably guaranteed to not lead to XSS issues
    1:   // (since caller can already access mOwnerContent in this case).  So just use
    1:   // the principal of mOwnerContent no matter what.  If script wants to run
    1:   // things with its own permissions, which differ from those of mOwnerContent
    1:   // (which means the script is privileged in some way) it should set
    1:   // window.location instead.
    1:   nsIScriptSecurityManager *secMan = nsContentUtils::GetSecurityManager();
    1: 
    1:   // Get our principal
    1:   nsIPrincipal* principal = mOwnerContent->NodePrincipal();
    1: 
    1:   // Check if we are allowed to load absURL
13433:   nsresult rv =
13433:     secMan->CheckLoadURIWithPrincipal(principal, aURI,
    1:                                       nsIScriptSecurityManager::STANDARD);
    1:   if (NS_FAILED(rv)) {
    1:     return rv; // We're not
    1:   }
    1: 
    1:   // Bail out if this is an infinite recursion scenario
36268:   rv = MaybeCreateDocShell();
36268:   if (NS_FAILED(rv)) {
36268:     return rv;
36268:   }
36268:   if (mRemoteFrame) {
36268:     return NS_OK;
36268:   }
13433:   return CheckForRecursiveLoad(aURI);
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::GetDocShell(nsIDocShell **aDocShell)
    1: {
    1:   *aDocShell = nsnull;
    1: 
    1:   // If we have an owner, make sure we have a docshell and return
    1:   // that. If not, we're most likely in the middle of being torn down,
    1:   // then we just return null.
    1:   if (mOwnerContent) {
36268:     nsresult rv = MaybeCreateDocShell();
36268:     if (NS_FAILED(rv))
36268:       return rv;
36268:     if (mRemoteFrame) {
36268:       NS_WARNING("No docshells for remote frames!");
36268:       return NS_ERROR_NOT_AVAILABLE;
36268:     }
36268:     NS_ASSERTION(mDocShell,
36268:                  "MaybeCreateDocShell succeeded, but null mDocShell");
    1:   }
    1: 
    1:   *aDocShell = mDocShell;
    1:   NS_IF_ADDREF(*aDocShell);
    1: 
    1:   return NS_OK;
    1: }
    1: 
12256: void
12256: nsFrameLoader::Finalize()
12256: {
12256:   nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
12256:   if (base_win) {
12256:     base_win->Destroy();
12256:   }
12256:   mDocShell = nsnull;
12256: }
12256: 
16549: static void
16549: FirePageHideEvent(nsIDocShellTreeItem* aItem,
16549:                   nsIDOMEventTarget* aChromeEventHandler)
16549: {
16549:   nsCOMPtr<nsIDOMDocument> doc = do_GetInterface(aItem);
25572:   nsCOMPtr<nsIDocument> internalDoc = do_QueryInterface(doc);
25572:   NS_ASSERTION(internalDoc, "What happened here?");
25572:   internalDoc->OnPageHide(PR_TRUE, aChromeEventHandler);
16549: 
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   nsAutoTArray<nsCOMPtr<nsIDocShellTreeItem>, 8> kids;
16549:   kids.AppendElements(childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     aItem->GetChildAt(i, getter_AddRefs(kids[i]));
16549:   }
16549: 
16549:   for (PRUint32 i = 0; i < kids.Length(); ++i) {
16549:     if (kids[i]) {
16549:       FirePageHideEvent(kids[i], aChromeEventHandler);
16549:     }
16549:   }
16549: }
16549: 
23147: // The pageshow event is fired for a given document only if IsShowing() returns
23147: // the same thing as aFireIfShowing.  This gives us a way to fire pageshow only
23147: // on documents that are still loading or only on documents that are already
23147: // loaded.
16549: static void
16549: FirePageShowEvent(nsIDocShellTreeItem* aItem,
23147:                   nsIDOMEventTarget* aChromeEventHandler,
23147:                   PRBool aFireIfShowing)
16549: {
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   nsAutoTArray<nsCOMPtr<nsIDocShellTreeItem>, 8> kids;
16549:   kids.AppendElements(childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     aItem->GetChildAt(i, getter_AddRefs(kids[i]));
16549:   }
16549: 
16549:   for (PRUint32 i = 0; i < kids.Length(); ++i) {
16549:     if (kids[i]) {
23147:       FirePageShowEvent(kids[i], aChromeEventHandler, aFireIfShowing);
16549:     }
16549:   }
16549: 
23147:   nsCOMPtr<nsIDOMDocument> doc = do_GetInterface(aItem);
23147:   nsCOMPtr<nsIDocument> internalDoc = do_QueryInterface(doc);
23147:   NS_ASSERTION(internalDoc, "What happened here?");
23147:   if (internalDoc->IsShowing() == aFireIfShowing) {
25572:     internalDoc->OnPageShow(PR_TRUE, aChromeEventHandler);
16549:   }
23147: }
16549: 
16549: static void
16549: SetTreeOwnerAndChromeEventHandlerOnDocshellTree(nsIDocShellTreeItem* aItem,
16549:                                                 nsIDocShellTreeOwner* aOwner,
16549:                                                 nsIDOMEventTarget* aHandler)
16549: {
16549:   NS_PRECONDITION(aItem, "Must have item");
16549: 
16549:   aItem->SetTreeOwner(aOwner);
16549:   nsCOMPtr<nsIDocShell> shell(do_QueryInterface(aItem));
16549:   shell->SetChromeEventHandler(aHandler);
16549: 
16549:   PRInt32 childCount = 0;
16549:   aItem->GetChildCount(&childCount);
16549:   for (PRInt32 i = 0; i < childCount; ++i) {
16549:     nsCOMPtr<nsIDocShellTreeItem> item;
16549:     aItem->GetChildAt(i, getter_AddRefs(item));
16549:     SetTreeOwnerAndChromeEventHandlerOnDocshellTree(item, aOwner, aHandler);
16549:   }
16549: }
16549: 
16549: /**
16549:  * Set the type of the treeitem and hook it up to the treeowner.
16549:  * @param aItem the treeitem we're wrking working with
16549:  * @param aOwningContent the content node that owns aItem
16549:  * @param aTreeOwner the relevant treeowner; might be null
16549:  * @param aParentType the nsIDocShellTreeItem::GetType of our parent docshell
16549:  * @param aParentNode if non-null, the docshell we should be added as a child to
16549:  *
16549:  * @return whether aItem is top-level content
16549:  */
16549: static PRBool
16549: AddTreeItemToTreeOwner(nsIDocShellTreeItem* aItem, nsIContent* aOwningContent,
16549:                        nsIDocShellTreeOwner* aOwner, PRInt32 aParentType,
16549:                        nsIDocShellTreeNode* aParentNode)
16549: {
16549:   NS_PRECONDITION(aItem, "Must have docshell treeitem");
16549:   NS_PRECONDITION(aOwningContent, "Must have owning content");
16549:   
16549:   nsAutoString value;
16549:   PRBool isContent = PR_FALSE;
16549: 
33329:   if (aOwningContent->IsXUL()) {
16549:       aOwningContent->GetAttr(kNameSpaceID_None, nsGkAtoms::type, value);
16549:   }
16549: 
16549:   // we accept "content" and "content-xxx" values.
16549:   // at time of writing, we expect "xxx" to be "primary" or "targetable", but
16549:   // someday it might be an integer expressing priority or something else.
16549: 
16549:   isContent = value.LowerCaseEqualsLiteral("content") ||
16549:     StringBeginsWith(value, NS_LITERAL_STRING("content-"),
16549:                      nsCaseInsensitiveStringComparator());
16549: 
16549:   if (isContent) {
16549:     // The web shell's type is content.
16549: 
16549:     aItem->SetItemType(nsIDocShellTreeItem::typeContent);
16549:   } else {
28078:     // Inherit our type from our parent docshell.  If it is
16549:     // chrome, we'll be chrome.  If it is content, we'll be
16549:     // content.
16549: 
16549:     aItem->SetItemType(aParentType);
16549:   }
16549: 
16549:   // Now that we have our type set, add ourselves to the parent, as needed.
16549:   if (aParentNode) {
16549:     aParentNode->AddChild(aItem);
16549:   }
16549: 
16549:   PRBool retval = PR_FALSE;
16549:   if (aParentType == nsIDocShellTreeItem::typeChrome && isContent) {
16549:     retval = PR_TRUE;
16549: 
16549:     PRBool is_primary = value.LowerCaseEqualsLiteral("content-primary");
16549: 
16549:     if (aOwner) {
16549:       PRBool is_targetable = is_primary ||
16549:         value.LowerCaseEqualsLiteral("content-targetable");
16549:       aOwner->ContentShellAdded(aItem, is_primary, is_targetable, value);
16549:     }
16549:   }
16549: 
16549:   return retval;
16549: }
16549: 
20146: static PRBool
20146: AllDescendantsOfType(nsIDocShellTreeItem* aParentItem, PRInt32 aType)
20146: {
20146:   PRInt32 childCount = 0;
20146:   aParentItem->GetChildCount(&childCount);
20146: 
20146:   for (PRInt32 i = 0; i < childCount; ++i) {
20146:     nsCOMPtr<nsIDocShellTreeItem> kid;
20146:     aParentItem->GetChildAt(i, getter_AddRefs(kid));
20146: 
20146:     PRInt32 kidType;
20146:     kid->GetItemType(&kidType);
20146:     if (kidType != aType || !AllDescendantsOfType(kid, aType)) {
20146:       return PR_FALSE;
20146:     }
20146:   }
20146: 
20146:   return PR_TRUE;
20146: }
20146: 
42907: /**
42907:  * A class that automatically sets mInShow to false when it goes
42907:  * out of scope.
42907:  */
42907: class NS_STACK_CLASS AutoResetInShow {
42907:   private:
42907:     nsFrameLoader* mFrameLoader;
42907:     MOZILLA_DECL_USE_GUARD_OBJECT_NOTIFIER
42907:   public:
42907:     AutoResetInShow(nsFrameLoader* aFrameLoader MOZILLA_GUARD_OBJECT_NOTIFIER_PARAM)
42907:       : mFrameLoader(aFrameLoader)
42907:     {
42907:       MOZILLA_GUARD_OBJECT_NOTIFIER_INIT;
42907:     }
42907:     ~AutoResetInShow() { mFrameLoader->mInShow = PR_FALSE; }
42907: };
42907: 
42907: 
42907: PRBool
34245: nsFrameLoader::Show(PRInt32 marginWidth, PRInt32 marginHeight,
34245:                     PRInt32 scrollbarPrefX, PRInt32 scrollbarPrefY,
51754:                     nsSubDocumentFrame* frame)
34245: {
42907:   if (mInShow) {
42907:     return PR_FALSE;
42907:   }
42907:   // Reset mInShow if we exit early.
42907:   AutoResetInShow resetInShow(this);
42907:   mInShow = PR_TRUE;
42907: 
36268:   nsresult rv = MaybeCreateDocShell();
34245:   if (NS_FAILED(rv)) {
42907:     return PR_FALSE;
34245:   }
34245: 
67579:   if (!mRemoteFrame) {
34245:     if (!mDocShell)
56329:       return PR_FALSE;
34245:     nsCOMPtr<nsIPresShell> presShell;
34245:     mDocShell->GetPresShell(getter_AddRefs(presShell));
34245:     if (presShell)
56329:       return PR_TRUE;
34245: 
34245:     mDocShell->SetMarginWidth(marginWidth);
34245:     mDocShell->SetMarginHeight(marginHeight);
34245: 
34245:     nsCOMPtr<nsIScrollable> sc = do_QueryInterface(mDocShell);
34245:     if (sc) {
34245:       sc->SetDefaultScrollbarPreferences(nsIScrollable::ScrollOrientation_X,
34245:                                          scrollbarPrefX);
34245:       sc->SetDefaultScrollbarPreferences(nsIScrollable::ScrollOrientation_Y,
34245:                                          scrollbarPrefY);
34245:     }
36268:   }
34245: 
54315:   nsIView* view = frame->EnsureInnerView();
34245:   if (!view)
42907:     return PR_FALSE;
34245: 
36268:   if (mRemoteFrame) {
54068:     return ShowRemoteFrame(GetSubDocumentSize(frame));
36268:   }
36268: 
34245:   nsCOMPtr<nsIBaseWindow> baseWindow = do_QueryInterface(mDocShell);
34245:   NS_ASSERTION(baseWindow, "Found a nsIDocShell that isn't a nsIBaseWindow.");
56859:   nsIntSize size;
56859:   if (!(frame->GetStateBits() & NS_FRAME_FIRST_REFLOW)) {
56859:     // We have a useful size already; use it, since we might get no
56859:     // more size updates.
56859:     size = GetSubDocumentSize(frame);
56859:   } else {
56859:     // Pick some default size for now.  Using 10x10 because that's what the
56859:     // code here used to do.
56859:     size.SizeTo(10, 10);
56859:   }
56859:   baseWindow->InitWindow(nsnull, view->GetWidget(), 0, 0,
56859:                          size.width, size.height);
34245:   // This is kinda whacky, this "Create()" call doesn't really
34245:   // create anything, one starts to wonder why this was named
34245:   // "Create"...
34245:   baseWindow->Create();
34245:   baseWindow->SetVisibility(PR_TRUE);
34245: 
34245:   // Trigger editor re-initialization if midas is turned on in the
34245:   // sub-document. This shouldn't be necessary, but given the way our
34245:   // editor works, it is. See
34245:   // https://bugzilla.mozilla.org/show_bug.cgi?id=284245
36268:   nsCOMPtr<nsIPresShell> presShell;
34245:   mDocShell->GetPresShell(getter_AddRefs(presShell));
34245:   if (presShell) {
34245:     nsCOMPtr<nsIDOMNSHTMLDocument> doc =
34245:       do_QueryInterface(presShell->GetDocument());
34245: 
34245:     if (doc) {
34245:       nsAutoString designMode;
34245:       doc->GetDesignMode(designMode);
34245: 
34245:       if (designMode.EqualsLiteral("on")) {
57958:         // Hold on to the editor object to let the document reattach to the
57958:         // same editor object, instead of creating a new one.
57958:         nsCOMPtr<nsIEditorDocShell> editorDocshell = do_QueryInterface(mDocShell);
57958:         nsCOMPtr<nsIEditor> editor;
57958:         nsresult rv = editorDocshell->GetEditor(getter_AddRefs(editor));
57958:         NS_ENSURE_SUCCESS(rv, PR_FALSE);
57958: 
34245:         doc->SetDesignMode(NS_LITERAL_STRING("off"));
34245:         doc->SetDesignMode(NS_LITERAL_STRING("on"));
63593:       } else {
63593:         // Re-initialie the presentation for contenteditable documents
63593:         nsCOMPtr<nsIEditorDocShell> editorDocshell = do_QueryInterface(mDocShell);
63593:         if (editorDocshell) {
63593:           PRBool editable = PR_FALSE,
63593:                  hasEditingSession = PR_FALSE;
63593:           editorDocshell->GetEditable(&editable);
63593:           editorDocshell->GetHasEditingSession(&hasEditingSession);
63593:           nsCOMPtr<nsIEditor> editor;
63593:           editorDocshell->GetEditor(getter_AddRefs(editor));
63593:           if (editable && hasEditingSession && editor) {
63593:             editor->PostCreate();
63593:           }
63593:         }
34245:       }
34245:     }
34245:   }
34245: 
42907:   mInShow = PR_FALSE;
42907:   if (mHideCalled) {
42907:     mHideCalled = PR_FALSE;
42907:     Hide();
42907:     return PR_FALSE;
42907:   }
42907:   return PR_TRUE;
34245: }
34245: 
69814: void
69814: nsFrameLoader::MarginsChanged(PRUint32 aMarginWidth,
69814:                               PRUint32 aMarginHeight)
69814: {
69814:   // We assume that the margins are always zero for remote frames.
69814:   if (mRemoteFrame)
69814:     return;
69814: 
69814:   // If there's no docshell, we're probably not up and running yet.
69814:   // nsFrameLoader::Show() will take care of setting the right
69814:   // margins.
69814:   if (!mDocShell)
69814:     return;
69814: 
69814:   // Set the margins
69814:   mDocShell->SetMarginWidth(aMarginWidth);
69814:   mDocShell->SetMarginHeight(aMarginHeight);
69814: 
69814:   // Trigger a restyle if there's a prescontext
69814:   nsRefPtr<nsPresContext> presContext;
69814:   mDocShell->GetPresContext(getter_AddRefs(presContext));
69814:   if (presContext)
69814:     presContext->RebuildAllStyleData(nsChangeHint(0));
69814: }
69814: 
36268: bool
54008: nsFrameLoader::ShowRemoteFrame(const nsIntSize& size)
36268: {
36268:   NS_ASSERTION(mRemoteFrame, "ShowRemote only makes sense on remote frames.");
36268: 
47933:   if (!mRemoteBrowser) {
54008:     TryRemoteBrowser();
46771: 
47933:     if (!mRemoteBrowser) {
36268:       NS_ERROR("Couldn't create child process.");
36268:       return false;
36268:     }
56329:   }
36268: 
54021:   // FIXME/bug 589337: Show()/Hide() is pretty expensive for
54021:   // cross-process layers; need to figure out what behavior we really
54021:   // want here.  For now, hack.
54020:   if (!mRemoteBrowserShown) {
54008:     mRemoteBrowser->Show(size);
54008:     mRemoteBrowserShown = PR_TRUE;
36268: 
57128:     EnsureMessageManager();
54020:   } else {
54020:     mRemoteBrowser->Move(size);
54020:   }
36268: 
36268:   return true;
36268: }
36268: 
34245: void
34245: nsFrameLoader::Hide()
34245: {
42907:   if (mHideCalled) {
42907:     return;
42907:   }
42907:   if (mInShow) {
42907:     mHideCalled = PR_TRUE;
42907:     return;
42907:   }
42907: 
34245:   if (!mDocShell)
34245:     return;
34245: 
34245:   nsCOMPtr<nsIContentViewer> contentViewer;
34245:   mDocShell->GetContentViewer(getter_AddRefs(contentViewer));
34245:   if (contentViewer)
34245:     contentViewer->SetSticky(PR_FALSE);
34245: 
34245:   nsCOMPtr<nsIBaseWindow> baseWin = do_QueryInterface(mDocShell);
34245:   NS_ASSERTION(baseWin,
34245:                "Found an nsIDocShell which doesn't implement nsIBaseWindow.");
34245:   baseWin->SetVisibility(PR_FALSE);
34245:   baseWin->SetParentWidget(nsnull);
34245: }
34245: 
16549: nsresult
16549: nsFrameLoader::SwapWithOtherLoader(nsFrameLoader* aOther,
16549:                                    nsRefPtr<nsFrameLoader>& aFirstToSwap,
16549:                                    nsRefPtr<nsFrameLoader>& aSecondToSwap)
16549: {
16549:   NS_PRECONDITION((aFirstToSwap == this && aSecondToSwap == aOther) ||
16549:                   (aFirstToSwap == aOther && aSecondToSwap == this),
16549:                   "Swapping some sort of random loaders?");
42907:   NS_ENSURE_STATE(!mInShow && !aOther->mInShow);
16549: 
16549:   nsIContent* ourContent = mOwnerContent;
16549:   nsIContent* otherContent = aOther->mOwnerContent;
16549: 
16549:   if (!ourContent || !otherContent) {
16549:     // Can't handle this
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // Make sure there are no same-origin issues
16549:   PRBool equal;
16549:   nsresult rv =
16549:     ourContent->NodePrincipal()->Equals(otherContent->NodePrincipal(), &equal);
16549:   if (NS_FAILED(rv) || !equal) {
16549:     // Security problems loom.  Just bail on it all
16549:     return NS_ERROR_DOM_SECURITY_ERR;
16549:   }
16549: 
16549:   nsCOMPtr<nsIDocShell> ourDochell = GetExistingDocShell();
16549:   nsCOMPtr<nsIDocShell> otherDocshell = aOther->GetExistingDocShell();
16549:   if (!ourDochell || !otherDocshell) {
16549:     // How odd
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // To avoid having to mess with session history, avoid swapping
20146:   // frameloaders that don't correspond to root same-type docshells,
20146:   // unless both roots have session history disabled.
16549:   nsCOMPtr<nsIDocShellTreeItem> ourTreeItem = do_QueryInterface(ourDochell);
16549:   nsCOMPtr<nsIDocShellTreeItem> otherTreeItem =
16549:     do_QueryInterface(otherDocshell);
16549:   nsCOMPtr<nsIDocShellTreeItem> ourRootTreeItem, otherRootTreeItem;
16549:   ourTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(ourRootTreeItem));
16549:   otherTreeItem->GetSameTypeRootTreeItem(getter_AddRefs(otherRootTreeItem));
20146:   nsCOMPtr<nsIWebNavigation> ourRootWebnav =
20146:     do_QueryInterface(ourRootTreeItem);
20146:   nsCOMPtr<nsIWebNavigation> otherRootWebnav =
20146:     do_QueryInterface(otherRootTreeItem);
20146: 
20146:   if (!ourRootWebnav || !otherRootWebnav) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
20146:   nsCOMPtr<nsISHistory> ourHistory;
20146:   nsCOMPtr<nsISHistory> otherHistory;
20146:   ourRootWebnav->GetSessionHistory(getter_AddRefs(ourHistory));
20146:   otherRootWebnav->GetSessionHistory(getter_AddRefs(otherHistory));
20146: 
23620:   if ((ourRootTreeItem != ourTreeItem || otherRootTreeItem != otherTreeItem) &&
23620:       (ourHistory || otherHistory)) {
20146:     return NS_ERROR_NOT_IMPLEMENTED;
20146:   }
20146: 
16549:   // Also make sure that the two docshells are the same type. Otherwise
20146:   // swapping is certainly not safe.
16549:   PRInt32 ourType = nsIDocShellTreeItem::typeChrome;
16549:   PRInt32 otherType = nsIDocShellTreeItem::typeChrome;
16549:   ourTreeItem->GetItemType(&ourType);
16549:   otherTreeItem->GetItemType(&otherType);
20146:   if (ourType != otherType) {
20146:     return NS_ERROR_NOT_IMPLEMENTED;
20146:   }
20146: 
23620:   // One more twist here.  Setting up the right treeowners in a heterogeneous
20146:   // tree is a bit of a pain.  So make sure that if ourType is not
20146:   // nsIDocShellTreeItem::typeContent then all of our descendants are the same
20146:   // type as us.
20146:   if (ourType != nsIDocShellTreeItem::typeContent &&
20146:       (!AllDescendantsOfType(ourTreeItem, ourType) ||
20146:        !AllDescendantsOfType(otherTreeItem, otherType))) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549:   
16549:   // Save off the tree owners, frame elements, chrome event handlers, and
16549:   // docshell and document parents before doing anything else.
16549:   nsCOMPtr<nsIDocShellTreeOwner> ourOwner, otherOwner;
16549:   ourTreeItem->GetTreeOwner(getter_AddRefs(ourOwner));
16549:   otherTreeItem->GetTreeOwner(getter_AddRefs(otherOwner));
16549:   // Note: it's OK to have null treeowners.
16549: 
16549:   nsCOMPtr<nsIDocShellTreeItem> ourParentItem, otherParentItem;
16549:   ourTreeItem->GetParent(getter_AddRefs(ourParentItem));
16549:   otherTreeItem->GetParent(getter_AddRefs(otherParentItem));
16549:   if (!ourParentItem || !otherParentItem) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
20146:   // Make sure our parents are the same type too
20146:   PRInt32 ourParentType = nsIDocShellTreeItem::typeContent;
20146:   PRInt32 otherParentType = nsIDocShellTreeItem::typeContent;
20146:   ourParentItem->GetItemType(&ourParentType);
20146:   otherParentItem->GetItemType(&otherParentType);
20146:   if (ourParentType != otherParentType) {
20146:     return NS_ERROR_NOT_IMPLEMENTED;
20146:   }
20146: 
16549:   nsCOMPtr<nsPIDOMWindow> ourWindow = do_GetInterface(ourDochell);
16549:   nsCOMPtr<nsPIDOMWindow> otherWindow = do_GetInterface(otherDocshell);
16549: 
16549:   nsCOMPtr<nsIDOMElement> ourFrameElement =
16549:     ourWindow->GetFrameElementInternal();
16549:   nsCOMPtr<nsIDOMElement> otherFrameElement =
16549:     otherWindow->GetFrameElementInternal();
16549: 
16549:   nsCOMPtr<nsIDOMEventTarget> ourChromeEventHandler =
16549:     do_QueryInterface(ourWindow->GetChromeEventHandler());
16549:   nsCOMPtr<nsIDOMEventTarget> otherChromeEventHandler =
16549:     do_QueryInterface(otherWindow->GetChromeEventHandler());
16549: 
16549:   NS_ASSERTION(SameCOMIdentity(ourFrameElement, ourContent) &&
16549:                SameCOMIdentity(otherFrameElement, otherContent) &&
16549:                SameCOMIdentity(ourChromeEventHandler, ourContent) &&
16549:                SameCOMIdentity(otherChromeEventHandler, otherContent),
16549:                "How did that happen, exactly?");
16549: 
16549:   nsCOMPtr<nsIDocument> ourChildDocument =
16549:     do_QueryInterface(ourWindow->GetExtantDocument());
16549:   nsCOMPtr<nsIDocument> otherChildDocument =
16549:     do_QueryInterface(otherWindow->GetExtantDocument());
16549:   if (!ourChildDocument || !otherChildDocument) {
16549:     // This shouldn't be happening
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   nsCOMPtr<nsIDocument> ourParentDocument =
16549:     ourChildDocument->GetParentDocument();
16549:   nsCOMPtr<nsIDocument> otherParentDocument =
16549:     otherChildDocument->GetParentDocument();
16549: 
16549:   // Make sure to swap docshells between the two frames.
16549:   nsIDocument* ourDoc = ourContent->GetCurrentDoc();
16549:   nsIDocument* otherDoc = otherContent->GetCurrentDoc();
16549:   if (!ourDoc || !otherDoc) {
16549:     // Again, how odd, given that we had docshells
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   NS_ASSERTION(ourDoc == ourParentDocument, "Unexpected parent document");
16549:   NS_ASSERTION(otherDoc == otherParentDocument, "Unexpected parent document");
16549: 
46225:   nsIPresShell* ourShell = ourDoc->GetShell();
46225:   nsIPresShell* otherShell = otherDoc->GetShell();
16549:   if (!ourShell || !otherShell) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   if (mInSwap || aOther->mInSwap) {
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549:   mInSwap = aOther->mInSwap = PR_TRUE;
16549: 
23147:   // Fire pageshow events on still-loading pages, and then fire pagehide
23147:   // events.  Note that we do NOT fire these in the normal way, but just fire
23147:   // them on the chrome event handlers.
23147:   FirePageShowEvent(ourTreeItem, ourChromeEventHandler, PR_FALSE);
23147:   FirePageShowEvent(otherTreeItem, otherChromeEventHandler, PR_FALSE);
16549:   FirePageHideEvent(ourTreeItem, ourChromeEventHandler);
16549:   FirePageHideEvent(otherTreeItem, otherChromeEventHandler);
16549:   
36655:   nsIFrame* ourFrame = ourContent->GetPrimaryFrame();
36655:   nsIFrame* otherFrame = otherContent->GetPrimaryFrame();
16549:   if (!ourFrame || !otherFrame) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
23147:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler, PR_TRUE);
23147:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler, PR_TRUE);
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
51754:   nsSubDocumentFrame* ourFrameFrame = do_QueryFrame(ourFrame);
16549:   if (!ourFrameFrame) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
23147:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler, PR_TRUE);
23147:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler, PR_TRUE);
16549:     return NS_ERROR_NOT_IMPLEMENTED;
16549:   }
16549: 
16549:   // OK.  First begin to swap the docshells in the two nsIFrames
16549:   rv = ourFrameFrame->BeginSwapDocShells(otherFrame);
16549:   if (NS_FAILED(rv)) {
16549:     mInSwap = aOther->mInSwap = PR_FALSE;
23147:     FirePageShowEvent(ourTreeItem, ourChromeEventHandler, PR_TRUE);
23147:     FirePageShowEvent(otherTreeItem, otherChromeEventHandler, PR_TRUE);
16549:     return rv;
16549:   }
16549: 
16549:   // Now move the docshells to the right docshell trees.  Note that this
16549:   // resets their treeowners to null.
16549:   ourParentItem->RemoveChild(ourTreeItem);
16549:   otherParentItem->RemoveChild(otherTreeItem);
16549:   if (ourType == nsIDocShellTreeItem::typeContent) {
16549:     ourOwner->ContentShellRemoved(ourTreeItem);
16549:     otherOwner->ContentShellRemoved(otherTreeItem);
16549:   }
16549:   
16549:   ourParentItem->AddChild(otherTreeItem);
16549:   otherParentItem->AddChild(ourTreeItem);
16549: 
16549:   // Restore the correct treeowners
16549:   SetTreeOwnerAndChromeEventHandlerOnDocshellTree(ourTreeItem, otherOwner,
16549:                                                   otherChromeEventHandler);
16549:   SetTreeOwnerAndChromeEventHandlerOnDocshellTree(otherTreeItem, ourOwner,
16549:                                                   ourChromeEventHandler);
16549: 
16549:   AddTreeItemToTreeOwner(ourTreeItem, otherContent, otherOwner,
20146:                          otherParentType, nsnull);
20146:   AddTreeItemToTreeOwner(otherTreeItem, ourContent, ourOwner, ourParentType,
20146:                          nsnull);
16549: 
16549:   // SetSubDocumentFor nulls out parent documents on the old child doc if a
16549:   // new non-null document is passed in, so just go ahead and remove both
16549:   // kids before reinserting in the parent subdoc maps, to avoid
16549:   // complications.
16549:   ourParentDocument->SetSubDocumentFor(ourContent, nsnull);
16549:   otherParentDocument->SetSubDocumentFor(otherContent, nsnull);
16549:   ourParentDocument->SetSubDocumentFor(ourContent, otherChildDocument);
16549:   otherParentDocument->SetSubDocumentFor(otherContent, ourChildDocument);
16549: 
16549:   ourWindow->SetFrameElementInternal(otherFrameElement);
16549:   otherWindow->SetFrameElementInternal(ourFrameElement);
16549: 
60445:   SetOwnerContent(otherContent);
60445:   aOther->SetOwnerContent(ourContent);
16549: 
42412:   nsRefPtr<nsFrameMessageManager> ourMessageManager = mMessageManager;
42412:   nsRefPtr<nsFrameMessageManager> otherMessageManager = aOther->mMessageManager;
42412:   // Swap pointers in child message managers.
42412:   if (mChildMessageManager) {
42412:     nsInProcessTabChildGlobal* tabChild =
42412:       static_cast<nsInProcessTabChildGlobal*>(mChildMessageManager.get());
42412:     tabChild->SetOwner(otherContent);
42412:     tabChild->SetChromeMessageManager(otherMessageManager);
42412:   }
42412:   if (aOther->mChildMessageManager) {
42412:     nsInProcessTabChildGlobal* otherTabChild =
42412:       static_cast<nsInProcessTabChildGlobal*>(aOther->mChildMessageManager.get());
42412:     otherTabChild->SetOwner(ourContent);
42412:     otherTabChild->SetChromeMessageManager(ourMessageManager);
42412:   }
42412:   // Swap and setup things in parent message managers.
42412:   nsFrameMessageManager* ourParentManager = mMessageManager ?
42412:     mMessageManager->GetParentManager() : nsnull;
42412:   nsFrameMessageManager* otherParentManager = aOther->mMessageManager ?
42412:     aOther->mMessageManager->GetParentManager() : nsnull;
42412:   if (mMessageManager) {
42412:     mMessageManager->Disconnect();
42412:     mMessageManager->SetParentManager(otherParentManager);
42412:     mMessageManager->SetCallbackData(aOther, PR_FALSE);
42412:   }
42412:   if (aOther->mMessageManager) {
42412:     aOther->mMessageManager->Disconnect();
42412:     aOther->mMessageManager->SetParentManager(ourParentManager);
42412:     aOther->mMessageManager->SetCallbackData(this, PR_FALSE);
42412:   }
42412:   mMessageManager.swap(aOther->mMessageManager);
42412: 
16549:   aFirstToSwap.swap(aSecondToSwap);
16549: 
23620:   // Drop any cached content viewers in the two session histories.
23620:   nsCOMPtr<nsISHistoryInternal> ourInternalHistory =
23620:     do_QueryInterface(ourHistory);
23620:   nsCOMPtr<nsISHistoryInternal> otherInternalHistory =
23620:     do_QueryInterface(otherHistory);
23620:   if (ourInternalHistory) {
23620:     ourInternalHistory->EvictAllContentViewers();
23620:   }
23620:   if (otherInternalHistory) {
23620:     otherInternalHistory->EvictAllContentViewers();
23620:   }
23620: 
54309:   NS_ASSERTION(ourFrame == ourContent->GetPrimaryFrame() &&
54309:                otherFrame == otherContent->GetPrimaryFrame(),
54309:                "changed primary frame");
54309: 
16549:   ourFrameFrame->EndSwapDocShells(otherFrame);
16549: 
16549:   ourParentDocument->FlushPendingNotifications(Flush_Layout);
16549:   otherParentDocument->FlushPendingNotifications(Flush_Layout);
16549: 
23147:   FirePageShowEvent(ourTreeItem, otherChromeEventHandler, PR_TRUE);
23147:   FirePageShowEvent(otherTreeItem, ourChromeEventHandler, PR_TRUE);
16549: 
16549:   mInSwap = aOther->mInSwap = PR_FALSE;
16549:   return NS_OK;
16549: }
16549: 
46797: void
46797: nsFrameLoader::DestroyChild()
46797: {
47933:   if (mRemoteBrowser) {
47933:     mRemoteBrowser->SetOwnerElement(nsnull);
60065:     mRemoteBrowser->Destroy();
47933:     mRemoteBrowser = nsnull;
46797:   }
46797: }
46797: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::Destroy()
    1: {
12256:   if (mDestroyCalled) {
12256:     return NS_OK;
12256:   }
12256:   mDestroyCalled = PR_TRUE;
12256: 
42412:   if (mMessageManager) {
42412:     mMessageManager->Disconnect();
42412:   }
42412:   if (mChildMessageManager) {
42412:     static_cast<nsInProcessTabChildGlobal*>(mChildMessageManager.get())->Disconnect();
42412:   }
42412: 
12256:   nsCOMPtr<nsIDocument> doc;
50721:   PRBool dynamicSubframeRemoval = PR_FALSE;
    1:   if (mOwnerContent) {
12256:     doc = mOwnerContent->GetOwnerDoc();
    1: 
    1:     if (doc) {
50721:       dynamicSubframeRemoval = !mIsTopLevelContent && !doc->InUnlinkOrDeletion();
    1:       doc->SetSubDocumentFor(mOwnerContent, nsnull);
    1:     }
    1: 
60445:     SetOwnerContent(nsnull);
    1:   }
46797:   DestroyChild();
    1: 
50721:   // Seems like this is a dynamic frame removal.
50721:   if (dynamicSubframeRemoval) {
50721:     nsCOMPtr<nsIDocShellHistory> dhistory = do_QueryInterface(mDocShell);
50721:     if (dhistory) {
50721:       dhistory->RemoveFromSessionHistory();
50721:     }
50721:   }
50721: 
    1:   // Let the tree owner know we're gone.
    1:   if (mIsTopLevelContent) {
    1:     nsCOMPtr<nsIDocShellTreeItem> ourItem = do_QueryInterface(mDocShell);
    1:     if (ourItem) {
    1:       nsCOMPtr<nsIDocShellTreeItem> parentItem;
    1:       ourItem->GetParent(getter_AddRefs(parentItem));
    1:       nsCOMPtr<nsIDocShellTreeOwner> owner = do_GetInterface(parentItem);
 6683:       if (owner) {
 6683:         owner->ContentShellRemoved(ourItem);
    1:       }
    1:     }
    1:   }
    1:   
    1:   // Let our window know that we are gone
    1:   nsCOMPtr<nsPIDOMWindow> win_private(do_GetInterface(mDocShell));
    1:   if (win_private) {
    1:     win_private->SetFrameElementInternal(nsnull);
    1:   }
    1: 
23643:   if ((mNeedsAsyncDestroy || !doc ||
12256:        NS_FAILED(doc->FinalizeFrameLoader(this))) && mDocShell) {
12256:     nsCOMPtr<nsIRunnable> event = new nsAsyncDocShellDestroyer(mDocShell);
12256:     NS_ENSURE_TRUE(event, NS_ERROR_OUT_OF_MEMORY);
12256:     NS_DispatchToCurrentThread(event);
    1: 
12256:     // Let go of our docshell now that the async destroyer holds on to
12256:     // the docshell.
12256: 
12256:     mDocShell = nsnull;
    1:   }
    1: 
12256:   // NOTE: 'this' may very well be gone by now.
12256: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsFrameLoader::GetDepthTooGreat(PRBool* aDepthTooGreat)
    1: {
    1:   *aDepthTooGreat = mDepthTooGreat;
    1:   return NS_OK;
    1: }
    1: 
60445: void
60445: nsFrameLoader::SetOwnerContent(nsIContent* aContent)
60445: {
60445:   mOwnerContent = aContent;
60446:   if (RenderFrameParent* rfp = GetCurrentRemoteFrame()) {
60446:     rfp->OwnerContentChanged(aContent);
60446:   }
60445: }
60445: 
36268: bool
36268: nsFrameLoader::ShouldUseRemoteProcess()
36268: {
36268:   // Check for *disabled* multi-process first: environment, prefs, attribute
36268:   // Then check for *enabled* multi-process pref: attribute, prefs
36268:   // Default is not-remote.
36268: 
36268:   if (PR_GetEnv("MOZ_DISABLE_OOP_TABS")) {
36268:     return false;
36268:   }
36268: 
36268:   PRBool remoteDisabled = nsContentUtils::GetBoolPref("dom.ipc.tabs.disabled",
36268:                                                       PR_FALSE);
36268:   if (remoteDisabled) {
36268:     return false;
36268:   }
36268: 
36268:   static nsIAtom* const *const remoteValues[] = {
36268:     &nsGkAtoms::_false,
36268:     &nsGkAtoms::_true,
36268:     nsnull
36268:   };
36268: 
36268:   switch (mOwnerContent->FindAttrValueIn(kNameSpaceID_None, nsGkAtoms::Remote,
36268:                                          remoteValues, eCaseMatters)) {
36268:   case 0:
36268:     return false;
36268:   case 1:
36268:     return true;
36268:   }
36268: 
36268:   PRBool remoteEnabled = nsContentUtils::GetBoolPref("dom.ipc.tabs.enabled",
36268:                                                      PR_FALSE);
36268:   return (bool) remoteEnabled;
36268: }
36268: 
    1: nsresult
36268: nsFrameLoader::MaybeCreateDocShell()
    1: {
    1:   if (mDocShell) {
    1:     return NS_OK;
    1:   }
36268:   if (mRemoteFrame) {
36268:     return NS_OK;
36268:   }
12256:   NS_ENSURE_STATE(!mDestroyCalled);
    1: 
36268:   if (ShouldUseRemoteProcess()) {
36268:     mRemoteFrame = true;
36268:     return NS_OK;
36268:   }
36268: 
    1:   // Get our parent docshell off the document of mOwnerContent
    1:   // XXXbz this is such a total hack.... We really need to have a
    1:   // better setup for doing this.
35581:   nsIDocument* doc = mOwnerContent->GetOwnerDoc();
35581:   if (!doc || !(doc->IsStaticDocument() || mOwnerContent->IsInDoc())) {
    1:     return NS_ERROR_UNEXPECTED;
    1:   }
    1: 
60649:   if (doc->GetDisplayDocument() || !doc->IsActive()) {
60649:     // Don't allow subframe loads in external reference documents, nor
60649:     // in non-active documents.
20078:     return NS_ERROR_NOT_AVAILABLE;
20078:   }
20078: 
35581:   nsCOMPtr<nsISupports> container =
35581:     doc->GetContainer();
35581:   nsCOMPtr<nsIWebNavigation> parentAsWebNav = do_QueryInterface(container);
    1: 
    1:   // Create the docshell...
28078:   mDocShell = do_CreateInstance("@mozilla.org/docshell;1");
    1:   NS_ENSURE_TRUE(mDocShell, NS_ERROR_FAILURE);
    1: 
50721:   if (!mNetworkCreated) {
50721:     nsCOMPtr<nsIDocShellHistory> history = do_QueryInterface(mDocShell);
50721:     if (history) {
50721:       history->SetCreatedDynamically(PR_TRUE);
50721:     }
50721:   }
50721: 
    1:   // Get the frame name and tell the docshell about it.
    1:   nsCOMPtr<nsIDocShellTreeItem> docShellAsItem(do_QueryInterface(mDocShell));
    1:   NS_ENSURE_TRUE(docShellAsItem, NS_ERROR_FAILURE);
    1:   nsAutoString frameName;
    1: 
    1:   PRInt32 namespaceID = mOwnerContent->GetNameSpaceID();
29004:   if (namespaceID == kNameSpaceID_XHTML && !mOwnerContent->IsInHTMLDocument()) {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::id, frameName);
    1:   } else {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::name, frameName);
    1:     // XXX if no NAME then use ID, after a transition period this will be
    1:     // changed so that XUL only uses ID too (bug 254284).
    1:     if (frameName.IsEmpty() && namespaceID == kNameSpaceID_XUL) {
    1:       mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::id, frameName);
    1:     }
    1:   }
    1: 
    1:   if (!frameName.IsEmpty()) {
    1:     docShellAsItem->SetName(frameName.get());
    1:   }
    1: 
    1:   // If our container is a web-shell, inform it that it has a new
    1:   // child. If it's not a web-shell then some things will not operate
    1:   // properly.
    1: 
    1:   nsCOMPtr<nsIDocShellTreeNode> parentAsNode(do_QueryInterface(parentAsWebNav));
    1:   if (parentAsNode) {
    1:     // Note: This logic duplicates a lot of logic in
    1:     // nsSubDocumentFrame::AttributeChanged.  We should fix that.
    1: 
    1:     nsCOMPtr<nsIDocShellTreeItem> parentAsItem =
    1:       do_QueryInterface(parentAsNode);
    1: 
    1:     PRInt32 parentType;
    1:     parentAsItem->GetItemType(&parentType);
    1: 
    1:     // XXXbz why is this in content code, exactly?  We should handle
    1:     // this some other way.....  Not sure how yet.
    1:     nsCOMPtr<nsIDocShellTreeOwner> parentTreeOwner;
    1:     parentAsItem->GetTreeOwner(getter_AddRefs(parentTreeOwner));
16549:     mIsTopLevelContent =
16549:       AddTreeItemToTreeOwner(docShellAsItem, mOwnerContent, parentTreeOwner,
16549:                              parentType, parentAsNode);
    1: 
    1:     // Make sure all shells have links back to the content element
    1:     // in the nearest enclosing chrome shell.
    1:     nsCOMPtr<nsIDOMEventTarget> chromeEventHandler;
    1: 
    1:     if (parentType == nsIDocShellTreeItem::typeChrome) {
    1:       // Our parent shell is a chrome shell. It is therefore our nearest
    1:       // enclosing chrome shell.
    1: 
    1:       chromeEventHandler = do_QueryInterface(mOwnerContent);
    1:       NS_ASSERTION(chromeEventHandler,
    1:                    "This mContent should implement this.");
    1:     } else {
    1:       nsCOMPtr<nsIDocShell> parentShell(do_QueryInterface(parentAsNode));
    1: 
    1:       // Our parent shell is a content shell. Get the chrome event
    1:       // handler from it and use that for our shell as well.
    1: 
    1:       parentShell->GetChromeEventHandler(getter_AddRefs(chromeEventHandler));
    1:     }
    1: 
    1:     mDocShell->SetChromeEventHandler(chromeEventHandler);
    1:   }
    1: 
    1:   // This is nasty, this code (the do_GetInterface(mDocShell) below)
    1:   // *must* come *after* the above call to
    1:   // mDocShell->SetChromeEventHandler() for the global window to get
    1:   // the right chrome event handler.
    1: 
    1:   // Tell the window about the frame that hosts it.
    1:   nsCOMPtr<nsIDOMElement> frame_element(do_QueryInterface(mOwnerContent));
    1:   NS_ASSERTION(frame_element, "frame loader owner element not a DOM element!");
    1: 
    1:   nsCOMPtr<nsPIDOMWindow> win_private(do_GetInterface(mDocShell));
22769:   nsCOMPtr<nsIBaseWindow> base_win(do_QueryInterface(mDocShell));
22769:   if (win_private) {
    1:     win_private->SetFrameElementInternal(frame_element);
22769:   }
    1: 
    1:   // This is kinda whacky, this call doesn't really create anything,
    1:   // but it must be called to make sure things are properly
23480:   // initialized.
22769:   if (NS_FAILED(base_win->Create()) || !win_private) {
23480:     // Do not call Destroy() here. See bug 472312.
23484:     NS_WARNING("Something wrong when creating the docshell for a frameloader!");
22769:     return NS_ERROR_FAILURE;
22769:   }
    1: 
43461:   EnsureMessageManager();
43461: 
    1:   return NS_OK;
    1: }
    1: 
    1: void
    1: nsFrameLoader::GetURL(nsString& aURI)
    1: {
    1:   aURI.Truncate();
    1: 
    1:   if (mOwnerContent->Tag() == nsGkAtoms::object) {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::data, aURI);
    1:   } else {
    1:     mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::src, aURI);
    1:   }
    1: }
    1: 
    1: nsresult
    1: nsFrameLoader::CheckForRecursiveLoad(nsIURI* aURI)
    1: {
36268:   nsresult rv;
36268: 
    1:   mDepthTooGreat = PR_FALSE;
36268:   rv = MaybeCreateDocShell();
36268:   if (NS_FAILED(rv)) {
36268:     return rv;
36268:   }
36268:   NS_ASSERTION(!mRemoteFrame,
36268:                "Shouldn't call CheckForRecursiveLoad on remote frames.");
36268:   if (!mDocShell) {
36268:     return NS_ERROR_FAILURE;
36268:   }
    1: 
    1:   nsCOMPtr<nsIDocShellTreeItem> treeItem = do_QueryInterface(mDocShell);
    1:   NS_ASSERTION(treeItem, "docshell must be a treeitem!");
    1: 
53949:   // Check that we're still in the docshell tree.
53949:   nsCOMPtr<nsIDocShellTreeOwner> treeOwner;
53949:   treeItem->GetTreeOwner(getter_AddRefs(treeOwner));
53949:   NS_WARN_IF_FALSE(treeOwner,
53949:                    "Trying to load a new url to a docshell without owner!");
53949:   NS_ENSURE_STATE(treeOwner);
53949:   
53949:   
    1:   PRInt32 ourType;
 3556:   rv = treeItem->GetItemType(&ourType);
    1:   if (NS_SUCCEEDED(rv) && ourType != nsIDocShellTreeItem::typeContent) {
    1:     // No need to do recursion-protection here XXXbz why not??  Do we really
    1:     // trust people not to screw up with non-content docshells?
    1:     return NS_OK;
    1:   }
    1: 
    1:   // Bug 8065: Don't exceed some maximum depth in content frames
    1:   // (MAX_DEPTH_CONTENT_FRAMES)
    1:   nsCOMPtr<nsIDocShellTreeItem> parentAsItem;
    1:   treeItem->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   PRInt32 depth = 0;
    1:   while (parentAsItem) {
    1:     ++depth;
    1:     
    1:     if (depth >= MAX_DEPTH_CONTENT_FRAMES) {
    1:       mDepthTooGreat = PR_TRUE;
    1:       NS_WARNING("Too many nested content frames so giving up");
    1: 
    1:       return NS_ERROR_UNEXPECTED; // Too deep, give up!  (silently?)
    1:     }
    1: 
    1:     nsCOMPtr<nsIDocShellTreeItem> temp;
    1:     temp.swap(parentAsItem);
    1:     temp->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   }
    1:   
    1:   // Bug 136580: Check for recursive frame loading
    1:   PRInt32 matchCount = 0;
    1:   treeItem->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   while (parentAsItem) {
    1:     // Check the parent URI with the URI we're loading
    1:     nsCOMPtr<nsIWebNavigation> parentAsNav(do_QueryInterface(parentAsItem));
    1:     if (parentAsNav) {
    1:       // Does the URI match the one we're about to load?
    1:       nsCOMPtr<nsIURI> parentURI;
    1:       parentAsNav->GetCurrentURI(getter_AddRefs(parentURI));
    1:       if (parentURI) {
70215:         // Bug 98158/193011: We need to ignore data after the #
    1:         PRBool equal;
70215:         rv = aURI->EqualsExceptRef(parentURI, &equal);
    1:         NS_ENSURE_SUCCESS(rv, rv);
    1:         
    1:         if (equal) {
    1:           matchCount++;
    1:           if (matchCount >= MAX_SAME_URL_CONTENT_FRAMES) {
    1:             NS_WARNING("Too many nested content frames have the same url (recursion?) so giving up");
    1:             return NS_ERROR_UNEXPECTED;
    1:           }
    1:         }
    1:       }
    1:     }
    1:     nsCOMPtr<nsIDocShellTreeItem> temp;
    1:     temp.swap(parentAsItem);
    1:     temp->GetSameTypeParent(getter_AddRefs(parentAsItem));
    1:   }
    1: 
    1:   return NS_OK;
    1: }
35581: 
36268: NS_IMETHODIMP
36268: nsFrameLoader::UpdatePositionAndSize(nsIFrame *aIFrame)
36268: {
36268:   if (mRemoteFrame) {
47933:     if (mRemoteBrowser) {
36268:       nsIntSize size = GetSubDocumentSize(aIFrame);
54008:       mRemoteBrowser->Move(size);
36268:     }
36268:     return NS_OK;
36268:   }
36268:   return UpdateBaseWindowPositionAndSize(aIFrame);
36268: }
36268: 
36268: nsresult
36268: nsFrameLoader::UpdateBaseWindowPositionAndSize(nsIFrame *aIFrame)
36268: {
36268:   nsCOMPtr<nsIDocShell> docShell;
36268:   GetDocShell(getter_AddRefs(docShell));
36268:   nsCOMPtr<nsIBaseWindow> baseWindow(do_QueryInterface(docShell));
36268: 
36268:   // resize the sub document
36268:   if (baseWindow) {
36268:     PRInt32 x = 0;
36268:     PRInt32 y = 0;
36268: 
36268:     nsWeakFrame weakFrame(aIFrame);
36268: 
36268:     baseWindow->GetPositionAndSize(&x, &y, nsnull, nsnull);
36268: 
36268:     if (!weakFrame.IsAlive()) {
36268:       // GetPositionAndSize() killed us
36268:       return NS_OK;
36268:     }
36268: 
36268:     nsIntSize size = GetSubDocumentSize(aIFrame);
36268: 
36268:     baseWindow->SetPositionAndSize(x, y, size.width, size.height, PR_FALSE);
36268:   }
36268: 
36268:   return NS_OK;
36268: }
36268: 
54084: NS_IMETHODIMP
60322: nsFrameLoader::GetRenderMode(PRUint32* aRenderMode)
60322: {
60445:   *aRenderMode = mRenderMode;
60322:   return NS_OK;
60322: }
60322: 
60322: NS_IMETHODIMP
60322: nsFrameLoader::SetRenderMode(PRUint32 aRenderMode)
60322: {
60445:   if (aRenderMode == mRenderMode) {
55238:     return NS_OK;
54084:   }
54084: 
60445:   mRenderMode = aRenderMode;
60445:   InvalidateFrame(GetPrimaryFrameOfOwningContent());
54084:   return NS_OK;
54084: }
54084: 
36268: nsIntSize
36268: nsFrameLoader::GetSubDocumentSize(const nsIFrame *aIFrame)
36268: {
36268:   nsSize docSizeAppUnits;
36268:   nsPresContext* presContext = aIFrame->PresContext();
36268:   nsCOMPtr<nsIDOMHTMLFrameElement> frameElem = 
36268:     do_QueryInterface(aIFrame->GetContent());
36268:   if (frameElem) {
36268:     docSizeAppUnits = aIFrame->GetSize();
36268:   } else {
36268:     docSizeAppUnits = aIFrame->GetContentRect().Size();
36268:   }
36268:   return nsIntSize(presContext->AppUnitsToDevPixels(docSizeAppUnits.width),
36268:                    presContext->AppUnitsToDevPixels(docSizeAppUnits.height));
36268: }
36268: 
36268: bool
54008: nsFrameLoader::TryRemoteBrowser()
36268: {
54008:   NS_ASSERTION(!mRemoteBrowser, "TryRemoteBrowser called with a remote browser already?");
36268: 
36268:   nsIDocument* doc = mOwnerContent->GetDocument();
36268:   if (!doc) {
36268:     return false;
36268:   }
36268: 
36268:   if (doc->GetDisplayDocument()) {
36268:     // Don't allow subframe loads in external reference documents
36268:     return false;
36268:   }
36268: 
36268:   nsCOMPtr<nsIWebNavigation> parentAsWebNav =
36268:     do_GetInterface(doc->GetScriptGlobalObject());
36268: 
36268:   if (!parentAsWebNav) {
36268:     return false;
36268:   }
36268: 
36268:   nsCOMPtr<nsIDocShellTreeItem> parentAsItem(do_QueryInterface(parentAsWebNav));
36268: 
36268:   PRInt32 parentType;
36268:   parentAsItem->GetItemType(&parentType);
36268: 
36268:   if (parentType != nsIDocShellTreeItem::typeChrome) {
36268:     return false;
36268:   }
36268: 
36268:   if (!mOwnerContent->IsXUL()) {
36268:     return false;
36268:   }
36268: 
36268:   nsAutoString value;
36268:   mOwnerContent->GetAttr(kNameSpaceID_None, nsGkAtoms::type, value);
36268: 
36268:   if (!value.LowerCaseEqualsLiteral("content") &&
36268:       !StringBeginsWith(value, NS_LITERAL_STRING("content-"),
36268:                         nsCaseInsensitiveStringComparator())) {
36268:     return false;
36268:   }
36268: 
47934:   PRUint32 chromeFlags = 0;
47934:   nsCOMPtr<nsIDocShellTreeOwner> parentOwner;
47934:   if (NS_FAILED(parentAsItem->GetTreeOwner(getter_AddRefs(parentOwner))) ||
47934:       !parentOwner) {
47934:     return false;
47934:   }
47934:   nsCOMPtr<nsIXULWindow> window(do_GetInterface(parentOwner));
47934:   if (!window) {
47934:     return false;
47934:   }
47934:   if (NS_FAILED(window->GetChromeFlags(&chromeFlags))) {
47934:     return false;
47934:   }
47934: 
47933:   ContentParent* parent = ContentParent::GetSingleton();
46796:   NS_ASSERTION(parent->IsAlive(), "Process parent should be alive; something is very wrong!");
47934:   mRemoteBrowser = parent->CreateTab(chromeFlags);
47933:   if (mRemoteBrowser) {
36268:     nsCOMPtr<nsIDOMElement> element = do_QueryInterface(mOwnerContent);
47933:     mRemoteBrowser->SetOwnerElement(element);
46491: 
46491:     nsCOMPtr<nsIDocShellTreeItem> rootItem;
46491:     parentAsItem->GetRootTreeItem(getter_AddRefs(rootItem));
46491:     nsCOMPtr<nsIDOMWindow> rootWin = do_GetInterface(rootItem);
46491:     nsCOMPtr<nsIDOMChromeWindow> rootChromeWin = do_QueryInterface(rootWin);
46491:     NS_ABORT_IF_FALSE(rootChromeWin, "How did we not get a chrome window here?");
46491: 
46491:     nsCOMPtr<nsIBrowserDOMWindow> browserDOMWin;
46491:     rootChromeWin->GetBrowserDOMWindow(getter_AddRefs(browserDOMWin));
47933:     mRemoteBrowser->SetBrowserDOMWindow(browserDOMWin);
46796:     
46796:     mChildHost = parent;
36268:   }
36268:   return true;
36268: }
36268: 
47933: mozilla::dom::PBrowserParent*
47933: nsFrameLoader::GetRemoteBrowser()
36268: {
47933:   return mRemoteBrowser;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: nsFrameLoader::ActivateRemoteFrame() {
47933:   if (mRemoteBrowser) {
47933:     mRemoteBrowser->Activate();
36268:     return NS_OK;
36268:   }
36268:   return NS_ERROR_UNEXPECTED;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: nsFrameLoader::SendCrossProcessMouseEvent(const nsAString& aType,
36268:                                           float aX,
36268:                                           float aY,
36268:                                           PRInt32 aButton,
36268:                                           PRInt32 aClickCount,
36268:                                           PRInt32 aModifiers,
36268:                                           PRBool aIgnoreRootScrollFrame)
36268: {
47933:   if (mRemoteBrowser) {
47933:     mRemoteBrowser->SendMouseEvent(aType, aX, aY, aButton,
36268:                                    aClickCount, aModifiers,
36268:                                    aIgnoreRootScrollFrame);
60907:     return NS_OK;
36268:   }
36268:   return NS_ERROR_FAILURE;
36268: }
36268: 
36268: NS_IMETHODIMP
36268: nsFrameLoader::ActivateFrameEvent(const nsAString& aType,
36268:                                   PRBool aCapture)
36268: {
47933:   if (mRemoteBrowser) {
47933:     return mRemoteBrowser->SendActivateFrameEvent(nsString(aType), aCapture) ?
47933:       NS_OK : NS_ERROR_NOT_AVAILABLE;
36268:   }
36268:   return NS_ERROR_FAILURE;
36268: }
36268: 
46726: NS_IMETHODIMP
46726: nsFrameLoader::SendCrossProcessKeyEvent(const nsAString& aType,
46726:                                         PRInt32 aKeyCode,
46726:                                         PRInt32 aCharCode,
46726:                                         PRInt32 aModifiers,
46726:                                         PRBool aPreventDefault)
46726: {
47933:   if (mRemoteBrowser) {
47933:     mRemoteBrowser->SendKeyEvent(aType, aKeyCode, aCharCode, aModifiers,
46726:                                  aPreventDefault);
60907:     return NS_OK;
46726:   }
46726:   return NS_ERROR_FAILURE;
46726: }
46726: 
46761: NS_IMETHODIMP
46871: nsFrameLoader::GetDelayRemoteDialogs(PRBool* aRetVal)
46871: {
46871:   *aRetVal = mDelayRemoteDialogs;
46871:   return NS_OK;
46871: }
46871: 
46871: NS_IMETHODIMP
46871: nsFrameLoader::SetDelayRemoteDialogs(PRBool aDelay)
46871: {
47933:   if (mRemoteBrowser && mDelayRemoteDialogs && !aDelay) {
46871:     nsRefPtr<nsIRunnable> ev =
47933:       NS_NewRunnableMethod(mRemoteBrowser,
46871:                            &mozilla::dom::TabParent::HandleDelayedDialogs);
46871:     NS_DispatchToCurrentThread(ev);
46871:   }
46872:   mDelayRemoteDialogs = aDelay;
46871:   return NS_OK;
46871: }
46871: 
35581: nsresult
35581: nsFrameLoader::CreateStaticClone(nsIFrameLoader* aDest)
35581: {
35581:   nsFrameLoader* dest = static_cast<nsFrameLoader*>(aDest);
36268:   dest->MaybeCreateDocShell();
35581:   NS_ENSURE_STATE(dest->mDocShell);
35581: 
35581:   nsCOMPtr<nsIDOMDocument> dummy = do_GetInterface(dest->mDocShell);
35581:   nsCOMPtr<nsIContentViewer> viewer;
35581:   dest->mDocShell->GetContentViewer(getter_AddRefs(viewer));
35581:   NS_ENSURE_STATE(viewer);
35581: 
35581:   nsCOMPtr<nsIDocShell> origDocShell;
35581:   GetDocShell(getter_AddRefs(origDocShell));
35581:   nsCOMPtr<nsIDOMDocument> domDoc = do_GetInterface(origDocShell);
35581: 
35581:   nsCOMPtr<nsIDocument> doc = do_QueryInterface(domDoc);
35581:   NS_ENSURE_STATE(doc);
35581:   nsCOMPtr<nsIDocument> clonedDoc = doc->CreateStaticClone(dest->mDocShell);
35581:   nsCOMPtr<nsIDOMDocument> clonedDOMDoc = do_QueryInterface(clonedDoc);
35581: 
35581:   viewer->SetDOMDocument(clonedDOMDoc);
35581:   return NS_OK;
35581: }
46683: 
46683: bool LoadScript(void* aCallbackData, const nsAString& aURL)
46683: {
47933:   mozilla::dom::PBrowserParent* tabParent =
47933:     static_cast<nsFrameLoader*>(aCallbackData)->GetRemoteBrowser();
46683:   if (tabParent) {
47933:     return tabParent->SendLoadRemoteScript(nsString(aURL));
46683:   }
42412:   nsFrameLoader* fl = static_cast<nsFrameLoader*>(aCallbackData);
42412:   nsRefPtr<nsInProcessTabChildGlobal> tabChild =
42412:     static_cast<nsInProcessTabChildGlobal*>(fl->GetTabChildGlobalAsEventTarget());
42412:   if (tabChild) {
42412:     tabChild->LoadFrameScript(aURL);
46683:   }
42412:   return true;
42412: }
42412: 
42412: class nsAsyncMessageToChild : public nsRunnable
42412: {
42412: public:
42412:   nsAsyncMessageToChild(nsFrameLoader* aFrameLoader,
42412:                         const nsAString& aMessage, const nsAString& aJSON)
42412:     : mFrameLoader(aFrameLoader), mMessage(aMessage), mJSON(aJSON) {}
42412: 
42412:   NS_IMETHOD Run()
42412:   {
42412:     nsInProcessTabChildGlobal* tabChild =
42412:       static_cast<nsInProcessTabChildGlobal*>(mFrameLoader->mChildMessageManager.get());
42412:     if (tabChild && tabChild->GetInnerManager()) {
70563:       nsFrameScriptCx cx(static_cast<nsPIDOMEventTarget*>(tabChild), tabChild);
70563:       nsRefPtr<nsFrameMessageManager> mm = tabChild->GetInnerManager();
70563:       mm->ReceiveMessage(static_cast<nsPIDOMEventTarget*>(tabChild), mMessage,
42412:                          PR_FALSE, mJSON, nsnull, nsnull);
42412:     }
42412:     return NS_OK;
42412:   }
42412:   nsRefPtr<nsFrameLoader> mFrameLoader;
42412:   nsString mMessage;
42412:   nsString mJSON;
42412: };
46683: 
46683: bool SendAsyncMessageToChild(void* aCallbackData,
46683:                              const nsAString& aMessage,
46683:                              const nsAString& aJSON)
46683: {
47933:   mozilla::dom::PBrowserParent* tabParent =
47933:     static_cast<nsFrameLoader*>(aCallbackData)->GetRemoteBrowser();
46683:   if (tabParent) {
47933:     return tabParent->SendAsyncMessage(nsString(aMessage), nsString(aJSON));
46683:   }
42412:   nsRefPtr<nsIRunnable> ev =
42412:     new nsAsyncMessageToChild(static_cast<nsFrameLoader*>(aCallbackData),
42412:                               aMessage, aJSON);
42412:   NS_DispatchToCurrentThread(ev);
42412:   return true;
46683: }
46683: 
46683: NS_IMETHODIMP
46683: nsFrameLoader::GetMessageManager(nsIChromeFrameMessageManager** aManager)
46683: {
46875:   EnsureMessageManager();
43461:   if (mMessageManager) {
43461:     CallQueryInterface(mMessageManager, aManager);
43461:   }
42412:   return NS_OK;
42412: }
42412: 
60445: NS_IMETHODIMP
60445: nsFrameLoader::GetContentViewsIn(float aXPx, float aYPx,
60445:                                  float aTopSize, float aRightSize,
60445:                                  float aBottomSize, float aLeftSize,
60445:                                  PRUint32* aLength,
60445:                                  nsIContentView*** aResult)
60445: {
60446:   nscoord x = nsPresContext::CSSPixelsToAppUnits(aXPx - aLeftSize);
60446:   nscoord y = nsPresContext::CSSPixelsToAppUnits(aYPx - aTopSize);
60446:   nscoord w = nsPresContext::CSSPixelsToAppUnits(aLeftSize + aRightSize) + 1;
60446:   nscoord h = nsPresContext::CSSPixelsToAppUnits(aTopSize + aBottomSize) + 1;
60446:   nsRect target(x, y, w, h);
60446: 
60446:   nsIFrame* frame = GetPrimaryFrameOfOwningContent();
60446: 
60446:   nsTArray<ViewID> ids;
60446:   nsLayoutUtils::GetRemoteContentIds(frame, target, ids, true);
60446:   if (ids.Length() == 0 || !GetCurrentRemoteFrame()) {
60445:     *aResult = nsnull;
60445:     *aLength = 0;
60445:     return NS_OK;
60445:   }
60445: 
60446:   nsIContentView** result = reinterpret_cast<nsIContentView**>(
60446:     NS_Alloc(ids.Length() * sizeof(nsIContentView*)));
60446: 
60446:   for (PRUint32 i = 0; i < ids.Length(); i++) {
60446:     nsIContentView* view = GetCurrentRemoteFrame()->GetContentView(ids[i]);
60446:     NS_ABORT_IF_FALSE(view, "Retrieved ID from RenderFrameParent, it should be valid!");
60446:     nsRefPtr<nsIContentView>(view).forget(&result[i]);
60446:   }
60446: 
60446:   *aResult = result;
60446:   *aLength = ids.Length();
60446: 
60446:   return NS_OK;
60446: }
60446: 
60445: NS_IMETHODIMP
60445: nsFrameLoader::GetRootContentView(nsIContentView** aContentView)
60445: {
60446:   RenderFrameParent* rfp = GetCurrentRemoteFrame();
60446:   if (!rfp) {
60446:     *aContentView = nsnull;
60446:     return NS_OK;
60446:   }
60446: 
60446:   nsContentView* view = rfp->GetContentView();
60446:   NS_ABORT_IF_FALSE(view, "Should always be able to create root scrollable!");
60446:   nsRefPtr<nsIContentView>(view).forget(aContentView);
60446: 
60445:   return NS_OK;
60445: }
60445: 
42412: nsresult
42412: nsFrameLoader::EnsureMessageManager()
42412: {
42412:   NS_ENSURE_STATE(mOwnerContent);
46875: 
46875:   nsresult rv = MaybeCreateDocShell();
46875:   if (NS_FAILED(rv)) {
46875:     return rv;
46875:   }
49151: 
67579:   if (!mIsTopLevelContent && !mRemoteFrame) {
49290:     return NS_OK;
49290:   }
49290: 
46875:   if (mMessageManager) {
46875:     if (ShouldUseRemoteProcess()) {
54008:       mMessageManager->SetCallbackData(mRemoteBrowserShown ? this : nsnull);
46875:     }
42412:     return NS_OK;
42412:   }
42412: 
46683:   nsIScriptContext* sctx = mOwnerContent->GetContextForEventHandlers(&rv);
46683:   NS_ENSURE_SUCCESS(rv, rv);
46683:   NS_ENSURE_STATE(sctx);
46683:   JSContext* cx = static_cast<JSContext*>(sctx->GetNativeContext());
46683:   NS_ENSURE_STATE(cx);
46683: 
46683:   nsCOMPtr<nsIDOMChromeWindow> chromeWindow =
46683:     do_QueryInterface(mOwnerContent->GetOwnerDoc()->GetWindow());
46683:   NS_ENSURE_STATE(chromeWindow);
46683:   nsCOMPtr<nsIChromeFrameMessageManager> parentManager;
46683:   chromeWindow->GetMessageManager(getter_AddRefs(parentManager));
46683: 
46875:   if (ShouldUseRemoteProcess()) {
46683:     mMessageManager = new nsFrameMessageManager(PR_TRUE,
46683:                                                 nsnull,
46683:                                                 SendAsyncMessageToChild,
46683:                                                 LoadScript,
54008:                                                 mRemoteBrowserShown ? this : nsnull,
46683:                                                 static_cast<nsFrameMessageManager*>(parentManager.get()),
46683:                                                 cx);
46683:     NS_ENSURE_TRUE(mMessageManager, NS_ERROR_OUT_OF_MEMORY);
46875:   } else
46875:   {
46875: 
42412:     mMessageManager = new nsFrameMessageManager(PR_TRUE,
42412:                                                 nsnull,
42412:                                                 SendAsyncMessageToChild,
42412:                                                 LoadScript,
43461:                                                 nsnull,
42412:                                                 static_cast<nsFrameMessageManager*>(parentManager.get()),
42412:                                                 cx);
42412:     NS_ENSURE_TRUE(mMessageManager, NS_ERROR_OUT_OF_MEMORY);
42412:     mChildMessageManager =
42412:       new nsInProcessTabChildGlobal(mDocShell, mOwnerContent, mMessageManager);
43461:     mMessageManager->SetCallbackData(this);
46683:   }
46683:   return NS_OK;
46683: }
42412: 
42412: nsPIDOMEventTarget*
42412: nsFrameLoader::GetTabChildGlobalAsEventTarget()
42412: {
42412:   return static_cast<nsInProcessTabChildGlobal*>(mChildMessageManager.get());
42412: }
