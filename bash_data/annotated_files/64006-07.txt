18505: ////////////////////////////////////////////////////////////////////////////////
18505: // Interfaces
18505: 
18505: const nsIAccessibleRetrieval = Components.interfaces.nsIAccessibleRetrieval;
18505: 
18505: const nsIAccessibleEvent = Components.interfaces.nsIAccessibleEvent;
22209: const nsIAccessibleStateChangeEvent =
22209:   Components.interfaces.nsIAccessibleStateChangeEvent;
22834: const nsIAccessibleCaretMoveEvent =
22834:   Components.interfaces.nsIAccessibleCaretMoveEvent;
42378: const nsIAccessibleTextChangeEvent =
42378:   Components.interfaces.nsIAccessibleTextChangeEvent;
22209: 
18505: const nsIAccessibleStates = Components.interfaces.nsIAccessibleStates;
18505: const nsIAccessibleRole = Components.interfaces.nsIAccessibleRole;
18505: const nsIAccessibleTypes = Components.interfaces.nsIAccessibleTypes;
18505: 
18505: const nsIAccessibleRelation = Components.interfaces.nsIAccessibleRelation;
18505: 
18505: const nsIAccessNode = Components.interfaces.nsIAccessNode;
18505: const nsIAccessible = Components.interfaces.nsIAccessible;
18505: 
24668: const nsIAccessibleCoordinateType =
24668:       Components.interfaces.nsIAccessibleCoordinateType;
24668: 
18505: const nsIAccessibleDocument = Components.interfaces.nsIAccessibleDocument;
39600: const nsIAccessibleApplication = Components.interfaces.nsIAccessibleApplication;
18505: 
18505: const nsIAccessibleText = Components.interfaces.nsIAccessibleText;
18505: const nsIAccessibleEditableText = Components.interfaces.nsIAccessibleEditableText;
18505: 
18505: const nsIAccessibleHyperLink = Components.interfaces.nsIAccessibleHyperLink;
18505: const nsIAccessibleHyperText = Components.interfaces.nsIAccessibleHyperText;
18505: 
18505: const nsIAccessibleImage = Components.interfaces.nsIAccessibleImage;
18505: const nsIAccessibleSelectable = Components.interfaces.nsIAccessibleSelectable;
18505: const nsIAccessibleTable = Components.interfaces.nsIAccessibleTable;
32381: const nsIAccessibleTableCell = Components.interfaces.nsIAccessibleTableCell;
18505: const nsIAccessibleValue = Components.interfaces.nsIAccessibleValue;
18505: 
18505: const nsIObserverService = Components.interfaces.nsIObserverService;
18505: 
24653: const nsIDOMDocument = Components.interfaces.nsIDOMDocument;
25588: const nsIDOMEvent = Components.interfaces.nsIDOMEvent;
25588: const nsIDOMHTMLDocument = Components.interfaces.nsIDOMHTMLDocument;
18505: const nsIDOMNode = Components.interfaces.nsIDOMNode;
28197: const nsIDOMNSHTMLElement = Components.interfaces.nsIDOMNSHTMLElement;
24653: const nsIDOMWindow = Components.interfaces.nsIDOMWindow;
28197: const nsIDOMXULElement = Components.interfaces.nsIDOMXULElement;
24653: 
21002: const nsIPropertyElement = Components.interfaces.nsIPropertyElement;
18505: 
18505: ////////////////////////////////////////////////////////////////////////////////
24184: // OS detect
24184: const MAC = (navigator.platform.indexOf("Mac") != -1)? true : false;
24184: const LINUX = (navigator.platform.indexOf("Linux") != -1)? true : false;
36871: const SOLARIS = (navigator.platform.indexOf("SunOS") != -1)? true : false;
24184: const WIN = (navigator.platform.indexOf("Win") != -1)? true : false;
24184: 
24184: ////////////////////////////////////////////////////////////////////////////////
18546: // Accessible general
18505: 
56234: const STATE_BUSY = nsIAccessibleStates.STATE_BUSY;
56234: 
47106: const kEmbedChar = String.fromCharCode(0xfffc);
47106: 
64006: const kDiscBulletText = String.fromCharCode(0x2022) + " ";
64006: const kCircleBulletText = String.fromCharCode(0x25e6) + " ";
64006: const kSquareBulletText = String.fromCharCode(0x25aa) + " ";
64006: 
18505: /**
18505:  * nsIAccessibleRetrieval, initialized when test is loaded.
18505:  */
18505: var gAccRetrieval = null;
18505: 
18505: /**
32990:  * Invokes the given function when document is loaded and focused. Preferable
32990:  * to mochitests 'addLoadEvent' function -- additionally ensures state of the
32990:  * document accessible is not busy.
22869:  *
22869:  * @param aFunc  the function to invoke
22869:  */
22869: function addA11yLoadEvent(aFunc)
22869: {
22869:   function waitForDocLoad()
22869:   {
22869:     window.setTimeout(
22869:       function()
22869:       {
22869:         var accDoc = getAccessible(document);
22869:         var state = {};
22869:         accDoc.getState(state, {});
29565:         if (state.value & STATE_BUSY)
22869:           return waitForDocLoad();
22869: 
36459:         window.setTimeout(aFunc, 150);
22869:       },
36459:       0
22869:     );
22869:   }
22869: 
32990:   SimpleTest.waitForFocus(waitForDocLoad);
22869: }
22869: 
22869: ////////////////////////////////////////////////////////////////////////////////
36459: // Helpers for getting DOM node/accessible
22869: 
22869: /**
28190:  * Return the DOM node by identifier (may be accessible, DOM node or ID).
22834:  */
28190: function getNode(aAccOrNodeOrID)
22834: {
28190:   if (!aAccOrNodeOrID)
22834:     return null;
22834: 
28190:   if (aAccOrNodeOrID instanceof nsIDOMNode)
28190:     return aAccOrNodeOrID;
22834: 
28190:   if (aAccOrNodeOrID instanceof nsIAccessible) {
28190:     aAccOrNodeOrID.QueryInterface(nsIAccessNode);
28190:     return aAccOrNodeOrID.DOMNode;
28190:   }
22834: 
28190:   node = document.getElementById(aAccOrNodeOrID);
22834:   if (!node) {
28190:     ok(false, "Can't get DOM element for " + aAccOrNodeOrID);
22834:     return null;
22834:   }
22834: 
22834:   return node;
22834: }
22834: 
22834: /**
25588:  * Constants indicates getAccessible doesn't fail if there is no accessible.
25588:  */
25588: const DONOTFAIL_IF_NO_ACC = 1;
25588: 
25588: /**
25588:  * Constants indicates getAccessible won't fail if accessible doesn't implement
25588:  * the requested interfaces.
25588:  */
25588: const DONOTFAIL_IF_NO_INTERFACE = 2;
25588: 
25588: /**
23970:  * Return accessible for the given identifier (may be ID attribute or DOM
31633:  * element or accessible object) or null.
18505:  *
23970:  * @param aAccOrElmOrID      [in] identifier to get an accessible implementing
23970:  *                           the given interfaces
23970:  * @param aInterfaces        [in, optional] the interface or an array interfaces
23970:  *                           to query it/them from obtained accessible
18505:  * @param aElmObj            [out, optional] object to store DOM element which
18546:  *                           accessible is obtained for
25588:  * @param aDoNotFailIf       [in, optional] no error for special cases (see
25588:  *                            constants above)
18505:  */
25588: function getAccessible(aAccOrElmOrID, aInterfaces, aElmObj, aDoNotFailIf)
18505: {
25175:   if (!aAccOrElmOrID)
31633:     return null;
25175: 
18505:   var elm = null;
18505: 
18546:   if (aAccOrElmOrID instanceof nsIAccessible) {
18546:     aAccOrElmOrID.QueryInterface(nsIAccessNode);
18546:     elm = aAccOrElmOrID.DOMNode;
18546: 
18546:   } else if (aAccOrElmOrID instanceof nsIDOMNode) {
18546:     elm = aAccOrElmOrID;
18546: 
18505:   } else {
43320:     elm = document.getElementById(aAccOrElmOrID);
18505:     if (!elm) {
20452:       ok(false, "Can't get DOM element for " + aAccOrElmOrID);
18505:       return null;
18505:     }
18505:   }
18505: 
18505:   if (aElmObj && (typeof aElmObj == "object"))
18505:     aElmObj.value = elm;
18505: 
18546:   var acc = (aAccOrElmOrID instanceof nsIAccessible) ? aAccOrElmOrID : null;
18546:   if (!acc) {
18505:     try {
18505:       acc = gAccRetrieval.getAccessibleFor(elm);
18505:     } catch (e) {
18505:     }
18505: 
18505:     if (!acc) {
25588:       if (!(aDoNotFailIf & DONOTFAIL_IF_NO_ACC))
19322:         ok(false, "Can't get accessible for " + aAccOrElmOrID);
23970: 
18505:       return null;
18505:     }
18546:   }
18505: 
43764:   acc.QueryInterface(nsIAccessNode);
43764: 
18505:   if (!aInterfaces)
18505:     return acc;
18505: 
18505:   if (aInterfaces instanceof Array) {
18505:     for (var index = 0; index < aInterfaces.length; index++) {
18505:       try {
18505:         acc.QueryInterface(aInterfaces[index]);
18505:       } catch (e) {
25588:         if (!(aDoNotFailIf & DONOTFAIL_IF_NO_INTERFACE))
28024:           ok(false, "Can't query " + aInterfaces[index] + " for " + aAccOrElmOrID);
25588: 
18505:         return null;
18505:       }
18505:     }
18505:     return acc;
18505:   }
18505:   
18505:   try {
18505:     acc.QueryInterface(aInterfaces);
18505:   } catch (e) {
28024:     ok(false, "Can't query " + aInterfaces + " for " + aAccOrElmOrID);
18505:     return null;
18505:   }
18505:   
18505:   return acc;
18505: }
18505: 
23970: /**
25765:  * Return true if the given identifier has an accessible, or exposes the wanted
25765:  * interfaces.
23970:  */
25765: function isAccessible(aAccOrElmOrID, aInterfaces)
23970: {
25765:   return getAccessible(aAccOrElmOrID, aInterfaces, null,
25765:                        DONOTFAIL_IF_NO_ACC | DONOTFAIL_IF_NO_INTERFACE) ?
25588:     true : false;
23970: }
23970: 
24235: /**
56292:  * Return an accessible that contains the DOM node for the given identifier.
56292:  */
56292: function getContainerAccessible(aAccOrElmOrID)
56292: {
56292:   var node = getNode(aAccOrElmOrID);
56292:   if (!node)
56292:     return null;
56292: 
56292:   while ((node = node.parentNode) && !isAccessible(node));
56292:   return node ? getAccessible(node) : null;
56292: }
56292: 
56292: /**
31733:  * Return root accessible for the given identifier.
31733:  */
31733: function getRootAccessible(aAccOrElmOrID)
31733: {
42496:   var acc = getAccessible(aAccOrElmOrID ? aAccOrElmOrID : document,
42496:                           [nsIAccessNode]);
39601:   return acc ? acc.rootDocument.QueryInterface(nsIAccessible) : null;
31733: }
31733: 
31733: /**
56234:  * Return tab document accessible the given accessible is contained by.
56234:  */
56234: function getTabDocAccessible(aAccOrElmOrID)
56234: {
56234:   var acc = getAccessible(aAccOrElmOrID ? aAccOrElmOrID : document,
56234:                           [nsIAccessNode]);
56234: 
56234:   var docAcc = acc.document.QueryInterface(nsIAccessible);
56234:   var containerDocAcc = docAcc.parent.QueryInterface(nsIAccessNode).document;
56234: 
56234:   // Test is running is stand-alone mode.
56234:   if (acc.rootDocument == containerDocAcc)
56234:     return docAcc;
56234: 
56234:   // In the case of running all tests together.
56234:   return containerDocAcc.QueryInterface(nsIAccessible);
56234: }
56234: 
56234: /**
35523:  * Return application accessible.
35523:  */
35523: function getApplicationAccessible()
35523: {
39600:   return gAccRetrieval.getApplicationAccessible().
39600:     QueryInterface(nsIAccessibleApplication);
35523: }
35523: 
35523: /**
25175:  * Run through accessible tree of the given identifier so that we ensure
25175:  * accessible tree is created.
25175:  */
25175: function ensureAccessibleTree(aAccOrElmOrID)
25175: {
25175:   var acc = getAccessible(aAccOrElmOrID);
25175:   if (!acc)
25175:     return;
25175: 
25175:   var child = acc.firstChild;
25175:   while (child) {
25175:     ensureAccessibleTree(child);
25175:     try {
25175:       child = child.nextSibling;
25175:     } catch (e) {
25175:       child = null;
25175:     }
25175:   }
25175: }
25175: 
25175: /**
27515:  * Compare expected and actual accessibles trees.
32381:  *
32381:  * @param  aAccOrElmOrID  [in] accessible identifier
32381:  * @param  aAccTree       [in] JS object, each field corresponds to property of
32381:  *                         accessible object. Additionally special properties
32381:  *                         are presented:
32381:  *                          children - an array of JS objects representing
32381:  *                                      children of accessible
32381:  *                          states   - an object having states and extraStates
32381:  *                                      fields
27515:  */
27515: function testAccessibleTree(aAccOrElmOrID, aAccTree)
27515: {
27515:   var acc = getAccessible(aAccOrElmOrID);
27515:   if (!acc)
27515:     return;
27515: 
57448:   var accTree = aAccTree;
57448: 
57448:   // Support of simplified accessible tree object.
57448:   var key = Object.keys(accTree)[0];
57448:   var roleName = "ROLE_" + key;
57448:   if (roleName in nsIAccessibleRole) {
57448:     accTree = {
57448:       role: nsIAccessibleRole[roleName],
57448:       children: accTree[key]
57448:     };
57448:   }
57448: 
57448:   // Test accessible properties.
57448:   for (var prop in accTree) {
32381:     var msg = "Wrong value of property '" + prop + "' for " + prettyName(acc) + ".";
28726:     if (prop == "role") {
57448:       is(roleToString(acc[prop]), roleToString(accTree[prop]), msg);
28726: 
28726:     } else if (prop == "states") {
57448:       var statesObj = accTree[prop];
28726:       testStates(acc, statesObj.states, statesObj.extraStates,
28726:                  statesObj.absentStates, statesObj.absentExtraStates);
28726: 
28726:     } else if (prop != "children") {
57448:       is(acc[prop], accTree[prop], msg);
27515:     }
28726:   }
27515: 
57448:   // Test children.
57448:   if ("children" in accTree && accTree["children"] instanceof Array) {
27515:     var children = acc.children;
57448:     is(children.length, accTree.children.length,
28726:        "Different amount of expected children of " + prettyName(acc) + ".");
27515: 
57448:     if (accTree.children.length == children.length) {
30761:       var childCount = children.length;
30761: 
30761:       // nsIAccessible::firstChild
30761:       var expectedFirstChild = childCount > 0 ?
30761:         children.queryElementAt(0, nsIAccessible) : null;
30761:       var firstChild = null;
30761:       try { firstChild = acc.firstChild; } catch (e) {}
30761:       is(firstChild, expectedFirstChild,
30761:          "Wrong first child of " + prettyName(acc));
30761: 
30761:       // nsIAccessible::lastChild
30761:       var expectedLastChild = childCount > 0 ?
30761:         children.queryElementAt(childCount - 1, nsIAccessible) : null;
30761:       var lastChild = null;
30761:       try { lastChild = acc.lastChild; } catch (e) {}
30761:       is(lastChild, expectedLastChild,
30761:          "Wrong last child of " + prettyName(acc));
30761: 
27515:       for (var i = 0; i < children.length; i++) {
27515:         var child = children.queryElementAt(i, nsIAccessible);
30761: 
30761:         // nsIAccessible::parent
30761:         var parent = null;
30761:         try { parent = child.parent; } catch (e) {}
30761:         is(parent, acc, "Wrong parent of " + prettyName(child));
30761: 
35523:         // nsIAccessible::indexInParent
35523:         var indexInParent = -1;
35523:         try { indexInParent = child.indexInParent; } catch(e) {}
35523:         is(indexInParent, i,
35523:            "Wrong index in parent of " + prettyName(child));
35523: 
30761:         // nsIAccessible::nextSibling
30761:         var expectedNextSibling = (i < childCount - 1) ?
30761:           children.queryElementAt(i + 1, nsIAccessible) : null;
30761:         var nextSibling = null;
30761:         try { nextSibling = child.nextSibling; } catch (e) {}
30761:         is(nextSibling, expectedNextSibling,
30761:            "Wrong next sibling of " + prettyName(child));
30761: 
30761:         // nsIAccessible::previousSibling
30761:         var expectedPrevSibling = (i > 0) ?
30761:           children.queryElementAt(i - 1, nsIAccessible) : null;
30761:         var prevSibling = null;
30761:         try { prevSibling = child.previousSibling; } catch (e) {}
30761:         is(prevSibling, expectedPrevSibling,
30761:            "Wrong previous sibling of " + prettyName(child));
30761: 
30761:         // Go down through subtree
57448:         testAccessibleTree(child, accTree.children[i]);
27515:       }
27515:     }
27515:   }
27515: }
27515: 
35523: /**
43764:  * Return true if accessible for the given node is in cache.
43764:  */
43764: function isAccessibleInCache(aNodeOrId)
43764: {
43764:   var node = getNode(aNodeOrId);
43764:   return gAccRetrieval.getAccessibleFromCache(node) ? true : false;
43764: }
43764: 
43764: /**
35523:  * Test accessible tree for defunct accessible.
35523:  *
35523:  * @param  aAcc       [in] the defunct accessible
35523:  * @param  aNodeOrId  [in] the DOM node identifier for the defunct accessible
35523:  */
35523: function testDefunctAccessible(aAcc, aNodeOrId)
35523: {
35523:   if (aNodeOrId)
35523:     ok(!isAccessible(aNodeOrId),
35523:        "Accessible for " + aNodeOrId + " wasn't properly shut down!");
35523: 
35523:   var msg = " doesn't fail for shut down accessible " + prettyName(aNodeOrId) + "!";
35523: 
35523:   // firstChild
35523:   var success = false;
35523:   try {
35523:     aAcc.firstChild;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE)
35523:   }
35523:   ok(success, "firstChild" + msg);
35523: 
35523:   // lastChild
35523:   success = false;
35523:   try {
35523:     aAcc.lastChild;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE)
35523:   }
35523:   ok(success, "lastChild" + msg);
35523: 
35523:   // childCount
35523:   success = false;
35523:   try {
35523:     aAcc.childCount;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE)
35523:   }
35523:   ok(success, "childCount" + msg);
35523: 
35523:   // children
35523:   success = false;
35523:   try {
35523:     aAcc.children;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE)
35523:   }
35523:   ok(success, "children" + msg);
35523: 
35523:   // nextSibling
35523:   success = false;
35523:   try {
35523:     aAcc.nextSibling;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE);
35523:   }
35523:   ok(success, "nextSibling" + msg);
35523: 
35523:   // previousSibling
35523:   success = false;
35523:   try {
35523:     aAcc.previousSibling;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE);
35523:   }
35523:   ok(success, "previousSibling" + msg);
35523: 
35523:   // parent
35523:   success = false;
35523:   try {
35523:     aAcc.parent;
35523:   } catch (e) {
35523:     success = (e.result == Components.results.NS_ERROR_FAILURE);
35523:   }
35523:   ok(success, "parent" + msg);
35523: }
35523: 
27515: 
27515: /**
24235:  * Convert role to human readable string.
24235:  */
24235: function roleToString(aRole)
24235: {
24235:   return gAccRetrieval.getStringRole(aRole);
24235: }
24235: 
24235: /**
24235:  * Convert states to human readable string.
24235:  */
24235: function statesToString(aStates, aExtraStates)
24235: {
24235:   var list = gAccRetrieval.getStringStates(aStates, aExtraStates);
24235: 
24235:   var str = "";
29565:   for (var index = 0; index < list.length - 1; index++)
24235:     str += list.item(index) + ", ";
24235: 
29565:   if (list.length != 0)
29565:     str += list.item(index)
29565: 
24235:   return str;
24235: }
24235: 
24235: /**
24235:  * Convert event type to human readable string.
24235:  */
24235: function eventTypeToString(aEventType)
24235: {
27829:   return gAccRetrieval.getStringEventType(aEventType);
24235: }
24235: 
24235: /**
24235:  * Convert relation type to human readable string.
24235:  */
24235: function relationTypeToString(aRelationType)
24235: {
24235:   return gAccRetrieval.getStringRelationType(aRelationType);
24235: }
24235: 
24822: /**
59275:  * Return text from clipboard.
59275:  */
59275: function getTextFromClipboard()
59275: {
59275:   var clip = Components.classes["@mozilla.org/widget/clipboard;1"].
59275:     getService(Components.interfaces.nsIClipboard);
59275:   if (!clip)
59275:     return;
59275: 
59275:   var trans = Components.classes["@mozilla.org/widget/transferable;1"].
59275:     createInstance(Components.interfaces.nsITransferable);
59275:   if (!trans)
59275:     return;
59275: 
59275:   trans.addDataFlavor("text/unicode");
59275:   clip.getData(trans, clip.kGlobalClipboard);
59275: 
59275:   var str = new Object();
59275:   var strLength = new Object();
59275:   trans.getTransferData("text/unicode", str, strLength);
59275: 
59275:   if (str)
59275:     str = str.value.QueryInterface(Components.interfaces.nsISupportsString);
59275:   if (str)
59275:     return str.data.substring(0, strLength.value / 2);
59275: 
59275:   return "";
59275: }
59275: 
59275: /**
24822:  * Return pretty name for identifier, it may be ID, DOM node or accessible.
24822:  */
24822: function prettyName(aIdentifier)
24822: {
24822:   if (aIdentifier instanceof nsIAccessible) {
24822:     var acc = getAccessible(aIdentifier, [nsIAccessNode]);
43310:     var msg = "[" + getNodePrettyName(acc.DOMNode);
43310:     try {
43310:       msg += ", role: " + roleToString(acc.role);
28314:       if (acc.name)
43310:         msg += ", name: '" + acc.name + "'";
43310:     } catch (e) {
43310:       msg += "defunct";
43310:     }
56292: 
56292:     if (acc) {
56292:       var exp = /native\s*@\s*(0x[a-f0-9]+)/g;
56292:       var match = exp.exec(acc.valueOf());
56292:       if (match)
56292:         msg += ", address: " + match[1];
56292:       else
56292:         msg += ", address: " + acc.valueOf();
56292:     }
28314:     msg += "]";
28314: 
28314:     return msg;
24822:   }
24822: 
24822:   if (aIdentifier instanceof nsIDOMNode)
24822:     return getNodePrettyName(aIdentifier);
24822: 
24822:   return " '" + aIdentifier + "' ";
24822: }
24822: 
18505: ////////////////////////////////////////////////////////////////////////////////
18505: // Private
18505: ////////////////////////////////////////////////////////////////////////////////
18505: 
18505: ////////////////////////////////////////////////////////////////////////////////
18546: // Accessible general
18505: 
18505: function initialize()
18505: {
18505:   gAccRetrieval = Components.classes["@mozilla.org/accessibleRetrieval;1"].
18505:     getService(nsIAccessibleRetrieval);
18505: }
18505: 
18505: addLoadEvent(initialize);
24822: 
24822: function getNodePrettyName(aNode)
24822: {
28190:   try {
30527:     if (aNode.nodeType == nsIDOMNode.DOCUMENT_NODE)
30527:       return " 'document node' ";
30527: 
56292:     var name = " '" + aNode.localName;
56292:     if (aNode.nodeType == nsIDOMNode.ELEMENT_NODE && aNode.hasAttribute("id"))
56292:       name += "@id='" + aNode.getAttribute("id") + "'";
56292: 
56292:     name += " node' "
56292:     return name;
28190:   } catch (e) {
56292:     return "' no node info '";
24822:   }
28190: }
