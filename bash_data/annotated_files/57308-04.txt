53178: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
53178:  * vim: set ts=4 sw=4 et tw=99:
53178:  *
53178:  * ***** BEGIN LICENSE BLOCK *****
53168:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
53168:  *
53168:  * The contents of this file are subject to the Mozilla Public License Version
53168:  * 1.1 (the "License"); you may not use this file except in compliance with
53168:  * the License. You may obtain a copy of the License at
53168:  * http://www.mozilla.org/MPL/
53168:  *
53168:  * Software distributed under the License is distributed on an "AS IS" basis,
53168:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
53168:  * for the specific language governing rights and limitations under the
53168:  * License.
53168:  *
53168:  * The Original Code is Mozilla Jaegermonkey.
53168:  *
53168:  * The Initial Developer of the Original Code is the Mozilla Foundation.
53168:  *
53168:  * Portions created by the Initial Developer are Copyright (C) 2010
53168:  * the Initial Developer. All Rights Reserved.
53168:  *
53168:  * Contributor(s):
53168:  *   Andrew Drake <drakedevel@gmail.com>
53168:  *
53168:  * Alternatively, the contents of this file may be used under the terms of
53168:  * either the GNU General Public License Version 2 or later (the "GPL"), or
53168:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
53168:  * in which case the provisions of the GPL or the LGPL are applicable instead
53168:  * of those above. If you wish to allow use of your version of this file only
53168:  * under the terms of either the GPL or the LGPL, and not to allow others to
53168:  * use your version of this file under the terms of the MPL, indicate your
53168:  * decision by deleting the provisions above and replace them with the notice
53168:  * and other provisions required by the GPL or the LGPL. If you do not delete
53168:  * the provisions above, a recipient may use your version of this file under
53168:  * the terms of any one of the MPL, the GPL or the LGPL.
53168:  *
53168:  * ***** END LICENSE BLOCK ***** */
53168: 
53168: #ifdef JS_METHODJIT
53178: 
53168: #include "Retcon.h"
53168: #include "MethodJIT.h"
53168: #include "Compiler.h"
53168: #include "jsdbgapi.h"
53168: #include "jsnum.h"
53168: 
53168: #include "jscntxtinlines.h"
53168: 
53168: using namespace js;
53168: using namespace js::mjit;
53168: 
53168: namespace js {
53168: namespace mjit {
53168: 
53168: AutoScriptRetrapper::~AutoScriptRetrapper()
53168: {
53168:     while (!traps.empty()) {
53168:         jsbytecode *pc = traps.back();
53168:         traps.popBack();
53168:         *pc = JSOP_TRAP;
53168:     }
53168: }
53168: 
53168: bool
53168: AutoScriptRetrapper::untrap(jsbytecode *pc)
53168: {
53168:     if (!traps.append(pc))
53168:         return false;
53168:     *pc = JS_GetTrapOpcode(cx, script, pc);
53168:     return true;
53168: }
53168: 
53168: Recompiler::PatchableAddress
55503: Recompiler::findPatch(JITScript *jit, void **location)
53168: { 
55503:     uint8* codeStart = (uint8 *)jit->code.m_code.executableAddress();
55503:     for (uint32 i = 0; i < jit->nCallSites; i++) {
55503:         if (jit->callSites[i].codeOffset + codeStart == *location) {
53168:             PatchableAddress result;
53168:             result.location = location;
55503:             result.callSite = jit->callSites[i];
53168:             return result;
53168:         }
53168:     }
53168: 
53168:     JS_NOT_REACHED("failed to find call site");
53168:     return PatchableAddress();
53168: }
53168: 
53168: void
53168: Recompiler::applyPatch(Compiler& c, PatchableAddress& toPatch)
53168: {
53168:     void *result = c.findCallSite(toPatch.callSite);
53168:     JS_ASSERT(result);
53168:     *toPatch.location = result;
53168: }
53168: 
53391: Recompiler::Recompiler(JSContext *cx, JSScript *script)
53391:   : cx(cx), script(script)
53168: {    
53168: }
53168: 
53168: /*
53168:  * The strategy for this goes as follows:
53168:  * 
53168:  * 1) Scan the stack, looking at all return addresses that could go into JIT
53168:  *    code.
53168:  * 2) If an address corresponds to a call site registered by |callSite| during
53168:  *    the last compilation, remember it.
53168:  * 3) Purge the old compiled state and return if there were no active frames of 
53168:  *    this script on the stack.
53168:  * 4) Fix up the stack by replacing all saved addresses with the addresses the
53168:  *    new compiler gives us for the call sites.
53168:  */
53168: bool
53168: Recompiler::recompile()
53168: {
55503:     JS_ASSERT(script->hasJITCode());
53168: 
55503:     Vector<PatchableAddress> normalPatches(cx);
55503:     Vector<PatchableAddress> ctorPatches(cx);
53168: 
55503:     JSStackFrame *firstCtorFrame = NULL;
55503:     JSStackFrame *firstNormalFrame = NULL;
56854: 
56854:     // Find all JIT'd stack frames to account for return addresses that will
56854:     // need to be patched after recompilation.
56854:     for (VMFrame *f = script->compartment->jaegerCompartment->activeFrame();
56854:          f != NULL;
56854:          f = f->previous) {
56854: 
56854:         // Scan all frames owned by this VMFrame.
57308:         JSStackFrame *end = f->entryfp->prev();
56854:         for (JSStackFrame *fp = f->fp(); fp != end; fp = fp->prev()) {
56854:             // Remember the latest frame for each type of JIT'd code, so the
56854:             // compiler will have a frame to re-JIT from.
56854:             if (!firstCtorFrame && fp->script() == script && fp->isConstructing())
56854:                 firstCtorFrame = fp;
56854:             else if (!firstNormalFrame && fp->script() == script && !fp->isConstructing())
56854:                 firstNormalFrame = fp;
56854: 
56854:             void **addr = fp->addressOfNativeReturnAddress();
55503:             if (script->jitCtor && script->jitCtor->isValidCode(*addr)) {
55503:                 if (!ctorPatches.append(findPatch(script->jitCtor, addr)))
55503:                     return false;
55503:             } else if (script->jitNormal && script->jitNormal->isValidCode(*addr)) {
55503:                 if (!normalPatches.append(findPatch(script->jitNormal, addr)))
53168:                     return false;
53168:             }
53168:         }
53168: 
55503:         void **addr = f->returnAddressLocation();
55503:         if (script->jitCtor && script->jitCtor->isValidCode(*addr)) {
55503:             if (!ctorPatches.append(findPatch(script->jitCtor, addr)))
55503:                 return false;
55503:         } else if (script->jitNormal && script->jitNormal->isValidCode(*addr)) {
55503:             if (!normalPatches.append(findPatch(script->jitNormal, addr)))
53168:                 return false;
53168:         }
53391:     }
53168: 
53168:     ReleaseScriptCode(cx, script);
53168: 
55503:     if (normalPatches.length() && !recompile(firstNormalFrame, normalPatches))
55503:         return false;
55503: 
55503:     if (ctorPatches.length() && !recompile(firstCtorFrame, ctorPatches))
55503:         return false;
55503: 
55490:     return true;
55503: }
55487: 
55503: bool
55503: Recompiler::recompile(JSStackFrame *fp, Vector<PatchableAddress> &patches)
55503: {
53391:     /* If we get this far, the script is live, and we better be safe to re-jit. */
53391:     JS_ASSERT(cx->compartment->debugMode);
55503:     JS_ASSERT(fp);
53391: 
55503:     Compiler c(cx, fp);
55503:     if (c.compile() != Compile_Okay)
53168:         return false;
53168: 
53168:     /* Perform the earlier scanned patches */
55503:     for (uint32 i = 0; i < patches.length(); i++)
55503:         applyPatch(c, patches[i]);
53168: 
53168:     return true;
53168: }
53168: 
53170: } /* namespace mjit */
53170: } /* namespace js */
53168: 
53178: #endif /* JS_METHODJIT */
53178: 
