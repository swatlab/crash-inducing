    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: Aaron Leventhal (aaronl@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsAccessibleWrap.h"
41384: 
    1: #include "nsAccessibilityAtoms.h"
41384: #include "nsAccUtils.h"
41384: #include "nsCoreUtils.h"
41384: #include "nsRelUtils.h"
54220: #include "nsWinUtils.h"
67790: #include "States.h"
  563: 
  563: #include "nsIAccessibleDocument.h"
  563: #include "nsIAccessibleEvent.h"
    1: #include "nsIAccessibleWin32Object.h"
    1: 
    1: #include "Accessible2_i.c"
    1: #include "AccessibleStates.h"
    1: 
    1: #include "nsIMutableArray.h"
    1: #include "nsIDOMDocument.h"
    1: #include "nsIFrame.h"
    1: #include "nsIScrollableFrame.h"
    1: #include "nsINameSpaceManager.h"
    1: #include "nsINodeInfo.h"
 1249: #include "nsRootAccessible.h"
    1: #include "nsIServiceManager.h"
    1: #include "nsTextFormatter.h"
    1: #include "nsIView.h"
37070: #include "nsIViewManager.h"
    1: #include "nsRoleMap.h"
  563: #include "nsEventMap.h"
    1: #include "nsArrayUtils.h"
    1: 
    1: /* For documentation of the accessibility architecture,
    1:  * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
    1:  */
    1: 
    1: //#define DEBUG_LEAKS
    1: 
    1: #ifdef DEBUG_LEAKS
    1: static gAccessibles = 0;
    1: #endif
    1: 
    1: EXTERN_C GUID CDECL CLSID_Accessible =
    1: { 0x61044601, 0xa811, 0x4e2b, { 0xbb, 0xba, 0x17, 0xbf, 0xab, 0xd3, 0x29, 0xd7 } };
    1: 
15720: static const PRInt32 kIEnumVariantDisconnected = -1;
15720: 
43504: ////////////////////////////////////////////////////////////////////////////////
43504: // nsAccessibleWrap
43504: ////////////////////////////////////////////////////////////////////////////////
    1: 
    1: //-----------------------------------------------------
    1: // construction
    1: //-----------------------------------------------------
43504: nsAccessibleWrap::
43504:   nsAccessibleWrap(nsIContent *aContent, nsIWeakReference *aShell) :
43504:   nsAccessible(aContent, aShell), mEnumVARIANTPosition(0), mTypeInfo(NULL)
    1: {
    1: }
    1: 
    1: //-----------------------------------------------------
    1: // destruction
    1: //-----------------------------------------------------
    1: nsAccessibleWrap::~nsAccessibleWrap()
    1: {
36947:   if (mTypeInfo)
36947:     mTypeInfo->Release();
    1: }
    1: 
  966: NS_IMPL_ISUPPORTS_INHERITED0(nsAccessibleWrap, nsAccessible);
  966: 
    1: //-----------------------------------------------------
    1: // IUnknown interface methods - see iunknown.h for documentation
    1: //-----------------------------------------------------
    1: 
    1: // Microsoft COM QueryInterface
    1: STDMETHODIMP nsAccessibleWrap::QueryInterface(REFIID iid, void** ppv)
    1: {
11440: __try {
    1:   *ppv = NULL;
    1: 
    1:   if (IID_IUnknown == iid || IID_IDispatch == iid || IID_IAccessible == iid)
 3233:     *ppv = static_cast<IAccessible*>(this);
69747:   else if (IID_IEnumVARIANT == iid) {
    1:     long numChildren;
    1:     get_accChildCount(&numChildren);
    1:     if (numChildren > 0)  // Don't support this interface for leaf elements
 3233:       *ppv = static_cast<IEnumVARIANT*>(this);
    1:   } else if (IID_IServiceProvider == iid)
 3233:     *ppv = static_cast<IServiceProvider*>(this);
16515:   else if (IID_IAccessible2 == iid && !gIsIA2Disabled)
 3233:     *ppv = static_cast<IAccessible2*>(this);
 1507: 
 1507:   if (NULL == *ppv) {
 1509:     HRESULT hr = CAccessibleComponent::QueryInterface(iid, ppv);
 1509:     if (SUCCEEDED(hr))
 1509:       return hr;
 1509:   }
 1509: 
 1509:   if (NULL == *ppv) {
 1507:     HRESULT hr = CAccessibleHyperlink::QueryInterface(iid, ppv);
 1507:     if (SUCCEEDED(hr))
 1507:       return hr;
 1507:   }
    1: 
 1304:   if (NULL == *ppv) {
 1304:     HRESULT hr = CAccessibleValue::QueryInterface(iid, ppv);
 1304:     if (SUCCEEDED(hr))
 1304:       return hr;
 1304:   }
 1304: 
    1:   if (NULL == *ppv)
    1:     return nsAccessNodeWrap::QueryInterface(iid, ppv);
    1: 
 3233:   (reinterpret_cast<IUnknown*>(*ppv))->AddRef();
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: //-----------------------------------------------------
    1: // IAccessible methods
    1: //-----------------------------------------------------
    1: 
    1: 
    1: STDMETHODIMP nsAccessibleWrap::AccessibleObjectFromWindow(HWND hwnd,
    1:                                                           DWORD dwObjectID,
    1:                                                           REFIID riid,
    1:                                                           void **ppvObject)
    1: {
    1:   // open the dll dynamically
    1:   if (!gmAccLib)
18477:     gmAccLib =::LoadLibraryW(L"OLEACC.DLL");
    1: 
    1:   if (gmAccLib) {
    1:     if (!gmAccessibleObjectFromWindow)
    1:       gmAccessibleObjectFromWindow = (LPFNACCESSIBLEOBJECTFROMWINDOW)GetProcAddress(gmAccLib,"AccessibleObjectFromWindow");
    1: 
    1:     if (gmAccessibleObjectFromWindow)
    1:       return gmAccessibleObjectFromWindow(hwnd, dwObjectID, riid, ppvObject);
    1:   }
    1: 
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::NotifyWinEvent(DWORD event,
    1:                                               HWND hwnd,
    1:                                               LONG idObjectType,
    1:                                               LONG idObject)
    1: {
    1:   if (gmNotifyWinEvent)
    1:     return gmNotifyWinEvent(event, hwnd, idObjectType, idObject);
    1: 
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accParent( IDispatch __RPC_FAR *__RPC_FAR *ppdispParent)
    1: {
11440: __try {
    1:   *ppdispParent = NULL;
    1: 
54220:   if (IsDefunct())
54220:     return E_FAIL;
29121: 
54220:   nsRefPtr<nsDocAccessible> doc(do_QueryObject(this));
54220:   if (doc) {
54220:     // Return window system accessible object for root document and tab document
54220:     // accessibles.
54220:     if (!doc->ParentDocument() ||
64004:         nsWinUtils::IsWindowEmulationStarted() &&
54220:         nsWinUtils::IsTabDocument(doc->GetDocumentNode())) {
54220:       HWND hwnd = static_cast<HWND>(doc->GetNativeWindow());
54220:       if (hwnd && SUCCEEDED(AccessibleObjectFromWindow(hwnd, OBJID_WINDOW,
54220:                                                        IID_IAccessible,
    1:                                                        (void**)ppdispParent))) {
    1:         return S_OK;
    1:       }
    1:     }
54220:   }
    1: 
36989:   nsAccessible* xpParentAcc = GetParent();
62919:   if (!xpParentAcc) {
62919:     if (IsApplication())
62919:       return S_OK;
36989: 
62919:     NS_ERROR("No parent accessible. Should we really assert here?");
    1:     return E_UNEXPECTED;
62919:   }
36989: 
36989:   *ppdispParent = NativeAccessible(xpParentAcc);
    1: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accChildCount( long __RPC_FAR *pcountChildren)
    1: {
11440: __try {
    1:   *pcountChildren = 0;
20566:   if (nsAccUtils::MustPrune(this))
    1:     return NS_OK;
    1: 
64130:   *pcountChildren = GetChildCount();
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1: 
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accChild(
    1:       /* [in] */ VARIANT varChild,
    1:       /* [retval][out] */ IDispatch __RPC_FAR *__RPC_FAR *ppdispChild)
    1: {
11440: __try {
    1:   *ppdispChild = NULL;
52279:   if (IsDefunct())
    1:     return E_FAIL;
    1: 
52279:   // IAccessible::accChild is used to return this accessible or child accessible
52279:   // at the given index or to get an accessible by child ID in the case of
52279:   // document accessible (it's handled by overriden GetXPAccessibleFor method
52279:   // on the document accessible). The getting an accessible by child ID is used
52279:   // by AccessibleObjectFromEvent() called by AT when AT handles our MSAA event.
52279:   nsAccessible* child = GetXPAccessibleFor(varChild);
52279:   if (child)
52279:     *ppdispChild = NativeAccessible(child);
    1: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1: 
52279:   return (*ppdispChild)? S_OK: E_INVALIDARG;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accName(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ BSTR __RPC_FAR *pszName)
    1: {
11440: __try {
    1:   *pszName = NULL;
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
14656:   if (!xpAccessible)
14656:     return E_FAIL;
    1:   nsAutoString name;
14656:   nsresult rv = xpAccessible->GetName(name);
14656:   if (NS_FAILED(rv))
14656:     return GetHRESULT(rv);
14656:     
14656:   if (name.IsVoid()) {
14656:     // Valid return value for the name:
14656:     // The name was not provided, e.g. no alt attribute for an image.
14656:     // A screen reader may choose to invent its own accessible name, e.g. from
14656:     // an image src attribute.
14656:     // See nsHTMLImageAccessible::GetName()
14656:     return S_OK;
14656:   }
13128: 
13128:   *pszName = ::SysAllocStringLen(name.get(), name.Length());
13128:   if (!*pszName)
13128:     return E_OUTOFMEMORY;
13128: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1: 
    1:   return S_OK;
    1: }
    1: 
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accValue(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ BSTR __RPC_FAR *pszValue)
    1: {
11440: __try {
    1:   *pszValue = NULL;
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1:   if (xpAccessible) {
    1:     nsAutoString value;
13128:     if (NS_FAILED(xpAccessible->GetValue(value)))
13128:       return E_FAIL;
13128: 
15520:     // see bug 438784: Need to expose URL on doc's value attribute.
15520:     // For this, reverting part of fix for bug 425693 to make this MSAA method 
15520:     // behave IAccessible2-style.
15520:     if (value.IsEmpty())
15520:       return S_FALSE;
15520: 
13128:     *pszValue = ::SysAllocStringLen(value.get(), value.Length());
13128:     if (!*pszValue)
13128:       return E_OUTOFMEMORY;
    1:   }
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
  144: STDMETHODIMP
  144: nsAccessibleWrap::get_accDescription(VARIANT varChild,
  144:                                      BSTR __RPC_FAR *pszDescription)
    1: {
11440: __try {
  144:   *pszDescription = NULL;
11440: 
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
69342:   if (!xpAccessible || xpAccessible->IsDefunct())
  144:     return E_FAIL;
    1: 
  144:   nsAutoString description;
69342:   xpAccessible->Description(description);
    1: 
13128:   *pszDescription = ::SysAllocStringLen(description.get(),
13128:                                         description.Length());
13128:   return *pszDescription ? S_OK : E_OUTOFMEMORY;
13128: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accRole(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ VARIANT __RPC_FAR *pvarRole)
    1: {
11440: __try {
    1:   VariantInit(pvarRole);
    1: 
53824:   if (IsDefunct())
53824:     return E_FAIL;
53824: 
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1:   if (!xpAccessible)
    1:     return E_FAIL;
    1: 
    1: #ifdef DEBUG_A11Y
20566:   NS_ASSERTION(nsAccUtils::IsTextInterfaceSupportCorrect(xpAccessible),
20566:                "Does not support nsIAccessibleText when it should");
    1: #endif
    1: 
52053:   PRUint32 xpRole = xpAccessible->Role();
52053:   PRUint32 msaaRole = gWindowsRoleMap[xpRole].msaaRole;
    1:   NS_ASSERTION(gWindowsRoleMap[nsIAccessibleRole::ROLE_LAST_ENTRY].msaaRole == ROLE_WINDOWS_LAST_ENTRY,
    1:                "MSAA role map skewed");
    1: 
 3122:   // Special case, if there is a ROLE_ROW inside of a ROLE_TREE_TABLE, then call the MSAA role
 3122:   // a ROLE_OUTLINEITEM for consistency and compatibility.
 3122:   // We need this because ARIA has a role of "row" for both grid and treegrid
 3122:   if (xpRole == nsIAccessibleRole::ROLE_ROW) {
52089:     nsAccessible* xpParent = GetParent();
52089:     if (xpParent && xpParent->Role() == nsIAccessibleRole::ROLE_TREE_TABLE)
 3122:       msaaRole = ROLE_SYSTEM_OUTLINEITEM;
 3122:   }
 3122:   
    1:   // -- Try enumerated role
    1:   if (msaaRole != USE_ROLE_STRING) {
    1:     pvarRole->vt = VT_I4;
    1:     pvarRole->lVal = msaaRole;  // Normal enumerated role
    1:     return S_OK;
    1:   }
    1: 
    1:   // -- Try BSTR role
    1:   // Could not map to known enumerated MSAA role like ROLE_BUTTON
    1:   // Use BSTR role to expose role attribute or tag name + namespace
43504:   nsIContent *content = xpAccessible->GetContent();
    1:   if (!content)
    1:     return E_FAIL;
    1: 
41645:   if (content->IsElement()) {
    1:     nsAutoString roleString;
 8937:     if (msaaRole != ROLE_SYSTEM_CLIENT &&
 8937:         !content->GetAttr(kNameSpaceID_None, nsAccessibilityAtoms::role, roleString)) {
30600:       nsIDocument * document = content->GetCurrentDoc();
30600:       if (!document)
30600:         return E_FAIL;
30600: 
    1:       nsINodeInfo *nodeInfo = content->NodeInfo();
    1:       nodeInfo->GetName(roleString);
30600: 
30600:       // Only append name space if different from that of current document.
30600:       if (!nodeInfo->NamespaceEquals(document->GetDefaultNamespaceID())) {
    1:         nsAutoString nameSpaceURI;
    1:         nodeInfo->GetNamespaceURI(nameSpaceURI);
    1:         roleString += NS_LITERAL_STRING(", ") + nameSpaceURI;
    1:       }
    1:     }
30600: 
    1:     if (!roleString.IsEmpty()) {
    1:       pvarRole->vt = VT_BSTR;
    1:       pvarRole->bstrVal = ::SysAllocString(roleString.get());
    1:       return S_OK;
    1:     }
    1:   }
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accState(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ VARIANT __RPC_FAR *pvarState)
    1: {
11440: __try {
    1:   VariantInit(pvarState);
    1:   pvarState->vt = VT_I4;
    1:   pvarState->lVal = 0;
    1: 
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1:   if (!xpAccessible)
    1:     return E_FAIL;
    1: 
67790:   // MSAA only has 31 states and the lowest 31 bits of our state bit mask
67790:   // are the same states as MSAA.
67790:   // Note: we map the following Gecko states to different MSAA states:
67790:   //   REQUIRED -> ALERT_LOW
67790:   //   ALERT -> ALERT_MEDIUM
67790:   //   INVALID -> ALERT_HIGH
67790:   //   CHECKABLE -> MARQUEED
    1: 
67790:   PRUint32 msaaState = 0;
67790:   nsAccUtils::To32States(xpAccessible->State(), &msaaState, nsnull);
67790:   pvarState->lVal = msaaState;
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accHelp(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ BSTR __RPC_FAR *pszHelp)
    1: {
37110: __try {
    1:   *pszHelp = NULL;
    1:   return S_FALSE;
37110: 
37110: } __except(FilterA11yExceptions(::GetExceptionCode(),
37110:                                 GetExceptionInformation())) { }
37110:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accHelpTopic(
    1:       /* [out] */ BSTR __RPC_FAR *pszHelpFile,
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ long __RPC_FAR *pidTopic)
    1: {
37110: __try {
    1:   *pszHelpFile = NULL;
    1:   *pidTopic = 0;
37110:   return S_FALSE;
37110: 
37110: } __except(FilterA11yExceptions(::GetExceptionCode(),
37110:                                 GetExceptionInformation())) { }
37110:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accKeyboardShortcut(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ BSTR __RPC_FAR *pszKeyboardShortcut)
    1: {
11440: __try {
72712:   if (!pszKeyboardShortcut)
72712:     return E_INVALIDARG;
72712: 
    1:   *pszKeyboardShortcut = NULL;
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
72712:   if (!xpAccessible || xpAccessible->IsDefunct())
72712:     return E_FAIL;
72712: 
    1:   nsAutoString shortcut;
    1:   nsresult rv = xpAccessible->GetKeyboardShortcut(shortcut);
    1:   if (NS_FAILED(rv))
72712:     return GetHRESULT(rv);
13128: 
13128:   *pszKeyboardShortcut = ::SysAllocStringLen(shortcut.get(),
13128:                                              shortcut.Length());
13128:   return *pszKeyboardShortcut ? S_OK : E_OUTOFMEMORY;
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accFocus(
    1:       /* [retval][out] */ VARIANT __RPC_FAR *pvarChild)
    1: {
    1:   // VT_EMPTY:    None. This object does not have the keyboard focus itself
    1:   //              and does not contain a child that has the keyboard focus.
    1:   // VT_I4:       lVal is CHILDID_SELF. The object itself has the keyboard focus.
    1:   // VT_I4:       lVal contains the child ID of the child element with the keyboard focus.
    1:   // VT_DISPATCH: pdispVal member is the address of the IDispatch interface
    1:   //              for the child object with the keyboard focus.
11440: __try {
43504:   if (IsDefunct())
43504:     return E_FAIL;
    1: 
    1:   VariantInit(pvarChild);
    1: 
    1:   // Return the current IAccessible child that has focus
    1:   nsCOMPtr<nsIAccessible> focusedAccessible;
    1:   GetFocusedChild(getter_AddRefs(focusedAccessible));
    1:   if (focusedAccessible == this) {
    1:     pvarChild->vt = VT_I4;
    1:     pvarChild->lVal = CHILDID_SELF;
    1:   }
    1:   else if (focusedAccessible) {
    1:     pvarChild->vt = VT_DISPATCH;
    1:     pvarChild->pdispVal = NativeAccessible(focusedAccessible);
    1:   }
    1:   else {
    1:     pvarChild->vt = VT_EMPTY;   // No focus or focus is not a child
    1:   }
    1: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: // This helper class implements IEnumVARIANT for a nsIArray containing nsIAccessible objects.
    1: 
    1: class AccessibleEnumerator : public IEnumVARIANT
    1: {
    1: public:
    1:   AccessibleEnumerator(nsIArray* aArray) : mArray(aArray), mCurIndex(0) { }
    1:   AccessibleEnumerator(const AccessibleEnumerator& toCopy) :
    1:     mArray(toCopy.mArray), mCurIndex(toCopy.mCurIndex) { }
    1:   ~AccessibleEnumerator() { }
    1: 
    1:   // IUnknown
    1:   STDMETHODIMP QueryInterface(REFIID iid, void ** ppvObject);
    1:   STDMETHODIMP_(ULONG) AddRef(void);
    1:   STDMETHODIMP_(ULONG) Release(void);
    1: 
    1:   // IEnumVARIANT
    1:   STDMETHODIMP Next(unsigned long celt, VARIANT FAR* rgvar, unsigned long FAR* pceltFetched);
    1:   STDMETHODIMP Skip(unsigned long celt);
    1:   STDMETHODIMP Reset()
    1:   {
    1:     mCurIndex = 0;
    1:     return S_OK;
    1:   }
    1:   STDMETHODIMP Clone(IEnumVARIANT FAR* FAR* ppenum);
    1: 
    1: private:
    1:   nsCOMPtr<nsIArray> mArray;
    1:   PRUint32 mCurIndex;
    1:   nsAutoRefCnt mRefCnt;
    1: };
    1: 
    1: HRESULT
    1: AccessibleEnumerator::QueryInterface(REFIID iid, void ** ppvObject)
    1: {
11440: __try {
    1:   if (iid == IID_IEnumVARIANT) {
    1:     *ppvObject = static_cast<IEnumVARIANT*>(this);
    1:     AddRef();
    1:     return S_OK;
    1:   }
    1:   if (iid == IID_IUnknown) {
    1:     *ppvObject = static_cast<IUnknown*>(this);
    1:     AddRef();
    1:     return S_OK;
    1:   }
    1: 
    1:   *ppvObject = NULL;
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_NOINTERFACE;
    1: }
    1: 
    1: STDMETHODIMP_(ULONG)
    1: AccessibleEnumerator::AddRef(void)
    1: {
    1:   return ++mRefCnt;
    1: }
    1: 
    1: STDMETHODIMP_(ULONG)
    1: AccessibleEnumerator::Release(void)
    1: {
    1:   ULONG r = --mRefCnt;
    1:   if (r == 0)
    1:     delete this;
    1:   return r;
    1: }
    1: 
    1: STDMETHODIMP
    1: AccessibleEnumerator::Next(unsigned long celt, VARIANT FAR* rgvar, unsigned long FAR* pceltFetched)
    1: {
11440: __try {
    1:   PRUint32 length = 0;
    1:   mArray->GetLength(&length);
    1: 
    1:   HRESULT hr = S_OK;
    1: 
    1:   // Can't get more elements than there are...
    1:   if (celt > length - mCurIndex) {
    1:     hr = S_FALSE;
    1:     celt = length - mCurIndex;
    1:   }
    1: 
    1:   for (PRUint32 i = 0; i < celt; ++i, ++mCurIndex) {
    1:     // Copy the elements of the array into rgvar
    1:     nsCOMPtr<nsIAccessible> accel(do_QueryElementAt(mArray, mCurIndex));
    1:     NS_ASSERTION(accel, "Invalid pointer in mArray");
    1: 
    1:     if (accel) {
    1:       rgvar[i].vt = VT_DISPATCH;
    1:       rgvar[i].pdispVal = nsAccessibleWrap::NativeAccessible(accel);
    1:     }
    1:   }
    1: 
    1:   if (pceltFetched)
    1:     *pceltFetched = celt;
    1: 
    1:   return hr;
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
11440: 
11440:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP
    1: AccessibleEnumerator::Clone(IEnumVARIANT FAR* FAR* ppenum)
    1: {
11440: __try {
    1:   *ppenum = new AccessibleEnumerator(*this);
    1:   if (!*ppenum)
    1:     return E_OUTOFMEMORY;
    1:   NS_ADDREF(*ppenum);
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP
    1: AccessibleEnumerator::Skip(unsigned long celt)
    1: {
11440: __try {
    1:   PRUint32 length = 0;
    1:   mArray->GetLength(&length);
    1:   // Check if we can skip the requested number of elements
    1:   if (celt > length - mCurIndex) {
    1:     mCurIndex = length;
    1:     return S_FALSE;
    1:   }
    1:   mCurIndex += celt;
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: /**
    1:   * This method is called when a client wants to know which children of a node
    1:   *  are selected. Note that this method can only find selected children for
51865:   *  nsIAccessible object which implement SelectAccessible.
    1:   *
    1:   * The VARIANT return value arguement is expected to either contain a single IAccessible
    1:   *  or an IEnumVARIANT of IAccessibles. We return the IEnumVARIANT regardless of the number
    1:   *  of children selected, unless there are none selected in which case we return an empty
    1:   *  VARIANT.
    1:   *
    1:   * We get the selected options from the select's accessible object and wrap
    1:   *  those in an AccessibleEnumerator which we then put in the return VARIANT.
    1:   *
    1:   * returns a VT_EMPTY VARIANT if:
    1:   *  - there are no selected children for this object
    1:   *  - the object is not the type that can have children selected
    1:   */
    1: STDMETHODIMP nsAccessibleWrap::get_accSelection(VARIANT __RPC_FAR *pvarChildren)
    1: {
11440: __try {
    1:   VariantInit(pvarChildren);
    1:   pvarChildren->vt = VT_EMPTY;
    1: 
51865:   if (IsSelect()) {
51865:     nsCOMPtr<nsIArray> selectedItems = SelectedItems();
51865:     if (selectedItems) {
    1:       // 1) Create and initialize the enumeration
51865:       nsRefPtr<AccessibleEnumerator> pEnum =
51865:         new AccessibleEnumerator(selectedItems);
    1: 
    1:       // 2) Put the enumerator in the VARIANT
    1:       if (!pEnum)
    1:         return E_OUTOFMEMORY;
    1:       pvarChildren->vt = VT_UNKNOWN;    // this must be VT_UNKNOWN for an IEnumVARIANT
    1:       NS_ADDREF(pvarChildren->punkVal = pEnum);
    1:     }
    1:   }
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::get_accDefaultAction(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [retval][out] */ BSTR __RPC_FAR *pszDefaultAction)
    1: {
11440: __try {
    1:   *pszDefaultAction = NULL;
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1:   if (xpAccessible) {
    1:     nsAutoString defaultAction;
    1:     if (NS_FAILED(xpAccessible->GetActionName(0, defaultAction)))
13128:       return E_FAIL;
13128: 
13128:     *pszDefaultAction = ::SysAllocStringLen(defaultAction.get(),
13128:                                             defaultAction.Length());
13128:     return *pszDefaultAction ? S_OK : E_OUTOFMEMORY;
    1:   }
    1: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::accSelect(
    1:       /* [in] */ long flagsSelect,
    1:       /* [optional][in] */ VARIANT varChild)
    1: {
11440: __try {
    1:   // currently only handle focus and selection
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
 2136:   NS_ENSURE_TRUE(xpAccessible, E_FAIL);
    1: 
    1:   if (flagsSelect & (SELFLAG_TAKEFOCUS|SELFLAG_TAKESELECTION|SELFLAG_REMOVESELECTION))
    1:   {
    1:     if (flagsSelect & SELFLAG_TAKEFOCUS)
    1:       xpAccessible->TakeFocus();
    1: 
    1:     if (flagsSelect & SELFLAG_TAKESELECTION)
    1:       xpAccessible->TakeSelection();
    1: 
    1:     if (flagsSelect & SELFLAG_ADDSELECTION)
    1:       xpAccessible->SetSelected(PR_TRUE);
    1: 
    1:     if (flagsSelect & SELFLAG_REMOVESELECTION)
    1:       xpAccessible->SetSelected(PR_FALSE);
    1: 
    1:     if (flagsSelect & SELFLAG_EXTENDSELECTION)
    1:       xpAccessible->ExtendSelection();
    1: 
    1:     return S_OK;
    1:   }
    1: 
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::accLocation(
    1:       /* [out] */ long __RPC_FAR *pxLeft,
    1:       /* [out] */ long __RPC_FAR *pyTop,
    1:       /* [out] */ long __RPC_FAR *pcxWidth,
    1:       /* [out] */ long __RPC_FAR *pcyHeight,
    1:       /* [optional][in] */ VARIANT varChild)
    1: {
11440: __try {
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1: 
    1:   if (xpAccessible) {
    1:     PRInt32 x, y, width, height;
    1:     if (NS_FAILED(xpAccessible->GetBounds(&x, &y, &width, &height)))
    1:       return E_FAIL;
    1: 
    1:     *pxLeft = x;
    1:     *pyTop = y;
    1:     *pcxWidth = width;
    1:     *pcyHeight = height;
    1:     return S_OK;
    1:   }
11440: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1: 
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::accNavigate(
    1:       /* [in] */ long navDir,
    1:       /* [optional][in] */ VARIANT varStart,
    1:       /* [retval][out] */ VARIANT __RPC_FAR *pvarEndUpAt)
    1: {
11440: __try {
42375:   nsAccessible *xpAccessibleStart = GetXPAccessibleFor(varStart);
    1:   if (!xpAccessibleStart)
    1:     return E_FAIL;
    1: 
    1:   VariantInit(pvarEndUpAt);
42375: 
42375:   nsCOMPtr<nsIAccessible> xpAccessibleResult;
    1:   PRUint32 xpRelation = 0;
    1: 
    1:   switch(navDir) {
    1:     case NAVDIR_DOWN:
    1:       xpAccessibleStart->GetAccessibleBelow(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_FIRSTCHILD:
20566:       if (!nsAccUtils::MustPrune(xpAccessibleStart))
    1:         xpAccessibleStart->GetFirstChild(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_LASTCHILD:
20566:       if (!nsAccUtils::MustPrune(xpAccessibleStart))
    1:         xpAccessibleStart->GetLastChild(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_LEFT:
    1:       xpAccessibleStart->GetAccessibleToLeft(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_NEXT:
    1:       xpAccessibleStart->GetNextSibling(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_PREVIOUS:
    1:       xpAccessibleStart->GetPreviousSibling(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_RIGHT:
    1:       xpAccessibleStart->GetAccessibleToRight(getter_AddRefs(xpAccessibleResult));
    1:       break;
    1:     case NAVDIR_UP:
    1:       xpAccessibleStart->GetAccessibleAbove(getter_AddRefs(xpAccessibleResult));
    1:       break;
 1628: 
    1:     // MSAA relationship extensions to accNavigate
 1628:     case NAVRELATION_CONTROLLED_BY:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_CONTROLLED_BY;
 1628:       break;
 1628:     case NAVRELATION_CONTROLLER_FOR:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_CONTROLLER_FOR;
 1628:       break;
 1628:     case NAVRELATION_LABEL_FOR:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_LABEL_FOR;
 1628:       break;
 1628:     case NAVRELATION_LABELLED_BY:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_LABELLED_BY;
 1628:       break;
 1628:     case NAVRELATION_MEMBER_OF:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_MEMBER_OF;
 1628:       break;
 1628:     case NAVRELATION_NODE_CHILD_OF:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_NODE_CHILD_OF;
 1628:       break;
 1628:     case NAVRELATION_FLOWS_TO:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_FLOWS_TO;
 1628:       break;
 1628:     case NAVRELATION_FLOWS_FROM:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_FLOWS_FROM;
 1628:       break;
 1628:     case NAVRELATION_SUBWINDOW_OF:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_SUBWINDOW_OF;
 1628:       break;
 1628:     case NAVRELATION_EMBEDS:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_EMBEDS;
 1628:       break;
 1628:     case NAVRELATION_EMBEDDED_BY:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_EMBEDDED_BY;
 1628:       break;
 1628:     case NAVRELATION_POPUP_FOR:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_POPUP_FOR;
 1628:       break;
 1628:     case NAVRELATION_PARENT_WINDOW_OF:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_PARENT_WINDOW_OF;
 1628:       break;
 1628:     case NAVRELATION_DEFAULT_BUTTON:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_DEFAULT_BUTTON;
 1628:       break;
 1628:     case NAVRELATION_DESCRIBED_BY:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_DESCRIBED_BY;
 1628:       break;
 1628:     case NAVRELATION_DESCRIPTION_FOR:
 1628:       xpRelation = nsIAccessibleRelation::RELATION_DESCRIPTION_FOR;
 1628:       break;
    1:   }
    1: 
    1:   pvarEndUpAt->vt = VT_EMPTY;
    1: 
24822:   if (xpRelation)
24822:     xpAccessibleResult = nsRelUtils::GetRelatedAccessible(this, xpRelation);
    1: 
    1:   if (xpAccessibleResult) {
    1:     pvarEndUpAt->pdispVal = NativeAccessible(xpAccessibleResult);
    1:     pvarEndUpAt->vt = VT_DISPATCH;
    1:     return NS_OK;
    1:   }
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::accHitTest(
    1:       /* [in] */ long xLeft,
    1:       /* [in] */ long yTop,
    1:       /* [retval][out] */ VARIANT __RPC_FAR *pvarChild)
    1: {
11440: __try {
    1:   VariantInit(pvarChild);
72477:   if (IsDefunct())
72477:     return E_FAIL;
    1: 
72477:   nsAccessible* accessible = ChildAtPoint(xLeft, yTop, eDirectChild);
    1: 
    1:   // if we got a child
72477:   if (accessible) {
    1:     // if the child is us
72477:     if (accessible == this) {
    1:       pvarChild->vt = VT_I4;
    1:       pvarChild->lVal = CHILDID_SELF;
    1:     } else { // its not create an Accessible for it.
    1:       pvarChild->vt = VT_DISPATCH;
72477:       pvarChild->pdispVal = NativeAccessible(accessible);
    1:     }
    1:   } else {
    1:     // no child at that point
    1:     pvarChild->vt = VT_EMPTY;
 6089:     return S_FALSE;
    1:   }
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1: 
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::accDoDefaultAction(
    1:       /* [optional][in] */ VARIANT varChild)
    1: {
11440: __try {
42375:   nsAccessible *xpAccessible = GetXPAccessibleFor(varChild);
    1:   if (!xpAccessible || FAILED(xpAccessible->DoAction(0))) {
    1:     return E_FAIL;
    1:   }
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::put_accName(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [in] */ BSTR szName)
    1: {
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP nsAccessibleWrap::put_accValue(
    1:       /* [optional][in] */ VARIANT varChild,
    1:       /* [in] */ BSTR szValue)
    1: {
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: #include "mshtml.h"
    1: 
15720: ////////////////////////////////////////////////////////////////////////////////
15720: // nsAccessibleWrap. IEnumVariant
15720: 
    1: STDMETHODIMP
15720: nsAccessibleWrap::Next(ULONG aNumElementsRequested, VARIANT FAR* aPVar,
15720:                        ULONG FAR* aNumElementsFetched)
    1: {
    1:   // Children already cached via QI to IEnumVARIANT
11440: __try {
    1:   *aNumElementsFetched = 0;
    1: 
15720:   if (aNumElementsRequested <= 0 || !aPVar)
15720:     return E_INVALIDARG;
    1: 
15720:   if (mEnumVARIANTPosition == kIEnumVariantDisconnected)
15720:     return CO_E_OBJNOTCONNECTED;
15720: 
35523:   PRUint32 numElementsFetched = 0;
35523:   for (; numElementsFetched < aNumElementsRequested;
35523:        numElementsFetched++, mEnumVARIANTPosition++) {
15720: 
36989:     nsAccessible* accessible = GetChildAt(mEnumVARIANTPosition);
35523:     if (!accessible)
15720:       break;
15720: 
35523:     VariantInit(&aPVar[numElementsFetched]);
35523: 
35523:     aPVar[numElementsFetched].pdispVal = NativeAccessible(accessible);
35523:     aPVar[numElementsFetched].vt = VT_DISPATCH;
    1:   }
    1: 
35523:   (*aNumElementsFetched) = numElementsFetched;
35523: 
35523:   return numElementsFetched < aNumElementsRequested ? S_FALSE : S_OK;
    1: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
15720:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
    1: nsAccessibleWrap::Skip(ULONG aNumElements)
    1: {
11440: __try {
15720:   if (mEnumVARIANTPosition == kIEnumVariantDisconnected)
15720:     return CO_E_OBJNOTCONNECTED;
15720: 
15720:   mEnumVARIANTPosition += aNumElements;
    1: 
64130:   PRInt32 numChildren = GetChildCount();
    1:   if (mEnumVARIANTPosition > numChildren)
    1:   {
    1:     mEnumVARIANTPosition = numChildren;
    1:     return S_FALSE;
    1:   }
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return NOERROR;
    1: }
    1: 
    1: STDMETHODIMP
    1: nsAccessibleWrap::Reset(void)
    1: {
    1:   mEnumVARIANTPosition = 0;
    1:   return NOERROR;
    1: }
    1: 
15720: STDMETHODIMP
15720: nsAccessibleWrap::Clone(IEnumVARIANT FAR* FAR* ppenum)
15720: {
15720: __try {
15720:   *ppenum = nsnull;
    1:   
15720:   nsCOMPtr<nsIArray> childArray;
15720:   nsresult rv = GetChildren(getter_AddRefs(childArray));
15720: 
15720:   *ppenum = new AccessibleEnumerator(childArray);
15720:   if (!*ppenum)
15720:     return E_OUTOFMEMORY;
15720:   NS_ADDREF(*ppenum);
15720: 
15720: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
15720:   return NOERROR;
15720: }
15720: 
15720: ////////////////////////////////////////////////////////////////////////////////
15720: // nsAccessibleWrap. IAccessible2
    1: 
    1: STDMETHODIMP
 1828: nsAccessibleWrap::get_nRelations(long *aNRelations)
    1: {
11440: __try {
 1828:   PRUint32 count = 0;
 1828:   nsresult rv = GetRelationsCount(&count);
 1828:   *aNRelations = count;
 1828: 
13730:   return GetHRESULT(rv);
13730: 
13730: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
11440:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
 1828: nsAccessibleWrap::get_relation(long aRelationIndex,
 1828:                                IAccessibleRelation **aRelation)
    1: {
11440: __try {
13730:   *aRelation = NULL;
13730: 
 1828:   nsCOMPtr<nsIAccessibleRelation> relation;
 1828:   nsresult rv = GetRelation(aRelationIndex, getter_AddRefs(relation));
 1828:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
 1828: 
 1828:   nsCOMPtr<nsIWinAccessNode> winAccessNode(do_QueryInterface(relation));
 1828:   if (!winAccessNode)
 1828:     return E_FAIL;
 1828: 
 1828:   void *instancePtr = NULL;
 1828:   rv =  winAccessNode->QueryNativeInterface(IID_IAccessibleRelation,
 1828:                                             &instancePtr);
 1828:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
 1828: 
 3233:   *aRelation = static_cast<IAccessibleRelation*>(instancePtr);
13730:   return S_OK;
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
 1828: nsAccessibleWrap::get_relations(long aMaxRelations,
 1828:                                 IAccessibleRelation **aRelation,
 1828:                                 long *aNRelations)
    1: {
11440: __try {
13730:   *aRelation = NULL;
 1828:   *aNRelations = 0;
 1828: 
 1828:   nsCOMPtr<nsIArray> relations;
 1828:   nsresult rv = GetRelations(getter_AddRefs(relations));
 1828:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
 1828: 
 1828:   PRUint32 length = 0;
 1828:   rv = relations->GetLength(&length);
 1828:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
13730: 
13730:   if (length == 0)
13730:     return S_FALSE;
 1828: 
 1828:   PRUint32 count = length < (PRUint32)aMaxRelations ? length : aMaxRelations;
 1828: 
 1828:   PRUint32 index = 0;
 1828:   for (; index < count; index++) {
13730:     nsCOMPtr<nsIWinAccessNode> winAccessNode =
13730:       do_QueryElementAt(relations, index, &rv);
13730:     if (NS_FAILED(rv))
 1828:       break;
 1828: 
 1828:     void *instancePtr = NULL;
 1828:     nsresult rv =  winAccessNode->QueryNativeInterface(IID_IAccessibleRelation,
 1828:                                                        &instancePtr);
 1828:     if (NS_FAILED(rv))
 1828:       break;
 1828: 
 3233:     aRelation[index] = static_cast<IAccessibleRelation*>(instancePtr);
 1828:   }
 1828: 
 1828:   if (NS_FAILED(rv)) {
 1828:     for (PRUint32 index2 = 0; index2 < index; index2++) {
 1828:       aRelation[index2]->Release();
 1828:       aRelation[index2] = NULL;
 1828:     }
13730:     return GetHRESULT(rv);
13730:   }
13730: 
13730:   *aNRelations = count;
13730:   return S_OK;
13730: 
13730: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
 1828:   return E_FAIL;
 1828: }
 1828: 
    1: STDMETHODIMP
13730: nsAccessibleWrap::role(long *aRole)
    1: {
11440: __try {
13730:   *aRole = 0;
13730: 
53824:   if (IsDefunct())
53824:     return E_FAIL;
53824: 
    1:   NS_ASSERTION(gWindowsRoleMap[nsIAccessibleRole::ROLE_LAST_ENTRY].ia2Role == ROLE_WINDOWS_LAST_ENTRY,
    1:                "MSAA role map skewed");
    1: 
52053:   PRUint32 xpRole = Role();
13730:   *aRole = gWindowsRoleMap[xpRole].ia2Role;
31673: 
31673:   // Special case, if there is a ROLE_ROW inside of a ROLE_TREE_TABLE, then call
31673:   // the IA2 role a ROLE_OUTLINEITEM.
31673:   if (xpRole == nsIAccessibleRole::ROLE_ROW) {
52089:     nsAccessible* xpParent = GetParent();
52089:     if (xpParent && xpParent->Role() == nsIAccessibleRole::ROLE_TREE_TABLE)
31673:       *aRole = ROLE_SYSTEM_OUTLINEITEM;
31673:   }
31673: 
13730:   return S_OK;
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
  497: nsAccessibleWrap::scrollTo(enum IA2ScrollType aScrollType)
    1: {
11440: __try {
13730:   nsresult rv = ScrollTo(aScrollType);
13730:   return GetHRESULT(rv);
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
 6286: nsAccessibleWrap::scrollToPoint(enum IA2CoordinateType aCoordType,
 6286:                                 long aX, long aY)
  404: {
11440: __try {
 6286:   PRUint32 geckoCoordType = (aCoordType == IA2_COORDTYPE_SCREEN_RELATIVE) ?
 6286:     nsIAccessibleCoordinateType::COORDTYPE_SCREEN_RELATIVE :
 6286:     nsIAccessibleCoordinateType::COORDTYPE_PARENT_RELATIVE;
 6286: 
13730:   nsresult rv = ScrollToPoint(geckoCoordType, aX, aY);
13730:   return GetHRESULT(rv);
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
  404: }
  404: 
  404: STDMETHODIMP
  144: nsAccessibleWrap::get_groupPosition(long *aGroupLevel,
  144:                                     long *aSimilarItemsInGroup,
  144:                                     long *aPositionInGroup)
    1: {
11440: __try {
  144:   PRInt32 groupLevel = 0;
  144:   PRInt32 similarItemsInGroup = 0;
  144:   PRInt32 positionInGroup = 0;
36879: 
  144:   nsresult rv = GroupPosition(&groupLevel, &similarItemsInGroup,
  144:                               &positionInGroup);
36879:   if (NS_FAILED(rv))
36879:     return GetHRESULT(rv);
36879: 
36879:   // Group information for accessibles having level only (like html headings
36879:   // elements) isn't exposed by this method. AT should look for 'level' object
36879:   // attribute.
36879:   if (!similarItemsInGroup && !positionInGroup)
36879:     return S_FALSE;
  144: 
  144:   *aGroupLevel = groupLevel;
  144:   *aSimilarItemsInGroup = similarItemsInGroup;
  144:   *aPositionInGroup = positionInGroup;
13730: 
  144:   return S_OK;
  144: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
  144:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
    1: nsAccessibleWrap::get_states(AccessibleStates *aStates)
    1: {
11440: __try {
    1:   *aStates = 0;
    1: 
    1:   // XXX: bug 344674 should come with better approach that we have here.
    1: 
67790:   PRUint64 state = State();
    1: 
67790:   if (state & states::INVALID)
    1:     *aStates |= IA2_STATE_INVALID_ENTRY;
67790:   if (state & states::REQUIRED)
    1:     *aStates |= IA2_STATE_REQUIRED;
    1: 
    1:   // The following IA2 states are not supported by Gecko
    1:   // IA2_STATE_ARMED
 4469:   // IA2_STATE_MANAGES_DESCENDANTS
    1:   // IA2_STATE_ICONIFIED
 4469:   // IA2_STATE_INVALID // This is not a state, it is the absence of a state
    1: 
67790:   if (state & states::ACTIVE)
    1:     *aStates |= IA2_STATE_ACTIVE;
67790:   if (state & states::DEFUNCT)
    1:     *aStates |= IA2_STATE_DEFUNCT;
67790:   if (state & states::EDITABLE)
    1:     *aStates |= IA2_STATE_EDITABLE;
67790:   if (state & states::HORIZONTAL)
    1:     *aStates |= IA2_STATE_HORIZONTAL;
67790:   if (state & states::MODAL)
    1:     *aStates |= IA2_STATE_MODAL;
67790:   if (state & states::MULTI_LINE)
    1:     *aStates |= IA2_STATE_MULTI_LINE;
67790:   if (state & states::OPAQUE1)
    1:     *aStates |= IA2_STATE_OPAQUE;
67790:   if (state & states::SELECTABLE_TEXT)
    1:     *aStates |= IA2_STATE_SELECTABLE_TEXT;
67790:   if (state & states::SINGLE_LINE)
    1:     *aStates |= IA2_STATE_SINGLE_LINE;
67790:   if (state & states::STALE)
    1:     *aStates |= IA2_STATE_STALE;
67790:   if (state & states::SUPPORTS_AUTOCOMPLETION)
    1:     *aStates |= IA2_STATE_SUPPORTS_AUTOCOMPLETION;
67790:   if (state & states::TRANSIENT)
    1:     *aStates |= IA2_STATE_TRANSIENT;
67790:   if (state & states::VERTICAL)
    1:     *aStates |= IA2_STATE_VERTICAL;
    1: 
13730:   return S_OK;
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
13128: nsAccessibleWrap::get_extendedRole(BSTR *aExtendedRole)
    1: {
13128: __try {
13128:   *aExtendedRole = NULL;
13128: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128: 
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP
13128: nsAccessibleWrap::get_localizedExtendedRole(BSTR *aLocalizedExtendedRole)
    1: {
13128: __try {
13128:   *aLocalizedExtendedRole = NULL;
13128: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128: 
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP
13128: nsAccessibleWrap::get_nExtendedStates(long *aNExtendedStates)
    1: {
13128: __try {
13128:   *aNExtendedStates = 0;
13128: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128: 
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP
13128: nsAccessibleWrap::get_extendedStates(long aMaxExtendedStates,
13128:                                      BSTR **aExtendedStates,
13128:                                      long *aNExtendedStates)
    1: {
13128: __try {
13128:   *aExtendedStates = NULL;
13128:   *aNExtendedStates = 0;
13128: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128: 
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP
13128: nsAccessibleWrap::get_localizedExtendedStates(long aMaxLocalizedExtendedStates,
13128:                                               BSTR **aLocalizedExtendedStates,
13128:                                               long *aNLocalizedExtendedStates)
    1: {
13128: __try {
13128:   *aLocalizedExtendedStates = NULL;
13128:   *aNLocalizedExtendedStates = 0;
13128: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13128: 
    1:   return E_NOTIMPL;
    1: }
    1: 
    1: STDMETHODIMP
    1: nsAccessibleWrap::get_uniqueID(long *uniqueID)
    1: {
11440: __try {
56292:   *uniqueID = - reinterpret_cast<long>(UniqueID());
    1:   return S_OK;
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
13730: nsAccessibleWrap::get_windowHandle(HWND *aWindowHandle)
    1: {
11440: __try {
13730:   *aWindowHandle = 0;
13730: 
43504:   if (IsDefunct())
12286:     return E_FAIL;
13730: 
62920:   *aWindowHandle = GetHWNDFor(this);
13730:   return S_OK;
13730: 
13730: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
 8863:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
13730: nsAccessibleWrap::get_indexInParent(long *aIndexInParent)
    1: {
11440: __try {
72476:   if (!aIndexInParent)
72476:     return E_INVALIDARG;
72476: 
13730:   *aIndexInParent = -1;
72476:   if (IsDefunct())
72476:     return E_FAIL;
13730: 
72476:   *aIndexInParent = IndexInParent();
72476:   if (*aIndexInParent == -1)
13730:     return S_FALSE;
13730: 
    1:   return S_OK;
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
    1:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
 8526: nsAccessibleWrap::get_locale(IA2Locale *aLocale)
    1: {
11440: __try {
 8526:   // Language codes consist of a primary code and a possibly empty series of
 8526:   // subcodes: language-code = primary-code ( "-" subcode )*
 8526:   // Two-letter primary codes are reserved for [ISO639] language abbreviations.
 8526:   // Any two-letter subcode is understood to be a [ISO3166] country code.
 8526: 
 8526:   nsAutoString lang;
 8526:   nsresult rv = GetLanguage(lang);
 8526:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
 8526: 
 8526:   // If primary code consists from two letters then expose it as language.
 8526:   PRInt32 offset = lang.FindChar('-', 0);
 8526:   if (offset == -1) {
 8526:     if (lang.Length() == 2) {
 8526:       aLocale->language = ::SysAllocString(lang.get());
 8526:       return S_OK;
 8526:     }
 8526:   } else if (offset == 2) {
 8526:     aLocale->language = ::SysAllocStringLen(lang.get(), 2);
 8526: 
 8526:     // If the first subcode consists from two letters then expose it as
 8526:     // country.
 8526:     offset = lang.FindChar('-', 3);
 8526:     if (offset == -1) {
 8526:       if (lang.Length() == 5) {
 8526:         aLocale->country = ::SysAllocString(lang.get() + 3);
 8526:         return S_OK;
 8526:       }
 8526:     } else if (offset == 5) {
 8526:       aLocale->country = ::SysAllocStringLen(lang.get() + 3, 2);
 8526:     }
 8526:   }
 8526: 
 8526:   // Expose as a string if primary code or subcode cannot point to language or
 8526:   // country abbreviations or if there are more than one subcode.
 8526:   aLocale->variant = ::SysAllocString(lang.get());
13730:   return S_OK;
13730: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
    1: }
    1: 
    1: STDMETHODIMP
  665: nsAccessibleWrap::get_attributes(BSTR *aAttributes)
    1: {
  665:   // The format is name:value;name:value; with \ for escaping these
  665:   // characters ":;=,\".
11440: __try {
12838:   *aAttributes = NULL;
12838: 
  665:   nsCOMPtr<nsIPersistentProperties> attributes;
13730:   nsresult rv = GetAttributes(getter_AddRefs(attributes));
13730:   if (NS_FAILED(rv))
13730:     return GetHRESULT(rv);
  665: 
16001:   return ConvertToIA2Attributes(attributes, aAttributes);
12698: 
11440: } __except(nsAccessNodeWrap::FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
13730:   return E_FAIL;
    1: }
    1: 
36947: ////////////////////////////////////////////////////////////////////////////////
36947: // IDispatch
36947: 
    1: STDMETHODIMP
36947: nsAccessibleWrap::GetTypeInfoCount(UINT *pctinfo)
    1: {
36947:   *pctinfo = 1;
36947:   return S_OK;
    1: }
    1: 
36947: STDMETHODIMP
36947: nsAccessibleWrap::GetTypeInfo(UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)
    1: {
36947:   *ppTInfo = NULL;
36947: 
36947:   if (iTInfo != 0)
38326:     return DISP_E_BADINDEX;
36947: 
36947:   ITypeInfo * typeInfo = GetTI(lcid);
36947:   if (!typeInfo)
36947:     return E_FAIL;
36947: 
36947:   typeInfo->AddRef();
36947:   *ppTInfo = typeInfo;
36947: 
36947:   return S_OK;
    1: }
    1: 
    1: STDMETHODIMP
    1: nsAccessibleWrap::GetIDsOfNames(REFIID riid, LPOLESTR *rgszNames,
    1:                                 UINT cNames, LCID lcid, DISPID *rgDispId)
    1: {
36947:   ITypeInfo *typeInfo = GetTI(lcid);
36947:   if (!typeInfo)
36947:     return E_FAIL;
36947: 
36947:   HRESULT hr = DispGetIDsOfNames(typeInfo, rgszNames, cNames, rgDispId);
36947:   return hr;
    1: }
    1: 
36947: STDMETHODIMP
36947: nsAccessibleWrap::Invoke(DISPID dispIdMember, REFIID riid,
    1:                          LCID lcid, WORD wFlags, DISPPARAMS *pDispParams,
36947:                          VARIANT *pVarResult, EXCEPINFO *pExcepInfo,
36947:                          UINT *puArgErr)
    1: {
36947:   ITypeInfo *typeInfo = GetTI(lcid);
36947:   if (!typeInfo)
36947:     return E_FAIL;
36947: 
36947:   return typeInfo->Invoke(static_cast<IAccessible*>(this), dispIdMember,
36947:                           wFlags, pDispParams, pVarResult, pExcepInfo,
36947:                           puArgErr);
    1: }
    1: 
    1: 
36947: // nsIAccessible method
    1: NS_IMETHODIMP nsAccessibleWrap::GetNativeInterface(void **aOutAccessible)
    1: {
 3233:   *aOutAccessible = static_cast<IAccessible*>(this);
    1:   NS_ADDREF_THIS();
    1:   return NS_OK;
    1: }
    1: 
62920: ////////////////////////////////////////////////////////////////////////////////
29320: // nsAccessible
  563: 
29320: nsresult
51377: nsAccessibleWrap::HandleAccEvent(AccEvent* aEvent)
  563: {
37299:   nsresult rv = nsAccessible::HandleAccEvent(aEvent);
  563:   NS_ENSURE_SUCCESS(rv, rv);
  563: 
15375:   return FirePlatformEvent(aEvent);
15375: }
15375: 
62920: ////////////////////////////////////////////////////////////////////////////////
62920: // nsAccessibleWrap
62920: 
15375: nsresult
51377: nsAccessibleWrap::FirePlatformEvent(AccEvent* aEvent)
15375: {
37299:   PRUint32 eventType = aEvent->GetEventType();
  563: 
  563:   NS_ENSURE_TRUE(eventType > 0 &&
  563:                  eventType < nsIAccessibleEvent::EVENT_LAST_ENTRY,
  563:                  NS_ERROR_FAILURE);
  563: 
  563:   PRUint32 winLastEntry = gWinEventMap[nsIAccessibleEvent::EVENT_LAST_ENTRY];
  563:   NS_ASSERTION(winLastEntry == kEVENT_LAST_ENTRY,
  563:                "MSAA event map skewed");
  563: 
  563:   PRUint32 winEvent = gWinEventMap[eventType];
  563:   if (!winEvent)
  563:     return NS_OK;
  563: 
  563:   // Means we're not active.
  563:   NS_ENSURE_TRUE(mWeakShell, NS_ERROR_FAILURE);
  563: 
43537:   nsAccessible *accessible = aEvent->GetAccessible();
  563:   if (!accessible)
  563:     return NS_OK;
  563: 
 2395:   if (eventType == nsIAccessibleEvent::EVENT_TEXT_CARET_MOVED ||
 2395:       eventType == nsIAccessibleEvent::EVENT_FOCUS) {
 2395:     UpdateSystemCaret();
56292: 
56292:   } else if (eventType == nsIAccessibleEvent::EVENT_REORDER) {
56292:     // If the accessible children are changed then drop the IEnumVariant current
56292:     // position of the accessible.
56292:     UnattachIEnumVariant();
  563:   }
  563: 
 1250:   PRInt32 childID = GetChildIDFor(accessible); // get the id for the accessible
 1250:   if (!childID)
 1250:     return NS_OK; // Can't fire an event without a child ID
 1250: 
56292:   HWND hWnd = GetHWNDFor(accessible);
56292:   NS_ENSURE_TRUE(hWnd, NS_ERROR_FAILURE);
56292: 
56292:   nsAutoString tag;
56292:   nsCAutoString id;
56292:   nsIContent* cnt = accessible->GetContent();
56292:   if (cnt) {
56292:     cnt->Tag()->ToString(tag);
56292:     nsIAtom* aid = cnt->GetID();
56292:     if (aid)
56292:       aid->ToUTF8String(id);
 1250:   }
 1249: 
56292: #ifdef DEBUG_A11Y
56292:   printf("\n\nMSAA event: event: %d, target: %s@id='%s', childid: %d, hwnd: %d\n\n",
56292:          eventType, NS_ConvertUTF16toUTF8(tag).get(), id.get(),
56292:          childID, hWnd);
56292: #endif
  563: 
  563:   // Fire MSAA event for client area window.
 1249:   NotifyWinEvent(winEvent, hWnd, OBJID_CLIENT, childID);
  563:   return NS_OK;
  563: }
    1: 
    1: //------- Helper methods ---------
    1: 
56292: PRInt32 nsAccessibleWrap::GetChildIDFor(nsAccessible* aAccessible)
  563: {
  563:   // A child ID of the window is required, when we use NotifyWinEvent,
  563:   // so that the 3rd party application can call back and get the IAccessible
42263:   // the event occurred on.
  563: 
  563:   // Yes, this means we're only compatibible with 32 bit
  563:   // MSAA is only available for 32 bit windows, so it's okay
56292:   // XXX: bug 606080
56292:   return aAccessible ? - NS_PTR_TO_INT32(aAccessible->UniqueID()) : 0;
  563: }
  563: 
 2950: HWND
43539: nsAccessibleWrap::GetHWNDFor(nsAccessible *aAccessible)
 2950: {
62920:   if (aAccessible) {
62920:     // Popup lives in own windows, use its HWND until the popup window is
62920:     // hidden to make old JAWS versions work with collapsed comboboxes (see
62920:     // discussion in bug 379678).
62920:     nsIFrame* frame = aAccessible->GetFrame();
62920:     if (frame) {
62920:       nsIWidget* widget = frame->GetNearestWidget();
62920:       PRBool isVisible = PR_FALSE;
62920:       widget->IsVisible(isVisible);
62920:       if (isVisible) {
62920:         nsCOMPtr<nsIPresShell> shell(aAccessible->GetPresShell());
62920:         nsIViewManager* vm = shell->GetViewManager();
62920:         if (vm) {
62920:           nsCOMPtr<nsIWidget> rootWidget;
62920:           vm->GetRootWidget(getter_AddRefs(rootWidget));
62920:           // Make sure the accessible belongs to popup. If not then use
62920:           // document HWND (which might be different from root widget in the
62920:           // case of window emulation).
62920:           if (rootWidget != widget)
62920:             return static_cast<HWND>(widget->GetNativeData(NS_NATIVE_WINDOW));
62920:         }
62920:       }
62920:     }
 2950: 
54220:     nsDocAccessible* document = aAccessible->GetDocAccessible();
62920:     if (document)
62920:       return static_cast<HWND>(document->GetNativeWindow());
62920:   }
62920:   return nsnull;
 2950: }
 2950: 
16001: HRESULT
16001: nsAccessibleWrap::ConvertToIA2Attributes(nsIPersistentProperties *aAttributes,
16001:                                          BSTR *aIA2Attributes)
16001: {
16001:   *aIA2Attributes = NULL;
16001: 
16001:   // The format is name:value;name:value; with \ for escaping these
16001:   // characters ":;=,\".
16001: 
16001:   if (!aAttributes)
16001:     return S_FALSE;
16001: 
16001:   nsCOMPtr<nsISimpleEnumerator> propEnum;
16001:   aAttributes->Enumerate(getter_AddRefs(propEnum));
16001:   if (!propEnum)
16001:     return E_FAIL;
16001: 
16001:   nsAutoString strAttrs;
16001: 
16001:   const char kCharsToEscape[] = ":;=,\\";
16001: 
16001:   PRBool hasMore = PR_FALSE;
16001:   while (NS_SUCCEEDED(propEnum->HasMoreElements(&hasMore)) && hasMore) {
16001:     nsCOMPtr<nsISupports> propSupports;
16001:     propEnum->GetNext(getter_AddRefs(propSupports));
16001: 
16001:     nsCOMPtr<nsIPropertyElement> propElem(do_QueryInterface(propSupports));
16001:     if (!propElem)
16001:       return E_FAIL;
16001: 
16001:     nsCAutoString name;
16001:     if (NS_FAILED(propElem->GetKey(name)))
16001:       return E_FAIL;
16001: 
16001:     PRUint32 offset = 0;
16001:     while ((offset = name.FindCharInSet(kCharsToEscape, offset)) != kNotFound) {
16001:       name.Insert('\\', offset);
16001:       offset += 2;
16001:     }
16001: 
16001:     nsAutoString value;
16001:     if (NS_FAILED(propElem->GetValue(value)))
16001:       return E_FAIL;
16001: 
16001:     offset = 0;
16001:     while ((offset = value.FindCharInSet(kCharsToEscape, offset)) != kNotFound) {
16001:       value.Insert('\\', offset);
16001:       offset += 2;
16001:     }
16001: 
16001:     AppendUTF8toUTF16(name, strAttrs);
16001:     strAttrs.Append(':');
16001:     strAttrs.Append(value);
16001:     strAttrs.Append(';');
16001:   }
16001: 
16001:   if (strAttrs.IsEmpty())
16001:     return S_FALSE;
16001: 
16001:   *aIA2Attributes = ::SysAllocStringLen(strAttrs.get(), strAttrs.Length());
16001:   return *aIA2Attributes ? S_OK : E_OUTOFMEMORY;
16001: }
16001: 
    1: IDispatch *nsAccessibleWrap::NativeAccessible(nsIAccessible *aXPAccessible)
    1: {
 1581:   if (!aXPAccessible) {
 1581:    NS_WARNING("Not passing in an aXPAccessible");
 1581:    return NULL;
 1581:   }
 1581: 
    1:   nsCOMPtr<nsIAccessibleWin32Object> accObject(do_QueryInterface(aXPAccessible));
    1:   if (accObject) {
12698:     void* hwnd = nsnull;
    1:     accObject->GetHwnd(&hwnd);
    1:     if (hwnd) {
    1:       IDispatch *retval = nsnull;
 3233:       AccessibleObjectFromWindow(reinterpret_cast<HWND>(hwnd),
    1:         OBJID_WINDOW, IID_IAccessible, (void **) &retval);
    1:       return retval;
    1:     }
    1:   }
    1: 
    1:   IAccessible *msaaAccessible;
    1:   aXPAccessible->GetNativeInterface((void**)&msaaAccessible);
    1: 
 3233:   return static_cast<IDispatch*>(msaaAccessible);
    1: }
    1: 
15720: void
15720: nsAccessibleWrap::UnattachIEnumVariant()
15720: {
15720:   if (mEnumVARIANTPosition > 0)
15720:     mEnumVARIANTPosition = kIEnumVariantDisconnected;
15720: }
    1: 
42375: nsAccessible*
42375: nsAccessibleWrap::GetXPAccessibleFor(const VARIANT& aVarChild)
    1: {
52279:   if (aVarChild.vt != VT_I4)
42375:     return nsnull;
    1: 
    1:   // if its us real easy - this seems to always be the case
42375:   if (aVarChild.lVal == CHILDID_SELF)
42375:     return this;
42375: 
42375:   if (nsAccUtils::MustPrune(this))
42375:     return nsnull;
42375: 
70092:   // If lVal negative then it is treated as child ID and we should look for
70092:   // accessible through whole accessible subtree including subdocuments.
70092:   // Otherwise we treat lVal as index in parent.
70092: 
70092:   if (aVarChild.lVal < 0) {
70092:     // Convert child ID to unique ID.
70092:     void* uniqueID = reinterpret_cast<void*>(-aVarChild.lVal);
70092: 
70092:     // Document.
70092:     if (IsDoc())
70092:       return AsDoc()->GetAccessibleByUniqueIDInSubtree(uniqueID);
70092: 
70092:     // ARIA document.
70092:     if (ARIARole() == nsIAccessibleRole::ROLE_DOCUMENT) {
70092:       nsDocAccessible* document = GetDocAccessible();
70092:       nsAccessible* child =
70092:         document->GetAccessibleByUniqueIDInSubtree(uniqueID);
70092: 
70092:       // Check whether the accessible for the given ID is a child of ARIA
70092:       // document.
70092:       nsAccessible* parent = child ? child->GetParent() : nsnull;
70092:       while (parent && parent != document) {
70092:         if (parent == this)
70092:           return child;
70092: 
70092:         parent = parent->GetParent();
70092:       }
70092:     }
70092: 
70092:     return nsnull;
70092:   }
70092: 
60356:   // Gecko child indices are 0-based in contrast to indices used in MSAA.
60356:   return GetChildAt(aVarChild.lVal - 1);
    1: }
    1: 
 2395: void nsAccessibleWrap::UpdateSystemCaret()
 2395: {
 2395:   // Move the system caret so that Windows Tablet Edition and tradional ATs with 
 2395:   // off-screen model can follow the caret
 2395:   ::DestroyCaret();
 2395: 
63248:   nsRootAccessible* rootAccessible = RootAccessible();
 2395:   if (!rootAccessible) {
 2395:     return;
 2395:   }
 2395: 
 2395:   nsRefPtr<nsCaretAccessible> caretAccessible = rootAccessible->GetCaretAccessible();
 2395:   if (!caretAccessible) {
 2395:     return;
 2395:   }
 2395: 
 2395:   nsIWidget *widget;
23738:   nsIntRect caretRect = caretAccessible->GetCaretRect(&widget);
 2395:   HWND caretWnd; 
 2395:   if (caretRect.IsEmpty() || !(caretWnd = (HWND)widget->GetNativeData(NS_NATIVE_WINDOW))) {
 2395:     return;
 2395:   }
 2395: 
 2395:   // Create invisible bitmap for caret, otherwise its appearance interferes
 2395:   // with Gecko caret
 2395:   HBITMAP caretBitMap = CreateBitmap(1, caretRect.height, 1, 1, NULL);
 2395:   if (::CreateCaret(caretWnd, caretBitMap, 1, caretRect.height)) {  // Also destroys the last caret
 2395:     ::ShowCaret(caretWnd);
 2395:     RECT windowRect;
 2395:     ::GetWindowRect(caretWnd, &windowRect);
 2395:     ::SetCaretPos(caretRect.x - windowRect.left, caretRect.y - windowRect.top);
 2395:     ::DeleteObject(caretBitMap);
 2395:   }
 2395: }
36947: 
36947: ITypeInfo*
36947: nsAccessibleWrap::GetTI(LCID lcid)
36947: {
36947:   if (mTypeInfo)
36947:     return mTypeInfo;
36947: 
36947:   ITypeLib *typeLib = NULL;
36947:   HRESULT hr = LoadRegTypeLib(LIBID_Accessibility, 1, 0, lcid, &typeLib);
36947:   if (FAILED(hr))
36947:     return NULL;
36947: 
36947:   hr = typeLib->GetTypeInfoOfGuid(IID_IAccessible, &mTypeInfo);
36947:   typeLib->Release();
36947: 
36947:   if (FAILED(hr))
36947:     return NULL;
36947: 
36947:   return mTypeInfo;
36947: }
