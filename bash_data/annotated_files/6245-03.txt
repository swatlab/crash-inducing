   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Mozilla Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 2006
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Josh Aas <josh@mozilla.com>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
   1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "nsDragService.h"
   1: #include "nsITransferable.h"
   1: #include "nsString.h"
   1: #include "nsClipboard.h"
   1: #include "nsXPCOM.h"
   1: #include "nsISupportsPrimitives.h"
   1: #include "nsCOMPtr.h"
   1: #include "nsPrimitiveHelpers.h"
   1: #include "nsLinebreakConverter.h"
   1: #include "nsIMacUtils.h"
   1: #include "nsIDOMNode.h"
   1: #include "nsRect.h"
   1: #include "nsPoint.h"
   1: #include "nsIWidget.h"
   1: #include "nsIImage.h"
   1: #include "nsICharsetConverterManager.h"
   1: #include "nsIIOService.h"
   1: #include "nsNetUtil.h"
   1: #include "nsIDocument.h"
   1: #include "nsIContent.h"
   1: #include "nsIPresShell.h"
   1: #include "nsIFrame.h"
   1: #include "nsIView.h"
   1: #include "nsIRegion.h"
   1: #include "gfxASurface.h"
   1: #include "gfxContext.h"
   1: 
   1: #import <Cocoa/Cocoa.h>
   1: 
5676: #ifdef MOZ_LOGGING
5676: #define FORCE_PR_LOG
5676: #endif
5676: #include "prlog.h"
5676: 
5676: #ifdef PR_LOGGING
5676: extern PRLogModuleInfo* sCocoaLog;
5676: #endif
5676: 
   1: extern NSPasteboard* globalDragPboard;
6245: extern NSView* gLastDragView;
6245: extern NSEvent* gLastDragEvent;
   1: 
3545: // This global makes the transferable array available to Cocoa's promised
3545: // file destination callback.
3592: nsISupportsArray *gDraggedTransferables = nsnull;
3545: 
1933: NSString* const kWildcardPboardType = @"MozillaWildcard";
1933: 
   1: nsDragService::nsDragService()
   1: {
6245:   mNativeDragView = nil;
6245:   mNativeDragEvent = nil;
   1: }
   1: 
   1: 
   1: nsDragService::~nsDragService()
   1: {
   1: }
   1: 
   1: static nsresult SetUpDragClipboard(nsISupportsArray* aTransferableArray)
   1: {
   1:   if (!aTransferableArray)
   1:     return NS_ERROR_FAILURE;
   1: 
   1:   PRUint32 count = 0;
   1:   aTransferableArray->Count(&count);
   1: 
3066:   NSPasteboard* dragPBoard = [NSPasteboard pasteboardWithName:NSDragPboard];
3066: 
   1:   for (PRUint32 i = 0; i < count; i++) {
   1:     nsCOMPtr<nsISupports> currentTransferableSupports;
   1:     aTransferableArray->GetElementAt(i, getter_AddRefs(currentTransferableSupports));
   1:     if (!currentTransferableSupports)
   1:       return NS_ERROR_FAILURE;
   1: 
   1:     nsCOMPtr<nsITransferable> currentTransferable(do_QueryInterface(currentTransferableSupports));
   1:     if (!currentTransferable)
   1:       return NS_ERROR_FAILURE;
   1: 
2842:     // Transform the transferable to an NSDictionary
2842:     NSDictionary* pasteboardOutputDict = nsClipboard::PasteboardDictFromTransferable(currentTransferable);
2842:     if (!pasteboardOutputDict)
   1:       return NS_ERROR_FAILURE;
   1: 
   1:     // write everything out to the general pasteboard
3109:     unsigned int typeCount = [pasteboardOutputDict count];
3109:     NSMutableArray* types = [NSMutableArray arrayWithCapacity:typeCount + 1];
3109:     [types addObjectsFromArray:[pasteboardOutputDict allKeys]];
3109:     // Gecko is initiating this drag so we always want its own views to consider
3109:     // it. Add our wildcard type to the pasteboard to accomplish this.
3109:     [types addObject:kWildcardPboardType]; // we don't increase the count for the loop below on purpose
3109:     [dragPBoard declareTypes:types owner:nil];
3109:     for (unsigned int i = 0; i < typeCount; i++) {
3109:       NSString* currentKey = [types objectAtIndex:i];
   1:       id currentValue = [pasteboardOutputDict valueForKey:currentKey];
2908:       if (currentKey == NSStringPboardType) {
3066:         [dragPBoard setString:currentValue forType:currentKey];
2908:       }
2908:       else if (currentKey == NSTIFFPboardType) {
3066:         [dragPBoard setData:currentValue forType:currentKey];
2908:       }
3680:       else if (currentKey == NSFilesPromisePboardType) {
3680:         [dragPBoard setPropertyList:currentValue forType:currentKey];        
3680:       }
1933:     }
   1:   }
3066: 
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: NSImage*
   1: nsDragService::ConstructDragImage(nsIDOMNode* aDOMNode,
   1:                                   nsRect* aDragRect,
   1:                                   nsIScriptableRegion* aRegion)
   1: {
6245:   NSPoint screenPoint = [[gLastDragView window] convertBaseToScreen:[gLastDragEvent locationInWindow]];
   1:   // Y coordinates are bottom to top, so reverse this
   1:   if ([[NSScreen screens] count] > 0)
   1:     screenPoint.y = NSMaxY([[[NSScreen screens] objectAtIndex:0] frame]) - screenPoint.y;
   1: 
   1:   nsRefPtr<gfxASurface> surface;
   1:   nsresult rv = DrawDrag(aDOMNode, aRegion,
   1:                          NSToIntRound(screenPoint.x), NSToIntRound(screenPoint.y),
   1:                          aDragRect, getter_AddRefs(surface));
  94:   if (!aDragRect->width || !aDragRect->height) {
  94:     // just use some suitable defaults
  94:     aDragRect->SetRect(NSToIntRound(screenPoint.x), NSToIntRound(screenPoint.y), 20, 20);
  94:   }
  94: 
   1:   if (NS_FAILED(rv) || !surface)
5157:     return nil;
   1: 
   1:   PRUint32 width = aDragRect->width;
   1:   PRUint32 height = aDragRect->height;
   1: 
   1:   nsRefPtr<gfxImageSurface> imgSurface = new gfxImageSurface(
   1:     gfxIntSize(width, height), gfxImageSurface::ImageFormatARGB32);
   1:   if (!imgSurface)
5157:     return nil;
   1: 
   1:   nsRefPtr<gfxContext> context = new gfxContext(imgSurface);
   1:   if (!context)
5157:     return nil;
   1: 
   1:   context->SetOperator(gfxContext::OPERATOR_SOURCE);
   1:   context->SetSource(surface);
   1:   context->Paint();
   1: 
   1:   PRUint32* imageData = (PRUint32*)imgSurface->Data();
   1:   PRInt32 stride = imgSurface->Stride();
   1: 
   1:   NSBitmapImageRep* imageRep = [[NSBitmapImageRep alloc] initWithBitmapDataPlanes:NULL
   1:                                                                        pixelsWide:width
   1:                                                                        pixelsHigh:height
   1:                                                                     bitsPerSample:8
   1:                                                                   samplesPerPixel:4
   1:                                                                          hasAlpha:YES
   1:                                                                          isPlanar:NO
   1:                                                                    colorSpaceName:NSDeviceRGBColorSpace
   1:                                                                       bytesPerRow:width * 4
   1:                                                                      bitsPerPixel:32];
   1: 
   1:   PRUint8* dest = [imageRep bitmapData];
   1:   for (PRUint32 i = 0; i < height; ++i) {
   1:     PRUint8* src = (PRUint8 *)imageData + i * stride;
   1:     for (PRUint32 j = 0; j < width; ++j) {
5157:       // Reduce transparency overall by multipying by a factor. Remember, Alpha
5157:       // is premultipled here. Also, Quartz likes RGBA, so do that translation as well.
   1: #ifdef IS_BIG_ENDIAN
5157:       dest[0] = PRUint8(src[1] * DRAG_TRANSLUCENCY);
5157:       dest[1] = PRUint8(src[2] * DRAG_TRANSLUCENCY);
5157:       dest[2] = PRUint8(src[3] * DRAG_TRANSLUCENCY);
  94:       dest[3] = PRUint8(src[0] * DRAG_TRANSLUCENCY);
   1: #else
5157:       dest[0] = PRUint8(src[2] * DRAG_TRANSLUCENCY);
5157:       dest[1] = PRUint8(src[1] * DRAG_TRANSLUCENCY);
5157:       dest[2] = PRUint8(src[0] * DRAG_TRANSLUCENCY);
  94:       dest[3] = PRUint8(src[3] * DRAG_TRANSLUCENCY);
   1: #endif
   1:       src += 4;
   1:       dest += 4;
   1:     }
   1:   }
   1: 
5158:   NSImage* image = [[NSImage alloc] initWithSize:NSMakeSize((float)width, (float)height)];
   1:   [image addRepresentation:imageRep];
5158:   [imageRep release];
   1: 
   1:   return [image autorelease];
   1: }
   1: 
   1: // We can only invoke NSView's 'dragImage:at:offset:event:pasteboard:source:slideBack:' from
   1: // within NSView's 'mouseDown:' or 'mouseDragged:'. Luckily 'mouseDragged' is always on the
   1: // stack when InvokeDragSession gets called.
   1: NS_IMETHODIMP
   1: nsDragService::InvokeDragSession(nsIDOMNode* aDOMNode, nsISupportsArray* aTransferableArray,
   1:                                  nsIScriptableRegion* aDragRgn, PRUint32 aActionType)
   1: {
   1:   nsBaseDragService::InvokeDragSession(aDOMNode, aTransferableArray, aDragRgn, aActionType);
   1: 
2908:   mDataItems = aTransferableArray;
2908: 
   1:   // put data on the clipboard
   1:   if (NS_FAILED(SetUpDragClipboard(aTransferableArray)))
   1:     return NS_ERROR_FAILURE;
   1: 
   1:   nsRect dragRect(0, 0, 20, 20);
   1:   NSImage* image = ConstructDragImage(aDOMNode, &dragRect, aDragRgn);
   1:   if (!image) {
   1:     // if no image was returned, just draw a rectangle
   1:     NSSize size;
   1:     size.width = dragRect.width;
   1:     size.height = dragRect.height;
   1:     image = [[NSImage alloc] initWithSize:size];
   1:     [image lockFocus];
   1:     [[NSColor grayColor] set];
   1:     NSBezierPath* path = [NSBezierPath bezierPath];
   1:     [path setLineWidth:2.0];
   1:     [path moveToPoint:NSMakePoint(0, 0)];
   1:     [path lineToPoint:NSMakePoint(0, size.height)];
   1:     [path lineToPoint:NSMakePoint(size.width, size.height)];
   1:     [path lineToPoint:NSMakePoint(size.width, 0)];
   1:     [path lineToPoint:NSMakePoint(0, 0)];
   1:     [path stroke];
   1:     [image unlockFocus];
   1:   }
   1: 
   1:   NSPoint point;
   1:   point.x = dragRect.x;
   1:   if ([[NSScreen screens] count] > 0)
   1:     point.y = NSMaxY([[[NSScreen screens] objectAtIndex:0] frame]) - dragRect.YMost();
   1:   else
   1:     point.y = dragRect.y;
   1: 
6245:   point = [[gLastDragView window] convertScreenToBase: point];
6245:   NSPoint localPoint = [gLastDragView convertPoint:point fromView:nil];
   1:  
3545:   // Save the transferables away in case a promised file callback is invoked.
3592:   gDraggedTransferables = aTransferableArray;
3545: 
   1:   nsBaseDragService::StartDragSession();
3545: 
6245:   // We need to retain the view and the event during the drag in case either gets destroyed.
6245:   mNativeDragView = [gLastDragView retain];
6245:   mNativeDragEvent = [gLastDragEvent retain];
6245: 
6245:   [mNativeDragView dragImage:image
   1:                           at:localPoint
   1:                       offset:NSMakeSize(0,0)
6245:                        event:mNativeDragEvent
3680:                   pasteboard:[NSPasteboard pasteboardWithName:NSDragPboard]
6245:                       source:mNativeDragView
   1:                    slideBack:YES];
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: NS_IMETHODIMP
   1: nsDragService::GetData(nsITransferable* aTransferable, PRUint32 aItemIndex)
   1: {
2908:   if (!aTransferable)
2908:     return NS_ERROR_FAILURE;
2908: 
2908:   // get flavor list that includes all acceptable flavors (including ones obtained through conversion)
2908:   nsCOMPtr<nsISupportsArray> flavorList;
2908:   nsresult rv = aTransferable->FlavorsTransferableCanImport(getter_AddRefs(flavorList));
2908:   if (NS_FAILED(rv))
2908:     return NS_ERROR_FAILURE;
2908: 
2908:   PRUint32 acceptableFlavorCount;
2908:   flavorList->Count(&acceptableFlavorCount);
2908: 
2908:   // if this drag originated within Mozilla we should just use the cached data from
2908:   // when the drag started if possible
2908:   if (mDataItems) {
2908:     nsCOMPtr<nsISupports> currentTransferableSupports;
2908:     mDataItems->GetElementAt(aItemIndex, getter_AddRefs(currentTransferableSupports));
2908:     if (currentTransferableSupports) {
2908:       nsCOMPtr<nsITransferable> currentTransferable(do_QueryInterface(currentTransferableSupports));
2908:       if (currentTransferable) {
2908:         for (PRUint32 i = 0; i < acceptableFlavorCount; i++) {
2908:           nsCOMPtr<nsISupports> genericFlavor;
2908:           flavorList->GetElementAt(i, getter_AddRefs(genericFlavor));
2908:           nsCOMPtr<nsISupportsCString> currentFlavor(do_QueryInterface(genericFlavor));
2908:           if (!currentFlavor)
2908:             continue;
2908:           nsXPIDLCString flavorStr;
2908:           currentFlavor->ToString(getter_Copies(flavorStr));
2908: 
2908:           nsCOMPtr<nsISupports> dataSupports;
2908:           PRUint32 dataSize = 0;
2908:           rv = currentTransferable->GetTransferData(flavorStr, getter_AddRefs(dataSupports), &dataSize);
2908:           if (NS_SUCCEEDED(rv)) {
2908:             aTransferable->SetTransferData(flavorStr, dataSupports, dataSize);
2908:             return NS_OK; // maybe try to fill in more types? Is there a point?
2908:           }
2908:         }
2908:       }
2908:     }
2908:   }
2908: 
2908:   // now check the actual clipboard for data
2908:   for (PRUint32 i = 0; i < acceptableFlavorCount; i++) {
2908:     nsCOMPtr<nsISupports> genericFlavor;
2908:     flavorList->GetElementAt(i, getter_AddRefs(genericFlavor));
2908:     nsCOMPtr<nsISupportsCString> currentFlavor(do_QueryInterface(genericFlavor));
2908: 
2908:     if (!currentFlavor)
2908:       continue;
2908: 
2908:     nsXPIDLCString flavorStr;
2908:     currentFlavor->ToString(getter_Copies(flavorStr));
2908: 
3545:     PR_LOG(sCocoaLog, PR_LOG_ALWAYS, ("nsDragService::GetData: looking for clipboard data of type %s\n", flavorStr.get()));
2908: 
3066:     if (flavorStr.EqualsLiteral(kFileMime)) {
2908:       NSArray* pFiles = [globalDragPboard propertyListForType:NSFilenamesPboardType];
2908:       if (!pFiles || [pFiles count] < (aItemIndex + 1))
2908:         continue;
2908: 
2908:       NSString* filePath = [pFiles objectAtIndex:aItemIndex];
2908:       if (!filePath)
2908:         continue;
2908: 
2908:       unsigned int stringLength = [filePath length];
2908:       unsigned int dataLength = (stringLength + 1) * sizeof(PRUnichar); // in bytes
2908:       PRUnichar* clipboardDataPtr = (PRUnichar*)malloc(dataLength);
2908:       if (!clipboardDataPtr)
2908:         return NS_ERROR_OUT_OF_MEMORY;
2908:       [filePath getCharacters:clipboardDataPtr];
2908:       clipboardDataPtr[stringLength] = 0; // null terminate
2908: 
2908:       nsCOMPtr<nsILocalFile> file;
2908:       nsresult rv = NS_NewLocalFile(nsDependentString(clipboardDataPtr), PR_TRUE, getter_AddRefs(file));
2908:       free(clipboardDataPtr);
2908:       if (NS_FAILED(rv))
2908:         continue;
2908: 
2908:       nsCOMPtr<nsISupports> genericDataWrapper;
2908:       genericDataWrapper = do_QueryInterface(file);
2908:       aTransferable->SetTransferData(flavorStr, genericDataWrapper, dataLength);
2908:       
2908:       break;
2908:     }
2908: 
3066:     if (flavorStr.EqualsLiteral(kUnicodeMime)) {
2908:       NSString* pString = [globalDragPboard stringForType:NSStringPboardType];
2908:       if (!pString)
2908:         continue;
2908: 
2908:       NSData* stringData = [pString dataUsingEncoding:NSUnicodeStringEncoding];
2908:       unsigned int dataLength = [stringData length];
2908:       void* clipboardDataPtr = malloc(dataLength);
2908:       if (!clipboardDataPtr)
2908:         return NS_ERROR_OUT_OF_MEMORY;
2908:       [stringData getBytes:clipboardDataPtr];
2908: 
2908:       // The DOM only wants LF, so convert from MacOS line endings to DOM line endings.
2908:       PRInt32 signedDataLength = dataLength;
3066:       nsLinebreakHelpers::ConvertPlatformToDOMLinebreaks(flavorStr, &clipboardDataPtr, &signedDataLength);
2908:       dataLength = signedDataLength;
2908: 
2908:       // skip BOM (Byte Order Mark to distinguish little or big endian)      
2908:       PRUnichar* clipboardDataPtrNoBOM = (PRUnichar*)clipboardDataPtr;
2908:       if ((dataLength > 2) &&
2908:           ((clipboardDataPtrNoBOM[0] == 0xFEFF) ||
2908:            (clipboardDataPtrNoBOM[0] == 0xFFFE))) {
2908:         dataLength -= sizeof(PRUnichar);
2908:         clipboardDataPtrNoBOM += 1;
2908:       }
2908: 
2908:       nsCOMPtr<nsISupports> genericDataWrapper;
2908:       nsPrimitiveHelpers::CreatePrimitiveForData(flavorStr, clipboardDataPtrNoBOM, dataLength,
2908:                                                  getter_AddRefs(genericDataWrapper));
2908:       aTransferable->SetTransferData(flavorStr, genericDataWrapper, dataLength);
2908:       free(clipboardDataPtr);
2908:       break;
2908:     }
2908: 
2908:     // We have never supported this on Mac OS X, we should someday. Normally dragging images
2908:     // in is accomplished with a file path drag instead of the image data itself.
2908:     /*
3066:     if (flavorStr.EqualsLiteral(kPNGImageMime) || flavorStr.EqualsLiteral(kJPEGImageMime) ||
3066:         flavorStr.EqualsLiteral(kGIFImageMime)) {
2908: 
2908:     }
2908:     */
2908:   }
2908:   return NS_OK;
   1: }
   1: 
   1: 
   1: NS_IMETHODIMP
   1: nsDragService::IsDataFlavorSupported(const char *aDataFlavor, PRBool *_retval)
   1: {
   1:   *_retval = PR_FALSE;
   1: 
   1:   if (!globalDragPboard)
   1:     return NS_ERROR_FAILURE;
   1: 
3066:   nsDependentCString dataFlavor(aDataFlavor);
3066: 
3109:   // first see if we have data for this in our cached transferable
3109:   if (mDataItems) {
3109:     PRUint32 dataItemsCount;
3109:     mDataItems->Count(&dataItemsCount);
3109:     for (unsigned int i = 0; i < dataItemsCount; i++) {
3109:       nsCOMPtr<nsISupports> currentTransferableSupports;
3109:       mDataItems->GetElementAt(i, getter_AddRefs(currentTransferableSupports));
3109:       if (!currentTransferableSupports)
3109:         continue;
3109: 
3109:       nsCOMPtr<nsITransferable> currentTransferable(do_QueryInterface(currentTransferableSupports));
3109:       if (!currentTransferable)
3109:         continue;
3109: 
3109:       nsCOMPtr<nsISupportsArray> flavorList;
3109:       nsresult rv = currentTransferable->FlavorsTransferableCanImport(getter_AddRefs(flavorList));
3109:       if (NS_FAILED(rv))
3109:         continue;
3109: 
3109:       PRUint32 flavorCount;
3109:       flavorList->Count(&flavorCount);
3109:       for (PRUint32 j = 0; j < flavorCount; j++) {
3109:         nsCOMPtr<nsISupports> genericFlavor;
3109:         flavorList->GetElementAt(j, getter_AddRefs(genericFlavor));
3109:         nsCOMPtr<nsISupportsCString> currentFlavor(do_QueryInterface(genericFlavor));
3109:         if (!currentFlavor)
3109:           continue;
3109:         nsXPIDLCString flavorStr;
3109:         currentFlavor->ToString(getter_Copies(flavorStr));
3109:         if (dataFlavor.Equals(flavorStr)) {
3109:           *_retval = PR_TRUE;
3109:           return NS_OK;
3109:         }
3109:       }
3109:     }
3109:   }
3109: 
3066:   if (dataFlavor.EqualsLiteral(kFileMime)) {
   1:     NSString* availableType = [globalDragPboard availableTypeFromArray:[NSArray arrayWithObject:NSFilenamesPboardType]];
   1:     if (availableType && [availableType isEqualToString:NSFilenamesPboardType])
   1:       *_retval = PR_TRUE;
   1:   }
3066:   else if (dataFlavor.EqualsLiteral(kUnicodeMime)) {
   1:     NSString* availableType = [globalDragPboard availableTypeFromArray:[NSArray arrayWithObject:NSStringPboardType]];
   1:     if (availableType && [availableType isEqualToString:NSStringPboardType])
   1:       *_retval = PR_TRUE;
   1:   }
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: 
   1: NS_IMETHODIMP
   1: nsDragService::GetNumDropItems(PRUint32* aNumItems)
   1: {
   1:   *aNumItems = 0;
   1: 
2908:   // first check to see if we have a number of items cached
2908:   if (mDataItems) {
2908:     mDataItems->Count(aNumItems);
2908:     return NS_OK;
2908:   }
2908: 
   1:   // if there is a clipboard and there is something on it, then there is at least 1 item
   1:   NSArray* clipboardTypes = [globalDragPboard types];
   1:   if (globalDragPboard && [clipboardTypes count] > 0)
   1:     *aNumItems = 1;
   1:   else 
   1:     return NS_OK;
   1:   
   1:   // if there is a list of files, send the number of files in that list
   1:   NSArray* fileNames = [globalDragPboard propertyListForType:NSFilenamesPboardType];
   1:   if (fileNames)
   1:     *aNumItems = [fileNames count];
   1:   
   1:   return NS_OK;
   1: }
2908: 
2908: 
2908: NS_IMETHODIMP
2908: nsDragService::EndDragSession(PRBool aDoneDrag)
2908: {
6245:   if (mNativeDragView) {
6245:     [mNativeDragView release];
6245:     mNativeDragView = nil;
6245:   }
6245:   if (mNativeDragEvent) {
6245:     [mNativeDragEvent release];
6245:     mNativeDragEvent = nil;
6245:   }
6245: 
2908:   mDataItems = nsnull;
2908:   return nsBaseDragService::EndDragSession(aDoneDrag);
2908: }
