58663: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
58663:  * vim: sw=2 ts=8 et :
58663:  */
58663: /* ***** BEGIN LICENSE BLOCK *****
58663:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
58663:  *
58663:  * The contents of this file are subject to the Mozilla Public License Version
58663:  * 1.1 (the "License"); you may not use this file except in compliance with
58663:  * the License. You may obtain a copy of the License at:
58663:  * http://www.mozilla.org/MPL/
58663:  *
58663:  * Software distributed under the License is distributed on an "AS IS" basis,
58663:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
58663:  * for the specific language governing rights and limitations under the
58663:  * License.
58663:  *
58663:  * The Original Code is Mozilla Code.
58663:  *
58663:  * The Initial Developer of the Original Code is
58663:  *   The Mozilla Foundation
58663:  * Portions created by the Initial Developer are Copyright (C) 2010
58663:  * the Initial Developer. All Rights Reserved.
58663:  *
58663:  * Contributor(s):
58663:  *
58663:  * Alternatively, the contents of this file may be used under the terms of
58663:  * either the GNU General Public License Version 2 or later (the "GPL"), or
58663:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
58663:  * in which case the provisions of the GPL or the LGPL are applicable instead
58663:  * of those above. If you wish to allow use of your version of this file only
58663:  * under the terms of either the GPL or the LGPL, and not to allow others to
58663:  * use your version of this file under the terms of the MPL, indicate your
58663:  * decision by deleting the provisions above and replace them with the notice
58663:  * and other provisions required by the GPL or the LGPL. If you do not delete
58663:  * the provisions above, a recipient may use your version of this file under
58663:  * the terms of any one of the MPL, the GPL or the LGPL.
58663:  *
58663:  * ***** END LICENSE BLOCK ***** */
58663: 
58663: #include "X11Util.h"
58663: 
58663: namespace mozilla {
58663: 
87048: bool
87048: XVisualIDToInfo(Display* aDisplay, VisualID aVisualID,
87048:                 Visual** aVisual, unsigned int* aDepth)
87048: {
87048:     if (aVisualID == None) {
87048:         *aVisual = NULL;
87048:         *aDepth = 0;
87048:         return true;
87048:     }
87048: 
87048:     const Screen* screen = DefaultScreenOfDisplay(aDisplay);
87048: 
87048:     for (int d = 0; d < screen->ndepths; d++) {
87048:         Depth *d_info = &screen->depths[d];
87048:         for (int v = 0; v < d_info->nvisuals; v++) {
87048:             Visual* visual = &d_info->visuals[v];
87048:             if (visual->visualid == aVisualID) {
87048:                 *aVisual = visual;
87048:                 *aDepth = d_info->depth;
87048:                 return true;
87048:             }
87048:         }
87048:     }
87048: 
87048:     NS_ERROR("VisualID not on Screen.");
87048:     return false;
87048: }
87048: 
58728: ScopedXErrorHandler::ErrorEvent* ScopedXErrorHandler::sXErrorPtr;
58728: 
58728: int
58728: ScopedXErrorHandler::ErrorHandler(Display *, XErrorEvent *ev)
58728: {
62482:     // only record the error if no error was previously recorded.
62482:     // this means that in case of multiple errors, it's the first error that we report.
62482:     if (!sXErrorPtr->mError.error_code)
58728:       sXErrorPtr->mError = *ev;
58728:     return 0;
58728: }
58728: 
58728: ScopedXErrorHandler::ScopedXErrorHandler()
58728: {
58728:     // let sXErrorPtr point to this object's mXError object, but don't reset this mXError object!
58728:     // think of the case of nested ScopedXErrorHandler's.
58728:     mOldXErrorPtr = sXErrorPtr;
58728:     sXErrorPtr = &mXError;
58728:     mOldErrorHandler = XSetErrorHandler(ErrorHandler);
58728: }
58728: 
58728: ScopedXErrorHandler::~ScopedXErrorHandler()
58728: {
58728:     sXErrorPtr = mOldXErrorPtr;
58728:     XSetErrorHandler(mOldErrorHandler);
58728: }
58728: 
58728: bool
58728: ScopedXErrorHandler::SyncAndGetError(Display *dpy, XErrorEvent *ev)
58728: {
58728:     XSync(dpy, False);
62486:     return GetError(ev);
62486: }
62486: 
62486: bool
62486: ScopedXErrorHandler::GetError(XErrorEvent *ev)
62486: {
58728:     bool retval = mXError.mError.error_code != 0;
58728:     if (ev)
58728:         *ev = mXError.mError;
58728:     mXError = ErrorEvent(); // reset
58728:     return retval;
58728: }
58728: 
58663: } // namespace mozilla
