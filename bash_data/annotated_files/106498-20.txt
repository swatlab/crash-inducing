     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 74230: #include "mozilla/dom/TabChild.h"
 74230: 
 83479: #include "Compatibility.h"
 99568: #include "DocAccessibleWrap.h"
     1: #include "ISimpleDOMDocument_i.c"
106498: #include "nsCoreUtils.h"
     1: #include "nsIAccessibilityService.h"
 54220: #include "nsWinUtils.h"
 87094: #include "Role.h"
 97643: #include "RootAccessible.h"
 79538: #include "Statistics.h"
 54220: 
     1: #include "nsIDocShell.h"
     1: #include "nsIDocShellTreeNode.h"
     1: #include "nsIFrame.h"
     1: #include "nsIInterfaceRequestorUtils.h"
     1: #include "nsISelectionController.h"
     1: #include "nsIServiceManager.h"
     1: #include "nsIURI.h"
     1: #include "nsIViewManager.h"
     1: #include "nsIWebNavigation.h"
     1: 
 97643: using namespace mozilla;
 79538: using namespace mozilla::a11y;
 79538: 
     1: /* For documentation of the accessibility architecture, 
     1:  * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
     1:  */
     1: 
 43310: ////////////////////////////////////////////////////////////////////////////////
 99568: // DocAccessibleWrap
 43310: ////////////////////////////////////////////////////////////////////////////////
     1: 
 99568: DocAccessibleWrap::
 99568:   DocAccessibleWrap(nsIDocument* aDocument, nsIContent* aRootContent,
 89801:                     nsIPresShell* aPresShell) :
 99568:   DocAccessible(aDocument, aRootContent, aPresShell), mHWND(NULL)
     1: {
     1: }
     1: 
 99568: DocAccessibleWrap::~DocAccessibleWrap()
     1: {
     1: }
     1: 
     1: //-----------------------------------------------------
     1: // IUnknown interface methods - see iunknown.h for documentation
     1: //-----------------------------------------------------
 99568: STDMETHODIMP_(ULONG)
 99568: DocAccessibleWrap::AddRef()
     1: {
     1:   return nsAccessNode::AddRef();
     1: }
     1: 
 99568: STDMETHODIMP_(ULONG) DocAccessibleWrap::Release()
     1: {
     1:   return nsAccessNode::Release();
     1: }
     1: 
     1: // Microsoft COM QueryInterface
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::QueryInterface(REFIID iid, void** ppv)
     1: {
     1:   *ppv = NULL;
     1: 
 79538:   if (IID_ISimpleDOMDocument != iid)
 99901:     return HyperTextAccessibleWrap::QueryInterface(iid, ppv);
     1: 
 79538:   statistics::ISimpleDOMUsed();
 79538:   *ppv = static_cast<ISimpleDOMDocument*>(this);
  3233:   (reinterpret_cast<IUnknown*>(*ppv))->AddRef();
     1:   return S_OK;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_URL(/* [out] */ BSTR __RPC_FAR *aURL)
     1: {
 11593: __try {
     1:   *aURL = NULL;
 13128: 
     1:   nsAutoString URL;
 13130:   nsresult rv = GetURL(URL);
 13128:   if (NS_FAILED(rv))
 13128:     return E_FAIL;
 13128: 
 13128:   if (URL.IsEmpty())
 13128:     return S_FALSE;
 13128: 
 13128:   *aURL = ::SysAllocStringLen(URL.get(), URL.Length());
 13128:   return *aURL ? S_OK : E_OUTOFMEMORY;
 13128: 
 11593: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
     1:   return E_FAIL;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_title( /* [out] */ BSTR __RPC_FAR *aTitle)
     1: {
 11593: __try {
     1:   *aTitle = NULL;
 13128: 
     1:   nsAutoString title;
 13130:   nsresult rv = GetTitle(title);
 13128:   if (NS_FAILED(rv))
 13128:     return E_FAIL;
 13128: 
 13128:   *aTitle = ::SysAllocStringLen(title.get(), title.Length());
 13128:   return *aTitle ? S_OK : E_OUTOFMEMORY;
 13128: 
 11593: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
     1:   return E_FAIL;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_mimeType(/* [out] */ BSTR __RPC_FAR *aMimeType)
     1: {
 11593: __try {
     1:   *aMimeType = NULL;
 13128: 
     1:   nsAutoString mimeType;
 13130:   nsresult rv = GetMimeType(mimeType);
 13128:   if (NS_FAILED(rv))
 13128:     return E_FAIL;
 13128: 
 13128:   if (mimeType.IsEmpty())
 13128:     return S_FALSE;
 13128: 
 13128:   *aMimeType = ::SysAllocStringLen(mimeType.get(), mimeType.Length());
 13128:   return *aMimeType ? S_OK : E_OUTOFMEMORY;
 13128: 
 11593: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
     1:   return E_FAIL;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_docType(/* [out] */ BSTR __RPC_FAR *aDocType)
     1: {
 11593: __try {
     1:   *aDocType = NULL;
 13128: 
     1:   nsAutoString docType;
 13130:   nsresult rv = GetDocType(docType);
 13128:   if (NS_FAILED(rv))
 13128:     return E_FAIL;
 13128: 
 13128:   if (docType.IsEmpty())
 13128:     return S_FALSE;
 13128: 
 13128:   *aDocType = ::SysAllocStringLen(docType.get(), docType.Length());
 13128:   return *aDocType ? S_OK : E_OUTOFMEMORY;
 13128: 
 11593: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
     1:   return E_FAIL;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_nameSpaceURIForID(/* [in] */  short aNameSpaceID,
     1:   /* [out] */ BSTR __RPC_FAR *aNameSpaceURI)
     1: {
 11593: __try {
     1:   *aNameSpaceURI = NULL;
 13128: 
 13128:   if (aNameSpaceID < 0)
 13128:     return E_INVALIDARG;  // -1 is kNameSpaceID_Unknown
 13128: 
     1:   nsAutoString nameSpaceURI;
 13130:   nsresult rv = GetNameSpaceURIForID(aNameSpaceID, nameSpaceURI);
 13128:   if (NS_FAILED(rv))
 13128:     return E_FAIL;
 13128: 
 13128:   if (nameSpaceURI.IsEmpty())
 13128:     return S_FALSE;
 13128: 
 13128:   *aNameSpaceURI = ::SysAllocStringLen(nameSpaceURI.get(),
 13128:                                        nameSpaceURI.Length());
 13128: 
 13128:   return *aNameSpaceURI ? S_OK : E_OUTOFMEMORY;
 13128: 
 11593: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
     1:   return E_FAIL;
     1: }
     1: 
 13128: STDMETHODIMP
 99568: DocAccessibleWrap::put_alternateViewMediaTypes( /* [in] */ BSTR __RPC_FAR *aCommaSeparatedMediaTypes)
     1: {
 13128: __try {
 13128:   *aCommaSeparatedMediaTypes = NULL;
 13128: } __except(FilterA11yExceptions(::GetExceptionCode(), GetExceptionInformation())) { }
 13128: 
     1:   return E_NOTIMPL;
     1: }
     1: 
 99568: STDMETHODIMP
 99568: DocAccessibleWrap::get_accValue(
 13094:       /* [optional][in] */ VARIANT varChild,
 13094:       /* [retval][out] */ BSTR __RPC_FAR *pszValue)
 13094: {
 13094:   // For backwards-compat, we still support old MSAA hack to provide URL in accValue
 13094:   *pszValue = NULL;
 13094:   // Check for real value first
 99648:   HRESULT hr = AccessibleWrap::get_accValue(varChild, pszValue);
 13094:   if (FAILED(hr) || *pszValue || varChild.lVal != CHILDID_SELF)
 13094:     return hr;
 13094:   // If document is being used to create a widget, don't use the URL hack
 87094:   roles::Role role = Role();
 87094:   if (role != roles::DOCUMENT && role != roles::APPLICATION && 
 87094:       role != roles::DIALOG && role != roles::ALERT) 
 13094:     return hr;
 13094: 
 13094:   return get_URL(pszValue);
 13094: }
 54220: 
 54220: ////////////////////////////////////////////////////////////////////////////////
 54220: // nsAccessNode
 54220: 
 54220: void
 99568: DocAccessibleWrap::Shutdown()
 54220: {
 64004:   // Do window emulation specific shutdown if emulation was started.
 64004:   if (nsWinUtils::IsWindowEmulationStarted()) {
 54220:     // Destroy window created for root document.
 74230:     if (nsCoreUtils::IsTabDocument(mDocument)) {
 64004:       sHWNDCache.Remove(mHWND);
 54220:       ::DestroyWindow(static_cast<HWND>(mHWND));
 54220:     }
 54220: 
 54220:     mHWND = nsnull;
 54220:   }
 54220: 
 99568:   DocAccessible::Shutdown();
 54220: }
 54220: 
 54220: ////////////////////////////////////////////////////////////////////////////////
 99568: // DocAccessible public
 54220: 
 54220: void*
 99568: DocAccessibleWrap::GetNativeWindow() const
 54220: {
 99568:   return mHWND ? mHWND : DocAccessible::GetNativeWindow();
 54220: }
 63261: 
 63261: ////////////////////////////////////////////////////////////////////////////////
 99568: // DocAccessible protected
 63261: 
 63261: void
 99568: DocAccessibleWrap::DoInitialUpdate()
 63261: {
 99568:   DocAccessible::DoInitialUpdate();
 63310: 
 64004:   if (nsWinUtils::IsWindowEmulationStarted()) {
 63261:     // Create window for tab document.
 74230:     if (nsCoreUtils::IsTabDocument(mDocument)) {
 74230:       mozilla::dom::TabChild* tabChild =
 74230:         mozilla::dom::GetTabChildFrom(mDocument->GetShell());
 74230: 
 97643:       a11y::RootAccessible* rootDocument = RootAccessible();
 63261: 
106419:       mozilla::WindowsHandle nativeData = NULL;
 74230:       if (tabChild)
 74230:         tabChild->SendGetWidgetNativeData(&nativeData);
 74230:       else
 74230:         nativeData = reinterpret_cast<mozilla::WindowsHandle>(
 74230:           rootDocument->GetNativeWindow());
 74230: 
 79445:       bool isActive = true;
 63261:       PRInt32 x = CW_USEDEFAULT, y = CW_USEDEFAULT, width = 0, height = 0;
 83479:       if (Compatibility::IsDolphin()) {
 63261:         GetBounds(&x, &y, &width, &height);
 63261:         PRInt32 rootX = 0, rootY = 0, rootWidth = 0, rootHeight = 0;
 63261:         rootDocument->GetBounds(&rootX, &rootY, &rootWidth, &rootHeight);
 63261:         x = rootX - x;
 63261:         y -= rootY;
 63261: 
 63261:         nsCOMPtr<nsISupports> container = mDocument->GetContainer();
 63261:         nsCOMPtr<nsIDocShell> docShell = do_QueryInterface(container);
 63261:         docShell->GetIsActive(&isActive);
 63261:       }
 63261: 
 74230:       HWND parentWnd = reinterpret_cast<HWND>(nativeData);
 63261:       mHWND = nsWinUtils::CreateNativeWindow(kClassNameTabContent, parentWnd,
 63261:                                              x, y, width, height, isActive);
 63261: 
 64004:       sHWNDCache.Put(mHWND, this);
 63261: 
 63261:     } else {
 99568:       DocAccessible* parentDocument = ParentDocument();
 63261:       if (parentDocument)
 63261:         mHWND = parentDocument->GetNativeWindow();
 63261:     }
 63261:   }
 63261: }
