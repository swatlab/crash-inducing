38727: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
38727:  * ***** BEGIN LICENSE BLOCK *****
38727:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
38727:  *
38727:  * The contents of this file are subject to the Mozilla Public License Version
38727:  * 1.1 (the "License"); you may not use this file except in compliance with
38727:  * the License. You may obtain a copy of the License at
38727:  * http://www.mozilla.org/MPL/
38727:  *
38727:  * Software distributed under the License is distributed on an "AS IS" basis,
38727:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
38727:  * for the specific language governing rights and limitations under the
38727:  * License.
38727:  *
38727:  * The Original Code is Mozilla Foundation code.
38727:  *
38727:  * The Initial Developer of the Original Code is Mozilla Foundation.
38727:  * Portions created by the Initial Developer are Copyright (C) 2010
38727:  * the Initial Developer. All Rights Reserved.
38727:  *
38727:  * Contributor(s):
38727:  *   Bas Schouten <bschouten@mozilla.com>
38727:  *
38727:  * Alternatively, the contents of this file may be used under the terms of
38727:  * either the GNU General Public License Version 2 or later (the "GPL"), or
38727:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
38727:  * in which case the provisions of the GPL or the LGPL are applicable instead
38727:  * of those above. If you wish to allow use of your version of this file only
38727:  * under the terms of either the GPL or the LGPL, and not to allow others to
38727:  * use your version of this file under the terms of the MPL, indicate your
38727:  * decision by deleting the provisions above and replace them with the notice
38727:  * and other provisions required by the GPL or the LGPL. If you do not delete
38727:  * the provisions above, a recipient may use your version of this file under
38727:  * the terms of any one of the MPL, the GPL or the LGPL.
38727:  *
38727:  * ***** END LICENSE BLOCK ***** */
38727: 
38727: #ifndef GFX_DWRITEFONTLIST_H
38727: #define GFX_DWRITEFONTLIST_H
38727: 
38727: #include "gfxDWriteCommon.h"
38727: 
38727: #include "gfxFont.h"
38727: #include "gfxUserFontSet.h"
38727: #include "cairo-win32.h"
38727: 
38727: #include "gfxPlatformFontList.h"
38727: 
38727: 
38727: /**
38727:  * gfxDWriteFontFamily is a class that describes one of the fonts on the
38727:  * users system.  It holds each gfxDWriteFontEntry (maps more directly to
38727:  * a font face) which holds font type, charset info and character map info.
38727:  */
38727: class gfxDWriteFontEntry;
38727: 
38727: /**
38727:  * \brief Class representing directwrite font family.
38727:  */
38727: class gfxDWriteFontFamily : public gfxFontFamily
38727: {
38727: public:
38727:     /**
38727:      * Constructs a new DWriteFont Family.
38727:      *
38727:      * \param aName Name identifying the family
38727:      * \param aFamily IDWriteFontFamily object representing the directwrite
38727:      * family object.
38727:      */
38727:     gfxDWriteFontFamily(const nsAString& aName, 
38727:                                IDWriteFontFamily *aFamily)
38727:       : gfxFontFamily(aName), mDWFamily(aFamily) {}
38727:     virtual ~gfxDWriteFontFamily();
38727:     
38727:     virtual void FindStyleVariations();
38727: 
38727:     virtual void LocalizedName(nsAString& aLocalizedName); 
38727: protected:
38727:     /** This font family's directwrite fontfamily object */
38727:     nsRefPtr<IDWriteFontFamily> mDWFamily;
38727: };
38727: 
38727: /**
38727:  * \brief Class representing DirectWrite FontEntry (a unique font style/family)
38727:  */
38727: class gfxDWriteFontEntry : public gfxFontEntry
38727: {
38727: public:
38727:     /**
38727:      * Constructs a font entry.
38727:      *
38727:      * \param aFaceName The name of the corresponding font face.
38727:      * \param aFont DirectWrite font object
38727:      */
38727:     gfxDWriteFontEntry(const nsAString& aFaceName,
38727:                               IDWriteFont *aFont) 
38727:       : gfxFontEntry(aFaceName), mFont(aFont), mFontFile(nsnull)
38727:     {
38727:         mItalic = (aFont->GetStyle() == DWRITE_FONT_STYLE_ITALIC ||
38727:                    aFont->GetStyle() == DWRITE_FONT_STYLE_OBLIQUE);
38727:         mStretch = FontStretchFromDWriteStretch(aFont->GetStretch());
38727:         PRUint16 weight = PR_ROUNDUP(aFont->GetWeight() - 50, 100);
38727: 
38727:         weight = NS_MAX<PRUint16>(100, weight);
38727:         weight = NS_MIN<PRUint16>(900, weight);
38727: 
38727:         mWeight = weight;
38727:     }
38727: 
38727:     /**
38727:      * Constructs a font entry using a font. But with custom font values.
38727:      * This is used for creating correct font entries for @font-face with local
38727:      * font source.
38727:      *
38727:      * \param aFaceName The name of the corresponding font face.
38727:      * \param aFont DirectWrite font object
38727:      * \param aWeight Weight of the font
38727:      * \param aStretch Stretch of the font
38727:      * \param aItalic True if italic
38727:      */
38727:     gfxDWriteFontEntry(const nsAString& aFaceName,
38727:                               IDWriteFont *aFont,
38727:                               PRUint16 aWeight,
38727:                               PRInt16 aStretch,
38727:                               PRBool aItalic)
38727:       : gfxFontEntry(aFaceName), mFont(aFont), mFontFile(nsnull)
38727:     {
38727:         mWeight = aWeight;
38727:         mStretch = aStretch;
38727:         mItalic = aItalic;
38727:         mIsUserFont = PR_TRUE;
43347:         mIsLocalUserFont = PR_TRUE;
38727:     }
38727: 
38727:     /**
38727:      * Constructs a font entry using a font file.
38727:      *
38727:      * \param aFaceName The name of the corresponding font face.
38727:      * \param aFontFile DirectWrite fontfile object
38727:      * \param aWeight Weight of the font
38727:      * \param aStretch Stretch of the font
38727:      * \param aItalic True if italic
38727:      */
38727:     gfxDWriteFontEntry(const nsAString& aFaceName,
38727:                               IDWriteFontFile *aFontFile,
38727:                               PRUint16 aWeight,
38727:                               PRInt16 aStretch,
38727:                               PRBool aItalic)
38727:       : gfxFontEntry(aFaceName), mFont(nsnull), mFontFile(aFontFile)
38727:     {
38727:         mWeight = aWeight;
38727:         mStretch = aStretch;
38727:         mItalic = aItalic;
38727:         mIsUserFont = PR_TRUE;
38727:     }
38727: 
38727:     virtual ~gfxDWriteFontEntry();
38727: 
38727:     virtual PRBool IsSymbolFont();
38727: 
38727:     virtual nsresult GetFontTable(PRUint32 aTableTag,
38727:                                   nsTArray<PRUint8>& aBuffer);
38727: 
38727:     nsresult ReadCMAP();
38727: protected:
38727:     friend class gfxDWriteFont;
38727:     friend class gfxDWriteFontList;
38727: 
38727:     virtual gfxFont *CreateFontInstance(const gfxFontStyle *aFontStyle,
38727:                                         PRBool aNeedsBold);
38727:     
38727:     nsresult CreateFontFace(
38727:         IDWriteFontFace **aFontFace,
38727:         DWRITE_FONT_SIMULATIONS aSimulations = DWRITE_FONT_SIMULATIONS_NONE);
38727: 
38727:     /**
38727:      * A fontentry only needs to have either of these. If it has both only
38727:      * the IDWriteFont will be used.
38727:      */
38727:     nsRefPtr<IDWriteFont> mFont;
38727:     nsRefPtr<IDWriteFontFile> mFontFile;
38727:     DWRITE_FONT_FACE_TYPE mFaceType;
38727: };
38727: 
38727: 
38727: class gfxDWriteFontList : public gfxPlatformFontList {
38727: public:
38727:     gfxDWriteFontList();
38727: 
38727:     static gfxDWriteFontList* PlatformFontList() {
38727:         return static_cast<gfxDWriteFontList*>(sPlatformFontList);
38727:     }
38727: 
57104:     // initialize font lists
57104:     virtual nsresult InitFontList();
57104: 
38727:     virtual gfxFontEntry* GetDefaultFont(const gfxFontStyle* aStyle,
38727:                                          PRBool& aNeedsBold);
38727: 
38727:     virtual gfxFontEntry* LookupLocalFont(const gfxProxyFontEntry *aProxyEntry,
38727:                                           const nsAString& aFontName);
38727: 
38727:     virtual gfxFontEntry* MakePlatformFont(const gfxProxyFontEntry *aProxyEntry,
38727:                                            const PRUint8 *aFontData,
38727:                                            PRUint32 aLength);
38727:     
38867:     virtual PRBool ResolveFontName(const nsAString& aFontName,
38867:                                    nsAString& aResolvedFontName);
38867: 
38788:     PRBool GetStandardFamilyName(const nsAString& aFontName,
38788:                                  nsAString& aFamilyName);
38788: 
38727: private:
38727:     friend class gfxDWriteFontFamily;
38727: 
38867:     nsresult GetFontSubstitutes();
38867: 
38867:     /**
38867:      * Fonts listed in the registry as substitutes but for which no actual
38867:      * font family is found.
38867:      */
38727:     nsTArray<nsString> mNonExistingFonts;
38867: 
38867:     typedef nsDataHashtable<nsStringHashKey, nsRefPtr<gfxFontFamily> > FontTable;
38867: 
38867:     /**
38867:      * Table of font substitutes, we grab this from the registry to get
38867:      * alternative font names.
38867:      */
38867:     FontTable mFontSubstitutes;
38727: };
38727: 
38727: 
38727: #endif /* GFX_DWRITEFONTLIST_H */
