 84764: /* Any copyright is dedicated to the Public Domain.
 84764:    http://creativecommons.org/publicdomain/zero/1.0/ */
 84764: "use strict";
 84764: 
 87997: let tempScope = {};
 87997: Components.utils.import("resource:///modules/devtools/TiltGL.jsm", tempScope);
 87997: Components.utils.import("resource:///modules/devtools/TiltMath.jsm", tempScope);
 87997: Components.utils.import("resource:///modules/devtools/TiltUtils.jsm", tempScope);
 87997: Components.utils.import("resource:///modules/devtools/TiltVisualizer.jsm", tempScope);
 91042: Components.utils.import("resource:///modules/devtools/LayoutHelpers.jsm", tempScope);
 87997: let TiltGL = tempScope.TiltGL;
 87997: let EPSILON = tempScope.EPSILON;
 87997: let TiltMath = tempScope.TiltMath;
 87997: let vec3 = tempScope.vec3;
 87997: let mat3 = tempScope.mat3;
 87997: let mat4 = tempScope.mat4;
 87997: let quat4 = tempScope.quat4;
 87997: let TiltUtils = tempScope.TiltUtils;
 87997: let TiltVisualizer = tempScope.TiltVisualizer;
 91042: let LayoutHelpers = tempScope.LayoutHelpers;
 84764: 
 84764: 
 84764: const DEFAULT_HTML = "data:text/html," +
 84764:   "<DOCTYPE html>" +
 84764:   "<html>" +
 84764:     "<head>" +
 94260:       "<meta charset='utf-8'/>" +
 84764:       "<title>Three Laws</title>" +
 84764:     "</head>" +
 84764:     "<body>" +
 88393:       "<div id='first-law'>" +
 84764:         "A robot may not injure a human being or, through inaction, allow a " +
 84764:         "human being to come to harm." +
 84764:       "</div>" +
 84764:       "<div>" +
 84764:         "A robot must obey the orders given to it by human beings, except " +
 84764:         "where such orders would conflict with the First Law." +
 84764:       "</div>" +
 84764:       "<div>" +
 84764:         "A robot must protect its own existence as long as such protection " +
 84764:         "does not conflict with the First or Second Laws." +
 84764:       "</div>" +
 89941:       "<div id='far-far-away' style='position: absolute; top: 250%;'>" +
 89941:         "I like bacon." +
 89941:       "</div>" +
 84764:     "<body>" +
 84764:   "</html>";
 84764: 
 84764: const INSPECTOR_OPENED = InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED;
 84764: const INSPECTOR_CLOSED = InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED;
 84764: 
 88393: const INITIALIZING = Tilt.NOTIFICATIONS.INITIALIZING;
 88393: const INITIALIZED = Tilt.NOTIFICATIONS.INITIALIZED;
 88393: const DESTROYING = Tilt.NOTIFICATIONS.DESTROYING;
 88393: const BEFORE_DESTROYED = Tilt.NOTIFICATIONS.BEFORE_DESTROYED;
 88393: const DESTROYED = Tilt.NOTIFICATIONS.DESTROYED;
 88393: const SHOWN = Tilt.NOTIFICATIONS.SHOWN;
 88393: const HIDDEN = Tilt.NOTIFICATIONS.HIDDEN;
 88393: const HIGHLIGHTING = Tilt.NOTIFICATIONS.HIGHLIGHTING;
 88393: const UNHIGHLIGHTING = Tilt.NOTIFICATIONS.UNHIGHLIGHTING;
 88393: const NODE_REMOVED = Tilt.NOTIFICATIONS.NODE_REMOVED;
 84764: 
 84764: const TILT_ENABLED = Services.prefs.getBoolPref("devtools.tilt.enabled");
 84764: const INSP_ENABLED = Services.prefs.getBoolPref("devtools.inspector.enabled");
 84764: 
 84764: 
 84764: function isTiltEnabled() {
100193:   let enabled = TILT_ENABLED && INSP_ENABLED;
100193: 
100193:   info("Apparently, Tilt is" + (enabled ? "" : " not") + " enabled.");
100193:   return enabled;
 84764: }
 84764: 
 84764: function isWebGLSupported() {
100193:   let supported = !TiltGL.isWebGLForceEnabled() &&
100193:                    TiltGL.isWebGLSupported() &&
100193:                    TiltGL.create3DContext(createCanvas());
100193: 
100193:   info("Apparently, WebGL is" + (supported ? "" : " not") + " supported.");
100193:   return supported;
 84764: }
 84764: 
 86486: function isApprox(num1, num2, delta) {
 86486:   if (Math.abs(num1 - num2) > (delta || EPSILON)) {
 86486:     info("isApprox expected " + num1 + ", got " + num2 + " instead.");
 86486:     return false;
 86486:   }
 86486:   return true;
 84764: }
 84764: 
 86486: function isApproxVec(vec1, vec2, delta) {
 86486:   vec1 = Array.prototype.slice.call(vec1);
 86486:   vec2 = Array.prototype.slice.call(vec2);
 86486: 
 84764:   if (vec1.length !== vec2.length) {
 84764:     return false;
 84764:   }
 84764:   for (let i = 0, len = vec1.length; i < len; i++) {
 86486:     if (!isApprox(vec1[i], vec2[i], delta)) {
 86486:       info("isApproxVec expected [" + vec1 + "], got [" + vec2 + "] instead.");
 84764:       return false;
 84764:     }
 84764:   }
 84764:   return true;
 84764: }
 84764: 
 86308: function isEqualVec(vec1, vec2) {
 86486:   vec1 = Array.prototype.slice.call(vec1);
 86486:   vec2 = Array.prototype.slice.call(vec2);
 86486: 
 86308:   if (vec1.length !== vec2.length) {
 86308:     return false;
 86308:   }
 86308:   for (let i = 0, len = vec1.length; i < len; i++) {
 86308:     if (vec1[i] !== vec2[i]) {
 86486:       info("isEqualVec expected [" + vec1 + "], got [" + vec2 + "] instead.");
 86308:       return false;
 86308:     }
 86308:   }
 86308:   return true;
 86308: }
 84764: 
 84764: function createCanvas() {
 85955:   return document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
 84764: }
 84764: 
 84764: 
 84764: function createTab(callback, location) {
100193:   info("Creating a tab, with callback " + typeof callback +
100193:                       ", and location " + location + ".");
100193: 
 84764:   let tab = gBrowser.selectedTab = gBrowser.addTab();
 84764: 
 84764:   gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
 84764:     gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
 84764:     callback(tab);
 84764:   }, true);
 84764: 
 84764:   gBrowser.selectedBrowser.contentWindow.location = location || DEFAULT_HTML;
 84764:   return tab;
 84764: }
 84764: 
 84764: 
100193: function createTilt(callbacks, close, suddenDeath) {
100193:   info("Creating Tilt, with callbacks {" + Object.keys(callbacks) + "}" +
100193:                    ", autoclose param " + close +
100193:           ", and sudden death handler " + typeof suddenDeath + ".");
100193: 
 88393:   Services.prefs.setBoolPref("webgl.verbose", true);
100193:   TiltUtils.Output.suppressAlerts = true;
 88393: 
100193:   info("Attempting to start the inspector.");
 84764:   Services.obs.addObserver(onInspectorOpen, INSPECTOR_OPENED, false);
 84764:   InspectorUI.toggleInspectorUI();
 84764: 
 84764:   function onInspectorOpen() {
100193:     info("Inspector was opened.");
 84764:     Services.obs.removeObserver(onInspectorOpen, INSPECTOR_OPENED);
 84764: 
 84764:     executeSoon(function() {
 84764:       if ("function" === typeof callbacks.onInspectorOpen) {
100193:         info("Calling 'onInspectorOpen'.");
 84764:         callbacks.onInspectorOpen();
 84764:       }
 89939:       executeSoon(function() {
100193:         info("Attempting to start Tilt.");
 88393:         Services.obs.addObserver(onTiltOpen, INITIALIZING, false);
100193:         handleFailure(suddenDeath);
 84764:         Tilt.initialize();
 84764:       });
 89939:     });
 84764:   }
 84764: 
 84764:   function onTiltOpen() {
100193:     info("Tilt was opened.");
 88393:     Services.obs.removeObserver(onTiltOpen, INITIALIZING);
 84764: 
 84764:     executeSoon(function() {
 84764:       if ("function" === typeof callbacks.onTiltOpen) {
100193:         info("Calling 'onTiltOpen'.");
 85955:         callbacks.onTiltOpen(Tilt.visualizers[Tilt.currentWindowId]);
 84764:       }
 84764:       if (close) {
 89939:         executeSoon(function() {
100193:           info("Attempting to close Tilt.");
 88393:           Services.obs.addObserver(onTiltClose, DESTROYED, false);
 84764:           Tilt.destroy(Tilt.currentWindowId);
 89939:         });
 84764:       }
 84764:     });
 84764:   }
 84764: 
 84764:   function onTiltClose() {
100193:     info("Tilt was closed.");
 88393:     Services.obs.removeObserver(onTiltClose, DESTROYED);
 84764: 
 84764:     executeSoon(function() {
 84764:       if ("function" === typeof callbacks.onTiltClose) {
100193:         info("Calling 'onTiltClose'.");
 84764:         callbacks.onTiltClose();
 84764:       }
 84764:       if (close) {
 89939:         executeSoon(function() {
100193:           info("Attempting to close the Inspector.");
 84764:           Services.obs.addObserver(onInspectorClose, INSPECTOR_CLOSED, false);
 84764:           InspectorUI.closeInspectorUI();
 89939:         });
 84764:       }
 84764:     });
 84764:   }
 84764: 
 84764:   function onInspectorClose() {
100193:     info("Inspector was closed.");
 84764:     Services.obs.removeObserver(onInspectorClose, INSPECTOR_CLOSED);
 84764: 
 84764:     executeSoon(function() {
 84764:       if ("function" === typeof callbacks.onInspectorClose) {
100193:         info("Calling 'onInspectorClose'.");
 84764:         callbacks.onInspectorClose();
 84764:       }
 84764:       if ("function" === typeof callbacks.onEnd) {
100193:         info("Calling 'onEnd'.");
 84764:         callbacks.onEnd();
 84764:       }
 84764:     });
 84764:   }
100193: 
100193:   function handleFailure(suddenDeath) {
100193:     Tilt.failureCallback = function() {
100193:       info("Tilt FAIL.");
100193:       Services.obs.removeObserver(onTiltOpen, INITIALIZING);
100193: 
100193:       info("Now relying on sudden death handler " + typeof suddenDeath + ".");
100193:       suddenDeath && suddenDeath();
100193:     }
100193:   }
 84764: }
 94260: 
 94260: function getPickablePoint(presenter) {
 94260:   let vertices = presenter._meshStacks[0].vertices.components;
 94260: 
 94260:   let topLeft = vec3.create([vertices[0], vertices[1], vertices[2]]);
 94260:   let bottomRight = vec3.create([vertices[6], vertices[7], vertices[8]]);
 94260:   let center = vec3.lerp(topLeft, bottomRight, 0.5, []);
 94260: 
 94260:   let renderer = presenter._renderer;
 94260:   let viewport = [0, 0, renderer.width, renderer.height];
 94260: 
 94260:   return vec3.project(center, viewport, renderer.mvMatrix, renderer.projMatrix);
 94260: }
