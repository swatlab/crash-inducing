40462: // Copyright (c) 2009 The Chromium Authors. All rights reserved.
40462: // Use of this source code is governed by a BSD-style license that can be
40462: // found in the LICENSE file.
40462: 
40462: // This webpage shows layout of YV12 and other YUV formats
40462: // http://www.fourcc.org/yuv.php
40462: // The actual conversion is best described here
40462: // http://en.wikipedia.org/wiki/YUV
40462: // An article on optimizing YUV conversion using tables instead of multiplies
40462: // http://lestourtereaux.free.fr/papers/data/yuvrgb.pdf
40462: //
40462: // YV12 is a full plane of Y and a half height, half width chroma planes
40462: // YV16 is a full plane of Y and a full height, half width chroma planes
40463: // YV24 is a full plane of Y and a full height, full width chroma planes
40462: //
40462: // ARGB pixel format is output, which on little endian is stored as BGRA.
40462: // The alpha is set to 255, allowing the application to use RGBA or RGB32.
40462: 
40462: #include "yuv_convert.h"
40462: 
40462: // Header for low level row functions.
40462: #include "yuv_row.h"
40462: #include "mozilla/SSE.h"
40462: 
40462: namespace mozilla {
40462: 
40462: namespace gfx {
40462: 
40462: // Convert a frame of YUV to 32 bit ARGB.
41195: NS_GFX_(void) ConvertYCbCrToRGB32(const uint8* y_buf,
40462:                                   const uint8* u_buf,
40462:                                   const uint8* v_buf,
40462:                                   uint8* rgb_buf,
40462:                                   int pic_x,
40462:                                   int pic_y,
40462:                                   int pic_width,
40462:                                   int pic_height,
40462:                                   int y_pitch,
40462:                                   int uv_pitch,
40462:                                   int rgb_pitch,
40462:                                   YUVType yuv_type) {
40463:   unsigned int y_shift = yuv_type == YV12 ? 1 : 0;
40463:   unsigned int x_shift = yuv_type == YV24 ? 0 : 1;
49182:   // Test for SSE because the optimized code uses movntq, which is not part of MMX.
49182:   bool has_sse = supports_mmx() && supports_sse();
49182:   // There is no optimized YV24 SSE routine so we check for this and
40463:   // fall back to the C code.
49182:   has_sse &= yuv_type != YV24;
40463:   bool odd_pic_x = yuv_type != YV24 && pic_x % 2 != 0;
40462:   int x_width = odd_pic_x ? pic_width - 1 : pic_width;
40462: 
40462:   for (int y = pic_y; y < pic_height + pic_y; ++y) {
40462:     uint8* rgb_row = rgb_buf + (y - pic_y) * rgb_pitch;
40462:     const uint8* y_ptr = y_buf + y * y_pitch + pic_x;
40463:     const uint8* u_ptr = u_buf + (y >> y_shift) * uv_pitch + (pic_x >> x_shift);
40463:     const uint8* v_ptr = v_buf + (y >> y_shift) * uv_pitch + (pic_x >> x_shift);
40462: 
40462:     if (odd_pic_x) {
40462:       // Handle the single odd pixel manually and use the
40462:       // fast routines for the remaining.
40462:       FastConvertYUVToRGB32Row_C(y_ptr++,
40462:                                  u_ptr++,
40462:                                  v_ptr++,
40462:                                  rgb_row,
40463:                                  1,
40463:                                  x_shift);
40462:       rgb_row += 4;
40462:     }
40462: 
49182:     if (has_sse)
40462:       FastConvertYUVToRGB32Row(y_ptr,
40462:                                u_ptr,
40462:                                v_ptr,
40462:                                rgb_row,
40462:                                x_width);
40462:     else
40462:       FastConvertYUVToRGB32Row_C(y_ptr,
40462:                                  u_ptr,
40462:                                  v_ptr,
40462:                                  rgb_row,
40463:                                  x_width,
40463:                                  x_shift);
40462:   }
40462: 
44177: #ifdef ARCH_CPU_X86_FAMILY
49182:   // SSE used for FastConvertYUVToRGB32Row requires emms instruction.
49182:   if (has_sse)
40462:     EMMS();
44177: #endif
40462: }
40462: 
40462: }  // namespace gfx
40462: }  // namespace mozilla
