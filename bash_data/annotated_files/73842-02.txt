54707: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
54707:  * vim: set ts=4 sw=4 et tw=99:
54707:  *
54707:  * ***** BEGIN LICENSE BLOCK *****
54707:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
54707:  *
54707:  * The contents of this file are subject to the Mozilla Public License Version
54707:  * 1.1 (the "License"); you may not use this file except in compliance with
54707:  * the License. You may obtain a copy of the License at
54707:  * http://www.mozilla.org/MPL/
54707:  *
54707:  * Software distributed under the License is distributed on an "AS IS" basis,
54707:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
54707:  * for the specific language governing rights and limitations under the
54707:  * License.
54707:  *
54707:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
54707:  * May 28, 2008.
54707:  *
54707:  * The Initial Developer of the Original Code is
54707:  *   Mozilla Foundation
54707:  * Portions created by the Initial Developer are Copyright (C) 2010
54707:  * the Initial Developer. All Rights Reserved.
54707:  *
54707:  * Contributor(s):
54707:  *
54707:  * Alternatively, the contents of this file may be used under the terms of
54707:  * either of the GNU General Public License Version 2 or later (the "GPL"),
54707:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
54707:  * in which case the provisions of the GPL or the LGPL are applicable instead
54707:  * of those above. If you wish to allow use of your version of this file only
54707:  * under the terms of either the GPL or the LGPL, and not to allow others to
54707:  * use your version of this file under the terms of the MPL, indicate your
54707:  * decision by deleting the provisions above and replace them with the notice
54707:  * and other provisions required by the GPL or the LGPL. If you do not delete
54707:  * the provisions above, a recipient may use your version of this file under
54707:  * the terms of any one of the MPL, the GPL or the LGPL.
54707:  *
54707:  * ***** END LICENSE BLOCK ***** */
54707: 
56574: #include "jscntxt.h"
54707: #include "jscompartment.h"
54707: #include "jsgc.h"
68933: #include "jsgcmark.h"
56574: #include "jsiter.h"
72075: #include "jsmath.h"
54707: #include "jsproxy.h"
54707: #include "jsscope.h"
59733: #include "jstracer.h"
62594: #include "jswrapper.h"
61427: #include "assembler/wtf/Platform.h"
71317: #include "yarr/BumpPointerAllocator.h"
56773: #include "methodjit/MethodJIT.h"
54707: #include "methodjit/PolyIC.h"
54707: #include "methodjit/MonoIC.h"
54707: 
54707: #include "jsgcinlines.h"
64285: #include "jsscopeinlines.h"
54707: 
62572: #if ENABLE_YARR_JIT
62572: #include "assembler/jit/ExecutableAllocator.h"
62572: #endif
62572: 
54707: using namespace js;
54707: using namespace js::gc;
54707: 
54707: JSCompartment::JSCompartment(JSRuntime *rt)
59735:   : rt(rt),
59735:     principals(NULL),
60258:     gcBytes(0),
60258:     gcTriggerBytes(0),
60258:     gcLastBytes(0),
64258:     hold(false),
72549: #ifdef JS_TRACER
72548:     traceMonitor_(NULL),
72549: #endif
59735:     data(NULL),
59922:     active(false),
62022: #ifdef JS_METHODJIT
72551:     jaegerCompartment_(NULL),
62022: #endif
71317: #if ENABLE_YARR_JIT
71317:     regExpAllocator(NULL),
71317: #endif
63147:     propertyTree(thisForCtor()),
64242:     emptyArgumentsShape(NULL),
64242:     emptyBlockShape(NULL),
64242:     emptyCallShape(NULL),
64242:     emptyDeclEnvShape(NULL),
64242:     emptyEnumeratorShape(NULL),
64242:     emptyWithShape(NULL),
64377:     initialRegExpShape(NULL),
67942:     initialStringShape(NULL),
59735:     debugMode(rt->debugMode),
64258:     mathCache(NULL)
54707: {
54707:     JS_INIT_CLIST(&scripts);
59733: 
59735:     PodArrayZero(scriptsToGC);
54707: }
54707: 
54707: JSCompartment::~JSCompartment()
54707: {
60168: #if ENABLE_YARR_JIT
64559:     Foreground::delete_(regExpAllocator);
60168: #endif
60168: 
56773: #ifdef JS_METHODJIT
72551:     Foreground::delete_(jaegerCompartment_);
56773: #endif
59733: 
72548: #ifdef JS_TRACER
72548:     Foreground::delete_(traceMonitor_);
72548: #endif
72548: 
64559:     Foreground::delete_(mathCache);
59735: 
59733: #ifdef DEBUG
59733:     for (size_t i = 0; i != JS_ARRAY_LENGTH(scriptsToGC); ++i)
59733:         JS_ASSERT(!scriptsToGC[i]);
59733: #endif
54707: }
54707: 
54707: bool
54707: JSCompartment::init()
54707: {
54707:     chunk = NULL;
55746:     for (unsigned i = 0; i < FINALIZE_LIMIT; i++)
55746:         arenas[i].init();
71354:     freeLists.init();
56773:     if (!crossCompartmentWrappers.init())
56773:         return false;
56773: 
71317:     regExpAllocator = rt->new_<WTF::BumpPointerAllocator>();
60168:     if (!regExpAllocator)
60168:         return false;
60168: 
62574:     if (!backEdgeTable.init())
62574:         return false;
62574: 
56773:     return true;
54707: }
54707: 
69289: #ifdef JS_METHODJIT
72551: bool
72551: JSCompartment::ensureJaegerCompartmentExists(JSContext *cx)
72551: {
72551:     if (jaegerCompartment_)
72551:         return true;
72551: 
72551:     mjit::JaegerCompartment *jc = cx->new_<mjit::JaegerCompartment>();
72551:     if (!jc)
72551:         return false;
72551:     if (!jc->Initialize()) {
72551:         cx->delete_(jc);
72551:         return false;
72551:     }
72551:     jaegerCompartment_ = jc;
72551:     return true;
72551: }
72551: 
69289: size_t
69289: JSCompartment::getMjitCodeSize() const
69289: {
72551:     return jaegerCompartment_ ? jaegerCompartment_->execAlloc()->getCodeSize() : 0;
69289: }
69289: #endif
69289: 
54707: bool
54707: JSCompartment::arenaListsAreEmpty()
54707: {
55746:   for (unsigned i = 0; i < FINALIZE_LIMIT; i++) {
69651:        if (!arenas[i].isEmpty())
54707:            return false;
54707:   }
54707:   return true;
54707: }
54707: 
62594: static bool
62594: IsCrossCompartmentWrapper(JSObject *wrapper)
62594: {
62603:     return wrapper->isWrapper() &&
62603:            !!(JSWrapper::wrapperHandler(wrapper)->flags() & JSWrapper::CROSS_COMPARTMENT);
62594: }
62594: 
54707: bool
54707: JSCompartment::wrap(JSContext *cx, Value *vp)
54707: {
54707:     JS_ASSERT(cx->compartment == this);
54707: 
54707:     uintN flags = 0;
54707: 
54707:     JS_CHECK_RECURSION(cx, return false);
54707: 
54707:     /* Only GC things have to be wrapped or copied. */
54707:     if (!vp->isMarkable())
54707:         return true;
54707: 
54862:     if (vp->isString()) {
54862:         JSString *str = vp->toString();
54862: 
64343:         /* Static atoms do not have to be wrapped. */
64343:         if (str->isStaticAtom())
54707:             return true;
54707: 
54862:         /* If the string is already in this compartment, we are done. */
64345:         if (str->compartment() == this)
54862:             return true;
54862: 
54862:         /* If the string is an atom, we don't have to copy. */
64343:         if (str->isAtom()) {
64345:             JS_ASSERT(str->compartment() == cx->runtime->atomsCompartment);
54862:             return true;
54862:         }
54862:     }
54862: 
55628:     /*
55628:      * Wrappers should really be parented to the wrapped parent of the wrapped
55628:      * object, but in that case a wrapped global object would have a NULL
64291:      * parent without being a proper global object (JSCLASS_IS_GLOBAL). Instead
64291: ,
55628:      * we parent all wrappers to the global object in their home compartment.
55628:      * This loses us some transparency, and is generally very cheesy.
55628:      */
62876:     JSObject *global;
71696:     if (cx->hasfp()) {
62876:         global = cx->fp()->scopeChain().getGlobal();
62876:     } else {
62876:         global = cx->globalObject;
73842:         if (!NULLABLE_OBJ_TO_INNER_OBJECT(cx, global))
55628:             return false;
62876:     }
55628: 
54707:     /* Unwrap incoming objects. */
54707:     if (vp->isObject()) {
54707:         JSObject *obj = &vp->toObject();
54707: 
54707:         /* If the object is already in this compartment, we are done. */
54862:         if (obj->compartment() == this)
54707:             return true;
54707: 
56574:         /* Translate StopIteration singleton. */
56574:         if (obj->getClass() == &js_StopIterationClass)
56574:             return js_FindClassObject(cx, NULL, JSProto_StopIteration, vp);
56574: 
54707:         /* Don't unwrap an outer window proxy. */
54707:         if (!obj->getClass()->ext.innerObject) {
54707:             obj = vp->toObject().unwrap(&flags);
55628:             vp->setObject(*obj);
56578:             if (obj->getCompartment() == this)
55628:                 return true;
55628: 
60246:             if (cx->runtime->preWrapObjectCallback) {
55628:                 obj = cx->runtime->preWrapObjectCallback(cx, global, obj, flags);
55628:                 if (!obj)
55628:                     return false;
60246:             }
55611: 
55611:             vp->setObject(*obj);
56578:             if (obj->getCompartment() == this)
55611:                 return true;
55611:         } else {
60246:             if (cx->runtime->preWrapObjectCallback) {
55691:                 obj = cx->runtime->preWrapObjectCallback(cx, global, obj, flags);
60246:                 if (!obj)
60246:                     return false;
60246:             }
55691: 
55611:             JS_ASSERT(!obj->isWrapper() || obj->getClass()->ext.innerObject);
55611:             vp->setObject(*obj);
55611:         }
55611: 
55628: #ifdef DEBUG
55628:         {
55628:             JSObject *outer = obj;
55628:             OBJ_TO_OUTER_OBJECT(cx, outer);
55628:             JS_ASSERT(outer && outer == obj);
55628:         }
55628: #endif
54707:     }
54707: 
54707:     /* If we already have a wrapper for this value, use it. */
54707:     if (WrapperMap::Ptr p = crossCompartmentWrappers.lookup(*vp)) {
54707:         *vp = p->value;
62594:         if (vp->isObject()) {
62594:             JSObject *obj = &vp->toObject();
62594:             JS_ASSERT(IsCrossCompartmentWrapper(obj));
62594:             if (obj->getParent() != global) {
62594:                 do {
62594:                     obj->setParent(global);
62594:                     obj = obj->getProto();
62594:                 } while (obj && IsCrossCompartmentWrapper(obj));
62594:             }
62594:         }
54707:         return true;
54707:     }
54707: 
54707:     if (vp->isString()) {
54707:         Value orig = *vp;
54707:         JSString *str = vp->toString();
59890:         const jschar *chars = str->getChars(cx);
59890:         if (!chars)
59890:             return false;
59890:         JSString *wrapped = js_NewStringCopyN(cx, chars, str->length());
54707:         if (!wrapped)
54707:             return false;
54707:         vp->setString(wrapped);
54707:         return crossCompartmentWrappers.put(orig, *vp);
54707:     }
54707: 
54707:     JSObject *obj = &vp->toObject();
54707: 
54707:     /*
54707:      * Recurse to wrap the prototype. Long prototype chains will run out of
54707:      * stack, causing an error in CHECK_RECURSE.
54707:      *
54707:      * Wrapping the proto before creating the new wrapper and adding it to the
54707:      * cache helps avoid leaving a bad entry in the cache on OOM. But note that
54707:      * if we wrapped both proto and parent, we would get infinite recursion
54707:      * here (since Object.prototype->parent->proto leads to Object.prototype
54707:      * itself).
54707:      */
54707:     JSObject *proto = obj->getProto();
54707:     if (!wrap(cx, &proto))
54707:         return false;
54707: 
54707:     /*
55580:      * We hand in the original wrapped object into the wrap hook to allow
55580:      * the wrap hook to reason over what wrappers are currently applied
55580:      * to the object.
55580:      */
55580:     JSObject *wrapper = cx->runtime->wrapObjectCallback(cx, obj, proto, global, flags);
55580:     if (!wrapper)
55580:         return false;
55580: 
55580:     vp->setObject(*wrapper);
55580: 
55580:     wrapper->setProto(proto);
55580:     if (!crossCompartmentWrappers.put(wrapper->getProxyPrivate(), *vp))
55580:         return false;
55580: 
54707:     wrapper->setParent(global);
54707:     return true;
54707: }
54707: 
54707: bool
54707: JSCompartment::wrap(JSContext *cx, JSString **strp)
54707: {
54707:     AutoValueRooter tvr(cx, StringValue(*strp));
54707:     if (!wrap(cx, tvr.addr()))
54707:         return false;
54707:     *strp = tvr.value().toString();
54707:     return true;
54707: }
54707: 
54707: bool
54707: JSCompartment::wrap(JSContext *cx, JSObject **objp)
54707: {
54707:     if (!*objp)
54707:         return true;
54707:     AutoValueRooter tvr(cx, ObjectValue(**objp));
54707:     if (!wrap(cx, tvr.addr()))
54707:         return false;
54707:     *objp = &tvr.value().toObject();
54707:     return true;
54707: }
54707: 
54707: bool
54707: JSCompartment::wrapId(JSContext *cx, jsid *idp)
54707: {
54707:     if (JSID_IS_INT(*idp))
54707:         return true;
54707:     AutoValueRooter tvr(cx, IdToValue(*idp));
54707:     if (!wrap(cx, tvr.addr()))
54707:         return false;
54707:     return ValueToId(cx, tvr.value(), idp);
54707: }
54707: 
54707: bool
54707: JSCompartment::wrap(JSContext *cx, PropertyOp *propp)
54707: {
54707:     Value v = CastAsObjectJsval(*propp);
54707:     if (!wrap(cx, &v))
54707:         return false;
54707:     *propp = CastAsPropertyOp(v.toObjectOrNull());
54707:     return true;
54707: }
54707: 
54707: bool
62395: JSCompartment::wrap(JSContext *cx, StrictPropertyOp *propp)
62395: {
62395:     Value v = CastAsObjectJsval(*propp);
62395:     if (!wrap(cx, &v))
62395:         return false;
62395:     *propp = CastAsStrictPropertyOp(v.toObjectOrNull());
62395:     return true;
62395: }
62395: 
62395: bool
54707: JSCompartment::wrap(JSContext *cx, PropertyDescriptor *desc)
54707: {
54707:     return wrap(cx, &desc->obj) &&
54707:            (!(desc->attrs & JSPROP_GETTER) || wrap(cx, &desc->getter)) &&
54707:            (!(desc->attrs & JSPROP_SETTER) || wrap(cx, &desc->setter)) &&
54707:            wrap(cx, &desc->value);
54707: }
54707: 
54707: bool
54707: JSCompartment::wrap(JSContext *cx, AutoIdVector &props)
54707: {
54707:     jsid *vector = props.begin();
54707:     jsint length = props.length();
54707:     for (size_t n = 0; n < size_t(length); ++n) {
54707:         if (!wrapId(cx, &vector[n]))
54707:             return false;
54707:     }
54707:     return true;
54707: }
54707: 
60170: #if defined JS_METHODJIT && defined JS_MONOIC
59895: /*
59895:  * Check if the pool containing the code for jit should be destroyed, per the
59895:  * heuristics in JSCompartment::sweep.
59895:  */
59895: static inline bool
59895: ScriptPoolDestroyed(JSContext *cx, mjit::JITScript *jit,
59895:                     uint32 releaseInterval, uint32 &counter)
59895: {
59895:     JSC::ExecutablePool *pool = jit->code.m_executablePool;
59895:     if (pool->m_gcNumber != cx->runtime->gcNumber) {
59895:         /*
59895:          * The m_destroy flag may have been set in a previous GC for a pool which had
59895:          * references we did not remove (e.g. from the compartment's ExecutableAllocator)
59895:          * and is still around. Forget we tried to destroy it in such cases.
59895:          */
59895:         pool->m_destroy = false;
59895:         pool->m_gcNumber = cx->runtime->gcNumber;
59895:         if (--counter == 0) {
59895:             pool->m_destroy = true;
59895:             counter = releaseInterval;
59895:         }
59895:     }
59895:     return pool->m_destroy;
59895: }
60170: #endif
59895: 
62077: /*
62077:  * This method marks pointers that cross compartment boundaries. It should be
64258:  * called only for per-compartment GCs, since full GCs naturally follow pointers
62077:  * across compartments.
62077:  */
62077: void
64258: JSCompartment::markCrossCompartmentWrappers(JSTracer *trc)
62077: {
64258:     JS_ASSERT(trc->context->runtime->gcCurrentCompartment);
64258: 
62077:     for (WrapperMap::Enum e(crossCompartmentWrappers); !e.empty(); e.popFront())
62077:         MarkValue(trc, e.front().key, "cross-compartment wrapper");
62077: }
62077: 
62060: void
59895: JSCompartment::sweep(JSContext *cx, uint32 releaseInterval)
54707: {
54707:     chunk = NULL;
64258: 
54707:     /* Remove dead wrappers from the table. */
54707:     for (WrapperMap::Enum e(crossCompartmentWrappers); !e.empty(); e.popFront()) {
60258:         JS_ASSERT_IF(IsAboutToBeFinalized(cx, e.front().key.toGCThing()) &&
60258:                      !IsAboutToBeFinalized(cx, e.front().value.toGCThing()),
55704:                      e.front().key.isString());
60258:         if (IsAboutToBeFinalized(cx, e.front().key.toGCThing()) ||
60258:             IsAboutToBeFinalized(cx, e.front().value.toGCThing())) {
54707:             e.removeFront();
54707:         }
55704:     }
54730: 
64242:     /* Remove dead empty shapes. */
64360:     if (emptyArgumentsShape && IsAboutToBeFinalized(cx, emptyArgumentsShape))
64242:         emptyArgumentsShape = NULL;
64360:     if (emptyBlockShape && IsAboutToBeFinalized(cx, emptyBlockShape))
64242:         emptyBlockShape = NULL;
64360:     if (emptyCallShape && IsAboutToBeFinalized(cx, emptyCallShape))
64242:         emptyCallShape = NULL;
64360:     if (emptyDeclEnvShape && IsAboutToBeFinalized(cx, emptyDeclEnvShape))
64242:         emptyDeclEnvShape = NULL;
64360:     if (emptyEnumeratorShape && IsAboutToBeFinalized(cx, emptyEnumeratorShape))
64242:         emptyEnumeratorShape = NULL;
64360:     if (emptyWithShape && IsAboutToBeFinalized(cx, emptyWithShape))
64242:         emptyWithShape = NULL;
64242: 
64377:     if (initialRegExpShape && IsAboutToBeFinalized(cx, initialRegExpShape))
64377:         initialRegExpShape = NULL;
67942:     if (initialStringShape && IsAboutToBeFinalized(cx, initialStringShape))
67942:         initialStringShape = NULL;
64377: 
59734: #ifdef JS_TRACER
72548:     if (hasTraceMonitor())
72548:         traceMonitor()->sweep(cx);
59734: #endif
59734: 
54730: #if defined JS_METHODJIT && defined JS_MONOIC
59895: 
59895:     /*
59895:      * The release interval is the frequency with which we should try to destroy
59895:      * executable pools by releasing all JIT code in them, zero to never destroy pools.
59895:      * Initialize counter so that the first pool will be destroyed, and eventually drive
59895:      * the amount of JIT code in never-used compartments to zero. Don't discard anything
59895:      * for compartments which currently have active stack frames.
59895:      */
59895:     uint32 counter = 1;
59895:     bool discardScripts = !active && releaseInterval != 0;
59895: 
54730:     for (JSCList *cursor = scripts.next; cursor != &scripts; cursor = cursor->next) {
54730:         JSScript *script = reinterpret_cast<JSScript *>(cursor);
59895:         if (script->hasJITCode()) {
68952:             mjit::ic::SweepCallICs(cx, script, discardScripts);
59895:             if (discardScripts) {
59895:                 if (script->jitNormal &&
59895:                     ScriptPoolDestroyed(cx, script->jitNormal, releaseInterval, counter)) {
59895:                     mjit::ReleaseScriptCode(cx, script);
59895:                     continue;
54730:                 }
59895:                 if (script->jitCtor &&
59895:                     ScriptPoolDestroyed(cx, script->jitCtor, releaseInterval, counter)) {
59895:                     mjit::ReleaseScriptCode(cx, script);
59895:                 }
59895:             }
59895:         }
59895:     }
59895: 
59895: #endif /* JS_METHODJIT && JS_MONOIC */
59895: 
59895:     active = false;
54707: }
54707: 
54707: void
54707: JSCompartment::purge(JSContext *cx)
54707: {
54730:     freeLists.purge();
61432:     dtoaCache.purge();
54730: 
59733:     /* Destroy eval'ed scripts. */
59733:     js_DestroyScriptsToGC(cx, this);
59733: 
59954:     nativeIterCache.purge();
64213:     toSourceCache.destroyIfConstructed();
59954: 
59733: #ifdef JS_TRACER
59733:     /*
59733:      * If we are about to regenerate shapes, we have to flush the JIT cache,
59733:      * which will eventually abort any current recording.
59733:      */
59733:     if (cx->runtime->gcRegenShapes)
72548:         if (hasTraceMonitor())
72548:             traceMonitor()->needFlush = JS_TRUE;
59733: #endif
59733: 
54707: #ifdef JS_METHODJIT
54707:     for (JSScript *script = (JSScript *)scripts.next;
54707:          &script->links != &scripts;
54707:          script = (JSScript *)script->links.next) {
55503:         if (script->hasJITCode()) {
54707: # if defined JS_POLYIC
54707:             mjit::ic::PurgePICs(cx, script);
54707: # endif
54707: # if defined JS_MONOIC
54707:             /*
59895:              * MICs do not refer to data which can be GC'ed and do not generate stubs
59895:              * which might need to be discarded, but are sensitive to shape regeneration.
54707:              */
54707:             if (cx->runtime->gcRegenShapes)
54707:                 mjit::ic::PurgeMICs(cx, script);
54707: # endif
54707:         }
54707:     }
54707: #endif
54707: }
59735: 
59735: MathCache *
59735: JSCompartment::allocMathCache(JSContext *cx)
59735: {
59735:     JS_ASSERT(!mathCache);
64559:     mathCache = cx->new_<MathCache>();
59735:     if (!mathCache)
59735:         js_ReportOutOfMemory(cx);
59735:     return mathCache;
59735: }
62574: 
72549: #ifdef JS_TRACER
72548: TraceMonitor *
72548: JSCompartment::allocAndInitTraceMonitor(JSContext *cx)
72548: {
72548:     JS_ASSERT(!traceMonitor_);
72548:     traceMonitor_ = cx->new_<TraceMonitor>();
72548:     if (!traceMonitor_)
72548:         return NULL;
72548:     if (!traceMonitor_->init(cx->runtime)) {
72548:         Foreground::delete_(traceMonitor_);
72548:         return NULL;
72548:     }
72548:     return traceMonitor_;
72548: }
72549: #endif
72548: 
62574: size_t
62574: JSCompartment::backEdgeCount(jsbytecode *pc) const
62574: {
62574:     if (BackEdgeMap::Ptr p = backEdgeTable.lookup(pc))
62574:         return p->value;
62574: 
62574:     return 0;
62574: }
62574: 
62574: size_t
62574: JSCompartment::incBackEdgeCount(jsbytecode *pc)
62574: {
64381:     if (BackEdgeMap::Ptr p = backEdgeTable.lookupWithDefault(pc, 0))
64381:         return ++p->value;
64381:     return 1;  /* oom not reported by backEdgeTable, so ignore. */
62574: }
62574: 
