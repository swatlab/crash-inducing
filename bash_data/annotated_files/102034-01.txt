 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 98983: 
102034: #ifndef GFX_2D_GLUE_H
102034: #define GFX_2D_GLUE_H
102034: 
 72424: 
 99511: #include "gfxPlatform.h"
 72424: #include "gfxRect.h"
 86660: #include "gfxMatrix.h"
 86660: #include "gfxContext.h"
 72424: #include "mozilla/gfx/Rect.h"
 86660: #include "mozilla/gfx/2D.h"
 72424: 
 72424: namespace mozilla {
 72424: namespace gfx {
 72424: class DrawTarget;
 72424: class SourceSurface;
 72424: class ScaledFont;
 72424: }
 72424: }
 72424: 
 72424: namespace mozilla {
 72424: namespace gfx {
 72424: 
 72424: inline Rect ToRect(const gfxRect &aRect)
 72424: {
 72424:   return Rect(Float(aRect.x), Float(aRect.y),
 72424:               Float(aRect.width), Float(aRect.height));
 72424: }
 72424: 
 86660: inline Color ToColor(const gfxRGBA &aRGBA)
 86660: {
 86660:   return Color(Float(aRGBA.r), Float(aRGBA.g),
 86660:                Float(aRGBA.b), Float(aRGBA.a));
 86660: }
 86660: 
 86660: inline Matrix ToMatrix(const gfxMatrix &aMatrix)
 86660: {
 86660:   return Matrix(Float(aMatrix.xx), Float(aMatrix.yx), Float(aMatrix.xy),
 86660:                 Float(aMatrix.yy), Float(aMatrix.x0), Float(aMatrix.y0));
 86660: }
 86660: 
 86660: inline Point ToPoint(const gfxPoint &aPoint)
 86660: {
 86660:   return Point(Float(aPoint.x), Float(aPoint.y));
 86660: }
 86660: 
 86660: inline Size ToSize(const gfxSize &aSize)
 86660: {
 86660:   return Size(Float(aSize.width), Float(aSize.height));
 86660: }
 86660: 
 86660: inline Filter ToFilter(gfxPattern::GraphicsFilter aFilter)
 86660: {
 86660:   switch (aFilter) {
 86660:   case gfxPattern::FILTER_NEAREST:
 86660:     return FILTER_POINT;
 86660:   default:
 86660:     return FILTER_LINEAR;
 86660:   }
 86660: }
 86660: 
 86660: inline gfxPattern::GraphicsFilter ThebesFilter(Filter aFilter)
 86660: {
 86660:   switch (aFilter) {
 86660:   case FILTER_POINT:
 86660:     return gfxPattern::FILTER_NEAREST;
 86660:   default:
 86660:     return gfxPattern::FILTER_BEST;
 86660:   }
 86660: }
 86660: 
 86660: inline ExtendMode ToExtendMode(gfxPattern::GraphicsExtend aExtend)
 86660: {
 86660:   switch (aExtend) {
 86660:   case gfxPattern::EXTEND_REPEAT:
 86660:     return EXTEND_REPEAT;
 86660:   case gfxPattern::EXTEND_REFLECT:
 86660:     return EXTEND_REFLECT;
 86660:   default:
 86660:     return EXTEND_CLAMP;
 86660:   }
 86660: }
 86660: 
 86660: inline gfxPattern::GraphicsExtend ThebesExtend(ExtendMode aExtend)
 86660: {
 86660:   switch (aExtend) {
 86660:   case EXTEND_REPEAT:
 86660:     return gfxPattern::EXTEND_REPEAT;
 86660:   case EXTEND_REFLECT:
 86660:     return gfxPattern::EXTEND_REFLECT;
 86660:   default:
 86660:     return gfxPattern::EXTEND_PAD;
 86660:   }
 86660: }
 86660: 
 86660: inline gfxPoint ThebesPoint(const Point &aPoint)
 86660: {
 86660:   return gfxPoint(aPoint.x, aPoint.y);
 86660: }
 86660: 
 86660: inline gfxSize ThebesSize(const Size &aSize)
 86660: {
 86660:   return gfxSize(aSize.width, aSize.height);
 86660: }
 86660: 
 88428: inline gfxIntSize ThebesIntSize(const IntSize &aSize)
 88428: {
 88428:   return gfxIntSize(aSize.width, aSize.height);
 88428: }
 88428: 
 86660: inline gfxRect ThebesRect(const Rect &aRect)
 72424: {
 72424:   return gfxRect(aRect.x, aRect.y, aRect.width, aRect.height);
 72424: }
 72424: 
 86660: inline gfxRGBA ThebesRGBA(const Color &aColor)
 86660: {
 86660:   return gfxRGBA(aColor.r, aColor.g, aColor.b, aColor.a);
 86660: }
 86660: 
 86660: inline gfxContext::GraphicsLineCap ThebesLineCap(CapStyle aStyle)
 86660: {
 86660:   switch (aStyle) {
 86660:   case CAP_BUTT:
 86660:     return gfxContext::LINE_CAP_BUTT;
 86660:   case CAP_ROUND:
 86660:     return gfxContext::LINE_CAP_ROUND;
 86660:   case CAP_SQUARE:
 86660:     return gfxContext::LINE_CAP_SQUARE;
 86660:   }
 90926:   MOZ_NOT_REACHED("Incomplete switch");
 86660: }
 86660: 
 86660: inline CapStyle ToCapStyle(gfxContext::GraphicsLineCap aStyle)
 86660: {
 86660:   switch (aStyle) {
 86660:   case gfxContext::LINE_CAP_BUTT:
 86660:     return CAP_BUTT;
 86660:   case gfxContext::LINE_CAP_ROUND:
 86660:     return CAP_ROUND;
 86660:   case gfxContext::LINE_CAP_SQUARE:
 86660:     return CAP_SQUARE;
 86660:   }
 90926:   MOZ_NOT_REACHED("Incomplete switch");
 86660: }
 86660: 
 86660: inline gfxContext::GraphicsLineJoin ThebesLineJoin(JoinStyle aStyle)
 86660: {
 86660:   switch (aStyle) {
 86660:   case JOIN_MITER:
 86660:     return gfxContext::LINE_JOIN_MITER;
 86660:   case JOIN_BEVEL:
 86660:     return gfxContext::LINE_JOIN_BEVEL;
 86660:   case JOIN_ROUND:
 86660:     return gfxContext::LINE_JOIN_ROUND;
 86660:   default:
 86660:     return gfxContext::LINE_JOIN_MITER;
 86660:   }
 86660: }
 86660: 
 86660: inline JoinStyle ToJoinStyle(gfxContext::GraphicsLineJoin aStyle)
 86660: {
 86660:   switch (aStyle) {
 86660:   case gfxContext::LINE_JOIN_MITER:
 86660:     return JOIN_MITER;
 86660:   case gfxContext::LINE_JOIN_BEVEL:
 86660:     return JOIN_BEVEL;
 86660:   case gfxContext::LINE_JOIN_ROUND:
 86660:     return JOIN_ROUND;
 86660:   }
 90926:   MOZ_NOT_REACHED("Incomplete switch");
 86660: }
 86660: 
 86660: inline gfxMatrix ThebesMatrix(const Matrix &aMatrix)
 86660: {
 86660:   return gfxMatrix(aMatrix._11, aMatrix._12, aMatrix._21,
 86660:                    aMatrix._22, aMatrix._31, aMatrix._32);
 86660: }
 86660: 
102034: inline gfxASurface::gfxImageFormat SurfaceFormatToImageFormat(SurfaceFormat aFormat)
102034: {
102034:   switch (aFormat) {
102034:   case FORMAT_B8G8R8A8:
102034:     return gfxASurface::ImageFormatARGB32;
102034:   case FORMAT_B8G8R8X8:
102034:     return gfxASurface::ImageFormatRGB24;
102034:   case FORMAT_R5G6B5:
102034:     return gfxASurface::ImageFormatRGB16_565;
102034:   case FORMAT_A8:
102034:     return gfxASurface::ImageFormatA8;
102034:   default:
102034:     return gfxASurface::ImageFormatUnknown;
102034:   }
102034: }
102034: 
 72424: inline gfxASurface::gfxContentType ContentForFormat(const SurfaceFormat &aFormat)
 72424: {
 72424:   switch (aFormat) {
 94474:   case FORMAT_R5G6B5:
 72424:   case FORMAT_B8G8R8X8:
 72424:     return gfxASurface::CONTENT_COLOR;
 72424:   case FORMAT_A8:
 72424:     return gfxASurface::CONTENT_ALPHA;
 86660:   case FORMAT_B8G8R8A8:
 72424:   default:
 72424:     return gfxASurface::CONTENT_COLOR_ALPHA;
 72424:   }
 72424: }
 72424: 
 86660: inline CompositionOp CompositionOpForOp(gfxContext::GraphicsOperator aOp)
 86660: {
 86660:   switch (aOp) {
 86660:   case gfxContext::OPERATOR_ADD:
 86660:     return OP_ADD;
 86660:   case gfxContext::OPERATOR_ATOP:
 86660:     return OP_ATOP;
 86660:   case gfxContext::OPERATOR_IN:
 86660:     return OP_IN;
 86660:   case gfxContext::OPERATOR_OUT:
 86660:     return OP_OUT;
 86660:   case gfxContext::OPERATOR_SOURCE:
 86660:     return OP_SOURCE;
 86660:   case gfxContext::OPERATOR_DEST_IN:
 86660:     return OP_DEST_IN;
 86660:   case gfxContext::OPERATOR_DEST_OUT:
 86660:     return OP_DEST_OUT;
 86660:   case gfxContext::OPERATOR_DEST_ATOP:
 86660:     return OP_DEST_ATOP;
 86660:   case gfxContext::OPERATOR_XOR:
 86660:     return OP_XOR;
 86660:   default:
 86660:     return OP_OVER;
 86660:   }
 86660: }
 86660: 
 86660: inline gfxContext::GraphicsOperator ThebesOp(CompositionOp aOp)
 86660: {
 86660:   switch (aOp) {
 86660:   case OP_ADD:
 86660:     return gfxContext::OPERATOR_ADD;
 86660:   case OP_ATOP:
 86660:     return gfxContext::OPERATOR_ATOP;
 86660:   case OP_IN:
 86660:     return gfxContext::OPERATOR_IN;
 86660:   case OP_OUT:
 86660:     return gfxContext::OPERATOR_OUT;
 86660:   case OP_SOURCE:
 86660:     return gfxContext::OPERATOR_SOURCE;
 86660:   case OP_DEST_IN:
 86660:     return gfxContext::OPERATOR_DEST_IN;
 86660:   case OP_DEST_OUT:
 86660:     return gfxContext::OPERATOR_DEST_OUT;
 86660:   case OP_DEST_ATOP:
 86660:     return gfxContext::OPERATOR_DEST_ATOP;
 86660:   case OP_XOR:
 86660:     return gfxContext::OPERATOR_XOR;
 86660:   default:
 86660:     return gfxContext::OPERATOR_OVER;
 86660:   }
 86660: }
 86660: 
 86660: }
 86660: }
102034: 
102034: #endif
