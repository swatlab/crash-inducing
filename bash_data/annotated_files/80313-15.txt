12766: <?xml version="1.0"?>
12766: 
12766: <!-- ***** BEGIN LICENSE BLOCK *****
12766:    - Version: MPL 1.1/GPL 2.0/LGPL 2.1
12766:    -
12766:    - The contents of this file are subject to the Mozilla Public License Version
12766:    - 1.1 (the "License"); you may not use this file except in compliance with
12766:    - the License. You may obtain a copy of the License at
12766:    - http://www.mozilla.org/MPL/
12766:    -
12766:    - Software distributed under the License is distributed on an "AS IS" basis,
12766:    - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
12766:    - for the specific language governing rights and limitations under the
12766:    - License.
12766:    -
12766:    - The Original Code is bug 364461 mochitest
12766:    -
12766:    - The Initial Developer of the Original Code is
12766:    - Sylvain Pasche <sylvain.pasche@gmail.com>.
12766:    - Portions created by the Initial Developer are Copyright (C) 2007
12766:    - the Initial Developer. All Rights Reserved.
12766:    -
12766:    - Contributor(s):
12766:    -   Andrew Schultz <ajschult@verizon.net>
12766:    -
12766:    - Alternatively, the contents of this file may be used under the terms of
12766:    - either the GNU General Public License Version 2 or later (the "GPL"), or
12766:    - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
12766:    - in which case the provisions of the GPL or the LGPL are applicable instead
12766:    - of those above. If you wish to allow use of your version of this file only
12766:    - under the terms of either the GPL or the LGPL, and not to allow others to
12766:    - use your version of this file under the terms of the MPL, indicate your
12766:    - decision by deleting the provisions above and replace them with the notice
12766:    - and other provisions required by the LGPL or the GPL. If you do not delete
12766:    - the provisions above, a recipient may use your version of this file under
12766:    - the terms of any one of the MPL, the GPL or the LGPL.
12766:    -
12766:    - ***** END LICENSE BLOCK ***** -->
12766: 
12766: <?xml-stylesheet href="chrome://global/skin" type="text/css"?>
12766: 
12766: <window id="396519Test"
12766:         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
12766:         width="600"
12766:         height="600"
12766:         onload="onLoad();"
12766:         title="396519 test">
12766: 
12766:   <script type="application/javascript"><![CDATA[
12766: 
12766:     const LISTEN_EVENTS = ["pageshow"];
12766: 
80313:     const Cc = Components.classes;
80313:     const Ci = Components.interfaces;
80313: 
12766:     var gBrowser;
12766:     var gTestCount = 0;
12766:     var gTestsIterator;
12766:     var gExpected = [];
12766: 
12766:     function ok(condition, message) {
12766:       window.opener.wrappedJSObject.SimpleTest.ok(condition, message);
12766:     }
12766:     function is(a, b, message) {
12766:       window.opener.wrappedJSObject.SimpleTest.is(a, b, message);
12766:     }
12766:     function finish() {
12766:       for each (let eventType in LISTEN_EVENTS) {
12766:         gBrowser.removeEventListener(eventType, eventListener, true);
12766:       }
12766:     
12766:       window.close();
12766:       window.opener.wrappedJSObject.SimpleTest.finish();
12766:     }
12766: 
12766:     function onLoad() {
12766:       gBrowser = document.getElementById("content");
12766: 
12766:       for each (let eventType in LISTEN_EVENTS) {
12766:         gBrowser.addEventListener(eventType, eventListener, true);
12766:       }
12766:       
12766:       gTestsIterator = testsIterator();
12766:       nextTest();
12766:     }
12766: 
12766:     function eventListener(event) {
12766:       // we're in pageshow, but we need to let that finish
12766:       // content eviction and saving happen during pageshow, so when doTest
12766:       // runs, we should should be in a testable state
12766:       setTimeout(doTest, 0);
12766:     }
12766: 
12766:     function doTest() {
12766:       var history = gBrowser.webNavigation.sessionHistory;
12766:       if (history.count == gExpected.length) {
12766:         for (var i=0; i<history.count; i++) {
12766:           var shEntry = history.getEntryAtIndex(i,false).
12766:                           QueryInterface(Components.interfaces.nsISHEntry);
12766:           is(!!shEntry.contentViewer, gExpected[i], "content viewer "+i+", test "+gTestCount);
12766:         }
80313: 
80313:         // Make sure none of the SHEntries share bfcache entries with one
80313:         // another.
80313:         for (var i = 0; i < history.count; i++) {
80313:           for (var j = 0; j < history.count; j++) {
80313:             if (j == i)
80313:               continue;
80313: 
80313:             let shentry1 = history.getEntryAtIndex(i, false)
80313:                                   .QueryInterface(Ci.nsISHEntry);
80313:             let shentry2 = history.getEntryAtIndex(j, false)
80313:                                   .QueryInterface(Ci.nsISHEntry);
80313:             ok(!shentry1.sharesDocumentWith(shentry2),
80313:                'Test ' + gTestCount + ': shentry[' + i + "] shouldn't " +
80313:                "share document with shentry[" + j + ']');
80313:           }
80313:         }
12766:       }
12766:       else {
12766:         is(history.count, gExpected.length, "Wrong history length in test "+gTestCount);
12766:       }
12766: 
12766:       setTimeout(nextTest, 0);
12766:     }
12766: 
12766:     function nextTest() {
12766:       try {
12766:         gTestsIterator.next();
12766:       } catch (err if err instanceof StopIteration) {
12766:         finish();
12766:       }
12766:     }
12766: 
12766:     function testsIterator() {
12766: 
12766:       // Tests 1 + 2:
12766:       //  Back/forward between two simple documents. Bfcache will be used.
12766: 
12766:       var test1Doc = "data:text/html,<html><head><title>test1</title></head>" +
12766:                      "<body>test1</body></html>";
12766: 
12766:       gTestCount++;
12766:       gExpected = [false];
12766:       gBrowser.loadURI(test1Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [true, false];
12766:       var test2Doc = test1Doc.replace(/1/,"2");
12766:       gBrowser.loadURI(test2Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [true, true, false];
12766:       gBrowser.loadURI(test1Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [true, true, true, false];
12766:       gBrowser.loadURI(test2Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, true, true, true, false];
12766:       gBrowser.loadURI(test1Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, false, true, true, true, false];
12766:       gBrowser.loadURI(test2Doc);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, false, true, true, false, true];
12766:       gBrowser.goBack();
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, false, true, true, true, false];
12766:       gBrowser.goForward();
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, false, true, true, true, false];
12766:       gBrowser.gotoIndex(1);
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, true, true, true, false, false];
12766:       gBrowser.goBack();
12766:       yield;
12766: 
12766:       gTestCount++;
12766:       gExpected = [false, false, true, true, false, false];
12766:       gBrowser.gotoIndex(5);
12766:       yield;
12766:     }
12766:   ]]></script>
12766: 
12766:   <browser type="content-primary" flex="1" id="content" src="about:blank"/>
12766: </window>
