   1: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is Mozilla Communicator client code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Alec Flett <alecf@netscape.com>
   1:  *   Brian Nesse <bnesse@netscape.com>
   1:  *   Benjamin Smedberg <benjamin@smedbergs.us>
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
   1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "nsIPrefBranch.idl"
   1: 
   1: interface nsIObserver;
   1: 
   1: /**
   1:  * nsIPrefBranch2 allows clients to observe changes to pref values.
   1:  *
   1:  * @status FROZEN
   1:  * @see nsIPrefBranch
   1:  */
   1: [scriptable, uuid(74567534-eb94-4b1c-8f45-389643bfc555)]
   1: interface nsIPrefBranch2 : nsIPrefBranch
   1: {
   1:   /**
   1:    * Add a preference change observer. On preference changes, the following
   1:    * arguments will be passed to the nsIObserver.observe() method:
   1:    *   aSubject - The nsIPrefBranch object (this)
   1:    *   aTopic   - The string defined by NS_PREFBRANCH_PREFCHANGE_TOPIC_ID
   1:    *   aData    - The name of the preference which has changed, relative to
   1:    *              the |root| of the aSubject branch.
   1:    *
   1:    * aSubject.get*Pref(aData) will get the new value of the modified
   1:    * preference. For example, if your observer is registered with
   1:    * addObserver("bar.", ...) on a branch with root "foo.", modifying
   1:    * the preference "foo.bar.baz" will trigger the observer, and aData
   1:    * parameter will be "bar.baz".
   1:    *
   1:    * @param aDomain   The preference on which to listen for changes. This can
   1:    *                  be the name of an entire branch to observe.
   1:    *                  e.g. Holding the "root" prefbranch and calling
   1:    *                  addObserver("foo.bar.", ...) will observe changes to
   1:    *                  foo.bar.baz and foo.bar.bzip
   1:    * @param aObserver The object to be notified if the preference changes.
   1:    * @param aHoldWeak true  Hold a weak reference to |aObserver|. The object
   1:    *                        must implement the nsISupportsWeakReference
   1:    *                        interface or this will fail.
   1:    *                  false Hold a strong reference to |aObserver|.
   1:    *
   1:    * @note
   1:    * Registering as a preference observer can open an object to potential
   1:    * cyclical references which will cause memory leaks. These cycles generally
   1:    * occur because an object both registers itself as an observer (causing the
   1:    * branch to hold a reference to the observer) and holds a reference to the
   1:    * branch object for the purpose of getting/setting preference values. There
   1:    * are 3 approaches which have been implemented in an attempt to avoid these
   1:    * situations.
   1:    * 1) The nsPrefBranch object supports nsISupportsWeakReference. Any consumer
   1:    *    may hold a weak reference to it instead of a strong one.
   1:    * 2) The nsPrefBranch object listens for xpcom-shutdown and frees all of the
   1:    *    objects currently in its observer list. This ensures that long lived
   1:    *    objects (services for example) will be freed correctly.
   1:    * 3) The observer can request to be held as a weak reference when it is
   1:    *    registered. This insures that shorter lived objects (say one tied to an
   1:    *    open window) will not fall into the cyclical reference trap.
   1:    *
8109:    * @note
8109:    * The list of registered observers may be changed during the dispatch of
8109:    * nsPref:changed notification. However, the observers are not guaranteed
8109:    * to be notified in any particular order, so you can't be sure whether the
8109:    * added/removed observer will be called during the notification when it
8109:    * is added/removed.
8109:    *
8109:    * @note
8109:    * It is possible to change preferences during the notification.
8109:    *
8109:    * @note
8109:    * It is not safe to change observers during this callback in Gecko 
8109:    * releases before 1.9. If you want a safe way to remove a pref observer,
8109:    * please use an nsITimer.
8109:    *
   1:    * @see nsIObserver
   1:    * @see removeObserver
   1:    */
   1:   void addObserver(in string aDomain, in nsIObserver aObserver,
   1:                    in boolean aHoldWeak);
   1: 
   1:   /**
   1:    * Remove a preference change observer.
   1:    *
   1:    * @param aDomain   The preference which is being observed for changes.
   1:    * @param aObserver An observer previously registered with addObserver().
   1:    *
   1:    * @note
   1:    * Note that you must call removeObserver() on the same nsIPrefBranch2
   1:    * instance on which you called addObserver() in order to remove aObserver;
   1:    * otherwise, the observer will not be removed.
   1:    *
   1:    * @see nsIObserver
   1:    * @see addObserver
   1:    */
   1:   void removeObserver(in string aDomain, in nsIObserver aObserver);
   1: };
   1: 
   1: %{C++
   1: 
   1: /**
   1:  * Notification sent when a preference changes.
   1:  */
   1: #define NS_PREFBRANCH_PREFCHANGE_TOPIC_ID "nsPref:changed"
   1: 
   1: %}
