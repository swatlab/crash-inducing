 78065: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 78065:  * vim: set ts=8 sw=4 et tw=78:
 78065:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 78065: 
 86483: #ifndef ScopeObject_inl_h___
 86483: #define ScopeObject_inl_h___
 78065: 
 86483: #include "ScopeObject.h"
 78065: 
 78065: namespace js {
 78065: 
 95101: inline
 95101: ScopeCoordinate::ScopeCoordinate(jsbytecode *pc)
100006:   : hops(GET_UINT16(pc)), binding(GET_UINT16(pc + 2))
 95101: {
 95101:     JS_ASSERT(JOF_OPTYPE(*pc) == JOF_SCOPECOORD);
 95101: }
 95101: 
100006: inline JSAtom *
100006: ScopeCoordinateAtom(JSScript *script, jsbytecode *pc)
100006: {
100006:     JS_ASSERT(JOF_OPTYPE(*pc) == JOF_SCOPECOORD);
100006:     return script->getAtom(GET_UINT32_INDEX(pc + 2 * sizeof(uint16_t)));
100006: }
100006: 
 86483: inline JSObject &
 86483: ScopeObject::enclosingScope() const
 86483: {
 86483:     return getReservedSlot(SCOPE_CHAIN_SLOT).toObject();
 86483: }
 86483: 
 86483: inline bool
 95355: ScopeObject::setEnclosingScope(JSContext *cx, HandleObject obj)
 86483: {
 99421:     RootedObject self(cx, this);
 95355:     if (!obj->setDelegate(cx))
 86483:         return false;
 95355:     self->setFixedSlot(SCOPE_CHAIN_SLOT, ObjectValue(*obj));
 86483:     return true;
 86483: }
 86483: 
100006: inline StackFrame *
100006: ScopeObject::maybeStackFrame() const
 99992: {
100006:     JS_ASSERT(!isStaticBlock() && !isWith());
100006:     return reinterpret_cast<StackFrame *>(JSObject::getPrivate());
 99992: }
 99992: 
 99992: inline void
100006: ScopeObject::setStackFrame(StackFrame *frame)
 99992: {
100006:     return setPrivate(frame);
 99992: }
 99992: 
 86483: /*static*/ inline size_t
 86483: ScopeObject::offsetOfEnclosingScope()
 86483: {
 86483:     return getFixedSlotOffset(SCOPE_CHAIN_SLOT);
 86483: }
 86483: 
 78065: inline bool
 78065: CallObject::isForEval() const
 78065: {
 86483:     JS_ASSERT(getReservedSlot(CALLEE_SLOT).isObjectOrNull());
 86483:     JS_ASSERT_IF(getReservedSlot(CALLEE_SLOT).isObject(),
 86483:                  getReservedSlot(CALLEE_SLOT).toObject().isFunction());
 86483:     return getReservedSlot(CALLEE_SLOT).isNull();
 78065: }
 78065: 
 78065: inline void
 78065: CallObject::setCallee(JSObject *callee)
 78065: {
 78065:     JS_ASSERT_IF(callee, callee->isFunction());
 86483:     setFixedSlot(CALLEE_SLOT, ObjectOrNullValue(callee));
 82129: }
 82129: 
 78065: inline JSObject *
 78065: CallObject::getCallee() const
 78065: {
 86483:     return getReservedSlot(CALLEE_SLOT).toObjectOrNull();
 78065: }
 78065: 
 78065: inline JSFunction *
 78065: CallObject::getCalleeFunction() const
 78065: {
 86483:     return getReservedSlot(CALLEE_SLOT).toObject().toFunction();
 78065: }
 78065: 
 86483: inline const Value &
100006: CallObject::arg(unsigned i) const
 78065: {
100006:     JS_ASSERT(i < getCalleeFunction()->nargs);
 78065:     return getSlot(RESERVED_SLOTS + i);
 78065: }
 78065: 
 78065: inline void
100006: CallObject::setArg(unsigned i, const Value &v)
 78065: {
100006:     JS_ASSERT(i < getCalleeFunction()->nargs);
 78065:     setSlot(RESERVED_SLOTS + i, v);
 78065: }
 78065: 
100006: inline void
100006: CallObject::initArgUnchecked(unsigned i, const Value &v)
100006: {
100006:     JS_ASSERT(i < getCalleeFunction()->nargs);
100006:     initSlotUnchecked(RESERVED_SLOTS + i, v);
100006: }
100006: 
 86483: inline const Value &
100006: CallObject::var(unsigned i) const
 78065: {
 78065:     JSFunction *fun = getCalleeFunction();
100006:     JS_ASSERT(fun->nargs == fun->script()->bindings.numArgs());
100006:     JS_ASSERT(i < fun->script()->bindings.numVars());
 78065:     return getSlot(RESERVED_SLOTS + fun->nargs + i);
 78065: }
 78065: 
 78065: inline void
100006: CallObject::setVar(unsigned i, const Value &v)
 78065: {
 78065:     JSFunction *fun = getCalleeFunction();
100006:     JS_ASSERT(fun->nargs == fun->script()->bindings.numArgs());
100006:     JS_ASSERT(i < fun->script()->bindings.numVars());
 78065:     setSlot(RESERVED_SLOTS + fun->nargs + i, v);
 78065: }
 78065: 
100006: inline void
100006: CallObject::initVarUnchecked(unsigned i, const Value &v)
100006: {
100006:     JSFunction *fun = getCalleeFunction();
100006:     JS_ASSERT(fun->nargs == fun->script()->bindings.numArgs());
100006:     JS_ASSERT(i < fun->script()->bindings.numVars());
100006:     initSlotUnchecked(RESERVED_SLOTS + fun->nargs + i, v);
100006: }
100006: 
100006: inline void
100006: CallObject::copyValues(unsigned nargs, Value *argv, unsigned nvars, Value *slots)
100006: {
100006:     JS_ASSERT(slotInRange(RESERVED_SLOTS + nargs + nvars, SENTINEL_ALLOWED));
100006:     copySlotRange(RESERVED_SLOTS, argv, nargs);
100006:     copySlotRange(RESERVED_SLOTS + nargs, slots, nvars);
100006: }
100006: 
 91146: inline HeapSlotArray
 78065: CallObject::argArray()
 78065: {
 86483:     DebugOnly<JSFunction*> fun = getCalleeFunction();
 78065:     JS_ASSERT(hasContiguousSlots(RESERVED_SLOTS, fun->nargs));
 91146:     return HeapSlotArray(getSlotAddress(RESERVED_SLOTS));
 78065: }
 78065: 
 91146: inline HeapSlotArray
 78065: CallObject::varArray()
 78065: {
 78065:     JSFunction *fun = getCalleeFunction();
 78065:     JS_ASSERT(hasContiguousSlots(RESERVED_SLOTS + fun->nargs,
 95100:                                  fun->script()->bindings.numVars()));
 91146:     return HeapSlotArray(getSlotAddress(RESERVED_SLOTS + fun->nargs));
 78065: }
 78065: 
 86483: inline uint32_t
 86483: NestedScopeObject::stackDepth() const
 86483: {
 86483:     return getReservedSlot(DEPTH_SLOT).toPrivateUint32();
 86483: }
 86483: 
 86483: inline JSObject &
 86483: WithObject::withThis() const
 86483: {
 86483:     return getReservedSlot(THIS_SLOT).toObject();
 86483: }
 86483: 
 86483: inline JSObject &
 86483: WithObject::object() const
 86483: {
 86483:     return *JSObject::getProto();
 86483: }
 86483: 
 86483: inline uint32_t
 86483: BlockObject::slotCount() const
 86483: {
 86483:     return propertyCount();
 86483: }
 86483: 
100006: inline HeapSlot &
 86483: BlockObject::slotValue(unsigned i)
 86483: {
 95099:     JS_ASSERT(i < slotCount());
 86483:     return getSlotRef(RESERVED_SLOTS + i);
 86483: }
 86483: 
 86483: inline StaticBlockObject *
 86483: StaticBlockObject::enclosingBlock() const
 86483: {
 86483:     JSObject *obj = getReservedSlot(SCOPE_CHAIN_SLOT).toObjectOrNull();
 86483:     return obj ? &obj->asStaticBlock() : NULL;
 86483: }
 86483: 
 86483: inline void
 86483: StaticBlockObject::setEnclosingBlock(StaticBlockObject *blockObj)
 86483: {
 86483:     setFixedSlot(SCOPE_CHAIN_SLOT, ObjectOrNullValue(blockObj));
 86483: }
 86483: 
 86483: inline void
 86483: StaticBlockObject::setStackDepth(uint32_t depth)
 86483: {
 86483:     JS_ASSERT(getReservedSlot(DEPTH_SLOT).isUndefined());
 91146:     initReservedSlot(DEPTH_SLOT, PrivateUint32Value(depth));
 86483: }
 86483: 
 86483: inline void
 86483: StaticBlockObject::setDefinitionParseNode(unsigned i, Definition *def)
 86483: {
 86483:     JS_ASSERT(slotValue(i).isUndefined());
100006:     slotValue(i).init(this, i, PrivateValue(def));
 86483: }
 86483: 
 86483: inline Definition *
 86483: StaticBlockObject::maybeDefinitionParseNode(unsigned i)
 86483: {
 86483:     Value v = slotValue(i);
 86483:     return v.isUndefined() ? NULL : reinterpret_cast<Definition *>(v.toPrivate());
 86483: }
 86483: 
 86483: inline void
 95099: StaticBlockObject::setAliased(unsigned i, bool aliased)
 86483: {
100006:     slotValue(i).init(this, i, BooleanValue(aliased));
100006:     if (aliased)
100006:         JSObject::setPrivate(reinterpret_cast<void *>(1));
 95099: }
 95099: 
 95099: inline bool
 95099: StaticBlockObject::isAliased(unsigned i)
 95099: {
 95099:     return slotValue(i).isTrue();
 86483: }
 86483: 
 95101: inline bool
100006: StaticBlockObject::needsClone() const
 98921: {
100006:     return JSObject::getPrivate() != NULL;
 98921: }
 98921: 
 98921: inline bool
 95101: StaticBlockObject::containsVarAtDepth(uint32_t depth)
 95101: {
 95101:     return depth >= stackDepth() && depth < stackDepth() + slotCount();
 95101: }
 95101: 
 86483: inline StaticBlockObject &
 86483: ClonedBlockObject::staticBlock() const
 86483: {
 86483:     return getProto()->asStaticBlock();
 86483: }
 86483: 
 86483: inline const Value &
100006: ClonedBlockObject::closedSlot(unsigned i)
 86483: {
100006:     JS_ASSERT(!maybeStackFrame());
 86483:     return slotValue(i);
 86483: }
 86483: 
 86483: }  /* namespace js */
 86483: 
 86483: inline js::ScopeObject &
 86483: JSObject::asScope()
 86483: {
 86483:     JS_ASSERT(isScope());
 86483:     return *static_cast<js::ScopeObject *>(this);
 86483: }
 86483: 
 86483: inline js::CallObject &
 86483: JSObject::asCall()
 86483: {
 86483:     JS_ASSERT(isCall());
 86483:     return *static_cast<js::CallObject *>(this);
 86483: }
 86483: 
 86483: inline js::DeclEnvObject &
 86483: JSObject::asDeclEnv()
 86483: {
 86483:     JS_ASSERT(isDeclEnv());
 86483:     return *static_cast<js::DeclEnvObject *>(this);
 86483: }
 86483: 
 86483: inline js::NestedScopeObject &
 86483: JSObject::asNestedScope()
 86483: {
 86483:     JS_ASSERT(isWith() || isBlock());
 86483:     return *static_cast<js::NestedScopeObject *>(this);
 86483: }
 86483: 
 86483: inline js::WithObject &
 86483: JSObject::asWith()
 86483: {
 86483:     JS_ASSERT(isWith());
 86483:     return *static_cast<js::WithObject *>(this);
 86483: }
 86483: 
 86483: inline js::BlockObject &
 86483: JSObject::asBlock()
 86483: {
 86483:     JS_ASSERT(isBlock());
 86483:     return *static_cast<js::BlockObject *>(this);
 86483: }
 86483: 
 86483: inline js::StaticBlockObject &
 86483: JSObject::asStaticBlock()
 86483: {
 86483:     JS_ASSERT(isStaticBlock());
 86483:     return *static_cast<js::StaticBlockObject *>(this);
 86483: }
 86483: 
 86483: inline js::ClonedBlockObject &
 86483: JSObject::asClonedBlock()
 86483: {
 86483:     JS_ASSERT(isClonedBlock());
 86483:     return *static_cast<js::ClonedBlockObject *>(this);
 78065: }
 78065: 
 98921: inline js::DebugScopeObject &
 98921: JSObject::asDebugScope()
 98921: {
 98921:     JS_ASSERT(isDebugScope());
 98921:     return *static_cast<js::DebugScopeObject *>(this);
 98921: }
 98921: 
 78065: #endif /* CallObject_inl_h___ */
