16647: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
16647: /* ***** BEGIN LICENSE BLOCK *****
16647:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
16647:  *
16647:  * The contents of this file are subject to the Mozilla Public License Version
16647:  * 1.1 (the "License"); you may not use this file except in compliance with
16647:  * the License. You may obtain a copy of the License at
16647:  * http://www.mozilla.org/MPL/
16647:  *
16647:  * Software distributed under the License is distributed on an "AS IS" basis,
16647:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
16647:  * for the specific language governing rights and limitations under the
16647:  * License.
16647:  *
16647:  * The Original Code is JavaScript Engine testing utilities.
16647:  *
16647:  * The Initial Developer of the Original Code is
16647:  * Mozilla Foundation.
16647:  * Portions created by the Initial Developer are Copyright (C) 2008
16647:  * the Initial Developer. All Rights Reserved.
16647:  *
16647:  * Contributor(s): Mike Shaver
16647:  *                 Brendan Eich
16647:  *                 Andreas Gal
16647:  *                 David Anderson
20329:  *                 Boris Zbarsky
20329:  *                 Brian Crowder
20329:  *                 Blake Kaplan
20329:  *                 Robert Sayre
20329:  *                 Vladimir Vukicevic
16647:  *
16647:  * Alternatively, the contents of this file may be used under the terms of
16647:  * either the GNU General Public License Version 2 or later (the "GPL"), or
16647:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
16647:  * in which case the provisions of the GPL or the LGPL are applicable instead
16647:  * of those above. If you wish to allow use of your version of this file only
16647:  * under the terms of either the GPL or the LGPL, and not to allow others to
16647:  * use your version of this file under the terms of the MPL, indicate your
16647:  * decision by deleting the provisions above and replace them with the notice
16647:  * and other provisions required by the GPL or the LGPL. If you do not delete
16647:  * the provisions above, a recipient may use your version of this file under
16647:  * the terms of any one of the MPL, the GPL or the LGPL.
16647:  *
16647:  * ***** END LICENSE BLOCK ***** */
16647: 
16647: var gTestfile = 'trace-test.js';
16647: //-----------------------------------------------------------------------------
16647: var BUGNUMBER = 'none';
16647: var summary = 'trace-capability mini-testsuite';
16647: 
16647: printBugNumber(BUGNUMBER);
16647: printStatus (summary);
16647: 
19318: jit(true);
19318: 
20329: /**
20329:  * A number of the tests in this file depend on the setting of
20329:  * HOTLOOP.  Define some constants up front, so they're easy to grep
20329:  * for.
20329:  */
20329: // The HOTLOOP constant we depend on; only readable from our stats
20329: // object in debug builds.
20329: const haveTracemonkey = !!(this.tracemonkey)
20329: const HOTLOOP = haveTracemonkey ? tracemonkey.HOTLOOP : 2;
20329: // The loop count at which we trace
20329: const RECORDLOOP = HOTLOOP;
20329: // The loop count at which we run the trace
20329: const RUNLOOP = HOTLOOP + 1;
20329: 
16647: var testName = null;
16647: if ("arguments" in this && arguments.length > 0)
16647:   testName = arguments[0];
16647: var fails = [], passes=[];
16647: 
20329: function jitstatHandler(f)
20329: {
20329:     if (!haveTracemonkey) {
20329: 	return;
20329:     }
20329:     // XXXbz this is a nasty hack, but I can't figure out a way to
20329:     // just use jitstats.tbl here
20329:     f("recorderStarted");
20329:     f("recorderAborted");
20329:     f("traceCompleted");
20329:     f("sideExitIntoInterpreter");
20329:     f("typeMapMismatchAtEntry");
20329:     f("returnToDifferentLoopHeader");
20329:     f("traceTriggered");
20329:     f("globalShapeMismatchAtEntry");
20329:     f("treesTrashed");
20329:     f("slotPromoted");
20329:     f("unstableLoopVariable");
20329:     f("breakLoopExits");
20329:     f("returnLoopExits");
20329: }
20329: 
16647: function test(f)
16647: {
20329:   if (!testName || testName == f.name) {
20329:     // Collect our jit stats
20329:     var localJITstats = {};
20329:     jitstatHandler(function(prop, local, global) {
20329:                      localJITstats[prop] = tracemonkey[prop];
20329:                    });
20329:     check(f.name, f(), f.expected, localJITstats, f.jitstats);
20329:   }
16647: }
16647: 
20329: function check(desc, actual, expected, oldJITstats, expectedJITstats)
16647: {
20329:   var pass = false;
20329:   if (expected == actual) {
20329:     pass = true;
20329:     jitstatHandler(function(prop) {
20329:                      if (expectedJITstats && prop in expectedJITstats &&
20329:                          expectedJITstats[prop] !=
20329:                            tracemonkey[prop] - oldJITstats[prop]) {
20329:                        pass = false;
20329:                      }
20329:                    });
20329:     if (pass) {
20329:       reportCompare(expected + '', actual + '', desc);
20249:       passes.push(desc);
20329:       return print(desc, ": passed");
20329:     }
20249:   }
20249: 
20329:   if (expected instanceof RegExp) {
20329:     pass = reportMatch(expected, actual + '', desc);
20329:     if (pass) {
20329:       jitstatHandler(function(prop) {
20329: 		       if (expectedJITstats && prop in expectedJITstats &&
20329: 			   expectedJITstats[prop] !=
20329: 			   tracemonkey[prop] - oldJITstats[prop]) {
20329: 			 pass = false;
20249: 		       }
20329: 		     });
20329:     }
20329:     if (pass) {
16647:       passes.push(desc);
20329:       return print(desc, ": passed");
20329:     }
16647:   }
20249: 
16647:   reportCompare(expected, actual, desc);
16647:   fails.push(desc);
20329:   var expectedStats = "";
20329:   if (expectedJITstats) {
20329:       jitstatHandler(function(prop) {
20329:                        if (prop in expectedJITstats) {
20329:                          if (expectedStats)
20329:                            expectedStats += " ";
20329:                          expectedStats +=
20329:                            prop + ": " + expectedJITstats[prop];
20329:                        }
20329:                      });
20329:   }
20329:   var actualStats = "";
20329:   if (expectedJITstats) {
20329:       jitstatHandler(function(prop) {
20329:                        if (prop in expectedJITstats) {
20329:                          if (actualStats)
20329:                            actualStats += " ";
20329:                          actualStats += prop + ": " + (tracemonkey[prop]-oldJITstats[prop]);
20329:                        }
20329:                      });
20329:   }
20329:   print(desc, ": FAILED: expected", typeof(expected), "(", expected, ")",
20329: 	(expectedStats ? " [" + expectedStats + "] " : ""),
20329: 	"!= actual",
20329: 	typeof(actual), "(", actual, ")",
20329: 	(actualStats ? " [" + actualStats + "] " : ""));
16647: }
16647: 
16647: function ifInsideLoop()
16647: {
16647:   var cond = true, intCond = 5, count = 0;
16647:   for (var i = 0; i < 100; i++) {
16647:     if (cond)
16647:       count++;
16647:     if (intCond)
16647:       count++;
16647:   }
16647:   return count;
16647: }
16647: ifInsideLoop.expected = 200;
16647: test(ifInsideLoop);
16647: 
16647: function bitwiseAnd_inner(bitwiseAndValue) {
16647:   for (var i = 0; i < 60000; i++)
16647:     bitwiseAndValue = bitwiseAndValue & i;
16647:   return bitwiseAndValue;
16647: }
16647: function bitwiseAnd()
16647: {
16647:   return bitwiseAnd_inner(12341234);
16647: }
16647: bitwiseAnd.expected = 0;
16647: test(bitwiseAnd);
16647: 
16647: if (!testName || testName == "bitwiseGlobal") {
16647:   bitwiseAndValue = Math.pow(2,32);
16647:   for (var i = 0; i < 60000; i++)
16647:     bitwiseAndValue = bitwiseAndValue & i;
16647:   check("bitwiseGlobal", bitwiseAndValue, 0);
16647: }
16647: 
16647: 
16647: function equalInt()
16647: {
19318:   var i1 = 55, one = 1, zero = 0, undef;
19318:   var o1 = { }, o2 = { };
19318:   var s = "5";
19318:   var hits = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
16647:   for (var i = 0; i < 5000; i++) {
16647:     if (i1 == 55) hits[0]++;
16647:     if (i1 != 56) hits[1]++;
16647:     if (i1 < 56)  hits[2]++;
16647:     if (i1 > 50)  hits[3]++;
16647:     if (i1 <= 60) hits[4]++;
16647:     if (i1 >= 30) hits[5]++;
16647:     if (i1 == 7)  hits[6]++;
16647:     if (i1 != 55) hits[7]++;
16647:     if (i1 < 30)  hits[8]++;
16647:     if (i1 > 90)  hits[9]++;
16647:     if (i1 <= 40) hits[10]++;
16647:     if (i1 >= 70) hits[11]++;
19318:     if (o1 == o2) hits[12]++;
19318:     if (o2 != null) hits[13]++;
19318:     if (s < 10) hits[14]++;
19318:     if (true < zero) hits[15]++;
19318:     if (undef > one) hits[16]++;
19318:     if (undef < zero) hits[17]++;
16647:   }
16647:   return hits.toString();
16647: }
19318: equalInt.expected = "5000,5000,5000,5000,5000,5000,0,0,0,0,0,0,0,5000,5000,0,0,0";
16647: test(equalInt);
16647: 
16647: var a;
16647: function setelem()
16647: {
16647:   a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
16647:   a = a.concat(a, a, a);
16647:   var l = a.length;
16647:   for (var i = 0; i < l; i++) {
16647:     a[i] = i;
16647:   }
16647:   return a.toString();
16647: }
16647: setelem.expected = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83";
16647: test(setelem);
16647: 
16647: function getelem_inner(a)
16647: {
16647:   var accum = 0;
16647:   var l = a.length;
16647:   for (var i = 0; i < l; i++) {
16647:     accum += a[i];
16647:   }
16647:   return accum;
16647: }
16647: function getelem()
16647: {
16647:   return getelem_inner(a);
16647: }
16647: getelem.expected = 3486;
16647: test(getelem);
16647: 
16647: globalName = 907;
16647: function name()
16647: {
16647:   var a = 0;
16647:   for (var i = 0; i < 100; i++)
16647:     a = globalName;
16647:   return a;
16647: }
16647: name.expected = 907;
16647: test(name);
16647: 
16647: var globalInt = 0;
16647: if (!testName || testName == "globalGet") {
16647:   for (var i = 0; i < 500; i++)
16647:     globalInt = globalName + i;
16647:   check("globalGet", globalInt, globalName + 499);
16647: }
16647: 
16647: if (!testName || testName == "globalSet") {
16647:   for (var i = 0; i < 500; i++)
16647:     globalInt = i;
16647:   check("globalSet", globalInt, 499);
16647: }
16647: 
16647: function arith()
16647: {
16647:   var accum = 0;
16647:   for (var i = 0; i < 100; i++) {
16647:     accum += (i * 2) - 1;
16647:   }
16647:   return accum;
16647: }
16647: arith.expected = 9800;
16647: test(arith);
16647: 
16647: function lsh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = 0x1 << n;
16647:   return r;
16647: }
16647: function lsh()
16647: {
16647:   return [lsh_inner(15),lsh_inner(55),lsh_inner(1),lsh_inner(0)];
16647: }
16647: lsh.expected = "32768,8388608,2,1";
16647: test(lsh);
16647: 
16647: function rsh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = 0x11010101 >> n;
16647:   return r;
16647: }
16647: function rsh()
16647: {
16647:   return [rsh_inner(8),rsh_inner(5),rsh_inner(35),rsh_inner(-1)];
16647: }
16647: rsh.expected = "1114369,8914952,35659808,0";
16647: test(rsh);
16647: 
16647: function ursh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = -55 >>> n;
16647:   return r;
16647: }
16647: function ursh() {
16647:   return [ursh_inner(8),ursh_inner(33),ursh_inner(0),ursh_inner(1)];
16647: }
16647: ursh.expected = "16777215,2147483620,4294967241,2147483620";
16647: test(ursh);
16647: 
16647: function doMath_inner(cos)
16647: {
16647:     var s = 0;
16647:     var sin = Math.sin;
16647:     for (var i = 0; i < 200; i++)
16647:         s = -Math.pow(sin(i) + cos(i * 0.75), 4);
16647:     return s;
16647: }
16647: function doMath() {
16647:   return doMath_inner(Math.cos);
16647: }
16647: doMath.expected = -0.5405549555611059;
16647: test(doMath);
16647: 
16647: function fannkuch() {
16647:    var count = Array(8);
16647:    var r = 8;
16647:    var done = 0;
16647:    while (done < 40) {
16647:       // write-out the first 30 permutations
16647:       done += r;
16647:       while (r != 1) { count[r - 1] = r; r--; }
16647:       while (true) {
16647:          count[r] = count[r] - 1;
16647:          if (count[r] > 0) break;
16647:          r++;
16647:       }
16647:    }
16647:    return done;
16647: }
16647: fannkuch.expected = 41;
16647: test(fannkuch);
16647: 
16647: function xprop()
16647: {
16647:   a = 0;
16647:   for (var i = 0; i < 20; i++)
16647:     a += 7;
16647:   return a;
16647: }
16647: xprop.expected = 140;
16647: test(xprop);
16647: 
16647: var a = 2;
16647: function getprop_inner(o2)
16647: {
16647:   var o = {a:5};
16647:   var t = this;
16647:   var x = 0;
16647:   for (var i = 0; i < 20; i++) {
16647:     t = this;
16647:     x += o.a + o2.a + this.a + t.a;
16647:   }
16647:   return x;
16647: }
16647: function getprop() {
16647:   return getprop_inner({a:9});
16647: }
16647: getprop.expected = 360;
16647: test(getprop);
16647: 
16647: function mod()
16647: {
16647:   var mods = [-1,-1,-1,-1];
16647:   var a = 9.5, b = -5, c = 42, d = (1/0);
16647:   for (var i = 0; i < 20; i++) {
16647:     mods[0] = a % b;
16647:     mods[1] = b % 1;
16647:     mods[2] = c % d;
16647:     mods[3] = c % a;
16647:     mods[4] = b % 0;
16647:   }
16647:   return mods.toString();
16647: }
16647: mod.expected = "4.5,0,42,4,NaN";
16647: test(mod);
16647: 
16647: function glob_f1() {
16647:   return 1;
16647: }
16647: function glob_f2() {
16647:   return glob_f1();
16647: }
16647: function call()
16647: {
16647:   var q1 = 0, q2 = 0, q3 = 0, q4 = 0, q5 = 0;
16647:   var o = {};
16647:   function f1() {
16647:       return 1;
16647:   }
16647:   function f2(f) {
16647:       return f();
16647:   }
16647:   o.f = f1;
16647:   for (var i = 0; i < 100; ++i) {
16647:       q1 += f1();
16647:       q2 += f2(f1);
16647:       q3 += glob_f1();
16647:       q4 += o.f();
16647:       q5 += glob_f2();
16647:   }
16647:   var ret = [q1, q2, q3, q4, q5];
16647:   return ret;
16647: }
16647: call.expected =  "100,100,100,100,100";
16647: test(call);
16647: 
16647: function setprop()
16647: {
16647:   var obj = { a:-1 };
16647:   var obj2 = { b:-1, a:-1 };
16647:   for (var i = 0; i < 20; i++) {
16647:     obj2.b = obj.a = i;
16647:   }
16647:   return [obj.a, obj2.a, obj2.b].toString();
16647: }
16647: setprop.expected =  "19,-1,19";
16647: test(setprop);
16647: 
16647: function testif() {
16647: 	var q = 0;
16647: 	for (var i = 0; i < 100; i++) {
16647: 		if ((i & 1) == 0)
16647: 			q++;
16647: 		else
16647: 			q--;
16647: 	}
16647:     return q;
16647: }
16647: testif.expected = "0";
16647: test(testif);
16647: 
19318: var globalinc = 0;
16647: function testincops(n) {
16647:   var i = 0, o = {p:0}, a = [0];
16647:   n = 100;
16647: 
16647:   for (i = 0; i < n; i++);
16647:   while (i-- > 0);
16647:   for (i = 0; i < n; ++i);
16647:   while (--i >= 0);
16647: 
19318:   for (o.p = 0; o.p < n; o.p++) globalinc++;
19318:   while (o.p-- > 0) --globalinc;
19318:   for (o.p = 0; o.p < n; ++o.p) ++globalinc;
19318:   while (--o.p >= 0) globalinc--;
16647: 
16647:   ++i; // set to 0
16647:   for (a[i] = 0; a[i] < n; a[i]++);
16647:   while (a[i]-- > 0);
16647:   for (a[i] = 0; a[i] < n; ++a[i]);
16647:   while (--a[i] >= 0);
16647: 
19318:   return [++o.p, ++a[i], globalinc].toString();
16647: }
19318: testincops.expected = "0,0,0";
16647: test(testincops);
16647: 
16647: function trees() {
16647:   var i = 0, o = [0,0,0];
16647:   for (i = 0; i < 100; ++i) {
16647:     if ((i & 1) == 0) o[0]++;
16647:     else if ((i & 2) == 0) o[1]++;
16647:     else o[2]++;
16647:   }
16647:   return o;
16647: }
16647: trees.expected = "50,25,25";
16647: test(trees);
16647: 
16647: function unboxint() {
16647:     var q = 0;
16647:     var o = [4];
16647:     for (var i = 0; i < 100; ++i)
16647: 	q = o[0] << 1;
16647:     return q;
16647: }
16647: unboxint.expected = "8";
16647: test(unboxint);
16647: 
16647: function strings()
16647: {
16647:   var a = [], b = -1;
16647:   var s = "abcdefghij", s2 = "a";
16647:   var f = "f";
16647:   var c = 0, d = 0, e = 0, g = 0;
16647:   for (var i = 0; i < 10; i++) {
19318:     a[i] = (s.substring(i, i+1) + s[i] + String.fromCharCode(s2.charCodeAt(0) + i)).concat(i) + i;
16647:     if (s[i] == f)
16647:       c++;
16647:     if (s[i] != 'b')
16647:       d++;
16647:     if ("B" > s2)
16647:       g++; // f already used
16647:     if (s2 < "b")
16647:       e++;
16647:     b = s.length;
16647:   }
16647:   return a.toString() + b + c + d + e + g;
16647: }
19318: strings.expected = "aaa00,bbb11,ccc22,ddd33,eee44,fff55,ggg66,hhh77,iii88,jjj991019100";
16647: test(strings);
16647: 
19318: function dependentStrings()
19318: {
19318:   var a = [];
19318:   var t = "abcdefghijklmnopqrst";
19318:   for (var i = 0; i < 10; i++) {
19318:     var s = t.substring(2*i, 2*i + 2);
19318:     a[i] = s + s.length;
19318:   }
19318:   return a.join("");
19318: }
19318: dependentStrings.expected = "ab2cd2ef2gh2ij2kl2mn2op2qr2st2";
19318: test(dependentStrings);
19318: 
16647: function stringConvert()
16647: {
16647:   var a = [];
16647:   var s1 = "F", s2 = "1.3", s3 = "5";
16647:   for (var i = 0; i < 10; i++) {
16647:     a[0] = 1 >> s1;
16647:     a[1] = 10 - s2;
16647:     a[2] = 15 * s3;
16647:     a[3] = s3 | 32;
19318:     a[4] = s2 + 60;
16647:     // a[5] = 9 + s3;
16647:     // a[6] = -s3;
16647:     a[7] = s3 & "7";
16647:     // a[8] = ~s3;
16647:   }
16647:   return a.toString();
16647: }
19318: stringConvert.expected = "1,8.7,75,37,1.360,,,5";
16647: test(stringConvert);
16647: 
16647: function orTestHelper(a, b, n)
16647: {
16647:   var k = 0;
16647:   for (var i = 0; i < n; i++) {
16647:     if (a || b)
16647:       k += i;
16647:   }
16647:   return k;
16647: }
16647: 
19318: var orNaNTest1, orNaNTest2;
19318: 
19318: orNaNTest1 = new Function("return orTestHelper(NaN, NaN, 10);");
19318: orNaNTest1.name = 'orNaNTest1';
19318: orNaNTest1.expected = '0';
19318: orNaNTest2 = new Function("return orTestHelper(NaN, 1, 10);");
19318: orNaNTest2.name = 'orNaNTest2';
19318: orNaNTest2.expected = '45';
19318: test(orNaNTest1);
19318: test(orNaNTest2);
19318: 
16647: function andTestHelper(a, b, n)
16647: {
16647:   var k = 0;
16647:   for (var i = 0; i < n; i++) {
16647:     if (a && b)
16647:       k += i;
16647:   }
16647:   return k;
16647: }
16647: 
16647: if (!testName || testName == "truthies") {
16647:   (function () {
16647:      var opsies   = ["||", "&&"];
16647:      var falsies  = [null, undefined, false, NaN, 0, ""];
16647:      var truthies = [{}, true, 1, 42, 1/0, -1/0, "blah"];
16647:      var boolies  = [falsies, truthies];
16647: 
16647:      // The for each here should abort tracing, so that this test framework
16647:      // relies only on the interpreter while the orTestHelper and andTestHelper
16647:      //  functions get trace-JITed.
16647:      for each (var op in opsies) {
16647:        for (var i in boolies) {
16647: 	 for (var j in boolies[i]) {
16647:            var x = uneval(boolies[i][j]);
16647:            for (var k in boolies) {
16647:              for (var l in boolies[k]) {
16647:                var y = uneval(boolies[k][l]);
16647:                var prefix = (op == "||") ? "or" : "and";
16647:                var f = new Function("return " + prefix + "TestHelper(" + x + "," + y + ",10)");
16647:                f.name = prefix + "Test(" + x + "," + y + ")";
16647:                f.expected = eval(x + op + y) ? 45 : 0;
16647:                test(f);
16647:              }
16647:            }
16647: 	 }
16647:        }
16647:      }
16647:    })();
16647: }
16647: 
16647: function nonEmptyStack1Helper(o, farble) {
16647:     var a = [];
16647:     var j = 0;
16647:     for (var i in o)
16647:         a[j++] = i;
16647:     return a.join("");
16647: }
16647: 
16647: function nonEmptyStack1() {
16647:     return nonEmptyStack1Helper({a:1,b:2,c:3,d:4,e:5,f:6,g:7,h:8}, "hi");
16647: }
16647: 
16647: nonEmptyStack1.expected = "abcdefgh";
16647: test(nonEmptyStack1);
16647: 
16647: function nonEmptyStack2()
16647: {
16647:   var a = 0;
16647:   for (var c in {a:1, b:2, c:3}) {
16647:     for (var i = 0; i < 10; i++)
16647:       a += i;
16647:   }
16647:   return String(a);
16647: }
16647: nonEmptyStack2.expected = "135";
16647: test(nonEmptyStack2);
16647: 
16647: function arityMismatchMissingArg(arg)
16647: {
16647:   for (var a = 0, i = 1; i < 10000; i *= 2) {
16647:     a += i;
16647:   }
16647:   return a;
16647: }
16647: arityMismatchMissingArg.expected = 16383;
16647: test(arityMismatchMissingArg);
16647: 
16647: function arityMismatchExtraArg()
16647: {
16647:   return arityMismatchMissingArg(1, 2);
16647: }
16647: arityMismatchExtraArg.expected = 16383;
16647: test(arityMismatchExtraArg);
16647: 
16647: function MyConstructor(i)
16647: {
16647:   this.i = i;
16647: }
16647: MyConstructor.prototype.toString = function() {return this.i + ""};
16647: 
16647: function newTest()
16647: {
16647:   var a = [];
16647:   for (var i = 0; i < 10; i++)
16647:     a[i] = new MyConstructor(i);
16647:   return a.join("");
16647: }
16647: newTest.expected = "0123456789";
16647: test(newTest);
16647: 
19318: // The following functions use a delay line of length 2 to change the value
19318: // of the callee without exiting the traced loop. This is obviously tuned to
19318: // match the current HOTLOOP setting of 2.
19318: function shapelessArgCalleeLoop(f, g, h, a)
16647: {
19318:   for (var i = 0; i < 10; i++) {
16647:     f(i, a);
19318:     f = g;
19318:     g = h;
19318:   }
16647: }
16647: 
19318: function shapelessVarCalleeLoop(f0, g, h, a)
16647: {
19318:   var f = f0;
19318:   for (var i = 0; i < 10; i++) {
19318:     f(i, a);
19318:     f = g;
19318:     g = h;
19318:   }
16647: }
16647: 
19318: function shapelessLetCalleeLoop(f0, g, h, a)
16647: {
16647:   for (var i = 0; i < 10; i++) {
19318:     let f = f0;
19318:     f(i, a);
19318:     f = g;
19318:     g = h;
16647:   }
16647: }
16647: 
19318: function shapelessUnknownCalleeLoop(n, f, g, h, a)
16647: {
16647:   for (var i = 0; i < 10; i++) {
19318:     (n || f)(i, a);
19318:     f = g;
19318:     g = h;
16647:   }
16647: }
16647: 
16647: function shapelessCalleeTest()
16647: {
16647:   var a = [];
19318: 
19318:   var helper = function (i, a) a[i] = i;
19318:   shapelessArgCalleeLoop(helper, helper, function (i, a) a[i] = -i, a);
19318: 
19318:   helper = function (i, a) a[10 + i] = i;
19318:   shapelessVarCalleeLoop(helper, helper, function (i, a) a[10 + i] = -i, a);
19318: 
19318:   helper = function (i, a) a[20 + i] = i;
19318:   shapelessLetCalleeLoop(helper, helper, function (i, a) a[20 + i] = -i, a);
19318: 
19318:   helper = function (i, a) a[30 + i] = i;
19318:   shapelessUnknownCalleeLoop(null, helper, helper, function (i, a) a[30 + i] = -i, a);
19318: 
16647:   try {
19318:     helper = {hack: 42};
19318:     shapelessUnknownCalleeLoop(null, helper, helper, helper, a);
16647:   } catch (e) {
19318:     if (e + "" != "TypeError: f is not a function")
16647:       print("shapelessUnknownCalleeLoop: unexpected exception " + e);
16647:   }
16647:   return a.join("");
16647: }
19318: shapelessCalleeTest.expected = "01-2-3-4-5-6-7-8-901-2-3-4-5-6-7-8-9012345678901-2-3-4-5-6-7-8-9";
16647: test(shapelessCalleeTest);
16647: 
16647: function typeofTest()
16647: {
16647:   var values = ["hi", "hi", "hi", null, 5, 5.1, true, undefined, /foo/, typeofTest, [], {}], types = [];
16647:   for (var i = 0; i < values.length; i++)
16647:     types[i] = typeof values[i];
16647:   return types.toString();
16647: }
16647: typeofTest.expected = "string,string,string,object,number,number,boolean,undefined,object,function,object,object";
16647: test(typeofTest);
16647: 
19318: function joinTest()
19318: {
19318:   var s = "";
19318:   var a = [];
19318:   for (var i = 0; i < 8; i++)
19318:     a[i] = [String.fromCharCode(97 + i)];
19318:   for (i = 0; i < 8; i++) {
19318:     for (var j = 0; j < 8; j++)
19318:       a[i][1 + j] = j;
19318:   }
19318:   for (i = 0; i < 8; i++)
19318:     s += a[i].join(",");
19318:   return s;
19318: }
19318: joinTest.expected = "a,0,1,2,3,4,5,6,7b,0,1,2,3,4,5,6,7c,0,1,2,3,4,5,6,7d,0,1,2,3,4,5,6,7e,0,1,2,3,4,5,6,7f,0,1,2,3,4,5,6,7g,0,1,2,3,4,5,6,7h,0,1,2,3,4,5,6,7";
19318: test(joinTest);
19318: 
19318: function arity1(x)
19318: {
19318:   return (x == undefined) ? 1 : 0;
19318: }
19318: function missingArgTest() {
19318:   var q;
19318:   for (var i = 0; i < 10; i++) {
19318:     q = arity1();
19318:   }
19318:   return q;
19318: }
19318: missingArgTest.expected = "1"
19318: test(missingArgTest);
19318: 
19318: JSON = function () {
19318:     return {
19318:         stringify: function stringify(value, whitelist) {
19318:             switch (typeof(value)) {
19318:               case "object":
19318:                 return value.constructor.name;
19318:             }
19318:         }
19318:     };
19318: }();
19318: 
19318: function missingArgTest2() {
19318:   var testPairs = [
19318:     ["{}", {}],
19318:     ["[]", []],
19318:     ['{"foo":"bar"}', {"foo":"bar"}],
19318:   ]
19318: 
19318:   var a = [];
19318:   for (var i=0; i < testPairs.length; i++) {
19318:     var s = JSON.stringify(testPairs[i][1])
19318:     a[i] = s;
19318:   }
19318:   return a.join(",");
19318: }
20249: missingArgTest2.expected = /(Object,Array,Object|{},\[\],{"foo":"bar"})/;
19318: test(missingArgTest2);
19318: 
19318: function deepForInLoop() {
19318:   // NB: the number of props set in C is arefully tuned to match HOTLOOP = 2.
19318:   function C(){this.p = 1, this.q = 2}
19318:   C.prototype = {p:1, q:2, r:3, s:4, t:5};
19318:   var o = new C;
19318:   var j = 0;
19318:   var a = [];
19318:   for (var i in o)
19318:     a[j++] = i;
19318:   return a.join("");
19318: }
19318: deepForInLoop.expected = "pqrst";
19318: test(deepForInLoop);
19318: 
19318: function nestedExit(x) {
19318:     var q = 0;
19318:     for (var i = 0; i < 10; ++i)
19318: 	if (x)
19318: 	    ++q;
19318: }
19318: function nestedExitLoop() {
19318:     for (var j = 0; j < 10; ++j)
19318: 	nestedExit(j < 7);
19318:     return "ok";
19318: }
19318: nestedExitLoop.expected = "ok";
19318: test(nestedExitLoop);
19318: 
19318: function bitsinbyte(b) {
19318:     var m = 1, c = 0;
19318:     while(m<0x100) {
19318:         if(b & m) c++;
19318:         m <<= 1;
19318:     }
19318:     return 1;
19318: }
19318: function TimeFunc(func) {
19318:     var x,y;
19318:     for(var y=0; y<256; y++) func(y);
19318: }
19318: function nestedExit2() {
19318:     TimeFunc(bitsinbyte);
19318:     return "ok";
19318: }
19318: nestedExit2.expected = "ok";
19318: test(nestedExit2);
19318: 
19318: function parsingNumbers() {
19318:     var s1 = "123";
19318:     var s1z = "123zzz";
19318:     var s2 = "123.456";
19318:     var s2z = "123.456zzz";
19318: 
19318:     var e1 = 123;
19318:     var e2 = 123.456;
19318: 
19318:     var r1, r1z, r2, r2z;
19318: 
19318:     for (var i = 0; i < 10; i++) {
19318: 	r1 = parseInt(s1);
19318: 	r1z = parseInt(s1z);
19318: 	r2 = parseFloat(s2);
19318: 	r2z = parseFloat(s2z);
19318:     }
19318: 
19318:     if (r1 == e1 && r1z == e1 && r2 == e2 && r2z == e2)
19318: 	return "ok";
19318:     return "fail";
19318: }
19318: parsingNumbers.expected = "ok";
19318: test(parsingNumbers);
19318: 
19318: function matchInLoop() {
19318:     var k = "hi";
19318:     for (var i = 0; i < 10; i++) {
19318:         var result = k.match(/hi/) != null;
19318:     }
19318:     return result;
19318: }
19318: matchInLoop.expected = true;
19318: test(matchInLoop);
19318: 
19318: function deep1(x) {
19318:     if (x > 90)
19318: 	return 1;
19318:     return 2;
19318: }
19318: function deep2() {
19318:     for (var i = 0; i < 100; ++i)
19318: 	deep1(i);
19318:     return "ok";
19318: }
19318: deep2.expected = "ok";
19318: test(deep2);
19318: 
19318: var merge_type_maps_x = 0, merge_type_maps_y = 0;
19318: function merge_type_maps() {
19318:     for (merge_type_maps_x = 0; merge_type_maps_x < 50; ++merge_type_maps_x)
19318:         if ((merge_type_maps_x & 1) == 1)
19318: 	    ++merge_type_maps_y;
19318:     return [merge_type_maps_x,merge_type_maps_y].join(",");
19318: }
19318: merge_type_maps.expected = "50,25";
19318: test(merge_type_maps)
19318: 
19318: function inner_double_outer_int() {
19318:     function f(i) {
19318: 	for (var m = 0; m < 20; ++m)
19318: 	    for (var n = 0; n < 100; n += i)
19318: 		;
19318: 	return n;
19318:     }
19318:     return f(.5);
19318: }
19318: inner_double_outer_int.expected = "100";
19318: test(inner_double_outer_int);
19318: 
19318: function newArrayTest()
19318: {
19318:   var a = [];
19318:   for (var i = 0; i < 10; i++)
19318:     a[i] = new Array();
19318:   return a.map(function(x) x.length).toString();
19318: }
19318: newArrayTest.expected="0,0,0,0,0,0,0,0,0,0";
19318: test(newArrayTest);
19318: 
19318: function stringSplitTest()
19318: {
19318:   var s = "a,b"
19318:   var a = null;
19318:   for (var i = 0; i < 10; ++i)
19318:     a = s.split(",");
19318:   return a.join();
19318: }
19318: stringSplitTest.expected="a,b";
19318: test(stringSplitTest);
19318: 
19318: function stringSplitIntoArrayTest()
19318: {
19318:   var s = "a,b"
19318:   var a = [];
19318:   for (var i = 0; i < 10; ++i)
19318:     a[i] = s.split(",");
19318:   return a.join();
19318: }
19318: stringSplitIntoArrayTest.expected="a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b";
19318: test(stringSplitIntoArrayTest);
19318: 
19318: function forVarInWith() {
19318:     function foo() ({notk:42});
19318:     function bar() ({p:1, q:2, r:3, s:4, t:5});
19318:     var o = foo();
19318:     var a = [];
19318:     with (o) {
19318:         for (var k in bar())
19318:             a[a.length] = k;
19318:     }
19318:     return a.join("");
19318: }
19318: forVarInWith.expected = "pqrst";
19318: test(forVarInWith);
19318: 
19318: function inObjectTest() {
19318:     var o = {p: 1, q: 2, r: 3, s: 4, t: 5};
19318:     var r = 0;
19318:     for (var i in o) {
19318:         if (!(i in o))
19318:             break;
19318:         if ((i + i) in o)
19318:             break;
19318:         ++r;
19318:     }
19318:     return r;
19318: }
19318: inObjectTest.expected = 5;
19318: test(inObjectTest);
19318: 
19318: function inArrayTest() {
19318:     var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
19318:     for (var i = 0; i < a.length; i++) {
19318:         if (!(i in a))
19318:             break;
19318:     }
19318:     return i;
19318: }
19318: inArrayTest.expected = 10;
19318: test(inArrayTest);
19318: 
19318: function innerLoopIntOuterDouble() {
19318:     var n = 10000, i=0, j=0, count=0, limit=0;
19318:     for (i = 1; i <= n; ++i) {
19318: 	limit = i * 1;
19318: 	for (j = 0; j < limit; ++j) {
19318: 	    ++count;
19318: 	}
19318:     }
19318:     return "" + count;
19318: }
19318: innerLoopIntOuterDouble.expected="50005000";
19318: test(innerLoopIntOuterDouble);
19318: 
19318: function outerline(){
19318:     var i=0;
19318:     var j=0;
19318: 
19318:     for (i = 3; i<= 100000; i+=2)
19318: 	for (j = 3; j < 1000; j+=2)
19318: 	    if ((i & 1) == 1)
19318: 		break;
19318:     return "ok";
19318: }
19318: outerline.expected="ok";
19318: test(outerline);
19318: 
19318: function addAccumulations(f) {
19318:   var a = f();
19318:   var b = f();
19318:   return a() + b();
19318: }
19318: 
19318: function loopingAccumulator() {
19318:   var x = 0;
19318:   return function () {
19318:     for (var i = 0; i < 10; ++i) {
19318:       ++x;
19318:     }
19318:     return x;
19318:   }
19318: }
19318: 
19318: function testLoopingAccumulator() {
19318: 	var x = addAccumulations(loopingAccumulator);
19318: 	return x;
19318: }
19318: testLoopingAccumulator.expected = 20;
19318: test(testLoopingAccumulator);
19318: 
19318: function testBranchingLoop() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       x += 10;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingLoop.expected = 110;
19318: test(testBranchingLoop);
19318: 
19318: function testBranchingUnstableLoop() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       x += 10.1;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingUnstableLoop.expected = 110.1;
19318: test(testBranchingUnstableLoop);
19318: 
19318: function testBranchingUnstableLoopCounter() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       i += 1.1;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingUnstableLoopCounter.expected = 99;
19318: test(testBranchingUnstableLoopCounter);
19318: 
19318: 
19318: function testBranchingUnstableObject() {
19318:   var x = {s: "a"};
19318:   var t = "";
19318:   for (var i=0; i < 100; ++i) {
19318:       if (i == 51)
19318:       {
19318:         x.s = 5;
19318:       }
19318:       t += x.s;
19318:   }
19318:   return t.length;
19318: }
19318: testBranchingUnstableObject.expected = 100;
19318: test(testBranchingUnstableObject);
19318: 
19318: function testArrayDensityChange() {
19318:   var x = [];
19318:   var count = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     x[i] = "asdf";
19318:   }
19318:   for (var i=0; i < x.length; ++i) {
19318:       if (i == 51)
19318:       {
19318:         x[199] = "asdf";
19318:       }
19318:       if (x[i])
19318:         count += x[i].length;
19318:   }
19318:   return count;
19318: }
19318: testArrayDensityChange.expected = 404;
19318: test(testArrayDensityChange);
19318: 
19318: function testDoubleToStr() {
19318:     var x = 0.0;
19318:     var y = 5.5;
19318:     for (var i = 0; i < 200; i++) {
19318:        x += parseFloat(y.toString());
19318:     }
19318:     return x;
19318: }
19318: testDoubleToStr.expected = 5.5*200;
19318: test(testDoubleToStr);
19318: 
19318: function testDecayingInnerLoop() {
19318:     var i, j, k = 10;
19318:     for (i = 0; i < 5000; ++i) {
19318: 	for (j = 0; j < k; ++j);
19318: 	--k;
19318:     }
19318:     return i;
19318: }
19318: testDecayingInnerLoop.expected = 5000;
19318: test(testDecayingInnerLoop);
19318: 
19318: function testContinue() {
19318:     var i;
19318:     var total = 0;
19318:     for (i = 0; i < 20; ++i) {
19318: 	if (i == 11)
19318: 	    continue;
19318: 	total++;
19318:     }
19318:     return total;
19318: }
19318: testContinue.expected = 19;
19318: test(testContinue);
19318: 
19318: function testContinueWithLabel() {
19318:     var i = 0;
19318:     var j = 20;
19318:     checkiandj :
19318:     while (i<10) {
19318: 	i+=1;
19318: 	checkj :
19318: 	while (j>10) {
19318: 	    j-=1;
19318: 	    if ((j%2)==0)
19318: 		continue checkj;
19318: 	}
19318:     }
19318:     return i + j;
19318: }
19318: testContinueWithLabel.expected = 20;
19318: test(testContinueWithLabel);
19318: 
19318: function testDivision() {
19318:     var a = 32768;
19318:     var b;
19318:     while (b !== 1) {
19318: 	b = a / 2;
19318: 	a = b;
19318:     }
19318:     return a;
19318: }
19318: testDivision.expected = 1;
19318: test(testDivision);
19318: 
19318: function testDivisionFloat() {
19318:     var a = 32768.0;
19318:     var b;
19318:     while (b !== 1) {
19318: 	b = a / 2.0;
19318: 	a = b;
19318:     }
19318:     return a === 1.0;
19318: }
19318: testDivisionFloat.expected = true;
19318: test(testDivisionFloat);
19318: 
19318: function testToUpperToLower() {
19318:     var s = "Hello", s1, s2;
19318:     for (i = 0; i < 100; ++i) {
19318: 	s1 = s.toLowerCase();
19318: 	s2 = s.toUpperCase();
19318:     }
19318:     return s1 + s2;
19318: }
19318: testToUpperToLower.expected = "helloHELLO";
19318: test(testToUpperToLower);
19318: 
19318: function testReplace2() {
19318:     var s = "H e l l o", s1;
19318:     for (i = 0; i < 100; ++i) {
19318: 	s1 = s.replace(" ", "");
19318:     }
19318:     return s1;
19318: }
19318: testReplace2.expected = "He l l o";
19318: test(testReplace2);
19318: 
19318: function testBitwise() {
19318:     var x = 10000;
19318:     var y = 123456;
19318:     var z = 987234;
19318:     for (var i = 0; i < 50; i++) {
19318:         x = x ^ y;
19318:         y = y | z;
19318:         z = ~x;
19318:     }
19318:     return x + y + z;
19318: }
19318: testBitwise.expected = -1298;
19318: test(testBitwise);
19318: 
19318: function testSwitch() {
19318:     var x = 0;
19318:     var ret = 0;
19318:     for (var i = 0; i < 100; ++i) {
19318:         switch (x) {
19318:             case 0:
19318:                 ret += 1;
19318:                 break;
19318:             case 1:
19318:                 ret += 2;
19318:                 break;
19318:             case 2:
19318:                 ret += 3;
19318:                 break;
19318:             case 3:
19318:                 ret += 4;
19318:                 break;
19318:             default:
19318:                 x = 0;
19318:         }
19318:         x++;
19318:     }
19318:     return ret;
19318: }
19318: testSwitch.expected = 226;
19318: test(testSwitch);
19318: 
19318: function testSwitchString() {
19318:     var x = "asdf";
19318:     var ret = 0;
19318:     for (var i = 0; i < 100; ++i) {
19318:         switch (x) {
19318:         case "asdf":
19318:             x = "asd";
19318:             ret += 1;
19318:             break;
19318:         case "asd":
19318:             x = "as";
19318:             ret += 2;
19318:             break;
19318:         case "as":
19318:             x = "a";
19318:             ret += 3;
19318:             break;
19318:         case "a":
19318:             x = "foo";
19318:             ret += 4;
19318:             break;
19318:         default:
19318:             x = "asdf";
19318:         }
19318:     }
19318:     return ret;
19318: }
19318: testSwitchString.expected = 200;
19318: test(testSwitchString);
19318: 
19318: function testNegZero1Helper(z) {
19318:     for (let j = 0; j < 5; ++j) { z = -z; }
19318:     return Math.atan2(0, -0) == Math.atan2(0, z);
19318: }
19318: 
19318: var testNegZero1 = function() { return testNegZero1Helper(0); }
19318: testNegZero1.expected = true;
19318: testNegZero1.name = 'testNegZero1';
19318: testNegZero1Helper(1);
19318: test(testNegZero1);
19318: 
19318: // No test case, just make sure this doesn't assert.
19318: function testNegZero2() {
19318:     var z = 0;
19318:     for (let j = 0; j < 5; ++j) { ({p: (-z)}); }
19318: }
19318: testNegZero2();
19318: 
19318: function testConstSwitch() {
19318:     var x;
19318:     for (var j=0;j<5;++j) { switch(1.1) { case NaN: case 2: } x = 2; }
19318:     return x;
19318: }
19318: testConstSwitch.expected = 2;
19318: test(testConstSwitch);
19318: 
20329: function testConstSwitch2() {
20329:     var x;
20329:     for (var j = 0; j < 4; ++j) { switch(0/0) { } }
20329:     return "ok";
20329: }
20329: testConstSwitch2.expected = "ok";
20329: test(testConstSwitch2);
20329: 
19318: function testConstIf() {
19318:     var x;
19318:     for (var j=0;j<5;++j) { if (1.1 || 5) { } x = 2;}
19318:     return x;
19318: }
19318: testConstIf.expected = 2;
19318: test(testConstIf);
19318: 
19318: function testTypeofHole() {
19318:   var a = new Array(6);
19318:   a[5] = 3;
19318:   for (var i = 0; i < 6; ++i)
19318:     a[i] = typeof a[i];
19318:   return a.join(",");
19318: }
19318: testTypeofHole.expected = "undefined,undefined,undefined,undefined,undefined,number"
19318: test(testTypeofHole);
19318: 
19318: function testNativeLog() {
19318:   var a = new Array(5);
19318:   for (var i = 0; i < 5; i++) {
19318:     a[i] = Math.log(Math.pow(Math.E, 10));
19318:   }
19318:   return a.join(",");
19318: }
19318: testNativeLog.expected = "10,10,10,10,10";
19318: test(testNativeLog);
19318: 
19318: function test_JSOP_ARGSUB() {
19318:     function f0() { return arguments[0]; }
19318:     function f1() { return arguments[1]; }
19318:     function f2() { return arguments[2]; }
19318:     function f3() { return arguments[3]; }
19318:     function f4() { return arguments[4]; }
19318:     function f5() { return arguments[5]; }
19318:     function f6() { return arguments[6]; }
19318:     function f7() { return arguments[7]; }
19318:     function f8() { return arguments[8]; }
19318:     function f9() { return arguments[9]; }
19318:     var a = [];
19318:     for (var i = 0; i < 10; i++) {
19318:         a[0] = f0('a');
19318:         a[1] = f1('a','b');
19318:         a[2] = f2('a','b','c');
19318:         a[3] = f3('a','b','c','d');
19318:         a[4] = f4('a','b','c','d','e');
19318:         a[5] = f5('a','b','c','d','e','f');
19318:         a[6] = f6('a','b','c','d','e','f','g');
19318:         a[7] = f7('a','b','c','d','e','f','g','h');
19318:         a[8] = f8('a','b','c','d','e','f','g','h','i');
19318:         a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19318:     }
19318:     return a.join("");
19318: }
19318: test_JSOP_ARGSUB.expected = "abcdefghij";
19318: test(test_JSOP_ARGSUB);
19318: 
19318: function test_JSOP_ARGCNT() {
19318:     function f0() { return arguments.length; }
19318:     function f1() { return arguments.length; }
19318:     function f2() { return arguments.length; }
19318:     function f3() { return arguments.length; }
19318:     function f4() { return arguments.length; }
19318:     function f5() { return arguments.length; }
19318:     function f6() { return arguments.length; }
19318:     function f7() { return arguments.length; }
19318:     function f8() { return arguments.length; }
19318:     function f9() { return arguments.length; }
19318:     var a = [];
19318:     for (var i = 0; i < 10; i++) {
19318:         a[0] = f0('a');
19318:         a[1] = f1('a','b');
19318:         a[2] = f2('a','b','c');
19318:         a[3] = f3('a','b','c','d');
19318:         a[4] = f4('a','b','c','d','e');
19318:         a[5] = f5('a','b','c','d','e','f');
19318:         a[6] = f6('a','b','c','d','e','f','g');
19318:         a[7] = f7('a','b','c','d','e','f','g','h');
19318:         a[8] = f8('a','b','c','d','e','f','g','h','i');
19318:         a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19318:     }
19318:     return a.join(",");
19318: }
19318: test_JSOP_ARGCNT.expected = "1,2,3,4,5,6,7,8,9,10";
19318: test(test_JSOP_ARGCNT);
19318: 
19318: function testNativeMax() {
19318:     var out = [], k;
19318:     for (var i = 0; i < 5; ++i) {
19318:         k = Math.max(k, i);
19318:     }
19318:     out.push(k);
19318: 
19318:     k = 0;
19318:     for (var i = 0; i < 5; ++i) {
19318:         k = Math.max(k, i);
19318:     }
19318:     out.push(k);
19318: 
19318:     for (var i = 0; i < 5; ++i) {
19318:         k = Math.max(0, -0);
19318:     }
19318:     out.push((1 / k) < 0);
19318:     return out.join(",");
19318: }
19318: testNativeMax.expected = "NaN,4,false";
19318: test(testNativeMax);
19318: 
20329: function testFloatArrayIndex() {
20329:     var a = [];
20329:     for (var i = 0; i < 10; ++i) {
20329: 	a[3] = 5;
20329: 	a[3.5] = 7;
20329:     }
20329:     return a[3] + "," + a[3.5];
20329: }
20329: testFloatArrayIndex.expected = "5,7";
20329: test(testFloatArrayIndex);
20329: 
20329: function testStrict() {
20329:     var n = 10, a = [];
20329:     for (var i = 0; i < 10; ++i) {
20329: 	a[0] = (n === 10);
20329: 	a[1] = (n !== 10);
20329: 	a[2] = (n === null);
20329: 	a[3] = (n == null);
20329:     }
20329:     return a.join(",");
20329: }
20329: testStrict.expected = "true,false,false,false";
20329: test(testStrict);
20329: 
20329: function testSetPropNeitherMissNorHit() {
20329:     for (var j = 0; j < 5; ++j) { if (({}).__proto__ = 1) { } }
20329:     return "ok";
20329: }
20329: testSetPropNeitherMissNorHit.expected = "ok";
20329: test(testSetPropNeitherMissNorHit);
20329: 
20329: function testPrimitiveConstructorPrototype() {
20329:     var f = function(){};
20329:     f.prototype = false;
20329:     for (let j=0;j<5;++j) { new f; }
20329:     return "ok";
20329: }
20329: testPrimitiveConstructorPrototype.expected = "ok";
20329: test(testPrimitiveConstructorPrototype);
20329: 
20329: function testSideExitInConstructor() {
20329:     var FCKConfig = {};
20329:     FCKConfig.CoreStyles =
20329: 	{
20329: 	    'Bold': { },
20329: 	    'Italic': { },
20329: 	    'FontFace': { },
20329: 	    'Size' :
20329: 	    {
20329: 		Overrides: [ ]
20329: 	    },
20329: 
20329: 	    'Color' :
20329: 	    {
20329: 		Element: '',
20329: 		Styles: {  },
20329: 		Overrides: [  ]
20329: 	    },
20329: 	    'BackColor': {
20329: 		Element : '',
20329: 		Styles : { 'background-color' : '' }
20329: 	    },
20329: 
20329: 	};
20329:     var FCKStyle = function(A) {
20329: 	A.Element;
20329:     };
20329: 
20329:     var pass = true;
20329:     for (var s in FCKConfig.CoreStyles) {
20329: 	var x = new FCKStyle(FCKConfig.CoreStyles[s]);
20329: 	if (!x) pass = false;
20329:     }
20329:     return pass;
20329: }
20329: testSideExitInConstructor.expected = true;
20329: test(testSideExitInConstructor);
20329: 
20329: function testNot() {
20329:     var a = new Object(), b = null, c = "foo", d = "", e = 5, f = 0, g = 5.5, h = -0, i = true, j = false, k = undefined;
20329:     var r;
20329:     for (var i = 0; i < 10; ++i) {
20329: 	r = [!a, !b, !c, !d, !e, !f, !g, !h, !i, !j, !k];
20329:     }
20329:     return r.join(",");
20329: }
20329: testNot.expected = "false,true,false,true,false,true,false,true,false,true,true";
20329: test(testNot);
20329: 
20329: function doTestDifferingArgc(a, b)
20329: {
20329:     var k = 0;
20329:     for (var i = 0; i < 10; i++)
20329:     {
20329:         k += i;
20329:     }
20329:     return k;
20329: }
20329: function testDifferingArgc()
20329: {
20329:     var x = 0;
20329:     x += doTestDifferingArgc(1, 2);
20329:     x += doTestDifferingArgc(1);
20329:     x += doTestDifferingArgc(1, 2, 3);
20329:     return x;
20329: }
20329: testDifferingArgc.expected = 45*3;
20329: test(testDifferingArgc);
20329: 
20329: function doTestMoreArgcThanNargs()
20329: {
20329:     var x = 0;
20329:     for (var i = 0; i < 10; i++)
20329:     {
20329:         x = x + arguments[3];
20329:     }
20329:     return x;
20329: }
20329: function testMoreArgcThanNargs()
20329: {
20329:     return doTestMoreArgcThanNargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
20329: }
20329: testMoreArgcThanNargs.expected = 4*10;
20329: test(testMoreArgcThanNargs);
20329: 
20329: // Test stack reconstruction after a nested exit
20329: function testNestedExitStackInner(j, counter) {
20329:   ++counter;
20329:   var b = 0;
20329:   for (var i = 1; i <= RUNLOOP; i++) {
20329:     ++b;
20329:     var a;
20329:     // Make sure that once everything has been traced we suddenly switch to
20329:     // a different control flow the first time we run the outermost tree,
20329:     // triggering a side exit.
20329:     if (j < RUNLOOP)
20329:       a = 1;
20329:     else
20329:       a = 0;
20329:     ++b;
20329:     b += a;
20329:   }
20329:   return counter + b;
20329: }
20329: function testNestedExitStackOuter() {
20329:   var counter = 0;
20329:   for (var j = 1; j <= RUNLOOP; ++j) {
20329:     for (var k = 1; k <= RUNLOOP; ++k) {
20329:       counter = testNestedExitStackInner(j, counter);
20329:     }
20329:   }
20329:   return counter;
20329: }
20329: testNestedExitStackOuter.expected = 81;
20329: testNestedExitStackOuter.jitstats = {
20329:     recorderStarted: 4,
20329:     recorderAborted: 0,
20329:     traceTriggered: 9
20329: };
20329: test(testNestedExitStackOuter);
20329: 
20329: function testHOTLOOPSize() {
20329:     return HOTLOOP > 1;
20329: }
20329: testHOTLOOPSize.expected = true;
20329: test(testHOTLOOPSize);
20329: 
20329: function testGlobalProtoAccess() {
20329:     return "ok";
20329: }
20329: this.__proto__.a = 3; for (var j = 0; j < 4; ++j) { [a]; }
20329: testGlobalProtoAccess.expected = "ok";
20329: test(testGlobalProtoAccess);
20329: 
20329: function testMatchStringObject() {
20329:     var a = new String("foo");
20329:     var b;
20329:     for (i = 0; i < 300; i++) {
20329: 	b = a.match(/bar/);
20329:     }
20329:     return b;
20329: }
20329: testMatchStringObject.expected = null;
20329: test(testMatchStringObject);
20329: 
20329: function innerSwitch(k)
20329: {
20329:     var m = 0;
20329: 
20329:     switch (k)
20329:     {
20329:     case 0:
20329:         m = 1;
20329:         break;
20329:     }
20329: 
20329:     return m;
20329: }
20329: function testInnerSwitchBreak()
20329: {
20329:     var r = new Array(5);
20329:     for (var i = 0; i < 5; i++)
20329:     {
20329:         r[i] = innerSwitch(0);
20329:     }
20329: 
20329:     return r.join(",");
20329: }
20329: testInnerSwitchBreak.expected = "1,1,1,1,1";
20329: test(testInnerSwitchBreak);
20329: 
20329: function testArrayNaNIndex()
20329: {
20329:     for (var j = 0; j < 4; ++j) { [this[NaN]]; }
20329:     for (var j = 0; j < 5; ++j) { if([1][-0]) { } }
20329:     return "ok";
20329: }
20329: testArrayNaNIndex.expected = "ok";
20329: test(testArrayNaNIndex);
20329: 
20329: function innerTestInnerMissingArgs(a,b,c,d)
20329: {
20329:         if (a) {
20329:         } else {
20329:         }
20329: }
20329: function doTestInnerMissingArgs(k)
20329: {
20329:     for (i = 0; i < 10; i++) {
20329:         innerTestInnerMissingArgs(k);
20329:     }
20329: }
20329: function testInnerMissingArgs()
20329: {
20329:     doTestInnerMissingArgs(1);
20329:     doTestInnerMissingArgs(0);
20329:     return 1;
20329: }
20329: testInnerMissingArgs.expected = 1;  //Expected: that we don't crash.
20329: test(testInnerMissingArgs);
20329: 
20329: function regexpLastIndex()
20329: {
20329:     var n = 0;
20329:     var re = /hi/g;
20329:     var ss = " hi hi hi hi hi hi hi hi hi hi";
20329:     for (var i = 0; i < 10; i++) {
20329:         // re.exec(ss);
20329:         n += (re.lastIndex > 0) ? 3 : 0;
20329:         re.lastIndex = 0;
20329:     }
20329:     return n;
20329: }
20329: regexpLastIndex.expected = 0; // 30;
20329: test(regexpLastIndex);
20329: 
20329: function testHOTLOOPCorrectness() {
20329:     var b = 0;
20329:     for (var i = 0; i < HOTLOOP; ++i) {
20329: 	++b;
20329:     }
20329:     return b;
20329: }
20329: testHOTLOOPCorrectness.expected = HOTLOOP;
20329: testHOTLOOPCorrectness.jitstats = {
20329:     recorderStarted: 1,
20329:     recorderAborted: 0,
20329:     traceTriggered: 0
20329: };
20329: // Change the global shape right before doing the test
20329: this.testHOTLOOPCorrectnessVar = 1;
20329: test(testHOTLOOPCorrectness);
20329: 
20329: function testRUNLOOPCorrectness() {
20329:     var b = 0;
20329:     for (var i = 0; i < RUNLOOP; ++i) {
20329: 	++b;
20329:     }
20329:     return b;
20329: }
20329: testRUNLOOPCorrectness.expected = RUNLOOP;
20329: testRUNLOOPCorrectness.jitstats = {
20329:     recorderStarted: 1,
20329:     recorderAborted: 0,
20329:     traceTriggered: 1
20329: };
20329: // Change the global shape right before doing the test
20329: this.testRUNLOOPCorrectnessVar = 1;
20329: test(testRUNLOOPCorrectness);
20329: 
20329: function testDateNow() {
20329:     // Accessing global.Date for the first time will change the global shape,
20329:     // so do it before the loop starts; otherwise we have to loop an extra time
20329:     // to pick things up.
20329:     var time = Date.now();
20329:     for (var j = 0; j < RUNLOOP; ++j) {
20329: 	time = Date.now();
20329:     }
20329:     return "ok";
20329: }
20329: testDateNow.expected = "ok";
20329: testDateNow.jitstats = {
20329:     recorderStarted: 1,
20329:     recorderAborted: 0,
20329:     traceTriggered: 1
20329: };
20329: test(testDateNow);
20329: 
20329: function testINITELEM()
20329: {
20329:     var x;
20329:     for (var i = 0; i < 10; ++i)
20329: 	x = { 0: 5, 1: 5 };
20329:     return x[0] + x[1];
20329: }
20329: testINITELEM.expected = 10;
20329: test(testINITELEM);
20329: 
20329: function testUndefinedBooleanCmp()
20329: {
20329:     var t = true, f = false, x = [];
20329:     for (var i = 0; i < 10; ++i) {
20329: 	x[0] = t == undefined;
20329: 	x[1] = t != undefined;
20329: 	x[2] = t === undefined;
20329: 	x[3] = t !== undefined;
20329: 	x[4] = t < undefined;
20329: 	x[5] = t > undefined;
20329: 	x[6] = t <= undefined;
20329: 	x[7] = t >= undefined;
20329: 	x[8] = f == undefined;
20329: 	x[9] = f != undefined;
20329: 	x[10] = f === undefined;
20329: 	x[11] = f !== undefined;
20329: 	x[12] = f < undefined;
20329: 	x[13] = f > undefined;
20329: 	x[14] = f <= undefined;
20329: 	x[15] = f >= undefined;
20329:     }
20329:     return x.join(",");
20329: }
20329: testUndefinedBooleanCmp.expected = "false,true,false,true,false,false,false,false,false,true,false,true,false,false,false,false";
20329: test(testUndefinedBooleanCmp);
20329: 
20329: function testConstantBooleanExpr()
20329: {
20329:     for (var j = 0; j < 3; ++j) { if(true <= true) { } }
20329:     return "ok";
20329: }
20329: testConstantBooleanExpr.expected = "ok";
20329: test(testConstantBooleanExpr);
20329: 
20329: function testNegativeGETELEMIndex()
20329: {
20329:     for (let i=0;i<3;++i) /x/[-4];
20329:     return "ok";
20329: }
20329: testNegativeGETELEMIndex.expected = "ok";
20329: test(testNegativeGETELEMIndex);
20329: 
20329: function doTestInvalidCharCodeAt(input)
20329: {
20329:     var q = "";
20329:     for (var i = 0; i < 10; i++)
20329:        q += input.charCodeAt(i);
20329:     return q;
20329: }
20329: function testInvalidCharCodeAt()
20329: {
20329:     return doTestInvalidCharCodeAt("");
20329: }
20329: testInvalidCharCodeAt.expected = "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN";
20329: test(testInvalidCharCodeAt);
20329: 
19318: jit(false);
19318: 
16647: /* Keep these at the end so that we can see the summary after the trace-debug spew. */
20329: if (0) {
16647:   print("\npassed:", passes.length && passes.join(","));
16647:   print("\nFAILED:", fails.length && fails.join(","));
20329: }
