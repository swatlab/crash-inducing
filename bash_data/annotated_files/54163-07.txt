52557: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52557:  * vim: set ts=4 sw=4 et tw=99:
52557:  *
52557:  * ***** BEGIN LICENSE BLOCK *****
52557:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52557:  *
52557:  * The contents of this file are subject to the Mozilla Public License Version
52557:  * 1.1 (the "License"); you may not use this file except in compliance with
52557:  * the License. You may obtain a copy of the License at
52557:  * http://www.mozilla.org/MPL/
52557:  *
52557:  * Software distributed under the License is distributed on an "AS IS" basis,
52557:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52557:  * for the specific language governing rights and limitations under the
52557:  * License.
52557:  *
52557:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52557:  * May 28, 2008.
52557:  *
52557:  * The Initial Developer of the Original Code is
52557:  *   Brendan Eich <brendan@mozilla.org>
52557:  *
52557:  * Contributor(s):
52557:  *   David Anderson <danderson@mozilla.com>
52557:  *   David Mandelin <dmandelin@mozilla.com>
52557:  *
52557:  * Alternatively, the contents of this file may be used under the terms of
52557:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52557:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52557:  * in which case the provisions of the GPL or the LGPL are applicable instead
52557:  * of those above. If you wish to allow use of your version of this file only
52557:  * under the terms of either the GPL or the LGPL, and not to allow others to
52557:  * use your version of this file under the terms of the MPL, indicate your
52557:  * decision by deleting the provisions above and replace them with the notice
52557:  * and other provisions required by the GPL or the LGPL. If you do not delete
52557:  * the provisions above, a recipient may use your version of this file under
52557:  * the terms of any one of the MPL, the GPL or the LGPL.
52557:  *
52557:  * ***** END LICENSE BLOCK ***** */
52557: 
52557: #ifndef jslogic_h__
52557: #define jslogic_h__
52557: 
52557: #include "MethodJIT.h"
52557: 
52557: namespace js {
52557: namespace mjit {
52557: namespace stubs {
52557: 
52704: void JS_FASTCALL This(VMFrame &f);
53023: void JS_FASTCALL ComputeThis(VMFrame &f);
52719: JSObject * JS_FASTCALL NewInitArray(VMFrame &f);
53531: JSObject * JS_FASTCALL NewInitObject(VMFrame &f);
52703: JSObject * JS_FASTCALL NewArray(VMFrame &f, uint32 len);
53168: void JS_FASTCALL Trap(VMFrame &f, jsbytecode *pc);
53395: void JS_FASTCALL Debugger(VMFrame &f, jsbytecode *pc);
53168: void JS_FASTCALL Interrupt(VMFrame &f, jsbytecode *pc);
52723: void JS_FASTCALL InitElem(VMFrame &f, uint32 last);
52735: void JS_FASTCALL InitProp(VMFrame &f, JSAtom *atom);
52783: void JS_FASTCALL InitMethod(VMFrame &f, JSAtom *atom);
52719: 
53840: void JS_FASTCALL HitStackQuota(VMFrame &f);
53840: void * JS_FASTCALL FixupArity(VMFrame &f, uint32 argc);
53840: void * JS_FASTCALL CompileFunction(VMFrame &f, uint32 argc);
53590: void JS_FASTCALL SlowNew(VMFrame &f, uint32 argc);
53590: void JS_FASTCALL SlowCall(VMFrame &f, uint32 argc);
53590: void * JS_FASTCALL UncachedNew(VMFrame &f, uint32 argc);
53590: void * JS_FASTCALL UncachedCall(VMFrame &f, uint32 argc);
53590: 
54163: /*
54163:  * Result struct for UncachedXHelper.
54163:  *
54163:  * These functions can have one of two results:
54163:  *
54163:  *   (1) The function was executed in the interpreter. Then all fields
54163:  *       are NULL.
54163:  *
54163:  *   (2) The function was not executed, and the function has been compiled
54163:  *       to JM native code. Then all fields are non-NULL.
54163:  */
54163: struct UncachedCallResult {
54163:     JSObject   *callee;       // callee object
54163:     JSFunction *fun;          // callee function
54163:     void       *codeAddr;     // code address of compiled callee function
54163: 
54163:     void init() {
54163:         callee = NULL;
54163:         fun = NULL;
54163:         codeAddr = NULL;
54163:     }        
54163: };
54163: 
54163: /*
54163:  * Helper functions for stubs and IC functions for calling functions.
54163:  * These functions either execute the function, return a native code
54163:  * pointer that can be used to call the function, or throw.
54163:  */
54163: void UncachedCallHelper(VMFrame &f, uint32 argc, UncachedCallResult *ucr);
54163: void UncachedNewHelper(VMFrame &f, uint32 argc, UncachedCallResult *ucr);
54163: 
53590: JSBool JS_FASTCALL NewObject(VMFrame &f, uint32 argc);
52772: void JS_FASTCALL Throw(VMFrame &f);
52847: void JS_FASTCALL PutCallObject(VMFrame &f);
53840: void JS_FASTCALL PutActivationObjects(VMFrame &f);
52873: void JS_FASTCALL GetCallObject(VMFrame &f);
52903: void JS_FASTCALL WrapPrimitiveThis(VMFrame &f);
53133: #if JS_MONOIC
53133: void * JS_FASTCALL InvokeTracer(VMFrame &f, uint32 index);
53133: #else
53133: void * JS_FASTCALL InvokeTracer(VMFrame &f);
53133: #endif
52617: 
53590: void * JS_FASTCALL LookupSwitch(VMFrame &f, jsbytecode *pc);
53590: void * JS_FASTCALL TableSwitch(VMFrame &f, jsbytecode *origPc);
53590: 
52789: void JS_FASTCALL BindName(VMFrame &f);
52826: JSObject * JS_FASTCALL BindGlobalName(VMFrame &f);
52819: void JS_FASTCALL SetName(VMFrame &f, JSAtom *atom);
52825: void JS_FASTCALL SetGlobalName(VMFrame &f, JSAtom *atom);
53511: void JS_FASTCALL SetGlobalNameDumb(VMFrame &f, JSAtom *atom);
52819: void JS_FASTCALL Name(VMFrame &f);
52741: void JS_FASTCALL GetProp(VMFrame &f);
52693: void JS_FASTCALL GetElem(VMFrame &f);
52771: void JS_FASTCALL CallElem(VMFrame &f);
52693: void JS_FASTCALL SetElem(VMFrame &f);
52762: void JS_FASTCALL Length(VMFrame &f);
52819: void JS_FASTCALL CallName(VMFrame &f);
52726: void JS_FASTCALL GetUpvar(VMFrame &f, uint32 index);
52825: void JS_FASTCALL GetGlobalName(VMFrame &f);
52746: 
52732: void JS_FASTCALL NameInc(VMFrame &f, JSAtom *atom);
52732: void JS_FASTCALL NameDec(VMFrame &f, JSAtom *atom);
52732: void JS_FASTCALL IncName(VMFrame &f, JSAtom *atom);
52732: void JS_FASTCALL DecName(VMFrame &f, JSAtom *atom);
52825: void JS_FASTCALL GlobalNameInc(VMFrame &f, JSAtom *atom);
52825: void JS_FASTCALL GlobalNameDec(VMFrame &f, JSAtom *atom);
52825: void JS_FASTCALL IncGlobalName(VMFrame &f, JSAtom *atom);
52825: void JS_FASTCALL DecGlobalName(VMFrame &f, JSAtom *atom);
52746: void JS_FASTCALL PropInc(VMFrame &f, JSAtom *atom);
52746: void JS_FASTCALL PropDec(VMFrame &f, JSAtom *atom);
52746: void JS_FASTCALL IncProp(VMFrame &f, JSAtom *atom);
52746: void JS_FASTCALL DecProp(VMFrame &f, JSAtom *atom);
52815: void JS_FASTCALL ElemInc(VMFrame &f);
52815: void JS_FASTCALL ElemDec(VMFrame &f);
52815: void JS_FASTCALL IncElem(VMFrame &f);
52815: void JS_FASTCALL DecElem(VMFrame &f);
52761: void JS_FASTCALL CallProp(VMFrame &f, JSAtom *atom);
52730: 
53591: void JS_FASTCALL DefFun(VMFrame &f, JSFunction *fun);
52727: JSObject * JS_FASTCALL DefLocalFun(VMFrame &f, JSFunction *fun);
53038: JSObject * JS_FASTCALL DefLocalFun_FC(VMFrame &f, JSFunction *fun);
52729: JSObject * JS_FASTCALL RegExp(VMFrame &f, JSObject *regex);
52730: JSObject * JS_FASTCALL Lambda(VMFrame &f, JSFunction *fun);
53128: JSObject * JS_FASTCALL LambdaForInit(VMFrame &f, JSFunction *fun);
53249: JSObject * JS_FASTCALL LambdaForSet(VMFrame &f, JSFunction *fun);
53249: JSObject * JS_FASTCALL LambdaJoinableForCall(VMFrame &f, JSFunction *fun);
53249: JSObject * JS_FASTCALL LambdaJoinableForNull(VMFrame &f, JSFunction *fun);
52775: JSObject * JS_FASTCALL FlatLambda(VMFrame &f, JSFunction *fun);
52778: void JS_FASTCALL Arguments(VMFrame &f);
53037: void JS_FASTCALL ArgSub(VMFrame &f, uint32 n);
52785: void JS_FASTCALL EnterBlock(VMFrame &f, JSObject *obj);
52785: void JS_FASTCALL LeaveBlock(VMFrame &f);
52557: 
52623: void JS_FASTCALL VpInc(VMFrame &f, Value *vp);
52623: void JS_FASTCALL VpDec(VMFrame &f, Value *vp);
52623: void JS_FASTCALL DecVp(VMFrame &f, Value *vp);
52623: void JS_FASTCALL IncVp(VMFrame &f, Value *vp);
53345: void JS_FASTCALL LocalInc(VMFrame &f, uint32 slot);
53345: void JS_FASTCALL LocalDec(VMFrame &f, uint32 slot);
53345: void JS_FASTCALL IncLocal(VMFrame &f, uint32 slot);
53345: void JS_FASTCALL DecLocal(VMFrame &f, uint32 slot);
52623: 
52652: JSBool JS_FASTCALL LessThan(VMFrame &f);
52652: JSBool JS_FASTCALL LessEqual(VMFrame &f);
52652: JSBool JS_FASTCALL GreaterThan(VMFrame &f);
52652: JSBool JS_FASTCALL GreaterEqual(VMFrame &f);
52679: JSBool JS_FASTCALL Equal(VMFrame &f);
52679: JSBool JS_FASTCALL NotEqual(VMFrame &f);
52652: 
52721: void JS_FASTCALL BitOr(VMFrame &f);
52721: void JS_FASTCALL BitXor(VMFrame &f);
52617: void JS_FASTCALL BitAnd(VMFrame &f);
52724: void JS_FASTCALL BitNot(VMFrame &f);
52685: void JS_FASTCALL Lsh(VMFrame &f);
52685: void JS_FASTCALL Rsh(VMFrame &f);
52725: void JS_FASTCALL Ursh(VMFrame &f);
52692: void JS_FASTCALL Add(VMFrame &f);
52692: void JS_FASTCALL Sub(VMFrame &f);
52692: void JS_FASTCALL Mul(VMFrame &f);
52692: void JS_FASTCALL Div(VMFrame &f);
52692: void JS_FASTCALL Mod(VMFrame &f);
52713: void JS_FASTCALL Neg(VMFrame &f);
52916: void JS_FASTCALL Pos(VMFrame &f);
52734: void JS_FASTCALL Not(VMFrame &f);
53513: void JS_FASTCALL StrictEq(VMFrame &f);
53513: void JS_FASTCALL StrictNe(VMFrame &f);
52617: 
52733: void JS_FASTCALL Iter(VMFrame &f, uint32 flags);
52737: void JS_FASTCALL IterNext(VMFrame &f);
52737: JSBool JS_FASTCALL IterMore(VMFrame &f);
52737: void JS_FASTCALL EndIter(VMFrame &f);
52773: void JS_FASTCALL ForName(VMFrame &f, JSAtom *atom);
52733: 
52686: JSBool JS_FASTCALL ValueToBoolean(VMFrame &f);
52738: JSString * JS_FASTCALL TypeOf(VMFrame &f);
52780: JSBool JS_FASTCALL InstanceOf(VMFrame &f);
52911: void JS_FASTCALL FastInstanceOf(VMFrame &f);
52781: void JS_FASTCALL ArgCnt(VMFrame &f);
52874: void JS_FASTCALL Unbrand(VMFrame &f);
52686: 
52557: }}} /* namespace stubs,mjit,js */
52557: 
52557: extern "C" void *
52557: js_InternalThrow(js::VMFrame &f);
52557: 
52557: #endif /* jslogic_h__ */
52557: 
