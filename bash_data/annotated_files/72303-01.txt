    1: /* cairo - a vector graphics library with display and print output
    1:  *
    1:  * Copyright © 2004 Red Hat, Inc.
    1:  * Copyright © 2005 Red Hat, Inc.
    1:  *
    1:  * This library is free software; you can redistribute it and/or
    1:  * modify it either under the terms of the GNU Lesser General Public
    1:  * License version 2.1 as published by the Free Software Foundation
    1:  * (the "LGPL") or, at your option, under the terms of the Mozilla
    1:  * Public License Version 1.1 (the "MPL"). If you do not alter this
    1:  * notice, a recipient may use your version of this file under either
    1:  * the MPL or the LGPL.
    1:  *
    1:  * You should have received a copy of the LGPL along with this library
    1:  * in the file COPYING-LGPL-2.1; if not, write to the Free Software
70960:  * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335, USA
    1:  * You should have received a copy of the MPL along with this library
    1:  * in the file COPYING-MPL-1.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License
    1:  * Version 1.1 (the "License"); you may not use this file except in
    1:  * compliance with the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
    1:  * OF ANY KIND, either express or implied. See the LGPL or the MPL for
    1:  * the specific language governing rights and limitations.
    1:  *
    1:  * The Original Code is the cairo graphics library.
    1:  *
    1:  * The Initial Developer of the Original Code is Red Hat, Inc.
    1:  *
    1:  * Contributor(s):
    1:  *      Keith Packard <keithp@keithp.com>
    1:  *	Graydon Hoare <graydon@redhat.com>
    1:  *	Carl Worth <cworth@cworth.org>
    1:  */
    1: 
    1: #ifndef CAIRO_CACHE_PRIVATE_H
    1: #define CAIRO_CACHE_PRIVATE_H
    1: 
 8452: #include "cairo-compiler-private.h"
 4133: #include "cairo-types-private.h"
    1: 
    1: /**
    1:  * cairo_cache_entry_t:
    1:  *
    1:  * A #cairo_cache_entry_t contains both a key and a value for
11708:  * #cairo_cache_t. User-derived types for #cairo_cache_entry_t must
11708:  * have a #cairo_cache_entry_t as their first field. For example:
    1:  *
    1:  * 	typedef _my_entry {
    1:  *	    cairo_cache_entry_t base;
    1:  *	    ... Remainder of key and value fields here ..
    1:  *	} my_entry_t;
    1:  *
    1:  * which then allows a pointer to my_entry_t to be passed to any of
11708:  * the #cairo_cache_t functions as follows without requiring a cast:
    1:  *
    1:  *	_cairo_cache_insert (cache, &my_entry->base, size);
    1:  *
    1:  * IMPORTANT: The caller is responsible for initializing
    1:  * my_entry->base.hash with a hash code derived from the key.  The
    1:  * essential property of the hash code is that keys_equal must never
    1:  * return %TRUE for two keys that have different hashes. The best hash
    1:  * code will reduce the frequency of two keys with the same code for
    1:  * which keys_equal returns %FALSE.
    1:  *
    1:  * The user must also initialize my_entry->base.size to indicate
    1:  * the size of the current entry. What units to use for size is
    1:  * entirely up to the caller, (though the same units must be used for
    1:  * the max_size parameter passed to _cairo_cache_create()). If all
    1:  * entries are close to the same size, the simplest thing to do is to
    1:  * just use units of "entries", (eg. set size==1 in all entries and
    1:  * set max_size to the number of entries which you want to be saved
    1:  * in the cache).
    1:  *
    1:  * Which parts of the entry make up the "key" and which part make up
    1:  * the value are entirely up to the caller, (as determined by the
    1:  * computation going into base.hash as well as the keys_equal
11708:  * function). A few of the #cairo_cache_t functions accept an entry which
    1:  * will be used exclusively as a "key", (indicated by a parameter name
    1:  * of key). In these cases, the value-related fields of the entry need
    1:  * not be initialized if so desired.
    1:  **/
    1: typedef struct _cairo_cache_entry {
72303:     uintptr_t hash;
    1:     unsigned long size;
    1: } cairo_cache_entry_t;
    1: 
32473: typedef cairo_bool_t (*cairo_cache_predicate_func_t) (const void *entry);
32473: 
32473: struct _cairo_cache {
32473:     cairo_hash_table_t *hash_table;
32473: 
32473:     cairo_cache_predicate_func_t predicate;
32473:     cairo_destroy_func_t entry_destroy;
32473: 
32473:     unsigned long max_size;
32473:     unsigned long size;
32473: 
32473:     int freeze_count;
32473: };
32473: 
    1: typedef cairo_bool_t
    1: (*cairo_cache_keys_equal_func_t) (const void *key_a, const void *key_b);
    1: 
    1: typedef void
    1: (*cairo_cache_callback_func_t) (void *entry,
    1: 				void *closure);
    1: 
32473: cairo_private cairo_status_t
32473: _cairo_cache_init (cairo_cache_t *cache,
32473: 	           cairo_cache_keys_equal_func_t keys_equal,
26419: 		   cairo_cache_predicate_func_t  predicate,
    1: 		   cairo_destroy_func_t	   entry_destroy,
    1: 		   unsigned long		   max_size);
    1: 
    1: cairo_private void
32473: _cairo_cache_fini (cairo_cache_t *cache);
    1: 
    1: cairo_private void
    1: _cairo_cache_freeze (cairo_cache_t *cache);
    1: 
    1: cairo_private void
    1: _cairo_cache_thaw (cairo_cache_t *cache);
    1: 
26419: cairo_private void *
    1: _cairo_cache_lookup (cairo_cache_t	  *cache,
26419: 		     cairo_cache_entry_t  *key);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_cache_insert (cairo_cache_t	 *cache,
    1: 		     cairo_cache_entry_t *entry);
    1: 
    1: cairo_private void
26419: _cairo_cache_remove (cairo_cache_t	 *cache,
26419: 		     cairo_cache_entry_t *entry);
26419: 
26419: cairo_private void
    1: _cairo_cache_foreach (cairo_cache_t		 *cache,
    1: 		      cairo_cache_callback_func_t cache_callback,
    1: 		      void			 *closure);
    1: 
    1: #endif
