    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: // Force references to all of the symbols that we want exported from
    1: // the dll that are located in the .lib files we link with
    1: 
    1: #ifndef XP_OS2
    1: #include <windows.h>
    1: #endif
    1: #include "nsXPCOMGlue.h"
    1: #include "nsVoidArray.h"
    1: #include "nsTArray.h"
    1: #include "nsIAtom.h"
    1: #include "nsFixedSizeAllocator.h"
    1: #include "nsRecyclingAllocator.h"
    1: #include "nsDeque.h"
    1: #include "nsTraceRefcnt.h"
    1: #include "nsTraceRefcntImpl.h"
    1: #include "nsXPIDLString.h"
    1: #include "nsIEnumerator.h"
    1: #include "nsEnumeratorUtils.h"
    1: #include "nsQuickSort.h"
    1: #include "nsString.h"
    1: #include "nsPrintfCString.h"
    1: #include "nsSupportsArray.h"
    1: #include "nsArrayEnumerator.h"
    1: #include "nsProxyRelease.h"
    1: #include "xpt_xdr.h"
    1: #include "xptcall.h"
    1: #include "nsILocalFile.h"
    1: #include "nsIGenericFactory.h"
    1: #include "nsIPipe.h"
    1: #include "nsStreamUtils.h"
    1: #include "nsWeakReference.h"
    1: #include "nsTextFormatter.h"
    1: #include "nsIStorageStream.h"
    1: #include "nsStringStream.h"
    1: #include "nsLinebreakConverter.h"
    1: #include "nsIBinaryInputStream.h"
    1: #include "nsIInterfaceRequestor.h"
    1: #include "nsIInterfaceRequestorUtils.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsStaticNameTable.h"
    1: #include "nsProcess.h"
    1: #include "nsStringEnumerator.h"
    1: #include "nsIInputStreamTee.h"
    1: #include "nsCheapSets.h"
    1: #if defined(DEBUG) && !defined(XP_OS2)
    1: #include "pure.h"
    1: #endif
    1: #include "nsHashKeys.h"
    1: #include "nsTHashtable.h"
    1: #include "pldhash.h"
    1: #include "nsVariant.h"
    1: #include "nsEscape.h"
    1: #include "nsStreamUtils.h"
    1: #include "nsNativeCharsetUtils.h"
    1: #include "nsInterfaceRequestorAgg.h"
    1: #include "nsHashPropertyBag.h"
    1: #include "nsXPCOMStrings.h"
    1: #include "nsStringBuffer.h"
    1: #include "nsCategoryCache.h"
    1: #include "nsCycleCollectionParticipant.h"
    1: #include "nsCycleCollector.h"
    1: #include "nsThreadUtils.h"
 1719: #include "nsTObserverArray.h"
28323: #include "nsWildCard.h"
27623: #include "mozilla/Mutex.h"
27623: #include "mozilla/Monitor.h"
27623: #include "mozilla/CondVar.h"
    1: 
20187: #if !defined(XP_OS2)
    1: #include "nsWindowsRegKey.h"
    1: #endif
    1: 
27615: using namespace mozilla;
27615: 
    1: class nsCStringContainer : private nsStringContainer_base { };
    1: class nsStringContainer : private nsStringContainer_base { };
    1: 
    1: void XXXNeverCalled()
    1: {
    1:     GRE_GetGREPathWithProperties(nsnull, 0, nsnull, 0, nsnull, 0);
    1:     nsTextFormatter::snprintf(nsnull,0,nsnull);
    1:     nsTextFormatter::smprintf(nsnull, nsnull);
    1:     nsTextFormatter::smprintf_free(nsnull);
    1:     nsVoidArray();
    1:     nsSmallVoidArray();
    1:     {
    1:       nsTArray<PRBool> array1(1), array2(1);
    1:       PRBool a, b, c;
    1:       a = b = c = PR_FALSE;
    1:       array1.AppendElement(a);
    1:       array2.InsertElementAt(b, 0);
    1:       array2.InsertElementAt(c, 0);
    1:       array1.AppendElements(array2);
    1:     }
 1719:     {
 1719:       nsTObserverArray<PRBool> dummyObserverArray;
 1719:       PRBool a = PR_FALSE;
 9536:       dummyObserverArray.AppendElement(a);
 9536:       dummyObserverArray.RemoveElement(a);
 1719:       dummyObserverArray.Clear();
 1719:     }
    1:     nsStringHashSet();
    1:     nsCStringHashSet();
    1:     nsInt32HashSet();
    1:     nsVoidHashSet();
    1:     nsCheapStringSet();
    1:     nsCheapInt32Set();
    1:     nsSupportsArray();
    1:     NS_GetNumberOfAtoms();
    1:     NS_NewPipe(nsnull, nsnull, 0, 0, PR_FALSE, PR_FALSE, nsnull);
    1:     NS_NewPipe2(nsnull, nsnull, PR_FALSE, PR_FALSE, 0, 0, nsnull);
    1:     NS_NewInputStreamReadyEvent(nsnull, nsnull, nsnull);
    1:     NS_NewOutputStreamReadyEvent(nsnull, nsnull, nsnull);
    1:     NS_AsyncCopy(nsnull, nsnull, nsnull, NS_ASYNCCOPY_VIA_READSEGMENTS, 0, nsnull, nsnull);
    1:     {
    1:       nsCString temp;
    1:       NS_ConsumeStream(nsnull, 0, temp);
    1:     }
    1:     NS_InputStreamIsBuffered(nsnull);
    1:     NS_OutputStreamIsBuffered(nsnull);
    1:     NS_CopySegmentToStream(nsnull, nsnull, nsnull, 0, 0, nsnull);
    1:     NS_CopySegmentToBuffer(nsnull, nsnull, nsnull, 0, 0, nsnull);
    1:     NS_DiscardSegment(nsnull, nsnull, nsnull, 0, 0, nsnull);
    1:     NS_WriteSegmentThunk(nsnull, nsnull, nsnull, 0, 0, 0);
    1:     NS_NewByteInputStream(nsnull, nsnull, 0, NS_ASSIGNMENT_COPY);
    1:     NS_NewCStringInputStream(nsnull, nsCString());
    1:     NS_NewStringInputStream(nsnull, nsString());
    1:     PL_DHashStubEnumRemove(nsnull, nsnull, nsnull, nsnull);
    1:     nsIDHashKey::HashKey(nsnull);
    1:     nsFixedSizeAllocator a;
    1:     nsRecyclingAllocator recyclingAllocator(2);
    1:     a.Init(0, 0, 0, 0, 0);
    1:     a.Alloc(0);
    1:     a.Free(0, 0);
    1:     nsDeque d(nsnull);
    1:     nsDequeIterator di(d);
    1:     nsTraceRefcnt::LogAddCOMPtr(nsnull, nsnull);
    1:     nsTraceRefcntImpl::DumpStatistics();
    1:     NS_NewEmptyEnumerator(nsnull);
    1:     NS_QuickSort(nsnull, 0, 0, nsnull, nsnull);
    1:     nsString();
    1:     NS_ProxyRelease(nsnull, nsnull, PR_FALSE);
    1:     XPT_DoString(nsnull, nsnull, nsnull);
    1:     XPT_DoHeader(nsnull, nsnull, nsnull);
    1: #if defined (DEBUG) && !defined (WINCE) && !defined(XP_OS2)
    1:     PurePrintf(0);
    1: #endif
    1:     NS_InvokeByIndex(nsnull, 0, 0, nsnull);
    1:     NS_NewGenericFactory(nsnull, nsnull);
    1:     NS_NewGenericModule2(nsnull, nsnull);
    1:     NS_GetWeakReference(nsnull);
    1:     nsCOMPtr<nsISupports> dummyFoo(do_GetInterface(nsnull));
    1:     NS_NewStorageStream(0,0, nsnull);
    1:     nsString foo;
    1:     nsPrintfCString bar("");
    1:     nsLinebreakConverter::ConvertStringLineBreaks(foo, 
    1:     nsLinebreakConverter::eLinebreakAny, nsLinebreakConverter::eLinebreakContent);
    1:     NS_NewLocalFile(EmptyString(), PR_FALSE, nsnull);
    1:     NS_NewNativeLocalFile(EmptyCString(), PR_FALSE, nsnull);
    1:     new nsProcess();
    1:     nsStaticCaseInsensitiveNameTable();
    1:     nsAutoString str1;
    1:     str1.AssignWithConversion(nsnull, 0);
    1:     nsCAutoString str2;
    1:     ToNewUnicode(str1);
    1:     ToNewUnicode(str2);
    1:     ToNewCString(str1);
    1:     ToNewCString(str2);
    1:     PL_DHashTableFinish(nsnull);
    1:     NS_NewInputStreamTee(nsnull, nsnull, nsnull);
    1:     nsCOMArray<nsISupports> dummyArray;
    1:     NS_NewArrayEnumerator(nsnull, dummyArray);
    1:     new nsVariant();
    1:     nsUnescape(nsnull);
    1:     nsEscape(nsnull, url_XAlphas);
23904:     nsTArray<nsString> array;
    1:     NS_NewStringEnumerator(nsnull, &array);
    1:     NS_NewAdoptingStringEnumerator(nsnull, &array);
24036:     nsTArray<nsCString> carray;
    1:     NS_NewUTF8StringEnumerator(nsnull, &carray);
    1:     NS_NewAdoptingUTF8StringEnumerator(nsnull, &carray);
    1:     nsVoidableString str3;
    1:     {
    1:       nsAdoptingCString foo, bar;
    1:       foo = bar;
    1:     }
    1:     {
    1:       nsAdoptingString foo, bar;
    1:       foo = bar;
    1:     }
    1:     NS_CopyNativeToUnicode(str2, str1);
    1:     NS_CopyUnicodeToNative(str1, str2);
    1:     {
    1:       nsID id;
    1:       CallCreateInstance(id, nsnull, id, nsnull);
    1:       CallCreateInstance("", nsnull, id, nsnull);
    1:       CallGetClassObject(id, id, nsnull);
    1:       CallGetClassObject("", id, nsnull);
    1: 
    1:       nsServiceManager::GetGlobalServiceManager(nsnull);
    1:     }
    1:     NS_NewInterfaceRequestorAggregation(nsnull, nsnull, nsnull);
    1:     NS_NewHashPropertyBag(nsnull);
    1:     nsDependentString depstring;
    1:     depstring.Rebind(nsnull, PRUint32(0));
    1:     nsDependentCString depcstring;
    1:     depcstring.Rebind(nsnull, PRUint32(0));
    1:     // nsStringAPI
    1:     nsCStringContainer sc1;
    1:     NS_CStringContainerInit(sc1);
    1:     NS_CStringContainerInit2(sc1, nsnull, 0, 0);
    1:     NS_CStringContainerFinish(sc1);
    1:     NS_CStringGetData(str2, nsnull, nsnull);
    1:     NS_CStringGetMutableData(str2, 0, nsnull);
    1:     NS_CStringSetData(str2, nsnull, 0);
    1:     NS_CStringSetDataRange(str2, 0, 0, nsnull, 0);
    1:     NS_CStringCopy(str2, str2);
    1:     NS_CStringCloneData(str2);
    1:     nsStringContainer sc2;
    1:     NS_StringContainerInit(sc2);
    1:     NS_StringContainerInit2(sc2, nsnull, 0, 0);
    1:     NS_StringContainerFinish(sc2);
    1:     NS_StringGetData(str1, nsnull, nsnull);
    1:     NS_StringGetMutableData(str1, 0, nsnull);
    1:     NS_StringSetData(str1, nsnull, 0);
    1:     NS_StringSetDataRange(str1, 0, 0, nsnull, 0);
    1:     NS_StringCopy(str1, str1);
    1:     NS_StringCloneData(str1);
    1:     NS_UTF16ToCString(str1, NS_CSTRING_ENCODING_ASCII, str2);
    1:     NS_CStringToUTF16(str2, NS_CSTRING_ENCODING_ASCII, str1);
    1: 
    1:     nsCategoryObserver catobs(nsnull, nsnull);
    1:     nsCategoryCache<nsILocalFile> catcache(nsnull);
    1: 
    1:     // nsStringBuffer.h
    1:     {
    1:       nsString x;
    1:       nsCString y;
    1:       nsStringBuffer b;
    1:       b.AddRef();
    1:       b.Release();
    1:       nsStringBuffer::Alloc(0);
    1:       nsStringBuffer::Realloc(nsnull, 0);
    1:       nsStringBuffer::FromString(x);
    1:       nsStringBuffer::FromString(y);
    1:       b.ToString(0, x);
    1:       b.ToString(0, y);
    1:     }
    1: 
 1829:     nsXPCOMCycleCollectionParticipant();
    1:     nsCycleCollector_collect();
36467:     sXPCOMHasLoadedNewDLLs = !sXPCOMHasLoadedNewDLLs;
36467:     NS_SetHasLoadedNewDLLs();
    1: 
20187: #if !defined(XP_OS2)
    1:     NS_NewWindowsRegKey(nsnull);
    1: #endif
    1: 
    1:     NS_NewThread(nsnull, nsnull);
    1:     NS_GetCurrentThread(nsnull);
    1:     NS_GetCurrentThread();
    1:     NS_GetMainThread(nsnull);
    1:     NS_DispatchToCurrentThread(nsnull);
    1:     NS_DispatchToMainThread(nsnull, 0);
    1:     NS_ProcessPendingEvents(nsnull, 0);
    1:     NS_HasPendingEvents(nsnull);
    1:     NS_ProcessNextEvent(nsnull, PR_FALSE);
27615:     Mutex theMutex("dummy");
27615:     Monitor theMonitor("dummy2");
27615:     CondVar theCondVar(theMutex, "dummy3");
28323: 
28323:     NS_WildCardValid((const char *)nsnull);
28323:     NS_WildCardValid((const PRUnichar *)nsnull);
28323:     NS_WildCardMatch((const char *)nsnull, (const char *)nsnull, PR_FALSE);
28323:     NS_WildCardMatch((const PRUnichar *)nsnull, (const PRUnichar *)nsnull, PR_FALSE);
    1: }
