     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 94984: #include "nsAccessibilityService.h"
 80467: 
     1: // NOTE: alphabetically ordered
 95352: #include "Accessible-inl.h"
 96920: #include "ApplicationAccessibleWrap.h"
 94984: #include "ARIAGridAccessibleWrap.h"
100057: #include "DocAccessible-inl.h"
 94984: #include "FocusManager.h"
101261: #include "HTMLCanvasAccessible.h"
100129: #include "HTMLElementAccessibles.h"
101055: #include "HTMLImageMapAccessible.h"
101056: #include "HTMLLinkAccessible.h"
 97985: #include "HTMLListAccessible.h"
101260: #include "HTMLSelectAccessible.h"
101616: #include "HTMLTableAccessibleWrap.h"
 99901: #include "HyperTextAccessibleWrap.h"
 89309: #include "nsAccessiblePivot.h"
 20536: #include "nsAccUtils.h"
 94984: #include "nsARIAMap.h"
106800: #include "nsEventShell.h"
 94984: #include "nsIAccessibleProvider.h"
 94984: #include "OuterDocAccessible.h"
124964: #include "Platform.h"
 87094: #include "Role.h"
 97643: #include "RootAccessibleWrap.h"
 67790: #include "States.h"
 76374: #include "Statistics.h"
118792: #include "TextLeafAccessibleWrap.h"
118792: 
118792: #ifdef MOZ_ACCESSIBILITY_ATK
118792: #include "AtkSocketAccessible.h"
118792: #endif
118792: 
 94984: #ifdef XP_WIN
138012: #include "mozilla/a11y/Compatibility.h"
118792: #include "HTMLWin32ObjectAccessible.h"
 94984: #endif
 40461: 
116102: #ifdef A11Y_LOG
 99203: #include "Logging.h"
 99203: #endif
 99203: 
105954: #ifdef MOZ_CRASHREPORTER
105954: #include "nsExceptionHandler.h"
105954: #endif
105954: 
     1: #include "nsIDOMDocument.h"
     1: #include "nsIDOMHTMLObjectElement.h"
     1: #include "nsIDOMXULElement.h"
 69187: #include "nsImageFrame.h"
     1: #include "nsIObserverService.h"
 79788: #include "nsLayoutUtils.h"
 70007: #include "nsNPAPIPluginInstance.h"
     1: #include "nsObjectFrame.h"
127422: #include "nsSVGPathGeometryFrame.h"
137522: #include "nsTreeBodyFrame.h"
137522: #include "nsTreeColumns.h"
137522: #include "nsTreeUtils.h"
 94984: #include "mozilla/dom/Element.h"
102366: #include "mozilla/Preferences.h"
 41540: #include "mozilla/Services.h"
138012: #include "mozilla/StaticPtr.h"
 94984: #include "mozilla/Util.h"
127012: #include "nsDeckFrame.h"
     1: 
     1: #ifdef MOZ_XUL
101616: #include "XULAlertAccessible.h"
101616: #include "XULColorPickerAccessible.h"
101616: #include "XULComboboxAccessible.h"
101616: #include "XULElementAccessibles.h"
101532: #include "XULFormControlAccessible.h"
101616: #include "XULListboxAccessibleWrap.h"
101616: #include "XULMenuAccessibleWrap.h"
101616: #include "XULSliderAccessible.h"
101616: #include "XULTabAccessible.h"
101616: #include "XULTreeGridAccessibleWrap.h"
     1: #endif
     1: 
 80467: using namespace mozilla;
 74618: using namespace mozilla::a11y;
 74618: 
 38359: ////////////////////////////////////////////////////////////////////////////////
121570: // Statics
121570: ////////////////////////////////////////////////////////////////////////////////
121570: 
121570: /**
121570:  * Return true if the element must be accessible.
121570:  */
121570: static bool
121570: MustBeAccessible(nsIContent* aContent, DocAccessible* aDocument)
121570: {
121570:   if (aContent->GetPrimaryFrame()->IsFocusable())
121570:     return true;
121570: 
128680:   uint32_t attrCount = aContent->GetAttrCount();
128680:   for (uint32_t attrIdx = 0; attrIdx < attrCount; attrIdx++) {
121570:     const nsAttrName* attr = aContent->GetAttrNameAt(attrIdx);
121570:     if (attr->NamespaceEquals(kNameSpaceID_None)) {
121570:       nsIAtom* attrAtom = attr->Atom();
121570:       nsDependentAtomString attrStr(attrAtom);
121570:       if (!StringBeginsWith(attrStr, NS_LITERAL_STRING("aria-")))
121570:         continue; // not ARIA
121570: 
121570:       // A global state or a property and in case of token defined.
121570:       uint8_t attrFlags = nsAccUtils::GetAttributeCharacteristics(attrAtom);
121570:       if ((attrFlags & ATTR_GLOBAL) && (!(attrFlags & ATTR_VALTOKEN) ||
121570:            nsAccUtils::HasDefinedARIAToken(aContent, attrAtom))) {
121570:         return true;
121570:       }
121570:     }
121570:   }
121570: 
121570:   // If the given ID is referred by relation attribute then create an accessible
121570:   // for it.
121570:   nsAutoString id;
121570:   if (nsCoreUtils::GetID(aContent, id) && !id.IsEmpty())
121570:     return aDocument->IsDependentID(id);
121570: 
121570:   return false;
121570: }
121570: 
121570: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsAccessibilityService
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: 
106838: nsAccessibilityService *nsAccessibilityService::gAccessibilityService = nullptr;
114315: ApplicationAccessible* nsAccessibilityService::gApplicationAccessible = nullptr;
 79445: bool nsAccessibilityService::gIsShutdown = true;
     1: 
 79384: nsAccessibilityService::nsAccessibilityService() :
123625:   DocManager(), FocusManager()
     1: {
     1: }
     1: 
     1: nsAccessibilityService::~nsAccessibilityService()
     1: {
 30820:   NS_ASSERTION(gIsShutdown, "Accessibility wasn't shutdown!");
106838:   gAccessibilityService = nullptr;
     1: }
     1: 
 43310: ////////////////////////////////////////////////////////////////////////////////
 43310: // nsISupports
     1: 
135305: NS_IMPL_ISUPPORTS_INHERITED4(nsAccessibilityService,
123625:                              DocManager,
 43310:                              nsIAccessibilityService,
 43310:                              nsIAccessibleRetrieval,
135305:                              nsIObserver,
135305:                              nsISelectionListener) // from SelectionManager
 38359: 
 38359: ////////////////////////////////////////////////////////////////////////////////
     1: // nsIObserver
     1: 
     1: NS_IMETHODIMP
     1: nsAccessibilityService::Observe(nsISupports *aSubject, const char *aTopic,
     1:                          const PRUnichar *aData)
     1: {
 43310:   if (!nsCRT::strcmp(aTopic, NS_XPCOM_SHUTDOWN_OBSERVER_ID))
 43310:     Shutdown();
 30820: 
     1:   return NS_OK;
     1: }
     1: 
 38359: // nsIAccessibilityService
 41476: void
 61201: nsAccessibilityService::NotifyOfAnchorJumpTo(nsIContent* aTargetNode)
 34455: {
 61201:   nsIDocument* documentNode = aTargetNode->GetCurrentDoc();
 61201:   if (documentNode) {
 99568:     DocAccessible* document = GetDocAccessible(documentNode);
 61201:     if (document)
 80036:       document->SetAnchorJump(aTargetNode);
 61201:   }
 34455: }
 34455: 
 38359: // nsIAccessibilityService
 54519: void
108991: nsAccessibilityService::FireAccessibleEvent(uint32_t aEvent,
 99648:                                             Accessible* aTarget)
 21255: {
 54519:   nsEventShell::FireEvent(aEvent, aTarget);
 21255: }
 21255: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsIAccessibilityService
     1: 
 99648: Accessible*
 54519: nsAccessibilityService::GetRootDocumentAccessible(nsIPresShell* aPresShell,
 79445:                                                   bool aCanCreate)
 54519: {
127020:   nsIPresShell* ps = aPresShell;
 54519:   nsIDocument* documentNode = aPresShell->GetDocument();
 54519:   if (documentNode) {
 54519:     nsCOMPtr<nsISupports> container = documentNode->GetContainer();
 54519:     nsCOMPtr<nsIDocShellTreeItem> treeItem(do_QueryInterface(container));
 54519:     if (treeItem) {
 54519:       nsCOMPtr<nsIDocShellTreeItem> rootTreeItem;
 54519:       treeItem->GetRootTreeItem(getter_AddRefs(rootTreeItem));
 54519:       if (treeItem != rootTreeItem) {
 54519:         nsCOMPtr<nsIDocShell> docShell(do_QueryInterface(rootTreeItem));
127381:         ps = docShell->GetPresShell();
 54519:       }
 54519: 
127020:       return aCanCreate ? GetDocAccessible(ps) : ps->GetDocAccessible();
 54519:     }
 54519:   }
106838:   return nullptr;
 54519: }
 54519: 
138012: #ifdef XP_WIN
138012: static StaticAutoPtr<nsTArray<nsCOMPtr<nsIContent> > > sPendingPlugins;
138012: static StaticAutoPtr<nsTArray<nsCOMPtr<nsITimer> > > sPluginTimers;
138012: 
138012: class PluginTimerCallBack MOZ_FINAL : public nsITimerCallback
138012: {
138012: public:
138012:   PluginTimerCallBack(nsIContent* aContent) : mContent(aContent) {}
138012: 
138012:   NS_DECL_ISUPPORTS
138012: 
138012:   NS_IMETHODIMP Notify(nsITimer* aTimer) MOZ_FINAL
138012:   {
138012:     nsIPresShell* ps = mContent->OwnerDoc()->GetShell();
138012:     if (ps) {
138012:       DocAccessible* doc = ps->GetDocAccessible();
138012:       if (doc) {
138012:         // Make sure that if we created an accessible for the plugin that wasn't
138012:         // a plugin accessible we remove it before creating the right accessible.
138012:         doc->RecreateAccessible(mContent);
138012:         sPluginTimers->RemoveElement(aTimer);
138012:         return NS_OK;
138012:       }
138012:     }
138012: 
138012:     // We couldn't get a doc accessible so presumably the document went away.
138012:     // In this case don't leak our ref to the content or timer.
138012:     sPendingPlugins->RemoveElement(mContent);
138012:     sPluginTimers->RemoveElement(aTimer);
138012:     return NS_OK;
138012:   }
138012: 
138012: private:
138012:   nsCOMPtr<nsIContent> mContent;
138012: };
138012: 
138012: NS_IMPL_ISUPPORTS1(PluginTimerCallBack, nsITimerCallback)
138012: #endif
138012: 
 99648: already_AddRefed<Accessible>
125637: nsAccessibilityService::CreatePluginAccessible(nsObjectFrame* aFrame,
 46338:                                                nsIContent* aContent,
124439:                                                Accessible* aContext)
 27515: {
124504:   // nsObjectFrame means a plugin, so we need to use the accessibility support
124504:   // of the plugin.
 46338:   if (aFrame->GetRect().IsEmpty())
106838:     return nullptr;
 27515: 
 69027: #if defined(XP_WIN) || defined(MOZ_ACCESSIBILITY_ATK)
 70007:   nsRefPtr<nsNPAPIPluginInstance> pluginInstance;
 70007:   if (NS_SUCCEEDED(aFrame->GetPluginInstance(getter_AddRefs(pluginInstance))) &&
 69027:       pluginInstance) {
 69027: #ifdef XP_WIN
138012:     if (!sPendingPlugins->Contains(aContent) &&
138012:         (Preferences::GetBool("accessibility.delay_plugins") ||
138012:          Compatibility::IsJAWS() || Compatibility::IsWE())) {
138012:       nsCOMPtr<nsITimer> timer = do_CreateInstance(NS_TIMER_CONTRACTID);
138012:       nsRefPtr<PluginTimerCallBack> cb = new PluginTimerCallBack(aContent);
138012:       timer->InitWithCallback(cb, Preferences::GetUint("accessibility.delay_plugin_time"),
138012:                               nsITimer::TYPE_ONE_SHOT);
138012:       sPluginTimers->AppendElement(timer);
138012:       sPendingPlugins->AppendElement(aContent);
138012:       return nullptr;
138012:     }
138012: 
138012:     // We need to remove aContent from the pending plugins here to avoid
138012:     // reentrancy.  When the timer fires it calls
138012:     // DocAccessible::ContentInserted() which does the work async.
138012:     sPendingPlugins->RemoveElement(aContent);
138012: 
 33872:     // Note: pluginPort will be null if windowless.
106838:     HWND pluginPort = nullptr;
     1:     aFrame->GetPluginPort(&pluginPort);
 33872: 
 99648:     Accessible* accessible =
124439:       new HTMLWin32ObjectOwnerAccessible(aContent, aContext->Document(),
124439:                                          pluginPort);
 89799:     NS_ADDREF(accessible);
 46338:     return accessible;
 69027: 
 69027: #elif MOZ_ACCESSIBILITY_ATK
 69027:     if (!AtkSocketAccessible::gCanEmbed)
106838:       return nullptr;
 69027: 
124504:     // Note this calls into the plugin, so crazy things may happen and aFrame
124504:     // may go away.
 69027:     nsCString plugId;
 69027:     nsresult rv = pluginInstance->GetValueFromPlugin(
 69027:       NPPVpluginNativeAccessibleAtkPlugId, &plugId);
 88338:     if (NS_SUCCEEDED(rv) && !plugId.IsEmpty()) {
 69027:       AtkSocketAccessible* socketAccessible =
124439:         new AtkSocketAccessible(aContent, aContext->Document(), plugId);
 69027: 
 89799:       NS_ADDREF(socketAccessible);
 69027:       return socketAccessible;
 69027:     }
 69027: #endif
     1:   }
     1: #endif
     1: 
124504:   return nullptr;
  3151: }
  3151: 
 43765: void
127012: nsAccessibilityService::DeckPanelSwitched(nsIPresShell* aPresShell,
127012:                                           nsIContent* aDeckNode,
127012:                                           nsIFrame* aPrevBoxFrame,
127012:                                           nsIFrame* aCurrentBoxFrame)
127012: {
127012:   // Ignore tabpanels elements (a deck having an accessible) since their
127012:   // children are accessible not depending on selected tab.
127012:   DocAccessible* document = GetDocAccessible(aPresShell);
127012:   if (!document || document->HasAccessible(aDeckNode))
127012:     return;
127012: 
127012:   if (aPrevBoxFrame) {
127012:     nsIContent* panelNode = aPrevBoxFrame->GetContent();
127012: #ifdef A11Y_LOG
127012:     if (logging::IsEnabled(logging::eTree)) {
127012:       logging::MsgBegin("TREE", "deck panel unselected");
127012:       logging::Node("container", panelNode);
127012:       logging::Node("content", aDeckNode);
127012:       logging::MsgEnd();
127012:     }
127012: #endif
127012: 
127012:     document->ContentRemoved(aDeckNode, panelNode);
127012:   }
127012: 
127012:   if (aCurrentBoxFrame) {
127012:     nsIContent* panelNode = aCurrentBoxFrame->GetContent();
127012: #ifdef A11Y_LOG
127012:     if (logging::IsEnabled(logging::eTree)) {
127012:       logging::MsgBegin("TREE", "deck panel selected");
127012:       logging::Node("container", panelNode);
127012:       logging::Node("content", aDeckNode);
127012:       logging::MsgEnd();
127012:     }
127012: #endif
127012: 
127012:     document->ContentInserted(aDeckNode, panelNode, panelNode->GetNextSibling());
127012:   }
127012: }
127012: 
127012: void
 56292: nsAccessibilityService::ContentRangeInserted(nsIPresShell* aPresShell,
 56292:                                              nsIContent* aContainer,
 56292:                                              nsIContent* aStartChild,
 56292:                                              nsIContent* aEndChild)
 56292: {
116102: #ifdef A11Y_LOG
 99989:   if (logging::IsEnabled(logging::eTree)) {
 99989:     logging::MsgBegin("TREE", "content inserted");
 99989:     logging::Node("container", aContainer);
 99989:     for (nsIContent* child = aStartChild; child != aEndChild;
 99989:          child = child->GetNextSibling()) {
 99989:       logging::Node("content", child);
 56987:     }
 99989:     logging::MsgEnd();
120916:     logging::Stack();
 99989:   }
 56292: #endif
 56292: 
 99568:   DocAccessible* docAccessible = GetDocAccessible(aPresShell);
 56292:   if (docAccessible)
 60746:     docAccessible->ContentInserted(aContainer, aStartChild, aEndChild);
 56292: }
 56292: 
 56292: void
 56292: nsAccessibilityService::ContentRemoved(nsIPresShell* aPresShell,
 56292:                                        nsIContent* aContainer,
 56292:                                        nsIContent* aChild)
 56292: {
116102: #ifdef A11Y_LOG
 99989:   if (logging::IsEnabled(logging::eTree)) {
 99989:     logging::MsgBegin("TREE", "content removed");
 99989:     logging::Node("container", aContainer);
 99989:     logging::Node("content", aChild);
 99989:     logging::MsgEnd();
120916:     logging::Stack();
 56987:   }
 56292: #endif
 56292: 
 99568:   DocAccessible* docAccessible = GetDocAccessible(aPresShell);
 56292:   if (docAccessible)
 60746:     docAccessible->ContentRemoved(aContainer, aChild);
 56292: }
 56292: 
 56292: void
 61516: nsAccessibilityService::UpdateText(nsIPresShell* aPresShell,
 61516:                                    nsIContent* aContent)
 61516: {
 99568:   DocAccessible* document = GetDocAccessible(aPresShell);
 61516:   if (document)
 61516:     document->UpdateText(aContent);
 61516: }
 61516: 
 61516: void
 94579: nsAccessibilityService::TreeViewChanged(nsIPresShell* aPresShell,
 94579:                                         nsIContent* aContent,
 94579:                                         nsITreeView* aView)
 94579: {
 99568:   DocAccessible* document = GetDocAccessible(aPresShell);
 94579:   if (document) {
 99648:     Accessible* accessible = document->GetAccessible(aContent);
 94579:     if (accessible) {
101616:       XULTreeAccessible* treeAcc = accessible->AsXULTree();
 94579:       if (treeAcc) 
 94579:         treeAcc->TreeViewChanged(aView);
 94579:     }
 94579:   }
 94579: }
 94579: 
 94579: void
 64006: nsAccessibilityService::UpdateListBullet(nsIPresShell* aPresShell,
 64006:                                          nsIContent* aHTMLListItemContent,
 64006:                                          bool aHasBullet)
 64006: {
 99568:   DocAccessible* document = GetDocAccessible(aPresShell);
 64006:   if (document) {
 99648:     Accessible* accessible = document->GetAccessible(aHTMLListItemContent);
 64006:     if (accessible) {
 97985:       HTMLLIAccessible* listItem = accessible->AsHTMLListItem();
 64006:       if (listItem)
 64006:         listItem->UpdateBullet(aHasBullet);
 64006:     }
 64006:   }
 64006: }
 64006: 
 64006: void
 93267: nsAccessibilityService::UpdateImageMap(nsImageFrame* aImageFrame)
 93267: {
 93267:   nsIPresShell* presShell = aImageFrame->PresContext()->PresShell();
 99568:   DocAccessible* document = GetDocAccessible(presShell);
 93267:   if (document) {
 99648:     Accessible* accessible =
 93267:       document->GetAccessible(aImageFrame->GetContent());
 93267:     if (accessible) {
101055:       HTMLImageMapAccessible* imageMap = accessible->AsImageMap();
 93267:       if (imageMap) {
 93267:         imageMap->UpdateChildAreas();
 93267:         return;
 93267:       }
 93267: 
 93267:       // If image map was initialized after we created an accessible (that'll
 93267:       // be an image accessible) then recreate it.
 93267:       RecreateAccessible(presShell, aImageFrame->GetContent());
 93267:     }
 93267:   }
 93267: }
 93267: 
 93267: void
134657: nsAccessibilityService::UpdateLabelValue(nsIPresShell* aPresShell,
134657:                                          nsIContent* aLabelElm,
134657:                                          const nsString& aNewValue)
134657: {
134657:   DocAccessible* document = GetDocAccessible(aPresShell);
134657:   if (document) {
134657:     Accessible* accessible = document->GetAccessible(aLabelElm);
134657:     if (accessible) {
134657:       XULLabelAccessible* xulLabel = accessible->AsXULLabel();
134657:       NS_ASSERTION(xulLabel,
134657:                    "UpdateLabelValue was called for wrong accessible!");
134657:       if (xulLabel)
134657:         xulLabel->UpdateLabelValue(aNewValue);
134657:     }
134657:   }
134657: }
134657: 
134657: void
 63261: nsAccessibilityService::PresShellActivated(nsIPresShell* aPresShell)
 63261: {
127020:   DocAccessible* document = aPresShell->GetDocAccessible();
 63261:   if (document) {
 97643:     RootAccessible* rootDocument = document->RootAccessible();
 63261:     NS_ASSERTION(rootDocument, "Entirely broken tree: no root document!");
 63261:     if (rootDocument)
 63261:       rootDocument->DocumentActivated(document);
 63261:   }
 63261: }
 63261: 
 63261: void
 56292: nsAccessibilityService::RecreateAccessible(nsIPresShell* aPresShell,
 56292:                                            nsIContent* aContent)
 56292: {
 99568:   DocAccessible* document = GetDocAccessible(aPresShell);
 93850:   if (document)
 93850:     document->RecreateAccessible(aContent);
 56292: }
 56292: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsIAccessibleRetrieval
 38359: 
  2064: NS_IMETHODIMP
 39600: nsAccessibilityService::GetApplicationAccessible(nsIAccessible** aAccessibleApplication)
 39567: {
 39600:   NS_ENSURE_ARG_POINTER(aAccessibleApplication);
 39567: 
114315:   NS_IF_ADDREF(*aAccessibleApplication = ApplicationAcc());
114315: 
 39600:   return NS_OK;
 39567: }
 39567: 
 39567: NS_IMETHODIMP
 43504: nsAccessibilityService::GetAccessibleFor(nsIDOMNode *aNode,
 43504:                                          nsIAccessible **aAccessible)
 43504: {
 43504:   NS_ENSURE_ARG_POINTER(aAccessible);
106838:   *aAccessible = nullptr;
 72710:   if (!aNode)
 72710:     return NS_OK;
 43504: 
 43504:   nsCOMPtr<nsINode> node(do_QueryInterface(aNode));
 77682:   if (!node)
 77682:     return NS_ERROR_INVALID_ARG;
 77682: 
101298:   DocAccessible* document = GetDocAccessible(node->OwnerDoc());
101298:   if (document)
101298:     NS_IF_ADDREF(*aAccessible = document->GetAccessible(node));
101298: 
 43504:   return NS_OK;
 43504: }
 43504: 
 43504: NS_IMETHODIMP
108991: nsAccessibilityService::GetStringRole(uint32_t aRole, nsAString& aString)
  2064: {
106033: #define ROLE(geckoRole, stringRole, atkRole, \
106033:              macRole, msaaRole, ia2Role, nameRule) \
 97224:   case roles::geckoRole: \
 97224:     CopyUTF8toUTF16(stringRole, aString); \
 97224:     return NS_OK;
 97224: 
 97224:   switch (aRole) {
 97224: #include "RoleMap.h"
 97224:     default:
  2064:       aString.AssignLiteral("unknown");
  2064:       return NS_OK;
  2064:   }
  2064: 
 97224: #undef ROLE
  2064: }
  2064: 
  2064: NS_IMETHODIMP
108991: nsAccessibilityService::GetStringStates(uint32_t aState, uint32_t aExtraState,
  2064:                                         nsIDOMDOMStringList **aStringStates)
  2064: {
  2064:   nsAccessibleDOMStringList* stringStates = new nsAccessibleDOMStringList();
  2064:   NS_ENSURE_TRUE(stringStates, NS_ERROR_OUT_OF_MEMORY);
  2064: 
108991:   uint64_t state = nsAccUtils::To64State(aState, aExtraState);
 67790: 
  2064:   // states
 67790:   if (state & states::UNAVAILABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("unavailable"));
 67790:   if (state & states::SELECTED)
  2064:     stringStates->Add(NS_LITERAL_STRING("selected"));
 67790:   if (state & states::FOCUSED)
  2064:     stringStates->Add(NS_LITERAL_STRING("focused"));
 67790:   if (state & states::PRESSED)
  2064:     stringStates->Add(NS_LITERAL_STRING("pressed"));
 67790:   if (state & states::CHECKED)
  2064:     stringStates->Add(NS_LITERAL_STRING("checked"));
 67790:   if (state & states::MIXED)
  2064:     stringStates->Add(NS_LITERAL_STRING("mixed"));
 67790:   if (state & states::READONLY)
  2064:     stringStates->Add(NS_LITERAL_STRING("readonly"));
 67790:   if (state & states::HOTTRACKED)
  2064:     stringStates->Add(NS_LITERAL_STRING("hottracked"));
 67790:   if (state & states::DEFAULT)
  2064:     stringStates->Add(NS_LITERAL_STRING("default"));
 67790:   if (state & states::EXPANDED)
  2064:     stringStates->Add(NS_LITERAL_STRING("expanded"));
 67790:   if (state & states::COLLAPSED)
  2064:     stringStates->Add(NS_LITERAL_STRING("collapsed"));
 67790:   if (state & states::BUSY)
  2064:     stringStates->Add(NS_LITERAL_STRING("busy"));
 67790:   if (state & states::FLOATING)
  2064:     stringStates->Add(NS_LITERAL_STRING("floating"));
 67790:   if (state & states::ANIMATED)
  2064:     stringStates->Add(NS_LITERAL_STRING("animated"));
 67790:   if (state & states::INVISIBLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("invisible"));
 67790:   if (state & states::OFFSCREEN)
  2064:     stringStates->Add(NS_LITERAL_STRING("offscreen"));
 67790:   if (state & states::SIZEABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("sizeable"));
 67790:   if (state & states::MOVEABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("moveable"));
 67790:   if (state & states::SELFVOICING)
  2064:     stringStates->Add(NS_LITERAL_STRING("selfvoicing"));
 67790:   if (state & states::FOCUSABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("focusable"));
 67790:   if (state & states::SELECTABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("selectable"));
 67790:   if (state & states::LINKED)
  2064:     stringStates->Add(NS_LITERAL_STRING("linked"));
 67790:   if (state & states::TRAVERSED)
  2064:     stringStates->Add(NS_LITERAL_STRING("traversed"));
 67790:   if (state & states::MULTISELECTABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("multiselectable"));
 67790:   if (state & states::EXTSELECTABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("extselectable"));
 67790:   if (state & states::PROTECTED)
  2064:     stringStates->Add(NS_LITERAL_STRING("protected"));
 67790:   if (state & states::HASPOPUP)
  2064:     stringStates->Add(NS_LITERAL_STRING("haspopup"));
 67790:   if (state & states::REQUIRED)
  2064:     stringStates->Add(NS_LITERAL_STRING("required"));
 67790:   if (state & states::ALERT)
 67790:     stringStates->Add(NS_LITERAL_STRING("alert"));
 67790:   if (state & states::INVALID)
  2064:     stringStates->Add(NS_LITERAL_STRING("invalid"));
 67790:   if (state & states::CHECKABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("checkable"));
  2064: 
  2064:   // extraStates
 67790:   if (state & states::SUPPORTS_AUTOCOMPLETION)
  3513:     stringStates->Add(NS_LITERAL_STRING("autocompletion"));
 67790:   if (state & states::DEFUNCT)
  3513:     stringStates->Add(NS_LITERAL_STRING("defunct"));
 67790:   if (state & states::SELECTABLE_TEXT)
  2064:     stringStates->Add(NS_LITERAL_STRING("selectable text"));
 67790:   if (state & states::EDITABLE)
  2064:     stringStates->Add(NS_LITERAL_STRING("editable"));
 67790:   if (state & states::ACTIVE)
  2064:     stringStates->Add(NS_LITERAL_STRING("active"));
 67790:   if (state & states::MODAL)
  2064:     stringStates->Add(NS_LITERAL_STRING("modal"));
 67790:   if (state & states::MULTI_LINE)
  2064:     stringStates->Add(NS_LITERAL_STRING("multi line"));
 67790:   if (state & states::HORIZONTAL)
  3513:     stringStates->Add(NS_LITERAL_STRING("horizontal"));
 67790:   if (state & states::OPAQUE1)
  3513:     stringStates->Add(NS_LITERAL_STRING("opaque"));
 67790:   if (state & states::SINGLE_LINE)
  2064:     stringStates->Add(NS_LITERAL_STRING("single line"));
 67790:   if (state & states::TRANSIENT)
  2064:     stringStates->Add(NS_LITERAL_STRING("transient"));
 67790:   if (state & states::VERTICAL)
  2064:     stringStates->Add(NS_LITERAL_STRING("vertical"));
 67790:   if (state & states::STALE)
  3513:     stringStates->Add(NS_LITERAL_STRING("stale"));
 67790:   if (state & states::ENABLED)
  3513:     stringStates->Add(NS_LITERAL_STRING("enabled"));
 67790:   if (state & states::SENSITIVE)
  3513:     stringStates->Add(NS_LITERAL_STRING("sensitive"));
 67790:   if (state & states::EXPANDABLE)
  3513:     stringStates->Add(NS_LITERAL_STRING("expandable"));
  2064: 
  2064:   //unknown states
108991:   uint32_t stringStatesLength = 0;
  2064:   stringStates->GetLength(&stringStatesLength);
  2064:   if (!stringStatesLength)
  2064:     stringStates->Add(NS_LITERAL_STRING("unknown"));
  2064: 
  2064:   NS_ADDREF(*aStringStates = stringStates);
  2064:   return NS_OK;
  2064: }
  2064: 
  5188: // nsIAccessibleRetrieval::getStringEventType()
  5188: NS_IMETHODIMP
108991: nsAccessibilityService::GetStringEventType(uint32_t aEventType,
  5188:                                            nsAString& aString)
  5188: {
 80467:   NS_ASSERTION(nsIAccessibleEvent::EVENT_LAST_ENTRY == ArrayLength(kEventTypeNames),
  6284:                "nsIAccessibleEvent constants are out of sync to kEventTypeNames");
  6284: 
 80467:   if (aEventType >= ArrayLength(kEventTypeNames)) {
  5188:     aString.AssignLiteral("unknown");
  5188:     return NS_OK;
  5188:   }
  5188: 
  5188:   CopyUTF8toUTF16(kEventTypeNames[aEventType], aString);
  5188:   return NS_OK;
  5188: }
  5188: 
  6812: // nsIAccessibleRetrieval::getStringRelationType()
  6812: NS_IMETHODIMP
108991: nsAccessibilityService::GetStringRelationType(uint32_t aRelationType,
  6812:                                               nsAString& aString)
  6812: {
 80467:   if (aRelationType >= ArrayLength(kRelationTypeNames)) {
  6812:     aString.AssignLiteral("unknown");
  6812:     return NS_OK;
  6812:   }
  6812: 
  6812:   CopyUTF8toUTF16(kRelationTypeNames[aRelationType], aString);
  6812:   return NS_OK;
  6812: }
  6812: 
 43764: NS_IMETHODIMP
 43764: nsAccessibilityService::GetAccessibleFromCache(nsIDOMNode* aNode,
 43764:                                                nsIAccessible** aAccessible)
 43764: {
 43764:   NS_ENSURE_ARG_POINTER(aAccessible);
106838:   *aAccessible = nullptr;
 77682:   if (!aNode)
 77682:     return NS_OK;
 77682: 
 77682:   nsCOMPtr<nsINode> node(do_QueryInterface(aNode));
 77682:   if (!node)
 77682:     return NS_ERROR_INVALID_ARG;
 43764: 
 43764:   // Search for an accessible in each of our per document accessible object
 43764:   // caches. If we don't find it, and the given node is itself a document, check
 43764:   // our cache of document accessibles (document cache). Note usually shutdown
 43764:   // document accessibles are not stored in the document cache, however an
123625:   // "unofficially" shutdown document (i.e. not from DocManager) can still
 43764:   // exist in the document cache.
 99648:   Accessible* accessible = FindAccessibleInCache(node);
 43764:   if (!accessible) {
 43764:     nsCOMPtr<nsIDocument> document(do_QueryInterface(node));
 43764:     if (document)
127020:       accessible = GetExistingDocAccessible(document);
 43764:   }
 43764: 
 43764:   NS_IF_ADDREF(*aAccessible = accessible);
 43764:   return NS_OK;
 43764: }
 43764: 
 89309: NS_IMETHODIMP
 89309: nsAccessibilityService::CreateAccessiblePivot(nsIAccessible* aRoot,
 89309:                                               nsIAccessiblePivot** aPivot)
 89309: {
 89309:   NS_ENSURE_ARG_POINTER(aPivot);
 89309:   NS_ENSURE_ARG(aRoot);
106838:   *aPivot = nullptr;
 89309: 
 99648:   nsRefPtr<Accessible> accessibleRoot(do_QueryObject(aRoot));
 89309:   NS_ENSURE_TRUE(accessibleRoot, NS_ERROR_INVALID_ARG);
 89309: 
 89309:   nsAccessiblePivot* pivot = new nsAccessiblePivot(accessibleRoot);
 89309:   NS_ADDREF(*aPivot = pivot);
 89309: 
 89309:   return NS_OK;
 89309: }
 89309: 
 99203: NS_IMETHODIMP
 99203: nsAccessibilityService::SetLogging(const nsACString& aModules)
 99203: {
116102: #ifdef A11Y_LOG
 99203:   logging::Enable(PromiseFlatCString(aModules));
 99203: #endif
 99203:   return NS_OK;
 99203: }
 99203: 
120916: NS_IMETHODIMP
120916: nsAccessibilityService::IsLogged(const nsAString& aModule, bool* aIsLogged)
120916: {
120916:   NS_ENSURE_ARG_POINTER(aIsLogged);
120916:   *aIsLogged = false;
120916: 
120916: #ifdef A11Y_LOG
120916:   *aIsLogged = logging::IsEnabled(aModule);
120916: #endif
120916: 
120916:   return NS_OK;
120916: }
120916: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsAccessibilityService public
 38359: 
 99648: Accessible*
 46469: nsAccessibilityService::GetOrCreateAccessible(nsINode* aNode,
124439:                                               Accessible* aContext,
 57448:                                               bool* aIsSubtreeHidden)
     1: {
124439:   NS_PRECONDITION(aContext && aNode && !gIsShutdown,
124439:                   "Maybe let'd do a crash? Oh, yes, baby!");
     1: 
 57448:   if (aIsSubtreeHidden)
 57448:     *aIsSubtreeHidden = false;
     1: 
124439:   DocAccessible* document = aContext->Document();
124439: 
 38062:   // Check to see if we already have an accessible for this node in the cache.
124439:   // XXX: we don't have context check here. It doesn't really necessary until
124439:   // we have in-law children adoption.
124439:   Accessible* cachedAccessible = document->GetAccessible(aNode);
 64506:   if (cachedAccessible)
 43538:     return cachedAccessible;
     1: 
 38359:   // No cache entry, so we must create the accessible.
 38359: 
 43504:   if (aNode->IsNodeOfType(nsINode::eDOCUMENT)) {
 43310:     // If it's document node then ask accessible document loader for
 43310:     // document accessible, otherwise return null.
 43310:     nsCOMPtr<nsIDocument> document(do_QueryInterface(aNode));
 64506:     return GetDocAccessible(document);
 43310:   }
     1: 
 38359:   // We have a content node.
 43504:   if (!aNode->IsInDoc()) {
 43310:     NS_WARNING("Creating accessible for node with no document");
106838:     return nullptr;
     1:   }
     1: 
124439:   if (aNode->OwnerDoc() != document->DocumentNode()) {
 89801:     NS_ERROR("Creating accessible for wrong document");
106838:     return nullptr;
 38359:   }
 34904: 
116046:   if (!aNode->IsContent())
106838:     return nullptr;
 43504: 
116046:   nsIContent* content = aNode->AsContent();
116046:   nsIFrame* frame = content->GetPrimaryFrame();
 38359: 
 57448:   // Check frame and its visibility. Note, hidden frame allows visible
 57448:   // elements in subtree.
132812:   if (!frame || !frame->StyleVisibility()->IsVisible()) {
116046:     if (aIsSubtreeHidden && !frame)
 57448:       *aIsSubtreeHidden = true;
 38359: 
106838:     return nullptr;
     1:   }
 38359: 
116046:   if (frame->GetContent() != content) {
 40575:     // Not the main content for this frame. This happens because <area>
 40575:     // elements return the image frame as their primary frame. The main content
 40575:     // for the image frame is the image content. If the frame is not an image
 40575:     // frame or the node is not an area element then null is returned.
 79733:     // This setup will change when bug 135040 is fixed. Make sure we don't
 79733:     // create area accessible here. Hopefully assertion below will handle that.
 79733: 
 79733: #ifdef DEBUG
116046:   nsImageFrame* imageFrame = do_QueryFrame(frame);
 79733:   NS_ASSERTION(imageFrame && content->IsHTML() && content->Tag() == nsGkAtoms::area,
 79733:                "Unknown case of not main content for the frame!");
 79733: #endif
106838:     return nullptr;
     1:   }
     1: 
 79733: #ifdef DEBUG
116046:   nsImageFrame* imageFrame = do_QueryFrame(frame);
 79733:   NS_ASSERTION(!imageFrame || !content->IsHTML() || content->Tag() != nsGkAtoms::area,
 79733:                "Image map manages the area accessible creation!");
 79733: #endif
 79733: 
 38359:   // Attempt to create an accessible based on what we know.
 99648:   nsRefPtr<Accessible> newAcc;
 61649: 
 61649:   // Create accessible for visible text frames.
     1:   if (content->IsNodeOfType(nsINode::eTEXT)) {
 61649:     nsAutoString text;
116046:     frame->GetRenderedText(&text, nullptr, nullptr, 0, UINT32_MAX);
 61649:     if (text.IsEmpty()) {
 57448:       if (aIsSubtreeHidden)
 57448:         *aIsSubtreeHidden = true;
 38359: 
106838:       return nullptr;
     1:     }
 61649: 
124439:     newAcc = CreateAccessibleByFrameType(frame, content, aContext);
124439:     if (document->BindToDocument(newAcc, nullptr)) {
 61649:       newAcc->AsTextLeaf()->SetText(text);
 64506:       return newAcc;
 38359:     }
 35026: 
106838:     return nullptr;
     1:   }
     1: 
 79445:   bool isHTML = content->IsHTML();
 78350:   if (isHTML && content->Tag() == nsGkAtoms::map) {
 15308:     // Create hyper text accessible for HTML map if it is used to group links
 15308:     // (see http://www.w3.org/TR/WCAG10-HTML-TECHS/#group-bypass). If the HTML
 79788:     // map rect is empty then it is used for links grouping. Otherwise it should
 79788:     // be used in conjunction with HTML image element and in this case we don't
 79788:     // create any accessible for it and don't walk into it. The accessibles for
101055:     // HTML area (HTMLAreaAccessible) the map contains are attached as
 79788:     // children of the appropriate accessible for HTML image
100130:     // (ImageAccessible).
116046:     if (nsLayoutUtils::GetAllInFlowRectsUnion(frame,
116046:                                               frame->GetParent()).IsEmpty()) {
 57448:       if (aIsSubtreeHidden)
 57448:         *aIsSubtreeHidden = true;
 38359: 
106838:       return nullptr;
 15308:     }
 15308: 
124439:     newAcc = new HyperTextAccessibleWrap(content, document);
124439:     if (document->BindToDocument(newAcc, aria::GetRoleMap(aNode)))
 64506:       return newAcc;
106838:     return nullptr;
 15308:   }
 15308: 
 95490:   nsRoleMapEntry* roleMapEntry = aria::GetRoleMap(aNode);
114211: 
114211:   // If the element is focusable or global ARIA attribute is applied to it or
114211:   // it is referenced by ARIA relationship then treat role="presentation" on
114211:   // the element as the role is not there.
101616:   if (roleMapEntry && roleMapEntry->Is(nsGkAtoms::presentation)) {
124439:     if (!MustBeAccessible(content, document))
114211:       return nullptr;
114211: 
106838:     roleMapEntry = nullptr;
     1:   }
     1: 
116046:   if (!newAcc && isHTML) {  // HTML accessibles
124439:     if (roleMapEntry) {
124439:       // Create pure ARIA grid/treegrid related accessibles if they weren't used
124439:       // on accessible HTML table elements.
126240:       if ((roleMapEntry->accTypes & eTableCell)) {
126240:         if (aContext->IsTableRow() &&
126218:             (frame->AccessibleType() != eHTMLTableCellType ||
124439:              aContext->GetContent() != content->GetParent())) {
124439:           newAcc = new ARIAGridCellAccessibleWrap(content, document);
 32474:         }
 32474: 
126768:       } else if ((roleMapEntry->IsOfType(eTable)) &&
126218:                  frame->AccessibleType() != eHTMLTableType) {
124439:         newAcc = new ARIAGridAccessibleWrap(content, document);
 28493:       }
 29271:     }
 28493: 
114068:     if (!newAcc) {
124439:       // Prefer to use markup (mostly tag name, perhaps attributes) to decide if
124439:       // and what kind of accessible to create.
124439:       newAcc = CreateHTMLAccessibleByMarkup(frame, content, aContext);
     1: 
 38359:       // Try using frame to do it.
124439:       if (!newAcc)
124439:         newAcc = CreateAccessibleByFrameType(frame, content, aContext);
124439: 
124439:       // If table has strong ARIA role then all table descendants shouldn't
124439:       // expose their native roles.
124439:       if (!roleMapEntry && newAcc) {
126218:         if (frame->AccessibleType() == eHTMLTableRowType) {
124439:           nsRoleMapEntry* contextRoleMap = aContext->ARIARoleMap();
126768:           if (contextRoleMap && !(contextRoleMap->IsOfType(eTable)))
124439:             roleMapEntry = &nsARIAMap::gEmptyRoleMap;
124439: 
126218:         } else if (frame->AccessibleType() == eHTMLTableCellType &&
124439:                    aContext->ARIARoleMap() == &nsARIAMap::gEmptyRoleMap) {
124439:           roleMapEntry = &nsARIAMap::gEmptyRoleMap;
124603: 
124603:         } else if (content->Tag() == nsGkAtoms::dt ||
124603:                    content->Tag() == nsGkAtoms::li ||
124603:                    content->Tag() == nsGkAtoms::dd ||
126218:                    frame->AccessibleType() == eHTMLLiType) {
124603:           nsRoleMapEntry* contextRoleMap = aContext->ARIARoleMap();
126768:           if (contextRoleMap && !(contextRoleMap->IsOfType(eList)))
124603:             roleMapEntry = &nsARIAMap::gEmptyRoleMap;
124439:         }
124439:       }
     1:     }
     1:   }
     1: 
127012:   // Accessible XBL types and deck stuff are used in XUL only currently.
127012:   if (!newAcc && content->IsXUL()) {
127012:     // No accessible for not selected deck panel and its children.
127012:     if (!aContext->IsXULTabpanels()) {
127012:       nsDeckFrame* deckFrame = do_QueryFrame(frame->GetParent());
127012:       if (deckFrame && deckFrame->GetSelectedBox() != frame) {
127012:         if (aIsSubtreeHidden)
127012:           *aIsSubtreeHidden = true;
127012: 
127012:         return nullptr;
127012:       }
127012:     }
127012: 
 28493:     // Elements may implement nsIAccessibleProvider via XBL. This allows them to
 28493:     // say what kind of accessible to create.
124439:     newAcc = CreateAccessibleByType(content, document);
127012: 
127012:     // Any XUL box can be used as tabpanel, make sure we create a proper
127012:     // accessible for it.
127012:     if (!newAcc && aContext->IsXULTabpanels() &&
127012:         content->GetParent() == aContext->GetContent()) {
127012:       nsIAtom* frameType = frame->GetType();
127012:       if (frameType == nsGkAtoms::boxFrame ||
127012:           frameType == nsGkAtoms::scrollFrame) {
127012:         newAcc = new XULTabpanelAccessible(content, document);
127012:       }
127012:     }
 28493:   }
 28493: 
 28493:   if (!newAcc) {
127422:     if (content->IsSVG()) {
127422:       nsSVGPathGeometryFrame* pathGeometryFrame = do_QueryFrame(frame);
127422:       if (pathGeometryFrame) {
127422:         // A graphic elements: rect, circle, ellipse, line, path, polygon,
127422:         // polyline and image. A 'use' and 'text' graphic elements require
127422:         // special support.
127422:         newAcc = new EnumRoleAccessible(content, document, roles::GRAPHIC);
127422:       } else if (content->Tag() == nsGkAtoms::svg) {
124439:         newAcc = new EnumRoleAccessible(content, document, roles::DIAGRAM);
127422:       }
103750:     } else if (content->IsMathML(nsGkAtoms::math)) {
124439:       newAcc = new EnumRoleAccessible(content, document, roles::EQUATION);
 28493:     }
 28493:   }
 28493: 
     1:   // If no accessible, see if we need to create a generic accessible because
     1:   // of some property that makes this object interesting
     1:   // We don't do this for <body>, <html>, <window>, <dialog> etc. which
     1:   // correspond to the doc accessible and will be created in any case
 78350:   if (!newAcc && content->Tag() != nsGkAtoms::body && content->GetParent() &&
124439:       (roleMapEntry || MustBeAccessible(content, document) ||
121570:        (isHTML && nsCoreUtils::HasClickListener(content)))) {
     1:     // This content is focusable or has an interesting dynamic content accessibility property.
     1:     // If it's interesting we need it in the accessibility hierarchy so that events or
     1:     // other accessibles can point to it, or so that it can hold a state, etc.
  1672:     if (isHTML) {
     1:       // Interesting HTML container which may have selectable text and/or embedded objects
124439:       newAcc = new HyperTextAccessibleWrap(content, document);
116046:     } else {  // XUL, SVG, MathML etc.
     1:       // Interesting generic non-HTML container
124439:       newAcc = new AccessibleWrap(content, document);
     1:     }
     1:   }
     1: 
124439:   return document->BindToDocument(newAcc, roleMapEntry) ? newAcc : nullptr;
     1: }
     1: 
 43310: ////////////////////////////////////////////////////////////////////////////////
 43310: // nsAccessibilityService private
 43310: 
 79445: bool
 43310: nsAccessibilityService::Init()
 43310: {
 43310:   // Initialize accessible document manager.
123625:   if (!DocManager::Init())
 80486:     return false;
 43310: 
 43310:   // Add observers.
 43310:   nsCOMPtr<nsIObserverService> observerService =
 43310:     mozilla::services::GetObserverService();
 43310:   if (!observerService)
 80486:     return false;
 43310: 
 80486:   observerService->AddObserver(this, NS_XPCOM_SHUTDOWN_OBSERVER_ID, false);
 43310: 
 97849:   static const PRUnichar kInitIndicator[] = { '1', 0 };
106838:   observerService->NotifyObservers(nullptr, "a11y-init-or-shutdown", kInitIndicator);
 97849: 
116102: #ifdef A11Y_LOG
 99203:   logging::CheckEnv();
 99203: #endif
 99203: 
114315:   gApplicationAccessible = new ApplicationAccessibleWrap();
114315:   NS_ADDREF(gApplicationAccessible); // will release in Shutdown()
114315: 
105954: #ifdef MOZ_CRASHREPORTER
105954:   CrashReporter::
105954:     AnnotateCrashReport(NS_LITERAL_CSTRING("Accessibility"),
105954:                         NS_LITERAL_CSTRING("Active"));
105954: #endif
105954: 
138012: #ifdef XP_WIN
138012:   sPendingPlugins = new nsTArray<nsCOMPtr<nsIContent> >;
138012:   sPluginTimers = new nsTArray<nsCOMPtr<nsITimer> >;
138012: #endif
138012: 
 80486:   gIsShutdown = false;
124964: 
124964:   // Now its safe to start platform accessibility.
124964:   PlatformInit();
124964: 
 80486:   return true;
 43310: }
 43310: 
 43310: void
 43310: nsAccessibilityService::Shutdown()
 43310: {
 43310:   // Remove observers.
 43310:   nsCOMPtr<nsIObserverService> observerService =
 43310:       mozilla::services::GetObserverService();
 97849:   if (observerService) {
 43310:     observerService->RemoveObserver(this, NS_XPCOM_SHUTDOWN_OBSERVER_ID);
 43310: 
 97849:     static const PRUnichar kShutdownIndicator[] = { '0', 0 };
106838:     observerService->NotifyObservers(nullptr, "a11y-init-or-shutdown", kShutdownIndicator);
 97849:   }
 97849: 
 43310:   // Stop accessible document loader.
123625:   DocManager::Shutdown();
 43310: 
135305:   SelectionManager::Shutdown();
135305: 
138012: #ifdef XP_WIN
138012:   sPendingPlugins = nullptr;
138012: 
138012:   uint32_t timerCount = sPluginTimers->Length();
138012:   for (uint32_t i = 0; i < timerCount; i++)
138012:     sPluginTimers->ElementAt(i)->Cancel();
138012: 
138012:   sPluginTimers = nullptr;
138012: #endif
138012: 
 43310:   // Application is going to be closed, shutdown accessibility and mark
 43310:   // accessibility service as shutdown to prevent calls of its methods.
 43310:   // Don't null accessibility service static member at this point to be safe
 43310:   // if someone will try to operate with it.
 43310: 
 43310:   NS_ASSERTION(!gIsShutdown, "Accessibility was shutdown already");
 43310: 
 80486:   gIsShutdown = true;
 43310: 
124964:   PlatformShutdown();
114315:   gApplicationAccessible->Shutdown();
114315:   NS_RELEASE(gApplicationAccessible);
114315:   gApplicationAccessible = nullptr;
 43310: }
 43310: 
 99648: already_AddRefed<Accessible>
 43504: nsAccessibilityService::CreateAccessibleByType(nsIContent* aContent,
 99568:                                                DocAccessible* aDoc)
     1: {
 43504:   nsCOMPtr<nsIAccessibleProvider> accessibleProvider(do_QueryInterface(aContent));
  1477:   if (!accessibleProvider)
106838:     return nullptr;
     1: 
108991:   int32_t type;
  1477:   nsresult rv = accessibleProvider->GetAccessibleType(&type);
 38359:   if (NS_FAILED(rv))
106838:     return nullptr;
     1: 
 38359:   if (type == nsIAccessibleProvider::OuterDoc) {
 99648:     Accessible* accessible = new OuterDocAccessible(aContent, aDoc);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 38359:   }
     1: 
106838:   Accessible* accessible = nullptr;
     1:   switch (type)
     1:   {
     1: #ifdef MOZ_XUL
 10594:     case nsIAccessibleProvider::NoAccessible:
106838:       return nullptr;
 38359: 
     1:     // XUL controls
     1:     case nsIAccessibleProvider::XULAlert:
101616:       accessible = new XULAlertAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULButton:
 95360:       accessible = new XULButtonAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULCheckbox:
 95360:       accessible = new XULCheckboxAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULColorPicker:
101616:       accessible = new XULColorPickerAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULColorPickerTile:
101616:       accessible = new XULColorPickerTileAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULCombobox:
101616:       accessible = new XULComboboxAccessible(aContent, aDoc);
     1:       break;
 46338: 
127012:     case nsIAccessibleProvider::XULTabpanels:
127012:       accessible = new XULTabpanelsAccessible(aContent, aDoc);
103750:       break;
103750: 
     1:     case nsIAccessibleProvider::XULDropmarker:
 95360:       accessible = new XULDropmarkerAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULGroupbox:
 95360:       accessible = new XULGroupboxAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULImage:
     1:     {
 43504:       // Don't include nameless images in accessible tree.
 43504:       if (!aContent->HasAttr(kNameSpaceID_None,
 78350:                              nsGkAtoms::tooltiptext))
106838:         return nullptr;
     1: 
100130:       accessible = new ImageAccessibleWrap(aContent, aDoc);
     1:       break;
 46338: 
     1:     }
     1:     case nsIAccessibleProvider::XULLink:
101616:       accessible = new XULLinkAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULListbox:
101616:       accessible = new XULListboxAccessibleWrap(aContent, aDoc);
     1:       break;
 46338: 
 11854:     case nsIAccessibleProvider::XULListCell:
101616:       accessible = new XULListCellAccessibleWrap(aContent, aDoc);
 11854:       break;
 46338: 
  6094:     case nsIAccessibleProvider::XULListHead:
101616:       accessible = new XULColumAccessible(aContent, aDoc);
  6094:       break;
 46338: 
  6094:     case nsIAccessibleProvider::XULListHeader:
101616:       accessible = new XULColumnItemAccessible(aContent, aDoc);
  6094:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULListitem:
101616:       accessible = new XULListitemAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULMenubar:
101616:       accessible = new XULMenubarAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULMenuitem:
101616:       accessible = new XULMenuitemAccessibleWrap(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULMenupopup:
     1:     {
     1: #ifdef MOZ_ACCESSIBILITY_ATK
     1:       // ATK considers this node to be redundant when within menubars, and it makes menu
     1:       // navigation with assistive technologies more difficult
     1:       // XXX In the future we will should this for consistency across the nsIAccessible
     1:       // implementations on each platform for a consistent scripting environment, but
 99648:       // then strip out redundant accessibles in the AccessibleWrap class for each platform.
 43504:       nsIContent *parent = aContent->GetParent();
 78350:       if (parent && parent->NodeInfo()->Equals(nsGkAtoms::menu,
 43504:                                                kNameSpaceID_XUL))
106838:         return nullptr;
     1: #endif
101616:       accessible = new XULMenupopupAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     }
     1:     case nsIAccessibleProvider::XULMenuSeparator:
101616:       accessible = new XULMenuSeparatorAccessible(aContent, aDoc);
     1:       break;
 46338: 
 10594:     case nsIAccessibleProvider::XULPane:
101054:       accessible = new EnumRoleAccessible(aContent, aDoc, roles::PANE);
 10594:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULProgressMeter:
 89799:       accessible = new XULProgressMeterAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULStatusBar:
 95360:       accessible = new XULStatusBarAccessible(aContent, aDoc);
     1:       break;
 46338: 
  4274:     case nsIAccessibleProvider::XULScale:
101616:       accessible = new XULSliderAccessible(aContent, aDoc);
  4274:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULRadioButton:
 95360:       accessible = new XULRadioButtonAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULRadioGroup:
 95360:       accessible = new XULRadioGroupAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULTab:
101616:       accessible = new XULTabAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULTabs:
101616:       accessible = new XULTabsAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULText:
101616:       accessible = new XULLabelAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULTextBox:
 95360:       accessible = new XULTextFieldAccessible(aContent, aDoc);
     1:       break;
 46338: 
  4274:     case nsIAccessibleProvider::XULThumb:
101616:       accessible = new XULThumbAccessible(aContent, aDoc);
  4274:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULTree:
 89799:       return CreateAccessibleForXULTree(aContent, aDoc);
 38359: 
     1:     case nsIAccessibleProvider::XULTreeColumns:
101616:       accessible = new XULTreeColumAccessible(aContent, aDoc);
     1:       break;
 46338: 
  6094:     case nsIAccessibleProvider::XULTreeColumnItem:
101616:       accessible = new XULColumnItemAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULToolbar:
 95360:       accessible = new XULToolbarAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULToolbarSeparator:
 95360:       accessible = new XULToolbarSeparatorAccessible(aContent, aDoc);
     1:       break;
 46338: 
     1:     case nsIAccessibleProvider::XULTooltip:
101616:       accessible = new XULTooltipAccessible(aContent, aDoc);
     1:       break;
 46338: 
  3325:     case nsIAccessibleProvider::XULToolbarButton:
 95360:       accessible = new XULToolbarButtonAccessible(aContent, aDoc);
  3325:       break;
 46338: 
     1: #endif // MOZ_XUL
     1: 
     1:     default:
106838:       return nullptr;
     1:   }
     1: 
 46338:   NS_IF_ADDREF(accessible);
 46338:   return accessible;
 46338: }
 46338: 
 99648: already_AddRefed<Accessible>
 46338: nsAccessibilityService::CreateHTMLAccessibleByMarkup(nsIFrame* aFrame,
 46338:                                                      nsIContent* aContent,
124439:                                                      Accessible* aContext)
 46338: {
124439:   DocAccessible* document = aContext->Document();
126240:   if (aContext->IsTableRow()) {
124439:     if (nsCoreUtils::IsHTMLTableHeader(aContent) &&
124439:         aContext->GetContent() == aContent->GetParent()) {
124439:       Accessible* accessible = new HTMLTableHeaderCellAccessibleWrap(aContent,
124439:                                                                      document);
116046:       NS_ADDREF(accessible);
114068:       return accessible;
114068:     }
114068: 
114068:     return nullptr;
114068:   }
114068: 
 46338:   // This method assumes we're in an HTML namespace.
 46338:   nsIAtom* tag = aContent->Tag();
 83419:   if (tag == nsGkAtoms::figcaption) {
124439:     Accessible* accessible = new HTMLFigcaptionAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 83419:     return accessible;
 83419:   }
 83419: 
 83419:   if (tag == nsGkAtoms::figure) {
124439:     Accessible* accessible = new HTMLFigureAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 83419:     return accessible;
 83419:   }
 83419: 
 78350:   if (tag == nsGkAtoms::legend) {
124439:     Accessible* accessible = new HTMLLegendAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 78350:   if (tag == nsGkAtoms::option) {
124439:     Accessible* accessible = new HTMLSelectOptionAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 78350:   if (tag == nsGkAtoms::optgroup) {
124439:     Accessible* accessible =
124439:       new HTMLSelectOptGroupAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 78350:   if (tag == nsGkAtoms::ul || tag == nsGkAtoms::ol ||
 78350:       tag == nsGkAtoms::dl) {
124439:     Accessible* accessible = new HTMLListAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 78350:   if (tag == nsGkAtoms::a) {
101056:     // Only some roles truly enjoy life as HTMLLinkAccessibles, for details
 46338:     // see closed bug 494807.
 95490:     nsRoleMapEntry* roleMapEntry = aria::GetRoleMap(aContent);
 87094:     if (roleMapEntry && roleMapEntry->role != roles::NOTHING &&
 87094:         roleMapEntry->role != roles::LINK) {
124439:       Accessible* accessible = new HyperTextAccessibleWrap(aContent, document);
116046:       NS_ADDREF(accessible);
 46338:       return accessible;
 46338:     }
 46338: 
124439:     Accessible* accessible = new HTMLLinkAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
126240:   if (aContext->IsList()) {
124603:     // If list item is a child of accessible list then create an accessible for
124603:     // it unconditionally by tag name. nsBlockFrame creates the list item
124603:     // accessible for other elements styled as list items.
124603:     if (aContext->GetContent() == aContent->GetParent()) {
111317:       if (tag == nsGkAtoms::dt || tag == nsGkAtoms::li) {
124439:         Accessible* accessible = new HTMLLIAccessible(aContent, document);
116046:         NS_ADDREF(accessible);
 46338:         return accessible;
 46338:       }
 46338: 
124603:       if (tag == nsGkAtoms::dd) {
124603:         Accessible* accessible = new HyperTextAccessibleWrap(aContent, document);
124603:         NS_ADDREF(accessible);
124603:         return accessible;
124603:       }
124603:     }
124603: 
124603:     return nullptr;
124603:   }
124603: 
 78350:   if (tag == nsGkAtoms::abbr ||
 78350:       tag == nsGkAtoms::acronym ||
 78350:       tag == nsGkAtoms::blockquote ||
 78350:       tag == nsGkAtoms::form ||
 78350:       tag == nsGkAtoms::h1 ||
 78350:       tag == nsGkAtoms::h2 ||
 78350:       tag == nsGkAtoms::h3 ||
 78350:       tag == nsGkAtoms::h4 ||
 78350:       tag == nsGkAtoms::h5 ||
 78350:       tag == nsGkAtoms::h6 ||
 78350:       tag == nsGkAtoms::q) {
124439:     Accessible* accessible = new HyperTextAccessibleWrap(aContent, document);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 78350:   if (tag == nsGkAtoms::output) {
124439:     Accessible* accessible = new HTMLOutputAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 54466:     return accessible;
 54466:   }
 54466: 
 78350:   if (tag == nsGkAtoms::progress) {
 99648:     Accessible* accessible =
124439:       new HTMLProgressMeterAccessible(aContent, document);
116046:     NS_ADDREF(accessible);
 69737:     return accessible;
 69737:   }
 69737: 
106838:   return nullptr;
 38359:  }
     1: 
118929: already_AddRefed<Accessible>
118929: nsAccessibilityService::CreateAccessibleByFrameType(nsIFrame* aFrame,
118929:                                                     nsIContent* aContent,
124439:                                                     Accessible* aContext)
118929: {
124439:   DocAccessible* document = aContext->Document();
124439: 
118929:   nsRefPtr<Accessible> newAcc;
118929:   switch (aFrame->AccessibleType()) {
125637:     case eNoType:
118929:       return nullptr;
126218:     case eHTMLBRType:
124439:       newAcc = new HTMLBRAccessible(aContent, document);
118929:       break;
126218:     case eHTMLButtonType:
124439:       newAcc = new HTMLButtonAccessible(aContent, document);
118929:       break;
126218:     case eHTMLCanvasType:
124439:       newAcc = new HTMLCanvasAccessible(aContent, document);
118929:       break;
126218:     case eHTMLCaptionType:
126240:       if (aContext->IsTable() &&
124439:           aContext->GetContent() == aContent->GetParent()) {
124439:         newAcc = new HTMLCaptionAccessible(aContent, document);
124439:       }
118929:       break;
126218:     case eHTMLCheckboxType:
124439:       newAcc = new HTMLCheckboxAccessible(aContent, document);
118929:       break;
126218:     case eHTMLComboboxType:
124439:       newAcc = new HTMLComboboxAccessible(aContent, document);
118929:       break;
126218:     case eHTMLFileInputType:
124439:       newAcc = new HTMLFileInputAccessible(aContent, document);
118929:       break;
126218:     case eHTMLGroupboxType:
124439:       newAcc = new HTMLGroupboxAccessible(aContent, document);
118929:       break;
126218:     case eHTMLHRType:
124439:       newAcc = new HTMLHRAccessible(aContent, document);
118929:       break;
126218:     case eHTMLImageMapType:
124439:       newAcc = new HTMLImageMapAccessible(aContent, document);
118929:       break;
126218:     case eHTMLLabelType:
124439:       newAcc = new HTMLLabelAccessible(aContent, document);
118929:       break;
126218:     case eHTMLLiType:
126240:       if (aContext->IsList() &&
124603:           aContext->GetContent() == aContent->GetParent()) {
124439:         newAcc = new HTMLLIAccessible(aContent, document);
124603:       }
118929:       break;
126218:     case eHTMLSelectListType:
124439:       newAcc = new HTMLSelectListAccessible(aContent, document);
118929:       break;
126218:     case eHTMLMediaType:
124439:       newAcc = new EnumRoleAccessible(aContent, document, roles::GROUPING);
118929:       break;
126218:     case eHTMLRadioButtonType:
124439:       newAcc = new HTMLRadioButtonAccessible(aContent, document);
118929:       break;
126218:     case eHTMLTableType:
124439:       newAcc = new HTMLTableAccessibleWrap(aContent, document);
118929:       break;
126218:     case eHTMLTableCellType:
132767:       // Accessible HTML table cell should be a child of accessible HTML table
132767:       // or its row (CSS HTML tables are polite to the used markup at
132767:       // certain degree).
132767:       if (aContext->IsHTMLTableRow() || aContext->IsHTMLTable())
124439:         newAcc = new HTMLTableCellAccessibleWrap(aContent, document);
118929:       break;
124439: 
126218:     case eHTMLTableRowType: {
124439:       // Accessible HTML table row must be a child of tbody/tfoot/thead of
124439:       // accessible HTML table or must be a child of accessible of HTML table.
126240:       if (aContext->IsTable()) {
124439:         nsIContent* parentContent = aContent->GetParent();
124439:         nsIFrame* parentFrame = parentContent->GetPrimaryFrame();
124439:         if (parentFrame->GetType() == nsGkAtoms::tableRowGroupFrame) {
124439:           parentContent = parentContent->GetParent();
124439:           parentFrame = parentContent->GetPrimaryFrame();
124439:         }
124439: 
124439:         if (parentFrame->GetType() == nsGkAtoms::tableOuterFrame &&
124439:             aContext->GetContent() == parentContent) {
124439:           newAcc = new HTMLTableRowAccessible(aContent, document);
124439:         }
124439:       }
118929:       break;
124439:     }
126218:     case eHTMLTextFieldType:
124439:       newAcc = new HTMLTextFieldAccessible(aContent, document);
118929:       break;
126218:     case eHyperTextType:
124603:       if (aContent->Tag() != nsGkAtoms::dt && aContent->Tag() != nsGkAtoms::dd)
124439:         newAcc = new HyperTextAccessibleWrap(aContent, document);
118929:       break;
124603: 
126218:     case eImageType:
124439:       newAcc = new ImageAccessibleWrap(aContent, document);
118929:       break;
126218:     case eOuterDocType:
124439:       newAcc = new OuterDocAccessible(aContent, document);
118929:       break;
126240:     case ePluginType: {
125637:       nsObjectFrame* objectFrame = do_QueryFrame(aFrame);
125637:       newAcc = CreatePluginAccessible(objectFrame, aContent, aContext);
125637:       break;
125637:     }
126218:     case eTextLeafType:
124439:       newAcc = new TextLeafAccessibleWrap(aContent, document);
118929:       break;
127160:     default:
127160:       MOZ_ASSERT(false);
127160:       break;
118929:   }
118929: 
118929:   return newAcc.forget();
118929: }
118929: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsIAccessibilityService (DON'T put methods here)
     1: 
 99648: Accessible*
 46207: nsAccessibilityService::AddNativeRootAccessible(void* aAtkAccessible)
     1: {
     1: #ifdef MOZ_ACCESSIBILITY_ATK
114315:   ApplicationAccessible* applicationAcc = ApplicationAcc();
 46207:   if (!applicationAcc)
106838:     return nullptr;
  2063: 
118792:   GtkWindowAccessible* nativeWnd =
118792:     new GtkWindowAccessible(static_cast<AtkObject*>(aAtkAccessible));
     1: 
118792:   if (applicationAcc->AppendChild(nativeWnd))
118792:     return nativeWnd;
     1: #endif
 46207: 
106838:   return nullptr;
     1: }
     1: 
 46207: void
 99648: nsAccessibilityService::RemoveNativeRootAccessible(Accessible* aAccessible)
     1: {
     1: #ifdef MOZ_ACCESSIBILITY_ATK
114315:   ApplicationAccessible* applicationAcc = ApplicationAcc();
  2063: 
 46207:   if (applicationAcc)
 46207:     applicationAcc->RemoveChild(aAccessible);
     1: #endif
     1: }
     1: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // NS_GetAccessibilityService
 38359: ////////////////////////////////////////////////////////////////////////////////
     1: 
 37808: /**
 37808:  * Return accessibility service; creating one if necessary.
 37808:  */
     1: nsresult
 37808: NS_GetAccessibilityService(nsIAccessibilityService** aResult)
     1: {
 30820:   NS_ENSURE_TRUE(aResult, NS_ERROR_NULL_POINTER);
106838:   *aResult = nullptr;
     1:  
 43310:   if (nsAccessibilityService::gAccessibilityService) {
 43310:     NS_ADDREF(*aResult = nsAccessibilityService::gAccessibilityService);
 43310:     return NS_OK;
     1:   }
 30820: 
 43310:   nsRefPtr<nsAccessibilityService> service = new nsAccessibilityService();
 43310:   NS_ENSURE_TRUE(service, NS_ERROR_OUT_OF_MEMORY);
 43310: 
 43310:   if (!service->Init()) {
 43310:     service->Shutdown();
 43310:     return NS_ERROR_FAILURE;
 43310:   }
 43310: 
 76374:   statistics::A11yInitialized();
 76374: 
 43310:   nsAccessibilityService::gAccessibilityService = service;
 43310:   NS_ADDREF(*aResult = service);
 43310: 
 30820:   return NS_OK;
     1: }
 30820: 
 38359: ////////////////////////////////////////////////////////////////////////////////
 38359: // nsAccessibilityService private (DON'T put methods here)
 38359: 
 31673: #ifdef MOZ_XUL
 99648: already_AddRefed<Accessible>
 43504: nsAccessibilityService::CreateAccessibleForXULTree(nsIContent* aContent,
 99568:                                                    DocAccessible* aDoc)
 31673: {
137522:   nsIContent* child = nsTreeUtils::GetDescendantChild(aContent,
137522:                                                       nsGkAtoms::treechildren);
137522:   if (!child)
106838:     return nullptr;
 31673: 
137522:   nsTreeBodyFrame* treeFrame = do_QueryFrame(child->GetPrimaryFrame());
137522:   if (!treeFrame)
106838:     return nullptr;
 38359: 
137522:   nsRefPtr<nsTreeColumns> treeCols = treeFrame->Columns();
108991:   int32_t count = 0;
137522:   treeCols->GetCount(&count);
 31673: 
 46338:   // Outline of list accessible.
 46338:   if (count == 1) {
137522:     Accessible* accessible = new XULTreeAccessible(aContent, aDoc, treeFrame);
116046:     NS_ADDREF(accessible);
 46338:     return accessible;
 46338:   }
 46338: 
 46338:   // Table or tree table accessible.
137522:   Accessible* accessible = new XULTreeGridAccessibleWrap(aContent, aDoc, treeFrame);
116046:   NS_ADDREF(accessible);
 46338:   return accessible;
 31673: }
 31673: #endif
 79384: 
 79384: ////////////////////////////////////////////////////////////////////////////////
 79384: // Services
 79384: ////////////////////////////////////////////////////////////////////////////////
 79384: 
102366: namespace mozilla {
102366: namespace a11y {
102366: 
102366: FocusManager*
102366: FocusMgr()
 79384: {
 79384:   return nsAccessibilityService::gAccessibilityService;
 79384: }
102366: 
135305: SelectionManager*
135305: SelectionMgr()
135305: {
135305:   return nsAccessibilityService::gAccessibilityService;
135305: }
135305: 
114315: ApplicationAccessible*
114315: ApplicationAcc()
114315: {
114315:   return nsAccessibilityService::gApplicationAccessible;
114315: }
114315: 
102366: EPlatformDisabledState
102366: PlatformDisabledState()
102366: {
102366:   static int disabledState = 0xff;
102366: 
102366:   if (disabledState == 0xff) {
102366:     disabledState = Preferences::GetInt("accessibility.force_disabled", 0);
102366:     if (disabledState < ePlatformIsForceEnabled)
102366:       disabledState = ePlatformIsForceEnabled;
102366:     else if (disabledState > ePlatformIsDisabled)
102366:       disabledState = ePlatformIsDisabled;
102366:   }
102366: 
102366:   return (EPlatformDisabledState)disabledState;
102366: }
102366: 
102366: }
102366: }
