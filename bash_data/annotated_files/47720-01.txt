    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  *   Vladimir Vukicevic <vladimir@pobox.com>
    1:  * Portions created by the Initial Developer are Copyright (C) 2005
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
42402: #include "nsHTMLCanvasElement.h"
42402: 
    1: #include "plbase64.h"
    1: #include "nsNetUtil.h"
    1: #include "prmem.h"
    1: 
    1: #include "nsIScriptSecurityManager.h"
    1: #include "nsIXPConnect.h"
    1: #include "jsapi.h"
    1: 
42402: #include "nsFrameManager.h"
42402: #include "ImageLayers.h"
42402: #include "BasicLayers.h"
30125: 
    1: #define DEFAULT_CANVAS_WIDTH 300
    1: #define DEFAULT_CANVAS_HEIGHT 150
    1: 
42402: using namespace mozilla;
42402: using namespace mozilla::layers;
    1: 
    1: nsGenericHTMLElement*
43386: NS_NewHTMLCanvasElement(nsINodeInfo *aNodeInfo, PRUint32 aFromParser)
    1: {
11169:   return new nsHTMLCanvasElement(aNodeInfo);
    1: }
    1: 
    1: nsHTMLCanvasElement::nsHTMLCanvasElement(nsINodeInfo *aNodeInfo)
    1:   : nsGenericHTMLElement(aNodeInfo), mWriteOnly(PR_FALSE)
    1: {
    1: }
    1: 
    1: nsHTMLCanvasElement::~nsHTMLCanvasElement()
    1: {
    1: }
43655: 
43655: NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLCanvasElement)
43655: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLCanvasElement,
43655:                                                   nsGenericHTMLElement)
43655:   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
43655: NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
    1: 
    1: NS_IMPL_ADDREF_INHERITED(nsHTMLCanvasElement, nsGenericElement)
    1: NS_IMPL_RELEASE_INHERITED(nsHTMLCanvasElement, nsGenericElement)
    1: 
40490: DOMCI_DATA(HTMLCanvasElement, nsHTMLCanvasElement)
40490: 
43655: NS_INTERFACE_TABLE_HEAD_CYCLE_COLLECTION_INHERITED(nsHTMLCanvasElement)
21218:   NS_HTML_CONTENT_INTERFACE_TABLE2(nsHTMLCanvasElement,
 4838:                                    nsIDOMHTMLCanvasElement,
42402:                                    nsICanvasElementExternal)
21218:   NS_HTML_CONTENT_INTERFACE_TABLE_TO_MAP_SEGUE(nsHTMLCanvasElement,
21218:                                                nsGenericHTMLElement)
 4838: NS_HTML_CONTENT_INTERFACE_TABLE_TAIL_CLASSINFO(HTMLCanvasElement)
    1: 
    1: NS_IMPL_ELEMENT_CLONE(nsHTMLCanvasElement)
    1: 
    1: nsIntSize
    1: nsHTMLCanvasElement::GetWidthHeight()
    1: {
    1:   nsIntSize size(0,0);
    1:   const nsAttrValue* value;
    1: 
    1:   if ((value = GetParsedAttr(nsGkAtoms::width)) &&
    1:       value->Type() == nsAttrValue::eInteger)
    1:   {
    1:       size.width = value->GetIntegerValue();
    1:   }
    1: 
    1:   if ((value = GetParsedAttr(nsGkAtoms::height)) &&
    1:       value->Type() == nsAttrValue::eInteger)
    1:   {
    1:       size.height = value->GetIntegerValue();
    1:   }
    1: 
    1:   if (size.width <= 0)
    1:     size.width = DEFAULT_CANVAS_WIDTH;
    1:   if (size.height <= 0)
    1:     size.height = DEFAULT_CANVAS_HEIGHT;
    1: 
    1:   return size;
    1: }
    1: 
    1: NS_IMPL_INT_ATTR_DEFAULT_VALUE(nsHTMLCanvasElement, Width, width, DEFAULT_CANVAS_WIDTH)
    1: NS_IMPL_INT_ATTR_DEFAULT_VALUE(nsHTMLCanvasElement, Height, height, DEFAULT_CANVAS_HEIGHT)
15234: NS_IMPL_BOOL_ATTR(nsHTMLCanvasElement, MozOpaque, moz_opaque)
    1: 
    1: nsresult
    1: nsHTMLCanvasElement::SetAttr(PRInt32 aNameSpaceID, nsIAtom* aName,
    1:                              nsIAtom* aPrefix, const nsAString& aValue,
    1:                              PRBool aNotify)
    1: {
    1:   nsresult rv = nsGenericHTMLElement::SetAttr(aNameSpaceID, aName, aPrefix, aValue,
    1:                                               aNotify);
    1:   if (NS_SUCCEEDED(rv) && mCurrentContext &&
15234:       (aName == nsGkAtoms::width || aName == nsGkAtoms::height || aName == nsGkAtoms::moz_opaque))
    1:   {
    1:     rv = UpdateContext();
    1:     NS_ENSURE_SUCCESS(rv, rv);
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
35581: nsresult
35581: nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
35581: {
35581:   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
35581:   NS_ENSURE_SUCCESS(rv, rv);
35581:   if (aDest->GetOwnerDoc()->IsStaticDocument()) {
35581:     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
35581:     nsCOMPtr<nsISupports> cxt;
35581:     dest->GetContext(NS_LITERAL_STRING("2d"), getter_AddRefs(cxt));
35581:     nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
35581:     if (context2d) {
35581:       context2d->DrawImage(const_cast<nsHTMLCanvasElement*>(this),
35581:                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
35581:     }
35581:   }
35581:   return rv;
35581: }
35581: 
    1: nsChangeHint
    1: nsHTMLCanvasElement::GetAttributeChangeHint(const nsIAtom* aAttribute,
    1:                                             PRInt32 aModType) const
    1: {
    1:   nsChangeHint retval =
    1:     nsGenericHTMLElement::GetAttributeChangeHint(aAttribute, aModType);
    1:   if (aAttribute == nsGkAtoms::width ||
    1:       aAttribute == nsGkAtoms::height)
    1:   {
    1:     NS_UpdateHint(retval, NS_STYLE_HINT_REFLOW);
15234:   } else if (aAttribute == nsGkAtoms::moz_opaque)
15234:   {
15234:     NS_UpdateHint(retval, NS_STYLE_HINT_VISUAL);
    1:   }
    1:   return retval;
    1: }
    1: 
    1: PRBool
    1: nsHTMLCanvasElement::ParseAttribute(PRInt32 aNamespaceID,
    1:                                     nsIAtom* aAttribute,
    1:                                     const nsAString& aValue,
    1:                                     nsAttrValue& aResult)
    1: {
41186:   if (aNamespaceID == kNameSpaceID_None &&
41186:       (aAttribute == nsGkAtoms::width || aAttribute == nsGkAtoms::height)) {
    1:     return aResult.ParseIntWithBounds(aValue, 0);
    1:   }
    1: 
    1:   return nsGenericHTMLElement::ParseAttribute(aNamespaceID, aAttribute, aValue,
    1:                                               aResult);
    1: }
    1: 
    1: 
    1: // nsHTMLCanvasElement::toDataURL
    1: 
    1: NS_IMETHODIMP
34226: nsHTMLCanvasElement::ToDataURL(const nsAString& aType, const nsAString& aParams,
34226:                                PRUint8 optional_argc, nsAString& aDataURL)
    1: {
    1:   // do a trust check if this is a write-only canvas
    1:   // or if we're trying to use the 2-arg form
34226:   if ((mWriteOnly || optional_argc >= 2) &&
34226:       !nsContentUtils::IsCallerTrustedForRead()) {
    1:     return NS_ERROR_DOM_SECURITY_ERR;
    1:   }
    1: 
47330:   return ToDataURLImpl(aType, aParams, aDataURL);
    1: }
    1: 
    1: 
    1: // nsHTMLCanvasElement::toDataURLAs
    1: //
    1: // Native-callers only
    1: 
    1: NS_IMETHODIMP
    1: nsHTMLCanvasElement::ToDataURLAs(const nsAString& aMimeType,
    1:                                  const nsAString& aEncoderOptions,
    1:                                  nsAString& aDataURL)
    1: {
    1:   return ToDataURLImpl(aMimeType, aEncoderOptions, aDataURL);
    1: }
    1: 
    1: nsresult
    1: nsHTMLCanvasElement::ToDataURLImpl(const nsAString& aMimeType,
    1:                                    const nsAString& aEncoderOptions,
    1:                                    nsAString& aDataURL)
    1: {
47330:   bool fallbackToPNG = false;
    1:   
    1:   // We get an input stream from the context. If more than one context type
    1:   // is supported in the future, this will have to be changed to do the right
    1:   // thing. For now, just assume that the 2D context has all the goods.
    1:   nsCOMPtr<nsICanvasRenderingContextInternal> context;
47330:   nsresult rv = GetContext(NS_LITERAL_STRING("2d"), getter_AddRefs(context));
    1:   NS_ENSURE_SUCCESS(rv, rv);
47720:   if (!context) {
47720:     // XXX bug 578349
47720:     return NS_ERROR_NOT_IMPLEMENTED;
47720:   }
    1: 
    1:   // get image bytes
    1:   nsCOMPtr<nsIInputStream> imgStream;
    1:   NS_ConvertUTF16toUTF8 aMimeType8(aMimeType);
 6313:   rv = context->GetInputStream(nsPromiseFlatCString(aMimeType8).get(),
 6313:                                nsPromiseFlatString(aEncoderOptions).get(),
    1:                                getter_AddRefs(imgStream));
47330:   if (NS_FAILED(rv)) {
47330:     // Use image/png instead.
    1:     // XXX ERRMSG we need to report an error to developers here! (bug 329026)
47330:     fallbackToPNG = true;
47330:     rv = context->GetInputStream("image/png",
47330:                                  nsPromiseFlatString(aEncoderOptions).get(),
47330:                                  getter_AddRefs(imgStream));
    1:     NS_ENSURE_SUCCESS(rv, rv);
47330:   }
    1: 
    1:   // Generally, there will be only one chunk of data, and it will be available
    1:   // for us to read right away, so optimize this case.
    1:   PRUint32 bufSize;
    1:   rv = imgStream->Available(&bufSize);
    1:   NS_ENSURE_SUCCESS(rv, rv);
    1: 
    1:   // ...leave a little extra room so we can call read again and make sure we
    1:   // got everything. 16 bytes for better padding (maybe)
    1:   bufSize += 16;
    1:   PRUint32 imgSize = 0;
    1:   char* imgData = (char*)PR_Malloc(bufSize);
    1:   if (! imgData)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   PRUint32 numReadThisTime = 0;
    1:   while ((rv = imgStream->Read(&imgData[imgSize], bufSize - imgSize,
    1:                          &numReadThisTime)) == NS_OK && numReadThisTime > 0) {
    1:     imgSize += numReadThisTime;
    1:     if (imgSize == bufSize) {
    1:       // need a bigger buffer, just double
    1:       bufSize *= 2;
    1:       char* newImgData = (char*)PR_Realloc(imgData, bufSize);
    1:       if (! newImgData) {
    1:         PR_Free(imgData);
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1:       }
    1:       imgData = newImgData;
    1:     }
    1:   }
    1: 
    1:   // base 64, result will be NULL terminated
    1:   char* encodedImg = PL_Base64Encode(imgData, imgSize, nsnull);
    1:   PR_Free(imgData);
    1:   if (!encodedImg) // not sure why this would fail
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   // build data URL string
47330:   if (fallbackToPNG)
47330:     aDataURL = NS_LITERAL_STRING("data:image/png;base64,") +
47330:       NS_ConvertUTF8toUTF16(encodedImg);
47330:   else
    1:     aDataURL = NS_LITERAL_STRING("data:") + aMimeType +
    1:       NS_LITERAL_STRING(";base64,") + NS_ConvertUTF8toUTF16(encodedImg);
    1: 
    1:   PR_Free(encodedImg);
    1: 
    1:   return NS_OK;
    1: }
    1: 
46756: nsresult
46756: nsHTMLCanvasElement::GetContextHelper(const nsAString& aContextId,
46756:                                       nsICanvasRenderingContextInternal **aContext)
    1: {
46756:   NS_ENSURE_ARG(aContext);
    1: 
    1:   nsCString ctxId;
    1:   ctxId.Assign(NS_LossyConvertUTF16toASCII(aContextId));
    1: 
    1:   // check that ctxId is clamped to A-Za-z0-9_-
    1:   for (PRUint32 i = 0; i < ctxId.Length(); i++) {
    1:     if ((ctxId[i] < 'A' || ctxId[i] > 'Z') &&
    1:         (ctxId[i] < 'a' || ctxId[i] > 'z') &&
    1:         (ctxId[i] < '0' || ctxId[i] > '9') &&
    1:         (ctxId[i] != '-') &&
    1:         (ctxId[i] != '_'))
    1:     {
    1:       // XXX ERRMSG we need to report an error to developers here! (bug 329026)
47330:       return NS_OK;
    1:     }
    1:   }
    1: 
    1:   nsCString ctxString("@mozilla.org/content/canvas-rendering-context;1?id=");
    1:   ctxString.Append(ctxId);
    1: 
46756:   nsresult rv;
46756:   nsCOMPtr<nsICanvasRenderingContextInternal> ctx =
46756:     do_CreateInstance(nsPromiseFlatCString(ctxString).get(), &rv);
46756:   if (rv == NS_ERROR_OUT_OF_MEMORY) {
46756:     *aContext = nsnull;
    1:     return NS_ERROR_OUT_OF_MEMORY;
46756:   }
46756:   if (NS_FAILED(rv)) {
46756:     *aContext = nsnull;
42402:     // XXX ERRMSG we need to report an error to developers here! (bug 329026)
47330:     return NS_OK;
46756:   }
42402: 
46756:   rv = ctx->SetCanvasElement(this);
42402:   if (NS_FAILED(rv)) {
46756:     *aContext = nsnull;
42402:     return rv;
42402:   }
42402: 
46756:   *aContext = ctx.forget().get();
46756: 
46756:   return rv;
46756: }
46756: 
46756: NS_IMETHODIMP
46756: nsHTMLCanvasElement::GetContext(const nsAString& aContextId,
46756:                                 nsISupports **aContext)
46756: {
46756:   nsresult rv;
46756: 
46756:   if (mCurrentContextId.IsEmpty()) {
46756:     rv = GetContextHelper(aContextId, getter_AddRefs(mCurrentContext));
47720:     NS_ENSURE_SUCCESS(rv, rv);
47720:     if (!mCurrentContext) {
47720:       return NS_OK;
47720:     }
    1: 
43655:     // Ensure that the context participates in CC.  Note that returning a
43655:     // CC participant from QI doesn't addref.
43655:     nsXPCOMCycleCollectionParticipant *cp = nsnull;
43655:     CallQueryInterface(mCurrentContext, &cp);
43655:     if (!cp) {
43655:       mCurrentContext = nsnull;
43655:       return NS_ERROR_FAILURE;
43655:     }
43655: 
46953:     rv = mCurrentContext->SetCanvasElement(this);
 2756:     if (NS_FAILED(rv)) {
 2756:       mCurrentContext = nsnull;
 2756:       return rv;
 2756:     }
    1: 
    1:     rv = UpdateContext();
 2756:     if (NS_FAILED(rv)) {
 2756:       mCurrentContext = nsnull;
 2756:       return rv;
 2756:     }
    1: 
    1:     mCurrentContextId.Assign(aContextId);
    1:   } else if (!mCurrentContextId.Equals(aContextId)) {
    1:     //XXX eventually allow for more than one active context on a given canvas
47330:     return NS_OK;
    1:   }
    1: 
    1:   NS_ADDREF (*aContext = mCurrentContext);
    1:   return NS_OK;
    1: }
    1: 
46756: NS_IMETHODIMP
46902: nsHTMLCanvasElement::MozGetIPCContext(const nsAString& aContextId,
46756:                                       nsISupports **aContext)
46756: {
46756: #ifdef MOZ_IPC
46756:   if(!nsContentUtils::IsCallerTrustedForRead()) {
46756:     // XXX ERRMSG we need to report an error to developers here! (bug 329026)
46756:     return NS_ERROR_DOM_SECURITY_ERR;
46756:   }
46756: 
46756:   // We only support 2d shmem contexts for now.
46756:   if (!aContextId.Equals(NS_LITERAL_STRING("2d")))
46756:     return NS_ERROR_INVALID_ARG;
46756: 
46756:   nsresult rv;
46756: 
46756:   if (mCurrentContextId.IsEmpty()) {
46756:     rv = GetContextHelper(aContextId, getter_AddRefs(mCurrentContext));
47720:     NS_ENSURE_SUCCESS(rv, rv);
47720:     if (!mCurrentContext) {
47720:       return NS_OK;
47720:     }
46756: 
46902:     mCurrentContext->SetIsIPC(PR_TRUE);
46756: 
46756:     rv = UpdateContext();
46756:     if (NS_FAILED(rv)) {
46756:       mCurrentContext = nsnull;
46756:       return rv;
46756:     }
46756: 
46756:     mCurrentContextId.Assign(aContextId);
46756:   } else if (!mCurrentContextId.Equals(aContextId)) {
46756:     //XXX eventually allow for more than one active context on a given canvas
46756:     return NS_ERROR_INVALID_ARG;
46756:   }
46756: 
46756:   NS_ADDREF (*aContext = mCurrentContext);
46756:   return NS_OK;
46756: #else
46756:   return NS_ERROR_NOT_IMPLEMENTED;
46756: #endif
46756: }
46756: 
    1: nsresult
    1: nsHTMLCanvasElement::UpdateContext()
    1: {
    1:   nsresult rv = NS_OK;
    1:   if (mCurrentContext) {
    1:     nsIntSize sz = GetWidthHeight();
15234:     rv = mCurrentContext->SetIsOpaque(GetIsOpaque());
    1:     rv = mCurrentContext->SetDimensions(sz.width, sz.height);
    1:   }
    1: 
    1:   return rv;
    1: }
    1: 
42402: nsIFrame *
42402: nsHTMLCanvasElement::GetPrimaryCanvasFrame()
    1: {
42402:   return GetPrimaryFrame(Flush_Frames);
    1: }
    1: 
42402: nsIntSize
42402: nsHTMLCanvasElement::GetSize()
    1: {
42402:   return GetWidthHeight();
    1: }
    1: 
    1: PRBool
    1: nsHTMLCanvasElement::IsWriteOnly()
    1: {
    1:   return mWriteOnly;
    1: }
    1: 
    1: void
    1: nsHTMLCanvasElement::SetWriteOnly()
    1: {
    1:   mWriteOnly = PR_TRUE;
    1: }
 6313: 
42402: void
42402: nsHTMLCanvasElement::InvalidateFrame(const gfxRect* damageRect)
 6313: {
30125:   // We don't need to flush anything here; if there's no frame or if
30125:   // we plan to reframe we don't need to invalidate it anyway.
36655:   nsIFrame *frame = GetPrimaryFrame();
42402:   if (!frame)
42402:     return;
 6313: 
42402:   if (damageRect) {
27097:     nsRect contentArea(frame->GetContentRect());
27097:     nsIntSize size = GetWidthHeight();
27097: 
27097:     // damageRect and size are in CSS pixels; contentArea is in appunits
27097:     // We want a rect in appunits; so avoid doing pixels-to-appunits and
27097:     // vice versa conversion here.
42402:     gfxRect realRect(*damageRect);
27097:     realRect.Scale(contentArea.width / gfxFloat(size.width),
27097:                    contentArea.height / gfxFloat(size.height));
27097:     realRect.RoundOut();
27097: 
27097:     // then make it a nsRect
27097:     nsRect invalRect(realRect.X(), realRect.Y(),
27097:                      realRect.Width(), realRect.Height());
27097: 
27097:     // account for border/padding
27097:     invalRect.MoveBy(contentArea.TopLeft() - frame->GetPosition());
27097: 
27097:     frame->Invalidate(invalRect);
42402:   } else {
42402:     nsRect r(frame->GetContentRect() - frame->GetPosition());
42402:     frame->Invalidate(r);
 6313:   }
 6313: }
14812: 
14812: PRInt32
14812: nsHTMLCanvasElement::CountContexts()
14812: {
14812:   if (mCurrentContext)
14812:     return 1;
14812: 
14812:   return 0;
14812: }
14812: 
14812: nsICanvasRenderingContextInternal *
14812: nsHTMLCanvasElement::GetContextAtIndex (PRInt32 index)
14812: {
14812:   if (mCurrentContext && index == 0)
14812:     return mCurrentContext.get();
14812: 
14812:   return NULL;
14812: }
25788: 
25788: PRBool
25788: nsHTMLCanvasElement::GetIsOpaque()
25788: {
25788:   return HasAttr(kNameSpaceID_None, nsGkAtoms::moz_opaque);
25788: }
42402: 
42402: already_AddRefed<CanvasLayer>
42402: nsHTMLCanvasElement::GetCanvasLayer(LayerManager *aManager)
42402: {
42402:   if (!mCurrentContext)
42402:     return nsnull;
42402: 
42402:   return mCurrentContext->GetCanvasLayer(aManager);
42402: }
42402: 
42402: void
42402: nsHTMLCanvasElement::MarkContextClean()
42402: {
42402:   if (!mCurrentContext)
42402:     return;
42402: 
42402:   mCurrentContext->MarkContextClean();
42402: }
42402: 
42402: NS_IMETHODIMP_(nsIntSize)
42402: nsHTMLCanvasElement::GetSizeExternal()
42402: {
42402:   return GetWidthHeight();
42402: }
42402: 
42402: NS_IMETHODIMP
42402: nsHTMLCanvasElement::RenderContextsExternal(gfxContext *aContext, gfxPattern::GraphicsFilter aFilter)
42402: {
42402:   if (!mCurrentContext)
42402:     return NS_OK;
42402: 
42402:   return mCurrentContext->Render(aContext, aFilter);
42402: }
