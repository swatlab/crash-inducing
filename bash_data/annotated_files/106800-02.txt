     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 51377: #ifndef _AccEvent_H_
 51377: #define _AccEvent_H_
 39509: 
 56292: #include "nsIAccessibleEvent.h"
 56292: 
106800: #include "mozilla/a11y/Accessible.h"
  5395: 
 51377: class nsAccEvent;
 99568: class DocAccessible;
     1: 
 37339: // Constants used to point whether the event is from user input.
 37339: enum EIsFromUserInput
 37339: {
 37339:   // eNoUserInput: event is not from user input
 37339:   eNoUserInput = 0,
 37339:   // eFromUserInput: event is from user input
 37339:   eFromUserInput = 1,
 37339:   // eAutoDetect: the value should be obtained from event state manager
 37339:   eAutoDetect = -1
 37339: };
 37339: 
 43627: /**
 43627:  * Generic accessible event.
 43627:  */
 51377: class AccEvent
     1: {
     1: public:
 13167: 
 13167:   // Rule for accessible events.
 13167:   // The rule will be applied when flushing pending events.
 13167:   enum EEventRule {
 13167:      // eAllowDupes : More than one event of the same type is allowed.
 13167:      //    This event will always be emitted.
 13167:      eAllowDupes,
 39509: 
 13167:      // eCoalesceFromSameSubtree : For events of the same type from the same
 37339:      //    subtree or the same node, only the umbrella event on the ancestor
 13167:      //    will be emitted.
 13167:      eCoalesceFromSameSubtree,
 39509: 
 79384:     // eCoalesceOfSameType : For events of the same type, only the newest event
 79384:     // will be processed.
 79384:     eCoalesceOfSameType,
 39509: 
 81286:     // eCoalesceSelectionChange: coalescence of selection change events.
 81286:     eCoalesceSelectionChange,
 81286: 
 13167:      // eRemoveDupes : For repeat events, only the newest event in queue
 13167:      //    will be emitted.
 13167:      eRemoveDupes,
 39509: 
 13167:      // eDoNotEmit : This event is confirmed as a duplicate, do not emit it.
 13167:      eDoNotEmit
 13167:   };
 13167: 
     1:   // Initialize with an nsIAccessible
 99648:   AccEvent(PRUint32 aEventType, Accessible* aAccessible,
 37339:            EIsFromUserInput aIsFromUserInput = eAutoDetect,
 13167:            EEventRule aEventRule = eRemoveDupes);
     1:   // Initialize with an nsIDOMNode
 56292:   AccEvent(PRUint32 aEventType, nsINode* aNode,
 37339:            EIsFromUserInput aIsFromUserInput = eAutoDetect,
 13167:            EEventRule aEventRule = eRemoveDupes);
 51377:   virtual ~AccEvent() {}
     1: 
 51377:   // AccEvent
 37273:   PRUint32 GetEventType() const { return mEventType; }
 37273:   EEventRule GetEventRule() const { return mEventRule; }
 79445:   bool IsFromUserInput() const { return mIsFromUserInput; }
 37273: 
 99648:   Accessible* GetAccessible();
 99568:   DocAccessible* GetDocAccessible();
 39509:   nsINode* GetNode();
 39509: 
 51377:   /**
 51377:    * Create and return an XPCOM object for accessible event object.
 51377:    */
 51377:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
 51377: 
 51377:   /**
 51377:    * Down casting.
 51377:    */
 43627:   enum EventGroup {
 43627:     eGenericEvent,
 43627:     eStateChangeEvent,
 43627:     eTextChangeEvent,
 56292:     eMutationEvent,
 47106:     eHideEvent,
 56292:     eShowEvent,
 43627:     eCaretMoveEvent,
 81286:     eSelectionChangeEvent,
 91948:     eTableChangeEvent,
 91948:     eVirtualCursorChangeEvent
 43627:   };
 43627: 
 43627:   static const EventGroup kEventGroup = eGenericEvent;
 43627:   virtual unsigned int GetEventGroups() const
 43627:   {
 43627:     return 1U << eGenericEvent;
 43627:   }
 43627: 
 51377:   /**
 51377:    * Reference counting and cycle collection.
 51377:    */
 51377:   NS_INLINE_DECL_REFCOUNTING(AccEvent)
 51377:   NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS(AccEvent)
 51377: 
  1319: protected:
 37339:   /**
 37339:    * Get an accessible from event target node.
 37339:    */
 99648:   Accessible* GetAccessibleForNode() const;
  1319: 
 37339:   /**
 37339:    * Determine whether the event is from user input by event state manager if
 37339:    * it's not pointed explicetly.
 37339:    */
 37339:   void CaptureIsFromUserInput(EIsFromUserInput aIsFromUserInput);
 37339: 
 79445:   bool mIsFromUserInput;
     1:   PRUint32 mEventType;
 13167:   EEventRule mEventRule;
 99648:   nsRefPtr<Accessible> mAccessible;
 37539:   nsCOMPtr<nsINode> mNode;
   667: 
 60746:   friend class NotificationController;
     1: };
     1: 
 13167: 
 43627: /**
 43627:  * Accessible state change event.
 43627:  */
 51377: class AccStateChangeEvent: public AccEvent
   511: {
   511: public:
 99648:   AccStateChangeEvent(Accessible* aAccessible, PRUint64 aState,
 79445:                       bool aIsEnabled,
 43016:                       EIsFromUserInput aIsFromUserInput = eAutoDetect);
   511: 
 79445:   AccStateChangeEvent(nsINode* aNode, PRUint64 aState, bool aIsEnabled);
   577: 
 67790:   AccStateChangeEvent(nsINode* aNode, PRUint64 aState);
   577: 
 51377:   // AccEvent
 51377:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
   511: 
 43627:   static const EventGroup kEventGroup = eStateChangeEvent;
 43627:   virtual unsigned int GetEventGroups() const
 43627:   {
 51377:     return AccEvent::GetEventGroups() | (1U << eStateChangeEvent);
 43627:   }
 43627: 
 51377:   // AccStateChangeEvent
 67790:   PRUint64 GetState() const { return mState; }
 79445:   bool IsStateEnabled() const { return mIsEnabled; }
 43627: 
   511: private:
 67790:   PRUint64 mState;
 79445:   bool mIsEnabled;
   511: };
   511: 
 43627: 
 43627: /**
 43627:  * Accessible text change event.
 43627:  */
 51377: class AccTextChangeEvent: public AccEvent
   582: {
   582: public:
 99648:   AccTextChangeEvent(Accessible* aAccessible, PRInt32 aStart,
 79445:                      const nsAString& aModifiedText, bool aIsInserted,
 37339:                      EIsFromUserInput aIsFromUserInput = eAutoDetect);
   582: 
 51377:   // AccEvent
 51377:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
   582: 
 43627:   static const EventGroup kEventGroup = eTextChangeEvent;
 43627:   virtual unsigned int GetEventGroups() const
 43627:   {
 51377:     return AccEvent::GetEventGroups() | (1U << eTextChangeEvent);
 43627:   }
 43627: 
 51377:   // AccTextChangeEvent
 43627:   PRInt32 GetStartOffset() const { return mStart; }
 47106:   PRUint32 GetLength() const { return mModifiedText.Length(); }
 79445:   bool IsTextInserted() const { return mIsInserted; }
 51377:   void GetModifiedText(nsAString& aModifiedText)
 51377:     { aModifiedText = mModifiedText; }
 43627: 
   582: private:
   582:   PRInt32 mStart;
 79445:   bool mIsInserted;
  5395:   nsString mModifiedText;
 47106: 
 60746:   friend class NotificationController;
 47106: };
 47106: 
 47106: 
 47106: /**
 56292:  * Base class for show and hide accessible events.
 47106:  */
 56292: class AccMutationEvent: public AccEvent
 56292: {
 56292: public:
 99648:   AccMutationEvent(PRUint32 aEventType, Accessible* aTarget,
 60746:                    nsINode* aTargetNode);
 56292: 
 56292:   // Event
 56292:   static const EventGroup kEventGroup = eMutationEvent;
 56292:   virtual unsigned int GetEventGroups() const
 56292:   {
 56292:     return AccEvent::GetEventGroups() | (1U << eMutationEvent);
 56292:   }
 56292: 
 56292:   // MutationEvent
 56292:   bool IsShow() const { return mEventType == nsIAccessibleEvent::EVENT_SHOW; }
 56292:   bool IsHide() const { return mEventType == nsIAccessibleEvent::EVENT_HIDE; }
 56292: 
 56292: protected:
 56292:   nsRefPtr<AccTextChangeEvent> mTextChangeEvent;
 56292: 
 60746:   friend class NotificationController;
 56292: };
 56292: 
 56292: 
 56292: /**
 56292:  * Accessible hide event.
 56292:  */
 56292: class AccHideEvent: public AccMutationEvent
 47106: {
 47106: public:
 99648:   AccHideEvent(Accessible* aTarget, nsINode* aTargetNode);
 47106: 
 51377:   // Event
 90040:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
 90040: 
 47106:   static const EventGroup kEventGroup = eHideEvent;
 47106:   virtual unsigned int GetEventGroups() const
 47106:   {
 56292:     return AccMutationEvent::GetEventGroups() | (1U << eHideEvent);
 47106:   }
 47106: 
 90040:   // AccHideEvent
 99648:   Accessible* TargetParent() const { return mParent; }
 99648:   Accessible* TargetNextSibling() const { return mNextSibling; }
 99648:   Accessible* TargetPrevSibling() const { return mPrevSibling; }
 90040: 
 47106: protected:
 99648:   nsRefPtr<Accessible> mParent;
 99648:   nsRefPtr<Accessible> mNextSibling;
 99648:   nsRefPtr<Accessible> mPrevSibling;
 47106: 
 60746:   friend class NotificationController;
   582: };
   582: 
 43627: 
 43627: /**
 56292:  * Accessible show event.
 56292:  */
 56292: class AccShowEvent: public AccMutationEvent
 56292: {
 56292: public:
 99648:   AccShowEvent(Accessible* aTarget, nsINode* aTargetNode);
 56292: 
 56292:   // Event
 56292:   static const EventGroup kEventGroup = eShowEvent;
 56292:   virtual unsigned int GetEventGroups() const
 56292:   {
 56292:     return AccMutationEvent::GetEventGroups() | (1U << eShowEvent);
 56292:   }
 56292: };
 56292: 
 56292: 
 56292: /**
 43627:  * Accessible caret move event.
 43627:  */
 51377: class AccCaretMoveEvent: public AccEvent
  2688: {
  2688: public:
 99648:   AccCaretMoveEvent(Accessible* aAccessible, PRInt32 aCaretOffset);
 51377:   AccCaretMoveEvent(nsINode* aNode);
  2688: 
 51377:   // AccEvent
 51377:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
  2688: 
 43627:   static const EventGroup kEventGroup = eCaretMoveEvent;
 43627:   virtual unsigned int GetEventGroups() const
 43627:   {
 51377:     return AccEvent::GetEventGroups() | (1U << eCaretMoveEvent);
 43627:   }
 43627: 
 51377:   // AccCaretMoveEvent
 43627:   PRInt32 GetCaretOffset() const { return mCaretOffset; }
 43627: 
  2688: private:
  2688:   PRInt32 mCaretOffset;
  2688: };
  2688: 
 43627: 
 43627: /**
 79641:  * Accessible widget selection change event.
 79641:  */
 81286: class AccSelChangeEvent : public AccEvent
 79641: {
 79641: public:
 81286:   enum SelChangeType {
 81286:     eSelectionAdd,
 81286:     eSelectionRemove
 81286:   };
 79641: 
 99648:   AccSelChangeEvent(Accessible* aWidget, Accessible* aItem,
 81286:                     SelChangeType aSelChangeType);
 81286: 
 81286:   virtual ~AccSelChangeEvent() { }
 81286: 
 81286:   // AccEvent
 81286:   static const EventGroup kEventGroup = eSelectionChangeEvent;
 81286:   virtual unsigned int GetEventGroups() const
 81286:   {
 81286:     return AccEvent::GetEventGroups() | (1U << eSelectionChangeEvent);
 81286:   }
 81286: 
 81286:   // AccSelChangeEvent
 99648:   Accessible* Widget() const { return mWidget; }
 81286: 
 81286: private:
 99648:   nsRefPtr<Accessible> mWidget;
 99648:   nsRefPtr<Accessible> mItem;
 81286:   SelChangeType mSelChangeType;
 81286:   PRUint32 mPreceedingCount;
 81286:   AccSelChangeEvent* mPackedEvent;
 81286: 
 81286:   friend class NotificationController;
 79641: };
 79641: 
 79641: 
 79641: /**
 43627:  * Accessible table change event.
 43627:  */
 51377: class AccTableChangeEvent : public AccEvent
 43627: {
 10375: public:
 99648:   AccTableChangeEvent(Accessible* aAccessible, PRUint32 aEventType,
 56292:                       PRInt32 aRowOrColIndex, PRInt32 aNumRowsOrCols);
     1: 
 51377:   // AccEvent
 51377:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
 10375: 
 43627:   static const EventGroup kEventGroup = eTableChangeEvent;
 43627:   virtual unsigned int GetEventGroups() const
 43627:   {
 51377:     return AccEvent::GetEventGroups() | (1U << eTableChangeEvent);
 43627:   }
 43627: 
 51377:   // AccTableChangeEvent
 43627:   PRUint32 GetIndex() const { return mRowOrColIndex; }
 43627:   PRUint32 GetCount() const { return mNumRowsOrCols; }
 43627: 
 10375: private:
 10375:   PRUint32 mRowOrColIndex;   // the start row/column after which the rows are inserted/deleted.
 10375:   PRUint32 mNumRowsOrCols;   // the number of inserted/deleted rows/columns
     1: };
     1: 
 91948: /**
 91948:  * Accessible virtual cursor change event.
 91948:  */
 91948: class AccVCChangeEvent : public AccEvent
 91948: {
 91948: public:
 99648:   AccVCChangeEvent(Accessible* aAccessible,
 91948:                    nsIAccessible* aOldAccessible,
102486:                    PRInt32 aOldStart, PRInt32 aOldEnd,
102486:                    PRInt16 aReason);
 91948: 
 91948:   virtual ~AccVCChangeEvent() { }
 91948: 
 91948:   // AccEvent
 91948:   virtual already_AddRefed<nsAccEvent> CreateXPCOMObject();
 91948: 
 91948:   static const EventGroup kEventGroup = eVirtualCursorChangeEvent;
 91948:   virtual unsigned int GetEventGroups() const
 91948:   {
 91948:     return AccEvent::GetEventGroups() | (1U << eVirtualCursorChangeEvent);
 91948:   }
 91948: 
 91948:   // AccTableChangeEvent
 91948:   nsIAccessible* OldAccessible() const { return mOldAccessible; }
 91948:   PRInt32 OldStartOffset() const { return mOldStart; }
 91948:   PRInt32 OldEndOffset() const { return mOldEnd; }
102486:   PRInt32 Reason() const { return mReason; }
 91948: 
 91948: private:
 91948:   nsRefPtr<nsIAccessible> mOldAccessible;
 91948:   PRInt32 mOldStart;
 91948:   PRInt32 mOldEnd;
102486:   PRInt16 mReason;
 91948: };
 43627: 
 43627: /**
 43627:  * Downcast the generic accessible event object to derived type.
 43627:  */
 43627: class downcast_accEvent
 43627: {
 43627: public:
 51377:   downcast_accEvent(AccEvent* e) : mRawPtr(e) { }
 43627: 
 43627:   template<class Destination>
 43627:   operator Destination*() {
 43627:     if (!mRawPtr)
 43627:       return nsnull;
 43627: 
 43627:     return mRawPtr->GetEventGroups() & (1U << Destination::kEventGroup) ?
 43627:       static_cast<Destination*>(mRawPtr) : nsnull;
 43627:   }
 43627: 
 43627: private:
 51377:   AccEvent* mRawPtr;
 43627: };
 43627: 
     1: #endif
  2950: 
