53590: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
53590:  * vim: set ts=4 sw=4 et tw=99:
53590:  *
53590:  * ***** BEGIN LICENSE BLOCK *****
53590:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
53590:  *
53590:  * The contents of this file are subject to the Mozilla Public License Version
53590:  * 1.1 (the "License"); you may not use this file except in compliance with
53590:  * the License. You may obtain a copy of the License at
53590:  * http://www.mozilla.org/MPL/
53590:  *
53590:  * Software distributed under the License is distributed on an "AS IS" basis,
53590:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
53590:  * for the specific language governing rights and limitations under the
53590:  * License.
53590:  *
53590:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
53590:  * May 28, 2008.
53590:  *
53590:  * The Initial Developer of the Original Code is
53590:  *   Brendan Eich <brendan@mozilla.org>
53590:  *
53590:  * Contributor(s):
53590:  *   David Anderson <danderson@mozilla.com>
53590:  *
53590:  * Alternatively, the contents of this file may be used under the terms of
53590:  * either of the GNU General Public License Version 2 or later (the "GPL"),
53590:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
53590:  * in which case the provisions of the GPL or the LGPL are applicable instead
53590:  * of those above. If you wish to allow use of your version of this file only
53590:  * under the terms of either the GPL or the LGPL, and not to allow others to
53590:  * use your version of this file under the terms of the MPL, indicate your
53590:  * decision by deleting the provisions above and replace them with the notice
53590:  * and other provisions required by the GPL or the LGPL. If you do not delete
53590:  * the provisions above, a recipient may use your version of this file under
53590:  * the terms of any one of the MPL, the GPL or the LGPL.
53590:  *
53590:  * ***** END LICENSE BLOCK ***** */
53590: 
53590: #if !defined jsjaeger_inl_frame_asm_h__ && defined JS_METHODJIT && defined JS_MONOIC
53590: #define jsjaeger_inl_frame_asm_h__
53590: 
53590: #include "assembler/assembler/MacroAssembler.h"
53590: #include "assembler/assembler/CodeLocation.h"
53590: #include "methodjit/MethodJIT.h"
53590: #include "CodeGenIncludes.h"
53590: 
53590: namespace js {
53590: namespace mjit {
53590: 
53590: struct AdjustedFrame {
53590:     AdjustedFrame(uint32 baseOffset)
53590:      : baseOffset(baseOffset)
53590:     { }
53590: 
53590:     uint32 baseOffset;
53590: 
53590:     JSC::MacroAssembler::Address addrOf(uint32 offset) {
53590:         return JSC::MacroAssembler::Address(JSFrameReg, baseOffset + offset);
53590:     }
53590: };
53590: 
53590: /*
53840:  * This is used for emitting code to inline callee-side frame creation and
53840:  * should jit code equivalent to JSStackFrame::initCallFrameCallerHalf.
53590:  *
53590:  * Once finished, JSFrameReg is advanced to be the new fp.
53590:  */
53590: class InlineFrameAssembler {
53590:     typedef JSC::MacroAssembler::RegisterID RegisterID;
53590:     typedef JSC::MacroAssembler::Address Address;
53590:     typedef JSC::MacroAssembler::Imm32 Imm32;
53590:     typedef JSC::MacroAssembler::ImmPtr ImmPtr;
53590: 
53590:     Assembler &masm;
53590:     uint32     frameDepth;      // script->nfixed + stack depth at caller call site
53590:     uint32     argc;            // number of args being passed to the function
53590:     RegisterID funObjReg;       // register containing the function object (callee)
53590:     jsbytecode *pc;             // bytecode location at the caller call site
53590:     uint32     flags;           // frame flags
53590: 
53590:   public:
53590:     /*
53590:      * Register state, so consumers of this class can restrict which registers
53590:      * can and can't be clobbered.
53590:      */
53590:     Registers  tempRegs;
53590: 
54163:     InlineFrameAssembler(Assembler &masm, ic::CallICInfo &ic, uint32 flags)
54163:       : masm(masm), pc(ic.pc), flags(flags)
53590:     {
53590:         frameDepth = ic.frameDepth;
53590:         argc = ic.argc;
53590:         funObjReg = ic.funObjReg;
53590:         tempRegs.takeReg(ic.funPtrReg);
53590:         tempRegs.takeReg(funObjReg);
53590:     }
53590: 
54163:     InlineFrameAssembler(Assembler &masm, Compiler::CallGenInfo &gen, uint32 flags)
54163:       : masm(masm), pc(gen.pc), flags(flags)
53590:     {
53590:         frameDepth = gen.frameDepth;
53590:         argc = gen.argc;
53590:         funObjReg = gen.funObjReg;
53590:         tempRegs.takeReg(funObjReg);
53590:     }
53590: 
53590:     inline void assemble()
53590:     {
53840:         JS_ASSERT((flags & ~JSFRAME_CONSTRUCTING) == 0);
53840: 
53590:         RegisterID t0 = tempRegs.takeAnyReg();
53590: 
53840:         masm.storePtr(ImmPtr(pc), Address(JSFrameReg, JSStackFrame::offsetOfSavedpc()));
53590: 
53590:         AdjustedFrame adj(sizeof(JSStackFrame) + frameDepth * sizeof(Value));
53840:         masm.store32(Imm32(JSFRAME_FUNCTION | flags), adj.addrOf(JSStackFrame::offsetOfFlags()));
53590:         masm.loadPtr(Address(funObjReg, offsetof(JSObject, parent)), t0);
53840:         masm.storePtr(t0, adj.addrOf(JSStackFrame::offsetOfScopeChain()));
53840:         masm.storePtr(JSFrameReg, adj.addrOf(JSStackFrame::offsetOfPrev()));
53590: 
53590:         /* Adjust JSFrameReg. Callee fills in the rest. */
53590:         masm.addPtr(Imm32(sizeof(JSStackFrame) + sizeof(Value) * frameDepth), JSFrameReg);
53590: 
53590:         tempRegs.putReg(t0);
53590:     }
53590: };
53590: 
53590: 
53590: } /* namespace mjit */
53590: } /* namespace js */
53590: 
53590: #endif /* jsjaeger_inl_frame_asm_h__ */
53590: 
