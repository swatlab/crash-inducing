 73961: /* -*- Mode: c++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 40 -*- */
 76372: /* vim: set ts=2 et sw=2 tw=80: */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 73961: 
 73961: #include "WorkerScope.h"
 73961: 
 73961: #include "jsapi.h"
 86226: #include "jsdbgapi.h"
 94512: #include "mozilla/Util.h"
 97422: #include "mozilla/dom/DOMJSClass.h"
 97422: #include "mozilla/dom/EventTargetBinding.h"
 97422: #include "mozilla/dom/BindingUtils.h"
 97422: #include "mozilla/dom/XMLHttpRequestBinding.h"
 97422: #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 98158: #include "mozilla/OSFileConstants.h"
 73961: #include "nsTraceRefcnt.h"
 86226: #include "xpcpublic.h"
 73961: 
 94512: #ifdef ANDROID
 94512: #include <android/log.h>
 94512: #endif
 94512: 
 73961: #include "ChromeWorkerScope.h"
 73961: #include "Events.h"
 94512: #include "EventListenerManager.h"
 73961: #include "EventTarget.h"
 73961: #include "Exceptions.h"
 76372: #include "File.h"
 76372: #include "FileReaderSync.h"
 73961: #include "Location.h"
 95939: #include "ImageData.h"
 73961: #include "Navigator.h"
 73961: #include "Principal.h"
 73961: #include "ScriptLoader.h"
 73961: #include "Worker.h"
 73961: #include "WorkerPrivate.h"
 73961: #include "XMLHttpRequest.h"
 73961: 
 73961: #include "WorkerInlines.h"
 73961: 
 73961: #define PROPERTY_FLAGS \
 90546:   (JSPROP_ENUMERATE | JSPROP_SHARED)
 73961: 
 73961: #define FUNCTION_FLAGS \
 73961:   JSPROP_ENUMERATE
 73961: 
 80742: using namespace mozilla;
 73961: USING_WORKERS_NAMESPACE
 73961: 
 73961: namespace {
 73961: 
 94512: class WorkerGlobalScope : public EventTarget
 73961: {
 73961:   static JSClass sClass;
 73961:   static JSPropertySpec sProperties[];
 73961:   static JSFunctionSpec sFunctions[];
 73961: 
 73961:   enum
 73961:   {
 73961:     SLOT_wrappedScope = 0,
 73961:     SLOT_wrappedFunction
 73961:   };
 73961: 
 73961:   enum
 73961:   {
 73961:     SLOT_location = 0,
 73961:     SLOT_navigator,
 73961: 
 73961:     SLOT_COUNT
 73961:   };
 73961: 
 73961:   // Must be traced!
 73961:   jsval mSlots[SLOT_COUNT];
 73961: 
 73961:   enum
 73961:   {
 73961:     STRING_onerror = 0,
 73961:     STRING_onclose,
 73961: 
 73961:     STRING_COUNT
 73961:   };
 73961: 
 73961:   static const char* const sEventStrings[STRING_COUNT];
 73961: 
 73961: protected:
 73961:   WorkerPrivate* mWorker;
 73961: 
 73961: public:
 73961:   static JSClass*
 73961:   Class()
 73961:   {
 73961:     return &sClass;
 73961:   }
 73961: 
 73961:   static JSObject*
 73961:   InitClass(JSContext* aCx, JSObject* aObj, JSObject* aParentProto)
 73961:   {
 94512:     return JS_InitClass(aCx, aObj, aParentProto, Class(), Construct, 0,
 73961:                         sProperties, sFunctions, NULL, NULL);
 73961:   }
 73961: 
 99121:   using EventTarget::GetEventListener;
 99121:   using EventTarget::SetEventListener;
 99121: 
 73961: protected:
 94512:   WorkerGlobalScope(JSContext* aCx, WorkerPrivate* aWorker)
 94512:   : EventTarget(aCx), mWorker(aWorker)
 73961:   {
 73961:     MOZ_COUNT_CTOR(mozilla::dom::workers::WorkerGlobalScope);
 73961:     for (int32 i = 0; i < SLOT_COUNT; i++) {
 73961:       mSlots[i] = JSVAL_VOID;
 73961:     }
 73961:   }
 73961: 
 73961:   ~WorkerGlobalScope()
 73961:   {
 73961:     MOZ_COUNT_DTOR(mozilla::dom::workers::WorkerGlobalScope);
 73961:   }
 73961: 
 94512:   virtual void
 99121:   _trace(JSTracer* aTrc) MOZ_OVERRIDE
 73961:   {
 73961:     for (int32 i = 0; i < SLOT_COUNT; i++) {
 73961:       JS_CALL_VALUE_TRACER(aTrc, mSlots[i], "WorkerGlobalScope instance slot");
 73961:     }
 73961:     mWorker->TraceInternal(aTrc);
 99121:     EventTarget::_trace(aTrc);
 73961:   }
 73961: 
 94512:   virtual void
 99121:   _finalize(JSFreeOp* aFop) MOZ_OVERRIDE
 73961:   {
 99121:     EventTarget::_finalize(aFop);
 73961:   }
 73961: 
 73961: private:
 73961:   static JSBool
106862:   GetEventListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     JS_ASSERT(JSID_IS_INT(aIdval));
 73961:     JS_ASSERT(JSID_TO_INT(aIdval) >= 0 && JSID_TO_INT(aIdval) < STRING_COUNT);
 73961: 
 73961:     const char* name = sEventStrings[JSID_TO_INT(aIdval)];
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 97819:     ErrorResult rv;
 94512: 
 94512:     JSObject* listener =
 94512:       scope->GetEventListener(NS_ConvertASCIItoUTF16(name + 2), rv);
 94512: 
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to get event listener!");
 94512:       return false;
 94512:     }
 94512: 
106862:     aVp.set(listener ? OBJECT_TO_JSVAL(listener) : JSVAL_NULL);
 94512:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 99121:   SetEventListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSBool aStrict,
106862:                    JSMutableHandleValue aVp)
 73961:   {
 73961:     JS_ASSERT(JSID_IS_INT(aIdval));
 73961:     JS_ASSERT(JSID_TO_INT(aIdval) >= 0 && JSID_TO_INT(aIdval) < STRING_COUNT);
 73961: 
 73961:     const char* name = sEventStrings[JSID_TO_INT(aIdval)];
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
106862:     if (JSVAL_IS_PRIMITIVE(aVp)) {
 94512:       JS_ReportError(aCx, "Not an event listener!");
 94512:       return false;
 94512:     }
 94512: 
 97819:     ErrorResult rv;
 94512:     scope->SetEventListener(NS_ConvertASCIItoUTF16(name + 2),
106862:                             JSVAL_TO_OBJECT(aVp), rv);
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to set event listener!");
 94512:       return false;
 94512:     }
 94512: 
 94512:     return true;
 73961:   }
 73961: 
 73961:   static WorkerGlobalScope*
 73961:   GetInstancePrivate(JSContext* aCx, JSObject* aObj, const char* aFunctionName);
 73961: 
 73961:   static JSBool
 91237:   Construct(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL, JSMSG_WRONG_CONSTRUCTOR,
 73961:                          sClass.name);
 73961:     return false;
 73961:   }
 73961: 
 73961:   static JSBool
106862:   GetSelf(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     if (!GetInstancePrivate(aCx, aObj, "self")) {
 73961:       return false;
 73961:     }
 73961: 
106862:     aVp.set(OBJECT_TO_JSVAL(aObj));
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
106862:   GetLocation(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     WorkerGlobalScope* scope =
 73961:       GetInstancePrivate(aCx, aObj, sProperties[SLOT_location].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     if (JSVAL_IS_VOID(scope->mSlots[SLOT_location])) {
 73961:       JSString* href, *protocol, *host, *hostname;
 73961:       JSString* port, *pathname, *search, *hash;
 73961: 
 73961:       WorkerPrivate::LocationInfo& info = scope->mWorker->GetLocationInfo();
 73961: 
 73961: #define COPY_STRING(_jsstr, _cstr)                                             \
 73961:   if (info. _cstr .IsEmpty()) {                                                \
 73961:     _jsstr = NULL;                                                             \
 73961:   }                                                                            \
 73961:   else {                                                                       \
 73961:     if (!(_jsstr = JS_NewStringCopyN(aCx, info. _cstr .get(),                  \
 73961:                                      info. _cstr .Length()))) {                \
 73961:       return false;                                                            \
 73961:     }                                                                          \
 73961:     info. _cstr .Truncate();                                                   \
 73961:   }
 73961: 
 73961:       COPY_STRING(href, mHref);
 73961:       COPY_STRING(protocol, mProtocol);
 73961:       COPY_STRING(host, mHost);
 73961:       COPY_STRING(hostname, mHostname);
 73961:       COPY_STRING(port, mPort);
 73961:       COPY_STRING(pathname, mPathname);
 73961:       COPY_STRING(search, mSearch);
 73961:       COPY_STRING(hash, mHash);
 73961: 
 73961: #undef COPY_STRING
 73961: 
 73961:       JSObject* location = location::Create(aCx, href, protocol, host, hostname,
 73961:                                             port, pathname, search, hash);
 73961:       if (!location) {
 73961:         return false;
 73961:       }
 73961: 
 73961:       scope->mSlots[SLOT_location] = OBJECT_TO_JSVAL(location);
 73961:     }
 73961: 
106862:     aVp.set(scope->mSlots[SLOT_location]);
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   UnwrapErrorEvent(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JS_ASSERT(aArgc == 1);
 98362:     JS_ASSERT((JS_ARGV(aCx, aVp)[0]).isObject());
 73961: 
 98362:     JSObject* wrapper = &JS_CALLEE(aCx, aVp).toObject();
 73961:     JS_ASSERT(JS_ObjectIsFunction(aCx, wrapper));
 73961: 
 83268:     jsval scope = js::GetFunctionNativeReserved(wrapper, SLOT_wrappedScope);
 83268:     jsval listener = js::GetFunctionNativeReserved(wrapper, SLOT_wrappedFunction);
 73961: 
 98362:     JS_ASSERT(scope.isObject());
 73961: 
 98362:     JSObject* event = &JS_ARGV(aCx, aVp)[0].toObject();
 73961: 
 73961:     jsval argv[3] = { JSVAL_VOID, JSVAL_VOID, JSVAL_VOID };
 73961:     if (!JS_GetProperty(aCx, event, "message", &argv[0]) ||
 73961:         !JS_GetProperty(aCx, event, "filename", &argv[1]) ||
 73961:         !JS_GetProperty(aCx, event, "lineno", &argv[2])) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval rval = JSVAL_VOID;
 73961:     if (!JS_CallFunctionValue(aCx, JSVAL_TO_OBJECT(scope), listener,
 80742:                               ArrayLength(argv), argv, &rval)) {
 73961:       JS_ReportPendingException(aCx);
 73961:       return false;
 73961:     }
 73961: 
 73961:     if (JSVAL_IS_BOOLEAN(rval) && JSVAL_TO_BOOLEAN(rval) &&
 73961:         !JS_CallFunctionName(aCx, event, "preventDefault", 0, NULL, &rval)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
106862:   GetOnErrorListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     const char* name = sEventStrings[STRING_onerror];
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 97819:     ErrorResult rv;
 94512: 
 94512:     JSObject* adaptor =
 94512:       scope->GetEventListener(NS_ConvertASCIItoUTF16(name + 2), rv);
 94512: 
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to get event listener!");
 73961:       return false;
 73961:     }
 73961: 
 94512:     if (!adaptor) {
106862:       aVp.setNull();
 87589:       return true;
 87589:     }
 87589: 
106862:     aVp.set(js::GetFunctionNativeReserved(adaptor, SLOT_wrappedFunction));
 73961: 
106862:     JS_ASSERT(!JSVAL_IS_PRIMITIVE(aVp));
 73961: 
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 98960:   SetOnErrorListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval,
106862:                      JSBool aStrict, JSMutableHandleValue aVp)
 73961:   {
 73961:     const char* name = sEventStrings[STRING_onerror];
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
106862:     if (JSVAL_IS_PRIMITIVE(aVp)) {
 94512:       JS_ReportError(aCx, "Not an event listener!");
 94512:       return false;
 94512:     }
 94512: 
 94512:     JSFunction* adaptor =
 94512:       js::NewFunctionWithReserved(aCx, UnwrapErrorEvent, 1, 0,
 73961:                                   JS_GetGlobalObject(aCx), "unwrap");
 73961:     if (!adaptor) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     JSObject* listener = JS_GetFunctionObject(adaptor);
 73961:     if (!listener) {
 73961:       return false;
 73961:     }
 73961: 
 83268:     js::SetFunctionNativeReserved(listener, SLOT_wrappedScope,
 83268:                                   OBJECT_TO_JSVAL(aObj));
106862:     js::SetFunctionNativeReserved(listener, SLOT_wrappedFunction, aVp);
 73961: 
 97819:     ErrorResult rv;
 94512: 
 94512:     scope->SetEventListener(NS_ConvertASCIItoUTF16(name + 2), listener, rv);
 94512: 
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to set event listener!");
 94512:       return false;
 94512:     }
 94512: 
 94512:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
106862:   GetNavigator(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     WorkerGlobalScope* scope =
 73961:       GetInstancePrivate(aCx, aObj, sProperties[SLOT_navigator].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     if (JSVAL_IS_VOID(scope->mSlots[SLOT_navigator])) {
 73961:       JSObject* navigator = navigator::Create(aCx);
 73961:       if (!navigator) {
 73961:         return false;
 73961:       }
 73961: 
 73961:       scope->mSlots[SLOT_navigator] = OBJECT_TO_JSVAL(navigator);
 73961:     }
 73961: 
106862:     aVp.set(scope->mSlots[SLOT_navigator]);
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   Close(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[0].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->CloseInternal(aCx);
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   ImportScripts(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[1].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     if (aArgc && !scriptloader::Load(aCx, aArgc, JS_ARGV(aCx, aVp))) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   SetTimeout(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[2].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval dummy;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "v", &dummy)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->SetTimeout(aCx, aArgc, aVp, false);
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   ClearTimeout(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[3].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 84755:     uint32_t id;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "u", &id)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->ClearTimeout(aCx, id);
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   SetInterval(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[4].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval dummy;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "v", &dummy)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->SetTimeout(aCx, aArgc, aVp, true);
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   ClearInterval(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     WorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, sFunctions[5].name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 84755:     uint32_t id;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "u", &id)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->ClearTimeout(aCx, id);
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   Dump(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 83114:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 83114: 
 83114:     if (!GetInstancePrivate(aCx, obj, sFunctions[6].name)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     if (aArgc) {
 73961:       JSString* str = JS_ValueToString(aCx, JS_ARGV(aCx, aVp)[0]);
 73961:       if (!str) {
 73961:         return false;
 73961:       }
 73961: 
 73961:       JSAutoByteString buffer(aCx, str);
 73961:       if (!buffer) {
 73961:         return false;
 73961:       }
 73961: 
 86209: #ifdef ANDROID
103149:       __android_log_print(ANDROID_LOG_INFO, "Gecko", "%s", buffer.ptr());
 86209: #endif
 91627:       fputs(buffer.ptr(), stdout);
 91627:       fflush(stdout);
 73961:     }
 73961: 
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   AtoB(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 83114:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 83114: 
 83114:     if (!GetInstancePrivate(aCx, obj, sFunctions[7].name)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval string;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "v", &string)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval result;
 86226:     if (!xpc::Base64Decode(aCx, string, &result)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     JS_SET_RVAL(aCx, aVp, result);
 73961:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   BtoA(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 83114:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 83114: 
 83114:     if (!GetInstancePrivate(aCx, obj, sFunctions[8].name)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval binary;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "v", &binary)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval result;
 86226:     if (!xpc::Base64Encode(aCx, binary, &result)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     JS_SET_RVAL(aCx, aVp, result);
 73961:     return true;
 73961:   }
 73961: };
 73961: 
 73961: JSClass WorkerGlobalScope::sClass = {
 73961:   "WorkerGlobalScope",
 73961:   0,
 73961:   JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
 93519:   JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub
 73961: };
 73961: 
 73961: JSPropertySpec WorkerGlobalScope::sProperties[] = {
107783:   { "location", SLOT_location, PROPERTY_FLAGS, JSOP_WRAPPER(GetLocation),
107783:     JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
 73961:   { sEventStrings[STRING_onerror], STRING_onerror, PROPERTY_FLAGS,
107783:     JSOP_WRAPPER(GetOnErrorListener), JSOP_WRAPPER(SetOnErrorListener) },
 73961:   { sEventStrings[STRING_onclose], STRING_onclose, PROPERTY_FLAGS,
107783:     JSOP_WRAPPER(GetEventListener), JSOP_WRAPPER(SetEventListener) },
107783:   { "navigator", SLOT_navigator, PROPERTY_FLAGS, JSOP_WRAPPER(GetNavigator),
107783:     JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
107783:   { "self", 0, PROPERTY_FLAGS, JSOP_WRAPPER(GetSelf), JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
107783:   { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
 73961: };
 73961: 
 73961: JSFunctionSpec WorkerGlobalScope::sFunctions[] = {
 73961:   JS_FN("close", Close, 0, FUNCTION_FLAGS),
 73961:   JS_FN("importScripts", ImportScripts, 1, FUNCTION_FLAGS),
 73961:   JS_FN("setTimeout", SetTimeout, 1, FUNCTION_FLAGS),
 73961:   JS_FN("clearTimeout", ClearTimeout, 1, FUNCTION_FLAGS),
 73961:   JS_FN("setInterval", SetInterval, 1, FUNCTION_FLAGS),
 73961:   JS_FN("clearInterval", ClearTimeout, 1, FUNCTION_FLAGS),
 73961:   JS_FN("dump", Dump, 1, FUNCTION_FLAGS),
 73961:   JS_FN("atob", AtoB, 1, FUNCTION_FLAGS),
 73961:   JS_FN("btoa", BtoA, 1, FUNCTION_FLAGS),
 73961:   JS_FS_END
 73961: };
 73961: 
 73961: const char* const WorkerGlobalScope::sEventStrings[STRING_COUNT] = {
 73961:   "onerror",
 73961:   "onclose"
 73961: };
 73961: 
 73961: class DedicatedWorkerGlobalScope : public WorkerGlobalScope
 73961: {
 94512:   static DOMJSClass sClass;
 73961:   static JSPropertySpec sProperties[];
 73961:   static JSFunctionSpec sFunctions[];
 73961: 
 73961:   enum
 73961:   {
 73961:     STRING_onmessage = 0,
 73961: 
 73961:     STRING_COUNT
 73961:   };
 73961: 
 73961:   static const char* const sEventStrings[STRING_COUNT];
 73961: 
 73961: public:
 73961:   static JSClass*
 73961:   Class()
 73961:   {
 94512:     return sClass.ToJSClass();
 73961:   }
 73961: 
 73961:   static JSObject*
 73961:   InitClass(JSContext* aCx, JSObject* aObj, JSObject* aParentProto)
 73961:   {
 94512:     return JS_InitClass(aCx, aObj, aParentProto, Class(), Construct, 0,
 73961:                         sProperties, sFunctions, NULL, NULL);
 73961:   }
 73961: 
 73961:   static JSBool
 73961:   InitPrivate(JSContext* aCx, JSObject* aObj, WorkerPrivate* aWorkerPrivate)
 73961:   {
 94512:     JS_ASSERT(JS_GetClass(aObj) == Class());
 73961: 
 97422:     dom::AllocateProtoOrIfaceCache(aObj);
 73961: 
 94512:     nsRefPtr<DedicatedWorkerGlobalScope> scope =
 94512:       new DedicatedWorkerGlobalScope(aCx, aWorkerPrivate);
 94512: 
101295:     js::SetReservedSlot(aObj, DOM_OBJECT_SLOT, PRIVATE_TO_JSVAL(scope));
 94512: 
 94512:     scope->SetIsDOMBinding();
 94512:     scope->SetWrapper(aObj);
 94512: 
 94512:     scope.forget();
 73961:     return true;
 73961:   }
 73961: 
 73961: protected:
 94512:   DedicatedWorkerGlobalScope(JSContext* aCx, WorkerPrivate* aWorker)
 94512:   : WorkerGlobalScope(aCx, aWorker)
 73961:   {
 73961:     MOZ_COUNT_CTOR(mozilla::dom::workers::DedicatedWorkerGlobalScope);
 73961:   }
 73961: 
 73961:   ~DedicatedWorkerGlobalScope()
 73961:   {
 73961:     MOZ_COUNT_DTOR(mozilla::dom::workers::DedicatedWorkerGlobalScope);
 73961:   }
 73961: 
 73961: private:
 99121:   using EventTarget::GetEventListener;
 99121:   using EventTarget::SetEventListener;
 99121: 
 73961:   static JSBool
106862:   GetEventListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSMutableHandleValue aVp)
 73961:   {
 73961:     JS_ASSERT(JSID_IS_INT(aIdval));
 73961:     JS_ASSERT(JSID_TO_INT(aIdval) >= 0 && JSID_TO_INT(aIdval) < STRING_COUNT);
 73961: 
 73961:     const char* name = sEventStrings[JSID_TO_INT(aIdval)];
 73961:     DedicatedWorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 97819:     ErrorResult rv;
 94512: 
 94512:     JSObject* listener =
 94512:       scope->GetEventListener(NS_ConvertASCIItoUTF16(name + 2), rv);
 94512: 
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to get event listener!");
 94512:       return false;
 94512:     }
 94512: 
106862:     aVp.set(listener ? OBJECT_TO_JSVAL(listener) : JSVAL_NULL);
 94512:     return true;
 73961:   }
 73961: 
 73961:   static JSBool
 99121:   SetEventListener(JSContext* aCx, JSHandleObject aObj, JSHandleId aIdval, JSBool aStrict,
106862:                    JSMutableHandleValue aVp)
 73961:   {
 73961:     JS_ASSERT(JSID_IS_INT(aIdval));
 73961:     JS_ASSERT(JSID_TO_INT(aIdval) >= 0 && JSID_TO_INT(aIdval) < STRING_COUNT);
 73961: 
 73961:     const char* name = sEventStrings[JSID_TO_INT(aIdval)];
 73961:     DedicatedWorkerGlobalScope* scope = GetInstancePrivate(aCx, aObj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
106862:     if (JSVAL_IS_PRIMITIVE(aVp)) {
 94512:       JS_ReportError(aCx, "Not an event listener!");
 94512:       return false;
 94512:     }
 94512: 
 97819:     ErrorResult rv;
 94512: 
 94512:     scope->SetEventListener(NS_ConvertASCIItoUTF16(name + 2),
106862:                             JSVAL_TO_OBJECT(aVp), rv);
 94512: 
 97819:     if (rv.Failed()) {
 94512:       JS_ReportError(aCx, "Failed to set event listener!");
 94512:       return false;
 94512:     }
 94512: 
 94512:     return true;
 73961:   }
 73961: 
 73961:   static DedicatedWorkerGlobalScope*
 73961:   GetInstancePrivate(JSContext* aCx, JSObject* aObj, const char* aFunctionName)
 73961:   {
 89430:     JSClass* classPtr = JS_GetClass(aObj);
 94512:     if (classPtr == Class()) {
101296:       return UnwrapDOMObject<DedicatedWorkerGlobalScope>(aObj);
 73961:     }
 73961: 
 73961:     JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL,
 94512:                          JSMSG_INCOMPATIBLE_PROTO, Class()->name, aFunctionName,
 89415:                          classPtr->name);
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   Construct(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL, JSMSG_WRONG_CONSTRUCTOR,
 94512:                          Class()->name);
 73961:     return false;
 73961:   }
 73961: 
 73961:   static JSBool
 98960:   Resolve(JSContext* aCx, JSHandleObject aObj, JSHandleId aId, unsigned aFlags,
103636:           JSMutableHandleObject aObjp)
 73961:   {
 73961:     JSBool resolved;
 73961:     if (!JS_ResolveStandardClass(aCx, aObj, aId, &resolved)) {
 73961:       return false;
 73961:     }
 73961: 
103637:     aObjp.set(resolved ? aObj.get() : NULL);
 73961:     return true;
 73961:   }
 73961: 
 73961:   static void
 94738:   Finalize(JSFreeOp* aFop, JSObject* aObj)
 73961:   {
 94512:     JS_ASSERT(JS_GetClass(aObj) == Class());
 73961:     DedicatedWorkerGlobalScope* scope =
101296:       UnwrapDOMObject<DedicatedWorkerGlobalScope>(aObj);
 73961:     if (scope) {
 94512:       DestroyProtoOrIfaceCache(aObj);
 99121:       scope->_finalize(aFop);
 73961:     }
 73961:   }
 73961: 
 73961:   static void
 73961:   Trace(JSTracer* aTrc, JSObject* aObj)
 73961:   {
 94512:     JS_ASSERT(JS_GetClass(aObj) == Class());
 73961:     DedicatedWorkerGlobalScope* scope =
101296:       UnwrapDOMObject<DedicatedWorkerGlobalScope>(aObj);
 73961:     if (scope) {
 97506:       mozilla::dom::TraceProtoOrIfaceCache(aTrc, aObj);
 99121:       scope->_trace(aTrc);
 73961:     }
 73961:   }
 73961: 
 73961:   static JSBool
 91237:   PostMessage(JSContext* aCx, unsigned aArgc, jsval* aVp)
 73961:   {
 73961:     JSObject* obj = JS_THIS_OBJECT(aCx, aVp);
 83114:     if (!obj) {
 83114:       return false;
 83114:     }
 73961: 
 73961:     const char*& name = sFunctions[0].name;
 73961:     DedicatedWorkerGlobalScope* scope = GetInstancePrivate(aCx, obj, name);
 73961:     if (!scope) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     jsval message;
 73961:     if (!JS_ConvertArguments(aCx, aArgc, JS_ARGV(aCx, aVp), "v", &message)) {
 73961:       return false;
 73961:     }
 73961: 
 73961:     return scope->mWorker->PostMessageToParent(aCx, message);
 73961:   }
 73961: };
 73961: 
 94512: MOZ_STATIC_ASSERT(prototypes::MaxProtoChainLength == 3,
 94512:                   "The MaxProtoChainLength must match our manual DOMJSClasses");
 94512: 
109104: // When this DOMJSClass is removed and it's the last consumer of
109104: // sNativePropertyHooks then sNativePropertyHooks should be removed too.
 94512: DOMJSClass DedicatedWorkerGlobalScope::sClass = {
 94512:   {
 73961:     "DedicatedWorkerGlobalScope",
 94512:     JSCLASS_DOM_GLOBAL | JSCLASS_IS_DOMJSCLASS | JSCLASS_IMPLEMENTS_BARRIERS |
 94512:     JSCLASS_GLOBAL_FLAGS_WITH_SLOTS(3) | JSCLASS_NEW_RESOLVE,
 73961:     JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
 73961:     JS_EnumerateStub, reinterpret_cast<JSResolveOp>(Resolve), JS_ConvertStub,
 90546:     Finalize, NULL, NULL, NULL, NULL, Trace
 94512:   },
 94512:   { prototypes::id::EventTarget_workers, prototypes::id::_ID_Count,
 94512:     prototypes::id::_ID_Count },
109104:   -1, false, &sNativePropertyHooks
 73961: };
 73961: 
 73961: JSPropertySpec DedicatedWorkerGlobalScope::sProperties[] = {
 73961:   { sEventStrings[STRING_onmessage], STRING_onmessage, PROPERTY_FLAGS,
107783:     JSOP_WRAPPER(GetEventListener), JSOP_WRAPPER(SetEventListener) },
107783:   { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
 73961: };
 73961: 
 73961: JSFunctionSpec DedicatedWorkerGlobalScope::sFunctions[] = {
 73961:   JS_FN("postMessage", PostMessage, 1, FUNCTION_FLAGS),
 73961:   JS_FS_END
 73961: };
 73961: 
 73961: const char* const DedicatedWorkerGlobalScope::sEventStrings[STRING_COUNT] = {
 73961:   "onmessage",
 73961: };
 73961: 
 73961: WorkerGlobalScope*
 73961: WorkerGlobalScope::GetInstancePrivate(JSContext* aCx, JSObject* aObj,
 73961:                                       const char* aFunctionName)
 73961: {
 89430:   JSClass* classPtr = JS_GetClass(aObj);
 94512: 
 94512:   // We can only make DedicatedWorkerGlobalScope, not WorkerGlobalScope, so this
 94512:   // should never happen.
 94512:   JS_ASSERT(classPtr != Class());
 94512: 
 94512:   if (classPtr == DedicatedWorkerGlobalScope::Class()) {
101296:     return UnwrapDOMObject<DedicatedWorkerGlobalScope>(aObj);
 73961:   }
 73961: 
 73961:   JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL, JSMSG_INCOMPATIBLE_PROTO,
 89415:                        sClass.name, aFunctionName, classPtr->name);
 73961:   return NULL;
 73961: }
 73961: 
 73961: } /* anonymous namespace */
 73961: 
 73961: BEGIN_WORKERS_NAMESPACE
 73961: 
 73961: JSObject*
 73961: CreateDedicatedWorkerGlobalScope(JSContext* aCx)
 73961: {
 97422:   using namespace mozilla::dom;
 94512: 
 73961:   WorkerPrivate* worker = GetWorkerPrivateFromContext(aCx);
 73961:   JS_ASSERT(worker);
 73961: 
 73961:   JSObject* global =
102756:     JS_NewGlobalObject(aCx, DedicatedWorkerGlobalScope::Class(),
 73961:                        GetWorkerPrincipal());
 73961:   if (!global) {
 73961:     return NULL;
 73961:   }
 73961: 
 82133:   JSAutoEnterCompartment ac;
 82133:   if (!ac.enter(aCx, global)) {
 82133:     return NULL;
 82133:   }
 82133: 
 73961:   // Make the private slots now so that all our instance checks succeed.
 73961:   if (!DedicatedWorkerGlobalScope::InitPrivate(aCx, global, worker)) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   // Proto chain should be:
 73961:   //   global -> DedicatedWorkerGlobalScope
 73961:   //          -> WorkerGlobalScope
 73961:   //          -> EventTarget
 73961:   //          -> Object
 73961: 
 97127:   JSObject* eventTargetProto =
 97422:     EventTargetBinding_workers::GetProtoObject(aCx, global, global);
 73961:   if (!eventTargetProto) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   JSObject* scopeProto =
 73961:     WorkerGlobalScope::InitClass(aCx, global, eventTargetProto);
 73961:   if (!scopeProto) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   JSObject* dedicatedScopeProto =
 73961:     DedicatedWorkerGlobalScope::InitClass(aCx, global, scopeProto);
 73961:   if (!dedicatedScopeProto) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   if (!JS_SetPrototype(aCx, global, dedicatedScopeProto)) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   JSObject* workerProto = worker::InitClass(aCx, global, eventTargetProto,
 73961:                                             false);
 73961:   if (!workerProto) {
 73961:     return NULL;
 73961:   }
 73961: 
 94512:   if (worker->IsChromeWorker() &&
 94512:       (!chromeworker::InitClass(aCx, global, workerProto, false) ||
107562:        !DefineChromeWorkerFunctions(aCx, global))) {
107562:     return NULL;
107562:   }
107562: 
107562:   if (!DefineOSFileConstants(aCx, global)) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   // Init other classes we care about.
 73961:   if (!events::InitClasses(aCx, global, false) ||
 76372:       !file::InitClasses(aCx, global) ||
 76372:       !filereadersync::InitClass(aCx, global) ||
 73961:       !exceptions::InitClasses(aCx, global) ||
 73961:       !location::InitClass(aCx, global) ||
 95939:       !imagedata::InitClass(aCx, global) ||
 73961:       !navigator::InitClass(aCx, global)) {
 73961:     return NULL;
 73961:   }
 73961: 
 94512:   // Init other paris-bindings.
 97422:   if (!XMLHttpRequestBinding_workers::CreateInterfaceObjects(aCx, global,
 97422:                                                              global) ||
 97422:       !XMLHttpRequestUploadBinding_workers::CreateInterfaceObjects(aCx, global,
 97127:                                                                    global)) {
 94512:     return NULL;
 94512:   }
 94512: 
 73961:   if (!JS_DefineProfilingFunctions(aCx, global)) {
 73961:     return NULL;
 73961:   }
 73961: 
 73961:   return global;
 73961: }
 73961: 
 87617: bool
 87617: ClassIsWorkerGlobalScope(JSClass* aClass)
 87617: {
 87617:   return WorkerGlobalScope::Class() == aClass ||
 87617:          DedicatedWorkerGlobalScope::Class() == aClass;
 87617: }
 87617: 
 73961: END_WORKERS_NAMESPACE
