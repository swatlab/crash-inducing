     1: # -*- Mode: makefile -*-
     1: #
 98983: # This Source Code Form is subject to the terms of the Mozilla Public
 98983: # License, v. 2.0. If a copy of the MPL was not distributed with this
 98983: # file, You can obtain one at http://mozilla.org/MPL/2.0/.
     1: 
107436: DEPTH		= @DEPTH@
     1: topsrcdir	= @top_srcdir@
     1: srcdir		= @srcdir@
     1: 
144629: TOPLEVEL_BUILD := 1
144629: 
 31192: run_for_side_effects := $(shell echo "MAKE: $(MAKE)")
 23080: include $(DEPTH)/config/autoconf.mk
 23080: 
141782: ifdef JS_STANDALONE
141782: LIBRARY_NAME	= mozjs-@MOZJS_MAJOR_VERSION@.@MOZJS_MINOR_VERSION@@MOZJS_ALPHA@
141782: else
     1: LIBRARY_NAME	= mozjs
141782: endif
141782: 
 23648: STATIC_LIBRARY_NAME = js_static
144447: MSVC_ENABLE_PGO := 1
 21012: LIBS		= $(NSPR_LIBS)
 21012: 
     1: # JavaScript must be built shared, even for static builds, as it is used by
     1: # other modules which are always built shared. Failure to do so results in
     1: # the js code getting copied into xpinstall and jsd as well as mozilla-bin,
     1: # and then the static data cells used for locking no longer work.
 23648: #
 23648: # In fact, we now build both a static and a shared library, as the
 23648: # JS shell would like to link to the static library.
     1: 
 50577: ifdef JS_SHARED_LIBRARY
     1: FORCE_SHARED_LIB = 1
 50577: endif
 23648: FORCE_STATIC_LIB = 1
 88641: DIST_INSTALL = 1
     1: 
130423: ###############################################
130423: # BEGIN include sources for low-level code shared with mfbt
130423: #
130423: MFBT_ROOT = $(srcdir)/../../mfbt
130423: VPATH += $(MFBT_ROOT)
130423: include $(MFBT_ROOT)/exported_headers.mk
130423: 
130423: VPATH		+= \
 80202: 		$(srcdir) \
 80202: 		$(srcdir)/builtin \
110596: 		$(srcdir)/devtools \
 80202: 		$(srcdir)/ds \
 80202: 		$(srcdir)/frontend \
 80212: 		$(srcdir)/gc \
 80202: 		$(srcdir)/vm \
 80202: 		$(NULL)
 18400: 
 72579: ######################################################
 80202: # BEGIN include exported headers from the JS engine
 80202: #
140753: #       Ultimately, after cleansing EXPORTS,
 80202: #       these will be the ONLY headers exported by
 80202: #       the js engine
 80202: #
 80202: VPATH		+= \
 80202: 		$(srcdir)/../public \
 80202: 		$(NULL)
 80202: 
 69223: ###############################################
121385: # BEGIN enable non-releasable features
121385: #
145765: ifdef NIGHTLY_BUILD
137336: DEFINES += -DENABLE_PARALLEL_JS
121385: endif
113519: 
111655: # Ion
111781: ifdef ENABLE_ION
111655: VPATH +=	$(srcdir)/ion
111768: VPATH +=	$(srcdir)/ion/shared
144104: 
 52556: ifeq (86, $(findstring 86,$(TARGET_CPU)))
 52556: ifeq (x86_64, $(TARGET_CPU))
111706: VPATH +=	$(srcdir)/ion/x64
 52556: else
111706: VPATH +=	$(srcdir)/ion/x86
 53012: endif
 52556: endif
112045: ifeq (arm, $(findstring arm, $(TARGET_CPU)))
111706: VPATH +=	$(srcdir)/ion/arm
 52556: endif
111781: endif #ENABLE_ION
 51469: 
 98230: ###############################################
 98230: # BEGIN include sources for the Nitro assembler
 98230: #
 50493: 
 97455: VPATH += 	$(srcdir)/assembler \
 97455: 		$(srcdir)/assembler/wtf \
 97455: 		$(srcdir)/assembler/jit \
 97455: 		$(srcdir)/yarr \
 50493: 		$(NONE)
 50491: 
144340: ifneq (,$(ENABLE_ION)$(ENABLE_YARR_JIT))
 98230: VPATH += 	$(srcdir)/assembler/assembler \
 98230: 		$(NONE)
 98230: endif
 98230: 
 50491: #
 50491: # END enclude sources for the Nitro assembler
 50491: #############################################
 50491: 
 40442: ifdef JS_HAS_CTYPES
 76852: VPATH += $(srcdir)/ctypes
 41355: 
 74235: ifdef MOZ_NATIVE_FFI
 74235: LOCAL_INCLUDES = $(MOZ_FFI_CFLAGS)
 74235: else
 74235: LOCAL_INCLUDES = -Ictypes/libffi/include
 74235: endif
 74235: 
 74235: LOCAL_INCLUDES += \
 42677:     -I. \
 40442:     $(NULL)
 40442: 
 74235: 
 74235: ifdef MOZ_NATIVE_FFI
 74235: EXTRA_DSO_LDOPTS += $(MOZ_FFI_LIBS)
 74235: else
 40442: ifeq ($(OS_ARCH),OS2)
 40894: SHARED_LIBRARY_LIBS += \
 75192:     ctypes/libffi/.libs/ffi.a \
 40894:     $(NULL)
 40894: else
 40613: SHARED_LIBRARY_LIBS += \
 40442:     ctypes/libffi/.libs/libffi.$(LIB_SUFFIX) \
 40442:     $(NULL)
 40894: endif
 74235: endif
 40894: 
 40442: endif # JS_HAS_CTYPES
 40442: 
 95281: LOCAL_INCLUDES += -I$(MFBT_ROOT)/double-conversion
 95281: 
 48637: # PerfMeasurement is available regardless of low-level support for it;
 48637: # it just doesn't necessarily do anything useful.  There is one
 48637: # implementation source file per supported operating system, plus a stub
 48637: # for unsupported OSes, plus the Javascript wrapper.
 76852: VPATH += $(srcdir)/perf
 48637: 
     1: DASH_R		= -r
     1: 
 67939: ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
  5701: SDK_LIBRARY = $(IMPORT_LIBRARY)
  5701: else
  5701: SDK_LIBRARY = $(SHARED_LIBRARY)
  5701: endif
  5701: 
     1: include $(topsrcdir)/config/config.mk
     1: 
 90070: ifeq (,$(MOZ_GLUE_PROGRAM_LDFLAGS))
 90070: # When building standalone, we need to include mfbt sources, and to declare
 90070: # "exported" mfbt symbols on its behalf when we use its headers.
 95281: include $(MFBT_ROOT)/sources.mk
 90070: DEFINES += -DIMPL_MFBT
 90070: endif
 90070: 
     1: EXTRA_DSO_LDOPTS += $(NSPR_LIBS)
     1: 
     1: ifndef BUILD_OPT
     1: MOCHAFILE	= 1
     1: endif
     1: 
     1: # Define keyword generator before rules.mk, see bug 323979 comment 50
     1: 
 98469: HOST_CPPSRCS += jskwgen.cpp
     1: HOST_SIMPLE_PROGRAMS += host_jskwgen$(HOST_BIN_SUFFIX)
     1: GARBAGE += jsautokw.h host_jskwgen$(HOST_BIN_SUFFIX)
 15453: 
 98469: HOST_CPPSRCS += jsoplengen.cpp
 15453: HOST_SIMPLE_PROGRAMS += host_jsoplengen$(HOST_BIN_SUFFIX)
 15453: GARBAGE += jsautooplen.h host_jsoplengen$(HOST_BIN_SUFFIX)
 15453: 
108585: GARBAGE += selfhosted.out.h
108585: 
 15146: USE_HOST_CXX = 1
     1: 
  7058: ifdef HAVE_DTRACE
  7297: ifneq ($(OS_ARCH),Darwin)
  7058: DTRACE_PROBE_OBJ = $(LIBRARY_NAME)-dtrace.$(OBJ_SUFFIX)
  7297: endif
110596: MOZILLA_DTRACE_SRC = $(srcdir)/devtools/javascript-trace.d
  7058: endif
  7058: 
 25212: default::
     1: 
 25212: ifneq (,$(CROSS_COMPILE)$(filter-out WINNT OS2,$(OS_ARCH)))
 23476: # nsinstall doesn't get built until we enter config/ in the exports phase,
 23476: # so we'll have to manually ensure it gets built here if we want to use
 23476: # $(EXPORTS)
 25212: export:: config/nsinstall$(HOST_BIN_SUFFIX)
 25262: $(PUBLIC) $(SDK_PUBLIC): config/nsinstall$(HOST_BIN_SUFFIX)
 23476: 
 23476: config/nsinstall$(HOST_BIN_SUFFIX): $(srcdir)/config/nsinstall.c $(srcdir)/config/pathsub.c
 23476: 	$(MAKE) -C config/ nsinstall$(HOST_BIN_SUFFIX)
 23476: endif
 23476: 
141785: # Ensure symbol versions of shared library on Linux do not conflict
141785: # with those in libxul.
141785: ifeq (Linux,$(OS_TARGET))
141785: EXTRA_DSO_LDOPTS += -Wl,-version-script,symverscript
141785: 
141785: symverscript: symverscript.in
141785: 	$(PYTHON) $(topsrcdir)/config/Preprocessor.py \
141785: 		-DVERSION="$(subst -,_,$(LIBRARY_NAME))" $< > $@
141785: 
141785: EXTRA_DEPS += symverscript
141785: endif
141785: 
 25212: include $(topsrcdir)/config/rules.mk
 25212: 
 40442: ifdef JS_HAS_CTYPES
 74235: ifndef MOZ_NATIVE_FFI
 40442: # Build libffi proper as part of the 'exports' target, so things get built
 40613: # in the right order.
 40442: export::
 40613: 		$(call SUBMAKE,,ctypes/libffi)
 40442: 
 41530: distclean clean::
 41530: 		$(call SUBMAKE,$@,ctypes/libffi)
 40442: endif
 74235: endif
 40442: 
141792: 
141792: #############################################
141792: # BEGIN ECMAScript Internationalization API
141792: #
141792: 
135781: # ICU headers need to be available whether we build with the complete
135781: # Internationalization API or not - ICU stubs rely on them.
135781: 
135781: LOCAL_INCLUDES += \
135781:   -I$(topsrcdir)/../../intl/icu/source/common \
135781:   -I$(topsrcdir)/../../intl/icu/source/i18n \
135781:   $(NULL)
135781: 
141792: ifdef ENABLE_INTL_API
141792: 
141792: ifeq ($(OS_ARCH),WINNT)
141792:   # Parallel gmake is buggy on Windows
141792:   ICU_GMAKE_OPTIONS="-j1"
141792:   # Library names: On Windows, ICU uses modified library names for static
141792:   # and debug libraries.
141792:   ifdef MOZ_DEBUG
141792:     ICU_LIB_SUFFIX=d
141792:   endif
141792:   ICU_LIB_RENAME = $(foreach libname,$(ICU_LIB_NAMES),\
141792:                      cp -p intl/icu/lib/s$(libname)$(ICU_LIB_SUFFIX).lib intl/icu/lib/$(libname).lib;)
141792: endif
141792: 
141792: # - Build ICU as part of the "export" target, so things get built
141792: #   in the right order.
141792: # - ICU requires GNU make according to its readme.html. pymake can't be used
141792: #   because it doesn't support order only dependencies.
141792: # - Force ICU to use the standard suffix for object files because expandlibs
141792: #   will discard all files with a non-standard suffix (bug 857450).
141792: # - Options for genrb: -k strict parsing; -R omit collation tailoring rules.
141792: export::
141792: 	$(GMAKE) $(ICU_GMAKE_OPTIONS) -C intl/icu STATIC_O=$(OBJ_SUFFIX) GENRBOPTS='-k -R'
141792: 	$(ICU_LIB_RENAME)
141792: 
141792: distclean clean::
141792: 	$(call SUBMAKE,$@,intl/icu)
141792: 
141792: endif
141792: 
141792: #
141792: # END ECMAScript Internationalization API
141792: #############################################
141792: 
141792: 
 60811: # The "find any vanilla new/new[] calls" script is tailored to Linux, so
 60811: # only run it there.  That should be enough to catch any such calls that
 60811: # creep in.
 67905: check-vanilla-new:
 67905: 	$(srcdir)/config/find_vanilla_new_calls $(LIBRARY)
 67905: 
 60811: ifeq ($(OS_ARCH),Linux)
 67905: check:: check-vanilla-new
 60811: endif
 60811: 
 64323: # Help ensure that the number of OOM errors in SpiderMonkey doesn't increase.
 64323: # If the number of OOM errors changes, update the number below. We intend this
 64323: # number to go down over time, by fixing OOMs.
 64323: check-ooms:
 64559: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/config/find_OOM_errors.py --regression 125
 64323: 
 67910: ifeq ($(MOZ_DEBUG),1)
 67913: #check:: check-ooms
 64323: endif
 64323: 
 97685: ifdef MOZ_VALGRIND
 97302: ifndef MOZ_ASAN
 97685: JITTEST_VALGRIND_FLAG = --valgrind
 97685: endif
 97302: endif
 97302: 
 67905: check-jit-test::
 56539: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/jit-test/jit_test.py \
113030: 	        --no-slow --no-progress --tinderbox --tbpl $(JITTEST_VALGRIND_FLAG) \
141783: 	        $(DIST)/bin/$(JS_SHELL_NAME)$(BIN_SUFFIX)
 67905: 
 68954: check:: check-jit-test
 67908: 
 67908: # jstests doesn't have a --jitflags option, so we need to loop, updating the
 67908: # exit code (RC) after each invocation.
 67908: # FIXME: MethodJIT doesn't work for 1 test case (bug 644393), so
 67908: # --no-extensions is set to skip that test. Remove as soon as possible.
 67908: check-jstests:
 67908: 	RC=0; \
 67908: 	for f in `echo "$(JITFLAGS)" | tr ',' '\n'`; \
 67908: 		do \
 67908: 			$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/tests/jstests.py \
 67908: 				--tinderbox --no-progress \
 67908: 				--no-extensions \
 67908: 				--timeout 300 \
 67908: 				--args="`echo $$f | sed 's/\(.\)/ -\1/g'`" \
141783: 				$(DIST)/bin/$(JS_SHELL_NAME)$(BIN_SUFFIX); \
 67908: 			RC=$$(( $$RC || $$?)); \
 67908: 		done; \
 67908: 	exit $$RC
 67908: 
 68954: # FIXME:
 68954: # We want to run check-jstests as part of |make check| on all platforms, on
 68954: # tinderbox. However, some configurations don't work quite right just yet.
 69234: # Rather than risking regressions in major configurations while fixing these
 69234: # secondary configuration, we work around them and fix the bugs later.
 68954: #
 69234: #   Bug 652154: On Windows, SM(!m !t) don't work because of path problems with
 69234: #				their unusual directory layout
 69234: #
 69234: #   Bug 652155: On Mac, SM(d) doesn't work for unknown reasons
 67908: 
 69234: ifeq ($(OS_ARCH),WINNT)
 69234: ifdef ENABLE_METHODJIT
 69234: endif
 69234: else
 69234: ifndef HAVE_DTRACE
 69234: #check:: check-jstests
 69234: endif
 68954: endif
 25896: 
110614: DIST_GARBAGE = config.cache config.log config.status* \
 40655:    config/autoconf.mk \
141783:    unallmakefiles $(JS_CONFIG_NAME) js-config.h js-confdefs.h
 30215: 
 30215: distclean::
 30215: 	cat unallmakefiles | $(XARGS) rm -f
 67702: 	$(RM) $(DIST_GARBAGE)
 30215: 
     1: DEFINES		+= -DEXPORT_JS_API
     1: 
     1: INCLUDES	+= -I$(srcdir)
     1: 
     1: ifdef JS_THREADSAFE
     1: DEFINES		+= -DJS_THREADSAFE
     1: endif
     1: 
 40442: ifdef JS_HAS_CTYPES
 40442: DEFINES		+= -DJS_HAS_CTYPES
 47348: DEFINES         += -DDLL_PREFIX=\"$(DLL_PREFIX)\" -DDLL_SUFFIX=\"$(DLL_SUFFIX)\"
 40442: endif
 40442: 
     1: ifneq ($(findstring -L,$(NSPR_LIBS)),)
     1: NSPR_STATIC_PATH = $(subst -L,,$(findstring -L,$(NSPR_LIBS)))
     1: else
     1: NSPR_STATIC_PATH = $(DIST)/lib
     1: endif
     1: 
 16288: ifdef MOZ_VTUNE
143053: ifeq ($(OS_ARCH), WINNT)
143053: EXTRA_DSO_LDOPTS += $(VTUNE_LIBRARIES)
143053: LIBS += $(VTUNE_LIBRARIES)
143053: else
143053: SHARED_LIBRARY_LIBS += $(VTUNE_LIBRARIES)
143053: endif # WINNT
143053: endif # MOZ_VTUNE
 16288: 
 73745: ifdef MOZ_ETW
 73745: # This will get the ETW provider resources into the library mozjs.dll
 73745: RESFILE = ETWProvider.res
 73745: endif
 73745: 
 63458: # HP-UX does not require the extra linking of "-lm"
 67939: ifeq (,$(filter HP-UX WINNT OS2,$(OS_ARCH)))
 18465: EXTRA_LIBS	+= -lm
     1: endif
     1: 
104337: CFLAGS += $(MOZ_ZLIB_CFLAGS)
104337: EXTRA_LIBS += $(MOZ_ZLIB_LIBS)
106916: # Enable zlib usage if zlib has been located. When building the browser on
106916: # Windows, MOZ_ZLIB_LIBS is empty because zlib is part of libmozglue. We thus
106916: # also enable zlib if mozglue is present.
106916: ifneq (,$(MOZ_ZLIB_LIBS)$(MOZ_GLUE_LDFLAGS))
106740: DEFINES += -DUSE_ZLIB
106740: endif
104337: 
141792: SHARED_LIBRARY_LIBS += $(ICU_LIBS)
141792: 
     1: # Prevent floating point errors caused by VC++ optimizations
 99859: ifdef _MSC_VER
 99859: # XXX We should add this to CXXFLAGS, too?
     1: CFLAGS += -fp:precise
 99859: 
 99859: ifeq ($(CPU_ARCH),x86)
 99859: # Workaround compiler bug on PGO (Bug 721284)
 99859: MonoIC.$(OBJ_SUFFIX): CXXFLAGS += -GL-
 99859: Compiler.$(OBJ_SUFFIX): CXXFLAGS += -GL-
104384: # Ditto (Bug 772303)
104384: RegExp.$(OBJ_SUFFIX): CXXFLAGS += -GL-
     1: endif
121692: # Ditto (Bug 810661)
121692: ifeq ($(CPU_ARCH),x86_64)
121692: CTypes.$(OBJ_SUFFIX): CXXFLAGS += -GL-
121692: endif
 99859: endif # _MSC_VER
     1: 
     1: ifeq ($(OS_ARCH),FreeBSD)
 18465: EXTRA_LIBS	+= -pthread
     1: endif
     1: ifeq ($(OS_ARCH),Linux)
 18465: EXTRA_LIBS	+= -ldl
     1: endif
 64338: # Silence warnings on AIX/HP-UX from non-GNU compilers
 64338: ifndef GNU_CC
 64338: ifeq ($(OS_ARCH),AIX)
 64338: # Suppress warnings from xlC
 64338: # 1540-1281: offsetof() on null non-POD types
 64338: # 1540-1608: anonymous unions using static data members
 64338: CFLAGS		+= -qsuppress=1540-1281 -qsuppress=1540-1608
 64338: CXXFLAGS	+= -qsuppress=1540-1281 -qsuppress=1540-1608
 64338: endif
 64338: ifeq ($(OS_ARCH),HP-UX)
 64338: # Suppress warnings from aCC
 64338: # 3055: anonymous unions declaring types
 64338: # 4189: offsetof() on non-POD types
 64338: CFLAGS		+= +W3055,4189
 64338: CXXFLAGS	+= +W3055,4189
 64338: endif
 64338: endif
     1: ifeq ($(OS_ARCH),SunOS)
     1: ifeq ($(TARGET_CPU),sparc)
     1: 
     1: ifdef GNU_CC
 30633: CFLAGS   += -mcpu=v9
 30633: CXXFLAGS += -mcpu=v9
     1: endif # GNU_CC
     1: 
     1: endif
     1: ifeq ($(OS_RELEASE),4.1)
 18465: EXTRA_LIBS	+= -ldl -lnsl
     1: else
 18465: EXTRA_LIBS	+= -lposix4 -ldl -lnsl -lsocket
     1: endif
     1: endif
     1: 
     1: # An AIX Optimization bug causes PR_dtoa() & JS_dtoa to produce wrong result.
     1: # This suppresses optimization for this single compilation unit.
     1: ifeq ($(OS_ARCH),AIX)
 15146: jsatom.o: jsatom.cpp Makefile.in
 84287: 	$(REPORT_BUILD)
 15146: 	@$(MAKE_DEPS_AUTO_CXX)
 15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
 15146: jsdtoa.o: jsdtoa.cpp Makefile.in
 84287: 	$(REPORT_BUILD)
 15146: 	@$(MAKE_DEPS_AUTO_CXX)
 15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
     1: endif
     1: 
 21062: # Compute the linker flags that programs linking against SpiderMonkey should
 21062: # pass to get SpiderMonkey and its dependencies, beyond just the -L and -l
 21062: # for the SpiderMonkey library itself.
 21062: # - EXTRA_DSO_LDOPTS includes the NSPR -L and -l flags.
 21062: # - OS_LIBS includes libraries selected by the configure script.
 21062: # - EXTRA_LIBS includes libraries selected by this Makefile.
 21062: JS_CONFIG_LIBS=$(EXTRA_DSO_LDOPTS) $(OS_LIBS) $(EXTRA_LIBS)
141784: ifdef GNU_CC
141784: JS_CONFIG_MOZ_JS_LIBS=-L$(libdir) -l$(LIBRARY_NAME)
141784: else
141784: JS_CONFIG_MOZ_JS_LIBS=$(libdir)/$(LIBRARY_NAME).lib
141784: endif
 21062: 
 21062: # The configure script invokes this rule explicitly at configure time!
 21062: # It's important that js-config be ready by the time we're done
 21062: # configuring, because we may be running other configure scripts that
 21062: # would like to run js-config themselves, before js is built.
 21062: #
 21062: # This file and rules.mk go through a certain amount of work to decide
 21062: # which libraries to build, what to name them, and what flags to pass
 21062: # when linking them (and thus what flags its own clients must pass).
 21062: # All this information needs to go into the js-config script.  To
 21062: # avoid trying to re-compute all that in the configure script, we just
 21062: # have the configure script generate this Makefile, and then invoke
 21062: # this rule.
141782: 
141782: # Set the various definitions that will be substituted for js-config
141782: # and for the pck-config .pc file.
141782: JS_CONFIG_SUBSTITUTIONS=\
141782: 	-Dprefix="$(prefix)" \
141782: 	-Dexec_prefix="$(exec_prefix)" \
141782: 	-Dincludedir="$(includedir)" \
141782: 	-Dlibdir="$(libdir)" \
141782: 	-DMOZILLA_VERSION="$(MOZILLA_VERSION)" \
141782: 	-DLIBRARY_NAME="$(LIBRARY_NAME)" \
141782: 	-DJS_CONFIG_LIBS="$(JS_CONFIG_LIBS)" \
141784: 	-DJS_CONFIG_MOZ_JS_LIBS="$(JS_CONFIG_MOZ_JS_LIBS)" \
141782: 	-DMOZJS_MAJOR_VERSION="$(MOZJS_MAJOR_VERSION)" \
141782: 	-DMOZJS_MINOR_VERSION="$(MOZJS_MINOR_VERSION)" \
141782: 	-DMOZJS_PATCH_VERSION="$(MOZJS_PATCH_VERSION)" \
141782: 	-DMOZJS_ALPHA="$(MOZJS_ALPHA)" \
141782: 	-DNSPR_CFLAGS="$(NSPR_CFLAGS)" \
141782: 	-DNSPR_PKGCONF_CHECK="$(NSPR_PKGCONF_CHECK)"
141782: 
141783: $(JS_CONFIG_NAME): js-config.in Makefile $(DEPTH)/config/autoconf.mk $(topsrcdir)/config/config.mk $(topsrcdir)/config/rules.mk
141782: 	$(RM) $@.tmp
141782: 	$(PYTHON) $(topsrcdir)/config/Preprocessor.py --marker % $(JS_CONFIG_SUBSTITUTIONS) $< > $@.tmp \
141782: 	&& mv $@.tmp $@ && chmod +x $@
 21062: 
141783: SCRIPTS = $(JS_CONFIG_NAME)
141783: SDK_BINARY = $(JS_CONFIG_NAME)
 21062: 
141782: $(LIBRARY_NAME).pc: js.pc.in
141782: 	$(PYTHON) $(topsrcdir)/config/Preprocessor.py $(JS_CONFIG_SUBSTITUTIONS) $< > $@
141782: 
141782: install:: $(LIBRARY_NAME).pc
141782: 	$(SYSINSTALL) $^ $(DESTDIR)$(libdir)/pkgconfig
141782: 
132467: ######################################################
132467: # BEGIN SpiderMonkey header installation
132467: #
132467: # Mozilla/Gecko/Firefox mostly doesn't concern itself with defining a sensible
132467: # install target, because it's shipping primarily packaged builds.  And even if
132467: # it did, those builds wouldn't really have reason to include header files.  So
132467: # we have to install public headers ourselves, rather than using something from
132467: # config/rules.mk or similar.
132467: #
132467: # The overall directory structure of the installed headers looks like so:
132467: #
132467: #   $(includedir)/
144848: #      $(LIBRARY_NAME)/
140753: #        jsapi.h, jspubtd.h, etc. (all of EXPORTS)
132467: #        js/
132467: #          js/public/* headers (all are public)
132467: #        ds/
132467: #          js/src/ds/* public headers
132467: #        gc/
132467: #          js/src/gc/* public headers
132467: #        mozilla/
132467: #          mfbt headers
132467: #
132467: 
140753: install:: $(EXPORTS)
144848: 	$(SYSINSTALL) $^ $(DESTDIR)$(includedir)/$(LIBRARY_NAME)
 21062: 
132467: install:: $(EXPORTS_js)
144848: 	$(SYSINSTALL) $^ $(DESTDIR)$(includedir)/$(LIBRARY_NAME)/js
132467: 
132467: install:: $(EXPORTS_mozilla)
144848: 	$(SYSINSTALL) $^ $(DESTDIR)$(includedir)/$(LIBRARY_NAME)/mozilla
132467: 
132467: #
132467: # END SpiderMonkey header installation
132467: #############################################
132467: 
 24537: install:: $(SCRIPTS)
 27537: 	$(SYSINSTALL) $^ $(DESTDIR)$(bindir)
 21062: 
141782: install:: $(REAL_LIBRARY) $(SHARED_LIBRARY) $(IMPORT_LIBRARY)
141782: ifneq (,$(REAL_LIBRARY))
141782: 	$(SYSINSTALL) $(REAL_LIBRARY) $(DESTDIR)$(libdir)
141782: 	mv -f $(DESTDIR)$(libdir)/$(REAL_LIBRARY) $(subst $(STATIC_LIBRARY_NAME),$(LIBRARY_NAME),$(DESTDIR)$(libdir)/$(REAL_LIBRARY))
 23126: endif
 21062: ifneq (,$(SHARED_LIBRARY))
 27537: 	$(SYSINSTALL) $(SHARED_LIBRARY) $(DESTDIR)$(libdir)
 21062: endif
 23126: ifneq (,$(IMPORT_LIBRARY))
 27537: 	$(SYSINSTALL) $(IMPORT_LIBRARY) $(DESTDIR)$(libdir)
 23126: endif
 97454: 	$(MAKE) -C shell install
 21062: 
114200: # Extra dependencies and rules for auto-generated headers
114200: host_jskwgen.$(OBJ_SUFFIX): jsversion.h vm/Keywords.h
     1: 
 21659: # Use CURDIR to avoid finding a jsautokw.h in the source tree (from a
 21659: # previous build?) via VPATH when we're building in a separate tree.
 21659: $(CURDIR)/jsautokw.h: host_jskwgen$(HOST_BIN_SUFFIX)
     1: 	./host_jskwgen$(HOST_BIN_SUFFIX) $@
  7058: 
 15453: host_jsoplengen.$(OBJ_SUFFIX): jsopcode.tbl
 15453: 
 21659: # Use CURDIR to avoid finding a jsautooplen.h in the source tree (from
 21659: # a previous build?) via VPATH when we're building in a separate tree.
 21659: $(CURDIR)/jsautooplen.h: host_jsoplengen$(HOST_BIN_SUFFIX)
 15453: 	./host_jsoplengen$(HOST_BIN_SUFFIX) $@
 15453: 
 15453: # Force auto-header generation before compiling any source that may use them
 73832: $(patsubst %.cc,%.$(OBJ_SUFFIX),$(CPPSRCS:%.cpp=%.$(OBJ_SUFFIX))): $(CURDIR)/jsautokw.h $(CURDIR)/jsautooplen.h
 15453: 
 73745: ifdef MOZ_ETW
 73745: ETWProvider.h ETWProvider.rc ETWProvider.mof: ETWProvider.man
 73745: 	$(MC) -um -mof $^
 73745: 
 74651: jsprobes.$(OBJ_SUFFIX): ETWProvider.h
 73745: 
 73745: ETWProvider.res: ETWProvider.rc
 73745: 	$(RC) -r -i "$(SDKDIR)Include" $^
 73745: 
 73745: export:: ETWProvider.res
 73745: 
 73745: install:: ETWProvider.mof ETWProvider.man
 73745: 	$(SYSINSTALL) $^ $(DESTDIR)$(bindir)
 73745: 
 73745: endif
 73745: 
  7058: ifdef HAVE_DTRACE
110596: $(CURDIR)/javascript-trace.h: $(srcdir)/devtools/javascript-trace.d
110596: 	dtrace -h -s $(srcdir)/devtools/javascript-trace.d -o javascript-trace.h.in
 54198: 	sed -e 's/if _DTRACE_VERSION/ifdef INCLUDE_MOZILLA_DTRACE/' \
 54198: 	    -e '/const/!s/char \*/const char */g' \
  7058: 	    javascript-trace.h.in > javascript-trace.h
 21609: 
 22854: # We can't automatically generate dependencies on auto-generated headers;
 22854: # we have to list them explicitly.
120240: $(addsuffix .$(OBJ_SUFFIX),jsprobes jsinterp jsobj): $(CURDIR)/javascript-trace.h
  7058: endif
 23075: 
107415: ifdef HAVE_LINUX_PERF_EVENT_H
107415: pm_linux.$(OBJ_SUFFIX): CXXFLAGS += $(LINUX_HEADERS_INCLUDES)
107415: endif
107415: 
108585: # Prepare self-hosted JS code for embedding
118795: export:: selfhosting
118795: selfhosting:: selfhosted.out.h
108585: 
108585: selfhosting_srcs := \
126322:   $(srcdir)/builtin/Utilities.js \
126322:   $(srcdir)/builtin/Array.js \
137100:   $(srcdir)/builtin/Date.js \
127328:   $(srcdir)/builtin/Intl.js \
132469:   $(srcdir)/builtin/IntlData.js \
137099:   $(srcdir)/builtin/Number.js \
136767:   $(srcdir)/builtin/ParallelArray.js \
137098:   $(srcdir)/builtin/String.js \
108585:   $(NULL)
108585: 
108585: selfhosted_out_h_deps := \
108585:   $(selfhosting_srcs) \
108585:   $(srcdir)/js.msg \
136805:   $(srcdir)/builtin/embedjs.py \
136805:   $(NULL)
108585: 
144938: SELFHOSTED_DEFINES += $(DEFINES) $(ACDEFINES)
144938: ifdef MOZ_DEBUG
144938: SELFHOSTED_DEFINES += $(MOZ_DEBUG_ENABLE_DEFS)
144938: else
144938: SELFHOSTED_DEFINES += $(MOZ_DEBUG_DISABLE_DEFS)
144938: endif
144938: 
108585: selfhosted.out.h: $(selfhosted_out_h_deps)
144938: 	$(PYTHON) $(srcdir)/builtin/embedjs.py $(SELFHOSTED_DEFINES) \
136805: 	  -p '$(CPP)' -m $(srcdir)/js.msg -o $@ $(selfhosting_srcs)
108585: 
 50491: ###############################################
 50491: # BEGIN kludges for the Nitro assembler
 50491: #
 50491: 
 50491: # Needed to "configure" it correctly.  Unfortunately these
 50491: # flags wind up being applied to all code in js/src, not just
 50491: # the code in js/src/assembler.
 91712: CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1
 77053: 
144340: ifneq (,$(ENABLE_YARR_JIT))
 91712: CXXFLAGS +=  -DENABLE_JIT=1
 77053: endif
 50608: 
 50608: INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
 50491: 
 50491: #
 50491: # END kludges for the Nitro assembler
 50491: ###############################################
