17078: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
17078: /* ***** BEGIN LICENSE BLOCK *****
17078:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
17078:  *
17078:  * The contents of this file are subject to the Mozilla Public License Version
17078:  * 1.1 (the "License"); you may not use this file except in compliance with
17078:  * the License. You may obtain a copy of the License at
17078:  * http://www.mozilla.org/MPL/
17078:  *
17078:  * Software distributed under the License is distributed on an "AS IS" basis,
17078:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
17078:  * for the specific language governing rights and limitations under the
17078:  * License.
17078:  *
17078:  * The Original Code is mozilla.org code.
17078:  *
17078:  * The Initial Developer of the Original Code is the Mozilla Corporation.
17078:  * Portions created by the Initial Developer are Copyright (C) 2008
17078:  * the Initial Developer. All Rights Reserved.
17078:  *
17078:  * Contributor(s):
17078:  *   Neil Deakin <enndeakin@gmail.com>
17078:  *
17078:  * Alternatively, the contents of this file may be used under the terms of
17078:  * either of the GNU General Public License Version 2 or later (the "GPL"),
17078:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
17078:  * in which case the provisions of the GPL or the LGPL are applicable instead
17078:  * of those above. If you wish to allow use of your version of this file only
17078:  * under the terms of either the GPL or the LGPL, and not to allow others to
17078:  * use your version of this file under the terms of the MPL, indicate your
17078:  * decision by deleting the provisions above and replace them with the notice
17078:  * and other provisions required by the GPL or the LGPL. If you do not delete
17078:  * the provisions above, a recipient may use your version of this file under
17078:  * the terms of any one of the MPL, the GPL or the LGPL.
17078:  *
17078:  * ***** END LICENSE BLOCK ***** */
17078: 
17078: #include "nsDOMDragEvent.h"
17078: #include "nsIServiceManager.h"
17078: #include "nsGUIEvent.h"
17078: #include "nsContentUtils.h"
17078: #include "nsDOMDataTransfer.h"
17078: #include "nsIDragService.h"
17078: 
17078: nsDOMDragEvent::nsDOMDragEvent(nsPresContext* aPresContext,
17078:                                nsInputEvent* aEvent)
17078:   : nsDOMMouseEvent(aPresContext, aEvent ? aEvent :
17078:                     new nsDragEvent(PR_FALSE, 0, nsnull))
17078: {
17078:   if (aEvent) {
17078:     mEventIsInternal = PR_FALSE;
17078:   }
17078:   else {
17078:     mEventIsInternal = PR_TRUE;
17078:     mEvent->time = PR_Now();
17078:     mEvent->refPoint.x = mEvent->refPoint.y = 0;
40485:     static_cast<nsMouseEvent*>(mEvent)->inputSource = nsIDOMNSMouseEvent::MOZ_SOURCE_UNKNOWN;
17078:   }
17078: }
17078: 
17078: nsDOMDragEvent::~nsDOMDragEvent()
17078: {
17078:   if (mEventIsInternal) {
17078:     if (mEvent->eventStructType == NS_DRAG_EVENT)
17078:       delete static_cast<nsDragEvent*>(mEvent);
17078:     mEvent = nsnull;
17078:   }
17078: }
17078: 
17078: NS_IMPL_ADDREF_INHERITED(nsDOMDragEvent, nsDOMMouseEvent)
17078: NS_IMPL_RELEASE_INHERITED(nsDOMDragEvent, nsDOMMouseEvent)
17078: 
40490: DOMCI_DATA(DragEvent, nsDOMDragEvent)
40490: 
17078: NS_INTERFACE_MAP_BEGIN(nsDOMDragEvent)
17078:   NS_INTERFACE_MAP_ENTRY(nsIDOMDragEvent)
39587:   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(DragEvent)
17078: NS_INTERFACE_MAP_END_INHERITING(nsDOMMouseEvent)
17078: 
17078: NS_IMETHODIMP
17078: nsDOMDragEvent::InitDragEvent(const nsAString & aType,
22943:                               PRBool aCanBubble, PRBool aCancelable,
68870:                               nsIDOMAbstractView* aView, PRInt32 aDetail,
22943:                               PRInt32 aScreenX, PRInt32 aScreenY,
22943:                               PRInt32 aClientX, PRInt32 aClientY, 
22943:                               PRBool aCtrlKey, PRBool aAltKey, PRBool aShiftKey,
22943:                               PRBool aMetaKey, PRUint16 aButton,
22943:                               nsIDOMEventTarget *aRelatedTarget,
17078:                               nsIDOMDataTransfer* aDataTransfer)
17078: {
22943:   nsresult rv = nsDOMMouseEvent::InitMouseEvent(aType, aCanBubble, aCancelable,
22943:                   aView, aDetail, aScreenX, aScreenY, aClientX, aClientY,
22943:                   aCtrlKey, aAltKey, aShiftKey, aMetaKey, aButton,
22943:                   aRelatedTarget);
17078:   NS_ENSURE_SUCCESS(rv, rv);
17078: 
17078:   if (mEventIsInternal && mEvent) {
17078:     nsDragEvent* dragEvent = static_cast<nsDragEvent*>(mEvent);
17078:     dragEvent->dataTransfer = aDataTransfer;
17078:   }
17078: 
17078:   return NS_OK;
17078: }
17078: 
17078: NS_IMETHODIMP
17078: nsDOMDragEvent::GetDataTransfer(nsIDOMDataTransfer** aDataTransfer)
17078: {
29545:   // the dataTransfer field of the event caches the DataTransfer associated
29545:   // with the drag. It is initialized when an attempt is made to retrieve it
29545:   // rather that when the event is created to avoid duplicating the data when
29545:   // no listener ever uses it.
17078:   *aDataTransfer = nsnull;
17078: 
17078:   if (!mEvent || mEvent->eventStructType != NS_DRAG_EVENT) {
17078:     NS_WARNING("Tried to get dataTransfer from non-drag event!");
17078:     return NS_OK;
17078:   }
17078: 
17078:   nsDragEvent* dragEvent = static_cast<nsDragEvent*>(mEvent);
29545:   // for synthetic events, just use the supplied data transfer object even if null
29545:   if (!mEventIsInternal) {
29545:     nsresult rv = nsContentUtils::SetDataTransferInEvent(dragEvent);
29545:     NS_ENSURE_SUCCESS(rv, rv);
17078:   }
17078: 
17078:   NS_IF_ADDREF(*aDataTransfer = dragEvent->dataTransfer);
17078:   return NS_OK;
17078: }
17078: 
17078: nsresult NS_NewDOMDragEvent(nsIDOMEvent** aInstancePtrResult,
17078:                             nsPresContext* aPresContext,
17078:                             nsDragEvent *aEvent) 
17078: {
17078:   nsDOMDragEvent* event = new nsDOMDragEvent(aPresContext, aEvent);
68870:   NS_ENSURE_TRUE(event, NS_ERROR_OUT_OF_MEMORY);
68870: 
17078:   return CallQueryInterface(event, aInstancePtrResult);
17078: }
