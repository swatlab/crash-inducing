43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* vim:set ts=4 sw=4 sts=4 et cin: */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com> (original author)
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttp_h__
43113: #define nsHttp_h__
43113: 
43113: #if defined(MOZ_LOGGING)
43113: #define FORCE_PR_LOG
43113: #endif
43113: 
46672: // e10s mess: IPDL-generatd headers include chromium which both #includes
46672: // prlog.h, and #defines LOG in conflict with this file.
46672: // Solution: (as described in bug 545995)
46672: // 1) ensure that this file is #included before any IPDL-generated files and
46672: //    anything else that #includes prlog.h, so that we can make sure prlog.h
46672: //    sees FORCE_PR_LOG if needed.
46672: // 2) #include IPDL boilerplate, and then undef LOG so our LOG wins.
46672: // 3) nsNetModule.cpp does its own crazy stuff with #including prlog.h
46672: //    multiple times; allow it to define ALLOW_LATE_NSHTTP_H_INCLUDE to bypass
46672: //    check. 
46672: #if defined(PR_LOG) && !defined(ALLOW_LATE_NSHTTP_H_INCLUDE)
46672: #error "If nsHttp.h #included it must come before any IPDL-generated files or other files that #include prlog.h"
46672: #endif
46517: #include "mozilla/net/NeckoChild.h"
46672: #undef LOG
46517: 
43113: #include "plstr.h"
43113: #include "prlog.h"
43113: #include "prtime.h"
43113: #include "nsISupportsUtils.h"
43113: #include "nsPromiseFlatString.h"
43113: #include "nsURLHelper.h"
43113: #include "netCore.h"
43113: 
43113: #if defined(PR_LOGGING)
43113: //
43113: // Log module for HTTP Protocol logging...
43113: //
43113: // To enable logging (see prlog.h for full details):
43113: //
43113: //    set NSPR_LOG_MODULES=nsHttp:5
43113: //    set NSPR_LOG_FILE=http.log
43113: //
43113: // this enables PR_LOG_ALWAYS level information and places all output in
43113: // the file http.log
43113: //
43113: extern PRLogModuleInfo *gHttpLog;
43113: #endif
43113: 
43113: // http logging
43113: #define LOG1(args) PR_LOG(gHttpLog, 1, args)
43113: #define LOG2(args) PR_LOG(gHttpLog, 2, args)
43113: #define LOG3(args) PR_LOG(gHttpLog, 3, args)
43113: #define LOG4(args) PR_LOG(gHttpLog, 4, args)
43113: #define LOG(args) LOG4(args)
43113: 
43113: #define LOG1_ENABLED() PR_LOG_TEST(gHttpLog, 1)
43113: #define LOG2_ENABLED() PR_LOG_TEST(gHttpLog, 2)
43113: #define LOG3_ENABLED() PR_LOG_TEST(gHttpLog, 3)
43113: #define LOG4_ENABLED() PR_LOG_TEST(gHttpLog, 4)
43113: #define LOG_ENABLED() LOG4_ENABLED()
43113: 
43113: // http version codes
43113: #define NS_HTTP_VERSION_UNKNOWN  0
43113: #define NS_HTTP_VERSION_0_9      9
43113: #define NS_HTTP_VERSION_1_0     10
43113: #define NS_HTTP_VERSION_1_1     11
43113: 
43113: typedef PRUint8 nsHttpVersion;
43113: 
43113: //-----------------------------------------------------------------------------
43113: // http connection capabilities
43113: //-----------------------------------------------------------------------------
43113: 
43113: #define NS_HTTP_ALLOW_KEEPALIVE      (1<<0)
43113: #define NS_HTTP_ALLOW_PIPELINING     (1<<1)
43113: 
43113: // a transaction with this caps flag will continue to own the connection,
43113: // preventing it from being reclaimed, even after the transaction completes.
43113: #define NS_HTTP_STICKY_CONNECTION    (1<<2)
43113: 
43113: // a transaction with this caps flag will, upon opening a new connection,
43113: // bypass the local DNS cache
43113: #define NS_HTTP_REFRESH_DNS          (1<<3)
43113: 
43113: // a transaction with this caps flag will not pass SSL client-certificates
43113: // to the server (see bug #466080), but is may also be used for other things
43113: #define NS_HTTP_LOAD_ANONYMOUS       (1<<4)
43113: 
70188: // a transaction with this caps flag keeps timing information
70188: #define NS_HTTP_TIMING_ENABLED       (1<<5)
70188: 
74259: // a transaction with this caps flag will not only not use an existing
74259: // persistent connection but it will close outstanding ones to the same
74259: // host. Used by a forced reload to reset the connection states.
74259: #define NS_HTTP_CLEAR_KEEPALIVES     (1<<6)
74259: 
43113: //-----------------------------------------------------------------------------
43113: // some default values
43113: //-----------------------------------------------------------------------------
43113: 
43113: // hard upper limit on the number of requests that can be pipelined
43113: #define NS_HTTP_MAX_PIPELINED_REQUESTS 8 
43113: 
43113: #define NS_HTTP_DEFAULT_PORT  80
43113: #define NS_HTTPS_DEFAULT_PORT 443
43113: 
43113: #define NS_HTTP_HEADER_SEPS ", \t"
43113: 
43113: //-----------------------------------------------------------------------------
43113: // http atoms...
43113: //-----------------------------------------------------------------------------
43113: 
43113: struct nsHttpAtom
43113: {
43113:     operator const char *() const { return _val; }
43113:     const char *get() const { return _val; }
43113: 
43113:     void operator=(const char *v) { _val = v; }
43113:     void operator=(const nsHttpAtom &a) { _val = a._val; }
43113: 
43113:     // private
43113:     const char *_val;
43113: };
43113: 
43113: struct nsHttp
43113: {
43113:     static nsresult CreateAtomTable();
43113:     static void DestroyAtomTable();
43113: 
43113:     // will dynamically add atoms to the table if they don't already exist
43113:     static nsHttpAtom ResolveAtom(const char *);
43113:     static nsHttpAtom ResolveAtom(const nsACString &s)
43113:     {
43113:         return ResolveAtom(PromiseFlatCString(s).get());
43113:     }
43113: 
43113:     // returns true if the specified token [start,end) is valid per RFC 2616
43113:     // section 2.2
79445:     static bool IsValidToken(const char *start, const char *end);
43113: 
79445:     static inline bool IsValidToken(const nsCString &s) {
43113:         const char *start = s.get();
43113:         return IsValidToken(start, start + s.Length());
43113:     }
43113: 
43113:     // find the first instance (case-insensitive comparison) of the given
43113:     // |token| in the |input| string.  the |token| is bounded by elements of
43113:     // |separators| and may appear at the beginning or end of the |input|
43113:     // string.  null is returned if the |token| is not found.  |input| may be
43113:     // null, in which case null is returned.
43113:     static const char *FindToken(const char *input, const char *token,
43113:                                  const char *separators);
43113: 
43113:     // This function parses a string containing a decimal-valued, non-negative
80486:     // 64-bit integer.  If the value would exceed LL_MAXINT, then false is
80486:     // returned.  Otherwise, this function returns true and stores the
43113:     // parsed value in |result|.  The next unparsed character in |input| is
43113:     // optionally returned via |next| if |next| is non-null.
43113:     //
43113:     // TODO(darin): Replace this with something generic.
43113:     //
79445:     static bool ParseInt64(const char *input, const char **next,
43113:                              PRInt64 *result);
43113: 
43113:     // Variant on ParseInt64 that expects the input string to contain nothing
43113:     // more than the value being parsed.
79445:     static inline bool ParseInt64(const char *input, PRInt64 *result) {
43113:         const char *next;
43113:         return ParseInt64(input, &next, result) && *next == '\0';
43113:     }
43113: 
43113:     // Declare all atoms
43113:     // 
43113:     // The atom names and values are stored in nsHttpAtomList.h and are brought
43113:     // to you by the magic of C preprocessing.  Add new atoms to nsHttpAtomList
43113:     // and all support logic will be auto-generated.
43113:     //
43113: #define HTTP_ATOM(_name, _value) static nsHttpAtom _name;
43113: #include "nsHttpAtomList.h"
43113: #undef HTTP_ATOM
43113: };
43113: 
43113: //-----------------------------------------------------------------------------
43113: // utilities...
43113: //-----------------------------------------------------------------------------
43113: 
43113: static inline PRUint32
43113: PRTimeToSeconds(PRTime t_usec)
43113: {
43113:     return PRUint32( t_usec / PR_USEC_PER_SEC );
43113: }
43113: 
43113: #define NowInSeconds() PRTimeToSeconds(PR_Now())
43113: 
46895: // ripped from glib.h
46895: #undef  CLAMP
46895: #define CLAMP(x, low, high)  (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
46895: 
43113: // round q-value to one decimal place; return most significant digit as uint.
43113: #define QVAL_TO_UINT(q) ((unsigned int) ((q + 0.05) * 10.0))
43113: 
43113: #define HTTP_LWS " \t"
43113: #define HTTP_HEADER_VALUE_SEPS HTTP_LWS ","
43113: 
43113: #endif // nsHttp_h__
