49316: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
49316:  * ***** BEGIN LICENSE BLOCK *****
49316:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
49316:  *
49316:  * The contents of this file are subject to the Mozilla Public License Version
49316:  * 1.1 (the "License"); you may not use this file except in compliance with
49316:  * the License. You may obtain a copy of the License at
49316:  * http://www.mozilla.org/MPL/
49316:  *
49316:  * Software distributed under the License is distributed on an "AS IS" basis,
49316:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
49316:  * for the specific language governing rights and limitations under the
49316:  * License.
49316:  *
49316:  * The Original Code is Mozilla Corporation code.
49316:  *
49316:  * The Initial Developer of the Original Code is Mozilla Foundation.
49316:  * Portions created by the Initial Developer are Copyright (C) 2009
49316:  * the Initial Developer. All Rights Reserved.
49316:  *
49316:  * Contributor(s):
49316:  *   Bas Schouten <bschouten@mozilla.com>
49316:  *
49316:  * Alternatively, the contents of this file may be used under the terms of
49316:  * either the GNU General Public License Version 2 or later (the "GPL"), or
49316:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
49316:  * in which case the provisions of the GPL or the LGPL are applicable instead
49316:  * of those above. If you wish to allow use of your version of this file only
49316:  * under the terms of either the GPL or the LGPL, and not to allow others to
49316:  * use your version of this file under the terms of the MPL, indicate your
49316:  * decision by deleting the provisions above and replace them with the notice
49316:  * and other provisions required by the GPL or the LGPL. If you do not delete
49316:  * the provisions above, a recipient may use your version of this file under
49316:  * the terms of any one of the MPL, the GPL or the LGPL.
49316:  *
49316:  * ***** END LICENSE BLOCK ***** */
49316: 
49316: #ifndef GFX_DEVICEMANAGERD3D9_H
49316: #define GFX_DEVICEMANAGERD3D9_H
49316: 
49316: #include "gfxTypes.h"
49316: #include "nsRect.h"
49316: #include "nsAutoPtr.h"
49316: #include "d3d9.h"
49316: #include "nsTArray.h"
49316: 
49316: namespace mozilla {
49316: namespace layers {
49316: 
49316: class DeviceManagerD3D9;
53783: class LayerD3D9;
51527: class Nv3DVUtils;
49316: 
49316: /**
49316:  * SwapChain class, this class manages the swap chain belonging to a
49316:  * LayerManagerD3D9.
49316:  */
49316: class THEBES_API SwapChainD3D9
49316: {
49316:   NS_INLINE_DECL_REFCOUNTING(SwapChainD3D9)
49316: public:
49316:   ~SwapChainD3D9();
49316: 
49316:   /**
49316:    * This function will prepare the device this swap chain belongs to for
49316:    * rendering to this swap chain. Only after calling this function can the
49316:    * swap chain be drawn to, and only until this function is called on another
49316:    * swap chain belonging to this device will the device draw to it. Passed in
49316:    * is the size of the swap chain. If the window size differs from the size
49316:    * during the last call to this function the swap chain will resize. Note that
49316:    * in no case does this function guarantee the backbuffer to still have its
49316:    * old content.
49316:    */
49316:   bool PrepareForRendering();
49316: 
49316:   /**
49316:    * This function will present the selected rectangle of the swap chain to
49316:    * its associated window.
49316:    */
49316:   void Present(const nsIntRect &aRect);
49316: 
49316: private:
49316:   friend class DeviceManagerD3D9;
49316: 
49316:   SwapChainD3D9(DeviceManagerD3D9 *aDeviceManager);
49316:   
49316:   bool Init(HWND hWnd);
49316: 
49316:   /**
49316:    * This causes us to release our swap chain, clearing out our resource usage
49316:    * so the master device may reset.
49316:    */
49316:   void Reset();
49316: 
49316:   nsRefPtr<IDirect3DSwapChain9> mSwapChain;
49316:   nsRefPtr<DeviceManagerD3D9> mDeviceManager;
49316:   HWND mWnd;
49316: };
49316: 
49316: /**
49316:  * Device manager, this class is used by the layer managers to share the D3D9
49316:  * device and create swap chains for the individual windows the layer managers
49316:  * belong to.
49316:  */
49316: class THEBES_API DeviceManagerD3D9
49316: {
49316: public:
49316:   DeviceManagerD3D9();
51996:   NS_IMETHOD_(nsrefcnt) AddRef(void);
51996:   NS_IMETHOD_(nsrefcnt) Release(void);
51996: protected:
51996:   nsAutoRefCnt mRefCnt;
51996:   NS_DECL_OWNINGTHREAD
49316: 
51996: public:
49316:   bool Init();
49316: 
49316:   /**
49316:    * Sets up the render state for the device for layer rendering.
49316:    */
49316:   void SetupRenderState();
49316: 
49316:   /**
49316:    * Create a swap chain setup to work with the specified window.
49316:    */
49316:   already_AddRefed<SwapChainD3D9> CreateSwapChain(HWND hWnd);
49316: 
49316:   IDirect3DDevice9 *device() { return mDevice; }
49316: 
49317:   bool IsD3D9Ex() { return mDeviceEx; }
49317: 
49317:   bool HasDynamicTextures() { return mHasDynamicTextures; }
49317: 
49316:   enum ShaderMode {
49316:     RGBLAYER,
51963:     RGBALAYER,
49316:     YCBCRLAYER,
49316:     SOLIDCOLORLAYER
49316:   };
49316: 
49316:   void SetShaderMode(ShaderMode aMode);
49316: 
49316:   /** 
51527:    * Return pointer to the Nv3DVUtils instance 
51527:    */ 
51527:   Nv3DVUtils *GetNv3DVUtils()  { return mNv3DVUtils; } 
51527: 
51527:   /**
53783:    * We keep a list of all layers here that may have hardware resource allocated
53783:    * so we can clean their resources on reset.
49316:    */
53783:   nsTArray<LayerD3D9*> mLayersWithResources;
49316: private:
49316:   friend class SwapChainD3D9;
49316: 
50600:   ~DeviceManagerD3D9();
50600: 
49316:   /**
49316:    * This function verifies the device is ready for rendering, internally this
49316:    * will test the cooperative level of the device and reset the device if
49316:    * needed. If this returns false subsequent rendering calls may return errors.
49316:    */
49316:   bool VerifyReadyForRendering();
49316: 
49316:   /* Array used to store all swap chains for device resets */
49316:   nsTArray<SwapChainD3D9*> mSwapChains;
49316: 
49316:   /* The D3D device we use */
49316:   nsRefPtr<IDirect3DDevice9> mDevice;
49316: 
49317:   /* The D3D9Ex device - only valid on Vista+ with WDDM */
49317:   nsRefPtr<IDirect3DDevice9Ex> mDeviceEx;
49317: 
49316:   /* An instance of the D3D9 object */
49316:   nsRefPtr<IDirect3D9> mD3D9;
49316: 
49317:   /* An instance of the D3D9Ex object - only valid on Vista+ with WDDM */
49317:   nsRefPtr<IDirect3D9Ex> mD3D9Ex;
49317: 
49316:   /* Vertex shader used for layer quads */
49316:   nsRefPtr<IDirect3DVertexShader9> mLayerVS;
49316: 
49316:   /* Pixel shader used for RGB textures */
49316:   nsRefPtr<IDirect3DPixelShader9> mRGBPS;
49316: 
51963:   /* Pixel shader used for RGBA textures */
51963:   nsRefPtr<IDirect3DPixelShader9> mRGBAPS;
51963: 
49316:   /* Pixel shader used for RGB textures */
49316:   nsRefPtr<IDirect3DPixelShader9> mYCbCrPS;
49316: 
49316:   /* Pixel shader used for solid colors */
49316:   nsRefPtr<IDirect3DPixelShader9> mSolidColorPS;
49316: 
49316:   /* Vertex buffer containing our basic vertex structure */
49316:   nsRefPtr<IDirect3DVertexBuffer9> mVB;
49316: 
49316:   /* Our vertex declaration */
49316:   nsRefPtr<IDirect3DVertexDeclaration9> mVD;
49316: 
49316:   /* Our focus window - this is really a dummy window we can associate our
49316:    * device with.
49316:    */
49316:   HWND mFocusWnd;
49316: 
49317:   /* If this device supports dynamic textures */
49317:   bool mHasDynamicTextures;
49317: 
51527:   /* Nv3DVUtils instance */ 
51527:   nsAutoPtr<Nv3DVUtils> mNv3DVUtils; 
51527: 
49316:   /**
49316:    * Verifies all required device capabilities are present.
49316:    */
49316:   bool VerifyCaps();
49316: };
49316: 
49316: } /* namespace layers */
49316: } /* namespace mozilla */
49316: 
49316: #endif /* GFX_DEVICEMANAGERD3D9_H */
