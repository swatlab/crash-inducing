    1: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2000
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Vidur Apparao <vidur@netscape.com> (original author)
    1:  *   Johnny Stenback <jst@netscape.com>
89079:  *   Robert Sayre <sayrer@gmail.com>
89079:  *   Ms2ger <ms2ger@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsIDOMNode.idl"
    1: 
    1: /**
    1:  * The nsIDOMElement interface represents an element in an HTML or 
    1:  * XML document. 
    1:  *
    1:  * For more information on this interface please see 
89079:  * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#interface-element
    1:  */
    1: 
89079: [scriptable, uuid(f561753a-1d4f-40c1-b147-ea955fc6fd94)]
    1: interface nsIDOMElement : nsIDOMNode
    1: {
    1:   readonly attribute DOMString        tagName;
89079: 
89079:   /**
89079:    * Returns a DOMTokenList object reflecting the class attribute.
89079:    */
89079:   readonly attribute nsIDOMDOMTokenList classList;
89079: 
    1:   DOMString          getAttribute(in DOMString name);
    1:   DOMString          getAttributeNS(in DOMString namespaceURI, 
    1:                                     in DOMString localName);
89079:   void               setAttribute(in DOMString name, 
89079:                                   in DOMString value);
    1:   void               setAttributeNS(in DOMString namespaceURI, 
    1:                                     in DOMString qualifiedName, 
89079:                                     in DOMString value);
89079:   void               removeAttribute(in DOMString name);
    1:   void               removeAttributeNS(in DOMString namespaceURI, 
    1:                                        in DOMString localName);
    1:   boolean            hasAttribute(in DOMString name);
    1:   boolean            hasAttributeNS(in DOMString namespaceURI, 
    1:                                     in DOMString localName);
80116: 
89079:   // Obsolete methods.
89079:   nsIDOMAttr         getAttributeNode(in DOMString name);
89079:   nsIDOMAttr         setAttributeNode(in nsIDOMAttr newAttr);
89079:   nsIDOMAttr         removeAttributeNode(in nsIDOMAttr oldAttr);
89079:   nsIDOMAttr         getAttributeNodeNS(in DOMString namespaceURI, 
89079:                                         in DOMString localName);
89079:   nsIDOMAttr         setAttributeNodeNS(in nsIDOMAttr newAttr)
89079:                                         raises(DOMException);
89079: 
89079:   nsIDOMNodeList     getElementsByTagName(in DOMString name);
89079:   nsIDOMNodeList     getElementsByTagNameNS(in DOMString namespaceURI, 
89079:                                             in DOMString localName);
89079:   /**
89079:    * Retrieve elements matching all classes listed in a
89079:    * space-separated string.
89079:    */
89079:   nsIDOMNodeList getElementsByClassName(in DOMString classes);
89079: 
89079:   /**
89079:    * Returns a live nsIDOMNodeList of the current child elements.
89079:    */
89079:   [binaryname(ChildElements)]
89079:   readonly attribute nsIDOMNodeList children;
89079:   /**
89079:    * Similar as the attributes on nsIDOMNode, but navigates just elements
89079:    * rather than all nodes.
89079:    */
89079:   readonly attribute nsIDOMElement firstElementChild;
89079:   readonly attribute nsIDOMElement lastElementChild;
89079:   readonly attribute nsIDOMElement previousElementSibling;
89079:   readonly attribute nsIDOMElement nextElementSibling;
89079:   /**
89079:    * Returns the number of child nodes that are nsIDOMElements.
89079:    */
89079:   readonly attribute unsigned long childElementCount;
89079: 
89079: 
89079:   // HTML
80116:   [implicit_jscontext] attribute jsval onmouseenter;
80116:   [implicit_jscontext] attribute jsval onmouseleave;
89079: 
89079: 
89079:   // CSSOM View
89079:   /**
89079:    * Retrieve a list of rectangles, one for each CSS border-box associated with
89079:    * the element. The coordinates are in CSS pixels, and relative to
89079:    * the top-left of the document's viewport, unless the document
89079:    * has an SVG foreignobject ancestor, in which case the coordinates are
89079:    * relative to the top-left of the content box of the nearest SVG foreignobject
89079:    * ancestor. The coordinates are calculated as if every scrollable element
89079:    * is scrolled to its default position.
89079:    *
89079:    * Note: the boxes of overflowing children do not affect these rectangles.
89079:    * Note: some elements have empty CSS boxes. Those return empty rectangles,
89079:    * but the coordinates may still be meaningful.
89079:    * Note: some elements have no CSS boxes (including display:none elements,
89079:    * HTML AREA elements, and SVG elements that do not render). Those return
89079:    * an empty list.
89079:    */
89079:   nsIDOMClientRectList getClientRects();
89079: 
89079:   /**
89079:    * Returns the union of all rectangles in the getClientRects() list. Empty
89079:    * rectangles are ignored, except that if all rectangles are empty,
89079:    * we return an empty rectangle positioned at the top-left of the first
89079:    * rectangle in getClientRects().
89079:    */
89079:   nsIDOMClientRect getBoundingClientRect();
89079: 
89079:   /**
89079:    * The vertical scroll position of the element, or 0 if the element is not
89079:    * scrollable. This property may be assigned a value to change the
89079:    * vertical scroll position.
89079:    */
89079:   attribute long             scrollTop;
89079: 
89079:   /**
89079:    * The horizontal scroll position of the element, or 0 if the element is not
89079:    * scrollable. This property may be assigned a value to change the
89079:    * horizontal scroll position.
89079:    */
89079:   attribute long             scrollLeft;
89079: 
89079:   /**
89079:    * The width of the scrollable area of the element. If the element is not
89079:    * scrollable, scrollWidth is equivalent to the offsetWidth.
89079:    */
89079:   readonly attribute long             scrollWidth;
89079: 
89079:   /**
89079:    * The height of the scrollable area of the element. If the element is not
89079:    * scrollable, scrollHeight is equivalent to the offsetHeight.
89079:    */
89079:   readonly attribute long             scrollHeight;
89079: 
89079:   /**
89079:    * The height in CSS pixels of the element's top border.
89079:    */
89079:   readonly attribute long             clientTop;
89079: 
89079:   /**
89079:    * The width in CSS pixels of the element's left border and scrollbar
89079:    * if it is present on the left side.
89079:    */
89079:   readonly attribute long             clientLeft;
89079: 
89079:   /**
89079:    * The height in CSS pixels of the element's padding box. If the element is
89079:    * scrollable, the scroll bars are included inside this width.
89079:    */
89079:   readonly attribute long             clientWidth;
89079: 
89079:   /**
89079:    * The width in CSS pixels of the element's padding box. If the element is
89079:    * scrollable, the scroll bars are included inside this height.
89079:    */
89079:   readonly attribute long             clientHeight;
89079: 
89079: 
89079:   // Selectors API
89079:   /**
89079:    * Returns whether this element would be selected by the given selector
89079:    * string.
89079:    *
89079:    * See <http://dev.w3.org/2006/webapi/selectors-api2/#matchesselector>
89079:    */
89079:   boolean mozMatchesSelector([Null(Stringify)] in DOMString selector);
89079: 
89079: 
89079:   // Proprietary extensions
89079:   /**
89079:    * Set this during a mousedown event to grab and retarget all mouse events
89079:    * to this element until the mouse button is released or releaseCapture is
89079:    * called. If retargetToElement is true, then all events are targetted at
89079:    * this element. If false, events can also fire at descendants of this
89079:    * element.
89079:    * 
89079:    */
89079:   void setCapture([optional] in boolean retargetToElement);
89079: 
89079:   /**
89079:    * If this element has captured the mouse, release the capture. If another
89079:    * element has captured the mouse, this method has no effect.
89079:    */
89079:   void releaseCapture();
    1: };
