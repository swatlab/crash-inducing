    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Original Author: Aaron Leventhal (aaronl@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef _nsAccessibleTreeWalker_H_
    1: #define _nsAccessibleTreeWalker_H_
    1: 
34904: /* For documentation of the accessibility architecture, see
34904:  * http://www.mozilla.org/access/architecture
    1:  */
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsIDocument.h"
    1: #include "nsIAccessible.h"
27513: #include "nsIDOMNode.h"
    1: #include "nsIDOMNodeList.h"
    1: #include "nsIAccessibilityService.h"
    1: #include "nsIWeakReference.h"
34904: #include "nsIFrame.h"
    1: 
    1: enum { eSiblingsUninitialized = -1, eSiblingsWalkFrames = -2 };
    1: 
    1: struct WalkState {
    1:   nsCOMPtr<nsIAccessible> accessible;
    1:   nsCOMPtr<nsIDOMNode> domNode;
    1:   nsCOMPtr<nsIDOMNodeList> siblingList;
    1:   nsIContent *parentContent; // For walking normal DOM
    1:   WalkState *prevState;
34904:   nsWeakFrame frame;       // Helps avoid GetPrimaryFrameFor() calls
    1:   PRInt32 siblingIndex;    // Holds a state flag or an index into the siblingList
    1:   PRBool isHidden;         // Don't enter subtree if hidden
    1: };
    1:  
    1: /** This class is used to walk the DOM tree. It skips
    1:   * everything but nodes that either implement nsIAccessibleProvider
    1:   * or have primary frames that implement "GetAccessible"
    1:   */
    1: 
    1: class nsAccessibleTreeWalker {
    1: public:
    1:   nsAccessibleTreeWalker(nsIWeakReference* aShell, nsIDOMNode* aContent, 
    1:     PRBool mWalkAnonymousContent);
    1:   virtual ~nsAccessibleTreeWalker();
    1: 
27607:   /**
27607:    * Moves current state to point to the next child accessible.
27607:    */
    1:   NS_IMETHOD GetNextSibling();
27607: 
27607:   /**
27607:    * Moves current state to point to the first child accessible.
27607:    */
    1:   NS_IMETHOD GetFirstChild();
    1: 
27607:   /**
27607:    * Current state. Used to initialize a11y tree walker and to get an accessible
27607:    * current state points to.
27607:    */
    1:   WalkState mState;
    1: 
    1: protected:
27607: 
27607:   /**
27607:    * Return true if currently navigated node/frame is accessible.
27607:    */
    1:   PRBool GetAccessible();
27607: 
27607:   /**
27607:    * Prepares current state to navigate through children of node/frame.
27607:    */
    1:   void GetKids(nsIDOMNode *aParent);
    1: 
27607:   /**
27607:    * Clears the current state.
27607:    */
    1:   void ClearState();
27607: 
27607:   /**
27607:    * Push current state on top of stack. State stack is used to navigate down to
27607:    * DOM/frame subtree during searching of accessible children.
27607:    */
    1:   NS_IMETHOD PushState();
27607: 
27607:   /**
27607:    * Pop state from stack and make it current.
27607:    */
    1:   NS_IMETHOD PopState();
    1: 
27607:   /**
27607:    * Change current state so that its frame is changed to next frame.
27607:    *
27607:    * @param  aTryFirstChild  [in] points whether we should move to child or
27607:    *                         sibling frame
27607:    */
    1:   void UpdateFrame(PRBool aTryFirstChild);
27607: 
27607:   /**
27607:    * Change current state so that its node is changed to next node.
27607:    */
    1:   void GetNextDOMNode();
    1: 
    1:   nsCOMPtr<nsIWeakReference> mWeakShell;
    1:   nsCOMPtr<nsIAccessibilityService> mAccService;
    1:   PRBool mWalkAnonContent;
    1: };
    1: 
    1: #endif 
