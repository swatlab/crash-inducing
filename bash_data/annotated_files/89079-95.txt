    1: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is the Mozilla SVG project.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Crocodile Clips Ltd..
    1:  * Portions created by the Initial Developer are Copyright (C) 2001
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Alex Fritze <alex.fritze@crocodile-clips.com> (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsIDOMSVGElement.idl"
    1: 
    1: interface nsIDOMSVGAnimatedNumber;
    1: interface nsIDOMSVGPoint;
    1: interface nsIDOMSVGPathSegClosePath;
    1: interface nsIDOMSVGPathSegMovetoAbs;
    1: interface nsIDOMSVGPathSegMovetoRel;
    1: interface nsIDOMSVGPathSegLinetoAbs;
    1: interface nsIDOMSVGPathSegLinetoRel;
    1: interface nsIDOMSVGPathSegCurvetoCubicAbs;
    1: interface nsIDOMSVGPathSegCurvetoCubicRel;
    1: interface nsIDOMSVGPathSegCurvetoQuadraticAbs;
    1: interface nsIDOMSVGPathSegCurvetoQuadraticRel;
    1: interface nsIDOMSVGPathSegArcAbs;
    1: interface nsIDOMSVGPathSegArcRel;
    1: interface nsIDOMSVGPathSegLinetoHorizontalAbs;
    1: interface nsIDOMSVGPathSegLinetoHorizontalRel;
    1: interface nsIDOMSVGPathSegLinetoVerticalAbs;
    1: interface nsIDOMSVGPathSegLinetoVerticalRel;
    1: interface nsIDOMSVGPathSegCurvetoCubicSmoothAbs;
    1: interface nsIDOMSVGPathSegCurvetoCubicSmoothRel;
    1: interface nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs;
    1: interface nsIDOMSVGPathSegCurvetoQuadraticSmoothRel;
    1: 
89079: [scriptable, uuid(8fd0f541-49c2-484d-a34c-a24eb25fe286)]
    1: interface nsIDOMSVGPathElement
    1:   : nsIDOMSVGElement
    1: /*
    1:         The SVG DOM makes use of multiple interface inheritance.
    1:         Since XPCOM only supports single interface inheritance,
    1:         the best thing that we can do is to promise that whenever
    1:         an object implements _this_ interface it will also
    1:         implement the following interfaces. (We then have to QI to
    1:         hop between them.)
    1:         
    1:     nsIDOMSVGTests,
    1:     nsIDOMSVGLangSpace,
    1:     nsIDOMSVGExternalResourcesRequired,
    1:     nsIDOMSVGStylable,
    1:     nsIDOMSVGTransformable,
    1:     events::nsIDOMEventTarget,
    1:     nsIDOMSVGAnimatedPathData
    1: */
    1: { 
    1:   readonly attribute nsIDOMSVGAnimatedNumber pathLength;
    1:   
    1:   float          getTotalLength();
    1:   nsIDOMSVGPoint getPointAtLength(in float distance);
    1:   unsigned long  getPathSegAtLength(in float distance);
    1: 
    1:   nsIDOMSVGPathSegClosePath createSVGPathSegClosePath();
    1:   nsIDOMSVGPathSegMovetoAbs createSVGPathSegMovetoAbs(in float x, in float y);
    1:   nsIDOMSVGPathSegMovetoRel createSVGPathSegMovetoRel(in float x, in float y);
    1:   nsIDOMSVGPathSegLinetoAbs createSVGPathSegLinetoAbs(in float x, in float y);
    1:   nsIDOMSVGPathSegLinetoRel createSVGPathSegLinetoRel(in float x, in float y);
    1: 
    1:   nsIDOMSVGPathSegCurvetoCubicAbs     createSVGPathSegCurvetoCubicAbs(in float x,
    1:                                                                       in float y,
    1:                                                                       in float x1,
    1:                                                                       in float y1,
    1:                                                                       in float x2,
    1:                                                                       in float y2);
    1:   nsIDOMSVGPathSegCurvetoCubicRel     createSVGPathSegCurvetoCubicRel(in float x,
    1:                                                                       in float y,
    1:                                                                       in float x1,
    1:                                                                       in float y1,
    1:                                                                       in float x2,
    1:                                                                       in float y2);
    1:   nsIDOMSVGPathSegCurvetoQuadraticAbs createSVGPathSegCurvetoQuadraticAbs(in float x,
    1:                                                                           in float y,
    1:                                                                           in float x1,
    1:                                                                           in float y1);
    1:   nsIDOMSVGPathSegCurvetoQuadraticRel createSVGPathSegCurvetoQuadraticRel(in float x,
    1:                                                                           in float y,
    1:                                                                           in float x1,
    1:                                                                           in float y1);
    1: 
    1:   nsIDOMSVGPathSegArcAbs createSVGPathSegArcAbs(in float x, in float y, in float r1,
    1:                                                 in float r2, in float angle,
    1:                                                 in boolean largeArcFlag,
    1:                                                 in boolean sweepFlag);
    1:   nsIDOMSVGPathSegArcRel createSVGPathSegArcRel(in float x, in float y, in float r1,
    1:                                                 in float r2, in float angle,
    1:                                                 in boolean largeArcFlag,
    1:                                                 in boolean sweepFlag);
    1: 
    1:   nsIDOMSVGPathSegLinetoHorizontalAbs createSVGPathSegLinetoHorizontalAbs(in float x);
    1:   nsIDOMSVGPathSegLinetoHorizontalRel createSVGPathSegLinetoHorizontalRel(in float x);
    1:   nsIDOMSVGPathSegLinetoVerticalAbs   createSVGPathSegLinetoVerticalAbs(in float y);
    1:   nsIDOMSVGPathSegLinetoVerticalRel   createSVGPathSegLinetoVerticalRel(in float y);
    1: 
    1:   nsIDOMSVGPathSegCurvetoCubicSmoothAbs     createSVGPathSegCurvetoCubicSmoothAbs(in float x,
    1:                                                                                   in float y,
    1:                                                                                   in float x2,
    1:                                                                                   in float y2);
    1:   nsIDOMSVGPathSegCurvetoCubicSmoothRel     createSVGPathSegCurvetoCubicSmoothRel(in float x,
    1:                                                                                   in float y,
    1:                                                                                   in float x2,
    1:                                                                                   in float y2);
    1:   nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs createSVGPathSegCurvetoQuadraticSmoothAbs(in float x,
    1:                                                                                       in float y);
    1:   nsIDOMSVGPathSegCurvetoQuadraticSmoothRel createSVGPathSegCurvetoQuadraticSmoothRel(in float x,
    1:                                                                                       in float y);
    1: };
