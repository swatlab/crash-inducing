    1: dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
67788: dnl vi: set tabstop=4 shiftwidth=4 expandtab syntax=m4:
    1: dnl ***** BEGIN LICENSE BLOCK *****
    1: dnl Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: dnl
    1: dnl The contents of this file are subject to the Mozilla Public License Version
    1: dnl 1.1 (the "License"); you may not use this file except in compliance with
    1: dnl the License. You may obtain a copy of the License at
    1: dnl http://www.mozilla.org/MPL/
    1: dnl
    1: dnl Software distributed under the License is distributed on an "AS IS" basis,
    1: dnl WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: dnl for the specific language governing rights and limitations under the
    1: dnl License.
    1: dnl
    1: dnl The Original Code is this file as it was released upon August 6, 1998.
    1: dnl
    1: dnl The Initial Developer of the Original Code is
    1: dnl Christopher Seawood.
    1: dnl Portions created by the Initial Developer are Copyright (C) 1998-2001
    1: dnl the Initial Developer. All Rights Reserved.
    1: dnl
    1: dnl Contributor(s):
    1: dnl   Jamie Zawinski <jwz@jwz.org>
    1: dnl   gettimeofday args check
    1: dnl   Christopher Blizzard <blizzard@appliedtheory.com>
    1: dnl   gnomefe update & enable-pthreads
    1: dnl   Ramiro Estrugo <ramiro@netscape.com>
    1: dnl   X11 makedepend support
    1: dnl   Insure support.
    1: dnl   Henry Sobotka <sobotka@axess.com>
    1: dnl   OS/2 support
    1: dnl   Dan Mosedale <dmose@mozilla.org>
    1: dnl   LDAP support
    1: dnl   Seth Spitzer <sspitzer@netscape.com>
    1: dnl   xpctools support
    1: dnl   Benjamin Smedberg <benjamin@smedbergs.us>
    1: dnl   Howard Chu <hyc@symas.com>
    1: dnl   MSYS support
    1: dnl   Mark Mentovai <mark@moxienet.com>:
    1: dnl   Mac OS X 10.4 support
    1: dnl   Giorgio Maone <g.maone@informaction.com>
    1: dnl   MSVC l10n compatible version check
 1796: dnl   Ben Turner <mozilla@songbirdnest.com>
33494: dnl   Windows x64 support
33494: dnl   Makoto Kato <m_kato@ga2.so-net.ne.jp>
    1: dnl
    1: dnl Alternatively, the contents of this file may be used under the terms of
    1: dnl either the GNU General Public License Version 2 or later (the "GPL"), or
    1: dnl the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: dnl in which case the provisions of the GPL or the LGPL are applicable instead
    1: dnl of those above. If you wish to allow use of your version of this file only
    1: dnl under the terms of either the GPL or the LGPL, and not to allow others to
    1: dnl use your version of this file under the terms of the MPL, indicate your
    1: dnl decision by deleting the provisions above and replace them with the notice
    1: dnl and other provisions required by the GPL or the LGPL. If you do not delete
    1: dnl the provisions above, a recipient may use your version of this file under
    1: dnl the terms of any one of the MPL, the GPL or the LGPL.
    1: dnl
    1: dnl ***** END LICENSE BLOCK *****
    1: 
    1: dnl Process this file with autoconf to produce a configure script.
    1: dnl ========================================================
    1: 
    1: AC_PREREQ(2.13)
    1: AC_INIT(config/config.mk)
    1: AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
    1: AC_CANONICAL_SYSTEM
    1: TARGET_CPU="${target_cpu}"
    1: TARGET_VENDOR="${target_vendor}"
    1: TARGET_OS="${target_os}"
    1: 
15396: MOZ_DEB_TIMESTAMP=`date +"%a, %d  %b %Y %T %z"   2>&1` 
15396: AC_SUBST(MOZ_DEB_TIMESTAMP)
15396: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Don't change the following two lines.  Doing so breaks:
    1: dnl =
    1: dnl = CFLAGS="-foo" ./configure
    1: dnl =
    1: dnl ========================================================
    1: CFLAGS="${CFLAGS=}"
    1: CPPFLAGS="${CPPFLAGS=}"
    1: CXXFLAGS="${CXXFLAGS=}"
    1: LDFLAGS="${LDFLAGS=}"
    1: HOST_CFLAGS="${HOST_CFLAGS=}"
    1: HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
    1: HOST_LDFLAGS="${HOST_LDFLAGS=}"
    1: 
    1: dnl ========================================================
    1: dnl = Preserve certain environment flags passed to configure
    1: dnl = We want sub projects to receive the same flags
    1: dnl = untainted by this configure script
    1: dnl ========================================================
    1: _SUBDIR_CC="$CC"
    1: _SUBDIR_CXX="$CXX"
    1: _SUBDIR_CFLAGS="$CFLAGS"
    1: _SUBDIR_CPPFLAGS="$CPPFLAGS"
    1: _SUBDIR_CXXFLAGS="$CXXFLAGS"
    1: _SUBDIR_LDFLAGS="$LDFLAGS"
    1: _SUBDIR_HOST_CC="$HOST_CC"
    1: _SUBDIR_HOST_CFLAGS="$HOST_CFLAGS"
    1: _SUBDIR_HOST_CXXFLAGS="$HOST_CXXFLAGS"
    1: _SUBDIR_HOST_LDFLAGS="$HOST_LDFLAGS"
    1: _SUBDIR_CONFIG_ARGS="$ac_configure_args"
    1: 
    1: dnl Set the version number of the libs included with mozilla
    1: dnl ========================================================
    1: MOZJPEG=62
43074: MOZPNG=10401
   25: MOZZLIB=0x1230
    1: NSPR_VERSION=4
    1: NSS_VERSION=3
    1: 
    1: dnl Set the minimum version of toolkit libs used by mozilla
    1: dnl ========================================================
    1: GLIB_VERSION=1.2.0
    1: LIBIDL_VERSION=0.6.3
    1: PERL_VERSION=5.006
50939: PYTHON_VERSION=2.5
55342: CAIRO_VERSION=1.10
21056: PANGO_VERSION=1.14.0
12668: GTK2_VERSION=2.10.0
    1: WINDRES_VERSION=2.14.90
    1: W32API_VERSION=3.8
    1: GNOMEVFS_VERSION=2.0
    1: GNOMEUI_VERSION=2.2.0
    1: GCONF_VERSION=1.2.1
71998: GIO_VERSION=2.18
    1: STARTUP_NOTIFICATION_VERSION=0.8
  643: DBUS_VERSION=0.60
64472: SQLITE_VERSION=3.7.5
23463: LIBNOTIFY_VERSION=0.4
    1: 
    1: MSMANIFEST_TOOL=
    1: 
    1: dnl Set various checks
    1: dnl ========================================================
    1: MISSING_X=
    1: AC_PROG_AWK
    1: 
    1: dnl Initialize the Pthread test variables early so they can be
    1: dnl  overridden by each platform.
    1: dnl ========================================================
    1: USE_PTHREADS=
    1: _PTHREAD_LDFLAGS=""
    1: 
    1: dnl Do not allow a separate objdir build if a srcdir build exists.
    1: dnl ==============================================================
    1: _topsrcdir=`cd \`dirname $0\`; pwd`
    1: _objdir=`pwd`
11967: 
    1: if test "$_topsrcdir" != "$_objdir"
    1: then
    1:   # Check for a couple representative files in the source tree
    1:   _conflict_files=
    1:   for file in $_topsrcdir/Makefile $_topsrcdir/config/autoconf.mk; do
    1:     if test -f $file; then
    1:       _conflict_files="$_conflict_files $file"
    1:     fi
    1:   done
    1:   if test "$_conflict_files"; then
    1:     echo "***"
    1:     echo "*   Your source tree contains these files:"
    1:     for file in $_conflict_files; do
    1:       echo "*         $file"
    1:     done
    1:     cat 1>&2 <<-EOF
    1: 	*   This indicates that you previously built in the source tree.
    1: 	*   A source tree build can confuse the separate objdir build.
    1: 	*
    1: 	*   To clean up the source tree:
    1: 	*     1. cd $_topsrcdir
    1: 	*     2. gmake distclean
    1: 	***
    1: 	EOF
    1:     exit 1
    1:     break
    1:   fi
    1: fi
    1: MOZ_BUILD_ROOT=`pwd`
    1: 
33298: dnl Default to MSVC for win32 and gcc-4.2 for darwin
    1: dnl ==============================================================
    1: if test -z "$CROSS_COMPILE"; then
    1: case "$target" in
63450: *-mingw*)
    1:     if test -z "$CC"; then CC=cl; fi
    1:     if test -z "$CXX"; then CXX=cl; fi
14341:     if test -z "$CPP"; then CPP="cl -E -nologo"; fi
14341:     if test -z "$CXXCPP"; then CXXCPP="cl -TP -E -nologo"; ac_cv_prog_CXXCPP="$CXXCPP"; fi
    1:     if test -z "$LD"; then LD=link; fi
33494:     if test -z "$AS"; then
33494:         case "${target_cpu}" in
33494:         i*86)
33494:             AS=ml;
33494:             ;;
33494:         x86_64)
33494:             AS=ml64;
33494:             ;;
33494:         esac
33494:     fi
    1:     if test -z "$MIDL"; then MIDL=midl; fi
    1:     ;;
33298: *-darwin*)
33298:     if test -z "$CC"; then CC=gcc-4.2; fi
33298:     if test -z "$CXX"; then CXX=g++-4.2; fi
33298:     ;;
    1: esac
    1: fi
    1: 
    1: COMPILE_ENVIRONMENT=1
39010: MOZ_ARG_DISABLE_BOOL(compile-environment,
    1: [  --disable-compile-environment
    1:                           Disable compiler/library checks.],
    1:     COMPILE_ENVIRONMENT= )
30216: AC_SUBST(COMPILE_ENVIRONMENT)
    1: 
16114: MOZ_ARG_WITH_STRING(l10n-base,
16728: [  --with-l10n-base=DIR    path to l10n repositories],
16114:     L10NBASEDIR=$withval)
69923: if test -n "$L10NBASEDIR"; then
16114:     if test "$L10NBASEDIR" = "yes" -o "$L10NBASEDIR" = "no"; then
16114:         AC_MSG_ERROR([--with-l10n-base must specify a path])
16114:     elif test -d "$L10NBASEDIR"; then
16114:         L10NBASEDIR=`cd "$L10NBASEDIR" && pwd`
16114:     else
16114:         AC_MSG_ERROR([Invalid value --with-l10n-base, $L10NBASEDIR doesn't exist])
16114:     fi
16114: fi
16114: AC_SUBST(L10NBASEDIR)
16114: 
27567: dnl Check for Perl first -- needed for win32 SDK checks
27567: MOZ_PATH_PROGS(PERL, $PERL perl5 perl )
47975: if test -z "$PERL" -o "$PERL" = ":"; then
27567:     AC_MSG_ERROR([perl not found in \$PATH])
27567: fi
27567: 
    1: dnl ========================================================
42466: dnl = Android uses a very custom (hacky) toolchain; we need to do this
42466: dnl = here, so that the compiler checks can succeed
42466: dnl ========================================================
42466: 
42466: MOZ_ARG_WITH_STRING(android-ndk,
42466: [  --with-android-ndk=DIR
42466:                           location where the Android NDK can be found],
42466:     android_ndk=$withval)
42466: 
42466: MOZ_ARG_WITH_STRING(android-toolchain,
42466: [  --with-android-toolchain=DIR
42466:                           location of the android toolchain, default NDK/build/prebuilt/HOST/arm-eabi-4.4.0],
42466:     android_toolchain=$withval)
42466: 
47826: 
47826: MOZ_ARG_WITH_STRING(android-version,
47826: [  --with-android-version=VER
47826:                           android platform version, default 5],
47826:     android_version=$withval,
47826:     android_version=5)
47826: 
42466: MOZ_ARG_WITH_STRING(android-sdk,
42466: [  --with-android-sdk=DIR
42466:                           location where the Android SDK can be found (base directory, e.g. .../android/platforms/android-6)],
42466:     android_sdk=$withval)
42466: 
70914: MOZ_ARG_WITH_STRING(android-platform,
70914: [  --with-android-platform=DIR
70914:                            location of platform dir, default NDK/build/platforms/android-5/arch-arm],
70914:     android_platform=$withval)
70914: 
70914: case "$target" in
70914: arm-linux*-android*|*-linuxandroid*)
70914:     android_tool_prefix="arm-linux-androideabi"
70914:     ;;
70914: arm-android-eabi)
70914:     android_tool_prefix="arm-eabi"
70914:     ;;
70914: *)
70914:     android_tool_prefix="$target_os"
70914:     ;;
70914: esac
70914: 
70914: case "$target" in
70914: *-android*|*-linuxandroid*)
42466:     if test -z "$android_ndk" ; then
42466:         AC_MSG_ERROR([You must specify --with-android-ndk=/path/to/ndk when targeting Android.])
42466:     fi
42466: 
42466:     if test -z "$android_sdk" ; then
42466:         AC_MSG_ERROR([You must specify --with-android-sdk=/path/to/sdk when targeting Android.])
42466:     fi
42466: 
59214:     android_platform_tools="$android_sdk"/../../platform-tools
59214:     if test ! -d "$android_platform_tools" ; then
59214:         android_platform_tools="$android_sdk"/tools # SDK Tools < r8
42466:     fi
42466: 
42466:     if test -z "$android_toolchain" ; then
42466:         android_toolchain="$android_ndk"/build/prebuilt/`uname -s | tr "[[:upper:]]" "[[:lower:]]"`-x86/arm-eabi-4.4.0
42466:     fi
42466: 
42466:     if test -z "$android_platform" ; then
47837:        android_platform="$android_ndk"/build/platforms/android-"$android_version"/arch-"$target_cpu"
42466:     fi
42466: 
42466:     dnl set up compilers
70914:     AS="$android_toolchain"/bin/"$android_tool_prefix"-as
70914:     CC="$android_toolchain"/bin/"$android_tool_prefix"-gcc
70914:     CXX="$android_toolchain"/bin/"$android_tool_prefix"-g++
70914:     CPP="$android_toolchain"/bin/"$android_tool_prefix"-cpp
70914:     LD="$android_toolchain"/bin/"$android_tool_prefix"-ld
70914:     AR="$android_toolchain"/bin/"$android_tool_prefix"-ar
70914:     RANLIB="$android_toolchain"/bin/"$android_tool_prefix"-ranlib
70914:     STRIP="$android_toolchain"/bin/"$android_tool_prefix"-strip
70914: 
70914:     if test -e "$android_ndk/sources/cxx-stl/stlport/libs/armeabi-v7a/libstlport_static.a" ; then
70914:        STLPORT_CPPFLAGS="-I$android_ndk/sources/cxx-stl/stlport/stlport"
70914:        STLPORT_LDFLAGS="-L$android_ndk/sources/cxx-stl/stlport/libs/armeabi-v7a/  -lstlport_static"
70914:     fi
70914: 
70914:     CPPFLAGS="-I$android_platform/usr/include $STLPORT_CPPFLAGS $CPPFLAGS"
62130:     CFLAGS="-mandroid -I$android_platform/usr/include -fno-short-enums -fno-exceptions $CFLAGS"
62130:     CXXFLAGS="-mandroid -I$android_platform/usr/include -fno-short-enums -fno-exceptions $CXXFLAGS"
70914:     LIBS="$LIBS $STLPORT_LDFLAGS"
42466: 
42466:     dnl Add -llog by default, since we use it all over the place.
42466:     dnl Add --allow-shlib-undefined, because libGLESv2 links to an
42466:     dnl undefined symbol (present on the hardware, just not in the
42466:     dnl NDK.)
70914:     LDFLAGS="-mandroid -L$android_platform/usr/lib -L$android_ndk/sources/cxx-stl/gnu-libstdc++/libs/armeabi-v7a -Wl,-rpath-link=$android_platform/usr/lib --sysroot=$android_platform -llog -Wl,--allow-shlib-undefined $LDFLAGS"
42466: 
42466:     dnl prevent cross compile section from using these flags as host flags
42466:     if test -z "$HOST_CPPFLAGS" ; then
42466:         HOST_CPPFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_CFLAGS" ; then
42466:         HOST_CFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_CXXFLAGS" ; then
42466:         HOST_CXXFLAGS=" "
42466:     fi
42466:     if test -z "$HOST_LDFLAGS" ; then
42466:         HOST_LDFLAGS=" "
42466:     fi
42466: 
42466:     ANDROID_NDK="${android_ndk}"
42466:     ANDROID_TOOLCHAIN="{android_toolchain}"
42466:     ANDROID_PLATFORM="{android_platform}"
42466:     ANDROID_SDK="${android_sdk}"
59214:     ANDROID_PLATFORM_TOOLS="${android_platform_tools}"
47932:     ANDROID_VERSION="${android_version}"
59565:     if test -z "$ANDROID_PACKAGE_NAME" ; then
59565:         ANDROID_PACKAGE_NAME='org.mozilla.$(MOZ_APP_NAME)'
59565:     fi
42466: 
42466:     AC_DEFINE(ANDROID)
47826:     AC_DEFINE_UNQUOTED(ANDROID_VERSION, $android_version)
47932:     AC_SUBST(ANDROID_VERSION)
42466:     CROSS_COMPILE=1
42466:     MOZ_CHROME_FILE_FORMAT=omni
55919:     ZLIB_DIR=yes
70914:     ;;
70914: esac
42466: 
42466: AC_SUBST(ANDROID_NDK)
42466: AC_SUBST(ANDROID_TOOLCHAIN)
42466: AC_SUBST(ANDROID_PLATFORM)
42466: AC_SUBST(ANDROID_SDK)
59214: AC_SUBST(ANDROID_PLATFORM_TOOLS)
59565: AC_SUBST(ANDROID_PACKAGE_NAME)
42466: 
42466: dnl ========================================================
    1: dnl Checks for compilers.
    1: dnl ========================================================
    1: dnl Set CROSS_COMPILE in the environment when running configure
    1: dnl to use the cross-compile setup for now
    1: dnl ========================================================
    1: 
37887: dnl AR_FLAGS set here so HOST_AR_FLAGS can be set correctly (see bug 538269)
37887: AR_FLAGS='cr $@'
37887: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
47975: if test -n "$CROSS_COMPILE" -a "$target" != "$host"; then
    1:     echo "cross compiling from $host to $target"
    1:     cross_compiling=yes
    1: 
    1:     _SAVE_CC="$CC"
    1:     _SAVE_CFLAGS="$CFLAGS"
    1:     _SAVE_LDFLAGS="$LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([for host c compiler])
    1:     AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
    1:     if test -z "$HOST_CC"; then
    1:         AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CC])
    1:     AC_MSG_CHECKING([for host c++ compiler])
    1:     AC_CHECK_PROGS(HOST_CXX, $HOST_CXX $CCC c++ g++ gcc CC cxx cc++ cl icc, "")
    1:     if test -z "$HOST_CXX"; then
    1:         AC_MSG_ERROR([no acceptable c++ compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CXX])
    1: 
    1:     if test -z "$HOST_CFLAGS"; then
    1:         HOST_CFLAGS="$CFLAGS"
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
    1:         HOST_CXXFLAGS="$CXXFLAGS"
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
    1:         HOST_LDFLAGS="$LDFLAGS"
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
37887:         HOST_AR_FLAGS="$AR_FLAGS"
37887:     fi
    1:     AC_CHECK_PROGS(HOST_RANLIB, $HOST_RANLIB ranlib, ranlib, :)
    1:     AC_CHECK_PROGS(HOST_AR, $HOST_AR ar, ar, :)
    1:     CC="$HOST_CC"
    1:     CFLAGS="$HOST_CFLAGS"
    1:     LDFLAGS="$HOST_LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
    1: 
    1:     CC="$HOST_CXX"
    1:     CFLAGS="$HOST_CXXFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
    1:     
    1:     CC=$_SAVE_CC
    1:     CFLAGS=$_SAVE_CFLAGS
    1:     LDFLAGS=$_SAVE_LDFLAGS
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl The Darwin cross compiler doesn't necessarily point itself at a
    1:         dnl root that has libraries for the proper architecture, it defaults
    1:         dnl to the system root.  The libraries in the system root on current
    1:         dnl versions of PPC OS X 10.4 aren't fat, so these target compiler
    1:         dnl checks will fail.  Fake a working SDK in that case.
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         _SAVE_CXXFLAGS=$CXXLAGS
32504:         CFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk $CFLAGS"
32504:         CXXFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk $CXXFLAGS"
    1:         ;;
    1:     esac
    1: 
    1:     AC_CHECK_PROGS(CC, $CC "${target_alias}-gcc" "${target}-gcc", :)
    1:     unset ac_cv_prog_CC
    1:     AC_PROG_CC
    1:     AC_CHECK_PROGS(CXX, $CXX "${target_alias}-g++" "${target}-g++", :)
    1:     unset ac_cv_prog_CXX
    1:     AC_PROG_CXX
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl Revert the changes made above.  From this point on, the target
    1:         dnl compiler will never be used without applying the SDK to CFLAGS
    1:         dnl (see --with-macos-sdk below).
    1:         CFLAGS=$_SAVE_CFLAGS
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:         ;;
    1:     esac
    1: 
    1:     AC_CHECK_PROGS(RANLIB, $RANLIB "${target_alias}-ranlib" "${target}-ranlib", :)
    1:     AC_CHECK_PROGS(AR, $AR "${target_alias}-ar" "${target}-ar", :)
25869:     MOZ_PATH_PROGS(AS, $AS "${target_alias}-as" "${target}-as", :)
    1:     AC_CHECK_PROGS(LD, $LD "${target_alias}-ld" "${target}-ld", :)
    1:     AC_CHECK_PROGS(STRIP, $STRIP "${target_alias}-strip" "${target}-strip", :)
    1:     AC_CHECK_PROGS(WINDRES, $WINDRES "${target_alias}-windres" "${target}-windres", :)
    1:     AC_DEFINE(CROSS_COMPILE)
    1: else
    1:     AC_PROG_CC
    1:     AC_PROG_CXX
    1:     AC_PROG_RANLIB
25869:     MOZ_PATH_PROGS(AS, $AS as, $CC)
    1:     AC_CHECK_PROGS(AR, ar, :)
    1:     AC_CHECK_PROGS(LD, ld, :)
    1:     AC_CHECK_PROGS(STRIP, strip, :)
    1:     AC_CHECK_PROGS(WINDRES, windres, :)
    1:     if test -z "$HOST_CC"; then
38023:         HOST_CC='$(CC)'
    1:     fi
    1:     if test -z "$HOST_CFLAGS"; then
38023:         HOST_CFLAGS='$(CFLAGS)'
    1:     fi
    1:     if test -z "$HOST_CXX"; then
38023:         HOST_CXX='$(CXX)'
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
38023:         HOST_CXXFLAGS='$(CXXFLAGS)'
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
38023:         HOST_LDFLAGS='$(LDFLAGS)'
    1:     fi
    1:     if test -z "$HOST_RANLIB"; then
38023:         HOST_RANLIB='$(RANLIB)'
    1:     fi
    1:     if test -z "$HOST_AR"; then
38023:         HOST_AR='$(AR)'
    1:     fi
37887:     if test -z "$HOST_AR_FLAGS"; then
38023:         HOST_AR_FLAGS='$(AR_FLAGS)'
37887:     fi
    1: fi
    1: 
    1: GNU_AS=
    1: GNU_LD=
    1: GNU_CC=
    1: GNU_CXX=
    1: CC_VERSION='N/A'
    1: CXX_VERSION='N/A'
    1: if test "$GCC" = "yes"; then
    1:     GNU_CC=1
    1:     CC_VERSION=`$CC -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "$GXX" = "yes"; then
    1:     GNU_CXX=1
    1:     CXX_VERSION=`$CXX -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "`echo | $AS -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_AS=1
    1: fi
    1: if test "`echo | $LD -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_LD=1
    1: fi
    1: if test "$GNU_CC"; then
    1:     if `$CC -print-prog-name=ld` -v 2>&1 | grep -c GNU >/dev/null; then
    1:         GCC_USE_GNU_LD=1
    1:     fi
    1: fi
    1: 
13232: INTEL_CC=
13232: INTEL_CXX=
13232: if test "$GCC" = yes; then
32016:    if test "`$CC -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CC=1
13232:    fi
13232: fi
13232: 
13232: if test "$GXX" = yes; then
13232:    if test "`$CXX -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CXX=1
13232:    fi
13232: fi
13232: 
72621: CLANG_CC=
72621: CLANG_CXX=
72621: if test "$GCC" = yes; then
72621:    if test "`$CC -v 2>&1 | grep -c 'clang version'`" != "0"; then
72621:      CLANG_CC=1
72621:    fi
72621: fi
72621: 
72621: if test "$GXX" = yes; then
72621:    if test "`$CXX -v 2>&1 | grep -c 'clang version'`" != "0"; then
72621:      CLANG_CXX=1
72621:    fi
72621: fi
72621: 
68662: dnl ========================================================
    1: dnl Special win32 checks
    1: dnl ========================================================
35745: WINVER=502
33397: dnl Target the Windows 7 SDK by default
33397: WINSDK_TARGETVER=601
38848: 
    1: MOZ_ARG_WITH_STRING(windows-version,
27567: [  --with-windows-version=WINSDK_TARGETVER
27567:                           Highest Windows version to target using this SDK
27567:                               502: Windows Server 2003
27567:                               600: Windows Vista
27567:                               601: Windows 7],
27567:   WINSDK_TARGETVER=$withval)
27567: 
27567: case "$WINSDK_TARGETVER" in
27567: 502|600|601)
27567:     MOZ_WINSDK_TARGETVER=0${WINSDK_TARGETVER}0000
    1:     ;;
55800: 
    1: *)
27567:     AC_MSG_ERROR([Invalid value for --with-windows-version ($WINSDK_TARGETVER), must be 502, 600 or 601]);
    1:     ;;
55800: 
    1: esac
    1: 
55800: if test -n "$COMPILE_ENVIRONMENT"; then
55800: if test "$MOZ_WINSDK_TARGETVER" -lt "06000000"; then
55800:     # We can't build parental controls either
55800:     MOZ_DISABLE_PARENTAL_CONTROLS=1
55800: fi
55800: fi
55800: 
    1: case "$target" in
68662: *-mingw*)
    1:     if test "$GCC" != "yes"; then
    1:         # Check to see if we are really running in a msvc environemnt
    1:         _WIN32_MSVC=1
    1:         AC_CHECK_PROGS(MIDL, midl)
    1: 
    1:         # Make sure compilers are valid
    1:         CFLAGS="$CFLAGS -TC -nologo"
    1:         CXXFLAGS="$CXXFLAGS -TP -nologo"
    1:         AC_LANG_SAVE
    1:         AC_LANG_C
    1:         AC_TRY_COMPILE([#include <stdio.h>],
    1:             [ printf("Hello World\n"); ],,
    1:             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
    1: 
    1:         AC_LANG_CPLUSPLUS
    1:         AC_TRY_COMPILE([#include <new.h>],
    1:             [ unsigned *test = new unsigned(42); ],,
    1:             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
    1:         AC_LANG_RESTORE
    1:         
    1:         changequote(,)
12601:         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
    1:         changequote([,])
    1:         
    1:         # Determine compiler version
12601:         CC_VERSION=`"${CC}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CC_MAJOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _CC_MINOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $2 }'`
12601:         _CC_RELEASE=`echo ${CC_VERSION} | $AWK -F\. '{ print $3 }'`
12601:         _CC_BUILD=`echo ${CC_VERSION} | $AWK -F\. '{ print $4 }'`
    1:         _MSC_VER=${_CC_MAJOR_VERSION}${_CC_MINOR_VERSION}
    1: 
12601:         CXX_VERSION=`"${CXX}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CXX_MAJOR_VERSION=`echo ${CXX_VERSION} | $AWK -F\. '{ print $1 }'`
    1: 
    1:         if test "$_CC_MAJOR_VERSION" != "$_CXX_MAJOR_VERSION"; then
    1:             AC_MSG_ERROR([The major versions of \$CC and \$CXX do not match.])
    1:         fi
58110: 
58110:         if test "$_CC_MAJOR_VERSION" = "14"; then
58110:             dnl Require VC8SP1 or newer.
58110:             dnl VC8 is 14.00.50727.42, VC8SP1 is 14.00.50727.762.
58110:             if test "$_CC_RELEASE" -lt 50727 -o \
58110:                     \( "$_CC_RELEASE" -eq 50727 -a "$_CC_BUILD" -lt 762 \); then
58110:               AC_MSG_ERROR([This version ($CC_VERSION) of the MSVC compiler is unsupported. You probably need to install Service Pack 1 of Visual Studio 2005. See https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
58110:             fi
58110: 
    1:             _CC_SUITE=8
    1:             AC_DEFINE(_CRT_SECURE_NO_DEPRECATE)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_DEPRECATE)
    1:         elif test "$_CC_MAJOR_VERSION" = "15"; then
    1:             _CC_SUITE=9
    1:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
35725:         elif test "$_CC_MAJOR_VERSION" = "16"; then
35725:             _CC_SUITE=10
35725:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
35725:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
    1:         else
58110:             AC_MSG_ERROR([This version ($CC_VERSION) of the MSVC compiler is unsupported. See https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
    1:         fi
    1: 
    1:         _MOZ_RTTI_FLAGS_ON='-GR'
    1:         _MOZ_RTTI_FLAGS_OFF='-GR-'
    1:         _MOZ_EXCEPTIONS_FLAGS_ON='-EHsc'
    1:         _MOZ_EXCEPTIONS_FLAGS_OFF=''
60281:         AC_DEFINE(HAVE_SEH_EXCEPTIONS)
    1: 
    1:         if test -n "$WIN32_REDIST_DIR"; then
68572:           if test ! -d "$WIN32_REDIST_DIR"; then
68572:             AC_MSG_ERROR([Invalid Win32 Redist directory: ${WIN32_REDIST_DIR}])
68572:           fi
    1:           WIN32_REDIST_DIR=`cd "$WIN32_REDIST_DIR" && pwd`
    1:         fi
    1: 
58110:         dnl Ensure that mt.exe is 'Microsoft (R) Manifest Tool',
58110:         dnl not something else like "magnetic tape manipulation utility".
58110:         MSMT_TOOL=`mt 2>&1|grep 'Microsoft (R) Manifest Tool'`
58110:         if test -z "$MSMT_TOOL"; then
58110:           AC_MSG_ERROR([Microsoft (R) Manifest Tool must be in your \$PATH.])
58110:         fi
58110: 
  735:         changequote(,)
  735:         _MSMT_VER_FILTER='s|.* \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*|\1|p'
  735:         changequote([,])
  735:         MSMANIFEST_TOOL_VERSION=`echo ${MSMT_TOOL}|sed -ne "$_MSMT_VER_FILTER"`
  735:         if test -z "$MSMANIFEST_TOOL_VERSION"; then
    1:           AC_MSG_WARN([Unknown version of the Microsoft (R) Manifest Tool.])
    1:         fi
58110: 
    1:         MSMANIFEST_TOOL=1
    1:         unset MSMT_TOOL
    1: 
    1:         # Check linker version
12601:         _LD_FULL_VERSION=`"${LD}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _LD_MAJOR_VERSION=`echo ${_LD_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         if test "$_LD_MAJOR_VERSION" != "$_CC_SUITE"; then
    1:             AC_MSG_ERROR([The linker major version, $_LD_FULL_VERSION,  does not match the compiler suite version, $_CC_SUITE.])
    1:         fi
58110: 
    1:         INCREMENTAL_LINKER=1
    1: 
    1:         # Check midl version
12601:         _MIDL_FULL_VERSION=`"${MIDL}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _MIDL_MAJOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _MIDL_MINOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:         _MIDL_REV_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:         # Add flags if necessary
    1:         AC_MSG_CHECKING([for midl flags])
24005:         case "$target" in
24005:         i*86-*)
24005:             if test \( "$_MIDL_MAJOR_VERSION" = "7" -a "$_MIDL_MINOR_VERSION" = "00" -a "$_MIDL_REV_VERSION" = "0499" \); then
24005:                 # MIDL version 7.00.0499 defaults /env win64 on x64 platforms.
24005:                 # MIDL version 7.00.0500 or later has no problem.
24005:                 MIDL_FLAGS="${MIDL_FLAGS} -env win32"
24005:                 AC_MSG_RESULT([need -env win32])
24005:             else
    1:                 AC_MSG_RESULT([none needed])
    1:             fi
24005:             ;;
33494:         x86_64-*)
33494:             MIDL_FLAGS="${MIDL_FLAGS} -env x64"
33494:             ;;
24005:         *)
23433:             AC_MSG_RESULT([none needed])
24005:             ;;
24005:         esac
    1: 
25340:         # Identify which version of the SDK we're building with
25340:         # Windows Server 2008 and newer SDKs have WinSDKVer.h, get the version
25340:         # from there
63478:         MOZ_CHECK_HEADERS([winsdkver.h])
25340:         if test "$ac_cv_header_winsdkver_h" = "yes"; then
25340:             # Get the highest _WIN32_WINNT and NTDDI versions supported
25340:             # Take the higher of the two
25340:             # This is done because the Windows 7 beta SDK reports its
25340:             # NTDDI_MAXVER to be 0x06000100 instead of 0x06010000, as it should
25340:             AC_CACHE_CHECK(for highest Windows version supported by this SDK,
25340:                            ac_cv_winsdk_maxver,
25340:                            [cat > conftest.h <<EOF
25340: #include <winsdkver.h>
25340: #include <sdkddkver.h>
25340: 
25340: #if (NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER) > NTDDI_MAXVER)
25340: #define WINSDK_MAXVER NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER)
25340: #else
25340: #define WINSDK_MAXVER NTDDI_MAXVER
25340: #endif
25340: 
25340: WINSDK_MAXVER
25340: EOF
25340:                             ac_cv_winsdk_maxver=`$CPP conftest.h 2>/dev/null | tail -n1`
25340:                             rm -f conftest.h
25340:                            ])
25340:             MOZ_WINSDK_MAXVER=${ac_cv_winsdk_maxver}
25340:         else
25340:             # The Vista SDK is the only one to have sdkddkver.h but not
25340:             # WinSDKVer.h
63478:             MOZ_CHECK_HEADERS([sdkddkver.h])
25340:             if test "$ac_cv_header_sdkddkver_h" = "yes"; then
25340:                 MOZ_WINSDK_MAXVER=0x06000000
25340:             else
25340:                 # Assume the Server 2003 Platform SDK
25340:                 MOZ_WINSDK_MAXVER=0x05020000
25340:             fi
25340:         fi
25340: 
    1:         unset _MSVC_VER_FILTER
    1: 
41151:         AC_CACHE_CHECK(for std::_Throw, ac_cv_have_std__Throw,
41151:             [
41151:                 AC_LANG_SAVE
41151:                 AC_LANG_CPLUSPLUS
41151:                 _SAVE_CXXFLAGS="$CXXFLAGS"
41151:                 CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41151:                 AC_TRY_COMPILE([#include <exception>],
41151:                             [std::_Throw(std::exception()); return 0;],
41151:                             ac_cv_have_std__Throw="yes",
41151:                             ac_cv_have_std__Throw="no")
41151:                 CXXFLAGS="$_SAVE_CXXFLAGS"
41151:                 AC_LANG_RESTORE
41151:             ])
41151: 
58494:         if test "$ac_cv_have_std__Throw" = "yes"; then
41151:             AC_CACHE_CHECK(for |class __declspec(dllimport) exception| bug,
41151:                            ac_cv_have_dllimport_exception_bug,
41151:                 [
41151:                     AC_LANG_SAVE
41151:                     AC_LANG_CPLUSPLUS
41151:                     _SAVE_CXXFLAGS="$CXXFLAGS"
41151:                     CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41151:                     AC_TRY_LINK([#include <vector>],
41151:                                 [std::vector<int> v; return v.at(1);],
41151:                                 ac_cv_have_dllimport_exception_bug="no",
41151:                                 ac_cv_have_dllimport_exception_bug="yes")
41151:                     CXXFLAGS="$_SAVE_CXXFLAGS"
41151:                     AC_LANG_RESTORE
41151:                 ])
41151:             if test "$ac_cv_have_dllimport_exception_bug" = "no"; then
41511:                 WRAP_STL_INCLUDES=1
41511:                 MOZ_MSVC_STL_WRAP__Throw=1
41511:                 AC_DEFINE(MOZ_MSVC_STL_WRAP__Throw)
41511:             fi
41511:         else
41511:             AC_CACHE_CHECK(for overridable _RAISE,
41511:                            ac_cv_have__RAISE,
41511:                 [
41511:                     AC_LANG_SAVE
41511:                     AC_LANG_CPLUSPLUS
41511:                     _SAVE_CXXFLAGS="$CXXFLAGS"
41511:                     CXXFLAGS="${CXXFLAGS} -D_HAS_EXCEPTIONS=0"
41511:                     AC_TRY_COMPILE([#include <xstddef>
41511:                                     #undef _RAISE
41511:                                     #define _RAISE(x) externallyDefinedFunction((x).what())
41511:                                     #include <vector>
41511:                                    ],
41511:                                    [std::vector<int> v; return v.at(1);],
41511:                                    ac_cv_have__RAISE="no",
41511:                                    ac_cv_have__RAISE="yes")
41511:                     CXXFLAGS="$_SAVE_CXXFLAGS"
41511:                     AC_LANG_RESTORE
41511:                 ])
41511:             if test "$ac_cv_have__RAISE" = "yes"; then
41511:                 WRAP_STL_INCLUDES=1
41511:                 MOZ_MSVC_STL_WRAP__RAISE=1
41511:                 AC_DEFINE(MOZ_MSVC_STL_WRAP__RAISE)
41511:             else
41511:                 AC_MSG_ERROR([Gecko exception wrapping doesn't understand your your MSVC/SDK.  Please file a bug describing this error and your build configuration.])
41511:             fi
41511:         fi
41511: 
41511:         if test "$WRAP_STL_INCLUDES" = "1"; then
41151:             STL_FLAGS='-D_HAS_EXCEPTIONS=0 -I$(DIST)/stl_wrappers'
41151:         fi
    1:     else
    1:         # Check w32api version
    1:         _W32API_MAJOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _W32API_MINOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $2 }'`
    1:         AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
    1:         AC_TRY_COMPILE([#include <w32api.h>],
    1:             #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
    1:                 (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
    1:                  __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
    1:                 #error "test failed."
    1:             #endif
    1:             , [ res=yes ], [ res=no ])
    1:         AC_MSG_RESULT([$res])
    1:         if test "$res" != "yes"; then
    1:             AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
    1:         fi
    1:         # Check windres version
    1:         AC_MSG_CHECKING([for windres version >= $WINDRES_VERSION])
    1:         _WINDRES_VERSION=`${WINDRES} --version 2>&1 | grep -i windres 2>/dev/null | $AWK '{ print $3 }'`
    1:         AC_MSG_RESULT([$_WINDRES_VERSION])
    1:         _WINDRES_MAJOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _WINDRES_MINOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         _WINDRES_RELEASE_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         WINDRES_MAJOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         WINDRES_MINOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         WINDRES_RELEASE_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         if test "$_WINDRES_MAJOR_VERSION" -lt "$WINDRES_MAJOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -lt "$WINDRES_MINOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -eq "$WINDRES_MINOR_VERSION" -a \
    1:                 "$_WINDRES_RELEASE_VERSION" -lt "$WINDRES_RELEASE_VERSION"
    1:         then
    1:             AC_MSG_ERROR([windres version $WINDRES_VERSION or higher is required to build.])
    1:         fi
25340: 
25340:         # Server 2003 is the highest version supported
25340:         MOZ_WINSDK_MAXVER=0x05020000
    1:     fi # !GNU_CC
    1: 
    1:     AC_DEFINE_UNQUOTED(WINVER,0x$WINVER)
    1:     AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x$WINVER)
  629:     # Require OS features provided by IE 5.0
  629:     AC_DEFINE_UNQUOTED(_WIN32_IE,0x0500)
27567: 
27567:     # If the maximum version supported by this SDK is lower than the target
27567:     # version, error out
27567:     AC_MSG_CHECKING([for Windows SDK being recent enough])
27567:     if $PERL -e "exit(0x$MOZ_WINSDK_TARGETVER > $MOZ_WINSDK_MAXVER)"; then
27567:         AC_MSG_RESULT("yes")
27567:     else
27567:         AC_MSG_RESULT("no")
48094:         AC_MSG_ERROR([You are targeting Windows version 0x$MOZ_WINSDK_TARGETVER, but your SDK only supports up to version $MOZ_WINSDK_MAXVER. Install and use an updated SDK, or target a lower version using --with-windows-version. Alternatively, try running the Windows SDK Configuration Tool and selecting a newer SDK. See https://developer.mozilla.org/En/Windows_SDK_versions for more details on fixing this.])
27567:     fi
27567: 
27567:     AC_DEFINE_UNQUOTED(MOZ_WINSDK_TARGETVER,0x$MOZ_WINSDK_TARGETVER)
27958:     # Definitions matching sdkddkver.h
27958:     AC_DEFINE_UNQUOTED(MOZ_NTDDI_WS03, 0x05020000)
27958:     AC_DEFINE_UNQUOTED(MOZ_NTDDI_LONGHORN, 0x06000000)
27958:     AC_DEFINE_UNQUOTED(MOZ_NTDDI_WIN7, 0x06010000)
    1:     ;;
    1: esac
    1: 
    1: dnl Test breaks icc on OS/2 && MSVC
    1: if test "$CC" != "icc" -a -z "$_WIN32_MSVC"; then
    1:     AC_PROG_CC_C_O
    1:     if grep "NO_MINUS_C_MINUS_O 1" ./confdefs.h >/dev/null; then
    1:         USING_HCC=1
    1:         _OLDCC=$CC
    1:         _OLDCXX=$CXX
    1:         CC="${srcdir}/build/hcc '$CC'"
    1:         CXX="${srcdir}/build/hcpp '$CXX'"
    1:     fi
    1: fi
    1: 
    1: AC_PROG_CPP
    1: AC_PROG_CXXCPP
    1: 
14341: if test -n "$_WIN32_MSVC"; then
14341:     SKIP_PATH_CHECKS=1
14341:     SKIP_COMPILER_CHECKS=1
14341:     SKIP_LIBRARY_CHECKS=1
23834: 
23834:     # Since we're skipping compiler and library checks, hard-code
23834:     # some facts here.
23834:     AC_DEFINE(HAVE_IO_H)
23834:     AC_DEFINE(HAVE_SETBUF)
23834:     AC_DEFINE(HAVE_ISATTY)
14341: fi
14341: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MIDL_FLAGS)
    1: AC_SUBST(_MSC_VER)
    1: 
    1: AC_SUBST(GNU_AS)
    1: AC_SUBST(GNU_LD)
    1: AC_SUBST(GNU_CC)
    1: AC_SUBST(GNU_CXX)
13232: AC_SUBST(INTEL_CC)
13232: AC_SUBST(INTEL_CXX)
72621: AC_SUBST(CLANG_CC)
72621: AC_SUBST(CLANG_CXX)
    1: 
40161: AC_SUBST(STL_FLAGS)
40161: AC_SUBST(WRAP_STL_INCLUDES)
41511: AC_SUBST(MOZ_MSVC_STL_WRAP__Throw)
41511: AC_SUBST(MOZ_MSVC_STL_WRAP__RAISE)
40161: 
    1: dnl ========================================================
    1: dnl Checks for programs.
    1: dnl ========================================================
    1: AC_PROG_INSTALL
    1: AC_PROG_LN_S
    1: 
    1: if test -z "$TINDERBOX_SKIP_PERL_VERSION_CHECK"; then
    1: AC_MSG_CHECKING([for minimum required perl version >= $PERL_VERSION])
    1: _perl_version=`PERL_VERSION=$PERL_VERSION $PERL -e 'print "$]"; if ($] >= $ENV{PERL_VERSION}) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: AC_MSG_RESULT([$_perl_version])
    1: 
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_ERROR([Perl $PERL_VERSION or higher is required.])
    1: fi
    1: fi
    1: 
    1: AC_MSG_CHECKING([for full perl installation])
    1: _perl_archlib=`$PERL -e 'use Config; if ( -d $Config{archlib} ) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_RESULT([no])
    1:     AC_MSG_ERROR([Cannot find Config.pm or \$Config{archlib}.  A full perl installation is required.])
    1: else
    1:     AC_MSG_RESULT([yes])    
    1: fi
    1: 
56983: MOZ_PATH_PROGS(PYTHON, $PYTHON python2.7 python2.6 python2.5 python)
    1: if test -z "$PYTHON"; then
    1:     AC_MSG_ERROR([python was not found in \$PATH])
    1: fi
    1: 
 3564: if test -z "$COMPILE_ENVIRONMENT"; then
 3564:     NSINSTALL_BIN='$(PYTHON) $(topsrcdir)/config/nsinstall.py'
 3564: fi
 3564: AC_SUBST(NSINSTALL_BIN)
 3564: 
25869: MOZ_PATH_PROG(DOXYGEN, doxygen, :)
25869: MOZ_PATH_PROG(AUTOCONF, autoconf, :)
72838: MOZ_PATH_PROG(UNZIP, unzip, :)
25869: MOZ_PATH_PROGS(ZIP, zip)
47975: if test -z "$ZIP" -o "$ZIP" = ":"; then
    1:     AC_MSG_ERROR([zip not found in \$PATH])
    1: fi
25869: MOZ_PATH_PROG(SYSTEM_MAKEDEPEND, makedepend)
25869: MOZ_PATH_PROG(XARGS, xargs)
47975: if test -z "$XARGS" -o "$XARGS" = ":"; then
    1:     AC_MSG_ERROR([xargs not found in \$PATH .])
    1: fi
    1: 
64447: MOZ_PATH_PROG(RPMBUILD, rpmbuild, :)
64447: AC_SUBST(RPMBUILD)
64447: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: dnl ========================================================
    1: dnl = Mac OS X toolchain support
    1: dnl ========================================================
    1: 
    1: case "$target_os" in
    1: darwin*)
    1:     dnl Current known valid versions for GCC_VERSION are 2.95.2 3.1 3.3 4.0.
    1:     dnl 4.0 identifies itself as 4.0.x, so strip the decidecimal for
    1:     dnl the environment and includedir purposes (when using an SDK, below),
    1:     dnl but remember the full version number for the libdir (SDK).
    1:     changequote(,)
    1:     GCC_VERSION_FULL=`echo $CXX_VERSION | $PERL -pe 's/^.*gcc version ([^ ]*).*/$1/'`
    1:     GCC_VERSION=`echo $GCC_VERSION_FULL | $PERL -pe '(split(/\./))[0]>=4&&s/(^\d*\.\d*).*/$1/;'`
    1:     changequote([,])
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:         dnl Bug 280479, but this keeps popping up in bug 292530 too because
    1:         dnl 4.0.0/4061 is the default compiler in Tiger.
    1:         changequote(,)
    1:         GCC_BUILD=`echo $CXX_VERSION | $PERL -pe 's/^.*build ([^ )]*).*/$1/'`
    1:         changequote([,])
    1:         if test "$GCC_BUILD" = "4061" ; then
    1:             AC_MSG_ERROR([You are attempting to use Apple gcc 4.0 build 4061.
    1: This compiler was supplied with Xcode 2.0, and contains bugs that prevent it
 3572: from building Mozilla. Upgrade to Xcode 2.1 or later.])
    1:         fi
    1:     fi
    1: 
    1:     dnl xcodebuild needs GCC_VERSION defined in the environment, since it
    1:     dnl doesn't respect the CC/CXX setting.  With GCC_VERSION set, it will use
    1:     dnl /usr/bin/g(cc|++)-$GCC_VERSION.
25869:     MOZ_PATH_PROGS(PBBUILD, pbbuild xcodebuild pbxbuild)
    1: 
    1:     dnl sdp was formerly in /Developer/Tools.  As of Mac OS X 10.4 (Darwin 8),
    1:     dnl it has moved into /usr/bin.
25869:     MOZ_PATH_PROG(SDP, sdp, :, [$PATH:/usr/bin:/Developer/Tools])
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(GCC_VERSION)
    1: 
    1: dnl The universal machinery sets UNIVERSAL_BINARY to inform packager.mk
    1: dnl that a universal binary is being produced.
    1: AC_SUBST(UNIVERSAL_BINARY)
    1: 
    1: dnl ========================================================
 8484: dnl Check for MacOS deployment target version
 8484: dnl ========================================================
 8484: 
 8484: MOZ_ARG_ENABLE_STRING(macos-target,
32504:                       [  --enable-macos-target=VER (default=10.5)
 8484:                           Set the minimum MacOS version needed at runtime],
 8484:                       [_MACOSX_DEPLOYMENT_TARGET=$enableval])
 8484: 
 8484: case "$target" in
 8484: *-darwin*)
 8484:     if test -n "$_MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl Use the specified value
 8484:         export MACOSX_DEPLOYMENT_TARGET=$_MACOSX_DEPLOYMENT_TARGET
51143:     else
 8484:         dnl No value specified on the command line or in the environment,
28234:         dnl use architecture minimum.
51143:         case "${target_cpu}" in
51143:           ppc*)
28234:             export MACOSX_DEPLOYMENT_TARGET=10.5
51143:             ;;
51143:           i*86)
51143:             export MACOSX_DEPLOYMENT_TARGET=10.5
51143:             ;;
51143:           x86_64)
51143:             export MACOSX_DEPLOYMENT_TARGET=10.6
51143:             ;;
51143:         esac
 8484:     fi
 8484:     ;;
 8484: esac
 8484: 
 8484: AC_SUBST(MACOSX_DEPLOYMENT_TARGET)
 8484: 
 8484: dnl ========================================================
    1: dnl = Mac OS X SDK support
    1: dnl ========================================================
    1: MACOS_SDK_DIR=
    1: NEXT_ROOT=
    1: MOZ_ARG_WITH_STRING(macos-sdk,
    1: [  --with-macos-sdk=dir    Location of platform SDK to use (Mac OS X only)],
    1:     MACOS_SDK_DIR=$withval)
    1: 
    1: dnl MACOS_SDK_DIR will be set to the SDK location whenever one is in use.
    1: dnl NEXT_ROOT will be set and exported only if it's needed.
    1: AC_SUBST(MACOS_SDK_DIR)
    1: AC_SUBST(NEXT_ROOT)
    1: 
    1: if test "$MACOS_SDK_DIR"; then
    1:   dnl Sync this section with the ones in NSPR and NSS.
    1:   dnl Changes to the cross environment here need to be accounted for in
    1:   dnl the libIDL checks (below) and xpidl build.
    1: 
    1:   if test ! -d "$MACOS_SDK_DIR"; then
    1:     AC_MSG_ERROR([SDK not found.  When using --with-macos-sdk, you must
    1: specify a valid SDK.  SDKs are installed when the optional cross-development
    1: tools are selected during the Xcode/Developer Tools installation.])
    1:   fi
    1: 
    1:   GCC_VERSION_MAJOR=`echo $GCC_VERSION_FULL | $PERL -pe 's/(^\d*).*/$1/;'`
    1:   if test "$GCC_VERSION_MAJOR" -lt "4" ; then
31305:     AC_MSG_ERROR([You need to upgrade the compiler version to 4.x])
31305:   else
    1:     CFLAGS="$CFLAGS -isysroot ${MACOS_SDK_DIR}"
    1:     CXXFLAGS="$CXXFLAGS -isysroot ${MACOS_SDK_DIR}"
    1: 
63478:     dnl CPP/CXXCPP needs to be set for MOZ_CHECK_HEADER.
    1:     CPP="$CPP -isysroot ${MACOS_SDK_DIR}"
    1:     CXXCPP="$CXXCPP -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:       dnl If gcc >= 4.0, we're guaranteed to be on Tiger, which has an ld
    1:       dnl that supports -syslibroot.  Don't set NEXT_ROOT because it will
    1:       dnl be ignored and cause warnings when -syslibroot is specified.
    1:       dnl gcc 4.0.1 will pass -syslibroot to ld automatically based on
    1:       dnl the -isysroot it receives, so this is only needed with 4.0.0.
    1:       LDFLAGS="$LDFLAGS -Wl,-syslibroot,${MACOS_SDK_DIR}"
    1:     fi
    1:   fi
    1: 
    1:   AC_LANG_SAVE
    1:   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
    1:   AC_LANG_CPLUSPLUS
63486:   AC_TRY_COMPILE([#include <new>],[],
    1:    result=yes,
    1:    result=no)
    1:   AC_LANG_RESTORE
    1:   AC_MSG_RESULT($result)
    1: 
    1:   if test "$result" = "no" ; then
    1:     AC_MSG_ERROR([The selected compiler and Mac OS X SDK are incompatible.])
    1:   fi
    1: fi
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
64038: dnl clang prior to 2.9 (including Xcode 4) does not support all the
64038: dnl constructs required by the libtheora inline asm. This is used to
64038: dnl detect and disable it
64038: AC_LANG_SAVE
64038: AC_LANG_C
64038: AC_TRY_COMPILE([
64038: #if defined(__clang__)
64038: # if __clang_major__<2 || (__clang_major__==2 && __clang_minor__<9)
64038: #  error "clang older than 2.9 detected"
64038: # endif
64038: #endif
64038:                ],
64038:                [],
64038:                result="yes",
64038:                result="no")
64038: if test "$result" = "no"; then
64038:     AC_DEFINE(HAVE_OLD_CLANG)
64038:     HAVE_OLD_CLANG=1
64038: fi
64038: AC_LANG_RESTORE
64038: AC_SUBST(HAVE_OLD_CLANG)
64038: 
26777: if test -n "$MAKE"; then
26777:   if test `echo $MAKE | grep -c make.py` != 1; then
26777:      NOT_PYMAKE=$MAKE
26777:   fi
26777: fi
26777: 
    1: case "$host_os" in
63450: mingw*)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE make gmake, :)
    1:     ;;
    1: *)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE gmake make, :)
    1:     ;;
    1: esac
26777: if test "$GMAKE" = ":"; then
26777:    AC_MSG_ERROR([GNU make not found])
26777: fi
26777: AC_SUBST(GMAKE)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: AC_PATH_XTRA
    1: 
    1: XCFLAGS="$X_CFLAGS"
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl set the defaults first
    1: dnl ========================================================
    1: AS_BIN=$AS
    1: AR_LIST='$(AR) t'
    1: AR_EXTRACT='$(AR) x'
    1: AR_DELETE='$(AR) d'
    1: AS='$(CC)'
    1: AS_DASH_C_FLAG='-c'
    1: DLL_PREFIX=lib
    1: LIB_PREFIX=lib
    1: DLL_SUFFIX=.so
    1: OBJ_SUFFIX=o
    1: LIB_SUFFIX=a
    1: ASM_SUFFIX=s
    1: IMPORT_LIB_SUFFIX=
    1: TARGET_MD_ARCH=unix
    1: DIRENT_INO=d_ino
    1: WIN_TOP_SRC=
    1: MOZ_USER_DIR=".mozilla"
    1: 
    1: MOZ_JPEG_CFLAGS=
    1: MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,mozjpeg,$(DEPTH)/jpeg)'
    1: MOZ_ZLIB_CFLAGS=
    1: MOZ_ZLIB_LIBS='$(call EXPAND_LIBNAME_PATH,mozz,$(DEPTH)/modules/zlib/src)'
12936: MOZ_BZ2_CFLAGS=
12936: MOZ_BZ2_LIBS='$(call EXPAND_LIBNAME_PATH,bz2,$(DEPTH)/modules/libbz2/src)'
    1: MOZ_PNG_CFLAGS=
    1: MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,mozpng,$(DEPTH)/modules/libimg/png)'
    1: 
63472: MOZ_JS_STATIC_LIBS='$(call EXPAND_LIBNAME_PATH,js_static,$(LIBXUL_DIST)/lib)'
63472: MOZ_JS_SHARED_LIBS='$(call EXPAND_LIBNAME_PATH,mozjs,$(LIBXUL_DIST)/lib)'
38924: DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/bin -lxpcom -lxpcom_core -lmozalloc'
22757: MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(prefix)/lib'
38924: XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/bin -lxpcom -lmozalloc'
    1: LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) -lxul'
    1: XPCOM_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue_s.$(LIB_SUFFIX) $(XPCOM_FROZEN_LDOPTS)'
    1: XPCOM_STANDALONE_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue.$(LIB_SUFFIX)'
    1: 
27353: MOZ_FS_LAYOUT=unix
27353: 
    1: MOZ_COMPONENT_NSPR_LIBS='-L$(LIBXUL_DIST)/bin $(NSPR_LIBS)'
    1: 
    1: USE_DEPENDENT_LIBS=1
    1: 
    1: _PLATFORM_DEFAULT_TOOLKIT=cairo-gtk2
    1: 
    1: if test -n "$CROSS_COMPILE"; then
    1:     OS_TARGET="${target_os}"
    1:     OS_ARCH=`echo $target_os | sed -e 's|/|_|g'`
    1:     OS_RELEASE=
    1:     case "${target_os}" in
 1785:         linux*)       OS_ARCH=Linux OS_TARGET=Linux ;;
12932:         kfreebsd*-gnu) OS_ARCH=GNU_kFreeBSD OS_TARGET=GNU_kFreeBSD ;;
41013:         gnu*)         OS_ARCH=GNU ;;
    1:         solaris*)     OS_ARCH=SunOS OS_RELEASE=5 ;;
    1:         mingw*)       OS_ARCH=WINNT ;;
    1:         darwin*)      OS_ARCH=Darwin OS_TARGET=Darwin ;;
    1:     esac
42466:     case "${target}" in
70914:         *-android*|*-linuxandroid*) OS_ARCH=Linux OS_TARGET=Android ;;
42466:     esac
    1: else
    1:     OS_TARGET=`uname -s`
    1:     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
    1:     OS_RELEASE=`uname -r`
 3488: fi
 3488: 
 3488: # Before this used `uname -m` when not cross compiling
 3488: # but that breaks when you have a 64 bit kernel with a 32 bit userland.
 3488: OS_TEST="${target_cpu}"
 3488: 
    1: _COMPILER_PREFIX=
    1: 
    1: HOST_OS_ARCH=`echo $host_os | sed -e 's|/|_|g'`
    1: 
    1: #######################################################################
    1: # Master "Core Components" macros for getting the OS target           #
    1: #######################################################################
    1: 
    1: #
    1: # If OS_TARGET is not specified, it defaults to $(OS_ARCH), i.e., no
    1: # cross-compilation.
    1: #
    1: 
    1: #
    1: # Define and override various archtecture-specific variables, including
    1: # HOST_OS_ARCH
    1: # OS_ARCH
    1: # OS_TEST
    1: # OS_TARGET
    1: # OS_RELEASE
    1: # OS_MINOR_RELEASE
    1: #
    1: 
    1: case "$HOST_OS_ARCH" in
63450: mingw*)
    1:     HOST_OS_ARCH=WINNT
    1:     ;;
39658: darwin*)
39658:     HOST_OS_ARCH=Darwin
39658:     ;;
    1: linux*)
    1:     HOST_OS_ARCH=Linux
    1:     ;;
    1: solaris*)
    1:     HOST_OS_ARCH=SunOS
24783:     SOLARIS_SUNPRO_CC=
24783:     SOLARIS_SUNPRO_CXX=
24783:     if test -z "$GNU_CC"; then
27517:         if test "`$CC -V 2>&1 | egrep -c 'Sun.*C '`" != "0"; then
24783:             SOLARIS_SUNPRO_CC=1
24783:        fi
24783:     fi
24783: 
24783:     if test -z "$GNU_CXX"; then
27517:        if test "`$CXX -V 2>&1 | egrep -c 'Sun.*C\+\+ '`" != "0"; then
24783:            SOLARIS_SUNPRO_CXX=1
24783:        fi
24783:     fi
24783:     AC_SUBST(SOLARIS_SUNPRO_CC)
24783:     AC_SUBST(SOLARIS_SUNPRO_CXX)
    1:     ;;
    1: BSD_386)
    1:     HOST_OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     HOST_OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     HOST_OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         HOST_OS_ARCH=NCR
    1:     else
    1:         HOST_OS_ARCH=UNIXWARE
    1:     fi
    1:     ;;
    1: ncr)
    1:     HOST_OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     HOST_OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     ;;
    1: OS_2)
    1:     HOST_OS_ARCH=OS2
    1:     ;;
    1: QNX)
    1:     ;;
    1: SCO_SV)
    1:     HOST_OS_ARCH=SCOOS
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     HOST_OS_ARCH=SINIX
    1:     ;;
    1: UnixWare)
    1:     HOST_OS_ARCH=UNIXWARE
    1:     ;;
    1: esac
    1: 
    1: case "$OS_ARCH" in
    1: WINNT)
35674:     if test -z "$CROSS_COMPILE" ; then
    1:         OS_TEST=`uname -p`
35674:     fi
    1:     ;;
    1: Windows_NT)
    1: #
    1: # If uname -s returns "Windows_NT", we assume that we are using
    1: # the uname.exe in MKS toolkit.
    1: #
    1: # The -r option of MKS uname only returns the major version number.
    1: # So we need to use its -v option to get the minor version number.
    1: # Moreover, it doesn't have the -p option, so we need to use uname -m.
    1: #
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     OS_MINOR_RELEASE=`uname -v`
    1:     if test "$OS_MINOR_RELEASE" = "00"; then
    1:         OS_MINOR_RELEASE=0
    1:     fi
    1:     OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    1:     ;;
63450: MINGW*_NT*)
    1: #
    1: # If uname -s returns MINGW32_NT-5.1, we assume that we are using
    1: # the uname.exe in the MSYS tools.
    1: #
    1:     OS_RELEASE=`expr $OS_ARCH : '.*NT-\(.*\)'`
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     ;;
    1: AIX)
    1:     OS_RELEASE=`uname -v`.`uname -r`
20692:     OS_TEST=${target_cpu}
    1:     ;;
    1: BSD_386)
    1:     OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         OS_ARCH=NCR
    1:     else
    1:         OS_ARCH=UNIXWARE
    1:         OS_RELEASE=`uname -v`
    1:     fi
    1:     ;;
    1: ncr)
    1:     OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     case `uname -v` in
    1:     148)
    1:         OS_RELEASE=V3.2C
    1:         ;;
    1:     564)
    1:         OS_RELEASE=V4.0B
    1:         ;;
    1:     878)
    1:         OS_RELEASE=V4.0D
    1:         ;;
    1:     esac
    1:     ;;
    1: OS_2)
    1:     OS_ARCH=OS2
    1:     OS_TARGET=OS2
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: QNX)
    1:     if test "$OS_TARGET" != "NTO"; then
    1:         changequote(,)
    1:         OS_RELEASE=`uname -v | sed 's/^\([0-9]\)\([0-9]*\)$/\1.\2/'`
    1:         changequote([,])
    1:     fi
    1:     OS_TEST=x86
    1:     ;;
    1: SCO_SV)
    1:     OS_ARCH=SCOOS
    1:     OS_RELEASE=5.0
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     OS_ARCH=SINIX
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: UnixWare)
    1:     OS_ARCH=UNIXWARE
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: Darwin)
    1:     case "${target_cpu}" in
    1:     powerpc*)
    1:         OS_TEST=ppc
    1:         ;;
    1:     i*86*)
    1:         OS_TEST=i386 
    1:         ;;
22679:     x86_64)
22679:         OS_TEST=x86_64
22679:         ;;
    1:     *)
    1:         if test -z "$CROSS_COMPILE" ; then
    1:             OS_TEST=`uname -p`
    1:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: esac
    1: 
    1: if test "$OS_ARCH" = "NCR"; then
    1:     changequote(,)
    1:     OS_RELEASE=`awk '{print $3}' /etc/.relid | sed 's/^\([0-9]\)\(.\)\(..\)\(.*\)$/\2.\3/'`
    1:     changequote([,])
    1: fi
    1: 
    1: # Only set CPU_ARCH if we recognize the value of OS_TEST
    1: 
    1: case "$OS_TEST" in
    1: *86 | i86pc)
    1:     CPU_ARCH=x86
    1:     ;;
    1: 
33472: powerpc64 | ppc64)
33472:     CPU_ARCH=ppc64
33472:     ;;
33472: 
33472: powerpc | ppc | rs6000)
    1:     CPU_ARCH=ppc
    1:     ;;
    1: 
    1: Alpha | alpha | ALPHA)
    1:     CPU_ARCH=Alpha
    1:     ;;
    1: 
33472: s390)
33472:     CPU_ARCH=s390
33472:     ;;
33472: 
33472: s390x)
33472:     CPU_ARCH=s390x
33472:     ;;
33472: 
15835: hppa* | parisc)
15835:     CPU_ARCH=hppa
15835:     ;;
15835: 
13790: sun4u | sparc*)
    1:     CPU_ARCH=sparc
    1:     ;;
    1: 
13790: x86_64 | ia64)
    1:     CPU_ARCH="$OS_TEST"
    1:     ;;
31004: 
47320: arm*)
41043:     CPU_ARCH=arm
31004:     ;;
60071: 
60071: mips|mipsel)
60071:     CPU_ARCH="mips"
60071:     ;;
    1: esac
    1: 
    1: if test -z "$OS_TARGET"; then
    1:     OS_TARGET=$OS_ARCH
    1: fi
    1: OS_CONFIG="${OS_TARGET}${OS_RELEASE}"
    1: 
60422: dnl Set INTEL_ARCHITECTURE if we're compiling for x86-32 or x86-64.
60422: dnl ===============================================================
60422: INTEL_ARCHITECTURE=
60422: case "$OS_TEST" in
60422:     x86_64|i?86)
60422:       INTEL_ARCHITECTURE=1
60422: esac
60422: 
    1: dnl ========================================================
    1: dnl GNU specific defaults
    1: dnl ========================================================
    1: if test "$GNU_CC"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CFLAGS="$CFLAGS -fno-strict-aliasing"
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GCC_USE_GNU_LD"; then
72636:         # Don't allow undefined symbols in libraries, and remove dead symbols
72636:         DSO_LDOPTS="$DSO_LDOPTS -Wl,-z,defs -Wl,--gc-sections"
72636:         CFLAGS="$CFLAGS -ffunction-sections -fdata-sections"
72636:         CXXFLAGS="$CXXFLAGS -ffunction-sections -fdata-sections"
    1:     fi
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
20657:     ASFLAGS="$ASFLAGS -fPIC"
    1:     _MOZ_RTTI_FLAGS_ON=${_COMPILER_PREFIX}-frtti
    1:     _MOZ_RTTI_FLAGS_OFF=${_COMPILER_PREFIX}-fno-rtti
47213:     _MOZ_EXCEPTIONS_FLAGS_ON='-fexceptions'
47213:     _MOZ_EXCEPTIONS_FLAGS_OFF='-fno-exceptions'
    1: 
    1:     # Turn on GNU specific features
    1:     # -Wall - turn on all warnings
    1:     # -pedantic - make compiler warn about non-ANSI stuff, and
    1:     #             be a little bit stricter
72206:     # -Wdeclaration-after-statement - MSVC doesn't like these
    1:     # Warnings slamm took out for now (these were giving more noise than help):
    1:     # -Wbad-function-cast - warns when casting a function to a new return type
    1:     # -Wshadow - removed because it generates more noise than help --pete
72206:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wall -W -Wno-unused -Wpointer-arith -Wdeclaration-after-statement"
72621:     if test -z "$INTEL_CC" -a -z "$CLANG_CC"; then
72621:        # Don't use -Wcast-align with ICC or clang
15835:        case "$CPU_ARCH" in
40995:            # And don't use it on hppa, ia64, sparc, arm, since it's noisy there
40995:            hppa | ia64 | sparc | arm)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
    1:     dnl Turn pedantic on but disable the warnings for long long
    1:     _PEDANTIC=1
13232: 
13232:     if test -z "$INTEL_CC"; then
13232:       _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -W"
42455:     fi
    1: 
    1:     _DEFINES_CFLAGS='-include $(DEPTH)/mozilla-config.h -DMOZILLA_CLIENT'
    1:     _USE_CPP_INCLUDE_FLAG=1
24783: elif test "$SOLARIS_SUNPRO_CC"; then
24783:     DSO_CFLAGS=''
24783:     if test "$CPU_ARCH" = "sparc"; then
24783:         # for Sun Studio on Solaris/SPARC
24783:         DSO_PIC_CFLAGS='-xcode=pic32'
24783:     else
24783:         DSO_PIC_CFLAGS='-KPIC'
24783:     fi
24783:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1: else
    1:     MKSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1:     MKCSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1: 
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GNU_LD"; then
    1:         # Don't allow undefined symbols in libraries
    1:         DSO_LDOPTS="$DSO_LDOPTS -z defs"
    1:     fi
    1: 
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-KPIC'
    1:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1: fi
    1: 
    1: if test "$GNU_CXX"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"
    1:     # Turn on GNU specific features
34931:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wall -Wpointer-arith -Woverloaded-virtual -Wsynth -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
72621:     if test -z "$INTEL_CXX" -a -z "$CLANG_CXX"; then
72621:        # Don't use -Wcast-align with ICC or clang
15835:        case "$CPU_ARCH" in
40995:            # And don't use it on hppa, ia64, sparc, arm, since it's noisy there
40995:            hppa | ia64 | sparc | arm)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
    1:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/mozilla-config.h'
    1:     _USE_CPP_INCLUDE_FLAG=1
18452: 
18452:     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
18452:                    ac_has_wno_invalid_offsetof,
18452:         [
18452:             AC_LANG_SAVE
18506:             AC_LANG_CPLUSPLUS
18452:             _SAVE_CXXFLAGS="$CXXFLAGS"
18452:             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:             AC_TRY_COMPILE([],
18452:                            [return(0);],
18452:                            ac_has_wno_invalid_offsetof="yes",
18452:                            ac_has_wno_invalid_offsetof="no")
18452:             CXXFLAGS="$_SAVE_CXXFLAGS"
18452:             AC_LANG_RESTORE
18452:         ])
18452:     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
18452:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:     fi
34919: 
34928:     AC_CACHE_CHECK(whether the compiler supports -Wno-variadic-macros,
34928:                    ac_has_wno_variadic_macros,
34928:         [
34928:             AC_LANG_SAVE
34928:             AC_LANG_CPLUSPLUS
34928:             _SAVE_CXXFLAGS="$CXXFLAGS"
34928:             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-variadic-macros"
34928:             AC_TRY_COMPILE([],
34928:                            [return(0);],
34928:                            ac_has_wno_variadic_macros="yes",
34928:                            ac_has_wno_variadic_macros="no")
34928:             CXXFLAGS="$_SAVE_CXXFLAGS"
34928:             AC_LANG_RESTORE
34928:         ])
34928:     if test "$ac_has_wno_variadic_macros" = "yes"; then
34928:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-variadic-macros"
34928:     fi
34928: 
36830:     AC_CACHE_CHECK(whether the compiler supports -Werror=return-type,
36830:                    ac_has_werror_return_type,
36830:         [
36830:             AC_LANG_SAVE
36830:             AC_LANG_CPLUSPLUS
36830:             _SAVE_CXXFLAGS="$CXXFLAGS"
36830:             CXXFLAGS="$CXXFLAGS -Werror=return-type"
36830:             AC_TRY_COMPILE([],
36830:                            [return(0);],
36830:                            ac_has_werror_return_type="yes",
36830:                            ac_has_werror_return_type="no")
36830:             CXXFLAGS="$_SAVE_CXXFLAGS"
36830:             AC_LANG_RESTORE
36830:         ])
36830:     if test "$ac_has_werror_return_type" = "yes"; then
36830:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Werror=return-type"
36830:     fi
36830: 
    1: else
    1:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -D_MOZILLA_CONFIG_H_ $(ACDEFINES)'
    1: fi
    1: 
    1: dnl gcc can come with its own linker so it is better to use the pass-thru calls
    1: dnl MKSHLIB_FORCE_ALL is used to force the linker to include all object
    1: dnl files present in an archive. MKSHLIB_UNFORCE_ALL reverts the linker to
    1: dnl normal behavior.
    1: dnl ========================================================
    1: MKSHLIB_FORCE_ALL=
    1: MKSHLIB_UNFORCE_ALL=
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$GNU_CC"; then
    1:   AC_MSG_CHECKING(whether ld has archive extraction flags)
    1:   AC_CACHE_VAL(ac_cv_mkshlib_force_and_unforce,
    1:    [_SAVE_LDFLAGS=$LDFLAGS; _SAVE_LIBS=$LIBS
    1:     ac_cv_mkshlib_force_and_unforce="no"
    1:     exec 3<&0 <<LOOP_INPUT
    1: 	force="-Wl,--whole-archive";   unforce="-Wl,--no-whole-archive"
    1: 	force="-Wl,-z -Wl,allextract"; unforce="-Wl,-z -Wl,defaultextract"
    1: 	force="-Wl,-all";              unforce="-Wl,-none"
    1: LOOP_INPUT
    1:     while read line
    1:     do
    1:       eval $line
    1:       LDFLAGS=$force
    1:       LIBS=$unforce
    1:       AC_TRY_LINK(,, ac_cv_mkshlib_force_and_unforce=$line; break)
    1:     done
    1:     exec 0<&3 3<&-
    1:     LDFLAGS=$_SAVE_LDFLAGS; LIBS=$_SAVE_LIBS
    1:    ])
    1:   if test "$ac_cv_mkshlib_force_and_unforce" = "no"; then
    1:     AC_MSG_RESULT(no)
    1:   else
    1:     AC_MSG_RESULT(yes)
    1:     eval $ac_cv_mkshlib_force_and_unforce
    1:     MKSHLIB_FORCE_ALL=$force
    1:     MKSHLIB_UNFORCE_ALL=$unforce
    1:   fi
    1: fi # GNU_CC
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl =================================================================
    1: dnl Set up and test static assertion macros used to avoid AC_TRY_RUN,
    1: dnl which is bad when cross compiling.
    1: dnl =================================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: configure_static_assert_macros='
    1: #define CONFIGURE_STATIC_ASSERT(condition) CONFIGURE_STATIC_ASSERT_IMPL(condition, __LINE__)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL(condition, line) CONFIGURE_STATIC_ASSERT_IMPL2(condition, line)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL2(condition, line) typedef int static_assert_line_##line[(condition) ? 1 : -1]
    1: '
    1: 
    1: dnl test that the macros actually work:
    1: AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
    1: AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
    1:  [AC_LANG_SAVE
    1:   AC_LANG_C
    1:   ac_cv_static_assertion_macros_work="yes"
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_RESTORE
    1:  ])
    1: AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
    1: if test "$ac_cv_static_assertion_macros_work" = "no"; then
    1:     AC_MSG_ERROR([Compiler cannot compile macros used in autoconf tests.])
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl Checking for 64-bit OS
    1: dnl ========================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: AC_LANG_SAVE
    1: AC_LANG_C
    1: AC_MSG_CHECKING(for 64-bit OS)
    1: AC_TRY_COMPILE([$configure_static_assert_macros],
33494:                [CONFIGURE_STATIC_ASSERT(sizeof(void*) == 8)],
    1:                result="yes", result="no")
    1: AC_MSG_RESULT("$result")
    1: if test "$result" = "yes"; then
    1:     AC_DEFINE(HAVE_64BIT_OS)
    1:     HAVE_64BIT_OS=1
    1: fi
    1: AC_SUBST(HAVE_64BIT_OS)
    1: AC_LANG_RESTORE
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
14801: dnl Enable high-memory support on OS/2 by default.
14801: dnl ========================================================
14801: MOZ_OS2_HIGH_MEMORY=1
14801: MOZ_ARG_DISABLE_BOOL(os2-high-mem,
14801: [  --disable-os2-high-mem  Disable high-memory support on OS/2],
14801:     MOZ_OS2_HIGH_MEMORY=,
14801:     MOZ_OS2_HIGH_MEMORY=1 )
    1: AC_SUBST(MOZ_OS2_HIGH_MEMORY)
    1: 
    1: dnl ========================================================
55914: dnl = Use profiling compile flags
55914: dnl ========================================================
55914: MOZ_ARG_ENABLE_BOOL(profiling,
55914: [  --enable-profiling      Set compile flags necessary for using sampling profilers (e.g. shark, perf)],
55914:     MOZ_PROFILING=1,
55914:     MOZ_PROFILING= )
55914: 
55914: dnl ========================================================
63051: dnl = Use Valgrind
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(valgrind,
63051: [  --enable-valgrind       Enable Valgrind integration hooks (default=no)],
63051:     MOZ_VALGRIND=1,
63051:     MOZ_VALGRIND= )
63051: if test -n "$MOZ_VALGRIND"; then
63478:     MOZ_CHECK_HEADER([valgrind/valgrind.h], [],
63051:         AC_MSG_ERROR(
63051:             [--enable-valgrind specified but Valgrind is not installed]))
63051:     AC_DEFINE(MOZ_VALGRIND)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl jprof
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(jprof,
63051: [  --enable-jprof          Enable jprof profiling tool (needs mozilla/tools/jprof). Implies --enable-profiling.],
63051:     MOZ_JPROF=1,
63051:     MOZ_JPROF= )
63051: if test -n "$MOZ_JPROF"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_JPROF)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl shark
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(shark,
63051: [  --enable-shark          Enable shark remote profiling. Implies --enable-profiling.],
63051:     MOZ_SHARK=1,
63051:     MOZ_SHARK= )
63051: if test -n "$MOZ_SHARK"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_SHARK)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl callgrind
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(callgrind,
63051: [  --enable-callgrind      Enable callgrind profiling],
63051:     MOZ_CALLGRIND=1,
63051:     MOZ_CALLGRIND= )
63051: if test -n "$MOZ_CALLGRIND"; then
63051:     AC_DEFINE(MOZ_CALLGRIND)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl vtune
63051: dnl ========================================================
63051: MOZ_ARG_ENABLE_BOOL(vtune,
63051: [  --enable-vtune          Enable vtune profiling. Implies --enable-profiling.],
63051:     MOZ_VTUNE=1,
63051:     MOZ_VTUNE= )
63051: if test -n "$MOZ_VTUNE"; then
63051:     MOZ_PROFILING=1
63051:     AC_DEFINE(MOZ_VTUNE)
63051: fi
63051: 
63051: dnl ========================================================
63051: dnl Profiling
63051: dnl ========================================================
63051: if test -n "$MOZ_PROFILING"; then
63051:     AC_DEFINE(MOZ_PROFILING)
63051: fi
63051: 
63051: dnl ========================================================
    1: dnl System overrides of the defaults for host
    1: dnl ========================================================
    1: case "$host" in
68662: *mingw*)
    1:     if test -n "$_WIN32_MSVC"; then
    1:         HOST_AR=lib
    1:         HOST_AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:         HOST_CFLAGS="$HOST_CFLAGS -TC -nologo -Fd\$(HOST_PDBFILE)"
    1:         HOST_RANLIB='echo ranlib'
    1:     else
68658:         HOST_CFLAGS="$HOST_CFLAGS -mwindows"
    1:     fi
63525:     HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN32 -DXP_WIN -DWIN32 -D_WIN32 -DNO_X11 -D_CRT_SECURE_NO_WARNINGS"
    1:     HOST_NSPR_MDCPUCFG='\"md/_winnt.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     case "$host" in
    1:     *mingw*)
33295:         PERL="/bin/sh ${_topsrcdir}/build/msys-perl-wrapper"
    1:         ;;
    1:     esac
33494: 
33494:     case "${host_cpu}" in
33494:     x86_64)
33494:         HOST_CFLAGS="$HOST_CFLAGS -D_AMD64_"
33494:         ;;
33494:     esac
    1:     ;;
    1: 
    1: *-darwin*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
41013: *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
    1: *os2*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_OS2 -DNO_X11 -Zomf"
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     MOZ_FIX_LINK_PATHS=
    1:     ;;
    1: 
    1: *-osf*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_osf1.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: 
    1: *)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: esac
    1: 
56983: dnl We require version 2.5 or newer of Python to build.
59225: AC_MSG_CHECKING([for Python version >= $PYTHON_VERSION but not 3.x])
27609: changequote(,)
59225: $PYTHON -c "import sys; sys.exit(sys.version[:3] < sys.argv[1] or sys.version[:2] != '2.')" $PYTHON_VERSION
27609: _python_res=$?
27609: changequote([,])
27609: if test "$_python_res" != 0; then
59225:     AC_MSG_ERROR([Python $PYTHON_VERSION or higher (but not Python 3.x) is required.])
27609: fi
27609: AC_MSG_RESULT([yes])
27609: 
    1: dnl Get mozilla version from central milestone file
    1: MOZILLA_VERSION=`$PERL $srcdir/config/milestone.pl -topsrcdir $srcdir`
    1: 
    1: dnl Get version of various core apps from the version files.
62084: FIREFOX_VERSION=`cat $_topsrcdir/browser/config/version.txt`
62084: 
62084: if test -z "$FIREFOX_VERSION"; then
62084:     AC_MSG_ERROR([FIREFOX_VERSION is unexpectedly blank.])
62084: fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION,"$MOZILLA_VERSION")
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION_U,$MOZILLA_VERSION)
    1: 
67706: MOZ_DOING_LTO(lto_is_enabled)
67706: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for target
    1: dnl ========================================================
    1: 
    1: case "$target" in
    1: *-aix*)
    1:     AC_DEFINE(AIX)
    1:     if test ! "$GNU_CC"; then
    1:         if test ! "$HAVE_64BIT_OS"; then
    1:             # Compiling with Visual Age C++ object model compat is the
    1:             # default. To compile with object model ibm, add 
    1:             # AIX_OBJMODEL=ibm to .mozconfig.
    1:             if test "$AIX_OBJMODEL" = "ibm"; then
    1:                 CXXFLAGS="$CXXFLAGS -qobjmodel=ibm"
    1:             else
    1:                 AIX_OBJMODEL=compat
    1:             fi
    1:         else
    1:             AIX_OBJMODEL=compat
    1:         fi
    1:         AC_SUBST(AIX_OBJMODEL)
    1:         DSO_LDOPTS='-qmkshrobj=1'
    1:         DSO_CFLAGS='-qflag=w:w'
    1:         DSO_PIC_CFLAGS=
    1:         LDFLAGS="$LDFLAGS -Wl,-brtl -blibpath:/usr/lib:/lib"
    1:         MOZ_FIX_LINK_PATHS=
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         if test "$COMPILE_ENVIRONMENT"; then
    1:             AC_LANG_SAVE
    1:             AC_LANG_CPLUSPLUS
62250:             AC_MSG_CHECKING([for IBM XLC/C++ compiler version >= 9.0.0.7])
    1:             AC_TRY_COMPILE([],
62250:                 [#if (__IBMCPP__ < 900)
    1:                  #error "Bad compiler"
    1:                  #endif],
    1:                 _BAD_COMPILER=,_BAD_COMPILER=1)
    1:             if test -n "$_BAD_COMPILER"; then
    1:                 AC_MSG_RESULT([no])    
62250:                 AC_MSG_ERROR([IBM XLC/C++ 9.0.0.7 or higher is required to build.])
    1:             else
    1:                 AC_MSG_RESULT([yes])    
    1:             fi
    1:             AC_LANG_RESTORE
    1:             TARGET_COMPILER_ABI="ibmc"
    1:             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
    1:             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
    1:         fi
    1:     fi
    1:     case "${target_os}" in
    1:     aix4.1*)
    1:         DLL_SUFFIX='_shr.a'
    1:         ;;
    1:     esac
    1:     if test "$COMPILE_ENVIRONMENT"; then
63478:         MOZ_CHECK_HEADERS(sys/inttypes.h)
    1:     fi
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-bsdi*)
    1:     dnl -pedantic doesn't play well with BSDI's _very_ modified gcc (shlicc2)
    1:     _PEDANTIC=
    1:     case $OS_RELEASE in
    1: 	4.*|5.*)
    1:             STRIP="$STRIP -d"
    1:             ;;
    1: 	*)
    1: 	    DSO_CFLAGS=''
    1: 	    DSO_LDOPTS='-r'
    1: 	    _WARNINGS_CFLAGS="-Wall"
    1: 	    _WARNINGS_CXXFLAGS="-Wall"
    1: 	    # The test above doesn't work properly, at least on 3.1.
    1: 	    MKSHLIB_FORCE_ALL=''
    1: 	    MKSHLIB_UNFORCE_ALL=''
    1: 	;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*) 
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
55914:     # If we're building with --enable-profiling, we need a frame pointer.
55914:     if test -z "$MOZ_PROFILING"; then
51603:         MOZ_OPTIMIZE_FLAGS="-O3 -fomit-frame-pointer"
55914:     else
55914:         MOZ_OPTIMIZE_FLAGS="-O3 -fno-omit-frame-pointer"
55914:     fi
    1:     _PEDANTIC=
70238:     CFLAGS="$CFLAGS -fno-common"
70238:     CXXFLAGS="$CXXFLAGS -fno-common"
    1:     DLL_SUFFIX=".dylib"
    1:     DSO_LDOPTS=''
    1:     STRIP="$STRIP -x -S"
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
    1:     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
14692:     # The ExceptionHandling framework is needed for Objective-C exception
14692:     # logging code in nsObjCExceptions.h. Currently we only use that in debug
14692:     # builds.
14692:     MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -framework ExceptionHandling"
    1: 
67706:     if test "x$lto_is_enabled" = "xyes"; then
67706:         echo "Skipping -dead_strip because lto is enabled."
15321:     dnl DTrace and -dead_strip don't interact well. See bug 403132.
15321:     dnl ===================================================================
67706:     elif test "x$enable_dtrace" = "xyes"; then
15321:         echo "Skipping -dead_strip because DTrace is enabled. See bug 403132."
15321:     else
    1:         dnl check for the presence of the -dead_strip linker flag
    1:         AC_MSG_CHECKING([for -dead_strip option to ld])
    1:         _SAVE_LDFLAGS=$LDFLAGS
    1:         LDFLAGS="$LDFLAGS -Wl,-dead_strip"
    1:         AC_TRY_LINK(,[return 0;],_HAVE_DEAD_STRIP=1,_HAVE_DEAD_STRIP=)
    1:         if test -n "$_HAVE_DEAD_STRIP" ; then
    1:             AC_MSG_RESULT([yes])
    1:             MOZ_OPTIMIZE_LDFLAGS="-Wl,-dead_strip"
    1:         else
    1:             AC_MSG_RESULT([no])
    1:         fi
15321:         
    1:         LDFLAGS=$_SAVE_LDFLAGS
15321:     fi
38007:     MOZ_FIX_LINK_PATHS='-Wl,-executable_path,$(LIBXUL_DIST)/bin'
    1:     ;;
    1: 
    1: *-freebsd*)
15860:     if test `test -x /usr/bin/objformat && /usr/bin/objformat || echo elf` != "elf"; then
    1: 	DLL_SUFFIX=".so.1.0"
    1: 	DSO_LDOPTS="-shared"
    1:     fi
    1:     if test ! "$GNU_CC"; then
    1: 	DSO_LDOPTS="-Bshareable $DSO_LDOPTS"
    1:     fi
    1:     ;; 
    1: 
41441: ia64*-hpux*)
41441:     DLL_SUFFIX=".so"
41441:     if test ! "$GNU_CC"; then
41441:        DSO_LDOPTS='-b'
41441:        DSO_CFLAGS=""
41441:        DSO_PIC_CFLAGS=
41441:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_LDOPTS) -o $@'
41441:        CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
41441:     else
41441:        DSO_LDOPTS='-b -E'
41441:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
41441:     fi
41441:     MOZ_FIX_LINK_PATHS=
41441:     SYSTEM_MAKEDEPEND=
41441:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
41441:     AC_DEFINE(_LARGEFILE64_SOURCE)
41441:     ;;
41441: 
    1: *-hpux*)
    1:     DLL_SUFFIX=".sl"
    1:     if test ! "$GNU_CC"; then
    1:     	DSO_LDOPTS='-b -Wl,+s'
    1:     	DSO_CFLAGS=""
    1:     	DSO_PIC_CFLAGS="+Z"
    1:     	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -o $@'
    1:     	MKCSHLIB='$(LD) -b +s -L$(LIBXUL_DIST)/bin -o $@'
    1:         CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
    1:     else
    1:         DSO_LDOPTS='-b -E +s'
    1:         MKSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:         MKCSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:     fi
    1:     MOZ_POST_PROGRAM_COMMAND='chatr +s enable'
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-irix5*)
    1:     AC_DEFINE(IRIX)
    1:     DSO_LDOPTS='-elf -shared'
    1: 
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1:     fi
    1:     ;;
    1: 
    1: *-irix6*)
    1:     AC_DEFINE(IRIX)
    1:     dnl the irix specific xptcinvoke code is written against the n32 ABI so we *must* 
    1:     dnl compile and link using -n32
    1:     USE_N32=1
    1:     TARGET_COMPILER_ABI=n32
    1:     DSO_LDOPTS='-elf -shared'
    1:     MKSHLIB='$(CCC) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     _MOZ_EXCEPTIONS_FLAGS_OFF="-LANG:exceptions=OFF"
    1:     _MOZ_EXCEPTIONS_FLAGS_ON="-LANG:exceptions=ON"
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        _WARNINGS_CFLAGS="-Wall"
    1:        _WARNINGS_CXXFLAGS="-Wall"
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1: 	   AR_LIST="$AR t"
    1: 	   AR_EXTRACT="$AR x"
    1: 	   AR_DELETE="$AR d"
    1: 	   AR='$(CXX) -ar'
    1: 	   AR_FLAGS='-o $@'
    1:        CFLAGS="$CFLAGS -woff 3262 -G 4"
    1:        CXXFLAGS="$CXXFLAGS -woff 3262 -G 4"
    1:        if test -n "$USE_N32"; then
    1: 	   ASFLAGS="$ASFLAGS -n32"
    1: 	   CFLAGS="$CFLAGS -n32"
    1: 	   CXXFLAGS="$CXXFLAGS -n32"
    1: 	   LDFLAGS="$LDFLAGS -n32"
    1:        fi
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:        AC_MSG_WARN([Clearing MOZ_FIX_LINK_PATHS for OSF/1 as fix for bug 333545 (till the reference bug 332075 is fixed.])
    1:        MOZ_FIX_LINK_PATHS=
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       MIPSPRO_CXX=1
    1:     fi
    1:     ;;
    1: 
70914: *-android*|*-linuxandroid*)
70914:     AC_DEFINE(NO_PW_GECOS)
70914:     no_x=yes
70914:     _PLATFORM_DEFAULT_TOOLKIT=cairo-android
70914:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
70914: 
70914:     MOZ_GFX_OPTIMIZE_MOBILE=1
70914:     # If we're building with --enable-profiling, we need a frame pointer.
70914:     if test -z "$MOZ_PROFILING"; then
70914:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fomit-frame-pointer"
70914:     else
70914:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fno-omit-frame-pointer"
70914:     fi
70914:     ;;
70914: 
    1: *-*linux*)
21716:     # Note: both GNU_CC and INTEL_CC are set when using Intel's C compiler.
21716:     # Similarly for GNU_CXX and INTEL_CXX.
47975:     if test "$INTEL_CC" -o "$INTEL_CXX"; then
21716:         # -Os has been broken on Intel's C/C++ compilers for quite a
21716:         # while; Intel recommends against using it.
21716:         MOZ_OPTIMIZE_FLAGS="-O2"
39277:         MOZ_DEBUG_FLAGS="-g"
47975:     elif test "$GNU_CC" -o "$GNU_CXX"; then
13176:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
52418:         case $GCC_VERSION in
52418:         4.1.*|4.2.*|4.5.*)
52418:             # -Os is broken on gcc 4.1.x 4.2.x, 4.5.x we need to tweak it to get good results.
52418:             MOZ_OPTIMIZE_SIZE_TWEAK="-finline-limit=50"
52418:         esac
55914:         # If we're building with --enable-profiling, we need a frame pointer.
55914:         if test -z "$MOZ_PROFILING"; then
71833:             MOZ_FRAMEPTR_FLAGS="-fomit-frame-pointer"
71833:         else
71833:             MOZ_FRAMEPTR_FLAGS="-fno-omit-frame-pointer"
71833:         fi
71833:         MOZ_PGO_OPTIMIZE_FLAGS="-O3 $MOZ_FRAMEPTR_FLAGS"
71833:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks $MOZ_OPTIMIZE_SIZE_TWEAK $MOZ_FRAMEPTR_FLAGS"
39277:         MOZ_DEBUG_FLAGS="-g"
21716:     fi
21716: 
21716:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1: 
11611:     MOZ_MEMORY=1
11611: 
    1:     case "${target_cpu}" in
    1:     alpha*)
    1:     	CFLAGS="$CFLAGS -mieee"
    1:     	CXXFLAGS="$CXXFLAGS -mieee"
    1:     ;;
    1:     i*86)
    1:     	USE_ELF_DYNSTR_GC=1
    1:     ;;
    1:     mips*)
20694:         MOZ_DEBUG_FLAGS="-g" # We want inlining
    1:     ;;
    1:     esac
    1:     ;;
    1: 
63450: *-mingw*)
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     RC=rc.exe
    1:     # certain versions of cygwin's makedepend barf on the 
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1:     if test -n "$GNU_CC"; then
68658:         CC="$CC -mwindows"
68658:         CXX="$CXX -mwindows"
68658:         CPP="$CPP -mwindows"
    1:         CFLAGS="$CFLAGS -mms-bitfields"
    1:         CXXFLAGS="$CXXFLAGS -mms-bitfields"
    1:         DSO_LDOPTS='-shared'
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         RC='$(WINDRES)'
    1:         # Use temp file for windres (bug 213281)
    1:         RCFLAGS='-O coff --use-temp-file'
    1:         # mingw doesn't require kernel32, user32, and advapi32 explicitly
35675:         LIBS="$LIBS -luuid -lgdi32 -lwinmm -lwsock32"
    1:         MOZ_FIX_LINK_PATHS=
38924:         DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib -lxpcom -lxpcom_core -lmozalloc'
38924:         XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/lib -lxpcom -lmozalloc'
    1:         DLL_PREFIX=
    1:         IMPORT_LIB_SUFFIX=dll.a
42204:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
    1:     else
    1:         TARGET_COMPILER_ABI=msvc
    1:         HOST_CC='$(CC)'
    1:         HOST_CXX='$(CXX)'
    1:         HOST_LD='$(LD)'
33494:         if test "$AS_BIN"; then
33494:             AS="$(basename "$AS_BIN")"
33494:         fi
63466:         AR='lib'
63466:         AR_FLAGS='-NOLOGO -OUT:"$@"'
63466:         AR_EXTRACT=
    1:         RANLIB='echo not_ranlib'
    1:         STRIP='echo not_strip'
51803:         PKG_SKIP_STRIP=1
    1:         XARGS=xargs
    1:         ZIP=zip
    1:         UNZIP=unzip
    1:         DOXYGEN=:
    1:         GARBAGE='$(OBJDIR)/vc20.pdb $(OBJDIR)/vc40.pdb'
33494:         ASM_SUFFIX=asm
    1:         OBJ_SUFFIX=obj
    1:         LIB_SUFFIX=lib
    1:         DLL_PREFIX=
    1:         LIB_PREFIX=
    1:         IMPORT_LIB_SUFFIX=lib
21344:         MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
21344:         MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
    1:         MKSHLIB_FORCE_ALL=
    1:         MKSHLIB_UNFORCE_ALL=
    1:         DSO_LDOPTS=-SUBSYSTEM:WINDOWS
31530:         _USE_CPP_INCLUDE_FLAG=1
31530:         _DEFINES_CFLAGS='-FI $(DEPTH)/dist/include/mozilla-config.h -DMOZILLA_CLIENT'
31530:         _DEFINES_CXXFLAGS='-FI $(DEPTH)/dist/include/mozilla-config.h -DMOZILLA_CLIENT'
21344:         CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:         CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
42157:         CXXFLAGS="$CXXFLAGS -wd4800" # disable warning "forcing value to bool"
72469:         # make 'foo == bar;' error out
72469:         CFLAGS="$CFLAGS -we4553"
72469:         CXXFLAGS="$CXXFLAGS -we4553"
    1:         LIBS="$LIBS kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib"
    1:         MOZ_DEBUG_FLAGS='-Zi'
    1:         MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
 5384:         WARNINGS_AS_ERRORS='-WX'
55914:         # If we're building with --enable-profiling, we need -Oy-, which forces a frame pointer.
55914:         if test -z "$MOZ_PROFILING"; then
    1:             MOZ_OPTIMIZE_FLAGS='-O1'
55914:         else
55914:             MOZ_OPTIMIZE_FLAGS='-O1 -Oy-'
55914:         fi
    1:         MOZ_FIX_LINK_PATHS=
38924:         DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
38924:         XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
38924:         LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
    1:         MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
 3563:         if test $_MSC_VER -ge 1400; then
57891:             LDFLAGS="$LDFLAGS -LARGEADDRESSAWARE -NXCOMPAT"
12601:             dnl For profile-guided optimization
11977:             PROFILE_GEN_CFLAGS="-GL"
11977:             PROFILE_GEN_LDFLAGS="-LTCG:PGINSTRUMENT"
14519:             dnl XXX: PGO builds can fail with warnings treated as errors,
14519:             dnl specifically "no profile data available" appears to be
14519:             dnl treated as an error sometimes. This might be a consequence
14519:             dnl of using WARNINGS_AS_ERRORS in some modules, combined
14519:             dnl with the linker doing most of the work in the whole-program
14519:             dnl optimization/PGO case. I think it's probably a compiler bug,
14519:             dnl but we work around it here.
14519:             PROFILE_USE_CFLAGS="-GL -wd4624 -wd4952"
14519:             dnl XXX: should be -LTCG:PGOPTIMIZE, but that fails on libxul.
14519:             dnl Probably also a compiler bug, but what can you do?
11977:             PROFILE_USE_LDFLAGS="-LTCG:PGUPDATE"
12601:             LDFLAGS="$LDFLAGS -DYNAMICBASE"
12601:         fi
 3563:     fi
37305:     MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,jpeg32$(VERSION_NUMBER),$(DEPTH)/jpeg)'
    1:     MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,png,$(DEPTH)/modules/libimg/png)'
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-windows'
    1:     BIN_SUFFIX='.exe'
    1:     MOZ_USER_DIR="Mozilla"
    1: 
    1:     dnl Hardcode to win95 for now - cls
    1:     TARGET_NSPR_MDCPUCFG='\"md/_win95.cfg\"'
    1: 
    1:     dnl set NO_X11 defines here as the general check is skipped on win32
    1:     no_x=yes
    1:     AC_DEFINE(NO_X11)
    1: 
    1:     case "$host" in
    1:     *-mingw*)
    1:         MOZ_BUILD_ROOT=`cd $MOZ_BUILD_ROOT && pwd -W`
    1:         ;;
    1:     esac
63450: 
    1:     case "$host" in
63450:     *-mingw*)
    1:         if test -z "$MOZ_TOOLS"; then
    1:             AC_MSG_ERROR([MOZ_TOOLS is not set])
    1:         fi
25869:         MOZ_TOOLS_DIR=`cd $MOZ_TOOLS && pwd -W`
47975:         if test "$?" != "0" -o -z "$MOZ_TOOLS_DIR"; then
    1:             AC_MSG_ERROR([cd \$MOZ_TOOLS failed. MOZ_TOOLS ==? $MOZ_TOOLS])
    1:         fi
25869:         MOZ_TOOLS_BIN_DIR="$(cd "$MOZ_TOOLS_DIR/bin" && pwd)"
25869:         if test `echo ${PATH}: | grep -ic "$MOZ_TOOLS_BINDIR:"` = 0; then
    1:             AC_MSG_ERROR([\$MOZ_TOOLS\\bin must be in your path.])
    1:         fi
    1:         ;;
    1:     esac 
    1: 
14512:     case "$host_os" in
15187:     cygwin*|msvc*|mks*)
63450:         AC_MSG_ERROR([Using a Cygwin build environment is unsupported. Configure cannot check for presence of necessary headers. Please upgrade to MozillaBuild; see https://developer.mozilla.org/en/Windows_Build_Prerequisites.])
63450:         ;;
14512:     *)
33494:         AC_CHECK_HEADERS(oleacc.idl)
14341:         AC_LANG_SAVE
14341:         AC_LANG_CPLUSPLUS
63478:         MOZ_CHECK_HEADERS(atlbase.h)
14341:         AC_LANG_RESTORE
14512:         ;;
14512:     esac
14341: 
    1:     case "$target" in
    1:     i*86-*)
33494:         if test "$HAVE_64BIT_OS"; then
33494:             AC_MSG_ERROR([You are targeting i386 but using the 64-bit compiler.])
33494:         fi
33494: 
33494:         if test $_MSC_VER -ge 1400; then
33494:             LDFLAGS="$LDFLAGS -SAFESEH"
33494:         fi
61928: 
61928:         if test -n "$GNU_CC"; then
61928:             CFLAGS="$CFLAGS -mstackrealign"
61928:             CXXFLAGS="$CXXFLAGS -mstackrealign"
61928:         fi
61928: 
63478:         MOZ_CHECK_HEADERS(mmintrin.h)
    1:     	AC_DEFINE(_X86_)
    1: 	;;
33494:     x86_64-*)
33494:         AC_DEFINE(_AMD64_)
33494:         ;;
    1:     *)
    1:     	AC_DEFINE(_CPU_ARCH_NOT_DEFINED)
    1: 	;;
    1:     esac
33494: 
33494:     if test "$HAVE_64BIT_OS"; then
33494:     	AC_DEFINE(_WIN64)
33494:     fi
    1:     ;;
    1: 
    1: *-netbsd*)
    1:     DSO_CFLAGS=''
    1:     CFLAGS="$CFLAGS -Dunix"
    1:     CXXFLAGS="$CXXFLAGS -Dunix"
    1:     if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
    1:         DLL_SUFFIX=".so"
    1:         DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:         DSO_LDOPTS='-shared'
    1: 	BIN_FLAGS='-Wl,--export-dynamic'
    1:     else
    1:     	DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:     	DLL_SUFFIX=".so.1.0"
    1:     	DSO_LDOPTS='-shared'
    1:     fi
    1:     # This will fail on a.out systems prior to 1.5.1_ALPHA.
    1:     MKSHLIB_FORCE_ALL='-Wl,--whole-archive'
    1:     MKSHLIB_UNFORCE_ALL='-Wl,--no-whole-archive'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-Wl,-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     ;;
    1: 
    1: *-nto*) 
    1: 	AC_DEFINE(NTO)	
    1: 	AC_DEFINE(_QNX_SOURCE)
    1: 	AC_DEFINE(_i386)
    1: 	OS_TARGET=NTO
 5382: 	WARNINGS_AS_ERRORS=''
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: 	MOZ_DEBUG_FLAGS="-gstabs"
    1: 	USE_PTHREADS=1
    1: 	_PEDANTIC=
    1: 	LIBS="$LIBS -lsocket -lstdc++"
47213: 	_DEFINES_CFLAGS='-include $(DEPTH)/mozilla-config.h -DMOZILLA_CLIENT -D_POSIX_C_SOURCE=199506'
47213: 	_DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/mozilla-config.h -D_POSIX_C_SOURCE=199506'
    1: 	if test "$with_x" != "yes"
    1: 	then
    1: 		_PLATFORM_DEFAULT_TOOLKIT="photon"
    1: 	    TK_CFLAGS='-I/usr/include/photon'
    1: 		TK_LIBS='-lph'
    1: 	fi
    1: 	case "${target_cpu}" in
    1: 	ppc*)
    1: 	AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)	
    1: 	;;
    1: 	esac
    1: 	case "${host_cpu}" in
    1: 	i*86)
    1: 	USE_ELF_DYNSTR_GC=1
    1: 	;;
    1: 	esac
    1: 	;;
    1: 
    1: *-openbsd*)
68740:     if test "$SO_VERSION"; then
68740:         DLL_SUFFIX=".so.$SO_VERSION"
68740:     else
68740:         DLL_SUFFIX=".so.1.0"
68740:     fi
68598:     MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(prefix)/lib -Wl,-rpath-link,$(if $(X11BASE),$(X11BASE),/usr/X11R6)/lib'
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
    1:     DSO_LDOPTS='-shared -fPIC'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     ;;
    1: 
    1: *-os2*)
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
20288:     AC_DEFINE(OS2)
    1:     AC_DEFINE(XP_OS2)
20288:     AC_DEFINE(OS2EMX_PLAIN_CHAR)
20288:     AC_DEFINE(TCPV40HDRS)
    1:     DLL_PREFIX=
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib
    1:     BIN_SUFFIX=".exe"
    1:     DLL_SUFFIX=".dll"
    1:     IMPORT_LIB_SUFFIX=lib
    1:     DSO_PIC_CFLAGS=
    1:     AR=emxomfar
    1:     AR_FLAGS='r $@'
    1:     CFLAGS="$CFLAGS -Zomf"
    1:     CXXFLAGS="$CXXFLAGS -Zomf"
    1:     DSO_LDOPTS='-Zdll'
    1:     BIN_FLAGS='-Zlinker /ST:0x100000'
    1:     IMPLIB='emximp -o'
57150:     FILTER='true'
    1:     LDFLAGS='-Zmap'
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     MOZ_DEBUG_FLAGS="-g -fno-inline"
11455:     MOZ_OPTIMIZE_FLAGS="-O2"
11455:     MOZ_OPTIMIZE_LDFLAGS="-s -Zlinker /EXEPACK:2 -Zlinker /PACKCODE -Zlinker /PACKDATA"
39033:     DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
39033:     LIBXUL_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib $(LIBXUL_DIST)/lib/mozalloc.lib'
20288:     TARGET_MD_ARCH=os2
20288:     _PLATFORM_DEFAULT_TOOLKIT="cairo-os2"
20288:     RC=rc.exe
20288:     RCFLAGS='-n'
20288:     MOZ_USER_DIR="Mozilla"
67795:     ZIP="$ZIP -X"
20288: 
20288:     if test "$MOZTOOLS"; then
20288:         MOZ_TOOLS_DIR=`echo $MOZTOOLS | sed -e 's|\\\\|/|g'`
20288:     else
20288:         AC_MSG_ERROR([MOZTOOLS is not set])
20288:     fi
    1:     if test -n "$MOZ_OS2_HIGH_MEMORY"; then
    1:         DSO_LDOPTS="$DSO_LDOPTS -Zhigh-mem"
    1:         LDFLAGS="$LDFLAGS -Zhigh-mem"
    1:         MOZ_OPTIMIZE_LDFLAGS="$MOZ_OPTIMIZE_LDFLAGS -Zhigh-mem"
    1:         AC_DEFINE(MOZ_OS2_HIGH_MEMORY)
    1:     fi
    1: 
    1:     # GCC for OS/2 currently predefines these, but we don't want them
    1:     _DEFINES_CFLAGS="$_DEFINES_CFLAGS -Uunix -U__unix -U__unix__"
    1:     _DEFINES_CXXFLAGS="$_DEFINES_CXXFLAGS -Uunix -U__unix -U__unix__"
    1: 
    1:     AC_CACHE_CHECK(for __declspec(dllexport),
    1:         ac_os2_declspec,
    1:         [AC_TRY_COMPILE([__declspec(dllexport) void ac_os2_declspec(void) {}],
    1:                         [return 0;],
    1:                         ac_os2_declspec="yes",
    1:                         ac_os2_declspec="no")])
57150:     if test "$ac_os2_declspec" != "yes"; then
57150:         AC_MSG_ERROR([Compiler does not support __declspec(dllexport), install GCC-4.3.2 or newer])
    1:     fi
    1:     ;;
    1: 
    1: alpha*-*-osf*)
    1:     if test "$GNU_CC"; then
    1:       MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1:       MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1: 
    1:     else
    1: 	MOZ_DEBUG_FLAGS='-g'
    1: 	ASFLAGS='-I$(topsrcdir)/xpcom/reflect/xptcall/public -g'
    1: 	CFLAGS="$CFLAGS -ieee"
    1: 	CXXFLAGS="$CXXFLAGS "'-noexceptions -ieee  -ptr $(DIST)/cxx_repository'
    1: 	DSO_LDOPTS='-shared -msym -expect_unresolved \* -update_registry $(DIST)/so_locations'
    1: 	DSO_CFLAGS=
    1: 	DSO_PIC_CFLAGS=
    1: 	MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB_FORCE_ALL='-all'
    1: 	MKSHLIB_UNFORCE_ALL='-none'
    1: 	dnl Might fix the libxpcom.so breakage on this platform as well....
    1: 	AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1: 	AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       COMPAQ_CXX=1
    1:     fi
    1:     AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     ;;
    1: 
    1: *-qnx*) 
    1:     DIRENT_INO=d_stat.st_ino
    1:     dnl Solves the problems the QNX compiler has with nsCOMPtr.h.
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     dnl Explicit set STDC_HEADERS to workaround QNX 6.0's failing of std test
    1:     AC_DEFINE(STDC_HEADERS)
    1:     if test "$no_x" = "yes"; then
    1: 	    _PLATFORM_DEFAULT_TOOLKIT='photon'
    1: 	    TK_CFLAGS='-I/usr/nto/include/photon'
    1: 	    TK_LIBS='-lphoton -lphrender'
    1:     fi
    1:     ;;
    1: 
    1: *-sco*) 
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     CXXFLAGS="$CXXFLAGS -I/usr/include/CC"
    1:     if test ! "$GNU_CC"; then
    1:        DSO_LDOPTS='-G'
    1:     fi
    1:     ;;
    1: 
    1: *-solaris*) 
    1:     AC_DEFINE(SOLARIS)
    1:     TARGET_NSPR_MDCPUCFG='\"md/_solaris.cfg\"'
    1:     SYSTEM_MAKEDEPEND=
46279:     MOZ_FIX_LINK_PATHS=
    1:     # $ORIGIN/.. is for shared libraries under components/ to locate shared
    1:     # libraries one level up (e.g. libnspr4.so)
24783:     if test "$SOLARIS_SUNPRO_CC"; then
46279:        LDFLAGS="$LDFLAGS -z ignore -R '\$\$ORIGIN:\$\$ORIGIN/..' -z lazyload -z combreloc -z muldefs"
46279:        LIBS="-lCrun -lCstd -lc $LIBS"
    1:        NS_USE_NATIVE=1
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
46279:        CFLAGS="$CFLAGS -xlibmieee -xstrconst -xbuiltin=%all -D__FUNCTION__=__func__"
49018:        CXXFLAGS="$CXXFLAGS -xlibmieee -xbuiltin=%all -features=tmplife,tmplrefstatic,extensions -norunpath -D__FUNCTION__=__func__ -template=no%extdef"
40533:        _MOZ_EXCEPTIONS_FLAGS_ON='-features=except'
40533:        _MOZ_EXCEPTIONS_FLAGS_OFF='-features=no%except'
46279:        LDFLAGS="-xildoff $LDFLAGS"
47975:        if test -z "$CROSS_COMPILE" -a -f /usr/lib/ld/map.noexstk; then
    1:            _SAVE_LDFLAGS=$LDFLAGS
    1:            LDFLAGS="-M /usr/lib/ld/map.noexstk $LDFLAGS" 
    1:            AC_TRY_LINK([#include <stdio.h>],
    1:                        [printf("Hello World\n");],
    1:                        ,
    1:                        [LDFLAGS=$_SAVE_LDFLAGS])
    1:        fi
    1:        MOZ_OPTIMIZE_FLAGS="-xO4"
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
46281:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
    1:        MKSHLIB_FORCE_ALL='-z allextract'
 2607:        MKSHLIB_UNFORCE_ALL='-z defaultextract'
46279:        DSO_LDOPTS='-G'
    1:        AR_LIST="$AR t"
    1:        AR_EXTRACT="$AR x"
    1:        AR_DELETE="$AR d"
    1:        AR='$(CXX) -xar'
    1:        AR_FLAGS='-o $@'
    1:        AS='/usr/ccs/bin/as'
    1:        ASFLAGS="$ASFLAGS -K PIC -L -P -D_ASM -D__STDC__=0"
    1:        AS_DASH_C_FLAG=''
    1:        TARGET_COMPILER_ABI="sunc"
    1:        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
    1:        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
24783:        AC_MSG_CHECKING([for Sun C++ compiler version >= 5.9])
    1:        AC_LANG_SAVE
    1:        AC_LANG_CPLUSPLUS
    1:        AC_TRY_COMPILE([],
24783:            [#if (__SUNPRO_CC < 0x590)
    1:            #error "Denied"
    1:            #endif],
    1:            _BAD_COMPILER=,_BAD_COMPILER=1)
    1:        if test -n "$_BAD_COMPILER"; then
    1:            _res="no"
24783:            AC_MSG_ERROR([Sun C++ 5.9 (Sun Studio 12) or higher is required to build. Your compiler version is $CXX_VERSION .])
    1:        else
    1:            _res="yes"
    1:        fi
46279:        AC_TRY_COMPILE([],
46279:            [#if (__SUNPRO_CC >= 0x5100)
46279:            #error "Sun C++ 5.10 or above"
46279:            #endif],
46279:            _ABOVE_SS12U1=,_ABOVE_SS12U1=1)
46279:        if test "$_ABOVE_SS12U1"; then
46279:            # disable xannotate
46279:            CXXFLAGS="$CXXFLAGS -xannotate=no"
46279:        fi
    1:        AC_MSG_RESULT([$_res])
    1:        AC_LANG_RESTORE
    1:     else
46279:        LDFLAGS="$LDFLAGS -Wl,-z,ignore -Wl,-R,'\$\$ORIGIN:\$\$ORIGIN/..' -Wl,-z,lazyload -Wl,-z,combreloc -Wl,-z,muldefs"
46279:        LIBS="-lc $LIBS"
46279:        MKSHLIB_FORCE_ALL='-Wl,-z -Wl,allextract'
46279:        MKSHLIB_UNFORCE_ALL='-Wl,-z -Wl,defaultextract'
    1:        ASFLAGS="$ASFLAGS -fPIC"
46279:        DSO_LDOPTS='-shared'
64499:        WARNINGS_AS_ERRORS='-Werror'
    1:        _WARNINGS_CFLAGS=''
    1:        _WARNINGS_CXXFLAGS=''
    1:        if test "$OS_RELEASE" = "5.3"; then
    1:            AC_DEFINE(MUST_UNDEF_HAVE_BOOLEAN_AFTER_INCLUDES)
    1:        fi
    1:     fi
    1:     if test "$OS_RELEASE" = "5.5.1"; then
    1:         AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     fi
    1:     ;;
    1: 
    1: *-sunos*) 
    1:     DSO_LDOPTS='-Bdynamic'
    1:     MKSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     AC_DEFINE(SUNOS4)
    1:     AC_DEFINE(SPRINTF_RETURNS_STRING)
    1:     case "$(target_os)" in
    1:     sunos4.1*)
    1:         DLL_SUFFIX='.so.1.0'
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-sysv4.2uw7*) 
    1: 	NSPR_LIBS="-lnspr$NSPR_VERSION -lplc$NSPR_VERSION -lplds$NSPR_VERSION -L/usr/ccs/lib -lcrt"
    1:     ;;
    1: 
    1: *-os2*)
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     ;;
    1: 
    1: esac
    1: 
    1: dnl Only one oddball right now (QNX), but this gives us flexibility
    1: dnl if any other platforms need to override this in the future.
    1: AC_DEFINE_UNQUOTED(D_INO,$DIRENT_INO)
    1: 
    1: dnl ========================================================
    1: dnl Any platform that doesn't have MKSHLIB_FORCE_ALL defined
    1: dnl by now will not have any way to link most binaries (tests
    1: dnl as well as viewer, apprunner, etc.), because some symbols
    1: dnl will be left out of the "composite" .so's by ld as unneeded.
    1: dnl So, by defining NO_LD_ARCHIVE_FLAGS for these platforms,
    1: dnl they can link in the static libs that provide the missing
    1: dnl symbols.
    1: dnl ========================================================
    1: NO_LD_ARCHIVE_FLAGS=
47975: if test -z "$MKSHLIB_FORCE_ALL" -o -z "$MKSHLIB_UNFORCE_ALL"; then
    1:     NO_LD_ARCHIVE_FLAGS=1
    1: fi
    1: case "$target" in
    1: *-os2*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-aix4.3*|*-aix5*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
68662: *-mingw*)
    1:     if test -z "$GNU_CC"; then
    1:         NO_LD_ARCHIVE_FLAGS=
    1:     fi
    1:     ;;
    1: esac
    1: AC_SUBST(NO_LD_ARCHIVE_FLAGS)
    1: 
    1: dnl ========================================================
57645: dnl = Flags to strip unused symbols from .so components and
57645: dnl = to export jemalloc symbols when linking a program
    1: dnl ========================================================
    1: case "$target" in
41013:     *-linux*|*-kfreebsd*-gnu|*-gnu*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
57645:         MOZ_JEMALLOC_STANDALONE_GLUE_LDOPTS='-rdynamic -Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/jemalloc-standalone-linkage-version-script'
    1:         ;;
    1:     *-solaris*)
    1:         if test -z "$GNU_CC"; then
    1:          MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-M $(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:         else
    1:          if test -z "$GCC_USE_GNU_LD"; then
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-M -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:          else
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:          fi
    1:         fi
    1:         ;;
    1:     *-nto*) 
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-darwin*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-exported_symbols_list -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-export-list'
    1:         ;;
68662:     *-mingw*)
    1:         if test -n "$GNU_CC"; then
    1:            MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         fi
    1:         ;;
    1: esac
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_COMPILER_CHECKS=1
 2271:     SKIP_LIBRARY_CHECKS=1
    1: fi
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl Checks for typedefs, structures, and compiler characteristics.
    1: dnl ========================================================
    1: AC_HEADER_STDC
    1: AC_C_CONST
    1: AC_TYPE_MODE_T
    1: AC_TYPE_OFF_T
    1: AC_TYPE_PID_T
    1: AC_TYPE_SIZE_T
46164: AC_LANG_CPLUSPLUS
41360: AC_MSG_CHECKING(for __stdcall)
41360: AC_CACHE_VAL(ac_cv___stdcall,
46164:  [AC_TRY_COMPILE([template <typename Method> struct foo;
46164:                   template <> struct foo<void (*)()> {};
46164:                   template <> struct foo<void (__stdcall*)()> {};],
46164:                  [],
41360:                  [ac_cv___stdcall=true],
41360:                  [ac_cv___stdcall=false])])
41360: if test "$ac_cv___stdcall" = true ; then
41360:   AC_DEFINE(HAVE_STDCALL)
41360:   AC_MSG_RESULT(yes)
41360: else
41360:   AC_MSG_RESULT(no)
41360: fi
46164: AC_LANG_C
39303: AC_MSG_CHECKING(for ssize_t)
39303: AC_CACHE_VAL(ac_cv_type_ssize_t,
39303:  [AC_TRY_COMPILE([#include <stdio.h>
39303:                   #include <sys/types.h>],
39303:                  [ssize_t foo = 0;],
39303:                  [ac_cv_type_ssize_t=true],
39303:                  [ac_cv_type_ssize_t=false])])
39303: if test "$ac_cv_type_ssize_t" = true ; then
39303:   AC_DEFINE(HAVE_SSIZE_T)
39303:   AC_MSG_RESULT(yes)
39303: else
39303:   AC_MSG_RESULT(no)
39303: fi
    1: AC_STRUCT_ST_BLKSIZE
    1: AC_MSG_CHECKING(for siginfo_t)
    1: AC_CACHE_VAL(ac_cv_siginfo_t,
    1:  [AC_TRY_COMPILE([#define _POSIX_C_SOURCE 199506L
    1:                   #include <signal.h>],
    1:                  [siginfo_t* info;],
    1:                  [ac_cv_siginfo_t=true],
    1:                  [ac_cv_siginfo_t=false])])
    1: if test "$ac_cv_siginfo_t" = true ; then
    1:   AC_DEFINE(HAVE_SIGINFO_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl Check for int16_t, int32_t, int64_t, int64, uint, uint_t, and uint16_t.
    1: dnl ========================================================
    1: AC_MSG_CHECKING(for int16_t)
    1: AC_CACHE_VAL(ac_cv_int16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int16_t foo = 0;],
    1:                  [ac_cv_int16_t=true],
    1:                  [ac_cv_int16_t=false])])
    1: if test "$ac_cv_int16_t" = true ; then
    1:   AC_DEFINE(HAVE_INT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int32_t)
    1: AC_CACHE_VAL(ac_cv_int32_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int32_t foo = 0;],
    1:                  [ac_cv_int32_t=true],
    1:                  [ac_cv_int32_t=false])])
    1: if test "$ac_cv_int32_t" = true ; then
    1:   AC_DEFINE(HAVE_INT32_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64_t)
    1: AC_CACHE_VAL(ac_cv_int64_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64_t foo = 0;],
    1:                  [ac_cv_int64_t=true],
    1:                  [ac_cv_int64_t=false])])
    1: if test "$ac_cv_int64_t" = true ; then
    1:   AC_DEFINE(HAVE_INT64_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64)
    1: AC_CACHE_VAL(ac_cv_int64,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64 foo = 0;],
    1:                  [ac_cv_int64=true],
    1:                  [ac_cv_int64=false])])
    1: if test "$ac_cv_int64" = true ; then
    1:   AC_DEFINE(HAVE_INT64)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint)
    1: AC_CACHE_VAL(ac_cv_uint,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint foo = 0;],
    1:                  [ac_cv_uint=true],
    1:                  [ac_cv_uint=false])])
    1: if test "$ac_cv_uint" = true ; then
    1:   AC_DEFINE(HAVE_UINT)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint_t)
    1: AC_CACHE_VAL(ac_cv_uint_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint_t foo = 0;],
    1:                  [ac_cv_uint_t=true],
    1:                  [ac_cv_uint_t=false])])
    1: if test "$ac_cv_uint_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint16_t)
    1: AC_CACHE_VAL(ac_cv_uint16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint16_t foo = 0;],
    1:                  [ac_cv_uint16_t=true],
    1:                  [ac_cv_uint16_t=false])])
    1: if test "$ac_cv_uint16_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
    1: dnl are defined when compiling C++ but not C.  Since the result of this
    1: dnl test is used only in C++, do it in C++.
    1: AC_LANG_CPLUSPLUS
    1: 
    1: AC_MSG_CHECKING(for uname.domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->domainname; } ],
    1:         [ac_cv_have_uname_domainname_field=true],
    1:         [ac_cv_have_uname_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_MSG_CHECKING(for uname.__domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_us_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->__domainname; } ],
    1:         [ac_cv_have_uname_us_domainname_field=true],
    1:         [ac_cv_have_uname_us_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_us_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_US_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
69365: dnl ========================================================
69365: dnl C++ rtti
69365: dnl Should be smarter and check that the compiler does indeed have rtti
69365: dnl ========================================================
69365: 
69365: MOZ_ARG_ENABLE_BOOL(cpp-rtti,
69365: [  --enable-cpp-rtti       Enable C++ RTTI ],
69365: [ _MOZ_USE_RTTI=1 ],
69365: [ _MOZ_USE_RTTI= ])
69365: 
69365: if test "$_MOZ_USE_RTTI"; then
69365:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_ON
69365: else
69365:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_OFF
69365: fi
69365: 
69365: AC_SUBST(_MOZ_RTTI_FLAGS_ON)
69365: 
69365: dnl Check whether we can use gcc's c++0x mode
30421: AC_LANG_CPLUSPLUS
30421: 
69257: if test "$GNU_CXX"; then
69257:     _SAVE_CXXFLAGS=$CXXFLAGS
69257:     CXXFLAGS="$CXXFLAGS -std=gnu++0x"
69365: 
69365:     if test -z "$_MOZ_USE_RTTI"; then
69365:         CXXFLAGS="$CXXFLAGS $_MOZ_RTTI_FLAGS"
69365:         AC_CACHE_CHECK(for gcc c++0x headers bug without rtti,
69365:             ac_cv_cxx0x_headers_bug,
69365:             [AC_TRY_COMPILE([#include <memory>], [],
69365:                             ac_cv_cxx0x_headers_bug="no",
69365:                             ac_cv_cxx0x_headers_bug="yes")])
69365:         CXXFLAGS="$_SAVE_CXXFLAGS"
69365:         if test "$ac_cv_cxx0x_headers_bug" = "no"; then
69365:             CXXFLAGS="$CXXFLAGS -std=gnu++0x"
69365:         fi
69365:     fi
69257: fi
69257: 
30421: dnl Check for usable char16_t (2 bytes, unsigned)
30421: dnl (we might not need the unsignedness check anymore)
30421: AC_CACHE_CHECK(for usable char16_t (2 bytes, unsigned),
30421:     ac_cv_have_usable_char16_t,
30421:     [AC_TRY_COMPILE([$configure_static_assert_macros],
30421:                     [CONFIGURE_STATIC_ASSERT(sizeof(char16_t) == 2);
30421:                      CONFIGURE_STATIC_ASSERT(char16_t(-1) > char16_t(0));
30421:                      CONFIGURE_STATIC_ASSERT(sizeof((u"hello")[0]) == 2);
30421:                      CONFIGURE_STATIC_ASSERT(sizeof(u'a') == 2);
30421:                      CONFIGURE_STATIC_ASSERT(u'\xFFFF' > u'\x0')],
30421:                     ac_cv_have_usable_char16_t="yes",
30421:                     ac_cv_have_usable_char16_t="no")])
30421: if test "$ac_cv_have_usable_char16_t" = "yes"; then
30421:     AC_DEFINE(HAVE_CPP_CHAR16_T)
30421:     HAVE_CPP_CHAR16_T=1
69296: elif test "$GNU_CXX"; then
69257:     CXXFLAGS="$_SAVE_CXXFLAGS"
30421: fi
    1: 
    1: dnl Check for usable wchar_t (2 bytes, unsigned)
    1: dnl (we really don't need the unsignedness check anymore)
    1: dnl ========================================================
    1: 
    1: AC_CACHE_CHECK(for usable wchar_t (2 bytes, unsigned),
    1:     ac_cv_have_usable_wchar_v2,
    1:     [AC_TRY_COMPILE([#include <stddef.h>
    1:                      $configure_static_assert_macros],
    1:                     [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                      CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                     ac_cv_have_usable_wchar_v2="yes",
    1:                     ac_cv_have_usable_wchar_v2="no")])
    1: if test "$ac_cv_have_usable_wchar_v2" = "yes"; then
    1:     AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:     HAVE_CPP_2BYTE_WCHAR_T=1
30421: elif test "$ac_cv_have_usable_char16_t" != "yes"; then
    1: dnl This is really gcc-only
    1: dnl Do this test using CXX only since some versions of gcc
    1: dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
    1: dnl only have short-wchar support for c++.
    1: dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
    1: 
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
    1:     CXXFLAGS="$CXXFLAGS -fshort-wchar"
    1: 
    1:     AC_CACHE_CHECK(for compiler -fshort-wchar option, 
    1:         ac_cv_have_usable_wchar_option_v2,
15236:         [AC_TRY_LINK([#include <stddef.h>
    1:                       $configure_static_assert_macros],
    1:                      [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                       CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                      ac_cv_have_usable_wchar_option_v2="yes",
    1:                      ac_cv_have_usable_wchar_option_v2="no")])
    1: 
    1:     if test "$ac_cv_have_usable_wchar_option_v2" = "yes"; then
    1:         AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:         HAVE_CPP_2BYTE_WCHAR_T=1
55888:         if test "$OS_TARGET" = Android; then
55888:             WCHAR_CFLAGS="-fshort-wchar -Wl,--no-wchar-size-warning"
55888:             CXXFLAGS="$CXXFLAGS -Wl,--no-wchar-size-warning"
55888:             CFLAGS="$CFLAGS -Wl,--no-wchar-size-warning"
55888:             DSO_LDOPTS="$DSO_LDOPTS -Wl,--no-wchar-size-warning"
55888:         else
20702:             WCHAR_CFLAGS="-fshort-wchar"
55888:         fi
    1:     else    
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:     fi
30421: fi
30421: 
30421: AC_LANG_C
    1: 
    1: dnl Check for .hidden assembler directive and visibility attribute.
    1: dnl Borrowed from glibc configure.in
    1: dnl ===============================================================
    1: if test "$GNU_CC"; then
    1:   AC_CACHE_CHECK(for visibility(hidden) attribute,
    1:                  ac_cv_visibility_hidden,
    1:                  [cat > conftest.c <<EOF
    1:                   int foo __attribute__ ((visibility ("hidden"))) = 1;
    1: EOF
    1:                   ac_cv_visibility_hidden=no
    1:                   if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                     if egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                       ac_cv_visibility_hidden=yes
    1:                     fi
    1:                   fi
    1:                   rm -f conftest.[cs]
    1:                  ])
    1:   if test "$ac_cv_visibility_hidden" = "yes"; then
    1:     AC_DEFINE(HAVE_VISIBILITY_HIDDEN_ATTRIBUTE)
    1: 
    1:     AC_CACHE_CHECK(for visibility(default) attribute,
    1:                    ac_cv_visibility_default,
    1:                    [cat > conftest.c <<EOF
    1:                     int foo __attribute__ ((visibility ("default"))) = 1;
    1: EOF
    1:                     ac_cv_visibility_default=no
    1:                     if ${CC-cc} -fvisibility=hidden -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                       if ! egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                         ac_cv_visibility_default=yes
    1:                       fi
    1:                     fi
    1:                     rm -f conftest.[cs]
    1:                    ])
    1:     if test "$ac_cv_visibility_default" = "yes"; then
    1:       AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE)
    1: 
    1:       AC_CACHE_CHECK(for visibility pragma support,
    1:                      ac_cv_visibility_pragma,
    1:                      [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1:                       int foo_hidden = 1;
    1: #pragma GCC visibility push(default)
    1:                       int foo_default = 1;
    1: EOF
    1:                       ac_cv_visibility_pragma=no
    1:                       if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
 2576:                         if egrep '\.(hidden|private_extern).*foo_hidden' conftest.s >/dev/null; then
 2576:                           if ! egrep '\.(hidden|private_extern).*foo_default' conftest.s > /dev/null; then
    1:                             ac_cv_visibility_pragma=yes
    1:                           fi
    1:                         fi
    1:                       fi
    1:                       rm -f conftest.[cs]
    1:                     ])
    1:       if test "$ac_cv_visibility_pragma" = "yes"; then
    1:         AC_CACHE_CHECK(For gcc visibility bug with class-level attributes (GCC bug 26905),
    1:                        ac_cv_have_visibility_class_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: struct __attribute__ ((visibility ("default"))) TestStruct {
    1:   static void Init();
    1: };
    1: __attribute__ ((visibility ("default"))) void TestFunc() {
    1:   TestStruct::Init();
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_class_bug=no
    1:                        if ! ${CXX-g++} ${CXXFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_class_bug=yes
    1:                        else
 2576:                          if test `egrep -c '@PLT|\\$stub' conftest.S` = 0; then
    1:                            ac_cv_have_visibility_class_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -rf conftest.{c,S}
    1:                        ])
    1: 
    1:         AC_CACHE_CHECK(For x86_64 gcc visibility bug with builtins (GCC bug 20297),
    1:                        ac_cv_have_visibility_builtin_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: #pragma GCC visibility push(default)
    1: #include <string.h>
    1: #pragma GCC visibility pop
    1: 
    1: __attribute__ ((visibility ("default"))) void Func() {
    1:   char c[[100]];
    1:   memset(c, 0, sizeof(c));
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_builtin_bug=no
    1:                        if ! ${CC-cc} ${CFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -O2 -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_builtin_bug=yes
    1:                        else
    1:                          if test `grep -c "@PLT" conftest.S` = 0; then
    1:                            ac_cv_visibility_builtin_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -f conftest.{c,S}
    1:                        ])
    1:         if test "$ac_cv_have_visibility_builtin_bug" = "no" -a \
    1:                 "$ac_cv_have_visibility_class_bug" = "no"; then
29557:           VISIBILITY_FLAGS='-I$(DIST)/system_wrappers -include $(topsrcdir)/config/gcc_hidden.h'
    1:           WRAP_SYSTEM_INCLUDES=1
40161:           STL_FLAGS='-I$(DIST)/stl_wrappers'
40161:           WRAP_STL_INCLUDES=1
    1:         else
    1:           VISIBILITY_FLAGS='-fvisibility=hidden'
    1:         fi # have visibility pragma bug
    1:       fi   # have visibility pragma
    1:     fi     # have visibility(default) attribute
    1:   fi       # have visibility(hidden) attribute
    1: fi         # GNU_CC
    1: 
18946: # visibility hidden flag for Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
18946: VISIBILITY_FLAGS='-xldscope=hidden'
18946: fi         # Sun Studio on Solaris
18946: 
    1: AC_SUBST(WRAP_SYSTEM_INCLUDES)
    1: AC_SUBST(VISIBILITY_FLAGS)
    1: 
38799: dnl Check for __force_align_arg_pointer__ for SSE2 on gcc
38799: dnl ========================================================
38799: if test "$GNU_CC"; then
38799:   CFLAGS_save="${CFLAGS}"
38799:   CFLAGS="${CFLAGS} -Werror"
38799:   AC_CACHE_CHECK(for __force_align_arg_pointer__ attribute,
38799:                  ac_cv_force_align_arg_pointer,
38799:                  [AC_TRY_COMPILE([__attribute__ ((__force_align_arg_pointer__)) void test() {}],
38799:                                  [],
38799:                                  ac_cv_force_align_arg_pointer="yes",
38799:                                  ac_cv_force_align_arg_pointer="no")])
38799:   CFLAGS="${CFLAGS_save}"
38799:   if test "$ac_cv_force_align_arg_pointer" = "yes"; then
38799:     HAVE_GCC_ALIGN_ARG_POINTER=1
38799:   else
38799:     HAVE_GCC_ALIGN_ARG_POINTER=
38799:   fi
38799: fi
38799: AC_SUBST(HAVE_GCC_ALIGN_ARG_POINTER)
38799: 
    1: dnl Checks for header files.
    1: dnl ========================================================
    1: AC_HEADER_DIRENT
    1: case "$target_os" in
69206: freebsd*|openbsd*)
    1: # for stuff like -lXshm
    1:     CPPFLAGS="${CPPFLAGS} ${X_CFLAGS}"
    1:     ;;
    1: esac
63478: MOZ_CHECK_HEADERS(sys/byteorder.h compat.h getopt.h)
63478: MOZ_CHECK_HEADERS(sys/bitypes.h memory.h unistd.h)
63478: MOZ_CHECK_HEADERS(gnu/libc-version.h nl_types.h)
63478: MOZ_CHECK_HEADERS(malloc.h)
63478: MOZ_CHECK_HEADERS(X11/XKBlib.h)
63478: MOZ_CHECK_HEADERS(io.h)
    1: 
    1: dnl These are all the places some variant of statfs can be hiding.
63478: MOZ_CHECK_HEADERS(sys/statvfs.h sys/statfs.h sys/vfs.h sys/mount.h)
    1: 
33332: dnl Quota support
63478: MOZ_CHECK_HEADERS(sys/quota.h)
63478: MOZ_CHECK_HEADERS(linux/quota.h)
33332: 
    1: dnl Try for MMX support
    1: dnl NB - later gcc versions require -mmmx for this header to be successfully
    1: dnl included (or another option which implies it, such as -march=pentium-mmx)
63478: MOZ_CHECK_HEADERS(mmintrin.h)
    1: 
    1: dnl Check whether the compiler supports the new-style C++ standard
    1: dnl library headers (i.e. <new>) or needs the old "new.h"
    1: AC_LANG_CPLUSPLUS
    1: NEW_H=new.h
63478: MOZ_CHECK_HEADER(new, [NEW_H=new])
    1: AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
    1: AC_LANG_C
    1: 
 6804: AC_ARG_ENABLE(dtrace,
10431:               [  --enable-dtrace         build with dtrace support if available (default=no)],
 6804:               [enable_dtrace="yes"],)
 6804: if test "x$enable_dtrace" = "xyes"; then
63478:   MOZ_CHECK_HEADER(sys/sdt.h, HAVE_DTRACE=1)
 6804:   if test -n "$HAVE_DTRACE"; then
 6804:       AC_DEFINE(INCLUDE_MOZILLA_DTRACE)
 6804:   else
 9752:       AC_MSG_ERROR([dtrace enabled but sys/sdt.h not found]);
 6804:   fi
 6804: fi
 6804: AC_SUBST(HAVE_DTRACE)
 6804: 
    1: case $target in
    1: *-aix4.3*|*-aix5*)
    1: 	;;
    1: *)
63478: 	MOZ_CHECK_HEADERS(sys/cdefs.h)
    1: 	;;
    1: esac
    1: 
    1: dnl Checks for libraries.
    1: dnl ========================================================
    1: case $target in
    1: *-hpux11.*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_LIB(c_r, gethostbyname_r)
    1: 	;;
    1: esac
    1: 
    1: dnl We don't want to link with libdl even if it's present on OS X, since
63458: dnl it's not used and not part of the default installation. OS/2 has dlfcn
63458: dnl in libc.
    1: dnl We don't want to link against libm or libpthread on Darwin since
    1: dnl they both are just symlinks to libSystem and explicitly linking
    1: dnl against libSystem causes issues when debugging (see bug 299601).
    1: case $target in
    1: *-darwin*)
    1:     ;;
32958: *-os2*)
32958:     ;;
    1: *)
56940:     AC_SEARCH_LIBS(dlopen, dl, 
63478:         MOZ_CHECK_HEADER(dlfcn.h, 
56940:         AC_DEFINE(HAVE_DLOPEN)))
    1:     ;;
    1: esac
 7836: 
 7836: _SAVE_CFLAGS="$CFLAGS"
 7836: CFLAGS="$CFLAGS -D_GNU_SOURCE"
72467: AC_CHECK_FUNCS(dladdr memmem)
 7836: CFLAGS="$_SAVE_CFLAGS"
 7836: 
    1: if test ! "$GNU_CXX"; then
    1: 
    1:     case $target in
    1:     *-aix*)
    1: 	AC_CHECK_LIB(C_r, demangle)
    1: 	;;
    1:      *)
    1: 	AC_CHECK_LIB(C, demangle)
    1: 	;;
    1:      esac
    1: fi
32958: 
32958: dnl OS/2 has socket in libc.
32958: case $target in
32958: *-os2*)
32958:     ;;
32958: *)
    1:     AC_CHECK_LIB(socket, socket)
32958: esac
    1: 
    1: XLDFLAGS="$X_LIBS"
    1: XLIBS="$X_EXTRA_LIBS"
    1: 
    1: dnl ========================================================
    1: dnl Checks for X libraries.
    1: dnl Ordering is important.
    1: dnl Xt is dependent upon SM as of X11R6
    1: dnl ========================================================
    1: if test "$no_x" = "yes"; then
    1:     AC_DEFINE(NO_X11)
    1: else
    1:     AC_DEFINE_UNQUOTED(FUNCPROTO,15)
    1: 	XLIBS="-lX11 $XLIBS"
    1: 	_SAVE_LDFLAGS="$LDFLAGS"
    1: 	LDFLAGS="$XLDFLAGS $LDFLAGS"
    1: 	AC_CHECK_LIB(X11, XDrawLines, [X11_LIBS="-lX11"],
    1: 		[MISSING_X="$MISSING_X -lX11"], $XLIBS)
    1: 	AC_CHECK_LIB(Xext, XextAddDisplay, [XEXT_LIBS="-lXext"],
    1: 		[MISSING_X="$MISSING_X -lXext"], $XLIBS)
    1:      
    1: 	AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt"], [
    1:         unset ac_cv_lib_Xt_XtFree
    1: 	    AC_CHECK_LIB(ICE, IceFlush, [XT_LIBS="-lICE $XT_LIBS"],, $XT_LIBS $XLIBS)
    1: 	    AC_CHECK_LIB(SM, SmcCloseConnection, [XT_LIBS="-lSM $XT_LIBS"],, $XT_LIBS $XLIBS) 
    1:         AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt $XT_LIBS"],
    1: 		    [MISSING_X="$MISSING_X -lXt"], $X_PRE_LIBS $XT_LIBS $XLIBS)
    1:         ])
    1: 
    1:     # AIX needs the motif library linked before libXt to prevent
    1:     # crashes in plugins linked against Motif - Bug #98892
    1:     case "${target_os}" in
    1:     aix*)
    1:         XT_LIBS="-lXm $XT_LIBS"
    1:         ;;
    1:     esac
    1: 
    1:     dnl ========================================================
    1:     dnl = Check for XShm
    1:     dnl ========================================================
    1:     AC_CHECK_LIB(Xext, XShmCreateImage, _HAVE_XSHM_XEXT=1,,
    1:         $XLIBS $XEXT_LIBS)
    1: 
    1:     dnl ========================================================
51226:     dnl = Check for Xss
51226:     dnl ========================================================
63478:     MOZ_CHECK_HEADER(X11/extensions/scrnsaver.h,
51226:         AC_CHECK_LIB(Xss, XScreenSaverQueryInfo,
51226:             [XSS_LIBS="-lXss $XEXT_LIBS $XLIBS"
51226:              AC_DEFINE(HAVE_LIBXSS)],, $XEXT_LIBS $XLIBS))
51226: 
    1: 	LDFLAGS="$_SAVE_LDFLAGS"
    1: 
 4844:     dnl ========================================================
 4844:     dnl = Check for freetype2 and its functionality
 4844:     dnl ========================================================
    1:     AC_CHECK_FT2(6.1.0, [_HAVE_FREETYPE2=1], [_HAVE_FREETYPE2=])
    1: 
 4844:     if test "$_HAVE_FREETYPE2"; then
 4844:     	_SAVE_LIBS="$LIBS"
 4844:     	_SAVE_CFLAGS="$CFLAGS"
 4844:     	LIBS="$LIBS $FT2_LIBS"
 4844:     	CFLAGS="$CFLAGS $FT2_CFLAGS"
 4844: 
 4844:         AC_CACHE_CHECK(for FT_Bitmap_Size.y_ppem,
 4844:             ac_cv_member_FT_Bitmap_Size_y_ppem,
 4844:             [AC_TRY_COMPILE([#include <ft2build.h>
 4844:                              #include FT_FREETYPE_H],
 4844:                             [FT_Bitmap_Size s;
 4844:                              if (sizeof s.y_ppem) return 0;
 4844:                              return 1],
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=yes,
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=no)])
 4844:         if test "$ac_cv_member_FT_Bitmap_Size_y_ppem" = yes; then
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=1
 4844:         else
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=0
 4844:         fi
 4844:         AC_DEFINE_UNQUOTED(HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            $HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            [FT_Bitmap_Size structure includes y_ppem field])
 4844: 
 4844:         AC_CHECK_FUNCS(FT_GlyphSlot_Embolden FT_Load_Sfnt_Table FT_Select_Size)
 4844: 
 4844:     	LIBS="$_SAVE_LIBS"
 4844:     	CFLAGS="$_SAVE_CFLAGS"
 4844:     fi
 4844: 
    1: fi # $no_x
    1: 
    1: AC_SUBST(XCFLAGS)
    1: AC_SUBST(XLDFLAGS)
    1: AC_SUBST(XLIBS)
25500: AC_SUBST(XEXT_LIBS)
    1: AC_SUBST(XT_LIBS)
51226: AC_SUBST(XSS_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = pthread support
    1: dnl = Start by checking whether the system support pthreads
    1: dnl ========================================================
    1: case "$target_os" in
    1: darwin*)
    1:     USE_PTHREADS=1
    1:     ;;
    1: *)
    1:     MOZ_CHECK_PTHREADS(pthreads,
    1:         USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthreads",
    1:         MOZ_CHECK_PTHREADS(pthread,
    1:             USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthread",
    1:             MOZ_CHECK_PTHREADS(c_r,
    1:                 USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lc_r",
    1:                 MOZ_CHECK_PTHREADS(c,
    1:                     USE_PTHREADS=1
    1:                 )
    1:             )
    1:         )
    1:     )
    1:     ;;
    1: esac
    1: 
    1: dnl ========================================================
    1: dnl Check the command line for --with-pthreads 
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(pthreads,
    1: [  --with-pthreads         Force use of system pthread library with NSPR ],
    1: [ if test "$USE_PTHREADS"x = x; then
    1:     AC_MSG_ERROR([ --with-pthreads specified for a system without pthread support ]);
    1: fi],
    1:     USE_PTHREADS=
    1:     _PTHREAD_LDFLAGS=
    1: )
    1: 
    1: dnl ========================================================
    1: dnl Do the platform specific pthread hackery
    1: dnl ========================================================
    1: if test "$USE_PTHREADS"x != x
    1: then
    1: 	dnl
    1: 	dnl See if -pthread is supported.
    1: 	dnl
    1: 	rm -f conftest*
    1: 	ac_cv_have_dash_pthread=no
    1: 	AC_MSG_CHECKING(whether ${CC-cc} accepts -pthread)
    1: 	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	${CC-cc} -pthread -o conftest conftest.c > conftest.out 2>&1
    1: 	if test $? -eq 0; then
47975: 		if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthread`" -a -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			ac_cv_have_dash_pthread=yes
    1: 	        case "$target_os" in
    1: 	        freebsd*)
    1: # Freebsd doesn't use -pthread for compiles, it uses them for linking
    1:                 ;;
    1: 	        *)
    1: 			    CFLAGS="$CFLAGS -pthread"
    1: 			    CXXFLAGS="$CXXFLAGS -pthread"
    1:                 ;;
    1: 	        esac
    1: 		fi
    1: 	fi
    1: 	rm -f conftest*
    1:     AC_MSG_RESULT($ac_cv_have_dash_pthread)
    1: 
    1: 	dnl
    1: 	dnl See if -pthreads is supported.
    1: 	dnl
    1:     ac_cv_have_dash_pthreads=no
    1:     if test "$ac_cv_have_dash_pthread" = "no"; then
    1: 	    AC_MSG_CHECKING(whether ${CC-cc} accepts -pthreads)
    1:     	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	    ${CC-cc} -pthreads -o conftest conftest.c > conftest.out 2>&1
    1:     	if test $? -eq 0; then
47975: 	    	if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthreads`" -a -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			    ac_cv_have_dash_pthreads=yes
    1: 			    CFLAGS="$CFLAGS -pthreads"
    1: 			    CXXFLAGS="$CXXFLAGS -pthreads"
    1: 		    fi
    1: 	    fi
    1: 	    rm -f conftest*
    1:     	AC_MSG_RESULT($ac_cv_have_dash_pthreads)
    1:     fi
    1: 
    1: 	case "$target" in
    1: 	    *-*-freebsd*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1: 				_PTHREAD_LDFLAGS="-pthread"
    1: 			else
    1: 				_PTHREAD_LDFLAGS="-lc_r"
    1: 			fi
    1: 			;;
    1: 
    1: 	    *-*-openbsd*|*-*-bsdi*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1:                 _PTHREAD_LDFLAGS="-pthread"
    1: 			fi
    1: 			;;
    1: 
41013: 	    *-*-linux*|*-*-kfreebsd*-gnu|*-*-gnu*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-*-nto*) 
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-aix4.3*|*-aix5*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-hpux11.*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    alpha*-*-osf*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-*-solaris*) 
    1: 			AC_DEFINE(_REENTRANT)
24783: 			if test "$SOLARIS_SUNPRO_CC"; then
    1: 				CFLAGS="$CFLAGS -mt" 
    1: 				CXXFLAGS="$CXXFLAGS -mt" 
    1: 			fi
    1: 			;;
    1: 	esac
    1:     LDFLAGS="${_PTHREAD_LDFLAGS} ${LDFLAGS}"
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl See if mmap sees writes
    1: dnl For cross compiling, just define it as no, which is a safe default
    1: dnl ========================================================
    1: AC_MSG_CHECKING(whether mmap() sees write()s)
    1: 
    1: changequote(,)
    1: mmap_test_prog='
    1:     #include <stdlib.h>
    1:     #include <unistd.h>
    1:     #include <sys/mman.h>
    1:     #include <sys/types.h>
    1:     #include <sys/stat.h>
    1:     #include <fcntl.h>
    1: 
    1:     char fname[] = "conftest.file";
    1:     char zbuff[1024]; /* Fractional page is probably worst case */
    1: 
    1:     int main() {
    1: 	char *map;
    1: 	int fd;
    1: 	int i;
    1: 	unlink(fname);
    1: 	fd = open(fname, O_RDWR | O_CREAT, 0660);
    1: 	if(fd<0) return 1;
    1: 	unlink(fname);
    1: 	write(fd, zbuff, sizeof(zbuff));
    1: 	lseek(fd, 0, SEEK_SET);
    1: 	map = (char*)mmap(0, sizeof(zbuff), PROT_READ, MAP_SHARED, fd, 0);
    1: 	if(map==(char*)-1) return 2;
    1: 	for(i=0; fname[i]; i++) {
    1: 	    int rc = write(fd, &fname[i], 1);
    1: 	    if(map[i]!=fname[i]) return 4;
    1: 	}
    1: 	return 0;
    1:     }
    1: '
    1: changequote([,])
    1: 
    1: AC_TRY_RUN($mmap_test_prog , result="yes", result="no", result="yes")
    1: 
    1: AC_MSG_RESULT("$result")
    1: 
    1: if test "$result" = "no"; then
    1:     AC_DEFINE(MMAP_MISSES_WRITES)
    1: fi
    1: 
    1: 
    1: dnl Checks for library functions.
    1: dnl ========================================================
    1: AC_PROG_GCC_TRADITIONAL
    1: AC_FUNC_MEMCMP
56763: AC_CHECK_FUNCS(random strerror lchown fchmod snprintf statvfs memmove rint stat64 lstat64 truncate64 statvfs64 setbuf isatty)
56763: AC_CHECK_FUNCS(flockfile getpagesize)
56763: AC_CHECK_FUNCS(localtime_r strtok_r)
    1: 
36932: dnl check for clock_gettime(), the CLOCK_MONOTONIC clock, and -lrt
36932: _SAVE_LDFLAGS=$LDFLAGS
36932: LDFLAGS="$LDFLAGS -lrt"
36932: AC_CACHE_CHECK(for clock_gettime(CLOCK_MONOTONIC) and -lrt,
36932:                ac_cv_have_clock_monotonic,
36932:                [AC_TRY_LINK([#include <time.h>],
36932:                             [ struct timespec ts;
36932:                               clock_gettime(CLOCK_MONOTONIC, &ts); ],
36932:                             ac_cv_have_clock_monotonic=yes,
36932:                             ac_cv_have_clock_monotonic=no)])
36932: LDFLAGS=$_SAVE_LDFLAGS
36932: if test "$ac_cv_have_clock_monotonic" = "yes"; then
36932:     HAVE_CLOCK_MONOTONIC=1
36932:     REALTIME_LIBS=-lrt
36932:     AC_DEFINE(HAVE_CLOCK_MONOTONIC)
36932:     AC_SUBST(HAVE_CLOCK_MONOTONIC)
36932:     AC_SUBST(REALTIME_LIBS)
36932: fi
36932: 
    1: dnl check for wcrtomb/mbrtowc
    1: dnl =======================================================================
58494: if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
    1: AC_LANG_SAVE
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(for wcrtomb,
    1:     ac_cv_have_wcrtomb,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};wcrtomb(0,'f',&ps);],
    1:                  ac_cv_have_wcrtomb="yes",
    1:                  ac_cv_have_wcrtomb="no")])
    1: if test "$ac_cv_have_wcrtomb" = "yes"; then
    1:     AC_DEFINE(HAVE_WCRTOMB)
    1: fi
    1: AC_CACHE_CHECK(for mbrtowc,
    1:     ac_cv_have_mbrtowc,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};mbrtowc(0,0,0,&ps);],
    1:                  ac_cv_have_mbrtowc="yes",
    1:                  ac_cv_have_mbrtowc="no")])
    1: if test "$ac_cv_have_mbrtowc" = "yes"; then
    1:     AC_DEFINE(HAVE_MBRTOWC)
    1: fi
    1: AC_LANG_RESTORE
    1: fi
    1: 
    1: AC_CACHE_CHECK(
    1:     [for res_ninit()],
    1:     ac_cv_func_res_ninit,
    1:     [AC_TRY_LINK([
    1:         #ifdef linux
    1:         #define _BSD_SOURCE 1
    1:         #endif
    1:         #include <resolv.h>
    1:         ],
    1:         [int foo = res_ninit(&_res);],
    1:         [ac_cv_func_res_ninit=yes],
    1:         [ac_cv_func_res_ninit=no])
    1:     ])
    1: 
    1: if test "$ac_cv_func_res_ninit" = "yes"; then
    1:     AC_DEFINE(HAVE_RES_NINIT)
    1: dnl must add the link line we do something as foolish as this... dougt
    1: dnl else
    1: dnl    AC_CHECK_LIB(bind, res_ninit, AC_DEFINE(HAVE_RES_NINIT),
    1: dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
    1: fi
    1: 
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(
    1:     [for gnu_get_libc_version()],
    1:     ac_cv_func_gnu_get_libc_version,
    1:     [AC_TRY_LINK([
    1:         #ifdef HAVE_GNU_LIBC_VERSION_H
    1:         #include <gnu/libc-version.h>
    1:         #endif
    1:         ],
    1:         [const char *glibc_version = gnu_get_libc_version();],
    1:         [ac_cv_func_gnu_get_libc_version=yes],
    1:         [ac_cv_func_gnu_get_libc_version=no] 
    1:         )]
    1:     )
    1: 
    1: if test "$ac_cv_func_gnu_get_libc_version" = "yes"; then
    1:     AC_DEFINE(HAVE_GNU_GET_LIBC_VERSION)
    1: fi
    1: 
    1: case $target_os in
68662:     darwin*|mingw*|os2*)
    1:         ;;
    1:     *)
    1:     
    1: AC_CHECK_LIB(c, iconv, [_ICONV_LIBS="$_ICONV_LIBS"],
    1:     AC_CHECK_LIB(iconv, iconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"],
    1:         AC_CHECK_LIB(iconv, libiconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"])))
    1: _SAVE_LIBS=$LIBS
    1: LIBS="$LIBS $_ICONV_LIBS"
    1: AC_CACHE_CHECK(
    1:     [for iconv()],
    1:     ac_cv_func_iconv,
    1:     [AC_TRY_LINK([
    1:         #include <stdlib.h>
    1:         #include <iconv.h>
    1:         ],
    1:         [
    1:             iconv_t h = iconv_open("", "");
    1:             iconv(h, NULL, NULL, NULL, NULL);
    1:             iconv_close(h);
    1:         ],
    1:         [ac_cv_func_iconv=yes],
    1:         [ac_cv_func_iconv=no] 
    1:         )]
    1:     )
    1: if test "$ac_cv_func_iconv" = "yes"; then
    1:     AC_DEFINE(HAVE_ICONV)
    1:     DYNAMIC_XPCOM_LIBS="$DYNAMIC_XPCOM_LIBS $_ICONV_LIBS"
    1:     LIBXUL_LIBS="$LIBXUL_LIBS $_ICONV_LIBS"
    1:     LIBICONV="$_ICONV_LIBS"
    1:     AC_CACHE_CHECK(
    1:         [for iconv() with const input],
    1:         ac_cv_func_const_iconv,
    1:         [AC_TRY_COMPILE([
    1:             #include <stdlib.h>
    1:             #include <iconv.h>
    1:             ],
    1:             [
    1:                 const char *input = "testing";
    1:                 iconv_t h = iconv_open("", "");
    1:                 iconv(h, &input, NULL, NULL, NULL);
    1:                 iconv_close(h);
    1:             ],
    1:             [ac_cv_func_const_iconv=yes],
    1:             [ac_cv_func_const_iconv=no] 
    1:             )]
    1:         )
    1:     if test "$ac_cv_func_const_iconv" = "yes"; then
    1:         AC_DEFINE(HAVE_ICONV_WITH_CONST_INPUT)
    1:     fi
    1: fi
    1: LIBS=$_SAVE_LIBS
    1: 
    1:     ;;
    1: esac
    1: 
    1: AM_LANGINFO_CODESET
    1: 
    1: AC_LANG_C
    1: 
    1: dnl **********************
    1: dnl *** va_copy checks ***
    1: dnl **********************
    1: dnl we currently check for all three va_copy possibilities, so we get
    1: dnl all results in config.log for bug reports.
    1: AC_MSG_CHECKING(for an implementation of va_copy())
    1: AC_CACHE_VAL(ac_cv_va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_copy=yes,
    1:         ac_cv_va_copy=no,
    1:         ac_cv_va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv_va_copy)
    1: AC_MSG_CHECKING(for an implementation of __va_copy())
    1: AC_CACHE_VAL(ac_cv___va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             __va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv___va_copy=yes,
    1:         ac_cv___va_copy=no,
    1:         ac_cv___va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv___va_copy)
    1: AC_MSG_CHECKING(whether va_lists can be copied by value)
    1: AC_CACHE_VAL(ac_cv_va_val_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             args2 = args1;
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_val_copy=yes,
    1:         ac_cv_va_val_copy=no,
    1:         ac_cv_va_val_copy=yes
    1:     )
    1: ])
    1: if test "x$ac_cv_va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: elif test "x$ac_cv___va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, __va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: fi
    1: 
    1: if test "x$ac_cv_va_val_copy" = "xno"; then
    1:    AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)
    1: fi
    1: AC_MSG_RESULT($ac_cv_va_val_copy)
    1: 
    1: dnl Check for dll-challenged libc's.
    1: dnl This check is apparently only needed for Linux.
    1: case "$target" in
    1: 	*-linux*)
    1: 	    dnl ===================================================================
    1: 	    _curdir=`pwd`
    1: 	    export _curdir
    1: 	    rm -rf conftest* _conftest
    1: 	    mkdir _conftest
    1: 	    cat >> conftest.C <<\EOF
    1: #include <stdio.h>
    1: #include <link.h>
    1: #include <dlfcn.h>
    1: #ifdef _dl_loaded
    1: void __dump_link_map(void) {
    1:   struct link_map *map = _dl_loaded;
    1:   while (NULL != map) {printf("0x%08x %s\n", map->l_addr, map->l_name); map = map->l_next;}
    1: }
    1: int main() {
    1:   dlopen("./conftest1.so",RTLD_LAZY);
    1:   dlopen("./../_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/../_conftest/conftest1.so",RTLD_LAZY);
    1:   __dump_link_map();
    1: }
    1: #else
    1: /* _dl_loaded isn't defined, so this should be either a libc5 (glibc1) system, or a glibc2 system that doesn't have the multiple load bug (i.e., RH6.0).*/
    1: int main() { printf("./conftest1.so\n"); }
    1: #endif
    1: EOF
    1: 
    1: 	    $PERL -p -i -e "s/CURDIR/\$ENV{_curdir}/g;" conftest.C
    1: 
    1: 	    cat >> conftest1.C <<\EOF
    1: #include <stdio.h>
    1: void foo(void) {printf("foo in dll called\n");}
    1: EOF
    1: 	    ${CXX-g++} -fPIC -c -g conftest1.C
    1: 	    ${CXX-g++} -shared -Wl,-h -Wl,conftest1.so -o conftest1.so conftest1.o
    1: 	    ${CXX-g++} -g conftest.C -o conftest -ldl
    1: 	    cp -f conftest1.so conftest _conftest
    1: 	    cd _conftest
    1: 	    if test `./conftest | grep conftest1.so | wc -l` -gt 1
    1: 	    then
    1: 		echo
    1: 		echo "*** Your libc has a bug that can result in loading the same dynamic"
    1: 		echo "*** library multiple times.  This bug is known to be fixed in glibc-2.0.7-32"
    1: 		echo "*** or later.  However, if you choose not to upgrade, the only effect"
    1: 		echo "*** will be excessive memory usage at runtime."
    1: 		echo
    1: 	    fi
    1: 	    cd ${_curdir}
    1: 	    rm -rf conftest* _conftest
    1: 	    dnl ===================================================================
    1: 	    ;;
    1: esac
    1: 
    1: dnl ===================================================================
    1: dnl ========================================================
    1: dnl Put your C++ language/feature checks below
    1: dnl ========================================================
    1: AC_LANG_CPLUSPLUS
    1: 
41043: ARM_ABI_PREFIX=
    1: HAVE_GCC3_ABI=
    1: if test "$GNU_CC"; then
41043:   if test "$CPU_ARCH" = "arm" ; then
41043:     AC_CACHE_CHECK(for ARM EABI,
41043:         ac_cv_gcc_arm_eabi,
41043:         [AC_TRY_COMPILE([],
41043:                         [
41043: #if defined(__ARM_EABI__)
41043:   return 0;
41043: #else
41043: #error Not ARM EABI.
41043: #endif
41043:                         ],
41043:                         ac_cv_gcc_arm_eabi="yes",
41043:                         ac_cv_gcc_arm_eabi="no")])
41043:     if test "$ac_cv_gcc_arm_eabi" = "yes"; then
41043:         HAVE_ARM_EABI=1
41043:         ARM_ABI_PREFIX=eabi-
41043:     else
41043:         ARM_ABI_PREFIX=oabi-
41043:     fi
41043:   fi
41043: 
    1:   AC_CACHE_CHECK(for gcc 3.0 ABI,
    1:       ac_cv_gcc_three_abi,
    1:       [AC_TRY_COMPILE([],
    1:                       [
    1: #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100 /* G++ V3 ABI */
    1:   return 0;
    1: #else
    1: #error Not gcc3.
    1: #endif
    1:                       ],
    1:                       ac_cv_gcc_three_abi="yes",
    1:                       ac_cv_gcc_three_abi="no")])
    1:   if test "$ac_cv_gcc_three_abi" = "yes"; then
41043:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-${ARM_ABI_PREFIX}gcc3}"
    1:       HAVE_GCC3_ABI=1
    1:   else
41043:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-${ARM_ABI_PREFIX}gcc2}"
    1:   fi
    1: fi
    1: AC_SUBST(HAVE_GCC3_ABI)
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ \"explicit\" keyword,
    1:                ac_cv_cpp_explicit,
    1:                [AC_TRY_COMPILE(class X {
    1:                                public: explicit X(int i) : i_(i) {}
    1:                                private: int i_;
    1:                                };,
    1:                                X x(3);,
    1:                                ac_cv_cpp_explicit=yes,
    1:                                ac_cv_cpp_explicit=no)])
    1: if test "$ac_cv_cpp_explicit" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_EXPLICIT)
    1: fi
    1: 
    1: AC_CACHE_CHECK(for C++ \"typename\" keyword,
    1:                ac_cv_cpp_typename,
    1:                [AC_TRY_COMPILE(class param {
    1:                                public:
    1:                                    typedef unsigned long num_type;
    1:                                };
    1: 
    1:                                template <class T> class tplt {
    1:                                public:
    1:                                    typedef typename T::num_type t_num_type;
    1:                                    t_num_type foo(typename T::num_type num) {
    1:                                        return num;
    1:                                    }
    1:                                };,
    1:                                tplt<param> A;
    1:                                A.foo(0);,
    1:                                ac_cv_cpp_typename=yes,
    1:                                ac_cv_cpp_typename=no)])
    1: if test "$ac_cv_cpp_typename" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_TYPENAME)
    1: fi
    1: 
    1: dnl Check for support of modern template specialization syntax
    1: dnl Test code and requirement from scc@netscape.com.
    1: dnl Autoconf cut-and-paste job by waterson@netscape.com
    1: AC_CACHE_CHECK(for modern C++ template specialization syntax support,
    1:                ac_cv_cpp_modern_specialize_template_syntax,
    1:                [AC_TRY_COMPILE(template <class T> struct X { int a; };
    1:                                class Y {};
    1:                                template <> struct X<Y> { double a; };,
    1:                                X<int> int_x;
    1:                                X<Y> y_x;,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=yes,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=no)])
    1: if test "$ac_cv_cpp_modern_specialize_template_syntax" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX)
    1: fi
    1: 
    1: 
    1: dnl Some compilers support only full specialization, and some don't.
    1: AC_CACHE_CHECK(whether partial template specialization works,
    1:                ac_cv_cpp_partial_specialization,
    1:                [AC_TRY_COMPILE(template <class T> class Foo {};
    1:                                template <class T> class Foo<T*> {};,
    1:                                return 0;,
    1:                                ac_cv_cpp_partial_specialization=yes,
    1:                                ac_cv_cpp_partial_specialization=no)])
    1: if test "$ac_cv_cpp_partial_specialization" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_PARTIAL_SPECIALIZATION)
    1: fi
    1: 
    1: dnl Some compilers have limited support for operators with templates;
    1: dnl specifically, it is necessary to define derived operators when a base
    1: dnl class's operator declaration should suffice.
    1: AC_CACHE_CHECK(whether operators must be re-defined for templates derived from templates,
    1:                ac_cv_need_derived_template_operators,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T>
    1:                                 Base<T> operator+(const Base<T>& lhs, const Base<T>& rhs) { return lhs; }
    1:                                 template <class T> class Derived : public Base<T> { };],
    1:                                [Derived<char> a, b;
    1:                                 Base<char> c = a + b;
    1:                                 return 0;],
    1:                                ac_cv_need_derived_template_operators=no,
    1:                                ac_cv_need_derived_template_operators=yes)])
    1: if test "$ac_cv_need_derived_template_operators" = yes ; then
    1:   AC_DEFINE(NEED_CPP_DERIVED_TEMPLATE_OPERATORS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble detecting that a template class
    1: dnl that derives from another template is actually an instance
    1: dnl of the base class. This test checks for that.
    1: AC_CACHE_CHECK(whether we need to cast a derived template to pass as its base class,
    1:                ac_cv_need_cpp_template_cast_to_base,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T> class Derived : public Base<T> { };
    1:                                 template <class T> int foo(const Base<T>&) { return 0; }],
    1:                                [Derived<char> bar; return foo(bar);],
    1:                                ac_cv_need_cpp_template_cast_to_base=no,
    1:                                ac_cv_need_cpp_template_cast_to_base=yes)])
    1: if test "$ac_cv_need_cpp_template_cast_to_base" = yes ; then
    1:   AC_DEFINE(NEED_CPP_TEMPLATE_CAST_TO_BASE)
    1: fi
    1: 
    1: dnl Some compilers have trouble resolving the ambiguity between two
    1: dnl functions whose arguments differ only by cv-qualifications.
    1: AC_CACHE_CHECK(whether the compiler can resolve const ambiguities for templates,
    1:                ac_cv_can_resolve_const_ambiguity,
    1:                [AC_TRY_COMPILE([
    1:                                 template <class T> class ptrClass {
    1:                                   public: T* ptr;
    1:                                 };
    1: 
    1:                                 template <class T> T* a(ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1: 
    1:                                 template <class T>
    1:                                 const T* a(const ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1:                                ],
    1:                                [ ptrClass<int> i;
    1:                                  a(&i); ],
    1:                                ac_cv_can_resolve_const_ambiguity=yes,
    1:                                ac_cv_can_resolve_const_ambiguity=no)])
    1: if test "$ac_cv_can_resolve_const_ambiguity" = no ; then
    1:   AC_DEFINE(CANT_RESOLVE_CPP_CONST_AMBIGUITY)
    1: fi
    1: 
    1: dnl
    1: dnl We don't do exceptions on unix.  The only reason this used to be here
    1: dnl is that mozilla/xpcom/tests/TestCOMPtr.cpp has a test which uses 
    1: dnl exceptions.  But, we turn exceptions off by default and this test breaks.
    1: dnl So im commenting this out until someone writes some artificial 
    1: dnl intelligence to detect not only if the compiler has exceptions, but if 
    1: dnl they are enabled as well.
    1: dnl 
    1: dnl AC_CACHE_CHECK(for C++ \"exceptions\",
    1: dnl                ac_cv_cpp_exceptions,
    1: dnl                [AC_TRY_COMPILE(class X { public: X() {} };
    1: dnl                                static void F() { throw X(); },
    1: dnl                                try { F(); } catch(X & e) { },
    1: dnl                                ac_cv_cpp_exceptions=yes,
    1: dnl                                ac_cv_cpp_exceptions=no)])
    1: dnl if test $ac_cv_cpp_exceptions = yes ; then
    1: dnl    AC_DEFINE(HAVE_CPP_EXCEPTIONS)
    1: dnl fi
    1: 
    1: dnl Some compilers have marginal |using| support; for example, gcc-2.7.2.3
    1: dnl supports it well enough to allow us to use it to change access, but not
    1: dnl to resolve ambiguity. The next two tests determine how well the |using|
    1: dnl keyword is supported.
    1: dnl
    1: dnl Check to see if we can change access with |using|.  Test both a
    1: dnl legal and an illegal example.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword can change access,
    1:                ac_cv_cpp_access_changing_using2,
    1:                [AC_TRY_COMPILE(
    1:                    class A { protected: int foo() { return 0; } };
    1:                    class B : public A { public: using A::foo; };,
    1:                    B b; return b.foo();,
    1:                    [AC_TRY_COMPILE(
    1:                        class A { public: int foo() { return 1; } };
    1:                        class B : public A { private: using A::foo; };,
    1:                        B b; return b.foo();,
    1:                        ac_cv_cpp_access_changing_using2=no,
    1:                        ac_cv_cpp_access_changing_using2=yes)],
    1:                    ac_cv_cpp_access_changing_using2=no)])
    1: if test "$ac_cv_cpp_access_changing_using2" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_ACCESS_CHANGING_USING)
    1: fi
    1: 
    1: dnl Check to see if we can resolve ambiguity with |using|.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword resolves ambiguity,
    1:                ac_cv_cpp_ambiguity_resolving_using,
    1:                [AC_TRY_COMPILE(class X { 
    1:                                  public: int go(const X&) {return 3;}
    1:                                          int jo(const X&) {return 3;}
    1:                                };
    1:                                class Y : public X {
    1:                                  public:  int go(int) {return 2;}
    1:                                           int jo(int) {return 2;}
    1:                                           using X::jo;
    1:                                  private: using X::go;
    1:                                };,
    1:                                X x; Y y; y.jo(x);,
    1:                                ac_cv_cpp_ambiguity_resolving_using=yes,
    1:                                ac_cv_cpp_ambiguity_resolving_using=no)])
    1: if test "$ac_cv_cpp_ambiguity_resolving_using" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_AMBIGUITY_RESOLVING_USING)
    1: fi
    1: 
    1: dnl Check to see if the |std| namespace is supported. If so, we'll want
    1: dnl to qualify any standard library calls with "std::" to ensure that
    1: dnl those functions can be resolved.
    1: AC_CACHE_CHECK(for \"std::\" namespace,
    1:                ac_cv_cpp_namespace_std,
    1:                [AC_TRY_COMPILE([#include <algorithm>],
    1:                                [return std::min(0, 1);],
    1:                                ac_cv_cpp_namespace_std=yes,
    1:                                ac_cv_cpp_namespace_std=no)])
    1: if test "$ac_cv_cpp_namespace_std" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NAMESPACE_STD)
    1: fi
    1: 
    1: dnl Older compilers are overly ambitious with respect to using the standard
    1: dnl template library's |operator!=()| when |operator==()| is defined. In
    1: dnl which case, defining |operator!=()| in addition to |operator==()| causes
    1: dnl ambiguity at compile-time. This test checks for that case.
    1: AC_CACHE_CHECK(whether standard template operator!=() is ambiguous,
    1:                ac_cv_cpp_unambiguous_std_notequal,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 struct T1 {};
    1:                                 int operator==(const T1&, const T1&) { return 0; }
    1:                                 int operator!=(const T1&, const T1&) { return 0; }],
    1:                                [T1 a,b; return a != b;],
    1:                                ac_cv_cpp_unambiguous_std_notequal=unambiguous,
    1:                                ac_cv_cpp_unambiguous_std_notequal=ambiguous)])
    1: if test "$ac_cv_cpp_unambiguous_std_notequal" = unambiguous ; then
    1:   AC_DEFINE(HAVE_CPP_UNAMBIGUOUS_STD_NOTEQUAL)
    1: fi
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ reinterpret_cast,
    1:                ac_cv_cpp_reinterpret_cast,
    1:                [AC_TRY_COMPILE(struct X { int i; };
    1:                                struct Y { int i; };,
    1:                                X x; X*const z = &x;Y*y = reinterpret_cast<Y*>(z);,
    1:                                ac_cv_cpp_reinterpret_cast=yes,
    1:                                ac_cv_cpp_reinterpret_cast=no)])
    1: if test "$ac_cv_cpp_reinterpret_cast" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NEW_CASTS)
    1: fi
    1: 
    1: dnl See if a dynamic_cast to void* gives the most derived object.
    1: AC_CACHE_CHECK(for C++ dynamic_cast to void*,
    1:                ac_cv_cpp_dynamic_cast_void_ptr,
    1:                [AC_TRY_RUN([class X { int i; public: virtual ~X() { } };
    1:                             class Y { int j; public: virtual ~Y() { } };
    1:                             class Z : public X, public Y { int k; };
    1: 
    1:                             int main() {
    1:                                  Z mdo;
    1:                                  X *subx = (X*)&mdo;
    1:                                  Y *suby = (Y*)&mdo;
    1:                                  return !((((void*)&mdo != (void*)subx) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(subx))) ||
    1:                                           (((void*)&mdo != (void*)suby) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(suby))));
    1:                             }],
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=yes,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no)])
    1: if test "$ac_cv_cpp_dynamic_cast_void_ptr" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR)
    1: fi
    1: 
    1: 
    1: dnl note that this one is reversed - if the test fails, then
    1: dnl we require implementations of unused virtual methods. Which
    1: dnl really blows because it means we'll have useless vtable
    1: dnl bloat.
    1: AC_CACHE_CHECK(whether C++ requires implementation of unused virtual methods,
    1:                ac_cv_cpp_unused_required,
    1:                [AC_TRY_LINK(class X {private: virtual void never_called();};,
    1:                                X x;,
    1:                                ac_cv_cpp_unused_required=no,
    1:                                ac_cv_cpp_unused_required=yes)])
    1: if test "$ac_cv_cpp_unused_required" = yes ; then
    1:    AC_DEFINE(NEED_CPP_UNUSED_IMPLEMENTATIONS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble comparing a constant reference to a templatized
    1: dnl class to zero, and require an explicit operator==() to be defined that takes
    1: dnl an int. This test separates the strong from the weak.
    1: 
    1: AC_CACHE_CHECK(for trouble comparing to zero near std::operator!=(),
    1:                ac_cv_trouble_comparing_to_zero,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 template <class T> class Foo {};
    1:                                 class T2;
    1:                                 template <class T> int operator==(const T2*, const T&) { return 0; }
    1:                                 template <class T> int operator!=(const T2*, const T&) { return 0; }],
    1:                                [Foo<int> f; return (0 != f);],
    1:                                ac_cv_trouble_comparing_to_zero=no,
    1:                                ac_cv_trouble_comparing_to_zero=yes)])
    1: if test "$ac_cv_trouble_comparing_to_zero" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_TROUBLE_COMPARING_TO_ZERO)
    1: fi
    1: 
34907: # try harder, when checking for __thread support, see bug 521750 comment #33 and below
34907: _SAVE_LDFLAGS=$LDFLAGS
34907: LDFLAGS="$LDFLAGS $DSO_PIC_CFLAGS $DSO_LDOPTS"
34250: AC_CACHE_CHECK(for __thread keyword for TLS variables,
34250:                ac_cv_thread_keyword,
34418:                [AC_TRY_LINK([__thread bool tlsIsMainThread = false;],
34250:                             [return tlsIsMainThread;],
34250:                             ac_cv_thread_keyword=yes,
34250:                             ac_cv_thread_keyword=no)])
34907: LDFLAGS=$_SAVE_LDFLAGS
34250: if test "$ac_cv_thread_keyword" = yes; then
41016:   # mips builds fail with TLS variables because of a binutils bug.
41016:   # See bug 528687
42466:   case "${target}" in
42466:     mips*-*)
42466:       :
42466:       ;;
70914:     *-android*|*-linuxandroid*)
41016:       :
41016:       ;;
41016:     *)
34250:       AC_DEFINE(HAVE_THREAD_TLS_KEYWORD)
41016:       ;;
41016:   esac
34250: fi
    1: 
38924: dnl Check for the existence of various allocation headers/functions
38924: 
38924: MALLOC_H=
63478: MOZ_CHECK_HEADER(malloc.h,        [MALLOC_H=malloc.h])
38924: if test "$MALLOC_H" = ""; then
63478:   MOZ_CHECK_HEADER(malloc/malloc.h, [MALLOC_H=malloc/malloc.h])
38924:   if test "$MALLOC_H" = ""; then
63478:     MOZ_CHECK_HEADER(sys/malloc.h,    [MALLOC_H=sys/malloc.h])
38924:   fi
38924: fi
38924: if test "$MALLOC_H" != ""; then
38924:    AC_DEFINE_UNQUOTED(MALLOC_H, <$MALLOC_H>)
38924: fi
38924: 
38924: MOZ_ALLOCATING_FUNCS="strndup posix_memalign memalign valloc"
38924: AC_CHECK_FUNCS(strndup posix_memalign memalign valloc)
38924: 
38924: dnl See if compiler supports some gcc-style attributes
38924: 
38924: AC_CACHE_CHECK(for __attribute__((always_inline)),
38924:                ac_cv_attribute_always_inline,
71277:                [AC_TRY_COMPILE([inline void f(void) __attribute__((always_inline));],
71277:                                [],
38924:                                ac_cv_attribute_always_inline=yes,
38924:                                ac_cv_attribute_always_inline=no)])
38924: 
38924: AC_CACHE_CHECK(for __attribute__((malloc)),
38924:                ac_cv_attribute_malloc,
71277:                [AC_TRY_COMPILE([void* f(int) __attribute__((malloc));],
71277:                                [],
38924:                                ac_cv_attribute_malloc=yes,
38924:                                ac_cv_attribute_malloc=no)])
38924: 
38924: AC_CACHE_CHECK(for __attribute__((warn_unused_result)),
38924:                ac_cv_attribute_warn_unused,
71277:                [AC_TRY_COMPILE([int f(void) __attribute__((warn_unused_result));],
71277:                                [],
38924:                                ac_cv_attribute_warn_unused=yes,
38924:                                ac_cv_attribute_warn_unused=no)])
38924: 
38924: AC_CACHE_CHECK(for __attribute__((noreturn)),
38924:                ac_cv_attribute_noreturn,
71277:                [AC_TRY_COMPILE([void f(void) __attribute__((noreturn));],
71277:                                [],
38924:                                ac_cv_attribute_noreturn=yes,
38924:                                ac_cv_attribute_noreturn=no)])
38924:  
    1: dnl End of C++ language/feature checks
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =  Internationalization checks
    1: dnl ========================================================
    1: dnl
    1: dnl Internationalization and Locale support is different
    1: dnl on various UNIX platforms.  Checks for specific i18n
    1: dnl features go here.
    1: 
    1: dnl check for LC_MESSAGES
    1: AC_CACHE_CHECK(for LC_MESSAGES,
    1: 		ac_cv_i18n_lc_messages,
    1: 		[AC_TRY_COMPILE([#include <locale.h>],
    1: 				[int category = LC_MESSAGES;],
    1: 				ac_cv_i18n_lc_messages=yes,
    1: 				ac_cv_i18n_lc_messages=no)])
    1: if test "$ac_cv_i18n_lc_messages" = yes; then
    1:    AC_DEFINE(HAVE_I18N_LC_MESSAGES)
    1: fi
    1: 
42807: AC_HAVE_FUNCS(localeconv)
69923: fi # ! SKIP_COMPILER_CHECKS
    1: 
    1: TARGET_XPCOM_ABI=
    1: if test -n "${CPU_ARCH}" -a -n "${TARGET_COMPILER_ABI}"; then
    1:     TARGET_XPCOM_ABI="${CPU_ARCH}-${TARGET_COMPILER_ABI}"
    1: fi
    1: 
    1: dnl Mozilla specific options
    1: dnl ========================================================
    1: dnl The macros used for command line options
    1: dnl are defined in build/autoconf/altoptions.m4.
    1: 
38924: dnl If the compiler supports these attributes, define them as
38924: dnl convenience macros.
38924: if test "$ac_cv_attribute_always_inline" = yes ; then
38924:   AC_DEFINE(NS_ALWAYS_INLINE, [__attribute__((always_inline))])
38924: else
38924:   AC_DEFINE(NS_ALWAYS_INLINE,)
38924: fi
38924: 
38924: if test "$ac_cv_attribute_malloc" = yes ; then
38924:   AC_DEFINE(NS_ATTR_MALLOC, [__attribute__((malloc))])
38924: else
38924:   AC_DEFINE(NS_ATTR_MALLOC,)
38924: fi
38924: 
38924: if test "$ac_cv_attribute_warn_unused" = yes ; then
38924:   AC_DEFINE(NS_WARN_UNUSED_RESULT, [__attribute__((warn_unused_result))])
38924: else
38924:   AC_DEFINE(NS_WARN_UNUSED_RESULT,)
38924: fi
38924: 
38924: if test "$ac_cv_attribute_noreturn" = yes ; then
38924:   AC_DEFINE(NS_NORETURN, [__attribute__((noreturn))])
38924: else
38924:   AC_DEFINE(NS_NORETURN,)
38924: fi
38924: 
38924: dnl We can't run TRY_COMPILE tests on Windows, so hard-code some
38924: dnl features that Windows actually does support.
38924: 
38924: if test -n "$SKIP_COMPILER_CHECKS"; then
38924:    dnl Windows has malloc.h
38924:    AC_DEFINE(MALLOC_H, [<malloc.h>])
38924:    AC_DEFINE(HAVE_FORCEINLINE)
42807:    AC_DEFINE(HAVE_LOCALECONV)
38924: fi # SKIP_COMPILER_CHECKS
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Check for external package dependencies
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(External Packages)
    1: 
    1: MOZ_ARG_WITH_STRING(libxul-sdk,
    1: [  --with-libxul-sdk=PFX   Use the libXUL SDK at <PFX>],
    1:   LIBXUL_SDK_DIR=$withval)
    1: 
    1: if test "$LIBXUL_SDK_DIR" = "yes"; then
    1:     AC_MSG_ERROR([--with-libxul-sdk must specify a path])
    1: elif test -n "$LIBXUL_SDK_DIR" -a "$LIBXUL_SDK_DIR" != "no"; then
    1:     LIBXUL_SDK=`cd "$LIBXUL_SDK_DIR" && pwd`
    1: 
28584:     if test ! -f "$LIBXUL_SDK/include/xpcom-config.h"; then
28584:         AC_MSG_ERROR([$LIBXUL_SDK/include/xpcom-config.h doesn't exist])
    1:     fi
    1: 
    1: fi
    1: AC_SUBST(LIBXUL_SDK)
    1: 
18864: if test -n "$LIBXUL_SDK"; then
18864:     LIBXUL_DIST="$LIBXUL_SDK"
18864: else
18864:     LIBXUL_DIST="$MOZ_BUILD_ROOT/dist"
18864: fi
18864: AC_SUBST(LIBXUL_DIST)
18864: 
24320: SYSTEM_LIBXUL=
24320: 
24320: MOZ_ARG_WITH_BOOL(system-libxul,
24320: [  --with-system-libxul    Use system installed libxul SDK],
24320:     SYSTEM_LIBXUL=1)
24320: 
    1: dnl ========================================================
    1: dnl = If NSPR was not detected in the system, 
    1: dnl = use the one in the source tree (mozilla/nsprpub)
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(system-nspr,
    1: [  --with-system-nspr      Use system installed NSPR],
    1:     _USE_SYSTEM_NSPR=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSPR"; then
69424:     AM_PATH_NSPR(4.8.8, [MOZ_NATIVE_NSPR=1], [AC_MSG_ERROR([your don't have NSPR installed or your version is too old])])
    1: fi
    1: 
 2496: if test -n "$MOZ_NATIVE_NSPR"; then
 2496:     _SAVE_CFLAGS=$CFLAGS
 2496:     CFLAGS="$CFLAGS $NSPR_CFLAGS"
42420:     AC_TRY_COMPILE([#include "prtypes.h"],
 2496:                 [#ifndef PR_STATIC_ASSERT
42420:                  #error PR_STATIC_ASSERT not defined or requires including prlog.h
 2496:                  #endif],
 2496:                 [MOZ_NATIVE_NSPR=1],
42420:                 AC_MSG_ERROR([system NSPR does not support PR_STATIC_ASSERT or including prtypes.h does not provide it]))
 2496:     CFLAGS=$_SAVE_CFLAGS
 2496: else
68662:     if test "$OS_ARCH" = "WINNT"; then
18865:         NSPR_CFLAGS="-I${LIBXUL_DIST}/include/nspr"
    1:         if test -n "$GNU_CC"; then
18865:             NSPR_LIBS="-L${LIBXUL_DIST}/lib -lnspr${NSPR_VERSION} -lplc${NSPR_VERSION} -lplds${NSPR_VERSION}"
18865:         else
18865:             NSPR_LIBS="${LIBXUL_DIST}/lib/nspr${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plc${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plds${NSPR_VERSION}.lib "
18865:         fi
18865:     else
60682:         NSPR_CFLAGS='`$(LIBXUL_DIST)/sdk/bin/nspr-config --prefix='${LIBXUL_DIST}' --includedir='${LIBXUL_DIST}'/include/nspr --cflags`'
60682:         NSPR_LIBS='`$(LIBXUL_DIST)/sdk/bin/nspr-config --prefix='${LIBXUL_DIST}' --libdir='${LIBXUL_DIST}'/lib --libs`'
    1:     fi
    1: fi
    1: 
41018: dnl system libevent Support
41018: dnl ========================================================
41018: MOZ_ARG_WITH_STRING(system-libevent,
41018: [  --with-system-libevent=[PFX]
41018:                           Use system libevent [installed at prefix PFX]],
41018:     LIBEVENT_DIR=$withval)
41018: 
41018: _SAVE_CFLAGS=$CFLAGS
41018: _SAVE_LDFLAGS=$LDFLAGS
41018: _SAVE_LIBS=$LIBS
41018: if test -z "$LIBEVENT_DIR" -o "$LIBEVENT_DIR" = no; then
41018:     MOZ_NATIVE_LIBEVENT=
41018: else
41018:     if test "${LIBEVENT_DIR}" = "yes"; then
41018:         LIBEVENT_DIR=/usr
41018:     fi
41018:     CFLAGS="-I${LIBEVENT_DIR}/include $CFLAGS"
41018:     LDFLAGS="-L${LIBEVENT_DIR}/lib $LDFLAGS"
63478:     MOZ_CHECK_HEADER(event.h,
41018:         [if test ! -f "${LIBEVENT_DIR}/include/event.h"; then
41018:              AC_MSG_ERROR([event.h found, but is not in ${LIBEVENT_DIR}/include])
41018:          fi],
41018:         AC_MSG_ERROR([--with-system-libevent requested but event.h not found]))
41018:     AC_CHECK_LIB(event, event_init,
41018:                  [MOZ_NATIVE_LIBEVENT=1
41018:                   MOZ_LIBEVENT_INCLUDES="${LIBEVENT_DIR}/include"
41018:                   MOZ_LIBEVENT_LIBS="-L${LIBEVENT_DIR}/lib -levent"],
41018:                  [MOZ_NATIVE_LIBEVENT= MOZ_LIBEVENT_INCLUDES= MOZ_LIBEVENT_LIBS=])
41018: fi
41018: CFLAGS=$_SAVE_CFLAGS
41018: LDFLAGS=$_SAVE_LDFLAGS
41018: LIBS=$_SAVE_LIBS
41018: 
41018: AC_SUBST(MOZ_NATIVE_LIBEVENT)
41018: AC_SUBST(MOZ_LIBEVENT_INCLUDES)
41018: AC_SUBST(MOZ_LIBEVENT_LIBS)
41018: 
    1: dnl ========================================================
    1: dnl = If NSS was not detected in the system, 
    1: dnl = use the one in the source tree (mozilla/security/nss)
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_WITH_BOOL(system-nss,
    1: [  --with-system-nss       Use system installed NSS],
    1:     _USE_SYSTEM_NSS=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSS"; then
69424:     AM_PATH_NSS(3.12.10, [MOZ_NATIVE_NSS=1], [AC_MSG_ERROR([you don't have NSS installed or your version is too old])])
    1: fi
    1: 
    1: if test -n "$MOZ_NATIVE_NSS"; then
    1:    NSS_LIBS="$NSS_LIBS -lcrmf"
    1: else
 4233:    NSS_CFLAGS='-I$(LIBXUL_DIST)/include/nss'
12926:    NSS_DEP_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)smime$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)ssl$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nss$NSS_VERSION\$(DLL_SUFFIX) \
32255:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nssutil$NSS_VERSION\$(DLL_SUFFIX)"
    1: 
68662:    if test -z "$GNU_CC" -a "$OS_ARCH" = "WINNT" -o "$OS_ARCH" = "OS2"; then
12926:        NSS_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)smime$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)ssl$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nss$NSS_VERSION.\$(LIB_SUFFIX) \
37933:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nssutil$NSS_VERSION.\$(LIB_SUFFIX)"
32255:    else
32255:        NSS_LIBS='$(LIBS_DIR)'" -lcrmf -lsmime$NSS_VERSION -lssl$NSS_VERSION -lnss$NSS_VERSION -lnssutil$NSS_VERSION"
    1:    fi
    1: fi
    1: 
52191: dnl ======================
52191: dnl Detect yasm
52191: dnl ======================
52191: 
52191: AC_MSG_CHECKING([for YASM assembler])
52191: AC_CHECK_PROGS(YASM, yasm, "")
52191: 
52191: if test -n "$YASM"; then
52191:   dnl Pull out yasm's version string
52191:   changequote(,)
62616:   _YASM_VER_FILTER='s|.* \([0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\).*|\1|p'
52191:   changequote([,])
52191: 
56975:   YASM_VERSION=`yasm --version | sed -ne "$_YASM_VER_FILTER"`
52191:   _YASM_MAJOR_VERSION=`echo ${YASM_VERSION} | $AWK -F\. '{ print $1 }'`
52191:   _YASM_MINOR_VERSION=`echo ${YASM_VERSION} | $AWK -F\. '{ print $2 }'`
52191:   _YASM_RELEASE=`      echo ${YASM_VERSION} | $AWK -F\. '{ print $3 }'`
52191:   _YASM_BUILD=`        echo ${YASM_VERSION} | $AWK -F\. '{ print $4 }'`
52191: fi
52191: 
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1: dnl system JPEG support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-jpeg,
    1: [  --with-system-jpeg[=PFX]
    1:                           Use system libjpeg [installed at prefix PFX]],
    1:     JPEG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${JPEG_DIR}" -a "${JPEG_DIR}" != "yes"; then
    1:     CFLAGS="-I${JPEG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${JPEG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$JPEG_DIR" -o "$JPEG_DIR" = no; then
    1:     SYSTEM_JPEG=
    1: else
    1:     AC_CHECK_LIB(jpeg, jpeg_destroy_compress, [SYSTEM_JPEG=1 JPEG_LIBS="-ljpeg $JPEG_LIBS"], SYSTEM_JPEG=, $JPEG_LIBS)
    1: fi
    1: 
    1: if test "$SYSTEM_JPEG" = 1; then
    1:     LIBS="$JPEG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <jpeglib.h> ],
   25:                    [ #if JPEG_LIB_VERSION < $MOZJPEG
   25:                      #error "Insufficient JPEG library version ($MOZJPEG required)."
   25:                      #endif ],
   25:                    SYSTEM_JPEG=1,
   25:                    [SYSTEM_JPEG= JPEG_CFLAGS= JPEG_LIBS=]) 
    1: fi
69486: 
69486: MOZ_LIBJPEG_TURBO=
69486: if test -z "$SYSTEM_JPEG"; then
69486:     MOZ_LIBJPEG_TURBO=1
69486: fi 
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test -n "${JPEG_DIR}" -a -d "${JPEG_DIR}" -a "$SYSTEM_JPEG" = 1; then
    1:     JPEG_CFLAGS="-I${JPEG_DIR}/include"
    1:     JPEG_LIBS="-L${JPEG_DIR}/lib ${JPEG_LIBS}"
    1: fi
    1: 
    1: dnl system ZLIB support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-zlib,
    1: [  --with-system-zlib[=PFX]
    1:                           Use system libz [installed at prefix PFX]],
    1:     ZLIB_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${ZLIB_DIR}" -a "${ZLIB_DIR}" != "yes"; then
    1:     CFLAGS="-I${ZLIB_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${ZLIB_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$ZLIB_DIR" -o "$ZLIB_DIR" = no; then
    1:     SYSTEM_ZLIB=
    1: else
    1:     AC_CHECK_LIB(z, gzread, [SYSTEM_ZLIB=1 ZLIB_LIBS="-lz $ZLIB_LIBS"], 
    1: 	[SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=], $ZLIB_LIBS)
    1: fi
    1: if test "$SYSTEM_ZLIB" = 1; then
    1:     LIBS="$ZLIB_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <string.h>
   25:                      #include <zlib.h> ],
   25:                    [ #if ZLIB_VERNUM < $MOZZLIB 
   25:                      #error "Insufficient zlib version ($MOZZLIB required)."
   25:                      #endif ],
   25:                    SYSTEM_ZLIB=1,
   25:                    [SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=]) 
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${ZLIB_DIR}" -a -d "${ZLIB_DIR}" -a "$SYSTEM_ZLIB" = 1; then
    1:     ZLIB_CFLAGS="-I${ZLIB_DIR}/include"
    1:     ZLIB_LIBS="-L${ZLIB_DIR}/lib ${ZLIB_LIBS}"
    1: fi
    1: 
12936: dnl system BZIP2 Support
12936: dnl ========================================================
12936: MOZ_ARG_WITH_STRING(system-bz2,
12936: [  --with-system-bz2[=PFX]
12936:                           Use system libbz2 [installed at prefix PFX]],
12936:     BZ2_DIR=$withval)
12936: 
12936: _SAVE_CFLAGS=$CFLAGS
12936: _SAVE_LDFLAGS=$LDFLAGS
12936: _SAVE_LIBS=$LIBS
12936: if test -n "${BZ2_DIR}" -a "${BZ2_DIR}" != "yes"; then
12936:     CFLAGS="-I${BZ2_DIR}/include $CFLAGS"
12936:     LDFLAGS="-L${BZ2_DIR}/lib $LDFLAGS"
12936: fi
12936: if test -z "$BZ2_DIR" -o "$BZ2_DIR" = no; then
12936:     SYSTEM_BZ2=
12936: else
12936:     AC_CHECK_LIB(bz2, BZ2_bzread, [SYSTEM_BZ2=1 BZ2_LIBS="-lbz2"],
41159: 	[SYSTEM_BZ2= BZ2_CFLAGS= BZ2_LIBS=])
12936: fi
12936: CFLAGS=$_SAVE_CFLAGS
12936: LDFLAGS=$_SAVE_LDFLAGS
12936: LIBS=$_SAVE_LIBS
12936: 
12936: if test "${BZ2_DIR}" -a -d "${BZ2_DIR}" -a "$SYSTEM_BZ2" = 1; then
12936:     BZ2_CFLAGS="-I${BZ2_DIR}/include"
41159:     BZ2_LIBS="-L${BZ2_DIR}/lib ${BZ2_LIBS}"
12936: fi
12936: 
    1: dnl system PNG Support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-png, 
    1: [  --with-system-png[=PFX]
    1:                           Use system libpng [installed at prefix PFX]],
    1:     PNG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: CFLAGS="$ZLIB_CFLAGS $CFLAGS"
    1: LDFLAGS="$ZLIB_LIBS -lz $LDFLAGS"
    1: if test -n "${PNG_DIR}" -a "${PNG_DIR}" != "yes"; then
    1:     CFLAGS="-I${PNG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${PNG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$PNG_DIR" -o "$PNG_DIR" = no; then
    1:     SYSTEM_PNG=
    1: else
    1:     _SAVE_PNG_LIBS=$PNG_LIBS
    1:     AC_CHECK_LIB(png, png_get_valid, [SYSTEM_PNG=1 PNG_LIBS="-lpng $PNG_LIBS"],
 2532:                  AC_MSG_ERROR([--with-system-png requested but no working libpng found]), 
 2532:                  $PNG_LIBS)
  663:     AC_CHECK_LIB(png, png_get_acTL, ,
 2532:                  AC_MSG_ERROR([--with-system-png won't work because the system's libpng doesn't have APNG support]),
 2532:                  $_SAVE_PNG_LIBS)
    1: fi
    1: if test "$SYSTEM_PNG" = 1; then
    1:     LIBS="$PNG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <png.h> ],
   25:                    [ #if PNG_LIBPNG_VER < $MOZPNG
   25:                      #error "Insufficient libpng version ($MOZPNG required)."
    1:                      #endif
   25:                      #ifndef PNG_UINT_31_MAX
   25:                      #error "Insufficient libpng version."
   25:                      #endif ],
   25:                    SYSTEM_PNG=1,
 2532:                    AC_MSG_ERROR([--with-system-png requested but no working libpng found]))
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${PNG_DIR}" -a -d "${PNG_DIR}" -a "$SYSTEM_PNG" = 1; then
    1:     PNG_CFLAGS="-I${PNG_DIR}/include"
    1:     PNG_LIBS="-L${PNG_DIR}/lib ${PNG_LIBS}"
    1: fi
    1: 
    1: fi # SKIP_LIBRARY_CHECKS
    1: 
11718: dnl system HunSpell Support
11718: dnl ========================================================
11718: MOZ_ARG_ENABLE_BOOL(system-hunspell,
43027: [  --enable-system-hunspell
43027:                           Use system hunspell (located with pkgconfig)],
11718:     SYSTEM_HUNSPELL=1 )
11718: 
11718: if test -n "$SYSTEM_HUNSPELL"; then
11718:     PKG_CHECK_MODULES(MOZ_HUNSPELL, hunspell)
11718: fi
11718: 
11718: AC_SUBST(SYSTEM_HUNSPELL)
11718: 
    1: dnl ========================================================
    1: dnl Java SDK support
    1: dnl ========================================================
    1: 
    1: JAVA_BIN_PATH=
    1: MOZ_ARG_WITH_STRING(java-bin-path,
43027: [  --with-java-bin-path=dir
43027:                           Location of Java binaries (java, javac, jar)],
    1:     JAVA_BIN_PATH=$withval)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Application
    1: dnl =
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_HEADER(Application)
    1: 
    1: ENABLE_TESTS=1
    1: MOZ_BRANDING_DIRECTORY=
32277: MOZ_OFFICIAL_BRANDING=
    1: MOZ_FEEDS=1
43128: MOZ_INSTALLER=1
    1: MOZ_JSDEBUGGER=1
40486: MOZ_MORK=
72943: MOZ_MORKREADER=
    1: MOZ_AUTH_EXTENSION=1
16302: MOZ_OGG=1
55277: MOZ_RAW=
21394: MOZ_SYDNEYAUDIO=
43342: MOZ_VORBIS=
56071: MOZ_TREMOR=
21394: MOZ_WAVE=1
15751: MOZ_MEDIA=
43342: MOZ_WEBM=1
43343: VPX_AS=
43343: VPX_ASFLAGS=
57090: VPX_AS_DASH_C_FLAG=
57090: VPX_AS_CONVERSION=
57090: VPX_ASM_SUFFIX=
43343: VPX_X86_ASM=
57090: VPX_ARM_ASM=
64166: LIBJPEG_TURBO_AS=
64166: LIBJPEG_TURBO_ASFLAGS=
64166: LIBJPEG_TURBO_X86_ASM=
64166: LIBJPEG_TURBO_X64_ASM=
39052: MOZ_PANGO=1
    1: MOZ_PERMISSIONS=1
40035: MOZ_PLACES=1
    1: MOZ_PREF_EXTENSIONS=1
    1: MOZ_PROFILELOCKING=1
    1: MOZ_PSM=1
    1: MOZ_RDF=1
    1: MOZ_REFLOW_PERF=
    1: MOZ_SAFE_BROWSING=
13679: MOZ_HELP_VIEWER=
    1: MOZ_SPELLCHECK=1
29279: MOZ_SPLASHSCREEN=
    1: MOZ_STORAGE=1
70848: MOZ_SVG_DLISTS=
    1: MOZ_TIMELINE=
39184: MOZ_TOOLKIT_SEARCH=1
    1: MOZ_UI_LOCALE=en-US
    1: MOZ_UNIVERSALCHARDET=1
    1: MOZ_URL_CLASSIFIER=
    1: MOZ_XSLT_STANDALONE=
    1: MOZ_XTF=1
    1: MOZ_XUL=1
 5938: MOZ_ZIPWRITER=1
    1: NS_PRINTING=1
57613: MOZ_PDF_PRINTING=
54926: MOZ_DISABLE_DOMCRYPTO=
43128: NSS_DISABLE_DBM=
26270: NECKO_WIFI=1
    1: NECKO_COOKIES=1
    1: NECKO_DISK_CACHE=1
70220: NECKO_PROTOCOLS_DEFAULT="about data file ftp http res viewsource websocket wyciwyg"
43128: USE_ARM_KUSER=
39469: BUILD_CTYPES=1
72208: MOZ_USE_NATIVE_POPUP_WINDOWS=
    1: 
55800: 
56461: case "${target}" in
68662: *android*|*darwin*)
    1:     ACCESSIBILITY=
    1:     ;;
    1: *)
    1:     ACCESSIBILITY=1
    1:     ;;
    1: esac
    1: 
    1: case "$target_os" in
63450:     mingw*)
31956:         NS_ENABLE_TSF=1
55800:         if test -z "$GNU_CC"; then 
55800:             if test "$MOZ_WINSDK_TARGETVER" -lt "06000000"; then
31956:                 NS_ENABLE_TSF=
31956:             fi
55800:         fi
31956:         if test -n "$NS_ENABLE_TSF"; then
31956:             AC_DEFINE(NS_ENABLE_TSF)
31956:         fi
    1:         ;;
    1: esac
    1: 
43128: case "${target}" in
70914:     *-android*|*-linuxandroid*)
43128:         NSS_DISABLE_DBM=1
43128:         USE_ARM_KUSER=1
43128:         MOZ_INSTALLER=
43128:         NECKO_WIFI=
43128:         MOZ_THEME_FASTSTRIPE=1
43128:         MOZ_TREE_FREETYPE=1
43128:         MOZ_MEMORY=1
43128:         ;;
43128: esac
43128: 
    1: MOZ_ARG_ENABLE_STRING(application,
    1: [  --enable-application=APP
    1:                           Options include:
    1:                             browser (Firefox)
    1:                             xulrunner
    1:                             content/xslt (Standalone Transformiix XSLT)
    1:                             netwerk (Standalone Necko)
    1:                             tools/update-packaging (AUS-related packaging tools)
    1:                             standalone (use this for standalone
    1:                               xpcom/xpconnect or to manually drive a build)],
    1: [ MOZ_BUILD_APP=$enableval ] )
    1: 
 6837: MOZ_ARG_WITH_STRING(xulrunner-stub-name,
 6837: [  --with-xulrunner-stub-name=appname   Create the xulrunner stub with the given name],
 6837:   XULRUNNER_STUB_NAME=$withval)
 6837: 
 6837: if test -z "$XULRUNNER_STUB_NAME"; then
 6837:   case "$target_os" in
 6837:   darwin*)
 6837:     XULRUNNER_STUB_NAME=xulrunner
 6837:     ;;
 6837:   *)
 6837:     XULRUNNER_STUB_NAME=xulrunner-stub
 6837:   esac
 6837: fi
 6837: AC_SUBST(XULRUNNER_STUB_NAME)
 6837: 
64011: AC_MSG_CHECKING([for application to build])
 1796: if test -z "$MOZ_BUILD_APP"; then
64011:   AC_MSG_RESULT([browser])
64011:   MOZ_BUILD_APP=browser
 1796: else
 1796:   # We have a valid application only if it has a build.mk file in its top
 1796:   # directory.
 1796:   if test ! -f "${srcdir}/${MOZ_BUILD_APP}/build.mk" ; then
64011:     AC_MSG_RESULT([none])
 1796:     AC_MSG_ERROR([--enable-application value not recognized (${MOZ_BUILD_APP}/build.mk does not exist).])
64011:   else
64011:     AC_MSG_RESULT([$MOZ_BUILD_APP])
 1796:   fi
 1796: fi
 1796: 
 1796: # Allow the application to influence configure with a confvars.sh script.
55800: 
 1796: AC_MSG_CHECKING([if app-specific confvars.sh exists])
 1796: if test -f "${srcdir}/${MOZ_BUILD_APP}/confvars.sh" ; then
 1796:   AC_MSG_RESULT([${srcdir}/${MOZ_BUILD_APP}/confvars.sh])
 1832:   . "${srcdir}/${MOZ_BUILD_APP}/confvars.sh"
 1796: else
 1796:   AC_MSG_RESULT([no])
 1796: fi
 1796: 
68555: # Allow someone to change MOZ_APP_NAME in mozconfig
68555: MOZ_ARG_WITH_STRING(app-name,
68555: [--with-app-name=APPNAME sets MOZ_APP_NAME to APPNAME],
68555: WITH_APP_NAME=$withval,
68555: )
68555: 
68555: if test -n "$WITH_APP_NAME" ; then
68555:     MOZ_APP_NAME="$WITH_APP_NAME"
68555: fi
68555: 
 1796: # Now is a good time to test for logic errors, define mismatches, etc.
 1796: case "$MOZ_BUILD_APP" in
 1796: xulrunner)
 1796:   if test "$LIBXUL_SDK"; then
 1796:     AC_MSG_ERROR([Building XULRunner --with-libxul-sdk doesn't make sense; XULRunner provides the libxul SDK.])
 1796:   fi
 1796:   ;;
 1796: esac
 1796: 
 1796: # Special cases where we need to AC_DEFINE something. Also a holdover for apps
 1796: # that haven't made a confvars.sh yet. Don't add new stuff here, use
 1796: # MOZ_BUILD_APP.
    1: case "$MOZ_BUILD_APP" in
    1: browser)
    1:   AC_DEFINE(MOZ_PHOENIX)
    1:   ;;
    1: 
    1: xulrunner)
    1:   AC_DEFINE(MOZ_XULRUNNER)
    1:   ;;
    1: 
    1: content/xslt)
    1:   AC_DEFINE(TX_EXE)
    1:   ;;
    1: 
    1: standalone) 
    1:   MOZ_APP_NAME=mozilla
    1:   MOZ_APP_DISPLAYNAME=Mozilla
    1:   MOZ_APP_VERSION=$MOZILLA_VERSION
    1:   ;;
    1: 
    1: esac
    1: 
    1: AC_SUBST(MOZ_BUILD_APP)
    1: AC_SUBST(MOZ_PHOENIX)
    1: AC_SUBST(MOZ_XULRUNNER)
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_BUILD_APP,$MOZ_BUILD_APP)
    1: 
    1: dnl ========================================================
    1: dnl = 
    1: dnl = Toolkit Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Toolkit Options)
    1: 
    1:     dnl ========================================================
    1:     dnl = Select the default toolkit
    1:     dnl ========================================================
    1: 	MOZ_ARG_ENABLE_STRING(default-toolkit,
    1: 	[  --enable-default-toolkit=TK
    1:                           Select default toolkit
    1:                           Platform specific defaults:
  346:                             Mac OS X - cairo-cocoa
    1:                             Neutrino/QNX - photon
  346:                             OS/2 - cairo-os2
68662:                             Win32 - cairo-windows
16526:                             Gtk2 with DirectFB - cairo-gtk2-dfb
16757:                             * - cairo-gtk2
16757:                             * - cairo-qt],
    1:     [ _DEFAULT_TOOLKIT=$enableval ],
    1:     [ _DEFAULT_TOOLKIT=$_PLATFORM_DEFAULT_TOOLKIT])
    1: 
 2229:     if test "$_DEFAULT_TOOLKIT" = "photon" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-windows" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2" \
16526:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2-dfb" \
16526:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2-x11" \
16757:         -o "$_DEFAULT_TOOLKIT" = "cairo-qt" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-os2" \
42466:         -o "$_DEFAULT_TOOLKIT" = "cairo-cocoa" \
42466:         -o "$_DEFAULT_TOOLKIT" = "cairo-android"
    1:     then
    1:         dnl nglayout only supports building with one toolkit,
    1:         dnl so ignore everything after the first comma (",").
    1:         MOZ_WIDGET_TOOLKIT=`echo "$_DEFAULT_TOOLKIT" | sed -e "s/,.*$//"`
    1:     else
16526:         AC_MSG_ERROR([You must specify a default toolkit (perhaps $_PLATFORM_DEFAULT_TOOLKIT).])
    1:     fi
    1: 
    1: dnl ========================================================
    1: dnl = Enable the toolkit as needed                         =
    1: dnl ========================================================
    1: 
    1: case "$MOZ_WIDGET_TOOLKIT" in
    1: photon)
    1: 	MOZ_ENABLE_PHOTON=1
    1: 	AC_DEFINE(MOZ_WIDGET_PHOTON)
    1:     ;;
    1: 
    1: cairo-windows)
    1:     MOZ_WIDGET_TOOLKIT=windows
34228:     MOZ_WEBGL=1
57613:     MOZ_PDF_PRINTING=1
68748:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
    1: 
16526: cairo-gtk2|cairo-gtk2-x11)
    1:     MOZ_WIDGET_TOOLKIT=gtk2
    1:     MOZ_ENABLE_GTK2=1
    1:     MOZ_ENABLE_XREMOTE=1
34228:     MOZ_WEBGL=1
35488:     MOZ_WEBGL_GLX=1
16526: 
16526:     AC_DEFINE(MOZ_X11)
16526:     MOZ_X11=1
35250:     USE_FC_FREETYPE=1
16526: 
 3585:     TK_CFLAGS='$(MOZ_GTK2_CFLAGS)'
 3585:     TK_LIBS='$(MOZ_GTK2_LIBS)'
    1:     AC_DEFINE(MOZ_WIDGET_GTK2)
57613:     MOZ_PDF_PRINTING=1
68747:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
16526: 
16526: cairo-gtk2-dfb)
16526:     MOZ_WIDGET_TOOLKIT=gtk2
16526:     MOZ_ENABLE_GTK2=1
35488:     MOZ_WEBGL=
16526: 
16526:     AC_DEFINE(MOZ_DFB)
16526:     MOZ_DFB=1
16526: 
16526:     TK_CFLAGS='$(MOZ_GTK2_CFLAGS)'
16526:     TK_LIBS='$(MOZ_GTK2_LIBS)'
16526:     AC_DEFINE(MOZ_WIDGET_GTK2)
16526:     if test "$no_x" != "yes"; then
16526:         AC_MSG_WARN([Disabling X when DirectFB is specified.])
16526:         no_x=yes
16526:     fi
57613:     MOZ_PDF_PRINTING=1
16526:     ;;
16526: 
16757: cairo-qt)
16757:     MOZ_WIDGET_TOOLKIT=qt
16757:     MOZ_ENABLE_QT=1
16757:     MOZ_ENABLE_XREMOTE=1
40145:     MOZ_WEBGL=1
40145:     MOZ_WEBGL_GLX=1
19858:     USE_ELF_DYNSTR_GC=
16958: 
16958:     AC_DEFINE(MOZ_X11)
16958:     MOZ_X11=1
35250:     USE_FC_FREETYPE=1
71509:     XT_LIBS=
16958: 
16757:     TK_CFLAGS='$(MOZ_QT_CFLAGS)'
16757:     TK_LIBS='$(MOZ_QT_LIBS)'
16757:     AC_DEFINE(MOZ_WIDGET_QT)
57613:     MOZ_PDF_PRINTING=1
16757:     ;;
16958: 
    1: cairo-os2)
    1:     MOZ_WIDGET_TOOLKIT=os2
35250:     USE_FC_FREETYPE=1
    1:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
    1:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
57613:     MOZ_PDF_PRINTING=1
    1:     ;;
    1: 
22484: cairo-cocoa)
    1:     MOZ_WIDGET_TOOLKIT=cocoa
    1:     AC_DEFINE(MOZ_WIDGET_COCOA)
    1:     MOZ_USER_DIR="Mozilla"
56763:     AC_DEFINE(XP_MACOSX)
41147:     TK_LIBS='-framework QuartzCore -framework Carbon -framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework AddressBook -framework OpenGL'
27353:     TK_CFLAGS="-DNO_X11"
38009:     LDFLAGS="$LDFLAGS -framework Cocoa -lobjc"
    1:     CFLAGS="$CFLAGS $TK_CFLAGS"
    1:     CXXFLAGS="$CXXFLAGS $TK_CFLAGS"
38009:     LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
27353:     MOZ_FS_LAYOUT=bundle
34228:     MOZ_WEBGL=1
68749:     MOZ_INSTRUMENT_EVENT_LOOP=1
    1:     ;;
42466: 
42466: cairo-android)
42466:     AC_DEFINE(MOZ_WIDGET_ANDROID)
42466:     MOZ_WIDGET_TOOLKIT=android
57613:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
57613:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
51421:     MOZ_WEBGL=1
57613:     MOZ_PDF_PRINTING=1
42466:     ;;
42466: 
    1: esac
    1: 
57613: AC_SUBST(MOZ_PDF_PRINTING)
57613: if test "$MOZ_PDF_PRINTING"; then
57613:    PDF_SURFACE_FEATURE="#define CAIRO_HAS_PDF_SURFACE 1"
57613:    AC_DEFINE(MOZ_PDF_PRINTING)
57613: fi
57613: 
    1: if test "$MOZ_ENABLE_XREMOTE"; then
    1:     AC_DEFINE(MOZ_ENABLE_XREMOTE)
    1: fi
    1: 
68747: if test "$MOZ_INSTRUMENT_EVENT_LOOP"; then
68747:    AC_DEFINE(MOZ_INSTRUMENT_EVENT_LOOP)
68747: fi
68747: 
    1: if test "$COMPILE_ENVIRONMENT"; then
16526:   if test "$MOZ_ENABLE_GTK2"; then
16526:     if test "$MOZ_X11"; then
16526:       GDK_PACKAGES=gdk-x11-2.0
16526:     elif test "$MOZ_DFB"; then
16526:       PKG_CHECK_MODULES(MOZ_DFB, directfb >= 1.1.0)
16526:       GDK_PACKAGES=directfb
16526:     fi
16526: 
16526:     PKG_CHECK_MODULES(MOZ_GTK2, gtk+-2.0 >= $GTK2_VERSION gtk+-unix-print-2.0 glib-2.0 gobject-2.0 $GDK_PACKAGES)
16526:   fi
16526: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
27353: AC_SUBST(MOZ_FS_LAYOUT)
    1: 
    1: dnl ========================================================
43128: dnl Use ARM userspace kernel helpers; tell NSPR to enable
43128: dnl their usage and use them in spidermonkey.
43128: dnl ========================================================
43128: MOZ_ARG_WITH_BOOL(arm-kuser,
43128: [  --with-arm-kuser         Use kuser helpers (Linux/ARM only -- requires kernel 2.6.13 or later)],
43128:     USE_ARM_KUSER=1,)
43128: if test -n "$USE_ARM_KUSER"; then
43128:    AC_DEFINE(USE_ARM_KUSER)
43128: fi
43128: 
43128: dnl ========================================================
    1: dnl = startup-notification support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_STARTUP_NOTIFICATION=
    1: 
    1:     MOZ_ARG_ENABLE_BOOL(startup-notification,
43027:     [  --enable-startup-notification
43027:                           Enable startup-notification support (default: disabled) ],
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=force,
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=)
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_STARTUP_NOTIFICATION,
    1:                           libstartup-notification-1.0 >= $STARTUP_NOTIFICATION_VERSION,
    1:         [MOZ_ENABLE_STARTUP_NOTIFICATION=1], [
    1:             if test "$MOZ_ENABLE_STARTUP_NOTIFICATION" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find startup-notification >= $STARTUP_NOTIFICATION_VERSION])
    1:             fi
    1:             MOZ_ENABLE_STARTUP_NOTIFICATION=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"; then
    1:         AC_DEFINE(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1:     fi
    1: 
    1:     TK_LIBS="$TK_LIBS $MOZ_STARTUP_NOTIFICATION_LIBS"
    1: fi
    1: AC_SUBST(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_CFLAGS)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_LIBS)
    1: 
16757: dnl ========================================================
16757: dnl = QT support
16757: dnl ========================================================
16757: if test "$MOZ_ENABLE_QT"
16757: then
16757:     MOZ_ARG_WITH_STRING(qtdir,
16757:     [  --with-qtdir=\$dir       Specify Qt directory ],
16757:     [ QTDIR=$withval])
16757: 
16757:     if test -z "$QTDIR"; then
40144:         PKG_CHECK_MODULES(MOZ_QT, QtGui QtNetwork QtCore QtOpenGL)
50722:         AC_CHECK_PROGS(HOST_MOC, $MOC moc, "")
39111:     else
40144:         MOZ_QT_LIBS="-L$QTDIR/lib/ -lQtGui -lQtNetwork -lQtCore -lQtDBus -lQtXml -lQtOpenGL"
39111: 
39111:         MOZ_QT_CFLAGS="-DQT_SHARED"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/Qt"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtGui"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtCore"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtNetwork"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtDBus"
39711:         MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I$QTDIR/include/QtXml"
39711:         HOST_MOC="$QTDIR/bin/moc"
16757:     fi
16757:     if test -z "$HOST_MOC"; then
39111:         AC_MSG_ERROR([No acceptable moc preprocessor found. Qt SDK is not installed or --with-qt is
39111: incorrect])
16757:     fi
16757:     MOC=$HOST_MOC
51789: 
70890:     MOZ_ENABLE_QMSYSTEM2=
70890:     PKG_CHECK_MODULES(_QMSYSTEM2, qmsystem2,
70890:                       MOZ_ENABLE_QMSYSTEM2=1,
70890:                       MOZ_ENABLE_QMSYSTEM2=)
70890: 
70890:     if test "$MOZ_ENABLE_QMSYSTEM2"; then
70890:       MOZ_ENABLE_QMSYSTEM2=1
70890:       MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS $_QMSYSTEM2_CFLAGS"
70890:       MOZ_QT_LIBS="$MOZ_QT_LIBS $_QMSYSTEM2_LIBS"
70890:       AC_DEFINE(MOZ_ENABLE_QMSYSTEM2)
70890:     fi
70890: 
51789:     MOZ_ENABLE_QTNETWORK=
51789:     PKG_CHECK_MODULES(_QTNETWORK, QtNetwork >= 4.7,
51789:                       MOZ_ENABLE_QTNETWORK=1,
51789:                       MOZ_ENABLE_QTNETWORK=)
51789: 
51789:     if test "$MOZ_ENABLE_QTNETWORK"; then
51789:       MOZ_ENABLE_QTNETWORK=1
51789:       AC_DEFINE(MOZ_ENABLE_QTNETWORK)
51789:     fi
63422: 
63422:     MOZ_ENABLE_QTMOBILITY=
63422:     PKG_CHECK_MODULES(_QTMOBILITY, QtSensors,
63422:                       MOZ_ENABLE_QTMOBILITY=1,
63422:                       MOZ_ENABLE_QTMOBILITY=)
63422:     if test "$MOZ_ENABLE_QTMOBILITY"; then
63422:        MOZ_ENABLE_QTMOBILITY=1
63422:        MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS $_QTMOBILITY_CFLAGS"
63422:        MOZ_QT_LIBS="$MOZ_QT_LIBS $_QTMOBILITY_LIBS"
63422:     else
63422:        AC_CHECK_LIB(QtSensors, main, [
63422:           MOZ_ENABLE_QTMOBILITY=1
63422:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I/usr/include/qt4/QtMobility"
63422:           MOZ_QT_CFLAGS="$MOZ_QT_CFLAGS -I/usr/include/qt4/QtSensors"
63422:           MOZ_QT_LIBS="$MOZ_QT_LIBS -lQtSensors"
63422:        ])
63422:     fi
63422:     if test "$MOZ_ENABLE_QTMOBILITY"; then
63422:        AC_DEFINE(MOZ_ENABLE_QTMOBILITY)
63422:     fi
16757: fi
16757: 
    1: AC_SUBST(GTK_CONFIG)
    1: AC_SUBST(TK_CFLAGS)
    1: AC_SUBST(TK_LIBS)
    1: 
    1: AC_SUBST(MOZ_ENABLE_GTK2)
    1: AC_SUBST(MOZ_ENABLE_PHOTON)
16757: AC_SUBST(MOZ_ENABLE_QT)
51789: AC_SUBST(MOZ_ENABLE_QTNETWORK)
70890: AC_SUBST(MOZ_ENABLE_QMSYSTEM2)
63422: AC_SUBST(MOZ_ENABLE_QTMOBILITY)
    1: AC_SUBST(MOZ_ENABLE_XREMOTE)
    1: AC_SUBST(MOZ_GTK2_CFLAGS)
    1: AC_SUBST(MOZ_GTK2_LIBS)
16757: AC_SUBST(MOZ_QT_CFLAGS)
16757: AC_SUBST(MOZ_QT_LIBS)
    1: 
    1: AC_SUBST(MOC)
    1: 
16526: AC_SUBST(MOZ_DFB)
    1: AC_SUBST(MOZ_X11)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Components & Features
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Components and Features)
    1: 
    1: dnl ========================================================
    1: dnl = Localization
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(ui-locale,
    1: [  --enable-ui-locale=ab-CD
    1:                           Select the user interface locale (default: en-US)],
    1:     MOZ_UI_LOCALE=$enableval )
    1: AC_SUBST(MOZ_UI_LOCALE)
    1: 
    1: dnl ========================================================
    1: dnl = Trademarked Branding 
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(official-branding,
43027: [  --enable-official-branding
43027:                           Enable Official mozilla.org Branding
    1:                           Do not distribute builds with
    1:                           --enable-official-branding unless you have
    1:                           permission to use trademarks per
    1:                           http://www.mozilla.org/foundation/trademarks/ .],
32235: [
32235:   if test -z "$MOZ_OFFICIAL_BRANDING_DIRECTORY"; then
32235:     AC_MSG_ERROR([You must specify MOZ_OFFICIAL_BRANDING_DIRECTORY to use --enable-official-branding.])
32235:   else
32235:     MOZ_BRANDING_DIRECTORY=${MOZ_OFFICIAL_BRANDING_DIRECTORY}
32277:     MOZ_OFFICIAL_BRANDING=1
32277:   fi
32277: ], MOZ_OFFICIAL_BRANDING=)
32277: 
32277: AC_SUBST(MOZ_OFFICIAL_BRANDING)
32277: if test -n "$MOZ_OFFICIAL_BRANDING"; then
32277:   AC_DEFINE(MOZ_OFFICIAL_BRANDING)
32277: fi
    1: 
    1: MOZ_ARG_WITH_STRING(branding,
    1: [  --with-branding=dir     Use branding from the specified directory.],
    1:     MOZ_BRANDING_DIRECTORY=$withval)
    1: 
    1: REAL_BRANDING_DIRECTORY="${MOZ_BRANDING_DIRECTORY}"
    1: if test -z "$REAL_BRANDING_DIRECTORY"; then
    1:   REAL_BRANDING_DIRECTORY=${MOZ_BUILD_APP}/branding/nightly
    1: fi
    1: 
39743: if test -f "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"; then
39743:   . "${_topsrcdir}/$REAL_BRANDING_DIRECTORY/configure.sh"
    1: fi
    1: 
    1: AC_SUBST(MOZ_BRANDING_DIRECTORY)
    1: 
    1: dnl ========================================================
    1: dnl = Distribution ID
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(distribution-id,
43027: [  --with-distribution-id=ID
43027:                           Set distribution-specific id (default=org.mozilla)],
    1: [ val=`echo $withval`
    1:     MOZ_DISTRIBUTION_ID="$val"])
    1: 
    1: if test -z "$MOZ_DISTRIBUTION_ID"; then
    1:    MOZ_DISTRIBUTION_ID="org.mozilla"
    1: fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_DISTRIBUTION_ID,"$MOZ_DISTRIBUTION_ID")
    1: AC_SUBST(MOZ_DISTRIBUTION_ID)
    1: 
16526: 
16526: dnl ========================================================
16526: dnl complex text support off by default
16526: dnl ========================================================
16526: MOZ_ARG_DISABLE_BOOL(pango,
16526: [  --disable-pango         Disable usage of Pango ],
16526:     MOZ_PANGO=,
16526:     MOZ_PANGO=1)
16526: 
    1: dnl ========================================================
19744: dnl = Pango
10568: dnl ========================================================
10568: if test "$MOZ_ENABLE_GTK2"
    1: then
16526:     AC_SUBST(MOZ_PANGO)
    1: 
10568:     PKG_CHECK_MODULES(_PANGOCHK, pango >= $PANGO_VERSION)
16526: 
57292:     PKG_CHECK_MODULES(MOZ_PANGO, pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION pangocairo >= $PANGO_VERSION)
    1:     AC_SUBST(MOZ_PANGO_CFLAGS)
    1:     AC_SUBST(MOZ_PANGO_LIBS)
39052:     if test "$MOZ_PANGO"
39052:     then
16526:         AC_DEFINE(MOZ_PANGO)
16526:     else
16526:         PKG_CHECK_MODULES(FT2, freetype2 > 6.1.0 fontconfig)
16526:         AC_SUBST(FT2_CFLAGS)
16526:         AC_SUBST(FT2_LIBS)
16526:     fi
    1: fi
    1: 
39022: if test "$MOZ_ENABLE_QT"
39022: then
39022:     if test "$MOZ_PANGO"
39022:     then
57475:         PKG_CHECK_MODULES(MOZ_PANGO, [pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION pangocairo >= $PANGO_VERSION],
39022:         [
39022:             AC_SUBST(MOZ_PANGO_CFLAGS)
39022:             AC_SUBST(MOZ_PANGO_LIBS)
39022:             AC_DEFINE(MOZ_PANGO)
39022:         ],
39022:         [
39022:             echo "Pango library not found, will use FT2 font engine"
39022:             MOZ_PANGO=
39022:         ])
39022:     fi
39022:     AC_SUBST(MOZ_PANGO)
39022: fi
39022: 
    1: dnl ========================================================
36586: dnl = GnomeVFS, GIO and GConf support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_X11"
    1: then
    1:     dnl build the gnomevfs extension by default only when the
    1:     dnl GTK2 toolkit is in use.
    1:     if test "$MOZ_ENABLE_GTK2"
    1:     then
    1:         MOZ_ENABLE_GNOMEVFS=1
    1:         MOZ_ENABLE_GCONF=1
    1:     fi
    1: 
36586:     dnl ========================================================
36586:     dnl = GnomeVFS support module
36586:     dnl ========================================================
    1:     MOZ_ARG_DISABLE_BOOL(gnomevfs,
    1:     [  --disable-gnomevfs      Disable GnomeVFS support ],
    1:         MOZ_ENABLE_GNOMEVFS=,
    1:         MOZ_ENABLE_GNOMEVFS=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEVFS"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEVFS, gnome-vfs-2.0 >= $GNOMEVFS_VERSION gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION,[
    1:             MOZ_GNOMEVFS_LIBS=`echo $MOZ_GNOMEVFS_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEVFS=1
31951:             AC_DEFINE(MOZ_ENABLE_GNOMEVFS)
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEVFS" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEVFS=
    1:         ])
36599:     else
36599:         if test `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
36599:             PKG_CHECK_MODULES(MOZ_GNOMEVFS, gnome-vfs-2.0 >= $GNOMEVFS_VERSION gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION,[
36599:               MOZ_GNOMEVFS_LIBS=`echo $MOZ_GNOMEVFS_LIBS | sed 's/-llinc\>//'`
36599:             ])
36599:         fi
    1:     fi
    1: 
25956:     AC_SUBST(MOZ_ENABLE_GNOMEVFS)
    1:     AC_SUBST(MOZ_GNOMEVFS_CFLAGS)
    1:     AC_SUBST(MOZ_GNOMEVFS_LIBS)
    1: 
31951:     dnl ========================================================
31951:     dnl = GIO support module
31951:     dnl ========================================================
31951:     MOZ_ARG_ENABLE_BOOL(gio,
31951:     [  --enable-gio            Enable GIO support (default: disabled)],
31951:         MOZ_ENABLE_GIO=force,
31951:         MOZ_ENABLE_GIO=)
31951: 
31951:     if test "$MOZ_ENABLE_GIO" -a "$MOZ_ENABLE_GTK2"
31951:     then
71998:         PKG_CHECK_MODULES(_GTKCHECK, gtk+-2.0 >= 2.14, , 
71998:                           [AC_MSG_ERROR([* * * Could not find gtk+-2.0 > 2.14. Required for build with gio.])])
31951:         PKG_CHECK_MODULES(MOZ_GIO, gio-2.0 >= $GIO_VERSION,[
31951:             MOZ_GIO_LIBS=`echo $MOZ_GIO_LIBS | sed 's/-llinc\>//'`
31951:             MOZ_ENABLE_GIO=1
31951:             AC_DEFINE(MOZ_ENABLE_GIO)
31951:         ],[
31951:             if test "$MOZ_ENABLE_GIO" = "force"
31951:             then
31951:                 AC_MSG_ERROR([* * * Could not find gio-2.0 >= $GIO_VERSION])
31951:             fi
31951:             MOZ_ENABLE_GIO=
31951:         ])
31951:     fi
31951: 
31951:     AC_SUBST(MOZ_ENABLE_GIO)
31951:     AC_SUBST(MOZ_GIO_CFLAGS)
31951:     AC_SUBST(MOZ_GIO_LIBS)
36586:    
36586:     dnl ========================================================
36586:     dnl = GConf support module
36586:     dnl ========================================================
64650:     MOZ_ARG_DISABLE_BOOL(gconf,
64650:     [  --disable-gconf      Disable Gconf support ],
64650:         MOZ_ENABLE_GCONF=,
64650:         MOZ_ENABLE_GCONF=force)
64650: 
36586:     if test "$MOZ_ENABLE_GCONF"
36586:     then
36586:         PKG_CHECK_MODULES(MOZ_GCONF, gconf-2.0 >= $GCONF_VERSION gobject-2.0 ,[
36586:             MOZ_GCONF_LIBS=`echo $MOZ_GCONF_LIBS | sed 's/-llinc\>//'`
36586:             MOZ_ENABLE_GCONF=1
36586:         ],[
36586:             if test "$MOZ_ENABLE_GCONF" = "force"
36586:             then
36586:                 AC_MSG_ERROR([* * * Could not find gconf-2.0 ])
36586:             fi
36586:             MOZ_ENABLE_GCONF=
36586:         ])
36586:     fi
36586: 
36586:     if test "$MOZ_ENABLE_GCONF"; then
36586:         AC_DEFINE(MOZ_ENABLE_GCONF)
36586:     fi
36586: 
36586:     AC_SUBST(MOZ_ENABLE_GCONF)
36586:     AC_SUBST(MOZ_GCONF_CFLAGS)
36586:     AC_SUBST(MOZ_GCONF_LIBS)
36586: fi
36586: 
36586: dnl ========================================================
48830: dnl = libproxy support
48830: dnl ========================================================
48830: 
60013: if test "$MOZ_ENABLE_GTK2" -o "$MOZ_ENABLE_QT"
48830: then
48830:     MOZ_ENABLE_LIBPROXY=
48830: 
48830:     MOZ_ARG_ENABLE_BOOL(libproxy,
48830:     [  --enable-libproxy         Enable libproxy support ],
48830:     MOZ_ENABLE_LIBPROXY=1,
48830:     MOZ_ENABLE_LIBPROXY=)
48830: 
48830:     if test "$MOZ_ENABLE_LIBPROXY"
48830:     then
48830:         PKG_CHECK_MODULES(MOZ_LIBPROXY, libproxy-1.0)
48830:         AC_DEFINE(MOZ_ENABLE_LIBPROXY)
48830:     fi
48830: fi
48830: AC_SUBST(MOZ_ENABLE_LIBPROXY)
48830: AC_SUBST(MOZ_LIBPROXY_CFLAGS)
48830: AC_SUBST(MOZ_LIBPROXY_LIBS)
48830: 
48830: dnl ========================================================
36586: dnl = libnotify support
36586: dnl ========================================================
36586: 
36586: if test "$MOZ_ENABLE_GTK2"
36586: then
36586:     MOZ_ENABLE_LIBNOTIFY=1
36586: 
36586:     MOZ_ARG_DISABLE_BOOL(libnotify,
36586:     [  --disable-libnotify     Disable libnotify support ],
36586:     MOZ_ENABLE_LIBNOTIFY=,
36586:     MOZ_ENABLE_LIBNOTIFY=1)
36586: 
36586:     if test "$MOZ_ENABLE_LIBNOTIFY"
36586:     then
36586:         AC_DEFINE(MOZ_ENABLE_LIBNOTIFY)
36586:     fi
36586: fi
36586: 
36586: if test -z "$SKIP_LIBRARY_CHECKS"
36586: then
36586:     if test "$MOZ_ENABLE_GTK2"
36586:     then
36586:         if test "$MOZ_ENABLE_LIBNOTIFY"
36586:         then
36586:             PKG_CHECK_MODULES(MOZ_LIBNOTIFY, libnotify >= $LIBNOTIFY_VERSION)
36586:         fi
36586:     fi
36586: fi
36586: AC_SUBST(MOZ_ENABLE_LIBNOTIFY)
36586: AC_SUBST(MOZ_LIBNOTIFY_CFLAGS)
36586: AC_SUBST(MOZ_LIBNOTIFY_LIBS)
36586: 
36586: dnl ========================================================
36586: dnl = GNOME component (mozgnome)
36586: dnl ========================================================
36586: 
36586: # The GNOME component is built if one of 
36586: # gnome-vfs, gio, gconf or libnotify is available.
47975: if test "$MOZ_ENABLE_GCONF" -o \
47975:    "$MOZ_ENABLE_GNOMEVFS" -o \
47975:    "$MOZ_ENABLE_GIO" -o \
47975:    "$MOZ_ENABLE_LIBNOTIFY"; then
36586:     MOZ_ENABLE_GNOME_COMPONENT=1
36586: else
36586:     MOZ_ENABLE_GNOME_COMPONENT=
36586: fi
36586: AC_SUBST(MOZ_ENABLE_GNOME_COMPONENT)
    1: 
    1: dnl ========================================================
    1: dnl = libgnomeui support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_GNOMEUI=1
    1: 
    1:     MOZ_ARG_DISABLE_BOOL(gnomeui,
    1:     [  --disable-gnomeui       Disable libgnomeui support (default: auto, optional at runtime) ],
    1:         MOZ_ENABLE_GNOMEUI=,
    1:         MOZ_ENABLE_GNOMEUI=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEUI, libgnomeui-2.0 >= $GNOMEUI_VERSION,
    1:         [
    1:             MOZ_GNOMEUI_LIBS=`echo $MOZ_GNOMEUI_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEUI=1
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEUI" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find libgnomeui-2.0 >= $GNOMEUI_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEUI=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"; then
    1:         AC_DEFINE(MOZ_ENABLE_GNOMEUI)
    1:     fi
36586: fi
36586: 
    1: AC_SUBST(MOZ_ENABLE_GNOMEUI)
    1: AC_SUBST(MOZ_GNOMEUI_CFLAGS)
    1: AC_SUBST(MOZ_GNOMEUI_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = dbus support
    1: dnl ========================================================
    1: 
47975: if test "$MOZ_ENABLE_GTK2" -o "$MOZ_ENABLE_QT"
    1: then
 8250:     MOZ_ENABLE_DBUS=1
 8250: 
 8250:     MOZ_ARG_DISABLE_BOOL(dbus,
 8250:     [  --disable-dbus          Disable dbus support ],
 8250:         MOZ_ENABLE_DBUS=,
 8250:         MOZ_ENABLE_DBUS=1)
    1: 
    1:     if test "$MOZ_ENABLE_DBUS"
    1:     then
41237:         PKG_CHECK_MODULES(MOZ_DBUS, dbus-1 >= $DBUS_VERSION)
 8250:         PKG_CHECK_MODULES(MOZ_DBUS_GLIB, dbus-glib-1 >= $DBUS_VERSION)
    1:         AC_DEFINE(MOZ_ENABLE_DBUS)
    1:     fi
    1: fi
    1: AC_SUBST(MOZ_ENABLE_DBUS)
41237: AC_SUBST(MOZ_DBUS_CFLAGS)
41237: AC_SUBST(MOZ_DBUS_LIBS)
    1: AC_SUBST(MOZ_DBUS_GLIB_CFLAGS)
    1: AC_SUBST(MOZ_DBUS_GLIB_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = Build Personal Security Manager
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(crypto,
    1: [  --disable-crypto        Disable crypto support (Personal Security Manager)],
    1:     MOZ_PSM=,
    1:     MOZ_PSM=1 )
    1: 
    1: dnl ========================================================
    1: dnl = JS Debugger XPCOM component (js/jsd)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(jsd,
    1: [  --disable-jsd           Disable JavaScript debug library],
    1:     MOZ_JSDEBUGGER=,
    1:     MOZ_JSDEBUGGER=1)
    1: 
    1: 
    1: dnl ========================================================
35963: dnl = Enable IPDL's "expensive" unit tests
35963: dnl ========================================================
35963: MOZ_IPDL_TESTS=
35963: 
35963: MOZ_ARG_ENABLE_BOOL(ipdl-tests,
35963: [  --enable-ipdl-tests     Enable expensive IPDL tests],
35963:     MOZ_IPDL_TESTS=1,
35963:     MOZ_IPDL_TESTS=)
35963: 
35963: if test -n "$MOZ_IPDL_TESTS"; then
35963:     AC_DEFINE(MOZ_IPDL_TESTS)
35963: fi
35963: 
35963: AC_SUBST(MOZ_IPDL_TESTS)
35963: 
35963: dnl ========================================================
73587: dnl = Turns off code necessary for e10s compatibility
73587: dnl ========================================================
73587: dnl This is a temporary flag to be removed in bug 662601 when
73587: dnl it's no longer needed
73587: 
73587: MOZ_E10S_COMPAT=
73587: 
73587: MOZ_ARG_ENABLE_BOOL(e10s-compat,
73587: [  --enable-e10s-compat     Turns off code for e10s compat],
73587:     MOZ_E10S_COMPAT=1,
73587:     MOZ_E10S_COMPAT=)
73587: 
73587: if test -n "$MOZ_E10S_COMPAT"; then
73587:     AC_DEFINE(MOZ_E10S_COMPAT)
73587: fi
73587: 
73587: dnl ========================================================
22249: dnl = Disable building dbm
22249: dnl ========================================================
22249: MOZ_ARG_DISABLE_BOOL(dbm,
22249: [  --disable-dbm           Disable building dbm],
22249:     NSS_DISABLE_DBM=1,
22249:     NSS_DISABLE_DBM=)
22249: 
    1: dnl bi-directional support always on
    1: IBMBIDI=1
    1: AC_DEFINE(IBMBIDI)
    1: 
    1: dnl ========================================================
    1: dnl accessibility support on by default on all platforms 
    1: dnl except OS X.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(accessibility,
    1: [  --disable-accessibility Disable accessibility support (off by default on OS X)],
    1:     ACCESSIBILITY=,
    1:     ACCESSIBILITY=1 )
    1: if test "$ACCESSIBILITY"; then
    1:     AC_DEFINE(ACCESSIBILITY)
    1: fi
    1: 
20158: if test -n "$ACCESSIBILITY" -a "$COMPILE_ENVIRONMENT" = "1"; then
14375: case "$target" in
63450: *-mingw*)
14375:     if test "$ac_cv_header_atlbase_h" = "no"; then
14375:         AC_MSG_ERROR([System header atlbase.h is not available. See http://developer.mozilla.org/en/docs/atlbase.h for details on fixing this problem.])
14375:     fi
14375:     if test "$ac_cv_header_oleacc_idl" = "no"; then
14375:         AC_MSG_ERROR([System header oleacc.idl is not available. See http://developer.mozilla.org/en/docs/oleacc.idl for details on fixing this problem.])
14375:     fi
14375:     ;;
14375: esac
14375: fi
14375: 
    1: dnl ========================================================
    1: dnl Disable printing
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(printing,
    1: [  --disable-printing      Disable printing support],
    1:     NS_PRINTING=,
    1:     NS_PRINTING=1)
    1: 
    1: if test "$NS_PRINTING"; then
    1:     AC_DEFINE(NS_PRINTING)
    1:     AC_DEFINE(NS_PRINT_PREVIEW)
    1: fi
    1: 
    1: dnl ========================================================
54972: dnl = Enable Raw Codecs
54972: dnl ========================================================
54972: MOZ_ARG_ENABLE_BOOL(raw,
54972: [  --enable-raw           Enable support for RAW media],
54972:     MOZ_RAW=1,
54972:     MOZ_RAW=)
51805: 
51805: if test -n "$MOZ_RAW"; then
51805:     AC_DEFINE(MOZ_RAW)
51805:     MOZ_MEDIA=1
51805: fi
51805: 
48220: AC_SUBST(MOZ_RAW)
48220: 
    1: dnl ========================================================
21394: dnl = Disable Ogg Codecs
16300: dnl ========================================================
16300: MOZ_ARG_DISABLE_BOOL(ogg,
43342: [  --disable-ogg           Disable support for OGG media (Theora video and Vorbis audio)],
16300:     MOZ_OGG=,
16300:     MOZ_OGG=1)
16300: 
16300: if test -n "$MOZ_OGG"; then
16300:     AC_DEFINE(MOZ_OGG)
21394:     MOZ_SYDNEYAUDIO=1
16300:     MOZ_MEDIA=1
56071:     case "$target_cpu" in
56071:     arm*)
56071:         MOZ_TREMOR=1
56071:     ;;
56071:     *)
43342:         MOZ_VORBIS=1
56071:     ;;
56071:     esac
26904: 
26904:     dnl Checks for __attribute__(aligned()) directive
26904:     AC_CACHE_CHECK([__attribute__ ((aligned ())) support],
26904:         [ac_cv_c_attribute_aligned],
26904:         [ac_cv_c_attribute_aligned=0
26904:          CFLAGS_save="${CFLAGS}"
26904:          CFLAGS="${CFLAGS} -Werror"
26904:          for ac_cv_c_attr_align_try in 64 32 16 8; do
26904:            echo "trying $ac_cv_c_attr_align_try"
26904:            AC_TRY_COMPILE([],
26904:                           [static char c __attribute__ ((aligned(${ac_cv_c_attr_align_try}))) = 0; return c;],
26904:                           [ac_cv_c_attribute_aligned="${ac_cv_c_attr_align_try}"])
26904:            if test "$ac_cv_c_attribute_aligned" != 0; then
26904:              break;
26904:            fi
26904:          done
26904:            CFLAGS="${CFLAGS_save}"])
26904:     if test "${ac_cv_c_attribute_aligned}" != "0"; then
26904:       AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX],
26904:                          [${ac_cv_c_attribute_aligned}],[Maximum supported data alignment])
26904:     fi
16300: fi
15751: 
21394: dnl ========================================================
43342: dnl = Disable VP8 decoder support
43342: dnl ========================================================
43442: MOZ_ARG_DISABLE_BOOL(webm,
43342: [  --disable-webm          Disable support for WebM media (VP8 video and Vorbis audio)],
43342:     MOZ_WEBM=,
43342:     MOZ_WEBM=1)
43342: 
56939: dnl system libvpx Support
56939: dnl ========================================================
56939: MOZ_ARG_WITH_STRING(system-libvpx,
56939: [  --with-system-libvpx=[PFX]
56939:                           Use system libvpx [installed at prefix PFX]],
56939:     LIBVPX_DIR=$withval)
56939: 
56939: MOZ_NATIVE_LIBVPX=
56939: MOZ_LIBVPX_INCLUDES=
56939: MOZ_LIBVPX_LIBS=
56939: 
43342: if test -n "$MOZ_WEBM"; then
43342:     AC_DEFINE(MOZ_WEBM)
56939: 
56939:     if test -n "$LIBVPX_DIR" -a "$LIBVPX_DIR" != no; then
56939:         _SAVE_CFLAGS=$CFLAGS
56939:         _SAVE_LDFLAGS=$LDFLAGS
56939:         _SAVE_LIBS=$LIBS
56939:         if test "${LIBVPX_DIR}" = "yes"; then
56939:             LIBVPX_DIR=/usr
56939:         fi
56939:         CFLAGS="-I${LIBVPX_DIR}/include $CFLAGS"
56939:         LDFLAGS="-L${LIBVPX_DIR}/lib $LDFLAGS"
63478:         MOZ_CHECK_HEADER(vpx/vpx_decoder.h,
56939:             [if test ! -f "${LIBVPX_DIR}/include/vpx/vpx_decoder.h"; then
56939:              AC_MSG_ERROR([vpx/vpx_decoder.h found, but is not in ${LIBVPX_DIR}/include])
56939:             fi],
56939:             AC_MSG_ERROR([--with-system-libvpx requested but vpx/vpx_decoder.h not found]))
56939:         AC_CHECK_LIB(vpx, vpx_codec_dec_init_ver,
56939:                      [MOZ_NATIVE_LIBVPX=1
56939:                       MOZ_LIBVPX_INCLUDES="-I${LIBVPX_DIR}/include"
56939:                       MOZ_LIBVPX_LIBS="-L${LIBVPX_DIR}/lib -lvpx"],
56939:                      ([--with-system-libvpx requested but symbol vpx_codec_dec_init_ver not found]))
56939:         CFLAGS=$_SAVE_CFLAGS
56939:         LDFLAGS=$_SAVE_LDFLAGS
56939:         LIBS=$_SAVE_LIBS
56939:     fi
56939: fi
56939: 
56939: AC_SUBST(MOZ_NATIVE_LIBVPX)
56939: AC_SUBST(MOZ_LIBVPX_INCLUDES)
56939: AC_SUBST(MOZ_LIBVPX_LIBS)
56939: 
56939: if test -n "$MOZ_WEBM" -a -z "$MOZ_NATIVE_LIBVPX"; then
43342:     MOZ_SYDNEYAUDIO=1
43342:     MOZ_MEDIA=1
56071:     case "$target_cpu" in
56071:     arm*)
56071:         MOZ_TREMOR=1
56071:     ;;
56071:     *)
43342:         MOZ_VORBIS=1
56071:     ;;
56071:     esac
56071: 
43343: 
43343:     dnl Detect if we can use an assembler to compile optimized assembly for libvpx.
57090:     dnl We currently require yasm on all x86 platforms and require yasm 1.1.0 on Win32.
57090:     dnl We currently require gcc on all arm platforms.
52191:     VPX_AS=$YASM
57090:     VPX_ASM_SUFFIX=asm
52191: 
52191:     dnl See if we have assembly on this platform.  
52191:     case "$OS_ARCH:$CPU_ARCH" in
52191:     Linux:x86)
43343:       VPX_ASFLAGS="-f elf32 -rnasm -pnasm"
43343:       VPX_X86_ASM=1
43343:     ;;
43927:     Linux:x86_64)
43927:       VPX_ASFLAGS="-f elf64 -rnasm -pnasm -DPIC"
43927:       VPX_X86_ASM=1
43927:     ;;
52191:     SunOS:x86)
46279:       VPX_ASFLAGS="-f elf32 -rnasm -pnasm"
46279:       VPX_X86_ASM=1
46279:     ;;
46279:     SunOS:x86_64)
46279:       VPX_ASFLAGS="-f elf64 -rnasm -pnasm -DPIC"
46279:       VPX_X86_ASM=1
46279:     ;;
52191:     Darwin:x86)
43343:       VPX_ASFLAGS="-f macho32 -rnasm -pnasm -DPIC"
43343:       VPX_X86_ASM=1
43343:     ;;
43343:     Darwin:x86_64)
43343:       VPX_ASFLAGS="-f macho64 -rnasm -pnasm -DPIC"
43343:       VPX_X86_ASM=1
43343:     ;;
43394:     WINNT:x86_64)
46219:       if test -z "$GNU_CC"; then
43394:         VPX_ASFLAGS="-f x64 -rnasm -pnasm"
43394:         VPX_X86_ASM=1
46219:       fi
43394:     ;;
52191:     WINNT:x86)
52191:       if test -z "$GNU_CC"; then
52191:         dnl Check for yasm 1.1 or greater.
54653:         if test -n "$COMPILE_ENVIRONMENT" -a -z "$YASM"; then
54652:           AC_MSG_ERROR([yasm 1.1 or greater is required to build libvpx on Win32, but it appears not to be installed.  Install it (included in MozillaBuild 1.5.1 and newer) or configure with --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
54653:         elif test -n "$COMPILE_ENVIRONMENT" -a "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -lt "1" \) ; then
54652:           AC_MSG_ERROR([yasm 1.1 or greater is required to build libvpx on Win32, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.  Upgrade to the newest version (included in MozillaBuild 1.5.1 and newer) or configure with --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
54652:         else
52191:           VPX_ASFLAGS="-f win32 -rnasm -pnasm -DPIC"
52191:           VPX_X86_ASM=1
52191:         fi
52191:       fi
52191:     ;;
57090:     *:arm*)
57090:       if test -n "$GNU_AS" ; then
57090:         VPX_AS=$AS
57090:         dnl These flags are a lie; they're just used to enable the requisite
57090:         dnl opcodes; actual arch detection is done at runtime.
57090:         VPX_ASFLAGS="-march=armv7-a -mfpu=neon"
57090:         VPX_DASH_C_FLAG="-c"
57365:         VPX_AS_CONVERSION='$(PERL) $(topsrcdir)/media/libvpx/build/make/ads2gas.pl'
57090:         VPX_ASM_SUFFIX="$ASM_SUFFIX"
57090:         VPX_ARM_ASM=1
57090:       fi
43343:     esac
52191: 
54652:     if test -n "$COMPILE_ENVIRONMENT" -a -n "$VPX_X86_ASM" -a -z "$VPX_AS"; then
49288:       AC_MSG_ERROR([yasm is a required build tool for this architecture when webm is enabled. You may either install yasm or --disable-webm (which disables the WebM video format). See https://developer.mozilla.org/en/YASM for more details.])
49288:     fi
43343: 
43343:     if test -n "$VPX_X86_ASM"; then
43343:       AC_DEFINE(VPX_X86_ASM)
57090:     elif test -n "$VPX_ARM_ASM"; then
57090:       AC_DEFINE(VPX_ARM_ASM)
43343:     else
52191:       AC_MSG_WARN([No assembler or assembly support for libvpx. Using unoptimized C routines.])
43343:     fi
43342: fi
43342: 
43342: dnl ========================================================
21394: dnl = Disable Wave decoder support
21394: dnl ========================================================
21755: MOZ_ARG_DISABLE_BOOL(wave,
21394: [  --disable-wave          Disable Wave decoder support],
21394:     MOZ_WAVE=,
21394:     MOZ_WAVE=1)
21394: 
21394: if test -n "$MOZ_WAVE"; then
21394:     AC_DEFINE(MOZ_WAVE)
21394:     MOZ_SYDNEYAUDIO=1
21394:     MOZ_MEDIA=1
21394: fi
21394: 
21394: dnl ========================================================
21394: dnl = Handle dependent SYDNEYAUDIO and MEDIA defines
21394: dnl ========================================================
21394: 
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
21394:     AC_DEFINE(MOZ_SYDNEYAUDIO)
21394: fi
21394: 
15751: if test -n "$MOZ_MEDIA"; then
15751:     AC_DEFINE(MOZ_MEDIA)
15751: fi
15751: 
56071: if test -n "$MOZ_VORBIS" -a -n "$MOZ_TREMOR"; then
56071:     AC_MSG_ERROR([MOZ_VORBIS and MOZ_TREMOR are mutually exclusive!  The build system should not allow them both to be set, but they are.  Please file a bug at https://bugzilla.mozilla.org/])
56071: fi
56071: 
43342: if test -n "$MOZ_VORBIS"; then
43342:     AC_DEFINE(MOZ_VORBIS)
43342: fi
43342: 
56071: if test -n "$MOZ_TREMOR"; then
56071:     AC_DEFINE(MOZ_TREMOR)
56071: fi
56071: 
21394: dnl ========================================================
21394: dnl = Check alsa availability on Linux if using sydneyaudio
21394: dnl ========================================================
21394: 
21394: dnl If using sydneyaudio with Linux, ensure that the alsa library is available
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
16300:    case "$target_os" in
16300: linux*)
31710:       PKG_CHECK_MODULES(MOZ_ALSA, alsa, ,
31710:          [echo "$MOZ_ALSA_PKG_ERRORS"
47235:           AC_MSG_ERROR([Need alsa for Ogg, Wave or WebM decoding on Linux.  Disable with --disable-ogg --disable-wave --disable-webm.  (On Ubuntu, you might try installing the package libasound2-dev.)])])
16300:       ;;
16300:    esac
16300: fi
16300: 
15751: dnl ========================================================
29279: dnl Splashscreen
29279: dnl ========================================================
29279: AC_ARG_ENABLE(splashscreen,
29279:               [  --enable-splashscreen   display splashscreen while loading (default=no)],
29279:               [enable_splash="yes"],[enable_splash=""])
29279: if test "x$enable_splash" = "xyes"; then
29279:   MOZ_SPLASHSCREEN=1
29279:   AC_DEFINE(MOZ_SPLASHSCREEN)
29279: fi
29279: AC_SUBST(MOZ_SPLASHSCREEN)
29279: 
29279: dnl ========================================================
    1: dnl Permissions System
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(permissions,
    1: [  --disable-permissions   Disable permissions (popup and cookie blocking)],
    1:     MOZ_PERMISSIONS=,
    1:     MOZ_PERMISSIONS=1
    1: )
    1: 
    1: dnl ========================================================
    1: dnl NegotiateAuth
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(negotiateauth,
    1: [  --disable-negotiateauth Disable GSS-API negotiation ],
    1:     MOZ_AUTH_EXTENSION=,
    1:     MOZ_AUTH_EXTENSION=1 )
    1: 
    1: dnl ========================================================
    1: dnl XTF
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xtf,
    1: [  --disable-xtf           Disable XTF (pluggable xml tags) support],
    1:     MOZ_XTF=,
    1:     MOZ_XTF=1 )
    1: if test "$MOZ_XTF"; then
    1:   AC_DEFINE(MOZ_XTF)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Pref extensions (autoconfig and system-pref)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pref-extensions,
    1: [  --disable-pref-extensions
    1:                           Disable pref extensions such as autoconfig and
    1:                           system-pref],
    1:   MOZ_PREF_EXTENSIONS=,
    1:   MOZ_PREF_EXTENSIONS=1 )
    1: 
    1: dnl ========================================================
    1: dnl = Universalchardet
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(universalchardet,
    1: [  --disable-universalchardet
    1:                           Disable universal encoding detection],
    1:   MOZ_UNIVERSALCHARDET=,
    1:   MOZ_UNIVERSALCHARDET=1 )
    1: 
67748: if test -n "${JAVA_BIN_PATH}"; then
67748:   dnl Look for javac and jar in the specified path.
67748:   JAVA_PATH="$JAVA_BIN_PATH"
67748: else
67748:   dnl No path specified, so look for javac and jar in $JAVA_HOME & $PATH.
67748:   JAVA_PATH="$JAVA_HOME/bin:$PATH"
67748: fi
67748: 
43032: MOZ_PATH_PROG(JAVA, java, :, [$JAVA_PATH])
43032: MOZ_PATH_PROG(JAVAC, javac, :, [$JAVA_PATH])
43032: MOZ_PATH_PROG(JAR, jar, :, [$JAVA_PATH])
43032: 
47975: if test -n "${JAVA_BIN_PATH}" -o "$OS_TARGET" = Android; then
47975:   if test -z "$JAVA" -o "$JAVA" = ":" -o -z "$JAVAC" -o "$JAVAC" = ":" -o -z "$JAR" -o "$JAR" = ":"; then
43032:     AC_MSG_ERROR([The programs java, javac and jar were not found.  Set \$JAVA_HOME to your java sdk directory or use --with-java-bin-path={java-bin-dir}])
43032:   fi
43032: fi
43032: 
    1: dnl ========================================================
58583: dnl = ANGLE OpenGL->D3D translator for WebGL
58583: dnl = * only applies to win32
58583: dnl = * enabled by default (shipping build); requires explicit --disable to disable
58583: dnl ========================================================
58583: MOZ_ANGLE=
58583: MOZ_DIRECTX_SDK_PATH=
62103: MOZ_DIRECTX_SDK_CPU_SUFFIX=
62103: MOZ_D3DX9_VERSION=
62103: MOZ_D3DX9_CAB=
62103: MOZ_D3DCOMPILER_CAB=
62103: MOZ_D3DX9_DLL=
62103: MOZ_D3DCOMPILER_DLL=
58583: case "$target_os" in
63450: *mingw*)
58583:     MOZ_ANGLE=1
58583:     ;;
58583: esac
58583: 
62103: # The DirectX SDK libraries are split into x86 and x64 sub-directories
62103: case "${target_cpu}" in
62103: i*86)
62103:   MOZ_DIRECTX_SDK_CPU_SUFFIX=x86
62103:   ;;
62103: x86_64)
62103:   MOZ_DIRECTX_SDK_CPU_SUFFIX=x64
62103:   # currently we disable ANGLE in 64bit builds
62103:   MOZ_ANGLE=
62103:   ;;
62103: esac
62103: 
58583: if test -n "$MOZ_ANGLE"; then
58583: MOZ_ARG_DISABLE_BOOL(angle,
58583: [  --disable-angle     Disable building of ANGLE for WebGL->D3D translation],
58583:     MOZ_ANGLE=,
58583:     MOZ_ANGLE=1)
58583: 
58583: if test -n "$MOZ_ANGLE"; then
58583:   if test -z "$_WIN32_MSVC"; then
58583:     AC_MSG_ERROR([Building ANGLE requires MSVC.  To build without ANGLE, reconfigure with --disable-angle.])
58583:   fi
58583: 
61669:   # Get the SDK path from the registry.
70031:   # First try to get the June 2010 SDK
70031:   MOZ_DIRECTX_SDK_REG_KEY=`reg query 'HKLM\Software\Microsoft\DirectX' //s | grep 'Microsoft DirectX SDK (June 2010)' | head -n 1`
70031:   if test -z "$MOZ_DIRECTX_SDK_REG_KEY" ; then
70031:     # Otherwise just take whatever comes first
61669:     MOZ_DIRECTX_SDK_REG_KEY=`reg query 'HKLM\Software\Microsoft\DirectX' //s | grep 'Microsoft DirectX SDK' | head -n 1`
70031:   fi
70456: 
70456:   if test -n "`echo $MOZ_DIRECTX_SDK_REG_KEY | grep 'February 2010'`" ; then
70456:     AC_MSG_WARN([Found the February 2010 DirectX SDK. This is too old. We now require the June 2010 DirectX SDK, or newer.])
70456:   else
70031:     MOZ_DIRECTX_SDK_PATH=`reg query "$MOZ_DIRECTX_SDK_REG_KEY" //v InstallPath | grep REG_SZ | sed 's/.*\([[a-zA-Z]]\)\\:\\\\/\\1\\:\\\\/'`
70456:   fi
61669: 
61658:   MOZ_ANGLE=
61658: 
58583:   if test -n "$MOZ_DIRECTX_SDK_PATH" ; then
62103:     if test -f "$MOZ_DIRECTX_SDK_PATH"/include/d3dx9.h && test -f "$MOZ_DIRECTX_SDK_PATH"/lib/$MOZ_DIRECTX_SDK_CPU_SUFFIX/dxguid.lib ; then
62103:       AC_MSG_RESULT([Found DirectX SDK via registry, using $MOZ_DIRECTX_SDK_PATH])
58583:       MOZ_ANGLE=1
58583:     fi
58583:   fi
58583: 
58583:   if test -z "$MOZ_ANGLE" ; then
70456:     AC_MSG_WARN([Couldn't find the DirectX SDK, needed for ANGLE. Please install it (June 2010 or newer). To explicitly build without ANGLE, reconfigure with --disable-angle.])
58583:     AC_MSG_WARN([This will become an error in the future.])
58583:   fi
62103: 
62105:   if test -n "$MOZ_ANGLE" ; then
70456:     # Get the SDK numeric version (e.g. 43) by looking at the dependencies of d3dx9.lib
62103:     MOZ_D3DX9_VERSION=`dumpbin //headers "$MOZ_DIRECTX_SDK_PATH"/lib/$MOZ_DIRECTX_SDK_CPU_SUFFIX/d3dx9.lib | egrep d3dx9_[[0-9]][[0-9]]\.dll | head -n1 | sed 's/.*\([[0-9]][[0-9]]\).*/\\1/g'`
62103: 
62103:     if test -z "$MOZ_D3DX9_VERSION" ; then
62103:       MOZ_ANGLE=
62103:       AC_MSG_WARN([Couldn't determine the D3DX9 version! Disabling ANGLE.])
62105:       AC_MSG_WARN([This will become an error in the future.])
62105:     fi
62105: 
62105:     if test -n "$MOZ_ANGLE" ; then
62103:       MOZ_D3DX9_CAB=`find "$MOZ_DIRECTX_SDK_PATH"/Redist -name *d3dx9_${MOZ_D3DX9_VERSION}_${MOZ_DIRECTX_SDK_CPU_SUFFIX}.cab | head -n1`
62103:       MOZ_D3DCOMPILER_CAB=`find "$MOZ_DIRECTX_SDK_PATH"/Redist -name *D3DCompiler_${MOZ_D3DX9_VERSION}_${MOZ_DIRECTX_SDK_CPU_SUFFIX}.cab | head -n1`
62103: 
62103:       MOZ_D3DX9_DLL=d3dx9_$MOZ_D3DX9_VERSION.dll
62103:       MOZ_D3DCOMPILER_DLL=D3DCompiler_$MOZ_D3DX9_VERSION.dll
58583:     fi
58583:   fi
62105: fi
62105: fi
58583: 
58583: dnl ========================================================
 4389: dnl = Breakpad crash reporting (on by default on supported platforms)
    1: dnl ========================================================
    1: 
39878: case $target in
56361: i?86-*-mingw*|x86_64-*-mingw*)
 4389:   MOZ_CRASHREPORTER=1
39878:   ;;
50390: i?86-apple-darwin*|powerpc-apple-darwin*|x86_64-apple-darwin*)
39878:   MOZ_CRASHREPORTER=1
39878:   ;;
40607: i?86-*-linux*|x86_64-*-linux*|arm-*-linux*)
61739:   if test "$MOZ_ENABLE_GTK2"; then
39878:     MOZ_CRASHREPORTER=1
61739:   fi
39878:   ;;
70914: *-android*|*-linuxandroid*)
56281:   MOZ_CRASHREPORTER=1
56281:   ;;
39878: *solaris*)
39878:   MOZ_CRASHREPORTER=1
39878:   ;;
39878: esac
 4389: 
 4389: MOZ_ARG_DISABLE_BOOL(crashreporter,
 4389: [  --disable-crashreporter Disable breakpad crash reporting],
 4389:     MOZ_CRASHREPORTER=,
 4389:     MOZ_CRASHREPORTER=1)
 4389: 
 4389: if test -n "$MOZ_CRASHREPORTER"; then
 4389:    AC_DEFINE(MOZ_CRASHREPORTER)
 2639: 
56279:   if (test "$OS_TARGET" = "Linux" -o "$OS_ARCH" = "SunOS") && \
 3665:     test -z "$SKIP_LIBRARY_CHECKS"; then
10553:     PKG_CHECK_MODULES(MOZ_GTHREAD, gthread-2.0)
10553:     AC_SUBST(MOZ_GTHREAD_CFLAGS)
10553:     AC_SUBST(MOZ_GTHREAD_LIBS)
10553: 
63478:     MOZ_CHECK_HEADERS([curl/curl.h], [], [AC_MSG_ERROR([Couldn't find curl/curl.h which is required for the crash reporter.  Use --disable-crashreporter to disable the crash reporter.])])
 3665:   fi
 3665: fi
    1: 
14003: MOZ_ARG_WITH_STRING(crashreporter-enable-percent,
43027: [  --with-crashreporter-enable-percent=NN
43027:                           Enable sending crash reports by default on NN% of users. (default=100)],
14003: [ val=`echo $withval | sed 's/[^0-9]//g'`
14003:     MOZ_CRASHREPORTER_ENABLE_PERCENT="$val"])
14003: 
14003: if test -z "$MOZ_CRASHREPORTER_ENABLE_PERCENT"; then
14003:    MOZ_CRASHREPORTER_ENABLE_PERCENT=100
14003: fi
14003: AC_DEFINE_UNQUOTED(MOZ_CRASHREPORTER_ENABLE_PERCENT, $MOZ_CRASHREPORTER_ENABLE_PERCENT)
14003: 
    1: dnl ========================================================
64166: dnl = libjpeg-turbo configuration
64166: dnl ========================================================
64166: 
64427: MOZ_ARG_DISABLE_BOOL(libjpeg_turbo,
64427: [ --disable-libjpeg-turbo  Disable optimized jpeg decoding routines],
64427:     MOZ_LIBJPEG_TURBO=,
64427:     MOZ_LIBJPEG_TURBO=1)
64427: 
64166: dnl Detect if we can use yasm to compile libjpeg-turbo's optimized assembly
64166: dnl files.
64427: 
64427: if test -n "$MOZ_LIBJPEG_TURBO"; then
64427: 
64427:   dnl Do we support libjpeg-turbo on this platform?
64166:   case "$OS_ARCH:$OS_TEST" in
64166:   Linux:x86|Linux:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf32 -rnasm -pnasm -DPIC -DELF"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   Linux:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf64 -rnasm -pnasm -D__x86_64__ -DPIC -DELF"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   SunOS:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf32 -rnasm -pnasm -DPIC -DELF"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   SunOS:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f elf64 -rnasm -pnasm -D__x86_64__ -DPIC -DELF"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   Darwin:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f macho32 -rnasm -pnasm -DPIC -DMACHO"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   Darwin:x86_64)
64166:     LIBJPEG_TURBO_ASFLAGS="-f macho64 -rnasm -pnasm -D__x86_64__ -DPIC -DMACHO"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   WINNT:x86|WINNT:i?86)
64166:     LIBJPEG_TURBO_ASFLAGS="-f win32 -rnasm -pnasm -DPIC -DWIN32"
64166:     LIBJPEG_TURBO_X86_ASM=1
64166:   ;;
64166:   WINNT:x86_64)
67573:     LIBJPEG_TURBO_ASFLAGS="-f win64 -rnasm -pnasm -D__x86_64__ -DPIC -DWIN64 -DMSVC"
64166:     LIBJPEG_TURBO_X64_ASM=1
64166:   ;;
64166:   esac
64166: 
64427: fi
64427: 
64427: dnl If we're on a system which supports libjpeg-turbo's asm routines and
64427: dnl --disable-libjpeg-turbo wasn't passed, check for yasm, and error out if it
64427: dnl doesn't exist or we have too old of a version.
64427: if test -n "$LIBJPEG_TURBO_X86_ASM" -o -n "$LIBJPEG_TURBO_X64_ASM" ; then
64427:     AC_MSG_CHECKING([for YASM assembler])
64427:     AC_CHECK_PROGS(LIBJPEG_TURBO_AS, yasm, "")
64427: 
64427:     if test -z "$LIBJPEG_TURBO_AS" ; then
64427:         AC_MSG_ERROR([yasm is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you do not appear to have yasm installed.  Either install it or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
64427:     fi
64427: 
67788:     dnl Check that we have the right yasm version.  We require 1.0.1 or newer
67788:     dnl on Linux and 1.1 or newer everywhere else.
67788:     if test "$OS_ARCH" = "Linux" ; then
67788:         if test "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -eq "0" -a "$_YASM_RELEASE" -lt "1" \) ; then
68506:             AC_MSG_ERROR([yasm 1.0.1 or greater is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.$_YASM_RELEASE.  Upgrade to the newest version or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
67788:         fi
67788:     else
64427:         if test "$_YASM_MAJOR_VERSION" -lt "1" -o \( "$_YASM_MAJOR_VERSION" -eq "1" -a "$_YASM_MINOR_VERSION" -lt "1" \) ; then
64427:             AC_MSG_ERROR([yasm 1.1 or greater is required to build with libjpeg-turbo's optimized JPEG decoding routines, but you appear to have version $_YASM_MAJOR_VERSION.$_YASM_MINOR_VERSION.  Upgrade to the newest version or configure with --disable-libjpeg-turbo to use the pure C JPEG decoder.  See https://developer.mozilla.org/en/YASM for more details.])
64427:         fi
64427:     fi
67788: fi
64166: 
64166: if test -n "$LIBJPEG_TURBO_X86_ASM"; then
64166:     AC_DEFINE(LIBJPEG_TURBO_X86_ASM)
64166: elif test -n "$LIBJPEG_TURBO_X64_ASM"; then
64166:     AC_DEFINE(LIBJPEG_TURBO_X64_ASM)
64427: elif test -n "$MOZ_LIBJPEG_TURBO"; then
64427:     dnl Warn if we're not building the optimized routines, even though the user
64427:     dnl didn't specify --disable-libjpeg-turbo.
64166:     AC_MSG_WARN([No assembler or assembly support for libjpeg-turbo.  Using unoptimized C routines.])
64166: fi
64166: 
64166: dnl ========================================================
    1: dnl = Enable compilation of specific extension modules
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_ENABLE_STRING(extensions,
    1: [  --enable-extensions     Enable extensions],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
47975:     if test "$option" = "yes" -o "$option" = "all"; then
20889:         AC_MSG_ERROR([--enable-extensions=$option is no longer supported.])
47975:     elif test "$option" = "no" -o "$option" = "none"; then
    1:         MOZ_EXTENSIONS=""
    1:     elif test "$option" = "default"; then
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $MOZ_EXTENSIONS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         MOZ_EXTENSIONS=`echo "$MOZ_EXTENSIONS" | sed "s/ ${option}//"`
    1:     else
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $option"
    1:     fi
    1: done],
    1:     MOZ_EXTENSIONS="$MOZ_EXTENSIONS_DEFAULT")
    1: 
47975: if test -z "$MOZ_ENABLE_GNOMEVFS" -a -z "$MOZ_GNOMEVFS_LIBS" -a `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
    1:     # Suppress warning on non-X11 platforms
    1:     if test -n "$MOZ_X11"; then
    1:         AC_MSG_WARN([Cannot build gnomevfs without required libraries. Removing gnomevfs from MOZ_EXTENSIONS.])
    1:     fi
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gnomevfs||'`
    1: fi
    1: 
32528: dnl Do not build gnomevfs with libxul based apps
47975: if test -n "$LIBXUL_SDK_DIR" -a `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
32528:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gnomevfs||'`
32528: fi
32528: 
47975: if test -z "$MOZ_ENABLE_GIO" -a `echo "$MOZ_EXTENSIONS" | grep -c gio` -ne 0; then
31951:     # Suppress warning on non-X11 platforms
31951:     if test -n "$MOZ_X11"; then
31951:         AC_MSG_WARN([Cannot build gio without required libraries. Removing gio from MOZ_EXTENSIONS.])
31951:     fi
31951:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gio||'`
31951: fi
31951: 
32528: dnl Do not build gio with libxul based apps
47975: if test -n "$LIBXUL_SDK_DIR" -a `echo "$MOZ_EXTENSIONS" | grep -c gio` -ne 0; then
32528:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gio||'`
32528: fi
32528: 
47975: if test -z "$MOZ_JSDEBUGGER" -a `echo "$MOZ_EXTENSIONS" | grep -c venkman` -ne 0; then
    1:     AC_MSG_WARN([Cannot build venkman without JavaScript debug library. Removing venkman from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|venkman||'`
    1: fi
    1: 
56985: dnl xforms requires xtf
47975: if test -z "$MOZ_XTF" -a `echo "$MOZ_EXTENSIONS" | grep -c xforms` -ne 0; then
    1:     AC_MSG_WARN([Cannot build XForms without XTF support.  Removing XForms from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|xforms||g'`
    1: fi
    1: 
    1: dnl Remove dupes
    1: MOZ_EXTENSIONS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_EXTENSIONS}`
    1: 
 2776: dnl Ensure every extension exists, to avoid mostly-inscrutable error messages
42587: dnl when trying to build a nonexistent extension.
 2776: for extension in $MOZ_EXTENSIONS; do
 2776:     if test ! -d "${srcdir}/extensions/${extension}"; then
 2776:         AC_MSG_ERROR([Unrecognized extension provided to --enable-extensions: ${extension}.])
 2776:     fi
 2776: done
 2776: 
72208: if test -n "$MOZ_USE_NATIVE_POPUP_WINDOWS"; then
72208:   AC_DEFINE(MOZ_USE_NATIVE_POPUP_WINDOWS)
72208: fi
72208: 
    1: dnl ========================================================
70848: dnl SVG Display Lists
70848: dnl ========================================================
70848: if test -n "$MOZ_SVG_DLISTS"; then
70848:   AC_DEFINE(MOZ_SVG_DLISTS)
70848: fi
70848: 
70848: dnl ========================================================
23697: dnl SMIL
23697: dnl ========================================================
25995: MOZ_SMIL=1
25995: MOZ_ARG_DISABLE_BOOL(smil,
25995: [  --disable-smil          Disable SMIL animation support],
25995:     MOZ_SMIL=,
25995:     MOZ_SMIL=1 )
23697: if test -n "$MOZ_SMIL"; then
23697:   AC_DEFINE(MOZ_SMIL)
23697: fi
23697: 
23697: dnl ========================================================
24104: dnl Build Freetype in the tree
24104: dnl ========================================================
24104: MOZ_ARG_ENABLE_BOOL(tree-freetype,
24104: [  --enable-tree-freetype  Enable Tree FreeType],
24104:     MOZ_TREE_FREETYPE=1,
24104:     MOZ_TREE_FREETYPE= )
24104: if test -n "$MOZ_TREE_FREETYPE"; then
57366:    if test -n "$_WIN32_MSVC"; then
57366:       AC_ERROR("building with in-tree freetype is not supported on MSVC")
57366:    fi
24104:    AC_DEFINE(MOZ_TREE_FREETYPE)
24104:    AC_SUBST(MOZ_TREE_FREETYPE)
24104:    MOZ_ENABLE_CAIRO_FT=1       
24104:    FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
27324:    FT2_CFLAGS='-I$(topsrcdir)/modules/freetype2/include'
27324:    CAIRO_FT_CFLAGS='-I$(topsrcdir)/modules/freetype2/include'
57366:    FT2_LIBS='$(call EXPAND_LIBNAME_PATH,freetype,$(DEPTH)/modules/freetype2/.libs)'
57366:    CAIRO_FT_LIBS='$(call EXPAND_LIBNAME_PATH,freetype,$(DEPTH)/modules/freetype2/.libs)'
24104:    AC_DEFINE(HAVE_FT_BITMAP_SIZE_Y_PPEM)
24104:    AC_DEFINE(HAVE_FT_GLYPHSLOT_EMBOLDEN)
24104:    AC_DEFINE(HAVE_FT_LOAD_SFNT_TABLE)
24104:    AC_SUBST(CAIRO_FT_CFLAGS)
24104: fi
24104: 
24104: dnl ========================================================
    1: dnl Installer
    1: dnl ========================================================
    1: case "$target_os" in
68662:     aix*|solaris*|linux*|mingw*|os2*)
    1:         MOZ_INSTALLER=1
    1:         ;;
    1: esac
    1: 
    1: MOZ_ARG_DISABLE_BOOL(installer,
    1: [  --disable-installer     Disable building of installer],
    1:     MOZ_INSTALLER=,
    1:     MOZ_INSTALLER=1)
24066: if test -n "$MOZ_INSTALLER" -a "$OS_ARCH" = "WINNT"; then
43429:     # Disable installer for Windows builds that use the new toolkit if the
43429:     # required major version and minimum minor version of Unicode NSIS isn't in
43429:     # the path.
43429:     REQ_NSIS_MAJOR_VER=2
43429:     MIN_NSIS_MINOR_VER=33
43433:     MOZ_PATH_PROGS(MAKENSISU, $MAKENSISU makensisu-2.46 makensisu makensis)
47975:     if test -z "$MAKENSISU" -o "$MAKENSISU" = ":"; then
43429:         AC_MSG_ERROR([To build the installer you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path. To build without the installer reconfigure using --disable-installer.])
43429:     fi
43429:     changequote(,)
43433:     MAKENSISU_VER=`"$MAKENSISU" -version 2>/dev/null | sed -e '/-Unicode/!s/.*//g' -e 's/^v\([0-9]\+\.[0-9]\+\)\-Unicode$/\1/g'`
43429:     changequote([,])
58494:     if test ! "$MAKENSISU_VER" = ""; then
43433:         MAKENSISU_MAJOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $1 }'`
43433:         MAKENSISU_MINOR_VER=`echo $MAKENSISU_VER | $AWK -F\. '{ print $2 }'`
43429:     fi
43429:     AC_MSG_CHECKING([for Unicode NSIS with major version == $REQ_NSIS_MAJOR_VER and minor version >= $MIN_NSIS_MINOR_VER])
58494:     if test "$MAKENSISU_VER" = "" ||
58494:        test ! "$MAKENSISU_MAJOR_VER" = "$REQ_NSIS_MAJOR_VER" -o \
47975:             ! "$MAKENSISU_MINOR_VER" -ge $MIN_NSIS_MINOR_VER; then
43429:         AC_MSG_RESULT([no])
43429:         AC_MSG_ERROR([To build the installer you must have the latest MozillaBuild or Unicode NSIS with a major version of $REQ_NSIS_MAJOR_VER and a minimum minor version of $MIN_NSIS_MINOR_VER in your path. To build without the installer reconfigure using --disable-installer.])
43429:     fi
43429:     AC_MSG_RESULT([yes])
    1: fi
    1: 
    1: AC_SUBST(MOZ_INSTALLER)
    1: 
    1: AC_MSG_CHECKING([for tar archiver])
    1: AC_CHECK_PROGS(TAR, gnutar gtar tar, "")
    1: if test -z "$TAR"; then
    1:     AC_MSG_ERROR([no tar archiver found in \$PATH])
    1: fi
    1: AC_MSG_RESULT([$TAR])
    1: AC_SUBST(TAR)
    1: 
18450: AC_MSG_CHECKING([for wget])
18450: AC_CHECK_PROGS(WGET, wget, "")
18450: AC_MSG_RESULT([$WGET])
18450: AC_SUBST(WGET)
18450: 
    1: dnl ========================================================
    1: dnl Updater
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_DISABLE_BOOL(updater,
    1: [  --disable-updater       Disable building of updater],
    1:     MOZ_UPDATER=,
    1:     MOZ_UPDATER=1 )
43430: 
43430: if test -n "$MOZ_UPDATER"; then
43430:     AC_DEFINE(MOZ_UPDATER)
43430: fi
    1: 
    1: # app update channel is 'default' when not supplied.
    1: MOZ_ARG_ENABLE_STRING([update-channel],
    1: [  --enable-update-channel=CHANNEL
    1:                           Select application update channel (default=default)],
    1:     MOZ_UPDATE_CHANNEL=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_UPDATE_CHANNEL"; then
    1:     MOZ_UPDATE_CHANNEL=default
    1: fi
    1: AC_DEFINE_UNQUOTED(MOZ_UPDATE_CHANNEL, $MOZ_UPDATE_CHANNEL)
46184: AC_SUBST(MOZ_UPDATE_CHANNEL)
    1: 
    1: # tools/update-packaging is not checked out by default.
    1: MOZ_ARG_ENABLE_BOOL(update-packaging,
    1: [  --enable-update-packaging
    1:                           Enable tools/update-packaging],
    1:     MOZ_UPDATE_PACKAGING=1,
    1:     MOZ_UPDATE_PACKAGING= )
    1: AC_SUBST(MOZ_UPDATE_PACKAGING)
    1: 
    1: dnl ========================================================
    1: dnl leaky
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(leaky,
    1: [  --enable-leaky          Build leaky memory tool],
    1:     MOZ_LEAKY=1,
    1:     MOZ_LEAKY=)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl build the tests by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(tests,
    1: [  --disable-tests         Do not build test libraries & programs],
    1:     ENABLE_TESTS=,
    1:     ENABLE_TESTS=1 )
    1: 
    1: dnl ========================================================
55800: dnl parental controls (for Windows Vista)
14121: dnl ========================================================
14121: MOZ_ARG_DISABLE_BOOL(parental-controls,
14121: [  --disable-parental-controls
14121:                           Do not build parental controls],
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=1,
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=)
14121: if test -n "$MOZ_DISABLE_PARENTAL_CONTROLS"; then
14121:     AC_DEFINE(MOZ_DISABLE_PARENTAL_CONTROLS)
14683: fi
14683: 
14121: AC_SUBST(MOZ_DISABLE_PARENTAL_CONTROLS)
14121: 
14121: dnl ========================================================
54926: dnl = Disable DOMCrypto
54926: dnl ========================================================
54926: if test -n "$MOZ_DISABLE_DOMCRYPTO"; then
54926:     AC_DEFINE(MOZ_DISABLE_DOMCRYPTO)
54926: fi
54926: 
54926: dnl ========================================================
    1: dnl =
    1: dnl = Module specific options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Individual module options)
    1: 
    1: dnl ========================================================
    1: dnl = Disable feed handling components
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(feeds,
    1: [  --disable-feeds         Disable feed handling and processing components],
    1:     MOZ_FEEDS=,
    1:     MOZ_FEEDS=1 )
    1: if test -n "$MOZ_FEEDS"; then
    1:     AC_DEFINE(MOZ_FEEDS)
    1: else
    1:     if test "$MOZ_BUILD_APP" = "browser"; then
    1:         AC_MSG_ERROR([Cannot build Firefox with --disable-feeds.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Enable mozStorage
    1: dnl ========================================================
    1: dnl Implicitly enabled by default if building calendar or places
    1: MOZ_ARG_ENABLE_BOOL(storage,
    1: [  --enable-storage        Enable mozStorage module and related components],
    1:     MOZ_STORAGE=1,
    1:     MOZ_STORAGE= )
    1: if test -n "$MOZ_STORAGE"; then
    1:     AC_DEFINE(MOZ_STORAGE)
    1: fi
    1: 
    1: dnl ========================================================
12096: dnl Check for sqlite
12096: dnl ========================================================
12096: 
12096: MOZ_NATIVE_SQLITE=
12096: MOZ_ARG_ENABLE_BOOL(system-sqlite,
12096: [  --enable-system-sqlite  Use system sqlite (located with pkgconfig)],
12096: MOZ_NATIVE_SQLITE=1,
12096: MOZ_NATIVE_SQLITE= )
12096: 
12096: if test -z "$MOZ_NATIVE_SQLITE"
12096: then
12096:     SQLITE_CFLAGS=
36200:     SQLITE_LIBS='$(call EXPAND_LIBNAME_PATH,mozsqlite3,$(DIST)/lib)'
12096: else
39713:     dnl ============================
39713:     dnl === SQLite Version check ===
39713:     dnl ============================
39713:     dnl Check to see if the system SQLite package is new enough.
12096:     PKG_CHECK_MODULES(SQLITE, sqlite3 >= $SQLITE_VERSION)
39713: 
39713:     dnl ==================================
39713:     dnl === SQLITE_SECURE_DELETE check ===
39713:     dnl ==================================
39713:     dnl Check to see if the system SQLite package is compiled with
36518:     dnl SQLITE_SECURE_DELETE enabled.
39713:     AC_MSG_CHECKING(for SQLITE_SECURE_DELETE support in system SQLite)
36518:     _SAVE_CFLAGS="$CFLAGS"
36518:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
36518:     _SAVE_LIBS="$LIBS"
36518:     LIBS="$LIBS $SQLITE_LIBS"
36518:     AC_CACHE_VAL(ac_cv_sqlite_secure_delete,[
36518:         AC_TRY_RUN([
36518:             #include "sqlite3.h"
36518: 
36518:             int main(int argc, char **argv){
40728:               return !sqlite3_compileoption_used("SQLITE_SECURE_DELETE");
36518:             }],
36518:             ac_cv_sqlite_secure_delete=yes,
36518:             ac_cv_sqlite_secure_delete=no,
36518:             ac_cv_sqlite_secure_delete=no
36518:         )
36518:     ])
36518:     AC_MSG_RESULT($ac_cv_sqlite_secure_delete)
36518:     CFLAGS="$_SAVE_CFLAGS"
36518:     LIBS="$_SAVE_LIBS"
36518:     if test "x$ac_cv_sqlite_secure_delete" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_SECURE_DELETE.])
39713:     fi
39713: 
39713:     dnl ===============================
39713:     dnl === SQLITE_THREADSAFE check ===
39713:     dnl ===============================
39713:     dnl Check to see if the system SQLite package is compiled with
39713:     dnl SQLITE_THREADSAFE enabled.
39713:     AC_MSG_CHECKING(for SQLITE_THREADSAFE support in system SQLite)
39713:     _SAVE_CFLAGS="$CFLAGS"
39713:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
39713:     _SAVE_LIBS="$LIBS"
39713:     LIBS="$LIBS $SQLITE_LIBS"
39713:     AC_CACHE_VAL(ac_cv_sqlite_threadsafe,[
39713:         AC_TRY_RUN([
39713:             #include "sqlite3.h"
39713: 
39713:             int main(int argc, char **argv){
39713:               return !sqlite3_compileoption_used("SQLITE_THREADSAFE=1");
39713:             }],
39713:             ac_cv_sqlite_threadsafe=yes,
39713:             ac_cv_sqlite_threadsafe=no,
39713:             ac_cv_sqlite_threadsafe=no
39713:         )
39713:     ])
39713:     AC_MSG_RESULT($ac_cv_sqlite_threadsafe)
39713:     CFLAGS="$_SAVE_CFLAGS"
39713:     LIBS="$_SAVE_LIBS"
39713:     if test "x$ac_cv_sqlite_threadsafe" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_THREADSAFE.])
39713:     fi
39713: 
39713:     dnl ================================
39713:     dnl === SQLITE_ENABLE_FTS3 check ===
39713:     dnl ================================
39713:     dnl check to see if the system SQLite package is compiled with
44141:     dnl SQLITE_ENABLE_FTS3 enabled.
39713:     AC_MSG_CHECKING(for SQLITE_ENABLE_FTS3 support in system SQLite)
39713:     _SAVE_CFLAGS="$CFLAGS"
39713:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
39713:     _SAVE_LIBS="$LIBS"
39713:     LIBS="$LIBS $SQLITE_LIBS"
39713:     AC_CACHE_VAL(ac_cv_sqlite_enable_fts3,[
39713:         AC_TRY_RUN([
39713:             #include "sqlite3.h"
39713: 
39713:             int main(int argc, char **argv){
40728:               return !sqlite3_compileoption_used("SQLITE_ENABLE_FTS3");
39713:             }],
39713:             ac_cv_sqlite_enable_fts3=yes,
39713:             ac_cv_sqlite_enable_fts3=no,
39713:             ac_cv_sqlite_enable_fts3=no
39713:         )
39713:     ])
39713:     AC_MSG_RESULT($ac_cv_sqlite_enable_fts3)
39713:     CFLAGS="$_SAVE_CFLAGS"
39713:     LIBS="$_SAVE_LIBS"
39713:     if test "x$ac_cv_sqlite_enable_fts3" = "xno"; then
39713:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_FTS3.])
39543:     fi
44141: 
44141:     dnl =========================================
44141:     dnl === SQLITE_ENABLE_UNLOCK_NOTIFY check ===
44141:     dnl =========================================
44141:     dnl check to see if the system SQLite package is compiled with
44141:     dnl SQLITE_ENABLE_UNLOCK_NOTIFY enabled.
44141:     AC_MSG_CHECKING(for SQLITE_ENABLE_UNLOCK_NOTIFY support in system SQLite)
44141:     _SAVE_CFLAGS="$CFLAGS"
44141:     CFLAGS="$CFLAGS $SQLITE_CFLAGS"
44141:     _SAVE_LIBS="$LIBS"
44141:     LIBS="$LIBS $SQLITE_LIBS"
44141:     AC_CACHE_VAL(ac_cv_sqlite_enable_unlock_notify,[
44141:         AC_TRY_RUN([
44141:             #include "sqlite3.h"
44141: 
44141:             int main(int argc, char **argv){
44141:               return !sqlite3_compileoption_used("SQLITE_ENABLE_UNLOCK_NOTIFY");
44141:             }],
44141:             ac_cv_sqlite_enable_unlock_notify=yes,
44141:             ac_cv_sqlite_enable_unlock_notify=no,
44141:             ac_cv_sqlite_enable_unlock_notify=no
44141:         )
44141:     ])
44141:     AC_MSG_RESULT($ac_cv_sqlite_enable_unlock_notify)
44141:     CFLAGS="$_SAVE_CFLAGS"
44141:     LIBS="$_SAVE_LIBS"
44141:     if test "x$ac_cv_sqlite_enable_unlock_notify" = "xno"; then
44141:         AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_UNLOCK_NOTIFY.])
36518:     fi
12096: fi
12096: 
64502: if test -n "$MOZ_NATIVE_SQLITE"; then
64502:     AC_DEFINE(MOZ_NATIVE_SQLITE)
64502: fi
12096: AC_SUBST(MOZ_NATIVE_SQLITE)
12096: 
16570: dnl ========================================================
13679: dnl = Enable help viewer (off by default)
13679: dnl ========================================================
13679: if test -n "$MOZ_HELP_VIEWER"; then
41442:      dnl Do this if defined in confvars.sh
13679:      AC_DEFINE(MOZ_HELP_VIEWER)
13679: fi
13679: 
12096: dnl ========================================================
    1: dnl = Enable safe browsing (anti-phishing)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(safe-browsing,
    1: [  --enable-safe-browsing  Enable safe browsing (anti-phishing) implementation],
    1:     MOZ_SAFE_BROWSING=1,
    1:     MOZ_SAFE_BROWSING= )
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     AC_DEFINE(MOZ_SAFE_BROWSING)
    1: fi
    1: AC_SUBST(MOZ_SAFE_BROWSING)
    1: 
    1: dnl ========================================================
    1: dnl = Enable url-classifier
    1: dnl ========================================================
    1: dnl Implicitly enabled by default if building with safe-browsing
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     MOZ_URL_CLASSIFIER=1
    1: fi
    1: MOZ_ARG_ENABLE_BOOL(url-classifier,
    1: [  --enable-url-classifier Enable url classifier module],
    1:     MOZ_URL_CLASSIFIER=1,
    1:     MOZ_URL_CLASSIFIER= )
    1: if test -n "$MOZ_URL_CLASSIFIER"; then
    1:     AC_DEFINE(MOZ_URL_CLASSIFIER)
    1: fi
    1: AC_SUBST(MOZ_URL_CLASSIFIER)
    1: 
    1: dnl ========================================================
 5928: dnl = Disable zipwriter
 5928: dnl ========================================================
 5928: MOZ_ARG_DISABLE_BOOL(zipwriter,
 5928: [  --disable-zipwriter     Disable zipwriter component],
 5928:     MOZ_ZIPWRITER=,
 5928:     MOZ_ZIPWRITER=1 )
 5928: AC_SUBST(MOZ_ZIPWRITER)
 5928: 
 5928: dnl ========================================================
51789: dnl = libconic
51789: dnl ========================================================
51789: dnl superseded by QtNetwork starting from 4.7
35003: MOZ_ENABLE_LIBCONIC=1
51789: 
51789: if test -n "$MOZ_ENABLE_QT"; then
51789:   if test "$MOZ_ENABLE_QTNETWORK"; then
51789:     MOZ_ENABLE_LIBCONIC=
51789:   fi
51789: fi
51789: 
35003: MOZ_ARG_DISABLE_BOOL(libconic,
35003: [  --disable-libconic      Disable libconic],
35003:     MOZ_ENABLE_LIBCONIC=,
35003:     MOZ_ENABLE_LIBCONIC=1 )
35003: 
35003: if test -n "$MOZ_ENABLE_LIBCONIC"; then
35003:     PKG_CHECK_MODULES(LIBCONIC, conic,
35003:                       MOZ_ENABLE_LIBCONIC=1,
35003:                       MOZ_ENABLE_LIBCONIC=)
35003: fi
35003: if test "$MOZ_ENABLE_LIBCONIC"; then
35003:     AC_DEFINE(MOZ_ENABLE_LIBCONIC)
35003: fi
35003: 
35003: AC_SUBST(MOZ_ENABLE_LIBCONIC)
35003: AC_SUBST(LIBCONIC_CFLAGS)
35003: AC_SUBST(LIBCONIC_LIBS)
35003:  
35003: dnl ========================================================
38014: dnl = Maemo checks
38014: dnl ========================================================
38014: 
38014: MAEMO_SDK_TARGET_VER=-1
38014: 
38014: MOZ_ARG_WITH_STRING(maemo-version,
38014: [  --with-maemo-version=MAEMO_SDK_TARGET_VER
38014:                           Maemo SDK Version],
38014:   MAEMO_SDK_TARGET_VER=$withval)
38014: 
38014: case "$MAEMO_SDK_TARGET_VER" in
38014: 5)
38014:     MOZ_PLATFORM_MAEMO=5
38014:     ;;
38014: 
38014: 6)
38014:     MOZ_PLATFORM_MAEMO=6
38014:     ;;
38014: 
38014: -1)
38014:     dnl We aren't compiling for Maemo, move on.
38014:     ;;
38014: *)
38014:     AC_MSG_ERROR([Unknown Maemo Version.  Try setting --with-maemo-version to 5 or 6.])
38014:     ;;
38014: esac
38014: 
38014: if test $MOZ_PLATFORM_MAEMO; then
38014:    AC_DEFINE_UNQUOTED([MOZ_PLATFORM_MAEMO], $MOZ_PLATFORM_MAEMO)
38014: 
38014:    if test -z "$MOZ_ENABLE_DBUS"; then
38014:        AC_MSG_ERROR([DBus is required when building for Maemo])
38014:    fi
38014: 
38014:    MOZ_GFX_OPTIMIZE_MOBILE=1
38014:    MOZ_WEBGL_GLX=
40748:    MOZ_MAEMO_LIBLOCATION=
38014: 
38014:    if test $MOZ_PLATFORM_MAEMO = 5; then
25500:       dnl if we have Xcomposite we should also have Xdamage and Xfixes
63478:       MOZ_CHECK_HEADERS([X11/extensions/Xdamage.h], [],
38014:           [AC_MSG_ERROR([Couldn't find X11/extensions/Xdamage.h which is required for composited plugins.])])
25500:       AC_CHECK_LIB(Xcomposite, XCompositeRedirectWindow, [XCOMPOSITE_LIBS="-lXcomposite -lXdamage -lXfixes"],
25500:                    [MISSING_X="$MISSING_X -lXcomposite"], $XLIBS)
38014: 
25500:       AC_SUBST(XCOMPOSITE_LIBS)
25500: 
38014:       PKG_CHECK_MODULES(LIBHILDONMIME,libhildonmime, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBHILDONMIME_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBHILDONMIME_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([Hildon Mime is required when building for Maemo])
38014:       fi
38014: 
38014: 
38014:       PKG_CHECK_MODULES(LIBOSSO,libosso, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBOSSO_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBOSSO_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([LibOSSO is required when building for Maemo])
38014:       fi
38014: 
38014:       PKG_CHECK_MODULES(LIBHILDONFM,hildon-fm-2, _LIB_FOUND=1, _LIB_FOUND=)
38014:       MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBHILDONFM_LIBS"
38014:       MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBHILDONFM_CFLAGS"
38014:       if test -z "$_LIB_FOUND"; then
38014:          AC_MSG_ERROR([Hildon FM-2 is required when building for Maemo])
38014:       fi
40116: 
40748:    fi
48430:    if test $MOZ_PLATFORM_MAEMO = 6; then
61828:       dnl ========================================================
61828:       dnl = Enable meego libcontentaction
61828:       dnl ========================================================
61828:       MOZ_ARG_ENABLE_BOOL(meegocontentaction,
61828:       [  --enable-meegocontentaction           Enable meegocontentaction support],
61828:          MOZ_MEEGOCONTENTACTION=1,
61828:          MOZ_MEEGOCONTENTACTION=)
61828: 
61828:       if test -n "$MOZ_MEEGOCONTENTACTION"; then
61828: 
48430:          PKG_CHECK_MODULES(LIBCONTENTACTION, contentaction-0.1, _LIB_FOUND=1, _LIB_FOUND=)
61828:          if test "$_LIB_FOUND"; then
48430:             MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBCONTENTACTION_LIBS"
48430:             MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBCONTENTACTION_CFLAGS"
61828:             MOZ_ENABLE_CONTENTACTION=1
61828:             AC_DEFINE(MOZ_ENABLE_CONTENTACTION)
61828:             AC_SUBST(MOZ_ENABLE_CONTENTACTION)
61828:          fi
48430:       fi
72455: 
72455:       MOZ_ARG_ENABLE_BOOL(meegotouch,
72455:       [  --enable-meegotouch  Enable meegotouch support],
72455:          MOZ_MEEGOTOUCHENABLED=1,
72455:          MOZ_MEEGOTOUCHENABLED=)
72455: 
72455:       if test -n "$MOZ_MEEGOTOUCHENABLED"; then
72455:           PKG_CHECK_MODULES(MOZ_MEEGOTOUCH, meegotouchcore, _LIB_FOUND=1, _LIB_FOUND=)
72455:           if test "$_LIB_FOUND"; then
72455:               MOZ_QT_CFLAGS="$MOZ_MEEGOTOUCH_CFLAGS $MOZ_QT_CFLAGS"
72455:               MOZ_QT_LIBS="$MOZ_MEEGOTOUCH_LIBS $MOZ_QT_LIBS"
72455:               AC_DEFINE(MOZ_ENABLE_MEEGOTOUCH)
72455:           else
72455:               AC_MSG_WARN([Cannot meegotouchcore-dev. Disabling Meegotouch support.])
72455:           fi
72455:       fi
42804:    fi
42804: 
40116:    PKG_CHECK_MODULES(LIBLOCATION,liblocation, _LIB_FOUND=1, _LIB_FOUND=)
40116:    MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBLOCATION_LIBS"
40116:    MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBLOCATION_CFLAGS"
40748:    if test "$_LIB_FOUND"; then
40748:       MOZ_MAEMO_LIBLOCATION=1
40748:       AC_DEFINE(MOZ_MAEMO_LIBLOCATION)
40748:    else
40748:       AC_MSG_WARN([Cannot liblocation-dev. Disabling Maemo geolocation.])
40748:    fi
40748:    AC_SUBST(MOZ_MAEMO_LIBLOCATION)
38014: 
56000:    PKG_CHECK_MODULES(LIBMEEGOTOUCHSHARE, ShareUiInterface-maemo-meegotouch >= 0.3.31 mdatauri, _LIB_FOUND=1, _LIB_FOUND=)
56000:    MOZ_PLATFORM_MAEMO_LIBS="$MOZ_PLATFORM_MAEMO_LIBS $LIBMEEGOTOUCHSHARE_LIBS"
56000:    MOZ_PLATFORM_MAEMO_CFLAGS="$MOZ_PLATFORM_MAEMO_CFLAGS $LIBMEEGOTOUCHSHARE_CFLAGS"
56000:    if test "$_LIB_FOUND"; then
56000:       MOZ_ENABLE_MEEGOTOUCHSHARE=1
56000:       AC_DEFINE(MOZ_ENABLE_MEEGOTOUCHSHARE)
56000:    else
56000:       AC_MSG_WARN([Cannot find maemo-meegotouch-interfaces-dev or libmdatauri-dev. Disabling meegotouch share ui.])
56000:    fi
56000:    AC_SUBST(MOZ_ENABLE_MEEGOTOUCHSHARE)
56000: 
38014:    AC_SUBST(MOZ_PLATFORM_MAEMO_LIBS)
38014:    AC_SUBST(MOZ_PLATFORM_MAEMO_CFLAGS)
38014: fi
33886: 
71187: dnl ========================================================
71187: dnl = ARM toolchain tweaks
71187: dnl ========================================================
71187: 
71187: dnl Defaults
71187: case "${target}" in
72727: arm-android*|arm-linuxandroid*)
71187:     MOZ_THUMB=yes
71187:     MOZ_ARCH=armv7-a
71187:     MOZ_FPU=vfp
71187:     MOZ_FLOAT_ABI=softfp
71187:     ;;
71187: arm*-*)
71187:     if test -n "$MOZ_PLATFORM_MAEMO"; then
71187:         MOZ_THUMB=no
71187:         MOZ_ARCH=armv7-a
71187:         MOZ_FLOAT_ABI=softfp
71187:     fi
71187:     if test "$MOZ_PLATFORM_MAEMO" = 6; then
71187:         MOZ_THUMB=yes
71187:     fi
60648:     ;;
60648: esac
71187: 
71187: dnl Kept for compatibility with some buildbot mozconfig
71187: MOZ_ARG_DISABLE_BOOL(thumb2, [], MOZ_THUMB=no, MOZ_THUMB=yes)
71187: 
71187: MOZ_ARG_WITH_STRING(thumb,
71187: [  --with-thumb[[=yes|no|toolchain-default]]]
71187: [                          Use Thumb instruction set (-mthumb)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-thumb is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_THUMB=$withval)
71187: 
71187: MOZ_ARG_WITH_STRING(thumb-interwork,
71187: [  --with-thumb-interwork[[=yes|no|toolchain-default]]
71187:                            Use Thumb/ARM instuctions interwork (-mthumb-interwork)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-thumb-interwork is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_THUMB_INTERWORK=$withval)
71187: 
71187: MOZ_ARG_WITH_STRING(arch,
71187: [  --with-arch=[[type|toolchain-default]]
71187:                            Use specific CPU features (-march=type)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-arch is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_ARCH=$withval)
71187: 
71187: MOZ_ARG_WITH_STRING(fpu,
71187: [  --with-fpu=[[type|toolchain-default]]
71187:                            Use specific FPU type (-mfpu=type)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-fpu is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_FPU=$withval)
71187: 
71187: MOZ_ARG_WITH_STRING(float-abi,
71187: [  --with-float-abi=[[type|toolchain-default]]
71187:                            Use specific arm float ABI (-mfloat-abi=type)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-float-abi is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_FLOAT_ABI=$withval)
71187: 
71187: MOZ_ARG_WITH_STRING(soft-float,
71187: [  --with-soft-float[[=yes|no|toolchain-default]]
71187:                            Use soft float library (-msoft-float)],
71187:     if test -z "$GNU_CC"; then
71187:         AC_MSG_ERROR([--with-soft-float is not supported on non-GNU toolchains])
71187:     fi
71187:     MOZ_SOFT_FLOAT=$withval)
71187: 
71187: case "$MOZ_ARCH" in
71187: toolchain-default|"")
71187:     arch_flag=""
71187:     ;;
71187: *)
71187:     arch_flag="-march=$MOZ_ARCH"
71187:     ;;
71187: esac
71187: 
71187: case "$MOZ_THUMB" in
71187: yes)
71187:     MOZ_THUMB2=1
71187:     thumb_flag="-mthumb"
71187:     ;;
71187: no)
71187:     MOZ_THUMB2=
71187:     thumb_flag="-marm"
71187:     ;;
71187: *)
71187:     _SAVE_CFLAGS="$CFLAGS"
71187:     CFLAGS="$arch_flag"
71187:     AC_TRY_COMPILE([],[return sizeof(__thumb2__);],
42804:         MOZ_THUMB2=1,
42804:         MOZ_THUMB2=)
71187:     CFLAGS="$_SAVE_CFLAGS"
71187:     thumb_flag=""
71187:     ;;
71187: esac
71187: 
71187: if test "$MOZ_THUMB2" = 1; then
60648:     AC_DEFINE(MOZ_THUMB2)
71187: fi
71187: 
71187: case "$MOZ_THUMB_INTERWORK" in
71187: yes)
71187:     thumb_interwork_flag="-mthumb-interwork"
71187:     ;;
71187: no)
71187:     thumb_interwork_flag="-mno-thumb-interwork"
71187:     ;;
71187: *) # toolchain-default
71187:     thumb_interwork_flag=""
71187:     ;;
71187: esac
71187: 
71187: case "$MOZ_FPU" in
71187: toolchain-default|"")
71187:     fpu_flag=""
42804:     ;;
42804: *)
71187:     fpu_flag="-mfpu=$MOZ_FPU"
42804:     ;;
42804: esac
71187: 
71187: case "$MOZ_FLOAT_ABI" in
71187: toolchain-default|"")
71187:     float_abi_flag=""
60648:     ;;
60648: *)
71187:     float_abi_flag="-mfloat-abi=$MOZ_FLOAT_ABI"
60648:     ;;
60648: esac
71187: 
71187: case "$MOZ_SOFT_FLOAT" in
71187: yes)
71187:     soft_float_flag="-msoft-float"
71187:     ;;
71187: no)
71187:     soft_float_flag="-mno-soft-float"
71187:     ;;
71187: *) # toolchain-default
71187:     soft_float_flag=""
57868:     ;;
57868: esac
71187: 
71187: dnl Use echo to avoid accumulating space characters
71187: all_flags=`echo $arch_flag $thumb_flag $thumb_interwork_flag $fpu_flag $float_abi_flag $soft_float_flag`
71187: if test -n "$all_flags"; then
71187:     _SAVE_CFLAGS="$CFLAGS"
71187:     CFLAGS="$all_flags"
71187:     AC_MSG_CHECKING(whether the chosen combination of compiler flags ($all_flags) works)
71187:     AC_TRY_COMPILE([],[return 0;],
71187:         AC_MSG_RESULT([yes]),
71187:         AC_MSG_ERROR([no]))
71187: 
71187:     CFLAGS="$_SAVE_CFLAGS $all_flags"
71187:     CXXFLAGS="$CXXFLAGS $all_flags"
71187:     ASFLAGS="$ASFLAGS $all_flags"
71187:     if test -n "$thumb_flag"; then
71187:         LDFLAGS="$LDFLAGS $thumb_flag"
71187:     fi
42804: fi
42804: 
56096: AC_SUBST(MOZ_THUMB2)
71187: 
71187: if test "$CPU_ARCH" = "arm"; then
71187:   AC_MSG_CHECKING(for ARM SIMD support in compiler)
71187:   # We try to link so that this also fails when
71187:   # building with LTO.
71187:   AC_TRY_LINK([],
71187:                  [asm("uqadd8 r1, r1, r2");],
71187:                  result="yes", result="no")
71187:   AC_MSG_RESULT("$result")
71187:   if test "$result" = "yes"; then
71187:       AC_DEFINE(HAVE_ARM_SIMD)
71187:       HAVE_ARM_SIMD=1
71187:   fi
71187: 
71187:   AC_MSG_CHECKING(for ARM NEON support in compiler)
71187:   # We try to link so that this also fails when
71187:   # building with LTO.
71187:   AC_TRY_LINK([],
71187:                  [asm(".fpu neon\n vadd.i8 d0, d0, d0");],
71187:                  result="yes", result="no")
71187:   AC_MSG_RESULT("$result")
71187:   if test "$result" = "yes"; then
71187:       AC_DEFINE(HAVE_ARM_NEON)
71187:       HAVE_ARM_NEON=1
71187:   fi
71187: fi # CPU_ARCH = arm
71187: 
71187: AC_SUBST(HAVE_ARM_SIMD)
71187: AC_SUBST(HAVE_ARM_NEON)
56096: 
42804: dnl ========================================================
27655: dnl = faststripe theme
27655: dnl ========================================================
27655: MOZ_ARG_ENABLE_BOOL(faststripe,
27655: [  --enable-faststripe     Use faststripe theme],
27655:     MOZ_THEME_FASTSTRIPE=1,
27655:     MOZ_THEME_FASTSTRIPE= )
27655: AC_SUBST(MOZ_THEME_FASTSTRIPE)
27655: 
27655: dnl ========================================================
    1: dnl =
    1: dnl = Feature options that require extra sources to be pulled
    1: dnl =
    1: dnl ========================================================
    1: dnl MOZ_ARG_HEADER(Features that require extra sources)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Debugging Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Debugging and Optimizations)
    1: 
    1: dnl ========================================================
    1: dnl = Disable building with debug info.
    1: dnl = Debugging is OFF by default
    1: dnl ========================================================
47975: if test -z "$MOZ_DEBUG_FLAGS"; then
    1:   MOZ_DEBUG_FLAGS="-g"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(debug,
    1: [  --enable-debug[=DBG]    Enable building with developer debug info
39277:                            (using compiler flags DBG)],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_DEBUG=1
39277:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:         _MOZ_DEBUG_FLAGS_SET=1
    1:     fi
    1:   else
    1:     MOZ_DEBUG=
    1:   fi ],
    1:   MOZ_DEBUG=)
    1: 
43109: MOZ_DEBUG_ENABLE_DEFS="-DDEBUG -D_DEBUG -DTRACING"
42838: MOZ_ARG_WITH_STRING(debug-label,
42838: [  --with-debug-label=LABELS
42838:                           Define DEBUG_<value> for each comma-separated
42838:                           value given.],
42838: [ for option in `echo $withval | sed 's/,/ /g'`; do
42838:     MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_${option}"
42838: done])
    1: 
    1: MOZ_DEBUG_DISABLE_DEFS="-DNDEBUG -DTRIMMED"
    1: 
    1: if test -n "$MOZ_DEBUG"; then
    1:     AC_MSG_CHECKING([for valid debug flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_DEBUG_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_DEBUG_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: 
    1: dnl ========================================================
24388: dnl enable mobile optimizations
24388: dnl ========================================================
24388: MOZ_ARG_ENABLE_BOOL(mobile-optimize,
43027: [  --enable-mobile-optimize
43027:                           Enable mobile optimizations],
24388:     MOZ_GFX_OPTIMIZE_MOBILE=1)
24388: 
24388: AC_SUBST(MOZ_GFX_OPTIMIZE_MOBILE)
24388: 
24388: if test "$MOZ_GFX_OPTIMIZE_MOBILE"; then
24388:     AC_DEFINE(MOZ_GFX_OPTIMIZE_MOBILE)
24388: fi
24388: 
24388: dnl ========================================================
    1: dnl = Enable code optimization. ON by default.
    1: dnl ========================================================
    1: if test -z "$MOZ_OPTIMIZE_FLAGS"; then
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(optimize,
    1: [  --disable-optimize      Disable compiler optimization
    1:   --enable-optimize=[OPT] Specify compiler optimization flags [OPT=-O]],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_OPTIMIZE=1
47975:     if test -n "$enableval" -a "$enableval" != "yes"; then
    1:         MOZ_OPTIMIZE_FLAGS=`echo "$enableval" | sed -e 's|\\\ | |g'`
    1:         MOZ_OPTIMIZE=2
    1:     fi
    1: else
    1:     MOZ_OPTIMIZE=
    1: fi ], MOZ_OPTIMIZE=1)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test -n "$MOZ_OPTIMIZE"; then
    1:     AC_MSG_CHECKING([for valid optimization flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_OPTIMIZE_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_OPTIMIZE_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MOZ_OPTIMIZE)
    1: AC_SUBST(MOZ_OPTIMIZE_FLAGS)
    1: AC_SUBST(MOZ_OPTIMIZE_LDFLAGS)
57336: AC_SUBST(MOZ_OPTIMIZE_SIZE_TWEAK)
71833: AC_SUBST(MOZ_PGO_OPTIMIZE_FLAGS)
    1: 
    1: dnl ========================================================
39277: dnl = Enable generation of debug symbols
39277: dnl ========================================================
39277: MOZ_ARG_ENABLE_STRING(debug-symbols,
43027: [  --enable-debug-symbols[=DBG]
43027:                           Enable debugging symbols (using compiler flags DBG)],
39277: [ if test "$enableval" != "no"; then
39277:       MOZ_DEBUG_SYMBOLS=1
39277:       if test -n "$enableval" -a "$enableval" != "yes"; then
39277:           if test -z "$_MOZ_DEBUG_FLAGS_SET"; then
39277:               MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
39277:           else
39277:               AC_MSG_ERROR([--enable-debug-symbols flags cannot be used with --enable-debug flags])
39277:           fi
39277:       fi
63490:   else
63490:       MOZ_DEBUG_SYMBOLS=
63490:   fi ],
63490:   MOZ_DEBUG_SYMBOLS=1)
39277: 
39277: if test -n "$MOZ_DEBUG" -o -n "$MOZ_DEBUG_SYMBOLS"; then
39277:     AC_DEFINE(MOZ_DEBUG_SYMBOLS)
39277:     export MOZ_DEBUG_SYMBOLS
39277: fi
    1: 
    1: dnl ========================================================
42001: dnl = Disable any treating of compile warnings as errors
42001: dnl ========================================================
42001: MOZ_ARG_DISABLE_BOOL(warnings-as-errors,
43027: [  --disable-warnings-as-errors
43027:                           Disable treating of warnings as errors],
42001:     MOZ_DISABLE_WARNINGS_AS_ERRORS=1,
42001:     MOZ_DISABLE_WARNINGS_AS_ERRORS= )
42001: if test "$MOZ_DISABLE_WARNINGS_AS_ERRORS"; then
42001:    WARNINGS_AS_ERRORS=''
42001: fi
42001: 
42001: dnl ========================================================
42001: dnl = Disable runtime logging checks
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(logging,
    1: [  --disable-logging       Disable logging facilities],
    1:     NS_DISABLE_LOGGING=1,
    1:     NS_DISABLE_LOGGING= )
    1: if test "$NS_DISABLE_LOGGING"; then
    1:     AC_DEFINE(NS_DISABLE_LOGGING)
    1: else
    1:     AC_DEFINE(MOZ_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
42001: dnl = This will enable logging of addref, release, ctor, dtor.
    1: dnl ========================================================
    1: _ENABLE_LOGREFCNT=42
    1: MOZ_ARG_ENABLE_BOOL(logrefcnt,
    1: [  --enable-logrefcnt      Enable logging of refcounts (default=debug) ],
    1:     _ENABLE_LOGREFCNT=1,
    1:     _ENABLE_LOGREFCNT= )
    1: if test "$_ENABLE_LOGREFCNT" = "1"; then
    1:     AC_DEFINE(FORCE_BUILD_REFCNT_LOGGING)
    1: elif test -z "$_ENABLE_LOGREFCNT"; then
    1:     AC_DEFINE(NO_BUILD_REFCNT_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
11612: dnl = Enable trace malloc
11612: dnl ========================================================
11612: NS_TRACE_MALLOC=${MOZ_TRACE_MALLOC}
11612: MOZ_ARG_ENABLE_BOOL(trace-malloc,
11612: [  --enable-trace-malloc   Enable malloc tracing],
11612:     NS_TRACE_MALLOC=1,
11612:     NS_TRACE_MALLOC= )
11612: if test "$NS_TRACE_MALLOC"; then
11612:   # Please, Mr. Linker Man, don't take away our symbol names
11612:   MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
11612:   USE_ELF_DYNSTR_GC=
11612:   AC_DEFINE(NS_TRACE_MALLOC)
11612: fi
11612: AC_SUBST(NS_TRACE_MALLOC)
11612: 
11612: dnl ========================================================
11612: dnl = Enable jemalloc
11227: dnl ========================================================
11227: MOZ_ARG_ENABLE_BOOL(jemalloc,
11227: [  --enable-jemalloc       Replace memory allocator with jemalloc],
11227:     MOZ_MEMORY=1,
11227:     MOZ_MEMORY=)
11612: 
11612: if test "$NS_TRACE_MALLOC"; then
11612:     MOZ_MEMORY=
11612: fi
11612: 
68572: if test -z "$MOZ_MEMORY"; then
68572:   case "${target}" in
68572:     *-mingw*)
68789:       if test -z "$WIN32_REDIST_DIR" -a -z "$MOZ_DEBUG"; then
68572:         AC_MSG_WARN([When not building jemalloc, you need to set WIN32_REDIST_DIR to the path to the Visual C++ Redist (usually VCINSTALLDIR\redist\x86\Microsoft.VC80.CRT, for VC++ v8) if you intend to distribute your build.])
68572:       fi
68572:       ;;
68572:   esac
68572: else
11227:   dnl Don't try to run compiler tests on Windows  
11227:   if test "$OS_ARCH" = "WINNT"; then
11227:     if test -z "$HAVE_64BIT_OS"; then
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:     else
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:     fi
11227:   else
11227:     AC_CHECK_SIZEOF([int *], [4])
11227:     case "${ac_cv_sizeof_int_p}" in
11227:     4)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:       ;;
11227:     8)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:       ;;
11227:     *)
11227:       AC_MSG_ERROR([Unexpected pointer size])
11227:       ;;
11227:     esac
11227:   fi
11227: 
11227:   AC_DEFINE(MOZ_MEMORY)
11227:   if test "x$MOZ_DEBUG" = "x1"; then
11227:     AC_DEFINE(MOZ_MEMORY_DEBUG)
11227:   fi
11227:   dnl The generic feature tests that determine how to compute ncpus are long and
11227:   dnl complicated.  Therefore, simply define special cpp variables for the
11227:   dnl platforms we have special knowledge of.
42803:   case "${target}" in
42803:   *-darwin*)
11227:     AC_DEFINE(MOZ_MEMORY_DARWIN)
11227:     ;;
42803:   *-*freebsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
70914:   *-android*|*-linuxandroid*)
70914:     AC_DEFINE(MOZ_MEMORY_LINUX)
70914:     AC_DEFINE(MOZ_MEMORY_ANDROID)
70914:     _WRAP_MALLOC=1
70914:     export WRAP_MALLOC_LIB="-L$_objdir/dist/lib -lmozalloc -lmozutils"
70914:     WRAP_MALLOC_CFLAGS="-Wl,--wrap=dlopen -Wl,--wrap=dlclose -Wl,--wrap=dlerror -Wl,--wrap=dlsym -Wl,--wrap=dladdr"
70914:     ;;
42803:   *-*linux*)
11227:     AC_DEFINE(MOZ_MEMORY_LINUX)
11227:     ;;
42803:   *-netbsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
42803:   *-solaris*)
11227:     AC_DEFINE(MOZ_MEMORY_SOLARIS)
11227:     ;;
63450:   *-mingw*)
11227:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
27523:     dnl This is sort of awful. Will revisit if we add support for more versions
72611:     if test "$CC_VERSION" == "14.00.50727.762" -o "$CC_VERSION" == "15.00.30729.01"; then
72611:       WIN32_OLD_STYLE_JEMALLOC=1
72611:       AC_DEFINE(WIN32_OLD_STYLE_JEMALLOC)
72611:     elif test "$CC_VERSION" == "16.00.30319.01" -o "$CC_VERSION" == "16.00.40219.01"; then
72611:       WIN32_NEW_STYLE_JEMALLOC=1
72611:       AC_DEFINE(WIN32_NEW_STYLE_JEMALLOC)
72611:     else        
72611:       AC_MSG_ERROR([Building jemalloc requires exactly Visual C++ 2005 SP1 or 2008 SP1 or 2010 currently.])
72611:     fi
72611:     if test -z "$WIN32_CRT_SRC_DIR" -a -n "$WIN32_OLD_STYLE_JEMALLOC"; then
11227:       if test -z "$VCINSTALLDIR" -o ! -d "$VCINSTALLDIR"; then
27523:         AC_MSG_ERROR([When building jemalloc, set WIN32_CRT_SRC_DIR to the path to the Visual C++ CRT source (usually VCINSTALLDIR\crt\src, but VCINSTALLDIR is not set, so I can't autodetect it for you).])
11227:       else
11227:         WIN32_CRT_SRC_DIR="$VCINSTALLDIR\crt\src"
11227:       fi
11227:     fi
33494:     dnl cpu check
33494:     case "${target_cpu}" in
33494:     i*86)
43046:       MOZ_CRT_CPU_ARCH=intel
43046:       ;;
43046:     x86_64)
43046:       MOZ_CRT_CPU_ARCH=amd64
33494:       ;;
33494:     *)
33494:       AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
33494:       ;;
33494:     esac
27523: 
43046:     AC_SUBST(MOZ_CRT_CPU_ARCH)
43046: 
72611:     if test -n "$WIN32_OLD_STYLE_JEMALLOC"; then
27523:       if test ! -d "$WIN32_CRT_SRC_DIR"; then
27523:         AC_MSG_ERROR([Invalid Win32 CRT source directory: ${WIN32_CRT_SRC_DIR}])
27523:       fi
27523:       WIN32_CRT_SRC_DIR=`cd "$WIN32_CRT_SRC_DIR" && pwd -W`
27523:       _objdir_win=`pwd -W`
43046:       WIN32_CUSTOM_CRT_DIR="$_objdir_win/memory/jemalloc/crtsrc/build/$MOZ_CRT_CPU_ARCH"
31983:       MOZ_MEMORY_LDFLAGS="-MANIFEST:NO -LIBPATH:\"$WIN32_CUSTOM_CRT_DIR\" -NODEFAULTLIB:msvcrt -NODEFAULTLIB:msvcrtd -NODEFAULTLIB:msvcprt -NODEFAULTLIB:msvcprtd -DEFAULTLIB:mozcrt19 -DEFAULTLIB:mozcpp19"
72611:     else
72611:       MOZ_MEMORY_LDFLAGS='-MANIFEST:NO -LIBPATH:$(DIST)/lib -NODEFAULTLIB:msvcrt -NODEFAULTLIB:msvcrtd -NODEFAULTLIB:msvcprt -NODEFAULTLIB:msvcprtd -DEFAULTLIB:mozcrt'
72611:       if test -z "$MOZ_DEBUG"; then
72611:         WIN32_CRT_LIBS="msvcrt.lib msvcprt.lib"
72611:       else
72611:         WIN32_CRT_LIBS="msvcrtd.lib msvcprtd.lib"
72611:       fi
72611:     fi
12206:     dnl Also pass this to NSPR/NSS
27523:     DLLFLAGS="$DLLFLAGS $MOZ_MEMORY_LDFLAGS"
12206:     export DLLFLAGS
11227:     ;;
11227:   *)
11227:     AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
11227:     ;;
11227:   esac
38924: 
73512:   if test "$OS_ARCH" != "WINNT"; then
38924:     dnl NB: this must be kept in sync with jemalloc.h
38924:     AC_DEFINE(HAVE_JEMALLOC_VALLOC)
73512:   fi
38924:   AC_DEFINE(HAVE_JEMALLOC_POSIX_MEMALIGN)
38924:   AC_DEFINE(HAVE_JEMALLOC_MEMALIGN)
68572: fi # MOZ_MEMORY
11227: AC_SUBST(MOZ_MEMORY)
27523: AC_SUBST(MOZ_MEMORY_LDFLAGS)
72611: AC_SUBST(WIN32_OLD_STYLE_JEMALLOC)
72611: AC_SUBST(WIN32_CRT_LIBS)
11227: AC_SUBST(WIN32_CRT_SRC_DIR)
12206: dnl Need to set this for make because NSS doesn't have configure
12206: AC_SUBST(DLLFLAGS)
11227: 
11227: dnl ========================================================
    1: dnl = Use malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(wrap-malloc,
    1: [  --enable-wrap-malloc    Wrap malloc calls (gnu linker only)],
    1:     _WRAP_MALLOC=1,
    1:     _WRAP_MALLOC= )
    1: 
    1: if test -n "$_WRAP_MALLOC"; then
    1:     if test "$GNU_CC"; then
55919:     WRAP_MALLOC_CFLAGS="${LDFLAGS} ${WRAP_MALLOC_CFLAGS} -Wl,--wrap -Wl,malloc -Wl,--wrap -Wl,calloc -Wl,--wrap -Wl,valloc -Wl,--wrap -Wl,free -Wl,--wrap -Wl,realloc -Wl,--wrap -Wl,memalign -Wl,--wrap -Wl,__builtin_new -Wl,--wrap -Wl,__builtin_vec_new -Wl,--wrap -Wl,__builtin_delete -Wl,--wrap -Wl,__builtin_vec_delete -Wl,--wrap -Wl,PR_Free -Wl,--wrap -Wl,PR_Malloc -Wl,--wrap -Wl,PR_Calloc -Wl,--wrap -Wl,PR_Realloc -Wl,--wrap -Wl,strdup -Wl,--wrap -Wl,strndup -Wl,--wrap -Wl,posix_memalign"
71185:     MKSHLIB="$MKSHLIB"' $(WRAP_MALLOC_CFLAGS) $(WRAP_MALLOC_LIB)'
71185:     MKCSHLIB="$MKCSHLIB"' $(WRAP_MALLOC_CFLAGS) $(WRAP_MALLOC_LIB)'
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Location of malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(wrap-malloc,
    1: [  --with-wrap-malloc=DIR  Location of malloc wrapper library],
    1:     WRAP_MALLOC_LIB=$withval)
    1: 
    1: dnl ========================================================
50455: dnl = Use JS Call tracing
50455: dnl ========================================================
50455: MOZ_ARG_ENABLE_BOOL(trace-jscalls,
50455: [  --enable-trace-jscalls  Enable JS call enter/exit callback (default=no)],
50455:     MOZ_TRACE_JSCALLS=1,
50455:     MOZ_TRACE_JSCALLS= )
50455: if test -n "$MOZ_TRACE_JSCALLS"; then
50455:     AC_DEFINE(MOZ_TRACE_JSCALLS)
50455: fi
50455: 
50455: dnl ========================================================
31063: dnl = Use TraceVis
31063: dnl ========================================================
31063: MOZ_ARG_ENABLE_BOOL(tracevis,
31063: [  --enable-tracevis       Enable TraceVis tracing tool (default=no)],
31063:     MOZ_TRACEVIS=1,
31063:     MOZ_TRACEVIS= )
31063: if test -n "$MOZ_TRACEVIS"; then
31063:     AC_DEFINE(MOZ_TRACEVIS)
31063: fi
31063: 
31063: dnl ========================================================
40373: dnl = Use GCTimer
40373: dnl ========================================================
40373: MOZ_ARG_ENABLE_BOOL(gctimer,
40373: [  --enable-gctimer        Enable GC timer (default=no)],
40373:     MOZ_GCTIMER=1,
40373:     MOZ_GCTIMER= )
40373: if test -n "$MOZ_GCTIMER"; then
40373:     AC_DEFINE(MOZ_GCTIMER)
40373: fi
40373: 
40373: dnl ========================================================
23530: dnl Zealous JavaScript GC
23530: dnl ========================================================
23530: MOZ_ARG_ENABLE_BOOL(gczeal,
23530: [  --enable-gczeal         Enable zealous JavaScript GCing],
23530:     JS_GC_ZEAL=1,
23530:     JS_GC_ZEAL= )
23530: if test -n "$JS_GC_ZEAL"; then
23530:     AC_DEFINE(JS_GC_ZEAL)
23530: fi
23530: 
47824: dnl ======================================================
47824: dnl = Enable compiling with ccache
47824: dnl ======================================================
47824: MOZ_ARG_WITH_STRING(ccache,
48218: [  --with-ccache[=path/to/ccache]
47824:                           Enable compiling with ccache],
48218:     CCACHE=$withval, CCACHE="no")
48218: 
48218: if test "$CCACHE" != "no"; then
48218:     if test -z "$CCACHE" -o "$CCACHE" = "yes"; then
48218:         CCACHE=
48218:     else
48218:         if test ! -e "$CCACHE"; then
48218:             AC_MSG_ERROR([$CCACHE not found])
48218:         fi
48218:     fi
48218:     MOZ_PATH_PROGS(CCACHE, $CCACHE ccache)
48218:     if test -z "$CCACHE" -o "$CCACHE" = ":"; then
48218:         AC_MSG_ERROR([ccache not found])
48218:     elif test -x "$CCACHE"; then
48218:         CC="$CCACHE $CC"
48218:         CXX="$CCACHE $CXX"
48218:     else
48218:         AC_MSG_ERROR([$CCACHE is not executable])
48218:     fi
47824: fi
47824: 
23530: dnl ========================================================
12116: dnl = Enable static checking using gcc-dehydra
12116: dnl ========================================================
12116: 
12116: MOZ_ARG_WITH_STRING(static-checking,
12116: [  --with-static-checking=path/to/gcc_dehydra.so
12116:                           Enable static checking of code using GCC-dehydra],
12116:     DEHYDRA_PATH=$withval,
12116:     DEHYDRA_PATH= )
12116: 
12116: if test -n "$DEHYDRA_PATH"; then
24371:     if test ! -f "$DEHYDRA_PATH"; then
12116:         AC_MSG_ERROR([The dehydra plugin is not at the specified path.])
12116:     fi
12116:     AC_DEFINE(NS_STATIC_CHECKING)
12116: fi
12116: AC_SUBST(DEHYDRA_PATH)
12116: 
12116: dnl ========================================================
    1: dnl = Enable stripping of libs & executables
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(strip,
    1: [  --enable-strip          Enable stripping of libs & executables ],
    1:     ENABLE_STRIP=1,
    1:     ENABLE_STRIP= )
    1: 
    1: dnl ========================================================
 4703: dnl = Enable stripping of libs & executables when packaging
 4703: dnl ========================================================
 4703: MOZ_ARG_ENABLE_BOOL(install-strip,
 4703: [  --enable-install-strip  Enable stripping of libs & executables when packaging ],
 4703:     PKG_SKIP_STRIP= ,
 4703:     PKG_SKIP_STRIP=1)
 4703: 
 4703: dnl ========================================================
    1: dnl = --enable-elf-dynstr-gc
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(elf-dynstr-gc,
    1: [  --enable-elf-dynstr-gc  Enable elf dynstr garbage collector (opt builds only)],
    1:     USE_ELF_DYNSTR_GC=1,
    1:     USE_ELF_DYNSTR_GC= )
    1: 
    1: dnl ========================================================
61171: dnl = --disable-elf-hack
61171: dnl ========================================================
61171: 
63513: USE_ELF_HACK=1
61171: MOZ_ARG_DISABLE_BOOL(elf-hack,
61171: [  --disable-elf-hack      Disable elf hacks],
61171:     USE_ELF_HACK=,
61171:     USE_ELF_HACK=1)
61171: 
63509: # Only enable elfhack where supported
63509: if test "$USE_ELF_HACK" = 1; then
63509:     case "${HOST_OS_ARCH},${OS_ARCH}" in
63509:     Linux,Linux)
63509:         case "${CPU_ARCH}" in
63509:         arm | x86 | x86_64)
63509:             USE_ELF_HACK=1
63509:             ;;
63509:         *)
63509:             USE_ELF_HACK=
63509:             ;;
63509:         esac
63509:         ;;
63509:     *)
63509:         USE_ELF_HACK=
63509:         ;;
63509:     esac
63509: fi
63509: 
72134: if test "$USE_ELF_HACK" = 1; then
72134:     dnl PT_GNU_RELRO segment makes the dynamic linker set a read-only flag on
72134:     dnl memory addresses it maps to. The result is that by the time elfhack
72134:     dnl kicks in, it is not possible to apply relocations because of that,
72134:     dnl thus elfhack effectively skips relocations inside the PT_GNU_RELRO
72134:     dnl segment. It makes elfhack mostly useless, so considering the problems
72134:     dnl we have we PT_GNU_RELRO (e.g. bug 664366), and until elfhack can deal
72134:     dnl with PT_GNU_RELRO segments, it's just simpler to disable elfhack when
72134:     dnl the linker creates PT_GNU_RELRO segments.
72134:     AC_CACHE_CHECK([whether linker creates PT_GNU_RELRO segments],
72134:         LINK_WITH_PT_GNU_RELRO,
72134:         [echo "int main() {return 0;}" > conftest.${ac_ext}
72134:          if AC_TRY_COMMAND(${CC-cc} -o conftest${ac_exeext} $LDFLAGS conftest.${ac_ext} $LIBS 1>&2) &&
72134:             test -s conftest${ac_exeext}; then
72134:             if readelf -l conftest${ac_exeext} | grep GNU_RELRO > /dev/null; then
72134:                 LINK_WITH_PT_GNU_RELRO=yes
72134:             else
72134:                 LINK_WITH_PT_GNU_RELRO=no
72134:             fi
72134:          else
72134:              dnl We really don't expect to get here, but just in case
72134:              AC_ERROR([couldn't compile a simple C file])
72134:          fi
72134:          rm -rf conftest*])
72134:     if test "$LINK_WITH_PT_GNU_RELRO" = yes; then
72134:         AC_MSG_WARN([Disabling elfhack])
72134:         USE_ELF_HACK=
72134:     fi
72134: fi
72134: 
61171: dnl ========================================================
68511: dnl = libstdc++ compatibility hacks
68511: dnl ========================================================
68511: 
68511: STDCXX_COMPAT=
68556: MOZ_ARG_ENABLE_BOOL(stdcxx-compat,
68556: [  --enable-stdcxx-compat  Enable compatibility with older libstdc++],
68556:     STDCXX_COMPAT=stdc++compat.cpp)
68511: 
68511: AC_SUBST(STDCXX_COMPAT)
68511: 
71526: if test -n "$STDCXX_COMPAT"; then
72215:    eval $($PYTHON $_topsrcdir/build/autoconf/libstdcxx.py)
71526:    AC_SUBST(MOZ_LIBSTDCXX_TARGET_VERSION)
71526:    AC_SUBST(MOZ_LIBSTDCXX_HOST_VERSION)
71526: fi
71526: 
68511: dnl ========================================================
    1: dnl = 
    1: dnl = Profiling and Instrumenting
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Profiling and Instrumenting)
    1: 
    1: dnl ========================================================
    1: dnl = Enable timeline service, which provides lightweight
    1: dnl = instrumentation of mozilla for performance measurement.
    1: dnl = Timeline is off by default.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(timeline,
    1: [  --enable-timeline       Enable timeline services ],
    1:     MOZ_TIMELINE=1,
    1:     MOZ_TIMELINE= )
    1: if test -n "$MOZ_TIMELINE"; then
    1:     AC_DEFINE(MOZ_TIMELINE)
    1: fi
    1: 
    1: dnl ========================================================
41042: dnl = Enable NS_FUNCTION_TIMER, which provides Function 
41042: dnl = timing for identifying code bottlenecks 
41042: dnl = NS_FUNCTION_TIMER is off by default.
41042: dnl ========================================================
41042: MOZ_ARG_ENABLE_BOOL(functiontimer,
41042: [  --enable-functiontimer  Enable NS_FUNCTION_TIMER ],
41042:     NS_FUNCTION_TIMER=1,
41042:     NS_FUNCTION_TIMER= )
41042: if test -n "$NS_FUNCTION_TIMER"; then
41042:     AC_DEFINE(NS_FUNCTION_TIMER)
41042: fi
41042: 
41042: dnl ========================================================
    1: dnl Turn on reflow counting
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(reflow-perf,
    1: [  --enable-reflow-perf    Enable reflow performance tracing],
    1:     MOZ_REFLOW_PERF=1,
    1:     MOZ_REFLOW_PERF= )
27962: if test -n "$MOZ_REFLOW_PERF"; then
27962:     AC_DEFINE(MOZ_REFLOW_PERF)
27962: fi
    1: 
    1: dnl ========================================================
    1: dnl Enable code size metrics.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(codesighs,
    1: [  --enable-codesighs      Enable code size analysis tools],
    1:     _ENABLE_CODESIGHS=1,
    1:     _ENABLE_CODESIGHS= )
    1: if test -n "$_ENABLE_CODESIGHS"; then
    1:     if test -d $srcdir/tools/codesighs; then 
    1:         MOZ_MAPINFO=1
    1:     else
    1:         AC_MSG_ERROR([Codesighs directory $srcdir/tools/codesighs required.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Support for Quantify (Windows)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(quantify,
    1: [  --enable-quantify       Enable Quantify support (Windows only) ],
    1:     MOZ_QUANTIFY=1,
    1:     MOZ_QUANTIFY= )
    1: 
    1: dnl ========================================================
    1: dnl = Support for demangling undefined symbols
    1: dnl ========================================================
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
    1:     AC_LANG_RESTORE
    1: fi
    1: 
    1: # Demangle only for debug or trace-malloc builds
    1: MOZ_DEMANGLE_SYMBOLS=
    1: if test "$HAVE_DEMANGLE" -a "$HAVE_GCC3_ABI" && test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_DEMANGLE_SYMBOLS=1
    1:     AC_DEFINE(MOZ_DEMANGLE_SYMBOLS)
    1: fi
    1: AC_SUBST(MOZ_DEMANGLE_SYMBOLS)
    1: 
 7836: dnl ========================================================
 7836: dnl = Support for gcc stack unwinding (from gcc 3.3)
 7836: dnl ========================================================
47975: if test "$HAVE_GCC3_ABI" -a -z "$SKIP_LIBRARY_CHECKS"; then
63478:     MOZ_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
 7836: fi
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Misc. Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Misc. Options)
    1: 
    1: dnl ========================================================
    1: dnl update xterm title
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xterm-updates,
    1: [  --enable-xterm-updates  Update XTERM titles with current command.],
    1:     MOZ_UPDATE_XTERM=1,
    1:     MOZ_UPDATE_XTERM= )
    1: 
    1: dnl =========================================================
    1: dnl = Chrome format
    1: dnl =========================================================
    1: MOZ_ARG_ENABLE_STRING([chrome-format],
42462: [  --enable-chrome-format=jar|flat|both|symlink|omni
    1:                           Select FORMAT of chrome files (default=jar)],
    1:     MOZ_CHROME_FILE_FORMAT=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_CHROME_FILE_FORMAT"; then
    1:     MOZ_CHROME_FILE_FORMAT=jar
    1: fi
    1: 
    1: if test "$MOZ_CHROME_FILE_FORMAT" != "jar" && 
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "flat" &&
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "symlink" &&
42462:     test "$MOZ_CHROME_FILE_FORMAT" != "both" &&
42462:     test "$MOZ_CHROME_FILE_FORMAT" != "omni"; then
42462:     AC_MSG_ERROR([--enable-chrome-format must be set to either jar, flat, both, symlink, or omni])
42462: fi
42462: 
42462: dnl =========================================================
42462: dnl Omnijar packaging (bug 552121)
42462: dnl =========================================================
42462: dnl Omnijar packaging is compatible with flat packaging.
42462: dnl In unpackaged builds, omnijar looks for files as if
42462: dnl things were flat packaged. After packaging, all files
42462: dnl are loaded from a single jar. MOZ_CHROME_FILE_FORMAT
42462: dnl is set to flat since putting files into jars is only
42462: dnl done during packaging with omnijar.
42462: if test "$MOZ_CHROME_FILE_FORMAT" = "omni"; then
42462:     MOZ_OMNIJAR=1
42462:     AC_DEFINE(MOZ_OMNIJAR)
42462:     MOZ_CHROME_FILE_FORMAT=flat
42462: elif test "$MOZ_CHROME_FILE_FORMAT" = "jar"; then
32031:     AC_DEFINE(MOZ_CHROME_FILE_FORMAT_JAR)
32031: fi
42462: 
42462: AC_SUBST(MOZ_OMNIJAR)
42462: 
    1: dnl ========================================================
    1: dnl = Define default location for MOZILLA_FIVE_HOME
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(default-mozilla-five-home,
    1: [  --with-default-mozilla-five-home
    1:                           Set the default value for MOZILLA_FIVE_HOME],
    1: [ val=`echo $withval`
    1:   AC_DEFINE_UNQUOTED(MOZ_DEFAULT_MOZILLA_FIVE_HOME,"$val") ])
    1: 
    1: dnl ========================================================
    1: dnl = Location of the mozilla user directory (default is ~/.mozilla).],
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(user-appdir,
    1: [  --with-user-appdir=DIR  Set user-specific appdir (default=.mozilla)],
    1: [ val=`echo $withval`
    1: if echo "$val" | grep "\/" >/dev/null; then
    1:     AC_MSG_ERROR("Homedir must be single relative path.")
    1: else 
    1:     MOZ_USER_DIR="$val"
    1: fi])
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_USER_DIR,"$MOZ_USER_DIR")
    1: 
    1: dnl ========================================================
    1: dnl = Doxygen configuration
    1: dnl ========================================================
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INPUT_DIRS='./dist/include ./dist/idl'
    1: MOZ_ARG_WITH_STRING(doc-input-dirs,
    1: [  --with-doc-input-dirs=DIRS
    1:                           Header/idl dirs to create docs from],
    1: [ MOZ_DOC_INPUT_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INPUT_DIRS)
    1: 
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INCLUDE_DIRS='./dist/include ./dist/include/nspr'
    1: MOZ_ARG_WITH_STRING(doc-include-dirs,
    1: [  --with-doc-include-dirs=DIRS  
    1:                           Include dirs to preprocess doc headers],
    1: [ MOZ_DOC_INCLUDE_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INCLUDE_DIRS)
    1: 
    1: MOZ_DOC_OUTPUT_DIR='./dist/docs'
    1: MOZ_ARG_WITH_STRING(doc-output-dir,
    1: [  --with-doc-output-dir=DIR
    1:                           Dir to generate docs into],
    1: [ MOZ_DOC_OUTPUT_DIR=$withval ] )
    1: AC_SUBST(MOZ_DOC_OUTPUT_DIR)
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl ========================================================
    1: dnl =
    1: dnl = Compiler Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Compiler Options)
    1: 
    1: dnl ========================================================
    1: dnl Check for gcc -pipe support
    1: dnl ========================================================
    1: AC_MSG_CHECKING([for gcc -pipe support])
47975: if test -n "$GNU_CC" -a -n "$GNU_CXX" -a -n "$GNU_AS"; then
    1:     echo '#include <stdio.h>' > dummy-hello.c
    1:     echo 'int main() { printf("Hello World\n"); exit(0); }' >> dummy-hello.c
    1:     ${CC} -S dummy-hello.c -o dummy-hello.s 2>&5
28000:     cat dummy-hello.s 2> /dev/null | ${AS_BIN} -o dummy-hello.S - 2>&5
    1:     if test $? = 0; then
    1:         _res_as_stdin="yes"
    1:     else
    1:         _res_as_stdin="no"
    1:     fi
    1:     if test "$_res_as_stdin" = "yes"; then
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         CFLAGS="$CFLAGS -pipe"
    1:         AC_TRY_COMPILE( [ #include <stdio.h> ],
    1:             [printf("Hello World\n");],
    1:             [_res_gcc_pipe="yes"],
    1:             [_res_gcc_pipe="no"] )
    1:         CFLAGS=$_SAVE_CFLAGS
    1:     fi
47975:     if test "$_res_as_stdin" = "yes" -a "$_res_gcc_pipe" = "yes"; then
    1:         _res="yes";
    1:         CFLAGS="$CFLAGS -pipe"
    1:         CXXFLAGS="$CXXFLAGS -pipe"
    1:     else
    1:         _res="no"
    1:     fi
    1:     rm -f dummy-hello.c dummy-hello.s dummy-hello.S dummy-hello a.out
    1:     AC_MSG_RESULT([$_res])
    1: else
    1:     AC_MSG_RESULT([no])
    1: fi
    1: 
11977: dnl ========================================================
69923: dnl Profile guided optimization (gcc checks)
11977: dnl ========================================================
    1: dnl Test for profiling options
    1: dnl Under gcc 3.4+, use -fprofile-generate/-fprofile-use
    1: 
    1: _SAVE_CFLAGS="$CFLAGS"
41961: CFLAGS="$CFLAGS -fprofile-generate -fprofile-correction"
    1: 
    1: AC_MSG_CHECKING([whether C compiler supports -fprofile-generate])
    1: AC_TRY_COMPILE([], [return 0;],
    1:                [ PROFILE_GEN_CFLAGS="-fprofile-generate"
    1:                  result="yes" ], result="no")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test $result = "yes"; then
11787:   PROFILE_GEN_LDFLAGS="-fprofile-generate"
69374:   PROFILE_USE_CFLAGS="-fprofile-use -fprofile-correction -Wcoverage-mismatch"
11787:   PROFILE_USE_LDFLAGS="-fprofile-use"
    1: fi
    1: 
    1: CFLAGS="$_SAVE_CFLAGS"
    1: 
13273: if test -n "$INTEL_CC"; then
13232:   PROFILE_GEN_CFLAGS="-prof-gen -prof-dir ."
13232:   PROFILE_GEN_LDFLAGS=
13232:   PROFILE_USE_CFLAGS="-prof-use -prof-dir ."
13232:   PROFILE_USE_LDFLAGS=
13232: fi
13232: 
14124: dnl Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
14124:   PROFILE_GEN_CFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_GEN_LDFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_USE_CFLAGS="-xprofile=use:$_objdir/$enable_application"
14124:   PROFILE_USE_LDFLAGS="-xprofile=use:$_objdir/$enable_application"
14124: fi
14124: 
    1: AC_SUBST(PROFILE_GEN_CFLAGS)
11787: AC_SUBST(PROFILE_GEN_LDFLAGS)
    1: AC_SUBST(PROFILE_USE_CFLAGS)
11787: AC_SUBST(PROFILE_USE_LDFLAGS)
    1: 
    1: AC_LANG_CPLUSPLUS
    1: 
    1: dnl ========================================================
    1: dnl Test for -pedantic bustage
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pedantic,
    1: [  --disable-pedantic      Issue all warnings demanded by strict ANSI C ],
    1: _PEDANTIC= )
    1: if test "$_PEDANTIC"; then
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
42455:     CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
    1:     AC_MSG_CHECKING([whether C++ compiler has -pedantic long long bug])
    1:     AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                    [CONFIGURE_STATIC_ASSERT(sizeof(long long) == 8)],
    1:                    result="no", result="yes" )
    1:     AC_MSG_RESULT([$result])
    1:     CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1:     case "$result" in
    1:     no)
42455:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
42455:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic ${_COMPILER_PREFIX}-Wno-long-long"
    1:         ;;
    1:     yes)
    1:         AC_MSG_ERROR([Your compiler appears to have a known bug where long long is miscompiled when using -pedantic.  Reconfigure using --disable-pedantic. ])
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Test for correct temporary object destruction order
    1: dnl ========================================================
    1: dnl We want to make sure the compiler follows the C++ spec here as 
    1: dnl xpcom and the string classes depend on it (bug 235381).
    1: AC_MSG_CHECKING([for correct temporary object destruction order])
    1: AC_TRY_RUN([ class A {
    1:              public:  A(int& x) : mValue(x) {}
    1:                       ~A() { mValue--; }
    1:                       operator char**() { return 0; }
    1:              private:  int& mValue;
    1:              };
    1:              void func(char **arg) {}
    1:              int m=2;
    1:              void test() {
    1:                   func(A(m));
    1:                   if (m==1) m = 0;
    1:              }
    1:              int main() {
    1:                  test();
    1:                  return(m);
    1:              }
    1:              ],
    1:      result="yes", result="no", result="maybe")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test "$result" = "no"; then
    1:     AC_MSG_ERROR([Your compiler does not follow the C++ specification for temporary object destruction order.])
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Autoconf test for gcc 2.7.2.x (and maybe others?) so that we don't
    1: dnl provide non-const forms of the operator== for comparing nsCOMPtrs to
    1: dnl raw pointers in nsCOMPtr.h.  (VC++ has the same bug.)
    1: dnl ========================================================
    1: _SAVE_CXXFLAGS=$CXXFLAGS
    1: CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS}"
    1: AC_CACHE_CHECK(for correct overload resolution with const and templates,
    1:     ac_nscap_nonconst_opeq_bug,
    1:     [AC_TRY_COMPILE([
    1:                       template <class T>
    1:                       class Pointer
    1:                         {
    1:                         public:
    1:                           T* myPtr;
    1:                         };
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, const U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                     ],
    1:                     [
    1:                       Pointer<int> foo;
    1:                       const int* bar;
    1:                       return foo == bar;
    1:                     ],
    1:                     ac_nscap_nonconst_opeq_bug="no",
    1:                     ac_nscap_nonconst_opeq_bug="yes")])
    1: CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1: if test "$ac_nscap_nonconst_opeq_bug" = "yes" ; then
    1:     AC_DEFINE(NSCAP_DONT_PROVIDE_NONCONST_OPEQ)
    1: fi
69923: fi # ! SKIP_COMPILER_CHECKS
    1: 
    1: dnl ========================================================
40533: dnl C++ exceptions (g++/VC/irix6/Sun only - for now)
    1: dnl Should be smarter and check that the compiler does indeed have exceptions
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(cpp-exceptions,
    1: [  --enable-cpp-exceptions Enable C++ exceptions ],
    1: [ _MOZ_CPP_EXCEPTIONS=1 ],
    1: [ _MOZ_CPP_EXCEPTIONS= ])
    1: 
    1: if test "$_MOZ_CPP_EXCEPTIONS"; then
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_ON
40533:     AC_DEFINE(MOZ_CPP_EXCEPTIONS)
    1: else
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_OFF
    1: fi
    1: 
30854: AC_SUBST(_MOZ_EXCEPTIONS_FLAGS_ON)
30854: 
    1: # Irix & OSF native compilers do not like exception declarations 
    1: # when exceptions are disabled
    1: if test -n "$MIPSPRO_CXX" -o -n "$COMPAQ_CXX" -o -n "$VACPP"; then
    1:     AC_DEFINE(CPP_THROW_NEW, [])
    1: else
    1:     AC_DEFINE(CPP_THROW_NEW, [throw()])
    1: fi
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =
63472: dnl = Check what kind of list files are supported by the
63472: dnl = linker
63472: dnl =
63472: dnl ========================================================
63472: 
63472: AC_CACHE_CHECK(what kind of list files are supported by the linker,
63472:     EXPAND_LIBS_LIST_STYLE,
63472:     [echo "int main() {return 0;}" > conftest.${ac_ext}
63472:      if AC_TRY_COMMAND(${CC-cc} -o conftest.${OBJ_SUFFIX} -c $CFLAGS $CPPFLAGS conftest.${ac_ext} 1>&2) && test -s conftest.${OBJ_SUFFIX}; then
63472:          echo "INPUT(conftest.${OBJ_SUFFIX})" > conftest.list
63472:          if AC_TRY_COMMAND(${CC-cc} -o conftest${ac_exeext} $LDFLAGS conftest.list $LIBS 1>&2) && test -s conftest${ac_exeext}; then
63472:              EXPAND_LIBS_LIST_STYLE=linkerscript
63472:          else
63472:              echo "conftest.${OBJ_SUFFIX}" > conftest.list
63472:              if AC_TRY_COMMAND(${CC-cc} -o conftest${ac_exeext} $LDFLAGS @conftest.list $LIBS 1>&2) && test -s conftest${ac_exeext}; then
63472:                  EXPAND_LIBS_LIST_STYLE=list
63472:              else
63472:                  EXPAND_LIBS_LIST_STYLE=none
63472:              fi
63472:          fi
63472:      else
63472:          dnl We really don't expect to get here, but just in case
63472:          AC_ERROR([couldn't compile a simple C file])
63472:      fi
63472:      rm -rf conftest*])
63472: 
63472: LIBS_DESC_SUFFIX=desc
63472: AC_SUBST(LIBS_DESC_SUFFIX)
63472: AC_SUBST(EXPAND_LIBS_LIST_STYLE)
63472: 
63472: dnl ========================================================
63472: dnl =
    1: dnl = Build depencency options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Build dependencies)
    1: 
    1: dnl ========================================================
    1: dnl = Do not auto generate dependency info
    1: dnl ========================================================
    1: MOZ_AUTO_DEPS=1
    1: MOZ_ARG_DISABLE_BOOL(auto-deps,
    1: [  --disable-auto-deps     Do not automatically generate dependency info],
    1:     MOZ_AUTO_DEPS=,
    1:     MOZ_AUTO_DEPS=1)
    1: 
    1: if test -n "$MOZ_AUTO_DEPS"; then
    1: dnl ========================================================
    1: dnl = Use mkdepend instead of $CC -MD for dependency generation
    1: dnl ========================================================
    1: _cpp_md_flag=
    1: MOZ_ARG_DISABLE_BOOL(md,
    1: [  --disable-md            Do not use compiler-based dependencies ],
    1:   [_cpp_md_flag=],
    1:   [_cpp_md_flag=1],
    1:   [dnl Default is to turn on -MD if using GNU-compatible compilers
63508:    if test "$GNU_CC" -a "$GNU_CXX"; then
    1:      _cpp_md_flag=1
 4766:    fi
 4766:   dnl Default is to use -xM if using Sun Studio on Solaris
24783:    if test "$SOLARIS_SUNPRO_CC"; then
 4766:      _cpp_md_flag=1
    1:    fi])
    1: if test "$_cpp_md_flag"; then
    1:   COMPILER_DEPEND=1
47213:   _DEPEND_CFLAGS='$(filter-out %/.pp,-MD -MF $(MDDEPDIR)/$(basename $(@F)).pp)'
 4766:   dnl Sun Studio on Solaris use -xM instead of -MD, see config/rules.mk
24783:   if test "$SOLARIS_SUNPRO_CC"; then
 4766:     _DEPEND_CFLAGS=
 4766:   fi
    1: else
    1:   COMPILER_DEPEND=
31530:   dnl Don't override this for MSVC
31530:   if test -z "$_WIN32_MSVC"; then
    1:     _USE_CPP_INCLUDE_FLAG=
    1:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1:     _DEFINES_CXXFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
48881:   else
54266:     echo '#include <stdio.h>' > dummy-hello.c
54266:     changequote(,)
54266:     CL_INCLUDES_PREFIX=`"${CC}" -showIncludes -c -Fonul dummy-hello.c 2>&1 | sed -ne 's/^\([^:]*:[^:]*:\).*stdio.h$/\1/p'`
54266:     changequote([,])
54266:     if test -z "$CL_INCLUDES_PREFIX"; then
54266:         AC_MSG_ERROR([Cannot find cl -showIncludes prefix.])
54266:     fi
54266:     AC_SUBST(CL_INCLUDES_PREFIX)
54266:     rm -f dummy-hello.c
58618:     _topsrcdirwin=`cd \`dirname $0\`; pwd -W`
48881:     dnl cl.py provides dependency generation for MSVC
58618:     CC_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
58618:     CXX_WRAPPER="$PYTHON -O $_topsrcdirwin/build/cl.py"
48881:     COMPILER_DEPEND=1
    1:   fi
31530: fi
    1: fi # MOZ_AUTO_DEPS
    1: MDDEPDIR='.deps'
    1: AC_SUBST(MOZ_AUTO_DEPS)
    1: AC_SUBST(COMPILER_DEPEND)
    1: AC_SUBST(MDDEPDIR)
58618: AC_SUBST(CC_WRAPPER)
58618: AC_SUBST(CXX_WRAPPER)
58618: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Static Build Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Static build options)
    1: 
57995: # split JS out by default to avoid VS2005 PGO crash (bug 591836).
63163: if test "$OS_ARCH" = "WINNT" -a "$CPU_ARCH" != "x86_64" ; then
57995:   ENABLE_SHARED_JS=1
57995: fi
57995: 
50667: MOZ_ARG_ENABLE_BOOL(shared-js,
50667: [  --enable-shared-js
50667:                           Create a shared JavaScript library.],
50667:     ENABLE_SHARED_JS=1,
50667:     ENABLE_SHARED_JS=)
50667: 
50667: if test -n "$ENABLE_SHARED_JS"; then
50667:   JS_SHARED_LIBRARY=1
50667:   MOZ_JS_LIBS=$MOZ_JS_SHARED_LIBS
50667: else
50667:   MOZ_JS_LIBS=$MOZ_JS_STATIC_LIBS
50667:   AC_DEFINE(MOZ_STATIC_JS)
50667: fi
50667: AC_SUBST(JS_SHARED_LIBRARY)
50667: 
24548: AC_SUBST(LIBXUL_LIBS)
    1: XPCOM_LIBS="$LIBXUL_LIBS"
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Standalone module options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Standalone module options (Not for building Mozilla))
    1: 
    1: dnl Check for GLib and libIDL.
    1: dnl ========================================================
    1: SKIP_IDL_CHECK="no"
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_IDL_CHECK="yes"
    1: fi
    1: 
    1: dnl = Allow users to disable libIDL checking for standalone modules
    1: MOZ_ARG_WITHOUT_BOOL(libIDL,
    1: [  --without-libIDL        Skip check for libIDL (standalone modules only)],
    1: 	SKIP_IDL_CHECK="yes")
    1: 
43116: if test -z "$CROSS_COMPILE"; then
43116:     if test -z "$HOST_LIBIDL_CONFIG"; then
43116:         HOST_LIBIDL_CONFIG="$LIBIDL_CONFIG"
43116:     fi
43116:     if test -z "$HOST_LIBIDL_PREFIX"; then
43116:         HOST_LIBIDL_PREFIX="$LIBIDL_PREFIX"
43116:     fi
43116: fi
43116: 
    1: if test "$SKIP_IDL_CHECK" = "no"
    1: then
    1:     _LIBIDL_FOUND=
43116:     case "$host" in
63450:     *-mingw*)
43116:         if test -n "$GLIB_PREFIX"; then
43116:             _GLIB_PREFIX_DIR=`cd $GLIB_PREFIX && pwd -W`
43116:             if test "$?" = "0"; then
43116:                 if test `echo ${PATH}: | grep -ic "$_GLIB_PREFIX_DIR/bin:"` = 0; then
43116:                     AC_MSG_ERROR([GLIB_PREFIX must be in your \$PATH.])
43116:                 fi
43116:             else
43116:                  AC_MSG_ERROR([GLIB_PREFIX is set but "${GLIB_PREFIX}" is not a directory.])
43116:             fi
43116:         else
43116:             _GLIB_PREFIX_DIR=$MOZ_TOOLS_DIR
43116:         fi
43116:         if test ! -f "${_GLIB_PREFIX_DIR}/include/glib.h"; then
43116:             AC_MSG_ERROR([Cannot find $_GLIB_PREFIX_DIR/include/glib.h .])
43116:         fi
43116:         GLIB_CFLAGS="-I${_GLIB_PREFIX_DIR}/include"
43116:         if test -f "${_GLIB_PREFIX_DIR}/lib/glib-1.2_s.lib"; then
43116:             GLIB_LIBS="${_GLIB_PREFIX_DIR}/lib/glib-1.2_s.lib"
43116:         elif test -f "${_GLIB_PREFIX_DIR}/lib/glib-1.2.lib"; then
43116:             GLIB_LIBS="${_GLIB_PREFIX_DIR}/lib/glib-1.2.lib"
43116:         else
43116:             AC_MSG_ERROR([Cannot find $_GLIB_PREFIX_DIR/lib/glib-1.2.lib or $_GLIB_PREFIX_DIR/lib/glib-1.2_s.lib])
43116:         fi
43116: 
43116:         if test -n "$HOST_LIBIDL_PREFIX"; then
43116:             _LIBIDL_PREFIX_DIR=`cd $HOST_LIBIDL_PREFIX && pwd -W`
43116:             if test "$?" = "0"; then
43116:                 if test `echo ${PATH}: | grep -ic "$_LIBIDL_PREFIX_DIR/bin:"` = 0; then
43116:                     AC_MSG_ERROR([LIBIDL_PREFIX must be in your \$PATH.])
43116:                 fi
43116:             else
43116:                 AC_MSG_ERROR([LIBIDL_PREFIX is set but "${LIBIDL_PREFIX}" is not a directory.])
43116:             fi
43116:         else
43116:             _LIBIDL_PREFIX_DIR=$MOZ_TOOLS_DIR
43116:         fi        
43116:         if test ! -f "${_LIBIDL_PREFIX_DIR}/include/libIDL/IDL.h"; then
43116:             AC_MSG_ERROR([Cannot find $_LIBIDL_PREFIX_DIR/include/libIDL/IDL.h .])
43116:         fi
43116:         HOST_LIBIDL_CFLAGS="-I${_LIBIDL_PREFIX_DIR}/include ${GLIB_CFLAGS}"
43116:         if test -f "${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6_s.lib"; then
43116:             HOST_LIBIDL_LIBS="${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6_s.lib"
43116:             STATIC_LIBIDL=1
43116:         elif test -f "${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6.lib"; then
43116:             HOST_LIBIDL_LIBS="${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6.lib"
43116:         else
43116:             AC_MSG_ERROR([Cannot find $_LIBIDL_PREFIX_DIR/lib/libidl-0.6.lib or $_LIBIDL_PREFIX_DIR/lib/libidl-0.6_s.lib])
43116:         fi
43116:         HOST_LIBIDL_LIBS="${HOST_LIBIDL_LIBS} ${GLIB_LIBS}"
43116:         _LIBIDL_FOUND=1
43116:         ;;
43116:     esac
43116: 
43116:     if test -z "$_LIBIDL_FOUND"; then
    1:         if test "$MACOS_SDK_DIR"; then 
    1:             dnl xpidl, and therefore libIDL, is only needed on the build host.
    1:             dnl Don't build it against the SDK, as that causes problems.
    1:             _MACSAVE_CFLAGS="$CFLAGS"
    1:             _MACSAVE_LIBS="$LIBS"
    1:             _MACSAVE_LDFLAGS="$LDFLAGS"
    1:             _MACSAVE_NEXT_ROOT="$NEXT_ROOT"
    1:           changequote(,)
    1:           CFLAGS=`echo $CFLAGS|sed -E -e "s%((-I|-isystem )${MACOS_SDK_DIR}/usr/(include|lib/gcc)[^ ]*)|-F${MACOS_SDK_DIR}(/System)?/Library/Frameworks[^ ]*|-nostdinc[^ ]*|-isysroot ${MACOS_SDK_DIR}%%g"`
    1:           LIBS=`echo $LIBS|sed -e "s?-L${MACOS_SDK_DIR}/usr/lib[^ ]*??g"`
    1:           LDFLAGS=`echo $LDFLAGS|sed -e "s?-Wl,-syslibroot,${MACOS_SDK_DIR}??g"`
    1:           changequote([,])
    1:           unset NEXT_ROOT
    1:         fi
    1: 
43116:         PKG_CHECK_MODULES(HOST_LIBIDL, libIDL-2.0 >= 0.8.0 glib-2.0 gobject-2.0, _LIBIDL_FOUND=1,_LIBIDL_FOUND=)
43116:     fi
43116: 
    1:     dnl if no gtk/libIDL1 or gtk2/libIDL2 combination was found, fall back
    1:     dnl to either libIDL1 or libIDL2.
    1:     if test -z "$_LIBIDL_FOUND"; then
    1:         AM_PATH_LIBIDL($LIBIDL_VERSION,_LIBIDL_FOUND=1)
    1:         if test -z "$_LIBIDL_FOUND"; then
43116:             PKG_CHECK_MODULES(HOST_LIBIDL, libIDL-2.0 >= 0.8.0,_LIBIDL_FOUND=1)
    1:         fi
    1:     fi
    1:     dnl
    1:     dnl If we don't have a libIDL config program & not cross-compiling, 
    1:     dnl     look for orbit-config instead.
    1:     dnl
47975:     if test -z "$_LIBIDL_FOUND" -a -z "$CROSS_COMPILE"; then
25869:         MOZ_PATH_PROGS(ORBIT_CONFIG, $ORBIT_CONFIG orbit-config)
    1:         if test -n "$ORBIT_CONFIG"; then
    1:             AC_MSG_CHECKING([for ORBit libIDL usability])
    1:         	_ORBIT_CFLAGS=`${ORBIT_CONFIG} client --cflags`
    1:     	    _ORBIT_LIBS=`${ORBIT_CONFIG} client --libs`
    1:             _ORBIT_INC_PATH=`${PERL} -e '{ for $f (@ARGV) { print "$f " if ($f =~ m/^-I/); } }' -- ${_ORBIT_CFLAGS}`
    1:             _ORBIT_LIB_PATH=`${PERL} -e '{ for $f (@ARGV) { print "$f " if ($f =~ m/^-L/); } }' -- ${_ORBIT_LIBS}`
43116:             HOST_LIBIDL_CFLAGS="$_ORBIT_INC_PATH"
43116:             HOST_LIBIDL_LIBS="$_ORBIT_LIB_PATH -lIDL -lglib"
43116:             HOST_LIBIDL_CONFIG=
    1:             _SAVE_CFLAGS="$CFLAGS"
    1:             _SAVE_LIBS="$LIBS"
43116:             CFLAGS="$HOST_LIBIDL_CFLAGS $CFLAGS"
43116:             LIBS="$HOST_LIBIDL_LIBS $LIBS"
    1:             AC_TRY_RUN([
    1: #include <stdlib.h>
    1: #include <libIDL/IDL.h>
    1: int main() {
    1:   char *s;
    1:   s=strdup(IDL_get_libver_string());
    1:   if(s==NULL) {
    1:     exit(1);
    1:   }
    1:   exit(0);
    1: }
    1:             ], [_LIBIDL_FOUND=1
    1:                 result="yes"],
43116:                [HOST_LIBIDL_CFLAGS=
43116:                 HOST_LIBIDL_LIBS=
    1:                 result="no"],
    1:                [_LIBIDL_FOUND=1
    1:                 result="maybe"] )
    1:             AC_MSG_RESULT($result)
    1:             CFLAGS="$_SAVE_CFLAGS"
    1:             LIBS="$_SAVE_LIBS"
    1:         fi
    1:     fi
    1:     if test -z "$_LIBIDL_FOUND"; then
    1:         AC_MSG_ERROR([libIDL not found.
    1:         libIDL $LIBIDL_VERSION or higher is required.])
    1:     fi
    1:     if test "$MACOS_SDK_DIR"; then
    1:       CFLAGS="$_MACSAVE_CFLAGS"
    1:       LIBS="$_MACSAVE_LIBS"
    1:       LDFLAGS="$_MACSAVE_LDFLAGS"
    1:       if test -n "$_MACSAVE_NEXT_ROOT" ; then
    1:         export NEXT_ROOT="$_MACSAVE_NEXT_ROOT"
    1:       fi
    1:     fi
    1: fi
    1: 
    1: if test -n "$CROSS_COMPILE"; then
43116:     case "$target" in
63450:     *-mingw*)
43116:         if test -n "$GLIB_PREFIX"; then
43116:             GLIB_CFLAGS="-I${GLIB_PREFIX}/include"
43116:             if test -f "${GLIB_PREFIX}/lib/glib-1.2_s.lib"; then
43116:                 GLIB_LIBS="${GLIB_PREFIX}/lib/glib-1.2_s.lib"
43116:             elif test -f "${GLIB_PREFIX}/lib/glib-1.2.lib"; then
43116:                 GLIB_LIBS="${GLIB_PREFIX}/lib/glib-1.2.lib"
43116:             else
43116:                 AC_MSG_ERROR([Cannot find $GLIB_PREFIX/lib/glib-1.2.lib or $GLIB_PREFIX/lib/glib-1.2_s.lib])
43116:             fi
43116:         fi
43116: 
43116:         if test -n "$LIBIDL_PREFIX"; then
43116:             LIBIDL_CFLAGS="-I${LIBIDL_PREFIX}/include ${GLIB_CFLAGS}"
43116:             if test -f "${LIBIDL_PREFIX}/lib/libIDL-0.6_s.lib"; then
43116:                 LIBIDL_LIBS="${LIBIDL_PREFIX}/lib/libIDL-0.6_s.lib"
43116:                 STATIC_LIBIDL=1
43116:             elif test -f "${LIBIDL_PREFIX}/lib/libIDL-0.6.lib"; then
43116:                 LIBIDL_LIBS="${LIBIDL_PREFIX}/lib/libIDL-0.6.lib"
43116:             else
43116:                 AC_MSG_ERROR([Cannot find $LIBIDL_PREFIX/lib/libIDL-0.6.lib or $LIBIDL_PREFIX/lib/libIDL-0.6_s.lib])
43116:             fi
43116:         fi
43116:         LIBIDL_LIBS="${LIBIDL_LIBS} ${GLIB_LIBS}"
43116:         ;;
43116:     *)
47975:         if test -n "LIBIDL_CONFIG" -a "LIBIDL_CONFIG" != "no"; then
43116:             LIBIDL_CFLAGS=`${LIBIDL_CONFIG} --cflags`
43116:             LIBIDL_LIBS=`${LIBIDL_CONFIG} --libs`
43116:         fi
43116:         ;;
43116:     esac
43116: else
43116:     LIBIDL_CFLAGS="$HOST_LIBIDL_CFLAGS"
43116:     LIBIDL_LIBS="$HOST_LIBIDL_LIBS"
    1: fi
    1: 
    1: if test -z "$SKIP_PATH_CHECKS"; then
47975: if test -z "${GLIB_CFLAGS}" -o -z "${GLIB_LIBS}" ; then
47975:     if test "$MOZ_ENABLE_GTK2" -o "$USE_ELF_DYNSTR_GC" ; then
    1:         PKG_CHECK_MODULES(GLIB, glib-2.0 >= 1.3.7 gobject-2.0)
    1:     else
    1:         AM_PATH_GLIB(${GLIB_VERSION})
    1:     fi
    1: fi
    1: fi
    1: 
72853: if test -z "${GLIB_GMODULE_LIBS}" \
72853:    -a -n "${GLIB_CONFIG}"\
72853:     -a "${GLIB_CONFIG}" != no\
72853: ; then
    1:     GLIB_GMODULE_LIBS=`$GLIB_CONFIG gmodule --libs`
    1: fi
    1: 
    1: AC_SUBST(LIBIDL_CFLAGS)
    1: AC_SUBST(LIBIDL_LIBS)
    1: AC_SUBST(STATIC_LIBIDL)
    1: AC_SUBST(GLIB_CFLAGS)
    1: AC_SUBST(GLIB_LIBS)
    1: AC_SUBST(GLIB_GMODULE_LIBS)
    1: AC_SUBST(HOST_LIBIDL_CONFIG)
    1: AC_SUBST(HOST_LIBIDL_CFLAGS)
    1: AC_SUBST(HOST_LIBIDL_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl Check for cairo
    1: dnl ========================================================
    1: MOZ_CAIRO_CFLAGS='-I$(LIBXUL_DIST)/include/cairo'
    1: 
    1: MOZ_TREE_CAIRO=1
    1: MOZ_ARG_ENABLE_BOOL(system-cairo,
    1: [  --enable-system-cairo   Use system cairo (located with pkgconfig)],
    1: MOZ_TREE_CAIRO=,
    1: MOZ_TREE_CAIRO=1 )
    1: 
54391: MOZ_TREE_PIXMAN=1
54391: MOZ_ARG_ENABLE_BOOL(system-pixman,
54391: [ --enable-system-pixman Use system pixman (located with pkgconfig)],
54391: MOZ_TREE_PIXMAN=,
54391: MOZ_TREE_PIXMAN=1 )
54391: 
    1: # Check for headers defining standard int types.
63478: MOZ_CHECK_HEADERS(stdint.h inttypes.h sys/int_types.h)
    1: 
 8213: if test "$MOZ_TREE_CAIRO"; then
11579:     AC_DEFINE(MOZ_TREE_CAIRO)
11579: 
    1:     # For now we assume that we will have a uint64_t available through
    1:     # one of the above headers or mozstdint.h.
    1:     AC_DEFINE(HAVE_UINT64_T)
    1: 
    1:     # Define macros for cairo-features.h
70960:     TEE_SURFACE_FEATURE="#define CAIRO_HAS_TEE_SURFACE 1"
    1:     if test "$MOZ_X11"; then
    1:         XLIB_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_SURFACE 1"
 3836:         XLIB_XRENDER_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_XRENDER_SURFACE 1"
    1:         PS_SURFACE_FEATURE="#define CAIRO_HAS_PS_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="$FT2_CFLAGS"
    1:     fi
68571:     case "$MOZ_WIDGET_TOOLKIT" in
68571:       qt)
33200:         QT_SURFACE_FEATURE="#define CAIRO_HAS_QT_SURFACE 1"
68571:         ;;
68571:       cocoa)
    1:         QUARTZ_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_SURFACE 1"
13107:         QUARTZ_IMAGE_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_IMAGE_SURFACE 1"
13979:         QUARTZ_FONT_FEATURE="#define CAIRO_HAS_QUARTZ_FONT 1"
68571:         ;;
68571:       windows)
    1:         WIN32_SURFACE_FEATURE="#define CAIRO_HAS_WIN32_SURFACE 1"
    1:         WIN32_FONT_FEATURE="#define CAIRO_HAS_WIN32_FONT 1"
55800:         if test "$MOZ_WINSDK_TARGETVER" -ge "06010000"; then
37411:             WIN32_DWRITE_FONT_FEATURE="#define CAIRO_HAS_DWRITE_FONT 1"
37411:             WIN32_D2D_SURFACE_FEATURE="#define CAIRO_HAS_D2D_SURFACE 1"
37411:             MOZ_ENABLE_D2D_SURFACE=1
37411:             MOZ_ENABLE_DWRITE_FONT=1
55800:         else
55800:             WIN32_DWRITE_FONT_FEATURE=
55800:             WIN32_D2D_SURFACE_FEATURE=
55800:         fi
27651: 
63478:         MOZ_CHECK_HEADER(d3d9.h, MOZ_ENABLE_D3D9_LAYER=1)
55809: 
55809:         dnl D3D10 Layers depend on D2D Surfaces.
55809:         if test -n "$WIN32_D2D_SURFACE_FEATURE"; then
63478:           MOZ_CHECK_HEADER(d3d10.h, MOZ_ENABLE_D3D10_LAYER=1)
55809:         fi
68571:         ;;
68571:       os2)
    1:         OS2_SURFACE_FEATURE="#define CAIRO_HAS_OS2_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="-I${MZFTCFGFT2}/include"
    1:         CAIRO_FT_LIBS="-L${MZFTCFGFT2}/lib -lmozft -lmzfntcfg"
68571:         ;;
68571:     esac
35250:     if test "$USE_FC_FREETYPE"; then
26419:         FC_FONT_FEATURE="#define CAIRO_HAS_FC_FONT 1"
    1:     fi
    1:     AC_SUBST(MOZ_ENABLE_CAIRO_FT)
37411:     AC_SUBST(MOZ_ENABLE_DWRITE_FONT)
37411:     AC_SUBST(MOZ_ENABLE_D2D_SURFACE)
43174:     AC_SUBST(MOZ_ENABLE_D3D9_LAYER)
54812:     AC_SUBST(MOZ_ENABLE_D3D10_LAYER)
    1:     AC_SUBST(CAIRO_FT_CFLAGS)
    1: 
    1:     if test "$MOZ_DEBUG"; then
    1:       SANITY_CHECKING_FEATURE="#define CAIRO_DO_SANITY_CHECKING 1"
    1:     else
    1:       SANITY_CHECKING_FEATURE="#undef CAIRO_DO_SANITY_CHECKING"
    1:     fi
    1: 
    1:     PNG_FUNCTIONS_FEATURE="#define CAIRO_HAS_PNG_FUNCTIONS 1"
    1: 
    1:     AC_SUBST(PS_SURFACE_FEATURE)
    1:     AC_SUBST(PDF_SURFACE_FEATURE)
    1:     AC_SUBST(SVG_SURFACE_FEATURE)
    1:     AC_SUBST(XLIB_SURFACE_FEATURE)
 3836:     AC_SUBST(XLIB_XRENDER_SURFACE_FEATURE)
    1:     AC_SUBST(QUARTZ_SURFACE_FEATURE)
13107:     AC_SUBST(QUARTZ_IMAGE_SURFACE_FEATURE)
    1:     AC_SUBST(XCB_SURFACE_FEATURE)
    1:     AC_SUBST(WIN32_SURFACE_FEATURE)
    1:     AC_SUBST(OS2_SURFACE_FEATURE)
    1:     AC_SUBST(DIRECTFB_SURFACE_FEATURE)
    1:     AC_SUBST(FT_FONT_FEATURE)
24104:     AC_SUBST(FC_FONT_FEATURE)
    1:     AC_SUBST(WIN32_FONT_FEATURE)
37411:     AC_SUBST(WIN32_DWRITE_FONT_FEATURE)
37411:     AC_SUBST(WIN32_D2D_SURFACE_FEATURE)
13979:     AC_SUBST(QUARTZ_FONT_FEATURE)
    1:     AC_SUBST(PNG_FUNCTIONS_FEATURE)
33200:     AC_SUBST(QT_SURFACE_FEATURE)
70960:     AC_SUBST(TEE_SURFACE_FEATURE)
    1: 
54391:     MOZ_CAIRO_LIBS='$(call EXPAND_LIBNAME_PATH,mozcairo,$(DEPTH)/gfx/cairo/cairo/src)'" $CAIRO_FT_LIBS"
54391: 
54391:     if test "$MOZ_TREE_PIXMAN"; then
58362:         AC_DEFINE(MOZ_TREE_PIXMAN)
54391:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS"' $(call EXPAND_LIBNAME_PATH,mozlibpixman,$(DEPTH)/gfx/cairo/libpixman/src)'
54391:     else
57012:         PKG_CHECK_MODULES(PIXMAN, pixman-1 >= 0.19.2)
54391:         MOZ_CAIRO_CFLAGS="$MOZ_CAIRO_CFLAGS $PIXMAN_CFLAGS"
54391:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $PIXMAN_LIBS"
54391:     fi
54391: 
    1:     if test "$MOZ_X11"; then
    1:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS -lXrender -lfreetype -lfontconfig"
    1:     fi
16289: 
16289:     CAIRO_FEATURES_H=gfx/cairo/cairo/src/cairo-features.h
16289:     mv -f $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig 2> /dev/null
16289: 
    1: else
35697:    PKG_CHECK_MODULES(CAIRO, cairo >= $CAIRO_VERSION pixman-1 freetype2 fontconfig)
    1:    MOZ_CAIRO_CFLAGS=$CAIRO_CFLAGS
    1:    MOZ_CAIRO_LIBS=$CAIRO_LIBS
62101:    PKG_CHECK_MODULES(CAIRO_TEE, cairo-tee >= $CAIRO_VERSION)
11270:    if test "$MOZ_X11"; then
11270:         PKG_CHECK_MODULES(CAIRO_XRENDER, cairo-xlib-xrender >= $CAIRO_VERSION)
11270:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS $CAIRO_XRENDER_LIBS"
11270:         MOZ_CAIRO_CFLAGS="$MOZ_CAIRO_CFLAGS $CAIRO_XRENDER_CFLAGS"
11270:    fi
    1: fi
    1: 
    1: AC_SUBST(MOZ_TREE_CAIRO)
    1: AC_SUBST(MOZ_CAIRO_CFLAGS)
    1: AC_SUBST(MOZ_CAIRO_LIBS)
54391: AC_SUBST(MOZ_TREE_PIXMAN)
    1: 
43521: dnl ========================================================
27035: dnl qcms
27035: dnl ========================================================
27035: 
48661: QCMS_LIBS='$(call EXPAND_LIBNAME_PATH,mozqcms,$(DEPTH)/gfx/qcms)'
27035: AC_SUBST(QCMS_LIBS)
 3787: 
 3787: dnl ========================================================
43521: dnl HarfBuzz
43521: dnl ========================================================
43521: MOZ_HARFBUZZ_LIBS='$(DEPTH)/gfx/harfbuzz/src/$(LIB_PREFIX)mozharfbuzz.$(LIB_SUFFIX)'
43521: AC_SUBST(MOZ_HARFBUZZ_LIBS)
43521: 
43521: dnl ========================================================
55083: dnl OTS
55083: dnl ========================================================
55083: MOZ_OTS_LIBS='$(DEPTH)/gfx/ots/src/$(LIB_PREFIX)mozots.$(LIB_SUFFIX)'
55083: AC_SUBST(MOZ_OTS_LIBS)
55083: 
55083: dnl ========================================================
    1: dnl disable xul
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xul,
    1: [  --disable-xul           Disable XUL],
    1:     MOZ_XUL= )
    1: if test "$MOZ_XUL"; then
    1:   AC_DEFINE(MOZ_XUL)
    1: else
    1:   dnl remove extensions that require XUL
    1:   MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's/inspector//' -e 's/venkman//' -e 's/irc//' -e 's/tasks//'`
    1: fi
    1: 
    1: AC_SUBST(MOZ_XUL)
    1: 
    1: dnl ========================================================
    1: dnl disable profile locking
    1: dnl   do no use this in applications that can have more than
    1: dnl   one process accessing the profile directory.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(profilelocking,
43027: [  --disable-profilelocking
43027:                           Disable profile locking],
    1:     MOZ_PROFILELOCKING=,
    1:     MOZ_PROFILELOCKING=1 )
    1: if test "$MOZ_PROFILELOCKING"; then
    1:   AC_DEFINE(MOZ_PROFILELOCKING)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl disable rdf services
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(rdf,
    1: [  --disable-rdf           Disable RDF],
    1:     MOZ_RDF= )
    1: if test "$MOZ_RDF"; then
    1:   AC_DEFINE(MOZ_RDF)
    1: fi
    1: 
    1: AC_SUBST(MOZ_RDF)
    1: 
    1: dnl ========================================================
    1: dnl necko configuration options
    1: dnl ========================================================
    1: 
    1: dnl
    1: dnl option to disable various necko protocols
    1: dnl
    1: MOZ_ARG_ENABLE_STRING(necko-protocols,
    1: [  --enable-necko-protocols[={http,ftp,default,all,none}]
    1:                           Enable/disable specific protocol handlers],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
47975:     if test "$option" = "yes" -o "$option" = "all"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
47975:     elif test "$option" = "no" -o "$option" = "none"; then
    1:         NECKO_PROTOCOLS=""
    1:     elif test "$option" = "default"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         NECKO_PROTOCOLS=`echo "$NECKO_PROTOCOLS" | sed "s/ ${option}//"`
    1:     else
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $option"
    1:     fi
    1: done],
    1:     NECKO_PROTOCOLS="$NECKO_PROTOCOLS_DEFAULT")
    1: dnl Remove dupes
    1: NECKO_PROTOCOLS=`${PERL} ${srcdir}/build/unix/uniq.pl ${NECKO_PROTOCOLS}`
    1: AC_SUBST(NECKO_PROTOCOLS)
    1: for p in $NECKO_PROTOCOLS; do
    1:     AC_DEFINE_UNQUOTED(NECKO_PROTOCOL_$p)
    1: done
    1: 
    1: dnl
    1: dnl option to disable necko's disk cache
    1: dnl
    1: MOZ_ARG_DISABLE_BOOL(necko-disk-cache,
    1: [  --disable-necko-disk-cache
    1:                           Disable necko disk cache],
    1:     NECKO_DISK_CACHE=,
    1:     NECKO_DISK_CACHE=1)
    1: AC_SUBST(NECKO_DISK_CACHE)
    1: if test "$NECKO_DISK_CACHE"; then
    1:     AC_DEFINE(NECKO_DISK_CACHE)
    1: fi
    1: 
    1: dnl
26270: dnl option to disable necko's wifi scanner
26270: dnl
26270: MOZ_ARG_DISABLE_BOOL(necko-wifi,
26270: [  --disable-necko-wifi    Disable necko wifi scanner],
26270:     NECKO_WIFI=,
43405:     NECKO_WIFI=1)
32391: 
32391: if test "$OS_ARCH" = "OS2"; then
30684:   dnl OS/2 implementation of Necko-WiFi support will be added in bug 506566
30684:   NECKO_WIFI=
32391: fi
32391: if test "$NECKO_WIFI" -a \
32391:         "$OS_ARCH" != "Linux" -a \
32391:         "$OS_ARCH" != "Darwin" -a \
38834:         "$OS_ARCH" != "SunOS" -a \
68662:         "$OS_ARCH" != "WINNT"; then
29927:   AC_MSG_ERROR([Necko WiFi scanning not supported on your platform, use --disable-necko-wifi])
26270: fi
32391: 
32391: if test -z "$SKIP_LIBRARY_CHECKS" -a "$NECKO_WIFI" -a "$OS_ARCH" = "Linux"
32391: then
63478:   MOZ_CHECK_HEADER([iwlib.h])
32391:   if test "$ac_cv_header_iwlib_h" != "yes"; then
64653:     AC_MSG_ERROR([Can't find header iwlib.h for Necko WiFi scanning (might be in package libiw-dev (Ubuntu) or wireless-tools-devel (Fedora) or libiw-devel (openSUSE)); use --disable-necko-wifi to disable])
32391:   fi
32391: fi
26270: 
26270: if test "$NECKO_WIFI"; then
26270:   AC_DEFINE(NECKO_WIFI)
26270: fi
26270: AC_SUBST(NECKO_WIFI)
26270: 
26270: dnl
    1: dnl option to disable cookies
    1: dnl
    1: MOZ_ARG_DISABLE_BOOL(cookies,
    1: [  --disable-cookies       Disable cookie support],
    1:     NECKO_COOKIES=,
    1:     NECKO_COOKIES=1)
    1: AC_SUBST(NECKO_COOKIES)
    1: if test "$NECKO_COOKIES"; then
    1:     AC_DEFINE(NECKO_COOKIES)
    1: fi
    1: 
32999: dnl
39469: dnl Build jsctypes on the platforms we can, unless it's explicitly disabled.
32999: dnl
39469: MOZ_ARG_DISABLE_BOOL(ctypes,
39469: [  --disable-ctypes        Disable js-ctypes],
39469:     BUILD_CTYPES=,
39469:     BUILD_CTYPES=1)
32999: AC_SUBST(BUILD_CTYPES)
39469: if test "$BUILD_CTYPES"; then
32999:     AC_DEFINE(BUILD_CTYPES)
34757: fi
32999: 
    1: dnl NECKO_ configuration options are not global
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES NECKO_"
    1: 
    1: dnl Only build Mork if it's required
    1: AC_SUBST(MOZ_MORK)
    1: if test "$MOZ_MORK"; then
    1:   AC_DEFINE(MOZ_MORK)
    1: fi
    1: 
    1: dnl Build the lightweight Mork reader if required
    1: AC_SUBST(MOZ_MORKREADER)
    1: if test "$MOZ_MORKREADER"; then
    1:   AC_DEFINE(MOZ_MORKREADER)
    1: fi
    1: 
40486: dnl Build Places if required
40486: if test "$MOZ_PLACES"; then
40486:   AC_DEFINE(MOZ_PLACES)
40486: fi
40486: 
46134: dnl Build Sync Services if required
46134: AC_SUBST(MOZ_SERVICES_SYNC)
46134: if test -n "$MOZ_SERVICES_SYNC"; then
46134:   AC_DEFINE(MOZ_SERVICES_SYNC)
46134: fi
46134: 
    1: dnl ========================================================
47975: if test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
    1: fi
    1: 
54493: if test "$MOZ_APP_COMPONENT_INCLUDE"; then
54493:   AC_DEFINE_UNQUOTED(MOZ_APP_COMPONENT_INCLUDE, "$MOZ_APP_COMPONENT_INCLUDE")
54493: fi
54493: 
68024: if test "$MOZ_APP_COMPONENT_MODULES"; then
68024:   AC_DEFINE_UNQUOTED(MOZ_APP_COMPONENT_MODULES, $MOZ_APP_COMPONENT_MODULES)
68024: fi
68024: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Maintainer debug option (no --enable equivalent)
    1: dnl =
    1: dnl ========================================================
    1: 
    1: AC_SUBST(AR)
    1: AC_SUBST(AR_FLAGS)
    1: AC_SUBST(AR_LIST)
    1: AC_SUBST(AR_EXTRACT)
    1: AC_SUBST(AR_DELETE)
    1: AC_SUBST(AS)
    1: AC_SUBST(ASFLAGS)
    1: AC_SUBST(AS_DASH_C_FLAG)
    1: AC_SUBST(LD)
    1: AC_SUBST(RC)
    1: AC_SUBST(RCFLAGS)
    1: AC_SUBST(WINDRES)
    1: AC_SUBST(IMPLIB)
    1: AC_SUBST(FILTER)
    1: AC_SUBST(BIN_FLAGS)
    1: AC_SUBST(NS_USE_NATIVE)
    1: AC_SUBST(MOZ_WIDGET_TOOLKIT)
    1: AC_SUBST(MOZ_UPDATE_XTERM)
    1: AC_SUBST(MINIMO)
38014: AC_SUBST(MOZ_PLATFORM_MAEMO)
    1: AC_SUBST(MOZ_AUTH_EXTENSION)
    1: AC_SUBST(MOZ_PERMISSIONS)
    1: AC_SUBST(MOZ_XTF)
    1: AC_SUBST(MOZ_PREF_EXTENSIONS)
23697: AC_SUBST(MOZ_SMIL)
    1: AC_SUBST(MOZ_XSLT_STANDALONE)
    1: AC_SUBST(MOZ_JS_LIBS)
    1: AC_SUBST(MOZ_PSM)
    1: AC_SUBST(MOZ_DEBUG)
39277: AC_SUBST(MOZ_DEBUG_SYMBOLS)
    1: AC_SUBST(MOZ_DEBUG_ENABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_DISABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_FLAGS)
    1: AC_SUBST(MOZ_DEBUG_LDFLAGS)
 5382: AC_SUBST(WARNINGS_AS_ERRORS)
    1: AC_SUBST(MOZ_EXTENSIONS)
    1: AC_SUBST(MOZ_JSDEBUGGER)
    1: AC_SUBST(MOZ_LOG_REFCNT)
    1: AC_SUBST(MOZ_LEAKY)
    1: AC_SUBST(MOZ_JPROF)
10339: AC_SUBST(MOZ_SHARK)
15763: AC_SUBST(MOZ_CALLGRIND)
16288: AC_SUBST(MOZ_VTUNE)
55929: AC_SUBST(MOZ_PROFILING)
    1: AC_SUBST(MOZ_QUANTIFY)
    1: AC_SUBST(LIBICONV)
    1: AC_SUBST(MOZ_PLACES)
    1: AC_SUBST(MOZ_STORAGE)
39184: AC_SUBST(MOZ_TOOLKIT_SEARCH)
    1: AC_SUBST(MOZ_FEEDS)
    1: AC_SUBST(NS_PRINTING)
34228: AC_SUBST(MOZ_WEBGL)
40035: AC_SUBST(MOZ_HELP_VIEWER)
    1: 
    1: AC_SUBST(JAVA)
    1: AC_SUBST(JAVAC)
    1: AC_SUBST(JAR)
    1: 
    1: AC_SUBST(MOZ_PROFILELOCKING)
    1: 
    1: AC_SUBST(ENABLE_TESTS)
    1: AC_SUBST(IBMBIDI)
    1: AC_SUBST(MOZ_UNIVERSALCHARDET)
    1: AC_SUBST(ACCESSIBILITY)
    1: AC_SUBST(MOZ_SPELLCHECK)
    1: AC_SUBST(MOZ_USER_DIR)
 4389: AC_SUBST(MOZ_CRASHREPORTER)
43430: AC_SUBST(MOZ_UPDATER)
58583: AC_SUBST(MOZ_ANGLE)
58583: AC_SUBST(MOZ_DIRECTX_SDK_PATH)
62103: AC_SUBST(MOZ_DIRECTX_SDK_CPU_SUFFIX)
62103: AC_SUBST(MOZ_D3DX9_VERSION)
62103: AC_SUBST(MOZ_D3DX9_CAB)
62103: AC_SUBST(MOZ_D3DCOMPILER_CAB)
62103: AC_SUBST(MOZ_D3DX9_DLL)
62103: AC_SUBST(MOZ_D3DCOMPILER_DLL)
    1: 
    1: AC_SUBST(ENABLE_STRIP)
 4703: AC_SUBST(PKG_SKIP_STRIP)
    1: AC_SUBST(USE_ELF_DYNSTR_GC)
61171: AC_SUBST(USE_ELF_HACK)
    1: AC_SUBST(INCREMENTAL_LINKER)
    1: AC_SUBST(MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS)
57645: AC_SUBST(MOZ_JEMALLOC_STANDALONE_GLUE_LDOPTS)
    1: AC_SUBST(MOZ_COMPONENT_NSPR_LIBS)
    1: 
    1: AC_SUBST(MOZ_FIX_LINK_PATHS)
    1: AC_SUBST(XPCOM_LIBS)
    1: AC_SUBST(XPCOM_FROZEN_LDOPTS)
    1: AC_SUBST(XPCOM_GLUE_LDOPTS)
    1: AC_SUBST(XPCOM_STANDALONE_GLUE_LDOPTS)
    1: 
    1: AC_SUBST(USE_DEPENDENT_LIBS)
    1: 
    1: AC_SUBST(MOZ_BUILD_ROOT)
    1: AC_SUBST(MOZ_OS2_TOOLS)
    1: 
    1: AC_SUBST(MOZ_POST_DSO_LIB_COMMAND)
    1: AC_SUBST(MOZ_POST_PROGRAM_COMMAND)
    1: AC_SUBST(MOZ_TIMELINE)
    1: 
69733: # The following variables are available to branding and application
69733: # configuration ($BRANDING/configure.sh and $APPLICATION/confvars.sh):
69733: # - MOZ_APP_VENDOR: Used for application.ini's "Vendor" field, which also
69733: # impacts profile location and user-visible fields.
69733: # - MOZ_APP_BASENAME: Typically stays consistent for multiple branded
69733: # versions of a given application (e.g. Aurora and Firefox both use
69733: # "Firefox"), but may vary for full rebrandings (e.g. Iceweasel). Used
69733: # for application.ini's "Name" field, which controls profile location in
69733: # the absence of a "Profile" field (see below), and various system
69733: # integration hooks (Unix remoting, Windows MessageWindow name, etc.)
69733: # - MOZ_APP_DISPLAYNAME: Used in user-visible fields (DLL properties,
69733: # Mac Bundle name, Updater, Installer), it is typically used for nightly
69733: # builds (e.g. Aurora for Firefox).
69733: # - MOZ_APP_NAME: Used for e.g. the binary program file name. If not set,
69733: # defaults to a lowercase form of MOZ_APP_BASENAME.
69733: # - MOZ_APP_PROFILE: When set, used for application.ini's
69733: # "Profile" field, which controls profile location.
69733: 
69733: if test -z "$MOZ_APP_NAME"; then
69733:    MOZ_APP_NAME=`echo $MOZ_APP_BASENAME | tr A-Z a-z`
69733: fi
69733: 
    1: AC_SUBST(MOZ_APP_NAME)
    1: AC_SUBST(MOZ_APP_DISPLAYNAME)
69733: AC_SUBST(MOZ_APP_BASENAME)
69733: AC_SUBST(MOZ_APP_VENDOR)
69733: AC_SUBST(MOZ_APP_PROFILE)
51553: AC_DEFINE_UNQUOTED(MOZ_APP_UA_NAME, "$MOZ_APP_UA_NAME")
51553: AC_SUBST(MOZ_APP_UA_NAME)
51732: AC_DEFINE_UNQUOTED(MOZ_APP_UA_VERSION, "$MOZ_APP_VERSION")
    1: AC_SUBST(MOZ_APP_VERSION)
51675: AC_DEFINE_UNQUOTED(MOZ_UA_FIREFOX_VERSION, "$FIREFOX_VERSION")
70990: AC_DEFINE_UNQUOTED(FIREFOX_VERSION,$FIREFOX_VERSION)
    1: AC_SUBST(FIREFOX_VERSION)
51719: AC_DEFINE_UNQUOTED(MOZ_UA_BUILDID, "$MOZ_UA_BUILDID")
51719: AC_SUBST(MOZ_UA_BUILDID)
    1: 
    1: AC_SUBST(MOZ_PKG_SPECIAL)
    1: 
    1: AC_SUBST(MOZILLA_OFFICIAL)
    1: 
    1: dnl win32 options
    1: AC_SUBST(MOZ_MAPINFO)
    1: AC_SUBST(MOZ_BROWSE_INFO)
    1: AC_SUBST(MOZ_TOOLS_DIR)
    1: AC_SUBST(WIN32_REDIST_DIR)
    1: AC_SUBST(PYTHON)
43433: AC_SUBST(MAKENSISU)
    1: 
    1: dnl Echo the CFLAGS to remove extra whitespace.
    1: CFLAGS=`echo \
    1: 	$_WARNINGS_CFLAGS \
    1: 	$CFLAGS`
    1: 
    1: CXXFLAGS=`echo \
    1: 	$_MOZ_RTTI_FLAGS \
    1: 	$_MOZ_EXCEPTIONS_FLAGS \
    1: 	$_WARNINGS_CXXFLAGS \
    1: 	$CXXFLAGS`
    1: 
    1: COMPILE_CFLAGS=`echo \
    1:     $_DEFINES_CFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CFLAGS`
    1: 
    1: COMPILE_CXXFLAGS=`echo \
    1:     $_DEFINES_CXXFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CXXFLAGS`
    1: 
    1: AC_SUBST(SYSTEM_MAKEDEPEND)
24320: AC_SUBST(SYSTEM_LIBXUL)
    1: AC_SUBST(SYSTEM_JPEG)
    1: AC_SUBST(SYSTEM_PNG)
    1: AC_SUBST(SYSTEM_ZLIB)
12936: AC_SUBST(SYSTEM_BZ2)
    1: 
    1: AC_SUBST(JPEG_CFLAGS)
    1: AC_SUBST(JPEG_LIBS)
    1: AC_SUBST(ZLIB_CFLAGS)
    1: AC_SUBST(ZLIB_LIBS)
12936: AC_SUBST(BZ2_CFLAGS)
12936: AC_SUBST(BZ2_LIBS)
    1: AC_SUBST(PNG_CFLAGS)
    1: AC_SUBST(PNG_LIBS)
    1: 
    1: AC_SUBST(MOZ_JPEG_CFLAGS)
    1: AC_SUBST(MOZ_JPEG_LIBS)
    1: AC_SUBST(MOZ_ZLIB_CFLAGS)
    1: AC_SUBST(MOZ_ZLIB_LIBS)
12936: AC_SUBST(MOZ_BZ2_CFLAGS)
12936: AC_SUBST(MOZ_BZ2_LIBS)
    1: AC_SUBST(MOZ_PNG_CFLAGS)
    1: AC_SUBST(MOZ_PNG_LIBS)
    1: 
    1: AC_SUBST(NSPR_CFLAGS)
    1: AC_SUBST(NSPR_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSPR)
    1: 
    1: AC_SUBST(NSS_CFLAGS)
    1: AC_SUBST(NSS_LIBS)
    1: AC_SUBST(NSS_DEP_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSS)
22249: AC_SUBST(NSS_DISABLE_DBM)
    1: 
    1: AC_SUBST(CFLAGS)
    1: AC_SUBST(CXXFLAGS)
    1: AC_SUBST(CPPFLAGS)
    1: AC_SUBST(COMPILE_CFLAGS)
    1: AC_SUBST(COMPILE_CXXFLAGS)
    1: AC_SUBST(LDFLAGS)
    1: AC_SUBST(LIBS)
    1: AC_SUBST(CROSS_COMPILE)
20702: AC_SUBST(WCHAR_CFLAGS)
    1: 
    1: AC_SUBST(HOST_CC)
    1: AC_SUBST(HOST_CXX)
    1: AC_SUBST(HOST_CFLAGS)
    1: AC_SUBST(HOST_CXXFLAGS)
61514: AC_SUBST(HOST_LDFLAGS)
    1: AC_SUBST(HOST_OPTIMIZE_FLAGS)
    1: AC_SUBST(HOST_AR)
    1: AC_SUBST(HOST_AR_FLAGS)
    1: AC_SUBST(HOST_LD)
    1: AC_SUBST(HOST_RANLIB)
    1: AC_SUBST(HOST_NSPR_MDCPUCFG)
    1: AC_SUBST(HOST_BIN_SUFFIX)
    1: AC_SUBST(HOST_OS_ARCH)
    1: 
    1: AC_SUBST(TARGET_CPU)
    1: AC_SUBST(TARGET_VENDOR)
    1: AC_SUBST(TARGET_OS)
    1: AC_SUBST(TARGET_NSPR_MDCPUCFG)
    1: AC_SUBST(TARGET_MD_ARCH)
    1: AC_SUBST(TARGET_XPCOM_ABI)
    1: AC_SUBST(OS_TARGET)
    1: AC_SUBST(OS_ARCH)
    1: AC_SUBST(OS_RELEASE)
    1: AC_SUBST(OS_TEST)
60422: AC_SUBST(CPU_ARCH)
60422: AC_SUBST(INTEL_ARCHITECTURE)
    1: 
    1: AC_SUBST(MOZ_DISABLE_JAR_PACKAGING)
    1: AC_SUBST(MOZ_CHROME_FILE_FORMAT)
    1: 
    1: AC_SUBST(WRAP_MALLOC_CFLAGS)
    1: AC_SUBST(WRAP_MALLOC_LIB)
    1: AC_SUBST(MKSHLIB)
    1: AC_SUBST(MKCSHLIB)
    1: AC_SUBST(MKSHLIB_FORCE_ALL)
    1: AC_SUBST(MKSHLIB_UNFORCE_ALL)
    1: AC_SUBST(DSO_CFLAGS)
    1: AC_SUBST(DSO_PIC_CFLAGS)
    1: AC_SUBST(DSO_LDOPTS)
    1: AC_SUBST(LIB_PREFIX)
    1: AC_SUBST(DLL_PREFIX)
    1: AC_SUBST(DLL_SUFFIX)
    1: AC_DEFINE_UNQUOTED(MOZ_DLL_SUFFIX, "$DLL_SUFFIX")
    1: AC_SUBST(LIB_SUFFIX)
    1: AC_SUBST(OBJ_SUFFIX)
    1: AC_SUBST(BIN_SUFFIX)
    1: AC_SUBST(ASM_SUFFIX)
    1: AC_SUBST(IMPORT_LIB_SUFFIX)
    1: AC_SUBST(USE_N32)
    1: AC_SUBST(CC_VERSION)
    1: AC_SUBST(CXX_VERSION)
    1: AC_SUBST(MSMANIFEST_TOOL)
31956: AC_SUBST(NS_ENABLE_TSF)
32304: AC_SUBST(MOZ_NSS_PATCH)
54493: AC_SUBST(MOZ_APP_COMPONENT_LIBS)
54493: AC_SUBST(MOZ_APP_EXTRA_LIBS)
    1: 
43342: AC_SUBST(MOZ_MEDIA)
43342: AC_SUBST(MOZ_SYDNEYAUDIO)
43342: AC_SUBST(MOZ_WAVE)
43342: AC_SUBST(MOZ_VORBIS)
56071: AC_SUBST(MOZ_TREMOR)
43342: AC_SUBST(MOZ_WEBM)
43342: AC_SUBST(MOZ_OGG)
43342: AC_SUBST(MOZ_ALSA_LIBS)
43343: AC_SUBST(VPX_AS)
43343: AC_SUBST(VPX_ASFLAGS)
57090: AC_SUBST(VPX_DASH_C_FLAG)
57090: AC_SUBST(VPX_AS_CONVERSION)
57090: AC_SUBST(VPX_ASM_SUFFIX)
43343: AC_SUBST(VPX_X86_ASM)
57090: AC_SUBST(VPX_ARM_ASM)
68747: AC_SUBST(MOZ_INSTRUMENT_EVENT_LOOP)
64166: AC_SUBST(LIBJPEG_TURBO_AS)
64166: AC_SUBST(LIBJPEG_TURBO_ASFLAGS)
64166: AC_SUBST(LIBJPEG_TURBO_X86_ASM)
64166: AC_SUBST(LIBJPEG_TURBO_X64_ASM)
43342: 
    1: if test "$USING_HCC"; then
    1:    CC='${topsrcdir}/build/hcc'
    1:    CC="$CC '$_OLDCC'"
    1:    CXX='${topsrcdir}/build/hcpp'
    1:    CXX="$CXX '$_OLDCXX'"
    1:    AC_SUBST(CC)
    1:    AC_SUBST(CXX)
    1: fi
    1: 
54197: AC_MSG_CHECKING([for posix_fallocate])       
54197: AC_TRY_LINK([#define _XOPEN_SOURCE 600
54197:   #include <fcntl.h>],
54197:                  [posix_fallocate(0, 0, 0);],
54197:                  [ac_cv___posix_fallocate=true],
54197:                  [ac_cv___posix_fallocate=false])
54197: 
54197: if test "$ac_cv___posix_fallocate" = true ; then
54197:   AC_DEFINE(HAVE_POSIX_FALLOCATE)
54197:   AC_MSG_RESULT(yes)
54197: else
54197:   AC_MSG_RESULT(no)
54197: fi
54197: 
    1: dnl Check for missing components
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$MOZ_X11"; then
    1:     dnl ====================================================
    1:     dnl = Check if X headers exist
    1:     dnl ====================================================
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $XCFLAGS"
    1:     AC_TRY_COMPILE([
    1:         #include <stdio.h>
13878:         #include <stdlib.h>
    1:         #include <X11/Xlib.h>
    1:         #include <X11/Intrinsic.h>
69206:         #include <X11/extensions/XShm.h>
    1:     ],
    1:     [
    1:         Display *dpy = 0;
    1:         if ((dpy = XOpenDisplay(NULL)) == NULL) {
    1:             fprintf(stderr, ": can't open %s\n", XDisplayName(NULL));
    1:             exit(1);
    1:         }
    1:     ], [], 
    1:     [ AC_MSG_ERROR([Could not compile basic X program.]) ])
    1:     CFLAGS="$_SAVE_CFLAGS"
    1: 
69923:     if test -n "$MISSING_X"; then
    1:         AC_MSG_ERROR([ Could not find the following X libraries: $MISSING_X ]);
    1:     fi
    1: 
    1: fi # MOZ_X11
34236: 
34236: dnl Check for headers, etc. needed by WebGL.
35488: if test -n "$MOZ_WEBGL_GLX"; then
63478:     MOZ_CHECK_HEADER(GL/glx.h)
34236:     if test "$ac_cv_header_GL_glx_h" != "yes"; then
64653:         AC_MSG_ERROR([Can't find header GL/glx.h for WebGL (install mesa-common-dev (Ubuntu), mesa-libGL-devel (Fedora), or Mesa-devel (openSUSE))])
34236:     fi
35488: fi # MOZ_WEBGL_GLX
    1: fi # COMPILE_ENVIRONMENT
    1: 
35250: if test "$USE_FC_FREETYPE"; then
35250:     if test "$COMPILE_ENVIRONMENT"; then
35250:     	_SAVE_CPPFLAGS="$CPPFLAGS"
35434:     	CPPFLAGS="$CPPFLAGS $FT2_CFLAGS $XCFLAGS"
35250:         AC_CHECK_HEADERS(fontconfig/fcfreetype.h, , 
35250:             [AC_MSG_ERROR(Can't find header fontconfig/fcfreetype.h.)])
35250:     	CPPFLAGS="$_SAVE_CPPFLAGS"
35250:     else
35250:         AC_DEFINE(HAVE_FONTCONFIG_FCFREETYPE_H)
35250:     fi
35250: fi
35250: 
    1: dnl Set various defines and substitutions
    1: dnl ========================================================
    1: 
63458: if test "$OS_ARCH" = "Darwin"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
68662: elif test "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "OS2"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
39009: fi
    1: 
    1: if test "$MOZ_DEBUG"; then
    1:     AC_DEFINE(MOZ_REFLOW_PERF)
    1:     AC_DEFINE(MOZ_REFLOW_PERF_DSP)
    1: fi
    1: 
    1: if test "$ACCESSIBILITY" -a "$MOZ_ENABLE_GTK2" ; then
    1:     AC_DEFINE(MOZ_ACCESSIBILITY_ATK)
    1:     ATK_FULL_VERSION=`$PKG_CONFIG --modversion atk`
    1:     ATK_MAJOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:     ATK_MINOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:     ATK_REV_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:     AC_DEFINE_UNQUOTED(ATK_MAJOR_VERSION, $ATK_MAJOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_MINOR_VERSION, $ATK_MINOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_REV_VERSION, $ATK_REV_VERSION)
    1: fi
    1: 
    1: case "$host_os" in
    1: mingw*)
    1:     WIN_TOP_SRC=`cd $srcdir; pwd -W`
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(WIN_TOP_SRC)
    1: 
    1: AC_SUBST(MOZILLA_VERSION)
    1: 
    1: AC_SUBST(ac_configure_args)
    1: 
    1: dnl Spit out some output
    1: dnl ========================================================
    1: 
    1: dnl The following defines are used by xpcom
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES
    1: CPP_THROW_NEW
    1: HAVE_CPP_2BYTE_WCHAR_T
    1: HAVE_CPP_ACCESS_CHANGING_USING
    1: HAVE_CPP_AMBIGUITY_RESOLVING_USING
    1: HAVE_CPP_BOOL
30421: HAVE_CPP_CHAR16_T
    1: HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR
    1: HAVE_CPP_EXPLICIT
    1: HAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX
    1: HAVE_CPP_NAMESPACE_STD
    1: HAVE_CPP_NEW_CASTS
    1: HAVE_CPP_PARTIAL_SPECIALIZATION
    1: HAVE_CPP_TROUBLE_COMPARING_TO_ZERO
    1: HAVE_CPP_TYPENAME
    1: HAVE_CPP_UNAMBIGUOUS_STD_NOTEQUAL
    1: HAVE_STATVFS
    1: NEED_CPP_UNUSED_IMPLEMENTATIONS
    1: NEW_H
    1: HAVE_GETPAGESIZE
    1: HAVE_ICONV
    1: HAVE_ICONV_WITH_CONST_INPUT
    1: HAVE_MBRTOWC
    1: HAVE_SYS_MOUNT_H
    1: HAVE_SYS_VFS_H
    1: HAVE_WCRTOMB
    1: "
    1: 
    1: AC_CONFIG_HEADER(
    1: netwerk/necko-config.h
    1: xpcom/xpcom-config.h
    1: xpcom/xpcom-private.h
    1: )
    1: 
    1: # Save the defines header file before autoconf removes it.
    1: # (Do not add AC_DEFINE calls after this line.)
    1:   _CONFIG_TMP=confdefs-tmp.h
    1:   _CONFIG_DEFS_H=mozilla-config.h
    1: 
    1:   cat > $_CONFIG_TMP <<\EOF
    1: /* List of defines generated by configure. Included with preprocessor flag,
    1:  * -include, to avoid long list of -D defines on the compile command-line.
    1:  * Do not edit.
    1:  */
    1: 
    1: #ifndef _MOZILLA_CONFIG_H_
    1: #define _MOZILLA_CONFIG_H_
    1: EOF
    1: 
    1: _EGREP_PATTERN='^#define ('
    1: if test -n "$_NON_GLOBAL_ACDEFINES"; then
    1:     for f in $_NON_GLOBAL_ACDEFINES; do
    1:         _EGREP_PATTERN="${_EGREP_PATTERN}$f|"
    1:     done
    1: fi
    1: _EGREP_PATTERN="${_EGREP_PATTERN}dummy_never_defined)"
    1:  
    1:   sort confdefs.h | egrep -v "$_EGREP_PATTERN" >> $_CONFIG_TMP
    1: 
    1:   cat >> $_CONFIG_TMP <<\EOF
    1: 
    1: #endif /* _MOZILLA_CONFIG_H_ */
    1: 
    1: EOF
    1: 
    1:   # Only write mozilla-config.h when something changes (or it doesn't exist)
    1:   if cmp -s $_CONFIG_TMP $_CONFIG_DEFS_H; then
    1:     rm $_CONFIG_TMP
    1:   else
    1:     AC_MSG_RESULT("creating $_CONFIG_DEFS_H")
    1:     mv -f $_CONFIG_TMP $_CONFIG_DEFS_H
    1: 
    1:     echo ==== $_CONFIG_DEFS_H =================================
    1:     cat $_CONFIG_DEFS_H
    1:   fi
    1: 
    1: dnl Probably shouldn't call this manually but we always want the output of DEFS
    1: rm -f confdefs.h.save
    1: mv confdefs.h confdefs.h.save
    1: egrep -v "$_EGREP_PATTERN" confdefs.h.save > confdefs.h
    1: AC_OUTPUT_MAKE_DEFS()
    1: MOZ_DEFINES=$DEFS
    1: AC_SUBST(MOZ_DEFINES)
    1: rm -f confdefs.h
    1: mv confdefs.h.save confdefs.h
    1: 
    1: dnl Load the list of Makefiles to generate.
    1: dnl   To add new Makefiles, edit allmakefiles.sh.
    1: dnl   allmakefiles.sh sets the variable, MAKEFILES.
    1: . ${srcdir}/allmakefiles.sh
    1: dnl 
    1: dnl Run a perl script to quickly create the makefiles.
    1: dnl If it succeeds, it outputs a shell command to set CONFIG_FILES
    1: dnl   for the files it cannot handle correctly. This way, config.status
    1: dnl   will handle these files.
    1: dnl If it fails, nothing is set and config.status will run as usual.
    1: dnl
    1: dnl This does not change the $MAKEFILES variable.
    1: dnl
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl > conftest.sh
    1: . ./conftest.sh
    1: rm conftest.sh
    1: 
    1: echo $MAKEFILES > unallmakefiles
    1: 
24557: mv -f config/autoconf.mk config/autoconf.mk.orig 2> /dev/null
24557: 
    1: AC_OUTPUT($MAKEFILES)
    1: 
71675: # Generate a JSON config file for unittest harnesses etc to read
71675: # build configuration details from in a standardized way.
71675: OS_TARGET=${OS_TARGET} TARGET_CPU=${TARGET_CPU} MOZ_DEBUG=${MOZ_DEBUG} \
72672: MOZ_WIDGET_TOOLKIT=${MOZ_WIDGET_TOOLKIT} UNIVERSAL_BINARY=${UNIVERSAL_BINARY} \
71675:   $PYTHON ${_topsrcdir}/config/writemozinfo.py ./mozinfo.json.tmp
71675: if cmp -s ./mozinfo.json.tmp ./mozinfo.json; then
71675:   rm ./mozinfo.json.tmp
71675: else
71675:   mv -f ./mozinfo.json.tmp ./mozinfo.json
71675: fi
71675: 
16289: dnl Prevent the regeneration of cairo-features.h forcing rebuilds of gfx stuff
16289: if test "$CAIRO_FEATURES_H"; then
16289:   if cmp -s $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig; then
24557:     echo "$CAIRO_FEATURES_H is unchanged"
16289:     mv -f "$CAIRO_FEATURES_H".orig "$CAIRO_FEATURES_H" 2> /dev/null
16289:   else
16289:     rm -f "$CAIRO_FEATURES_H".orig 2> /dev/null
16289:   fi
16289: fi
16289: 
57366: # Run freetype configure script
57366: 
57366: if test "$MOZ_TREE_FREETYPE"; then
57366:    export CFLAGS="$CFLAGS -std=c99"
57366:    export CPPFLAGS="$CPPFLAGS"
57366:    export CXXFLAGS="$CXXFLAGS"
57366:    export LDFLAGS="$LDFLAGS"
57366:    export CONFIG_FILES="unix-cc.mk:unix-cc.in unix-def.mk:unix-def.in freetype-config freetype2.pc:freetype2.in"
57366:    ac_configure_args="$ac_configure_args --host=$target --disable-shared --with-pic=yes"
57366:    AC_OUTPUT_SUBDIRS(modules/freetype2)
57366: fi
57366: 
    1: dnl ========================================================
    1: dnl = Setup a nice relatively clean build environment for
    1: dnl = sub-configures.
    1: dnl ========================================================
    1: CC="$_SUBDIR_CC" 
    1: CXX="$_SUBDIR_CXX" 
    1: CFLAGS="$_SUBDIR_CFLAGS" 
    1: CPPFLAGS="$_SUBDIR_CPPFLAGS"
    1: CXXFLAGS="$_SUBDIR_CXXFLAGS"
    1: LDFLAGS="$_SUBDIR_LDFLAGS"
    1: HOST_CC="$_SUBDIR_HOST_CC" 
    1: HOST_CFLAGS="$_SUBDIR_HOST_CFLAGS"
    1: HOST_LDFLAGS="$_SUBDIR_HOST_LDFLAGS"
    1: RC=
    1: 
    1: unset MAKEFILES
    1: unset CONFIG_FILES
    1: 
21115: # No need to run subconfigures when building with LIBXUL_SDK_DIR
21115: if test "$COMPILE_ENVIRONMENT" -a -z "$LIBXUL_SDK_DIR"; then
21115: 
43127: if test -n "$_WRAP_MALLOC"; then
43127:   _SUBDIR_CONFIG_ARGS="$_SUBDIR_CONFIG_ARGS --enable-wrap-malloc"
43127: fi
43127: 
17103: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS --with-dist-prefix=$MOZ_BUILD_ROOT/dist --with-mozilla"
    1:     if test -z "$MOZ_DEBUG"; then
    1:         ac_configure_args="$ac_configure_args --disable-debug"
    1:     fi
    1:     if test "$MOZ_OPTIMIZE" = "1"; then
    1:         ac_configure_args="$ac_configure_args --enable-optimize"
    1:     fi
47975:     if test "$OS_ARCH" = "WINNT" -a "$NS_TRACE_MALLOC"; then
    1:        ac_configure_args="$ac_configure_args --enable-debug --disable-optimize"
    1:     fi
    1:     if test -n "$HAVE_64BIT_OS"; then
    1:         ac_configure_args="$ac_configure_args --enable-64bit"
    1:     fi
15258:     if test -n "$USE_ARM_KUSER"; then
15258:         ac_configure_args="$ac_configure_args --with-arm-kuser"
15258:     fi
    1:     AC_OUTPUT_SUBDIRS(nsprpub)
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS"
    1: fi
    1: 
    1: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     # Hack to deal with the fact that we use NSPR_CFLAGS everywhere
    1:     AC_MSG_WARN([Recreating autoconf.mk with updated nspr-config output])
68662:     if test "$OS_ARCH" != "WINNT"; then
18865:        NSPR_LIBS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --libdir=$LIBXUL_DIST/lib --libs`
18865:        $PERL -pi.bak -e "s '^NSPR_LIBS\\s*=.*'NSPR_LIBS = $NSPR_LIBS'" config/autoconf.mk
18865:        NSPR_CFLAGS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --includedir=$LIBXUL_DIST/include/nspr --cflags`
18865:        $PERL -pi.bak -e "s '^NSPR_CFLAGS\\s*=.*'NSPR_CFLAGS = $NSPR_CFLAGS'" config/autoconf.mk
    1:     fi
    1:     rm -f config/autoconf.mk.bak
    1: fi
    1: 
21062: # Run the SpiderMonkey 'configure' script.
21062: dist=$MOZ_BUILD_ROOT/dist
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: ac_configure_args="$ac_configure_args --enable-threadsafe"
40442: if test "$BUILD_CTYPES"; then
40442:     # Build js-ctypes on the platforms we can.
40442:     ac_configure_args="$ac_configure_args --enable-ctypes"
40442: fi
50577: if test -z "$JS_SHARED_LIBRARY" ; then
50577:     ac_configure_args="$ac_configure_args --disable-shared-js"
50577: fi
21152: if test -z "$MOZ_NATIVE_NSPR"; then
21062:     ac_configure_args="$ac_configure_args --with-nspr-cflags='$NSPR_CFLAGS'"
21062:     ac_configure_args="$ac_configure_args --with-nspr-libs='$NSPR_LIBS'"
21152: fi
23004: ac_configure_args="$ac_configure_args --with-dist-dir=../../dist"
39697: ac_configure_args="$ac_configure_args --prefix=$dist"
22636: ac_configure_args="$ac_configure_args --with-sync-build-files=$_topsrcdir"
21062: if test "$MOZ_MEMORY"; then
21062:    ac_configure_args="$ac_configure_args --enable-jemalloc"
27523:    if test -n "$MOZ_MEMORY_LDFLAGS"; then
27523:      export MOZ_MEMORY_LDFLAGS
27523:    fi
21062: fi
63445: export MOZ_APP_NAME
21062: AC_OUTPUT_SUBDIRS(js/src)
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: 
21115: fi # COMPILE_ENVIRONMENT && !LIBXUL_SDK_DIR
24557: 
24557: dnl Prevent the regeneration of autoconf.mk forcing rebuilds of the world
24557: dnl Needs to be at the end to respect possible changes from NSPR configure
24778: if cmp -s config/autoconf.mk config/autoconf.mk.orig; then
24557:   echo "config/autoconf.mk is unchanged"
24557:   mv -f config/autoconf.mk.orig config/autoconf.mk 2> /dev/null
24557: else
24557:   rm -f config/autoconf.mk.orig 2> /dev/null
24557: fi
63142: 
