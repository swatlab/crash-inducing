23671: /* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
16647: /* ***** BEGIN LICENSE BLOCK *****
16647:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
16647:  *
16647:  * The contents of this file are subject to the Mozilla Public License Version
16647:  * 1.1 (the "License"); you may not use this file except in compliance with
16647:  * the License. You may obtain a copy of the License at
16647:  * http://www.mozilla.org/MPL/
16647:  *
16647:  * Software distributed under the License is distributed on an "AS IS" basis,
16647:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
16647:  * for the specific language governing rights and limitations under the
16647:  * License.
16647:  *
16647:  * The Original Code is JavaScript Engine testing utilities.
16647:  *
16647:  * The Initial Developer of the Original Code is
16647:  * Mozilla Foundation.
16647:  * Portions created by the Initial Developer are Copyright (C) 2008
16647:  * the Initial Developer. All Rights Reserved.
16647:  *
16647:  * Contributor(s): Mike Shaver
16647:  *                 Brendan Eich
16647:  *                 Andreas Gal
16647:  *                 David Anderson
20329:  *                 Boris Zbarsky
20329:  *                 Brian Crowder
20329:  *                 Blake Kaplan
20329:  *                 Robert Sayre
20329:  *                 Vladimir Vukicevic
16647:  *
16647:  * Alternatively, the contents of this file may be used under the terms of
16647:  * either the GNU General Public License Version 2 or later (the "GPL"), or
16647:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
16647:  * in which case the provisions of the GPL or the LGPL are applicable instead
16647:  * of those above. If you wish to allow use of your version of this file only
16647:  * under the terms of either the GPL or the LGPL, and not to allow others to
16647:  * use your version of this file under the terms of the MPL, indicate your
16647:  * decision by deleting the provisions above and replace them with the notice
16647:  * and other provisions required by the GPL or the LGPL. If you do not delete
16647:  * the provisions above, a recipient may use your version of this file under
16647:  * the terms of any one of the MPL, the GPL or the LGPL.
16647:  *
16647:  * ***** END LICENSE BLOCK ***** */
16647: 
16647: var gTestfile = 'trace-test.js';
16647: //-----------------------------------------------------------------------------
16647: var BUGNUMBER = 'none';
16647: var summary = 'trace-capability mini-testsuite';
16647: 
16647: printBugNumber(BUGNUMBER);
16647: printStatus (summary);
16647: 
19318: jit(true);
19318: 
20329: /**
20329:  * A number of the tests in this file depend on the setting of
20329:  * HOTLOOP.  Define some constants up front, so they're easy to grep
20329:  * for.
20329:  */
20329: // The HOTLOOP constant we depend on; only readable from our stats
20329: // object in debug builds.
20329: const haveTracemonkey = !!(this.tracemonkey)
20329:   const HOTLOOP = haveTracemonkey ? tracemonkey.HOTLOOP : 2;
20329: // The loop count at which we trace
20329: const RECORDLOOP = HOTLOOP;
20329: // The loop count at which we run the trace
20329: const RUNLOOP = HOTLOOP + 1;
20329: 
16647: var testName = null;
16647: if ("arguments" in this && arguments.length > 0)
16647:   testName = arguments[0];
16647: var fails = [], passes=[];
16647: 
20329: function jitstatHandler(f)
20329: {
23671:   if (!haveTracemonkey) 
20329:     return;
23671: 
20329:   // XXXbz this is a nasty hack, but I can't figure out a way to
20329:   // just use jitstats.tbl here
20329:   f("recorderStarted");
20329:   f("recorderAborted");
20329:   f("traceCompleted");
20329:   f("sideExitIntoInterpreter");
24075:   f("timeoutIntoInterpreter");
20329:   f("typeMapMismatchAtEntry");
20329:   f("returnToDifferentLoopHeader");
20329:   f("traceTriggered");
20329:   f("globalShapeMismatchAtEntry");
20329:   f("treesTrashed");
20329:   f("slotPromoted");
20329:   f("unstableLoopVariable");
20329:   f("breakLoopExits");
20329:   f("returnLoopExits");
24075:   f("mergedLoopExits");
24075:   f("noCompatInnerTrees");
24075: }
24075: 
24075: var jitProps = {};
24075: jitstatHandler(function(prop) {
24075:                  jitProps[prop] = true;
24075:                });
24075: var hadJITstats = false;
24075: for (var p in jitProps)
24075:   hadJITstats = true;
20329: 
16647: function test(f)
16647: {
20329:   if (!testName || testName == f.name) {
24075:     var expectedJITstats = f.jitstats;
24075:     if (hadJITstats && expectedJITstats)
24075:     {
24075:       var expectedProps = {};
24075:       jitstatHandler(function(prop) {
24075:                        if (prop in expectedJITstats)
24075:                          expectedProps[prop] = true;
24075:                      });
24075:       for (var p in expectedJITstats)
24075:       {
24075:         if (!(p in expectedProps))
24075:           throw "Bad property in " + f.name + ".jitstats: " + p;
24075:       }
24075:     }
24075: 
20329:     // Collect our jit stats
20329:     var localJITstats = {};
24075:     jitstatHandler(function(prop) {
20329:                      localJITstats[prop] = tracemonkey[prop];
20329:                    });
24075:     check(f.name, f(), f.expected, localJITstats, expectedJITstats);
20329:   }
16647: }
16647: 
23671: function map_test(t, cases)
23671: {
23671:   for (var i = 0; i < cases.length; i++) {
23671:     function c() { return t(cases[i].input); }
23671:     c.expected = cases[i].expected;
23671:     c.name = t.name + "(" + uneval(cases[i].input) + ")";
23671:     test(c);
23671:   }
23671: }
23671: 
23671: // Use this function to compare expected and actual test results.
23671: // Types must match.
23671: // For numbers, treat NaN as matching NaN, distinguish 0 and -0, and
23671: // tolerate a certain degree of error for other values.
23671: //
23671: // These are the same criteria used by the tests in js/tests, except that
23671: // we distinguish 0 and -0.
23671: function close_enough(expected, actual)
23671: {
23671:   if (typeof expected != typeof actual)
23671:     return false;
23671:   if (typeof expected != 'number')
23671:     return actual == expected;
23671: 
23671:   // Distinguish NaN from other values.  Using x != x comparisons here
23671:   // works even if tests redefine isNaN.
23671:   if (actual != actual)
23671:     return expected != expected
23671:       if (expected != expected)
23671:         return false;
23671: 
23671:   // Tolerate a certain degree of error.
23671:   if (actual != expected)
23671:     return Math.abs(actual - expected) <= 1E-10;
23671: 
23671:   // Distinguish 0 and -0.
23671:   if (actual == 0)
23671:     return (1 / actual > 0) == (1 / expected > 0);
23671: 
23671:   return true;
23671: }
23671: 
20329: function check(desc, actual, expected, oldJITstats, expectedJITstats)
16647: {
20329:   var pass = false;
23671:   if (close_enough(expected, actual)) {
20329:     pass = true;
20329:     jitstatHandler(function(prop) {
20329:         if (expectedJITstats && prop in expectedJITstats &&
20329:             expectedJITstats[prop] !=
20329:             tracemonkey[prop] - oldJITstats[prop]) {
20329:           pass = false;
20329:         }
20329:       });
20329:     if (pass) {
24350:       reportCompare(expected, actual, desc);
20249:       passes.push(desc);
20329:       return print(desc, ": passed");
20329:     }
20249:   }
20249: 
20329:   if (expected instanceof RegExp) {
20329:     pass = reportMatch(expected, actual + '', desc);
20329:     if (pass) {
20329:       jitstatHandler(function(prop) {
20329:           if (expectedJITstats && prop in expectedJITstats &&
20329:               expectedJITstats[prop] !=
20329:               tracemonkey[prop] - oldJITstats[prop]) {
20329:             pass = false;
20249:           }
20329:         });
20329:     }
20329:     if (pass) {
16647:       passes.push(desc);
20329:       return print(desc, ": passed");
20329:     }
16647:   }
20249: 
16647:   reportCompare(expected, actual, desc);
23671: 
16647:   fails.push(desc);
20329:   var expectedStats = "";
20329:   if (expectedJITstats) {
20329:     jitstatHandler(function(prop) {
20329:         if (prop in expectedJITstats) {
20329:           if (expectedStats)
20329:             expectedStats += " ";
20329:           expectedStats +=
20329:             prop + ": " + expectedJITstats[prop];
20329:         }
20329:       });
20329:   }
20329:   var actualStats = "";
20329:   if (expectedJITstats) {
20329:     jitstatHandler(function(prop) {
20329:         if (prop in expectedJITstats) {
20329:           if (actualStats)
20329:             actualStats += " ";
20329:           actualStats += prop + ": " + (tracemonkey[prop]-oldJITstats[prop]);
20329:         }
20329:       });
20329:   }
23671:   print(desc, ": FAILED: expected", typeof(expected), 
23671:         "(", uneval(expected), ")",
20329:         (expectedStats ? " [" + expectedStats + "] " : ""),
20329:         "!= actual",
23671:         typeof(actual), "(", uneval(actual), ")",
20329:         (actualStats ? " [" + actualStats + "] " : ""));
16647: }
16647: 
16647: function ifInsideLoop()
16647: {
16647:   var cond = true, intCond = 5, count = 0;
16647:   for (var i = 0; i < 100; i++) {
16647:     if (cond)
16647:       count++;
16647:     if (intCond)
16647:       count++;
16647:   }
16647:   return count;
16647: }
16647: ifInsideLoop.expected = 200;
16647: test(ifInsideLoop);
16647: 
16647: function bitwiseAnd_inner(bitwiseAndValue) {
16647:   for (var i = 0; i < 60000; i++)
16647:     bitwiseAndValue = bitwiseAndValue & i;
16647:   return bitwiseAndValue;
16647: }
16647: function bitwiseAnd()
16647: {
16647:   return bitwiseAnd_inner(12341234);
16647: }
16647: bitwiseAnd.expected = 0;
16647: test(bitwiseAnd);
16647: 
16647: if (!testName || testName == "bitwiseGlobal") {
16647:   bitwiseAndValue = Math.pow(2,32);
16647:   for (var i = 0; i < 60000; i++)
16647:     bitwiseAndValue = bitwiseAndValue & i;
16647:   check("bitwiseGlobal", bitwiseAndValue, 0);
16647: }
16647: 
16647: 
16647: function equalInt()
16647: {
19318:   var i1 = 55, one = 1, zero = 0, undef;
19318:   var o1 = { }, o2 = { };
19318:   var s = "5";
19318:   var hits = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
16647:   for (var i = 0; i < 5000; i++) {
16647:     if (i1 == 55) hits[0]++;
16647:     if (i1 != 56) hits[1]++;
16647:     if (i1 < 56)  hits[2]++;
16647:     if (i1 > 50)  hits[3]++;
16647:     if (i1 <= 60) hits[4]++;
16647:     if (i1 >= 30) hits[5]++;
16647:     if (i1 == 7)  hits[6]++;
16647:     if (i1 != 55) hits[7]++;
16647:     if (i1 < 30)  hits[8]++;
16647:     if (i1 > 90)  hits[9]++;
16647:     if (i1 <= 40) hits[10]++;
16647:     if (i1 >= 70) hits[11]++;
19318:     if (o1 == o2) hits[12]++;
19318:     if (o2 != null) hits[13]++;
19318:     if (s < 10) hits[14]++;
19318:     if (true < zero) hits[15]++;
19318:     if (undef > one) hits[16]++;
19318:     if (undef < zero) hits[17]++;
16647:   }
16647:   return hits.toString();
16647: }
19318: equalInt.expected = "5000,5000,5000,5000,5000,5000,0,0,0,0,0,0,0,5000,5000,0,0,0";
16647: test(equalInt);
16647: 
16647: var a;
16647: function setelem()
16647: {
16647:   a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
16647:   a = a.concat(a, a, a);
16647:   var l = a.length;
16647:   for (var i = 0; i < l; i++) {
16647:     a[i] = i;
16647:   }
16647:   return a.toString();
16647: }
16647: setelem.expected = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83";
16647: test(setelem);
16647: 
16647: function getelem_inner(a)
16647: {
16647:   var accum = 0;
16647:   var l = a.length;
16647:   for (var i = 0; i < l; i++) {
16647:     accum += a[i];
16647:   }
16647:   return accum;
16647: }
16647: function getelem()
16647: {
16647:   return getelem_inner(a);
16647: }
16647: getelem.expected = 3486;
16647: test(getelem);
16647: 
16647: globalName = 907;
16647: function name()
16647: {
16647:   var a = 0;
16647:   for (var i = 0; i < 100; i++)
16647:     a = globalName;
16647:   return a;
16647: }
16647: name.expected = 907;
16647: test(name);
16647: 
16647: var globalInt = 0;
16647: if (!testName || testName == "globalGet") {
16647:   for (var i = 0; i < 500; i++)
16647:     globalInt = globalName + i;
16647:   check("globalGet", globalInt, globalName + 499);
16647: }
16647: 
16647: if (!testName || testName == "globalSet") {
16647:   for (var i = 0; i < 500; i++)
16647:     globalInt = i;
16647:   check("globalSet", globalInt, 499);
16647: }
16647: 
16647: function arith()
16647: {
16647:   var accum = 0;
16647:   for (var i = 0; i < 100; i++) {
16647:     accum += (i * 2) - 1;
16647:   }
16647:   return accum;
16647: }
16647: arith.expected = 9800;
16647: test(arith);
16647: 
16647: function lsh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = 0x1 << n;
16647:   return r;
16647: }
23671: 
23671: map_test (lsh_inner,
23671:           [{input: 15, expected: 32768},
23671:            {input: 55, expected: 8388608},
23671:            {input: 1,  expected: 2},
23671:            {input: 0,  expected: 1}]);
16647: 
16647: function rsh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = 0x11010101 >> n;
16647:   return r;
16647: }
23671: map_test (rsh_inner,
23671:           [{input: 8,  expected: 1114369},
23671:            {input: 5,  expected: 8914952},
23671:            {input: 35, expected: 35659808},
23671:            {input: -1, expected: 0}]);
16647: 
16647: function ursh_inner(n)
16647: {
16647:   var r;
16647:   for (var i = 0; i < 35; i++)
16647:     r = -55 >>> n;
16647:   return r;
16647: }
23671: map_test (ursh_inner,
23671:           [{input: 8,  expected: 16777215},
23671:            {input: 33, expected: 2147483620},
23671:            {input: 0,  expected: 4294967241},
23671:            {input: 1,  expected: 2147483620}]);
16647: 
16647: function doMath_inner(cos)
16647: {
16647:   var s = 0;
16647:   var sin = Math.sin;
16647:   for (var i = 0; i < 200; i++)
16647:     s = -Math.pow(sin(i) + cos(i * 0.75), 4);
16647:   return s;
16647: }
16647: function doMath() {
16647:   return doMath_inner(Math.cos);
16647: }
16647: doMath.expected = -0.5405549555611059;
16647: test(doMath);
16647: 
16647: function fannkuch() {
16647:   var count = Array(8);
16647:   var r = 8;
16647:   var done = 0;
16647:   while (done < 40) {
16647:     // write-out the first 30 permutations
16647:     done += r;
16647:     while (r != 1) { count[r - 1] = r; r--; }
16647:     while (true) {
16647:       count[r] = count[r] - 1;
16647:       if (count[r] > 0) break;
16647:       r++;
16647:     }
16647:   }
16647:   return done;
16647: }
16647: fannkuch.expected = 41;
16647: test(fannkuch);
16647: 
16647: function xprop()
16647: {
16647:   a = 0;
16647:   for (var i = 0; i < 20; i++)
16647:     a += 7;
16647:   return a;
16647: }
16647: xprop.expected = 140;
16647: test(xprop);
16647: 
16647: var a = 2;
16647: function getprop_inner(o2)
16647: {
16647:   var o = {a:5};
16647:   var t = this;
16647:   var x = 0;
16647:   for (var i = 0; i < 20; i++) {
16647:     t = this;
16647:     x += o.a + o2.a + this.a + t.a;
16647:   }
16647:   return x;
16647: }
16647: function getprop() {
16647:   return getprop_inner({a:9});
16647: }
16647: getprop.expected = 360;
16647: test(getprop);
16647: 
16647: function mod()
16647: {
16647:   var mods = [-1,-1,-1,-1];
16647:   var a = 9.5, b = -5, c = 42, d = (1/0);
16647:   for (var i = 0; i < 20; i++) {
16647:     mods[0] = a % b;
16647:     mods[1] = b % 1;
16647:     mods[2] = c % d;
16647:     mods[3] = c % a;
16647:     mods[4] = b % 0;
16647:   }
16647:   return mods.toString();
16647: }
16647: mod.expected = "4.5,0,42,4,NaN";
16647: test(mod);
16647: 
16647: function glob_f1() {
16647:   return 1;
16647: }
16647: function glob_f2() {
16647:   return glob_f1();
16647: }
16647: function call()
16647: {
16647:   var q1 = 0, q2 = 0, q3 = 0, q4 = 0, q5 = 0;
16647:   var o = {};
16647:   function f1() {
16647:     return 1;
16647:   }
16647:   function f2(f) {
16647:     return f();
16647:   }
16647:   o.f = f1;
16647:   for (var i = 0; i < 100; ++i) {
16647:     q1 += f1();
16647:     q2 += f2(f1);
16647:     q3 += glob_f1();
16647:     q4 += o.f();
16647:     q5 += glob_f2();
16647:   }
23671:   var ret = String([q1, q2, q3, q4, q5]);
16647:   return ret;
16647: }
16647: call.expected =  "100,100,100,100,100";
16647: test(call);
16647: 
16647: function setprop()
16647: {
16647:   var obj = { a:-1 };
16647:   var obj2 = { b:-1, a:-1 };
16647:   for (var i = 0; i < 20; i++) {
16647:     obj2.b = obj.a = i;
16647:   }
16647:   return [obj.a, obj2.a, obj2.b].toString();
16647: }
16647: setprop.expected =  "19,-1,19";
16647: test(setprop);
16647: 
16647: function testif() {
16647: 	var q = 0;
16647: 	for (var i = 0; i < 100; i++) {
16647: 		if ((i & 1) == 0)
16647: 			q++;
16647: 		else
16647: 			q--;
16647: 	}
16647:   return q;
16647: }
23671: testif.expected = 0;
16647: test(testif);
16647: 
19318: var globalinc = 0;
16647: function testincops(n) {
16647:   var i = 0, o = {p:0}, a = [0];
16647:   n = 100;
16647: 
16647:   for (i = 0; i < n; i++);
16647:   while (i-- > 0);
16647:   for (i = 0; i < n; ++i);
16647:   while (--i >= 0);
16647: 
19318:   for (o.p = 0; o.p < n; o.p++) globalinc++;
19318:   while (o.p-- > 0) --globalinc;
19318:   for (o.p = 0; o.p < n; ++o.p) ++globalinc;
19318:   while (--o.p >= 0) globalinc--;
16647: 
16647:   ++i; // set to 0
16647:   for (a[i] = 0; a[i] < n; a[i]++);
16647:   while (a[i]-- > 0);
16647:   for (a[i] = 0; a[i] < n; ++a[i]);
16647:   while (--a[i] >= 0);
16647: 
19318:   return [++o.p, ++a[i], globalinc].toString();
16647: }
19318: testincops.expected = "0,0,0";
16647: test(testincops);
16647: 
16647: function trees() {
16647:   var i = 0, o = [0,0,0];
16647:   for (i = 0; i < 100; ++i) {
16647:     if ((i & 1) == 0) o[0]++;
16647:     else if ((i & 2) == 0) o[1]++;
16647:     else o[2]++;
16647:   }
23671:   return String(o);
16647: }
16647: trees.expected = "50,25,25";
16647: test(trees);
16647: 
16647: function unboxint() {
16647:   var q = 0;
16647:   var o = [4];
16647:   for (var i = 0; i < 100; ++i)
16647:     q = o[0] << 1;
16647:   return q;
16647: }
23671: unboxint.expected = 8;
16647: test(unboxint);
16647: 
16647: function strings()
16647: {
16647:   var a = [], b = -1;
16647:   var s = "abcdefghij", s2 = "a";
16647:   var f = "f";
16647:   var c = 0, d = 0, e = 0, g = 0;
16647:   for (var i = 0; i < 10; i++) {
19318:     a[i] = (s.substring(i, i+1) + s[i] + String.fromCharCode(s2.charCodeAt(0) + i)).concat(i) + i;
16647:     if (s[i] == f)
16647:       c++;
16647:     if (s[i] != 'b')
16647:       d++;
16647:     if ("B" > s2)
16647:       g++; // f already used
16647:     if (s2 < "b")
16647:       e++;
16647:     b = s.length;
16647:   }
16647:   return a.toString() + b + c + d + e + g;
16647: }
19318: strings.expected = "aaa00,bbb11,ccc22,ddd33,eee44,fff55,ggg66,hhh77,iii88,jjj991019100";
16647: test(strings);
16647: 
19318: function dependentStrings()
19318: {
19318:   var a = [];
19318:   var t = "abcdefghijklmnopqrst";
19318:   for (var i = 0; i < 10; i++) {
19318:     var s = t.substring(2*i, 2*i + 2);
19318:     a[i] = s + s.length;
19318:   }
19318:   return a.join("");
19318: }
19318: dependentStrings.expected = "ab2cd2ef2gh2ij2kl2mn2op2qr2st2";
19318: test(dependentStrings);
19318: 
16647: function stringConvert()
16647: {
16647:   var a = [];
16647:   var s1 = "F", s2 = "1.3", s3 = "5";
16647:   for (var i = 0; i < 10; i++) {
16647:     a[0] = 1 >> s1;
16647:     a[1] = 10 - s2;
16647:     a[2] = 15 * s3;
16647:     a[3] = s3 | 32;
19318:     a[4] = s2 + 60;
16647:     // a[5] = 9 + s3;
16647:     // a[6] = -s3;
16647:     a[7] = s3 & "7";
16647:     // a[8] = ~s3;
16647:   }
16647:   return a.toString();
16647: }
19318: stringConvert.expected = "1,8.7,75,37,1.360,,,5";
16647: test(stringConvert);
16647: 
16647: function orTestHelper(a, b, n)
16647: {
16647:   var k = 0;
16647:   for (var i = 0; i < n; i++) {
16647:     if (a || b)
16647:       k += i;
16647:   }
16647:   return k;
16647: }
16647: 
19318: var orNaNTest1, orNaNTest2;
19318: 
19318: orNaNTest1 = new Function("return orTestHelper(NaN, NaN, 10);");
19318: orNaNTest1.name = 'orNaNTest1';
23671: orNaNTest1.expected = 0;
19318: orNaNTest2 = new Function("return orTestHelper(NaN, 1, 10);");
19318: orNaNTest2.name = 'orNaNTest2';
23671: orNaNTest2.expected = 45;
19318: test(orNaNTest1);
19318: test(orNaNTest2);
19318: 
16647: function andTestHelper(a, b, n)
16647: {
16647:   var k = 0;
16647:   for (var i = 0; i < n; i++) {
16647:     if (a && b)
16647:       k += i;
16647:   }
16647:   return k;
16647: }
16647: 
16647: if (!testName || testName == "truthies") {
16647:   (function () {
16647:     var opsies   = ["||", "&&"];
16647:     var falsies  = [null, undefined, false, NaN, 0, ""];
16647:     var truthies = [{}, true, 1, 42, 1/0, -1/0, "blah"];
16647:     var boolies  = [falsies, truthies];
16647: 
16647:     // The for each here should abort tracing, so that this test framework
16647:     // relies only on the interpreter while the orTestHelper and andTestHelper
16647:     //  functions get trace-JITed.
16647:     for each (var op in opsies) {
16647:         for (var i in boolies) {
16647:           for (var j in boolies[i]) {
16647:             var x = uneval(boolies[i][j]);
16647:             for (var k in boolies) {
16647:               for (var l in boolies[k]) {
16647:                 var y = uneval(boolies[k][l]);
16647:                 var prefix = (op == "||") ? "or" : "and";
16647:                 var f = new Function("return " + prefix + "TestHelper(" + x + "," + y + ",10)");
16647:                 f.name = prefix + "Test(" + x + "," + y + ")";
16647:                 f.expected = eval(x + op + y) ? 45 : 0;
16647:                 test(f);
16647:               }
16647:             }
16647:           }
16647:         }
16647:       }
16647:   })();
16647: }
16647: 
16647: function nonEmptyStack1Helper(o, farble) {
16647:   var a = [];
16647:   var j = 0;
16647:   for (var i in o)
16647:     a[j++] = i;
16647:   return a.join("");
16647: }
16647: 
16647: function nonEmptyStack1() {
16647:   return nonEmptyStack1Helper({a:1,b:2,c:3,d:4,e:5,f:6,g:7,h:8}, "hi");
16647: }
16647: 
16647: nonEmptyStack1.expected = "abcdefgh";
16647: test(nonEmptyStack1);
16647: 
16647: function nonEmptyStack2()
16647: {
16647:   var a = 0;
16647:   for (var c in {a:1, b:2, c:3}) {
16647:     for (var i = 0; i < 10; i++)
16647:       a += i;
16647:   }
16647:   return String(a);
16647: }
16647: nonEmptyStack2.expected = "135";
16647: test(nonEmptyStack2);
16647: 
16647: function arityMismatchMissingArg(arg)
16647: {
16647:   for (var a = 0, i = 1; i < 10000; i *= 2) {
16647:     a += i;
16647:   }
16647:   return a;
16647: }
16647: arityMismatchMissingArg.expected = 16383;
16647: test(arityMismatchMissingArg);
16647: 
16647: function arityMismatchExtraArg()
16647: {
16647:   return arityMismatchMissingArg(1, 2);
16647: }
16647: arityMismatchExtraArg.expected = 16383;
16647: test(arityMismatchExtraArg);
16647: 
16647: function MyConstructor(i)
16647: {
16647:   this.i = i;
16647: }
16647: MyConstructor.prototype.toString = function() {return this.i + ""};
16647: 
16647: function newTest()
16647: {
16647:   var a = [];
16647:   for (var i = 0; i < 10; i++)
16647:     a[i] = new MyConstructor(i);
16647:   return a.join("");
16647: }
16647: newTest.expected = "0123456789";
16647: test(newTest);
16647: 
19318: // The following functions use a delay line of length 2 to change the value
19318: // of the callee without exiting the traced loop. This is obviously tuned to
19318: // match the current HOTLOOP setting of 2.
19318: function shapelessArgCalleeLoop(f, g, h, a)
16647: {
19318:   for (var i = 0; i < 10; i++) {
16647:     f(i, a);
19318:     f = g;
19318:     g = h;
19318:   }
16647: }
16647: 
19318: function shapelessVarCalleeLoop(f0, g, h, a)
16647: {
19318:   var f = f0;
19318:   for (var i = 0; i < 10; i++) {
19318:     f(i, a);
19318:     f = g;
19318:     g = h;
19318:   }
16647: }
16647: 
19318: function shapelessLetCalleeLoop(f0, g, h, a)
16647: {
16647:   for (var i = 0; i < 10; i++) {
19318:     let f = f0;
19318:     f(i, a);
19318:     f = g;
19318:     g = h;
16647:   }
16647: }
16647: 
19318: function shapelessUnknownCalleeLoop(n, f, g, h, a)
16647: {
16647:   for (var i = 0; i < 10; i++) {
19318:     (n || f)(i, a);
19318:     f = g;
19318:     g = h;
16647:   }
16647: }
16647: 
16647: function shapelessCalleeTest()
16647: {
16647:   var a = [];
19318: 
19318:   var helper = function (i, a) a[i] = i;
19318:   shapelessArgCalleeLoop(helper, helper, function (i, a) a[i] = -i, a);
19318: 
19318:   helper = function (i, a) a[10 + i] = i;
19318:   shapelessVarCalleeLoop(helper, helper, function (i, a) a[10 + i] = -i, a);
19318: 
19318:   helper = function (i, a) a[20 + i] = i;
19318:   shapelessLetCalleeLoop(helper, helper, function (i, a) a[20 + i] = -i, a);
19318: 
19318:   helper = function (i, a) a[30 + i] = i;
19318:   shapelessUnknownCalleeLoop(null, helper, helper, function (i, a) a[30 + i] = -i, a);
19318: 
16647:   try {
19318:     helper = {hack: 42};
19318:     shapelessUnknownCalleeLoop(null, helper, helper, helper, a);
16647:   } catch (e) {
19318:     if (e + "" != "TypeError: f is not a function")
16647:       print("shapelessUnknownCalleeLoop: unexpected exception " + e);
16647:   }
16647:   return a.join("");
16647: }
19318: shapelessCalleeTest.expected = "01-2-3-4-5-6-7-8-901-2-3-4-5-6-7-8-9012345678901-2-3-4-5-6-7-8-9";
16647: test(shapelessCalleeTest);
16647: 
16647: function typeofTest()
16647: {
16647:   var values = ["hi", "hi", "hi", null, 5, 5.1, true, undefined, /foo/, typeofTest, [], {}], types = [];
16647:   for (var i = 0; i < values.length; i++)
16647:     types[i] = typeof values[i];
16647:   return types.toString();
16647: }
16647: typeofTest.expected = "string,string,string,object,number,number,boolean,undefined,object,function,object,object";
16647: test(typeofTest);
16647: 
19318: function joinTest()
19318: {
19318:   var s = "";
19318:   var a = [];
19318:   for (var i = 0; i < 8; i++)
19318:     a[i] = [String.fromCharCode(97 + i)];
19318:   for (i = 0; i < 8; i++) {
19318:     for (var j = 0; j < 8; j++)
19318:       a[i][1 + j] = j;
19318:   }
19318:   for (i = 0; i < 8; i++)
19318:     s += a[i].join(",");
19318:   return s;
19318: }
19318: joinTest.expected = "a,0,1,2,3,4,5,6,7b,0,1,2,3,4,5,6,7c,0,1,2,3,4,5,6,7d,0,1,2,3,4,5,6,7e,0,1,2,3,4,5,6,7f,0,1,2,3,4,5,6,7g,0,1,2,3,4,5,6,7h,0,1,2,3,4,5,6,7";
19318: test(joinTest);
19318: 
19318: function arity1(x)
19318: {
19318:   return (x == undefined) ? 1 : 0;
19318: }
19318: function missingArgTest() {
19318:   var q;
19318:   for (var i = 0; i < 10; i++) {
19318:     q = arity1();
19318:   }
19318:   return q;
19318: }
23671: missingArgTest.expected = 1;
19318: test(missingArgTest);
19318: 
19318: JSON = function () {
19318:   return {
19318:   stringify: function stringify(value, whitelist) {
19318:       switch (typeof(value)) {
19318:       case "object":
19318:       return value.constructor.name;
19318:       }
19318:     }
19318:   };
19318: }();
19318: 
19318: function missingArgTest2() {
19318:   var testPairs = [
19318:     ["{}", {}],
19318:     ["[]", []],
19318:     ['{"foo":"bar"}', {"foo":"bar"}],
19318:     ]
19318: 
19318:     var a = [];
19318:   for (var i=0; i < testPairs.length; i++) {
19318:     var s = JSON.stringify(testPairs[i][1])
19318:       a[i] = s;
19318:   }
19318:   return a.join(",");
19318: }
20249: missingArgTest2.expected = /(Object,Array,Object|{},\[\],{"foo":"bar"})/;
19318: test(missingArgTest2);
19318: 
19318: function deepForInLoop() {
19318:   // NB: the number of props set in C is arefully tuned to match HOTLOOP = 2.
19318:   function C(){this.p = 1, this.q = 2}
19318:   C.prototype = {p:1, q:2, r:3, s:4, t:5};
19318:   var o = new C;
19318:   var j = 0;
19318:   var a = [];
19318:   for (var i in o)
19318:     a[j++] = i;
19318:   return a.join("");
19318: }
19318: deepForInLoop.expected = "pqrst";
19318: test(deepForInLoop);
19318: 
19318: function nestedExit(x) {
19318:   var q = 0;
19318:   for (var i = 0; i < 10; ++i)
23671:   {
19318:     if (x)
19318: 	    ++q;
19318:   }
23671: }
19318: function nestedExitLoop() {
19318:   for (var j = 0; j < 10; ++j)
19318:     nestedExit(j < 7);
19318:   return "ok";
19318: }
19318: nestedExitLoop.expected = "ok";
19318: test(nestedExitLoop);
19318: 
19318: function bitsinbyte(b) {
19318:   var m = 1, c = 0;
19318:   while(m<0x100) {
19318:     if(b & m) c++;
19318:     m <<= 1;
19318:   }
19318:   return 1;
19318: }
19318: function TimeFunc(func) {
19318:   var x,y;
19318:   for(var y=0; y<256; y++) func(y);
19318: }
19318: function nestedExit2() {
19318:   TimeFunc(bitsinbyte);
19318:   return "ok";
19318: }
19318: nestedExit2.expected = "ok";
19318: test(nestedExit2);
19318: 
19318: function parsingNumbers() {
19318:   var s1 = "123";
19318:   var s1z = "123zzz";
19318:   var s2 = "123.456";
19318:   var s2z = "123.456zzz";
19318: 
19318:   var e1 = 123;
19318:   var e2 = 123.456;
19318: 
19318:   var r1, r1z, r2, r2z;
19318: 
19318:   for (var i = 0; i < 10; i++) {
19318:     r1 = parseInt(s1);
19318:     r1z = parseInt(s1z);
19318:     r2 = parseFloat(s2);
19318:     r2z = parseFloat(s2z);
19318:   }
19318: 
19318:   if (r1 == e1 && r1z == e1 && r2 == e2 && r2z == e2)
19318:     return "ok";
19318:   return "fail";
19318: }
19318: parsingNumbers.expected = "ok";
19318: test(parsingNumbers);
19318: 
19318: function matchInLoop() {
19318:   var k = "hi";
19318:   for (var i = 0; i < 10; i++) {
19318:     var result = k.match(/hi/) != null;
19318:   }
19318:   return result;
19318: }
19318: matchInLoop.expected = true;
19318: test(matchInLoop);
19318: 
23671: function testMatchAsCondition() {
23671:     var a = ['0', '0', '0', '0'];
23671:     var r = /0/;
23671:     "x".q;
23671:     for (var z = 0; z < 4; z++)
23671:         a[z].match(r) ? 1 : 2;
23671: }
23671: test(testMatchAsCondition);
23671: 
19318: function deep1(x) {
19318:   if (x > 90)
19318:     return 1;
19318:   return 2;
19318: }
19318: function deep2() {
19318:   for (var i = 0; i < 100; ++i)
19318:     deep1(i);
19318:   return "ok";
19318: }
19318: deep2.expected = "ok";
19318: test(deep2);
19318: 
23671: function heavyFn1(i) { 
23671:     if (i == 3) {
23671: 	var x = 3;
23671:         return [0, i].map(function (i) i + x);
23671:     }
23671:     return [];
23671: }
23671: function testHeavy() {
23671:     for (var i = 0; i <= 3; i++)
23671:         heavyFn1(i);
23671: }
23671: test(testHeavy);
23671: 
23671: function heavyFn2(i) {
23671:     if (i < 1000)
23671:         return heavyFn1(i);
23671:     return function () i;
23671: }
23671: function testHeavy2() {
23671:     for (var i = 0; i <= 3; i++)
23671:         heavyFn2(i);
23671: }
23671: test(testHeavy2);
23671: 
19318: var merge_type_maps_x = 0, merge_type_maps_y = 0;
19318: function merge_type_maps() {
19318:   for (merge_type_maps_x = 0; merge_type_maps_x < 50; ++merge_type_maps_x)
19318:     if ((merge_type_maps_x & 1) == 1)
19318: 	    ++merge_type_maps_y;
19318:   return [merge_type_maps_x,merge_type_maps_y].join(",");
19318: }
19318: merge_type_maps.expected = "50,25";
19318: test(merge_type_maps)
19318: 
19318: function inner_double_outer_int() {
19318:   function f(i) {
19318:     for (var m = 0; m < 20; ++m)
19318: 	    for (var n = 0; n < 100; n += i)
19318:         ;
19318:     return n;
19318:   }
19318:   return f(.5);
19318: }
23671: inner_double_outer_int.expected = 100;
19318: test(inner_double_outer_int);
19318: 
19318: function newArrayTest()
19318: {
19318:   var a = [];
19318:   for (var i = 0; i < 10; i++)
19318:     a[i] = new Array();
19318:   return a.map(function(x) x.length).toString();
19318: }
19318: newArrayTest.expected="0,0,0,0,0,0,0,0,0,0";
19318: test(newArrayTest);
19318: 
19318: function stringSplitTest()
19318: {
19318:   var s = "a,b"
19318:     var a = null;
19318:   for (var i = 0; i < 10; ++i)
19318:     a = s.split(",");
19318:   return a.join();
19318: }
19318: stringSplitTest.expected="a,b";
19318: test(stringSplitTest);
19318: 
19318: function stringSplitIntoArrayTest()
19318: {
19318:   var s = "a,b"
19318:     var a = [];
19318:   for (var i = 0; i < 10; ++i)
19318:     a[i] = s.split(",");
19318:   return a.join();
19318: }
19318: stringSplitIntoArrayTest.expected="a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b,a,b";
19318: test(stringSplitIntoArrayTest);
19318: 
19318: function forVarInWith() {
19318:   function foo() ({notk:42});
19318:   function bar() ({p:1, q:2, r:3, s:4, t:5});
19318:   var o = foo();
19318:   var a = [];
19318:   with (o) {
19318:     for (var k in bar())
19318:       a[a.length] = k;
19318:   }
19318:   return a.join("");
19318: }
19318: forVarInWith.expected = "pqrst";
19318: test(forVarInWith);
19318: 
19318: function inObjectTest() {
19318:   var o = {p: 1, q: 2, r: 3, s: 4, t: 5};
19318:   var r = 0;
19318:   for (var i in o) {
19318:     if (!(i in o))
19318:       break;
19318:     if ((i + i) in o)
19318:       break;
19318:     ++r;
19318:   }
19318:   return r;
19318: }
19318: inObjectTest.expected = 5;
19318: test(inObjectTest);
19318: 
19318: function inArrayTest() {
19318:   var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
19318:   for (var i = 0; i < a.length; i++) {
19318:     if (!(i in a))
19318:       break;
19318:   }
19318:   return i;
19318: }
19318: inArrayTest.expected = 10;
19318: test(inArrayTest);
19318: 
19318: function innerLoopIntOuterDouble() {
19318:   var n = 10000, i=0, j=0, count=0, limit=0;
19318:   for (i = 1; i <= n; ++i) {
19318:     limit = i * 1;
19318:     for (j = 0; j < limit; ++j) {
19318: 	    ++count;
19318:     }
19318:   }
19318:   return "" + count;
19318: }
19318: innerLoopIntOuterDouble.expected="50005000";
19318: test(innerLoopIntOuterDouble);
19318: 
19318: function outerline(){
19318:   var i=0;
19318:   var j=0;
19318: 
19318:   for (i = 3; i<= 100000; i+=2)
23671:   {
19318:     for (j = 3; j < 1000; j+=2)
23671:     {
19318: 	    if ((i & 1) == 1)
19318:         break;
23671:     }
23671:   }
19318:   return "ok";
19318: }
19318: outerline.expected="ok";
19318: test(outerline);
19318: 
19318: function addAccumulations(f) {
19318:   var a = f();
19318:   var b = f();
19318:   return a() + b();
19318: }
19318: 
19318: function loopingAccumulator() {
19318:   var x = 0;
19318:   return function () {
19318:     for (var i = 0; i < 10; ++i) {
19318:       ++x;
19318:     }
19318:     return x;
19318:   }
19318: }
19318: 
19318: function testLoopingAccumulator() {
19318: 	var x = addAccumulations(loopingAccumulator);
19318: 	return x;
19318: }
19318: testLoopingAccumulator.expected = 20;
19318: test(testLoopingAccumulator);
19318: 
19318: function testBranchingLoop() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       x += 10;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingLoop.expected = 110;
19318: test(testBranchingLoop);
19318: 
19318: function testBranchingUnstableLoop() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       x += 10.1;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingUnstableLoop.expected = 110.1;
19318: test(testBranchingUnstableLoop);
19318: 
19318: function testBranchingUnstableLoopCounter() {
19318:   var x = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51) {
19318:       i += 1.1;
19318:     }
19318:     x++;
19318:   }
19318:   return x;
19318: }
19318: testBranchingUnstableLoopCounter.expected = 99;
19318: test(testBranchingUnstableLoopCounter);
19318: 
19318: 
19318: function testBranchingUnstableObject() {
19318:   var x = {s: "a"};
19318:   var t = "";
19318:   for (var i=0; i < 100; ++i) {
19318:     if (i == 51)
19318:     {
19318:       x.s = 5;
19318:     }
19318:     t += x.s;
19318:   }
19318:   return t.length;
19318: }
19318: testBranchingUnstableObject.expected = 100;
19318: test(testBranchingUnstableObject);
19318: 
19318: function testArrayDensityChange() {
19318:   var x = [];
19318:   var count = 0;
19318:   for (var i=0; i < 100; ++i) {
19318:     x[i] = "asdf";
19318:   }
19318:   for (var i=0; i < x.length; ++i) {
19318:     if (i == 51)
19318:     {
19318:       x[199] = "asdf";
19318:     }
19318:     if (x[i])
19318:       count += x[i].length;
19318:   }
19318:   return count;
19318: }
19318: testArrayDensityChange.expected = 404;
19318: test(testArrayDensityChange);
19318: 
19318: function testDoubleToStr() {
19318:   var x = 0.0;
19318:   var y = 5.5;
19318:   for (var i = 0; i < 200; i++) {
19318:     x += parseFloat(y.toString());
19318:   }
19318:   return x;
19318: }
19318: testDoubleToStr.expected = 5.5*200;
19318: test(testDoubleToStr);
19318: 
20594: function testNumberToString() {
20594:   var x = new Number(0);
20594:   for (var i = 0; i < 4; i++)
20594:     x.toString();
20594: }
20594: test(testNumberToString);
20594: 
19318: function testDecayingInnerLoop() {
19318:   var i, j, k = 10;
19318:   for (i = 0; i < 5000; ++i) {
19318:     for (j = 0; j < k; ++j);
19318:     --k;
19318:   }
19318:   return i;
19318: }
19318: testDecayingInnerLoop.expected = 5000;
19318: test(testDecayingInnerLoop);
19318: 
19318: function testContinue() {
19318:   var i;
19318:   var total = 0;
19318:   for (i = 0; i < 20; ++i) {
19318:     if (i == 11)
19318: 	    continue;
19318:     total++;
19318:   }
19318:   return total;
19318: }
19318: testContinue.expected = 19;
19318: test(testContinue);
19318: 
19318: function testContinueWithLabel() {
19318:   var i = 0;
19318:   var j = 20;
19318: checkiandj :
19318:   while (i<10) {
19318:     i+=1;
19318: 	checkj :
19318:     while (j>10) {
19318: 	    j-=1;
19318: 	    if ((j%2)==0)
19318:         continue checkj;
19318:     }
19318:   }
19318:   return i + j;
19318: }
19318: testContinueWithLabel.expected = 20;
19318: test(testContinueWithLabel);
19318: 
19318: function testDivision() {
19318:   var a = 32768;
19318:   var b;
19318:   while (b !== 1) {
19318:     b = a / 2;
19318:     a = b;
19318:   }
19318:   return a;
19318: }
19318: testDivision.expected = 1;
19318: test(testDivision);
19318: 
19318: function testDivisionFloat() {
19318:   var a = 32768.0;
19318:   var b;
19318:   while (b !== 1) {
19318:     b = a / 2.0;
19318:     a = b;
19318:   }
19318:   return a === 1.0;
19318: }
19318: testDivisionFloat.expected = true;
19318: test(testDivisionFloat);
19318: 
19318: function testToUpperToLower() {
19318:   var s = "Hello", s1, s2;
19318:   for (i = 0; i < 100; ++i) {
19318:     s1 = s.toLowerCase();
19318:     s2 = s.toUpperCase();
19318:   }
19318:   return s1 + s2;
19318: }
19318: testToUpperToLower.expected = "helloHELLO";
19318: test(testToUpperToLower);
19318: 
19318: function testReplace2() {
19318:   var s = "H e l l o", s1;
23671:   for (i = 0; i < 100; ++i)
19318:     s1 = s.replace(" ", "");
19318:   return s1;
19318: }
19318: testReplace2.expected = "He l l o";
19318: test(testReplace2);
19318: 
19318: function testBitwise() {
19318:   var x = 10000;
19318:   var y = 123456;
19318:   var z = 987234;
19318:   for (var i = 0; i < 50; i++) {
19318:     x = x ^ y;
19318:     y = y | z;
19318:     z = ~x;
19318:   }
19318:   return x + y + z;
19318: }
19318: testBitwise.expected = -1298;
19318: test(testBitwise);
19318: 
19318: function testSwitch() {
19318:   var x = 0;
19318:   var ret = 0;
19318:   for (var i = 0; i < 100; ++i) {
19318:     switch (x) {
19318:     case 0:
19318:       ret += 1;
19318:       break;
19318:     case 1:
19318:       ret += 2;
19318:       break;
19318:     case 2:
19318:       ret += 3;
19318:       break;
19318:     case 3:
19318:       ret += 4;
19318:       break;
19318:     default:
19318:       x = 0;
19318:     }
19318:     x++;
19318:   }
19318:   return ret;
19318: }
19318: testSwitch.expected = 226;
19318: test(testSwitch);
19318: 
19318: function testSwitchString() {
19318:   var x = "asdf";
19318:   var ret = 0;
19318:   for (var i = 0; i < 100; ++i) {
19318:     switch (x) {
19318:     case "asdf":
19318:       x = "asd";
19318:       ret += 1;
19318:       break;
19318:     case "asd":
19318:       x = "as";
19318:       ret += 2;
19318:       break;
19318:     case "as":
19318:       x = "a";
19318:       ret += 3;
19318:       break;
19318:     case "a":
19318:       x = "foo";
19318:       ret += 4;
19318:       break;
19318:     default:
19318:       x = "asdf";
19318:     }
19318:   }
19318:   return ret;
19318: }
19318: testSwitchString.expected = 200;
19318: test(testSwitchString);
19318: 
19318: function testNegZero1Helper(z) {
19318:   for (let j = 0; j < 5; ++j) { z = -z; }
19318:   return Math.atan2(0, -0) == Math.atan2(0, z);
19318: }
19318: 
19318: var testNegZero1 = function() { return testNegZero1Helper(0); }
19318:   testNegZero1.expected = true;
19318: testNegZero1.name = 'testNegZero1';
19318: testNegZero1Helper(1);
19318: test(testNegZero1);
19318: 
19318: // No test case, just make sure this doesn't assert.
19318: function testNegZero2() {
19318:   var z = 0;
19318:   for (let j = 0; j < 5; ++j) { ({p: (-z)}); }
19318: }
19318: testNegZero2();
19318: 
19318: function testConstSwitch() {
19318:   var x;
19318:   for (var j=0;j<5;++j) { switch(1.1) { case NaN: case 2: } x = 2; }
19318:   return x;
19318: }
19318: testConstSwitch.expected = 2;
19318: test(testConstSwitch);
19318: 
20329: function testConstSwitch2() {
20329:   var x;
20329:   for (var j = 0; j < 4; ++j) { switch(0/0) { } }
20329:   return "ok";
20329: }
20329: testConstSwitch2.expected = "ok";
20329: test(testConstSwitch2);
20329: 
19318: function testConstIf() {
19318:   var x;
19318:   for (var j=0;j<5;++j) { if (1.1 || 5) { } x = 2;}
19318:   return x;
19318: }
19318: testConstIf.expected = 2;
19318: test(testConstIf);
19318: 
19318: function testTypeofHole() {
19318:   var a = new Array(6);
19318:   a[5] = 3;
19318:   for (var i = 0; i < 6; ++i)
19318:     a[i] = typeof a[i];
19318:   return a.join(",");
19318: }
19318: testTypeofHole.expected = "undefined,undefined,undefined,undefined,undefined,number"
19318:   test(testTypeofHole);
19318: 
19318: function testNativeLog() {
19318:   var a = new Array(5);
19318:   for (var i = 0; i < 5; i++) {
19318:     a[i] = Math.log(Math.pow(Math.E, 10));
19318:   }
19318:   return a.join(",");
19318: }
19318: testNativeLog.expected = "10,10,10,10,10";
19318: test(testNativeLog);
19318: 
19318: function test_JSOP_ARGSUB() {
19318:   function f0() { return arguments[0]; }
19318:   function f1() { return arguments[1]; }
19318:   function f2() { return arguments[2]; }
19318:   function f3() { return arguments[3]; }
19318:   function f4() { return arguments[4]; }
19318:   function f5() { return arguments[5]; }
19318:   function f6() { return arguments[6]; }
19318:   function f7() { return arguments[7]; }
19318:   function f8() { return arguments[8]; }
19318:   function f9() { return arguments[9]; }
19318:   var a = [];
19318:   for (var i = 0; i < 10; i++) {
19318:     a[0] = f0('a');
19318:     a[1] = f1('a','b');
19318:     a[2] = f2('a','b','c');
19318:     a[3] = f3('a','b','c','d');
19318:     a[4] = f4('a','b','c','d','e');
19318:     a[5] = f5('a','b','c','d','e','f');
19318:     a[6] = f6('a','b','c','d','e','f','g');
19318:     a[7] = f7('a','b','c','d','e','f','g','h');
19318:     a[8] = f8('a','b','c','d','e','f','g','h','i');
19318:     a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19318:   }
19318:   return a.join("");
19318: }
19318: test_JSOP_ARGSUB.expected = "abcdefghij";
19318: test(test_JSOP_ARGSUB);
19318: 
19318: function test_JSOP_ARGCNT() {
19318:   function f0() { return arguments.length; }
19318:   function f1() { return arguments.length; }
19318:   function f2() { return arguments.length; }
19318:   function f3() { return arguments.length; }
19318:   function f4() { return arguments.length; }
19318:   function f5() { return arguments.length; }
19318:   function f6() { return arguments.length; }
19318:   function f7() { return arguments.length; }
19318:   function f8() { return arguments.length; }
19318:   function f9() { return arguments.length; }
19318:   var a = [];
19318:   for (var i = 0; i < 10; i++) {
19318:     a[0] = f0('a');
19318:     a[1] = f1('a','b');
19318:     a[2] = f2('a','b','c');
19318:     a[3] = f3('a','b','c','d');
19318:     a[4] = f4('a','b','c','d','e');
19318:     a[5] = f5('a','b','c','d','e','f');
19318:     a[6] = f6('a','b','c','d','e','f','g');
19318:     a[7] = f7('a','b','c','d','e','f','g','h');
19318:     a[8] = f8('a','b','c','d','e','f','g','h','i');
19318:     a[9] = f9('a','b','c','d','e','f','g','h','i','j');
19318:   }
19318:   return a.join(",");
19318: }
19318: test_JSOP_ARGCNT.expected = "1,2,3,4,5,6,7,8,9,10";
19318: test(test_JSOP_ARGCNT);
19318: 
19318: function testNativeMax() {
19318:   var out = [], k;
19318:   for (var i = 0; i < 5; ++i) {
19318:     k = Math.max(k, i);
19318:   }
19318:   out.push(k);
19318: 
19318:   k = 0;
19318:   for (var i = 0; i < 5; ++i) {
19318:     k = Math.max(k, i);
19318:   }
19318:   out.push(k);
19318: 
19318:   for (var i = 0; i < 5; ++i) {
19318:     k = Math.max(0, -0);
19318:   }
19318:   out.push((1 / k) < 0);
19318:   return out.join(",");
19318: }
19318: testNativeMax.expected = "NaN,4,false";
19318: test(testNativeMax);
19318: 
20329: function testFloatArrayIndex() {
20329:   var a = [];
20329:   for (var i = 0; i < 10; ++i) {
20329:     a[3] = 5;
20329:     a[3.5] = 7;
20329:   }
20329:   return a[3] + "," + a[3.5];
20329: }
20329: testFloatArrayIndex.expected = "5,7";
20329: test(testFloatArrayIndex);
20329: 
20329: function testStrict() {
20329:   var n = 10, a = [];
20329:   for (var i = 0; i < 10; ++i) {
20329:     a[0] = (n === 10);
20329:     a[1] = (n !== 10);
20329:     a[2] = (n === null);
20329:     a[3] = (n == null);
20329:   }
20329:   return a.join(",");
20329: }
20329: testStrict.expected = "true,false,false,false";
20329: test(testStrict);
20329: 
20329: function testSetPropNeitherMissNorHit() {
20329:   for (var j = 0; j < 5; ++j) { if (({}).__proto__ = 1) { } }
20329:   return "ok";
20329: }
20329: testSetPropNeitherMissNorHit.expected = "ok";
20329: test(testSetPropNeitherMissNorHit);
20329: 
20329: function testPrimitiveConstructorPrototype() {
20329:   var f = function(){};
20329:   f.prototype = false;
20329:   for (let j=0;j<5;++j) { new f; }
20329:   return "ok";
20329: }
20329: testPrimitiveConstructorPrototype.expected = "ok";
20329: test(testPrimitiveConstructorPrototype);
20329: 
20329: function testSideExitInConstructor() {
20329:   var FCKConfig = {};
20329:   FCKConfig.CoreStyles =
20329:     {
20329: 	    'Bold': { },
20329: 	    'Italic': { },
20329: 	    'FontFace': { },
20329: 	    'Size' :
20329: 	    {
20329:       Overrides: [ ]
20329: 	    },
20329: 
20329: 	    'Color' :
20329: 	    {
20329:       Element: '',
20329:       Styles: {  },
20329:       Overrides: [  ]
20329: 	    },
20329: 	    'BackColor': {
20329:       Element : '',
20329:       Styles : { 'background-color' : '' }
20329: 	    },
20329: 
20329:     };
20329:   var FCKStyle = function(A) {
20329:     A.Element;
20329:   };
20329: 
20329:   var pass = true;
20329:   for (var s in FCKConfig.CoreStyles) {
20329:     var x = new FCKStyle(FCKConfig.CoreStyles[s]);
23671:     if (!x)
23671:       pass = false;
20329:   }
20329:   return pass;
20329: }
20329: testSideExitInConstructor.expected = true;
20329: test(testSideExitInConstructor);
20329: 
20329: function testNot() {
20329:   var a = new Object(), b = null, c = "foo", d = "", e = 5, f = 0, g = 5.5, h = -0, i = true, j = false, k = undefined;
20329:   var r;
23671:   for (var i = 0; i < 10; ++i)
20329:     r = [!a, !b, !c, !d, !e, !f, !g, !h, !i, !j, !k];
20329:   return r.join(",");
20329: }
20329: testNot.expected = "false,true,false,true,false,true,false,true,false,true,true";
20329: test(testNot);
20329: 
20329: function doTestDifferingArgc(a, b)
20329: {
20329:   var k = 0;
20329:   for (var i = 0; i < 10; i++)
20329:   {
20329:     k += i;
20329:   }
20329:   return k;
20329: }
20329: function testDifferingArgc()
20329: {
20329:   var x = 0;
20329:   x += doTestDifferingArgc(1, 2);
20329:   x += doTestDifferingArgc(1);
20329:   x += doTestDifferingArgc(1, 2, 3);
20329:   return x;
20329: }
20329: testDifferingArgc.expected = 45*3;
20329: test(testDifferingArgc);
20329: 
20329: function doTestMoreArgcThanNargs()
20329: {
20329:   var x = 0;
20329:   for (var i = 0; i < 10; i++)
20329:   {
20329:     x = x + arguments[3];
20329:   }
20329:   return x;
20329: }
20329: function testMoreArgcThanNargs()
20329: {
20329:   return doTestMoreArgcThanNargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
20329: }
20329: testMoreArgcThanNargs.expected = 4*10;
20329: test(testMoreArgcThanNargs);
20329: 
20329: // Test stack reconstruction after a nested exit
20329: function testNestedExitStackInner(j, counter) {
20329:   ++counter;
20329:   var b = 0;
20329:   for (var i = 1; i <= RUNLOOP; i++) {
20329:     ++b;
20329:     var a;
20329:     // Make sure that once everything has been traced we suddenly switch to
20329:     // a different control flow the first time we run the outermost tree,
20329:     // triggering a side exit.
20329:     if (j < RUNLOOP)
20329:       a = 1;
20329:     else
20329:       a = 0;
20329:     ++b;
20329:     b += a;
20329:   }
20329:   return counter + b;
20329: }
20329: function testNestedExitStackOuter() {
20329:   var counter = 0;
20329:   for (var j = 1; j <= RUNLOOP; ++j) {
20329:     for (var k = 1; k <= RUNLOOP; ++k) {
20329:       counter = testNestedExitStackInner(j, counter);
20329:     }
20329:   }
20329:   return counter;
20329: }
20329: testNestedExitStackOuter.expected = 81;
20329: testNestedExitStackOuter.jitstats = {
22023: recorderStarted: 5,
22023: recorderAborted: 2,
22023: traceTriggered: 9
20329: };
20329: test(testNestedExitStackOuter);
20329: 
20329: function testHOTLOOPSize() {
20329:   return HOTLOOP > 1;
20329: }
20329: testHOTLOOPSize.expected = true;
20329: test(testHOTLOOPSize);
20329: 
20329: function testMatchStringObject() {
20329:   var a = new String("foo");
20329:   var b;
23671:   for (i = 0; i < 300; i++)
20329:     b = a.match(/bar/);
20329:   return b;
20329: }
20329: testMatchStringObject.expected = null;
20329: test(testMatchStringObject);
20329: 
20329: function innerSwitch(k)
20329: {
20329:   var m = 0;
20329: 
20329:   switch (k)
20329:   {
20329:   case 0:
20329:     m = 1;
20329:     break;
20329:   }
20329: 
20329:   return m;
20329: }
20329: function testInnerSwitchBreak()
20329: {
20329:   var r = new Array(5);
20329:   for (var i = 0; i < 5; i++)
20329:   {
20329:     r[i] = innerSwitch(0);
20329:   }
20329: 
20329:   return r.join(",");
20329: }
20329: testInnerSwitchBreak.expected = "1,1,1,1,1";
20329: test(testInnerSwitchBreak);
20329: 
20329: function testArrayNaNIndex()
20329: {
20329:   for (var j = 0; j < 4; ++j) { [this[NaN]]; }
20329:   for (var j = 0; j < 5; ++j) { if([1][-0]) { } }
20329:   return "ok";
20329: }
20329: testArrayNaNIndex.expected = "ok";
20329: test(testArrayNaNIndex);
20329: 
20329: function innerTestInnerMissingArgs(a,b,c,d)
20329: {
20329:   if (a) {
20329:   } else {
20329:   }
20329: }
20329: function doTestInnerMissingArgs(k)
20329: {
20329:   for (i = 0; i < 10; i++) {
20329:     innerTestInnerMissingArgs(k);
20329:   }
20329: }
20329: function testInnerMissingArgs()
20329: {
20329:   doTestInnerMissingArgs(1);
20329:   doTestInnerMissingArgs(0);
20329:   return 1;
20329: }
20329: testInnerMissingArgs.expected = 1;  //Expected: that we don't crash.
20329: test(testInnerMissingArgs);
20329: 
20329: function regexpLastIndex()
20329: {
20329:   var n = 0;
20329:   var re = /hi/g;
20329:   var ss = " hi hi hi hi hi hi hi hi hi hi";
20329:   for (var i = 0; i < 10; i++) {
20329:     // re.exec(ss);
20329:     n += (re.lastIndex > 0) ? 3 : 0;
20329:     re.lastIndex = 0;
20329:   }
20329:   return n;
20329: }
20329: regexpLastIndex.expected = 0; // 30;
20329: test(regexpLastIndex);
20329: 
20329: function testHOTLOOPCorrectness() {
20329:   var b = 0;
23671:   for (var i = 0; i < HOTLOOP; ++i)
20329:     ++b;
20329:   return b;
20329: }
20329: testHOTLOOPCorrectness.expected = HOTLOOP;
20329: testHOTLOOPCorrectness.jitstats = {
20329: recorderStarted: 1,
20329: recorderAborted: 0,
20329: traceTriggered: 0
20329: };
20329: // Change the global shape right before doing the test
20329: this.testHOTLOOPCorrectnessVar = 1;
20329: test(testHOTLOOPCorrectness);
20329: 
20329: function testRUNLOOPCorrectness() {
20329:   var b = 0;
20329:   for (var i = 0; i < RUNLOOP; ++i) {
20329:     ++b;
20329:   }
20329:   return b;
20329: }
20329: testRUNLOOPCorrectness.expected = RUNLOOP;
20329: testRUNLOOPCorrectness.jitstats = {
20329: recorderStarted: 1,
20329: recorderAborted: 0,
20329: traceTriggered: 1
20329: };
20329: // Change the global shape right before doing the test
20329: this.testRUNLOOPCorrectnessVar = 1;
20329: test(testRUNLOOPCorrectness);
20329: 
20329: function testDateNow() {
20329:   // Accessing global.Date for the first time will change the global shape,
20329:   // so do it before the loop starts; otherwise we have to loop an extra time
20329:   // to pick things up.
20329:   var time = Date.now();
23671:   for (var j = 0; j < RUNLOOP; ++j)
20329:     time = Date.now();
20329:   return "ok";
20329: }
20329: testDateNow.expected = "ok";
20329: testDateNow.jitstats = {
20329: recorderStarted: 1,
20329: recorderAborted: 0,
20329: traceTriggered: 1
20329: };
20329: test(testDateNow);
20329: 
20329: function testINITELEM()
20329: {
20329:   var x;
20329:   for (var i = 0; i < 10; ++i)
20329:     x = { 0: 5, 1: 5 };
20329:   return x[0] + x[1];
20329: }
20329: testINITELEM.expected = 10;
20329: test(testINITELEM);
20329: 
20329: function testUndefinedBooleanCmp()
20329: {
20329:   var t = true, f = false, x = [];
20329:   for (var i = 0; i < 10; ++i) {
20329:     x[0] = t == undefined;
20329:     x[1] = t != undefined;
20329:     x[2] = t === undefined;
20329:     x[3] = t !== undefined;
20329:     x[4] = t < undefined;
20329:     x[5] = t > undefined;
20329:     x[6] = t <= undefined;
20329:     x[7] = t >= undefined;
20329:     x[8] = f == undefined;
20329:     x[9] = f != undefined;
20329:     x[10] = f === undefined;
20329:     x[11] = f !== undefined;
20329:     x[12] = f < undefined;
20329:     x[13] = f > undefined;
20329:     x[14] = f <= undefined;
20329:     x[15] = f >= undefined;
20329:   }
20329:   return x.join(",");
20329: }
20329: testUndefinedBooleanCmp.expected = "false,true,false,true,false,false,false,false,false,true,false,true,false,false,false,false";
20329: test(testUndefinedBooleanCmp);
20329: 
20329: function testConstantBooleanExpr()
20329: {
20329:   for (var j = 0; j < 3; ++j) { if(true <= true) { } }
20329:   return "ok";
20329: }
20329: testConstantBooleanExpr.expected = "ok";
20329: test(testConstantBooleanExpr);
20329: 
20329: function testNegativeGETELEMIndex()
20329: {
20329:   for (let i=0;i<3;++i) /x/[-4];
20329:   return "ok";
20329: }
20329: testNegativeGETELEMIndex.expected = "ok";
20329: test(testNegativeGETELEMIndex);
20329: 
20329: function doTestInvalidCharCodeAt(input)
20329: {
20329:   var q = "";
20329:   for (var i = 0; i < 10; i++)
20329:     q += input.charCodeAt(i);
20329:   return q;
20329: }
20329: function testInvalidCharCodeAt()
20329: {
20329:   return doTestInvalidCharCodeAt("");
20329: }
20329: testInvalidCharCodeAt.expected = "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN";
20329: test(testInvalidCharCodeAt);
20329: 
20594: function FPQuadCmp()
20594: {
20594:   for (let j = 0; j < 3; ++j) { true == 0; }
20594:   return "ok";
20594: }
20594: FPQuadCmp.expected = "ok";
20594: test(FPQuadCmp);
20594: 
20594: function testDestructuring() {
20594:   var t = 0;
20594:   for (var i = 0; i < HOTLOOP + 1; ++i) {
20594:     var [r, g, b] = [1, 1, 1];
20594:     t += r + g + b;
20594:   }
20594:   return t
20594:     }
20594: testDestructuring.expected = (HOTLOOP + 1) * 3;
20594: test(testDestructuring);
20594: 
22023: function loopWithUndefined1(t, val) {
22023:   var a = new Array(6);
22023:   for (var i = 0; i < 6; i++)
22023:     a[i] = (t > val);
22023:   return a;
20594: }
22023: loopWithUndefined1(5.0, 2);     //compile version with val=int
22023: 
22023: function testLoopWithUndefined1() {
22023:   return loopWithUndefined1(5.0).join(",");  //val=undefined
22023: };
22023: testLoopWithUndefined1.expected = "false,false,false,false,false,false";
22023: test(testLoopWithUndefined1);
22023: 
22023: function loopWithUndefined2(t, dostuff, val) {
22023:   var a = new Array(6);
22023:   for (var i = 0; i < 6; i++) {
22023:     if (dostuff) {
22023:       val = 1; 
22023:       a[i] = (t > val);
22023:     } else {
22023:       a[i] = (val == undefined);
22023:     }
22023:   }
22023:   return a;
22023: }
22023: function testLoopWithUndefined2() {
22023:   var a = loopWithUndefined2(5.0, true, 2);
22023:   var b = loopWithUndefined2(5.0, true);
22023:   var c = loopWithUndefined2(5.0, false, 8);
22023:   var d = loopWithUndefined2(5.0, false);
22023:   return [a[0], b[0], c[0], d[0]].join(",");
22023: }
22023: testLoopWithUndefined2.expected = "true,true,false,true";
22023: test(testLoopWithUndefined2);
22023: 
22023: //test no multitrees assert
22023: function testBug462388() {
22023:   var c = 0, v; for each (let x in ["",v,v,v]) { for (c=0;c<4;++c) { } }
22023:   return true;
22023: }
22023: testBug462388.expected = true;
22023: test(testBug462388);
22023: 
22023: //test no multitrees assert
22023: function testBug462407() {
22023:   for each (let i in [0, {}, 0, 1.5, {}, 0, 1.5, 0, 0]) { }
22023:   return true;
22023: }
22023: testBug462407.expected = true;
22023: test(testBug462407);
22023: 
22023: //test no multitrees assert
22023: function testBug463490() {
22023:   function f(a, b, d) {
22023:     for (var i = 0; i < 10; i++) {
22023:       if (d)
22023:         b /= 2;
22023:     }
22023:     return a + b;
22023:   }
22023:   //integer stable loop
22023:   f(2, 2, false);
22023:   //double stable loop
22023:   f(3, 4.5, false);
22023:   //integer unstable branch
22023:   f(2, 2, true);
22023:   return true;
22023: };
22023: testBug463490.expected = true;
22023: test(testBug463490);
22023: 
22023: // Test no assert (bug 464089)
22023: function shortRecursiveLoop(b, c) {
22023:   for (var i = 0; i < c; i++) {
22023:     if (b)
22023:       shortRecursiveLoop(c - 1);
22023:   }
22023: }
22023: function testClosingRecursion() {
22023:   shortRecursiveLoop(false, 1);
22023:   shortRecursiveLoop(true, 3);
22023:   return true;
22023: }
22023: testClosingRecursion.expected = true;
22023: test(testClosingRecursion);
22023: 
22023: // Test no assert or crash from outer recorders (bug 465145)
22023: function testBug465145() {
22023: 	this.__defineSetter__("x", function(){});
22023: 	this.watch("x", function(){});
22023: 	y = this;
22023: 	for (var z = 0; z < 2; ++z) { x = y };
22023: 	this.__defineSetter__("x", function(){});
22023: 	for (var z = 0; z < 2; ++z) { x = y };
22023: }
22023: 
22023: function testTrueShiftTrue() {
22023:   var a = new Array(5);
22023:   for (var i=0;i<5;++i) a[i] = "" + (true << true);
22023:   return a.join(",");
22023: }
22023: testTrueShiftTrue.expected = "2,2,2,2,2";
22023: test(testTrueShiftTrue);
22023: 
22023: // Test no assert or crash
22023: function testBug465261() {
22023:   for (let z = 0; z < 2; ++z) { for each (let x in [0, true, (void 0), 0, (void
22023:                                                                            0)]) { if(x){} } };
22023:   return true;
22023: }
22023: testBug465261.expected = true;
22023: test(testBug465261);
22023: 
22023: function testBug465272() {
22023:   var a = new Array(5);
22023:   for (j=0;j<5;++j) a[j] = "" + ((5) - 2);
22023:   return a.join(",");
22023: }
22023: testBug465272.expected = "3,3,3,3,3"
22023:   test(testBug465272);
22023: 
22023: function testBug465483() {
22023: 	var a = new Array(4);
22023: 	var c = 0;
22023: 	for each (i in [4, 'a', 'b', (void 0)]) a[c++] = '' + (i + i);
22023: 	return a.join(',');
22023: }
22023: testBug465483.expected = '8,aa,bb,NaN';
22023: test(testBug465483);
22023: 
22023: function testNullCallee() {
22023:   try {
22023:     function f() {
22023:       var x = new Array(5);
22023:       for (var i = 0; i < 5; i++)
22023:         x[i] = a[i].toString();
22023:       return x.join(',');
22023:     }
22023:     f([[1],[2],[3],[4],[5]]);
22023:     f([null, null, null, null, null]);
22023:   } catch (e) {
22023:     return true;
22023:   }
22023:   return false;
22023: }
22023: testNullCallee.expected = true;
22023: test(testNullCallee);
20594: 
23671: //test no multitrees assert
23671: function testBug466128() {
23671:     for (let a = 0; a < 3; ++a) {
23671:       for each (let b in [1, 2, "three", 4, 5, 6, 7, 8]) {
23671:       }
23671:     }
23671:     return true;
23671: }
23671: testBug466128.expected = true;
23671: test(testBug466128);
23671: 
23671: //test no assert
23671: function testBug465688() {
23671:     for each (let d in [-0x80000000, -0x80000000]) - -d;
23671:     return true;
23671: }
23671: testBug465688.expected = true;
23671: test(testBug465688);
23671: 
23671: //test no assert
23671: function testBug466262() {
23671:     var e = 1;
23671:     for (var d = 0; d < 3; ++d) {
23671:       if (d == 2) {
23671:         e = "";
23671:       }
23671:     }
23671:     return true;
23671: }
23671: testBug466262.expected = true;
23671: test(testBug466262);
23671: 
20594: function testNewDate()
20594: {
20594:   // Accessing global.Date for the first time will change the global shape,
20594:   // so do it before the loop starts; otherwise we have to loop an extra time
20594:   // to pick things up.
20594:   var start = new Date();
20594:   var time = new Date();
23671:   for (var j = 0; j < RUNLOOP; ++j)
20594:     time = new Date();
20594:   return time > 0 && time >= start;
20594: }
20594: testNewDate.expected = true;
20594: testNewDate.jitstats = {
20594: recorderStarted: 1,
20594: recorderAborted: 0,
20594: traceTriggered: 1
20594: };
20594: test(testNewDate);
20594: 
20594: function testArrayPushPop() {
20594:   var a = [], sum1 = 0, sum2 = 0;
20594:   for (var i = 0; i < 10; ++i)
20594:     sum1 += a.push(i);
20594:   for (var i = 0; i < 10; ++i)
20594:     sum2 += a.pop();
20594:   a.push(sum1);
20594:   a.push(sum2);
20594:   return a.join(",");
20594: }
20594: testArrayPushPop.expected = "55,45";
20594: test(testArrayPushPop);
20594: 
25311: function testSlowArrayPop() {
25311:     var a = [];
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         a[i] = [0];
25311:     a[RUNLOOP-1].__defineGetter__("0", function () { return 'xyzzy'; });
25311: 
25311:     var last;
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         last = a[i].pop();  // reenters interpreter in getter
25311:     return last;
25311: }
25311: testSlowArrayPop.expected = 'xyzzy';
25311: test(testSlowArrayPop);
25311: 
25311: // Same thing but it needs to reconstruct multiple stack frames (so,
25311: // multiple functions called inside the loop)
25311: function testSlowArrayPopMultiFrame() {    
25311:     var a = [];
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         a[i] = [0];
25311:     a[RUNLOOP-1].__defineGetter__("0", function () { return 23; });
25311: 
25311:     function child(a, i) {
25311:         return a[i].pop();  // reenters interpreter in getter
25311:     }
25311:     function parent(a, i) {
25311:         return child(a, i);
25311:     }
25311:     function gramps(a, i) { 
25311:         return parent(a, i);
25311:     }
25311: 
25311:     var last;
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         last = gramps(a, i);
25311:     return last;
25311: }
25311: testSlowArrayPopMultiFrame.expected = 23;
25311: test(testSlowArrayPopMultiFrame);
25311: 
25311: // Same thing but nested trees, each reconstructing one or more stack frames 
25311: // (so, several functions with loops, such that the loops end up being
25311: // nested though they are not lexically nested)
25311: 
25311: function testSlowArrayPopNestedTrees() {    
25311:     var a = [];
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         a[i] = [0];
25311:     a[RUNLOOP-1].__defineGetter__("0", function () { return 3.14159 });
25311: 
25311:     function child(a, i, j, k) {
25311:         var last = 2.71828;
25311:         for (var l = 0; l < RUNLOOP; l++)
25311:             if (i == RUNLOOP-1 && j == RUNLOOP-1 && k == RUNLOOP-1)
25311:                 last = a[l].pop();  // reenters interpreter in getter
25311:         return last;
25311:     }
25311:     function parent(a, i, j) {
25311:         var last;
25311:         for (var k = 0; k < RUNLOOP; k++)
25311:             last = child(a, i, j, k);
25311:         return last;
25311:     }
25311:     function gramps(a, i) { 
25311:         var last;
25311:         for (var j = 0; j < RUNLOOP; j++)
25311:             last = parent(a, i, j);
25311:         return last;
25311:     }
25311: 
25311:     var last;
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         last = gramps(a, i);
25311:     return last;
25311: }
25311: testSlowArrayPopNestedTrees.expected = 3.14159;
25311: test(testSlowArrayPopNestedTrees);
25311: 
20594: function testResumeOp() {
20594:   var a = [1,"2",3,"4",5,"6",7,"8",9,"10",11,"12",13,"14",15,"16"];
20594:   var x = "";
20594:   while (a.length > 0)
20594:     x += a.pop();
20594:   return x;
20594: }
20594: testResumeOp.expected = "16151413121110987654321";
20594: test(testResumeOp);
20594: 
20594: function testUndefinedCmp() {
20594:   var a = false;
20594:   for (var j = 0; j < 4; ++j) { if (undefined < false) { a = true; } }
20594:   return a;
20594: }
20594: testUndefinedCmp.expected = false;
20594: test(testUndefinedCmp);
20594: 
20594: function reallyDeepNestedExit(schedule)
20594: {
20594:   var c = 0, j = 0;
20594:   for (var i = 0; i < 5; i++) {
20594:     for (j = 0; j < 4; j++) {
20594:       c += (schedule[i*4 + j] == 1) ? 1 : 2;
20594:     }
20594:   }
20594:   return c;
20594: }
20594: function testReallyDeepNestedExit()
20594: {
20594:   var c = 0;
20594:   var schedule1 = new Array(5*4);
20594:   var schedule2 = new Array(5*4);
20594:   for (var i = 0; i < 5*4; i++) {
20594:     schedule1[i] = 0;
20594:     schedule2[i] = 0;
20594:   }
20594:   /**
20594:    * First innermost compile: true branch runs through.
20594:    * Second '': false branch compiles new loop edge.
20594:    * First outer compile: expect true branch.
20594:    * Second '': hit false branch.
20594:    */
20594:   schedule1[0*4 + 3] = 1;
20594:   var schedules = [schedule1,
20594:                    schedule2,
20594:                    schedule1,
20594:                    schedule2,
20594:                    schedule2];
20594: 
20594:   for (var i = 0; i < 5; i++) {
20594:     c += reallyDeepNestedExit(schedules[i]);
20594:   }
20594:   return c;
20594: }
20594: testReallyDeepNestedExit.expected = 198;
20594: test(testReallyDeepNestedExit);
20594: 
21570: function testRegExpTest() {
21570:   var r = /abc/;
21570:   var flag = false;
21570:   for (var i = 0; i < 10; ++i)
21570:     flag = r.test("abc");
21570:   return flag;
21570: }
21570: testRegExpTest.expected = true;
21570: test(testRegExpTest);
21570: 
21570: function testNumToString() {
21570:   var r = [];
21570:   var d = 123456789;
21570:   for (var i = 0; i < 10; ++i) {
21570:     r = [
21570:       d.toString(),
21570:       (-d).toString(),
21570:       d.toString(10),
21570:       (-d).toString(10),
21570:       d.toString(16),
21570:       (-d).toString(16),
21570:       d.toString(36),
21570:       (-d).toString(36)
21570:       ];
21570:   }
21570:   return r.join(",");
21570: }
21570: testNumToString.expected = "123456789,-123456789,123456789,-123456789,75bcd15,-75bcd15,21i3v9,-21i3v9";
21570: test(testNumToString);
21570: 
24075: function testLongNumToString() {
24075:     var s;
24075:     for (var i = 0; i < 5; i++)
24075:         s = (0x08000000).toString(2);
24075:     return s;
24075: }
24075: testLongNumToString.expected = '1000000000000000000000000000';
24075: test(testLongNumToString);
24075: 
21570: function testSubstring() {
21570:   for (var i = 0; i < 5; ++i) {
21570:     actual = "".substring(5);
21570:   }
21570:   return actual;
21570: }
21570: testSubstring.expected = "";
21570: test(testSubstring);
21570: 
21570: function testForInLoopChangeIteratorType() {
21570:   for(y in [0,1,2]) y = NaN;
22023:   (function(){
22023:     [].__proto__.u = void 0;
22023:     for (let y in [5,6,7,8])
22023:       y = NaN;
22023:     delete [].__proto__.u;
22023:   })()
21570:     return "ok";
21570: }
21570: testForInLoopChangeIteratorType.expected = "ok";
21570: test(testForInLoopChangeIteratorType);
21570: 
21570: function testGrowDenseArray() {
21570:   var a = new Array();
21570:   for (var i = 0; i < 10; ++i)
21570:     a[i] |= 5;
21570:   return a.join(",");
21570: }
21570: testGrowDenseArray.expected = "5,5,5,5,5,5,5,5,5,5";
21570: test(testGrowDenseArray);
21570: 
21570: function testCallProtoMethod() {
21570:   function X() { this.x = 1; }
21570:   X.prototype.getName = function () { return "X"; }
21570: 
21570:   function Y() { this.x = 2; }
21570:   Y.prototype.getName = function() "Y";
21570: 
21570:   var a = [new X, new X, new X, new X, new Y];
21570:   var s = '';
21570:   for (var i = 0; i < a.length; i++)
21570:     s += a[i].getName();
21570:   return s;
21570: }
21570: testCallProtoMethod.expected = 'XXXXY';
21570: test(testCallProtoMethod);
21570: 
22023: function testTypeUnstableForIn() {
22023:   var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];
22023:   var x = 0;
22023:   for (var i in a) {
22023:     i = parseInt(i);
22023:     x++;
22023:   }
22023:   return x;
22023: }
22023: testTypeUnstableForIn.expected = 16;
22023: test(testTypeUnstableForIn);
22023: 
22023: function testAddUndefined() {
22023:   for (var j = 0; j < 3; ++j)
22023:     (0 + void 0) && 0;
22023: }
22023: test(testAddUndefined);
22023: 
22023: function testStringify() {
22023:   var t = true, f = false, u = undefined, n = 5, d = 5.5, s = "x";
22023:   var a = [];
22023:   for (var i = 0; i < 10; ++i) {
22023:     a[0] = "" + t;
22023:     a[1] = t + "";
22023:     a[2] = "" + f;
22023:     a[3] = f + "";
22023:     a[4] = "" + u;
22023:     a[5] = u + "";
22023:     a[6] = "" + n;
22023:     a[7] = n + "";
22023:     a[8] = "" + d;
22023:     a[9] = d + "";
22023:     a[10] = "" + s;
22023:     a[11] = s + "";
22023:   }
22023:   return a.join(",");
22023: }
22023: testStringify.expected = "true,true,false,false,undefined,undefined,5,5,5.5,5.5,x,x";
22023: test(testStringify);
22023: 
22023: function testObjectToString() {
22023:   var o = {toString: function()"foo"};
22023:   var s = "";
22023:   for (var i = 0; i < 10; i++)
22023:     s += o;
22023:   return s;
22023: }
22023: testObjectToString.expected = "foofoofoofoofoofoofoofoofoofoo";
22023: test(testObjectToString);
22023: 
22023: function testObjectToNumber() {
22023:   var o = {valueOf: function()-3};
22023:   var x = 0;
22023:   for (var i = 0; i < 10; i++)
22023:     x -= o;
22023:   return x;
22023: }
22023: testObjectToNumber.expected = 30;
22023: test(testObjectToNumber);
22023: 
22023: function my_iterator_next() {
22023:   if (this.i == 10) {
22023:     this.i = 0;
22023:     throw this.StopIteration;
22023:   }
22023:   return this.i++;
22023: }
22023: function testCustomIterator() {
22023:   var o = {
22023:   __iterator__: function () {
22023:       return {
22023:       i: 0,
22023:       next: my_iterator_next,
22023:       StopIteration: StopIteration
22023:       };
22023:     }
22023:   };
22023:   var a=[];
22023:   for (var k = 0; k < 100; k += 10) {
22023:     for(var j in o) {
22023:       a[k + (j >> 0)] = j*k;
22023:     }
22023:   }
22023:   return a.join();
22023: }
22023: testCustomIterator.expected = "0,0,0,0,0,0,0,0,0,0,0,10,20,30,40,50,60,70,80,90,0,20,40,60,80,100,120,140,160,180,0,30,60,90,120,150,180,210,240,270,0,40,80,120,160,200,240,280,320,360,0,50,100,150,200,250,300,350,400,450,0,60,120,180,240,300,360,420,480,540,0,70,140,210,280,350,420,490,560,630,0,80,160,240,320,400,480,560,640,720,0,90,180,270,360,450,540,630,720,810";
22023: test(testCustomIterator);
22023: 
22023: function bug464403() {
22023:   print(8);
22023:   var u = [print, print, function(){}]
22023:     for each (x in u) for (u.e in [1,1,1,1]);
22023:   return "ok";
22023: }
22023: bug464403.expected = "ok";
22023: test(bug464403);
22023: 
22023: function testBoxDoubleWithDoubleSizedInt()
22023: {
22023:   var i = 0;
22023:   var a = new Array(3);
22023: 
22023:   while (i < a.length)
22023:     a[i++] = 0x5a827999;
22023:   return a.join(",");
22023: }
22023: testBoxDoubleWithDoubleSizedInt.expected = "1518500249,1518500249,1518500249";
22023: test(testBoxDoubleWithDoubleSizedInt);
22023: 
22023: function testObjectOrderedCmp()
22023: {
22023:   var a = new Array(5);
22023:   for(var i=0;i<5;++i) a[i] = ({} < {});
22023:   return a.join(",");
22023: }
22023: testObjectOrderedCmp.expected = "false,false,false,false,false";
22023: test(testObjectOrderedCmp);
22023: 
22023: function testObjectOrderedCmp2()
22023: {
22023:   var a = new Array(5);
22023:   for(var i=0;i<5;++i) a[i] = ("" <= null);
22023:   return a.join(",");
22023: }
22023: testObjectOrderedCmp2.expected = "true,true,true,true,true";
22023: test(testObjectOrderedCmp2);
22023: 
22023: function testLogicalNotNaN() {
22023:   var i = 0;
22023:   var a = new Array(5);
22023:   while (i < a.length)
22023:     a[i++] = !NaN;
22023:   return a.join();
22023: }
22023: testLogicalNotNaN.expected = "true,true,true,true,true";
22023: test(testLogicalNotNaN);
22023: 
22023: function testStringToInt32() {
22023:   var s = "";
22023:   for (let j = 0; j < 5; ++j) s += ("1e+81" ^  3);
22023:   return s;
22023: }
22023: testStringToInt32.expected = "33333";
22023: test(testStringToInt32);
22023: 
22023: function testIn() {
22023:   var array = [3];
22023:   var obj = { "-1": 5, "1.7": 3, "foo": 5, "1": 7 };
22023:   var a = [];
22023:   for (let j = 0; j < 5; ++j) {
22023:     a.push("0" in array);
22023:     a.push(-1 in obj);
22023:     a.push(1.7 in obj);
22023:     a.push("foo" in obj);
22023:     a.push(1 in obj);
22023:     a.push("1" in array);  
22023:     a.push(-2 in obj);
22023:     a.push(2.7 in obj);
22023:     a.push("bar" in obj);
22023:     a.push(2 in obj);    
22023:   }
22023:   return a.join(",");
22023: }
22023: testIn.expected = "true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false";
22023: test(testIn);
22023: 
22023: function testBranchCse() {
22023:   empty = [];
22023:   out = [];
22023:   for (var j=0;j<10;++j) { empty[42]; out.push((1 * (1)) | ""); }
22023:   return out.join(",");
22023: }
22023: testBranchCse.expected = "1,1,1,1,1,1,1,1,1,1";
22023: test(testBranchCse);
22023: 
22023: function testMulOverflow() {
22023:   var a = [];
22023:   for (let j=0;j<5;++j) a.push(0 | ((0x60000009) * 0x60000009));
22023:   return a.join(",");
22023: }
22023: testMulOverflow.expected = "-1073741824,-1073741824,-1073741824,-1073741824,-1073741824";
22023: test(testMulOverflow);
22023: 
22023: function testThinLoopDemote() {
22023:   function f()
22023:   {
22023:     var k = 1;
22023:     for (var n = 0; n < 2; n++) {
22023:       k = (k * 10);
22023:     }
22023:     return k;
22023:   }
22023:   f();
22023:   return f();
22023: }
22023: testThinLoopDemote.expected = 100;
22023: testThinLoopDemote.jitstats = {
25311: recorderStarted: 2,
22023: recorderAborted: 0,
25311: traceCompleted: 2,
25311: traceTriggered: 1,
25311: unstableLoopVariable: 1
22023: };
22023: test(testThinLoopDemote);
22023: 
22023: var global = this;
22023: function testWeirdDateParseOuter()
22023: {
22023:   var vDateParts = ["11", "17", "2008"];
22023:   var out = [];
23671:   for (var vI = 0; vI < vDateParts.length; vI++)
22023:     out.push(testWeirdDateParseInner(vDateParts[vI]));
22023:   /* Mutate the global shape so we fall off trace; this causes
22023:    * additional oddity */
22023:   global.x = Math.random();
22023:   return out;
22023: } 
22023: function testWeirdDateParseInner(pVal)
22023: {
22023:   var vR = 0;
22023:   for (var vI = 0; vI < pVal.length; vI++) {
22023:     var vC = pVal.charAt(vI);
22023:     if ((vC >= '0') && (vC <= '9'))
22023: 	    vR = (vR * 10) + parseInt(vC);
22023:   }
22023:   return vR;
22023: }
22023: function testWeirdDateParse() {
22023:   var result = [];
22023:   result.push(testWeirdDateParseInner("11"));
22023:   result.push(testWeirdDateParseInner("17"));
22023:   result.push(testWeirdDateParseInner("2008"));
22023:   result.push(testWeirdDateParseInner("11"));
22023:   result.push(testWeirdDateParseInner("17"));
22023:   result.push(testWeirdDateParseInner("2008"));
22023:   result = result.concat(testWeirdDateParseOuter());
22023:   result = result.concat(testWeirdDateParseOuter());
22023:   result.push(testWeirdDateParseInner("11"));
22023:   result.push(testWeirdDateParseInner("17"));
22023:   result.push(testWeirdDateParseInner("2008"));
22023:   return result.join(",");
22023: }
22023: testWeirdDateParse.expected = "11,17,2008,11,17,2008,11,17,2008,11,17,2008,11,17,2008";
22023: testWeirdDateParse.jitstats = {
25311: recorderStarted: 7,
22023: recorderAborted: 1,
25311: traceCompleted: 6,
25311: traceTriggered: 14,
25311: unstableLoopVariable: 3,
25311: noCompatInnerTrees: 0
22023: };
22023: test(testWeirdDateParse);
22023: 
22023: function testUndemotableBinaryOp() {
22023:   var out = [];
22023:   for (let j = 0; j < 5; ++j) { out.push(6 - ((void 0) ^ 0x80000005)); }
22023:   return out.join(",");
22023: }
22023: testUndemotableBinaryOp.expected = "2147483649,2147483649,2147483649,2147483649,2147483649";
22023: test(testUndemotableBinaryOp);
22023: 
22023: function testNullRelCmp() {
22023:   var out = [];
22023:   for(j=0;j<3;++j) { out.push(3 > null); out.push(3 < null); out.push(0 == null); out.push(3 == null); }
22023:   return out.join(",");
22023: }
22023: testNullRelCmp.expected = "true,false,false,false,true,false,false,false,true,false,false,false";
22023: test(testNullRelCmp);
22023: 
22023: function testEqFalseEmptyString() {
22023:   var x = [];
22023:   for (var i=0;i<5;++i) x.push(false == "");
22023:   return x.join(",");
22023: }
22023: testEqFalseEmptyString.expected = "true,true,true,true,true";
22023: test(testEqFalseEmptyString);
22023: 
22023: function testIncDec2(ii) {
22023:   var x = [];
22023:   for (let j=0;j<5;++j) { 
22023:     ii=j;
22023:     jj=j; 
22023:     var kk=j; 
22023:     x.push(ii--);
22023:     x.push(jj--); 
22023:     x.push(kk--); 
22023:     x.push(++ii);
22023:     x.push(++jj); 
22023:     x.push(++kk); 
22023:   }
22023:   return x.join(",");
22023: }
22023: function testIncDec() {
22023:   return testIncDec2(0);
22023: }
22023: testIncDec.expected = "0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4";
22023: test(testIncDec);
22023: 
23671: function testApply() {
23671:     var q = [];
23671:     for (var i = 0; i < 10; ++i)
23671:         Array.prototype.push.apply(q, [5]);
23671:     return q.join(",");
23671: }
23671: testApply.expected = "5,5,5,5,5,5,5,5,5,5";
23671: test(testApply);
23671: 
25311: function testNestedForIn() {
25311:     var a = {x: 1, y: 2, z: 3};
25311:     var s = '';
25311:     for (var p1 in a)
25311:         for (var p2 in a)
25311:             s += p1 + p2 + ' ';
25311:     return s;
25311: }
25311: testNestedForIn.expected = 'xx xy xz yx yy yz zx zy zz ';
25311: test(testNestedForIn);
25311: 
25311: function testForEach() {
25311:     var r;
25311:     var a = ["zero", "one", "two", "three"];
25311:     for (var i = 0; i < RUNLOOP; i++) {
25311:         r = "";
25311:         for each (var s in a)
25311:             r += s + " ";
25311:     }
25311:     return r;
25311: }
25311: testForEach.expected = "zero one two three ";
25311: test(testForEach);
25311: 
25311: function testThinForEach() {
25311:     var a = ["red"];
25311:     var n = 0;
25311:     for (var i = 0; i < 10; i++)
25311:         for each (var v in a)
25311:             if (v)
25311:                 n++;
25311:     return n;
25311: }
25311: testThinForEach.expected = 10;
25311: test(testThinForEach);
25311: 
23671: function testComparisons()
23671: {
23671:   // All the special values from each of the types in
23671:   // ECMA-262, 3rd ed. section 8
23671:   var undefinedType, nullType, booleanType, stringType, numberType, objectType;
23671: 
23671:   var types = [];
23671:   types[undefinedType = 0] = "Undefined";
23671:   types[nullType = 1] = "Null";
23671:   types[booleanType = 2] = "Boolean";
23671:   types[stringType = 3] = "String";
23671:   types[numberType = 4] = "Number";
23671:   types[objectType = 5] = "Object";
23671: 
23671:   var JSVAL_INT_MIN = -Math.pow(2, 30);
23671:   var JSVAL_INT_MAX = Math.pow(2, 30) - 1;
23671: 
23671:   // Values from every ES3 type, hitting all the edge-case and special values
23671:   // that can be dreamed up
23671:   var values =
23671:     {
23671:      "undefined":
23671:        {
23671:          value: function() { return undefined; },
23671:          type: undefinedType
23671:        },
23671:      "null":
23671:        {
23671:          value: function() { return null; },
23671:          type: nullType
23671:        },
23671:      "true":
23671:        {
23671:          value: function() { return true; },
23671:          type: booleanType
23671:        },
23671:      "false":
23671:        {
23671:          value: function() { return false; },
23671:          type: booleanType
23671:        },
23671:      '""':
23671:        {
23671:          value: function() { return ""; },
23671:          type: stringType
23671:        },
23671:      '"a"':
23671:        {
23671:          // a > [, for string-object comparisons
23671:          value: function() { return "a"; },
23671:          type: stringType
23671:        },
23671:      '"Z"':
23671:        {
23671:          // Z < [, for string-object comparisons
23671:          value: function() { return "Z"; },
23671:          type: stringType
23671:        },
23671:      "0":
23671:        {
23671:          value: function() { return 0; },
23671:          type: numberType
23671:        },
23671:      "-0":
23671:        {
23671:          value: function() { return -0; },
23671:          type: numberType
23671:        },
23671:      "1":
23671:        {
23671:          value: function() { return 1; },
23671:          type: numberType
23671:        },
23671:      "Math.E":
23671:        {
23671:          value: function() { return Math.E; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MIN - 1":
23671:        {
23671:          value: function() { return JSVAL_INT_MIN - 1; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MIN":
23671:        {
23671:          value: function() { return JSVAL_INT_MIN; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MIN + 1":
23671:        {
23671:          value: function() { return JSVAL_INT_MIN + 1; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MAX - 1":
23671:        {
23671:          value: function() { return JSVAL_INT_MAX - 1; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MAX":
23671:        {
23671:          value: function() { return JSVAL_INT_MAX; },
23671:          type: numberType
23671:        },
23671:      "JSVAL_INT_MAX + 1":
23671:        {
23671:          value: function() { return JSVAL_INT_MAX + 1; },
23671:          type: numberType
23671:        },
23671:      "Infinity":
23671:        {
23671:          value: function() { return Infinity; },
23671:          type: numberType
23671:        },
23671:      "-Infinity":
23671:        {
23671:          value: function() { return -Infinity; },
23671:          type: numberType
23671:        },
23671:      "NaN":
23671:        {
23671:          value: function() { return NaN; },
23671:          type: numberType
23671:        },
23671:      "{}":
23671:        {
23671:          value: function() { return {}; },
23671:          type: objectType
23671:        },
23671:      "{ valueOf: undefined }":
23671:        {
23671:          value: function() { return { valueOf: undefined }; },
23671:          type: objectType
23671:        },
23671:      "[]":
23671:        {
23671:          value: function() { return []; },
23671:          type: objectType
23671:        },
23671:      '[""]':
23671:        {
23671:          value: function() { return [""]; },
23671:          type: objectType
23671:        },
23671:      '["a"]':
23671:        {
23671:          value: function() { return ["a"]; },
23671:          type: objectType
23671:        },
23671:      "[0]":
23671:        {
23671:          value: function() { return [0]; },
23671:          type: objectType
23671:        }
23671:     };
23671: 
23671:   var orderOps =
23671:     {
23671:      "<": function(a, b) { return a < b; },
23671:      ">": function(a, b) { return a > b; },
23671:      "<=": function(a, b) { return a <= b; },
23671:      ">=": function(a, b) { return a >= b; }
23671:     };
23671:   var eqOps =
23671:     {
23671:      "==": function(a, b) { return a == b; },
23671:      "!=": function(a, b) { return a != b; },
23671:      "===": function(a, b) { return a === b; },
23671:      "!==": function(a, b) { return a !== b; }
23671:     };
23671: 
23671: 
23671:   var notEqualIncomparable =
23671:     {
23671:       eq: { "==": false, "!=": true, "===": false, "!==": true },
23671:       order: { "<": false, ">": false, "<=": false, ">=": false }
23671:     };
23671:   var notEqualLessThan =
23671:     {
23671:       eq: { "==": false, "!=": true, "===": false, "!==": true },
23671:       order: { "<": true, ">": false, "<=": true, ">=": false }
23671:     };
23671:   var notEqualGreaterThan =
23671:     {
23671:       eq: { "==": false, "!=": true, "===": false, "!==": true },
23671:       order: { "<": false, ">": true, "<=": false, ">=": true }
23671:     };
23671:   var notEqualNorDifferent =
23671:     {
23671:       eq: { "==": false, "!=": true, "===": false, "!==": true },
23671:       order: { "<": false, ">": false, "<=": true, ">=": true }
23671:     };
23671:   var strictlyEqual =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": true, "!==": false },
23671:       order: { "<": false, ">": false, "<=": true, ">=": true }
23671:     };
23671:   var looselyEqual =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": false, "!==": true },
23671:       order: { "<": false, ">": false, "<=": true, ">=": true }
23671:     };
23671:   var looselyEqualNotDifferent =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": false, "!==": true },
23671:       order: { "<": false, ">": false, "<=": true, ">=": true }
23671:     };
23671:   var looselyEqualIncomparable =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": false, "!==": true },
23671:       order: { "<": false, ">": false, "<=": false, ">=": false }
23671:     };
23671:   var strictlyEqualNotDifferent =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": true, "!==": false },
23671:       order: { "<": false, ">": false, "<=": true, ">=": true }
23671:     };
23671:   var strictlyEqualIncomparable =
23671:     {
23671:       eq: { "==": true, "!=": false, "===": true, "!==": false },
23671:       order: { "<": false, ">": false, "<=": false, ">=": false }
23671:     };
23671: 
23671:   var comparingZeroToSomething =
23671:     {
23671:       "undefined": notEqualIncomparable,
23671:       "null": notEqualNorDifferent,
23671:       "true": notEqualLessThan,
23671:       "false": looselyEqual,
23671:       '""': looselyEqualNotDifferent,
23671:       '"a"': notEqualIncomparable,
23671:       '"Z"': notEqualIncomparable,
23671:       "0": strictlyEqual,
23671:       "-0": strictlyEqual,
23671:       "1": notEqualLessThan,
23671:       "Math.E": notEqualLessThan,
23671:       "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:       "JSVAL_INT_MIN": notEqualGreaterThan,
23671:       "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:       "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:       "JSVAL_INT_MAX": notEqualLessThan,
23671:       "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:       "Infinity": notEqualLessThan,
23671:       "-Infinity": notEqualGreaterThan,
23671:       "NaN": notEqualIncomparable,
23671:       "{}": notEqualIncomparable,
23671:       "{ valueOf: undefined }": notEqualIncomparable,
23671:       "[]": looselyEqual,
23671:       '[""]': looselyEqual,
23671:       '["a"]': notEqualIncomparable,
23671:       "[0]": looselyEqual
23671:     };
23671: 
23671:   var comparingObjectOrObjectWithValueUndefined =
23671:     {
23671:       "undefined": notEqualIncomparable,
23671:       "null": notEqualIncomparable,
23671:       "true": notEqualIncomparable,
23671:       "false": notEqualIncomparable,
23671:       '""': notEqualGreaterThan,
23671:       '"a"': notEqualLessThan,
23671:       '"Z"': notEqualGreaterThan,
23671:       "0": notEqualIncomparable,
23671:       "-0": notEqualIncomparable,
23671:       "1": notEqualIncomparable,
23671:       "Math.E": notEqualIncomparable,
23671:       "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:       "JSVAL_INT_MIN": notEqualIncomparable,
23671:       "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:       "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:       "JSVAL_INT_MAX": notEqualIncomparable,
23671:       "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:       "Infinity": notEqualIncomparable,
23671:       "-Infinity": notEqualIncomparable,
23671:       "NaN": notEqualIncomparable,
23671:       "{}": notEqualNorDifferent,
23671:       "{ valueOf: undefined }": notEqualNorDifferent,
23671:       "[]": notEqualGreaterThan,
23671:       '[""]': notEqualGreaterThan,
23671:       '["a"]': notEqualLessThan,
23671:       "[0]": notEqualGreaterThan
23671:     };
23671: 
23671:   // Constructed expected-value matrix
23671:   var expected =
23671:     {
23671:      "undefined":
23671:        {
23671:          "undefined": strictlyEqualIncomparable,
23671:          "null": looselyEqualIncomparable,
23671:          "true": notEqualIncomparable,
23671:          "false": notEqualIncomparable,
23671:          '""': notEqualIncomparable,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualIncomparable,
23671:          "-0": notEqualIncomparable,
23671:          "1": notEqualIncomparable,
23671:          "Math.E": notEqualIncomparable,
23671:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MIN": notEqualIncomparable,
23671:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX": notEqualIncomparable,
23671:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:          "Infinity": notEqualIncomparable,
23671:          "-Infinity": notEqualIncomparable,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualIncomparable,
23671:          '[""]': notEqualIncomparable,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualIncomparable
23671:        },
23671:      "null":
23671:        {
23671:          "undefined": looselyEqualIncomparable,
23671:          "null": strictlyEqualNotDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": notEqualNorDifferent,
23671:          '""': notEqualNorDifferent,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualNorDifferent,
23671:          "-0": notEqualNorDifferent,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualNorDifferent,
23671:          '[""]': notEqualNorDifferent,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualNorDifferent
23671:        },
23671:      "true":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": strictlyEqual,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": looselyEqual,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "false":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualNorDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": strictlyEqual,
23671:          '""': looselyEqualNotDifferent,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": looselyEqual,
23671:          "-0": looselyEqual,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": looselyEqual,
23671:          '[""]': looselyEqual,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": looselyEqual
23671:        },
23671:      '""':
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualNorDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": looselyEqual,
23671:          '""': strictlyEqual,
23671:          '"a"': notEqualLessThan,
23671:          '"Z"': notEqualLessThan,
23671:          "0": looselyEqual,
23671:          "-0": looselyEqual,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualLessThan,
23671:          "{ valueOf: undefined }": notEqualLessThan,
23671:          "[]": looselyEqual,
23671:          '[""]': looselyEqual,
23671:          '["a"]': notEqualLessThan,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      '"a"':
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualIncomparable,
23671:          "true": notEqualIncomparable,
23671:          "false": notEqualIncomparable,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': strictlyEqual,
23671:          '"Z"': notEqualGreaterThan,
23671:          "0": notEqualIncomparable,
23671:          "-0": notEqualIncomparable,
23671:          "1": notEqualIncomparable,
23671:          "Math.E": notEqualIncomparable,
23671:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MIN": notEqualIncomparable,
23671:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX": notEqualIncomparable,
23671:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:          "Infinity": notEqualIncomparable,
23671:          "-Infinity": notEqualIncomparable,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualGreaterThan,
23671:          "{ valueOf: undefined }": notEqualGreaterThan,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': looselyEqualNotDifferent,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      '"Z"':
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualIncomparable,
23671:          "true": notEqualIncomparable,
23671:          "false": notEqualIncomparable,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualLessThan,
23671:          '"Z"': strictlyEqual,
23671:          "0": notEqualIncomparable,
23671:          "-0": notEqualIncomparable,
23671:          "1": notEqualIncomparable,
23671:          "Math.E": notEqualIncomparable,
23671:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MIN": notEqualIncomparable,
23671:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX": notEqualIncomparable,
23671:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:          "Infinity": notEqualIncomparable,
23671:          "-Infinity": notEqualIncomparable,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualLessThan,
23671:          "{ valueOf: undefined }": notEqualLessThan,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualLessThan,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "0": comparingZeroToSomething,
23671:      "-0": comparingZeroToSomething,
23671:      "1":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": looselyEqual,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": strictlyEqual,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "Math.E":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": notEqualGreaterThan,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": notEqualGreaterThan,
23671:          "Math.E": strictlyEqual,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "JSVAL_INT_MIN - 1":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualLessThan,
23671:          "true": notEqualLessThan,
23671:          "false": notEqualLessThan,
23671:          '""': notEqualLessThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualLessThan,
23671:          "-0": notEqualLessThan,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": strictlyEqual,
23671:          "JSVAL_INT_MIN": notEqualLessThan,
23671:          "JSVAL_INT_MIN + 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualLessThan,
23671:          '[""]': notEqualLessThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      "JSVAL_INT_MIN":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualLessThan,
23671:          "true": notEqualLessThan,
23671:          "false": notEqualLessThan,
23671:          '""': notEqualLessThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualLessThan,
23671:          "-0": notEqualLessThan,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": strictlyEqual,
23671:          "JSVAL_INT_MIN + 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualLessThan,
23671:          '[""]': notEqualLessThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      "JSVAL_INT_MIN + 1":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualLessThan,
23671:          "true": notEqualLessThan,
23671:          "false": notEqualLessThan,
23671:          '""': notEqualLessThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualLessThan,
23671:          "-0": notEqualLessThan,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": strictlyEqual,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualLessThan,
23671:          '[""]': notEqualLessThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      "JSVAL_INT_MAX - 1":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": notEqualGreaterThan,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": notEqualGreaterThan,
23671:          "Math.E": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": strictlyEqual,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "JSVAL_INT_MAX":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": notEqualGreaterThan,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": notEqualGreaterThan,
23671:          "Math.E": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX": strictlyEqual,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "JSVAL_INT_MAX + 1":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": notEqualGreaterThan,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": notEqualGreaterThan,
23671:          "Math.E": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX + 1": strictlyEqual,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "Infinity":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualGreaterThan,
23671:          "true": notEqualGreaterThan,
23671:          "false": notEqualGreaterThan,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualGreaterThan,
23671:          "-0": notEqualGreaterThan,
23671:          "1": notEqualGreaterThan,
23671:          "Math.E": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX + 1": notEqualGreaterThan,
23671:          "Infinity": strictlyEqual,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "-Infinity":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualLessThan,
23671:          "true": notEqualLessThan,
23671:          "false": notEqualLessThan,
23671:          '""': notEqualLessThan,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualLessThan,
23671:          "-0": notEqualLessThan,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualLessThan,
23671:          "JSVAL_INT_MIN": notEqualLessThan,
23671:          "JSVAL_INT_MIN + 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": strictlyEqual,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualLessThan,
23671:          '[""]': notEqualLessThan,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      "NaN":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualIncomparable,
23671:          "true": notEqualIncomparable,
23671:          "false": notEqualIncomparable,
23671:          '""': notEqualIncomparable,
23671:          '"a"': notEqualIncomparable,
23671:          '"Z"': notEqualIncomparable,
23671:          "0": notEqualIncomparable,
23671:          "-0": notEqualIncomparable,
23671:          "1": notEqualIncomparable,
23671:          "Math.E": notEqualIncomparable,
23671:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MIN": notEqualIncomparable,
23671:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX": notEqualIncomparable,
23671:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:          "Infinity": notEqualIncomparable,
23671:          "-Infinity": notEqualIncomparable,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualIncomparable,
23671:          "{ valueOf: undefined }": notEqualIncomparable,
23671:          "[]": notEqualIncomparable,
23671:          '[""]': notEqualIncomparable,
23671:          '["a"]': notEqualIncomparable,
23671:          "[0]": notEqualIncomparable
23671:        },
23671:      "{}": comparingObjectOrObjectWithValueUndefined,
23671:      "{ valueOf: undefined }": comparingObjectOrObjectWithValueUndefined,
23671:      "[]":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualNorDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": looselyEqual,
23671:          '""': looselyEqual,
23671:          '"a"': notEqualLessThan,
23671:          '"Z"': notEqualLessThan,
23671:          "0": looselyEqual,
23671:          "-0": looselyEqual,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualLessThan,
23671:          "{ valueOf: undefined }": notEqualLessThan,
23671:          "[]": notEqualNorDifferent,
23671:          '[""]': notEqualNorDifferent,
23671:          '["a"]': notEqualLessThan,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      '[""]':
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualNorDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": looselyEqual,
23671:          '""': looselyEqual,
23671:          '"a"': notEqualLessThan,
23671:          '"Z"': notEqualLessThan,
23671:          "0": looselyEqual,
23671:          "-0": looselyEqual,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualLessThan,
23671:          "{ valueOf: undefined }": notEqualLessThan,
23671:          "[]": notEqualNorDifferent,
23671:          '[""]': notEqualNorDifferent,
23671:          '["a"]': notEqualLessThan,
23671:          "[0]": notEqualLessThan
23671:        },
23671:      '["a"]':
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualIncomparable,
23671:          "true": notEqualIncomparable,
23671:          "false": notEqualIncomparable,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': looselyEqual,
23671:          '"Z"': notEqualGreaterThan,
23671:          "0": notEqualIncomparable,
23671:          "-0": notEqualIncomparable,
23671:          "1": notEqualIncomparable,
23671:          "Math.E": notEqualIncomparable,
23671:          "JSVAL_INT_MIN - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MIN": notEqualIncomparable,
23671:          "JSVAL_INT_MIN + 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX - 1": notEqualIncomparable,
23671:          "JSVAL_INT_MAX": notEqualIncomparable,
23671:          "JSVAL_INT_MAX + 1": notEqualIncomparable,
23671:          "Infinity": notEqualIncomparable,
23671:          "-Infinity": notEqualIncomparable,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualGreaterThan,
23671:          "{ valueOf: undefined }": notEqualGreaterThan,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualNorDifferent,
23671:          "[0]": notEqualGreaterThan
23671:        },
23671:      "[0]":
23671:        {
23671:          "undefined": notEqualIncomparable,
23671:          "null": notEqualNorDifferent,
23671:          "true": notEqualLessThan,
23671:          "false": looselyEqual,
23671:          '""': notEqualGreaterThan,
23671:          '"a"': notEqualLessThan,
23671:          '"Z"': notEqualLessThan,
23671:          "0": looselyEqual,
23671:          "-0": looselyEqual,
23671:          "1": notEqualLessThan,
23671:          "Math.E": notEqualLessThan,
23671:          "JSVAL_INT_MIN - 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN": notEqualGreaterThan,
23671:          "JSVAL_INT_MIN + 1": notEqualGreaterThan,
23671:          "JSVAL_INT_MAX - 1": notEqualLessThan,
23671:          "JSVAL_INT_MAX": notEqualLessThan,
23671:          "JSVAL_INT_MAX + 1": notEqualLessThan,
23671:          "Infinity": notEqualLessThan,
23671:          "-Infinity": notEqualGreaterThan,
23671:          "NaN": notEqualIncomparable,
23671:          "{}": notEqualLessThan,
23671:          "{ valueOf: undefined }": notEqualLessThan,
23671:          "[]": notEqualGreaterThan,
23671:          '[""]': notEqualGreaterThan,
23671:          '["a"]': notEqualLessThan,
23671:          "[0]": notEqualNorDifferent
23671:        }
23671:     };
23671: 
23671: 
23671: 
23671:   var failures = [];
23671:   function fail(a, ta, b, tb, ex, ac, op)
23671:   {
23671:     failures.push("(" + a + " " + op + " " + b + ") wrong: " +
23671:                   "expected " + ex + ", got " + ac +
23671:                   " (types " + types[ta] + ", " + types[tb] + ")");
23671:   }
23671: 
23671:   var result = false;
23671:   for (var i in values)
23671:   {
23671:     for (var j in values)
23671:     {
23671:       // Constants, so hoist to help JIT know that
23671:       var vala = values[i], valb = values[j];
23671:       var a = vala.value(), b = valb.value();
23671: 
23671:       for (var opname in orderOps)
23671:       {
23671:         var op = orderOps[opname];
23671:         var expect = expected[i][j].order[opname];
23671:         var failed = false;
23671: 
23671:         for (var iter = 0; iter < 5; iter++)
23671:         {
23671:           result = op(a, b);
23671:           failed = failed || result !== expect;
23671:         }
23671: 
23671:         if (failed)
23671:           fail(i, vala.type, j, valb.type, expect, result, opname);
23671:       }
23671: 
23671:       for (var opname in eqOps)
23671:       {
23671:         var op = eqOps[opname];
23671:         var expect = expected[i][j].eq[opname];
23671:         var failed = false;
23671: 
23671:         for (var iter = 0; iter < 5; iter++)
23671:         {
23671:           result = op(a, b);
23671:           failed = failed || result !== expect;
23671:         }
23671: 
23671:         if (failed)
23671:           fail(i, vala.type, j, valb.type, expect, result, opname);
23671:       }
23671:     }
23671:   }
23671: 
23671:   if (failures.length == 0)
23671:     return "no failures reported!";
23671: 
23671:   return "\n" + failures.join(",\n");
23671: }
23671: testComparisons.expected = "no failures reported!";
23671: test(testComparisons);
23671: 
23671: function testCaseAbort()
23671: {
23671:   var four = "4";
23671:   var r = 0;
23671:   for (var i = 0; i < 5; i++)
23671:   {
23671:     switch (i)
23671:     {
23671:       case four: r += 1; break;
23671:       default: r += 2; break;
23671:     }
23671:   }
23671: 
23671:   return "" + r;
23671: }
23671: testCaseAbort.expected = "10";
23671: testCaseAbort.jitstats = {
23671:   recorderAborted: 0
23671: };
23671: test(testCaseAbort);
23671: 
23671: function testApplyCallHelper(f) {
23671:     var r = [];
23671:     for (var i = 0; i < 10; ++i) f.call();
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0]);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0,1);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1]);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2]);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3]);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3,4);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3,4]);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.call(this,0,1,2,3,4,5);
23671:     r.push(x);
23671:     for (var i = 0; i < 10; ++i) f.apply(this,[0,1,2,3,4,5])
23671:     r.push(x);
23671:     return(r.join(","));
23671: }
23671: function testApplyCall() {
23671:     var r = testApplyCallHelper(function (a0,a1,a2,a3,a4,a5,a6,a7) { x = [a0,a1,a2,a3,a4,a5,a6,a7]; });
23671:     r += testApplyCallHelper(function (a0,a1,a2,a3,a4,a5,a6,a7) { x = [a0,a1,a2,a3,a4,a5,a6,a7]; });
23671:     return r;
23671: }
23671: testApplyCall.expected =
23671: ",,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,0,,,,,,,,0,1,,,,,,,0,1,,,,,,,0,1,2,,,,,,0,1,2,,,,,,0,1,2,3,,,,,0,1,2,3,,,,,0,1,2,3,4,,,,0,1,2,3,4,,,,0,1,2,3,4,5,,,0,1,2,3,4,5,," +
23671: ",,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,0,,,,,,,,0,1,,,,,,,0,1,,,,,,,0,1,2,,,,,,0,1,2,,,,,,0,1,2,3,,,,,0,1,2,3,,,,,0,1,2,3,4,,,,0,1,2,3,4,,,,0,1,2,3,4,5,,,0,1,2,3,4,5,,";
23671: test(testApplyCall);
23671: 
23671: function testApplyUnboxHelper(f,a) {
23671:     var q;
23671:     for (var i = 0; i < 10; ++i)
23671:         q = f.apply(f,a);
23671:     return q;
23671: }
23671: function testApplyUnbox() {
23671:     var f = function(x) { return x; }
23671:     return [testApplyUnboxHelper(f,[1]), testApplyUnboxHelper(f,[true])].join(",");
23671: }
23671: testApplyUnbox.expected = "1,true";
23671: test(testApplyUnbox);
23671: 
23671: function testCallPick() {
23671:     function g(x,a) {
23671:         x.f();
23671:     }
23671: 
23671:     var x = [];
23671:     x.f = function() { }
23671: 
23671:     var y = [];
23671:     y.f = function() { }
23671: 
23671:     var z = [x,x,x,x,x,y,y,y,y,y];
23671: 
23671:     for (var i = 0; i < 10; ++i)
23671:         g.call(this, z[i], "");
23671:     return true;
23671: }
23671: testCallPick.expected = true;
23671: test(testCallPick);
23671: 
23671: function testInvertNullAfterNegateNull()
23671: {
23671:   for (var i = 0; i < 5; i++) !null;
23671:   for (var i = 0; i < 5; i++) -null;
23671:   return "no assertion";
23671: }
23671: testInvertNullAfterNegateNull.expected = "no assertion";
23671: test(testInvertNullAfterNegateNull);
23671: 
23671: function testUnaryImacros()
23671: {
23671:   function checkArg(x)
23671:   {
23671:     return 1;
23671:   }
23671: 
23671:   var o = { valueOf: checkArg, toString: null };
23671:   var count = 0;
23671:   var v = 0;
23671:   for (var i = 0; i < 5; i++)
23671:     v += +o + -(-o);
23671: 
23671:   var results = [v === 10 ? "valueOf passed" : "valueOf failed"];
23671: 
23671:   o.valueOf = null;
23671:   o.toString = checkArg;
23671: 
23671:   for (var i = 0; i < 5; i++)
23671:     v += +o + -(-o);
23671: 
23671:   results.push(v === 20 ? "toString passed" : "toString failed");
23671: 
23671:   return results.join(", ");
23671: }
23671: testUnaryImacros.expected = "valueOf passed, toString passed";
23671: test(testUnaryImacros);
23671: 
23671: function testAddAnyInconvertibleObject()
23671: {
23671:   var count = 0;
24075:   function toString() { ++count; if (count == 95) return {}; return "" + count; }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o = {valueOf: undefined, toString: toString};
23671:         var q = 5 + o;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== "594")
24075:       return "expected q === '594', got " + q + " (type " + typeof q + ")";
24075:     if (count !== 95)
24075:       return "expected count === 95, got " + count;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with 5 + o"; // hey, a rhyme!
23671: 
23671:   return "pass";
23671: }
23671: testAddAnyInconvertibleObject.expected = "pass";
23671: testAddAnyInconvertibleObject.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testAddAnyInconvertibleObject);
23671: 
23671: function testAddInconvertibleObjectAny()
23671: {
23671:   var count = 0;
24075:   function toString() 
24075:   { 
24075:       ++count; 
24075:       if (count == 95) 
24075:           return {}; 
24075:       return "" + count;
24075:   }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o = {valueOf: undefined, toString: toString};
23671:         var q = o + 5;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== "945")
24075:       return "expected q === '945', got " + q + " (type " + typeof q + ")";
24075:     if (count !== 95)
24075:       return "expected count === 95, got " + count;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with o + 5";
23671: 
23671:   return "pass";
23671: }
23671: testAddInconvertibleObjectAny.expected = "pass";
23671: testAddInconvertibleObjectAny.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testAddInconvertibleObjectAny);
23671: 
23671: function testAddInconvertibleObjectInconvertibleObject()
23671: {
23671:   var count1 = 0;
24075:   function toString1() { ++count1; if (count1 == 95) return {}; return "" + count1; }
23671:   var count2 = 0;
24075:   function toString2() { ++count2; if (count2 == 95) return {}; return "" + count2; }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o1 = {valueOf: undefined, toString: toString1};
23671:         var o2 = {valueOf: undefined, toString: toString2};
23671:         var q = o1 + o2;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== "9494")
24075:       return "expected q === '9494', got " + q + " (type " + typeof q + ")";
24075:     if (count1 !== 95)
24075:       return "expected count1 === 95, got " + count1;
24075:     if (count2 !== 94)
24075:       return "expected count2 === 94, got " + count2;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with o1 + o2";
23671: 
23671:   return "pass";
23671: }
23671: testAddInconvertibleObjectInconvertibleObject.expected = "pass";
23671: testAddInconvertibleObjectInconvertibleObject.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testAddInconvertibleObjectInconvertibleObject);
23671: 
23671: function testBitOrAnyInconvertibleObject()
23671: {
23671:   var count = 0;
24075:   function toString() { ++count; if (count == 95) return {}; return count; }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o = {valueOf: undefined, toString: toString};
24075:         var q = 1 | o;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== 95)
24075:       return "expected q === 95, got " + q;
24075:     if (count !== 95)
24075:       return "expected count === 95, got " + count;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with 2 | o"; // hey, a rhyme!
23671: 
23671:   return "pass";
23671: }
23671: testBitOrAnyInconvertibleObject.expected = "pass";
23671: testBitOrAnyInconvertibleObject.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testBitOrAnyInconvertibleObject);
23671: 
23671: function testBitOrInconvertibleObjectAny()
23671: {
23671:   var count = 0;
24075:   function toString() { ++count; if (count == 95) return {}; return count; }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o = {valueOf: undefined, toString: toString};
24075:         var q = o | 1;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== 95)
24075:       return "expected q === 95, got " + q;
24075:     if (count !== 95)
24075:       return "expected count === 95, got " + count;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with o | 2";
23671: 
23671:   return "pass";
23671: }
23671: testBitOrInconvertibleObjectAny.expected = "pass";
23671: testBitOrInconvertibleObjectAny.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testBitOrInconvertibleObjectAny);
23671: 
23671: function testBitOrInconvertibleObjectInconvertibleObject()
23671: {
23671:   var count1 = 0;
24075:   function toString1() { ++count1; if (count1 == 95) return {}; return count1; }
23671:   var count2 = 0;
24075:   function toString2() { ++count2; if (count2 == 95) return {}; return count2; }
23671: 
23671:   var threw = false;
23671:   try
23671:   {
24075:     for (var i = 0; i < 100; i++)
23671:     {
23671:         var o1 = {valueOf: undefined, toString: toString1};
23671:         var o2 = {valueOf: undefined, toString: toString2};
23671:         var q = o1 | o2;
23671:     }
23671:   }
23671:   catch (e)
23671:   {
23671:     threw = true;
24075:     if (i !== 94)
24075:       return "expected i === 94, got " + i;
24075:     if (q !== 94)
24075:       return "expected q === 94, got " + q;
24075:     if (count1 !== 95)
24075:       return "expected count1 === 95, got " + count1;
24075:     if (count2 !== 94)
24075:       return "expected count2 === 94, got " + count2;
23671:   }
23671:   if (!threw)
23671:     return "expected throw with o1 | o2";
23671: 
23671:   return "pass";
23671: }
23671: testBitOrInconvertibleObjectInconvertibleObject.expected = "pass";
23671: testBitOrInconvertibleObjectInconvertibleObject.jitstats = {
23671:   recorderStarted: 1,
23671:   recorderAborted: 0,
24075:   sideExitIntoInterpreter: 93
23671: };
23671: test(testBitOrInconvertibleObjectInconvertibleObject);
23671: 
23671: function testCaseTypeMismatchBadness()
23671: {
23671:   for (var z = 0; z < 3; ++z)
23671:   {
23671:     switch ("")
23671:     {
23671:       default:
23671:       case 9:
23671:         break;
23671: 
23671:       case "":
23671:       case <x/>:
23671:         break;
23671:     }
23671:   }
23671: 
23671:   return "no crash";
23671: }
23671: testCaseTypeMismatchBadness.expected = "no crash";
23671: testCaseTypeMismatchBadness.jitstats = {
23671:     recorderAborted: 0
23671: };
23671: test(testCaseTypeMismatchBadness);
23671: 
23671: function testDoubleComparison()
23671: {
23671:   for (var i = 0; i < 500000; ++i)
23671:   {
23671:     switch (1 / 0)
23671:     {
23671:       case Infinity:
23671:     }
23671:   }
23671: 
23671:   return "finished";
23671: }
23671: testDoubleComparison.expected = "finished";
23671: testDoubleComparison.jitstats = {
23671:   sideExitIntoInterpreter: 1
23671: };
23671: test(testDoubleComparison);
23671: 
23671: function testLirBufOOM()
23671: {
23671:     var a = [
23671:              "12345678901234",
23671:              "123456789012",
23671:              "1234567890123456789012345678",
23671:              "12345678901234567890123456789012345678901234567890123456",
23671:              "f",
23671:              "$",
23671:              "",
23671:              "f()",
23671:              "(\\*)",
23671:              "b()",
23671:              "()",
23671:              "(#)",
23671:              "ABCDEFGHIJK",
23671:              "ABCDEFGHIJKLM",
23671:              "ABCDEFGHIJKLMNOPQ",
23671:              "ABCDEFGH",
23671:              "(.)",
23671:              "(|)",
23671:              "()$",
23671:              "/()",
23671:              "(.)$"
23671:              ];
23671:     
23671:     for (var j = 0; j < 200; ++j) {
23671:         var js = "" + j;
23671:         for (var i = 0; i < a.length; i++)
23671:             "".match(a[i] + js)
23671:     }
23671:     return "ok";
23671: }
23671: testLirBufOOM.expected = "ok";
23671: test(testLirBufOOM);
23671: 
24075: function testStringResolve() {
24075:     var x = 0;
24075:     for each (let d in [new String('q'), new String('q'), new String('q')]) {
24075:         if (("" + (0 in d)) === "true")
24075:             x++;
24075:     }
24075:     return x;
24075: }
24075: testStringResolve.expected = 3;
24075: test(testStringResolve);
24075: 
25311: //test no multitrees assert
25311: function testGlobalMultitrees1() {
25311:     (function() { 
25311:       for (var j = 0; j < 4; ++j) {
25311:         for each (e in ['A', 1, 'A']) {
25311:         }
25311:       }
25311:     })();
25311:     return true;
25311: }
25311: testGlobalMultitrees1.expected = true;
25311: test(testGlobalMultitrees1);
25311: 
25311: var q = [];
25311: for each (b in [0x3FFFFFFF, 0x3FFFFFFF, 0x3FFFFFFF]) {
25311:   for each (let e in [{}, {}, {}, "", {}]) { 
25311:     b = (b | 0x40000000) + 1;
25311:     q.push(b);
25311:   }
25311: }
25311: function testLetWithUnstableGlobal() {
25311:     return q.join(",");
25311: }
25311: testLetWithUnstableGlobal.expected = "2147483648,-1073741823,-1073741822,-1073741821,-1073741820,2147483648,-1073741823,-1073741822,-1073741821,-1073741820,2147483648,-1073741823,-1073741822,-1073741821,-1073741820";
25311: test(testLetWithUnstableGlobal);
25311: delete b;
25311: delete q;
25311: 
25311: for each (testBug474769_b in [1, 1, 1, 1.5, 1, 1]) {
25311:     (function() { for each (let testBug474769_h in [0, 0, 1.4, ""]) {} })()
25311: }
25311: function testBug474769() {
25311:     return testBug474769_b;
25311: }
25311: testBug474769.expected = 1;
25311: test(testBug474769);
25311: 
25311: function testReverseArgTypes() {
25311:     for (var j = 0; j < 4; ++j) ''.replace('', /x/);
25311:     return 1;
25311: }
25311: testReverseArgTypes.expected = 1;
25311: test(testReverseArgTypes);
25311: 
24363: function testBug458838() {
24363:     var a = 1;
24363:     function g() {
24363:         var b = 0
24363:             for (var i = 0; i < 10; ++i) {
24363:                 b += a;
24363:             }
24363:         return b;
24363:     }
24363: 
24363:     return g();
24363: }
24363: testBug458838.expected = 10;
24363: testBug458838.jitstats = {
24363:   recorderStarted: 1,
25311:   recorderAborted: 1,
25311:   traceCompleted: 0
24363: };
24363: test(testBug458838);
24363: 
25311: function testInterpreterReentry() {
25311:     this.__defineSetter__('x', function(){})
25311:     for (var j = 0; j < 5; ++j) { x = 3; }
25311:     return 1;
25311: }
25311: testInterpreterReentry.expected = 1;
25311: test(testInterpreterReentry);
25311: 
25311: function testInterpreterReentry2() {
25311:     var a = false;
25311:     var b = {};
25311:     var c = false;
25311:     var d = {};
25311:     this.__defineGetter__('e', function(){});
25311:     for (let f in this) print(f);
25311:     [1 for each (g in this) for each (h in [])]
25311:     return 1;
25311: }
25311: testInterpreterReentry2.expected = 1;
25311: test(testInterpreterReentry2);
25311: 
25311: function testInterpreterReentry3() {
25311:     for (let i=0;i<5;++i) this["y" + i] = function(){};
25311:     this.__defineGetter__('e', function (x2) { yield; });
25311:     [1 for each (a in this) for (b in {})];
25311:     return 1;
25311: }
25311: testInterpreterReentry3.expected = 1;
25311: test(testInterpreterReentry3);
25311: 
25311: function testInterpreterReentry4() {
25311:     var obj = {a:1, b:1, c:1, d:1, get e() 1000 };
25311:     for (var p in obj)
25311:         obj[p];
25311: }
25311: test(testInterpreterReentry4);
25311: 
25311: function testInterpreterReentry5() {
25311:     var arr = [0, 1, 2, 3, 4];
25311:     arr.__defineGetter__("4", function() 1000);
25311:     for (var i = 0; i < 5; i++)
25311:         arr[i];
25311:     for (var p in arr)
25311:         arr[p];
25311: }
25311: test(testInterpreterReentry5);
25311: 
25311: function testInterpreterReentry6() {
25311:     var obj = {a:1, b:1, c:1, d:1, set e(x) { this._e = x; }};
25311:     for (var p in obj)
25311:         obj[p] = "grue";
25311:     return obj._e;
25311: }
25311: testInterpreterReentry6.expected = "grue";
25311: test(testInterpreterReentry6);
25311: 
25311: function testInterpreterReentry7() {
25311:     var arr = [0, 1, 2, 3, 4];
25311:     arr.__defineSetter__("4", function(x) { this._4 = x; });
25311:     for (var i = 0; i < 5; i++)
25311:         arr[i] = "grue";
25311:     var tmp = arr._4;
25311:     for (var p in arr)
25311:         arr[p] = "bleen";
25311:     return tmp + " " + arr._4;
25311: }
25311: testInterpreterReentry7.expected = "grue bleen";
25311: test(testInterpreterReentry7);
25311: 
25311: // Bug 462027 comment 54.
25311: function testInterpreterReentery8() {
25311:     var e = <x><y/></x>;
25311:     for (var j = 0; j < 4; ++j) { +[e]; }
25311: }
25311: test(testInterpreterReentery8);
25311: 
25311: function testHolePushing() {
25311:     var a = ["foobar", "baz"];
25311:     for (var i = 0; i < 5; i++)
25311:         a = [, "overwritten", "new"];
25311:     var s = "[";
25311:     for (i = 0; i < a.length; i++) {
25311:         s += (i in a) ? a[i] : "<hole>";
25311:         if (i != a.length - 1)
25311:             s += ",";
25311:     }
25311:     return s + "], " + (0 in a);
25311: }
25311: testHolePushing.expected = "[<hole>,overwritten,new], false";
25311: test(testHolePushing);
25311: 
25311: function testDeepBail1() {
25311:     var y = <z/>;
25311:     for (var i = 0; i < RUNLOOP; i++)
25311:         "" in y;
25311: }
25311: test(testDeepBail1);
25311: 
25311: /* Array comprehension tests */
25311: 
25311: function Range(start, stop) {
25311:     this.i = start;
25311:     this.stop = stop;
25311: }
25311: Range.prototype = {
25311:     __iterator__: function() this,
25311:     next: function() {
25311:         if (this.i >= this.stop)
25311:             throw StopIteration;
25311:         return this.i++;
25311:     }
25311: };
25311: 
25311: function range(start, stop) {
25311:     return new Range(start, stop);
25311: }
25311: 
25311: function testArrayComp1() {
25311:     return [a for (a in range(0, 10))].join('');
25311: }
25311: testArrayComp1.expected='0123456789';
25311: test(testArrayComp1);
25311: 
25311: function testArrayComp2() {
25311:     return [a + b for (a in range(0, 5)) for (b in range(0, 5))].join('');
25311: }
25311: testArrayComp2.expected='0123412345234563456745678';
25311: test(testArrayComp2);
25311: 
25311: function testSwitchUndefined()
25311: {
25311:   var x = undefined;
25311:   var y = 0;
25311:   for (var i = 0; i < 5; i++)
25311:   {
25311:     switch (x)
25311:     {
25311:       default:
25311:         y++;
25311:     }
25311:   }
25311:   return y;
25311: }
25311: testSwitchUndefined.expected = 5;
25311: test(testSwitchUndefined);
25311: 
25311: function testGeneratorDeepBail() {
25311:     function g() { yield 2; }
25311:     var iterables = [[1], [], [], [], g()];
25311: 
25311:     var total = 0;
25311:     for (let i = 0; i < iterables.length; i++)
25311:         for each (let j in iterables[i])
25311:                      total += j;
25311:     return total;
25311: }
25311: testGeneratorDeepBail.expected = 3;
25311: test(testGeneratorDeepBail);
25311: 
23671: /*****************************************************************************
23671:  *                                                                           *
23671:  *  _____ _   _  _____ ______ _____ _______                                  *
23671:  * |_   _| \ | |/ ____|  ____|  __ \__   __|                                 *
23671:  *   | | |  \| | (___ | |__  | |__) | | |                                    *
23671:  *   | | | . ` |\___ \|  __| |  _  /  | |                                    *
23671:  *  _| |_| |\  |____) | |____| | \ \  | |                                    *
23671:  * |_____|_| \_|_____/|______|_|  \_\ |_|                                    *
23671:  *                                                                           *
23671:  *                                                                           *
23671:  *  _______ ______  _____ _______ _____                                      *
23671:  * |__   __|  ____|/ ____|__   __/ ____|                                     *
23671:  *    | |  | |__  | (___    | | | (___                                       *
23671:  *    | |  |  __|  \___ \   | |  \___ \                                      *
23671:  *    | |  | |____ ____) |  | |  ____) |                                     *
23671:  *    |_|  |______|_____/   |_| |_____/                                      *
23671:  *                                                                           *
23671:  *                                                                           *
23671:  *  ____  ______ ______ ____  _____  ______    _    _ ______ _____  ______   *
23671:  * |  _ \|  ____|  ____/ __ \|  __ \|  ____|  | |  | |  ____|  __ \|  ____|  *
23671:  * | |_) | |__  | |__ | |  | | |__) | |__     | |__| | |__  | |__) | |__     *
23671:  * |  _ <|  __| |  __|| |  | |  _  /|  __|    |  __  |  __| |  _  /|  __|    *
23671:  * | |_) | |____| |   | |__| | | \ \| |____   | |  | | |____| | \ \| |____   *
23671:  * |____/|______|_|    \____/|_|  \_\______|  |_|  |_|______|_|  \_\______|  *
23671:  *                                                                           *
23671:  *****************************************************************************/
23671: 
23671: // math-trace-tests.js is a separate file here.
23671: 
23671: // MANDELBROT STUFF deleted
23671: 
23671: /*****************************************************************************
23671:  *  _   _  ____     _   __  ____  _____  ______                              *
23671:  * | \ | |/ __ \   |  \/  |/ __ \|  __ \|  ____|                             *
23671:  * |  \| | |  | |  | \  / | |  | | |__) | |__                                *
23671:  * | . ` | |  | |  | |\/| | |  | |  _  /|  __|                               *
23671:  * | |\  | |__| |  | |  | | |__| | | \ \| |____                              *
23671:  * |_| \_|\____/   |_|  |_|\____/|_|  \_\______|                             *
23671:  *                                                                           *
23671:  *  _______ ______  _____ _______ _____                                      *
23671:  * |__   __|  ____|/ ____|__   __/ ____|                                     *
23671:  *    | |  | |__  | (___    | | | (___                                       *
23671:  *    | |  |  __|  \___ \   | |  \___ \                                      *
23671:  *    | |  | |____ ____) |  | |  ____) |                                     *
23671:  *    |_|  |______|_____/   |_| |_____/                                      *
23671:  *                                                                           *
23671:  *           ______ _______ ______ _____     _    _ ______ _____  ______ _   *
23671:  *     /\   |  ____|__   __|  ____|  __ \   | |  | |  ____|  __ \|  ____| |  *
23671:  *    /  \  | |__     | |  | |__  | |__) |  | |__| | |__  | |__) | |__  | |  *
23671:  *   / /\ \ |  __|    | |  |  __| |  _  /   |  __  |  __| |  _  /|  __| | |  *
23671:  *  / ____ \| |       | |  | |____| | \ \   | |  | | |____| | \ \| |____|_|  *
23671:  * /_/    \_\_|       |_|  |______|_|  \_\  |_|  |_|______|_|  \_\______(_)  *
23671:  *                                                                           *
23671:  *****************************************************************************/
23671: 
22023: /* NOTE: Keep this test last, since it screws up all for...in loops after it. */
22023: function testGlobalProtoAccess() {
22023:   return "ok";
22023: }
22023: this.__proto__.a = 3; for (var j = 0; j < 4; ++j) { [a]; }
22023: testGlobalProtoAccess.expected = "ok";
22023: test(testGlobalProtoAccess);
22023: 
19318: jit(false);
19318: 
16647: /* Keep these at the end so that we can see the summary after the trace-debug spew. */
20329: if (0) {
16647:   print("\npassed:", passes.length && passes.join(","));
16647:   print("\nFAILED:", fails.length && fails.join(","));
20329: }
