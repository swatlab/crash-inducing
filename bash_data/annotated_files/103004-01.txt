     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
     1: /* vim: set ts=2 sw=2 et tw=78: */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 80467: #include "mozilla/Util.h"
 93484: // On top because they include basictypes.h:
 93484: #include "SmsFilter.h"
 87539: 
 87539: #ifdef XP_WIN
 87539: #undef GetClassName
 87539: #endif
 80467: 
 38922: // JavaScript includes
 38922: #include "jsapi.h"
 87284: #include "jsfriendapi.h"
 38922: #include "jsprvtd.h"    // we are using private JS typedefs...
 38922: #include "jsdbgapi.h"
 55655: #include "WrapperFactory.h"
 55665: #include "AccessCheck.h"
 95444: #include "XrayWrapper.h"
 95444: 
 95444: #include "xpcpublic.h"
 70158: #include "xpcprivate.h"
 77776: #include "XPCWrapper.h"
102303: #include "XPCQuickStubs.h"
102303: #include "nsDOMQS.h"
 70158: 
 97422: #include "mozilla/dom/RegisterBindings.h"
 94512: 
     1: #include "nscore.h"
     1: #include "nsDOMClassInfo.h"
     1: #include "nsCRT.h"
     1: #include "nsCRTGlue.h"
     1: #include "nsIServiceManager.h"
     1: #include "nsICategoryManager.h"
     1: #include "nsIComponentRegistrar.h"
     1: #include "nsXPCOM.h"
     1: #include "nsISupportsPrimitives.h"
     1: #include "nsIXPConnect.h"
     1: #include "nsIJSContextStack.h"
     1: #include "nsIXPCSecurityManager.h"
     1: #include "nsIStringBundle.h"
     1: #include "nsIConsoleService.h"
     1: #include "nsIScriptError.h"
     1: #include "nsXPIDLString.h"
     1: #include "nsReadableUtils.h"
     1: #include "nsUnicharUtils.h"
     1: #include "xptcall.h"
     1: #include "prprf.h"
     1: #include "nsTArray.h"
  3645: #include "nsCSSValue.h"
 13098: #include "nsIRunnable.h"
 13098: #include "nsThreadUtils.h"
 89667: #include "nsDOMEventTargetHelper.h"
     1: 
     1: // General helper includes
     1: #include "nsGlobalWindow.h"
 56818: #include "nsHistory.h"
     1: #include "nsIContent.h"
     1: #include "nsIAttribute.h"
     1: #include "nsIDocument.h"
     1: #include "nsIDOMDocument.h"
     1: #include "nsIDOMXMLDocument.h"
     1: #include "nsIDOMEvent.h"
     1: #include "nsIDOMNSEvent.h"
     1: #include "nsIDOMKeyEvent.h"
     1: #include "nsIDOMEventListener.h"
 37802: #include "nsIDOMPopStateEvent.h"
 68729: #include "nsIDOMHashChangeEvent.h"
     1: #include "nsContentUtils.h"
     1: #include "nsDOMWindowUtils.h"
 57371: #include "nsIDOMGlobalPropertyInitializer.h"
 70840: #include "mozilla/Preferences.h"
 74762: #include "nsLocation.h"
102221: #include "mozilla/Attributes.h"
     1: 
     1: // Window scriptable helper includes
     1: #include "nsIDocShell.h"
     1: #include "nsIDocShellTreeItem.h"
     1: #include "nsIDocShellTreeNode.h"
     1: #include "nsIScriptExternalNameSet.h"
     1: #include "nsJSUtils.h"
     1: #include "nsIInterfaceRequestor.h"
     1: #include "nsIInterfaceRequestorUtils.h"
     1: #include "nsScriptNameSpaceManager.h"
     1: #include "nsIScriptObjectOwner.h"
     1: #include "nsIJSNativeInitializer.h"
  7941: #include "nsJSEnvironment.h"
     1: 
     1: // DOM base includes
     1: #include "nsIDOMPluginArray.h"
     1: #include "nsIDOMPlugin.h"
     1: #include "nsIDOMMimeTypeArray.h"
     1: #include "nsIDOMMimeType.h"
     1: #include "nsIDOMLocation.h"
 73870: #include "nsIDOMWindow.h"
     1: #include "nsPIDOMWindow.h"
     1: #include "nsIDOMJSWindow.h"
     1: #include "nsIDOMWindowCollection.h"
     1: #include "nsIDOMHistory.h"
     1: #include "nsIDOMMediaList.h"
     1: #include "nsIDOMChromeWindow.h"
     1: #include "nsIDOMConstructor.h"
 72298: #include "nsIDOMPerformanceTiming.h"
 72298: #include "nsIDOMPerformanceNavigation.h"
 72298: #include "nsIDOMPerformance.h"
 20752: #include "nsClientRect.h"
     1: 
     1: // DOM core includes
     1: #include "nsDOMError.h"
     1: #include "nsIDOMDOMException.h"
     1: #include "nsIDOMNode.h"
     1: #include "nsIDOMNamedNodeMap.h"
     1: #include "nsIDOMDOMStringList.h"
 31383: #include "nsIDOMDOMTokenList.h"
 41438: #include "nsIDOMDOMSettableTokenList.h"
     1: 
 70158: #include "nsDOMStringMap.h"
 70158: 
     1: // HTMLFormElement helper includes
     1: #include "nsIForm.h"
     1: #include "nsIFormControl.h"
     1: #include "nsIDOMHTMLFormElement.h"
  9596: #include "nsHTMLDocument.h"
     1: 
 50904: // Constraint Validation API helper includes
 50904: #include "nsIDOMValidityState.h"
 50904: 
     1: // HTMLSelectElement helper includes
     1: #include "nsIDOMHTMLSelectElement.h"
     1: 
     1: // HTMLEmbed/ObjectElement helper includes
 70007: #include "nsNPAPIPluginInstance.h"
     1: #include "nsIObjectFrame.h"
     1: #include "nsIObjectLoadingContent.h"
     1: #include "nsIPluginHost.h"
     1: 
     1: #include "nsIDOMHTMLOptionElement.h"
 21618: #include "nsGenericElement.h"
     1: 
     1: // Event related includes
 72328: #include "nsEventListenerManager.h"
  1418: #include "nsIDOMEventTarget.h"
     1: 
     1: // CSS related includes
     1: #include "nsIDOMStyleSheet.h"
     1: #include "nsIDOMStyleSheetList.h"
     1: #include "nsIDOMCSSStyleDeclaration.h"
     1: #include "nsIDOMCSSRule.h"
 20752: #include "nsICSSRuleList.h"
     1: #include "nsIDOMRect.h"
     1: #include "nsIDOMRGBColor.h"
     1: #include "nsIDOMNSRGBAColor.h"
 30385: #include "nsDOMCSSAttrDeclaration.h"
     1: 
     1: // XBL related includes.
 99253: #include "nsXBLService.h"
     1: #include "nsXBLBinding.h"
     1: #include "nsBindingManager.h"
     1: #include "nsIFrame.h"
     1: #include "nsIPresShell.h"
     1: #include "nsIDOMElement.h"
     1: #include "nsIDOMCSSStyleDeclaration.h"
     1: #include "nsStyleContext.h"
     1: #include "nsAutoPtr.h"
     1: #include "nsMemory.h"
     1: 
     1: // Tranformiix
     1: #include "nsIDOMXPathEvaluator.h"
     1: #include "nsIXSLTProcessor.h"
     1: #include "nsIXSLTProcessorPrivate.h"
     1: 
     1: #include "nsIDOMLSProgressEvent.h"
     1: #include "nsIDOMParser.h"
     1: #include "nsIDOMSerializer.h"
 21618: #include "nsXMLHttpRequest.h"
 43833: #include "nsWebSocket.h"
 43834: #include "nsIDOMCloseEvent.h"
 70324: #include "nsEventSource.h"
 94104: #include "nsIDOMSettingsManager.h"
101993: #include "nsIDOMContactManager.h"
102039: #include "nsIDOMApplicationRegistry.h"
     1: 
102181: #ifdef MOZ_B2G_RIL
102181: #include "nsIWifi.h"
102182: #include "nsIWifiEventInits.h"
102181: #endif
102181: 
     1: // includes needed for the prototype chain interfaces
     1: #include "nsIDOMNavigator.h"
     1: #include "nsIDOMBarProp.h"
     1: #include "nsIDOMScreen.h"
     1: #include "nsIDOMDocumentType.h"
     1: #include "nsIDOMDOMImplementation.h"
     1: #include "nsIDOMDocumentFragment.h"
 47799: #include "nsDOMAttribute.h"
     1: #include "nsIDOMText.h"
     1: #include "nsIDOMComment.h"
     1: #include "nsIDOMCDATASection.h"
     1: #include "nsIDOMProcessingInstruction.h"
  8868: #include "nsIDOMDataContainerEvent.h"
     1: #include "nsIDOMKeyEvent.h"
 78621: #include "nsIDOMCompositionEvent.h"
     1: #include "nsIDOMMouseEvent.h"
 16604: #include "nsIDOMMouseScrollEvent.h"
 18445: #include "nsIDOMDragEvent.h"
     1: #include "nsIDOMCommandEvent.h"
     1: #include "nsIDOMPopupBlockedEvent.h"
     1: #include "nsIDOMBeforeUnloadEvent.h"
     1: #include "nsIDOMMutationEvent.h"
     1: #include "nsIDOMSmartCardEvent.h"
     1: #include "nsIDOMXULCommandEvent.h"
     1: #include "nsIDOMPageTransitionEvent.h"
 10976: #include "nsIDOMMessageEvent.h"
 32894: #include "nsPaintRequest.h"
 19380: #include "nsIDOMNotifyPaintEvent.h"
 51477: #include "nsIDOMNotifyAudioAvailableEvent.h"
 33011: #include "nsIDOMScrollAreaEvent.h"
 36618: #include "nsIDOMTransitionEvent.h"
 67986: #include "nsIDOMAnimationEvent.h"
     1: #include "nsIDOMDocumentXBL.h"
     1: #include "nsIDOMElementCSSInlineStyle.h"
     1: #include "nsIDOMLinkStyle.h"
     1: #include "nsIDOMHTMLDocument.h"
 43860: #include "nsIDOMHTMLElement.h"
     1: #include "nsIDOMHTMLAnchorElement.h"
     1: #include "nsIDOMHTMLAppletElement.h"
     1: #include "nsIDOMHTMLAreaElement.h"
     1: #include "nsIDOMHTMLBRElement.h"
     1: #include "nsIDOMHTMLBaseElement.h"
     1: #include "nsIDOMHTMLBodyElement.h"
     1: #include "nsIDOMHTMLButtonElement.h"
     1: #include "nsIDOMHTMLCanvasElement.h"
 52362: #include "nsIDOMHTMLDataListElement.h"
     1: #include "nsIDOMHTMLDListElement.h"
     1: #include "nsIDOMHTMLDirectoryElement.h"
     1: #include "nsIDOMHTMLDivElement.h"
     1: #include "nsIDOMHTMLEmbedElement.h"
     1: #include "nsIDOMHTMLFieldSetElement.h"
     1: #include "nsIDOMHTMLFontElement.h"
     1: #include "nsIDOMHTMLFrameElement.h"
     1: #include "nsIDOMHTMLFrameSetElement.h"
 80402: #include "nsIDOMHTMLFrameElement.h"
     1: #include "nsIDOMHTMLHRElement.h"
     1: #include "nsIDOMHTMLHeadElement.h"
     1: #include "nsIDOMHTMLHeadingElement.h"
     1: #include "nsIDOMHTMLHtmlElement.h"
     1: #include "nsIDOMHTMLIFrameElement.h"
     1: #include "nsIDOMHTMLImageElement.h"
     1: #include "nsIDOMHTMLInputElement.h"
     1: #include "nsIDOMHTMLLIElement.h"
     1: #include "nsIDOMHTMLLabelElement.h"
     1: #include "nsIDOMHTMLLegendElement.h"
     1: #include "nsIDOMHTMLLinkElement.h"
     1: #include "nsIDOMHTMLMapElement.h"
     1: #include "nsIDOMHTMLMenuElement.h"
 75019: #include "nsIDOMHTMLMenuItemElement.h"
     1: #include "nsIDOMHTMLMetaElement.h"
101223: #include "nsIDOMHTMLMeterElement.h"
     1: #include "nsIDOMHTMLModElement.h"
     1: #include "nsIDOMHTMLOListElement.h"
     1: #include "nsIDOMHTMLObjectElement.h"
     1: #include "nsIDOMHTMLOptGroupElement.h"
 41438: #include "nsIDOMHTMLOutputElement.h"
     1: #include "nsIDOMHTMLParagraphElement.h"
     1: #include "nsIDOMHTMLParamElement.h"
     1: #include "nsIDOMHTMLPreElement.h"
 69585: #include "nsIDOMHTMLProgressElement.h"
     1: #include "nsIDOMHTMLQuoteElement.h"
     1: #include "nsIDOMHTMLScriptElement.h"
     1: #include "nsIDOMHTMLStyleElement.h"
     1: #include "nsIDOMHTMLTableCaptionElem.h"
     1: #include "nsIDOMHTMLTableCellElement.h"
     1: #include "nsIDOMHTMLTableColElement.h"
     1: #include "nsIDOMHTMLTableElement.h"
     1: #include "nsIDOMHTMLTableRowElement.h"
     1: #include "nsIDOMHTMLTableSectionElem.h"
     1: #include "nsIDOMHTMLTextAreaElement.h"
     1: #include "nsIDOMHTMLTitleElement.h"
     1: #include "nsIDOMHTMLUListElement.h"
 63959: #include "nsIDOMHTMLUnknownElement.h"
 51394: #include "nsIDOMMediaError.h"
 51394: #include "nsIDOMTimeRanges.h"
 15751: #include "nsIDOMHTMLSourceElement.h"
 15751: #include "nsIDOMHTMLVideoElement.h"
 15751: #include "nsIDOMHTMLAudioElement.h"
 97367: #if defined (MOZ_MEDIA)
 97200: #include "nsIDOMMediaStream.h"
 97367: #endif
 15751: #include "nsIDOMProgressEvent.h"
 49011: #include "nsIDOMCSS2Properties.h"
     1: #include "nsIDOMCSSCharsetRule.h"
     1: #include "nsIDOMCSSImportRule.h"
     1: #include "nsIDOMCSSMediaRule.h"
 16545: #include "nsIDOMCSSFontFaceRule.h"
     1: #include "nsIDOMCSSMozDocumentRule.h"
 67979: #include "nsIDOMMozCSSKeyframeRule.h"
 67979: #include "nsIDOMMozCSSKeyframesRule.h"
     1: #include "nsIDOMCSSPrimitiveValue.h"
     1: #include "nsIDOMCSSStyleRule.h"
     1: #include "nsIDOMCSSStyleSheet.h"
 20752: #include "nsDOMCSSValueList.h"
 97608: #include "nsIDOMDeviceProximityEvent.h"
 98668: #include "nsIDOMUserProximityEvent.h"
 97609: #include "nsIDOMDeviceLightEvent.h"
 69154: #include "nsIDOMDeviceOrientationEvent.h"
 72018: #include "nsIDOMDeviceMotionEvent.h"
     1: #include "nsIDOMRange.h"
 16103: #include "nsIDOMNodeIterator.h"
     1: #include "nsIDOMTreeWalker.h"
     1: #include "nsIDOMXULDocument.h"
     1: #include "nsIDOMXULElement.h"
     1: #include "nsIDOMXULCommandDispatcher.h"
     1: #include "nsIDOMCrypto.h"
     1: #include "nsIDOMCRMFObject.h"
     1: #include "nsIControllers.h"
     1: #include "nsISelection.h"
     1: #include "nsIBoxObject.h"
     1: #ifdef MOZ_XUL
     1: #include "nsITreeSelection.h"
     1: #include "nsITreeContentView.h"
     1: #include "nsITreeView.h"
     1: #include "nsIXULTemplateBuilder.h"
 20752: #include "nsTreeColumns.h"
     1: #endif
     1: #include "nsIDOMXPathExpression.h"
     1: #include "nsIDOMNSXPathExpression.h"
     1: #include "nsIDOMXPathNSResolver.h"
     1: #include "nsIDOMXPathResult.h"
 87826: #include "nsIDOMMozBrowserFrame.h"
101135: #include "nsIDOMHTMLPropertiesCollection.h"
101135: #include "nsIDOMPropertyNodeList.h"
     1: 
     1: #include "nsIDOMGetSVGDocument.h"
     1: #include "nsIDOMSVGAElement.h"
 40733: #include "nsIDOMSVGAltGlyphElement.h"
     1: #include "nsIDOMSVGAngle.h"
     1: #include "nsIDOMSVGAnimatedAngle.h"
  2863: #include "nsIDOMSVGAnimatedBoolean.h"
     1: #include "nsIDOMSVGAnimatedEnum.h"
     1: #include "nsIDOMSVGAnimatedInteger.h"
     1: #include "nsIDOMSVGAnimatedLength.h"
     1: #include "nsIDOMSVGAnimatedLengthList.h"
     1: #include "nsIDOMSVGAnimatedNumber.h"
     1: #include "nsIDOMSVGAnimatedNumberList.h"
     1: #include "nsIDOMSVGAnimatedPathData.h"
     1: #include "nsIDOMSVGAnimatedPoints.h"
     1: #include "nsIDOMSVGAnimatedRect.h"
     1: #include "nsIDOMSVGAnimatedString.h"
 67630: #include "nsIDOMSVGAnimPresAspRatio.h"
 23697: #include "nsIDOMSVGAnimateElement.h"
 23931: #include "nsIDOMSVGAnimateTransformElement.h"
 41499: #include "nsIDOMSVGAnimateMotionElement.h"
 41507: #include "nsIDOMSVGMpathElement.h"
 23697: #include "nsIDOMSVGSetElement.h"
 23697: #include "nsIDOMSVGAnimationElement.h"
 23697: #include "nsIDOMElementTimeControl.h"
 48450: #include "nsIDOMTimeEvent.h"
     1: #include "nsIDOMSVGAnimTransformList.h"
     1: #include "nsIDOMSVGCircleElement.h"
     1: #include "nsIDOMSVGClipPathElement.h"
     1: #include "nsIDOMSVGDefsElement.h"
     1: #include "nsIDOMSVGDescElement.h"
     1: #include "nsIDOMSVGDocument.h"
     1: #include "nsIDOMSVGElement.h"
     1: #include "nsIDOMSVGEllipseElement.h"
     1: #include "nsIDOMSVGEvent.h"
     1: #include "nsIDOMSVGFilterElement.h"
     1: #include "nsIDOMSVGFilters.h"
     1: #include "nsIDOMSVGFitToViewBox.h"
     1: #include "nsIDOMSVGForeignObjectElem.h"
     1: #include "nsIDOMSVGGElement.h"
     1: #include "nsIDOMSVGGradientElement.h"
     1: #include "nsIDOMSVGImageElement.h"
     1: #include "nsIDOMSVGLength.h"
     1: #include "nsIDOMSVGLengthList.h"
     1: #include "nsIDOMSVGLineElement.h"
     1: #include "nsIDOMSVGLocatable.h"
     1: #include "nsIDOMSVGMarkerElement.h"
     1: #include "nsIDOMSVGMaskElement.h"
     1: #include "nsIDOMSVGMatrix.h"
     1: #include "nsIDOMSVGMetadataElement.h"
     1: #include "nsIDOMSVGNumber.h"
     1: #include "nsIDOMSVGNumberList.h"
     1: #include "nsIDOMSVGPathElement.h"
     1: #include "nsIDOMSVGPathSeg.h"
     1: #include "nsIDOMSVGPathSegList.h"
     1: #include "nsIDOMSVGPatternElement.h"
     1: #include "nsIDOMSVGPoint.h"
     1: #include "nsIDOMSVGPointList.h"
     1: #include "nsIDOMSVGPolygonElement.h"
     1: #include "nsIDOMSVGPolylineElement.h"
     1: #include "nsIDOMSVGPresAspectRatio.h"
     1: #include "nsIDOMSVGRect.h"
     1: #include "nsIDOMSVGRectElement.h"
     1: #include "nsIDOMSVGScriptElement.h"
     1: #include "nsIDOMSVGStopElement.h"
     1: #include "nsIDOMSVGStylable.h"
     1: #include "nsIDOMSVGStyleElement.h"
     1: #include "nsIDOMSVGSVGElement.h"
     1: #include "nsIDOMSVGSwitchElement.h"
     1: #include "nsIDOMSVGSymbolElement.h"
 86429: #include "nsIDOMSVGTests.h"
     1: #include "nsIDOMSVGTextElement.h"
     1: #include "nsIDOMSVGTextPathElement.h"
     1: #include "nsIDOMSVGTitleElement.h"
     1: #include "nsIDOMSVGTransform.h"
     1: #include "nsIDOMSVGTransformable.h"
     1: #include "nsIDOMSVGTransformList.h"
     1: #include "nsIDOMSVGTSpanElement.h"
 67630: #include "nsIDOMSVGUnitTypes.h"
     1: #include "nsIDOMSVGURIReference.h"
     1: #include "nsIDOMSVGUseElement.h"
 98726: #include "nsIDOMSVGViewElement.h"
     1: #include "nsIDOMSVGZoomAndPan.h"
     1: #include "nsIDOMSVGZoomEvent.h"
     1: 
102303: #include "nsICanvasRenderingContextInternal.h"
     1: 
     1: #include "nsIImageDocument.h"
     1: 
     1: // Storage includes
 21159: #include "nsDOMStorage.h"
     1: 
 99167: // Device Storage
 99167: #include "nsIDOMDeviceStorage.h"
 99167: #include "nsIDOMDeviceStorageCursor.h"
 99167: 
 18445: // Drag and drop
 18445: #include "nsIDOMDataTransfer.h"
 18445: 
 15958: // Geolocation
 16677: #include "nsIDOMGeoGeolocation.h"
 16677: #include "nsIDOMGeoPosition.h"
 25529: #include "nsIDOMGeoPositionCoords.h"
 16677: #include "nsIDOMGeoPositionError.h"
 15958: 
100179: // User media
100179: #ifdef MOZ_MEDIA_NAVIGATOR
100179: #include "nsIDOMNavigatorUserMedia.h"
100179: #endif
100179: 
 21376: // Workers
 74337: #include "mozilla/dom/workers/Workers.h"
 21376: 
 20752: #include "nsDOMFile.h"
 34695: #include "nsDOMFileReader.h"
 38679: #include "nsIDOMFormData.h"
  3940: 
 70158: #include "nsIDOMDOMStringMap.h"
 70158: 
 52355: #include "nsIDOMDesktopNotification.h"
 52355: #include "nsIDOMNavigatorDesktopNotification.h"
 99167: #include "nsIDOMNavigatorDeviceStorage.h"
 81313: #include "nsIDOMNavigatorGeolocation.h"
 81313: #include "Navigator.h"
 81313: 
 81313: #include "nsPluginArray.h"
 81313: #include "nsMimeTypeArray.h"
 52355: 
 20793: // Simple gestures include
 20793: #include "nsIDOMSimpleGestureEvent.h"
 48711: #include "nsIDOMMozTouchEvent.h"
 48711: 
 33903: #include "nsIEventListenerService.h"
 42412: #include "nsIFrameMessageManager.h"
 41930: #include "mozilla/dom/Element.h"
 47801: #include "nsHTMLSelectElement.h"
 47802: #include "nsHTMLLegendElement.h"
 41639: 
 67630: #include "DOMSVGLengthList.h"
 67630: #include "DOMSVGNumberList.h"
 67630: #include "DOMSVGPathSegList.h"
 67630: #include "DOMSVGPointList.h"
 89117: #include "DOMSVGStringList.h"
 78867: #include "DOMSVGTransformList.h"
 33903: 
 88011: #include "mozilla/dom/indexedDB/IDBWrapperCache.h"
 46347: #include "mozilla/dom/indexedDB/IDBFactory.h"
100151: #include "mozilla/dom/indexedDB/IDBFileHandle.h"
 44204: #include "mozilla/dom/indexedDB/IDBRequest.h"
 46349: #include "mozilla/dom/indexedDB/IDBDatabase.h"
 44204: #include "mozilla/dom/indexedDB/IDBEvents.h"
 46360: #include "mozilla/dom/indexedDB/IDBObjectStore.h"
 46348: #include "mozilla/dom/indexedDB/IDBTransaction.h"
 46362: #include "mozilla/dom/indexedDB/IDBCursor.h"
 44204: #include "mozilla/dom/indexedDB/IDBKeyRange.h"
 46361: #include "mozilla/dom/indexedDB/IDBIndex.h"
 44204: 
 88011: using mozilla::dom::indexedDB::IDBWrapperCache;
 88011: 
 68769: #include "nsIDOMMediaQueryList.h"
 68769: 
 68879: #include "nsDOMTouchEvent.h"
 69676: #include "nsIDOMCustomEvent.h"
 94465: #include "nsDOMMutationObserver.h"
 68879: 
 80074: #include "nsWrapperCacheInlines.h"
 80088: #include "dombindings.h"
 80074: 
 81318: #include "nsIDOMBatteryManager.h"
 81374: #include "BatteryManager.h"
 89127: #include "nsIDOMPowerManager.h"
 91709: #include "nsIDOMWakeLock.h"
 82755: #include "nsIDOMSmsManager.h"
 82763: #include "nsIDOMSmsMessage.h"
 82764: #include "nsIDOMSmsEvent.h"
 87526: #include "nsIDOMSmsRequest.h"
 87539: #include "nsIDOMSmsFilter.h"
 87543: #include "nsIDOMSmsCursor.h"
 87557: #include "nsIDOMConnection.h"
 95744: #include "nsIDOMMobileConnection.h"
101616: #include "USSDReceivedEvent.h"
 87558: #include "mozilla/dom/network/Utils.h"
 81318: 
 86882: #ifdef MOZ_B2G_RIL
 86882: #include "Telephony.h"
 86882: #include "TelephonyCall.h"
 86882: #include "CallEvent.h"
 86882: #endif
 86882: 
 90498: #ifdef MOZ_B2G_BT
 99300: #include "BluetoothManager.h"
 90498: #include "BluetoothAdapter.h"
 90498: #endif
 90498: 
 88012: #include "DOMError.h"
 90885: #include "DOMRequest.h"
101817: #include "nsIOpenWindowEventDetail.h"
101817: #include "nsIDOMGlobalObjectConstructor.h"
 88012: 
100151: #include "DOMFileHandle.h"
100151: #include "FileRequest.h"
100151: #include "LockedFile.h"
100151: 
 97123: #include "mozilla/Likely.h"
 97123: 
 94084: #undef None // something included above defines this preprocessor symbol, maybe Xlib headers
 94084: #include "WebGLContext.h"
 94084: 
 70840: using namespace mozilla;
 67630: using namespace mozilla::dom;
 67630: 
     1: static NS_DEFINE_CID(kDOMSOF_CID, NS_DOM_SCRIPT_OBJECT_FACTORY_CID);
     1: 
     1: static const char kDOMStringBundleURL[] =
     1:   "chrome://global/locale/dom/dom.properties";
     1: 
     1: // NOTE: DEFAULT_SCRIPTABLE_FLAGS and DOM_DEFAULT_SCRIPTABLE_FLAGS
     1: //       are defined in nsIDOMClassInfo.h.
     1: 
 55578: #define WINDOW_SCRIPTABLE_FLAGS                                               \
     1:  (nsIXPCScriptable::WANT_GETPROPERTY |                                        \
     1:   nsIXPCScriptable::WANT_PRECREATE |                                          \
     1:   nsIXPCScriptable::WANT_FINALIZE |                                           \
 67691:   nsIXPCScriptable::WANT_ENUMERATE |                                          \
 55578:   nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE |                               \
 78133:   nsIXPCScriptable::USE_STUB_EQUALITY_HOOK |                                  \
 91575:   nsIXPCScriptable::IS_GLOBAL_OBJECT |                                        \
 55578:   nsIXPCScriptable::WANT_OUTER_OBJECT)
 50473: 
     1: #define NODE_SCRIPTABLE_FLAGS                                                 \
     1:  ((DOM_DEFAULT_SCRIPTABLE_FLAGS |                                             \
 77985:    nsIXPCScriptable::USE_STUB_EQUALITY_HOOK |                                 \
 78692:    nsIXPCScriptable::WANT_ADDPROPERTY) &                                      \
     1:   ~nsIXPCScriptable::USE_JSSTUB_FOR_ADDPROPERTY)
     1: 
     1: // We need to let JavaScript QI elements to interfaces that are not in
     1: // the classinfo since XBL can be used to dynamically implement new
     1: // unknown interfaces on elements, accessibility relies on this being
     1: // possible.
     1: 
     1: #define ELEMENT_SCRIPTABLE_FLAGS                                              \
  6392:   ((NODE_SCRIPTABLE_FLAGS & ~nsIXPCScriptable::CLASSINFO_INTERFACES_ONLY) |   \
102658:    nsIXPCScriptable::WANT_POSTCREATE)
     1: 
     1: #define EXTERNAL_OBJ_SCRIPTABLE_FLAGS                                         \
 20773:   ((ELEMENT_SCRIPTABLE_FLAGS &                                                \
 20773:     ~nsIXPCScriptable::USE_JSSTUB_FOR_SETPROPERTY) |                          \
 29423:    nsIXPCScriptable::WANT_POSTCREATE |                                        \
     1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
     1:    nsIXPCScriptable::WANT_SETPROPERTY |                                       \
     1:    nsIXPCScriptable::WANT_CALL)
     1: 
     1: #define DOCUMENT_SCRIPTABLE_FLAGS                                             \
     1:   (NODE_SCRIPTABLE_FLAGS |                                                    \
 29423:    nsIXPCScriptable::WANT_POSTCREATE |                                        \
 21618:    nsIXPCScriptable::WANT_ENUMERATE)
     1: 
     1: #define ARRAY_SCRIPTABLE_FLAGS                                                \
     1:   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
     1:    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
     1:    nsIXPCScriptable::WANT_ENUMERATE)
     1: 
 70158: #define DOMSTRINGMAP_SCRIPTABLE_FLAGS                                         \
 70158:   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
 70158:    nsIXPCScriptable::WANT_ENUMERATE   |                                       \
 70158:    nsIXPCScriptable::WANT_PRECREATE   |                                       \
 70158:    nsIXPCScriptable::WANT_DELPROPERTY |                                       \
 70158:    nsIXPCScriptable::WANT_SETPROPERTY |                                       \
 70158:    nsIXPCScriptable::WANT_GETPROPERTY)
 70158: 
 21618: #define EVENTTARGET_SCRIPTABLE_FLAGS                                          \
 21618:   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
 26503:    nsIXPCScriptable::WANT_ADDPROPERTY)
 21618: 
 88011: #define IDBEVENTTARGET_SCRIPTABLE_FLAGS                                       \
 88011:   (EVENTTARGET_SCRIPTABLE_FLAGS)
 88011: 
     1: #define DOMCLASSINFO_STANDARD_FLAGS                                           \
     1:   (nsIClassInfo::MAIN_THREAD_ONLY | nsIClassInfo::DOM_OBJECT)
     1: 
     1: 
102909: #ifdef DEBUG
     1: #define NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                \
     1:     eDOMClassInfo_##_class##_id,
     1: #else
     1: #define NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                \
     1:   // nothing
     1: #endif
     1: 
102303: /**
102303:  * To generate the bitmap for a class that we're sure doesn't implement any of
102303:  * the interfaces in DOMCI_CASTABLE_INTERFACES.
102303:  */
102303: #define DOMCI_DATA_NO_CLASS(_dom_class)                                       \
102303: const PRUint32 kDOMClassInfo_##_dom_class##_interfaces =                      \
102303:   0;
102303: 
102303: DOMCI_DATA_NO_CLASS(Crypto)
102303: DOMCI_DATA_NO_CLASS(CRMFObject)
102303: DOMCI_DATA_NO_CLASS(SmartCardEvent)
102303: DOMCI_DATA_NO_CLASS(ContentFrameMessageManager)
102303: 
102303: DOMCI_DATA_NO_CLASS(DOMPrototype)
102303: DOMCI_DATA_NO_CLASS(DOMConstructor)
 40490: 
     1: #define NS_DEFINE_CLASSINFO_DATA_WITH_NAME(_class, _name, _helper,            \
     1:                                            _flags)                            \
     1:   { #_name,                                                                   \
 29423:     nsnull,                                                                   \
     1:     { _helper::doCreate },                                                    \
     1:     nsnull,                                                                   \
     1:     nsnull,                                                                   \
     1:     nsnull,                                                                   \
     1:     _flags,                                                                   \
 80486:     true,                                                                  \
 40491:     0,                                                                        \
 80486:     false,                                                                 \
 80486:     false,                                                                 \
     1:     NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                    \
     1:   },
     1: 
 41030: #define NS_DEFINE_CHROME_ONLY_CLASSINFO_DATA_WITH_NAME(_class, _name,         \
 41030:                                                        _helper, _flags)       \
 41030:   { #_name,                                                                   \
 41030:     nsnull,                                                                   \
 41030:     { _helper::doCreate },                                                    \
 41030:     nsnull,                                                                   \
 41030:     nsnull,                                                                   \
 41030:     nsnull,                                                                   \
 41030:     _flags,                                                                   \
 80486:     true,                                                                  \
 41030:     0,                                                                        \
 80486:     true,                                                                  \
 80486:     false,                                                                 \
 41030:     NS_DEFINE_CLASSINFO_DATA_DEBUG(_class)                                    \
 41030:   },
 41030: 
     1: #define NS_DEFINE_CLASSINFO_DATA(_class, _helper, _flags)                     \
     1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(_class, _class, _helper, _flags)
     1: 
 41030: #define NS_DEFINE_CHROME_ONLY_CLASSINFO_DATA(_class, _helper, _flags)          \
 41030:   NS_DEFINE_CHROME_ONLY_CLASSINFO_DATA_WITH_NAME(_class, _class, _helper, \
 41030:                                                  _flags)
     1: 
 88011: namespace {
 88011: 
 88011: class IDBEventTargetSH : public nsEventTargetSH
 88011: {
 88011: protected:
 88011:   IDBEventTargetSH(nsDOMClassInfoData* aData) : nsEventTargetSH(aData)
 88011:   { }
 88011: 
 88011:   virtual ~IDBEventTargetSH()
 88011:   { }
 88011: 
 88011: public:
 88011:   NS_IMETHOD PreCreate(nsISupports *aNativeObj, JSContext *aCx,
 88011:                        JSObject *aGlobalObj, JSObject **aParentObj);
 88011: 
 88011:   static nsIClassInfo *doCreate(nsDOMClassInfoData *aData)
 88011:   {
 88011:     return new IDBEventTargetSH(aData);
 88011:   }
 88011: };
 88011: 
 88011: } // anonymous namespace
 88011: 
102303: typedef nsNewDOMBindingSH<nsICanvasRenderingContextInternal>
102303:   nsCanvasRenderingContextSH;
102303: 
102303: 
     1: // This list of NS_DEFINE_CLASSINFO_DATA macros is what gives the DOM
     1: // classes their correct behavior when used through XPConnect. The
     1: // arguments that are passed to NS_DEFINE_CLASSINFO_DATA are
     1: //
     1: // 1. Class name as it should appear in JavaScript, this name is also
     1: //    used to find the id of the class in nsDOMClassInfo
     1: //    (i.e. e<classname>_id)
     1: // 2. Scriptable helper class
     1: // 3. nsIClassInfo/nsIXPCScriptable flags (i.e. for GetScriptableFlags)
     1: 
     1: static nsDOMClassInfoData sClassInfoData[] = {
     1:   // Base classes
     1: 
     1:   // The Window class lets you QI into interfaces that are not in the
     1:   // flattened set (i.e. nsIXPCScriptable::CLASSINFO_INTERFACES_ONLY
     1:   // is not set), because of this make sure all scriptable interfaces
     1:   // that are implemented by nsGlobalWindow can securely be exposed
     1:   // to JS.
     1: 
     1: 
 55578:   NS_DEFINE_CLASSINFO_DATA(Window, nsWindowSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS |
 55578:                            WINDOW_SCRIPTABLE_FLAGS)
 47536: 
     1:   NS_DEFINE_CLASSINFO_DATA(Location, nsLocationSH,
 39005:                            (DOM_DEFAULT_SCRIPTABLE_FLAGS &
 39005:                             ~nsIXPCScriptable::ALLOW_PROP_MODS_TO_PROTOTYPE))
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(Navigator, nsNavigatorSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 77905:                            nsIXPCScriptable::WANT_PRECREATE |
 77905:                            nsIXPCScriptable::WANT_NEWRESOLVE)
     1:   NS_DEFINE_CLASSINFO_DATA(Plugin, nsPluginSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(PluginArray, nsPluginArraySH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(MimeType, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(MimeTypeArray, nsMimeTypeArraySH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(BarProp, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(History, nsHistorySH,
 56818:                            ARRAY_SCRIPTABLE_FLAGS |
 56818:                            nsIXPCScriptable::WANT_PRECREATE)
 72298:   NS_DEFINE_CLASSINFO_DATA(PerformanceTiming, nsDOMGenericSH,
 72298:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72298:   NS_DEFINE_CLASSINFO_DATA(PerformanceNavigation, nsDOMGenericSH,
 72298:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72298:   NS_DEFINE_CLASSINFO_DATA(Performance, nsDOMGenericSH,
 72298:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Screen, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
  7842:   NS_DEFINE_CLASSINFO_DATA(DOMPrototype, nsDOMConstructorSH,
  1312:                            DOM_BASE_SCRIPTABLE_FLAGS |
 60315:                            nsIXPCScriptable::WANT_PRECREATE |
 80512:                            nsIXPCScriptable::WANT_NEWRESOLVE |
  2389:                            nsIXPCScriptable::WANT_HASINSTANCE |
  2389:                            nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE)
  7842:   NS_DEFINE_CLASSINFO_DATA(DOMConstructor, nsDOMConstructorSH,
  1312:                            DOM_BASE_SCRIPTABLE_FLAGS |
 60315:                            nsIXPCScriptable::WANT_PRECREATE |
 80512:                            nsIXPCScriptable::WANT_NEWRESOLVE |
  1312:                            nsIXPCScriptable::WANT_HASINSTANCE |
  1312:                            nsIXPCScriptable::WANT_CALL |
  2389:                            nsIXPCScriptable::WANT_CONSTRUCT |
  2389:                            nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE)
     1: 
     1:   // Core classes
     1:   NS_DEFINE_CLASSINFO_DATA(XMLDocument, nsDocumentSH,
 12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(DocumentType, nsNodeSH,
     1:                            NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(DOMImplementation, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(DOMException, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 31383:   NS_DEFINE_CLASSINFO_DATA(DOMTokenList, nsDOMTokenListSH,
 31383:                            ARRAY_SCRIPTABLE_FLAGS)
 41438:   NS_DEFINE_CLASSINFO_DATA(DOMSettableTokenList, nsDOMTokenListSH,
 41438:                            ARRAY_SCRIPTABLE_FLAGS)
 48672:   NS_DEFINE_CLASSINFO_DATA(DocumentFragment, nsNodeSH, NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Element, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Attr, nsAttributeSH,
 20379:                            NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Text, nsNodeSH,
     1:                            NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Comment, nsNodeSH,
     1:                            NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CDATASection, nsNodeSH, NODE_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(ProcessingInstruction, nsNodeSH,
     1:                            NODE_SCRIPTABLE_FLAGS)
 91419:   NS_DEFINE_CLASSINFO_DATA(NodeList, nsDOMGenericSH,
 91419:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(NamedNodeMap, nsNamedNodeMapSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1: 
     1:   // Misc Core related classes
     1: 
     1:   // Event
     1:   NS_DEFINE_CLASSINFO_DATA(Event, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(MutationEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(UIEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(MouseEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 16604:   NS_DEFINE_CLASSINFO_DATA(MouseScrollEvent, nsDOMGenericSH,
 16604:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 18445:   NS_DEFINE_CLASSINFO_DATA(DragEvent, nsDOMGenericSH,
 18445:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(KeyboardEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 78621:   NS_DEFINE_CLASSINFO_DATA(CompositionEvent, nsDOMGenericSH,
 78621:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(PopupBlockedEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 97609:   // Device Light
 97609:   NS_DEFINE_CLASSINFO_DATA(DeviceLightEvent, nsDOMGenericSH,
 97609:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 97608:   // Device Proximity
 97608:   NS_DEFINE_CLASSINFO_DATA(DeviceProximityEvent, nsDOMGenericSH,
 97608:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 98668:   // User Proximity
 98668:   NS_DEFINE_CLASSINFO_DATA(UserProximityEvent, nsDOMGenericSH,
 98668:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72018:   // Device Orientation
 69154:   NS_DEFINE_CLASSINFO_DATA(DeviceOrientationEvent, nsDOMGenericSH,
 31738:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72018:   NS_DEFINE_CLASSINFO_DATA(DeviceMotionEvent, nsDOMGenericSH,
 72018:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72018:   NS_DEFINE_CLASSINFO_DATA(DeviceAcceleration, nsDOMGenericSH,
 72018:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 72018:   NS_DEFINE_CLASSINFO_DATA(DeviceRotationRate, nsDOMGenericSH,
 72018:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // Misc HTML classes
     1:   NS_DEFINE_CLASSINFO_DATA(HTMLDocument, nsHTMLDocumentSH,
 78692:                            DOCUMENT_SCRIPTABLE_FLAGS |
 78692:                            nsIXPCScriptable::WANT_GETPROPERTY)
 91419:   NS_DEFINE_CLASSINFO_DATA(HTMLOptionsCollection, nsDOMGenericSH,
 91419:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 91419:   NS_DEFINE_CLASSINFO_DATA(HTMLCollection, nsDOMGenericSH,
 91419:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
101092:   NS_DEFINE_CLASSINFO_DATA(HTMLPropertiesCollection, nsDOMGenericSH,
101092:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
101092:   NS_DEFINE_CLASSINFO_DATA(PropertyNodeList, 
101092:                            nsDOMGenericSH, 
101092:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // HTML element classes
 43860:   NS_DEFINE_CLASSINFO_DATA(HTMLElement, nsElementSH,
 43860:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLAnchorElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
  5405:   NS_DEFINE_CLASSINFO_DATA(HTMLAppletElement, nsHTMLPluginObjElementSH,
     1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLAreaElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLBRElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLBaseElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 77149:   NS_DEFINE_CLASSINFO_DATA(HTMLBodyElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLButtonElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 52362:   NS_DEFINE_CLASSINFO_DATA(HTMLDataListElement, nsElementSH,
 52362:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLDListElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLDirectoryElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLDivElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(HTMLEmbedElement, nsHTMLPluginObjElementSH,
     1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLFieldSetElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLFontElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(HTMLFormElement, nsHTMLFormElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS |
     1:                            nsIXPCScriptable::WANT_GETPROPERTY |
     1:                            nsIXPCScriptable::WANT_NEWENUMERATE)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLFrameElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLFrameSetElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLHRElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLHeadElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLHeadingElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLHtmlElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLIFrameElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLImageElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLInputElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLLIElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLLabelElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLLegendElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLLinkElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLMapElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLMenuElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 75019:   NS_DEFINE_CLASSINFO_DATA(HTMLMenuItemElement, nsElementSH,
 75019:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLMetaElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
101223:   NS_DEFINE_CLASSINFO_DATA(HTMLMeterElement, nsElementSH,
101223:                            ELEMENT_SCRIPTABLE_FLAGS)
 70902:   NS_DEFINE_CLASSINFO_DATA(HTMLModElement, nsElementSH,
 70902:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLOListElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(HTMLObjectElement, nsHTMLPluginObjElementSH,
     1:                            EXTERNAL_OBJ_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLOptGroupElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLOptionElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 41438:   NS_DEFINE_CLASSINFO_DATA(HTMLOutputElement, nsElementSH,
 41438:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLParagraphElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLParamElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLPreElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 69585:   NS_DEFINE_CLASSINFO_DATA(HTMLProgressElement, nsElementSH,
 69585:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLQuoteElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLScriptElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(HTMLSelectElement, nsHTMLSelectElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS |
 78692:                            nsIXPCScriptable::WANT_SETPROPERTY |
     1:                            nsIXPCScriptable::WANT_GETPROPERTY)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLSpanElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLStyleElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableCaptionElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableCellElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableColElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableRowElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTableSectionElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTextAreaElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLTitleElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLUListElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLUnknownElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
     1: 
 50904:   // Constraint Validation API classes
 50904:   NS_DEFINE_CLASSINFO_DATA(ValidityState, nsDOMGenericSH,
 50904:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 50904: 
     1:   // CSS classes
     1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSCharsetRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSImportRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSMediaRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSNameSpaceRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSRuleList, nsCSSRuleListSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSGroupRuleRuleList, nsCSSRuleListSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(MediaList, nsMediaListSH,
 41200:                            ARRAY_SCRIPTABLE_FLAGS)
 29480:   NS_DEFINE_CLASSINFO_DATA(StyleSheetList, nsStyleSheetListSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleSheet, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CSSStyleDeclaration, nsCSSStyleDeclSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(ROCSSPrimitiveValue, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // Range classes
     1:   NS_DEFINE_CLASSINFO_DATA(Range, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(Selection, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // XUL classes
     1: #ifdef MOZ_XUL
     1:   NS_DEFINE_CLASSINFO_DATA(XULDocument, nsDocumentSH,
 12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XULElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XULCommandDispatcher, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: #endif
     1:   NS_DEFINE_CLASSINFO_DATA(XULControllers, nsNonDOMObjectSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(BoxObject, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
 10311: #ifdef MOZ_XUL
     1:   NS_DEFINE_CLASSINFO_DATA(TreeSelection, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(TreeContentView, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1: #endif
     1: 
     1:   // Crypto classes
     1:   NS_DEFINE_CLASSINFO_DATA(Crypto, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CRMFObject, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // DOM Traversal classes
     1:   NS_DEFINE_CLASSINFO_DATA(TreeWalker, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // We are now trying to preserve binary compat in classinfo.  No
     1:   // more putting things in those categories up there.  New entries
     1:   // are to be added to the end of the list
     1:   NS_DEFINE_CLASSINFO_DATA(CSSRect, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // DOM Chrome Window class.
 55578:   NS_DEFINE_CLASSINFO_DATA(ChromeWindow, nsWindowSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS |
 55578:                            WINDOW_SCRIPTABLE_FLAGS)
 47536: 
     1:   NS_DEFINE_CLASSINFO_DATA(CSSRGBColor, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(CSSValueList, nsCSSValueListSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(ContentList, HTMLCollection,
 91419:                                      nsDOMGenericSH,
 91419:                                      DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XMLStylesheetProcessingInstruction, nsNodeSH,
     1:                            NODE_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(ImageDocument, nsHTMLDocumentSH,
 12678:                            DOCUMENT_SCRIPTABLE_FLAGS)
     1: 
     1: #ifdef MOZ_XUL
     1:   NS_DEFINE_CLASSINFO_DATA(XULTemplateBuilder, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XULTreeBuilder, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1: #endif
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(DOMStringList, nsStringListSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1: 
     1: #ifdef MOZ_XUL
     1:   NS_DEFINE_CLASSINFO_DATA(TreeColumn, nsDOMGenericSH,
     1:                            DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(TreeColumns, nsTreeColumnsSH,
     1:                            ARRAY_SCRIPTABLE_FLAGS)
     1: #endif
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(CSSMozDocumentRule, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(BeforeUnloadEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // SVG document
     1:   NS_DEFINE_CLASSINFO_DATA(SVGDocument, nsDocumentSH,
     1:                            DOCUMENT_SCRIPTABLE_FLAGS)
     1: 
     1:   // SVG element classes
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
 40733:   NS_DEFINE_CLASSINFO_DATA(SVGAltGlyphElement, nsElementSH,
 40733:                            ELEMENT_SCRIPTABLE_FLAGS)
 23697:   NS_DEFINE_CLASSINFO_DATA(SVGAnimateElement, nsElementSH,
 23697:                            ELEMENT_SCRIPTABLE_FLAGS)
 23931:   NS_DEFINE_CLASSINFO_DATA(SVGAnimateTransformElement, nsElementSH,
 23931:                            ELEMENT_SCRIPTABLE_FLAGS)
 41499:   NS_DEFINE_CLASSINFO_DATA(SVGAnimateMotionElement, nsElementSH,
 41499:                            ELEMENT_SCRIPTABLE_FLAGS)
 41507:   NS_DEFINE_CLASSINFO_DATA(SVGMpathElement, nsElementSH,
 41507:                            ELEMENT_SCRIPTABLE_FLAGS)
 23697:   NS_DEFINE_CLASSINFO_DATA(SVGSetElement, nsElementSH,
 23697:                            ELEMENT_SCRIPTABLE_FLAGS)
 48450:   NS_DEFINE_CLASSINFO_DATA(TimeEvent, nsDOMGenericSH,
 48450:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGCircleElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGClipPathElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGDefsElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGDescElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGEllipseElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEBlendElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
  9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEColorMatrixElement, nsElementSH,
  9790:                            ELEMENT_SCRIPTABLE_FLAGS)
  9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEComponentTransferElement, nsElementSH,
  9790:                            ELEMENT_SCRIPTABLE_FLAGS)
  9790:   NS_DEFINE_CLASSINFO_DATA(SVGFECompositeElement, nsElementSH,
  9790:                            ELEMENT_SCRIPTABLE_FLAGS)
  9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEConvolveMatrixElement, nsElementSH,
  9790:                            ELEMENT_SCRIPTABLE_FLAGS)
  4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEDiffuseLightingElement, nsElementSH,
  4029:                            ELEMENT_SCRIPTABLE_FLAGS)
  9790:   NS_DEFINE_CLASSINFO_DATA(SVGFEDisplacementMapElement, nsElementSH,
  9790:                            ELEMENT_SCRIPTABLE_FLAGS)
  4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEDistantLightElement, nsElementSH,
  4029:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFloodElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncAElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncBElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncGElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEFuncRElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEGaussianBlurElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
  9764:   NS_DEFINE_CLASSINFO_DATA(SVGFEImageElement, nsElementSH,
  9764:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMergeElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMergeNodeElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEMorphologyElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFEOffsetElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
  4029:   NS_DEFINE_CLASSINFO_DATA(SVGFEPointLightElement, nsElementSH,
  4029:                            ELEMENT_SCRIPTABLE_FLAGS)
  4029:   NS_DEFINE_CLASSINFO_DATA(SVGFESpecularLightingElement, nsElementSH,
  4029:                            ELEMENT_SCRIPTABLE_FLAGS)
  4029:   NS_DEFINE_CLASSINFO_DATA(SVGFESpotLightElement, nsElementSH,
  4029:                            ELEMENT_SCRIPTABLE_FLAGS)
  4057:   NS_DEFINE_CLASSINFO_DATA(SVGFETileElement, nsElementSH,
  4057:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFETurbulenceElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGFilterElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGGElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGImageElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGLinearGradientElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGLineElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGMarkerElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGMaskElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGMetadataElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPatternElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPolygonElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPolylineElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGRadialGradientElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGRectElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGScriptElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGStopElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGStyleElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGSVGElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGSwitchElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGSymbolElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGTextElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGTextPathElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGTitleElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGTSpanElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
 84222:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(SVGUnknownElement, SVGElement, nsElementSH,
 84222:                                      ELEMENT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGUseElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
 98726:   NS_DEFINE_CLASSINFO_DATA(SVGViewElement, nsElementSH,
 98726:                            ELEMENT_SCRIPTABLE_FLAGS)
     1: 
     1:   // other SVG classes
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAngle, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedAngle, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
  2863:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedBoolean, nsDOMGenericSH,
  2863:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedEnumeration, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedInteger, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedLength, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedLengthList, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedNumber, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)    
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedNumberList, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)    
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedPreserveAspectRatio, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedRect, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedString, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGAnimatedTransformList, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGLength, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67630:   NS_DEFINE_CLASSINFO_DATA(SVGLengthList, nsSVGLengthListSH,
 67630:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGMatrix, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGNumber, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67630:   NS_DEFINE_CLASSINFO_DATA(SVGNumberList, nsSVGNumberListSH,
 67630:                            ARRAY_SCRIPTABLE_FLAGS)    
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegArcAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegArcRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegClosePath, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicSmoothAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoCubicSmoothRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticSmoothAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegCurvetoQuadraticSmoothRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoHorizontalAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoHorizontalRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoVerticalAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegLinetoVerticalRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67630:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegList, nsSVGPathSegListSH,
 67630:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegMovetoAbs, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPathSegMovetoRel, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPoint, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67630:   NS_DEFINE_CLASSINFO_DATA(SVGPointList, nsSVGPointListSH,
 67630:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGPreserveAspectRatio, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGRect, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 89117:   NS_DEFINE_CLASSINFO_DATA(SVGStringList, nsSVGStringListSH,
 89117:                            ARRAY_SCRIPTABLE_FLAGS)    
     1:   NS_DEFINE_CLASSINFO_DATA(SVGTransform, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 78867:   NS_DEFINE_CLASSINFO_DATA(SVGTransformList, nsSVGTransformListSH,
 78867:                            ARRAY_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(SVGZoomEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLCanvasElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
102303:   NS_DEFINE_CLASSINFO_DATA(CanvasRenderingContext2D,
102303:                            nsCanvasRenderingContextSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CanvasGradient, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(CanvasPattern, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 15295:   NS_DEFINE_CLASSINFO_DATA(TextMetrics, nsDOMGenericSH,
 15295:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 93200:   NS_DEFINE_CLASSINFO_DATA(ImageData, nsDOMGenericSH,
 93200:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(SmartCardEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(PageTransitionEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(WindowUtils, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XSLTProcessor, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XPathEvaluator, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XPathExpression, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XPathNSResolver, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XPathResult, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   // WhatWG Storage
     1: 
     1:   // mrbkap says we don't need WANT_ADDPROPERTY on Storage objects
     1:   // since a call to addProperty() is always followed by a call to
     1:   // setProperty(), except in the case when a getter or setter is set
     1:   // for a property. But we don't care about getters or setters here.
 97754:   NS_DEFINE_CLASSINFO_DATA(StorageObsolete, nsDOMGenericSH,
 97754:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 26323: 
 28438:   NS_DEFINE_CLASSINFO_DATA(Storage, nsStorage2SH,
 26323:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 26323:                            nsIXPCScriptable::WANT_NEWRESOLVE |
 26323:                            nsIXPCScriptable::WANT_GETPROPERTY |
 26323:                            nsIXPCScriptable::WANT_SETPROPERTY |
 26323:                            nsIXPCScriptable::WANT_DELPROPERTY |
 26323:                            nsIXPCScriptable::DONT_ENUM_STATIC_PROPS |
 26323:                            nsIXPCScriptable::WANT_NEWENUMERATE)
     1:   NS_DEFINE_CLASSINFO_DATA(StorageItem, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(StorageEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(DOMParser, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1:   NS_DEFINE_CLASSINFO_DATA(XMLSerializer, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XMLHttpProgressEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 16664:   NS_DEFINE_CLASSINFO_DATA(XMLHttpRequest, nsEventTargetSH,
 21618:                            EVENTTARGET_SCRIPTABLE_FLAGS)
     1: 
 70324:   NS_DEFINE_CLASSINFO_DATA(EventSource, nsEventTargetSH,
 70324:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 70324: 
 12915:   NS_DEFINE_CLASSINFO_DATA(ClientRect, nsDOMGenericSH,
 12915:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 12915:   NS_DEFINE_CLASSINFO_DATA(ClientRectList, nsClientRectListSH,
  2014:                            ARRAY_SCRIPTABLE_FLAGS)
  2014: 
     1:   NS_DEFINE_CLASSINFO_DATA(SVGForeignObjectElement, nsElementSH,
     1:                            ELEMENT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(XULCommandEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
     1: 
     1:   NS_DEFINE_CLASSINFO_DATA(CommandEvent, nsDOMGenericSH,
     1:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
  1938:   NS_DEFINE_CLASSINFO_DATA(OfflineResourceList, nsOfflineResourceListSH,
  1938:                            ARRAY_SCRIPTABLE_FLAGS)
  3254: 
  3940:   NS_DEFINE_CLASSINFO_DATA(FileList, nsFileListSH,
  9323:                            ARRAY_SCRIPTABLE_FLAGS)
 55459:   NS_DEFINE_CLASSINFO_DATA(Blob, nsDOMGenericSH,
 55459:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
  3940:   NS_DEFINE_CLASSINFO_DATA(File, nsDOMGenericSH,
  3940:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 34695:   NS_DEFINE_CLASSINFO_DATA(FileReader, nsEventTargetSH,
 33620:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 58023:   NS_DEFINE_CLASSINFO_DATA(MozURLProperty, nsDOMGenericSH,
 58023:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 70187:   NS_DEFINE_CLASSINFO_DATA(MozBlobBuilder, nsDOMGenericSH,
 70187:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
  3940: 
 70158:   NS_DEFINE_CLASSINFO_DATA(DOMStringMap, nsDOMStringMapSH,
 70158:                            DOMSTRINGMAP_SCRIPTABLE_FLAGS)
 70158: 
 55578:   NS_DEFINE_CLASSINFO_DATA(ModalContentWindow, nsWindowSH,
  4040:                            DEFAULT_SCRIPTABLE_FLAGS |
 55578:                            WINDOW_SCRIPTABLE_FLAGS)
 47536: 
  8868:   NS_DEFINE_CLASSINFO_DATA(DataContainerEvent, nsDOMGenericSH,
  8868:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 10976: 
 10976:   NS_DEFINE_CLASSINFO_DATA(MessageEvent, nsDOMGenericSH,
 10976:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 15751: 
 99167:   NS_DEFINE_CLASSINFO_DATA(DeviceStorage, nsDOMGenericSH,
 99167:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 99167: 
 99167:   NS_DEFINE_CLASSINFO_DATA(DeviceStorageCursor, nsDOMGenericSH,
 99167:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 99167: 
 16677:   NS_DEFINE_CLASSINFO_DATA(GeoGeolocation, nsDOMGenericSH,
 16677:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 16677:   
 16677:   NS_DEFINE_CLASSINFO_DATA(GeoPosition, nsDOMGenericSH,
 16677:                            DOM_DEFAULT_SCRIPTABLE_FLAGS) 
 16677:   
 25529:   NS_DEFINE_CLASSINFO_DATA(GeoPositionCoords, nsDOMGenericSH,
 25529:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 25529: 
 16677:   NS_DEFINE_CLASSINFO_DATA(GeoPositionError, nsDOMGenericSH,
 15958:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 15958: 
 82527:   NS_DEFINE_CLASSINFO_DATA(MozBatteryManager, nsDOMGenericSH,
 81318:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 81318: 
 89127:   NS_DEFINE_CLASSINFO_DATA(MozPowerManager, nsDOMGenericSH,
 89127:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 89127: 
 91709:   NS_DEFINE_CLASSINFO_DATA(MozWakeLock, nsDOMGenericSH,
 91709:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 91709: 
 82755:   NS_DEFINE_CLASSINFO_DATA(MozSmsManager, nsDOMGenericSH,
 82755:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 82755: 
 82763:   NS_DEFINE_CLASSINFO_DATA(MozSmsMessage, nsDOMGenericSH,
 82763:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 82763: 
 82764:   NS_DEFINE_CLASSINFO_DATA(MozSmsEvent, nsDOMGenericSH,
 82764:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 82764: 
 87526:   NS_DEFINE_CLASSINFO_DATA(MozSmsRequest, nsDOMGenericSH,
 87526:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 87526: 
 87539:   NS_DEFINE_CLASSINFO_DATA(MozSmsFilter, nsDOMGenericSH,
 87539:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 87539: 
 87543:   NS_DEFINE_CLASSINFO_DATA(MozSmsCursor, nsDOMGenericSH,
 87543:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 87543: 
 87557:   NS_DEFINE_CLASSINFO_DATA(MozConnection, nsDOMGenericSH,
 87557:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 87557: 
 95744:   NS_DEFINE_CLASSINFO_DATA(MozMobileConnection, nsDOMGenericSH,
 95744:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 95744: 
101616:   NS_DEFINE_CLASSINFO_DATA(USSDReceivedEvent, nsDOMGenericSH,
101616:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
101616: 
 16545:   NS_DEFINE_CLASSINFO_DATA(CSSFontFaceRule, nsDOMGenericSH,
 16545:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 16545:   NS_DEFINE_CLASSINFO_DATA(CSSFontFaceStyleDecl, nsCSSStyleDeclSH,
 16545:                            ARRAY_SCRIPTABLE_FLAGS)
 16545: 
 43458: #if defined(MOZ_MEDIA)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLVideoElement, nsElementSH,
 34226:                            ELEMENT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLSourceElement, nsElementSH,
 15751:                            ELEMENT_SCRIPTABLE_FLAGS)
 51394:   NS_DEFINE_CLASSINFO_DATA(MediaError, nsDOMGenericSH,
 16665:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 34226:   NS_DEFINE_CLASSINFO_DATA(HTMLAudioElement, nsElementSH,
 16665:                            ELEMENT_SCRIPTABLE_FLAGS)
 51394:   NS_DEFINE_CLASSINFO_DATA(TimeRanges, nsDOMGenericSH,
 48902:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 97200:   NS_DEFINE_CLASSINFO_DATA(MediaStream, nsDOMGenericSH,
 97200:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 43458: #endif
 16665: 
 15751:   NS_DEFINE_CLASSINFO_DATA(ProgressEvent, nsDOMGenericSH,
 15751:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 16665: 
 16665:   NS_DEFINE_CLASSINFO_DATA(XMLHttpRequestUpload, nsEventTargetSH,
 21618:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 16103: 
 16103:   // DOM Traversal NodeIterator class  
 16103:   NS_DEFINE_CLASSINFO_DATA(NodeIterator, nsDOMGenericSH,
 16103:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 18445: 
 18445:   // data transfer for drag and drop
 18445:   NS_DEFINE_CLASSINFO_DATA(DataTransfer, nsDOMGenericSH,
 18445:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 18445: 
 19380:   NS_DEFINE_CLASSINFO_DATA(NotifyPaintEvent, nsDOMGenericSH,
 19380:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 20793: 
 51477:   NS_DEFINE_CLASSINFO_DATA(NotifyAudioAvailableEvent, nsDOMGenericSH,
 51477:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 51477: 
 20793:   NS_DEFINE_CLASSINFO_DATA(SimpleGestureEvent, nsDOMGenericSH,
 20793:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 21291: 
 48711:   NS_DEFINE_CLASSINFO_DATA(MozTouchEvent, nsDOMGenericSH,
 48711:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 21291:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(MathMLElement, Element, nsElementSH,
 21291:                                      ELEMENT_SCRIPTABLE_FLAGS)
 21376: 
 59543:   NS_DEFINE_CLASSINFO_DATA(WebGLRenderingContext, nsWebGLViewportHandlerSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLBuffer, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLTexture, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLProgram, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLShader, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLFramebuffer, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32195:   NS_DEFINE_CLASSINFO_DATA(WebGLRenderbuffer, nsDOMGenericSH,
 32195:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
102143:   NS_DEFINE_CLASSINFO_DATA(WebGLUniformLocation,
102143:                            nsNewDOMBindingNoWrapperCacheSH,
 43010:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 84804:   NS_DEFINE_CLASSINFO_DATA(WebGLShaderPrecisionFormat, nsDOMGenericSH,
 84804:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 51421:   NS_DEFINE_CLASSINFO_DATA(WebGLActiveInfo, nsDOMGenericSH,
 51421:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 94084:   NS_DEFINE_CLASSINFO_DATA(WebGLExtension, WebGLExtensionSH,
 94084:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 94084:                            nsIXPCScriptable::WANT_ADDPROPERTY)
 94084:   NS_DEFINE_CLASSINFO_DATA(WebGLExtensionStandardDerivatives, WebGLExtensionSH,
 94084:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 94084:                            nsIXPCScriptable::WANT_ADDPROPERTY)
 94084:   NS_DEFINE_CLASSINFO_DATA(WebGLExtensionTextureFilterAnisotropic, WebGLExtensionSH,
 94084:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 94084:                            nsIXPCScriptable::WANT_ADDPROPERTY)
 94084:   NS_DEFINE_CLASSINFO_DATA(WebGLExtensionLoseContext, WebGLExtensionSH,
 94084:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 94084:                            nsIXPCScriptable::WANT_ADDPROPERTY)
 99789:   NS_DEFINE_CLASSINFO_DATA(WebGLExtensionCompressedTextureS3TC, WebGLExtensionSH,
 98021:                            DOM_DEFAULT_SCRIPTABLE_FLAGS |
 98021:                            nsIXPCScriptable::WANT_ADDPROPERTY)
 32894: 
 32894:   NS_DEFINE_CLASSINFO_DATA(PaintRequest, nsDOMGenericSH,
 32894:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 32894:   NS_DEFINE_CLASSINFO_DATA(PaintRequestList, nsPaintRequestListSH,
 32894:                            ARRAY_SCRIPTABLE_FLAGS)
 33011: 
 33011:   NS_DEFINE_CLASSINFO_DATA(ScrollAreaEvent, nsDOMGenericSH,
 33011:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 37802:   NS_DEFINE_CLASSINFO_DATA(PopStateEvent, nsDOMGenericSH,
 37802:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 68729:   NS_DEFINE_CLASSINFO_DATA(HashChangeEvent, nsDOMGenericSH,
 68729:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 33903:   NS_DEFINE_CLASSINFO_DATA(EventListenerInfo, nsDOMGenericSH,
 33903:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 36618:   NS_DEFINE_CLASSINFO_DATA(TransitionEvent, nsDOMGenericSH,
 36618:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67986:   NS_DEFINE_CLASSINFO_DATA(AnimationEvent, nsDOMGenericSH,
 67986:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 80115:   NS_DEFINE_CLASSINFO_DATA(ContentFrameMessageManager, nsEventTargetSH,
 91575:                            DOM_DEFAULT_SCRIPTABLE_FLAGS | nsIXPCScriptable::IS_GLOBAL_OBJECT)
 38679: 
 38679:   NS_DEFINE_CLASSINFO_DATA(FormData, nsDOMGenericSH,
 38679:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 43833: 
 52355:   NS_DEFINE_CLASSINFO_DATA(DesktopNotification, nsDOMGenericSH,
 52355:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 52355:   NS_DEFINE_CLASSINFO_DATA(DesktopNotificationCenter, nsDOMGenericSH,
 52355:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 52355: 
 85012:   NS_DEFINE_CLASSINFO_DATA(WebSocket, nsEventTargetSH,
 43833:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 43834: 
 43834:   NS_DEFINE_CLASSINFO_DATA(CloseEvent, nsDOMGenericSH,
 43834:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 44204: 
 46347:   NS_DEFINE_CLASSINFO_DATA(IDBFactory, nsDOMGenericSH,
 44204:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
100151:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(IDBFileHandle, FileHandle, nsEventTargetSH,
100151:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 88011:   NS_DEFINE_CLASSINFO_DATA(IDBRequest, IDBEventTargetSH,
 88011:                            IDBEVENTTARGET_SCRIPTABLE_FLAGS)
 88011:   NS_DEFINE_CLASSINFO_DATA(IDBDatabase, IDBEventTargetSH,
 88011:                            IDBEVENTTARGET_SCRIPTABLE_FLAGS)
 46360:   NS_DEFINE_CLASSINFO_DATA(IDBObjectStore, nsDOMGenericSH,
 44204:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 88011:   NS_DEFINE_CLASSINFO_DATA(IDBTransaction, IDBEventTargetSH,
 88011:                            IDBEVENTTARGET_SCRIPTABLE_FLAGS)
 46362:   NS_DEFINE_CLASSINFO_DATA(IDBCursor, nsDOMGenericSH,
 44204:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 62345:   NS_DEFINE_CLASSINFO_DATA(IDBCursorWithValue, nsDOMGenericSH,
 62345:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 44204:   NS_DEFINE_CLASSINFO_DATA(IDBKeyRange, nsDOMGenericSH,
 44204:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 46361:   NS_DEFINE_CLASSINFO_DATA(IDBIndex, nsDOMGenericSH,
 44204:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 56112:   NS_DEFINE_CLASSINFO_DATA(IDBVersionChangeEvent, nsDOMGenericSH,
 56112:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 88011:   NS_DEFINE_CLASSINFO_DATA(IDBOpenDBRequest, IDBEventTargetSH,
 88011:                            IDBEVENTTARGET_SCRIPTABLE_FLAGS)
 63705: 
 69025:   NS_DEFINE_CLASSINFO_DATA(Touch, nsDOMGenericSH,
 68879:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 68879:   NS_DEFINE_CLASSINFO_DATA(TouchList, nsDOMTouchListSH,
 68879:                            ARRAY_SCRIPTABLE_FLAGS)
 68879:   NS_DEFINE_CLASSINFO_DATA(TouchEvent, nsDOMGenericSH,
 68879:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 68879: 
 67979:   NS_DEFINE_CLASSINFO_DATA(MozCSSKeyframeRule, nsDOMGenericSH,
 67979:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 67979:   NS_DEFINE_CLASSINFO_DATA(MozCSSKeyframesRule, nsDOMGenericSH,
 67979:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 68769: 
 68769:   NS_DEFINE_CLASSINFO_DATA(MediaQueryList, nsDOMGenericSH,
 68769:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 69676:   NS_DEFINE_CLASSINFO_DATA(CustomEvent, nsDOMGenericSH,
 69676:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 99169:   NS_DEFINE_CLASSINFO_DATA(MutationObserver, nsDOMGenericSH,
 94465:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 94465:   NS_DEFINE_CLASSINFO_DATA(MutationRecord, nsDOMGenericSH,
 94465:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 94104:   NS_DEFINE_CLASSINFO_DATA(MozSettingsEvent, nsDOMGenericSH,
 94104:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
101993:   NS_DEFINE_CLASSINFO_DATA(MozContactChangeEvent, nsDOMGenericSH,
101993:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
102039:   NS_DEFINE_CLASSINFO_DATA(MozApplicationEvent, nsDOMGenericSH,
102039:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 94104: 
 86882: #ifdef MOZ_B2G_RIL
102181:   NS_DEFINE_CLASSINFO_DATA(MozWifiStatusChangeEvent, nsDOMGenericSH,
102181:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
102181:   NS_DEFINE_CLASSINFO_DATA(MozWifiConnectionInfoEvent, nsDOMGenericSH,
102181:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 86882:   NS_DEFINE_CLASSINFO_DATA(Telephony, nsEventTargetSH,
 86882:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 86882:   NS_DEFINE_CLASSINFO_DATA(TelephonyCall, nsEventTargetSH,
 86882:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 86882:   NS_DEFINE_CLASSINFO_DATA(CallEvent, nsDOMGenericSH,
 86882:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 86882: #endif
 88012: 
 90498: #ifdef MOZ_B2G_BT
 99300:   NS_DEFINE_CLASSINFO_DATA(BluetoothManager, nsEventTargetSH,
 99300:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 91518:   NS_DEFINE_CLASSINFO_DATA(BluetoothAdapter, nsEventTargetSH,
 91518:                            EVENTTARGET_SCRIPTABLE_FLAGS)
 90498: #endif
 90498: 
 88012:   NS_DEFINE_CLASSINFO_DATA(DOMError, nsDOMGenericSH,
 88012:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 90885: 
 90885:   NS_DEFINE_CLASSINFO_DATA(DOMRequest, nsEventTargetSH,
 90885:                            EVENTTARGET_SCRIPTABLE_FLAGS)
101817:   NS_DEFINE_CLASSINFO_DATA(OpenWindowEventDetail, nsDOMGenericSH,
101817:                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
100151: 
100151:   NS_DEFINE_CLASSINFO_DATA_WITH_NAME(DOMFileHandle, FileHandle, nsEventTargetSH,
100151:                            EVENTTARGET_SCRIPTABLE_FLAGS)
100151:   NS_DEFINE_CLASSINFO_DATA(FileRequest, nsEventTargetSH,
100151:                            EVENTTARGET_SCRIPTABLE_FLAGS)
100151:   NS_DEFINE_CLASSINFO_DATA(LockedFile, nsEventTargetSH,
100151:                            EVENTTARGET_SCRIPTABLE_FLAGS)
     1: };
     1: 
 37802: // Objects that should be constructable through |new Name();|
     1: struct nsContractIDMapData
     1: {
     1:   PRInt32 mDOMClassInfoID;
     1:   const char *mContractID;
     1: };
     1: 
     1: #define NS_DEFINE_CONSTRUCTOR_DATA(_class, _contract_id)                      \
     1:   { eDOMClassInfo_##_class##_id, _contract_id },
     1: 
     1: static const nsContractIDMapData kConstructorMap[] =
     1: {
     1:   NS_DEFINE_CONSTRUCTOR_DATA(DOMParser, NS_DOMPARSER_CONTRACTID)
 34695:   NS_DEFINE_CONSTRUCTOR_DATA(FileReader, NS_FILEREADER_CONTRACTID)
 38679:   NS_DEFINE_CONSTRUCTOR_DATA(FormData, NS_FORMDATA_CONTRACTID)
     1:   NS_DEFINE_CONSTRUCTOR_DATA(XMLSerializer, NS_XMLSERIALIZER_CONTRACTID)
 85012:   NS_DEFINE_CONSTRUCTOR_DATA(WebSocket, NS_WEBSOCKET_CONTRACTID)
     1:   NS_DEFINE_CONSTRUCTOR_DATA(XPathEvaluator, NS_XPATH_EVALUATOR_CONTRACTID)
     1:   NS_DEFINE_CONSTRUCTOR_DATA(XSLTProcessor,
     1:                              "@mozilla.org/document-transformer;1?type=xslt")
 70324:   NS_DEFINE_CONSTRUCTOR_DATA(EventSource, NS_EVENTSOURCE_CONTRACTID)
 99169:   NS_DEFINE_CONSTRUCTOR_DATA(MutationObserver, NS_DOMMUTATIONOBSERVER_CONTRACTID)
     1: };
     1: 
 84566: #define NS_DEFINE_EVENT_CTOR(_class)                        \
 84566:   nsresult                                                  \
 84566:   NS_DOM##_class##Ctor(nsISupports** aInstancePtrResult)    \
 84566:   {                                                         \
 84566:     nsIDOMEvent* e = nsnull;                                \
 84566:     nsresult rv = NS_NewDOM##_class(&e, nsnull, nsnull);    \
 84566:     *aInstancePtrResult = e;                                \
 84566:     return rv;                                              \
 84566:   }
 84566: 
 84566: NS_DEFINE_EVENT_CTOR(Event)
 84566: NS_DEFINE_EVENT_CTOR(CustomEvent)
 84568: NS_DEFINE_EVENT_CTOR(PopStateEvent)
 84568: NS_DEFINE_EVENT_CTOR(HashChangeEvent)
 84568: NS_DEFINE_EVENT_CTOR(PageTransitionEvent)
 84568: NS_DEFINE_EVENT_CTOR(CloseEvent)
 94104: NS_DEFINE_EVENT_CTOR(MozSettingsEvent)
101993: NS_DEFINE_EVENT_CTOR(MozContactChangeEvent)
102039: NS_DEFINE_EVENT_CTOR(MozApplicationEvent)
 84569: NS_DEFINE_EVENT_CTOR(UIEvent)
 84569: NS_DEFINE_EVENT_CTOR(MouseEvent)
 97609: NS_DEFINE_EVENT_CTOR(DeviceLightEvent)
 97608: NS_DEFINE_EVENT_CTOR(DeviceProximityEvent)
 98668: NS_DEFINE_EVENT_CTOR(UserProximityEvent)
102181: #ifdef MOZ_B2G_RIL
102181: NS_DEFINE_EVENT_CTOR(MozWifiStatusChangeEvent)
102181: NS_DEFINE_EVENT_CTOR(MozWifiConnectionInfoEvent)
102181: #endif
 97608: 
 91788: nsresult
 91788: NS_DOMStorageEventCtor(nsISupports** aInstancePtrResult)
 91788: {
 91788:   nsDOMStorageEvent* e = new nsDOMStorageEvent();
 91788:   return CallQueryInterface(e, aInstancePtrResult);
 91788: }
 84566: 
101616: nsresult
101616: NS_XMLHttpRequestCtor(nsISupports** aInstancePtrResult)
101616: {
101616:   nsXMLHttpRequest* xhr = new nsXMLHttpRequest();
101616:   return CallQueryInterface(xhr, aInstancePtrResult);
101616: }
101616: 
 21376: struct nsConstructorFuncMapData
 21376: {
 21376:   PRInt32 mDOMClassInfoID;
 21376:   nsDOMConstructorFunc mConstructorFunc;
 21376: };
 21376: 
 21376: #define NS_DEFINE_CONSTRUCTOR_FUNC_DATA(_class, _func)                        \
 21376:   { eDOMClassInfo_##_class##_id, _func },
 21376: 
 84566: #define NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(_class)   \
 84566:   { eDOMClassInfo_##_class##_id, NS_DOM##_class##Ctor },
 84566: 
 21376: static const nsConstructorFuncMapData kConstructorFuncMap[] =
 21376: {
 92090:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(Blob, nsDOMMultipartFile::NewBlob)
 73691:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(File, nsDOMFileFile::NewFile)
 70187:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(MozBlobBuilder, NS_NewBlobBuilder)
 84566:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(Event)
 84566:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(CustomEvent)
 84568:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(PopStateEvent)
 84568:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(HashChangeEvent)
 84568:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(PageTransitionEvent)
 84568:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(CloseEvent)
 94104:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MozSettingsEvent)
101993:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MozContactChangeEvent)
102039:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MozApplicationEvent)
 84569:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(UIEvent)
 84569:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MouseEvent)
 97608:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(DeviceProximityEvent)
 98668:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(UserProximityEvent)
 97609:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(DeviceLightEvent)
 91788:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(StorageEvent)
102181: #ifdef MOZ_B2G_RIL
102181:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MozWifiStatusChangeEvent)
102181:   NS_DEFINE_EVENT_CONSTRUCTOR_FUNC_DATA(MozWifiConnectionInfoEvent)
102181: #endif
 87539:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(MozSmsFilter, sms::SmsFilter::NewSmsFilter)
101616:   NS_DEFINE_CONSTRUCTOR_FUNC_DATA(XMLHttpRequest, NS_XMLHttpRequestCtor)
 21376: };
 21376: 
     1: nsIXPConnect *nsDOMClassInfo::sXPConnect = nsnull;
     1: nsIScriptSecurityManager *nsDOMClassInfo::sSecMan = nsnull;
 79445: bool nsDOMClassInfo::sIsInitialized = false;
 79445: bool nsDOMClassInfo::sDisableDocumentAllSupport = false;
 79445: bool nsDOMClassInfo::sDisableGlobalScopePollutionSupport = false;
     1: 
     1: 
 48470: jsid nsDOMClassInfo::sParent_id          = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScrollbars_id      = JSID_VOID;
 48470: jsid nsDOMClassInfo::sLocation_id        = JSID_VOID;
 48470: jsid nsDOMClassInfo::sConstructor_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::s_content_id        = JSID_VOID;
 48470: jsid nsDOMClassInfo::sContent_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sMenubar_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sToolbar_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sLocationbar_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::sPersonalbar_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::sStatusbar_id       = JSID_VOID;
 48470: jsid nsDOMClassInfo::sDialogArguments_id = JSID_VOID;
 48470: jsid nsDOMClassInfo::sControllers_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::sLength_id          = JSID_VOID;
 48470: jsid nsDOMClassInfo::sInnerHeight_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::sInnerWidth_id      = JSID_VOID;
 48470: jsid nsDOMClassInfo::sOuterHeight_id     = JSID_VOID;
 48470: jsid nsDOMClassInfo::sOuterWidth_id      = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScreenX_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScreenY_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sStatus_id          = JSID_VOID;
 48470: jsid nsDOMClassInfo::sName_id            = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScrollX_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScrollY_id         = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScrollMaxX_id      = JSID_VOID;
 48470: jsid nsDOMClassInfo::sScrollMaxY_id      = JSID_VOID;
 48470: jsid nsDOMClassInfo::sItem_id            = JSID_VOID;
 48470: jsid nsDOMClassInfo::sNamedItem_id       = JSID_VOID;
 48470: jsid nsDOMClassInfo::sEnumerate_id       = JSID_VOID;
 48470: jsid nsDOMClassInfo::sNavigator_id       = JSID_VOID;
 48470: jsid nsDOMClassInfo::sDocument_id        = JSID_VOID;
 48470: jsid nsDOMClassInfo::sFrames_id          = JSID_VOID;
 48470: jsid nsDOMClassInfo::sSelf_id            = JSID_VOID;
 48470: jsid nsDOMClassInfo::sOpener_id          = JSID_VOID;
 48470: jsid nsDOMClassInfo::sAll_id             = JSID_VOID;
 48470: jsid nsDOMClassInfo::sTags_id            = JSID_VOID;
 48470: jsid nsDOMClassInfo::sAddEventListener_id= JSID_VOID;
 78615: jsid nsDOMClassInfo::sBaseURIObject_id   = JSID_VOID;
 78615: jsid nsDOMClassInfo::sNodePrincipal_id   = JSID_VOID;
 78615: jsid nsDOMClassInfo::sDocumentURIObject_id=JSID_VOID;
 55585: jsid nsDOMClassInfo::sWrappedJSObject_id = JSID_VOID;
 58898: jsid nsDOMClassInfo::sURL_id             = JSID_VOID;
 59555: jsid nsDOMClassInfo::sKeyPath_id         = JSID_VOID;
 59555: jsid nsDOMClassInfo::sAutoIncrement_id   = JSID_VOID;
 59555: jsid nsDOMClassInfo::sUnique_id          = JSID_VOID;
 83384: jsid nsDOMClassInfo::sMultiEntry_id      = JSID_VOID;
 77149: jsid nsDOMClassInfo::sOnload_id          = JSID_VOID;
 77149: jsid nsDOMClassInfo::sOnerror_id         = JSID_VOID;
 72657: 
 86293: static const JSClass *sObjectClass = nsnull;
 86293: 
 86293: /**
 86293:  * Set our JSClass pointer for the Object class
 86293:  */
 86293: static void
 86293: FindObjectClass(JSObject* aGlobalObject)
 86293: {
 86293:   NS_ASSERTION(!sObjectClass,
 86293:                "Double set of sObjectClass");
 86293:   JSObject *obj, *proto = aGlobalObject;
 86293:   do {
 86293:     obj = proto;
 86293:     proto = js::GetObjectProto(obj);
 86293:   } while (proto);
 86293: 
 86293:   sObjectClass = js::GetObjectJSClass(obj);
 86293: }
 86293: 
     1: static void
     1: PrintWarningOnConsole(JSContext *cx, const char *stringBundleProperty)
     1: {
 42314:   nsCOMPtr<nsIStringBundleService> stringService =
 42314:     mozilla::services::GetStringBundleService();
     1:   if (!stringService) {
     1:     return;
     1:   }
     1: 
     1:   nsCOMPtr<nsIStringBundle> bundle;
     1:   stringService->CreateBundle(kDOMStringBundleURL, getter_AddRefs(bundle));
     1:   if (!bundle) {
     1:     return;
     1:   }
     1: 
     1:   nsXPIDLString msg;
     1:   bundle->GetStringFromName(NS_ConvertASCIItoUTF16(stringBundleProperty).get(),
     1:                             getter_Copies(msg));
     1: 
     1:   if (msg.IsEmpty()) {
     1:     NS_ERROR("Failed to get strings from dom.properties!");
     1:     return;
     1:   }
     1: 
     1:   nsCOMPtr<nsIConsoleService> consoleService
 59512:     (do_GetService(NS_CONSOLESERVICE_CONTRACTID));
     1:   if (!consoleService) {
     1:     return;
     1:   }
     1: 
 86030:   nsCOMPtr<nsIScriptError> scriptError =
     1:     do_CreateInstance(NS_SCRIPTERROR_CONTRACTID);
     1:   if (!scriptError) {
     1:     return;
     1:   }
     1: 
 95518:   unsigned lineno = 0;
 95518:   JSScript *script;
     1:   nsAutoString sourcefile;
 95518: 
 95518:   if (JS_DescribeScriptedCaller(cx, &script, &lineno)) {
 95518:     if (const char *filename = ::JS_GetScriptFilename(cx, script)) {
     1:       CopyUTF8toUTF16(nsDependentCString(filename), sourcefile);
     1:     }
     1:   }
 59512: 
 59512:   nsresult rv = scriptError->InitWithWindowID(msg.get(),
     1:                                               sourcefile.get(),
     1:                                               EmptyString().get(),
     1:                                               lineno,
     1:                                               0, // column for error is not available
     1:                                               nsIScriptError::warningFlag,
 59512:                                               "DOM:HTML",
 77330:                                               nsJSUtils::GetCurrentlyRunningCodeInnerWindowID(cx));
 59512: 
     1:   if (NS_SUCCEEDED(rv)) {
 86030:     consoleService->LogMessage(scriptError);
     1:   }
     1: }
     1: 
 48470: static inline JSString *
 48470: IdToString(JSContext *cx, jsid id)
 48470: {
 48470:   if (JSID_IS_STRING(id))
 48470:     return JSID_TO_STRING(id);
 48470:   jsval idval;
 48470:   if (!::JS_IdToValue(cx, id, &idval))
 48470:     return nsnull;
 48470:   return JS_ValueToString(cx, idval);
     1: }
     1: 
 67679: static inline nsresult
 67679: WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
 67679:            nsWrapperCache *cache, const nsIID* aIID, jsval *vp,
 79445:            nsIXPConnectJSObjectHolder** aHolder, bool aAllowWrapping)
 67679: {
 67679:   if (!native) {
 67679:     NS_ASSERTION(!aHolder || !*aHolder, "*aHolder should be null!");
 67679: 
 67679:     *vp = JSVAL_NULL;
 67679: 
 67679:     return NS_OK;
 67679:   }
 67679: 
 67679:   JSObject *wrapper = xpc_FastGetCachedWrapper(cache, scope, vp);
 67679:   if (wrapper) {
 67679:     return NS_OK;
 67679:   }
 67679: 
 67679:   return nsDOMClassInfo::XPConnect()->WrapNativeToJSVal(cx, scope, native,
 67679:                                                         cache, aIID,
 67679:                                                         aAllowWrapping, vp,
 67679:                                                         aHolder);
 67679: }
 67679: 
 67679: static inline nsresult
 67679: WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
 79445:            const nsIID* aIID, bool aAllowWrapping, jsval *vp,
 67679:            // If non-null aHolder will keep the jsval alive
 67679:            // while there's a ref to it
 67679:            nsIXPConnectJSObjectHolder** aHolder = nsnull)
 67679: {
 67679:   return WrapNative(cx, scope, native, nsnull, aIID, vp, aHolder,
 67679:                     aAllowWrapping);
 67679: }
 67679: 
 67679: // Same as the WrapNative above, but use these if aIID is nsISupports' IID.
 67679: static inline nsresult
 67679: WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
 79445:            bool aAllowWrapping, jsval *vp,
 67679:            // If non-null aHolder will keep the jsval alive
 67679:            // while there's a ref to it
 67679:            nsIXPConnectJSObjectHolder** aHolder = nsnull)
 67679: {
 67679:   return WrapNative(cx, scope, native, nsnull, nsnull, vp, aHolder,
 67679:                     aAllowWrapping);
 67679: }
 67679: 
 67679: static inline nsresult
 67679: WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
 79445:            nsWrapperCache *cache, bool aAllowWrapping, jsval *vp,
 67679:            // If non-null aHolder will keep the jsval alive
 67679:            // while there's a ref to it
 67679:            nsIXPConnectJSObjectHolder** aHolder = nsnull)
 67679: {
 67679:   return WrapNative(cx, scope, native, cache, nsnull, vp, aHolder,
 67679:                     aAllowWrapping);
 67679: }
 67679: 
 67679: // Used for cases where PreCreate needs to wrap the native parent, and the
 67679: // native parent is likely to have been wrapped already.  |native| must
 67679: // implement nsWrapperCache, and nativeWrapperCache must be |native|'s
 67679: // nsWrapperCache.
 67679: static inline nsresult
 67679: WrapNativeParent(JSContext *cx, JSObject *scope, nsISupports *native,
102303:                  nsWrapperCache *nativeWrapperCache, JSObject **parentObj)
 67679: {
 67679:   // In the common case, |native| is a wrapper cache with an existing wrapper
 67679: #ifdef DEBUG
 67679:   nsWrapperCache* cache = nsnull;
 67679:   CallQueryInterface(native, &cache);
 67679:   NS_PRECONDITION(nativeWrapperCache &&
 67679:                   cache == nativeWrapperCache, "What happened here?");
 67679: #endif
 67679:   
 67679:   JSObject* obj = nativeWrapperCache->GetWrapper();
 67679:   if (obj) {
 67679: #ifdef DEBUG
 67679:     jsval debugVal;
 80486:     nsresult rv = WrapNative(cx, scope, native, nativeWrapperCache, false,
 67679:                              &debugVal);
 67679:     NS_ASSERTION(NS_SUCCEEDED(rv) && JSVAL_TO_OBJECT(debugVal) == obj,
 67679:                  "Unexpected object in nsWrapperCache");
 67679: #endif
 67679:     *parentObj = obj;
 67679:     return NS_OK;
 67679:   }
 67679: 
 67679:   jsval v;
 80486:   nsresult rv = WrapNative(cx, scope, native, nativeWrapperCache, false, &v);
 67679:   NS_ENSURE_SUCCESS(rv, rv);
 67679:   *parentObj = JSVAL_TO_OBJECT(v);
 67679:   return NS_OK;
 67679: }
 67679: 
102303: template<class P>
102303: static inline nsresult
102303: WrapNativeParent(JSContext *cx, JSObject *scope, P *parent,
102303:                  JSObject **parentObj)
102303: {
102303:   return WrapNativeParent(cx, scope, ToSupports(parent), parent, parentObj);
102303: }
102303: 
 97123: // Helper to handle torn-down inner windows.
 97123: static inline nsresult
 97123: SetParentToWindow(nsGlobalWindow *win, JSObject **parent)
 97123: {
 97123:   MOZ_ASSERT(win);
 97123:   MOZ_ASSERT(win->IsInnerWindow());
 97123:   *parent = win->FastGetGlobalJSObject();
 97123: 
 97123:   if (MOZ_UNLIKELY(!*parent)) {
 97123:     // The only known case where this can happen is when the inner window has
 97123:     // been torn down. See bug 691178 comment 11.
 97123:     MOZ_ASSERT(win->IsClosedOrClosing());
 97123:     return NS_ERROR_FAILURE;
 97123:   }
 97123:   return NS_OK;
 97123: }
 97123: 
     1: // static
 39924: 
 39924: nsISupports *
 39924: nsDOMClassInfo::GetNative(nsIXPConnectWrappedNative *wrapper, JSObject *obj)
 39924: {
 79734:   return wrapper ? wrapper->Native() : static_cast<nsISupports*>(js::GetObjectPrivate(obj));
 39924: }
 39924: 
     1: nsresult
     1: nsDOMClassInfo::DefineStaticJSVals(JSContext *cx)
     1: {
 48470: #define SET_JSID_TO_STRING(_id, _cx, _str)                                    \
 48470:   if (JSString *str = ::JS_InternString(_cx, _str))                           \
 70270:       _id = INTERNED_STRING_TO_JSID(_cx, str);                                \
 48470:   else                                                                        \
 48470:       return NS_ERROR_OUT_OF_MEMORY;
     1: 
     1:   JSAutoRequest ar(cx);
     1: 
 48470:   SET_JSID_TO_STRING(sParent_id,          cx, "parent");
 48470:   SET_JSID_TO_STRING(sScrollbars_id,      cx, "scrollbars");
 48470:   SET_JSID_TO_STRING(sLocation_id,        cx, "location");
 48470:   SET_JSID_TO_STRING(sConstructor_id,     cx, "constructor");
 48470:   SET_JSID_TO_STRING(s_content_id,        cx, "_content");
 48470:   SET_JSID_TO_STRING(sContent_id,         cx, "content");
 48470:   SET_JSID_TO_STRING(sMenubar_id,         cx, "menubar");
 48470:   SET_JSID_TO_STRING(sToolbar_id,         cx, "toolbar");
 48470:   SET_JSID_TO_STRING(sLocationbar_id,     cx, "locationbar");
 48470:   SET_JSID_TO_STRING(sPersonalbar_id,     cx, "personalbar");
 48470:   SET_JSID_TO_STRING(sStatusbar_id,       cx, "statusbar");
 48470:   SET_JSID_TO_STRING(sDialogArguments_id, cx, "dialogArguments");
 48470:   SET_JSID_TO_STRING(sControllers_id,     cx, "controllers");
 48470:   SET_JSID_TO_STRING(sLength_id,          cx, "length");
 48470:   SET_JSID_TO_STRING(sInnerHeight_id,     cx, "innerHeight");
 48470:   SET_JSID_TO_STRING(sInnerWidth_id,      cx, "innerWidth");
 48470:   SET_JSID_TO_STRING(sOuterHeight_id,     cx, "outerHeight");
 48470:   SET_JSID_TO_STRING(sOuterWidth_id,      cx, "outerWidth");
 48470:   SET_JSID_TO_STRING(sScreenX_id,         cx, "screenX");
 48470:   SET_JSID_TO_STRING(sScreenY_id,         cx, "screenY");
 48470:   SET_JSID_TO_STRING(sStatus_id,          cx, "status");
 48470:   SET_JSID_TO_STRING(sName_id,            cx, "name");
 48470:   SET_JSID_TO_STRING(sScrollX_id,         cx, "scrollX");
 48470:   SET_JSID_TO_STRING(sScrollY_id,         cx, "scrollY");
 48470:   SET_JSID_TO_STRING(sScrollMaxX_id,      cx, "scrollMaxX");
 48470:   SET_JSID_TO_STRING(sScrollMaxY_id,      cx, "scrollMaxY");
 48470:   SET_JSID_TO_STRING(sItem_id,            cx, "item");
 48470:   SET_JSID_TO_STRING(sNamedItem_id,       cx, "namedItem");
 48470:   SET_JSID_TO_STRING(sEnumerate_id,       cx, "enumerateProperties");
 48470:   SET_JSID_TO_STRING(sNavigator_id,       cx, "navigator");
 48470:   SET_JSID_TO_STRING(sDocument_id,        cx, "document");
 48470:   SET_JSID_TO_STRING(sFrames_id,          cx, "frames");
 48470:   SET_JSID_TO_STRING(sSelf_id,            cx, "self");
 48470:   SET_JSID_TO_STRING(sOpener_id,          cx, "opener");
 48470:   SET_JSID_TO_STRING(sAll_id,             cx, "all");
 48470:   SET_JSID_TO_STRING(sTags_id,            cx, "tags");
 48470:   SET_JSID_TO_STRING(sAddEventListener_id,cx, "addEventListener");
 78615:   SET_JSID_TO_STRING(sBaseURIObject_id,   cx, "baseURIObject");
 78615:   SET_JSID_TO_STRING(sNodePrincipal_id,   cx, "nodePrincipal");
 78615:   SET_JSID_TO_STRING(sDocumentURIObject_id,cx,"documentURIObject");
 55585:   SET_JSID_TO_STRING(sWrappedJSObject_id, cx, "wrappedJSObject");
 58898:   SET_JSID_TO_STRING(sURL_id,             cx, "URL");
 59555:   SET_JSID_TO_STRING(sKeyPath_id,         cx, "keyPath");
 59555:   SET_JSID_TO_STRING(sAutoIncrement_id,   cx, "autoIncrement");
 59555:   SET_JSID_TO_STRING(sUnique_id,          cx, "unique");
 83384:   SET_JSID_TO_STRING(sMultiEntry_id,      cx, "multiEntry");
 77149:   SET_JSID_TO_STRING(sOnload_id,          cx, "onload");
 77149:   SET_JSID_TO_STRING(sOnerror_id,         cx, "onerror");
 72657: 
     1:   return NS_OK;
     1: }
     1: 
 47574: // static
 79445: bool
 47574: nsDOMClassInfo::ObjectIsNativeWrapper(JSContext* cx, JSObject* obj)
 47574: {
 62726:   return xpc::WrapperFactory::IsXrayWrapper(obj) &&
 62726:          !xpc::WrapperFactory::IsPartiallyTransparent(obj);
 47574: }
 47574: 
     1: nsDOMClassInfo::nsDOMClassInfo(nsDOMClassInfoData* aData) : mData(aData)
     1: {
     1: }
     1: 
     1: nsDOMClassInfo::~nsDOMClassInfo()
     1: {
     1:   if (IS_EXTERNAL(mData->mCachedClassInfo)) {
     1:     // Some compilers don't like delete'ing a const nsDOMClassInfo*
  3233:     nsDOMClassInfoData* data = const_cast<nsDOMClassInfoData*>(mData);
  3233:     delete static_cast<nsExternalDOMClassInfoData*>(data);
     1:   }
     1: }
     1: 
     1: NS_IMPL_ADDREF(nsDOMClassInfo)
     1: NS_IMPL_RELEASE(nsDOMClassInfo)
     1: 
     1: NS_INTERFACE_MAP_BEGIN(nsDOMClassInfo)
 40489:   if (aIID.Equals(NS_GET_IID(nsXPCClassInfo)))
 40489:     foundInterface = static_cast<nsIClassInfo*>(
 40489:                                     static_cast<nsXPCClassInfo*>(this));
 40489:   else
     1:   NS_INTERFACE_MAP_ENTRY(nsIXPCScriptable)
     1:   NS_INTERFACE_MAP_ENTRY(nsIClassInfo)
 40489:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIClassInfo)
     1: NS_INTERFACE_MAP_END
     1: 
     1: 
 26606: static JSClass sDOMConstructorProtoClass = {
     1:   "DOM Constructor.prototype", 0,
 62397:   JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
 30654:   JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, nsnull
     1: };
     1: 
     1: 
     1: static const char *
     1: CutPrefix(const char *aName) {
     1:   static const char prefix_nsIDOM[] = "nsIDOM";
     1:   static const char prefix_nsI[]    = "nsI";
     1: 
     1:   if (strncmp(aName, prefix_nsIDOM, sizeof(prefix_nsIDOM) - 1) == 0) {
     1:     return aName + sizeof(prefix_nsIDOM) - 1;
     1:   }
     1: 
     1:   if (strncmp(aName, prefix_nsI, sizeof(prefix_nsI) - 1) == 0) {
     1:     return aName + sizeof(prefix_nsI) - 1;
     1:   }
     1: 
     1:   return aName;
     1: }
     1: 
     1: // static
     1: nsresult
     1: nsDOMClassInfo::RegisterClassName(PRInt32 aClassInfoID)
     1: {
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
  7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
  7941: 
  7941:   nameSpaceManager->RegisterClassName(sClassInfoData[aClassInfoID].mName,
 29423:                                       aClassInfoID,
 41030:                                       sClassInfoData[aClassInfoID].mChromeOnly,
 68879:                                       sClassInfoData[aClassInfoID].mDisabled,
 29423:                                       &sClassInfoData[aClassInfoID].mNameUTF16);
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: // static
     1: nsresult
     1: nsDOMClassInfo::RegisterClassProtos(PRInt32 aClassInfoID)
     1: {
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
  7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
 79445:   bool found_old;
     1: 
     1:   const nsIID *primary_iid = sClassInfoData[aClassInfoID].mProtoChainInterface;
     1: 
     1:   if (!primary_iid || primary_iid == &NS_GET_IID(nsISupports)) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsCOMPtr<nsIInterfaceInfoManager>
     1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
     1:   NS_ENSURE_TRUE(iim, NS_ERROR_NOT_AVAILABLE);
     1: 
     1:   nsCOMPtr<nsIInterfaceInfo> if_info;
 79445:   bool first = true;
     1: 
     1:   iim->GetInfoForIID(primary_iid, getter_AddRefs(if_info));
     1: 
     1:   while (if_info) {
 10204:     const nsIID *iid = nsnull;
 10204: 
 10204:     if_info->GetIIDShared(&iid);
     1:     NS_ENSURE_TRUE(iid, NS_ERROR_UNEXPECTED);
     1: 
     1:     if (iid->Equals(NS_GET_IID(nsISupports))) {
     1:       break;
     1:     }
     1: 
 10204:     const char *name = nsnull;
 10204:     if_info->GetNameShared(&name);
 10204:     NS_ENSURE_TRUE(name, NS_ERROR_UNEXPECTED);
     1: 
  7941:     nameSpaceManager->RegisterClassProto(CutPrefix(name), iid, &found_old);
     1: 
     1:     if (first) {
 80486:       first = false;
     1:     } else if (found_old) {
     1:       break;
     1:     }
     1: 
     1:     nsCOMPtr<nsIInterfaceInfo> tmp(if_info);
     1:     tmp->GetParent(getter_AddRefs(if_info));
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: // static
     1: nsresult
     1: nsDOMClassInfo::RegisterExternalClasses()
     1: {
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
  7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
  7941: 
     1:   nsCOMPtr<nsIComponentRegistrar> registrar;
  7941:   nsresult rv = NS_GetComponentRegistrar(getter_AddRefs(registrar));
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   nsCOMPtr<nsICategoryManager> cm =
     1:     do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   nsCOMPtr<nsISimpleEnumerator> e;
     1:   rv = cm->EnumerateCategory(JAVASCRIPT_DOM_CLASS, getter_AddRefs(e));
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   nsXPIDLCString contractId;
     1:   nsCAutoString categoryEntry;
     1:   nsCOMPtr<nsISupports> entry;
     1: 
     1:   while (NS_SUCCEEDED(e->GetNext(getter_AddRefs(entry)))) {
     1:     nsCOMPtr<nsISupportsCString> category(do_QueryInterface(entry));
     1: 
     1:     if (!category) {
     1:       NS_WARNING("Category entry not an nsISupportsCString!");
     1:       continue;
     1:     }
     1: 
     1:     rv = category->GetData(categoryEntry);
     1: 
     1:     cm->GetCategoryEntry(JAVASCRIPT_DOM_CLASS, categoryEntry.get(),
     1:                          getter_Copies(contractId));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     nsCID *cid;
     1:     rv = registrar->ContractIDToCID(contractId, &cid);
     1:     if (NS_FAILED(rv)) {
     1:       NS_WARNING("Bad contract id registered with the script namespace manager");
     1:       continue;
     1:     }
     1: 
  7941:     rv = nameSpaceManager->RegisterExternalClassName(categoryEntry.get(), *cid);
     1:     nsMemory::Free(cid);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1:   }
     1: 
 80486:   return nameSpaceManager->RegisterExternalInterfaces(true);
     1: }
     1: 
 68879: #define _DOM_CLASSINFO_MAP_BEGIN(_class, _ifptr, _has_class_if, _disabled)    \
     1:   {                                                                           \
     1:     nsDOMClassInfoData &d = sClassInfoData[eDOMClassInfo_##_class##_id];      \
     1:     d.mProtoChainInterface = _ifptr;                                          \
     1:     d.mHasClassInterface = _has_class_if;                                     \
 40491:     d.mInterfacesBitmap = kDOMClassInfo_##_class##_interfaces;                \
 68879:     d.mDisabled = _disabled;                                                  \
     1:     static const nsIID *interface_list[] = {
     1: 
     1: #define DOM_CLASSINFO_MAP_BEGIN(_class, _interface)                           \
 80486:   _DOM_CLASSINFO_MAP_BEGIN(_class, &NS_GET_IID(_interface), true, false)
 68879: 
 68879: #define DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(_class, _interface, _disable)   \
 80486:   _DOM_CLASSINFO_MAP_BEGIN(_class, &NS_GET_IID(_interface), true, _disable)
     1:   
     1: #define DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(_class, _interface)               \
 80486:   _DOM_CLASSINFO_MAP_BEGIN(_class, &NS_GET_IID(_interface), false, false)
     1: 
     1: #define DOM_CLASSINFO_MAP_ENTRY(_if)                                          \
     1:       &NS_GET_IID(_if),
     1: 
 77145: #define DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(_if, _cond)                       \
 77145:       (_cond) ? &NS_GET_IID(_if) : nsnull,
 77145: 
     1: #define DOM_CLASSINFO_MAP_END                                                 \
     1:       nsnull                                                                  \
     1:     };                                                                        \
     1:                                                                               \
 77145:     /* Compact the interface list */                                          \
 80467:     size_t count = ArrayLength(interface_list);                               \
 77145:     /* count is the number of array entries, which is one greater than the */ \
 77145:     /* number of interfaces due to the terminating null */                    \
 77145:     for (size_t i = 0; i < count - 1; ++i) {                                  \
 77145:       if (!interface_list[i]) {                                               \
 84600:         /* We are moving the element at index i+1 and successors, */          \
 84600:         /* so we must move only count - (i+1) elements total. */              \
 77145:         memmove(&interface_list[i], &interface_list[i+1],                     \
 84600:                 sizeof(nsIID*) * (count - (i+1)));                            \
 77145:         /* Make sure to examine the new pointer we ended up with at this */   \
 77145:         /* slot, since it may be null too */                                  \
 77145:         --i;                                                                  \
 77145:         --count;                                                              \
 77145:       }                                                                       \
 77145:     }                                                                         \
 77145:                                                                               \
     1:     d.mInterfaces = interface_list;                                           \
     1:   }
     1: 
     1: #define DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES                                    \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentXBL)                                \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                                \
 16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)                             \
 77145:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)                               \
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)                           \
 77145:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMDocumentTouch,                  \
 77145:                                         nsDOMTouchEvent::PrefEnabled())
 16106: 
     1: 
     1: #define DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES                                \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementCSSInlineStyle)                      \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                                \
 77147:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)                               \
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)                           \
 77147:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,                \
 77147:                                         nsDOMTouchEvent::PrefEnabled())
     1: 
     1: #define DOM_CLASSINFO_EVENT_MAP_ENTRIES                                       \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEvent)                                      \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSEvent)                                    \
     1: 
     1: #define DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES                                    \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMUIEvent)                                    \
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1: 
 78694: #define DOM_CLASSINFO_WINDOW_MAP_ENTRIES(_support_indexed_db)                  \
 78694:   DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindow)                                        \
 78694:   DOM_CLASSINFO_MAP_ENTRY(nsIDOMJSWindow)                                      \
 78694:   DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                                   \
 78694:   DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)                              \
 78694:   DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMStorageIndexedDB,                  \
 78694:                                       _support_indexed_db)                     \
 78694:   DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMWindowPerformance,                 \
 78694:                                       nsGlobalWindow::HasPerformanceSupport()) \
 78694:   DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,                   \
 78694:                                       nsDOMTouchEvent::PrefEnabled())
 78694: 
     1: nsresult
     1: nsDOMClassInfo::Init()
     1: {
     1:   /* Errors that can trigger early returns are done first,
     1:      otherwise nsDOMClassInfo is left in a half inited state. */
     1:   NS_ASSERTION(sizeof(PtrBits) == sizeof(void*),
     1:                "BAD! You'll need to adjust the size of PtrBits to the size "
     1:                "of a pointer on your platform.");
     1: 
     1:   NS_ENSURE_TRUE(!sIsInitialized, NS_ERROR_ALREADY_INITIALIZED);
     1: 
  7941:   nsScriptNameSpaceManager *nameSpaceManager = nsJSRuntime::GetNameSpaceManager();
  7941:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
     1: 
     1:   nsresult rv = CallGetService(nsIXPConnect::GetCID(), &sXPConnect);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   nsCOMPtr<nsIXPCFunctionThisTranslator> old;
     1: 
     1:   nsCOMPtr<nsIXPCFunctionThisTranslator> elt = new nsEventListenerThisTranslator();
     1:   NS_ENSURE_TRUE(elt, NS_ERROR_OUT_OF_MEMORY);
     1: 
     1:   sXPConnect->SetFunctionThisTranslator(NS_GET_IID(nsIDOMEventListener),
     1:                                         elt, getter_AddRefs(old));
     1: 
 94465:   nsCOMPtr<nsIXPCFunctionThisTranslator> mctl = new nsMutationCallbackThisTranslator();
 94465:   NS_ENSURE_TRUE(elt, NS_ERROR_OUT_OF_MEMORY);
 94465: 
 94465:   sXPConnect->SetFunctionThisTranslator(NS_GET_IID(nsIMutationObserverCallback),
 94465:                                         mctl, getter_AddRefs(old));
 94465: 
     1:   nsCOMPtr<nsIScriptSecurityManager> sm =
     1:     do_GetService("@mozilla.org/scriptsecuritymanager;1", &rv);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   sSecMan = sm;
     1:   NS_ADDREF(sSecMan);
     1: 
     1:   nsCOMPtr<nsIThreadJSContextStack> stack =
     1:     do_GetService("@mozilla.org/js/xpc/ContextStack;1", &rv);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
 97744:   JSContext* cx = stack->GetSafeJSContext();
 97744:   NS_ENSURE_TRUE(cx, NS_ERROR_FAILURE);
     1: 
 60385:   DOM_CLASSINFO_MAP_BEGIN(Window, nsIDOMWindow)
 78694:     DOM_CLASSINFO_WINDOW_MAP_ENTRIES(nsGlobalWindow::HasIndexedDBSupport())
 77146:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(WindowUtils, nsIDOMWindowUtils)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWindowUtils)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Location, nsIDOMLocation)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLocation)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Navigator, nsIDOMNavigator)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigator)
 99167:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorDeviceStorage)
 16677:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorGeolocation)
 77146:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMNavigatorDesktopNotification,
 81313:                                         Navigator::HasDesktopNotificationSupport())
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientInformation)
 82527:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMMozNavigatorBattery,
 81374:                                         battery::BatteryManager::HasSupport())
 82754:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozNavigatorSms)
100179: #ifdef MOZ_MEDIA_NAVIGATOR
100179:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorUserMedia)
100179: #endif
 86882: #ifdef MOZ_B2G_RIL
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorTelephony)
 86882: #endif
 87558:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMMozNavigatorNetwork,
 87558:                                         network::IsAPIEnabled())
 90498: #ifdef MOZ_B2G_BT
 90498:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorBluetooth)
 90498: #endif
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Plugin, nsIDOMPlugin)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPlugin)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(PluginArray, nsIDOMPluginArray)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPluginArray)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(MimeType, nsIDOMMimeType)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMimeType)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(MimeTypeArray, nsIDOMMimeTypeArray)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMimeTypeArray)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(BarProp, nsIDOMBarProp)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBarProp)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(History, nsIDOMHistory)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHistory)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 72298:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(PerformanceTiming, nsIDOMPerformanceTiming,
 72298:                                         !nsGlobalWindow::HasPerformanceSupport())
 72298:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPerformanceTiming)
 72298:   DOM_CLASSINFO_MAP_END
 72298: 
 72298:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(PerformanceNavigation, nsIDOMPerformanceNavigation,
 72298:                                         !nsGlobalWindow::HasPerformanceSupport())
 72298:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPerformanceNavigation)
 72298:   DOM_CLASSINFO_MAP_END
 72298: 
 72298:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(Performance, nsIDOMPerformance,
 72298:                                         !nsGlobalWindow::HasPerformanceSupport())
 72298:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPerformance)
 72298:   DOM_CLASSINFO_MAP_END
 72298: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Screen, nsIDOMScreen)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMScreen)
 93484:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 26606:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(DOMPrototype, nsIDOMDOMConstructor)
  7842:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMConstructor)
  7842:   DOM_CLASSINFO_MAP_END
  7842: 
  7842:   DOM_CLASSINFO_MAP_BEGIN(DOMConstructor, nsIDOMDOMConstructor)
  7842:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMConstructor)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XMLDocument, nsIDOMXMLDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXMLDocument)
     1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(DocumentType, nsIDOMDocumentType)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentType)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(DOMImplementation, nsIDOMDOMImplementation)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMImplementation)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(DOMException, nsIDOMDOMException)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMException)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIException)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 31383:   DOM_CLASSINFO_MAP_BEGIN(DOMTokenList, nsIDOMDOMTokenList)
 31383:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMTokenList)
 31383:   DOM_CLASSINFO_MAP_END
 31383: 
 41438:   DOM_CLASSINFO_MAP_BEGIN(DOMSettableTokenList, nsIDOMDOMSettableTokenList)
 41438:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMSettableTokenList)
 41438:   DOM_CLASSINFO_MAP_END
 41438: 
     1:   DOM_CLASSINFO_MAP_BEGIN(DocumentFragment, nsIDOMDocumentFragment)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocumentFragment)
 16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
 28073:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Element, nsIDOMElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)
 77147:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,
 77147:                                         nsDOMTouchEvent::PrefEnabled())
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Attr, nsIDOMAttr)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAttr)
 28073:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Text, nsIDOMText)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMText)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Comment, nsIDOMComment)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMComment)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CDATASection, nsIDOMCDATASection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCDATASection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(ProcessingInstruction, nsIDOMProcessingInstruction)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProcessingInstruction)
 78459:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCharacterData)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(NodeList, nsIDOMNodeList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(NamedNodeMap, nsIDOMNamedNodeMap)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNamedNodeMap)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Event, nsIDOMEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(PopupBlockedEvent, nsIDOMPopupBlockedEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPopupBlockedEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 97609:   DOM_CLASSINFO_MAP_BEGIN(DeviceLightEvent, nsIDOMDeviceLightEvent)
 97609:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceLightEvent)
 97609:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 97609:   DOM_CLASSINFO_MAP_END
 97609: 
 97608:   DOM_CLASSINFO_MAP_BEGIN(DeviceProximityEvent, nsIDOMDeviceProximityEvent)
 97608:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceProximityEvent)
 97608:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 97608:   DOM_CLASSINFO_MAP_END
 97608: 
 98668:   DOM_CLASSINFO_MAP_BEGIN(UserProximityEvent, nsIDOMUserProximityEvent)
 98668:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMUserProximityEvent)
 98668:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 98668:   DOM_CLASSINFO_MAP_END
 98668: 
 69154:   DOM_CLASSINFO_MAP_BEGIN(DeviceOrientationEvent, nsIDOMDeviceOrientationEvent)
 69154:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceOrientationEvent)
 31738:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 31738:   DOM_CLASSINFO_MAP_END
 31738: 
 72018:   DOM_CLASSINFO_MAP_BEGIN(DeviceMotionEvent, nsIDOMDeviceMotionEvent)
 72018:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceMotionEvent)
 72018:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 72018:   DOM_CLASSINFO_MAP_END
 72018: 
 72018:   DOM_CLASSINFO_MAP_BEGIN(DeviceAcceleration, nsIDOMDeviceAcceleration)
 72018:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceAcceleration)
 72018:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 72018:   DOM_CLASSINFO_MAP_END
 72018: 
 72018:   DOM_CLASSINFO_MAP_BEGIN(DeviceRotationRate, nsIDOMDeviceRotationRate)
 72018:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceRotationRate)
 72018:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 72018:   DOM_CLASSINFO_MAP_END
 72018: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SmartCardEvent, nsIDOMSmartCardEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSmartCardEvent)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(PageTransitionEvent, nsIDOMPageTransitionEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPageTransitionEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(MutationEvent, nsIDOMMutationEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMutationEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(UIEvent, nsIDOMUIEvent)
     1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1:   
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(KeyboardEvent, nsIDOMKeyEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMKeyEvent)
     1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 78621:   DOM_CLASSINFO_MAP_BEGIN(CompositionEvent, nsIDOMCompositionEvent)
 78621:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCompositionEvent)
 78621:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 78621:   DOM_CLASSINFO_MAP_END
 78621: 
     1:   DOM_CLASSINFO_MAP_BEGIN(MouseEvent, nsIDOMMouseEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
     1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 16604:   DOM_CLASSINFO_MAP_BEGIN(MouseScrollEvent, nsIDOMMouseScrollEvent)
 16604:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseScrollEvent)
 19150:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
 16604:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 16604:   DOM_CLASSINFO_MAP_END
 16604: 
 18445:   DOM_CLASSINFO_MAP_BEGIN(DragEvent, nsIDOMDragEvent)
 18445:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDragEvent)
 25058:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
 18445:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 18445:   DOM_CLASSINFO_MAP_END
 18445: 
 62760:   DOM_CLASSINFO_MAP_BEGIN(PopStateEvent, nsIDOMPopStateEvent)
 37802:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPopStateEvent)
 37802:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 37802:   DOM_CLASSINFO_MAP_END
 37802: 
 68729:   DOM_CLASSINFO_MAP_BEGIN(HashChangeEvent, nsIDOMHashChangeEvent)
 68729:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHashChangeEvent)
 69382:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 68729:   DOM_CLASSINFO_MAP_END
 68729: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDocument, nsIDOMHTMLDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDocument)
     1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptionsCollection, nsIDOMHTMLOptionsCollection)
 19259:     // Order is significant.  nsIDOMHTMLOptionsCollection.length shadows
 19259:     // nsIDOMHTMLCollection.length, which is readonly.
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptionsCollection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 39586:   DOM_CLASSINFO_MAP_BEGIN(HTMLCollection, nsIDOMHTMLCollection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
     1:   DOM_CLASSINFO_MAP_END
     1: 
101092:   DOM_CLASSINFO_MAP_BEGIN(HTMLPropertiesCollection, nsIDOMHTMLPropertiesCollection)
101092:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLPropertiesCollection)
101092:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
101092:   DOM_CLASSINFO_MAP_END
101092: 
101092:   DOM_CLASSINFO_MAP_BEGIN(PropertyNodeList, nsIDOMPropertyNodeList)
101092:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPropertyNodeList)
101092:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeList)
101092:   DOM_CLASSINFO_MAP_END
101092: 
 43860:   DOM_CLASSINFO_MAP_BEGIN(HTMLElement, nsIDOMHTMLElement)
 43860:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
 43860:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 43860:   DOM_CLASSINFO_MAP_END
 43860: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAnchorElement, nsIDOMHTMLAnchorElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAnchorElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAppletElement, nsIDOMHTMLAppletElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAppletElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLAreaElement, nsIDOMHTMLAreaElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAreaElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBRElement, nsIDOMHTMLBRElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBRElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBaseElement, nsIDOMHTMLBaseElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBaseElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLBodyElement, nsIDOMHTMLBodyElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLBodyElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLButtonElement, nsIDOMHTMLButtonElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLButtonElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 52362:   DOM_CLASSINFO_MAP_BEGIN(HTMLDataListElement, nsIDOMHTMLDataListElement)
 52362:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDataListElement)
 52362:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 52362:   DOM_CLASSINFO_MAP_END
 52362: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDListElement, nsIDOMHTMLDListElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDListElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDirectoryElement, nsIDOMHTMLDirectoryElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDirectoryElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLDivElement, nsIDOMHTMLDivElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDivElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLEmbedElement, nsIDOMHTMLEmbedElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLEmbedElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFieldSetElement, nsIDOMHTMLFieldSetElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFieldSetElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFontElement, nsIDOMHTMLFontElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFontElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFormElement, nsIDOMHTMLFormElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFormElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFrameElement, nsIDOMHTMLFrameElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFrameElement)
 87826:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozBrowserFrame)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLFrameSetElement, nsIDOMHTMLFrameSetElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLFrameSetElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHRElement, nsIDOMHTMLHRElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHRElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHeadElement, nsIDOMHTMLHeadElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHeadElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHeadingElement, nsIDOMHTMLHeadingElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHeadingElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLHtmlElement, nsIDOMHTMLHtmlElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLHtmlElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLIFrameElement, nsIDOMHTMLIFrameElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLIFrameElement)
 15382:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
 87826:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozBrowserFrame)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLImageElement, nsIDOMHTMLImageElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLImageElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLInputElement, nsIDOMHTMLInputElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLInputElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLIElement, nsIDOMHTMLLIElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLIElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLabelElement, nsIDOMHTMLLabelElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLabelElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLegendElement, nsIDOMHTMLLegendElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLegendElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLLinkElement, nsIDOMHTMLLinkElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLLinkElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMapElement, nsIDOMHTMLMapElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMapElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMenuElement, nsIDOMHTMLMenuElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMenuElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 75019:   DOM_CLASSINFO_MAP_BEGIN(HTMLMenuItemElement, nsIDOMHTMLMenuItemElement)
 75019:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMenuItemElement)
 75019:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 75019:   DOM_CLASSINFO_MAP_END
 75019: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLMetaElement, nsIDOMHTMLMetaElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMetaElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
101223:   DOM_CLASSINFO_MAP_BEGIN(HTMLMeterElement, nsIDOMHTMLMeterElement)
101223:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLMeterElement)
101223:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
101223:   DOM_CLASSINFO_MAP_END
101223: 
 70902:   DOM_CLASSINFO_MAP_BEGIN(HTMLModElement, nsIDOMHTMLModElement)
 70902:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLModElement)
 70902:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 70902:   DOM_CLASSINFO_MAP_END
 70902: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOListElement, nsIDOMHTMLOListElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOListElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLObjectElement, nsIDOMHTMLObjectElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLObjectElement)
 15382:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMGetSVGDocument)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptGroupElement, nsIDOMHTMLOptGroupElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptGroupElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLOptionElement, nsIDOMHTMLOptionElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOptionElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 41438:   DOM_CLASSINFO_MAP_BEGIN(HTMLOutputElement, nsIDOMHTMLOutputElement)
 41438:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLOutputElement)
 41438:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 41438:   DOM_CLASSINFO_MAP_END
 41438: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLParagraphElement, nsIDOMHTMLParagraphElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLParagraphElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLParamElement, nsIDOMHTMLParamElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLParamElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLPreElement, nsIDOMHTMLPreElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLPreElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 69585:   DOM_CLASSINFO_MAP_BEGIN(HTMLProgressElement, nsIDOMHTMLProgressElement)
 69585:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLProgressElement)
 69585:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 69585:   DOM_CLASSINFO_MAP_END
 69585: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLQuoteElement, nsIDOMHTMLQuoteElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLQuoteElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLScriptElement, nsIDOMHTMLScriptElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLScriptElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLSelectElement, nsIDOMHTMLSelectElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLSelectElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(HTMLSpanElement, nsIDOMHTMLElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLStyleElement, nsIDOMHTMLStyleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLStyleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableCaptionElement,
     1:                           nsIDOMHTMLTableCaptionElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableCaptionElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableCellElement, nsIDOMHTMLTableCellElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableCellElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableColElement, nsIDOMHTMLTableColElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableColElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableElement, nsIDOMHTMLTableElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableRowElement, nsIDOMHTMLTableRowElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableRowElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTableSectionElement,
     1:                           nsIDOMHTMLTableSectionElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTableSectionElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTextAreaElement, nsIDOMHTMLTextAreaElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTextAreaElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLTitleElement, nsIDOMHTMLTitleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLTitleElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLUListElement, nsIDOMHTMLUListElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLUListElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 63959:   DOM_CLASSINFO_MAP_BEGIN(HTMLUnknownElement, nsIDOMHTMLUnknownElement)
 63959:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLUnknownElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 50904:   DOM_CLASSINFO_MAP_BEGIN(ValidityState, nsIDOMValidityState)
 50904:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMValidityState)
 50904:   DOM_CLASSINFO_MAP_END
 50904: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleRule, nsIDOMCSSStyleRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSCharsetRule, nsIDOMCSSCharsetRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSCharsetRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSImportRule, nsIDOMCSSImportRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSImportRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSMediaRule, nsIDOMCSSMediaRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSMediaRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSNameSpaceRule, nsIDOMCSSRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSRuleList, nsIDOMCSSRuleList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRuleList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSGroupRuleRuleList, nsIDOMCSSRuleList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSRuleList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(MediaList, nsIDOMMediaList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMediaList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(StyleSheetList, nsIDOMStyleSheetList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStyleSheetList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleSheet, nsIDOMCSSStyleSheet)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleSheet)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSStyleDeclaration, nsIDOMCSSStyleDeclaration)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleDeclaration)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSS2Properties)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ROCSSPrimitiveValue,
     1:                                       nsIDOMCSSPrimitiveValue)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSPrimitiveValue)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSValueList, nsIDOMCSSValueList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSValueList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSRect, nsIDOMRect)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRect)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSRGBColor, nsIDOMRGBColor)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRGBColor)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSRGBAColor)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Range, nsIDOMRange)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMRange)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 16103:   DOM_CLASSINFO_MAP_BEGIN(NodeIterator, nsIDOMNodeIterator)
 16103:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeIterator)
 16103:   DOM_CLASSINFO_MAP_END
 16103: 
     1:   DOM_CLASSINFO_MAP_BEGIN(TreeWalker, nsIDOMTreeWalker)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTreeWalker)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Selection, nsISelection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsISelection)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1: #ifdef MOZ_XUL
     1:   DOM_CLASSINFO_MAP_BEGIN(XULDocument, nsIDOMXULDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULDocument)
     1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XULElement, nsIDOMXULElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementCSSInlineStyle)
 16106:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)
 77147:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,
 77147:                                         nsDOMTouchEvent::PrefEnabled())
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XULCommandDispatcher, nsIDOMXULCommandDispatcher)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULCommandDispatcher)
     1:   DOM_CLASSINFO_MAP_END
     1: #endif
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XULControllers, nsIControllers)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIControllers)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(BoxObject, nsIBoxObject)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIBoxObject)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 10311: #ifdef MOZ_XUL
     1:   DOM_CLASSINFO_MAP_BEGIN(TreeSelection, nsITreeSelection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeSelection)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(TreeContentView, nsITreeContentView)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeContentView)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeView)
     1:   DOM_CLASSINFO_MAP_END
     1: #endif
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Crypto, nsIDOMCrypto)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCrypto)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CRMFObject, nsIDOMCRMFObject)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCRMFObject)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLStylesheetProcessingInstruction, nsIDOMProcessingInstruction)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProcessingInstruction)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ChromeWindow, nsIDOMWindow)
 80486:     DOM_CLASSINFO_WINDOW_MAP_ENTRIES(true)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMChromeWindow)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ContentList, nsIDOMHTMLCollection)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCollection)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(ImageDocument, nsIImageDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIImageDocument)
     1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1: #ifdef MOZ_XUL
     1:   DOM_CLASSINFO_MAP_BEGIN(XULTemplateBuilder, nsIXULTemplateBuilder)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIXULTemplateBuilder)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XULTreeBuilder, nsIXULTreeBuilder)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIXULTreeBuilder)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeView)
     1:   DOM_CLASSINFO_MAP_END
     1: #endif
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(DOMStringList, nsIDOMDOMStringList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMStringList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1: #ifdef MOZ_XUL
     1:   DOM_CLASSINFO_MAP_BEGIN(TreeColumn, nsITreeColumn)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeColumn)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(TreeColumns, nsITreeColumns)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsITreeColumns)
     1:   DOM_CLASSINFO_MAP_END
     1: #endif
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CSSMozDocumentRule, nsIDOMCSSMozDocumentRule)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSMozDocumentRule)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(BeforeUnloadEvent, nsIDOMBeforeUnloadEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBeforeUnloadEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1: #define DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES                           \
 37186:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)                          \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGElement)                           \
 77147:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)                         \
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)                     \
 77147:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,          \
 77147:                                         nsDOMTouchEvent::PrefEnabled())
     1: 
 90515: #define DOM_CLASSINFO_SVG_TEXT_CONTENT_ELEMENT_MAP_ENTRIES \
 90515:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextContentElement)   \
 90515:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)                \
 90515:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)             \
 90515:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 90515: 
     1: #define DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)       \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformable)   \
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)        \
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1: 
     1:   // XXX - the proto chain stuff is sort of hackish, because of the MI in
     1:   // the SVG interfaces. I doubt that extending the proto on one interface
     1:   // works properly on an element which inherits off multiple interfaces.
     1:   // Tough luck. - bbaetz
     1: 
     1:   // The SVG document
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGDocument, nsIDOMSVGDocument)
 19259:     // Order is significant.  nsIDOMDocument.title shadows
 19259:     // nsIDOMSVGDocument.title, which is readonly.
 19259:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDocument)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDocument)
     1:     DOM_CLASSINFO_DOCUMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   // SVG element classes
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAElement, nsIDOMSVGAElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 59652:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 40733:   DOM_CLASSINFO_MAP_BEGIN(SVGAltGlyphElement, nsIDOMSVGAltGlyphElement)
 40733:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextPositioningElement)
 40733:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
 90515:     DOM_CLASSINFO_SVG_TEXT_CONTENT_ELEMENT_MAP_ENTRIES
 40733:   DOM_CLASSINFO_MAP_END
 40733: 
 23697:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimateElement, nsIDOMSVGAnimateElement)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimationElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimateElement)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementTimeControl)
 23697:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 23697:   DOM_CLASSINFO_MAP_END
 23697: 
 23931:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimateTransformElement,
 23931:                           nsIDOMSVGAnimateTransformElement)
 23931:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimationElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 23931:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimateTransformElement)
 23931:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementTimeControl)
 23931:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 23931:   DOM_CLASSINFO_MAP_END
 23931: 
 41499:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimateMotionElement,
 41499:                           nsIDOMSVGAnimateMotionElement)
 41499:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimationElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 41499:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimateMotionElement)
 41499:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementTimeControl)
 41499:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 41499:   DOM_CLASSINFO_MAP_END
 41499: 
 23697:   DOM_CLASSINFO_MAP_BEGIN(SVGSetElement,
 23697:                           nsIDOMSVGSetElement)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimationElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSetElement)
 23697:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElementTimeControl)
 23697:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 23697:   DOM_CLASSINFO_MAP_END
 41507: 
 41507:   DOM_CLASSINFO_MAP_BEGIN(SVGMpathElement, nsIDOMSVGMpathElement)
 41507:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
 41507:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 41507:   DOM_CLASSINFO_MAP_END
 41507: 
 48450:   DOM_CLASSINFO_MAP_BEGIN(TimeEvent, nsIDOMTimeEvent)
 48450:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTimeEvent)
 48450:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 48450:   DOM_CLASSINFO_MAP_END
 23697: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGCircleElement, nsIDOMSVGCircleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGCircleElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGClipPathElement, nsIDOMSVGClipPathElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGClipPathElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
 86429:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGDefsElement, nsIDOMSVGDefsElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDefsElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGDescElement, nsIDOMSVGDescElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGDescElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGEllipseElement, nsIDOMSVGEllipseElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGEllipseElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEBlendElement, nsIDOMSVGFEBlendElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEBlendElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEColorMatrixElement, nsIDOMSVGFEColorMatrixElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEColorMatrixElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  9790:   DOM_CLASSINFO_MAP_END
  9790: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEComponentTransferElement, nsIDOMSVGFEComponentTransferElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEComponentTransferElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  9790:   DOM_CLASSINFO_MAP_END
  9790: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFECompositeElement, nsIDOMSVGFECompositeElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFECompositeElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  9790:   DOM_CLASSINFO_MAP_END
  9790: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEConvolveMatrixElement, nsIDOMSVGFEConvolveMatrixElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEConvolveMatrixElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  9790:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  9790:   DOM_CLASSINFO_MAP_END
  9790: 
  4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDiffuseLightingElement, nsIDOMSVGFEDiffuseLightingElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDiffuseLightingElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  4029:   DOM_CLASSINFO_MAP_END
  4029: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDisplacementMapElement, nsIDOMSVGFEDisplacementMapElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDisplacementMapElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
  9790:   DOM_CLASSINFO_MAP_BEGIN(SVGFEDistantLightElement, nsIDOMSVGFEDistantLightElement)
  9790:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEDistantLightElement)
  2863:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  2863:   DOM_CLASSINFO_MAP_END
  2863: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFloodElement, nsIDOMSVGFEFloodElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFloodElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncAElement, nsIDOMSVGFEFuncAElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncAElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncBElement, nsIDOMSVGFEFuncBElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncBElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncGElement, nsIDOMSVGFEFuncGElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncGElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEFuncRElement, nsIDOMSVGFEFuncRElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEFuncRElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEGaussianBlurElement, nsIDOMSVGFEGaussianBlurElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEGaussianBlurElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
  9764:   DOM_CLASSINFO_MAP_BEGIN(SVGFEImageElement, nsIDOMSVGFEImageElement)
  9779:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEImageElement)
  9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
  9764:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  9764:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  9764:   DOM_CLASSINFO_MAP_END
  9764: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMergeElement, nsIDOMSVGFEMergeElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMergeElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMorphologyElement, nsIDOMSVGFEMorphologyElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMorphologyElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEMergeNodeElement, nsIDOMSVGFEMergeNodeElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEMergeNodeElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFEOffsetElement, nsIDOMSVGFEOffsetElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEOffsetElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
  4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFEPointLightElement, nsIDOMSVGFEPointLightElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFEPointLightElement)
  4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  4029:   DOM_CLASSINFO_MAP_END
  4029: 
  4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFESpecularLightingElement, nsIDOMSVGFESpecularLightingElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFESpecularLightingElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  4029:   DOM_CLASSINFO_MAP_END
  4029: 
  4029:   DOM_CLASSINFO_MAP_BEGIN(SVGFESpotLightElement, nsIDOMSVGFESpotLightElement)
  4029:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFESpotLightElement)
  4029:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  4029:   DOM_CLASSINFO_MAP_END
  4029: 
  4057:   DOM_CLASSINFO_MAP_BEGIN(SVGFETileElement, nsIDOMSVGFETileElement)
  4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFETileElement)
  4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
  4057:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  4057:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
  4057:   DOM_CLASSINFO_MAP_END
  4057: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFETurbulenceElement, nsIDOMSVGFETurbulenceElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFETurbulenceElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterPrimitiveStandardAttributes)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGFilterElement, nsIDOMSVGFilterElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFilterElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 90515:   DOM_CLASSINFO_MAP_BEGIN(SVGForeignObjectElement, nsIDOMSVGForeignObjectElement)
 90515:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGForeignObjectElement)
 90515:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
 90515:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
 90515:   DOM_CLASSINFO_MAP_END
 90515: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGGElement, nsIDOMSVGGElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGImageElement, nsIDOMSVGImageElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGImageElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGLinearGradientElement, nsIDOMSVGLinearGradientElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGradientElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLinearGradientElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGLineElement, nsIDOMSVGLineElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLineElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGMarkerElement, nsIDOMSVGMarkerElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMarkerElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGMaskElement, nsIDOMSVGMaskElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMaskElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGMetadataElement, nsIDOMSVGMetadataElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMetadataElement)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathElement, nsIDOMSVGPathElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPathData)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPatternElement, nsIDOMSVGPatternElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPatternElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPolygonElement, nsIDOMSVGPolygonElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPolygonElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPoints)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPolylineElement, nsIDOMSVGPolylineElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPolylineElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPoints)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGRadialGradientElement, nsIDOMSVGRadialGradientElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGGradientElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRadialGradientElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
  5347:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUnitTypes)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGRectElement, nsIDOMSVGRectElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRectElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGScriptElement, nsIDOMSVGScriptElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGScriptElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGStopElement, nsIDOMSVGStopElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStopElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1:   
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGStyleElement, nsIDOMSVGStyleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStyleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLinkStyle)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGSVGElement, nsIDOMSVGSVGElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSVGElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLocatable)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomAndPan)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGSwitchElement, nsIDOMSVGSwitchElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSwitchElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGSymbolElement, nsIDOMSVGSymbolElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGSymbolElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTextElement, nsIDOMSVGTextElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextPositioningElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextContentElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTextPathElement, nsIDOMSVGTextPathElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
 90515:     DOM_CLASSINFO_SVG_TEXT_CONTENT_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTitleElement, nsIDOMSVGTitleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTitleElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStylable)
     1:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTSpanElement, nsIDOMSVGTSpanElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTextPositioningElement)
 90515:     DOM_CLASSINFO_SVG_TEXT_CONTENT_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 95811:   DOM_CLASSINFO_MAP_BEGIN(SVGUnknownElement, nsIDOMSVGElement)
 84222:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 84222:   DOM_CLASSINFO_MAP_END
 84222: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGUseElement, nsIDOMSVGUseElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGUseElement)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTests)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGURIReference)
     1:     DOM_CLASSINFO_SVG_GRAPHIC_ELEMENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 98726:   DOM_CLASSINFO_MAP_BEGIN(SVGViewElement, nsIDOMSVGViewElement)
 98726:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGFitToViewBox)
 98726:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomAndPan)
 98726:     DOM_CLASSINFO_SVG_ELEMENT_MAP_ENTRIES
 98726:   DOM_CLASSINFO_MAP_END
 98726: 
     1:   // other SVG classes
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAngle, nsIDOMSVGAngle)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAngle)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedAngle, nsIDOMSVGAnimatedAngle)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedAngle)
     1:   DOM_CLASSINFO_MAP_END
     1: 
  2863:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedBoolean, nsIDOMSVGAnimatedBoolean)
  2863:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedBoolean)
  2863:   DOM_CLASSINFO_MAP_END
  2863: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedEnumeration, nsIDOMSVGAnimatedEnumeration)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedEnumeration)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedInteger, nsIDOMSVGAnimatedInteger)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedInteger)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedLength, nsIDOMSVGAnimatedLength)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedLength)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedLengthList, nsIDOMSVGAnimatedLengthList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedLengthList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedNumber, nsIDOMSVGAnimatedNumber)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedNumber)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedNumberList, nsIDOMSVGAnimatedNumberList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedNumberList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedPreserveAspectRatio, nsIDOMSVGAnimatedPreserveAspectRatio)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedPreserveAspectRatio)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedRect, nsIDOMSVGAnimatedRect)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedRect)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedString, nsIDOMSVGAnimatedString)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedString)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGAnimatedTransformList, nsIDOMSVGAnimatedTransformList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGAnimatedTransformList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGEvent, nsIDOMSVGEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGLength, nsIDOMSVGLength)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLength)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGLengthList, nsIDOMSVGLengthList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGLengthList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGMatrix, nsIDOMSVGMatrix)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGMatrix)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGNumber, nsIDOMSVGNumber)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGNumber)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGNumberList, nsIDOMSVGNumberList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGNumberList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegArcAbs, nsIDOMSVGPathSegArcAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegArcAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegArcRel, nsIDOMSVGPathSegArcRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegArcRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegClosePath, nsIDOMSVGPathSegClosePath)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegClosePath)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicAbs, nsIDOMSVGPathSegCurvetoCubicAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicRel, nsIDOMSVGPathSegCurvetoCubicRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicSmoothAbs, nsIDOMSVGPathSegCurvetoCubicSmoothAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicSmoothAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoCubicSmoothRel, nsIDOMSVGPathSegCurvetoCubicSmoothRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoCubicSmoothRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticAbs, nsIDOMSVGPathSegCurvetoQuadraticAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticRel, nsIDOMSVGPathSegCurvetoQuadraticRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticSmoothAbs, nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticSmoothAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegCurvetoQuadraticSmoothRel, nsIDOMSVGPathSegCurvetoQuadraticSmoothRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegCurvetoQuadraticSmoothRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoAbs, nsIDOMSVGPathSegLinetoAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoHorizontalAbs, nsIDOMSVGPathSegLinetoHorizontalAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoHorizontalAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoHorizontalRel, nsIDOMSVGPathSegLinetoHorizontalRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoHorizontalRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoRel, nsIDOMSVGPathSegLinetoRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoVerticalAbs, nsIDOMSVGPathSegLinetoVerticalAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoVerticalAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegLinetoVerticalRel, nsIDOMSVGPathSegLinetoVerticalRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegLinetoVerticalRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegList, nsIDOMSVGPathSegList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegMovetoAbs, nsIDOMSVGPathSegMovetoAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegMovetoAbs)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPathSegMovetoRel, nsIDOMSVGPathSegMovetoRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSegMovetoRel)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPathSeg)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPoint, nsIDOMSVGPoint)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPoint)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPointList, nsIDOMSVGPointList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPointList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGPreserveAspectRatio, nsIDOMSVGPreserveAspectRatio)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGPreserveAspectRatio)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGRect, nsIDOMSVGRect)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGRect)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 86429:   DOM_CLASSINFO_MAP_BEGIN(SVGStringList, nsIDOMSVGStringList)
 86429:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGStringList)
 86429:   DOM_CLASSINFO_MAP_END
 86429: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTransform, nsIDOMSVGTransform)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransform)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGTransformList, nsIDOMSVGTransformList)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGTransformList)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(SVGZoomEvent, nsIDOMSVGZoomEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSVGZoomEvent)
 34059:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(HTMLCanvasElement, nsIDOMHTMLCanvasElement)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLCanvasElement)
     1:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CanvasRenderingContext2D, nsIDOMCanvasRenderingContext2D)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasRenderingContext2D)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CanvasGradient, nsIDOMCanvasGradient)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasGradient)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CanvasPattern, nsIDOMCanvasPattern)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCanvasPattern)
     1:   DOM_CLASSINFO_MAP_END
 15295: 
 15295:   DOM_CLASSINFO_MAP_BEGIN(TextMetrics, nsIDOMTextMetrics)
 15295:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTextMetrics)
 15295:   DOM_CLASSINFO_MAP_END
     1: 
 93200:   DOM_CLASSINFO_MAP_BEGIN(ImageData, nsIDOMImageData)
 93200:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMImageData)
 93200:   DOM_CLASSINFO_MAP_END
 93200: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XSLTProcessor, nsIXSLTProcessor)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessor)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessorPrivate)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XPathEvaluator, nsIDOMXPathEvaluator)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XPathExpression, nsIDOMXPathExpression)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathExpression)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNSXPathExpression)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XPathNSResolver, nsIDOMXPathNSResolver)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathNSResolver)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XPathResult, nsIDOMXPathResult)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathResult)
     1:   DOM_CLASSINFO_MAP_END
     1: 
 28438:   DOM_CLASSINFO_MAP_BEGIN(StorageObsolete, nsIDOMStorageObsolete)
 28438:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageObsolete)
 28438:   DOM_CLASSINFO_MAP_END
 28438: 
     1:   DOM_CLASSINFO_MAP_BEGIN(Storage, nsIDOMStorage)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorage)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(StorageItem, nsIDOMStorageItem)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageItem)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMToString)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(StorageEvent, nsIDOMStorageEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorageEvent)
 91788:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(DOMParser, nsIDOMParser)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMParser)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMParserJS)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLSerializer, nsIDOMSerializer)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSerializer)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XMLHttpRequest, nsIXMLHttpRequest)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequest)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIJSXMLHttpRequest)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestEventTarget)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIInterfaceRequestor)
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(XMLHttpProgressEvent, nsIDOMEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLSProgressEvent)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProgressEvent)
 16665:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
 70324:   DOM_CLASSINFO_MAP_BEGIN(EventSource, nsIEventSource)
 70324:     DOM_CLASSINFO_MAP_ENTRY(nsIEventSource)
 70324:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 70324:   DOM_CLASSINFO_MAP_END
 70324: 
     1:   DOM_CLASSINFO_MAP_BEGIN(XULCommandEvent, nsIDOMXULCommandEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXULCommandEvent)
     1:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
     1:   DOM_CLASSINFO_MAP_BEGIN(CommandEvent, nsIDOMCommandEvent)
     1:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCommandEvent)
     1:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
     1:   DOM_CLASSINFO_MAP_END
     1: 
  1938:   DOM_CLASSINFO_MAP_BEGIN(OfflineResourceList, nsIDOMOfflineResourceList)
  1938:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMOfflineResourceList)
 15075:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
  1938:   DOM_CLASSINFO_MAP_END
  1938: 
 12915:   DOM_CLASSINFO_MAP_BEGIN(ClientRect, nsIDOMClientRect)
 12915:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientRect)
 12915:    DOM_CLASSINFO_MAP_END
 12915:  
 12915:   DOM_CLASSINFO_MAP_BEGIN(ClientRectList, nsIDOMClientRectList)
 12915:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientRectList)
  2014:   DOM_CLASSINFO_MAP_END
  2014: 
  3940:   DOM_CLASSINFO_MAP_BEGIN(FileList, nsIDOMFileList)
  3940:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileList)
  3940:   DOM_CLASSINFO_MAP_END
  3940: 
 55459:   DOM_CLASSINFO_MAP_BEGIN(Blob, nsIDOMBlob)
 55459:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBlob)
 55459:   DOM_CLASSINFO_MAP_END
 55459: 
  3940:   DOM_CLASSINFO_MAP_BEGIN(File, nsIDOMFile)
 55459:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBlob)
  3940:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFile)
  3940:   DOM_CLASSINFO_MAP_END
  3940: 
 34695:   DOM_CLASSINFO_MAP_BEGIN(FileReader, nsIDOMFileReader)
 34695:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileReader)
 33620:     DOM_CLASSINFO_MAP_ENTRY(nsIInterfaceRequestor)
 33620:   DOM_CLASSINFO_MAP_END
 33620: 
 58023:   DOM_CLASSINFO_MAP_BEGIN(MozURLProperty, nsIDOMMozURLProperty)
 58023:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozURLProperty)
 58023:   DOM_CLASSINFO_MAP_END
 58023: 
 70822:   DOM_CLASSINFO_MAP_BEGIN(MozBlobBuilder, nsIDOMMozBlobBuilder)
 70822:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozBlobBuilder)
 70187:   DOM_CLASSINFO_MAP_END
 70187: 
 70158:   DOM_CLASSINFO_MAP_BEGIN(DOMStringMap, nsIDOMDOMStringMap)
 70158:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMStringMap)
 70158:   DOM_CLASSINFO_MAP_END
 70158: 
  8679:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ModalContentWindow, nsIDOMWindow)
 78694:     DOM_CLASSINFO_WINDOW_MAP_ENTRIES(nsGlobalWindow::HasIndexedDBSupport())
  4040:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMModalContentWindow)
  4040:   DOM_CLASSINFO_MAP_END
  4040: 
  8868:   DOM_CLASSINFO_MAP_BEGIN(DataContainerEvent, nsIDOMDataContainerEvent)
  8868:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDataContainerEvent)
 37989:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
  8868:   DOM_CLASSINFO_MAP_END
  8868: 
 10976:   DOM_CLASSINFO_MAP_BEGIN(MessageEvent, nsIDOMMessageEvent)
 10976:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMessageEvent)
 10976:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 10976:   DOM_CLASSINFO_MAP_END
 10976: 
 99167:   DOM_CLASSINFO_MAP_BEGIN(DeviceStorage, nsIDOMDeviceStorage)
 99167:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceStorage)
 99167:   DOM_CLASSINFO_MAP_END
 99167: 
 99167:   DOM_CLASSINFO_MAP_BEGIN(DeviceStorageCursor, nsIDOMDeviceStorageCursor)
 99167:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDeviceStorageCursor)
 99167:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMRequest)
 99167:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 99167:   DOM_CLASSINFO_MAP_END
 99167: 
 16677:   DOM_CLASSINFO_MAP_BEGIN(GeoGeolocation, nsIDOMGeoGeolocation)
 16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoGeolocation)
 16677:   DOM_CLASSINFO_MAP_END
 16677: 
 16677:   DOM_CLASSINFO_MAP_BEGIN(GeoPosition, nsIDOMGeoPosition)
 16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoPosition)
 16677:   DOM_CLASSINFO_MAP_END
 16677: 
 25529:   DOM_CLASSINFO_MAP_BEGIN(GeoPositionCoords, nsIDOMGeoPositionCoords)
 25529:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoPositionCoords)
 25529:   DOM_CLASSINFO_MAP_END
 25529: 
 16677:   DOM_CLASSINFO_MAP_BEGIN(GeoPositionError, nsIDOMGeoPositionError)
 16677:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMGeoPositionError)
 15958:   DOM_CLASSINFO_MAP_END
 15958: 
 82527:   DOM_CLASSINFO_MAP_BEGIN(MozBatteryManager, nsIDOMMozBatteryManager)
 82527:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozBatteryManager)
 81318:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 81318:   DOM_CLASSINFO_MAP_END
 81318: 
 89127:   DOM_CLASSINFO_MAP_BEGIN(MozPowerManager, nsIDOMMozPowerManager)
 89127:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozPowerManager)
 89127:   DOM_CLASSINFO_MAP_END
 89127: 
 91709:   DOM_CLASSINFO_MAP_BEGIN(MozWakeLock, nsIDOMMozWakeLock)
 91709:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozWakeLock)
 91709:   DOM_CLASSINFO_MAP_END
 91709: 
 82755:   DOM_CLASSINFO_MAP_BEGIN(MozSmsManager, nsIDOMMozSmsManager)
 82755:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsManager)
 82755:   DOM_CLASSINFO_MAP_END
 82755: 
 82763:   DOM_CLASSINFO_MAP_BEGIN(MozSmsMessage, nsIDOMMozSmsMessage)
 82763:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsMessage)
 82763:   DOM_CLASSINFO_MAP_END
 82763: 
 82764:   DOM_CLASSINFO_MAP_BEGIN(MozSmsEvent, nsIDOMMozSmsEvent)
 82764:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsEvent)
 82764:      DOM_CLASSINFO_EVENT_MAP_ENTRIES
 82764:   DOM_CLASSINFO_MAP_END
 82764: 
 87526:   DOM_CLASSINFO_MAP_BEGIN(MozSmsRequest, nsIDOMMozSmsRequest)
 87526:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsRequest)
 87526:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 87526:   DOM_CLASSINFO_MAP_END
 87526: 
 87539:   DOM_CLASSINFO_MAP_BEGIN(MozSmsFilter, nsIDOMMozSmsFilter)
 87539:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsFilter)
 87539:   DOM_CLASSINFO_MAP_END
 87539: 
 87543:   DOM_CLASSINFO_MAP_BEGIN(MozSmsCursor, nsIDOMMozSmsCursor)
 87543:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSmsCursor)
 87543:   DOM_CLASSINFO_MAP_END
 87543: 
 87557:   DOM_CLASSINFO_MAP_BEGIN(MozConnection, nsIDOMMozConnection)
 87557:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozConnection)
 93486:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 87557:   DOM_CLASSINFO_MAP_END
 87557: 
 95744:   DOM_CLASSINFO_MAP_BEGIN(MozMobileConnection, nsIDOMMozMobileConnection)
 95744:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozMobileConnection)
 95744:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 95744:   DOM_CLASSINFO_MAP_END
 95744: 
101616:   DOM_CLASSINFO_MAP_BEGIN(USSDReceivedEvent, nsIDOMUSSDReceivedEvent)
101616:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMUSSDReceivedEvent)
101616:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEvent)
101616:   DOM_CLASSINFO_MAP_END
101616:  
 16545:   DOM_CLASSINFO_MAP_BEGIN(CSSFontFaceRule, nsIDOMCSSFontFaceRule)
 16545:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSFontFaceRule)
 16545:   DOM_CLASSINFO_MAP_END
 16545: 
 16545:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(CSSFontFaceStyleDecl,
 16545:                                       nsIDOMCSSStyleDeclaration)
 16545:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCSSStyleDeclaration)
 16545:   DOM_CLASSINFO_MAP_END
 16545: 
 43458: #if defined (MOZ_MEDIA)
 15751:   DOM_CLASSINFO_MAP_BEGIN(HTMLVideoElement, nsIDOMHTMLVideoElement)
 15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLVideoElement)
 15751:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 15751:   DOM_CLASSINFO_MAP_END
 15751: 
 15751:   DOM_CLASSINFO_MAP_BEGIN(HTMLSourceElement, nsIDOMHTMLSourceElement)
 15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLSourceElement)
 15751:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 15751:   DOM_CLASSINFO_MAP_END
 15751: 
 51394:   DOM_CLASSINFO_MAP_BEGIN(MediaError, nsIDOMMediaError)
 51394:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMediaError)
 16665:   DOM_CLASSINFO_MAP_END
 16665: 
 16665:   DOM_CLASSINFO_MAP_BEGIN(HTMLAudioElement, nsIDOMHTMLAudioElement)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMHTMLAudioElement)
 16665:     DOM_CLASSINFO_GENERIC_HTML_MAP_ENTRIES
 16665:   DOM_CLASSINFO_MAP_END
 48902: 
 51394:   DOM_CLASSINFO_MAP_BEGIN(TimeRanges, nsIDOMTimeRanges)
 51394:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTimeRanges)
 48902:   DOM_CLASSINFO_MAP_END  
 97200: 
 97200:   DOM_CLASSINFO_MAP_BEGIN(MediaStream, nsIDOMMediaStream)
 97200:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMediaStream)
 97200:   DOM_CLASSINFO_MAP_END
 43458: #endif
 18445: 
 15751:   DOM_CLASSINFO_MAP_BEGIN(ProgressEvent, nsIDOMProgressEvent)
 15751:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMProgressEvent)
 15751:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 15751:   DOM_CLASSINFO_MAP_END
 15751: 
 16665:   DOM_CLASSINFO_MAP_BEGIN(XMLHttpRequestUpload, nsIXMLHttpRequestUpload)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestEventTarget)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIXMLHttpRequestUpload)
 16665:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 16665:   DOM_CLASSINFO_MAP_END
 15751: 
 18445:   DOM_CLASSINFO_MAP_BEGIN(DataTransfer, nsIDOMDataTransfer)
 18445:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDataTransfer)
 18445:   DOM_CLASSINFO_MAP_END
 18445: 
 19380:   DOM_CLASSINFO_MAP_BEGIN(NotifyPaintEvent, nsIDOMNotifyPaintEvent)
 19380:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNotifyPaintEvent)
 19380:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 19380:   DOM_CLASSINFO_MAP_END
 19380: 
 51477:   DOM_CLASSINFO_MAP_BEGIN(NotifyAudioAvailableEvent, nsIDOMNotifyAudioAvailableEvent)
 51477:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNotifyAudioAvailableEvent)
 51477:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 51477:   DOM_CLASSINFO_MAP_END
 51477: 
 20793:   DOM_CLASSINFO_MAP_BEGIN(SimpleGestureEvent, nsIDOMSimpleGestureEvent)
 20793:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMSimpleGestureEvent)
 25058:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
 20793:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 20793:   DOM_CLASSINFO_MAP_END
 20793: 
 48711:   DOM_CLASSINFO_MAP_BEGIN(MozTouchEvent, nsIDOMMozTouchEvent)
 48711:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozTouchEvent)
 48711:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMouseEvent)
 48711:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 48711:   DOM_CLASSINFO_MAP_END
 48711: 
 21291:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(MathMLElement, nsIDOMElement)
 21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMElement)
 21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 21291:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNodeSelector)
 77149:     DOM_CLASSINFO_MAP_ENTRY(nsIInlineEventHandlers)
 77147:     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsITouchEventReceiver,
 77147:                                         nsDOMTouchEvent::PrefEnabled())
 21291:   DOM_CLASSINFO_MAP_END
 21291: 
 59162:   DOM_CLASSINFO_MAP_BEGIN(WebGLRenderingContext, nsIDOMWebGLRenderingContext)
 57635:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMWebGLRenderingContext)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLBuffer, nsIWebGLBuffer)
 32195:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLBuffer)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLTexture, nsIWebGLTexture)
 32195:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLTexture)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLProgram, nsIWebGLProgram)
 32195:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLProgram)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLShader, nsIWebGLShader)
 32195:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLShader)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLFramebuffer, nsIWebGLFramebuffer)
 32195:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLFramebuffer)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 32195:   DOM_CLASSINFO_MAP_BEGIN(WebGLRenderbuffer, nsIWebGLRenderbuffer)
 32195:      DOM_CLASSINFO_MAP_ENTRY(nsIWebGLRenderbuffer)
 32195:   DOM_CLASSINFO_MAP_END
 32195: 
 84804:   DOM_CLASSINFO_MAP_BEGIN(WebGLShaderPrecisionFormat, nsIWebGLShaderPrecisionFormat)
 84804:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLShaderPrecisionFormat)
 84804:   DOM_CLASSINFO_MAP_END
 84804: 
 43010:   DOM_CLASSINFO_MAP_BEGIN(WebGLUniformLocation, nsIWebGLUniformLocation)
 43010:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLUniformLocation)
 43010:   DOM_CLASSINFO_MAP_END
 43010: 
 51421:   DOM_CLASSINFO_MAP_BEGIN(WebGLActiveInfo, nsIWebGLActiveInfo)
 51421:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLActiveInfo)
 51421:   DOM_CLASSINFO_MAP_END
 51421: 
 70163:   DOM_CLASSINFO_MAP_BEGIN(WebGLExtension, nsIWebGLExtension)
 70163:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLExtension)
 70163:   DOM_CLASSINFO_MAP_END
 70163:   
 79603:   DOM_CLASSINFO_MAP_BEGIN(WebGLExtensionStandardDerivatives, nsIWebGLExtensionStandardDerivatives)
 79603:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLExtensionStandardDerivatives)
 79603:   DOM_CLASSINFO_MAP_END
 79603:   
 90800:   DOM_CLASSINFO_MAP_BEGIN(WebGLExtensionTextureFilterAnisotropic, nsIWebGLExtensionTextureFilterAnisotropic)
 90800:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLExtensionTextureFilterAnisotropic)
 90800:   DOM_CLASSINFO_MAP_END
 90800: 
 80903:   DOM_CLASSINFO_MAP_BEGIN(WebGLExtensionLoseContext, nsIWebGLExtensionLoseContext)
 80903:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLExtensionLoseContext)
 80903:   DOM_CLASSINFO_MAP_END
 80903: 
 98021:   DOM_CLASSINFO_MAP_BEGIN(WebGLExtensionCompressedTextureS3TC, nsIWebGLExtensionCompressedTextureS3TC)
 98021:     DOM_CLASSINFO_MAP_ENTRY(nsIWebGLExtensionCompressedTextureS3TC)
 98021:   DOM_CLASSINFO_MAP_END
 98021: 
 32894:   DOM_CLASSINFO_MAP_BEGIN(PaintRequest, nsIDOMPaintRequest)
 32894:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPaintRequest)
 32894:    DOM_CLASSINFO_MAP_END
 32894:  
 32894:   DOM_CLASSINFO_MAP_BEGIN(PaintRequestList, nsIDOMPaintRequestList)
 32894:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMPaintRequestList)
 32894:   DOM_CLASSINFO_MAP_END
 32894: 
 33011:   DOM_CLASSINFO_MAP_BEGIN(ScrollAreaEvent, nsIDOMScrollAreaEvent)
 33011:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMScrollAreaEvent)
 33011:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 33011:   DOM_CLASSINFO_MAP_END
 33011: 
 33903:   DOM_CLASSINFO_MAP_BEGIN(EventListenerInfo, nsIEventListenerInfo)
 33903:     DOM_CLASSINFO_MAP_ENTRY(nsIEventListenerInfo)
 33903:   DOM_CLASSINFO_MAP_END
 33903: 
 36618:   DOM_CLASSINFO_MAP_BEGIN(TransitionEvent, nsIDOMTransitionEvent)
 36618:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTransitionEvent)
 36618:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 36618:   DOM_CLASSINFO_MAP_END
 36618: 
 67986:   DOM_CLASSINFO_MAP_BEGIN(AnimationEvent, nsIDOMAnimationEvent)
 67986:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMAnimationEvent)
 67986:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 67986:   DOM_CLASSINFO_MAP_END
 67986: 
 42412:   DOM_CLASSINFO_MAP_BEGIN_NO_CLASS_IF(ContentFrameMessageManager, nsIContentFrameMessageManager)
 42412:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 42412:     DOM_CLASSINFO_MAP_ENTRY(nsIFrameMessageManager)
 51811:     DOM_CLASSINFO_MAP_ENTRY(nsISyncMessageSender)
 42412:     DOM_CLASSINFO_MAP_ENTRY(nsIContentFrameMessageManager)
 42412:   DOM_CLASSINFO_MAP_END
 42412: 
 38679:   DOM_CLASSINFO_MAP_BEGIN(FormData, nsIDOMFormData)
 38679:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFormData)
 38679:   DOM_CLASSINFO_MAP_END
 38679: 
 52355:   DOM_CLASSINFO_MAP_BEGIN(DesktopNotification, nsIDOMDesktopNotification)
 52355:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDesktopNotification)
 52355:   DOM_CLASSINFO_MAP_END
 52355: 
 52355:   DOM_CLASSINFO_MAP_BEGIN(DesktopNotificationCenter, nsIDOMDesktopNotificationCenter)
 52355:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDesktopNotificationCenter)
 52355:   DOM_CLASSINFO_MAP_END
 52355: 
 85012:   DOM_CLASSINFO_MAP_BEGIN(WebSocket, nsIWebSocket)
 85012:     DOM_CLASSINFO_MAP_ENTRY(nsIWebSocket)
 43833:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 43833:   DOM_CLASSINFO_MAP_END
 43833: 
 43834:   DOM_CLASSINFO_MAP_BEGIN(CloseEvent, nsIDOMCloseEvent)
 43834:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCloseEvent)
 43834:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 43834:   DOM_CLASSINFO_MAP_END
 43834: 
 46347:   DOM_CLASSINFO_MAP_BEGIN(IDBFactory, nsIIDBFactory)
 46347:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBFactory)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
100151:   DOM_CLASSINFO_MAP_BEGIN(IDBFileHandle, nsIDOMFileHandle)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileHandle)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBFileHandle)
100151:   DOM_CLASSINFO_MAP_END
100151: 
 44204:   DOM_CLASSINFO_MAP_BEGIN(IDBRequest, nsIIDBRequest)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBRequest)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 46349:   DOM_CLASSINFO_MAP_BEGIN(IDBDatabase, nsIIDBDatabase)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBDatabase)
 56112:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 46360:   DOM_CLASSINFO_MAP_BEGIN(IDBObjectStore, nsIIDBObjectStore)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBObjectStore)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 46348:   DOM_CLASSINFO_MAP_BEGIN(IDBTransaction, nsIIDBTransaction)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBTransaction)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 46362:   DOM_CLASSINFO_MAP_BEGIN(IDBCursor, nsIIDBCursor)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBCursor)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 62345:   DOM_CLASSINFO_MAP_BEGIN(IDBCursorWithValue, nsIIDBCursorWithValue)
 62345:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBCursor)
 62345:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBCursorWithValue)
 62345:   DOM_CLASSINFO_MAP_END
 62345: 
 44204:   DOM_CLASSINFO_MAP_BEGIN(IDBKeyRange, nsIIDBKeyRange)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBKeyRange)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 46361:   DOM_CLASSINFO_MAP_BEGIN(IDBIndex, nsIIDBIndex)
 44204:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBIndex)
 56112:   DOM_CLASSINFO_MAP_END
 56112: 
 56112:   DOM_CLASSINFO_MAP_BEGIN(IDBVersionChangeEvent, nsIIDBVersionChangeEvent)
 56112:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBVersionChangeEvent)
 56112:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEvent)
 56112:   DOM_CLASSINFO_MAP_END
 56112: 
 80650:   DOM_CLASSINFO_MAP_BEGIN(IDBOpenDBRequest, nsIIDBOpenDBRequest)
 80650:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBOpenDBRequest)
 56112:     DOM_CLASSINFO_MAP_ENTRY(nsIIDBRequest)
 56112:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 44204:   DOM_CLASSINFO_MAP_END
 44204: 
 69025:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(Touch, nsIDOMTouch,
 68879:                                         !nsDOMTouchEvent::PrefEnabled())
 69025:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTouch)
 68879:   DOM_CLASSINFO_MAP_END
 68879: 
 68879:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(TouchList, nsIDOMTouchList,
 68879:                                         !nsDOMTouchEvent::PrefEnabled())
 68879:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTouchList)
 68879:   DOM_CLASSINFO_MAP_END
 68879:   
 68879:   DOM_CLASSINFO_MAP_BEGIN_MAYBE_DISABLE(TouchEvent, nsIDOMTouchEvent,
 68879:                                         !nsDOMTouchEvent::PrefEnabled())
 68879:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTouchEvent)
 68879:     DOM_CLASSINFO_UI_EVENT_MAP_ENTRIES
 68879:   DOM_CLASSINFO_MAP_END
 68879: 
 67979:   DOM_CLASSINFO_MAP_BEGIN(MozCSSKeyframeRule, nsIDOMMozCSSKeyframeRule)
 67979:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozCSSKeyframeRule)
 67979:   DOM_CLASSINFO_MAP_END
 67979: 
 67979:   DOM_CLASSINFO_MAP_BEGIN(MozCSSKeyframesRule, nsIDOMMozCSSKeyframesRule)
 67979:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozCSSKeyframesRule)
 67979:   DOM_CLASSINFO_MAP_END
 67979: 
 68769:   DOM_CLASSINFO_MAP_BEGIN(MediaQueryList, nsIDOMMediaQueryList)
 68769:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMediaQueryList)
 68769:   DOM_CLASSINFO_MAP_END
 68769: 
 69676:   DOM_CLASSINFO_MAP_BEGIN(CustomEvent, nsIDOMCustomEvent)
 69676:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCustomEvent)
 69676:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
 69676:   DOM_CLASSINFO_MAP_END
 69676: 
 99169:   DOM_CLASSINFO_MAP_BEGIN(MutationObserver, nsIDOMMutationObserver)
 99169:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMutationObserver)
 94465:   DOM_CLASSINFO_MAP_END
 94465: 
 94465:   DOM_CLASSINFO_MAP_BEGIN(MutationRecord, nsIDOMMutationRecord)
 94465:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMutationRecord)
 94465:   DOM_CLASSINFO_MAP_END
 94465: 
 94104:   DOM_CLASSINFO_MAP_BEGIN(MozSettingsEvent, nsIDOMMozSettingsEvent)
 94104:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozSettingsEvent)
 94104:      DOM_CLASSINFO_EVENT_MAP_ENTRIES
 94104:   DOM_CLASSINFO_MAP_END
 94104: 
101993:   DOM_CLASSINFO_MAP_BEGIN(MozContactChangeEvent, nsIDOMMozContactChangeEvent)
101993:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozContactChangeEvent)
101993:      DOM_CLASSINFO_EVENT_MAP_ENTRIES
101993:   DOM_CLASSINFO_MAP_END
101993: 
102039:   DOM_CLASSINFO_MAP_BEGIN(MozApplicationEvent, nsIDOMMozApplicationEvent)
102039:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozApplicationEvent)
102039:     DOM_CLASSINFO_EVENT_MAP_ENTRIES
102039:   DOM_CLASSINFO_MAP_END
102039: 
 86882: #ifdef MOZ_B2G_RIL
102181:   DOM_CLASSINFO_MAP_BEGIN(MozWifiStatusChangeEvent, nsIDOMMozWifiStatusChangeEvent)
102181:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozWifiStatusChangeEvent)
102181:      DOM_CLASSINFO_EVENT_MAP_ENTRIES
102181:   DOM_CLASSINFO_MAP_END
102181: 
102181:   DOM_CLASSINFO_MAP_BEGIN(MozWifiConnectionInfoEvent, nsIDOMMozWifiConnectionInfoEvent)
102181:      DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozWifiConnectionInfoEvent)
102181:      DOM_CLASSINFO_EVENT_MAP_ENTRIES
102181:   DOM_CLASSINFO_MAP_END
102181: 
 86882:   DOM_CLASSINFO_MAP_BEGIN(Telephony, nsIDOMTelephony)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTelephony)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 86882:   DOM_CLASSINFO_MAP_END
 86882: 
 86882:   DOM_CLASSINFO_MAP_BEGIN(TelephonyCall, nsIDOMTelephonyCall)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTelephonyCall)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 86882:   DOM_CLASSINFO_MAP_END
 86882: 
 86882:   DOM_CLASSINFO_MAP_BEGIN(CallEvent, nsIDOMCallEvent)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMCallEvent)
 86882:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEvent)
 86882:   DOM_CLASSINFO_MAP_END
 86882: #endif
 86882: 
 90498: #ifdef MOZ_B2G_BT
 99300:   DOM_CLASSINFO_MAP_BEGIN(BluetoothManager, nsIDOMBluetoothManager)
 99300:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBluetoothManager)
 99300:   DOM_CLASSINFO_MAP_END  
 99300: 
 90498:   DOM_CLASSINFO_MAP_BEGIN(BluetoothAdapter, nsIDOMBluetoothAdapter)
 90498:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBluetoothAdapter)
 90498:   DOM_CLASSINFO_MAP_END
 90498: #endif
 90498: 
 88012:   DOM_CLASSINFO_MAP_BEGIN(DOMError, nsIDOMDOMError)
 88012:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMError)
 88012:   DOM_CLASSINFO_MAP_END
 88012: 
 90885:   DOM_CLASSINFO_MAP_BEGIN(DOMRequest, nsIDOMDOMRequest)
 90885:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMRequest)
 90885:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
 90885:   DOM_CLASSINFO_MAP_END
 90885: 
101817:   DOM_CLASSINFO_MAP_BEGIN(OpenWindowEventDetail, nsIOpenWindowEventDetail)
101817:     DOM_CLASSINFO_MAP_ENTRY(nsIOpenWindowEventDetail)
101817:   DOM_CLASSINFO_MAP_END
101817: 
100151:   DOM_CLASSINFO_MAP_BEGIN(DOMFileHandle, nsIDOMFileHandle)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileHandle)
100151:   DOM_CLASSINFO_MAP_END
100151: 
100151:   DOM_CLASSINFO_MAP_BEGIN(FileRequest, nsIDOMFileRequest)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFileRequest)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMDOMRequest)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMEventTarget)
100151:   DOM_CLASSINFO_MAP_END
100151: 
100151:   DOM_CLASSINFO_MAP_BEGIN(LockedFile, nsIDOMLockedFile)
100151:     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLockedFile)
100151:   DOM_CLASSINFO_MAP_END
100151: 
102909: #ifdef DEBUG
     1:   {
 80467:     PRUint32 i = ArrayLength(sClassInfoData);
     1: 
     1:     if (i != eDOMClassInfoIDCount) {
     1:       NS_ERROR("The number of items in sClassInfoData doesn't match the "
     1:                "number of nsIDOMClassInfo ID's, this is bad! Fix it!");
     1: 
     1:       return NS_ERROR_NOT_INITIALIZED;
     1:     }
     1: 
     1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
     1:       if (!sClassInfoData[i].u.mConstructorFptr ||
     1:           sClassInfoData[i].mDebugID != i) {
     1:         NS_ERROR("Class info data out of sync, you forgot to update "
     1:                  "nsDOMClassInfo.h and nsDOMClassInfo.cpp! Fix this, "
     1:                  "mozilla will not work without this fixed!");
     1: 
     1:         return NS_ERROR_NOT_INITIALIZED;
     1:       }
     1:     }
     1: 
     1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
     1:       if (!sClassInfoData[i].mInterfaces) {
     1:         NS_ERROR("Class info data without an interface list! Fix this, "
     1:                  "mozilla will not work without this fixed!");
     1: 
     1:         return NS_ERROR_NOT_INITIALIZED;
     1:       }
     1:     }
     1:   }
     1: #endif
     1: 
     1:   // Initialize static JSString's
     1:   DefineStaticJSVals(cx);
     1: 
     1:   PRInt32 i;
     1: 
     1:   for (i = 0; i < eDOMClassInfoIDCount; ++i) {
     1:     RegisterClassName(i);
     1:   }
     1: 
     1:   for (i = 0; i < eDOMClassInfoIDCount; ++i) {
     1:     RegisterClassProtos(i);
     1:   }
     1: 
     1:   RegisterExternalClasses();
     1: 
     1:   sDisableDocumentAllSupport =
 70840:     Preferences::GetBool("browser.dom.document.all.disabled");
     1: 
     1:   sDisableGlobalScopePollutionSupport =
 70840:     Preferences::GetBool("browser.dom.global_scope_pollution.disabled");
     1: 
 94512:   // Proxy bindings
 94512:   mozilla::dom::binding::Register(nameSpaceManager);
 94512: 
 94512:   // Non-proxy bindings
 97422:   mozilla::dom::Register(nameSpaceManager);
 80079: 
 80486:   sIsInitialized = true;
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: // static
     1: PRInt32
 79445: nsDOMClassInfo::GetArrayIndexFromId(JSContext *cx, jsid id, bool *aIsNumber)
 48470: {
     1:   if (aIsNumber) {
 80486:     *aIsNumber = false;
     1:   }
     1: 
 91450:   int i;
 48470:   if (JSID_IS_INT(id)) {
 48470:       i = JSID_TO_INT(id);
 48470:   } else {
     1:       JSAutoRequest ar(cx);
     1: 
 48470:       jsval idval;
 90955:       double array_index;
 48470:       if (!::JS_IdToValue(cx, id, &idval) ||
 48470:           !::JS_ValueToNumber(cx, idval, &array_index) ||
 48470:           !::JS_DoubleIsInt32(array_index, &i)) {
     1:         return -1;
     1:       }
     1:   }
     1: 
     1:   if (aIsNumber) {
 80486:     *aIsNumber = true;
     1:   }
     1: 
     1:   return i;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetInterfaces(PRUint32 *aCount, nsIID ***aArray)
     1: {
     1:   PRUint32 count = 0;
     1: 
     1:   while (mData->mInterfaces[count]) {
     1:     count++;
     1:   }
     1: 
     1:   *aCount = count;
     1: 
     1:   if (!count) {
     1:     *aArray = nsnull;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
  3233:   *aArray = static_cast<nsIID **>(nsMemory::Alloc(count * sizeof(nsIID *)));
     1:   NS_ENSURE_TRUE(*aArray, NS_ERROR_OUT_OF_MEMORY);
     1: 
     1:   PRUint32 i;
     1:   for (i = 0; i < count; i++) {
  3233:     nsIID *iid = static_cast<nsIID *>(nsMemory::Clone(mData->mInterfaces[i],
     1:                                                          sizeof(nsIID)));
     1: 
     1:     if (!iid) {
     1:       NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(i, *aArray);
     1: 
     1:       return NS_ERROR_OUT_OF_MEMORY;
     1:     }
     1: 
     1:     *((*aArray) + i) = iid;
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetHelperForLanguage(PRUint32 language, nsISupports **_retval)
     1: {
     1:   if (language == nsIProgrammingLanguage::JAVASCRIPT) {
  3233:     *_retval = static_cast<nsIXPCScriptable *>(this);
     1: 
     1:     NS_ADDREF(*_retval);
     1:   } else {
     1:     *_retval = nsnull;
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetContractID(char **aContractID)
     1: {
     1:   *aContractID = nsnull;
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetClassDescription(char **aClassDescription)
     1: {
     1:   return GetClassName(aClassDescription);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetClassID(nsCID **aClassID)
     1: {
     1:   *aClassID = nsnull;
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetClassIDNoAlloc(nsCID *aClassID)
     1: {
     1:   return NS_ERROR_NOT_AVAILABLE;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetImplementationLanguage(PRUint32 *aImplLanguage)
     1: {
     1:   *aImplLanguage = nsIProgrammingLanguage::CPLUSPLUS;
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetFlags(PRUint32 *aFlags)
     1: {
     1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: // nsIXPCScriptable
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetClassName(char **aClassName)
     1: {
     1:   *aClassName = NS_strdup(mData->mName);
     1: 
     1:   return NS_OK;
     1: }
     1: 
102191: // virtual
102191: PRUint32
102191: nsDOMClassInfo::GetScriptableFlags()
102191: {
102191:   return mData->mScriptableFlags;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::PreCreate(nsISupports *nativeObj, JSContext *cx,
     1:                           JSObject *globalObj, JSObject **parentObj)
     1: {
     1:   *parentObj = globalObj;
     1: 
 30001:   nsCOMPtr<nsPIDOMWindow> piwin = do_QueryWrapper(cx, globalObj);
     1: 
     1:   if (!piwin) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (piwin->IsOuterWindow()) {
 97123:     nsGlobalWindow *win = ((nsGlobalWindow *)piwin.get())->
 97123:                             GetCurrentInnerWindowInternal();
 97123:     return SetParentToWindow(win, parentObj);
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Create(nsIXPConnectWrappedNative *wrapper,
     1:                        JSContext *cx, JSObject *obj)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Create Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::PostCreate(nsIXPConnectWrappedNative *wrapper,
     1:                            JSContext *cx, JSObject *obj)
     1: {
 29423:   NS_WARNING("nsDOMClassInfo::PostCreate Don't call me!");
 29423: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, jsval *vp,
 79445:                             bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::AddProperty Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, jsval *vp,
 79445:                             bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::DelProperty Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, jsval *vp,
 79445:                             bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::GetProperty Don't call me!");
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, jsval *vp,
 79445:                             bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::SetProperty Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                           JSObject *obj, bool *_retval)
     1: {
 12678: #ifdef DEBUG
 12678:   if (!sSecMan) {
 12678:     NS_ERROR("No security manager!!!");
 12678:     return NS_OK;
 12678:   }
     1: 
     1:   // Ask the security manager if it's OK to enumerate
     1:   nsresult rv =
     1:     sSecMan->CheckPropertyAccess(cx, obj, mData->mName, sEnumerate_id,
     1:                                  nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
     1: 
 12678:   NS_ASSERTION(NS_SUCCEEDED(rv),
 12678:                "XOWs should have stopped us from getting here!!!");
 12678: #endif
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::NewEnumerate(nsIXPConnectWrappedNative *wrapper,
     1:                              JSContext *cx, JSObject *obj, PRUint32 enum_op,
 79445:                              jsval *statep, jsid *idp, bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::NewEnumerate Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: nsresult
     1: nsDOMClassInfo::ResolveConstructor(JSContext *cx, JSObject *obj,
     1:                                    JSObject **objp)
     1: {
  4427:   JSObject *global = ::JS_GetGlobalForObject(cx, obj);
     1: 
     1:   jsval val;
     1:   JSAutoRequest ar(cx);
 13196:   if (!::JS_LookupProperty(cx, global, mData->mName, &val)) {
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
     1:   if (!JSVAL_IS_PRIMITIVE(val)) {
     1:     // If val is not an (non-null) object there either is no
     1:     // constructor for this class, or someone messed with
     1:     // window.classname, just fall through and let the JS engine
     1:     // return the Object constructor.
     1: 
 48470:     if (!::JS_DefinePropertyById(cx, obj, sConstructor_id, val, nsnull, nsnull,
     1:                                  JSPROP_ENUMERATE)) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1: 
     1:     *objp = obj;
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                            JSObject *obj, jsid id, PRUint32 flags,
 79445:                            JSObject **objp, bool *_retval)
     1: {
     1:   if (id == sConstructor_id && !(flags & JSRESOLVE_ASSIGNING)) {
     1:     return ResolveConstructor(cx, obj, objp);
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Convert(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                         JSObject *obj, PRUint32 type, jsval *vp,
 79445:                         bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Convert Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
 94738: nsDOMClassInfo::Finalize(nsIXPConnectWrappedNative *wrapper, JSFreeOp *fop,
     1:                          JSObject *obj)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Finalize Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::CheckAccess(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, PRUint32 mode,
 79445:                             jsval *vp, bool *_retval)
     1: {
     1:   PRUint32 mode_type = mode & JSACC_TYPEMASK;
     1: 
     1:   if ((mode_type == JSACC_WATCH ||
     1:        mode_type == JSACC_PROTO ||
     1:        mode_type == JSACC_PARENT) &&
     1:       sSecMan) {
     1: 
 30001:     nsresult rv;
 30001:     JSObject *real_obj;
 30001:     if (wrapper) {
 30001:       rv = wrapper->GetJSObject(&real_obj);
     1:       NS_ENSURE_SUCCESS(rv, rv);
 30001:     }
 30001:     else {
 30001:       real_obj = obj;
 30001:     }
     1: 
     1:     rv =
     1:       sSecMan->CheckPropertyAccess(cx, real_obj, mData->mName, id,
     1:                                    nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
     1: 
     1:     if (NS_FAILED(rv)) {
     1:       // Let XPConnect know that the access was not granted.
 80486:       *_retval = false;
     1:     }
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                      JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
 79445:                      bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Call Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                           JSObject *obj, PRUint32 argc, jsval *argv,
 79445:                           jsval *vp, bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Construct Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::HasInstance(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                             JSObject *obj, const jsval &val, bool *bp,
 79445:                             bool *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::HasInstance Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::Equality(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
 79445:                          JSObject * obj, const jsval &val, bool *bp)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::Equality Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMClassInfo::OuterObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
     1:                             JSObject * obj, JSObject * *_retval)
     1: {
     1:   NS_WARNING("nsDOMClassInfo::OuterObject Don't call me!");
     1: 
     1:   return NS_ERROR_UNEXPECTED;
     1: }
     1: 
 26606: static nsresult
 26606: GetExternalClassInfo(nsScriptNameSpaceManager *aNameSpaceManager,
 26606:                      const nsString &aName,
 26606:                      const nsGlobalNameStruct *aStruct,
 26606:                      const nsGlobalNameStruct **aResult)
 26606: {
 26606:   NS_ASSERTION(aStruct->mType ==
 26606:                  nsGlobalNameStruct::eTypeExternalClassInfoCreator,
 26606:                "Wrong type!");
 26606: 
 26606:   nsresult rv;
 26606:   nsCOMPtr<nsIDOMCIExtension> creator(do_CreateInstance(aStruct->mCID, &rv));
 26606:   NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 26606:   nsCOMPtr<nsIDOMScriptObjectFactory> sof(do_GetService(kDOMSOF_CID));
 26606:   NS_ENSURE_TRUE(sof, NS_ERROR_FAILURE);
 26606: 
 26606:   rv = creator->RegisterDOMCI(NS_ConvertUTF16toUTF8(aName).get(), sof);
 26606:   NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 94389:   const nsGlobalNameStruct *name_struct = aNameSpaceManager->LookupName(aName);
 94389:   if (name_struct &&
 26606:       name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
 26606:     *aResult = name_struct;
 26606:   }
 26606:   else {
 26606:     NS_ERROR("Couldn't get the DOM ClassInfo data.");
 26606: 
 26606:     *aResult = nsnull;
 26606:   }
 26606: 
 26606:   return NS_OK;
 26606: }
 26606: 
 26606: 
 26606: static nsresult
 26606: ResolvePrototype(nsIXPConnect *aXPConnect, nsGlobalWindow *aWin, JSContext *cx,
 56186:                  JSObject *obj, const PRUnichar *name,
 56186:                  const nsDOMClassInfoData *ci_data,
 26606:                  const nsGlobalNameStruct *name_struct,
 26606:                  nsScriptNameSpaceManager *nameSpaceManager,
 79445:                  JSObject *dot_prototype, bool install, bool *did_resolve);
 26606: 
 86293: 
 86293: NS_IMETHODIMP
 86293: nsDOMClassInfo::PostCreatePrototype(JSContext * cx, JSObject * proto)
 86293: {
 86293:   PRUint32 flags = (mData->mScriptableFlags & DONT_ENUM_STATIC_PROPS)
 86293:                    ? 0
 86293:                    : JSPROP_ENUMERATE;
 86293: 
 86293:   PRUint32 count = 0;
 86293:   while (mData->mInterfaces[count]) {
 86293:     count++;
 86293:   }
 86293: 
 95444:   if (!xpc::DOM_DefineQuickStubs(cx, proto, flags, count, mData->mInterfaces)) {
 86293:     JS_ClearPendingException(cx);
 86293:   }
 86293: 
 86293:   // This is called before any other location that requires
 86293:   // sObjectClass, so compute it here. We assume that nobody has had a
 86293:   // chance to monkey around with proto's prototype chain before this.
 86293:   if (!sObjectClass) {
 86293:     FindObjectClass(proto);
 86293:     NS_ASSERTION(sObjectClass && !strcmp(sObjectClass->name, "Object"),
 86293:                  "Incorrect object class!");
 86293:   }
 86293: 
 89826:   NS_ASSERTION(::JS_GetPrototype(proto) &&
 89826:                JS_GetClass(::JS_GetPrototype(proto)) == sObjectClass,
 86293:                "Hmm, somebody did something evil?");
 86293: 
 86293: #ifdef DEBUG
 86293:   if (mData->mHasClassInterface && mData->mProtoChainInterface &&
 86293:       mData->mProtoChainInterface != &NS_GET_IID(nsISupports)) {
 86293:     nsCOMPtr<nsIInterfaceInfoManager>
 86293:       iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
 86293: 
 86293:     if (iim) {
 86293:       nsCOMPtr<nsIInterfaceInfo> if_info;
 86293:       iim->GetInfoForIID(mData->mProtoChainInterface,
 86293:                          getter_AddRefs(if_info));
 86293: 
 86293:       if (if_info) {
 86293:         nsXPIDLCString name;
 86293:         if_info->GetName(getter_Copies(name));
 86293:         NS_ASSERTION(nsCRT::strcmp(CutPrefix(name), mData->mName) == 0,
 86293:                      "Class name and proto chain interface name mismatch!");
 86293:       }
 86293:     }
 86293:   }
 86293: #endif
 86293: 
 86293:   // Make prototype delegation work correctly. Consider if a site sets
 86293:   // HTMLElement.prototype.foopy = function () { ... } Now, calling
 86293:   // document.body.foopy() needs to ensure that looking up foopy on
 86293:   // document.body's prototype will find the right function.
 86293:   JSObject *global = ::JS_GetGlobalForObject(cx, proto);
 86293: 
 86183:   // Only do this if the global object is a window.
 86183:   // XXX Is there a better way to check this?
 86293:   nsISupports *globalNative = XPConnect()->GetNativeOfWrapper(cx, global);
 86183:   nsCOMPtr<nsPIDOMWindow> piwin = do_QueryInterface(globalNative);
 86183:   if (!piwin) {
 86293:     return NS_OK;
 86183:   }
 86183: 
 86183:   nsGlobalWindow *win = nsGlobalWindow::FromSupports(globalNative);
 86183:   if (win->IsClosedOrClosing()) {
 86293:     return NS_OK;
 86183:   }
 86183: 
 86183:   // If the window is in a different compartment than the global object, then
 86183:   // it's likely that global is a sandbox object whose prototype is a window.
 86183:   // Don't do anything in this case.
 86183:   if (win->FastGetGlobalJSObject() &&
 86183:       js::GetObjectCompartment(global) != js::GetObjectCompartment(win->FastGetGlobalJSObject())) {
 86293:     return NS_OK;
 86183:   }
 86183: 
 86183:   if (win->IsOuterWindow()) {
 86183:     // XXXjst: Do security checks here when we remove the security
 86183:     // checks on the inner window.
 86183: 
 86183:     win = win->GetCurrentInnerWindowInternal();
 86183: 
 86183:     if (!win || !(global = win->GetGlobalJSObject()) ||
 86183:         win->IsClosedOrClosing()) {
 86293:       return NS_OK;
 86293:     }
 86293:   }
 29423: 
 29516:   // Don't overwrite a property set by content.
 29516:   JSBool found;
 31274:   if (!::JS_AlreadyHasOwnUCProperty(cx, global, reinterpret_cast<const jschar*>(mData->mNameUTF16),
 99810:                                     NS_strlen(mData->mNameUTF16), &found)) {
 29516:     return NS_ERROR_FAILURE;
 29516:   }
 29516: 
 29423:   nsScriptNameSpaceManager *nameSpaceManager =
 29423:     nsJSRuntime::GetNameSpaceManager();
 29423:   NS_ENSURE_TRUE(nameSpaceManager, NS_OK);
 29423: 
 79445:   bool unused;
 56186:   return ResolvePrototype(sXPConnect, win, cx, global, mData->mNameUTF16,
 56186:                           mData, nsnull, nameSpaceManager, proto, !found,
 56186:                           &unused);
 18543: }
 18543: 
     1: // static
     1: nsIClassInfo *
     1: NS_GetDOMClassInfoInstance(nsDOMClassInfoID aID)
     1: {
     1:   if (aID >= eDOMClassInfoIDCount) {
     1:     NS_ERROR("Bad ID!");
     1: 
     1:     return nsnull;
     1:   }
     1: 
     1:   if (!nsDOMClassInfo::sIsInitialized) {
     1:     nsresult rv = nsDOMClassInfo::Init();
     1: 
     1:     NS_ENSURE_SUCCESS(rv, nsnull);
     1:   }
     1: 
     1:   if (!sClassInfoData[aID].mCachedClassInfo) {
     1:     nsDOMClassInfoData& data = sClassInfoData[aID];
     1: 
     1:     data.mCachedClassInfo = data.u.mConstructorFptr(&data);
     1:     NS_ENSURE_TRUE(data.mCachedClassInfo, nsnull);
     1: 
     1:     NS_ADDREF(data.mCachedClassInfo);
     1:   }
     1: 
     1:   NS_ASSERTION(!IS_EXTERNAL(sClassInfoData[aID].mCachedClassInfo),
     1:                "This is bad, internal class marked as external!");
     1: 
     1:   return sClassInfoData[aID].mCachedClassInfo;
     1: }
     1: 
     1: // static
     1: nsIClassInfo *
     1: nsDOMClassInfo::GetClassInfoInstance(nsDOMClassInfoData* aData)
     1: {
     1:   NS_ASSERTION(IS_EXTERNAL(aData->mCachedClassInfo)
     1:                || !aData->mCachedClassInfo,
     1:                "This is bad, external class marked as internal!");
     1: 
     1:   if (!aData->mCachedClassInfo) {
     1:     if (aData->u.mExternalConstructorFptr) {
     1:       aData->mCachedClassInfo =
     1:         aData->u.mExternalConstructorFptr(aData->mName);
     1:     } else {
     1:       aData->mCachedClassInfo = nsDOMGenericSH::doCreate(aData);
     1:     }
     1:     NS_ENSURE_TRUE(aData->mCachedClassInfo, nsnull);
     1: 
     1:     NS_ADDREF(aData->mCachedClassInfo);
     1:     aData->mCachedClassInfo = MARK_EXTERNAL(aData->mCachedClassInfo);
     1:   }
     1: 
     1:   return GET_CLEAN_CI_PTR(aData->mCachedClassInfo);
     1: }
     1: 
     1: 
     1: // static
     1: void
     1: nsDOMClassInfo::ShutDown()
     1: {
     1:   if (sClassInfoData[0].u.mConstructorFptr) {
     1:     PRUint32 i;
     1: 
     1:     for (i = 0; i < eDOMClassInfoIDCount; i++) {
     1:       NS_IF_RELEASE(sClassInfoData[i].mCachedClassInfo);
     1:     }
     1:   }
     1: 
 48470:   sParent_id          = JSID_VOID;
 48470:   sScrollbars_id      = JSID_VOID;
 48470:   sLocation_id        = JSID_VOID;
 48470:   sConstructor_id     = JSID_VOID;
 48470:   s_content_id        = JSID_VOID;
 48470:   sContent_id         = JSID_VOID;
 48470:   sMenubar_id         = JSID_VOID;
 48470:   sToolbar_id         = JSID_VOID;
 48470:   sLocationbar_id     = JSID_VOID;
 48470:   sPersonalbar_id     = JSID_VOID;
 48470:   sStatusbar_id       = JSID_VOID;
 48470:   sDialogArguments_id = JSID_VOID;
 48470:   sControllers_id     = JSID_VOID;
 48470:   sLength_id          = JSID_VOID;
 48470:   sInnerHeight_id     = JSID_VOID;
 48470:   sInnerWidth_id      = JSID_VOID;
 48470:   sOuterHeight_id     = JSID_VOID;
 48470:   sOuterWidth_id      = JSID_VOID;
 48470:   sScreenX_id         = JSID_VOID;
 48470:   sScreenY_id         = JSID_VOID;
 48470:   sStatus_id          = JSID_VOID;
 48470:   sName_id            = JSID_VOID;
 48470:   sScrollX_id         = JSID_VOID;
 48470:   sScrollY_id         = JSID_VOID;
 48470:   sScrollMaxX_id      = JSID_VOID;
 48470:   sScrollMaxY_id      = JSID_VOID;
 48470:   sItem_id            = JSID_VOID;
 48470:   sEnumerate_id       = JSID_VOID;
 48470:   sNavigator_id       = JSID_VOID;
 48470:   sDocument_id        = JSID_VOID;
 48470:   sFrames_id          = JSID_VOID;
 48470:   sSelf_id            = JSID_VOID;
 48470:   sOpener_id          = JSID_VOID;
 48470:   sAll_id             = JSID_VOID;
 48470:   sTags_id            = JSID_VOID;
 48470:   sAddEventListener_id= JSID_VOID;
 78615:   sBaseURIObject_id   = JSID_VOID;
 78615:   sNodePrincipal_id   = JSID_VOID;
 78615:   sDocumentURIObject_id=JSID_VOID;
 55585:   sWrappedJSObject_id = JSID_VOID;
 59555:   sKeyPath_id         = JSID_VOID;
 59555:   sAutoIncrement_id   = JSID_VOID;
 59555:   sUnique_id          = JSID_VOID;
 83384:   sMultiEntry_id      = JSID_VOID;
 77149:   sOnload_id          = JSID_VOID;
 77149:   sOnerror_id         = JSID_VOID;
 68879: 
     1:   NS_IF_RELEASE(sXPConnect);
     1:   NS_IF_RELEASE(sSecMan);
 80486:   sIsInitialized = false;
     1: }
     1: 
     1: // Window helper
     1: 
     1: NS_IMETHODIMP
 55578: nsWindowSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
     1:                       JSObject *globalObj, JSObject **parentObj)
     1: {
     1:   // Normally ::PreCreate() is used to give XPConnect the parent
     1:   // object for the object that's being wrapped, this parent object is
     1:   // set as the parent of the wrapper and it's also used to find the
     1:   // right scope for the object being wrapped. Now, in the case of the
     1:   // global object the wrapper shouldn't have a parent but we supply
     1:   // one here anyway (the global object itself) and this will be used
     1:   // by XPConnect only to find the right scope, once the scope is
     1:   // found XPConnect will find the existing wrapper (which always
     1:   // exists since it's created on window construction), since an
     1:   // existing wrapper is found the parent we supply here is ignored
     1:   // after the wrapper is found.
     1: 
     1:   nsCOMPtr<nsIScriptGlobalObject> sgo(do_QueryInterface(nativeObj));
     1:   NS_ASSERTION(sgo, "nativeObj not a global object!");
     1: 
 47410:   nsGlobalWindow *win = nsGlobalWindow::FromSupports(nativeObj);
 80266:   NS_ASSERTION(win->IsInnerWindow(), "Should be inner window.");
 55578: 
 97123:   // We sometimes get a disconnected window during file api test. :-(
 97123:   if (!win->GetOuterWindowInternal())
 97031:     return NS_ERROR_FAILURE;
 97031: 
 97123:   // If we're bootstrapping, we don't have a JS object yet.
 97123:   if (win->GetOuterWindowInternal()->IsCreatingInnerWindow())
 97123:     return NS_OK;
 97123: 
 97123:   return SetParentToWindow(win, parentObj);
 51078: }
 51078: 
     1: // This JS class piggybacks on nsHTMLDocumentSH::ReleaseDocument()...
     1: 
     1: static JSClass sGlobalScopePolluterClass = {
     1:   "Global Scope Polluter",
     1:   JSCLASS_HAS_PRIVATE | JSCLASS_PRIVATE_IS_NSISUPPORTS | JSCLASS_NEW_RESOLVE,
 62397:   nsWindowSH::SecurityCheckOnAddDelProp,
 62397:   nsWindowSH::SecurityCheckOnAddDelProp,
 55578:   nsWindowSH::GlobalScopePolluterGetProperty,
 55578:   nsWindowSH::SecurityCheckOnSetProp,
 49087:   JS_EnumerateStub,
 55578:   (JSResolveOp)nsWindowSH::GlobalScopePolluterNewResolve,
 49087:   JS_ConvertStub,
     1:   nsHTMLDocumentSH::ReleaseDocument
     1: };
     1: 
     1: 
     1: // static
 18907: JSBool
 98960: nsWindowSH::GlobalScopePolluterGetProperty(JSContext *cx, JSHandleObject obj,
 98960:                                            JSHandleId id, jsval *vp)
     1: {
     1:   // Someone is accessing a element by referencing its name/id in the
     1:   // global scope, do a security check to make sure that's ok.
     1: 
     1:   nsresult rv =
  4427:     sSecMan->CheckPropertyAccess(cx, ::JS_GetGlobalForObject(cx, obj),
  4427:                                  "Window", id,
     1:                                  nsIXPCSecurityManager::ACCESS_GET_PROPERTY);
     1: 
     1:   if (NS_FAILED(rv)) {
     1:     // The security check failed. The security manager set a JS
     1:     // exception for us.
     1: 
     1:     return JS_FALSE;
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
     1: // static
 18907: JSBool
 98960: nsWindowSH::SecurityCheckOnAddDelProp(JSContext *cx, JSHandleObject obj, JSHandleId id,
     1:                                       jsval *vp)
     1: {
     1:   // Someone is accessing a element by referencing its name/id in the
     1:   // global scope, do a security check to make sure that's ok.
     1: 
     1:   nsresult rv =
  4427:     sSecMan->CheckPropertyAccess(cx, ::JS_GetGlobalForObject(cx, obj),
  4427:                                  "Window", id,
     1:                                  nsIXPCSecurityManager::ACCESS_SET_PROPERTY);
     1: 
     1:   // If !NS_SUCCEEDED(rv) the security check failed. The security
     1:   // manager set a JS exception for us.
     1:   return NS_SUCCEEDED(rv);
     1: }
     1: 
 62397: // static
 62397: JSBool
 98960: nsWindowSH::SecurityCheckOnSetProp(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict,
 62397:                                    jsval *vp)
 62397: {
 62397:   return SecurityCheckOnAddDelProp(cx, obj, id, vp);
 62397: }
 62397: 
 48170: static nsHTMLDocument*
 89826: GetDocument(JSObject *obj)
 48170: {
 48170:   return static_cast<nsHTMLDocument*>(
 89826:     static_cast<nsIHTMLDocument*>(::JS_GetPrivate(obj)));
 48170: }
 48170: 
     1: // static
 18907: JSBool
 98960: nsWindowSH::GlobalScopePolluterNewResolve(JSContext *cx, JSHandleObject obj,
 98960:                                           JSHandleId id, unsigned flags,
     1:                                           JSObject **objp)
     1: {
     1:   if (flags & (JSRESOLVE_ASSIGNING | JSRESOLVE_DECLARING |
 99447:                JSRESOLVE_QUALIFIED) ||
 48470:       !JSID_IS_STRING(id)) {
     1:     // Nothing to do here if we're either assigning or declaring,
 99447:     // doing a qualified resolve, or resolving a number.
     1: 
     1:     return JS_TRUE;
     1:   }
     1: 
 89826:   nsHTMLDocument *document = GetDocument(obj);
     1: 
 93753:   if (!document) {
 93753:     // If we don't have a document, return early.
     1: 
     1:     return JS_TRUE;
     1:   }
     1: 
 89826:   JSObject *proto = ::JS_GetPrototype(obj);
     1:   JSBool hasProp;
     1: 
 48470:   if (!proto || !::JS_HasPropertyById(cx, proto, id, &hasProp) ||
     1:       hasProp) {
     1:     // No prototype, or the property exists on the prototype. Do
     1:     // nothing.
     1: 
     1:     return JS_TRUE;
     1:   }
     1: 
 59889:   nsDependentJSString str(id);
 48170:   nsCOMPtr<nsISupports> result;
 48170:   nsWrapperCache *cache;
 48170:   {
 48170:     Element *element = document->GetElementById(str);
 48170:     result = element;
 48170:     cache = element;
 48170:   }
     1: 
     1:   if (!result) {
 48170:     document->ResolveName(str, nsnull, getter_AddRefs(result), &cache);
     1:   }
     1: 
     1:   if (result) {
     1:     jsval v;
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 80486:     nsresult rv = WrapNative(cx, obj, result, cache, true, &v,
 30625:                              getter_AddRefs(holder));
  7872:     NS_ENSURE_SUCCESS(rv, JS_FALSE);
     1: 
 55597:     if (!JS_WrapValue(cx, &v) ||
 55597:         !JS_DefinePropertyById(cx, obj, id, v, nsnull, nsnull, 0)) {
     1:       return JS_FALSE;
     1:     }
     1: 
     1:     *objp = obj;
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
     1: // static
     1: void
 55578: nsWindowSH::InvalidateGlobalScopePolluter(JSContext *cx, JSObject *obj)
     1: {
     1:   JSObject *proto;
     1: 
     1:   JSAutoRequest ar(cx);
     1: 
 89826:   while ((proto = ::JS_GetPrototype(obj))) {
 89430:     if (JS_GetClass(proto) == &sGlobalScopePolluterClass) {
 89826:       nsIHTMLDocument *doc = (nsIHTMLDocument *)::JS_GetPrivate(proto);
     1: 
     1:       NS_IF_RELEASE(doc);
     1: 
 89826:       ::JS_SetPrivate(proto, nsnull);
     1: 
     1:       // Pull the global scope polluter out of the prototype chain so
     1:       // that it can be freed.
 89826:       ::JS_SplicePrototype(cx, obj, ::JS_GetPrototype(proto));
     1: 
     1:       break;
     1:     }
     1: 
     1:     obj = proto;
     1:   }
     1: }
     1: 
     1: // static
     1: nsresult
 55578: nsWindowSH::InstallGlobalScopePolluter(JSContext *cx, JSObject *obj,
     1:                                        nsIHTMLDocument *doc)
     1: {
     1:   // If global scope pollution is disabled, or if our document is not
     1:   // a HTML document, do nothing
     1:   if (sDisableGlobalScopePollutionSupport || !doc) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   JSAutoRequest ar(cx);
     1: 
 77343:   JSObject *gsp = ::JS_NewObjectWithUniqueType(cx, &sGlobalScopePolluterClass, nsnull, obj);
     1:   if (!gsp) {
     1:     return NS_ERROR_OUT_OF_MEMORY;
     1:   }
     1: 
     1:   JSObject *o = obj, *proto;
     1: 
     1:   // Find the place in the prototype chain where we want this global
     1:   // scope polluter (right before Object.prototype).
     1: 
 89826:   while ((proto = ::JS_GetPrototype(o))) {
 89430:     if (JS_GetClass(proto) == sObjectClass) {
     1:       // Set the global scope polluters prototype to Object.prototype
 77343:       ::JS_SplicePrototype(cx, gsp, proto);
     1: 
     1:       break;
     1:     }
     1: 
     1:     o = proto;
     1:   }
     1: 
     1:   // And then set the prototype of the object whose prototype was
     1:   // Object.prototype to be the global scope polluter.
 77343:   ::JS_SplicePrototype(cx, o, gsp);
     1: 
 89826:   ::JS_SetPrivate(gsp, doc);
     1: 
     1:   // The global scope polluter will release doc on destruction (or
     1:   // invalidation).
     1:   NS_ADDREF(doc);
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: static
     1: already_AddRefed<nsIDOMWindow>
 75049: GetChildFrame(nsGlobalWindow *win, PRUint32 index)
     1: {
     1:   nsCOMPtr<nsIDOMWindowCollection> frames;
     1:   win->GetFrames(getter_AddRefs(frames));
     1: 
     1:   nsIDOMWindow *frame = nsnull;
     1: 
     1:   if (frames) {
 75049:     frames->Item(index, &frame);
     1:   }
     1: 
     1:   return frame;
     1: }
     1: 
     1: NS_IMETHODIMP
 55578: nsWindowSH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                         JSObject *obj, jsid id, jsval *vp, bool *_retval)
     1: {
     1:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
     1: 
     1:   JSAutoRequest ar(cx);
     1: 
     1: #ifdef DEBUG_SH_FORWARDING
     1:   {
     1:     JSString *jsstr = ::JS_ValueToString(cx, id);
     1:     if (jsstr) {
     1:       nsDependentJSString str(jsstr);
     1: 
     1:       if (win->IsInnerWindow()) {
     1: #ifdef DEBUG_PRINT_INNER
     1:         printf("Property '%s' get on inner window %p\n",
     1:               NS_ConvertUTF16toUTF8(str).get(), (void *)win);
     1: #endif
     1:       } else {
     1:         printf("Property '%s' get on outer window %p\n",
     1:               NS_ConvertUTF16toUTF8(str).get(), (void *)win);
     1:       }
     1:     }
     1:   }
     1: #endif
     1: 
     1:   // The order in which things are done in this method are a bit
     1:   // whacky, that's because this method is *extremely* performace
     1:   // critical. Don't touch this unless you know what you're doing.
     1: 
 75049:   if (JSID_IS_INT(id) && JSID_TO_INT(id) >= 0) {
     1:     // If we're accessing a numeric property we'll treat that as if
     1:     // window.frames[n] is accessed (since window.frames === window),
     1:     // if window.frames[n] is a child frame, wrap the frame and return
     1:     // it without doing a security check.
 75049:     PRUint32 index = PRUint32(JSID_TO_INT(id));
     1:     nsresult rv = NS_OK;
 75049:     if (nsCOMPtr<nsIDOMWindow> frame = GetChildFrame(win, index)) {
     1:       // A numeric property accessed and the numeric property is a
     1:       // child frame, wrap the child frame without doing a security
     1:       // check and return.
     1: 
     1:       nsGlobalWindow *frameWin = (nsGlobalWindow *)frame.get();
 49089:       NS_ASSERTION(frameWin->IsOuterWindow(), "GetChildFrame gave us an inner?");
 49089: 
 49089:       frameWin->EnsureInnerWindow();
101304:       JSObject *global = frameWin->GetGlobalJSObject();
101304: 
101304:       // This null check fixes a hard-to-reproduce crash that occurs when we
101304:       // get here when we're mid-call to nsDocShell::Destroy. See bug 640904
101304:       // comment 105.
101304:       if (MOZ_UNLIKELY(!global))
101304:           return NS_ERROR_FAILURE;
     1: 
     1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 55604:       jsval v;
101304:       rv = WrapNative(cx, xpc_UnmarkGrayObject(global),
 97589:                       frame, &NS_GET_IID(nsIDOMWindow), true, &v,
     1:                       getter_AddRefs(holder));
 55604:       NS_ENSURE_SUCCESS(rv, rv);
 55604: 
 55604:       if (!JS_WrapValue(cx, &v)) {
 55604:         return NS_ERROR_FAILURE;
 55604:       }
 55604: 
 55604:       *vp = v;
     1:     }
     1: 
     1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
     1:   }
     1: 
 48470:   if (JSID_IS_STRING(id) && !JSVAL_IS_PRIMITIVE(*vp) &&
     1:       ::JS_TypeOfValue(cx, *vp) != JSTYPE_FUNCTION) {
     1:     // A named property accessed which could have been resolved to a
 55578:     // child frame in nsWindowSH::NewResolve() (*vp will tell us if
     1:     // that's the case). If *vp is a window object (i.e. a child
     1:     // frame), return without doing a security check.
  8636:     //
  8636:     // Calling GetWrappedNativeOfJSObject() is not all that cheap, so
  8636:     // only do that if the JSClass name is one that is likely to be a
  8636:     // window object.
  8636: 
 89430:     const char *name = JS_GetClass(JSVAL_TO_OBJECT(*vp))->name;
  8636: 
  8636:     // The list of Window class names here need to be kept in sync
 15541:     // with the actual class names! The class name
 15541:     // XPCCrossOriginWrapper needs to be handled here too as XOWs
 15541:     // define child frame names with a XOW as the value, and thus
 15541:     // we'll need to get through here with XOWs class name too.
  8636:     if ((*name == 'W' && strcmp(name, "Window") == 0) ||
  8636:         (*name == 'C' && strcmp(name, "ChromeWindow") == 0) ||
 15541:         (*name == 'M' && strcmp(name, "ModalContentWindow") == 0) ||
 47536:         (*name == 'I' &&
 47536:          (strcmp(name, "InnerWindow") == 0 ||
 47536:           strcmp(name, "InnerChromeWindow") == 0 ||
 47536:           strcmp(name, "InnerModalContentWindow") == 0)) ||
 15541:         (*name == 'X' && strcmp(name, "XPCCrossOriginWrapper") == 0)) {
 30001:       nsCOMPtr<nsIDOMWindow> window = do_QueryWrapper(cx, JSVAL_TO_OBJECT(*vp));
     1: 
     1:       if (window) {
     1:         // Yup, *vp is a window object, return early (*vp is already
     1:         // the window, so no need to wrap it again).
     1: 
     1:         return NS_SUCCESS_I_DID_SOMETHING;
     1:       }
     1:     }
     1:   }
     1: 
 55665:   if (id == sWrappedJSObject_id &&
 87284:       xpc::AccessCheck::isChrome(js::GetContextCompartment(cx))) {
 79734:     obj = JS_ObjectToOuterObject(cx, obj);
 55585:     *vp = OBJECT_TO_JSVAL(obj);
 55585:     return NS_SUCCESS_I_DID_SOMETHING;
 55585:   }
 55585: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
 67691: nsWindowSH::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                       JSObject *obj, bool *_retval)
 67691: {
 67691:   if (!ObjectIsNativeWrapper(cx, obj)) {
 67691:     *_retval = JS_EnumerateStandardClasses(cx, obj);
 67691:   }
 67691: 
 67691:   return NS_OK;
 67691: }
 67691: 
     1: static const char*
 29423: FindConstructorContractID(const nsDOMClassInfoData *aDOMClassInfoData)
     1: {
     1:   PRUint32 i;
 80467:   for (i = 0; i < ArrayLength(kConstructorMap); ++i) {
 29423:     if (&sClassInfoData[kConstructorMap[i].mDOMClassInfoID] ==
 29423:         aDOMClassInfoData) {
     1:       return kConstructorMap[i].mContractID;
     1:     }
     1:   }
     1:   return nsnull;
     1: }
     1: 
 21376: static nsDOMConstructorFunc
 29423: FindConstructorFunc(const nsDOMClassInfoData *aDOMClassInfoData)
 21376: {
 80467:   for (PRUint32 i = 0; i < ArrayLength(kConstructorFuncMap); ++i) {
 29423:     if (&sClassInfoData[kConstructorFuncMap[i].mDOMClassInfoID] ==
 29423:         aDOMClassInfoData) {
 21376:       return kConstructorFuncMap[i].mConstructorFunc;
 21376:     }
 21376:   }
 21376:   return nsnull;
 21376: }
 21376: 
     1: static nsresult
  8947: BaseStubConstructor(nsIWeakReference* aWeakOwner,
  8947:                     const nsGlobalNameStruct *name_struct, JSContext *cx,
 91237:                     JSObject *obj, unsigned argc, jsval *argv, jsval *rval)
     1: {
     1:   nsresult rv;
     1:   nsCOMPtr<nsISupports> native;
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
 29423:     const nsDOMClassInfoData* ci_data =
 29423:       &sClassInfoData[name_struct->mDOMClassInfoID];
 29423:     const char *contractid = FindConstructorContractID(ci_data);
 21376:     if (contractid) {
     1:       native = do_CreateInstance(contractid, &rv);
 21376:     }
 21376:     else {
 29423:       nsDOMConstructorFunc func = FindConstructorFunc(ci_data);
 21376:       if (func) {
 21376:         rv = func(getter_AddRefs(native));
 21376:       }
 39336:       else {
 39336:         rv = NS_ERROR_NOT_AVAILABLE;
 39336:       }
 21376:     }
     1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
     1:     native = do_CreateInstance(name_struct->mCID, &rv);
     1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
     1:     native = do_CreateInstance(name_struct->mAlias->mCID, &rv);
     1:   } else {
     1:     native = do_CreateInstance(*name_struct->mData->mConstructorCID, &rv);
     1:   }
     1:   if (NS_FAILED(rv)) {
     1:     NS_ERROR("Failed to create the object");
     1:     return rv;
     1:   }
     1: 
     1:   nsCOMPtr<nsIJSNativeInitializer> initializer(do_QueryInterface(native));
100092:   nsCOMPtr<nsIDOMGlobalObjectConstructor> constructor(do_QueryInterface(native));
100092:   if (initializer || constructor) {
 14783:     // Initialize object using the current inner window, but only if
 14783:     // the caller can access it.
 12313:     nsCOMPtr<nsPIDOMWindow> owner = do_QueryReferent(aWeakOwner);
 14783:     nsPIDOMWindow* outerWindow = owner ? owner->GetOuterWindow() : nsnull;
 14783:     nsPIDOMWindow* currentInner =
 14783:       outerWindow ? outerWindow->GetCurrentInnerWindow() : nsnull;
 14783:     if (!currentInner ||
 14783:         (owner != currentInner &&
 14783:          !nsContentUtils::CanCallerAccess(currentInner))) {
 14783:       return NS_ERROR_DOM_SECURITY_ERR;
 14783:     }
 14783: 
100092:     if (initializer) {
 14783:       rv = initializer->Initialize(currentInner, cx, obj, argc, argv);
     1:       if (NS_FAILED(rv)) {
 22042:         return rv;
     1:       }
100092:     } else {
100092:       nsCOMPtr<nsIXPConnectWrappedJS> wrappedJS = do_QueryInterface(native);
100092: 
100092:       JSObject* object = nsnull;
100092:       wrappedJS->GetJSObject(&object);
100092:       if (!object) {
100092:         return NS_ERROR_UNEXPECTED;
100092:       }
100092: 
100092:       nsCxPusher pusher;
100092:       NS_ENSURE_STATE(pusher.Push(cx, false));
100092: 
100092:       JSAutoRequest ar(cx);
100092: 
100092:       JSAutoEnterCompartment ac;
100092:       if (!ac.enter(cx, object)) {
100092:         return NS_ERROR_FAILURE;
100092:       }
100092: 
100092:       JS::Value thisValue = JSVAL_VOID;
100092:       JS::Value funval;
100092:       if (!JS_GetProperty(cx, object, "constructor", &funval) || !funval.isObject()) {
100092:         return NS_ERROR_UNEXPECTED;
100092:       }
100092: 
100092:       // Check if the object is even callable.
100092:       NS_ENSURE_STATE(JS_ObjectIsCallable(cx, &funval.toObject()));
100092:       thisValue.setObject(*object);
100092: 
100092:       {
100092:         JSObject* thisObject = &thisValue.toObject();
100092: 
100092:         // wrap parameters in the target compartment
100092:         nsAutoArrayPtr<JS::Value> args(new JS::Value[argc]);
100092:         JS::AutoArrayRooter rooter(cx, 0, args);
100092: 
100092:         for (size_t i = 0; i < argc; ++i) {
100092:           args[i] = argv[i];
100092:           if (!JS_WrapValue(cx, &args[i]))
100092:             return NS_ERROR_FAILURE;
100092:           rooter.changeLength(i + 1);
100092:         }
100092: 
100092:         JS::Value frval;
100092:         bool ret = JS_CallFunctionValue(cx, thisObject, funval, argc, args, &frval);
100092: 
100092:         if (!ret) {
100092:           return NS_ERROR_FAILURE;
100092:         }
100092:       }
100092:     }
     1:   }
     1: 
     1:   nsCOMPtr<nsIScriptObjectOwner> owner(do_QueryInterface(native));
     1:   if (owner) {
     1:     nsIScriptContext *context = nsJSUtils::GetStaticScriptContext(cx, obj);
     1:     if (!context) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1: 
     1:     JSObject* new_obj;
     1:     rv = owner->GetScriptObject(context, (void**)&new_obj);
     1: 
     1:     if (NS_SUCCEEDED(rv)) {
     1:       *rval = OBJECT_TO_JSVAL(new_obj);
     1:     }
     1: 
     1:     return rv;
     1:   }
     1: 
 80486:   return WrapNative(cx, obj, native, true, rval);
     1: }
     1: 
     1: static nsresult
     1: DefineInterfaceConstants(JSContext *cx, JSObject *obj, const nsIID *aIID)
     1: {
     1:   nsCOMPtr<nsIInterfaceInfoManager>
     1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
     1:   NS_ENSURE_TRUE(iim, NS_ERROR_UNEXPECTED);
     1: 
     1:   nsCOMPtr<nsIInterfaceInfo> if_info;
     1: 
     1:   nsresult rv = iim->GetInfoForIID(aIID, getter_AddRefs(if_info));
     1:   NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && if_info, rv);
     1: 
     1:   PRUint16 constant_count;
     1: 
     1:   if_info->GetConstantCount(&constant_count);
     1: 
     1:   if (!constant_count) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsCOMPtr<nsIInterfaceInfo> parent_if_info;
     1: 
     1:   rv = if_info->GetParent(getter_AddRefs(parent_if_info));
     1:   NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && parent_if_info, rv);
     1: 
     1:   PRUint16 parent_constant_count, i;
     1:   parent_if_info->GetConstantCount(&parent_constant_count);
     1: 
     1:   for (i = parent_constant_count; i < constant_count; i++) {
     1:     const nsXPTConstant *c = nsnull;
     1: 
     1:     rv = if_info->GetConstant(i, &c);
     1:     NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && c, rv);
     1: 
     1:     PRUint16 type = c->GetType().TagPart();
     1: 
     1:     jsval v;
     1:     switch (type) {
     1:       case nsXPTType::T_I8:
     1:       case nsXPTType::T_U8:
     1:       {
     1:         v = INT_TO_JSVAL(c->GetValue()->val.u8);
     1:         break;
     1:       }
     1:       case nsXPTType::T_I16:
     1:       case nsXPTType::T_U16:
     1:       {
     1:         v = INT_TO_JSVAL(c->GetValue()->val.u16);
     1:         break;
     1:       }
     1:       case nsXPTType::T_I32:
 31488:       {
 31488:         if (!JS_NewNumberValue(cx, c->GetValue()->val.i32, &v)) {
 31488:           return NS_ERROR_UNEXPECTED;
 31488:         }
 31488:         break;
 31488:       }
     1:       case nsXPTType::T_U32:
     1:       {
 31488:         if (!JS_NewNumberValue(cx, c->GetValue()->val.u32, &v)) {
 31488:           return NS_ERROR_UNEXPECTED;
 31488:         }
     1:         break;
     1:       }
     1:       default:
     1:       {
102909: #ifdef DEBUG
     1:         NS_ERROR("Non-numeric constant found in interface.");
     1: #endif
     1:         continue;
     1:       }
     1:     }
     1: 
     1:     if (!::JS_DefineProperty(cx, obj, c->GetName(), v, nsnull, nsnull,
102422:                              JSPROP_ENUMERATE | JSPROP_READONLY |
102422:                              JSPROP_PERMANENT)) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
 92087: // This code is temporary until we remove support for the constants defined
 92087: // on IDBCursor/IDBRequest/IDBTransaction
 92087: 
 92087: struct IDBConstant
 92087: {
 92087:   const char* interface;
 92087:   const char* name;
 92087:   const char* value;
 92087:   
 92087:   static const char* IDBCursor;
 92087:   static const char* IDBRequest;
 92087:   static const char* IDBTransaction;
 92087: };
 92087: 
 92087: const char* IDBConstant::IDBCursor = "IDBCursor";
 92087: const char* IDBConstant::IDBRequest = "IDBRequest";
 92087: const char* IDBConstant::IDBTransaction = "IDBTransaction";
 92087: 
 92087: static const IDBConstant sIDBConstants[] = {
 92087:   { IDBConstant::IDBCursor,      "NEXT",              "next" },
 92087:   { IDBConstant::IDBCursor,      "NEXT_NO_DUPLICATE", "nextunique" },
 92087:   { IDBConstant::IDBCursor,      "PREV",              "prev" },
 92087:   { IDBConstant::IDBCursor,      "PREV_NO_DUPLICATE", "prevunique" },
 92087:   { IDBConstant::IDBRequest,     "LOADING",           "pending" },
 92087:   { IDBConstant::IDBRequest,     "DONE",              "done" },
 92087:   { IDBConstant::IDBTransaction, "READ_ONLY",         "readonly" },
 92087:   { IDBConstant::IDBTransaction, "READ_WRITE",        "readwrite" },
 92087:   { IDBConstant::IDBTransaction, "VERSION_CHANGE",    "versionchange" },
 92087: };
 92087: 
 92087: static JSBool
 98960: IDBConstantGetter(JSContext *cx, JSHandleObject obj, JSHandleId id, jsval* vp)
 92087: {
103004:   JSString *idstr = JSID_TO_STRING(id);
103004:   unsigned index;
103004:   for (index = 0; index < mozilla::ArrayLength(sIDBConstants); index++) {
103004:     JSBool match;
103004:     if (!JS_StringEqualsAscii(cx, idstr, sIDBConstants[index].name, &match)) {
103004:       return JS_FALSE;
103004:     }
103004:     if (match) {
103004:       break;
103004:     }
103004:   }
103004:   MOZ_ASSERT(index < mozilla::ArrayLength(sIDBConstants));
 92087: 
 92087:   const IDBConstant& c = sIDBConstants[index];
 92087: 
 92087:   // Put a warning on the console
 92087:   nsString warnText =
 92087:     NS_LITERAL_STRING("The constant ") +
 92087:     NS_ConvertASCIItoUTF16(c.interface) +
 92087:     NS_LITERAL_STRING(".") +
 92087:     NS_ConvertASCIItoUTF16(c.name) +
 92087:     NS_LITERAL_STRING(" has been deprecated. Use the string value \"") +
 92087:     NS_ConvertASCIItoUTF16(c.value) +
 92087:     NS_LITERAL_STRING("\" instead.");
 92087: 
 92087:   PRUint64 windowID = 0;
 92087:   nsIScriptContext* context = GetScriptContextFromJSContext(cx);
 92087:   if (context) {
 92087:     nsCOMPtr<nsPIDOMWindow> window =
 92087:       do_QueryInterface(context->GetGlobalObject());
 92087:     if (window) {
 92087:       window = window->GetCurrentInnerWindow();
 92087:     }
 92087:     NS_WARN_IF_FALSE(window, "Missing a window, got a door?");
 92087:     if (window) {
 92087:       windowID = window->WindowID();
 92087:     }
 92087:   }
 92087: 
 92087:   nsCOMPtr<nsIScriptError> errorObject =
 92087:     do_CreateInstance(NS_SCRIPTERROR_CONTRACTID);
 92087:   NS_WARN_IF_FALSE(errorObject, "Failed to create error object");
 92087:   if (errorObject) {
 92087:     nsresult rv = errorObject->InitWithWindowID(warnText.get(),
 92087:                                                 nsnull, // file name
 92087:                                                 nsnull, // source line
 92087:                                                 0, 0, // Line/col number
 92087:                                                 nsIScriptError::warningFlag,
 92087:                                                 "DOM Core", windowID);
 92087:     NS_WARN_IF_FALSE(NS_SUCCEEDED(rv), "Failed to init error object");
 92087: 
 92087:     if (NS_SUCCEEDED(rv)) {
 92087:       nsCOMPtr<nsIConsoleService> consoleServ =
 92087:         do_GetService(NS_CONSOLESERVICE_CONTRACTID);
 92087:       if (consoleServ) {
 92087:         consoleServ->LogMessage(errorObject);
 92087:       }
 92087:     }
 92087:   }
 92087: 
 92087:   // Redefine property to remove getter
 92087:   NS_ConvertASCIItoUTF16 valStr(c.value);
 92087:   jsval value;
 92087:   if (!xpc::StringToJsval(cx, valStr, &value)) {
 92087:     return JS_FALSE;
 92087:   }
 92087:   if (!::JS_DefineProperty(cx, obj, c.name, value, nsnull, nsnull,
 92087:                            JSPROP_ENUMERATE)) {
 92087:     return JS_FALSE;
 92087:   }
 92087: 
 92087:   // Return value
 92087:   *vp = value;
 92087:   return JS_TRUE;
 92087: }
 92087: 
 92087: static nsresult
 92087: DefineIDBInterfaceConstants(JSContext *cx, JSObject *obj, const nsIID *aIID)
 92087: {
 92087:   const char* interface;
 92087:   if (aIID->Equals(NS_GET_IID(nsIIDBCursor))) {
 92087:     interface = IDBConstant::IDBCursor;
 95428:   }
 95428:   else if (aIID->Equals(NS_GET_IID(nsIIDBRequest))) {
 92087:     interface = IDBConstant::IDBRequest;
 95428:   }
 95428:   else if (aIID->Equals(NS_GET_IID(nsIIDBTransaction))) {
 92087:     interface = IDBConstant::IDBTransaction;
 92087:   }
 92087: 
 92087:   for (int8_t i = 0; i < (int8_t)mozilla::ArrayLength(sIDBConstants); ++i) {
 92087:     const IDBConstant& c = sIDBConstants[i];
 92087:     if (c.interface != interface) {
 92087:       continue;
 92087:     }
 92087: 
103004:     if (!JS_DefineProperty(cx, obj, c.name, JSVAL_VOID,
 92087:                            IDBConstantGetter, nsnull,
 92087:                            JSPROP_ENUMERATE)) {
 92087:       return NS_ERROR_UNEXPECTED;
 92087:     }
 92087:   }
 92087: 
 92087:   return NS_OK;
 92087: }
 92087: 
 98467: class nsDOMConstructor MOZ_FINAL : public nsIDOMDOMConstructor
     1: {
 12313: protected:
  1312:   nsDOMConstructor(const PRUnichar* aName,
 79445:                    bool aIsConstructable,
 12313:                    nsPIDOMWindow* aOwner)
  1312:     : mClassName(aName),
 29423:       mConstructable(aIsConstructable),
  8947:       mWeakOwner(do_GetWeakReference(aOwner))
  1312:   {
  1312:   }
     1: 
 12313: public:
 12313: 
 12313:   static nsresult Create(const PRUnichar* aName,
 29423:                          const nsDOMClassInfoData* aData,
 12313:                          const nsGlobalNameStruct* aNameStruct,
 12313:                          nsPIDOMWindow* aOwner,
 12313:                          nsDOMConstructor** aResult);
 12313: 
     1:   NS_DECL_ISUPPORTS
  7842:   NS_DECL_NSIDOMDOMCONSTRUCTOR
     1: 
 60315:   nsresult PreCreate(JSContext *cx, JSObject *globalObj, JSObject **parentObj);
 60315: 
     1:   nsresult Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                      JSObject *obj, PRUint32 argc, jsval *argv,
 79445:                      jsval *vp, bool *_retval);
     1: 
     1:   nsresult HasInstance(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                        JSObject *obj, const jsval &val, bool *bp,
 79445:                        bool *_retval);
     1: 
     1:   nsresult Install(JSContext *cx, JSObject *target, jsval thisAsVal)
     1:   {
 61300:     // The 'attrs' argument used to be JSPROP_PERMANENT. See bug 628612.
 60315:     JSBool ok = JS_WrapValue(cx, &thisAsVal) &&
     1:       ::JS_DefineUCProperty(cx, target,
  3233:                             reinterpret_cast<const jschar *>(mClassName),
 99810:                             NS_strlen(mClassName), thisAsVal, nsnull,
 61300:                             nsnull, 0);
     1: 
     1:     return ok ? NS_OK : NS_ERROR_UNEXPECTED;
     1:   }
     1: 
 80512:   nsresult ResolveInterfaceConstants(JSContext *cx, JSObject *obj);
 80512: 
     1: private:
  1312:   const nsGlobalNameStruct *GetNameStruct()
  1312:   {
  1312:     if (!mClassName) {
  1312:       NS_ERROR("Can't get name");
  1312:       return nsnull;
  1312:     }
  1312: 
  1312:     const nsGlobalNameStruct *nameStruct;
  1312: #ifdef DEBUG
  1312:     nsresult rv =
  1312: #endif
  1312:       GetNameStruct(nsDependentString(mClassName), &nameStruct);
  1312: 
  1312:     NS_ASSERTION(NS_FAILED(rv) || nameStruct, "Name isn't in hash.");
  1312: 
  1312:     return nameStruct;
  1312:   }
  1312: 
  1312:   static nsresult GetNameStruct(const nsAString& aName,
  1312:                                 const nsGlobalNameStruct **aNameStruct)
  1312:   {
  1312:     *aNameStruct = nsnull;
  1312: 
 77905:     nsScriptNameSpaceManager *nameSpaceManager =
 77905:       nsJSRuntime::GetNameSpaceManager();
  7941:     if (!nameSpaceManager) {
  1312:       NS_ERROR("Can't get namespace manager.");
  1312:       return NS_ERROR_UNEXPECTED;
  1312:     }
  1312: 
 94389:     *aNameStruct = nameSpaceManager->LookupName(aName);
  1312: 
  1312:     // Return NS_OK here, aName just isn't a DOM class but nothing failed.
  1312:     return NS_OK;
  1312:   }
  1312: 
 79445:   static bool IsConstructable(const nsDOMClassInfoData *aData)
 29423:   {
 35498:     if (IS_EXTERNAL(aData->mCachedClassInfo)) {
 29423:       const nsExternalDOMClassInfoData* data =
 29423:         static_cast<const nsExternalDOMClassInfoData*>(aData);
 29423:       return data->mConstructorCID != nsnull;
 29423:     }
 29423: 
 29423:     return FindConstructorContractID(aData) || FindConstructorFunc(aData);
 29423:   }
 79445:   static bool IsConstructable(const nsGlobalNameStruct *aNameStruct)
  1312:   {
  1312:     return
  1312:       (aNameStruct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
 29423:        IsConstructable(&sClassInfoData[aNameStruct->mDOMClassInfoID])) ||
  1312:       (aNameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo &&
 29423:        IsConstructable(aNameStruct->mData)) ||
  1312:       aNameStruct->mType == nsGlobalNameStruct::eTypeExternalConstructor ||
  1312:       aNameStruct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias;
  1312:   }
  1312: 
     1:   const PRUnichar*   mClassName;
 79445:   const bool mConstructable;
  8947:   nsWeakPtr          mWeakOwner;
     1: };
     1: 
 12313: //static
 12313: nsresult
 12313: nsDOMConstructor::Create(const PRUnichar* aName,
 29423:                          const nsDOMClassInfoData* aData,
 12313:                          const nsGlobalNameStruct* aNameStruct,
 12313:                          nsPIDOMWindow* aOwner,
 12313:                          nsDOMConstructor** aResult)
 12313: {
 12313:   *aResult = nsnull;
 23151:   // Prevent creating a constructor if aOwner is inner window which doesn't have
 23151:   // an outer window. If the outer window doesn't have an inner window or the
 23151:   // caller can't access the outer window's current inner window then try to use
 23151:   // the owner (so long as it is, in fact, an inner window). If that doesn't
 23151:   // work then prevent creation also.
 14677:   nsPIDOMWindow* outerWindow = aOwner->GetOuterWindow();
 14677:   nsPIDOMWindow* currentInner =
 23151:     outerWindow ? outerWindow->GetCurrentInnerWindow() : aOwner;
 56453:   if (!currentInner ||
 14677:       (aOwner != currentInner &&
 23151:        !nsContentUtils::CanCallerAccess(currentInner) &&
 23151:        !(currentInner = aOwner)->IsInnerWindow())) {
 12313:     return NS_ERROR_DOM_SECURITY_ERR;
 14677:   }
 29423: 
 79445:   bool constructable = aNameStruct ?
 29423:                          IsConstructable(aNameStruct) :
 29423:                          IsConstructable(aData);
 29423: 
 29423:   *aResult = new nsDOMConstructor(aName, constructable, currentInner);
 12313:   NS_ENSURE_TRUE(*aResult, NS_ERROR_OUT_OF_MEMORY);
 12313:   NS_ADDREF(*aResult);
 12313:   return NS_OK;
 12313: }
 12313: 
     1: NS_IMPL_ADDREF(nsDOMConstructor)
     1: NS_IMPL_RELEASE(nsDOMConstructor)
     1: NS_INTERFACE_MAP_BEGIN(nsDOMConstructor)
  7842:   NS_INTERFACE_MAP_ENTRY(nsIDOMDOMConstructor)
     1:   NS_INTERFACE_MAP_ENTRY(nsISupports)
  1312:   if (aIID.Equals(NS_GET_IID(nsIClassInfo))) {
  1312: #ifdef DEBUG
  1312:     {
  1312:       const nsGlobalNameStruct *name_struct = GetNameStruct();
  1312:       NS_ASSERTION(!name_struct ||
  1312:                    mConstructable == IsConstructable(name_struct),
  1312:                    "Can't change constructability dynamically!");
  1312:     }
  1312: #endif
  1312:     foundInterface =
  1312:       NS_GetDOMClassInfoInstance(mConstructable ?
  7842:                                  eDOMClassInfo_DOMConstructor_id :
  7842:                                  eDOMClassInfo_DOMPrototype_id);
  1312:     if (!foundInterface) {
  1312:       *aInstancePtr = nsnull;
  1312:       return NS_ERROR_OUT_OF_MEMORY;
  1312:     }
  1312:   } else
     1: NS_INTERFACE_MAP_END
     1: 
     1: nsresult
 60315: nsDOMConstructor::PreCreate(JSContext *cx, JSObject *globalObj, JSObject **parentObj)
 60315: {
 60315:   nsCOMPtr<nsPIDOMWindow> owner(do_QueryReferent(mWeakOwner));
 60315:   if (!owner) {
 60315:     // Can't do anything.
 60315:     return NS_OK;
 60315:   }
 60315: 
 60315:   nsGlobalWindow *win = static_cast<nsGlobalWindow *>(owner.get());
 97123:   return SetParentToWindow(win, parentObj);
 60315: }
 60315: 
 60315: nsresult
     1: nsDOMConstructor::Construct(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
     1:                             JSObject * obj, PRUint32 argc, jsval * argv,
 79445:                             jsval * vp, bool *_retval)
     1: {
     1:   JSObject* class_obj = JSVAL_TO_OBJECT(argv[-2]);
     1:   if (!class_obj) {
     1:     NS_ERROR("nsDOMConstructor::Construct couldn't get constructor object.");
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
  1312:   const nsGlobalNameStruct *name_struct = GetNameStruct();
  1312:   NS_ENSURE_TRUE(name_struct, NS_ERROR_FAILURE);
  1312: 
  1312:   if (!IsConstructable(name_struct)) {
     1:     // ignore return value, we return JS_FALSE anyway
     1:     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
     1:   }
     1: 
  8947:   return BaseStubConstructor(mWeakOwner, name_struct, cx, obj, argc, argv, vp);
     1: }
     1: 
     1: nsresult
     1: nsDOMConstructor::HasInstance(nsIXPConnectWrappedNative *wrapper,
     1:                               JSContext * cx, JSObject * obj,
 79445:                               const jsval &v, bool *bp, bool *_retval)
     1: 
     1: {
     1:   // No need to look these up in the hash.
 80486:   *bp = false;
     1:   if (JSVAL_IS_PRIMITIVE(v)) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   JSObject *dom_obj = JSVAL_TO_OBJECT(v);
     1:   NS_ASSERTION(dom_obj, "nsDOMConstructor::HasInstance couldn't get object");
     1: 
     1:   // This might not be the right object, if XPCNativeWrapping
     1:   // happened.  Get the wrapped native for this object, then get its
     1:   // JS object.
 30009:   JSObject *wrapped_obj;
 30009:   nsresult rv = nsContentUtils::XPConnect()->GetJSObjectOfWrapper(cx, dom_obj,
 30009:                                                                   &wrapped_obj);
 30009:   if (NS_SUCCEEDED(rv)) {
 30009:     dom_obj = wrapped_obj;
 30009:   }
     1: 
 89430:   JSClass *dom_class = JS_GetClass(dom_obj);
     1:   if (!dom_class) {
     1:     NS_ERROR("nsDOMConstructor::HasInstance can't get class.");
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
  1312:   const nsGlobalNameStruct *name_struct;
 30009:   rv = GetNameStruct(NS_ConvertASCIItoUTF16(dom_class->name), &name_struct);
 74337:   if (NS_FAILED(rv)) {
 74337:     return rv;
 74337:   }
 74337: 
 73970:   if (!name_struct) {
 74337:     // This isn't a normal DOM object, see if this constructor lives on its
 74337:     // prototype chain.
 74337:     jsval val;
 74337:     if (!JS_GetProperty(cx, obj, "prototype", &val)) {
 74337:       return NS_ERROR_UNEXPECTED;
 74337:     }
 74337: 
 95813:     if (JSVAL_IS_PRIMITIVE(val)) {
 95813:       return NS_OK;
 95813:     }
 95813: 
 74337:     JSObject *dot_prototype = JSVAL_TO_OBJECT(val);
 74337: 
 89826:     JSObject *proto = JS_GetPrototype(dom_obj);
 89826:     for ( ; proto; proto = JS_GetPrototype(proto)) {
 74337:       if (proto == dot_prototype) {
 80486:         *bp = true;
 74337:         break;
 74337:       }
 74337:     }
 74337: 
 74337:     return NS_OK;
 73961:   }
 73961: 
     1:   if (name_struct->mType != nsGlobalNameStruct::eTypeClassConstructor &&
     1:       name_struct->mType != nsGlobalNameStruct::eTypeExternalClassInfo &&
     1:       name_struct->mType != nsGlobalNameStruct::eTypeExternalConstructorAlias) {
     1:     // Doesn't have DOM interfaces.
     1:     return NS_OK;
     1:   }
     1: 
  1312:   const nsGlobalNameStruct *class_name_struct = GetNameStruct();
  1312:   NS_ENSURE_TRUE(class_name_struct, NS_ERROR_FAILURE);
     1: 
     1:   if (name_struct == class_name_struct) {
     1:     *bp = JS_TRUE;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
  7941:   NS_ASSERTION(nameSpaceManager, "Can't get namespace manager?");
  1312: 
     1:   const nsIID *class_iid;
     1:   if (class_name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
     1:       class_name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
     1:     class_iid = &class_name_struct->mIID;
     1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
     1:     class_iid =
     1:       sClassInfoData[class_name_struct->mDOMClassInfoID].mProtoChainInterface;
     1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
     1:     class_iid = class_name_struct->mData->mProtoChainInterface;
     1:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
     1:     const nsGlobalNameStruct* alias_struct =
  7941:       nameSpaceManager->GetConstructorProto(class_name_struct);
     1:     if (!alias_struct) {
     1:       NS_ERROR("Couldn't get constructor prototype.");
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1: 
     1:     if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
     1:       class_iid =
     1:         sClassInfoData[alias_struct->mDOMClassInfoID].mProtoChainInterface;
     1:     } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
     1:       class_iid = alias_struct->mData->mProtoChainInterface;
     1:     } else {
     1:       NS_ERROR("Expected eTypeClassConstructor or eTypeExternalClassInfo.");
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   } else {
     1:     *bp = JS_FALSE;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
  7941:     name_struct = nameSpaceManager->GetConstructorProto(name_struct);
     1:     if (!name_struct) {
     1:       NS_ERROR("Couldn't get constructor prototype.");
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   }
     1: 
     1:   NS_ASSERTION(name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
     1:                name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo,
     1:                "The constructor was set up with a struct of the wrong type.");
     1: 
     1:   const nsDOMClassInfoData *ci_data = nsnull;
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
     1:       name_struct->mDOMClassInfoID >= 0) {
     1:     ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
     1:   } else if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
     1:     ci_data = name_struct->mData;
     1:   }
     1: 
     1:   nsCOMPtr<nsIInterfaceInfoManager>
     1:     iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
     1:   if (!iim) {
     1:     NS_ERROR("nsDOMConstructor::HasInstance can't get interface info mgr.");
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
     1:   nsCOMPtr<nsIInterfaceInfo> if_info;
     1:   PRUint32 count = 0;
     1:   const nsIID* class_interface;
     1:   while ((class_interface = ci_data->mInterfaces[count++])) {
     1:     if (class_iid->Equals(*class_interface)) {
     1:       *bp = JS_TRUE;
     1: 
     1:       return NS_OK;
     1:     }
     1: 
     1:     iim->GetInfoForIID(class_interface, getter_AddRefs(if_info));
     1:     if (!if_info) {
     1:       NS_ERROR("nsDOMConstructor::HasInstance can't get interface info.");
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1: 
     1:     if_info->HasAncestor(class_iid, bp);
     1: 
     1:     if (*bp) {
     1:       return NS_OK;
     1:     }
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
 80512: nsresult
 80512: nsDOMConstructor::ResolveInterfaceConstants(JSContext *cx, JSObject *obj)
 80512: {
 80512:   const nsGlobalNameStruct *class_name_struct = GetNameStruct();
 80512:   if (!class_name_struct)
 80512:     return NS_ERROR_UNEXPECTED;
 80512: 
 80512:   const nsIID *class_iid;
 80512:   if (class_name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
 80512:       class_name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
 80512:     class_iid = &class_name_struct->mIID;
 80512:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
 80512:     class_iid =
 80512:       sClassInfoData[class_name_struct->mDOMClassInfoID].mProtoChainInterface;
 80512:   } else if (class_name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
 80512:     class_iid = class_name_struct->mData->mProtoChainInterface;
 80512:   } else {
 80512:     return NS_OK;
 80512:   }
 80512: 
 80512:   nsresult rv = DefineInterfaceConstants(cx, obj, class_iid);
 80512:   NS_ENSURE_SUCCESS(rv, rv);
 80512: 
 80512:   // Special case for |Event|, Event needs constants from NSEvent
 80512:   // too for backwards compatibility.
 80512:   if (class_iid->Equals(NS_GET_IID(nsIDOMEvent))) {
 80512:     rv = DefineInterfaceConstants(cx, obj,
 80512:                                   &NS_GET_IID(nsIDOMNSEvent));
 80512:     NS_ENSURE_SUCCESS(rv, rv);
 80512:   }
 80512: 
 80512:   // Special case for |IDBKeyRange| which gets funny "static" functions.
 80512:   if (class_iid->Equals(NS_GET_IID(nsIIDBKeyRange)) &&
 80512:       !indexedDB::IDBKeyRange::DefineConstructors(cx, obj)) {
 80512:     return NS_ERROR_FAILURE;
 80512:   }
 80512: 
 92087:   // Special case a few IDB interfaces which for now are getting transitional
 92087:   // constants.
 92087:   if (class_iid->Equals(NS_GET_IID(nsIIDBCursor)) ||
 92087:       class_iid->Equals(NS_GET_IID(nsIIDBRequest)) ||
 92087:       class_iid->Equals(NS_GET_IID(nsIIDBTransaction))) {
 92087:     rv = DefineIDBInterfaceConstants(cx, obj, class_iid);
 92087:     NS_ENSURE_SUCCESS(rv, rv);
 92087:   }
 92087: 
 80512:   return NS_OK;
 80512: }
 80512: 
     1: NS_IMETHODIMP
     1: nsDOMConstructor::ToString(nsAString &aResult)
     1: {
     1:   aResult.AssignLiteral("[object ");
     1:   aResult.Append(mClassName);
     1:   aResult.Append(PRUnichar(']'));
     1: 
     1:   return NS_OK;
     1: }
     1: 
 26606: 
 26606: static nsresult
 29423: GetXPCProto(nsIXPConnect *aXPConnect, JSContext *cx, nsGlobalWindow *aWin,
 29423:             const nsGlobalNameStruct *aNameStruct,
 29423:             nsIXPConnectJSObjectHolder **aProto)
 29423: {
 29423:   NS_ASSERTION(aNameStruct->mType ==
 26606:                  nsGlobalNameStruct::eTypeClassConstructor ||
 29423:                aNameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo,
 26606:                "Wrong type!");
 26606: 
 29423:   nsCOMPtr<nsIClassInfo> ci;
 29423:   if (aNameStruct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
 29423:     PRInt32 id = aNameStruct->mDOMClassInfoID;
     1:     NS_ABORT_IF_FALSE(id >= 0, "Negative DOM classinfo?!?");
     1: 
     1:     nsDOMClassInfoID ci_id = (nsDOMClassInfoID)id;
     1: 
 29423:     ci = NS_GetDOMClassInfoInstance(ci_id);
     1: 
     1:     // In most cases we want to find the wrapped native prototype in
     1:     // aWin's scope and use that prototype for
     1:     // ClassName.prototype. But in the case where we're setting up
     1:     // "Window.prototype" or "ChromeWindow.prototype" we want to do
     1:     // the look up in aWin's outer window's scope since the inner
     1:     // window's wrapped native prototype comes from the outer
     1:     // window's scope.
     1:     if (ci_id == eDOMClassInfo_Window_id ||
 29423:         ci_id == eDOMClassInfo_ModalContentWindow_id ||
     1:         ci_id == eDOMClassInfo_ChromeWindow_id) {
 29423:       nsGlobalWindow *scopeWindow = aWin->GetOuterWindowInternal();
 29423: 
 29423:       if (scopeWindow) {
 29423:         aWin = scopeWindow;
 29423:       }
 29423:     }
 29423:   }
 29423:   else {
 29423:     ci = nsDOMClassInfo::GetClassInfoInstance(aNameStruct->mData);
 29423:   }
 29423:   NS_ENSURE_TRUE(ci, NS_ERROR_UNEXPECTED);
 29423: 
 60062:   nsresult rv =
 60062:     aXPConnect->GetWrappedNativePrototype(cx, aWin->GetGlobalJSObject(), ci,
 60062:                                           aProto);
 60062:   NS_ENSURE_SUCCESS(rv, rv);
 60062: 
 60062:   JSObject *proto_obj;
 60062:   (*aProto)->GetJSObject(&proto_obj);
 60062:   if (!JS_WrapObject(cx, &proto_obj)) {
 60062:     return NS_ERROR_FAILURE;
 60062:   }
 60062: 
 60062:   NS_IF_RELEASE(*aProto);
 60062:   return aXPConnect->HoldObject(cx, proto_obj, aProto);
 29423: }
 29423: 
 29423: // Either ci_data must be non-null or name_struct must be non-null and of type
 29423: // eTypeClassProto.
 29423: static nsresult
 29423: ResolvePrototype(nsIXPConnect *aXPConnect, nsGlobalWindow *aWin, JSContext *cx,
 56186:                  JSObject *obj, const PRUnichar *name,
 56186:                  const nsDOMClassInfoData *ci_data,
 29423:                  const nsGlobalNameStruct *name_struct,
 29423:                  nsScriptNameSpaceManager *nameSpaceManager,
 79445:                  JSObject *dot_prototype, bool install, bool *did_resolve)
 29423: {
 29423:   NS_ASSERTION(ci_data ||
 29423:                (name_struct &&
 29423:                 name_struct->mType == nsGlobalNameStruct::eTypeClassProto),
 29423:                "Wrong type or missing ci_data!");
 29423: 
 29423:   nsRefPtr<nsDOMConstructor> constructor;
 29423:   nsresult rv = nsDOMConstructor::Create(name, ci_data, name_struct, aWin,
 29423:                                          getter_AddRefs(constructor));
 29423:   NS_ENSURE_SUCCESS(rv, rv);
 29423: 
 29423:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 29423:   jsval v;
 29423: 
 67679:   rv = WrapNative(cx, obj, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
 80486:                   false, &v, getter_AddRefs(holder));
 29423:   NS_ENSURE_SUCCESS(rv, rv);
 29423: 
 29516:   if (install) {
 29423:     rv = constructor->Install(cx, obj, v);
 29423:     NS_ENSURE_SUCCESS(rv, rv);
 29516:   }
 29423: 
 29423:   JSObject *class_obj;
 29423:   holder->GetJSObject(&class_obj);
 29423:   NS_ASSERTION(class_obj, "The return value lied");
 29423: 
 29423:   const nsIID *primary_iid = &NS_GET_IID(nsISupports);
 29423: 
 29423:   if (!ci_data) {
 29423:     primary_iid = &name_struct->mIID;
 29423:   }
 29423:   else if (ci_data->mProtoChainInterface) {
 29423:     primary_iid = ci_data->mProtoChainInterface;
 29423:   }
 29423: 
 86293:   nsCOMPtr<nsIInterfaceInfo> if_info;
 86293:   nsCOMPtr<nsIInterfaceInfo> parent;
 86293:   const char *class_parent_name = nsnull;
 86293: 
 29423:   if (!primary_iid->Equals(NS_GET_IID(nsISupports))) {
 60315:     JSAutoEnterCompartment ac;
 60315: 
 60315:     if (!ac.enter(cx, class_obj)) {
 60315:       return NS_ERROR_FAILURE;
 60315:     }
 60315: 
 29423:     rv = DefineInterfaceConstants(cx, class_obj, primary_iid);
 29423:     NS_ENSURE_SUCCESS(rv, rv);
 29423: 
 29423:     // Special case for |Event|, Event needs constants from NSEvent
 29423:     // too for backwards compatibility.
 29423:     if (primary_iid->Equals(NS_GET_IID(nsIDOMEvent))) {
 29423:       rv = DefineInterfaceConstants(cx, class_obj,
 29423:                                     &NS_GET_IID(nsIDOMNSEvent));
 29423:       NS_ENSURE_SUCCESS(rv, rv);
 29423:     }
 29423: 
 57301:     // Special case for |IDBKeyRange| which gets funny "static" functions.
 57301:     if (primary_iid->Equals(NS_GET_IID(nsIIDBKeyRange)) &&
 57301:         !indexedDB::IDBKeyRange::DefineConstructors(cx, class_obj)) {
 57301:       return NS_ERROR_FAILURE;
 57301:     }
 86293: 
 92087:     // Special case a few IDB interfaces which for now are getting transitional
 92087:     // constants.
 92087:     if (primary_iid->Equals(NS_GET_IID(nsIIDBCursor)) ||
 92087:         primary_iid->Equals(NS_GET_IID(nsIIDBRequest)) ||
 92087:         primary_iid->Equals(NS_GET_IID(nsIIDBTransaction))) {
 92087:       rv = DefineIDBInterfaceConstants(cx, class_obj, primary_iid);
 92087:       NS_ENSURE_SUCCESS(rv, rv);
 92087:     }
 92087: 
 86293:     nsCOMPtr<nsIInterfaceInfoManager>
 86293:       iim(do_GetService(NS_INTERFACEINFOMANAGER_SERVICE_CONTRACTID));
 86293:     NS_ENSURE_TRUE(iim, NS_ERROR_NOT_AVAILABLE);
 86293: 
 86293:     iim->GetInfoForIID(primary_iid, getter_AddRefs(if_info));
 86293:     NS_ENSURE_TRUE(if_info, NS_ERROR_UNEXPECTED);
 86293: 
 86293:     const nsIID *iid = nsnull;
 86293: 
 86293:     if (ci_data && !ci_data->mHasClassInterface) {
 86293:       if_info->GetIIDShared(&iid);
 86293:     } else {
 86293:       if_info->GetParent(getter_AddRefs(parent));
 86293:       NS_ENSURE_TRUE(parent, NS_ERROR_UNEXPECTED);
 86293: 
 86293:       parent->GetIIDShared(&iid);
 86293:     }
 86293: 
 86293:     if (iid) {
 86293:       if (!iid->Equals(NS_GET_IID(nsISupports))) {
 86293:         if (ci_data && !ci_data->mHasClassInterface) {
 86293:           // If the class doesn't have a class interface the primary
 86293:           // interface is the interface that should be
 86293:           // constructor.prototype.__proto__.
 86293: 
 86293:           if_info->GetNameShared(&class_parent_name);
 86293:         } else {
 86293:           // If the class does have a class interface (or there's no
 86293:           // real class for this name) then the parent of the
 86293:           // primary interface is what we want on
 86293:           // constructor.prototype.__proto__.
 86293: 
 86293:           NS_ASSERTION(parent, "Whoa, this is bad, null parent here!");
 86293: 
 86293:           parent->GetNameShared(&class_parent_name);
 86293:         }
 86293:       }
 86293:     }
 29423:   }
 29423: 
 56186:   {
 56186:     JSObject *winobj = aWin->FastGetGlobalJSObject();
 56186: 
 86293:     JSObject *proto = nsnull;
 86293: 
 86293:     if (class_parent_name) {
 86293:       JSAutoEnterCompartment ac;
 86293:       if (!ac.enter(cx, winobj)) {
 86293:         return NS_ERROR_UNEXPECTED;
 86293:       }
 86293: 
 98362:       JS::Value val;
 98362:       if (!JS_LookupProperty(cx, winobj, CutPrefix(class_parent_name), &val)) {
 86293:         return NS_ERROR_UNEXPECTED;
 86293:       }
 86293: 
 98362:       if (val.isObject()) {
 98362:         if (!JS_LookupProperty(cx, &val.toObject(), "prototype", &val)) {
 86293:           return NS_ERROR_UNEXPECTED;
 86293:         }
 86293: 
 98362:         if (val.isObject()) {
 98362:           proto = &val.toObject();
 86293:         }
 86293:       }
 86293:     }
 29423: 
 29423:     if (dot_prototype) {
 60209:       JSAutoEnterCompartment ac;
 60209:       if (!ac.enter(cx, dot_prototype)) {
 60209:         return NS_ERROR_UNEXPECTED;
 60209:       }
 60209: 
 89826:       JSObject *xpc_proto_proto = ::JS_GetPrototype(dot_prototype);
     1: 
  6767:       if (proto &&
  6767:           (!xpc_proto_proto ||
 89430:            JS_GetClass(xpc_proto_proto) == sObjectClass)) {
 56823:         if (!JS_WrapObject(cx, &proto) ||
 56823:             !JS_SetPrototype(cx, dot_prototype, proto)) {
     1:           return NS_ERROR_UNEXPECTED;
     1:         }
     1:       }
     1:     } else {
 60209:       JSAutoEnterCompartment ac;
 60209:       if (!ac.enter(cx, winobj)) {
 60209:         return NS_ERROR_UNEXPECTED;
 60209:       }
 60209: 
     1:       dot_prototype = ::JS_NewObject(cx, &sDOMConstructorProtoClass, proto,
 56186:                                      winobj);
     1:       NS_ENSURE_TRUE(dot_prototype, NS_ERROR_OUT_OF_MEMORY);
     1:     }
 56186:   }
     1: 
     1:   v = OBJECT_TO_JSVAL(dot_prototype);
     1: 
 60315:   JSAutoEnterCompartment ac;
 60315:   if (!ac.enter(cx, class_obj)) {
 60315:     return NS_ERROR_UNEXPECTED;
 60315:   }
 60315: 
     1:   // Per ECMA, the prototype property is {DontEnum, DontDelete, ReadOnly}
 56186:   if (!JS_WrapValue(cx, &v) ||
 56186:       !JS_DefineProperty(cx, class_obj, "prototype", v, nsnull, nsnull,
     1:                          JSPROP_PERMANENT | JSPROP_READONLY)) {
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
 80486:   *did_resolve = true;
     1: 
     1:   return NS_OK;
     1: }
     1: 
102302: static bool
102302: ConstructorEnabled(const nsGlobalNameStruct *aStruct, nsGlobalWindow *aWin)
102302: {
102302:   MOZ_ASSERT(aStruct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
102302:              aStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo);
102302: 
102302:   // Don't expose chrome only constructors to content windows.
102302:   if (aStruct->mChromeOnly &&
102302:       !nsContentUtils::IsSystemPrincipal(aWin->GetPrincipal())) {
102302:     return false;
102302:   }
102302: 
102302:   // For now don't expose web sockets unless user has explicitly enabled them
102302:   if (aStruct->mDOMClassInfoID == eDOMClassInfo_WebSocket_id) {
102302:     if (!nsWebSocket::PrefEnabled()) {
102302:       return false;
102302:     }
102302:   }
102302: 
102302:   // For now don't expose server events unless user has explicitly enabled them
102302:   if (aStruct->mDOMClassInfoID == eDOMClassInfo_EventSource_id) {
102302:     if (!nsEventSource::PrefEnabled()) {
102302:       return false;
102302:     }
102302:   }
102302: 
102302:   return true;
102302: }
 26606: 
 26606: // static
 26606: nsresult
 55578: nsWindowSH::GlobalResolve(nsGlobalWindow *aWin, JSContext *cx,
 79445:                           JSObject *obj, jsid id, bool *did_resolve)
 26606: {
 80486:   *did_resolve = false;
 26606: 
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
 26606:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
 26606: 
 59889:   nsDependentJSString name(id);
 26606: 
 26606:   const PRUnichar *class_name = nsnull;
 94389:   const nsGlobalNameStruct *name_struct =
 94389:     nameSpaceManager->LookupName(name, &class_name);
 26606: 
 26606:   if (!name_struct) {
 26606:     return NS_OK;
 26606:   }
 26606: 
 26606:   NS_ENSURE_TRUE(class_name, NS_ERROR_UNEXPECTED);
 26606: 
 26606:   nsresult rv = NS_OK;
 26606: 
 26606:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
 26606:     rv = GetExternalClassInfo(nameSpaceManager, name, name_struct,
 26606:                               &name_struct);
 26606:     if (NS_FAILED(rv) || !name_struct) {
 26606:       return rv;
 26606:     }
 26606:   }
 26606: 
102302:   if (name_struct->mType == nsGlobalNameStruct::eTypeNewDOMBinding ||
102302:       name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
102302:       name_struct->mType == nsGlobalNameStruct::eTypeClassProto ||
102302:       name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
102302:     // Lookup new DOM bindings.
102302:     mozilla::dom::binding::DefineInterface define =
102302:       name_struct->mDefineDOMInterface;
102302:     if (define) {
102302:       if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
102302:           !ConstructorEnabled(name_struct, aWin)) {
102302:         return NS_OK;
102302:       }
102302: 
102302:       if (mozilla::dom::binding::DefineConstructor(cx, obj, define, &rv)) {
102302:         *did_resolve = NS_SUCCEEDED(rv);
102302: 
102302:         return rv;
102302:       }
102302:     }
102302:   }
102302: 
 26606:   if (name_struct->mType == nsGlobalNameStruct::eTypeInterface) {
 26606:     // We're resolving a name of a DOM interface for which there is no
 26606:     // direct DOM class, create a constructor object...
 26606:     nsRefPtr<nsDOMConstructor> constructor;
 29423:     rv = nsDOMConstructor::Create(class_name,
 29423:                                   nsnull,
 26606:                                   name_struct,
 26606:                                   static_cast<nsPIDOMWindow*>(aWin),
 26606:                                   getter_AddRefs(constructor));
 26606:     NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 26606:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 26606:     jsval v;
 30625:     rv = WrapNative(cx, obj, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
 80486:                     false, &v, getter_AddRefs(holder));
 26606:     NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 26606:     rv = constructor->Install(cx, obj, v);
 26606:     NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 26606:     JSObject *class_obj;
 26606:     holder->GetJSObject(&class_obj);
 26606:     NS_ASSERTION(class_obj, "The return value lied");
 26606: 
 26606:     // ... and define the constants from the DOM interface on that
 26606:     // constructor object.
 26606: 
 26606:     rv = DefineInterfaceConstants(cx, class_obj, &name_struct->mIID);
 26606:     NS_ENSURE_SUCCESS(rv, rv);
 26606: 
 80486:     *did_resolve = true;
 26606: 
 26606:     return NS_OK;
 26606:   }
 26606: 
 26606:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
 29423:       name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
102302:     if (!ConstructorEnabled(name_struct, aWin)) {
102302:       return NS_OK;
 80079:     }
 80079: 
 29423:     // Create the XPConnect prototype for our classinfo, PostCreateProto will
 29423:     // set up the prototype chain.
 29423:     nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
 29423:     rv = GetXPCProto(sXPConnect, cx, aWin, name_struct,
 29423:                      getter_AddRefs(proto_holder));
 29423: 
 30636:     if (NS_SUCCEEDED(rv) && obj != aWin->GetGlobalJSObject()) {
 30636:       JSObject* dot_prototype;
 30636:       rv = proto_holder->GetJSObject(&dot_prototype);
 30636:       NS_ENSURE_SUCCESS(rv, rv);
 30636: 
 30636:       const nsDOMClassInfoData *ci_data;
 30636:       if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
 30636:         ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
 30636:       } else {
 30636:         ci_data = name_struct->mData;
 30636:       }
 30636: 
 56186:       return ResolvePrototype(sXPConnect, aWin, cx, obj, class_name, ci_data,
 30636:                               name_struct, nameSpaceManager, dot_prototype,
 80486:                               true, did_resolve);
 30636:     }
 30636: 
 29423:     *did_resolve = NS_SUCCEEDED(rv);
 29423: 
 29423:     return rv;
 29423:   }
 29423: 
 29423:   if (name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
 29423:     // We don't have a XPConnect prototype object, let ResolvePrototype create
 29423:     // one.
 56186:     return ResolvePrototype(sXPConnect, aWin, cx, obj, class_name, nsnull,
 80486:                             name_struct, nameSpaceManager, nsnull, true,
 29516:                             did_resolve);
 29423:   }
 29423: 
 29423:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
 29423:     const nsGlobalNameStruct *alias_struct =
 29423:       nameSpaceManager->GetConstructorProto(name_struct);
 29423:     NS_ENSURE_TRUE(alias_struct, NS_ERROR_UNEXPECTED);
 29423: 
 29423:     // We need to use the XPConnect prototype for the DOM class that this
 29423:     // constructor is an alias for (for example for Image we need the prototype
 29423:     // for HTMLImageElement).
 29423:     nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
 29423:     rv = GetXPCProto(sXPConnect, cx, aWin, alias_struct,
 29423:                      getter_AddRefs(proto_holder));
 29423:     NS_ENSURE_SUCCESS(rv, rv);
 29423: 
 29423:     JSObject* dot_prototype;
 29423:     rv = proto_holder->GetJSObject(&dot_prototype);
 29423:     NS_ENSURE_SUCCESS(rv, rv);
 29423: 
 29423:     const nsDOMClassInfoData *ci_data;
 29423:     if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
 29423:       ci_data = &sClassInfoData[alias_struct->mDOMClassInfoID];
 29423:     } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
 29423:       ci_data = alias_struct->mData;
 29423:     } else {
 29423:       return NS_ERROR_UNEXPECTED;
 29423:     }
 29423: 
 56186:     return ResolvePrototype(sXPConnect, aWin, cx, obj, class_name, ci_data,
 80486:                             name_struct, nameSpaceManager, nsnull, true,
 29516:                             did_resolve);
 26606:   }
 26606: 
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
 12313:     nsRefPtr<nsDOMConstructor> constructor;
 29423:     rv = nsDOMConstructor::Create(class_name, nsnull, name_struct,
 12313:                                   static_cast<nsPIDOMWindow*>(aWin),
 12313:                                   getter_AddRefs(constructor));
 12313:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     jsval val;
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 22842:     rv = WrapNative(cx, obj, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
 80486:                     false, &val, getter_AddRefs(holder));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     rv = constructor->Install(cx, obj, val);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     JSObject* class_obj;
     1:     holder->GetJSObject(&class_obj);
     1:     NS_ASSERTION(class_obj, "Why didn't we get a JSObject?");
     1: 
 80486:     *did_resolve = true;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeProperty) {
 41030:     if (name_struct->mChromeOnly && !nsContentUtils::IsCallerChrome())
  2797:       return NS_OK;
  2797: 
     1:     nsCOMPtr<nsISupports> native(do_CreateInstance(name_struct->mCID, &rv));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
 57371:     jsval prop_val = JSVAL_VOID; // Property value.
     1: 
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
     1:     nsCOMPtr<nsIScriptObjectOwner> owner(do_QueryInterface(native));
     1:     if (owner) {
     1:       nsIScriptContext *context = nsJSUtils::GetStaticScriptContext(cx, obj);
     1:       NS_ENSURE_TRUE(context, NS_ERROR_UNEXPECTED);
     1: 
     1:       JSObject *prop_obj = nsnull;
     1:       rv = owner->GetScriptObject(context, (void**)&prop_obj);
 62126:       NS_ENSURE_TRUE(NS_SUCCEEDED(rv) && prop_obj, NS_ERROR_UNEXPECTED);
     1: 
     1:       prop_val = OBJECT_TO_JSVAL(prop_obj);
     1:     } else {
 57371:       nsCOMPtr<nsIDOMGlobalPropertyInitializer> gpi(do_QueryInterface(native));
 57371: 
 57371:       if (gpi) {
 57371:         rv = gpi->Init(aWin, &prop_val);
 57371:         NS_ENSURE_SUCCESS(rv, rv);
 57371:       }
 57371:     }
 57371: 
 87913:     if (JSVAL_IS_PRIMITIVE(prop_val) && !JSVAL_IS_NULL(prop_val)) {
     1:       JSObject *scope;
     1: 
     1:       if (aWin->IsOuterWindow()) {
     1:         nsGlobalWindow *inner = aWin->GetCurrentInnerWindowInternal();
     1:         NS_ENSURE_TRUE(inner, NS_ERROR_UNEXPECTED);
     1: 
     1:         scope = inner->GetGlobalJSObject();
     1:       } else {
     1:         scope = aWin->GetGlobalJSObject();
     1:       }
     1: 
 80486:       rv = WrapNative(cx, scope, native, true, &prop_val,
 30625:                       getter_AddRefs(holder));
     1:     }
     1: 
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
 62126:     if (!JS_WrapValue(cx, &prop_val)) {
 62126:       return NS_ERROR_UNEXPECTED;
 62126:     }
 62126: 
 59889:     JSBool ok = ::JS_DefinePropertyById(cx, obj, id, prop_val, nsnull, nsnull,
     1:                                         JSPROP_ENUMERATE);
     1: 
 80486:     *did_resolve = true;
     1: 
     1:     return ok ? NS_OK : NS_ERROR_FAILURE;
     1:   }
     1: 
     1:   if (name_struct->mType == nsGlobalNameStruct::eTypeDynamicNameSet) {
     1:     nsCOMPtr<nsIScriptExternalNameSet> nameset =
     1:       do_CreateInstance(name_struct->mCID, &rv);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     nsIScriptContext *context = aWin->GetContext();
     1:     NS_ENSURE_TRUE(context, NS_ERROR_UNEXPECTED);
     1: 
     1:     rv = nameset->InitializeNameSet(context);
     1: 
 80486:     *did_resolve = true;
     1:   }
     1: 
     1:   return rv;
     1: }
     1: 
     1: // Native code for window._content getter, this simply maps
     1: // window._content to window.content for backwards compatibility only.
 18907: static JSBool
 91237: ContentWindowGetter(JSContext *cx, unsigned argc, jsval *vp)
 53557: {
 53557:   JSObject *obj = JS_THIS_OBJECT(cx, vp);
 53557:   if (!obj)
 53557:     return JS_FALSE;
 53557: 
 53557:   return ::JS_GetProperty(cx, obj, "content", vp);
     1: }
     1: 
 74337: static JSNewResolveOp sOtherResolveFuncs[] = {
 74337:   mozilla::dom::workers::ResolveWorkerClasses
 74337: };
 74337: 
 77776: template<class Interface>
 77776: static nsresult
 77776: LocationSetterGuts(JSContext *cx, JSObject *obj, jsval *vp)
 77776: {
 77776:   // This function duplicates some of the logic in XPC_WN_HelperSetProperty
 77776:   XPCWrappedNative *wrapper =
 77776:     XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj);
 77776: 
 77776:   // The error checks duplicate code in THROW_AND_RETURN_IF_BAD_WRAPPER
 78692:   NS_ENSURE_TRUE(!wrapper || wrapper->IsValid(), NS_ERROR_XPC_HAS_BEEN_SHUTDOWN);
 78692: 
 78692:   nsCOMPtr<Interface> xpcomObj = do_QueryWrappedNative(wrapper, obj);
 77776:   NS_ENSURE_TRUE(xpcomObj, NS_ERROR_UNEXPECTED);
 77776: 
 77776:   nsCOMPtr<nsIDOMLocation> location;
 77776:   nsresult rv = xpcomObj->GetLocation(getter_AddRefs(location));
 77776:   NS_ENSURE_SUCCESS(rv, rv);
 77776: 
 77976:   // Grab the value we're being set to before we stomp on |vp|
 77946:   JSString *val = ::JS_ValueToString(cx, *vp);
 77946:   NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
 77946: 
 77976:   // Make sure |val| stays alive below
 77976:   JS::Anchor<JSString *> anchor(val);
 77976: 
 77976:   // We have to wrap location into vp before null-checking location, to
 77976:   // avoid assigning the wrong thing into the slot.
 77976:   nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 77976:   rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), location,
 80486:                   &NS_GET_IID(nsIDOMLocation), true, vp,
 77976:                   getter_AddRefs(holder));
 77976:   NS_ENSURE_SUCCESS(rv, rv);
 77976: 
 77976:   if (!location) {
 77976:     // Make this a no-op
 77976:     return NS_OK;
 77976:   }
 77976: 
 77946:   nsDependentJSString depStr;
 77946:   NS_ENSURE_TRUE(depStr.init(cx, val), NS_ERROR_UNEXPECTED);
 77946:   
 77976:   return location->SetHref(depStr);
 77776: }
 77776: 
 77776: template<class Interface>
 77776: static JSBool
 98960: LocationSetter(JSContext *cx, JSHandleObject obj, JSHandleId id, JSBool strict,
 77776:                jsval *vp)
 77776: {
 77776:   nsresult rv = LocationSetterGuts<Interface>(cx, obj, vp);
 77776:   if (NS_FAILED(rv)) {
102364:     xpc::Throw(cx, rv);
 77776:     return JS_FALSE;
 77776:   }
 77776: 
 77776:   return JS_TRUE;
 77776: }
 77776: 
 77776: static JSBool
 98960: LocationSetterUnwrapper(JSContext *cx, JSHandleObject obj_, JSHandleId id, JSBool strict,
 77776:                         jsval *vp)
 77776: {
 99421:   JS::RootedObject obj(cx, obj_);
 98960: 
 77776:   JSObject *wrapped = XPCWrapper::UnsafeUnwrapSecurityWrapper(obj);
 77776:   if (wrapped) {
 77776:     obj = wrapped;
 77776:   }
 77776: 
 77776:   return LocationSetter<nsIDOMWindow>(cx, obj, id, strict, vp);
 77776: }
 77776: 
 55578: NS_IMETHODIMP
 55578: nsWindowSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 98960:                        JSObject *obj_, jsid id_, PRUint32 flags,
 79445:                        JSObject **objp, bool *_retval)
 50475: {
 99421:   JS::RootedObject obj(cx, obj_);
 99421:   JS::RootedId id(cx, id_);
 98960: 
 50475:   nsGlobalWindow *win = nsGlobalWindow::FromWrapper(wrapper);
 50475: 
 48470:   if (!JSID_IS_STRING(id)) {
 75049:     if (JSID_IS_INT(id) && JSID_TO_INT(id) >= 0 && !(flags & JSRESOLVE_ASSIGNING)) {
     1:       // If we're resolving a numeric property, treat that as if
     1:       // window.frames[n] is resolved (since window.frames ===
     1:       // window), if window.frames[n] is a child frame, define a
     1:       // property for this index.
 75049:       PRUint32 index = PRUint32(JSID_TO_INT(id));
 75049:       if (nsCOMPtr<nsIDOMWindow> frame = GetChildFrame(win, index)) {
     1:         // A numeric property accessed and the numeric property is a
     1:         // child frame. Define a property for this index.
     1: 
 75049:         *_retval = ::JS_DefineElement(cx, obj, index, JSVAL_VOID,
 41951:                                       nsnull, nsnull, JSPROP_SHARED);
     1: 
     1:         if (*_retval) {
     1:           *objp = obj;
     1:         }
     1:       }
     1:     }
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsIScriptContext *my_context = win->GetContextInternal();
     1: 
     1:   nsresult rv = NS_OK;
     1: 
     1:   // Resolve standard classes on my_context's JSContext (or on cx,
     1:   // if we don't have a my_context yet), in case the two contexts
     1:   // have different origins.  We want lazy standard class
     1:   // initialization to behave as if it were done eagerly, on each
     1:   // window's own context (not on some other window-caller's
     1:   // context).
     1: 
 16685:   JSBool did_resolve = JS_FALSE;
     1:   JSContext *my_cx;
     1: 
 55601:   JSBool ok = JS_TRUE;
 55601:   jsval exn = JSVAL_VOID;
 62726:   if (!ObjectIsNativeWrapper(cx, obj)) {
 55601:     JSAutoEnterCompartment ac;
 55601: 
     1:     if (!my_context) {
     1:       my_cx = cx;
     1:     } else {
 78415:       my_cx = my_context->GetNativeContext();
 55601: 
 55601:       if (my_cx != cx) {
 55601:         if (!ac.enter(my_cx, obj)) {
 55601:           return NS_ERROR_UNEXPECTED;
 55601:         }
 55601:       }
 55601:     }
 55601: 
 48481:     JSAutoRequest transfer(my_cx);
 16685: 
 13266:     // Don't resolve standard classes on XPCNativeWrapper etc, only
 13266:     // resolve them if we're resolving on the real global object.
 62726:     ok = JS_ResolveStandardClass(my_cx, obj, id, &did_resolve);
     1: 
     1:     if (!ok) {
     1:       // Trust the JS engine (or the script security manager) to set
     1:       // the exception in the JS engine.
     1: 
     1:       if (!JS_GetPendingException(my_cx, &exn)) {
     1:         return NS_ERROR_UNEXPECTED;
     1:       }
     1: 
     1:       // Return NS_OK to avoid stomping over the exception that was passed
     1:       // down from the ResolveStandardClass call.
     1:       // Note that the order of the JS_ClearPendingException and
     1:       // JS_SetPendingException is important in the case that my_cx == cx.
     1: 
     1:       JS_ClearPendingException(my_cx);
 16685:     }
 16685:   }
 16685: 
 16685:   if (!ok) {
     1:     JS_SetPendingException(cx, exn);
     1:     *_retval = JS_FALSE;
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (did_resolve) {
     1:     *objp = obj;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
     1:     // We want this code to be before the child frame lookup code
     1:     // below so that a child frame named 'constructor' doesn't
     1:     // shadow the window's constructor property.
 98960:     if (sConstructor_id == id) {
     1:       return ResolveConstructor(cx, obj, objp);
     1:     }
     1:   }
     1: 
     1:   if (!my_context || !my_context->IsContextInitialized()) {
     1:     // The context is not yet initialized so there's nothing we can do
     1:     // here yet.
     1: 
     1:     return NS_OK;
     1:   }
     1: 
 98960:   if (sLocation_id == id) {
 72198:     // This must be done even if we're just getting the value of
 72198:     // window.location (i.e. no checking flags & JSRESOLVE_ASSIGNING
 72198:     // here) since we must define window.location to prevent the
 72198:     // getter from being overriden (for security reasons).
 72198: 
 72198:     // Note: Because we explicitly don't forward to the inner window
 72198:     // above, we have to ensure here that our window has a current
 72198:     // inner window so that the location object we return will work.
 72198: 
 72198:     if (win->IsOuterWindow()) {
 72198:       win->EnsureInnerWindow();
 72198:     }
 72198: 
 72198:     nsCOMPtr<nsIDOMLocation> location;
 72198:     rv = win->GetLocation(getter_AddRefs(location));
 72198:     NS_ENSURE_SUCCESS(rv, rv);
 72198: 
 72198:     // Make sure we wrap the location object in the inner window's
 72198:     // scope if we've got an inner window.
 72198:     JSObject *scope = nsnull;
 72198:     if (win->IsOuterWindow()) {
 72198:       nsGlobalWindow *innerWin = win->GetCurrentInnerWindowInternal();
 72198: 
 72198:       if (innerWin) {
 72198:         scope = innerWin->GetGlobalJSObject();
 72198:       }
 72198:     }
 72198: 
 72198:     if (!scope) {
 72198:       wrapper->GetJSObject(&scope);
 72198:     }
 72198: 
 72198:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 72198:     jsval v;
 80486:     rv = WrapNative(cx, scope, location, &NS_GET_IID(nsIDOMLocation), true,
 72198:                     &v, getter_AddRefs(holder));
 72198:     NS_ENSURE_SUCCESS(rv, rv);
 72198: 
 72198:     JSBool ok = JS_WrapValue(cx, &v) &&
 77776:                 JS_DefinePropertyById(cx, obj, id, v, nsnull,
 77776:                                       LocationSetterUnwrapper,
 72198:                                       JSPROP_PERMANENT | JSPROP_ENUMERATE);
 72198: 
 72198:     if (!ok) {
 72198:       return NS_ERROR_FAILURE;
 72198:     }
 72198: 
 72198:     *objp = obj;
 72198: 
 72198:     return NS_OK;
 72198:   }
     1: 
     1:   // Hmm, we do an awful lot of QIs here; maybe we should add a
     1:   // method on an interface that would let us just call into the
     1:   // window code directly...
     1: 
 62726:   if (!ObjectIsNativeWrapper(cx, obj)) {
     1:     nsCOMPtr<nsIDocShellTreeNode> dsn(do_QueryInterface(win->GetDocShell()));
     1: 
     1:     PRInt32 count = 0;
     1: 
     1:     if (dsn) {
     1:       dsn->GetChildCount(&count);
     1:     }
     1: 
     1:     if (count > 0) {
     1:       nsCOMPtr<nsIDocShellTreeItem> child;
     1: 
 59889:       const jschar *chars = ::JS_GetInternedStringChars(JSID_TO_STRING(id));
     1: 
  3233:       dsn->FindChildWithName(reinterpret_cast<const PRUnichar*>(chars),
 80486:                              false, true, nsnull, nsnull,
     1:                              getter_AddRefs(child));
     1: 
     1:       nsCOMPtr<nsIDOMWindow> child_win(do_GetInterface(child));
     1: 
     1:       if (child_win) {
     1:         // We found a subframe of the right name, define the property
     1:         // on the wrapper so that ::NewResolve() doesn't get called
     1:         // again for this property name.
     1: 
     1:         JSObject *wrapperObj;
     1:         wrapper->GetJSObject(&wrapperObj);
     1: 
     1:         jsval v;
     1:         nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
     1:         rv = WrapNative(cx, wrapperObj, child_win,
 80486:                         &NS_GET_IID(nsIDOMWindow), true, &v,
     1:                         getter_AddRefs(holder));
     1:         NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:         JSAutoRequest ar(cx);
     1: 
 79445:         bool ok = JS_WrapValue(cx, &v) &&
 55597:                     JS_DefinePropertyById(cx, obj, id, v, nsnull, nsnull, 0);
     1:         if (!ok) {
     1:           return NS_ERROR_FAILURE;
     1:         }
     1: 
     1:         *objp = obj;
     1: 
     1:         return NS_OK;
     1:       }
     1:     }
     1:   }
     1: 
     1:   // It is not worth calling GlobalResolve() if we are resolving
     1:   // for assignment, since only read-write properties get dealt
     1:   // with there.
     1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
     1:     JSAutoRequest ar(cx);
     1: 
 74337:     // Resolve special classes.
 80467:     for (PRUint32 i = 0; i < ArrayLength(sOtherResolveFuncs); i++) {
 74337:       if (!sOtherResolveFuncs[i](cx, obj, id, flags, objp)) {
 74337:         return NS_ERROR_FAILURE;
 74337:       }
 74337:       if (*objp) {
 74337:         return NS_OK;
 74337:       }
 74337:     }
 74337: 
     1:     // Call GlobalResolve() after we call FindChildWithName() so
     1:     // that named child frames will override external properties
     1:     // which have been registered with the script namespace manager.
     1: 
 79445:     bool did_resolve = false;
 59889:     rv = GlobalResolve(win, cx, obj, id, &did_resolve);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     if (did_resolve) {
     1:       // GlobalResolve() resolved something, so we're done here.
     1:       *objp = obj;
     1: 
     1:       return NS_OK;
     1:     }
     1:   }
     1: 
 98960:   if (s_content_id == id) {
     1:     // Map window._content to window.content for backwards
     1:     // compatibility, this should spit out an message on the JS
     1:     // console.
     1: 
     1:     JSObject *windowObj = win->GetGlobalJSObject();
     1: 
     1:     JSAutoRequest ar(cx);
     1: 
     1:     JSFunction *fun = ::JS_NewFunction(cx, ContentWindowGetter, 0, 0,
     1:                                        windowObj, "_content");
     1:     if (!fun) {
     1:       return NS_ERROR_OUT_OF_MEMORY;
     1:     }
     1: 
     1:     JSObject *funObj = ::JS_GetFunctionObject(fun);
     1: 
 48470:     if (!::JS_DefinePropertyById(cx, windowObj, id, JSVAL_VOID,
 26021:                                  JS_DATA_TO_FUNC_PTR(JSPropertyOp, funObj),
 26021:                                  nsnull,
     1:                                  JSPROP_ENUMERATE | JSPROP_GETTER |
     1:                                  JSPROP_SHARED)) {
     1:       return NS_ERROR_FAILURE;
     1:     }
     1: 
     1:     *objp = obj;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   if (flags & JSRESOLVE_ASSIGNING) {
     1:     if (IsReadonlyReplaceable(id) ||
     1:         (!(flags & JSRESOLVE_QUALIFIED) && IsWritableReplaceable(id))) {
     1:       // A readonly "replaceable" property is being set, or a
     1:       // readwrite "replaceable" property is being set w/o being
     1:       // fully qualified. Define the property on obj with the value
     1:       // undefined to override the predefined property. This is done
     1:       // for compatibility with other browsers.
     1:       JSAutoRequest ar(cx);
     1: 
 48470:       if (!::JS_DefinePropertyById(cx, obj, id, JSVAL_VOID, JS_PropertyStub,
 62397:                                    JS_StrictPropertyStub, JSPROP_ENUMERATE)) {
     1:         return NS_ERROR_FAILURE;
     1:       }
     1:       *objp = obj;
     1: 
     1:       return NS_OK;
     1:     }
     1:   } else {
 98960:     if (sNavigator_id == id) {
     1:       nsCOMPtr<nsIDOMNavigator> navigator;
     1:       rv = win->GetNavigator(getter_AddRefs(navigator));
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:       jsval v;
     1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 80486:       rv = WrapNative(cx, obj, navigator, &NS_GET_IID(nsIDOMNavigator), true,
 30625:                       &v, getter_AddRefs(holder));
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
 83058:       // Hold on to the navigator object as a global property so we
 83058:       // don't need to worry about losing expando properties etc.
 48470:       if (!::JS_DefinePropertyById(cx, obj, id, v, nsnull, nsnull,
     1:                                    JSPROP_READONLY | JSPROP_PERMANENT |
     1:                                    JSPROP_ENUMERATE)) {
     1:         return NS_ERROR_FAILURE;
     1:       }
     1:       *objp = obj;
     1: 
     1:       return NS_OK;
     1:     }
     1: 
 98960:     if (sDocument_id == id) {
     1:       nsCOMPtr<nsIDOMDocument> document;
     1:       rv = win->GetDocument(getter_AddRefs(document));
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
 48171:       // FIXME Ideally we'd have an nsIDocument here and get nsWrapperCache
 48171:       //       from it.
     1:       jsval v;
     1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 55604:       rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), document,
 80486:                       &NS_GET_IID(nsIDOMDocument), false, &v,
 55604:                       getter_AddRefs(holder));
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:       // The PostCreate hook for the document will handle defining the
     1:       // property
     1:       *objp = obj;
     1: 
 62726:       // NB: We need to do this for any Xray wrapper.
 62726:       if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
 40557:         // Unless our object is a native wrapper, in which case we have to
 40557:         // define it ourselves.
 40557: 
 55603:         *_retval = JS_WrapValue(cx, &v) &&
 55603:                    JS_DefineProperty(cx, obj, "document", v, NULL, NULL,
 40557:                                      JSPROP_READONLY | JSPROP_ENUMERATE);
 40557:         if (!*_retval) {
 40557:           return NS_ERROR_UNEXPECTED;
 40557:         }
 40557:       }
 40557: 
     1:       return NS_OK;
     1:     }
     1: 
 98960:     if (sDialogArguments_id == id && win->IsModalContentWindow()) {
 33525:       nsCOMPtr<nsIArray> args;
 33525:       ((nsGlobalModalWindow *)win)->GetDialogArguments(getter_AddRefs(args));
 33525: 
 33525:       nsIScriptContext *script_cx = win->GetContext();
 33525:       if (script_cx) {
 33525:         JSAutoSuspendRequest asr(cx);
 33525: 
 33525:         // Make nsJSContext::SetProperty()'s magic argument array
 33525:         // handling happen.
 33525:         rv = script_cx->SetProperty(obj, "dialogArguments", args);
 33525:         NS_ENSURE_SUCCESS(rv, rv);
 33525: 
 33525:         *objp = obj;
 33525:       }
 33525: 
 33525:       return NS_OK;
  6774:     }
     1:   }
     1: 
 12524:   JSObject *oldobj = *objp;
 77149:   rv = nsDOMGenericSH::NewResolve(wrapper, cx, obj, id, flags, objp,
     1:                                   _retval);
 12524: 
 12524:   if (NS_FAILED(rv) || *objp != oldobj) {
 12524:     // Something went wrong, or the property got resolved. Return.
 12524:     return rv;
 12524:   }
 12524: 
 12586:   // Make a fast expando if we're assigning to (not declaring or
 12586:   // binding a name) a new undefined property that's not already
 12586:   // defined on our prototype chain. This way we can access this
 12586:   // expando w/o ever getting back into XPConnect.
101158:   if (flags & JSRESOLVE_ASSIGNING) {
 12524:     JSObject *realObj;
 12524:     wrapper->GetJSObject(&realObj);
 12524: 
 12524:     if (obj == realObj) {
 79734:       JSObject *proto = js::GetObjectProto(obj);
 12524:       if (proto) {
 19712:         JSObject *pobj = NULL;
 19712:         jsval val;
 12524: 
 48470:         if (!::JS_LookupPropertyWithFlagsById(cx, proto, id, flags,
 19712:                                               &pobj, &val)) {
 12524:           *_retval = JS_FALSE;
 12524: 
 12524:           return NS_OK;
 12524:         }
 12524: 
 19712:         if (pobj) {
 19712:           // A property was found on the prototype chain.
 19712:           *objp = pobj;
 12524:           return NS_OK;
 12524:         }
 12524:       }
 12524: 
 12524:       // Define a fast expando, the key here is to use JS_PropertyStub
 12524:       // as the getter/setter, which makes us stay out of XPConnect
 12524:       // when using this property.
 12524:       //
 12524:       // We don't need to worry about property attributes here as we
 12524:       // know here we're dealing with an undefined property set, so
 12524:       // we're not declaring readonly or permanent properties.
 27372:       //
 27372:       // Since we always create the undeclared property here without given a
 27372:       // chance for the interpreter to report applicable strict mode warnings,
 27372:       // we must take care to check those warnings here.
 48470:       JSString *str = JSID_TO_STRING(id);
 41774:       if ((!(flags & JSRESOLVE_QUALIFIED) &&
 79734:            !js::CheckUndeclaredVarAssignment(cx, str)) ||
 48470:           !::JS_DefinePropertyById(cx, obj, id, JSVAL_VOID, JS_PropertyStub,
 62397:                                    JS_StrictPropertyStub, JSPROP_ENUMERATE)) {
 12524:         *_retval = JS_FALSE;
 12524: 
 12524:         return NS_OK;
 12524:       }
 12524: 
 12524:       *objp = obj;
 12524:     }
 12524:   }
 12524: 
 12524:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
 94738: nsWindowSH::Finalize(nsIXPConnectWrappedNative *wrapper, JSFreeOp *fop,
     1:                      JSObject *obj)
     1: {
     1:   nsCOMPtr<nsIScriptGlobalObject> sgo(do_QueryWrappedNative(wrapper));
     1:   NS_ENSURE_TRUE(sgo, NS_ERROR_UNEXPECTED);
     1: 
 68467:   sgo->OnFinalize(obj);
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
 55578: nsWindowSH::OuterObject(nsIXPConnectWrappedNative *wrapper, JSContext * cx,
     1:                         JSObject * obj, JSObject * *_retval)
     1: {
 12451:   nsGlobalWindow *origWin = nsGlobalWindow::FromWrapper(wrapper);
 12451:   nsGlobalWindow *win = origWin->GetOuterWindowInternal();
     1: 
     1:   if (!win) {
     1:     // If we no longer have an outer window. No code should ever be
     1:     // running on a window w/o an outer, which means this hook should
     1:     // never be called when we have no outer. But just in case, return
     1:     // null to prevent leaking an inner window to code in a different
     1:     // window.
     1:     *_retval = nsnull;
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
 47412:   JSObject *winObj = win->FastGetGlobalJSObject();
 12451:   if (!winObj) {
 12451:     NS_ASSERTION(origWin->IsOuterWindow(), "What window is this?");
 12451:     *_retval = obj;
 25050:     return NS_OK;
 25050:   }
 25050: 
 56188:   if (!JS_WrapObject(cx, &winObj)) {
 56188:     *_retval = nsnull;
 56188:     return NS_ERROR_UNEXPECTED;
 56188:   }
 56188: 
 25050:   *_retval = winObj;
 25050:   return NS_OK;
     1: }
     1: 
     1: // DOM Location helper
     1: 
     1: NS_IMETHODIMP
     1: nsLocationSH::CheckAccess(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                           JSObject *obj, jsid id, PRUint32 mode,
 79445:                           jsval *vp, bool *_retval)
     1: {
     1:   if ((mode & JSACC_TYPEMASK) == JSACC_PROTO && (mode & JSACC_WRITE)) {
     1:     // No setting location.__proto__, ever!
     1: 
     1:     // Let XPConnect know that the access was not granted.
 80486:     *_retval = false;
     1: 
     1:     return NS_ERROR_DOM_SECURITY_ERR;
     1:   }
     1: 
     1:   return nsDOMGenericSH::CheckAccess(wrapper, cx, obj, id, mode, vp, _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsLocationSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
     1:                         JSObject *globalObj, JSObject **parentObj)
     1: {
     1:   // window.location can be held onto by both evil pages that want to track the
     1:   // user's progress on the web and bookmarklets that want to use the location
     1:   // object. Parent it to the outer window so that access checks do the Right
     1:   // Thing.
     1:   *parentObj = globalObj;
     1: 
     1:   nsCOMPtr<nsIDOMLocation> safeLoc(do_QueryInterface(nativeObj));
     1:   if (!safeLoc) {
     1:     // Oops, this wasn't really a location object. This can happen if someone
     1:     // tries to use our scriptable helper as a real object and tries to wrap
     1:     // it, see bug 319296
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsLocation *loc = (nsLocation *)safeLoc.get();
     1:   nsIDocShell *ds = loc->GetDocShell();
     1:   if (!ds) {
     1:     NS_WARNING("Refusing to create a location in the wrong scope");
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
     1:   nsCOMPtr<nsIScriptGlobalObject> sgo = do_GetInterface(ds);
 56452:   if (!sgo) {
 56452:     NS_WARNING("Refusing to create a location in the wrong scope because the "
 56452:                "docshell is being destroyed");
 56452:     return NS_ERROR_UNEXPECTED;
 56452:   }
 56452: 
 56452:   *parentObj = sgo->GetGlobalJSObject();
 97123:   return *parentObj ? NS_OK : NS_ERROR_FAILURE;
     1: }
     1: 
     1: // DOM Navigator helper
 77905: 
 77905: NS_IMETHODIMP
 77905: nsNavigatorSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 77905:                           JSObject *obj, jsid id, PRUint32 flags,
 79445:                           JSObject **objp, bool *_retval)
 77905: {
 77905:   if (!JSID_IS_STRING(id) || (flags & JSRESOLVE_ASSIGNING)) {
 77905:     return NS_OK;
 77905:   }
 77905: 
 77905:   nsScriptNameSpaceManager *nameSpaceManager =
 77905:     nsJSRuntime::GetNameSpaceManager();
 77905:   NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
 77905: 
 77905:   nsDependentJSString name(id);
 77905: 
 77905:   const nsGlobalNameStruct *name_struct = nsnull;
 77905: 
 77905:   nameSpaceManager->LookupNavigatorName(name, &name_struct);
 77905: 
 77905:   if (!name_struct) {
 77905:     return NS_OK;
 77905:   }
 77905:   NS_ASSERTION(name_struct->mType == nsGlobalNameStruct::eTypeNavigatorProperty,
 77905:                "unexpected type");
 77905: 
 77905:   nsresult rv = NS_OK;
 77905: 
 77905:   nsCOMPtr<nsISupports> native(do_CreateInstance(name_struct->mCID, &rv));
 77905:   NS_ENSURE_SUCCESS(rv, rv);
 77905: 
 77905:   jsval prop_val = JSVAL_VOID; // Property value.
 77905: 
 77905:   nsCOMPtr<nsIDOMGlobalPropertyInitializer> gpi(do_QueryInterface(native));
 77905: 
 77905:   if (gpi) {
 77905:     JSObject *global = JS_GetGlobalForObject(cx, obj);
 77905: 
 77905:     nsISupports *globalNative = XPConnect()->GetNativeOfWrapper(cx, global);
 77905:     nsCOMPtr<nsIDOMWindow> window = do_QueryInterface(globalNative);
 77905: 
 77905:     if (!window) {
 77905:       return NS_ERROR_UNEXPECTED;
 77905:     }
 77905: 
 77905:     rv = gpi->Init(window, &prop_val);
 77905:     NS_ENSURE_SUCCESS(rv, rv);
 77905:   }
 77905: 
 87913:   if (JSVAL_IS_PRIMITIVE(prop_val) && !JSVAL_IS_NULL(prop_val)) {
 77905:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 80486:     rv = WrapNative(cx, obj, native, true, &prop_val,
 77905:                     getter_AddRefs(holder));
 77905: 
 77905:     NS_ENSURE_SUCCESS(rv, rv);
 77905:   }
 77905: 
 77905:   if (!JS_WrapValue(cx, &prop_val)) {
 77905:     return NS_ERROR_UNEXPECTED;
 77905:   }
 77905: 
 77905:   JSBool ok = ::JS_DefinePropertyById(cx, obj, id, prop_val, nsnull, nsnull,
 77905:                                       JSPROP_ENUMERATE);
 77905: 
 80486:   *_retval = true;
 77905:   *objp = obj;
 77905: 
 77905:   return ok ? NS_OK : NS_ERROR_FAILURE;
 77905: }
 77905: 
 77905: // static
     1: nsresult
     1: nsNavigatorSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
     1:                          JSObject *globalObj, JSObject **parentObj)
     1: {
 83058:   // window.navigator can hold expandos and thus we need to only ever
 83058:   // create one wrapper per navigator object so that expandos are
 83058:   // visible independently of who's looking it up.
     1:   *parentObj = globalObj;
     1: 
     1:   nsCOMPtr<nsIDOMNavigator> safeNav(do_QueryInterface(nativeObj));
     1:   if (!safeNav) {
     1:     // Oops, this wasn't really a navigator object. This can happen if someone
     1:     // tries to use our scriptable helper as a real object and tries to wrap
     1:     // it, see bug 319296.
     1:     return NS_OK;
     1:   }
     1: 
 81313:   Navigator *nav = static_cast<Navigator*>(safeNav.get());
 83058:   nsGlobalWindow *win = static_cast<nsGlobalWindow*>(nav->GetWindow());
 83058:   if (!win) {
     1:     NS_WARNING("Refusing to create a navigator in the wrong scope");
 83058: 
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
 97123:   return SetParentToWindow(win, parentObj);
     1: }
     1: 
     1: // DOM Node helper
     1: 
 78692: template<nsresult (*func)(JSContext *cx, JSObject *obj, jsval *vp)>
 78692: static JSBool
 98960: GetterShim(JSContext *cx, JSHandleObject obj, JSHandleId /* unused */, jsval *vp)
 78692: {
 78692:   nsresult rv = (*func)(cx, obj, vp);
 78692:   if (NS_FAILED(rv)) {
102364:     xpc::Throw(cx, rv);
 78692:     return JS_FALSE;
 78692:   }
 78692: 
 78692:   return JS_TRUE;  
 78692: }
 78692: 
 78692: // Can't be static so GetterShim will compile
 78692: nsresult
 78692: BaseURIObjectGetter(JSContext *cx, JSObject *obj, jsval *vp)
 78692: {
 78692:   // This function duplicates some of the logic in XPC_WN_HelperGetProperty
 78692:   XPCWrappedNative *wrapper =
 78692:     XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj);
 78692: 
 78692:   // The error checks duplicate code in THROW_AND_RETURN_IF_BAD_WRAPPER
 78692:   NS_ENSURE_TRUE(!wrapper || wrapper->IsValid(), NS_ERROR_XPC_HAS_BEEN_SHUTDOWN);
 78692: 
 78692:   nsCOMPtr<nsINode> node = do_QueryWrappedNative(wrapper, obj);
 78692:   NS_ENSURE_TRUE(node, NS_ERROR_UNEXPECTED);
 78692: 
 78692:   nsCOMPtr<nsIURI> uri = node->GetBaseURI();
 78692:   return WrapNative(cx, JS_GetGlobalForScopeChain(cx), uri,
 80486:                     &NS_GET_IID(nsIURI), true, vp);
 78692: }
 78692: 
 78692: // Can't be static so GetterShim will compile
 78692: nsresult
 78692: NodePrincipalGetter(JSContext *cx, JSObject *obj, jsval *vp)
 78692: {
 78692:   // This function duplicates some of the logic in XPC_WN_HelperGetProperty
 78692:   XPCWrappedNative *wrapper =
 78692:     XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj);
 78692: 
 78692:   // The error checks duplicate code in THROW_AND_RETURN_IF_BAD_WRAPPER
 78692:   NS_ENSURE_TRUE(!wrapper || wrapper->IsValid(), NS_ERROR_XPC_HAS_BEEN_SHUTDOWN);
 78692: 
 78692:   nsCOMPtr<nsINode> node = do_QueryWrappedNative(wrapper, obj);
 78692:   NS_ENSURE_TRUE(node, NS_ERROR_UNEXPECTED);
 78692: 
 78692:   return WrapNative(cx, JS_GetGlobalForScopeChain(cx), node->NodePrincipal(),
 80486:                     &NS_GET_IID(nsIPrincipal), true, vp);
 78692: }
 78692: 
 78692: NS_IMETHODIMP
 78692: nsNodeSH::PostCreatePrototype(JSContext * cx, JSObject * proto)
 78692: {
 78692:   // set up our proto first
 78692:   nsresult rv = nsDOMGenericSH::PostCreatePrototype(cx, proto);
 78692: 
 79734:   if (xpc::AccessCheck::isChrome(js::GetObjectCompartment(proto))) {
 78692:     // Stick nodePrincipal and baseURIObject  properties on there
 78692:     JS_DefinePropertyById(cx, proto, sNodePrincipal_id,
 78692:                           JSVAL_VOID, GetterShim<NodePrincipalGetter>,
 78692:                           nsnull,
 78692:                           JSPROP_READONLY | JSPROP_SHARED);
 78692:     JS_DefinePropertyById(cx, proto, sBaseURIObject_id,
 78692:                           JSVAL_VOID, GetterShim<BaseURIObjectGetter>,
 78692:                           nsnull,
 78692:                           JSPROP_READONLY | JSPROP_SHARED);
 78692:   }
 78692: 
 78692:   return rv;
 78692: }
 78692: 
 79445: bool
     1: nsNodeSH::IsCapabilityEnabled(const char* aCapability)
     1: {
 79445:   bool enabled;
     1:   return sSecMan &&
     1:     NS_SUCCEEDED(sSecMan->IsCapabilityEnabled(aCapability, &enabled)) &&
     1:     enabled;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsNodeSH::PreCreate(nsISupports *nativeObj, JSContext *cx, JSObject *globalObj,
     1:                     JSObject **parentObj)
     1: {
  8856:   nsINode *node = static_cast<nsINode*>(nativeObj);
  8856:   
  8856: #ifdef DEBUG
  8856:   {
  8856:     nsCOMPtr<nsINode> node_qi(do_QueryInterface(nativeObj));
  8856: 
  8856:     // If this assertion fires the QI implementation for the object in
  8856:     // question doesn't use the nsINode pointer as the nsISupports
  8856:     // pointer. That must be fixed, or we'll crash...
 67630:     NS_ABORT_IF_FALSE(node_qi == node, "Uh, fix QI!");
  8856:   }
  8856: #endif
     1: 
     1:   // Make sure that we get the owner document of the content node, in case
     1:   // we're in document teardown.  If we are, it's important to *not* use
     1:   // globalObj as the nodes parent since that would give the node the
     1:   // principal of globalObj (i.e. the principal of the document that's being
     1:   // loaded) and not the principal of the document that's being unloaded.
     1:   // See http://bugzilla.mozilla.org/show_bug.cgi?id=227417
 80526:   nsIDocument* doc = node->OwnerDoc();
     1: 
 20377:   // If we have a document, make sure one of these is true
 20377:   // (1) it has a script handling object,
 20377:   // (2) has had one, or has been marked to have had one,
 20377:   // (3) we are running a privileged script.
 20377:   // Event handling is possible only if (1). If (2) event handling is prevented.
 20377:   // If document has never had a script handling object,
 20377:   // untrusted scripts (3) shouldn't touch it!
 79445:   bool hasHadScriptHandlingObject = false;
 20377:   NS_ENSURE_STATE(doc->GetScriptHandlingObject(hasHadScriptHandlingObject) ||
 20377:                   hasHadScriptHandlingObject ||
 20377:                   IsPrivilegedScript());
 20377: 
 47802:   nsINode *native_parent;
 47802: 
 79445:   bool nodeIsElement = node->IsElement();
 41639:   if (nodeIsElement && node->AsElement()->IsXUL()) {
     1:     // For XUL elements, use the parent, if any.
     1:     native_parent = node->GetParent();
     1: 
     1:     if (!native_parent) {
     1:       native_parent = doc;
     1:     }
     1:   } else if (!node->IsNodeOfType(nsINode::eDOCUMENT)) {
     1:     NS_ASSERTION(node->IsNodeOfType(nsINode::eCONTENT) ||
     1:                  node->IsNodeOfType(nsINode::eATTRIBUTE),
     1:                  "Unexpected node type");
     1:                  
     1:     // For attributes and non-XUL content, use the document as scope parent.
     1:     native_parent = doc;
     1: 
     1:     // But for HTML form controls, use the form as scope parent.
 43117:     if (nodeIsElement) {
 43117:       if (node->IsNodeOfType(nsINode::eHTML_FORM_CONTROL)) {
     1:         nsCOMPtr<nsIFormControl> form_control(do_QueryInterface(node));
     1: 
     1:         if (form_control) {
 47801:           Element *form = form_control->GetFormElement();
     1: 
     1:           if (form) {
     1:             // Found a form, use it.
     1:             native_parent = form;
     1:           }
     1:         }
 47802:       }
 47802:       else {
 43117:         // Legend isn't an HTML form control but should have its fieldset form
 43117:         // as scope parent at least for backward compatibility.
 47802:         nsHTMLLegendElement *legend =
 47802:           nsHTMLLegendElement::FromContent(node->AsElement());
 43117:         if (legend) {
 47802:           Element *form = legend->GetFormElement();
 43117: 
 43117:           if (form) {
 43117:             native_parent = form;
 43117:           }
 43117:         }
 43117:       }
     1:     }
     1:   } else {
     1:     // We're called for a document object; set the parent to be the
     1:     // document's global object, if there is one
     1: 
     1:     // Get the scope object from the document.
 47802:     nsISupports *scope = doc->GetScopeObject();
 47802: 
 47802:     if (scope) {
 47802:         jsval v;
 47802:         nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 80486:         nsresult rv = WrapNative(cx, globalObj, scope, false, &v,
 47802:                                  getter_AddRefs(holder));
 47802:         NS_ENSURE_SUCCESS(rv, rv);
 47802: 
 47802:         holder->GetJSObject(parentObj);
 47802:     }
 47802:     else {
     1:       // No global object reachable from this document, use the
     1:       // global object that was passed to this method.
     1: 
     1:       *parentObj = globalObj;
 47802:     }
 47802: 
 47802:     // No slim wrappers for a document's scope object.
 27664:     return node->IsInNativeAnonymousSubtree() ?
 27664:       NS_SUCCESS_CHROME_ACCESS_ONLY : NS_OK;
     1:   }
 30001: 
     1:   // XXXjst: Maybe we need to find the global to use from the
     1:   // nsIScriptGlobalObject that's reachable from the node we're about
     1:   // to wrap here? But that's not always reachable, let's use
     1:   // globalObj for now...
     1: 
102303:   nsresult rv = WrapNativeParent(cx, globalObj, native_parent, parentObj);
 47802:   NS_ENSURE_SUCCESS(rv, rv);
 47802: 
 47631:   return node->IsInNativeAnonymousSubtree() ?
 47802:     NS_SUCCESS_CHROME_ACCESS_ONLY : NS_SUCCESS_ALLOW_SLIM_WRAPPERS;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsNodeSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                       JSObject *obj, jsid id, jsval *vp, bool *_retval)
     1: {
 35272:   nsNodeSH::PreserveWrapper(GetNative(wrapper, obj));
 77149:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsNodeSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                      JSObject *obj, jsid id, PRUint32 flags,
 79445:                      JSObject **objp, bool *_retval)
     1: {
 21618:   if (id == sOnload_id || id == sOnerror_id) {
 21618:     // Make sure that this node can't go away while waiting for a
 21618:     // network load that could fire an event handler.
 77149:     // XXXbz won't this fail if the listener is added using
 77149:     // addEventListener?  On the other hand, even if I comment this
 77149:     // code out I can't seem to reproduce the bug it was trying to
 77149:     // fix....
 35272:     nsNodeSH::PreserveWrapper(GetNative(wrapper, obj));
 21618:   }
 21618: 
 77149:   return nsDOMGenericSH::NewResolve(wrapper, cx, obj, id, flags, objp,
     1:                                     _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsNodeSH::GetFlags(PRUint32 *aFlags)
     1: {
     1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS | nsIClassInfo::CONTENT_NODE;
     1: 
     1:   return NS_OK;
     1: }
     1: 
 35272: void
 35272: nsNodeSH::PreserveWrapper(nsISupports *aNative)
 35272: {
 35272:   nsINode *node = static_cast<nsINode*>(aNative);
 35272:   nsContentUtils::PreserveWrapper(aNative, node);
 35272: }
 35272: 
 16664: // EventTarget helper
 16664: 
 16664: NS_IMETHODIMP
 21618: nsEventTargetSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 21618:                            JSObject *globalObj, JSObject **parentObj)
 21618: {
 89667:   nsDOMEventTargetHelper *target =
 89667:     nsDOMEventTargetHelper::FromSupports(nativeObj);
 21618: 
 21618:   nsCOMPtr<nsIScriptGlobalObject> native_parent;
 21618:   target->GetParentObject(getter_AddRefs(native_parent));
 21618: 
 21618:   *parentObj = native_parent ? native_parent->GetGlobalJSObject() : globalObj;
 21618: 
 97123:   return *parentObj ? NS_OK : NS_ERROR_FAILURE;
 21618: }
 21618: 
 21618: NS_IMETHODIMP
 19701: nsEventTargetSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                              JSObject *obj, jsid id, jsval *vp, bool *_retval)
 19701: {
 35272:   nsEventTargetSH::PreserveWrapper(GetNative(wrapper, obj));
 35272: 
 35272:   return NS_OK;
 35272: }
 35272: 
 35272: void
 35272: nsEventTargetSH::PreserveWrapper(nsISupports *aNative)
 35272: {
 89667:   nsDOMEventTargetHelper *target =
 89667:     nsDOMEventTargetHelper::FromSupports(aNative);
 35272:   nsContentUtils::PreserveWrapper(aNative, target);
 21618: }
 21618: 
 88011: // IDBEventTarget helper
 88011: 
 88011: NS_IMETHODIMP
 88011: IDBEventTargetSH::PreCreate(nsISupports *aNativeObj, JSContext *aCx,
 88011:                             JSObject *aGlobalObj, JSObject **aParentObj)
 88011: {
 88011:   IDBWrapperCache *target = IDBWrapperCache::FromSupports(aNativeObj);
 88011:   JSObject *parent = target->GetParentObject();
 88011:   *aParentObj = parent ? parent : aGlobalObj;
 88011:   return NS_OK;
 88011: }
 88011: 
     1: // Element helper
     1: 
 79445: static bool
 41639: GetBindingURL(Element *aElement, nsIDocument *aDocument,
 30001:               nsCSSValue::URL **aResult)
 30001: {
 33349:   // If we have a frame the frame has already loaded the binding.  And
 33349:   // otherwise, don't do anything else here unless we're dealing with
 33349:   // XUL.
 46225:   nsIPresShell *shell = aDocument->GetShell();
 41639:   if (!shell || aElement->GetPrimaryFrame() || !aElement->IsXUL()) {
 30001:     *aResult = nsnull;
 30001: 
 80486:     return true;
 30001:   }
 30001: 
 30001:   // Get the computed -moz-binding directly from the style context
 30001:   nsPresContext *pctx = shell->GetPresContext();
 80486:   NS_ENSURE_TRUE(pctx, false);
 30001: 
 41639:   nsRefPtr<nsStyleContext> sc = pctx->StyleSet()->ResolveStyleFor(aElement,
 30001:                                                                   nsnull);
 80486:   NS_ENSURE_TRUE(sc, false);
 30001: 
 30001:   *aResult = sc->GetStyleDisplay()->mBinding;
 30001: 
 80486:   return true;
 30001: }
 30001: 
 30001: NS_IMETHODIMP
 30001: nsElementSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 30001:                        JSObject *globalObj, JSObject **parentObj)
 30001: {
 30001:   nsresult rv = nsNodeSH::PreCreate(nativeObj, cx, globalObj, parentObj);
 30001:   NS_ENSURE_SUCCESS(rv, rv);
 30001: 
 41639:   Element *element = static_cast<Element*>(nativeObj);
  8856: 
  8856: #ifdef DEBUG
  8856:   {
 30001:     nsCOMPtr<nsIContent> content_qi(do_QueryInterface(nativeObj));
  8856: 
  8856:     // If this assertion fires the QI implementation for the object in
  8856:     // question doesn't use the nsIContent pointer as the nsISupports
  8856:     // pointer. That must be fixed, or we'll crash...
 67630:     NS_ABORT_IF_FALSE(content_qi == element, "Uh, fix QI!");
  8856:   }
  8856: #endif
     1: 
 41639:   nsIDocument *doc = element->HasFlag(NODE_FORCE_XBL_BINDINGS) ?
 80526:                      element->OwnerDoc() :
 41639:                      element->GetCurrentDoc();
 30001: 
 30001:   if (!doc) {
 30001:     return rv;
 30001:   }
 30001: 
 41639:   if (element->HasFlag(NODE_MAY_BE_IN_BINDING_MNGR) &&
 41639:       doc->BindingManager()->GetBinding(element)) {
 30001:     // Don't allow slim wrappers.
 30001:     return rv == NS_SUCCESS_ALLOW_SLIM_WRAPPERS ? NS_OK : rv;
 30001:   }
 30001: 
 30001:   nsCSSValue::URL *bindingURL;
 79445:   bool ok = GetBindingURL(element, doc, &bindingURL);
 30001:   NS_ENSURE_TRUE(ok, NS_ERROR_FAILURE);
 30001: 
 30001:   // Only allow slim wrappers if there's no binding.
 30001:   if (!bindingURL) {
 30001:     return rv;
 30001:   }
 30001: 
 41639:   element->SetFlags(NODE_ATTACH_BINDING_ON_POSTCREATE);
 30001: 
 30001:   return rv == NS_SUCCESS_ALLOW_SLIM_WRAPPERS ? NS_OK : rv;
 30001: }
 30001: 
 30001: NS_IMETHODIMP
 30001: nsElementSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 30001:                         JSObject *obj)
 30001: {
 41639:   Element *element = static_cast<Element*>(wrapper->Native());
 30001: 
 30001: #ifdef DEBUG
 30001:   {
 30001:     nsCOMPtr<nsIContent> content_qi(do_QueryWrappedNative(wrapper));
 30001: 
 30001:     // If this assertion fires the QI implementation for the object in
 30001:     // question doesn't use the nsIContent pointer as the nsISupports
 30001:     // pointer. That must be fixed, or we'll crash...
 67630:     NS_ABORT_IF_FALSE(content_qi == element, "Uh, fix QI!");
 30001:   }
 30001: #endif
 30001: 
 30001:   nsIDocument* doc;
 41639:   if (element->HasFlag(NODE_FORCE_XBL_BINDINGS)) {
 80526:     doc = element->OwnerDoc();
  1498:   }
  1498:   else {
 41639:     doc = element->GetCurrentDoc();
  1498:   }
     1: 
     1:   if (!doc) {
     1:     // There's no baseclass that cares about this call so we just
     1:     // return here.
     1: 
     1:     return NS_OK;
     1:   }
     1: 
  7216:   // We must ensure that the XBL Binding is installed before we hand
  7216:   // back this object.
  7216: 
 41639:   if (!element->HasFlag(NODE_ATTACH_BINDING_ON_POSTCREATE)) {
 13098:     // There's already a binding for this element so nothing left to
 13098:     // be done here.
 13098: 
 13098:     // In theory we could call ExecuteAttachedHandler here when it's safe to
 13098:     // run script if we also removed the binding from the PAQ queue, but that
 13098:     // seems like a scary change that would mosly just add more
 13098:     // inconsistencies.
 13098: 
 13098:     return NS_OK;
  7216:   }
  7216: 
 41639:   element->UnsetFlags(NODE_ATTACH_BINDING_ON_POSTCREATE);
     1: 
 28116:   // Make sure the style context goes away _before_ we load the binding
 28116:   // since that can destroy the relevant presshell.
 30001:   nsCSSValue::URL *bindingURL;
 79445:   bool ok = GetBindingURL(element, doc, &bindingURL);
 30001:   NS_ENSURE_TRUE(ok, NS_ERROR_FAILURE);
 30001: 
     1:   if (!bindingURL) {
     1:     // No binding, nothing left to do here.
     1:     return NS_OK;
     1:   }
     1: 
 69701:   nsCOMPtr<nsIURI> uri = bindingURL->GetURI();
 30001:   nsCOMPtr<nsIPrincipal> principal = bindingURL->mOriginPrincipal;
 28116: 
     1:   // We have a binding that must be installed.
 79445:   bool dummy;
     1: 
 99253:   nsXBLService* xblService = nsXBLService::GetInstance();
     1:   NS_ENSURE_TRUE(xblService, NS_ERROR_NOT_AVAILABLE);
     1: 
 28116:   nsRefPtr<nsXBLBinding> binding;
 80486:   xblService->LoadBindings(element, uri, principal, false,
     1:                            getter_AddRefs(binding), &dummy);
     1:   
     1:   if (binding) {
 13098:     if (nsContentUtils::IsSafeToRunScript()) {
     1:       binding->ExecuteAttachedHandler();
     1:     }
 13098:     else {
 41361:       nsContentUtils::AddScriptRunner(
 41361:         NS_NewRunnableMethod(binding, &nsXBLBinding::ExecuteAttachedHandler));
 13098:     }
 13098:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
  6392: 
     1: // Generic array scriptable helper.
     1: 
     1: NS_IMETHODIMP
     1: nsGenericArraySH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                              JSObject *obj, jsid id, PRUint32 flags,
 79445:                              JSObject **objp, bool *_retval)
     1: {
 18877:   if (id == sLength_id) {
 18877:     // Bail early; this isn't something we're interested in
 18877:     return NS_OK;
 18877:   }
 18877:   
 79445:   bool is_number = false;
     1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
     1: 
     1:   if (is_number && n >= 0) {
     1:     // XXX The following is a cheap optimization to avoid hitting xpconnect to
     1:     // get the length. We may want to consider asking our concrete
     1:     // implementation for the length, and falling back onto the GetProperty if
     1:     // it doesn't provide one.
     1: 
     1:     PRUint32 length;
 20752:     nsresult rv = GetLength(wrapper, cx, obj, &length);
 20752:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
 75049:     PRUint32 index = PRUint32(n);
 75049:     if (index < length) {
 75049:       *_retval = ::JS_DefineElement(cx, obj, index, JSVAL_VOID, nsnull, nsnull,
     1:                                     JSPROP_ENUMERATE | JSPROP_SHARED);
     1:       *objp = obj;
     1:     }
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
 20752: nsresult
 20752: nsGenericArraySH::GetLength(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 20752:                              JSObject *obj, PRUint32 *length)
 20752: {
 20752:   *length = 0;
 20752: 
 20752:   jsval lenval;
 20752:   if (!JS_GetProperty(cx, obj, "length", &lenval)) {
 20752:     return NS_ERROR_UNEXPECTED;
 20752:   }
 20752: 
 20752:   if (!JSVAL_IS_INT(lenval)) {
 20752:     // This can apparently happen with some sparse array impls falling back
 20752:     // onto this code.
 20752:     return NS_OK;
 20752:   }
 20752: 
 20752:   PRInt32 slen = JSVAL_TO_INT(lenval);
 20752:   if (slen < 0) {
 20752:     return NS_OK;
 20752:   }
 20752: 
 20752:   *length = (PRUint32)slen;
 20752: 
 20752:   return NS_OK;
 20752: }
 20752: 
     1: NS_IMETHODIMP
     1: nsGenericArraySH::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                             JSObject *obj, bool *_retval)
     1: {
     1:   // Recursion protection in case someone tries to be smart and call
     1:   // the enumerate hook from a user defined .length getter, or
     1:   // somesuch.
     1: 
 79445:   static bool sCurrentlyEnumerating;
     1: 
     1:   if (sCurrentlyEnumerating) {
     1:     // Don't recurse to death.
     1:     return NS_OK;
     1:   }
     1: 
 80486:   sCurrentlyEnumerating = true;
     1: 
     1:   jsval len_val;
     1:   JSAutoRequest ar(cx);
     1:   JSBool ok = ::JS_GetProperty(cx, obj, "length", &len_val);
     1: 
     1:   if (ok && JSVAL_IS_INT(len_val)) {
     1:     PRInt32 length = JSVAL_TO_INT(len_val);
     1: 
     1:     for (PRInt32 i = 0; ok && i < length; ++i) {
 20148:       ok = ::JS_DefineElement(cx, obj, i, JSVAL_VOID, nsnull, nsnull,
     1:                               JSPROP_ENUMERATE | JSPROP_SHARED);
     1:     }
     1:   }
     1: 
 80486:   sCurrentlyEnumerating = false;
     1: 
     1:   return ok ? NS_OK : NS_ERROR_UNEXPECTED;
     1: }
     1: 
 20752: // Array scriptable helper
     1: 
     1: NS_IMETHODIMP
     1: nsArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                        JSObject *obj, jsid id, jsval *vp, bool *_retval)
 79445: {
 79445:   bool is_number = false;
     1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
     1: 
     1:   nsresult rv = NS_OK;
     1: 
     1:   if (is_number) {
     1:     if (n < 0) {
     1:       return NS_ERROR_DOM_INDEX_SIZE_ERR;
     1:     }
     1: 
 20752:     // Make sure rv == NS_OK here, so GetItemAt implementations that never fail
 20752:     // don't have to set rv.
 20752:     rv = NS_OK;
 48168:     nsWrapperCache *cache = nsnull;
 48168:     nsISupports* array_item =
 48168:       GetItemAt(GetNative(wrapper, obj), n, &cache, &rv);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     if (array_item) {
 55604:       rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), array_item, cache,
 80486:                       true, vp);
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:       rv = NS_SUCCESS_I_DID_SOMETHING;
     1:     }
     1:   }
     1: 
     1:   return rv;
     1: }
     1: 
     1: 
 21384: // StringList scriptable helper
 21384: 
 21384: nsresult
 21384: nsStringListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
 21384:                             nsAString& aResult)
 21384: {
 21384:   nsCOMPtr<nsIDOMDOMStringList> list(do_QueryInterface(aNative));
 21384:   NS_ENSURE_TRUE(list, NS_ERROR_UNEXPECTED);
 21384: 
 71034:   nsresult rv = list->Item(aIndex, aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRUint32 length = 0;
 71034:     list->GetLength(&length);
 71034:     NS_ASSERTION(PRUint32(aIndex) >= length, "Item should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
 21384: }
 21384: 
 21384: 
 31383: // DOMTokenList scriptable helper
 31383: 
 31383: nsresult
 31383: nsDOMTokenListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
 31383:                               nsAString& aResult)
 31383: {
 31383:   nsCOMPtr<nsIDOMDOMTokenList> list(do_QueryInterface(aNative));
 31383:   NS_ENSURE_TRUE(list, NS_ERROR_UNEXPECTED);
 31383: 
 71034:   nsresult rv = list->Item(aIndex, aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRUint32 length = 0;
 71034:     list->GetLength(&length);
 71034:     NS_ASSERTION(PRUint32(aIndex) >= length, "Item should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
 31383: }
 31383: 
 31383: 
 21384: // Named Array helper
 21384: 
 21384: NS_IMETHODIMP
 63078: nsNamedArraySH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 63078:                            JSObject *obj, jsid id, PRUint32 flags,
 79445:                            JSObject **objp, bool *_retval)
 63078: {
 63078:   if ((!(JSRESOLVE_ASSIGNING & flags)) && JSID_IS_STRING(id) &&
 63078:       !ObjectIsNativeWrapper(cx, obj)) {
 63078: 
 63078:     {
 63078:       JSObject *realObj;
 63078: 
 63078:       if (wrapper) {
 63078:         wrapper->GetJSObject(&realObj);
 63078:       } else {
 63078:         realObj = obj;
 63078:       }
 63078: 
 63078:       JSAutoEnterCompartment ac;
 63078: 
 63078:       if (!ac.enter(cx, realObj)) {
 80486:         *_retval = false;
 63078:         return NS_ERROR_FAILURE;
 63078:       }
 63078: 
 89826:       JSObject *proto = ::JS_GetPrototype(realObj);
 84677: 
 84677:       if (proto) {
 63078:         JSBool hasProp;
 84677:         if (!::JS_HasPropertyById(cx, proto, id, &hasProp)) {
 84677:           *_retval = false;
 84677:           return NS_ERROR_FAILURE;
 84677:         }
 84677: 
 84677:         if (hasProp) {
 63078:           // We found the property we're resolving on the prototype,
 63078:           // nothing left to do here then.
 63078:           return NS_OK;
 63078:         }
 63078:       }
 84677:     }
 63078: 
 63078:     // Make sure rv == NS_OK here, so GetNamedItem implementations
 63078:     // that never fail don't have to set rv.
 63078:     nsresult rv = NS_OK;
 63078:     nsWrapperCache *cache;
 63078: 
 63078:     nsISupports* item = GetNamedItem(GetNative(wrapper, obj),
 63078:                                      nsDependentJSString(id), &cache, &rv);
 63078:     NS_ENSURE_SUCCESS(rv, rv);
 63078: 
 63078:     if (item) {
 63078:       *_retval = ::JS_DefinePropertyById(cx, obj, id, JSVAL_VOID, nsnull,
 63078:                                          nsnull, JSPROP_ENUMERATE | JSPROP_SHARED);
 63078: 
 63078:       *objp = obj;
 63078: 
 63078:       return *_retval ? NS_OK : NS_ERROR_FAILURE;
 63078:     }
 63078:   }
 63078: 
 63078:   return nsArraySH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
 63078: }
 63078: 
 63078: NS_IMETHODIMP
 21384: nsNamedArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                             JSObject *obj, jsid id, jsval *vp,
 79445:                             bool *_retval)
 21384: {
 48470:   if (JSID_IS_STRING(id) && !ObjectIsNativeWrapper(cx, obj)) {
 21384:     nsresult rv = NS_OK;
 48169:     nsWrapperCache *cache = nsnull;
 30001:     nsISupports* item = GetNamedItem(GetNative(wrapper, obj),
 48169:                                      nsDependentJSString(id), &cache, &rv);
 21384:     NS_ENSURE_SUCCESS(rv, rv);
 21384: 
 21384:     if (item) {
 55604:       rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), item, cache,
 80486:                       true, vp);
 21384:       NS_ENSURE_SUCCESS(rv, rv);
 21384: 
 21384:       rv = NS_SUCCESS_I_DID_SOMETHING;
 21384:     }
 21384: 
 21384:     // Don't fall through to nsArraySH::GetProperty() here
 21384:     return rv;
 21384:   }
 21384: 
 21384:   return nsArraySH::GetProperty(wrapper, cx, obj, id, vp, _retval);
 21384: }
 21384: 
 21384: 
 21384: // NamedNodeMap helper
 21384: 
 21384: nsISupports*
 21384: nsNamedNodeMapSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                             nsWrapperCache **aCache, nsresult *aResult)
 21384: {
 21384:   nsDOMAttributeMap* map = nsDOMAttributeMap::FromSupports(aNative);
 21384: 
 48168:   nsINode *attr;
 48168:   *aCache = attr = map->GetItemAt(aIndex, aResult);
 47799:   return attr;
 21384: }
 21384: 
 21384: nsISupports*
 21384: nsNamedNodeMapSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
 48169:                                nsWrapperCache **aCache, nsresult *aResult)
 21384: {
 21384:   nsDOMAttributeMap* map = nsDOMAttributeMap::FromSupports(aNative);
 21384: 
 48169:   nsINode *attr;
 48169:   *aCache = attr = map->GetNamedItem(aName, aResult);
 47799:   return attr;
 21384: }
 21384: 
 21384: 
     1: NS_IMETHODIMP
 70158: nsDOMStringMapSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 70158:                              JSObject *obj, jsid id, PRUint32 flags,
 79445:                              JSObject **objp, bool *_retval)
 70158: {
 70158:   nsCOMPtr<nsIDOMDOMStringMap> dataset(do_QueryWrappedNative(wrapper, obj));
 70158:   NS_ENSURE_TRUE(dataset, NS_ERROR_UNEXPECTED);
 70158: 
 70391:   nsAutoString prop;
 70391:   NS_ENSURE_TRUE(JSIDToProp(id, prop), NS_ERROR_UNEXPECTED);
 70158: 
 70158:   if (dataset->HasDataAttr(prop)) {
 70158:     *_retval = JS_DefinePropertyById(cx, obj, id, JSVAL_VOID,
 70158:                                      nsnull, nsnull,
 70158:                                      JSPROP_ENUMERATE | JSPROP_SHARED); 
 70158:     *objp = obj;
 70158:   }
 70158: 
 70158:   return NS_OK;
 70158: }
 70158: 
 70158: NS_IMETHODIMP
 70158: nsDOMStringMapSH::Enumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                             JSObject *obj, bool *_retval)
 70158: {
 70158:   nsCOMPtr<nsIDOMDOMStringMap> dataset(do_QueryWrappedNative(wrapper, obj));
 70158:   NS_ENSURE_TRUE(dataset, NS_ERROR_UNEXPECTED);
 70158: 
 70158:   nsDOMStringMap* stringMap = static_cast<nsDOMStringMap*>(dataset.get());
 70158:   nsTArray<nsString> properties;
 70158:   nsresult rv = stringMap->GetDataPropList(properties);
 70158:   NS_ENSURE_SUCCESS(rv, rv);
 70158: 
 70158:   for (PRUint32 i = 0; i < properties.Length(); ++i) {
 78270:     nsString& prop(properties[i]);
 70158:     *_retval = JS_DefineUCProperty(cx, obj, prop.get(), prop.Length(),
 70158:                                    JSVAL_VOID, nsnull, nsnull,
 70158:                                    JSPROP_ENUMERATE | JSPROP_SHARED);
 70158:     NS_ENSURE_TRUE(*_retval, NS_ERROR_FAILURE);
 70158:   }
 70158: 
 70158:   return NS_OK;
 70158: }
 70158: 
 70158: NS_IMETHODIMP
 70158: nsDOMStringMapSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 70158:                             JSObject *globalObj, JSObject **parentObj)
 70158: {
 70158:   *parentObj = globalObj;
 70158: 
 70158:   nsDOMStringMap* dataset = static_cast<nsDOMStringMap*>(nativeObj);
 70158: 
102526:   // Parent the string map to its element.
102526:   nsINode* element = dataset->GetElement();
102526:   return WrapNativeParent(cx, globalObj, element, element, parentObj);
 70158: }
 70158: 
 70158: NS_IMETHODIMP
 70158: nsDOMStringMapSH::DelProperty(nsIXPConnectWrappedNative *wrapper,
 70158:                               JSContext *cx, JSObject *obj, jsid id,
 79445:                               jsval *vp, bool *_retval)
 70158: {
 70158:   nsCOMPtr<nsIDOMDOMStringMap> dataset(do_QueryWrappedNative(wrapper, obj));
 70158:   NS_ENSURE_TRUE(dataset, NS_ERROR_UNEXPECTED);
 70391: 
 70391:   nsAutoString prop;
 70391:   NS_ENSURE_TRUE(JSIDToProp(id, prop), NS_ERROR_UNEXPECTED);
 70391: 
 70158:   dataset->RemoveDataAttr(prop);
 70158: 
 70158:   return NS_OK;
 70158: }
 70158: 
 70158: NS_IMETHODIMP
 70158: nsDOMStringMapSH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 70158:                               JSObject *obj, jsid id, jsval *vp,
 79445:                               bool *_retval)
 70158: {
 70158:   nsCOMPtr<nsIDOMDOMStringMap> dataset(do_QueryWrappedNative(wrapper, obj));
 70158:   NS_ENSURE_TRUE(dataset, NS_ERROR_UNEXPECTED);
 70158: 
 70391:   nsAutoString propName;
 70391:   NS_ENSURE_TRUE(JSIDToProp(id, propName), NS_ERROR_UNEXPECTED);
 70391: 
 70391:   nsAutoString propVal;
 70391:   nsresult rv = dataset->GetDataAttr(propName, propVal);
 70158:   NS_ENSURE_SUCCESS(rv, rv);
 70158: 
 70391:   if (propVal.IsVoid()) {
 70158:     *vp = JSVAL_VOID;
 70158:     return NS_SUCCESS_I_DID_SOMETHING;
 70158:   }
 70158: 
 70158:   nsStringBuffer* valBuf;
 70391:   *vp = XPCStringConvert::ReadableToJSVal(cx, propVal, &valBuf);
 70158:   if (valBuf) {
 70391:     propVal.ForgetSharedBuffer();
 70158:   }
 70158: 
 70158:   return NS_SUCCESS_I_DID_SOMETHING;
 70158: }
 70158: 
 70158: NS_IMETHODIMP
 70158: nsDOMStringMapSH::SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 70158:                               JSObject *obj, jsid id, jsval *vp,
 79445:                               bool *_retval)
 70158: {
 70158:   nsCOMPtr<nsIDOMDOMStringMap> dataset(do_QueryWrappedNative(wrapper, obj));
 70158:   NS_ENSURE_TRUE(dataset, NS_ERROR_UNEXPECTED);
 70158: 
 70391:   nsAutoString propName;
 70391:   NS_ENSURE_TRUE(JSIDToProp(id, propName), NS_ERROR_UNEXPECTED);
 70391: 
 70158:   JSString *val = JS_ValueToString(cx, *vp);
 70158:   NS_ENSURE_TRUE(val, NS_ERROR_UNEXPECTED);
 70158: 
 70158:   nsDependentJSString propVal;
 70158:   NS_ENSURE_TRUE(propVal.init(cx, val), NS_ERROR_UNEXPECTED);
 70158: 
 70158:   nsresult rv = dataset->SetDataAttr(propName, propVal);
 70158:   NS_ENSURE_SUCCESS(rv, rv);
 70158: 
 70158:   return NS_SUCCESS_I_DID_SOMETHING;
 70158: }
 70158: 
 70391: bool
 70391: nsDOMStringMapSH::JSIDToProp(const jsid& aId, nsAString& aResult)
 70391: {
 70391:   if (JSID_IS_INT(aId)) {
 70391:     aResult.AppendInt(JSID_TO_INT(aId));
 70391:   } else if (JSID_IS_STRING(aId)) {
 70391:     aResult = nsDependentJSString(aId);
 70391:   } else {
 70391:     return false;
 70391:   }
 70391: 
 70391:   return true;
 70391: }
 70391: 
 78692: // Can't be static so GetterShim will compile
 78692: nsresult
 78692: DocumentURIObjectGetter(JSContext *cx, JSObject *obj, jsval *vp)
 78692: {
 78692:   // This function duplicates some of the logic in XPC_WN_HelperGetProperty
 78692:   XPCWrappedNative *wrapper =
 78692:     XPCWrappedNative::GetWrappedNativeOfJSObject(cx, obj);
 78692: 
 78692:   // The error checks duplicate code in THROW_AND_RETURN_IF_BAD_WRAPPER
 78692:   NS_ENSURE_TRUE(!wrapper || wrapper->IsValid(), NS_ERROR_XPC_HAS_BEEN_SHUTDOWN);
 78692: 
 78692:   nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper, obj);
 78692:   NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
 78692: 
 78692:   return WrapNative(cx, JS_GetGlobalForScopeChain(cx), doc->GetDocumentURI(),
 80486:                     &NS_GET_IID(nsIURI), true, vp);
 78692: }
 78692: 
 78692: NS_IMETHODIMP
 78692: nsDocumentSH::PostCreatePrototype(JSContext * cx, JSObject * proto)
 78692: {
 78692:   // set up our proto first
 78692:   nsresult rv = nsNodeSH::PostCreatePrototype(cx, proto);
 78692: 
 79734:   if (xpc::AccessCheck::isChrome(js::GetObjectCompartment(proto))) {
 78692:     // Stick a documentURIObject property on there
 78692:     JS_DefinePropertyById(cx, proto, sDocumentURIObject_id,
 78692:                           JSVAL_VOID, GetterShim<DocumentURIObjectGetter>,
 78692:                           nsnull,
 78692:                           JSPROP_READONLY | JSPROP_SHARED);
 78692:   }
 78692: 
 78692:   return rv;
 78692: }
 78692: 
 70158: NS_IMETHODIMP
     1: nsDocumentSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                          JSObject *obj, jsid id, PRUint32 flags,
 79445:                          JSObject **objp, bool *_retval)
     1: {
     1:   nsresult rv;
     1: 
     1:   if (id == sLocation_id) {
 30955:     // Define the location property on the document object itself so
 30955:     // that we can intercept getting and setting of document.location.
     1: 
 70983:     nsCOMPtr<nsIDOMDocument> doc = do_QueryWrappedNative(wrapper, obj);
     1:     NS_ENSURE_TRUE(doc, NS_ERROR_UNEXPECTED);
     1: 
     1:     nsCOMPtr<nsIDOMLocation> location;
     1:     rv = doc->GetLocation(getter_AddRefs(location));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     jsval v;
     1: 
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 55604:     rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), location,
 80486:                     &NS_GET_IID(nsIDOMLocation), true, &v,
 55604:                     getter_AddRefs(holder));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
 77776:     JSBool ok = ::JS_DefinePropertyById(cx, obj, id, v, nsnull,
 77776:                                         LocationSetter<nsIDOMDocument>,
 48470:                                         JSPROP_PERMANENT | JSPROP_ENUMERATE);
     1: 
     1:     if (!ok) {
     1:       return NS_ERROR_FAILURE;
     1:     }
     1: 
     1:     *objp = obj;
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   return nsNodeSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDocumentSH::GetFlags(PRUint32* aFlags)
     1: {
     1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDocumentSH::PostCreate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                          JSObject *obj)
     1: {
     1:   // If this is the current document for the window that's the script global
     1:   // object of this document, then define this document object on the window.
     1:   // That will make sure that the document is referenced (via window.document)
     1:   // and prevent it from going away in GC.
     1:   nsCOMPtr<nsIDocument> doc = do_QueryWrappedNative(wrapper);
     1:   if (!doc) {
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
  4042:   nsIScriptGlobalObject *sgo = doc->GetScriptGlobalObject();
  4042:   nsCOMPtr<nsPIDOMWindow> win = do_QueryInterface(sgo);
     1:   if (!win) {
     1:     // No window, nothing else to do here
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsIDOMDocument* currentDoc = win->GetExtantDocument();
     1: 
     1:   if (SameCOMIdentity(doc, currentDoc)) {
 12451:     jsval winVal;
     1: 
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 80486:     nsresult rv = WrapNative(cx, obj, win, &NS_GET_IID(nsIDOMWindow), false,
 30625:                              &winVal, getter_AddRefs(holder));
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     NS_NAMED_LITERAL_STRING(doc_str, "document");
     1: 
     1:     if (!::JS_DefineUCProperty(cx, JSVAL_TO_OBJECT(winVal),
  3233:                                reinterpret_cast<const jschar *>
  3233:                                                (doc_str.get()),
 28255:                                doc_str.Length(), OBJECT_TO_JSVAL(obj),
 62397:                                JS_PropertyStub, JS_StrictPropertyStub,
 28255:                                JSPROP_READONLY | JSPROP_ENUMERATE)) {
     1:       return NS_ERROR_FAILURE;
     1:     }
     1:   }
     1:   return NS_OK;
     1: }
     1: 
     1: // HTMLDocument helper
     1: 
 48170: static nsresult
 48601: ResolveImpl(JSContext *cx, nsIXPConnectWrappedNative *wrapper, jsid id,
 48170:             nsISupports **result, nsWrapperCache **aCache)
     1: {
  9596:   nsHTMLDocument *doc =
 48170:     static_cast<nsHTMLDocument*>(static_cast<nsINode*>(wrapper->Native()));
     1: 
     1:   // 'id' is not always a string, it can be a number since document.1
     1:   // should map to <input name="1">. Thus we can't use
     1:   // JSVAL_TO_STRING() here.
 48470:   JSString *str = IdToString(cx, id);
     1:   NS_ENSURE_TRUE(str, NS_ERROR_UNEXPECTED);
     1: 
 59889:   nsDependentJSString depStr;
 59889:   NS_ENSURE_TRUE(depStr.init(cx, str), NS_ERROR_UNEXPECTED);
 59889: 
 59889:   return doc->ResolveName(depStr, nsnull, result, aCache);
     1: }
     1: 
     1: 
     1: static JSClass sHTMLDocumentAllClass = {
     1:   "HTML document.all class",
     1:   JSCLASS_HAS_PRIVATE | JSCLASS_PRIVATE_IS_NSISUPPORTS | JSCLASS_NEW_RESOLVE |
     1:   JSCLASS_HAS_RESERVED_SLOTS(1),
 98058:   JS_PropertyStub,                                         /* addProperty */
 98058:   JS_PropertyStub,                                         /* delProperty */
 98058:   nsHTMLDocumentSH::DocumentAllGetProperty,                /* getProperty */
 98058:   JS_StrictPropertyStub,                                   /* setProperty */
 98058:   JS_EnumerateStub,
 98058:   (JSResolveOp)nsHTMLDocumentSH::DocumentAllNewResolve,
 98058:   JS_ConvertStub,
 98058:   nsHTMLDocumentSH::ReleaseDocument,
 98058:   nsnull,                                                  /* checkAccess */
     1:   nsHTMLDocumentSH::CallToGetPropMapper
     1: };
     1: 
     1: 
     1: static JSClass sHTMLDocumentAllHelperClass = {
     1:   "HTML document.all helper class", JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE,
 98058:   JS_PropertyStub,                                         /* addProperty */
 98058:   JS_PropertyStub,                                         /* delProperty */
 98058:   nsHTMLDocumentSH::DocumentAllHelperGetProperty,          /* getProperty */
 98058:   JS_StrictPropertyStub,                                   /* setProperty */
 98058:   JS_EnumerateStub,
 98058:   (JSResolveOp)nsHTMLDocumentSH::DocumentAllHelperNewResolve,
 98058:   JS_ConvertStub
     1: };
     1: 
     1: 
     1: static JSClass sHTMLDocumentAllTagsClass = {
     1:   "HTML document.all.tags class",
     1:   JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE | JSCLASS_PRIVATE_IS_NSISUPPORTS,
 98058:   JS_PropertyStub,                                         /* addProperty */
 98058:   JS_PropertyStub,                                         /* delProperty */
 98058:   JS_PropertyStub,                                         /* getProperty */
 98058:   JS_StrictPropertyStub,                                   /* setProperty */
 98058:   JS_EnumerateStub,
 98058:   (JSResolveOp)nsHTMLDocumentSH::DocumentAllTagsNewResolve,
 98058:   JS_ConvertStub,
 98058:   nsHTMLDocumentSH::ReleaseDocument,
 98058:   nsnull,                                                  /* checkAccess */
     1:   nsHTMLDocumentSH::CallToGetPropMapper
     1: };
     1: 
     1: // static
     1: JSBool
     1: nsHTMLDocumentSH::GetDocumentAllNodeList(JSContext *cx, JSObject *obj,
 48170:                                          nsDocument *domdoc,
 48170:                                          nsContentList **nodeList)
     1: {
     1:   // The document.all object is a mix of the node list returned by
     1:   // document.getElementsByTagName("*") and a map of elements in the
     1:   // document exposed by their id and/or name. To make access to the
     1:   // node list part (i.e. access to elements by index) not walk the
     1:   // document each time, we create a nsContentList and hold on to it
     1:   // in a reserved slot (0) on the document.all JSObject.
     1:   nsresult rv = NS_OK;
     1: 
 89826:   jsval collection = JS_GetReservedSlot(obj, 0);
     1: 
     1:   if (!JSVAL_IS_PRIMITIVE(collection)) {
     1:     // We already have a node list in our reserved slot, use it.
 80088:     JSObject *obj = JSVAL_TO_OBJECT(collection);
 80098:     if (mozilla::dom::binding::HTMLCollection::objIsWrapper(obj)) {
 80088:       nsIHTMLCollection *native =
 80098:         mozilla::dom::binding::HTMLCollection::getNative(obj);
 80088:       NS_ADDREF(*nodeList = static_cast<nsContentList*>(native));
 80088:     }
 80088:     else {
 80088:       nsISupports *native = sXPConnect->GetNativeOfWrapper(cx, obj);
 30001:       if (native) {
 48170:         NS_ADDREF(*nodeList = nsContentList::FromSupports(native));
 30001:       }
 30001:       else {
 30001:         rv = NS_ERROR_FAILURE;
     1:       }
 80088:     }
     1:   } else {
     1:     // No node list for this document.all yet, create one...
     1: 
 48170:     nsRefPtr<nsContentList> list =
 48170:       domdoc->GetElementsByTagName(NS_LITERAL_STRING("*"));
 48170:     if (!list) {
 48170:       rv |= NS_ERROR_OUT_OF_MEMORY;
 48170:     }
     1: 
     1:     nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 67679:     rv |= WrapNative(cx, JS_GetGlobalForScopeChain(cx),
 80486:                      static_cast<nsINodeList*>(list), list, false,
 67679:                      &collection, getter_AddRefs(holder));
     1: 
 48170:     list.forget(nodeList);
 48170: 
     1:     // ... and store it in our reserved slot.
 89826:     JS_SetReservedSlot(obj, 0, collection);
     1:   }
     1: 
     1:   if (NS_FAILED(rv)) {
102364:     xpc::Throw(cx, NS_ERROR_FAILURE);
     1: 
     1:     return JS_FALSE;
     1:   }
     1: 
     1:   return *nodeList != nsnull;
     1: }
     1: 
 18907: JSBool
 98960: nsHTMLDocumentSH::DocumentAllGetProperty(JSContext *cx, JSHandleObject obj_,
 98960:                                          JSHandleId id, jsval *vp)
 98960: {
 98960:   JSObject *obj = obj_;
 98960: 
     1:   // document.all.item and .namedItem get their value in the
     1:   // newResolve hook, so nothing to do for those properties here. And
     1:   // we need to return early to prevent <div id="item"> from shadowing
     1:   // document.all.item(), etc.
 98960:   if (sItem_id == id || sNamedItem_id == id) {
     1:     return JS_TRUE;
     1:   }
     1: 
 79734:   while (js::GetObjectJSClass(obj) != &sHTMLDocumentAllClass) {
 79734:     obj = js::GetObjectProto(obj);
 28522: 
 28522:     if (!obj) {
 28522:       NS_ERROR("The JS engine lies!");
 28522: 
 28522:       return JS_TRUE;
 28522:     }
 28522:   }
 28522: 
 89826:   nsHTMLDocument *doc = GetDocument(obj);
 95428:   nsISupports *result;
 95428:   nsWrapperCache *cache;
     1:   nsresult rv = NS_OK;
     1: 
 48470:   if (JSID_IS_STRING(id)) {
 98960:     if (sLength_id == id) {
     1:       // Map document.all.length to the length of the collection
     1:       // document.getElementsByTagName("*"), and make sure <div
     1:       // id="length"> doesn't shadow document.all.length.
     1: 
 48170:       nsRefPtr<nsContentList> nodeList;
 48170:       if (!GetDocumentAllNodeList(cx, obj, doc, getter_AddRefs(nodeList))) {
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       PRUint32 length;
     1:       rv = nodeList->GetLength(&length);
     1: 
     1:       if (NS_FAILED(rv)) {
102364:         xpc::Throw(cx, rv);
     1: 
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       *vp = INT_TO_JSVAL(length);
 18404: 
 18404:       return JS_TRUE;
 98960:     } else if (sTags_id != id) {
     1:       // For all other strings, look for an element by id or name.
     1: 
     1:       nsDependentJSString str(id);
     1: 
 48170:       result = doc->GetDocumentAllResult(str, &cache, &rv);
     1: 
     1:       if (NS_FAILED(rv)) {
102364:         xpc::Throw(cx, rv);
     1: 
     1:         return JS_FALSE;
     1:       }
     1:     }
 48170:     else {
 48170:       result = nsnull;
 48170:     }
 48470:   } else if (JSID_IS_INT(id) && JSID_TO_INT(id) >= 0) {
     1:     // Map document.all[n] (where n is a number) to the n:th item in
     1:     // the document.all node list.
     1: 
 48170:     nsRefPtr<nsContentList> nodeList;
 48170:     if (!GetDocumentAllNodeList(cx, obj, doc, getter_AddRefs(nodeList))) {
     1:       return JS_FALSE;
     1:     }
     1: 
 48601:     nsIContent *node = nodeList->GetNodeAt(JSID_TO_INT(id));
     1: 
     1:     result = node;
 48170:     cache = node;
 59692:   } else {
 59692:     result = nsnull;
     1:   }
     1: 
     1:   if (result) {
 80486:     rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), result, cache, true, vp);
     1:     if (NS_FAILED(rv)) {
102364:       xpc::Throw(cx, rv);
     1: 
     1:       return JS_FALSE;
     1:     }
  3991:   } else {
  3991:     *vp = JSVAL_VOID;
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
 18907: JSBool
 98960: nsHTMLDocumentSH::DocumentAllNewResolve(JSContext *cx, JSHandleObject obj, JSHandleId id,
 91237:                                         unsigned flags, JSObject **objp)
     1: {
     1:   if (flags & JSRESOLVE_ASSIGNING) {
     1:     // Nothing to do here if we're assigning
     1: 
     1:     return JS_TRUE;
     1:   }
     1: 
     1:   jsval v = JSVAL_VOID;
     1: 
 98960:   if (sItem_id == id || sNamedItem_id == id) {
     1:     // Define the item() or namedItem() method.
     1: 
 57721:     JSFunction *fnc = ::JS_DefineFunctionById(cx, obj, id, CallToGetPropMapper,
 57721:                                               0, JSPROP_ENUMERATE);
     1:     *objp = obj;
     1: 
     1:     return fnc != nsnull;
     1:   }
     1: 
 98960:   if (sLength_id == id) {
     1:     // document.all.length. Any jsval other than undefined would do
     1:     // here, all we need is to get into the code below that defines
     1:     // this propery on obj, the rest happens in
     1:     // DocumentAllGetProperty().
     1: 
     1:     v = JSVAL_ONE;
 98960:   } else if (sTags_id == id) {
 89826:     nsHTMLDocument *doc = GetDocument(obj);
     1: 
     1:     JSObject *tags = ::JS_NewObject(cx, &sHTMLDocumentAllTagsClass, nsnull,
  4427:                                     ::JS_GetGlobalForObject(cx, obj));
     1:     if (!tags) {
     1:       return JS_FALSE;
     1:     }
     1: 
 89826:     ::JS_SetPrivate(tags, doc);
     1: 
     1:     // The "tags" JSObject now also owns doc.
     1:     NS_ADDREF(doc);
     1: 
     1:     v = OBJECT_TO_JSVAL(tags);
     1:   } else {
     1:     if (!DocumentAllGetProperty(cx, obj, id, &v)) {
     1:       return JS_FALSE;
     1:     }
     1:   }
     1: 
     1:   JSBool ok = JS_TRUE;
     1: 
     1:   if (v != JSVAL_VOID) {
 48470:     ok = ::JS_DefinePropertyById(cx, obj, id, v, nsnull, nsnull, 0);
     1:     *objp = obj;
     1:   }
     1: 
     1:   return ok;
     1: }
     1: 
     1: // Finalize hook used by document related JS objects, but also by
     1: // sGlobalScopePolluterClass!
     1: 
 18907: void
 94738: nsHTMLDocumentSH::ReleaseDocument(JSFreeOp *fop, JSObject *obj)
     1: {
102130:   nsIHTMLDocument *doc = static_cast<nsIHTMLDocument *>(JS_GetPrivate(obj));
102130:   if (doc) {
102130:     xpc::DeferredRelease(doc);
102130:   }
     1: }
     1: 
 18907: JSBool
 91237: nsHTMLDocumentSH::CallToGetPropMapper(JSContext *cx, unsigned argc, jsval *vp)
     1: {
     1:   // Handle document.all("foo") style access to document.all.
     1: 
     1:   if (argc != 1) {
     1:     // XXX: Should throw NS_ERROR_XPC_NOT_ENOUGH_ARGS for argc < 1,
     1:     // and create a new NS_ERROR_XPC_TOO_MANY_ARGS for argc > 1? IE
     1:     // accepts nothing other than one arg.
102364:     xpc::Throw(cx, NS_ERROR_INVALID_ARG);
     1: 
     1:     return JS_FALSE;
     1:   }
     1: 
     1:   // Convert all types to string.
 53557:   JSString *str = ::JS_ValueToString(cx, JS_ARGV(cx, vp)[0]);
     1:   if (!str) {
     1:     return JS_FALSE;
     1:   }
     1: 
 60795:   // If we are called via document.all(id) instead of document.all.item(i) or
 60795:   // another method, use the document.all callee object as self.
     1:   JSObject *self;
 98362:   JS::Value callee = JS_CALLEE(cx, vp);
 98362:   if (callee.isObject() &&
 98362:       JS_GetClass(&callee.toObject()) == &sHTMLDocumentAllClass) {
 60795:     self = JSVAL_TO_OBJECT(JS_CALLEE(cx, vp));
 60795:   } else {
 53557:     self = JS_THIS_OBJECT(cx, vp);
 53557:     if (!self)
 53557:       return JS_FALSE;
     1:   }
     1: 
 59889:   size_t length;
 59889:   const jschar *chars = ::JS_GetStringCharsAndLength(cx, str, &length);
 59889:   if (!chars) {
 59889:     return JS_FALSE;
 59889:   }
 59889: 
 59889:   return ::JS_GetUCProperty(cx, self, chars, length, vp);
     1: }
     1: 
     1: 
     1: static inline JSObject *
 89826: GetDocumentAllHelper(JSObject *obj)
     1: {
 89430:   while (obj && JS_GetClass(obj) != &sHTMLDocumentAllHelperClass) {
 89826:     obj = ::JS_GetPrototype(obj);
     1:   }
     1: 
     1:   return obj;
     1: }
     1: 
 48470: static inline void *
 48470: FlagsToPrivate(PRUint32 flags)
 48470: {
 48470:   JS_ASSERT((flags & (1 << 31)) == 0);
 48470:   return (void *)(flags << 1);
 48470: }
 48470: 
 48470: static inline PRUint32
 48470: PrivateToFlags(void *priv)
 48470: {
 48470:   JS_ASSERT(size_t(priv) <= PR_UINT32_MAX && (size_t(priv) & 1) == 0);
 48470:   return (PRUint32)(size_t(priv) >> 1);
 48470: }
 48470: 
 18907: JSBool
 98960: nsHTMLDocumentSH::DocumentAllHelperGetProperty(JSContext *cx, JSHandleObject obj,
 98960:                                                JSHandleId id, JS::Value *vp)
 98960: {
 98960:   if (nsDOMClassInfo::sAll_id != id) {
     1:     return JS_TRUE;
     1:   }
     1: 
 89826:   JSObject *helper = GetDocumentAllHelper(obj);
     1: 
     1:   if (!helper) {
     1:     NS_ERROR("Uh, how'd we get here?");
     1: 
     1:     // Let scripts continue, if we somehow did get here...
     1: 
     1:     return JS_TRUE;
     1:   }
     1: 
 89826:   PRUint32 flags = PrivateToFlags(::JS_GetPrivate(helper));
     1: 
     1:   if (flags & JSRESOLVE_DETECTING || !(flags & JSRESOLVE_QUALIFIED)) {
     1:     // document.all is either being detected, e.g. if (document.all),
     1:     // or it was not being resolved with a qualified name. Claim that
     1:     // document.all is undefined.
     1: 
 98362:     vp->setUndefined();
     1:   } else {
     1:     // document.all is not being detected, and it resolved with a
     1:     // qualified name. Expose the document.all collection.
     1: 
 98362:     if (!vp->isObjectOrNull()) { 
     1:       // First time through, create the collection, and set the
     1:       // document as its private nsISupports data.
 30001:       nsresult rv;
 30001:       nsCOMPtr<nsIHTMLDocument> doc = do_QueryWrapper(cx, obj, &rv);
     1:       if (NS_FAILED(rv)) {
102364:         xpc::Throw(cx, rv);
     1: 
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       JSObject *all = ::JS_NewObject(cx, &sHTMLDocumentAllClass, nsnull,
  4427:                                      ::JS_GetGlobalForObject(cx, obj));
     1:       if (!all) {
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       // Let the JSObject take over ownership of doc.
 89826:       ::JS_SetPrivate(all, doc);
     1: 
 30001:       doc.forget();
 30001: 
 98362:       vp->setObject(*all);
     1:     }
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
 18907: JSBool
 98960: nsHTMLDocumentSH::DocumentAllHelperNewResolve(JSContext *cx, JSHandleObject obj,
 98960:                                               JSHandleId id, unsigned flags,
     1:                                               JSObject **objp)
     1: {
 98960:   if (nsDOMClassInfo::sAll_id == id) {
     1:     // document.all is resolved for the first time. Define it.
 89826:     JSObject *helper = GetDocumentAllHelper(obj);
     1: 
     1:     if (helper) {
     1:       if (!::JS_DefineProperty(cx, helper, "all", JSVAL_VOID, nsnull, nsnull,
     1:                                JSPROP_ENUMERATE)) {
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       *objp = helper;
     1:     }
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
     1: 
 18907: JSBool
 98960: nsHTMLDocumentSH::DocumentAllTagsNewResolve(JSContext *cx, JSHandleObject obj,
 98960:                                             JSHandleId id, unsigned flags,
     1:                                             JSObject **objp)
     1: {
 48470:   if (JSID_IS_STRING(id)) {
 89826:     nsDocument *doc = GetDocument(obj);
 89826: 
 89826:     JSObject *proto = ::JS_GetPrototype(obj);
     1:     if (NS_UNLIKELY(!proto)) {
     1:       return JS_TRUE;
     1:     }
     1: 
     1:     JSBool found;
 48470:     if (!::JS_HasPropertyById(cx, proto, id, &found)) {
     1:       return JS_FALSE;
     1:     }
     1: 
     1:     if (found) {
     1:       return JS_TRUE;
     1:     }
     1: 
 48170:     nsRefPtr<nsContentList> tags =
 59889:       doc->GetElementsByTagName(nsDependentJSString(id));
     1: 
     1:     if (tags) {
     1:       jsval v;
     1:       nsCOMPtr<nsIXPConnectJSObjectHolder> holder;
 67679:       nsresult rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx),
 80486:                                static_cast<nsINodeList*>(tags), tags, true,
 67679:                                &v, getter_AddRefs(holder));
     1:       if (NS_FAILED(rv)) {
102364:         xpc::Throw(cx, rv);
     1: 
     1:         return JS_FALSE;
     1:       }
     1: 
 48470:       if (!::JS_DefinePropertyById(cx, obj, id, v, nsnull, nsnull, 0)) {
     1:         return JS_FALSE;
     1:       }
     1: 
     1:       *objp = obj;
     1:     }
     1:   }
     1: 
     1:   return JS_TRUE;
     1: }
     1: 
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLDocumentSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                              JSObject *obj, jsid id, PRUint32 flags,
 79445:                              JSObject **objp, bool *_retval)
     1: {
     1:   // nsDocumentSH::NewResolve() does a security check that we'd kinda
     1:   // want to do here too before doing anything else. But given that we
     1:   // only define dynamic properties here before the call to
     1:   // nsDocumentSH::NewResolve() we're ok, since once those properties
     1:   // are accessed, we'll do the necessary security check.
     1: 
     1:   if (!(flags & JSRESOLVE_ASSIGNING)) {
     1:     // For native wrappers, do not resolve random names on document
     1: 
     1:     JSAutoRequest ar(cx);
     1: 
     1:     if (!ObjectIsNativeWrapper(cx, obj)) {
     1:       nsCOMPtr<nsISupports> result;
 48170:       nsWrapperCache *cache;
 48170:       nsresult rv = ResolveImpl(cx, wrapper, id, getter_AddRefs(result),
 48170:                                 &cache);
     1:       NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:       if (result) {
     1:         JSBool ok = *_retval =
 48470:           ::JS_DefinePropertyById(cx, obj, id, JSVAL_VOID, nsnull, nsnull, 0);
     1:         *objp = obj;
     1: 
     1:         return ok ? NS_OK : NS_ERROR_FAILURE;
     1:       }
     1:     }
     1: 
     1:     if (id == sAll_id && !sDisableDocumentAllSupport &&
     1:         !ObjectIsNativeWrapper(cx, obj)) {
  9596:       nsIDocument *doc = static_cast<nsIDocument*>(wrapper->Native());
     1: 
     1:       if (doc->GetCompatibilityMode() == eCompatibility_NavQuirks) {
 89826:         JSObject *helper = GetDocumentAllHelper(::JS_GetPrototype(obj));
 89826: 
 89826:         JSObject *proto = ::JS_GetPrototype(helper ? helper : obj);
     1: 
     1:         // Check if the property all is defined on obj's (or helper's
     1:         // if obj doesn't exist) prototype, if it is, don't expose our
     1:         // document.all helper.
     1: 
     1:         JSBool hasAll = JS_FALSE;
     1:         if (proto && !JS_HasProperty(cx, proto, "all", &hasAll)) {
     1:           return NS_ERROR_UNEXPECTED;
     1:         }
     1: 
     1:         if (hasAll && helper) {
     1:           // Our helper's prototype now has an "all" property, remove
     1:           // the helper out of the prototype chain to prevent
     1:           // shadowing of the now defined "all" property.
     1:           JSObject *tmp = obj, *tmpProto;
     1: 
 89826:           while ((tmpProto = ::JS_GetPrototype(tmp)) != helper) {
     1:             tmp = tmpProto;
     1:           }
     1: 
     1:           ::JS_SetPrototype(cx, tmp, proto);
     1:         }
     1: 
     1:         // If we don't already have a helper, and we're resolving
     1:         // document.all qualified, and we're *not* detecting
     1:         // document.all, e.g. if (document.all), and "all" isn't
     1:         // already defined on our prototype, create a helper.
     1:         if (!helper && flags & JSRESOLVE_QUALIFIED &&
     1:             !(flags & JSRESOLVE_DETECTING) && !hasAll) {
     1:           // Print a warning so developers can stop using document.all
     1:           PrintWarningOnConsole(cx, "DocumentAllUsed");
     1: 
     1:           helper = ::JS_NewObject(cx, &sHTMLDocumentAllHelperClass,
 89826:                                   ::JS_GetPrototype(obj),
  4427:                                   ::JS_GetGlobalForObject(cx, obj));
     1: 
     1:           if (!helper) {
     1:             return NS_ERROR_OUT_OF_MEMORY;
     1:           }
     1: 
     1:           // Insert the helper into our prototype chain. helper's prototype
     1:           // is already obj's current prototype.
     1:           if (!::JS_SetPrototype(cx, obj, helper)) {
102364:             xpc::Throw(cx, NS_ERROR_UNEXPECTED);
     1: 
     1:             return NS_ERROR_UNEXPECTED;
     1:           }
     1:         }
     1: 
     1:         // If we have (or just created) a helper, pass the resolve flags
     1:         // to the helper as its private data.
 89826:         if (helper) {
 89826:           ::JS_SetPrivate(helper, FlagsToPrivate(flags));
     1:         }
     1:       }
     1: 
     1:       return NS_OK;
     1:     }
     1:   }
     1: 
     1:   return nsDocumentSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLDocumentSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                               JSContext *cx, JSObject *obj, jsid id,
 79445:                               jsval *vp, bool *_retval)
     1: {
     1:   // For native wrappers, do not get random names on document
  6394:   if (!ObjectIsNativeWrapper(cx, obj)) {
     1:     nsCOMPtr<nsISupports> result;
     1: 
     1:     JSAutoRequest ar(cx);
     1: 
 48170:     nsWrapperCache *cache;
 48170:     nsresult rv = ResolveImpl(cx, wrapper, id, getter_AddRefs(result), &cache);
     1:     NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:     if (result) {
 80486:       rv = WrapNative(cx, obj, result, cache, true, vp);
     1:       if (NS_SUCCEEDED(rv)) {
     1:         rv = NS_SUCCESS_I_DID_SOMETHING;
     1:       }
     1:       return rv;
     1:     }
  6394:   }
  6394: 
 78692:   return NS_OK;
  6394: }
     1: 
     1: // HTMLFormElement helper
     1: 
     1: // static
     1: nsresult
 59889: nsHTMLFormElementSH::FindNamedItem(nsIForm *aForm, jsid id,
 48170:                                    nsISupports **aResult,
 48170:                                    nsWrapperCache **aCache)
     1: {
 59889:   nsDependentJSString name(id);
     1: 
 20237:   *aResult = aForm->ResolveName(name).get();
 48170:   // FIXME Get the wrapper cache from nsIForm::ResolveName
 48170:   *aCache = nsnull;
     1: 
     1:   if (!*aResult) {
     1:     nsCOMPtr<nsIContent> content(do_QueryInterface(aForm));
     1: 
     1:     nsCOMPtr<nsIHTMLDocument> html_doc =
     1:       do_QueryInterface(content->GetDocument());
     1: 
 69024:     if (html_doc && content) {
 69024:       html_doc->ResolveName(name, content, aResult, aCache);
     1:     }
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLFormElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
 48470:                                 JSContext *cx, JSObject *obj, jsid id,
     1:                                 PRUint32 flags, JSObject **objp,
 79445:                                 bool *_retval)
     1: {
     1:   // For native wrappers, do not resolve random names on form
 48470:   if ((!(JSRESOLVE_ASSIGNING & flags)) && JSID_IS_STRING(id) &&
     1:       !ObjectIsNativeWrapper(cx, obj)) {
 30001:     nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper, obj));
     1:     nsCOMPtr<nsISupports> result;
 48170:     nsWrapperCache *cache;
     1: 
 59889:     FindNamedItem(form, id, getter_AddRefs(result), &cache);
     1: 
     1:     if (result) {
     1:       JSAutoRequest ar(cx);
 48470:       *_retval = ::JS_DefinePropertyById(cx, obj, id, JSVAL_VOID, nsnull,
 48470:                                          nsnull, JSPROP_ENUMERATE);
     1: 
     1:       *objp = obj;
     1: 
     1:       return *_retval ? NS_OK : NS_ERROR_FAILURE;
     1:     }
     1:   }
     1: 
 34226:   return nsElementSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
     1: }
     1: 
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLFormElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                                  JSContext *cx, JSObject *obj, jsid id,
 79445:                                  jsval *vp, bool *_retval)
     1: {
 30001:   nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper, obj));
     1: 
 48470:   if (JSID_IS_STRING(id)) {
     1:     // For native wrappers, do not get random names on form
     1:     if (!ObjectIsNativeWrapper(cx, obj)) {
     1:       nsCOMPtr<nsISupports> result;
 48170:       nsWrapperCache *cache;
     1: 
 59889:       FindNamedItem(form, id, getter_AddRefs(result), &cache);
     1: 
     1:       if (result) {
     1:         // Wrap result, result can be either an element or a list of
     1:         // elements
 80486:         nsresult rv = WrapNative(cx, obj, result, cache, true, vp);
     1:         return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
     1:       }
     1:     }
  6394:   } else {
     1:     PRInt32 n = GetArrayIndexFromId(cx, id);
     1: 
     1:     if (n >= 0) {
 34395:       nsIFormControl* control = form->GetElementAt(n);
     1: 
     1:       if (control) {
 48171:         Element *element =
 48171:           static_cast<nsGenericHTMLFormElement*>(form->GetElementAt(n));
 55604:         nsresult rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), element,
 80486:                                  element, true, vp);
     1:         return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
     1:       }
     1:     }
  6394:   }
  6394: 
 78692:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLFormElementSH::NewEnumerate(nsIXPConnectWrappedNative *wrapper,
     1:                                   JSContext *cx, JSObject *obj,
     1:                                   PRUint32 enum_op, jsval *statep,
 79445:                                   jsid *idp, bool *_retval)
     1: {
     1:   switch (enum_op) {
     1:   case JSENUMERATE_INIT:
 47569:   case JSENUMERATE_INIT_ALL:
     1:     {
 30001:       nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper, obj));
     1: 
     1:       if (!form) {
     1:         *statep = JSVAL_NULL;
     1:         return NS_ERROR_UNEXPECTED;
     1:       }
     1: 
     1:       *statep = INT_TO_JSVAL(0);
     1: 
     1:       if (idp) {
 20237:         PRUint32 count = form->GetElementCount();
     1: 
 48470:         *idp = INT_TO_JSID(count);
     1:       }
     1: 
     1:       break;
     1:     }
     1:   case JSENUMERATE_NEXT:
     1:     {
 30001:       nsCOMPtr<nsIForm> form(do_QueryWrappedNative(wrapper, obj));
     1:       NS_ENSURE_TRUE(form, NS_ERROR_FAILURE);
     1: 
     1:       PRInt32 index = (PRInt32)JSVAL_TO_INT(*statep);
     1: 
 20237:       PRUint32 count = form->GetElementCount();
     1: 
     1:       if ((PRUint32)index < count) {
 34395:         nsIFormControl* controlNode = form->GetElementAt(index);
     1:         NS_ENSURE_TRUE(controlNode, NS_ERROR_FAILURE);
     1: 
     1:         nsCOMPtr<nsIDOMElement> domElement = do_QueryInterface(controlNode);
     1:         NS_ENSURE_TRUE(domElement, NS_ERROR_FAILURE);
     1: 
     1:         nsAutoString attr;
     1:         domElement->GetAttribute(NS_LITERAL_STRING("name"), attr);
     1:         if (attr.IsEmpty()) {
     1:           // If name is not there, use index instead
     1:           attr.AppendInt(index);
     1:         }
     1: 
     1:         JSAutoRequest ar(cx);
     1: 
     1:         JSString *jsname =
  3233:           JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>
  3233:                                                   (attr.get()),
     1:                               attr.Length());
     1:         NS_ENSURE_TRUE(jsname, NS_ERROR_OUT_OF_MEMORY);
     1: 
     1:         JS_ValueToId(cx, STRING_TO_JSVAL(jsname), idp);
     1: 
     1:         *statep = INT_TO_JSVAL(++index);
     1:       } else {
     1:         *statep = JSVAL_NULL;
     1:       }
     1: 
     1:       break;
     1:     }
     1:   case JSENUMERATE_DESTROY:
     1:     *statep = JSVAL_NULL;
     1: 
     1:     break;
     1:   }
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: 
     1: // HTMLSelectElement helper
     1: 
     1: NS_IMETHODIMP
 63079: nsHTMLSelectElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 63079:                                   JSObject *obj, jsid id, PRUint32 flags,
 79445:                                   JSObject **objp, bool *_retval)
 63079: {
 63079:   PRInt32 n = GetArrayIndexFromId(cx, id);
 63079:   if (n >= 0) {
 63079:     nsHTMLSelectElement *s =
 63079:       nsHTMLSelectElement::FromSupports(GetNative(wrapper, obj));
 63079: 
 63079:     nsHTMLOptionCollection *options = s->GetOptions();
 63079:     if (options) {
 68862:       nsISupports *node = options->GetNodeAt(n);
 63079:       if (node) {
 63079:         *objp = obj;
 75049:         *_retval = JS_DefineElement(cx, obj, PRUint32(n), JSVAL_VOID, nsnull, nsnull,
 63079:                                     JSPROP_ENUMERATE | JSPROP_SHARED);
 63183: 
 63183:         return NS_OK;
 63183:       }
 63183:     }
 63183:   }
 63183: 
 63183:   return nsElementSH::NewResolve(wrapper, cx, obj, id, flags, objp, _retval);
 63079: }
 63079: 
 63079: NS_IMETHODIMP
     1: nsHTMLSelectElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                                    JSContext *cx, JSObject *obj, jsid id,
 79445:                                    jsval *vp, bool *_retval)
     1: {
     1:   PRInt32 n = GetArrayIndexFromId(cx, id);
     1: 
     1:   nsresult rv = NS_OK;
     1:   if (n >= 0) {
 47801:     nsHTMLSelectElement *s =
 47801:       nsHTMLSelectElement::FromSupports(GetNative(wrapper, obj));
 47801: 
 47801:     nsHTMLOptionCollection *options = s->GetOptions();
     1: 
     1:     if (options) {
 68862:       nsISupports *node = options->GetNodeAt(n);
     1: 
 55604:       rv = WrapNative(cx, JS_GetGlobalForScopeChain(cx), node,
 80486:                       &NS_GET_IID(nsIDOMNode), true, vp);
     1:       if (NS_SUCCEEDED(rv)) {
     1:         rv = NS_SUCCESS_I_DID_SOMETHING;
     1:       }
     1:       return rv;
     1:     }
  6394:   }
  6394: 
 78692:   return NS_OK;
  6394: }
     1: 
     1: // static
     1: nsresult
 98362: nsHTMLSelectElementSH::SetOption(JSContext *cx, JS::Value *vp, PRUint32 aIndex,
 80101:                                  nsIDOMHTMLOptionsCollection *aOptCollection)
     1: {
     1:   JSAutoRequest ar(cx);
     1: 
     1:   // vp must refer to an object
 98362:   if (!vp->isObject()) {
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
 98362:   nsCOMPtr<nsIDOMHTMLOptionElement> new_option = do_QueryWrapper(cx, &vp->toObject());
     1:   if (!new_option) {
     1:     // Someone is trying to set an option to a non-option object.
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
     1:   return aOptCollection->SetOption(aIndex, new_option);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsHTMLSelectElementSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                                    JSContext *cx, JSObject *obj, jsid id,
 79445:                                    jsval *vp, bool *_retval)
     1: {
     1:   PRInt32 n = GetArrayIndexFromId(cx, id);
     1: 
     1:   if (n >= 0) {
 30001:     nsCOMPtr<nsIDOMHTMLSelectElement> select =
 30001:       do_QueryWrappedNative(wrapper, obj);
     1:     NS_ENSURE_TRUE(select, NS_ERROR_UNEXPECTED);
     1: 
     1:     nsCOMPtr<nsIDOMHTMLOptionsCollection> options;
     1:     select->GetOptions(getter_AddRefs(options));
     1: 
 80101:     nsresult rv = SetOption(cx, vp, n, options);
     1:     return NS_FAILED(rv) ? rv : NS_SUCCESS_I_DID_SOMETHING;
     1:   }
     1: 
 78692:   return NS_OK;
     1: }
     1: 
     1: 
     1: // HTMLObject/EmbedElement helper
 89114: // Keep in mind that it is OK for this to fail to return an instance. Don't return a
 89114: // failure result unless something truly exceptional has happened.
  5405: // static
     1: nsresult
 13098: nsHTMLPluginObjElementSH::GetPluginInstanceIfSafe(nsIXPConnectWrappedNative *wrapper,
 30001:                                                   JSObject *obj,
 70007:                                                   nsNPAPIPluginInstance **_result)
     1: {
     1:   *_result = nsnull;
     1: 
 30001:   nsCOMPtr<nsIContent> content(do_QueryWrappedNative(wrapper, obj));
     1:   NS_ENSURE_TRUE(content, NS_ERROR_UNEXPECTED);
     1: 
     1:   nsCOMPtr<nsIObjectLoadingContent> objlc(do_QueryInterface(content));
     1:   NS_ASSERTION(objlc, "Object nodes must implement nsIObjectLoadingContent");
 13098: 
 89114:   nsresult rv = objlc->GetPluginInstance(_result);
 89114:   if (NS_SUCCEEDED(rv) && *_result) {
 89114:     return rv;
 89114:   }
 89114: 
 89114:   // If it's not safe to run script we'll only return the instance if it exists.
100003:   // Ditto if the document is inactive.
100003:   if (!nsContentUtils::IsSafeToRunScript() || !content->OwnerDoc()->IsActive()) {
 89114:     return rv;
 89114:   }
 89114: 
 89114:   // We don't care if this actually starts the plugin or not, we just want to
 89114:   // try to start it now if possible.
 89114:   objlc->SyncStartPluginInstance();
 89114: 
 13098:   return objlc->GetPluginInstance(_result);
 13098: }
 13098: 
102221: class nsPluginProtoChainInstallRunner MOZ_FINAL : public nsIRunnable
 13098: {
 13098: public:
 13098:   NS_DECL_ISUPPORTS
 13098: 
 13098:   nsPluginProtoChainInstallRunner(nsIXPConnectWrappedNative* wrapper,
 13098:                                   nsIScriptContext* scriptContext)
 13098:     : mWrapper(wrapper),
 13098:       mContext(scriptContext)
 13098:   {
 13098:   }
 13098: 
 13098:   NS_IMETHOD Run()
 13098:   {
 14986:     JSContext* cx = nsnull;
 14986:     if (mContext) {
 78415:       cx = mContext->GetNativeContext();
 14986:     } else {
 14986:       nsCOMPtr<nsIThreadJSContextStack> stack =
 14986:         do_GetService("@mozilla.org/js/xpc/ContextStack;1");
 14986:       NS_ENSURE_TRUE(stack, NS_OK);
 14986: 
 97744:       cx = stack->GetSafeJSContext();
 14986:       NS_ENSURE_TRUE(cx, NS_OK);
 14986:     }
 14986: 
 13098:     JSObject* obj = nsnull;
 13098:     mWrapper->GetJSObject(&obj);
 13098:     NS_ASSERTION(obj, "Should never be null");
 14986:     nsHTMLPluginObjElementSH::SetupProtoChain(mWrapper, cx, obj);
 13098:     return NS_OK;
 13098:   }
 13098: 
 13098: private:
 13098:   nsCOMPtr<nsIXPConnectWrappedNative> mWrapper;
 13098:   nsCOMPtr<nsIScriptContext> mContext;
 13098: };
 13098: 
 13098: NS_IMPL_ISUPPORTS1(nsPluginProtoChainInstallRunner, nsIRunnable)
 13098: 
 13098: // static
 13098: nsresult
 13098: nsHTMLPluginObjElementSH::SetupProtoChain(nsIXPConnectWrappedNative *wrapper,
 13098:                                           JSContext *cx,
 13098:                                           JSObject *obj)
 13098: {
 13098:   NS_ASSERTION(nsContentUtils::IsSafeToRunScript(),
 13098:                "Shouldn't have gotten in here");
 13098: 
 13098:   nsCxPusher cxPusher;
 13098:   if (!cxPusher.Push(cx)) {
 13098:     return NS_OK;
 13098:   }
     1: 
 60837:   JSAutoRequest ar(cx);
 60837: 
 60829:   JSAutoEnterCompartment ac;
 60829:   if (!ac.enter(cx, obj)) {
 60829:     return NS_ERROR_UNEXPECTED;
 60829:   }
 60829: 
 70007:   nsRefPtr<nsNPAPIPluginInstance> pi;
 30001:   nsresult rv = GetPluginInstanceIfSafe(wrapper, obj, getter_AddRefs(pi));
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   if (!pi) {
     1:     // No plugin around for this object.
     1: 
     1:     return NS_OK;
     1:   }
     1: 
     1:   JSObject *pi_obj = nsnull; // XPConnect-wrapped peer object, when we get it.
     1:   JSObject *pi_proto = nsnull; // 'pi.__proto__'
     1: 
     1:   rv = GetPluginJSObject(cx, obj, pi, &pi_obj, &pi_proto);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   if (!pi_obj) {
     1:     // Didn't get a plugin instance JSObject, nothing we can do then.
 89114:     return NS_OK;
 89114:   }
     1: 
     1:   // If we got an xpconnect-wrapped plugin object, set obj's
     1:   // prototype's prototype to the scriptable plugin.
     1: 
     1:   JSObject *my_proto = nsnull;
     1: 
     1:   // Get 'this.__proto__'
     1:   rv = wrapper->GetJSObjectPrototype(&my_proto);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   // Set 'this.__proto__' to pi
     1:   if (!::JS_SetPrototype(cx, obj, pi_obj)) {
     1:     return NS_ERROR_UNEXPECTED;
     1:   }
     1: 
 89430:   if (pi_proto && JS_GetClass(pi_proto) != sObjectClass) {
     1:     // The plugin wrapper has a proto that's not Object.prototype, set
     1:     // 'pi.__proto__.__proto__' to the original 'this.__proto__'
 14601:     if (pi_proto != my_proto && !::JS_SetPrototype(cx, pi_proto, my_proto)) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   } else {
 29923:     // 'pi' didn't have a prototype, or pi's proto was
 29923:     // 'Object.prototype' (i.e. pi is an NPRuntime wrapped JS object)
 29923:     // set 'pi.__proto__' to the original 'this.__proto__'
     1:     if (!::JS_SetPrototype(cx, pi_obj, my_proto)) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   }
     1: 
     1:   // Before this proto dance the objects involved looked like this:
     1:   //
     1:   // this.__proto__.__proto__
     1:   //   ^      ^         ^
     1:   //   |      |         |__ Object.prototype
     1:   //   |      |
     1:   //   |      |__ xpc embed wrapper proto (shared)
     1:   //   |
     1:   //   |__ xpc wrapped native embed node
     1:   //
 30015:   // pi.__proto__
 30015:   // ^      ^
 30015:   // |      |__ Object.prototype
     1:   // |
 30015:   // |__ Plugin NPRuntime JS object wrapper
     1:   //
     1:   // Now, after the above prototype setup the prototype chain should
 30015:   // look like this:
     1:   //
     1:   // this.__proto__.__proto__.__proto__
     1:   //   ^      ^         ^         ^
     1:   //   |      |         |         |__ Object.prototype
     1:   //   |      |         |
     1:   //   |      |         |__ xpc embed wrapper proto (shared)
     1:   //   |      |
 30015:   //   |      |__ Plugin NPRuntime JS object wrapper
     1:   //   |
     1:   //   |__ xpc wrapped native embed node
     1:   //
     1: 
     1:   return NS_OK;
     1: }
     1: 
 13098: NS_IMETHODIMP
 30001: nsHTMLPluginObjElementSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 30001:                                     JSObject *globalObj, JSObject **parentObj)
 30001: {
 34226:   nsresult rv = nsElementSH::PreCreate(nativeObj, cx, globalObj, parentObj);
 30001: 
 30001:   // For now we don't support slim wrappers for plugins.
 30001:   return rv == NS_SUCCESS_ALLOW_SLIM_WRAPPERS ? NS_OK : rv;
 30001: }
 30001: 
 30001: NS_IMETHODIMP
 13098: nsHTMLPluginObjElementSH::PostCreate(nsIXPConnectWrappedNative *wrapper,
 13098:                                      JSContext *cx, JSObject *obj)
 13098: {
 13098:   if (nsContentUtils::IsSafeToRunScript()) {
 33525: #ifdef DEBUG
 33525:     nsresult rv =
 33525: #endif
 33525:       SetupProtoChain(wrapper, cx, obj);
 14986: 
 14986:     // If SetupProtoChain failed then we're in real trouble. We're about to fail
 14986:     // PostCreate but it's more than likely that we handed our (now invalid)
 14986:     // wrapper to someone already. Bug 429442 is an example of the kind of crash
 14986:     // that can result from such a situation. We'll return NS_OK for the time
 14986:     // being and hope for the best.
 14986:     NS_WARN_IF_FALSE(NS_SUCCEEDED(rv), "SetupProtoChain failed!");
 14986:     return NS_OK;
 14986:   }
 14986: 
 14986:   // This may be null if the JS context is not a DOM context. That's ok, we'll
 14986:   // use the safe context from XPConnect in the runnable.
 14986:   nsCOMPtr<nsIScriptContext> scriptContext = GetScriptContextFromJSContext(cx);
 14986: 
 14986:   nsRefPtr<nsPluginProtoChainInstallRunner> runner =
 14986:     new nsPluginProtoChainInstallRunner(wrapper, scriptContext);
 14986:   nsContentUtils::AddScriptRunner(runner);
 13098: 
 13098:   return NS_OK;
 13098: }
     1: 
     1: NS_IMETHODIMP
  5405: nsHTMLPluginObjElementSH::GetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                                       JSContext *cx, JSObject *obj, jsid id,
 79445:                                       jsval *vp, bool *_retval)
     1: {
     1:   JSAutoRequest ar(cx);
     1: 
 89826:   JSObject *pi_obj = ::JS_GetPrototype(obj);
     1:   if (NS_UNLIKELY(!pi_obj)) {
     1:     return NS_OK;
     1:   }
     1: 
 80486:   JSBool found = false;
     1: 
     1:   if (!ObjectIsNativeWrapper(cx, obj)) {
 48470:     *_retval = ::JS_HasPropertyById(cx, pi_obj, id, &found);
     1:     if (!*_retval) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   }
     1: 
     1:   if (found) {
 48470:     *_retval = ::JS_GetPropertyById(cx, pi_obj, id, vp);
     1:     return *_retval ? NS_SUCCESS_I_DID_SOMETHING : NS_ERROR_FAILURE;
     1:   }
     1: 
 78692:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
  5405: nsHTMLPluginObjElementSH::SetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                                       JSContext *cx, JSObject *obj, jsid id,
 79445:                                       jsval *vp, bool *_retval)
     1: {
     1:   JSAutoRequest ar(cx);
     1: 
 89826:   JSObject *pi_obj = ::JS_GetPrototype(obj);
     1:   if (NS_UNLIKELY(!pi_obj)) {
     1:     return NS_OK;
     1:   }
     1: 
 80486:   JSBool found = false;
     1: 
     1:   if (!ObjectIsNativeWrapper(cx, obj)) {
 48470:     *_retval = ::JS_HasPropertyById(cx, pi_obj, id, &found);
     1:     if (!*_retval) {
     1:       return NS_ERROR_UNEXPECTED;
     1:     }
     1:   }
     1: 
     1:   if (found) {
 48470:     *_retval = ::JS_SetPropertyById(cx, pi_obj, id, vp);
     1:     return *_retval ? NS_SUCCESS_I_DID_SOMETHING : NS_ERROR_FAILURE;
     1:   }
     1: 
 78692:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
  5405: nsHTMLPluginObjElementSH::Call(nsIXPConnectWrappedNative *wrapper,
  5405:                                JSContext *cx, JSObject *obj, PRUint32 argc,
 79445:                                jsval *argv, jsval *vp, bool *_retval)
     1: {
 70007:   nsRefPtr<nsNPAPIPluginInstance> pi;
 30001:   nsresult rv = GetPluginInstanceIfSafe(wrapper, obj, getter_AddRefs(pi));
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
 30015:   // If obj is a native wrapper, or if there's no plugin around for
 30015:   // this object, throw.
 33921:   if (ObjectIsNativeWrapper(cx, obj) || !pi) {
     1:     return NS_ERROR_NOT_AVAILABLE;
     1:   }
     1: 
     1:   JSObject *pi_obj = nsnull;
     1:   JSObject *pi_proto = nsnull;
     1: 
     1:   rv = GetPluginJSObject(cx, obj, pi, &pi_obj, &pi_proto);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   if (!pi) {
     1:     return NS_ERROR_NOT_AVAILABLE;
     1:   }
     1: 
     1:   // XPConnect passes us the XPConnect wrapper JSObject as obj, and
     1:   // not the 'this' parameter that the JS engine passes in. Pass in
     1:   // the real this parameter from JS (argv[-1]) here.
     1:   JSAutoRequest ar(cx);
 55717:   *_retval = ::JS::Call(cx, argv[-1], pi_obj, argc, argv, vp);
     1: 
     1:   return NS_OK;
     1: }
     1: 
     1: 
     1: nsresult
     1: nsHTMLPluginObjElementSH::GetPluginJSObject(JSContext *cx, JSObject *obj,
 70007:                                             nsNPAPIPluginInstance *plugin_inst,
     1:                                             JSObject **plugin_obj,
     1:                                             JSObject **plugin_proto)
     1: {
     1:   *plugin_obj = nsnull;
     1:   *plugin_proto = nsnull;
     1: 
  6082:   JSAutoRequest ar(cx);
  6082: 
 56454:   // NB: We need an AutoEnterCompartment because we can be called from
 56454:   // nsObjectFrame when the plugin loads after the JS object for our content
 56454:   // node has been created.
 56454:   JSAutoEnterCompartment ac;
 56454:   if (!ac.enter(cx, obj)) {
 56454:     return NS_ERROR_UNEXPECTED;
 56454:   }
 56454: 
 29953:   if (plugin_inst) {
 29953:     plugin_inst->GetJSObject(cx, plugin_obj);
     1:     if (*plugin_obj) {
 89826:       *plugin_proto = ::JS_GetPrototype(*plugin_obj);
 29400:     }
 29400:   }
 29400: 
 29400:   return NS_OK;
     1: }
     1: 
 36690: NS_IMETHODIMP
 36690: nsHTMLPluginObjElementSH::NewResolve(nsIXPConnectWrappedNative *wrapper,
 48470:                                      JSContext *cx, JSObject *obj, jsid id,
 36690:                                      PRUint32 flags, JSObject **objp,
 79445:                                      bool *_retval)
 36690: {
 36690:   // Make sure the plugin instance is loaded and instantiated, if
 36690:   // possible.
 36690: 
 70007:   nsRefPtr<nsNPAPIPluginInstance> pi;
 36690:   nsresult rv = GetPluginInstanceIfSafe(wrapper, obj, getter_AddRefs(pi));
 36690:   NS_ENSURE_SUCCESS(rv, rv);
 36690: 
 36690:   return nsElementSH::NewResolve(wrapper, cx, obj, id, flags, objp,
 36690:                                  _retval);
 36690: }
     1:  
     1: // Plugin helper
     1: 
 20752: nsISupports*
     1: nsPluginSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                       nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsPluginElement* plugin = nsPluginElement::FromSupports(aNative);
 20752: 
 20752:   return plugin->GetItemAt(aIndex, aResult);
     1: }
     1: 
 21159: nsISupports*
     1: nsPluginSH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
 48169:                          nsWrapperCache **aCache, nsresult *aResult)
 21159: {
 21159:   nsPluginElement* plugin = nsPluginElement::FromSupports(aNative);
 21159: 
 21159:   return plugin->GetNamedItem(aName, aResult);
     1: }
     1: 
     1: 
     1: // PluginArray helper
     1: 
 20752: nsISupports*
     1: nsPluginArraySH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                            nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsPluginArray* array = nsPluginArray::FromSupports(aNative);
 20752: 
 20752:   return array->GetItemAt(aIndex, aResult);
     1: }
     1: 
 21159: nsISupports*
     1: nsPluginArraySH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
 48169:                               nsWrapperCache **aCache, nsresult *aResult)
 21159: {
 21159:   nsPluginArray* array = nsPluginArray::FromSupports(aNative);
 21159: 
 21159:   return array->GetNamedItem(aName, aResult);
     1: }
     1: 
     1: 
     1: // MimeTypeArray helper
     1: 
 20752: nsISupports*
     1: nsMimeTypeArraySH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                              nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsMimeTypeArray* array = nsMimeTypeArray::FromSupports(aNative);
 20752: 
 20752:   return array->GetItemAt(aIndex, aResult);
     1: }
     1: 
 21159: nsISupports*
     1: nsMimeTypeArraySH::GetNamedItem(nsISupports *aNative, const nsAString& aName,
 48169:                                 nsWrapperCache **aCache, nsresult *aResult)
 21159: {
 21159:   nsMimeTypeArray* array = nsMimeTypeArray::FromSupports(aNative);
 21159: 
 21159:   return array->GetNamedItem(aName, aResult);
     1: }
     1: 
     1: 
     1: // StringArray helper
     1: 
     1: NS_IMETHODIMP
     1: nsStringArraySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                              JSObject *obj, jsid id, jsval *vp,
 79445:                              bool *_retval)
 79445: {
 79445:   bool is_number = false;
     1:   PRInt32 n = GetArrayIndexFromId(cx, id, &is_number);
     1: 
     1:   if (!is_number) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   nsAutoString val;
     1: 
 30001:   nsresult rv = GetStringAt(GetNative(wrapper, obj), n, val);
     1:   NS_ENSURE_SUCCESS(rv, rv);
     1: 
     1:   JSAutoRequest ar(cx);
     1: 
 71034:   if (DOMStringIsNull(val)) {
 71034:     *vp = JSVAL_VOID;
 71034:   } else {
 69812:     nsStringBuffer* sharedBuffer = nsnull;
 69812:     *vp = XPCStringConvert::ReadableToJSVal(cx, val, &sharedBuffer);
 69812:     if (sharedBuffer) {
 69812:       val.ForgetSharedBuffer();
 69812:     }
 71034:   }
     1: 
     1:   return NS_SUCCESS_I_DID_SOMETHING;
     1: }
     1: 
     1: 
     1: // History helper
     1: 
     1: NS_IMETHODIMP
 56818: nsHistorySH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 56818:                        JSObject *globalObj, JSObject **parentObj)
 56818: {
 63196:   nsHistory *history = (nsHistory *)((nsIDOMHistory*)nativeObj);
 61735:   nsCOMPtr<nsPIDOMWindow> innerWindow;
 61735:   history->GetWindow(getter_AddRefs(innerWindow));
 61735:   if (!innerWindow) {
 61735:     NS_WARNING("refusing to create history object in the wrong scope");
 61735:     return NS_ERROR_FAILURE;
 61735:   }
 97123:   return SetParentToWindow(static_cast<nsGlobalWindow *>(innerWindow.get()),
 97123:                            parentObj);
 56818: }
 56818: 
 56818: NS_IMETHODIMP
     1: nsHistorySH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                          JSObject *obj, jsid id, jsval *vp, bool *_retval)
 79445: {
 79445:   bool is_number = false;
     1:   GetArrayIndexFromId(cx, id, &is_number);
     1: 
     1:   if (!is_number) {
     1:     return NS_OK;
     1:   }
     1: 
     1:   return nsStringArraySH::GetProperty(wrapper, cx, obj, id, vp, _retval);
     1: }
     1: 
     1: nsresult
     1: nsHistorySH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
     1:                          nsAString& aResult)
     1: {
     1:   if (aIndex < 0) {
     1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
     1:   }
     1: 
     1:   nsCOMPtr<nsIDOMHistory> history(do_QueryInterface(aNative));
     1: 
 71034:   nsresult rv = history->Item(aIndex, aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRInt32 length = 0;
 71034:     history->GetLength(&length);
 71034:     NS_ASSERTION(aIndex >= length, "Item should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
     1: }
     1: 
     1: 
     1: // MediaList helper
     1: 
     1: nsresult
     1: nsMediaListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
     1:                            nsAString& aResult)
     1: {
     1:   if (aIndex < 0) {
     1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
     1:   }
     1: 
     1:   nsCOMPtr<nsIDOMMediaList> media_list(do_QueryInterface(aNative));
     1: 
 71034:   nsresult rv = media_list->Item(PRUint32(aIndex), aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRUint32 length = 0;
 71034:     media_list->GetLength(&length);
 71034:     NS_ASSERTION(PRUint32(aIndex) >= length, "Item should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
     1: }
     1: 
     1: 
     1: // StyleSheetList helper
     1: 
 20752: nsISupports*
     1: nsStyleSheetListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                               nsWrapperCache **aCache, nsresult *rv)
 20752: {
 20752:   nsDOMStyleSheetList* list = nsDOMStyleSheetList::FromSupports(aNative);
 20752: 
 20752:   return list->GetItemAt(aIndex);
     1: }
     1: 
     1: 
     1: // CSSValueList helper
     1: 
 20752: nsISupports*
     1: nsCSSValueListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                             nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsDOMCSSValueList* list = nsDOMCSSValueList::FromSupports(aNative);
 20752: 
 20752:   return list->GetItemAt(aIndex);
     1: }
     1: 
     1: 
     1: // CSSStyleDeclaration helper
     1: 
 30385: NS_IMETHODIMP
 30385: nsCSSStyleDeclSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 30385:                             JSObject *globalObj, JSObject **parentObj)
 30385: {
 30385:   nsWrapperCache* cache = nsnull;
 30385:   CallQueryInterface(nativeObj, &cache);
 30385:   if (!cache) {
 30385:     return nsDOMClassInfo::PreCreate(nativeObj, cx, globalObj, parentObj);
 30385:   }
 30385: 
 30385:   nsICSSDeclaration *declaration = static_cast<nsICSSDeclaration*>(nativeObj);
 33481:   nsINode *native_parent = declaration->GetParentObject();
 30385:   if (!native_parent) {
 30385:     return NS_ERROR_FAILURE;
 30385:   }
 30385: 
 33481:   nsresult rv =
102303:     WrapNativeParent(cx, globalObj, native_parent, parentObj);
 30385:   NS_ENSURE_SUCCESS(rv, rv);
 30385: 
 30385:   return NS_SUCCESS_ALLOW_SLIM_WRAPPERS;
 30385: }
 30385: 
     1: nsresult
     1: nsCSSStyleDeclSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
     1:                               nsAString& aResult)
     1: {
     1:   if (aIndex < 0) {
     1:     return NS_ERROR_DOM_INDEX_SIZE_ERR;
     1:   }
     1: 
     1:   nsCOMPtr<nsIDOMCSSStyleDeclaration> style_decl(do_QueryInterface(aNative));
     1: 
 71034:   nsresult rv = style_decl->Item(PRUint32(aIndex), aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRUint32 length = 0;
 71034:     style_decl->GetLength(&length);
 71034:     NS_ASSERTION(PRUint32(aIndex) >= length, "Item should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
     1: }
     1: 
     1: 
     1: // CSSRuleList scriptable helper
     1: 
 20752: nsISupports*
     1: nsCSSRuleListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                            nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsICSSRuleList* list = static_cast<nsICSSRuleList*>(aNative);
 20752: #ifdef DEBUG
 20752:   {
 20752:     nsCOMPtr<nsICSSRuleList> list_qi = do_QueryInterface(aNative);
 20752: 
 20752:     // If this assertion fires the QI implementation for the object in
 20752:     // question doesn't use the nsICSSRuleList pointer as the nsISupports
 20752:     // pointer. That must be fixed, or we'll crash...
 67630:     NS_ABORT_IF_FALSE(list_qi == list, "Uh, fix QI!");
 20752:   }
 20752: #endif
 20752: 
 20752:   return list->GetItemAt(aIndex, aResult);
     1: }
     1: 
 12915: // ClientRectList scriptable helper
  2014: 
 20752: nsISupports*
 12915: nsClientRectListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                               nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsClientRectList* list = nsClientRectList::FromSupports(aNative);
 20752: 
 20752:   return list->GetItemAt(aIndex);
  2014: }
     1: 
 32894: // PaintRequestList scriptable helper
 32894: 
 32894: nsISupports*
 32894: nsPaintRequestListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                                 nsWrapperCache **aCache, nsresult *aResult)
 32894: {
 32894:   nsPaintRequestList* list = nsPaintRequestList::FromSupports(aNative);
 32894: 
 32894:   return list->GetItemAt(aIndex);
 32894: }
 32894: 
 68879: nsISupports*
 68879: nsDOMTouchListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 68879:                             nsWrapperCache **aCache, nsresult *aResult)
 68879: {
 68879:   nsDOMTouchList* list = static_cast<nsDOMTouchList*>(aNative);
 68879:   return list->GetItemAt(aIndex);
 68879: }
 68879: 
     1: #ifdef MOZ_XUL
     1: // TreeColumns helper
     1: 
 20752: nsISupports*
     1: nsTreeColumnsSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                            nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsTreeColumns* columns = nsTreeColumns::FromSupports(aNative);
 20752: 
 20752:   return columns->GetColumnAt(aIndex);
     1: }
     1: 
 21159: nsISupports*
     1: nsTreeColumnsSH::GetNamedItem(nsISupports *aNative,
     1:                               const nsAString& aName,
 48169:                               nsWrapperCache **aCache,
 21159:                               nsresult *aResult)
 21159: {
 21159:   nsTreeColumns* columns = nsTreeColumns::FromSupports(aNative);
 21159: 
 21159:   return columns->GetNamedColumn(aName);
     1: }
     1: #endif
     1: 
     1: 
 26323: // Storage2SH
 26323: 
 26323: // One reason we need a newResolve hook is that in order for
 26323: // enumeration of storage object keys to work the keys we're
 26323: // enumerating need to exist on the storage object for the JS engine
 26323: // to find them.
 26323: 
 26323: NS_IMETHODIMP
 26323: nsStorage2SH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 48470:                          JSObject *obj, jsid id, PRUint32 flags,
 79445:                          JSObject **objp, bool *_retval)
 26323: {
 62726:   if (ObjectIsNativeWrapper(cx, obj)) {
 62726:     return NS_OK;
 62726:   }
 62726: 
 26323:   JSObject *realObj;
 26323:   wrapper->GetJSObject(&realObj);
 26323: 
 62726:   JSAutoEnterCompartment ac;
 62726:   if (!ac.enter(cx, realObj)) {
 80486:     *_retval = false;
 62726:     return NS_ERROR_FAILURE;
 62726:   }
 62726: 
 26323:   // First check to see if the property is defined on our prototype,
 26323:   // after converting id to a string if it's an integer.
 26323: 
 48470:   JSString *jsstr = IdToString(cx, id);
 26323:   if (!jsstr) {
 26323:     return JS_FALSE;
 26323:   }
 26323: 
 89826:   JSObject *proto = ::JS_GetPrototype(realObj);
 26323:   JSBool hasProp;
 26323: 
 26323:   if (proto &&
 48470:       (::JS_HasPropertyById(cx, proto, id, &hasProp) &&
 26323:        hasProp)) {
 26323:     // We found the property we're resolving on the prototype,
 26323:     // nothing left to do here then.
 26323: 
 26323:     return NS_OK;
 26323:   }
 26323: 
 26323:   // We're resolving property that doesn't exist on the prototype,
 26323:   // check if the key exists in the storage object.
 26323: 
 28438:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
 26323: 
 59889:   nsDependentJSString depStr;
 59889:   NS_ENSURE_TRUE(depStr.init(cx, jsstr), NS_ERROR_UNEXPECTED);
 59889: 
 26323:   // GetItem() will return null if the caller can't access the session
 26323:   // storage item.
 26323:   nsAutoString data;
 59889:   nsresult rv = storage->GetItem(depStr, data);
 26323:   NS_ENSURE_SUCCESS(rv, rv);
 26323: 
 26323:   if (!DOMStringIsNull(data)) {
 48470:     if (!::JS_DefinePropertyById(cx, realObj, id, JSVAL_VOID, nsnull,
 47569:                                  nsnull, JSPROP_ENUMERATE)) {
 26323:       return NS_ERROR_FAILURE;
 26323:     }
 26323: 
 26323:     *objp = realObj;
 26323:   }
 26323: 
 26323:   return NS_OK;
 26323: }
 26323: 
 26323: NS_IMETHODIMP
 26323: nsStorage2SH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 79445:                           JSObject *obj, jsid id, jsval *vp, bool *_retval)
 26323: {
 28438:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
 26323:   NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
 26323: 
 98837:   JSString* key = IdToString(cx, id);
 98837:   NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
 98837: 
 98837:   nsDependentJSString keyStr;
 98837:   NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
 98837: 
 26323:   // For native wrappers, do not get random names on storage objects.
 26323:   if (ObjectIsNativeWrapper(cx, obj)) {
 26323:     return NS_ERROR_NOT_AVAILABLE;
 26323:   }
 26323: 
 98837:   nsAutoString val;
 98837:   nsresult rv = storage->GetItem(keyStr, val);
 26323:   NS_ENSURE_SUCCESS(rv, rv);
 26323: 
 26323:   JSAutoRequest ar(cx);
 26323: 
 26323:   if (DOMStringIsNull(val)) {
 94633:     // No such key.
 94633:     *vp = JSVAL_VOID;
 94633:   } else {
 26323:     JSString* str =
 94633:       JS_NewUCStringCopyN(cx, static_cast<const jschar *>(val.get()),
 26323:                           val.Length());
 26323:     NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
 26323: 
 26323:     *vp = STRING_TO_JSVAL(str);
 26323:   }
 26323: 
 26323:   return NS_SUCCESS_I_DID_SOMETHING;
 26323: }
 26323: 
 26323: NS_IMETHODIMP
 26323: nsStorage2SH::SetProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                           JSContext *cx, JSObject *obj, jsid id,
 79445:                           jsval *vp, bool *_retval)
 26323: {
 28438:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
 26323:   NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
 26323: 
 48470:   JSString *key = IdToString(cx, id);
 26323:   NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
 26323: 
 59889:   nsDependentJSString keyStr;
 59889:   NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
 59889: 
 26323:   JSString *value = ::JS_ValueToString(cx, *vp);
 26323:   NS_ENSURE_TRUE(value, NS_ERROR_UNEXPECTED);
 26323: 
 59889:   nsDependentJSString valueStr;
 59889:   NS_ENSURE_TRUE(valueStr.init(cx, value), NS_ERROR_UNEXPECTED);
 59889: 
 59889:   nsresult rv = storage->SetItem(keyStr, valueStr);
 26323:   if (NS_SUCCEEDED(rv)) {
 26323:     rv = NS_SUCCESS_I_DID_SOMETHING;
 26323:   }
 26323: 
 26323:   return rv;
 26323: }
 26323: 
 26323: NS_IMETHODIMP
 26323: nsStorage2SH::DelProperty(nsIXPConnectWrappedNative *wrapper,
 48470:                           JSContext *cx, JSObject *obj, jsid id,
 79445:                           jsval *vp, bool *_retval)
 26323: {
 28438:   nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
 26323:   NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
 26323: 
 48470:   JSString *key = IdToString(cx, id);
 26323:   NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
 26323: 
 59889:   nsDependentJSString keyStr;
 59889:   NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
 59889: 
 59889:   nsresult rv = storage->RemoveItem(keyStr);
 26323:   if (NS_SUCCEEDED(rv)) {
 26323:     rv = NS_SUCCESS_I_DID_SOMETHING;
 26323:   }
 26323: 
 26323:   return rv;
 26323: }
 26323: 
 26323: 
 26323: NS_IMETHODIMP
 26323: nsStorage2SH::NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 26323:                            JSObject *obj, PRUint32 enum_op, jsval *statep,
 79445:                            jsid *idp, bool *_retval)
 26323: {
 55930:   if (enum_op == JSENUMERATE_INIT || enum_op == JSENUMERATE_INIT_ALL) {
 55930:     nsCOMPtr<nsPIDOMStorage> storage(do_QueryWrappedNative(wrapper));
 55930: 
 55930:     // XXXndeakin need to free the keys afterwards
 55930:     nsTArray<nsString> *keys = storage->GetKeys();
 55930:     NS_ENSURE_TRUE(keys, NS_ERROR_OUT_OF_MEMORY);
 55930: 
 55930:     *statep = PRIVATE_TO_JSVAL(keys);
 55930: 
 55930:     if (idp) {
 55930:       *idp = INT_TO_JSID(keys->Length());
 55930:     }
 55930:     return NS_OK;
 55930:   }
 55930: 
 26323:   nsTArray<nsString> *keys =
 26323:     (nsTArray<nsString> *)JSVAL_TO_PRIVATE(*statep);
 26323: 
 55930:   if (enum_op == JSENUMERATE_NEXT && keys->Length() != 0) {
 26323:     nsString& key = keys->ElementAt(0);
 26323:     JSString *str =
 26323:       JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>
 26323:                                               (key.get()),
 26323:                           key.Length());
 26323:     NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
 26323: 
 26323:     JS_ValueToId(cx, STRING_TO_JSVAL(str), idp);
 26323: 
 26323:     keys->RemoveElementAt(0);
 26323: 
 55930:     return NS_OK;
 55930:   }
 55930: 
 55930:   // destroy the keys array if we have no keys or if we're done
 55930:   NS_ABORT_IF_FALSE(enum_op == JSENUMERATE_DESTROY ||
 55930:                     (enum_op == JSENUMERATE_NEXT && keys->Length() == 0),
 55930:                     "Bad call from the JS engine");
 26323:   delete keys;
 26323: 
 26323:   *statep = JSVAL_NULL;
 26323: 
 26323:   return NS_OK;
 26323: }
 26323: 
     1: // nsIDOMEventListener::HandleEvent() 'this' converter helper
     1: 
     1: NS_INTERFACE_MAP_BEGIN(nsEventListenerThisTranslator)
     1:   NS_INTERFACE_MAP_ENTRY(nsIXPCFunctionThisTranslator)
     1:   NS_INTERFACE_MAP_ENTRY(nsISupports)
     1: NS_INTERFACE_MAP_END
     1: 
     1: 
     1: NS_IMPL_ADDREF(nsEventListenerThisTranslator)
     1: NS_IMPL_RELEASE(nsEventListenerThisTranslator)
     1: 
     1: 
     1: NS_IMETHODIMP
     1: nsEventListenerThisTranslator::TranslateThis(nsISupports *aInitialThis,
     1:                                              nsIInterfaceInfo *aInterfaceInfo,
     1:                                              PRUint16 aMethodIndex,
 79445:                                              bool *aHideFirstParamFromJS,
     1:                                              nsIID * *aIIDOfResult,
     1:                                              nsISupports **_retval)
     1: {
 80486:   *aHideFirstParamFromJS = false;
     1:   *aIIDOfResult = nsnull;
     1: 
     1:   nsCOMPtr<nsIDOMEvent> event(do_QueryInterface(aInitialThis));
     1:   NS_ENSURE_TRUE(event, NS_ERROR_UNEXPECTED);
     1: 
     1:   nsCOMPtr<nsIDOMEventTarget> target;
     1:   event->GetCurrentTarget(getter_AddRefs(target));
     1: 
 40043:   *_retval = target.forget().get();
     1: 
     1:   return NS_OK;
     1: }
     1: 
 94465: NS_INTERFACE_MAP_BEGIN(nsMutationCallbackThisTranslator)
 94465:   NS_INTERFACE_MAP_ENTRY(nsIXPCFunctionThisTranslator)
 94465:   NS_INTERFACE_MAP_ENTRY(nsISupports)
 94465: NS_INTERFACE_MAP_END
 94465: 
 94465: NS_IMPL_ADDREF(nsMutationCallbackThisTranslator)
 94465: NS_IMPL_RELEASE(nsMutationCallbackThisTranslator)
 94465: 
 94465: NS_IMETHODIMP
 94465: nsMutationCallbackThisTranslator::TranslateThis(nsISupports *aInitialThis,
 94465:                                                 nsIInterfaceInfo *aInterfaceInfo,
 94465:                                                 PRUint16 aMethodIndex,
 94465:                                                 bool *aHideFirstParamFromJS,
 94465:                                                 nsIID * *aIIDOfResult,
 94465:                                                 nsISupports **_retval)
 94465: {
 94465:   *aHideFirstParamFromJS = false;
 94465:   *aIIDOfResult = nsnull;
 94465:   NS_IF_ADDREF(*_retval = nsDOMMutationObserver::CurrentObserver());
 94465:   return NS_OK;
 94465: }
 94465: 
     1: NS_IMETHODIMP
 60315: nsDOMConstructorSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 60315:                               JSObject *globalObj, JSObject **parentObj)
 60315: {
 60315:   nsDOMConstructor *wrapped = static_cast<nsDOMConstructor *>(nativeObj);
 60315: 
 60315: #ifdef DEBUG
 60315:   {
 60315:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
 60315:       do_QueryInterface(nativeObj);
 60315:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
 60315:   }
 60315: #endif
 60315: 
 60315:   return wrapped->PreCreate(cx, globalObj, parentObj);
 60315: }
 60315: 
 60315: NS_IMETHODIMP
 80512: nsDOMConstructorSH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 80512:                                JSObject *obj, jsid id, PRUint32 flags,
 80512:                                JSObject **objp, bool *_retval)
 80512: {
 80512:   // For regular DOM constructors, we have our interface constants defined on
 80512:   // us by nsWindowSH::GlobalResolve. However, XrayWrappers can't see these
 80512:   // interface constants (as they look like expando properties) so we have to
 80512:   // specially resolve those constants here, but only for Xray wrappers.
 80512:   if (!ObjectIsNativeWrapper(cx, obj)) {
 80512:     return NS_OK;
 80512:   }
 80512: 
 80512:   JSObject *nativePropsObj = xpc::XrayUtils::GetNativePropertiesObject(cx, obj);
 80512:   nsDOMConstructor *wrapped =
 80512:     static_cast<nsDOMConstructor *>(wrapper->Native());
 80512:   nsresult rv = wrapped->ResolveInterfaceConstants(cx, nativePropsObj);
 80512:   NS_ENSURE_SUCCESS(rv, rv);
 80512: 
 80512:   // Now re-lookup the ID to see if we should report back that we resolved the
 80512:   // looked-for constant. Note that we don't have to worry about infinitely
 80512:   // recurring back here because the Xray wrapper's holder object doesn't call
 80512:   // NewResolve hooks.
 80512:   JSBool found;
 80512:   if (!JS_HasPropertyById(cx, nativePropsObj, id, &found)) {
 94737:     *_retval = false;
 80512:     return NS_OK;
 80512:   }
 80512: 
 80512:   if (found) {
 80512:     *objp = obj;
 80512:   }
 80512:   return NS_OK;
 80512: }
 80512: 
 80512: NS_IMETHODIMP
  1312: nsDOMConstructorSH::Call(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
  1312:                          JSObject *obj, PRUint32 argc, jsval *argv, jsval *vp,
 79445:                          bool *_retval)
  1312: {
  1312:   nsDOMConstructor *wrapped =
  3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
  1312: 
  1312: #ifdef DEBUG
  1312:   {
  7842:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
  7842:       do_QueryWrappedNative(wrapper);
  1312:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
  1312:   }
  1312: #endif
  1312: 
  1312:   return wrapped->Construct(wrapper, cx, obj, argc, argv, vp, _retval);
  1312: }
  1312: 
  1312: NS_IMETHODIMP
     1: nsDOMConstructorSH::Construct(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
     1:                               JSObject *obj, PRUint32 argc, jsval *argv,
 79445:                               jsval *vp, bool *_retval)
     1: {
     1:   nsDOMConstructor *wrapped =
  3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
     1: 
     1: #ifdef DEBUG
     1:   {
  7843:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
  7842:       do_QueryWrappedNative(wrapper);
     1:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
     1:   }
     1: #endif
     1: 
     1:   return wrapped->Construct(wrapper, cx, obj, argc, argv, vp, _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsDOMConstructorSH::HasInstance(nsIXPConnectWrappedNative *wrapper,
 48470:                                 JSContext *cx, JSObject *obj, const jsval &val,
 79445:                                 bool *bp, bool *_retval)
     1: {
     1:   nsDOMConstructor *wrapped =
  3233:     static_cast<nsDOMConstructor *>(wrapper->Native());
     1: 
     1: #ifdef DEBUG
     1:   {
  7842:     nsCOMPtr<nsIDOMDOMConstructor> is_constructor =
  7842:       do_QueryWrappedNative(wrapper);
     1:     NS_ASSERTION(is_constructor, "How did we not get a constructor?");
     1:   }
     1: #endif
     1: 
     1:   return wrapped->HasInstance(wrapper, cx, obj, val, bp, _retval);
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsNonDOMObjectSH::GetFlags(PRUint32 *aFlags)
     1: {
     1:   // This is NOT a DOM Object.  Use this helper class for cases when you need
     1:   // to do something like implement nsISecurityCheckedComponent in a meaningful
     1:   // way.
     1:   *aFlags = nsIClassInfo::MAIN_THREAD_ONLY;
     1:   return NS_OK;
     1: }
     1: 
     1: NS_IMETHODIMP
     1: nsAttributeSH::GetFlags(PRUint32 *aFlags)
     1: {
     1:   // Just like nsNodeSH, but without CONTENT_NODE
     1:   *aFlags = DOMCLASSINFO_STANDARD_FLAGS;
     1: 
     1:   return NS_OK;
     1: }
  1938: 
  1938: // nsOfflineResourceListSH
  1938: nsresult
  1938: nsOfflineResourceListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
  1938:                                      nsAString& aResult)
  1938: {
  1938:   nsCOMPtr<nsIDOMOfflineResourceList> list(do_QueryInterface(aNative));
  1938:   NS_ENSURE_TRUE(list, NS_ERROR_UNEXPECTED);
  1938: 
 71034:   nsresult rv = list->MozItem(aIndex, aResult);
 71034: #ifdef DEBUG
 71034:   if (DOMStringIsNull(aResult)) {
 71034:     PRUint32 length = 0;
 71034:     list->GetMozLength(&length);
 71034:     NS_ASSERTION(PRUint32(aIndex) >= length, "MozItem should only return null for out-of-bounds access");
 71034:   }
 71034: #endif
 71034:   return rv;
  1938: }
  3254: 
  3940: // nsFileListSH
 20752: nsISupports*
  3940: nsFileListSH::GetItemAt(nsISupports *aNative, PRUint32 aIndex,
 48168:                         nsWrapperCache **aCache, nsresult *aResult)
 20752: {
 20752:   nsDOMFileList* list = nsDOMFileList::FromSupports(aNative);
 20752: 
 20752:   return list->GetItemAt(aIndex);
 20752: }
 67630: 
 67630: // Template for SVGXXXList helpers
 67630: template<class ListInterfaceType, class ListType> nsISupports*
 67630: nsSVGListSH<ListInterfaceType, ListType>::GetItemAt(nsISupports *aNative,
 67630:                                                     PRUint32 aIndex,
 67630:                                                     nsWrapperCache **aCache,
 67630:                                                     nsresult *aResult)
 67630: {
 67630:   ListType* list = static_cast<ListType*>(static_cast<ListInterfaceType*>(aNative));
 67630: #ifdef DEBUG
 67630:   {
 67630:     nsCOMPtr<ListInterfaceType> list_qi = do_QueryInterface(aNative);
 67630: 
 67630:     // If this assertion fires the QI implementation for the object in
 67630:     // question doesn't use the nsIDOMSVGXXXList pointer as the nsISupports
 67630:     // pointer. That must be fixed, or we'll crash...
 67630:     NS_ABORT_IF_FALSE(list_qi == list, "Uh, fix QI!");
 67630:   }
 67630: #endif
 67630: 
 92129:   return list->GetItemAt(aIndex);
 67630: }
 89117: 
 89117: 
 89117: // SVGStringList helper
 89117: 
 89117: nsresult
 89117: nsSVGStringListSH::GetStringAt(nsISupports *aNative, PRInt32 aIndex,
 89117:                                nsAString& aResult)
 89117: {
 89117:   if (aIndex < 0) {
 89117:     SetDOMStringToNull(aResult);
 89117:     return NS_OK;
 89117:   }
 89117: 
 89117:   DOMSVGStringList* list = static_cast<DOMSVGStringList*>(
 89117:                              static_cast<nsIDOMSVGStringList*>(aNative));
 89117: #ifdef DEBUG
 89117:   {
 89117:     nsCOMPtr<nsIDOMSVGStringList> list_qi = do_QueryInterface(aNative);
 89117:     
 89117:     // If this assertion fires the QI implementation for the object in
 89117:     // question doesn't use the nsIDOMDOMSVGStringList pointer as the
 89117:     // nsISupports pointer. That must be fixed, or we'll crash...
 89117:     NS_ABORT_IF_FALSE(list_qi == list, "Uh, fix QI!");
 89117:   }
 89117: #endif
 89117: 
 89117:   nsresult rv = list->GetItem(aIndex, aResult);
 89117: #ifdef DEBUG
 89117:   if (DOMStringIsNull(aResult)) {
 89117:     PRUint32 length = 0;
 89117:     list->GetLength(&length);
 89117:     NS_ASSERTION(PRUint32(aIndex) >= length, "Item should only return null for out-of-bounds access");
 89117:   }
 89117: #endif
 89117:   if (rv == NS_ERROR_DOM_INDEX_SIZE_ERR) {
 89117:     SetDOMStringToNull(aResult);
 89117:     rv = NS_OK;
 89117:   }
 89117:   return rv;
 89117: }
 89117: 
 94084: NS_IMETHODIMP
 94084: WebGLExtensionSH::AddProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
 94084:                               JSObject *obj, jsid id, jsval *vp, bool *_retval)
 94084: {
 94084:   WebGLExtensionSH::PreserveWrapper(GetNative(wrapper, obj));
 94084: 
 94084:   return NS_OK;
 94084: }
 94084: 
 94084: void
 94084: WebGLExtensionSH::PreserveWrapper(nsISupports *aNative)
 94084: {
 94084:   WebGLExtension* ext = static_cast<WebGLExtension*>(aNative);
 94084:   nsContentUtils::PreserveWrapper(aNative, ext);
 94084: }
 94084: 
 94084: nsresult
 94084: WebGLExtensionSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
 94084:                             JSObject *globalObj, JSObject **parentObj)
 94084: {
 94084:   *parentObj = globalObj;
 94084: 
 94085:   WebGLExtension *ext = static_cast<WebGLExtension*>(nativeObj);
 94085:   WebGLContext *webgl = ext->Context();
 97696:   nsINode *node = webgl->GetParentObject();
 94084: 
102303:   return WrapNativeParent(cx, globalObj, node, parentObj);
 94084: }
 97696: 
102143: nsresult
102143: nsNewDOMBindingNoWrapperCacheSH::PreCreate(nsISupports *nativeObj,
102143:                                            JSContext *cx,
102143:                                            JSObject *globalObj,
102143:                                            JSObject **parentObj)
102143: {
102143:   // We don't allow this
102143:   return NS_ERROR_UNEXPECTED;
102143: }
102143: 
102303: template<class T, class BaseType>
102303: NS_IMETHODIMP
102303: nsNewDOMBindingSH<T, BaseType>::PreCreate(nsISupports *nativeObj,
102303:                                           JSContext *cx,
102303:                                           JSObject *globalObj,
102303:                                           JSObject **parentObj)
 97696: {
 97696:   *parentObj = globalObj;
 97696: 
102303:   T *native = static_cast<T*>(static_cast<BaseType*>(nativeObj));
102303:   if (!native->GetParentObject()) {
102303:     return NS_OK;
102303:   }
102303:   return WrapNativeParent(cx, globalObj, native->GetParentObject(), parentObj);
102303: }
