    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsError_h__
    1: #define nsError_h__
    1: 
    1: #ifndef nscore_h___
    1: #include "nscore.h"  /* needed for nsresult */
    1: #endif
    1: 
    1: /*
    1:  * To add error code to your module, you need to do the following:
    1:  *
    1:  * 1) Add a module offset code.  Add yours to the bottom of the list
    1:  *    right below this comment, adding 1.
    1:  *
    1:  * 2) In your module, define a header file which uses one of the
    1:  *    NE_ERROR_GENERATExxxxxx macros.  Some examples below:
    1:  *
    1:  *    #define NS_ERROR_MYMODULE_MYERROR1 NS_ERROR_GENERATE(NS_ERROR_SEVERITY_ERROR,NS_ERROR_MODULE_MYMODULE,1)
    1:  *    #define NS_ERROR_MYMODULE_MYERROR2 NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_MYMODULE,2)
    1:  *    #define NS_ERROR_MYMODULE_MYERROR3 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_MYMODULE,3)
    1:  *
    1:  */
    1: 
    1: 
    1: /**
    1:  * @name Standard Module Offset Code. Each Module should identify a unique number
    1:  *       and then all errors associated with that module become offsets from the
    1:  *       base associated with that module id. There are 16 bits of code bits for
    1:  *       each module.
    1:  */
    1: 
    1: #define NS_ERROR_MODULE_XPCOM      1
    1: #define NS_ERROR_MODULE_BASE       2
    1: #define NS_ERROR_MODULE_GFX        3
    1: #define NS_ERROR_MODULE_WIDGET     4
    1: #define NS_ERROR_MODULE_CALENDAR   5
    1: #define NS_ERROR_MODULE_NETWORK    6
    1: #define NS_ERROR_MODULE_PLUGINS    7
    1: #define NS_ERROR_MODULE_LAYOUT     8
    1: #define NS_ERROR_MODULE_HTMLPARSER 9
    1: #define NS_ERROR_MODULE_RDF        10
    1: #define NS_ERROR_MODULE_UCONV      11
    1: #define NS_ERROR_MODULE_REG        12
    1: #define NS_ERROR_MODULE_FILES      13
    1: #define NS_ERROR_MODULE_DOM        14
    1: #define NS_ERROR_MODULE_IMGLIB     15
    1: #define NS_ERROR_MODULE_MAILNEWS   16
    1: #define NS_ERROR_MODULE_EDITOR     17
    1: #define NS_ERROR_MODULE_XPCONNECT  18
    1: #define NS_ERROR_MODULE_PROFILE    19
    1: #define NS_ERROR_MODULE_LDAP       20
    1: #define NS_ERROR_MODULE_SECURITY   21
    1: #define NS_ERROR_MODULE_DOM_XPATH  22
    1: #define NS_ERROR_MODULE_DOM_RANGE  23
    1: #define NS_ERROR_MODULE_URILOADER  24
    1: #define NS_ERROR_MODULE_CONTENT    25
    1: #define NS_ERROR_MODULE_PYXPCOM    26
    1: #define NS_ERROR_MODULE_XSLT       27
    1: #define NS_ERROR_MODULE_IPC        28
    1: #define NS_ERROR_MODULE_SVG        29
    1: #define NS_ERROR_MODULE_STORAGE    30
    1: #define NS_ERROR_MODULE_SCHEMA     31
 3940: #define NS_ERROR_MODULE_DOM_FILE   32
    1: 
    1: /* NS_ERROR_MODULE_GENERAL should be used by modules that do not
    1:  * care if return code values overlap. Callers of methods that
    1:  * return such codes should be aware that they are not
    1:  * globally unique. Implementors should be careful about blindly
    1:  * returning codes from other modules that might also use
    1:  * the generic base.
    1:  */
    1: #define NS_ERROR_MODULE_GENERAL    51
    1: 
    1: /**
    1:  * @name Standard Error Handling Macros
    1:  * @return 0 or 1
    1:  */
    1: 
14818: #if defined(NS_STATIC_CHECKING) && defined(__cplusplus)
14818: inline int NS_FAILED(nsresult _nsresult) {
14818:   return   _nsresult & 0x80000000;
14818: }
14818: 
14818: inline int NS_SUCCEEDED(nsresult _nsresult) {
14818:   return !(_nsresult & 0x80000000);
14818: }
14818: #else
    1: #define NS_FAILED(_nsresult)    (NS_UNLIKELY((_nsresult) & 0x80000000))
    1: #define NS_SUCCEEDED(_nsresult) (NS_LIKELY(!((_nsresult) & 0x80000000)))
14818: #endif
    1: 
    1: /**
    1:  * @name Severity Code.  This flag identifies the level of warning
    1:  */
    1: 
    1: #define NS_ERROR_SEVERITY_SUCCESS       0
    1: #define NS_ERROR_SEVERITY_ERROR         1
    1: 
    1: /**
    1:  * @name Mozilla Code.  This flag separates consumers of mozilla code
    1:  *       from the native platform
    1:  */
    1: 
    1: #define NS_ERROR_MODULE_BASE_OFFSET 0x45
    1: 
    1: /**
    1:  * @name Standard Error Generating Macros
    1:  */
    1: 
    1: #define NS_ERROR_GENERATE(sev,module,code) \
    1:     ((nsresult) (((PRUint32)(sev)                      <<31) | ((PRUint32)(module+NS_ERROR_MODULE_BASE_OFFSET)<<16) | ((PRUint32)(code))))
    1: 
    1: #define NS_ERROR_GENERATE_SUCCESS(module,code) \
    1:     ((nsresult) (((PRUint32)(NS_ERROR_SEVERITY_SUCCESS)<<31) | ((PRUint32)(module+NS_ERROR_MODULE_BASE_OFFSET)<<16) | ((PRUint32)(code))))
    1: 
    1: #define NS_ERROR_GENERATE_FAILURE(module,code) \
    1:     ((nsresult) (((PRUint32)(NS_ERROR_SEVERITY_ERROR)  <<31) | ((PRUint32)(module+NS_ERROR_MODULE_BASE_OFFSET)<<16) | ((PRUint32)(code))))
    1: 
    1: /**
    1:  * @name Standard Macros for retrieving error bits
    1:  */
    1: 
    1: #define NS_ERROR_GET_CODE(err)     ((err) & 0xffff)
    1: #define NS_ERROR_GET_MODULE(err)   (((((err) >> 16) - NS_ERROR_MODULE_BASE_OFFSET) & 0x1fff))
    1: #define NS_ERROR_GET_SEVERITY(err) (((err) >> 31) & 0x1)
    1: 
    1: /**
    1:  * @name Standard return values
    1:  */
    1: 
    1: /*@{*/
    1: 
    1: /* Standard "it worked" return value */
    1: #define NS_OK                              0
    1: 
    1: #define NS_ERROR_BASE                      ((nsresult) 0xC1F30000)
    1: 
    1: /* Returned when an instance is not initialized */
    1: #define NS_ERROR_NOT_INITIALIZED           (NS_ERROR_BASE + 1)
    1: 
    1: /* Returned when an instance is already initialized */
    1: #define NS_ERROR_ALREADY_INITIALIZED       (NS_ERROR_BASE + 2)
    1: 
    1: /* Returned by a not implemented function */
    1: #define NS_ERROR_NOT_IMPLEMENTED           ((nsresult) 0x80004001L)
    1: 
    1: /* Returned when a given interface is not supported. */
    1: #define NS_NOINTERFACE                     ((nsresult) 0x80004002L)
    1: #define NS_ERROR_NO_INTERFACE              NS_NOINTERFACE
    1: 
    1: #define NS_ERROR_INVALID_POINTER           ((nsresult) 0x80004003L)
    1: #define NS_ERROR_NULL_POINTER              NS_ERROR_INVALID_POINTER
    1: 
    1: /* Returned when a function aborts */
    1: #define NS_ERROR_ABORT                     ((nsresult) 0x80004004L)
    1: 
    1: /* Returned when a function fails */
    1: #define NS_ERROR_FAILURE                   ((nsresult) 0x80004005L)
    1: 
    1: /* Returned when an unexpected error occurs */
    1: #define NS_ERROR_UNEXPECTED                ((nsresult) 0x8000ffffL)
    1: 
    1: /* Returned when a memory allocation fails */
    1: #define NS_ERROR_OUT_OF_MEMORY             ((nsresult) 0x8007000eL)
    1: 
    1: /* Returned when an illegal value is passed */
    1: #define NS_ERROR_ILLEGAL_VALUE             ((nsresult) 0x80070057L)
    1: #define NS_ERROR_INVALID_ARG               NS_ERROR_ILLEGAL_VALUE
    1: 
    1: /* Returned when a class doesn't allow aggregation */
    1: #define NS_ERROR_NO_AGGREGATION            ((nsresult) 0x80040110L)
    1: 
    1: /* Returned when an operation can't complete due to an unavailable resource */
    1: #define NS_ERROR_NOT_AVAILABLE             ((nsresult) 0x80040111L)
    1: 
    1: /* Returned when a class is not registered */
    1: #define NS_ERROR_FACTORY_NOT_REGISTERED    ((nsresult) 0x80040154L)
    1: 
    1: /* Returned when a class cannot be registered, but may be tried again later */
    1: #define NS_ERROR_FACTORY_REGISTER_AGAIN    ((nsresult) 0x80040155L)
    1: 
    1: /* Returned when a dynamically loaded factory couldn't be found */
    1: #define NS_ERROR_FACTORY_NOT_LOADED        ((nsresult) 0x800401f8L)
    1: 
    1: /* Returned when a factory doesn't support signatures */
    1: #define NS_ERROR_FACTORY_NO_SIGNATURE_SUPPORT \
    1:                                            (NS_ERROR_BASE + 0x101)
    1: 
    1: /* Returned when a factory already is registered */
    1: #define NS_ERROR_FACTORY_EXISTS            (NS_ERROR_BASE + 0x100)
    1: 
    1: 
    1: /* For COM compatibility reasons, we want to use exact error code numbers
    1:    for NS_ERROR_PROXY_INVALID_IN_PARAMETER and NS_ERROR_PROXY_INVALID_OUT_PARAMETER.
    1:    The first matches:
    1: 
    1:      #define RPC_E_INVALID_PARAMETER          _HRESULT_TYPEDEF_(0x80010010L)
    1: 
    1:    Errors returning this mean that the xpcom proxy code could not create a proxy for
    1:    one of the in paramaters.
    1: 
    1:    Because of this, we are ignoring the convention if using a base and offset for
    1:    error numbers.
    1: 
    1: */
    1: 
    1: /* Returned when a proxy could not be create a proxy for one of the IN parameters
26127:    This is returned only when the "real" method has NOT been invoked.
    1: */
    1: 
    1: #define NS_ERROR_PROXY_INVALID_IN_PARAMETER        ((nsresult) 0x80010010L)
    1: 
    1: /* Returned when a proxy could not be create a proxy for one of the OUT parameters
26127:    This is returned only when the "real" method has ALREADY been invoked.
    1: */
    1: 
    1: #define NS_ERROR_PROXY_INVALID_OUT_PARAMETER       ((nsresult) 0x80010011L)
    1: 
    1: 
    1: /*@}*/
    1: 
    1:  /* I/O Errors */
    1: 
    1:  /*  Stream closed */
    1: #define NS_BASE_STREAM_CLOSED         NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 2)
    1:  /*  Error from the operating system */
    1: #define NS_BASE_STREAM_OSERROR        NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 3)
    1:  /*  Illegal arguments */
    1: #define NS_BASE_STREAM_ILLEGAL_ARGS   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 4)
    1:  /*  For unichar streams */
    1: #define NS_BASE_STREAM_NO_CONVERTER   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 5)
    1:  /*  For unichar streams */
    1: #define NS_BASE_STREAM_BAD_CONVERSION NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 6)
    1: 
    1: #define NS_BASE_STREAM_WOULD_BLOCK    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_BASE, 7)
    1: 
    1: 
    1: #define NS_ERROR_FILE_UNRECOGNIZED_PATH         NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 1)
    1: #define NS_ERROR_FILE_UNRESOLVABLE_SYMLINK      NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 2)
    1: #define NS_ERROR_FILE_EXECUTION_FAILED          NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 3)
    1: #define NS_ERROR_FILE_UNKNOWN_TYPE              NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 4)
    1: #define NS_ERROR_FILE_DESTINATION_NOT_DIR       NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 5)
    1: #define NS_ERROR_FILE_TARGET_DOES_NOT_EXIST     NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 6)
    1: #define NS_ERROR_FILE_COPY_OR_MOVE_FAILED       NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 7)
    1: #define NS_ERROR_FILE_ALREADY_EXISTS            NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 8)
    1: #define NS_ERROR_FILE_INVALID_PATH              NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 9)
    1: #define NS_ERROR_FILE_DISK_FULL                 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 10)
    1: #define NS_ERROR_FILE_CORRUPTED                 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 11)
    1: #define NS_ERROR_FILE_NOT_DIRECTORY             NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 12)
    1: #define NS_ERROR_FILE_IS_DIRECTORY              NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 13)
    1: #define NS_ERROR_FILE_IS_LOCKED                 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 14)
    1: #define NS_ERROR_FILE_TOO_BIG                   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 15)
    1: #define NS_ERROR_FILE_NO_DEVICE_SPACE           NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 16)
    1: #define NS_ERROR_FILE_NAME_TOO_LONG             NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 17)
    1: #define NS_ERROR_FILE_NOT_FOUND                 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 18)
    1: #define NS_ERROR_FILE_READ_ONLY                 NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 19)
    1: #define NS_ERROR_FILE_DIR_NOT_EMPTY             NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 20)
    1: #define NS_ERROR_FILE_ACCESS_DENIED             NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_FILES, 21)
    1: 
    1: #define NS_SUCCESS_FILE_DIRECTORY_EMPTY         NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_FILES, 1)
    1: 
    1:  /* Result codes used by nsIDirectoryServiceProvider2 */
    1: 
    1: #define NS_SUCCESS_AGGREGATE_RESULT             NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_FILES, 2)
    1: 
    1:  /* Result codes used by nsIVariant */
    1: 
    1: #define NS_ERROR_CANNOT_CONVERT_DATA            NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_XPCOM,  1)
    1: #define NS_ERROR_OBJECT_IS_IMMUTABLE            NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_XPCOM,  2)
    1: #define NS_ERROR_LOSS_OF_SIGNIFICANT_DATA       NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_XPCOM,  3)
    1: 
    1: #define NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA   NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_XPCOM,  1)
    1: 
    1: /**
    1:  * Various operations are not permitted during XPCOM shutdown and will fail
    1:  * with this exception.
    1:  */
    1: #define NS_ERROR_ILLEGAL_DURING_SHUTDOWN        NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_XPCOM, 30)
    1: 
    1:  /*
    1:   * This will return the nsresult corresponding to the most recent NSPR failure
    1:   * returned by PR_GetError.
    1:   *
    1:   ***********************************************************************
    1:   *      Do not depend on this function. It will be going away!
    1:   ***********************************************************************
    1:   */
    1: extern NS_COM nsresult
    1: NS_ErrorAccordingToNSPR();
    1: 
    1: 
    1: #ifdef _MSC_VER
    1: #pragma warning(disable: 4251) /* 'nsCOMPtr<class nsIInputStream>' needs to have dll-interface to be used by clients of class 'nsInputStream' */
    1: #pragma warning(disable: 4275) /* non dll-interface class 'nsISupports' used as base for dll-interface class 'nsIRDFNode' */
    1: #endif
    1: 
36449: #ifdef XP_WIN
36449: extern NS_COM PRBool sXPCOMHasLoadedNewDLLs;
36449: NS_EXPORT void NS_SetHasLoadedNewDLLs();
    1: #endif
36449: 
36449: #endif
