36268: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
36268: /* vim: set sw=2 ts=8 et tw=80 ft=cpp : */
36268: 
36268: /* ***** BEGIN LICENSE BLOCK *****
36268:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
36268:  *
36268:  * The contents of this file are subject to the Mozilla Public License Version
36268:  * 1.1 (the "License"); you may not use this file except in compliance with
36268:  * the License. You may obtain a copy of the License at
36268:  * http://www.mozilla.org/MPL/
36268:  *
36268:  * Software distributed under the License is distributed on an "AS IS" basis,
36268:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
36268:  * for the specific language governing rights and limitations under the
36268:  * License.
36268:  *
36268:  * The Original Code is mozilla.org code.
36268:  *
36268:  * The Initial Developer of the Original Code is
36268:  *  The Mozilla Foundation
36268:  * Portions created by the Initial Developer are Copyright (C) 2009
36268:  * the Initial Developer. All Rights Reserved.
36268:  *
36268:  * Contributor(s):
36268:  *   Jason Duell <jduell.mcbugs@gmail.com>
49375:  *   Honza Bambas <honzab@firemni.cz>
36268:  *
36268:  * Alternatively, the contents of this file may be used under the terms of
36268:  * either the GNU General Public License Version 2 or later (the "GPL"), or
36268:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
36268:  * in which case the provisions of the GPL or the LGPL are applicable instead
36268:  * of those above. If you wish to allow use of your version of this file only
36268:  * under the terms of either the GPL or the LGPL, and not to allow others to
36268:  * use your version of this file under the terms of the MPL, indicate your
36268:  * decision by deleting the provisions above and replace them with the notice
36268:  * and other provisions required by the GPL or the LGPL. If you do not delete
36268:  * the provisions above, a recipient may use your version of this file under
36268:  * the terms of any one of the MPL, the GPL or the LGPL.
36268:  *
36268:  * ***** END LICENSE BLOCK ***** */
36268: 
46832: include protocol PNecko;
36268: 
46755: include "mozilla/net/PHttpChannelParams.h";
46810: include "mozilla/net/NeckoMessageUtils.h";
69351: include "prio.h";
46755: 
46755: using RequestHeaderTuples;
46755: using nsHttpResponseHead;
78638: using nsHttpAtom;
46810: using IPC::URI;
56318: using IPC::InputStream;
69351: using PRNetAddr;
46755: 
36268: namespace mozilla {
36268: namespace net {
36268: 
36268: //-------------------------------------------------------------------
36268: protocol PHttpChannel
36268: {
36268:   manager PNecko;
36268: 
36268: parent:
46810:   AsyncOpen(URI                 uri,
46904:             // - TODO: bug 571161: unclear if any HTTP channel clients ever
46904:             // set originalURI != uri (about:credits?); also not clear if
46904:             // chrome channel would ever need to know.  Get rid of next arg?
46810:             URI                 original,
46810:             URI                 doc,
46810:             URI                 referrer,
46755:             PRUint32            loadFlags,
46790:             RequestHeaderTuples requestHeaders,
78638:             nsHttpAtom          requestMethod,
56318:             InputStream         uploadStream,
79445:             bool                uploadStreamHasHeaders,
46793:             PRUint16            priority,
46790:             PRUint8             redirectionLimit,
79445:             bool                allowPipelining,
79445:             bool                forceAllowThirdPartyCookie,
49379:             bool                resumeAt,
49379:             PRUint64            startPos,
56242:             nsCString           entityID,
56242:             bool                chooseApplicationCache,
84396:             nsCString           appCacheClientID);
46672: 
67800:   // Used to connect redirected-to channel on the parent with redirected-to
67800:   // channel on the child.
58111:   ConnectChannel(PRUint32 channelId);
58111: 
46793:   SetPriority(PRUint16 priority);
46793: 
46915:   SetCacheTokenCachedCharset(nsCString charset);
46915: 
50566:   UpdateAssociatedContentSecurity(PRInt32 high,
50566:                                   PRInt32 low,
50566:                                   PRInt32 broken,
50566:                                   PRInt32 no);
49379:   Suspend();
49379:   Resume();
49379: 
50561:   Cancel(nsresult status);
50561: 
49375:   // Reports approval/veto of redirect by child process redirect observers
55241:   Redirect2Verify(nsresult result, RequestHeaderTuples changedHeaders);
49375: 
50758:   // For document loads we keep this protocol open after child's
50758:   // OnStopRequest, and send this msg (instead of __delete__) to allow
50758:   // partial cleanup on parent. 
50758:   DocumentChannelCleanup();
50758: 
56242:   // This might have to be sync. If this fails we must fail the document load
56242:   // to avoid endless loop.
56242:   //
56242:   // Explanation: the document loaded was loaded from the offline cache. But
56242:   // the cache group id (the manifest URL) of the cache group it was loaded 
56242:   // from is different then the manifest the document refers to in the html 
56242:   // tag. If we detect this during the cache selection algorithm, we must not 
56242:   // load this document from the offline cache group it was just loaded from.
56242:   // Marking the cache entry as foreign in its cache group will prevent
56242:   // the document to load from the bad offline cache group. After it is marked,
56242:   // we reload the document to take the effect. If we fail to mark the entry 
56242:   // as foreign, we will end up in the same situation and reload again and
56242:   // again, indefinitely.
56242:   MarkOfflineCacheEntryAsForeign();
56242: 
55161:   __delete__();
55161: 
46672: child:
46911:   OnStartRequest(nsHttpResponseHead  responseHead,
79445:                  bool                useResponseHead,
54894:                  RequestHeaderTuples requestHeaders,
79445:                  bool                isFromCache,
79445:                  bool                cacheEntryAvailable,
46915:                  PRUint32            cacheExpirationTime,
50566:                  nsCString           cachedCharset,
69351:                  nsCString           securityInfoSerialization,
69351:                  PRNetAddr           selfAddr,
69351:                  PRNetAddr           peerAddr);
46672: 
67800:   // Combines a single OnDataAvailable and its associated OnProgress &
67800:   // OnStatus calls into one IPDL message
67800:   OnTransportAndData(nsresult  status,
67800:                      PRUint64  progress,
67800:                      PRUint64  progressMax,
67800:                      nsCString data,
46672:                      PRUint32  offset,
46672:                      PRUint32  count);
46672: 
46672:   OnStopRequest(nsresult statusCode);
46851: 
46851:   OnProgress(PRUint64 progress, PRUint64 progressMax);
46851: 
67800:   OnStatus(nsresult status);
49375: 
50561:   // Used to cancel child channel if we hit errors during creating and
50561:   // AsyncOpen of nsHttpChannel on the parent.
71646:   FailedAsyncOpen(nsresult status);
50561: 
49375:   // Called to initiate content channel redirect, starts talking to sinks
55241:   // on the content process and reports result via Redirect2Verify above
58111:   Redirect1Begin(PRUint32           newChannelId,
49375:                  URI                newUri,
49375:                  PRUint32           redirectFlags,
49375:                  nsHttpResponseHead responseHead);
55241: 
49375:   // Called if redirect successful so that child can complete setup.
49375:   Redirect3Complete();
49375: 
56242:   // Associte the child with an application ids
56242:   AssociateApplicationCache(nsCString groupID,
56242:                             nsCString clientID);
56242: 
55241:   // Tell child to delete channel (all IPDL deletes must be done from child to
55241:   // avoid races: see bug 591708).
55161:   DeleteSelf();
36268: };
36268: 
36268: 
36268: } // namespace net
36268: } // namespace mozilla
36268: 
