    1: #
    1: # ***** BEGIN LICENSE BLOCK *****
    1: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: #
    1: # The contents of this file are subject to the Mozilla Public License Version
    1: # 1.1 (the "License"); you may not use this file except in compliance with
    1: # the License. You may obtain a copy of the License at
    1: # http://www.mozilla.org/MPL/
    1: #
    1: # Software distributed under the License is distributed on an "AS IS" basis,
    1: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: # for the specific language governing rights and limitations under the
    1: # License.
    1: #
    1: # The Original Code is mozilla.org code.
    1: #
    1: # The Initial Developer of the Original Code is
    1: # Netscape Communications Corporation.
    1: # Portions created by the Initial Developer are Copyright (C) 1998
    1: # the Initial Developer. All Rights Reserved.
    1: #
    1: # Contributor(s):
    1: #
    1: # Alternatively, the contents of this file may be used under the terms of
    1: # either of the GNU General Public License Version 2 or later (the "GPL"),
    1: # or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: # in which case the provisions of the GPL or the LGPL are applicable instead
    1: # of those above. If you wish to allow use of your version of this file only
    1: # under the terms of either the GPL or the LGPL, and not to allow others to
    1: # use your version of this file under the terms of the MPL, indicate your
    1: # decision by deleting the provisions above and replace them with the notice
    1: # and other provisions required by the GPL or the LGPL. If you do not delete
    1: # the provisions above, a recipient may use your version of this file under
    1: # the terms of any one of the MPL, the GPL or the LGPL.
    1: #
    1: # ***** END LICENSE BLOCK *****
    1: 
    1: DEPTH		= ../..
    1: topsrcdir	= @top_srcdir@
    1: srcdir		= @srcdir@
    1: VPATH		= @srcdir@
51537: relativesrcdir = xpcom/tests
    1: 
    1: include $(DEPTH)/config/autoconf.mk
    1: 
    1: MODULE		= xpcom
    1: 
69751: DIRS		= external component bug656331_component
43620: 
    1: ifeq ($(OS_ARCH),WINNT)
    1: DIRS		+= windows
    1: endif
    1: 
12116: ifdef DEHYDRA_PATH
12116: DIRS += static-checker
12116: endif
12116: 
68511: VPATH += $(topsrcdir)/build
    1: 
    1: CPPSRCS = \
    1:   nsIFileEnumerator.cpp \
    1:   TestCallTemplates.cpp \
15887:   TestINIParser.cpp \
18820:   TestRacingServiceManager.cpp \
15887:   TestRegistrationOrder.cpp \
16568:   TestThreadPoolListener.cpp \
16177:   TestTimers.cpp \
25874:   TestBlockingProcess.cpp \
25874:   TestQuickReturn.cpp \
25874:   TestArguments.cpp \
39572:   TestUnicodeArguments.cpp \
68511:   $(STDCPPFLAGS) \
    1:   $(NULL)
    1: 
71467: ifeq ($(OS_TARGET),WINNT)
71467: CPPSRCS += TestBase64.cpp
71467: endif
71467: 
40162: ifdef WRAP_STL_INCLUDES
40162: CPPSRCS += TestSTLWrappers.cpp
40162: endif
40162: 
22273: SIMPLE_PROGRAMS	:= $(CPPSRCS:.cpp=$(BIN_SUFFIX))
22273: 
22273: CPP_UNIT_TESTS = \
42333:                  ShowAlignments.cpp \
35705:                  ShowSSEConfig.cpp \
22273:                  TestAutoPtr.cpp \
39448:                  TestCOMArray.cpp \
22273:                  TestCOMPtr.cpp \
22273:                  TestCOMPtrEq.cpp \
26481:                  TestFile.cpp \
22273:                  TestHashtables.cpp \
22273:                  TestID.cpp \
29013:                  TestObserverArray.cpp \
22273:                  TestObserverService.cpp \
22273:                  TestPipe.cpp \
41309:                  TestRefPtr.cpp \
22273:                  TestTextFormatter.cpp \
46445:                  TestCheckedInt.cpp \
78641:                  TestTArray.cpp \
22273:                  $(NULL)
22273: 
81384: ifdef MOZ_MEMORY
81384: CPP_UNIT_TESTS += TestJemalloc.cpp
81384: endif
81384: 
70361: # XXX Make this tests work in libxul builds.
70361: #CPP_UNIT_TESTS += \
70361: #                  TestArray.cpp \
70361: #                  TestCRT.cpp \
87648: #                  TestDeque.cpp \
70361: #                  TestEncoding.cpp \
70361: #                  TestExpirationTracker.cpp \
70361: #                  TestPipes.cpp \
70361: #                  TestPriorityQueue.cpp \
70361: #                  TestStorageStream.cpp \
70361: #                  TestStrings.cpp \
70361: #                  TestSynchronization.cpp \
70361: #                  TestTArray.cpp \
70361: #                  TestThreadPool.cpp \
70361: #                  TestThreads.cpp \
70361: #                  TestTimeStamp.cpp \
70361: #                  TestXPIDLString.cpp \
70361: #                  TestUTF.cpp \
70361: #                  TestAtoms.cpp \
70361: #                  $(NULL)
70361: ## FIXME: bug 577500 TestStaticAtoms fails when run in dist/bin
70361: ## TestStaticAtoms.cpp
    1: 
27982: ifdef MOZ_DEBUG
34039: # FIXME bug 523392: TestDeadlockDetector doesn't like Windows
34039: # FIXME bug 523378: also fails on OS X
69184: ifneq (,$(filter-out WINNT Darwin,$(OS_ARCH)))
27982: CPP_UNIT_TESTS += \
27982:                   TestDeadlockDetector.cpp \
27982:                   TestDeadlockDetectorScalability.cpp \
27982:                   $(NULL)
27982: endif
27982: endif
27982: 
 4782: ifndef MOZILLA_INTERNAL_API
22273: CPP_UNIT_TESTS += \
 4782:                   TestStringAPI.cpp \
 4782:                   $(NULL)
 4782: endif
 4782: 
    1: include $(topsrcdir)/config/config.mk
    1: 
22277: LIBS += $(XPCOM_LIBS)
22277: 
    1: # Needed to resolve __yylex (?)
    1: ifeq ($(OS_ARCH)$(OS_RELEASE),FreeBSD2)
    1: LIBS		+= -lpcap
    1: endif
    1: 
    1: XPCSHELL_TESTS = unit
    1: 
16568: # Make sure we have symbols in case we need to debug these.
16568: MOZ_DEBUG_SYMBOLS = 1
16568: 
    1: include $(topsrcdir)/config/rules.mk
    1: 
    1: LOCAL_INCLUDES	= \
    1:                 -I$(srcdir)/../ds \
    1: 		-I$(srcdir)/services \
    1: 		$(NULL)
    1: 
    1: libs::
    1: 	$(INSTALL) $(srcdir)/test.properties $(DIST)/bin/res
68461: ifneq (,$(SIMPLE_PROGRAMS))
51537: 	$(INSTALL) $(SIMPLE_PROGRAMS) $(DEPTH)/_tests/xpcshell/$(relativesrcdir)/unit
68461: endif
    1: 
22273: # Copy TestHarness.h into its own module, for ease of setting up includes
22273: # correctly.
22273: export::
22273: 	$(NSINSTALL) -D $(DIST)/include/testing
22273: 	$(INSTALL) $(srcdir)/TestHarness.h $(DIST)/include/testing
22273: 
    1: install::
    1: 	$(SYSINSTALL) $(IFLAGS1) $(srcdir)/test.properties $(DESTDIR)$(mozappdir)/res
    1: 
69184: ifeq (,$(filter-out WINNT os2-emx, $(HOST_OS_ARCH)))
13795: swapslashes = $(shell echo $(1) | sed -e 's|/|\\|g')
13795: getnativepath = $(call swapslashes,$(call normalizepath,$(1)))
13795: else
13795: getnativepath = $(1)
13795: endif
13795: 
14216: abs_srcdir = $(shell cd $(srcdir) && pwd)
14216: 
39216: DIST_PATH = $(DIST)/bin/
39216: RM_DIST = rm -f
39216: regOrderDir="$(call getnativepath,$(abs_srcdir)/regorder)";
39216: DOCOPY=
69184: 
    1: check::
13795: 	XPCOM_DEBUG_BREAK=stack-and-abort $(RUN_TEST_PROGRAM) \
39216: 	  $(DIST)/bin/TestRegistrationOrder$(BIN_SUFFIX) $(regOrderDir)
38889: 
38889: GARBAGE += TestScriptable.h
68511: 
68511: ifdef STDCXX_COMPAT
68511: TestCheckedInt: $(STDCXX_COMPAT:.cpp=.$(OBJ_SUFFIX))
68511: TestCheckedInt: LIBS += $(STDCXX_COMPAT:.cpp=.$(OBJ_SUFFIX))
68511: endif
