    1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef jsprvtd_h___
    1: #define jsprvtd_h___
    1: /*
    1:  * JS private typename definitions.
    1:  *
    1:  * This header is included only in other .h files, for convenience and for
    1:  * simplicity of type naming.  The alternative for structures is to use tags,
    1:  * which are named the same as their typedef names (legal in C/C++, and less
    1:  * noisy than suffixing the typedef name with "Struct" or "Str").  Instead,
    1:  * all .h files that include this file may use the same typedef name, whether
    1:  * declaring a pointer to struct type, or defining a member of struct type.
    1:  *
    1:  * A few fundamental scalar types are defined here too.  Neither the scalar
    1:  * nor the struct typedefs should change much, therefore the nearly-global
    1:  * make dependency induced by this file should not prove painful.
    1:  */
    1: 
    1: #include "jspubtd.h"
25218: #include "jsutil.h"
    1: 
    1: /* Internal identifier (jsid) macros. */
    1: 
 4529: #define JSID_IS_ATOM(id)            JSVAL_IS_STRING((jsval)(id))
    1: #define JSID_TO_ATOM(id)            ((JSAtom *)(id))
 4529: #define ATOM_TO_JSID(atom)          (JS_ASSERT(ATOM_IS_STRING(atom)),         \
 4529:                                      (jsid)(atom))
    1: 
 4529: #define JSID_IS_INT(id)             JSVAL_IS_INT((jsval)(id))
 4529: #define JSID_TO_INT(id)             JSVAL_TO_INT((jsval)(id))
 4529: #define INT_TO_JSID(i)              ((jsid)INT_TO_JSVAL(i))
 4529: #define INT_JSVAL_TO_JSID(v)        ((jsid)(v))
 4529: #define INT_JSID_TO_JSVAL(id)       ((jsval)(id))
    1: 
 4529: #define JSID_IS_OBJECT(id)          JSVAL_IS_OBJECT((jsval)(id))
 4529: #define JSID_TO_OBJECT(id)          JSVAL_TO_OBJECT((jsval)(id))
 4529: #define OBJECT_TO_JSID(obj)         ((jsid)OBJECT_TO_JSVAL(obj))
 4529: #define OBJECT_JSVAL_TO_JSID(v)     ((jsid)v)
 4529: 
12582: #define ID_TO_VALUE(id)             ((jsval)(id))
12582: 
 4529: /*
 8179:  * Convenience constants.
 8179:  */
 8367: #define JS_BITS_PER_UINT32_LOG2 5
 8367: #define JS_BITS_PER_UINT32      32
 8179: 
    1: /* Scalar typedefs. */
    1: typedef uint8  jsbytecode;
    1: typedef uint8  jssrcnote;
    1: typedef uint32 jsatomid;
    1: 
40862: #ifdef __cplusplus
40862: 
40860: /* Class and struct forward declarations in namespace js. */
41860: extern "C++" {
40860: namespace js {
40860: struct Parser;
40860: struct Compiler;
40860: }
41860: }
40860: 
40862: #endif
40862: 
    1: /* Struct typedefs. */
    1: typedef struct JSArgumentFormatMap  JSArgumentFormatMap;
    1: typedef struct JSCodeGenerator      JSCodeGenerator;
    1: typedef struct JSGCThing            JSGCThing;
    1: typedef struct JSGenerator          JSGenerator;
15613: typedef struct JSNativeEnumerator   JSNativeEnumerator;
27012: typedef struct JSFunctionBox        JSFunctionBox;
27012: typedef struct JSObjectBox          JSObjectBox;
    1: typedef struct JSParseNode          JSParseNode;
26960: typedef struct JSProperty           JSProperty;
    1: typedef struct JSSharpObjectMap     JSSharpObjectMap;
37766: typedef struct JSEmptyScope         JSEmptyScope;
    1: typedef struct JSThread             JSThread;
26569: typedef struct JSThreadData         JSThreadData;
    1: typedef struct JSTreeContext        JSTreeContext;
    1: typedef struct JSTryNote            JSTryNote;
 3235: typedef struct JSWeakRoots          JSWeakRoots;
    1: 
    1: /* Friend "Advanced API" typedefs. */
    1: typedef struct JSAtom               JSAtom;
    1: typedef struct JSAtomList           JSAtomList;
    1: typedef struct JSAtomListElement    JSAtomListElement;
    1: typedef struct JSAtomMap            JSAtomMap;
    1: typedef struct JSAtomState          JSAtomState;
    1: typedef struct JSCodeSpec           JSCodeSpec;
    1: typedef struct JSPrinter            JSPrinter;
    1: typedef struct JSRegExp             JSRegExp;
    1: typedef struct JSRegExpStatics      JSRegExpStatics;
    1: typedef struct JSScope              JSScope;
    1: typedef struct JSScopeOps           JSScopeOps;
    1: typedef struct JSScopeProperty      JSScopeProperty;
    1: typedef struct JSStackHeader        JSStackHeader;
    1: typedef struct JSSubString          JSSubString;
32669: typedef struct JSNativeTraceInfo    JSNativeTraceInfo;
32669: typedef struct JSSpecializedNative  JSSpecializedNative;
    1: typedef struct JSXML                JSXML;
    1: typedef struct JSXMLArray           JSXMLArray;
    1: typedef struct JSXMLArrayCursor     JSXMLArrayCursor;
    1: 
30023: /*
30023:  * Template declarations.
30023:  *
30023:  * jsprvtd.h can be included in both C and C++ translation units. For C++, it
30023:  * may possibly be wrapped in an extern "C" block which does not agree with
30028:  * templates.
30023:  */
30023: #ifdef __cplusplus
30028: extern "C++" {
30023: 
32651: namespace js {
31477: 
37741: class TraceRecorder;
39928: struct TraceMonitor;
37777: class CallStack;
37741: 
40433: class TokenStream;
40320: struct Token;
40320: struct TokenPos;
40320: struct TokenPtr;
40320: 
32651: class ContextAllocPolicy;
32651: class SystemAllocPolicy;
30023: 
32651: template <class T,
32651:           size_t MinInlineCapacity = 0,
32651:           class AllocPolicy = ContextAllocPolicy>
32651: class Vector;
32651: 
38568: template <class>
38568: struct DefaultHasher;
38568: 
38568: template <class Key,
38568:           class Value,
38568:           class HashPolicy = DefaultHasher<Key>,
38568:           class AllocPolicy = ContextAllocPolicy>
38568: class HashMap;
38568: 
38568: template <class T,
38568:           class HashPolicy = DefaultHasher<T>,
38568:           class AllocPolicy = ContextAllocPolicy>
38568: class HashSet;
38568: 
40281: class DeflatedStringCache;
40281: 
40391: class PropertyCache;
40362: struct PropertyCacheEntry;
41860: 
41860: static inline JSPropertyOp
41860: CastAsPropertyOp(JSObject *object)
41860: {
41860:     return JS_DATA_TO_FUNC_PTR(JSPropertyOp, object);
41860: }
41860: 
32651: } /* namespace js */
32651: 
32651: /* Common instantiations. */
32651: typedef js::Vector<jschar, 32> JSCharBuffer;
32651: 
32651: } /* export "C++" */
30023: #endif  /* __cplusplus */
30023: 
    1: /* "Friend" types used by jscntxt.h and jsdbgapi.h. */
    1: typedef enum JSTrapStatus {
    1:     JSTRAP_ERROR,
    1:     JSTRAP_CONTINUE,
    1:     JSTRAP_RETURN,
    1:     JSTRAP_THROW,
    1:     JSTRAP_LIMIT
    1: } JSTrapStatus;
    1: 
    1: typedef JSTrapStatus
18907: (* JSTrapHandler)(JSContext *cx, JSScript *script, jsbytecode *pc, jsval *rval,
18907:                   void *closure);
    1: 
    1: typedef JSBool
18907: (* JSWatchPointHandler)(JSContext *cx, JSObject *obj, jsval id, jsval old,
18907:                         jsval *newp, void *closure);
    1: 
    1: /* called just after script creation */
    1: typedef void
18907: (* JSNewScriptHook)(JSContext  *cx,
    1:                     const char *filename,  /* URL of script */
    1:                     uintN      lineno,     /* first line */
    1:                     JSScript   *script,
    1:                     JSFunction *fun,
    1:                     void       *callerdata);
    1: 
    1: /* called just before script destruction */
    1: typedef void
18907: (* JSDestroyScriptHook)(JSContext *cx,
    1:                         JSScript  *script,
    1:                         void      *callerdata);
    1: 
    1: typedef void
18907: (* JSSourceHandler)(const char *filename, uintN lineno, jschar *str,
18907:                     size_t length, void **listenerTSData, void *closure);
    1: 
    1: /*
    1:  * This hook captures high level script execution and function calls (JS or
    1:  * native).  It is used by JS_SetExecuteHook to hook top level scripts and by
    1:  * JS_SetCallHook to hook function calls.  It will get called twice per script
    1:  * or function call: just before execution begins and just after it finishes.
    1:  * In both cases the 'current' frame is that of the executing code.
    1:  *
    1:  * The 'before' param is JS_TRUE for the hook invocation before the execution
    1:  * and JS_FALSE for the invocation after the code has run.
    1:  *
    1:  * The 'ok' param is significant only on the post execution invocation to
    1:  * signify whether or not the code completed 'normally'.
    1:  *
    1:  * The 'closure' param is as passed to JS_SetExecuteHook or JS_SetCallHook
    1:  * for the 'before'invocation, but is whatever value is returned from that
    1:  * invocation for the 'after' invocation. Thus, the hook implementor *could*
    1:  * allocate a structure in the 'before' invocation and return a pointer to that
    1:  * structure. The pointer would then be handed to the hook for the 'after'
    1:  * invocation. Alternately, the 'before' could just return the same value as
    1:  * in 'closure' to cause the 'after' invocation to be called with the same
    1:  * 'closure' value as the 'before'.
    1:  *
    1:  * Returning NULL in the 'before' hook will cause the 'after' hook *not* to
    1:  * be called.
    1:  */
    1: typedef void *
18907: (* JSInterpreterHook)(JSContext *cx, JSStackFrame *fp, JSBool before,
    1:                       JSBool *ok, void *closure);
    1: 
    1: typedef void
18907: (* JSObjectHook)(JSContext *cx, JSObject *obj, JSBool isNew, void *closure);
    1: 
    1: typedef JSBool
18907: (* JSDebugErrorHook)(JSContext *cx, const char *message, JSErrorReport *report,
18907:                      void *closure);
    1: 
 2433: typedef struct JSDebugHooks {
 2433:     JSTrapHandler       interruptHandler;
 2433:     void                *interruptHandlerData;
 2433:     JSNewScriptHook     newScriptHook;
 2433:     void                *newScriptHookData;
 2433:     JSDestroyScriptHook destroyScriptHook;
 2433:     void                *destroyScriptHookData;
 2433:     JSTrapHandler       debuggerHandler;
 2433:     void                *debuggerHandlerData;
 2433:     JSSourceHandler     sourceHandler;
 2433:     void                *sourceHandlerData;
 2433:     JSInterpreterHook   executeHook;
 2433:     void                *executeHookData;
 2433:     JSInterpreterHook   callHook;
 2433:     void                *callHookData;
 2433:     JSObjectHook        objectHook;
 2433:     void                *objectHookData;
 2433:     JSTrapHandler       throwHook;
 2433:     void                *throwHookData;
 2433:     JSDebugErrorHook    debugErrorHook;
 2433:     void                *debugErrorHookData;
 2433: } JSDebugHooks;
 2433: 
26817: /* JSObjectOps function pointer typedefs. */
26817: 
26817: /*
26817:  * Look for id in obj and its prototype chain, returning false on error or
26817:  * exception, true on success.  On success, return null in *propp if id was
26817:  * not found.  If id was found, return the first object searching from obj
26817:  * along its prototype chain in which id names a direct property in *objp, and
26817:  * return a non-null, opaque property pointer in *propp.
26817:  *
26817:  * If JSLookupPropOp succeeds and returns with *propp non-null, that pointer
26817:  * may be passed as the prop parameter to a JSAttributesOp, as a short-cut
26817:  * that bypasses id re-lookup.  In any case, a non-null *propp result after a
26817:  * successful lookup must be dropped via JSObjectOps.dropProperty.
26817:  *
26817:  * NB: successful return with non-null *propp means the implementation may
26817:  * have locked *objp and added a reference count associated with *propp, so
26817:  * callers should not risk deadlock by nesting or interleaving other lookups
26817:  * or any obj-bearing ops before dropping *propp.
26817:  */
26817: typedef JSBool
26817: (* JSLookupPropOp)(JSContext *cx, JSObject *obj, jsid id, JSObject **objp,
26817:                    JSProperty **propp);
26817: 
26817: /*
26817:  * Define obj[id], a direct property of obj named id, having the given initial
32573:  * value, with the specified getter, setter, and attributes.
26817:  */
26817: typedef JSBool
26817: (* JSDefinePropOp)(JSContext *cx, JSObject *obj, jsid id, jsval value,
32573:                    JSPropertyOp getter, JSPropertyOp setter, uintN attrs);
26817: 
26817: /*
26817:  * Get, set, or delete obj[id], returning false on error or exception, true
26817:  * on success.  If getting or setting, the new value is returned in *vp on
26817:  * success.  If deleting without error, *vp will be JSVAL_FALSE if obj[id] is
26817:  * permanent, and JSVAL_TRUE if id named a direct property of obj that was in
26817:  * fact deleted, or if id names no direct property of obj (id could name a
26817:  * prototype property, or no property in obj or its prototype chain).
26817:  */
26817: typedef JSBool
26817: (* JSPropertyIdOp)(JSContext *cx, JSObject *obj, jsid id, jsval *vp);
26817: 
26817: /*
26817:  * Get or set attributes of the property obj[id].  Return false on error or
26817:  * exception, true with current attributes in *attrsp.  If prop is non-null,
26817:  * it must come from the *propp out parameter of a prior JSDefinePropOp or
26817:  * JSLookupPropOp call.
26817:  */
26817: typedef JSBool
26817: (* JSAttributesOp)(JSContext *cx, JSObject *obj, jsid id, JSProperty *prop,
26817:                    uintN *attrsp);
26817: 
26817: /*
26817:  * JSObjectOps.checkAccess type: check whether obj[id] may be accessed per
26817:  * mode, returning false on error/exception, true on success with obj[id]'s
26817:  * last-got value in *vp, and its attributes in *attrsp.
26817:  */
26817: typedef JSBool
26817: (* JSCheckAccessIdOp)(JSContext *cx, JSObject *obj, jsid id, JSAccessMode mode,
26817:                       jsval *vp, uintN *attrsp);
26817: 
26817: /*
26817:  * A generic type for functions taking a context, object, and property, with
26817:  * no return value.  Used by JSObjectOps.dropProperty currently (see above,
26817:  * JSDefinePropOp and JSLookupPropOp, for the object-locking protocol in which
26817:  * dropProperty participates).
26817:  */
26817: typedef void
26817: (* JSPropertyRefOp)(JSContext *cx, JSObject *obj, JSProperty *prop);
26817: 
26817: /*
 8893:  * The following determines whether JS_EncodeCharacters and JS_DecodeBytes
 8893:  * treat char[] as utf-8 or simply as bytes that need to be inflated/deflated.
 8893:  */
 8893: #ifdef JS_C_STRINGS_ARE_UTF8
 8893: # define js_CStringsAreUTF8 JS_TRUE
 8893: #else
 8893: extern JSBool js_CStringsAreUTF8;
 8893: #endif
 3235: 
    1: #endif /* jsprvtd_h___ */
