  3869: // Copyright (c) 2006, Google Inc.
  3869: // All rights reserved.
  3869: //
  3869: // Redistribution and use in source and binary forms, with or without
  3869: // modification, are permitted provided that the following conditions are
  3869: // met:
  3869: //
  3869: //     * Redistributions of source code must retain the above copyright
  3869: // notice, this list of conditions and the following disclaimer.
  3869: //     * Redistributions in binary form must reproduce the above
  3869: // copyright notice, this list of conditions and the following disclaimer
  3869: // in the documentation and/or other materials provided with the
  3869: // distribution.
  3869: //     * Neither the name of Google Inc. nor the names of its
  3869: // contributors may be used to endorse or promote products derived from
  3869: // this software without specific prior written permission.
  3869: //
  3869: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  3869: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  3869: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  3869: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  3869: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  3869: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  3869: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  3869: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  3869: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  3869: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  3869: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  3869: 
  3869: // macho_walker.cc: Iterate over the load commands in a mach-o file
  3869: //
  3869: // See macho_walker.h for documentation
  3869: //
  3869: // Author: Dan Waylonis
  3869: 
  7079: extern "C" {  // necessary for Leopard
  3869:   #include <assert.h>
  3869:   #include <fcntl.h>
  3869:   #include <mach-o/arch.h>
  3869:   #include <mach-o/loader.h>
  3869:   #include <mach-o/swap.h>
  3869:   #include <string.h>
  3869:   #include <unistd.h>
  7079: }
  3869: 
 47243: #include "common/mac/byteswap.h"
  3869: #include "common/mac/macho_walker.h"
  3889: #include "common/mac/macho_utilities.h"
  3869: 
  3869: namespace MacFileUtilities {
  3869: 
  3869: MachoWalker::MachoWalker(const char *path, LoadCommandCallback callback,
  3869:                          void *context)
 50677:     : file_(0),
114869:       memory_(NULL),
114869:       memory_size_(0),
 50677:       callback_(callback),
 50677:       callback_context_(context),
 50677:       current_header_(NULL),
 50677:       current_header_size_(0),
 50677:       current_header_offset_(0) {
  3869:   file_ = open(path, O_RDONLY);
  3869: }
  3869: 
114869: MachoWalker::MachoWalker(void *memory, size_t size,
114869:                          LoadCommandCallback callback, void *context)
114869:     : file_(0),
114869:       memory_(memory),
114869:       memory_size_(size),
114869:       callback_(callback),
114869:       callback_context_(context),
114869:       current_header_(NULL),
114869:       current_header_size_(0),
114869:       current_header_offset_(0) {
114869: }
114869: 
  3869: MachoWalker::~MachoWalker() {
  3869:   if (file_ != -1)
  3869:     close(file_);
  3869: }
  3869: 
118328: bool MachoWalker::WalkHeader(cpu_type_t cpu_type, cpu_subtype_t cpu_subtype) {
118328:   cpu_type_t valid_cpu_type = cpu_type;
118328:   cpu_subtype_t valid_cpu_subtype = cpu_subtype;
118328:   // if |cpu_type| is 0, use the native cpu type.
  3869:   if (cpu_type == 0) {
  3869:     const NXArchInfo *arch = NXGetLocalArchInfo();
 47243:     assert(arch);
118328:     valid_cpu_type = arch->cputype;
118328:     valid_cpu_subtype = CPU_SUBTYPE_MULTIPLE;
  3869:   }
  3869:   off_t offset;
118328:   if (FindHeader(valid_cpu_type, valid_cpu_subtype, offset)) {
  3869:     if (cpu_type & CPU_ARCH_ABI64)
  3869:       return WalkHeader64AtOffset(offset);
  3869: 
  3869:     return WalkHeaderAtOffset(offset);
  3869:   }
  3869: 
  3869:   return false;
  3869: }
  3869: 
  3869: bool MachoWalker::ReadBytes(void *buffer, size_t size, off_t offset) {
114869:   if (memory_) {
114869:     if (offset < 0)
114869:       return false;
114869:     bool result = true;
114869:     if (offset + size > memory_size_) {
114869:       if (static_cast<size_t>(offset) >= memory_size_)
114869:         return false;
114869:       size = memory_size_ - static_cast<size_t>(offset);
114869:       result = false;
114869:     }
114869:     memcpy(buffer, static_cast<char *>(memory_) + offset, size);
114869:     return result;
114869:   } else {
  3869:     return pread(file_, buffer, size, offset) == (ssize_t)size;
  3869:   }
114869: }
  3869: 
  3869: bool MachoWalker::CurrentHeader(struct mach_header_64 *header, off_t *offset) {
  3869:   if (current_header_) {
  3869:     memcpy(header, current_header_, sizeof(mach_header_64));
  3869:     *offset = current_header_offset_;
  3869:     return true;
  3869:   }
  3869: 
  3869:   return false;
  3869: }
  3869: 
118328: bool MachoWalker::FindHeader(cpu_type_t cpu_type,
118328:                              cpu_subtype_t cpu_subtype,
118328:                              off_t &offset) {
  3869:   // Read the magic bytes that's common amongst all mach-o files
  3869:   uint32_t magic;
  3869:   if (!ReadBytes(&magic, sizeof(magic), 0))
  3869:     return false;
  3869: 
  3869:   offset = sizeof(magic);
  3869: 
  3869:   // Figure out what type of file we've got
  3869:   bool is_fat = false;
  3869:   if (magic == FAT_MAGIC || magic == FAT_CIGAM) {
  3869:     is_fat = true;
  3869:   }
  3869:   else if (magic != MH_MAGIC && magic != MH_CIGAM && magic != MH_MAGIC_64 &&
  3869:            magic != MH_CIGAM_64) {
  3869:     return false;
  3869:   }
  3869: 
  3869:   if (!is_fat) {
  3869:     // If we don't have a fat header, check if the cpu type matches the single
  3869:     // header
118328:     struct mach_header header;
118328:     if (!ReadBytes(&header, sizeof(header), 0))
  3869:       return false;
  3869: 
  3889:     if (magic == MH_CIGAM || magic == MH_CIGAM_64)
118328:       swap_mach_header(&header, NXHostByteOrder());
  3889: 
118328:     if (cpu_type != header.cputype ||
118328:         (cpu_subtype != CPU_SUBTYPE_MULTIPLE &&
118328:          cpu_subtype != header.cpusubtype)) {
  3869:       return false;
118328:     }
  3869: 
  3869:     offset = 0;
  3869:     return true;
  3869:   } else {
  3869:     // Read the fat header and find an appropriate architecture
  3869:     offset = 0;
  3869:     struct fat_header fat;
  3869:     if (!ReadBytes(&fat, sizeof(fat), offset))
  3869:       return false;
  3869: 
  3869:     if (NXHostByteOrder() != NX_BigEndian)
  3869:       swap_fat_header(&fat, NXHostByteOrder());
  3869: 
  3869:     offset += sizeof(fat);
  3869: 
  3869:     // Search each architecture for the desired one
  3869:     struct fat_arch arch;
  3869:     for (uint32_t i = 0; i < fat.nfat_arch; ++i) {
  3869:       if (!ReadBytes(&arch, sizeof(arch), offset))
  3869:         return false;
  3869: 
  3869:       if (NXHostByteOrder() != NX_BigEndian)
  3869:         swap_fat_arch(&arch, 1, NXHostByteOrder());
  3869: 
118328:       if (arch.cputype == cpu_type &&
118328:           (cpu_subtype == CPU_SUBTYPE_MULTIPLE ||
118328:            arch.cpusubtype == cpu_subtype)) {
  3869:         offset = arch.offset;
  3869:         return true;
  3869:       }
  3869: 
  3869:       offset += sizeof(arch);
  3869:     }
  3869:   }
  3869: 
  3869:   return false;
  3869: }
  3869: 
  3869: bool MachoWalker::WalkHeaderAtOffset(off_t offset) {
  3869:   struct mach_header header;
  3869:   if (!ReadBytes(&header, sizeof(header), offset))
  3869:     return false;
  3869: 
  3869:   bool swap = (header.magic == MH_CIGAM);
  3869:   if (swap)
  3869:     swap_mach_header(&header, NXHostByteOrder());
  3869: 
  3869:   // Copy the data into the mach_header_64 structure.  Since the 32-bit and
  3869:   // 64-bit only differ in the last field (reserved), this is safe to do.
  3869:   struct mach_header_64 header64;
  3869:   memcpy((void *)&header64, (const void *)&header, sizeof(header));
  3869:   header64.reserved = 0;
  3869: 
  3869:   current_header_ = &header64;
  3869:   current_header_size_ = sizeof(header); // 32-bit, not 64-bit
  3869:   current_header_offset_ = offset;
  3869:   offset += current_header_size_;
  3869:   bool result = WalkHeaderCore(offset, header.ncmds, swap);
  3869:   current_header_ = NULL;
  3869:   current_header_size_ = 0;
  3869:   current_header_offset_ = 0;
  3869:   return result;
  3869: }
  3869: 
  3869: bool MachoWalker::WalkHeader64AtOffset(off_t offset) {
  3869:   struct mach_header_64 header;
  3869:   if (!ReadBytes(&header, sizeof(header), offset))
  3869:     return false;
  3869: 
  3869:   bool swap = (header.magic == MH_CIGAM_64);
  3869:   if (swap)
  3889:     breakpad_swap_mach_header_64(&header, NXHostByteOrder());
  3869: 
  3869:   current_header_ = &header;
  3869:   current_header_size_ = sizeof(header);
  3869:   current_header_offset_ = offset;
  3869:   offset += current_header_size_;
  3869:   bool result = WalkHeaderCore(offset, header.ncmds, swap);
  3869:   current_header_ = NULL;
  3869:   current_header_size_ = 0;
  3869:   current_header_offset_ = 0;
  3869:   return result;
  3869: }
  3869: 
  3869: bool MachoWalker::WalkHeaderCore(off_t offset, uint32_t number_of_commands,
  3869:                                  bool swap) {
  3869:   for (uint32_t i = 0; i < number_of_commands; ++i) {
  3869:     struct load_command cmd;
  3869:     if (!ReadBytes(&cmd, sizeof(cmd), offset))
  3869:       return false;
  3869: 
  3869:     if (swap)
  3869:       swap_load_command(&cmd, NXHostByteOrder());
  3869: 
  3869:     // Call the user callback
  3869:     if (callback_ && !callback_(this, &cmd, offset, swap, callback_context_))
  3869:       break;
  3869: 
  3869:     offset += cmd.cmdsize;
  3869:   }
  3869: 
  3869:   return true;
  3869: }
  3869: 
  3869: }  // namespace MacFileUtilities
