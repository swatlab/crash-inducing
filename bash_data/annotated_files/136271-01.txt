 20775: <!DOCTYPE HTML>
 20775: <html>
 20775: <head>
 20775:   <title>Tests for browser context menu</title>
 20775:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
 20775:   <script type="text/javascript" src="/tests/SimpleTest/EventUtils.js"></script>
 20775:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
 20775: </head>
 20775: <body>
 20775: Browser context menu tests.
 20775: <p id="display"></p>
 20775: 
 20775: <div id="content">
 20775: </div>
 20775: 
 20775: <pre id="test">
124459: <script> var perWindowPrivateBrowsing = false; </script>
124459: <script type="text/javascript" src="privateBrowsingMode.js"></script>
 20775: <script class="testbody" type="text/javascript">
 20775: 
 20775: /** Test for Login Manager: multiple login autocomplete. **/
 20775: 
114776: SpecialPowers.Cu.import("resource://gre/modules/InlineSpellChecker.jsm", window);
 20775: 
114776: const Ci = SpecialPowers.Ci;
 20775: 
 80481: function openContextMenuFor(element, shiftkey, shouldWaitForFocus) {
 20775:     // Context menu should be closed before we open it again.
 99570:     is(SpecialPowers.wrap(contextMenu).state, "closed", "checking if popup is closed");
 20775: 
 80481:     if (lastElement)
 80481:       lastElement.blur();
 80481:     element.focus();
 80481: 
 86833:     // Some elements need time to focus and spellcheck before any tests are
 86833:     // run on them.
 86833:     function actuallyOpenContextMenuFor() {
 78511:       lastElement = element;
 75019:       var eventDetails = { type : "contextmenu", button : 2, shiftKey : shiftkey };
 31116:       synthesizeMouse(element, 2, 2, eventDetails, element.ownerDocument.defaultView);
 20775:     }
 86833:     if (shouldWaitForFocus)
 86833:       SimpleTest.executeSoon(actuallyOpenContextMenuFor);
 86833:     else
 86833:       actuallyOpenContextMenuFor();
 80481: }
 20775: 
 20775: function closeContextMenu() {
 20775:     contextMenu.hidePopup();
 20775: }
 20775: 
 49309: function executeCopyCommand(command, expectedValue)
 49309: {
 49309:   // Just execute the command directly rather than simulating a context menu
 49309:   // press to avoid having to deal with its asynchronous nature
109195:   SpecialPowers.wrap(subwindow).controllers.getControllerForCommand(command).doCommand(command);
 49309: 
 49309:   // The easiest way to check the clipboard is to paste the contents into a
 49309:   // textbox
 49309:   input.focus();
 49309:   input.value = "";
109195:   SpecialPowers.wrap(input).controllers.getControllerForCommand("cmd_paste").doCommand("cmd_paste");
 49309:   is(input.value, expectedValue, "paste for command " + command);
 49309: }
 49309: 
 76778: function invokeItemAction(generatedItemId)
 75019: {
 76778:   var item = contextMenu.getElementsByAttribute("generateditemid",
 76778:                                                 generatedItemId)[0];
 75019:   ok(item, "Got generated XUL menu item");
 75019:   item.doCommand();
 86833:   ok(!pagemenu.hasAttribute("hopeless"), "attribute got removed");
 75019: }
 75019: 
 93336: function selectText(element) {
 93336:   // Clear any previous selections before selecting new element.
 93336:   subwindow.getSelection().removeAllRanges();
 93336: 
 93336:   var div = subwindow.document.createRange();
 93336:   div.setStartBefore(element);
 93336:   div.setEndAfter(element);
 93336:   subwindow.getSelection().addRange(div);
 93336: }
 93336: 
118346: function selectInputText(element) {
118346:   // Clear any previous selections before selecting new element.
118346:   subwindow.getSelection().removeAllRanges();
118346: 
118346:   element.select();
118346: }
118346: 
 75019: function getVisibleMenuItems(aMenu, aData) {
 20775:     var items = [];
 20775:     var accessKeys = {};
 20775:     for (var i = 0; i < aMenu.childNodes.length; i++) {
 20775:         var item = aMenu.childNodes[i];
 20775:         if (item.hidden)
 20775:             continue;
 20775: 
 20775:         var key = item.accessKey;
 20775:         if (key)
 20775:             key = key.toLowerCase();
 20775: 
 76778:         var isGenerated = item.hasAttribute("generateditemid");
 75019: 
 20775:         if (item.nodeName == "menuitem") {
 43053:             var isSpellSuggestion = item.className == "spell-suggestion";
 43053:             if (isSpellSuggestion) {
 43053:               is(item.id, "", "child menuitem #" + i + " is a spelling suggestion");
 75019:             } else if (isGenerated) {
 75019:               is(item.id, "", "child menuitem #" + i + " is a generated item");
 43053:             } else {
 20775:               ok(item.id, "child menuitem #" + i + " has an ID");
 43053:             }
 43299:             var label = item.getAttribute("label");
 43299:             ok(label.length, "menuitem " + item.id + " has a label");
 43053:             if (isSpellSuggestion) {
 43053:               is(key, "", "Spell suggestions shouldn't have an access key");
 43299:               items.push("*" + label);
 75019:             } else if (isGenerated) {
 75019:               items.push("+" + label);
 43053:             } else if (item.id.indexOf("spell-check-dictionary-") != 0 &&
 43053:                        item.id != "spell-no-suggestions") {
 41143:               ok(key, "menuitem " + item.id + " has an access key");
 20775:               if (accessKeys[key])
 20775:                   ok(false, "menuitem " + item.id + " has same accesskey as " + accessKeys[key]);
 20775:               else
 33333:                   accessKeys[key] = item.id;
 43053:             }
 75019:             if (!isSpellSuggestion && !isGenerated) {
 20775:               items.push(item.id);
 43053:             }
 75019:             if (isGenerated) {
 75019:               var p = {};
 75019:               p.type = item.getAttribute("type");
 75019:               p.icon = item.getAttribute("image");
 75019:               p.checked = item.hasAttribute("checked");
 75019:               p.disabled = item.hasAttribute("disabled");
 75019:               items.push(p);
 75019:             } else {
 30138:               items.push(!item.disabled);
 75019:             }
 20775:         } else if (item.nodeName == "menuseparator") {
 20775:             ok(true, "--- seperator id is " + item.id);
 20775:             items.push("---");
 30138:             items.push(null);
 20775:         } else if (item.nodeName == "menu") {
 75019:             if (isGenerated) {
 75019:                 item.id = "generated-submenu-" + aData.generatedSubmenuId++;
 75019:             }
 20775:             ok(item.id, "child menu #" + i + " has an ID");
 75019:             if (!isGenerated) {
 20775:                 ok(key, "menu has an access key");
 20775:                 if (accessKeys[key])
 20775:                     ok(false, "menu " + item.id + " has same accesskey as " + accessKeys[key]);
 20775:                 else
 33333:                     accessKeys[key] = item.id;
 75019:             }
 20775:             items.push(item.id);
 30138:             items.push(!item.disabled);
 20775:             // Add a dummy item to that the indexes in checkMenu are the same
 20775:             // for expectedItems and actualItems.
 20775:             items.push([]);
 30138:             items.push(null);
 20775:         } else {
 20775:             ok(false, "child #" + i + " of menu ID " + aMenu.id +
 20775:                       " has an unknown type (" + item.nodeName + ")");
 20775:         }
 20775:     }
 20775:     return items;
 20775: }
 20775: 
 20775: function checkContextMenu(expectedItems) {
 20775:     is(contextMenu.state, "open", "checking if popup is open");
 75019:     var data = { generatedSubmenuId: 1 };
 75019:     checkMenu(contextMenu, expectedItems, data);
 20775: }
 20775: 
 20775: /*
 20775:  * checkMenu - checks to see if the specified <menupopup> contains the
 30138:  * expected items and state.
 30138:  * expectedItems is a array of (1) item IDs and (2) a boolean specifying if
 30138:  * the item is enabled or not (or null to ignore it). Submenus can be checked
 30138:  * by providing a nested array entry after the expected <menu> ID.
 30138:  * For example: ["blah", true,              // item enabled
 30138:  *               "submenu", null,           // submenu
 30138:  *                   ["sub1", true,         // submenu contents
 30138:  *                    "sub2", false], null, // submenu contents
 30138:  *               "lol", false]              // item disabled
 20775:  *
 20775:  */
 75019: function checkMenu(menu, expectedItems, data) {
 75019:     var actualItems = getVisibleMenuItems(menu, data);
 20775:     //ok(false, "Items are: " + actualItems);
 30138:     for (var i = 0; i < expectedItems.length; i+=2) {
 30138:         var actualItem   = actualItems[i];
 30138:         var actualEnabled = actualItems[i + 1];
 30138:         var expectedItem = expectedItems[i];
 30138:         var expectedEnabled = expectedItems[i + 1];
 30138:         if (expectedItem instanceof Array) {
 20775:             ok(true, "Checking submenu...");
 30138:             var menuID = expectedItems[i - 2]; // The last item was the menu ID.
 20775:             var submenu = menu.getElementsByAttribute("id", menuID)[0];
 86833:             ok(submenu, "got a submenu element of id='" + menuID + "'");
 86833:             if (submenu) {
 86833:               is(submenu.nodeName, "menu", "submenu element of id='" + menuID +
 86833:                                            "' has expected nodeName");
 75019:               checkMenu(submenu.menupopup, expectedItem, data);
 86833:             }
 20775:         } else {
 30138:             is(actualItem, expectedItem,
 30138:                "checking item #" + i/2 + " (" + expectedItem + ") name");
 75019: 
 75019:             if (typeof expectedEnabled == "object" && expectedEnabled != null ||
 75019:                 typeof actualEnabled == "object" && actualEnabled != null) {
 75019: 
 75019:                 ok(!(actualEnabled == null), "actualEnabled is not null");
 75019:                 ok(!(expectedEnabled == null), "expectedEnabled is not null");
 75019:                 is(typeof actualEnabled, typeof expectedEnabled, "checking types");
 75019: 
 75019:                 if (typeof actualEnabled != typeof expectedEnabled ||
 75019:                     actualEnabled == null || expectedEnabled == null)
 75019:                   continue;
 75019: 
 75019:                 is(actualEnabled.type, expectedEnabled.type,
 75019:                    "checking item #" + i/2 + " (" + expectedItem + ") type attr value");
 75019:                 var icon = actualEnabled.icon;
 75019:                 if (icon) {
 75019:                   var tmp = "";
 75019:                   var j = icon.length - 1;
 75019:                   while (j && icon[j] != "/") {
 75019:                     tmp = icon[j--] + tmp;
 75019:                   }
 75019:                   icon = tmp;
 75019:                 }
 75019:                 is(icon, expectedEnabled.icon,
 75019:                    "checking item #" + i/2 + " (" + expectedItem + ") icon attr value");
 75019:                 is(actualEnabled.checked, expectedEnabled.checked,
 75019:                    "checking item #" + i/2 + " (" + expectedItem + ") has checked attr");
 75019:                 is(actualEnabled.disabled, expectedEnabled.disabled,
 75019:                    "checking item #" + i/2 + " (" + expectedItem + ") has disabled attr");
 75019:             } else if (expectedEnabled != null)
 30138:                 is(actualEnabled, expectedEnabled,
 30138:                    "checking item #" + i/2 + " (" + expectedItem + ") enabled state");
 20775:         }
 20775:     }
 20775:     // Could find unexpected extra items at the end...
 20775:     is(actualItems.length, expectedItems.length, "checking expected number of menu entries");
 20775: }
 20775: 
 20775: /*
 20775:  * runTest
 20775:  *
 20775:  * Called by a popupshowing event handler. Each test checks for expected menu
 20775:  * contents, closes the popup, and finally triggers the popup on a new element
 20775:  * (thus kicking off another cycle).
 20775:  *
 20775:  */
 20775: function runTest(testNum) {
 20775:   // Seems we need to enable this again, or sendKeyEvent() complaints.
 20775:   ok(true, "Starting test #" + testNum);
 20775: 
 80934:   var inspectItems = [];
 80934:   if (SpecialPowers.getBoolPref("devtools.inspector.enabled")) {
 80934:     inspectItems = ["---", null,
 80934:                     "context-inspect", true];
 80934:   }
 80934: 
 20775:   switch (testNum) {
 20775:     case 1:
 20775:         // Invoke context menu for next test.
 20775:         openContextMenuFor(text);
 20775:         break;
 20775: 
 20775:     case 2:
 20775:         // Context menu for plain text
 89685:         plainTextItems = ["context-back",         false,
 30138:                           "context-forward",      false,
 30138:                           "context-reload",       true,
 30138:                           "---",                  null,
 30138:                           "context-bookmarkpage", true,
 30138:                           "context-savepage",     true,
 30138:                           "---",                  null,
 30138:                           "context-viewbgimage",  false,
 30138:                           "context-selectall",    true,
 30138:                           "---",                  null,
 30138:                           "context-viewsource",   true,
 80934:                           "context-viewinfo",     true
 89685:                          ].concat(inspectItems);
 89685:         checkContextMenu(plainTextItems);
 33333:         closeContextMenu();
 20775:         openContextMenuFor(link); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 3:
 20775:         // Context menu for text link
124459:         if (perWindowPrivateBrowsing) {
124459:           checkContextMenu(["context-openlinkintab", true,
124459:                             "context-openlink",      true,
124459:                             "context-openlinkprivate", true,
124459:                             "---",                   null,
124459:                             "context-bookmarklink",  true,
124459:                             "context-savelink",      true,
124459:                             "context-copylink",      true
124459:                            ].concat(inspectItems));
124459:         } else {
 48001:           checkContextMenu(["context-openlinkintab", true,
 48001:                             "context-openlink",      true,
 30138:                             "---",                   null,
 30138:                             "context-bookmarklink",  true,
 30138:                             "context-savelink",      true,
 80934:                             "context-copylink",      true
 80934:                            ].concat(inspectItems));
124459:         }
 33333:         closeContextMenu();
 20775:         openContextMenuFor(mailto); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 4:
 20775:         // Context menu for text mailto-link
 80934:         checkContextMenu(["context-copyemail", true].concat(inspectItems));
 33333:         closeContextMenu();
 20775:         openContextMenuFor(input); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 5:
 20775:         // Context menu for text input field
 30138:         checkContextMenu(["context-undo",        false,
 30138:                           "---",                 null,
 30138:                           "context-cut",         false,
 30138:                           "context-copy",        false,
 30138:                           "context-paste",       null, // ignore clipboard state
 30138:                           "context-delete",      false,
 30138:                           "---",                 null,
 78750:                           "context-selectall",   false,
 30138:                           "---",                 null,
 80934:                           "spell-check-enabled", true
 80934:                          ].concat(inspectItems));
 33333:         closeContextMenu();
 20775:         openContextMenuFor(img); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 6:
 20775:         // Context menu for an image
 30138:         checkContextMenu(["context-viewimage",            true,
 30138:                           "context-copyimage-contents",   true,
 30138:                           "context-copyimage",            true,
 30138:                           "---",                          null,
 30138:                           "context-saveimage",            true,
 30138:                           "context-sendimage",            true,
 30138:                           "context-setDesktopBackground", true,
 80934:                           "context-viewimageinfo",        true
 80934:                          ].concat(inspectItems));
 20775:         closeContextMenu();
 20775:         openContextMenuFor(canvas); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 7:
 20775:         // Context menu for a canvas
 30138:         checkContextMenu(["context-viewimage",    true,
 30138:                           "context-saveimage",    true,
 30138:                           "context-bookmarkpage", true,
 80934:                           "context-selectall",    true
 80934:                          ].concat(inspectItems));
 20775:         closeContextMenu();
 30138:         openContextMenuFor(video_ok); // Invoke context menu for next test.
 20775:         break;
 20775: 
 20775:     case 8:
 30138:         // Context menu for a video (with a VALID media source)
 30138:         checkContextMenu(["context-media-play",         true,
 30138:                           "context-media-mute",         true,
135344:                           "context-media-playbackrate", null,
135344:                               ["context-media-playbackrate-050x", true,
135344:                                "context-media-playbackrate-100x", true,
135344:                                "context-media-playbackrate-150x", true,
135344:                                "context-media-playbackrate-200x", true], null,
 79725:                           "context-media-hidecontrols", true,
 79725:                           "context-video-showstats",    true,
 33324:                           "context-video-fullscreen",   true,
 30138:                           "---",                        null,
 30138:                           "context-viewvideo",          true,
 30138:                           "context-copyvideourl",       true,
 30138:                           "---",                        null,
 30138:                           "context-savevideo",          true,
 79718:                           "context-video-saveimage",    true,
 80934:                           "context-sendvideo",          true
 80934:                          ].concat(inspectItems));
 30138:         closeContextMenu();
 95812:         openContextMenuFor(audio_in_video); // Invoke context menu for next test.
 95812:         break;
 95812: 
 95812:     case 9:
 95812:         // Context menu for a video (with an audio-only file)
 95812:           checkContextMenu(["context-media-play",         true,
 95812:                             "context-media-mute",         true,
135344:                             "context-media-playbackrate", null,
135344:                                 ["context-media-playbackrate-050x", true,
135344:                                  "context-media-playbackrate-100x", true,
135344:                                  "context-media-playbackrate-150x", true,
135344:                                  "context-media-playbackrate-200x", true], null,
 95812:                             "context-media-showcontrols", true,
 95812:                             "---",                        null,
 95812:                             "context-copyaudiourl",       true,
 95812:                             "---",                        null,
 95812:                             "context-saveaudio",          true,
 95812:                             "context-sendaudio",          true
 95812:                            ].concat(inspectItems));
 95812:         closeContextMenu();
 30138:         openContextMenuFor(video_bad); // Invoke context menu for next test.
 30138:         break;
 30138: 
 95812:     case 10:
 34111:         // Context menu for a video (with an INVALID media source)
 30138:         checkContextMenu(["context-media-play",         false,
 30138:                           "context-media-mute",         false,
135344:                           "context-media-playbackrate", null,
135344:                               ["context-media-playbackrate-050x", false,
135344:                                "context-media-playbackrate-100x", false,
135344:                                "context-media-playbackrate-150x", false,
135344:                                "context-media-playbackrate-200x", false], null,
 79725:                           "context-media-hidecontrols", false,
 79725:                           "context-video-showstats",    false,
 33324:                           "context-video-fullscreen",   false,
 30138:                           "---",                        null,
 30138:                           "context-viewvideo",          true,
 30138:                           "context-copyvideourl",       true,
 30138:                           "---",                        null,
 30138:                           "context-savevideo",          true,
 79718:                           "context-video-saveimage",    false,
 80934:                           "context-sendvideo",          true
 80934:                          ].concat(inspectItems));
 30138:         closeContextMenu();
 30138:         openContextMenuFor(video_bad2); // Invoke context menu for next test.
 30138:         break;
 30138: 
 95812:     case 11:
 34111:         // Context menu for a video (with an INVALID media source)
 30138:         checkContextMenu(["context-media-play",         false,
 30138:                           "context-media-mute",         false,
135344:                           "context-media-playbackrate", null,
135344:                               ["context-media-playbackrate-050x", false,
135344:                                "context-media-playbackrate-100x", false,
135344:                                "context-media-playbackrate-150x", false,
135344:                                "context-media-playbackrate-200x", false], null,
 79725:                           "context-media-hidecontrols", false,
 79725:                           "context-video-showstats",    false,
 33324:                           "context-video-fullscreen",   false,
 30138:                           "---",                        null,
 30138:                           "context-viewvideo",          false,
 30138:                           "context-copyvideourl",       false,
 30138:                           "---",                        null,
 30138:                           "context-savevideo",          false,
 79718:                           "context-video-saveimage",    false,
 80934:                           "context-sendvideo",          false
 80934:                          ].concat(inspectItems));
 20775:         closeContextMenu();
 20775:         openContextMenuFor(iframe); // Invoke context menu for next test.
 20775:         break;
 20775: 
 95812:     case 12:
 20775:         // Context menu for an iframe
 30138:         checkContextMenu(["context-back",         false,
 30138:                           "context-forward",      false,
 30138:                           "context-reload",       true,
 30138:                           "---",                  null,
 30138:                           "context-bookmarkpage", true,
 30138:                           "context-savepage",     true,
 30138:                           "---",                  null,
 30138:                           "context-viewbgimage",  false,
 30138:                           "context-selectall",    true,
 30138:                           "frame",                null,
 30138:                               ["context-showonlythisframe", true,
 48001:                                "context-openframeintab",    true,
 30138:                                "context-openframe",         true,
 30138:                                "---",                       null,
 30138:                                "context-reloadframe",       true,
 30138:                                "---",                       null,
 30138:                                "context-bookmarkframe",     true,
 30138:                                "context-saveframe",         true,
 30138:                                "---",                       null,
 30138:                                "context-printframe",        true,
 30138:                                "---",                       null,
 30138:                                "context-viewframesource",   true,
 30138:                                "context-viewframeinfo",     true], null,
 30138:                           "---",                  null,
 30138:                           "context-viewsource",   true,
 80934:                           "context-viewinfo",     true
 80934:                          ].concat(inspectItems));
 20775:         closeContextMenu();
 81250:         openContextMenuFor(video_in_iframe); // Invoke context menu for next test.
 81250:         break;
 81250: 
 95812:     case 13:
 81250:         // Context menu for a video in an iframe
 81250:         checkContextMenu(["context-media-play",         true,
 81250:                           "context-media-mute",         true,
135344:                           "context-media-playbackrate", null,
135344:                               ["context-media-playbackrate-050x", true,
135344:                                "context-media-playbackrate-100x", true,
135344:                                "context-media-playbackrate-150x", true,
135344:                                "context-media-playbackrate-200x", true], null,
 81250:                           "context-media-hidecontrols", true,
 81250:                           "context-video-showstats",    true,
 81250:                           "context-video-fullscreen",   true,
 81250:                           "---",                        null,
 81250:                           "context-viewvideo",          true,
 81250:                           "context-copyvideourl",       true,
 81250:                           "---",                        null,
 81250:                           "context-savevideo",          true,
 81250:                           "context-video-saveimage",    true,
 81250:                           "context-sendvideo",          true,
 81250:                           "frame",                null,
 81250:                               ["context-showonlythisframe", true,
 81250:                                "context-openframeintab",    true,
 81250:                                "context-openframe",         true,
 81250:                                "---",                       null,
 81250:                                "context-reloadframe",       true,
 81250:                                "---",                       null,
 81250:                                "context-bookmarkframe",     true,
 81250:                                "context-saveframe",         true,
 81250:                                "---",                       null,
 81250:                                "context-printframe",        true,
 81250:                                "---",                       null,
 81250:                                "context-viewframeinfo",     true], null].concat(inspectItems));
 81250:         closeContextMenu();
 81250:         openContextMenuFor(image_in_iframe); // Invoke context menu for next test.
 81250:         break;
 81250: 
 95812:     case 14:
 81250:         // Context menu for an image in an iframe
 81250:         checkContextMenu(["context-viewimage",            true,
 81250:                           "context-copyimage-contents",   true,
 81250:                           "context-copyimage",            true,
 81250:                           "---",                          null,
 81250:                           "context-saveimage",            true,
 81250:                           "context-sendimage",            true,
 81250:                           "context-setDesktopBackground", true,
 81250:                           "context-viewimageinfo",        true,
 81250:                           "frame",                null,
 81250:                               ["context-showonlythisframe", true,
 81250:                                "context-openframeintab",    true,
 81250:                                "context-openframe",         true,
 81250:                                "---",                       null,
 81250:                                "context-reloadframe",       true,
 81250:                                "---",                       null,
 81250:                                "context-bookmarkframe",     true,
 81250:                                "context-saveframe",         true,
 81250:                                "---",                       null,
 81250:                                "context-printframe",        true,
 81250:                                "---",                       null,
 81250:                                "context-viewframeinfo",     true], null].concat(inspectItems));
 81250:         closeContextMenu();
 80481:         openContextMenuFor(textarea, false, true); // Invoke context menu for next test, but wait for the spellcheck.
 78649:         break;
 78649: 
 95812:     case 15:
 43053:         // Context menu for textarea
 43053:         checkContextMenu(["*chubbiness",         true, // spelling suggestion
 43053:                           "spell-add-to-dictionary", true,
 43053:                           "---",                 null,
 43053:                           "context-undo",        false,
 43053:                           "---",                 null,
 43053:                           "context-cut",         false,
 43053:                           "context-copy",        false,
 43053:                           "context-paste",       null, // ignore clipboard state
 43053:                           "context-delete",      false,
 43053:                           "---",                 null,
 43053:                           "context-selectall",   true,
 43053:                           "---",                 null,
 43053:                           "spell-check-enabled", true,
 43053:                           "spell-dictionaries",  true,
 43053:                               ["spell-check-dictionary-en-US", true,
 43053:                                "---",                          null,
 86833:                                "spell-add-dictionaries",       true], null
 80934:                          ].concat(inspectItems));
 86336:         contextMenu.ownerDocument.getElementById("spell-add-to-dictionary").doCommand(); // Add to dictionary
 43053:         closeContextMenu();
 89685:         openContextMenuFor(text); // Invoke context menu for next test.
 89685:         break;
 89685: 
 95812:     case 16:
 89685:         // Re-check context menu for plain text to make sure it hasn't changed
 89685:         checkContextMenu(plainTextItems);
 89685:         closeContextMenu();
 86336:         openContextMenuFor(textarea, false, true); // Invoke context menu for next test.
 43053:         break;
 43053: 
 95812:     case 17:
 86336:         // Context menu for textarea after a word has been added
 86336:         // to the dictionary
 86336:         checkContextMenu(["spell-undo-add-to-dictionary", true,
 89685:                           "---",                 null,
 86336:                           "context-undo",        false,
 86336:                           "---",                 null,
 86336:                           "context-cut",         false,
 86336:                           "context-copy",        false,
 86336:                           "context-paste",       null, // ignore clipboard state
 86336:                           "context-delete",      false,
 86336:                           "---",                 null,
 86336:                           "context-selectall",   true,
 86336:                           "---",                 null,
 86336:                           "spell-check-enabled", true,
 86336:                           "spell-dictionaries",  true,
 86336:                               ["spell-check-dictionary-en-US", true,
 86336:                                "---",                          null,
 86833:                                "spell-add-dictionaries",       true], null
 86336:                          ].concat(inspectItems));
 86336:         contextMenu.ownerDocument.getElementById("spell-undo-add-to-dictionary").doCommand(); // Undo add to dictionary
 86336:         closeContextMenu();
 86336:         openContextMenuFor(contenteditable);
 86336:         break;
 86336: 
 95812:     case 18:
 43053:         // Context menu for contenteditable
 43053:         checkContextMenu(["spell-no-suggestions", false,
 43053:                           "spell-add-to-dictionary", true,
 43053:                           "---",                 null,
 43053:                           "context-undo",        false,
 43053:                           "---",                 null,
 43053:                           "context-cut",         false,
 43053:                           "context-copy",        false,
 43053:                           "context-paste",       null, // ignore clipboard state
 43053:                           "context-delete",      false,
 43053:                           "---",                 null,
 43053:                           "context-selectall",   true,
 43053:                           "---",                 null,
 43053:                           "spell-check-enabled", true,
 43053:                           "spell-dictionaries",  true,
 43053:                               ["spell-check-dictionary-en-US", true,
 43053:                                "---",                          null,
 80934:                                "spell-add-dictionaries",       true], null
 80934:                          ].concat(inspectItems));
 43053: 
 43053:         closeContextMenu();
 43053:         openContextMenuFor(inputspell); // Invoke context menu for next test.
 43053:         break;
 43053: 
 95812:     case 19:
 43053:         // Context menu for spell-check input
 43053:         checkContextMenu(["*prodigality",        true, // spelling suggestion
 43053:                           "spell-add-to-dictionary", true,
 43053:                           "---",                 null,
 43053:                           "context-undo",        false,
 43053:                           "---",                 null,
 43053:                           "context-cut",         false,
 43053:                           "context-copy",        false,
 43053:                           "context-paste",       null, // ignore clipboard state
 43053:                           "context-delete",      false,
 43053:                           "---",                 null,
 43053:                           "context-selectall",   true,
 43053:                           "---",                 null,
 43053:                           "spell-check-enabled", true,
 43053:                           "spell-dictionaries",  true,
 43053:                               ["spell-check-dictionary-en-US", true,
 43053:                                "---",                          null,
 80934:                                "spell-add-dictionaries",       true], null
 80934:                          ].concat(inspectItems));
 43053: 
 43053:         closeContextMenu();
 49309:         openContextMenuFor(link); // Invoke context menu for next test.
 49309:         break;
 49309: 
 95812:     case 20:
 49309:         executeCopyCommand("cmd_copyLink", "http://mozilla.com/");
 49309:         closeContextMenu();
 75019:         openContextMenuFor(pagemenu); // Invoke context menu for next test.
 75019:         break;
 75019: 
 95812:     case 21:
 75019:         // Context menu for element with assigned content context menu
 75019:         checkContextMenu(["+Plain item",          {type: "", icon: "", checked: false, disabled: false},
 75019:                           "+Disabled item",       {type: "", icon: "", checked: false, disabled: true},
 75220:                           "+Item w/ textContent", {type: "", icon: "", checked: false, disabled: false},
 75019:                           "---",                  null,
 75019:                           "+Checkbox",            {type: "checkbox", icon: "", checked: true, disabled: false},
 75019:                           "---",                  null,
 75019:                           "+Radio1",              {type: "checkbox", icon: "", checked: true, disabled: false},
 75019:                           "+Radio2",              {type: "checkbox", icon: "", checked: false, disabled: false},
 75019:                           "+Radio3",              {type: "checkbox", icon: "", checked: false, disabled: false},
 75019:                           "---",                  null,
 75019:                           "+Item w/ icon",        {type: "", icon: "favicon.ico", checked: false, disabled: false},
 75019:                           "+Item w/ bad icon",    {type: "", icon: "", checked: false, disabled: false},
 75019:                           "---",                  null,
 75019:                           "generated-submenu-1",  true,
 75019:                               ["+Radio1",             {type: "checkbox", icon: "", checked: false, disabled: false},
 75019:                                "+Radio2",             {type: "checkbox", icon: "", checked: true, disabled: false},
 75019:                                "+Radio3",             {type: "checkbox", icon: "", checked: false, disabled: false},
 75019:                                "---",                 null,
 75019:                                "+Checkbox",           {type: "checkbox", icon: "", checked: false, disabled: false}], null,
 75019:                           "---",                  null,
 75019:                           "context-back",         false,
 75019:                           "context-forward",      false,
 75019:                           "context-reload",       true,
 75019:                           "---",                  null,
 75019:                           "context-bookmarkpage", true,
 75019:                           "context-savepage",     true,
 75019:                           "---",                  null,
 75019:                           "context-viewbgimage",  false,
 75019:                           "context-selectall",    true,
 75019:                           "---",                  null,
 75019:                           "context-viewsource",   true,
 80934:                           "context-viewinfo",     true
 80934:                          ].concat(inspectItems));
 75019: 
 75019:         invokeItemAction("0");
 75019:         closeContextMenu();
 99570: 
 99570:         // run mozRequestFullScreen on the element we're testing
 99570:         var full_screen_element = subwindow.document.getElementById("test-dom-full-screen");
 99570:         var openDomFullScreen = function() {
 99570:             subwindow.removeEventListener("mozfullscreenchange", openDomFullScreen, false);
 99570:             SpecialPowers.clearUserPref("full-screen-api.allow-trusted-requests-only");
 99570:             openContextMenuFor(dom_full_screen, true); // Invoke context menu for next test.
 99570:         }
 99570:         subwindow.addEventListener("mozfullscreenchange", openDomFullScreen, false);
 99570:         SpecialPowers.setBoolPref("full-screen-api.allow-trusted-requests-only", false);
 99570:         full_screen_element.mozRequestFullScreen();
 75019:         break;
 75019: 
 95812:         case 22:
 99570:         // Context menu for DOM Fullscreen mode (NOTE: this is *NOT* on an img)
 99570:         checkContextMenu(["context-leave-dom-fullscreen", true,
 99570:                           "---",                          null,
 99570:                           "context-back",                 false,
 99570:                           "context-forward",              false,
 99570:                           "context-reload",               true,
 99570:                           "---",                          null,
 99570:                           "context-bookmarkpage",         true,
 99570:                           "context-savepage",             true,
 99570:                           "---",                          null,
 99570:                           "context-viewbgimage",          false,
 99570:                           "context-selectall",            true,
 99570:                           "---",                          null,
 99570:                           "context-viewsource",           true,
 99570:                           "context-viewinfo",             true
 99570:                          ].concat(inspectItems));
 99570:         closeContextMenu();
 99570:         var full_screen_element = subwindow.document.getElementById("test-dom-full-screen");
 99570:         var openPagemenu = function() {
 99570:             subwindow.removeEventListener("mozfullscreenchange", openPagemenu, false);
 99570:             SpecialPowers.clearUserPref("full-screen-api.allow-trusted-requests-only");
 99570:             openContextMenuFor(pagemenu, true); // Invoke context menu for next test.
 99570:         }
 99570:         subwindow.addEventListener("mozfullscreenchange", openPagemenu, false);
 99570:         SpecialPowers.setBoolPref("full-screen-api.allow-trusted-requests-only", false);
 99570:         subwindow.document.mozCancelFullScreen();
 99570:         break;
 99570: 
 99570:     case 23:
 75019:         // Context menu for element with assigned content context menu
 75019:         // The shift key should bypass content context menu processing
 75019:         checkContextMenu(["context-back",         false,
 75019:                           "context-forward",      false,
 75019:                           "context-reload",       true,
 75019:                           "---",                  null,
 75019:                           "context-bookmarkpage", true,
 75019:                           "context-savepage",     true,
 75019:                           "---",                  null,
 75019:                           "context-viewbgimage",  false,
 75019:                           "context-selectall",    true,
 75019:                           "---",                  null,
 75019:                           "context-viewsource",   true,
 80934:                           "context-viewinfo",     true
 80934:                          ].concat(inspectItems));
 86833:         closeContextMenu();
 93336:         selectText(selecttext); // Select text prior to opening context menu.
 93336:         openContextMenuFor(selecttext); // Invoke context menu for next test.
 93336:         return;
 93336: 
 99570:     case 24:
 93336:         // Context menu for selected text
107892:         if (SpecialPowers.Services.appinfo.OS == "Darwin") {
 93336:           // This test is only enabled on Mac due to bug 736399.
 93336:           checkContextMenu(["context-copy",                        true,
 93336:                             "context-selectall",                   true,
 93336:                             "---",                                 null,
 93336:                             "context-searchselect",                true,
 93336:                             "context-viewpartialsource-selection", true
 93336:                            ].concat(inspectItems));
 93336:         }
 93336:         closeContextMenu();
 93336:         selectText(selecttextlink); // Select text prior to opening context menu.
 93336:         openContextMenuFor(selecttextlink); // Invoke context menu for next test.
 93336:         return;
 93336: 
 99570:     case 25:
 93336:         // Context menu for selected text which matches valid URL pattern
107892:         if (SpecialPowers.Services.appinfo.OS == "Darwin") {
 93336:           // This test is only enabled on Mac due to bug 736399.
124459:           if (perWindowPrivateBrowsing) {
124459:             checkContextMenu(["context-openlinkincurrent",           true,
124459:                               "context-openlinkintab",               true,
124459:                               "context-openlink",                    true,
124459:                               "context-openlinkprivate",             true,
124459:                               "---",                                 null,
124459:                               "context-bookmarklink",                true,
124459:                               "context-savelink",                    true,
124459:                               "context-copy",                        true,
124459:                               "context-selectall",                   true,
124459:                               "---",                                 null,
124459:                               "context-searchselect",                true,
124459:                               "context-viewpartialsource-selection", true
124459:                              ].concat(inspectItems));
124459:           } else {
 93336:             checkContextMenu(["context-openlinkincurrent",           true,
 93336:                               "context-openlinkintab",               true,
 93336:                               "context-openlink",                    true,
 93336:                               "---",                                 null,
 93336:                               "context-bookmarklink",                true,
 93336:                               "context-savelink",                    true,
 93336:                               "context-copy",                        true,
 93336:                               "context-selectall",                   true,
 93336:                               "---",                                 null,
 93336:                               "context-searchselect",                true,
 93336:                               "context-viewpartialsource-selection", true
 93336:                              ].concat(inspectItems));
 93336:           }
124459:         }
 93336:         closeContextMenu();
114301:         // clear the selection because following tests don't expect any selection
114301:         subwindow.getSelection().removeAllRanges();
114301: 
114301:         openContextMenuFor(imagelink)
114301:         break;
114301: 
114301:     case 26:
114301:         // Context menu for image link
124459:         if (perWindowPrivateBrowsing) {
124459:           checkContextMenu(["context-openlinkintab", true,
124459:                             "context-openlink",      true,
124459:                             "context-openlinkprivate", true,
124459:                             "---",                   null,
124459:                             "context-bookmarklink",  true,
124459:                             "context-savelink",      true,
124459:                             "context-copylink",      true,
124459:                             "---",                   null,
124459:                             "context-viewimage",            true,
124459:                             "context-copyimage-contents",   true,
124459:                             "context-copyimage",            true,
124459:                             "---",                          null,
124459:                             "context-saveimage",            true,
124459:                             "context-sendimage",            true,
124459:                             "context-setDesktopBackground", true,
124459:                             "context-viewimageinfo",        true
124459:                            ].concat(inspectItems));
124459:         } else {
114301:           checkContextMenu(["context-openlinkintab", true,
114301:                             "context-openlink",      true,
114301:                             "---",                   null,
114301:                             "context-bookmarklink",  true,
114301:                             "context-savelink",      true,
114301:                             "context-copylink",      true,
114301:                             "---",                   null,
114301:                             "context-viewimage",            true,
114301:                             "context-copyimage-contents",   true,
114301:                             "context-copyimage",            true,
114301:                             "---",                          null,
114301:                             "context-saveimage",            true,
114301:                             "context-sendimage",            true,
114301:                             "context-setDesktopBackground", true,
114301:                             "context-viewimageinfo",        true
114301:                            ].concat(inspectItems));
124459:         }
114301:         closeContextMenu();
118346:         selectInputText(select_inputtext); // Select text prior to opening context menu.
118346:         openContextMenuFor(select_inputtext); // Invoke context menu for next test.
118346:         return;
 49309: 
118346:     case 27:
118346:         // Context menu for selected text in input
118346:         checkContextMenu(["context-undo",        false,
118346:                           "---",                 null,
118346:                           "context-cut",         true,
118346:                           "context-copy",        true,
118346:                           "context-paste",       null, // ignore clipboard state
118346:                           "context-delete",      true,
118346:                           "---",                 null,
118346:                           "context-selectall",   true,
118346:                           "context-searchselect",true,
118346:                           "---",                 null,
118346:                           "spell-check-enabled", true
118346:                          ].concat(inspectItems));
118346:         closeContextMenu();
118346:         selectInputText(select_inputtext_password); // Select text prior to opening context menu.
118346:         openContextMenuFor(select_inputtext_password); // Invoke context menu for next test.
118346:         return;
118346: 
118346:     case 28:
118346:         // Context menu for selected text in input[type="password"]
118346:         checkContextMenu(["context-undo",        false,
118346:                           "---",                 null,
118346:                           "context-cut",         true,
118346:                           "context-copy",        true,
118346:                           "context-paste",       null, // ignore clipboard state
118346:                           "context-delete",      true,
118346:                           "---",                 null,
118346:                           "context-selectall",   true,
118346:                           "---",                 null,
118346:                           "spell-check-enabled", true,
118346:                           //spell checker is shown on input[type="password"] on this testcase
118346:                           "spell-dictionaries",  true,
118346:                               ["spell-check-dictionary-en-US", true,
118346:                                "---",                          null,
118346:                                "spell-add-dictionaries",       true], null
118346:                          ].concat(inspectItems));
118346:         closeContextMenu();
129894:         subwindow.getSelection().removeAllRanges();
129894:         openContextMenuFor(plugin);
129894:         return;
129894: 
129894:     case 29:
129894:         // Context menu for click-to-play blocked plugin
129894:         checkContextMenu(["context-ctp-play",     true,
129894:                           "context-ctp-hide",     true,
129894:                           "---",                  null,
129894:                           "context-back",         false,
129894:                           "context-forward",      false,
129894:                           "context-reload",       true,
129894:                           "---",                  null,
129894:                           "context-bookmarkpage", true,
129894:                           "context-savepage",     true,
129894:                           "---",                  null,
129894:                           "context-viewbgimage",  false,
129894:                           "context-selectall",    true,
129894:                           "---",                  null,
129894:                           "context-viewsource",   true,
129894:                           "context-viewinfo",     true
129894:                          ].concat(inspectItems));
129894:         closeContextMenu();
129894:         SpecialPowers.clearUserPref("plugins.click_to_play");
118346: 
118346:         // finish test
 20775:         subwindow.close();
 20775:         SimpleTest.finish();
 20775:         return;
 20775: 
 20775:     /*
 20775:      * Other things that would be nice to test:
 20775:      *  - spelling / misspelled word (in text input?)
 20775:      *  - check state of disabled items
 20775:      *  - test execution of menu items (maybe as a separate test?)
 20775:      */
 20775: 
 20775:     default:
 29403:         ok(false, "Unexpected invocation of test #" + testNum);
 20775:         subwindow.close();
 20775:         SimpleTest.finish();
 20775:         return;
 20775:   }
 20775: 
 20775: }
 20775: 
 20775: 
 20775: var testNum = 1;
 78511: var subwindow, chromeWin, contextMenu, lastElement;
 52013: var text, link, mailto, input, img, canvas, video_ok, video_bad, video_bad2,
 95812:     iframe, video_in_iframe, image_in_iframe, textarea, contenteditable,
114301:     inputspell, pagemenu, dom_full_screen, plainTextItems, audio_in_video,
129894:     selecttext, selecttextlink, imagelink, select_inputtext, select_inputtext_password,
129894:     plugin;
 20775: 
 20775: function startTest() {
107892:     chromeWin = SpecialPowers.wrap(subwindow)
 20775:                     .QueryInterface(Ci.nsIInterfaceRequestor)
 20775:                     .getInterface(Ci.nsIWebNavigation)
 20775:                     .QueryInterface(Ci.nsIDocShellTreeItem)
 20775:                     .rootTreeItem
 20775:                     .QueryInterface(Ci.nsIInterfaceRequestor)
 20775:                     .getInterface(Ci.nsIDOMWindow)
 20775:                     .QueryInterface(Ci.nsIDOMChromeWindow);
 20775:     contextMenu = chromeWin.document.getElementById("contentAreaContextMenu");
 20775:     ok(contextMenu, "Got context menu XUL");
 20775: 
 52061:     if (chromeWin.document.getElementById("Browser:Stop").getAttribute("disabled") != "true") {
 86833:       todo(false, "Wait for subwindow to load... (This should usually happen once.)");
 52061:       SimpleTest.executeSoon(startTest);
 52061:       return;
 52061:     }
 52061: 
134176:     subwindow.allowFullscreen = true;
 78511:     lastElement = null;
 78511: 
 20775:     text   = subwindow.document.getElementById("test-text");
 20775:     link   = subwindow.document.getElementById("test-link");
114301:     imagelink = subwindow.document.getElementById("test-image-link");
 20775:     mailto = subwindow.document.getElementById("test-mailto");
 20775:     input  = subwindow.document.getElementById("test-input");
 20775:     img    = subwindow.document.getElementById("test-image");
 20775:     canvas = subwindow.document.getElementById("test-canvas");
 30138:     video_ok   = subwindow.document.getElementById("test-video-ok");
 95812:     audio_in_video = subwindow.document.getElementById("test-audio-in-video");
 30138:     video_bad  = subwindow.document.getElementById("test-video-bad");
 30138:     video_bad2 = subwindow.document.getElementById("test-video-bad2");
 20775:     iframe = subwindow.document.getElementById("test-iframe");
 81250:     video_in_iframe = subwindow.document.getElementById("test-video-in-iframe").contentDocument.getElementsByTagName("video")[0];
 81250:     video_in_iframe.pause();
 81250:     image_in_iframe = subwindow.document.getElementById("test-image-in-iframe").contentDocument.getElementsByTagName("img")[0];
 43053:     textarea = subwindow.document.getElementById("test-textarea");
 43053:     contenteditable = subwindow.document.getElementById("test-contenteditable");
 75374:     contenteditable.focus(); // content editable needs to be focused to enable spellcheck
 43053:     inputspell = subwindow.document.getElementById("test-input-spellcheck");
 75019:     pagemenu = subwindow.document.getElementById("test-pagemenu");
 99570:     dom_full_screen = subwindow.document.getElementById("test-dom-full-screen");
 93336:     selecttext = subwindow.document.getElementById("test-select-text");
 93336:     selecttextlink = subwindow.document.getElementById("test-select-text-link");
118346:     select_inputtext = subwindow.document.getElementById("test-select-input-text");
118346:     select_inputtext_password = subwindow.document.getElementById("test-select-input-text-type-password");
129894:     plugin = subwindow.document.getElementById("test-plugin");
 20775: 
 20775:     contextMenu.addEventListener("popupshown", function() { runTest(++testNum); }, false);
 20775:     runTest(1);
 20775: }
 20775: 
 20775: // We open this in a separate window, because the Mochitests run inside a frame.
 20775: // The frame causes an extra menu item, and prevents running the test
 20775: // standalone (ie, clicking the test name in the Mochitest window) to see
 20775: // success/failure messages.
 31387: var painted = false, loaded = false;
 31387: 
 31387: function waitForEvents(event)
 31387: {
 31387:   if (event.type == "MozAfterPaint")
 31387:     painted = true;
 31387:   else if (event.type == "load")
 31387:     loaded = true;
 31387:   if (painted && loaded) {
 31387:     subwindow.removeEventListener("MozAfterPaint", waitForEvents, false);
 31387:     subwindow.onload = null;
 31387:     startTest();
 31387:   }
 31387: }
 31387: 
136271: const isOSXMtnLion = navigator.userAgent.indexOf("Mac OS X 10.8") != -1;
136271: 
136271: if (isOSXMtnLion) {
136271:   todo(false, "Mountain Lion doesn't like this test (bug 792304)");
136271: } else {
129894:   SpecialPowers.setBoolPref("plugins.click_to_play", true);
129894: 
114301:   var subwindow = window.open("./subtst_contextmenu.html", "contextmenu-subtext", "width=600,height=800");
 31387:   subwindow.addEventListener("MozAfterPaint", waitForEvents, false);
 31387:   subwindow.onload = waitForEvents;
 20775: 
 20797:   SimpleTest.waitForExplicitFinish();
136271: }
 20775: </script>
 20775: </pre>
 20775: </body>
 20775: </html>
