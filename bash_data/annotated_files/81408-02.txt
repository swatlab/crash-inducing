51215: /* vim:set tw=80 expandtab softtabstop=4 ts=4 sw=4: */
51215: /* ***** BEGIN LICENSE BLOCK *****
51215:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
51215:  *
51215:  * The contents of this file are subject to the Mozilla Public License Version
51215:  * 1.1 (the "License"); you may not use this file except in compliance with
51215:  * the License. You may obtain a copy of the License at
51215:  * http://www.mozilla.org/MPL/
51215:  *
51215:  * Software distributed under the License is distributed on an "AS IS" basis,
51215:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
51215:  * for the specific language governing rights and limitations under the
51215:  * License.
51215:  *
51215:  * The Original Code is the Mozilla ICO Decoder.
51215:  *
51215:  * The Initial Developer of the Original Code is
51215:  * Netscape.
51215:  * Portions created by the Initial Developer are Copyright (C) 2001
51215:  * the Initial Developer. All Rights Reserved.
51215:  *
51215:  * Contributor(s):
51215:  *   David Hyatt <hyatt@netscape.com> (Original Author)
51215:  *   Bobby Holley <bobbyholley@gmail.com>
77228:  *   Brian R. Bondy <netzen@gmail.com>
51215:  *
51215:  * Alternatively, the contents of this file may be used under the terms of
51215:  * either the GNU General Public License Version 2 or later (the "GPL"), or
51215:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
51215:  * in which case the provisions of the GPL or the LGPL are applicable instead
51215:  * of those above. If you wish to allow use of your version of this file only
51215:  * under the terms of either the GPL or the LGPL, and not to allow others to
51215:  * use your version of this file under the terms of the MPL, indicate your
51215:  * decision by deleting the provisions above and replace them with the notice
51215:  * and other provisions required by the GPL or the LGPL. If you do not delete
51215:  * the provisions above, a recipient may use your version of this file under
51215:  * the terms of any one of the MPL, the GPL or the LGPL.
51215:  *
51215:  * ***** END LICENSE BLOCK ***** */
51215: 
51215: 
51215: #ifndef _nsICODecoder_h
51215: #define _nsICODecoder_h
51215: 
51215: #include "nsAutoPtr.h"
51241: #include "Decoder.h"
51215: #include "imgIDecoderObserver.h"
51215: #include "nsBMPDecoder.h"
77228: #include "nsPNGDecoder.h"
77232: #include "ICOFileHeaders.h"
51215: 
51215: namespace mozilla {
51215: namespace imagelib {
51241: 
51215: class RasterImage;
51215: 
51241: class nsICODecoder : public Decoder
51215: {
51215: public:
51215: 
80695:   nsICODecoder(RasterImage &aImage, imgIDecoderObserver* aObserver);
51215:   virtual ~nsICODecoder();
51215: 
78636:   // Obtains the width of the icon directory entry
78636:   PRUint32 GetRealWidth() const
78636:   {
78636:     return mDirEntry.mWidth == 0 ? 256 : mDirEntry.mWidth; 
78636:   }
78636: 
78636:   // Obtains the height of the icon directory entry
78636:   PRUint32 GetRealHeight() const
78636:   {
78636:     return mDirEntry.mHeight == 0 ? 256 : mDirEntry.mHeight; 
78636:   }
78636: 
53664:   virtual void WriteInternal(const char* aBuffer, PRUint32 aCount);
53664:   virtual void FinishInternal();
51241: 
51215: private:
77228:   // Processes a single dir entry of the icon resource
51215:   void ProcessDirEntry(IconDirEntry& aTarget);
77228:   // Sets the hotspot property of if we have a cursor
77228:   void SetHotSpotIfCursor();
80486:   // Creates a bitmap file header buffer, returns true if successful
79445:   bool FillBitmapFileHeaderBuffer(PRInt8 *bfh);
81408:   // Fixes the ICO height to match that of the BIH.
81408:   // and also fixes the BIH height to be /2 of what it was.
81408:   // See definition for explanation.
81408:   // Returns false if invalid information is contained within.
81408:   bool FixBitmapHeight(PRInt8 *bih);
81408:   // Fixes the ICO width to match that of the BIH.
81408:   // Returns false if invalid information is contained within.
81408:   bool FixBitmapWidth(PRInt8 *bih);
77519:   // Extract bitmap info header size count from BMP information header
77519:   PRInt32 ExtractBIHSizeFromBitmap(PRInt8 *bih);
77228:   // Extract bit count from BMP information header
77228:   PRInt32 ExtractBPPFromBitmap(PRInt8 *bih);
77228:   // Calculates the row size in bytes for the AND mask table
77228:   PRUint32 CalcAlphaRowSize();
77228:   // Obtains the number of colors from the BPP, mBPP must be filled in
77228:   PRUint16 GetNumColors();
51215: 
77228:   PRUint16 mBPP; // Stores the images BPP
77228:   PRUint32 mPos; // Keeps track of the position we have decoded up until
77228:   PRUint16 mNumIcons; // Stores the number of icons in the ICO file
77228:   PRUint16 mCurrIcon; // Stores the current dir entry index we are processing
77228:   PRUint32 mImageOffset; // Stores the offset of the image data we want
77228:   PRUint8 *mRow;      // Holds one raw line of the image
77228:   PRInt32 mCurLine;   // Line index of the image that's currently being decoded
77228:   PRUint32 mRowBytes; // How many bytes of the row were already received
77228:   PRInt32 mOldLine;   // Previous index of the line 
77228:   nsAutoPtr<Decoder> mContainedDecoder; // Contains either a BMP or PNG resource
51215: 
77228:   char mDirEntryArray[ICODIRENTRYSIZE]; // Holds the current dir entry buffer
77228:   IconDirEntry mDirEntry; // Holds a decoded dir entry
77228:   // Holds the potential bytes that can be a PNG signature
77228:   char mSignature[PNGSIGNATURESIZE]; 
77228:   // Holds the potential bytes for a bitmap information header
51215:   char mBIHraw[40];
77228:   // Stores whether or not the icon file we are processing has type 1 (icon)
79445:   bool mIsCursor;
77228:   // Stores whether or not the contained resource is a PNG
79445:   bool mIsPNG;
51215: };
51215: 
51241: } // namespace imagelib
51241: } // namespace mozilla
51215: 
51215: #endif
