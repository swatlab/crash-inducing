16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:  function: *unnormalized* fft transform
31034:  last mod: $Id: smallft.c 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: /* FFT implementation from OggSquish, minus cosine transforms,
16295:  * minus all but radix 2/4 case.  In Vorbis we only need this
16295:  * cut-down version.
16295:  *
16295:  * To do more than just power-of-two sized vectors, see the full
16295:  * version I wrote for NetLib.
16295:  *
16295:  * Note that the packing is a little strange; rather than the FFT r/i
16295:  * packing following R_0, I_n, R_1, I_1, R_2, I_2 ... R_n-1, I_n-1,
16295:  * it follows R_0, R_1, I_1, R_2, I_2 ... R_n-1, I_n-1, I_n like the
16295:  * FORTRAN version
16295:  */
16295: 
16295: #include <stdlib.h>
16295: #include <string.h>
16295: #include <math.h>
16295: #include "smallft.h"
16295: #include "os.h"
16295: #include "misc.h"
16295: 
16295: static void drfti1(int n, float *wa, int *ifac){
16295:   static int ntryh[4] = { 4,2,3,5 };
16295:   static float tpi = 6.28318530717958648f;
16295:   float arg,argh,argld,fi;
16295:   int ntry=0,i,j=-1;
16295:   int k1, l1, l2, ib;
16295:   int ld, ii, ip, is, nq, nr;
16295:   int ido, ipm, nfm1;
16295:   int nl=n;
16295:   int nf=0;
16295: 
16295:  L101:
16295:   j++;
16295:   if (j < 4)
16295:     ntry=ntryh[j];
16295:   else
16295:     ntry+=2;
16295: 
16295:  L104:
16295:   nq=nl/ntry;
16295:   nr=nl-ntry*nq;
16295:   if (nr!=0) goto L101;
16295: 
16295:   nf++;
16295:   ifac[nf+1]=ntry;
16295:   nl=nq;
16295:   if(ntry!=2)goto L107;
16295:   if(nf==1)goto L107;
16295: 
16295:   for (i=1;i<nf;i++){
16295:     ib=nf-i+1;
16295:     ifac[ib+1]=ifac[ib];
16295:   }
16295:   ifac[2] = 2;
16295: 
16295:  L107:
16295:   if(nl!=1)goto L104;
16295:   ifac[0]=n;
16295:   ifac[1]=nf;
16295:   argh=tpi/n;
16295:   is=0;
16295:   nfm1=nf-1;
16295:   l1=1;
16295: 
16295:   if(nfm1==0)return;
16295: 
16295:   for (k1=0;k1<nfm1;k1++){
16295:     ip=ifac[k1+2];
16295:     ld=0;
16295:     l2=l1*ip;
16295:     ido=n/l2;
16295:     ipm=ip-1;
16295: 
16295:     for (j=0;j<ipm;j++){
16295:       ld+=l1;
16295:       i=is;
16295:       argld=(float)ld*argh;
16295:       fi=0.f;
16295:       for (ii=2;ii<ido;ii+=2){
16295:         fi+=1.f;
16295:         arg=fi*argld;
16295:         wa[i++]=cos(arg);
16295:         wa[i++]=sin(arg);
16295:       }
16295:       is+=ido;
16295:     }
16295:     l1=l2;
16295:   }
16295: }
16295: 
16295: static void fdrffti(int n, float *wsave, int *ifac){
16295: 
16295:   if (n == 1) return;
16295:   drfti1(n, wsave+n, ifac);
16295: }
16295: 
16295: static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
16295:   int i,k;
16295:   float ti2,tr2;
16295:   int t0,t1,t2,t3,t4,t5,t6;
16295: 
16295:   t1=0;
16295:   t0=(t2=l1*ido);
16295:   t3=ido<<1;
16295:   for(k=0;k<l1;k++){
16295:     ch[t1<<1]=cc[t1]+cc[t2];
16295:     ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
16295:     t1+=ido;
16295:     t2+=ido;
16295:   }
16295: 
16295:   if(ido<2)return;
16295:   if(ido==2)goto L105;
16295: 
16295:   t1=0;
16295:   t2=t0;
16295:   for(k=0;k<l1;k++){
16295:     t3=t2;
16295:     t4=(t1<<1)+(ido<<1);
16295:     t5=t1;
16295:     t6=t1+t1;
16295:     for(i=2;i<ido;i+=2){
16295:       t3+=2;
16295:       t4-=2;
16295:       t5+=2;
16295:       t6+=2;
16295:       tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
16295:       ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
16295:       ch[t6]=cc[t5]+ti2;
16295:       ch[t4]=ti2-cc[t5];
16295:       ch[t6-1]=cc[t5-1]+tr2;
16295:       ch[t4-1]=cc[t5-1]-tr2;
16295:     }
16295:     t1+=ido;
16295:     t2+=ido;
16295:   }
16295: 
16295:   if(ido%2==1)return;
16295: 
16295:  L105:
16295:   t3=(t2=(t1=ido)-1);
16295:   t2+=t0;
16295:   for(k=0;k<l1;k++){
16295:     ch[t1]=-cc[t2];
16295:     ch[t1-1]=cc[t3];
16295:     t1+=ido<<1;
16295:     t2+=ido;
16295:     t3+=ido;
16295:   }
16295: }
16295: 
16295: static void dradf4(int ido,int l1,float *cc,float *ch,float *wa1,
16295:             float *wa2,float *wa3){
16295:   static float hsqt2 = .70710678118654752f;
16295:   int i,k,t0,t1,t2,t3,t4,t5,t6;
16295:   float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
16295:   t0=l1*ido;
16295: 
16295:   t1=t0;
16295:   t4=t1<<1;
16295:   t2=t1+(t1<<1);
16295:   t3=0;
16295: 
16295:   for(k=0;k<l1;k++){
16295:     tr1=cc[t1]+cc[t2];
16295:     tr2=cc[t3]+cc[t4];
16295: 
16295:     ch[t5=t3<<2]=tr1+tr2;
16295:     ch[(ido<<2)+t5-1]=tr2-tr1;
16295:     ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
16295:     ch[t5]=cc[t2]-cc[t1];
16295: 
16295:     t1+=ido;
16295:     t2+=ido;
16295:     t3+=ido;
16295:     t4+=ido;
16295:   }
16295: 
16295:   if(ido<2)return;
16295:   if(ido==2)goto L105;
16295: 
16295: 
16295:   t1=0;
16295:   for(k=0;k<l1;k++){
16295:     t2=t1;
16295:     t4=t1<<2;
16295:     t5=(t6=ido<<1)+t4;
16295:     for(i=2;i<ido;i+=2){
16295:       t3=(t2+=2);
16295:       t4+=2;
16295:       t5-=2;
16295: 
16295:       t3+=t0;
16295:       cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
16295:       ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
16295:       t3+=t0;
16295:       cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
16295:       ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
16295:       t3+=t0;
16295:       cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
16295:       ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];
16295: 
16295:       tr1=cr2+cr4;
16295:       tr4=cr4-cr2;
16295:       ti1=ci2+ci4;
16295:       ti4=ci2-ci4;
16295: 
16295:       ti2=cc[t2]+ci3;
16295:       ti3=cc[t2]-ci3;
16295:       tr2=cc[t2-1]+cr3;
16295:       tr3=cc[t2-1]-cr3;
16295: 
16295:       ch[t4-1]=tr1+tr2;
16295:       ch[t4]=ti1+ti2;
16295: 
16295:       ch[t5-1]=tr3-ti4;
16295:       ch[t5]=tr4-ti3;
16295: 
16295:       ch[t4+t6-1]=ti4+tr3;
16295:       ch[t4+t6]=tr4+ti3;
16295: 
16295:       ch[t5+t6-1]=tr2-tr1;
16295:       ch[t5+t6]=ti1-ti2;
16295:     }
16295:     t1+=ido;
16295:   }
16295:   if(ido&1)return;
16295: 
16295:  L105:
16295: 
16295:   t2=(t1=t0+ido-1)+(t0<<1);
16295:   t3=ido<<2;
16295:   t4=ido;
16295:   t5=ido<<1;
16295:   t6=ido;
16295: 
16295:   for(k=0;k<l1;k++){
16295:     ti1=-hsqt2*(cc[t1]+cc[t2]);
16295:     tr1=hsqt2*(cc[t1]-cc[t2]);
16295: 
16295:     ch[t4-1]=tr1+cc[t6-1];
16295:     ch[t4+t5-1]=cc[t6-1]-tr1;
16295: 
16295:     ch[t4]=ti1-cc[t1+t0];
16295:     ch[t4+t5]=ti1+cc[t1+t0];
16295: 
16295:     t1+=ido;
16295:     t2+=ido;
16295:     t4+=t3;
16295:     t6+=ido;
16295:   }
16295: }
16295: 
16295: static void dradfg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
16295:                           float *c2,float *ch,float *ch2,float *wa){
16295: 
16295:   static float tpi=6.283185307179586f;
16295:   int idij,ipph,i,j,k,l,ic,ik,is;
16295:   int t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10;
16295:   float dc2,ai1,ai2,ar1,ar2,ds2;
16295:   int nbd;
16295:   float dcp,arg,dsp,ar1h,ar2h;
16295:   int idp2,ipp2;
16295: 
16295:   arg=tpi/(float)ip;
16295:   dcp=cos(arg);
16295:   dsp=sin(arg);
16295:   ipph=(ip+1)>>1;
16295:   ipp2=ip;
16295:   idp2=ido;
16295:   nbd=(ido-1)>>1;
16295:   t0=l1*ido;
16295:   t10=ip*ido;
16295: 
16295:   if(ido==1)goto L119;
16295:   for(ik=0;ik<idl1;ik++)ch2[ik]=c2[ik];
16295: 
16295:   t1=0;
16295:   for(j=1;j<ip;j++){
16295:     t1+=t0;
16295:     t2=t1;
16295:     for(k=0;k<l1;k++){
16295:       ch[t2]=c1[t2];
16295:       t2+=ido;
16295:     }
16295:   }
16295: 
16295:   is=-ido;
16295:   t1=0;
16295:   if(nbd>l1){
16295:     for(j=1;j<ip;j++){
16295:       t1+=t0;
16295:       is+=ido;
16295:       t2= -ido+t1;
16295:       for(k=0;k<l1;k++){
16295:         idij=is-1;
16295:         t2+=ido;
16295:         t3=t2;
16295:         for(i=2;i<ido;i+=2){
16295:           idij+=2;
16295:           t3+=2;
16295:           ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
16295:           ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
16295:         }
16295:       }
16295:     }
16295:   }else{
16295: 
16295:     for(j=1;j<ip;j++){
16295:       is+=ido;
16295:       idij=is-1;
16295:       t1+=t0;
16295:       t2=t1;
16295:       for(i=2;i<ido;i+=2){
16295:         idij+=2;
16295:         t2+=2;
16295:         t3=t2;
16295:         for(k=0;k<l1;k++){
16295:           ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
16295:           ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
16295:           t3+=ido;
16295:         }
16295:       }
16295:     }
16295:   }
16295: 
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   if(nbd<l1){
16295:     for(j=1;j<ipph;j++){
16295:       t1+=t0;
16295:       t2-=t0;
16295:       t3=t1;
16295:       t4=t2;
16295:       for(i=2;i<ido;i+=2){
16295:         t3+=2;
16295:         t4+=2;
16295:         t5=t3-ido;
16295:         t6=t4-ido;
16295:         for(k=0;k<l1;k++){
16295:           t5+=ido;
16295:           t6+=ido;
16295:           c1[t5-1]=ch[t5-1]+ch[t6-1];
16295:           c1[t6-1]=ch[t5]-ch[t6];
16295:           c1[t5]=ch[t5]+ch[t6];
16295:           c1[t6]=ch[t6-1]-ch[t5-1];
16295:         }
16295:       }
16295:     }
16295:   }else{
16295:     for(j=1;j<ipph;j++){
16295:       t1+=t0;
16295:       t2-=t0;
16295:       t3=t1;
16295:       t4=t2;
16295:       for(k=0;k<l1;k++){
16295:         t5=t3;
16295:         t6=t4;
16295:         for(i=2;i<ido;i+=2){
16295:           t5+=2;
16295:           t6+=2;
16295:           c1[t5-1]=ch[t5-1]+ch[t6-1];
16295:           c1[t6-1]=ch[t5]-ch[t6];
16295:           c1[t5]=ch[t5]+ch[t6];
16295:           c1[t6]=ch[t6-1]-ch[t5-1];
16295:         }
16295:         t3+=ido;
16295:         t4+=ido;
16295:       }
16295:     }
16295:   }
16295: 
16295: L119:
16295:   for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
16295: 
16295:   t1=0;
16295:   t2=ipp2*idl1;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1-ido;
16295:     t4=t2-ido;
16295:     for(k=0;k<l1;k++){
16295:       t3+=ido;
16295:       t4+=ido;
16295:       c1[t3]=ch[t3]+ch[t4];
16295:       c1[t4]=ch[t4]-ch[t3];
16295:     }
16295:   }
16295: 
16295:   ar1=1.f;
16295:   ai1=0.f;
16295:   t1=0;
16295:   t2=ipp2*idl1;
16295:   t3=(ip-1)*idl1;
16295:   for(l=1;l<ipph;l++){
16295:     t1+=idl1;
16295:     t2-=idl1;
16295:     ar1h=dcp*ar1-dsp*ai1;
16295:     ai1=dcp*ai1+dsp*ar1;
16295:     ar1=ar1h;
16295:     t4=t1;
16295:     t5=t2;
16295:     t6=t3;
16295:     t7=idl1;
16295: 
16295:     for(ik=0;ik<idl1;ik++){
16295:       ch2[t4++]=c2[ik]+ar1*c2[t7++];
16295:       ch2[t5++]=ai1*c2[t6++];
16295:     }
16295: 
16295:     dc2=ar1;
16295:     ds2=ai1;
16295:     ar2=ar1;
16295:     ai2=ai1;
16295: 
16295:     t4=idl1;
16295:     t5=(ipp2-1)*idl1;
16295:     for(j=2;j<ipph;j++){
16295:       t4+=idl1;
16295:       t5-=idl1;
16295: 
16295:       ar2h=dc2*ar2-ds2*ai2;
16295:       ai2=dc2*ai2+ds2*ar2;
16295:       ar2=ar2h;
16295: 
16295:       t6=t1;
16295:       t7=t2;
16295:       t8=t4;
16295:       t9=t5;
16295:       for(ik=0;ik<idl1;ik++){
16295:         ch2[t6++]+=ar2*c2[t8++];
16295:         ch2[t7++]+=ai2*c2[t9++];
16295:       }
16295:     }
16295:   }
16295: 
16295:   t1=0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=idl1;
16295:     t2=t1;
16295:     for(ik=0;ik<idl1;ik++)ch2[ik]+=c2[t2++];
16295:   }
16295: 
16295:   if(ido<l1)goto L132;
16295: 
16295:   t1=0;
16295:   t2=0;
16295:   for(k=0;k<l1;k++){
16295:     t3=t1;
16295:     t4=t2;
16295:     for(i=0;i<ido;i++)cc[t4++]=ch[t3++];
16295:     t1+=ido;
16295:     t2+=t10;
16295:   }
16295: 
16295:   goto L135;
16295: 
16295:  L132:
16295:   for(i=0;i<ido;i++){
16295:     t1=i;
16295:     t2=i;
16295:     for(k=0;k<l1;k++){
16295:       cc[t2]=ch[t1];
16295:       t1+=ido;
16295:       t2+=t10;
16295:     }
16295:   }
16295: 
16295:  L135:
16295:   t1=0;
16295:   t2=ido<<1;
16295:   t3=0;
16295:   t4=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295: 
16295:     t1+=t2;
16295:     t3+=t0;
16295:     t4-=t0;
16295: 
16295:     t5=t1;
16295:     t6=t3;
16295:     t7=t4;
16295: 
16295:     for(k=0;k<l1;k++){
16295:       cc[t5-1]=ch[t6];
16295:       cc[t5]=ch[t7];
16295:       t5+=t10;
16295:       t6+=ido;
16295:       t7+=ido;
16295:     }
16295:   }
16295: 
16295:   if(ido==1)return;
16295:   if(nbd<l1)goto L141;
16295: 
16295:   t1=-ido;
16295:   t3=0;
16295:   t4=0;
16295:   t5=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t2;
16295:     t3+=t2;
16295:     t4+=t0;
16295:     t5-=t0;
16295:     t6=t1;
16295:     t7=t3;
16295:     t8=t4;
16295:     t9=t5;
16295:     for(k=0;k<l1;k++){
16295:       for(i=2;i<ido;i+=2){
16295:         ic=idp2-i;
16295:         cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
16295:         cc[ic+t6-1]=ch[i+t8-1]-ch[i+t9-1];
16295:         cc[i+t7]=ch[i+t8]+ch[i+t9];
16295:         cc[ic+t6]=ch[i+t9]-ch[i+t8];
16295:       }
16295:       t6+=t10;
16295:       t7+=t10;
16295:       t8+=ido;
16295:       t9+=ido;
16295:     }
16295:   }
16295:   return;
16295: 
16295:  L141:
16295: 
16295:   t1=-ido;
16295:   t3=0;
16295:   t4=0;
16295:   t5=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t2;
16295:     t3+=t2;
16295:     t4+=t0;
16295:     t5-=t0;
16295:     for(i=2;i<ido;i+=2){
16295:       t6=idp2+t1-i;
16295:       t7=i+t3;
16295:       t8=i+t4;
16295:       t9=i+t5;
16295:       for(k=0;k<l1;k++){
16295:         cc[t7-1]=ch[t8-1]+ch[t9-1];
16295:         cc[t6-1]=ch[t8-1]-ch[t9-1];
16295:         cc[t7]=ch[t8]+ch[t9];
16295:         cc[t6]=ch[t9]-ch[t8];
16295:         t6+=t10;
16295:         t7+=t10;
16295:         t8+=ido;
16295:         t9+=ido;
16295:       }
16295:     }
16295:   }
16295: }
16295: 
16295: static void drftf1(int n,float *c,float *ch,float *wa,int *ifac){
16295:   int i,k1,l1,l2;
16295:   int na,kh,nf;
16295:   int ip,iw,ido,idl1,ix2,ix3;
16295: 
16295:   nf=ifac[1];
16295:   na=1;
16295:   l2=n;
16295:   iw=n;
16295: 
16295:   for(k1=0;k1<nf;k1++){
16295:     kh=nf-k1;
16295:     ip=ifac[kh+1];
16295:     l1=l2/ip;
16295:     ido=n/l2;
16295:     idl1=ido*l1;
16295:     iw-=(ip-1)*ido;
16295:     na=1-na;
16295: 
16295:     if(ip!=4)goto L102;
16295: 
16295:     ix2=iw+ido;
16295:     ix3=ix2+ido;
16295:     if(na!=0)
16295:       dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
16295:     else
16295:       dradf4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
16295:     goto L110;
16295: 
16295:  L102:
16295:     if(ip!=2)goto L104;
16295:     if(na!=0)goto L103;
16295: 
16295:     dradf2(ido,l1,c,ch,wa+iw-1);
16295:     goto L110;
16295: 
16295:   L103:
16295:     dradf2(ido,l1,ch,c,wa+iw-1);
16295:     goto L110;
16295: 
16295:   L104:
16295:     if(ido==1)na=1-na;
16295:     if(na!=0)goto L109;
16295: 
16295:     dradfg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
16295:     na=1;
16295:     goto L110;
16295: 
16295:   L109:
16295:     dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
16295:     na=0;
16295: 
16295:   L110:
16295:     l2=l1;
16295:   }
16295: 
16295:   if(na==1)return;
16295: 
16295:   for(i=0;i<n;i++)c[i]=ch[i];
16295: }
16295: 
16295: static void dradb2(int ido,int l1,float *cc,float *ch,float *wa1){
16295:   int i,k,t0,t1,t2,t3,t4,t5,t6;
16295:   float ti2,tr2;
16295: 
16295:   t0=l1*ido;
16295: 
16295:   t1=0;
16295:   t2=0;
16295:   t3=(ido<<1)-1;
16295:   for(k=0;k<l1;k++){
16295:     ch[t1]=cc[t2]+cc[t3+t2];
16295:     ch[t1+t0]=cc[t2]-cc[t3+t2];
16295:     t2=(t1+=ido)<<1;
16295:   }
16295: 
16295:   if(ido<2)return;
16295:   if(ido==2)goto L105;
16295: 
16295:   t1=0;
16295:   t2=0;
16295:   for(k=0;k<l1;k++){
16295:     t3=t1;
16295:     t5=(t4=t2)+(ido<<1);
16295:     t6=t0+t1;
16295:     for(i=2;i<ido;i+=2){
16295:       t3+=2;
16295:       t4+=2;
16295:       t5-=2;
16295:       t6+=2;
16295:       ch[t3-1]=cc[t4-1]+cc[t5-1];
16295:       tr2=cc[t4-1]-cc[t5-1];
16295:       ch[t3]=cc[t4]-cc[t5];
16295:       ti2=cc[t4]+cc[t5];
16295:       ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
16295:       ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
16295:     }
16295:     t2=(t1+=ido)<<1;
16295:   }
16295: 
16295:   if(ido%2==1)return;
16295: 
16295: L105:
16295:   t1=ido-1;
16295:   t2=ido-1;
16295:   for(k=0;k<l1;k++){
16295:     ch[t1]=cc[t2]+cc[t2];
16295:     ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
16295:     t1+=ido;
16295:     t2+=ido<<1;
16295:   }
16295: }
16295: 
16295: static void dradb3(int ido,int l1,float *cc,float *ch,float *wa1,
16295:                           float *wa2){
16295:   static float taur = -.5f;
16295:   static float taui = .8660254037844386f;
16295:   int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10;
16295:   float ci2,ci3,di2,di3,cr2,cr3,dr2,dr3,ti2,tr2;
16295:   t0=l1*ido;
16295: 
16295:   t1=0;
16295:   t2=t0<<1;
16295:   t3=ido<<1;
16295:   t4=ido+(ido<<1);
16295:   t5=0;
16295:   for(k=0;k<l1;k++){
16295:     tr2=cc[t3-1]+cc[t3-1];
16295:     cr2=cc[t5]+(taur*tr2);
16295:     ch[t1]=cc[t5]+tr2;
16295:     ci3=taui*(cc[t3]+cc[t3]);
16295:     ch[t1+t0]=cr2-ci3;
16295:     ch[t1+t2]=cr2+ci3;
16295:     t1+=ido;
16295:     t3+=t4;
16295:     t5+=t4;
16295:   }
16295: 
16295:   if(ido==1)return;
16295: 
16295:   t1=0;
16295:   t3=ido<<1;
16295:   for(k=0;k<l1;k++){
16295:     t7=t1+(t1<<1);
16295:     t6=(t5=t7+t3);
16295:     t8=t1;
16295:     t10=(t9=t1+t0)+t0;
16295: 
16295:     for(i=2;i<ido;i+=2){
16295:       t5+=2;
16295:       t6-=2;
16295:       t7+=2;
16295:       t8+=2;
16295:       t9+=2;
16295:       t10+=2;
16295:       tr2=cc[t5-1]+cc[t6-1];
16295:       cr2=cc[t7-1]+(taur*tr2);
16295:       ch[t8-1]=cc[t7-1]+tr2;
16295:       ti2=cc[t5]-cc[t6];
16295:       ci2=cc[t7]+(taur*ti2);
16295:       ch[t8]=cc[t7]+ti2;
16295:       cr3=taui*(cc[t5-1]-cc[t6-1]);
16295:       ci3=taui*(cc[t5]+cc[t6]);
16295:       dr2=cr2-ci3;
16295:       dr3=cr2+ci3;
16295:       di2=ci2+cr3;
16295:       di3=ci2-cr3;
16295:       ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
16295:       ch[t9]=wa1[i-2]*di2+wa1[i-1]*dr2;
16295:       ch[t10-1]=wa2[i-2]*dr3-wa2[i-1]*di3;
16295:       ch[t10]=wa2[i-2]*di3+wa2[i-1]*dr3;
16295:     }
16295:     t1+=ido;
16295:   }
16295: }
16295: 
16295: static void dradb4(int ido,int l1,float *cc,float *ch,float *wa1,
16295:                           float *wa2,float *wa3){
16295:   static float sqrt2=1.414213562373095f;
16295:   int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8;
16295:   float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
16295:   t0=l1*ido;
16295: 
16295:   t1=0;
16295:   t2=ido<<2;
16295:   t3=0;
16295:   t6=ido<<1;
16295:   for(k=0;k<l1;k++){
16295:     t4=t3+t6;
16295:     t5=t1;
16295:     tr3=cc[t4-1]+cc[t4-1];
16295:     tr4=cc[t4]+cc[t4];
16295:     tr1=cc[t3]-cc[(t4+=t6)-1];
16295:     tr2=cc[t3]+cc[t4-1];
16295:     ch[t5]=tr2+tr3;
16295:     ch[t5+=t0]=tr1-tr4;
16295:     ch[t5+=t0]=tr2-tr3;
16295:     ch[t5+=t0]=tr1+tr4;
16295:     t1+=ido;
16295:     t3+=t2;
16295:   }
16295: 
16295:   if(ido<2)return;
16295:   if(ido==2)goto L105;
16295: 
16295:   t1=0;
16295:   for(k=0;k<l1;k++){
16295:     t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
16295:     t7=t1;
16295:     for(i=2;i<ido;i+=2){
16295:       t2+=2;
16295:       t3+=2;
16295:       t4-=2;
16295:       t5-=2;
16295:       t7+=2;
16295:       ti1=cc[t2]+cc[t5];
16295:       ti2=cc[t2]-cc[t5];
16295:       ti3=cc[t3]-cc[t4];
16295:       tr4=cc[t3]+cc[t4];
16295:       tr1=cc[t2-1]-cc[t5-1];
16295:       tr2=cc[t2-1]+cc[t5-1];
16295:       ti4=cc[t3-1]-cc[t4-1];
16295:       tr3=cc[t3-1]+cc[t4-1];
16295:       ch[t7-1]=tr2+tr3;
16295:       cr3=tr2-tr3;
16295:       ch[t7]=ti2+ti3;
16295:       ci3=ti2-ti3;
16295:       cr2=tr1-tr4;
16295:       cr4=tr1+tr4;
16295:       ci2=ti1+ti4;
16295:       ci4=ti1-ti4;
16295: 
16295:       ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
16295:       ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
16295:       ch[(t8+=t0)-1]=wa2[i-2]*cr3-wa2[i-1]*ci3;
16295:       ch[t8]=wa2[i-2]*ci3+wa2[i-1]*cr3;
16295:       ch[(t8+=t0)-1]=wa3[i-2]*cr4-wa3[i-1]*ci4;
16295:       ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
16295:     }
16295:     t1+=ido;
16295:   }
16295: 
16295:   if(ido%2 == 1)return;
16295: 
16295:  L105:
16295: 
16295:   t1=ido;
16295:   t2=ido<<2;
16295:   t3=ido-1;
16295:   t4=ido+(ido<<1);
16295:   for(k=0;k<l1;k++){
16295:     t5=t3;
16295:     ti1=cc[t1]+cc[t4];
16295:     ti2=cc[t4]-cc[t1];
16295:     tr1=cc[t1-1]-cc[t4-1];
16295:     tr2=cc[t1-1]+cc[t4-1];
16295:     ch[t5]=tr2+tr2;
16295:     ch[t5+=t0]=sqrt2*(tr1-ti1);
16295:     ch[t5+=t0]=ti2+ti2;
16295:     ch[t5+=t0]=-sqrt2*(tr1+ti1);
16295: 
16295:     t3+=ido;
16295:     t1+=t2;
16295:     t4+=t2;
16295:   }
16295: }
16295: 
16295: static void dradbg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
16295:             float *c2,float *ch,float *ch2,float *wa){
16295:   static float tpi=6.283185307179586f;
16295:   int idij,ipph,i,j,k,l,ik,is,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,
16295:       t11,t12;
16295:   float dc2,ai1,ai2,ar1,ar2,ds2;
16295:   int nbd;
16295:   float dcp,arg,dsp,ar1h,ar2h;
16295:   int ipp2;
16295: 
16295:   t10=ip*ido;
16295:   t0=l1*ido;
16295:   arg=tpi/(float)ip;
16295:   dcp=cos(arg);
16295:   dsp=sin(arg);
16295:   nbd=(ido-1)>>1;
16295:   ipp2=ip;
16295:   ipph=(ip+1)>>1;
16295:   if(ido<l1)goto L103;
16295: 
16295:   t1=0;
16295:   t2=0;
16295:   for(k=0;k<l1;k++){
16295:     t3=t1;
16295:     t4=t2;
16295:     for(i=0;i<ido;i++){
16295:       ch[t3]=cc[t4];
16295:       t3++;
16295:       t4++;
16295:     }
16295:     t1+=ido;
16295:     t2+=t10;
16295:   }
16295:   goto L106;
16295: 
16295:  L103:
16295:   t1=0;
16295:   for(i=0;i<ido;i++){
16295:     t2=t1;
16295:     t3=t1;
16295:     for(k=0;k<l1;k++){
16295:       ch[t2]=cc[t3];
16295:       t2+=ido;
16295:       t3+=t10;
16295:     }
16295:     t1++;
16295:   }
16295: 
16295:  L106:
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   t7=(t5=ido<<1);
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295:     t6=t5;
16295:     for(k=0;k<l1;k++){
16295:       ch[t3]=cc[t6-1]+cc[t6-1];
16295:       ch[t4]=cc[t6]+cc[t6];
16295:       t3+=ido;
16295:       t4+=ido;
16295:       t6+=t10;
16295:     }
16295:     t5+=t7;
16295:   }
16295: 
16295:   if (ido == 1)goto L116;
16295:   if(nbd<l1)goto L112;
16295: 
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   t7=0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295: 
16295:     t7+=(ido<<1);
16295:     t8=t7;
16295:     for(k=0;k<l1;k++){
16295:       t5=t3;
16295:       t6=t4;
16295:       t9=t8;
16295:       t11=t8;
16295:       for(i=2;i<ido;i+=2){
16295:         t5+=2;
16295:         t6+=2;
16295:         t9+=2;
16295:         t11-=2;
16295:         ch[t5-1]=cc[t9-1]+cc[t11-1];
16295:         ch[t6-1]=cc[t9-1]-cc[t11-1];
16295:         ch[t5]=cc[t9]-cc[t11];
16295:         ch[t6]=cc[t9]+cc[t11];
16295:       }
16295:       t3+=ido;
16295:       t4+=ido;
16295:       t8+=t10;
16295:     }
16295:   }
16295:   goto L116;
16295: 
16295:  L112:
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   t7=0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295:     t7+=(ido<<1);
16295:     t8=t7;
16295:     t9=t7;
16295:     for(i=2;i<ido;i+=2){
16295:       t3+=2;
16295:       t4+=2;
16295:       t8+=2;
16295:       t9-=2;
16295:       t5=t3;
16295:       t6=t4;
16295:       t11=t8;
16295:       t12=t9;
16295:       for(k=0;k<l1;k++){
16295:         ch[t5-1]=cc[t11-1]+cc[t12-1];
16295:         ch[t6-1]=cc[t11-1]-cc[t12-1];
16295:         ch[t5]=cc[t11]-cc[t12];
16295:         ch[t6]=cc[t11]+cc[t12];
16295:         t5+=ido;
16295:         t6+=ido;
16295:         t11+=t10;
16295:         t12+=t10;
16295:       }
16295:     }
16295:   }
16295: 
16295: L116:
16295:   ar1=1.f;
16295:   ai1=0.f;
16295:   t1=0;
16295:   t9=(t2=ipp2*idl1);
16295:   t3=(ip-1)*idl1;
16295:   for(l=1;l<ipph;l++){
16295:     t1+=idl1;
16295:     t2-=idl1;
16295: 
16295:     ar1h=dcp*ar1-dsp*ai1;
16295:     ai1=dcp*ai1+dsp*ar1;
16295:     ar1=ar1h;
16295:     t4=t1;
16295:     t5=t2;
16295:     t6=0;
16295:     t7=idl1;
16295:     t8=t3;
16295:     for(ik=0;ik<idl1;ik++){
16295:       c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
16295:       c2[t5++]=ai1*ch2[t8++];
16295:     }
16295:     dc2=ar1;
16295:     ds2=ai1;
16295:     ar2=ar1;
16295:     ai2=ai1;
16295: 
16295:     t6=idl1;
16295:     t7=t9-idl1;
16295:     for(j=2;j<ipph;j++){
16295:       t6+=idl1;
16295:       t7-=idl1;
16295:       ar2h=dc2*ar2-ds2*ai2;
16295:       ai2=dc2*ai2+ds2*ar2;
16295:       ar2=ar2h;
16295:       t4=t1;
16295:       t5=t2;
16295:       t11=t6;
16295:       t12=t7;
16295:       for(ik=0;ik<idl1;ik++){
16295:         c2[t4++]+=ar2*ch2[t11++];
16295:         c2[t5++]+=ai2*ch2[t12++];
16295:       }
16295:     }
16295:   }
16295: 
16295:   t1=0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=idl1;
16295:     t2=t1;
16295:     for(ik=0;ik<idl1;ik++)ch2[ik]+=ch2[t2++];
16295:   }
16295: 
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295:     for(k=0;k<l1;k++){
16295:       ch[t3]=c1[t3]-c1[t4];
16295:       ch[t4]=c1[t3]+c1[t4];
16295:       t3+=ido;
16295:       t4+=ido;
16295:     }
16295:   }
16295: 
16295:   if(ido==1)goto L132;
16295:   if(nbd<l1)goto L128;
16295: 
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295:     for(k=0;k<l1;k++){
16295:       t5=t3;
16295:       t6=t4;
16295:       for(i=2;i<ido;i+=2){
16295:         t5+=2;
16295:         t6+=2;
16295:         ch[t5-1]=c1[t5-1]-c1[t6];
16295:         ch[t6-1]=c1[t5-1]+c1[t6];
16295:         ch[t5]=c1[t5]+c1[t6-1];
16295:         ch[t6]=c1[t5]-c1[t6-1];
16295:       }
16295:       t3+=ido;
16295:       t4+=ido;
16295:     }
16295:   }
16295:   goto L132;
16295: 
16295:  L128:
16295:   t1=0;
16295:   t2=ipp2*t0;
16295:   for(j=1;j<ipph;j++){
16295:     t1+=t0;
16295:     t2-=t0;
16295:     t3=t1;
16295:     t4=t2;
16295:     for(i=2;i<ido;i+=2){
16295:       t3+=2;
16295:       t4+=2;
16295:       t5=t3;
16295:       t6=t4;
16295:       for(k=0;k<l1;k++){
16295:         ch[t5-1]=c1[t5-1]-c1[t6];
16295:         ch[t6-1]=c1[t5-1]+c1[t6];
16295:         ch[t5]=c1[t5]+c1[t6-1];
16295:         ch[t6]=c1[t5]-c1[t6-1];
16295:         t5+=ido;
16295:         t6+=ido;
16295:       }
16295:     }
16295:   }
16295: 
16295: L132:
16295:   if(ido==1)return;
16295: 
16295:   for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
16295: 
16295:   t1=0;
16295:   for(j=1;j<ip;j++){
16295:     t2=(t1+=t0);
16295:     for(k=0;k<l1;k++){
16295:       c1[t2]=ch[t2];
16295:       t2+=ido;
16295:     }
16295:   }
16295: 
16295:   if(nbd>l1)goto L139;
16295: 
16295:   is= -ido-1;
16295:   t1=0;
16295:   for(j=1;j<ip;j++){
16295:     is+=ido;
16295:     t1+=t0;
16295:     idij=is;
16295:     t2=t1;
16295:     for(i=2;i<ido;i+=2){
16295:       t2+=2;
16295:       idij+=2;
16295:       t3=t2;
16295:       for(k=0;k<l1;k++){
16295:         c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
16295:         c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
16295:         t3+=ido;
16295:       }
16295:     }
16295:   }
16295:   return;
16295: 
16295:  L139:
16295:   is= -ido-1;
16295:   t1=0;
16295:   for(j=1;j<ip;j++){
16295:     is+=ido;
16295:     t1+=t0;
16295:     t2=t1;
16295:     for(k=0;k<l1;k++){
16295:       idij=is;
16295:       t3=t2;
16295:       for(i=2;i<ido;i+=2){
16295:         idij+=2;
16295:         t3+=2;
16295:         c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
16295:         c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
16295:       }
16295:       t2+=ido;
16295:     }
16295:   }
16295: }
16295: 
16295: static void drftb1(int n, float *c, float *ch, float *wa, int *ifac){
16295:   int i,k1,l1,l2;
16295:   int na;
16295:   int nf,ip,iw,ix2,ix3,ido,idl1;
16295: 
16295:   nf=ifac[1];
16295:   na=0;
16295:   l1=1;
16295:   iw=1;
16295: 
16295:   for(k1=0;k1<nf;k1++){
16295:     ip=ifac[k1 + 2];
16295:     l2=ip*l1;
16295:     ido=n/l2;
16295:     idl1=ido*l1;
16295:     if(ip!=4)goto L103;
16295:     ix2=iw+ido;
16295:     ix3=ix2+ido;
16295: 
16295:     if(na!=0)
16295:       dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
16295:     else
16295:       dradb4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
16295:     na=1-na;
16295:     goto L115;
16295: 
16295:   L103:
16295:     if(ip!=2)goto L106;
16295: 
16295:     if(na!=0)
16295:       dradb2(ido,l1,ch,c,wa+iw-1);
16295:     else
16295:       dradb2(ido,l1,c,ch,wa+iw-1);
16295:     na=1-na;
16295:     goto L115;
16295: 
16295:   L106:
16295:     if(ip!=3)goto L109;
16295: 
16295:     ix2=iw+ido;
16295:     if(na!=0)
16295:       dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
16295:     else
16295:       dradb3(ido,l1,c,ch,wa+iw-1,wa+ix2-1);
16295:     na=1-na;
16295:     goto L115;
16295: 
16295:   L109:
16295: /*    The radix five case can be translated later..... */
16295: /*    if(ip!=5)goto L112;
16295: 
16295:     ix2=iw+ido;
16295:     ix3=ix2+ido;
16295:     ix4=ix3+ido;
16295:     if(na!=0)
16295:       dradb5(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1,wa+ix4-1);
16295:     else
16295:       dradb5(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1,wa+ix4-1);
16295:     na=1-na;
16295:     goto L115;
16295: 
16295:   L112:*/
16295:     if(na!=0)
16295:       dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
16295:     else
16295:       dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
16295:     if(ido==1)na=1-na;
16295: 
16295:   L115:
16295:     l1=l2;
16295:     iw+=(ip-1)*ido;
16295:   }
16295: 
16295:   if(na==0)return;
16295: 
16295:   for(i=0;i<n;i++)c[i]=ch[i];
16295: }
16295: 
16295: void drft_forward(drft_lookup *l,float *data){
16295:   if(l->n==1)return;
16295:   drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
16295: }
16295: 
16295: void drft_backward(drft_lookup *l,float *data){
16295:   if (l->n==1)return;
16295:   drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
16295: }
16295: 
16295: void drft_init(drft_lookup *l,int n){
16295:   l->n=n;
16295:   l->trigcache=_ogg_calloc(3*n,sizeof(*l->trigcache));
16295:   l->splitcache=_ogg_calloc(32,sizeof(*l->splitcache));
16295:   fdrffti(n, l->trigcache, l->splitcache);
16295: }
16295: 
16295: void drft_clear(drft_lookup *l){
16295:   if(l){
16295:     if(l->trigcache)_ogg_free(l->trigcache);
16295:     if(l->splitcache)_ogg_free(l->splitcache);
16295:     memset(l,0,sizeof(*l));
16295:   }
16295: }
