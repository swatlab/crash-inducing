  3869: // Copyright (c) 2006, Google Inc.
  3869: // All rights reserved.
  3869: //
  3869: // Redistribution and use in source and binary forms, with or without
  3869: // modification, are permitted provided that the following conditions are
  3869: // met:
  3869: //
  3869: //     * Redistributions of source code must retain the above copyright
  3869: // notice, this list of conditions and the following disclaimer.
  3869: //     * Redistributions in binary form must reproduce the above
  3869: // copyright notice, this list of conditions and the following disclaimer
  3869: // in the documentation and/or other materials provided with the
  3869: // distribution.
  3869: //     * Neither the name of Google Inc. nor the names of its
  3869: // contributors may be used to endorse or promote products derived from
  3869: // this software without specific prior written permission.
  3869: //
  3869: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  3869: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  3869: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  3869: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  3869: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  3869: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  3869: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  3869: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  3869: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  3869: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  3869: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  3869: 
  3869: // macho_walker.h: Iterate over the load commands in a mach-o file
  3869: //
  3869: // Author: Dan Waylonis
  3869: 
  3869: #ifndef COMMON_MAC_MACHO_WALKER_H__
  3869: #define COMMON_MAC_MACHO_WALKER_H__
  3869: 
118328: #include <mach/machine.h>
  3869: #include <mach-o/loader.h>
  3869: #include <sys/types.h>
  3869: 
  3869: namespace MacFileUtilities {
  3869: 
  3869: class MachoWalker {
  3869:  public:
  3869:   // A callback function executed when a new load command is read.  If no
  3869:   // further processing of load commands is desired, return false.  Otherwise,
  3869:   // return true.
  3869:   // |cmd| is the current command, and |offset| is the location relative to the
  3869:   // beginning of the file (not header) where the command was read.  If |swap|
  3869:   // is set, then any command data (other than the returned load_command) should
  3869:   // be swapped when read
  3869:   typedef bool (*LoadCommandCallback)(MachoWalker *walker, load_command *cmd,
  3869:                                       off_t offset, bool swap, void *context);
  3869: 
  3869:   MachoWalker(const char *path, LoadCommandCallback callback, void *context);
114869:   MachoWalker(void *memory, size_t size, LoadCommandCallback callback,
114869:               void *context);
  3869:   ~MachoWalker();
  3869: 
118328:   // Begin walking the header for |cpu_type| and |cpu_subtype|.  If |cpu_type|
118328:   // is 0, then the native cpu type is used. Otherwise, accepted values are
118328:   // listed in /usr/include/mach/machine.h (e.g., CPU_TYPE_X86 or
118328:   // CPU_TYPE_POWERPC). If |cpu_subtype| is CPU_SUBTYPE_MULTIPLE, the match is
118328:   // only done on |cpu_type|.
118328:   // Returns false if opening the file failed or if the |cpu_type|/|cpu_subtype|
118328:   // is not present in the file.
118328:   bool WalkHeader(cpu_type_t cpu_type, cpu_subtype_t cpu_subtype);
  3869: 
  3869:   // Read |size| bytes from the opened file at |offset| into |buffer|
  3869:   bool ReadBytes(void *buffer, size_t size, off_t offset);
  3869: 
  3869:   // Return the current header and header offset
  3869:   bool CurrentHeader(struct mach_header_64 *header, off_t *offset);
  3869: 
  3869:  private:
118328:   // Locate (if any) the header offset for |cpu_type| and return in |offset|.
118328:   // Return true if found, false otherwise.
118328:   bool FindHeader(cpu_type_t cpu_type,
118328:                   cpu_subtype_t cpu_subtype,
118328:                   off_t &offset);
  3869: 
  3869:   // Process an individual header starting at |offset| from the start of the
  3869:   // file.  Return true if successful, false otherwise.
  3869:   bool WalkHeaderAtOffset(off_t offset);
  3869:   bool WalkHeader64AtOffset(off_t offset);
  3869: 
  3869:   // Bottleneck for walking the load commands
  3869:   bool WalkHeaderCore(off_t offset, uint32_t number_of_commands, bool swap);
  3869: 
  3869:   // File descriptor to the opened file
  3869:   int file_;
  3869: 
114869:   // Memory location to read from.
114869:   void *memory_;
114869: 
114869:   // Size of the memory segment we can read from.
114869:   size_t memory_size_;
114869: 
  3869:   // User specified callback & context
  3869:   LoadCommandCallback callback_;
  3869:   void *callback_context_;
  3869: 
  3869:   // Current header, size, and offset.  The mach_header_64 is used for both
  3869:   // 32-bit and 64-bit headers because they only differ in their last field
  3869:   // (reserved).  By adding the |current_header_size_| and the
  3869:   // |current_header_offset_|, you can determine the offset in the file just
  3869:   // after the header.
  3869:   struct mach_header_64 *current_header_;
  3869:   unsigned long current_header_size_;
  3869:   off_t current_header_offset_;
 50677: 
 50677:  private:
 50677:   MachoWalker(const MachoWalker &);
 50677:   MachoWalker &operator=(const MachoWalker &);
  3869: };
  3869: 
  3869: }  // namespace MacFileUtilities
  3869: 
  3869: #endif  // COMMON_MAC_MACHO_WALKER_H__
