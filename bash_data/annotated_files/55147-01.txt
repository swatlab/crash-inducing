    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Alec Flett <alecf@netscape.com>
    1:  *   Brian Nesse <bnesse@netscape.com>
46881:  *   Frederic Plourde <frederic.plourde@collabora.co.uk>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
46881: #ifdef MOZ_IPC
47933: #include "mozilla/dom/ContentChild.h"
46881: #include "nsXULAppAPI.h"
46881: #endif
46881: 
    1: #include "nsPrefBranch.h"
    1: #include "nsILocalFile.h"
    1: #include "nsIObserverService.h"
    1: #include "nsXPCOM.h"
    1: #include "nsISupportsPrimitives.h"
    1: #include "nsIDirectoryService.h"
    1: #include "nsString.h"
    1: #include "nsReadableUtils.h"
    1: #include "nsXPIDLString.h"
    1: #include "nsIStringBundle.h"
    1: #include "prefapi.h"
    1: #include "prmem.h"
    1: #include "pldhash.h"
    1: 
    1: #include "plstr.h"
    1: #include "nsCRT.h"
41540: #include "mozilla/Services.h"
    1: 
    1: #include "prefapi_private_data.h"
    1: 
    1: // Definitions
    1: struct EnumerateData {
    1:   const char  *parent;
46885:   nsTArray<nsCString> *pref_list;
    1: };
    1: 
    1: // Prototypes
20261: static PLDHashOperator
    1:   pref_enumChild(PLDHashTable *table, PLDHashEntryHdr *heh,
    1:                  PRUint32 i, void *arg);
    1: 
47171: #ifdef MOZ_IPC
47933: using mozilla::dom::ContentChild;
47171: 
47933: static ContentChild*
47933: GetContentChild()
47171: {
47171:   if (XRE_GetProcessType() == GeckoProcessType_Content) {
47933:     ContentChild* cpc = ContentChild::GetSingleton();
47171:     if (!cpc) {
47171:       NS_RUNTIMEABORT("Content Protocol is NULL!  We're going to crash!");
47171:     }
47171:     return cpc;
47171:   }
47171:   return nsnull;
47171: }
47171: #endif  // MOZ_IPC
47171: 
    1: /*
    1:  * Constructor/Destructor
    1:  */
    1: 
    1: nsPrefBranch::nsPrefBranch(const char *aPrefRoot, PRBool aDefaultBranch)
    1: {
    1:   mPrefRoot = aPrefRoot;
    1:   mPrefRootLength = mPrefRoot.Length();
    1:   mIsDefault = aDefaultBranch;
51303:   mFreeingObserverList = PR_FALSE;
51303:   mObservers.Init();
    1: 
    1:   nsCOMPtr<nsIObserverService> observerService =
41540:     mozilla::services::GetObserverService();
    1:   if (observerService) {
    1:     ++mRefCnt;    // Our refcnt must be > 0 when we call this, or we'll get deleted!
    1:     // add weak so we don't have to clean up at shutdown
    1:     observerService->AddObserver(this, NS_XPCOM_SHUTDOWN_OBSERVER_ID, PR_TRUE);
    1:     --mRefCnt;
    1:   }
    1: }
    1: 
    1: nsPrefBranch::~nsPrefBranch()
    1: {
    1:   freeObserverList();
    1: }
    1: 
    1: 
    1: /*
    1:  * nsISupports Implementation
    1:  */
    1: 
    1: NS_IMPL_THREADSAFE_ADDREF(nsPrefBranch)
    1: NS_IMPL_THREADSAFE_RELEASE(nsPrefBranch)
    1: 
    1: NS_INTERFACE_MAP_BEGIN(nsPrefBranch)
    1:   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIPrefBranch)
    1:   NS_INTERFACE_MAP_ENTRY(nsIPrefBranch)
    1:   NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIPrefBranch2, !mIsDefault)
    1:   NS_INTERFACE_MAP_ENTRY_CONDITIONAL(nsIPrefBranchInternal, !mIsDefault)
    1:   NS_INTERFACE_MAP_ENTRY(nsIObserver)
    1:   NS_INTERFACE_MAP_ENTRY(nsISupportsWeakReference)
    1: NS_INTERFACE_MAP_END
    1: 
    1: 
    1: /*
    1:  * nsIPrefBranch Implementation
    1:  */
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetRoot(char **aRoot)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aRoot);
    1:   mPrefRoot.Truncate(mPrefRootLength);
    1:   *aRoot = ToNewCString(mPrefRoot);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetPrefType(const char *aPrefName, PRInt32 *_retval)
    1: {
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
    1:   *_retval = PREF_GetPrefType(pref);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetBoolPref(const char *aPrefName, PRBool *_retval)
    1: {
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_GetBoolPref(pref, _retval, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::SetBoolPref(const char *aPrefName, PRInt32 aValue)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_SetBoolPref(pref, aValue, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetCharPref(const char *aPrefName, char **_retval)
    1: {
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_CopyCharPref(pref, _retval, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::SetCharPref(const char *aPrefName, const char *aValue)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
    1: 
55147:   NS_ENSURE_ARG(aPrefName);
55147:   NS_ENSURE_ARG(aValue);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_SetCharPref(pref, aValue, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetIntPref(const char *aPrefName, PRInt32 *_retval)
    1: {
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_GetIntPref(pref, _retval, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::SetIntPref(const char *aPrefName, PRInt32 aValue)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_SetIntPref(pref, aValue, mIsDefault);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetComplexValue(const char *aPrefName, const nsIID & aType, void **_retval)
    1: {
55147:   NS_ENSURE_ARG(aPrefName);
55147: 
    1:   nsresult       rv;
    1:   nsXPIDLCString utf8String;
    1: 
    1:   // we have to do this one first because it's different than all the rest
    1:   if (aType.Equals(NS_GET_IID(nsIPrefLocalizedString))) {
    1:     nsCOMPtr<nsIPrefLocalizedString> theString(do_CreateInstance(NS_PREFLOCALIZEDSTRING_CONTRACTID, &rv));
46882:     if (NS_FAILED(rv)) return rv;
42314: 
46909:     const char *pref = getPrefName(aPrefName);
42314:     PRBool  bNeedDefault = PR_FALSE;
42314: 
42314:     if (mIsDefault) {
42314:       bNeedDefault = PR_TRUE;
42314:     } else {
42314:       // if there is no user (or locked) value
42314:       if (!PREF_HasUserPref(pref) && !PREF_PrefIsLocked(pref)) {
42314:         bNeedDefault = PR_TRUE;
42314:       }
42314:     }
42314: 
42314:     // if we need to fetch the default value, do that instead, otherwise use the
42314:     // value we pulled in at the top of this function
42314:     if (bNeedDefault) {
42314:       nsXPIDLString utf16String;
42314:       rv = GetDefaultFromPropertiesFile(pref, getter_Copies(utf16String));
42314:       if (NS_SUCCEEDED(rv)) {
46882:         theString->SetData(utf16String.get());
42314:       }
42314:     } else {
42314:       rv = GetCharPref(aPrefName, getter_Copies(utf8String));
42314:       if (NS_SUCCEEDED(rv)) {
46882:         theString->SetData(NS_ConvertUTF8toUTF16(utf8String).get());
42314:       }
42314:     }
    1: 
    1:     if (NS_SUCCEEDED(rv)) {
43345:       const char *pref = getPrefName(aPrefName);
    1:       PRBool  bNeedDefault = PR_FALSE;
    1: 
    1:       if (mIsDefault) {
    1:         bNeedDefault = PR_TRUE;
    1:       } else {
    1:         // if there is no user (or locked) value
    1:         if (!PREF_HasUserPref(pref) && !PREF_PrefIsLocked(pref)) {
    1:           bNeedDefault = PR_TRUE;
    1:         }
    1:       }
    1: 
    1:       // if we need to fetch the default value, do that instead, otherwise use the
    1:       // value we pulled in at the top of this function
    1:       if (bNeedDefault) {
    1:         nsXPIDLString utf16String;
    1:         rv = GetDefaultFromPropertiesFile(pref, getter_Copies(utf16String));
    1:         if (NS_SUCCEEDED(rv)) {
    1:           rv = theString->SetData(utf16String.get());
    1:         }
    1:       } else {
    1:         rv = GetCharPref(aPrefName, getter_Copies(utf8String));
    1:         if (NS_SUCCEEDED(rv)) {
    1:           rv = theString->SetData(NS_ConvertUTF8toUTF16(utf8String).get());
    1:         }
    1:       }
    1:       if (NS_SUCCEEDED(rv)) {
    1:         nsIPrefLocalizedString *temp = theString;
    1: 
    1:         NS_ADDREF(temp);
    1:         *_retval = (void *)temp;
    1:       }
    1:     }
    1: 
    1:     return rv;
    1:   }
    1: 
    1:   // if we can't get the pref, there's no point in being here
    1:   rv = GetCharPref(aPrefName, getter_Copies(utf8String));
    1:   if (NS_FAILED(rv)) {
    1:     return rv;
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsILocalFile))) {
46882: #ifdef MOZ_IPC
47933:     if (GetContentChild()) {
46882:       NS_ERROR("cannot get nsILocalFile pref from content process");
46882:       return NS_ERROR_NOT_AVAILABLE;
46882:     }
46882: #endif
46882: 
    1:     nsCOMPtr<nsILocalFile> file(do_CreateInstance(NS_LOCAL_FILE_CONTRACTID, &rv));
    1: 
    1:     if (NS_SUCCEEDED(rv)) {
    1:       rv = file->SetPersistentDescriptor(utf8String);
    1:       if (NS_SUCCEEDED(rv)) {
46882:         file.forget(reinterpret_cast<nsILocalFile**>(_retval));
    1:         return NS_OK;
    1:       }
    1:     }
    1:     return rv;
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsIRelativeFilePref))) {
46882: #ifdef MOZ_IPC
47933:     if (GetContentChild()) {
46882:       NS_ERROR("cannot get nsIRelativeFilePref from content process");
46882:       return NS_ERROR_NOT_AVAILABLE;
46882:     }
46882: #endif
46882: 
    1:     nsACString::const_iterator keyBegin, strEnd;
    1:     utf8String.BeginReading(keyBegin);
    1:     utf8String.EndReading(strEnd);    
    1: 
    1:     // The pref has the format: [fromKey]a/b/c
    1:     if (*keyBegin++ != '[')        
    1:       return NS_ERROR_FAILURE;
    1:     nsACString::const_iterator keyEnd(keyBegin);
    1:     if (!FindCharInReadable(']', keyEnd, strEnd))
    1:       return NS_ERROR_FAILURE;
    1:     nsCAutoString key(Substring(keyBegin, keyEnd));
    1:     
    1:     nsCOMPtr<nsILocalFile> fromFile;        
    1:     nsCOMPtr<nsIProperties> directoryService(do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     rv = directoryService->Get(key.get(), NS_GET_IID(nsILocalFile), getter_AddRefs(fromFile));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     
    1:     nsCOMPtr<nsILocalFile> theFile;
    1:     rv = NS_NewNativeLocalFile(EmptyCString(), PR_TRUE, getter_AddRefs(theFile));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     rv = theFile->SetRelativeDescriptor(fromFile, Substring(++keyEnd, strEnd));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     nsCOMPtr<nsIRelativeFilePref> relativePref;
    1:     rv = NS_NewRelativeFilePref(theFile, key, getter_AddRefs(relativePref));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1: 
46882:     relativePref.forget(reinterpret_cast<nsIRelativeFilePref**>(_retval));
    1:     return NS_OK;
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsISupportsString))) {
    1:     nsCOMPtr<nsISupportsString> theString(do_CreateInstance(NS_SUPPORTS_STRING_CONTRACTID, &rv));
    1: 
    1:     if (NS_SUCCEEDED(rv)) {
46882:       theString->SetData(NS_ConvertUTF8toUTF16(utf8String));
46882:       theString.forget(reinterpret_cast<nsISupportsString**>(_retval));
    1:     }
    1:     return rv;
    1:   }
    1: 
    1:   NS_WARNING("nsPrefBranch::GetComplexValue - Unsupported interface type");
    1:   return NS_NOINTERFACE;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::SetComplexValue(const char *aPrefName, const nsIID & aType, nsISupports *aValue)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
55147: 
    1:   nsresult   rv = NS_NOINTERFACE;
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsILocalFile))) {
    1:     nsCOMPtr<nsILocalFile> file = do_QueryInterface(aValue);
    1:     if (!file)
    1:       return NS_NOINTERFACE;
    1:     nsCAutoString descriptorString;
    1: 
    1:     rv = file->GetPersistentDescriptor(descriptorString);
    1:     if (NS_SUCCEEDED(rv)) {
    1:       rv = SetCharPref(aPrefName, descriptorString.get());
    1:     }
    1:     return rv;
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsIRelativeFilePref))) {
    1:     nsCOMPtr<nsIRelativeFilePref> relFilePref = do_QueryInterface(aValue);
    1:     if (!relFilePref)
    1:       return NS_NOINTERFACE;
    1:     
    1:     nsCOMPtr<nsILocalFile> file;
    1:     relFilePref->GetFile(getter_AddRefs(file));
    1:     if (!file)
    1:       return NS_NOINTERFACE;
    1:     nsCAutoString relativeToKey;
    1:     (void) relFilePref->GetRelativeToKey(relativeToKey);
    1: 
    1:     nsCOMPtr<nsILocalFile> relativeToFile;        
    1:     nsCOMPtr<nsIProperties> directoryService(do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID, &rv));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     rv = directoryService->Get(relativeToKey.get(), NS_GET_IID(nsILocalFile), getter_AddRefs(relativeToFile));
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1: 
    1:     nsCAutoString relDescriptor;
    1:     rv = file->GetRelativeDescriptor(relativeToFile, relDescriptor);
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1:     
    1:     nsCAutoString descriptorString;
    1:     descriptorString.Append('[');
    1:     descriptorString.Append(relativeToKey);
    1:     descriptorString.Append(']');
    1:     descriptorString.Append(relDescriptor);
    1:     return SetCharPref(aPrefName, descriptorString.get());
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsISupportsString))) {
    1:     nsCOMPtr<nsISupportsString> theString = do_QueryInterface(aValue);
    1: 
    1:     if (theString) {
    1:       nsAutoString wideString;
    1: 
    1:       rv = theString->GetData(wideString);
    1:       if (NS_SUCCEEDED(rv)) {
    1:         rv = SetCharPref(aPrefName, NS_ConvertUTF16toUTF8(wideString).get());
    1:       }
    1:     }
    1:     return rv;
    1:   }
    1: 
    1:   if (aType.Equals(NS_GET_IID(nsIPrefLocalizedString))) {
    1:     nsCOMPtr<nsIPrefLocalizedString> theString = do_QueryInterface(aValue);
    1: 
    1:     if (theString) {
    1:       nsXPIDLString wideString;
    1: 
    1:       rv = theString->GetData(getter_Copies(wideString));
    1:       if (NS_SUCCEEDED(rv)) {
    1:         rv = SetCharPref(aPrefName, NS_ConvertUTF16toUTF8(wideString).get());
    1:       }
    1:     }
    1:     return rv;
    1:   }
    1: 
    1:   NS_WARNING("nsPrefBranch::SetComplexValue - Unsupported interface type");
    1:   return NS_NOINTERFACE;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::ClearUserPref(const char *aPrefName)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_ClearUserPref(pref);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::PrefHasUserValue(const char *aPrefName, PRBool *_retval)
    1: {
    1:   NS_ENSURE_ARG_POINTER(_retval);
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
    1:   *_retval = PREF_HasUserPref(pref);
43345:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::LockPref(const char *aPrefName)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot lock pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_LockPref(pref, PR_TRUE);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::PrefIsLocked(const char *aPrefName, PRBool *_retval)
    1: {
46881: #ifdef MOZ_IPC
54677:   if (GetContentChild()) {
54677:     NS_ERROR("cannot check lock pref from content process");
54677:     return NS_ERROR_NOT_AVAILABLE;
46881:   }
46881: #endif
46881: 
54677:   NS_ENSURE_ARG_POINTER(_retval);
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
    1:   *_retval = PREF_PrefIsLocked(pref);
43345:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::UnlockPref(const char *aPrefName)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot unlock pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aPrefName);
43345:   const char *pref = getPrefName(aPrefName);
43345:   return PREF_LockPref(pref, PR_FALSE);
    1: }
    1: 
    1: /* void resetBranch (in string startingAt); */
    1: NS_IMETHODIMP nsPrefBranch::ResetBranch(const char *aStartingAt)
    1: {
    1:   return NS_ERROR_NOT_IMPLEMENTED;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::DeleteBranch(const char *aStartingAt)
    1: {
46883: #ifdef MOZ_IPC
47933:   if (GetContentChild()) {
46883:     NS_ERROR("cannot set pref from content process");
46883:     return NS_ERROR_NOT_AVAILABLE;
46883:   }
46883: #endif
46883: 
55147:   NS_ENSURE_ARG(aStartingAt);
43345:   const char *pref = getPrefName(aStartingAt);
43345:   return PREF_DeleteBranch(pref);
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::GetChildList(const char *aStartingAt, PRUint32 *aCount, char ***aChildArray)
    1: {
    1:   char            **outArray;
29263:   PRInt32         numPrefs;
29263:   PRInt32         dwIndex;
    1:   EnumerateData   ed;
46885:   nsAutoTArray<nsCString, 32> prefArray;
    1: 
55147:   NS_ENSURE_ARG(aStartingAt);
    1:   NS_ENSURE_ARG_POINTER(aCount);
    1:   NS_ENSURE_ARG_POINTER(aChildArray);
    1: 
    1:   *aChildArray = nsnull;
    1:   *aCount = 0;
46885: 
46885:   if (!gHashTable.ops)
    1:     return NS_ERROR_NOT_INITIALIZED;
    1: 
    1:   // this will contain a list of all the pref name strings
    1:   // allocate on the stack for speed
    1:   
    1:   ed.parent = getPrefName(aStartingAt);
    1:   ed.pref_list = &prefArray;
    1:   PL_DHashTableEnumerate(&gHashTable, pref_enumChild, &ed);
    1: 
    1:   // now that we've built up the list, run the callback on
    1:   // all the matching elements
46885:   numPrefs = prefArray.Length();
    1: 
    1:   if (numPrefs) {
    1:     outArray = (char **)nsMemory::Alloc(numPrefs * sizeof(char *));
    1:     if (!outArray)
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:     for (dwIndex = 0; dwIndex < numPrefs; ++dwIndex) {
    1:       // we need to lop off mPrefRoot in case the user is planning to pass this
    1:       // back to us because if they do we are going to add mPrefRoot again.
46885:       const nsCString& element = prefArray[dwIndex];
46885:       outArray[dwIndex] = (char *)nsMemory::Clone(
46885:         element.get() + mPrefRootLength, element.Length() - mPrefRootLength + 1);
    1: 
    1:       if (!outArray[dwIndex]) {
    1:         // we ran out of memory... this is annoying
    1:         NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(dwIndex, outArray);
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1:       }
    1:     }
    1:     *aChildArray = outArray;
46885:   }
    1:   *aCount = numPrefs;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: 
    1: /*
    1:  *  nsIPrefBranch2 methods
    1:  */
    1: 
    1: NS_IMETHODIMP nsPrefBranch::AddObserver(const char *aDomain, nsIObserver *aObserver, PRBool aHoldWeak)
    1: {
51303:   PrefCallback *pCallback;
    1:   const char *pref;
    1: 
55147:   NS_ENSURE_ARG(aDomain);
55147:   NS_ENSURE_ARG(aObserver);
    1: 
    1:   // hold a weak reference to the observer if so requested
    1:   if (aHoldWeak) {
    1:     nsCOMPtr<nsISupportsWeakReference> weakRefFactory = do_QueryInterface(aObserver);
    1:     if (!weakRefFactory) {
    1:       // the caller didn't give us a object that supports weak reference... tell them
    1:       return NS_ERROR_INVALID_ARG;
    1:     }
51303: 
51303:     // Construct a PrefCallback with a weak reference to the observer.
51303:     pCallback = new PrefCallback(aDomain, weakRefFactory, this);
51303: 
    1:   } else {
51303:     // Construct a PrefCallback with a strong reference to the observer.
51303:     pCallback = new PrefCallback(aDomain, aObserver, this);
    1:   }
    1: 
51303:   if (mObservers.Get(pCallback)) {
51303:     NS_WARNING("Ignoring duplicate observer.");
51303:     delete pCallback;
51303:     return NS_OK;
51303:   }
47646: 
51303:   PRBool putSucceeded = mObservers.Put(pCallback, pCallback);
51303: 
51303:   if (!putSucceeded) {
51303:     delete pCallback;
51303:     return NS_ERROR_FAILURE;
51303:   }
    1: 
    1:   // We must pass a fully qualified preference name to the callback
51303:   // aDomain == nsnull is the only possible failure, and we trapped it with
55147:   // NS_ENSURE_ARG above.
51303:   pref = getPrefName(aDomain);
    1:   PREF_RegisterCallback(pref, NotifyObserver, pCallback);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::RemoveObserver(const char *aDomain, nsIObserver *aObserver)
    1: {
55147:   NS_ENSURE_ARG(aDomain);
55147:   NS_ENSURE_ARG(aObserver);
    1: 
51303:   nsresult rv = NS_OK;
51303: 
51303:   // If we're in the middle of a call to freeObserverList, don't process this
51303:   // RemoveObserver call -- the observer in question will be removed soon, if
51303:   // it hasn't been already.
51303:   //
51303:   // It's important that we don't touch mObservers in any way -- even a Get()
51303:   // which retuns null might cause the hashtable to resize itself, which will
51303:   // break the Enumerator in freeObserverList.
51303:   if (mFreeingObserverList)
    1:     return NS_OK;
    1: 
51303:   // Remove the relevant PrefCallback from mObservers and get an owning
51303:   // pointer to it.  Unregister the callback first, and then let the owning
51303:   // pointer go out of scope and destroy the callback.
51303:   PrefCallback key(aDomain, aObserver, this);
51303:   nsAutoPtr<PrefCallback> pCallback;
51303:   mObservers.RemoveAndForget(&key, pCallback);
51303:   if (pCallback) {
51303:     // aDomain == nsnull is the only possible failure, trapped above
51303:     const char *pref = getPrefName(aDomain);
51303:     rv = PREF_UnregisterCallback(pref, NotifyObserver, pCallback);
51303:   }
51303: 
51303:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP nsPrefBranch::Observe(nsISupports *aSubject, const char *aTopic, const PRUnichar *someData)
    1: {
    1:   // watch for xpcom shutdown and free our observers to eliminate any cyclic references
    1:   if (!nsCRT::strcmp(aTopic, NS_XPCOM_SHUTDOWN_OBSERVER_ID)) {
    1:     freeObserverList();
    1:   }
    1:   return NS_OK;
    1: }
    1: 
51303: /* static */
51303: nsresult nsPrefBranch::NotifyObserver(const char *newpref, void *data)
    1: {
51303:   PrefCallback *pCallback = (PrefCallback *)data;
51303: 
51303:   nsCOMPtr<nsIObserver> observer = pCallback->GetObserver();
51303:   if (!observer) {
51303:     // The observer has expired.  Let's remove this callback.
51303:     pCallback->GetPrefBranch()->RemoveExpiredCallback(pCallback);
51303:     return NS_OK;
51303:   }
    1: 
    1:   // remove any root this string may contain so as to not confuse the observer
    1:   // by passing them something other than what they passed us as a topic
51303:   PRUint32 len = pCallback->GetPrefBranch()->GetRootLength();
    1:   nsCAutoString suffix(newpref + len);
    1: 
51303:   observer->Observe(static_cast<nsIPrefBranch *>(pCallback->GetPrefBranch()),
    1:                     NS_PREFBRANCH_PREFCHANGE_TOPIC_ID,
    1:                     NS_ConvertASCIItoUTF16(suffix).get());
    1:   return NS_OK;
    1: }
    1: 
51303: PLDHashOperator
51303: FreeObserverFunc(PrefCallback *aKey,
51303:                  nsAutoPtr<PrefCallback> &aCallback,
51303:                  void *aArgs)
51303: {
51303:   // Calling NS_RELEASE below might trigger a call to
51303:   // nsPrefBranch::RemoveObserver, since some classes remove themselves from
51303:   // the pref branch on destruction.  We don't need to worry about this causing
51303:   // double-frees, however, because freeObserverList sets mFreeingObserverList
51303:   // to true, which prevents RemoveObserver calls from doing anything.
51303: 
51303:   nsPrefBranch *prefBranch = aCallback->GetPrefBranch();
51303:   const char *pref = prefBranch->getPrefName(aCallback->GetDomain().get());
51303:   PREF_UnregisterCallback(pref, nsPrefBranch::NotifyObserver, aCallback);
51303: 
51303:   return PL_DHASH_REMOVE;
51303: }
    1: 
    1: void nsPrefBranch::freeObserverList(void)
    1: {
51303:   // We need to prevent anyone from modifying mObservers while we're
51303:   // enumerating over it.  In particular, some clients will call
51303:   // RemoveObserver() when they're destructed; we need to keep those calls from
51303:   // touching mObservers.
51303:   mFreeingObserverList = PR_TRUE;
51303:   mObservers.Enumerate(&FreeObserverFunc, nsnull);
51303:   mFreeingObserverList = PR_FALSE;
    1: }
47646: 
51303: void
51303: nsPrefBranch::RemoveExpiredCallback(PrefCallback *aCallback)
47647: {
51303:   NS_PRECONDITION(aCallback->IsExpired(), "Callback should be expired.");
51303:   mObservers.Remove(aCallback);
47647: }
47647: 
    1: nsresult nsPrefBranch::GetDefaultFromPropertiesFile(const char *aPrefName, PRUnichar **return_buf)
    1: {
    1:   nsresult rv;
    1: 
    1:   // the default value contains a URL to a .properties file
    1:     
    1:   nsXPIDLCString propertyFileURL;
    1:   rv = PREF_CopyCharPref(aPrefName, getter_Copies(propertyFileURL), PR_TRUE);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
    1:   nsCOMPtr<nsIStringBundleService> bundleService =
42314:     mozilla::services::GetStringBundleService();
42314:   if (!bundleService)
42314:     return NS_ERROR_FAILURE;
    1: 
    1:   nsCOMPtr<nsIStringBundle> bundle;
    1:   rv = bundleService->CreateBundle(propertyFileURL,
    1:                                    getter_AddRefs(bundle));
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
    1:   // string names are in unicode
    1:   nsAutoString stringId;
    1:   stringId.AssignASCII(aPrefName);
    1: 
    1:   return bundle->GetStringFromName(stringId.get(), return_buf);
    1: }
    1: 
    1: const char *nsPrefBranch::getPrefName(const char *aPrefName)
    1: {
55147:   NS_ASSERTION(aPrefName, "null pref name!");
55147: 
    1:   // for speed, avoid strcpy if we can:
    1:   if (mPrefRoot.IsEmpty())
    1:     return aPrefName;
    1: 
    1:   // isn't there a better way to do this? this is really kind of gross.
    1:   mPrefRoot.Truncate(mPrefRootLength);
    1:   mPrefRoot.Append(aPrefName);
    1:   return mPrefRoot.get();
    1: }
    1: 
20261: static PLDHashOperator
    1: pref_enumChild(PLDHashTable *table, PLDHashEntryHdr *heh,
    1:                PRUint32 i, void *arg)
    1: {
 3233:   PrefHashEntry *he = static_cast<PrefHashEntry*>(heh);
 3233:   EnumerateData *d = reinterpret_cast<EnumerateData *>(arg);
46885:   if (strncmp(he->key, d->parent, strlen(d->parent)) == 0) {
46885:     d->pref_list->AppendElement(he->key);
    1:   }
    1:   return PL_DHASH_NEXT;
    1: }
    1: 
    1: //----------------------------------------------------------------------------
    1: // nsPrefLocalizedString
    1: //----------------------------------------------------------------------------
    1: 
    1: nsPrefLocalizedString::nsPrefLocalizedString()
    1: {
    1: }
    1: 
    1: nsPrefLocalizedString::~nsPrefLocalizedString()
    1: {
    1: }
    1: 
    1: 
    1: /*
    1:  * nsISupports Implementation
    1:  */
    1: 
    1: NS_IMPL_THREADSAFE_ADDREF(nsPrefLocalizedString)
    1: NS_IMPL_THREADSAFE_RELEASE(nsPrefLocalizedString)
    1: 
    1: NS_INTERFACE_MAP_BEGIN(nsPrefLocalizedString)
    1:     NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIPrefLocalizedString)
    1:     NS_INTERFACE_MAP_ENTRY(nsIPrefLocalizedString)
    1:     NS_INTERFACE_MAP_ENTRY(nsISupportsString)
    1: NS_INTERFACE_MAP_END
    1: 
    1: nsresult nsPrefLocalizedString::Init()
    1: {
    1:   nsresult rv;
    1:   mUnicodeString = do_CreateInstance(NS_SUPPORTS_STRING_CONTRACTID, &rv);
    1: 
    1:   return rv;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPrefLocalizedString::GetData(PRUnichar **_retval)
    1: {
    1:   nsAutoString data;
    1: 
    1:   nsresult rv = GetData(data);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1:   
    1:   *_retval = ToNewUnicode(data);
    1:   if (!*_retval)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPrefLocalizedString::SetData(const PRUnichar *aData)
    1: {
    1:   if (!aData)
    1:     return SetData(EmptyString());
    1:   return SetData(nsDependentString(aData));
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPrefLocalizedString::SetDataWithLength(PRUint32 aLength,
    1:                                          const PRUnichar *aData)
    1: {
    1:   if (!aData)
    1:     return SetData(EmptyString());
    1:   return SetData(Substring(aData, aData + aLength));
    1: }
    1: 
    1: //----------------------------------------------------------------------------
    1: // nsRelativeFilePref
    1: //----------------------------------------------------------------------------
    1: 
    1: NS_IMPL_THREADSAFE_ISUPPORTS1(nsRelativeFilePref, nsIRelativeFilePref)
    1: 
    1: nsRelativeFilePref::nsRelativeFilePref()
    1: {
    1: }
    1: 
    1: nsRelativeFilePref::~nsRelativeFilePref()
    1: {
    1: }
    1: 
    1: NS_IMETHODIMP nsRelativeFilePref::GetFile(nsILocalFile **aFile)
    1: {
    1:   NS_ENSURE_ARG_POINTER(aFile);
    1:   *aFile = mFile;
    1:   NS_IF_ADDREF(*aFile);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsRelativeFilePref::SetFile(nsILocalFile *aFile)
    1: {
    1:   mFile = aFile;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsRelativeFilePref::GetRelativeToKey(nsACString& aRelativeToKey)
    1: {
    1:   aRelativeToKey.Assign(mRelativeToKey);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP nsRelativeFilePref::SetRelativeToKey(const nsACString& aRelativeToKey)
    1: {
    1:   mRelativeToKey.Assign(aRelativeToKey);
    1:   return NS_OK;
    1: }
