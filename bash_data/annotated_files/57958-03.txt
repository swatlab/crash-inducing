    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Simon Fraser <sfraser@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef nsEditingSession_h__
    1: #define nsEditingSession_h__
    1: 
    1: 
    1: #ifndef nsWeakReference_h__
    1: #include "nsWeakReference.h"
    1: #endif
    1: 
    1: #include "nsITimer.h"
14631: #include "nsAutoPtr.h"
    1: 
    1: #ifndef __gen_nsIWebProgressListener_h__
    1: #include "nsIWebProgressListener.h"
    1: #endif
    1: 
    1: #ifndef __gen_nsIEditingSession_h__
    1: #include "nsIEditingSession.h"
    1: #endif
    1: 
    1: #include "nsString.h"
    1: 
    1: #define NS_EDITINGSESSION_CID                            \
    1: { 0xbc26ff01, 0xf2bd, 0x11d4, { 0xa7, 0x3c, 0xe5, 0xa4, 0xb5, 0xa8, 0xbd, 0xfc } }
    1: 
    1: 
    1: class nsIWebProgress;
    1: class nsIDocShell;
    1: class nsIEditorDocShell;
    1: class nsIChannel;
    1: class nsIEditor;
    1: class nsIControllers;
    1: 
    1: class nsComposerCommandsUpdater;
    1: 
    1: class nsEditingSession : public nsIEditingSession,
    1:                          public nsIWebProgressListener,
    1:                          public nsSupportsWeakReference
    1: {
    1: public:
    1: 
    1:                   nsEditingSession();
    1:   virtual         ~nsEditingSession();
    1: 
    1:   // nsISupports
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   // nsIWebProgressListener
    1:   NS_DECL_NSIWEBPROGRESSLISTENER
    1:   
    1:   // nsIEditingSession
    1:   NS_DECL_NSIEDITINGSESSION
    1: 
    1: protected:
    1: 
    1:   nsIDocShell *   GetDocShellFromWindow(nsIDOMWindow *aWindow);
    1:   nsresult        GetEditorDocShellFromWindow(nsIDOMWindow *aWindow, 
    1:                                               nsIEditorDocShell** outDocShell);
    1:   
    1:   nsresult        SetupEditorCommandController(const char *aControllerClassName,
    1:                                                nsIDOMWindow *aWindow,
    1:                                                nsISupports *aContext,
    1:                                                PRUint32 *aControllerId);
    1: 
    1:   nsresult        SetContextOnControllerById(nsIControllers* aControllers, 
    1:                                             nsISupports* aContext,
    1:                                             PRUint32 aID);
    1: 
    1:   nsresult        PrepareForEditing(nsIDOMWindow *aWindow);
    1: 
    1:   static void     TimerCallback(nsITimer *aTimer, void *aClosure);
    1:   nsCOMPtr<nsITimer>  mLoadBlankDocTimer;
    1:   
    1:   // progress load stuff
    1:   nsresult        StartDocumentLoad(nsIWebProgress *aWebProgress,
    1:                                     PRBool isToBeMadeEditable);
    1:   nsresult        EndDocumentLoad(nsIWebProgress *aWebProgress, 
    1:                                   nsIChannel* aChannel, nsresult aStatus,
    1:                                   PRBool isToBeMadeEditable);
    1:   nsresult        StartPageLoad(nsIChannel *aChannel);
    1:   nsresult        EndPageLoad(nsIWebProgress *aWebProgress, 
    1:                               nsIChannel* aChannel, nsresult aStatus);
    1:   
    1:   PRBool          IsProgressForTargetDocument(nsIWebProgress *aWebProgress);
    1: 
14631:   void            RemoveEditorControllers(nsIDOMWindow *aWindow);
14631:   void            RemoveWebProgressListener(nsIDOMWindow *aWindow);
14631:   void            RestoreAnimationMode(nsIDOMWindow *aWindow);
14631:   void            RemoveListenersAndControllers(nsIDOMWindow *aWindow,
14631:                                                 nsIEditor *aEditor);
14631: 
    1: protected:
    1: 
    1:   PRPackedBool    mDoneSetup;    // have we prepared for editing yet?
    1: 
    1:   // Used to prevent double creation of editor because nsIWebProgressListener
    1:   //  receives a STATE_STOP notification before the STATE_START 
    1:   //  for our document, so we wait for the STATE_START, then STATE_STOP 
    1:   //  before creating an editor
    1:   PRPackedBool    mCanCreateEditor; 
    1: 
 2896:   PRPackedBool    mInteractive;
 3199:   PRPackedBool    mMakeWholeDocumentEditable;
 2896: 
 7856:   PRPackedBool    mDisabledJSAndPlugins;
 7856: 
    1:   // True if scripts were enabled before the editor turned scripts
    1:   // off, otherwise false.
    1:   PRPackedBool    mScriptsEnabled;
    1: 
    1:   // True if plugins were enabled before the editor turned plugins
    1:   // off, otherwise false.
    1:   PRPackedBool    mPluginsEnabled;
    1: 
    1:   PRPackedBool    mProgressListenerRegistered;
    1: 
    1:   // The image animation mode before it was turned off.
    1:   PRUint16        mImageAnimationMode;
    1: 
    1:   // THE REMAINING MEMBER VARIABLES WILL BECOME A SET WHEN WE EDIT
    1:   // MORE THAN ONE EDITOR PER EDITING SESSION
14631:   nsRefPtr<nsComposerCommandsUpdater> mStateMaintainer;
    1:   
    1:   // Save the editor type so we can create the editor after loading uri
    1:   nsCString       mEditorType; 
    1:   PRUint32        mEditorFlags;
    1:   PRUint32        mEditorStatus;
    1:   PRUint32        mBaseCommandControllerId;
    1:   PRUint32        mDocStateControllerId;
    1:   PRUint32        mHTMLCommandControllerId;
39590: 
39590:   // Make sure the docshell we use is safe
39590:   nsWeakPtr       mDocShell;
57958: 
57958:   // See if we can reuse an existing editor
57958:   nsWeakPtr       mExistingEditor;
    1: };
    1: 
    1: 
    1: 
    1: #endif // nsEditingSession_h__
