    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* vim:set ts=2 sw=2 sts=2 et cindent: */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla code.
    1:  *
    1:  * The Initial Developer of the Original Code is Google Inc.
    1:  * Portions created by the Initial Developer are Copyright (C) 2006
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *  Darin Fisher <darin@meer.net>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsThreadManager.h"
    1: #include "nsThread.h"
34250: #include "nsThreadUtils.h"
    1: #include "nsIClassInfoImpl.h"
    1: #include "nsTArray.h"
    1: #include "nsAutoPtr.h"
    1: #include "nsAutoLock.h"
    1: 
34731: #ifdef XP_WIN
34731: #include <windows.h>
34731: DWORD gTLSIsMainThreadIndex = TlsAlloc();
34731: #elif defined(NS_TLS)
34250: NS_TLS bool gTLSIsMainThread = false;
34250: #endif
34250: 
    1: typedef nsTArray< nsRefPtr<nsThread> > nsThreadArray;
    1: 
    1: //-----------------------------------------------------------------------------
    1: 
20261: static void
    1: ReleaseObject(void *data)
    1: {
 3233:   static_cast<nsISupports *>(data)->Release();
    1: }
    1: 
20261: static PLDHashOperator
    1: AppendAndRemoveThread(const void *key, nsRefPtr<nsThread> &thread, void *arg)
    1: {
 3233:   nsThreadArray *threads = static_cast<nsThreadArray *>(arg);
    1:   threads->AppendElement(thread);
    1:   return PL_DHASH_REMOVE;
    1: }
    1: 
    1: //-----------------------------------------------------------------------------
    1: 
    1: nsThreadManager nsThreadManager::sInstance;
    1: 
    1: // statically allocated instance
    1: NS_IMETHODIMP_(nsrefcnt) nsThreadManager::AddRef() { return 2; }
    1: NS_IMETHODIMP_(nsrefcnt) nsThreadManager::Release() { return 1; }
    1: NS_IMPL_QUERY_INTERFACE1_CI(nsThreadManager, nsIThreadManager)
    1: NS_IMPL_CI_INTERFACE_GETTER1(nsThreadManager, nsIThreadManager)
    1: 
    1: //-----------------------------------------------------------------------------
    1: 
    1: nsresult
    1: nsThreadManager::Init()
    1: {
    1:   mLock = PR_NewLock();
    1:   if (!mLock)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   if (!mThreadsByPRThread.Init())
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   if (PR_NewThreadPrivateIndex(&mCurThreadIndex, ReleaseObject) == PR_FAILURE)
    1:     return NS_ERROR_FAILURE;
    1: 
    1:   // Setup "main" thread
    1:   mMainThread = new nsThread();
    1:   if (!mMainThread)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1: 
    1:   nsresult rv = mMainThread->InitCurrentThread();
    1:   if (NS_FAILED(rv)) {
    1:     mMainThread = nsnull;
    1:     return rv;
    1:   }
    1: 
    1:   // We need to keep a pointer to the current thread, so we can satisfy
    1:   // GetIsMainThread calls that occur post-Shutdown.
    1:   mMainThread->GetPRThread(&mMainPRThread);
    1: 
34731: #ifdef XP_WIN
34731:   TlsSetValue(gTLSIsMainThreadIndex, (void*) 1);
34731: #elif defined(NS_TLS)
34250:   gTLSIsMainThread = true;
34250: #endif
34250: 
    1:   mInitialized = PR_TRUE;
    1:   return NS_OK;
    1: }
    1: 
    1: void
    1: nsThreadManager::Shutdown()
    1: {
    1:   NS_ASSERTION(NS_IsMainThread(), "shutdown not called from main thread");
    1: 
    1:   // Prevent further access to the thread manager (no more new threads!)
    1:   //
    1:   // XXX What happens if shutdown happens before NewThread completes?
    1:   //     Fortunately, NewThread is only called on the main thread for now.
    1:   //
    1:   mInitialized = PR_FALSE;
    1: 
    1:   // Empty the main thread event queue before we begin shutting down threads.
    1:   NS_ProcessPendingEvents(mMainThread);
    1: 
    1:   // We gather the threads from the hashtable into a list, so that we avoid
    1:   // holding the hashtable lock while calling nsIThread::Shutdown.
    1:   nsThreadArray threads;
    1:   {
    1:     nsAutoLock lock(mLock);
    1:     mThreadsByPRThread.Enumerate(AppendAndRemoveThread, &threads);
    1:   }
    1: 
    1:   // It's tempting to walk the list of threads here and tell them each to stop
    1:   // accepting new events, but that could lead to badness if one of those
    1:   // threads is stuck waiting for a response from another thread.  To do it
    1:   // right, we'd need some way to interrupt the threads.
    1:   // 
    1:   // Instead, we process events on the current thread while waiting for threads
    1:   // to shutdown.  This means that we have to preserve a mostly functioning
    1:   // world until such time as the threads exit.
    1: 
    1:   // Shutdown all threads that require it (join with threads that we created).
    1:   for (PRUint32 i = 0; i < threads.Length(); ++i) {
    1:     nsThread *thread = threads[i];
    1:     if (thread->ShutdownRequired())
    1:       thread->Shutdown();
    1:   }
    1: 
    1:   // In case there are any more events somehow...
    1:   NS_ProcessPendingEvents(mMainThread);
    1: 
    1:   // There are no more background threads at this point.
    1: 
    1:   // Clear the table of threads.
    1:   {
    1:     nsAutoLock lock(mLock);
    1:     mThreadsByPRThread.Clear();
    1:   }
    1: 
29437:   // Normally thread shutdown clears the observer for the thread, but since the
29437:   // main thread is special we do it manually here after we're sure all events
29437:   // have been processed.
29437:   mMainThread->SetObserver(nsnull);
29437: 
    1:   // Release main thread object.
    1:   mMainThread = nsnull;
    1: 
    1:   // Remove the TLS entry for the main thread.
    1:   PR_SetThreadPrivate(mCurThreadIndex, nsnull);
    1: 
    1:   // We don't need this lock anymore.
    1:   PR_DestroyLock(mLock);
    1:   mLock = nsnull;
    1: }
    1: 
    1: void
    1: nsThreadManager::RegisterCurrentThread(nsThread *thread)
    1: {
    1:   NS_ASSERTION(thread->GetPRThread() == PR_GetCurrentThread(), "bad thread");
    1: 
    1:   nsAutoLock lock(mLock);
    1: 
    1:   mThreadsByPRThread.Put(thread->GetPRThread(), thread);  // XXX check OOM?
    1: 
    1:   NS_ADDREF(thread);  // for TLS entry
    1:   PR_SetThreadPrivate(mCurThreadIndex, thread);
    1: }
    1: 
    1: void
    1: nsThreadManager::UnregisterCurrentThread(nsThread *thread)
    1: {
    1:   NS_ASSERTION(thread->GetPRThread() == PR_GetCurrentThread(), "bad thread");
    1: 
    1:   nsAutoLock lock(mLock);
    1: 
    1:   mThreadsByPRThread.Remove(thread->GetPRThread());
    1: 
    1:   PR_SetThreadPrivate(mCurThreadIndex, nsnull);
    1:   // Ref-count balanced via ReleaseObject
    1: }
    1: 
    1: nsThread *
    1: nsThreadManager::GetCurrentThread()
    1: {
    1:   // read thread local storage
    1:   void *data = PR_GetThreadPrivate(mCurThreadIndex);
    1:   if (data)
 3233:     return static_cast<nsThread *>(data);
    1: 
12014:   if (!mInitialized) {
12014:     return nsnull;
12014:   }
12014: 
    1:   // OK, that's fine.  We'll dynamically create one :-)
    1:   nsRefPtr<nsThread> thread = new nsThread();
    1:   if (!thread || NS_FAILED(thread->InitCurrentThread()))
    1:     return nsnull;
    1: 
    1:   return thread.get();  // reference held in TLS
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThreadManager::NewThread(PRUint32 creationFlags, nsIThread **result)
    1: {
    1:   // No new threads during Shutdown
    1:   NS_ENSURE_TRUE(mInitialized, NS_ERROR_NOT_INITIALIZED);
    1: 
    1:   nsThread *thr = new nsThread();
    1:   if (!thr)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   NS_ADDREF(thr);
    1: 
    1:   nsresult rv = thr->Init();
    1:   if (NS_FAILED(rv)) {
    1:     NS_RELEASE(thr);
    1:     return rv;
    1:   }
    1: 
    1:   // At this point, we expect that the thread has been registered in mThread;
    1:   // however, it is possible that it could have also been replaced by now, so
    1:   // we cannot really assert that it was added.
    1: 
    1:   *result = thr;
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThreadManager::GetThreadFromPRThread(PRThread *thread, nsIThread **result)
    1: {
    1:   // Keep this functioning during Shutdown
    1:   NS_ENSURE_TRUE(mMainThread, NS_ERROR_NOT_INITIALIZED);
    1:   NS_ENSURE_ARG_POINTER(thread);
    1: 
    1:   nsRefPtr<nsThread> temp;
    1:   {
    1:     nsAutoLock lock(mLock);
    1:     mThreadsByPRThread.Get(thread, getter_AddRefs(temp));
    1:   }
    1: 
    1:   NS_IF_ADDREF(*result = temp);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThreadManager::GetMainThread(nsIThread **result)
    1: {
    1:   // Keep this functioning during Shutdown
    1:   NS_ENSURE_TRUE(mMainThread, NS_ERROR_NOT_INITIALIZED);
    1:   NS_ADDREF(*result = mMainThread);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThreadManager::GetCurrentThread(nsIThread **result)
    1: {
    1:   // Keep this functioning during Shutdown
    1:   NS_ENSURE_TRUE(mMainThread, NS_ERROR_NOT_INITIALIZED);
    1:   *result = GetCurrentThread();
    1:   if (!*result)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   NS_ADDREF(*result);
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsThreadManager::GetIsMainThread(PRBool *result)
    1: {
    1:   // This method may be called post-Shutdown
    1: 
    1:   *result = (PR_GetCurrentThread() == mMainPRThread);
    1:   return NS_OK;
    1: }
