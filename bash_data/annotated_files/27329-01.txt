    1: dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
    1: dnl vi: set tabstop=4 shiftwidth=4 expandtab:
    1: dnl ***** BEGIN LICENSE BLOCK *****
    1: dnl Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: dnl
    1: dnl The contents of this file are subject to the Mozilla Public License Version
    1: dnl 1.1 (the "License"); you may not use this file except in compliance with
    1: dnl the License. You may obtain a copy of the License at
    1: dnl http://www.mozilla.org/MPL/
    1: dnl
    1: dnl Software distributed under the License is distributed on an "AS IS" basis,
    1: dnl WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: dnl for the specific language governing rights and limitations under the
    1: dnl License.
    1: dnl
    1: dnl The Original Code is this file as it was released upon August 6, 1998.
    1: dnl
    1: dnl The Initial Developer of the Original Code is
    1: dnl Christopher Seawood.
    1: dnl Portions created by the Initial Developer are Copyright (C) 1998-2001
    1: dnl the Initial Developer. All Rights Reserved.
    1: dnl
    1: dnl Contributor(s):
    1: dnl   Jamie Zawinski <jwz@jwz.org>
    1: dnl   gettimeofday args check
    1: dnl   Christopher Blizzard <blizzard@appliedtheory.com>
    1: dnl   gnomefe update & enable-pthreads
    1: dnl   Ramiro Estrugo <ramiro@netscape.com>
    1: dnl   X11 makedepend support
    1: dnl   Insure support.
    1: dnl   Henry Sobotka <sobotka@axess.com>
    1: dnl   OS/2 support
    1: dnl   Dan Mosedale <dmose@mozilla.org>
    1: dnl   LDAP support
    1: dnl   Seth Spitzer <sspitzer@netscape.com>
    1: dnl   xpctools support
    1: dnl   Benjamin Smedberg <benjamin@smedbergs.us>
    1: dnl   Howard Chu <hyc@symas.com>
    1: dnl   MSYS support
    1: dnl   Mark Mentovai <mark@moxienet.com>:
    1: dnl   Mac OS X 10.4 support
    1: dnl   Giorgio Maone <g.maone@informaction.com>
    1: dnl   MSVC l10n compatible version check
 1796: dnl   Ben Turner <mozilla@songbirdnest.com>
    1: dnl
    1: dnl Alternatively, the contents of this file may be used under the terms of
    1: dnl either the GNU General Public License Version 2 or later (the "GPL"), or
    1: dnl the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: dnl in which case the provisions of the GPL or the LGPL are applicable instead
    1: dnl of those above. If you wish to allow use of your version of this file only
    1: dnl under the terms of either the GPL or the LGPL, and not to allow others to
    1: dnl use your version of this file under the terms of the MPL, indicate your
    1: dnl decision by deleting the provisions above and replace them with the notice
    1: dnl and other provisions required by the GPL or the LGPL. If you do not delete
    1: dnl the provisions above, a recipient may use your version of this file under
    1: dnl the terms of any one of the MPL, the GPL or the LGPL.
    1: dnl
    1: dnl ***** END LICENSE BLOCK *****
    1: 
    1: dnl Process this file with autoconf to produce a configure script.
    1: dnl ========================================================
    1: 
    1: AC_PREREQ(2.13)
    1: AC_INIT(config/config.mk)
    1: AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
    1: AC_CANONICAL_SYSTEM
    1: TARGET_CPU="${target_cpu}"
    1: TARGET_VENDOR="${target_vendor}"
    1: TARGET_OS="${target_os}"
    1: 
15396: 
15396: MOZ_DEB_TIMESTAMP=`date +"%a, %d  %b %Y %T %z"   2>&1` 
15396: AC_SUBST(MOZ_DEB_TIMESTAMP)
15396: 
15396: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Don't change the following two lines.  Doing so breaks:
    1: dnl =
    1: dnl = CFLAGS="-foo" ./configure
    1: dnl =
    1: dnl ========================================================
    1: CFLAGS="${CFLAGS=}"
    1: CPPFLAGS="${CPPFLAGS=}"
    1: CXXFLAGS="${CXXFLAGS=}"
    1: LDFLAGS="${LDFLAGS=}"
    1: HOST_CFLAGS="${HOST_CFLAGS=}"
    1: HOST_CXXFLAGS="${HOST_CXXFLAGS=}"
    1: HOST_LDFLAGS="${HOST_LDFLAGS=}"
    1: 
    1: dnl ========================================================
    1: dnl = Preserve certain environment flags passed to configure
    1: dnl = We want sub projects to receive the same flags
    1: dnl = untainted by this configure script
    1: dnl ========================================================
    1: _SUBDIR_CC="$CC"
    1: _SUBDIR_CXX="$CXX"
    1: _SUBDIR_CFLAGS="$CFLAGS"
    1: _SUBDIR_CPPFLAGS="$CPPFLAGS"
    1: _SUBDIR_CXXFLAGS="$CXXFLAGS"
    1: _SUBDIR_LDFLAGS="$LDFLAGS"
    1: _SUBDIR_HOST_CC="$HOST_CC"
    1: _SUBDIR_HOST_CFLAGS="$HOST_CFLAGS"
    1: _SUBDIR_HOST_CXXFLAGS="$HOST_CXXFLAGS"
    1: _SUBDIR_HOST_LDFLAGS="$HOST_LDFLAGS"
    1: _SUBDIR_CONFIG_ARGS="$ac_configure_args"
    1: 
    1: dnl Set the version number of the libs included with mozilla
    1: dnl ========================================================
    1: MOZJPEG=62
 3425: MOZPNG=10217
   25: MOZZLIB=0x1230
    1: NSPR_VERSION=4
    1: NSS_VERSION=3
    1: 
    1: dnl Set the minimum version of toolkit libs used by mozilla
    1: dnl ========================================================
    1: GLIB_VERSION=1.2.0
    1: LIBIDL_VERSION=0.6.3
    1: PERL_VERSION=5.006
27000: PYTHON_VERSION=2.4
14373: CAIRO_VERSION=1.6.0
21056: PANGO_VERSION=1.14.0
12668: GTK2_VERSION=2.10.0
    1: WINDRES_VERSION=2.14.90
    1: W32API_VERSION=3.8
    1: GNOMEVFS_VERSION=2.0
    1: GNOMEUI_VERSION=2.2.0
    1: GCONF_VERSION=1.2.1
    1: LIBGNOME_VERSION=2.0
    1: STARTUP_NOTIFICATION_VERSION=0.8
  643: DBUS_VERSION=0.60
27329: SQLITE_VERSION=3.6.10
23463: LIBNOTIFY_VERSION=0.4
    1: 
    1: MSMANIFEST_TOOL=
    1: 
    1: dnl Set various checks
    1: dnl ========================================================
    1: MISSING_X=
    1: AC_PROG_AWK
    1: 
    1: dnl Initialize the Pthread test variables early so they can be
    1: dnl  overridden by each platform.
    1: dnl ========================================================
    1: USE_PTHREADS=
    1: _PTHREAD_LDFLAGS=""
    1: 
    1: dnl Do not allow a separate objdir build if a srcdir build exists.
    1: dnl ==============================================================
    1: _topsrcdir=`cd \`dirname $0\`; pwd`
    1: _objdir=`pwd`
11967: 
    1: if test "$_topsrcdir" != "$_objdir"
    1: then
    1:   # Check for a couple representative files in the source tree
    1:   _conflict_files=
    1:   for file in $_topsrcdir/Makefile $_topsrcdir/config/autoconf.mk; do
    1:     if test -f $file; then
    1:       _conflict_files="$_conflict_files $file"
    1:     fi
    1:   done
    1:   if test "$_conflict_files"; then
    1:     echo "***"
    1:     echo "*   Your source tree contains these files:"
    1:     for file in $_conflict_files; do
    1:       echo "*         $file"
    1:     done
    1:     cat 1>&2 <<-EOF
    1: 	*   This indicates that you previously built in the source tree.
    1: 	*   A source tree build can confuse the separate objdir build.
    1: 	*
    1: 	*   To clean up the source tree:
    1: 	*     1. cd $_topsrcdir
    1: 	*     2. gmake distclean
    1: 	***
    1: 	EOF
    1:     exit 1
    1:     break
    1:   fi
    1: fi
    1: MOZ_BUILD_ROOT=`pwd`
    1: 
    1: dnl Default to MSVC for win32
    1: dnl ==============================================================
    1: if test -z "$CROSS_COMPILE"; then
    1: case "$target" in
    1: *-cygwin*|*-mingw*|*-msvc*|*-mks*)
    1:     if test -z "$CC"; then CC=cl; fi
    1:     if test -z "$CXX"; then CXX=cl; fi
14341:     if test -z "$CPP"; then CPP="cl -E -nologo"; fi
14341:     if test -z "$CXXCPP"; then CXXCPP="cl -TP -E -nologo"; ac_cv_prog_CXXCPP="$CXXCPP"; fi
    1:     if test -z "$LD"; then LD=link; fi
    1:     if test -z "$AS"; then AS=ml; fi
    1:     if test -z "$MIDL"; then MIDL=midl; fi
    1:     ;;
    1: esac
    1: fi
    1: 
    1: COMPILE_ENVIRONMENT=1
    1: MOZ_ARG_ENABLE_BOOL(compile-environment,
    1: [  --disable-compile-environment
    1:                            Disable compiler/library checks.],
    1:     COMPILE_ENVIRONMENT=1,
    1:     COMPILE_ENVIRONMENT= )
    1: 
16114: MOZ_ARG_WITH_STRING(l10n-base,
16728: [  --with-l10n-base=DIR     path to l10n repositories],
16114:     L10NBASEDIR=$withval)
16114: if test ! -z "$L10NBASEDIR"; then
16114:     if test "$L10NBASEDIR" = "yes" -o "$L10NBASEDIR" = "no"; then
16114:         AC_MSG_ERROR([--with-l10n-base must specify a path])
16114:     elif test -d "$L10NBASEDIR"; then
16114:         L10NBASEDIR=`cd "$L10NBASEDIR" && pwd`
16114:     else
16114:         AC_MSG_ERROR([Invalid value --with-l10n-base, $L10NBASEDIR doesn't exist])
16114:     fi
16114: fi
16114: AC_SUBST(L10NBASEDIR)
16114: 
    1: dnl ========================================================
    1: dnl Checks for compilers.
    1: dnl ========================================================
    1: dnl Set CROSS_COMPILE in the environment when running configure
    1: dnl to use the cross-compile setup for now
    1: dnl ========================================================
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: dnl Do some special WinCE toolchain stuff
    1: case "$target" in
    1: *wince)
22240: 
22240:     MOZ_ARG_WITH_STRING(wince-sdk,
24372:     [  --with-wince-sdk=WINCE_SDK_DIR
24969:                         The path to the Windows CE SDK],
24372:     WINCE_SDK_DIR=$withval)
22240: 
24969:     dnl Default to Windows Mobile components enabled
24969:     WINCE_WINDOWS_MOBILE=1
24969: 
24969:     MOZ_ARG_DISABLE_BOOL(windows-mobile-components,
24969:     [  --disable-windows-mobile-components
24969:          Disable Windows Mobile specific components from CE build],
24969:     WINCE_WINDOWS_MOBILE=,
24969:     WINCE_WINDOWS_MOBILE=1)
24969: 
24969:     if test "$WINCE_WINDOWS_MOBILE"; then
24969:         AC_DEFINE(WINCE_WINDOWS_MOBILE)
24969:     fi
24969: 
25957:     AC_DEFINE(WINCE)
24969:     
22240:     export WINCE=1
22240: 
    1:     echo -----------------------------------------------------------------------------
    1:     echo Building Windows CE Shunt Library and Tool Chain
22240:     echo Using SDK in:
24372:     echo $WINCE_SDK_DIR
    1: 
11967:     ac_exeext=.exe
11967: 
24372:     _pwdw=`pwd -W`
24372:     _pwd=`pwd`
24372:     make WINCE_SDK_DIR="$WINCE_SDK_DIR" TOPSRCDIR="$srcdir" OBJDIR="$_pwdw" -C $srcdir/build/wince/tools
24372: 
24372:     CC="$_pwd/dist/sdk/bin/arm-wince-gcc"
24372:     CXX="$_pwd/dist/sdk/bin/arm-wince-gcc"
24969:     CPP="$_pwd/dist/sdk/bin/arm-wince-gcc -E -nologo"
24969:     CXXCPP="$_pwd/dist/sdk/bin/arm-wince-gcc -TP -E -nologo"
24372:     LD="$_pwd/dist/sdk/bin/arm-wince-link"
24372:     AR="$_pwd/dist/sdk/bin/arm-wince-lib"
24372:     AS="$_pwd/dist/sdk/bin/arm-wince-as"
24372:     RC="$_pwd/dist/sdk/bin/arm-wince-res"
24372: 
24372: 
    1:     echo -----------------------------------------------------------------------------
22240: 
    1:     ;;
    1: esac
    1: 
    1: if test -n "$CROSS_COMPILE" && test "$target" != "$host"; then
    1:     echo "cross compiling from $host to $target"
    1:     cross_compiling=yes
    1: 
    1:     _SAVE_CC="$CC"
    1:     _SAVE_CFLAGS="$CFLAGS"
    1:     _SAVE_LDFLAGS="$LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([for host c compiler])
    1:     AC_CHECK_PROGS(HOST_CC, $HOST_CC gcc cc /usr/ucb/cc cl icc, "")
    1:     if test -z "$HOST_CC"; then
    1:         AC_MSG_ERROR([no acceptable c compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CC])
    1:     AC_MSG_CHECKING([for host c++ compiler])
    1:     AC_CHECK_PROGS(HOST_CXX, $HOST_CXX $CCC c++ g++ gcc CC cxx cc++ cl icc, "")
    1:     if test -z "$HOST_CXX"; then
    1:         AC_MSG_ERROR([no acceptable c++ compiler found in \$PATH])
    1:     fi
    1:     AC_MSG_RESULT([$HOST_CXX])
    1: 
    1:     if test -z "$HOST_CFLAGS"; then
    1:         HOST_CFLAGS="$CFLAGS"
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
    1:         HOST_CXXFLAGS="$CXXFLAGS"
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
    1:         HOST_LDFLAGS="$LDFLAGS"
    1:     fi
    1:     AC_CHECK_PROGS(HOST_RANLIB, $HOST_RANLIB ranlib, ranlib, :)
    1:     AC_CHECK_PROGS(HOST_AR, $HOST_AR ar, ar, :)
    1:     CC="$HOST_CC"
    1:     CFLAGS="$HOST_CFLAGS"
    1:     LDFLAGS="$HOST_LDFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
    1: 
    1:     CC="$HOST_CXX"
    1:     CFLAGS="$HOST_CXXFLAGS"
    1: 
    1:     AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
    1:     AC_TRY_COMPILE([], [return(0);], 
    1: 	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
    1: 	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
    1:     
    1:     CC=$_SAVE_CC
    1:     CFLAGS=$_SAVE_CFLAGS
    1:     LDFLAGS=$_SAVE_LDFLAGS
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl The Darwin cross compiler doesn't necessarily point itself at a
    1:         dnl root that has libraries for the proper architecture, it defaults
    1:         dnl to the system root.  The libraries in the system root on current
    1:         dnl versions of PPC OS X 10.4 aren't fat, so these target compiler
    1:         dnl checks will fail.  Fake a working SDK in that case.
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         _SAVE_CXXFLAGS=$CXXLAGS
    1:         CFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk $CFLAGS"
    1:         CXXFLAGS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk $CXXFLAGS"
    1:         ;;
    1:     esac
    1: 
    1:     AC_CHECK_PROGS(CC, $CC "${target_alias}-gcc" "${target}-gcc", :)
    1:     unset ac_cv_prog_CC
    1:     AC_PROG_CC
    1:     AC_CHECK_PROGS(CXX, $CXX "${target_alias}-g++" "${target}-g++", :)
    1:     unset ac_cv_prog_CXX
    1:     AC_PROG_CXX
    1: 
    1:     case "$build:$target" in
    1:       powerpc-apple-darwin8*:i?86-apple-darwin*)
    1:         dnl Revert the changes made above.  From this point on, the target
    1:         dnl compiler will never be used without applying the SDK to CFLAGS
    1:         dnl (see --with-macos-sdk below).
    1:         CFLAGS=$_SAVE_CFLAGS
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:         ;;
    1:     esac
    1: 
    1:     AC_CHECK_PROGS(RANLIB, $RANLIB "${target_alias}-ranlib" "${target}-ranlib", :)
    1:     AC_CHECK_PROGS(AR, $AR "${target_alias}-ar" "${target}-ar", :)
25869:     MOZ_PATH_PROGS(AS, $AS "${target_alias}-as" "${target}-as", :)
    1:     AC_CHECK_PROGS(LD, $LD "${target_alias}-ld" "${target}-ld", :)
    1:     AC_CHECK_PROGS(STRIP, $STRIP "${target_alias}-strip" "${target}-strip", :)
    1:     AC_CHECK_PROGS(WINDRES, $WINDRES "${target_alias}-windres" "${target}-windres", :)
    1:     AC_DEFINE(CROSS_COMPILE)
    1: else
    1:     AC_PROG_CC
    1:     AC_PROG_CXX
    1:     AC_PROG_RANLIB
25869:     MOZ_PATH_PROGS(AS, $AS as, $CC)
    1:     AC_CHECK_PROGS(AR, ar, :)
    1:     AC_CHECK_PROGS(LD, ld, :)
    1:     AC_CHECK_PROGS(STRIP, strip, :)
    1:     AC_CHECK_PROGS(WINDRES, windres, :)
    1:     if test -z "$HOST_CC"; then
    1:         HOST_CC="$CC"
    1:     fi
    1:     if test -z "$HOST_CFLAGS"; then
    1:         HOST_CFLAGS="$CFLAGS"
    1:     fi
    1:     if test -z "$HOST_CXX"; then
    1:         HOST_CXX="$CXX"
    1:     fi
    1:     if test -z "$HOST_CXXFLAGS"; then
    1:         HOST_CXXFLAGS="$CXXFLAGS"
    1:     fi
    1:     if test -z "$HOST_LDFLAGS"; then
    1:         HOST_LDFLAGS="$LDFLAGS"
    1:     fi
    1:     if test -z "$HOST_RANLIB"; then
    1:         HOST_RANLIB="$RANLIB"
    1:     fi
    1:     if test -z "$HOST_AR"; then
    1:        HOST_AR="$AR"
    1:     fi
    1: fi
    1: 
    1: GNU_AS=
    1: GNU_LD=
    1: GNU_CC=
    1: GNU_CXX=
    1: CC_VERSION='N/A'
    1: CXX_VERSION='N/A'
    1: if test "$GCC" = "yes"; then
    1:     GNU_CC=1
    1:     CC_VERSION=`$CC -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "$GXX" = "yes"; then
    1:     GNU_CXX=1
    1:     CXX_VERSION=`$CXX -v 2>&1 | grep 'gcc version'`
    1: fi
    1: if test "`echo | $AS -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_AS=1
    1: fi
    1: if test "`echo | $LD -v 2>&1 | grep -c GNU`" != "0"; then
    1:     GNU_LD=1
    1: fi
    1: if test "$GNU_CC"; then
    1:     if `$CC -print-prog-name=ld` -v 2>&1 | grep -c GNU >/dev/null; then
    1:         GCC_USE_GNU_LD=1
    1:     fi
    1: fi
    1: 
13232: INTEL_CC=
13232: INTEL_CXX=
13232: if test "$GCC" = yes; then
13232:    if test "`$CC -help 2>&1 | grep -c 'Intel(R) C Compiler'`" != "0"; then
13232:      INTEL_CC=1
13232:    fi
13232: fi
13232: 
13232: if test "$GXX" = yes; then
13232:    if test "`$CXX -help 2>&1 | grep -c 'Intel(R) C++ Compiler'`" != "0"; then
13232:      INTEL_CXX=1
13232:    fi
13232: fi
13232: 
    1: dnl Special win32 checks
    1: dnl ========================================================
    1: case "$target" in
    1: *-wince)
11967:     WINVER=500
    1:     ;;
    1: *)
    1:     if test -n "$GNU_CC"; then  
    1:         WINVER=501
    1:     else    
    1:         WINVER=500
    1:     fi
    1:     ;;
    1: esac
    1: 
    1: MOZ_ARG_WITH_STRING(windows-version,
    1: [  --with-windows-version=WINVER
    1:                           Minimum Windows version (WINVER) to support
    1:                               400: Windows 95
    1:                               500: Windows 2000
    1:                               501: Windows XP],
    1:   WINVER=$withval)
    1: 
    1: case "$WINVER" in
    1: 400|500|501)
    1:     ;;
    1: 
    1: *)
    1:     AC_MSG_ERROR([Invalid value --with-windows-version, must be 400, 500 or 501]);
    1:     ;;
    1: 
    1: esac
    1: 
    1: case "$target" in
    1: *-cygwin*|*-mingw*|*-msvc*|*-mks*|*-wince)
    1:     if test "$GCC" != "yes"; then
    1:         # Check to see if we are really running in a msvc environemnt
    1:         _WIN32_MSVC=1
    1:         AC_CHECK_PROGS(MIDL, midl)
    1: 
    1:         # Make sure compilers are valid
    1:         CFLAGS="$CFLAGS -TC -nologo"
    1:         CXXFLAGS="$CXXFLAGS -TP -nologo"
    1:         AC_LANG_SAVE
    1:         AC_LANG_C
    1:         AC_TRY_COMPILE([#include <stdio.h>],
    1:             [ printf("Hello World\n"); ],,
    1:             AC_MSG_ERROR([\$(CC) test failed.  You must have MS VC++ in your path to build.]) )
    1: 
    1:         AC_LANG_CPLUSPLUS
    1:         AC_TRY_COMPILE([#include <new.h>],
    1:             [ unsigned *test = new unsigned(42); ],,
    1:             AC_MSG_ERROR([\$(CXX) test failed.  You must have MS VC++ in your path to build.]) )
    1:         AC_LANG_RESTORE
    1:         
    1:         changequote(,)
12601:         _MSVC_VER_FILTER='s|.* ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?).*|\1|p'
    1:         changequote([,])
    1:         
    1:         # Determine compiler version
12601:         CC_VERSION=`"${CC}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CC_MAJOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _CC_MINOR_VERSION=`echo ${CC_VERSION} | $AWK -F\. '{ print $2 }'`
12601:         _CC_RELEASE=`echo ${CC_VERSION} | $AWK -F\. '{ print $3 }'`
12601:         _CC_BUILD=`echo ${CC_VERSION} | $AWK -F\. '{ print $4 }'`
    1:         _MSC_VER=${_CC_MAJOR_VERSION}${_CC_MINOR_VERSION}
    1: 
12601:         CXX_VERSION=`"${CXX}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _CXX_MAJOR_VERSION=`echo ${CXX_VERSION} | $AWK -F\. '{ print $1 }'`
    1: 
    1:         if test "$_CC_MAJOR_VERSION" != "$_CXX_MAJOR_VERSION"; then
    1:             AC_MSG_ERROR([The major versions of \$CC and \$CXX do not match.])
    1:         fi
    1:         if test "$_CC_MAJOR_VERSION" = "12"; then
    1:             _CC_SUITE=6
    1:         elif test "$_CC_MAJOR_VERSION" = "13"; then
    1:             _CC_SUITE=7
    1:         elif test "$_CC_MAJOR_VERSION" = "14"; then
    1:             _CC_SUITE=8
    1:             CXXFLAGS="$CXXFLAGS -Zc:wchar_t-"
12601:             dnl -DYNAMICBASE is only supported on VC8SP1 or newer,
12601:             dnl so be very specific here!
12601:             dnl VC8 is 14.00.50727.42, VC8SP1 is 14.00.50727.762
12601:             if test $_CC_RELEASE -gt 50727; then
12601:                _USE_DYNAMICBASE=1
12601:             elif test $_CC_BUILD -ge 762; then
12601:                _USE_DYNAMICBASE=1
12601:             fi
    1:             AC_DEFINE(_CRT_SECURE_NO_DEPRECATE)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_DEPRECATE)
    1:         elif test "$_CC_MAJOR_VERSION" = "15"; then
    1:             _CC_SUITE=9
    1:             CXXFLAGS="$CXXFLAGS -Zc:wchar_t-"
15225:             LDFLAGS="$LDFLAGS -MANIFESTUAC:NO"
12601:             _USE_DYNAMICBASE=1
    1:             AC_DEFINE(_CRT_SECURE_NO_WARNINGS)
    1:             AC_DEFINE(_CRT_NONSTDC_NO_WARNINGS)
    1:         else
    1:             AC_MSG_ERROR([This version of the MSVC compiler, $CC_VERSION , is unsupported.])
    1:         fi
    1: 
    1:         _MOZ_RTTI_FLAGS_ON='-GR'
    1:         _MOZ_RTTI_FLAGS_OFF='-GR-'
    1:         _MOZ_EXCEPTIONS_FLAGS_ON='-EHsc'
    1:         _MOZ_EXCEPTIONS_FLAGS_OFF=''
    1: 
    1:         if test -n "$WIN32_REDIST_DIR"; then
    1:             WIN32_REDIST_DIR=`cd "$WIN32_REDIST_DIR" && pwd`
    1:         fi
    1: 	
    1:         # bug #249782
    1:         # ensure that mt.exe is Microsoft (R) Manifest Tool and not magnetic tape manipulation utility (or something else)
    1:         if test "$_CC_SUITE" -ge "8"; then
  735:                 changequote(,)
  735:                 _MSMT_VER_FILTER='s|.* \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*|\1|p'
  735:                 changequote([,])
  735: 
    1:                 MSMT_TOOL=`mt 2>&1|grep 'Microsoft (R) Manifest Tool'`
  735:                 if test -n "$MSMT_TOOL"; then
  735:                         MSMANIFEST_TOOL_VERSION=`echo ${MSMT_TOOL}|sed -ne "$_MSMT_VER_FILTER"`
  735:                         if test -z "$MSMANIFEST_TOOL_VERSION"; then
    1:                                 AC_MSG_WARN([Unknown version of the Microsoft (R) Manifest Tool.])
    1:                         fi
    1:                         MSMANIFEST_TOOL=1
    1:                         unset MSMT_TOOL
    1:                 else
    1:                         AC_MSG_ERROR([Microsoft (R) Manifest Tool must be in your \$PATH.])
    1:                 fi
    1:         fi
    1: 
    1:         # Check linker version
12601:         _LD_FULL_VERSION=`"${LD}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _LD_MAJOR_VERSION=`echo ${_LD_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         if test "$_LD_MAJOR_VERSION" != "$_CC_SUITE"; then
    1:             AC_MSG_ERROR([The linker major version, $_LD_FULL_VERSION,  does not match the compiler suite version, $_CC_SUITE.])
    1:         fi
    1:         INCREMENTAL_LINKER=1
    1: 
    1:         # Check midl version
12601:         _MIDL_FULL_VERSION=`"${MIDL}" -v 2>&1 | sed -nre "$_MSVC_VER_FILTER"`
    1:         _MIDL_MAJOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:         _MIDL_MINOR_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:         _MIDL_REV_VERSION=`echo ${_MIDL_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:         # Add flags if necessary
    1:         AC_MSG_CHECKING([for midl flags])
24005:         case "$target" in
24005:         i*86-*)
24005:             if test \( "$_MIDL_MAJOR_VERSION" = "7" -a "$_MIDL_MINOR_VERSION" = "00" -a "$_MIDL_REV_VERSION" = "0499" \); then
24005:                 # MIDL version 7.00.0499 defaults /env win64 on x64 platforms.
24005:                 # MIDL version 7.00.0500 or later has no problem.
24005:                 MIDL_FLAGS="${MIDL_FLAGS} -env win32"
24005:                 AC_MSG_RESULT([need -env win32])
24005:             else
    1:                 AC_MSG_RESULT([none needed])
    1:             fi
24005:             ;;
24005:         *)
23433:             AC_MSG_RESULT([none needed])
24005:             ;;
24005:         esac
    1: 
25340:         # Identify which version of the SDK we're building with
25340:         # Windows Server 2008 and newer SDKs have WinSDKVer.h, get the version
25340:         # from there
25340:         AC_CHECK_HEADERS([winsdkver.h])
25340:         if test "$ac_cv_header_winsdkver_h" = "yes"; then
25340:             # Get the highest _WIN32_WINNT and NTDDI versions supported
25340:             # Take the higher of the two
25340:             # This is done because the Windows 7 beta SDK reports its
25340:             # NTDDI_MAXVER to be 0x06000100 instead of 0x06010000, as it should
25340:             AC_CACHE_CHECK(for highest Windows version supported by this SDK,
25340:                            ac_cv_winsdk_maxver,
25340:                            [cat > conftest.h <<EOF
25340: #include <winsdkver.h>
25340: #include <sdkddkver.h>
25340: 
25340: #if (NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER) > NTDDI_MAXVER)
25340: #define WINSDK_MAXVER NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT_MAXVER)
25340: #else
25340: #define WINSDK_MAXVER NTDDI_MAXVER
25340: #endif
25340: 
25340: WINSDK_MAXVER
25340: EOF
25340:                             ac_cv_winsdk_maxver=`$CPP conftest.h 2>/dev/null | tail -n1`
25340:                             rm -f conftest.h
25340:                            ])
25340:             MOZ_WINSDK_MAXVER=${ac_cv_winsdk_maxver}
25340:         else
25340:             # The Vista SDK is the only one to have sdkddkver.h but not
25340:             # WinSDKVer.h
25340:             AC_CHECK_HEADERS([sdkddkver.h])
25340:             if test "$ac_cv_header_sdkddkver_h" = "yes"; then
25340:                 MOZ_WINSDK_MAXVER=0x06000000
25340:             else
25340:                 # Assume the Server 2003 Platform SDK
25340:                 MOZ_WINSDK_MAXVER=0x05020000
25340:             fi
25340:         fi
25340: 
    1:         unset _MSVC_VER_FILTER
    1: 
    1:     else
    1:         # Check w32api version
    1:         _W32API_MAJOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _W32API_MINOR_VERSION=`echo $W32API_VERSION | $AWK -F\. '{ print $2 }'`
    1:         AC_MSG_CHECKING([for w32api version >= $W32API_VERSION])
    1:         AC_TRY_COMPILE([#include <w32api.h>],
    1:             #if (__W32API_MAJOR_VERSION < $_W32API_MAJOR_VERSION) || \
    1:                 (__W32API_MAJOR_VERSION == $_W32API_MAJOR_VERSION && \
    1:                  __W32API_MINOR_VERSION < $_W32API_MINOR_VERSION)
    1:                 #error "test failed."
    1:             #endif
    1:             , [ res=yes ], [ res=no ])
    1:         AC_MSG_RESULT([$res])
    1:         if test "$res" != "yes"; then
    1:             AC_MSG_ERROR([w32api version $W32API_VERSION or higher required.])
    1:         fi
    1:         # Check windres version
    1:         AC_MSG_CHECKING([for windres version >= $WINDRES_VERSION])
    1:         _WINDRES_VERSION=`${WINDRES} --version 2>&1 | grep -i windres 2>/dev/null | $AWK '{ print $3 }'`
    1:         AC_MSG_RESULT([$_WINDRES_VERSION])
    1:         _WINDRES_MAJOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         _WINDRES_MINOR_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         _WINDRES_RELEASE_VERSION=`echo $_WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         WINDRES_MAJOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $1 }'`
    1:         WINDRES_MINOR_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $2 }'`
    1:         WINDRES_RELEASE_VERSION=`echo $WINDRES_VERSION | $AWK -F\. '{ print $3 }'`
    1:         if test "$_WINDRES_MAJOR_VERSION" -lt "$WINDRES_MAJOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -lt "$WINDRES_MINOR_VERSION" -o \
    1:                 "$_WINDRES_MAJOR_VERSION" -eq "$WINDRES_MAJOR_VERSION" -a \
    1:                 "$_WINDRES_MINOR_VERSION" -eq "$WINDRES_MINOR_VERSION" -a \
    1:                 "$_WINDRES_RELEASE_VERSION" -lt "$WINDRES_RELEASE_VERSION"
    1:         then
    1:             AC_MSG_ERROR([windres version $WINDRES_VERSION or higher is required to build.])
    1:         fi
25340: 
25340:         # Server 2003 is the highest version supported
25340:         MOZ_WINSDK_MAXVER=0x05020000
    1:     fi # !GNU_CC
    1: 
    1:     AC_DEFINE_UNQUOTED(WINVER,0x$WINVER)
    1:     AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x$WINVER)
  629:     # Require OS features provided by IE 5.0
  629:     AC_DEFINE_UNQUOTED(_WIN32_IE,0x0500)
27000:     # we need Python 2.5 on Windows
27000:     PYTHON_VERSION=2.5
    1:     ;;
    1: esac
    1: 
    1: dnl Test breaks icc on OS/2 && MSVC
    1: if test "$CC" != "icc" -a -z "$_WIN32_MSVC"; then
    1:     AC_PROG_CC_C_O
    1:     if grep "NO_MINUS_C_MINUS_O 1" ./confdefs.h >/dev/null; then
    1:         USING_HCC=1
    1:         _OLDCC=$CC
    1:         _OLDCXX=$CXX
    1:         CC="${srcdir}/build/hcc '$CC'"
    1:         CXX="${srcdir}/build/hcpp '$CXX'"
    1:     fi
    1: fi
    1: 
    1: AC_PROG_CPP
    1: AC_PROG_CXXCPP
    1: 
14341: if test -n "$_WIN32_MSVC"; then
14341:     SKIP_PATH_CHECKS=1
14341:     SKIP_COMPILER_CHECKS=1
14341:     SKIP_LIBRARY_CHECKS=1
23834: 
23834:     # Since we're skipping compiler and library checks, hard-code
23834:     # some facts here.
23834:     case "$target" in
23834:     *-wince)
23834:         ;;
23834:     *)
23834:         AC_DEFINE(HAVE_IO_H)
23834:         AC_DEFINE(HAVE_SETBUF)
23834:         AC_DEFINE(HAVE_ISATTY)
23834:         ;;
23834:     esac
14341: fi
14341: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MIDL_FLAGS)
    1: AC_SUBST(_MSC_VER)
    1: 
    1: AC_SUBST(GNU_AS)
    1: AC_SUBST(GNU_LD)
    1: AC_SUBST(GNU_CC)
    1: AC_SUBST(GNU_CXX)
13232: AC_SUBST(INTEL_CC)
13232: AC_SUBST(INTEL_CXX)
    1: 
    1: dnl ========================================================
    1: dnl Checks for programs.
    1: dnl ========================================================
    1: AC_PROG_INSTALL
    1: AC_PROG_LN_S
25869: MOZ_PATH_PROGS(PERL, $PERL perl5 perl )
    1: if test -z "$PERL" || test "$PERL" = ":"; then
    1:     AC_MSG_ERROR([perl not found in \$PATH])
    1: fi
    1: 
    1: if test -z "$TINDERBOX_SKIP_PERL_VERSION_CHECK"; then
    1: AC_MSG_CHECKING([for minimum required perl version >= $PERL_VERSION])
    1: _perl_version=`PERL_VERSION=$PERL_VERSION $PERL -e 'print "$]"; if ($] >= $ENV{PERL_VERSION}) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: AC_MSG_RESULT([$_perl_version])
    1: 
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_ERROR([Perl $PERL_VERSION or higher is required.])
    1: fi
    1: fi
    1: 
    1: AC_MSG_CHECKING([for full perl installation])
    1: _perl_archlib=`$PERL -e 'use Config; if ( -d $Config{archlib} ) { exit(0); } else { exit(1); }' 2>&5`
    1: _perl_res=$?
    1: if test "$_perl_res" != 0; then
    1:     AC_MSG_RESULT([no])
    1:     AC_MSG_ERROR([Cannot find Config.pm or \$Config{archlib}.  A full perl installation is required.])
    1: else
    1:     AC_MSG_RESULT([yes])    
    1: fi
    1: 
27000: MOZ_PATH_PROGS(PYTHON, $PYTHON python2.5 python2.4 python)
    1: if test -z "$PYTHON"; then
    1:     AC_MSG_ERROR([python was not found in \$PATH])
    1: fi
    1: 
27000: dnl We require version 2.4 or newer of Python to build,
27000: dnl and 2.5 or newer on Windows.
27000: AC_MSG_CHECKING([for minimum required Python version >= $PYTHON_VERSION])
27000: changequote(,)
27000: $PYTHON -c "import sys; sys.exit(sys.version[:3] < sys.argv[1])" $PYTHON_VERSION
27000: _python_res=$?
27000: changequote([,])
27000: if test "$_python_res" != 0; then
27000:     AC_MSG_ERROR([Python $PYTHON_VERSION or higher is required.])
27000: fi
27000: AC_MSG_RESULT([yes])
27000: 
25869: MOZ_PATH_PROGS(NSINSTALL_BIN, nsinstall )
 3564: if test -z "$COMPILE_ENVIRONMENT"; then
 3564: if test -z "$NSINSTALL_BIN" || test "$NSINSTALL_BIN" = ":"; then
 3564:     NSINSTALL_BIN='$(PYTHON) $(topsrcdir)/config/nsinstall.py'
 3564: fi
 3564: fi
 3564: AC_SUBST(NSINSTALL_BIN)
 3564: 
25869: MOZ_PATH_PROG(DOXYGEN, doxygen, :)
25869: MOZ_PATH_PROG(WHOAMI, whoami, :)
25869: MOZ_PATH_PROG(AUTOCONF, autoconf, :)
25869: MOZ_PATH_PROG(UNZIP, unzip, :)
25869: MOZ_PATH_PROGS(ZIP, zip)
    1: if test -z "$ZIP" || test "$ZIP" = ":"; then
    1:     AC_MSG_ERROR([zip not found in \$PATH])
    1: fi
25869: MOZ_PATH_PROG(SYSTEM_MAKEDEPEND, makedepend)
25869: MOZ_PATH_PROG(XARGS, xargs)
    1: if test -z "$XARGS" || test "$XARGS" = ":"; then
    1:     AC_MSG_ERROR([xargs not found in \$PATH .])
    1: fi
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: dnl ========================================================
    1: dnl = Mac OS X toolchain support
    1: dnl ========================================================
    1: 
    1: case "$target_os" in
    1: darwin*)
    1:     dnl Current known valid versions for GCC_VERSION are 2.95.2 3.1 3.3 4.0.
    1:     dnl 4.0 identifies itself as 4.0.x, so strip the decidecimal for
    1:     dnl the environment and includedir purposes (when using an SDK, below),
    1:     dnl but remember the full version number for the libdir (SDK).
    1:     changequote(,)
    1:     GCC_VERSION_FULL=`echo $CXX_VERSION | $PERL -pe 's/^.*gcc version ([^ ]*).*/$1/'`
    1:     GCC_VERSION=`echo $GCC_VERSION_FULL | $PERL -pe '(split(/\./))[0]>=4&&s/(^\d*\.\d*).*/$1/;'`
    1:     changequote([,])
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:         dnl Bug 280479, but this keeps popping up in bug 292530 too because
    1:         dnl 4.0.0/4061 is the default compiler in Tiger.
    1:         changequote(,)
    1:         GCC_BUILD=`echo $CXX_VERSION | $PERL -pe 's/^.*build ([^ )]*).*/$1/'`
    1:         changequote([,])
    1:         if test "$GCC_BUILD" = "4061" ; then
    1:             AC_MSG_ERROR([You are attempting to use Apple gcc 4.0 build 4061.
    1: This compiler was supplied with Xcode 2.0, and contains bugs that prevent it
 3572: from building Mozilla. Upgrade to Xcode 2.1 or later.])
    1:         fi
    1:     fi
    1: 
    1:     dnl xcodebuild needs GCC_VERSION defined in the environment, since it
    1:     dnl doesn't respect the CC/CXX setting.  With GCC_VERSION set, it will use
    1:     dnl /usr/bin/g(cc|++)-$GCC_VERSION.
25869:     MOZ_PATH_PROGS(PBBUILD, pbbuild xcodebuild pbxbuild)
    1: 
    1:     case "$PBBUILD" in
    1:       *xcodebuild*)
    1:         changequote(,)
13032:         XCODEBUILD_VERSION=`$PBBUILD -version 2>/dev/null | xargs | sed -e 's/.*DevToolsCore-\([0-9]*\).*/\1/'`
    1:         changequote([,])
    1:         if test -n "$XCODEBUILD_VERSION" && test "$XCODEBUILD_VERSION" -ge 620 ; then
    1:           HAS_XCODE_2_1=1;
    1:         fi
    1:       ;;
    1:     esac
    1: 
    1:     dnl sdp was formerly in /Developer/Tools.  As of Mac OS X 10.4 (Darwin 8),
    1:     dnl it has moved into /usr/bin.
25869:     MOZ_PATH_PROG(SDP, sdp, :, [$PATH:/usr/bin:/Developer/Tools])
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(GCC_VERSION)
    1: AC_SUBST(XCODEBUILD_VERSION)
    1: AC_SUBST(HAS_XCODE_2_1)
    1: 
    1: dnl The universal machinery sets UNIVERSAL_BINARY to inform packager.mk
    1: dnl that a universal binary is being produced.
    1: AC_SUBST(UNIVERSAL_BINARY)
    1: 
    1: dnl ========================================================
 8484: dnl Check for MacOS deployment target version
 8484: dnl ========================================================
 8484: 
 8484: MOZ_ARG_ENABLE_STRING(macos-target,
 8484:                       [  --enable-macos-target=VER (default=10.4)
 8484:                           Set the minimum MacOS version needed at runtime],
 8484:                       [_MACOSX_DEPLOYMENT_TARGET=$enableval])
 8484: 
 8484: case "$target" in
 8484: *-darwin*)
 8484:     if test -n "$_MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl Use the specified value
 8484:         export MACOSX_DEPLOYMENT_TARGET=$_MACOSX_DEPLOYMENT_TARGET
13232:         AC_DEFINE_UNQUOTED(__ENVIRONMENT_MAC_OS_X_VERION_MIN_REQUIRED__,$_MACOSX_DEPLOYMENT_TARGET)
 8484:     elif test -z "$MACOSX_DEPLOYMENT_TARGET" ; then
 8484:         dnl No value specified on the command line or in the environment,
 8484:         dnl use the lesser of the application's minimum or the architecture's
 8484:         dnl minimum.
 8484:         export MACOSX_DEPLOYMENT_TARGET=10.4
 8484:     fi
 8484:     ;;
 8484: esac
 8484: 
 8484: AC_SUBST(MACOSX_DEPLOYMENT_TARGET)
 8484: 
 8484: dnl ========================================================
    1: dnl = Mac OS X SDK support
    1: dnl ========================================================
    1: MACOS_SDK_DIR=
    1: NEXT_ROOT=
    1: MOZ_ARG_WITH_STRING(macos-sdk,
    1: [  --with-macos-sdk=dir   Location of platform SDK to use (Mac OS X only)],
    1:     MACOS_SDK_DIR=$withval)
    1: 
    1: dnl MACOS_SDK_DIR will be set to the SDK location whenever one is in use.
    1: dnl NEXT_ROOT will be set and exported only if it's needed.
    1: AC_SUBST(MACOS_SDK_DIR)
    1: AC_SUBST(NEXT_ROOT)
    1: 
    1: if test "$MACOS_SDK_DIR"; then
    1:   dnl Sync this section with the ones in NSPR and NSS.
    1:   dnl Changes to the cross environment here need to be accounted for in
    1:   dnl the libIDL checks (below) and xpidl build.
    1: 
    1:   if test ! -d "$MACOS_SDK_DIR"; then
    1:     AC_MSG_ERROR([SDK not found.  When using --with-macos-sdk, you must
    1: specify a valid SDK.  SDKs are installed when the optional cross-development
    1: tools are selected during the Xcode/Developer Tools installation.])
    1:   fi
    1: 
    1:   GCC_VERSION_MAJOR=`echo $GCC_VERSION_FULL | $PERL -pe 's/(^\d*).*/$1/;'`
    1:   if test "$GCC_VERSION_MAJOR" -lt "4" ; then
    1:     SDK_C_INCLUDE="-isystem ${MACOS_SDK_DIR}/usr/include/gcc/darwin/${GCC_VERSION} -isystem ${MACOS_SDK_DIR}/usr/include -F${MACOS_SDK_DIR}/System/Library/Frameworks"
    1:     if test -d "${MACOS_SDK_DIR}/Library/Frameworks" ; then
    1:       SDK_C_INCLUDE="$SDK_C_INCLUDE -F${MACOS_SDK_DIR}/Library/Frameworks"
    1:     fi
    1:     SDK_CXX_INCLUDE="-I${MACOS_SDK_DIR}/usr/include/gcc/darwin/${GCC_VERSION}/c++ -I${MACOS_SDK_DIR}/usr/include/gcc/darwin/${GCC_VERSION}/c++/ppc-darwin -I${MACOS_SDK_DIR}/usr/include/gcc/darwin/${GCC_VERSION}/c++/backward"
    1: 
    1:     CFLAGS="$CFLAGS -nostdinc ${SDK_C_INCLUDE}"
    1:     CXXFLAGS="$CXXFLAGS -nostdinc -nostdinc++ ${SDK_CXX_INCLUDE} ${SDK_C_INCLUDE}"
    1: 
    1:     dnl CPP/CXXCPP needs to be set for AC_CHECK_HEADER.
    1:     CPP="$CPP -nostdinc ${SDK_C_INCLUDE}"
    1:     CXXCPP="$CXXCPP -nostdinc -nostdinc++ ${SDK_CXX_INCLUDE} ${SDK_C_INCLUDE}"
    1: 
    1:     dnl ld support for -syslibroot is compiler-agnostic, but only available
    1:     dnl on Tiger.  Although it's possible to switch on the build host's
    1:     dnl OS release to use ld -syslibroot when available, ld -syslibroot will
    1:     dnl cause warnings as long as NEXT_ROOT is set.  NEXT_ROOT should be
    1:     dnl set because both the compiler and linker use it.
    1:     LIBS="-L${MACOS_SDK_DIR}/usr/lib/gcc/darwin -L${MACOS_SDK_DIR}/usr/lib/gcc/darwin/${GCC_VERSION_FULL} -L${MACOS_SDK_DIR}/usr/lib $LIBS"
    1:     export NEXT_ROOT=$MACOS_SDK_DIR
    1: 
    1:     if test -n "$CROSS_COMPILE" ; then
    1:       dnl NEXT_ROOT will be in the environment, but it shouldn't be set for
    1:       dnl the build host.  HOST_CXX is presently unused.
    1:       HOST_CC="NEXT_ROOT= $HOST_CC"
    1:       HOST_CXX="NEXT_ROOT= $HOST_CXX"
    1:     fi
    1:   else
    1:     dnl gcc >= 4.0 uses different paths than above, but knows how to find
    1:     dnl them itself.
    1:     CFLAGS="$CFLAGS -isysroot ${MACOS_SDK_DIR}"
    1:     CXXFLAGS="$CXXFLAGS -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     dnl CPP/CXXCPP needs to be set for AC_CHECK_HEADER.
    1:     CPP="$CPP -isysroot ${MACOS_SDK_DIR}"
    1:     CXXCPP="$CXXCPP -isysroot ${MACOS_SDK_DIR}"
    1: 
    1:     if test "$GCC_VERSION_FULL" = "4.0.0" ; then
    1:       dnl If gcc >= 4.0, we're guaranteed to be on Tiger, which has an ld
    1:       dnl that supports -syslibroot.  Don't set NEXT_ROOT because it will
    1:       dnl be ignored and cause warnings when -syslibroot is specified.
    1:       dnl gcc 4.0.1 will pass -syslibroot to ld automatically based on
    1:       dnl the -isysroot it receives, so this is only needed with 4.0.0.
    1:       LDFLAGS="$LDFLAGS -Wl,-syslibroot,${MACOS_SDK_DIR}"
    1:     fi
    1:   fi
    1: 
    1:   AC_LANG_SAVE
    1:   AC_MSG_CHECKING([for valid compiler/Mac OS X SDK combination])
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([#include <new>
    1:                  int main() { return 0; }],
    1:    result=yes,
    1:    result=no)
    1:   AC_LANG_RESTORE
    1:   AC_MSG_RESULT($result)
    1: 
    1:   if test "$result" = "no" ; then
    1:     AC_MSG_ERROR([The selected compiler and Mac OS X SDK are incompatible.])
    1:   fi
    1: fi
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl Be sure the make we use is GNU make.
    1: dnl on win32, gmake.exe is the generally the wrong version
26777: if test -n "$MAKE"; then
26777:   if test `echo $MAKE | grep -c make.py` != 1; then
26777:      NOT_PYMAKE=$MAKE
26777:   fi
26777: fi
26777: 
    1: case "$host_os" in
    1: cygwin*|mingw*|mks*|msvc*)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE make gmake, :)
    1:     ;;
    1: *)
26777:     MOZ_PATH_PROGS(GMAKE, $GMAKE $NOT_PYMAKE gmake make, :)
    1:     ;;
    1: esac
26777: if test "$GMAKE" = ":"; then
26777:    AC_MSG_ERROR([GNU make not found])
26777: fi
26777: AC_SUBST(GMAKE)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: 
    1: AC_PATH_XTRA
    1: 
    1: dnl Check in X11 include directory too.
    1: if test "$no_x" != "yes"; then
    1:     CPPFLAGS="$CPPFLAGS $X_CFLAGS"
    1: fi
    1: 
    1: XCFLAGS="$X_CFLAGS"
    1: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl set the defaults first
    1: dnl ========================================================
    1: AS_BIN=$AS
    1: AR_FLAGS='cr $@'
    1: AR_LIST='$(AR) t'
    1: AR_EXTRACT='$(AR) x'
    1: AR_DELETE='$(AR) d'
    1: AS='$(CC)'
    1: AS_DASH_C_FLAG='-c'
    1: DLL_PREFIX=lib
    1: LIB_PREFIX=lib
    1: DLL_SUFFIX=.so
    1: OBJ_SUFFIX=o
    1: LIB_SUFFIX=a
    1: ASM_SUFFIX=s
    1: IMPORT_LIB_SUFFIX=
    1: TARGET_MD_ARCH=unix
    1: DIRENT_INO=d_ino
    1: CYGWIN_WRAPPER=
    1: WIN_TOP_SRC=
    1: MOZ_USER_DIR=".mozilla"
    1: HOST_AR='$(AR)'
    1: HOST_AR_FLAGS='$(AR_FLAGS)'
    1: 
    1: MOZ_JPEG_CFLAGS=
    1: MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,mozjpeg,$(DEPTH)/jpeg)'
    1: MOZ_ZLIB_CFLAGS=
    1: MOZ_ZLIB_LIBS='$(call EXPAND_LIBNAME_PATH,mozz,$(DEPTH)/modules/zlib/src)'
12936: MOZ_BZ2_CFLAGS=
12936: MOZ_BZ2_LIBS='$(call EXPAND_LIBNAME_PATH,bz2,$(DEPTH)/modules/libbz2/src)'
    1: MOZ_PNG_CFLAGS=
    1: MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,mozpng,$(DEPTH)/modules/libimg/png)'
    1: 
    1: MOZ_JS_LIBS='-L$(LIBXUL_DIST)/bin -lmozjs'
    1: DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/bin -lxpcom -lxpcom_core'
22757: MOZ_FIX_LINK_PATHS='-Wl,-rpath-link,$(LIBXUL_DIST)/bin -Wl,-rpath-link,$(prefix)/lib'
 6920: XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/bin -lxpcom'
    1: LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) -lxul'
    1: XPCOM_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue_s.$(LIB_SUFFIX) $(XPCOM_FROZEN_LDOPTS)'
    1: XPCOM_STANDALONE_GLUE_LDOPTS='$(LIBXUL_DIST)/lib/$(LIB_PREFIX)xpcomglue.$(LIB_SUFFIX)'
    1: 
    1: MOZ_COMPONENT_NSPR_LIBS='-L$(LIBXUL_DIST)/bin $(NSPR_LIBS)'
    1: MOZ_XPCOM_OBSOLETE_LIBS='-L$(LIBXUL_DIST)/lib -lxpcom_compat'
    1: 
    1: USE_DEPENDENT_LIBS=1
    1: 
    1: _PLATFORM_DEFAULT_TOOLKIT=cairo-gtk2
    1: MOZ_GFX_TOOLKIT='$(MOZ_WIDGET_TOOLKIT)'
    1: 
    1: MOZ_ENABLE_POSTSCRIPT=1 
    1: 
    1: if test -n "$CROSS_COMPILE"; then
    1:     OS_TARGET="${target_os}"
    1:     OS_ARCH=`echo $target_os | sed -e 's|/|_|g'`
    1:     OS_RELEASE=
    1:     case "${target_os}" in
 1785:         linux*)       OS_ARCH=Linux OS_TARGET=Linux ;;
12932:         kfreebsd*-gnu) OS_ARCH=GNU_kFreeBSD OS_TARGET=GNU_kFreeBSD ;;
    1:         solaris*)     OS_ARCH=SunOS OS_RELEASE=5 ;;
    1:         mingw*)       OS_ARCH=WINNT ;;
    1:         wince*)       OS_ARCH=WINCE ;;
    1:         darwin*)      OS_ARCH=Darwin OS_TARGET=Darwin ;;
    1:     esac
    1: else
    1:     OS_TARGET=`uname -s`
    1:     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
    1:     OS_RELEASE=`uname -r`
 3488: fi
 3488: 
 3488: # Before this used `uname -m` when not cross compiling
 3488: # but that breaks when you have a 64 bit kernel with a 32 bit userland.
 3488: OS_TEST="${target_cpu}"
 3488: 
    1: _COMPILER_PREFIX=
    1: 
    1: HOST_OS_ARCH=`echo $host_os | sed -e 's|/|_|g'`
    1: 
    1: #######################################################################
    1: # Master "Core Components" macros for getting the OS target           #
    1: #######################################################################
    1: 
    1: #
    1: # Note: OS_TARGET should be specified on the command line for gmake.
    1: # When OS_TARGET=WIN95 is specified, then a Windows 95 target is built.
    1: # The difference between the Win95 target and the WinNT target is that
    1: # the WinNT target uses Windows NT specific features not available
    1: # in Windows 95. The Win95 target will run on Windows NT, but (supposedly)
    1: # at lesser performance (the Win95 target uses threads; the WinNT target
    1: # uses fibers).
    1: #
    1: # If OS_TARGET is not specified, it defaults to $(OS_ARCH), i.e., no
    1: # cross-compilation.
    1: #
    1: 
    1: #
    1: # The following hack allows one to build on a WIN95 machine (as if
    1: # s/he were cross-compiling on a WINNT host for a WIN95 target).
    1: # It also accomodates for MKS's uname.exe.  If you never intend
    1: # to do development on a WIN95 machine, you don't need this hack.
    1: #
    1: case "$OS_ARCH" in
    1: WIN95)
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WIN95
    1:     ;;
    1: Windows_95)
    1:     OS_ARCH=Windows_NT
    1:     OS_TARGET=WIN95
    1:     ;;
    1: Windows_98)
    1:     OS_ARCH=Windows_NT
    1:     OS_TARGET=WIN95
    1:     ;;
    1: CYGWIN_9*|CYGWIN_ME*)
    1:     OS_ARCH='CYGWIN_NT-4.0'
    1:     OS_TARGET=WIN95
    1:     ;;
    1: esac
    1: 
    1: #
    1: # Define and override various archtecture-specific variables, including
    1: # HOST_OS_ARCH
    1: # OS_ARCH
    1: # OS_TEST
    1: # OS_TARGET
    1: # OS_RELEASE
    1: # OS_MINOR_RELEASE
    1: #
    1: 
    1: case "$HOST_OS_ARCH" in
    1: cygwin*|mingw*|mks*|msvc*)
    1:     HOST_OS_ARCH=WINNT
    1:     ;;
    1: linux*)
    1:     HOST_OS_ARCH=Linux
    1:     ;;
    1: solaris*)
    1:     HOST_OS_ARCH=SunOS
24783:     SOLARIS_SUNPRO_CC=
24783:     SOLARIS_SUNPRO_CXX=
24783:     if test -z "$GNU_CC"; then
25126:         if test "`$_SUBDIR_CC -V 2>&1 | egrep -c 'Sun.*C '`" != "0"; then
24783:             SOLARIS_SUNPRO_CC=1
24783:        fi
24783:     fi
24783: 
24783:     if test -z "$GNU_CXX"; then
25126:        if test "`$_SUBDIR_CXX -V 2>&1 | egrep -c 'Sun.*C\+\+ '`" != "0"; then
24783:            SOLARIS_SUNPRO_CXX=1
24783:        fi
24783:     fi
24783:     AC_SUBST(SOLARIS_SUNPRO_CC)
24783:     AC_SUBST(SOLARIS_SUNPRO_CXX)
    1:     ;;
    1: BSD_386)
    1:     HOST_OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     HOST_OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     HOST_OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         HOST_OS_ARCH=NCR
    1:     else
    1:         HOST_OS_ARCH=UNIXWARE
    1:     fi
    1:     ;;
    1: ncr)
    1:     HOST_OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     HOST_OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     ;;
    1: *OpenVMS*)
    1:     HOST_OS_ARCH=OpenVMS
    1:     ;;
    1: OS_2)
    1:     HOST_OS_ARCH=OS2
    1:     ;;
    1: QNX)
    1:     ;;
    1: SCO_SV)
    1:     HOST_OS_ARCH=SCOOS
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     HOST_OS_ARCH=SINIX
    1:     ;;
    1: UnixWare)
    1:     HOST_OS_ARCH=UNIXWARE
    1:     ;;
    1: esac
    1: 
    1: case "$OS_ARCH" in
    1: WINNT)
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: Windows_NT)
    1: #
    1: # If uname -s returns "Windows_NT", we assume that we are using
    1: # the uname.exe in MKS toolkit.
    1: #
    1: # The -r option of MKS uname only returns the major version number.
    1: # So we need to use its -v option to get the minor version number.
    1: # Moreover, it doesn't have the -p option, so we need to use uname -m.
    1: #
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     OS_MINOR_RELEASE=`uname -v`
    1:     if test "$OS_MINOR_RELEASE" = "00"; then
    1:         OS_MINOR_RELEASE=0
    1:     fi
    1:     OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    1:     ;;
    1: CYGWIN32_NT|CYGWIN_NT*|MINGW*_NT*)
    1: #
    1: # If uname -s returns "CYGWIN_NT-4.0", we assume that we are using
    1: # the uname.exe in the Cygwin tools.
    1: # Prior to the Beta 20 release, Cygwin was called GNU-Win32.
    1: # If uname -s returns "CYGWIN32/NT", we assume that we are using
    1: # the uname.exe in the GNU-Win32 tools.
    1: # If uname -s returns MINGW32_NT-5.1, we assume that we are using
    1: # the uname.exe in the MSYS tools.
    1: #
    1:     OS_RELEASE=`expr $OS_ARCH : '.*NT-\(.*\)'`
    1:     OS_ARCH=WINNT
    1:     OS_TARGET=WINNT
    1:     ;;
    1: AIX)
    1:     OS_RELEASE=`uname -v`.`uname -r`
20692:     OS_TEST=${target_cpu}
    1:     ;;
    1: BSD_386)
    1:     OS_ARCH=BSD
    1:     ;;
    1: dgux)
    1:     OS_ARCH=DGUX
    1:     ;;
    1: IRIX64)
    1:     OS_ARCH=IRIX
    1:     ;;
    1: UNIX_SV)
    1:     if "`cat /etc/bcheckrc | grep -c NCR 2>/dev/null`" != "0"; then
    1:         OS_ARCH=NCR
    1:     else
    1:         OS_ARCH=UNIXWARE
    1:         OS_RELEASE=`uname -v`
    1:     fi
    1:     ;;
    1: ncr)
    1:     OS_ARCH=NCR
    1:     ;;
    1: UNIX_SYSTEM_V)
    1:     OS_ARCH=NEC
    1:     ;;
    1: OSF1)
    1:     case `uname -v` in
    1:     148)
    1:         OS_RELEASE=V3.2C
    1:         ;;
    1:     564)
    1:         OS_RELEASE=V4.0B
    1:         ;;
    1:     878)
    1:         OS_RELEASE=V4.0D
    1:         ;;
    1:     esac
    1:     ;;
    1: *OpenVMS*)
    1:     OS_ARCH=OpenVMS
    1:     OS_RELEASE=`uname -v`
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: OS_2)
    1:     OS_ARCH=OS2
    1:     OS_TARGET=OS2
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: QNX)
    1:     if test "$OS_TARGET" != "NTO"; then
    1:         changequote(,)
    1:         OS_RELEASE=`uname -v | sed 's/^\([0-9]\)\([0-9]*\)$/\1.\2/'`
    1:         changequote([,])
    1:     fi
    1:     OS_TEST=x86
    1:     ;;
    1: SCO_SV)
    1:     OS_ARCH=SCOOS
    1:     OS_RELEASE=5.0
    1:     ;;
    1: SINIX-N | SINIX-Y | SINIX-Z |ReliantUNIX-M)
    1:     OS_ARCH=SINIX
    1:     OS_TEST=`uname -p`
    1:     ;;
    1: UnixWare)
    1:     OS_ARCH=UNIXWARE
    1:     OS_RELEASE=`uname -v`
    1:     ;;
    1: WINCE)
    1:     OS_ARCH=WINCE
    1:     OS_TARGET=WINCE
    1:     ;;
    1: Darwin)
    1:     case "${target_cpu}" in
    1:     powerpc*)
    1:         OS_TEST=ppc
    1:         ;;
    1:     i*86*)
    1:         OS_TEST=i386 
    1:         ;;
22679:     x86_64)
22679:         OS_TEST=x86_64
22679:         ;;
    1:     *)
    1:         if test -z "$CROSS_COMPILE" ; then
    1:             OS_TEST=`uname -p`
    1:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: esac
    1: 
    1: if test "$OS_ARCH" = "NCR"; then
    1:     changequote(,)
    1:     OS_RELEASE=`awk '{print $3}' /etc/.relid | sed 's/^\([0-9]\)\(.\)\(..\)\(.*\)$/\2.\3/'`
    1:     changequote([,])
    1: fi
    1: 
    1: # Only set CPU_ARCH if we recognize the value of OS_TEST
    1: 
    1: case "$OS_TEST" in
    1: *86 | i86pc)
    1:     CPU_ARCH=x86
    1:     ;;
    1: 
20692: powerpc* | ppc | rs6000)
    1:     CPU_ARCH=ppc
    1:     ;;
    1: 
    1: Alpha | alpha | ALPHA)
    1:     CPU_ARCH=Alpha
    1:     ;;
    1: 
15835: hppa* | parisc)
15835:     CPU_ARCH=hppa
15835:     ;;
15835: 
13790: sun4u | sparc*)
    1:     CPU_ARCH=sparc
    1:     ;;
    1: 
13790: x86_64 | ia64)
    1:     CPU_ARCH="$OS_TEST"
    1:     ;;
    1: esac
    1: 
    1: if test -z "$OS_TARGET"; then
    1:     OS_TARGET=$OS_ARCH
    1: fi
    1: if test "$OS_TARGET" = "WIN95"; then
    1:     OS_RELEASE="4.0"
    1: fi
    1: OS_CONFIG="${OS_TARGET}${OS_RELEASE}"
    1: 
    1: dnl ========================================================
    1: dnl GNU specific defaults
    1: dnl ========================================================
    1: if test "$GNU_CC"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CFLAGS="$CFLAGS -fno-strict-aliasing"
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GCC_USE_GNU_LD"; then
    1:         # Don't allow undefined symbols in libraries
    1:         DSO_LDOPTS="$DSO_LDOPTS -Wl,-z,defs"
    1:     fi
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
20657:     ASFLAGS="$ASFLAGS -fPIC"
    1:     _MOZ_RTTI_FLAGS_ON=${_COMPILER_PREFIX}-frtti
    1:     _MOZ_RTTI_FLAGS_OFF=${_COMPILER_PREFIX}-fno-rtti
    1:     _MOZ_EXCEPTIONS_FLAGS_ON='-fhandle-exceptions'
    1:     _MOZ_EXCEPTIONS_FLAGS_OFF='-fno-handle-exceptions'
    1: 
    1:     # Turn on GNU specific features
    1:     # -Wall - turn on all warnings
    1:     # -pedantic - make compiler warn about non-ANSI stuff, and
    1:     #             be a little bit stricter
    1:     # Warnings slamm took out for now (these were giving more noise than help):
    1:     # -Wbad-function-cast - warns when casting a function to a new return type
    1:     # -Wshadow - removed because it generates more noise than help --pete
10033:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wall -W -Wno-unused -Wpointer-arith"
15835:     if test -z "$INTEL_CC"; then
15835:        # Don't use -Wcast-align with ICC
15835:        case "$CPU_ARCH" in
15835:            # And don't use it on hppa, ia64, sparc, since it's noisy there
15835:            hppa | ia64 | sparc)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
    1:     dnl Turn pedantic on but disable the warnings for long long
    1:     _PEDANTIC=1
13232: 
13232:     if test -z "$INTEL_CC"; then
    1:       _IGNORE_LONG_LONG_WARNINGS=1
13232:       _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -W"
13232:     else
13232:       _IGNORE_LONG_LONG_WARNINGS=
13232:     fi
13232: 
    1: 
    1:     _DEFINES_CFLAGS='-include $(DEPTH)/mozilla-config.h -DMOZILLA_CLIENT'
    1:     _USE_CPP_INCLUDE_FLAG=1
24783: elif test "$SOLARIS_SUNPRO_CC"; then
24783:     MKSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
24783:     MKCSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
24783: 
24783:     DSO_LDOPTS='-shared'
24783:     if test "$GNU_LD"; then
24783:         # Don't allow undefined symbols in libraries
24783:         DSO_LDOPTS="$DSO_LDOPTS -z defs"
24783:     fi
24783: 
24783:     DSO_CFLAGS=''
24783:     if test "$CPU_ARCH" = "sparc"; then
24783:         # for Sun Studio on Solaris/SPARC
24783:         DSO_PIC_CFLAGS='-xcode=pic32'
24783:     else
24783:         DSO_PIC_CFLAGS='-KPIC'
24783:     fi
24783:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1: else
    1:     MKSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1:     MKCSHLIB='$(LD) $(DSO_LDOPTS) -h $@ -o $@'
    1: 
    1:     DSO_LDOPTS='-shared'
    1:     if test "$GNU_LD"; then
    1:         # Don't allow undefined symbols in libraries
    1:         DSO_LDOPTS="$DSO_LDOPTS -z defs"
    1:     fi
    1: 
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-KPIC'
    1:     _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1: fi
    1: 
    1: if test "$GNU_CXX"; then
10934:     # FIXME: Let us build with strict aliasing. bug 414641.
10934:     CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"
    1:     # Turn on GNU specific features
16670:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wall -Wpointer-arith -Woverloaded-virtual -Wsynth -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
15835:     if test -z "$INTEL_CC"; then
15835:        # Don't use -Wcast-align with ICC
15835:        case "$CPU_ARCH" in
15835:            # And don't use it on hppa, ia64, sparc, since it's noisy there
15835:            hppa | ia64 | sparc)
15835:            ;;
15835:            *)
10033:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wcast-align"
15835:            ;;
15835:        esac
10033:     fi
    1: 
    1:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -include $(DEPTH)/mozilla-config.h'
    1:     _USE_CPP_INCLUDE_FLAG=1
18452: 
18452:     AC_CACHE_CHECK(whether the compiler supports -Wno-invalid-offsetof,
18452:                    ac_has_wno_invalid_offsetof,
18452:         [
18452:             AC_LANG_SAVE
18506:             AC_LANG_CPLUSPLUS
18452:             _SAVE_CXXFLAGS="$CXXFLAGS"
18452:             CXXFLAGS="$CXXFLAGS ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:             AC_TRY_COMPILE([],
18452:                            [return(0);],
18452:                            ac_has_wno_invalid_offsetof="yes",
18452:                            ac_has_wno_invalid_offsetof="no")
18452:             CXXFLAGS="$_SAVE_CXXFLAGS"
18452:             AC_LANG_RESTORE
18452:         ])
18452:     if test "$ac_has_wno_invalid_offsetof" = "yes"; then
18452:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-invalid-offsetof"
18452:     fi
    1: else
    1:     _DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -D_MOZILLA_CONFIG_H_ $(ACDEFINES)'
    1: fi
    1: 
    1: dnl gcc can come with its own linker so it is better to use the pass-thru calls
    1: dnl MKSHLIB_FORCE_ALL is used to force the linker to include all object
    1: dnl files present in an archive. MKSHLIB_UNFORCE_ALL reverts the linker to
    1: dnl normal behavior.
    1: dnl ========================================================
    1: MKSHLIB_FORCE_ALL=
    1: MKSHLIB_UNFORCE_ALL=
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$GNU_CC"; then
    1:   AC_MSG_CHECKING(whether ld has archive extraction flags)
    1:   AC_CACHE_VAL(ac_cv_mkshlib_force_and_unforce,
    1:    [_SAVE_LDFLAGS=$LDFLAGS; _SAVE_LIBS=$LIBS
    1:     ac_cv_mkshlib_force_and_unforce="no"
    1:     exec 3<&0 <<LOOP_INPUT
    1: 	force="-Wl,--whole-archive";   unforce="-Wl,--no-whole-archive"
    1: 	force="-Wl,-z -Wl,allextract"; unforce="-Wl,-z -Wl,defaultextract"
    1: 	force="-Wl,-all";              unforce="-Wl,-none"
    1: LOOP_INPUT
    1:     while read line
    1:     do
    1:       eval $line
    1:       LDFLAGS=$force
    1:       LIBS=$unforce
    1:       AC_TRY_LINK(,, ac_cv_mkshlib_force_and_unforce=$line; break)
    1:     done
    1:     exec 0<&3 3<&-
    1:     LDFLAGS=$_SAVE_LDFLAGS; LIBS=$_SAVE_LIBS
    1:    ])
    1:   if test "$ac_cv_mkshlib_force_and_unforce" = "no"; then
    1:     AC_MSG_RESULT(no)
    1:   else
    1:     AC_MSG_RESULT(yes)
    1:     eval $ac_cv_mkshlib_force_and_unforce
    1:     MKSHLIB_FORCE_ALL=$force
    1:     MKSHLIB_UNFORCE_ALL=$unforce
    1:   fi
    1: fi # GNU_CC
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl =================================================================
    1: dnl Set up and test static assertion macros used to avoid AC_TRY_RUN,
    1: dnl which is bad when cross compiling.
    1: dnl =================================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: configure_static_assert_macros='
    1: #define CONFIGURE_STATIC_ASSERT(condition) CONFIGURE_STATIC_ASSERT_IMPL(condition, __LINE__)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL(condition, line) CONFIGURE_STATIC_ASSERT_IMPL2(condition, line)
    1: #define CONFIGURE_STATIC_ASSERT_IMPL2(condition, line) typedef int static_assert_line_##line[(condition) ? 1 : -1]
    1: '
    1: 
    1: dnl test that the macros actually work:
    1: AC_MSG_CHECKING(that static assertion macros used in autoconf tests work)
    1: AC_CACHE_VAL(ac_cv_static_assertion_macros_work,
    1:  [AC_LANG_SAVE
    1:   AC_LANG_C
    1:   ac_cv_static_assertion_macros_work="yes"
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_CPLUSPLUS
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(1)],
    1:                  ,
    1:                  ac_cv_static_assertion_macros_work="no")
    1:   AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                  [CONFIGURE_STATIC_ASSERT(0)],
    1:                  ac_cv_static_assertion_macros_work="no",
    1:                  )
    1:   AC_LANG_RESTORE
    1:  ])
    1: AC_MSG_RESULT("$ac_cv_static_assertion_macros_work")
    1: if test "$ac_cv_static_assertion_macros_work" = "no"; then
    1:     AC_MSG_ERROR([Compiler cannot compile macros used in autoconf tests.])
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl Checking for 64-bit OS
    1: dnl ========================================================
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: AC_LANG_SAVE
    1: AC_LANG_C
    1: AC_MSG_CHECKING(for 64-bit OS)
    1: AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                [CONFIGURE_STATIC_ASSERT(sizeof(long) == 8)],
    1:                result="yes", result="no")
    1: AC_MSG_RESULT("$result")
    1: if test "$result" = "yes"; then
    1:     AC_DEFINE(HAVE_64BIT_OS)
    1:     HAVE_64BIT_OS=1
    1: fi
    1: AC_SUBST(HAVE_64BIT_OS)
    1: AC_LANG_RESTORE
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
14801: dnl Enable high-memory support on OS/2 by default.
14801: dnl ========================================================
14801: MOZ_OS2_HIGH_MEMORY=1
14801: MOZ_ARG_DISABLE_BOOL(os2-high-mem,
14801: [  --disable-os2-high-mem  Disable high-memory support on OS/2],
14801:     MOZ_OS2_HIGH_MEMORY=,
14801:     MOZ_OS2_HIGH_MEMORY=1 )
    1: AC_SUBST(MOZ_OS2_HIGH_MEMORY)
    1: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for host
    1: dnl ========================================================
    1: case "$host" in
    1: *-beos*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_BEOS -DBeOS -DBEOS -D_POSIX_SOURCE -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_beos.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
    1: *cygwin*|*mingw*|*mks*|*msvc*|*wince)
    1:     if test -n "$_WIN32_MSVC"; then
    1:         HOST_AR=lib
    1:         HOST_AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:         HOST_CFLAGS="$HOST_CFLAGS -TC -nologo -Fd\$(HOST_PDBFILE)"
    1:         HOST_RANLIB='echo ranlib'
    1:     else
    1:         HOST_CFLAGS="$HOST_CFLAGS -mno-cygwin"
    1:     fi
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_WIN32 -DXP_WIN -DWIN32 -D_WIN32 -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_winnt.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     case "$host" in
    1:     *mingw*)
    1:     dnl MinGW/MSYS does not need CYGWIN_WRAPPER
    1:         ;;
    1:     *)
    1:         CYGWIN_WRAPPER="${srcdir}/build/cygwin-wrapper"
    1:         if test "`echo ${srcdir} | grep -c ^/ 2>/dev/null`" = 0; then
    1:             _pwd=`pwd`
    1:             CYGWIN_WRAPPER="${_pwd}/${srcdir}/build/cygwin-wrapper"
    1:         fi
    1:         if test "`${PERL} -v | grep -c cygwin  2>/dev/null`" = 0; then
    1:             AS_PERL=1
    1:             PERL="${CYGWIN_WRAPPER} $PERL"
    1:         fi
  472: 
  472:         if test "`${PYTHON} -c 'import sys; print sys.platform;'`" != "cygwin"; then
  472:             PYTHON="${CYGWIN_WRAPPER} $PYTHON"
  472:         fi
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
    1:     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     MOZ_FIX_LINK_PATHS='-Wl,-executable_path,$(LIBXUL_DIST)/bin'
    1:     LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL -lobjc'
    1:     ;;
    1: 
12932: *-linux*|*-kfreebsd*-gnu)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
    1:     ;;
    1: 
    1: *os2*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_OS2 -DNO_X11 -Zomf"
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     HOST_BIN_SUFFIX=.exe
    1:     MOZ_FIX_LINK_PATHS=
    1:     ;;
    1: 
    1: *-osf*)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_NSPR_MDCPUCFG='\"md/_osf1.cfg\"'
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: 
    1: *)
    1:     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
    1:     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O2}"
    1:     ;;
    1: esac
    1: 
    1: dnl Get mozilla version from central milestone file
    1: MOZILLA_VERSION=`$PERL $srcdir/config/milestone.pl -topsrcdir $srcdir`
    1: 
    1: dnl Get version of various core apps from the version files.
    1: FIREFOX_VERSION=`cat $topsrcdir/browser/config/version.txt`
    1: 
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION,"$MOZILLA_VERSION")
    1: AC_DEFINE_UNQUOTED(MOZILLA_VERSION_U,$MOZILLA_VERSION)
    1: 
    1: dnl ========================================================
    1: dnl System overrides of the defaults for target
    1: dnl ========================================================
    1: 
    1: case "$target" in
    1: *-aix*)
    1:     AC_DEFINE(AIX)
    1:     if test ! "$GNU_CC"; then
    1:         if test ! "$HAVE_64BIT_OS"; then
    1:             # Compiling with Visual Age C++ object model compat is the
    1:             # default. To compile with object model ibm, add 
    1:             # AIX_OBJMODEL=ibm to .mozconfig.
    1:             if test "$AIX_OBJMODEL" = "ibm"; then
    1:                 CXXFLAGS="$CXXFLAGS -qobjmodel=ibm"
    1:             else
    1:                 AIX_OBJMODEL=compat
    1:             fi
    1:         else
    1:             AIX_OBJMODEL=compat
    1:         fi
    1:         AC_SUBST(AIX_OBJMODEL)
    1:         DSO_LDOPTS='-qmkshrobj=1'
    1:         DSO_CFLAGS='-qflag=w:w'
    1:         DSO_PIC_CFLAGS=
    1:         LDFLAGS="$LDFLAGS -Wl,-brtl -blibpath:/usr/lib:/lib"
    1:         AC_MSG_WARN([Clearing MOZ_FIX_LINK_PATHS till we can fix bug 332075.])
    1:         MOZ_FIX_LINK_PATHS=
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         if test "$COMPILE_ENVIRONMENT"; then
    1:             AC_LANG_SAVE
    1:             AC_LANG_CPLUSPLUS
20692:             AC_MSG_CHECKING([for VisualAge C++ compiler version >= 6.0.0.3])
    1:             AC_TRY_COMPILE([],
20692:                 [#if (__IBMCPP__ < 600)
    1:                  #error "Bad compiler"
    1:                  #endif],
    1:                 _BAD_COMPILER=,_BAD_COMPILER=1)
    1:             if test -n "$_BAD_COMPILER"; then
    1:                 AC_MSG_RESULT([no])    
20692:                 AC_MSG_ERROR([VisualAge C++ version 6.0.0.3 or higher is required to build.])
    1:             else
    1:                 AC_MSG_RESULT([yes])    
    1:             fi
    1:             AC_LANG_RESTORE
    1:             TARGET_COMPILER_ABI="ibmc"
    1:             CC_VERSION=`lslpp -Lcq vac.C 2>/dev/null | awk -F: '{ print $3 }'`
    1:             CXX_VERSION=`lslpp -Lcq vacpp.cmp.core 2>/dev/null | awk -F: '{ print $3 }'`
    1:         fi
    1:     fi
    1:     case "${target_os}" in
    1:     aix4.1*)
    1:         DLL_SUFFIX='_shr.a'
    1:         ;;
    1:     esac
    1:     if test "$COMPILE_ENVIRONMENT"; then
    1:         AC_CHECK_HEADERS(sys/inttypes.h)
    1:     fi
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-beos*)
    1:     no_x=yes
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -Wl,-h,$@ -o $@'
    1:     _PLATFORM_DEFAULT_TOOLKIT="cairo-beos"
    1:     DSO_LDOPTS='-nostart'
    1:     TK_LIBS='-lbe -lroot'
    1:     LIBS="$LIBS -lbe"
    1:     if test "$COMPILE_ENVIRONMENT"; then
    1:         AC_CHECK_LIB(bind,main,LIBS="$LIBS -lbind")
    1:         AC_CHECK_LIB(zeta,main,LIBS="$LIBS -lzeta")
    1:     fi
    1:     _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} -Wno-multichar"
    1:     _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} -Wno-multichar"
    1:     _MOZ_USE_RTTI=1
    1:     USE_DEPENDENT_LIBS=
    1:     MOZ_USER_DIR="Mozilla"
    1:     ;;
    1: 
    1: *-bsdi*)
    1:     dnl -pedantic doesn't play well with BSDI's _very_ modified gcc (shlicc2)
    1:     _PEDANTIC=
    1:     _IGNORE_LONG_LONG_WARNINGS=
    1:     case $OS_RELEASE in
    1: 	4.*|5.*)
    1:             STRIP="$STRIP -d"
    1:             ;;
    1: 	*)
    1: 	    DSO_CFLAGS=''
    1: 	    DSO_LDOPTS='-r'
    1: 	    _WARNINGS_CFLAGS="-Wall"
    1: 	    _WARNINGS_CXXFLAGS="-Wall"
    1: 	    # The test above doesn't work properly, at least on 3.1.
    1: 	    MKSHLIB_FORCE_ALL=''
    1: 	    MKSHLIB_UNFORCE_ALL=''
    1: 	;;
    1:     esac
    1:     ;;
    1: 
    1: *-darwin*) 
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
10018:     MOZ_OPTIMIZE_FLAGS="-O2"
    1:     _PEDANTIC=
 9559:     CFLAGS="$CFLAGS -fpascal-strings -fno-common"
 9559:     CXXFLAGS="$CXXFLAGS -fpascal-strings -fno-common"
    1:     DLL_SUFFIX=".dylib"
    1:     DSO_LDOPTS=''
    1:     STRIP="$STRIP -x -S"
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
    1:     MOZ_ENABLE_POSTSCRIPT=
    1:     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
12447:     LDFLAGS="$LDFLAGS -framework Cocoa"
14692:     # The ExceptionHandling framework is needed for Objective-C exception
14692:     # logging code in nsObjCExceptions.h. Currently we only use that in debug
14692:     # builds.
14692:     MOZ_DEBUG_LDFLAGS="$MOZ_DEBUG_LDFLAGS -framework ExceptionHandling"
    1: 
15321:     dnl DTrace and -dead_strip don't interact well. See bug 403132.
15321:     dnl ===================================================================
15321:     if test "x$enable_dtrace" = "xyes"; then
15321:         echo "Skipping -dead_strip because DTrace is enabled. See bug 403132."
15321:     else
    1:         dnl check for the presence of the -dead_strip linker flag
    1:         AC_MSG_CHECKING([for -dead_strip option to ld])
    1:         _SAVE_LDFLAGS=$LDFLAGS
    1:         LDFLAGS="$LDFLAGS -Wl,-dead_strip"
    1:         AC_TRY_LINK(,[return 0;],_HAVE_DEAD_STRIP=1,_HAVE_DEAD_STRIP=)
    1:         if test -n "$_HAVE_DEAD_STRIP" ; then
    1:             AC_MSG_RESULT([yes])
    1:             MOZ_OPTIMIZE_LDFLAGS="-Wl,-dead_strip"
    1:         else
    1:             AC_MSG_RESULT([no])
    1:         fi
15321:         
    1:         LDFLAGS=$_SAVE_LDFLAGS
15321:     fi
    1:     ;;
    1: 
    1: *-freebsd*)
15860:     if test `test -x /usr/bin/objformat && /usr/bin/objformat || echo elf` != "elf"; then
    1: 	DLL_SUFFIX=".so.1.0"
    1: 	DSO_LDOPTS="-shared"
    1:     fi
    1:     if test ! "$GNU_CC"; then
    1: 	DSO_LDOPTS="-Bshareable $DSO_LDOPTS"
    1:     fi
    1: # Can't have force w/o an unforce.
    1: #    # Hack for FreeBSD 2.2
    1: #    if test -z "$MKSHLIB_FORCE_ALL"; then
    1: #	MKSHLIB_FORCE_ALL='-Wl,-Bforcearchive'
    1: #	MKSHLIB_UNFORCE_ALL=''
    1: #    fi
    1:     ;; 
    1: 
    1: *-hpux*)
    1:     DLL_SUFFIX=".sl"
    1:     if test ! "$GNU_CC"; then
    1:     	DSO_LDOPTS='-b -Wl,+s'
    1:     	DSO_CFLAGS=""
    1:     	DSO_PIC_CFLAGS="+Z"
    1:     	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -o $@'
    1:     	MKCSHLIB='$(LD) -b +s -L$(LIBXUL_DIST)/bin -o $@'
    1:         CXXFLAGS="$CXXFLAGS -Wc,-ansi_for_scope,on"
    1:     else
    1:         DSO_LDOPTS='-b -E +s'
    1:         MKSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:         MKCSHLIB='$(LD) $(DSO_LDOPTS) -L$(LIBXUL_DIST)/bin -L$(LIBXUL_DIST)/lib -o $@'
    1:     fi
    1:     MOZ_POST_PROGRAM_COMMAND='chatr +s enable'
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     ;;
    1: 
    1: *-irix5*)
    1:     AC_DEFINE(IRIX)
    1:     DSO_LDOPTS='-elf -shared'
    1: 
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKCSHLIB='$(LD) $(DSO_LDOPTS) -o $@'
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1:     fi
    1:     ;;
    1: 
    1: *-irix6*)
    1:     AC_DEFINE(IRIX)
    1:     dnl the irix specific xptcinvoke code is written against the n32 ABI so we *must* 
    1:     dnl compile and link using -n32
    1:     USE_N32=1
    1:     TARGET_COMPILER_ABI=n32
    1:     DSO_LDOPTS='-elf -shared'
    1:     MKSHLIB='$(CCC) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     _MOZ_EXCEPTIONS_FLAGS_OFF="-LANG:exceptions=OFF"
    1:     _MOZ_EXCEPTIONS_FLAGS_ON="-LANG:exceptions=ON"
    1:     if test "$GNU_CC"; then
    1:        MKSHLIB_FORCE_ALL='-Wl,-all'
    1:        MKSHLIB_UNFORCE_ALL='-Wl,-none'
    1:        _WARNINGS_CFLAGS="-Wall"
    1:        _WARNINGS_CXXFLAGS="-Wall"
    1:        CXXFLAGS="$CXXFLAGS -D_LANGUAGE_C_PLUS_PLUS"
    1:     else
    1:        MKSHLIB_FORCE_ALL='-all'
    1:        MKSHLIB_UNFORCE_ALL='-none'
    1: 	   AR_LIST="$AR t"
    1: 	   AR_EXTRACT="$AR x"
    1: 	   AR_DELETE="$AR d"
    1: 	   AR='$(CXX) -ar'
    1: 	   AR_FLAGS='-o $@'
    1:        CFLAGS="$CFLAGS -woff 3262 -G 4"
    1:        CXXFLAGS="$CXXFLAGS -woff 3262 -G 4"
    1:        if test -n "$USE_N32"; then
    1: 	   ASFLAGS="$ASFLAGS -n32"
    1: 	   CFLAGS="$CFLAGS -n32"
    1: 	   CXXFLAGS="$CXXFLAGS -n32"
    1: 	   LDFLAGS="$LDFLAGS -n32"
    1:        fi
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:        AC_MSG_WARN([Clearing MOZ_FIX_LINK_PATHS for OSF/1 as fix for bug 333545 (till the reference bug 332075 is fixed.])
    1:        MOZ_FIX_LINK_PATHS=
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       MIPSPRO_CXX=1
    1:     fi
    1:     ;;
    1: 
    1: *-*linux*)
21716:     # Note: both GNU_CC and INTEL_CC are set when using Intel's C compiler.
21716:     # Similarly for GNU_CXX and INTEL_CXX.
21716:     if test "$INTEL_CC" || test "$INTEL_CXX"; then
21716:         # -Os has been broken on Intel's C/C++ compilers for quite a
21716:         # while; Intel recommends against using it.
21716:         MOZ_OPTIMIZE_FLAGS="-O2"
21716:         MOZ_DEBUG_FLAGS="-g -fno-inline"
21716:     elif test "$GNU_CC" || test "$GNU_CXX"; then
13176:         GCC_VERSION=`$CC -v 2>&1 | awk '/^gcc version/ { print $3 }'`
13134:         case $GCC_VERSION in
13139:         4.1.*|4.2.*)
13139:             # -Os is broken on gcc 4.1.x and 4.2.x, we need to tweak it to get good results.
13134:             MOZ_OPTIMIZE_SIZE_TWEAK="-finline-limit=50"
13134:         esac
13134:         MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions $MOZ_OPTIMIZE_SIZE_TWEAK"
    1:         MOZ_DEBUG_FLAGS="-g -fno-inline"  # most people on linux use gcc/gdb,
    1:                                           # and that combo is not yet good at
    1:                                           # debugging inlined functions (even
    1:                                           # when using DWARF2 as the debugging
    1:                                           # format)
21716:     fi
21716: 
21716:     TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
    1: 
11611:     MOZ_MEMORY=1
11611: 
    1:     case "${target_cpu}" in
    1:     alpha*)
    1:     	CFLAGS="$CFLAGS -mieee"
    1:     	CXXFLAGS="$CXXFLAGS -mieee"
    1:     ;;
    1:     i*86)
    1:     	USE_ELF_DYNSTR_GC=1
    1:         MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS=1
    1:     ;;
    1:     mips*)
20694:         MOZ_DEBUG_FLAGS="-g" # We want inlining
    1:     ;;
    1:     esac
    1:     ;;
    1: 
    1: *-wince*)
    1: 
    1:     MOZ_TOOLS_DIR=`echo $MOZ_TOOLS`
    1:     AR_LIST="$AR -list"
    1:     AR_EXTRACT="$AR -extract"
    1:     AR_DELETE="$AR d"
    1:     AR_FLAGS='-OUT:"$@"'
    1: 
24062:     if test "$AS_BIN"; then
19305:         AS="$AS_BIN"
19305:     fi
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     BIN_SUFFIX='.exe'
19305:     if test -z "$RC"; then 
    1:         RC=rc.exe  
19305:     fi
    1:     # certain versions of cygwin's makedepend barf on the 
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1: 
    1:     HOST_CC=cl
    1:     HOST_CXX=cl
    1:     HOST_LD=link
    1:     HOST_AR='lib -OUT:$@'
    1:     HOST_RANLIB='echo ranlib'
11967:     HOST_CFLAGS="$HOST_CFLAGS -D_X86_"
11967:         
    1:         
 5384:     WARNINGS_AS_ERRORS='-WX'
24801:     MOZ_OPTIMIZE_FLAGS='-Ox'
    1:     AR_FLAGS='-NOLOGO -OUT:"$@"'
    1:     ASM_SUFFIX=asm
21344:     CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:     CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
    1:     DLL_PREFIX=
    1:     DOXYGEN=:
    1:     DSO_LDOPTS=-SUBSYSTEM:WINDOWSCE
    1:     DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib'
    1:     GARBAGE=
    1:     IMPORT_LIB_SUFFIX=lib
    1:     LIBS="$LIBS"
    1:     LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib'
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib 
    1:     MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ $(DSO_LDOPTS)'
    1:     MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ $(DSO_LDOPTS)'
    1:     MKSHLIB_FORCE_ALL=
    1:     MKSHLIB_UNFORCE_ALL=
    1:     MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
    1:     MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
    1:     MOZ_DEBUG_FLAGS='-Zi'
    1:     MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
    1:     MOZ_FIX_LINK_PATHS=
    1:     MOZ_JS_LIBS='$(LIBXUL_DIST)/lib/js$(MOZ_BITS)$(VERSION_NUMBER).lib'
    1:     MOZ_XPCOM_OBSOLETE_LIBS='$(LIBXUL_DIST)/lib/xpcom_compat.lib'
    1:     OBJ_SUFFIX=obj
    1:     RANLIB='echo not_ranlib'
    1:     STRIP='echo not_strip'
    1:     TARGET_NSPR_MDCPUCFG='\"md/_wince.cfg\"'
    1:     UNZIP=unzip
    1:     XARGS=xargs
    1:     XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib'
    1:     ZIP=zip
    1:     LIBIDL_CFLAGS="-I$MOZ_TOOLS_DIR/include ${GLIB_CFLAGS}"
    1:     LIBIDL_LIBS="$MOZ_TOOLS_DIR/lib/libidl-0.6_s.lib $MOZ_TOOLS_DIR/lib/glib-1.2_s.lib"
    1:     STATIC_LIBIDL=1
24104:     MOZ_TREE_FREETYPE=1
    1: 
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(_WIN32)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1: 
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='windows'
    1:     BIN_SUFFIX='.exe'
    1:     USE_SHORT_LIBNAME=1
    1:     MOZ_ENABLE_POSTSCRIPT=
    1:     MOZ_USER_DIR="Mozilla"
24388: 
24388:     MOZ_GFX_OPTIMIZE_MOBILE=1
24969: 
24969:     # Sanity check for WINCE_WINDOWS_MOBILE
24974:     # XXX disabled until we can fix the mobile tinderbox
24975:     ##if test "$WINCE_WINDOWS_MOBILE"; then
24974:     ##   AC_CHECK_HEADER(tpcshell.h, [],
24974:     ##        AC_MSG_ERROR([Can't find tpcshell.h in your SDK; are you sure you don't need --disable-windows-mobile-components?]))
24975:     ##fi
    1: ;;
    1: 
    1: 
    1: *-mingw*|*-cygwin*|*-msvc*|*-mks*)
    1:     DSO_CFLAGS=
    1:     DSO_PIC_CFLAGS=
    1:     DLL_SUFFIX=.dll
    1:     RC=rc.exe
    1:     # certain versions of cygwin's makedepend barf on the 
    1:     # #include <string> vs -I./dist/include/string issue so don't use it
    1:     SYSTEM_MAKEDEPEND=
    1:     if test -n "$GNU_CC"; then
    1:         CC="$CC -mno-cygwin"
    1:         CXX="$CXX -mno-cygwin"
    1:         CPP="$CPP -mno-cygwin"
    1:         CFLAGS="$CFLAGS -mms-bitfields"
    1:         CXXFLAGS="$CXXFLAGS -mms-bitfields"
    1:         DSO_LDOPTS='-shared'
    1:         MKSHLIB='$(CXX) $(DSO_LDOPTS) -o $@'
    1:         MKCSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
    1:         RC='$(WINDRES)'
    1:         # Use temp file for windres (bug 213281)
    1:         RCFLAGS='-O coff --use-temp-file'
    1:         # mingw doesn't require kernel32, user32, and advapi32 explicitly
    1:         LIBS="$LIBS -lgdi32 -lwinmm -lwsock32"
    1:         MOZ_JS_LIBS='-L$(LIBXUL_DIST)/lib -ljs$(MOZ_BITS)$(VERSION_NUMBER)'
    1:         MOZ_FIX_LINK_PATHS=
    1:         DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib -lxpcom -lxpcom_core'
    1:         XPCOM_FROZEN_LDOPTS='-L$(LIBXUL_DIST)/lib -lxpcom'
    1:         DLL_PREFIX=
    1:         IMPORT_LIB_SUFFIX=dll.a
    1:     else
    1:         TARGET_COMPILER_ABI=msvc
    1:         HOST_CC='$(CC)'
    1:         HOST_CXX='$(CXX)'
    1:         HOST_LD='$(LD)'
    1:         AR='lib -NOLOGO -OUT:"$@"'
    1:         AR_FLAGS=
    1:         RANLIB='echo not_ranlib'
    1:         STRIP='echo not_strip'
    1:         XARGS=xargs
    1:         ZIP=zip
    1:         UNZIP=unzip
    1:         DOXYGEN=:
    1:         GARBAGE='$(OBJDIR)/vc20.pdb $(OBJDIR)/vc40.pdb'
    1:         OBJ_SUFFIX=obj
    1:         LIB_SUFFIX=lib
    1:         DLL_PREFIX=
    1:         LIB_PREFIX=
    1:         IMPORT_LIB_SUFFIX=lib
21344:         MKSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
21344:         MKCSHLIB='$(LD) -NOLOGO -DLL -OUT:$@ -PDB:$(LINK_PDBFILE) $(DSO_LDOPTS)'
    1:         MKSHLIB_FORCE_ALL=
    1:         MKSHLIB_UNFORCE_ALL=
    1:         DSO_LDOPTS=-SUBSYSTEM:WINDOWS
21344:         CFLAGS="$CFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
21344:         CXXFLAGS="$CXXFLAGS -W3 -Gy -Fd\$(COMPILE_PDBFILE)"
    1:         LIBS="$LIBS kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib"
    1:         MOZ_DEBUG_FLAGS='-Zi'
    1:         MOZ_DEBUG_LDFLAGS='-DEBUG -DEBUGTYPE:CV'
 5384:         WARNINGS_AS_ERRORS='-WX'
    1:     	MOZ_OPTIMIZE_FLAGS='-O1'
    1:         MOZ_JS_LIBS='$(LIBXUL_DIST)/lib/js$(MOZ_BITS)$(VERSION_NUMBER).lib'
    1:         MOZ_FIX_LINK_PATHS=
    1:         DYNAMIC_XPCOM_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcom_core.lib'
    1:         XPCOM_FROZEN_LDOPTS='$(LIBXUL_DIST)/lib/xpcom.lib'
    1:         LIBXUL_LIBS='$(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib'
    1:         MOZ_COMPONENT_NSPR_LIBS='$(NSPR_LIBS)'
    1:         MOZ_XPCOM_OBSOLETE_LIBS='$(LIBXUL_DIST)/lib/xpcom_compat.lib'
 3563:         if test $_MSC_VER -ge 1400; then
 3563:             LDFLAGS="$LDFLAGS -NXCOMPAT -SAFESEH"
12601:             dnl For profile-guided optimization
11977:             PROFILE_GEN_CFLAGS="-GL"
11977:             PROFILE_GEN_LDFLAGS="-LTCG:PGINSTRUMENT"
14519:             dnl XXX: PGO builds can fail with warnings treated as errors,
14519:             dnl specifically "no profile data available" appears to be
14519:             dnl treated as an error sometimes. This might be a consequence
14519:             dnl of using WARNINGS_AS_ERRORS in some modules, combined
14519:             dnl with the linker doing most of the work in the whole-program
14519:             dnl optimization/PGO case. I think it's probably a compiler bug,
14519:             dnl but we work around it here.
14519:             PROFILE_USE_CFLAGS="-GL -wd4624 -wd4952"
14519:             dnl XXX: should be -LTCG:PGOPTIMIZE, but that fails on libxul.
14519:             dnl Probably also a compiler bug, but what can you do?
11977:             PROFILE_USE_LDFLAGS="-LTCG:PGUPDATE"
12601:             if test -n "$_USE_DYNAMICBASE"; then
12601:                LDFLAGS="$LDFLAGS -DYNAMICBASE"
12601:             fi
 3563:         fi
    1:     fi
    1:     MOZ_JPEG_LIBS='$(call EXPAND_LIBNAME_PATH,jpeg$(MOZ_BITS)$(VERSION_NUMBER),$(DEPTH)/jpeg)'
    1:     MOZ_PNG_LIBS='$(call EXPAND_LIBNAME_PATH,png,$(DEPTH)/modules/libimg/png)'
    1:     AC_DEFINE(HAVE_SNPRINTF)
    1:     AC_DEFINE(_WINDOWS)
    1:     AC_DEFINE(_WIN32)
    1:     AC_DEFINE(WIN32)
    1:     AC_DEFINE(XP_WIN)
    1:     AC_DEFINE(XP_WIN32)
    1:     AC_DEFINE(HW_THREADS)
    1:     AC_DEFINE(STDC_HEADERS)
    1:     AC_DEFINE(NEW_H, <new>)
    1:     AC_DEFINE(WIN32_LEAN_AND_MEAN)
    1:     TARGET_MD_ARCH=win32
    1:     _PLATFORM_DEFAULT_TOOLKIT='cairo-windows'
    1:     BIN_SUFFIX='.exe'
    1:     USE_SHORT_LIBNAME=1
    1:     MOZ_ENABLE_POSTSCRIPT=
    1:     MOZ_USER_DIR="Mozilla"
    1: 
    1:     dnl Hardcode to win95 for now - cls
    1:     TARGET_NSPR_MDCPUCFG='\"md/_win95.cfg\"'
    1: 
    1:     dnl set NO_X11 defines here as the general check is skipped on win32
    1:     no_x=yes
    1:     AC_DEFINE(NO_X11)
    1: 
    1:     dnl MinGW/MSYS doesn't provide or need cygpath
    1:     case "$host" in
    1:     *-mingw*)
    1: 	CYGPATH_W=echo
    1: 	CYGPATH_S=cat
    1: 	MOZ_BUILD_ROOT=`cd $MOZ_BUILD_ROOT && pwd -W`
    1: 	;;
    1:     *-cygwin*|*-msvc*|*-mks*)
    1: 	CYGPATH_W="cygpath -a -w"
    1: 	CYGPATH_S="sed -e s|\\\\|/|g"
    1: 	MOZ_BUILD_ROOT=`$CYGPATH_W $MOZ_BUILD_ROOT | $CYGPATH_S`
    1: 	;;
    1:     esac
    1:     case "$host" in
    1:     *-mingw*|*-cygwin*|*-msvc*|*-mks*)
    1: 
    1:     if test -z "$MOZ_TOOLS"; then
    1:         AC_MSG_ERROR([MOZ_TOOLS is not set])
    1:     fi
    1: 
25869:     MOZ_TOOLS_DIR=`cd $MOZ_TOOLS && pwd -W`
    1:     if test "$?" != "0" || test -z "$MOZ_TOOLS_DIR"; then
    1:         AC_MSG_ERROR([cd \$MOZ_TOOLS failed. MOZ_TOOLS ==? $MOZ_TOOLS])
    1:     fi
25869:     MOZ_TOOLS_BIN_DIR="$(cd "$MOZ_TOOLS_DIR/bin" && pwd)"
25869:     if test `echo ${PATH}: | grep -ic "$MOZ_TOOLS_BINDIR:"` = 0; then
    1:         AC_MSG_ERROR([\$MOZ_TOOLS\\bin must be in your path.])
    1:     fi
    1:     MOZ_TOOLS_DIR=`$CYGPATH_W $MOZ_TOOLS_DIR | $CYGPATH_S`
    1: 
    1:     if test -n "$GLIB_PREFIX"; then
25869:         _GLIB_PREFIX_DIR=`cd $GLIB_PREFIX && pwd -W`
    1:         if test "$?" = "0"; then
    1:             if test `echo ${PATH}: | grep -ic "$_GLIB_PREFIX_DIR/bin:"` = 0; then
    1:                 AC_MSG_ERROR([GLIB_PREFIX must be in your \$PATH.])
    1:             fi
    1:             _GLIB_PREFIX_DIR=`$CYGPATH_W $_GLIB_PREFIX_DIR | $CYGPATH_S`
    1:         else
    1:             AC_MSG_ERROR([GLIB_PREFIX is set but "${GLIB_PREFIX}" is not a directory.])
    1:         fi
    1:     else
    1:         _GLIB_PREFIX_DIR=$MOZ_TOOLS_DIR
    1:     fi
    1:     if test ! -f "${_GLIB_PREFIX_DIR}/include/glib.h"; then
    1:         AC_MSG_ERROR([Cannot find $_GLIB_PREFIX_DIR/include/glib.h .])
    1:     fi
    1:     GLIB_CFLAGS="-I${_GLIB_PREFIX_DIR}/include"
    1:     if test -f "${_GLIB_PREFIX_DIR}/lib/glib-1.2_s.lib"; then
    1:         GLIB_LIBS="${_GLIB_PREFIX_DIR}/lib/glib-1.2_s.lib"
    1:     elif test -f "${_GLIB_PREFIX_DIR}/lib/glib-1.2.lib"; then
    1:         GLIB_LIBS="${_GLIB_PREFIX_DIR}/lib/glib-1.2.lib"
    1:     else
    1:         AC_MSG_ERROR([Cannot find $_GLIB_PREFIX_DIR/lib/glib-1.2.lib or $_GLIB_PREFIX_DIR/lib/glib-1.2_s.lib])
    1:     fi
    1: 
    1:     if test -n "$LIBIDL_PREFIX"; then
25869:         _LIBIDL_PREFIX_DIR=`cd $LIBIDL_PREFIX && pwd -W`
    1:         if test "$?" = "0"; then
    1:             if test `echo ${PATH}: | grep -ic "$_LIBIDL_PREFIX_DIR/bin:"` = 0; then
    1:                 AC_MSG_ERROR([LIBIDL_PREFIX must be in your \$PATH.])
    1:             fi
    1:             _LIBIDL_PREFIX_DIR=`$CYGPATH_W $_LIBIDL_PREFIX_DIR | $CYGPATH_S`
    1:         else
    1:             AC_MSG_ERROR([LIBIDL_PREFIX is set but "${LIBIDL_PREFIX}" is not a directory.])
    1:         fi
    1:     else
    1:         _LIBIDL_PREFIX_DIR=$MOZ_TOOLS_DIR
    1:     fi        
    1:     if test ! -f "${_LIBIDL_PREFIX_DIR}/include/libIDL/IDL.h"; then
    1:         AC_MSG_ERROR([Cannot find $_LIBIDL_PREFIX_DIR/include/libIDL/IDL.h .])
    1:     fi
    1:     LIBIDL_CFLAGS="-I${_LIBIDL_PREFIX_DIR}/include ${GLIB_CFLAGS}"
    1:     if test -f "${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6_s.lib"; then
    1:         LIBIDL_LIBS="${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6_s.lib"
    1:         STATIC_LIBIDL=1
    1:     elif test -f "${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6.lib"; then
    1:         LIBIDL_LIBS="${_LIBIDL_PREFIX_DIR}/lib/libidl-0.6.lib"
    1:     else
    1:         AC_MSG_ERROR([Cannot find $_LIBIDL_PREFIX_DIR/lib/libidl-0.6.lib or $_LIBIDL_PREFIX_DIR/lib/libidl-0.6_s.lib])
    1:     fi
    1:     LIBIDL_LIBS="${LIBIDL_LIBS} ${GLIB_LIBS}"
    1:     ;;
    1: 
    1:     *) # else cross-compiling
    1:         if test -n "$GLIB_PREFIX"; then
    1:             GLIB_CFLAGS="-I${GLIB_PREFIX}/include"
    1:             if test -f "${GLIB_PREFIX}/lib/glib-1.2_s.lib"; then
    1:                 GLIB_LIBS="${GLIB_PREFIX}/lib/glib-1.2_s.lib"
    1:             elif test -f "${GLIB_PREFIX}/lib/glib-1.2.lib"; then
    1:                 GLIB_LIBS="${GLIB_PREFIX}/lib/glib-1.2.lib"
    1:             else
    1:                 AC_MSG_ERROR([Cannot find $GLIB_PREFIX/lib/glib-1.2.lib or $GLIB_PREFIX/lib/glib-1.2_s.lib])
    1:             fi
    1:         fi
    1:         if test -n "$LIBIDL_PREFIX"; then
    1:             LIBIDL_CFLAGS="-I${LIBIDL_PREFIX}/include ${GLIB_CFLAGS}"
    1:             if test -f "${LIBIDL_PREFIX}/lib/libIDL-0.6_s.lib"; then
    1:                 LIBIDL_LIBS="${LIBIDL_PREFIX}/lib/libIDL-0.6_s.lib"
    1:                 STATIC_LIBIDL=1
    1:             elif test -f "${LIBIDL_PREFIX}/lib/libIDL-0.6.lib"; then
    1:                 LIBIDL_LIBS="${LIBIDL_PREFIX}/lib/libIDL-0.6.lib"
    1:             else
    1:                 AC_MSG_ERROR([Cannot find $LIBIDL_PREFIX/lib/libIDL-0.6.lib or $LIBIDL_PREFIX/lib/libIDL-0.6_s.lib])
    1:             fi
    1:         fi
    1:         LIBIDL_LIBS="${LIBIDL_LIBS} ${GLIB_LIBS}"
    1:         ;;
    1:     esac 
    1: 
14512: 
14512:     case "$host_os" in
15187:     cygwin*|msvc*|mks*)
14513:         AC_MSG_WARN([Using a cygwin build environment is unsupported. Configure cannot check for the presence of necessary headers. Please upgrade to MozillaBuild; see http://developer.mozilla.org/en/docs/Windows_Build_Prerequisites])
14512:         ;;
14512: 
14512:     *)
14341:         AC_CHECK_HEADERS(mmintrin.h oleacc.idl)
14341: 
14341:         AC_LANG_SAVE
14341:         AC_LANG_CPLUSPLUS
14341:         AC_CHECK_HEADERS(atlbase.h wpcapi.h)
14341:         AC_LANG_RESTORE
14512:         ;;
14512:     esac
14341: 
    1:     case "$target" in
    1:     i*86-*)
    1:     	AC_DEFINE(_X86_)
    1: 	;;
    1:     alpha-*)
    1:     	AC_DEFINE(_ALPHA_)
    1: 	;;
    1:     mips-*)
    1:     	AC_DEFINE(_MIPS_)
    1: 	;;
    1:     *)
    1:     	AC_DEFINE(_CPU_ARCH_NOT_DEFINED)
    1: 	;;
    1:     esac
    1:     ;;
    1: 
    1: *-netbsd*)
    1:     DSO_CFLAGS=''
    1:     CFLAGS="$CFLAGS -Dunix"
    1:     CXXFLAGS="$CXXFLAGS -Dunix"
    1:     if $CC -E - -dM </dev/null | grep __ELF__ >/dev/null; then
    1:         DLL_SUFFIX=".so"
    1:         DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:         DSO_LDOPTS='-shared'
    1: 	BIN_FLAGS='-Wl,--export-dynamic'
    1:     else
    1:     	DSO_PIC_CFLAGS='-fPIC -DPIC'
    1:     	DLL_SUFFIX=".so.1.0"
    1:     	DSO_LDOPTS='-shared'
    1:     fi
    1:     # This will fail on a.out systems prior to 1.5.1_ALPHA.
    1:     MKSHLIB_FORCE_ALL='-Wl,--whole-archive'
    1:     MKSHLIB_UNFORCE_ALL='-Wl,--no-whole-archive'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-Wl,-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,lib$(LIBRARY_NAME)$(DLL_SUFFIX) -o $@'
    1:     ;;
    1: 
    1: *-nto*) 
    1: 	AC_DEFINE(NTO)	
    1: 	AC_DEFINE(_QNX_SOURCE)
    1: 	AC_DEFINE(_i386)
    1: 	OS_TARGET=NTO
 5382: 	WARNINGS_AS_ERRORS=''
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: 	MOZ_DEBUG_FLAGS="-gstabs"
    1: 	USE_PTHREADS=1
    1: 	_PEDANTIC=
    1: 	LIBS="$LIBS -lsocket -lstdc++"
    1: 	_DEFINES_CFLAGS='-Wp,-include -Wp,$(DEPTH)/mozilla-config.h -DMOZILLA_CLIENT -D_POSIX_C_SOURCE=199506'
    1: 	_DEFINES_CXXFLAGS='-DMOZILLA_CLIENT -Wp,-include -Wp,$(DEPTH)/mozilla-config.h -D_POSIX_C_SOURCE=199506'
    1: 	if test "$with_x" != "yes"
    1: 	then
    1: 		_PLATFORM_DEFAULT_TOOLKIT="photon"
    1: 	    TK_CFLAGS='-I/usr/include/photon'
    1: 		TK_LIBS='-lph'
    1: 	fi
    1: 	case "${target_cpu}" in
    1: 	ppc*)
    1: 	AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)	
    1: 	;;
    1: 	esac
    1: 	case "${host_cpu}" in
    1: 	i*86)
    1: 	USE_ELF_DYNSTR_GC=1
    1: 	;;
    1: 	esac
    1: 	;;
    1: 
    1: *-openbsd*)
    1:     DLL_SUFFIX=".so.1.0"
    1:     DSO_CFLAGS=''
    1:     DSO_PIC_CFLAGS='-fPIC'
    1:     DSO_LDOPTS='-shared -fPIC'
    1:     if test "$LIBRUNPATH"; then
    1: 	DSO_LDOPTS="-R$LIBRUNPATH $DSO_LDOPTS"
    1:     fi
    1:     ;;
    1: 
    1: *-openvms*) 
    1:     AC_DEFINE(NO_PW_GECOS)
    1:     AC_DEFINE(NO_UDSOCK)
    1:     AC_DEFINE(POLL_WITH_XCONNECTIONNUMBER)
    1:     USE_PTHREADS=1
    1:     MKSHLIB_FORCE_ALL='-all'
    1:     MKSHLIB_UNFORCE_ALL='-none'
    1:     AS='as'
    1:     AS_DASH_C_FLAG='-Wc/names=as_is'
    1:     AR_FLAGS='c $@'
    1:     DSO_LDOPTS='-shared -auto_symvec'
    1:     DSO_PIC_CFLAGS=
    1:     MOZ_DEBUG_LDFLAGS='-g'
    1:     COMPAQ_CXX=1
    1:     CC_VERSION=`$CC -V 2>&1 | awk '/ C / { print $3 }'`
    1:     CXX_VERSION=`$CXX -V 2>&1 | awk '/ C\+\+ / { print $3 }'`
    1:     ;;
    1: 
    1: 
    1: *-os2*)
    1:     MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -o $@'
20288:     AC_DEFINE(OS2)
    1:     AC_DEFINE(XP_OS2)
20288:     AC_DEFINE(OS2EMX_PLAIN_CHAR)
20288:     AC_DEFINE(TCPV40HDRS)
    1:     USE_SHORT_LIBNAME=1
    1:     DLL_PREFIX=
    1:     LIB_PREFIX=
    1:     LIB_SUFFIX=lib
    1:     BIN_SUFFIX=".exe"
    1:     DLL_SUFFIX=".dll"
    1:     IMPORT_LIB_SUFFIX=lib
    1:     DSO_PIC_CFLAGS=
    1:     AR=emxomfar
    1:     AR_FLAGS='r $@'
    1:     CFLAGS="$CFLAGS -Zomf"
    1:     CXXFLAGS="$CXXFLAGS -Zomf"
    1:     DSO_LDOPTS='-Zdll'
    1:     BIN_FLAGS='-Zlinker /ST:0x100000'
    1:     IMPLIB='emximp -o'
    1:     FILTER='emxexp -o'
    1:     LDFLAGS='-Zmap'
 5382:     WARNINGS_AS_ERRORS='-Werror'
    1:     MOZ_DEBUG_FLAGS="-g -fno-inline"
11455:     MOZ_OPTIMIZE_FLAGS="-O2"
11455:     MOZ_OPTIMIZE_LDFLAGS="-s -Zlinker /EXEPACK:2 -Zlinker /PACKCODE -Zlinker /PACKDATA"
    1:     MOZ_XPCOM_OBSOLETE_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcomct.lib'
    1:     DYNAMIC_XPCOM_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xpcomcor.lib'
    1:     LIBXUL_LIBS='-L$(LIBXUL_DIST)/lib $(LIBXUL_DIST)/lib/xpcom.lib $(LIBXUL_DIST)/lib/xul.lib'
20288:     TARGET_MD_ARCH=os2
20288:     _PLATFORM_DEFAULT_TOOLKIT="cairo-os2"
20288:     MOZ_ENABLE_POSTSCRIPT=
20288:     RC=rc.exe
20288:     RCFLAGS='-n'
20288:     MOZ_USER_DIR="Mozilla"
20288: 
20288:     if test "$MOZTOOLS"; then
20288:         MOZ_TOOLS_DIR=`echo $MOZTOOLS | sed -e 's|\\\\|/|g'`
20288:     else
20288:         AC_MSG_ERROR([MOZTOOLS is not set])
20288:     fi
    1:     if test -n "$MOZ_OS2_HIGH_MEMORY"; then
    1:         DSO_LDOPTS="$DSO_LDOPTS -Zhigh-mem"
    1:         LDFLAGS="$LDFLAGS -Zhigh-mem"
    1:         MOZ_OPTIMIZE_LDFLAGS="$MOZ_OPTIMIZE_LDFLAGS -Zhigh-mem"
    1:         AC_DEFINE(MOZ_OS2_HIGH_MEMORY)
    1:     fi
    1: 
    1:     # GCC for OS/2 currently predefines these, but we don't want them
    1:     _DEFINES_CFLAGS="$_DEFINES_CFLAGS -Uunix -U__unix -U__unix__"
    1:     _DEFINES_CXXFLAGS="$_DEFINES_CXXFLAGS -Uunix -U__unix -U__unix__"
    1: 
    1:     AC_CACHE_CHECK(for __declspec(dllexport),
    1:         ac_os2_declspec,
    1:         [AC_TRY_COMPILE([__declspec(dllexport) void ac_os2_declspec(void) {}],
    1:                         [return 0;],
    1:                         ac_os2_declspec="yes",
    1:                         ac_os2_declspec="no")])
    1:     if test "$ac_os2_declspec" = "yes"; then
    1:         FILTER='true'
    1:         MOZ_OS2_USE_DECLSPEC='1'
    1:     fi
    1:     ;;
    1: 
    1: alpha*-*-osf*)
    1:     if test "$GNU_CC"; then
    1:       MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1:       MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -Wl,-soname,$@ -o $@'
    1: 
    1:     else
    1: 	MOZ_DEBUG_FLAGS='-g'
    1: 	ASFLAGS='-I$(topsrcdir)/xpcom/reflect/xptcall/public -g'
    1: 	CFLAGS="$CFLAGS -ieee"
    1: 	CXXFLAGS="$CXXFLAGS "'-noexceptions -ieee  -ptr $(DIST)/cxx_repository'
    1: 	DSO_LDOPTS='-shared -msym -expect_unresolved \* -update_registry $(DIST)/so_locations'
    1: 	DSO_CFLAGS=
    1: 	DSO_PIC_CFLAGS=
    1: 	MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_CFLAGS) $(DSO_LDOPTS) -soname $@ -o $@'
    1: 	MKSHLIB_FORCE_ALL='-all'
    1: 	MKSHLIB_UNFORCE_ALL='-none'
    1: 	dnl Might fix the libxpcom.so breakage on this platform as well....
    1: 	AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1: 	AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     fi
    1:     if test -z "$GNU_CXX"; then
    1:       COMPAQ_CXX=1
    1:     fi
    1:     AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     ;;
    1: 
    1: *-qnx*) 
    1:     DIRENT_INO=d_stat.st_ino
    1:     dnl Solves the problems the QNX compiler has with nsCOMPtr.h.
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     dnl Explicit set STDC_HEADERS to workaround QNX 6.0's failing of std test
    1:     AC_DEFINE(STDC_HEADERS)
    1:     if test "$no_x" = "yes"; then
    1: 	    _PLATFORM_DEFAULT_TOOLKIT='photon'
    1: 	    TK_CFLAGS='-I/usr/nto/include/photon'
    1: 	    TK_LIBS='-lphoton -lphrender'
    1:     fi
    1:     ;;
    1: 
    1: *-sco*) 
    1:     AC_DEFINE(NSCAP_DISABLE_TEST_DONTQUERY_CASES)
    1:     AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
    1:     CXXFLAGS="$CXXFLAGS -I/usr/include/CC"
    1:     if test ! "$GNU_CC"; then
    1:        DSO_LDOPTS='-G'
    1:     fi
    1:     ;;
    1: 
    1: dnl the qsort routine under solaris is faulty
    1: *-solaris*) 
    1:     AC_DEFINE(SOLARIS)
    1:     TARGET_NSPR_MDCPUCFG='\"md/_solaris.cfg\"'
    1:     SYSTEM_MAKEDEPEND=
    1:     # $ORIGIN/.. is for shared libraries under components/ to locate shared
    1:     # libraries one level up (e.g. libnspr4.so)
    1:     LDFLAGS="$LDFLAGS -z ignore -R '\$\$ORIGIN:\$\$ORIGIN/..'"
14800:     MOZ_MEMORY=1
24783:     if test "$SOLARIS_SUNPRO_CC"; then
24523:        LIBS="-lCrun -lCstd $LIBS"
    1:        NS_USE_NATIVE=1
19837:        MOZ_FIX_LINK_PATHS=
    1:        AC_DEFINE(NSCAP_DISABLE_DEBUG_PTR_TYPES)
14815:        CFLAGS="$CFLAGS -xlibmieee -xstrconst -xbuiltin=%all"
14815:        CXXFLAGS="$CXXFLAGS -xlibmieee -xbuiltin=%all -features=tmplife -norunpath"
    1:        LDFLAGS="-xildoff -z lazyload -z combreloc $LDFLAGS"
    1:        if test -z "$CROSS_COMPILE" && test -f /usr/lib/ld/map.noexstk; then
    1:            _SAVE_LDFLAGS=$LDFLAGS
    1:            LDFLAGS="-M /usr/lib/ld/map.noexstk $LDFLAGS" 
    1:            AC_TRY_LINK([#include <stdio.h>],
    1:                        [printf("Hello World\n");],
    1:                        ,
    1:                        [LDFLAGS=$_SAVE_LDFLAGS])
    1:        fi
 5382:        WARNINGS_AS_ERRORS='-Werror'
    1:        MOZ_OPTIMIZE_FLAGS="-xO4"
    1:        MKSHLIB='$(CXX) $(CXXFLAGS) $(DSO_PIC_FLAGS) $(DSO_LDOPTS) -h $@ -o $@'
    1:        MKCSHLIB='$(CC) $(CFLAGS) $(DSO_PIC_FLAGS) -G -z muldefs -h $@ -o $@'
    1:        MKSHLIB_FORCE_ALL='-z allextract'
 2607:        MKSHLIB_UNFORCE_ALL='-z defaultextract'
    1:        DSO_LDOPTS='-G -z muldefs'
    1:        AR_LIST="$AR t"
    1:        AR_EXTRACT="$AR x"
    1:        AR_DELETE="$AR d"
    1:        AR='$(CXX) -xar'
    1:        AR_FLAGS='-o $@'
    1:        AS='/usr/ccs/bin/as'
    1:        ASFLAGS="$ASFLAGS -K PIC -L -P -D_ASM -D__STDC__=0"
    1:        AS_DASH_C_FLAG=''
    1:        TARGET_COMPILER_ABI="sunc"
    1:        CC_VERSION=`$CC -V 2>&1 | grep '^cc:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
    1:        CXX_VERSION=`$CXX -V 2>&1 | grep '^CC:' 2>/dev/null | $AWK -F\: '{ print $2 }'`
24783:        AC_MSG_CHECKING([for Sun C++ compiler version >= 5.9])
    1:        AC_LANG_SAVE
    1:        AC_LANG_CPLUSPLUS
    1:        AC_TRY_COMPILE([],
24783:            [#if (__SUNPRO_CC < 0x590)
    1:            #error "Denied"
    1:            #endif],
    1:            _BAD_COMPILER=,_BAD_COMPILER=1)
    1:         if test -n "$_BAD_COMPILER"; then
    1:             _res="no"
24783:             AC_MSG_ERROR([Sun C++ 5.9 (Sun Studio 12) or higher is required to build. Your compiler version is $CXX_VERSION .])
    1:         else
    1:             _res="yes"
    1:         fi
    1:         AC_MSG_RESULT([$_res])
    1:         AC_LANG_RESTORE
    1:     else
    1:        ASFLAGS="$ASFLAGS -fPIC"
    1:        DSO_LDOPTS='-G'
    1:        _WARNINGS_CFLAGS=''
    1:        _WARNINGS_CXXFLAGS=''
    1:        if test "$OS_RELEASE" = "5.3"; then
    1: 	  AC_DEFINE(MUST_UNDEF_HAVE_BOOLEAN_AFTER_INCLUDES)
    1:        fi
    1:     fi
    1:     if test "$OS_RELEASE" = "5.5.1"; then
    1:        AC_DEFINE(NEED_USLEEP_PROTOTYPE)
    1:     fi
    1:     ;;
    1: 
    1: *-sunos*) 
    1:     DSO_LDOPTS='-Bdynamic'
    1:     MKSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     MKCSHLIB='-$(LD) $(DSO_LDOPTS) -o $@'
    1:     AC_DEFINE(SUNOS4)
    1:     AC_DEFINE(SPRINTF_RETURNS_STRING)
    1:     case "$(target_os)" in
    1:     sunos4.1*)
    1:         DLL_SUFFIX='.so.1.0'
    1:         ;;
    1:     esac
    1:     ;;
    1: 
    1: *-sysv4.2uw7*) 
    1: 	NSPR_LIBS="-lnspr$NSPR_VERSION -lplc$NSPR_VERSION -lplds$NSPR_VERSION -L/usr/ccs/lib -lcrt"
    1:     ;;
    1: 
    1: *-os2*)
    1:     HOST_NSPR_MDCPUCFG='\"md/_os2.cfg\"'
    1:     ;;
    1: 
    1: esac
    1: 
    1: dnl Only one oddball right now (QNX), but this gives us flexibility
    1: dnl if any other platforms need to override this in the future.
    1: AC_DEFINE_UNQUOTED(D_INO,$DIRENT_INO)
    1: 
    1: dnl ========================================================
    1: dnl Any platform that doesn't have MKSHLIB_FORCE_ALL defined
    1: dnl by now will not have any way to link most binaries (tests
    1: dnl as well as viewer, apprunner, etc.), because some symbols
    1: dnl will be left out of the "composite" .so's by ld as unneeded.
    1: dnl So, by defining NO_LD_ARCHIVE_FLAGS for these platforms,
    1: dnl they can link in the static libs that provide the missing
    1: dnl symbols.
    1: dnl ========================================================
    1: NO_LD_ARCHIVE_FLAGS=
    1: if test -z "$MKSHLIB_FORCE_ALL" || test -z "$MKSHLIB_UNFORCE_ALL"; then
    1:     NO_LD_ARCHIVE_FLAGS=1
    1: fi
    1: case "$target" in
    1: *-os2*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-aix4.3*|*-aix5*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-openvms*)
    1:     NO_LD_ARCHIVE_FLAGS=
    1:     ;;
    1: *-msvc*|*-mks*|*-mingw*|*-cygwin*|*-wince)
    1:     if test -z "$GNU_CC"; then
    1:         NO_LD_ARCHIVE_FLAGS=
    1:     fi
    1:     ;;
    1: esac
    1: AC_SUBST(NO_LD_ARCHIVE_FLAGS)
    1: 
    1: dnl ========================================================
    1: dnl = Flags to strip unused symbols from .so components
    1: dnl ========================================================
    1: case "$target" in
12932:     *-linux*|*-kfreebsd*-gnu)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-solaris*)
    1:         if test -z "$GNU_CC"; then
    1:          MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-M $(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:         else
    1:          if test -z "$GCC_USE_GNU_LD"; then
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-M -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-mapfile'
    1:          else
    1:           MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:          fi
    1:         fi
    1:         ;;
    1:     *-nto*) 
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         ;;
    1:     *-darwin*)
    1:         MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,-exported_symbols_list -Wl,$(BUILD_TOOLS)/gnu-ld-scripts/components-export-list'
    1:         ;;
    1:     *-cygwin*|*-mingw*|*-mks*|*-msvc|*-wince)
    1:         if test -n "$GNU_CC"; then
    1:            MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS='-Wl,--version-script,$(BUILD_TOOLS)/gnu-ld-scripts/components-version-script'
    1:         fi
    1:         ;;
    1: esac
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_COMPILER_CHECKS=1
 2271:     SKIP_LIBRARY_CHECKS=1
    1: fi
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl Checks for typedefs, structures, and compiler characteristics.
    1: dnl ========================================================
    1: AC_LANG_C
    1: AC_HEADER_STDC
    1: AC_C_CONST
    1: AC_TYPE_MODE_T
    1: AC_TYPE_OFF_T
    1: AC_TYPE_PID_T
    1: AC_TYPE_SIZE_T
    1: AC_STRUCT_ST_BLKSIZE
    1: AC_MSG_CHECKING(for siginfo_t)
    1: AC_CACHE_VAL(ac_cv_siginfo_t,
    1:  [AC_TRY_COMPILE([#define _POSIX_C_SOURCE 199506L
    1:                   #include <signal.h>],
    1:                  [siginfo_t* info;],
    1:                  [ac_cv_siginfo_t=true],
    1:                  [ac_cv_siginfo_t=false])])
    1: if test "$ac_cv_siginfo_t" = true ; then
    1:   AC_DEFINE(HAVE_SIGINFO_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl Check for int16_t, int32_t, int64_t, int64, uint, uint_t, and uint16_t.
    1: dnl ========================================================
    1: AC_MSG_CHECKING(for int16_t)
    1: AC_CACHE_VAL(ac_cv_int16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int16_t foo = 0;],
    1:                  [ac_cv_int16_t=true],
    1:                  [ac_cv_int16_t=false])])
    1: if test "$ac_cv_int16_t" = true ; then
    1:   AC_DEFINE(HAVE_INT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int32_t)
    1: AC_CACHE_VAL(ac_cv_int32_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int32_t foo = 0;],
    1:                  [ac_cv_int32_t=true],
    1:                  [ac_cv_int32_t=false])])
    1: if test "$ac_cv_int32_t" = true ; then
    1:   AC_DEFINE(HAVE_INT32_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64_t)
    1: AC_CACHE_VAL(ac_cv_int64_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64_t foo = 0;],
    1:                  [ac_cv_int64_t=true],
    1:                  [ac_cv_int64_t=false])])
    1: if test "$ac_cv_int64_t" = true ; then
    1:   AC_DEFINE(HAVE_INT64_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for int64)
    1: AC_CACHE_VAL(ac_cv_int64,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [int64 foo = 0;],
    1:                  [ac_cv_int64=true],
    1:                  [ac_cv_int64=false])])
    1: if test "$ac_cv_int64" = true ; then
    1:   AC_DEFINE(HAVE_INT64)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint)
    1: AC_CACHE_VAL(ac_cv_uint,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint foo = 0;],
    1:                  [ac_cv_uint=true],
    1:                  [ac_cv_uint=false])])
    1: if test "$ac_cv_uint" = true ; then
    1:   AC_DEFINE(HAVE_UINT)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint_t)
    1: AC_CACHE_VAL(ac_cv_uint_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint_t foo = 0;],
    1:                  [ac_cv_uint_t=true],
    1:                  [ac_cv_uint_t=false])])
    1: if test "$ac_cv_uint_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: AC_MSG_CHECKING(for uint16_t)
    1: AC_CACHE_VAL(ac_cv_uint16_t,
    1:  [AC_TRY_COMPILE([#include <stdio.h>
    1:                   #include <sys/types.h>],
    1:                  [uint16_t foo = 0;],
    1:                  [ac_cv_uint16_t=true],
    1:                  [ac_cv_uint16_t=false])])
    1: if test "$ac_cv_uint16_t" = true ; then
    1:   AC_DEFINE(HAVE_UINT16_T)
    1:   AC_MSG_RESULT(yes)
    1: else
    1:   AC_MSG_RESULT(no)
    1: fi
    1: 
    1: dnl On the gcc trunk (as of 2001-02-09) _GNU_SOURCE, and thus __USE_GNU,
    1: dnl are defined when compiling C++ but not C.  Since the result of this
    1: dnl test is used only in C++, do it in C++.
    1: AC_LANG_CPLUSPLUS
    1: 
    1: AC_MSG_CHECKING(for uname.domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->domainname; } ],
    1:         [ac_cv_have_uname_domainname_field=true],
    1:         [ac_cv_have_uname_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_MSG_CHECKING(for uname.__domainname)
    1: AC_CACHE_VAL(ac_cv_have_uname_us_domainname_field,
    1:     [AC_TRY_COMPILE([#include <sys/utsname.h>],
    1:         [ struct utsname *res; char *domain; 
    1:             (void)uname(res);  if (res != 0) { domain = res->__domainname; } ],
    1:         [ac_cv_have_uname_us_domainname_field=true],
    1:         [ac_cv_have_uname_us_domainname_field=false])])
    1: 
    1: if test "$ac_cv_have_uname_us_domainname_field" = "true"; then
    1:     AC_DEFINE(HAVE_UNAME_US_DOMAINNAME_FIELD)
    1:     AC_MSG_RESULT(yes)
    1: else
    1:     AC_MSG_RESULT(no)
    1: fi
    1: 
    1: AC_LANG_C
    1: 
    1: dnl Check for usable wchar_t (2 bytes, unsigned)
    1: dnl (we really don't need the unsignedness check anymore)
    1: dnl ========================================================
    1: 
    1: AC_CACHE_CHECK(for usable wchar_t (2 bytes, unsigned),
    1:     ac_cv_have_usable_wchar_v2,
    1:     [AC_TRY_COMPILE([#include <stddef.h>
    1:                      $configure_static_assert_macros],
    1:                     [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                      CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                     ac_cv_have_usable_wchar_v2="yes",
    1:                     ac_cv_have_usable_wchar_v2="no")])
    1: if test "$ac_cv_have_usable_wchar_v2" = "yes"; then
    1:     AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:     HAVE_CPP_2BYTE_WCHAR_T=1
    1: else
    1: dnl This is really gcc-only
    1: dnl Do this test using CXX only since some versions of gcc
    1: dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
    1: dnl only have short-wchar support for c++.
    1: dnl Note that we assume that mac & win32 have short wchar (see nscore.h)
    1: 
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
    1:     CXXFLAGS="$CXXFLAGS -fshort-wchar"
    1: 
    1:     AC_CACHE_CHECK(for compiler -fshort-wchar option, 
    1:         ac_cv_have_usable_wchar_option_v2,
15236:         [AC_TRY_LINK([#include <stddef.h>
    1:                       $configure_static_assert_macros],
    1:                      [CONFIGURE_STATIC_ASSERT(sizeof(wchar_t) == 2);
    1:                       CONFIGURE_STATIC_ASSERT((wchar_t)-1 > (wchar_t) 0)],
    1:                      ac_cv_have_usable_wchar_option_v2="yes",
    1:                      ac_cv_have_usable_wchar_option_v2="no")])
    1: 
    1:     if test "$ac_cv_have_usable_wchar_option_v2" = "yes"; then
    1:         AC_DEFINE(HAVE_CPP_2BYTE_WCHAR_T)
    1:         HAVE_CPP_2BYTE_WCHAR_T=1
20702:         WCHAR_CFLAGS="-fshort-wchar"
    1:     else    
    1:         CXXFLAGS=$_SAVE_CXXFLAGS
    1:     fi
    1:     AC_LANG_RESTORE
    1: fi
    1: 
    1: dnl Check for .hidden assembler directive and visibility attribute.
    1: dnl Borrowed from glibc configure.in
    1: dnl ===============================================================
    1: if test "$GNU_CC"; then
    1:   AC_CACHE_CHECK(for visibility(hidden) attribute,
    1:                  ac_cv_visibility_hidden,
    1:                  [cat > conftest.c <<EOF
    1:                   int foo __attribute__ ((visibility ("hidden"))) = 1;
    1: EOF
    1:                   ac_cv_visibility_hidden=no
    1:                   if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                     if egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                       ac_cv_visibility_hidden=yes
    1:                     fi
    1:                   fi
    1:                   rm -f conftest.[cs]
    1:                  ])
    1:   if test "$ac_cv_visibility_hidden" = "yes"; then
    1:     AC_DEFINE(HAVE_VISIBILITY_HIDDEN_ATTRIBUTE)
    1: 
    1:     AC_CACHE_CHECK(for visibility(default) attribute,
    1:                    ac_cv_visibility_default,
    1:                    [cat > conftest.c <<EOF
    1:                     int foo __attribute__ ((visibility ("default"))) = 1;
    1: EOF
    1:                     ac_cv_visibility_default=no
    1:                     if ${CC-cc} -fvisibility=hidden -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
    1:                       if ! egrep '\.(hidden|private_extern).*foo' conftest.s >/dev/null; then
    1:                         ac_cv_visibility_default=yes
    1:                       fi
    1:                     fi
    1:                     rm -f conftest.[cs]
    1:                    ])
    1:     if test "$ac_cv_visibility_default" = "yes"; then
    1:       AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE)
    1: 
    1:       AC_CACHE_CHECK(for visibility pragma support,
    1:                      ac_cv_visibility_pragma,
    1:                      [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1:                       int foo_hidden = 1;
    1: #pragma GCC visibility push(default)
    1:                       int foo_default = 1;
    1: EOF
    1:                       ac_cv_visibility_pragma=no
    1:                       if ${CC-cc} -Werror -S conftest.c -o conftest.s >/dev/null 2>&1; then
 2576:                         if egrep '\.(hidden|private_extern).*foo_hidden' conftest.s >/dev/null; then
 2576:                           if ! egrep '\.(hidden|private_extern).*foo_default' conftest.s > /dev/null; then
    1:                             ac_cv_visibility_pragma=yes
    1:                           fi
    1:                         fi
    1:                       fi
    1:                       rm -f conftest.[cs]
    1:                     ])
    1:       if test "$ac_cv_visibility_pragma" = "yes"; then
    1:         AC_CACHE_CHECK(For gcc visibility bug with class-level attributes (GCC bug 26905),
    1:                        ac_cv_have_visibility_class_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: struct __attribute__ ((visibility ("default"))) TestStruct {
    1:   static void Init();
    1: };
    1: __attribute__ ((visibility ("default"))) void TestFunc() {
    1:   TestStruct::Init();
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_class_bug=no
    1:                        if ! ${CXX-g++} ${CXXFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_class_bug=yes
    1:                        else
 2576:                          if test `egrep -c '@PLT|\\$stub' conftest.S` = 0; then
    1:                            ac_cv_have_visibility_class_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -rf conftest.{c,S}
    1:                        ])
    1: 
    1:         AC_CACHE_CHECK(For x86_64 gcc visibility bug with builtins (GCC bug 20297),
    1:                        ac_cv_have_visibility_builtin_bug,
    1:                        [cat > conftest.c <<EOF
    1: #pragma GCC visibility push(hidden)
    1: #pragma GCC visibility push(default)
    1: #include <string.h>
    1: #pragma GCC visibility pop
    1: 
    1: __attribute__ ((visibility ("default"))) void Func() {
    1:   char c[[100]];
    1:   memset(c, 0, sizeof(c));
    1: }
    1: EOF
    1:                        ac_cv_have_visibility_builtin_bug=no
    1:                        if ! ${CC-cc} ${CFLAGS} ${DSO_PIC_CFLAGS} ${DSO_LDOPTS} -O2 -S -o conftest.S conftest.c > /dev/null 2>&1 ; then
    1:                          ac_cv_have_visibility_builtin_bug=yes
    1:                        else
    1:                          if test `grep -c "@PLT" conftest.S` = 0; then
    1:                            ac_cv_visibility_builtin_bug=yes
    1:                          fi
    1:                        fi
    1:                        rm -f conftest.{c,S}
    1:                        ])
    1:         if test "$ac_cv_have_visibility_builtin_bug" = "no" -a \
    1:                 "$ac_cv_have_visibility_class_bug" = "no"; then
    1:           VISIBILITY_FLAGS='-I$(DIST)/include/system_wrappers -include $(topsrcdir)/config/gcc_hidden.h'
    1:           WRAP_SYSTEM_INCLUDES=1
    1:         else
    1:           VISIBILITY_FLAGS='-fvisibility=hidden'
    1:         fi # have visibility pragma bug
    1:       fi   # have visibility pragma
    1:     fi     # have visibility(default) attribute
    1:   fi       # have visibility(hidden) attribute
    1: fi         # GNU_CC
    1: 
18946: # visibility hidden flag for Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
18946: VISIBILITY_FLAGS='-xldscope=hidden'
18946: fi         # Sun Studio on Solaris
18946: 
    1: AC_SUBST(WRAP_SYSTEM_INCLUDES)
    1: AC_SUBST(VISIBILITY_FLAGS)
    1: 
    1: dnl Checks for header files.
    1: dnl ========================================================
    1: AC_HEADER_DIRENT
    1: case "$target_os" in
    1: freebsd*)
    1: # for stuff like -lXshm
    1:     CPPFLAGS="${CPPFLAGS} ${X_CFLAGS}"
    1:     ;;
    1: esac
    1: AC_CHECK_HEADERS(sys/byteorder.h compat.h getopt.h)
    1: AC_CHECK_HEADERS(sys/bitypes.h memory.h unistd.h)
    1: AC_CHECK_HEADERS(gnu/libc-version.h nl_types.h)
    1: AC_CHECK_HEADERS(malloc.h)
    1: AC_CHECK_HEADERS(X11/XKBlib.h)
23834: AC_CHECK_HEADERS(io.h)
    1: 
    1: dnl These are all the places some variant of statfs can be hiding.
    1: AC_CHECK_HEADERS(sys/statvfs.h sys/statfs.h sys/vfs.h sys/mount.h)
    1: 
    1: dnl Try for MMX support
    1: dnl NB - later gcc versions require -mmmx for this header to be successfully
    1: dnl included (or another option which implies it, such as -march=pentium-mmx)
    1: AC_CHECK_HEADERS(mmintrin.h)
    1: 
    1: dnl Check whether the compiler supports the new-style C++ standard
    1: dnl library headers (i.e. <new>) or needs the old "new.h"
    1: AC_LANG_CPLUSPLUS
    1: NEW_H=new.h
    1: AC_CHECK_HEADER(new, [NEW_H=new])
    1: AC_DEFINE_UNQUOTED(NEW_H, <$NEW_H>)
    1: AC_LANG_C
    1: 
 6804: AC_ARG_ENABLE(dtrace,
10431:               [  --enable-dtrace         build with dtrace support if available (default=no)],
 6804:               [enable_dtrace="yes"],)
 6804: if test "x$enable_dtrace" = "xyes"; then
 6804:   AC_CHECK_HEADER(sys/sdt.h, HAVE_DTRACE=1)
 6804:   if test -n "$HAVE_DTRACE"; then
 6804:       AC_DEFINE(INCLUDE_MOZILLA_DTRACE)
 6804:   else
 9752:       AC_MSG_ERROR([dtrace enabled but sys/sdt.h not found]);
 6804:   fi
 6804: fi
 6804: AC_SUBST(HAVE_DTRACE)
 6804: 
    1: case $target in
    1: *-aix4.3*|*-aix5*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_HEADERS(sys/cdefs.h)
    1: 	;;
    1: esac
    1: 
    1: dnl Checks for libraries.
    1: dnl ========================================================
    1: case $target in
    1: *-hpux11.*)
    1: 	;;
    1: *)
    1: 	AC_CHECK_LIB(c_r, gethostbyname_r)
    1: 	;;
    1: esac
    1: 
    1: dnl We don't want to link with libdl even if it's present on OS X, since
    1: dnl it's not used and not part of the default installation.
    1: dnl The same goes for BeOS.
    1: dnl We don't want to link against libm or libpthread on Darwin since
    1: dnl they both are just symlinks to libSystem and explicitly linking
    1: dnl against libSystem causes issues when debugging (see bug 299601).
    1: case $target in
    1: *-darwin*)
    1:     ;;
    1: *-beos*)
    1:     ;;
    1: *)
    1:     AC_CHECK_LIB(m, atan)
    1:     AC_CHECK_LIB(dl, dlopen,
    1:     AC_CHECK_HEADER(dlfcn.h, 
    1:         LIBS="-ldl $LIBS"
    1:         AC_DEFINE(HAVE_LIBDL)))
    1:     ;;
    1: esac
 7836: 
 7836: _SAVE_CFLAGS="$CFLAGS"
 7836: CFLAGS="$CFLAGS -D_GNU_SOURCE"
 7836: AC_CHECK_FUNCS(dladdr)
 7836: CFLAGS="$_SAVE_CFLAGS"
 7836: 
    1: if test ! "$GNU_CXX"; then
    1: 
    1:     case $target in
    1:     *-aix*)
    1: 	AC_CHECK_LIB(C_r, demangle)
    1: 	;;
    1:      *)
    1: 	AC_CHECK_LIB(C, demangle)
    1: 	;;
    1:      esac
    1: fi
    1: AC_CHECK_LIB(socket, socket)
    1: 
26688: dnl ========================================================
26688: dnl Check whether we can compile code for Core Text
26688: dnl (Mac OS X 10.5 or later)
26688: dnl ========================================================
26688: case "$target" in
26688: *-darwin*)
26688:   AC_MSG_CHECKING([for Core Text])
26688:   AC_TRY_COMPILE([#include <ApplicationServices/ApplicationServices.h>],
26688:                  [CTLineRef lineRef;],
26688:                   ac_cv_have_core_text="yes",
26688:                   ac_cv_have_core_text="no")
26688:   AC_MSG_RESULT([$ac_cv_have_core_text])
26688:   if test "$ac_cv_have_core_text" = "yes"; then
26688:     AC_DEFINE(MOZ_CORETEXT, 1)
26688:     MOZ_CORETEXT=1
26688:   fi
26688:   ;;
26688: esac
26688: 
26688: AC_SUBST(MOZ_CORETEXT)
26688: 
    1: XLDFLAGS="$X_LIBS"
    1: XLIBS="$X_EXTRA_LIBS"
    1: 
    1: dnl ========================================================
    1: dnl Checks for X libraries.
    1: dnl Ordering is important.
    1: dnl Xt is dependent upon SM as of X11R6
    1: dnl ========================================================
    1: if test "$no_x" = "yes"; then
    1:     AC_DEFINE(NO_X11)
    1: else
    1:     AC_DEFINE_UNQUOTED(FUNCPROTO,15)
    1: 	XLIBS="-lX11 $XLIBS"
    1: 	_SAVE_LDFLAGS="$LDFLAGS"
    1: 	LDFLAGS="$XLDFLAGS $LDFLAGS"
    1: 	AC_CHECK_LIB(X11, XDrawLines, [X11_LIBS="-lX11"],
    1: 		[MISSING_X="$MISSING_X -lX11"], $XLIBS)
    1: 	AC_CHECK_LIB(Xext, XextAddDisplay, [XEXT_LIBS="-lXext"],
    1: 		[MISSING_X="$MISSING_X -lXext"], $XLIBS)
25500:     echo "green"
    1:      
    1: 	AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt"], [
    1:         unset ac_cv_lib_Xt_XtFree
    1: 	    AC_CHECK_LIB(ICE, IceFlush, [XT_LIBS="-lICE $XT_LIBS"],, $XT_LIBS $XLIBS)
    1: 	    AC_CHECK_LIB(SM, SmcCloseConnection, [XT_LIBS="-lSM $XT_LIBS"],, $XT_LIBS $XLIBS) 
    1:         AC_CHECK_LIB(Xt, XtFree, [ XT_LIBS="-lXt $XT_LIBS"],
    1: 		    [MISSING_X="$MISSING_X -lXt"], $X_PRE_LIBS $XT_LIBS $XLIBS)
    1:         ])
    1: 
    1:     # AIX needs the motif library linked before libXt to prevent
    1:     # crashes in plugins linked against Motif - Bug #98892
    1:     case "${target_os}" in
    1:     aix*)
    1:         XT_LIBS="-lXm $XT_LIBS"
    1:         ;;
    1:     esac
    1: 
    1:     dnl ========================================================
    1:     dnl = Check for XShm
    1:     dnl ========================================================
    1:     AC_CHECK_LIB(Xext, XShmCreateImage, _HAVE_XSHM_XEXT=1,,
    1:         $XLIBS $XEXT_LIBS)
    1:     AC_CHECK_HEADER(X11/extensions/XShm.h)
  440:     if test "$ac_cv_header_X11_extensions_XShm_h" = "yes" &&
    1:         test -n "$_HAVE_XSHM_XEXT"; then
    1:         AC_DEFINE(HAVE_XSHM)
    1:     fi
    1: 
    1:     dnl ========================================================
    1:     dnl = Check for XIE
    1:     dnl ========================================================
    1:     AC_CHECK_LIB(XIE, XieFloGeometry, [MOZ_XIE_LIBS="-lXIE"],,
    1:         $XLIBS $XEXT_LIBS)
    1:     AC_CHECK_HEADER(X11/extensions/XIElib.h)
    1: 
    1:     if test "$MOZ_XIE_LIBS"; then
    1: 	dnl ====================================================
    1: 	dnl = If XIE is present and is desired, turn it on
    1: 	dnl ====================================================
    1: 	case $target in
    1: 	    *-hpux*)
    1: 		;;
    1: 	    *)
    1: 		HAVE_XIE=1
    1: 		;;
    1: 	esac
    1:     fi
    1: 
    1: 	LDFLAGS="$_SAVE_LDFLAGS"
    1: 
 4844:     dnl ========================================================
 4844:     dnl = Check for freetype2 and its functionality
 4844:     dnl ========================================================
    1:     AC_CHECK_FT2(6.1.0, [_HAVE_FREETYPE2=1], [_HAVE_FREETYPE2=])
    1: 
 4844:     if test "$_HAVE_FREETYPE2"; then
 4844:     	_SAVE_LIBS="$LIBS"
 4844:     	_SAVE_CFLAGS="$CFLAGS"
 4844:     	LIBS="$LIBS $FT2_LIBS"
 4844:     	CFLAGS="$CFLAGS $FT2_CFLAGS"
 4844: 
 4844:         AC_CACHE_CHECK(for FT_Bitmap_Size.y_ppem,
 4844:             ac_cv_member_FT_Bitmap_Size_y_ppem,
 4844:             [AC_TRY_COMPILE([#include <ft2build.h>
 4844:                              #include FT_FREETYPE_H],
 4844:                             [FT_Bitmap_Size s;
 4844:                              if (sizeof s.y_ppem) return 0;
 4844:                              return 1],
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=yes,
 4844:                             ac_cv_member_FT_Bitmap_Size_y_ppem=no)])
 4844:         if test "$ac_cv_member_FT_Bitmap_Size_y_ppem" = yes; then
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=1
 4844:         else
 4844:             HAVE_FT_BITMAP_SIZE_Y_PPEM=0
 4844:         fi
 4844:         AC_DEFINE_UNQUOTED(HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            $HAVE_FT_BITMAP_SIZE_Y_PPEM,
 4844:                            [FT_Bitmap_Size structure includes y_ppem field])
 4844: 
 4844:         AC_CHECK_FUNCS(FT_GlyphSlot_Embolden FT_Load_Sfnt_Table FT_Select_Size)
 4844: 
 4844:     	LIBS="$_SAVE_LIBS"
 4844:     	CFLAGS="$_SAVE_CFLAGS"
 4844:     fi
 4844: 
    1: fi # $no_x
    1: 
    1: AC_SUBST(XCFLAGS)
    1: AC_SUBST(XLDFLAGS)
    1: AC_SUBST(XLIBS)
25500: AC_SUBST(XEXT_LIBS)
    1: AC_SUBST(XT_LIBS)
    1: 
27043: AC_MSG_CHECKING(for ARM SIMD support in compiler)
23006: AC_TRY_COMPILE([],
23006:                [asm("uqadd8 r1, r1, r2");],
23006:                result="yes", result="no")
23006: AC_MSG_RESULT("$result")
23006: if test "$result" = "yes"; then
23006:     AC_DEFINE(HAVE_ARM_SIMD)
23006:     HAVE_ARM_SIMD=1
23006: fi
23006: AC_SUBST(HAVE_ARM_SIMD)
23006: 
27043: AC_MSG_CHECKING(for ARM NEON support in compiler)
27043: _SAVE_CFLAGS="$CFLAGS"
27043: if test "$GNU_CC"; then
27043:   # gcc needs -mfpu=neon to recognize NEON instructions
27043:   CFLAGS="$CFLAGS -mfpu=neon"
27043: fi
27043: AC_TRY_COMPILE([],
27043:                [asm("vadd.i8 d0, d0, d0");],
27043:                result="yes", result="no")
27043: AC_MSG_RESULT("$result")
27043: if test "$result" = "yes"; then
27043:     AC_DEFINE(HAVE_ARM_NEON)
27043:     HAVE_ARM_NEON=1
27043: fi
27043: CFLAGS="$_SAVE_CFLAGS"
27043: AC_SUBST(HAVE_ARM_NEON)
27043: 
    1: dnl ========================================================
    1: dnl = pthread support
    1: dnl = Start by checking whether the system support pthreads
    1: dnl ========================================================
    1: case "$target_os" in
    1: darwin*)
    1:     USE_PTHREADS=1
    1:     ;;
    1: *)
    1:     MOZ_CHECK_PTHREADS(pthreads,
    1:         USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthreads",
    1:         MOZ_CHECK_PTHREADS(pthread,
    1:             USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lpthread",
    1:             MOZ_CHECK_PTHREADS(c_r,
    1:                 USE_PTHREADS=1 _PTHREAD_LDFLAGS="-lc_r",
    1:                 MOZ_CHECK_PTHREADS(c,
    1:                     USE_PTHREADS=1
    1:                 )
    1:             )
    1:         )
    1:     )
    1:     ;;
    1: esac
    1: 
    1: dnl ========================================================
    1: dnl Check the command line for --with-pthreads 
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(pthreads,
    1: [  --with-pthreads         Force use of system pthread library with NSPR ],
    1: [ if test "$USE_PTHREADS"x = x; then
    1:     AC_MSG_ERROR([ --with-pthreads specified for a system without pthread support ]);
    1: fi],
    1:     USE_PTHREADS=
    1:     _PTHREAD_LDFLAGS=
    1: )
    1: 
    1: dnl ========================================================
    1: dnl Do the platform specific pthread hackery
    1: dnl ========================================================
    1: if test "$USE_PTHREADS"x != x
    1: then
    1: 	dnl
    1: 	dnl See if -pthread is supported.
    1: 	dnl
    1: 	rm -f conftest*
    1: 	ac_cv_have_dash_pthread=no
    1: 	AC_MSG_CHECKING(whether ${CC-cc} accepts -pthread)
    1: 	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	${CC-cc} -pthread -o conftest conftest.c > conftest.out 2>&1
    1: 	if test $? -eq 0; then
    1: 		if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthread`" && test -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			ac_cv_have_dash_pthread=yes
    1: 	        case "$target_os" in
    1: 	        freebsd*)
    1: # Freebsd doesn't use -pthread for compiles, it uses them for linking
    1:                 ;;
    1: 	        *)
    1: 			    CFLAGS="$CFLAGS -pthread"
    1: 			    CXXFLAGS="$CXXFLAGS -pthread"
    1:                 ;;
    1: 	        esac
    1: 		fi
    1: 	fi
    1: 	rm -f conftest*
    1:     AC_MSG_RESULT($ac_cv_have_dash_pthread)
    1: 
    1: 	dnl
    1: 	dnl See if -pthreads is supported.
    1: 	dnl
    1:     ac_cv_have_dash_pthreads=no
    1:     if test "$ac_cv_have_dash_pthread" = "no"; then
    1: 	    AC_MSG_CHECKING(whether ${CC-cc} accepts -pthreads)
    1:     	echo 'int main() { return 0; }' | cat > conftest.c
    1: 	    ${CC-cc} -pthreads -o conftest conftest.c > conftest.out 2>&1
    1:     	if test $? -eq 0; then
    1: 	    	if test -z "`egrep -i '(unrecognize|unknown)' conftest.out | grep pthreads`" && test -z "`egrep -i '(error|incorrect)' conftest.out`" ; then
    1: 			    ac_cv_have_dash_pthreads=yes
    1: 			    CFLAGS="$CFLAGS -pthreads"
    1: 			    CXXFLAGS="$CXXFLAGS -pthreads"
    1: 		    fi
    1: 	    fi
    1: 	    rm -f conftest*
    1:     	AC_MSG_RESULT($ac_cv_have_dash_pthreads)
    1:     fi
    1: 
    1: 	case "$target" in
    1: 	    *-*-freebsd*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1: 				_PTHREAD_LDFLAGS="-pthread"
    1: 			else
    1: 				_PTHREAD_LDFLAGS="-lc_r"
    1: 			fi
    1: 			;;
    1: 
    1: 	    *-*-openbsd*|*-*-bsdi*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			AC_DEFINE(_THREAD_SAFE)
    1: 			dnl -pthread links in -lc_r, so don't specify it explicitly.
    1: 			if test "$ac_cv_have_dash_pthread" = "yes"; then
    1:                 _PTHREAD_LDFLAGS="-pthread"
    1: 			fi
    1: 			;;
    1: 
12932: 	    *-*-linux*|*-*-kfreebsd*-gnu)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-*-nto*) 
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-aix4.3*|*-aix5*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    *-hpux11.*)
    1: 			AC_DEFINE(_REENTRANT) 
    1: 			;;
    1: 
    1: 	    alpha*-*-osf*)
    1: 			AC_DEFINE(_REENTRANT)
    1: 			;;
    1: 
    1: 	    *-*-solaris*) 
    1: 			AC_DEFINE(_REENTRANT)
24783: 			if test "$SOLARIS_SUNPRO_CC"; then
    1: 				CFLAGS="$CFLAGS -mt" 
    1: 				CXXFLAGS="$CXXFLAGS -mt" 
    1: 			fi
    1: 			;;
    1: 	esac
    1:     LDFLAGS="${_PTHREAD_LDFLAGS} ${LDFLAGS}"
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl See if mmap sees writes
    1: dnl For cross compiling, just define it as no, which is a safe default
    1: dnl ========================================================
    1: AC_MSG_CHECKING(whether mmap() sees write()s)
    1: 
    1: changequote(,)
    1: mmap_test_prog='
    1:     #include <stdlib.h>
    1:     #include <unistd.h>
    1:     #include <sys/mman.h>
    1:     #include <sys/types.h>
    1:     #include <sys/stat.h>
    1:     #include <fcntl.h>
    1: 
    1:     char fname[] = "conftest.file";
    1:     char zbuff[1024]; /* Fractional page is probably worst case */
    1: 
    1:     int main() {
    1: 	char *map;
    1: 	int fd;
    1: 	int i;
    1: 	unlink(fname);
    1: 	fd = open(fname, O_RDWR | O_CREAT, 0660);
    1: 	if(fd<0) return 1;
    1: 	unlink(fname);
    1: 	write(fd, zbuff, sizeof(zbuff));
    1: 	lseek(fd, 0, SEEK_SET);
    1: 	map = (char*)mmap(0, sizeof(zbuff), PROT_READ, MAP_SHARED, fd, 0);
    1: 	if(map==(char*)-1) return 2;
    1: 	for(i=0; fname[i]; i++) {
    1: 	    int rc = write(fd, &fname[i], 1);
    1: 	    if(map[i]!=fname[i]) return 4;
    1: 	}
    1: 	return 0;
    1:     }
    1: '
    1: changequote([,])
    1: 
    1: AC_TRY_RUN($mmap_test_prog , result="yes", result="no", result="yes")
    1: 
    1: AC_MSG_RESULT("$result")
    1: 
    1: if test "$result" = "no"; then
    1:     AC_DEFINE(MMAP_MISSES_WRITES)
    1: fi
    1: 
    1: 
    1: dnl Checks for library functions.
    1: dnl ========================================================
    1: AC_PROG_GCC_TRADITIONAL
    1: AC_FUNC_MEMCMP
23834: AC_CHECK_FUNCS(random strerror lchown fchmod snprintf statvfs memmove rint stat64 lstat64 truncate64 statvfs64 setbuf isatty)
    1: AC_CHECK_FUNCS(flockfile getpagesize)
    1: AC_CHECK_FUNCS(localtime_r strtok_r)
    1: 
    1: dnl check for wcrtomb/mbrtowc
    1: dnl =======================================================================
    1: if test -z "$MACOS_DEPLOYMENT_TARGET" || test "$MACOS_DEPLOYMENT_TARGET" -ge "100300"; then
    1: AC_LANG_SAVE
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(for wcrtomb,
    1:     ac_cv_have_wcrtomb,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};wcrtomb(0,'f',&ps);],
    1:                  ac_cv_have_wcrtomb="yes",
    1:                  ac_cv_have_wcrtomb="no")])
    1: if test "$ac_cv_have_wcrtomb" = "yes"; then
    1:     AC_DEFINE(HAVE_WCRTOMB)
    1: fi
    1: AC_CACHE_CHECK(for mbrtowc,
    1:     ac_cv_have_mbrtowc,
    1:     [AC_TRY_LINK([#include <wchar.h>],
    1:                  [mbstate_t ps={0};mbrtowc(0,0,0,&ps);],
    1:                  ac_cv_have_mbrtowc="yes",
    1:                  ac_cv_have_mbrtowc="no")])
    1: if test "$ac_cv_have_mbrtowc" = "yes"; then
    1:     AC_DEFINE(HAVE_MBRTOWC)
    1: fi
    1: AC_LANG_RESTORE
    1: fi
    1: 
    1: AC_CACHE_CHECK(
    1:     [for res_ninit()],
    1:     ac_cv_func_res_ninit,
    1:     [AC_TRY_LINK([
    1:         #ifdef linux
    1:         #define _BSD_SOURCE 1
    1:         #endif
    1:         #include <resolv.h>
    1:         ],
    1:         [int foo = res_ninit(&_res);],
    1:         [ac_cv_func_res_ninit=yes],
    1:         [ac_cv_func_res_ninit=no])
    1:     ])
    1: 
    1: if test "$ac_cv_func_res_ninit" = "yes"; then
    1:     AC_DEFINE(HAVE_RES_NINIT)
    1: dnl must add the link line we do something as foolish as this... dougt
    1: dnl else
    1: dnl    AC_CHECK_LIB(bind, res_ninit, AC_DEFINE(HAVE_RES_NINIT),
    1: dnl        AC_CHECK_LIB(resolv, res_ninit, AC_DEFINE(HAVE_RES_NINIT)))
    1: fi
    1: 
    1: AC_LANG_CPLUSPLUS
    1: AC_CACHE_CHECK(
    1:     [for gnu_get_libc_version()],
    1:     ac_cv_func_gnu_get_libc_version,
    1:     [AC_TRY_LINK([
    1:         #ifdef HAVE_GNU_LIBC_VERSION_H
    1:         #include <gnu/libc-version.h>
    1:         #endif
    1:         ],
    1:         [const char *glibc_version = gnu_get_libc_version();],
    1:         [ac_cv_func_gnu_get_libc_version=yes],
    1:         [ac_cv_func_gnu_get_libc_version=no] 
    1:         )]
    1:     )
    1: 
    1: if test "$ac_cv_func_gnu_get_libc_version" = "yes"; then
    1:     AC_DEFINE(HAVE_GNU_GET_LIBC_VERSION)
    1: fi
    1: 
    1: case $target_os in
    1:     os2*|msvc*|mks*|cygwin*|mingw*|darwin*|wince*|beos*)
    1:         ;;
    1:     *)
    1:     
    1: AC_CHECK_LIB(c, iconv, [_ICONV_LIBS="$_ICONV_LIBS"],
    1:     AC_CHECK_LIB(iconv, iconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"],
    1:         AC_CHECK_LIB(iconv, libiconv, [_ICONV_LIBS="$_ICONV_LIBS -liconv"])))
    1: _SAVE_LIBS=$LIBS
    1: LIBS="$LIBS $_ICONV_LIBS"
    1: AC_CACHE_CHECK(
    1:     [for iconv()],
    1:     ac_cv_func_iconv,
    1:     [AC_TRY_LINK([
    1:         #include <stdlib.h>
    1:         #include <iconv.h>
    1:         ],
    1:         [
    1:             iconv_t h = iconv_open("", "");
    1:             iconv(h, NULL, NULL, NULL, NULL);
    1:             iconv_close(h);
    1:         ],
    1:         [ac_cv_func_iconv=yes],
    1:         [ac_cv_func_iconv=no] 
    1:         )]
    1:     )
    1: if test "$ac_cv_func_iconv" = "yes"; then
    1:     AC_DEFINE(HAVE_ICONV)
    1:     DYNAMIC_XPCOM_LIBS="$DYNAMIC_XPCOM_LIBS $_ICONV_LIBS"
    1:     LIBXUL_LIBS="$LIBXUL_LIBS $_ICONV_LIBS"
    1:     LIBICONV="$_ICONV_LIBS"
    1:     AC_CACHE_CHECK(
    1:         [for iconv() with const input],
    1:         ac_cv_func_const_iconv,
    1:         [AC_TRY_COMPILE([
    1:             #include <stdlib.h>
    1:             #include <iconv.h>
    1:             ],
    1:             [
    1:                 const char *input = "testing";
    1:                 iconv_t h = iconv_open("", "");
    1:                 iconv(h, &input, NULL, NULL, NULL);
    1:                 iconv_close(h);
    1:             ],
    1:             [ac_cv_func_const_iconv=yes],
    1:             [ac_cv_func_const_iconv=no] 
    1:             )]
    1:         )
    1:     if test "$ac_cv_func_const_iconv" = "yes"; then
    1:         AC_DEFINE(HAVE_ICONV_WITH_CONST_INPUT)
    1:     fi
    1: fi
    1: LIBS=$_SAVE_LIBS
    1: 
    1:     ;;
    1: esac
    1: 
    1: AM_LANGINFO_CODESET
    1: 
    1: AC_LANG_C
    1: 
    1: dnl **********************
    1: dnl *** va_copy checks ***
    1: dnl **********************
    1: dnl we currently check for all three va_copy possibilities, so we get
    1: dnl all results in config.log for bug reports.
    1: AC_MSG_CHECKING(for an implementation of va_copy())
    1: AC_CACHE_VAL(ac_cv_va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_copy=yes,
    1:         ac_cv_va_copy=no,
    1:         ac_cv_va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv_va_copy)
    1: AC_MSG_CHECKING(for an implementation of __va_copy())
    1: AC_CACHE_VAL(ac_cv___va_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             __va_copy (args2, args1);
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv___va_copy=yes,
    1:         ac_cv___va_copy=no,
    1:         ac_cv___va_copy=no
    1:     )
    1: ])
    1: AC_MSG_RESULT($ac_cv___va_copy)
    1: AC_MSG_CHECKING(whether va_lists can be copied by value)
    1: AC_CACHE_VAL(ac_cv_va_val_copy,[
    1:     AC_TRY_RUN([
    1:         #include <stdarg.h>
    1:         void f (int i, ...) {
    1:             va_list args1, args2;
    1:             va_start (args1, i);
    1:             args2 = args1;
    1:             if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
    1:                 exit (1);
    1:             va_end (args1); va_end (args2);
    1:         }
    1:         int main() { f (0, 42); return 0; }],
    1:         ac_cv_va_val_copy=yes,
    1:         ac_cv_va_val_copy=no,
    1:         ac_cv_va_val_copy=yes
    1:     )
    1: ])
    1: if test "x$ac_cv_va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: elif test "x$ac_cv___va_copy" = "xyes"; then
    1:     AC_DEFINE(VA_COPY, __va_copy)
    1:     AC_DEFINE(HAVE_VA_COPY)
    1: fi
    1: 
    1: if test "x$ac_cv_va_val_copy" = "xno"; then
    1:    AC_DEFINE(HAVE_VA_LIST_AS_ARRAY)
    1: fi
    1: AC_MSG_RESULT($ac_cv_va_val_copy)
    1: 
    1: dnl Check for dll-challenged libc's.
    1: dnl This check is apparently only needed for Linux.
    1: case "$target" in
    1: 	*-linux*)
    1: 	    dnl ===================================================================
    1: 	    _curdir=`pwd`
    1: 	    export _curdir
    1: 	    rm -rf conftest* _conftest
    1: 	    mkdir _conftest
    1: 	    cat >> conftest.C <<\EOF
    1: #include <stdio.h>
    1: #include <link.h>
    1: #include <dlfcn.h>
    1: #ifdef _dl_loaded
    1: void __dump_link_map(void) {
    1:   struct link_map *map = _dl_loaded;
    1:   while (NULL != map) {printf("0x%08x %s\n", map->l_addr, map->l_name); map = map->l_next;}
    1: }
    1: int main() {
    1:   dlopen("./conftest1.so",RTLD_LAZY);
    1:   dlopen("./../_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/conftest1.so",RTLD_LAZY);
    1:   dlopen("CURDIR/_conftest/../_conftest/conftest1.so",RTLD_LAZY);
    1:   __dump_link_map();
    1: }
    1: #else
    1: /* _dl_loaded isn't defined, so this should be either a libc5 (glibc1) system, or a glibc2 system that doesn't have the multiple load bug (i.e., RH6.0).*/
    1: int main() { printf("./conftest1.so\n"); }
    1: #endif
    1: EOF
    1: 
    1: 	    $PERL -p -i -e "s/CURDIR/\$ENV{_curdir}/g;" conftest.C
    1: 
    1: 	    cat >> conftest1.C <<\EOF
    1: #include <stdio.h>
    1: void foo(void) {printf("foo in dll called\n");}
    1: EOF
    1: 	    ${CXX-g++} -fPIC -c -g conftest1.C
    1: 	    ${CXX-g++} -shared -Wl,-h -Wl,conftest1.so -o conftest1.so conftest1.o
    1: 	    ${CXX-g++} -g conftest.C -o conftest -ldl
    1: 	    cp -f conftest1.so conftest _conftest
    1: 	    cd _conftest
    1: 	    if test `./conftest | grep conftest1.so | wc -l` -gt 1
    1: 	    then
    1: 		echo
    1: 		echo "*** Your libc has a bug that can result in loading the same dynamic"
    1: 		echo "*** library multiple times.  This bug is known to be fixed in glibc-2.0.7-32"
    1: 		echo "*** or later.  However, if you choose not to upgrade, the only effect"
    1: 		echo "*** will be excessive memory usage at runtime."
    1: 		echo
    1: 	    fi
    1: 	    cd ${_curdir}
    1: 	    rm -rf conftest* _conftest
    1: 	    dnl ===================================================================
    1: 	    ;;
    1: esac
    1: 
    1: dnl ===================================================================
    1: dnl ========================================================
    1: dnl By default, turn rtti and exceptions off on g++/egcs
    1: dnl ========================================================
    1: if test "$GNU_CXX"; then
    1: 
    1:   AC_MSG_CHECKING(for C++ exceptions flag)
    1: 
    1:   dnl They changed -f[no-]handle-exceptions to -f[no-]exceptions in g++ 2.8
    1:   AC_CACHE_VAL(ac_cv_cxx_exceptions_flags,
    1:   [echo "int main() { return 0; }" | cat > conftest.C
    1: 
    1:   ${CXX-g++} ${CXXFLAGS} -c -fno-handle-exceptions conftest.C > conftest.out 2>&1
    1: 
    1:   if egrep "warning.*renamed" conftest.out >/dev/null; then
    1:     ac_cv_cxx_exceptions_flags=${_COMPILER_PREFIX}-fno-exceptions
    1:   else
    1:     ac_cv_cxx_exceptions_flags=${_COMPILER_PREFIX}-fno-handle-exceptions
    1:   fi
    1: 
    1:   rm -f conftest*])
    1: 
    1:   AC_MSG_RESULT($ac_cv_cxx_exceptions_flags)
    1:   _MOZ_EXCEPTIONS_FLAGS_OFF=$ac_cv_cxx_exceptions_flags
    1:   _MOZ_EXCEPTIONS_FLAGS_ON=`echo $ac_cv_cxx_exceptions_flags | sed 's|no-||'`
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Put your C++ language/feature checks below
    1: dnl ========================================================
    1: AC_LANG_CPLUSPLUS
    1: 
    1: HAVE_GCC3_ABI=
    1: if test "$GNU_CC"; then
    1:   AC_CACHE_CHECK(for gcc 3.0 ABI,
    1:       ac_cv_gcc_three_abi,
    1:       [AC_TRY_COMPILE([],
    1:                       [
    1: #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100 /* G++ V3 ABI */
    1:   return 0;
    1: #else
    1: #error Not gcc3.
    1: #endif
    1:                       ],
    1:                       ac_cv_gcc_three_abi="yes",
    1:                       ac_cv_gcc_three_abi="no")])
    1:   if test "$ac_cv_gcc_three_abi" = "yes"; then
    1:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-gcc3}"
    1:       HAVE_GCC3_ABI=1
    1:   else
    1:       TARGET_COMPILER_ABI="${TARGET_COMPILER_ABI-gcc2}"
    1:   fi
    1: fi
    1: AC_SUBST(HAVE_GCC3_ABI)
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ \"explicit\" keyword,
    1:                ac_cv_cpp_explicit,
    1:                [AC_TRY_COMPILE(class X {
    1:                                public: explicit X(int i) : i_(i) {}
    1:                                private: int i_;
    1:                                };,
    1:                                X x(3);,
    1:                                ac_cv_cpp_explicit=yes,
    1:                                ac_cv_cpp_explicit=no)])
    1: if test "$ac_cv_cpp_explicit" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_EXPLICIT)
    1: fi
    1: 
    1: AC_CACHE_CHECK(for C++ \"typename\" keyword,
    1:                ac_cv_cpp_typename,
    1:                [AC_TRY_COMPILE(class param {
    1:                                public:
    1:                                    typedef unsigned long num_type;
    1:                                };
    1: 
    1:                                template <class T> class tplt {
    1:                                public:
    1:                                    typedef typename T::num_type t_num_type;
    1:                                    t_num_type foo(typename T::num_type num) {
    1:                                        return num;
    1:                                    }
    1:                                };,
    1:                                tplt<param> A;
    1:                                A.foo(0);,
    1:                                ac_cv_cpp_typename=yes,
    1:                                ac_cv_cpp_typename=no)])
    1: if test "$ac_cv_cpp_typename" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_TYPENAME)
    1: fi
    1: 
    1: dnl Check for support of modern template specialization syntax
    1: dnl Test code and requirement from scc@netscape.com.
    1: dnl Autoconf cut-and-paste job by waterson@netscape.com
    1: AC_CACHE_CHECK(for modern C++ template specialization syntax support,
    1:                ac_cv_cpp_modern_specialize_template_syntax,
    1:                [AC_TRY_COMPILE(template <class T> struct X { int a; };
    1:                                class Y {};
    1:                                template <> struct X<Y> { double a; };,
    1:                                X<int> int_x;
    1:                                X<Y> y_x;,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=yes,
    1:                                ac_cv_cpp_modern_specialize_template_syntax=no)])
    1: if test "$ac_cv_cpp_modern_specialize_template_syntax" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX)
    1: fi
    1: 
    1: 
    1: dnl Some compilers support only full specialization, and some don't.
    1: AC_CACHE_CHECK(whether partial template specialization works,
    1:                ac_cv_cpp_partial_specialization,
    1:                [AC_TRY_COMPILE(template <class T> class Foo {};
    1:                                template <class T> class Foo<T*> {};,
    1:                                return 0;,
    1:                                ac_cv_cpp_partial_specialization=yes,
    1:                                ac_cv_cpp_partial_specialization=no)])
    1: if test "$ac_cv_cpp_partial_specialization" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_PARTIAL_SPECIALIZATION)
    1: fi
    1: 
    1: dnl Some compilers have limited support for operators with templates;
    1: dnl specifically, it is necessary to define derived operators when a base
    1: dnl class's operator declaration should suffice.
    1: AC_CACHE_CHECK(whether operators must be re-defined for templates derived from templates,
    1:                ac_cv_need_derived_template_operators,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T>
    1:                                 Base<T> operator+(const Base<T>& lhs, const Base<T>& rhs) { return lhs; }
    1:                                 template <class T> class Derived : public Base<T> { };],
    1:                                [Derived<char> a, b;
    1:                                 Base<char> c = a + b;
    1:                                 return 0;],
    1:                                ac_cv_need_derived_template_operators=no,
    1:                                ac_cv_need_derived_template_operators=yes)])
    1: if test "$ac_cv_need_derived_template_operators" = yes ; then
    1:   AC_DEFINE(NEED_CPP_DERIVED_TEMPLATE_OPERATORS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble detecting that a template class
    1: dnl that derives from another template is actually an instance
    1: dnl of the base class. This test checks for that.
    1: AC_CACHE_CHECK(whether we need to cast a derived template to pass as its base class,
    1:                ac_cv_need_cpp_template_cast_to_base,
    1:                [AC_TRY_COMPILE([template <class T> class Base { };
    1:                                 template <class T> class Derived : public Base<T> { };
    1:                                 template <class T> int foo(const Base<T>&) { return 0; }],
    1:                                [Derived<char> bar; return foo(bar);],
    1:                                ac_cv_need_cpp_template_cast_to_base=no,
    1:                                ac_cv_need_cpp_template_cast_to_base=yes)])
    1: if test "$ac_cv_need_cpp_template_cast_to_base" = yes ; then
    1:   AC_DEFINE(NEED_CPP_TEMPLATE_CAST_TO_BASE)
    1: fi
    1: 
    1: dnl Some compilers have trouble resolving the ambiguity between two
    1: dnl functions whose arguments differ only by cv-qualifications.
    1: AC_CACHE_CHECK(whether the compiler can resolve const ambiguities for templates,
    1:                ac_cv_can_resolve_const_ambiguity,
    1:                [AC_TRY_COMPILE([
    1:                                 template <class T> class ptrClass {
    1:                                   public: T* ptr;
    1:                                 };
    1: 
    1:                                 template <class T> T* a(ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1: 
    1:                                 template <class T>
    1:                                 const T* a(const ptrClass<T> *arg) {
    1:                                   return arg->ptr;
    1:                                 }
    1:                                ],
    1:                                [ ptrClass<int> i;
    1:                                  a(&i); ],
    1:                                ac_cv_can_resolve_const_ambiguity=yes,
    1:                                ac_cv_can_resolve_const_ambiguity=no)])
    1: if test "$ac_cv_can_resolve_const_ambiguity" = no ; then
    1:   AC_DEFINE(CANT_RESOLVE_CPP_CONST_AMBIGUITY)
    1: fi
    1: 
    1: dnl
    1: dnl We don't do exceptions on unix.  The only reason this used to be here
    1: dnl is that mozilla/xpcom/tests/TestCOMPtr.cpp has a test which uses 
    1: dnl exceptions.  But, we turn exceptions off by default and this test breaks.
    1: dnl So im commenting this out until someone writes some artificial 
    1: dnl intelligence to detect not only if the compiler has exceptions, but if 
    1: dnl they are enabled as well.
    1: dnl 
    1: dnl AC_CACHE_CHECK(for C++ \"exceptions\",
    1: dnl                ac_cv_cpp_exceptions,
    1: dnl                [AC_TRY_COMPILE(class X { public: X() {} };
    1: dnl                                static void F() { throw X(); },
    1: dnl                                try { F(); } catch(X & e) { },
    1: dnl                                ac_cv_cpp_exceptions=yes,
    1: dnl                                ac_cv_cpp_exceptions=no)])
    1: dnl if test $ac_cv_cpp_exceptions = yes ; then
    1: dnl    AC_DEFINE(HAVE_CPP_EXCEPTIONS)
    1: dnl fi
    1: 
    1: dnl Some compilers have marginal |using| support; for example, gcc-2.7.2.3
    1: dnl supports it well enough to allow us to use it to change access, but not
    1: dnl to resolve ambiguity. The next two tests determine how well the |using|
    1: dnl keyword is supported.
    1: dnl
    1: dnl Check to see if we can change access with |using|.  Test both a
    1: dnl legal and an illegal example.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword can change access,
    1:                ac_cv_cpp_access_changing_using2,
    1:                [AC_TRY_COMPILE(
    1:                    class A { protected: int foo() { return 0; } };
    1:                    class B : public A { public: using A::foo; };,
    1:                    B b; return b.foo();,
    1:                    [AC_TRY_COMPILE(
    1:                        class A { public: int foo() { return 1; } };
    1:                        class B : public A { private: using A::foo; };,
    1:                        B b; return b.foo();,
    1:                        ac_cv_cpp_access_changing_using2=no,
    1:                        ac_cv_cpp_access_changing_using2=yes)],
    1:                    ac_cv_cpp_access_changing_using2=no)])
    1: if test "$ac_cv_cpp_access_changing_using2" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_ACCESS_CHANGING_USING)
    1: fi
    1: 
    1: dnl Check to see if we can resolve ambiguity with |using|.
    1: AC_CACHE_CHECK(whether the C++ \"using\" keyword resolves ambiguity,
    1:                ac_cv_cpp_ambiguity_resolving_using,
    1:                [AC_TRY_COMPILE(class X { 
    1:                                  public: int go(const X&) {return 3;}
    1:                                          int jo(const X&) {return 3;}
    1:                                };
    1:                                class Y : public X {
    1:                                  public:  int go(int) {return 2;}
    1:                                           int jo(int) {return 2;}
    1:                                           using X::jo;
    1:                                  private: using X::go;
    1:                                };,
    1:                                X x; Y y; y.jo(x);,
    1:                                ac_cv_cpp_ambiguity_resolving_using=yes,
    1:                                ac_cv_cpp_ambiguity_resolving_using=no)])
    1: if test "$ac_cv_cpp_ambiguity_resolving_using" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_AMBIGUITY_RESOLVING_USING)
    1: fi
    1: 
    1: dnl Check to see if the |std| namespace is supported. If so, we'll want
    1: dnl to qualify any standard library calls with "std::" to ensure that
    1: dnl those functions can be resolved.
    1: AC_CACHE_CHECK(for \"std::\" namespace,
    1:                ac_cv_cpp_namespace_std,
    1:                [AC_TRY_COMPILE([#include <algorithm>],
    1:                                [return std::min(0, 1);],
    1:                                ac_cv_cpp_namespace_std=yes,
    1:                                ac_cv_cpp_namespace_std=no)])
    1: if test "$ac_cv_cpp_namespace_std" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NAMESPACE_STD)
    1: fi
    1: 
    1: dnl Older compilers are overly ambitious with respect to using the standard
    1: dnl template library's |operator!=()| when |operator==()| is defined. In
    1: dnl which case, defining |operator!=()| in addition to |operator==()| causes
    1: dnl ambiguity at compile-time. This test checks for that case.
    1: AC_CACHE_CHECK(whether standard template operator!=() is ambiguous,
    1:                ac_cv_cpp_unambiguous_std_notequal,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 struct T1 {};
    1:                                 int operator==(const T1&, const T1&) { return 0; }
    1:                                 int operator!=(const T1&, const T1&) { return 0; }],
    1:                                [T1 a,b; return a != b;],
    1:                                ac_cv_cpp_unambiguous_std_notequal=unambiguous,
    1:                                ac_cv_cpp_unambiguous_std_notequal=ambiguous)])
    1: if test "$ac_cv_cpp_unambiguous_std_notequal" = unambiguous ; then
    1:   AC_DEFINE(HAVE_CPP_UNAMBIGUOUS_STD_NOTEQUAL)
    1: fi
    1: 
    1: 
    1: AC_CACHE_CHECK(for C++ reinterpret_cast,
    1:                ac_cv_cpp_reinterpret_cast,
    1:                [AC_TRY_COMPILE(struct X { int i; };
    1:                                struct Y { int i; };,
    1:                                X x; X*const z = &x;Y*y = reinterpret_cast<Y*>(z);,
    1:                                ac_cv_cpp_reinterpret_cast=yes,
    1:                                ac_cv_cpp_reinterpret_cast=no)])
    1: if test "$ac_cv_cpp_reinterpret_cast" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_NEW_CASTS)
    1: fi
    1: 
    1: dnl See if a dynamic_cast to void* gives the most derived object.
    1: AC_CACHE_CHECK(for C++ dynamic_cast to void*,
    1:                ac_cv_cpp_dynamic_cast_void_ptr,
    1:                [AC_TRY_RUN([class X { int i; public: virtual ~X() { } };
    1:                             class Y { int j; public: virtual ~Y() { } };
    1:                             class Z : public X, public Y { int k; };
    1: 
    1:                             int main() {
    1:                                  Z mdo;
    1:                                  X *subx = (X*)&mdo;
    1:                                  Y *suby = (Y*)&mdo;
    1:                                  return !((((void*)&mdo != (void*)subx) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(subx))) ||
    1:                                           (((void*)&mdo != (void*)suby) &&
    1:                                            ((void*)&mdo == dynamic_cast<void*>(suby))));
    1:                             }],
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=yes,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no,
    1:                            ac_cv_cpp_dynamic_cast_void_ptr=no)])
    1: if test "$ac_cv_cpp_dynamic_cast_void_ptr" = yes ; then
    1:    AC_DEFINE(HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR)
    1: fi
    1: 
    1: 
    1: dnl note that this one is reversed - if the test fails, then
    1: dnl we require implementations of unused virtual methods. Which
    1: dnl really blows because it means we'll have useless vtable
    1: dnl bloat.
    1: AC_CACHE_CHECK(whether C++ requires implementation of unused virtual methods,
    1:                ac_cv_cpp_unused_required,
    1:                [AC_TRY_LINK(class X {private: virtual void never_called();};,
    1:                                X x;,
    1:                                ac_cv_cpp_unused_required=no,
    1:                                ac_cv_cpp_unused_required=yes)])
    1: if test "$ac_cv_cpp_unused_required" = yes ; then
    1:    AC_DEFINE(NEED_CPP_UNUSED_IMPLEMENTATIONS)
    1: fi
    1: 
    1: 
    1: dnl Some compilers have trouble comparing a constant reference to a templatized
    1: dnl class to zero, and require an explicit operator==() to be defined that takes
    1: dnl an int. This test separates the strong from the weak.
    1: 
    1: AC_CACHE_CHECK(for trouble comparing to zero near std::operator!=(),
    1:                ac_cv_trouble_comparing_to_zero,
    1:                [AC_TRY_COMPILE([#include <algorithm>
    1:                                 template <class T> class Foo {};
    1:                                 class T2;
    1:                                 template <class T> int operator==(const T2*, const T&) { return 0; }
    1:                                 template <class T> int operator!=(const T2*, const T&) { return 0; }],
    1:                                [Foo<int> f; return (0 != f);],
    1:                                ac_cv_trouble_comparing_to_zero=no,
    1:                                ac_cv_trouble_comparing_to_zero=yes)])
    1: if test "$ac_cv_trouble_comparing_to_zero" = yes ; then
    1:   AC_DEFINE(HAVE_CPP_TROUBLE_COMPARING_TO_ZERO)
    1: fi
    1: 
    1: 
    1: 
    1: dnl End of C++ language/feature checks
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =  Internationalization checks
    1: dnl ========================================================
    1: dnl
    1: dnl Internationalization and Locale support is different
    1: dnl on various UNIX platforms.  Checks for specific i18n
    1: dnl features go here.
    1: 
    1: dnl check for LC_MESSAGES
    1: AC_CACHE_CHECK(for LC_MESSAGES,
    1: 		ac_cv_i18n_lc_messages,
    1: 		[AC_TRY_COMPILE([#include <locale.h>],
    1: 				[int category = LC_MESSAGES;],
    1: 				ac_cv_i18n_lc_messages=yes,
    1: 				ac_cv_i18n_lc_messages=no)])
    1: if test "$ac_cv_i18n_lc_messages" = yes; then
    1:    AC_DEFINE(HAVE_I18N_LC_MESSAGES)
    1: fi 	
    1: 
    1: fi # SKIP_COMPILER_CHECKS
    1: 
    1: TARGET_XPCOM_ABI=
    1: if test -n "${CPU_ARCH}" -a -n "${TARGET_COMPILER_ABI}"; then
    1:     TARGET_XPCOM_ABI="${CPU_ARCH}-${TARGET_COMPILER_ABI}"
    1: fi
    1: 
    1: dnl Mozilla specific options
    1: dnl ========================================================
    1: dnl The macros used for command line options
    1: dnl are defined in build/autoconf/altoptions.m4.
    1: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Check for external package dependencies
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(External Packages)
    1: 
    1: MOZ_ENABLE_LIBXUL=
    1: 
    1: MOZ_ARG_WITH_STRING(libxul-sdk,
    1: [  --with-libxul-sdk=PFX   Use the libXUL SDK at <PFX>],
    1:   LIBXUL_SDK_DIR=$withval)
    1: 
    1: if test "$LIBXUL_SDK_DIR" = "yes"; then
    1:     AC_MSG_ERROR([--with-libxul-sdk must specify a path])
    1: elif test -n "$LIBXUL_SDK_DIR" -a "$LIBXUL_SDK_DIR" != "no"; then
    1:     LIBXUL_SDK=`cd "$LIBXUL_SDK_DIR" && pwd`
    1: 
    1:     if test ! -f "$LIBXUL_SDK/sdk/include/xpcom-config.h"; then
    1:         AC_MSG_ERROR([$LIBXUL_SDK/sdk/include/xpcom-config.h doesn't exist])
    1:     fi
    1: 
    1:     MOZ_ENABLE_LIBXUL=1
    1: fi
    1: AC_SUBST(LIBXUL_SDK)
    1: 
18864: if test -n "$LIBXUL_SDK"; then
18864:     LIBXUL_DIST="$LIBXUL_SDK"
18864: else
18864:     LIBXUL_DIST="$MOZ_BUILD_ROOT/dist"
18864: fi
18864: AC_SUBST(LIBXUL_DIST)
18864: 
24320: SYSTEM_LIBXUL=
24320: 
24320: MOZ_ARG_WITH_BOOL(system-libxul,
24320: [  --with-system-libxul   Use system installed libxul SDK],
24320:     SYSTEM_LIBXUL=1)
24320: 
24320: if test -n "$SYSTEM_LIBXUL" && test -z "$MOZ_ENABLE_LIBXUL"; then
24320:     AC_MSG_ERROR([--with-system-libxul needs --with-libxul-sdk])
24320: fi
24320: 
    1: dnl ========================================================
    1: dnl = If NSPR was not detected in the system, 
    1: dnl = use the one in the source tree (mozilla/nsprpub)
    1: dnl ========================================================
    1: MOZ_ARG_WITH_BOOL(system-nspr,
    1: [  --with-system-nspr      Use system installed NSPR],
    1:     _USE_SYSTEM_NSPR=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSPR"; then
 8421:     AM_PATH_NSPR(4.7.0, [MOZ_NATIVE_NSPR=1], [MOZ_NATIVE_NSPR=])
    1: fi
    1: 
 2496: if test -n "$MOZ_NATIVE_NSPR"; then
 2496:     _SAVE_CFLAGS=$CFLAGS
 2496:     CFLAGS="$CFLAGS $NSPR_CFLAGS"
 2496:     AC_TRY_COMPILE([#include "prlog.h"],
 2496:                 [#ifndef PR_STATIC_ASSERT
 2496:                  #error PR_STATIC_ASSERT not defined
 2496:                  #endif],
 2496:                 [MOZ_NATIVE_NSPR=1],
 2496:                 AC_MSG_ERROR([system NSPR does not support PR_STATIC_ASSERT]))
 2496:     CFLAGS=$_SAVE_CFLAGS
 2496: else
18865:     NSPR_CFLAGS='`$(DEPTH)/nsprpub/config/nspr-config --prefix='${LIBXUL_DIST}' --includedir='${LIBXUL_DIST}'/include/nspr --cflags`'
20288:     if test "$OS_ARCH" = "WINCE"; then
18865:         NSPR_CFLAGS="-I${LIBXUL_DIST}/include/nspr"
18865:         NSPR_LIBS="${LIBXUL_DIST}/lib/nspr${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plc${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plds${NSPR_VERSION}.lib "
    1:     elif test "$OS_ARCH" = "WINNT"; then
18865:         NSPR_CFLAGS="-I${LIBXUL_DIST}/include/nspr"
    1:         if test -n "$GNU_CC"; then
18865:             NSPR_LIBS="-L${LIBXUL_DIST}/lib -lnspr${NSPR_VERSION} -lplc${NSPR_VERSION} -lplds${NSPR_VERSION}"
18865:         else
18865:             NSPR_LIBS="${LIBXUL_DIST}/lib/nspr${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plc${NSPR_VERSION}.lib ${LIBXUL_DIST}/lib/plds${NSPR_VERSION}.lib "
18865:         fi
18865:     else
18865:         NSPR_LIBS='`$(DEPTH)/nsprpub/config/nspr-config --prefix='${LIBXUL_DIST}' --libdir='${LIBXUL_DIST}'/lib --libs`'
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = If NSS was not detected in the system, 
    1: dnl = use the one in the source tree (mozilla/security/nss)
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_WITH_BOOL(system-nss,
    1: [  --with-system-nss      Use system installed NSS],
    1:     _USE_SYSTEM_NSS=1 )
    1: 
    1: if test -n "$_USE_SYSTEM_NSS"; then
 8421:     AM_PATH_NSS(3.12.0, [MOZ_NATIVE_NSS=1], [MOZ_NATIVE_NSS=])
    1: fi
    1: 
    1: if test -n "$MOZ_NATIVE_NSS"; then
    1:    NSS_LIBS="$NSS_LIBS -lcrmf"
    1: else
 4233:    NSS_CFLAGS='-I$(LIBXUL_DIST)/include/nss'
12926:    NSS_DEP_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)smime$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)ssl$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nss$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)nssutil$NSS_VERSION\$(DLL_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(DLL_PREFIX)softokn$NSS_VERSION\$(DLL_SUFFIX)"
    1: 
    1:    if test -z "$GNU_CC" && test "$OS_ARCH" = "WINNT" -o "$OS_ARCH" = "WINCE" -o "$OS_ARCH" = "OS2"; then
12926:        NSS_LIBS="\
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)crmf.\$(LIB_SUFFIX) \
12939:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)smime$NSS_VERSION.\$(IMPORT_LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)ssl$NSS_VERSION.\$(IMPORT_LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nss$NSS_VERSION.\$(IMPORT_LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)nssutil$NSS_VERSION.\$(IMPORT_LIB_SUFFIX) \
12926:         \$(LIBXUL_DIST)/lib/\$(LIB_PREFIX)softokn$NSS_VERSION.\$(IMPORT_LIB_SUFFIX)"
    1:    else
10391:        NSS_LIBS='$(LIBS_DIR)'" -lcrmf -lsmime$NSS_VERSION -lssl$NSS_VERSION -lnss$NSS_VERSION -lnssutil$NSS_VERSION -lsoftokn$NSS_VERSION"
    1:    fi
    1: fi
    1: 
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1: dnl system JPEG support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-jpeg,
    1: [  --with-system-jpeg[=PFX]
    1:                           Use system libjpeg [installed at prefix PFX]],
    1:     JPEG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${JPEG_DIR}" -a "${JPEG_DIR}" != "yes"; then
    1:     CFLAGS="-I${JPEG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${JPEG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$JPEG_DIR" -o "$JPEG_DIR" = no; then
    1:     SYSTEM_JPEG=
    1: else
    1:     AC_CHECK_LIB(jpeg, jpeg_destroy_compress, [SYSTEM_JPEG=1 JPEG_LIBS="-ljpeg $JPEG_LIBS"], SYSTEM_JPEG=, $JPEG_LIBS)
    1: fi
    1: 
    1: if test "$SYSTEM_JPEG" = 1; then
    1:     LIBS="$JPEG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <jpeglib.h> ],
   25:                    [ #if JPEG_LIB_VERSION < $MOZJPEG
   25:                      #error "Insufficient JPEG library version ($MOZJPEG required)."
   25:                      #endif ],
   25:                    SYSTEM_JPEG=1,
   25:                    [SYSTEM_JPEG= JPEG_CFLAGS= JPEG_LIBS=]) 
    1: fi 
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test -n "${JPEG_DIR}" -a -d "${JPEG_DIR}" -a "$SYSTEM_JPEG" = 1; then
    1:     JPEG_CFLAGS="-I${JPEG_DIR}/include"
    1:     JPEG_LIBS="-L${JPEG_DIR}/lib ${JPEG_LIBS}"
    1: fi
    1: 
    1: dnl system ZLIB support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-zlib,
    1: [  --with-system-zlib[=PFX]
    1:                           Use system libz [installed at prefix PFX]],
    1:     ZLIB_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: if test -n "${ZLIB_DIR}" -a "${ZLIB_DIR}" != "yes"; then
    1:     CFLAGS="-I${ZLIB_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${ZLIB_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$ZLIB_DIR" -o "$ZLIB_DIR" = no; then
    1:     SYSTEM_ZLIB=
    1: else
    1:     AC_CHECK_LIB(z, gzread, [SYSTEM_ZLIB=1 ZLIB_LIBS="-lz $ZLIB_LIBS"], 
    1: 	[SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=], $ZLIB_LIBS)
    1: fi
    1: if test "$SYSTEM_ZLIB" = 1; then
    1:     LIBS="$ZLIB_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <string.h>
   25:                      #include <zlib.h> ],
   25:                    [ #if ZLIB_VERNUM < $MOZZLIB 
   25:                      #error "Insufficient zlib version ($MOZZLIB required)."
   25:                      #endif ],
   25:                    SYSTEM_ZLIB=1,
   25:                    [SYSTEM_ZLIB= ZLIB_CFLAGS= ZLIB_LIBS=]) 
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${ZLIB_DIR}" -a -d "${ZLIB_DIR}" -a "$SYSTEM_ZLIB" = 1; then
    1:     ZLIB_CFLAGS="-I${ZLIB_DIR}/include"
    1:     ZLIB_LIBS="-L${ZLIB_DIR}/lib ${ZLIB_LIBS}"
    1: fi
    1: 
12936: dnl system BZIP2 Support
12936: dnl ========================================================
12936: MOZ_ARG_WITH_STRING(system-bz2,
12936: [  --with-system-bz2[=PFX]
12936:                           Use system libbz2 [installed at prefix PFX]],
12936:     BZ2_DIR=$withval)
12936: 
12936: _SAVE_CFLAGS=$CFLAGS
12936: _SAVE_LDFLAGS=$LDFLAGS
12936: _SAVE_LIBS=$LIBS
12936: if test -n "${BZ2_DIR}" -a "${BZ2_DIR}" != "yes"; then
12936:     CFLAGS="-I${BZ2_DIR}/include $CFLAGS"
12936:     LDFLAGS="-L${BZ2_DIR}/lib $LDFLAGS"
12936: fi
12936: if test -z "$BZ2_DIR" -o "$BZ2_DIR" = no; then
12936:     SYSTEM_BZ2=
12936: else
12936:     AC_CHECK_LIB(bz2, BZ2_bzread, [SYSTEM_BZ2=1 BZ2_LIBS="-lbz2"],
12936: 	[SYSTEM_BZ2= BZ2_CFLAGS= BZ2_LIBS=], $BZ2_LIBS)
12936: fi
12936: CFLAGS=$_SAVE_CFLAGS
12936: LDFLAGS=$_SAVE_LDFLAGS
12936: LIBS=$_SAVE_LIBS
12936: 
12936: if test "${BZ2_DIR}" -a -d "${BZ2_DIR}" -a "$SYSTEM_BZ2" = 1; then
12936:     BZ2_CFLAGS="-I${BZ2_DIR}/include"
12936:     BZ2_LIBS="-L${BZ2_DIR}/lib ${MOZ_BZ2_LIBS}"
12936: fi
12936: 
    1: dnl system PNG Support
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(system-png, 
    1: [  --with-system-png[=PFX]
    1:                           Use system libpng [installed at prefix PFX]],
    1:     PNG_DIR=$withval)
    1: 
    1: _SAVE_CFLAGS=$CFLAGS
    1: _SAVE_LDFLAGS=$LDFLAGS
    1: _SAVE_LIBS=$LIBS
    1: CFLAGS="$ZLIB_CFLAGS $CFLAGS"
    1: LDFLAGS="$ZLIB_LIBS -lz $LDFLAGS"
    1: if test -n "${PNG_DIR}" -a "${PNG_DIR}" != "yes"; then
    1:     CFLAGS="-I${PNG_DIR}/include $CFLAGS"
    1:     LDFLAGS="-L${PNG_DIR}/lib $LDFLAGS"
    1: fi
    1: if test -z "$PNG_DIR" -o "$PNG_DIR" = no; then
    1:     SYSTEM_PNG=
    1: else
    1:     _SAVE_PNG_LIBS=$PNG_LIBS
    1:     AC_CHECK_LIB(png, png_get_valid, [SYSTEM_PNG=1 PNG_LIBS="-lpng $PNG_LIBS"],
 2532:                  AC_MSG_ERROR([--with-system-png requested but no working libpng found]), 
 2532:                  $PNG_LIBS)
  663:     AC_CHECK_LIB(png, png_get_acTL, ,
 2532:                  AC_MSG_ERROR([--with-system-png won't work because the system's libpng doesn't have APNG support]),
 2532:                  $_SAVE_PNG_LIBS)
    1: fi
    1: if test "$SYSTEM_PNG" = 1; then
    1:     LIBS="$PNG_LIBS $LIBS"
   25:     AC_TRY_COMPILE([ #include <stdio.h>
    1:                      #include <sys/types.h>
   25:                      #include <png.h> ],
   25:                    [ #if PNG_LIBPNG_VER < $MOZPNG
   25:                      #error "Insufficient libpng version ($MOZPNG required)."
    1:                      #endif
   25:                      #ifndef PNG_UINT_31_MAX
   25:                      #error "Insufficient libpng version."
   25:                      #endif ],
   25:                    SYSTEM_PNG=1,
 2532:                    AC_MSG_ERROR([--with-system-png requested but no working libpng found]))
    1: fi
    1: CFLAGS=$_SAVE_CFLAGS
    1: LDFLAGS=$_SAVE_LDFLAGS
    1: LIBS=$_SAVE_LIBS
    1: 
    1: if test "${PNG_DIR}" -a -d "${PNG_DIR}" -a "$SYSTEM_PNG" = 1; then
    1:     PNG_CFLAGS="-I${PNG_DIR}/include"
    1:     PNG_LIBS="-L${PNG_DIR}/lib ${PNG_LIBS}"
    1: fi
    1: 
    1: fi # SKIP_LIBRARY_CHECKS
    1: 
11718: dnl system HunSpell Support
11718: dnl ========================================================
11718: MOZ_ARG_ENABLE_BOOL(system-hunspell,
11718: [  --enable-system-hunspell  Use system hunspell (located with pkgconfig)],
11718:     SYSTEM_HUNSPELL=1 )
11718: 
11718: if test -n "$SYSTEM_HUNSPELL"; then
11718:     PKG_CHECK_MODULES(MOZ_HUNSPELL, hunspell)
11718: fi
11718: 
11718: AC_SUBST(SYSTEM_HUNSPELL)
11718: 
    1: dnl ========================================================
    1: dnl Java SDK support
    1: dnl ========================================================
    1: JAVA_INCLUDE_PATH=
    1: MOZ_ARG_WITH_STRING(java-include-path,
    1: [  --with-java-include-path=dir   Location of Java SDK headers],
    1:     JAVA_INCLUDE_PATH=$withval)
    1: 
    1: JAVA_BIN_PATH=
    1: MOZ_ARG_WITH_STRING(java-bin-path,
    1: [  --with-java-bin-path=dir   Location of Java binaries (java, javac, jar)],
    1:     JAVA_BIN_PATH=$withval)
    1: 
    1: dnl ========================================================
15258: dnl Use ARM userspace kernel helpers; tell NSPR to enable
15258: dnl their usage and use them in spidermonkey.
15258: dnl ========================================================
15258: MOZ_ARG_WITH_BOOL(arm-kuser,
15258: [  --with-arm-kuser         Use kuser helpers (Linux/ARM only -- requires kernel 2.6.13 or later)],
15258:     USE_ARM_KUSER=1,
15258:     USE_ARM_KUSER=)
15258: if test -n "$USE_ARM_KUSER"; then
15258:    AC_DEFINE(USE_ARM_KUSER)
15258: fi
15258: 
15258: dnl ========================================================
    1: dnl =
    1: dnl = Application
    1: dnl =
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_HEADER(Application)
    1: 
    1: BUILD_STATIC_LIBS=
    1: ENABLE_TESTS=1
    1: MOZ_ACTIVEX_SCRIPTING_SUPPORT=
    1: MOZ_BRANDING_DIRECTORY=
    1: MOZ_DBGRINFO_MODULES=
    1: MOZ_ENABLE_CANVAS=1
    1: MOZ_FEEDS=1
    1: MOZ_IMG_DECODERS_DEFAULT="png gif jpeg bmp xbm icon"
    1: MOZ_IMG_ENCODERS_DEFAULT="png jpeg"
    1: MOZ_JAVAXPCOM=
    1: MOZ_JSDEBUGGER=1
    1: MOZ_JSLOADER=1
    1: MOZ_MATHML=1
    1: MOZ_MORK=1
    1: MOZ_MORKREADER=
    1: MOZ_AUTH_EXTENSION=1
    1: MOZ_NO_ACTIVEX_SUPPORT=1
    1: MOZ_NO_INSPECTOR_APIS=
    1: MOZ_NO_XPCOM_OBSOLETE=
    1: MOZ_NO_FAST_LOAD=
16302: MOZ_OGG=1
21394: MOZ_SYDNEYAUDIO=
21394: MOZ_WAVE=1
15751: MOZ_MEDIA=
    1: MOZ_PERMISSIONS=1
    1: MOZ_PLACES=
    1: MOZ_PLAINTEXT_EDITOR_ONLY=
    1: MOZ_PLUGINS=1
    1: MOZ_PREF_EXTENSIONS=1
    1: MOZ_PROFILELOCKING=1
    1: MOZ_PSM=1
    1: MOZ_PYTHON_EXTENSIONS="xpcom dom"
    1: MOZ_PYTHON=
    1: MOZ_PYTHON_DEBUG_SUFFIX=
    1: MOZ_PYTHON_DLL_SUFFIX=
    1: MOZ_PYTHON_INCLUDES=
    1: MOZ_PYTHON_LIBS=
    1: MOZ_PYTHON_PREFIX=
    1: MOZ_PYTHON_VER=
    1: MOZ_PYTHON_VER_DOTTED=
    1: MOZ_RDF=1
    1: MOZ_REFLOW_PERF=
    1: MOZ_SAFE_BROWSING=
13679: MOZ_HELP_VIEWER=
    1: MOZ_SPELLCHECK=1
    1: MOZ_STATIC_MAIL_BUILD=
    1: MOZ_STORAGE=1
    1: MOZ_SVG=1
    1: MOZ_TIMELINE=
    1: MOZ_UI_LOCALE=en-US
    1: MOZ_UNIVERSALCHARDET=1
    1: MOZ_URL_CLASSIFIER=
    1: MOZ_USE_NATIVE_UCONV=
    1: MOZ_VIEW_SOURCE=1
    1: MOZ_XPFE_COMPONENTS=1
    1: MOZ_XPINSTALL=1
    1: MOZ_XSLT_STANDALONE=
    1: MOZ_XTF=1
    1: MOZ_XUL=1
 5938: MOZ_ZIPWRITER=1
    1: NS_PRINTING=1
26270: NECKO_WIFI=1
    1: NECKO_COOKIES=1
    1: NECKO_DISK_CACHE=1
    1: NECKO_PROTOCOLS_DEFAULT="about data file ftp gopher http res viewsource"
    1: NECKO_SMALL_BUFFERS=
    1: XPC_IDISPATCH_SUPPORT=
    1: 
    1: 
    1: case "$target_os" in
    1: darwin*)
    1:     ACCESSIBILITY=
    1:     ;;
    1: *)
    1:     ACCESSIBILITY=1
    1:     ;;
    1: esac
    1: 
    1: case "$target_os" in
    1:     msvc*|mks*|cygwin*|mingw*)
    1:         if test -z "$GNU_CC"; then 
    1:             XPC_IDISPATCH_SUPPORT=1
    1:             MOZ_NO_ACTIVEX_SUPPORT=
    1:             MOZ_ACTIVEX_SCRIPTING_SUPPORT=1
    1:         fi
    1:         ;;
    1: esac
    1: 
    1: MOZ_ARG_ENABLE_STRING(application,
    1: [  --enable-application=APP
    1:                           Options include:
    1:                             browser (Firefox)
    1:                             xulrunner
    1:                             content/xslt (Standalone Transformiix XSLT)
    1:                             netwerk (Standalone Necko)
    1:                             tools/update-packaging (AUS-related packaging tools)
    1:                             standalone (use this for standalone
    1:                               xpcom/xpconnect or to manually drive a build)],
    1: [ MOZ_BUILD_APP=$enableval ] )
    1: 
    1: MOZ_EMBEDDING_PROFILE=default
    1: MOZ_ARG_WITH_STRING(embedding-profile,
    1: [  --with-embedding-profile=default|basic|minimal
    1:                        see http://wiki.mozilla.org/Gecko:Small_Device_Support],
    1: [ MOZ_EMBEDDING_PROFILE=$withval ])
    1: 
    1: case "$MOZ_EMBEDDING_PROFILE" in
    1: default)
    1:   MOZ_EMBEDDING_LEVEL_DEFAULT=1
    1:   MOZ_EMBEDDING_LEVEL_BASIC=1
    1:   MOZ_EMBEDDING_LEVEL_MINIMAL=1
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_DEFAULT)
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_BASIC)
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_MINIMAL)
    1:   ;;
    1: 
    1: basic)
    1:   MOZ_EMBEDDING_LEVEL_DEFAULT=
    1:   MOZ_EMBEDDING_LEVEL_BASIC=1
    1:   MOZ_EMBEDDING_LEVEL_MINIMAL=1
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_BASIC)
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_MINIMAL)
    1:   ENABLE_TESTS=
    1:   MOZ_ACTIVEX_SCRIPTING_SUPPORT=
    1:   MOZ_ENABLE_CANVAS=
    1:   MOZ_ENABLE_POSTSCRIPT=
    1:   MOZ_EXTENSIONS_DEFAULT=" spatialnavigation"
    1:   MOZ_IMG_DECODERS_DEFAULT="png gif jpeg"
    1:   MOZ_IMG_ENCODERS_DEFAULT=
    1:   MOZ_IMG_ENCODERS=
    1:   MOZ_INSTALLER=
    1:   MOZ_JSDEBUGGER=
    1:   MOZ_MATHML=
    1:   MOZ_AUTH_EXTENSION=
    1:   MOZ_NO_ACTIVEX_SUPPORT=1
    1:   MOZ_NO_INSPECTOR_APIS=1
    1:   MOZ_NO_XPCOM_OBSOLETE=1
    1:   MOZ_NO_FAST_LOAD=1
    1:   MOZ_PLAINTEXT_EDITOR_ONLY=1
    1: #  MOZ_PLUGINS=
    1:   MOZ_PREF_EXTENSIONS=
    1:   MOZ_PROFILELOCKING=
    1:   MOZ_SPELLCHECK=
    1:   MOZ_SVG=
    1:   MOZ_UNIVERSALCHARDET=
    1:   MOZ_UPDATER=
11967:   MOZ_USE_NATIVE_UCONV=
    1:   MOZ_VIEW_SOURCE=
    1:   MOZ_XPFE_COMPONENTS=
    1:   MOZ_XPINSTALL=
    1:   MOZ_XTF=
 5928:   MOZ_ZIPWRITER=
    1:   NECKO_DISK_CACHE=
    1:   NECKO_PROTOCOLS_DEFAULT="about data http file res"
    1:   NECKO_SMALL_BUFFERS=1
    1:   NS_DISABLE_LOGGING=1
    1:   NS_PRINTING=
    1:   ;;
    1: 
    1: minimal)
    1:   MOZ_EMBEDDING_LEVEL_DEFAULT=
    1:   MOZ_EMBEDDING_LEVEL_BASIC=
    1:   MOZ_EMBEDDING_LEVEL_MINIMAL=1
    1:   AC_DEFINE(MOZ_EMBEDDING_LEVEL_MINIMAL)
    1:   ENABLE_TESTS=
    1:   MOZ_ACTIVEX_SCRIPTING_SUPPORT=
    1:   MOZ_ENABLE_CANVAS=
    1:   MOZ_ENABLE_POSTSCRIPT=
    1:   MOZ_EXTENSIONS_DEFAULT=" spatialnavigation"
    1:   MOZ_IMG_DECODERS_DEFAULT="png gif jpeg"
    1:   MOZ_IMG_ENCODERS_DEFAULT=
    1:   MOZ_IMG_ENCODERS=
    1:   MOZ_INSTALLER=
    1:   MOZ_JSDEBUGGER=
    1:   MOZ_MATHML=
    1:   MOZ_AUTH_EXTENSION=
    1:   MOZ_NO_ACTIVEX_SUPPORT=1
    1:   MOZ_NO_INSPECTOR_APIS=1
    1:   MOZ_NO_XPCOM_OBSOLETE=1
    1:   MOZ_NO_FAST_LOAD=1
    1:   MOZ_PLAINTEXT_EDITOR_ONLY=1
    1:   MOZ_PLUGINS=
    1:   MOZ_PREF_EXTENSIONS=
    1:   MOZ_PROFILELOCKING=
    1:   MOZ_SPELLCHECK=
 5549:   MOZ_STORAGE=1
 5549:   MOZ_PLACES=
    1:   MOZ_SVG=
    1:   MOZ_UNIVERSALCHARDET=
    1:   MOZ_UPDATER=
    1:   MOZ_USE_NATIVE_UCONV=1
    1:   MOZ_VIEW_SOURCE=
    1:   MOZ_XPFE_COMPONENTS=
    1:   MOZ_XPINSTALL=
    1:   MOZ_XTF=
    1:   MOZ_XUL=
 5928:   MOZ_ZIPWRITER=
    1:   MOZ_RDF=
    1:   NECKO_DISK_CACHE=
    1:   NECKO_PROTOCOLS_DEFAULT="about data http file res"
    1:   NECKO_SMALL_BUFFERS=1
    1:   NS_DISABLE_LOGGING=1
    1:   NS_PRINTING=
    1:   ;;
    1: 
    1: *)
    1:   AC_MSG_ERROR([Unrecognized value: --with-embedding-profile=$MOZ_EMBEDDING_PROFILE])
    1:   ;;
    1: esac
    1: 
    1: AC_SUBST(MOZ_EMBEDDING_LEVEL_DEFAULT)
    1: AC_SUBST(MOZ_EMBEDDING_LEVEL_BASIC)
    1: AC_SUBST(MOZ_EMBEDDING_LEVEL_MINIMAL)
    1: 
 6837: MOZ_ARG_WITH_STRING(xulrunner-stub-name,
 6837: [  --with-xulrunner-stub-name=appname   Create the xulrunner stub with the given name],
 6837:   XULRUNNER_STUB_NAME=$withval)
 6837: 
 6837: if test -z "$XULRUNNER_STUB_NAME"; then
 6837:   case "$target_os" in
 6837:   darwin*)
 6837:     XULRUNNER_STUB_NAME=xulrunner
 6837:     ;;
 6837:   *)
 6837:     XULRUNNER_STUB_NAME=xulrunner-stub
 6837:   esac
 6837: fi
 6837: AC_SUBST(XULRUNNER_STUB_NAME)
 6837: 
 1796: if test -z "$MOZ_BUILD_APP"; then
 1796:   AC_MSG_ERROR([--enable-application=APP was not specified and is required.])
 1796: else
 1796:   # We have a valid application only if it has a build.mk file in its top
 1796:   # directory.
 1796:   if test ! -f "${srcdir}/${MOZ_BUILD_APP}/build.mk" ; then
 1796:     AC_MSG_ERROR([--enable-application value not recognized (${MOZ_BUILD_APP}/build.mk does not exist).])
 1796:   fi
 1796: fi
 1796: 
 1796: # Allow the application to influence configure with a confvars.sh script.
 1796: 
 1796: AC_MSG_CHECKING([if app-specific confvars.sh exists])
 1796: if test -f "${srcdir}/${MOZ_BUILD_APP}/confvars.sh" ; then
 1796:   AC_MSG_RESULT([${srcdir}/${MOZ_BUILD_APP}/confvars.sh])
 1832:   . "${srcdir}/${MOZ_BUILD_APP}/confvars.sh"
 1796: else
 1796:   AC_MSG_RESULT([no])
 1796: fi
 1796: 
 1796: # Now is a good time to test for logic errors, define mismatches, etc.
 1796: case "$MOZ_BUILD_APP" in
 1796: xulrunner)
 1796:   if test "$LIBXUL_SDK"; then
 1796:     AC_MSG_ERROR([Building XULRunner --with-libxul-sdk doesn't make sense; XULRunner provides the libxul SDK.])
 1796:   fi
 1796:   ;;
 1796: esac
 1796: 
 1796: # Special cases where we need to AC_DEFINE something. Also a holdover for apps
 1796: # that haven't made a confvars.sh yet. Don't add new stuff here, use
 1796: # MOZ_BUILD_APP.
    1: case "$MOZ_BUILD_APP" in
    1: browser)
    1:   AC_DEFINE(MOZ_PHOENIX)
    1:   ;;
    1: 
    1: xulrunner)
    1:   AC_DEFINE(MOZ_XULRUNNER)
    1:   ;;
    1: 
    1: content/xslt)
    1:   AC_DEFINE(TX_EXE)
    1:   ;;
    1: 
    1: standalone) 
    1:   MOZ_APP_NAME=mozilla
    1:   MOZ_APP_DISPLAYNAME=Mozilla
    1:   MOZ_APP_VERSION=$MOZILLA_VERSION
    1:   ;;
    1: 
    1: esac
    1: 
    1: AC_SUBST(MOZ_BUILD_APP)
    1: AC_SUBST(MOZ_PHOENIX)
    1: AC_SUBST(MOZ_XULRUNNER)
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_BUILD_APP,$MOZ_BUILD_APP)
    1: 
    1: dnl ========================================================
    1: dnl = 
    1: dnl = Toolkit Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Toolkit Options)
    1: 
    1:     dnl ========================================================
    1:     dnl = Select the default toolkit
    1:     dnl ========================================================
    1: 	MOZ_ARG_ENABLE_STRING(default-toolkit,
    1: 	[  --enable-default-toolkit=TK
    1:                           Select default toolkit
    1:                           Platform specific defaults:
  346:                             BeOS - cairo-beos
  346:                             Mac OS X - cairo-cocoa
    1:                             Neutrino/QNX - photon
  346:                             OS/2 - cairo-os2
  346:                             Win32 - cairo-windows
  346:                             WinCE - windows
16526:                             Gtk2 with DirectFB - cairo-gtk2-dfb
16757:                             * - cairo-gtk2
16757:                             * - cairo-qt],
    1:     [ _DEFAULT_TOOLKIT=$enableval ],
    1:     [ _DEFAULT_TOOLKIT=$_PLATFORM_DEFAULT_TOOLKIT])
    1: 
 2229:     if test "$_DEFAULT_TOOLKIT" = "photon" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-windows" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2" \
16526:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2-dfb" \
16526:         -o "$_DEFAULT_TOOLKIT" = "cairo-gtk2-x11" \
16757:         -o "$_DEFAULT_TOOLKIT" = "cairo-qt" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-beos" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-os2" \
    1:         -o "$_DEFAULT_TOOLKIT" = "cairo-cocoa"
    1:     then
    1:         dnl nglayout only supports building with one toolkit,
    1:         dnl so ignore everything after the first comma (",").
    1:         MOZ_WIDGET_TOOLKIT=`echo "$_DEFAULT_TOOLKIT" | sed -e "s/,.*$//"`
    1:     else
16526:         AC_MSG_ERROR([You must specify a default toolkit (perhaps $_PLATFORM_DEFAULT_TOOLKIT).])
    1:     fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_DEFAULT_TOOLKIT,"$MOZ_WIDGET_TOOLKIT")
    1: 
    1: dnl ========================================================
    1: dnl = Enable the toolkit as needed                         =
    1: dnl ========================================================
    1: 
    1: case "$MOZ_WIDGET_TOOLKIT" in
    1: photon)
    1: 	MOZ_ENABLE_PHOTON=1
    1: 	AC_DEFINE(MOZ_WIDGET_PHOTON)
    1:     ;;
    1: 
    1: cairo-windows)
    1:     MOZ_WIDGET_TOOLKIT=windows
    1:     MOZ_GFX_TOOLKIT=cairo
    1:     ;;
    1: 
16526: cairo-gtk2|cairo-gtk2-x11)
    1:     MOZ_WIDGET_TOOLKIT=gtk2
    1:     MOZ_GFX_TOOLKIT=cairo
    1:     MOZ_ENABLE_GTK2=1
    1:     MOZ_ENABLE_XREMOTE=1
16526: 
16526:     AC_DEFINE(MOZ_X11)
16526:     MOZ_X11=1
16526: 
 3585:     TK_CFLAGS='$(MOZ_GTK2_CFLAGS)'
 3585:     TK_LIBS='$(MOZ_GTK2_LIBS)'
    1:     AC_DEFINE(MOZ_WIDGET_GTK2)
    1:     ;;
16526: 
16526: cairo-gtk2-dfb)
16526:     MOZ_WIDGET_TOOLKIT=gtk2
16526:     MOZ_GFX_TOOLKIT=cairo
16526:     MOZ_ENABLE_GTK2=1
16526: 
16526:     AC_DEFINE(MOZ_DFB)
16526:     MOZ_DFB=1
16526: 
16526:     TK_CFLAGS='$(MOZ_GTK2_CFLAGS)'
16526:     TK_LIBS='$(MOZ_GTK2_LIBS)'
16526:     AC_DEFINE(MOZ_WIDGET_GTK2)
16526:     if test "$no_x" != "yes"; then
16526:         AC_MSG_WARN([Disabling X when DirectFB is specified.])
16526:         no_x=yes
16526:     fi
16526:     ;;
16526: 
16757: cairo-qt)
16757:     MOZ_WIDGET_TOOLKIT=qt
16757:     MOZ_GFX_TOOLKIT=cairo
16757:     MOZ_ENABLE_QT=1
16757:     MOZ_ENABLE_XREMOTE=1
19858:     USE_ELF_DYNSTR_GC=
22584:     NS_PRINTING=
16958: 
16958:     AC_DEFINE(MOZ_X11)
16958:     MOZ_X11=1
16958: 
16757:     TK_CFLAGS='$(MOZ_QT_CFLAGS)'
16757:     TK_LIBS='$(MOZ_QT_LIBS)'
16757:     AC_DEFINE(MOZ_WIDGET_QT)
16757:     ;;
16958: 
    1: cairo-beos)
    1:     MOZ_WIDGET_TOOLKIT=beos
    1:     MOZ_GFX_TOOLKIT=cairo
    1:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
    1:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
    1:     ;;
    1: 
    1: cairo-os2)
    1:     MOZ_WIDGET_TOOLKIT=os2
    1:     MOZ_GFX_TOOLKIT=cairo
    1:     TK_CFLAGS='$(MOZ_CAIRO_CFLAGS)'
    1:     TK_LIBS='$(MOZ_CAIRO_LIBS)'
    1:     ;;
    1: 
22484: cairo-cocoa)
    1:     MOZ_WIDGET_TOOLKIT=cocoa
    1:     AC_DEFINE(MOZ_WIDGET_COCOA)
    1:     MOZ_ENABLE_COCOA=1
    1:     MOZ_GFX_TOOLKIT=cairo
    1:     MOZ_USER_DIR="Mozilla"
    1:     AC_DEFINE(XP_MACOSX)
    1:     AC_DEFINE(TARGET_CARBON)
    1:     AC_DEFINE(TARGET_API_MAC_CARBON)
18357:     TK_LIBS='-framework Carbon -framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework AddressBook'
    1:     CFLAGS="$CFLAGS $TK_CFLAGS"
    1:     CXXFLAGS="$CXXFLAGS $TK_CFLAGS"
    1:     ;;
    1: esac
    1: 
    1: if test "$MOZ_ENABLE_XREMOTE"; then
    1:     AC_DEFINE(MOZ_ENABLE_XREMOTE)
    1: fi
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
16526:   if test "$MOZ_ENABLE_GTK2"; then
16526:     if test "$MOZ_X11"; then
16526:       GDK_PACKAGES=gdk-x11-2.0
16526:     elif test "$MOZ_DFB"; then
16526:       PKG_CHECK_MODULES(MOZ_DFB, directfb >= 1.1.0)
16526:       GDK_PACKAGES=directfb
16526:     fi
16526: 
16526:     PKG_CHECK_MODULES(MOZ_GTK2, gtk+-2.0 >= $GTK2_VERSION gtk+-unix-print-2.0 glib-2.0 gobject-2.0 $GDK_PACKAGES)
16526:   fi
16526: 
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MOZ_DEFAULT_TOOLKIT)
    1: 
    1: dnl ========================================================
    1: dnl = startup-notification support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_STARTUP_NOTIFICATION=
    1: 
    1:     MOZ_ARG_ENABLE_BOOL(startup-notification,
    1:     [  --enable-startup-notification       Enable startup-notification support (default: disabled) ],
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=force,
    1:         MOZ_ENABLE_STARTUP_NOTIFICATION=)
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_STARTUP_NOTIFICATION,
    1:                           libstartup-notification-1.0 >= $STARTUP_NOTIFICATION_VERSION,
    1:         [MOZ_ENABLE_STARTUP_NOTIFICATION=1], [
    1:             if test "$MOZ_ENABLE_STARTUP_NOTIFICATION" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find startup-notification >= $STARTUP_NOTIFICATION_VERSION])
    1:             fi
    1:             MOZ_ENABLE_STARTUP_NOTIFICATION=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_STARTUP_NOTIFICATION"; then
    1:         AC_DEFINE(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1:     fi
    1: 
    1:     TK_LIBS="$TK_LIBS $MOZ_STARTUP_NOTIFICATION_LIBS"
    1: fi
    1: AC_SUBST(MOZ_ENABLE_STARTUP_NOTIFICATION)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_CFLAGS)
    1: AC_SUBST(MOZ_STARTUP_NOTIFICATION_LIBS)
    1: 
16757: dnl ========================================================
16757: dnl = QT support
16757: dnl ========================================================
16757: if test "$MOZ_ENABLE_QT"
16757: then
16900:     PKG_CHECK_MODULES(MOZ_QT, QtGui QtNetwork QtUiTools QtCore)
16757:     AC_SUBST(MOZ_QT_CFLAGS)
16757:     AC_SUBST(MOZ_QT_LIBS)
16757: 
16757:     MOZ_ARG_WITH_STRING(qtdir,
16757:     [  --with-qtdir=\$dir       Specify Qt directory ],
16757:     [ QTDIR=$withval])
16757: 
16757:     if test -z "$QTDIR"; then
16757:       QTDIR="/usr"
16757:     fi
16757:     QTINCDIR="/include/qt"
16757:     if test ! -d "$QTDIR$QTINCDIR"; then
16757:        QTINCDIR="/include/X11/qt"
16757:     fi
16757:     if test ! -d "$QTDIR$QTINCDIR"; then
16757:        QTINCDIR="/include"
16757:     fi
16757: 
16757:     if test -x "$QTDIR/bin/moc-qt4"; then
16757:       HOST_MOC="$QTDIR/bin/moc-qt4"
16757:     else
16757:       if test -x "$QTDIR/bin/moc"; then
16757:         HOST_MOC="$QTDIR/bin/moc"
16757:       else
16757:         AC_CHECK_PROGS(HOST_MOC, moc, "")
16757:       fi
16757:     fi
16757:     if test -z "$HOST_MOC"; then
16757:       AC_MSG_ERROR([no acceptable moc preprocessor found])
16757:     fi
16757:     MOC=$HOST_MOC
16757: fi
16757: 
    1: AC_SUBST(GTK_CONFIG)
    1: AC_SUBST(TK_CFLAGS)
    1: AC_SUBST(TK_LIBS)
    1: 
    1: AC_SUBST(MOZ_ENABLE_GTK2)
    1: AC_SUBST(MOZ_ENABLE_PHOTON)
    1: AC_SUBST(MOZ_ENABLE_COCOA)
16757: AC_SUBST(MOZ_ENABLE_QT)
    1: AC_SUBST(MOZ_ENABLE_XREMOTE)
    1: AC_SUBST(MOZ_GTK2_CFLAGS)
    1: AC_SUBST(MOZ_GTK2_LIBS)
16757: AC_SUBST(MOZ_QT_CFLAGS)
16757: AC_SUBST(MOZ_QT_LIBS)
    1: 
    1: AC_SUBST(MOC)
    1: 
16526: AC_SUBST(MOZ_DFB)
    1: AC_SUBST(MOZ_X11)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Components & Features
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Components and Features)
    1: 
    1: dnl ========================================================
    1: dnl = Localization
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(ui-locale,
    1: [  --enable-ui-locale=ab-CD
    1:                           Select the user interface locale (default: en-US)],
    1:     MOZ_UI_LOCALE=$enableval )
    1: AC_SUBST(MOZ_UI_LOCALE)
    1: 
    1: dnl ========================================================
    1: dnl = Trademarked Branding 
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(official-branding,
    1: [  --enable-official-branding Enable Official mozilla.org Branding
    1:                           Do not distribute builds with
    1:                           --enable-official-branding unless you have
    1:                           permission to use trademarks per
    1:                           http://www.mozilla.org/foundation/trademarks/ .],
    1: [case "$MOZ_BUILD_APP" in
    1: browser)
    1:     MOZ_BRANDING_DIRECTORY=other-licenses/branding/firefox
    1:     MOZ_APP_DISPLAYNAME=Firefox
    1:     ;;
    1: 
    1: *)]
17103:     AC_MSG_ERROR([Official branding is only available for Firefox.])
    1: esac
    1: )
    1: 
    1: MOZ_ARG_WITH_STRING(branding,
    1: [  --with-branding=dir    Use branding from the specified directory.],
    1:     MOZ_BRANDING_DIRECTORY=$withval)
    1: 
    1: REAL_BRANDING_DIRECTORY="${MOZ_BRANDING_DIRECTORY}"
    1: if test -z "$REAL_BRANDING_DIRECTORY"; then
    1:   REAL_BRANDING_DIRECTORY=${MOZ_BUILD_APP}/branding/nightly
    1: fi
    1: 
    1: if test -f "$topsrcdir/$REAL_BRANDING_DIRECTORY/configure.sh"; then
    1:   . "$topsrcdir/$REAL_BRANDING_DIRECTORY/configure.sh"
    1: fi
    1: 
    1: AC_SUBST(MOZ_BRANDING_DIRECTORY)
    1: 
    1: dnl ========================================================
    1: dnl = Distribution ID
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(distribution-id,
    1: [  --with-distribution-id=ID  Set distribution-specific id (default=org.mozilla)],
    1: [ val=`echo $withval`
    1:     MOZ_DISTRIBUTION_ID="$val"])
    1: 
    1: if test -z "$MOZ_DISTRIBUTION_ID"; then
    1:    MOZ_DISTRIBUTION_ID="org.mozilla"
    1: fi
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_DISTRIBUTION_ID,"$MOZ_DISTRIBUTION_ID")
    1: AC_SUBST(MOZ_DISTRIBUTION_ID)
    1: 
16526: 
16526: dnl ========================================================
16526: dnl complex text support off by default
16526: dnl ========================================================
16526: MOZ_PANGO=1
16526: MOZ_ARG_DISABLE_BOOL(pango,
16526: [  --disable-pango Disable usage of Pango ],
16526:     MOZ_PANGO=,
16526:     MOZ_PANGO=1)
16526: 
16526: 
    1: dnl ========================================================
19744: dnl = Pango
10568: dnl ========================================================
10568: if test "$MOZ_ENABLE_GTK2"
    1: then
16526:     AC_SUBST(MOZ_PANGO)
    1: 
10568:     PKG_CHECK_MODULES(_PANGOCHK, pango >= $PANGO_VERSION)
16526: 
16526:     if test "$MOZ_PANGO"
16526:     then
19744:         PKG_CHECK_MODULES(MOZ_PANGO, pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION)
    1:         AC_SUBST(MOZ_PANGO_CFLAGS)
    1:         AC_SUBST(MOZ_PANGO_LIBS)
16526:         AC_DEFINE(MOZ_PANGO)
16526:     else
16526:         PKG_CHECK_MODULES(MOZ_PANGO, pango >= $PANGO_VERSION pangoft2 >= $PANGO_VERSION)
16526:         AC_SUBST(MOZ_PANGO_CFLAGS)
16526:         AC_SUBST(MOZ_PANGO_LIBS)
16526: 
16526:         PKG_CHECK_MODULES(FT2, freetype2 > 6.1.0 fontconfig)
16526:         AC_SUBST(FT2_CFLAGS)
16526:         AC_SUBST(FT2_LIBS)
16526:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = PostScript print module
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(postscript,
    1: [  --disable-postscript    Disable PostScript printing support ],
    1:     MOZ_ENABLE_POSTSCRIPT=,
    1:     MOZ_ENABLE_POSTSCRIPT=1 )
    1: 
    1: dnl ========================================================
    1: dnl = GnomeVFS support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_X11"
    1: then
    1:     dnl build the gnomevfs extension by default only when the
    1:     dnl GTK2 toolkit is in use.
    1:     if test "$MOZ_ENABLE_GTK2"
    1:     then
    1:         MOZ_ENABLE_GNOMEVFS=1
    1:         MOZ_ENABLE_GCONF=1
    1:     fi
    1: 
    1:     MOZ_ARG_DISABLE_BOOL(gnomevfs,
    1:     [  --disable-gnomevfs      Disable GnomeVFS support ],
    1:         MOZ_ENABLE_GNOMEVFS=,
    1:         MOZ_ENABLE_GNOMEVFS=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEVFS"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEVFS, gnome-vfs-2.0 >= $GNOMEVFS_VERSION gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION,[
    1:             MOZ_GNOMEVFS_LIBS=`echo $MOZ_GNOMEVFS_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEVFS=1
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEVFS" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find gnome-vfs-module-2.0 >= $GNOMEVFS_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEVFS=
    1:         ])
    1:     fi
    1: 
25956:     AC_SUBST(MOZ_ENABLE_GNOMEVFS)
    1:     AC_SUBST(MOZ_GNOMEVFS_CFLAGS)
    1:     AC_SUBST(MOZ_GNOMEVFS_LIBS)
    1: 
    1:     if test "$MOZ_ENABLE_GCONF"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GCONF, gconf-2.0 >= $GCONF_VERSION,[
    1:             MOZ_GCONF_LIBS=`echo $MOZ_GCONF_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GCONF=1
    1:         ],[
    1:             MOZ_ENABLE_GCONF=
    1:         ])
    1:     fi
    1: 
14957:     if test "$MOZ_ENABLE_GCONF"; then
14957:         AC_DEFINE(MOZ_ENABLE_GCONF)
14957:     fi
14957: 
14957:     AC_SUBST(MOZ_ENABLE_GCONF)
    1:     AC_SUBST(MOZ_GCONF_CFLAGS)
    1:     AC_SUBST(MOZ_GCONF_LIBS)
    1: 
25956:     # The GNOME component is built if gtk2, gconf and gnome-vfs
    1:     # are all available.
    1: 
    1:     if test "$MOZ_ENABLE_GTK2" -a "$MOZ_ENABLE_GCONF" -a \
25956:             "$MOZ_ENABLE_GNOMEVFS"; then
    1:       MOZ_ENABLE_GNOME_COMPONENT=1
    1:     else
    1:       MOZ_ENABLE_GNOME_COMPONENT=
    1:     fi
    1: 
    1:     AC_SUBST(MOZ_ENABLE_GNOME_COMPONENT)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = libgnomeui support module
    1: dnl ========================================================
    1: 
    1: if test "$MOZ_ENABLE_GTK2"
    1: then
    1:     MOZ_ENABLE_GNOMEUI=1
    1: 
    1:     MOZ_ARG_DISABLE_BOOL(gnomeui,
    1:     [  --disable-gnomeui       Disable libgnomeui support (default: auto, optional at runtime) ],
    1:         MOZ_ENABLE_GNOMEUI=,
    1:         MOZ_ENABLE_GNOMEUI=force)
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"
    1:     then
    1:         PKG_CHECK_MODULES(MOZ_GNOMEUI, libgnomeui-2.0 >= $GNOMEUI_VERSION,
    1:         [
    1:             MOZ_GNOMEUI_LIBS=`echo $MOZ_GNOMEUI_LIBS | sed 's/-llinc\>//'`
    1:             MOZ_ENABLE_GNOMEUI=1
    1:         ],[
    1:             if test "$MOZ_ENABLE_GNOMEUI" = "force"
    1:             then
    1:                 AC_MSG_ERROR([* * * Could not find libgnomeui-2.0 >= $GNOMEUI_VERSION])
    1:             fi
    1:             MOZ_ENABLE_GNOMEUI=
    1:         ])
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_GNOMEUI"; then
    1:         AC_DEFINE(MOZ_ENABLE_GNOMEUI)
    1:     fi
    1: fi
    1: AC_SUBST(MOZ_ENABLE_GNOMEUI)
    1: AC_SUBST(MOZ_GNOMEUI_CFLAGS)
    1: AC_SUBST(MOZ_GNOMEUI_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl = dbus support
    1: dnl ========================================================
    1: 
19868: if test "$MOZ_ENABLE_GTK2" || test "$MOZ_ENABLE_QT"
    1: then
 8250:     MOZ_ENABLE_DBUS=1
 8250: 
 8250:     MOZ_ARG_DISABLE_BOOL(dbus,
 8250:     [  --disable-dbus       Disable dbus support ],
 8250:         MOZ_ENABLE_DBUS=,
 8250:         MOZ_ENABLE_DBUS=1)
    1: 
    1:     if test "$MOZ_ENABLE_DBUS"
    1:     then
 8250:         PKG_CHECK_MODULES(MOZ_DBUS_GLIB, dbus-glib-1 >= $DBUS_VERSION)
    1:         AC_DEFINE(MOZ_ENABLE_DBUS)
    1:     fi
    1: fi
    1: AC_SUBST(MOZ_ENABLE_DBUS)
    1: AC_SUBST(MOZ_DBUS_GLIB_CFLAGS)
    1: AC_SUBST(MOZ_DBUS_GLIB_LIBS)
    1: 
    1: dnl ========================================================
23463: dnl = libnotify support
23463: dnl ========================================================
23463: 
23463: MOZ_ARG_ENABLE_BOOL(libnotify,
23463: [  --enable-libnotify       Enable libnotify support ],
23463:     MOZ_ENABLE_LIBNOTIFY=1,
23463:     MOZ_ENABLE_LIBNOTIFY=)
23463: 
23463: if test "$MOZ_ENABLE_GTK2"
23463: then
23463:     if test "$MOZ_ENABLE_LIBNOTIFY"
23463:     then
23463:         AC_DEFINE(MOZ_ENABLE_LIBNOTIFY)
23463:     fi
23463: fi
23463: 
23463: if test -z "$SKIP_LIBRARY_CHECKS"
23463: then
23463:     if test "$MOZ_ENABLE_GTK2"
23463:     then
23463:         if test "$MOZ_ENABLE_LIBNOTIFY"
23463:         then
23463:             PKG_CHECK_MODULES(MOZ_LIBNOTIFY, libnotify >= $LIBNOTIFY_VERSION)
23463:         fi
23463:     fi
23463: fi
23463: AC_SUBST(MOZ_ENABLE_LIBNOTIFY)
23463: AC_SUBST(MOZ_LIBNOTIFY_CFLAGS)
23463: AC_SUBST(MOZ_LIBNOTIFY_LIBS)
23463: 
23463: dnl ========================================================
    1: dnl = Build Personal Security Manager
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(crypto,
    1: [  --disable-crypto        Disable crypto support (Personal Security Manager)],
    1:     MOZ_PSM=,
    1:     MOZ_PSM=1 )
    1: 
    1: dnl ========================================================
    1: dnl = JS Debugger XPCOM component (js/jsd)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(jsd,
    1: [  --disable-jsd           Disable JavaScript debug library],
    1:     MOZ_JSDEBUGGER=,
    1:     MOZ_JSDEBUGGER=1)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl = Disable plugin support
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(plugins,
    1: [  --disable-plugins       Disable plugins support],
    1:     MOZ_PLUGINS=,
    1:     MOZ_PLUGINS=1)
    1: 
    1: dnl ========================================================
22249: dnl = Disable building dbm
22249: dnl ========================================================
22249: MOZ_ARG_DISABLE_BOOL(dbm,
22249: [  --disable-dbm       Disable building dbm],
22249:     NSS_DISABLE_DBM=1,
22249:     NSS_DISABLE_DBM=)
22249: 
    1: dnl bi-directional support always on
    1: IBMBIDI=1
    1: AC_DEFINE(IBMBIDI)
    1: 
    1: dnl ========================================================
    1: dnl view source support on by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(view-source,
    1: [  --disable-view-source     Disable view source support],
    1:     MOZ_VIEW_SOURCE=,
    1:     MOZ_VIEW_SOURCE=1 )
    1: if test "$MOZ_VIEW_SOURCE"; then
    1:     AC_DEFINE(MOZ_VIEW_SOURCE)
    1: fi
    1: 
    1: 
    1: dnl ========================================================
    1: dnl accessibility support on by default on all platforms 
    1: dnl except OS X.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(accessibility,
    1: [  --disable-accessibility Disable accessibility support (off by default on OS X)],
    1:     ACCESSIBILITY=,
    1:     ACCESSIBILITY=1 )
    1: if test "$ACCESSIBILITY"; then
    1:     AC_DEFINE(ACCESSIBILITY)
    1: fi
    1: 
20158: if test -n "$ACCESSIBILITY" -a "$COMPILE_ENVIRONMENT" = "1"; then
14375: case "$target" in
14375: *-mingw*|*-cygwin*|*-msvc*|*-mks*)
14375:     if test "$ac_cv_header_atlbase_h" = "no"; then
14375:         AC_MSG_ERROR([System header atlbase.h is not available. See http://developer.mozilla.org/en/docs/atlbase.h for details on fixing this problem.])
14375:     fi
14375:     if test "$ac_cv_header_oleacc_idl" = "no"; then
14375:         AC_MSG_ERROR([System header oleacc.idl is not available. See http://developer.mozilla.org/en/docs/oleacc.idl for details on fixing this problem.])
14375:     fi
14375:     ;;
14375: esac
14375: fi
14375: 
    1: dnl ========================================================
    1: dnl xpfe/components on by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xpfe-components,
    1: [  --disable-xpfe-components
    1:                           Disable xpfe components],
    1:     MOZ_XPFE_COMPONENTS=,
    1:     MOZ_XPFE_COMPONENTS=1 )
    1: 
    1: dnl ========================================================
    1: dnl xpinstall support on by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xpinstall,
    1: [  --disable-xpinstall     Disable xpinstall support],
    1:     MOZ_XPINSTALL=,
    1:     MOZ_XPINSTALL=1 )
    1: if test "$MOZ_XPINSTALL"; then
    1:     AC_DEFINE(MOZ_XPINSTALL)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl xpcom js loader support on by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(jsloader,
    1: [  --disable-jsloader      Disable xpcom js loader support],
    1:     MOZ_JSLOADER=,
    1:     MOZ_JSLOADER=1 )
    1: if test "$MOZ_JSLOADER"; then
    1:     AC_DEFINE(MOZ_JSLOADER)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Disable printing
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(printing,
    1: [  --disable-printing  Disable printing support],
    1:     NS_PRINTING=,
    1:     NS_PRINTING=1 )
    1: 
22951: if test "$MOZ_WIDGET_TOOLKIT" = "qt"; then
22584:     AC_MSG_WARN([Printing does not work with Qt at this time. Omitting printing support.])
22584:     NS_PRINTING=
22584: fi
22584: 
    1: if test "$NS_PRINTING"; then
    1:     AC_DEFINE(NS_PRINTING)
    1:     AC_DEFINE(NS_PRINT_PREVIEW)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl use native unicode converters
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(native-uconv,
    1: [  --enable-native-uconv   Enable iconv support],
    1:     MOZ_USE_NATIVE_UCONV=1,
    1:     MOZ_USE_NATIVE_UCONV= )
    1: if test "$MOZ_USE_NATIVE_UCONV"; then
    1:     AC_DEFINE(MOZ_USE_NATIVE_UCONV)
    1: fi
    1: if test "$OS_ARCH" != "WINCE" -a "$OS_ARCH" != "WINNT" -a "$MOZ_USE_NATIVE_UCONV" -a "$ac_cv_func_iconv" != "yes"; then
    1:     AC_MSG_ERROR([iconv() not found.  Cannot enable native uconv support.])
    1: fi
    1: 
    1: 
    1: dnl ========================================================
    1: dnl Libeditor can be build as plaintext-only,
    1: dnl or as a full html and text editing component.
    1: dnl We build both by default.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(plaintext-editor-only,
    1: [  --enable-plaintext-editor-only
    1:                           Allow only plaintext editing],
    1:     MOZ_PLAINTEXT_EDITOR_ONLY=1,
    1:     MOZ_PLAINTEXT_EDITOR_ONLY= )
    1: dnl Note the #define is MOZILLA, not MOZ, for compat with the Mac build.
    1: AC_SUBST(MOZ_PLAINTEXT_EDITOR_ONLY)
    1: 
    1: dnl ========================================================
    1: dnl = Drop XPCOM Obsolete library
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xpcom-obsolete,
    1: [  --disable-xpcom-obsolete           Disable XPCOM Obsolete Library],
    1:     MOZ_NO_XPCOM_OBSOLETE=1,
    1:     MOZ_NO_XPCOM_OBSOLETE=)
    1: 
    1: if test -n "$MOZ_NO_XPCOM_OBSOLETE"; then
    1:     AC_DEFINE(MOZ_NO_XPCOM_OBSOLETE)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Disable Fast Load
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xpcom-fastload,
    1: [  --disable-xpcom-fastload           Disable XPCOM fastload support],
    1:     MOZ_NO_FAST_LOAD=1,
    1:     MOZ_NO_FAST_LOAD=)
    1: 
    1: AC_SUBST(MOZ_NO_FAST_LOAD)
    1: 
    1: if test -n "$MOZ_NO_FAST_LOAD"; then
    1:     AC_DEFINE(MOZ_NO_FAST_LOAD)
    1: fi
    1: 
    1: dnl ========================================================
21394: dnl = Disable Ogg Codecs
16300: dnl ========================================================
16300: MOZ_ARG_DISABLE_BOOL(ogg,
16300: [  --disable-ogg           Disable Ogg Codec support],
16300:     MOZ_OGG=,
16300:     MOZ_OGG=1)
16300: 
16300: AC_SUBST(MOZ_OGG)
16300: 
16300: if test -n "$MOZ_OGG"; then
16300:     AC_DEFINE(MOZ_OGG)
21394:     MOZ_SYDNEYAUDIO=1
16300:     MOZ_MEDIA=1
26904: 
26904:     dnl Checks for __attribute__(aligned()) directive
26904:     AC_CACHE_CHECK([__attribute__ ((aligned ())) support],
26904:         [ac_cv_c_attribute_aligned],
26904:         [ac_cv_c_attribute_aligned=0
26904:          CFLAGS_save="${CFLAGS}"
26904:          CFLAGS="${CFLAGS} -Werror"
26904:          for ac_cv_c_attr_align_try in 64 32 16 8; do
26904:            echo "trying $ac_cv_c_attr_align_try"
26904:            AC_TRY_COMPILE([],
26904:                           [static char c __attribute__ ((aligned(${ac_cv_c_attr_align_try}))) = 0; return c;],
26904:                           [ac_cv_c_attribute_aligned="${ac_cv_c_attr_align_try}"])
26904:            if test "$ac_cv_c_attribute_aligned" != 0; then
26904:              break;
26904:            fi
26904:          done
26904:            CFLAGS="${CFLAGS_save}"])
26904:     if test "${ac_cv_c_attribute_aligned}" != "0"; then
26904:       AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX],
26904:                          [${ac_cv_c_attribute_aligned}],[Maximum supported data alignment])
26904:     fi
16300: fi
15751: 
21394: dnl ========================================================
21394: dnl = Disable Wave decoder support
21394: dnl ========================================================
21755: MOZ_ARG_DISABLE_BOOL(wave,
21394: [  --disable-wave          Disable Wave decoder support],
21394:     MOZ_WAVE=,
21394:     MOZ_WAVE=1)
21394: 
21394: AC_SUBST(MOZ_WAVE)
21394: 
21394: if test -n "$MOZ_WAVE"; then
21394:     AC_DEFINE(MOZ_WAVE)
21394:     MOZ_SYDNEYAUDIO=1
21394:     MOZ_MEDIA=1
21394: fi
21394: 
21394: dnl ========================================================
21394: dnl = Handle dependent SYDNEYAUDIO and MEDIA defines
21394: dnl ========================================================
21394: 
21394: AC_SUBST(MOZ_SYDNEYAUDIO)
21394: 
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
21394:     AC_DEFINE(MOZ_SYDNEYAUDIO)
21394: fi
21394: 
15751: AC_SUBST(MOZ_MEDIA)
15751: 
15751: if test -n "$MOZ_MEDIA"; then
15751:     AC_DEFINE(MOZ_MEDIA)
15751: fi
15751: 
21394: dnl ========================================================
21394: dnl = Check alsa availability on Linux if using sydneyaudio
21394: dnl ========================================================
21394: 
21394: dnl If using sydneyaudio with Linux, ensure that the alsa library is available
21394: if test "$COMPILE_ENVIRONMENT"; then
21394: if test -n "$MOZ_SYDNEYAUDIO"; then
16300:    case "$target_os" in
16300: linux*)
16300:       AC_CHECK_LIB(asound, snd_pcm_open,,AC_MSG_ERROR([Ogg support on Linux requires the alsa library]))
16300:       ;;
16300:    esac
16300: fi
21394: fi
16300: 
15751: dnl ========================================================
    1: dnl Permissions System
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(permissions,
    1: [  --disable-permissions   Disable permissions (popup and cookie blocking)],
    1:     MOZ_PERMISSIONS=,
    1:     MOZ_PERMISSIONS=1
    1: )
    1: 
    1: dnl ========================================================
    1: dnl NegotiateAuth
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(negotiateauth,
    1: [  --disable-negotiateauth Disable GSS-API negotiation ],
    1:     MOZ_AUTH_EXTENSION=,
    1:     MOZ_AUTH_EXTENSION=1 )
    1: 
    1: dnl ========================================================
    1: dnl XTF
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xtf,
    1: [  --disable-xtf           Disable XTF (pluggable xml tags) support],
    1:     MOZ_XTF=,
    1:     MOZ_XTF=1 )
    1: if test "$MOZ_XTF"; then
    1:   AC_DEFINE(MOZ_XTF)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Inspector APIs
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(inspector-apis,
    1: [  --disable-inspector-apis Disable the DOM inspection APIs ],
    1:     MOZ_NO_INSPECTOR_APIS=1,
    1:     MOZ_NO_INSPECTOR_APIS= )
    1: 
    1: dnl ========================================================
    1: dnl Pref extensions (autoconfig and system-pref)
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pref-extensions,
    1: [  --disable-pref-extensions
    1:                           Disable pref extensions such as autoconfig and
    1:                           system-pref],
    1:   MOZ_PREF_EXTENSIONS=,
    1:   MOZ_PREF_EXTENSIONS=1 )
    1: 
    1: dnl ========================================================
    1: dnl = Universalchardet
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(universalchardet,
    1: [  --disable-universalchardet
    1:                           Disable universal encoding detection],
    1:   MOZ_UNIVERSALCHARDET=,
    1:   MOZ_UNIVERSALCHARDET=1 )
    1: 
    1: dnl ========================================================
    1: dnl JavaXPCOM
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(javaxpcom,
    1: [  --enable-javaxpcom
    1:                           Enable Java-XPCOM bridge],
    1:     MOZ_JAVAXPCOM=1,
    1:     MOZ_JAVAXPCOM= )
    1: 
    1: if test -n "${MOZ_JAVAXPCOM}"; then
    1:   case "$host_os" in
    1:     cygwin*|msvc*|mks*)
    1:       if test -n "$JAVA_HOME"; then
    1:         JAVA_HOME=`cygpath -u \`cygpath -m -s "$JAVA_HOME"\``
    1:       fi
    1:       ;;
    1:     *mingw*)
    1:       if test -n "$JAVA_HOME"; then
    1:         JAVA_HOME=`cd "$JAVA_HOME" && pwd`
    1:       fi
    1:       ;;
    1:   esac
    1: 
    1:   if test -n "${JAVA_INCLUDE_PATH}"; then
    1:     dnl Make sure jni.h exists in the given include path.
    1:     if test ! -f "$JAVA_INCLUDE_PATH/jni.h"; then
    1:       AC_MSG_ERROR([jni.h was not found in given include path $JAVA_INCLUDE_PATH.])
    1:     fi
    1:   else
    1:     case "$target_os" in
    1:       darwin*)
    1:         dnl Default to java system location
    1:         JAVA_INCLUDE_PATH=/System/Library/Frameworks/JavaVM.framework/Headers
    1:         ;;
    1:       *)
    1:         dnl Try $JAVA_HOME
    1:         JAVA_INCLUDE_PATH="$JAVA_HOME/include"
    1:         ;;
    1:     esac
    1:     if test ! -f "$JAVA_INCLUDE_PATH/jni.h"; then
    1:       AC_MSG_ERROR([The header jni.h was not found.  Set \$JAVA_HOME to your java sdk directory, use --with-java-bin-path={java-bin-dir}, or reconfigure with --disable-javaxpcom.])
    1:     fi
    1:   fi
    1: 
    1:   if test -n "${JAVA_BIN_PATH}"; then
    1:     dnl Look for javac and jar in the specified path.
    1:     JAVA_PATH="$JAVA_BIN_PATH"
    1:   else
    1:     dnl No path specified, so look for javac and jar in $JAVA_HOME & $PATH.
    1:     JAVA_PATH="$JAVA_HOME/bin:$PATH"
    1:   fi
    1: 
25869:   MOZ_PATH_PROG(JAVA, java, :, [$JAVA_PATH])
25869:   MOZ_PATH_PROG(JAVAC, javac, :, [$JAVA_PATH])
25869:   MOZ_PATH_PROG(JAR, jar, :, [$JAVA_PATH])
    1:   if test -z "$JAVA" || test "$JAVA" = ":" || test -z "$JAVAC" || test "$JAVAC" = ":" || test -z "$JAR" || test "$JAR" = ":"; then
    1:     AC_MSG_ERROR([The programs java, javac and jar were not found.  Set \$JAVA_HOME to your java sdk directory, use --with-java-bin-path={java-bin-dir}, or reconfigure with --disable-javaxpcom.])
    1:   fi
    1: fi
    1: 
    1: dnl ========================================================
 4389: dnl = Breakpad crash reporting (on by default on supported platforms)
    1: dnl ========================================================
    1: 
 2720: if (test "$OS_ARCH" = "WINNT" -a -z "$GNU_CC" \
 2666:     || test "$OS_ARCH" = "Darwin" \
13348:     || test "$OS_ARCH" = "Linux" -a "$CPU_ARCH" = "x86" \
13348:     || test "$OS_ARCH" = "SunOS") \
 2720:    && test -z "$HAVE_64BIT_OS"; then
 4389:    MOZ_CRASHREPORTER=1
 4389: fi
 4389: 
 4389: MOZ_ARG_DISABLE_BOOL(crashreporter,
 4389: [  --disable-crashreporter          Disable breakpad crash reporting],
 4389:     MOZ_CRASHREPORTER=,
 4389:     MOZ_CRASHREPORTER=1)
 4389: 
 4389: if test -n "$MOZ_CRASHREPORTER"; then
 4389:    AC_DEFINE(MOZ_CRASHREPORTER)
 2639: 
13348:   if (test "$OS_ARCH" = "Linux" || test "$OS_ARCH" = "SunOS") && \
 3665:     test -z "$SKIP_LIBRARY_CHECKS"; then
10553:     PKG_CHECK_MODULES(MOZ_GTHREAD, gthread-2.0)
10553:     AC_SUBST(MOZ_GTHREAD_CFLAGS)
10553:     AC_SUBST(MOZ_GTHREAD_LIBS)
10553: 
10553:     AC_CHECK_HEADERS([curl/curl.h], [], [AC_MSG_ERROR([Couldn't find curl/curl.h which is required for the crash reporter.  Use --disable-crashreporter to disable the crash reporter.])])
 3665:   fi
 3665: fi
    1: 
14003: MOZ_ARG_WITH_STRING(crashreporter-enable-percent,
14003: [  --with-crashreporter-enable-percent=NN  Enable sending crash reports by default on NN% of users. (default=100)],
14003: [ val=`echo $withval | sed 's/[^0-9]//g'`
14003:     MOZ_CRASHREPORTER_ENABLE_PERCENT="$val"])
14003: 
14003: if test -z "$MOZ_CRASHREPORTER_ENABLE_PERCENT"; then
14003:    MOZ_CRASHREPORTER_ENABLE_PERCENT=100
14003: fi
14003: AC_DEFINE_UNQUOTED(MOZ_CRASHREPORTER_ENABLE_PERCENT, $MOZ_CRASHREPORTER_ENABLE_PERCENT)
14003: 
    1: dnl ========================================================
    1: dnl = Enable compilation of specific extension modules
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_ENABLE_STRING(extensions,
    1: [  --enable-extensions     Enable extensions],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
    1:     if test "$option" = "yes" || test "$option" = "all"; then
20889:         AC_MSG_ERROR([--enable-extensions=$option is no longer supported.])
    1:     elif test "$option" = "no" || test "$option" = "none"; then
    1:         MOZ_EXTENSIONS=""
    1:     elif test "$option" = "default"; then
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $MOZ_EXTENSIONS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         MOZ_EXTENSIONS=`echo "$MOZ_EXTENSIONS" | sed "s/ ${option}//"`
    1:     else
    1:         MOZ_EXTENSIONS="$MOZ_EXTENSIONS $option"
    1:     fi
    1: done],
    1:     MOZ_EXTENSIONS="$MOZ_EXTENSIONS_DEFAULT")
    1: 
    1: if test -z "$MOZ_ENABLE_GNOMEVFS" && test `echo "$MOZ_EXTENSIONS" | grep -c gnomevfs` -ne 0; then
    1:     # Suppress warning on non-X11 platforms
    1:     if test -n "$MOZ_X11"; then
    1:         AC_MSG_WARN([Cannot build gnomevfs without required libraries. Removing gnomevfs from MOZ_EXTENSIONS.])
    1:     fi
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|gnomevfs||'`
    1: fi
    1: 
    1: if test -z "$MOZ_JSDEBUGGER" && test `echo "$MOZ_EXTENSIONS" | grep -c venkman` -ne 0; then
    1:     AC_MSG_WARN([Cannot build venkman without JavaScript debug library. Removing venkman from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|venkman||'`
    1: fi
    1: 
    1: dnl This might be temporary: build tridentprofile only on Windows
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c tridentprofile` -ne 0 && test "$OS_ARCH" != "WINNT"; then
    1:     AC_MSG_WARN([tridentprofile extension works only on Windows at this time. Removing tridentprofile from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|tridentprofile||'`
    1: fi
    1: 
    1: dnl cookie must be built before tridentprofile. put it at list's end.
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c tridentprofile` -ne 0; then
    1:   MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|tridentprofile||'`
    1:   MOZ_EXTENSIONS="$MOZ_EXTENSIONS tridentprofile"
    1: fi
    1: 
11589: dnl xforms requires xtf and schema-validation
    1: if test -z "$MOZ_XTF" && test `echo "$MOZ_EXTENSIONS" | grep -c xforms` -ne 0; then
    1:     AC_MSG_WARN([Cannot build XForms without XTF support.  Removing XForms from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|xforms||g'`
    1: fi
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c xforms` -ne 0 && test `echo "$MOZ_EXTENSIONS" | grep -c schema-validation` -eq 0; then
    1:     AC_MSG_WARN([Cannot build XForms without schema validation.  Removing XForms from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|xforms||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c auth` -ne 0; then
    1:     AC_MSG_WARN([auth is no longer an extension, use --disable-negotiateauth to disable.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|auth||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c 'cookie\|permissions'` -ne 0; then
    1:     AC_MSG_WARN([cookie and permissions are no longer extensions, use --disable-permissions to disable.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|cookie||g; s|permissions||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c pref` -ne 0; then
    1:     AC_MSG_WARN([pref is no longer an extension, use --disable-pref-extensions to disable.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|pref||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c universalchardet` -ne 0; then
    1:     AC_MSG_WARN([universalchardet is no longer an extension, use --disable-universalchardet to disable.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|universalchardet||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c java` -ne 0; then
    1:     AC_MSG_WARN([java is no longer an extension, use --enable-javaxpcom to enable.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|java||g'`
    1: fi
    1: 
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c spellcheck` -ne 0; then
    1:     AC_MSG_WARN([spellcheck is no longer an extension.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|spellcheck||g'`
    1: fi
    1: 
    1: if test -n "$MOZ_NO_XPCOM_OBSOLETE" && test `echo "$MOZ_EXTENSIONS" | grep -c sroaming` -ne 0; then
    1:     AC_MSG_WARN([Cannot currently build sroaming without xpcom obsolete -- bug 249343. Removing sroaming from MOZ_EXTENSIONS.])
    1:     MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's|sroaming||'`
    1: fi
    1: 
    1: dnl Remove dupes
    1: MOZ_EXTENSIONS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_EXTENSIONS}`
    1: 
 2776: dnl Ensure every extension exists, to avoid mostly-inscrutable error messages
 2776: dnl when trying to build a non-existent extension.
 2776: for extension in $MOZ_EXTENSIONS; do
 2776:     if test ! -d "${srcdir}/extensions/${extension}"; then
 2776:         AC_MSG_ERROR([Unrecognized extension provided to --enable-extensions: ${extension}.])
 2776:     fi
 2776: done
 2776: 
 2776: 
    1: dnl ========================================================
    1: dnl Image decoders
    1: dnl ========================================================
 8825: case "$MOZ_WIDGET_TOOLKIT" in
 8825: beos|windows|os2|mac|cocoa)
 8825:     ;;
 8825: *)
19429:     if test -z "$MOZ_ENABLE_GTK2" && test -z "$MOZ_ENABLE_QT"; then
 8825:        MOZ_IMG_DECODERS_DEFAULT=`echo $MOZ_IMG_DECODERS_DEFAULT | sed -e 's|icon||'`
 8825:     fi
 8825:     ;;
 8825: esac
 8825: 
    1: MOZ_ARG_ENABLE_STRING(image-decoders,
    1: [  --enable-image-decoders[={mod1,mod2,default,all,none}]
    1:                           Enable specific image decoders],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
    1:     if test "$option" = "yes" || test "$option" = "all"; then
    1:         MOZ_IMG_DECODERS="$MOZ_IMG_DECODERS $MOZ_IMG_DECODERS_DEFAULT"
    1:     elif test "$option" = "no" || test "$option" = "none"; then
    1:         MOZ_IMG_DECODERS=""
    1:     elif test "$option" = "default"; then
    1:         MOZ_IMG_DECODERS="$MOZ_IMG_DECODERS $MOZ_IMG_DECODERS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         MOZ_IMG_DECODERS=`echo "$MOZ_IMG_DECODERS" | sed "s/ ${option}//"`
    1:     else
    1:         MOZ_IMG_DECODERS="$MOZ_IMG_DECODERS $option"
    1:     fi
    1: done],
    1:     MOZ_IMG_DECODERS="$MOZ_IMG_DECODERS_DEFAULT")
    1: 
    1: dnl Dupes are removed in the encoder section because it will also add decoders
    1: 
    1: dnl ========================================================
    1: dnl Image encoders
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(image-encoders,
    1: [  --enable-image-encoders[={mod1,mod2,default,all,none}]
    1:                           Enable specific image encoders],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
    1:     if test "$option" = "yes" || test "$option" = "all"; then
    1:         addencoder="$MOZ_IMG_ENCODERS_DEFAULT"
    1:     elif test "$option" = "no" || test "$option" = "none"; then
    1:         MOZ_IMG_ENCODERS=""
    1:         addencoder=""
    1:     elif test "$option" = "default"; then
    1:         addencoder="$MOZ_IMG_ENCODERS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         addencoder=`echo "$MOZ_IMG_ENCODERS" | sed "s/ ${option}//"`
    1:     else
    1:         addencoder="$option"
    1:     fi
    1:     MOZ_IMG_ENCODERS="$MOZ_IMG_ENCODERS $addencoder"
    1: done],
    1:     MOZ_IMG_ENCODERS="$MOZ_IMG_ENCODERS_DEFAULT")
    1: 
    1: dnl Remove dupes
    1: MOZ_IMG_DECODERS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_IMG_DECODERS}`
    1: MOZ_IMG_ENCODERS=`${PERL} ${srcdir}/build/unix/uniq.pl ${MOZ_IMG_ENCODERS}`
    1: 
    1: dnl ========================================================
    1: dnl MathML on by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(mathml,
    1: [  --disable-mathml        Disable MathML support],
    1:     MOZ_MATHML=,
    1:     MOZ_MATHML=1 )
    1: if test "$MOZ_MATHML"; then
    1:   AC_DEFINE(MOZ_MATHML)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Canvas
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(canvas,
    1: [  --disable-canvas          Disable html:canvas feature],
    1:     MOZ_ENABLE_CANVAS=,
    1:     MOZ_ENABLE_CANVAS=1 )
    1: if test -n "$MOZ_ENABLE_CANVAS"; then
    1:     AC_DEFINE(MOZ_ENABLE_CANVAS)
    1: fi
    1: AC_SUBST(MOZ_ENABLE_CANVAS)
    1: 
    1: dnl ========================================================
    1: dnl SVG
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(svg,
    1: [  --disable-svg            Disable SVG support],
    1:     MOZ_SVG=,
    1:     MOZ_SVG=1 )
    1: if test -n "$MOZ_SVG"; then
    1:   AC_DEFINE(MOZ_SVG)
    1: fi
10856: 
    1: dnl ========================================================
23697: dnl SMIL
23697: dnl ========================================================
25995: MOZ_SMIL=1
25995: MOZ_ARG_DISABLE_BOOL(smil,
25995: [  --disable-smil           Disable SMIL animation support],
25995:     MOZ_SMIL=,
25995:     MOZ_SMIL=1 )
25995: # Automatically disable SMIL if SVG is disabled
25995: if test -z "$MOZ_SVG"; then
25995:   MOZ_SMIL=
25995: fi
23697: if test -n "$MOZ_SMIL"; then
23697:   AC_DEFINE(MOZ_SMIL)
23697: fi
23697: 
23697: dnl ========================================================
24104: dnl Build Freetype in the tree
24104: dnl ========================================================
24104: MOZ_ARG_ENABLE_BOOL(tree-freetype,
24104: [  --enable-tree-freetype         Enable Tree FreeType],
24104:     MOZ_TREE_FREETYPE=1,
24104:     MOZ_TREE_FREETYPE= )
24104: if test -n "$MOZ_TREE_FREETYPE"; then
24104:    AC_DEFINE(MOZ_TREE_FREETYPE)
24104:    AC_SUBST(MOZ_TREE_FREETYPE)
24104:    MOZ_ENABLE_CAIRO_FT=1       
24104:    FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
24104:    FT2_CFLAGS="-I${topsrcdir}/modules/freetype2/include"
24104:    CAIRO_FT_CFLAGS="-I${topsrcdir}/modules/freetype2/include"
24104:    FT2_LIBS="${LIBXUL_DIST}/lib/freetype2.lib"
24104:    CAIRO_FT_LIBS = "${LIBXUL_DIST}/lib/freetype2.lib"
24104:    AC_DEFINE(HAVE_FT_BITMAP_SIZE_Y_PPEM)
24104:    AC_DEFINE(HAVE_FT_GLYPHSLOT_EMBOLDEN)
24104:    AC_DEFINE(HAVE_FT_LOAD_SFNT_TABLE)
24104:    AC_SUBST(CAIRO_FT_CFLAGS)
24104: fi
24104: 
24104: 
24104: dnl ========================================================
    1: dnl Installer
    1: dnl ========================================================
    1: case "$target_os" in
    1:     aix*|solaris*|linux*|msvc*|mks*|cygwin*|mingw*|os2*|wince*)
    1:         MOZ_INSTALLER=1
    1:         ;;
    1: esac
    1: 
    1: MOZ_ARG_DISABLE_BOOL(installer,
    1: [  --disable-installer     Disable building of installer],
    1:     MOZ_INSTALLER=,
    1:     MOZ_INSTALLER=1 )
24066: if test -n "$MOZ_INSTALLER" -a "$OS_ARCH" = "WINNT"; then
    1:     # Disable installer for Windows builds that use the new toolkit if NSIS
    1:     # isn't in the path.
25869:     MOZ_PATH_PROGS(MAKENSIS, makensis)
    1:     if test -z "$MAKENSIS" || test "$MAKENSIS" = ":"; then
    1:         AC_MSG_ERROR([To build the installer makensis is required in your path. To build without the installer reconfigure using --disable-installer.])
    1:     fi
    1:     # The Windows build for NSIS requires the iconv command line utility to
    1:     # convert the charset of the locale files.
25869:     MOZ_PATH_PROGS(HOST_ICONV, $HOST_ICONV "iconv", "")
    1:     if test -z "$HOST_ICONV"; then
    1:         AC_MSG_ERROR([To build the installer iconv is required in your path. To build without the installer reconfigure using --disable-installer.])
    1:     fi
    1: fi
    1: 
    1: # Automatically disable installer if xpinstall isn't built
    1: if test -z "$MOZ_XPINSTALL"; then
    1:     MOZ_INSTALLER=
    1: fi
    1: AC_SUBST(MOZ_INSTALLER)
    1: 
    1: AC_MSG_CHECKING([for tar archiver])
    1: AC_CHECK_PROGS(TAR, gnutar gtar tar, "")
    1: if test -z "$TAR"; then
    1:     AC_MSG_ERROR([no tar archiver found in \$PATH])
    1: fi
    1: AC_MSG_RESULT([$TAR])
    1: AC_SUBST(TAR)
    1: 
18450: AC_MSG_CHECKING([for wget])
18450: AC_CHECK_PROGS(WGET, wget, "")
18450: AC_MSG_RESULT([$WGET])
18450: AC_SUBST(WGET)
18450: 
    1: dnl ========================================================
    1: dnl Updater
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_DISABLE_BOOL(updater,
    1: [  --disable-updater       Disable building of updater],
    1:     MOZ_UPDATER=,
    1:     MOZ_UPDATER=1 )
    1: AC_SUBST(MOZ_UPDATER)
    1: 
    1: # app update channel is 'default' when not supplied.
    1: MOZ_ARG_ENABLE_STRING([update-channel],
    1: [  --enable-update-channel=CHANNEL
    1:                            Select application update channel (default=default)],
    1:     MOZ_UPDATE_CHANNEL=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_UPDATE_CHANNEL"; then
    1:     MOZ_UPDATE_CHANNEL=default
    1: fi
    1: AC_DEFINE_UNQUOTED(MOZ_UPDATE_CHANNEL, $MOZ_UPDATE_CHANNEL)
    1: 
    1: # tools/update-packaging is not checked out by default.
    1: MOZ_ARG_ENABLE_BOOL(update-packaging,
    1: [  --enable-update-packaging
    1:                            Enable tools/update-packaging],
    1:     MOZ_UPDATE_PACKAGING=1,
    1:     MOZ_UPDATE_PACKAGING= )
    1: AC_SUBST(MOZ_UPDATE_PACKAGING)
    1: 
    1: dnl ========================================================
    1: dnl ActiveX
    1: dnl ========================================================
    1: 
    1: MOZ_ARG_DISABLE_BOOL(xpconnect-idispatch,
    1: [  --disable-xpconnect-idispatch
    1:                           Disable building of xpconnect support for IDispatch
    1:                           (win32 only)],
    1:     XPC_IDISPATCH_SUPPORT=,
    1:     XPC_IDISPATCH_SUPPORT=1)
    1: AC_SUBST(XPC_IDISPATCH_SUPPORT)
    1: 
    1: MOZ_ARG_DISABLE_BOOL(activex,
    1: [  --disable-activex       Disable building of ActiveX control (win32 only)],
    1:     MOZ_NO_ACTIVEX_SUPPORT=1,
    1:     MOZ_NO_ACTIVEX_SUPPORT= )
    1: AC_SUBST(MOZ_NO_ACTIVEX_SUPPORT)
    1: 
    1: MOZ_ARG_DISABLE_BOOL(activex-scripting,
    1: [  --disable-activex-scripting
    1:                           Disable building of ActiveX scripting support (win32)],
    1:     MOZ_ACTIVEX_SCRIPTING_SUPPORT=,
    1:     MOZ_ACTIVEX_SCRIPTING_SUPPORT=1)
    1: AC_SUBST(MOZ_ACTIVEX_SCRIPTING_SUPPORT)
    1: 
    1: if test -n "$MOZ_NO_ACTIVEX_SUPPORT" -a -n "$MOZ_ACTIVEX_SCRIPTING_SUPPORT";
    1: then
    1:     AC_MSG_ERROR([Cannot enable ActiveX scripting support when ActiveX support is disabled.])
    1: fi
    1: 
20145: if test "$COMPILE_ENVIRONMENT" = "1"; then
14375: if test -n "$XPC_IDISPATCH_SUPPORT" -o -n "$MOZ_ACTIVEX_SCRIPTING_SUPPORT" -o -z "$MOZ_NO_ACTIVEX_SUPPORT"; then
14375: case "$target" in
14375: *-mingw*|*-cygwin*|*-msvc*|*-mks*)
14375:     if test "$ac_cv_header_atlbase_h" = "no"; then
14375:         AC_MSG_ERROR([System header atlbase.h is not available. See http://developer.mozilla.org/en/docs/atlbase.h for details on fixing this problem.])
14375:     fi
14375:     ;;
14375: esac
14375: fi
20145: fi
14375: 
    1: dnl ========================================================
    1: dnl leaky
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(leaky,
    1: [  --enable-leaky          Build leaky memory tool],
    1:     MOZ_LEAKY=1,
    1:     MOZ_LEAKY=)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl xpctools
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xpctools,
    1: [  --enable-xpctools       Build JS profiling tool],
    1:     MOZ_XPCTOOLS=1,
    1:     MOZ_XPCTOOLS= )
    1: 
    1: 
    1: dnl ========================================================
    1: dnl build the tests by default
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(tests,
    1: [  --disable-tests         Do not build test libraries & programs],
    1:     ENABLE_TESTS=,
    1:     ENABLE_TESTS=1 )
    1: 
    1: dnl ========================================================
14121: dnl parental controls (for Windows Vista)
14121: dnl ========================================================
14121: MOZ_ARG_DISABLE_BOOL(parental-controls,
14121: [  --disable-parental-controls
14121:                            Do not build parental controls],
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=1,
14121:    MOZ_DISABLE_PARENTAL_CONTROLS=)
14121: if test -n "$MOZ_DISABLE_PARENTAL_CONTROLS"; then
14121:     AC_DEFINE(MOZ_DISABLE_PARENTAL_CONTROLS)
14683: fi
14683: 
14683: dnl ========================================================
14683: dnl Vista SDK specific api
14683: dnl ========================================================
14683: MOZ_ARG_DISABLE_BOOL(vista-sdk-requirements,
14683: [  --disable-vista-sdk-requirements
14683:                            Do not build Vista SDK specific code],
14683:    MOZ_DISABLE_VISTA_SDK_REQUIREMENTS=1,
14683:    MOZ_DISABLE_VISTA_SDK_REQUIREMENTS=)
20145: if test -n "$COMPILE_ENVIRONMENT"; then
14683: if test -n "$MOZ_DISABLE_VISTA_SDK_REQUIREMENTS"; then
14683:     AC_MSG_WARN([Resulting builds will not be compatible with Windows Vista. (bug 428970)])
14683:     AC_DEFINE(MOZ_DISABLE_VISTA_SDK_REQUIREMENTS)
14683:     if test -z "$MOZ_DISABLE_PARENTAL_CONTROLS"; then
14683:         AC_DEFINE(MOZ_DISABLE_PARENTAL_CONTROLS)
14683:     fi
14683:     MOZ_DISABLE_PARENTAL_CONTROLS=1
14375: else
14375: case "$target" in
14375: *-mingw*|*-cygwin*|*-msvc*|*-mks*)
14375:     if test "$ac_cv_header_wpcapi_h" = "no"; then
14683:         AC_MSG_ERROR([System header wpcapi.h is not available. See updated http://developer.mozilla.org/en/docs/wpcapi.h for details on fixing this problem.])
14375:     fi
14375:     ;;
14375: esac
14121: fi
20145: fi
14121: AC_SUBST(MOZ_DISABLE_PARENTAL_CONTROLS)
14683: AC_SUBST(MOZ_DISABLE_VISTA_SDK_REQUIREMENTS)
14121: 
14121: dnl ========================================================
    1: dnl =
    1: dnl = Module specific options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Individual module options)
    1: 
    1: dnl ========================================================
    1: dnl = Enable Lea malloc in xpcom. OFF by default.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xpcom-lea,
    1: [  --enable-xpcom-lea      Use Lea malloc in xpcom ],
    1:     XPCOM_USE_LEA=1,
    1:     XPCOM_USE_LEA= )
    1: if test -n "$XPCOM_USE_LEA"; then
    1:     AC_DEFINE(XPCOM_USE_LEA)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Enable places (new history/bookmarks)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(places,
    1: [  --enable-places        Enable 'places' bookmark/history implementation],
    1:     MOZ_PLACES=1,
    1:     MOZ_PLACES= )
    1: if test -n "$MOZ_PLACES"; then
    1:     AC_DEFINE(MOZ_PLACES)
 4748:     if test -z "$MOZ_MAIL_NEWS"; then
    1:       MOZ_MORK=
 4748:     fi
    1:     MOZ_MORKREADER=1
 3579: else
 3579:   if test "$MOZ_BUILD_APP" = "browser"; then
 3579:     AC_MSG_ERROR([Cannot build Firefox with --disable-places.])
 3579:   fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Disable feed handling components
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(feeds,
    1: [  --disable-feeds        Disable feed handling and processing components],
    1:     MOZ_FEEDS=,
    1:     MOZ_FEEDS=1 )
    1: if test -n "$MOZ_FEEDS"; then
    1:     AC_DEFINE(MOZ_FEEDS)
    1: else
    1:     if test "$MOZ_BUILD_APP" = "browser"; then
    1:         AC_MSG_ERROR([Cannot build Firefox with --disable-feeds.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Enable mozStorage
    1: dnl ========================================================
    1: dnl Implicitly enabled by default if building calendar or places
    1: MOZ_ARG_ENABLE_BOOL(storage,
    1: [  --enable-storage        Enable mozStorage module and related components],
    1:     MOZ_STORAGE=1,
    1:     MOZ_STORAGE= )
    1: if test -n "$MOZ_STORAGE"; then
    1:     AC_DEFINE(MOZ_STORAGE)
    1: fi
    1: 
    1: dnl ========================================================
12096: dnl Check for sqlite
12096: dnl ========================================================
12096: 
12096: MOZ_NATIVE_SQLITE=
12096: MOZ_ARG_ENABLE_BOOL(system-sqlite,
12096: [  --enable-system-sqlite  Use system sqlite (located with pkgconfig)],
12096: MOZ_NATIVE_SQLITE=1,
12096: MOZ_NATIVE_SQLITE= )
12096: 
12096: if test -z "$MOZ_NATIVE_SQLITE"
12096: then
12096:     SQLITE_CFLAGS=
12383:     SQLITE_LIBS='$(call EXPAND_LIBNAME_PATH,sqlite3,$(DIST)/lib)'
12096: else
12096:     PKG_CHECK_MODULES(SQLITE, sqlite3 >= $SQLITE_VERSION)
12096: fi
12096: 
12096: AC_SUBST(MOZ_NATIVE_SQLITE)
12096: 
16570: dnl ========================================================
13679: dnl = Enable help viewer (off by default)
13679: dnl ========================================================
13679: MOZ_ARG_ENABLE_BOOL(help-viewer,
13679: [  --enable-help-viewer        Enable help viewer],
13679:     MOZ_HELP_VIEWER=1,
13679:     MOZ_HELP_VIEWER= )
13679: if test -n "$MOZ_HELP_VIEWER"; then
13679:      AC_DEFINE(MOZ_HELP_VIEWER)
13679: fi
13679: AC_SUBST(MOZ_HELP_VIEWER)
16219: if test "$MOZ_BUILD_APP" = "browser" -a -n "$MOZ_HELP_VIEWER"; then
16175:     AC_MSG_ERROR([Cannot build Firefox with --enable-help-viewer.])
16175: fi
13679: 
12096: dnl ========================================================
    1: dnl = Enable safe browsing (anti-phishing)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(safe-browsing,
    1: [  --enable-safe-browsing        Enable safe browsing (anti-phishing) implementation],
    1:     MOZ_SAFE_BROWSING=1,
    1:     MOZ_SAFE_BROWSING= )
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     AC_DEFINE(MOZ_SAFE_BROWSING)
    1: fi
    1: AC_SUBST(MOZ_SAFE_BROWSING)
    1: 
    1: dnl ========================================================
    1: dnl = Enable url-classifier
    1: dnl ========================================================
    1: dnl Implicitly enabled by default if building with safe-browsing
    1: if test -n "$MOZ_SAFE_BROWSING"; then
    1:     MOZ_URL_CLASSIFIER=1
    1: fi
    1: MOZ_ARG_ENABLE_BOOL(url-classifier,
    1: [  --enable-url-classifier        Enable url classifier module],
    1:     MOZ_URL_CLASSIFIER=1,
    1:     MOZ_URL_CLASSIFIER= )
    1: if test -n "$MOZ_URL_CLASSIFIER"; then
    1:     AC_DEFINE(MOZ_URL_CLASSIFIER)
    1: fi
    1: AC_SUBST(MOZ_URL_CLASSIFIER)
    1: 
    1: dnl ========================================================
 5928: dnl = Disable zipwriter
 5928: dnl ========================================================
 5928: MOZ_ARG_DISABLE_BOOL(zipwriter,
 5928: [  --disable-zipwriter             Disable zipwriter component],
 5928:     MOZ_ZIPWRITER=,
 5928:     MOZ_ZIPWRITER=1 )
 5928: AC_SUBST(MOZ_ZIPWRITER)
 5928: 
 5928: dnl ========================================================
    1: dnl = Enable Ultrasparc specific optimizations for JS
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(js-ultrasparc,
    1: [  --enable-js-ultrasparc  Use UltraSPARC optimizations in JS],
    1:     JS_ULTRASPARC_OPTS=1,
    1:     JS_ULTRASPARC_OPTS= )
    1: 
    1: dnl only enable option for ultrasparcs
    1: if test `echo "$target_os" | grep -c \^solaris 2>/dev/null` = 0 -o \
    1:     "$OS_TEST" != "sun4u"; then
    1:     JS_ULTRASPARC_OPTS=
    1: fi
    1: AC_SUBST(JS_ULTRASPARC_OPTS)
    1: 
    1: dnl ========================================================
16570: dnl = Hildon and OSSO checks
16570: dnl ========================================================
19108: PKG_CHECK_MODULES(LIBHILDONMIME,libhildonmime,
19108:                   MOZ_PLATFORM_HILDON=1,
19108:                   MOZ_PLATFORM_HILDON=)
19108: if test $MOZ_PLATFORM_HILDON; then
19108:    AC_DEFINE(MOZ_PLATFORM_HILDON)
25500:    X11_COMPOSITED_PLUGINS="yes"
16570: fi
19109: AC_SUBST(LIBHILDONMIME_CFLAGS)
19109: AC_SUBST(LIBHILDONMIME_LIBS)
16570: 
25500: if test "$X11_COMPOSITED_PLUGINS" = "yes"; then
25500:     dnl if we have Xcomposite we should also have Xdamage and Xfixes
25500:     AC_CHECK_HEADERS([X11/extensions/Xdamage.h], [],
25500:                      [AC_MSG_ERROR([Couldn't find X11/extentsions/Xdamage.h which is required for composited plugins.])])
25500:     AC_CHECK_LIB(Xcomposite, XCompositeRedirectWindow, [XCOMPOSITE_LIBS="-lXcomposite -lXdamage -lXfixes"],
25500:                  [MISSING_X="$MISSING_X -lXcomposite"], $XLIBS)
25500: fi
25500: AC_SUBST(XCOMPOSITE_LIBS)
25500: 
16570: PKG_CHECK_MODULES(LIBOSSO,libosso,
16570:                   NS_OSSO=1,
16570:                   NS_OSSO=)
16570: 
16570: if test $NS_OSSO; then
16570:     if test -z "$MOZ_ENABLE_DBUS"; then
16570:         AC_MSG_ERROR([DBus is required when building for OSSO])
16570:     fi
16570:     AC_DEFINE(NS_OSSO)
24388:     MOZ_GFX_OPTIMIZE_MOBILE=1
16570: fi
19109: AC_SUBST(LIBOSSO_CFLAGS)
19109: AC_SUBST(LIBOSSO_LIBS)
16570: 
19213: PKG_CHECK_MODULES(MOZ_LOCATION, [liblocation gpsbt],
19213:                   NS_MAEMO_LOCATION=1,
19213:                   NS_MAEMO_LOCATION=)
19213: 
19213: if test $NS_MAEMO_LOCATION; then
19213:   AC_DEFINE(NS_MAEMO_LOCATION)
19213: fi
19213: 
19213: AC_SUBST(MOZ_LOCATION_CFLAGS)
19213: AC_SUBST(MOZ_LOCATION_LIBS)
19213: 
16570: dnl ========================================================
    1: dnl =
    1: dnl = Feature options that require extra sources to be pulled
    1: dnl =
    1: dnl ========================================================
    1: dnl MOZ_ARG_HEADER(Features that require extra sources)
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Debugging Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Debugging and Optimizations)
    1: 
    1: dnl ========================================================
    1: dnl = Disable building with debug info.
    1: dnl = Debugging is OFF by default
    1: dnl ========================================================
    1: if test -z "$MOZ_DEBUG_FLAGS"
    1: then
    1:     case "$target" in
    1:     *-irix*)
    1:         if test "$GNU_CC"; then
    1:             GCC_VERSION=`$CC -v 2>&1 | awk '/version/ { print $3 }'`
    1:             case "$GCC_VERSION" in
    1:             2.95.*)
    1:                 MOZ_DEBUG_FLAGS=""
    1:                 ;;
    1:             *)
    1:                 MOZ_DEBUG_FLAGS="-g"
    1:                 ;;
    1:             esac
    1:         else
    1:             MOZ_DEBUG_FLAGS="-g"
    1:         fi
    1:         ;;
    1:     *)
    1:     	MOZ_DEBUG_FLAGS="-g"
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(debug,
    1: [  --enable-debug[=DBG]    Enable building with developer debug info
    1:                           (Using compiler flags DBG)],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_DEBUG=1
    1:     if test -n "$enableval" && test "$enableval" != "yes"; then
    1:         MOZ_DEBUG_FLAGS=`echo $enableval | sed -e 's|\\\ | |g'`
    1:     fi
    1:   else
    1:     MOZ_DEBUG=
    1:   fi ],
    1:   MOZ_DEBUG=)
    1: 
    1: MOZ_DEBUG_ENABLE_DEFS="-DDEBUG -D_DEBUG"
    1:  case "${target_os}" in
    1:     beos*)
    1:         MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_${USER}"
    1:         ;;
    1:     msvc*|mks*|cygwin*|mingw*|os2*|wince*)
    1:         MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_`echo ${USERNAME} | sed -e 's| |_|g'`"
    1:         ;;
    1:     *) 
    1:         MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DDEBUG_`$WHOAMI`"
    1:         ;;
    1:   esac
    1: MOZ_DEBUG_ENABLE_DEFS="$MOZ_DEBUG_ENABLE_DEFS -DTRACING"
    1: 
    1: MOZ_DEBUG_DISABLE_DEFS="-DNDEBUG -DTRIMMED"
    1: 
    1: if test -n "$MOZ_DEBUG"; then
    1:     AC_MSG_CHECKING([for valid debug flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_DEBUG_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_DEBUG_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: 
    1: dnl ========================================================
24388: dnl enable mobile optimizations
24388: dnl ========================================================
24388: MOZ_ARG_ENABLE_BOOL(mobile-optimize,
24388: [  --enable-mobile-optimize   Enable mobile optimizations],
24388:     MOZ_GFX_OPTIMIZE_MOBILE=1)
24388: 
24388: AC_SUBST(MOZ_GFX_OPTIMIZE_MOBILE)
24388: 
24388: if test "$MOZ_GFX_OPTIMIZE_MOBILE"; then
24388:     AC_DEFINE(MOZ_GFX_OPTIMIZE_MOBILE)
24388: fi
24388: 
24388: dnl ========================================================
    1: dnl = Enable code optimization. ON by default.
    1: dnl ========================================================
    1: if test -z "$MOZ_OPTIMIZE_FLAGS"; then
    1: 	MOZ_OPTIMIZE_FLAGS="-O"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(optimize,
    1: [  --disable-optimize      Disable compiler optimization
    1:   --enable-optimize=[OPT] Specify compiler optimization flags [OPT=-O]],
    1: [ if test "$enableval" != "no"; then
    1:     MOZ_OPTIMIZE=1
    1:     if test -n "$enableval" && test "$enableval" != "yes"; then
    1:         MOZ_OPTIMIZE_FLAGS=`echo "$enableval" | sed -e 's|\\\ | |g'`
    1:         MOZ_OPTIMIZE=2
    1:     fi
    1: else
    1:     MOZ_OPTIMIZE=
    1: fi ], MOZ_OPTIMIZE=1)
    1: 
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test -n "$MOZ_OPTIMIZE"; then
    1:     AC_MSG_CHECKING([for valid optimization flags])
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $MOZ_OPTIMIZE_FLAGS"
    1:     AC_TRY_COMPILE([#include <stdio.h>], 
    1:         [printf("Hello World\n");],
    1:         _results=yes,
    1:         _results=no)
    1:     AC_MSG_RESULT([$_results])
    1:     if test "$_results" = "no"; then
    1:         AC_MSG_ERROR([These compiler flags are invalid: $MOZ_OPTIMIZE_FLAGS])
    1:     fi
    1:     CFLAGS=$_SAVE_CFLAGS
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: AC_SUBST(MOZ_OPTIMIZE)
    1: AC_SUBST(MOZ_OPTIMIZE_FLAGS)
    1: AC_SUBST(MOZ_OPTIMIZE_LDFLAGS)
13134: AC_SUBST(MOZ_OPTIMIZE_SIZE_TWEAK)
    1: 
    1: dnl ========================================================
    1: dnl = Enable/disable debug for specific modules only
    1: dnl =   module names beginning with ^ will be disabled 
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(debug-modules,
    1: [  --enable-debug-modules  Enable/disable debug info for specific modules],
    1: [ MOZ_DEBUG_MODULES=`echo $enableval| sed 's/,/ /g'` ] )
    1: 
    1: dnl ========================================================
    1: dnl = Enable/disable generation of debugger info for specific modules only
    1: dnl =    the special module name ALL_MODULES can be used to denote all modules
    1: dnl =    module names beginning with ^ will be disabled
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_STRING(debugger-info-modules,
    1: [  --enable-debugger-info-modules
    1:                           Enable/disable debugger info for specific modules],
    1: [ for i in `echo $enableval | sed 's/,/ /g'`; do
    1:       dnl note that the list of module names is reversed as it is copied
    1:       dnl this is important, as it will allow config.mk to interpret stuff like
    1:       dnl "^ALL_MODULES xpcom" properly
    1:       if test "$i" = "no"; then
    1:         i="^ALL_MODULES"
    1:       fi
    1:       if test "$i" = "yes"; then
    1:         i="ALL_MODULES"
    1:       fi
    1:       MOZ_DBGRINFO_MODULES="$i $MOZ_DBGRINFO_MODULES";
    1:     done ])
    1: 
    1: dnl ========================================================
    1: dnl Enable garbage collector
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(boehm,
    1: [  --enable-boehm          Enable the Boehm Garbage Collector],
    1:     GC_LEAK_DETECTOR=1,
    1:     GC_LEAK_DETECTOR= )
    1: if test -n "$GC_LEAK_DETECTOR"; then
    1:     AC_DEFINE(GC_LEAK_DETECTOR)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Disable runtime logging checks
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(logging,
    1: [  --disable-logging       Disable logging facilities],
    1:     NS_DISABLE_LOGGING=1,
    1:     NS_DISABLE_LOGGING= )
    1: if test "$NS_DISABLE_LOGGING"; then
    1:     AC_DEFINE(NS_DISABLE_LOGGING)
    1: else
    1:     AC_DEFINE(MOZ_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = dnl This will enable logging of addref, release, ctor, dtor.
    1: dnl ========================================================
    1: _ENABLE_LOGREFCNT=42
    1: MOZ_ARG_ENABLE_BOOL(logrefcnt,
    1: [  --enable-logrefcnt      Enable logging of refcounts (default=debug) ],
    1:     _ENABLE_LOGREFCNT=1,
    1:     _ENABLE_LOGREFCNT= )
    1: if test "$_ENABLE_LOGREFCNT" = "1"; then
    1:     AC_DEFINE(FORCE_BUILD_REFCNT_LOGGING)
    1: elif test -z "$_ENABLE_LOGREFCNT"; then
    1:     AC_DEFINE(NO_BUILD_REFCNT_LOGGING)
    1: fi
    1: 
    1: dnl ========================================================
11612: dnl = Enable trace malloc
11612: dnl ========================================================
11612: NS_TRACE_MALLOC=${MOZ_TRACE_MALLOC}
11612: MOZ_ARG_ENABLE_BOOL(trace-malloc,
11612: [  --enable-trace-malloc   Enable malloc tracing],
11612:     NS_TRACE_MALLOC=1,
11612:     NS_TRACE_MALLOC= )
11612: if test "$NS_TRACE_MALLOC"; then
11612:   # Please, Mr. Linker Man, don't take away our symbol names
11612:   MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
11612:   USE_ELF_DYNSTR_GC=
11612:   AC_DEFINE(NS_TRACE_MALLOC)
11612: fi
11612: AC_SUBST(NS_TRACE_MALLOC)
11612: 
11612: dnl ========================================================
11612: dnl = Enable jemalloc
11227: dnl ========================================================
11227: MOZ_ARG_ENABLE_BOOL(jemalloc,
11227: [  --enable-jemalloc       Replace memory allocator with jemalloc],
11227:     MOZ_MEMORY=1,
11227:     MOZ_MEMORY=)
11612: 
11612: if test "$NS_TRACE_MALLOC"; then
11612:     MOZ_MEMORY=
11612: fi
11612: 
11227: if test "$MOZ_MEMORY"; then
11227: 
11227:   dnl Don't try to run compiler tests on Windows  
11227:   if test "$OS_ARCH" = "WINNT"; then
11227:     if test -z "$HAVE_64BIT_OS"; then
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:     else
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:     fi
11227:   else
11227:     AC_CHECK_SIZEOF([int *], [4])
11227:     case "${ac_cv_sizeof_int_p}" in
11227:     4)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 2)
11227:       ;;
11227:     8)
11227:       AC_DEFINE_UNQUOTED([MOZ_MEMORY_SIZEOF_PTR_2POW], 3)
11227:       ;;
11227:     *)
11227:       AC_MSG_ERROR([Unexpected pointer size])
11227:       ;;
11227:     esac
11227:   fi
11227: 
11227:   AC_DEFINE(MOZ_MEMORY)
11227:   if test "x$MOZ_DEBUG" = "x1"; then
11227:     AC_DEFINE(MOZ_MEMORY_DEBUG)
11227:   fi
11227:   dnl The generic feature tests that determine how to compute ncpus are long and
11227:   dnl complicated.  Therefore, simply define special cpp variables for the
11227:   dnl platforms we have special knowledge of.
11227:   case "${target_os}" in
11227:   darwin*)
11227:     AC_DEFINE(MOZ_MEMORY_DARWIN)
11227:     ;;
20253:   *freebsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
11227:   *linux*)
11227:     AC_DEFINE(MOZ_MEMORY_LINUX)
11227:     ;;
11227:   netbsd*)
11227:     AC_DEFINE(MOZ_MEMORY_BSD)
11227:     ;;
11227:   solaris*)
11227:     AC_DEFINE(MOZ_MEMORY_SOLARIS)
11227:     ;;
11227:   msvc*|mks*|cygwin*|mingw*)
11227:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
11227:     dnl XXX: should test for vc8sp1 here, otherwise patching the crt src
11227:     dnl will fail miserably
11227:     if test "$_CC_SUITE" -lt "8"; then
11227:         AC_MSG_ERROR([Building jemalloc requires Visual C++ 2005 or better])
11227:     fi
11227:     if test -z "$WIN32_CRT_SRC_DIR" -a -z "$WIN32_CUSTOM_CRT_DIR"; then
11227:       if test -z "$VCINSTALLDIR" -o ! -d "$VCINSTALLDIR"; then
11227:         AC_MSG_ERROR([When building jemalloc, either set WIN32_CRT_SRC_DIR to the path to the Visual C++ CRT source (usually VCINSTALLDIR\crt\src), or set WIN32_CUSTOM_CRT_DIR to the path to a folder containing a pre-built CRT DLL.])
11227:       else
11227:         WIN32_CRT_SRC_DIR="$VCINSTALLDIR\crt\src"
11227:       fi
11227:     fi
11227:     if test -z "$WIN32_CRT_SRC_DIR"; then
11227:       # pre-built dll
11227:       WIN32_CUSTOM_CRT_DIR=`cd "$WIN32_CUSTOM_CRT_DIR" && pwd`
11227:       _WIN_UNIX_CRT_PATH="$WIN32_CUSTOM_CRT_DIR"
11227:     else
11227:       # CRT source directory
11227:       WIN32_CRT_SRC_DIR=`cd "$WIN32_CRT_SRC_DIR" && pwd`
11227:       _CRT_BASE_DIR=`basename "$WIN32_CRT_SRC_DIR"`
11227:       _WIN_UNIX_CRT_PATH="$_objdir/memory/jemalloc/$_CRT_BASE_DIR/build/intel"
11227:     fi
11227:     dnl need win32 paths in LIB, hence this python abuse.  extra brackets
11227:     dnl are to avoid m4
11227:     _WIN_CRT_PATH=[`$PYTHON -c 'import sys, os.path; print os.path.normpath(sys.argv[1])' "$_WIN_UNIX_CRT_PATH"`]
11227:     MOZ_LIB="$_WIN_CRT_PATH;$LIB"
11227:     dnl Needs to be in PATH too, since our tools will wind up linked against it.
11227:     dnl This needs to be unix style.
11227:     MOZ_PATH="$PATH:$_WIN_UNIX_CRT_PATH"
11945:     dnl Statically link the C++ stdlib.  We only use this for Breakpad anyway.
11945:     AC_DEFINE(_STATIC_CPPLIB)
11945:     dnl Don't generate a manifest, since we're linking to a custom CRT.
11945:     LDFLAGS="$LDFLAGS -MANIFEST:NO"
12206:     dnl Also pass this to NSPR/NSS
12206:     DLLFLAGS="$DLLFLAGS -MANIFEST:NO"
12206:     export DLLFLAGS
11227:     ;;
26487:   *wince)
26487:     AC_DEFINE(MOZ_MEMORY_WINCE)
26487:     AC_DEFINE(MOZ_MEMORY_WINDOWS)
26487:     ;;
11227:   *)
11227:     AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
11227:     ;;
11227:   esac
11227: fi
11227: AC_SUBST(MOZ_MEMORY)
11227: AC_SUBST(WIN32_CRT_SRC_DIR)
11227: AC_SUBST(WIN32_CUSTOM_CRT_DIR)
11227: AC_SUBST(MOZ_LIB)
11227: AC_SUBST(MOZ_PATH)
12206: dnl Need to set this for make because NSS doesn't have configure
12206: AC_SUBST(DLLFLAGS)
11227: 
11227: dnl ========================================================
    1: dnl = Use malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(wrap-malloc,
    1: [  --enable-wrap-malloc    Wrap malloc calls (gnu linker only)],
    1:     _WRAP_MALLOC=1,
    1:     _WRAP_MALLOC= )
    1: 
    1: if test -n "$_WRAP_MALLOC"; then
    1:     if test "$GNU_CC"; then
    1:     WRAP_MALLOC_CFLAGS="${LDFLAGS} -Wl,--wrap -Wl,malloc -Wl,--wrap -Wl,free -Wl,--wrap -Wl,realloc -Wl,--wrap -Wl,__builtin_new -Wl,--wrap -Wl,__builtin_vec_new -Wl,--wrap -Wl,__builtin_delete -Wl,--wrap -Wl,__builtin_vec_delete -Wl,--wrap -Wl,PR_Free -Wl,--wrap -Wl,PR_Malloc -Wl,--wrap -Wl,PR_Calloc -Wl,--wrap -Wl,PR_Realloc"
    1:     MKSHLIB='$(CXX) $(DSO_LDOPTS) $(WRAP_MALLOC_CFLAGS) -o $@'
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Location of malloc wrapper lib
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(wrap-malloc,
    1: [  --with-wrap-malloc=DIR  Location of malloc wrapper library],
    1:     WRAP_MALLOC_LIB=$withval)
    1: 
    1: dnl ========================================================
25902: dnl = Use Valgrind
25902: dnl ========================================================
25902: MOZ_ARG_ENABLE_BOOL(valgrind,
25902: [  --enable-valgrind       Enable Valgrind integration hooks (default=no)],
25902:     MOZ_VALGRIND=1,
25902:     MOZ_VALGRIND= )
25902: if test -n "$MOZ_VALGRIND"; then
25902:     AC_CHECK_HEADER([valgrind/valgrind.h], [],
25902:         AC_MSG_ERROR(
25902:             [--enable-valgrind specified but Valgrind is not installed]))
25902:     AC_DEFINE(MOZ_VALGRIND)
25902: fi
25902: 
25902: dnl ========================================================
    1: dnl = Use Electric Fence
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(efence,
    1: [  --enable-efence         Link with Electric Fence],
    1:     _ENABLE_EFENCE=1,
    1:     _ENABLE_EFENCE= )
    1: if test -n "$_ENABLE_EFENCE"; then
    1:     AC_CHECK_LIB(efence,malloc)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl jprof
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(jprof,
    1: [  --enable-jprof          Enable jprof profiling tool (needs mozilla/tools/jprof)],
    1:     MOZ_JPROF=1,
    1:     MOZ_JPROF= )
    1: if test -n "$MOZ_JPROF"; then
    1:     AC_DEFINE(MOZ_JPROF)
    1: fi
    1: 
10339: dnl ========================================================
10339: dnl shark
10339: dnl ========================================================
10339: MOZ_ARG_ENABLE_BOOL(shark,
10339: [  --enable-shark          Enable shark remote profiling (needs CHUD framework)],
10339:     MOZ_SHARK=1,
10339:     MOZ_SHARK= )
10339: if test -n "$MOZ_SHARK"; then
10339:     AC_DEFINE(MOZ_SHARK)
10339: fi
    1: 
    1: dnl ========================================================
15763: dnl callgrind
15763: dnl ========================================================
15763: MOZ_ARG_ENABLE_BOOL(callgrind,
15763: [  --enable-callgrind      Enable callgrind profiling],
15763:     MOZ_CALLGRIND=1,
15763:     MOZ_CALLGRIND= )
15763: if test -n "$MOZ_CALLGRIND"; then
15763:     AC_DEFINE(MOZ_CALLGRIND)
15763: fi
15763: 
15763: dnl ========================================================
16288: dnl vtune
16288: dnl ========================================================
16288: MOZ_ARG_ENABLE_BOOL(vtune,
16288: [  --enable-vtune          Enable vtune profiling],
16288:     MOZ_VTUNE=1,
16288:     MOZ_VTUNE= )
16288: if test -n "$MOZ_VTUNE"; then
16288:     AC_DEFINE(MOZ_VTUNE)
16288: fi
16288: 
16288: dnl ========================================================
23530: dnl Zealous JavaScript GC
23530: dnl ========================================================
23530: MOZ_ARG_ENABLE_BOOL(gczeal,
23530: [  --enable-gczeal          Enable zealous JavaScript GCing],
23530:     JS_GC_ZEAL=1,
23530:     JS_GC_ZEAL= )
23530: if test -n "$JS_GC_ZEAL"; then
23530:     AC_DEFINE(JS_GC_ZEAL)
23530: fi
23530: 
23530: dnl ========================================================
12116: dnl = Enable static checking using gcc-dehydra
12116: dnl ========================================================
12116: 
12116: MOZ_ARG_WITH_STRING(static-checking,
12116: [  --with-static-checking=path/to/gcc_dehydra.so
12116:                             Enable static checking of code using GCC-dehydra],
12116:     DEHYDRA_PATH=$withval,
12116:     DEHYDRA_PATH= )
12116: 
12116: if test -n "$DEHYDRA_PATH"; then
24371:     if test ! -f "$DEHYDRA_PATH"; then
12116:         AC_MSG_ERROR([The dehydra plugin is not at the specified path.])
12116:     fi
12116:     AC_DEFINE(NS_STATIC_CHECKING)
12116: fi
12116: AC_SUBST(DEHYDRA_PATH)
12116: 
12116: dnl ========================================================
    1: dnl = Enable stripping of libs & executables
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(strip,
    1: [  --enable-strip          Enable stripping of libs & executables ],
    1:     ENABLE_STRIP=1,
    1:     ENABLE_STRIP= )
    1: 
    1: dnl ========================================================
 4703: dnl = Enable stripping of libs & executables when packaging
 4703: dnl ========================================================
 4703: MOZ_ARG_ENABLE_BOOL(install-strip,
 4703: [  --enable-install-strip  Enable stripping of libs & executables when packaging ],
 4703:     PKG_SKIP_STRIP= ,
 4703:     PKG_SKIP_STRIP=1)
 4703: 
 4703: dnl ========================================================
    1: dnl = --enable-elf-dynstr-gc
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(elf-dynstr-gc,
    1: [  --enable-elf-dynstr-gc  Enable elf dynstr garbage collector (opt builds only)],
    1:     USE_ELF_DYNSTR_GC=1,
    1:     USE_ELF_DYNSTR_GC= )
    1: 
    1: dnl ========================================================
    1: dnl = --enable-old-abi-compat-wrappers
    1: dnl ========================================================
    1: dnl on x86 linux, the current builds of some popular plugins (notably
    1: dnl flashplayer and real) expect a few builtin symbols from libgcc
    1: dnl which were available in some older versions of gcc.  However,
    1: dnl they're _NOT_ available in newer versions of gcc (eg 3.1), so if
    1: dnl we want those plugin to work with a gcc-3.1 built binary, we need
    1: dnl to provide these symbols.  MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS defaults
    1: dnl to true on x86 linux, and false everywhere else.
    1: dnl
    1: 
    1: MOZ_ARG_ENABLE_BOOL(old-abi-compat-wrappers,
    1: [  --enable-old-abi-compat-wrappers
    1:                           Support old GCC ABI symbols to ease the pain 
    1:                           of the linux compiler change],
    1:     MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS=1,
    1:     MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS= )
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS"; then
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     AC_CHECK_FUNCS(__builtin_vec_new __builtin_vec_delete __builtin_new __builtin_delete __pure_virtual)
    1:     AC_LANG_RESTORE
    1:     AC_DEFINE(MOZ_ENABLE_OLD_ABI_COMPAT_WRAPPERS)
    1: fi
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl ========================================================
    1: dnl = 
    1: dnl = Profiling and Instrumenting
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Profiling and Instrumenting)
    1: 
    1: dnl ========================================================
    1: dnl = Enable timeline service, which provides lightweight
    1: dnl = instrumentation of mozilla for performance measurement.
    1: dnl = Timeline is off by default.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(timeline,
    1: [  --enable-timeline       Enable timeline services ],
    1:     MOZ_TIMELINE=1,
    1:     MOZ_TIMELINE= )
    1: if test -n "$MOZ_TIMELINE"; then
    1:     AC_DEFINE(MOZ_TIMELINE)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Turn on reflow counting
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(reflow-perf,
    1: [  --enable-reflow-perf    Enable reflow performance tracing],
    1:     MOZ_REFLOW_PERF=1,
    1:     MOZ_REFLOW_PERF= )
    1: if test -n "$MOZ_REFLOW_PREF"; then
    1:     AC_DEFINE(MOZ_REFLOW_PREF)
    1: fi
    1: AC_SUBST(MOZ_REFLOW_PERF)
    1: 
    1: dnl ========================================================
    1: dnl Enable performance metrics.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(perf-metrics,
    1: [  --enable-perf-metrics   Enable performance metrics],
    1:     MOZ_PERF_METRICS=1,
    1:     MOZ_PERF_METRICS= )
    1: if test -n "$MOZ_PERF_METRICS"; then
    1:     AC_DEFINE(MOZ_PERF_METRICS)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Enable code size metrics.
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(codesighs,
    1: [  --enable-codesighs      Enable code size analysis tools],
    1:     _ENABLE_CODESIGHS=1,
    1:     _ENABLE_CODESIGHS= )
    1: if test -n "$_ENABLE_CODESIGHS"; then
    1:     if test -d $srcdir/tools/codesighs; then 
    1:         MOZ_MAPINFO=1
    1:     else
    1:         AC_MSG_ERROR([Codesighs directory $srcdir/tools/codesighs required.])
    1:     fi
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Add support for Eazel profiler
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(eazel-profiler-support,
    1: [  --enable-eazel-profiler-support
    1:                           Enable Corel/Eazel profiler support],
    1:     ENABLE_EAZEL_PROFILER=1,
    1:     ENABLE_EAZEL_PROFILER= )
    1: if test -n "$ENABLE_EAZEL_PROFILER"; then
    1:     AC_DEFINE(ENABLE_EAZEL_PROFILER)
    1:     USE_ELF_DYNSTR_GC=
    1:     MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
    1:     EAZEL_PROFILER_CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES  -D__NO_MATH_INLINES"
    1:     EAZEL_PROFILER_LIBS="-lprofiler -lpthread"
    1: fi
    1: 
    1: MOZ_ARG_ENABLE_STRING(profile-modules,
    1: [  --enable-profile-modules
    1:                           Enable/disable profiling for specific modules],
    1: [ MOZ_PROFILE_MODULES=`echo $enableval| sed 's/,/ /g'` ] )
    1: 
    1: MOZ_ARG_ENABLE_BOOL(insure,
    1: [  --enable-insure         Enable insure++ instrumentation (linux only)],
    1:     _ENABLE_INSURE=1,
    1:     _ENABLE_INSURE= )
    1: if test -n "$_ENABLE_INSURE"; then
    1:     MOZ_INSURE="insure"
    1:     MOZ_INSURIFYING=1
    1:     MOZ_INSURE_DIRS="."
    1:     MOZ_INSURE_EXCLUDE_DIRS="config"
    1: fi
    1: 
    1: MOZ_ARG_WITH_STRING(insure-dirs,
    1: [  --with-insure-dirs=DIRS
    1:                           Dirs to instrument with insure ],
    1:     MOZ_INSURE_DIRS=$withval )
    1: 
    1: MOZ_ARG_WITH_STRING(insure-exclude-dirs,
    1: [  --with-insure-exclude-dirs=DIRS
    1:                           Dirs to not instrument with insure ],
    1:     MOZ_INSURE_EXCLUDE_DIRS="config $withval" )
    1: 
    1: dnl ========================================================
    1: dnl = Support for Quantify (Windows)
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(quantify,
    1: [  --enable-quantify      Enable Quantify support (Windows only) ],
    1:     MOZ_QUANTIFY=1,
    1:     MOZ_QUANTIFY= )
    1: 
    1: dnl ========================================================
    1: dnl = Support for demangling undefined symbols
    1: dnl ========================================================
    1: if test -z "$SKIP_LIBRARY_CHECKS"; then
    1:     AC_LANG_SAVE
    1:     AC_LANG_CPLUSPLUS
    1:     AC_CHECK_FUNCS(__cxa_demangle, HAVE_DEMANGLE=1, HAVE_DEMANGLE=)
    1:     AC_LANG_RESTORE
    1: fi
    1: 
    1: # Demangle only for debug or trace-malloc builds
    1: MOZ_DEMANGLE_SYMBOLS=
    1: if test "$HAVE_DEMANGLE" -a "$HAVE_GCC3_ABI" && test "$MOZ_DEBUG" -o "$NS_TRACE_MALLOC"; then
    1:     MOZ_DEMANGLE_SYMBOLS=1
    1:     AC_DEFINE(MOZ_DEMANGLE_SYMBOLS)
    1: fi
    1: AC_SUBST(MOZ_DEMANGLE_SYMBOLS)
    1: 
 7836: dnl ========================================================
 7836: dnl = Support for gcc stack unwinding (from gcc 3.3)
 7836: dnl ========================================================
 7836: if test "$HAVE_GCC3_ABI" && test -z "$SKIP_LIBRARY_CHECKS"; then
 8359:     AC_CHECK_HEADER(unwind.h, AC_CHECK_FUNCS(_Unwind_Backtrace))
 7836: fi
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Misc. Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Misc. Options)
    1: 
    1: dnl ========================================================
    1: dnl update xterm title
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(xterm-updates,
    1: [  --enable-xterm-updates  Update XTERM titles with current command.],
    1:     MOZ_UPDATE_XTERM=1,
    1:     MOZ_UPDATE_XTERM= )
    1: 
    1: dnl =========================================================
    1: dnl = Chrome format
    1: dnl =========================================================
    1: MOZ_ARG_ENABLE_STRING([chrome-format],
    1: [  --enable-chrome-format=jar|flat|both|symlink
    1:                           Select FORMAT of chrome files (default=jar)],
    1:     MOZ_CHROME_FILE_FORMAT=`echo $enableval | tr A-Z a-z`)
    1: 
    1: if test -z "$MOZ_CHROME_FILE_FORMAT"; then
    1:     MOZ_CHROME_FILE_FORMAT=jar
    1: fi
    1: 
    1: if test "$MOZ_CHROME_FILE_FORMAT" != "jar" && 
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "flat" &&
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "symlink" &&
    1:     test "$MOZ_CHROME_FILE_FORMAT" != "both"; then
    1:     AC_MSG_ERROR([--enable-chrome-format must be set to either jar, flat, both, or symlink])
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl = Define default location for MOZILLA_FIVE_HOME
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(default-mozilla-five-home,
    1: [  --with-default-mozilla-five-home
    1:                           Set the default value for MOZILLA_FIVE_HOME],
    1: [ val=`echo $withval`
    1:   AC_DEFINE_UNQUOTED(MOZ_DEFAULT_MOZILLA_FIVE_HOME,"$val") ])
    1: 
    1: dnl ========================================================
    1: dnl = Location of the mozilla user directory (default is ~/.mozilla).],
    1: dnl ========================================================
    1: MOZ_ARG_WITH_STRING(user-appdir,
    1: [  --with-user-appdir=DIR  Set user-specific appdir (default=.mozilla)],
    1: [ val=`echo $withval`
    1: if echo "$val" | grep "\/" >/dev/null; then
    1:     AC_MSG_ERROR("Homedir must be single relative path.")
    1: else 
    1:     MOZ_USER_DIR="$val"
    1: fi])
    1: 
    1: AC_DEFINE_UNQUOTED(MOZ_USER_DIR,"$MOZ_USER_DIR")
    1: 
    1: dnl ========================================================
    1: dnl = Doxygen configuration
    1: dnl ========================================================
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INPUT_DIRS='./dist/include ./dist/idl'
    1: MOZ_ARG_WITH_STRING(doc-input-dirs,
    1: [  --with-doc-input-dirs=DIRS
    1:                           Header/idl dirs to create docs from],
    1: [ MOZ_DOC_INPUT_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INPUT_DIRS)
    1: 
    1: dnl Use commas to specify multiple dirs to this arg
    1: MOZ_DOC_INCLUDE_DIRS='./dist/include ./dist/include/nspr'
    1: MOZ_ARG_WITH_STRING(doc-include-dirs,
    1: [  --with-doc-include-dirs=DIRS  
    1:                           Include dirs to preprocess doc headers],
    1: [ MOZ_DOC_INCLUDE_DIRS=`echo "$withval" | sed "s/,/ /g"` ] )
    1: AC_SUBST(MOZ_DOC_INCLUDE_DIRS)
    1: 
    1: MOZ_DOC_OUTPUT_DIR='./dist/docs'
    1: MOZ_ARG_WITH_STRING(doc-output-dir,
    1: [  --with-doc-output-dir=DIR
    1:                           Dir to generate docs into],
    1: [ MOZ_DOC_OUTPUT_DIR=$withval ] )
    1: AC_SUBST(MOZ_DOC_OUTPUT_DIR)
    1: 
    1: if test -z "$SKIP_COMPILER_CHECKS"; then
    1: dnl ========================================================
    1: dnl =
    1: dnl = Compiler Options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Compiler Options)
    1: 
    1: dnl ========================================================
    1: dnl Check for gcc -pipe support
    1: dnl ========================================================
    1: AC_MSG_CHECKING([for gcc -pipe support])
    1: if test -n "$GNU_CC" && test -n "$GNU_CXX" && test -n "$GNU_AS"; then
    1:     echo '#include <stdio.h>' > dummy-hello.c
    1:     echo 'int main() { printf("Hello World\n"); exit(0); }' >> dummy-hello.c
    1:     ${CC} -S dummy-hello.c -o dummy-hello.s 2>&5
    1:     cat dummy-hello.s | ${AS_BIN} -o dummy-hello.S - 2>&5
    1:     if test $? = 0; then
    1:         _res_as_stdin="yes"
    1:     else
    1:         _res_as_stdin="no"
    1:     fi
    1:     if test "$_res_as_stdin" = "yes"; then
    1:         _SAVE_CFLAGS=$CFLAGS
    1:         CFLAGS="$CFLAGS -pipe"
    1:         AC_TRY_COMPILE( [ #include <stdio.h> ],
    1:             [printf("Hello World\n");],
    1:             [_res_gcc_pipe="yes"],
    1:             [_res_gcc_pipe="no"] )
    1:         CFLAGS=$_SAVE_CFLAGS
    1:     fi
    1:     if test "$_res_as_stdin" = "yes" && test "$_res_gcc_pipe" = "yes"; then
    1:         _res="yes";
    1:         CFLAGS="$CFLAGS -pipe"
    1:         CXXFLAGS="$CXXFLAGS -pipe"
    1:     else
    1:         _res="no"
    1:     fi
    1:     rm -f dummy-hello.c dummy-hello.s dummy-hello.S dummy-hello a.out
    1:     AC_MSG_RESULT([$_res])
    1: else
    1:     AC_MSG_RESULT([no])
    1: fi
    1: 
    1: dnl pass -Wno-long-long to the compiler
    1: MOZ_ARG_ENABLE_BOOL(long-long-warning,
    1: [  --enable-long-long-warning 
    1:                           Warn about use of non-ANSI long long type],
    1:     _IGNORE_LONG_LONG_WARNINGS=,
    1:     _IGNORE_LONG_LONG_WARNINGS=1)
    1: 
    1: if test "$_IGNORE_LONG_LONG_WARNINGS"; then
    1:      _SAVE_CFLAGS="$CFLAGS"
    1:      CFLAGS="$CFLAGS ${_COMPILER_PREFIX}-Wno-long-long"
    1:      AC_MSG_CHECKING([whether compiler supports -Wno-long-long])
    1:      AC_TRY_COMPILE([], [return(0);], 
    1: 	[ _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} ${_COMPILER_PREFIX}-Wno-long-long"
    1: 	  _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-Wno-long-long"
    1: 	  result="yes" ], result="no")
    1:      AC_MSG_RESULT([$result])
    1:      CFLAGS="$_SAVE_CFLAGS"
    1: fi
    1: 
11977: dnl ========================================================
11977: dnl Profile guided optimization
11977: dnl ========================================================
    1: dnl Test for profiling options
    1: dnl Under gcc 3.3, use -fprofile-arcs/-fbranch-probabilities
    1: dnl Under gcc 3.4+, use -fprofile-generate/-fprofile-use
    1: 
12660: dnl Provide a switch to disable PGO even when called via profiledbuild.
12660: MOZ_ARG_DISABLE_BOOL(profile-guided-optimization,
12660: [  --disable-profile-guided-optimization
12660:                            Don't build with PGO even if called via make profiledbuild],
12660: MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE=1,
12660: MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE=)
12660: 
12660: AC_SUBST(MOZ_PROFILE_GUIDED_OPTIMIZE_DISABLE)
12660: 
    1: _SAVE_CFLAGS="$CFLAGS"
    1: CFLAGS="$CFLAGS -fprofile-generate"
    1: 
    1: AC_MSG_CHECKING([whether C compiler supports -fprofile-generate])
    1: AC_TRY_COMPILE([], [return 0;],
    1:                [ PROFILE_GEN_CFLAGS="-fprofile-generate"
    1:                  result="yes" ], result="no")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test $result = "yes"; then
11787:   PROFILE_GEN_LDFLAGS="-fprofile-generate"
    1:   PROFILE_USE_CFLAGS="-fprofile-use"
11787:   PROFILE_USE_LDFLAGS="-fprofile-use"
    1: else
    1:   CFLAGS="$_SAVE_CFLAGS -fprofile-arcs"
    1:   AC_MSG_CHECKING([whether C compiler supports -fprofile-arcs])
    1:   AC_TRY_COMPILE([], [return 0;],
    1:                  [ PROFILE_GEN_CFLAGS="-fprofile-arcs"
    1:                    result="yes" ], result="no")
    1:   AC_MSG_RESULT([$result])
    1:   if test $result = "yes"; then
    1:     PROFILE_USE_CFLAGS="-fbranch-probabilities"
    1:   fi
11787:   # don't really care, this is an old GCC
11787:   PROFILE_GEN_LDFLAGS=
11787:   PROFILE_USE_LDFLAGS=
    1: fi
    1: 
    1: CFLAGS="$_SAVE_CFLAGS"
    1: 
13273: if test -n "$INTEL_CC"; then
13232:   PROFILE_GEN_CFLAGS="-prof-gen -prof-dir ."
13232:   PROFILE_GEN_LDFLAGS=
13232:   PROFILE_USE_CFLAGS="-prof-use -prof-dir ."
13232:   PROFILE_USE_LDFLAGS=
13232: fi
13232: 
14124: dnl Sun Studio on Solaris
24783: if test "$SOLARIS_SUNPRO_CC"; then
14124:   PROFILE_GEN_CFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   PROFILE_GEN_LDFLAGS="-xprofile=collect:$_objdir/$enable_application"
14124:   if test "$CPU_ARCH" != "sparc"; then
14124:     PROFILE_USE_CFLAGS="-xprofile=use:$_objdir/$enable_application"
14124:     PROFILE_USE_LDFLAGS="-xprofile=use:$_objdir/$enable_application"
14124:   else
14124:     PROFILE_USE_CFLAGS="-xlinkopt=2 -xprofile=use:$_objdir/$enable_application"
14124:     PROFILE_USE_LDFLAGS="-xlinkopt=2 -xprofile=use:$_objdir/$enable_application"
14124:   fi
14124: fi
14124: 
    1: AC_SUBST(PROFILE_GEN_CFLAGS)
11787: AC_SUBST(PROFILE_GEN_LDFLAGS)
    1: AC_SUBST(PROFILE_USE_CFLAGS)
11787: AC_SUBST(PROFILE_USE_LDFLAGS)
    1: 
    1: AC_LANG_CPLUSPLUS
    1: 
    1: dnl ========================================================
    1: dnl Test for -pedantic bustage
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(pedantic,
    1: [  --disable-pedantic      Issue all warnings demanded by strict ANSI C ],
    1: _PEDANTIC= )
    1: if test "$_PEDANTIC"; then
    1:     _SAVE_CXXFLAGS=$CXXFLAGS
    1:     CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic"
    1:     AC_MSG_CHECKING([whether C++ compiler has -pedantic long long bug])
    1:     AC_TRY_COMPILE([$configure_static_assert_macros],
    1:                    [CONFIGURE_STATIC_ASSERT(sizeof(long long) == 8)],
    1:                    result="no", result="yes" )
    1:     AC_MSG_RESULT([$result])
    1:     CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1:     case "$result" in
    1:     no)
    1:         _WARNINGS_CFLAGS="${_WARNINGS_CFLAGS} ${_COMPILER_PREFIX}-pedantic"
    1:         _WARNINGS_CXXFLAGS="${_WARNINGS_CXXFLAGS} ${_COMPILER_PREFIX}-pedantic"
    1:         ;;
    1:     yes)
    1:         AC_MSG_ERROR([Your compiler appears to have a known bug where long long is miscompiled when using -pedantic.  Reconfigure using --disable-pedantic. ])
    1:         ;;
    1:     esac
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Test for correct temporary object destruction order
    1: dnl ========================================================
    1: dnl We want to make sure the compiler follows the C++ spec here as 
    1: dnl xpcom and the string classes depend on it (bug 235381).
    1: AC_MSG_CHECKING([for correct temporary object destruction order])
    1: AC_TRY_RUN([ class A {
    1:              public:  A(int& x) : mValue(x) {}
    1:                       ~A() { mValue--; }
    1:                       operator char**() { return 0; }
    1:              private:  int& mValue;
    1:              };
    1:              void func(char **arg) {}
    1:              int m=2;
    1:              void test() {
    1:                   func(A(m));
    1:                   if (m==1) m = 0;
    1:              }
    1:              int main() {
    1:                  test();
    1:                  return(m);
    1:              }
    1:              ],
    1:      result="yes", result="no", result="maybe")
    1: AC_MSG_RESULT([$result])
    1: 
    1: if test "$result" = "no"; then
    1:     AC_MSG_ERROR([Your compiler does not follow the C++ specification for temporary object destruction order.])
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl Autoconf test for gcc 2.7.2.x (and maybe others?) so that we don't
    1: dnl provide non-const forms of the operator== for comparing nsCOMPtrs to
    1: dnl raw pointers in nsCOMPtr.h.  (VC++ has the same bug.)
    1: dnl ========================================================
    1: _SAVE_CXXFLAGS=$CXXFLAGS
    1: CXXFLAGS="$CXXFLAGS ${_WARNINGS_CXXFLAGS}"
    1: AC_CACHE_CHECK(for correct overload resolution with const and templates,
    1:     ac_nscap_nonconst_opeq_bug,
    1:     [AC_TRY_COMPILE([
    1:                       template <class T>
    1:                       class Pointer
    1:                         {
    1:                         public:
    1:                           T* myPtr;
    1:                         };
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                       
    1:                       template <class T, class U>
    1:                       int operator==(const Pointer<T>& rhs, const U* lhs)
    1:                         {
    1:                           return rhs.myPtr == lhs;
    1:                         }
    1:                     ],
    1:                     [
    1:                       Pointer<int> foo;
    1:                       const int* bar;
    1:                       return foo == bar;
    1:                     ],
    1:                     ac_nscap_nonconst_opeq_bug="no",
    1:                     ac_nscap_nonconst_opeq_bug="yes")])
    1: CXXFLAGS="$_SAVE_CXXFLAGS"
    1: 
    1: if test "$ac_nscap_nonconst_opeq_bug" = "yes" ; then
    1:     AC_DEFINE(NSCAP_DONT_PROVIDE_NONCONST_OPEQ)
    1: fi
    1: fi # SKIP_COMPILER_CHECKS
    1: 
    1: dnl ========================================================
    1: dnl C++ rtti
    1: dnl Should be smarter and check that the compiler does indeed have rtti
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(cpp-rtti,
    1: [  --enable-cpp-rtti       Enable C++ RTTI ],
    1: [ _MOZ_USE_RTTI=1 ],
    1: [ _MOZ_USE_RTTI= ])
    1: 
    1: if test "$_MOZ_USE_RTTI"; then
    1:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_ON
    1: else
    1:    _MOZ_RTTI_FLAGS=$_MOZ_RTTI_FLAGS_OFF
    1: fi
    1: 
    1: AC_SUBST(_MOZ_RTTI_FLAGS_ON)
    1: 
    1: dnl ========================================================
    1: dnl C++ exceptions (g++/egcs only - for now)
    1: dnl Should be smarter and check that the compiler does indeed have exceptions
    1: dnl ========================================================
    1: MOZ_ARG_ENABLE_BOOL(cpp-exceptions,
    1: [  --enable-cpp-exceptions Enable C++ exceptions ],
    1: [ _MOZ_CPP_EXCEPTIONS=1 ],
    1: [ _MOZ_CPP_EXCEPTIONS= ])
    1: 
    1: if test "$_MOZ_CPP_EXCEPTIONS"; then
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_ON
    1: else
    1:     _MOZ_EXCEPTIONS_FLAGS=$_MOZ_EXCEPTIONS_FLAGS_OFF
    1: fi
    1: 
    1: # Irix & OSF native compilers do not like exception declarations 
    1: # when exceptions are disabled
    1: if test -n "$MIPSPRO_CXX" -o -n "$COMPAQ_CXX" -o -n "$VACPP"; then
    1:     AC_DEFINE(CPP_THROW_NEW, [])
    1: else
    1:     AC_DEFINE(CPP_THROW_NEW, [throw()])
    1: fi
    1: AC_LANG_C
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Build depencency options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Build dependencies)
    1: 
    1: dnl ========================================================
    1: dnl = Do not auto generate dependency info
    1: dnl ========================================================
    1: MOZ_AUTO_DEPS=1
    1: MOZ_ARG_DISABLE_BOOL(auto-deps,
    1: [  --disable-auto-deps     Do not automatically generate dependency info],
    1:     MOZ_AUTO_DEPS=,
    1:     MOZ_AUTO_DEPS=1)
    1: 
    1: if test -n "$MOZ_AUTO_DEPS"; then
    1: dnl ========================================================
    1: dnl = Use mkdepend instead of $CC -MD for dependency generation
    1: dnl ========================================================
    1: _cpp_md_flag=
    1: MOZ_ARG_DISABLE_BOOL(md,
    1: [  --disable-md            Do not use compiler-based dependencies ],
    1:   [_cpp_md_flag=],
    1:   [_cpp_md_flag=1],
    1:   [dnl Default is to turn on -MD if using GNU-compatible compilers
    1:    if test "$GNU_CC" -a "$GNU_CXX" -a "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "WINCE"; then
    1:      _cpp_md_flag=1
 4766:    fi
 4766:   dnl Default is to use -xM if using Sun Studio on Solaris
24783:    if test "$SOLARIS_SUNPRO_CC"; then
 4766:      _cpp_md_flag=1
    1:    fi])
    1: if test "$_cpp_md_flag"; then
    1:   COMPILER_DEPEND=1
    1:   if test "$OS_ARCH" = "OpenVMS"; then
19840:     _DEPEND_CFLAGS='$(subst =, ,$(filter-out %/.pp,-MM=-MD=-MF=$(MDDEPDIR)/$(basename $(@F)).pp))'
19840:   else
19840:     _DEPEND_CFLAGS='$(filter-out %/.pp,-Wp,-MD,$(MDDEPDIR)/$(basename $(@F)).pp)'
    1:   fi
 4766:   dnl Sun Studio on Solaris use -xM instead of -MD, see config/rules.mk
24783:   if test "$SOLARIS_SUNPRO_CC"; then
 4766:     _DEPEND_CFLAGS=
 4766:   fi
    1: else
    1:   COMPILER_DEPEND=
    1:   _USE_CPP_INCLUDE_FLAG=
    1:   _DEFINES_CFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1:   _DEFINES_CXXFLAGS='$(ACDEFINES) -D_MOZILLA_CONFIG_H_ -DMOZILLA_CLIENT'
    1: fi
    1: fi # MOZ_AUTO_DEPS
    1: MDDEPDIR='.deps'
    1: AC_SUBST(MOZ_AUTO_DEPS)
    1: AC_SUBST(COMPILER_DEPEND)
    1: AC_SUBST(MDDEPDIR)
    1: 
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Static Build Options
    1: dnl =
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Static build options)
    1: 
    1: MOZ_ARG_ENABLE_BOOL(static,
    1: [  --enable-static         Enable building of internal static libs],
    1:     BUILD_STATIC_LIBS=1,
    1:     BUILD_STATIC_LIBS=)
    1: 
 6044: dnl Disable libxul in debug builds, but not for xulrunner.
 6044: if test -n "$MOZ_DEBUG" -a "$MOZ_BUILD_APP" != "xulrunner"; then
 3158:    MOZ_ENABLE_LIBXUL=
 3158: fi
 3158: 
    1: MOZ_ARG_ENABLE_BOOL(libxul,
    1: [  --enable-libxul         Enable building of libxul],
    1:     MOZ_ENABLE_LIBXUL=1,
    1:     MOZ_ENABLE_LIBXUL=)
    1: 
19017: if test -n "$MOZ_STATIC_BUILD_UNSUPPORTED" -a -n "$BUILD_STATIC_LIBS"; then
19017: 	AC_MSG_ERROR([--enable-static is not supported for building $MOZ_APP_NAME. You probably want --enable-libxul.])
19017: fi
19017: 
    1: if test -n "$MOZ_ENABLE_LIBXUL" -a -n "$BUILD_STATIC_LIBS"; then
    1: 	AC_MSG_ERROR([--enable-libxul is not compatible with --enable-static])
    1: fi
    1: 
24548: AC_SUBST(LIBXUL_LIBS)
24548: 
    1: if test -n "$MOZ_ENABLE_LIBXUL"; then
    1:     XPCOM_LIBS="$LIBXUL_LIBS"
    1:     AC_DEFINE(MOZ_ENABLE_LIBXUL)
    1: else
    1:     if test -n "$BUILD_STATIC_LIBS"; then
    1:         AC_DEFINE(MOZ_STATIC_BUILD)
    1:     fi
    1:     XPCOM_LIBS="$DYNAMIC_XPCOM_LIBS"
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Standalone module options
    1: dnl = 
    1: dnl ========================================================
    1: MOZ_ARG_HEADER(Standalone module options (Not for building Mozilla))
    1: 
    1: dnl Check for GLib and libIDL.
    1: dnl ========================================================
    1: case "$target_os" in
    1: msvc*|mks*|cygwin*|mingw*|wince*)
    1:     SKIP_IDL_CHECK="yes"
    1:     ;;
    1: *)
    1:     SKIP_IDL_CHECK="no"
    1:     ;;
    1: esac
    1: 
    1: if test -z "$COMPILE_ENVIRONMENT"; then
    1:     SKIP_IDL_CHECK="yes"
    1: fi
    1: 
    1: dnl = Allow users to disable libIDL checking for standalone modules
    1: MOZ_ARG_WITHOUT_BOOL(libIDL,
    1: [  --without-libIDL        Skip check for libIDL (standalone modules only)],
    1: 	SKIP_IDL_CHECK="yes")
    1: 
    1: if test "$SKIP_IDL_CHECK" = "no"
    1: then
    1:     _LIBIDL_FOUND=
    1:     if test "$MACOS_SDK_DIR"; then 
    1:       dnl xpidl, and therefore libIDL, is only needed on the build host.
    1:       dnl Don't build it against the SDK, as that causes problems.
    1:       _MACSAVE_CFLAGS="$CFLAGS"
    1:       _MACSAVE_LIBS="$LIBS"
    1:       _MACSAVE_LDFLAGS="$LDFLAGS"
    1:       _MACSAVE_NEXT_ROOT="$NEXT_ROOT"
    1:       changequote(,)
    1:       CFLAGS=`echo $CFLAGS|sed -E -e "s%((-I|-isystem )${MACOS_SDK_DIR}/usr/(include|lib/gcc)[^ ]*)|-F${MACOS_SDK_DIR}(/System)?/Library/Frameworks[^ ]*|-nostdinc[^ ]*|-isysroot ${MACOS_SDK_DIR}%%g"`
    1:       LIBS=`echo $LIBS|sed -e "s?-L${MACOS_SDK_DIR}/usr/lib[^ ]*??g"`
    1:       LDFLAGS=`echo $LDFLAGS|sed -e "s?-Wl,-syslibroot,${MACOS_SDK_DIR}??g"`
    1:       changequote([,])
    1:       unset NEXT_ROOT
    1:     fi
    1: 
    1:     if test "$MOZ_ENABLE_GTK2"; then
    1:         PKG_CHECK_MODULES(LIBIDL, libIDL-2.0 >= 0.8.0 glib-2.0 gobject-2.0, _LIBIDL_FOUND=1,_LIBIDL_FOUND=)
    1:     fi
    1:     dnl if no gtk/libIDL1 or gtk2/libIDL2 combination was found, fall back
    1:     dnl to either libIDL1 or libIDL2.
    1:     if test -z "$_LIBIDL_FOUND"; then
    1:         AM_PATH_LIBIDL($LIBIDL_VERSION,_LIBIDL_FOUND=1)
    1:         if test -z "$_LIBIDL_FOUND"; then
    1:             PKG_CHECK_MODULES(LIBIDL, libIDL-2.0 >= 0.8.0,_LIBIDL_FOUND=1)
    1:         fi
    1:     fi
    1:     dnl
    1:     dnl If we don't have a libIDL config program & not cross-compiling, 
    1:     dnl     look for orbit-config instead.
    1:     dnl
    1:     if test -z "$_LIBIDL_FOUND" && test -z "$CROSS_COMPILE"; then
25869:         MOZ_PATH_PROGS(ORBIT_CONFIG, $ORBIT_CONFIG orbit-config)
    1:         if test -n "$ORBIT_CONFIG"; then
    1:             AC_MSG_CHECKING([for ORBit libIDL usability])
    1:         	_ORBIT_CFLAGS=`${ORBIT_CONFIG} client --cflags`
    1:     	    _ORBIT_LIBS=`${ORBIT_CONFIG} client --libs`
    1:             _ORBIT_INC_PATH=`${PERL} -e '{ for $f (@ARGV) { print "$f " if ($f =~ m/^-I/); } }' -- ${_ORBIT_CFLAGS}`
    1:             _ORBIT_LIB_PATH=`${PERL} -e '{ for $f (@ARGV) { print "$f " if ($f =~ m/^-L/); } }' -- ${_ORBIT_LIBS}`
    1:             LIBIDL_CFLAGS="$_ORBIT_INC_PATH"
    1:             LIBIDL_LIBS="$_ORBIT_LIB_PATH -lIDL -lglib"
    1:             LIBIDL_CONFIG=
    1:             _SAVE_CFLAGS="$CFLAGS"
    1:             _SAVE_LIBS="$LIBS"
    1:             CFLAGS="$LIBIDL_CFLAGS $CFLAGS"
    1:             LIBS="$LIBIDL_LIBS $LIBS"
    1:             AC_TRY_RUN([
    1: #include <stdlib.h>
    1: #include <libIDL/IDL.h>
    1: int main() {
    1:   char *s;
    1:   s=strdup(IDL_get_libver_string());
    1:   if(s==NULL) {
    1:     exit(1);
    1:   }
    1:   exit(0);
    1: }
    1:             ], [_LIBIDL_FOUND=1
    1:                 result="yes"],
    1:                [LIBIDL_CFLAGS=
    1:                 LIBIDL_LIBS=
    1:                 result="no"],
    1:                [_LIBIDL_FOUND=1
    1:                 result="maybe"] )
    1:             AC_MSG_RESULT($result)
    1:             CFLAGS="$_SAVE_CFLAGS"
    1:             LIBS="$_SAVE_LIBS"
    1:         fi
    1:     fi
    1:     if test -z "$_LIBIDL_FOUND"; then
    1:         AC_MSG_ERROR([libIDL not found.
    1:         libIDL $LIBIDL_VERSION or higher is required.])
    1:     fi
    1:     if test "$MACOS_SDK_DIR"; then
    1:       CFLAGS="$_MACSAVE_CFLAGS"
    1:       LIBS="$_MACSAVE_LIBS"
    1:       LDFLAGS="$_MACSAVE_LDFLAGS"
    1:       if test -n "$_MACSAVE_NEXT_ROOT" ; then
    1:         export NEXT_ROOT="$_MACSAVE_NEXT_ROOT"
    1:       fi
    1:     fi
    1: fi
    1: 
    1: if test -n "$CROSS_COMPILE"; then
    1:      if test -z "$HOST_LIBIDL_CONFIG"; then
    1:         HOST_LIBIDL_CONFIG="$LIBIDL_CONFIG"
    1:     fi
    1:     if test -n "$HOST_LIBIDL_CONFIG" && test "$HOST_LIBIDL_CONFIG" != "no"; then
    1:         HOST_LIBIDL_CFLAGS=`${HOST_LIBIDL_CONFIG} --cflags`
    1:         HOST_LIBIDL_LIBS=`${HOST_LIBIDL_CONFIG} --libs`
    1:     else
    1:         HOST_LIBIDL_CFLAGS="$LIBIDL_CFLAGS"
    1:         HOST_LIBIDL_LIBS="$LIBIDL_LIBS"
    1:     fi
    1: fi
    1: 
    1: if test -z "$SKIP_PATH_CHECKS"; then
    1: if test -z "${GLIB_CFLAGS}" || test -z "${GLIB_LIBS}" ; then
19858:     if test "$MOZ_ENABLE_GTK2" || test "$USE_ELF_DYNSTR_GC" ; then
    1:         PKG_CHECK_MODULES(GLIB, glib-2.0 >= 1.3.7 gobject-2.0)
    1:     else
    1:         AM_PATH_GLIB(${GLIB_VERSION})
    1:     fi
    1: fi
    1: fi
    1: 
    1: if test -z "${GLIB_GMODULE_LIBS}" -a -n "${GLIB_CONFIG}"; then
    1:     GLIB_GMODULE_LIBS=`$GLIB_CONFIG gmodule --libs`
    1: fi
    1: 
    1: AC_SUBST(LIBIDL_CFLAGS)
    1: AC_SUBST(LIBIDL_LIBS)
    1: AC_SUBST(STATIC_LIBIDL)
    1: AC_SUBST(GLIB_CFLAGS)
    1: AC_SUBST(GLIB_LIBS)
    1: AC_SUBST(GLIB_GMODULE_LIBS)
    1: AC_SUBST(HOST_LIBIDL_CONFIG)
    1: AC_SUBST(HOST_LIBIDL_CFLAGS)
    1: AC_SUBST(HOST_LIBIDL_LIBS)
    1: 
    1: dnl ========================================================
    1: dnl Check for cairo
    1: dnl ========================================================
    1: MOZ_CAIRO_CFLAGS='-I$(LIBXUL_DIST)/include/cairo'
    1: 
    1: MOZ_TREE_CAIRO=1
    1: MOZ_ARG_ENABLE_BOOL(system-cairo,
    1: [ --enable-system-cairo Use system cairo (located with pkgconfig)],
    1: MOZ_TREE_CAIRO=,
    1: MOZ_TREE_CAIRO=1 )
    1: 
    1: # Check for headers defining standard int types.
    1: AC_CHECK_HEADERS(stdint.h inttypes.h sys/int_types.h)
    1: 
 8213: if test "$MOZ_TREE_CAIRO"; then
11579:     AC_DEFINE(MOZ_TREE_CAIRO)
11579: 
    1:     # For now we assume that we will have a uint64_t available through
    1:     # one of the above headers or mozstdint.h.
    1:     AC_DEFINE(HAVE_UINT64_T)
    1: 
    1:     # Define macros for cairo-features.h
    1:     if test "$MOZ_X11"; then
    1:         XLIB_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_SURFACE 1"
 3836:         XLIB_XRENDER_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_XRENDER_SURFACE 1"
    1:         PS_SURFACE_FEATURE="#define CAIRO_HAS_PS_SURFACE 1"
    1:         PDF_SURFACE_FEATURE="#define CAIRO_HAS_PDF_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
26419:         FC_FONT_FEATURE="#define CAIRO_HAS_FC_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="$FT2_CFLAGS"
    1:     fi
16763:     if test "$MOZ_WIDGET_TOOLKIT" = "qt"; then
16763:         QPAINTER_SURFACE_FEATURE="#define CAIRO_HAS_QPAINTER_SURFACE 1"
16763:     fi
    1:     if test "$MOZ_WIDGET_TOOLKIT" = "mac" -o "$MOZ_WIDGET_TOOLKIT" = "cocoa"; then
    1:         QUARTZ_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_SURFACE 1"
13107:         QUARTZ_IMAGE_SURFACE_FEATURE="#define CAIRO_HAS_QUARTZ_IMAGE_SURFACE 1"
13979:         QUARTZ_FONT_FEATURE="#define CAIRO_HAS_QUARTZ_FONT 1"
    1:     fi
    1:     if test "$MOZ_WIDGET_TOOLKIT" = "windows"; then
    1:         WIN32_SURFACE_FEATURE="#define CAIRO_HAS_WIN32_SURFACE 1"
24104:         if test -z "$WINCE"; then
    1:            WIN32_FONT_FEATURE="#define CAIRO_HAS_WIN32_FONT 1"
24104:         else
24104:            WIN32_FONT_FEATURE=
24104:         fi  
    1:         PDF_SURFACE_FEATURE="#define CAIRO_HAS_PDF_SURFACE 1"
    1:     fi
    1:     if test "$MOZ_WIDGET_TOOLKIT" = "os2"; then
    1:         OS2_SURFACE_FEATURE="#define CAIRO_HAS_OS2_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
26419:         FC_FONT_FEATURE="#define CAIRO_HAS_FC_FONT 1"
 8925:         PDF_SURFACE_FEATURE="#define CAIRO_HAS_PDF_SURFACE 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:         CAIRO_FT_CFLAGS="-I${MZFTCFGFT2}/include"
    1:         CAIRO_FT_LIBS="-L${MZFTCFGFT2}/lib -lmozft -lmzfntcfg"
    1:     fi
    1:     if test "$MOZ_WIDGET_TOOLKIT" = "beos"; then
    1:         PKG_CHECK_MODULES(CAIRO_FT, fontconfig freetype2)
    1:         BEOS_SURFACE_FEATURE="#define CAIRO_HAS_BEOS_SURFACE 1"
    1:         FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
26419:         FC_FONT_FEATURE="#define CAIRO_HAS_FC_FONT 1"
    1:         MOZ_ENABLE_CAIRO_FT=1
    1:     fi
    1:     AC_SUBST(MOZ_ENABLE_CAIRO_FT)
    1:     AC_SUBST(CAIRO_FT_CFLAGS)
    1: 
    1:     if test "$MOZ_DEBUG"; then
    1:       SANITY_CHECKING_FEATURE="#define CAIRO_DO_SANITY_CHECKING 1"
    1:     else
    1:       SANITY_CHECKING_FEATURE="#undef CAIRO_DO_SANITY_CHECKING"
    1:     fi
    1: 
    1:     PNG_FUNCTIONS_FEATURE="#define CAIRO_HAS_PNG_FUNCTIONS 1"
    1: 
    1:     AC_SUBST(PS_SURFACE_FEATURE)
    1:     AC_SUBST(PDF_SURFACE_FEATURE)
    1:     AC_SUBST(SVG_SURFACE_FEATURE)
    1:     AC_SUBST(XLIB_SURFACE_FEATURE)
 3836:     AC_SUBST(XLIB_XRENDER_SURFACE_FEATURE)
    1:     AC_SUBST(QUARTZ_SURFACE_FEATURE)
13107:     AC_SUBST(QUARTZ_IMAGE_SURFACE_FEATURE)
    1:     AC_SUBST(XCB_SURFACE_FEATURE)
    1:     AC_SUBST(WIN32_SURFACE_FEATURE)
    1:     AC_SUBST(OS2_SURFACE_FEATURE)
    1:     AC_SUBST(BEOS_SURFACE_FEATURE)
    1:     AC_SUBST(DIRECTFB_SURFACE_FEATURE)
    1:     AC_SUBST(FT_FONT_FEATURE)
24104:     AC_SUBST(FC_FONT_FEATURE)
    1:     AC_SUBST(WIN32_FONT_FEATURE)
13979:     AC_SUBST(QUARTZ_FONT_FEATURE)
    1:     AC_SUBST(PNG_FUNCTIONS_FEATURE)
16763:     AC_SUBST(QPAINTER_SURFACE_FEATURE)
    1: 
    1:     if test "$_WIN32_MSVC"; then
    1:         MOZ_CAIRO_LIBS='$(DEPTH)/gfx/cairo/cairo/src/mozcairo.lib $(DEPTH)/gfx/cairo/libpixman/src/mozlibpixman.lib'
    1:     else
 5741:         MOZ_CAIRO_LIBS='$(DEPTH)/gfx/cairo/cairo/src/$(LIB_PREFIX)mozcairo.$(LIB_SUFFIX) $(DEPTH)/gfx/cairo/libpixman/src/$(LIB_PREFIX)mozlibpixman.$(LIB_SUFFIX)'" $CAIRO_FT_LIBS"
    1: 
    1:         if test "$MOZ_X11"; then
    1:             MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS -lXrender -lfreetype -lfontconfig"
    1:         fi
    1:     fi
16289: 
16289:     CAIRO_FEATURES_H=gfx/cairo/cairo/src/cairo-features.h
16289:     mv -f $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig 2> /dev/null
16289: 
    1: else
    1:    PKG_CHECK_MODULES(CAIRO, cairo >= $CAIRO_VERSION freetype2 fontconfig)
    1:    MOZ_CAIRO_CFLAGS=$CAIRO_CFLAGS
    1:    MOZ_CAIRO_LIBS=$CAIRO_LIBS
11270:    if test "$MOZ_X11"; then
11270:         PKG_CHECK_MODULES(CAIRO_XRENDER, cairo-xlib-xrender >= $CAIRO_VERSION)
11270:         MOZ_CAIRO_LIBS="$MOZ_CAIRO_LIBS $XLDFLAGS $CAIRO_XRENDER_LIBS"
11270:         MOZ_CAIRO_CFLAGS="$MOZ_CAIRO_CFLAGS $CAIRO_XRENDER_CFLAGS"
11270:    fi
    1: fi
    1: 
    1: AC_SUBST(MOZ_TREE_CAIRO)
    1: AC_SUBST(MOZ_CAIRO_CFLAGS)
    1: AC_SUBST(MOZ_CAIRO_LIBS)
    1: 
27035: dnl qcms
27035: dnl ========================================================
27035: 
27035: QCMS_LIBS='$(DEPTH)/gfx/qcms/$(LIB_PREFIX)mozqcms.$(LIB_SUFFIX)'
27035: AC_SUBST(QCMS_LIBS)
 3787: 
 3787: dnl ========================================================
    1: dnl disable xul
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(xul,
    1: [  --disable-xul           Disable XUL],
    1:     MOZ_XUL= )
    1: if test "$MOZ_XUL"; then
    1:   AC_DEFINE(MOZ_XUL)
    1: else
    1:   dnl remove extensions that require XUL
    1:   MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS | sed -e 's/inspector//' -e 's/venkman//' -e 's/irc//' -e 's/tasks//'`
    1: fi
    1: 
    1: AC_SUBST(MOZ_XUL)
    1: 
    1: dnl ========================================================
    1: dnl Two ways to enable Python support:
    1: dnl   --enable-extensions=python # select all available.
    1: dnl    (MOZ_PYTHON_EXTENSIONS contains the list of extensions)
    1: dnl or:
    1: dnl   --enable-extensions=python/xpcom,... # select individual ones
    1: dnl
    1: dnl If either is used, we locate the Python to use.
    1: dnl ========================================================
    1: dnl
    1: dnl If 'python' appears anywhere in the extensions list, go lookin'...
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c python` -ne 0; then
    1:     dnl Allow PYTHON to point to the Python interpreter to use
    1:     dnl (note that it must be the python executable - which we
    1:     dnl run to locate the relevant paths etc)
    1:     dnl If not set, we use whatever Python we can find.
    1:     MOZ_PYTHON=$PYTHON
    1:     dnl Ask Python what its version number is
    1:     changequote(,)
    1:     MOZ_PYTHON_VER=`$PYTHON -c "import sys;print '%d%d' % sys.version_info[0:2]"`
    1:     MOZ_PYTHON_VER_DOTTED=`$PYTHON -c "import sys;print '%d.%d' % sys.version_info[0:2]"`
    1:     changequote([,])
    1:     dnl Ask for the Python "prefix" (ie, home/source dir)
    1:     MOZ_PYTHON_PREFIX=`$PYTHON -c "import sys; print sys.prefix"`
    1:     dnl Setup the include and library directories.
    1:     if test "$OS_ARCH" = "WINNT"; then
    1:         MOZ_PYTHON_PREFIX=`$CYGPATH_W $MOZ_PYTHON_PREFIX | $CYGPATH_S`
    1:         dnl Source trees have "include" and "PC" for .h, and "PCbuild" for .lib
    1:         dnl Binary trees have "include" for .h, and "libs" for .lib
    1:         dnl We add 'em both - along with quotes, to handle spaces.
    1:         MOZ_PYTHON_DLL_SUFFIX=.pyd
    1:         MOZ_PYTHON_INCLUDES="\"-I$MOZ_PYTHON_PREFIX/include\" \"-I$MOZ_PYTHON_PREFIX/PC\""
    1:         MOZ_PYTHON_LIBS="\"/libpath:$MOZ_PYTHON_PREFIX/PCBuild\" \"/libpath:$MOZ_PYTHON_PREFIX/libs\""
    1:     else
    1:         dnl Non-Windows include and libs
    1:         MOZ_PYTHON_DLL_SUFFIX=$DLL_SUFFIX
    1:         MOZ_PYTHON_INCLUDES="-I$MOZ_PYTHON_PREFIX/include/python$MOZ_PYTHON_VER_DOTTED"
    1:         dnl Check for dynamic Python lib
    1:         dnl - A static Python is no good - multiple dynamic libraries (xpcom
    1:         dnl - core, xpcom loader, pydom etc) all need to share Python.
    1:         dnl - Python 2.3's std --enable-shared configure option will
    1:         dnl   create a libpython2.3.so.1.0. We should first try this
    1:         dnl   dotted versioned .so file because this is the one that
    1:         dnl   the PyXPCOM build mechanics tries to link to.
    1:         dnl   XXX Should find a better way than hardcoding "1.0".
    1:         dnl - Python developement tree dir layouts are NOT allowed here
    1:         dnl   because the PyXPCOM build just dies on it later anyway.
    1:         dnl - Fixes to the above by Python/*nix knowledgable people welcome!
    1:         if test -f "$MOZ_PYTHON_PREFIX/lib/libpython$MOZ_PYTHON_VER_DOTTED.so.1.0"; then
    1:             MOZ_PYTHON_LIBS="-L$MOZ_PYTHON_PREFIX/lib -lpython$MOZ_PYTHON_VER_DOTTED"
13225:         elif test -f "$MOZ_PYTHON_PREFIX/lib64/libpython$MOZ_PYTHON_VER_DOTTED.so.1.0"; then
13225:             MOZ_PYTHON_LIBS="-L$MOZ_PYTHON_PREFIX/lib64 -lpython$MOZ_PYTHON_VER_DOTTED"
    1:         elif test -f "$MOZ_PYTHON_PREFIX/lib/libpython$MOZ_PYTHON_VER_DOTTED.so"; then
    1:             MOZ_PYTHON_LIBS="-L$MOZ_PYTHON_PREFIX/lib -lpython$MOZ_PYTHON_VER_DOTTED"
    1:         elif test -f "$MOZ_PYTHON_PREFIX/libpython$MOZ_PYTHON_VER_DOTTED.so"; then
    1:             dnl Don't Python development tree directory layout.
    1:             MOZ_PYTHON_LIBS="-L$MOZ_PYTHON_PREFIX -lpython$MOZ_PYTHON_VER_DOTTED"
    1:             AC_MSG_ERROR([The Python at $MOZ_PYTHON_PREFIX looks like a dev tree. The PyXPCOM build cannot handle this yet. You must 'make install' Python and use the installed tree.])
    1:         elif test "$OS_ARCH" = "Darwin"; then
    1:             dnl We do Darwin last, so if a custom non-framework build of
    1:             dnl python is used on OSX, then it will be picked up first by
    1:             dnl the logic above.
    1:             MOZ_PYTHON_LIBS="-framework Python"
    1:         else
    1:             AC_MSG_ERROR([Could not find build shared libraries for Python at $MOZ_PYTHON_PREFIX.  This is required for PyXPCOM.])
    1:         fi
    1:         if test "$OS_ARCH" = "Linux"; then
    1:             MOZ_PYTHON_LIBS="$MOZ_PYTHON_LIBS -lutil"
    1:         fi
    1:     fi
    1:     dnl Handle "_d" on Windows
    1:     if test "$OS_ARCH" = "WINNT" && test -n "$MOZ_DEBUG"; then
    1:         MOZ_PYTHON_DEBUG_SUFFIX="_d"
    1:     else
    1:         MOZ_PYTHON_DEBUG_SUFFIX=
    1:     fi
    1:     AC_MSG_RESULT(Building Python extensions using python-$MOZ_PYTHON_VER_DOTTED from $MOZ_PYTHON_PREFIX)
    1: fi
    1: 
    1: dnl If the user asks for the 'python' extension, then we add
    1: dnl MOZ_PYTHON_EXTENSIONS to MOZ_EXTENSIONS - but with the leading 'python/'
    1: dnl Note the careful regex - it must match 'python' followed by anything
    1: dnl other than a '/', including the end-of-string.
    1: if test `echo "$MOZ_EXTENSIONS" | grep -c 'python\([[^/]]\|$\)'` -ne 0; then
    1:     for pyext in $MOZ_PYTHON_EXTENSIONS; do
    1:         MOZ_EXTENSIONS=`echo $MOZ_EXTENSIONS python/$pyext`
    1:     done
    1: fi
    1: dnl Later we may allow MOZ_PYTHON_EXTENSIONS to be specified on the
    1: dnl command-line, but not yet
    1: AC_SUBST(MOZ_PYTHON_EXTENSIONS)
    1: AC_SUBST(MOZ_PYTHON)
    1: AC_SUBST(MOZ_PYTHON_PREFIX)
    1: AC_SUBST(MOZ_PYTHON_INCLUDES)
    1: AC_SUBST(MOZ_PYTHON_LIBS)
    1: AC_SUBST(MOZ_PYTHON_VER)
    1: AC_SUBST(MOZ_PYTHON_VER_DOTTED)
    1: AC_SUBST(MOZ_PYTHON_DEBUG_SUFFIX)
    1: AC_SUBST(MOZ_PYTHON_DLL_SUFFIX)
    1: 
    1: dnl ========================================================
    1: dnl disable profile locking
    1: dnl   do no use this in applications that can have more than
    1: dnl   one process accessing the profile directory.
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(profilelocking,
    1: [  --disable-profilelocking           Disable profile locking],
    1:     MOZ_PROFILELOCKING=,
    1:     MOZ_PROFILELOCKING=1 )
    1: if test "$MOZ_PROFILELOCKING"; then
    1:   AC_DEFINE(MOZ_PROFILELOCKING)
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl disable rdf services
    1: dnl ========================================================
    1: MOZ_ARG_DISABLE_BOOL(rdf,
    1: [  --disable-rdf           Disable RDF],
    1:     MOZ_RDF= )
    1: if test "$MOZ_RDF"; then
    1:   AC_DEFINE(MOZ_RDF)
    1: fi
    1: 
    1: AC_SUBST(MOZ_RDF)
    1: 
    1: dnl ========================================================
    1: dnl necko configuration options
    1: dnl ========================================================
    1: 
    1: dnl
    1: dnl option to disable various necko protocols
    1: dnl
    1: MOZ_ARG_ENABLE_STRING(necko-protocols,
    1: [  --enable-necko-protocols[={http,ftp,default,all,none}]
    1:                           Enable/disable specific protocol handlers],
    1: [ for option in `echo $enableval | sed 's/,/ /g'`; do
    1:     if test "$option" = "yes" || test "$option" = "all"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
    1:     elif test "$option" = "no" || test "$option" = "none"; then
    1:         NECKO_PROTOCOLS=""
    1:     elif test "$option" = "default"; then
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $NECKO_PROTOCOLS_DEFAULT"
    1:     elif test `echo "$option" | grep -c \^-` != 0; then
    1:         option=`echo $option | sed 's/^-//'`
    1:         NECKO_PROTOCOLS=`echo "$NECKO_PROTOCOLS" | sed "s/ ${option}//"`
    1:     else
    1:         NECKO_PROTOCOLS="$NECKO_PROTOCOLS $option"
    1:     fi
    1: done],
    1:     NECKO_PROTOCOLS="$NECKO_PROTOCOLS_DEFAULT")
    1: dnl Remove dupes
    1: NECKO_PROTOCOLS=`${PERL} ${srcdir}/build/unix/uniq.pl ${NECKO_PROTOCOLS}`
    1: AC_SUBST(NECKO_PROTOCOLS)
    1: for p in $NECKO_PROTOCOLS; do
    1:     AC_DEFINE_UNQUOTED(NECKO_PROTOCOL_$p)
    1: done
    1: 
    1: dnl
    1: dnl option to disable necko's disk cache
    1: dnl
    1: MOZ_ARG_DISABLE_BOOL(necko-disk-cache,
    1: [  --disable-necko-disk-cache
    1:                           Disable necko disk cache],
    1:     NECKO_DISK_CACHE=,
    1:     NECKO_DISK_CACHE=1)
    1: AC_SUBST(NECKO_DISK_CACHE)
    1: if test "$NECKO_DISK_CACHE"; then
    1:     AC_DEFINE(NECKO_DISK_CACHE)
    1: fi
    1: 
    1: dnl
26270: dnl option to disable necko's wifi scanner
26270: dnl
26270: MOZ_ARG_DISABLE_BOOL(necko-wifi,
26270: [  --disable-necko-wifi   Disable necko wifi scanner],
26270:     NECKO_WIFI=,
26270:     NECKO_WIFI=1
26270: )
26270: if test "$NECKO_WIFI"; then
26270:   NECKO_WIFI=
26270:   if test "$OS_ARCH" = "Linux"; then
26270:     AC_CHECK_HEADER([iwlib.h])
26270:     if test "$ac_cv_header_iwlib_h" = "yes"; then
26270:       NECKO_WIFI=1
26270:     fi
26270:   elif test "$OS_ARCH" = "Darwin"; then
26270:     NECKO_WIFI=1
26270:   elif test "$OS_ARCH" = "WINNT"; then
26270:     NECKO_WIFI=1
26270:   else
26272:     AC_MSG_WARN([Necko WiFi scanning not supported on your platform.])
26270:   fi
26270:   AC_SUBST(NECKO_WIFI)
26270:   
26270:   if test "$NECKO_WIFI"; then
26270:     AC_DEFINE(NECKO_WIFI)
26270:   fi
26270: 
26270: fi
26270: AC_SUBST(NECKO_WIFI)
26270: 
26270: 
26270: dnl
    1: dnl option to minimize size of necko's i/o buffers
    1: dnl
    1: MOZ_ARG_ENABLE_BOOL(necko-small-buffers,
    1: [  --enable-necko-small-buffers
    1:                           Minimize size of necko's i/o buffers],
    1:     NECKO_SMALL_BUFFERS=1,
    1:     NECKO_SMALL_BUFFERS=)
    1: AC_SUBST(NECKO_SMALL_BUFFERS)
    1: if test "$NECKO_SMALL_BUFFERS"; then
    1:     AC_DEFINE(NECKO_SMALL_BUFFERS)
    1: fi 
    1: 
    1: dnl
    1: dnl option to disable cookies
    1: dnl
    1: MOZ_ARG_DISABLE_BOOL(cookies,
    1: [  --disable-cookies       Disable cookie support],
    1:     NECKO_COOKIES=,
    1:     NECKO_COOKIES=1)
    1: AC_SUBST(NECKO_COOKIES)
    1: if test "$NECKO_COOKIES"; then
    1:     AC_DEFINE(NECKO_COOKIES)
    1: fi
    1: 
    1: dnl NECKO_ configuration options are not global
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES NECKO_"
    1: 
    1: dnl Only build Mork if it's required
    1: AC_SUBST(MOZ_MORK)
    1: if test "$MOZ_MORK"; then
    1:   AC_DEFINE(MOZ_MORK)
    1: fi
    1: 
    1: dnl Build the lightweight Mork reader if required
    1: AC_SUBST(MOZ_MORKREADER)
    1: if test "$MOZ_MORKREADER"; then
    1:   AC_DEFINE(MOZ_MORKREADER)
    1: fi
    1: 
    1: dnl ========================================================
    1: if test "$MOZ_DEBUG" || test "$NS_TRACE_MALLOC"; then
    1:     MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS=
    1: fi
    1: 
    1: dnl ========================================================
    1: dnl =
    1: dnl = Maintainer debug option (no --enable equivalent)
    1: dnl =
    1: dnl ========================================================
    1: 
    1: AC_SUBST(AR)
    1: AC_SUBST(AR_FLAGS)
    1: AC_SUBST(AR_LIST)
    1: AC_SUBST(AR_EXTRACT)
    1: AC_SUBST(AR_DELETE)
    1: AC_SUBST(AS)
    1: AC_SUBST(ASFLAGS)
    1: AC_SUBST(AS_DASH_C_FLAG)
    1: AC_SUBST(LD)
    1: AC_SUBST(RC)
    1: AC_SUBST(RCFLAGS)
    1: AC_SUBST(WINDRES)
    1: AC_SUBST(USE_SHORT_LIBNAME)
    1: AC_SUBST(IMPLIB)
    1: AC_SUBST(FILTER)
    1: AC_SUBST(BIN_FLAGS)
    1: AC_SUBST(NS_USE_NATIVE)
    1: AC_SUBST(MOZ_WIDGET_TOOLKIT)
    1: AC_SUBST(MOZ_GFX_TOOLKIT)
    1: AC_SUBST(MOZ_UPDATE_XTERM)
    1: AC_SUBST(MINIMO)
19108: AC_SUBST(MOZ_PLATFORM_HILDON)
15831: AC_SUBST(NS_OSSO)
19213: AC_SUBST(NS_MAEMO_LOCATION)
    1: AC_SUBST(MOZ_AUTH_EXTENSION)
    1: AC_SUBST(MOZ_MATHML)
    1: AC_SUBST(MOZ_PERMISSIONS)
    1: AC_SUBST(MOZ_XTF)
    1: AC_SUBST(MOZ_NO_INSPECTOR_APIS)
    1: AC_SUBST(MOZ_PREF_EXTENSIONS)
    1: AC_SUBST(MOZ_SVG)
23697: AC_SUBST(MOZ_SMIL)
    1: AC_SUBST(MOZ_XSLT_STANDALONE)
    1: AC_SUBST(MOZ_JS_LIBS)
    1: AC_SUBST(MOZ_PSM)
    1: AC_SUBST(MOZ_DEBUG)
    1: AC_SUBST(MOZ_DEBUG_MODULES)
    1: AC_SUBST(MOZ_PROFILE_MODULES)
    1: AC_SUBST(MOZ_DEBUG_ENABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_DISABLE_DEFS)
    1: AC_SUBST(MOZ_DEBUG_FLAGS)
    1: AC_SUBST(MOZ_DEBUG_LDFLAGS)
 5382: AC_SUBST(WARNINGS_AS_ERRORS)
    1: AC_SUBST(MOZ_DBGRINFO_MODULES)
    1: AC_SUBST(MOZ_EXTENSIONS)
    1: AC_SUBST(MOZ_IMG_DECODERS)
    1: AC_SUBST(MOZ_IMG_ENCODERS)
    1: AC_SUBST(MOZ_JSDEBUGGER)
    1: AC_SUBST(MOZ_NO_XPCOM_OBSOLETE)
    1: AC_SUBST(MOZ_PLUGINS)
    1: AC_SUBST(ENABLE_EAZEL_PROFILER)
    1: AC_SUBST(EAZEL_PROFILER_CFLAGS)
    1: AC_SUBST(EAZEL_PROFILER_LIBS)
    1: AC_SUBST(MOZ_PERF_METRICS)
    1: AC_SUBST(GC_LEAK_DETECTOR)
    1: AC_SUBST(MOZ_LOG_REFCNT)
    1: AC_SUBST(MOZ_LEAKY)
    1: AC_SUBST(MOZ_JPROF)
10339: AC_SUBST(MOZ_SHARK)
15763: AC_SUBST(MOZ_CALLGRIND)
16288: AC_SUBST(MOZ_VTUNE)
    1: AC_SUBST(MOZ_XPCTOOLS)
    1: AC_SUBST(MOZ_JSLOADER)
    1: AC_SUBST(MOZ_USE_NATIVE_UCONV)
    1: AC_SUBST(MOZ_INSURE)
    1: AC_SUBST(MOZ_INSURE_DIRS)
    1: AC_SUBST(MOZ_INSURE_EXCLUDE_DIRS)
    1: AC_SUBST(MOZ_QUANTIFY)
    1: AC_SUBST(MOZ_INSURIFYING)
    1: AC_SUBST(LIBICONV)
    1: AC_SUBST(MOZ_PLACES)
    1: AC_SUBST(MOZ_PLACES_BOOKMARKS)
    1: AC_SUBST(MOZ_STORAGE)
    1: AC_SUBST(MOZ_FEEDS)
    1: AC_SUBST(NS_PRINTING)
    1: 
    1: AC_SUBST(MOZ_JAVAXPCOM)
    1: AC_SUBST(JAVA_INCLUDE_PATH)
    1: AC_SUBST(JAVA)
    1: AC_SUBST(JAVAC)
    1: AC_SUBST(JAR)
    1: 
    1: AC_SUBST(MOZ_PROFILELOCKING)
    1: 
    1: AC_SUBST(HAVE_XIE)
    1: AC_SUBST(MOZ_XIE_LIBS)
    1: AC_SUBST(MOZ_ENABLE_POSTSCRIPT)
    1: 
    1: AC_SUBST(XPCOM_USE_LEA)
    1: AC_SUBST(BUILD_STATIC_LIBS)
    1: AC_SUBST(MOZ_ENABLE_LIBXUL)
    1: AC_SUBST(ENABLE_TESTS)
    1: AC_SUBST(IBMBIDI)
    1: AC_SUBST(MOZ_UNIVERSALCHARDET)
    1: AC_SUBST(ACCESSIBILITY)
    1: AC_SUBST(MOZ_XPINSTALL)
    1: AC_SUBST(MOZ_VIEW_SOURCE)
    1: AC_SUBST(MOZ_SPELLCHECK)
    1: AC_SUBST(MOZ_XPFE_COMPONENTS)
    1: AC_SUBST(MOZ_USER_DIR)
 4389: AC_SUBST(MOZ_CRASHREPORTER)
    1: 
    1: AC_SUBST(ENABLE_STRIP)
 4703: AC_SUBST(PKG_SKIP_STRIP)
    1: AC_SUBST(USE_ELF_DYNSTR_GC)
    1: AC_SUBST(INCREMENTAL_LINKER)
    1: AC_SUBST(MOZ_COMPONENTS_VERSION_SCRIPT_LDFLAGS)
    1: AC_SUBST(MOZ_COMPONENT_NSPR_LIBS)
    1: AC_SUBST(MOZ_XPCOM_OBSOLETE_LIBS)
    1: 
    1: AC_SUBST(MOZ_FIX_LINK_PATHS)
    1: AC_SUBST(XPCOM_LIBS)
    1: AC_SUBST(XPCOM_FROZEN_LDOPTS)
    1: AC_SUBST(XPCOM_GLUE_LDOPTS)
    1: AC_SUBST(XPCOM_STANDALONE_GLUE_LDOPTS)
    1: 
    1: AC_SUBST(USE_DEPENDENT_LIBS)
    1: 
    1: AC_SUBST(MOZ_BUILD_ROOT)
    1: AC_SUBST(MOZ_OS2_TOOLS)
    1: AC_SUBST(MOZ_OS2_USE_DECLSPEC)
    1: 
    1: AC_SUBST(MOZ_POST_DSO_LIB_COMMAND)
    1: AC_SUBST(MOZ_POST_PROGRAM_COMMAND)
    1: AC_SUBST(MOZ_TIMELINE)
    1: AC_SUBST(WINCE)
24372: AC_SUBST(WINCE_SDK_DIR)
    1: 
    1: AC_SUBST(MOZ_APP_NAME)
    1: AC_SUBST(MOZ_APP_DISPLAYNAME)
    1: AC_SUBST(MOZ_APP_VERSION)
    1: AC_SUBST(FIREFOX_VERSION)
    1: 
    1: AC_SUBST(MOZ_PKG_SPECIAL)
    1: 
    1: AC_SUBST(MOZILLA_OFFICIAL)
    1: AC_SUBST(BUILD_OFFICIAL)
    1: AC_SUBST(MOZ_MILESTONE_RELEASE)
    1: 
    1: dnl win32 options
    1: AC_SUBST(MOZ_DEBUG_SYMBOLS)
    1: AC_SUBST(MOZ_MAPINFO)
    1: AC_SUBST(MOZ_BROWSE_INFO)
    1: AC_SUBST(MOZ_TOOLS_DIR)
    1: AC_SUBST(CYGWIN_WRAPPER)
    1: AC_SUBST(AS_PERL)
    1: AC_SUBST(WIN32_REDIST_DIR)
    1: AC_SUBST(PYTHON)
    1: 
25957: AC_SUBST(WINCE)
25957: AC_SUBST(WINCE_WINDOWS_MOBILE)
25957: 
    1: dnl Echo the CFLAGS to remove extra whitespace.
    1: CFLAGS=`echo \
    1: 	$_WARNINGS_CFLAGS \
    1: 	$CFLAGS`
    1: 
    1: CXXFLAGS=`echo \
    1: 	$_MOZ_RTTI_FLAGS \
    1: 	$_MOZ_EXCEPTIONS_FLAGS \
    1: 	$_WARNINGS_CXXFLAGS \
    1: 	$CXXFLAGS`
    1: 
    1: COMPILE_CFLAGS=`echo \
    1:     $_DEFINES_CFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CFLAGS`
    1: 
    1: COMPILE_CXXFLAGS=`echo \
    1:     $_DEFINES_CXXFLAGS \
    1: 	$_DEPEND_CFLAGS \
    1:     $COMPILE_CXXFLAGS`
    1: 
    1: AC_SUBST(SYSTEM_MAKEDEPEND)
24320: AC_SUBST(SYSTEM_LIBXUL)
    1: AC_SUBST(SYSTEM_JPEG)
    1: AC_SUBST(SYSTEM_PNG)
    1: AC_SUBST(SYSTEM_ZLIB)
12936: AC_SUBST(SYSTEM_BZ2)
    1: 
    1: AC_SUBST(JPEG_CFLAGS)
    1: AC_SUBST(JPEG_LIBS)
    1: AC_SUBST(ZLIB_CFLAGS)
    1: AC_SUBST(ZLIB_LIBS)
12936: AC_SUBST(BZ2_CFLAGS)
12936: AC_SUBST(BZ2_LIBS)
    1: AC_SUBST(PNG_CFLAGS)
    1: AC_SUBST(PNG_LIBS)
    1: 
    1: AC_SUBST(MOZ_JPEG_CFLAGS)
    1: AC_SUBST(MOZ_JPEG_LIBS)
    1: AC_SUBST(MOZ_ZLIB_CFLAGS)
    1: AC_SUBST(MOZ_ZLIB_LIBS)
12936: AC_SUBST(MOZ_BZ2_CFLAGS)
12936: AC_SUBST(MOZ_BZ2_LIBS)
    1: AC_SUBST(MOZ_PNG_CFLAGS)
    1: AC_SUBST(MOZ_PNG_LIBS)
    1: 
    1: AC_SUBST(NSPR_CFLAGS)
    1: AC_SUBST(NSPR_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSPR)
    1: 
    1: AC_SUBST(NSS_CFLAGS)
    1: AC_SUBST(NSS_LIBS)
    1: AC_SUBST(NSS_DEP_LIBS)
    1: AC_SUBST(MOZ_NATIVE_NSS)
22249: AC_SUBST(NSS_DISABLE_DBM)
    1: 
    1: AC_SUBST(CFLAGS)
    1: AC_SUBST(CXXFLAGS)
    1: AC_SUBST(CPPFLAGS)
    1: AC_SUBST(COMPILE_CFLAGS)
    1: AC_SUBST(COMPILE_CXXFLAGS)
    1: AC_SUBST(LDFLAGS)
    1: AC_SUBST(LIBS)
    1: AC_SUBST(CROSS_COMPILE)
20702: AC_SUBST(WCHAR_CFLAGS)
    1: 
    1: AC_SUBST(HOST_CC)
    1: AC_SUBST(HOST_CXX)
    1: AC_SUBST(HOST_CFLAGS)
    1: AC_SUBST(HOST_CXXFLAGS)
    1: AC_SUBST(HOST_OPTIMIZE_FLAGS)
    1: AC_SUBST(HOST_AR)
    1: AC_SUBST(HOST_AR_FLAGS)
    1: AC_SUBST(HOST_LD)
    1: AC_SUBST(HOST_RANLIB)
    1: AC_SUBST(HOST_NSPR_MDCPUCFG)
    1: AC_SUBST(HOST_BIN_SUFFIX)
    1: AC_SUBST(HOST_OS_ARCH)
    1: 
    1: AC_SUBST(TARGET_CPU)
    1: AC_SUBST(TARGET_VENDOR)
    1: AC_SUBST(TARGET_OS)
    1: AC_SUBST(TARGET_NSPR_MDCPUCFG)
    1: AC_SUBST(TARGET_MD_ARCH)
    1: AC_SUBST(TARGET_XPCOM_ABI)
    1: AC_SUBST(OS_TARGET)
    1: AC_SUBST(OS_ARCH)
    1: AC_SUBST(OS_RELEASE)
    1: AC_SUBST(OS_TEST)
    1: 
    1: AC_SUBST(MOZ_DISABLE_JAR_PACKAGING)
    1: AC_SUBST(MOZ_CHROME_FILE_FORMAT)
    1: 
    1: AC_SUBST(WRAP_MALLOC_CFLAGS)
    1: AC_SUBST(WRAP_MALLOC_LIB)
    1: AC_SUBST(MKSHLIB)
    1: AC_SUBST(MKCSHLIB)
    1: AC_SUBST(MKSHLIB_FORCE_ALL)
    1: AC_SUBST(MKSHLIB_UNFORCE_ALL)
    1: AC_SUBST(DSO_CFLAGS)
    1: AC_SUBST(DSO_PIC_CFLAGS)
    1: AC_SUBST(DSO_LDOPTS)
    1: AC_SUBST(LIB_PREFIX)
    1: AC_SUBST(DLL_PREFIX)
    1: AC_SUBST(DLL_SUFFIX)
    1: AC_DEFINE_UNQUOTED(MOZ_DLL_SUFFIX, "$DLL_SUFFIX")
    1: AC_SUBST(LIB_SUFFIX)
    1: AC_SUBST(OBJ_SUFFIX)
    1: AC_SUBST(BIN_SUFFIX)
    1: AC_SUBST(ASM_SUFFIX)
    1: AC_SUBST(IMPORT_LIB_SUFFIX)
    1: AC_SUBST(USE_N32)
    1: AC_SUBST(CC_VERSION)
    1: AC_SUBST(CXX_VERSION)
    1: AC_SUBST(MSMANIFEST_TOOL)
    1: 
    1: if test "$USING_HCC"; then
    1:    CC='${topsrcdir}/build/hcc'
    1:    CC="$CC '$_OLDCC'"
    1:    CXX='${topsrcdir}/build/hcpp'
    1:    CXX="$CXX '$_OLDCXX'"
    1:    AC_SUBST(CC)
    1:    AC_SUBST(CXX)
    1: fi
    1: 
    1: dnl Check for missing components
    1: if test "$COMPILE_ENVIRONMENT"; then
    1: if test "$MOZ_X11"; then
    1:     dnl ====================================================
    1:     dnl = Check if X headers exist
    1:     dnl ====================================================
    1:     _SAVE_CFLAGS=$CFLAGS
    1:     CFLAGS="$CFLAGS $XCFLAGS"
    1:     AC_TRY_COMPILE([
    1:         #include <stdio.h>
13878:         #include <stdlib.h>
    1:         #include <X11/Xlib.h>
    1:         #include <X11/Intrinsic.h>
    1:     ],
    1:     [
    1:         Display *dpy = 0;
    1:         if ((dpy = XOpenDisplay(NULL)) == NULL) {
    1:             fprintf(stderr, ": can't open %s\n", XDisplayName(NULL));
    1:             exit(1);
    1:         }
    1:     ], [], 
    1:     [ AC_MSG_ERROR([Could not compile basic X program.]) ])
    1:     CFLAGS="$_SAVE_CFLAGS"
    1: 
    1:     if test ! -z "$MISSING_X"; then
    1:         AC_MSG_ERROR([ Could not find the following X libraries: $MISSING_X ]);
    1:     fi
    1: 
    1: fi # MOZ_X11
    1: fi # COMPILE_ENVIRONMENT
    1: 
    1: dnl Set various defines and substitutions
    1: dnl ========================================================
    1: 
20288: if test "$OS_ARCH" = "BeOS"; then
    1:   AC_DEFINE(XP_BEOS)
    1:   MOZ_MOVEMAIL=1
    1: elif test "$OS_ARCH" = "Darwin"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
 5456:   MOZ_MOVEMAIL=1
    1: elif test "$OS_ARCH" = "OpenVMS"; then
    1:   AC_DEFINE(XP_UNIX)
    1: elif test "$OS_ARCH" != "WINNT" -a "$OS_ARCH" != "OS2" -a "$OS_ARCH" != "WINCE"; then
    1:   AC_DEFINE(XP_UNIX)
    1:   AC_DEFINE(UNIX_ASYNC_DNS)
    1:   MOZ_MOVEMAIL=1
    1: fi
    1: AC_SUBST(MOZ_MOVEMAIL)
    1: 
    1: if test "$MOZ_DEBUG"; then
    1:     AC_DEFINE(MOZ_REFLOW_PERF)
    1:     AC_DEFINE(MOZ_REFLOW_PERF_DSP)
    1: fi
    1: 
    1: if test "$ACCESSIBILITY" -a "$MOZ_ENABLE_GTK2" ; then
    1:     AC_DEFINE(MOZ_ACCESSIBILITY_ATK)
    1:     ATK_FULL_VERSION=`$PKG_CONFIG --modversion atk`
    1:     ATK_MAJOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $1 }'`
    1:     ATK_MINOR_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $2 }'`
    1:     ATK_REV_VERSION=`echo ${ATK_FULL_VERSION} | $AWK -F\. '{ print $3 }'`
    1:     AC_DEFINE_UNQUOTED(ATK_MAJOR_VERSION, $ATK_MAJOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_MINOR_VERSION, $ATK_MINOR_VERSION)
    1:     AC_DEFINE_UNQUOTED(ATK_REV_VERSION, $ATK_REV_VERSION)
    1: fi
    1: 
    1: # Used for LD_LIBRARY_PATH of run_viewer target
    1: LIBS_PATH=
    1: for lib_arg in $NSPR_LIBS $TK_LIBS; do
    1:   case $lib_arg in
    1:     -L* ) LIBS_PATH="${LIBS_PATH:+$LIBS_PATH:}"`expr $lib_arg : "-L\(.*\)"` ;;
    1:       * ) ;;
    1:   esac
    1: done
    1: AC_SUBST(LIBS_PATH)
    1: 
    1: dnl ========================================================
    1: dnl Use cygwin wrapper for win32 builds, except MSYS/MinGW
    1: dnl ========================================================
    1: case "$host_os" in
    1: mingw*)
    1:     WIN_TOP_SRC=`cd $srcdir; pwd -W`
    1:     ;;
    1: cygwin*|msvc*|mks*)
    1:     HOST_CC="\$(CYGWIN_WRAPPER) $HOST_CC"
    1:     HOST_CXX="\$(CYGWIN_WRAPPER) $HOST_CXX"
    1:     CC="\$(CYGWIN_WRAPPER) $CC"
    1:     CXX="\$(CYGWIN_WRAPPER) $CXX"
    1:     CPP="\$(CYGWIN_WRAPPER) $CPP"
    1:     LD="\$(CYGWIN_WRAPPER) $LD"
    1:     AS="\$(CYGWIN_WRAPPER) $AS"
    1:     RC="\$(CYGWIN_WRAPPER) $RC"
    1:     MIDL="\$(CYGWIN_WRAPPER) $MIDL"
    1:     CYGDRIVE_MOUNT=`mount -p | awk '{ if (/^\//) { print $1; exit } }'`
    1:     WIN_TOP_SRC=`cygpath -a -w $srcdir | sed -e 's|\\\\|/|g'`
    1:     ;;
    1: esac
    1: 
    1: AC_SUBST(CYGDRIVE_MOUNT)
    1: AC_SUBST(WIN_TOP_SRC)
    1: 
    1: AC_SUBST(MOZILLA_VERSION)
    1: 
    1: AC_SUBST(ac_configure_args)
    1: 
    1: dnl Spit out some output
    1: dnl ========================================================
    1: 
    1: dnl The following defines are used by xpcom
    1: _NON_GLOBAL_ACDEFINES="$_NON_GLOBAL_ACDEFINES
    1: CPP_THROW_NEW
    1: HAVE_CPP_2BYTE_WCHAR_T
    1: HAVE_CPP_ACCESS_CHANGING_USING
    1: HAVE_CPP_AMBIGUITY_RESOLVING_USING
    1: HAVE_CPP_BOOL
    1: HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR
    1: HAVE_CPP_EXPLICIT
    1: HAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX
    1: HAVE_CPP_NAMESPACE_STD
    1: HAVE_CPP_NEW_CASTS
    1: HAVE_CPP_PARTIAL_SPECIALIZATION
    1: HAVE_CPP_TROUBLE_COMPARING_TO_ZERO
    1: HAVE_CPP_TYPENAME
    1: HAVE_CPP_UNAMBIGUOUS_STD_NOTEQUAL
    1: HAVE_STATVFS
    1: NEED_CPP_UNUSED_IMPLEMENTATIONS
    1: NEW_H
    1: HAVE_GETPAGESIZE
    1: HAVE_ICONV
    1: HAVE_ICONV_WITH_CONST_INPUT
    1: HAVE_MBRTOWC
    1: HAVE_SYS_MOUNT_H
    1: HAVE_SYS_VFS_H
    1: HAVE_WCRTOMB
    1: "
    1: 
    1: AC_CONFIG_HEADER(
    1: netwerk/necko-config.h
    1: xpcom/xpcom-config.h
    1: xpcom/xpcom-private.h
    1: )
    1: 
    1: # Save the defines header file before autoconf removes it.
    1: # (Do not add AC_DEFINE calls after this line.)
    1:   _CONFIG_TMP=confdefs-tmp.h
    1:   _CONFIG_DEFS_H=mozilla-config.h
    1: 
    1:   cat > $_CONFIG_TMP <<\EOF
    1: /* List of defines generated by configure. Included with preprocessor flag,
    1:  * -include, to avoid long list of -D defines on the compile command-line.
    1:  * Do not edit.
    1:  */
    1: 
    1: #ifndef _MOZILLA_CONFIG_H_
    1: #define _MOZILLA_CONFIG_H_
    1: EOF
    1: 
    1: _EGREP_PATTERN='^#define ('
    1: if test -n "$_NON_GLOBAL_ACDEFINES"; then
    1:     for f in $_NON_GLOBAL_ACDEFINES; do
    1:         _EGREP_PATTERN="${_EGREP_PATTERN}$f|"
    1:     done
    1: fi
    1: _EGREP_PATTERN="${_EGREP_PATTERN}dummy_never_defined)"
    1:  
    1:   sort confdefs.h | egrep -v "$_EGREP_PATTERN" >> $_CONFIG_TMP
    1: 
    1:   cat >> $_CONFIG_TMP <<\EOF
    1: 
    1: #endif /* _MOZILLA_CONFIG_H_ */
    1: 
    1: EOF
    1: 
    1:   # Only write mozilla-config.h when something changes (or it doesn't exist)
    1:   if cmp -s $_CONFIG_TMP $_CONFIG_DEFS_H; then
    1:     rm $_CONFIG_TMP
    1:   else
    1:     AC_MSG_RESULT("creating $_CONFIG_DEFS_H")
    1:     mv -f $_CONFIG_TMP $_CONFIG_DEFS_H
    1: 
    1:     echo ==== $_CONFIG_DEFS_H =================================
    1:     cat $_CONFIG_DEFS_H
    1:   fi
    1: 
    1: dnl Probably shouldn't call this manually but we always want the output of DEFS
    1: rm -f confdefs.h.save
    1: mv confdefs.h confdefs.h.save
    1: egrep -v "$_EGREP_PATTERN" confdefs.h.save > confdefs.h
    1: AC_OUTPUT_MAKE_DEFS()
    1: MOZ_DEFINES=$DEFS
    1: AC_SUBST(MOZ_DEFINES)
    1: rm -f confdefs.h
    1: mv confdefs.h.save confdefs.h
    1: 
    1: dnl Load the list of Makefiles to generate.
    1: dnl   To add new Makefiles, edit allmakefiles.sh.
    1: dnl   allmakefiles.sh sets the variable, MAKEFILES.
    1: . ${srcdir}/allmakefiles.sh
    1: dnl 
    1: dnl Run a perl script to quickly create the makefiles.
    1: dnl If it succeeds, it outputs a shell command to set CONFIG_FILES
    1: dnl   for the files it cannot handle correctly. This way, config.status
    1: dnl   will handle these files.
    1: dnl If it fails, nothing is set and config.status will run as usual.
    1: dnl
    1: dnl This does not change the $MAKEFILES variable.
    1: dnl
    1: dnl OpenVMS gets a line overflow on the long eval command, so use a temp file.
    1: dnl
    1: if test -z "${AS_PERL}"; then
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl > conftest.sh
    1: else
    1: echo $MAKEFILES | ${PERL} $srcdir/build/autoconf/acoutput-fast.pl -nowrap --cygwin-srcdir=$srcdir > conftest.sh
    1: fi
    1: . ./conftest.sh
    1: rm conftest.sh
    1: 
    1: echo $MAKEFILES > unallmakefiles
    1: 
24557: mv -f config/autoconf.mk config/autoconf.mk.orig 2> /dev/null
24557: 
    1: AC_OUTPUT($MAKEFILES)
    1: 
16289: dnl Prevent the regeneration of cairo-features.h forcing rebuilds of gfx stuff
16289: if test "$CAIRO_FEATURES_H"; then
16289:   if cmp -s $CAIRO_FEATURES_H "$CAIRO_FEATURES_H".orig; then
24557:     echo "$CAIRO_FEATURES_H is unchanged"
16289:     mv -f "$CAIRO_FEATURES_H".orig "$CAIRO_FEATURES_H" 2> /dev/null
16289:   else
16289:     rm -f "$CAIRO_FEATURES_H".orig 2> /dev/null
16289:   fi
16289: fi
16289: 
    1: dnl ========================================================
    1: dnl = Setup a nice relatively clean build environment for
    1: dnl = sub-configures.
    1: dnl ========================================================
    1: CC="$_SUBDIR_CC" 
    1: CXX="$_SUBDIR_CXX" 
    1: CFLAGS="$_SUBDIR_CFLAGS" 
    1: CPPFLAGS="$_SUBDIR_CPPFLAGS"
    1: CXXFLAGS="$_SUBDIR_CXXFLAGS"
    1: LDFLAGS="$_SUBDIR_LDFLAGS"
    1: HOST_CC="$_SUBDIR_HOST_CC" 
    1: HOST_CFLAGS="$_SUBDIR_HOST_CFLAGS"
    1: HOST_LDFLAGS="$_SUBDIR_HOST_LDFLAGS"
    1: RC=
    1: 
    1: unset MAKEFILES
    1: unset CONFIG_FILES
    1: 
21115: # No need to run subconfigures when building with LIBXUL_SDK_DIR
21115: if test "$COMPILE_ENVIRONMENT" -a -z "$LIBXUL_SDK_DIR"; then
21115: 
17103: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS --with-dist-prefix=$MOZ_BUILD_ROOT/dist --with-mozilla"
    1:     if test -z "$MOZ_DEBUG"; then
    1:         ac_configure_args="$ac_configure_args --disable-debug"
    1:     fi
    1:     if test "$MOZ_OPTIMIZE" = "1"; then
    1:         ac_configure_args="$ac_configure_args --enable-optimize"
    1:     fi
    1:     if test "$OS_ARCH" = "WINNT" && test "$NS_TRACE_MALLOC"; then
    1:        ac_configure_args="$ac_configure_args --enable-debug --disable-optimize"
    1:     fi
    1:     if test -n "$HAVE_64BIT_OS"; then
    1:         ac_configure_args="$ac_configure_args --enable-64bit"
    1:     fi
15258:     if test -n "$USE_ARM_KUSER"; then
15258:         ac_configure_args="$ac_configure_args --with-arm-kuser"
15258:     fi
    1:     AC_OUTPUT_SUBDIRS(nsprpub)
    1:     ac_configure_args="$_SUBDIR_CONFIG_ARGS"
    1: fi
    1: 
    1: if test -z "$MOZ_NATIVE_NSPR"; then
    1:     # Hack to deal with the fact that we use NSPR_CFLAGS everywhere
    1:     AC_MSG_WARN([Recreating autoconf.mk with updated nspr-config output])
20288:     if test "$OS_ARCH" != "WINNT" && test "$OS_ARCH" != "WINCE"; then
18865:        NSPR_LIBS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --libdir=$LIBXUL_DIST/lib --libs`
18865:        $PERL -pi.bak -e "s '^NSPR_LIBS\\s*=.*'NSPR_LIBS = $NSPR_LIBS'" config/autoconf.mk
18865:        NSPR_CFLAGS=`./nsprpub/config/nspr-config --prefix=$LIBXUL_DIST --exec-prefix=$MOZ_BUILD_ROOT/dist --includedir=$LIBXUL_DIST/include/nspr --cflags`
18865:        $PERL -pi.bak -e "s '^NSPR_CFLAGS\\s*=.*'NSPR_CFLAGS = $NSPR_CFLAGS'" config/autoconf.mk
    1:     fi
    1:     rm -f config/autoconf.mk.bak
    1: fi
    1: 
21062: # Run the SpiderMonkey 'configure' script.
21062: dist=$MOZ_BUILD_ROOT/dist
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: ac_configure_args="$ac_configure_args --enable-threadsafe"
21152: if test -z "$MOZ_NATIVE_NSPR"; then
21062:     ac_configure_args="$ac_configure_args --with-nspr-cflags='$NSPR_CFLAGS'"
21062:     ac_configure_args="$ac_configure_args --with-nspr-libs='$NSPR_LIBS'"
21152: fi
23004: ac_configure_args="$ac_configure_args --with-dist-dir=../../dist"
21062: ac_configure_args="$ac_configure_args --includedir=$dist/include"
21062: ac_configure_args="$ac_configure_args --bindir=$dist/bin"
21062: ac_configure_args="$ac_configure_args --libdir=$dist/lib"
22636: ac_configure_args="$ac_configure_args --with-sync-build-files=$_topsrcdir"
21062: if test "$MOZ_MEMORY"; then
21062:    ac_configure_args="$ac_configure_args --enable-jemalloc"  
21062: fi
21062: AC_OUTPUT_SUBDIRS(js/src)
21062: ac_configure_args="$_SUBDIR_CONFIG_ARGS"
21062: 
21115: fi # COMPILE_ENVIRONMENT && !LIBXUL_SDK_DIR
24557: 
24557: dnl Prevent the regeneration of autoconf.mk forcing rebuilds of the world
24557: dnl Needs to be at the end to respect possible changes from NSPR configure
24778: if cmp -s config/autoconf.mk config/autoconf.mk.orig; then
24557:   echo "config/autoconf.mk is unchanged"
24557:   mv -f config/autoconf.mk.orig config/autoconf.mk 2> /dev/null
24557: else
24557:   rm -f config/autoconf.mk.orig 2> /dev/null
24557: fi
