 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 31149:  */
 31149: 
 31149: // Finds the test plugin library
 31149: function get_test_plugin() {
126164:   var pluginEnum = gDirSvc.get("APluginsDL", Ci.nsISimpleEnumerator);
126164:   while (pluginEnum.hasMoreElements()) {
126164:     let dir = pluginEnum.getNext().QueryInterface(Ci.nsILocalFile);
126164:     let plugin = dir.clone();
 31149:     // OSX plugin
 31149:     plugin.append("Test.plugin");
 31149:     if (plugin.exists()) {
 31149:       plugin.normalize();
 31149:       return plugin;
 31149:     }
126164:     plugin = dir.clone();
 31149:     // *nix plugin
 31149:     plugin.append("libnptest.so");
 31149:     if (plugin.exists()) {
 31149:       plugin.normalize();
 31149:       return plugin;
 31149:     }
 31149:     // Windows plugin
126164:     plugin = dir.clone();
 31149:     plugin.append("nptest.dll");
 31149:     if (plugin.exists()) {
 31149:       plugin.normalize();
 31149:       return plugin;
 31149:     }
126164:   }
 31149:   return null;
 31149: }
128023: 
128023: // Finds the test nsIPluginTag
128023: function get_test_plugintag() {
128023:   const Cc = Components.classes;
128023:   const Ci = Components.interfaces;
128023: 
128023:   var host = Cc["@mozilla.org/plugin/host;1"].
128023:              getService(Ci.nsIPluginHost);
128023:   var tags = host.getPluginTags();
128023:   for (var i = 0; i < tags.length; i++) {
128023:     if (tags[i].name == "Test Plug-in")
128023:       return tags[i];
128023:   }
128023:   return null;
128023: }
128023: 
128023: // Creates a fake ProfDS directory key, copied from do_get_profile
128023: function do_get_profile_startup() {
128023:   let env = Components.classes["@mozilla.org/process/environment;1"]
128023:                       .getService(Components.interfaces.nsIEnvironment);
128023:   // the python harness sets this in the environment for us
128023:   let profd = env.get("XPCSHELL_TEST_PROFILE_DIR");
128023:   let file = Components.classes["@mozilla.org/file/local;1"]
128023:                        .createInstance(Components.interfaces.nsILocalFile);
128023:   file.initWithPath(profd);
128023: 
128023:   let dirSvc = Components.classes["@mozilla.org/file/directory_service;1"]
128023:                          .getService(Components.interfaces.nsIProperties);
128023:   let provider = {
128023:     getFile: function(prop, persistent) {
128023:       persistent.value = true;
128023:       if (prop == "ProfDS") {
128023:         return file.clone();
128023:       }
128023:       throw Components.results.NS_ERROR_FAILURE;
128023:     },
128023:     QueryInterface: function(iid) {
128023:       if (iid.equals(Components.interfaces.nsIDirectoryServiceProvider) ||
128023:           iid.equals(Components.interfaces.nsISupports)) {
128023:         return this;
128023:       }
128023:       throw Components.results.NS_ERROR_NO_INTERFACE;
128023:     }
128023:   };
128023:   dirSvc.QueryInterface(Components.interfaces.nsIDirectoryService)
128023:         .registerProvider(provider);
128023:   return file.clone();
128023: }
