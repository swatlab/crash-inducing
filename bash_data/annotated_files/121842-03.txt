118588: /* This Source Code Form is subject to the terms of the Mozilla Public
118588:  * License, v. 2.0. If a copy of the MPL was not distributed with this
118588:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
118588: 
118588: // This test makes sure that Open Location dialog is usable inside the private browsing
118588: // mode without leaving any trace of the URLs visited.
118588: 
118588: function test() {
118588:   // initialization
121842:   gPrefService.setBoolPref("browser.privatebrowsing.keep_current_session", true);
121842:   let pb = Cc["@mozilla.org/privatebrowsing;1"].
121842:            getService(Ci.nsIPrivateBrowsingService);
118588:   waitForExplicitFinish();
118588: 
121842:   function openLocation(url, autofilled, callback) {
118588:     function observer(aSubject, aTopic, aData) {
118588:       switch (aTopic) {
118588:         case "domwindowopened":
118588:           let dialog = aSubject.QueryInterface(Ci.nsIDOMWindow);
118588:           dialog.addEventListener("load", function () {
118588:             dialog.removeEventListener("load", arguments.callee, false);
118588: 
121842:             let browser = gBrowser.selectedBrowser;
118588:             browser.addEventListener("load", function() {
118588:               browser.removeEventListener("load", arguments.callee, true);
118588: 
118588:               is(browser.currentURI.spec, url,
118588:                  "The correct URL should be loaded via the open location dialog");
118588:               executeSoon(callback);
118588:             }, true);
118588: 
118588:             SimpleTest.waitForFocus(function() {
118588:               let input = dialog.document.getElementById("dialog.input");
118588:               is(input.value, autofilled, "The input field should be correctly auto-filled");
118588:               input.focus();
118588:               for (let i = 0; i < url.length; ++i)
118588:                 EventUtils.synthesizeKey(url[i], {}, dialog);
118588:               EventUtils.synthesizeKey("VK_RETURN", {}, dialog);
118588:             }, dialog);
118588:           }, false);
118588:           break;
118588: 
118588:         case "domwindowclosed":
118588:           Services.ww.unregisterNotification(arguments.callee);
118588:           break;
118588:       }
118588:     }
118588: 
118588:     Services.ww.registerNotification(observer);
118588:     gPrefService.setIntPref("general.open_location.last_window_choice", 0);
121842:     openDialog("chrome://browser/content/openLocation.xul", "_blank",
121842:                "chrome,titlebar", window);
118588:   }
118588: 
118588: 
118588:   if (gPrefService.prefHasUserValue("general.open_location.last_url"))
118588:     gPrefService.clearUserPref("general.open_location.last_url");
118588: 
121842:   openLocation("http://example.com/", "", function() {
121842:     openLocation("http://example.org/", "http://example.com/", function() {
121842:       // enter private browsing mode
121842:       pb.privateBrowsingEnabled = true;
121842:       openLocation("about:logo", "", function() {
121842:         openLocation("about:buildconfig", "about:logo", function() {
121842:           // exit private browsing mode
121842:           pb.privateBrowsingEnabled = false;
121842:           openLocation("about:blank", "http://example.org/", function() {
118588:             gPrefService.clearUserPref("general.open_location.last_url");
118588:             if (gPrefService.prefHasUserValue("general.open_location.last_window_choice"))
118588:               gPrefService.clearUserPref("general.open_location.last_window_choice");
121842:             gPrefService.clearUserPref("browser.privatebrowsing.keep_current_session");
118588:             finish();
118588:           });
118588:         });
118588:       });
118588:     });
118588:   });
118588: }
