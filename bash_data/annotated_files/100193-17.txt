 89941: /* Any copyright is dedicated to the Public Domain.
 89941:    http://creativecommons.org/publicdomain/zero/1.0/ */
 89941: "use strict";
 89941: 
100193: let nodeHighlighted = false;
 89941: let presenter;
 89941: 
 89941: function test() {
 89941:   if (!isTiltEnabled()) {
 89941:     info("Skipping highlight test because Tilt isn't enabled.");
 89941:     return;
 89941:   }
 89941:   if (!isWebGLSupported()) {
 89941:     info("Skipping highlight test because WebGL isn't supported.");
 89941:     return;
 89941:   }
 89941: 
 89941:   waitForExplicitFinish();
 89941: 
 89941:   createTab(function() {
 89941:     createTilt({
 89941:       onTiltOpen: function(instance)
 89941:       {
 89941:         presenter = instance.presenter;
 89941:         Services.obs.addObserver(whenHighlighting, HIGHLIGHTING, false);
 89941: 
 91042:         presenter._onInitializationFinished = function() {
 89941:           let contentDocument = presenter.contentWindow.document;
 89941:           let div = contentDocument.getElementById("far-far-away");
 89941: 
100193:           nodeHighlighted = true;
 89941:           presenter.highlightNode(div, "moveIntoView");
 89941:         };
 89941:       }
100193:     }, false, function suddenDeath()
100193:     {
100193:       info("Tilt could not be initialized properly.");
100193:       cleanup();
 89941:     });
 89941:   });
 89941: }
 89941: 
 89941: function whenHighlighting() {
 89941:   ok(presenter._currentSelection > 0,
 89941:     "Highlighting a node didn't work properly.");
 91042:   ok(!presenter._highlight.disabled,
 89941:     "After highlighting a node, it should be highlighted. D'oh.");
 91040:   ok(presenter.controller.arcball._resetInProgress,
 89941:     "Highlighting a node that's not already visible should trigger a reset!");
 89941: 
 89941:   executeSoon(function() {
 93471:     Services.obs.removeObserver(whenHighlighting, HIGHLIGHTING);
 89941:     Services.obs.addObserver(whenUnhighlighting, UNHIGHLIGHTING, false);
 89941:     presenter.highlightNode(null);
 89941:   });
 89941: }
 89941: 
 89941: function whenUnhighlighting() {
 89941:   ok(presenter._currentSelection < 0,
 89941:     "Unhighlighting a should remove the current selection.");
 91042:   ok(presenter._highlight.disabled,
 89941:     "After unhighlighting a node, it shouldn't be highlighted anymore. D'oh.");
 89941: 
 89941:   executeSoon(function() {
 93471:     Services.obs.removeObserver(whenUnhighlighting, UNHIGHLIGHTING);
 89941:     Services.obs.addObserver(cleanup, DESTROYED, false);
 89941:     InspectorUI.closeInspectorUI();
 89941:   });
 89941: }
 89941: 
 89941: function cleanup() {
100193:   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
 89941:   gBrowser.removeCurrentTab();
 89941:   finish();
 89941: }
