43264: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
43264:  * vim: set ts=4 sw=4 et tw=99:
43264:  *
43264:  * ***** BEGIN LICENSE BLOCK *****
43264:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43264:  *
43264:  * The contents of this file are subject to the Mozilla Public License Version
43264:  * 1.1 (the "License"); you may not use this file except in compliance with
43264:  * the License. You may obtain a copy of the License at
43264:  * http://www.mozilla.org/MPL/
43264:  *
43264:  * Software distributed under the License is distributed on an "AS IS" basis,
43264:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43264:  * for the specific language governing rights and limitations under the
43264:  * License.
43264:  *
43264:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
43264:  * May 28, 2008.
43264:  *
43264:  * The Initial Developer of the Original Code is
43264:  *   Mozilla Foundation
43264:  * Portions created by the Initial Developer are Copyright (C) 2010
43264:  * the Initial Developer. All Rights Reserved.
43264:  *
43264:  * Contributor(s):
43264:  *   Andreas Gal <gal@mozilla.com>
43264:  *
43264:  * Alternatively, the contents of this file may be used under the terms of
43264:  * either of the GNU General Public License Version 2 or later (the "GPL"),
43264:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43264:  * in which case the provisions of the GPL or the LGPL are applicable instead
43264:  * of those above. If you wish to allow use of your version of this file only
43264:  * under the terms of either the GPL or the LGPL, and not to allow others to
43264:  * use your version of this file under the terms of the MPL, indicate your
43264:  * decision by deleting the provisions above and replace them with the notice
43264:  * and other provisions required by the GPL or the LGPL. If you do not delete
43264:  * the provisions above, a recipient may use your version of this file under
43264:  * the terms of any one of the MPL, the GPL or the LGPL.
43264:  *
43264:  * ***** END LICENSE BLOCK ***** */
43264: 
43264: #include "jsapi.h"
43264: #include "jscntxt.h"
43264: #include "jsiter.h"
43264: #include "jsnum.h"
47518: #include "jsregexp.h"
43264: #include "jswrapper.h"
53391: #include "methodjit/PolyIC.h"
53405: #include "methodjit/MonoIC.h"
53391: #ifdef JS_METHODJIT
53391: # include "assembler/jit/ExecutableAllocator.h"
53391: #endif
54707: #include "jscompartment.h"
43264: 
43264: #include "jsobjinlines.h"
43264: 
43264: using namespace js;
54707: using namespace js::gc;
43264: 
55599: static int sWrapperFamily;
55599: 
55599: void *
55599: JSWrapper::getWrapperFamily()
55599: {
55599:     return &sWrapperFamily;
55599: }
47516: 
47516: bool
47516: JSObject::isWrapper() const
47516: {
47516:     return isProxy() && getProxyHandler()->family() == &sWrapperFamily;
47516: }
47516: 
47516: JSObject *
47574: JSObject::unwrap(uintN *flagsp)
47516: {
47516:     JSObject *wrapped = this;
47574:     uintN flags = 0;
55691:     while (wrapped->isWrapper()) {
47574:         flags |= static_cast<JSWrapper *>(wrapped->getProxyHandler())->flags();
48470:         wrapped = wrapped->getProxyPrivate().toObjectOrNull();
55697:         if (wrapped->getClass()->ext.innerObject)
55697:             break;
47574:     }
47574:     if (flagsp)
47574:         *flagsp = flags;
47516:     return wrapped;
47516: }
47516: 
47574: JSWrapper::JSWrapper(uintN flags) : JSProxyHandler(&sWrapperFamily), mFlags(flags)
43264: {
43264: }
43264: 
43264: JSWrapper::~JSWrapper()
43264: {
43264: }
43264: 
55587: #define CHECKED(op, act)                                                     \
47574:     JS_BEGIN_MACRO                                                           \
61693:         bool status;                                                         \
61693:         if (!enter(cx, wrapper, id, act, &status))                           \
61693:             return status;                                                   \
47574:         bool ok = (op);                                                      \
47574:         leave(cx, wrapper);                                                  \
47574:         return ok;                                                           \
47574:     JS_END_MACRO
47574: 
55587: #define SET(action) CHECKED(action, SET)
55587: #define GET(action) CHECKED(action, GET)
47574: 
47565: bool
47574: JSWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
55592:                                  bool set, PropertyDescriptor *desc)
47565: {
61693:     desc->obj = NULL; // default result if we refuse to perform this action
55592:     CHECKED(JS_GetPropertyDescriptorById(cx, wrappedObject(wrapper), id, JSRESOLVE_QUALIFIED,
55592:                                          Jsvalify(desc)), set ? SET : GET);
47565: }
47562: 
47574: static bool
47574: GetOwnPropertyDescriptor(JSContext *cx, JSObject *obj, jsid id, uintN flags, JSPropertyDescriptor *desc)
43264: {
47574:     if (!JS_GetPropertyDescriptorById(cx, obj, id, flags, desc))
43264:         return false;
47574:     if (desc->obj != obj)
47574:         desc->obj = NULL;
43264:     return true;
43264: }
43264: 
43264: bool
55592: JSWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id, bool set,
48470:                                     PropertyDescriptor *desc)
43264: {
61693:     desc->obj= NULL; // default result if we refuse to perform this action
55592:     CHECKED(GetOwnPropertyDescriptor(cx, wrappedObject(wrapper), id, JSRESOLVE_QUALIFIED,
55592:                                      Jsvalify(desc)), set ? SET : GET);
43264: }
43264: 
43264: bool
47574: JSWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id,
48470:                           PropertyDescriptor *desc)
47574: {
48470:     SET(JS_DefinePropertyById(cx, wrappedObject(wrapper), id, Jsvalify(desc->value),
48470:                               Jsvalify(desc->getter), Jsvalify(desc->setter), desc->attrs));
47574: }
47574: 
47574: bool
48470: JSWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
61693:     // if we refuse to perform this action, props remains empty
48470:     jsid id = JSID_VOID;
54562:     GET(GetPropertyNames(cx, wrappedObject(wrapper), JSITER_OWNONLY | JSITER_HIDDEN, &props));
47574: }
47574: 
47574: static bool
48470: ValueToBoolean(Value *vp, bool *bp)
47574: {
47574:     *bp = js_ValueToBoolean(*vp);
47574:     return true;
47574: }
47574: 
47574: bool
47574: JSWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47574: {
61693:     *bp = true; // default result if we refuse to perform this action
48470:     Value v;
48470:     SET(JS_DeletePropertyById2(cx, wrappedObject(wrapper), id, Jsvalify(&v)) &&
47574:         ValueToBoolean(&v, bp));
47574: }
47574: 
47574: bool
48470: JSWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
61693:     // if we refuse to perform this action, props remains empty
48470:     static jsid id = JSID_VOID;
54562:     GET(GetPropertyNames(cx, wrappedObject(wrapper), 0, &props));
47574: }
47574: 
47574: bool
48470: JSWrapper::fix(JSContext *cx, JSObject *wrapper, Value *vp)
43264: {
48470:     vp->setUndefined();
43264:     return true;
43264: }
43264: 
47574: static bool
47574: Cond(JSBool b, bool *bp)
43264: {
47574:     *bp = !!b;
43264:     return true;
43264: }
43264: 
43264: bool
47574: JSWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47574: {
61693:     *bp = false; // default result if we refuse to perform this action
47574:     JSBool found;
47574:     GET(JS_HasPropertyById(cx, wrappedObject(wrapper), id, &found) &&
47574:         Cond(found, bp));
47574: }
47574: 
47574: bool
47574: JSWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47562: {
61693:     *bp = false; // default result if we refuse to perform this action
48470:     PropertyDescriptor desc;
47574:     JSObject *wobj = wrappedObject(wrapper);
48470:     GET(JS_GetPropertyDescriptorById(cx, wobj, id, JSRESOLVE_QUALIFIED, Jsvalify(&desc)) &&
47574:         Cond(desc.obj == wobj, bp));
47574: }
47574: 
47574: bool
48470: JSWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47574: {
61693:     vp->setUndefined(); // default result if we refuse to perform this action
56817:     GET(wrappedObject(wrapper)->getProperty(cx, receiver, id, vp));
47574: }
47574: 
47574: bool
62395: JSWrapper::set(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, bool strict,
62395:                Value *vp)
47574: {
56817:     // FIXME (bug 596351): Need deal with strict mode.
56817:     SET(wrappedObject(wrapper)->setProperty(cx, id, vp, false));
47574: }
47574: 
47574: bool
60532: JSWrapper::keys(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47574: {
61693:     // if we refuse to perform this action, props remains empty
48470:     const jsid id = JSID_VOID;
54562:     GET(GetPropertyNames(cx, wrappedObject(wrapper), JSITER_OWNONLY, &props));
47574: }
47574: 
47574: bool
48470: JSWrapper::iterate(JSContext *cx, JSObject *wrapper, uintN flags, Value *vp)
47574: {
61693:     vp->setUndefined(); // default result if we refuse to perform this action
48470:     const jsid id = JSID_VOID;
47574:     GET(GetIterator(cx, wrappedObject(wrapper), flags, vp));
47574: }
47574: 
47574: bool
48470: JSWrapper::call(JSContext *cx, JSObject *wrapper, uintN argc, Value *vp)
47574: {
61693:     vp->setUndefined(); // default result if we refuse to perform this action
48470:     const jsid id = JSID_VOID;
55587:     CHECKED(JSProxyHandler::call(cx, wrapper, argc, vp), CALL);
47574: }
47574: 
47574: bool
61693: JSWrapper::construct(JSContext *cx, JSObject *wrapper, uintN argc, Value *argv, Value *vp)
47574: {
61693:     vp->setUndefined(); // default result if we refuse to perform this action
48470:     const jsid id = JSID_VOID;
61693:     GET(JSProxyHandler::construct(cx, wrapper, argc, argv, vp));
47574: }
47574: 
55650: bool
55650: JSWrapper::hasInstance(JSContext *cx, JSObject *wrapper, const Value *vp, bool *bp)
55650: {
61693:     *bp = true; // default result if we refuse to perform this action
55650:     const jsid id = JSID_VOID;
55650:     JSBool b;
55650:     GET(JS_HasInstance(cx, wrappedObject(wrapper), Jsvalify(*vp), &b) && Cond(b, bp));
55650: }
55650: 
57775: JSType
57775: JSWrapper::typeOf(JSContext *cx, JSObject *wrapper)
57775: {
57775:     return TypeOfValue(cx, ObjectValue(*wrappedObject(wrapper)));
57775: }
57775: 
47574: JSString *
47574: JSWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
47574: {
61693:     bool status;
61693:     if (!enter(cx, wrapper, JSID_VOID, GET, &status)) {
61693:         if (status) {
61693:             // Perform some default behavior that doesn't leak any information.
61693:             return JS_NewStringCopyZ(cx, "[object Object]");
61693:         }
47574:         return NULL;
61693:     }
61693:     JSString *str = obj_toStringHelper(cx, wrappedObject(wrapper));
47574:     leave(cx, wrapper);
47574:     return str;
47574: }
47574: 
47574: JSString *
47574: JSWrapper::fun_toString(JSContext *cx, JSObject *wrapper, uintN indent)
47574: {
61693:     bool status;
61693:     if (!enter(cx, wrapper, JSID_VOID, GET, &status)) {
61693:         if (status) {
61693:             // Perform some default behavior that doesn't leak any information.
61693:             if (wrapper->isCallable())
61693:                 return JS_NewStringCopyZ(cx, "function () {\n    [native code]\n}");
61693:             js::Value v = ObjectValue(*wrapper);
61693:             js_ReportIsNotFunction(cx, &v, 0);
47574:             return NULL;
61693:         }
61693:         return NULL;
61693:     }
61693:     JSString *str = JSProxyHandler::fun_toString(cx, wrapper, indent);
47574:     leave(cx, wrapper);
47574:     return str;
47574: }
47574: 
47574: void
47574: JSWrapper::trace(JSTracer *trc, JSObject *wrapper)
47574: {
54707:     MarkObject(trc, *wrappedObject(wrapper), "wrappedObject");
47574: }
47574: 
47574: bool
61693: JSWrapper::enter(JSContext *cx, JSObject *wrapper, jsid id, Action act, bool *bp)
47574: {
61693:     *bp = true;
47565:     return true;
47562: }
47562: 
47574: void
47574: JSWrapper::leave(JSContext *cx, JSObject *wrapper)
43264: {
47562: }
47562: 
55617: JSWrapper JSWrapper::singleton((uintN)0);
47498: 
47498: JSObject *
47498: JSWrapper::New(JSContext *cx, JSObject *obj, JSObject *proto, JSObject *parent,
47574:                JSWrapper *handler)
47498: {
56819:     JS_ASSERT(parent);
57775:     if (obj->isXML()) {
57775:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_WRAP_XML_OBJECT);
57775:         return NULL;
57775:     }
48470:     return NewProxyObject(cx, handler, ObjectValue(*obj), proto, parent,
47498:                           obj->isCallable() ? obj : NULL, NULL);
47498: }
47498: 
47516: /* Compartments. */
47498: 
47516: namespace js {
47498: 
47516: extern JSObject *
55580: TransparentObjectWrapper(JSContext *cx, JSObject *obj, JSObject *wrappedProto, JSObject *parent,
55580:                          uintN flags)
47498: {
54404:     // Allow wrapping outer window proxies.
54404:     JS_ASSERT(!obj->isWrapper() || obj->getClass()->ext.innerObject);
56821:     return JSWrapper::New(cx, obj, wrappedProto, parent, &JSCrossCompartmentWrapper::singleton);
47498: }
47498: 
47498: }
47498: 
47498: AutoCompartment::AutoCompartment(JSContext *cx, JSObject *target)
47498:     : context(cx),
47498:       origin(cx->compartment),
47498:       target(target),
56578:       destination(target->getCompartment()),
48530:       input(cx),
48530:       entered(false)
47498: {
47498: }
43264: 
47498: AutoCompartment::~AutoCompartment()
43264: {
48530:     if (entered)
47498:         leave();
47498: }
47498: 
47498: bool
47498: AutoCompartment::enter()
47498: {
48530:     JS_ASSERT(!entered);
48530:     if (origin != destination) {
51471:         LeaveTrace(context);
55607: 
47498:         context->compartment = destination;
51471:         JSObject *scopeChain = target->getGlobal();
56819:         JS_ASSERT(scopeChain->isNative());
60245: 
47498:         frame.construct();
60245:         if (!context->stack().pushDummyFrame(context, *scopeChain, &frame.ref())) {
47498:             context->compartment = origin;
48530:             return false;
47498:         }
60798: 
60798:         if (context->isExceptionPending())
60798:             context->wrapPendingException();
48530:     }
48530:     entered = true;
48530:     return true;
47498: }
47498: 
47498: void
47498: AutoCompartment::leave()
47498: {
48530:     JS_ASSERT(entered);
48530:     if (origin != destination) {
47498:         frame.destroy();
55607:         context->resetCompartment();
47498:     }
48530:     entered = false;
48530: }
47498: 
47498: /* Cross compartment wrappers. */
47498: 
58714: JSCrossCompartmentWrapper::JSCrossCompartmentWrapper(uintN flags)
58714:   : JSWrapper(CROSS_COMPARTMENT | flags)
47498: {
47498: }
47498: 
47498: JSCrossCompartmentWrapper::~JSCrossCompartmentWrapper()
47498: {
47498: }
47498: 
47574: #define PIERCE(cx, wrapper, mode, pre, op, post)            \
47516:     JS_BEGIN_MACRO                                          \
47574:         AutoCompartment call(cx, wrappedObject(wrapper));   \
47574:         if (!call.enter())                                  \
47516:             return false;                                   \
47574:         bool ok = (pre) && (op);                            \
47516:         call.leave();                                       \
47574:         return ok && (post);                                \
47516:     JS_END_MACRO
47516: 
47516: #define NOTHING (true)
47516: 
47498: bool
55592: JSCrossCompartmentWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
55592:                                                  bool set, PropertyDescriptor *desc)
47498: {
55592:     PIERCE(cx, wrapper, set ? SET : GET,
47498:            call.destination->wrapId(cx, &id),
55592:            JSWrapper::getPropertyDescriptor(cx, wrapper, id, set, desc),
47498:            call.origin->wrap(cx, desc));
47498: }
47498: 
47498: bool
55592: JSCrossCompartmentWrapper::getOwnPropertyDescriptor(JSContext *cx, JSObject *wrapper, jsid id,
55592:                                                     bool set, PropertyDescriptor *desc)
47498: {
55592:     PIERCE(cx, wrapper, set ? SET : GET,
47498:            call.destination->wrapId(cx, &id),
55592:            JSWrapper::getOwnPropertyDescriptor(cx, wrapper, id, set, desc),
47498:            call.origin->wrap(cx, desc));
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::defineProperty(JSContext *cx, JSObject *wrapper, jsid id, PropertyDescriptor *desc)
47498: {
48470:     AutoPropertyDescriptorRooter desc2(cx, desc);
47574:     PIERCE(cx, wrapper, SET,
47498:            call.destination->wrapId(cx, &id) && call.destination->wrap(cx, &desc2),
47574:            JSWrapper::defineProperty(cx, wrapper, id, &desc2),
47498:            NOTHING);
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::getOwnPropertyNames(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::getOwnPropertyNames(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::delete_(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, SET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::delete_(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::enumerate(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::enumerate(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::has(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
47574: JSCrossCompartmentWrapper::hasOwn(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrapId(cx, &id),
47574:            JSWrapper::hasOwn(cx, wrapper, id, bp),
47498:            NOTHING);
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id, Value *vp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            call.destination->wrap(cx, &receiver) && call.destination->wrapId(cx, &id),
47574:            JSWrapper::get(cx, wrapper, receiver, id, vp),
47498:            call.origin->wrap(cx, vp));
47498: }
47498: 
47498: bool
62395: JSCrossCompartmentWrapper::set(JSContext *cx, JSObject *wrapper, JSObject *receiver, jsid id,
62395:                                bool strict, Value *vp)
47498: {
47498:     AutoValueRooter tvr(cx, *vp);
47574:     PIERCE(cx, wrapper, SET,
62395:            call.destination->wrap(cx, &receiver) &&
62395:            call.destination->wrapId(cx, &id) &&
62395:            call.destination->wrap(cx, tvr.addr()),
62395:            JSWrapper::set(cx, wrapper, receiver, id, strict, tvr.addr()),
47498:            NOTHING);
47498: }
47498: 
47498: bool
60532: JSCrossCompartmentWrapper::keys(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
60532:            JSWrapper::keys(cx, wrapper, props),
47525:            call.origin->wrap(cx, props));
47525: }
47525: 
47525: /*
47525:  * We can reify non-escaping iterator objects instead of having to wrap them. This
47525:  * allows fast iteration over objects across a compartment boundary.
47525:  */
47525: static bool
48470: CanReify(Value *vp)
47525: {
48470:     JSObject *obj;
48470:     return vp->isObject() &&
48622:            (obj = &vp->toObject())->getClass() == &js_IteratorClass &&
48470:            (obj->getNativeIterator()->flags & JSITER_ENUMERATE);
47525: }
47525: 
59240: struct AutoCloseIterator
59240: {
59240:     AutoCloseIterator(JSContext *cx, JSObject *obj) : cx(cx), obj(obj) {}
59240: 
59240:     ~AutoCloseIterator() { if (obj) js_CloseIterator(cx, obj); }
59240: 
59240:     void clear() { obj = NULL; }
59240: 
59240:   private:
59240:     JSContext *cx;
59240:     JSObject *obj;
59240: };
59240: 
47525: static bool
48470: Reify(JSContext *cx, JSCompartment *origin, Value *vp)
47525: {
48470:     JSObject *iterObj = &vp->toObject();
47525:     NativeIterator *ni = iterObj->getNativeIterator();
48470: 
59240:     AutoCloseIterator close(cx, iterObj);
59240: 
48470:     /* Wrap the iteratee. */
48470:     JSObject *obj = ni->obj;
48470:     if (!origin->wrap(cx, &obj))
48470:         return false;
48470: 
48470:     /*
48470:      * Wrap the elements in the iterator's snapshot.
48470:      * N.B. the order of closing/creating iterators is important due to the
48470:      * implicit cx->enumerators state.
48470:      */
48470:     size_t length = ni->numKeys();
61055:     bool isKeyIter = ni->isKeyIter();
48470:     AutoIdVector keys(cx);
47525:     if (length > 0) {
48470:         if (!keys.resize(length))
48470:             return false;
48470:         for (size_t i = 0; i < length; ++i) {
61055:             keys[i] = ni->begin()[i];
48470:             if (!origin->wrapId(cx, &keys[i]))
48470:                 return false;
48470:         }
47525:     }
47525: 
59240:     close.clear();
61055:     if (!js_CloseIterator(cx, iterObj))
61055:         return false;
60785: 
61055:     if (isKeyIter)
61055:         return VectorToKeyIterator(cx, obj, ni->flags, keys, vp);
61055:     return VectorToValueIterator(cx, obj, ni->flags, keys, vp); 
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::iterate(JSContext *cx, JSObject *wrapper, uintN flags, Value *vp)
47498: {
47574:     PIERCE(cx, wrapper, GET,
47498:            NOTHING,
47574:            JSWrapper::iterate(cx, wrapper, flags, vp),
47525:            CanReify(vp) ? Reify(cx, call.origin, vp) : call.origin->wrap(cx, vp));
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::call(JSContext *cx, JSObject *wrapper, uintN argc, Value *vp)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
47498:         return false;
47498: 
48470:     vp[0] = ObjectValue(*call.target);
47498:     if (!call.destination->wrap(cx, &vp[1]))
47498:         return false;
48470:     Value *argv = JS_ARGV(cx, vp);
47498:     for (size_t n = 0; n < argc; ++n) {
47498:         if (!call.destination->wrap(cx, &argv[n]))
47498:             return false;
47498:     }
47574:     if (!JSWrapper::call(cx, wrapper, argc, vp))
47498:         return false;
47498: 
47498:     call.leave();
47498:     return call.origin->wrap(cx, vp);
47498: }
47498: 
47498: bool
48470: JSCrossCompartmentWrapper::construct(JSContext *cx, JSObject *wrapper, uintN argc, Value *argv,
48470:                                      Value *rval)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
47498:         return false;
47498: 
47498:     for (size_t n = 0; n < argc; ++n) {
47498:         if (!call.destination->wrap(cx, &argv[n]))
47498:             return false;
47498:     }
47588:     if (!JSWrapper::construct(cx, wrapper, argc, argv, rval))
47498:         return false;
47498: 
47498:     call.leave();
60245:     return call.origin->wrap(cx, rval);
47498: }
47498: 
55650: bool
55650: JSCrossCompartmentWrapper::hasInstance(JSContext *cx, JSObject *wrapper, const Value *vp, bool *bp)
55650: {
55650:     AutoCompartment call(cx, wrappedObject(wrapper));
55650:     if (!call.enter())
55650:         return false;
55650: 
55650:     Value v = *vp;
55650:     if (!call.destination->wrap(cx, &v))
55650:         return false;
55650:     return JSWrapper::hasInstance(cx, wrapper, &v, bp);
55650: }
55650: 
47498: JSString *
47574: JSCrossCompartmentWrapper::obj_toString(JSContext *cx, JSObject *wrapper)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
43264:         return NULL;
47498: 
47574:     JSString *str = JSWrapper::obj_toString(cx, wrapper);
47498:     if (!str)
43264:         return NULL;
47498: 
47498:     call.leave();
47498:     if (!call.origin->wrap(cx, &str))
47498:         return NULL;
47498:     return str;
43264: }
47498: 
47498: JSString *
47574: JSCrossCompartmentWrapper::fun_toString(JSContext *cx, JSObject *wrapper, uintN indent)
47498: {
47574:     AutoCompartment call(cx, wrappedObject(wrapper));
47498:     if (!call.enter())
43264:         return NULL;
47498: 
47574:     JSString *str = JSWrapper::fun_toString(cx, wrapper, indent);
47498:     if (!str)
47498:         return NULL;
47498: 
47498:     call.leave();
47498:     if (!call.origin->wrap(cx, &str))
47498:         return NULL;
47498:     return str;
43264: }
47498: 
55599: JSCrossCompartmentWrapper JSCrossCompartmentWrapper::singleton(0u);
