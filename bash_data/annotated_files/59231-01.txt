42733: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42733:  * vim: set ts=4 sw=4 et tw=99:
42733:  *
42733:  * ***** BEGIN LICENSE BLOCK *****
42733:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42733:  *
42733:  * The contents of this file are subject to the Mozilla Public License Version
42733:  * 1.1 (the "License"); you may not use this file except in compliance with
42733:  * the License. You may obtain a copy of the License at
42733:  * http://www.mozilla.org/MPL/
42733:  *
42733:  * Software distributed under the License is distributed on an "AS IS" basis,
42733:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42733:  * for the specific language governing rights and limitations under the
42733:  * License.
42733:  *
42733:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
42733:  * May 28, 2008.
42733:  *
42733:  * The Initial Developer of the Original Code is
42733:  *   Mozilla Foundation
42733:  * Portions created by the Initial Developer are Copyright (C) 2009
42733:  * the Initial Developer. All Rights Reserved.
42733:  *
42733:  * Contributor(s):
42733:  *   Andreas Gal <gal@mozilla.com>
42733:  *
42733:  * Alternatively, the contents of this file may be used under the terms of
42733:  * either of the GNU General Public License Version 2 or later (the "GPL"),
42733:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42733:  * in which case the provisions of the GPL or the LGPL are applicable instead
42733:  * of those above. If you wish to allow use of your version of this file only
42733:  * under the terms of either the GPL or the LGPL, and not to allow others to
42733:  * use your version of this file under the terms of the MPL, indicate your
42733:  * decision by deleting the provisions above and replace them with the notice
42733:  * and other provisions required by the GPL or the LGPL. If you do not delete
42733:  * the provisions above, a recipient may use your version of this file under
42733:  * the terms of any one of the MPL, the GPL or the LGPL.
42733:  *
42733:  * ***** END LICENSE BLOCK ***** */
42733: 
42733: #include <string.h>
42733: #include "jsapi.h"
42733: #include "jscntxt.h"
42733: #include "jsprvtd.h"
42733: #include "jsnum.h"
42733: #include "jsobj.h"
42733: #include "jsproxy.h"
42733: #include "jsscope.h"
42733: 
42733: #include "jsobjinlines.h"
42733: 
42733: using namespace js;
54707: using namespace js::gc;
42733: 
42832: namespace js {
42832: 
48470: static inline const Value &
47498: GetCall(JSObject *proxy) {
47498:     JS_ASSERT(proxy->isFunctionProxy());
47498:     return proxy->getSlot(JSSLOT_PROXY_CALL);
47498: }
47498: 
48470: static inline Value
47498: GetConstruct(JSObject *proxy) {
47498:     if (proxy->numSlots() <= JSSLOT_PROXY_CONSTRUCT)
48470:         return UndefinedValue();
47498:     return proxy->getSlot(JSSLOT_PROXY_CONSTRUCT);
47498: }
47498: 
43279: static bool
43279: OperationInProgress(JSContext *cx, JSObject *proxy)
43279: {
43279:     JSPendingProxyOperation *op = JS_THREAD_DATA(cx)->pendingProxyOperation;
43279:     while (op) {
43279:         if (op->object == proxy)
43279:             return true;
43279:         op = op->next;
43279:     }
43279:     return false;
43279: }
43279: 
47516: JSProxyHandler::JSProxyHandler(void *family) : mFamily(family)
47516: {
47516: }
47516: 
42733: JSProxyHandler::~JSProxyHandler()
42733: {
42733: }
42733: 
42733: bool
42733: JSProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
42733: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
42733:         return false;
42733:     *bp = !!desc.obj;
42733:     return true;
42733: }
42733: 
42733: bool
42733: JSProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
42733: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
42733:         return false;
42733:     *bp = !!desc.obj;
42733:     return true;
42733: }
42733: 
42733: bool
48470: JSProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
42733: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
42733:         return false;
42733:     if (!desc.obj) {
48470:         vp->setUndefined();
42733:         return true;
42733:     }
54401:     if (!desc.getter ||
54401:         (!(desc.attrs & JSPROP_GETTER) && desc.getter == PropertyStub)) {
42733:         *vp = desc.value;
42733:         return true;
42733:     }
42745:     if (desc.attrs & JSPROP_GETTER) {
56817:         return ExternalGetOrSet(cx, receiver, id, CastAsObjectJsval(desc.getter),
54402:                                 JSACC_READ, 0, NULL, vp);
42745:     }
54403:     if (!(desc.attrs & JSPROP_SHARED))
54403:         *vp = desc.value;
55682:     else
55682:         vp->setUndefined();
42745:     if (desc.attrs & JSPROP_SHORTID)
42745:         id = INT_TO_JSID(desc.shortid);
56817:     return CallJSPropertyOp(cx, desc.getter, receiver, id, vp);
42733: }
42733: 
42733: bool
48470: JSProxyHandler::set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
42733: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, true, &desc))
42733:         return false;
42745:     /* The control-flow here differs from ::get() because of the fall-through case below. */
42733:     if (desc.obj) {
56817:         if (desc.setter && ((desc.attrs & JSPROP_SETTER) || desc.setter != PropertyStub))
56817:             return CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, vp);
42733:         if (desc.attrs & JSPROP_READONLY)
42733:             return true;
42733:         desc.value = *vp;
56817:         return defineProperty(cx, receiver, id, &desc);
42733:     }
55592:     if (!getPropertyDescriptor(cx, proxy, id, true, &desc))
42733:         return false;
42733:     if (desc.obj) {
56817:         if (desc.setter && ((desc.attrs & JSPROP_SETTER) || desc.setter != PropertyStub))
56817:             return CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, vp);
42733:         if (desc.attrs & JSPROP_READONLY)
42733:             return true;
42733:         /* fall through */
42733:     }
56817:     desc.obj = receiver;
42733:     desc.value = *vp;
55701:     desc.attrs = JSPROP_ENUMERATE;
48470:     desc.getter = NULL;
48470:     desc.setter = NULL;
42733:     desc.shortid = 0;
56817:     return defineProperty(cx, receiver, id, &desc);
42733: }
42733: 
42733: bool
48470: JSProxyHandler::enumerateOwn(JSContext *cx, JSObject *proxy, AutoIdVector &props)
42733: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
47460:     JS_ASSERT(props.length() == 0);
47460: 
47474:     if (!getOwnPropertyNames(cx, proxy, props))
42733:         return false;
47460: 
47474:     /* Select only the enumerable properties through in-place iteration. */
48470:     AutoPropertyDescriptorRooter desc(cx);
47474:     size_t i = 0;
47474:     for (size_t j = 0, len = props.length(); j < len; j++) {
47474:         JS_ASSERT(i <= j);
47474:         jsid id = props[j];
55592:         if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
42733:             return false;
47474:         if (desc.obj && (desc.attrs & JSPROP_ENUMERATE))
47474:             props[i++] = id;
42733:     }
47460: 
47474:     JS_ASSERT(i <= props.length());
47474:     props.resize(i);
47474: 
42733:     return true;
42733: }
42733: 
43190: bool
48470: JSProxyHandler::iterate(JSContext *cx, JSObject *proxy, uintN flags, Value *vp)
43190: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     AutoIdVector props(cx);
57305:     if ((flags & JSITER_OWNONLY)
57305:         ? !enumerateOwn(cx, proxy, props)
57305:         : !enumerate(cx, proxy, props)) {
43190:         return false;
57305:     }
48470:     return EnumeratedIdVectorToIterator(cx, proxy, flags, props, vp);
43190: }
43190: 
47498: JSString *
47498: JSProxyHandler::obj_toString(JSContext *cx, JSObject *proxy)
47498: {
47498:     JS_ASSERT(proxy->isProxy());
47498: 
47498:     return JS_NewStringCopyZ(cx, proxy->isFunctionProxy()
47498:                                  ? "[object Function]"
47498:                                  : "[object Object]");
47498: }
47498: 
47498: JSString *
47498: JSProxyHandler::fun_toString(JSContext *cx, JSObject *proxy, uintN indent)
47498: {
47498:     JS_ASSERT(proxy->isProxy());
48470:     Value fval = GetCall(proxy);
47498:     if (proxy->isFunctionProxy() &&
48470:         (fval.isPrimitive() || !fval.toObject().isFunction())) {
47498:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
47498:                              JSMSG_INCOMPATIBLE_PROTO,
47498:                              js_Function_str, js_toString_str,
47498:                              "object");
47498:         return NULL;
47498:     }
48470:     return fun_toStringHelper(cx, &fval.toObject(), indent);
47498: }
47498: 
47498: bool
48470: JSProxyHandler::call(JSContext *cx, JSObject *proxy, uintN argc, Value *vp)
47498: {
47498:     JS_ASSERT(OperationInProgress(cx, proxy));
47498:     AutoValueRooter rval(cx);
53557:     JSBool ok = ExternalInvoke(cx, vp[1], GetCall(proxy), argc, JS_ARGV(cx, vp),
47498:                                rval.addr());
47498:     if (ok)
47498:         JS_SET_RVAL(cx, vp, rval.value());
47498:     return ok;
47498: }
47498: 
47498: bool
47588: JSProxyHandler::construct(JSContext *cx, JSObject *proxy,
48470:                           uintN argc, Value *argv, Value *rval)
47498: {
47498:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     Value fval = GetConstruct(proxy);
57687:     if (fval.isUndefined())
57687:         return ExternalInvokeConstructor(cx, GetCall(proxy), argc, argv, rval);
47498: 
47588:     /*
47588:      * FIXME: The Proxy proposal says to pass undefined as the this argument,
47588:      * but primitive this is not supported yet. See bug 576644.
47588:      */
48470:     JS_ASSERT(fval.isObject());
48470:     JSObject *thisobj = fval.toObject().getGlobal();
53557:     return ExternalInvoke(cx, thisobj, fval, argc, argv, rval);
47498: }
47498: 
55650: bool
55650: JSProxyHandler::hasInstance(JSContext *cx, JSObject *proxy, const Value *vp, bool *bp)
55650: {
55650:     JS_ASSERT(OperationInProgress(cx, proxy));
55650:     js_ReportValueError(cx, JSMSG_BAD_INSTANCEOF_RHS,
55650:                         JSDVG_SEARCH_STACK, ObjectValue(*proxy), NULL);
55650:     return false;
55650: }
55650: 
57775: JSType
57775: JSProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
57775: {
57775:     JS_ASSERT(OperationInProgress(cx, proxy));
57775:     return proxy->isFunctionProxy() ? JSTYPE_FUNCTION : JSTYPE_OBJECT;
57775: }
57775: 
42733: void
42733: JSProxyHandler::finalize(JSContext *cx, JSObject *proxy)
42733: {
42733: }
42733: 
42831: void
42831: JSProxyHandler::trace(JSTracer *trc, JSObject *proxy)
42831: {
42831: }
42831: 
42733: static bool
48470: GetTrap(JSContext *cx, JSObject *handler, JSAtom *atom, Value *fvalp)
42733: {
55484:     JS_CHECK_RECURSION(cx, return false);
55484: 
43190:     return handler->getProperty(cx, ATOM_TO_JSID(atom), fvalp);
42733: }
42733: 
42733: static bool
55484: GetFundamentalTrap(JSContext *cx, JSObject *handler, JSAtom *atom, Value *fvalp)
43190: {
43190:     if (!GetTrap(cx, handler, atom, fvalp))
43190:         return false;
43190: 
43190:     if (!js_IsCallable(*fvalp)) {
57812:         JSAutoByteString bytes;
57812:         if (js_AtomToPrintableString(cx, atom, &bytes))
57812:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_NOT_FUNCTION, bytes.ptr());
43190:         return false;
43190:     }
43190: 
43190:     return true;
43190: }
43190: 
43190: static bool
55484: GetDerivedTrap(JSContext *cx, JSObject *handler, JSAtom *atom, Value *fvalp)
43190: {
43190:     JS_ASSERT(atom == ATOM(has) ||
43190:               atom == ATOM(hasOwn) ||
43190:               atom == ATOM(get) ||
43190:               atom == ATOM(set) ||
43190:               atom == ATOM(enumerateOwn) ||
43190:               atom == ATOM(iterate));
43190: 
43190:     return GetTrap(cx, handler, atom, fvalp);
43190: }
43190: 
43190: static bool
48470: Trap(JSContext *cx, JSObject *handler, Value fval, uintN argc, Value* argv, Value *rval)
42733: {
53557:     return ExternalInvoke(cx, handler, fval, argc, argv, rval);
42733: }
42733: 
42733: static bool
48470: Trap1(JSContext *cx, JSObject *handler, Value fval, jsid id, Value *rval)
43189: {
48470:     JSString *str = js_ValueToString(cx, IdToValue(id));
43189:     if (!str)
43189:         return false;
48470:     rval->setString(str);
43190:     return Trap(cx, handler, fval, 1, rval, rval);
43189: }
43189: 
43189: static bool
48470: Trap2(JSContext *cx, JSObject *handler, Value fval, jsid id, Value v, Value *rval)
43189: {
48470:     JSString *str = js_ValueToString(cx, IdToValue(id));
43189:     if (!str)
43189:         return false;
48470:     rval->setString(str);
48470:     Value argv[2] = { *rval, v };
43190:     return Trap(cx, handler, fval, 2, argv, rval);
43189: }
43189: 
43189: static bool
48470: ParsePropertyDescriptorObject(JSContext *cx, JSObject *obj, jsid id, const Value &v,
48470:                               PropertyDescriptor *desc)
42733: {
48470:     AutoPropDescArrayRooter descs(cx);
48470:     PropDesc *d = descs.append();
42733:     if (!d || !d->initialize(cx, id, v))
42733:         return false;
42733:     desc->obj = obj;
42733:     desc->value = d->value;
42733:     JS_ASSERT(!(d->attrs & JSPROP_SHORTID));
42733:     desc->attrs = d->attrs;
42733:     desc->getter = d->getter();
42733:     desc->setter = d->setter();
42733:     desc->shortid = 0;
42733:     return true;
42733: }
42733: 
42733: static bool
48470: MakePropertyDescriptorObject(JSContext *cx, jsid id, PropertyDescriptor *desc, Value *vp)
42733: {
42733:     if (!desc->obj) {
48470:         vp->setUndefined();
42733:         return true;
42733:     }
42745:     uintN attrs = desc->attrs;
48470:     Value getter = (attrs & JSPROP_GETTER) ? CastAsObjectJsval(desc->getter) : UndefinedValue();
48470:     Value setter = (attrs & JSPROP_SETTER) ? CastAsObjectJsval(desc->setter) : UndefinedValue();
42745:     return js_NewPropertyDescriptorObject(cx, id, attrs, getter, setter, desc->value, vp);
42733: }
42733: 
43190: static bool
48470: ValueToBool(JSContext *cx, const Value &v, bool *bp)
42733: {
48470:     *bp = !!js_ValueToBoolean(v);
43190:     return true;
42733: }
42733: 
42733: bool
48470: ArrayToIdVector(JSContext *cx, const Value &array, AutoIdVector &props)
42733: {
47460:     JS_ASSERT(props.length() == 0);
47460: 
48470:     if (array.isPrimitive())
47460:         return true;
42733: 
48470:     JSObject *obj = &array.toObject();
42733:     jsuint length;
42733:     if (!js_GetLengthProperty(cx, obj, &length)) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_ARRAY_LENGTH);
42733:         return false;
42733:     }
47460: 
47460:     AutoIdRooter idr(cx);
47460:     AutoValueRooter tvr(cx);
47460:     for (jsuint n = 0; n < length; ++n) {
47460:         if (!js_IndexToId(cx, n, idr.addr()))
42733:             return false;
47460:         if (!obj->getProperty(cx, idr.id(), tvr.addr()))
42733:             return false;
48470:         if (!ValueToId(cx, tvr.value(), idr.addr()))
42733:             return false;
47460:         if (!props.append(js_CheckForStringIndex(idr.id())))
42733:             return false;
42733:     }
47460: 
42733:     return true;
42733: }
42733: 
43190: /* Derived class for all scripted proxy handlers. */
43190: class JSScriptedProxyHandler : public JSProxyHandler {
43190:   public:
43190:     JSScriptedProxyHandler();
43190:     virtual ~JSScriptedProxyHandler();
43190: 
43190:     /* ES5 Harmony fundamental proxy traps. */
55592:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                        PropertyDescriptor *desc);
55592:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                           PropertyDescriptor *desc);
43190:     virtual bool defineProperty(JSContext *cx, JSObject *proxy, jsid id,
48470:                                 PropertyDescriptor *desc);
48470:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props);
43190:     virtual bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
48470:     virtual bool enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props);
48470:     virtual bool fix(JSContext *cx, JSObject *proxy, Value *vp);
43190: 
43190:     /* ES5 Harmony derived proxy traps. */
43190:     virtual bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
43190:     virtual bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp);
48470:     virtual bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp);
48470:     virtual bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp);
48470:     virtual bool enumerateOwn(JSContext *cx, JSObject *proxy, AutoIdVector &props);
48470:     virtual bool iterate(JSContext *cx, JSObject *proxy, uintN flags, Value *vp);
43190: 
43190:     static JSScriptedProxyHandler singleton;
43190: };
43190: 
47516: static int sScriptedProxyHandlerFamily = 0;
47516: 
47516: JSScriptedProxyHandler::JSScriptedProxyHandler() : JSProxyHandler(&sScriptedProxyHandlerFamily)
43190: {
43190: }
43190: 
43190: JSScriptedProxyHandler::~JSScriptedProxyHandler()
43190: {
43190: }
43190: 
43211: static bool
48470: ReturnedValueMustNotBePrimitive(JSContext *cx, JSObject *proxy, JSAtom *atom, const Value &v)
43211: {
48470:     if (v.isPrimitive()) {
57812:         JSAutoByteString bytes;
57812:         if (js_AtomToPrintableString(cx, atom, &bytes)) {
43211:             js_ReportValueError2(cx, JSMSG_BAD_TRAP_RETURN_VALUE,
57812:                                  JSDVG_SEARCH_STACK, ObjectOrNullValue(proxy), NULL, bytes.ptr());
57812:         }
43211:         return false;
43211:     }
43211:     return true;
43211: }
43211: 
43279: static JSObject *
43279: GetProxyHandlerObject(JSContext *cx, JSObject *proxy)
43279: {
43279:     JS_ASSERT(OperationInProgress(cx, proxy));
48470:     return proxy->getProxyPrivate().toObjectOrNull();
43279: }
43279: 
43190: bool
55592: JSScriptedProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                               PropertyDescriptor *desc)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(getPropertyDescriptor), tvr.addr()) &&
43279:            Trap1(cx, handler, tvr.value(), id, tvr.addr()) &&
43211:            ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(getPropertyDescriptor), tvr.value()) &&
43190:            ParsePropertyDescriptorObject(cx, proxy, id, tvr.value(), desc);
43190: }
43190: 
43190: bool
55592: JSScriptedProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                                  PropertyDescriptor *desc)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(getOwnPropertyDescriptor), tvr.addr()) &&
43279:            Trap1(cx, handler, tvr.value(), id, tvr.addr()) &&
43211:            ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(getPropertyDescriptor), tvr.value()) &&
43190:            ParsePropertyDescriptorObject(cx, proxy, id, tvr.value(), desc);
43190: }
43190: 
43190: bool
43190: JSScriptedProxyHandler::defineProperty(JSContext *cx, JSObject *proxy, jsid id,
48470:                                        PropertyDescriptor *desc)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
43190:     AutoValueRooter fval(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(defineProperty), fval.addr()) &&
43190:            MakePropertyDescriptorObject(cx, id, desc, tvr.addr()) &&
43279:            Trap2(cx, handler, fval.value(), id, tvr.value(), tvr.addr());
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(getOwnPropertyNames), tvr.addr()) &&
43279:            Trap(cx, handler, tvr.value(), 0, NULL, tvr.addr()) &&
47460:            ArrayToIdVector(cx, tvr.value(), props);
43190: }
43190: 
43190: bool
43190: JSScriptedProxyHandler::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(delete), tvr.addr()) &&
43279:            Trap1(cx, handler, tvr.value(), id, tvr.addr()) &&
43190:            ValueToBool(cx, tvr.value(), bp);
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     return GetFundamentalTrap(cx, handler, ATOM(enumerate), tvr.addr()) &&
43279:            Trap(cx, handler, tvr.value(), 0, NULL, tvr.addr()) &&
47460:            ArrayToIdVector(cx, tvr.value(), props);
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::fix(JSContext *cx, JSObject *proxy, Value *vp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
55484:     return GetFundamentalTrap(cx, handler, ATOM(fix), vp) &&
43190:            Trap(cx, handler, *vp, 0, NULL, vp);
43190: }
43190: 
43190: bool
43190: JSScriptedProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(has), tvr.addr()))
43190:         return false;
43190:     if (!js_IsCallable(tvr.value()))
43190:         return JSProxyHandler::has(cx, proxy, id, bp);
43279:     return Trap1(cx, handler, tvr.value(), id, tvr.addr()) &&
43190:            ValueToBool(cx, tvr.value(), bp);
43190: }
43190: 
43190: bool
43190: JSScriptedProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(hasOwn), tvr.addr()))
43190:         return false;
43190:     if (!js_IsCallable(tvr.value()))
43190:         return JSProxyHandler::hasOwn(cx, proxy, id, bp);
43279:     return Trap1(cx, handler, tvr.value(), id, tvr.addr()) &&
43190:            ValueToBool(cx, tvr.value(), bp);
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
48470:     JSString *str = js_ValueToString(cx, IdToValue(id));
43190:     if (!str)
43190:         return false;
48470:     AutoValueRooter tvr(cx, StringValue(str));
48470:     Value argv[] = { ObjectOrNullValue(receiver), tvr.value() };
43190:     AutoValueRooter fval(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(get), fval.addr()))
43190:         return false;
43190:     if (!js_IsCallable(fval.value()))
43190:         return JSProxyHandler::get(cx, proxy, receiver, id, vp);
43279:     return Trap(cx, handler, fval.value(), 2, argv, vp);
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
48470:     JSString *str = js_ValueToString(cx, IdToValue(id));
43190:     if (!str)
43190:         return false;
48470:     AutoValueRooter tvr(cx, StringValue(str));
48470:     Value argv[] = { ObjectOrNullValue(receiver), tvr.value(), *vp };
43190:     AutoValueRooter fval(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(set), fval.addr()))
43190:         return false;
43190:     if (!js_IsCallable(fval.value()))
43190:         return JSProxyHandler::set(cx, proxy, receiver, id, vp);
43279:     return Trap(cx, handler, fval.value(), 3, argv, tvr.addr());
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::enumerateOwn(JSContext *cx, JSObject *proxy, AutoIdVector &props)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(enumerateOwn), tvr.addr()))
43190:         return false;
43190:     if (!js_IsCallable(tvr.value()))
47460:         return JSProxyHandler::enumerateOwn(cx, proxy, props);
43279:     return Trap(cx, handler, tvr.value(), 0, NULL, tvr.addr()) &&
47460:            ArrayToIdVector(cx, tvr.value(), props);
43190: }
43190: 
43190: bool
48470: JSScriptedProxyHandler::iterate(JSContext *cx, JSObject *proxy, uintN flags, Value *vp)
43190: {
43279:     JSObject *handler = GetProxyHandlerObject(cx, proxy);
43190:     AutoValueRooter tvr(cx);
55484:     if (!GetDerivedTrap(cx, handler, ATOM(iterate), tvr.addr()))
43190:         return false;
43190:     if (!js_IsCallable(tvr.value()))
43190:         return JSProxyHandler::iterate(cx, proxy, flags, vp);
43279:     return Trap(cx, handler, tvr.value(), 0, NULL, vp) &&
43211:            ReturnedValueMustNotBePrimitive(cx, proxy, ATOM(iterate), *vp);
43190: }
43190: 
43190: JSScriptedProxyHandler JSScriptedProxyHandler::singleton;
43190: 
43279: class AutoPendingProxyOperation {
43279:     JSThreadData *data;
43279:     JSPendingProxyOperation op;
43279:   public:
43279:     AutoPendingProxyOperation(JSContext *cx, JSObject *proxy) : data(JS_THREAD_DATA(cx)) {
43279:         op.next = data->pendingProxyOperation;
43279:         op.object = proxy;
43279:         data->pendingProxyOperation = &op;
43279:     }
43279: 
43279:     ~AutoPendingProxyOperation() {
43279:         JS_ASSERT(data->pendingProxyOperation == &op);
43279:         data->pendingProxyOperation = op.next;
43279:     }
43279: };
43279: 
43190: bool
55592: JSProxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
55592:                                PropertyDescriptor *desc)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
55592:     return proxy->getProxyHandler()->getPropertyDescriptor(cx, proxy, id, set, desc);
43190: }
43190: 
43190: bool
55592: JSProxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set, Value *vp)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     return JSProxy::getPropertyDescriptor(cx, proxy, id, set, &desc) &&
43190:            MakePropertyDescriptorObject(cx, id, &desc, vp);
43190: }
43190: 
43190: bool
55592: JSProxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
48470:                                   PropertyDescriptor *desc)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
55592:     return proxy->getProxyHandler()->getOwnPropertyDescriptor(cx, proxy, id, set, desc);
43190: }
43190: 
43190: bool
55592: JSProxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set, Value *vp)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     return JSProxy::getOwnPropertyDescriptor(cx, proxy, id, set, &desc) &&
43190:            MakePropertyDescriptorObject(cx, id, &desc, vp);
43190: }
43190: 
43190: bool
48470: JSProxy::defineProperty(JSContext *cx, JSObject *proxy, jsid id, PropertyDescriptor *desc)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->defineProperty(cx, proxy, id, desc);
43190: }
43190: 
43190: bool
48470: JSProxy::defineProperty(JSContext *cx, JSObject *proxy, jsid id, const Value &v)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
48470:     AutoPropertyDescriptorRooter desc(cx);
43190:     return ParsePropertyDescriptorObject(cx, proxy, id, v, &desc) &&
43190:            JSProxy::defineProperty(cx, proxy, id, &desc);
43190: }
43190: 
42733: bool
48470: JSProxy::getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->getOwnPropertyNames(cx, proxy, props);
42733: }
42733: 
42733: bool
42733: JSProxy::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->delete_(cx, proxy, id, bp);
42733: }
42733: 
42733: bool
48470: JSProxy::enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->enumerate(cx, proxy, props);
42733: }
42733: 
42733: bool
48470: JSProxy::fix(JSContext *cx, JSObject *proxy, Value *vp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->fix(cx, proxy, vp);
42733: }
42733: 
42733: bool
42733: JSProxy::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->has(cx, proxy, id, bp);
42733: }
42733: 
42733: bool
42733: JSProxy::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->hasOwn(cx, proxy, id, bp);
42733: }
42733: 
42733: bool
48470: JSProxy::get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->get(cx, proxy, receiver, id, vp);
42733: }
42733: 
42733: bool
48470: JSProxy::set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, Value *vp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->set(cx, proxy, receiver, id, vp);
42733: }
42733: 
42733: bool
48470: JSProxy::enumerateOwn(JSContext *cx, JSObject *proxy, AutoIdVector &props)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->enumerateOwn(cx, proxy, props);
42733: }
43190: 
43190: bool
48470: JSProxy::iterate(JSContext *cx, JSObject *proxy, uintN flags, Value *vp)
43190: {
59231:     JS_CHECK_RECURSION(cx, return false);
43279:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->iterate(cx, proxy, flags, vp);
42733: }
42733: 
47498: bool
48470: JSProxy::call(JSContext *cx, JSObject *proxy, uintN argc, Value *vp)
42733: {
59231:     JS_CHECK_RECURSION(cx, return false);
47498:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->call(cx, proxy, argc, vp);
42733: }
47498: 
47498: bool
48470: JSProxy::construct(JSContext *cx, JSObject *proxy, uintN argc, Value *argv, Value *rval)
47498: {
59231:     JS_CHECK_RECURSION(cx, return false);
47498:     AutoPendingProxyOperation pending(cx, proxy);
47588:     return proxy->getProxyHandler()->construct(cx, proxy, argc, argv, rval);
42733: }
47498: 
57775: bool
57775: JSProxy::hasInstance(JSContext *cx, JSObject *proxy, const js::Value *vp, bool *bp)
57775: {
59231:     JS_CHECK_RECURSION(cx, return false);
57775:     AutoPendingProxyOperation pending(cx, proxy);
57775:     return proxy->getProxyHandler()->hasInstance(cx, proxy, vp, bp);
57775: }
57775: 
57775: JSType
57775: JSProxy::typeOf(JSContext *cx, JSObject *proxy)
57775: {
59231:     // FIXME: API doesn't allow us to report error (bug 618906).
59231:     JS_CHECK_RECURSION(cx, return JSTYPE_OBJECT);
57775:     AutoPendingProxyOperation pending(cx, proxy);
57775:     return proxy->getProxyHandler()->typeOf(cx, proxy);
57775: }
57775: 
47498: JSString *
47498: JSProxy::obj_toString(JSContext *cx, JSObject *proxy)
47498: {
59231:     JS_CHECK_RECURSION(cx, return NULL);
47498:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->obj_toString(cx, proxy);
42733: }
47498: 
47498: JSString *
47498: JSProxy::fun_toString(JSContext *cx, JSObject *proxy, uintN indent)
47498: {
59231:     JS_CHECK_RECURSION(cx, return NULL);
47498:     AutoPendingProxyOperation pending(cx, proxy);
47498:     return proxy->getProxyHandler()->fun_toString(cx, proxy, indent);
42733: }
42733: 
54404: static JSObject *
54404: proxy_innerObject(JSContext *cx, JSObject *obj)
54404: {
54404:     return obj->getProxyPrivate().toObjectOrNull();
54404: }
54404: 
42733: static JSBool
42733: proxy_LookupProperty(JSContext *cx, JSObject *obj, jsid id, JSObject **objp,
42733:                      JSProperty **propp)
42733: {
42733:     bool found;
42733:     if (!JSProxy::has(cx, obj, id, &found))
42733:         return false;
42733: 
42733:     if (found) {
48470:         *propp = (JSProperty *)0x1;
42733:         *objp = obj;
42733:     } else {
42733:         *objp = NULL;
42733:         *propp = NULL;
42733:     }
42733:     return true;
42733: }
42733: 
42733: static JSBool
48470: proxy_DefineProperty(JSContext *cx, JSObject *obj, jsid id, const Value *value,
48470:                      PropertyOp getter, PropertyOp setter, uintN attrs)
42733: {
48470:     AutoPropertyDescriptorRooter desc(cx);
42733:     desc.obj = obj;
48470:     desc.value = *value;
42733:     desc.attrs = (attrs & (~JSPROP_SHORTID));
42733:     desc.getter = getter;
42733:     desc.setter = setter;
42733:     desc.shortid = 0;
42733:     return JSProxy::defineProperty(cx, obj, id, &desc);
42733: }
42733: 
42733: static JSBool
56817: proxy_GetProperty(JSContext *cx, JSObject *obj, JSObject *receiver, jsid id, Value *vp)
42733: {
56817:     return JSProxy::get(cx, obj, receiver, id, vp);
42733: }
42733: 
42733: static JSBool
56760: proxy_SetProperty(JSContext *cx, JSObject *obj, jsid id, Value *vp, JSBool strict)
42733: {
56817:     // FIXME (bug 596351): throwing away strict.
56760:     return JSProxy::set(cx, obj, obj, id, vp);
42733: }
42733: 
42733: static JSBool
43290: proxy_GetAttributes(JSContext *cx, JSObject *obj, jsid id, uintN *attrsp)
42733: {
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!JSProxy::getOwnPropertyDescriptor(cx, obj, id, false, &desc))
42733:         return false;
42733:     *attrsp = desc.attrs;
42733:     return true;
42733: }
42733: 
42733: static JSBool
43290: proxy_SetAttributes(JSContext *cx, JSObject *obj, jsid id, uintN *attrsp)
42733: {
42733:     /* Lookup the current property descriptor so we have setter/getter/value. */
48470:     AutoPropertyDescriptorRooter desc(cx);
55592:     if (!JSProxy::getOwnPropertyDescriptor(cx, obj, id, true, &desc))
42733:         return false;
42733:     desc.attrs = (*attrsp & (~JSPROP_SHORTID));
42733:     return JSProxy::defineProperty(cx, obj, id, &desc);
42733: }
42733: 
42733: static JSBool
54169: proxy_DeleteProperty(JSContext *cx, JSObject *obj, jsid id, Value *rval, JSBool strict)
42733: {
54169:     // TODO: throwing away strict
42733:     bool deleted;
42733:     if (!JSProxy::delete_(cx, obj, id, &deleted))
42733:         return false;
48470:     rval->setBoolean(deleted);
42733:     return true;
42733: }
42733: 
42733: static void
42733: proxy_TraceObject(JSTracer *trc, JSObject *obj)
42733: {
42733:     JSContext *cx = trc->context;
42733: 
42733:     if (!JS_CLIST_IS_EMPTY(&cx->runtime->watchPointList))
42733:         js_TraceWatchPoints(trc, obj);
42733: 
47498:     obj->getProxyHandler()->trace(trc, obj);
48470:     MarkValue(trc, obj->getProxyPrivate(), "private");
55599:     MarkValue(trc, obj->getProxyExtra(), "extra");
42733:     if (obj->isFunctionProxy()) {
48470:         MarkValue(trc, GetCall(obj), "call");
48470:         MarkValue(trc, GetConstruct(obj), "construct");
42733:     }
42733: }
42733: 
57775: static void
47498: proxy_Finalize(JSContext *cx, JSObject *obj)
47498: {
47498:     JS_ASSERT(obj->isProxy());
48470:     if (!obj->getSlot(JSSLOT_PROXY_HANDLER).isUndefined())
47498:         obj->getProxyHandler()->finalize(cx, obj);
47498: }
47498: 
55650: static JSBool
55650: proxy_HasInstance(JSContext *cx, JSObject *proxy, const Value *v, JSBool *bp)
55650: {
55650:     AutoPendingProxyOperation pending(cx, proxy);
55650:     bool b;
57775:     if (!JSProxy::hasInstance(cx, proxy, v, &b))
55650:         return false;
55650:     *bp = !!b;
55650:     return true;
55650: }
55650: 
57775: static JSType
57775: proxy_TypeOf(JSContext *cx, JSObject *proxy)
57775: {
57775:     JS_ASSERT(proxy->isProxy());
57775:     return JSProxy::typeOf(cx, proxy);
57775: }
57775: 
48622: JS_FRIEND_API(Class) ObjectProxyClass = {
48622:     "Proxy",
55599:     Class::NON_NATIVE | JSCLASS_HAS_RESERVED_SLOTS(3),
48622:     PropertyStub,   /* addProperty */
48622:     PropertyStub,   /* delProperty */
48622:     PropertyStub,   /* getProperty */
48622:     PropertyStub,   /* setProperty */
48622:     EnumerateStub,
48622:     ResolveStub,
48622:     ConvertStub,
48622:     NULL,           /* finalize */
48622:     NULL,           /* reserved0   */
48622:     NULL,           /* checkAccess */
48622:     NULL,           /* call        */
48622:     NULL,           /* construct   */
48622:     NULL,           /* xdrObject   */
55650:     proxy_HasInstance, /* hasInstance */
48622:     NULL,           /* mark        */
48622:     JS_NULL_CLASS_EXT,
48622:     {
43290:         proxy_LookupProperty,
43290:         proxy_DefineProperty,
43290:         proxy_GetProperty,
43290:         proxy_SetProperty,
43290:         proxy_GetAttributes,
43290:         proxy_SetAttributes,
43290:         proxy_DeleteProperty,
48622:         NULL,       /* enumerate       */
57775:         proxy_TypeOf,
43290:         proxy_TraceObject,
54563:         NULL,       /* fix             */
43290:         NULL,       /* thisObject      */
48622:         proxy_Finalize, /* clear */
42733:     }
42733: };
42733: 
54404: JS_FRIEND_API(Class) OuterWindowProxyClass = {
54404:     "Proxy",
55599:     Class::NON_NATIVE | JSCLASS_HAS_RESERVED_SLOTS(3),
54404:     PropertyStub,   /* addProperty */
54404:     PropertyStub,   /* delProperty */
54404:     PropertyStub,   /* getProperty */
54404:     PropertyStub,   /* setProperty */
54404:     EnumerateStub,
54404:     ResolveStub,
54404:     ConvertStub,
54404:     NULL,           /* finalize */
54404:     NULL,           /* reserved0   */
54404:     NULL,           /* checkAccess */
54404:     NULL,           /* call        */
54404:     NULL,           /* construct   */
54404:     NULL,           /* xdrObject   */
54404:     NULL,           /* hasInstance */
54404:     NULL,           /* mark        */
54404:     {
54404:         NULL,       /* equality    */
54404:         NULL,       /* outerObject */
54404:         proxy_innerObject,
56565:         NULL        /* unused */
54404:     },
54404:     {
54404:         proxy_LookupProperty,
54404:         proxy_DefineProperty,
54404:         proxy_GetProperty,
54404:         proxy_SetProperty,
54404:         proxy_GetAttributes,
54404:         proxy_SetAttributes,
54404:         proxy_DeleteProperty,
54404:         NULL,       /* enumerate       */
54404:         NULL,       /* typeof          */
54404:         proxy_TraceObject,
54563:         NULL,       /* fix             */
54404:         NULL,       /* thisObject      */
54404:         proxy_Finalize, /* clear */
54404:     }
54404: };
54404: 
42733: JSBool
48470: proxy_Call(JSContext *cx, uintN argc, Value *vp)
42733: {
48470:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
42733:     JS_ASSERT(proxy->isProxy());
47498:     return JSProxy::call(cx, proxy, argc, vp);
42733: }
42733: 
42733: JSBool
53557: proxy_Construct(JSContext *cx, uintN argc, Value *vp)
42733: {
53557:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
42733:     JS_ASSERT(proxy->isProxy());
53557:     Value rval;
53557:     bool ok = JSProxy::construct(cx, proxy, argc, JS_ARGV(cx, vp), &rval);
53557:     *vp = rval;
53557:     return ok;
42733: }
42733: 
48622: JS_FRIEND_API(Class) FunctionProxyClass = {
48622:     "Proxy",
55599:     Class::NON_NATIVE | JSCLASS_HAS_RESERVED_SLOTS(5),
48622:     PropertyStub,   /* addProperty */
48622:     PropertyStub,   /* delProperty */
48622:     PropertyStub,   /* getProperty */
48622:     PropertyStub,   /* setProperty */
48622:     EnumerateStub,
48622:     ResolveStub,
48622:     ConvertStub,
48622:     NULL,           /* finalize */
48622:     NULL,           /* reserved0   */
48622:     NULL,           /* checkAccess */
53557:     proxy_Call,
48622:     proxy_Construct,
48622:     NULL,           /* xdrObject   */
55650:     js_FunctionClass.hasInstance,
48622:     NULL,           /* mark */
48622:     JS_NULL_CLASS_EXT,
48622:     {
43290:         proxy_LookupProperty,
43290:         proxy_DefineProperty,
43290:         proxy_GetProperty,
43290:         proxy_SetProperty,
43290:         proxy_GetAttributes,
43290:         proxy_SetAttributes,
43290:         proxy_DeleteProperty,
48622:         NULL,       /* enumerate       */
57775:         proxy_TypeOf,
43290:         proxy_TraceObject,
54563:         NULL,       /* fix             */
43290:         NULL,       /* thisObject      */
48622:         NULL,       /* clear           */
42733:     }
42733: };
42733: 
42832: JS_FRIEND_API(JSObject *)
48529: NewProxyObject(JSContext *cx, JSProxyHandler *handler, const Value &priv, JSObject *proto,
48529:                JSObject *parent, JSObject *call, JSObject *construct)
42733: {
47498:     bool fun = call || construct;
54404:     Class *clasp;
54404:     if (fun)
54404:         clasp = &FunctionProxyClass;
54404:     else
54404:         clasp = handler->isOuterWindow() ? &OuterWindowProxyClass : &ObjectProxyClass;
55746: 
50450:     JSObject *obj = NewNonFunction<WithProto::Given>(cx, clasp, proto, parent);
55746:     if (!obj || !obj->ensureInstanceReservedSlots(cx, 0))
42733:         return NULL;
48470:     obj->setSlot(JSSLOT_PROXY_HANDLER, PrivateValue(handler));
47498:     obj->setSlot(JSSLOT_PROXY_PRIVATE, priv);
47498:     if (fun) {
48470:         obj->setSlot(JSSLOT_PROXY_CALL, call ? ObjectValue(*call) : UndefinedValue());
52503:         if (construct) {
58985:             obj->setSlot(JSSLOT_PROXY_CONSTRUCT, ObjectValue(*construct));
52503:         }
47498:     }
42733:     return obj;
42733: }
42733: 
42733: static JSObject *
48470: NonNullObject(JSContext *cx, const Value &v)
42733: {
48470:     if (v.isPrimitive()) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_NOT_NONNULL_OBJECT);
42733:         return NULL;
42733:     }
48470:     return &v.toObject();
42733: }
42733: 
42733: static JSBool
48470: proxy_create(JSContext *cx, uintN argc, Value *vp)
42733: {
42733:     if (argc < 1) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
43190:                              "create", "0", "s");
42733:         return false;
42733:     }
54745:     JSObject *handler = NonNullObject(cx, vp[2]);
54745:     if (!handler)
42733:         return false;
47600:     JSObject *proto, *parent = NULL;
48470:     if (argc > 1 && vp[3].isObject()) {
48470:         proto = &vp[3].toObject();
42733:         parent = proto->getParent();
42733:     } else {
48470:         JS_ASSERT(IsFunctionObject(vp[0]));
42733:         proto = NULL;
47600:     }
47600:     if (!parent)
48470:         parent = vp[0].toObject().getParent();
48470:     JSObject *proxy = NewProxyObject(cx, &JSScriptedProxyHandler::singleton, ObjectValue(*handler),
47498:                                      proto, parent);
42733:     if (!proxy)
42733:         return false;
42733: 
48470:     vp->setObject(*proxy);
42733:     return true;
42733: }
42733: 
42733: static JSBool
48470: proxy_createFunction(JSContext *cx, uintN argc, Value *vp)
42733: {
42733:     if (argc < 2) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
43190:                              "createFunction", "1", "");
42733:         return false;
42733:     }
54745:     JSObject *handler = NonNullObject(cx, vp[2]);
54745:     if (!handler)
42733:         return false;
42733:     JSObject *proto, *parent;
48470:     parent = vp[0].toObject().getParent();
42733:     if (!js_GetClassPrototype(cx, parent, JSProto_Function, &proto))
42733:         return false;
42733:     parent = proto->getParent();
42733: 
42733:     JSObject *call = js_ValueToCallableObject(cx, &vp[3], JSV2F_SEARCH_STACK);
42733:     if (!call)
42733:         return false;
42733:     JSObject *construct = NULL;
42733:     if (argc > 2) {
42733:         construct = js_ValueToCallableObject(cx, &vp[4], JSV2F_SEARCH_STACK);
42733:         if (!construct)
42733:             return false;
42733:     }
42733: 
48470:     JSObject *proxy = NewProxyObject(cx, &JSScriptedProxyHandler::singleton,
48470:                                      ObjectValue(*handler),
47498:                                      proto, parent, call, construct);
42733:     if (!proxy)
42733:         return false;
42733: 
48470:     vp->setObject(*proxy);
42733:     return true;
42733: }
42733: 
42733: #ifdef DEBUG
42733: 
42733: static JSBool
48470: proxy_isTrapping(JSContext *cx, uintN argc, Value *vp)
42733: {
42733:     if (argc < 1) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
43190:                              "isTrapping", "0", "s");
42733:         return false;
42733:     }
54745:     JSObject *obj = NonNullObject(cx, vp[2]);
54745:     if (!obj)
42733:         return false;
48470:     vp->setBoolean(obj->isProxy());
42733:     return true;
42733: }
42733: 
42733: static JSBool
48470: proxy_fix(JSContext *cx, uintN argc, Value *vp)
42733: {
42733:     if (argc < 1) {
42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
43190:                              "fix", "0", "s");
42733:         return false;
42733:     }
54745:     JSObject *obj = NonNullObject(cx, vp[2]);
54745:     if (!obj)
42733:         return false;
42733:     if (obj->isProxy()) {
42733:         JSBool flag;
42832:         if (!FixProxy(cx, obj, &flag))
42733:             return false;
48470:         vp->setBoolean(flag);
42733:     } else {
48470:         vp->setBoolean(true);
42733:     }
42733:     return true;
42733: }
42733: 
42733: #endif
42733: 
42733: static JSFunctionSpec static_methods[] = {
42733:     JS_FN("create",         proxy_create,          2, 0),
42733:     JS_FN("createFunction", proxy_createFunction,  3, 0),
42733: #ifdef DEBUG
42733:     JS_FN("isTrapping",     proxy_isTrapping,      1, 0),
42733:     JS_FN("fix",            proxy_fix,             1, 0),
42733: #endif
42733:     JS_FS_END
42733: };
42733: 
48470: extern Class CallableObjectClass;
42733: 
55746: static const uint32 JSSLOT_CALLABLE_CALL = 0;
55746: static const uint32 JSSLOT_CALLABLE_CONSTRUCT = 1;
42733: 
42733: static JSBool
53557: callable_Call(JSContext *cx, uintN argc, Value *vp)
42733: {
53557:     JSObject *thisobj = ComputeThisFromVp(cx, vp);
53557:     if (!thisobj)
53557:         return false;
53557: 
53557:     JSObject *callable = &JS_CALLEE(cx, vp).toObject();
42832:     JS_ASSERT(callable->getClass() == &CallableObjectClass);
55746:     const Value &fval = callable->getSlot(JSSLOT_CALLABLE_CALL);
53557:     Value rval;
53557:     bool ok = ExternalInvoke(cx, thisobj, fval, argc, JS_ARGV(cx, vp), &rval);
53557:     *vp = rval;
53557:     return ok;
42733: }
42733: 
42733: static JSBool
53557: callable_Construct(JSContext *cx, uintN argc, Value *vp)
42733: {
55503:     JSObject *thisobj = js_CreateThis(cx, &JS_CALLEE(cx, vp).toObject());
53557:     if (!thisobj)
53557:         return false;
53557: 
53557:     JSObject *callable = &vp[0].toObject();
42832:     JS_ASSERT(callable->getClass() == &CallableObjectClass);
55746:     Value fval = callable->getSlot(JSSLOT_CALLABLE_CONSTRUCT);
48470:     if (fval.isUndefined()) {
42733:         /* We don't have an explicit constructor so allocate a new object and use the call. */
55746:         fval = callable->getSlot(JSSLOT_CALLABLE_CALL);
48470:         JS_ASSERT(fval.isObject());
42733: 
42733:         /* callable is the constructor, so get callable.prototype is the proto of the new object. */
53557:         Value protov;
53557:         if (!callable->getProperty(cx, ATOM_TO_JSID(ATOM(classPrototype)), &protov))
42733:             return false;
42733: 
47497:         JSObject *proto;
53557:         if (protov.isObject()) {
53557:             proto = &protov.toObject();
47497:         } else {
47497:             if (!js_GetClassPrototype(cx, NULL, JSProto_Object, &proto))
47497:                 return false;
47497:         }
47497: 
47497:         JSObject *newobj = NewNativeClassInstance(cx, &js_ObjectClass, proto, proto->getParent());
48470:         if (!newobj)
48470:             return false;
48470: 
42733:         /* If the call returns an object, return that, otherwise the original newobj. */
53557:         Value rval;
55746:         if (!ExternalInvoke(cx, newobj, callable->getSlot(JSSLOT_CALLABLE_CALL),
53557:                             argc, vp + 2, &rval)) {
42733:             return false;
47495:         }
53557:         if (rval.isPrimitive())
53557:             vp->setObject(*newobj);
53557:         else
53557:             *vp = rval;
42733:         return true;
42733:     }
53557: 
53557:     Value rval;
53557:     bool ok = ExternalInvoke(cx, thisobj, fval, argc, vp + 2, &rval);
53557:     *vp = rval;
53557:     return ok;
42733: }
42733: 
48470: Class CallableObjectClass = {
43190:     "Function",
43190:     JSCLASS_HAS_RESERVED_SLOTS(2),
48622:     PropertyStub,   /* addProperty */
48622:     PropertyStub,   /* delProperty */
48622:     PropertyStub,   /* getProperty */
48622:     PropertyStub,   /* setProperty */
48622:     EnumerateStub,
48622:     ResolveStub,
48622:     ConvertStub,
48622:     NULL,           /* finalize    */
48622:     NULL,           /* reserved0   */
48622:     NULL,           /* checkAccess */
48622:     callable_Call,
48622:     callable_Construct,
42733: };
42733: 
42832: JS_FRIEND_API(JSBool)
42832: FixProxy(JSContext *cx, JSObject *proxy, JSBool *bp)
42733: {
42733:     AutoValueRooter tvr(cx);
42733:     if (!JSProxy::fix(cx, proxy, tvr.addr()))
42733:         return false;
48470:     if (tvr.value().isUndefined()) {
42733:         *bp = false;
42733:         return true;
42733:     }
42733: 
43279:     if (OperationInProgress(cx, proxy)) {
43279:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_BAD_PROXY_FIX);
43279:         return false;
43279:     }
43279: 
54745:     JSObject *props = NonNullObject(cx, tvr.value());
54745:     if (!props)
42733:         return false;
42733: 
42733:     JSObject *proto = proxy->getProto();
42733:     JSObject *parent = proxy->getParent();
48470:     Class *clasp = proxy->isFunctionProxy() ? &CallableObjectClass : &js_ObjectClass;
42733: 
55746:     /*
55746:      * Make a blank object from the recipe fix provided to us.  This must have
55746:      * number of fixed slots as the proxy so that we can swap their contents.
55746:      */
55746:     gc::FinalizeKind kind = gc::FinalizeKind(proxy->arena()->header()->thingKind);
55746:     JSObject *newborn = NewNonFunction<WithProto::Given>(cx, clasp, proto, parent, kind);
42733:     if (!newborn)
57733:         return false;
48470:     AutoObjectRooter tvr2(cx, newborn);
42733: 
42832:     if (clasp == &CallableObjectClass) {
55746:         newborn->setSlot(JSSLOT_CALLABLE_CALL, GetCall(proxy));
55746:         newborn->setSlot(JSSLOT_CALLABLE_CONSTRUCT, GetConstruct(proxy));
42733:     }
42733: 
43279:     {
43279:         AutoPendingProxyOperation pending(cx, proxy);
42733:         if (!js_PopulateObject(cx, newborn, props))
42733:             return false;
43279:     }
42733: 
54745:     /* Trade contents between the newborn object and the proxy. */
55746:     if (!proxy->swap(cx, newborn))
55746:         return false;
42733: 
42733:     /* The GC will dispose of the proxy object. */
42733: 
42733:     *bp = true;
42733:     return true;
42733: }
42733: 
42832: }
42832: 
48470: Class js_ProxyClass = {
43236:     "Proxy",
43236:     JSCLASS_HAS_CACHED_PROTO(JSProto_Proxy),
48622:     PropertyStub,   /* addProperty */
48622:     PropertyStub,   /* delProperty */
48622:     PropertyStub,   /* getProperty */
48622:     PropertyStub,   /* setProperty */
48622:     EnumerateStub,
48622:     ResolveStub,
48622:     ConvertStub
43236: };
43236: 
42832: JS_FRIEND_API(JSObject *)
42832: js_InitProxyClass(JSContext *cx, JSObject *obj)
42733: {
50450:     JSObject *module = NewNonFunction<WithProto::Class>(cx, &js_ProxyClass, NULL, obj);
42832:     if (!module)
42832:         return NULL;
42832:     if (!JS_DefineProperty(cx, obj, "Proxy", OBJECT_TO_JSVAL(module),
42832:                            JS_PropertyStub, JS_PropertyStub, 0)) {
42832:         return NULL;
42733:     }
42832:     if (!JS_DefineFunctions(cx, module, static_methods))
42832:         return NULL;
47497:     return module;
42832: }
