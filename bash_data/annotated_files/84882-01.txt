80404: /* ***** BEGIN LICENSE BLOCK *****
80404:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
80404:  *
80404:  * The contents of this file are subject to the Mozilla Public License Version
80404:  * 1.1 (the "License"); you may not use this file except in compliance with
80404:  * the License. You may obtain a copy of the License at
80404:  * http://www.mozilla.org/MPL/
80404:  *
80404:  * Software distributed under the License is distributed on an "AS IS" basis,
80404:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
80404:  * for the specific language governing rights and limitations under the
80404:  * License.
80404:  *
80404:  * The Original Code is HTML Parser C++ Translator code.
80404:  *
80404:  * The Initial Developer of the Original Code is
80404:  * Mozilla Foundation.
80404:  * Portions created by the Initial Developer are Copyright (C) 2008
80404:  * the Initial Developer. All Rights Reserved.
80404:  *
80404:  * Contributor(s):
80404:  *   Henri Sivonen <hsivonen@iki.fi>
80404:  *
80404:  * Alternatively, the contents of this file may be used under the terms of
80404:  * either the GNU General Public License Version 2 or later (the "GPL"), or
80404:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
80404:  * in which case the provisions of the GPL or the LGPL are applicable instead
80404:  * of those above. If you wish to allow use of your version of this file only
80404:  * under the terms of either the GPL or the LGPL, and not to allow others to
80404:  * use your version of this file under the terms of the MPL, indicate your
80404:  * decision by deleting the provisions above and replace them with the notice
80404:  * and other provisions required by the GPL or the LGPL. If you do not delete
80404:  * the provisions above, a recipient may use your version of this file under
80404:  * the terms of any one of the MPL, the GPL or the LGPL.
80404:  *
80404:  * ***** END LICENSE BLOCK ***** */
80404: 
80404: #include "nsHtml5OwningUTF16Buffer.h"
80404: 
80404: nsHtml5OwningUTF16Buffer::nsHtml5OwningUTF16Buffer(PRUnichar* aBuffer)
80404:   : nsHtml5UTF16Buffer(aBuffer, 0),
80404:     next(nsnull),
80404:     key(nsnull)
80404: {
80404:   MOZ_COUNT_CTOR(nsHtml5OwningUTF16Buffer);
80404: }
80404: 
80404: nsHtml5OwningUTF16Buffer::nsHtml5OwningUTF16Buffer(void* aKey)
80404:   : nsHtml5UTF16Buffer(nsnull, 0),
80404:     next(nsnull),
80404:     key(aKey)
80404: {
80404:   MOZ_COUNT_CTOR(nsHtml5OwningUTF16Buffer);
80404: }
80404: 
80404: nsHtml5OwningUTF16Buffer::~nsHtml5OwningUTF16Buffer()
80404: {
80404:   MOZ_COUNT_DTOR(nsHtml5OwningUTF16Buffer);
80404:   DeleteBuffer();
84882: 
84882:   // This is to avoid dtor recursion on 'next', bug 706932.
84882:   nsRefPtr<nsHtml5OwningUTF16Buffer> tail;
84882:   tail.swap(next);
84882:   while (tail && tail->mRefCnt == 1) {
84882:     nsRefPtr<nsHtml5OwningUTF16Buffer> tmp;
84882:     tmp.swap(tail->next);
84882:     tail.swap(tmp);
84882:   }
80404: }
80404: 
80404: // static
80404: already_AddRefed<nsHtml5OwningUTF16Buffer>
80404: nsHtml5OwningUTF16Buffer::FalliblyCreate(PRInt32 aLength)
80404: {
80404:   const mozilla::fallible_t fallible = mozilla::fallible_t();
80404:   PRUnichar* newBuf = new (fallible) PRUnichar[aLength];
80404:   if (!newBuf) {
80404:     return nsnull;
80404:   }
80404:   nsRefPtr<nsHtml5OwningUTF16Buffer> newObj =
80404:     new (fallible) nsHtml5OwningUTF16Buffer(newBuf);
80404:   if (!newObj) {
80404:     delete[] newBuf;
80404:     return nsnull;
80404:   }
80404:   return newObj.forget();
80404: }
80404: 
81105: void
81105: nsHtml5OwningUTF16Buffer::Swap(nsHtml5OwningUTF16Buffer* aOther)
81105: {
81105:   nsHtml5UTF16Buffer::Swap(aOther);
81105: }
81105: 
81105: 
80404: // Not using macros for AddRef and Release in order to be able to refcount on
80404: // and create on different threads.
80404: 
80404: nsrefcnt
80404: nsHtml5OwningUTF16Buffer::AddRef()
80404: {
80404:   NS_PRECONDITION(PRInt32(mRefCnt) >= 0, "Illegal refcount.");
80404:   ++mRefCnt;
80404:   NS_LOG_ADDREF(this, mRefCnt, "nsHtml5OwningUTF16Buffer", sizeof(*this));
80404:   return mRefCnt;
80404: }
80404: 
80404: nsrefcnt
80404: nsHtml5OwningUTF16Buffer::Release()
80404: {
80404:   NS_PRECONDITION(0 != mRefCnt, "Release without AddRef.");
80404:   --mRefCnt;
80404:   NS_LOG_RELEASE(this, mRefCnt, "nsHtml5OwningUTF16Buffer");
80404:   if (mRefCnt == 0) {
80404:     mRefCnt = 1; /* stabilize */
80404:     delete this;
80404:     return 0;
80404:   }
80404:   return mRefCnt;
80404: }
