    1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: /*
    1:  * JavaScript Debugging support - All public functions
    1:  */
    1: 
    1: #include "jsd.h"
    1: 
    1: /***************************************************************************/
    1: /* High Level calls */
    1: 
    1: JSD_PUBLIC_API(JSDContext*)
    1: JSD_DebuggerOnForUser(JSRuntime*         jsrt,
    1:                       JSD_UserCallbacks* callbacks,
    1:                       void*              user)
    1: {
    1:     return jsd_DebuggerOnForUser(jsrt, callbacks, user);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDContext*)
    1: JSD_DebuggerOn(void)
    1: {
    1:     return jsd_DebuggerOn();
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_DebuggerOff(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_DebuggerOff(jsdc);
    1: }
    1: 
35647: JSD_PUBLIC_API(void)
35647: JSD_DebuggerPause(JSDContext* jsdc)
35647: {
35647:     JSD_ASSERT_VALID_CONTEXT(jsdc);
35647:     jsd_DebuggerPause(jsdc, JS_FALSE);
35647: }
35647: 
35647: JSD_PUBLIC_API(void)
35647: JSD_DebuggerUnpause(JSDContext* jsdc)
35647: {
35647:     JSD_ASSERT_VALID_CONTEXT(jsdc);
35647:     jsd_DebuggerUnpause(jsdc);
35647: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetMajorVersion(void)
    1: {
    1:     return JSD_MAJOR_VERSION;
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetMinorVersion(void)
    1: {
    1:     return JSD_MINOR_VERSION;
    1: }
    1: 
    1: JSD_PUBLIC_API(JSContext*)
    1: JSD_GetDefaultJSContext(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsdc->dumbContext;
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_SetUserCallbacks(JSRuntime* jsrt, JSD_UserCallbacks* callbacks, void* user)
    1: {
    1:     jsd_SetUserCallbacks(jsrt, callbacks, user);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_JSContextInUse(JSDContext* jsdc, JSContext* context)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     /* we no longer need this information - may need it again in the future */
    1: }
    1: 
    1: JSD_PUBLIC_API(void *)
    1: JSD_SetContextPrivate(JSDContext *jsdc, void *data)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetContextPrivate (jsdc, data);
    1: }
    1: 
    1: JSD_PUBLIC_API(void *)
    1: JSD_GetContextPrivate(JSDContext *jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetContextPrivate (jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_ClearAllProfileData(JSDContext *jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_ClearAllProfileData(jsdc);    
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_SetContextFlags(JSDContext *jsdc, uint32 flags)
    1: {
35649:     uint32 oldFlags = jsdc->flags;
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsdc->flags = flags;
35647:     if ((flags & JSD_COLLECT_PROFILE_DATA) ||
35647:         !(flags & JSD_DISABLE_OBJECT_TRACE)) {
36192:         /* Need to reenable our call hooks now */
35647:         JS_SetExecuteHook(jsdc->jsrt, jsd_TopLevelCallHook, jsdc);
35647:         JS_SetCallHook(jsdc->jsrt, jsd_FunctionCallHook, jsdc);
35647:     }
35647:     if ((oldFlags ^ flags) & JSD_DISABLE_OBJECT_TRACE) {
36192:         /* Changing our JSD_DISABLE_OBJECT_TRACE flag */
35647:         if (!(flags & JSD_DISABLE_OBJECT_TRACE)) {
36192:             /* Need to reenable our object hooks now */
35647:             JS_SetObjectHook(jsdc->jsrt, jsd_ObjectHook, jsdc);
35647:         } else {
36192:             jsd_DestroyObjects(jsdc);
35647:             JS_SetObjectHook(jsdc->jsrt, NULL, NULL);
35647:         }
35647:     }
    1: }
    1: 
    1: JSD_PUBLIC_API(uint32)
    1: JSD_GetContextFlags(JSDContext *jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsdc->flags;
    1: }
    1:     
    1: JSD_PUBLIC_API(JSDContext*)
    1: JSD_JSDContextForJSContext(JSContext* context)
    1: {
    1:     return jsd_JSDContextForJSContext(context);
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Script functions */
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_LockScriptSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_LOCK_SCRIPTS(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_UnlockScriptSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_UNLOCK_SCRIPTS(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDScript*)
    1: JSD_IterateScripts(JSDContext* jsdc, JSDScript **iterp)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IterateScripts(jsdc, iterp);
    1: }
    1: 
    1: JSD_PUBLIC_API(uint32)
    1: JSD_GetScriptFlags(JSDContext *jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptFlags(jsdc, script);
    1: }
    1:     
    1: JSD_PUBLIC_API(void)
    1: JSD_SetScriptFlags(JSDContext *jsdc, JSDScript *script, uint32 flags)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_SetScriptFlags(jsdc, script, flags);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetScriptCallCount(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptCallCount(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetScriptMaxRecurseDepth(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptMaxRecurseDepth(jsdc, script);
    1: }
    1:     
    1: 
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptMinExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptMinExecutionTime(jsdc, script);
    1: }
    1:     
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptMaxExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptMaxExecutionTime(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptTotalExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptTotalExecutionTime(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptMinOwnExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptMinOwnExecutionTime(jsdc, script);
    1: }
    1:     
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptMaxOwnExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptMaxOwnExecutionTime(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsdouble)
    1: JSD_GetScriptTotalOwnExecutionTime(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptTotalOwnExecutionTime(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_ClearScriptProfileData(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_ClearScriptProfileData(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSScript*)
    1: JSD_GetJSScript(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     return jsd_GetJSScript(jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSFunction*)
    1: JSD_GetJSFunction(JSDContext* jsdc, JSDScript *script)
    1: {
    1:     return jsd_GetJSFunction (jsdc, script);
    1: }
    1: 
    1: JSD_PUBLIC_API(void *)
    1: JSD_SetScriptPrivate(JSDScript *jsdscript, void *data)
    1: {
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_SetScriptPrivate (jsdscript, data);
    1: }
    1: 
    1: JSD_PUBLIC_API(void *)
    1: JSD_GetScriptPrivate(JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetScriptPrivate (jsdscript);
    1: }
    1:     
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsActiveScript(JSDContext* jsdc, JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IsActiveScript(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetScriptFilename(JSDContext* jsdc, JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetScriptFilename(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetScriptFunctionName(JSDContext* jsdc, JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetScriptFunctionName(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetScriptBaseLineNumber(JSDContext* jsdc, JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetScriptBaseLineNumber(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetScriptLineExtent(JSDContext* jsdc, JSDScript *jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetScriptLineExtent(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetScriptHook(JSDContext* jsdc, JSD_ScriptHookProc hook, void* callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetScriptHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_GetScriptHook(JSDContext* jsdc, JSD_ScriptHookProc* hook, void** callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsuword)
    1: JSD_GetClosestPC(JSDContext* jsdc, JSDScript* jsdscript, uintN line)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetClosestPC(jsdc, jsdscript, line);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetClosestLine(JSDContext* jsdc, JSDScript* jsdscript, jsuword pc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_GetClosestLine(jsdc, jsdscript, pc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_ScriptCreated(JSDContext* jsdc,
    1:                   JSContext   *cx,
    1:                   const char  *filename,    /* URL this script loads from */
    1:                   uintN       lineno,       /* line where this script starts */
    1:                   JSScript    *script,
    1:                   JSFunction  *fun)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_ScriptCreated(jsdc, cx, filename, lineno, script, fun);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_ScriptDestroyed(JSDContext* jsdc,
    1:                     JSContext   *cx,
    1:                     JSScript    *script)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_ScriptDestroyed(jsdc, cx, script);
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Source Text functions */
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_LockSourceTextSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_LOCK_SOURCE_TEXT(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_UnlockSourceTextSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_UNLOCK_SOURCE_TEXT(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSD_IterateSources(JSDContext* jsdc, JSDSourceText **iterp)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IterateSources(jsdc, iterp);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSD_FindSourceForURL(JSDContext* jsdc, const char* url)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(url);
    1:     return jsd_FindSourceForURL(jsdc, url);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetSourceURL(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_GetSourceURL(jsdc,jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_GetSourceText(JSDContext* jsdc, JSDSourceText* jsdsrc,
    1:                   const char** ppBuf, intN* pLen)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     JS_ASSERT(ppBuf);
    1:     JS_ASSERT(pLen);
    1:     return jsd_GetSourceText(jsdc, jsdsrc, ppBuf, pLen);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_ClearSourceText(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     jsd_ClearSourceText(jsdc, jsdsrc);
    1: }
    1: 
    1: 
    1: JSD_PUBLIC_API(JSDSourceStatus)
    1: JSD_GetSourceStatus(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_GetSourceStatus(jsdc, jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsSourceDirty(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_IsSourceDirty(jsdc, jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_SetSourceDirty(JSDContext* jsdc, JSDSourceText* jsdsrc, JSBool dirty)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     jsd_SetSourceDirty(jsdc, jsdsrc, dirty);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetSourceAlterCount(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_GetSourceAlterCount(jsdc, jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_IncrementSourceAlterCount(JSDContext* jsdc, JSDSourceText* jsdsrc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_IncrementSourceAlterCount(jsdc, jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_DestroyAllSources( JSDContext* jsdc )
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     jsd_DestroyAllSources(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSD_NewSourceText(JSDContext* jsdc, const char* url)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(url);
    1:     return jsd_NewSourceText(jsdc, url);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSD_AppendSourceText(JSDContext* jsdc,
    1:                      JSDSourceText* jsdsrc,
    1:                      const char* text,       /* *not* zero terminated */
    1:                      size_t length,
    1:                      JSDSourceStatus status)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_AppendSourceText(jsdc, jsdsrc, text, length, status);
    1: }
    1: 
    1: extern JSD_PUBLIC_API(JSDSourceText*)
    1: JSD_AppendUCSourceText(JSDContext*     jsdc,
    1:                        JSDSourceText*  jsdsrc,
    1:                        const jschar*   text,       /* *not* zero terminated */
    1:                        size_t          length,
    1:                        JSDSourceStatus status)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsd_AppendUCSourceText(jsdc, jsdsrc, text, length, status);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_AddFullSourceText(JSDContext* jsdc,
    1:                       const char* text,       /* *not* zero terminated */
    1:                       size_t      length,
    1:                       const char* url)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(url);
    1:     return jsd_AddFullSourceText(jsdc, text, length, url);
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Execution/Interrupt Hook functions */
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetExecutionHook(JSDContext*           jsdc,
    1:                      JSDScript*            jsdscript,
    1:                      jsuword              pc,
    1:                      JSD_ExecutionHookProc hook,
    1:                      void*                 callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_SetExecutionHook(jsdc, jsdscript, pc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearExecutionHook(JSDContext*           jsdc,
    1:                        JSDScript*            jsdscript,
    1:                        jsuword              pc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_ClearExecutionHook(jsdc, jsdscript, pc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearAllExecutionHooksForScript(JSDContext* jsdc, JSDScript* jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsd_ClearAllExecutionHooksForScript(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearAllExecutionHooks(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearAllExecutionHooks(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetInterruptHook(JSDContext*           jsdc,
    1:                      JSD_ExecutionHookProc hook,
    1:                      void*                 callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetInterruptHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearInterruptHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearInterruptHook(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetDebugBreakHook(JSDContext*           jsdc,
    1:                       JSD_ExecutionHookProc hook,
    1:                       void*                 callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetDebugBreakHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearDebugBreakHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearDebugBreakHook(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetDebuggerHook(JSDContext*           jsdc,
    1:                     JSD_ExecutionHookProc hook,
    1:                     void*                 callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetDebuggerHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearDebuggerHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearDebuggerHook(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetThrowHook(JSDContext*           jsdc,
    1:                  JSD_ExecutionHookProc hook,
    1:                  void*                 callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetThrowHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearThrowHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearThrowHook(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetTopLevelHook(JSDContext*      jsdc,
    1:                     JSD_CallHookProc hook,
    1:                     void*            callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetTopLevelHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearTopLevelHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearTopLevelHook(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetFunctionHook(JSDContext*      jsdc,
    1:                     JSD_CallHookProc hook,
    1:                     void*            callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetFunctionHook(jsdc, hook, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_ClearFunctionHook(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ClearFunctionHook(jsdc);
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Stack Frame functions */
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetCountOfStackFrames(JSDContext* jsdc, JSDThreadState* jsdthreadstate)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetCountOfStackFrames(jsdc, jsdthreadstate);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDStackFrameInfo*)
    1: JSD_GetStackFrame(JSDContext* jsdc, JSDThreadState* jsdthreadstate)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetStackFrame(jsdc, jsdthreadstate);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSContext*)
    1: JSD_GetJSContext(JSDContext* jsdc, JSDThreadState* jsdthreadstate)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetJSContext(jsdc, jsdthreadstate);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDStackFrameInfo*)
    1: JSD_GetCallingStackFrame(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetCallingStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDScript*)
    1: JSD_GetScriptForStackFrame(JSDContext* jsdc,
    1:                            JSDThreadState* jsdthreadstate,
    1:                            JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScriptForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsuword)
    1: JSD_GetPCForStackFrame(JSDContext* jsdc,
    1:                        JSDThreadState* jsdthreadstate,
    1:                        JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetPCForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetCallObjectForStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetCallObjectForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetScopeChainForStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetScopeChainForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetThisForStackFrame(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetThisForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetNameForStackFrame(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetNameForStackFrame(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsStackFrameNative(JSDContext* jsdc,
    1:                        JSDThreadState* jsdthreadstate,
    1:                        JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IsStackFrameNative(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsStackFrameDebugger(JSDContext* jsdc,
    1:                          JSDThreadState* jsdthreadstate,
    1:                          JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IsStackFrameDebugger(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsStackFrameConstructing(JSDContext* jsdc,
    1:                              JSDThreadState* jsdthreadstate,
    1:                              JSDStackFrameInfo* jsdframe)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IsStackFrameConstructing(jsdc, jsdthreadstate, jsdframe);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_EvaluateUCScriptInStackFrame(JSDContext* jsdc,
    1:                                  JSDThreadState* jsdthreadstate,
    1:                                  JSDStackFrameInfo* jsdframe,
    1:                                  const jschar *bytes, uintN length,
    1:                                  const char *filename, uintN lineno, jsval *rval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(bytes);
    1:     JS_ASSERT(length);
    1:     JS_ASSERT(filename);
    1:     JS_ASSERT(rval);
    1: 
    1:     return jsd_EvaluateUCScriptInStackFrame(jsdc, jsdthreadstate,jsdframe,
    1:                                             bytes, length, filename, lineno,
    1:                                              JS_TRUE, rval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_AttemptUCScriptInStackFrame(JSDContext* jsdc,
    1:                                 JSDThreadState* jsdthreadstate,
    1:                                 JSDStackFrameInfo* jsdframe,
    1:                                 const jschar *bytes, uintN length,
    1:                                 const char *filename, uintN lineno,
    1:                                 jsval *rval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(bytes);
    1:     JS_ASSERT(length);
    1:     JS_ASSERT(filename);
    1:     JS_ASSERT(rval);
    1: 
    1:     return jsd_EvaluateUCScriptInStackFrame(jsdc, jsdthreadstate,jsdframe,
    1:                                             bytes, length, filename, lineno,
    1:                                             JS_FALSE, rval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_EvaluateScriptInStackFrame(JSDContext* jsdc,
    1:                                JSDThreadState* jsdthreadstate,
    1:                                JSDStackFrameInfo* jsdframe,
    1:                                const char *bytes, uintN length,
    1:                                const char *filename, uintN lineno, jsval *rval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(bytes);
    1:     JS_ASSERT(length);
    1:     JS_ASSERT(filename);
    1:     JS_ASSERT(rval);
    1: 
    1:     return jsd_EvaluateScriptInStackFrame(jsdc, jsdthreadstate,jsdframe,
    1:                                           bytes, length,
    1:                                           filename, lineno, JS_TRUE, rval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_AttemptScriptInStackFrame(JSDContext* jsdc,
    1:                               JSDThreadState* jsdthreadstate,
    1:                               JSDStackFrameInfo* jsdframe,
    1:                               const char *bytes, uintN length,
    1:                               const char *filename, uintN lineno, jsval *rval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(bytes);
    1:     JS_ASSERT(length);
    1:     JS_ASSERT(filename);
    1:     JS_ASSERT(rval);
    1: 
    1:     return jsd_EvaluateScriptInStackFrame(jsdc, jsdthreadstate,jsdframe,
    1:                                           bytes, length,
    1:                                           filename, lineno, JS_FALSE, rval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSString*)
    1: JSD_ValToStringInStackFrame(JSDContext* jsdc,
    1:                             JSDThreadState* jsdthreadstate,
    1:                             JSDStackFrameInfo* jsdframe,
    1:                             jsval val)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_ValToStringInStackFrame(jsdc, jsdthreadstate, jsdframe, val);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetException(JSDContext* jsdc, JSDThreadState* jsdthreadstate)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetException(jsdc, jsdthreadstate);
    1: }
    1: 
    1: extern JSD_PUBLIC_API(JSBool)
    1: JSD_SetException(JSDContext* jsdc, JSDThreadState* jsdthreadstate,
    1:                  JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetException(jsdc, jsdthreadstate, jsdval);
    1: }
    1: 
    1: /***************************************************************************/
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_SetErrorReporter(JSDContext*       jsdc,
    1:                      JSD_ErrorReporter reporter,
    1:                      void*             callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_SetErrorReporter(jsdc, reporter, callerdata);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_GetErrorReporter(JSDContext*        jsdc,
    1:                      JSD_ErrorReporter* reporter,
    1:                      void**             callerdata)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_GetErrorReporter(jsdc, reporter, callerdata);
    1: }
    1: 
    1: /***************************************************************************/
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsLockingAndThreadIdSupported()
    1: {
    1: #ifdef JSD_THREADSAFE
    1:     return JS_TRUE;
    1: #else
    1:     return JS_FALSE;
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(void*)
    1: JSD_CreateLock()
    1: {
    1: #ifdef JSD_THREADSAFE
    1:     return jsd_CreateLock();
    1: #else
    1:     return (void*)1;
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_Lock(void* lock)
    1: {
    1: #ifdef JSD_THREADSAFE
    1:     jsd_Lock(lock);
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_Unlock(void* lock)
    1: {
    1: #ifdef JSD_THREADSAFE
    1:     jsd_Unlock(lock);
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsLocked(void* lock)
    1: {
    1: #if defined(JSD_THREADSAFE) && defined(DEBUG)
    1:     return jsd_IsLocked(lock);
    1: #else
    1:     return JS_TRUE;
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsUnlocked(void* lock)
    1: {
    1: #if defined(JSD_THREADSAFE) && defined(DEBUG)
    1:     return ! jsd_IsLocked(lock);
    1: #else
    1:     return JS_TRUE;
    1: #endif
    1: }
    1: 
    1: JSD_PUBLIC_API(void*)
    1: JSD_CurrentThread()
    1: {
    1:     return JSD_CURRENT_THREAD();
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Value and Property Functions */
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_NewValue(JSDContext* jsdc, jsval val)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_NewValue(jsdc, val);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_DropValue(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     jsd_DropValue(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsval)
    1: JSD_GetValueWrappedJSVal(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueWrappedJSVal(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_RefreshValue(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     jsd_RefreshValue(jsdc, jsdval);
    1: }
    1: 
    1: /**************************************************/
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueObject(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueObject(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueNumber(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueNumber(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueInt(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueInt(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueDouble(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueDouble(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueString(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueString(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueBoolean(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueBoolean(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueNull(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueNull(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueVoid(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueVoid(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValuePrimitive(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValuePrimitive(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueFunction(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueFunction(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_IsValueNative(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_IsValueNative(jsdc, jsdval);
    1: }
    1: 
    1: /**************************************************/
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSD_GetValueBoolean(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueBoolean(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(int32)
    1: JSD_GetValueInt(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueInt(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(jsdouble*)
    1: JSD_GetValueDouble(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueDouble(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSString*)
    1: JSD_GetValueString(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueString(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetValueFunctionName(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueFunctionName(jsdc, jsdval);
    1: }
    1: 
    1: /**************************************************/
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetCountOfProperties(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetCountOfProperties(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDProperty*)
    1: JSD_IterateProperties(JSDContext* jsdc, JSDValue* jsdval, JSDProperty **iterp)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     JS_ASSERT(iterp);
    1:     return jsd_IterateProperties(jsdc, jsdval, iterp);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDProperty*)
    1: JSD_GetValueProperty(JSDContext* jsdc, JSDValue* jsdval, JSString* name)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     JS_ASSERT(name);
    1:     return jsd_GetValueProperty(jsdc, jsdval, name);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetValuePrototype(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValuePrototype(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetValueParent(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueParent(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetValueConstructor(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueConstructor(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetValueClassName(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetValueClassName(jsdc, jsdval);
    1: }
    1: 
33644: JSD_PUBLIC_API(JSDScript*)
33644: JSD_GetScriptForValue(JSDContext* jsdc, JSDValue* jsdval)
33644: {
33644:     JSD_ASSERT_VALID_CONTEXT(jsdc);
33644:     return jsd_GetScriptForValue(jsdc, jsdval);
33644: }
    1: /**************************************************/
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_DropProperty(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     jsd_DropProperty(jsdc, jsdprop);
    1: }
    1: 
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetPropertyName(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     return jsd_GetPropertyName(jsdc, jsdprop);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetPropertyValue(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     return jsd_GetPropertyValue(jsdc, jsdprop);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetPropertyAlias(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     return jsd_GetPropertyAlias(jsdc, jsdprop);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetPropertyFlags(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     return jsd_GetPropertyFlags(jsdc, jsdprop);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetPropertyVarArgSlot(JSDContext* jsdc, JSDProperty* jsdprop)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_PROPERTY(jsdprop);
    1:     return jsd_GetPropertyVarArgSlot(jsdc, jsdprop);
    1: }
    1: 
    1: /**************************************************/
    1: /* Object Functions */
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_LockObjectSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_LOCK_OBJECTS(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(void)
    1: JSD_UnlockObjectSubsystem(JSDContext* jsdc)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_UNLOCK_OBJECTS(jsdc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDObject*)
    1: JSD_IterateObjects(JSDContext* jsdc, JSDObject** iterp)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     return jsd_IterateObjects(jsdc, iterp);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSObject*)
    1: JSD_GetWrappedObject(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetWrappedObject(jsdc, jsdobj);
    1: 
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetObjectNewURL(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetObjectNewURL(jsdc, jsdobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetObjectNewLineNumber(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetObjectNewLineNumber(jsdc, jsdobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetObjectConstructorURL(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetObjectConstructorURL(jsdc, jsdobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(uintN)
    1: JSD_GetObjectConstructorLineNumber(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetObjectConstructorLineNumber(jsdc, jsdobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(const char*)
    1: JSD_GetObjectConstructorName(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetObjectConstructorName(jsdc, jsdobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDObject*)
    1: JSD_GetJSDObjectForJSObject(JSDContext* jsdc, JSObject* jsobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(jsobj);
    1:     return jsd_GetJSDObjectForJSObject(jsdc, jsobj);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDObject*)
    1: JSD_GetObjectForValue(JSDContext* jsdc, JSDValue* jsdval)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_VALUE(jsdval);
    1:     return jsd_GetObjectForValue(jsdc, jsdval);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDValue*)
    1: JSD_GetValueForObject(JSDContext* jsdc, JSDObject* jsdobj)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_OBJECT(jsdobj);
    1:     return jsd_GetValueForObject(jsdc, jsdobj);
    1: }
    1: 
    1: /***************************************************************************/
    1: /* Livewire specific API */
    1: #ifdef LIVEWIRE
    1: 
    1: JSD_PUBLIC_API(LWDBGScript*)
    1: JSDLW_GetLWScript(JSDContext* jsdc, JSDScript* jsdscript)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsdlw_GetLWScript(jsdc, jsdscript);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSDLW_PreLoadSource( JSDContext* jsdc, LWDBGApp* app,
    1:                      const char* filename, JSBool clear )
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JS_ASSERT(app);
    1:     JS_ASSERT(filename);
    1:     return jsdlw_PreLoadSource(jsdc, app, filename, clear);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSDSourceText*)
    1: JSDLW_ForceLoadSource( JSDContext* jsdc, JSDSourceText* jsdsrc )
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SOURCE_TEXT(jsdsrc);
    1:     return jsdlw_ForceLoadSource(jsdc, jsdsrc);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSDLW_RawToProcessedLineNumber(JSDContext* jsdc, JSDScript* jsdscript,
    1:                                uintN lineIn, uintN* lineOut)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsdlw_RawToProcessedLineNumber(jsdc, jsdscript, lineIn, lineOut);
    1: }
    1: 
    1: JSD_PUBLIC_API(JSBool)
    1: JSDLW_ProcessedToRawLineNumber(JSDContext* jsdc, JSDScript* jsdscript,
    1:                                uintN lineIn, uintN* lineOut)
    1: {
    1:     JSD_ASSERT_VALID_CONTEXT(jsdc);
    1:     JSD_ASSERT_VALID_SCRIPT(jsdscript);
    1:     return jsdlw_ProcessedToRawLineNumber(jsdc, jsdscript, lineIn, lineOut);
    1: }
    1: 
    1: #endif
    1: /***************************************************************************/
