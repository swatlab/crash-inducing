    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Gagan Saksena <gagan@netscape.com> (original author)
    1:  *   Darin Fisher <darin@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsIURI.idl"
    1: 
    1: /**
    1:  * The nsIURL interface provides convenience methods that further
    1:  * break down the path portion of nsIURI:
    1:  *
    1:  * http://host/directory/fileBaseName.fileExtension?query
    1:  * http://host/directory/fileBaseName.fileExtension#ref
    1:  * http://host/directory/fileBaseName.fileExtension;param
    1:  *            \          \                       /
    1:  *             \          -----------------------
    1:  *              \                   |          /
    1:  *               \               fileName     /
    1:  *                ----------------------------
    1:  *                            |
    1:  *                        filePath
    1:  */
74388: [scriptable, uuid(eab18ad5-e3be-4eb3-9c78-7d4e750200d6)]
    1: interface nsIURL : nsIURI
    1: {
    1:     /*************************************************************************
    1:      * The URL path is broken down into the following principal components:
    1:      */
    1: 
    1:     /**
    1:      * Returns a path including the directory and file portions of a
    1:      * URL.  For example, the filePath of "http://host/foo/bar.html#baz"
    1:      * is "/foo/bar.html".
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String filePath;
    1: 
    1:     /**
    1:      * Returns the parameters specified after the ; in the URL. 
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String param;
    1: 
    1:     /**
    1:      * Returns the query portion (the part after the "?") of the URL.
    1:      * If there isn't one, an empty string is returned.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String query;
    1: 
    1: 
    1:     /*************************************************************************
    1:      * The URL filepath is broken down into the following sub-components:
    1:      */
    1: 
    1:     /**
    1:      * Returns the directory portion of a URL.  If the URL denotes a path to a
    1:      * directory and not a file, e.g. http://host/foo/bar/, then the Directory
    1:      * attribute accesses the complete /foo/bar/ portion, and the FileName is
    1:      * the empty string. If the trailing slash is omitted, then the Directory
    1:      * is /foo/ and the file is bar (i.e. this is a syntactic, not a semantic
    1:      * breakdown of the Path).  And hence don't rely on this for something to
    1:      * be a definitely be a file. But you can get just the leading directory
    1:      * portion for sure.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String directory;
    1: 
    1:     /**
    1:      * Returns the file name portion of a URL.  If the URL denotes a path to a
    1:      * directory and not a file, e.g. http://host/foo/bar/, then the Directory
    1:      * attribute accesses the complete /foo/bar/ portion, and the FileName is
    1:      * the empty string. Note that this is purely based on searching for the
    1:      * last trailing slash. And hence don't rely on this to be a definite file. 
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String fileName;
    1: 
    1: 
    1:     /*************************************************************************
    1:      * The URL filename is broken down even further:
    1:      */
    1: 
    1:     /**
    1:      * Returns the file basename portion of a filename in a url.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String fileBaseName;
    1: 
    1:     /**
    1:      * Returns the file extension portion of a filename in a url.  If a file
    1:      * extension does not exist, the empty string is returned.
    1:      *
    1:      * Some characters may be escaped.
    1:      */
    1:     attribute AUTF8String fileExtension;
    1: 
    1:     /**
    1:      * This method takes a uri and compares the two.  The common uri portion
    1:      * is returned as a string.  The minimum common uri portion is the 
    1:      * protocol, and any of these if present:  login, password, host and port
    1:      * If no commonality is found, "" is returned.  If they are identical, the
    1:      * whole path with file/ref/etc. is returned.  For file uris, it is
    1:      * expected that the common spec would be at least "file:///" since '/' is
    1:      * a shared common root.
    1:      *
    1:      * Examples:
    1:      *    this.spec               aURIToCompare.spec        result
    1:      * 1) http://mozilla.org/     http://www.mozilla.org/   ""
    1:      * 2) http://foo.com/bar/     ftp://foo.com/bar/        ""
    1:      * 3) http://foo.com:8080/    http://foo.com/bar/       ""
    1:      * 4) ftp://user@foo.com/     ftp://user:pw@foo.com/    ""
    1:      * 5) ftp://foo.com/bar/      ftp://foo.com/bar         ftp://foo.com/
    1:      * 6) ftp://foo.com/bar/      ftp://foo.com/bar/b.html  ftp://foo.com/bar/
    1:      * 7) http://foo.com/a.htm#i  http://foo.com/b.htm      http://foo.com/
    1:      * 8) ftp://foo.com/c.htm#i   ftp://foo.com/c.htm       ftp://foo.com/c.htm
    1:      * 9) file:///a/b/c.html      file:///d/e/c.html        file:///
    1:      */
    1:     AUTF8String getCommonBaseSpec(in nsIURI aURIToCompare);
    1: 
    1:     /**
39869:      * This method tries to create a string which specifies the location of the
39869:      * argument relative to |this|.  If the argument and |this| are equal, the
39869:      * method returns "".  If any of the URIs' scheme, host, userpass, or port
39869:      * don't match, the method returns the full spec of the argument.
39869:      *
39869:      * Examples:
39869:      *    this.spec               aURIToCompare.spec        result
39869:      * 1) http://mozilla.org/     http://www.mozilla.org/   http://www.mozilla.org/
39869:      * 2) http://mozilla.org/     http://www.mozilla.org    http://www.mozilla.org/
39869:      * 3) http://foo.com/bar/     http://foo.com:80/bar/    ""
39869:      * 4) http://foo.com/         http://foo.com/a.htm#b    a.html#b
39869:      * 5) http://foo.com/a/b/     http://foo.com/c          ../../c
    1:      */
    1:     AUTF8String getRelativeSpec(in nsIURI aURIToCompare);
    1: 
    1: };
