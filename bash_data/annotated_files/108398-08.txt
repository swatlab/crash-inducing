 51753: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 51753: 
 51753: #ifndef NSSUBDOCUMENTFRAME_H_
 51753: #define NSSUBDOCUMENTFRAME_H_
 51753: 
 51753: #include "nsLeafFrame.h"
 51753: #include "nsIReflowCallback.h"
 51753: #include "nsFrameLoader.h"
 51753: 
 51753: /******************************************************************************
 51753:  * nsSubDocumentFrame
 51753:  *****************************************************************************/
 51753: class nsSubDocumentFrame : public nsLeafFrame,
 51753:                            public nsIReflowCallback
 51753: {
 51753: public:
 51754:   NS_DECL_QUERYFRAME_TARGET(nsSubDocumentFrame)
 51753:   NS_DECL_FRAMEARENA_HELPERS
 51753: 
 51753:   nsSubDocumentFrame(nsStyleContext* aContext);
 51753: 
 51753: #ifdef DEBUG
 51753:   NS_IMETHOD GetFrameName(nsAString& aResult) const;
 51753: #endif
 51753: 
 51753:   NS_DECL_QUERYFRAME
 51753: 
 51753:   virtual nsIAtom* GetType() const;
 51753: 
 79445:   virtual bool IsFrameOfType(PRUint32 aFlags) const
 51753:   {
 51753:     // nsLeafFrame is already eReplacedContainsBlock, but that's somewhat bogus
 51753:     return nsLeafFrame::IsFrameOfType(aFlags &
 51753:       ~(nsIFrame::eReplaced | nsIFrame::eReplacedContainsBlock));
 51753:   }
 51753: 
 51753:   NS_IMETHOD Init(nsIContent*      aContent,
 51753:                   nsIFrame*        aParent,
 51753:                   nsIFrame*        aPrevInFlow);
 51753: 
 51753:   virtual void DestroyFrom(nsIFrame* aDestructRoot);
 51753: 
 68481:   virtual nscoord GetMinWidth(nsRenderingContext *aRenderingContext);
 68481:   virtual nscoord GetPrefWidth(nsRenderingContext *aRenderingContext);
 51753: 
 51753:   virtual IntrinsicSize GetIntrinsicSize();
 51753:   virtual nsSize  GetIntrinsicRatio();
 51753: 
 68481:   virtual nsSize ComputeAutoSize(nsRenderingContext *aRenderingContext,
 51753:                                  nsSize aCBSize, nscoord aAvailableWidth,
 51753:                                  nsSize aMargin, nsSize aBorder,
 79445:                                  nsSize aPadding, bool aShrinkWrap);
 51753: 
 68481:   virtual nsSize ComputeSize(nsRenderingContext *aRenderingContext,
 51753:                              nsSize aCBSize, nscoord aAvailableWidth,
 51753:                              nsSize aMargin, nsSize aBorder, nsSize aPadding,
 93353:                              PRUint32 aFlags) MOZ_OVERRIDE;
 51753: 
 51753:   NS_IMETHOD Reflow(nsPresContext*          aPresContext,
 51753:                     nsHTMLReflowMetrics&     aDesiredSize,
 51753:                     const nsHTMLReflowState& aReflowState,
 51753:                     nsReflowStatus&          aStatus);
 51753: 
 51753:   NS_IMETHOD BuildDisplayList(nsDisplayListBuilder*   aBuilder,
 51753:                               const nsRect&           aDirtyRect,
 51753:                               const nsDisplayListSet& aLists);
 51753: 
 51753:   NS_IMETHOD AttributeChanged(PRInt32 aNameSpaceID,
 51753:                               nsIAtom* aAttribute,
 51753:                               PRInt32 aModType);
 51753: 
 51753:   // if the content is "visibility:hidden", then just hide the view
 51753:   // and all our contents. We don't extend "visibility:hidden" to
 51753:   // the child content ourselves, since it belongs to a different
 51753:   // document and CSS doesn't inherit in there.
 79445:   virtual bool SupportsVisibilityHidden() { return false; }
 51753: 
 51753: #ifdef ACCESSIBILITY
 99648:   virtual already_AddRefed<Accessible> CreateAccessible();
 51753: #endif
 51753: 
 51755:   nsresult GetDocShell(nsIDocShell **aDocShell);
 51755:   nsresult BeginSwapDocShells(nsIFrame* aOther);
 51755:   void EndSwapDocShells(nsIFrame* aOther);
 54315:   nsIView* EnsureInnerView();
 51755:   nsIFrame* GetSubdocumentRootFrame();
 51753: 
 51753:   // nsIReflowCallback
 79445:   virtual bool ReflowFinished();
 51753:   virtual void ReflowCallbackCanceled();
 51753: 
 83439:   bool ShouldClipSubdocument()
 83439:   {
 83439:     nsFrameLoader* frameLoader = FrameLoader();
 83439:     return !frameLoader || frameLoader->ShouldClipSubdocument();
 83439:   }
 83439: 
 92922:   bool ShouldClampScrollPosition()
 92922:   {
 92922:     nsFrameLoader* frameLoader = FrameLoader();
 92922:     return !frameLoader || frameLoader->ShouldClampScrollPosition();
 92922:   }
 92922: 
 51753: protected:
 51753:   friend class AsyncFrameInit;
 51753: 
 51753:   // Helper method to look up the HTML marginwidth & marginheight attributes
 51753:   nsIntSize GetMarginAttributes();
 51753: 
 51753:   nsFrameLoader* FrameLoader();
 51753: 
 79445:   bool IsInline() { return mIsInline; }
 51753: 
 51753:   virtual nscoord GetIntrinsicWidth();
 51753:   virtual nscoord GetIntrinsicHeight();
 51753: 
107846:   virtual int GetSkipSides() const;
 51753: 
108398:   // Hide or show our document viewer
108398:   void HideViewer();
 51753:   void ShowViewer();
 51753: 
 51753:   /* Obtains the frame we should use for intrinsic size information if we are
 51753:    * an HTML <object>, <embed> or <applet> (a replaced element - not <iframe>)
 51753:    * and our sub-document has an intrinsic size. The frame returned is the
 51753:    * frame for the document element of the document we're embedding.
 51753:    *
 51753:    * Called "Obtain*" and not "Get*" because of comment on GetDocShell that
 51753:    * says it should be called ObtainDocShell because of it's side effects.
 51753:    */
 51753:   nsIFrame* ObtainIntrinsicSizeFrame();
 51753: 
 51753:   nsRefPtr<nsFrameLoader> mFrameLoader;
 51753:   nsIView* mInnerView;
 79445:   bool mIsInline;
 79445:   bool mPostedReflowCallback;
 79445:   bool mDidCreateDoc;
 79445:   bool mCallingShow;
 51753: };
 51753: 
 51753: #endif /* NSSUBDOCUMENTFRAME_H_ */
