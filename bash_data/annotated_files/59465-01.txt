43629: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
41369: /* ***** BEGIN LICENSE BLOCK *****
41369:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
41369:  *
41369:  * The contents of this file are subject to the Mozilla Public License Version
41369:  * 1.1 (the "License"); you may not use this file except in compliance with
41369:  * the License. You may obtain a copy of the License at
41369:  * http://www.mozilla.org/MPL/
41369:  *
41369:  * Software distributed under the License is distributed on an "AS IS" basis,
41369:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
41369:  * for the specific language governing rights and limitations under the
41369:  * License.
41369:  *
41369:  * The Original Code is mozilla.org code.
41369:  *
41369:  * The Initial Developer of the Original Code is
41369:  *   Mozilla Corporation.
41369:  * Portions created by the Initial Developer are Copyright (C) 2009
41369:  * the Initial Developer. All Rights Reserved.
41369:  *
41369:  * Contributor(s):
41369:  *   Vladimir Vukicevic <vladimir@pobox.com>
41369:  *   Mark Steele <mwsteele@gmail.com>
41369:  *   Bas Schouten <bschouten@mozilla.com>
41369:  *
41369:  * Alternatively, the contents of this file may be used under the terms of
41369:  * either the GNU General Public License Version 2 or later (the "GPL"), or
41369:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
41369:  * in which case the provisions of the GPL or the LGPL are applicable instead
41369:  * of those above. If you wish to allow use of your version of this file only
41369:  * under the terms of either the GPL or the LGPL, and not to allow others to
41369:  * use your version of this file under the terms of the MPL, indicate your
41369:  * decision by deleting the provisions above and replace them with the notice
41369:  * and other provisions required by the GPL or the LGPL. If you do not delete
41369:  * the provisions above, a recipient may use your version of this file under
41369:  * the terms of any one of the MPL, the GPL or the LGPL.
41369:  *
41369:  * ***** END LICENSE BLOCK ***** */
41369: 
41369: 
41369: #include <string.h>
41369: #include <stdio.h>
41369: 
41369: #include "prlink.h"
55380: #include "prenv.h"
41369: 
53690: #include "nsThreadUtils.h"
53690: 
59442: #include "gfxPlatform.h"
41369: #include "GLContext.h"
42402: #include "GLContextProvider.h"
41369: 
41369: namespace mozilla {
41369: namespace gl {
41369: 
55380: #ifdef DEBUG
55380: // see comment near declaration in GLContext.h. Should be thread-local.
55380: GLContext* GLContext::sCurrentGLContext = nsnull;
55380: #endif
55380: 
42402: // define this here since it's global to GLContextProvider, not any
42402: // specific implementation
42402: const ContextFormat ContextFormat::BasicRGBA32Format(ContextFormat::BasicRGBA32);
42402: 
41369: #define MAX_SYMBOL_LENGTH 128
41369: #define MAX_SYMBOL_NAMES 5
41369: 
42402: PRBool
41369: LibrarySymbolLoader::OpenLibrary(const char *library)
41369: {
41369:     PRLibSpec lspec;
41369:     lspec.type = PR_LibSpec_Pathname;
41369:     lspec.value.pathname = library;
41369: 
41369:     mLibrary = PR_LoadLibraryWithFlags(lspec, PR_LD_LAZY | PR_LD_LOCAL);
41369:     if (!mLibrary)
42402:         return PR_FALSE;
41369: 
42402:     return PR_TRUE;
42402: }
42402: 
42402: PRBool
42402: LibrarySymbolLoader::LoadSymbols(SymLoadStruct *firstStruct, PRBool tryplatform, const char *prefix)
42402: {
42402:     return LoadSymbols(mLibrary, firstStruct, tryplatform ? mLookupFunc : nsnull, prefix);
41369: }
41369: 
41369: PRFuncPtr
42402: LibrarySymbolLoader::LookupSymbol(PRLibrary *lib,
42402:                                   const char *sym,
42402:                                   PlatformLookupFunction lookupFunction)
41369: {
41369:     PRFuncPtr res = 0;
41369: 
41369:     // try finding it in the library directly, if we have one
42402:     if (lib) {
42402:         res = PR_FindFunctionSymbol(lib, sym);
41369:     }
41369: 
47911:     // then try looking it up via the lookup symbol
47911:     if (!res && lookupFunction) {
47911:         res = lookupFunction(sym);
47911:     }
47911: 
47911:     // finally just try finding it in the process
41369:     if (!res) {
41369:         PRLibrary *leakedLibRef;
41369:         res = PR_FindFunctionSymbolAndLibrary(sym, &leakedLibRef);
41369:     }
41369: 
41369:     return res;
41369: }
41369: 
41369: PRBool
42402: LibrarySymbolLoader::LoadSymbols(PRLibrary *lib,
42402:                                  SymLoadStruct *firstStruct,
42402:                                  PlatformLookupFunction lookupFunction,
42402:                                  const char *prefix)
41369: {
41369:     char sbuf[MAX_SYMBOL_LENGTH * 2];
47908:     int failCount = 0;
41369: 
41369:     SymLoadStruct *ss = firstStruct;
41369:     while (ss->symPointer) {
41369:         *ss->symPointer = 0;
41369: 
41369:         for (int i = 0; i < MAX_SYMBOL_NAMES; i++) {
41369:             if (ss->symNames[i] == nsnull)
41369:                 break;
41369: 
41369:             const char *s = ss->symNames[i];
41369:             if (prefix && *prefix != 0) {
41369:                 strcpy(sbuf, prefix);
41369:                 strcat(sbuf, ss->symNames[i]);
41369:                 s = sbuf;
41369:             }
41369: 
42402:             PRFuncPtr p = LookupSymbol(lib, s, lookupFunction);
41369:             if (p) {
41369:                 *ss->symPointer = p;
41369:                 break;
41369:             }
41369:         }
41369: 
41369:         if (*ss->symPointer == 0) {
41369:             fprintf (stderr, "Can't find symbol '%s'\n", ss->symNames[0]);
47908:             failCount++;
41369:         }
41369: 
41369:         ss++;
41369:     }
41369: 
47908:     return failCount == 0 ? PR_TRUE : PR_FALSE;
41369: }
41369: 
41369: /*
41369:  * XXX - we should really know the ARB/EXT variants of these
41369:  * instead of only handling the symbol if it's exposed directly.
41369:  */
41369: 
41369: PRBool
41369: GLContext::InitWithPrefix(const char *prefix, PRBool trygl)
41369: {
41369:     if (mInitialized) {
41369:         return PR_TRUE;
41369:     }
41369: 
41369:     SymLoadStruct symbols[] = {
55380:         { (PRFuncPtr*) &mSymbols.fActiveTexture, { "ActiveTexture", "ActiveTextureARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fAttachShader, { "AttachShader", "AttachShaderARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBindAttribLocation, { "BindAttribLocation", "BindAttribLocationARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBindBuffer, { "BindBuffer", "BindBufferARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBindTexture, { "BindTexture", "BindTextureARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBlendColor, { "BlendColor", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBlendEquation, { "BlendEquation", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBlendEquationSeparate, { "BlendEquationSeparate", "BlendEquationSeparateEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBlendFunc, { "BlendFunc", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBlendFuncSeparate, { "BlendFuncSeparate", "BlendFuncSeparateEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBufferData, { "BufferData", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBufferSubData, { "BufferSubData", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fClear, { "Clear", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fClearColor, { "ClearColor", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fClearStencil, { "ClearStencil", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fColorMask, { "ColorMask", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCullFace, { "CullFace", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDetachShader, { "DetachShader", "DetachShaderARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDepthFunc, { "DepthFunc", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDepthMask, { "DepthMask", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDisable, { "Disable", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDisableVertexAttribArray, { "DisableVertexAttribArray", "DisableVertexAttribArrayARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDrawArrays, { "DrawArrays", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDrawElements, { "DrawElements", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fEnable, { "Enable", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fEnableVertexAttribArray, { "EnableVertexAttribArray", "EnableVertexAttribArrayARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fFinish, { "Finish", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fFlush, { "Flush", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fFrontFace, { "FrontFace", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetActiveAttrib, { "GetActiveAttrib", "GetActiveAttribARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetActiveUniform, { "GetActiveUniform", "GetActiveUniformARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetAttachedShaders, { "GetAttachedShaders", "GetAttachedShadersARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetAttribLocation, { "GetAttribLocation", "GetAttribLocationARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetIntegerv, { "GetIntegerv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetFloatv, { "GetFloatv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetBooleanv, { "GetBooleanv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetBufferParameteriv, { "GetBufferParameteriv", "GetBufferParameterivARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetError, { "GetError", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetProgramiv, { "GetProgramiv", "GetProgramivARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetProgramInfoLog, { "GetProgramInfoLog", "GetProgramInfoLogARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fTexParameteri, { "TexParameteri", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fTexParameterf, { "TexParameterf", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetString, { "GetString", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetTexParameterfv, { "GetTexParameterfv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetTexParameteriv, { "GetTexParameteriv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetUniformfv, { "GetUniformfv", "GetUniformfvARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetUniformiv, { "GetUniformiv", "GetUniformivARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetUniformLocation, { "GetUniformLocation", "GetUniformLocationARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetVertexAttribfv, { "GetVertexAttribfv", "GetVertexAttribfvARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetVertexAttribiv, { "GetVertexAttribiv", "GetVertexAttribivARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fHint, { "Hint", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsBuffer, { "IsBuffer", "IsBufferARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsEnabled, { "IsEnabled", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsProgram, { "IsProgram", "IsProgramARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsShader, { "IsShader", "IsShaderARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsTexture, { "IsTexture", "IsTextureARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fLineWidth, { "LineWidth", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fLinkProgram, { "LinkProgram", "LinkProgramARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fPixelStorei, { "PixelStorei", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fPolygonOffset, { "PolygonOffset", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fReadPixels, { "ReadPixels", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fSampleCoverage, { "SampleCoverage", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fScissor, { "Scissor", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilFunc, { "StencilFunc", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilFuncSeparate, { "StencilFuncSeparate", "StencilFuncSeparateEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilMask, { "StencilMask", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilMaskSeparate, { "StencilMaskSeparate", "StencilMaskSeparateEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilOp, { "StencilOp", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fStencilOpSeparate, { "StencilOpSeparate", "StencilOpSeparateEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fTexImage2D, { "TexImage2D", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fTexSubImage2D, { "TexSubImage2D", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform1f, { "Uniform1f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform1fv, { "Uniform1fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform1i, { "Uniform1i", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform1iv, { "Uniform1iv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform2f, { "Uniform2f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform2fv, { "Uniform2fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform2i, { "Uniform2i", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform2iv, { "Uniform2iv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform3f, { "Uniform3f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform3fv, { "Uniform3fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform3i, { "Uniform3i", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform3iv, { "Uniform3iv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform4f, { "Uniform4f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform4fv, { "Uniform4fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform4i, { "Uniform4i", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniform4iv, { "Uniform4iv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniformMatrix2fv, { "UniformMatrix2fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniformMatrix3fv, { "UniformMatrix3fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUniformMatrix4fv, { "UniformMatrix4fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fUseProgram, { "UseProgram", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fValidateProgram, { "ValidateProgram", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttribPointer, { "VertexAttribPointer", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib1f, { "VertexAttrib1f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib2f, { "VertexAttrib2f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib3f, { "VertexAttrib3f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib4f, { "VertexAttrib4f", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib1fv, { "VertexAttrib1fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib2fv, { "VertexAttrib2fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib3fv, { "VertexAttrib3fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttrib4fv, { "VertexAttrib4fv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fViewport, { "Viewport", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCompileShader, { "CompileShader", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCopyTexImage2D, { "CopyTexImage2D", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCopyTexSubImage2D, { "CopyTexSubImage2D", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetShaderiv, { "GetShaderiv", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetShaderInfoLog, { "GetShaderInfoLog", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetShaderSource, { "GetShaderSource", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fShaderSource, { "ShaderSource", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fVertexAttribPointer, { "VertexAttribPointer", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBindFramebuffer, { "BindFramebuffer", "BindFramebufferEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fBindRenderbuffer, { "BindRenderbuffer", "BindRenderbufferEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCheckFramebufferStatus, { "CheckFramebufferStatus", "CheckFramebufferStatusEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fFramebufferRenderbuffer, { "FramebufferRenderbuffer", "FramebufferRenderbufferEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fFramebufferTexture2D, { "FramebufferTexture2D", "FramebufferTexture2DEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGenerateMipmap, { "GenerateMipmap", "GenerateMipmapEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetFramebufferAttachmentParameteriv, { "GetFramebufferAttachmentParameteriv", "GetFramebufferAttachmentParameterivEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGetRenderbufferParameteriv, { "GetRenderbufferParameteriv", "GetRenderbufferParameterivEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsFramebuffer, { "IsFramebuffer", "IsFramebufferEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fIsRenderbuffer, { "IsRenderbuffer", "IsRenderbufferEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fRenderbufferStorage, { "RenderbufferStorage", "RenderbufferStorageEXT", NULL } },
47908: 
55380:         { (PRFuncPtr*) &mSymbols.fGenBuffers, { "GenBuffers", "GenBuffersARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGenTextures, { "GenTextures", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCreateProgram, { "CreateProgram", "CreateProgramARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fCreateShader, { "CreateShader", "CreateShaderARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGenFramebuffers, { "GenFramebuffers", "GenFramebuffersEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fGenRenderbuffers, { "GenRenderbuffers", "GenRenderbuffersEXT", NULL } },
47908: 
55380:         { (PRFuncPtr*) &mSymbols.fDeleteBuffers, { "DeleteBuffers", "DeleteBuffersARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDeleteTextures, { "DeleteTextures", "DeleteTexturesARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDeleteProgram, { "DeleteProgram", "DeleteProgramARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDeleteShader, { "DeleteShader", "DeleteShaderARB", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDeleteFramebuffers, { "DeleteFramebuffers", "DeleteFramebuffersEXT", NULL } },
55380:         { (PRFuncPtr*) &mSymbols.fDeleteRenderbuffers, { "DeleteRenderbuffers", "DeleteRenderbuffersEXT", NULL } },
41369: 
55380:         { mIsGLES2 ? (PRFuncPtr*) &mSymbols.fClearDepthf : (PRFuncPtr*) &mSymbols.fClearDepth,
48309:           { mIsGLES2 ? "ClearDepthf" : "ClearDepth", NULL } },
55380:         { mIsGLES2 ? (PRFuncPtr*) &mSymbols.fDepthRangef : (PRFuncPtr*) &mSymbols.fDepthRange,
48309:           { mIsGLES2 ? "DepthRangef" : "DepthRange", NULL } },
48309: 
48309:         // XXX FIXME -- we shouldn't be using glReadBuffer!
55380:         { mIsGLES2 ? (PRFuncPtr*) NULL : (PRFuncPtr*) &mSymbols.fReadBuffer,
48309:           { mIsGLES2 ? NULL : "ReadBuffer", NULL } },
48309: 
59442:         { mIsGLES2 ? (PRFuncPtr*) NULL : (PRFuncPtr*) &mSymbols.fMapBuffer,
59442:           { mIsGLES2 ? NULL : "MapBuffer", NULL } },
59442:         { mIsGLES2 ? (PRFuncPtr*) NULL : (PRFuncPtr*) &mSymbols.fUnmapBuffer,
59442:           { mIsGLES2 ? NULL : "UnmapBuffer", NULL } },
59442: 
41369:         { NULL, { NULL } },
41369: 
41369:     };
41369: 
41369:     mInitialized = LoadSymbols(&symbols[0], trygl, prefix);
49076: 
49076:     if (mInitialized) {
49076:         InitExtensions();
54505: 
59442:         NS_ASSERTION(!IsExtensionSupported(GLContext::ARB_pixel_buffer_object) ||
59442:                      (mSymbols.fMapBuffer && mSymbols.fUnmapBuffer),
59442:                      "ARB_pixel_buffer_object supported without glMapBuffer/UnmapBuffer being available!");
59442: 
54505:         GLint v[4];
54505: 
54505:         fGetIntegerv(LOCAL_GL_SCISSOR_BOX, v);
54505:         mScissorStack.AppendElement(nsIntRect(v[0], v[1], v[2], v[3]));
54505: 
54505:         fGetIntegerv(LOCAL_GL_VIEWPORT, v);
54505:         mViewportStack.AppendElement(nsIntRect(v[0], v[1], v[2], v[3]));
54959: 
54959:         const char *glVendorString = (const char *)fGetString(LOCAL_GL_VENDOR);
57418:         const char *vendorMatchStrings[VendorOther] = {
57418:                 "Intel",
57418:                 "NVIDIA",
57418:                 "ATI",
57418:                 "Qualcomm"
57418:         };
57418: 
59435:         fGetIntegerv(LOCAL_GL_MAX_TEXTURE_SIZE, &mMaxTextureSize);
59435: 
57418:         mVendor = VendorOther;
57418:         for (int i = 0; i < VendorOther; ++i) {
57418:             if (DoesVendorStringMatch(glVendorString, vendorMatchStrings[i])) {
57418:                 mVendor = i;
57418:                 break;
57418:             }
57418:         }
54959: 
54959: #ifdef DEBUG
54959:         static bool once = false;
54959:         if (!once) {
57418:             const char *vendors[VendorOther] = {
57418:                 "Intel",
57418:                 "NVIDIA",
57418:                 "ATI",
57418:                 "Qualcomm"
57418:             };
57418: 
54959:             once = true;
57418:             if (mVendor < VendorOther) {
57418:                 printf_stderr("OpenGL vendor ('%s') recognized as: %s\n",
57418:                               glVendorString, vendors[mVendor]);
57418:             } else {
57418:                 printf_stderr("OpenGL vendor ('%s') unrecognized\n", glVendorString);
57418:             }
54959:         }
54959: #endif
57631: 
57631:         UpdateActualFormat();
49076:     }
49076: 
55380: #ifdef DEBUG
55380:     if (PR_GetEnv("MOZ_GL_DEBUG"))
55380:         mDebugMode |= DebugEnabled;
55380: 
55380:     // enables extra verbose output, informing of the start and finish of every GL call.
55380:     // useful e.g. to record information to investigate graphics system crashes/lockups
55380:     if (PR_GetEnv("MOZ_GL_DEBUG_VERBOSE"))
55380:         mDebugMode |= DebugTrace;
55380: 
55380:     // aborts on GL error. Can be useful to debug quicker code that is known not to generate any GL error in principle.
55380:     if (PR_GetEnv("MOZ_GL_DEBUG_ABORT_ON_ERROR"))
55380:         mDebugMode |= DebugAbortOnError;
55380: #endif
55380: 
43628:     return mInitialized;
43628: }
41369: 
49076: // should match the order of GLExtensions
49076: static const char *sExtensionNames[] = {
49076:     "GL_EXT_framebuffer_object",
49076:     "GL_ARB_framebuffer_object",
49077:     "GL_ARB_texture_rectangle",
49076:     "GL_EXT_bgra",
49076:     "GL_EXT_texture_format_BGRA8888",
49076:     "GL_OES_depth24",
49076:     "GL_OES_depth32",
49076:     "GL_OES_stencil8",
49076:     "GL_OES_texture_npot",
49076:     "GL_OES_depth_texture",
49076:     "GL_OES_packed_depth_stencil",
49076:     "GL_IMG_read_format",
49076:     "GL_EXT_read_format_bgra",
57349:     "GL_APPLE_client_storage",
57421:     "GL_ARB_texture_non_power_of_two",
59442:     "GL_ARB_pixel_buffer_object",
49076:     NULL
49076: };
49076: 
49076: void
49076: GLContext::InitExtensions()
49076: {
49076:     MakeCurrent();
49076:     const GLubyte *extensions = fGetString(LOCAL_GL_EXTENSIONS);
49076:     char *exts = strdup((char *)extensions);
49076: 
54889: #ifdef DEBUG
52047:     static bool once = false;
54889: #else
54889:     const bool once = true;
54889: #endif
52047: 
52047:     if (!once) {
49076:         printf_stderr("GL extensions: %s\n", exts);
52047:     }
49076: 
49076:     char *s = exts;
49076:     bool done = false;
49076:     while (!done) {
49076:         char *space = strchr(s, ' ');
49076:         if (space) {
49076:             *space = '\0';
49076:         } else {
49076:             done = true;
49076:         }
49076: 
49076:         for (int i = 0; sExtensionNames[i]; ++i) {
49076:             if (strcmp(s, sExtensionNames[i]) == 0) {
52047:                 if (!once) {
49076:                     printf_stderr("Found extension %s\n", s);
52047:                 }
49076:                 mAvailableExtensions[i] = 1;
49076:             }
49076:         }
49076: 
49076:         s = space+1;
49076:     }
49076: 
49076:     free(exts);
52047: 
54889: #ifdef DEBUG
52047:     once = true;
54889: #endif
49076: }
49076: 
43628: PRBool
43628: GLContext::IsExtensionSupported(const char *extension)
43628: {
57246:     return ListHasExtension(fGetString(LOCAL_GL_EXTENSIONS), extension);
57246: }
57246: 
57246: // Common code for checking for both GL extensions and GLX extensions.
57246: PRBool
57246: GLContext::ListHasExtension(const GLubyte *extensions, const char *extension)
57246: {
57853:     // fix bug 612572 - we were crashing as we were calling this function with extensions==null
57853:     if (extensions == nsnull || extension == nsnull)
57853:         return PR_FALSE;
57853: 
43628:     const GLubyte *start;
43628:     GLubyte *where, *terminator;
43628: 
43628:     /* Extension names should not have spaces. */
43628:     where = (GLubyte *) strchr(extension, ' ');
43628:     if (where || *extension == '\0')
43628:         return PR_FALSE;
43628: 
43628:     /* 
43628:      * It takes a bit of care to be fool-proof about parsing the
43628:      * OpenGL extensions string. Don't be fooled by sub-strings,
43628:      * etc. 
43628:      */
43628:     start = extensions;
43628:     for (;;) {
43628:         where = (GLubyte *) strstr((const char *) start, extension);
43628:         if (!where) {
43628:             break;
43628:         }
43628:         terminator = where + strlen(extension);
43628:         if (where == start || *(where - 1) == ' ') {
43628:             if (*terminator == ' ' || *terminator == '\0') {
43628:                 return PR_TRUE;
43628:             }
43628:         }
43628:         start = terminator;
43628:     }
43628:     return PR_FALSE;
41369: }
41369: 
46977: already_AddRefed<TextureImage>
46977: GLContext::CreateTextureImage(const nsIntSize& aSize,
46977:                               TextureImage::ContentType aContentType,
57421:                               GLenum aWrapMode,
46977:                               PRBool aUseNearestFilter)
46977: {
46977:   MakeCurrent();
46977: 
46977:   GLuint texture;
46977:   fGenTextures(1, &texture);
46977: 
46977:   fActiveTexture(LOCAL_GL_TEXTURE0);
46977:   fBindTexture(LOCAL_GL_TEXTURE_2D, texture);
46977: 
46977:   GLint texfilter = aUseNearestFilter ? LOCAL_GL_NEAREST : LOCAL_GL_LINEAR;
46977:   fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MIN_FILTER, texfilter);
46977:   fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MAG_FILTER, texfilter);
46977:   fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_S, aWrapMode);
46977:   fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_WRAP_T, aWrapMode);
46977:   DEBUG_GL_ERROR_CHECK(this);
46977: 
57421:   return CreateBasicTextureImage(texture, aSize, aWrapMode, aContentType, this);
46977: }
46977: 
46977: BasicTextureImage::~BasicTextureImage()
46977: {
53690:     GLContext *ctx = mGLContext;
53690:     if (ctx->IsDestroyed() || !NS_IsMainThread()) {
53690:         ctx = ctx->GetSharedContext();
47967:     }
53690: 
53690:     // If we have a context, then we need to delete the texture;
53690:     // if we don't have a context (either real or shared),
53690:     // then they went away when the contex was deleted, because it
53690:     // was the only one that had access to it.
53690:     if (ctx && !ctx->IsDestroyed()) {
53690:         mGLContext->MakeCurrent();
53690:         mGLContext->fDeleteTextures(1, &mTexture);
53690:     }
46977: }
46977: 
46977: gfxContext*
46977: BasicTextureImage::BeginUpdate(nsIntRegion& aRegion)
46977: {
46977:     NS_ASSERTION(!mUpdateContext, "BeginUpdate() without EndUpdate()?");
46977: 
46977:     // determine the region the client will need to repaint
57350:     ImageFormat format =
57350:         (GetContentType() == gfxASurface::CONTENT_COLOR) ?
57350:         gfxASurface::ImageFormatRGB24 : gfxASurface::ImageFormatARGB32;
59439:     if (!mTextureInited)
57553:     {
57350:         // if the texture hasn't been initialized yet, or something important
57350:         // changed, we need to recreate our backing surface and force the
46977:         // client to paint everything
46977:         mUpdateRect = nsIntRect(nsIntPoint(0, 0), mSize);
57350:     } else {
46977:         mUpdateRect = aRegion.GetBounds();
57350:     }
57350: 
57351:     // the basic impl can only upload updates to rectangles
46977:     aRegion = nsIntRegion(mUpdateRect);
46977: 
46977:     nsIntSize rgnSize = mUpdateRect.Size();
47946:     if (!nsIntRect(nsIntPoint(0, 0), mSize).Contains(mUpdateRect)) {
46977:         NS_ERROR("update outside of image");
46977:         return NULL;
46977:     }
46977: 
46977:     nsRefPtr<gfxASurface> updateSurface = 
59442:       GetSurfaceForUpdate(gfxIntSize(rgnSize.width, rgnSize.height), format);
59442: 
46977:     if (!updateSurface)
46977:         return NULL;
46977: 
47946:     updateSurface->SetDeviceOffset(gfxPoint(-mUpdateRect.x, -mUpdateRect.y));
47946: 
46977:     mUpdateContext = new gfxContext(updateSurface);
59442:    
59442:     // Clear the returned surface because it might have been re-used.
59442:     if (format == gfxASurface::ImageFormatARGB32) {
59442:       mUpdateContext->SetOperator(gfxContext::OPERATOR_CLEAR);
59442:       mUpdateContext->Paint();
59442:       mUpdateContext->SetOperator(gfxContext::OPERATOR_OVER);
59442:     }
46977:     return mUpdateContext;
46977: }
46977: 
46977: PRBool
46977: BasicTextureImage::EndUpdate()
46977: {
46977:     NS_ASSERTION(!!mUpdateContext, "EndUpdate() without BeginUpdate()?");
46977: 
46977:     // FIXME: this is the slow boat.  Make me fast (with GLXPixmap?).
47946:     nsRefPtr<gfxASurface> originalSurface = mUpdateContext->OriginalSurface();
47946: 
47946:     // Undo the device offset that BeginUpdate set; doesn't much matter for us here,
47946:     // but important if we ever do anything directly with the surface.
47946:     originalSurface->SetDeviceOffset(gfxPoint(0, 0));
47946: 
59442:     bool relative = FinishedSurfaceUpdate();
59442: 
59439:     // The rect to upload from the surface is mUpdateRect sized and located at mUpdateOffset.
59439:     nsIntRect surfaceRect(mUpdateOffset.x, mUpdateOffset.y, mUpdateRect.width, mUpdateRect.height);
57350: 
59439:     mShaderType =
59439:       mGLContext->UploadSurfaceToTexture(originalSurface,
59439:                                          surfaceRect,
59439:                                          mTexture,
59439:                                          !mTextureInited,
59442:                                          mUpdateRect.TopLeft(),
59442:                                          relative);
59442:     FinishedSurfaceUpload();
59442: 
59439:     mUpdateContext = nsnull;
46977:     mTextureInited = PR_TRUE;
57350: 
46977:     return PR_TRUE;         // mTexture is bound
46977: }
46977: 
59442: already_AddRefed<gfxASurface>
59442: BasicTextureImage::GetSurfaceForUpdate(const gfxIntSize& aSize, ImageFormat aFmt)
59442: {
59442:     return gfxPlatform::GetPlatform()->
59442:       CreateOffscreenSurface(aSize, gfxASurface::ContentFromFormat(aFmt));
59442: }
59442: 
59442: bool
59442: BasicTextureImage::FinishedSurfaceUpdate()
59442: {
59442:   return false;
59442: }
59442: 
59442: void
59442: BasicTextureImage::FinishedSurfaceUpload()
59442: {
59442: }
59442: 
59443: bool 
59443: BasicTextureImage::DirectUpdate(gfxASurface *aSurf, const nsIntRegion& aRegion)
59443: {
59443:   nsIntRect bounds = aRegion.GetBounds();
59443:   if (!mTextureInited) {
59443:     bounds = nsIntRect(0, 0, mSize.width, mSize.height);
59443:   }
59443: 
59443:   mShaderType =
59443:     mGLContext->UploadSurfaceToTexture(aSurf,
59443:                                        bounds,
59443:                                        mTexture,
59443:                                        !mTextureInited,
59443:                                        bounds.TopLeft(),
59443:                                        PR_FALSE);
59443:   mTextureInited = PR_TRUE;
59443:   return true;
59443: }
59443: 
54505: void
54505: BasicTextureImage::Resize(const nsIntSize& aSize)
54505: {
54505:     NS_ASSERTION(!mUpdateContext, "Resize() while in update?");
54505: 
54505:     mGLContext->fBindTexture(LOCAL_GL_TEXTURE_2D, mTexture);
54505: 
54505:     mGLContext->fTexImage2D(LOCAL_GL_TEXTURE_2D,
54505:                             0,
54505:                             LOCAL_GL_RGBA,
54505:                             aSize.width,
54505:                             aSize.height,
54505:                             0,
54505:                             LOCAL_GL_RGBA,
54505:                             LOCAL_GL_UNSIGNED_BYTE,
54505:                             NULL);
54505: 
54505:     mTextureInited = PR_TRUE;
56953:     mSize = aSize;
54505: }
54505: 
47908: PRBool
47908: GLContext::ResizeOffscreenFBO(const gfxIntSize& aSize)
47908: {
47908:     MakeCurrent();
47908: 
47908:     bool alpha = mCreationFormat.alpha > 0;
47908:     int depth = mCreationFormat.depth;
47908:     int stencil = mCreationFormat.stencil;
47908: 
47908:     bool firstTime = (mOffscreenFBO == 0);
47908: 
47908:     GLuint curBoundTexture = 0;
47908:     GLuint curBoundRenderbuffer = 0;
47908:     GLuint curBoundFramebuffer = 0;
47908: 
47908:     GLint viewport[4];
47908: 
49076:     bool useDepthStencil =
49076:         !mIsGLES2 || IsExtensionSupported(OES_packed_depth_stencil);
49076: 
47908:     // save a few things for later restoring
47908:     fGetIntegerv(LOCAL_GL_TEXTURE_BINDING_2D, (GLint*) &curBoundTexture);
47908:     fGetIntegerv(LOCAL_GL_FRAMEBUFFER_BINDING, (GLint*) &curBoundFramebuffer);
47908:     fGetIntegerv(LOCAL_GL_RENDERBUFFER_BINDING, (GLint*) &curBoundRenderbuffer);
47908:     fGetIntegerv(LOCAL_GL_VIEWPORT, viewport);
47908: 
57631:     // the context format of what we're defining;
57631:     // for some reason, UpdateActualFormat isn't working with a bound FBO.
57631:     ContextFormat cf;
57631: 
47908:     // If this is the first time we're going through this, we need
47908:     // to create the objects we'll use.  Otherwise, just bind them.
47908:     if (firstTime) {
47908:         fGenTextures(1, &mOffscreenTexture);
47908:         fBindTexture(LOCAL_GL_TEXTURE_2D, mOffscreenTexture);
47908:         fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MIN_FILTER, LOCAL_GL_LINEAR);
47908:         fTexParameteri(LOCAL_GL_TEXTURE_2D, LOCAL_GL_TEXTURE_MAG_FILTER, LOCAL_GL_LINEAR);
47908: 
47908:         fGenFramebuffers(1, &mOffscreenFBO);
47908:         fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, mOffscreenFBO);
47908: 
49076:         if (depth && stencil && useDepthStencil) {
48311:             fGenRenderbuffers(1, &mOffscreenDepthRB);
48311:         } else {
47908:             if (depth) {
47908:                 fGenRenderbuffers(1, &mOffscreenDepthRB);
47908:             }
47908: 
47908:             if (stencil) {
47908:                 fGenRenderbuffers(1, &mOffscreenStencilRB);
47908:             }
48311:         }
47908:     } else {
47908:         fBindTexture(LOCAL_GL_TEXTURE_2D, mOffscreenTexture);
47908:         fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, mOffscreenFBO);
47908:     }
47908: 
47908:     // resize the FBO components
47908:     if (alpha) {
47908:         fTexImage2D(LOCAL_GL_TEXTURE_2D,
47908:                     0,
47908:                     LOCAL_GL_RGBA,
47908:                     aSize.width, aSize.height,
47908:                     0,
47908:                     LOCAL_GL_RGBA,
47908:                     LOCAL_GL_UNSIGNED_BYTE,
47908:                     NULL);
57631: 
57631:         cf.red = cf.green = cf.blue = cf.alpha = 8;
47908:     } else {
47908:         fTexImage2D(LOCAL_GL_TEXTURE_2D,
47908:                     0,
47908:                     LOCAL_GL_RGB,
47908:                     aSize.width, aSize.height,
47908:                     0,
47908:                     LOCAL_GL_RGB,
49076: #ifdef XP_WIN
49076:                     LOCAL_GL_UNSIGNED_BYTE,
49076: #else
48311:                     mIsGLES2 ? LOCAL_GL_UNSIGNED_SHORT_5_6_5
47908:                              : LOCAL_GL_UNSIGNED_BYTE,
49076: #endif
47908:                     NULL);
57631: 
57631: #ifdef XP_WIN
57631:         cf.red = cf.green = cf.blue = 8;
57631: #else
57631:         cf.red = 5;
57631:         cf.green = 6;
57631:         cf.blue = 5;
57631: #endif
57631:         cf.alpha = 0;
47908:     }
47908: 
49076:     if (depth && stencil && useDepthStencil) {
48311:         fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, mOffscreenDepthRB);
48311:         fRenderbufferStorage(LOCAL_GL_RENDERBUFFER,
48311:                              LOCAL_GL_DEPTH24_STENCIL8,
48311:                              aSize.width, aSize.height);
57631:         cf.depth = 24;
57631:         cf.stencil = 8;
48311:     } else {
47908:         if (depth) {
49076:             GLenum depthType;
49076:             if (mIsGLES2) {
49076:                 if (IsExtensionSupported(OES_depth32)) {
49076:                     depthType = LOCAL_GL_DEPTH_COMPONENT32;
49076:                 } else if (IsExtensionSupported(OES_depth24)) {
49076:                     depthType = LOCAL_GL_DEPTH_COMPONENT24;
49076:                 } else {
49076:                     depthType = LOCAL_GL_DEPTH_COMPONENT16;
49076:                 }
49076:             } else {
49076:                 depthType = LOCAL_GL_DEPTH_COMPONENT24;
49076:             }
49076: 
47908:             fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, mOffscreenDepthRB);
47908:             fRenderbufferStorage(LOCAL_GL_RENDERBUFFER,
48311:                                  mIsGLES2 ? LOCAL_GL_DEPTH_COMPONENT16
48311:                                           : LOCAL_GL_DEPTH_COMPONENT24,
47908:                                  aSize.width, aSize.height);
57631:             cf.depth = mIsGLES2 ? 16 : 24;
47908:         }
47908: 
47908:         if (stencil) {
47908:             fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, mOffscreenStencilRB);
47908:             fRenderbufferStorage(LOCAL_GL_RENDERBUFFER,
47908:                                  LOCAL_GL_STENCIL_INDEX8,
47908:                                  aSize.width, aSize.height);
57631:             cf.stencil = 8;
47908:         }
48311:     }
47908: 
47908:     // Now assemble the FBO, if we're creating one
47908:     // for the first time.
47908:     if (firstTime) {
47908:         fFramebufferTexture2D(LOCAL_GL_FRAMEBUFFER,
47908:                               LOCAL_GL_COLOR_ATTACHMENT0,
47908:                               LOCAL_GL_TEXTURE_2D,
47908:                               mOffscreenTexture,
47908:                               0);
48311: 
49076:         if (depth && stencil && useDepthStencil) {
48311:             fFramebufferRenderbuffer(LOCAL_GL_FRAMEBUFFER,
48311:                                      LOCAL_GL_DEPTH_ATTACHMENT,
48311:                                      LOCAL_GL_RENDERBUFFER,
48311:                                      mOffscreenDepthRB);
48311:             fFramebufferRenderbuffer(LOCAL_GL_FRAMEBUFFER,
48311:                                      LOCAL_GL_STENCIL_ATTACHMENT,
48311:                                      LOCAL_GL_RENDERBUFFER,
48311:                                      mOffscreenDepthRB);
48311:         } else {
47908:             if (depth) {
47908:                 fFramebufferRenderbuffer(LOCAL_GL_FRAMEBUFFER,
47908:                                          LOCAL_GL_DEPTH_ATTACHMENT,
47908:                                          LOCAL_GL_RENDERBUFFER,
47908:                                          mOffscreenDepthRB);
47908:             }
47908: 
47908:             if (stencil) {
47908:                 fFramebufferRenderbuffer(LOCAL_GL_FRAMEBUFFER,
47908:                                          LOCAL_GL_STENCIL_ATTACHMENT,
47908:                                          LOCAL_GL_RENDERBUFFER,
47908:                                          mOffscreenStencilRB);
47908:             }
47908:         }
48311:     }
47908: 
47908:     // We should be all resized.  Check for framebuffer completeness.
47908:     GLenum status = fCheckFramebufferStatus(LOCAL_GL_FRAMEBUFFER);
47908:     if (status != LOCAL_GL_FRAMEBUFFER_COMPLETE) {
47908:         NS_WARNING("Error resizing offscreen framebuffer -- framebuffer not complete");
47908:         return PR_FALSE;
47908:     }
47908: 
47908:     mOffscreenSize = aSize;
47908:     mOffscreenActualSize = aSize;
47908: 
47908:     if (firstTime) {
57631:         // UpdateActualFormat() doesn't work for some reason, with a
57631:         // FBO bound, even though it should.
57631:         //UpdateActualFormat();
57631:         mActualFormat = cf;
49076: 
52047: #ifdef DEBUG
49076:         printf_stderr("Created offscreen FBO: r: %d g: %d b: %d a: %d depth: %d stencil: %d\n",
49076:                       mActualFormat.red, mActualFormat.green, mActualFormat.blue, mActualFormat.alpha,
49076:                       mActualFormat.depth, mActualFormat.stencil);
52047: #endif
47908:     }
47908: 
47908:     // We're good, and the framebuffer is already attached, so let's
47908:     // clear out our new framebuffer; otherwise we'll end up displaying
47908:     // random memory.  We saved all of these things earlier so that we
47908:     // can restore them.
47908:     fViewport(0, 0, aSize.width, aSize.height);
47908: 
51749:     // Clear the new framebuffer with the full viewport
51749:     ClearSafely();
51749: 
47908:     // Ok, now restore the GL state back to what it was before the resize took place.
47908:     fBindTexture(LOCAL_GL_TEXTURE_2D, curBoundTexture);
47908:     fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, curBoundRenderbuffer);
47908:     fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, curBoundFramebuffer);
47908: 
47908:     // -don't- restore the viewport the first time through this, since
47908:     // the previous one isn't valid.
47908:     if (!firstTime)
47908:         fViewport(viewport[0], viewport[1], viewport[2], viewport[3]);
47908: 
47908:     return PR_TRUE;
47908: }
47908: 
47908: void
47908: GLContext::DeleteOffscreenFBO()
47908: {
47908:     fDeleteFramebuffers(1, &mOffscreenFBO);
47908:     fDeleteTextures(1, &mOffscreenTexture);
47908:     fDeleteRenderbuffers(1, &mOffscreenDepthRB);
47908:     fDeleteRenderbuffers(1, &mOffscreenStencilRB);
47908: 
47908:     mOffscreenFBO = 0;
47908:     mOffscreenTexture = 0;
47908:     mOffscreenDepthRB = 0;
47908:     mOffscreenStencilRB = 0;
47908: }
47908: 
47908: void
47908: GLContext::ClearSafely()
47908: {
47908:     GLfloat clearColor[4];
47908:     GLfloat clearDepth;
47908:     GLint clearStencil;
47908: 
47908:     fGetFloatv(LOCAL_GL_COLOR_CLEAR_VALUE, clearColor);
47908:     fGetFloatv(LOCAL_GL_DEPTH_CLEAR_VALUE, &clearDepth);
47908:     fGetIntegerv(LOCAL_GL_STENCIL_CLEAR_VALUE, &clearStencil);
47908: 
47908:     fClearColor(0.0f, 0.0f, 0.0f, 0.0f);
47908:     fClearStencil(0);
48309:     fClearDepth(1.0f);
47908: 
47908:     fClear(LOCAL_GL_COLOR_BUFFER_BIT | LOCAL_GL_DEPTH_BUFFER_BIT | LOCAL_GL_STENCIL_BUFFER_BIT);
47908: 
47908:     fClearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
47908:     fClearStencil(clearStencil);
47908:     fClearDepth(clearDepth);
47908: }
47908: 
47908: void
47908: GLContext::UpdateActualFormat()
47908: {
49076:     ContextFormat nf;
49076: 
52045:     fGetIntegerv(LOCAL_GL_RED_BITS, (GLint*) &nf.red);
52045:     fGetIntegerv(LOCAL_GL_GREEN_BITS, (GLint*) &nf.green);
52045:     fGetIntegerv(LOCAL_GL_BLUE_BITS, (GLint*) &nf.blue);
49076:     fGetIntegerv(LOCAL_GL_ALPHA_BITS, (GLint*) &nf.alpha);
49076:     fGetIntegerv(LOCAL_GL_DEPTH_BITS, (GLint*) &nf.depth);
52045:     fGetIntegerv(LOCAL_GL_STENCIL_BITS, (GLint*) &nf.stencil);
49076: 
49076:     mActualFormat = nf;
47908: }
47908: 
49071: void
49071: GLContext::MarkDestroyed()
49071: {
54505:     if (IsDestroyed())
54505:         return;
54505: 
49071:     MakeCurrent();
49071:     DeleteOffscreenFBO();
54505: 
54505:     fDeleteProgram(mBlitProgram);
54505:     mBlitProgram = 0;
54505:     fDeleteFramebuffers(1, &mBlitFramebuffer);
54505:     mBlitFramebuffer = 0;
54505: 
55380:     mSymbols.Zero();
49071: }
49071: 
49071: already_AddRefed<gfxImageSurface>
49071: GLContext::ReadTextureImage(GLuint aTexture,
49071:                             const gfxIntSize& aSize,
49071:                             GLenum aTextureFormat)
49071: {
49071:     MakeCurrent();
49071: 
49071:     nsRefPtr<gfxImageSurface> isurf;
49071: 
54505:     GLint oldrb, oldfb, oldprog, oldPackAlignment;
49071:     GLint success;
49071: 
49071:     GLuint rb = 0, fb = 0;
49071:     GLuint vs = 0, fs = 0, prog = 0;
49071: 
49071:     const char *vShader =
49071:         "attribute vec4 aVertex;\n"
49071:         "attribute vec2 aTexCoord;\n"
49071:         "varying vec2 vTexCoord;\n"
49071:         "void main() { gl_Position = aVertex; vTexCoord = aTexCoord; }";
49071:     const char *fShader =
49071:         "#ifdef GL_ES\n"
49071:         "precision mediump float;\n"
49071:         "#endif\n"
49071:         "varying vec2 vTexCoord;\n"
49071:         "uniform sampler2D uTexture;\n"
49071:         "void main() { gl_FragColor = texture2D(uTexture, vTexCoord); }";
49071: 
49071:     float verts[4*4] = {
49071:         -1.0f, -1.0f, 0.0f, 1.0f,
49071:          1.0f, -1.0f, 0.0f, 1.0f,
49071:         -1.0f,  1.0f, 0.0f, 1.0f,
49071:          1.0f,  1.0f, 0.0f, 1.0f
49071:     };
49071: 
49071:     float texcoords[2*4] = {
49071:         0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f
49071:     };
49071: 
49071:     fGetIntegerv(LOCAL_GL_RENDERBUFFER_BINDING, &oldrb);
49071:     fGetIntegerv(LOCAL_GL_FRAMEBUFFER_BINDING, &oldfb);
49071:     fGetIntegerv(LOCAL_GL_CURRENT_PROGRAM, &oldprog);
49071:     fGetIntegerv(LOCAL_GL_PACK_ALIGNMENT, &oldPackAlignment);
49071: 
54505:     PushViewportRect(nsIntRect(0, 0, aSize.width, aSize.height));
54505: 
49071:     fGenRenderbuffers(1, &rb);
49071:     fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, rb);
49071:     fRenderbufferStorage(LOCAL_GL_RENDERBUFFER, LOCAL_GL_RGBA,
49071:                          aSize.width, aSize.height);
49071: 
49071:     fGenFramebuffers(1, &fb);
49071:     fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, fb);
49071:     fFramebufferRenderbuffer(LOCAL_GL_FRAMEBUFFER, LOCAL_GL_COLOR_ATTACHMENT0,
49071:                              LOCAL_GL_RENDERBUFFER, rb);
49071: 
49071:     if (fCheckFramebufferStatus(LOCAL_GL_FRAMEBUFFER) !=
49071:         LOCAL_GL_FRAMEBUFFER_COMPLETE)
49071:     {
49071:         goto cleanup;
49071:     }
49071: 
49071:     vs = fCreateShader(LOCAL_GL_VERTEX_SHADER);
49071:     fs = fCreateShader(LOCAL_GL_FRAGMENT_SHADER);
49071:     fShaderSource(vs, 1, (const GLchar**) &vShader, NULL);
49071:     fShaderSource(fs, 1, (const GLchar**) &fShader, NULL);
49071:     prog = fCreateProgram();
49071:     fAttachShader(prog, vs);
49071:     fAttachShader(prog, fs);
49071:     fBindAttribLocation(prog, 0, "aVertex");
49071:     fBindAttribLocation(prog, 1, "aTexCoord");
49071:     fLinkProgram(prog);
49071: 
49071:     fGetProgramiv(prog, LOCAL_GL_LINK_STATUS, &success);
49071:     if (!success) {
49071:         goto cleanup;
49071:     }
49071: 
49071:     fUseProgram(prog);
49071: 
49071:     fEnableVertexAttribArray(0);
49071:     fEnableVertexAttribArray(1);
49071: 
49071:     fVertexAttribPointer(0, 4, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, verts);
49071:     fVertexAttribPointer(1, 2, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, texcoords);
49071: 
49071:     fActiveTexture(LOCAL_GL_TEXTURE0);
49071:     fBindTexture(LOCAL_GL_TEXTURE_2D, aTexture);
49071: 
49071:     fUniform1i(fGetUniformLocation(prog, "uTexture"), 0);
49071: 
49071:     fDrawArrays(LOCAL_GL_TRIANGLE_STRIP, 0, 4);
49071: 
49071:     fDisableVertexAttribArray(1);
49071:     fDisableVertexAttribArray(0);
49071: 
49071:     isurf = new gfxImageSurface(aSize, gfxASurface::ImageFormatARGB32);
49071:     if (!isurf || isurf->CairoStatus()) {
49071:         isurf = nsnull;
49071:         goto cleanup;
49071:     }
49071: 
49071:     if (oldPackAlignment != 4)
49071:         fPixelStorei(LOCAL_GL_PACK_ALIGNMENT, 4);
49071: 
49071:     fReadPixels(0, 0, aSize.width, aSize.height,
49071:                 LOCAL_GL_RGBA, LOCAL_GL_UNSIGNED_BYTE,
49071:                 isurf->Data());
49071: 
49071:     if (oldPackAlignment != 4)
49071:         fPixelStorei(LOCAL_GL_PACK_ALIGNMENT, oldPackAlignment);
49071: 
49071:  cleanup:
49071:     // note that deleting 0 has no effect in any of these calls
49071:     fDeleteRenderbuffers(1, &rb);
49071:     fDeleteFramebuffers(1, &fb);
49071:     fDeleteShader(vs);
49071:     fDeleteShader(fs);
49071:     fDeleteProgram(prog);
49071: 
49071:     fBindRenderbuffer(LOCAL_GL_RENDERBUFFER, oldrb);
49071:     fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, oldfb);
49071:     fUseProgram(oldprog);
54505: 
54505:     PopViewportRect();
49071: 
49071:     return isurf.forget();
49071: }
49071: 
49076: void
49076: GLContext::ReadPixelsIntoImageSurface(GLint aX, GLint aY,
49076:                                       GLsizei aWidth, GLsizei aHeight,
49076:                                       gfxImageSurface *aDest)
49076: {
49076:     MakeCurrent();
49076: 
49076:     if (aDest->Format() != gfxASurface::ImageFormatARGB32 &&
49076:         aDest->Format() != gfxASurface::ImageFormatRGB24)
49076:     {
49076:         NS_WARNING("ReadPixelsIntoImageSurface called with invalid image format");
49076:         return;
49076:     }
49076: 
49076:     if (aDest->Width() != aWidth ||
49076:         aDest->Height() != aHeight ||
49076:         aDest->Stride() != aWidth * 4)
49076:     {
49076:         NS_WARNING("ReadPixelsIntoImageSurface called with wrong size or stride surface");
49076:         return;
49076:     }
49076: 
49076:     GLint currentPackAlignment = 0;
49076:     fGetIntegerv(LOCAL_GL_PACK_ALIGNMENT, &currentPackAlignment);
49076:     fPixelStorei(LOCAL_GL_PACK_ALIGNMENT, 4);
49076: 
49076:     // defaults for desktop
49076:     GLenum format = LOCAL_GL_BGRA;
49076:     GLenum datatype = LOCAL_GL_UNSIGNED_INT_8_8_8_8_REV;
49076:     bool swap = false;
49076: 
49076:     if (IsGLES2()) {
49076:         datatype = LOCAL_GL_UNSIGNED_BYTE;
49076: 
49076:         if (IsExtensionSupported(gl::GLContext::EXT_read_format_bgra) ||
49076:             IsExtensionSupported(gl::GLContext::IMG_read_format) ||
49076:             IsExtensionSupported(gl::GLContext::EXT_bgra))
49076:         {
49076:             format = LOCAL_GL_BGRA;
49076:         } else {
49076:             format = LOCAL_GL_RGBA;
49076:             swap = true;
49076:         }
49076:     }
49076: 
49076:     fReadPixels(0, 0, aWidth, aHeight,
49076:                 format, datatype,
49076:                 aDest->Data());
49076: 
49076:     if (swap) {
49076:         // swap B and R bytes
49076:         for (int j = 0; j < aHeight; ++j) {
49076:             PRUint32 *row = (PRUint32*) (aDest->Data() + aDest->Stride() * j);
49076:             for (int i = 0; i < aWidth; ++i) {
49076:                 *row = (*row & 0xff00ff00) | ((*row & 0xff) << 16) | ((*row & 0xff0000) >> 16);
49076:                 row++;
49076:             }
49076:         }
49076:     }
49076: 
49076:     fPixelStorei(LOCAL_GL_PACK_ALIGNMENT, currentPackAlignment);
49076: }
49076: 
54505: void
54505: GLContext::BlitTextureImage(TextureImage *aSrc, const nsIntRect& aSrcRect,
54505:                             TextureImage *aDst, const nsIntRect& aDstRect)
54505: {
54505:     NS_ASSERTION(!aSrc->InUpdate(), "Source texture is in update!");
54505:     NS_ASSERTION(!aDst->InUpdate(), "Destination texture is in update!");
54505: 
57418:     // only save/restore this stuff on Qualcomm Adreno, to work
57418:     // around an apparent bug
57418:     int savedFb = 0;
57418:     if (mVendor == VendorQualcomm) {
57418:         fGetIntegerv(LOCAL_GL_FRAMEBUFFER_BINDING, &savedFb);
57418:     }
57418: 
54505:     fDisable(LOCAL_GL_SCISSOR_TEST);
54505:     fDisable(LOCAL_GL_BLEND);
54505: 
54505:     SetBlitFramebufferForDestTexture(aDst->Texture());
54505: 
54505:     DEBUG_GL_ERROR_CHECK(this);
54505: 
54505:     UseBlitProgram();
54505: 
54505:     DEBUG_GL_ERROR_CHECK(this);
54505: 
54505:     nsIntSize srcSize = aSrc->GetSize();
54505:     nsIntSize dstSize = aDst->GetSize();
54505: 
54505:     PushViewportRect(nsIntRect(0, 0, dstSize.width, dstSize.height));
54505: 
54505:     float dx0 = 2.0 * float(aDstRect.x) / float(dstSize.width) - 1.0;
54505:     float dy0 = 2.0 * float(aDstRect.y) / float(dstSize.height) - 1.0;
54505:     float dx1 = 2.0 * float(aDstRect.x + aDstRect.width) / float(dstSize.width) - 1.0;
54505:     float dy1 = 2.0 * float(aDstRect.y + aDstRect.height) / float(dstSize.height) - 1.0;
54505: 
57420:     RectTriangles rects;
57421:     if (aSrc->GetWrapMode() == LOCAL_GL_REPEAT) {
57421:         rects.addRect(/* dest rectangle */
57421:                       dx0, dy0, dx1, dy1,
57421:                       /* tex coords */
57421:                       aSrcRect.x / float(srcSize.width),
57421:                       aSrcRect.y / float(srcSize.height),
57421:                       aSrcRect.XMost() / float(srcSize.width),
57421:                       aSrcRect.YMost() / float(srcSize.height));
57421:     } else {
57421:         DecomposeIntoNoRepeatTriangles(aSrcRect, srcSize, rects);
57420: 
57420:         // now put the coords into the d[xy]0 .. d[xy]1 coordinate space
57420:         // from the 0..1 that it comes out of decompose
57421:         GLfloat *v = rects.vertexCoords;
57420:         for (int i = 0; i < rects.numRects * 6; ++i) {
57421:             v[i*2] = (v[i*2] * (dx1 - dx0)) + dx0;
57421:             v[i*2+1] = (v[i*2+1] * (dy1 - dy0)) + dy0;
57420:         }
57421:     }
57421: 
54505: 
54505:     fActiveTexture(LOCAL_GL_TEXTURE0);
54505:     fBindTexture(LOCAL_GL_TEXTURE_2D, aSrc->Texture());
54505: 
54505:     fBindBuffer(LOCAL_GL_ARRAY_BUFFER, 0);
54505: 
57421:     fVertexAttribPointer(0, 2, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, rects.vertexCoords);
57421:     fVertexAttribPointer(1, 2, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, rects.texCoords);
54505: 
54505:     fEnableVertexAttribArray(0);
54505:     fEnableVertexAttribArray(1);
54505: 
54505:     DEBUG_GL_ERROR_CHECK(this);
54505: 
57420:     fDrawArrays(LOCAL_GL_TRIANGLES, 0, rects.numRects * 6);
54505: 
54505:     DEBUG_GL_ERROR_CHECK(this);
54505: 
54505:     fDisableVertexAttribArray(0);
54505:     fDisableVertexAttribArray(1);
54505: 
54505:     fVertexAttribPointer(0, 2, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, NULL);
54505:     fVertexAttribPointer(1, 2, LOCAL_GL_FLOAT, LOCAL_GL_FALSE, 0, NULL);
54505: 
57418:     // unbind the previous texture from the framebuffer
54505:     SetBlitFramebufferForDestTexture(0);
54505: 
57418:     // then put back the previous framebuffer, and don't
57418:     // enable stencil if it wasn't enabled on entry to work
57418:     // around Adreno 200 bug that causes us to crash if
57418:     // we enable scissor test while the current FBO is invalid
57418:     // (which it will be, once we assign texture 0 to the color
57418:     // attachment)
57418:     if (mVendor == VendorQualcomm) {
57418:         fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, savedFb);
57418:     }
57418: 
54505:     fEnable(LOCAL_GL_SCISSOR_TEST);
54505:     fEnable(LOCAL_GL_BLEND);
54505: 
54505:     PopViewportRect();
54505: }
54505: 
59436: 
59436: ShaderProgramType 
59436: GLContext::UploadSurfaceToTexture(gfxASurface *aSurface, 
59436:                                   const nsIntRect& aSrcRect,
59436:                                   GLuint& aTexture,
59436:                                   bool aOverwrite,
59442:                                   const nsIntPoint& aDstPoint,
59442:                                   bool aPixelBuffer)
59436: {
59436:   bool textureInited = aOverwrite ? false : true;
59436:   MakeCurrent();
59436:   fActiveTexture(LOCAL_GL_TEXTURE0);
59436:   
59436:   if (!aTexture) {
59436:     fGenTextures(1, &aTexture);
59436:     fBindTexture(LOCAL_GL_TEXTURE_2D, aTexture);
59436:     fTexParameteri(LOCAL_GL_TEXTURE_2D, 
59436:                    LOCAL_GL_TEXTURE_MIN_FILTER, 
59436:                    LOCAL_GL_LINEAR);
59436:     fTexParameteri(LOCAL_GL_TEXTURE_2D, 
59436:                    LOCAL_GL_TEXTURE_MAG_FILTER, 
59436:                    LOCAL_GL_LINEAR);
59436:     fTexParameteri(LOCAL_GL_TEXTURE_2D, 
59436:                    LOCAL_GL_TEXTURE_WRAP_S, 
59436:                    LOCAL_GL_CLAMP_TO_EDGE);
59436:     fTexParameteri(LOCAL_GL_TEXTURE_2D, 
59436:                    LOCAL_GL_TEXTURE_WRAP_T, 
59436:                    LOCAL_GL_CLAMP_TO_EDGE);
59436:     textureInited = false;
59436:   } else {
59436:     fBindTexture(LOCAL_GL_TEXTURE_2D, aTexture);
59436:   }
59436: 
59436:   nsRefPtr<gfxImageSurface> imageSurface = aSurface->GetAsImageSurface();
59465:   unsigned char* data = NULL;
59436: 
59436:   if (!imageSurface || 
59436:       (imageSurface->Format() != gfxASurface::ImageFormatARGB32 &&
59436:        imageSurface->Format() != gfxASurface::ImageFormatRGB24 &&
59436:        imageSurface->Format() != gfxASurface::ImageFormatRGB16_565)) {
59436:     // We can't get suitable pixel data for the surface, make a copy
59436:     imageSurface = 
59436:       new gfxImageSurface(gfxIntSize(aSrcRect.width, aSrcRect.height), 
59436:                           gfxASurface::ImageFormatARGB32);
59436:   
59436:     nsRefPtr<gfxContext> context = new gfxContext(imageSurface);
59436: 
59436:     context->Translate(-gfxPoint(aSrcRect.x, aSrcRect.y));
59436:     context->SetSource(aSurface);
59436:     context->Paint();
59465:     data = imageSurface->Data();
59465:     NS_ASSERTION(!aPixelBuffer, "Must be using an image compatible surface with pixel buffers!");
59436:   } else {
59465:     // If a pixel buffer is bound the data pointer parameter is relative
59465:     // to the start of the data block.
59465:     if (!aPixelBuffer) {
59465:       data = imageSurface->Data();
59465:     }
59436:     data += aSrcRect.y * imageSurface->Stride();
59436:     data += aSrcRect.x * 4;
59436:   }
59436: 
59436:   GLenum format;
59436:   GLenum internalformat;
59436:   GLenum type;
59436:   PRInt32 pixelSize = gfxASurface::BytePerPixelFromFormat(imageSurface->Format());
59436:   ShaderProgramType shader;
59436: 
59436:   switch (imageSurface->Format()) {
59436:     case gfxASurface::ImageFormatARGB32:
59436:       format = LOCAL_GL_RGBA;
59436:       type = LOCAL_GL_UNSIGNED_BYTE;
59436:       shader = BGRALayerProgramType;
59436:       break;
59436:     case gfxASurface::ImageFormatRGB24:
59436:       // Treat RGB24 surfaces as RGBA32 except for the shader
59436:       // program used.
59436:       format = LOCAL_GL_RGBA;
59436:       type = LOCAL_GL_UNSIGNED_BYTE;
59436:       shader = BGRXLayerProgramType;
59436:       break;
59436:     case gfxASurface::ImageFormatRGB16_565:
59436:       format = LOCAL_GL_RGB;
59436:       type = LOCAL_GL_UNSIGNED_SHORT_5_6_5;
59436:       shader = RGBALayerProgramType;
59436:       break;
59436:     default:
59436:       NS_ASSERTION(false, "Unhandled image surface format!");
59436:   }
59436: 
59436: #ifndef USE_GLES2
59436:   fPixelStorei(LOCAL_GL_UNPACK_ROW_LENGTH, 
59436:                imageSurface->Stride() / pixelSize);
59436: 
59436:   internalformat = LOCAL_GL_RGBA;
59436: #else
59436:   internalformat = format;
59436: 
59436:   if (imageSurface->Stride() != aSrcRect.width * pixelSize) {
59436:     // Not using the whole row of texture data and GLES doesn't 
59436:     // support GL_UNPACK_ROW_LENGTH. We need to upload each row
59436:     // separately.
59436:     if (!textureInited) {
59436:       fTexImage2D(LOCAL_GL_TEXTURE_2D,
59436:                   0,
59436:                   internalformat,
59436:                   aSrcRect.width,
59436:                   aSrcRect.height,
59436:                   0,
59436:                   format,
59436:                   type,
59436:                   NULL);
59436:     }
59436: 
59436:     for (int h = 0; h < aSrcRect.height; h++) {
59436:       fTexSubImage2D(LOCAL_GL_TEXTURE_2D,
59436:                      0,
59436:                      aDstPoint.x,
59436:                      aDstPoint.y+h,
59436:                      aSrcRect.width,
59436:                      1,
59436:                      format,
59436:                      type,
59436:                      data);
59436:       data += imageSurface->Stride();
59436:     }
59436: 
59436:     return shader;
59436:   }
59436: #endif
59436: 
59436: 
59436:   if (textureInited) {
59436:     fTexSubImage2D(LOCAL_GL_TEXTURE_2D,
59436:                    0,
59436:                    aDstPoint.x,
59436:                    aDstPoint.y,
59436:                    aSrcRect.width,
59436:                    aSrcRect.height,
59436:                    format,
59436:                    type,
59436:                    data);
59436:   } else {
59436:     fTexImage2D(LOCAL_GL_TEXTURE_2D,
59436:                 0,
59436:                 internalformat,
59436:                 aSrcRect.width,
59436:                 aSrcRect.height,
59436:                 0,
59436:                 format,
59436:                 type,
59436:                 data);
59436:   }
59436: 
59436: #ifndef USE_GLES2
59436:   fPixelStorei(LOCAL_GL_UNPACK_ROW_LENGTH, 0);
59436: #endif
59436: 
59436:   return shader;
59436: }
59436: 
54505: void
57420: GLContext::RectTriangles::addRect(GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1,
57420:                                   GLfloat tx0, GLfloat ty0, GLfloat tx1, GLfloat ty1)
57420: {
57420:     NS_ASSERTION(numRects < 4, "Overflow in number of rectangles, max 4!");
57420: 
57420:     GLfloat *v = &vertexCoords[numRects*6*2];
57420:     GLfloat *t = &texCoords[numRects*6*2];
57420: 
57420:     *v++ = x0; *v++ = y0;
57420:     *v++ = x1; *v++ = y0;
57420:     *v++ = x0; *v++ = y1;
57420: 
57420:     *v++ = x0; *v++ = y1;
57420:     *v++ = x1; *v++ = y0;
57420:     *v++ = x1; *v++ = y1;
57420: 
57420:     *t++ = tx0; *t++ = ty0;
57420:     *t++ = tx1; *t++ = ty0;
57420:     *t++ = tx0; *t++ = ty1;
57420: 
57420:     *t++ = tx0; *t++ = ty1;
57420:     *t++ = tx1; *t++ = ty0;
57420:     *t++ = tx1; *t++ = ty1;
57420: 
57420:     numRects++;
57420: }
57420: 
57420: static GLfloat
57420: WrapTexCoord(GLfloat v)
57420: {
57420:     // fmodf gives negative results for negative numbers;
57420:     // that is, fmodf(0.75, 1.0) == 0.75, but
57420:     // fmodf(-0.75, 1.0) == -0.75.  For the negative case,
57420:     // the result we need is 0.25, so we add 1.0f.
57420:     if (v < 0.0f) {
57420:         return 1.0f + fmodf(v, 1.0f);
57420:     }
57420: 
57420:     return fmodf(v, 1.0f);
57420: }
57420: 
57420: void
57420: GLContext::DecomposeIntoNoRepeatTriangles(const nsIntRect& aTexCoordRect,
57420:                                           const nsIntSize& aTexSize,
57420:                                           RectTriangles& aRects)
57420: {
57420:     // normalize this
57420:     nsIntRect tcr(aTexCoordRect);
57420:     while (tcr.x > aTexSize.width)
57420:         tcr.x -= aTexSize.width;
57420:     while (tcr.y > aTexSize.height)
57420:         tcr.y -= aTexSize.height;
57420: 
57420:     // Compute top left and bottom right tex coordinates
57420:     GLfloat tl[2] =
57420:         { GLfloat(tcr.x) / GLfloat(aTexSize.width),
57420:           GLfloat(tcr.y) / GLfloat(aTexSize.height) };
57420:     GLfloat br[2] =
57420:         { GLfloat(tcr.XMost()) / GLfloat(aTexSize.width),
57420:           GLfloat(tcr.YMost()) / GLfloat(aTexSize.height) };
57420: 
57420:     // then check if we wrap in either the x or y axis; if we do,
57420:     // then also use fmod to figure out the "true" non-wrapping
57420:     // texture coordinates.
57420: 
57420:     bool xwrap = false, ywrap = false;
57420:     if (tcr.x < 0 || tcr.x > aTexSize.width ||
57420:         tcr.XMost() < 0 || tcr.XMost() > aTexSize.width)
57420:     {
57420:         xwrap = true;
57420:         tl[0] = WrapTexCoord(tl[0]);
57420:         br[0] = WrapTexCoord(br[0]);
57420:     }
57420: 
57420:     if (tcr.y < 0 || tcr.y > aTexSize.height ||
57420:         tcr.YMost() < 0 || tcr.YMost() > aTexSize.height)
57420:     {
57420:         ywrap = true;
57420:         tl[1] = WrapTexCoord(tl[1]);
57420:         br[1] = WrapTexCoord(br[1]);
57420:     }
57420: 
57420:     NS_ASSERTION(tl[0] >= 0.0f && tl[0] <= 1.0f &&
57420:                  tl[1] >= 0.0f && tl[1] <= 1.0f &&
57420:                  br[0] >= 0.0f && br[0] <= 1.0f &&
57420:                  br[1] >= 0.0f && br[1] <= 1.0f,
57420:                  "Somehow generated invalid texture coordinates");
57420: 
57420:     // If xwrap is false, the texture will be sampled from tl[0]
57420:     // .. br[0].  If xwrap is true, then it will be split into tl[0]
57420:     // .. 1.0, and 0.0 .. br[0].  Same for the Y axis.  The
57420:     // destination rectangle is also split appropriately, according
57420:     // to the calculated xmid/ymid values.
57420: 
57420:     // There isn't a 1:1 mapping between tex coords and destination coords;
57420:     // when computing midpoints, we have to take that into account.  We
57420:     // need to map the texture coords, which are (in the wrap case):
57420:     // |tl->1| and |0->br| to the |0->1| range of the vertex coords.  So
57420:     // we have the length (1-tl)+(br) that needs to map into 0->1.
57420:     // These are only valid if there is wrap involved, they won't be used
57420:     // otherwise.
57420:     GLfloat xlen = (1.0f - tl[0]) + br[0];
57420:     GLfloat ylen = (1.0f - tl[1]) + br[1];
57420: 
57420:     NS_ASSERTION(!xwrap || xlen > 0.0f, "xlen isn't > 0, what's going on?");
57420:     NS_ASSERTION(!ywrap || ylen > 0.0f, "ylen isn't > 0, what's going on?");
57420:     NS_ASSERTION(aTexCoordRect.width <= aTexSize.width &&
57420:                  aTexCoordRect.height <= aTexSize.height, "tex coord rect would cause tiling!");
57420: 
57420:     if (!xwrap && !ywrap) {
57420:         aRects.addRect(0.0f, 0.0f, 1.0f, 1.0f,
57420:                        tl[0], tl[1], br[0], br[1]);
57420:     } else if (!xwrap && ywrap) {
57420:         GLfloat ymid = (1.0f - tl[1]) / ylen;
57420:         aRects.addRect(0.0f, 0.0f,
57420:                        1.0f, ymid,
57420:                        tl[0], tl[1],
57420:                        br[0], 1.0f);
57420:         aRects.addRect(0.0f, ymid,
57420:                        1.0f, 1.0f,
57420:                        tl[0], 0.0f,
57420:                        br[0], br[1]);
57420:     } else if (xwrap && !ywrap) {
57420:         GLfloat xmid = (1.0f - tl[0]) / xlen;
57420:         aRects.addRect(0.0f, 0.0f,
57420:                        xmid, 1.0f,
57420:                        tl[0], tl[1],
57420:                        1.0f, br[1]);
57420:         aRects.addRect(xmid, 0.0f,
57420:                        1.0f, 1.0f,
57420:                        0.0f, tl[1],
57420:                        br[0], br[1]);
57420:     } else {
57420:         GLfloat xmid = (1.0f - tl[0]) / xlen;
57420:         GLfloat ymid = (1.0f - tl[1]) / ylen;
57420:         aRects.addRect(0.0f, 0.0f,
57420:                        xmid, ymid,
57420:                        tl[0], tl[1],
57420:                        1.0f, 1.0f);
57420:         aRects.addRect(xmid, 0.0f,
57420:                        1.0f, ymid,
57420:                        0.0f, tl[1],
57420:                        br[0], 1.0f);
57420:         aRects.addRect(0.0f, ymid,
57420:                        xmid, 1.0f,
57420:                        tl[0], 0.0f,
57420:                        1.0f, br[1]);
57420:         aRects.addRect(xmid, ymid,
57420:                        1.0f, 1.0f,
57420:                        0.0f, 0.0f,
57420:                        br[0], br[1]);
57420:     }
57420: }
57420: 
57420: void
54505: GLContext::UseBlitProgram()
54505: {
54505:     if (mBlitProgram) {
54505:         fUseProgram(mBlitProgram);
54505:         return;
54505:     }
54505: 
54505:     mBlitProgram = fCreateProgram();
54505: 
54505:     GLuint shaders[2];
54505:     shaders[0] = fCreateShader(LOCAL_GL_VERTEX_SHADER);
54505:     shaders[1] = fCreateShader(LOCAL_GL_FRAGMENT_SHADER);
54505: 
54505:     const char *blitVSSrc = 
54505:         "attribute vec2 aVertex;"
54505:         "attribute vec2 aTexCoord;"
54505:         "varying vec2 vTexCoord;"
54505:         "void main() {"
54505:         "  vTexCoord = aTexCoord;"
54505:         "  gl_Position = vec4(aVertex, 0.0, 1.0);"
54505:         "}";
54505:     const char *blitFSSrc = "#ifdef GL_ES\nprecision mediump float;\n#endif\n"
54505:         "uniform sampler2D uSrcTexture;"
54505:         "varying vec2 vTexCoord;"
54505:         "void main() {"
54505:         "  gl_FragColor = texture2D(uSrcTexture, vTexCoord);"
54505:         "}";
54505: 
54505:     fShaderSource(shaders[0], 1, (const GLchar**) &blitVSSrc, NULL);
54505:     fShaderSource(shaders[1], 1, (const GLchar**) &blitFSSrc, NULL);
54505: 
54505:     for (int i = 0; i < 2; ++i) {
54505:         GLint success, len = 0;
54505: 
54505:         fCompileShader(shaders[i]);
54505:         fGetShaderiv(shaders[i], LOCAL_GL_COMPILE_STATUS, &success);
54505:         NS_ASSERTION(success, "Shader compilation failed!");
54505: 
54505:         if (!success) {
54505:             nsCAutoString log;
54505:             fGetShaderiv(shaders[i], LOCAL_GL_INFO_LOG_LENGTH, (GLint*) &len);
54505:             log.SetCapacity(len);
54505:             fGetShaderInfoLog(shaders[i], len, (GLint*) &len, (char*) log.BeginWriting());
54505:             log.SetLength(len);
54505: 
54505:             printf_stderr("Shader %d compilation failed:\n%s\n", nsPromiseFlatCString(log).get());
54505:             return;
54505:         }
54505: 
54505:         fAttachShader(mBlitProgram, shaders[i]);
54505:         fDeleteShader(shaders[i]);
54505:     }
54505: 
54505:     fBindAttribLocation(mBlitProgram, 0, "aVertex");
54505:     fBindAttribLocation(mBlitProgram, 1, "aTexCoord");
54505: 
54505:     fLinkProgram(mBlitProgram);
54505: 
54505:     GLint success, len = 0;
54505:     fGetProgramiv(mBlitProgram, LOCAL_GL_LINK_STATUS, &success);
54505:     NS_ASSERTION(success, "Shader linking failed!");
54505: 
54505:     if (!success) {
54505:         nsCAutoString log;
54505:         fGetProgramiv(mBlitProgram, LOCAL_GL_INFO_LOG_LENGTH, (GLint*) &len);
54505:         log.SetCapacity(len);
54505:         fGetProgramInfoLog(mBlitProgram, len, (GLint*) &len, (char*) log.BeginWriting());
54505:         log.SetLength(len);
54505: 
54505:         printf_stderr("Program linking failed:\n%s\n", nsPromiseFlatCString(log).get());
54505:         return;
54505:     }
54505: 
54505:     fUseProgram(mBlitProgram);
54505:     fUniform1i(fGetUniformLocation(mBlitProgram, "uSrcTexture"), 0);
54505: }
54505: 
54505: void
54505: GLContext::SetBlitFramebufferForDestTexture(GLuint aTexture)
54505: {
54505:     if (!mBlitFramebuffer) {
54505:         fGenFramebuffers(1, &mBlitFramebuffer);
54505:     }
54505: 
54505:     fBindFramebuffer(LOCAL_GL_FRAMEBUFFER, mBlitFramebuffer);
54505:     fFramebufferTexture2D(LOCAL_GL_FRAMEBUFFER,
54505:                           LOCAL_GL_COLOR_ATTACHMENT0,
54505:                           LOCAL_GL_TEXTURE_2D,
54505:                           aTexture,
54505:                           0);
54505: 
54505:     if (aTexture) {
54505:         GLenum status = fCheckFramebufferStatus(LOCAL_GL_FRAMEBUFFER);
54505: 
54505:         // Note: if you are hitting this assertion, it is likely that
54505:         // your texture is not texture complete -- that is, you
54505:         // allocated a texture name, but didn't actually define its
54505:         // size via a call to TexImage2D.
54505:         NS_ASSERTION(status == LOCAL_GL_FRAMEBUFFER_COMPLETE, "Framebuffer not complete!");
54505:     }
54505: }
54505: 
47908: #ifdef DEBUG
47908: 
47908: void
47908: GLContext::CreatedProgram(GLContext *aOrigin, GLuint aName)
47908: {
47908:     mTrackedPrograms.AppendElement(NamedResource(aOrigin, aName));
47908: }
47908: 
47908: void
47908: GLContext::CreatedShader(GLContext *aOrigin, GLuint aName)
47908: {
47908:     mTrackedShaders.AppendElement(NamedResource(aOrigin, aName));
47908: }
47908: 
47908: void
47908: GLContext::CreatedBuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     for (GLsizei i = 0; i < aCount; ++i) {
47908:         mTrackedBuffers.AppendElement(NamedResource(aOrigin, aNames[i]));
47908:     }
47908: }
47908: 
47908: void
47908: GLContext::CreatedTextures(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     for (GLsizei i = 0; i < aCount; ++i) {
47908:         mTrackedTextures.AppendElement(NamedResource(aOrigin, aNames[i]));
47908:     }
47908: }
47908: 
47908: void
47908: GLContext::CreatedFramebuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     for (GLsizei i = 0; i < aCount; ++i) {
47908:         mTrackedFramebuffers.AppendElement(NamedResource(aOrigin, aNames[i]));
47908:     }
47908: }
47908: 
47908: void
47908: GLContext::CreatedRenderbuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     for (GLsizei i = 0; i < aCount; ++i) {
47908:         mTrackedRenderbuffers.AppendElement(NamedResource(aOrigin, aNames[i]));
47908:     }
47908: }
47908: 
47908: static void
47908: RemoveNamesFromArray(GLContext *aOrigin, GLsizei aCount, GLuint *aNames, nsTArray<GLContext::NamedResource>& aArray)
47908: {
47908:     for (GLsizei j = 0; j < aCount; ++j) {
47908:         GLuint name = aNames[j];
52047:         // name 0 can be ignored
52047:         if (name == 0)
52047:             continue;
52047: 
47908:         PRBool found = PR_FALSE;
47908:         for (PRUint32 i = 0; i < aArray.Length(); ++i) {
47908:             if (aArray[i].name == name) {
47908:                 aArray.RemoveElementAt(i);
47908:                 found = PR_TRUE;
47908:                 break;
47908:             }
47908:         }
52047: #ifdef DEBUG
52047:         if (!found) {
52047:             printf_stderr("GL Context %p deleting resource %d, which doesn't exist!\n", aOrigin, name);
52047:         }
52047: #endif
47908:     }
47908: }
47908: 
47908: void
47908: GLContext::DeletedProgram(GLContext *aOrigin, GLuint aName)
47908: {
47908:     RemoveNamesFromArray(aOrigin, 1, &aName, mTrackedPrograms);
47908: }
47908: 
47908: void
47908: GLContext::DeletedShader(GLContext *aOrigin, GLuint aName)
47908: {
47908:     RemoveNamesFromArray(aOrigin, 1, &aName, mTrackedShaders);
47908: }
47908: 
47908: void
47908: GLContext::DeletedBuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     RemoveNamesFromArray(aOrigin, aCount, aNames, mTrackedBuffers);
47908: }
47908: 
47908: void
47908: GLContext::DeletedTextures(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     RemoveNamesFromArray(aOrigin, aCount, aNames, mTrackedTextures);
47908: }
47908: 
47908: void
47908: GLContext::DeletedFramebuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     RemoveNamesFromArray(aOrigin, aCount, aNames, mTrackedFramebuffers);
47908: }
47908: 
47908: void
47908: GLContext::DeletedRenderbuffers(GLContext *aOrigin, GLsizei aCount, GLuint *aNames)
47908: {
47908:     RemoveNamesFromArray(aOrigin, aCount, aNames, mTrackedRenderbuffers);
47908: }
47908: 
47908: static void
47908: MarkContextDestroyedInArray(GLContext *aContext, nsTArray<GLContext::NamedResource>& aArray)
47908: {
47908:     for (PRUint32 i = 0; i < aArray.Length(); ++i) {
47908:         if (aArray[i].origin == aContext)
47908:             aArray[i].originDeleted = PR_TRUE;
47908:     }
47908: }
47908: 
47908: void
47908: GLContext::SharedContextDestroyed(GLContext *aChild)
47908: {
47908:     MarkContextDestroyedInArray(aChild, mTrackedPrograms);
47908:     MarkContextDestroyedInArray(aChild, mTrackedShaders);
47908:     MarkContextDestroyedInArray(aChild, mTrackedTextures);
47908:     MarkContextDestroyedInArray(aChild, mTrackedFramebuffers);
47908:     MarkContextDestroyedInArray(aChild, mTrackedRenderbuffers);
47908:     MarkContextDestroyedInArray(aChild, mTrackedBuffers);
47908: }
47908: 
47908: static void
47908: ReportArrayContents(const nsTArray<GLContext::NamedResource>& aArray)
47908: {
47908:     nsTArray<GLContext::NamedResource> copy(aArray);
47908:     copy.Sort();
47908: 
47908:     GLContext *lastContext = NULL;
47908:     for (PRUint32 i = 0; i < copy.Length(); ++i) {
47908:         if (lastContext != copy[i].origin) {
47908:             if (lastContext)
47908:                 printf_stderr("\n");
47908:             printf_stderr("  [%p - %s] ", copy[i].origin, copy[i].originDeleted ? "deleted" : "live");
47908:             lastContext = copy[i].origin;
47908:         }
47908:         printf_stderr("%d ", copy[i].name);
47908:     }
47908:     printf_stderr("\n");
47908: }
47908: 
47908: void
47908: GLContext::ReportOutstandingNames()
47908: {
47908:     printf_stderr("== GLContext %p ==\n", this);
47908:     printf_stderr("Outstanding Textures:\n");
47908:     ReportArrayContents(mTrackedTextures);
47908:     printf_stderr("Outstanding Buffers:\n");
47908:     ReportArrayContents(mTrackedBuffers);
47908:     printf_stderr("Outstanding Programs:\n");
47908:     ReportArrayContents(mTrackedPrograms);
47908:     printf_stderr("Outstanding Shaders:\n");
47908:     ReportArrayContents(mTrackedShaders);
47908:     printf_stderr("Outstanding Framebuffers:\n");
47908:     ReportArrayContents(mTrackedFramebuffers);
47908:     printf_stderr("Outstanding Renderbuffers:\n");
47908:     ReportArrayContents(mTrackedRenderbuffers);
47908: }
47908: 
47908: #endif /* DEBUG */
47908: 
41369: } /* namespace gl */
41369: } /* namespace mozilla */
