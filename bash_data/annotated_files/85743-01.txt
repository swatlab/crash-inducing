43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
43113: /* vim:expandtab:shiftwidth=2:tabstop=4:
43113:  */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is mozilla.org code.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 1998
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   rhp@netscape.com
43113:  *   Jungshik Shin <jshin@mailaps.org>
43113:  *   John G Myers   <jgmyers@netscape.com>
43113:  *   Takayuki Tei   <taka@netscape.com>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #include <string.h>
43113: #include "prtypes.h"
43113: #include "prmem.h"
43113: #include "prprf.h"
43113: #include "plstr.h"
43113: #include "plbase64.h"
43113: #include "nsCRT.h"
43113: #include "nsMemory.h"
43113: #include "nsCOMPtr.h"
43113: #include "nsEscape.h"
43113: #include "nsIUTF8ConverterService.h"
43113: #include "nsUConvCID.h"
43113: #include "nsIServiceManager.h"
43113: #include "nsMIMEHeaderParamImpl.h"
43113: #include "nsReadableUtils.h"
43113: #include "nsNativeCharsetUtils.h"
78215: #include "nsNetError.h"
43113: 
43113: // static functions declared below are moved from mailnews/mime/src/comi18n.cpp
43113:   
43113: static char *DecodeQ(const char *, PRUint32);
79445: static bool Is7bitNonAsciiString(const char *, PRUint32);
43113: static void CopyRawHeader(const char *, PRUint32, const char *, nsACString &);
79445: static nsresult DecodeRFC2047Str(const char *, const char *, bool, nsACString&);
43113: 
43113: // XXX The chance of UTF-7 being used in the message header is really
43113: // low, but in theory it's possible. 
43113: #define IS_7BIT_NON_ASCII_CHARSET(cset)            \
43113:     (!nsCRT::strncasecmp((cset), "ISO-2022", 8) || \
43113:      !nsCRT::strncasecmp((cset), "HZ-GB", 5)    || \
43113:      !nsCRT::strncasecmp((cset), "UTF-7", 5))   
43113: 
43113: NS_IMPL_ISUPPORTS1(nsMIMEHeaderParamImpl, nsIMIMEHeaderParam)
43113: 
43113: NS_IMETHODIMP 
43113: nsMIMEHeaderParamImpl::GetParameter(const nsACString& aHeaderVal, 
43113:                                     const char *aParamName,
43113:                                     const nsACString& aFallbackCharset, 
79445:                                     bool aTryLocaleCharset, 
43113:                                     char **aLang, nsAString& aResult)
43113: {
80136:   return DoGetParameter(aHeaderVal, aParamName, RFC_2231_DECODING,
80136:                         aFallbackCharset, aTryLocaleCharset, aLang, aResult);
80136: }
80136: 
80136: NS_IMETHODIMP 
80136: nsMIMEHeaderParamImpl::GetParameter5987(const nsACString& aHeaderVal, 
80136:                                         const char *aParamName,
80136:                                         const nsACString& aFallbackCharset, 
80136:                                         bool aTryLocaleCharset, 
80136:                                         char **aLang, nsAString& aResult)
80136: {
80136:   return DoGetParameter(aHeaderVal, aParamName, RFC_5987_DECODING,
80136:                         aFallbackCharset, aTryLocaleCharset, aLang, aResult);
80136: }
80136: 
80136: // XXX : aTryLocaleCharset is not yet effective.
80136: nsresult 
80136: nsMIMEHeaderParamImpl::DoGetParameter(const nsACString& aHeaderVal, 
80136:                                       const char *aParamName,
80136:                                       ParamDecoding aDecoding,
80136:                                       const nsACString& aFallbackCharset, 
80136:                                       bool aTryLocaleCharset, 
80136:                                       char **aLang, nsAString& aResult)
80136: {
43113:     aResult.Truncate();
43113:     nsresult rv;
43113: 
80136:     // get parameter (decode RFC 2231/5987 when applicable, as specified by
80136:     // aDecoding (5987 being a subset of 2231) and return charset.)
43113:     nsXPIDLCString med;
43113:     nsXPIDLCString charset;
80136:     rv = DoParameterInternal(PromiseFlatCString(aHeaderVal).get(), aParamName, 
80136:                              aDecoding, getter_Copies(charset), aLang, 
80136:                              getter_Copies(med));
43113:     if (NS_FAILED(rv))
43113:         return rv; 
43113: 
43113:     // convert to UTF-8 after charset conversion and RFC 2047 decoding 
43113:     // if necessary.
43113:     
43113:     nsCAutoString str1;
80486:     rv = DecodeParameter(med, charset.get(), nsnull, false, str1);
43113:     NS_ENSURE_SUCCESS(rv, rv);
43113: 
43113:     if (!aFallbackCharset.IsEmpty())
43113:     {
43113:         nsCAutoString str2;
43113:         nsCOMPtr<nsIUTF8ConverterService> 
43113:           cvtUTF8(do_GetService(NS_UTF8CONVERTERSERVICE_CONTRACTID));
43113:         if (cvtUTF8 &&
43113:             NS_SUCCEEDED(cvtUTF8->ConvertStringToUTF8(str1, 
80486:                 PromiseFlatCString(aFallbackCharset).get(), false, str2))) {
43113:           CopyUTF8toUTF16(str2, aResult);
43113:           return NS_OK;
43113:         }
43113:     }
43113: 
43113:     if (IsUTF8(str1)) {
43113:       CopyUTF8toUTF16(str1, aResult);
43113:       return NS_OK;
43113:     }
43113: 
43113:     if (aTryLocaleCharset && !NS_IsNativeUTF8()) 
43113:       return NS_CopyNativeToUnicode(str1, aResult);
43113: 
43113:     CopyASCIItoUTF16(str1, aResult);
43113:     return NS_OK;
43113: }
43113: 
68502: // remove backslash-encoded sequences from quoted-strings
68502: // modifies string in place, potentially shortening it
68502: void RemoveQuotedStringEscapes(char *src)
68502: {
68502:   char *dst = src;
68502: 
68502:   for (char *c = src; *c; ++c)
68502:   {
68502:     if (c[0] == '\\' && c[1])
68502:     {
68502:       // skip backslash if not at end
68502:       ++c;
68502:     }
68502:     *dst++ = *c;
68502:   }
68502:   *dst = 0;
68502: }
68502: 
43113: // moved almost verbatim from mimehdrs.cpp
43113: // char *
43113: // MimeHeaders_get_parameter (const char *header_value, const char *parm_name,
43113: //                            char **charset, char **language)
43113: //
43113: // The format of these header lines  is
43113: // <token> [ ';' <token> '=' <token-or-quoted-string> ]*
43113: NS_IMETHODIMP 
43113: nsMIMEHeaderParamImpl::GetParameterInternal(const char *aHeaderValue, 
43113:                                             const char *aParamName,
43113:                                             char **aCharset,
43113:                                             char **aLang,
43113:                                             char **aResult)
43113: {
80136:   return DoParameterInternal(aHeaderValue, aParamName, RFC_2231_DECODING,
80136:                              aCharset, aLang, aResult);
80136: }
80136: 
80136: 
80136: nsresult 
80136: nsMIMEHeaderParamImpl::DoParameterInternal(const char *aHeaderValue, 
80136:                                            const char *aParamName,
80136:                                            ParamDecoding aDecoding,
80136:                                            char **aCharset,
80136:                                            char **aLang,
80136:                                            char **aResult)
80136: {
80136: 
43113:   if (!aHeaderValue ||  !*aHeaderValue || !aResult)
43113:     return NS_ERROR_INVALID_ARG;
43113: 
43113:   *aResult = nsnull;
43113: 
43113:   if (aCharset) *aCharset = nsnull;
43113:   if (aLang) *aLang = nsnull;
43113: 
43113:   const char *str = aHeaderValue;
43113: 
43113:   // skip leading white space.
43113:   for (; *str &&  nsCRT::IsAsciiSpace(*str); ++str)
43113:     ;
43113:   const char *start = str;
43113:   
43113:   // aParamName is empty. return the first (possibly) _unnamed_ 'parameter'
43113:   // For instance, return 'inline' in the following case:
43113:   // Content-Disposition: inline; filename=.....
43113:   if (!aParamName || !*aParamName) 
43113:     {
43113:       for (; *str && *str != ';' && !nsCRT::IsAsciiSpace(*str); ++str)
43113:         ;
43113:       if (str == start)
78215:         return NS_ERROR_FIRST_HEADER_FIELD_COMPONENT_EMPTY;
78215: 
43113:       *aResult = (char *) nsMemory::Clone(start, (str - start) + 1);
62987:       NS_ENSURE_TRUE(*aResult, NS_ERROR_OUT_OF_MEMORY);
43113:       (*aResult)[str - start] = '\0';  // null-terminate
43113:       return NS_OK;
43113:     }
43113: 
43113:   /* Skip forward to first ';' */
43113:   for (; *str && *str != ';' && *str != ','; ++str)
43113:     ;
43113:   if (*str)
43113:     str++;
43113:   /* Skip over following whitespace */
43113:   for (; *str && nsCRT::IsAsciiSpace(*str); ++str)
43113:     ;
43113: 
43113:   // Some broken http servers just specify parameters
43113:   // like 'filename' without specifying disposition
43113:   // method. Rewind to the first non-white-space
43113:   // character.
43113:   
43113:   if (!*str)
43113:     str = start;
43113: 
43113:   // RFC2231 - The legitimate parm format can be:
43113:   // A. title=ThisIsTitle 
43113:   // B. title*=us-ascii'en-us'This%20is%20wierd.
43113:   // C. title*0*=us-ascii'en'This%20is%20wierd.%20We
43113:   //    title*1*=have%20to%20support%20this.
43113:   //    title*2="Else..."
43113:   // D. title*0="Hey, what you think you are doing?"
43113:   //    title*1="There is no charset and lang info."
80136:   // RFC5987: only A and B
43113:   
43113:   PRInt32 paramLen = strlen(aParamName);
43113: 
80136:   bool haveCaseAValue = false;
80136:   PRInt32 nextContinuation = 0; // next value in series, or -1 if error
80136: 
43113:   while (*str) {
43113:     const char *tokenStart = str;
43113:     const char *tokenEnd = 0;
43113:     const char *valueStart = str;
43113:     const char *valueEnd = 0;
79445:     bool seenEquals = false;
43113: 
43113:     NS_ASSERTION(!nsCRT::IsAsciiSpace(*str), "should be after whitespace.");
43113: 
43113:     // Skip forward to the end of this token. 
43113:     for (; *str && !nsCRT::IsAsciiSpace(*str) && *str != '=' && *str != ';'; str++)
43113:       ;
43113:     tokenEnd = str;
43113: 
43113:     // Skip over whitespace, '=', and whitespace
43113:     while (nsCRT::IsAsciiSpace(*str)) ++str;
73679:     if (*str == '=') {
73679:       ++str;
80486:       seenEquals = true;
73679:     }
43113:     while (nsCRT::IsAsciiSpace(*str)) ++str;
43113: 
79445:     bool needUnquote = false;
68502:     
43113:     if (*str != '"')
43113:     {
43113:       // The value is a token, not a quoted string.
43113:       valueStart = str;
43113:       for (valueEnd = str;
43113:            *valueEnd && !nsCRT::IsAsciiSpace (*valueEnd) && *valueEnd != ';';
43113:            valueEnd++)
43113:         ;
43113:       str = valueEnd;
43113:     }
43113:     else
43113:     {
43113:       // The value is a quoted string.
80486:       needUnquote = true;
68502:       
43113:       ++str;
43113:       valueStart = str;
43113:       for (valueEnd = str; *valueEnd; ++valueEnd)
43113:       {
43113:         if (*valueEnd == '\\')
43113:           ++valueEnd;
43113:         else if (*valueEnd == '"')
43113:           break;
43113:       }
85743:       str = valueEnd;
85743:       // *valueEnd != null means that *valueEnd is quote character.
85743:       if (*valueEnd)
85743:         str++;
43113:     }
43113: 
43113:     // See if this is the simplest case (case A above),
43113:     // a 'single' line value with no charset and lang.
43113:     // If so, copy it and return.
43113:     if (tokenEnd - tokenStart == paramLen &&
73679:         seenEquals &&
43113:         !nsCRT::strncasecmp(tokenStart, aParamName, paramLen))
43113:     {
80136:       if (*aResult)
80136:       {
80136:         // either seen earlier caseA value already--we prefer first--or caseA
80136:         // came after a continuation: either way, prefer other value
80136:         goto increment_str;
80136:       }
43113:       // if the parameter spans across multiple lines we have to strip out the
43113:       //     line continuation -- jht 4/29/98 
43113:       nsCAutoString tempStr(valueStart, valueEnd - valueStart);
43113:       tempStr.StripChars("\r\n");
68502:       char *res = ToNewCString(tempStr);
68502:       NS_ENSURE_TRUE(res, NS_ERROR_OUT_OF_MEMORY);
68502:       
68502:       if (needUnquote)
68502:         RemoveQuotedStringEscapes(res);
68502:             
68502:       *aResult = res;
68502:       
80136:       haveCaseAValue = true;
80136:       // keep going, we may find a RFC 2231/5987 encoded alternative
43113:     }
43113:     // case B, C, and D
43113:     else if (tokenEnd - tokenStart > paramLen &&
43113:              !nsCRT::strncasecmp(tokenStart, aParamName, paramLen) &&
73679:              seenEquals &&
43113:              *(tokenStart + paramLen) == '*')
43113:     {
80136:       const char *cp = tokenStart + paramLen + 1; // 1st char past '*'
79445:       bool needUnescape = *(tokenEnd - 1) == '*';
80136: 
80136:       bool caseB = (tokenEnd - tokenStart) == paramLen + 1;
80136:       bool caseCorDStart = (*cp == '0') && needUnescape;
80136:       bool acceptContinuations = (aDecoding != RFC_5987_DECODING);
80136:  
80136:       // CaseB and start of CaseC: requires charset and optional language
80136:       // in quotes (quotes required even if lang is blank)
82503:       if (caseB || (caseCorDStart && acceptContinuations))
43113:       {
80136:         if (caseCorDStart) {
80136:           if (nextContinuation++ != 0)
80136:           {
80136:             // error: already started a continuation.  Skip future
80136:             // continuations and return whatever initial parts were in order.
80136:             nextContinuation = -1;
80136:             goto increment_str;
80136:           }
80136:         }
43113:         // look for single quotation mark(')
43113:         const char *sQuote1 = PL_strchr(valueStart, 0x27);
43113:         const char *sQuote2 = (char *) (sQuote1 ? PL_strchr(sQuote1 + 1, 0x27) : nsnull);
43113: 
43113:         // Two single quotation marks must be present even in
43113:         // absence of charset and lang. 
82820:         if (!sQuote1 || !sQuote2)
82820:           NS_WARNING("Mandatory two single quotes are missing in header parameter\n");
82820:         if (aCharset && sQuote1 > valueStart && sQuote1 < valueEnd)
82820:         {
43113:           *aCharset = (char *) nsMemory::Clone(valueStart, sQuote1 - valueStart + 1);
43113:           if (*aCharset) 
43113:             *(*aCharset + (sQuote1 - valueStart)) = 0;
43113:         }
82820:         if (aLang && sQuote1 && sQuote2 && sQuote2 > sQuote1 + 1 &&
82820:             sQuote2 < valueEnd)
43113:         {
43113:           *aLang = (char *) nsMemory::Clone(sQuote1 + 1, sQuote2 - (sQuote1 + 1) + 1);
43113:           if (*aLang) 
43113:             *(*aLang + (sQuote2 - (sQuote1 + 1))) = 0;
43113:         }
43113: 
82820:         // Be generous and handle gracefully when required 
82820:         // single quotes are absent.
82820:         if (sQuote1)
82820:         {
82820:           if(!sQuote2)
82820:             sQuote2 = sQuote1;
82820:         }
82820:         else
82820:           sQuote2 = valueStart - 1;
82820: 
82820:         if (sQuote2 && sQuote2 + 1 < valueEnd)
43113:         {
63792:           if (*aResult)
63792:           {
80136:             // caseA value already read, or caseC/D value already read
80136:             // but we're now reading caseB: either way, drop old value
63792:             nsMemory::Free(*aResult);
80136:             haveCaseAValue = false;
63792:           }
43113:           *aResult = (char *) nsMemory::Alloc(valueEnd - (sQuote2 + 1) + 1);
43113:           if (*aResult)
43113:           {
43113:             memcpy(*aResult, sQuote2 + 1, valueEnd - (sQuote2 + 1));
43113:             *(*aResult + (valueEnd - (sQuote2 + 1))) = 0;
43113:             if (needUnescape)
43113:             {
43113:               nsUnescape(*aResult);
80136:               if (caseB)
80136:                 return NS_OK; // caseB wins over everything else
43113:             }
43113:           }
43113:         }
43113:       }  // end of if-block :  title*0*=  or  title*= 
80136:       // caseD: a line of multiline param with no need for unescaping : title*[0-9]=
80136:       // or 2nd or later lines of a caseC param : title*[1-9]*= 
80136:       else if (acceptContinuations && nsCRT::IsAsciiDigit(PRUnichar(*cp)))
43113:       {
80136:         PRInt32 nextSegment = atoi(cp);
80136:         // no leading zeros allowed except for ... position 0
80136:         bool broken = nextSegment > 0 && *cp == '0';
80136:           
80136:         if (broken || nextSegment != nextContinuation++)
80136:         {
80136:           // error: gap in continuation or unneccessary leading 0.
80136:           // Skip future continuations and return whatever initial parts were
80136:           // in order.
80136:           nextContinuation = -1;
80136:           goto increment_str;
80136:         }
80136:         if (haveCaseAValue && *aResult) 
80136:         {
80136:           // drop caseA value
80136:           nsMemory::Free(*aResult);
80136:           *aResult = 0;
80136:           haveCaseAValue = false;
80136:         }
43113:         PRInt32 len = 0;
43113:         if (*aResult) // 2nd or later lines of multiline parameter
43113:         {
43113:           len = strlen(*aResult);
43113:           char *ns = (char *) nsMemory::Realloc(*aResult, len + (valueEnd - valueStart) + 1);
43113:           if (!ns)
43113:           {
43113:             nsMemory::Free(*aResult);
43113:           }
43113:           *aResult = ns;
43113:         }
80136:         else 
43113:         {
80136:           NS_ASSERTION(*cp == '0', "Not first value in continuation"); // must be; 1st line :  title*0=
43113:           *aResult = (char *) nsMemory::Alloc(valueEnd - valueStart + 1);
43113:         }
43113:         if (*aResult)
43113:         {
43113:           // append a partial value
43113:           memcpy(*aResult + len, valueStart, valueEnd - valueStart);
43113:           *(*aResult + len + (valueEnd - valueStart)) = 0;
43113:           if (needUnescape)
43113:             nsUnescape(*aResult + len);
43113:         }
43113:         else 
43113:           return NS_ERROR_OUT_OF_MEMORY;
43113:       } // end of if-block :  title*[0-9]= or title*[1-9]*=
43113:     }
43113: 
43113:     // str now points after the end of the value.
43113:     //   skip over whitespace, ';', whitespace.
80136: increment_str:      
43113:     while (nsCRT::IsAsciiSpace(*str)) ++str;
43113:     if (*str == ';') ++str;
43113:     while (nsCRT::IsAsciiSpace(*str)) ++str;
43113:   }
43113: 
43113:   if (*aResult) 
43113:     return NS_OK;
43113:   else
43113:     return NS_ERROR_INVALID_ARG; // aParameter not found !!
43113: }
43113: 
43113: 
43113: NS_IMETHODIMP
43113: nsMIMEHeaderParamImpl::DecodeRFC2047Header(const char* aHeaderVal, 
43113:                                            const char* aDefaultCharset, 
79445:                                            bool aOverrideCharset, 
79445:                                            bool aEatContinuations,
43113:                                            nsACString& aResult)
43113: {
43113:   aResult.Truncate();
43113:   if (!aHeaderVal)
43113:     return NS_ERROR_INVALID_ARG;
43113:   if (!*aHeaderVal)
43113:     return NS_OK;
43113: 
43113: 
43113:   // If aHeaderVal is RFC 2047 encoded or is not a UTF-8 string  but
43113:   // aDefaultCharset is specified, decodes RFC 2047 encoding and converts
43113:   // to UTF-8. Otherwise, just strips away CRLF. 
43113:   if (PL_strstr(aHeaderVal, "=?") || 
80136:       (aDefaultCharset && (!IsUTF8(nsDependentCString(aHeaderVal)) || 
80136:       Is7bitNonAsciiString(aHeaderVal, PL_strlen(aHeaderVal))))) {
43113:     DecodeRFC2047Str(aHeaderVal, aDefaultCharset, aOverrideCharset, aResult);
43113:   } else if (aEatContinuations && 
43113:              (PL_strchr(aHeaderVal, '\n') || PL_strchr(aHeaderVal, '\r'))) {
43113:     aResult = aHeaderVal;
43113:   } else {
80486:     aEatContinuations = false;
43113:     aResult = aHeaderVal;
43113:   }
43113: 
43113:   if (aEatContinuations) {
43113:     nsCAutoString temp(aResult);
43113:     temp.ReplaceSubstring("\n\t", " ");
43113:     temp.ReplaceSubstring("\r\t", " ");
43113:     temp.StripChars("\r\n");
43113:     aResult = temp;
43113:   }
43113: 
43113:   return NS_OK;
43113: }
43113: 
43113: NS_IMETHODIMP 
43113: nsMIMEHeaderParamImpl::DecodeParameter(const nsACString& aParamValue,
43113:                                        const char* aCharset,
43113:                                        const char* aDefaultCharset,
79445:                                        bool aOverrideCharset, 
43113:                                        nsACString& aResult)
43113: {
43113:   aResult.Truncate();
80136:   // If aCharset is given, aParamValue was obtained from RFC2231/5987 
43113:   // encoding and we're pretty sure that it's in aCharset.
43113:   if (aCharset && *aCharset)
43113:   {
43113:     nsCOMPtr<nsIUTF8ConverterService> cvtUTF8(do_GetService(NS_UTF8CONVERTERSERVICE_CONTRACTID));
43113:     if (cvtUTF8)
43113:       // skip ASCIIness/UTF8ness test if aCharset is 7bit non-ascii charset.
43113:       return cvtUTF8->ConvertStringToUTF8(aParamValue, aCharset,
43113:           IS_7BIT_NON_ASCII_CHARSET(aCharset), aResult);
43113:   }
43113: 
43113:   const nsAFlatCString& param = PromiseFlatCString(aParamValue);
43113:   nsCAutoString unQuoted;
43113:   nsACString::const_iterator s, e;
43113:   param.BeginReading(s);
43113:   param.EndReading(e);
43113: 
43113:   // strip '\' when used to quote CR, LF, '"' and '\'
43113:   for ( ; s != e; ++s) {
43113:     if ((*s == '\\')) {
43113:       if (++s == e) {
43113:         --s; // '\' is at the end. move back and append '\'.
43113:       }
43113:       else if (*s != nsCRT::CR && *s != nsCRT::LF && *s != '"' && *s != '\\') {
43113:         --s; // '\' is not foll. by CR,LF,'"','\'. move back and append '\'
43113:       }
43113:       // else : skip '\' and append the quoted character.
43113:     }
43113:     unQuoted.Append(*s);
43113:   }
43113: 
43113:   aResult = unQuoted;
43113:   
43113:   nsCAutoString decoded;
43113: 
43113:   // Try RFC 2047 encoding, instead.
43113:   nsresult rv = DecodeRFC2047Header(unQuoted.get(), aDefaultCharset, 
80486:                                     aOverrideCharset, true, decoded);
43113:   
43113:   if (NS_SUCCEEDED(rv) && !decoded.IsEmpty())
43113:     aResult = decoded;
43113:   
43113:   return rv;
43113: }
43113: 
43113: #define ISHEXCHAR(c) \
80136:         ((0x30 <= PRUint8(c) && PRUint8(c) <= 0x39)  ||  \
80136:          (0x41 <= PRUint8(c) && PRUint8(c) <= 0x46)  ||  \
80136:          (0x61 <= PRUint8(c) && PRUint8(c) <= 0x66))
43113: 
43113: // Decode Q encoding (RFC 2047).
43113: // static
43113: char *DecodeQ(const char *in, PRUint32 length)
43113: {
43113:   char *out, *dest = 0;
43113: 
43113:   out = dest = (char *)PR_Calloc(length + 1, sizeof(char));
43113:   if (dest == nsnull)
43113:     return nsnull;
43113:   while (length > 0) {
43113:     PRUintn c = 0;
43113:     switch (*in) {
43113:     case '=':
43113:       // check if |in| in the form of '=hh'  where h is [0-9a-fA-F].
43113:       if (length < 3 || !ISHEXCHAR(in[1]) || !ISHEXCHAR(in[2]))
43113:         goto badsyntax;
43113:       PR_sscanf(in + 1, "%2X", &c);
43113:       *out++ = (char) c;
43113:       in += 3;
43113:       length -= 3;
43113:       break;
43113: 
43113:     case '_':
43113:       *out++ = ' ';
43113:       in++;
43113:       length--;
43113:       break;
43113: 
43113:     default:
43113:       if (*in & 0x80) goto badsyntax;
43113:       *out++ = *in++;
43113:       length--;
43113:     }
43113:   }
43113:   *out++ = '\0';
43113: 
43113:   for (out = dest; *out ; ++out) {
43113:     if (*out == '\t')
43113:       *out = ' ';
43113:   }
43113: 
43113:   return dest;
43113: 
43113:  badsyntax:
43113:   PR_Free(dest);
43113:   return nsnull;
43113: }
43113: 
43113: // check if input is HZ (a 7bit encoding for simplified Chinese : RFC 1842)) 
43113: // or has  ESC which may be an  indication that  it's in one of many ISO 
43113: // 2022 7bit  encodings (e.g. ISO-2022-JP(-2)/CN : see RFC 1468, 1922, 1554).
43113: // static
79445: bool Is7bitNonAsciiString(const char *input, PRUint32 len)
43113: {
43113:   PRInt32 c;
43113: 
43113:   enum { hz_initial, // No HZ seen yet
43113:          hz_escaped, // Inside an HZ ~{ escape sequence 
43113:          hz_seen, // Have seen at least one complete HZ sequence 
43113:          hz_notpresent // Have seen something that is not legal HZ
43113:   } hz_state;
43113: 
43113:   hz_state = hz_initial;
43113:   while (len) {
43113:     c = PRUint8(*input++);
43113:     len--;
80486:     if (c & 0x80) return false;
80486:     if (c == 0x1B) return true;
43113:     if (c == '~') {
43113:       switch (hz_state) {
43113:       case hz_initial:
43113:       case hz_seen:
43113:         if (*input == '{') {
43113:           hz_state = hz_escaped;
43113:         } else if (*input == '~') {
43113:           // ~~ is the HZ encoding of ~.  Skip over second ~ as well
43113:           hz_state = hz_seen;
43113:           input++;
43113:           len--;
43113:         } else {
43113:           hz_state = hz_notpresent;
43113:         }
43113:         break;
43113: 
43113:       case hz_escaped:
43113:         if (*input == '}') hz_state = hz_seen;
43113:         break;
43113:       default:
43113:         break;
43113:       }
43113:     }
43113:   }
43113:   return hz_state == hz_seen;
43113: }
43113: 
43113: #define REPLACEMENT_CHAR "\357\277\275" // EF BF BD (UTF-8 encoding of U+FFFD)
43113: 
43113: // copy 'raw' sequences of octets in aInput to aOutput.
43113: // If aDefaultCharset is specified, the input is assumed to be in the
43113: // charset and converted to UTF-8. Otherwise, a blind copy is made.
43113: // If aDefaultCharset is specified, but the conversion to UTF-8
43113: // is not successful, each octet is replaced by Unicode replacement
43113: // chars. *aOutput is advanced by the number of output octets.
43113: // static
43113: void CopyRawHeader(const char *aInput, PRUint32 aLen, 
43113:                    const char *aDefaultCharset, nsACString &aOutput)
43113: {
43113:   PRInt32 c;
43113: 
43113:   // If aDefaultCharset is not specified, make a blind copy.
43113:   if (!aDefaultCharset || !*aDefaultCharset) {
43113:     aOutput.Append(aInput, aLen);
43113:     return;
43113:   }
43113: 
43113:   // Copy as long as it's US-ASCII.  An ESC may indicate ISO 2022
43113:   // A ~ may indicate it is HZ
43113:   while (aLen && (c = PRUint8(*aInput++)) != 0x1B && c != '~' && !(c & 0x80)) {
43113:     aOutput.Append(char(c));
43113:     aLen--;
43113:   }
43113:   if (!aLen) {
43113:     return;
43113:   }
43113:   aInput--;
43113: 
43113:   // skip ASCIIness/UTF8ness test if aInput is supected to be a 7bit non-ascii
43113:   // string and aDefaultCharset is a 7bit non-ascii charset.
79445:   bool skipCheck = (c == 0x1B || c == '~') && 
43113:                      IS_7BIT_NON_ASCII_CHARSET(aDefaultCharset);
43113: 
43113:   // If not UTF-8, treat as default charset
43113:   nsCOMPtr<nsIUTF8ConverterService> 
43113:     cvtUTF8(do_GetService(NS_UTF8CONVERTERSERVICE_CONTRACTID));
43113:   nsCAutoString utf8Text;
43113:   if (cvtUTF8 &&
43113:       NS_SUCCEEDED(
43113:       cvtUTF8->ConvertStringToUTF8(Substring(aInput, aInput + aLen), 
43113:       aDefaultCharset, skipCheck, utf8Text))) {
43113:     aOutput.Append(utf8Text);
43113:   } else { // replace each octet with Unicode replacement char in UTF-8.
43113:     for (PRUint32 i = 0; i < aLen; i++) {
43113:       c = PRUint8(*aInput++);
43113:       if (c & 0x80)
43113:         aOutput.Append(REPLACEMENT_CHAR);
43113:       else
43113:         aOutput.Append(char(c));
43113:     }
43113:   }
43113: }
43113: 
43113: static const char especials[] = "()<>@,;:\\\"/[]?.=";
43113: 
43113: // |decode_mime_part2_str| taken from comi18n.c
43113: // Decode RFC2047-encoded words in the input and convert the result to UTF-8.
43113: // If aOverrideCharset is true, charset in RFC2047-encoded words is 
43113: // ignored and aDefaultCharset is assumed, instead. aDefaultCharset
43113: // is also used to convert raw octets (without RFC 2047 encoding) to UTF-8.
43113: //static
43113: nsresult DecodeRFC2047Str(const char *aHeader, const char *aDefaultCharset, 
79445:                           bool aOverrideCharset, nsACString &aResult)
43113: {
43113:   const char *p, *q, *r;
43113:   char *decodedText;
43113:   const char *begin; // tracking pointer for where we are in the input buffer
43113:   PRInt32 isLastEncodedWord = 0;
43113:   const char *charsetStart, *charsetEnd;
43113:   char charset[80];
43113: 
43113:   // initialize charset name to an empty string
43113:   charset[0] = '\0';
43113: 
43113:   begin = aHeader;
43113: 
43113:   // To avoid buffer realloc, if possible, set capacity in advance. No 
43113:   // matter what,  more than 3x expansion can never happen for all charsets
43113:   // supported by Mozilla. SCSU/BCSU with the sliding window set to a
43113:   // non-BMP block may be exceptions, but Mozilla does not support them. 
43113:   // Neither any known mail/news program use them. Even if there's, we're
43113:   // safe because we don't use a raw *char any more.
43113:   aResult.SetCapacity(3 * strlen(aHeader));
43113: 
43113:   while ((p = PL_strstr(begin, "=?")) != 0) {
43113:     if (isLastEncodedWord) {
43113:       // See if it's all whitespace.
43113:       for (q = begin; q < p; ++q) {
43113:         if (!PL_strchr(" \t\r\n", *q)) break;
43113:       }
43113:     }
43113: 
43113:     if (!isLastEncodedWord || q < p) {
43113:       // copy the part before the encoded-word
43113:       CopyRawHeader(begin, p - begin, aDefaultCharset, aResult);
43113:       begin = p;
43113:     }
43113: 
43113:     p += 2;
43113: 
43113:     // Get charset info
43113:     charsetStart = p;
43113:     charsetEnd = 0;
43113:     for (q = p; *q != '?'; q++) {
43113:       if (*q <= ' ' || PL_strchr(especials, *q)) {
43113:         goto badsyntax;
43113:       }
43113: 
43113:       // RFC 2231 section 5
43113:       if (!charsetEnd && *q == '*') {
43113:         charsetEnd = q; 
43113:       }
43113:     }
43113:     if (!charsetEnd) {
43113:       charsetEnd = q;
43113:     }
43113: 
43113:     // Check for too-long charset name
43113:     if (PRUint32(charsetEnd - charsetStart) >= sizeof(charset)) 
43113:       goto badsyntax;
43113:     
43113:     memcpy(charset, charsetStart, charsetEnd - charsetStart);
43113:     charset[charsetEnd - charsetStart] = 0;
43113: 
43113:     q++;
43113:     if (*q != 'Q' && *q != 'q' && *q != 'B' && *q != 'b')
43113:       goto badsyntax;
43113: 
43113:     if (q[1] != '?')
43113:       goto badsyntax;
43113: 
43113:     r = q;
43113:     for (r = q + 2; *r != '?'; r++) {
43113:       if (*r < ' ') goto badsyntax;
43113:     }
43113:     if (r[1] != '=')
43113:         goto badsyntax;
43113:     else if (r == q + 2) {
43113:         // it's empty, skip
43113:         begin = r + 2;
43113:         isLastEncodedWord = 1;
43113:         continue;
43113:     }
43113: 
43113:     if(*q == 'Q' || *q == 'q')
43113:       decodedText = DecodeQ(q + 2, r - (q + 2));
43113:     else {
43113:       // bug 227290. ignore an extraneous '=' at the end.
43113:       // (# of characters in B-encoded part has to be a multiple of 4)
43113:       PRInt32 n = r - (q + 2);
43113:       n -= (n % 4 == 1 && !PL_strncmp(r - 3, "===", 3)) ? 1 : 0;
43113:       decodedText = PL_Base64Decode(q + 2, n, nsnull);
43113:     }
43113: 
43113:     if (decodedText == nsnull)
43113:       goto badsyntax;
43113: 
43113:     // Override charset if requested.  Never override labeled UTF-8.
43113:     // Use default charset instead of UNKNOWN-8BIT
43113:     if ((aOverrideCharset && 0 != nsCRT::strcasecmp(charset, "UTF-8")) ||
43113:         (aDefaultCharset && 0 == nsCRT::strcasecmp(charset, "UNKNOWN-8BIT"))) {
43113:       PL_strncpy(charset, aDefaultCharset, sizeof(charset) - 1);
43113:       charset[sizeof(charset) - 1] = '\0';
43113:     }
43113: 
43113:     {
43113:       nsCOMPtr<nsIUTF8ConverterService> 
43113:         cvtUTF8(do_GetService(NS_UTF8CONVERTERSERVICE_CONTRACTID));
43113:       nsCAutoString utf8Text;
43113:       // skip ASCIIness/UTF8ness test if aCharset is 7bit non-ascii charset.
43113:       if (cvtUTF8 &&
43113:           NS_SUCCEEDED(
43113:             cvtUTF8->ConvertStringToUTF8(nsDependentCString(decodedText),
43113:             charset, IS_7BIT_NON_ASCII_CHARSET(charset), utf8Text))) {
43113:         aResult.Append(utf8Text);
43113:       } else {
43113:         aResult.Append(REPLACEMENT_CHAR);
43113:       }
43113:     }
43113:     PR_Free(decodedText);
43113:     begin = r + 2;
43113:     isLastEncodedWord = 1;
43113:     continue;
43113: 
43113:   badsyntax:
43113:     // copy the part before the encoded-word
43113:     aResult.Append(begin, p - begin);
43113:     begin = p;
43113:     isLastEncodedWord = 0;
43113:   }
43113: 
43113:   // put the tail back
43113:   CopyRawHeader(begin, strlen(begin), aDefaultCharset, aResult);
43113: 
43113:   nsCAutoString tempStr(aResult);
43113:   tempStr.ReplaceChar('\t', ' ');
43113:   aResult = tempStr;
43113: 
43113:   return NS_OK;
43113: }
43113: 
