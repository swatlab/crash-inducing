131499: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-*/
131499: /* This Source Code Form is subject to the terms of the Mozilla Public
131499:  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
131499:  * You can obtain one at http://mozilla.org/MPL/2.0/. */
131499: 
131499: #ifndef MOZILLA_AUDIONODESTREAM_H_
131499: #define MOZILLA_AUDIONODESTREAM_H_
131499: 
131499: #include "MediaStreamGraph.h"
131499: #include "AudioChannelFormat.h"
131499: #include "AudioNodeEngine.h"
131499: 
131499: #ifdef PR_LOGGING
131499: #define LOG(type, msg) PR_LOG(gMediaStreamGraphLog, type, msg)
131499: #else
131499: #define LOG(type, msg)
131499: #endif
131499: 
131499: namespace mozilla {
131499: 
131499: class ThreadSharedFloatArrayBufferList;
131499: 
131499: /**
131499:  * An AudioNodeStream produces one audio track with ID AUDIO_TRACK.
131499:  * The start time of the AudioTrack is aligned to the start time of the
131499:  * AudioContext's destination node stream, plus some multiple of BLOCK_SIZE
131499:  * samples.
131499:  *
131499:  * An AudioNodeStream has an AudioNodeEngine plugged into it that does the
131499:  * actual audio processing. AudioNodeStream contains the glue code that
131499:  * integrates audio processing with the MediaStreamGraph.
131499:  */
131499: class AudioNodeStream : public ProcessedMediaStream {
131499: public:
131499:   enum { AUDIO_TRACK = 1 };
131499: 
131499:   /**
131499:    * Transfers ownership of aEngine to the new AudioNodeStream.
131499:    */
131499:   explicit AudioNodeStream(AudioNodeEngine* aEngine)
131499:     : ProcessedMediaStream(nullptr), mEngine(aEngine), mLastChunk(nullptr)
131499:   {
131499:   }
131499:   ~AudioNodeStream();
131499: 
131499:   // Control API
131499:   /**
131499:    * Sets a parameter that's a time relative to some stream's played time.
131499:    * This time is converted to a time relative to this stream when it's set.
131499:    */
131499:   void SetStreamTimeParameter(uint32_t aIndex, MediaStream* aRelativeToStream,
131499:                               double aStreamTime);
131499:   void SetDoubleParameter(uint32_t aIndex, double aValue);
131499:   void SetInt32Parameter(uint32_t aIndex, int32_t aValue);
131499:   void SetBuffer(already_AddRefed<ThreadSharedFloatArrayBufferList> aBuffer);
131499: 
131499:   virtual AudioNodeStream* AsAudioNodeStream() { return this; }
131499: 
131499:   // Graph thread only
131499:   void SetStreamTimeParameterImpl(uint32_t aIndex, MediaStream* aRelativeToStream,
131499:                                   double aStreamTime);
131499:   virtual void ProduceOutput(GraphTime aFrom, GraphTime aTo);
131499:   TrackTicks GetCurrentPosition();
131499: 
131499:   // Any thread
131499:   AudioNodeEngine* Engine() { return mEngine; }
131499: 
131499: protected:
131499:   void FinishOutput();
131499: 
131499:   StreamBuffer::Track* EnsureTrack();
131499:   AudioChunk* ObtainInputBlock(AudioChunk* aTmpChunk);
131499: 
131499:   // The engine that will generate output for this node.
131499:   nsAutoPtr<AudioNodeEngine> mEngine;
131499:   // The last block produced by this node.
131499:   AudioChunk* mLastChunk;
131499: };
131499: 
131499: }
131499: 
131499: #endif /* MOZILLA_AUDIONODESTREAM_H_ */
