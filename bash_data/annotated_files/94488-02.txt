87729: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
87729: /* vim: set sw=4 ts=8 et tw=80 : */
87729: /* ***** BEGIN LICENSE BLOCK *****
87729:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
87729:  *
87729:  * The contents of this file are subject to the Mozilla Public License Version
87729:  * 1.1 (the "License"); you may not use this file except in compliance with
87729:  * the License. You may obtain a copy of the License at
87729:  * http://www.mozilla.org/MPL/
87729:  *
87729:  * Software distributed under the License is distributed on an "AS IS" basis,
87729:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
87729:  * for the specific language governing rights and limitations under the
87729:  * License.
87729:  *
87729:  * The Original Code is Mozilla Content App.
87729:  *
87729:  * The Initial Developer of the Original Code is
87729:  *   The Mozilla Foundation.
87729:  * Portions created by the Initial Developer are Copyright (C) 2011
87729:  * the Initial Developer. All Rights Reserved.
87729:  *
87729:  * Contributor(s):
87729:  *   Benoit Girard <bgirard@mozilla.com>
87729:  *   Ali Juma <ajuma@mozilla.com>
87729:  *
87729:  * Alternatively, the contents of this file may be used under the terms of
87729:  * either the GNU General Public License Version 2 or later (the "GPL"), or
87729:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
87729:  * in which case the provisions of the GPL or the LGPL are applicable instead
87729:  * of those above. If you wish to allow use of your version of this file only
87729:  * under the terms of either the GPL or the LGPL, and not to allow others to
87729:  * use your version of this file under the terms of the MPL, indicate your
87729:  * decision by deleting the provisions above and replace them with the notice
87729:  * and other provisions required by the GPL or the LGPL. If you do not delete
87729:  * the provisions above, a recipient may use your version of this file under
87729:  * the terms of any one of the MPL, the GPL or the LGPL.
87729:  *
87729:  * ***** END LICENSE BLOCK ***** */
87729: 
87729: #ifndef mozilla_layers_CompositorParent_h
87729: #define mozilla_layers_CompositorParent_h
87729: 
92862: // Enable this pref to turn on compositor performance warning.
92862: // This will print warnings if the compositor isn't meeting
93083: // its responsiveness objectives:
92862: //    1) Compose a frame within 15ms of receiving a ScheduleCompositeCall
92862: //    2) Unless a frame was composited within the throttle threshold in
92862: //       which the deadline will be 15ms + throttle threshold
92862: #define COMPOSITOR_PERFORMANCE_WARNING
92862: 
87729: #include "mozilla/layers/PCompositorParent.h"
87729: #include "mozilla/layers/PLayersParent.h"
92813: #include "base/thread.h"
87729: #include "ShadowLayersManager.h"
87729: 
87729: class nsIWidget;
87729: 
93083: namespace base {
93083: class Thread;
93083: }
93083: 
87729: namespace mozilla {
87729: namespace layers {
87729: 
87729: class LayerManager;
87729: 
92793: // Represents (affine) transforms that are calculated from a content view.
92793: struct ViewTransform {
92793:   ViewTransform(nsIntPoint aTranslation = nsIntPoint(0, 0), float aXScale = 1, float aYScale = 1)
92793:     : mTranslation(aTranslation)
92793:     , mXScale(aXScale)
92793:     , mYScale(aYScale)
92793:   {}
92793: 
92793:   operator gfx3DMatrix() const
92793:   {
92793:     return
92793:       gfx3DMatrix::ScalingMatrix(mXScale, mYScale, 1) *
92793:       gfx3DMatrix::Translation(mTranslation.x, mTranslation.y, 0);
92793:   }
92793: 
92793:   nsIntPoint mTranslation;
92793:   float mXScale;
92793:   float mYScale;
92793: };
92793: 
87729: class CompositorParent : public PCompositorParent,
87729:                          public ShadowLayersManager
87729: {
87729:   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(CompositorParent)
87729: public:
93083:   CompositorParent(nsIWidget* aWidget, base::Thread* aCompositorThread);
87729:   virtual ~CompositorParent();
87729: 
94488:   virtual bool RecvWillStop() MOZ_OVERRIDE;
87729:   virtual bool RecvStop() MOZ_OVERRIDE;
94309:   virtual bool RecvPause() MOZ_OVERRIDE;
94309:   virtual bool RecvResume() MOZ_OVERRIDE;
87729: 
93058:   virtual void ShadowLayersUpdated(bool isFirstPaint) MOZ_OVERRIDE;
87729:   void Destroy();
87729: 
87729:   LayerManager* GetLayerManager() { return mLayerManager; }
87729: 
92793:   void SetTransformation(float aScale, nsIntPoint aScrollOffset);
92793:   void AsyncRender();
92851: 
92818:   // Can be called from any thread
93083:   void ScheduleRenderOnCompositorThread();
93083:   void SchedulePauseOnCompositorThread();
93083:   void ScheduleResumeOnCompositorThread();
92793: 
87729: protected:
87729:   virtual PLayersParent* AllocPLayers(const LayersBackend &backendType);
87729:   virtual bool DeallocPLayers(PLayersParent* aLayers);
87729: 
87729: private:
92882:   void PauseComposition();
92882:   void ResumeComposition();
92882: 
92882:   void Composite();
87729:   void ScheduleComposition();
92904:   void TransformShadowTree();
87729: 
92781:   // Platform specific functions
92781: #ifdef MOZ_WIDGET_ANDROID
92781:   /**
92828:    * Does a breadth-first search to find the first layer in the tree with a
92828:    * displayport set.
92828:    */
92828:   Layer* GetPrimaryScrollableLayer();
92781: #endif
92781: 
87729:   nsRefPtr<LayerManager> mLayerManager;
93083:   base::Thread* mCompositorThread;
92818:   nsIWidget* mWidget;
92818:   CancelableTask *mCurrentCompositeTask;
92819:   TimeStamp mLastCompose;
92862: #ifdef COMPOSITOR_PERFORMANCE_WARNING
92862:   TimeStamp mExpectedComposeTime;
92862: #endif
92818: 
92816:   bool mPaused;
92793:   float mXScale;
92793:   float mYScale;
92793:   nsIntPoint mScrollOffset;
93060:   nsIntSize mContentSize;
87729: 
93058:   // When this flag is set, the next composition will be the first for a
93058:   // particular document (i.e. the document displayed on the screen will change).
93058:   // This happens when loading a new page or switching tabs. We notify the
93058:   // front-end (e.g. Java on Android) about this so that it take the new page
93058:   // size and zoom into account when providing us with the next view transform.
93058:   bool mIsFirstPaint;
93058: 
93545:   // This flag is set during a layers update, so that the first composition
93545:   // after a layers update has it set. It is cleared after that first composition.
93545:   bool mLayersUpdated;
93545: 
87729:   DISALLOW_EVIL_CONSTRUCTORS(CompositorParent);
87729: };
87729: 
87729: } // layers
87729: } // mozilla
87729: 
87729: #endif // mozilla_layers_CompositorParent_h
