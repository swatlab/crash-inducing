35812: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
35812:  * vim: sw=4 ts=4 et :
35812:  */
35744: /* ***** BEGIN LICENSE BLOCK *****
35744:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
35744:  *
35744:  * The contents of this file are subject to the Mozilla Public License Version
35744:  * 1.1 (the "License"); you may not use this file except in compliance with
35744:  * the License. You may obtain a copy of the License at
35744:  * http://www.mozilla.org/MPL/
35744:  *
35744:  * Software distributed under the License is distributed on an "AS IS" basis,
35744:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
35744:  * for the specific language governing rights and limitations under the
35744:  * License.
35744:  *
35744:  * The Original Code is Mozilla IPC.
35744:  *
35744:  * The Initial Developer of the Original Code is
35744:  *   Chris Jones <jones.chris.g@gmail.com>
35744:  * Portions created by the Initial Developer are Copyright (C) 2009
35744:  * the Initial Developer. All Rights Reserved.
35744:  *
35744:  * Contributor(s):
35744:  *
35744:  * Alternatively, the contents of this file may be used under the terms of
35744:  * either the GNU General Public License Version 2 or later (the "GPL"), or
35744:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
35744:  * in which case the provisions of the GPL or the LGPL are applicable instead
35744:  * of those above. If you wish to allow use of your version of this file only
35744:  * under the terms of either the GPL or the LGPL, and not to allow others to
35744:  * use your version of this file under the terms of the MPL, indicate your
35744:  * decision by deleting the provisions above and replace them with the notice
35744:  * and other provisions required by the GPL or the LGPL. If you do not delete
35744:  * the provisions above, a recipient may use your version of this file under
35744:  * the terms of any one of the MPL, the GPL or the LGPL.
35744:  *
35744:  * ***** END LICENSE BLOCK ***** */
35744: 
35744: #ifndef mozilla_ipc_ProtocolUtils_h
35744: #define mozilla_ipc_ProtocolUtils_h 1
35744: 
36016: #include "base/process.h"
36136: #include "base/process_util.h"
35744: #include "chrome/common/ipc_message_utils.h"
35744: 
36028: #include "prenv.h"
36028: 
36153: #include "mozilla/ipc/Shmem.h"
36140: 
36140: // WARNING: this takes into account the private, special-message-type
36140: // enum in ipc_channel.h.  They need to be kept in sync.
36140: namespace {
36140: enum {
41362:     SHMEM_DESTROYED_MESSAGE_TYPE = kuint16max - 5,
38100:     UNBLOCK_CHILD_MESSAGE_TYPE = kuint16max - 4,
38100:     BLOCK_CHILD_MESSAGE_TYPE   = kuint16max - 3,
36153:     SHMEM_CREATED_MESSAGE_TYPE = kuint16max - 2,
36140:     GOODBYE_MESSAGE_TYPE       = kuint16max - 1,
36140: };
36140: }
35744: 
35744: namespace mozilla {
35744: namespace ipc {
35744: 
35744: 
35812: // Used to pass references to protocol actors across the wire.
35812: // Actors created on the parent-side have a positive ID, and actors
35812: // allocated on the child side have a negative ID.
35744: struct ActorHandle
35744: {
35812:     int mId;
35744: };
35744: 
47710: // Used internally to represent a "trigger" that might cause a state
47710: // transition.  Triggers are normalized across parent+child to Send
47710: // and Recv (instead of child-in, child-out, parent-in, parent-out) so
47710: // that they can share the same state machine implementation.  To
47710: // further normalize, |Send| is used for 'call', |Recv| for 'answer'.
47710: struct Trigger
47710: {
47710:     enum Action { Send, Recv };
47710: 
47710:     Trigger(Action action, int32 msg) :
47710:         mAction(action),
47710:         mMsg(msg)
47710:     {}
47710: 
47710:     Action mAction;
47710:     int32 mMsg;
47710: };
47710: 
35800: template<class ListenerT>
35744: class /*NS_INTERFACE_CLASS*/ IProtocolManager
35744: {
35744: public:
36140:     enum ActorDestroyReason {
63894:         FailedConstructor,
36140:         Deletion,
36140:         AncestorDeletion,
36140:         NormalShutdown,
36140:         AbnormalShutdown
36140:     };
36140: 
36016:     typedef base::ProcessHandle ProcessHandle;
36016: 
35800:     virtual int32 Register(ListenerT*) = 0;
35812:     virtual int32 RegisterID(ListenerT*, int32) = 0;
35800:     virtual ListenerT* Lookup(int32) = 0;
35744:     virtual void Unregister(int32) = 0;
38094:     virtual void RemoveManagee(int32, ListenerT*) = 0;
39732: 
40908:     virtual Shmem::SharedMemory* CreateSharedMemory(
56896:         size_t, SharedMemory::SharedMemoryType, bool, int32*) = 0;
42562:     virtual bool AdoptSharedMemory(Shmem::SharedMemory*, int32*) = 0;
39732:     virtual Shmem::SharedMemory* LookupSharedMemory(int32) = 0;
42562:     virtual bool IsTrackingSharedMemory(Shmem::SharedMemory*) = 0;
41362:     virtual bool DestroySharedMemory(Shmem&) = 0;
39732: 
36016:     // XXX odd duck, acknowledged
36136:     virtual ProcessHandle OtherProcess() const = 0;
35744: };
35744: 
36028: 
36028: inline bool
36028: LoggingEnabled()
36028: {
36028: #if defined(DEBUG)
36028:     return !!PR_GetEnv("MOZ_IPC_MESSAGE_LOG");
36028: #else
36028:     return false;
36028: #endif
36028: }
36028: 
36153: 
35744: } // namespace ipc
35744: } // namespace mozilla
35744: 
35744: 
35744: namespace IPC {
35744: 
35744: template <>
35744: struct ParamTraits<mozilla::ipc::ActorHandle>
35744: {
35744:     typedef mozilla::ipc::ActorHandle paramType;
35744: 
35744:     static void Write(Message* aMsg, const paramType& aParam)
35744:     {
35812:         IPC::WriteParam(aMsg, aParam.mId);
35744:     }
35744: 
35744:     static bool Read(const Message* aMsg, void** aIter, paramType* aResult)
35744:     {
35812:         int id;
35812:         if (IPC::ReadParam(aMsg, aIter, &id)) {
35812:             aResult->mId = id;
35744:             return true;
35744:         }
35744:         return false;
35744:     }
35744: 
35744:     static void Log(const paramType& aParam, std::wstring* aLog)
35744:     {
35812:         aLog->append(StringPrintf(L"(%d)", aParam.mId));
35744:     }
35744: };
35744: 
35744: } // namespace IPC
35744: 
35744: 
35744: #endif  // mozilla_ipc_ProtocolUtils_h
