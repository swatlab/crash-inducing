111709: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
111709:  * vim: set ts=4 sw=4 et tw=79:
111709:  *
111709:  * ***** BEGIN LICENSE BLOCK *****
111709:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
111709:  *
111709:  * The contents of this file are subject to the Mozilla Public License Version
111709:  * 1.1 (the "License"); you may not use this file except in compliance with
111709:  * the License. You may obtain a copy of the License at
111709:  * http://www.mozilla.org/MPL/
111709:  *
111709:  * Software distributed under the License is distributed on an "AS IS" basis,
111709:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
111709:  * for the specific language governing rights and limitations under the
111709:  * License.
111709:  *
111709:  * The Original Code is Mozilla Communicator client code, released
111709:  * March 31, 1998.
111709:  *
111709:  * The Initial Developer of the Original Code is
111709:  * Netscape Communications Corporation.
111709:  * Portions created by the Initial Developer are Copyright (C) 1998
111709:  * the Initial Developer. All Rights Reserved.
111709:  *
111709:  * Contributor(s):
111709:  *   David Anderson <danderson@mozilla.com>
111709:  *
111709:  * Alternatively, the contents of this file may be used under the terms of
111709:  * either of the GNU General Public License Version 2 or later (the "GPL"),
111709:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
111709:  * in which case the provisions of the GPL or the LGPL are applicable instead
111709:  * of those above. If you wish to allow use of your version of this file only
111709:  * under the terms of either the GPL or the LGPL, and not to allow others to
111709:  * use your version of this file under the terms of the MPL, indicate your
111709:  * decision by deleting the provisions above and replace them with the notice
111709:  * and other provisions required by the GPL or the LGPL. If you do not delete
111709:  * the provisions above, a recipient may use your version of this file under
111709:  * the terms of any one of the MPL, the GPL or the LGPL.
111709:  *
111709:  * ***** END LICENSE BLOCK ***** */
111709: 
111709: #ifndef jsion_ion_lowering_x86_inl_h__
111709: #define jsion_ion_lowering_x86_inl_h__
111709: 
111709: #include "ion/IonLIR-inl.h"
111709: 
111709: namespace js {
111709: namespace ion {
111709: 
111753: // Returns the virtual register of a js::Value-defining instruction. This is
111753: // abstracted because MBox is a special value-returning instruction that
111753: // redefines its input payload if its input is not constant. Therefore, it is
111753: // illegal to request a box's payload by adding VREG_DATA_OFFSET to its raw id.
111753: static inline uint32
111795: VirtualRegisterOfPayload(MDefinition *mir)
111753: {
111753:     if (mir->isBox()) {
111795:         MDefinition *inner = mir->toBox()->getOperand(0);
111920:         if (!inner->isConstant() && inner->type() != MIRType_Double)
111753:             return inner->id();
111753:     }
111753:     return mir->id() + VREG_DATA_OFFSET;
111753: }
111753: 
111709: LUse
111795: LIRGeneratorX86::useType(MDefinition *mir, LUse::Policy policy)
111709: {
111709:     JS_ASSERT(mir->id());
111709:     JS_ASSERT(mir->type() == MIRType_Value);
111709: 
111758:     return LUse(mir->id() + VREG_TYPE_OFFSET, policy);
111709: }
111709: 
111709: LUse
111795: LIRGeneratorX86::usePayload(MDefinition *mir, LUse::Policy policy)
111709: {
111709:     JS_ASSERT(mir->id());
111709:     JS_ASSERT(mir->type() == MIRType_Value);
111709: 
111753:     return LUse(VirtualRegisterOfPayload(mir), policy);
111711: }
111711: 
111711: LUse
111795: LIRGeneratorX86::usePayloadInRegister(MDefinition *mir)
111711: {
111711:     return usePayload(mir, LUse::REGISTER);
111709: }
111709: 
111720: bool
111795: LIRGeneratorX86::fillBoxUses(LInstruction *lir, size_t n, MDefinition *mir)
111709: {
111720:     if (!ensureDefined(mir))
111720:         return false;
111753:     lir->getOperand(n)->toUse()->setVirtualRegister(mir->id() + VREG_TYPE_OFFSET);
111753:     lir->getOperand(n + 1)->toUse()->setVirtualRegister(VirtualRegisterOfPayload(mir));
111720:     return true;
111709: }
111709: 
111709: } // namespace js
111709: } // namespace ion
111709: 
111709: #endif // jsion_ion_lowering_x86_h__
111709: 
