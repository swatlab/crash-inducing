    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * vim: set ts=4 sw=4 et tw=80:
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Robert Ginda <rginda@netscape.com>
55135:  *   Kris Maglione <maglione.k@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #if !defined(XPCONNECT_STANDALONE) && !defined(NO_SUBSCRIPT_LOADER)
    1: 
    1: #include "mozJSSubScriptLoader.h"
    1: 
    1: #include "nsIServiceManager.h"
    1: #include "nsIXPConnect.h"
    1: 
    1: #include "nsIURI.h"
    1: #include "nsIIOService.h"
    1: #include "nsIChannel.h"
    1: #include "nsIInputStream.h"
    1: #include "nsNetCID.h"
    1: #include "nsDependentString.h"
13211: #include "nsAutoPtr.h"
13211: #include "nsNetUtil.h"
13416: #include "nsIProtocolHandler.h"
13416: #include "nsIFileURL.h"
55135: #include "nsScriptLoader.h"
    1: 
    1: #include "jsapi.h"
13416: #include "jsdbgapi.h"
48622: #include "jsobj.h"
57692: #include "jsscript.h"
57692: #include "jscntxt.h"
    1: 
42480: #include "mozilla/FunctionTimer.h"
42480: 
    1: /* load() error msgs, XXX localize? */
    1: #define LOAD_ERROR_NOSERVICE "Error creating IO Service."
13211: #define LOAD_ERROR_NOURI "Error creating URI (invalid URL scheme?)"
13211: #define LOAD_ERROR_NOSCHEME "Failed to get URI scheme.  This is bad."
13416: #define LOAD_ERROR_URI_NOT_LOCAL "Trying to load a non-local URI."
    1: #define LOAD_ERROR_NOSTREAM  "Error opening input stream (invalid filename?)"
    1: #define LOAD_ERROR_NOCONTENT "ContentLength not available (not a local URL?)"
55135: #define LOAD_ERROR_BADCHARSET "Error converting to specified charset"
    1: #define LOAD_ERROR_BADREAD   "File Read Error."
    1: #define LOAD_ERROR_READUNDERFLOW "File Read Error (underflow.)"
13211: #define LOAD_ERROR_NOPRINCIPALS "Failed to get principals."
13211: #define LOAD_ERROR_NOSPEC "Failed to get URI spec.  This is bad."
    1: 
    1: // We just use the same reporter as the component loader
18907: extern void
    1: mozJSLoaderErrorReporter(JSContext *cx, const char *message, JSErrorReport *rep);
    1: 
    1: mozJSSubScriptLoader::mozJSSubScriptLoader() : mSystemPrincipal(nsnull)
    1: {
    1: }
    1: 
    1: mozJSSubScriptLoader::~mozJSSubScriptLoader()    
    1: {
    1:     /* empty */
    1: }
    1: 
    1: NS_IMPL_THREADSAFE_ISUPPORTS1(mozJSSubScriptLoader, mozIJSSubScriptLoader)
    1: 
    1: NS_IMETHODIMP /* args and return value are delt with using XPConnect and JSAPI */
42480: mozJSSubScriptLoader::LoadSubScript (const PRUnichar * aURL
    1:                                      /* [, JSObject *target_obj] */)
    1: {
    1:     /*
    1:      * Loads a local url and evals it into the current cx
    1:      * Synchronous (an async version would be cool too.)
    1:      *   url: The url to load.  Must be local so that it can be loaded
    1:      *        synchronously.
    1:      *   target_obj: Optional object to eval the script onto (defaults to context
    1:      *               global)
    1:      *   returns: Whatever jsval the script pointed to by the url returns.
    1:      * Should ONLY (O N L Y !) be called from JavaScript code.
    1:      */
    1:     
    1:     /* gotta define most of this stuff up here because of all the gotos,
    1:      * defined the rest up here to be consistent */
    1:     nsresult  rv;
    1:     JSBool    ok;
    1: 
42480: #ifdef NS_FUNCTION_TIMER
42480:     NS_TIME_FUNCTION_FMT("%s (line %d) (url: %s)", MOZ_FUNCTION_NAME,
42480:                          __LINE__, NS_LossyConvertUTF16toASCII(aURL).get());
42480: #else
42842:     (void)aURL; // prevent compiler warning
42480: #endif
42480: 
    1:     /* get JS things from the CallContext */
    1:     nsCOMPtr<nsIXPConnect> xpc = do_GetService(nsIXPConnect::GetCID());
    1:     if (!xpc) return NS_ERROR_FAILURE;
    1: 
10286:     nsAXPCNativeCallContext *cc = nsnull;
10286:     rv = xpc->GetCurrentNativeCallContext(&cc);
    1:     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
    1: 
    1:     JSContext *cx;
    1:     rv = cc->GetJSContext (&cx);
    1:     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
    1: 
    1:     PRUint32 argc;
    1:     rv = cc->GetArgc (&argc);
    1:     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
    1: 
    1:     jsval *argv;
    1:     rv = cc->GetArgvPtr (&argv);
    1:     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
    1: 
    1:     jsval *rval;
    1:     rv = cc->GetRetValPtr (&rval);
    1:     if (NS_FAILED(rv)) return NS_ERROR_FAILURE;    
    1: 
    1:     /* set mJSPrincipals if it's not here already */
    1:     if (!mSystemPrincipal)
    1:     {
    1:         nsCOMPtr<nsIScriptSecurityManager> secman =
    1:             do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID);
    1:         if (!secman)
    1:             return rv;
    1: 
    1:         rv = secman->GetSystemPrincipal(getter_AddRefs(mSystemPrincipal));
    1:         if (NS_FAILED(rv) || !mSystemPrincipal)
    1:             return rv;
    1:     }
    1: 
    1:     JSAutoRequest ar(cx);
    1: 
57812:     JSString *url;
    1:     JSObject *target_obj = nsnull;
55135:     jschar   *charset = nsnull;
57812:     ok = JS_ConvertArguments (cx, argc, argv, "S / o W", &url, &target_obj, &charset);
    1:     if (!ok)
    1:     {
    1:         /* let the exception raised by JS_ConvertArguments show through */
    1:         return NS_OK;
    1:     }
    1: 
57812:     JSAutoByteString urlbytes(cx, url);
57812:     if (!urlbytes)
57812:     {
57812:         return NS_OK;
57812:     }
57812: 
    1:     if (!target_obj)
    1:     {
    1:         /* if the user didn't provide an object to eval onto, find the global
    1:          * object by walking the parent chain of the calling object */
    1: 
    1: #ifdef DEBUG_rginda
    1:         JSObject *got_glob = JS_GetGlobalObject (cx);
    1:         fprintf (stderr, "JS_GetGlobalObject says glob is %p.\n", got_glob);
    1:         target_obj = JS_GetPrototype (cx, got_glob);
    1:         fprintf (stderr, "That glob's prototype is %p.\n", target_obj);
    1:         target_obj = JS_GetParent (cx, got_glob);
    1:         fprintf (stderr, "That glob's parent is %p.\n", target_obj);
    1: #endif
    1:         
    1:         nsCOMPtr<nsIXPConnectWrappedNative> wn;
    1:         rv = cc->GetCalleeWrapper (getter_AddRefs(wn));
    1:         if (NS_FAILED(rv)) return NS_ERROR_FAILURE;    
    1: 
    1:         rv = wn->GetJSObject (&target_obj);
    1:         if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
    1: 
    1: #ifdef DEBUG_rginda
    1:         fprintf (stderr, "Parent chain: %p", target_obj);
    1: #endif
    1:         JSObject *maybe_glob = JS_GetParent (cx, target_obj);
    1:         while (maybe_glob != nsnull)
    1:         {
    1: #ifdef DEBUG_rginda
    1:             fprintf (stderr, ", %p", maybe_glob);
    1: #endif
    1:             target_obj = maybe_glob;
    1:             maybe_glob = JS_GetParent (cx, maybe_glob);
    1:         }
    1: #ifdef DEBUG_rginda
    1:         fprintf (stderr, "\n");
    1: #endif  
    1:     }
    1: 
55678:     // Remember an object out of the calling compartment so that we
55678:     // can properly wrap the result later.
55678:     JSObject *result_obj = target_obj;
55678: 
    1:     // Innerize the target_obj so that we compile the loaded script in the
    1:     // correct (inner) scope.
48622:     if (JSObjectOp op = target_obj->getClass()->ext.innerObject)
    1:     {
48622:         target_obj = op(cx, target_obj);
    1:         if (!target_obj) return NS_ERROR_FAILURE;
    1: #ifdef DEBUG_rginda
    1:         fprintf (stderr, "Final global: %p\n", target_obj);
    1: #endif
    1:     }
55631:     else if (target_obj->isWrapper())
55631:     {
55631:         target_obj = target_obj->unwrap();
55631:     }
55631: 
55631:     JSAutoEnterCompartment ac;
55631:     if (!ac.enter(cx, target_obj))
55631:         return NS_ERROR_UNEXPECTED;
    1: 
    1:     /* load up the url.  From here on, failures are reflected as ``custom''
    1:      * js exceptions */
51739:     PRInt32   len = -1;
    1:     PRUint32  readcount = 0;  // Total amount of data read
    1:     PRUint32  lastReadCount = 0;  // Amount of data read in last Read() call
13211:     nsAutoArrayPtr<char> buf;
    1:     
    1:     JSString        *errmsg;
    1:     JSErrorReporter  er;
    1:     JSPrincipals    *jsPrincipals;
    1:     
    1:     nsCOMPtr<nsIChannel>     chan;
    1:     nsCOMPtr<nsIInputStream> instream;
13211:     nsCOMPtr<nsIURI> uri;
13211:     nsCAutoString uriStr;
13211:     nsCAutoString scheme;
    1: 
13416:     JSStackFrame* frame = nsnull;
13416:     JSScript* script = nsnull;
13416: 
13416:     // Figure out who's calling us
13416:     do
13416:     {
13416:         frame = JS_FrameIterator(cx, &frame);
13416: 
13416:         if (frame)
13416:             script = JS_GetFrameScript(cx, frame);
13416:     } while (frame && !script);
13416: 
13416:     if (!script)
13416:     {
13416:         // No script means we don't know who's calling, bail.
13416: 
13416:         return NS_ERROR_FAILURE;
13416:     }
13416: 
    1:     nsCOMPtr<nsIIOService> serv = do_GetService(NS_IOSERVICE_CONTRACTID);
    1:     if (!serv)
    1:     {
    1:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOSERVICE);
    1:         goto return_exception;
    1:     }
    1: 
13211:     // Make sure to explicitly create the URI, since we'll need the
13211:     // canonicalized spec.
57812:     rv = NS_NewURI(getter_AddRefs(uri), urlbytes.ptr(), nsnull, serv);
13211:     if (NS_FAILED(rv)) {
13211:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOURI);
    1:         goto return_exception;
    1:     }
    1: 
13416:     rv = uri->GetSpec(uriStr);
13416:     if (NS_FAILED(rv)) {
13416:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOSPEC);
13416:         goto return_exception;
13416:     }    
13416: 
13211:     rv = uri->GetScheme(scheme);
13416:     if (NS_FAILED(rv))
13416:     {
13211:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOSCHEME);
13211:         goto return_exception;
13211:     }
13416: 
13416:     if (!scheme.EqualsLiteral("chrome"))
13416:     {
13416:         // This might be a URI to a local file, though!
52252:         nsCOMPtr<nsIURI> innerURI = NS_GetInnermostURI(uri);
52252:         nsCOMPtr<nsIFileURL> fileURL = do_QueryInterface(innerURI);
13416:         if (!fileURL)
13416:         {
13416:             errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_URI_NOT_LOCAL);
13211:             goto return_exception;
13211:         }
13211: 
13416:         // For file URIs prepend the filename with the filename of the
13416:         // calling script, and " -> ". See bug 418356.
13416:         nsCAutoString tmp(JS_GetScriptFilename(cx, script));
13416:         tmp.AppendLiteral(" -> ");
13416:         tmp.Append(uriStr);
13416: 
13416:         uriStr = tmp;
13416:     }        
13416:         
13211:     rv = NS_OpenURI(getter_AddRefs(instream), uri, serv,
13211:                     nsnull, nsnull, nsIRequest::LOAD_NORMAL,
13211:                     getter_AddRefs(chan));
    1:     if (NS_FAILED(rv))
    1:     {
    1:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOSTREAM);
    1:         goto return_exception;
    1:     }
    1:     
    1:     rv = chan->GetContentLength (&len);
    1:     if (NS_FAILED(rv) || len == -1)
    1:     {
    1:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOCONTENT);
    1:         goto return_exception;
    1:     }
    1: 
    1:     buf = new char[len + 1];
    1:     if (!buf)
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1:     buf[len] = '\0';
    1:     
    1:     do {
    1:         rv = instream->Read (buf + readcount, len - readcount, &lastReadCount);
    1:         if (NS_FAILED(rv))
    1:         {
    1:             errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_BADREAD);
    1:             goto return_exception;
    1:         }
    1:         readcount += lastReadCount;
    1:     } while (lastReadCount && readcount != PRUint32(len));
    1:     
 3233:     if (static_cast<PRUint32>(len) != readcount)
    1:     {
    1:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_READUNDERFLOW);
    1:         goto return_exception;
    1:     }
    1: 
    1:     /* we can't hold onto jsPrincipals as a module var because the
    1:      * JSPRINCIPALS_DROP macro takes a JSContext, which we won't have in the
    1:      * destructor */
    1:     rv = mSystemPrincipal->GetJSPrincipals(cx, &jsPrincipals);
55135:     if (NS_FAILED(rv) || !jsPrincipals)
55135:     {
13211:         errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_NOPRINCIPALS);
13211:         goto return_exception;
13211:     }
13211: 
    1:     /* set our own error reporter so we can report any bad things as catchable
    1:      * exceptions, including the source/line number */
    1:     er = JS_SetErrorReporter (cx, mozJSLoaderErrorReporter);
    1: 
57692:     {
57692:         JSVersion version = cx->findVersion();
57692: 
55135:         if (charset)
55135:         {
55135:             nsString script;
57692:             rv = nsScriptLoader::ConvertToUTF16(
57692:                     nsnull, reinterpret_cast<PRUint8*>(buf.get()), len,
57692:                     nsDependentString(reinterpret_cast<PRUnichar*>(charset)), nsnull, script);
57692: 
55135:             if (NS_FAILED(rv))
55135:             {
55135:                 errmsg = JS_NewStringCopyZ (cx, LOAD_ERROR_BADCHARSET);
55135:                 goto return_exception;
55135:             }
57692:             ok = JS_EvaluateUCScriptForPrincipalsVersion(cx, target_obj, jsPrincipals,
55135:                                                          reinterpret_cast<const jschar*>(script.get()),
57692:                                                          script.Length(), uriStr.get(), 1, rval,
57692:                                                          version);
55135:         }
55135:         else
55135:         {
57692:             ok = JS_EvaluateScriptForPrincipalsVersion(cx, target_obj, jsPrincipals,
57692:                                                        buf, len, uriStr.get(), 1, rval,
57692:                                                        version);
57692:         }
55135:     }
55678: 
59157:     if (ok)
55678:     {
55678:         JSAutoEnterCompartment rac;
55678: 
55678:         if (!rac.enter(cx, result_obj) || !JS_WrapValue(cx, rval))
55678:             return NS_ERROR_UNEXPECTED; 
55678:     }
55678: 
    1:     /* repent for our evil deeds */
    1:     JS_SetErrorReporter (cx, er);
    1: 
    1:     cc->SetReturnValueWasSet (ok);
    1: 
    1:     JSPRINCIPALS_DROP(cx, jsPrincipals);
    1:     return NS_OK;
    1: 
    1:  return_exception:
    1:     JS_SetPendingException (cx, STRING_TO_JSVAL(errmsg));
    1:     return NS_OK;
    1: }
    1: 
    1: #endif /* NO_SUBSCRIPT_LOADER */
