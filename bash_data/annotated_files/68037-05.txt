    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   John Gaunt (jgaunt@netscape.com) (original author)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsHTMLWin32ObjectAccessible.h"
    1: 
67790: #include "States.h"
67790: 
33872: ////////////////////////////////////////////////////////////////////////////////
33872: // nsHTMLWin32ObjectOwnerAccessible
33872: ////////////////////////////////////////////////////////////////////////////////
    1: 
33872: nsHTMLWin32ObjectOwnerAccessible::
43504:   nsHTMLWin32ObjectOwnerAccessible(nsIContent *aContent,
43504:                                    nsIWeakReference *aShell, void *aHwnd) :
43504:   nsAccessibleWrap(aContent, aShell), mHwnd(aHwnd)
    1: {
35523:   // Our only child is a nsHTMLWin32ObjectAccessible object.
35523:   mNativeAccessible = new nsHTMLWin32ObjectAccessible(mHwnd);
    1: }
    1: 
33872: ////////////////////////////////////////////////////////////////////////////////
33872: // nsHTMLWin32ObjectOwnerAccessible: nsAccessNode implementation
33872: 
43538: void
21169: nsHTMLWin32ObjectOwnerAccessible::Shutdown()
    1: {
    1:   nsAccessibleWrap::Shutdown();
    1:   mNativeAccessible = nsnull;
    1: }
    1: 
33872: ////////////////////////////////////////////////////////////////////////////////
33872: // nsHTMLWin32ObjectOwnerAccessible: nsAccessible implementation
33872: 
52027: PRUint32
52027: nsHTMLWin32ObjectOwnerAccessible::NativeRole()
33872: {
52027:   return nsIAccessibleRole::ROLE_EMBEDDED_OBJECT;
33872: }
33872: 
67790: PRUint64
67790: nsHTMLWin32ObjectOwnerAccessible::NativeState()
33872: {
33872:   // XXX: No HWND means this is windowless plugin which is not accessible in
33872:   // the meantime.
68037:   if (mHwnd)
68037:     return nsAccessibleWrap::NativeState();
68037: 
68037:   return IsDefunct() ? states::DEFUNCT : states::UNAVAILABLE;
33872: }
33872: 
35523: ////////////////////////////////////////////////////////////////////////////////
35523: // nsHTMLWin32ObjectOwnerAccessible: nsAccessible protected implementation
35523: 
35523: void
35523: nsHTMLWin32ObjectOwnerAccessible::CacheChildren()
35523: {
47105:   if (mNativeAccessible)
47105:     AppendChild(mNativeAccessible);
35523: }
35523: 
33872: 
33872: ////////////////////////////////////////////////////////////////////////////////
33872: // nsHTMLWin32ObjectAccessible
33872: ////////////////////////////////////////////////////////////////////////////////
33872: 
    1: nsHTMLWin32ObjectAccessible::nsHTMLWin32ObjectAccessible(void* aHwnd):
    1: nsLeafAccessible(nsnull, nsnull)
    1: {
    1:   mHwnd = aHwnd;
    1:   if (mHwnd) {
    1:     // The plugin is not windowless. In this situation we use 
    1:     // use its inner child owned by the plugin so that we don't get
    1:     // in an infinite loop, where the WM_GETOBJECT's get forwarded
    1:     // back to us and create another nsHTMLWin32ObjectAccessible
    1:     HWND childWnd = ::GetWindow((HWND)aHwnd, GW_CHILD);
    1:     if (childWnd) {
    1:       mHwnd = childWnd;
    1:     }
    1:   }
    1: }
    1: 
    1: NS_IMPL_ISUPPORTS_INHERITED1(nsHTMLWin32ObjectAccessible, nsAccessible, nsIAccessibleWin32Object)
    1: 
    1: NS_IMETHODIMP nsHTMLWin32ObjectAccessible::GetHwnd(void **aHwnd) 
    1: {
    1:   *aHwnd = mHwnd;
    1:   return NS_OK;
    1: }
    1: 
