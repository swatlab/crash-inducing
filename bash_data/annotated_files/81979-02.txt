63792: /**
80292:  * Tests for parsing header fields using the syntax used in
80292:  * Content-Disposition and Content-Type
63792:  *
80292:  * See also https://bugzilla.mozilla.org/show_bug.cgi?id=609667
63792:  */
80136: const Cr = Components.results;
63792: 
80292: var BS = '\\';
80292: var DQUOTE = '"'; 
80292: 
80136: // Test array:
80292: //  - element 0: "Content-Disposition" header to test
80292: //  under RFC 2231 (email):
80292: //  - element 1: correct value returned for disposition-type (empty param name)
80292: //  - element 2: correct value for filename returned
80292: //  under RFC 5987 (HTTP):
80292: //  (note: 5987-mode not yet in use, see bug 601933)
80292: //  - element 3: correct value returned for disposition-type (empty param name)
80292: //  - element 4: correct value for filename returned 
80292: //  
80292: // 3 and 4 may be left out if they are identical
80136: 
80136: var tests = [
80136:   // No filename parameter: return nothing
80136:   ["attachment;",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
80136:   // basic
80136:   ["attachment; filename=basic",
80292:    "attachment", "basic"],
80136: 
80136:   // extended
80136:   ["attachment; filename*=UTF-8''extended",
80292:    "attachment", "extended"],
80136: 
80292:   // prefer extended to basic (bug 588781)
80136:   ["attachment; filename=basic; filename*=UTF-8''extended",
80292:    "attachment", "extended"],
80136: 
80292:   // prefer extended to basic (bug 588781)
80136:   ["attachment; filename*=UTF-8''extended; filename=basic",
80292:    "attachment", "extended"],
80136: 
80292:   // use first basic value (invalid; error recovery)
80136:   ["attachment; filename=first; filename=wrong",
80292:    "attachment", "first"],
80136: 
80136:   // old school bad HTTP servers: missing 'attachment' or 'inline'
80292:   // (invalid; error recovery)
80136:   ["filename=old",
80292:    "filename=old", "old"],
80136: 
80136:   ["attachment; filename*=UTF-8''extended",
80292:    "attachment", "extended"],
80136: 
80292:   // continuations not part of RFC 5987 (bug 610054)
80136:   ["attachment; filename*0=foo; filename*1=bar",
80292:    "attachment", "foobar",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
80292:   // Return first continuation (invalid; error recovery)
80136:   ["attachment; filename*0=first; filename*0=wrong; filename=basic",
80292:    "attachment", "first",
80292:    "attachment", "basic"],
80136: 
80292:   // Only use correctly ordered continuations  (invalid; error recovery)
80136:   ["attachment; filename*0=first; filename*1=second; filename*0=wrong",
80292:    "attachment", "firstsecond",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
80136:   // prefer continuation to basic (unless RFC 5987)
80136:   ["attachment; filename=basic; filename*0=foo; filename*1=bar",
80292:    "attachment", "foobar",
80292:    "attachment", "basic"],
80136: 
80136:   // Prefer extended to basic and/or (broken or not) continuation
80292:   // (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*0=first; filename*0=wrong; filename*=UTF-8''extended",
80292:    "attachment", "extended"],
80136: 
63792:   // RFC 2231 not clear on correct outcome: we prefer non-continued extended
80292:   // (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*=UTF-8''extended; filename*0=foo; filename*1=bar",
80292:    "attachment", "extended"],
80136: 
63792:   // Gaps should result in returning only value until gap hit
80292:   // (invalid; error recovery)
80136:   ["attachment; filename*0=foo; filename*2=bar",
80292:    "attachment", "foo",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
80292:   // Don't allow leading 0's (*01) (invalid; error recovery)
80136:   ["attachment; filename*0=foo; filename*01=bar",
80292:    "attachment", "foo",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
80136:   // continuations should prevail over non-extended (unless RFC 5987)
80136:   ["attachment; filename=basic; filename*0*=UTF-8''multi\r\n"
63792:     + " filename*1=line\r\n" 
63792:     + " filename*2*=%20extended",
80292:    "attachment", "multiline extended",
80292:    "attachment", "basic"],
80136: 
63792:   // Gaps should result in returning only value until gap hit
80292:   // (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*0*=UTF-8''multi\r\n"
63792:     + " filename*1=line\r\n" 
63792:     + " filename*3*=%20extended",
80292:    "attachment", "multiline",
80292:    "attachment", "basic"],
80136: 
80136:   // First series, only please, and don't slurp up higher elements (*2 in this
80292:   // case) from later series into earlier one (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*0*=UTF-8''multi\r\n"
80136:     + " filename*1=line\r\n" 
80136:     + " filename*0*=UTF-8''wrong\r\n"
80136:     + " filename*1=bad\r\n"
80136:     + " filename*2=evil",
80292:    "attachment", "multiline",
80292:    "attachment", "basic"],
80136: 
63792:   // RFC 2231 not clear on correct outcome: we prefer non-continued extended
80292:   // (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*0=UTF-8''multi\r\n"
63792:     + " filename*=UTF-8''extended\r\n"
63792:     + " filename*1=line\r\n" 
63792:     + " filename*2*=%20extended",
80292:    "attachment", "extended"],
80136: 
63792:   // sneaky: if unescaped, make sure we leave UTF-8'' in value
80136:   ["attachment; filename*0=UTF-8''unescaped\r\n"
63792:     + " filename*1*=%20so%20includes%20UTF-8''%20in%20value", 
80292:    "attachment", "UTF-8''unescaped so includes UTF-8'' in value",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136: 
63792:   // sneaky: if unescaped, make sure we leave UTF-8'' in value
80136:   ["attachment; filename=basic; filename*0=UTF-8''unescaped\r\n"
63792:     + " filename*1*=%20so%20includes%20UTF-8''%20in%20value", 
80292:    "attachment", "UTF-8''unescaped so includes UTF-8'' in value",
80292:    "attachment", "basic"],
80136: 
80136:   // Prefer basic over invalid continuation
80292:   // (invalid; error recovery)
80136:   ["attachment; filename=basic; filename*1=multi\r\n"
63792:     + " filename*2=line\r\n" 
63792:     + " filename*3*=%20extended",
80292:    "attachment", "basic"],
80136: 
80136:   // support digits over 10
80136:   ["attachment; filename=basic; filename*0*=UTF-8''0\r\n"
80136:     + " filename*1=1; filename*2=2;filename*3=3;filename*4=4;filename*5=5\r\n" 
80136:     + " filename*6=6; filename*7=7;filename*8=8;filename*9=9;filename*10=a\r\n"
80136:     + " filename*11=b; filename*12=c;filename*13=d;filename*14=e;filename*15=f\r\n",
80292:    "attachment", "0123456789abcdef",
80292:    "attachment", "basic"],
80136: 
80136:   // support digits over 10 (check ordering)
80136:   ["attachment; filename=basic; filename*0*=UTF-8''0\r\n"
80136:     + " filename*1=1; filename*2=2;filename*3=3;filename*4=4;filename*5=5\r\n" 
80136:     + " filename*6=6; filename*7=7;filename*8=8;filename*9=9;filename*10=a\r\n"
80136:     + " filename*11=b; filename*12=c;filename*13=d;filename*15=f;filename*14=e\r\n",
80292:    "attachment", "0123456789abcd" /* should see the 'f', see bug 588414 */,
80292:    "attachment", "basic"],
80136: 
80136:   // support digits over 10 (detect gaps)
80136:   ["attachment; filename=basic; filename*0*=UTF-8''0\r\n"
80136:     + " filename*1=1; filename*2=2;filename*3=3;filename*4=4;filename*5=5\r\n" 
80136:     + " filename*6=6; filename*7=7;filename*8=8;filename*9=9;filename*10=a\r\n"
80136:     + " filename*11=b; filename*12=c;filename*14=e\r\n",
80292:    "attachment", "0123456789abc",
80292:    "attachment", "basic"],
80136: 
80136:   // return nothing: invalid
80292:   // (invalid; error recovery)
80136:   ["attachment; filename*1=multi\r\n"
80136:     + " filename*2=line\r\n" 
80136:     + " filename*3*=%20extended",
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80136:    
80292:   // Bug 272541: Empty disposition type treated as "attachment" 
80292: 
80292:   // sanity check
80292:   ["attachment; filename=foo.html", 
80292:    "attachment", "foo.html",
80292:    "attachment", "foo.html"],
80292: 
80292:   // the actual bug
80292:   ["; filename=foo.html", 
80292:    Cr.NS_ERROR_FIRST_HEADER_FIELD_COMPONENT_EMPTY, "foo.html",
80292:    Cr.NS_ERROR_FIRST_HEADER_FIELD_COMPONENT_EMPTY, "foo.html"],
80292:   
80292:   // regression check, but see bug 671204
80292:   ["filename=foo.html", 
80292:    "filename=foo.html", "foo.html",
80292:    "filename=foo.html", "foo.html"],
80292:    
80292:   // Bug 419157: ensure that a MIME parameter with no charset information
80292:   // fallbacks to Latin-1
80292: 
80292:   ["attachment;filename=IT839\x04\xB5(m8)2.pdf;",
80292:    "attachment", "IT839\u0004\u00b5(m8)2.pdf"],
80292: 
80292:   // Bug 588389: unescaping backslashes in quoted string parameters
80292:    
80292:   // '\"', should be parsed as '"'  
80292:   ["attachment; filename=" + DQUOTE + (BS + DQUOTE) + DQUOTE, 
80292:    "attachment", DQUOTE],
80292:   
80292:   // 'a\"b', should be parsed as 'a"b'
80292:   ["attachment; filename=" + DQUOTE + 'a' + (BS + DQUOTE) + 'b' + DQUOTE, 
80292:    "attachment", "a" + DQUOTE + "b"],
80292:   
80292:   // '\x', should be parsed as 'x'
80292:   ["attachment; filename=" + DQUOTE + (BS + "x") + DQUOTE, 
80292:    "attachment", "x"],
80292:    
80292:   // test empty param (quoted-string)
80292:   ["attachment; filename=" + DQUOTE + DQUOTE, 
80292:    "attachment", ""],
80292:   
80292:   // test empty param 
80292:   ["attachment; filename=", 
80292:    "attachment", ""],    
80292:   
80292:   // Bug 651185: double quotes around 2231/5987 encoded param
81692:   // Change reverted to backwards compat issues with various web services,
81692:   // such as OWA (Bug 703015), plus similar problems in Thunderbird. If this
81692:   // is tried again in the future, email probably needs to be special-cased.
80292:   
80292:   // sanity check
80292:   ["attachment; filename*=utf-8''%41", 
80292:    "attachment", "A"],
80292: 
80292:   // the actual bug   
80292:   ["attachment; filename*=" + DQUOTE + "utf-8''%41" + DQUOTE, 
81692:    "attachment", "A"],
81692:   // previously with the fix for 651185:
81692:   // "attachment", Cr.NS_ERROR_INVALID_ARG],
80292: 
80292:   // Bug 670333: Content-Disposition parser does not require presence of "="
80292:   // in params
80292:   
80292:   // sanity check
80292:   ["attachment; filename*=UTF-8''foo-%41.html", 
80292:    "attachment", "foo-A.html"],
80292: 
80292:   // the actual bug
80292:   ["attachment; filename *=UTF-8''foo-%41.html", 
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80292:    
80292:   // the actual bug, without 2231/5987 encoding
80292:   ["attachment; filename X", 
80292:    "attachment", Cr.NS_ERROR_INVALID_ARG],
80292: 
80292:   // sanity check with WS on both sides
80292:   ["attachment; filename = foo-A.html", 
80292:    "attachment", "foo-A.html"],   
80377: 
80462:   // Bug 685192: in RFC2231/5987 encoding, a missing charset field should be
80462:   // treated as error 
80462: 
80462:   // the actual bug
80462:   ["attachment; filename*=''foo", 
81703:    "attachment", "foo"],      
81703:   // previously with the fix for 692574:
81703:   // "attachment", Cr.NS_ERROR_INVALID_ARG],      
80462: 
80462:   // sanity check
80462:   ["attachment; filename*=a''foo", 
80462:    "attachment", "foo"],      
80462: 
80377:   // Bug 692574: RFC2231/5987 decoding should not tolerate missing single
80377:   // quotes
80377: 
80377:   // one missing
80377:   ["attachment; filename*=UTF-8'foo-%41.html", 
81703:    "attachment", "foo-A.html"],
81703:   // previously with the fix for 692574:
81703:   // "attachment", Cr.NS_ERROR_INVALID_ARG],
80377: 
80377:   // both missing
80377:   ["attachment; filename*=foo-%41.html", 
81703:    "attachment","foo-A.html"],
81703:   // previously with the fix for 692574:
81703:   // "attachment", Cr.NS_ERROR_INVALID_ARG],
80377: 
80377:   // make sure fallback works
80377:   ["attachment; filename*=UTF-8'foo-%41.html; filename=bar.html", 
81703:    "attachment", "foo-A.html"],
81703:   // previously with the fix for 692574:
81703:   // "attachment", "bar.html"],
81703: 
81703:   // Bug 704989: add workaround for broken Outlook Web App (OWA)
81703:   // attachment handling
81703: 
81703:   ["attachment; filename*=\"a%20b\"", 
81703:    "attachment", "a b"],
81979: 
81979:   // Bug 717121: crash nsMIMEHeaderParamImpl::DoParameterInternal
81979: 
81979:   ["attachment; filename=\"", 
81979:    "attachment", ""], 
63792: ];
63792: 
80136: function do_tests(whichRFC)
80136: {
63792:   var mhp = Components.classes["@mozilla.org/network/mime-hdrparam;1"]
63792:                       .getService(Components.interfaces.nsIMIMEHeaderParam);
63792: 
63792:   var unused = { value : null };
63792: 
80136:   for (var i = 0; i < tests.length; ++i) {
80292:     dump("Testing #" + i + ": " + tests[i] + "\n");
80292: 
80292:     // check disposition type
80292:     var expectedDt = tests[i].length == 3 || whichRFC == 0 ? tests[i][1] : tests[i][3];
80292: 
63792:     try {
80136:       var result;
80292:       
80292:       if (whichRFC == 0)
80292:         result = mhp.getParameter(tests[i][0], "", "UTF-8", true, unused);
80136:       else 
80292:         result = mhp.getParameter5987(tests[i][0], "", "UTF-8", true, unused);
80292: 
80292:       do_check_eq(result, expectedDt);
80136:     } 
80136:     catch (e) {
80136:       // Tests can also succeed by expecting to fail with given error code
80136:       if (e.result) {
80136:         // Allow following tests to run by catching exception from do_check_eq()
80136:         try { 
80292:           do_check_eq(e.result, expectedDt); 
80292:         } catch(e) {}  
80292:       }
80292:       continue;
80292:     }
80292: 
80292:     // check filename parameter
80292:     var expectedFn = tests[i].length == 3 || whichRFC == 0 ? tests[i][2] : tests[i][4];
80292: 
80292:     try {
80292:       var result;
80292:       
80292:       if (whichRFC == 0)
80292:         result = mhp.getParameter(tests[i][0], "filename", "UTF-8", true, unused);
80292:       else 
80292:         result = mhp.getParameter5987(tests[i][0], "filename", "UTF-8", true, unused);
80292: 
80292:       do_check_eq(result, expectedFn);
80292:     } 
80292:     catch (e) {
80292:       // Tests can also succeed by expecting to fail with given error code
80292:       if (e.result) {
80292:         // Allow following tests to run by catching exception from do_check_eq()
80292:         try { 
80292:           do_check_eq(e.result, expectedFn); 
63792:         } catch(e) {}  
63792:       }
80136:       continue;
63792:     }
63792:   }
63792: }
63792: 
80136: function run_test() {
80136: 
80136:   // Test RFC 2231
80292:   do_tests(0);
80136: 
80136:   // Test RFC 5987
80292:   do_tests(1);
80136: }
80136: 
