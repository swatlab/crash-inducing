 90523: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 90523:  * vim: set ts=8 sw=4 et tw=99:
 90523:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 90523: 
 90523: #include "jsproxy.h"
 90523: 
 90523: #include "MethodGuard.h"
 90523: #include "Stack.h"
 90523: 
 90523: #include "jsfuninlines.h"
 90523: #include "jsobjinlines.h"
 90523: 
 90523: using namespace js;
 90523: 
 90523: void
 90523: js::ReportIncompatibleMethod(JSContext *cx, CallReceiver call, Class *clasp)
 90523: {
 90523:     Value &thisv = call.thisv();
 90523: 
 90523: #ifdef DEBUG
 90523:     if (thisv.isObject()) {
 90523:         JS_ASSERT(thisv.toObject().getClass() != clasp ||
 90523:                   !thisv.toObject().getProto() ||
 90523:                   thisv.toObject().getProto()->getClass() != clasp);
 90523:     } else if (thisv.isString()) {
 90523:         JS_ASSERT(clasp != &StringClass);
 90523:     } else if (thisv.isNumber()) {
 90523:         JS_ASSERT(clasp != &NumberClass);
 90523:     } else if (thisv.isBoolean()) {
 90523:         JS_ASSERT(clasp != &BooleanClass);
 90523:     } else {
 90523:         JS_ASSERT(thisv.isUndefined() || thisv.isNull());
 90523:     }
 90523: #endif
 90523: 
103274:     if (JSFunction *fun = ReportIfNotFunction(cx, call.calleev())) {
 90523:         JSAutoByteString funNameBytes;
 90523:         if (const char *funName = GetFunctionNameBytes(cx, fun, &funNameBytes)) {
 90523:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_INCOMPATIBLE_PROTO,
 90523:                                  clasp->name, funName, InformalValueTypeName(thisv));
 90523:         }
 90523:     }
 90523: }
 90523: 
 90523: bool
 90523: js::HandleNonGenericMethodClassMismatch(JSContext *cx, CallArgs args, Native native, Class *clasp)
 90523: {
 90523:     if (args.thisv().isObject()) {
 90523:         JSObject &thisObj = args.thisv().toObject();
 90523:         if (thisObj.isProxy())
 90523:             return Proxy::nativeCall(cx, &thisObj, clasp, native, args);
 90523:     }
 90523: 
 90523:     ReportIncompatibleMethod(cx, args, clasp);
 90523:     return false;
 90523: }
