 42733: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 42733:  * vim: set ts=4 sw=4 et tw=99:
 42733:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
110774:  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
110774:  */
 42733: #include <string.h>
 42733: #include "jsapi.h"
 42733: #include "jscntxt.h"
105479: #include "jsfun.h"
 68933: #include "jsgc.h"
 42733: #include "jsprvtd.h"
 42733: #include "jsnum.h"
 42733: #include "jsproxy.h"
 42733: #include "jsscope.h"
 42733: 
 97569: #include "gc/Marking.h"
 90523: 
 69640: #include "jsatominlines.h"
 77343: #include "jsinferinlines.h"
 42733: #include "jsobjinlines.h"
 42733: 
105479: #include "vm/RegExpObject-inl.h"
105479: 
 42733: using namespace js;
 54707: using namespace js::gc;
 42733: 
 91146: static inline HeapSlot &
 82129: GetCall(JSObject *proxy)
 82129: {
 79734:     JS_ASSERT(IsFunctionProxy(proxy));
 82129:     return proxy->getSlotRef(JSSLOT_PROXY_CALL);
 47498: }
 47498: 
 48470: static inline Value
 82129: GetConstruct(JSObject *proxy)
 82129: {
 83301:     if (proxy->slotSpan() <= JSSLOT_PROXY_CONSTRUCT)
 48470:         return UndefinedValue();
 47498:     return proxy->getSlot(JSSLOT_PROXY_CONSTRUCT);
 47498: }
 47498: 
 91146: static inline HeapSlot &
 82129: GetFunctionProxyConstruct(JSObject *proxy)
 82129: {
 82129:     JS_ASSERT(IsFunctionProxy(proxy));
 83301:     JS_ASSERT(proxy->slotSpan() > JSSLOT_PROXY_CONSTRUCT);
 82129:     return proxy->getSlotRef(JSSLOT_PROXY_CONSTRUCT);
 82129: }
 82129: 
108099: BaseProxyHandler::BaseProxyHandler(void *family)
108099:   : mFamily(family),
108099:     mHasPrototype(false)
 47516: {
 47516: }
 47516: 
 98728: BaseProxyHandler::~BaseProxyHandler()
 42733: {
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     *bp = !!desc.obj;
 42733:     return true;
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     *bp = !!desc.obj;
 42733:     return true;
 42733: }
 42733: 
 42733: bool
 98960: BaseProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver_, jsid id_, Value *vp)
 42733: {
 99421:     RootedObject receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 98960: 
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:         return false;
 42733:     if (!desc.obj) {
 48470:         vp->setUndefined();
 42733:         return true;
 42733:     }
 54401:     if (!desc.getter ||
 78614:         (!(desc.attrs & JSPROP_GETTER) && desc.getter == JS_PropertyStub)) {
 42733:         *vp = desc.value;
 42733:         return true;
 42733:     }
 76829:     if (desc.attrs & JSPROP_GETTER)
 76829:         return InvokeGetterOrSetter(cx, receiver, CastAsObjectJsval(desc.getter), 0, NULL, vp);
 54403:     if (!(desc.attrs & JSPROP_SHARED))
 54403:         *vp = desc.value;
 55682:     else
 55682:         vp->setUndefined();
 42745:     if (desc.attrs & JSPROP_SHORTID)
 42745:         id = INT_TO_JSID(desc.shortid);
106862: 
106862:     RootedValue value(cx, *vp);
106862:     if (!CallJSPropertyOp(cx, desc.getter, receiver, id, &value))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::getElementIfPresent(JSContext *cx, JSObject *proxy_, JSObject *receiver_, uint32_t index, Value *vp, bool *present)
 81417: {
 99421:     RootedObject proxy(cx, proxy_);
 99421:     RootedObject receiver(cx, receiver_);
 97353: 
 81417:     jsid id;
 81417:     if (!IndexToId(cx, index, &id))
 81417:         return false;
 81417: 
 81417:     if (!has(cx, proxy, id, present))
 81417:         return false;
 81417: 
 81417:     if (!*present) {
 81417:         Debug_SetValueRangeToCrashOnTouch(vp, 1);
 81417:         return true;
 81417:     }
 81417: 
 81417:     return get(cx, proxy, receiver, id, vp);
 81417: }
 81417: 
 81417: bool
104205: BaseProxyHandler::set(JSContext *cx, JSObject *proxy_, JSObject *receiver_, jsid id_, bool strict,
 62395:                       Value *vp)
 42733: {
104205:     RootedObject proxy(cx, proxy_), receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
 98960: 
 48470:     AutoPropertyDescriptorRooter desc(cx);
 55592:     if (!getOwnPropertyDescriptor(cx, proxy, id, true, &desc))
 42733:         return false;
 42745:     /* The control-flow here differs from ::get() because of the fall-through case below. */
 42733:     if (desc.obj) {
 93362:         // Check for read-only properties.
 94783:         if (desc.attrs & JSPROP_READONLY)
 94783:             return strict ? Throw(cx, id, JSMSG_CANT_REDEFINE_PROP) : true;
 64255:         if (!desc.setter) {
 88290:             // Be wary of the odd explicit undefined setter case possible through
 88290:             // Object.defineProperty.
 88290:             if (!(desc.attrs & JSPROP_SETTER))
 78614:                 desc.setter = JS_StrictPropertyStub;
 78614:         } else if ((desc.attrs & JSPROP_SETTER) || desc.setter != JS_StrictPropertyStub) {
106862:             RootedValue value(cx, *vp);
106862:             if (!CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, strict, &value))
 61920:                 return false;
106862:             *vp = value;
 79734:             if (!proxy->isProxy() || GetProxyHandler(proxy) != this)
 64253:                 return true;
 61920:             if (desc.attrs & JSPROP_SHARED)
 61920:                 return true;
 61920:         }
 88290:         if (!desc.getter) {
 88290:             // Same as above for the null setter case.
 88290:             if (!(desc.attrs & JSPROP_GETTER))
 78614:                 desc.getter = JS_PropertyStub;
 88290:         }
 42733:         desc.value = *vp;
 56817:         return defineProperty(cx, receiver, id, &desc);
 42733:     }
 55592:     if (!getPropertyDescriptor(cx, proxy, id, true, &desc))
 42733:         return false;
 42733:     if (desc.obj) {
 93362:         // Check for read-only properties.
 94783:         if (desc.attrs & JSPROP_READONLY)
 94783:             return strict ? Throw(cx, id, JSMSG_CANT_REDEFINE_PROP) : true;
 64255:         if (!desc.setter) {
 88290:             // Be wary of the odd explicit undefined setter case possible through
 88290:             // Object.defineProperty.
 88290:             if (!(desc.attrs & JSPROP_SETTER))
 78614:                 desc.setter = JS_StrictPropertyStub;
 78614:         } else if ((desc.attrs & JSPROP_SETTER) || desc.setter != JS_StrictPropertyStub) {
106862:             RootedValue value(cx, *vp);
106862:             if (!CallSetter(cx, receiver, id, desc.setter, desc.attrs, desc.shortid, strict, &value))
 61920:                 return false;
106862:             *vp = value;
 79734:             if (!proxy->isProxy() || GetProxyHandler(proxy) != this)
 64253:                 return true;
 61920:             if (desc.attrs & JSPROP_SHARED)
 61920:                 return true;
 61920:         }
 88290:         if (!desc.getter) {
 88290:             // Same as above for the null setter case.
 88290:             if (!(desc.attrs & JSPROP_GETTER))
 78614:                 desc.getter = JS_PropertyStub;
 88290:         }
101616:         desc.value = *vp;
 62340:         return defineProperty(cx, receiver, id, &desc);
 42733:     }
 61920: 
 56817:     desc.obj = receiver;
 42733:     desc.value = *vp;
 55701:     desc.attrs = JSPROP_ENUMERATE;
 42733:     desc.shortid = 0;
 62412:     desc.getter = NULL;
 62412:     desc.setter = NULL; // Pick up the class getter/setter.
 56817:     return defineProperty(cx, receiver, id, &desc);
 42733: }
 42733: 
 42733: bool
 98728: BaseProxyHandler::keys(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 42733: {
 47460:     JS_ASSERT(props.length() == 0);
 47460: 
 47474:     if (!getOwnPropertyNames(cx, proxy, props))
 42733:         return false;
 47460: 
 47474:     /* Select only the enumerable properties through in-place iteration. */
 48470:     AutoPropertyDescriptorRooter desc(cx);
 47474:     size_t i = 0;
 47474:     for (size_t j = 0, len = props.length(); j < len; j++) {
 47474:         JS_ASSERT(i <= j);
 47474:         jsid id = props[j];
 55592:         if (!getOwnPropertyDescriptor(cx, proxy, id, false, &desc))
 42733:             return false;
 47474:         if (desc.obj && (desc.attrs & JSPROP_ENUMERATE))
 47474:             props[i++] = id;
 42733:     }
 47460: 
 47474:     JS_ASSERT(i <= props.length());
 47474:     props.resize(i);
 47474: 
 42733:     return true;
 42733: }
 42733: 
 43190: bool
 98728: BaseProxyHandler::iterate(JSContext *cx, JSObject *proxy_, unsigned flags, Value *vp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
 95355: 
 48470:     AutoIdVector props(cx);
 57305:     if ((flags & JSITER_OWNONLY)
 60532:         ? !keys(cx, proxy, props)
 57305:         : !enumerate(cx, proxy, props)) {
 43190:         return false;
 57305:     }
106862: 
106862:     RootedValue value(cx);
106862:     if (!EnumeratedIdVectorToIterator(cx, proxy, flags, props, &value))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 43190: }
 43190: 
 98728: bool
 98728: BaseProxyHandler::call(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                        Value *vp)
 47498: {
120323:     AutoValueRooter rval(cx);
120323:     JSBool ok = Invoke(cx, vp[1], GetCall(proxy), argc, JS_ARGV(cx, vp), rval.addr());
120323:     if (ok)
120323:         JS_SET_RVAL(cx, vp, rval.value());
120323:     return ok;
 98728: }
 47498: 
 98728: bool
 98728: BaseProxyHandler::construct(JSContext *cx, JSObject *proxy, unsigned argc,
 98728:                             Value *argv, Value *rval)
 98728: {
120323:     Value fval = GetConstruct(proxy);
120323:     if (fval.isUndefined())
120323:         fval = GetCall(proxy);
120323:     return InvokeConstructor(cx, fval, argc, argv, rval);
 47498: }
 47498: 
 47498: JSString *
 98728: BaseProxyHandler::obj_toString(JSContext *cx, JSObject *proxy)
 47498: {
 98728:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
 98728:                          JSMSG_INCOMPATIBLE_PROTO,
 98728:                          js_Object_str, js_toString_str,
 98728:                          "object");
 98728:     return NULL;
 98728: }
 98728: 
 98728: JSString *
 98728: BaseProxyHandler::fun_toString(JSContext *cx, JSObject *proxy, unsigned indent)
 98728: {
 47498:     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
 47498:                          JSMSG_INCOMPATIBLE_PROTO,
 47498:                          js_Function_str, js_toString_str,
 47498:                          "object");
 47498:     return NULL;
 47498: }
 47498: 
 90851: bool
 98728: BaseProxyHandler::regexp_toShared(JSContext *cx, JSObject *proxy,
 98728:                                   RegExpGuard *g)
 89376: {
 89376:     JS_NOT_REACHED("This should have been a wrapped regexp");
 90851:     return false;
 89376: }
 89376: 
 47498: bool
 98728: BaseProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint,
 98728:                                Value *vp)
 72054: {
102586:     Rooted<JSObject*> obj(cx, proxy);
106862:     RootedValue value(cx);
106862:     if (!DefaultValue(cx, obj, hint, &value))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 72054: }
 72054: 
 72054: bool
 98728: BaseProxyHandler::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 89623: {
 89623:     vp->setMagic(JS_NO_ITER_VALUE);
 89623:     return true;
 89623: }
 89623: 
 89623: bool
105479: BaseProxyHandler::nativeCall(JSContext *cx, IsAcceptableThis test, NativeImpl impl, CallArgs args)
 47498: {
105479:     ReportIncompatible(cx, args);
 98728:     return false;
 98728: }
 98728: 
 98728: bool
111462: BaseProxyHandler::hasInstance(JSContext *cx, HandleObject proxy, MutableHandleValue v, bool *bp)
 98728: {
111462:     RootedValue val(cx, ObjectValue(*proxy.get()));
 98728:     js_ReportValueError(cx, JSMSG_BAD_INSTANCEOF_RHS,
108174:                         JSDVG_SEARCH_STACK, val, NullPtr());
 98728:     return false;
 98728: }
 98728: 
 98728: JSType
 98728: BaseProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     return IsFunctionProxy(proxy) ? JSTYPE_FUNCTION : JSTYPE_OBJECT;
 98728: }
 98728: 
 98728: bool
 98728: BaseProxyHandler::objectClassIs(JSObject *proxy, ESClassValue classValue, JSContext *cx)
 98728: {
 98728:     return false;
 98728: }
 98728: 
 98728: void
 98728: BaseProxyHandler::finalize(JSFreeOp *fop, JSObject *proxy)
 98728: {
 98728: }
 98728: 
119273: JSObject *
119273: BaseProxyHandler::weakmapKeyDelegate(JSObject *proxy)
119273: {
119273:     return NULL;
119273: }
119273: 
108099: bool
108099: BaseProxyHandler::getPrototypeOf(JSContext *cx, JSObject *proxy, JSObject **proto)
108099: {
108099:     // The default implementation here just uses proto of the proxy object.
115021:     *proto = proxy->getTaggedProto().toObjectOrNull();
108099:     return true;
108099: }
108099: 
 98728: 
 98728: bool
120326: DirectProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy,
 98728:                                           jsid id, bool set,
 98728:                                           PropertyDescriptor *desc)
 98728: {
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     return JS_GetPropertyDescriptorById(cx, target, id, JSRESOLVE_QUALIFIED, desc);
 98728: }
 98728: 
 98728: static bool
104384: GetOwnPropertyDescriptor(JSContext *cx, HandleObject obj, jsid id, unsigned flags,
 99110:                          JSPropertyDescriptor *desc)
 98728: {
 98728:     // If obj is a proxy, we can do better than just guessing. This is
 98728:     // important for certain types of wrappers that wrap other wrappers.
 98728:     if (obj->isProxy())
 99110:         return Proxy::getOwnPropertyDescriptor(cx, obj, id,
 99110:                                                flags & JSRESOLVE_ASSIGNING,
 99110:                                                desc);
 98728: 
 98728:     if (!JS_GetPropertyDescriptorById(cx, obj, id, flags, desc))
 98728:         return false;
 98728:     if (desc->obj != obj)
 98728:         desc->obj = NULL;
 98728:     return true;
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy,
 98728:                                              jsid id, bool set,
 98728:                                              PropertyDescriptor *desc)
 98728: {
104384:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     return GetOwnPropertyDescriptor(cx, target, id, JSRESOLVE_QUALIFIED, desc);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::defineProperty(JSContext *cx, JSObject *proxy, jsid id_,
 98728:                                    PropertyDescriptor *desc)
 98728: {
101861:     RootedObject obj(cx, GetProxyTargetObject(proxy));
102586:     Rooted<jsid> id(cx, id_);
102586:     Rooted<Value> v(cx, desc->value);
102586:     return CheckDefineProperty(cx, obj, id, v, desc->getter, desc->setter, desc->attrs) &&
102586:            JS_DefinePropertyById(cx, obj, id, v, desc->getter, desc->setter, desc->attrs);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy,
 98728:                                         AutoIdVector &props)
 98728: {
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     return GetPropertyNames(cx, target, JSITER_OWNONLY | JSITER_HIDDEN, &props);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 98728: {
 98728:     Value v;
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     if (!JS_DeletePropertyById2(cx, target, id, &v))
 98728:         return false;
 98728:     JSBool b;
 98728:     if (!JS_ValueToBoolean(cx, v, &b))
 98728:         return false;
 98728:     *bp = !!b;
 98728:     return true;
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::enumerate(JSContext *cx, JSObject *proxy,
 98728:                               AutoIdVector &props)
 98728: {
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     return GetPropertyNames(cx, target, 0, &props);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::nativeCall(JSContext *cx, IsAcceptableThis test, NativeImpl impl,
105479:                                CallArgs args)
 79388: {
108174:     args.setThis(ObjectValue(*GetProxyTargetObject(&args.thisv().toObject())));
105479:     if (!test(args.thisv())) {
105479:         ReportIncompatible(cx, args);
105479:         return false;
105479:     }
105479: 
105479:     return CallNativeImpl(cx, impl, args);
 79388: }
 79388: 
 79388: bool
120326: DirectProxyHandler::hasInstance(JSContext *cx, HandleObject proxy, MutableHandleValue v,
 98728:                                 bool *bp)
 55650: {
 98728:     JSBool b;
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
111462:     if (!JS_HasInstance(cx, target, v, &b))
 55650:         return false;
 98728:     *bp = !!b;
 98728:     return true;
 55650: }
 55650: 
 57775: JSType
120326: DirectProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 57775: {
 98728:     return TypeOfValue(cx, ObjectValue(*GetProxyTargetObject(proxy)));
 57775: }
 57775: 
 79390: bool
120326: DirectProxyHandler::objectClassIs(JSObject *proxy, ESClassValue classValue,
 98728:                                   JSContext *cx)
 79390: {
 98728:     return ObjectClassIs(*GetProxyTargetObject(proxy), classValue, cx);
 98728: }
 98728: 
 98728: JSString *
120326: DirectProxyHandler::obj_toString(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     return obj_toStringHelper(cx, GetProxyTargetObject(proxy));
 98728: }
 98728: 
 98728: JSString *
120326: DirectProxyHandler::fun_toString(JSContext *cx, JSObject *proxy,
 98728:                                  unsigned indent)
 98728: {
116202:     RootedObject target(cx, GetProxyTargetObject(proxy));
116202:     return fun_toStringHelper(cx, target, indent);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::regexp_toShared(JSContext *cx, JSObject *proxy,
 98728:                                     RegExpGuard *g)
 98728: {
 98728:     return RegExpToShared(cx, *GetProxyTargetObject(proxy), g);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint,
 98728:                                  Value *vp)
 98728: {
 98728:     *vp = ObjectValue(*GetProxyTargetObject(proxy));
 98728:     if (hint == JSTYPE_VOID)
 98728:         return ToPrimitive(cx, vp);
 98728:     return ToPrimitive(cx, hint, vp);
 98728: }
 98728: 
 98728: bool
120326: DirectProxyHandler::iteratorNext(JSContext *cx, JSObject *proxy, Value *vp)
 98728: {
102586:     Rooted<JSObject*> target(cx, GetProxyTargetObject(proxy));
106862:     RootedValue value(cx);
106862:     if (!js_IteratorMore(cx, target, &value))
 79390:         return false;
106862:     *vp = value;
 98728:     if (vp->toBoolean()) {
 98728:         *vp = cx->iterValue;
102586:         cx->iterValue = UndefinedValue();
102586:     } else {
102586:         *vp = MagicValue(JS_NO_ITER_VALUE);
102586:     }
 98728:     return true;
 79390: }
 79390: 
119273: JSObject *
120326: DirectProxyHandler::weakmapKeyDelegate(JSObject *proxy)
119273: {
119273:     return UnwrapObject(proxy);
119273: }
119273: 
102586: DirectProxyHandler::DirectProxyHandler(void *family)
120326:   : BaseProxyHandler(family)
 99110: {
 99110: }
 99110: 
 99110: bool
102586: DirectProxyHandler::has(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 99110: {
 99110:     JSBool found;
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
107154:     if (!JS_HasPropertyById(cx, target, id, &found))
 99110:         return false;
 99110:     *bp = !!found;
 99110:     return true;
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp)
 99110: {
107154:     RootedObject target(cx, GetProxyTargetObject(proxy));
105533:     AutoPropertyDescriptorRooter desc(cx);
107154:     if (!JS_GetPropertyDescriptorById(cx, target, id, JSRESOLVE_QUALIFIED, &desc))
 99110:         return false;
 99110:     *bp = (desc.obj == target);
 99110:     return true;
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::get(JSContext *cx, JSObject *proxy, JSObject *receiver_,
 99110:                         jsid id_, Value *vp)
 99110: {
 99421:     RootedObject receiver(cx, receiver_);
 99421:     RootedId id(cx, id_);
106862:     RootedValue value(cx);
108951:     RootedObject target(cx, GetProxyTargetObject(proxy));
108951:     if (!JSObject::getGeneric(cx, target, receiver, id, &value))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 99110: }
 99110: 
 99110: bool
103345: DirectProxyHandler::set(JSContext *cx, JSObject *proxy, JSObject *receiverArg,
 99110:                         jsid id_, bool strict, Value *vp)
 99110: {
 99421:     RootedId id(cx, id_);
103345:     Rooted<JSObject*> receiver(cx, receiverArg);
106862:     RootedValue value(cx, *vp);
108951:     RootedObject target(cx, GetProxyTargetObject(proxy));
108951:     if (!JSObject::setGeneric(cx, target, receiver, id, &value, strict))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::keys(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 99110: {
107154:     return GetPropertyNames(cx, GetProxyTargetObject(proxy), JSITER_OWNONLY, &props);
 99110: }
 99110: 
 99110: bool
 99110: DirectProxyHandler::iterate(JSContext *cx, JSObject *proxy, unsigned flags,
 99110:                             Value *vp)
 99110: {
102586:     Rooted<JSObject*> target(cx, GetProxyTargetObject(proxy));
106862:     RootedValue value(cx);
106862:     if (!GetIterator(cx, target, flags, &value))
106862:         return false;
106862: 
106862:     *vp = value;
106862:     return true;
 99110: }
 99110: 
 42733: static bool
110774: GetFundamentalTrap(JSContext *cx, HandleObject handler, HandlePropertyName name,
110774:                    MutableHandleValue fvalp)
 42733: {
 55484:     JS_CHECK_RECURSION(cx, return false);
 55484: 
108951:     return JSObject::getProperty(cx, handler, handler, name, fvalp);
 42733: }
 42733: 
 42733: static bool
110774: GetDerivedTrap(JSContext *cx, HandleObject handler, HandlePropertyName name,
110774:                MutableHandleValue fvalp)
 43190: {
114207:     JS_ASSERT(name == cx->names().has ||
114207:               name == cx->names().hasOwn ||
114207:               name == cx->names().get ||
114207:               name == cx->names().set ||
114207:               name == cx->names().keys ||
114207:               name == cx->names().iterate);
 43190: 
110774:     return JSObject::getProperty(cx, handler, handler, name, fvalp);
 43190: }
 43190: 
 43190: static bool
 97353: Trap(JSContext *cx, HandleObject handler, HandleValue fval, unsigned argc, Value* argv, Value *rval)
 42733: {
 76829:     return Invoke(cx, ObjectValue(*handler), fval, argc, argv, rval);
 42733: }
 42733: 
 42733: static bool
104205: Trap1(JSContext *cx, HandleObject handler, HandleValue fval, HandleId id, Value *rval)
 43189: {
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43189:     if (!str)
 43189:         return false;
 48470:     rval->setString(str);
 43190:     return Trap(cx, handler, fval, 1, rval, rval);
 43189: }
 43189: 
 43189: static bool
104205: Trap2(JSContext *cx, HandleObject handler, HandleValue fval, HandleId id, Value v_, Value *rval)
 43189: {
104205:     RootedValue v(cx, v_);
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43189:     if (!str)
 43189:         return false;
 48470:     rval->setString(str);
 48470:     Value argv[2] = { *rval, v };
104205:     AutoValueArray ava(cx, argv, 2);
 43190:     return Trap(cx, handler, fval, 2, argv, rval);
 43189: }
 43189: 
 43189: static bool
104205: ParsePropertyDescriptorObject(JSContext *cx, HandleObject obj, const Value &v,
110774:                               PropertyDescriptor *desc, bool complete = false)
 42733: {
 48470:     AutoPropDescArrayRooter descs(cx);
 48470:     PropDesc *d = descs.append();
 64250:     if (!d || !d->initialize(cx, v))
 42733:         return false;
110774:     if (complete)
110774:         d->complete();
 42733:     desc->obj = obj;
 97047:     desc->value = d->hasValue() ? d->value() : UndefinedValue();
 97047:     JS_ASSERT(!(d->attributes() & JSPROP_SHORTID));
 97047:     desc->attrs = d->attributes();
 42733:     desc->getter = d->getter();
 42733:     desc->setter = d->setter();
 42733:     desc->shortid = 0;
 42733:     return true;
 42733: }
 42733: 
 42733: static bool
115733: IndicatePropertyNotFound(PropertyDescriptor *desc)
 61441: {
 61441:     desc->obj = NULL;
 61441:     return true;
 61441: }
 61441: 
 61441: static bool
115733: ValueToBool(const Value &v, bool *bp)
 42733: {
106378:     *bp = ToBoolean(v);
 43190:     return true;
 42733: }
 42733: 
 77817: static bool
 48470: ArrayToIdVector(JSContext *cx, const Value &array, AutoIdVector &props)
 42733: {
 47460:     JS_ASSERT(props.length() == 0);
 47460: 
 48470:     if (array.isPrimitive())
 47460:         return true;
 42733: 
107557:     RootedObject obj(cx, &array.toObject());
 91688:     uint32_t length;
108951:     if (!GetLengthProperty(cx, obj, &length))
 42733:         return false;
 47460: 
106862:     RootedValue v(cx);
 91688:     for (uint32_t n = 0; n < length; ++n) {
 59904:         if (!JS_CHECK_OPERATION_LIMIT(cx))
 59904:             return false;
108951:         if (!JSObject::getElement(cx, obj, obj, n, &v))
 42733:             return false;
 78347:         jsid id;
 78347:         if (!ValueToId(cx, v, &id))
 42733:             return false;
 97828:         if (!props.append(id))
 42733:             return false;
 42733:     }
 47460: 
 42733:     return true;
 42733: }
 42733: 
110774: /* Derived class for all scripted indirect proxy handlers. */
120324: class ScriptedIndirectProxyHandler : public BaseProxyHandler {
 43190:   public:
110774:     ScriptedIndirectProxyHandler();
110774:     virtual ~ScriptedIndirectProxyHandler();
 43190: 
 43190:     /* ES5 Harmony fundamental proxy traps. */
 55592:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
110774:                                        PropertyDescriptor *desc) MOZ_OVERRIDE;
 55592:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
110774:                                           PropertyDescriptor *desc) MOZ_OVERRIDE;
 43190:     virtual bool defineProperty(JSContext *cx, JSObject *proxy, jsid id,
110774:                                 PropertyDescriptor *desc) MOZ_OVERRIDE;
 48470:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props);
110774:     virtual bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props) MOZ_OVERRIDE;
 43190: 
 43190:     /* ES5 Harmony derived proxy traps. */
110774:     virtual bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id,
110774:                      Value *vp) MOZ_OVERRIDE;
 62395:     virtual bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, bool strict,
110774:                      Value *vp) MOZ_OVERRIDE;
110774:     virtual bool keys(JSContext *cx, JSObject *proxy, AutoIdVector &props) MOZ_OVERRIDE;
110774:     virtual bool iterate(JSContext *cx, JSObject *proxy, unsigned flags, Value *vp) MOZ_OVERRIDE;
 43190: 
105547:     /* Spidermonkey extensions. */
110774:     virtual bool nativeCall(JSContext *cx, IsAcceptableThis test, NativeImpl impl,
110774:                             CallArgs args) MOZ_OVERRIDE;
 98728:     virtual JSType typeOf(JSContext *cx, JSObject *proxy);
110774:     virtual bool defaultValue(JSContext *cx, JSObject *obj, JSType hint, Value *vp) MOZ_OVERRIDE;
110774: 
110774:     static ScriptedIndirectProxyHandler singleton;
 43190: };
 43190: 
110774: static int sScriptedIndirectProxyHandlerFamily = 0;
110774: 
110774: ScriptedIndirectProxyHandler::ScriptedIndirectProxyHandler()
120324:         : BaseProxyHandler(&sScriptedIndirectProxyHandlerFamily)
 43190: {
 43190: }
 43190: 
110774: ScriptedIndirectProxyHandler::~ScriptedIndirectProxyHandler()
 43190: {
 43190: }
 43190: 
 43211: static bool
 48470: ReturnedValueMustNotBePrimitive(JSContext *cx, JSObject *proxy, JSAtom *atom, const Value &v)
 43211: {
 48470:     if (v.isPrimitive()) {
 57812:         JSAutoByteString bytes;
 57812:         if (js_AtomToPrintableString(cx, atom, &bytes)) {
108174:             RootedValue val(cx, ObjectOrNullValue(proxy));
 43211:             js_ReportValueError2(cx, JSMSG_BAD_TRAP_RETURN_VALUE,
108174:                                  JSDVG_SEARCH_STACK, val, NullPtr(), bytes.ptr());
 57812:         }
 43211:         return false;
 43211:     }
 43211:     return true;
 43211: }
 43211: 
 43279: static JSObject *
115733: GetIndirectProxyHandlerObject(JSObject *proxy)
 43279: {
 79734:     return GetProxyPrivate(proxy).toObjectOrNull();
 43279: }
 43279: 
 43190: bool
110774: ScriptedIndirectProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_, bool set,
 48470:                                                     PropertyDescriptor *desc)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     return GetFundamentalTrap(cx, handler, cx->names().getPropertyDescriptor, &fval) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
115733:            ((value.get().isUndefined() && IndicatePropertyNotFound(desc)) ||
114207:             (ReturnedValueMustNotBePrimitive(cx, proxy, cx->names().getPropertyDescriptor, value) &&
104205:              ParsePropertyDescriptorObject(cx, proxy, value, desc)));
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_, bool set,
 48470:                                                        PropertyDescriptor *desc)
 43190: {
 99421:     RootedId id(cx, id_);
 99421:     RootedObject proxy(cx, proxy_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     return GetFundamentalTrap(cx, handler, cx->names().getOwnPropertyDescriptor, &fval) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
115733:            ((value.get().isUndefined() && IndicatePropertyNotFound(desc)) ||
114207:             (ReturnedValueMustNotBePrimitive(cx, proxy, cx->names().getPropertyDescriptor, value) &&
104205:              ParsePropertyDescriptorObject(cx, proxy, value, desc)));
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::defineProperty(JSContext *cx, JSObject *proxy, jsid id_,
 48470:                                              PropertyDescriptor *desc)
 43190: {
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
 99421:     RootedId id(cx, id_);
114207:     return GetFundamentalTrap(cx, handler, cx->names().defineProperty, &fval) &&
 97353:            NewPropertyDescriptorObject(cx, desc, value.address()) &&
 97353:            Trap2(cx, handler, fval, id, value, value.address());
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy,
110774:                                                   AutoIdVector &props)
 43190: {
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     return GetFundamentalTrap(cx, handler, cx->names().getOwnPropertyNames, &fval) &&
 97353:            Trap(cx, handler, fval, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::delete_(JSContext *cx, JSObject *proxy, jsid id_, bool *bp)
 43190: {
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
104205:     RootedId id(cx, id_);
 99421:     RootedValue fval(cx), value(cx);
114207:     return GetFundamentalTrap(cx, handler, cx->names().delete_, &fval) &&
 97353:            Trap1(cx, handler, fval, id, value.address()) &&
115733:            ValueToBool(value, bp);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props)
 43190: {
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     return GetFundamentalTrap(cx, handler, cx->names().enumerate, &fval) &&
 97353:            Trap(cx, handler, fval, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::has(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
104205:     RootedId id(cx, id_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().has, &fval))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::has(cx, proxy, id, bp);
 97353:     return Trap1(cx, handler, fval, id, value.address()) &&
115733:            ValueToBool(value, bp);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::hasOwn(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
104205:     RootedId id(cx, id_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue fval(cx), value(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().hasOwn, &fval))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::hasOwn(cx, proxy, id, bp);
 97353:     return Trap1(cx, handler, fval, id, value.address()) &&
115733:            ValueToBool(value, bp);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::get(JSContext *cx, JSObject *proxy_, JSObject *receiver_, jsid id_,
110774:                                   Value *vp)
 43190: {
 99421:     RootedId id(cx, id_);
104205:     RootedObject proxy(cx, proxy_), receiver(cx, receiver_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43190:     if (!str)
 43190:         return false;
 99421:     RootedValue value(cx, StringValue(str));
 97353:     Value argv[] = { ObjectOrNullValue(receiver), value };
104205:     AutoValueArray ava(cx, argv, 2);
 99421:     RootedValue fval(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().get, &fval))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::get(cx, proxy, receiver, id, vp);
 97353:     return Trap(cx, handler, fval, 2, argv, vp);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::set(JSContext *cx, JSObject *proxy_, JSObject *receiver_, jsid id_, bool strict,
 62395:                                   Value *vp)
 43190: {
 99421:     RootedId id(cx, id_);
104205:     RootedObject proxy(cx, proxy_), receiver(cx, receiver_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 84160:     JSString *str = ToString(cx, IdToValue(id));
 43190:     if (!str)
 43190:         return false;
 99421:     RootedValue value(cx, StringValue(str));
 97353:     Value argv[] = { ObjectOrNullValue(receiver), value, *vp };
104205:     AutoValueArray ava(cx, argv, 3);
 99421:     RootedValue fval(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().set, &fval))
 43190:         return false;
 97353:     if (!js_IsCallable(fval))
 98728:         return BaseProxyHandler::set(cx, proxy, receiver, id, strict, vp);
 97353:     return Trap(cx, handler, fval, 3, argv, value.address());
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::keys(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue value(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().keys, &value))
 43190:         return false;
 97353:     if (!js_IsCallable(value))
 98728:         return BaseProxyHandler::keys(cx, proxy, props);
 97353:     return Trap(cx, handler, value, 0, NULL, value.address()) &&
 97353:            ArrayToIdVector(cx, value, props);
 43190: }
 43190: 
 43190: bool
110774: ScriptedIndirectProxyHandler::iterate(JSContext *cx, JSObject *proxy_, unsigned flags, Value *vp)
 43190: {
 99421:     RootedObject proxy(cx, proxy_);
115733:     RootedObject handler(cx, GetIndirectProxyHandlerObject(proxy));
 99421:     RootedValue value(cx);
114207:     if (!GetDerivedTrap(cx, handler, cx->names().iterate, &value))
 43190:         return false;
 97353:     if (!js_IsCallable(value))
 98728:         return BaseProxyHandler::iterate(cx, proxy, flags, vp);
 97353:     return Trap(cx, handler, value, 0, NULL, vp) &&
114207:            ReturnedValueMustNotBePrimitive(cx, proxy, cx->names().iterate, *vp);
 43190: }
 43190: 
105547: bool
110774: ScriptedIndirectProxyHandler::nativeCall(JSContext *cx, IsAcceptableThis test, NativeImpl impl,
105547:                                          CallArgs args)
105547: {
105547:     return BaseProxyHandler::nativeCall(cx, test, impl, args);
105547: }
105547: 
105547: 
 98728: JSType
110774: ScriptedIndirectProxyHandler::typeOf(JSContext *cx, JSObject *proxy)
 98728: {
 98728:     /*
 98728:      * This function is only here to prevent a regression in
 98728:      * js1_8_5/extensions/scripted-proxies.js. It will be removed when the
 98728:      * direct proxy refactor is complete.
 98728:      */
 99117:     return BaseProxyHandler::typeOf(cx, proxy);
 99117: }
 99117: 
 99117: bool
110774: ScriptedIndirectProxyHandler::defaultValue(JSContext *cx, JSObject *proxy, JSType hint, Value *vp)
 99117: {
 99117:     /*
 99117:      * This function is only here to prevent bug 757063. It will be removed when
 99117:      * the direct proxy refactor is complete.
 99117:      */
 99117:     return BaseProxyHandler::defaultValue(cx, proxy, hint, vp);
 98728: }
 98728: 
110774: ScriptedIndirectProxyHandler ScriptedIndirectProxyHandler::singleton;
110774: 
110774: static JSObject *
110774: GetDirectProxyHandlerObject(JSObject *proxy)
110774: {
110774:     return GetProxyExtra(proxy, 0).toObjectOrNull();
110774: }
110774: 
110774: /* Derived class for all scripted direct proxy handlers. */
110774: class ScriptedDirectProxyHandler : public DirectProxyHandler {
 43279:   public:
110774:     ScriptedDirectProxyHandler();
110774:     virtual ~ScriptedDirectProxyHandler();
110774: 
110774:     /* ES5 Harmony fundamental proxy traps. */
110774:     virtual bool getPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
110774:                                        PropertyDescriptor *desc) MOZ_OVERRIDE;
110774:     virtual bool getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy, jsid id, bool set,
110774:                                           PropertyDescriptor *desc) MOZ_OVERRIDE;
110774:     virtual bool defineProperty(JSContext *cx, JSObject *proxy, jsid id,
110774:                                 PropertyDescriptor *desc) MOZ_OVERRIDE;
110774:     virtual bool getOwnPropertyNames(JSContext *cx, JSObject *proxy, AutoIdVector &props);
110774:     virtual bool delete_(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool enumerate(JSContext *cx, JSObject *proxy, AutoIdVector &props) MOZ_OVERRIDE;
110774: 
110774:     /* ES5 Harmony derived proxy traps. */
110774:     virtual bool has(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool hasOwn(JSContext *cx, JSObject *proxy, jsid id, bool *bp) MOZ_OVERRIDE;
110774:     virtual bool get(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id,
110774:                      Value *vp) MOZ_OVERRIDE;
110774:     virtual bool set(JSContext *cx, JSObject *proxy, JSObject *receiver, jsid id, bool strict,
110774:                      Value *vp) MOZ_OVERRIDE;
110774:     virtual bool keys(JSContext *cx, JSObject *proxy, AutoIdVector &props) MOZ_OVERRIDE;
110774:     virtual bool iterate(JSContext *cx, JSObject *proxy, unsigned flags, Value *vp) MOZ_OVERRIDE;
110774: 
110774:     virtual bool call(JSContext *cx, JSObject *proxy, unsigned argc, Value *vp) MOZ_OVERRIDE;
110774:     virtual bool construct(JSContext *cx, JSObject *proxy, unsigned argc, Value *argv,
110774:                            Value *rval) MOZ_OVERRIDE;
110774: 
110774:     static ScriptedDirectProxyHandler singleton;
110774: };
110774: 
110774: static int sScriptedDirectProxyHandlerFamily = 0;
110774: 
110774: // Aux.2 FromGenericPropertyDescriptor(Desc)
110774: static bool
110774: FromGenericPropertyDescriptor(JSContext *cx, PropDesc *desc, MutableHandleValue rval)
 97353: {
110774:     // Aux.2 step 1
110774:     if (desc->isUndefined()) {
110774:         rval.setUndefined();
110774:         return true;
 43279:     }
 43279: 
110774:     // steps 3-9
110774:     if (!desc->makeObject(cx))
110774:         return false;
110774:     rval.set(desc->pd());
110774:     return true;
 43279: }
110774: 
110774: /*
110774:  * Aux.3 NormalizePropertyDescriptor(Attributes)
110774:  *
110774:  * NOTE: to minimize code duplication, the code for this function is shared with
110774:  * that for Aux.4 NormalizeAndCompletePropertyDescriptor (see below). The
110774:  * argument complete is used to distinguish between the two.
110774:  */
110774: static bool
110774: NormalizePropertyDescriptor(JSContext *cx, MutableHandleValue vp, bool complete = false)
110774: {
110774:     // Aux.4 step 1
110774:     if (complete && vp.isUndefined())
110774:         return true;
110774: 
110774:     // Aux.3 steps 1-2 / Aux.4 steps 2-3
110774:     AutoPropDescArrayRooter descs(cx);
110774:     PropDesc *desc = descs.append();
110774:     if (!desc || !desc->initialize(cx, vp.get()))
110774:         return false;
110774:     if (complete)
110774:         desc->complete();
110774:     JS_ASSERT(!vp.isPrimitive()); // due to desc->initialize
110774:     RootedObject attributes(cx, &vp.toObject());
110774: 
110774:     /*
110774:      * Aux.3 step 3 / Aux.4 step 4
110774:      *
110774:      * NOTE: Aux.4 step 4 actually specifies FromPropertyDescriptor here.
110774:      * However, the way FromPropertyDescriptor is implemented (PropDesc::
110774:      * makeObject) is actually closer to FromGenericPropertyDescriptor,
110774:      * and is in fact used to implement the latter, so we might as well call it
110774:      * directly.
110774:      */
110774:     if (!FromGenericPropertyDescriptor(cx, desc, vp))
110774:         return false;
110774:     if (vp.isUndefined())
110774:         return true;
110774:     RootedObject descObj(cx, &vp.toObject());
110774: 
110774:     // Aux.3 steps 4-5 / Aux.4 steps 5-6
110774:     AutoIdVector props(cx);
110774:     if (!GetPropertyNames(cx, attributes, 0, &props))
110774:         return false;
110774:     size_t n = props.length();
110774:     for (size_t i = 0; i < n; ++i) {
110774:         RootedId id(cx, props[i]);
110774:         if (JSID_IS_ATOM(id)) {
110774:             JSAtom *atom = JSID_TO_ATOM(id);
110774:             const JSAtomState &atomState = cx->runtime->atomState;
114207:             if (atom == atomState.value || atom == atomState.writable ||
114207:                 atom == atomState.get || atom == atomState.set ||
114207:                 atom == atomState.enumerable || atom == atomState.configurable)
110774:             {
110774:                 continue;
110774:             }
110774:         }
110774: 
110774:         RootedValue v(cx);
110774:         if (!JSObject::getGeneric(cx, descObj, attributes, id, &v))
110774:             return false;
110774:         if (!JSObject::defineGeneric(cx, descObj, id, v, NULL, NULL, JSPROP_ENUMERATE))
110774:             return false;
110774:     }
110774:     return true;
110774: }
110774: 
110774: // Aux.4 NormalizeAndCompletePropertyDescriptor(Attributes)
110774: static inline bool
110774: NormalizeAndCompletePropertyDescriptor(JSContext *cx, MutableHandleValue vp)
110774: {
110774:     return NormalizePropertyDescriptor(cx, vp, true);
110774: }
110774: 
110774: static inline bool
110774: IsDataDescriptor(const PropertyDescriptor &desc)
110774: {
110774:     return desc.obj && !(desc.attrs & (JSPROP_GETTER | JSPROP_SETTER));
110774: }
110774: 
110774: static inline bool
110774: IsAccessorDescriptor(const PropertyDescriptor &desc)
110774: {
110774:     return desc.obj && desc.attrs & (JSPROP_GETTER | JSPROP_SETTER);
110774: }
110774: 
110774: // Aux.5 ValidateProperty(O, P, Desc)
110774: static bool
110774: ValidateProperty(JSContext *cx, HandleObject obj, HandleId id, PropDesc *desc, bool *bp)
110774: {
110774:     // step 1
110774:     AutoPropertyDescriptorRooter current(cx);
110774:     if (!GetOwnPropertyDescriptor(cx, obj, id, 0, &current))
110774:         return false;
110774: 
110774:     /*
110774:      * steps 2-4 are redundant since ValidateProperty is never called unless
110774:      * target.[[HasOwn]](P) is true
110774:      */
110774:     JS_ASSERT(current.obj);
110774: 
110774:     // step 5
110774:     if (!desc->hasValue() && !desc->hasWritable() && !desc->hasGet() && !desc->hasSet() &&
110774:         !desc->hasEnumerable() && !desc->hasConfigurable())
110774:     {
110774:         *bp = true;
110774:         return true;
110774:     }
110774: 
110774:     // step 6
110774:     if ((!desc->hasWritable() || desc->writable() == !(current.attrs & JSPROP_READONLY)) &&
110774:         (!desc->hasGet() || desc->getter() == current.getter) &&
110774:         (!desc->hasSet() || desc->setter() == current.setter) &&
110774:         (!desc->hasEnumerable() || desc->enumerable() == bool(current.attrs & JSPROP_ENUMERATE)) &&
110774:         (!desc->hasConfigurable() || desc->configurable() == !(current.attrs & JSPROP_PERMANENT)))
110774:     {
110774:         if (!desc->hasValue()) {
110774:             *bp = true;
110774:             return true;
110774:         }
110774:         bool same = false;
110774:         if (!SameValue(cx, desc->value(), current.value, &same))
110774:             return false;
110774:         if (same) {
110774:             *bp = true;
110774:             return true;
110774:         }
110774:     }
110774: 
110774:     // step 7
110774:     if (current.attrs & JSPROP_PERMANENT) {
110774:         if (desc->hasConfigurable() && desc->configurable()) {
110774:             *bp = false;
110774:             return true;
110774:         }
110774: 
110774:         if (desc->hasEnumerable() &&
110774:             desc->enumerable() != bool(current.attrs & JSPROP_ENUMERATE))
110774:         {
110774:             *bp = false;
110774:             return true;
110774:         }
110774:     }
110774: 
110774:     // step 8
110774:     if (desc->isGenericDescriptor()) {
110774:         *bp = true;
110774:         return true;
110774:     }
110774: 
110774:     // step 9
110774:     if (IsDataDescriptor(current) != desc->isDataDescriptor()) {
110774:         *bp = !(current.attrs & JSPROP_PERMANENT);
110774:         return true;
110774:     }
110774: 
110774:     // step 10
110774:     if (IsDataDescriptor(current)) {
110774:         JS_ASSERT(desc->isDataDescriptor()); // by step 9
110774:         if ((current.attrs & JSPROP_PERMANENT) && (current.attrs & JSPROP_READONLY)) {
110774:             if (desc->hasWritable() && desc->writable()) {
110774:                 *bp = false;
110774:                 return true;
110774:             }
110774: 
110774:             if (desc->hasValue()) {
110774:                 bool same;
110774:                 if (!SameValue(cx, desc->value(), current.value, &same))
110774:                     return false;
110774:                 if (!same) {
110774:                     *bp = false;
110774:                     return true;
110774:                 }
110774:             }
110774:         }
110774: 
110774:         *bp = true;
110774:         return true;
110774:     }
110774: 
110774:     // steps 11-12
110774:     JS_ASSERT(IsAccessorDescriptor(current)); // by step 10
110774:     JS_ASSERT(desc->isAccessorDescriptor()); // by step 9
110774:     *bp = (!(current.attrs & JSPROP_PERMANENT) ||
110774:            ((!desc->hasSet() || desc->setter() == current.setter) &&
110774:             (!desc->hasGet() || desc->getter() == current.getter)));
110774:     return true;
110774: }
110774: 
110774: // Aux.6 IsSealed(O, P)
110774: static bool
110774: IsSealed(JSContext* cx, HandleObject obj, HandleId id, bool *bp)
110774: {
110774:     // step 1
110774:     AutoPropertyDescriptorRooter desc(cx);
110774:     if (!GetOwnPropertyDescriptor(cx, obj, id, 0, &desc))
110774:         return false;
110774: 
110774:     // steps 2-3
110774:     *bp = desc.obj && (desc.attrs & JSPROP_PERMANENT);
110774:     return true;
110774: }
110774: 
110774: static bool
110774: HasOwn(JSContext *cx, HandleObject obj, HandleId id, bool *bp)
110774: {
110774:     AutoPropertyDescriptorRooter desc(cx);
110774:     if (!JS_GetPropertyDescriptorById(cx, obj, id, JSRESOLVE_QUALIFIED, &desc))
110774:         return false;
110774:     *bp = (desc.obj == obj);
110774:     return true;
110774: }
110774: 
110774: static bool
110774: IdToValue(JSContext *cx, HandleId id, MutableHandleValue value)
110774: {
110774:     JSString *name = ToString(cx, IdToValue(id));
110774:     if (!name)
110774:         return false;
110774:     value.set(StringValue(name));
110774:     return true;
110774: }
110774: 
110774: // TrapGetOwnProperty(O, P)
110774: static bool
110774: TrapGetOwnProperty(JSContext *cx, HandleObject proxy, HandleId id, MutableHandleValue rval)
110774: {
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().getOwnPropertyDescriptor, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined()) {
110774:         AutoPropertyDescriptorRooter desc(cx);
110774:         if (!GetOwnPropertyDescriptor(cx, target, id, &desc))
110774:             return false;
110774:         return NewPropertyDescriptorObject(cx, &desc, rval.address());
110774:     }
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectValue(*target),
110774:         value
 43279:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 2, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6
110774:     if (!NormalizeAndCompletePropertyDescriptor(cx, &trapResult))
110774:         return false;
110774: 
110774:     // step 7
110774:     if (trapResult.isUndefined()) {
110774:         bool sealed;
110774:         if (!IsSealed(cx, target, id, &sealed))
110774:             return false;
110774:         if (sealed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NC_AS_NE);
110774:             return false;
110774:         }
110774: 
110774:         if (!target->isExtensible()) {
110774:             bool found;
110774:             if (!HasOwn(cx, target, id, &found))
110774:                 return false;
110774:             if (found) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_E_AS_NE);
110774:                 return false;
110774:             }
110774:         }
110774: 
110774:         rval.set(UndefinedValue());
110774:         return true;
110774:     }
110774: 
110774:     // step 8
110774:     bool isFixed;
110774:     if (!HasOwn(cx, target, id, &isFixed))
110774:         return false;
110774: 
110774:     // step 9
110774:     if (target->isExtensible() && !isFixed) {
110774:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NEW);
110774:         return false;
110774:     }
110774: 
110774:     AutoPropDescArrayRooter descs(cx);
110774:     PropDesc *desc = descs.append();
110774:     if (!desc || !desc->initialize(cx, trapResult))
110774:         return false;
110774: 
110774:     /* step 10 */
110774:     if (isFixed) {
110774:         bool valid;
110774:         if (!ValidateProperty(cx, target, id, desc, &valid))
110774:             return false;
110774: 
110774:         if (!valid) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_INVALID);
110774:             return false;
110774:         }
110774:     }
110774: 
110774:     // step 11
110774:     if (!desc->configurable() && !isFixed) {
110774:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NE_AS_NC);
110774:         return false;
110774:     }
110774: 
110774:     // step 12
110774:     rval.set(trapResult);
110774:     return true;
110774: }
110774: 
110774: // TrapDefineOwnProperty(O, P, DescObj, Throw)
110774: static bool
110774: TrapDefineOwnProperty(JSContext *cx, HandleObject proxy, HandleId id, MutableHandleValue vp)
110774: {
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().defineProperty, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined()) {
110774:         AutoPropertyDescriptorRooter desc(cx);
110774:         if (!ParsePropertyDescriptorObject(cx, proxy, vp, &desc))
110774:             return false;
110774:         return JS_DefinePropertyById(cx, target, id, desc.value, desc.getter, desc.setter,
110774:                                      desc.attrs);
110774:     }
110774: 
110774:     // step 5
110774:     RootedValue normalizedDesc(cx, vp);
110774:     if (!NormalizePropertyDescriptor(cx, &normalizedDesc))
110774:         return false;
110774: 
110774:     // step 6
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectValue(*target),
110774:         value,
110774:         normalizedDesc
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 3, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // steps 7-8
110774:     if (ToBoolean(trapResult)) {
110774:         bool isFixed;
110774:         if (!HasOwn(cx, target, id, &isFixed))
110774:             return false;
110774: 
110774:         if (!target->isExtensible() && !isFixed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_DEFINE_NEW);
110774:             return false;
110774:         }
110774: 
110774:         AutoPropDescArrayRooter descs(cx);
110774:         PropDesc *desc = descs.append();
110774:         if (!desc || !desc->initialize(cx, normalizedDesc))
110774:             return false;
110774: 
110774:         if (isFixed) {
110774:             bool valid;
110774:             if (!ValidateProperty(cx, target, id, desc, &valid))
110774:                 return false;
110774:             if (!valid) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_DEFINE_INVALID);
110774:                 return false;
110774:             }
110774:         }
110774: 
110774:         if (!desc->configurable() && !isFixed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_DEFINE_NE_AS_NC);
110774:             return false;
110774:         }
110774: 
110774:         vp.set(BooleanValue(true));
110774:         return true;
110774:     }
110774: 
110774:     // step 9
110774:     // FIXME: API does not include a Throw parameter
110774:     vp.set(BooleanValue(false));
110774:     return true;
110774: }
110774: 
110774: static inline void
110774: ReportInvalidTrapResult(JSContext *cx, JSObject *proxy, JSAtom *atom)
110774: {
110774:     RootedValue v(cx, ObjectOrNullValue(proxy));
110774:     JSAutoByteString bytes;
110774:     if (!js_AtomToPrintableString(cx, atom, &bytes))
110774:         return;
110774:     js_ReportValueError2(cx, JSMSG_INVALID_TRAP_RESULT, JSDVG_IGNORE_STACK, v,
110774:                          NullPtr(), bytes.ptr());
110774: }
110774: 
110774: // This function is shared between getOwnPropertyNames, enumerate, and keys
110774: static bool
110774: ArrayToIdVector(JSContext *cx, HandleObject proxy, HandleObject target, HandleValue v,
110774:                 AutoIdVector &props, unsigned flags, JSAtom *trapName)
110774: {
110774:     JS_ASSERT(v.isObject());
110774:     RootedObject array(cx, &v.toObject());
110774: 
110774:     // steps g-h
110774:     uint32_t n;
110774:     if (!GetLengthProperty(cx, array, &n))
110774:         return false;
110774: 
110774:     // steps i-k
110774:     for (uint32_t i = 0; i < n; ++i) {
110774:         // step i
110774:         RootedValue v(cx);
110774:         if (!JSObject::getElement(cx, array, array, i, &v))
110774:             return false;
110774: 
110774:         // step ii
110774:         RootedId id(cx);
110774:         if (!ValueToId(cx, v, id.address()))
110774:             return false;
110774: 
110774:         // step iii
110774:         for (uint32_t j = 0; j < i; ++j) {
110774:             if (props[j] == id) {
110774:                 ReportInvalidTrapResult(cx, proxy, trapName);
110774:                 return false;
110774:             }
110774:         }
110774: 
110774:         // step iv
110774:         bool isFixed;
110774:         if (!HasOwn(cx, target, id, &isFixed))
110774:             return false;
110774: 
110774:         // step v
110774:         if (!target->isExtensible() && !isFixed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NEW);
110774:             return false;
110774:         }
110774: 
110774:         // step vi
110774:         if (!props.append(id))
110774:             return false;
110774:     }
110774: 
110774:     // step l
110774:     AutoIdVector ownProps(cx);
110774:     if (!GetPropertyNames(cx, target, flags, &ownProps))
110774:         return false;
110774: 
110774:     // step m
110774:     for (size_t i = 0; i < ownProps.length(); ++i) {
110774:         RootedId id(cx, ownProps[i]);
110774: 
110774:         bool found = false;
110774:         for (size_t j = 0; j < props.length(); ++j) {
110774:             if (props[j] == id) {
110774:                 found = true;
110774:                break;
110774:             }
110774:         }
110774:         if (found)
110774:             continue;
110774: 
110774:         // step i
110774:         bool sealed;
110774:         if (!IsSealed(cx, target, id, &sealed))
110774:             return false;
110774:         if (sealed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_SKIP_NC);
110774:             return false;
110774:         }
110774: 
110774:         // step ii
110774:         bool isFixed;
110774:         if (!HasOwn(cx, target, id, &isFixed))
110774:             return false;
110774: 
110774:         // step iii
110774:         if (!target->isExtensible() && isFixed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_E_AS_NE);
110774:             return false;
110774:         }
110774:     }
110774: 
110774:     // step n
110774:     return true;
110774: }
110774: 
110774: ScriptedDirectProxyHandler::ScriptedDirectProxyHandler()
110774:         : DirectProxyHandler(&sScriptedDirectProxyHandlerFamily)
110774: {
110774: }
110774: 
110774: ScriptedDirectProxyHandler::~ScriptedDirectProxyHandler()
110774: {
110774: }
110774: 
110774: // FIXME: Move to Proxy::getPropertyDescriptor once ScriptedIndirectProxy is removed
110774: bool
110774: ScriptedDirectProxyHandler::getPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_,
110774:                                                   bool set, PropertyDescriptor *desc)
110774: {
110774:     JS_CHECK_RECURSION(cx, return false);
110774:     Rooted<JSObject*> proxy(cx, proxy_);
110774:     Rooted<jsid> id(cx, id_);
110774:     if (!GetOwnPropertyDescriptor(cx, proxy, id, desc))
110774:         return false;
110774:     if (desc->obj)
110774:         return true;
115561:     RootedObject proto(cx);
115561:     if (!JSObject::getProto(cx, proxy, &proto))
115561:         return false;
110774:     if (!proto) {
110774:         JS_ASSERT(!desc->obj);
110774:         return true;
110774:     }
110774:     return JS_GetPropertyDescriptorById(cx, proto, id, JSRESOLVE_QUALIFIED, desc);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_,
110774:                                                      bool set, PropertyDescriptor *desc)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedValue v(cx);
110774:     if (!TrapGetOwnProperty(cx, proxy, id, &v))
110774:         return false;
110774: 
110774:     // step 2
110774:     if (v.isUndefined()) {
110774:         desc->obj = NULL;
110774:         return true;
110774:     }
110774: 
110774:     // steps 3-4
110774:     return ParsePropertyDescriptorObject(cx, proxy, v, desc, true);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::defineProperty(JSContext *cx, JSObject *proxy_, jsid id_,
110774:                                            PropertyDescriptor *desc)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     AutoPropDescArrayRooter descs(cx);
110774:     PropDesc *d = descs.append();
110774:     d->initFromPropertyDescriptor(*desc);
110774:     RootedValue v(cx);
110774:     if (!FromGenericPropertyDescriptor(cx, d, &v))
110774:         return false;
110774: 
110774:     // step 2
110774:     return TrapDefineOwnProperty(cx, proxy, id, &v);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::getOwnPropertyNames(JSContext *cx, JSObject *proxy_,
110774:                                                 AutoIdVector &props)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774: 
110774:     // step a
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step b
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step c
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().getOwnPropertyNames, &trap))
110774:         return false;
110774: 
110774:     // step d
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::getOwnPropertyNames(cx, proxy_, props);
110774: 
110774:     // step e
110774:     Value argv[] = {
110774:         ObjectValue(*target)
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 1, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step f
110774:     if (trapResult.isPrimitive()) {
114207:         ReportInvalidTrapResult(cx, proxy, cx->names().getOwnPropertyNames);
110774:         return false;
110774:     }
110774: 
110774:     // steps g to n are shared
110774:     return ArrayToIdVector(cx, proxy, target, trapResult, props, JSITER_OWNONLY | JSITER_HIDDEN,
114207:                            cx->names().getOwnPropertyNames);
110774: }
110774: 
110774: // Proxy.[[Delete]](P, Throw)
110774: bool
110774: ScriptedDirectProxyHandler::delete_(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().deleteProperty, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::delete_(cx, proxy_, id_, bp);
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectValue(*target),
110774:         value
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 2, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6-7
110774:     if (ToBoolean(trapResult)) {
110774:         bool sealed;
110774:         if (!IsSealed(cx, target, id, &sealed))
110774:             return false;
110774:         if (sealed) {
110774:             RootedValue v(cx, IdToValue(id));
110774:             js_ReportValueError(cx, JSMSG_CANT_DELETE, JSDVG_IGNORE_STACK, v, NullPtr());
110774:             return false;
110774:         }
110774: 
110774:         *bp = true;
110774:         return true;
110774:     }
110774: 
110774:     // step 8
110774:     // FIXME: API does not include a Throw parameter
110774:     *bp = false;
110774:     return true;
110774: }
110774: 
110774: // 12.6.4 The for-in Statement, step 6
110774: bool
110774: ScriptedDirectProxyHandler::enumerate(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774: 
110774:     // step a
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step b
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step c
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().enumerate, &trap))
110774:         return false;
110774: 
110774:     // step d
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::enumerate(cx, proxy_, props);
110774: 
110774:     // step e
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target)
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 1, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step f
110774:     if (trapResult.isPrimitive()) {
110774:         JSAutoByteString bytes;
114207:         if (!js_AtomToPrintableString(cx, cx->names().enumerate, &bytes))
110774:             return false;
110774:         RootedValue v(cx, ObjectOrNullValue(proxy));
110774:         js_ReportValueError2(cx, JSMSG_INVALID_TRAP_RESULT, JSDVG_SEARCH_STACK,
110774:                              v, NullPtr(), bytes.ptr());
110774:         return false;
110774:     }
110774: 
110774:     // steps g-m are shared
110774:     // FIXME: the trap should return an iterator object, see bug 783826
114207:     return ArrayToIdVector(cx, proxy, target, trapResult, props, 0, cx->names().enumerate);
110774: }
110774: 
110774: // Proxy.[[HasProperty]](P)
110774: bool
110774: ScriptedDirectProxyHandler::has(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().has, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::has(cx, proxy_, id_, bp);
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target),
110774:         value
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 2, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6
110774:     bool success = ToBoolean(trapResult);;
110774: 
110774:     // step 7
110774:     if (!success) {
110774:         bool sealed;
110774:         if (!IsSealed(cx, target, id, &sealed))
110774:             return false;
110774:         if (sealed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NC_AS_NE);
110774:             return false;
110774:         }
110774: 
110774:         if (!target->isExtensible()) {
110774:             bool isFixed;
110774:             if (!HasOwn(cx, target, id, &isFixed))
110774:                 return false;
110774:             if (isFixed) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_E_AS_NE);
110774:                 return false;
110774:             }
110774:         }
110774:     }
110774: 
110774:     // step 8
110774:     *bp = success;
110774:     return true;
110774: }
110774: 
110774: // Proxy.[[HasOwnProperty]](P)
110774: bool
110774: ScriptedDirectProxyHandler::hasOwn(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().hasOwn, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::hasOwn(cx, proxy_, id_, bp);
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target),
110774:         value
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 2, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6
110774:     bool success = ToBoolean(trapResult);
110774: 
110774:     // steps 7-8
110774:     if (!success) {
110774:         bool sealed;
110774:         if (!IsSealed(cx, target, id, &sealed))
110774:             return false;
110774:         if (sealed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NC_AS_NE);
110774:             return false;
110774:         }
110774: 
110774:         if (!target->isExtensible()) {
110774:             bool isFixed;
110774:             if (!HasOwn(cx, target, id, &isFixed))
110774:                 return false;
110774:             if (isFixed) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_E_AS_NE);
110774:                 return false;
110774:             }
110774:         }
110774:     } else if (!target->isExtensible()) {
110774:         bool isFixed;
110774:         if (!HasOwn(cx, target, id, &isFixed))
110774:             return false;
110774:         if (!isFixed) {
110774:             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_REPORT_NEW);
110774:             return false;
110774:         }
110774:     }
110774: 
110774:     // step 9
110774:     *bp = !!success;
110774:     return true;
110774: }
110774: 
110774: // Proxy.[[GetP]](P, Receiver)
110774: bool
110774: ScriptedDirectProxyHandler::get(JSContext *cx, JSObject *proxy_, JSObject *receiver_, jsid id_,
110774:                                 Value *vp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedObject receiver(cx, receiver_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().get, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::get(cx, proxy_, receiver_, id_, vp);
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target),
110774:         value,
110774:         ObjectOrNullValue(receiver)
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 3, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6
110774:     AutoPropertyDescriptorRooter desc(cx);
110774:     if (!GetOwnPropertyDescriptor(cx, target, id, &desc))
110774:         return false;
110774: 
110774:     // step 7
110774:     if (desc.obj) {
110774:         if (IsDataDescriptor(desc) &&
110774:             (desc.attrs & JSPROP_PERMANENT) &&
110774:             (desc.attrs & JSPROP_READONLY))
110774:         {
110774:             bool same;
110774:             if (!SameValue(cx, *vp, desc.value, &same))
110774:                 return false;
110774:             if (!same) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MUST_REPORT_SAME_VALUE);
110774:                 return false;
110774:             }
110774:         }
110774: 
110774:         if (IsAccessorDescriptor(desc) &&
110774:             (desc.attrs & JSPROP_PERMANENT) &&
110774:             !(desc.attrs & JSPROP_GETTER))
110774:         {
110774:             if (!trapResult.isUndefined()) {
110774:                 JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MUST_REPORT_UNDEFINED);
110774:                 return false;
110774:             }
110774:         }
110774:     }
110774: 
110774:     // step 8
110774:     *vp = trapResult;
110774:     return true;
110774: }
110774: 
110774: // Proxy.[[SetP]](P, V, Receiver)
110774: bool
110774: ScriptedDirectProxyHandler::set(JSContext *cx, JSObject *proxy_, JSObject *receiver_, jsid id_,
110774:                                 bool strict, Value *vp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774:     RootedObject receiver(cx, receiver_);
110774:     RootedId id(cx, id_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step 3
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().set, &trap))
110774:         return false;
110774: 
110774:     // step 4
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::set(cx, proxy_, receiver_, id_, strict, vp);
110774: 
110774:     // step 5
110774:     RootedValue value(cx);
110774:     if (!IdToValue(cx, id, &value))
110774:         return false;
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target),
110774:         value,
110774:         *vp,
110774:         ObjectValue(*receiver)
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 4, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step 6
110774:     bool success = ToBoolean(trapResult);
110774: 
110774:     // step 7
110774:     if (success) {
110774:         AutoPropertyDescriptorRooter desc(cx);
110774:         if (!GetOwnPropertyDescriptor(cx, target, id, &desc))
110774:             return false;
110774: 
110774:         if (desc.obj) {
110774:             if (IsDataDescriptor(desc) && (desc.attrs & JSPROP_PERMANENT) &&
110774:                 (desc.attrs & JSPROP_READONLY)) {
110774:                 bool same;
110774:                 if (!SameValue(cx, *vp, desc.value, &same))
110774:                     return false;
110774:                 if (!same) {
110774:                     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_SET_NW_NC);
110774:                     return false;
110774:                 }
110774:             }
110774: 
110774:             if (IsAccessorDescriptor(desc) && (desc.attrs & JSPROP_PERMANENT)) {
110774:                 if (!(desc.attrs & JSPROP_SETTER)) {
110774:                     JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_CANT_SET_WO_SETTER);
110774:                     return false;
110774:                 }
110774:             }
110774:         }
110774:     }
110774: 
110774:     // step 8
110774:     *vp = BooleanValue(success);
110774:     return true;
110774: }
110774: 
110774: // 15.2.3.14 Object.keys (O), step 2
110774: bool
110774: ScriptedDirectProxyHandler::keys(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774: 
110774:     // step a
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step b
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     // step c
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().keys, &trap))
110774:         return false;
110774: 
110774:     // step d
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::keys(cx, proxy_, props);
110774: 
110774:     // step e
110774:     Value argv[] = {
110774:         ObjectOrNullValue(target)
110774:     };
110774:     RootedValue trapResult(cx);
110774:     if (!Invoke(cx, ObjectValue(*handler), trap, 1, argv, trapResult.address()))
110774:         return false;
110774: 
110774:     // step f
110774:     if (trapResult.isPrimitive()) {
110774:         JSAutoByteString bytes;
114207:         if (!js_AtomToPrintableString(cx, cx->names().keys, &bytes))
110774:             return false;
110774:         RootedValue v(cx, ObjectOrNullValue(proxy));
110774:         js_ReportValueError2(cx, JSMSG_INVALID_TRAP_RESULT, JSDVG_IGNORE_STACK,
110774:                              v, NullPtr(), bytes.ptr());
110774:         return false;
110774:     }
110774: 
110774:     // steps g-n are shared
114207:     return ArrayToIdVector(cx, proxy, target, trapResult, props, JSITER_OWNONLY, cx->names().keys);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::iterate(JSContext *cx, JSObject *proxy, unsigned flags, Value *vp)
110774: {
110774:     // FIXME: Provide a proper implementation for this trap, see bug 787004
110774:     return DirectProxyHandler::iterate(cx, proxy, flags, vp);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::call(JSContext *cx, JSObject *proxy_, unsigned argc, Value *vp)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     /*
110774:      * NB: Remember to throw a TypeError here if we change NewProxyObject so that this trap can get
110774:      * called for non-callable objects
110774:      */
110774: 
110774:     // step 3
110774:     RootedObject args(cx, NewDenseCopiedArray(cx, argc, vp + 2));
110774:     if (!args)
110774:         return false;
110774: 
110774:     // step 4
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().apply, &trap))
110774:         return false;
110774: 
110774:     // step 5
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::call(cx, proxy_, argc, vp);
110774: 
110774:     // step 6
110774:     Value argv[] = {
110774:         ObjectValue(*target),
110774:         vp[1],
110774:         ObjectValue(*args)
110774:     };
110774:     RootedValue thisValue(cx, ObjectValue(*handler));
110774:     return Invoke(cx, thisValue, trap, 3, argv, vp);
110774: }
110774: 
110774: bool
110774: ScriptedDirectProxyHandler::construct(JSContext *cx, JSObject *proxy_, unsigned argc, Value *argv,
110774:                                       Value *rval)
110774: {
110774:     RootedObject proxy(cx, proxy_);
110774: 
110774:     // step 1
110774:     RootedObject handler(cx, GetDirectProxyHandlerObject(proxy));
110774: 
110774:     // step 2
110774:     RootedObject target(cx, GetProxyTargetObject(proxy));
110774: 
110774:     /*
110774:      * NB: Remember to throw a TypeError here if we change NewProxyObject so that this trap can get
110774:      * called for non-callable objects
110774:      */
110774: 
110774:     // step 3
110774:     RootedObject args(cx, NewDenseCopiedArray(cx, argc, argv));
110774:     if (!args)
110774:         return false;
110774: 
110774:     // step 4
110774:     RootedValue trap(cx);
114207:     if (!JSObject::getProperty(cx, handler, handler, cx->names().construct, &trap))
110774:         return false;
110774: 
110774:     // step 5
110774:     if (trap.isUndefined())
110774:         return DirectProxyHandler::construct(cx, proxy_, argc, argv, rval);
110774: 
110774:     // step 6
110774:     Value constructArgv[] = {
110774:         ObjectValue(*target),
110774:         ObjectValue(*args)
110774:     };
110774:     RootedValue thisValue(cx, ObjectValue(*handler));
110774:     return Invoke(cx, thisValue, trap, 2, constructArgv, rval);
110774: }
110774: 
110774: ScriptedDirectProxyHandler ScriptedDirectProxyHandler::singleton;
 43279: 
108101: #define INVOKE_ON_PROTOTYPE(cx, handler, proxy, protoCall)                   \
108101:     JS_BEGIN_MACRO                                                           \
108951:         RootedObject proto(cx);                                              \
108951:         if (!handler->getPrototypeOf(cx, proxy, proto.address()))            \
108101:             return false;                                                    \
108101:         if (!proto)                                                          \
108101:             return true;                                                     \
108101:         assertSameCompartment(cx, proxy, proto);                             \
108101:         return protoCall;                                                    \
108101:     JS_END_MACRO                                                             \
108101: 
108101: 
 43190: bool
108174: Proxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id_, bool set,
 55592:                              PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
108174:     RootedObject proxy(cx, proxy_);
108174:     RootedId id(cx, id_);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108101:     if (!handler->hasPrototype())
108101:         return handler->getPropertyDescriptor(cx, proxy, id, set, desc);
108101:     if (!handler->getOwnPropertyDescriptor(cx, proxy, id, set, desc))
108101:         return false;
108101:     if (desc->obj)
108101:         return true;
108101:     INVOKE_ON_PROTOTYPE(cx, handler, proxy,
108101:                         JS_GetPropertyDescriptorById(cx, proto, id,
108101:                                                      JSRESOLVE_QUALIFIED, desc));
 43190: }
 43190: 
 43190: bool
110774: Proxy::getPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id, bool set, Value *vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     return Proxy::getPropertyDescriptor(cx, proxy, id, set, &desc) &&
 76213:            NewPropertyDescriptorObject(cx, &desc, vp);
 43190: }
 43190: 
 43190: bool
110774: Proxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id, bool set,
 48470:                                 PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->getOwnPropertyDescriptor(cx, proxy, id, set, desc);
 43190: }
 43190: 
 43190: bool
110774: Proxy::getOwnPropertyDescriptor(JSContext *cx, JSObject *proxy_, jsid id, bool set, Value *vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     return Proxy::getOwnPropertyDescriptor(cx, proxy, id, set, &desc) &&
 76213:            NewPropertyDescriptorObject(cx, &desc, vp);
 43190: }
 43190: 
 43190: bool
110774: Proxy::defineProperty(JSContext *cx, JSObject *proxy_, jsid id, PropertyDescriptor *desc)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->defineProperty(cx, proxy, id, desc);
 43190: }
 43190: 
 43190: bool
104205: Proxy::defineProperty(JSContext *cx, JSObject *proxy_, jsid id_, const Value &v)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
104205:     RootedObject proxy(cx, proxy_);
104205:     RootedId id(cx, id_);
 48470:     AutoPropertyDescriptorRooter desc(cx);
104205:     return ParsePropertyDescriptorObject(cx, proxy, v, &desc) &&
 79386:            Proxy::defineProperty(cx, proxy, id, &desc);
 43190: }
 43190: 
 42733: bool
110774: Proxy::getOwnPropertyNames(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->getOwnPropertyNames(cx, proxy, props);
 42733: }
 42733: 
 42733: bool
110774: Proxy::delete_(JSContext *cx, JSObject *proxy_, jsid id, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->delete_(cx, proxy, id, bp);
 42733: }
 42733: 
108101: static bool
108101: AppendUnique(JSContext *cx, AutoIdVector &base, AutoIdVector &others)
108101: {
108101:     AutoIdVector uniqueOthers(cx);
108101:     if (!uniqueOthers.reserve(others.length()))
108101:         return false;
108101:     for (size_t i = 0; i < others.length(); ++i) {
108101:         bool unique = true;
108101:         for (size_t j = 0; j < base.length(); ++j) {
108101:             if (others[i] == base[j]) {
108101:                 unique = false;
108101:                 break;
108101:             }
108101:         }
108101:         if (unique)
108101:             uniqueOthers.append(others[i]);
108101:     }
108101:     return base.append(uniqueOthers);
108101: }
108101: 
 42733: bool
110774: Proxy::enumerate(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108101:     if (!handler->hasPrototype())
 79734:         return GetProxyHandler(proxy)->enumerate(cx, proxy, props);
108101:     if (!handler->keys(cx, proxy, props))
108101:         return false;
108101:     AutoIdVector protoProps(cx);
108101:     INVOKE_ON_PROTOTYPE(cx, handler, proxy,
108101:                         GetPropertyNames(cx, proto, 0, &protoProps) &&
108101:                         AppendUnique(cx, props, protoProps));
 42733: }
 42733: 
 42733: bool
108174: Proxy::has(JSContext *cx, JSObject *proxy_, jsid id_, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
108174:     RootedObject proxy(cx, proxy_);
108174:     RootedId id(cx, id_);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108101:     if (!handler->hasPrototype())
108101:         return handler->has(cx, proxy, id, bp);
108101:     if (!handler->hasOwn(cx, proxy, id, bp))
108101:         return false;
108101:     if (*bp)
108101:         return true;
108101:     JSBool Bp;
108101:     INVOKE_ON_PROTOTYPE(cx, handler, proxy,
108101:                         JS_HasPropertyById(cx, proto, id, &Bp) &&
108101:                         ((*bp = Bp) || true));
 42733: }
 42733: 
 42733: bool
110774: Proxy::hasOwn(JSContext *cx, JSObject *proxy_, jsid id, bool *bp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->hasOwn(cx, proxy, id, bp);
 42733: }
 42733: 
 42733: bool
118903: Proxy::get(JSContext *cx, HandleObject proxy, HandleObject receiver, HandleId id,
108098:            MutableHandleValue vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108101:     bool own = false;
108101:     if (!handler->hasPrototype() || (handler->hasOwn(cx, proxy, id, &own) && own))
108101:         return handler->get(cx, proxy, receiver, id, vp.address());
108951:     INVOKE_ON_PROTOTYPE(cx, handler, proxy, JSObject::getGeneric(cx, proto, receiver, id, vp));
 42733: }
 42733: 
 42733: bool
118903: Proxy::getElementIfPresent(JSContext *cx, HandleObject proxy, HandleObject receiver, uint32_t index,
108098:                            MutableHandleValue vp, bool *present)
 81417: {
 81417:     JS_CHECK_RECURSION(cx, return false);
118478: 
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
118478: 
118478:     if (!handler->hasPrototype()) {
118478:         return GetProxyHandler(proxy)->getElementIfPresent(cx, proxy, receiver, index,
118478:                                                            vp.address(), present);
118478:     }
118478: 
114764:     RootedId id(cx);
118478:     if (!IndexToId(cx, index, id.address()))
118478:         return false;
118478: 
118478:     bool hasOwn;
118478:     if (!handler->hasOwn(cx, proxy, id, &hasOwn))
118478:         return false;
118478: 
118478:     if (hasOwn) {
114764:         *present = true;
114764:         return GetProxyHandler(proxy)->get(cx, proxy, receiver, id, vp.address());
108101:     }
118478: 
108101:     INVOKE_ON_PROTOTYPE(cx, handler, proxy,
108951:                         JSObject::getElementIfPresent(cx, proto, receiver, index, vp, present));
 81417: }
 81417: 
 81417: bool
118903: Proxy::set(JSContext *cx, HandleObject proxy, HandleObject receiver, HandleId id, bool strict,
108098:            MutableHandleValue vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108174:     RootedObject proto(cx);
108101:     if (handler->hasPrototype()) {
108101:         // If we're using a prototype, we still want to use the proxy trap unless
108101:         // we have a non-own property with a setter.
108101:         bool hasOwn;
108101:         AutoPropertyDescriptorRooter desc(cx);
108101:         if (handler->hasOwn(cx, proxy, id, &hasOwn) && !hasOwn &&
108174:             handler->getPrototypeOf(cx, proxy, proto.address()) && proto &&
108101:             JS_GetPropertyDescriptorById(cx, proto, id, JSRESOLVE_QUALIFIED, &desc) &&
108101:             desc.obj && desc.setter)
108101:         {
108951:             return JSObject::setGeneric(cx, proto, receiver, id, vp, strict);
108101:         } else if (cx->isExceptionPending()) {
108101:             return false;
108101:         }
108101:     }
108101:     return handler->set(cx, proxy, receiver, id, strict, vp.address());
 42733: }
 42733: 
 42733: bool
110774: Proxy::keys(JSContext *cx, JSObject *proxy_, AutoIdVector &props)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->keys(cx, proxy, props);
 42733: }
 43190: 
 43190: bool
118903: Proxy::iterate(JSContext *cx, HandleObject proxy, unsigned flags, MutableHandleValue vp)
 43190: {
 59231:     JS_CHECK_RECURSION(cx, return false);
108101:     BaseProxyHandler *handler = GetProxyHandler(proxy);
108101:     if (!handler->hasPrototype())
108098:         return GetProxyHandler(proxy)->iterate(cx, proxy, flags, vp.address());
108101:     AutoIdVector props(cx);
108101:     // The other Proxy::foo methods do the prototype-aware work for us here.
108101:     if ((flags & JSITER_OWNONLY)
108101:         ? !Proxy::keys(cx, proxy, props)
108101:         : !Proxy::enumerate(cx, proxy, props)) {
108101:         return false;
108101:     }
108101:     return EnumeratedIdVectorToIterator(cx, proxy, flags, props, vp);
 42733: }
 42733: 
 47498: bool
110774: Proxy::call(JSContext *cx, JSObject *proxy_, unsigned argc, Value *vp)
 42733: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->call(cx, proxy, argc, vp);
 42733: }
 47498: 
 47498: bool
110774: Proxy::construct(JSContext *cx, JSObject *proxy_, unsigned argc, Value *argv, Value *rval)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->construct(cx, proxy, argc, argv, rval);
 42733: }
 47498: 
 57775: bool
105479: Proxy::nativeCall(JSContext *cx, IsAcceptableThis test, NativeImpl impl, CallArgs args)
 79388: {
 79388:     JS_CHECK_RECURSION(cx, return false);
105479:     Rooted<JSObject*> proxy(cx, &args.thisv().toObject());
105479:     return GetProxyHandler(proxy)->nativeCall(cx, test, impl, args);
 79388: }
 79388: 
 79388: bool
111462: Proxy::hasInstance(JSContext *cx, HandleObject proxy, MutableHandleValue v, bool *bp)
 57775: {
 59231:     JS_CHECK_RECURSION(cx, return false);
111462:     return GetProxyHandler(proxy)->hasInstance(cx, proxy, v, bp);
 57775: }
 57775: 
 57775: JSType
110774: Proxy::typeOf(JSContext *cx, JSObject *proxy_)
 57775: {
 59231:     // FIXME: API doesn't allow us to report error (bug 618906).
 59231:     JS_CHECK_RECURSION(cx, return JSTYPE_OBJECT);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->typeOf(cx, proxy);
 57775: }
 57775: 
 79418: bool
110774: Proxy::objectClassIs(JSObject *proxy_, ESClassValue classValue, JSContext *cx)
 79418: {
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->objectClassIs(proxy, classValue, cx);
 79418: }
 79418: 
 47498: JSString *
110774: Proxy::obj_toString(JSContext *cx, JSObject *proxy_)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return NULL);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->obj_toString(cx, proxy);
 42733: }
 47498: 
 47498: JSString *
110774: Proxy::fun_toString(JSContext *cx, JSObject *proxy_, unsigned indent)
 47498: {
 59231:     JS_CHECK_RECURSION(cx, return NULL);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->fun_toString(cx, proxy, indent);
 42733: }
 42733: 
 90851: bool
110774: Proxy::regexp_toShared(JSContext *cx, JSObject *proxy_, RegExpGuard *g)
 89376: {
101773:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 90851:     return GetProxyHandler(proxy)->regexp_toShared(cx, proxy, g);
 89376: }
 89376: 
 72054: bool
110774: Proxy::defaultValue(JSContext *cx, JSObject *proxy_, JSType hint, Value *vp)
 72054: {
101773:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 79734:     return GetProxyHandler(proxy)->defaultValue(cx, proxy, hint, vp);
 72054: }
 72054: 
 89623: bool
110774: Proxy::iteratorNext(JSContext *cx, JSObject *proxy_, Value *vp)
 89623: {
101773:     JS_CHECK_RECURSION(cx, return false);
110774:     RootedObject proxy(cx, proxy_);
 89623:     return GetProxyHandler(proxy)->iteratorNext(cx, proxy, vp);
 89623: }
 89623: 
115021: bool
115021: Proxy::getPrototypeOf(JSContext *cx, JSObject *proxy, JSObject **proto)
115021: {
115021:     JS_CHECK_RECURSION(cx, return false);
115021:     return GetProxyHandler(proxy)->getPrototypeOf(cx, proxy, proto);
115021: }
115021: 
115021: JSObject * const Proxy::LazyProto = reinterpret_cast<JSObject *>(0x1);
115021: 
 54404: static JSObject *
 98960: proxy_innerObject(JSContext *cx, HandleObject obj)
 54404: {
 79734:     return GetProxyPrivate(obj).toObjectOrNull();
 54404: }
 54404: 
 42733: static JSBool
103716: proxy_LookupGeneric(JSContext *cx, HandleObject obj, HandleId id,
103716:                     MutableHandleObject objp, MutableHandleShape propp)
 42733: {
 42733:     bool found;
 79386:     if (!Proxy::has(cx, obj, id, &found))
 42733:         return false;
 42733: 
 42733:     if (found) {
103716:         MarkNonNativePropertyFound(obj, propp);
103636:         objp.set(obj);
 42733:     } else {
103636:         objp.set(NULL);
103716:         propp.set(NULL);
 42733:     }
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
103636: proxy_LookupProperty(JSContext *cx, HandleObject obj, HandlePropertyName name,
103716:                      MutableHandleObject objp, MutableHandleShape propp)
 80442: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 80442: }
 80442: 
 80442: static JSBool
103716: proxy_LookupElement(JSContext *cx, HandleObject obj, uint32_t index,
103716:                     MutableHandleObject objp, MutableHandleShape propp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80442:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 77980: }
 77980: 
 77980: static JSBool
103636: proxy_LookupSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid,
103716:                     MutableHandleObject objp, MutableHandleShape propp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_LookupGeneric(cx, obj, id, objp, propp);
 78672: }
 78672: 
 78672: static JSBool
106862: proxy_DefineGeneric(JSContext *cx, HandleObject obj, HandleId id, HandleValue value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 42733:     desc.obj = obj;
106862:     desc.value = value;
 42733:     desc.attrs = (attrs & (~JSPROP_SHORTID));
 42733:     desc.getter = getter;
 42733:     desc.setter = setter;
 42733:     desc.shortid = 0;
 79386:     return Proxy::defineProperty(cx, obj, id, &desc);
 42733: }
 42733: 
 42733: static JSBool
106862: proxy_DefineProperty(JSContext *cx, HandleObject obj, HandlePropertyName name, HandleValue value,
 91237:                      PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 80624: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 80624: }
 80624: 
 80624: static JSBool
106862: proxy_DefineElement(JSContext *cx, HandleObject obj, uint32_t index, HandleValue value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80624:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 77980: }
 77980: 
 77980: static JSBool
106862: proxy_DefineSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid, HandleValue value,
 91237:                     PropertyOp getter, StrictPropertyOp setter, unsigned attrs)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_DefineGeneric(cx, obj, id, value, getter, setter, attrs);
 78672: }
 78672: 
 78672: static JSBool
106862: proxy_GetGeneric(JSContext *cx, HandleObject obj, HandleObject receiver, HandleId id,
106862:                  MutableHandleValue vp)
 42733: {
108098:     return Proxy::get(cx, obj, receiver, id, vp);
 42733: }
 42733: 
 42733: static JSBool
106862: proxy_GetProperty(JSContext *cx, HandleObject obj, HandleObject receiver, HandlePropertyName name,
106862:                   MutableHandleValue vp)
 78675: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 78675: }
 78675: 
 78675: static JSBool
106862: proxy_GetElement(JSContext *cx, HandleObject obj, HandleObject receiver, uint32_t index,
106862:                  MutableHandleValue vp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 78675:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_GetElementIfPresent(JSContext *cx, HandleObject obj, HandleObject receiver, uint32_t index,
106862:                           MutableHandleValue vp, bool *present)
 81417: {
108098:     return Proxy::getElementIfPresent(cx, obj, receiver, index, vp, present);
 81417: }
 81417: 
 81417: static JSBool
106862: proxy_GetSpecial(JSContext *cx, HandleObject obj, HandleObject receiver, HandleSpecialId sid,
106862:                  MutableHandleValue vp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_GetGeneric(cx, obj, receiver, id, vp);
 78672: }
 78672: 
 78672: static JSBool
106862: proxy_SetGeneric(JSContext *cx, HandleObject obj, HandleId id,
106862:                  MutableHandleValue vp, JSBool strict)
 42733: {
108098:     return Proxy::set(cx, obj, obj, id, strict, vp);
 42733: }
 42733: 
 42733: static JSBool
106862: proxy_SetProperty(JSContext *cx, HandleObject obj, HandlePropertyName name,
106862:                   MutableHandleValue vp, JSBool strict)
 80625: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 80625: }
 80625: 
 80625: static JSBool
106862: proxy_SetElement(JSContext *cx, HandleObject obj, uint32_t index,
106862:                  MutableHandleValue vp, JSBool strict)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80625:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 77980: }
 77980: 
 77980: static JSBool
106862: proxy_SetSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid,
106862:                  MutableHandleValue vp, JSBool strict)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_SetGeneric(cx, obj, id, vp, strict);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_GetGenericAttributes(JSContext *cx, HandleObject obj, HandleId id, unsigned *attrsp)
 42733: {
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     if (!Proxy::getOwnPropertyDescriptor(cx, obj, id, false, &desc))
 42733:         return false;
 42733:     *attrsp = desc.attrs;
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_GetPropertyAttributes(JSContext *cx, HandleObject obj, HandlePropertyName name, unsigned *attrsp)
 80622: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 80622: }
 80622: 
 80622: static JSBool
 98960: proxy_GetElementAttributes(JSContext *cx, HandleObject obj, uint32_t index, unsigned *attrsp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80622:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_GetSpecialAttributes(JSContext *cx, HandleObject obj, HandleSpecialId sid, unsigned *attrsp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_GetGenericAttributes(cx, obj, id, attrsp);
 78672: }
 78672: 
 78672: static JSBool
 98960: proxy_SetGenericAttributes(JSContext *cx, HandleObject obj, HandleId id, unsigned *attrsp)
 42733: {
 42733:     /* Lookup the current property descriptor so we have setter/getter/value. */
 48470:     AutoPropertyDescriptorRooter desc(cx);
 79386:     if (!Proxy::getOwnPropertyDescriptor(cx, obj, id, true, &desc))
 42733:         return false;
 42733:     desc.attrs = (*attrsp & (~JSPROP_SHORTID));
 79386:     return Proxy::defineProperty(cx, obj, id, &desc);
 42733: }
 42733: 
 42733: static JSBool
 98960: proxy_SetPropertyAttributes(JSContext *cx, HandleObject obj, HandlePropertyName name, unsigned *attrsp)
 80622: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 80622: }
 80622: 
 80622: static JSBool
 98960: proxy_SetElementAttributes(JSContext *cx, HandleObject obj, uint32_t index, unsigned *attrsp)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80622:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 77980: }
 77980: 
 77980: static JSBool
 98960: proxy_SetSpecialAttributes(JSContext *cx, HandleObject obj, HandleSpecialId sid, unsigned *attrsp)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_SetGenericAttributes(cx, obj, id, attrsp);
 78672: }
 78672: 
 78672: static JSBool
106862: proxy_DeleteGeneric(JSContext *cx, HandleObject obj, HandleId id,
106862:                     MutableHandleValue rval, JSBool strict)
 42733: {
 54169:     // TODO: throwing away strict
 42733:     bool deleted;
 79386:     if (!Proxy::delete_(cx, obj, id, &deleted) || !js_SuppressDeletedProperty(cx, obj, id))
 42733:         return false;
106862:     rval.setBoolean(deleted);
 42733:     return true;
 42733: }
 42733: 
 77980: static JSBool
106862: proxy_DeleteProperty(JSContext *cx, HandleObject obj, HandlePropertyName name,
106862:                      MutableHandleValue rval, JSBool strict)
 80623: {
102586:     Rooted<jsid> id(cx, NameToId(name));
102586:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 80623: }
 80623: 
 80623: static JSBool
106862: proxy_DeleteElement(JSContext *cx, HandleObject obj, uint32_t index,
106862:                     MutableHandleValue rval, JSBool strict)
 77980: {
 99421:     RootedId id(cx);
 98960:     if (!IndexToId(cx, index, id.address()))
 77980:         return false;
 80623:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 77980: }
 77980: 
 78672: static JSBool
106862: proxy_DeleteSpecial(JSContext *cx, HandleObject obj, HandleSpecialId sid,
106862:                     MutableHandleValue rval, JSBool strict)
 78672: {
102586:     Rooted<jsid> id(cx, SPECIALID_TO_JSID(sid));
102586:     return proxy_DeleteGeneric(cx, obj, id, rval, strict);
 78672: }
 78672: 
 42733: static void
115876: proxy_TraceObject(JSTracer *trc, RawObject obj)
 42733: {
 99244: #ifdef DEBUG
102262:     if (!trc->runtime->gcDisableStrictProxyCheckingCount && obj->isWrapper()) {
 99244:         JSObject *referent = &GetProxyPrivate(obj).toObject();
 99244:         if (referent->compartment() != obj->compartment()) {
 99244:             /*
103589:              * Assert that this proxy is tracked in the wrapper map. We maintain
103589:              * the invariant that the wrapped object is the key in the wrapper map.
 99244:              */
 99244:             Value key = ObjectValue(*referent);
 99244:             WrapperMap::Ptr p = obj->compartment()->crossCompartmentWrappers.lookup(key);
109329:             JS_ASSERT(*p->value.unsafeGet() == ObjectValue(*obj));
 99244:         }
 99244:     }
 99244: #endif
 99244: 
 96950:     // NB: If you add new slots here, make sure to change
 96950:     // js::NukeChromeCrossCompartmentWrappers to cope.
 91146:     MarkCrossCompartmentSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_PRIVATE), "private");
 99385:     MarkSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_EXTRA + 0), "extra0");
 99385:     MarkSlot(trc, &obj->getReservedSlotRef(JSSLOT_PROXY_EXTRA + 1), "extra1");
 42733: }
 42733: 
 57775: static void
115876: proxy_TraceFunction(JSTracer *trc, RawObject obj)
 64223: {
 96950:     // NB: If you add new slots here, make sure to change
 96950:     // js::NukeChromeCrossCompartmentWrappers to cope.
 91146:     MarkCrossCompartmentSlot(trc, &GetCall(obj), "call");
 99385:     MarkSlot(trc, &GetFunctionProxyConstruct(obj), "construct");
 91380:     proxy_TraceObject(trc, obj);
 64223: }
 64223: 
119273: static JSObject *
119273: proxy_WeakmapKeyDelegate(RawObject obj)
119273: {
119273:     JS_ASSERT(obj->isProxy());
119273:     return GetProxyHandler(obj)->weakmapKeyDelegate(obj);
119273: }
119273: 
 68938: static JSBool
106862: proxy_Convert(JSContext *cx, HandleObject proxy, JSType hint, MutableHandleValue vp)
 72054: {
 72054:     JS_ASSERT(proxy->isProxy());
106862:     return Proxy::defaultValue(cx, proxy, hint, vp.address());
 72054: }
 72054: 
 64223: static void
115877: proxy_Finalize(FreeOp *fop, RawObject obj)
 47498: {
 47498:     JS_ASSERT(obj->isProxy());
 94738:     GetProxyHandler(obj)->finalize(fop, obj);
 47498: }
 47498: 
 55650: static JSBool
111462: proxy_HasInstance(JSContext *cx, HandleObject proxy, MutableHandleValue v, JSBool *bp)
 55650: {
 55650:     bool b;
 79386:     if (!Proxy::hasInstance(cx, proxy, v, &b))
 55650:         return false;
 55650:     *bp = !!b;
 55650:     return true;
 55650: }
 55650: 
 57775: static JSType
 98960: proxy_TypeOf(JSContext *cx, HandleObject proxy)
 57775: {
 57775:     JS_ASSERT(proxy->isProxy());
 79386:     return Proxy::typeOf(cx, proxy);
 57775: }
 57775: 
119273: #define PROXY_CLASS_EXT                             \
119273:     {                                               \
119273:         NULL,                /* equality */         \
119273:         NULL,                /* outerObject */      \
119273:         NULL,                /* innerObject */      \
119273:         NULL,                /* iteratorObject */   \
119273:         NULL,                /* unused */           \
119273:         false,               /* isWrappedNative */  \
119273:         proxy_WeakmapKeyDelegate                    \
119273:     }
119273: 
 77817: JS_FRIEND_DATA(Class) js::ObjectProxyClass = {
 48622:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(4),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 72054:     proxy_Convert,
 64220:     proxy_Finalize,          /* finalize    */
 48622:     NULL,                    /* checkAccess */
 48622:     NULL,                    /* call        */
 98058:     proxy_HasInstance,       /* hasInstance */
 48622:     NULL,                    /* construct   */
 64223:     proxy_TraceObject,       /* trace       */
119273:     PROXY_CLASS_EXT,
 48622:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 43290:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 43290:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 43290:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 43290:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 48622:         NULL,                /* enumerate       */
 57775:         proxy_TypeOf,
 43290:         NULL,                /* thisObject      */
 42733:     }
 42733: };
 42733: 
 77817: JS_FRIEND_DATA(Class) js::OuterWindowProxyClass = {
 54404:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(4),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub,
 64220:     proxy_Finalize,          /* finalize    */
 54404:     NULL,                    /* checkAccess */
 54404:     NULL,                    /* call        */
110774:     NULL,                    /* hasInstance */
 54404:     NULL,                    /* construct   */
 64223:     proxy_TraceObject,       /* trace       */
 54404:     {
 54404:         NULL,                /* equality    */
 54404:         NULL,                /* outerObject */
 54404:         proxy_innerObject,
119273:         NULL,                /* iteratorObject */
119273:         NULL,                /* unused */
119273:         false,               /* isWrappedNative */
119273:         proxy_WeakmapKeyDelegate
 54404:     },
 54404:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 54404:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 54404:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 54404:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 54404:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 54404:         NULL,                /* enumerate       */
 54404:         NULL,                /* typeof          */
 54404:         NULL,                /* thisObject      */
 54404:     }
 54404: };
 54404: 
 77817: static JSBool
 91237: proxy_Call(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 48470:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
 42733:     JS_ASSERT(proxy->isProxy());
 79386:     return Proxy::call(cx, proxy, argc, vp);
 42733: }
 42733: 
 77817: static JSBool
 91237: proxy_Construct(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 53557:     JSObject *proxy = &JS_CALLEE(cx, vp).toObject();
 42733:     JS_ASSERT(proxy->isProxy());
 79386:     bool ok = Proxy::construct(cx, proxy, argc, JS_ARGV(cx, vp), vp);
 53557:     return ok;
 42733: }
 42733: 
 77817: JS_FRIEND_DATA(Class) js::FunctionProxyClass = {
 48622:     "Proxy",
 90410:     Class::NON_NATIVE | JSCLASS_IMPLEMENTS_BARRIERS | JSCLASS_HAS_RESERVED_SLOTS(6),
 78614:     JS_PropertyStub,         /* addProperty */
 78614:     JS_PropertyStub,         /* delProperty */
 78614:     JS_PropertyStub,         /* getProperty */
 78614:     JS_StrictPropertyStub,   /* setProperty */
 78614:     JS_EnumerateStub,
 78614:     JS_ResolveStub,
 78614:     JS_ConvertStub,
103443:     proxy_Finalize,          /* finalize */
 48622:     NULL,                    /* checkAccess */
 53557:     proxy_Call,
 98058:     FunctionClass.hasInstance,
 48622:     proxy_Construct,
 64223:     proxy_TraceFunction,     /* trace       */
119273:     PROXY_CLASS_EXT,
 48622:     {
 80442:         proxy_LookupGeneric,
 78672:         proxy_LookupProperty,
 77980:         proxy_LookupElement,
 78672:         proxy_LookupSpecial,
 80624:         proxy_DefineGeneric,
 43290:         proxy_DefineProperty,
 77980:         proxy_DefineElement,
 78672:         proxy_DefineSpecial,
 78675:         proxy_GetGeneric,
 43290:         proxy_GetProperty,
 77980:         proxy_GetElement,
 81417:         proxy_GetElementIfPresent,
 78672:         proxy_GetSpecial,
 80625:         proxy_SetGeneric,
 43290:         proxy_SetProperty,
 77980:         proxy_SetElement,
 78672:         proxy_SetSpecial,
 80622:         proxy_GetGenericAttributes,
 80622:         proxy_GetPropertyAttributes,
 77980:         proxy_GetElementAttributes,
 78672:         proxy_GetSpecialAttributes,
 80622:         proxy_SetGenericAttributes,
 80622:         proxy_SetPropertyAttributes,
 77980:         proxy_SetElementAttributes,
 78672:         proxy_SetSpecialAttributes,
 43290:         proxy_DeleteProperty,
 77980:         proxy_DeleteElement,
 78672:         proxy_DeleteSpecial,
 48622:         NULL,                /* enumerate       */
 57775:         proxy_TypeOf,
 43290:         NULL,                /* thisObject      */
 42733:     }
 42733: };
 42733: 
115021: static JSObject *
115021: NewProxyObject(JSContext *cx, BaseProxyHandler *handler, const Value &priv_, TaggedProto proto_,
 97353:                    JSObject *parent_, JSObject *call_, JSObject *construct_)
 42733: {
 99421:     RootedValue priv(cx, priv_);
115021:     Rooted<TaggedProto> proto(cx, proto_);
115021:     RootedObject parent(cx, parent_), call(cx, call_), construct(cx, construct_);
115021: 
115021:     JS_ASSERT_IF(proto.isObject(), cx->compartment == proto.toObject()->compartment());
 74424:     JS_ASSERT_IF(parent, cx->compartment == parent->compartment());
 99385:     JS_ASSERT_IF(construct, cx->compartment == construct->compartment());
114020:     JS_ASSERT_IF(call && cx->compartment != call->compartment(), priv.get() == ObjectValue(*call));
 47498:     bool fun = call || construct;
 54404:     Class *clasp;
 54404:     if (fun)
 54404:         clasp = &FunctionProxyClass;
 54404:     else
 54404:         clasp = handler->isOuterWindow() ? &OuterWindowProxyClass : &ObjectProxyClass;
 55746: 
 77353:     /*
 77353:      * Eagerly mark properties unknown for proxies, so we don't try to track
 77353:      * their properties and so that we don't need to walk the compartment if
 77353:      * their prototype changes later.
 77353:      */
115021:     if (proto.isObject() && !proto.toObject()->setNewTypeUnknown(cx))
 83286:         return NULL;
 77353: 
108951:     RootedObject obj(cx, NewObjectWithGivenProto(cx, clasp, proto, parent));
 83231:     if (!obj)
 42733:         return NULL;
109329:     obj->initSlot(JSSLOT_PROXY_HANDLER, PrivateValue(handler));
109329:     obj->initCrossCompartmentSlot(JSSLOT_PROXY_PRIVATE, priv);
 47498:     if (fun) {
109329:         obj->initCrossCompartmentSlot(JSSLOT_PROXY_CALL, call ? ObjectValue(*call) : UndefinedValue());
 52503:         if (construct) {
109329:             obj->initSlot(JSSLOT_PROXY_CONSTRUCT, ObjectValue(*construct));
 52503:         }
 47498:     }
 77343: 
 77343:     /* Don't track types of properties of proxies. */
 77353:     MarkTypeObjectUnknownProperties(cx, obj->type());
 77343: 
104429:     /* Mark the new proxy as having singleton type. */
108951:     if (clasp == &OuterWindowProxyClass && !JSObject::setSingletonType(cx, obj))
104429:         return NULL;
104429: 
 42733:     return obj;
 42733: }
 42733: 
115021: JS_FRIEND_API(JSObject *)
115021: js::NewProxyObject(JSContext *cx, BaseProxyHandler *handler, const Value &priv_, JSObject *proto_,
115021:                    JSObject *parent_, JSObject *call_, JSObject *construct_)
115021: {
115021:     return NewProxyObject(cx, handler, priv_, TaggedProto(proto_), parent_, call_, construct_);
115021: }
115021: 
 42733: static JSBool
110774: proxy(JSContext *cx, unsigned argc, jsval *vp)
110774: {
110774:     CallArgs args = CallArgsFromVp(argc, vp);
110774:     if (args.length() < 2) {
110774:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
110774:                              "Proxy", "1", "s");
110774:         return false;
110774:     }
115561:     RootedObject target(cx, NonNullObject(cx, args[0]));
110774:     if (!target)
110774:         return false;
115561:     RootedObject handler(cx, NonNullObject(cx, args[1]));
110774:     if (!handler)
110774:         return false;
115561:     RootedObject proto(cx);
115561:     if (!JSObject::getProto(cx, target, &proto))
115561:         return false;
121340:     JSObject *parent = NULL;
121340:     if (proto)
121340:         parent = proto->getParent();
115561:     RootedObject fun(cx, target->isCallable() ? target : (JSObject *) NULL);
110774:     JSObject *proxy = NewProxyObject(cx, &ScriptedDirectProxyHandler::singleton,
121340:                                      ObjectValue(*target), proto, parent,
110774:                                      fun, fun);
110774:     if (!proxy)
110774:         return false;
110774:     SetProxyExtra(proxy, 0, ObjectOrNullValue(handler));
110774:     vp->setObject(*proxy);
110774:     return true;
110774: }
110774: 
110774: Class js::ProxyClass = {
110774:     "Proxy",
110774:     JSCLASS_HAS_CACHED_PROTO(JSProto_Proxy),
110774:     JS_PropertyStub,         /* addProperty */
110774:     JS_PropertyStub,         /* delProperty */
110774:     JS_PropertyStub,         /* getProperty */
110774:     JS_StrictPropertyStub,   /* setProperty */
110774:     JS_EnumerateStub,
110774:     JS_ResolveStub,
110774:     JS_ConvertStub,
110774:     NULL,                    /* finalize */
110774:     NULL,                    /* checkAccess */
110774:     NULL,                    /* call */
110774:     NULL,                    /* hasInstance */
110774:     proxy                    /* construct */
110774: };
110774: 
110774: static JSBool
 91237: proxy_create(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 42733:     if (argc < 1) {
 42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
 43190:                              "create", "0", "s");
 42733:         return false;
 42733:     }
 54745:     JSObject *handler = NonNullObject(cx, vp[2]);
 54745:     if (!handler)
 42733:         return false;
 47600:     JSObject *proto, *parent = NULL;
 48470:     if (argc > 1 && vp[3].isObject()) {
 48470:         proto = &vp[3].toObject();
 42733:         parent = proto->getParent();
 42733:     } else {
 48470:         JS_ASSERT(IsFunctionObject(vp[0]));
 42733:         proto = NULL;
 47600:     }
 47600:     if (!parent)
 48470:         parent = vp[0].toObject().getParent();
110774:     JSObject *proxy = NewProxyObject(cx, &ScriptedIndirectProxyHandler::singleton,
110774:                                      ObjectValue(*handler), proto, parent);
 42733:     if (!proxy)
 42733:         return false;
 42733: 
 48470:     vp->setObject(*proxy);
 42733:     return true;
 42733: }
 42733: 
 42733: static JSBool
 91237: proxy_createFunction(JSContext *cx, unsigned argc, Value *vp)
 42733: {
 42733:     if (argc < 2) {
 42733:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
 43190:                              "createFunction", "1", "");
 42733:         return false;
 42733:     }
 54745:     JSObject *handler = NonNullObject(cx, vp[2]);
 54745:     if (!handler)
 42733:         return false;
 42733:     JSObject *proto, *parent;
 48470:     parent = vp[0].toObject().getParent();
 86483:     proto = parent->global().getOrCreateFunctionPrototype(cx);
 80627:     if (!proto)
 42733:         return false;
 42733:     parent = proto->getParent();
 42733: 
103274:     JSObject *call = ValueToCallable(cx, &vp[3]);
 42733:     if (!call)
 42733:         return false;
 42733:     JSObject *construct = NULL;
 42733:     if (argc > 2) {
103274:         construct = ValueToCallable(cx, &vp[4]);
 42733:         if (!construct)
 42733:             return false;
 42733:     }
 42733: 
110774:     JSObject *proxy = NewProxyObject(cx, &ScriptedIndirectProxyHandler::singleton,
110774:                                      ObjectValue(*handler), proto, parent, call, construct);
 42733:     if (!proxy)
 42733:         return false;
 42733: 
 48470:     vp->setObject(*proxy);
 42733:     return true;
 42733: }
 42733: 
 42733: static JSFunctionSpec static_methods[] = {
 42733:     JS_FN("create",         proxy_create,          2, 0),
 42733:     JS_FN("createFunction", proxy_createFunction,  3, 0),
 42733:     JS_FS_END
 42733: };
 42733: 
 42832: JS_FRIEND_API(JSObject *)
114748: js_InitProxyClass(JSContext *cx, HandleObject obj)
 42733: {
 99421:     RootedObject module(cx, NewObjectWithClassProto(cx, &ProxyClass, NULL, obj));
108951:     if (!module || !JSObject::setSingletonType(cx, module))
 42832:         return NULL;
 77343: 
 42832:     if (!JS_DefineProperty(cx, obj, "Proxy", OBJECT_TO_JSVAL(module),
 62395:                            JS_PropertyStub, JS_StrictPropertyStub, 0)) {
 42832:         return NULL;
 42733:     }
 42832:     if (!JS_DefineFunctions(cx, module, static_methods))
 42832:         return NULL;
 69232: 
 77817:     MarkStandardClassInitializedNoProto(obj, &ProxyClass);
 69232: 
 47497:     return module;
 42832: }
