 4838: <!DOCTYPE HTML>
 4838: <html>
 4838: <!--
 4838: https://bugzilla.mozilla.org/show_bug.cgi?id=389797
 4838: -->
 4838: <head>
 4838:   <title>Test for Bug 389797</title>
 4838:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
 4838:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
 4838: </head>
 4838: <body>
 4838: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=389797">Mozilla Bug 389797</a>
 4838: <p id="display"></p>
 4838: <div id="content" style="display: none">
 4838:   
 4838: </div>
 4838: <pre id="test">
 4838: <script class="testbody" type="text/javascript">
 4838: 
 4838: /** Test for Bug 389797 **/
 4838: var allTags = [];
 4838: var classInfos = {};
 4838: var interfaces = {};
 4838: var interfacesNonClassinfo = {};
 4838: 
 4838: function getClassName(tag) {
 4838:   return "HTML" + classInfos[tag] + "Element";
 4838: }
 4838: 
 4838: function HTML_TAG(aTagName, aImplClass) {
 4838:   allTags.push(aTagName);
 4838:   classInfos[aTagName] = aImplClass;
 4838:   interfaces[aTagName] =
89079:     [ "nsIDOMEventTarget",
16108:       "nsIDOMElementCSSInlineStyle",
77147:       "nsIDOMNodeSelector",
77149:       "nsITouchEventReceiver",
77149:       "nsIInlineEventHandlers" ];
 4838: 
 4838:   // Some interfaces don't appear in classinfo because other interfaces that
 4838:   // inherit from them do.
 4838:   interfacesNonClassinfo[aTagName] =
 4838:     [ "nsIDOMNode",
 4838:       "nsIDOMElement",
 4838:       "nsISupportsWeakReference" ];
 4838: 
 4838:   var interfaceName = "nsIDOM" + getClassName(aTagName);
 4838:   if (interfaceName in Components.interfaces) {  // no nsIDOMHTMLSpanElement
 4838:     interfaces[aTagName].push(interfaceName);
 4838:     interfacesNonClassinfo[aTagName].push("nsIDOMHTMLElement");
70902:   } else {
70902:     // Inherits directly from nsIDOMHTMLElement.
 4838:     interfaces[aTagName].push("nsIDOMHTMLElement");
 4838:   }
 4838: 
 4838:   var interfaceNameNS = "nsIDOMNS" + getClassName(aTagName);
 4838:   if (interfaceNameNS in Components.interfaces) {
 4838:     interfaces[aTagName].push(interfaceNameNS);
 4838:   }
 4838: 
 4838:   if (arguments.length > 2) {
 4838:     for (var i = 0; i < arguments[2].length; ++i) {
 4838:       interfaces[aTagName].push(arguments[2][i]);
 4838:     }
 4838:   }
 4838: 
 4838:   if (arguments.length > 3) {
 4838:     for (i = 0; i < arguments[3].length; ++i) {
 4838:       interfacesNonClassinfo[aTagName].push(arguments[3][i]);
 4838:     }
 4838:   }
 4838: }
 4838: 
 4838: const objectIfaces = [
 4838:     "imgIDecoderObserver", "nsIRequestObserver", "nsIStreamListener",
 4838:     "nsIFrameLoaderOwner", "nsIObjectLoadingContent", "nsIInterfaceRequestor",
 4838:     "nsIChannelEventSink"
 4838:   ];
 4838: 
 4838: var objectIfaces2 = [];
 4838: for each (var iface in objectIfaces) {
 4838:   objectIfaces2.push(iface);
 4838: }
 4838: objectIfaces2.push("nsIImageLoadingContent");
 4838: 
 4838: /* List copy/pasted from nsHTMLTagList.h, with the second field modified to the
 4838:    correct classinfo (instead of the impl class) in the following cases:
 4838: 
 4838:    applet
 4838:    base
 4838:    blockquote
 4838:    dir
 4838:    dl
 4838:    embed
 4838:    menu
 4838:    ol
 4838:    param
 4838:    q
 4838:    ul
 4838:    wbr
40996:    head
40996:    html
 4838:  */
43860: 
48890: HTML_TAG("a", "Anchor");
70902: HTML_TAG("abbr", "");
70902: HTML_TAG("acronym", "");
70902: HTML_TAG("address", "");
 4838: HTML_TAG("applet", "Applet", [], objectIfaces);
48337: HTML_TAG("area", "Area");
70902: HTML_TAG("article", "");
70902: HTML_TAG("aside", "");
70902: HTML_TAG("b", "");
 4838: HTML_TAG("base", "Base");
70902: HTML_TAG("bdo", "");
 4838: HTML_TAG("bgsound", "Span");
70902: HTML_TAG("big", "");
70902: HTML_TAG("blink", "");
 4838: HTML_TAG("blockquote", "Quote");
 4838: HTML_TAG("body", "Body");
 4838: HTML_TAG("br", "BR");
 4838: HTML_TAG("button", "Button");
 4838: HTML_TAG("canvas", "Canvas");
 4838: HTML_TAG("caption", "TableCaption");
70902: HTML_TAG("center", "");
70902: HTML_TAG("cite", "");
70902: HTML_TAG("code", "");
 4838: HTML_TAG("col", "TableCol");
 4838: HTML_TAG("colgroup", "TableCol");
52362: HTML_TAG("datalist", "DataList");
70902: HTML_TAG("dd", "");
70902: HTML_TAG("del", "Mod");
70902: HTML_TAG("dfn", "");
 4838: HTML_TAG("dir", "Directory");
 4838: HTML_TAG("div", "Div");
 4838: HTML_TAG("dl", "DList");
70902: HTML_TAG("dt", "");
70902: HTML_TAG("em", "");
 4838: HTML_TAG("embed", "Embed", [ "nsIDOMGetSVGDocument" ], objectIfaces);
 4838: HTML_TAG("fieldset", "FieldSet");
70902: HTML_TAG("figcaption", "")
70902: HTML_TAG("figure", "")
 4838: HTML_TAG("font", "Font");
70902: HTML_TAG("footer", "")
 4838: HTML_TAG("form", "Form", [], [ "nsIWebProgressListener" ]);
87826: HTML_TAG("frame", "Frame", [ "nsIDOMMozBrowserFrame" ], [ "nsIFrameLoaderOwner" ]);
 4838: HTML_TAG("frameset", "FrameSet");
 4838: HTML_TAG("h1", "Heading");
 4838: HTML_TAG("h2", "Heading");
 4838: HTML_TAG("h3", "Heading");
 4838: HTML_TAG("h4", "Heading");
 4838: HTML_TAG("h5", "Heading");
 4838: HTML_TAG("h6", "Heading");
 4838: HTML_TAG("head", "Head");
70902: HTML_TAG("header", "")
70902: HTML_TAG("hgroup", "")
 4838: HTML_TAG("hr", "HR");
 4838: HTML_TAG("html", "Html");
70902: HTML_TAG("i", "");
87826: HTML_TAG("iframe", "IFrame", [ "nsIDOMGetSVGDocument", "nsIDOMMozBrowserFrame" ],
 4838:                              [ "nsIFrameLoaderOwner" ]);
 4838: HTML_TAG("image", "Span");
 4838: HTML_TAG("img", "Image", [], [ "imgIDecoderObserver",
 4838:                                "nsIImageLoadingContent" ]);
 4838: HTML_TAG("input", "Input", [], [ "imgIDecoderObserver",
 4838:                                  "nsIImageLoadingContent",
 4838:                                  "nsIDOMNSEditableElement" ]);
70902: HTML_TAG("ins", "Mod");
70902: HTML_TAG("kbd", "");
 4838: HTML_TAG("keygen", "Span");
 4838: HTML_TAG("label", "Label");
 4838: HTML_TAG("legend", "Legend");
 4838: HTML_TAG("li", "LI");
 4838: HTML_TAG("link", "Link", [ "nsIDOMLinkStyle" ]);
70902: HTML_TAG("listing", "");
 4838: HTML_TAG("map", "Map");
70902: HTML_TAG("mark", "");
 4838: HTML_TAG("marquee", "Div");
 4838: HTML_TAG("menu", "Menu");
 4838: HTML_TAG("meta", "Meta");
 4838: HTML_TAG("multicol", "Span");
70902: HTML_TAG("nav", "")
70902: HTML_TAG("nobr", "");
70902: HTML_TAG("noembed", "");
70902: HTML_TAG("noframes", "");
70902: HTML_TAG("noscript", "");
15384: HTML_TAG("object", "Object", [ "nsIDOMGetSVGDocument" ],
 4838:                              objectIfaces.concat([ "nsIImageLoadingContent" ]));
 4838: HTML_TAG("ol", "OList");
 4838: HTML_TAG("optgroup", "OptGroup");
 4838: HTML_TAG("option", "Option");
 4838: HTML_TAG("p", "Paragraph");
 4838: HTML_TAG("param", "Param");
70902: HTML_TAG("plaintext", "");
 4838: HTML_TAG("pre", "Pre");
 4838: HTML_TAG("q", "Quote");
70902: HTML_TAG("s", "");
70902: HTML_TAG("samp", "");
 4838: HTML_TAG("script", "Script", [], [ "nsIScriptLoaderObserver" ]);
70902: HTML_TAG("section", "")
63888: HTML_TAG("select", "Select", ["nsIDOMHTMLSelectElement"]);
70902: HTML_TAG("small", "");
 4838: HTML_TAG("span", "Span");
70902: HTML_TAG("strike", "");
70902: HTML_TAG("strong", "");
 4838: HTML_TAG("style", "Style", [ "nsIDOMLinkStyle" ]);
70902: HTML_TAG("sub", "");
70902: HTML_TAG("sup", "");
 4838: HTML_TAG("table", "Table");
 4838: HTML_TAG("tbody", "TableSection");
 4838: HTML_TAG("td", "TableCell");
 4838: HTML_TAG("textarea", "TextArea", [], [ "nsIDOMNSEditableElement" ]);
 4838: HTML_TAG("tfoot", "TableSection");
 4838: HTML_TAG("th", "TableCell");
 4838: HTML_TAG("thead", "TableSection");
 4838: HTML_TAG("title", "Title");
 4838: HTML_TAG("tr", "TableRow");
70902: HTML_TAG("tt", "");
70902: HTML_TAG("u", "");
 4838: HTML_TAG("ul", "UList");
70902: HTML_TAG("var", "");
70902: HTML_TAG("wbr", "");
70902: HTML_TAG("xmp", "");
 4838: 
 4838: function tagName(aTag) {
 4838:   return "<" + aTag + ">";
 4838: }
 4838: 
 4838: for each (var tag in allTags) {
 4838:   var node = document.createElement(tag);
 4838: 
 4838:   // Have to use the proto's toString(), since HTMLAnchorElement and company
 4838:   // override toString().
 4838:   var nodeString = HTMLElement.prototype.toString.apply(node);
 4838: 
 4838:   // Debug builds have extra info, so chop off after "Element" if it's followed
 4838:   // by ' ' or ']'
 4838:   nodeString = nodeString.replace(/Element[\] ].*/, "Element");
 4838: 
 4838:   var classInfoString = getClassName(tag);
 4838:   is(nodeString, "[object " + classInfoString,
 4838:      "Unexpected classname for " + tagName(tag));
 4838:   is(node instanceof window[classInfoString], true,
 4838:      tagName(tag) + " not an instance of " + classInfos[tag]);
63959:   is(node instanceof HTMLUnknownElement, false,
63959:      tagName(tag) + " is an instance of HTMLUnknownElement");
63959:   is(node instanceof Components.interfaces.nsIDOMHTMLUnknownElement, false,
63959:      tagName(tag) + " is an instance of nsIDOMHTMLUnknownElement");
 4838: 
 4838:   // Check that each node QIs to all the things we expect it to QI to
 4838:   for each (var iface in interfaces[tag].concat(interfacesNonClassinfo[tag])) {
 4838:     is(iface in Components.interfaces, true,
 4838:        iface + " not in Components.interfaces");
 4838:     is(node instanceof Components.interfaces[iface], true,
 4838:        tagName(tag) + " does not QI to " + iface);
 4838:   }
 4838: 
 4838:   // Now see what classinfo reports
 4838:   netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 4838:   var nodeClassInfo = node.QueryInterface(Components.interfaces.nsIClassInfo);
 4838:   var count = {};
 6176:   var classInfoInterfaces =
 6176:     nodeClassInfo.getInterfaces(count).
 6176:     map(function(id) { return Components.interfacesByID[id].toString(); });
 4838: 
 4838:   // Make sure that we know about all the things classinfo claims
 4838:   for each (var classInfoInterface in classInfoInterfaces) {
 4838:     isnot(interfaces[tag].indexOf(classInfoInterface), -1,
 4838:           "Should know about " + tagName(tag) + " implementing " +
 4838:           classInfoInterface);
 4838:   }
 4838: 
 4838:   // And make sure classinfo claims all the things we know about
 4838:   for each (iface in interfaces[tag]) {
 4838:     isnot(classInfoInterfaces.indexOf(iface), -1,
 4838:           "Classinfo for " + tagName(tag) + " should claim to implement " +
 4838:           iface);
 4838:   }
 4838: }
 4838: </script>
 4838: </pre>
 4838: </body>
 4838: </html>
 4838: 
