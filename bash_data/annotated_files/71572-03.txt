32195: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
32836: /* ***** BEGIN LICENSE BLOCK *****
32836:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
32836:  *
32836:  * The contents of this file are subject to the Mozilla Public License Version
32836:  * 1.1 (the "License"); you may not use this file except in compliance with
32836:  * the License. You may obtain a copy of the License at
32836:  * http://www.mozilla.org/MPL/
32836:  *
32836:  * Software distributed under the License is distributed on an "AS IS" basis,
32836:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
32836:  * for the specific language governing rights and limitations under the
32836:  * License.
32836:  *
32836:  * The Original Code is mozilla.org code.
32836:  *
32836:  * The Initial Developer of the Original Code is
32836:  *   Mozilla Corporation.
32836:  * Portions created by the Initial Developer are Copyright (C) 2009
32836:  * the Initial Developer. All Rights Reserved.
32836:  *
32836:  * Contributor(s):
32836:  *   Vladimir Vukicevic <vladimir@pobox.com> (original author)
32836:  *   Mark Steele <mwsteele@gmail.com>
32836:  *
32836:  * Alternatively, the contents of this file may be used under the terms of
32836:  * either the GNU General Public License Version 2 or later (the "GPL"), or
32836:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
32836:  * in which case the provisions of the GPL or the LGPL are applicable instead
32836:  * of those above. If you wish to allow use of your version of this file only
32836:  * under the terms of either the GPL or the LGPL, and not to allow others to
32836:  * use your version of this file under the terms of the MPL, indicate your
32836:  * decision by deleting the provisions above and replace them with the notice
32836:  * and other provisions required by the GPL or the LGPL. If you do not delete
32836:  * the provisions above, a recipient may use your version of this file under
32836:  * the terms of any one of the MPL, the GPL or the LGPL.
32836:  *
32836:  * ***** END LICENSE BLOCK ***** */
32836: 
42477: #include <stdarg.h>
42477: 
32195: #include "WebGLContext.h"
32195: 
32250: #include "prprf.h"
32250: 
55907: #include "nsIJSContextStack.h"
55907: #include "jsapi.h"
32195: #include "nsIScriptSecurityManager.h"
32195: #include "nsIPrefBranch.h"
32195: #include "nsServiceManagerUtils.h"
32195: #include "nsIPrefBranch.h"
32195: #include "nsIPrefService.h"
32195: #include "nsIVariant.h"
32195: 
32195: #include "nsIDOMDocument.h"
32195: #include "nsIDOMEvent.h"
32195: #include "nsIDOMEventTarget.h"
32195: #include "nsIPrivateDOMEvent.h"
32195: #include "nsIDOMDataContainerEvent.h"
32195: 
32195: #include "nsContentUtils.h"
32195: 
32195: #if 0
32195: #include "nsIContentURIGrouper.h"
32195: #include "nsIContentPrefService.h"
32195: #endif
32195: 
32195: using namespace mozilla;
32195: 
32195: void
32195: WebGLContext::LogMessage(const char *fmt, ...)
32195: {
32195:     va_list ap;
32195:     va_start(ap, fmt);
42477: 
42477:     LogMessage(fmt, ap);
42477: 
42477:     va_end(ap);
42477: }
42477: 
42477: void
42477: WebGLContext::LogMessage(const char *fmt, va_list ap)
42477: {
55908:     if (!fmt) return;
55908: 
51895:     char buf[1024];
55907:     PR_vsnprintf(buf, 1024, fmt, ap);
32195: 
55907:     // no need to print to stderr, as JS_ReportWarning takes care of this for us.
55907: 
55907:     nsCOMPtr<nsIJSContextStack> stack = do_GetService("@mozilla.org/js/xpc/ContextStack;1");
55907:     JSContext* ccx = nsnull;
55907:     if (stack && NS_SUCCEEDED(stack->Peek(&ccx)) && ccx)
55907:         JS_ReportWarning(ccx, "WebGL: %s", buf);
32195: }
32195: 
53695: void
53695: WebGLContext::LogMessageIfVerbose(const char *fmt, ...)
53695: {
53695:     va_list ap;
53695:     va_start(ap, fmt);
53695: 
58669:     LogMessageIfVerbose(fmt, ap);
53695: 
53695:     va_end(ap);
53695: }
53695: 
55908: void
55908: WebGLContext::LogMessageIfVerbose(const char *fmt, va_list ap)
55908: {
58669:     static PRBool firstTime = PR_TRUE;
55908: 
58669:     if (mVerbose)
55908:         LogMessage(fmt, ap);
58669:     else if (firstTime)
58669:         LogMessage("There are WebGL warnings or messages in this page, but they are hidden. To see them, "
58669:                    "go to about:config, set the webgl.verbose preference, and reload this page.");
58669: 
58669:     firstTime = PR_FALSE;
55908: }
55908: 
32195: nsresult
42916: WebGLContext::SynthesizeGLError(WebGLenum err)
32195: {
42477:     // If there is already a pending error, don't overwrite it;
42477:     // but if there isn't, then we need to check for a gl error
42477:     // that may have occurred before this one and use that code
42477:     // instead.
32195: 
42477:     if (mSynthesizedGLError == LOCAL_GL_NO_ERROR) {
42477:         MakeContextCurrent();
42477: 
42477:         mSynthesizedGLError = gl->fGetError();
42477: 
42477:         if (mSynthesizedGLError == LOCAL_GL_NO_ERROR)
42477:             mSynthesizedGLError = err;
32195:     }
32195: 
42477:     return NS_OK;
42477: }
32195: 
42477: nsresult
42916: WebGLContext::SynthesizeGLError(WebGLenum err, const char *fmt, ...)
42477: {
42477:     va_list va;
42477:     va_start(va, fmt);
55908:     LogMessageIfVerbose(fmt, va);
42477:     va_end(va);
42477: 
42477:     return SynthesizeGLError(err);
32195: }
42477: 
42477: nsresult
42477: WebGLContext::ErrorInvalidEnum(const char *fmt, ...)
42477: {
42477:     va_list va;
42477:     va_start(va, fmt);
55908:     LogMessageIfVerbose(fmt, va);
42477:     va_end(va);
42477: 
42477:     return SynthesizeGLError(LOCAL_GL_INVALID_ENUM);
42477: }
42477: 
42477: nsresult
42477: WebGLContext::ErrorInvalidOperation(const char *fmt, ...)
42477: {
42477:     va_list va;
42477:     va_start(va, fmt);
55908:     LogMessageIfVerbose(fmt, va);
42477:     va_end(va);
42477: 
42477:     return SynthesizeGLError(LOCAL_GL_INVALID_OPERATION);
42477: }
42477: 
42477: nsresult
42477: WebGLContext::ErrorInvalidValue(const char *fmt, ...)
42477: {
42477:     va_list va;
42477:     va_start(va, fmt);
55908:     LogMessageIfVerbose(fmt, va);
42477:     va_end(va);
42477: 
42477:     return SynthesizeGLError(LOCAL_GL_INVALID_VALUE);
42477: }
63070: 
63070: nsresult
63070: WebGLContext::ErrorOutOfMemory(const char *fmt, ...)
63070: {
63070:     va_list va;
63070:     va_start(va, fmt);
63070:     LogMessageIfVerbose(fmt, va);
63070:     va_end(va);
63070: 
63070:     return SynthesizeGLError(LOCAL_GL_OUT_OF_MEMORY);
63070: }
63070: 
