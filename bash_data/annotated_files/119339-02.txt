116431: #include "nsIThread.idl"
116431: #include "nsIDOMWindow.idl"
116431: 
116431: interface nsIDOMMediaStream;
116433: interface nsIDOMDataChannel;
116431: 
116431: /* Do not confuse with nsIDOMRTCPeerConnection. This interface is purely for
116431:  * communication between the PeerConnection JS DOM binding and the C++
116431:  * implementation in SIPCC.
116431:  *
116431:  * See media/webrtc/signaling/include/PeerConnectionImpl.h
116431:  */
116433: [scriptable, uuid(e61821ba-7772-4973-b583-1715e4bbaeed)]
116431: interface IPeerConnectionObserver : nsISupports
116431: {
116431:   /* Constants */
116431:   const long kReadyState = 0x1;
116431:   const long kIceState = 0x2;
116431:   const long kSdpState = 0x3;
116431:   const long kSipccState = 0x4;
116431: 
116431:   /* JSEP callbacks */
116431:   void onCreateOfferSuccess(in string offer);
116431:   void onCreateOfferError(in unsigned long code);
116431:   void onCreateAnswerSuccess(in string answer);
116431:   void onCreateAnswerError(in unsigned long code);
116431:   void onSetLocalDescriptionSuccess(in unsigned long code);
116431:   void onSetRemoteDescriptionSuccess(in unsigned long code);
116431:   void onSetLocalDescriptionError(in unsigned long code);
116431:   void onSetRemoteDescriptionError(in unsigned long code);
116431: 
116433:   /* Data channel callbacks */
116433:   void notifyDataChannel(in nsIDOMDataChannel channel);
116433:   void notifyConnection();
116433:   void notifyClosedConnection();
116433: 
116431:   /* Notification of one of several types of state changed */
116431:   void onStateChange(in unsigned long state);
116431: 
116431:   /* Changes to MediaStreams */
116431:   void onAddStream(in nsIDOMMediaStream stream, in string type);
116431:   void onRemoveStream();
116431:   void onAddTrack();
116431:   void onRemoveTrack();
116431: 
116431:   /* When SDP is parsed and a candidate line is found this method is called.
116431:    * It should hook back into the media transport to notify it of ICE candidates
116431:    * listed in the SDP PeerConnectionImpl does not parse ICE candidates, just
116431:    * pulls them out of the SDP.
116431:    */
116431:   void foundIceCandidate(in string candidate);
116431: };
116431: 
119339: [scriptable, uuid(f6819246-f5af-40f2-ab82-e166d5da7ba0)]
116431: interface IPeerConnection : nsISupports
116431: {
116431:   const unsigned long kHintAudio = 0x00000001;
116431:   const unsigned long kHintVideo = 0x00000002;
116431: 
116431:   const long kActionNone = -1;
116431:   const long kActionOffer = 0;
116431:   const long kActionAnswer = 1;
116431:   const long kActionPRAnswer = 2;
116431: 
116431:   const long kIceGathering = 0;
116431:   const long kIceWaiting = 1;
116431:   const long kIceChecking = 2;
116431:   const long kIceConnected = 3;
116431:   const long kIceFailed = 4;
116431: 
116431:   /* Must be called first. Observer events will be dispatched on the thread provided */
116431:   void initialize(in IPeerConnectionObserver observer, in nsIDOMWindow window,
116431:                   [optional] in nsIThread thread);
116431: 
116431:   /* JSEP calls */
119339:   void createOffer(in nsIPropertyBag2 constraints);
119339:   void createAnswer(in nsIPropertyBag2 constraints, in string offer);
116431:   void setLocalDescription(in long action, in string sdp);
116431:   void setRemoteDescription(in long action, in string sdp);
116431: 
116431:   /* Adds the stream created by GetUserMedia */
116431:   void addStream(in nsIDOMMediaStream stream);
116431:   void removeStream(in nsIDOMMediaStream stream);
116431:   void closeStreams();
116431: 
118913:   [implicit_jscontext] readonly attribute jsval localStreams; // MediaStream[]
118913:   [implicit_jscontext] readonly attribute jsval remoteStreams; // MediaStream[]
118913: 
116431:   /* As the ICE candidates roll in this one should be called each time
116431:    * in order to keep the candidate list up-to-date for the next SDP-related
116431:    * call PeerConnectionImpl does not parse ICE candidates, just sticks them
116431:    * into the SDP.
116431:    */
116431:   void addIceCandidate(in string candidate, in string mid, in unsigned short level);
116431: 
116431:   /* Puts the SIPCC engine back to 'kIdle', shuts down threads, deletes state */
116431:   void close();
116431: 
116431:   /* Attributes */
116431:   readonly attribute string localDescription;
116431:   readonly attribute string remoteDescription;
116431: 
116431:   readonly attribute unsigned long iceState;
116431:   readonly attribute unsigned long readyState;
116431:   readonly attribute unsigned long sipccState;
116433: 
116433:   /* Data channels */
116433:   nsIDOMDataChannel createDataChannel(in ACString label,
116433:     in unsigned short type, in boolean outOfOrderAllowed,
116433:     in unsigned short maxTime, in unsigned short maxNum);
116433:   void connectDataConnection(in unsigned short localport,
116433:     in unsigned short remoteport, in unsigned short numstreams);
116431: };
