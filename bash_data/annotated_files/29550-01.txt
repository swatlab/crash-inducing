    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Hubbie Shaw
    1:  *   Doug Turner <dougt@netscape.com>
    1:  *   Brian Ryner <bryner@brianryner.com>
    1:  *   Kai Engert <kaie@netscape.com>
    1:  *   Kai Engert <kengert@redhat.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef _nsNSSComponent_h_
    1: #define _nsNSSComponent_h_
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsISignatureVerifier.h"
    1: #include "nsIURIContentListener.h"
    1: #include "nsIStreamListener.h"
    1: #include "nsIEntropyCollector.h"
    1: #include "nsString.h"
    1: #include "nsIStringBundle.h"
    1: #include "nsIDOMEventTarget.h"
    1: #include "nsIPrefBranch.h"
    1: #include "nsIObserver.h"
    1: #include "nsIObserverService.h"
    1: #include "nsWeakReference.h"
    1: #include "nsIScriptSecurityManager.h"
    1: #include "nsSmartCardMonitor.h"
    1: #include "nsINSSErrorsService.h"
    1: #include "nsITimer.h"
    1: #include "nsNetUtil.h"
    1: #include "nsHashtable.h"
    1: #include "prlock.h"
    1: #include "nsICryptoHash.h"
12341: #include "nsICryptoHMAC.h"
    1: #include "hasht.h"
    1: #include "nsNSSCallbacks.h"
    1: 
    1: #include "nsNSSHelper.h"
28675: #include "nsClientAuthRemember.h"
    1: 
    1: #define NS_NSSCOMPONENT_CID \
    1: {0xa277189c, 0x1dd1, 0x11b2, {0xa8, 0xc9, 0xe4, 0xe8, 0xbf, 0xb1, 0x33, 0x8e}}
    1: 
    1: #define PSM_COMPONENT_CONTRACTID "@mozilla.org/psm;1"
    1: #define PSM_COMPONENT_CLASSNAME "Mozilla PSM Component"
    1: 
    1: //Define an interface that we can use to look up from the
    1: //callbacks passed to NSS.
    1: 
29543: #define NS_INSSCOMPONENT_IID_STR "6ffbb526-205b-49c5-ae3f-5959c084075e"
    1: #define NS_INSSCOMPONENT_IID \
29543:   { 0x6ffbb526, 0x205b, 0x49c5, \
29550:     { 0xae, 0x3f, 0x59, 0x59, 0xc0, 0x84, 0x7, 0x5e } }
    1: 
    1: #define NS_PSMCONTENTLISTEN_CID {0xc94f4a30, 0x64d7, 0x11d4, {0x99, 0x60, 0x00, 0xb0, 0xd0, 0x23, 0x54, 0xa0}}
    1: #define NS_PSMCONTENTLISTEN_CONTRACTID "@mozilla.org/security/psmdownload;1"
    1: 
12341: #define NS_CRYPTO_HASH_CLASSNAME "Mozilla Crypto Hash Function Component"
    1: #define NS_CRYPTO_HASH_CID {0x36a1d3b3, 0xd886, 0x4317, {0x96, 0xff, 0x87, 0xb0, 0x00, 0x5c, 0xfe, 0xf7}}
    1: 
12341: #define NS_CRYPTO_HMAC_CLASSNAME "Mozilla Crypto HMAC Function Component"
12341: #define NS_CRYPTO_HMAC_CID {0xa496d0a2, 0xdff7, 0x4e23, {0xbd, 0x65, 0x1c, 0xa7, 0x42, 0xfa, 0x17, 0x8a}}
12341: 
25625: enum EnsureNSSOperator
25625: {
25625:   nssLoading = 0,
25625:   nssInitSucceeded = 1,
25625:   nssInitFailed = 2,
25625:   nssShutdown = 3,
25625:   nssEnsure = 4
25625: };
25625: 
25625: extern PRBool EnsureNSSInitialized(EnsureNSSOperator op);
25625: 
    1: //--------------------------------------------
    1: // Now we need a content listener to register 
    1: //--------------------------------------------
    1: class PSMContentDownloader : public nsIStreamListener
    1: {
    1: public:
    1:   PSMContentDownloader() {NS_ASSERTION(PR_FALSE, "don't use this constructor."); }
    1:   PSMContentDownloader(PRUint32 type);
    1:   virtual ~PSMContentDownloader();
    1:   void setSilentDownload(PRBool flag);
    1:   void setCrlAutodownloadKey(nsAutoString key);
    1: 
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSIREQUESTOBSERVER
    1:   NS_DECL_NSISTREAMLISTENER
    1: 
    1:   enum {UNKNOWN_TYPE = 0};
    1:   enum {X509_CA_CERT  = 1};
    1:   enum {X509_USER_CERT  = 2};
    1:   enum {X509_EMAIL_CERT  = 3};
    1:   enum {X509_SERVER_CERT  = 4};
    1:   enum {PKCS7_CRL = 5};
    1: 
    1: protected:
    1:   char* mByteData;
    1:   PRInt32 mBufferOffset;
    1:   PRInt32 mBufferSize;
    1:   PRUint32 mType;
    1:   PRBool mDoSilentDownload;
16996:   nsString mCrlAutoDownloadKey;
    1:   nsCOMPtr<nsIURI> mURI;
    1:   nsresult handleContentDownloadError(nsresult errCode);
    1: };
    1: 
    1: class NS_NO_VTABLE nsINSSComponent : public nsISupports {
    1:  public:
    1:   NS_DECLARE_STATIC_IID_ACCESSOR(NS_INSSCOMPONENT_IID)
    1: 
    1:   NS_IMETHOD GetPIPNSSBundleString(const char *name,
    1:                                    nsAString &outString) = 0;
    1:   NS_IMETHOD PIPBundleFormatStringFromName(const char *name,
    1:                                            const PRUnichar **params,
    1:                                            PRUint32 numParams,
    1:                                            nsAString &outString) = 0;
    1: 
 2850:   NS_IMETHOD GetNSSBundleString(const char *name,
 2850:                                 nsAString &outString) = 0;
 2850:   NS_IMETHOD NSSBundleFormatStringFromName(const char *name,
 2850:                                            const PRUnichar **params,
 2850:                                            PRUint32 numParams,
 2850:                                            nsAString &outString) = 0;
 2850: 
    1:   // This method will just disable OCSP in NSS, it will not
    1:   // alter the respective pref values.
    1:   NS_IMETHOD SkipOcsp() = 0;
    1: 
    1:   // This method will set the OCSP value according to the 
    1:   // values in the preferences.
    1:   NS_IMETHOD SkipOcspOff() = 0;
    1: 
    1:   NS_IMETHOD RememberCert(CERTCertificate *cert) = 0;
    1: 
    1:   NS_IMETHOD RemoveCrlFromList(nsAutoString) = 0;
    1: 
    1:   NS_IMETHOD DefineNextTimer() = 0;
    1: 
    1:   NS_IMETHOD DownloadCRLDirectly(nsAutoString, nsAutoString) = 0;
    1:   
    1:   NS_IMETHOD LogoutAuthenticatedPK11() = 0;
    1: 
    1:   NS_IMETHOD LaunchSmartCardThread(SECMODModule *module) = 0;
    1: 
    1:   NS_IMETHOD ShutdownSmartCardThread(SECMODModule *module) = 0;
    1: 
    1:   NS_IMETHOD PostEvent(const nsAString &eventType, const nsAString &token) = 0;
    1: 
    1:   NS_IMETHOD DispatchEvent(const nsAString &eventType, const nsAString &token) = 0;
    1:   
28675:   NS_IMETHOD GetClientAuthRememberService(nsClientAuthRememberService **cars) = 0;
28675: 
 7105:   NS_IMETHOD EnsureIdentityInfoLoaded() = 0;
29543: 
29543:   NS_IMETHOD IsNSSInitialized(PRBool *initialized) = 0;
    1: };
    1: 
    1: NS_DEFINE_STATIC_IID_ACCESSOR(nsINSSComponent, NS_INSSCOMPONENT_IID)
    1: 
    1: class nsCryptoHash : public nsICryptoHash
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSICRYPTOHASH
    1: 
    1:   nsCryptoHash();
    1: 
    1: private:
    1:   ~nsCryptoHash();
    1:   HASHContext* mHashContext;
    1: };
    1: 
12341: class nsCryptoHMAC : public nsICryptoHMAC
12341: {
12341: public:
12341:   NS_DECL_ISUPPORTS
12341:   NS_DECL_NSICRYPTOHMAC
12341: 
12341:   nsCryptoHMAC();
12341: 
12341: private:
12341:   ~nsCryptoHMAC();
12341: 
12341:   PK11Context* mHMACContext;
12341: };
12341: 
    1: struct PRLock;
    1: class nsNSSShutDownList;
    1: class nsSSLThread;
    1: class nsCertVerificationThread;
    1: 
    1: // Implementation of the PSM component interface.
    1: class nsNSSComponent : public nsISignatureVerifier,
    1:                        public nsIEntropyCollector,
    1:                        public nsINSSComponent,
    1:                        public nsIObserver,
    1:                        public nsSupportsWeakReference,
    1:                        public nsITimerCallback,
    1:                        public nsINSSErrorsService
    1: {
    1: public:
  731:   NS_DEFINE_STATIC_CID_ACCESSOR( NS_NSSCOMPONENT_CID )
    1: 
    1:   nsNSSComponent();
    1:   virtual ~nsNSSComponent();
    1: 
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSISIGNATUREVERIFIER
    1:   NS_DECL_NSIENTROPYCOLLECTOR
    1:   NS_DECL_NSIOBSERVER
    1:   NS_DECL_NSITIMERCALLBACK
    1:   NS_DECL_NSINSSERRORSSERVICE
    1: 
    1:   NS_METHOD Init();
    1: 
    1:   NS_IMETHOD GetPIPNSSBundleString(const char *name,
    1:                                    nsAString &outString);
    1:   NS_IMETHOD PIPBundleFormatStringFromName(const char *name,
    1:                                            const PRUnichar **params,
    1:                                            PRUint32 numParams,
    1:                                            nsAString &outString);
 2850:   NS_IMETHOD GetNSSBundleString(const char *name,
 2850:                                nsAString &outString);
 2850:   NS_IMETHOD NSSBundleFormatStringFromName(const char *name,
 2850:                                            const PRUnichar **params,
 2850:                                            PRUint32 numParams,
 2850:                                            nsAString &outString);
    1:   NS_IMETHOD SkipOcsp();
    1:   NS_IMETHOD SkipOcspOff();
    1:   nsresult InitializeCRLUpdateTimer();
    1:   nsresult StopCRLUpdateTimer();
    1:   NS_IMETHOD RemoveCrlFromList(nsAutoString);
    1:   NS_IMETHOD DefineNextTimer();
    1:   NS_IMETHOD LogoutAuthenticatedPK11();
    1:   NS_IMETHOD DownloadCRLDirectly(nsAutoString, nsAutoString);
    1:   NS_IMETHOD RememberCert(CERTCertificate *cert);
    1:   static nsresult GetNSSCipherIDFromPrefString(const nsACString &aPrefString, PRUint16 &aCipherId);
    1: 
    1:   NS_IMETHOD LaunchSmartCardThread(SECMODModule *module);
    1:   NS_IMETHOD ShutdownSmartCardThread(SECMODModule *module);
    1:   NS_IMETHOD PostEvent(const nsAString &eventType, const nsAString &token);
    1:   NS_IMETHOD DispatchEvent(const nsAString &eventType, const nsAString &token);
28675:   NS_IMETHOD GetClientAuthRememberService(nsClientAuthRememberService **cars);
 7105:   NS_IMETHOD EnsureIdentityInfoLoaded();
29543:   NS_IMETHOD IsNSSInitialized(PRBool *initialized);
    1: 
    1: private:
    1: 
    1:   nsresult InitializeNSS(PRBool showWarningBox);
    1:   nsresult ShutdownNSS();
    1: 
    1: #ifdef XP_MACOSX
    1:   void TryCFM2MachOMigration(nsIFile *cfmPath, nsIFile *machoPath);
    1: #endif
    1:   
    1:   enum AlertIdentifier {
    1:     ai_nss_init_problem, 
    1:     ai_sockets_still_active, 
    1:     ai_crypto_ui_active,
    1:     ai_incomplete_logout
    1:   };
    1:   
    1:   void ShowAlert(AlertIdentifier ai);
    1:   void InstallLoadableRoots();
    1:   void UnloadLoadableRoots();
    1:   void LaunchSmartCardThreads();
    1:   void ShutdownSmartCardThreads();
 7105:   void CleanupIdentityInfo();
    1:   nsresult InitializePIPNSSBundle();
    1:   nsresult ConfigureInternalPKCS11Token();
    1:   nsresult RegisterPSMContentListener();
    1:   nsresult RegisterObservers();
25625:   nsresult DeregisterObservers();
    1:   nsresult DownloadCrlSilently();
    1:   nsresult PostCRLImportEvent(const nsCSubstring &urlString, nsIStreamListener *psmDownloader);
    1:   nsresult getParamsForNextCrlToDownload(nsAutoString *url, PRTime *time, nsAutoString *key);
    1:   nsresult DispatchEventToWindow(nsIDOMWindow *domWin, const nsAString &eventType, const nsAString &token);
 1427: 
 1427:   // Methods that we use to handle the profile change notifications (and to
 1427:   // synthesize a full profile change when we're just doing a profile startup):
 1427:   void DoProfileApproveChange(nsISupports* aSubject);
 1427:   void DoProfileChangeNetTeardown();
 1427:   void DoProfileChangeTeardown(nsISupports* aSubject);
 1427:   void DoProfileBeforeChange(nsISupports* aSubject);
 1427:   void DoProfileChangeNetRestore();
 1427:   
    1:   PRLock *mutex;
    1:   
    1:   nsCOMPtr<nsIScriptSecurityManager> mScriptSecurityManager;
    1:   nsCOMPtr<nsIStringBundle> mPIPNSSBundle;
 2850:   nsCOMPtr<nsIStringBundle> mNSSErrorsBundle;
    1:   nsCOMPtr<nsIURIContentListener> mPSMContentListener;
    1:   nsCOMPtr<nsIPrefBranch> mPrefBranch;
    1:   nsCOMPtr<nsITimer> mTimer;
    1:   PRBool mNSSInitialized;
    1:   PRBool mObserversRegistered;
    1:   PLHashTable *hashTableCerts;
    1:   nsAutoString mDownloadURL;
    1:   nsAutoString mCrlUpdateKey;
    1:   PRLock *mCrlTimerLock;
    1:   nsHashtable *crlsScheduledForDownload;
    1:   PRBool crlDownloadTimerOn;
    1:   PRBool mUpdateTimerInitialized;
    1:   static int mInstanceCount;
    1:   nsNSSShutDownList *mShutdownObjectList;
    1:   SmartCardThreadList *mThreadList;
    1:   PRBool mIsNetworkDown;
    1:   nsSSLThread *mSSLThread;
    1:   nsCertVerificationThread *mCertVerificationThread;
    1:   nsNSSHttpInterface mHttpForNSS;
28675:   nsRefPtr<nsClientAuthRememberService> mClientAuthRememberService;
 7105: 
 7105:   static PRStatus PR_CALLBACK IdentityInfoInit(void);
 7105:   PRCallOnceType mIdentityInfoCallOnce;
    1: };
    1: 
    1: class PSMContentListener : public nsIURIContentListener,
    1:                             public nsSupportsWeakReference {
    1: public:
    1:   PSMContentListener();
    1:   virtual ~PSMContentListener();
    1:   nsresult init();
    1: 
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_NSIURICONTENTLISTENER
    1: private:
    1:   nsCOMPtr<nsISupports> mLoadCookie;
    1:   nsCOMPtr<nsIURIContentListener> mParentContentListener;
    1: };
    1: 
    1: class nsNSSErrors
    1: {
    1: public:
    1:   static const char *getDefaultErrorStringName(PRInt32 err);
    1:   static const char *getOverrideErrorStringName(PRInt32 aErrorCode);
    1:   static nsresult getErrorMessageFromCode(PRInt32 err,
    1:                                           nsINSSComponent *component,
    1:                                           nsString &returnedMessage);
    1: };
    1: 
    1: #endif // _nsNSSComponent_h_
    1: 
