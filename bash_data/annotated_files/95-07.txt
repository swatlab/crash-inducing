 1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 1: /* ***** BEGIN LICENSE BLOCK *****
 1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 1:  *
 1:  * The contents of this file are subject to the Mozilla Public License Version
 1:  * 1.1 (the "License"); you may not use this file except in compliance with
 1:  * the License. You may obtain a copy of the License at
 1:  * http://www.mozilla.org/MPL/
 1:  *
 1:  * Software distributed under the License is distributed on an "AS IS" basis,
 1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 1:  * for the specific language governing rights and limitations under the
 1:  * License.
 1:  *
 1:  * The Original Code is mozilla.org code.
 1:  *
 1:  * The Initial Developer of the Original Code is
 1:  * Netscape Communications Corporation.
 1:  * Portions created by the Initial Developer are Copyright (C) 1998
 1:  * the Initial Developer. All Rights Reserved.
 1:  *
 1:  * Contributor(s):
 1:  *   Pierre Phaneuf <pp@ludusdesign.com>
 1:  *   Mats Palmgren <mats.palmgren@bredband.net>
 1:  *
 1:  * Alternatively, the contents of this file may be used under the terms of
 1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
 1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 1:  * in which case the provisions of the GPL or the LGPL are applicable instead
 1:  * of those above. If you wish to allow use of your version of this file only
 1:  * under the terms of either the GPL or the LGPL, and not to allow others to
 1:  * use your version of this file under the terms of the MPL, indicate your
 1:  * decision by deleting the provisions above and replace them with the notice
 1:  * and other provisions required by the GPL or the LGPL. If you do not delete
 1:  * the provisions above, a recipient may use your version of this file under
 1:  * the terms of any one of the MPL, the GPL or the LGPL.
 1:  *
 1:  * ***** END LICENSE BLOCK ***** */
 1: #include "nsCOMPtr.h"
 1: #include "nsReadableUtils.h"
 1: #include "nsComboboxControlFrame.h"
 1: #include "nsIDOMEventReceiver.h"
 1: #include "nsFrameManager.h"
 1: #include "nsFormControlFrame.h"
 1: #include "nsGfxButtonControlFrame.h"
 1: #include "nsGkAtoms.h"
 1: #include "nsCSSAnonBoxes.h"
 1: #include "nsHTMLParts.h"
 1: #include "nsIFormControl.h"
 1: #include "nsINameSpaceManager.h"
 1: #include "nsIDOMElement.h"
 1: #include "nsIListControlFrame.h"
 1: #include "nsIDOMHTMLCollection.h" 
 1: #include "nsIDOMHTMLSelectElement.h" 
 1: #include "nsIDOMHTMLOptionElement.h" 
 1: #include "nsIDOMNSHTMLOptionCollectn.h" 
 1: #include "nsIPresShell.h"
 1: #include "nsIDeviceContext.h"
 1: #include "nsIView.h"
 1: #include "nsIViewManager.h"
 1: #include "nsIScrollableView.h"
 1: #include "nsEventDispatcher.h"
 1: #include "nsIEventStateManager.h"
 1: #include "nsIEventListenerManager.h"
 1: #include "nsIDOMNode.h"
 1: #include "nsIPrivateDOMEvent.h"
 1: #include "nsISelectControlFrame.h"
 1: #include "nsXPCOM.h"
 1: #include "nsISupportsPrimitives.h"
 1: #include "nsIComponentManager.h"
 1: #include "nsContentUtils.h"
 1: #include "nsTextFragment.h"
 1: #include "nsCSSFrameConstructor.h"
 1: #include "nsIDocument.h"
 1: #include "nsINodeInfo.h"
 1: #include "nsIScrollableFrame.h"
 1: #include "nsListControlFrame.h"
 1: #include "nsContentCID.h"
 1: #ifdef ACCESSIBILITY
 1: #include "nsIAccessibilityService.h"
 1: #endif
 1: #include "nsIServiceManager.h"
 1: #include "nsIDOMNode.h"
 1: #include "nsGUIEvent.h"
 1: #include "nsAutoPtr.h"
 1: #include "nsStyleSet.h"
 1: #include "nsNodeInfoManager.h"
 1: #include "nsContentCreatorFunctions.h"
 1: #include "nsLayoutUtils.h"
 1: #include "nsDisplayList.h"
 1: #include "nsBoxLayoutState.h"
 1: #include "nsITheme.h"
 1: #include "nsThemeConstants.h"
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::RedisplayTextEvent::Run()
 1: {
 1:   if (mControlFrame)
 1:     mControlFrame->HandleRedisplayTextEvent();
 1:   return NS_OK;
 1: }
 1: 
 1: class nsPresState;
 1: 
 1: #define FIX_FOR_BUG_53259
 1: 
 1: // Drop down list event management.
 1: // The combo box uses the following strategy for managing the drop-down list.
 1: // If the combo box or it's arrow button is clicked on the drop-down list is displayed
 1: // If mouse exit's the combo box with the drop-down list displayed the drop-down list
 1: // is asked to capture events
 1: // The drop-down list will capture all events including mouse down and up and will always
 1: // return with ListWasSelected method call regardless of whether an item in the list was
 1: // actually selected.
 1: // The ListWasSelected code will turn off mouse-capture for the drop-down list.
 1: // The drop-down list does not explicitly set capture when it is in the drop-down mode.
 1: 
 1: 
 1: //XXX: This is temporary. It simulates pseudo states by using a attribute selector on 
 1: 
 1: const PRInt32 kSizeNotSet = -1;
 1: 
 1: /**
 1:  * Helper class that listens to the combo boxes button. If the button is pressed the 
 1:  * combo box is toggled to open or close. this is used by Accessibility which presses
 1:  * that button Programmatically.
 1:  */
 1: class nsComboButtonListener: public nsIDOMMouseListener
 1: {
 1:   public:
 1: 
 1:   NS_DECL_ISUPPORTS
 1:   NS_IMETHOD HandleEvent(nsIDOMEvent* anEvent) { return PR_FALSE; }
 1:   NS_IMETHOD MouseDown(nsIDOMEvent* aMouseEvent) { return PR_FALSE; }
 1:   NS_IMETHOD MouseUp(nsIDOMEvent* aMouseEvent) { return PR_FALSE; }
 1:   NS_IMETHOD MouseDblClick(nsIDOMEvent* aMouseEvent) { return PR_FALSE; }
 1:   NS_IMETHOD MouseOver(nsIDOMEvent* aMouseEvent) { return PR_FALSE; }
 1:   NS_IMETHOD MouseOut(nsIDOMEvent* aMouseEvent) { return PR_FALSE; }
 1: 
 1:   NS_IMETHOD MouseClick(nsIDOMEvent* aMouseEvent) 
 1:   {
 1:     mComboBox->ShowDropDown(!mComboBox->IsDroppedDown());
 1:     return PR_FALSE; 
 1:   }
 1: 
 1:   nsComboButtonListener(nsComboboxControlFrame* aCombobox) 
 1:   { 
 1:     mComboBox = aCombobox; 
 1:   }
 1: 
 1:   virtual ~nsComboButtonListener() {}
 1: 
 1:   nsComboboxControlFrame* mComboBox;
 1: };
 1: 
 1: NS_IMPL_ISUPPORTS1(nsComboButtonListener, nsIDOMMouseListener)
 1: 
 1: // static class data member for Bug 32920
 1: nsComboboxControlFrame * nsComboboxControlFrame::mFocused = nsnull;
 1: 
 1: nsIFrame*
 1: NS_NewComboboxControlFrame(nsIPresShell* aPresShell, nsStyleContext* aContext, PRUint32 aStateFlags)
 1: {
 1:   nsComboboxControlFrame* it = new (aPresShell) nsComboboxControlFrame(aContext);
 1: 
 1:   if (it) {
 1:     // set the state flags (if any are provided)
 1:     it->AddStateBits(aStateFlags);
 1:   }
 1: 
 1:   return it;
 1: }
 1: 
 1: //-----------------------------------------------------------
 1: // Reflow Debugging Macros
 1: // These let us "see" how many reflow counts are happening
 1: //-----------------------------------------------------------
 1: #ifdef DO_REFLOW_COUNTER
 1: 
 1: #define MAX_REFLOW_CNT 1024
 1: static PRInt32 gTotalReqs    = 0;;
 1: static PRInt32 gTotalReflows = 0;;
 1: static PRInt32 gReflowControlCntRQ[MAX_REFLOW_CNT];
 1: static PRInt32 gReflowControlCnt[MAX_REFLOW_CNT];
 1: static PRInt32 gReflowInx = -1;
 1: 
 1: #define REFLOW_COUNTER() \
 1:   if (mReflowId > -1) \
 1:     gReflowControlCnt[mReflowId]++;
 1: 
 1: #define REFLOW_COUNTER_REQUEST() \
 1:   if (mReflowId > -1) \
 1:     gReflowControlCntRQ[mReflowId]++;
 1: 
 1: #define REFLOW_COUNTER_DUMP(__desc) \
 1:   if (mReflowId > -1) {\
 1:     gTotalReqs    += gReflowControlCntRQ[mReflowId];\
 1:     gTotalReflows += gReflowControlCnt[mReflowId];\
 1:     printf("** Id:%5d %s RF: %d RQ: %d   %d/%d  %5.2f\n", \
 1:            mReflowId, (__desc), \
 1:            gReflowControlCnt[mReflowId], \
 1:            gReflowControlCntRQ[mReflowId],\
 1:            gTotalReflows, gTotalReqs, float(gTotalReflows)/float(gTotalReqs)*100.0f);\
 1:   }
 1: 
 1: #define REFLOW_COUNTER_INIT() \
 1:   if (gReflowInx < MAX_REFLOW_CNT) { \
 1:     gReflowInx++; \
 1:     mReflowId = gReflowInx; \
 1:     gReflowControlCnt[mReflowId] = 0; \
 1:     gReflowControlCntRQ[mReflowId] = 0; \
 1:   } else { \
 1:     mReflowId = -1; \
 1:   }
 1: 
 1: // reflow messages
 1: #define REFLOW_DEBUG_MSG(_msg1) printf((_msg1))
 1: #define REFLOW_DEBUG_MSG2(_msg1, _msg2) printf((_msg1), (_msg2))
 1: #define REFLOW_DEBUG_MSG3(_msg1, _msg2, _msg3) printf((_msg1), (_msg2), (_msg3))
 1: #define REFLOW_DEBUG_MSG4(_msg1, _msg2, _msg3, _msg4) printf((_msg1), (_msg2), (_msg3), (_msg4))
 1: 
 1: #else //-------------
 1: 
 1: #define REFLOW_COUNTER_REQUEST() 
 1: #define REFLOW_COUNTER() 
 1: #define REFLOW_COUNTER_DUMP(__desc) 
 1: #define REFLOW_COUNTER_INIT() 
 1: 
 1: #define REFLOW_DEBUG_MSG(_msg) 
 1: #define REFLOW_DEBUG_MSG2(_msg1, _msg2) 
 1: #define REFLOW_DEBUG_MSG3(_msg1, _msg2, _msg3) 
 1: #define REFLOW_DEBUG_MSG4(_msg1, _msg2, _msg3, _msg4) 
 1: 
 1: 
 1: #endif
 1: 
 1: //------------------------------------------
 1: // This is for being VERY noisy
 1: //------------------------------------------
 1: #ifdef DO_VERY_NOISY
 1: #define REFLOW_NOISY_MSG(_msg1) printf((_msg1))
 1: #define REFLOW_NOISY_MSG2(_msg1, _msg2) printf((_msg1), (_msg2))
 1: #define REFLOW_NOISY_MSG3(_msg1, _msg2, _msg3) printf((_msg1), (_msg2), (_msg3))
 1: #define REFLOW_NOISY_MSG4(_msg1, _msg2, _msg3, _msg4) printf((_msg1), (_msg2), (_msg3), (_msg4))
 1: #else
 1: #define REFLOW_NOISY_MSG(_msg) 
 1: #define REFLOW_NOISY_MSG2(_msg1, _msg2) 
 1: #define REFLOW_NOISY_MSG3(_msg1, _msg2, _msg3) 
 1: #define REFLOW_NOISY_MSG4(_msg1, _msg2, _msg3, _msg4) 
 1: #endif
 1: 
 1: //------------------------------------------
 1: // Displays value in pixels or twips
 1: //------------------------------------------
 1: #ifdef DO_PIXELS
 1: #define PX(__v) __v / 15
 1: #else
 1: #define PX(__v) __v 
 1: #endif
 1: 
 1: //------------------------------------------------------
 1: //-- Done with macros
 1: //------------------------------------------------------
 1: 
 1: nsComboboxControlFrame::nsComboboxControlFrame(nsStyleContext* aContext)
 1:   : nsAreaFrame(aContext),
 1:     mDisplayWidth(0)
 1: {
 1:   mListControlFrame            = nsnull;
 1:   mDroppedDown                 = PR_FALSE;
 1:   mDisplayFrame                = nsnull;
 1:   mButtonFrame                 = nsnull;
 1:   mDropdownFrame               = nsnull;
 1: 
 1:   mInRedisplayText = PR_FALSE;
 1: 
 1:   mRecentSelectedIndex = NS_SKIP_NOTIFY_INDEX;
 1: 
 1:   REFLOW_COUNTER_INIT()
 1: }
 1: 
 1: //--------------------------------------------------------------
 1: nsComboboxControlFrame::~nsComboboxControlFrame()
 1: {
 1:   REFLOW_COUNTER_DUMP("nsCCF");
 1: }
 1: 
 1: //--------------------------------------------------------------
 1: // Frames are not refcounted, no need to AddRef
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::QueryInterface(const nsIID& aIID, void** aInstancePtr)
 1: {
 1:   NS_PRECONDITION(0 != aInstancePtr, "null ptr");
 1:   if (NULL == aInstancePtr) {
 1:     return NS_ERROR_NULL_POINTER;
 1:   }
 1: 
 1:   if (aIID.Equals(NS_GET_IID(nsIComboboxControlFrame))) {
 1:     *aInstancePtr = (void*)(nsIComboboxControlFrame*)this;
 1:     return NS_OK;
 1:   } else if (aIID.Equals(NS_GET_IID(nsIFormControlFrame))) {
 1:     *aInstancePtr = (void*)(nsIFormControlFrame*)this;
 1:     return NS_OK;
 1:   } else if (aIID.Equals(NS_GET_IID(nsIAnonymousContentCreator))) {                                         
 1:     *aInstancePtr = (void*)(nsIAnonymousContentCreator*)this;
 1:     return NS_OK;   
 1:   } else if (aIID.Equals(NS_GET_IID(nsISelectControlFrame))) {
 1:     *aInstancePtr = (void *)(nsISelectControlFrame*)this;
 1:     return NS_OK;
 1:   } else if (aIID.Equals(NS_GET_IID(nsIStatefulFrame))) {
 1:     *aInstancePtr = (void*)(nsIStatefulFrame*)this;
 1:     return NS_OK;
 1:   } else if (aIID.Equals(NS_GET_IID(nsIRollupListener))) {
 1:     *aInstancePtr = (void*)(nsIRollupListener*)this;
 1:     return NS_OK;
 1:   } else if (aIID.Equals(NS_GET_IID(nsIScrollableViewProvider))) {
 1:     *aInstancePtr = (void*)(nsIScrollableViewProvider*)this;
 1:     return NS_OK;
 1:   } 
 1:   
 1:   return nsAreaFrame::QueryInterface(aIID, aInstancePtr);
 1: }
 1: 
 1: #ifdef ACCESSIBILITY
 1: NS_IMETHODIMP nsComboboxControlFrame::GetAccessible(nsIAccessible** aAccessible)
 1: {
 1:   nsCOMPtr<nsIAccessibilityService> accService = do_GetService("@mozilla.org/accessibilityService;1");
 1: 
 1:   if (accService) {
 1:     nsCOMPtr<nsIDOMNode> node = do_QueryInterface(mContent);
 1:     nsCOMPtr<nsIWeakReference> weakShell(do_GetWeakReference(GetPresContext()->PresShell()));
 1:     return accService->CreateHTMLComboboxAccessible(node, weakShell, aAccessible);
 1:   }
 1: 
 1:   return NS_ERROR_FAILURE;
 1: }
 1: #endif
 1: 
 1: void 
 1: nsComboboxControlFrame::SetFocus(PRBool aOn, PRBool aRepaint)
 1: {
 1:   nsWeakFrame weakFrame(this);
 1:   if (aOn) {
 1:     nsListControlFrame::ComboboxFocusSet();
 1:     mFocused = this;
 1:   } else {
 1:     mFocused = nsnull;
 1:     if (mDroppedDown) {
 1:       mListControlFrame->ComboboxFinish(mDisplayedIndex);
 1:     }
 1:     // May delete |this|.
 1:     mListControlFrame->FireOnChange();
 1:   }
 1: 
 1:   if (!weakFrame.IsAlive()) {
 1:     return;
 1:   }
 1: 
 1:   // This is needed on a temporary basis. It causes the focus
 1:   // rect to be drawn. This is much faster than ReResolvingStyle
 1:   // Bug 32920
 1:   Invalidate(nsRect(0,0,mRect.width,mRect.height), PR_TRUE);
 1: 
 1:   // Make sure the content area gets updated for where the dropdown was
 1:   // This is only needed for embedding, the focus may go to 
 1:   // the chrome that is not part of the Gecko system (Bug 83493)
 1:   // XXX this is rather inefficient
 1:   nsIViewManager* vm = GetPresContext()->GetViewManager();
 1:   if (vm) {
 1:     vm->UpdateAllViews(NS_VMREFRESH_NO_SYNC);
 1:   }
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::ShowPopup(PRBool aShowPopup)
 1: {
 1:   nsIView* view = mDropdownFrame->GetView();
 1:   nsIViewManager* viewManager = view->GetViewManager();
 1: 
 1:   if (aShowPopup) {
 1:     nsRect rect = mDropdownFrame->GetRect();
 1:     rect.x = rect.y = 0;
 1:     viewManager->ResizeView(view, rect);
 1:     viewManager->SetViewVisibility(view, nsViewVisibility_kShow);
 1:   } else {
 1:     viewManager->SetViewVisibility(view, nsViewVisibility_kHide);
 1:     nsRect emptyRect(0, 0, 0, 0);
 1:     viewManager->ResizeView(view, emptyRect);
 1:   }
 1: 
 1:   // fire a popup dom event
 1:   nsEventStatus status = nsEventStatus_eIgnore;
 1:   nsMouseEvent event(PR_TRUE, aShowPopup ?
 1:                      NS_XUL_POPUP_SHOWING : NS_XUL_POPUP_HIDING, nsnull,
 1:                      nsMouseEvent::eReal);
 1: 
95:   nsCOMPtr<nsIPresShell> shell = GetPresContext()->GetPresShell();
 1:   if (shell) 
 1:     shell->HandleDOMEventWithTarget(mContent, &event, &status);
 1: }
 1: 
 1: // Show the dropdown list
 1: 
 1: void 
 1: nsComboboxControlFrame::ShowList(nsPresContext* aPresContext, PRBool aShowList)
 1: {
 1:   nsIWidget* widget = nsnull;
 1: 
 1:   // Get parent view
 1:   nsIFrame * listFrame;
 1:   if (NS_OK == mListControlFrame->QueryInterface(NS_GET_IID(nsIFrame), (void **)&listFrame)) {
 1:     nsIView* view = listFrame->GetView();
 1:     NS_ASSERTION(view, "nsComboboxControlFrame view is null");
 1:     if (view) {
 1:     	widget = view->GetWidget();
 1:     }
 1:   }
 1: 
 1:   if (PR_TRUE == aShowList) {
 1:     ShowPopup(PR_TRUE);
 1:     mDroppedDown = PR_TRUE;
 1: 
 1:      // The listcontrol frame will call back to the nsComboboxControlFrame's ListWasSelected
 1:      // which will stop the capture.
 1:     mListControlFrame->AboutToDropDown();
 1:     mListControlFrame->CaptureMouseEvents(PR_TRUE);
 1: 
 1:   } else {
 1:     ShowPopup(PR_FALSE);
 1:     mDroppedDown = PR_FALSE;
 1:   }
 1: 
 1:   // Don't flush anything but reflows lest it destroy us
 1:   aPresContext->PresShell()->
 1:     GetDocument()->FlushPendingNotifications(Flush_OnlyReflow);
 1: 
 1:   if (widget)
 1:     widget->CaptureRollupEvents((nsIRollupListener *)this, mDroppedDown, aShowList);
 1: 
 1: }
 1: 
 1: nsresult
 1: nsComboboxControlFrame::ReflowDropdown(nsPresContext*  aPresContext, 
 1:                                        const nsHTMLReflowState& aReflowState)
 1: {
 1:   // All we want out of it later on, really, is the height of a row, so we
 1:   // don't even need to cache mDropdownFrame's ascent or anything.  If we don't
 1:   // need to reflow it, just bail out here.
 1:   if (!aReflowState.ShouldReflowAllKids() &&
 1:       !(mDropdownFrame->GetStateBits() & (NS_FRAME_IS_DIRTY |
 1:                                           NS_FRAME_HAS_DIRTY_CHILDREN))) {
 1:     return NS_OK;
 1:   }
 1: 
 1:   // XXXbz this will, for small-height dropdowns, have extra space on the right
 1:   // edge for the scrollbar we don't show... but that's the best we can do here
 1:   // for now.
 1:   nsSize availSize(aReflowState.availableWidth, NS_UNCONSTRAINEDSIZE);
 1:   nsHTMLReflowState kidReflowState(aPresContext, aReflowState, mDropdownFrame,
 1:                                    availSize);
 1: 
 1:   // If the dropdown's intrinsic width is narrower than our specified width,
 1:   // then expand it out.  We want our border-box width to end up the same as
 1:   // the dropdown's so account for both sets of mComputedBorderPadding.
 1:   nscoord forcedWidth = aReflowState.ComputedWidth() +
 1:     aReflowState.mComputedBorderPadding.LeftRight() -
 1:     kidReflowState.mComputedBorderPadding.LeftRight();
 1:   kidReflowState.SetComputedWidth(PR_MAX(kidReflowState.ComputedWidth(),
 1:                                          forcedWidth));
 1: 
 1:   // ensure we start off hidden
 1:   if (GetStateBits() & NS_FRAME_FIRST_REFLOW) {
 1:     nsIView* view = mDropdownFrame->GetView();
 1:     nsIViewManager* viewManager = view->GetViewManager();
 1:     viewManager->SetViewVisibility(view, nsViewVisibility_kHide);
 1:     nsRect emptyRect(0, 0, 0, 0);
 1:     viewManager->ResizeView(view, emptyRect);
 1:   }
 1:   
 1:   // Allow the child to move/size/change-visibility its view if it's currently
 1:   // dropped down
 1:   PRInt32 flags = NS_FRAME_NO_MOVE_VIEW | NS_FRAME_NO_VISIBILITY | NS_FRAME_NO_SIZE_VIEW;
 1:   if (mDroppedDown) {
 1:     flags = 0;
 1:   }
 1:   nsRect rect = mDropdownFrame->GetRect();
 1:   nsHTMLReflowMetrics desiredSize;
 1:   nsReflowStatus ignoredStatus;
 1:   nsresult rv = ReflowChild(mDropdownFrame, aPresContext, desiredSize,
 1:                             kidReflowState, rect.x, rect.y, flags,
 1:                             ignoredStatus);
 1:  
 1:    // Set the child's width and height to it's desired size
 1:   FinishReflowChild(mDropdownFrame, aPresContext, &kidReflowState,
 1:                     desiredSize, rect.x, rect.y, flags);
 1:   return rv;
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::AbsolutelyPositionDropDown()
 1: {
 1:    // Position the dropdown list. It is positioned below the display frame if there is enough
 1:    // room on the screen to display the entire list. Otherwise it is placed above the display
 1:    // frame.
 1: 
 1:    // Note: As first glance, it appears that you could simply get the absolute bounding box for the
 1:    // dropdown list by first getting its view, then getting the view's nsIWidget, then asking the nsIWidget
 1:    // for it's AbsoluteBounds. The problem with this approach, is that the dropdown lists y location can
 1:    // change based on whether the dropdown is placed below or above the display frame.
 1:    // The approach, taken here is to get use the absolute position of the display frame and use it's location
 1:    // to determine if the dropdown will go offscreen.
 1: 
 1:    // Use the height calculated for the area frame so it includes both
 1:    // the display and button heights.
 1:   nscoord dropdownYOffset = GetRect().height;
 1:   nsPresContext* presContext = GetPresContext();
 1: // XXX: Enable this code to debug popping up above the display frame, rather than below it
 1:   nsSize dropdownSize = mDropdownFrame->GetSize();
 1: 
 1:   nscoord screenHeightInPixels = 0;
 1:   if (NS_SUCCEEDED(nsFormControlFrame::GetScreenHeight(presContext, screenHeightInPixels))) {
 1:     // Get the height of the dropdown list in pixels.
 1:     nscoord absoluteDropDownHeight = presContext->AppUnitsToDevPixels(dropdownSize.height);
 1:     // Check to see if the drop-down list will go offscreen
 1:     if (GetScreenRect().YMost() + absoluteDropDownHeight > screenHeightInPixels) {
 1:       // move the dropdown list up
 1:       dropdownYOffset = - (dropdownSize.height);
 1:     }
 1:   }
 1: 
 1:   nsPoint dropdownPosition;
 1:   const nsStyleVisibility* vis = GetStyleVisibility();
 1:   if (vis->mDirection == NS_STYLE_DIRECTION_RTL) {
 1:     // Align the right edge of the drop-down with the right edge of the control.
 1:     dropdownPosition.x = GetRect().width - dropdownSize.width;
 1:   } else {
 1:     dropdownPosition.x = 0;
 1:   }
 1:   dropdownPosition.y = dropdownYOffset; 
 1: 
 1:   mDropdownFrame->SetPosition(dropdownPosition);
 1: }
 1: 
 1: //----------------------------------------------------------
 1: // 
 1: //----------------------------------------------------------
 1: #ifdef DO_REFLOW_DEBUG
 1: static int myCounter = 0;
 1: 
 1: static void printSize(char * aDesc, nscoord aSize) 
 1: {
 1:   printf(" %s: ", aDesc);
 1:   if (aSize == NS_UNCONSTRAINEDSIZE) {
 1:     printf("UC");
 1:   } else {
 1:     printf("%d", PX(aSize));
 1:   }
 1: }
 1: #endif
 1: 
 1: //-------------------------------------------------------------------
 1: //-- Main Reflow for the Combobox
 1: //-------------------------------------------------------------------
 1: 
 1: nscoord
 1: nsComboboxControlFrame::GetMinWidth(nsIRenderingContext *aRenderingContext)
 1: {
 1:   // We want to size to our pref width
 1:   nscoord result;
 1:   DISPLAY_MIN_WIDTH(this, result);
 1: 
 1:   result = GetPrefWidth(aRenderingContext);
 1: 
 1:   return result;
 1: }
 1: 
 1: nscoord
 1: nsComboboxControlFrame::GetPrefWidth(nsIRenderingContext *aRenderingContext)
 1: {
 1:   nscoord result;
 1:   DISPLAY_PREF_WIDTH(this, result);
 1: 
 1:   if (NS_LIKELY(mDropdownFrame != nsnull)) {
 1:     result = mDropdownFrame->GetPrefWidth(aRenderingContext);
 1:   } else {
 1:     result = 0;
 1:   }
 1: 
 1:   return result;
 1: }
 1: 
 1: NS_IMETHODIMP 
 1: nsComboboxControlFrame::Reflow(nsPresContext*          aPresContext, 
 1:                                nsHTMLReflowMetrics&     aDesiredSize,
 1:                                const nsHTMLReflowState& aReflowState, 
 1:                                nsReflowStatus&          aStatus)
 1: {
 1:   // Constraints we try to satisfy:
 1: 
 1:   // 1) Default width of button is the vertical scrollbar size
 1:   // 2) If the width of button is bigger than our width, set width of
 1:   //    button to 0.
 1:   // 3) Default height of button is height of display area
 1:   // 4) Width of display area is whatever is left over from our width after
 1:   //    allocating width for the button.
 1:   // 5) Height of display area is GetHeightOfARow() on the
 1:   //    mListControlFrame.
 1: 
 1:   if (!mDisplayFrame || !mButtonFrame || !mDropdownFrame) {
 1:     NS_ERROR("Why did the frame constructor allow this to happen?  Fix it!!");
 1:     return NS_ERROR_UNEXPECTED;
 1:   }
 1: 
 1:   // Make sure the displayed text is the same as the selected option, bug 297389.
 1:   PRInt32 selectedIndex;
 1:   nsAutoString selectedOptionText;
 1:   if (!mDroppedDown) {
 1:     selectedIndex = mListControlFrame->GetSelectedIndex();
 1:   }
 1:   else {
 1:     // In dropped down mode the "selected index" is the hovered menu item,
 1:     // we want the last selected item which is |mDisplayedIndex| in this case.
 1:     selectedIndex = mDisplayedIndex;
 1:   }
 1:   if (selectedIndex != -1) {
 1:     mListControlFrame->GetOptionText(selectedIndex, selectedOptionText);
 1:   }
 1:   if (mDisplayedOptionText != selectedOptionText) {
 1:     RedisplayText(selectedIndex);
 1:   }
 1: 
 1:   // First reflow our dropdown so that we know how tall we should be.
 1:   ReflowDropdown(aPresContext, aReflowState);
 1: 
 1:   // Get the width of the vertical scrollbar.  That will be the width of the
 1:   // dropdown button.
 1:   nsIScrollableFrame* scrollable;
 1:   CallQueryInterface(mListControlFrame, &scrollable);
 1:   NS_ASSERTION(scrollable, "List must be a scrollable frame");
 1:   nsBoxLayoutState bls(GetPresContext(), aReflowState.rendContext);
 1:   nscoord buttonWidth = scrollable->GetDesiredScrollbarSizes(&bls).LeftRight();
 1: 
 1:   if (buttonWidth > aReflowState.ComputedWidth()) {
 1:     buttonWidth = 0;
 1:   }
 1: 
 1:   mDisplayWidth = aReflowState.ComputedWidth() - buttonWidth;
 1: 
 1:   nsresult rv = nsAreaFrame::Reflow(aPresContext, aDesiredSize, aReflowState,
 1:                                     aStatus);
 1:   NS_ENSURE_SUCCESS(rv, rv);
 1: 
 1:   // Now set the correct width and height on our button.  The width we need to
 1:   // set always, the height only if we had an auto height.
 1:   nsRect buttonRect = mButtonFrame->GetRect();
 1:   // If we have a non-intrinsic computed height, our kids should have sized
 1:   // themselves properly on their own.
 1:   if (aReflowState.mComputedHeight == NS_INTRINSICSIZE) {
 1:     // The display frame is going to be the right height and width at this
 1:     // point. Use its height as the button height.
 1:     nsRect displayRect = mDisplayFrame->GetRect();
 1:     buttonRect.height = displayRect.height;
 1:     buttonRect.y = displayRect.y;
 1:   }
 1: #ifdef DEBUG
 1:   else {
 1:     NS_ASSERTION(mButtonFrame->GetSize().height ==
 1:                  mDisplayFrame->GetSize().height,
 1:                  "Different heights?");
 1:   }
 1: #endif
 1:   
 1:   if (GetStyleVisibility()->mDirection == NS_STYLE_DIRECTION_RTL) {
 1:     // Make sure the right edge of the button frame stays where it is now
 1:     buttonRect.x -= buttonWidth - buttonRect.width;
 1:   }
 1:   buttonRect.width = buttonWidth;
 1:   mButtonFrame->SetRect(buttonRect);
 1:   
 1:   return rv;
 1: }
 1: 
 1: //--------------------------------------------------------------
 1: 
 1: nsIAtom*
 1: nsComboboxControlFrame::GetType() const
 1: {
 1:   return nsGkAtoms::comboboxControlFrame; 
 1: }
 1: 
 1: #ifdef NS_DEBUG
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::GetFrameName(nsAString& aResult) const
 1: {
 1:   return MakeFrameName(NS_LITERAL_STRING("ComboboxControl"), aResult);
 1: }
 1: #endif
 1: 
 1: 
 1: //----------------------------------------------------------------------
 1: // nsIComboboxControlFrame
 1: //----------------------------------------------------------------------
 1: void
 1: nsComboboxControlFrame::ShowDropDown(PRBool aDoDropDown) 
 1: {
 1:   if (mContent->HasAttr(kNameSpaceID_None, nsGkAtoms::disabled)) {
 1:     return;
 1:   }
 1: 
 1:   if (!mDroppedDown && aDoDropDown) {
 1:     if (mListControlFrame) {
 1:       mListControlFrame->SyncViewWithFrame();
 1:     }
 1:     ToggleList(GetPresContext());
 1:   } else if (mDroppedDown && !aDoDropDown) {
 1:     ToggleList(GetPresContext());
 1:   }
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::SetDropDown(nsIFrame* aDropDownFrame)
 1: {
 1:   mDropdownFrame = aDropDownFrame;
 1:  
 1:   CallQueryInterface(mDropdownFrame, &mListControlFrame);
 1: }
 1: 
 1: nsIFrame*
 1: nsComboboxControlFrame::GetDropDown() 
 1: {
 1:   return mDropdownFrame;
 1: }
 1: 
 1: // Toggle dropdown list.
 1: 
 1: NS_IMETHODIMP 
 1: nsComboboxControlFrame::ToggleList(nsPresContext* aPresContext)
 1: {
 1:   ShowList(aPresContext, (PR_FALSE == mDroppedDown));
 1: 
 1:   return NS_OK;
 1: }
 1: 
 1: ///////////////////////////////////////////////////////////////
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::RedisplaySelectedText()
 1: {
 1:   return RedisplayText(mListControlFrame->GetSelectedIndex());
 1: }
 1: 
 1: nsresult
 1: nsComboboxControlFrame::RedisplayText(PRInt32 aIndex)
 1: {
 1:   // Get the text to display
 1:   if (aIndex != -1) {
 1:     mListControlFrame->GetOptionText(aIndex, mDisplayedOptionText);
 1:   } else {
 1:     mDisplayedOptionText.Truncate();
 1:   }
 1:   mDisplayedIndex = aIndex;
 1: 
 1:   REFLOW_DEBUG_MSG2("RedisplayText \"%s\"\n",
 1:                     NS_LossyConvertUTF16toASCII(mDisplayedOptionText).get());
 1: 
 1:   // Send reflow command because the new text maybe larger
 1:   nsresult rv = NS_OK;
 1:   if (mDisplayContent) {
 1:     // Don't call ActuallyDisplayText(PR_TRUE) directly here since that
 1:     // could cause recursive frame construction. See bug 283117 and the comment in
 1:     // HandleRedisplayTextEvent() below.
 1: 
 1:     // Revoke outstanding events to avoid out-of-order events which could mean
 1:     // displaying the wrong text.
 1:     mRedisplayTextEvent.Revoke();
 1: 
 1:     nsRefPtr<RedisplayTextEvent> event = new RedisplayTextEvent(this);
 1:     rv = NS_DispatchToCurrentThread(event);
 1:     if (NS_SUCCEEDED(rv))
 1:       mRedisplayTextEvent = event;
 1:   }
 1:   return rv;
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::HandleRedisplayTextEvent()
 1: {
 1:   // First, make sure that the content model is up to date and we've
 1:   // constructed the frames for all our content in the right places.
 1:   // Otherwise they'll end up under the wrong insertion frame when we
 1:   // ActuallyDisplayText, since that flushes out the content sink by
 1:   // calling SetText on a DOM node with aNotify set to true.  See bug
 1:   // 289730.
 1:   GetPresContext()->Document()->
 1:     FlushPendingNotifications(Flush_ContentAndNotify);
 1:   
 1:   // Redirect frame insertions during this method (see GetContentInsertionFrame())
 1:   // so that any reframing that the frame constructor forces upon us is inserted
 1:   // into the correct parent (mDisplayFrame). See bug 282607.
 1:   NS_PRECONDITION(!mInRedisplayText, "Nested RedisplayText");
 1:   mInRedisplayText = PR_TRUE;
 1:   mRedisplayTextEvent.Forget();
 1: 
 1:   ActuallyDisplayText(PR_TRUE);
 1:   mDisplayFrame->AddStateBits(NS_FRAME_IS_DIRTY);
 1:   // XXXbz This should perhaps be eResize.  Check.
 1:   GetPresContext()->PresShell()->FrameNeedsReflow(mDisplayFrame,
 1:                                                   nsIPresShell::eStyleChange);
 1: 
 1:   mInRedisplayText = PR_FALSE;
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::ActuallyDisplayText(PRBool aNotify)
 1: {
 1:   if (mDisplayedOptionText.IsEmpty()) {
 1:     // Have to use a non-breaking space for line-height calculations
 1:     // to be right
 1:     static const PRUnichar space = 0xA0;
 1:     mDisplayContent->SetText(&space, 1, aNotify);
 1:   } else {
 1:     mDisplayContent->SetText(mDisplayedOptionText, aNotify);
 1:   }
 1: }
 1: 
 1: PRInt32
 1: nsComboboxControlFrame::GetIndexOfDisplayArea()
 1: {
 1:   return mDisplayedIndex;
 1: }
 1: 
 1: //----------------------------------------------------------------------
 1: // nsISelectControlFrame
 1: //----------------------------------------------------------------------
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::DoneAddingChildren(PRBool aIsDone)
 1: {
 1:   nsISelectControlFrame* listFrame = nsnull;
 1:   nsresult rv = NS_ERROR_FAILURE;
 1:   if (mDropdownFrame != nsnull) {
 1:     rv = CallQueryInterface(mDropdownFrame, &listFrame);
 1:     if (listFrame) {
 1:       rv = listFrame->DoneAddingChildren(aIsDone);
 1:     }
 1:   }
 1:   return rv;
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::AddOption(nsPresContext* aPresContext, PRInt32 aIndex)
 1: {
 1:   if (aIndex <= mDisplayedIndex) {
 1:     ++mDisplayedIndex;
 1:   }
 1: 
 1:   nsListControlFrame* lcf = NS_STATIC_CAST(nsListControlFrame*, mDropdownFrame);
 1:   return lcf->AddOption(aPresContext, aIndex);
 1: }
 1:   
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::RemoveOption(nsPresContext* aPresContext, PRInt32 aIndex)
 1: {
 1:   if (mListControlFrame->GetNumberOfOptions() > 0) {
 1:     if (aIndex < mDisplayedIndex) {
 1:       --mDisplayedIndex;
 1:     } else if (aIndex == mDisplayedIndex) {
 1:       mDisplayedIndex = 0; // IE6 compat
 1:       RedisplayText(mDisplayedIndex);
 1:     }
 1:   }
 1:   else {
 1:     // If we removed the last option, we need to blank things out
 1:     RedisplayText(-1);
 1:   }
 1: 
 1:   nsListControlFrame* lcf = NS_STATIC_CAST(nsListControlFrame*, mDropdownFrame);
 1:   return lcf->RemoveOption(aPresContext, aIndex);
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::GetOptionSelected(PRInt32 aIndex, PRBool* aValue)
 1: {
 1:   nsISelectControlFrame* listFrame = nsnull;
 1:   NS_ASSERTION(mDropdownFrame, "No dropdown frame!");
 1: 
 1:   CallQueryInterface(mDropdownFrame, &listFrame);
 1:   NS_ASSERTION(listFrame, "No list frame!");
 1: 
 1:   return listFrame->GetOptionSelected(aIndex, aValue);
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::OnSetSelectedIndex(PRInt32 aOldIndex, PRInt32 aNewIndex)
 1: {
 1:   nsISelectControlFrame* listFrame = nsnull;
 1:   NS_ASSERTION(mDropdownFrame, "No dropdown frame!");
 1: 
 1:   CallQueryInterface(mDropdownFrame, &listFrame);
 1:   NS_ASSERTION(listFrame, "No list frame!");
 1: 
 1:   return listFrame->OnSetSelectedIndex(aOldIndex, aNewIndex);
 1: }
 1: 
 1: // End nsISelectControlFrame
 1: //----------------------------------------------------------------------
 1: 
 1: NS_IMETHODIMP 
 1: nsComboboxControlFrame::HandleEvent(nsPresContext* aPresContext, 
 1:                                        nsGUIEvent*     aEvent,
 1:                                        nsEventStatus*  aEventStatus)
 1: {
 1:   NS_ENSURE_ARG_POINTER(aEventStatus);
 1: 
 1:   if (nsEventStatus_eConsumeNoDefault == *aEventStatus) {
 1:     return NS_OK;
 1:   }
 1:   if (mContent->HasAttr(kNameSpaceID_None, nsGkAtoms::disabled)) {
 1:     return NS_OK;
 1:   }
 1: 
 1:   // If we have style that affects how we are selected, feed event down to
 1:   // nsFrame::HandleEvent so that selection takes place when appropriate.
 1:   const nsStyleUserInterface* uiStyle = GetStyleUserInterface();
 1:   if (uiStyle->mUserInput == NS_STYLE_USER_INPUT_NONE || uiStyle->mUserInput == NS_STYLE_USER_INPUT_DISABLED)
 1:     return nsAreaFrame::HandleEvent(aPresContext, aEvent, aEventStatus);
 1:     
 1:   return NS_OK;
 1: }
 1: 
 1: 
 1: nsresult
 1: nsComboboxControlFrame::SetFormProperty(nsIAtom* aName, const nsAString& aValue)
 1: {
 1:   nsIFormControlFrame* fcFrame = nsnull;
 1:   nsresult result = CallQueryInterface(mDropdownFrame, &fcFrame);
 1:   if (NS_FAILED(result)) {
 1:     return result;
 1:   }
 1:   if (fcFrame) {
 1:     return fcFrame->SetFormProperty(aName, aValue);
 1:   }
 1:   return NS_OK;
 1: }
 1: 
 1: nsresult 
 1: nsComboboxControlFrame::GetFormProperty(nsIAtom* aName, nsAString& aValue) const
 1: {
 1:   nsIFormControlFrame* fcFrame = nsnull;
 1:   nsresult result = CallQueryInterface(mDropdownFrame, &fcFrame);
 1:   if(NS_FAILED(result)) {
 1:     return result;
 1:   }
 1:   if (fcFrame) {
 1:     return fcFrame->GetFormProperty(aName, aValue);
 1:   }
 1:   return NS_OK;
 1: }
 1: 
 1: nsIFrame*
 1: nsComboboxControlFrame::GetContentInsertionFrame() {
 1:   return mInRedisplayText ? mDisplayFrame : mDropdownFrame->GetContentInsertionFrame();
 1: }
 1: 
 1: nsresult
 1: nsComboboxControlFrame::CreateAnonymousContent(nsTArray<nsIContent*>& aElements)
 1: {
 1:   // The frames used to display the combo box and the button used to popup the dropdown list
 1:   // are created through anonymous content. The dropdown list is not created through anonymous
 1:   // content because it's frame is initialized specifically for the drop-down case and it is placed
 1:   // a special list referenced through NS_COMBO_FRAME_POPUP_LIST_INDEX to keep separate from the
 1:   // layout of the display and button. 
 1:   //
 1:   // Note: The value attribute of the display content is set when an item is selected in the dropdown list.
 1:   // If the content specified below does not honor the value attribute than nothing will be displayed.
 1: 
 1:   // For now the content that is created corresponds to two input buttons. It would be better to create the
 1:   // tag as something other than input, but then there isn't any way to create a button frame since it
 1:   // isn't possible to set the display type in CSS2 to create a button frame.
 1: 
 1:     // create content used for display
 1:   //nsIAtom* tag = NS_NewAtom("mozcombodisplay");
 1: 
 1:   // Add a child text content node for the label
 1: 
 1:   nsNodeInfoManager *nimgr = mContent->NodeInfo()->NodeInfoManager();
 1: 
 1:   NS_NewTextNode(getter_AddRefs(mDisplayContent), nimgr);
 1:   if (!mDisplayContent)
 1:     return NS_ERROR_OUT_OF_MEMORY;
 1: 
 1:   // set the value of the text node
 1:   mDisplayedIndex = mListControlFrame->GetSelectedIndex();
 1:   if (mDisplayedIndex != -1) {
 1:     mListControlFrame->GetOptionText(mDisplayedIndex, mDisplayedOptionText);
 1:   }
 1:   ActuallyDisplayText(PR_FALSE);
 1: 
 1:   if (!aElements.AppendElement(mDisplayContent))
 1:     return NS_ERROR_OUT_OF_MEMORY;
 1: 
 1:   nsCOMPtr<nsINodeInfo> nodeInfo;
 1:   nimgr->GetNodeInfo(nsGkAtoms::input, nsnull, kNameSpaceID_None,
 1:                      getter_AddRefs(nodeInfo));
 1: 
 1:   // create button which drops the list down
 1:   NS_NewHTMLElement(getter_AddRefs(mButtonContent), nodeInfo);
 1:   if (!mButtonContent)
 1:     return NS_ERROR_OUT_OF_MEMORY;
 1: 
 1:   // make someone to listen to the button. If its pressed by someone like Accessibility
 1:   // then open or close the combo box.
 1:   nsCOMPtr<nsIDOMEventReceiver> eventReceiver(do_QueryInterface(mButtonContent));
 1:   if (eventReceiver) {
 1:     mButtonListener = new nsComboButtonListener(this);
 1:     if (!mButtonListener)
 1:       return NS_ERROR_OUT_OF_MEMORY;
 1:     eventReceiver->AddEventListenerByIID(mButtonListener,
 1:                                          NS_GET_IID(nsIDOMMouseListener));
 1:   }
 1: 
 1:   mButtonContent->SetAttr(kNameSpaceID_None, nsGkAtoms::type,
 1:                           NS_LITERAL_STRING("button"), PR_FALSE);
 1:   // Set tabindex="-1" so that the button is not tabbable
 1:   mButtonContent->SetAttr(kNameSpaceID_None, nsGkAtoms::tabindex,
 1:                           NS_LITERAL_STRING("-1"), PR_FALSE);
 1: 
 1:   if (!aElements.AppendElement(mButtonContent))
 1:     return NS_ERROR_OUT_OF_MEMORY;
 1: 
 1:   return NS_OK;
 1: }
 1: 
 1: // XXXbz this is a for-now hack.  Now that display:inline-block works,
 1: // need to revisit this.
 1: class nsComboboxDisplayFrame : public nsBlockFrame {
 1: public:
 1:   nsComboboxDisplayFrame (nsStyleContext* aContext,
 1:                           nsComboboxControlFrame* aComboBox)
 1:     : nsBlockFrame(aContext),
 1:       mComboBox(aComboBox)
 1:   {}
 1: 
 1:   // Need this so that line layout knows that this block's width
 1:   // depends on the available width.
 1:   virtual nsIAtom* GetType() const;
 1: 
 1:   virtual PRBool IsFrameOfType(PRUint32 aFlags) const
 1:   {
 1:     return nsBlockFrame::IsFrameOfType(aFlags &
 1:       ~(nsIFrame::eReplacedContainsBlock));
 1:   }
 1: 
 1:   NS_IMETHOD Reflow(nsPresContext*           aPresContext,
 1:                     nsHTMLReflowMetrics&     aDesiredSize,
 1:                     const nsHTMLReflowState& aReflowState,
 1:                     nsReflowStatus&          aStatus);
 1: 
 1: protected:
 1:   nsComboboxControlFrame* mComboBox;
 1: };
 1: 
 1: nsIAtom*
 1: nsComboboxDisplayFrame::GetType() const
 1: {
 1:   return nsGkAtoms::comboboxDisplayFrame;
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxDisplayFrame::Reflow(nsPresContext*           aPresContext,
 1:                                nsHTMLReflowMetrics&     aDesiredSize,
 1:                                const nsHTMLReflowState& aReflowState,
 1:                                nsReflowStatus&          aStatus)
 1: {
 1:   nsHTMLReflowState state(aReflowState);
 1:   if (state.mComputedHeight == NS_INTRINSICSIZE) {
 1:     // Note that the only way we can have a computed height here is if the
 1:     // combobox had a specified height.  If it didn't, size based on what our
 1:     // rows look like, for lack of anything better.
 1:     state.mComputedHeight = mComboBox->mListControlFrame->GetHeightOfARow();
 1:   }
 1:   nscoord computedWidth = mComboBox->mDisplayWidth -
 1:     state.mComputedBorderPadding.LeftRight(); 
 1:   if (computedWidth < 0) {
 1:     computedWidth = 0;
 1:   }
 1:   state.SetComputedWidth(computedWidth);
 1: 
 1:   return nsBlockFrame::Reflow(aPresContext, aDesiredSize, state, aStatus);
 1: }
 1: 
 1: nsIFrame*
 1: nsComboboxControlFrame::CreateFrameFor(nsIContent*      aContent)
 1: { 
 1:   NS_PRECONDITION(nsnull != aContent, "null ptr");
 1: 
 1:   NS_ASSERTION(mDisplayContent, "mDisplayContent can't be null!");
 1: 
 1:   if (mDisplayContent != aContent) {
 1:     // We only handle the frames for mDisplayContent here
 1:     return nsnull;
 1:   }
 1:   
 1:   // Get PresShell
 1:   nsIPresShell *shell = GetPresContext()->PresShell();
 1:   nsStyleSet *styleSet = shell->StyleSet();
 1: 
 1:   // create the style contexts for the anonymous block frame and text frame
 1:   nsRefPtr<nsStyleContext> styleContext;
 1:   styleContext = styleSet->
 1:     ResolvePseudoStyleFor(mContent, 
 1:                           nsCSSAnonBoxes::mozDisplayComboboxControlFrame,
 1:                           mStyleContext);
 1:   if (NS_UNLIKELY(!styleContext)) {
 1:     return nsnull;
 1:   }
 1: 
 1:   nsRefPtr<nsStyleContext> textStyleContext;
 1:   textStyleContext = styleSet->ResolveStyleForNonElement(styleContext);
 1:   if (NS_UNLIKELY(!textStyleContext)) {
 1:     return nsnull;
 1:   }
 1: 
 1:   // Start by by creating our anonymous block frame
 1:   mDisplayFrame = new (shell) nsComboboxDisplayFrame(styleContext, this);
 1:   if (NS_UNLIKELY(!mDisplayFrame)) {
 1:     return nsnull;
 1:   }
 1: 
 1:   nsresult rv = mDisplayFrame->Init(mContent, this, nsnull);
 1:   if (NS_FAILED(rv)) {
 1:     mDisplayFrame->Destroy();
 1:     mDisplayFrame = nsnull;
 1:     return nsnull;
 1:   }
 1: 
 1:   // Create a text frame and put it inside the block frame
 1:   mTextFrame = NS_NewTextFrame(shell, textStyleContext);
 1:   if (NS_UNLIKELY(!mTextFrame)) {
 1:     return nsnull;
 1:   }
 1: 
 1:   // initialize the text frame
 1:   rv = mTextFrame->Init(aContent, mDisplayFrame, nsnull);
 1:   if (NS_FAILED(rv)) {
 1:     mDisplayFrame->Destroy();
 1:     mDisplayFrame = nsnull;
 1:     mTextFrame->Destroy();
 1:     mTextFrame = nsnull;
 1:     return nsnull;
 1:   }
 1: 
 1:   mDisplayFrame->SetInitialChildList(nsnull, mTextFrame);
 1:   return mDisplayFrame;
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::Destroy()
 1: {
 1:   // Revoke any pending RedisplayTextEvent
 1:   mRedisplayTextEvent.Revoke();
 1: 
 1:   nsFormControlFrame::RegUnRegAccessKey(NS_STATIC_CAST(nsIFrame*, this), PR_FALSE);
 1: 
 1:   if (mDroppedDown) {
 1:     // Get parent view
 1:     nsIFrame * listFrame;
 1:     if (NS_OK == mListControlFrame->QueryInterface(NS_GET_IID(nsIFrame), (void **)&listFrame)) {
 1:       nsIView* view = listFrame->GetView();
 1:       NS_ASSERTION(view, "nsComboboxControlFrame view is null");
 1:       if (view) {
 1:         nsIWidget* widget = view->GetWidget();
 1:         if (widget)
 1:           widget->CaptureRollupEvents((nsIRollupListener *)this, PR_FALSE, PR_TRUE);
 1:       }
 1:     }
 1:   }
 1: 
 1:   // Cleanup frames in popup child list
 1:   mPopupFrames.DestroyFrames();
 1:   nsContentUtils::DestroyAnonymousContent(&mDisplayContent);
 1:   nsContentUtils::DestroyAnonymousContent(&mButtonContent);
 1:   nsAreaFrame::Destroy();
 1: }
 1: 
 1: 
 1: nsIFrame*
 1: nsComboboxControlFrame::GetFirstChild(nsIAtom* aListName) const
 1: {
 1:   if (nsGkAtoms::popupList == aListName) {
 1:     return mPopupFrames.FirstChild();
 1:   }
 1:   return nsAreaFrame::GetFirstChild(aListName);
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::SetInitialChildList(nsIAtom*        aListName,
 1:                                             nsIFrame*       aChildList)
 1: {
 1:   nsresult rv = NS_OK;
 1:   if (nsGkAtoms::popupList == aListName) {
 1:     mPopupFrames.SetFrames(aChildList);
 1:   } else {
 1:     rv = nsAreaFrame::SetInitialChildList(aListName, aChildList);
 1: 
 1:     for (nsIFrame * child = aChildList; child;
 1:          child = child->GetNextSibling()) {
 1:       nsCOMPtr<nsIFormControl> formControl = do_QueryInterface(child->GetContent());
 1:       if (formControl && formControl->GetType() == NS_FORM_INPUT_BUTTON) {
 1:         mButtonFrame = child;
 1:         break;
 1:       }
 1:     }
 1:     NS_ASSERTION(mButtonFrame, "missing button frame in initial child list");
 1:   }
 1:   return rv;
 1: }
 1: 
 1: nsIAtom*
 1: nsComboboxControlFrame::GetAdditionalChildListName(PRInt32 aIndex) const
 1: {
 1:    // Maintain a separate child list for the dropdown list (i.e. popup listbox)
 1:    // This is necessary because we don't want the listbox to be included in the layout
 1:    // of the combox's children because it would take up space, when it is suppose to
 1:    // be floating above the display.
 1:   if (aIndex <= NS_BLOCK_FRAME_ABSOLUTE_LIST_INDEX) {
 1:     return nsAreaFrame::GetAdditionalChildListName(aIndex);
 1:   }
 1:   
 1:   if (NS_COMBO_FRAME_POPUP_LIST_INDEX == aIndex) {
 1:     return nsGkAtoms::popupList;
 1:   }
 1:   return nsnull;
 1: }
 1: 
 1: //----------------------------------------------------------------------
 1:   //nsIRollupListener
 1: //----------------------------------------------------------------------
 1: NS_IMETHODIMP 
 1: nsComboboxControlFrame::Rollup()
 1: {
 1:   if (mDroppedDown) {
 1:     mListControlFrame->AboutToRollup();
 1:     ShowDropDown(PR_FALSE);
 1:     mListControlFrame->CaptureMouseEvents(PR_FALSE);
 1:   }
 1:   return NS_OK;
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::RollupFromList()
 1: {
 1:   nsPresContext* aPresContext = GetPresContext();
 1: 
 1:   ShowList(aPresContext, PR_FALSE);
 1:   mListControlFrame->CaptureMouseEvents(PR_FALSE);
 1: }
 1: 
 1: PRInt32
 1: nsComboboxControlFrame::UpdateRecentIndex(PRInt32 aIndex)
 1: {
 1:   PRInt32 index = mRecentSelectedIndex;
 1:   if (mRecentSelectedIndex == NS_SKIP_NOTIFY_INDEX || aIndex == NS_SKIP_NOTIFY_INDEX)
 1:     mRecentSelectedIndex = aIndex;
 1:   return index;
 1: }
 1: 
 1: class nsDisplayComboboxFocus : public nsDisplayItem {
 1: public:
 1:   nsDisplayComboboxFocus(nsComboboxControlFrame* aFrame)
 1:     : nsDisplayItem(aFrame) {
 1:     MOZ_COUNT_CTOR(nsDisplayComboboxFocus);
 1:   }
 1: #ifdef NS_BUILD_REFCNT_LOGGING
 1:   virtual ~nsDisplayComboboxFocus() {
 1:     MOZ_COUNT_DTOR(nsDisplayComboboxFocus);
 1:   }
 1: #endif
 1: 
 1:   virtual void Paint(nsDisplayListBuilder* aBuilder, nsIRenderingContext* aCtx,
 1:      const nsRect& aDirtyRect);
 1:   NS_DISPLAY_DECL_NAME("ComboboxFocus")
 1: };
 1: 
 1: void nsDisplayComboboxFocus::Paint(nsDisplayListBuilder* aBuilder,
 1:      nsIRenderingContext* aCtx, const nsRect& aDirtyRect)
 1: {
 1:   NS_STATIC_CAST(nsComboboxControlFrame*, mFrame)
 1:     ->PaintFocus(*aCtx, aBuilder->ToReferenceFrame(mFrame));
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::BuildDisplayList(nsDisplayListBuilder*   aBuilder,
 1:                                          const nsRect&           aDirtyRect,
 1:                                          const nsDisplayListSet& aLists)
 1: {
 1: #ifdef NOISY
 1:   printf("%p paint at (%d, %d, %d, %d)\n", this,
 1:     aDirtyRect.x, aDirtyRect.y, aDirtyRect.width, aDirtyRect.height);
 1: #endif
 1: 
 1:   if (aBuilder->IsForEventDelivery()) {
 1:     // Don't allow children to receive events.
 1:     // REVIEW: following old GetFrameForPoint
 1:     nsresult rv = DisplayBorderBackgroundOutline(aBuilder, aLists);
 1:     NS_ENSURE_SUCCESS(rv, rv);
 1:   } else {
 1:     // REVIEW: Our in-flow child frames are inline-level so they will paint in our
 1:     // content list, so we don't need to mess with layers.
 1:     nsresult rv = nsAreaFrame::BuildDisplayList(aBuilder, aDirtyRect, aLists);
 1:     NS_ENSURE_SUCCESS(rv, rv);
 1:   }
 1: 
 1:   nsPresContext *presContext = GetPresContext();
 1:   const nsStyleDisplay *disp = GetStyleDisplay();
 1:   if ((!IsThemed(disp) ||
 1:        !presContext->GetTheme()->ThemeDrawsFocusForWidget(presContext, this, disp->mAppearance)) &&
 1:       mDisplayFrame && IsVisibleForPainting(aBuilder)) {
 1:     nsresult rv = aLists.Content()->AppendNewToTop(new (aBuilder)
 1:                                                    nsDisplayComboboxFocus(this));
 1:     NS_ENSURE_SUCCESS(rv, rv);
 1:   }
 1: 
 1:   return DisplaySelectionOverlay(aBuilder, aLists);
 1: }
 1: 
 1: void nsComboboxControlFrame::PaintFocus(nsIRenderingContext& aRenderingContext,
 1:                                         nsPoint aPt) {
 1:   aRenderingContext.PushState();
 1:   nsRect clipRect = mDisplayFrame->GetRect() + aPt;
 1:   aRenderingContext.SetClipRect(clipRect, nsClipCombine_kIntersect);
 1: 
 1:   // REVIEW: Why does the old code paint mDisplayFrame again? We've
 1:   // already painted it in the children above. So clipping it here won't do
 1:   // us much good.
 1: 
 1:   /////////////////////
 1:   // draw focus
 1:   // XXX This is only temporary
 1:   if (!mContent->HasAttr(kNameSpaceID_None, nsGkAtoms::disabled) &&
 1:       mFocused == this) {
 1:     aRenderingContext.SetLineStyle(nsLineStyle_kDotted);
 1:     aRenderingContext.SetColor(GetStyleColor()->mColor);
 1:   } else {
 1:     aRenderingContext.SetColor(GetStyleBackground()->mBackgroundColor);
 1:     aRenderingContext.SetLineStyle(nsLineStyle_kSolid);
 1:   }
 1:   //aRenderingContext.DrawRect(clipRect);
 1:   nscoord onePixel = nsPresContext::CSSPixelsToAppUnits(1);
 1:   clipRect.width -= onePixel;
 1:   clipRect.height -= onePixel;
 1:   aRenderingContext.DrawLine(clipRect.x, clipRect.y, 
 1:                              clipRect.x+clipRect.width, clipRect.y);
 1:   aRenderingContext.DrawLine(clipRect.x+clipRect.width, clipRect.y, 
 1:                              clipRect.x+clipRect.width, clipRect.y+clipRect.height);
 1:   aRenderingContext.DrawLine(clipRect.x+clipRect.width, clipRect.y+clipRect.height, 
 1:                              clipRect.x, clipRect.y+clipRect.height);
 1:   aRenderingContext.DrawLine(clipRect.x, clipRect.y+clipRect.height, 
 1:                              clipRect.x, clipRect.y);
 1:   aRenderingContext.DrawLine(clipRect.x, clipRect.y+clipRect.height, 
 1:                              clipRect.x, clipRect.y);
 1: 
 1:   aRenderingContext.PopState();
 1: }
 1: 
 1: //----------------------------------------------------------------------
 1:   //nsIScrollableViewProvider
 1: //----------------------------------------------------------------------
 1: nsIScrollableView* nsComboboxControlFrame::GetScrollableView()
 1: {
 1:   if (!mDropdownFrame)
 1:     return nsnull;
 1: 
 1:   nsIScrollableFrame* scrollable = nsnull;
 1:   nsresult rv = CallQueryInterface(mDropdownFrame, &scrollable);
 1:   if (NS_FAILED(rv))
 1:     return nsnull;
 1: 
 1:   return scrollable->GetScrollableView();
 1: }
 1: 
 1: //---------------------------------------------------------
 1: // gets the content (an option) by index and then set it as
 1: // being selected or not selected
 1: //---------------------------------------------------------
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::OnOptionSelected(nsPresContext* aPresContext,
 1:                                          PRInt32 aIndex,
 1:                                          PRBool aSelected)
 1: {
 1:   if (mDroppedDown) {
 1:     nsCOMPtr<nsISelectControlFrame> selectFrame
 1:                                      = do_QueryInterface(mListControlFrame);
 1:     if (selectFrame) {
 1:       selectFrame->OnOptionSelected(aPresContext, aIndex, aSelected);
 1:     }
 1:   } else {
 1:     if (aSelected) {
 1:       RedisplayText(aIndex);
 1:     } else {
 1:       RedisplaySelectedText();
 1:       FireValueChangeEvent(); // Fire after old option is unselected
 1:     }
 1:   }
 1: 
 1:   return NS_OK;
 1: }
 1: 
 1: void nsComboboxControlFrame::FireValueChangeEvent()
 1: {
 1:   // Fire ValueChange event to indicate data value of combo box has changed
 1:   nsCOMPtr<nsIDOMEvent> event;
 1:   nsPresContext* presContext = GetPresContext();
 1:   if (NS_SUCCEEDED(nsEventDispatcher::CreateEvent(presContext, nsnull,
 1:                                                   NS_LITERAL_STRING("Events"),
 1:                                                   getter_AddRefs(event)))) {
 1:     event->InitEvent(NS_LITERAL_STRING("ValueChange"), PR_TRUE, PR_TRUE);
 1: 
 1:     nsCOMPtr<nsIPrivateDOMEvent> privateEvent(do_QueryInterface(event));
 1:     privateEvent->SetTrusted(PR_TRUE);
 1:     nsEventDispatcher::DispatchDOMEvent(mContent, nsnull, event, nsnull,
 1:                                         nsnull);
 1:   }
 1: }
 1: 
 1: void
 1: nsComboboxControlFrame::OnContentReset()
 1: {
 1:   if (mListControlFrame) {
 1:     mListControlFrame->OnContentReset();
 1:   }
 1: }
 1: 
 1: 
 1: //--------------------------------------------------------
 1: // nsIStatefulFrame
 1: //--------------------------------------------------------
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::SaveState(SpecialStateID aStateID,
 1:                                   nsPresState** aState)
 1: {
 1:   if (!mListControlFrame)
 1:     return NS_ERROR_FAILURE;
 1: 
 1:   nsIStatefulFrame* stateful;
 1:   CallQueryInterface(mListControlFrame, &stateful);
 1:   return stateful->SaveState(aStateID, aState);
 1: }
 1: 
 1: NS_IMETHODIMP
 1: nsComboboxControlFrame::RestoreState(nsPresState* aState)
 1: {
 1:   if (!mListControlFrame)
 1:     return NS_ERROR_FAILURE;
 1: 
 1:   nsIStatefulFrame* stateful;
 1:   nsresult rv = CallQueryInterface(mListControlFrame, &stateful);
 1:   NS_ASSERTION(NS_SUCCEEDED(rv), "Must implement nsIStatefulFrame");
 1:   rv = stateful->RestoreState(aState);
 1:   return rv;
 1: }
 1: 
 1: 
 1: //
 1: // Camino uses a native widget for the combobox
 1: // popup, which affects drawing and event
 1: // handling here and in nsListControlFrame.
 1: // 
 1: 
 1: /* static */
 1: PRBool
 1: nsComboboxControlFrame::ToolkitHasNativePopup()
 1: {
 1: #ifdef MOZ_MACBROWSER
 1:   return PR_TRUE;
 1: #else
 1:   return PR_FALSE;
 1: #endif
 1: }
 1: 
