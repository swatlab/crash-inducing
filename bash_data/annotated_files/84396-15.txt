43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 2002
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsAHttpTransaction_h__
43113: #define nsAHttpTransaction_h__
43113: 
43113: #include "nsISupports.h"
43113: 
43113: class nsAHttpConnection;
43113: class nsAHttpSegmentReader;
43113: class nsAHttpSegmentWriter;
43113: class nsIInterfaceRequestor;
64613: class nsIEventTarget;
67756: class nsITransport;
67712: class nsHttpRequestHead;
43113: 
43113: //----------------------------------------------------------------------------
43113: // Abstract base class for a HTTP transaction:
43113: //
43113: // A transaction is a "sink" for the response data.  The connection pushes
43113: // data to the transaction by writing to it.  The transaction supports
43113: // WriteSegments and may refuse to accept data if its buffers are full (its
43113: // write function returns NS_BASE_STREAM_WOULD_BLOCK in this case).
43113: //----------------------------------------------------------------------------
43113: 
43113: class nsAHttpTransaction : public nsISupports
43113: {
43113: public:
43113:     // called by the connection when it takes ownership of the transaction.
43113:     virtual void SetConnection(nsAHttpConnection *) = 0;
43113: 
43113:     // called by the connection to get security callbacks to set on the
43113:     // socket transport.
64613:     virtual void GetSecurityCallbacks(nsIInterfaceRequestor **,
64613:                                       nsIEventTarget **) = 0;
43113: 
43113:     // called to report socket status (see nsITransportEventSink)
67756:     virtual void OnTransportStatus(nsITransport* transport,
67756:                                    nsresult status, PRUint64 progress) = 0;
43113: 
43113:     // called to check the transaction status.
79445:     virtual bool     IsDone() = 0;
43113:     virtual nsresult Status() = 0;
43113: 
43113:     // called to find out how much request data is available for writing.
43113:     virtual PRUint32 Available() = 0;
43113: 
43113:     // called to read request data from the transaction.
43113:     virtual nsresult ReadSegments(nsAHttpSegmentReader *reader,
43113:                                   PRUint32 count, PRUint32 *countRead) = 0;
43113: 
43113:     // called to write response data to the transaction.
43113:     virtual nsresult WriteSegments(nsAHttpSegmentWriter *writer,
43113:                                    PRUint32 count, PRUint32 *countWritten) = 0;
43113: 
43113:     // called to close the transaction
43113:     virtual void Close(nsresult reason) = 0;
67712: 
67712:     // called to indicate a failure at the SSL setup level
67712:     virtual void SetSSLConnectFailed() = 0;
67712:     
67712:     // called to retrieve the request headers of the transaction
67712:     virtual nsHttpRequestHead *RequestHead() = 0;
43113: };
43113: 
43113: #define NS_DECL_NSAHTTPTRANSACTION \
43113:     void SetConnection(nsAHttpConnection *); \
64613:     void GetSecurityCallbacks(nsIInterfaceRequestor **, \
64613:                               nsIEventTarget **);       \
67756:     void OnTransportStatus(nsITransport* transport, \
67756:                            nsresult status, PRUint64 progress); \
79445:     bool     IsDone(); \
43113:     nsresult Status(); \
43113:     PRUint32 Available(); \
43113:     nsresult ReadSegments(nsAHttpSegmentReader *, PRUint32, PRUint32 *); \
43113:     nsresult WriteSegments(nsAHttpSegmentWriter *, PRUint32, PRUint32 *); \
67712:     void     Close(nsresult reason);                                    \
67712:     void     SetSSLConnectFailed();                                     \
84396:     nsHttpRequestHead *RequestHead();
43113: 
43113: //-----------------------------------------------------------------------------
43113: // nsAHttpSegmentReader
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsAHttpSegmentReader
43113: {
43113: public:
43113:     // any returned failure code stops segment iteration
43113:     virtual nsresult OnReadSegment(const char *segment,
43113:                                    PRUint32 count,
43113:                                    PRUint32 *countRead) = 0;
43113: };
43113: 
43113: #define NS_DECL_NSAHTTPSEGMENTREADER \
43113:     nsresult OnReadSegment(const char *, PRUint32, PRUint32 *);
43113: 
43113: //-----------------------------------------------------------------------------
43113: // nsAHttpSegmentWriter
43113: //-----------------------------------------------------------------------------
43113: 
43113: class nsAHttpSegmentWriter
43113: {
43113: public:
43113:     // any returned failure code stops segment iteration
43113:     virtual nsresult OnWriteSegment(char *segment,
43113:                                     PRUint32 count,
43113:                                     PRUint32 *countWritten) = 0;
43113: };
43113: 
43113: #define NS_DECL_NSAHTTPSEGMENTWRITER \
43113:     nsresult OnWriteSegment(char *, PRUint32, PRUint32 *);
43113: 
43113: #endif // nsAHttpTransaction_h__
