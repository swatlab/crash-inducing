46771: /* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8; -*- */
46917: /* vim: set sw=2 ts=8 et tw=80 : */
36268: /* ***** BEGIN LICENSE BLOCK *****
36268:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
36268:  *
36268:  * The contents of this file are subject to the Mozilla Public License Version
36268:  * 1.1 (the "License"); you may not use this file except in compliance with
36268:  * the License. You may obtain a copy of the License at
36268:  * http://www.mozilla.org/MPL/
36268:  *
36268:  * Software distributed under the License is distributed on an "AS IS" basis,
36268:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
36268:  * for the specific language governing rights and limitations under the
36268:  * License.
36268:  *
36268:  * The Original Code is Mozilla Content App.
36268:  *
36268:  * The Initial Developer of the Original Code is
36268:  *   The Mozilla Foundation.
36268:  * Portions created by the Initial Developer are Copyright (C) 2009
36268:  * the Initial Developer. All Rights Reserved.
36268:  *
36268:  * Contributor(s):
36268:  *
36268:  * Alternatively, the contents of this file may be used under the terms of
36268:  * either the GNU General Public License Version 2 or later (the "GPL"), or
36268:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
36268:  * in which case the provisions of the GPL or the LGPL are applicable instead
36268:  * of those above. If you wish to allow use of your version of this file only
36268:  * under the terms of either the GPL or the LGPL, and not to allow others to
36268:  * use your version of this file under the terms of the MPL, indicate your
36268:  * decision by deleting the provisions above and replace them with the notice
36268:  * and other provisions required by the GPL or the LGPL. If you do not delete
36268:  * the provisions above, a recipient may use your version of this file under
36268:  * the terms of any one of the MPL, the GPL or the LGPL.
36268:  *
36268:  * ***** END LICENSE BLOCK ***** */
36268: 
36268: #include "TabParent.h"
36268: 
54018: #include "mozilla/dom/ContentParent.h"
36268: #include "mozilla/ipc/DocumentRendererParent.h"
54018: #include "mozilla/layout/RenderFrameParent.h"
56242: #include "mozilla/docshell/OfflineCacheUpdateParent.h"
36268: 
36268: #include "nsIURI.h"
36268: #include "nsFocusManager.h"
36268: #include "nsCOMPtr.h"
36268: #include "nsServiceManagerUtils.h"
36268: #include "nsIDOMElement.h"
36268: #include "nsEventDispatcher.h"
36268: #include "nsIDOMEventTarget.h"
46871: #include "nsIWindowWatcher.h"
46871: #include "nsIDOMWindow.h"
50566: #include "nsIIdentityInfo.h"
46871: #include "nsPIDOMWindow.h"
46871: #include "TabChild.h"
36268: #include "nsIDOMEvent.h"
36268: #include "nsIPrivateDOMEvent.h"
46491: #include "nsFrameLoader.h"
46771: #include "nsNetUtil.h"
46780: #include "jsarray.h"
46780: #include "nsContentUtils.h"
53796: #include "nsContentPermissionHelper.h"
46852: #include "nsIDOMNSHTMLFrameElement.h"
46871: #include "nsIDialogCreator.h"
46871: #include "nsThreadUtils.h"
50566: #include "nsSerializationHelper.h"
46917: #include "nsIPromptFactory.h"
46917: #include "nsIContent.h"
47933: #include "mozilla/unused.h"
58528: #include "nsDebug.h"
47933: 
54018: using namespace mozilla::dom;
54018: using namespace mozilla::ipc;
54018: using namespace mozilla::layout;
46740: 
46771: // The flags passed by the webProgress notifications are 16 bits shifted
46771: // from the ones registered by webProgressListeners.
46771: #define NOTIFY_FLAG_SHIFT 16
36268: 
36268: namespace mozilla {
36268: namespace dom {
36268: 
54603: TabParent *TabParent::mIMETabParent = nsnull;
54603: 
57973: NS_IMPL_ISUPPORTS3(TabParent, nsITabParent, nsIAuthPromptProvider, nsISecureBrowserUI)
46771: 
36268: TabParent::TabParent()
58630:   : mIMEComposing(PR_FALSE)
58630:   , mIMECompositionEnding(PR_FALSE)
60320:   , mIMESeqno(0)
59018:   , mDPI(0)
36268: {
36268: }
36268: 
36268: TabParent::~TabParent()
36268: {
36268: }
36268: 
46797: void
59018: TabParent::SetOwnerElement(nsIDOMElement* aElement)
59018: {
59018:   mFrameElement = aElement;
59018: 
59018:   // Cache the DPI of the screen, since we may lose the element/widget later
59018:   if (aElement) {
59018:     nsCOMPtr<nsIWidget> widget = GetWidget();
59018:     NS_ABORT_IF_FALSE(widget, "Non-null OwnerElement must provide a widget!");
59018:     mDPI = widget->GetDPI();
59018:   }
59018: }
59018: 
59018: void
60065: TabParent::Destroy()
60065: {
60065:   // If this fails, it's most likely due to a content-process crash,
60065:   // and auto-cleanup will kick in.  Otherwise, the child side will
60065:   // destroy itself and send back __delete__().
60065:   unused << SendDestroy();
60065: 
60065:   for (size_t i = 0; i < ManagedPRenderFrameParent().Length(); ++i) {
60065:     RenderFrameParent* rfp =
60065:       static_cast<RenderFrameParent*>(ManagedPRenderFrameParent()[i]);
60065:     rfp->Destroy();
60065:   }
60065: }
60065: 
60065: void
46797: TabParent::ActorDestroy(ActorDestroyReason why)
46797: {
62109:   if (mIMETabParent == this)
62109:     mIMETabParent = nsnull;
48949:   nsRefPtr<nsFrameLoader> frameLoader = GetFrameLoader();
46797:   if (frameLoader) {
46797:     frameLoader->DestroyChild();
46797:   }
46797: }
46797: 
36268: bool
47933: TabParent::RecvMoveFocus(const bool& aForward)
36268: {
36268:   nsCOMPtr<nsIFocusManager> fm = do_GetService(FOCUSMANAGER_CONTRACTID);
36268:   if (fm) {
36268:     nsCOMPtr<nsIDOMElement> dummy;
47933:     PRUint32 type = aForward ? PRUint32(nsIFocusManager::MOVEFOCUS_FORWARD)
47933:                              : PRUint32(nsIFocusManager::MOVEFOCUS_BACKWARD);
36268:     fm->MoveFocus(nsnull, mFrameElement, type, nsIFocusManager::FLAG_BYKEY, 
36268:                   getter_AddRefs(dummy));
36268:   }
36268:   return true;
36268: }
36268: 
36268: bool
47933: TabParent::RecvEvent(const RemoteDOMEvent& aEvent)
36268: {
36268:   nsCOMPtr<nsIDOMEvent> event = do_QueryInterface(aEvent.mEvent);
36268:   NS_ENSURE_TRUE(event, true);
36268: 
36268:   nsCOMPtr<nsIDOMEventTarget> target = do_QueryInterface(mFrameElement);
36268:   NS_ENSURE_TRUE(target, true);
36268: 
36268:   PRBool dummy;
36268:   target->DispatchEvent(event, &dummy);
36268:   return true;
36268: }
36268: 
46491: bool
47933: TabParent::AnswerCreateWindow(PBrowserParent** retval)
46491: {
46491:     if (!mBrowserDOMWindow) {
46491:         return false;
46491:     }
46491: 
46491:     // Get a new rendering area from the browserDOMWin.  We don't want
46491:     // to be starting any loads here, so get it with a null URI.
46491:     nsCOMPtr<nsIFrameLoaderOwner> frameLoaderOwner;
46491:     mBrowserDOMWindow->OpenURIInFrame(nsnull, nsnull,
46491:                                       nsIBrowserDOMWindow::OPEN_NEWTAB,
46491:                                       nsIBrowserDOMWindow::OPEN_NEW,
46491:                                       getter_AddRefs(frameLoaderOwner));
46491:     if (!frameLoaderOwner) {
46491:         return false;
46491:     }
46491: 
46491:     nsRefPtr<nsFrameLoader> frameLoader = frameLoaderOwner->GetFrameLoader();
46491:     if (!frameLoader) {
46491:         return false;
46491:     }
46491: 
47933:     *retval = frameLoader->GetRemoteBrowser();
46491:     return true;
46491: }
46491: 
36268: void
36268: TabParent::LoadURL(nsIURI* aURI)
36268: {
36268:     nsCString spec;
36268:     aURI->GetSpec(spec);
36268: 
47933:     unused << SendLoadURL(spec);
36268: }
36268: 
36268: void
54008: TabParent::Show(const nsIntSize& size)
36268: {
54008:     // sigh
54008:     unused << SendShow(size);
54008: }
54008: 
54008: void
54008: TabParent::Move(const nsIntSize& size)
54008: {
54008:     unused << SendMove(size);
36268: }
36268: 
36268: void
36268: TabParent::Activate()
36268: {
47933:     unused << SendActivate();
36268: }
36268: 
50566: NS_IMETHODIMP
50566: TabParent::Init(nsIDOMWindow *window)
50566: {
50566:   return NS_OK;
50566: }
50566: 
50566: NS_IMETHODIMP
50566: TabParent::GetState(PRUint32 *aState)
50566: {
50566:   NS_ENSURE_ARG(aState);
54299:   NS_WARNING("SecurityState not valid here");
57973:   *aState = 0;
50566:   return NS_OK;
50566: }
50566: 
50566: NS_IMETHODIMP
50566: TabParent::GetTooltipText(nsAString & aTooltipText)
50566: {
57973:   aTooltipText.Truncate();
50566:   return NS_OK;
50566: }
50566: 
56521: PDocumentRendererParent*
56521: TabParent::AllocPDocumentRenderer(const nsRect& documentRect,
56522:                                   const gfxMatrix& transform,
56521:                                   const nsString& bgcolor,
56521:                                   const PRUint32& renderFlags,
56523:                                   const bool& flushLayout,
56523:                                   const nsIntSize& renderSize)
36268: {
36268:     return new DocumentRendererParent();
36268: }
36268: 
36268: bool
36268: TabParent::DeallocPDocumentRenderer(PDocumentRendererParent* actor)
36268: {
36268:     delete actor;
36268:     return true;
36268: }
36268: 
52354: PContentPermissionRequestParent*
52354: TabParent::AllocPContentPermissionRequest(const nsCString& type, const IPC::URI& uri)
46852: {
53796:   return new ContentPermissionRequestParent(type, mFrameElement, uri);
52354: }
52354:   
46852: bool
52354: TabParent::DeallocPContentPermissionRequest(PContentPermissionRequestParent* actor)
46852: {
46852:   delete actor;
46852:   return true;
46852: }
46852: 
36268: void
36268: TabParent::SendMouseEvent(const nsAString& aType, float aX, float aY,
36268:                           PRInt32 aButton, PRInt32 aClickCount,
36268:                           PRInt32 aModifiers, PRBool aIgnoreRootScrollFrame)
36268: {
47933:   unused << PBrowserParent::SendMouseEvent(nsString(aType), aX, aY,
47933:                                            aButton, aClickCount,
36268:                                            aModifiers, aIgnoreRootScrollFrame);
36268: }
36268: 
46726: void
46726: TabParent::SendKeyEvent(const nsAString& aType,
46726:                         PRInt32 aKeyCode,
46726:                         PRInt32 aCharCode,
46726:                         PRInt32 aModifiers,
46726:                         PRBool aPreventDefault)
46726: {
47933:   unused << PBrowserParent::SendKeyEvent(nsString(aType), aKeyCode, aCharCode,
47933:                                          aModifiers, aPreventDefault);
46726: }
46726: 
46683: bool
47933: TabParent::RecvSyncMessage(const nsString& aMessage,
46683:                            const nsString& aJSON,
57141:                            InfallibleTArray<nsString>* aJSONRetVal)
46683: {
46907:   return ReceiveMessage(aMessage, PR_TRUE, aJSON, aJSONRetVal);
46683: }
46683: 
46683: bool
47933: TabParent::RecvAsyncMessage(const nsString& aMessage,
46683:                             const nsString& aJSON)
46683: {
46780:   return ReceiveMessage(aMessage, PR_FALSE, aJSON, nsnull);
46780: }
46780: 
46780: bool
54602: TabParent::RecvNotifyIMEFocus(const PRBool& aFocus,
54871:                               nsIMEUpdatePreference* aPreference,
54871:                               PRUint32* aSeqno)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
54602:   if (!widget)
54602:     return true;
54602: 
54871:   *aSeqno = mIMESeqno;
54603:   mIMETabParent = aFocus ? this : nsnull;
54603:   mIMESelectionAnchor = 0;
54603:   mIMESelectionFocus = 0;
54602:   nsresult rv = widget->OnIMEFocusChange(aFocus);
54602: 
54602:   if (aFocus) {
54602:     if (NS_SUCCEEDED(rv) && rv != NS_SUCCESS_IME_NO_UPDATES) {
54602:       *aPreference = widget->GetIMEUpdatePreference();
54602:     } else {
54602:       aPreference->mWantUpdates = PR_FALSE;
54602:       aPreference->mWantHints = PR_FALSE;
54602:     }
54602:   } else {
54602:     mIMECacheText.Truncate(0);
54602:   }
54602:   return true;
54602: }
54602: 
54602: bool
54602: TabParent::RecvNotifyIMETextChange(const PRUint32& aStart,
54602:                                    const PRUint32& aEnd,
54602:                                    const PRUint32& aNewEnd)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
54602:   if (!widget)
54602:     return true;
54602: 
54602:   widget->OnIMETextChange(aStart, aEnd, aNewEnd);
54602:   return true;
54602: }
54602: 
54602: bool
54871: TabParent::RecvNotifyIMESelection(const PRUint32& aSeqno,
54871:                                   const PRUint32& aAnchor,
54602:                                   const PRUint32& aFocus)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
54602:   if (!widget)
54602:     return true;
54602: 
54871:   if (aSeqno == mIMESeqno) {
54603:     mIMESelectionAnchor = aAnchor;
54603:     mIMESelectionFocus = aFocus;
54602:     widget->OnIMESelectionChange();
54871:   }
54602:   return true;
54602: }
54602: 
54602: bool
54602: TabParent::RecvNotifyIMETextHint(const nsString& aText)
54602: {
54602:   // Replace our cache with new text
54602:   mIMECacheText = aText;
54602:   return true;
54602: }
54602: 
54603: /**
54603:  * Try to answer query event using cached text.
54603:  *
54603:  * For NS_QUERY_SELECTED_TEXT, fail if the cache doesn't contain the whole
54603:  *  selected range. (This shouldn't happen because PuppetWidget should have
54603:  *  already sent the whole selection.)
54603:  *
54603:  * For NS_QUERY_TEXT_CONTENT, fail only if the cache doesn't overlap with
54603:  *  the queried range. Note the difference from above. We use
54603:  *  this behavior because a normal NS_QUERY_TEXT_CONTENT event is allowed to
54603:  *  have out-of-bounds offsets, so that widget can request content without
54603:  *  knowing the exact length of text. It's up to widget to handle cases when
54603:  *  the returned offset/length are different from the queried offset/length.
54603:  */
54603: bool
54603: TabParent::HandleQueryContentEvent(nsQueryContentEvent& aEvent)
54603: {
54603:   aEvent.mSucceeded = PR_FALSE;
54603:   aEvent.mWasAsync = PR_FALSE;
54603:   aEvent.mReply.mFocusedWidget = nsCOMPtr<nsIWidget>(GetWidget()).get();
54603: 
54603:   switch (aEvent.message)
54603:   {
54603:   case NS_QUERY_SELECTED_TEXT:
54603:     {
54603:       aEvent.mReply.mOffset = PR_MIN(mIMESelectionAnchor, mIMESelectionFocus);
54603:       if (mIMESelectionAnchor == mIMESelectionFocus) {
54603:         aEvent.mReply.mString.Truncate(0);
54603:       } else {
54603:         if (mIMESelectionAnchor > mIMECacheText.Length() ||
54603:             mIMESelectionFocus > mIMECacheText.Length()) {
54603:           break;
54603:         }
54603:         PRUint32 selLen = mIMESelectionAnchor > mIMESelectionFocus ?
54603:                           mIMESelectionAnchor - mIMESelectionFocus :
54603:                           mIMESelectionFocus - mIMESelectionAnchor;
54603:         aEvent.mReply.mString = Substring(mIMECacheText,
54603:                                           aEvent.mReply.mOffset,
54603:                                           selLen);
54603:       }
54603:       aEvent.mReply.mReversed = mIMESelectionFocus < mIMESelectionAnchor;
54603:       aEvent.mReply.mHasSelection = PR_TRUE;
54603:       aEvent.mSucceeded = PR_TRUE;
54603:     }
54603:     break;
54603:   case NS_QUERY_TEXT_CONTENT:
54603:     {
54603:       PRUint32 inputOffset = aEvent.mInput.mOffset,
54603:                inputEnd = inputOffset + aEvent.mInput.mLength;
54603: 
54603:       if (inputEnd > mIMECacheText.Length()) {
54603:         inputEnd = mIMECacheText.Length();
54603:       }
54603:       if (inputEnd < inputOffset) {
54603:         break;
54603:       }
54603:       aEvent.mReply.mOffset = inputOffset;
54603:       aEvent.mReply.mString = Substring(mIMECacheText,
54603:                                         inputOffset,
54603:                                         inputEnd - inputOffset);
54603:       aEvent.mSucceeded = PR_TRUE;
54603:     }
54603:     break;
54603:   }
54603:   return true;
54603: }
54603: 
54604: bool
54871: TabParent::SendCompositionEvent(nsCompositionEvent& event)
54604: {
54604:   mIMEComposing = event.message == NS_COMPOSITION_START;
54604:   mIMECompositionStart = PR_MIN(mIMESelectionAnchor, mIMESelectionFocus);
54604:   if (mIMECompositionEnding)
54604:     return true;
54871:   event.seqno = ++mIMESeqno;
54604:   return PBrowserParent::SendCompositionEvent(event);
54604: }
54604: 
54603: /**
54603:  * During ResetInputState or CancelComposition, widget usually sends a
54603:  * NS_TEXT_TEXT event to finalize or clear the composition, respectively
54603:  *
54603:  * Because the event will not reach content in time, we intercept it
54603:  * here and pass the text as the EndIMEComposition return value
54603:  */
54603: bool
54871: TabParent::SendTextEvent(nsTextEvent& event)
54603: {
54603:   if (mIMECompositionEnding) {
54603:     mIMECompositionText = event.theText;
54603:     return true;
54603:   }
54604: 
54604:   // We must be able to simulate the selection because
54604:   // we might not receive selection updates in time
54604:   if (!mIMEComposing) {
54604:     mIMECompositionStart = PR_MIN(mIMESelectionAnchor, mIMESelectionFocus);
54604:   }
54604:   mIMESelectionAnchor = mIMESelectionFocus =
54604:       mIMECompositionStart + event.theText.Length();
54604: 
54871:   event.seqno = ++mIMESeqno;
54603:   return PBrowserParent::SendTextEvent(event);
54603: }
54603: 
54602: bool
54871: TabParent::SendSelectionEvent(nsSelectionEvent& event)
54604: {
54604:   mIMESelectionAnchor = event.mOffset + (event.mReversed ? event.mLength : 0);
54604:   mIMESelectionFocus = event.mOffset + (!event.mReversed ? event.mLength : 0);
54871:   event.seqno = ++mIMESeqno;
54604:   return PBrowserParent::SendSelectionEvent(event);
54604: }
54604: 
54604: bool
54602: TabParent::RecvEndIMEComposition(const PRBool& aCancel,
54602:                                  nsString* aComposition)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
54602:   if (!widget)
54602:     return true;
54602: 
54603:   mIMECompositionEnding = PR_TRUE;
54603: 
54602:   if (aCancel) {
54602:     widget->CancelIMEComposition();
54602:   } else {
54602:     widget->ResetInputState();
54602:   }
54603: 
54603:   mIMECompositionEnding = PR_FALSE;
54603:   *aComposition = mIMECompositionText;
54603:   mIMECompositionText.Truncate(0);  
54602:   return true;
54602: }
54602: 
54602: bool
54602: TabParent::RecvGetIMEEnabled(PRUint32* aValue)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
58019:   if (!widget)
58019:     return true;
58019: 
58019:   IMEContext context;
63893:   widget->GetInputMode(context);
58019:   *aValue = context.mStatus;
54602:   return true;
54602: }
54602: 
54602: bool
68713: TabParent::RecvSetInputMode(const PRUint32& aValue, const nsString& aType, const nsString& aAction, const PRUint32& aReason)
54602: {
70151:   // mIMETabParent (which is actually static) tracks which if any TabParent has IMEFocus
70151:   // When the input mode is set to anything but IME_STATUS_NONE, mIMETabParent should be set to this
70151:   mIMETabParent = aValue & nsIContent::IME_STATUS_MASK_ENABLED ? this : nsnull;
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
58017:   if (!widget || !AllowContentIME())
58017:     return true;
58017: 
58017:   IMEContext context;
58017:   context.mStatus = aValue;
58017:   context.mHTMLInputType.Assign(aType);
58121:   context.mActionHint.Assign(aAction);
68713:   context.mReason = aReason;
63893:   widget->SetInputMode(context);
55999: 
55999:   nsCOMPtr<nsIObserverService> observerService = mozilla::services::GetObserverService();
58017:   if (!observerService)
58017:     return true;
58017: 
55999:   nsAutoString state;
55999:   state.AppendInt(aValue);
55999:   observerService->NotifyObservers(nsnull, "ime-enabled-state-changed", state.get());
55999: 
54602:   return true;
54602: }
54602: 
54602: bool
54602: TabParent::RecvGetIMEOpenState(PRBool* aValue)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
54602:   if (widget)
54602:     widget->GetIMEOpenState(aValue);
54602:   return true;
54602: }
54602: 
54602: bool
54602: TabParent::RecvSetIMEOpenState(const PRBool& aValue)
54602: {
54602:   nsCOMPtr<nsIWidget> widget = GetWidget();
56078:   if (widget && AllowContentIME())
54602:     widget->SetIMEOpenState(aValue);
54602:   return true;
54602: }
54602: 
54602: bool
58528: TabParent::RecvGetDPI(float* aValue)
58528: {
59018:   NS_ABORT_IF_FALSE(mDPI > 0, 
59018:                     "Must not ask for DPI before OwnerElement is received!");
59018:   *aValue = mDPI;
58528:   return true;
58528: }
58528: 
58528: bool
46780: TabParent::ReceiveMessage(const nsString& aMessage,
46780:                           PRBool aSync,
46780:                           const nsString& aJSON,
57141:                           InfallibleTArray<nsString>* aJSONRetVal)
46740: {
48949:   nsRefPtr<nsFrameLoader> frameLoader = GetFrameLoader();
46683:   if (frameLoader && frameLoader->GetFrameMessageManager()) {
70563:     nsRefPtr<nsFrameMessageManager> manager =
70563:       frameLoader->GetFrameMessageManager();
46780:     JSContext* ctx = manager->GetJSContext();
46780:     JSAutoRequest ar(ctx);
46907:     PRUint32 len = 0; //TODO: obtain a real value in bug 572685
46780:     // Because we want JS messages to have always the same properties,
46780:     // create array even if len == 0.
64397:     JSObject* objectsArray = JS_NewArrayObject(ctx, len, NULL);
63822:     if (!objectsArray) {
46780:       return false;
46740:     }
46740: 
46780:     manager->ReceiveMessage(mFrameElement,
46683:                             aMessage,
46780:                             aSync,
46683:                             aJSON,
46780:                             objectsArray,
46780:                             aJSONRetVal);
46683:   }
46683:   return true;
46683: }
46683: 
46917: // nsIAuthPromptProvider
46917: 
46917: // This method is largely copied from nsDocShell::GetAuthPrompt
46917: NS_IMETHODIMP
46917: TabParent::GetAuthPrompt(PRUint32 aPromptReason, const nsIID& iid,
46917:                           void** aResult)
46917: {
46917:   // we're either allowing auth, or it's a proxy request
46917:   nsresult rv;
46917:   nsCOMPtr<nsIPromptFactory> wwatch =
46917:     do_GetService(NS_WINDOWWATCHER_CONTRACTID, &rv);
46917:   NS_ENSURE_SUCCESS(rv, rv);
46917: 
46917:   nsCOMPtr<nsIDOMWindow> window;
46917:   nsCOMPtr<nsIContent> frame = do_QueryInterface(mFrameElement);
46917:   if (frame)
46917:     window = do_QueryInterface(frame->GetOwnerDoc()->GetWindow());
46917: 
46917:   // Get an auth prompter for our window so that the parenting
46917:   // of the dialogs works as it should when using tabs.
46917:   return wwatch->GetPrompt(window, iid,
46917:                            reinterpret_cast<void**>(aResult));
46917: }
46917: 
46871: PContentDialogParent*
46871: TabParent::AllocPContentDialog(const PRUint32& aType,
46871:                                const nsCString& aName,
46871:                                const nsCString& aFeatures,
57141:                                const InfallibleTArray<int>& aIntParams,
57141:                                const InfallibleTArray<nsString>& aStringParams)
46871: {
46871:   ContentDialogParent* parent = new ContentDialogParent();
46871:   nsCOMPtr<nsIDialogParamBlock> params =
46871:     do_CreateInstance(NS_DIALOGPARAMBLOCK_CONTRACTID);
46871:   TabChild::ArraysToParams(aIntParams, aStringParams, params);
46871:   mDelayedDialogs.AppendElement(new DelayedDialogData(parent, aType, aName,
46871:                                                       aFeatures, params));
46871:   nsRefPtr<nsIRunnable> ev =
46871:     NS_NewRunnableMethod(this, &TabParent::HandleDelayedDialogs);
46871:   NS_DispatchToCurrentThread(ev);
46871:   return parent;
46871: }
46871: 
46871: void
46871: TabParent::HandleDelayedDialogs()
46871: {
46871:   nsCOMPtr<nsIWindowWatcher> ww = do_GetService(NS_WINDOWWATCHER_CONTRACTID);
46871:   nsCOMPtr<nsIDOMWindow> window;
46871:   nsCOMPtr<nsIContent> frame = do_QueryInterface(mFrameElement);
46871:   if (frame) {
46871:     window = do_QueryInterface(frame->GetOwnerDoc()->GetWindow());
46871:   }
46871:   nsCOMPtr<nsIDialogCreator> dialogCreator = do_QueryInterface(mBrowserDOMWindow);
46871:   while (!ShouldDelayDialogs() && mDelayedDialogs.Length()) {
46871:     PRUint32 index = mDelayedDialogs.Length() - 1;
46871:     DelayedDialogData* data = mDelayedDialogs[index];
46871:     mDelayedDialogs.RemoveElementAt(index);
46871:     nsCOMPtr<nsIDialogParamBlock> params;
46871:     params.swap(data->mParams);
46871:     PContentDialogParent* dialog = data->mDialog;
46871:     if (dialogCreator) {
46871:       dialogCreator->OpenDialog(data->mType,
46871:                                 data->mName, data->mFeatures,
46871:                                 params, mFrameElement);
46871:     } else if (ww) {
46871:       nsCAutoString url;
46871:       if (data->mType) {
46871:         if (data->mType == nsIDialogCreator::SELECT_DIALOG) {
46871:           url.Assign("chrome://global/content/selectDialog.xul");
46871:         } else if (data->mType == nsIDialogCreator::GENERIC_DIALOG) {
46871:           url.Assign("chrome://global/content/commonDialog.xul");
46871:         }
46871: 
46871:         nsCOMPtr<nsISupports> arguments(do_QueryInterface(params));
46871:         nsCOMPtr<nsIDOMWindow> dialog;
46871:         ww->OpenWindow(window, url.get(), data->mName.get(),
46871:                        data->mFeatures.get(), arguments, getter_AddRefs(dialog));
46871:       } else {
46871:         NS_WARNING("unknown dialog types aren't automatically supported in E10s yet!");
46871:       }
46871:     }
46871: 
46871:     delete data;
46871:     if (dialog) {
57141:       InfallibleTArray<PRInt32> intParams;
57141:       InfallibleTArray<nsString> stringParams;
46871:       TabChild::ParamsToArrays(params, intParams, stringParams);
47933:       unused << PContentDialogParent::Send__delete__(dialog,
47933:                                                      intParams, stringParams);
46871:     }
46871:   }
46871:   if (ShouldDelayDialogs() && mDelayedDialogs.Length()) {
46871:     nsContentUtils::DispatchTrustedEvent(frame->GetOwnerDoc(), frame,
46871:                                          NS_LITERAL_STRING("MozDelayedModalDialog"),
46871:                                          PR_TRUE, PR_TRUE);
46871:   }
46871: }
46871: 
54018: PRenderFrameParent*
54018: TabParent::AllocPRenderFrame()
54018: {
54018:   nsRefPtr<nsFrameLoader> frameLoader = GetFrameLoader();
56505:   NS_WARN_IF_FALSE(frameLoader, "'message sent to unknown actor ID' coming up");
56505:   return frameLoader ? new RenderFrameParent(frameLoader) : nsnull;
54018: }
54018: 
54018: bool
54018: TabParent::DeallocPRenderFrame(PRenderFrameParent* aFrame)
54018: {
54018:   delete aFrame;
54018:   return true;
54018: }
54018: 
56242: mozilla::docshell::POfflineCacheUpdateParent*
56242: TabParent::AllocPOfflineCacheUpdate(const URI& aManifestURI,
56242:                                     const URI& aDocumentURI,
56242:                                     const nsCString& aClientID,
56242:                                     const bool& stickDocument)
56242: {
56242:   nsRefPtr<mozilla::docshell::OfflineCacheUpdateParent> update =
56242:     new mozilla::docshell::OfflineCacheUpdateParent();
56242: 
56242:   nsresult rv = update->Schedule(aManifestURI, aDocumentURI, aClientID,
56242:                                  stickDocument);
56242:   if (NS_FAILED(rv))
56242:     return nsnull;
56242: 
56242:   POfflineCacheUpdateParent* result = update.get();
56242:   update.forget();
56242:   return result;
56242: }
56242: 
56242: bool
56242: TabParent::DeallocPOfflineCacheUpdate(mozilla::docshell::POfflineCacheUpdateParent* actor)
56242: {
56242:   mozilla::docshell::OfflineCacheUpdateParent* update =
56242:     static_cast<mozilla::docshell::OfflineCacheUpdateParent*>(actor);
56242: 
56242:   update->Release();
56242:   return true;
56242: }
56242: 
46871: PRBool
46871: TabParent::ShouldDelayDialogs()
46871: {
48949:   nsRefPtr<nsFrameLoader> frameLoader = GetFrameLoader();
46871:   NS_ENSURE_TRUE(frameLoader, PR_TRUE);
46871:   PRBool delay = PR_FALSE;
46871:   frameLoader->GetDelayRemoteDialogs(&delay);
46871:   return delay;
46871: }
46871: 
56078: PRBool
56078: TabParent::AllowContentIME()
56078: {
56078:   nsFocusManager* fm = nsFocusManager::GetFocusManager();
56078:   NS_ENSURE_TRUE(fm, PR_FALSE);
56078: 
56078:   nsCOMPtr<nsIContent> focusedContent = fm->GetFocusedContent();
56078:   if (focusedContent && focusedContent->IsEditable())
56078:     return PR_FALSE;
56078: 
56078:   return PR_TRUE;
56078: }
56078: 
48949: already_AddRefed<nsFrameLoader>
48949: TabParent::GetFrameLoader() const
48949: {
48949:   nsCOMPtr<nsIFrameLoaderOwner> frameLoaderOwner = do_QueryInterface(mFrameElement);
48949:   return frameLoaderOwner ? frameLoaderOwner->GetFrameLoader() : nsnull;
48949: }
48949: 
54602: already_AddRefed<nsIWidget>
54602: TabParent::GetWidget() const
54602: {
54602:   nsCOMPtr<nsIContent> content = do_QueryInterface(mFrameElement);
54602:   if (!content)
54602:     return nsnull;
54602: 
54602:   nsIFrame *frame = content->GetPrimaryFrame();
54602:   if (!frame)
54602:     return nsnull;
54602: 
54602:   return nsCOMPtr<nsIWidget>(frame->GetNearestWidget()).forget();
54602: }
54602: 
36268: } // namespace tabs
36268: } // namespace mozilla
