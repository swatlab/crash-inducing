70160: <!DOCTYPE HTML>
70160: <html>
70160: <!--
70160: https://bugzilla.mozilla.org/show_bug.cgi?id=648997
70160: -->
70160: <head>
70160:   <title>Test for Bug 648997</title>
70160:   <script type="text/javascript" src="/MochiKit/MochiKit.js"></script>
70160:   <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
70160:   <script type="text/javascript" src="fileutils.js"></script>
70160:   <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
70160: </head>
70160: <body>
70160: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=648997">Mozilla Bug 648997</a>
70160: <p id="display"></p>
70160: <div id="content" style="display: none">
70160:   
70160: </div>
70160: <pre id="test">
70160: <script class="testbody" type="text/javascript;version=1.7">
70160: 
70160: // We're prefixing still
70160: window.BlobBuilder = window.MozBlobBuilder;
70160: 
70160: /** Test for Bug 648997 **/
70160: var blobBuilder = BlobBuilder();
70160: ok(blobBuilder, "BlobBuilder should exist");
70160: 
70160: ok(blobBuilder.append, "BlobBuilder should have an append method");
70160: ok(blobBuilder.getBlob, "BlobBuilder should have a getBlob method");
73694: ok(blobBuilder.getFile, "BlobBuilder should have a getFile method");
70160: 
70160: try {
70160: blobBuilder.append();
70160: ok(false, "NOT REACHED");
70160: } catch(e) {
70160: ok(true, "an empty argument to append should throw");
70160: }
70160: 
80782: blobBuilder.append(null);
80782: // Yay we didn't crash.
80782: 
70160: blobBuilder.append("squiggle");
70160: let blob1 = blobBuilder.getBlob();
73694: ok(blob1 instanceof Blob, "getBlob should produce Blobs");
73694: ok(!(blob1 instanceof File), "getBlob should not produce Files");
73694: is(blob1.type, "", "getBlob with no argument should return Blob with empty type");
73694: is(blob1.size, 8, "getBlob should return Blob with correct size");
73694: 
70160: blobBuilder.append("ohai");
73694: let blob2 = blobBuilder.getFile("thefilename");
73694: ok(blob2 instanceof Blob, "getFile should produce Blobs");
73694: ok(blob2 instanceof File, "getFile should produce Files");
73694: is(blob2.name, "thefilename", "getFile should produces Files with correct name");
73694: is(blob2.type, "", "getFile with no second argument should return File with empty type");
73694: is(blob2.size, 4, "getFile should return Blob with correct size");
73694: 
73694: blobBuilder.append("steak");
73694: let blob3 = blobBuilder.getBlob("content/type");
73694: ok(blob3 instanceof Blob, "getBlob should produce Blobs");
73694: ok(!(blob3 instanceof File), "getBlob should not produce Files");
73694: is(blob3.type, "content/type", "getBlob with no argument should return Blob with empty type");
73694: is(blob3.size, 5, "getBlob should return Blob with correct size");
73694: 
73694: blobBuilder.append("apples");
73694: let blob4 = blobBuilder.getFile("the other filename", "text/plain");
73694: ok(blob4 instanceof Blob, "getFile should produce Blobs");
73694: ok(blob4 instanceof File, "getFile should produce Files");
73694: is(blob4.name, "the other filename", "getFile should produces Files with correct name");
73694: is(blob4.type, "text/plain", "getFile with second argument should return File with correct type");
73694: is(blob4.size, 6, "getFile should return Blob with correct size");
73694: 
73694: blobBuilder.append("boletes");
73694: let blob5 = blobBuilder.getFile("");
73694: ok(blob5 instanceof Blob, "getFile should produce Blobs");
73694: ok(blob5 instanceof File, "getFile should produce Files");
73694: is(blob5.name, "", "getFile with empty name should produces Files with empty name");
73694: is(blob5.type, "", "getFile with no second argument should return File with correct type");
73694: is(blob5.size, 7, "getFile should return Blob with correct size");
73694: testFile(blob5, "boletes", "Test empty-named File from BlobBuilder.getFile");
73694: 
70160: 
70160: let aB = new ArrayBuffer(16);
70160: var int8View = new Int8Array(aB);
70160: for (var i = 0; i < 16; i++) {
70160:   int8View[i] = i+65;
70160: }
70160: 
70160: let testData = 
70160:  [
70160:     // Test 3 strings
70160:     [["foo", "bar", "baz"], [{start: 0, length: 9, contents: "foobarbaz"},
70160:                              {start: 0, length: 3, contents: "foo"},
70160:                              {start: 3, length:6, contents:  "barbaz"},
70160:                              {start: 6, length: 3, contents:  "baz"},
73694:                              {start: 6, length: 6, contents: "baz"},
70160:                              {start: 0, length: 9, contents:  "foobarbaz"},
73694:                              {start: 0, length: 11, contents: "foobarbaz"},
73694:                              {start: 10, length: 5, contents: ""}]],
70160:     // Test string, Blob, string
70160:     [["foo", blob1, "baz"], [{start: 0, length: 3, contents:  "foo"},
70160:                              {start: 3, length: 8, contents:  "squiggle"},
70160:                              {start: 2, length: 2, contents:  "os"},
70160:                              {start: 10, length: 2, contents: "eb"}]],
70160:     // Test blob, string, blob
70160:     [[blob1, "foo", blob1], [{start: 0, length: 8, contents:  "squiggle"},
70160:                              {start: 7, length: 2, contents:  "ef"},
70160:                              {start: 10, length: 2, contents: "os"},
70160:                              {start: 1, length: 3, contents:  "qui"},
70160:                              {start: 12, length: 3, contents: "qui"},
73694:                              {start: 40, length: 20, contents: ""}]],
70160:     // Test blobs all the way down
70160:     [[blob2, blob1, blob2], [{start: 0, length: 4, contents:  "ohai"},
70160:                              {start: 4, length: 8, contents:  "squiggle"},
70160:                              {start: 12, length: 4, contents: "ohai"},
70160:                              {start: 1, length: 2, contents:  "ha"},
70160:                              {start: 5, length: 4, contents:  "quig"}]],
70160:     // Test an array buffer
70160:     [[aB, blob1, "foo"],    [{start: 0, length: 8, contents:  "ABCDEFGH"},
70160:                              {start: 8, length:10, contents:  "IJKLMNOPsq"},
70160:                              {start: 17, length: 3, contents: "qui"},
70160:                              {start: 4, length: 8, contents:  "EFGHIJKL"}]],
70160:     // Test type coercion of a number
70160:     [[3, aB, "foo"],        [{start: 0, length: 8, contents:  "3ABCDEFG"},
70160:                              {start: 8, length:10, contents:  "HIJKLMNOPf"},
73694:                              {start: 17, length: 4, contents: "foo"},
70160:                              {start: 4, length: 8, contents:  "DEFGHIJK"}]]
70160:  ];
70160: 
70160: let testCounter = 0;
70160: 
70160: function doTest(data) {
70160:   testCounter++;
70160: 
70160:   [blobs, tests] = data;
70160: 
70160:   function runTest(test) {
70160: 
70160:     let bb = new BlobBuilder();
70160:     ok(bb, "BlobBuilder should exist");
70160: 
70160:     function doAppend(blob) {
70160:       bb.append(blob);
70160: 	  blob.expando = bb; // Do we leak?
70160:     }
70160: 
70160:     blobs.forEach(doAppend);
70160:     ok(true, "Test " + testCounter + " appended all successfully");
70160:     let blob = bb.getBlob();
70160:     ok(blob, "Test " + testCounter + " got blob");
70160:     ok(blob instanceof Blob, "Test " + testCounter + " blob is a Blob");
73694:     ok(!(blob instanceof File), "Test " + testCounter + " blob is not a File");
70160: 
70160:     let slice = blob.mozSlice(test.start, test.start + test.length);
70160:     ok(slice, "Test " + testCounter + " got slice");
70160:     ok(slice instanceof Blob, "Test " + testCounter + " slice is a Blob");
73694:     ok(!(slice instanceof File), "Test " + testCounter + " slice is not a File");
73694:     is(slice.size, test.contents.length,
70160:        "Test " + testCounter + " slice is correct size");
70160: 
73694:     testFile(slice, test.contents, "Test " + testCounter);
70160:   }
70160:   tests.forEach(runTest);
70160:   SpecialPowers.gc();
70160: }
70160: 
70160: SimpleTest.waitForExplicitFinish();
70160: testData.forEach(doTest);
70160: 
70160: </script>
70160: </pre>
70160: </body>
70160: </html>
