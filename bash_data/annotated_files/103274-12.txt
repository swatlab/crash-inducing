 13942: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 13942: 
 13942: //-----------------------------------------------------------------------------
 13942: var BUGNUMBER = 384412;
 13942: var summary = 'Exercise frame handling code';
 13942: var actual = '';
 13942: var expect = '';
 13942: 
 13942: 
 13942: //-----------------------------------------------------------------------------
 13942: test();
 13942: //-----------------------------------------------------------------------------
 13942: 
 13942: function test()
 13942: {
 13942:   enterFunc ('test');
 13942:   printBugNumber(BUGNUMBER);
 13942:   printStatus (summary);
 13942:  
 13942: /*
 13942:  * Generators
 13942:  */
 13942: 
 13942: /* Generator yields properly */
 13942:   f = (function(n) { for (var i = 0; i != n; i++) yield i });
 13942:   g = f(3);
 13942:   expect(0, g.next());
 13942:   expect(1, g.next());
 13942:   expect(2, g.next());
 13942:   s = "no exception";
 13942:   try { g.next(); } catch (e) { s = e + ""; }
 13942:   expect("[object StopIteration]", s);
 13942: 
 13942: /* Generator yields properly in finally */
 13942:   f = (function(n) {
 13942:       try {
 13942:         for (var i = 0; i != n; i++) 
 13942:           yield i;
 13942:       } finally {
 13942:         yield "finally";
 13942:       }
 13942:     });
 13942: 
 13942:   g = f(3);
 13942:   expect(0, g.next());
 13942:   expect(1, g.next());
 13942:   expect(2, g.next());
 13942:   expect("finally", g.next());
 13942: 
 13942: /* Generator throws when closed with yield in finally */
 13942:   g = f(3);
 13942:   expect(0, g.next());
 13942:   s = "no exception";
 13942:   try { g.close(); } catch (e) { s = e + ""; };
 13942:   expect("TypeError: yield from closing generator " + f.toSource(), s);
 13942: 
 13942: 
 13942: /*
 13942:  * XML predicates
 13942:  */
 13942:   t = <xml><eins><name>ich</name></eins><eins><name>joki</name></eins></xml>;
 13942: 
 13942: /* Predicates, nested predicates and empty lists */
 13942:   expect(<eins><name>joki</name></eins>, t.eins.(name == "joki"));
 13942:   expect(t.eins, t.eins.(t.eins.(true)));
 13942:   expect(t.(false), t.eins.(false).(true));
 13942: 
 13942: /* Predicate with yield throws */
 13942:   f = (function() { t.eins.(yield true); });
 13942:   g = f();
 13942:   s = "no exception";
 13942:   try { g.next(); } catch (e) { s = e + ""; }
 13942:   expect("no exception", s);
 13942: 
 13942: /* Function with predicate without return returns void */
 13942:   f = (function() { t.eins.(true); });
 13942:   expect(undefined, f());
 13942: 
 13942: /* XML filter predicate in finally preserves return value */
 13942:   f = (function() {
 13942:       try {
 13942:         return "hallo";
 13942:       } finally {
 13942:         t.eins.(true);
 13942:       }
 13942:     });
 13942:   expect("hallo", f());
 13942: 
 13942: 
 13942: /*
 13942:  * Calls that have been replaced with js_PushFrame() &c...
 13942:  */
 13942:   f = (function() { return arguments[(arguments.length - 1) / 2]; });
 13942:   expect(2, f(1, 2, 3));
 13942:   expect(2, f.call(null, 1, 2, 3));
 13942:   expect(2, f.apply(null, [1, 2, 3]));
 13942:   expect("a1c", "abc".replace("b", f));
 13942:   s = "no exception";
 13942:   try {
 13942:     "abc".replace("b", (function() { throw "hello" }));
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
 13942:   expect("hello", s);
 13942:   expect(6, [1, 2, 3].reduce(function(a, b) { return a + b; }));
 13942:   s = "no exception";
 13942:   try {
 13942:     [1, 2, 3].reduce(function(a, b) { if (b == 2) throw "hello"; });
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
 13942:   expect("hello", s);
 13942: 
 13942: /*
 13942:  * __noSuchMethod__
 13942:  */
 13942:   o = {};
 13942:   s = "no exception";
 13942:   try {
 13942:     o.hello();
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
 13942:   expect("TypeError: o.hello is not a function", s);
 13942:   o.__noSuchMethod__ = (function() { return "world"; });
 13942:   expect("world", o.hello());
 13942:   o.__noSuchMethod__ = 1;
 13942:   s = "no exception";
 13942:   try {
 13942:     o.hello();
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
 13942:   expect("TypeError: o.hello is not a function", s);
 13942:   o.__noSuchMethod__ = {};
 13942:   s = "no exception";
 13942:   try {
 13942:     o.hello();
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
103274:   expect("TypeError: ({}) is not a function", s);
 13942:   s = "no exception";
 13942:   try {
 13942:     eval("o.hello()");
 13942:   } catch (e) {
 13942:     s = e + "";
 13942:   }
103274:   expect("TypeError: ({}) is not a function", s);
 13942:   s = "no exception";
 13942:   try { [2, 3, 0].sort({}); } catch (e) { s = e + ""; }
103274:   expect("TypeError: ({}) is not a function", s);
 13942: 
 13942: /*
 13942:  * Generator expressions.
 13942:  */
 13942:   String.prototype.__iterator__ = (function () {
 13942:       /*
 13942:        * NOTE:
 13942:        * Without the "0 + ", the loop over <x/> does not terminate because
 13942:        * the iterator gets run on a string with an empty length property.
 13942:        */
 13942:       for (let i = 0; i != 0 + this.length; i++)
 13942:         yield this[i];
 13942:     });
 13942:   expect(["a1", "a2", "a3", "b1", "b2", "b3", "c1", "c2", "c3"] + "",
 13942:          ([a + b for (a in 'abc') for (b in '123')]) + "");
 13942:   expect("", ([x for (x in <x/>)]) + "");
 13942: 
 13942: /*
 13942:  * Version switching
 13942:  */
 13942:   if (typeof version == 'function')
 13942:   {
 13942:     var v = version(150);
 13942:     f = new Function("return version(arguments[0])");
 53848:     revertVersion();
 13942:     expect(150, f());
 53848:     expect(150, eval("f()"));
 13942:     expect(0, eval("f(0); f()"));
 53848:     revertVersion();
 13942:   }
 13942:   print("End of Tests");
 13942: 
 13942: /*
 13942:  * Utility functions
 13942:  */
 13942:   function expect(a, b) {
 13942:     print('expect: ' + a + ', actual: ' + b);
 13942:     reportCompare(a, b, summary);
 13942:   }
 13942: 
 13942: 
 13942:   exitFunc ('test');
 13942: }
