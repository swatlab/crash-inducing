108517: /* Any copyright is dedicated to the Public Domain.
108517:  * http://creativecommons.org/publicdomain/zero/1.0/
108517:  */
108517: 
108517: // Verify that API functions fail if the Add-ons Manager isn't initialised.
108517: 
115560: const IGNORE = ["escapeAddonURI", "shouldAutoUpdate", "getStartupChanges",
115560:                 "addTypeListener", "removeTypeListener",
115560:                 "addAddonListener", "removeAddonListener",
115560:                 "addInstallListener", "removeInstallListener",
115560:                 "addManagerListener", "removeManagerListener"];
108517: 
115560: const IGNORE_PRIVATE = ["AddonAuthor", "AddonCompatibilityOverride",
115560:                         "AddonScreenshot", "AddonType", "startup", "shutdown",
115560:                         "registerProvider", "unregisterProvider",
115560:                         "addStartupChange", "removeStartupChange"];
108517: 
115560: function test_functions() {
115560:   for (let prop in AddonManager) {
115560:     if (typeof AddonManager[prop] != "function")
115560:       continue;
115560:     if (IGNORE.indexOf(prop) != -1)
108517:       continue;
108517: 
108517:     try {
115560:       do_print("AddonManager." + prop);
115560:       AddonManager[prop]();
108517:       do_throw(prop + " did not throw an exception");
108517:     }
108517:     catch (e) {
108517:       if (e.result != Components.results.NS_ERROR_NOT_INITIALIZED)
108517:         do_throw(prop + " threw an unexpected exception: " + e);
108517:     }
115560:   }
115560: 
115560:   for (let prop in AddonManagerPrivate) {
115560:     if (typeof AddonManagerPrivate[prop] != "function")
115560:       continue;
115560:     if (IGNORE_PRIVATE.indexOf(prop) != -1)
115560:       continue;
115560: 
108517:     try {
115560:       do_print("AddonManagerPrivate." + prop);
115560:       AddonManagerPrivate[prop]();
108517:       do_throw(prop + " did not throw an exception");
108517:     }
108517:     catch (e) {
108517:       if (e.result != Components.results.NS_ERROR_NOT_INITIALIZED)
108517:         do_throw(prop + " threw an unexpected exception: " + e);
108517:     }
108517:   }
108517: }
108517: 
108517: function run_test() {
108517:   createAppInfo("xpcshell@tests.mozilla.org", "XPCShell", "1", "1.9.2");
115560:   test_functions();
108517:   startupManager();
108517:   shutdownManager();
115560:   test_functions();
108517: }
