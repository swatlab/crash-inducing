 82129: /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 82129:  * vim: set ts=8 sw=4 et tw=99:
 82129:  *
 98983:  * This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 82129: 
 98180: #ifndef TreeContext_inl_h__
 98180: #define TreeContext_inl_h__
 82129: 
 98180: #include "frontend/Parser.h"
 98180: #include "frontend/TreeContext.h"
 82129: 
 98445: #include "frontend/ParseMaps-inl.h"
 98445: 
 82129: namespace js {
 82129: 
 82129: inline
 98476: SharedContext::SharedContext(JSContext *cx, bool inFunction)
 98445:   : context(cx),
 98445:     bodyid(0),
 98445:     blockidGen(0),
 98445:     topStmt(NULL),
 98445:     topScopeStmt(NULL),
 98445:     blockChain(cx),
 98445:     fun_(cx),
 98445:     scopeChain_(cx),
 98445:     staticLevel(0),
 98445:     funbox(NULL),
 98445:     functionList(NULL),
 98445:     bindings(cx),
 98476:     bindingsRoot(cx, &bindings),
 98477:     inFunction(inFunction),
 98687:     inForInit(false),
 98687:     cxFlags(cx)
 98445: {
 98445: }
 98445: 
 98445: inline unsigned
 98445: SharedContext::blockid()
 98445: {
 98445:     return topStmt ? topStmt->blockid : bodyid;
 98445: }
 98445: 
 98445: inline bool
 98445: SharedContext::atBodyLevel()
 98445: {
 98445:     return !topStmt || (topStmt->flags & SIF_BODY_BLOCK);
 98445: }
 98445: 
 98445: inline bool
 98445: SharedContext::needStrictChecks() {
 98445:     return context->hasStrictOption() || inStrictMode();
 98445: }
 98445: 
 98445: inline unsigned
100006: SharedContext::argumentsLocalSlot() const {
 98445:     PropertyName *arguments = context->runtime->atomState.argumentsAtom;
 98445:     unsigned slot;
 98445:     DebugOnly<BindingKind> kind = bindings.lookup(context, arguments, &slot);
 98445:     JS_ASSERT(kind == VARIABLE || kind == CONSTANT);
 98445:     return slot;
 98445: }
 98445: 
 98445: inline
 98445: TreeContext::TreeContext(Parser *prs, SharedContext *sc)
 98445:   : sc(sc),
 98445:     parenDepth(0),
 98445:     yieldCount(0),
 98445:     blockNode(NULL),
 98445:     decls(prs->context),
 98445:     yieldNode(NULL),
 98445:     parserTC(&prs->tc),
 98445:     lexdeps(prs->context),
 98445:     parent(prs->tc),
 98445:     innermostWith(NULL),
 98451:     funcStmts(NULL),
 98451:     hasReturnExpr(false),
 98453:     hasReturnVoid(false),
 98453:     inDeclDestructuring(false)
 82129: {
 82129:     prs->tc = this;
 82129: }
 82129: 
 98445: inline bool
 99147: TreeContext::init()
 98180: {
 98445:     return decls.init() && lexdeps.ensureMap(sc->context);
 98180: }
 98180: 
 98180: // For functions the tree context is constructed and destructed a second
 98180: // time during code generation. To avoid a redundant stats update in such
 98180: // cases, we store UINT16_MAX in maxScopeDepth.
 82129: inline
 82129: TreeContext::~TreeContext()
 82129: {
 98181:     // |*parserTC| pointed to this object.  Now that this object is about to
 98181:     // die, make |*parserTC| point to this object's parent.
 98181:     JS_ASSERT(*parserTC == this);
 98181:     *parserTC = this->parent;
 98445:     sc->context->delete_(funcStmts);
 82129: }
 82129: 
 98180: } // namespace js
 82129: 
 98180: #endif // TreeContext_inl_h__
