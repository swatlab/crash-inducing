43750: diff --git a/gfx/ycbcr/yuv_row_linux.cpp b/gfx/ycbcr/yuv_row_linux.cpp
43750: --- a/gfx/ycbcr/yuv_row_linux.cpp
43750: +++ b/gfx/ycbcr/yuv_row_linux.cpp
43750: @@ -250,18 +250,18 @@ MMX_ALIGNED(int16 kCoefficientsRgbY[768]
43750:  
43750:  // AMD64 ABI uses register paremters.
43750:  void FastConvertYUVToRGB32Row(const uint8* y_buf,  // rdi
43750:                                const uint8* u_buf,  // rsi
43750:                                const uint8* v_buf,  // rdx
43750:                                uint8* rgb_buf,      // rcx
43750:                                int width) {         // r8
43750:    asm(
43750: -  "jmp    convertend\n"
43750: -"convertloop:"
44164: +  "jmp    1f\n"
44164: +"0:"
43750:    "movzb  (%1),%%r10\n"
43750:    "add    $0x1,%1\n"
43750:    "movzb  (%2),%%r11\n"
43750:    "add    $0x1,%2\n"
43750:    "movq   2048(%5,%%r10,8),%%xmm0\n"
43750:    "movzb  (%0),%%r10\n"
43750:    "movq   4096(%5,%%r11,8),%%xmm1\n"
43750:    "movzb  0x1(%0),%%r11\n"
43750: @@ -271,36 +271,36 @@ void FastConvertYUVToRGB32Row(const uint
43750:    "movq   (%5,%%r11,8),%%xmm3\n"
43750:    "paddsw %%xmm0,%%xmm2\n"
43750:    "paddsw %%xmm0,%%xmm3\n"
43750:    "shufps $0x44,%%xmm3,%%xmm2\n"
43750:    "psraw  $0x6,%%xmm2\n"
43750:    "packuswb %%xmm2,%%xmm2\n"
43750:    "movq   %%xmm2,0x0(%3)\n"
43750:    "add    $0x8,%3\n"
43750: -"convertend:"
44164: +"1:"
43750:    "sub    $0x2,%4\n"
43750: -  "jns    convertloop\n"
44164: +  "jns    0b\n"
43750:  
43750: -"convertnext:"
44164: +"2:"
43750:    "add    $0x1,%4\n"
43750: -  "js     convertdone\n"
44164: +  "js     3f\n"
43750:  
43750:    "movzb  (%1),%%r10\n"
43750:    "movq   2048(%5,%%r10,8),%%xmm0\n"
43750:    "movzb  (%2),%%r10\n"
43750:    "movq   4096(%5,%%r10,8),%%xmm1\n"
43750:    "paddsw %%xmm1,%%xmm0\n"
43750:    "movzb  (%0),%%r10\n"
43750:    "movq   (%5,%%r10,8),%%xmm1\n"
43750:    "paddsw %%xmm0,%%xmm1\n"
43750:    "psraw  $0x6,%%xmm1\n"
43750:    "packuswb %%xmm1,%%xmm1\n"
43750:    "movd   %%xmm1,0x0(%3)\n"
43750: -"convertdone:"
44164: +"3:"
43750:    :
43750:    : "r"(y_buf),  // %0
43750:      "r"(u_buf),  // %1
43750:      "r"(v_buf),  // %2
43750:      "r"(rgb_buf),  // %3
43750:      "r"(width),  // %4
43750:      "r" (kCoefficientsRgbY)  // %5
43750:    : "memory", "r10", "r11", "xmm0", "xmm1", "xmm2", "xmm3"
44164: @@ -309,28 +309,35 @@ void FastConvertYUVToRGB32Row(const uint
44164:  
44164:  #else
44164:  
44164:  void FastConvertYUVToRGB32Row(const uint8* y_buf,
44164:                                const uint8* u_buf,
44164:                                const uint8* v_buf,
44164:                                uint8* rgb_buf,
44164:                                int width);
44164: +
44164: +// It's necessary to specify the correct section for the following code,
44164: +// otherwise it will be placed in whatever the current section is as this unit
44164: +// is compiled.  Because GCC remembers the last section it emitted, we must
44164: +// also revert to the previous section state at the end of the asm block.
44164:    asm(
44164: +  ".section .text\n"
44164:    ".global FastConvertYUVToRGB32Row\n"
44164: +  ".type FastConvertYUVToRGB32Row, @function\n"
44164:  "FastConvertYUVToRGB32Row:\n"
44164:    "pusha\n"
44164:    "mov    0x24(%esp),%edx\n"
44164:    "mov    0x28(%esp),%edi\n"
44164:    "mov    0x2c(%esp),%esi\n"
44164:    "mov    0x30(%esp),%ebp\n"
44164:    "mov    0x34(%esp),%ecx\n"
44164: -  "jmp    convertend\n"
44164: +  "jmp    1f\n"
44164:  
44164: -"convertloop:"
44164: +"0:"
44164:    "movzbl (%edi),%eax\n"
44164:    "add    $0x1,%edi\n"
44164:    "movzbl (%esi),%ebx\n"
44164:    "add    $0x1,%esi\n"
44164:    "movq   kCoefficientsRgbY+2048(,%eax,8),%mm0\n"
44164:    "movzbl (%edx),%eax\n"
44164:    "paddsw kCoefficientsRgbY+4096(,%ebx,8),%mm0\n"
44164:    "movzbl 0x1(%edx),%ebx\n"
44164: @@ -339,34 +346,35 @@ void FastConvertYUVToRGB32Row(const uint
44164:    "movq   kCoefficientsRgbY(,%ebx,8),%mm2\n"
44164:    "paddsw %mm0,%mm1\n"
44164:    "paddsw %mm0,%mm2\n"
44164:    "psraw  $0x6,%mm1\n"
44164:    "psraw  $0x6,%mm2\n"
44164:    "packuswb %mm2,%mm1\n"
44164:    "movntq %mm1,0x0(%ebp)\n"
44164:    "add    $0x8,%ebp\n"
44164: -"convertend:"
44164: +"1:"
44164:    "sub    $0x2,%ecx\n"
44164: -  "jns    convertloop\n"
44164: +  "jns    0b\n"
44164:  
44164:    "and    $0x1,%ecx\n"
44164: -  "je     convertdone\n"
44164: +  "je     2f\n"
44164:  
44164:    "movzbl (%edi),%eax\n"
44164:    "movq   kCoefficientsRgbY+2048(,%eax,8),%mm0\n"
44164:    "movzbl (%esi),%eax\n"
44164:    "paddsw kCoefficientsRgbY+4096(,%eax,8),%mm0\n"
44164:    "movzbl (%edx),%eax\n"
44164:    "movq   kCoefficientsRgbY(,%eax,8),%mm1\n"
44164:    "paddsw %mm0,%mm1\n"
44164:    "psraw  $0x6,%mm1\n"
44164:    "packuswb %mm1,%mm1\n"
44164:    "movd   %mm1,0x0(%ebp)\n"
44164: -"convertdone:"
44164: +"2:"
44164:    "popa\n"
44164:    "ret\n"
44164: +  ".previous\n"
44164:  );
44164:  
44164:  #endif
44164:  #endif // ARCH_CPU_ARM_FAMILY
44164:  }  // extern "C"
44164:  
