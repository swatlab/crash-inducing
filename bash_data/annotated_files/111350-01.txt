 97597: // |reftest| skip-if(!xulRuntime.shell)
 97574: /*
 97574:  * Any copyright is dedicated to the Public Domain.
 97574:  * http://creativecommons.org/licenses/publicdomain/
 97574:  * Contributor: Tobias Schneider <schneider@jancona.com>
 97574:  */
 97574: 
 97574: //------------------------------------------------------------------------------
 97574: var BUGNUMBER = 575688;
 97574: var summary = 'DataView tests';
 97574: 
 97574: function test() {
 97574:     function die(message, uplevel) {
 97574:         var e = new Error(message);
 97574:         var frame = e.stack.split("\n")[uplevel];
 97574:         print(message + " at " + frame.split("@")[1]);
 97574:         print("Stack:\n" + e.stack);
 97574:         throw(e);
 97574:     }
 97574: 
 97574:     function checkThrow(fun, type) {
 97574:         var thrown = false;
 97574:         try {
 97574:             fun();
 97574:         } catch (x) {
 97574:             thrown = x;
 97574:         }
 97574: 
 97574:         if (!thrown) {
 97574:             die('no exception thrown, expected ' + type.name, 2);
 97574:         } else if (!(thrown instanceof type)) {
 97574:             die('expected ' + type.name + ', got ' + thrown, 2);
 97574:         }
 97574:     }
 97574: 
 98329:     function checkThrowTODO(fun, type) {
 98329:         var thrown = false;
 98329:         try {
 98329:             fun();
 98329:         } catch (x) {
 98329:             thrown = x;
 98329:         }
 98329: 
 98329:         if (!thrown) {
 98329:             print('(TODO) no exception thrown, expected ' + type.name);
 98329:         } else if (!(thrown instanceof type)) {
 98329:             print('(TODO) expected ' + type.name + ', got ' + thrown);
 98329:         } else {
 98329:             print('test unexpectedly passed: expected ' + type.name + ' exception');
 98329:         }
 98329:     }
 98329: 
 97574:     enterFunc ('test');
 97574:     printBugNumber(BUGNUMBER);
 97574:     printStatus(summary);
 97574: 
 97574:     // testConstructor
 97574:     buffer = (new Uint8Array([1, 2])).buffer;
 97574:     checkThrow(function () new DataView(buffer, 0, 3), RangeError);
 97574:     checkThrow(function () new DataView(buffer, 1, 2), RangeError);
 97574:     checkThrow(function () new DataView(buffer, 2, 1), RangeError);
 97574:     checkThrow(function () new DataView(buffer, 2147483649, 0), RangeError);
 97574:     checkThrow(function () new DataView(buffer, 0, 2147483649), RangeError);
 97574:     checkThrow(function() new DataView(), TypeError);
 97574:     checkThrow(function() new DataView(Object.create(new ArrayBuffer(5))), TypeError);
 97574: 
 97574:     // testGetMethods
 97574: 
 97574:     // testIntegerGets(start=0, length=16)
 97574:     var data1 = [0,1,2,3,0x64,0x65,0x66,0x67,0x80,0x81,0x82,0x83,252,253,254,255];
 97574:     var data1_r = data1.slice().reverse();
 97574:     var buffer1 = new Uint8Array(data1).buffer;
 97574:     var view1 = new DataView(buffer1, 0, 16);
 97574:     view = view1;
 97574:     assertEq(view.getInt8(0), 0);
 97574:     assertEq(view.getInt8(8), -128);
 97574:     assertEq(view.getInt8(15), -1);
 97574:     assertEq(view.getUint8(0), 0);
 97574:     assertEq(view.getUint8(8), 128);
 97574:     assertEq(view.getUint8(15), 255);
 97574:     //   Little endian.
 97574:     assertEq(view.getInt16(0, true), 256);
 97574:     assertEq(view.getInt16(5, true), 0x6665);
 97574:     assertEq(view.getInt16(9, true), -32127);
 97574:     assertEq(view.getInt16(14, true), -2);
 97574:     // Big endian.
 97574:     assertEq(view.getInt16(0), 1);
 97574:     assertEq(view.getInt16(5), 0x6566);
 97574:     assertEq(view.getInt16(9), -32382);
 97574:     assertEq(view.getInt16(14), -257);
 97574:     // Little endian.
 97574:     assertEq(view.getUint16(0, true), 256);
 97574:     assertEq(view.getUint16(5, true), 0x6665);
 97574:     assertEq(view.getUint16(9, true), 0x8281);
 97574:     assertEq(view.getUint16(14, true), 0xfffe);
 97574:     // Big endian.
 97574:     assertEq(view.getUint16(0), 1);
 97574:     assertEq(view.getUint16(5), 0x6566);
 97574:     assertEq(view.getUint16(9), 0x8182);
 97574:     assertEq(view.getUint16(14), 0xfeff);
 97574:     // Little endian.
 97574:     assertEq(view.getInt32(0, true), 0x3020100);
 97574:     assertEq(view.getInt32(3, true), 0x66656403);
 97574:     assertEq(view.getInt32(6, true), -2122291354);
 97574:     assertEq(view.getInt32(9, true), -58490239);
 97574:     assertEq(view.getInt32(12, true), -66052);
 97574:     // Big endian.
 97574:     assertEq(view.getInt32(0), 0x10203);
 97574:     assertEq(view.getInt32(3), 0x3646566);
 97574:     assertEq(view.getInt32(6), 0x66678081);
 97574:     assertEq(view.getInt32(9), -2122152964);
 97574:     assertEq(view.getInt32(12), -50462977);
 97574:     // Little endian.
 97574:     assertEq(view.getUint32(0, true), 0x3020100);
 97574:     assertEq(view.getUint32(3, true), 0x66656403);
 97574:     assertEq(view.getUint32(6, true), 0x81806766);
 97574:     assertEq(view.getUint32(9, true), 0xfc838281);
 97574:     assertEq(view.getUint32(12, true), 0xfffefdfc);
 97574:     // Big endian.
 97574:     assertEq(view.getUint32(0), 0x10203);
 97574:     assertEq(view.getUint32(3), 0x3646566);
 97574:     assertEq(view.getUint32(6), 0x66678081);
 97574:     assertEq(view.getUint32(9), 0x818283fc);
 97574:     assertEq(view.getUint32(12), 0xfcfdfeff);
 97574: 
 97574:     // testFloatGets(start=0)
 97574: 
 97574:     // testFloatGet expected=10
 97574:     //   Little endian
 97574:     var data2 = [0,0,32,65];
 97574:     var data2_r = data2.slice().reverse();
 97574:     var buffer2 = new Uint8Array(data2).buffer;
 97574:     view = new DataView(buffer2, 0, 4);
 97574:     assertEq(view.getFloat32(0, true), 10);
 97574:     var buffer2_pad3 = new Uint8Array(Array(3).concat(data2)).buffer;
 97574:     view = new DataView(buffer2_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, true), 10);
 97574:     var buffer2_pad7 = new Uint8Array(Array(7).concat(data2)).buffer;
 97574:     view = new DataView(buffer2_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, true), 10);
 97574:     var buffer2_pad10 = new Uint8Array(Array(10).concat(data2)).buffer;
 97574:     view = new DataView(buffer2_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, true), 10);
 97574:     //   Big endian.
 97574:     var buffer2_r = new Uint8Array(data2_r).buffer;
 97574:     view = new DataView(buffer2_r, 0, 4);
 97574:     assertEq(view.getFloat32(0, false), 10);
 97574:     var buffer2_r_pad3 = new Uint8Array(Array(3).concat(data2_r)).buffer;
 97574:     view = new DataView(buffer2_r_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, false), 10);
 97574:     var buffer2_r_pad7 = new Uint8Array(Array(7).concat(data2_r)).buffer;
 97574:     view = new DataView(buffer2_r_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, false), 10);
 97574:     var buffer2_r_pad10 = new Uint8Array(Array(10).concat(data2_r)).buffer;
 97574:     view = new DataView(buffer2_r_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, false), 10);
 97574: 
 97574:     // testFloatGet expected=1.2300000190734863
 97574:     //   Little endian
 97574:     var data3 = [164,112,157,63];
 97574:     var data3_r = data3.slice().reverse();
 97574:     var buffer3 = new Uint8Array(data3).buffer;
 97574:     view = new DataView(buffer3, 0, 4);
 97574:     assertEq(view.getFloat32(0, true), 1.2300000190734863);
 97574:     var buffer3_pad3 = new Uint8Array(Array(3).concat(data3)).buffer;
 97574:     view = new DataView(buffer3_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, true), 1.2300000190734863);
 97574:     var buffer3_pad7 = new Uint8Array(Array(7).concat(data3)).buffer;
 97574:     view = new DataView(buffer3_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, true), 1.2300000190734863);
 97574:     var buffer3_pad10 = new Uint8Array(Array(10).concat(data3)).buffer;
 97574:     view = new DataView(buffer3_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, true), 1.2300000190734863);
 97574:     //   Big endian.
 97574:     var buffer3_r = new Uint8Array(data3_r).buffer;
 97574:     view = new DataView(buffer3_r, 0, 4);
 97574:     assertEq(view.getFloat32(0, false), 1.2300000190734863);
 97574:     var buffer3_r_pad3 = new Uint8Array(Array(3).concat(data3_r)).buffer;
 97574:     view = new DataView(buffer3_r_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, false), 1.2300000190734863);
 97574:     var buffer3_r_pad7 = new Uint8Array(Array(7).concat(data3_r)).buffer;
 97574:     view = new DataView(buffer3_r_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, false), 1.2300000190734863);
 97574:     var buffer3_r_pad10 = new Uint8Array(Array(10).concat(data3_r)).buffer;
 97574:     view = new DataView(buffer3_r_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, false), 1.2300000190734863);
 97574: 
 97574:     // testFloatGet expected=-45621.37109375
 97574:     //   Little endian
 97574:     var data4 = [95,53,50,199];
 97574:     var data4_r = data4.slice().reverse();
 97574:     var buffer4 = new Uint8Array(data4).buffer;
 97574:     view = new DataView(buffer4, 0, 4);
 97574:     assertEq(view.getFloat32(0, true), -45621.37109375);
 97574:     var buffer4_pad3 = new Uint8Array(Array(3).concat(data4)).buffer;
 97574:     view = new DataView(buffer4_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, true), -45621.37109375);
 97574:     var buffer4_pad7 = new Uint8Array(Array(7).concat(data4)).buffer;
 97574:     view = new DataView(buffer4_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, true), -45621.37109375);
 97574:     var buffer4_pad10 = new Uint8Array(Array(10).concat(data4)).buffer;
 97574:     view = new DataView(buffer4_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, true), -45621.37109375);
 97574:     //   Big endian.
 97574:     var buffer4_r = new Uint8Array(data4_r).buffer;
 97574:     view = new DataView(buffer4_r, 0, 4);
 97574:     assertEq(view.getFloat32(0, false), -45621.37109375);
 97574:     var buffer4_r_pad3 = new Uint8Array(Array(3).concat(data4_r)).buffer;
 97574:     view = new DataView(buffer4_r_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, false), -45621.37109375);
 97574:     var buffer4_r_pad7 = new Uint8Array(Array(7).concat(data4_r)).buffer;
 97574:     view = new DataView(buffer4_r_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, false), -45621.37109375);
 97574:     var buffer4_r_pad10 = new Uint8Array(Array(10).concat(data4_r)).buffer;
 97574:     view = new DataView(buffer4_r_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, false), -45621.37109375);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     var data5 = [255,255,255,127];
 97574:     var data5_r = data5.slice().reverse();
 97574:     var buffer5 = new Uint8Array(data5).buffer;
 97574:     view = new DataView(buffer5, 0, 4);
 97574:     assertEq(view.getFloat32(0, true), NaN);
 97574:     var buffer5_pad3 = new Uint8Array(Array(3).concat(data5)).buffer;
 97574:     view = new DataView(buffer5_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, true), NaN);
 97574:     var buffer5_pad7 = new Uint8Array(Array(7).concat(data5)).buffer;
 97574:     view = new DataView(buffer5_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, true), NaN);
 97574:     var buffer5_pad10 = new Uint8Array(Array(10).concat(data5)).buffer;
 97574:     view = new DataView(buffer5_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, true), NaN);
 97574:     //   Big endian.
 97574:     var buffer5_r = new Uint8Array(data5_r).buffer;
 97574:     view = new DataView(buffer5_r, 0, 4);
 97574:     assertEq(view.getFloat32(0, false), NaN);
 97574:     var buffer5_r_pad3 = new Uint8Array(Array(3).concat(data5_r)).buffer;
 97574:     view = new DataView(buffer5_r_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, false), NaN);
 97574:     var buffer5_r_pad7 = new Uint8Array(Array(7).concat(data5_r)).buffer;
 97574:     view = new DataView(buffer5_r_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, false), NaN);
 97574:     var buffer5_r_pad10 = new Uint8Array(Array(10).concat(data5_r)).buffer;
 97574:     view = new DataView(buffer5_r_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, false), NaN);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     var data6 = [255,255,255,255];
 97574:     var data6_r = data6.slice().reverse();
 97574:     var buffer6 = new Uint8Array(data6).buffer;
 97574:     view = new DataView(buffer6, 0, 4);
 97574:     assertEq(view.getFloat32(0, true), NaN);
 97574:     var buffer6_pad3 = new Uint8Array(Array(3).concat(data6)).buffer;
 97574:     view = new DataView(buffer6_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, true), NaN);
 97574:     var buffer6_pad7 = new Uint8Array(Array(7).concat(data6)).buffer;
 97574:     view = new DataView(buffer6_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, true), NaN);
 97574:     var buffer6_pad10 = new Uint8Array(Array(10).concat(data6)).buffer;
 97574:     view = new DataView(buffer6_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, true), NaN);
 97574:     //   Big endian.
 97574:     var buffer6_r = new Uint8Array(data6_r).buffer;
 97574:     view = new DataView(buffer6_r, 0, 4);
 97574:     assertEq(view.getFloat32(0, false), NaN);
 97574:     var buffer6_r_pad3 = new Uint8Array(Array(3).concat(data6_r)).buffer;
 97574:     view = new DataView(buffer6_r_pad3, 0, 7);
 97574:     assertEq(view.getFloat32(3, false), NaN);
 97574:     var buffer6_r_pad7 = new Uint8Array(Array(7).concat(data6_r)).buffer;
 97574:     view = new DataView(buffer6_r_pad7, 0, 11);
 97574:     assertEq(view.getFloat32(7, false), NaN);
 97574:     var buffer6_r_pad10 = new Uint8Array(Array(10).concat(data6_r)).buffer;
 97574:     view = new DataView(buffer6_r_pad10, 0, 14);
 97574:     assertEq(view.getFloat32(10, false), NaN);
 97574: 
 97574:     // testFloatGet expected=10
 97574:     //   Little endian
 97574:     var data7 = [0,0,0,0,0,0,36,64];
 97574:     var data7_r = data7.slice().reverse();
 97574:     var buffer7 = new Uint8Array(data7).buffer;
 97574:     view = new DataView(buffer7, 0, 8);
 97574:     assertEq(view.getFloat64(0, true), 10);
 97574:     var buffer7_pad3 = new Uint8Array(Array(3).concat(data7)).buffer;
 97574:     view = new DataView(buffer7_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, true), 10);
 97574:     var buffer7_pad7 = new Uint8Array(Array(7).concat(data7)).buffer;
 97574:     view = new DataView(buffer7_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, true), 10);
 97574:     var buffer7_pad10 = new Uint8Array(Array(10).concat(data7)).buffer;
 97574:     view = new DataView(buffer7_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, true), 10);
 97574:     //   Big endian.
 97574:     var buffer7_r = new Uint8Array(data7_r).buffer;
 97574:     view = new DataView(buffer7_r, 0, 8);
 97574:     assertEq(view.getFloat64(0, false), 10);
 97574:     var buffer7_r_pad3 = new Uint8Array(Array(3).concat(data7_r)).buffer;
 97574:     view = new DataView(buffer7_r_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, false), 10);
 97574:     var buffer7_r_pad7 = new Uint8Array(Array(7).concat(data7_r)).buffer;
 97574:     view = new DataView(buffer7_r_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, false), 10);
 97574:     var buffer7_r_pad10 = new Uint8Array(Array(10).concat(data7_r)).buffer;
 97574:     view = new DataView(buffer7_r_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, false), 10);
 97574: 
 97574:     // testFloatGet expected=1.23
 97574:     //   Little endian
 97574:     var data8 = [174,71,225,122,20,174,243,63];
 97574:     var data8_r = data8.slice().reverse();
 97574:     var buffer8 = new Uint8Array(data8).buffer;
 97574:     view = new DataView(buffer8, 0, 8);
 97574:     assertEq(view.getFloat64(0, true), 1.23);
 97574:     var buffer8_pad3 = new Uint8Array(Array(3).concat(data8)).buffer;
 97574:     view = new DataView(buffer8_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, true), 1.23);
 97574:     var buffer8_pad7 = new Uint8Array(Array(7).concat(data8)).buffer;
 97574:     view = new DataView(buffer8_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, true), 1.23);
 97574:     var buffer8_pad10 = new Uint8Array(Array(10).concat(data8)).buffer;
 97574:     view = new DataView(buffer8_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, true), 1.23);
 97574:     //   Big endian.
 97574:     var buffer8_r = new Uint8Array(data8_r).buffer;
 97574:     view = new DataView(buffer8_r, 0, 8);
 97574:     assertEq(view.getFloat64(0, false), 1.23);
 97574:     var buffer8_r_pad3 = new Uint8Array(Array(3).concat(data8_r)).buffer;
 97574:     view = new DataView(buffer8_r_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, false), 1.23);
 97574:     var buffer8_r_pad7 = new Uint8Array(Array(7).concat(data8_r)).buffer;
 97574:     view = new DataView(buffer8_r_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, false), 1.23);
 97574:     var buffer8_r_pad10 = new Uint8Array(Array(10).concat(data8_r)).buffer;
 97574:     view = new DataView(buffer8_r_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, false), 1.23);
 97574: 
 97574:     // testFloatGet expected=-6213576.4839
 97574:     //   Little endian
 97574:     var data9 = [181,55,248,30,242,179,87,193];
 97574:     var data9_r = data9.slice().reverse();
 97574:     var buffer9 = new Uint8Array(data9).buffer;
 97574:     view = new DataView(buffer9, 0, 8);
 97574:     assertEq(view.getFloat64(0, true), -6213576.4839);
 97574:     var buffer9_pad3 = new Uint8Array(Array(3).concat(data9)).buffer;
 97574:     view = new DataView(buffer9_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, true), -6213576.4839);
 97574:     var buffer9_pad7 = new Uint8Array(Array(7).concat(data9)).buffer;
 97574:     view = new DataView(buffer9_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, true), -6213576.4839);
 97574:     var buffer9_pad10 = new Uint8Array(Array(10).concat(data9)).buffer;
 97574:     view = new DataView(buffer9_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, true), -6213576.4839);
 97574:     //   Big endian.
 97574:     var buffer9_r = new Uint8Array(data9_r).buffer;
 97574:     view = new DataView(buffer9_r, 0, 8);
 97574:     assertEq(view.getFloat64(0, false), -6213576.4839);
 97574:     var buffer9_r_pad3 = new Uint8Array(Array(3).concat(data9_r)).buffer;
 97574:     view = new DataView(buffer9_r_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, false), -6213576.4839);
 97574:     var buffer9_r_pad7 = new Uint8Array(Array(7).concat(data9_r)).buffer;
 97574:     view = new DataView(buffer9_r_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, false), -6213576.4839);
 97574:     var buffer9_r_pad10 = new Uint8Array(Array(10).concat(data9_r)).buffer;
 97574:     view = new DataView(buffer9_r_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, false), -6213576.4839);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     var data10 = [255,255,255,255,255,255,255,127];
 97574:     var data10_r = data10.slice().reverse();
 97574:     var buffer10 = new Uint8Array(data10).buffer;
 97574:     view = new DataView(buffer10, 0, 8);
 97574:     assertEq(view.getFloat64(0, true), NaN);
 97574:     var buffer10_pad3 = new Uint8Array(Array(3).concat(data10)).buffer;
 97574:     view = new DataView(buffer10_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, true), NaN);
 97574:     var buffer10_pad7 = new Uint8Array(Array(7).concat(data10)).buffer;
 97574:     view = new DataView(buffer10_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, true), NaN);
 97574:     var buffer10_pad10 = new Uint8Array(Array(10).concat(data10)).buffer;
 97574:     view = new DataView(buffer10_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, true), NaN);
 97574:     //   Big endian.
 97574:     var buffer10_r = new Uint8Array(data10_r).buffer;
 97574:     view = new DataView(buffer10_r, 0, 8);
 97574:     assertEq(view.getFloat64(0, false), NaN);
 97574:     var buffer10_r_pad3 = new Uint8Array(Array(3).concat(data10_r)).buffer;
 97574:     view = new DataView(buffer10_r_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, false), NaN);
 97574:     var buffer10_r_pad7 = new Uint8Array(Array(7).concat(data10_r)).buffer;
 97574:     view = new DataView(buffer10_r_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, false), NaN);
 97574:     var buffer10_r_pad10 = new Uint8Array(Array(10).concat(data10_r)).buffer;
 97574:     view = new DataView(buffer10_r_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, false), NaN);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     var data11 = [255,255,255,255,255,255,255,255];
 97574:     var data11_r = data11.slice().reverse();
 97574:     var buffer11 = new Uint8Array(data11).buffer;
 97574:     view = new DataView(buffer11, 0, 8);
 97574:     assertEq(view.getFloat64(0, true), NaN);
 97574:     var buffer11_pad3 = new Uint8Array(Array(3).concat(data11)).buffer;
 97574:     view = new DataView(buffer11_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, true), NaN);
 97574:     var buffer11_pad7 = new Uint8Array(Array(7).concat(data11)).buffer;
 97574:     view = new DataView(buffer11_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, true), NaN);
 97574:     var buffer11_pad10 = new Uint8Array(Array(10).concat(data11)).buffer;
 97574:     view = new DataView(buffer11_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, true), NaN);
 97574:     //   Big endian.
 97574:     var buffer11_r = new Uint8Array(data11_r).buffer;
 97574:     view = new DataView(buffer11_r, 0, 8);
 97574:     assertEq(view.getFloat64(0, false), NaN);
 97574:     var buffer11_r_pad3 = new Uint8Array(Array(3).concat(data11_r)).buffer;
 97574:     view = new DataView(buffer11_r_pad3, 0, 11);
 97574:     assertEq(view.getFloat64(3, false), NaN);
 97574:     var buffer11_r_pad7 = new Uint8Array(Array(7).concat(data11_r)).buffer;
 97574:     view = new DataView(buffer11_r_pad7, 0, 15);
 97574:     assertEq(view.getFloat64(7, false), NaN);
 97574:     var buffer11_r_pad10 = new Uint8Array(Array(10).concat(data11_r)).buffer;
 97574:     view = new DataView(buffer11_r_pad10, 0, 18);
 97574:     assertEq(view.getFloat64(10, false), NaN);
 97574: 
 97574:     // testIntegerGets(start=3, length=2)
 97574:     var data12 = [31,32,33,0,1,2,3,100,101,102,103,128,129,130,131,252,253,254,255];
 97574:     var data12_r = data12.slice().reverse();
 97574:     var buffer12 = new Uint8Array(data12).buffer;
 97574:     view = new DataView(buffer12, 3, 2);
 97574:     assertEq(view.getInt8(0), 0);
 97574:     checkThrow(function () view.getInt8(8), RangeError);
 97574:     checkThrow(function () view.getInt8(15), RangeError);
 97574:     assertEq(view.getUint8(0), 0);
 97574:     checkThrow(function () view.getUint8(8), RangeError);
 97574:     checkThrow(function () view.getUint8(15), RangeError);
 97574:     //   Little endian.
 97574:     assertEq(view.getInt16(0, true), 256);
 97574:     checkThrow(function () view.getInt16(5, true), RangeError);
 97574:     checkThrow(function () view.getInt16(9, true), RangeError);
 97574:     checkThrow(function () view.getInt16(14, true), RangeError);
 97574:     // Big endian.
 97574:     assertEq(view.getInt16(0), 1);
 97574:     checkThrow(function () view.getInt16(5), RangeError);
 97574:     checkThrow(function () view.getInt16(9), RangeError);
 97574:     checkThrow(function () view.getInt16(14), RangeError);
 97574:     // Little endian.
 97574:     assertEq(view.getUint16(0, true), 256);
 97574:     checkThrow(function () view.getUint16(5, true), RangeError);
 97574:     checkThrow(function () view.getUint16(9, true), RangeError);
 97574:     checkThrow(function () view.getUint16(14, true), RangeError);
 97574:     // Big endian.
 97574:     assertEq(view.getUint16(0), 1);
 97574:     checkThrow(function () view.getUint16(5), RangeError);
 97574:     checkThrow(function () view.getUint16(9), RangeError);
 97574:     checkThrow(function () view.getUint16(14), RangeError);
 97574:     // Little endian.
 97574:     checkThrow(function () view.getInt32(0, true), RangeError);
 97574:     checkThrow(function () view.getInt32(3, true), RangeError);
 97574:     checkThrow(function () view.getInt32(6, true), RangeError);
 97574:     checkThrow(function () view.getInt32(9, true), RangeError);
 97574:     checkThrow(function () view.getInt32(12, true), RangeError);
 97574:     // Big endian.
 97574:     checkThrow(function () view.getInt32(0), RangeError);
 97574:     checkThrow(function () view.getInt32(3), RangeError);
 97574:     checkThrow(function () view.getInt32(6), RangeError);
 97574:     checkThrow(function () view.getInt32(9), RangeError);
 97574:     checkThrow(function () view.getInt32(12), RangeError);
 97574:     // Little endian.
 97574:     checkThrow(function () view.getUint32(0, true), RangeError);
 97574:     checkThrow(function () view.getUint32(3, true), RangeError);
 97574:     checkThrow(function () view.getUint32(6, true), RangeError);
 97574:     checkThrow(function () view.getUint32(9, true), RangeError);
 97574:     checkThrow(function () view.getUint32(12, true), RangeError);
 97574:     // Big endian.
 97574:     checkThrow(function () view.getUint32(0), RangeError);
 97574:     checkThrow(function () view.getUint32(3), RangeError);
 97574:     checkThrow(function () view.getUint32(6), RangeError);
 97574:     checkThrow(function () view.getUint32(9), RangeError);
 97574:     checkThrow(function () view.getUint32(12), RangeError);
 97574: 
 97574:     // testFloatGets(start=3)
 97574: 
 97574:     // testFloatGet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer2, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, true), RangeError);
 97574:     view = new DataView(buffer2_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, true), RangeError);
 97574:     view = new DataView(buffer2_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, true), RangeError);
 97574:     view = new DataView(buffer2_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer2_r, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, false), RangeError);
 97574:     view = new DataView(buffer2_r_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, false), RangeError);
 97574:     view = new DataView(buffer2_r_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, false), RangeError);
 97574:     view = new DataView(buffer2_r_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=1.2300000190734863
 97574:     //   Little endian
 97574:     view = new DataView(buffer3, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, true), RangeError);
 97574:     view = new DataView(buffer3_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, true), RangeError);
 97574:     view = new DataView(buffer3_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, true), RangeError);
 97574:     view = new DataView(buffer3_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer3_r, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, false), RangeError);
 97574:     view = new DataView(buffer3_r_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, false), RangeError);
 97574:     view = new DataView(buffer3_r_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, false), RangeError);
 97574:     view = new DataView(buffer3_r_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=-45621.37109375
 97574:     //   Little endian
 97574:     view = new DataView(buffer4, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, true), RangeError);
 97574:     view = new DataView(buffer4_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, true), RangeError);
 97574:     view = new DataView(buffer4_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, true), RangeError);
 97574:     view = new DataView(buffer4_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer4_r, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, false), RangeError);
 97574:     view = new DataView(buffer4_r_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, false), RangeError);
 97574:     view = new DataView(buffer4_r_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, false), RangeError);
 97574:     view = new DataView(buffer4_r_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer5, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, true), RangeError);
 97574:     view = new DataView(buffer5_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, true), RangeError);
 97574:     view = new DataView(buffer5_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, true), RangeError);
 97574:     view = new DataView(buffer5_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer5_r, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, false), RangeError);
 97574:     view = new DataView(buffer5_r_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, false), RangeError);
 97574:     view = new DataView(buffer5_r_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, false), RangeError);
 97574:     view = new DataView(buffer5_r_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer6, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, true), RangeError);
 97574:     view = new DataView(buffer6_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, true), RangeError);
 97574:     view = new DataView(buffer6_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, true), RangeError);
 97574:     view = new DataView(buffer6_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer6_r, 3, 1);
 97574:     checkThrow(function () view.getFloat32(0, false), RangeError);
 97574:     view = new DataView(buffer6_r_pad3, 3, 4);
 97574:     checkThrow(function () view.getFloat32(3, false), RangeError);
 97574:     view = new DataView(buffer6_r_pad7, 3, 8);
 97574:     checkThrow(function () view.getFloat32(7, false), RangeError);
 97574:     view = new DataView(buffer6_r_pad10, 3, 11);
 97574:     checkThrow(function () view.getFloat32(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer7, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, true), RangeError);
 97574:     view = new DataView(buffer7_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, true), RangeError);
 97574:     view = new DataView(buffer7_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, true), RangeError);
 97574:     view = new DataView(buffer7_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer7_r, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, false), RangeError);
 97574:     view = new DataView(buffer7_r_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, false), RangeError);
 97574:     view = new DataView(buffer7_r_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, false), RangeError);
 97574:     view = new DataView(buffer7_r_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=1.23
 97574:     //   Little endian
 97574:     view = new DataView(buffer8, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, true), RangeError);
 97574:     view = new DataView(buffer8_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, true), RangeError);
 97574:     view = new DataView(buffer8_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, true), RangeError);
 97574:     view = new DataView(buffer8_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer8_r, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, false), RangeError);
 97574:     view = new DataView(buffer8_r_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, false), RangeError);
 97574:     view = new DataView(buffer8_r_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, false), RangeError);
 97574:     view = new DataView(buffer8_r_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=-6213576.4839
 97574:     //   Little endian
 97574:     view = new DataView(buffer9, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, true), RangeError);
 97574:     view = new DataView(buffer9_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, true), RangeError);
 97574:     view = new DataView(buffer9_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, true), RangeError);
 97574:     view = new DataView(buffer9_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer9_r, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, false), RangeError);
 97574:     view = new DataView(buffer9_r_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, false), RangeError);
 97574:     view = new DataView(buffer9_r_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, false), RangeError);
 97574:     view = new DataView(buffer9_r_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer10, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, true), RangeError);
 97574:     view = new DataView(buffer10_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, true), RangeError);
 97574:     view = new DataView(buffer10_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, true), RangeError);
 97574:     view = new DataView(buffer10_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer10_r, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, false), RangeError);
 97574:     view = new DataView(buffer10_r_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, false), RangeError);
 97574:     view = new DataView(buffer10_r_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, false), RangeError);
 97574:     view = new DataView(buffer10_r_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, false), RangeError);
 97574: 
 97574:     // testFloatGet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer11, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, true), RangeError);
 97574:     view = new DataView(buffer11_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, true), RangeError);
 97574:     view = new DataView(buffer11_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, true), RangeError);
 97574:     view = new DataView(buffer11_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, true), RangeError);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer11_r, 3, 5);
 97574:     checkThrow(function () view.getFloat64(0, false), RangeError);
 97574:     view = new DataView(buffer11_r_pad3, 3, 8);
 97574:     checkThrow(function () view.getFloat64(3, false), RangeError);
 97574:     view = new DataView(buffer11_r_pad7, 3, 12);
 97574:     checkThrow(function () view.getFloat64(7, false), RangeError);
 97574:     view = new DataView(buffer11_r_pad10, 3, 15);
 97574:     checkThrow(function () view.getFloat64(10, false), RangeError);
 97574: 
 97574:     // testGetNegativeIndexes
 97574:     view = new DataView(buffer1, 0, 16);
 97574:     checkThrow(function () view.getInt8(-1), RangeError);
 97574:     checkThrow(function () view.getInt8(-2), RangeError);
 97574:     checkThrow(function () view.getUint8(-1), RangeError);
 97574:     checkThrow(function () view.getUint8(-2), RangeError);
 97574:     checkThrow(function () view.getInt16(-1), RangeError);
 97574:     checkThrow(function () view.getInt16(-2), RangeError);
 97574:     checkThrow(function () view.getInt16(-3), RangeError);
 97574:     checkThrow(function () view.getUint16(-1), RangeError);
 97574:     checkThrow(function () view.getUint16(-2), RangeError);
 97574:     checkThrow(function () view.getUint16(-3), RangeError);
 97574:     checkThrow(function () view.getInt32(-1), RangeError);
 97574:     checkThrow(function () view.getInt32(-3), RangeError);
 97574:     checkThrow(function () view.getInt32(-5), RangeError);
 97574:     checkThrow(function () view.getUint32(-1), RangeError);
 97574:     checkThrow(function () view.getUint32(-3), RangeError);
 97574:     checkThrow(function () view.getUint32(-5), RangeError);
 97574:     view = new DataView(buffer7, 0, 8);
 97574:     checkThrow(function () view.getFloat32(-1), RangeError);
 97574:     checkThrow(function () view.getFloat32(-3), RangeError);
 97574:     checkThrow(function () view.getFloat32(-5), RangeError);
 97574:     checkThrow(function () view.getFloat64(-1), RangeError);
 97574:     checkThrow(function () view.getFloat64(-5), RangeError);
 97574:     checkThrow(function () view.getFloat64(-9), RangeError);
 97574: 
 97574:     // Too large for signed 32 bit integer index
 97574:     checkThrow(function () view.getInt8(2147483648), RangeError);
 97574:     checkThrow(function () view.getInt8(2147483649), RangeError);
 97574:     checkThrow(function () view.getUint8(2147483648), RangeError);
 97574:     checkThrow(function () view.getUint8(2147483649), RangeError);
 97574:     checkThrow(function () view.getInt16(2147483648), RangeError);
 97574:     checkThrow(function () view.getInt16(2147483649), RangeError);
 97574:     checkThrow(function () view.getUint16(2147483648), RangeError);
 97574:     checkThrow(function () view.getUint16(2147483649), RangeError);
 97574:     checkThrow(function () view.getInt32(2147483648), RangeError);
 97574:     checkThrow(function () view.getInt32(2147483649), RangeError);
 97574:     checkThrow(function () view.getUint32(2147483648), RangeError);
 97574:     checkThrow(function () view.getUint32(2147483649), RangeError);
 97574:     checkThrow(function () view.getFloat32(2147483648), RangeError);
 97574:     checkThrow(function () view.getFloat32(2147483649), RangeError);
 97574:     checkThrow(function () view.getFloat64(2147483648), RangeError);
 97574:     checkThrow(function () view.getFloat64(2147483649), RangeError);
 97574: 
 97574:     // Test for wrong arguments passed to get methods
 97574:     //
 97574:     // See http://www.w3.org/TR/WebIDL/#es-operations and the step saying "If entry is null, throw a TypeError."
 97574:     checkThrow(function () view.getInt8(), TypeError);
 97574:     checkThrow(function () view.getUint8(), TypeError);
 97574:     checkThrow(function () view.getInt16(), TypeError);
 97574:     checkThrow(function () view.getUint16(), TypeError);
 97574:     checkThrow(function () view.getInt32(), TypeError);
 97574:     checkThrow(function () view.getUint32(), TypeError);
 97574:     checkThrow(function () view.getFloat32(), TypeError);
 97574:     checkThrow(function () view.getFloat64(), TypeError);
 97574: 
 97574:     // Test for wrong type of |this|
 97574:     checkThrow(function () view.getInt8.apply("dead", [0]), TypeError);
 97574:     checkThrow(function () view.getUint8.apply("puppies", [0]), TypeError);
 97574:     checkThrow(function () view.getInt16.apply("aren", [0]), TypeError);
 97574:     checkThrow(function () view.getUint16.apply("t", [0]), TypeError);
 97574:     checkThrow(function () view.getInt32.apply("much", [0]), TypeError);
 97574:     checkThrow(function () view.getUint32.apply("fun", [0]), TypeError);
 97574:     checkThrow(function () view.getFloat32.apply("(in", [0]), TypeError);
 97574:     checkThrow(function () view.getFloat64.apply("bed)", [0]), TypeError);
 97574:     checkThrow(function () view.setInt8.apply("dead", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setUint8.apply("puppies", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setInt16.apply("aren", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setUint16.apply("t", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setInt32.apply("much", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setUint32.apply("fun", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setFloat32.apply("(in", [0, 0]), TypeError);
 97574:     checkThrow(function () view.setFloat64.apply("bed)", [0, 0]), TypeError);
 97574: 
 97574:     // testSetMethods
 97574: 
 97574:     //   Test for set methods that work
 97574: 
 97574:     // testIntegerSets(start=0, length=16)
 97574:     var data13 = [204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204];
 97574:     var data13_r = data13.slice().reverse();
 97574:     var buffer13 = new Uint8Array(data13).buffer;
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setInt8(0, 0);
 97574:     assertEq(view.getInt8(0), 0);
 97574:     view.setInt8(8, -128);
 97574:     assertEq(view.getInt8(8), -128);
 97574:     view.setInt8(15, -1);
 97574:     assertEq(view.getInt8(15), -1);
 97574:     view.setUint8(0, 0);
 97574:     assertEq(view.getUint8(0), 0);
 97574:     view.setUint8(8, 128);
 97574:     assertEq(view.getUint8(8), 128);
 97574:     view.setUint8(15, 255);
 97574:     assertEq(view.getUint8(15), 255);
 97574:     view.setInt16(0, 256, true);
 97574:     assertEq(view.getInt16(0, true), 256);
 97574:     view.setInt16(5, 26213, true);
 97574:     assertEq(view.getInt16(5, true), 26213);
 97574:     view.setInt16(9, -32127, true);
 97574:     assertEq(view.getInt16(9, true), -32127);
 97574:     view.setInt16(14, -2, true);
 97574:     assertEq(view.getInt16(14, true), -2);
 97574:     view.setInt16(0, 1);
 97574:     assertEq(view.getInt16(0), 1);
 97574:     view.setInt16(5, 25958);
 97574:     assertEq(view.getInt16(5), 25958);
 97574:     view.setInt16(9, -32382);
 97574:     assertEq(view.getInt16(9), -32382);
 97574:     view.setInt16(14, -257);
 97574:     assertEq(view.getInt16(14), -257);
 97574:     view.setUint16(0, 256, true);
 97574:     assertEq(view.getUint16(0, true), 256);
 97574:     view.setUint16(5, 26213, true);
 97574:     assertEq(view.getUint16(5, true), 26213);
 97574:     view.setUint16(9, 33409, true);
 97574:     assertEq(view.getUint16(9, true), 33409);
 97574:     view.setUint16(14, 65534, true);
 97574:     assertEq(view.getUint16(14, true), 65534);
 97574:     view.setUint16(0, 1);
 97574:     assertEq(view.getUint16(0), 1);
 97574:     view.setUint16(5, 25958);
 97574:     assertEq(view.getUint16(5), 25958);
 97574:     view.setUint16(9, 33154);
 97574:     assertEq(view.getUint16(9), 33154);
 97574:     view.setUint16(14, 65279);
 97574:     assertEq(view.getUint16(14), 65279);
 97574:     view.setInt32(0, 50462976, true);
 97574:     assertEq(view.getInt32(0, true), 50462976);
 97574:     view.setInt32(3, 1717920771, true);
 97574:     assertEq(view.getInt32(3, true), 1717920771);
 97574:     view.setInt32(6, -2122291354, true);
 97574:     assertEq(view.getInt32(6, true), -2122291354);
 97574:     view.setInt32(9, -58490239, true);
 97574:     assertEq(view.getInt32(9, true), -58490239);
 97574:     view.setInt32(12, -66052, true);
 97574:     assertEq(view.getInt32(12, true), -66052);
 97574:     view.setInt32(0, 66051);
 97574:     assertEq(view.getInt32(0), 66051);
 97574:     view.setInt32(3, 56911206);
 97574:     assertEq(view.getInt32(3), 56911206);
 97574:     view.setInt32(6, 1718059137);
 97574:     assertEq(view.getInt32(6), 1718059137);
 97574:     view.setInt32(9, -2122152964);
 97574:     assertEq(view.getInt32(9), -2122152964);
 97574:     view.setInt32(12, -50462977);
 97574:     assertEq(view.getInt32(12), -50462977);
 97574:     view.setUint32(0, 50462976, true);
 97574:     assertEq(view.getUint32(0, true), 50462976);
 97574:     view.setUint32(3, 1717920771, true);
 97574:     assertEq(view.getUint32(3, true), 1717920771);
 97574:     view.setUint32(6, 2172675942, true);
 97574:     assertEq(view.getUint32(6, true), 2172675942);
 97574:     view.setUint32(9, 4236477057, true);
 97574:     assertEq(view.getUint32(9, true), 4236477057);
 97574:     view.setUint32(12, 4294901244, true);
 97574:     assertEq(view.getUint32(12, true), 4294901244);
 97574:     view.setUint32(0, 66051);
 97574:     assertEq(view.getUint32(0), 66051);
 97574:     view.setUint32(3, 56911206);
 97574:     assertEq(view.getUint32(3), 56911206);
 97574:     view.setUint32(6, 1718059137);
 97574:     assertEq(view.getUint32(6), 1718059137);
 97574:     view.setUint32(9, 2172814332);
 97574:     assertEq(view.getUint32(9), 2172814332);
 97574:     view.setUint32(12, 4244504319);
 97574:     assertEq(view.getUint32(12), 4244504319);
 97574: 
 97574:     // testFloatSets(start=undefined)
 97574: 
 97574:     // testFloatSet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat32(0, 10, true);
 97574:     assertEq(view.getFloat32(0, true), 10);
 97574:     var buffer13_pad3 = new Uint8Array(Array(3).concat(data13)).buffer;
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat32(3, 10, true);
 97574:     assertEq(view.getFloat32(3, true), 10);
 97574:     var buffer13_pad7 = new Uint8Array(Array(7).concat(data13)).buffer;
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat32(7, 10, true);
 97574:     assertEq(view.getFloat32(7, true), 10);
 97574:     var buffer13_pad10 = new Uint8Array(Array(10).concat(data13)).buffer;
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat32(10, 10, true);
 97574:     assertEq(view.getFloat32(10, true), 10);
 97574:     //   Big endian.
 97574:     var buffer13_r = new Uint8Array(data13_r).buffer;
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat32(0, 10, false);
 97574:     assertEq(view.getFloat32(0, false), 10);
 97574:     var buffer13_r_pad3 = new Uint8Array(Array(3).concat(data13_r)).buffer;
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat32(3, 10, false);
 97574:     assertEq(view.getFloat32(3, false), 10);
 97574:     var buffer13_r_pad7 = new Uint8Array(Array(7).concat(data13_r)).buffer;
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat32(7, 10, false);
 97574:     assertEq(view.getFloat32(7, false), 10);
 97574:     var buffer13_r_pad10 = new Uint8Array(Array(10).concat(data13_r)).buffer;
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat32(10, 10, false);
 97574:     assertEq(view.getFloat32(10, false), 10);
 97574: 
 97574:     // testFloatSet expected=1.2300000190734863
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat32(0, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(0, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat32(3, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(3, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat32(7, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(7, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat32(10, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(10, true), 1.2300000190734863);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat32(0, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(0, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat32(3, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(3, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat32(7, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(7, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat32(10, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(10, false), 1.2300000190734863);
 97574: 
 97574:     // testFloatSet expected=-45621.37109375
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat32(0, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(0, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat32(3, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(3, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat32(7, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(7, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat32(10, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(10, true), -45621.37109375);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat32(0, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(0, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat32(3, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(3, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat32(7, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(7, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat32(10, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(10, false), -45621.37109375);
 97574: 
 97574:     // testFloatSet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat32(0, NaN, true);
 97574:     assertEq(view.getFloat32(0, true), NaN);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat32(3, NaN, true);
 97574:     assertEq(view.getFloat32(3, true), NaN);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat32(7, NaN, true);
 97574:     assertEq(view.getFloat32(7, true), NaN);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat32(10, NaN, true);
 97574:     assertEq(view.getFloat32(10, true), NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat32(0, NaN, false);
 97574:     assertEq(view.getFloat32(0, false), NaN);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat32(3, NaN, false);
 97574:     assertEq(view.getFloat32(3, false), NaN);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat32(7, NaN, false);
 97574:     assertEq(view.getFloat32(7, false), NaN);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat32(10, NaN, false);
 97574:     assertEq(view.getFloat32(10, false), NaN);
 97574: 
 97574:     // testFloatSet expected=-NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat32(0, -NaN, true);
 97574:     assertEq(view.getFloat32(0, true), -NaN);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat32(3, -NaN, true);
 97574:     assertEq(view.getFloat32(3, true), -NaN);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat32(7, -NaN, true);
 97574:     assertEq(view.getFloat32(7, true), -NaN);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat32(10, -NaN, true);
 97574:     assertEq(view.getFloat32(10, true), -NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat32(0, -NaN, false);
 97574:     assertEq(view.getFloat32(0, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat32(3, -NaN, false);
 97574:     assertEq(view.getFloat32(3, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat32(7, -NaN, false);
 97574:     assertEq(view.getFloat32(7, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat32(10, -NaN, false);
 97574:     assertEq(view.getFloat32(10, false), -NaN);
 97574: 
 97574:     // testFloatSet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat64(0, 10, true);
 97574:     assertEq(view.getFloat64(0, true), 10);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat64(3, 10, true);
 97574:     assertEq(view.getFloat64(3, true), 10);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat64(7, 10, true);
 97574:     assertEq(view.getFloat64(7, true), 10);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat64(10, 10, true);
 97574:     assertEq(view.getFloat64(10, true), 10);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat64(0, 10, false);
 97574:     assertEq(view.getFloat64(0, false), 10);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat64(3, 10, false);
 97574:     assertEq(view.getFloat64(3, false), 10);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat64(7, 10, false);
 97574:     assertEq(view.getFloat64(7, false), 10);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat64(10, 10, false);
 97574:     assertEq(view.getFloat64(10, false), 10);
 97574: 
 97574:     // testFloatSet expected=1.23
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat64(0, 1.23, true);
 97574:     assertEq(view.getFloat64(0, true), 1.23);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat64(3, 1.23, true);
 97574:     assertEq(view.getFloat64(3, true), 1.23);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat64(7, 1.23, true);
 97574:     assertEq(view.getFloat64(7, true), 1.23);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat64(10, 1.23, true);
 97574:     assertEq(view.getFloat64(10, true), 1.23);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat64(0, 1.23, false);
 97574:     assertEq(view.getFloat64(0, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat64(3, 1.23, false);
 97574:     assertEq(view.getFloat64(3, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat64(7, 1.23, false);
 97574:     assertEq(view.getFloat64(7, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat64(10, 1.23, false);
 97574:     assertEq(view.getFloat64(10, false), 1.23);
 97574: 
 97574:     // testFloatSet expected=-6213576.4839
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat64(0, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(0, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat64(3, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(3, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat64(7, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(7, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat64(10, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(10, true), -6213576.4839);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat64(0, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(0, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat64(3, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(3, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat64(7, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(7, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat64(10, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(10, false), -6213576.4839);
 97574: 
 97574:     // testFloatSet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat64(0, NaN, true);
 97574:     assertEq(view.getFloat64(0, true), NaN);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat64(3, NaN, true);
 97574:     assertEq(view.getFloat64(3, true), NaN);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat64(7, NaN, true);
 97574:     assertEq(view.getFloat64(7, true), NaN);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat64(10, NaN, true);
 97574:     assertEq(view.getFloat64(10, true), NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat64(0, NaN, false);
 97574:     assertEq(view.getFloat64(0, false), NaN);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat64(3, NaN, false);
 97574:     assertEq(view.getFloat64(3, false), NaN);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat64(7, NaN, false);
 97574:     assertEq(view.getFloat64(7, false), NaN);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat64(10, NaN, false);
 97574:     assertEq(view.getFloat64(10, false), NaN);
 97574: 
 97574:     // testFloatSet expected=-NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 0, 16);
 97574:     view.setFloat64(0, -NaN, true);
 97574:     assertEq(view.getFloat64(0, true), -NaN);
 97574:     view = new DataView(buffer13_pad3, 0, 19);
 97574:     view.setFloat64(3, -NaN, true);
 97574:     assertEq(view.getFloat64(3, true), -NaN);
 97574:     view = new DataView(buffer13_pad7, 0, 23);
 97574:     view.setFloat64(7, -NaN, true);
 97574:     assertEq(view.getFloat64(7, true), -NaN);
 97574:     view = new DataView(buffer13_pad10, 0, 26);
 97574:     view.setFloat64(10, -NaN, true);
 97574:     assertEq(view.getFloat64(10, true), -NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 0, 16);
 97574:     view.setFloat64(0, -NaN, false);
 97574:     assertEq(view.getFloat64(0, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad3, 0, 19);
 97574:     view.setFloat64(3, -NaN, false);
 97574:     assertEq(view.getFloat64(3, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad7, 0, 23);
 97574:     view.setFloat64(7, -NaN, false);
 97574:     assertEq(view.getFloat64(7, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad10, 0, 26);
 97574:     view.setFloat64(10, -NaN, false);
 97574:     assertEq(view.getFloat64(10, false), -NaN);
 97574: 
 97574:     // Test for set methods that might write beyond the range
 97574: 
 97574:     // testIntegerSets(start=3, length=2)
 97574:     view = new DataView(buffer13, 3, 2);
 97574:     view.setInt8(0, 0);
 97574:     assertEq(view.getInt8(0), 0);
 97574:     checkThrow(function () view.setInt8(8, -128), RangeError);
 97574:     checkThrow(function () view.setInt8(15, -1), RangeError);
 97574:     view.setUint8(0, 0);
 97574:     assertEq(view.getUint8(0), 0);
 97574:     checkThrow(function () view.setUint8(8, 128), RangeError);
 97574:     checkThrow(function () view.setUint8(15, 255), RangeError);
 97574:     view.setInt16(0, 256, true);
 97574:     assertEq(view.getInt16(0, true), 256);
 97574:     checkThrow(function () view.setInt16(5, 26213, true), RangeError);
 97574:     checkThrow(function () view.setInt16(9, -32127, true), RangeError);
 97574:     checkThrow(function () view.setInt16(14, -2, true), RangeError);
 97574:     view.setInt16(0, 1);
 97574:     assertEq(view.getInt16(0), 1);
 97574:     checkThrow(function () view.setInt16(5, 25958), RangeError);
 97574:     checkThrow(function () view.setInt16(9, -32382), RangeError);
 97574:     checkThrow(function () view.setInt16(14, -257), RangeError);
 97574:     view.setUint16(0, 256, true);
 97574:     assertEq(view.getUint16(0, true), 256);
 97574:     checkThrow(function () view.setUint16(5, 26213, true), RangeError);
 97574:     checkThrow(function () view.setUint16(9, 33409, true), RangeError);
 97574:     checkThrow(function () view.setUint16(14, 65534, true), RangeError);
 97574:     view.setUint16(0, 1);
 97574:     assertEq(view.getUint16(0), 1);
 97574:     checkThrow(function () view.setUint16(5, 25958), RangeError);
 97574:     checkThrow(function () view.setUint16(9, 33154), RangeError);
 97574:     checkThrow(function () view.setUint16(14, 65279), RangeError);
 97574:     checkThrow(function () view.setInt32(0, 50462976, true), RangeError);
 97574:     checkThrow(function () view.setInt32(3, 1717920771, true), RangeError);
 97574:     checkThrow(function () view.setInt32(6, -2122291354, true), RangeError);
 97574:     checkThrow(function () view.setInt32(9, -58490239, true), RangeError);
 97574:     checkThrow(function () view.setInt32(12, -66052, true), RangeError);
 97574:     checkThrow(function () view.setInt32(0, 66051), RangeError);
 97574:     checkThrow(function () view.setInt32(3, 56911206), RangeError);
 97574:     checkThrow(function () view.setInt32(6, 1718059137), RangeError);
 97574:     checkThrow(function () view.setInt32(9, -2122152964), RangeError);
 97574:     checkThrow(function () view.setInt32(12, -50462977), RangeError);
 97574:     checkThrow(function () view.setUint32(0, 50462976, true), RangeError);
 97574:     checkThrow(function () view.setUint32(3, 1717920771, true), RangeError);
 97574:     checkThrow(function () view.setUint32(6, 2172675942, true), RangeError);
 97574:     checkThrow(function () view.setUint32(9, 4236477057, true), RangeError);
 97574:     checkThrow(function () view.setUint32(12, 4294901244, true), RangeError);
 97574:     checkThrow(function () view.setUint32(0, 66051), RangeError);
 97574:     checkThrow(function () view.setUint32(3, 56911206), RangeError);
 97574:     checkThrow(function () view.setUint32(6, 1718059137), RangeError);
 97574:     checkThrow(function () view.setUint32(9, 2172814332), RangeError);
 97574:     checkThrow(function () view.setUint32(12, 4244504319), RangeError);
 97574: 
 97574:     // testFloatSets(start=7)
 97574: 
 97574:     // testFloatSet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat32(0, 10, true);
 97574:     assertEq(view.getFloat32(0, true), 10);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat32(3, 10, true);
 97574:     assertEq(view.getFloat32(3, true), 10);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat32(7, 10, true);
 97574:     assertEq(view.getFloat32(7, true), 10);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat32(10, 10, true);
 97574:     assertEq(view.getFloat32(10, true), 10);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat32(0, 10, false);
 97574:     assertEq(view.getFloat32(0, false), 10);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat32(3, 10, false);
 97574:     assertEq(view.getFloat32(3, false), 10);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat32(7, 10, false);
 97574:     assertEq(view.getFloat32(7, false), 10);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat32(10, 10, false);
 97574:     assertEq(view.getFloat32(10, false), 10);
 97574: 
 97574:     // testFloatSet expected=1.2300000190734863
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat32(0, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(0, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat32(3, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(3, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat32(7, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(7, true), 1.2300000190734863);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat32(10, 1.2300000190734863, true);
 97574:     assertEq(view.getFloat32(10, true), 1.2300000190734863);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat32(0, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(0, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat32(3, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(3, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat32(7, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(7, false), 1.2300000190734863);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat32(10, 1.2300000190734863, false);
 97574:     assertEq(view.getFloat32(10, false), 1.2300000190734863);
 97574: 
 97574:     // testFloatSet expected=-45621.37109375
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat32(0, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(0, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat32(3, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(3, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat32(7, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(7, true), -45621.37109375);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat32(10, -45621.37109375, true);
 97574:     assertEq(view.getFloat32(10, true), -45621.37109375);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat32(0, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(0, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat32(3, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(3, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat32(7, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(7, false), -45621.37109375);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat32(10, -45621.37109375, false);
 97574:     assertEq(view.getFloat32(10, false), -45621.37109375);
 97574: 
 97574:     // testFloatSet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat32(0, NaN, true);
 97574:     assertEq(view.getFloat32(0, true), NaN);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat32(3, NaN, true);
 97574:     assertEq(view.getFloat32(3, true), NaN);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat32(7, NaN, true);
 97574:     assertEq(view.getFloat32(7, true), NaN);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat32(10, NaN, true);
 97574:     assertEq(view.getFloat32(10, true), NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat32(0, NaN, false);
 97574:     assertEq(view.getFloat32(0, false), NaN);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat32(3, NaN, false);
 97574:     assertEq(view.getFloat32(3, false), NaN);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat32(7, NaN, false);
 97574:     assertEq(view.getFloat32(7, false), NaN);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat32(10, NaN, false);
 97574:     assertEq(view.getFloat32(10, false), NaN);
 97574: 
 97574:     // testFloatSet expected=-NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat32(0, -NaN, true);
 97574:     assertEq(view.getFloat32(0, true), -NaN);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat32(3, -NaN, true);
 97574:     assertEq(view.getFloat32(3, true), -NaN);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat32(7, -NaN, true);
 97574:     assertEq(view.getFloat32(7, true), -NaN);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat32(10, -NaN, true);
 97574:     assertEq(view.getFloat32(10, true), -NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat32(0, -NaN, false);
 97574:     assertEq(view.getFloat32(0, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat32(3, -NaN, false);
 97574:     assertEq(view.getFloat32(3, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat32(7, -NaN, false);
 97574:     assertEq(view.getFloat32(7, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat32(10, -NaN, false);
 97574:     assertEq(view.getFloat32(10, false), -NaN);
 97574: 
 97574:     // testFloatSet expected=10
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat64(0, 10, true);
 97574:     assertEq(view.getFloat64(0, true), 10);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat64(3, 10, true);
 97574:     assertEq(view.getFloat64(3, true), 10);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat64(7, 10, true);
 97574:     assertEq(view.getFloat64(7, true), 10);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat64(10, 10, true);
 97574:     assertEq(view.getFloat64(10, true), 10);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat64(0, 10, false);
 97574:     assertEq(view.getFloat64(0, false), 10);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat64(3, 10, false);
 97574:     assertEq(view.getFloat64(3, false), 10);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat64(7, 10, false);
 97574:     assertEq(view.getFloat64(7, false), 10);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat64(10, 10, false);
 97574:     assertEq(view.getFloat64(10, false), 10);
 97574: 
 97574:     // testFloatSet expected=1.23
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat64(0, 1.23, true);
 97574:     assertEq(view.getFloat64(0, true), 1.23);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat64(3, 1.23, true);
 97574:     assertEq(view.getFloat64(3, true), 1.23);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat64(7, 1.23, true);
 97574:     assertEq(view.getFloat64(7, true), 1.23);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat64(10, 1.23, true);
 97574:     assertEq(view.getFloat64(10, true), 1.23);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat64(0, 1.23, false);
 97574:     assertEq(view.getFloat64(0, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat64(3, 1.23, false);
 97574:     assertEq(view.getFloat64(3, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat64(7, 1.23, false);
 97574:     assertEq(view.getFloat64(7, false), 1.23);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat64(10, 1.23, false);
 97574:     assertEq(view.getFloat64(10, false), 1.23);
 97574: 
 97574:     // testFloatSet expected=-6213576.4839
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat64(0, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(0, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat64(3, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(3, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat64(7, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(7, true), -6213576.4839);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat64(10, -6213576.4839, true);
 97574:     assertEq(view.getFloat64(10, true), -6213576.4839);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat64(0, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(0, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat64(3, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(3, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat64(7, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(7, false), -6213576.4839);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat64(10, -6213576.4839, false);
 97574:     assertEq(view.getFloat64(10, false), -6213576.4839);
 97574: 
 97574:     // testFloatSet expected=NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat64(0, NaN, true);
 97574:     assertEq(view.getFloat64(0, true), NaN);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat64(3, NaN, true);
 97574:     assertEq(view.getFloat64(3, true), NaN);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat64(7, NaN, true);
 97574:     assertEq(view.getFloat64(7, true), NaN);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat64(10, NaN, true);
 97574:     assertEq(view.getFloat64(10, true), NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat64(0, NaN, false);
 97574:     assertEq(view.getFloat64(0, false), NaN);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat64(3, NaN, false);
 97574:     assertEq(view.getFloat64(3, false), NaN);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat64(7, NaN, false);
 97574:     assertEq(view.getFloat64(7, false), NaN);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat64(10, NaN, false);
 97574:     assertEq(view.getFloat64(10, false), NaN);
 97574: 
 97574:     // testFloatSet expected=-NaN
 97574:     //   Little endian
 97574:     view = new DataView(buffer13, 7, 9);
 97574:     view.setFloat64(0, -NaN, true);
 97574:     assertEq(view.getFloat64(0, true), -NaN);
 97574:     view = new DataView(buffer13_pad3, 7, 12);
 97574:     view.setFloat64(3, -NaN, true);
 97574:     assertEq(view.getFloat64(3, true), -NaN);
 97574:     view = new DataView(buffer13_pad7, 7, 16);
 97574:     view.setFloat64(7, -NaN, true);
 97574:     assertEq(view.getFloat64(7, true), -NaN);
 97574:     view = new DataView(buffer13_pad10, 7, 19);
 97574:     view.setFloat64(10, -NaN, true);
 97574:     assertEq(view.getFloat64(10, true), -NaN);
 97574:     //   Big endian.
 97574:     view = new DataView(buffer13_r, 7, 9);
 97574:     view.setFloat64(0, -NaN, false);
 97574:     assertEq(view.getFloat64(0, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad3, 7, 12);
 97574:     view.setFloat64(3, -NaN, false);
 97574:     assertEq(view.getFloat64(3, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad7, 7, 16);
 97574:     view.setFloat64(7, -NaN, false);
 97574:     assertEq(view.getFloat64(7, false), -NaN);
 97574:     view = new DataView(buffer13_r_pad10, 7, 19);
 97574:     view.setFloat64(10, -NaN, false);
 97574:     assertEq(view.getFloat64(10, false), -NaN);
 97574: 
 97574:     // Test for set methods that write to negative index
 97574: 
 97574:     // testSetNegativeIndexes
 97574:     view = new DataView(buffer1, 0, 16);
 97574:     checkThrow(function () view.setInt8(-1, 0), RangeError);
 97574:     checkThrow(function () view.setInt8(-2, 0), RangeError);
 97574:     checkThrow(function () view.setUint8(-1, 0), RangeError);
 97574:     checkThrow(function () view.setUint8(-2, 0), RangeError);
 97574:     checkThrow(function () view.setInt16(-1, 0), RangeError);
 97574:     checkThrow(function () view.setInt16(-2, 0), RangeError);
 97574:     checkThrow(function () view.setInt16(-3, 0), RangeError);
 97574:     checkThrow(function () view.setUint16(-1, 0), RangeError);
 97574:     checkThrow(function () view.setUint16(-2, 0), RangeError);
 97574:     checkThrow(function () view.setUint16(-3, 0), RangeError);
 97574:     checkThrow(function () view.setInt32(-1, 0), RangeError);
 97574:     checkThrow(function () view.setInt32(-3, 0), RangeError);
 97574:     checkThrow(function () view.setInt32(-5, 0), RangeError);
 97574:     checkThrow(function () view.setUint32(-1, 0), RangeError);
 97574:     checkThrow(function () view.setUint32(-3, 0), RangeError);
 97574:     checkThrow(function () view.setUint32(-5, 0), RangeError);
 97574:     view = new DataView(buffer7, 0, 8);
 97574:     checkThrow(function () view.setFloat32(-1, 0), RangeError);
 97574:     checkThrow(function () view.setFloat32(-3, 0), RangeError);
 97574:     checkThrow(function () view.setFloat32(-5, 0), RangeError);
 97574:     checkThrow(function () view.setFloat64(-1, 0), RangeError);
 97574:     checkThrow(function () view.setFloat64(-5, 0), RangeError);
 97574:     checkThrow(function () view.setFloat64(-9, 0), RangeError);
 97574: 
 97574:     // Too large for signed 32 bit integer index
 97574:     checkThrow(function () view.setInt8(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setUint8(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setInt16(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setUint16(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setInt32(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setUint32(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setFloat32(2147483649, 1), RangeError);
 97574:     checkThrow(function () view.setFloat64(2147483649, 1), RangeError);
 97574: 
 97574:     // Test for wrong arguments passed to set methods
 97574:     checkThrow(function () view.setInt8(), Error);
 97574:     checkThrow(function () view.setUint8(), Error);
 97574:     checkThrow(function () view.setInt16(), Error);
 97574:     checkThrow(function () view.setUint16(), Error);
 97574:     checkThrow(function () view.setInt32(), Error);
 97574:     checkThrow(function () view.setUint32(), Error);
 97574:     checkThrow(function () view.setFloat32(), Error);
 97574:     checkThrow(function () view.setFloat64(), Error);
 97574:     checkThrow(function () view.setInt8(1), Error);
 97574:     checkThrow(function () view.setUint8(1), Error);
 97574:     checkThrow(function () view.setInt16(1), Error);
 97574:     checkThrow(function () view.setUint16(1), Error);
 97574:     checkThrow(function () view.setInt32(1), Error);
 97574:     checkThrow(function () view.setUint32(1), Error);
 97574:     checkThrow(function () view.setFloat32(1), Error);
 97574:     checkThrow(function () view.setFloat64(1), Error);
 97574: 
 97574:     // testAlignment
 97574:     var intArray1 = [0, 1, 2, 3, 100, 101, 102, 103, 128, 129, 130, 131, 252, 253, 254, 255];
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 0);
 97574:     assertEq(view.getUint32(0, false), 0x00010203);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 1);
 97574:     assertEq(view.getUint32(0, false), 0x01020364);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 2);
 97574:     assertEq(view.getUint32(0, false), 0x02036465);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 3);
 97574:     assertEq(view.getUint32(0, false), 0x03646566);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 4);
 97574:     assertEq(view.getUint32(0, false), 0x64656667);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 5);
 97574:     assertEq(view.getUint32(0, false), 0x65666780);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 6);
 97574:     assertEq(view.getUint32(0, false), 0x66678081);
 97574:     view = new DataView((new Uint8Array(intArray1)).buffer, 7);
 97574:     assertEq(view.getUint32(0, false), 0x67808182);
 97574: 
 97574:     // Test for indexing into a DataView, which should not use the ArrayBuffer storage
 97574:     view = new DataView((new Uint8Array([1, 2])).buffer);
 97574:     assertEq(view[0], undefined);
 97574:     view[0] = 3;
 97574:     assertEq(view[0], 3);
 97574:     assertEq(view.getUint8(0), 1);
 97574: 
 98329:     // Test WebIDL-specific class and prototype class names
 98329:     assertEq(Object.prototype.toString.apply(Uint8Array(0)), "[object Uint8Array]");
 98329:     assertEq(Object.prototype.toString.apply(Float32Array(0)), "[object Float32Array]");
 98329:     assertEq(Object.prototype.toString.apply(Uint8Array.prototype), "[object Uint8ArrayPrototype]");
 98329:     assertEq(Object.prototype.toString.apply(Float32Array.prototype), "[object Float32ArrayPrototype]");
 98329:     assertEq(Object.prototype.toString.apply(ArrayBuffer()), "[object ArrayBuffer]");
 98329:     assertEq(Object.prototype.toString.apply(DataView(view.buffer)), "[object DataView]");
 98329:     assertEq(Object.prototype.toString.apply(DataView.prototype), "[object DataViewPrototype]");
 98329: 
 98329:     // Accessing DataView fields on DataView.prototype should crash
 98329:     checkThrow(function () DataView.prototype.byteLength, TypeError);
 98329:     checkThrow(function () DataView.prototype.byteOffset, TypeError);
 98329:     checkThrow(function () DataView.prototype.buffer, TypeError);
 97574: 
 97574:     // Protos and proxies, oh my!
 97574:     var alien = newGlobal('new-compartment');
 97574:     var alien_data = alien.eval('data = ' + data1.toSource());
 97574:     var alien_buffer = alien.eval('buffer = new Uint8Array(data).buffer');
 97574:     var alien_view = alien.eval('view = new DataView(buffer, 0, 16)');
 97574: 
 98329:     // proto is view of buffer: should throw
 98329:     var o = Object.create(view1);
 98329:     checkThrow(function () o.getUint8(4), TypeError); // WebIDL 4.4.7: Operations
 98329:     checkThrow(function () o.buffer, TypeError); // WebIDL 4.4.6: Attributes, section 2
 98329:     checkThrow(function () o.byteOffset, TypeError);
 98329:     checkThrow(function () o.byteLength, TypeError);
 97574: 
 98329:     // proxy for view of buffer: should work
 98329:     assertEq(alien_view.buffer.byteLength > 0, true);
 98329:     assertEq(alien_view.getUint8(4), 100);
 97574: 
 98329:     // Bug 753996: when throwing an Error whose message contains the name of a
 98329:     // function, the JS engine calls js_ValueToFunction to produce the function
 98329:     // name to include in the message. js_ValueToFunction does not unwrap its
 98329:     // argument. So if the function is actually a wrapper, then
 98329:     // js_ValueToFunction will throw a TypeError ("X is not a function").
 98329:     // Confusingly, this TypeError uses the decompiler, which *will* unwrap the
 98329:     // object to get the wrapped function name out, so the final error will
 98329:     // look something like "SomeFunction() is not a function".)
 98329:     var weirdo = Object.create(alien.eval("new Date"));
 98329:     var e = null;
 98329:     try {
 98329:         weirdo.getTime();
 98329:     } catch (exc) {
 98329:         e = exc;
 97574:     }
 98329:     if (!e) {
 98329:         print("==== TODO but PASSED? ====");
 98329:         print("Bug 753996 unexpectedly passed");
 98329:     }
 98329: 
 98329:     // proto is proxy for view of buffer: should throw TypeError
 98329:     //
 98329:     // As of this writing, bug 753996 causes this to throw the *wrong*
 98329:     // TypeError, and in fact it throws a (thisglobal).TypeError instead of
 98329:     // alien.TypeError.
 98329:     var av = Object.create(alien_view);
 98329:     checkThrowTODO(function () av.getUint8(4), alien.TypeError);
103107:     checkThrowTODO(function () av.buffer, alien.TypeError);
 97574: 
 97574:     // view of object whose proto is buffer. This should not work per dherman.
 97574:     // Note that DataView throws a TypeError while TypedArrays create a
 97574:     // zero-length view. Odd though it seems, this is correct: TypedArrays have
 97574:     // a constructor that takes a length argument; DataViews do not. So a
 97574:     // TypedArray will do ToUint32 and end up passing a zero as the
 97574:     // constructor's length argument.
 98329:     buffer = Object.create(buffer1);
 97574:     checkThrow(function () new DataView(buffer), TypeError);
 97574: 
 98671:     // view of proxy for buffer
 98671:     av = new DataView(alien_buffer);
 98671:     assertEq(av.getUint8(4), 100);
 98671:     assertEq(Object.getPrototypeOf(av), DataView.prototype);
 98671: 
101197:     // Bug 760904: call another compartment's constructor with an ArrayBuffer
101197:     // from this compartment, both as a constructor and as a regular call. (The
101197:     // latter is what was broken in that bug.)
101197:     var alien_constructor = alien.DataView;
101197:     var local_buffer = (new Int8Array(3)).buffer;
101197:     var foreign_exchange_student_1 = alien_constructor(local_buffer);
101197:     var foreign_exchange_student_2 = new alien_constructor(local_buffer);
101197: 
111350:     // gc bug 787775
111350:     var ab = new ArrayBuffer(4);
111350:     var dv = new DataView(ab);
111350:     dv = 1;
111350:     gc();
111350: 
 97574:     reportCompare(0, 0, 'done.');
 97574:     exitFunc ('test');
 97574: }
 97574: 
 97574: test();
