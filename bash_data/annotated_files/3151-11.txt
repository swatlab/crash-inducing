   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Netscape Communications Corporation.
   1:  * Portions created by the Initial Developer are Copyright (C) 1998
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
   1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: #ifndef nsTableOuterFrame_h__
   1: #define nsTableOuterFrame_h__
   1: 
   1: #include "nscore.h"
   1: #include "nsHTMLContainerFrame.h"
   1: #include "nsBlockFrame.h"
   1: #include "nsITableLayout.h"
   1: 
   1: struct nsStyleTable;
   1: class nsTableFrame;
   1: 
   1: class nsTableCaptionFrame : public nsBlockFrame
   1: {
   1: public:
   1:   // nsISupports
   1:   virtual nsIAtom* GetType() const;
   1:   friend nsIFrame* NS_NewTableCaptionFrame(nsIPresShell* aPresShell, nsStyleContext*  aContext);
   1: 
   1:   virtual nsSize ComputeAutoSize(nsIRenderingContext *aRenderingContext,
   1:                                  nsSize aCBSize, nscoord aAvailableWidth,
   1:                                  nsSize aMargin, nsSize aBorder,
   1:                                  nsSize aPadding, PRBool aShrinkWrap);
   1: 
 706:   NS_IMETHOD GetParentStyleContextFrame(nsPresContext* aPresContext,
 706:                                         nsIFrame**      aProviderFrame,
 706:                                         PRBool*         aIsChild);
3151: #ifdef ACCESSIBILITY
3151:   NS_IMETHOD GetAccessible(nsIAccessible** aAccessible);
3151: #endif
3151: 
   1: #ifdef NS_DEBUG
   1:   NS_IMETHOD GetFrameName(nsAString& aResult) const;
   1: #endif
   1: 
   1: protected:
   1:   nsTableCaptionFrame(nsStyleContext*  aContext);
   1:   virtual ~nsTableCaptionFrame();
   1: };
   1: 
   1: 
   1: /* TODO
   1: 1. decide if we'll allow subclassing.  If so, decide which methods really need to be virtual.
   1: */
   1: 
   1: /**
   1:  * main frame for an nsTable content object, 
   1:  * the nsTableOuterFrame contains 0 or one caption frame, and a nsTableFrame
   1:  * pseudo-frame (referred to as the "inner frame').
   1:  */
   1: class nsTableOuterFrame : public nsHTMLContainerFrame, public nsITableLayout
   1: {
   1: public:
   1: 
   1:   // nsISupports
   1:   NS_DECL_ISUPPORTS_INHERITED
   1: 
   1:   /** instantiate a new instance of nsTableRowFrame.
   1:     * @param aPresShell the pres shell for this frame
   1:     *
   1:     * @return           the frame that was created
   1:     */
   1:   friend nsIFrame* NS_NewTableOuterFrame(nsIPresShell* aPresShell, nsStyleContext* aContext);
   1:   
   1:   // nsIFrame overrides - see there for a description
   1: 
   1:   NS_IMETHOD Init(nsIContent*      aContent,
   1:                   nsIFrame*        aParent,
   1:                   nsIFrame*        aPrevInFlow);
   1: 
   1:   virtual void Destroy();
   1:   
   1:   virtual PRBool IsContainingBlock() const;
   1: 
   1:   NS_IMETHOD SetInitialChildList(nsIAtom*        aListName,
   1:                                  nsIFrame*       aChildList);
   1:  
   1:   virtual nsIFrame* GetFirstChild(nsIAtom* aListName) const;
   1: 
   1:   virtual nsIAtom* GetAdditionalChildListName(PRInt32 aIndex) const;
   1: 
   1:   NS_IMETHOD AppendFrames(nsIAtom*        aListName,
   1:                           nsIFrame*       aFrameList);
   1: 
   1:   NS_IMETHOD InsertFrames(nsIAtom*        aListName,
   1:                           nsIFrame*       aPrevFrame,
   1:                           nsIFrame*       aFrameList);
   1: 
   1:   NS_IMETHOD RemoveFrame(nsIAtom*        aListName,
   1:                          nsIFrame*       aOldFrame);
   1: 
   1:   virtual nsIFrame* GetContentInsertionFrame() {
   1:     return GetFirstChild(nsnull)->GetContentInsertionFrame();
   1:   }
   1: 
   1: #ifdef ACCESSIBILITY
   1:   NS_IMETHOD GetAccessible(nsIAccessible** aAccessible);
   1: #endif
   1: 
   1:   NS_IMETHOD BuildDisplayList(nsDisplayListBuilder*   aBuilder,
   1:                               const nsRect&           aDirtyRect,
   1:                               const nsDisplayListSet& aLists);
   1: 
   1:   nsresult BuildDisplayListForInnerTable(nsDisplayListBuilder*   aBuilder,
   1:                                          const nsRect&           aDirtyRect,
   1:                                          const nsDisplayListSet& aLists);
   1: 
   1:   virtual nscoord GetBaseline() const;
   1: 
   1:   virtual nscoord GetMinWidth(nsIRenderingContext *aRenderingContext);
   1:   virtual nscoord GetPrefWidth(nsIRenderingContext *aRenderingContext);
   1:   virtual nsSize ComputeAutoSize(nsIRenderingContext *aRenderingContext,
   1:                                  nsSize aCBSize, nscoord aAvailableWidth,
   1:                                  nsSize aMargin, nsSize aBorder,
   1:                                  nsSize aPadding, PRBool aShrinkWrap);
   1: 
   1:   /** process a reflow command for the table.
   1:     * This involves reflowing the caption and the inner table.
   1:     * @see nsIFrame::Reflow */
   1:   NS_IMETHOD Reflow(nsPresContext*          aPresContext,
   1:                     nsHTMLReflowMetrics&     aDesiredSize,
   1:                     const nsHTMLReflowState& aReflowState,
   1:                     nsReflowStatus&          aStatus);
   1: 
   1:   /**
   1:    * Get the "type" of the frame
   1:    *
   1:    * @see nsGkAtoms::tableOuterFrame
   1:    */
   1:   virtual nsIAtom* GetType() const;
   1: 
   1: #ifdef DEBUG
   1:   NS_IMETHOD GetFrameName(nsAString& aResult) const;
   1: #endif
   1: 
   1:   /** SetSelected needs to be overridden to talk to inner tableframe
   1:    */
   1:   NS_IMETHOD SetSelected(nsPresContext* aPresContext,
   1:                          nsIDOMRange *aRange,
   1:                          PRBool aSelected,
   1:                          nsSpread aSpread);
   1: 
   1:   NS_IMETHOD GetParentStyleContextFrame(nsPresContext* aPresContext,
   1:                                         nsIFrame**      aProviderFrame,
   1:                                         PRBool*         aIsChild);
   1: 
   1:   /*---------------- nsITableLayout methods ------------------------*/
   1: 
   1:   /** @see nsITableFrame::GetCellDataAt */
   1:   NS_IMETHOD GetCellDataAt(PRInt32 aRowIndex, PRInt32 aColIndex, 
   1:                            nsIDOMElement* &aCell,   //out params
   1:                            PRInt32& aStartRowIndex, PRInt32& aStartColIndex, 
   1:                            PRInt32& aRowSpan, PRInt32& aColSpan,
   1:                            PRInt32& aActualRowSpan, PRInt32& aActualColSpan,
   1:                            PRBool& aIsSelected);
   1: 
   1:   /** @see nsITableFrame::GetTableSize */
   1:   NS_IMETHOD GetTableSize(PRInt32& aRowCount, PRInt32& aColCount);
   1: 
   1:   PRBool IsNested(const nsHTMLReflowState& aReflowState) const;
   1: 
   1: protected:
   1: 
   1: 
   1:   nsTableOuterFrame(nsStyleContext* aContext);
   1:   virtual ~nsTableOuterFrame();
   1: 
   1:   void InitChildReflowState(nsPresContext&    aPresContext,                     
   1:                             nsHTMLReflowState& aReflowState);
   1: 
   1:   /** Always returns 0, since the outer table frame has no border of its own
   1:     * The inner table frame can answer this question in a meaningful way.
   1:     * @see nsHTMLContainerFrame::GetSkipSides */
   1:   virtual PRIntn GetSkipSides() const;
   1: 
   1: #ifdef NS_DEBUG
   1:   /** overridden here to handle special caption-table relationship
   1:     * @see nsContainerFrame::VerifyTree
   1:     */
   1:   NS_IMETHOD VerifyTree() const;
   1: #endif
   1: 
   1:   /**
   1:    * Remove and delete aChild's next-in-flow(s). Updates the sibling and flow
   1:    * pointers.
   1:    *
   1:    * Updates the child count and content offsets of all containers that are
   1:    * affected
   1:    *
   1:    * Overloaded here because nsContainerFrame makes assumptions about pseudo-frames
   1:    * that are not true for tables.
   1:    *
   1:    * @param   aChild child this child's next-in-flow
   1:    * @return  PR_TRUE if successful and PR_FALSE otherwise
   1:    */
   1:   virtual void DeleteChildsNextInFlow(nsPresContext* aPresContext, nsIFrame* aChild);
   1: 
   1:   PRUint8 GetCaptionSide();
   1:   
   1:   PRUint8 GetCaptionVerticalAlign();
   1: 
   1:   void SetDesiredSize(PRUint8         aCaptionSide,
   1:                       const nsMargin& aInnerMargin,
   1:                       const nsMargin& aCaptionMargin,
   1:                       nscoord&        aWidth,
   1:                       nscoord&        aHeight);
   1: 
   1:   void BalanceLeftRightCaption(PRUint8         aCaptionSide,
   1:                                const nsMargin& aInnerMargin, 
   1:                                const nsMargin& aCaptionMargin,
   1:                                nscoord&        aInnerWidth,
   1:                                nscoord&        aCaptionWidth);
   1: 
   1:   NS_IMETHOD GetCaptionOrigin(PRUint32         aCaptionSide,
   1:                               const nsSize&    aContainBlockSize,
   1:                               const nsSize&    aInnerSize, 
   1:                               const nsMargin&  aInnerMargin,
   1:                               const nsSize&    aCaptionSize,
   1:                               nsMargin&        aCaptionMargin,
   1:                               nsPoint&         aOrigin);
   1: 
   1:   NS_IMETHOD GetInnerOrigin(PRUint32         aCaptionSide,
   1:                             const nsSize&    aContainBlockSize,
   1:                             const nsSize&    aCaptionSize, 
   1:                             const nsMargin&  aCaptionMargin,
   1:                             const nsSize&    aInnerSize,
   1:                             nsMargin&        aInnerMargin,
   1:                             nsPoint&         aOrigin);
   1:   
   1:   // reflow the child (caption or innertable frame)
   1:   NS_IMETHOD OuterReflowChild(nsPresContext*            aPresContext,
   1:                               nsIFrame*                 aChildFrame,
   1:                               const nsHTMLReflowState&  aOuterRS,
   1:                               void*                     aChildRSSpace,
   1:                               nsHTMLReflowMetrics&      aMetrics,
   1:                               nscoord                   aAvailWidth,
   1:                               nsSize&                   aDesiredSize,
   1:                               nsMargin&                 aMargin,
   1:                               nsReflowStatus&           aStatus);
   1: 
   1:   // Set the reflow metrics
   1:   void UpdateReflowMetrics(PRUint8              aCaptionSide,
   1:                            nsHTMLReflowMetrics& aMet,
   1:                            const nsMargin&      aInnerMargin,
   1:                            const nsMargin&      aCaptionMargin);
   1: 
   1:   void InvalidateDamage(PRUint8         aCaptionSide,
   1:                         const nsSize&   aOuterSize,
   1:                         PRBool          aInnerChanged,
   1:                         PRBool          aCaptionChanged,
   1:                         nsRect*         aOldOverflowArea);
   1:   
   1:   // Get the margin.  aMarginNoAuto is aMargin, but with auto 
   1:   // margins set to 0
   1:   void GetMargin(nsPresContext*           aPresContext,
   1:                  const nsHTMLReflowState& aOuterRS,
   1:                  nsIFrame*                aChildFrame,
   1:                  nscoord                  aAvailableWidth,
   1:                  nsMargin&                aMargin);
   1: 
   1: private:
   1:   // used to keep track of this frame's children. They are redundant with mFrames, but more convient
   1:   nsTableFrame* mInnerTableFrame; 
   1:   nsFrameList   mCaptionFrames;
   1:   nsIFrame*     mCaptionFrame;
   1: };
   1: 
   1: inline PRIntn nsTableOuterFrame::GetSkipSides() const
   1: { return 0; }
   1: 
   1: #endif
   1: 
   1: 
   1: 
