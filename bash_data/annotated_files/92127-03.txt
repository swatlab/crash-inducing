68748: /* ***** BEGIN LICENSE BLOCK *****
68748:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
68748:  *
68748:  * The contents of this file are subject to the Mozilla Public License Version
68748:  * 1.1 (the "License"); you may not use this file except in compliance with
68748:  * the License. You may obtain a copy of the License at
68748:  * http://www.mozilla.org/MPL/
68748:  *
68748:  * Software distributed under the License is distributed on an "AS IS" basis,
68748:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
68748:  * for the specific language governing rights and limitations under the
68748:  * License.
68748:  *
68748:  * The Original Code is mozilla.org code.
68748:  *
68748:  * The Initial Developer of the Original Code is
68748:  * The Mozilla Foundation.
68748:  * Portions created by the Initial Developer are Copyright (C) 2011
68748:  * the Initial Developer. All Rights Reserved.
68748:  *
68748:  * Contributor(s):
68748:  *   Ted Mielczarek <ted.mielczarek@gmail.com>
68748:  *
68748:  * Alternatively, the contents of this file may be used under the terms of
68748:  * either the GNU General Public License Version 2 or later (the "GPL"), or
68748:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
68748:  * in which case the provisions of the GPL or the LGPL are applicable instead
68748:  * of those above. If you wish to allow use of your version of this file only
68748:  * under the terms of either the GPL or the LGPL, and not to allow others to
68748:  * use your version of this file under the terms of the MPL, indicate your
68748:  * decision by deleting the provisions above and replace them with the notice
68748:  * and other provisions required by the GPL or the LGPL. If you do not delete
68748:  * the provisions above, a recipient may use your version of this file under
68748:  * the terms of any one of the MPL, the GPL or the LGPL.
68748:  *
68748:  * ***** END LICENSE BLOCK ***** */
68748: 
68748: /*
68748:  * Windows widget support for event loop instrumentation.
68748:  * See toolkit/xre/EventTracer.cpp for more details.
68748:  */
68748: 
68748: #include <stdio.h>
68748: #include <windows.h>
68748: 
68748: #include "mozilla/WidgetTraceEvent.h"
68748: #include "nsAppShellCID.h"
68748: #include "nsComponentManagerUtils.h"
68748: #include "nsCOMPtr.h"
68748: #include "nsIAppShellService.h"
68748: #include "nsIBaseWindow.h"
68748: #include "nsIDocShell.h"
68748: #include "nsIWidget.h"
68748: #include "nsIXULWindow.h"
68748: #include "nsAutoPtr.h"
68748: #include "nsServiceManagerUtils.h"
68748: #include "nsThreadUtils.h"
68748: #include "nsWindowDefs.h"
68748: 
68748: namespace {
68748: 
68748: // Used for signaling the background thread from the main thread.
68748: HANDLE sEventHandle = NULL;
68748: 
68748: // We need a runnable in order to find the hidden window on the main
68748: // thread.
68748: class HWNDGetter : public nsRunnable {
68748: public:
68748:   HWNDGetter() : hidden_window_hwnd(NULL) {}
68748: 
68748:   HWND hidden_window_hwnd;
68748: 
68748:   NS_IMETHOD Run() {
68748:     // Jump through some hoops to locate the hidden window.
68748:     nsCOMPtr<nsIAppShellService> appShell(do_GetService(NS_APPSHELLSERVICE_CONTRACTID));
68748:     nsCOMPtr<nsIXULWindow> hiddenWindow;
68748: 
68748:     nsresult rv = appShell->GetHiddenWindow(getter_AddRefs(hiddenWindow));
68748:     if (NS_FAILED(rv)) {
68748:       return rv;
68748:     }
68748: 
68748:     nsCOMPtr<nsIDocShell> docShell;
68748:     rv = hiddenWindow->GetDocShell(getter_AddRefs(docShell));
68748:     if (NS_FAILED(rv) || !docShell) {
68748:       return rv;
68748:     }
68748: 
68748:     nsCOMPtr<nsIBaseWindow> baseWindow(do_QueryInterface(docShell));
68748:     
68748:     if (!baseWindow)
68748:       return NS_ERROR_FAILURE;
68748: 
68748:     nsCOMPtr<nsIWidget> widget;
68748:     baseWindow->GetMainWidget(getter_AddRefs(widget));
68748: 
68748:     if (!widget)
68748:       return NS_ERROR_FAILURE;
68748: 
68748:     hidden_window_hwnd = (HWND)widget->GetNativeData(NS_NATIVE_WINDOW);
68748: 
68748:     return NS_OK;
68748:   }
68748: };
68748: 
68748: HWND GetHiddenWindowHWND()
68748: {
68748:   // Need to dispatch this to the main thread because plenty of
68748:   // the things it wants to access are main-thread-only.
68748:   nsRefPtr<HWNDGetter> getter = new HWNDGetter();
68748:   NS_DispatchToMainThread(getter, NS_DISPATCH_SYNC);
68748:   return getter->hidden_window_hwnd;
68748: }
68748: 
68748: } // namespace
68748: 
68748: namespace mozilla {
68748: 
68748: bool InitWidgetTracing()
68748: {
68748:   sEventHandle = CreateEvent(NULL, FALSE, FALSE, NULL);
68748:   return sEventHandle != NULL;
68748: }
68748: 
68748: void CleanUpWidgetTracing()
68748: {
68748:   CloseHandle(sEventHandle);
92127:   sEventHandle = NULL;
68748: }
68748: 
68748: // This function is called from the main (UI) thread.
68748: void SignalTracerThread()
68748: {
68748:   if (sEventHandle != NULL)
68748:     SetEvent(sEventHandle);
68748: }
68748: 
68748: // This function is called from the background tracer thread.
68748: bool FireAndWaitForTracerEvent()
68748: {
68748:   NS_ABORT_IF_FALSE(sEventHandle, "Tracing not initialized!");
68748: 
68748:   // First, try to find the hidden window.
68748:   static HWND hidden_window = NULL;
68748:   if (hidden_window == NULL) {
68748:     hidden_window = GetHiddenWindowHWND();
68748:   }
68748: 
68748:   if (hidden_window == NULL)
68748:     return false;
68748: 
68748:   // Post the tracer message into the hidden window's message queue,
68748:   // and then block until it's processed.
68748:   PostMessage(hidden_window, MOZ_WM_TRACE, 0, 0);
68748:   WaitForSingleObject(sEventHandle, INFINITE);
68748:   return true;
68748: }
68748: 
68748: }  // namespace mozilla
