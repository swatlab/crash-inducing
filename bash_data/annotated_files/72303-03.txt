10694: /* cairo - a vector graphics library with display and print output
10694:  *
10694:  * Copyright Â© 2004 Keith Packard
10694:  *
10694:  * This library is free software; you can redistribute it and/or
10694:  * modify it either under the terms of the GNU Lesser General Public
10694:  * License version 2.1 as published by the Free Software Foundation
10694:  * (the "LGPL") or, at your option, under the terms of the Mozilla
10694:  * Public License Version 1.1 (the "MPL"). If you do not alter this
10694:  * notice, a recipient may use your version of this file under either
10694:  * the MPL or the LGPL.
10694:  *
10694:  * You should have received a copy of the LGPL along with this library
10694:  * in the file COPYING-LGPL-2.1; if not, write to the Free Software
70960:  * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335, USA
10694:  * You should have received a copy of the MPL along with this library
10694:  * in the file COPYING-MPL-1.1
10694:  *
10694:  * The contents of this file are subject to the Mozilla Public License
10694:  * Version 1.1 (the "License"); you may not use this file except in
10694:  * compliance with the License. You may obtain a copy of the License at
10694:  * http://www.mozilla.org/MPL/
10694:  *
10694:  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
10694:  * OF ANY KIND, either express or implied. See the LGPL or the MPL for
10694:  * the specific language governing rights and limitations.
10694:  *
10694:  * The Original Code is the cairo graphics library.
10694:  *
10694:  * The Initial Developer of the Original Code is Keith Packard
10694:  *
10694:  * Contributor(s):
10694:  *	Keith R. Packard <keithp@keithp.com>
10694:  *
10694:  */
10694: 
10694: #ifndef CAIRO_WIDEINT_TYPE_H
10694: #define CAIRO_WIDEINT_TYPE_H
10694: 
21379: #include "cairo.h"
21379: 
10694: #if HAVE_CONFIG_H
10694: #include "config.h"
10694: #endif
10694: 
10694: #if   HAVE_STDINT_H
10694: # include <stdint.h>
10694: #elif HAVE_INTTYPES_H
10694: # include <inttypes.h>
10694: #elif HAVE_SYS_INT_TYPES_H
10694: # include <sys/int_types.h>
10694: #elif defined(_MSC_VER)
10694:   typedef __int8 int8_t;
10694:   typedef unsigned __int8 uint8_t;
10694:   typedef __int16 int16_t;
10694:   typedef unsigned __int16 uint16_t;
10694:   typedef __int32 int32_t;
10694:   typedef unsigned __int32 uint32_t;
10694:   typedef __int64 int64_t;
10694:   typedef unsigned __int64 uint64_t;
72303: #ifndef _UINTPTR_T_DEFINED
72303: #ifdef _WIN64
72303:   typedef unsigned __int64 uintptr_t;
72303: #else
72303:   typedef unsigned int uintptr_t;
72303: #endif
72303: #endif
10694: # ifndef HAVE_UINT64_T
10694: #  define HAVE_UINT64_T 1
10694: # endif
18904: #else
18904: #error Cannot find definitions for fixed-width integral types (uint8_t, uint32_t, etc.)
18904: #endif
18904: 
10694: #ifndef INT16_MIN
10694: # define INT16_MIN	(-32767-1)
10694: #endif
10694: #ifndef INT16_MAX
10694: # define INT16_MAX	(32767)
10694: #endif
10694: #ifndef UINT16_MAX
10694: # define UINT16_MAX	(65535)
10694: #endif
10694: #ifndef INT32_MIN
10694: # define INT32_MIN	(-2147483647-1)
10694: #endif
10694: #ifndef INT32_MAX
10694: # define INT32_MAX	(2147483647)
10694: #endif
10694: 
16122: #if HAVE_BYTESWAP_H
16122: # include <byteswap.h>
16122: #endif
16122: #ifndef bswap_16
16122: # define bswap_16(p) \
16122: 	(((((uint16_t)(p)) & 0x00ff) << 8) | \
16122: 	  (((uint16_t)(p))           >> 8));
16122: #endif
16122: #ifndef bswap_32
16122: # define bswap_32(p) \
16122:          (((((uint32_t)(p)) & 0x000000ff) << 24) | \
16122: 	  ((((uint32_t)(p)) & 0x0000ff00) << 8)  | \
16122: 	  ((((uint32_t)(p)) & 0x00ff0000) >> 8)  | \
16122: 	  ((((uint32_t)(p)))              >> 24));
16122: #endif
16122: 
10694: 
10694: #if !HAVE_UINT64_T
10694: 
10694: typedef struct _cairo_uint64 {
10694:     uint32_t	lo, hi;
10694: } cairo_uint64_t, cairo_int64_t;
10694: 
10694: #else
10694: 
10694: typedef uint64_t    cairo_uint64_t;
10694: typedef int64_t	    cairo_int64_t;
10694: 
10694: #endif
10694: 
10694: typedef struct _cairo_uquorem64 {
10694:     cairo_uint64_t	quo;
10694:     cairo_uint64_t	rem;
10694: } cairo_uquorem64_t;
10694: 
10694: typedef struct _cairo_quorem64 {
10694:     cairo_int64_t	quo;
10694:     cairo_int64_t	rem;
10694: } cairo_quorem64_t;
10694: 
41340: /* gcc has a non-standard name. */
41340: #if HAVE___UINT128_T && !HAVE_UINT128_T
41340: typedef __uint128_t uint128_t;
41340: typedef __int128_t int128_t;
41340: #define HAVE_UINT128_T 1
41340: #endif
10694: 
10694: #if !HAVE_UINT128_T
10694: 
10694: typedef struct cairo_uint128 {
10694:     cairo_uint64_t	lo, hi;
10694: } cairo_uint128_t, cairo_int128_t;
10694: 
10694: #else
10694: 
10694: typedef uint128_t	cairo_uint128_t;
10694: typedef int128_t	cairo_int128_t;
10694: 
10694: #endif
10694: 
10694: typedef struct _cairo_uquorem128 {
10694:     cairo_uint128_t	quo;
10694:     cairo_uint128_t	rem;
10694: } cairo_uquorem128_t;
10694: 
10694: typedef struct _cairo_quorem128 {
10694:     cairo_int128_t	quo;
10694:     cairo_int128_t	rem;
10694: } cairo_quorem128_t;
10694: 
10694: 
10694: #endif /* CAIRO_WIDEINT_H */
