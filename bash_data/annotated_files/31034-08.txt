16295: /********************************************************************
16295:  *                                                                  *
16295:  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
16295:  * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
16295:  * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
16295:  * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
16295:  *                                                                  *
31034:  * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2009             *
16295:  * by the Xiph.Org Foundation http://www.xiph.org/                  *
16295:  *                                                                  *
16295:  ********************************************************************
16295: 
16295:  function: libvorbis codec headers
31034:  last mod: $Id: codec_internal.h 16227 2009-07-08 06:58:46Z xiphmont $
16295: 
16295:  ********************************************************************/
16295: 
16295: #ifndef _V_CODECI_H_
16295: #define _V_CODECI_H_
16295: 
16295: #include "envelope.h"
16295: #include "codebook.h"
16295: 
16295: #define BLOCKTYPE_IMPULSE    0
16295: #define BLOCKTYPE_PADDING    1
16295: #define BLOCKTYPE_TRANSITION 0
16295: #define BLOCKTYPE_LONG       1
16295: 
16295: #define PACKETBLOBS 15
16295: 
16295: typedef struct vorbis_block_internal{
16295:   float  **pcmdelay;  /* this is a pointer into local storage */
16295:   float  ampmax;
16295:   int    blocktype;
16295: 
16295:   oggpack_buffer *packetblob[PACKETBLOBS]; /* initialized, must be freed;
16295:                                               blob [PACKETBLOBS/2] points to
16295:                                               the oggpack_buffer in the
16295:                                               main vorbis_block */
16295: } vorbis_block_internal;
16295: 
16295: typedef void vorbis_look_floor;
16295: typedef void vorbis_look_residue;
16295: typedef void vorbis_look_transform;
16295: 
16295: /* mode ************************************************************/
16295: typedef struct {
16295:   int blockflag;
16295:   int windowtype;
16295:   int transformtype;
16295:   int mapping;
16295: } vorbis_info_mode;
16295: 
16295: typedef void vorbis_info_floor;
16295: typedef void vorbis_info_residue;
16295: typedef void vorbis_info_mapping;
16295: 
16295: #include "psy.h"
16295: #include "bitrate.h"
16295: 
16295: typedef struct private_state {
16295:   /* local lookup storage */
16295:   envelope_lookup        *ve; /* envelope lookup */
16295:   int                     window[2];
16295:   vorbis_look_transform **transform[2];    /* block, type */
16295:   drft_lookup             fft_look[2];
16295: 
16295:   int                     modebits;
16295:   vorbis_look_floor     **flr;
16295:   vorbis_look_residue   **residue;
16295:   vorbis_look_psy        *psy;
16295:   vorbis_look_psy_global *psy_g_look;
16295: 
16295:   /* local storage, only used on the encoding side.  This way the
16295:      application does not need to worry about freeing some packets'
16295:      memory and not others'; packet storage is always tracked.
16295:      Cleared next call to a _dsp_ function */
16295:   unsigned char *header;
16295:   unsigned char *header1;
16295:   unsigned char *header2;
16295: 
16295:   bitrate_manager_state bms;
16295: 
16295:   ogg_int64_t sample_count;
16295: } private_state;
16295: 
16295: /* codec_setup_info contains all the setup information specific to the
16295:    specific compression/decompression mode in progress (eg,
16295:    psychoacoustic settings, channel setup, options, codebook
16295:    etc).
16295: *********************************************************************/
16295: 
16295: #include "highlevel.h"
16295: typedef struct codec_setup_info {
16295: 
16295:   /* Vorbis supports only short and long blocks, but allows the
16295:      encoder to choose the sizes */
16295: 
16295:   long blocksizes[2];
16295: 
16295:   /* modes are the primary means of supporting on-the-fly different
16295:      blocksizes, different channel mappings (LR or M/A),
16295:      different residue backends, etc.  Each mode consists of a
16295:      blocksize flag and a mapping (along with the mapping setup */
16295: 
16295:   int        modes;
16295:   int        maps;
16295:   int        floors;
16295:   int        residues;
16295:   int        books;
16295:   int        psys;     /* encode only */
16295: 
16295:   vorbis_info_mode       *mode_param[64];
16295:   int                     map_type[64];
16295:   vorbis_info_mapping    *map_param[64];
16295:   int                     floor_type[64];
16295:   vorbis_info_floor      *floor_param[64];
16295:   int                     residue_type[64];
16295:   vorbis_info_residue    *residue_param[64];
16295:   static_codebook        *book_param[256];
16295:   codebook               *fullbooks;
16295: 
16295:   vorbis_info_psy        *psy_param[4]; /* encode only */
16295:   vorbis_info_psy_global psy_g_param;
16295: 
16295:   bitrate_manager_info   bi;
16295:   highlevel_encode_setup hi; /* used only by vorbisenc.c.  It's a
16295:                                 highly redundant structure, but
16295:                                 improves clarity of program flow. */
16295:   int         halfrate_flag; /* painless downsample for decode */
16295: } codec_setup_info;
16295: 
16295: extern vorbis_look_psy_global *_vp_global_look(vorbis_info *vi);
16295: extern void _vp_global_free(vorbis_look_psy_global *look);
16295: 
30043: 
30043: 
30043: typedef struct {
30043:   int sorted_index[VIF_POSIT+2];
30043:   int forward_index[VIF_POSIT+2];
30043:   int reverse_index[VIF_POSIT+2];
30043: 
30043:   int hineighbor[VIF_POSIT];
30043:   int loneighbor[VIF_POSIT];
30043:   int posts;
30043: 
30043:   int n;
30043:   int quant_q;
30043:   vorbis_info_floor1 *vi;
30043: 
30043:   long phrasebits;
30043:   long postbits;
30043:   long frames;
30043: } vorbis_look_floor1;
30043: 
30043: 
30043: 
30043: extern int *floor1_fit(vorbis_block *vb,vorbis_look_floor1 *look,
30043:                           const float *logmdct,   /* in */
30043:                           const float *logmask);
30043: extern int *floor1_interpolate_fit(vorbis_block *vb,vorbis_look_floor1 *look,
30043:                           int *A,int *B,
30043:                           int del);
30043: extern int floor1_encode(oggpack_buffer *opb,vorbis_block *vb,
30043:                   vorbis_look_floor1 *look,
30043:                   int *post,int *ilogmask);
16295: #endif
