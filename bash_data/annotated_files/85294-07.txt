78085: // newPset: returns an empty nsIUrlClassifierPrefixSet.
78085: function newPset() {
78085:   return Cc["@mozilla.org/url-classifier/prefixset;1"]
78085:            .createInstance(Ci.nsIUrlClassifierPrefixSet);
78085: }
78085: 
78085: // arrContains: returns true if |arr| contains the element |target|. Uses binary
78085: // search and requires |arr| to be sorted.
78085: function arrContains(arr, target) {
78085:   let start = 0;
78085:   let end = arr.length - 1;
78085:   let i = 0;
78085: 
78085:   while (end > start) {
78085:     i = start + (end - start >> 1);
78085:     let value = arr[i];
78085: 
78085:     if (value < target)
78085:       start = i+1;
78085:     else if (value > target)
78085:       end = i-1;
78085:     else
78085:       break;
78085:   }
78085:   if (start == end)
78085:     i = start;
78085: 
78085:   return (!(i < 0 || i >= arr.length) && arr[i] == target);
78085: }
78085: 
82207: function wrappedProbe(pset, prefix) {
82207:   let key = pset.getKey();
82207:   let dummy = {};
82207:   return pset.probe(prefix, key, dummy);
82207: };
82207: 
78085: // doRandomLookups: we use this to test for false membership with random input
78085: // over the range of prefixes (unsigned 32-bits integers).
78085: //    pset: a nsIUrlClassifierPrefixSet to test.
78085: //    prefixes: an array of prefixes supposed to make up the prefix set.
78085: //    N: number of random lookups to make.
78085: function doRandomLookups(pset, prefixes, N) {
78085:   for (let i = 0; i < N; i++) {
78085:     let randInt = prefixes[0];
78085:     while (arrContains(prefixes, randInt))
78085:       randInt = Math.floor(Math.random() * Math.pow(2, 32));
78085: 
82207:     do_check_false(wrappedProbe(pset, randInt));
78085:   }
78085: }
78085: 
78085: // doExpectedLookups: we use this to test expected membership.
78085: //    pset: a nsIUrlClassifierPrefixSet to test.
78085: //    prefixes:
78085: function doExpectedLookups(pset, prefixes, N) {
78085:   for (let i = 0; i < N; i++) {
78085:     prefixes.forEach(function (x) {
78085:       dump("Checking " + x + "\n");
82207:       do_check_true(wrappedProbe(pset, x));
78085:     });
78085:   }
78085: }
78085: 
78085: // testBasicPset: A very basic test of the prefix set to make sure that it
78085: // exists and to give a basic example of its use.
78085: function testBasicPset() {
78085:   let pset = Cc["@mozilla.org/url-classifier/prefixset;1"]
78085:                .createInstance(Ci.nsIUrlClassifierPrefixSet);
85294:   let prefixes = [2,50,100,2000,78000,1593203];
78085:   pset.setPrefixes(prefixes, prefixes.length);
78085: 
82207:   do_check_true(wrappedProbe(pset, 100));
82207:   do_check_false(wrappedProbe(pset, 100000));
82207:   do_check_true(wrappedProbe(pset, 1593203));
82207:   do_check_false(wrappedProbe(pset, 999));
82207:   do_check_false(wrappedProbe(pset, 0));
78085: }
78085: 
78085: function testDuplicates() {
78085:   let pset = Cc["@mozilla.org/url-classifier/prefixset;1"]
78085:                .createInstance(Ci.nsIUrlClassifierPrefixSet);
78085:   let prefixes = [1,1,2,2,2,3,3,3,3,3,3,5,6,6,7,7,9,9,9];
78085:   pset.setPrefixes(prefixes, prefixes.length);
78085: 
82207:   do_check_true(wrappedProbe(pset, 1));
82207:   do_check_true(wrappedProbe(pset, 2));
82207:   do_check_true(wrappedProbe(pset, 5));
82207:   do_check_true(wrappedProbe(pset, 9));
82207:   do_check_false(wrappedProbe(pset, 4));
82207:   do_check_false(wrappedProbe(pset, 8));
78085: }
78085: 
78085: function testSimplePset() {
78085:   let pset = newPset();
78085:   let prefixes = [1,2,100,400,123456789];
78085:   pset.setPrefixes(prefixes, prefixes.length);
78085: 
78085:   doRandomLookups(pset, prefixes, 100);
78085:   doExpectedLookups(pset, prefixes, 1);
78085: }
78085: 
78085: function testReSetPrefixes() {
78085:   let pset = newPset();
78085:   let prefixes = [1, 5, 100, 1000, 150000];
78085:   pset.setPrefixes(prefixes, prefixes.length);
78085: 
78085:   doExpectedLookups(pset, prefixes, 1);
78085: 
78085:   let secondPrefixes = [12, 50, 300, 2000, 5000, 200000];
78085:   pset.setPrefixes(secondPrefixes, secondPrefixes.length);
78085: 
78085:   doExpectedLookups(pset, secondPrefixes, 1);
78085:   for (let i = 0; i < prefixes.length; i++) {
82207:     do_check_false(wrappedProbe(pset, prefixes[i]));
78085:   }
78085: }
78085: 
78085: function testLargeSet() {
78085:   let N = 1000;
78085:   let arr = [];
78085: 
78085:   for (let i = 0; i < N; i++) {
78085:     let randInt = Math.floor(Math.random() * Math.pow(2, 32));
78085:     arr.push(randInt);
78085:   }
78085: 
78085:   arr.sort(function(x,y) x - y);
78085: 
78085:   let pset = newPset();
78085:   pset.setPrefixes(arr, arr.length);
78085: 
78085:   doExpectedLookups(pset, arr, 1);
78085:   doRandomLookups(pset, arr, 1000);
78085: }
78085: 
78087: function testTinySet() {
78087:   let pset = Cc["@mozilla.org/url-classifier/prefixset;1"]
78087:                .createInstance(Ci.nsIUrlClassifierPrefixSet);
78087:   let prefixes = [1];
78087:   pset.setPrefixes(prefixes, prefixes.length);
78087: 
82207:   do_check_true(wrappedProbe(pset, 1));
82207:   do_check_false(wrappedProbe(pset, 100000));
78087: 
78087:   prefixes = [];
78087:   pset.setPrefixes(prefixes, prefixes.length);
82207:   do_check_false(wrappedProbe(pset, 1));
78087: }
78087: 
78085: let tests = [testBasicPset,
78085:              testSimplePset,
78085:              testReSetPrefixes,
78085:              testLargeSet,
78087:              testDuplicates,
78087:              testTinySet];
78085: 
78085: function run_test() {
78085:   // None of the tests use |executeSoon| or any sort of callbacks, so we can
78085:   // just run them in succession.
78085:   for (let i = 0; i < tests.length; i++) {
78085:     dump("Running " + tests[i].name + "\n");
78085:     tests[i]();
78085:   }
78085: }
