    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 2001
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Stuart Parmenter <pavlov@netscape.com>
32424:  *   Bobby Holley <bobbyholley@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef imgRequest_h__
    1: #define imgRequest_h__
    1: 
    1: #include "imgIDecoderObserver.h"
    1: 
23007: #include "nsIChannelEventSink.h"
 5554: #include "nsIContentSniffer.h"
23007: #include "nsIInterfaceRequestor.h"
    1: #include "nsIRequest.h"
    1: #include "nsIProperties.h"
    1: #include "nsIStreamListener.h"
    1: #include "nsIURI.h"
 7703: #include "nsIPrincipal.h"
71556: #include "nsITimedChannel.h"
    1: 
 5554: #include "nsCategoryCache.h"
    1: #include "nsCOMPtr.h"
    1: #include "nsString.h"
 6229: #include "nsTObserverArray.h"
    1: #include "nsWeakReference.h"
35581: #include "ImageErrors.h"
35581: #include "imgIRequest.h"
51296: #include "imgStatusTracker.h"
48889: #include "nsIAsyncVerifyRedirectCallback.h"
    1: 
    1: class imgCacheValidator;
    1: 
    1: class imgRequestProxy;
18827: class imgCacheEntry;
42553: class imgMemoryReporter;
48321: class imgRequestNotifyRunnable;
    1: 
50546: namespace mozilla {
50546: namespace imagelib {
50546: class Image;
50546: } // namespace imagelib
50546: } // namespace mozilla
50546: 
32424: class imgRequest : public imgIDecoderObserver,
    1:                    public nsIStreamListener,
23007:                    public nsSupportsWeakReference,
23007:                    public nsIChannelEventSink,
48889:                    public nsIInterfaceRequestor,
48889:                    public nsIAsyncVerifyRedirectCallback
    1: {
    1: public:
    1:   imgRequest();
    1:   virtual ~imgRequest();
    1: 
    1:   NS_DECL_ISUPPORTS
    1: 
    1:   nsresult Init(nsIURI *aURI,
72903:                 nsIURI *aKeyURI,
    1:                 nsIRequest *aRequest,
23007:                 nsIChannel *aChannel,
18827:                 imgCacheEntry *aCacheEntry,
    1:                 void *aCacheId,
    1:                 void *aLoadId);
    1: 
48319:   // Callers must call imgRequestProxy::Notify later.
 6229:   nsresult AddProxy(imgRequestProxy *proxy);
    1: 
    1:   // aNotify==PR_FALSE still sends OnStopRequest.
    1:   nsresult RemoveProxy(imgRequestProxy *proxy, nsresult aStatus, PRBool aNotify);
    1: 
    1:   void SniffMimeType(const char *buf, PRUint32 len);
    1: 
    1:   // a request is "reusable" if it has already been loaded, or it is
    1:   // currently being loaded on the same event queue as the new request
    1:   // being made...
50546:   PRBool IsReusable(void *aCacheId);
    1: 
23007:   // Cancel, but also ensure that all work done in Init() is undone. Call this
23007:   // only when the channel has failed to open, and so calling Cancel() on it
23007:   // won't be sufficient.
23007:   void CancelAndAbort(nsresult aStatus);
23007: 
50546:   // Methods that get forwarded to the Image, or deferred until it's
32516:   // instantiated.
32516:   nsresult LockImage();
32516:   nsresult UnlockImage();
32516:   nsresult RequestDecode();
48320: 
59516:   inline void SetWindowID(PRUint64 aWindowId) {
59516:     mWindowId = aWindowId;
59516:   }
59516: 
59516:   inline PRUint64 WindowID() const {
59516:     return mWindowId;
59516:   }
59516: 
    1: private:
18827:   friend class imgCacheEntry;
    1:   friend class imgRequestProxy;
    1:   friend class imgLoader;
    1:   friend class imgCacheValidator;
48322:   friend class imgStatusTracker;
25078:   friend class imgCacheExpirationTracker;
48321:   friend class imgRequestNotifyRunnable;
    1: 
    1:   inline void SetLoadId(void *aLoadId) {
    1:     mLoadId = aLoadId;
    1:     mLoadTime = PR_Now();
    1:   }
    1:   void Cancel(nsresult aStatus);
48320:   void RemoveFromCache();
48320: 
    1:   nsresult GetURI(nsIURI **aURI);
23036:   nsresult GetKeyURI(nsIURI **aURI);
18557:   nsresult GetSecurityInfo(nsISupports **aSecurityInfo);
48320: 
    1:   inline const char *GetMimeType() const {
    1:     return mContentType.get();
    1:   }
    1:   inline nsIProperties *Properties() {
    1:     return mProperties;
    1:   }
    1: 
51297:   // Return the imgStatusTracker associated with this imgRequest.  It may live
51297:   // in |mStatusTracker| or in |mImage.mStatusTracker|, depending on whether
51297:   // mImage has been instantiated yet..
51297:   imgStatusTracker& GetStatusTracker();
51297:     
25078:   // Reset the cache entry after we've dropped our reference to it. Used by the
25078:   // imgLoader when our cache entry is re-requested after we've dropped our
25078:   // reference to it.
25078:   void SetCacheEntry(imgCacheEntry *entry);
25078: 
25078:   // Returns whether we've got a reference to the cache entry.
25078:   PRBool HasCacheEntry() const;
25078: 
    1:   // Return true if at least one of our proxies, excluding
    1:   // aProxyToIgnore, has an observer.  aProxyToIgnore may be null.
    1:   PRBool HaveProxyWithObserver(imgRequestProxy* aProxyToIgnore) const;
    1: 
    1:   // Return the priority of the underlying network request, or return
    1:   // PRIORITY_NORMAL if it doesn't support nsISupportsPriority.
    1:   PRInt32 Priority() const;
    1: 
    1:   // Adjust the priority of the underlying network request by the given delta
    1:   // on behalf of the given proxy.
    1:   void AdjustPriority(imgRequestProxy *aProxy, PRInt32 aDelta);
    1: 
25037:   // Return whether we've seen some data at this point
25037:   PRBool HasTransferredData() const { return mGotData; }
25037: 
26259:   // Set whether this request is stored in the cache. If it isn't, regardless
26259:   // of whether this request has a non-null mCacheEntry, this imgRequest won't
26259:   // try to update or modify the image cache.
26259:   void SetIsInCache(PRBool cacheable);
25748: 
32424:   // Update the cache entry size based on the image container
32424:   void UpdateCacheEntrySize();
32424: 
    1: public:
    1:   NS_DECL_IMGIDECODEROBSERVER
    1:   NS_DECL_IMGICONTAINEROBSERVER
    1:   NS_DECL_NSISTREAMLISTENER
    1:   NS_DECL_NSIREQUESTOBSERVER
23007:   NS_DECL_NSICHANNELEVENTSINK
23007:   NS_DECL_NSIINTERFACEREQUESTOR
48889:   NS_DECL_NSIASYNCVERIFYREDIRECTCALLBACK
    1: 
    1: private:
42553:   friend class imgMemoryReporter;
42553: 
    1:   nsCOMPtr<nsIRequest> mRequest;
72903:   // The original URI we were loaded with.
    1:   nsCOMPtr<nsIURI> mURI;
72903:   // The URI we are keyed on in the cache.
72903:   nsCOMPtr<nsIURI> mKeyURI;
 7703:   nsCOMPtr<nsIPrincipal> mPrincipal;
51296:   // Status-tracker -- transferred to mImage, when it gets instantiated
51296:   nsAutoPtr<imgStatusTracker> mStatusTracker;
50546:   nsRefPtr<mozilla::imagelib::Image> mImage;
    1:   nsCOMPtr<nsIProperties> mProperties;
18557:   nsCOMPtr<nsISupports> mSecurityInfo;
23007:   nsCOMPtr<nsIChannel> mChannel;
23007:   nsCOMPtr<nsIInterfaceRequestor> mPrevChannelSink;
    1: 
 9536:   nsTObserverArray<imgRequestProxy*> mObservers;
    1: 
71556:   nsCOMPtr<nsITimedChannel> mTimedChannel;
71556: 
    1:   nsCString mContentType;
    1: 
18827:   nsRefPtr<imgCacheEntry> mCacheEntry; /* we hold on to this to this so long as we have observers */
    1: 
    1:   void *mCacheId;
    1: 
    1:   void *mLoadId;
    1:   PRTime mLoadTime;
    1: 
    1:   imgCacheValidator *mValidator;
25748:   nsCategoryCache<nsIContentSniffer> mImageSniffers;
48889:   nsCOMPtr<nsIAsyncVerifyRedirectCallback> mRedirectCallback;
48889:   nsCOMPtr<nsIChannel> mNewRedirectChannel;
59516: 
59516:   // Originating outer window ID. Used for error reporting.
59516:   PRUint64 mWindowId;
59516: 
32516:   // Sometimes consumers want to do things before the image is ready. Let them,
32516:   // and apply the action when the image becomes available.
32516:   PRPackedBool mDecodeRequested : 1;
32516: 
25748:   PRPackedBool mIsMultiPartChannel : 1;
25748:   PRPackedBool mGotData : 1;
26259:   PRPackedBool mIsInCache : 1;
    1: };
    1: 
    1: #endif
