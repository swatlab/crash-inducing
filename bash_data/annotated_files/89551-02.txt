39629: <?xml version="1.0"?>
39629: <?xml-stylesheet href="chrome://global/skin" type="text/css"?>
39629: <?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
39629:                  type="text/css"?>
39629: <window title="Testing composition, text and query content events"
39629:   xmlns:html="http://www.w3.org/1999/xhtml"
39629:   xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
39629:   onunload="onunload();">
39629: 
39629:   <script type="application/javascript"
39629:           src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
39629:   <script type="application/javascript"
39629:           src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js" />
74292:   <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/ChromeUtils.js"></script>
39629: 
39629:   <panel id="panel" hidden="true"
39629:          orient="vertical"
39629:          onpopupshown="onPanelShown(event);"
39629:          onpopuphidden="onPanelHidden(event);">
39629:     <vbox id="vbox">
39629:       <textbox id="textbox" onfocus="onFocusPanelTextbox(event);"
39629:                multiline="true" cols="20" rows="4"/>
39629:     </vbox>
39629:   </panel>
39629: 
39629: <body  xmlns="http://www.w3.org/1999/xhtml">
39629: <p id="display">
40130: <div style="margin: 0; padding: 0; font-size: 24px;">Here is a text frame.</div>
40130: <textarea style="margin: 0;" id="textarea" cols="20" rows="4"></textarea><br/>
39629: <iframe id="iframe" width="300" height="150"
69672:         src="data:text/html,&lt;textarea id='textarea' cols='20' rows='4'&gt;&lt;/textarea&gt;"></iframe><br/>
69672: <input id="input" type="text"/><br/>
39629: </p>
39629: <div id="content" style="display: none">
39629:   
39629: </div>
39629: <pre id="test">
39629: </pre>
39629: </body>
39629: 
39629: <script class="testbody" type="application/javascript">
39629: <![CDATA[
39629: 
39629: window.opener.wrappedJSObject.SimpleTest.waitForFocus(runTest, window);
39629: 
39629: function ok(aCondition, aMessage)
39629: {
39629:   window.opener.wrappedJSObject.SimpleTest.ok(aCondition, aMessage);
39629: }
39629: 
39629: function is(aLeft, aRight, aMessage)
39629: {
39629:   window.opener.wrappedJSObject.SimpleTest.is(aLeft, aRight, aMessage);
39629: }
39629: 
39629: function isnot(aLeft, aRight, aMessage)
39629: {
39629:   window.opener.wrappedJSObject.SimpleTest.isnot(aLeft, aRight, aMessage);
39629: }
39629: 
39629: function finish()
39629: {
39629:   window.close();
39629: }
39629: 
39629: function onunload()
39629: {
39629:   window.opener.wrappedJSObject.SimpleTest.finish();
39629: }
39629: 
39629: var textarea = document.getElementById("textarea");
39629: var panel = document.getElementById("panel");
39629: var textbox = document.getElementById("textbox");
39629: var iframe = document.getElementById("iframe");
69672: var input = document.getElementById("input");
39629: var textareaInFrame;
39629: 
39629: const nsIDOMWindowUtils = Components.interfaces.nsIDOMWindowUtils;
39629: 
39629: const kIsWin = (navigator.platform.indexOf("Win") == 0);
39629: const kIsMac = (navigator.platform.indexOf("Mac") == 0);
39629: 
89551: const kLFLen = kIsWin ? 2 : 1;
89551: 
40130: function checkQueryContentResult(aResult, aMessage)
39629: {
39629:   ok(aResult, aMessage + ": the result is null");
39629:   if (!aResult) {
39629:     return false;
39629:   }
39629:   ok(aResult.succeeded, aMessage + ": the query content failed");
39629:   return aResult.succeeded;
39629: }
39629: 
39629: function checkContent(aExpectedText, aMessage, aID)
39629: {
39629:   var textContent = synthesizeQueryTextContent(0, 100);
39629:   if (!checkQueryContentResult(textContent, aMessage +
39629:                                ": synthesizeQueryTextContent " + aID)) {
39629:     return false;
39629:   }
39629:   is(textContent.text, aExpectedText,
39629:      aMessage + ": composition string is wrong" + aID);
39629:   return textContent.text == aExpectedText;
39629: }
39629: 
39629: function checkSelection(aExpectedOffset, aExpectedText, aMessage, aID)
39629: {
39629:   var selectedText = synthesizeQuerySelectedText();
39629:   if (!checkQueryContentResult(selectedText, aMessage +
39629:                                ": synthesizeQuerySelectedText " + aID)) {
39629:     return false;
39629:   }
39629:   is(selectedText.offset, aExpectedOffset,
39629:      aMessage + ": selection offset is wrong" + aID);
39629:   is(selectedText.text, aExpectedText,
39629:      aMessage + ": selected text is wrong" + aID);
39629:   return selectedText.offset == aExpectedOffset &&
39629:          selectedText.text == aExpectedText;
39629: }
39629: 
39629: function checkRect(aRect, aExpectedRect, aMessage)
39629: {
39629:   is(aRect.left, aExpectedRect.left, aMessage + ": left is wrong");
39629:   is(aRect.top, aExpectedRect.top, aMessage + " top is wrong");
39629:   is(aRect.width, aExpectedRect.width, aMessage + ": width is wrong");
39629:   is(aRect.height, aExpectedRect.height, aMessage + ": height is wrong");
39629:   return aRect.left == aExpectedRect.left &&
39629:          aRect.top == aExpectedRect.top &&
39629:          aRect.width == aExpectedRect.width &&
39629:          aRect.height == aExpectedRect.height;
39629: }
39629: 
39629: function checkRectContainsRect(aRect, aContainer, aMessage)
39629: {
39629:   var container = { left: Math.ceil(aContainer.left),
39629:                     top:  Math.ceil(aContainer.top),
39629:                     width: Math.floor(aContainer.width),
39629:                     height: Math.floor(aContainer.height) };
39629: 
39629:   var ret = container.left <= aRect.left &&
39629:             container.top <= aRect.top &&
39629:             container.left + container.width >= aRect.left + aRect.width &&
39629:             container.top + container.height >= aRect.top + aRect.height;
39629:   ret = ret && aMessage;
39629:   ok(ret, aMessage + " container={ left=" + container.left + ", top=" +
39629:      container.top + ", width=" + container.width + ", height=" +
39629:      container.height + " } rect={ left=" + aRect.left + ", top=" + aRect.top +
39629:      ", width=" + aRect.width + ", height=" + aRect.height + " }");
39629:   return ret;
39629: }
39629: 
58194: function runUndoRedoTest()
58194: {
58194:   textarea.value = "";
58194:   textarea.focus();
58194: 
58194:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
58194: 
58194:   // input raw characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u306D" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u306D",
58194:         "clauses":
58194:         [
58194:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u306D\u3053" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u306D\u3053",
58194:         "clauses":
58194:         [
58194:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 2, "length": 0 }
58194:     });
58194: 
58194:   // convert
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u732B" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u732B",
58194:         "clauses":
58194:         [
58194:           { "length": 1,
58194:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
58194:   // commit
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u732B",
58194:         "clauses":
58194:         [
58194:           { "length": 0, "attr": 0 }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
58194:   // end composition
78627:   synthesizeComposition({ type: "compositionend", data: "\u732B" });
58194: 
58194:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
58194: 
58194:   // input raw characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u307E" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u307E",
58194:         "clauses":
58194:         [
58194:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
58194:   // cancel the composition
78627:   synthesizeComposition({ type: "compositionupdate", data: "" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "",
58194:         "clauses":
58194:         [
58194:           { "length": 0, "attr": 0 }
58194:         ]
58194:       },
58194:       "caret": { "start": 0, "length": 0 }
58194:     });
58194: 
58194:   // end composition
78627:   synthesizeComposition({ type: "compositionend", data: "" });
58194: 
58194:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
58194: 
58194:   // input raw characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3080" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3080",
58194:         "clauses":
58194:         [
58194:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3080\u3059" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3080\u3059",
58194:         "clauses":
58194:         [
58194:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 2, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3080\u3059\u3081" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3080\u3059\u3081",
58194:         "clauses":
58194:         [
58194:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 3, "length": 0 }
58194:     });
58194: 
58194:   // convert
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u5A18" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u5A18",
58194:         "clauses":
58194:         [
58194:           { "length": 1,
58194:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
58194:   // commit
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u5A18",
58194:         "clauses":
58194:         [
58194:           { "length": 0, "attr": 0 }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
58194:   // end composition
78627:   synthesizeComposition({ type: "compositionend", data: "\u5A18" });
58194: 
58194:   synthesizeKey(" ", {});
58194:   synthesizeKey("m", {});
58194:   synthesizeKey("e", {});
58194:   synthesizeKey("a", {});
58194:   synthesizeKey("n", {});
58194:   synthesizeKey("t", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("s", {});
58194:   synthesizeKey(" ", {});
58194:   synthesizeKey("\"", {});
58194:   synthesizeKey("c", {});
58194:   synthesizeKey("a", {});
58194:   synthesizeKey("t", {});
58194:   synthesizeKey("-", {});
58194:   synthesizeKey("g", {});
58194:   synthesizeKey("i", {});
58194:   synthesizeKey("r", {});
58194:   synthesizeKey("l", {});
58194:   synthesizeKey("\"", {});
58194:   synthesizeKey(".", {});
58194:   synthesizeKey(" ", {});
58194:   synthesizeKey("VK_SHIFT", { type: "keydown" });
58194:   synthesizeKey("S", { shiftKey: true });
58194:   synthesizeKey("VK_SHIFT", { type: "keyup" });
58194:   synthesizeKey("h", {});
58194:   synthesizeKey("e", {});
58194:   synthesizeKey(" ", {});
58194:   synthesizeKey("i", {});
58194:   synthesizeKey("s", {});
58194:   synthesizeKey(" ", {});
58194:   synthesizeKey("a", {});
58194:   synthesizeKey(" ", {});
58194: 
58194:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
58194: 
58194:   // input raw characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3088" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3088",
58194:         "clauses":
58194:         [
58194:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 1, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3088\u3046" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3088\u3046",
58194:         "clauses":
58194:         [
58194:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 2, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3088\u3046\u304b" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3088\u3046\u304b",
58194:         "clauses":
58194:         [
58194:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 3, "length": 0 }
58194:     });
58194: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3088\u3046\u304b\u3044" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u3088\u3046\u304b\u3044",
58194:         "clauses":
58194:         [
58194:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
58194:         ]
58194:       },
58194:       "caret": { "start": 4, "length": 0 }
58194:     });
58194: 
58194:   // convert
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u5996\u602a" });
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u5996\u602a",
58194:         "clauses":
58194:         [
58194:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
58194:         ]
58194:       },
58194:       "caret": { "start": 2, "length": 0 }
58194:     });
58194: 
58194:   // commit
58194:   synthesizeText(
58194:     { "composition":
58194:       { "string": "\u5996\u602a",
58194:         "clauses":
58194:         [
58194:           { "length": 0, "attr": 0 }
58194:         ]
58194:       },
58194:       "caret": { "start": 2, "length": 0 }
58194:     });
58194: 
58194:   // end composition
78627:   synthesizeComposition({ type: "compositionend", data: "\u5996\u602a" });
58194: 
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194:   synthesizeKey("VK_BACK_SPACE", {});
58194: 
58194:   var i = 0;
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\".",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(20, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\". She is a \u5996\u602A",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(32, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\". She is a ",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(30, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 mean",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(7, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 meant",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(8, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(2, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("\u732B",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(1, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   // XXX this is unexpected behavior, see bug 258291
58194:   if (!checkContent("\u732B",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(1, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(0, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true});
58194: 
58194:   if (!checkContent("",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(0, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(1, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   // XXX this is unexpected behavior, see bug 258291
58194:   if (!checkContent("\u732B",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(1, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(2, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 meant",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(8, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 mean",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(7, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\". She is a ",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(30, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\". She is a \u5996\u602A",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(32, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\".",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(20, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: 
58194:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
58194: 
58194:   if (!checkContent("\u732B\u5A18 means \"cat-girl\".",
58194:                     "runUndoRedoTest", "#" + ++i) ||
58194:       !checkSelection(20, "", "runUndoRedoTest", "#" + i)) {
58194:     return;
58194:   }
58194: }
58194: 
39629: function runCompositionTest()
39629: {
39629:   textarea.value = "";
39629:   textarea.focus();
39629:   var caretRects = [];
39629: 
39629:   var caretRect = synthesizeQueryCaretRect(0);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #0")) {
39629:     return false;
39629:   }
39629:   caretRects[0] = caretRect;
39629: 
39629:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
39629: 
39629:   // input first character
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3089" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089",
39629:         "clauses":
39629:         [
39629:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089", "runCompositionTest", "#1-1") ||
39629:       !checkSelection(1, "", "runCompositionTest", "#1-1")) {
39629:     return;
39629:   }
39629: 
39629:   caretRect = synthesizeQueryCaretRect(1);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #1-1")) {
39629:     return false;
39629:   }
39629:   caretRects[1] = caretRect;
39629: 
39629:   // input second character
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3089\u30FC" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC",
39629:         "clauses":
39629:         [
39629:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC", "runCompositionTest", "#1-2") ||
39629:       !checkSelection(2, "", "runCompositionTest", "#1-2")) {
39629:     return;
39629:   }
39629: 
39629:   caretRect = synthesizeQueryCaretRect(2);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #1-2")) {
39629:     return false;
39629:   }
39629:   caretRects[2] = caretRect;
39629: 
39629:   isnot(caretRects[2].left, caretRects[1].left,
39629:         "runCompositionTest: caret isn't moved (#1-2)");
39629:   is(caretRects[2].top, caretRects[1].top,
39629:      "runCompositionTest: caret is moved to another line (#1-2)");
39629:   is(caretRects[2].width, caretRects[1].width,
39629:      "runCompositionTest: caret width is wrong (#1-2)");
39629:   is(caretRects[2].height, caretRects[1].height,
39629:      "runCompositionTest: caret width is wrong (#1-2)");
39629: 
39629:   // input third character
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081",
39629:         "clauses":
39629:         [
39629:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 3, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081", "runCompositionTest", "#1-3") ||
39629:       !checkSelection(3, "", "runCompositionTest", "#1-3")) {
39629:     return;
39629:   }
39629: 
39629:   caretRect = synthesizeQueryCaretRect(3);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #1-3")) {
39629:     return false;
39629:   }
39629:   caretRects[3] = caretRect;
39629: 
39629:   isnot(caretRects[3].left, caretRects[2].left,
39629:         "runCompositionTest: caret isn't moved (#1-3)");
39629:   is(caretRects[3].top, caretRects[2].top,
39629:      "runCompositionTest: caret is moved to another line (#1-3)");
39629:   is(caretRects[3].width, caretRects[2].width,
39629:      "runCompositionTest: caret width is wrong (#1-3)");
39629:   is(caretRects[3].height, caretRects[2].height,
39629:      "runCompositionTest: caret height is wrong (#1-3)");
39629: 
39629:   // moves the caret left
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081",
39629:         "clauses":
39629:         [
39629:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081", "runCompositionTest", "#1-3-1") ||
39629:       !checkSelection(2, "", "runCompositionTest", "#1-3-1")) {
39629:     return;
39629:   }
39629: 
39629: 
39629:   caretRect = synthesizeQueryCaretRect(2);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #1-3-1")) {
39629:     return false;
39629:   }
39629: 
39629:   is(caretRect.left, caretRects[2].left,
39629:      "runCompositionTest: caret rects are different (#1-3-1, left)");
39629:   is(caretRect.top, caretRects[2].top,
39629:      "runCompositionTest: caret rects are different (#1-3-1, top)");
39629:   // by bug 335359, the caret width depends on the right side's character.
39629:   is(caretRect.width, caretRects[2].width + 1,
39629:      "runCompositionTest: caret rects are different (#1-3-1, width)");
39629:   is(caretRect.height, caretRects[2].height,
39629:      "runCompositionTest: caret rects are different (#1-3-1, height)");
39629: 
39629:   // moves the caret left
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081",
39629:         "clauses":
39629:         [
39629:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081", "runCompositionTest", "#1-3-2") ||
39629:       !checkSelection(1, "", "runCompositionTest", "#1-3-2")) {
39629:     return;
39629:   }
39629: 
39629: 
39629:   caretRect = synthesizeQueryCaretRect(1);
39629:   if (!checkQueryContentResult(caretRect,
39629:         "runCompositionTest: synthesizeQueryCaretRect #1-3-2")) {
39629:     return false;
39629:   }
39629: 
39629:   is(caretRect.left, caretRects[1].left,
39629:      "runCompositionTest: caret rects are different (#1-3-2, left)");
39629:   is(caretRect.top, caretRects[1].top,
39629:      "runCompositionTest: caret rects are different (#1-3-2, top)");
39629:   // by bug 335359, the caret width depends on the right side's character.
39629:   is(caretRect.width, caretRects[1].width + 1,
39629:      "runCompositionTest: caret rects are different (#1-3-2, width)");
39629:   is(caretRect.height, caretRects[1].height,
39629:      "runCompositionTest: caret rects are different (#1-3-2, height)");
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093",
39629:         "clauses":
39629:         [
39629:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 4, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093", "runCompositionTest", "#1-4") ||
39629:       !checkSelection(4, "", "runCompositionTest", "#1-4")) {
39629:     return;
39629:   }
39629: 
39629: 
39629:   // backspace
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081",
39629:         "clauses":
39629:         [
39629:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 3, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081", "runCompositionTest", "#1-5") ||
39629:       !checkSelection(3, "", "runCompositionTest", "#1-5")) {
39629:     return;
39629:   }
39629: 
39629:   // re-input
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093",
39629:         "clauses":
39629:         [
39629:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 4, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093", "runCompositionTest", "#1-6") ||
39629:       !checkSelection(4, "", "runCompositionTest", "#1-6")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093\u3055",
39629:         "clauses":
39629:         [
39629:           { "length": 5, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 5, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055", "runCompositionTest", "#1-7") ||
39629:       !checkSelection(5, "", "runCompositionTest", "#1-7")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044",
39629:         "clauses":
39629:         [
39629:           { "length": 6, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 6, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044", "runCompositionTest", "#1-8") ||
39629:       !checkSelection(6, "", "runCompositionTest", "#1-8")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053",
39629:         "clauses":
39629:         [
39629:           { "length": 7, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 7, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044\u3053", "runCompositionTest", "#1-8") ||
39629:       !checkSelection(7, "", "runCompositionTest", "#1-8")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 8, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 8, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046",
39629:                     "runCompositionTest", "#1-9") ||
39629:       !checkSelection(8, "", "runCompositionTest", "#1-9")) {
39629:     return;
39629:   }
39629: 
39629:   // convert
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
39629:         "clauses":
39629:         [
39629:           { "length": 4,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT },
39629:           { "length": 2,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_CONVERTEDTEXT }
39629:         ]
39629:       },
39629:       "caret": { "start": 4, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
39629:                     "runCompositionTest", "#1-10") ||
39629:       !checkSelection(6, "", "runCompositionTest", "#1-10")) {
39629:     return;
39629:   }
39629: 
39629:   // change the selected clause
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
39629:         "clauses":
39629:         [
39629:           { "length": 4,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_CONVERTEDTEXT },
39629:           { "length": 2,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
39629:         ]
39629:       },
39629:       "caret": { "start": 6, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
39629:                     "runCompositionTest", "#1-11") ||
39629:       !checkSelection(6, "", "runCompositionTest", "#1-11")) {
39629:     return;
39629:   }
39629: 
39629:   // reset clauses
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 5,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT },
39629:           { "length": 3,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_CONVERTEDTEXT }
39629:         ]
39629:       },
39629:       "caret": { "start": 5, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046",
39629:                     "runCompositionTest", "#1-12") ||
39629:       !checkSelection(8, "", "runCompositionTest", "#1-12")) {
39629:     return;
39629:   }
39629: 
39629: 
39629:   var textRect1 = synthesizeQueryTextRect(0, 1);
39629:   var textRect2 = synthesizeQueryTextRect(1, 1);
39629:   if (!checkQueryContentResult(textRect1,
39629:         "runCompositionTest: synthesizeQueryTextRect #1-12-1") ||
39629:       !checkQueryContentResult(textRect2,
39629:         "runCompositionTest: synthesizeQueryTextRect #1-12-2")) {
39629:     return false;
39629:   }
39629: 
39629:   // commit the composition string
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 0, "attr": 0 }
39629:         ]
39629:       },
39629:       "caret": { "start": 8, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046",
39629:                     "runCompositionTest", "#1-13") ||
39629:       !checkSelection(8, "", "runCompositionTest", "#1-13")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionend",
78627:                           data: "\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046" });
39629: 
39629:   var textRect3 = synthesizeQueryTextRect(0, 1);
39629:   var textRect4 = synthesizeQueryTextRect(1, 1);
39629: 
39629:   if (!checkQueryContentResult(textRect3,
39629:         "runCompositionTest: synthesizeQueryTextRect #1-13-1") ||
39629:       !checkQueryContentResult(textRect4,
39629:         "runCompositionTest: synthesizeQueryTextRect #1-13-2")) {
39629:     return false;
39629:   }
39629: 
39629:   checkRect(textRect3, textRect1, "runCompositionTest: textRect #1-13-1");
39629:   checkRect(textRect4, textRect2, "runCompositionTest: textRect #1-13-2");
39629: 
39629:   // restart composition
78627:   synthesizeComposition({ type: "compositionstart" });
39629: 
39629:   // input characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3057" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3057",
39629:         "clauses":
39629:         [
39629:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046\u3057",
39629:                     "runCompositionTest", "#2-1") ||
39629:       !checkSelection(8 + 1, "", "runCompositionTest", "#2-1")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3058" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3058",
39629:         "clauses":
39629:         [
39629:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046\u3058",
39629:                     "runCompositionTest", "#2-2") ||
39629:       !checkSelection(8 + 1, "", "runCompositionTest", "#2-2")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3058\u3087" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3058\u3087",
39629:         "clauses":
39629:         [
39629:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046\u3058\u3087",
39629:                     "runCompositionTest", "#2-3") ||
39629:       !checkSelection(8 + 2, "", "runCompositionTest", "#2-3")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3058\u3087\u3046" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3058\u3087\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 3, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046\u3058\u3087\u3046",
39629:                     "runCompositionTest", "#2-4") ||
39629:       !checkSelection(8 + 3, "", "runCompositionTest", "#2-4")) {
39629:     return;
39629:   }
39629: 
39629:   // commit the composition string
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3058\u3087\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 0, "attr": 0 }
39629:         ]
39629:       },
39629:       "caret": { "start": 3, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3055\u884C\u3053\u3046\u3058\u3087\u3046",
39629:                     "runCompositionTest", "#2-4") ||
39629:       !checkSelection(8 + 3, "", "runCompositionTest", "#2-4")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionend", data: "\u3058\u3087\u3046" });
39629: 
39629:   // set selection
39629:   var selectionSetTest = synthesizeSelectionSet(4, 7, false);
39629:   ok(selectionSetTest, "runCompositionTest: selectionSetTest failed");
39629: 
39629:   if (!checkSelection(4, "\u3055\u884C\u3053\u3046\u3058\u3087\u3046", "runCompositionTest", "#3-1")) {
39629:     return;
39629:   }
39629: 
39629:   // start composition with selection
78627:   synthesizeComposition({ type: "compositionstart" });
39629: 
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u304A" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u304A",
39629:         "clauses":
39629:         [
39629:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u304A",
39629:                     "runCompositionTest", "#3-2") ||
39629:       !checkSelection(4 + 1, "", "runCompositionTest", "#3-2")) {
39629:     return;
39629:   }
39629: 
39629:   // remove the composition string
78627:   synthesizeComposition({ type: "compositionupdate", data: "" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "",
39629:         "clauses":
39629:         [
39629:           { "length": 0, "attr": 0 }
39629:         ]
39629:       },
39629:       "caret": { "start": 0, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3",
39629:                     "runCompositionTest", "#3-3") ||
39629:       !checkSelection(4, "", "runCompositionTest", "#3-3")) {
39629:     return;
39629:   }
39629: 
39629:   // re-input the composition string
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3046" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3046",
39629:         "clauses":
39629:         [
39629:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 1, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u3046",
39629:                     "runCompositionTest", "#3-4") ||
39629:       !checkSelection(4 + 1, "", "runCompositionTest", "#3-4")) {
39629:     return;
39629:   }
39629: 
39629:   // cancel the composition
78627:   synthesizeComposition({ type: "compositionupdate", data: "" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "",
39629:         "clauses":
39629:         [
39629:           { "length": 0, "attr": 0 }
39629:         ]
39629:       },
39629:       "caret": { "start": 0, "length": 0 }
39629:     });
39629: 
78627:   synthesizeComposition({ type: "compositionend", data: "" });
39629: 
39629:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3",
39629:                     "runCompositionTest", "#3-5") ||
39629:       !checkSelection(4, "", "runCompositionTest", "#3-5")) {
39629:     return;
39629:   }
39629: }
39629: 
78628: function runCompositionEventTest()
78628: {
78628:   const kDescription = "runCompositionEventTest: ";
86433:   const kEvents = ["compositionstart", "compositionupdate", "compositionend",
86433:                    "input"];
78628: 
78628:   input.value = "";
78628:   input.focus();
78628: 
78628:   var windowEventCounts = [], windowEventData = [], windowEventLocale = [];
78628:   var inputEventCounts = [], inputEventData = [], inputEventLocale = [];
78628:   var preventDefault = false;
78628:   var stopPropagation = false;
78628: 
78628:   function initResults()
78628:   {
78628:     for (var i = 0; i < kEvents.length; i++) {
78628:       windowEventCounts[kEvents[i]] = 0;
78628:       windowEventData[kEvents[i]] = "";
78628:       windowEventLocale[kEvents[i]] = "";
78628:       inputEventCounts[kEvents[i]] = 0;
78628:       inputEventData[kEvents[i]] = "";
78628:       inputEventLocale[kEvents[i]] = "";
78628:     }
78628:   }
78628: 
78628:   function compositionEventHandlerForWindow(aEvent)
78628:   {
78628:     windowEventCounts[aEvent.type]++;
78628:     windowEventData[aEvent.type] = aEvent.data;
78628:     windowEventLocale[aEvent.type] = aEvent.locale;
78628:     if (preventDefault) {
78628:       aEvent.preventDefault();
78628:     }
78628:     if (stopPropagation) {
78628:       aEvent.stopPropagation();
78628:     }
78628:   }
78628: 
86433:   function formEventHandlerForWindow(aEvent)
86433:   {
87219:     ok(aEvent.isTrusted, "input events must be trusted events");
86433:     windowEventCounts[aEvent.type]++;
86433:     windowEventData[aEvent.type] = input.value;
86433:   }
86433: 
78628:   function compositionEventHandlerForInput(aEvent)
78628:   {
78628:     inputEventCounts[aEvent.type]++;
78628:     inputEventData[aEvent.type] = aEvent.data;
78628:     inputEventLocale[aEvent.type] = aEvent.locale;
78628:     if (preventDefault) {
78628:       aEvent.preventDefault();
78628:     }
78628:     if (stopPropagation) {
78628:       aEvent.stopPropagation();
78628:     }
78628:   }
78628: 
86433:   function formEventHandlerForInput(aEvent)
86433:   {
86433:     inputEventCounts[aEvent.type]++;
86433:     inputEventData[aEvent.type] = input.value;
86433:   }
86433: 
78628:   window.addEventListener("compositionstart", compositionEventHandlerForWindow,
78628:                           true, true);
78628:   window.addEventListener("compositionend", compositionEventHandlerForWindow,
78628:                           true, true);
78628:   window.addEventListener("compositionupdate", compositionEventHandlerForWindow,
78628:                           true, true);
86433:   window.addEventListener("input", formEventHandlerForWindow,
86433:                           true, true);
78628: 
78628:   input.addEventListener("compositionstart", compositionEventHandlerForInput,
78628:                          true, true);
78628:   input.addEventListener("compositionend", compositionEventHandlerForInput,
78628:                          true, true);
78628:   input.addEventListener("compositionupdate", compositionEventHandlerForInput,
78628:                          true, true);
86433:   input.addEventListener("input", formEventHandlerForInput,
86433:                          true, true);
78628: 
78628:   // test for normal case
78628:   initResults();
78628: 
78628:   synthesizeComposition({ type: "compositionstart" });
78628:   synthesizeComposition({ type: "compositionupdate", data: "\u3089" });
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u3089",
78628:         "clauses":
78628:         [
78628:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by window #1");
78628:   is(windowEventData["compositionstart"], "",
78628:      kDescription + "data of compositionstart isn't empty (window) #1");
78628:   is(windowEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (window) #1");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by input #1");
78628:   is(inputEventData["compositionstart"], "",
78628:      kDescription + "data of compositionstart isn't empty (input) #1");
78628:   is(inputEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (input) #1");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by window #1");
78628:   is(windowEventData["compositionupdate"], "\u3089",
78628:      kDescription + "data of compositionupdate doesn't match (window) #1");
78628:   is(windowEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (window) #1");
78628:   is(inputEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by input #1");
78628:   is(inputEventData["compositionupdate"], "\u3089",
78628:      kDescription + "data of compositionupdate doesn't match (input) #1");
78628:   is(inputEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (input) #1");
78628: 
78628:   is(windowEventCounts["compositionend"], 0,
78628:      kDescription + "compositionend has been handled by window #1");
78628:   is(inputEventCounts["compositionend"], 0,
78628:      kDescription + "compositionend has been handled by input #1");
78628: 
86433:   is(windowEventCounts["input"], 1,
86433:      kDescription + "input hasn't been handled by window #1");
86433:   is(windowEventData["input"], "\u3089",
86433:      kDescription + "value of input element wasn't modified (window) #1");
86433:   is(inputEventCounts["input"], 1,
86433:      kDescription + "input hasn't been handled by input #1");
86433:   is(inputEventData["input"], "\u3089",
86433:      kDescription + "value of input element wasn't modified (input) #1");
86433: 
78628:   synthesizeComposition({ type: "compositionupdate", data: "\u3089\u30FC" });
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u3089\u30FC",
78628:         "clauses":
78628:         [
78628:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
78628:         ]
78628:       },
78628:       "caret": { "start": 2, "length": 0 }
78628:     });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart has been handled more than once by window #2");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart has been handled more than once by input #2");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate hasn't been handled by window #2");
78628:   is(windowEventData["compositionupdate"], "\u3089\u30FC",
78628:      kDescription + "data of compositionupdate doesn't match (window) #2");
78628:   is(windowEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (window) #2");
78628:   is(inputEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate hasn't been handled by input #2");
78628:   is(inputEventData["compositionupdate"], "\u3089\u30FC",
78628:      kDescription + "data of compositionupdate doesn't match (input) #2");
78628:   is(inputEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (input) #2");
78628: 
78628:   is(windowEventCounts["compositionend"], 0,
78628:      kDescription + "compositionend has been handled during composition by window #2");
78628:   is(inputEventCounts["compositionend"], 0,
78628:      kDescription + "compositionend has been handled during composition by input #2");
78628: 
86433:   is(windowEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by window #2");
86433:   is(windowEventData["input"], "\u3089\u30FC",
86433:      kDescription + "value of input element wasn't modified (window) #2");
86433:   is(inputEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by input #2");
86433:   is(inputEventData["input"], "\u3089\u30FC",
86433:      kDescription + "value of input element wasn't modified (input) #2");
86433: 
78628:   // text event shouldn't cause composition update, e.g., at committing.
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u3089\u30FC",
78628:         "clauses":
78628:         [
78628:           { "length": 0, "attr": 0 }
78628:         ]
78628:       },
78628:       "caret": { "start": 2, "length": 0 }
78628:     });
78628: 
78628:   synthesizeComposition({ type: "compositionend", data: "\u3089\u30FC" });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart has been handled more than once by window #3");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart has been handled more than once by input #3");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate has been fired unexpectedly on window #3");
78628:   is(inputEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate has been fired unexpectedly on input #3");
78628: 
78628:   is(windowEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by window #3");
78628:   is(windowEventData["compositionend"], "\u3089\u30FC",
78628:      kDescription + "data of compositionend doesn't match (window) #3");
78628:   is(windowEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (window) #3");
78628:   is(inputEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by input #3");
78628:   is(inputEventData["compositionend"], "\u3089\u30FC",
78628:      kDescription + "data of compositionend doesn't match (input) #3");
78628:   is(inputEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (input) #3");
78628: 
86433:   is(windowEventCounts["input"], 3,
86433:      kDescription + "input hasn't been handled by window #3");
86433:   is(windowEventData["input"], "\u3089\u30FC",
86433:      kDescription + "value of input element wasn't modified (window) #3");
86433:   is(inputEventCounts["input"], 3,
86433:      kDescription + "input hasn't been handled by input #3");
86433:   is(inputEventData["input"], "\u3089\u30FC",
86433:      kDescription + "value of input element wasn't modified (input) #3");
86433: 
78628:   // select the second character, then, data of composition start should be
78628:   // the selected character.
78628:   initResults();
78628:   synthesizeKey("VK_LEFT", { shiftKey: true });
78628: 
78628:   synthesizeComposition({ type: "compositionstart" });
78628: 
78628:   synthesizeComposition({ type: "compositionupdate", data: "\u3089" });
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u3089",
78628:         "clauses":
78628:         [
78628:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u3089",
78628:         "clauses":
78628:         [
78628:           { "length": 0, "attr": 0 }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeComposition({ type: "compositionend", data: "\u3089" });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by window #4");
78628:   is(windowEventData["compositionstart"], "\u30FC",
78628:      kDescription + "data of compositionstart is empty (window) #4");
78628:   is(windowEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (window) #4");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by input #4");
78628:   is(inputEventData["compositionstart"], "\u30FC",
78628:      kDescription + "data of compositionstart is empty (input) #4");
78628:   is(inputEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (input) #4");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by window #4");
78628:   is(windowEventData["compositionupdate"], "\u3089",
78628:      kDescription + "data of compositionupdate doesn't match (window) #4");
78628:   is(windowEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (window) #4");
78628:   is(inputEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by input #4");
78628:   is(inputEventData["compositionupdate"], "\u3089",
78628:      kDescription + "data of compositionupdate doesn't match (input) #4");
78628:   is(inputEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (input) #4");
78628: 
78628:   is(windowEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by window #4");
78628:   is(windowEventData["compositionend"], "\u3089",
78628:      kDescription + "data of compositionend doesn't match (window) #4");
78628:   is(windowEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (window) #4");
78628:   is(inputEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by input #4");
78628:   is(inputEventData["compositionend"], "\u3089",
78628:      kDescription + "data of compositionend doesn't match (input) #4");
78628:   is(inputEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (input) #4");
78628: 
86433:   is(windowEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by window #4");
86433:   is(windowEventData["input"], "\u3089\u3089",
86433:      kDescription + "value of input element wasn't modified (window) #4");
86433:   is(inputEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by input #4");
86433:   is(inputEventData["input"], "\u3089\u3089",
86433:      kDescription + "value of input element wasn't modified (input) #4");
86433: 
78628:   // preventDefault() should effect nothing.
78628:   preventDefault = true;
78628: 
78628:   initResults();
78628:   synthesizeKey("A", { accelKey: true }); // Select All
78628: 
78628:   synthesizeComposition({ type: "compositionstart" });
78628: 
78628:   synthesizeComposition({ type: "compositionupdate", data: "\u306D" });
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u306D",
78628:         "clauses":
78628:         [
78628:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u306D",
78628:         "clauses":
78628:         [
78628:           { "length": 0, "attr": 0 }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeComposition({ type: "compositionend", data: "\u306D" });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by window #5");
78628:   is(windowEventData["compositionstart"], "\u3089\u3089",
78628:      kDescription + "data of compositionstart is empty (window) #5");
78628:   is(windowEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (window) #5");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by input #5");
78628:   is(inputEventData["compositionstart"], "\u3089\u3089",
78628:      kDescription + "data of compositionstart is empty (input) #5");
78628:   is(inputEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty (input) #5");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by window #5");
78628:   is(windowEventData["compositionupdate"], "\u306D",
78628:      kDescription + "data of compositionupdate doesn't match (window) #5");
78628:   is(windowEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (window) #5");
78628:   is(inputEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by input #5");
78628:   is(inputEventData["compositionupdate"], "\u306D",
78628:      kDescription + "data of compositionupdate doesn't match (input) #5");
78628:   is(inputEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty (input) #5");
78628: 
78628:   is(windowEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by window #5");
78628:   is(windowEventData["compositionend"], "\u306D",
78628:      kDescription + "data of compositionend doesn't match (window) #5");
78628:   is(windowEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (window) #5");
78628:   is(inputEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by input #5");
78628:   is(inputEventData["compositionend"], "\u306D",
78628:      kDescription + "data of compositionend doesn't match (input) #5");
78628:   is(inputEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty (input) #5");
78628: 
86433:   is(windowEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by window #5");
86433:   is(windowEventData["input"], "\u306D",
86433:      kDescription + "value of input element wasn't modified (window) #5");
86433:   is(inputEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by input #5");
86433:   is(inputEventData["input"], "\u306D",
86433:      kDescription + "value of input element wasn't modified (input) #5");
86433: 
78628:   prevnetDefault = false;
78628: 
78628:   // stopPropagation() should effect nothing (except event count)
78628:   stopPropagation = true;
78628: 
78628:   initResults();
78628:   synthesizeKey("A", { accelKey: true }); // Select All
78628: 
78628:   synthesizeComposition({ type: "compositionstart" });
78628: 
78628:   synthesizeComposition({ type: "compositionupdate", data: "\u306E" });
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u306E",
78628:         "clauses":
78628:         [
78628:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeText(
78628:     { "composition":
78628:       { "string": "\u306E",
78628:         "clauses":
78628:         [
78628:           { "length": 0, "attr": 0 }
78628:         ]
78628:       },
78628:       "caret": { "start": 1, "length": 0 }
78628:     });
78628: 
78628:   synthesizeComposition({ type: "compositionend", data: "\u306E" });
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by window #6");
78628:   is(windowEventData["compositionstart"], "\u306D",
78628:      kDescription + "data of compositionstart is empty #6");
78628:   is(windowEventLocale["compositionstart"], "",
78628:      kDescription + "locale of compositionstart isn't empty #6");
78628:   is(inputEventCounts["compositionstart"], 0,
78628:      kDescription + "compositionstart has been handled by input #6");
78628: 
78628:   is(windowEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by window #6");
78628:   is(windowEventData["compositionupdate"], "\u306E",
78628:      kDescription + "data of compositionupdate doesn't match #6");
78628:   is(windowEventLocale["compositionupdate"], "",
78628:      kDescription + "locale of compositionupdate isn't empty #6");
78628:   is(inputEventCounts["compositionupdate"], 0,
78628:      kDescription + "compositionupdate has been handled by input #6");
78628: 
78628:   is(windowEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by window #6");
78628:   is(windowEventData["compositionend"], "\u306E",
78628:      kDescription + "data of compositionend doesn't match #6");
78628:   is(windowEventLocale["compositionend"], "",
78628:      kDescription + "locale of compositionend isn't empty #6");
78628:   is(inputEventCounts["compositionend"], 0,
78628:      kDescription + "compositionend has been handled by input #6");
78628: 
86433:   is(windowEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by window #6");
86433:   is(windowEventData["input"], "\u306E",
86433:      kDescription + "value of input element wasn't modified (window) #6");
86433:   is(inputEventCounts["input"], 2,
86433:      kDescription + "input hasn't been handled by input #6");
86433:   is(inputEventData["input"], "\u306E",
86433:      kDescription + "value of input element wasn't modified (input) #6");
86433: 
78628:   stopPropagation = false;
78628: 
78628:   // create event and dispatch it.
78628:   initResults();
78628: 
78628:   input.value = "value of input";
78628:   synthesizeKey("A", { accelKey: true }); // Select All
78628: 
78628:   var compositionstart = document.createEvent("CompositionEvent");
78628:   compositionstart.initCompositionEvent("compositionstart",
78628:                                         true, true, document.defaultView,
78628:                                         "start data", "start locale");
78628:   is(compositionstart.type, "compositionstart",
78628:      kDescription + "type doesn't match #7");
78628:   is(compositionstart.data, "start data",
78628:      kDescription + "data doesn't match #7");
78628:   is(compositionstart.locale, "start locale",
78628:      kDescription + "locale doesn't match #7");
78628:   is(compositionstart.detail, 0,
78628:      kDescription + "detail isn't 0 #7");
78628: 
78628:   input.dispatchEvent(compositionstart);
78628: 
78628:   is(windowEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by window #7");
78628:   is(windowEventData["compositionstart"], "start data",
78628:      kDescription + "data of compositionstart was changed (window) #7");
78628:   is(windowEventLocale["compositionstart"], "start locale",
78628:      kDescription + "locale of compositionstart was changed (window) #7");
78628:   is(inputEventCounts["compositionstart"], 1,
78628:      kDescription + "compositionstart hasn't been handled by input #7");
78628:   is(inputEventData["compositionstart"], "start data",
78628:      kDescription + "data of compositionstart was changed (input) #7");
78628:   is(inputEventLocale["compositionstart"], "start locale",
78628:      kDescription + "locale of compositionstart was changed (input) #7");
78628: 
78628:   is(input.value, "value of input",
78628:      kDescription + "input value was changed #7");
78628: 
78628:   var compositionupdate1 = document.createEvent("compositionevent");
78628:   compositionupdate1.initCompositionEvent("compositionupdate",
78628:                                           true, false, document.defaultView,
78628:                                           "composing string", "composing locale");
78628:   is(compositionupdate1.type, "compositionupdate",
78628:      kDescription + "type doesn't match #8");
78628:   is(compositionupdate1.data, "composing string",
78628:      kDescription + "data doesn't match #8");
78628:   is(compositionupdate1.locale, "composing locale",
78628:      kDescription + "locale doesn't match #8");
78628:   is(compositionupdate1.detail, 0,
78628:      kDescription + "detail isn't 0 #8");
78628: 
78628:   input.dispatchEvent(compositionupdate1);
78628: 
78628:   is(windowEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by window #8");
78628:   is(windowEventData["compositionupdate"], "composing string",
78628:      kDescription + "data of compositionupdate was changed (window) #8");
78628:   is(windowEventLocale["compositionupdate"], "composing locale",
78628:      kDescription + "locale of compositionupdate was changed (window) #8");
78628:   is(inputEventCounts["compositionupdate"], 1,
78628:      kDescription + "compositionupdate hasn't been handled by input #8");
78628:   is(inputEventData["compositionupdate"], "composing string",
78628:      kDescription + "data of compositionupdate was changed (input) #8");
78628:   is(inputEventLocale["compositionupdate"], "composing locale",
78628:      kDescription + "locale of compositionupdate was changed (input) #8");
78628: 
78628:   is(input.value, "value of input",
78628:      kDescription + "input value was changed #8");
78628: 
78628:   var compositionupdate2 = document.createEvent("compositionEvent");
78628:   compositionupdate2.initCompositionEvent("compositionupdate",
78628:                                           true, false, document.defaultView,
78628:                                           "commit string", "commit locale");
78628:   is(compositionupdate2.type, "compositionupdate",
78628:      kDescription + "type doesn't match #9");
78628:   is(compositionupdate2.data, "commit string",
78628:      kDescription + "data doesn't match #9");
78628:   is(compositionupdate2.locale, "commit locale",
78628:      kDescription + "locale doesn't match #9");
78628:   is(compositionupdate2.detail, 0,
78628:      kDescription + "detail isn't 0 #9");
78628: 
78628:   input.dispatchEvent(compositionupdate2);
78628: 
78628:   is(windowEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate hasn't been handled by window #9");
78628:   is(windowEventData["compositionupdate"], "commit string",
78628:      kDescription + "data of compositionupdate was changed (window) #9");
78628:   is(windowEventLocale["compositionupdate"], "commit locale",
78628:      kDescription + "locale of compositionupdate was changed (window) #9");
78628:   is(inputEventCounts["compositionupdate"], 2,
78628:      kDescription + "compositionupdate hasn't been handled by input #9");
78628:   is(inputEventData["compositionupdate"], "commit string",
78628:      kDescription + "data of compositionupdate was changed (input) #9");
78628:   is(inputEventLocale["compositionupdate"], "commit locale",
78628:      kDescription + "locale of compositionupdate was changed (input) #9");
78628: 
78628:   is(input.value, "value of input",
78628:      kDescription + "input value was changed #9");
78628: 
78628:   var compositionend = document.createEvent("Compositionevent");
78628:   compositionend.initCompositionEvent("compositionend",
78628:                                       true, false, document.defaultView,
78628:                                       "end data", "end locale");
78628:   is(compositionend.type, "compositionend",
78628:      kDescription + "type doesn't match #10");
78628:   is(compositionend.data, "end data",
78628:      kDescription + "data doesn't match #10");
78628:   is(compositionend.locale, "end locale",
78628:      kDescription + "locale doesn't match #10");
78628:   is(compositionend.detail, 0,
78628:      kDescription + "detail isn't 0 #10");
78628: 
78628:   input.dispatchEvent(compositionend);
78628: 
78628:   is(windowEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by window #10");
78628:   is(windowEventData["compositionend"], "end data",
78628:      kDescription + "data of compositionend was changed (window) #10");
78628:   is(windowEventLocale["compositionend"], "end locale",
78628:      kDescription + "locale of compositionend was changed (window) #10");
78628:   is(inputEventCounts["compositionend"], 1,
78628:      kDescription + "compositionend hasn't been handled by input #10");
78628:   is(inputEventData["compositionend"], "end data",
78628:      kDescription + "data of compositionend was changed (input) #10");
78628:   is(inputEventLocale["compositionend"], "end locale",
78628:      kDescription + "locale of compositionend was changed (input) #10");
78628: 
78628:   is(input.value, "value of input",
78628:      kDescription + "input value was changed #10");
78628: 
78628:   window.removeEventListener("compositionstart",
78628:                              compositionEventHandlerForWindow, true);
78628:   window.removeEventListener("compositionend",
78628:                              compositionEventHandlerForWindow, true);
78628:   window.removeEventListener("compositionupdate",
78628:                              compositionEventHandlerForWindow, true);
86433:   window.removeEventListener("input",
86433:                              formEventHandlerForWindow, true);
78628: 
78628:   input.removeEventListener("compositionstart",
78628:                             compositionEventHandlerForInput, true);
78628:   input.removeEventListener("compositionend",
78628:                             compositionEventHandlerForInput, true);
78628:   input.removeEventListener("compositionupdate",
78628:                             compositionEventHandlerForInput, true);
86433:   input.removeEventListener("input",
86433:                             formEventHandlerForInput, true);
78628: }
78628: 
39629: function runCharAtPointTest(aFocusedEditor, aTargetName)
39629: {
39629:   aFocusedEditor.value = "This is a test of the\nContent Events";
39629:                        // 012345678901234567890  12345678901234
39629:                        // 0         1         2           3    
39629: 
78628:   aFocusedEditor.focus();
78628: 
39629:   const kNone = -1;
39629:   const kTestingOffset   = [     0, 10,    20, 21 + kLFLen, 34 + kLFLen];
39629:   const kLeftSideOffset  = [ kNone,  9,    19,       kNone, 33 + kLFLen];
39629:   const kRightSideOffset = [     1, 11, kNone, 22 + kLFLen,       kNone];
39629: 
39629:   var editorRect = synthesizeQueryEditorRect();
39629:   if (!checkQueryContentResult(editorRect,
39629:         "runCharAtPointTest (" + aTargetName + "): editorRect")) {
39629:     return;
39629:   }
39629: 
39629:   for (var i = 0; i < kTestingOffset.length; i++) {
39629:     var textRect = synthesizeQueryTextRect(kTestingOffset[i], 1);
39629:     if (!checkQueryContentResult(textRect,
40130:           "runCharAtPointTest (" + aTargetName + "): textRect: i=" + i)) {
39629:       continue;
39629:     }
39629: 
39629:     checkRectContainsRect(textRect, editorRect,
39629:       "runCharAtPointTest (" + aTargetName +
39629:       "): the text rect isn't in the editor");
39629: 
39629:     // Test #1, getting same character rect by the point near the top-left.
39629:     var charAtPt1 = synthesizeCharAtPoint(textRect.left + 1,
39629:                                           textRect.top + 1);
39629:     if (checkQueryContentResult(charAtPt1,
40130:           "runCharAtPointTest (" + aTargetName + "): charAtPt1: i=" + i)) {
39629:       ok(!charAtPt1.notFound,
39629:          "runCharAtPointTest (" + aTargetName + "): charAtPt1 isn't found: i=" + i);
39629:       if (!charAtPt1.notFound) {
39629:         is(charAtPt1.offset, kTestingOffset[i],
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt1 offset is wrong: i=" + i);
39629:         checkRect(charAtPt1, textRect, "runCharAtPointTest (" + aTargetName +
39629:                   "): charAtPt1 left is wrong: i=" + i);
39629:       }
39629:     }
39629: 
39629:     // Test #2, getting same character rect by the point near the bottom-right.
39629:     var charAtPt2 = synthesizeCharAtPoint(textRect.left + textRect.width - 2,
39629:                                           textRect.top + textRect.height - 2);
39629:     if (checkQueryContentResult(charAtPt2,
40130:           "runCharAtPointTest (" + aTargetName + "): charAtPt2: i=" + i)) {
39629:       ok(!charAtPt2.notFound,
39629:          "runCharAtPointTest (" + aTargetName + "): charAtPt2 isn't found: i=" + i);
39629:       if (!charAtPt2.notFound) {
39629:         is(charAtPt2.offset, kTestingOffset[i],
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt2 offset is wrong: i=" + i);
39629:         checkRect(charAtPt2, textRect, "runCharAtPointTest (" + aTargetName +
39629:                   "): charAtPt1 left is wrong: i=" + i);
39629:       }
39629:     }
39629: 
39629:     // Test #3, getting left character offset.
39629:     var charAtPt3 = synthesizeCharAtPoint(textRect.left - 2,
39629:                                           textRect.top + 1);
39629:     if (checkQueryContentResult(charAtPt3,
40130:           "runCharAtPointTest (" + aTargetName + "): charAtPt3: i=" + i)) {
39629:       is(charAtPt3.notFound, kLeftSideOffset[i] == kNone,
39629:          kLeftSideOffset[i] == kNone ?
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt3 is found: i=" + i :
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt3 isn't found: i=" + i);
39629:       if (!charAtPt3.notFound) {
39629:         is(charAtPt3.offset, kLeftSideOffset[i],
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt3 offset is wrong: i=" + i);
39629:       }
39629:     }
39629: 
39629:     // Test #4, getting right character offset.
39629:     var charAtPt4 = synthesizeCharAtPoint(textRect.left + textRect.width + 1,
39629:                                           textRect.top + textRect.height - 2);
39629:     if (checkQueryContentResult(charAtPt4,
40130:           "runCharAtPointTest (" + aTargetName + "): charAtPt4: i=" + i)) {
39629:       is(charAtPt4.notFound, kRightSideOffset[i] == kNone,
39629:          kRightSideOffset[i] == kNone ?
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt4 is found: i=" + i :
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt4 isn't found: i=" + i);
39629:       if (!charAtPt4.notFound) {
39629:         is(charAtPt4.offset, kRightSideOffset[i],
39629:            "runCharAtPointTest (" + aTargetName + "): charAtPt4 offset is wrong: i=" + i);
39629:       }
39629:     }
39629:   }
39629: }
39629: 
40130: function runCharAtPointAtOutsideTest()
40130: {
40130:   textarea.focus();
40130:   textarea.value = "some text";
40130:   var editorRect = synthesizeQueryEditorRect();
40130:   if (!checkQueryContentResult(editorRect,
40130:         "runCharAtPointAtOutsideTest: editorRect")) {
40130:     return;
40130:   }
40130:   // Check on a text node which is at the outside of editor.
40130:   var charAtPt = synthesizeCharAtPoint(editorRect.left + 20,
40130:                                        editorRect.top - 10);
40130:   if (checkQueryContentResult(charAtPt,
40130:         "runCharAtPointAtOutsideTest: charAtPt")) {
40130:     ok(charAtPt.notFound,
40130:        "runCharAtPointAtOutsideTest: charAtPt is found on outside of editor");
40130:   }
40130: }
40130: 
89551: function runBug722639Test()
89551: {
89551:   textarea.focus();
89551:   textarea.value = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
89551:   textarea.value += textarea.value;
89551:   textarea.value += textarea.value; // 80 characters
89551: 
89551:   var firstLine = synthesizeQueryTextRect(0, 1);
89551:   if (!checkQueryContentResult(firstLine,
89551:         "runBug722639Test: firstLine")) {
89551:     return;
89551:   }
89551:   var secondLine = synthesizeQueryTextRect(kLFLen, 1);
89551:   if (!checkQueryContentResult(secondLine,
89551:         "runBug722639Test: secondLine")) {
89551:     return;
89551:   }
89551:   var lineHeight = secondLine.top -  firstLine.top;
89551:   ok(lineHeight > 0,
89551:      "runBug722639Test: lineHeight must be positive");
89551:   is(secondLine.left, firstLine.left,
89551:      "runBug722639Test: the left value must be always same value");
89551:   var previousTop = secondLine.top;
89551:   for (var i = 2; i < textarea.value.length; i++) {
89551:     var currentLine = synthesizeQueryTextRect(kLFLen * i, 1);
89551:     if (!checkQueryContentResult(currentLine,
89551:            "runBug722639Test: " + i + "th currentLine")) {
89551:       return;
89551:     }
89551:     // NOTE: the top position may be 1px larger or smaller than other lines
89551:     //       due to sub pixel positioning.
89551:     if (Math.abs(currentLine.top - (previousTop + lineHeight)) <= 1) {
89551:       ok(true, "runBug722639Test: " + i + "th line's top is expected");
89551:     } else {
89551:       is(currentLine.top, previousTop + lineHeight,
89551:          "runBug722639Test: " + i + "th line's top is unexpected");
89551:     }
89551:     is(currentLine.left, firstLine.left,
89551:        "runBug722639Test: " + i + "th line's left is unexpected");
89551:     previousTop = currentLine.top;
89551:   }
89551: }
89551: 
39629: function runTestOnAnotherContext(aPanelOrFrame, aFocusedEditor, aTestName)
39629: {
39629:   aFocusedEditor.value = "";
39629: 
39629:   var editorRect = synthesizeQueryEditorRect();
39629:   if (!checkQueryContentResult(editorRect, aTestName + ": editorRect")) {
39629:     return;
39629:   }
39629: 
39629:   var r = aPanelOrFrame.getBoundingClientRect();
39629:   var parentRect = { "left": r.left, "top": r.top, "width": r.right - r.left,
39629:                      "height": r.bottom - r.top };
39629:   checkRectContainsRect(editorRect, parentRect, aTestName +
39629:                         ": the editor rect coordinates are wrong");
39629: 
39629:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
39629: 
39629:   // input characters
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3078\u3093\u3057\u3093" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u3078\u3093\u3057\u3093",
39629:         "clauses":
39629:         [
39629:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
39629:         ]
39629:       },
39629:       "caret": { "start": 4, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u3078\u3093\u3057\u3093", aTestName, "#1-1") ||
39629:       !checkSelection(4, "", aTestName, "#1-1")) {
39629:     return;
39629:   }
39629: 
39629:   // convert them #1
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u8FD4\u4FE1" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u8FD4\u4FE1",
39629:         "clauses":
39629:         [
39629:           { "length": 2,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u8FD4\u4FE1", aTestName, "#1-2") ||
39629:       !checkSelection(2, "", aTestName, "#1-2")) {
39629:     return;
39629:   }
39629: 
39629:   // convert them #2
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u5909\u8EAB" });
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u5909\u8EAB",
39629:         "clauses":
39629:         [
39629:           { "length": 2,
39629:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u5909\u8EAB", aTestName, "#1-3") ||
39629:       !checkSelection(2, "", aTestName, "#1-3")) {
39629:     return;
39629:   }
39629: 
39629:   // commit them
39629:   synthesizeText(
39629:     { "composition":
39629:       { "string": "\u5909\u8EAB",
39629:         "clauses":
39629:         [
39629:           { "length": 0, "attr": 0 }
39629:         ]
39629:       },
39629:       "caret": { "start": 2, "length": 0 }
39629:     });
39629: 
39629:   if (!checkContent("\u5909\u8EAB", aTestName, "#1-4") ||
39629:       !checkSelection(2, "", aTestName, "#1-4")) {
39629:     return;
39629:   }
39629: 
78627:   synthesizeComposition({ type: "compositionend", data: "\u5909\u8EAB" });
39629: 
39629:   is(aFocusedEditor.value, "\u5909\u8EAB",
39629:      aTestName + ": composition isn't in the focused editor");
39629:   if (aFocusedEditor.value != "\u5909\u8EAB") {
39629:     return;
39629:   }
39629: 
39629:   var textRect = synthesizeQueryTextRect(0, 1);
39629:   var caretRect = synthesizeQueryCaretRect(2);
39629:   if (!checkQueryContentResult(textRect,
39629:                                aTestName + ": synthesizeQueryTextRect") ||
39629:       !checkQueryContentResult(caretRect,
39629:                                aTestName + ": synthesizeQueryCaretRect")) {
39629:     return;
39629:   }
39629:   checkRectContainsRect(textRect, editorRect, aTestName + ":testRect");
39629:   checkRectContainsRect(caretRect, editorRect, aTestName + ":caretRect");
39629: }
39629: 
39629: function runFrameTest()
39629: {
39629:   var textareaInFrame = iframe.contentDocument.getElementById("textarea");
39629:   textareaInFrame.focus();
39629:   runTestOnAnotherContext(iframe, textareaInFrame, "runFrameTest");
39629:   runCharAtPointTest(textareaInFrame, "textarea in the iframe");
39629: }
39629: 
39629: var gPanelShown = false;
39629: var gPanelFocused = false;
39629: function onPanelShown(aEvent)
39629: {
39629:   gPanelShown = true;
39629:   textbox.focus();
39629:   setTimeout(doPanelTest, 0);
39629: }
39629: 
39629: function onFocusPanelTextbox(aEvent)
39629: {
39629:   gPanelFocused = true;
39629:   setTimeout(doPanelTest, 0);
39629: }
39629: 
39629: var gIsPanelHiding = false;
39629: var gIsRunPanelTestInternal = false;
39629: function doPanelTest()
39629: {
39629:   if (!gPanelFocused || !gPanelShown) {
39629:     return;
39629:   }
39629:   if (gIsRunPanelTestInternal) {
39629:     return;
39629:   }
39629:   gIsRunPanelTestInternal = true;
39629:   runTestOnAnotherContext(panel, textbox, "runPanelTest");
39629:   runCharAtPointTest(textbox, "textbox in the panel");
39629:   gIsPanelHiding = true;
39629:   panel.hidePopup();
39629: }
39629: 
39629: function onPanelHidden(aEvent)
39629: {
39629:   panel.hidden = true;
39629:   ok(gIsPanelHiding, "runPanelTest: the panel is hidden unexpectedly");
39629:   finish();
39629: }
39629: 
39629: function runPanelTest()
39629: {
39629:   panel.hidden = false;
39629:   panel.openPopupAtScreen(window.screenX + window.outerWidth, 0, false);
39629: }
39629: 
69672: function runMaxLengthTest()
69672: {
69672:   input.maxLength = 1;
69672:   input.value = "";
69672:   input.focus();
69672: 
69672:   var kDesc ="runMaxLengthTest";
69672: 
69672:   // start composition
78627:   synthesizeComposition({ type: "compositionstart" });
69672: 
69672:   // input first character
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3089" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089",
69672:         "clauses":
69672:         [
69672:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 1, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089", kDesc, "#1-1") ||
69672:       !checkSelection(1, "", kDesc, "#1-1")) {
69672:     return;
69672:   }
69672: 
69672:   // input second character
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3089\u30FC" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC",
69672:         "clauses":
69672:         [
69672:           { "length": 2, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 2, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC", kDesc, "#1-2") ||
69672:       !checkSelection(2, "", kDesc, "#1-2")) {
69672:     return;
69672:   }
69672: 
69672:   // input third character
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081",
69672:         "clauses":
69672:         [
69672:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 3, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081", kDesc, "#1-3") ||
69672:       !checkSelection(3, "", kDesc, "#1-3")) {
69672:     return;
69672:   }
69672: 
69672:   // input fourth character
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093",
69672:         "clauses":
69672:         [
69672:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 4, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093", kDesc, "#1-4") ||
69672:       !checkSelection(4, "", kDesc, "#1-4")) {
69672:     return;
69672:   }
69672: 
69672: 
69672:   // backspace
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081",
69672:         "clauses":
69672:         [
69672:           { "length": 3, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 3, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081", kDesc, "#1-5") ||
69672:       !checkSelection(3, "", kDesc, "#1-5")) {
69672:     return;
69672:   }
69672: 
69672:   // re-input
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093",
69672:         "clauses":
69672:         [
69672:           { "length": 4, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 4, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093", kDesc, "#1-6") ||
69672:       !checkSelection(4, "", kDesc, "#1-6")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093\u3055",
69672:         "clauses":
69672:         [
69672:           { "length": 5, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 5, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055", kDesc, "#1-7") ||
69672:       !checkSelection(5, "", kDesc, "#1-7")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044",
69672:         "clauses":
69672:         [
69672:           { "length": 6, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 6, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044", kDesc, "#1-8") ||
69672:       !checkSelection(6, "", kDesc, "#1-8")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053",
69672:         "clauses":
69672:         [
69672:           { "length": 7, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 7, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044\u3053",
69672:                     kDesc, "#1-8") ||
69672:       !checkSelection(7, "", kDesc, "#1-8")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046",
69672:         "clauses":
69672:         [
69672:           { "length": 8, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 8, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u3089\u30FC\u3081\u3093\u3055\u3044\u3053\u3046",
69672:                     kDesc, "#1-9") ||
69672:       !checkSelection(8, "", kDesc, "#1-9")) {
69672:     return;
69672:   }
69672: 
69672:   // convert
78627:   synthesizeComposition({ type: "compositionupdate",
78627:                           data: "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
69672:         "clauses":
69672:         [
69672:           { "length": 4,
69672:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT },
69672:           { "length": 2,
69672:             "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_CONVERTEDTEXT }
69672:         ]
69672:       },
69672:       "caret": { "start": 4, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8", kDesc, "#1-10") ||
69672:       !checkSelection(6, "", kDesc, "#1-10")) {
69672:     return;
69672:   }
69672: 
69672:   // commit the composition string
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8",
69672:         "clauses":
69672:         [
69672:           { "length": 0, "attr": 0 }
69672:         ]
69672:       },
69672:       "caret": { "start": 8, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u30E9", kDesc, "#1-11") ||
69672:       !checkSelection(1, "", kDesc, "#1-11")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionend",
78627:                           data: "\u30E9\u30FC\u30E1\u30F3\u6700\u9AD8" });
69672: 
69672:   // restart composition
78627:   synthesizeComposition({ type: "compositionstart" });
69672: 
69672:   // input characters
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3057" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3057",
69672:         "clauses":
69672:         [
69672:           { "length": 1, "attr": nsIDOMWindowUtils.COMPOSITION_ATTR_RAWINPUT }
69672:         ]
69672:       },
69672:       "caret": { "start": 1, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u30E9\u3057", kDesc, "#2-1") ||
69672:       !checkSelection(1 + 1, "", kDesc, "#2-1")) {
69672:     return;
69672:   }
69672: 
69672:   // commit the composition string
78627:   synthesizeComposition({ type: "compositionupdate", data: "\u3058" });
69672:   synthesizeText(
69672:     { "composition":
69672:       { "string": "\u3058",
69672:         "clauses":
69672:         [
69672:           { "length": 0, "attr": 0 }
69672:         ]
69672:       },
69672:       "caret": { "start": 1, "length": 0 }
69672:     });
69672: 
69672:   if (!checkContent("\u30E9", kDesc, "#2-2") ||
69672:       !checkSelection(1 + 0, "", kDesc, "#2-2")) {
69672:     return;
69672:   }
69672: 
78627:   synthesizeComposition({ type: "compositionend", data: "\u3058" });
69672: 
69672:   // Undo
69672:   synthesizeKey("Z", {accelKey: true});
69672: 
69672:   // XXX this is unexpected behavior, see bug 258291
69672:   if (!checkContent("\u30E9", kDesc, "#3-1") ||
69672:       !checkSelection(1 + 0, "", kDesc, "#3-1")) {
69672:     return;
69672:   }
69672: 
69672:   // Undo
69672:   synthesizeKey("Z", {accelKey: true});
69672:   if (!checkContent("", kDesc, "#3-2") ||
69672:       !checkSelection(0, "", kDesc, "#3-2")) {
69672:     return;
69672:   }
69672: 
69672:   // Redo
69672:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
69672:   if (!checkContent("\u30E9", kDesc, "#3-3") ||
69672:       !checkSelection(1, "", kDesc, "#3-3")) {
69672:     return;
69672:   }
69672: 
69672:   // Redo
69672:   synthesizeKey("Z", {accelKey: true, shiftKey: true});
69672:   if (!checkContent("\u30E9", kDesc, "#3-4") ||
69672:       !checkSelection(1 + 0, "", kDesc, "#3-4")) {
69672:     return;
69672:   }
69672: }
69672: 
39629: function runTest()
39629: {
58194:   runUndoRedoTest();
39629:   runCompositionTest();
78628:   runCompositionEventTest();
39629:   runCharAtPointTest(textarea, "textarea in the document");
40130:   runCharAtPointAtOutsideTest();
89551:   runBug722639Test();
39629:   runFrameTest();
39629:   runPanelTest();
69672:   runMaxLengthTest();
39629: }
39629: 
39629: ]]>
39629: </script>
39629: 
39629: </window>
