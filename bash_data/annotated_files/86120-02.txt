43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
43113:  *
43113:  * ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is nsCacheService.h, released
43113:  * February 10, 2001.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Gordon Sheridan  <gordon@netscape.com>
43113:  *   Patrick C. Beard <beard@netscape.com>
43113:  *   Darin Fisher     <darin@netscape.com>
43113:  *   Ehsan Akhgari    <ehsan.akhgari@gmail.com>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: 
43113: #ifndef _nsCacheService_h_
43113: #define _nsCacheService_h_
43113: 
43113: #include "nsICacheService.h"
43113: #include "nsCacheSession.h"
43113: #include "nsCacheDevice.h"
43113: #include "nsCacheEntry.h"
43113: 
43113: #include "prthread.h"
43113: #include "nsIObserver.h"
43113: #include "nsString.h"
43113: #include "nsTArray.h"
64576: #include "mozilla/CondVar.h"
64576: #include "mozilla/Mutex.h"
43113: 
43113: class nsCacheRequest;
43113: class nsCacheProfilePrefObserver;
43113: class nsDiskCacheDevice;
43113: class nsMemoryCacheDevice;
43113: class nsOfflineCacheDevice;
43113: class nsCacheServiceAutoLock;
43113: 
43113: 
43113: /******************************************************************************
43113:  *  nsCacheService
43113:  ******************************************************************************/
43113: 
43113: class nsCacheService : public nsICacheService
43113: {
43113: public:
43113:     NS_DECL_ISUPPORTS
43113:     NS_DECL_NSICACHESERVICE
43113:     
43113:     nsCacheService();
43113:     virtual ~nsCacheService();
43113: 
43113:     // Define a Create method to be used with a factory:
46998:     static nsresult
43113:     Create(nsISupports* outer, const nsIID& iid, void* *result);
43113: 
43113: 
43113:     /**
43113:      * Methods called by nsCacheSession
43113:      */
43113:     static nsresult  OpenCacheEntry(nsCacheSession *           session,
43113:                                     const nsACString &         key,
43113:                                     nsCacheAccessMode          accessRequested,
79445:                                     bool                       blockingMode,
43113:                                     nsICacheListener *         listener,
43113:                                     nsICacheEntryDescriptor ** result);
43113: 
43113:     static nsresult  EvictEntriesForSession(nsCacheSession *   session);
43113: 
43113:     static nsresult  IsStorageEnabledForPolicy(nsCacheStoragePolicy  storagePolicy,
79445:                                                bool *              result);
43113: 
43113:     /**
43113:      * Methods called by nsCacheEntryDescriptor
43113:      */
43113: 
43113:     static void      CloseDescriptor(nsCacheEntryDescriptor * descriptor);
43113: 
43113:     static nsresult  GetFileForEntry(nsCacheEntry *         entry,
43113:                                      nsIFile **             result);
43113: 
43113:     static nsresult  OpenInputStreamForEntry(nsCacheEntry *     entry,
43113:                                              nsCacheAccessMode  mode,
43113:                                              PRUint32           offset,
43113:                                              nsIInputStream **  result);
43113: 
43113:     static nsresult  OpenOutputStreamForEntry(nsCacheEntry *     entry,
43113:                                               nsCacheAccessMode  mode,
43113:                                               PRUint32           offset,
43113:                                               nsIOutputStream ** result);
43113: 
43113:     static nsresult  OnDataSizeChange(nsCacheEntry * entry, PRInt32 deltaSize);
43113: 
43113:     static nsresult  SetCacheElement(nsCacheEntry * entry, nsISupports * element);
43113: 
43113:     static nsresult  ValidateEntry(nsCacheEntry * entry);
43113: 
84841:     static PRInt32   CacheCompressionLevel();
43113: 
43113:     /**
43113:      * Methods called by any cache classes
43113:      */
43113: 
43113:     static
43113:     nsCacheService * GlobalInstance()   { return gService; }
43113: 
74006:     static
74006:     PRInt64 MemoryDeviceSize();
74006:     
43113:     static nsresult  DoomEntry(nsCacheEntry * entry);
43113: 
79445:     static bool      IsStorageEnabledForPolicy_Locked(nsCacheStoragePolicy policy);
43113: 
43113:     // This method may be called to release an object while the cache service
43113:     // lock is being held.  If a non-null target is specified and the target
43113:     // does not correspond to the current thread, then the release will be
43113:     // proxied to the specified target.  Otherwise, the object will be added to
43113:     // the list of objects to be released when the cache service is unlocked.
43113:     static void      ReleaseObject_Locked(nsISupports *    object,
43113:                                           nsIEventTarget * target = nsnull);
43113: 
53961:     static nsresult DispatchToCacheIOThread(nsIRunnable* event);
53961: 
61001:     // Calling this method will block the calling thread until all pending
61001:     // events on the cache-io thread has finished. The calling thread must
61001:     // hold the cache-lock
61001:     static nsresult SyncWithCacheIOThread();
61001: 
53961: 
43113:     /**
43113:      * Methods called by nsCacheProfilePrefObserver
43113:      */
79445:     static void      OnProfileShutdown(bool cleanse);
43113:     static void      OnProfileChanged();
43113: 
79445:     static void      SetDiskCacheEnabled(bool    enabled);
43113:     // Sets the disk cache capacity (in kilobytes)
43113:     static void      SetDiskCacheCapacity(PRInt32  capacity);
78231:     // Set max size for a disk-cache entry (in KB). -1 disables limit up to
78231:     // 1/8th of disk cache size
72584:     static void      SetDiskCacheMaxEntrySize(PRInt32  maxSize);
78231:     // Set max size for a memory-cache entry (in kilobytes). -1 disables
78231:     // limit up to 90% of memory cache size
72584:     static void      SetMemoryCacheMaxEntrySize(PRInt32  maxSize);
43113: 
79445:     static void      SetOfflineCacheEnabled(bool    enabled);
43113:     // Sets the offline cache capacity (in kilobytes)
43113:     static void      SetOfflineCacheCapacity(PRInt32  capacity);
43113: 
43113:     static void      SetMemoryCache();
43113: 
84841:     static void      SetCacheCompressionLevel(PRInt32 level);
84841: 
43113:     static void      OnEnterExitPrivateBrowsing();
43113: 
80586:     // Starts smart cache size computation if disk device is available
86120:     static nsresult  SetDiskSmartSize(bool checkPref);
80586: 
43113:     nsresult         Init();
43113:     void             Shutdown();
64576: 
64576:     static void      AssertOwnsLock()
64576:     { gService->mLock.AssertCurrentThreadOwns(); }
64576: 
43113: private:
43113:     friend class nsCacheServiceAutoLock;
43113:     friend class nsOfflineCacheDevice;
51302:     friend class nsProcessRequestEvent;
53962:     friend class nsSetSmartSizeEvent;
61001:     friend class nsBlockOnCacheThreadEvent;
86120:     friend class nsSetDiskSmartSizeCallback;
43113: 
43113:     /**
43113:      * Internal Methods
43113:      */
43113: 
43113:     static void      Lock();
43113:     static void      Unlock();
43113: 
43113:     nsresult         CreateDiskDevice();
43113:     nsresult         CreateOfflineDevice();
43113:     nsresult         CreateMemoryDevice();
43113: 
43113:     nsresult         CreateRequest(nsCacheSession *   session,
43113:                                    const nsACString & clientKey,
43113:                                    nsCacheAccessMode  accessRequested,
79445:                                    bool               blockingMode,
43113:                                    nsICacheListener * listener,
43113:                                    nsCacheRequest **  request);
43113: 
56468:     nsresult         DoomEntry_Internal(nsCacheEntry * entry,
79445:                                         bool doProcessPendingRequests);
43113: 
43113:     nsresult         EvictEntriesForClient(const char *          clientID,
43113:                                            nsCacheStoragePolicy  storagePolicy);
43113: 
43113:     // Notifies request listener asynchronously on the request's thread, and
43113:     // releases the descriptor on the request's thread.  If this method fails,
43113:     // the descriptor is not released.
43113:     nsresult         NotifyListener(nsCacheRequest *          request,
43113:                                     nsICacheEntryDescriptor * descriptor,
43113:                                     nsCacheAccessMode         accessGranted,
43113:                                     nsresult                  error);
43113: 
56468:     nsresult         ActivateEntry(nsCacheRequest * request,
56468:                                    nsCacheEntry ** entry,
56468:                                    nsCacheEntry ** doomedEntry);
43113: 
43113:     nsCacheDevice *  EnsureEntryHasDevice(nsCacheEntry * entry);
43113: 
79445:     nsCacheEntry *   SearchCacheDevices(nsCString * key, nsCacheStoragePolicy policy, bool *collision);
43113: 
43113:     void             DeactivateEntry(nsCacheEntry * entry);
43113: 
43113:     nsresult         ProcessRequest(nsCacheRequest *           request,
79445:                                     bool                       calledFromOpenCacheEntry,
43113:                                     nsICacheEntryDescriptor ** result);
43113: 
43113:     nsresult         ProcessPendingRequests(nsCacheEntry * entry);
43113: 
43113:     void             ClearPendingRequests(nsCacheEntry * entry);
43113:     void             ClearDoomList(void);
43113:     void             ClearActiveEntries(void);
43113:     void             DoomActiveEntries(void);
43113: 
43113:     static
43113:     PLDHashOperator  DeactivateAndClearEntry(PLDHashTable *    table,
43113:                                              PLDHashEntryHdr * hdr,
43113:                                              PRUint32          number,
43113:                                              void *            arg);
43113:     static
43113:     PLDHashOperator  RemoveActiveEntry(PLDHashTable *    table,
43113:                                        PLDHashEntryHdr * hdr,
43113:                                        PRUint32          number,
43113:                                        void *            arg);
43113: #if defined(PR_LOGGING)
43113:     void LogCacheStatistics();
43113: #endif
43113: 
80586:     nsresult         SetDiskSmartSize_Locked(bool checkPref);
80586: 
43113:     /**
43113:      *  Data Members
43113:      */
43113: 
43113:     static nsCacheService *         gService;  // there can be only one...
43113:     
43113:     nsCacheProfilePrefObserver *    mObserver;
43113:     
64576:     mozilla::Mutex                  mLock;
64576:     mozilla::CondVar                mCondVar;
43113: 
51302:     nsCOMPtr<nsIThread>             mCacheIOThread;
51302: 
43113:     nsTArray<nsISupports*>          mDoomedObjects;
43113:     
79445:     bool                            mInitialized;
43113:     
79445:     bool                            mEnableMemoryDevice;
79445:     bool                            mEnableDiskDevice;
79445:     bool                            mEnableOfflineDevice;
43113: 
43113:     nsMemoryCacheDevice *           mMemoryDevice;
43113:     nsDiskCacheDevice *             mDiskDevice;
43113:     nsOfflineCacheDevice *          mOfflineDevice;
43113: 
43113:     nsCacheEntryHashTable           mActiveEntries;
43113:     PRCList                         mDoomedEntries;
43113: 
43113:     // stats
43113:     
43113:     PRUint32                        mTotalEntries;
43113:     PRUint32                        mCacheHits;
43113:     PRUint32                        mCacheMisses;
43113:     PRUint32                        mMaxKeyLength;
43113:     PRUint32                        mMaxDataSize;
43113:     PRUint32                        mMaxMetaSize;
43113: 
43113:     // Unexpected error totals
43113:     PRUint32                        mDeactivateFailures;
43113:     PRUint32                        mDeactivatedUnboundEntries;
43113: };
43113: 
43113: /******************************************************************************
43113:  *  nsCacheServiceAutoLock
43113:  ******************************************************************************/
43113: 
43113: // Instantiate this class to acquire the cache service lock for a particular
43113: // execution scope.
43113: class nsCacheServiceAutoLock {
43113: public:
43113:     nsCacheServiceAutoLock() {
43113:         nsCacheService::Lock();
43113:     }
43113:     ~nsCacheServiceAutoLock() {
43113:         nsCacheService::Unlock();
43113:     }
43113: };
43113: 
43113: #endif // _nsCacheService_h_
