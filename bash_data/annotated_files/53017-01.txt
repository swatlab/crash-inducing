52880: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52880:  * vim: set ts=4 sw=4 et tw=99:
52880:  *
52880:  * ***** BEGIN LICENSE BLOCK *****
52880:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52880:  *
52880:  * The contents of this file are subject to the Mozilla Public License Version
52880:  * 1.1 (the "License"); you may not use this file except in compliance with
52880:  * the License. You may obtain a copy of the License at
52880:  * http://www.mozilla.org/MPL/
52880:  *
52880:  * Software distributed under the License is distributed on an "AS IS" basis,
52880:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52880:  * for the specific language governing rights and limitations under the
52880:  * License.
52880:  *
52880:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52880:  * May 28, 2008.
52880:  *
52880:  * The Initial Developer of the Original Code is
52880:  *   Brendan Eich <brendan@mozilla.org>
52880:  *
52880:  * Contributor(s):
52880:  *   David Mandelin <dmandelin@mozilla.com>
52880:  *
52880:  * Alternatively, the contents of this file may be used under the terms of
52880:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52880:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52880:  * in which case the provisions of the GPL or the LGPL are applicable instead
52880:  * of those above. If you wish to allow use of your version of this file only
52880:  * under the terms of either the GPL or the LGPL, and not to allow others to
52880:  * use your version of this file under the terms of the MPL, indicate your
52880:  * decision by deleting the provisions above and replace them with the notice
52880:  * and other provisions required by the GPL or the LGPL. If you do not delete
52880:  * the provisions above, a recipient may use your version of this file under
52880:  * the terms of any one of the MPL, the GPL or the LGPL.
52880:  *
52880:  * ***** END LICENSE BLOCK ***** */
52880: #include "PolyIC.h"
52880: #include "StubCalls.h"
52880: #include "CodeGenIncludes.h"
52880: #include "StubCalls-inl.h"
52880: #include "assembler/assembler/LinkBuffer.h"
52880: #include "jsscope.h"
52880: #include "jsnum.h"
52880: #include "jsscopeinlines.h"
52896: #include "jspropertycache.h"
52896: #include "jspropertycacheinlines.h"
52880: 
52880: using namespace js;
52880: using namespace js::mjit;
52880: 
52880: #if ENABLE_PIC
52880: 
52880: /* Rough over-estimate of how much memory we need to unprotect. */
52880: static const uint32 INLINE_PATH_LENGTH = 64;
52880: 
52880: /* Maximum number of stubs for a given callsite. */
52880: static const uint32 MAX_STUBS = 16;
52880: 
52880: typedef JSC::FunctionPtr FunctionPtr;
52880: typedef JSC::RepatchBuffer RepatchBuffer;
52880: typedef JSC::CodeBlock CodeBlock;
52880: typedef JSC::CodeLocationLabel CodeLocationLabel;
52880: typedef JSC::JITCode JITCode;
52880: typedef JSC::MacroAssembler::Jump Jump;
52880: typedef JSC::MacroAssembler::RegisterID RegisterID;
52880: typedef JSC::MacroAssembler::Label Label;
52880: typedef JSC::MacroAssembler::Imm32 Imm32;
52884: typedef JSC::MacroAssembler::ImmPtr ImmPtr;
52880: typedef JSC::MacroAssembler::Address Address;
52880: typedef JSC::ReturnAddressPtr ReturnAddressPtr;
52880: typedef JSC::MacroAssemblerCodePtr MacroAssemblerCodePtr;
52880: 
52880: struct AutoPropertyDropper
52880: {
52880:     JSContext *cx;
52880:     JSObject *holder;
52880:     JSProperty *prop;
52880: 
52880:   public:
52880:     AutoPropertyDropper(JSContext *cx, JSObject *obj, JSProperty *prop)
52880:       : cx(cx), holder(obj), prop(prop)
52880:     {
52880:         JS_ASSERT(prop);
52880:     }
52880: 
52880:     ~AutoPropertyDropper()
52880:     {
52880:         holder->dropProperty(cx, prop);
52880:     }
52880: };
52880: 
52880: class PICStubCompiler
52880: {
52906:   protected:
52880:     const char *type;
52880:     VMFrame &f;
52880:     JSScript *script;
52880:     ic::PICInfo &pic;
52880: 
52880:   public:
52880:     PICStubCompiler(const char *type, VMFrame &f, JSScript *script, ic::PICInfo &pic)
52880:       : type(type), f(f), script(script), pic(pic)
52880:     { }
52880: 
52880:     bool disable(const char *reason, VoidStub stub)
52880:     {
52880:         return disable(reason, JS_FUNC_TO_DATA_PTR(void *, stub));
52880:     }
52880: 
52887:     bool disable(const char *reason, VoidStubUInt32 stub)
52887:     {
52887:         return disable(reason, JS_FUNC_TO_DATA_PTR(void *, stub));
52887:     }
52887: 
52880:     bool disable(const char *reason, void *stub)
52880:     {
52880:         spew("disabled", reason);
52880:         JITCode jitCode(pic.slowPathStart.executableAddress(), INLINE_PATH_LENGTH);
52880:         CodeBlock codeBlock(jitCode);
52880:         RepatchBuffer repatcher(&codeBlock);
52880:         ReturnAddressPtr retPtr(pic.slowPathStart.callAtOffset(pic.callReturn).executableAddress());
52880:         MacroAssemblerCodePtr target(stub);
52880:         repatcher.relinkCallerToTrampoline(retPtr, target);
52880:         return true;
52880:     }
52880: 
52880:     JSC::ExecutablePool *getExecPool(size_t size)
52880:     {
52880:         mjit::ThreadData *jd = &JS_METHODJIT_DATA(f.cx);
52880:         return jd->execPool->poolForSize(size);
52880:     }
52880: 
52880:   protected:
52880:     void spew(const char *event, const char *op)
52880:     {
52880:         JaegerSpew(JSpew_PICs, "%s %s: %s (%s: %d)\n",
52880:                    type, event, op, script->filename,
52880:                    js_FramePCToLineNumber(f.cx, f.fp));
52880:     }
52880: };
52880: 
52880: class PICRepatchBuffer : public JSC::RepatchBuffer
52880: {
52880:     ic::PICInfo &pic;
52889:     JSC::CodeLocationLabel label;
52880: 
52880:   public:
52889:     PICRepatchBuffer(ic::PICInfo &ic, JSC::CodeLocationLabel path)
52889:       : JSC::RepatchBuffer(path.executableAddress(), INLINE_PATH_LENGTH),
52889:         pic(ic), label(path)
52880:     { }
52880: 
52880:     void relink(int32 offset, JSC::CodeLocationLabel target) {
52889:         JSC::RepatchBuffer::relink(label.jumpAtOffset(offset), target);
52880:     }
52880: };
52880: 
52887: class SetPropCompiler : public PICStubCompiler
52887: {
52887:     JSObject *obj;
52887:     JSAtom *atom;
52887:     VoidStubUInt32 stub;
52887: 
52887: #ifdef JS_CPU_X86
52887:     static const int32 INLINE_SHAPE_OFFSET = 6;
52887:     static const int32 INLINE_SHAPE_JUMP   = 12;
52887:     static const int32 DSLOTS_BEFORE_CONSTANT = -23;
52887:     static const int32 DSLOTS_BEFORE_KTYPE    = -19;
52887:     static const int32 DSLOTS_BEFORE_DYNAMIC  = -15;
52887:     static const int32 INLINE_STORE_DYN_TYPE  = -6;
52887:     static const int32 INLINE_STORE_DYN_DATA  = 0;
52887:     static const int32 INLINE_STORE_KTYPE_TYPE  = -10;
52887:     static const int32 INLINE_STORE_KTYPE_DATA  = 0;
52887:     static const int32 INLINE_STORE_CONST_TYPE  = -14;
52887:     static const int32 INLINE_STORE_CONST_DATA  = -4;
52887:     static const int32 STUB_SHAPE_JUMP = 12;
52887: #endif
52887: 
52887:     static int32 dslotsLoadOffset(ic::PICInfo &pic) {
52887:         if (pic.u.vr.isConstant)
52887:             return DSLOTS_BEFORE_CONSTANT;
52887:         if (pic.u.vr.u.s.isTypeKnown)
52887:             return DSLOTS_BEFORE_KTYPE;
52887:         return DSLOTS_BEFORE_DYNAMIC;
52887:     }
52887: 
52887:     inline int32 dslotsLoadOffset() {
52887:         return dslotsLoadOffset(pic);
52887:     }
52887: 
52887:     inline int32 inlineTypeOffset() {
52887:         if (pic.u.vr.isConstant)
52887:             return INLINE_STORE_CONST_TYPE;
52887:         if (pic.u.vr.u.s.isTypeKnown)
52887:             return INLINE_STORE_KTYPE_TYPE;
52887:         return INLINE_STORE_DYN_TYPE;
52887:     }
52887: 
52887:     inline int32 inlineDataOffset() {
52887:         if (pic.u.vr.isConstant)
52887:             return INLINE_STORE_CONST_DATA;
52887:         if (pic.u.vr.u.s.isTypeKnown)
52887:             return INLINE_STORE_KTYPE_DATA;
52887:         return INLINE_STORE_DYN_DATA;
52887:     }
52887: 
52887:   public:
52887:     SetPropCompiler(VMFrame &f, JSScript *script, JSObject *obj, ic::PICInfo &pic, JSAtom *atom,
52887:                     VoidStubUInt32 stub)
52887:       : PICStubCompiler("setprop", f, script, pic), obj(obj), atom(atom), stub(stub)
52887:     { }
52887: 
52887:     bool disable(const char *reason)
52887:     {
52887:         return PICStubCompiler::disable(reason, stub);
52887:     }
52887: 
52887:     static void reset(ic::PICInfo &pic)
52887:     {
52887:         RepatchBuffer repatcher(pic.fastPathStart.executableAddress(), INLINE_PATH_LENGTH);
52887:         repatcher.repatchLEAToLoadPtr(pic.storeBack.instructionAtOffset(dslotsLoadOffset(pic)));
52887:         repatcher.repatch(pic.fastPathStart.dataLabel32AtOffset(pic.shapeGuard + INLINE_SHAPE_OFFSET),
52887:                           int32(JSScope::INVALID_SHAPE));
52887:         repatcher.relink(pic.fastPathStart.jumpAtOffset(pic.shapeGuard + INLINE_SHAPE_JUMP),
52887:                          pic.slowPathStart);
52887: 
52887:         RepatchBuffer repatcher2(pic.slowPathStart.executableAddress(), INLINE_PATH_LENGTH);
52887:         ReturnAddressPtr retPtr(pic.slowPathStart.callAtOffset(pic.callReturn).executableAddress());
52887:         MacroAssemblerCodePtr target(JS_FUNC_TO_DATA_PTR(void *, ic::SetProp));
52887:         repatcher.relinkCallerToTrampoline(retPtr, target);
52887:     }
52887: 
52887:     bool patchInline(JSScopeProperty *sprop)
52887:     {
52889:         JS_ASSERT(!pic.inlinePathPatched);
52887:         JaegerSpew(JSpew_PICs, "patch setprop inline at %p\n", pic.fastPathStart.executableAddress());
52887: 
52889:         PICRepatchBuffer repatcher(pic, pic.fastPathStart);
52887: 
52887:         int32 offset;
52887:         if (sprop->slot < JS_INITIAL_NSLOTS) {
52887:             JSC::CodeLocationInstruction istr;
52887:             istr = pic.storeBack.instructionAtOffset(dslotsLoadOffset());
52887:             repatcher.repatchLoadPtrToLEA(istr);
52887: 
52887:             // 
52887:             // We've patched | mov dslots, [obj + DSLOTS_OFFSET]
52887:             // To:           | lea fslots, [obj + DSLOTS_OFFSET]
52887:             //
52887:             // Because the offset is wrong, it's necessary to correct it
52887:             // below.
52887:             //
52887:             int32 diff = int32(offsetof(JSObject, fslots)) -
52887:                          int32(offsetof(JSObject, dslots));
52887:             JS_ASSERT(diff != 0);
52887:             offset  = (int32(sprop->slot) * sizeof(Value)) + diff;
52887:         } else {
52887:             offset = (sprop->slot - JS_INITIAL_NSLOTS) * sizeof(Value);
52887:         }
52887: 
52887:         uint32 shapeOffs = pic.shapeGuard + INLINE_SHAPE_OFFSET;
52887:         repatcher.repatch(pic.fastPathStart.dataLabel32AtOffset(shapeOffs),
52887:                           obj->shape());
52887:         repatcher.repatch(pic.storeBack.dataLabel32AtOffset(inlineTypeOffset()),
52887:                           offset + 4);
52887:         if (!pic.u.vr.isConstant || !Valueify(pic.u.vr.u.v).isUndefined()) {
52887:             repatcher.repatch(pic.storeBack.dataLabel32AtOffset(inlineDataOffset()),
52887:                               offset);
52887:         }
52887: 
52887:         pic.inlinePathPatched = true;
52887: 
52887:         return true;
52887:     }
52887: 
52887:     void patchPreviousToHere(PICRepatchBuffer &repatcher, CodeLocationLabel cs)
52887:     {
52887:         // Patch either the inline fast path or a generated stub. The stub
52887:         // omits the prefix of the inline fast path that loads the shape, so
52887:         // the offsets are different.
52887:         int shapeGuardJumpOffset;
52887:         if (pic.stubsGenerated)
52887:             shapeGuardJumpOffset = STUB_SHAPE_JUMP;
52887:         else
52887:             shapeGuardJumpOffset = pic.shapeGuard + INLINE_SHAPE_JUMP;
52887:         repatcher.relink(shapeGuardJumpOffset, cs);
52887:     }
52887: 
52887:     bool generateStub(JSScopeProperty *sprop)
52887:     {
52887:         Assembler masm;
52887:         Label start = masm.label();
52887: 
52887:         // Shape guard.
52887:         Jump shapeMismatch = masm.branch32_force32(Assembler::NotEqual, pic.shapeReg,
52887:                                                    Imm32(obj->shape()));
52887: 
52887:         // Write out the store.
52887:         Address address(pic.objReg, offsetof(JSObject, fslots) + sprop->slot * sizeof(Value));
52887:         if (sprop->slot >= JS_INITIAL_NSLOTS) {
52887:             masm.loadPtr(Address(pic.objReg, offsetof(JSObject, dslots)), pic.objReg);
52887:             address = Address(pic.objReg, (sprop->slot - JS_INITIAL_NSLOTS) * sizeof(Value));
52887:         }
52887: 
52890:         // If the scope is branded, or has a method barrier. It's now necessary
52890:         // to guard that we're not overwriting a function-valued property.
52890:         Jump rebrand;
52890:         JSScope *scope = obj->scope();
52893:         if (scope->brandedOrHasMethodBarrier()) {
52890:             masm.loadTypeTag(address, pic.shapeReg);
52954:             rebrand = masm.branch32(Assembler::Equal, pic.shapeReg, ImmTag(JSVAL_TAG_FUNOBJ));
52890:         }
52890: 
52887:         if (pic.u.vr.isConstant) {
52887:             masm.storeValue(Valueify(pic.u.vr.u.v), address);
52887:         } else {
52887:             if (pic.u.vr.u.s.isTypeKnown)
52954:                 masm.storeTypeTag(ImmTag(pic.u.vr.u.s.type.tag), address);
52887:             else
52887:                 masm.storeTypeTag(pic.u.vr.u.s.type.reg, address);
52887:             masm.storeData32(pic.u.vr.u.s.data, address);
52887:         }
52887:         Jump done = masm.jump();
52887: 
52887:         JSC::ExecutablePool *ep = getExecPool(masm.size());
52887:         if (!ep || !pic.execPools.append(ep)) {
52887:             if (ep)
52887:                 ep->release();
52887:             js_ReportOutOfMemory(f.cx);
52887:             return false;
52887:         }
52887: 
52887:         JSC::LinkBuffer buffer(&masm, ep);
52887:         buffer.link(shapeMismatch, pic.slowPathStart);
52887:         buffer.link(done, pic.storeBack);
52890:         if (scope->branded() || scope->hasMethodBarrier())
52890:             buffer.link(rebrand, pic.slowPathStart);
52887:         CodeLocationLabel cs = buffer.finalizeCodeAddendum();
52887:         JaegerSpew(JSpew_PICs, "generate setprop stub %p %d %d at %p\n",
52887:                    (void*)&pic,
52887:                    obj->shape(),
52887:                    pic.stubsGenerated,
52887:                    cs.executableAddress());
52887: 
52889:         PICRepatchBuffer repatcher(pic, pic.lastPathStart());
52887: 
52887:         // This function can patch either the inline fast path for a generated
52887:         // stub. The stub omits the prefix of the inline fast path that loads
52887:         // the shape, so the offsets are different.
52887:         patchPreviousToHere(repatcher, cs);
52887: 
52887:         pic.stubsGenerated++;
52887:         pic.lastStubStart = buffer.locationOf(start);
52887: 
52887:         if (pic.stubsGenerated == MAX_STUBS)
52887:             disable("max stubs reached");
52887: 
52887:         return true;
52887:     }
52887: 
52887:     bool update()
52887:     {
52887:         if (!pic.hit) {
52887:             spew("first hit", "nop");
52887:             pic.hit = true;
52887:             return true;
52887:         }
52887: 
52887:         JSObject *aobj = js_GetProtoIfDenseArray(obj);
52887:         if (!aobj->isNative())
52887:             return disable("non-native");
52887: 
52887:         JSObject *holder;
52887:         JSProperty *prop = NULL;
52887:         if (!aobj->lookupProperty(f.cx, ATOM_TO_JSID(atom), &holder, &prop))
52887:             return false;
52887:         if (!prop)
52887:             return disable("property not found");
52887: 
52887:         AutoPropertyDropper dropper(f.cx, holder, prop);
52887:         if (holder != obj)
52887:             return disable("property not on object");
52887: 
52893:         JSScope *scope = obj->scope();
52887:         JSScopeProperty *sprop = (JSScopeProperty *)prop;
52887:         if (!sprop->writable())
52887:             return disable("readonly");
52893:         if (scope->sealed() && !sprop->hasSlot())
52887:             return disable("what does this even mean");
52887: 
52887:         if (!sprop->hasDefaultSetter())
52887:             return disable("setter");
52893:         if (!SPROP_HAS_VALID_SLOT(sprop, scope))
52887:             return disable("invalid slot");
52887: 
52887:         JS_ASSERT(obj == holder);
52895:         if (!pic.inlinePathPatched &&
52895:             !scope->brandedOrHasMethodBarrier() &&
52895:             !obj->isDenseArray()) {
52889:             return patchInline(sprop);
52895:         } 
52895: 
52887:         return generateStub(sprop);
52887:     }
52887: };
52887: 
52880: class GetPropCompiler : public PICStubCompiler
52880: {
52880:     JSObject *obj;
52880:     JSAtom *atom;
52896:     void   *stub;
52884:     int lastStubSecondShapeGuard;
52880: 
52880:     /* Offsets for patching, computed manually as reverse from the storeBack. */
52880: #ifdef JS_CPU_X86
52880:     static const int32 DSLOTS_LOAD  = -15;
52880:     static const int32 TYPE_LOAD    = -6;
52880:     static const int32 DATA_LOAD    = 0;
52884:     static const int32 INLINE_TYPE_GUARD   = 12;
52880:     static const int32 INLINE_SHAPE_OFFSET = 6;
52880:     static const int32 INLINE_SHAPE_JUMP   = 12;
52880:     static const int32 STUB_SHAPE_JUMP = 12;
52880: #endif
52880: 
52880:   public:
52880:     GetPropCompiler(VMFrame &f, JSScript *script, JSObject *obj, ic::PICInfo &pic, JSAtom *atom,
52880:                     VoidStub stub)
52896:       : PICStubCompiler("getprop", f, script, pic), obj(obj), atom(atom),
52896:         stub(JS_FUNC_TO_DATA_PTR(void *, stub)),
52896:         lastStubSecondShapeGuard(pic.u.get.secondShapeGuard)
52896:     { }
52896: 
52896:     GetPropCompiler(VMFrame &f, JSScript *script, JSObject *obj, ic::PICInfo &pic, JSAtom *atom,
52896:                     VoidStubUInt32 stub)
52896:       : PICStubCompiler("callprop", f, script, pic), obj(obj), atom(atom),
52896:         stub(JS_FUNC_TO_DATA_PTR(void *, stub)),
52887:         lastStubSecondShapeGuard(pic.u.get.secondShapeGuard)
52880:     { }
52880: 
52880:     static void reset(ic::PICInfo &pic)
52880:     {
52880:         RepatchBuffer repatcher(pic.fastPathStart.executableAddress(), INLINE_PATH_LENGTH);
52880:         repatcher.repatchLEAToLoadPtr(pic.storeBack.instructionAtOffset(DSLOTS_LOAD));
52880:         repatcher.repatch(pic.fastPathStart.dataLabel32AtOffset(pic.shapeGuard + INLINE_SHAPE_OFFSET),
52880:                           int32(JSScope::INVALID_SHAPE));
52880:         repatcher.relink(pic.fastPathStart.jumpAtOffset(pic.shapeGuard + INLINE_SHAPE_JUMP),
52880:                          pic.slowPathStart);
52884:         // :FIXME: :TODO: :XXX: :URGENT: re-patch type guard
52884: 
52884:         RepatchBuffer repatcher2(pic.slowPathStart.executableAddress(), INLINE_PATH_LENGTH);
52884:         ReturnAddressPtr retPtr(pic.slowPathStart.callAtOffset(pic.callReturn).executableAddress());
52884:         MacroAssemblerCodePtr target(JS_FUNC_TO_DATA_PTR(void *, ic::GetProp));
52884:         repatcher.relinkCallerToTrampoline(retPtr, target);
52884:     }
52884: 
52884:     bool generateArrayLengthStub()
52884:     {
52884:         Assembler masm;
52884: 
52884:         masm.loadPtr(Address(pic.objReg, offsetof(JSObject, clasp)), pic.shapeReg);
52884:         Jump isDense = masm.branchPtr(Assembler::Equal, pic.shapeReg, ImmPtr(&js_ArrayClass));
52884:         Jump notArray = masm.branchPtr(Assembler::NotEqual, pic.shapeReg,
52884:                                        ImmPtr(&js_SlowArrayClass));
52884: 
52884:         isDense.linkTo(masm.label(), &masm);
52884:         masm.loadData32(Address(pic.objReg, offsetof(JSObject, fslots) +
52884:                                             JSObject::JSSLOT_ARRAY_LENGTH * sizeof(Value)),
52884:                         pic.objReg);
52884:         Jump oob = masm.branch32(Assembler::Above, pic.objReg, Imm32(JSVAL_INT_MAX));
52954:         masm.move(ImmTag(JSVAL_TAG_INT32), pic.shapeReg);
52884:         Jump done = masm.jump();
52884: 
52884:         JSC::ExecutablePool *ep = getExecPool(masm.size());
52884:         if (!ep || !pic.execPools.append(ep)) {
52884:             if (ep)
52884:                 ep->release();
52884:             js_ReportOutOfMemory(f.cx);
52884:             return false;
52884:         }
52884: 
52884:         JSC::LinkBuffer buffer(&masm, ep);
52884:         buffer.link(notArray, pic.slowPathStart);
52884:         buffer.link(oob, pic.slowPathStart);
52884:         buffer.link(done, pic.storeBack);
52884: 
52884:         CodeLocationLabel start = buffer.finalizeCodeAddendum();
52884:         JaegerSpew(JSpew_PICs, "generate array length stub at %p\n",
52884:                    start.executableAddress());
52884: 
52889:         PICRepatchBuffer repatcher(pic, pic.lastPathStart());
52884:         patchPreviousToHere(repatcher, start);
52884: 
52884:         disable("array length done");
52884: 
52884:         return true;
52884:     }
52884: 
52907:     bool generateStringCallStub()
52907:     {
52907:         JS_ASSERT(pic.hasTypeCheck());
52907:         JS_ASSERT(pic.kind == ic::PICInfo::CALL);
52907: 
52907:         if (!f.fp->script->compileAndGo)
52907:             return disable("String.prototype without compile-and-go");
52907: 
52907:         mjit::ThreadData &jm = JS_METHODJIT_DATA(f.cx);
52907:         if (!jm.addScript(script)) {
52907:             js_ReportOutOfMemory(f.cx);
52907:             return false;
52907:         }
52907: 
52907:         JSObject *holder;
52907:         JSProperty *prop;
52907:         if (!obj->lookupProperty(f.cx, ATOM_TO_JSID(atom), &holder, &prop))
52907:             return false;
52907:         if (!prop)
52907:             return disable("property not found");
52907: 
52907:         AutoPropertyDropper dropper(f.cx, holder, prop);
52907:         JSScopeProperty *sprop = (JSScopeProperty *)prop;
52907:         if (holder != obj)
52907:             return disable("proto walk on String.prototype");
52907:         if (!sprop->hasDefaultGetterOrIsMethod())
52907:             return disable("getter");
52907:         if (!SPROP_HAS_VALID_SLOT(sprop, holder->scope()))
52907:             return disable("invalid slot");
52907: 
52907:         JS_ASSERT(holder->isNative());
52907: 
52907:         Assembler masm;
52907: 
52907:         /* Only strings are allowed. */
52907:         Jump notString = masm.branch32(Assembler::NotEqual, pic.typeReg(),
52954:                                        ImmTag(JSVAL_TAG_STRING));
52907: 
52907:         /*
52907:          * Sink pic.objReg, since we're about to lose it. This is optimistic,
52907:          * we could reload it from objRemat if we wanted.
52907:          *
52907:          * Note: This is really hacky, and relies on f.regs.sp being set
52907:          * correctly in ic::CallProp. Should we just move the store higher
52907:          * up in the fast path, or put this offset in PICInfo?
52907:          */
52907:         uint32 thisvOffset = uint32(f.regs.sp - f.fp->slots()) - 1;
52907:         Address thisv(JSFrameReg, sizeof(JSStackFrame) + thisvOffset * sizeof(Value));
52954:         masm.storeTypeTag(ImmTag(JSVAL_TAG_STRING), thisv);
52907:         masm.storeData32(pic.objReg, thisv);
52907: 
52907:         /*
52907:          * Clobber objReg with String.prototype and do some PIC stuff. Well,
52907:          * really this is now a MIC, except it won't ever be patched, so we
52907:          * just disable the PIC at the end. :FIXME:? String.prototype probably
52907:          * does not get random shape changes.
52907:          */
52907:         masm.move(ImmPtr(obj), pic.objReg);
52907:         masm.loadShape(pic.objReg, pic.shapeReg);
52907:         Jump shapeMismatch = masm.branch32(Assembler::NotEqual, pic.shapeReg,
52907:                                            Imm32(obj->shape()));
52907:         masm.loadSlot(pic.objReg, pic.objReg, sprop->slot, pic.shapeReg, pic.objReg);
52907: 
52907:         Jump done = masm.jump();
52907: 
52907:         JSC::ExecutablePool *ep = getExecPool(masm.size());
52907:         if (!ep || !pic.execPools.append(ep)) {
52907:             if (ep)
52907:                 ep->release();
52907:             js_ReportOutOfMemory(f.cx);
52907:             return false;
52907:         }
52907: 
52907:         JSC::LinkBuffer patchBuffer(&masm, ep);
52907: 
52907:         int32 typeCheckOffset = -int32(pic.u.get.typeCheckOffset);
52907:         patchBuffer.link(notString, pic.slowPathStart.labelAtOffset(typeCheckOffset));
52907:         patchBuffer.link(shapeMismatch, pic.slowPathStart);
52907:         patchBuffer.link(done, pic.storeBack);
52907: 
52907:         CodeLocationLabel cs = patchBuffer.finalizeCodeAddendum();
52907:         JaegerSpew(JSpew_PICs, "generate string call stub at %p\n",
52907:                    cs.executableAddress());
52907: 
52907:         /* Patch the type check to jump here. */
52907:         RepatchBuffer repatcher(pic.fastPathStart.executableAddress(), INLINE_PATH_LENGTH);
52907:         repatcher.relink(pic.fastPathStart.jumpAtOffset(INLINE_TYPE_GUARD), cs);
52907: 
52907:         /* Disable the PIC so we don't keep generating stubs on the above shape mismatch. */
52907:         disable("generated string call stub");
52907: 
52907:         return true;
52907:     }
52907: 
52884:     bool generateStringLengthStub()
52884:     {
52887:         JS_ASSERT(pic.hasTypeCheck());
52884: 
52884:         Assembler masm;
52887:         Jump notString = masm.branch32(Assembler::NotEqual, pic.typeReg(),
52954:                                        ImmTag(JSVAL_TAG_STRING));
52884:         masm.loadPtr(Address(pic.objReg, offsetof(JSString, mLength)), pic.objReg);
52954:         masm.move(ImmTag(JSVAL_TAG_INT32), pic.shapeReg);
52884:         Jump done = masm.jump();
52884: 
52884:         JSC::ExecutablePool *ep = getExecPool(masm.size());
52884:         if (!ep || !pic.execPools.append(ep)) {
52884:             if (ep)
52884:                 ep->release();
52884:             js_ReportOutOfMemory(f.cx);
52884:             return false;
52884:         }
52884: 
52887:         int32 typeCheckOffset = -int32(pic.u.get.typeCheckOffset);
52884: 
52884:         JSC::LinkBuffer patchBuffer(&masm, ep);
52884:         patchBuffer.link(notString, pic.slowPathStart.labelAtOffset(typeCheckOffset));
52884:         patchBuffer.link(done, pic.storeBack);
52884: 
52884:         CodeLocationLabel start = patchBuffer.finalizeCodeAddendum();
52884:         JaegerSpew(JSpew_PICs, "generate string length stub at %p\n",
52884:                    start.executableAddress());
52884: 
52884:         RepatchBuffer repatcher(pic.fastPathStart.executableAddress(), INLINE_PATH_LENGTH);
52884:         repatcher.relink(pic.fastPathStart.jumpAtOffset(INLINE_TYPE_GUARD),
52884:                          start);
52884: 
52884:         return true;
52880:     }
52880: 
52880:     bool patchInline(JSObject *holder, JSScopeProperty *sprop)
52880:     {
52880:         spew("patch", "inline");
52889:         PICRepatchBuffer repatcher(pic, pic.fastPathStart);
52880: 
52880:         mjit::ThreadData &jm = JS_METHODJIT_DATA(f.cx);
52880:         if (!jm.addScript(script)) {
52880:             js_ReportOutOfMemory(f.cx);
52880:             return false;
52880:         }
52880: 
52880:         int32 offset;
52880:         if (sprop->slot < JS_INITIAL_NSLOTS) {
52880:             JSC::CodeLocationInstruction istr;
52880:             istr = pic.storeBack.instructionAtOffset(DSLOTS_LOAD);
52880:             repatcher.repatchLoadPtrToLEA(istr);
52880: 
52880:             // 
52880:             // We've patched | mov dslots, [obj + DSLOTS_OFFSET]
52880:             // To:           | lea fslots, [obj + DSLOTS_OFFSET]
52880:             //
52880:             // Because the offset is wrong, it's necessary to correct it
52880:             // below.
52880:             //
52880:             int32 diff = int32(offsetof(JSObject, fslots)) -
52880:                          int32(offsetof(JSObject, dslots));
52880:             JS_ASSERT(diff != 0);
52880:             offset  = (int32(sprop->slot) * sizeof(Value)) + diff;
52880:         } else {
52880:             offset = (sprop->slot - JS_INITIAL_NSLOTS) * sizeof(Value);
52880:         }
52880: 
52880:         uint32 shapeOffs = pic.shapeGuard + INLINE_SHAPE_OFFSET;
52880:         repatcher.repatch(pic.fastPathStart.dataLabel32AtOffset(shapeOffs),
52880:                           obj->shape());
52880:         repatcher.repatch(pic.storeBack.dataLabel32AtOffset(TYPE_LOAD),
52880:                           offset + 4);
52880:         repatcher.repatch(pic.storeBack.dataLabel32AtOffset(DATA_LOAD),
52880:                           offset);
52880: 
52880:         pic.inlinePathPatched = true;
52880: 
52880:         return true;
52880:     }
52880: 
52880:     bool generateStub(JSObject *holder, JSScopeProperty *sprop)
52880:     {
52880:         Vector<Jump, 8> shapeMismatches(f.cx);
52880: 
52880:         Assembler masm;
52880: 
52887:         if (pic.objNeedsRemat()) {
52887:             if (pic.objRemat() >= sizeof(JSStackFrame))
52887:                 masm.loadData32(Address(JSFrameReg, pic.objRemat()), pic.objReg);
52884:             else
52887:                 masm.move(RegisterID(pic.objRemat()), pic.objReg);
52887:             pic.u.get.objNeedsRemat = false;
52880:         }
52895: 
52895:         Label start;
52895:         Jump shapeGuard;
52895:         if (obj->isDenseArray()) {
52895:             start = masm.label();
52895:             shapeGuard = masm.branchPtr(Assembler::NotEqual,
52895:                                         Address(pic.objReg, offsetof(JSObject, clasp)),
52895:                                         ImmPtr(obj->getClass()));
52895:         } else {
52887:             if (pic.shapeNeedsRemat()) {
52880:                 masm.loadShape(pic.objReg, pic.shapeReg);
52887:                 pic.u.get.shapeRegHasBaseShape = true;
52880:             }
52880: 
52895:             start = masm.label();
52895:             shapeGuard = masm.branch32_force32(Assembler::NotEqual, pic.shapeReg,
52880:                                                Imm32(obj->shape()));
52895:         }
52895: 
52880:         if (!shapeMismatches.append(shapeGuard))
52880:             return false;
52880: 
52880:         if (obj != holder) {
52880:             // Emit code that walks the prototype chain.
52880:             JSObject *tempObj = obj;
52880:             Address fslot(pic.objReg, offsetof(JSObject, fslots) + JSSLOT_PROTO * sizeof(Value));
52880:             do {
52880:                 tempObj = tempObj->getProto();
53017:                 // FIXME: we should find out why this condition occurs. It is probably
53017:                 // related to PICs on globals.
53017:                 if (!tempObj)
53017:                     return false;
52880:                 JS_ASSERT(tempObj);
52880:                 JS_ASSERT(tempObj->isNative());
52880: 
52880:                 masm.loadData32(fslot, pic.objReg);
52887:                 pic.u.get.shapeRegHasBaseShape = false;
52887:                 pic.u.get.objNeedsRemat = true;
52880: 
52880:                 Jump j = masm.branchTestPtr(Assembler::Zero, pic.objReg, pic.objReg);
52880:                 if (!shapeMismatches.append(j))
52880:                     return false;
52880:             } while (tempObj != holder);
52880: 
52880:             // Load the shape out of the holder and check it.
52880:             masm.loadShape(pic.objReg, pic.shapeReg);
52880:             Jump j = masm.branch32_force32(Assembler::NotEqual, pic.shapeReg,
52880:                                            Imm32(holder->shape()));
52880:             if (!shapeMismatches.append(j))
52880:                 return false;
52887:             pic.u.get.secondShapeGuard = masm.distanceOf(masm.label()) - masm.distanceOf(start);
52880:         } else {
52887:             pic.u.get.secondShapeGuard = 0;
52880:         }
52906: 
52906:         /* Load the value out of the object. */
52880:         masm.loadSlot(pic.objReg, pic.objReg, sprop->slot, pic.shapeReg, pic.objReg);
52880:         Jump done = masm.jump();
52880: 
52880:         JSC::ExecutablePool *ep = getExecPool(masm.size());
52880:         if (!ep) {
52880:             js_ReportOutOfMemory(f.cx);
52880:             return false;
52880:         }
52880: 
52880:         // :TODO: this can OOM 
52880:         JSC::LinkBuffer buffer(&masm, ep);
52880: 
52880:         if (!pic.execPools.append(ep)) {
52880:             ep->release();
52880:             js_ReportOutOfMemory(f.cx);
52880:             return false;
52880:         }
52880: 
52880:         // The guard exit jumps to the original slow case.
52880:         for (Jump *pj = shapeMismatches.begin(); pj != shapeMismatches.end(); ++pj)
52880:             buffer.link(*pj, pic.slowPathStart);
52880: 
52880:         // The final exit jumps to the store-back in the inline stub.
52880:         buffer.link(done, pic.storeBack);
52880:         CodeLocationLabel cs = buffer.finalizeCodeAddendum();
52906:         JaegerSpew(JSpew_PICs, "generated %s stub at %p\n", type, cs.executableAddress());
52880: 
52889:         PICRepatchBuffer repatcher(pic, pic.lastPathStart()); 
52884:         patchPreviousToHere(repatcher, cs);
52884: 
52884:         pic.stubsGenerated++;
52884:         pic.lastStubStart = buffer.locationOf(start);
52884: 
52884:         if (pic.stubsGenerated == MAX_STUBS)
52884:             disable("max stubs reached");
52895:         if (obj->isDenseArray())
52895:             disable("dense array");
52884: 
52884:         return true;
52884:     }
52884: 
52884:     void patchPreviousToHere(PICRepatchBuffer &repatcher, CodeLocationLabel cs)
52884:     {
52880:         // Patch either the inline fast path or a generated stub. The stub
52880:         // omits the prefix of the inline fast path that loads the shape, so
52880:         // the offsets are different.
52880:         int shapeGuardJumpOffset;
52880:         if (pic.stubsGenerated)
52880:             shapeGuardJumpOffset = STUB_SHAPE_JUMP;
52880:         else
52880:             shapeGuardJumpOffset = pic.shapeGuard + INLINE_SHAPE_JUMP;
52880:         repatcher.relink(shapeGuardJumpOffset, cs);
52880:         if (lastStubSecondShapeGuard)
52880:             repatcher.relink(lastStubSecondShapeGuard, cs);
52880:     }
52880: 
52880:     bool update()
52880:     {
52880:         if (!pic.hit) {
52880:             spew("first hit", "nop");
52880:             pic.hit = true;
52880:             return true;
52880:         }
52880: 
52880:         JSObject *aobj = js_GetProtoIfDenseArray(obj);
52880:         if (!aobj->isNative())
52880:             return disable("non-native");
52880: 
52880:         JSObject *holder;
52880:         JSProperty *prop;
52880:         if (!aobj->lookupProperty(f.cx, ATOM_TO_JSID(atom), &holder, &prop))
52880:             return false;
52880: 
52880:         if (!prop)
52880:             return disable("lookup failed");
52880: 
52880:         AutoPropertyDropper dropper(f.cx, holder, prop);
52880: 
52884:         if (!holder->isNative())
52884:             return disable("non-native holder");
52884: 
52880:         JSScopeProperty *sprop = (JSScopeProperty *)prop;
52880:         if (!sprop->hasDefaultGetterOrIsMethod())
52880:             return disable("getter");
52880:         if (!SPROP_HAS_VALID_SLOT(sprop, holder->scope()))
52880:             return disable("invalid slot");
52880: 
52889:         if (obj == holder && !pic.inlinePathPatched)
52880:             return patchInline(holder, sprop);
52889:         else
52880:             return generateStub(holder, sprop);
52880: 
52880:         return true;
52880:     }
52880: 
52880:     bool disable(const char *reason)
52880:     {
52880:         return PICStubCompiler::disable(reason, stub);
52880:     }
52880: };
52880: 
52880: void JS_FASTCALL
52880: ic::GetProp(VMFrame &f, uint32 index)
52880: {
52880:     JSScript *script = f.fp->script;
52880:     PICInfo &pic = script->pics[index];
52880: 
52892:     JSAtom *atom = pic.atom;
52892:     if (atom == f.cx->runtime->atomState.lengthAtom) {
52884:         if (f.regs.sp[-1].isString()) {
52884:             GetPropCompiler cc(f, script, NULL, pic, NULL, stubs::Length);
52884:             if (!cc.generateStringLengthStub()) {
52884:                 cc.disable("error");
52884:                 THROW();
52884:             }
52884:             JSString *str = f.regs.sp[-1].asString();
52884:             f.regs.sp[-1].setInt32(str->length());
52884:             return;
52884:         } else if (!f.regs.sp[-1].isPrimitive()) {
52884:             JSObject *obj = &f.regs.sp[-1].asObject();
52884:             if (obj->isArray()) {
52884:                 GetPropCompiler cc(f, script, obj, pic, NULL, stubs::Length);
52884:                 if (!cc.generateArrayLengthStub()) {
52884:                     cc.disable("error");
52884:                     THROW();
52884:                 }
52884:                 f.regs.sp[-1].setNumber(obj->getArrayLength());
52884:                 return;
52884:             }
52884:         }
52884:         atom = f.cx->runtime->atomState.lengthAtom;
52884:     }
52880: 
52880:     JSObject *obj = ValueToObject(f.cx, &f.regs.sp[-1]);
52880:     if (!obj)
52880:         THROW();
52880: 
52880:     if (pic.shouldGenerate()) {
52880:         GetPropCompiler cc(f, script, obj, pic, atom, stubs::GetProp);
52880:         if (!cc.update()) {
52880:             cc.disable("error");
52880:             THROW();
52880:         }
52880:     }
52880: 
52880:     Value v;
52880:     if (!obj->getProperty(f.cx, ATOM_TO_JSID(atom), &v))
52880:         THROW();
52880:     f.regs.sp[-1] = v;
52880: }
52880: 
52887: static void JS_FASTCALL
52916: SetPropDumb(VMFrame &f, uint32 index)
52916: {
52916:     JSScript *script = f.fp->script;
52916:     ic::PICInfo &pic = script->pics[index];
52916:     JS_ASSERT(pic.kind == ic::PICInfo::SET);
52916:     JSAtom *atom = pic.atom;
52916: 
52916:     JSObject *obj = ValueToObject(f.cx, &f.regs.sp[-2]);
52916:     if (!obj)
52916:         THROW();
52916:     Value rval = f.regs.sp[-1];
52916:     if (!obj->setProperty(f.cx, ATOM_TO_JSID(atom), &f.regs.sp[-1]))
52916:         THROW();
52916:     f.regs.sp[-2] = rval;
52916: }
52916: 
52916: static void JS_FASTCALL
52887: SetPropSlow(VMFrame &f, uint32 index)
52887: {
52887:     JSScript *script = f.fp->script;
52887:     ic::PICInfo &pic = script->pics[index];
52887:     JS_ASSERT(pic.kind == ic::PICInfo::SET);
52887: 
52892:     JSAtom *atom = pic.atom;
52888:     stubs::SetName(f, atom);
52887: }
52887: 
52897: void JS_FASTCALL
52886: ic::SetProp(VMFrame &f, uint32 index)
52886: {
52887:     JSObject *obj = ValueToObject(f.cx, &f.regs.sp[-2]);
52887:     if (!obj)
52887:         THROW();
52887: 
52887:     JSScript *script = f.fp->script;
52887:     ic::PICInfo &pic = script->pics[index];
52892:     JSAtom *atom = pic.atom;
52887:     JS_ASSERT(pic.kind == ic::PICInfo::SET);
52887: 
52916:     //
52887:     // Important: We update the PIC before looking up the property so that the
52887:     // PIC is updated only if the property already exists. The PIC doesn't try
52887:     // to optimize adding new properties; that is for the slow case.
52916:     //
52916:     // Also note, we can't use SetName for PROPINC PICs because the property
52916:     // cache can't handle a GET and SET from the same scripted PC.
52916:     //
52916: 
52916:     VoidStubUInt32 stub;
52916:     switch (JSOp(*f.regs.pc)) {
52916:       case JSOP_PROPINC:
52916:       case JSOP_PROPDEC:
52916:       case JSOP_INCPROP:
52916:       case JSOP_DECPROP:
52916:         stub = SetPropDumb;
52916:         break;
52916:       default:
52916:         stub = SetPropSlow;
52916:         break;
52916:     }
52916: 
52916:     SetPropCompiler cc(f, script, obj, pic, atom, stub);
52887:     if (!cc.update()) {
52887:         cc.disable("error");
52887:         THROW();
52887:     }
52887:     
52887:     Value rval = f.regs.sp[-1];
52887:     if (!obj->setProperty(f.cx, ATOM_TO_JSID(atom), &f.regs.sp[-1]))
52887:         THROW();
52887:     f.regs.sp[-2] = rval;
52886: }
52880: 
52896: static void JS_FASTCALL
52896: CallPropSlow(VMFrame &f, uint32 index)
52896: {
52896:     JSScript *script = f.fp->script;
52896:     ic::PICInfo &pic = script->pics[index];
52896:     stubs::CallProp(f, pic.atom);
52896: }
52896: 
52896: void JS_FASTCALL
52896: ic::CallProp(VMFrame &f, uint32 index)
52896: {
52896:     JSContext *cx = f.cx;
52896:     JSFrameRegs &regs = f.regs;
52896: 
52896:     JSScript *script = f.fp->script;
52896:     ic::PICInfo &pic = script->pics[index];
52896:     JSAtom *origAtom = pic.atom;
52896: 
52896:     Value lval;
52896:     lval = regs.sp[-1];
52896: 
52896:     Value objv;
52896:     if (lval.isObject()) {
52896:         objv = lval;
52896:     } else {
52896:         JSProtoKey protoKey;
52896:         if (lval.isString()) {
52896:             protoKey = JSProto_String;
52896:         } else if (lval.isNumber()) {
52896:             protoKey = JSProto_Number;
52896:         } else if (lval.isBoolean()) {
52896:             protoKey = JSProto_Boolean;
52896:         } else {
52896:             JS_ASSERT(lval.isNull() || lval.isUndefined());
52896:             js_ReportIsNullOrUndefined(cx, -1, lval, NULL);
52896:             THROW();
52896:         }
52896:         JSObject *pobj;
52896:         if (!js_GetClassPrototype(cx, NULL, protoKey, &pobj))
52896:             THROW();
52896:         objv.setNonFunObj(*pobj);
52896:     }
52896: 
52896:     JSObject *aobj = js_GetProtoIfDenseArray(&objv.asObject());
52896:     Value rval;
52896: 
52896:     bool usePIC = true;
52896: 
52896:     PropertyCacheEntry *entry;
52896:     JSObject *obj2;
52896:     JSAtom *atom;
52896:     JS_PROPERTY_CACHE(cx).test(cx, regs.pc, aobj, obj2, entry, atom);
52896:     if (!atom) {
52896:         if (entry->vword.isFunObj()) {
52896:             rval.setFunObj(entry->vword.toFunObj());
52896:         } else if (entry->vword.isSlot()) {
52896:             uint32 slot = entry->vword.toSlot();
52896:             JS_ASSERT(slot < obj2->scope()->freeslot);
52896:             rval = obj2->lockedGetSlot(slot);
52896:         } else {
52896:             JS_ASSERT(entry->vword.isSprop());
52896:             JSScopeProperty *sprop = entry->vword.toSprop();
52896:             NATIVE_GET(cx, &objv.asObject(), obj2, sprop, JSGET_NO_METHOD_BARRIER, &rval,
52896:                        THROW());
52896:         }
52896:         regs.sp++;
52896:         regs.sp[-2] = rval;
52896:         regs.sp[-1] = lval;
52896:         goto end_callprop;
52896:     }
52896: 
52896:     /*
52896:      * Cache miss: use the immediate atom that was loaded for us under
52896:      * PropertyCache::test.
52896:      */
52896:     jsid id;
52896:     id = ATOM_TO_JSID(origAtom);
52896: 
52896:     regs.sp++;
52896:     regs.sp[-1].setNull();
52896:     if (lval.isObject()) {
52896:         if (!js_GetMethod(cx, &objv.asObject(), id,
52896:                           JS_LIKELY(aobj->map->ops->getProperty == js_GetProperty)
52896:                           ? JSGET_CACHE_RESULT | JSGET_NO_METHOD_BARRIER
52896:                           : JSGET_NO_METHOD_BARRIER,
52896:                           &rval)) {
52896:             THROW();
52896:         }
52896:         regs.sp[-1] = objv;
52896:         regs.sp[-2] = rval;
52896:     } else {
52896:         JS_ASSERT(objv.asObject().map->ops->getProperty == js_GetProperty);
52896:         if (!js_GetPropertyHelper(cx, &objv.asObject(), id,
52896:                                   JSGET_CACHE_RESULT | JSGET_NO_METHOD_BARRIER,
52896:                                   &rval)) {
52896:             THROW();
52896:         }
52896:         regs.sp[-1] = lval;
52896:         regs.sp[-2] = rval;
52896:     }
52896: 
52896:   end_callprop:
52896:     /* Wrap primitive lval in object clothing if necessary. */
52896:     if (lval.isPrimitive()) {
52896:         /* FIXME: https://bugzilla.mozilla.org/show_bug.cgi?id=412571 */
52896:         if (!rval.isFunObj() ||
52954:             !PrimitiveThisTest(GET_FUNCTION_PRIVATE(cx, &rval.asFunObj()), lval)) {
52896:             if (!js_PrimitiveToObject(cx, &regs.sp[-1]))
52896:                 THROW();
52896:             usePIC = false;
52896:         }
52896:     }
52896: 
52907:     GetPropCompiler cc(f, script, &objv.asObject(), pic, origAtom, CallPropSlow);
52896:     if (usePIC) {
52907:         if (lval.isObject()) {
52896:             if (!cc.update()) {
52896:                 cc.disable("error");
52896:                 THROW();
52896:             }
52907:         } else if (lval.isString()) {
52907:             if (!cc.generateStringCallStub()) {
52907:                 cc.disable("error");
52907:                 THROW();
52907:             }
52906:         } else {
52907:             cc.disable("non-string primitive");
52896:         }
52906:     } else {
52906:         cc.disable("wrapped primitive");
52896:     }
52896: 
52896: #if JS_HAS_NO_SUCH_METHOD
52896:     if (JS_UNLIKELY(rval.isUndefined())) {
52896:         regs.sp[-2].setString(ATOM_TO_STRING(origAtom));
52896:         if (!js_OnUnknownMethod(cx, regs.sp - 2))
52896:             THROW();
52896:     }
52896: #endif
52896: }
52896: 
52880: void
52880: ic::PurgePICs(JSContext *cx, JSScript *script)
52880: {
52880:     uint32 npics = script->numPICs();
52880:     for (uint32 i = 0; i < npics; i++) {
52880:         ic::PICInfo &pic = script->pics[i];
52896:         if (pic.kind == ic::PICInfo::SET)
52896:             SetPropCompiler::reset(pic);
52896:         else
52880:             GetPropCompiler::reset(pic);
52880:         pic.reset();
52880:     }
52880: }
52884: #endif
52880: 
