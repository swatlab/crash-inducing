    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Uri Bernstein <uriber@gmail.com>
    1:  *   Haamed Gheibi <gheibi@metanetworking.com>
24437:  *   Ehsan Akhgari <ehsan.akhgari@gmail.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifdef IBMBIDI
    1: 
    1: #include "nsBidiPresUtils.h"
    1: #include "nsTextFragment.h"
    1: #include "nsGkAtoms.h"
    1: #include "nsPresContext.h"
    1: #include "nsIRenderingContext.h"
    1: #include "nsIServiceManager.h"
    1: #include "nsFrameManager.h"
    1: #include "nsBidiFrames.h"
    1: #include "nsBidiUtils.h"
    1: #include "nsCSSFrameConstructor.h"
    1: #include "nsHTMLContainerFrame.h"
    1: #include "nsInlineFrame.h"
 5421: #include "nsPlaceholderFrame.h"
32841: #include "nsContainerFrame.h"
39530: #include "nsFirstLetterFrame.h"
    1: 
39965: using namespace mozilla;
39965: 
    1: static const PRUnichar kSpace            = 0x0020;
    1: static const PRUnichar kLineSeparator    = 0x2028;
    1: static const PRUnichar kObjectSubstitute = 0xFFFC;
    1: static const PRUnichar kLRE              = 0x202A;
    1: static const PRUnichar kRLE              = 0x202B;
    1: static const PRUnichar kLRO              = 0x202D;
    1: static const PRUnichar kRLO              = 0x202E;
    1: static const PRUnichar kPDF              = 0x202C;
    1: static const PRUnichar ALEF              = 0x05D0;
    1: 
    1: #define CHAR_IS_HEBREW(c) ((0x0590 <= (c)) && ((c)<= 0x05FF))
    1: // Note: The above code are moved from gfx/src/windows/nsRenderingContextWin.cpp
    1: 
    1: nsIFrame*
    1: NS_NewDirectionalFrame(nsIPresShell* aPresShell, nsStyleContext* aContext, PRUnichar aChar);
    1: 
    1: nsBidiPresUtils::nsBidiPresUtils() : mArraySize(8),
    1:                                      mIndexMap(nsnull),
    1:                                      mLevels(nsnull),
    1:                                      mSuccess(NS_ERROR_FAILURE),
    1:                                      mBidiEngine(nsnull)
    1: {
    1:   mBidiEngine = new nsBidi();
    1:   if (mBidiEngine && mContentToFrameIndex.Init()) {
    1:     mSuccess = NS_OK;
    1:   }
    1: }
    1: 
    1: nsBidiPresUtils::~nsBidiPresUtils()
    1: {
    1:   if (mLevels) {
    1:     delete[] mLevels;
    1:   }
    1:   if (mIndexMap) {
    1:     delete[] mIndexMap;
    1:   }
    1:   delete mBidiEngine;
    1: }
    1: 
    1: PRBool
    1: nsBidiPresUtils::IsSuccessful() const
    1: { 
    1:   return NS_SUCCEEDED(mSuccess); 
    1: }
    1: 
    1: /* Some helper methods for Resolve() */
    1: 
    1: // Should this frame be split between text runs?
    1: PRBool
    1: IsBidiSplittable(nsIFrame* aFrame) {
    1:   nsIAtom* frameType = aFrame->GetType();
    1:   // Bidi inline containers should be split, unless they're line frames.
    1:   return aFrame->IsFrameOfType(nsIFrame::eBidiInlineContainer)
    1:     && frameType != nsGkAtoms::lineFrame;
    1: }
    1: 
    1: static nsresult
 5423: SplitInlineAncestors(nsIFrame*     aFrame)
    1: {
 5423:   nsPresContext *presContext = aFrame->PresContext();
 5423:   nsIPresShell *presShell = presContext->PresShell();
    1:   nsIFrame* frame = aFrame;
    1:   nsIFrame* parent = aFrame->GetParent();
    1:   nsIFrame* newParent;
    1: 
    1:   while (IsBidiSplittable(parent)) {
    1:     nsIFrame* grandparent = parent->GetParent();
    1:     NS_ASSERTION(grandparent, "Couldn't get parent's parent in nsBidiPresUtils::SplitInlineAncestors");
    1:     
    1:     nsresult rv = presShell->FrameConstructor()->
 5423:       CreateContinuingFrame(presContext, parent, grandparent, &newParent, PR_FALSE);
    1:     if (NS_FAILED(rv)) {
    1:       return rv;
    1:     }
    1:     
32841:     // Split the child list after |frame|.
32841:     nsContainerFrame* container = do_QueryFrame(parent);
32841:     nsFrameList tail = container->StealFramesAfter(frame);
30941: 
30941:     // Reparent views as necessary
32841:     rv = nsHTMLContainerFrame::ReparentFrameViewList(presContext, tail, parent, newParent);
    1:     if (NS_FAILED(rv)) {
    1:       return rv;
    1:     }
    1:     
32841:     // The parent's continuation adopts the siblings after the split.
32841:     rv = newParent->InsertFrames(nsGkAtoms::nextBidi, nsnull, tail);
    1:     if (NS_FAILED(rv)) {
    1:       return rv;
    1:     }
    1:     // The list name nsGkAtoms::nextBidi would indicate we don't want reflow
32841:     nsFrameList temp(newParent, newParent);
32841:     rv = grandparent->InsertFrames(nsGkAtoms::nextBidi, parent, temp);
    1:     if (NS_FAILED(rv)) {
    1:       return rv;
    1:     }
    1:     
    1:     frame = parent;
    1:     parent = grandparent;
    1:   }
    1:   
    1:   return NS_OK;
    1: }
    1: 
13426: // Convert bidi continuations to fluid continuations for a frame and all of its
13426: // inline ancestors.
13428: static void
13426: JoinInlineAncestors(nsIFrame* aFrame)
13426: {
13426:   nsIFrame* frame = aFrame;
13426:   while (frame && IsBidiSplittable(frame)) {
13426:     nsIFrame* next = frame->GetNextContinuation();
13426:     if (next) {
13426:       NS_ASSERTION (!frame->GetNextInFlow() || frame->GetNextInFlow() == next, 
13426:                     "next-in-flow is not next continuation!");
13426:       frame->SetNextInFlow(next);
13426: 
13426:       NS_ASSERTION (!next->GetPrevInFlow() || next->GetPrevInFlow() == frame,
13426:                     "prev-in-flow is not prev continuation!");
13426:       next->SetPrevInFlow(frame);
13426:     }
13639:     // Join the parent only as long as we're its last child.
13639:     if (frame->GetNextSibling())
13639:       break;
13426:     frame = frame->GetParent();
13426:   }
13426: }
13426: 
    1: static nsresult
 5423: CreateBidiContinuation(nsIFrame*       aFrame,
    1:                        nsIFrame**      aNewFrame)
    1: {
    1:   NS_PRECONDITION(aNewFrame, "null OUT ptr");
    1:   NS_PRECONDITION(aFrame, "null ptr");
    1: 
    1:   *aNewFrame = nsnull;
    1: 
 5423:   nsPresContext *presContext = aFrame->PresContext();
 5423:   nsIPresShell *presShell = presContext->PresShell();
    1:   NS_ASSERTION(presShell, "PresShell must be set on PresContext before calling nsBidiPresUtils::CreateBidiContinuation");
    1: 
    1:   nsIFrame* parent = aFrame->GetParent();
    1:   NS_ASSERTION(parent, "Couldn't get frame parent in nsBidiPresUtils::CreateBidiContinuation");
    1: 
39530:   nsresult rv = NS_OK;
    1:   
34443:   // Have to special case floating first letter frames because the continuation
34443:   // doesn't go in the first letter frame. The continuation goes with the rest
34443:   // of the text that the first letter frame was made out of.
34443:   if (parent->GetType() == nsGkAtoms::letterFrame &&
34443:       parent->GetStyleDisplay()->IsFloating()) {
39530:     nsFirstLetterFrame* letterFrame = do_QueryFrame(parent);
39530:     rv = letterFrame->CreateContinuationForFloatingParent(presContext, aFrame,
39530:                                                           aNewFrame, PR_FALSE);
39530:     return rv;
34443:   }
34443: 
39530:   rv = presShell->FrameConstructor()->
39530:     CreateContinuingFrame(presContext, aFrame, parent, aNewFrame, PR_FALSE);
39530:   if (NS_FAILED(rv)) {
34443:     return rv;
34443:   }
34443: 
    1:   // The list name nsGkAtoms::nextBidi would indicate we don't want reflow
30941:   // XXXbz this needs higher-level framelist love
32846:   nsFrameList temp(*aNewFrame, *aNewFrame);
30941:   rv = parent->InsertFrames(nsGkAtoms::nextBidi, aFrame, temp);
    1:   if (NS_FAILED(rv)) {
    1:     return rv;
    1:   }
    1:   
    1:   // Split inline ancestor frames
 5423:   rv = SplitInlineAncestors(aFrame);
    1:   if (NS_FAILED(rv)) {
    1:     return rv;
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
 5421: static PRBool
10962: IsFrameInCurrentLine(nsBlockInFlowLineIterator* aLineIter,
10962:                      nsIFrame* aPrevFrame, nsIFrame* aFrame)
10962: {
10962:   nsIFrame* endFrame = aLineIter->IsLastLineInList() ? nsnull :
10962:     aLineIter->GetLine().next()->mFirstChild;
10962:   nsIFrame* startFrame = aPrevFrame ? aPrevFrame : aLineIter->GetLine()->mFirstChild;
32846:   for (nsIFrame* frame = startFrame; frame && frame != endFrame;
32846:        frame = frame->GetNextSibling()) {
32846:     if (frame == aFrame)
32846:       return PR_TRUE;
32846:   }
32846:   return PR_FALSE;
10962: }
10962: 
10962: static void
    1: AdvanceLineIteratorToFrame(nsIFrame* aFrame,
10962:                            nsBlockInFlowLineIterator* aLineIter,
10962:                            nsIFrame*& aPrevFrame)
    1: {
    1:   // Advance aLine to the line containing aFrame
    1:   nsIFrame* child = aFrame;
10962:   nsFrameManager* frameManager = aFrame->PresContext()->FrameManager();
10962:   nsIFrame* parent = nsLayoutUtils::GetParentOrPlaceholderFor(frameManager, child);
10962:   while (parent && !nsLayoutUtils::GetAsBlock(parent)) {
    1:     child = parent;
10962:     parent = nsLayoutUtils::GetParentOrPlaceholderFor(frameManager, child);
    1:   }
    1:   NS_ASSERTION (parent, "aFrame is not a descendent of aBlockFrame");
10962:   while (!IsFrameInCurrentLine(aLineIter, aPrevFrame, child)) {
10962: #ifdef DEBUG
10962:     PRBool hasNext =
10962: #endif
10962:       aLineIter->Next();
10962:     NS_ASSERTION(hasNext, "Can't find frame in lines!");
    1:     aPrevFrame = nsnull;
    1:   }
    1:   aPrevFrame = child;
    1: }
    1: 
    1: /*
    1:  * Overview of the implementation of Resolve():
    1:  *
    1:  *  Walk through the descendants of aBlockFrame and build:
24551:  *   * mLogicalFrames: an nsTArray of nsIFrame* pointers in logical order
    1:  *   * mBuffer: an nsAutoString containing a representation of
    1:  *     the content of the frames.
    1:  *     In the case of text frames, this is the actual text context of the
    1:  *     frames, but some other elements are represented in a symbolic form which
    1:  *     will make the Unicode Bidi Algorithm give the correct results.
    1:  *     Bidi embeddings and overrides set by CSS or <bdo> elements are
    1:  *     represented by the corresponding Unicode control characters.
    1:  *     <br> elements are represented by U+2028 LINE SEPARATOR
    1:  *     Other inline elements are represented by U+FFFC OBJECT REPLACEMENT
    1:  *     CHARACTER
    1:  *
    1:  *  Then pass mBuffer to the Bidi engine for resolving of embedding levels
    1:  *  by nsBidi::SetPara() and division into directional runs by
    1:  *  nsBidi::CountRuns().
    1:  *
    1:  *  Finally, walk these runs in logical order using nsBidi::GetLogicalRun() and
24551:  *  correlate them with the frames indexed in mLogicalFrames, setting the
42116:  *  baseLevel and embeddingLevel properties according to the results returned
42116:  *  by the Bidi engine.
    1:  *
    1:  *  The rendering layer requires each text frame to contain text in only one
42116:  *  direction, so we may need to call EnsureBidiContinuation() to split frames.
42116:  *  We may also need to call RemoveBidiContinuation() to convert frames created
42116:  *  by EnsureBidiContinuation() in previous reflows into fluid continuations.
    1:  */
    1: nsresult
41312: nsBidiPresUtils::Resolve(nsBlockFrame* aBlockFrame)
    1: {
    1:   mLogicalFrames.Clear();
    1:   mContentToFrameIndex.Clear();
    1:   
 5423:   nsPresContext *presContext = aBlockFrame->PresContext();
 5423:   nsIPresShell* shell = presContext->PresShell();
    1:   nsStyleContext* styleContext = aBlockFrame->GetStyleContext();
    1: 
    1:   // handle bidi-override being set on the block itself before calling
    1:   // InitLogicalArray.
    1:   const nsStyleVisibility* vis = aBlockFrame->GetStyleVisibility();
    1:   const nsStyleTextReset* text = aBlockFrame->GetStyleTextReset();
    1: 
    1:   if (text->mUnicodeBidi == NS_STYLE_UNICODE_BIDI_OVERRIDE) {
    1:     nsIFrame *directionalFrame = nsnull;
    1: 
    1:     if (NS_STYLE_DIRECTION_RTL == vis->mDirection) {
    1:       directionalFrame = NS_NewDirectionalFrame(shell, styleContext, kRLO);
    1:     }
    1:     else if (NS_STYLE_DIRECTION_LTR == vis->mDirection) {
    1:       directionalFrame = NS_NewDirectionalFrame(shell, styleContext, kLRO);
    1:     }
    1: 
    1:     if (directionalFrame) {
    1:       mLogicalFrames.AppendElement(directionalFrame);
    1:     }
    1:   }
 9542:   for (nsBlockFrame* block = aBlockFrame; block;
 9542:        block = static_cast<nsBlockFrame*>(block->GetNextContinuation())) {
 9542:     block->RemoveStateBits(NS_BLOCK_NEEDS_BIDI_RESOLUTION);
 9542:     InitLogicalArray(block->GetFirstChild(nsnull));
 9542:   }
    1: 
    1:   if (text->mUnicodeBidi == NS_STYLE_UNICODE_BIDI_OVERRIDE) {
    1:     nsIFrame* directionalFrame = NS_NewDirectionalFrame(shell, styleContext, kPDF);
    1:     if (directionalFrame) {
    1:       mLogicalFrames.AppendElement(directionalFrame);
    1:     }
    1:   }
    1: 
 5423:   CreateBlockBuffer();
    1: 
    1:   PRInt32 bufferLength = mBuffer.Length();
    1: 
    1:   if (bufferLength < 1) {
    1:     mSuccess = NS_OK;
    1:     return mSuccess;
    1:   }
    1:   PRInt32 runCount;
    1:   PRUint8 embeddingLevel;
    1: 
    1:   nsBidiLevel paraLevel = embeddingLevel =
    1:     (NS_STYLE_DIRECTION_RTL == vis->mDirection)
    1:     ? NSBIDI_RTL : NSBIDI_LTR;
    1: 
    1:   mSuccess = mBidiEngine->SetPara(mBuffer.get(), bufferLength, paraLevel, nsnull);
    1:   if (NS_FAILED(mSuccess) ) {
    1:       return mSuccess;
    1:   }
    1: 
    1:   mSuccess = mBidiEngine->CountRuns(&runCount);
    1:   if (NS_FAILED(mSuccess) ) {
    1:     return mSuccess;
    1:   }
29930:   PRInt32     runLength      = 0;   // the length of the current run of text
29930:   PRInt32     lineOffset     = 0;   // the start of the current run
29930:   PRInt32     logicalLimit   = 0;   // the end of the current run + 1
29930:   PRInt32     numRun         = -1;
29930:   PRInt32     fragmentLength = 0;   // the length of the current text frame
29930:   PRInt32     frameIndex     = -1;  // index to the frames in mLogicalFrames
24551:   PRInt32     frameCount     = mLogicalFrames.Length();
29930:   PRInt32     contentOffset  = 0;   // offset of current frame in its content node
    1:   PRBool      isTextFrame    = PR_FALSE;
    1:   nsIFrame*   frame = nsnull;
    1:   nsIContent* content = nsnull;
27501:   PRInt32     contentTextLength;
    1:   nsIAtom*    frameType = nsnull;
    1: 
39965:   FramePropertyTable *propTable = presContext->PropertyTable();
    1: 
10962:   nsBlockInFlowLineIterator lineIter(aBlockFrame, aBlockFrame->begin_lines(), PR_FALSE);
10962:   if (lineIter.GetLine() == aBlockFrame->end_lines()) {
10962:     // Advance to first valid line (might be in a next-continuation)
10962:     lineIter.Next();
10962:   }
    1:   nsIFrame* prevFrame = nsnull;
    1:   PRBool lineNeedsUpdate = PR_FALSE;
    1: 
41312:   PRBool isVisual = presContext->IsVisualMode();
41312:   if (isVisual) {
41312:     /**
41312:      * Drill up in content to detect whether this is an element that needs to be
41312:      * rendered with logical order even on visual pages.
41312:      *
41312:      * We always use logical order on form controls, firstly so that text entry
41312:      * will be in logical order, but also because visual pages were written with
41312:      * the assumption that even if the browser had no support for right-to-left
41312:      * text rendering, it would use native widgets with bidi support to display
41312:      * form controls.
41312:      *
41312:      * We also use logical order in XUL elements, since we expect that if a XUL
41312:      * element appears in a visual page, it will be generated by an XBL binding
41312:      * and contain localized text which will be in logical order.
41312:      */
41312:     for (content = aBlockFrame->GetContent() ; content; content = content->GetParent()) {
41312:       if (content->IsNodeOfType(nsINode::eHTML_FORM_CONTROL) || content->IsXUL()) {
41312:         isVisual = PR_FALSE;
41312:         break;
41312:       }
41312:     }
41312:   }
41312:   
    1:   for (; ;) {
    1:     if (fragmentLength <= 0) {
29930:       // Get the next frame from mLogicalFrames
    1:       if (++frameIndex >= frameCount) {
    1:         break;
    1:       }
24551:       frame = mLogicalFrames[frameIndex];
    1:       frameType = frame->GetType();
    1:       lineNeedsUpdate = PR_TRUE;
    1:       if (nsGkAtoms::textFrame == frameType) {
    1:         content = frame->GetContent();
    1:         if (!content) {
    1:           mSuccess = NS_OK;
    1:           break;
    1:         }
27501:         contentTextLength = content->TextLength();
27501:         if (contentTextLength == 0) {
27501:           frame->AdjustOffsetsForBidi(0, 0);
27869:           // Set the base level and embedding level of the current run even
27869:           // on an empty frame. Otherwise frame reordering will not be correct.
39965:           propTable->Set(frame, nsIFrame::EmbeddingLevelProperty(),
39965:                          NS_INT32_TO_PTR(embeddingLevel));
39965:           propTable->Set(frame, nsIFrame::BaseLevelProperty(),
39965:                          NS_INT32_TO_PTR(paraLevel));
27501:           continue;
    1:         }
27501:         PRInt32 start, end;
27501:         frame->GetOffsets(start, end);
27501:         fragmentLength = end - start;
27501:         contentOffset = start;
    1:         isTextFrame = PR_TRUE;
29930:       }
    1:       else {
29930:         /*
29930:          * Any non-text frame corresponds to a single character in the text buffer
29930:          * (a bidi control character, LINE SEPARATOR, or OBJECT SUBSTITUTE)
29930:          */
    1:         isTextFrame = PR_FALSE;
    1:         fragmentLength = 1;
    1:       }
    1:     } // if (fragmentLength <= 0)
29930: 
    1:     if (runLength <= 0) {
29930:       // Get the next run of text from the Bidi engine
    1:       if (++numRun >= runCount) {
    1:         break;
    1:       }
    1:       lineOffset = logicalLimit;
    1:       if (NS_FAILED(mBidiEngine->GetLogicalRun(
    1:               lineOffset, &logicalLimit, &embeddingLevel) ) ) {
    1:         break;
    1:       }
    1:       runLength = logicalLimit - lineOffset;
    1:       if (isVisual) {
    1:         embeddingLevel = paraLevel;
    1:       }
    1:     } // if (runLength <= 0)
    1: 
    1:     if (nsGkAtoms::directionalFrame == frameType) {
    1:       frame->Destroy();
    1:       frame = nsnull;
    1:       ++lineOffset;
    1:     }
    1:     else {
39965:       propTable->Set(frame, nsIFrame::EmbeddingLevelProperty(),
39965:                      NS_INT32_TO_PTR(embeddingLevel));
39965:       propTable->Set(frame, nsIFrame::BaseLevelProperty(),
39965:                      NS_INT32_TO_PTR(paraLevel));
    1:       if (isTextFrame) {
    1:         if ( (runLength > 0) && (runLength < fragmentLength) ) {
29930:           /*
29930:            * The text in this frame continues beyond the end of this directional run.
29930:            * Create a non-fluid continuation frame for the next directional run.
29930:            */
    1:           if (lineNeedsUpdate) {
10962:             AdvanceLineIteratorToFrame(frame, &lineIter, prevFrame);
    1:             lineNeedsUpdate = PR_FALSE;
    1:           }
10962:           lineIter.GetLine()->MarkDirty();
29930:           nsIFrame* nextBidi;
36825:           PRInt32 runEnd = contentOffset + runLength;
27501:           EnsureBidiContinuation(frame, &nextBidi, frameIndex,
13495:                                  contentOffset,
36825:                                  runEnd);
27501:           if (NS_FAILED(mSuccess)) {
13495:             break;
13495:           }
36825:           nextBidi->AdjustOffsetsForBidi(runEnd,
36825:                                          contentOffset + fragmentLength);
    1:           frame = nextBidi;
36825:           contentOffset = runEnd;
    1:         } // if (runLength < fragmentLength)
    1:         else {
27501:           if (contentOffset + fragmentLength == contentTextLength) {
29930:             /* 
29930:              * We have finished all the text in this content node. Convert any
29930:              * further non-fluid continuations to fluid continuations and advance
29930:              * frameIndex to the last frame in the content node
29930:              */
    1:             PRInt32 newIndex = 0;
    1:             mContentToFrameIndex.Get(content, &newIndex);
    1:             if (newIndex > frameIndex) {
29930:               RemoveBidiContinuation(frame, frameIndex, newIndex, lineOffset);
28985:               frameIndex = newIndex;
28985:             }
29930:           } else if (fragmentLength > 0 && runLength > fragmentLength) {
29930:             /*
29930:              * There is more text that belongs to this directional run in the next
29930:              * text frame: make sure it is a fluid continuation of the current frame.
29930:              * Do not advance frameIndex, because the next frame may contain
29930:              * multi-directional text and need to be split
29930:              */
29930:             PRInt32 newIndex = frameIndex;
29930:             do {
29930:             } while (mLogicalFrames[++newIndex]->GetType() == nsGkAtoms::directionalFrame);
29930:             RemoveBidiContinuation(frame, frameIndex, newIndex, lineOffset);
33658:           } else if (runLength == fragmentLength) {
33658:             /*
33658:              * The directional run ends at the end of the frame. Make sure that
33658:              * the next frame is a non-fluid continuation
33658:              */
33658:             nsIFrame* next = frame->GetNextInFlow();
33658:             if (next) {
33658:               frame->SetNextContinuation(next);
33658:               next->SetPrevContinuation(frame);
33658:             }
28985:           }
28985:           frame->AdjustOffsetsForBidi(contentOffset, contentOffset + fragmentLength);
    1:           if (lineNeedsUpdate) {
10962:             AdvanceLineIteratorToFrame(frame, &lineIter, prevFrame);
    1:             lineNeedsUpdate = PR_FALSE;
    1:           }
10962:           lineIter.GetLine()->MarkDirty();
    1:         }
    1:       } // isTextFrame
    1:       else {
    1:         ++lineOffset;
    1:       }
    1:     } // not directionalFrame
29930:     PRInt32 temp = runLength;
    1:     runLength -= fragmentLength;
    1:     fragmentLength -= temp;
    1: 
13426:     if (frame && fragmentLength <= 0) {
43881:       // If the frame is at the end of a run, split all ancestor inlines that
43881:       // need splitting.
43881:       // To determine whether we're at the end of the run, we check that we've
43881:       // finished processing the current run, and that the current frame
43881:       // doesn't have a fluid continuation (it could have a fluid continuation
43881:       // of zero length, so testing runLength alone is not sufficient).
43881:       if (runLength <= 0 && !frame->GetNextInFlow()) {
    1:         nsIFrame* child = frame;
    1:         nsIFrame* parent = frame->GetParent();
13426:         // As long as we're on the last sibling, the parent doesn't have to be split.
43566:         // However, if the parent has a fluid continuation, we do have to make
43566:         // it non-fluid. This can happen e.g. when we have a first-letter frame
43566:         // and the end of the first-letter coincides with the end of a
43566:         // directional run.
    1:         while (parent &&
    1:                IsBidiSplittable(parent) &&
    1:                !child->GetNextSibling()) {
43566:           nsIFrame* next = parent->GetNextInFlow();
43566:           if (next) {
43566:             parent->SetNextContinuation(next);
43566:             next->SetPrevContinuation(parent);
43566:           }
    1:           child = parent;
    1:           parent = child->GetParent();
    1:         }
    1:         if (parent && IsBidiSplittable(parent))
 5423:           SplitInlineAncestors(child);
    1:       }
13639:       else if (!frame->GetNextSibling()) {
13639:         // We're not at an end of a run, and |frame| is the last child of its parent.
13639:         // If its ancestors happen to have bidi continuations, convert them into
13639:         // fluid continuations.
13426:         nsIFrame* parent = frame->GetParent();
13426:         JoinInlineAncestors(parent);
13426:       }
13426:     }
    1:   } // for
    1:   return mSuccess;
    1: }
    1: 
24551: // Should this frame be treated as a leaf (e.g. when building mLogicalFrames)?
    1: PRBool IsBidiLeaf(nsIFrame* aFrame) {
    1:   nsIFrame* kid = aFrame->GetFirstChild(nsnull);
    1:   return !kid
 5421:     || !aFrame->IsFrameOfType(nsIFrame::eBidiInlineContainer);
    1: }
    1: 
 5423: void
 5423: nsBidiPresUtils::InitLogicalArray(nsIFrame*       aCurrentFrame)
    1: {
 9542:   if (!aCurrentFrame)
 9542:     return;
 9542: 
 5423:   nsIPresShell* shell = aCurrentFrame->PresContext()->PresShell();
    1:   nsStyleContext* styleContext;
    1: 
 5423:   for (nsIFrame* childFrame = aCurrentFrame; childFrame;
 5421:        childFrame = childFrame->GetNextSibling()) {
 5421: 
 5596:     // If the real frame for a placeholder is an inline container, we need to
 5596:     // drill down into it and include its contents in Bidi resolution. If it
 5596:     // isn't an inline container, we just use the placeholder.
 5596:     nsIFrame* frame = childFrame;
 5596:     if (nsGkAtoms::placeholderFrame == childFrame->GetType()) {
 5596:       nsIFrame* realFrame =
 5596:         nsPlaceholderFrame::GetRealFrameForPlaceholder(childFrame);
 5596:       if (realFrame->IsFrameOfType(nsIFrame::eBidiInlineContainer)) {
 5596:         frame = realFrame;
 5596:       }
 5596:     }
    1: 
 1152:     PRUnichar ch = 0;
 5423:     if (frame->IsFrameOfType(nsIFrame::eBidiInlineContainer)) {
    1:       const nsStyleVisibility* vis = frame->GetStyleVisibility();
    1:       const nsStyleTextReset* text = frame->GetStyleTextReset();
    1:       switch (text->mUnicodeBidi) {
    1:         case NS_STYLE_UNICODE_BIDI_NORMAL:
    1:           break;
    1:         case NS_STYLE_UNICODE_BIDI_EMBED:
    1:           styleContext = frame->GetStyleContext();
    1: 
    1:           if (NS_STYLE_DIRECTION_RTL == vis->mDirection) {
 1152:             ch = kRLE;
    1:           }
    1:           else if (NS_STYLE_DIRECTION_LTR == vis->mDirection) {
 1152:             ch = kLRE;
    1:           }
    1:           break;
    1:         case NS_STYLE_UNICODE_BIDI_OVERRIDE:
    1:           styleContext = frame->GetStyleContext();
    1: 
    1:           if (NS_STYLE_DIRECTION_RTL == vis->mDirection) {
 1152:             ch = kRLO;
    1:           }
    1:           else if (NS_STYLE_DIRECTION_LTR == vis->mDirection) {
 1152:             ch = kLRO;
    1:           }
    1:           break;
    1:       }
    1: 
    1:       // Create a directional frame before the first frame of an
    1:       // element specifying embedding or override
 1152:       if (ch != 0 && !frame->GetPrevContinuation()) {
 1152:         nsIFrame* dirFrame = NS_NewDirectionalFrame(shell, styleContext, ch);
 1152:         if (dirFrame) {
 1152:           mLogicalFrames.AppendElement(dirFrame);
 1152:         }
    1:       }
    1:     }
    1: 
    1:     if (IsBidiLeaf(frame)) {
    1:       /* Bidi leaf frame: add the frame to the mLogicalFrames array,
    1:        * and add its index to the mContentToFrameIndex hashtable. This
    1:        * will be used in RemoveBidiContinuation() to identify the last
    1:        * frame in the array with a given content.
    1:        */
    1:       nsIContent* content = frame->GetContent();
    1:       if (content) {
24551:         mContentToFrameIndex.Put(content, mLogicalFrames.Length());
    1:       }
    1:       mLogicalFrames.AppendElement(frame);
    1:     }
    1:     else {
    1:       nsIFrame* kid = frame->GetFirstChild(nsnull);
 5423:       InitLogicalArray(kid);
    1:     }
    1: 
    1:     // If the element is attributed by dir, indicate direction pop (add PDF frame)
 1152:     if (ch != 0 && !frame->GetNextContinuation()) {
    1:       // Create a directional frame after the last frame of an
    1:       // element specifying embedding or override
 1152:       nsIFrame* dirFrame = NS_NewDirectionalFrame(shell, styleContext, kPDF);
 1152:       if (dirFrame) {
 1152:         mLogicalFrames.AppendElement(dirFrame);
    1:       }
    1:     }
    1:   } // for
    1: }
    1: 
    1: void
 5423: nsBidiPresUtils::CreateBlockBuffer()
    1: {
    1:   mBuffer.SetLength(0);
    1: 
    1:   nsIFrame*                 frame;
    1:   nsIContent*               prevContent = nsnull;
    1:   PRUint32                  i;
24551:   PRUint32                  count = mLogicalFrames.Length();
    1: 
    1:   for (i = 0; i < count; i++) {
24551:     frame = mLogicalFrames[i];
    1:     nsIAtom* frameType = frame->GetType();
    1: 
    1:     if (nsGkAtoms::textFrame == frameType) {
    1:       nsIContent* content = frame->GetContent();
    1:       if (!content) {
    1:         mSuccess = NS_OK;
    1:         break;
    1:       }
    1:       if (content == prevContent) {
    1:         continue;
    1:       }
    1:       prevContent = content;
    1:       content->AppendTextTo(mBuffer);
    1:     }
    1:     else if (nsGkAtoms::brFrame == frameType) { // break frame
    1:       // Append line separator
 3745:       mBuffer.Append(kLineSeparator);
    1:     }
    1:     else if (nsGkAtoms::directionalFrame == frameType) {
 3745:       nsDirectionalFrame* dirFrame = static_cast<nsDirectionalFrame*>(frame);
    1:       mBuffer.Append(dirFrame->GetChar());
    1:     }
    1:     else { // not text frame
    1:       // See the Unicode Bidi Algorithm:
    1:       // "...inline objects (such as graphics) are treated as if they are ... U+FFFC"
 3745:       mBuffer.Append(kObjectSubstitute);
    1:     }
    1:   }
    1:   // XXX: TODO: Handle preformatted text ('\n')
    1:   mBuffer.ReplaceChar("\t\r\n", kSpace);
    1: }
    1: 
    1: void
 5423: nsBidiPresUtils::ReorderFrames(nsIFrame*            aFirstFrameOnLine,
    1:                                PRInt32              aNumFramesOnLine)
    1: {
    1:   // If this line consists of a line frame, reorder the line frame's children.
    1:   if (aFirstFrameOnLine->GetType() == nsGkAtoms::lineFrame) {
    1:     aFirstFrameOnLine = aFirstFrameOnLine->GetFirstChild(nsnull);
    1:     if (!aFirstFrameOnLine)
    1:       return;
    1:     // All children of the line frame are on the first line. Setting aNumFramesOnLine
    1:     // to -1 makes InitLogicalArrayFromLine look at all of them.
    1:     aNumFramesOnLine = -1;
    1:   }
    1: 
    1:   InitLogicalArrayFromLine(aFirstFrameOnLine, aNumFramesOnLine);
    1: 
    1:   PRBool isReordered;
    1:   PRBool hasRTLFrames;
    1:   Reorder(isReordered, hasRTLFrames);
 5423:   RepositionInlineFrames(aFirstFrameOnLine);
    1: }
    1: 
    1: nsresult
    1: nsBidiPresUtils::Reorder(PRBool& aReordered, PRBool& aHasRTLFrames)
    1: {
    1:   aReordered = PR_FALSE;
    1:   aHasRTLFrames = PR_FALSE;
24551:   PRInt32 count = mLogicalFrames.Length();
    1: 
    1:   if (mArraySize < count) {
    1:     mArraySize = count << 1;
    1:     if (mLevels) {
    1:       delete[] mLevels;
    1:       mLevels = nsnull;
    1:     }
    1:     if (mIndexMap) {
    1:       delete[] mIndexMap;
    1:       mIndexMap = nsnull;
    1:     }
    1:   }
    1:   if (!mLevels) {
    1:     mLevels = new PRUint8[mArraySize];
    1:     if (!mLevels) {
    1:       return NS_ERROR_OUT_OF_MEMORY;
    1:     }
    1:   }
    1:   memset(mLevels, 0, sizeof(PRUint8) * mArraySize);
    1: 
    1:   nsIFrame* frame;
    1:   PRInt32   i;
    1: 
    1:   for (i = 0; i < count; i++) {
24551:     frame = mLogicalFrames[i];
    1:     mLevels[i] = GetFrameEmbeddingLevel(frame);
    1:     if (mLevels[i] & 1) {
    1:       aHasRTLFrames = PR_TRUE;
    1:     }      
    1:   }
    1:   if (!mIndexMap) {
    1:     mIndexMap = new PRInt32[mArraySize];
    1:   }
    1:   if (!mIndexMap) {
    1:     mSuccess = NS_ERROR_OUT_OF_MEMORY;
    1:   }
    1:   else {
    1:     memset(mIndexMap, 0, sizeof(PRUint32) * mArraySize);
    1: 
    1:     mSuccess = mBidiEngine->ReorderVisual(mLevels, count, mIndexMap);
    1: 
    1:     if (NS_SUCCEEDED(mSuccess) ) {
    1:       mVisualFrames.Clear();
    1: 
    1:       for (i = 0; i < count; i++) {
    1:         mVisualFrames.AppendElement(mLogicalFrames[mIndexMap[i]]);
    1:         if (i != mIndexMap[i]) {
    1:           aReordered = PR_TRUE;
    1:         }
    1:       }
    1:     } // NS_SUCCEEDED(mSuccess)
    1:   } // indexMap
    1: 
    1:   if (NS_FAILED(mSuccess) ) {
    1:     aReordered = PR_FALSE;
    1:   }
    1:   return mSuccess;
    1: }
    1: 
    1: nsBidiLevel
    1: nsBidiPresUtils::GetFrameEmbeddingLevel(nsIFrame* aFrame)
    1: {
    1:   nsIFrame* firstLeaf = aFrame;
    1:   while (!IsBidiLeaf(firstLeaf)) {
34672:     firstLeaf = 
34672:       nsPlaceholderFrame::GetRealFrameFor(firstLeaf->GetFirstChild(nsnull));
    1:   }
    1:   return NS_GET_EMBEDDING_LEVEL(firstLeaf);
    1: }
    1: 
    1: nsBidiLevel
    1: nsBidiPresUtils::GetFrameBaseLevel(nsIFrame* aFrame)
    1: {
    1:   nsIFrame* firstLeaf = aFrame;
    1:   while (!IsBidiLeaf(firstLeaf)) {
    1:     firstLeaf = firstLeaf->GetFirstChild(nsnull);
    1:   }
    1:   return NS_GET_BASE_LEVEL(firstLeaf);
    1: }
    1: 
    1: void
    1: nsBidiPresUtils::IsLeftOrRightMost(nsIFrame*              aFrame,
    1:                                    nsContinuationStates*  aContinuationStates,
    1:                                    PRBool&                aIsLeftMost /* out */,
    1:                                    PRBool&                aIsRightMost /* out */) const
    1: {
    1:   const nsStyleVisibility* vis = aFrame->GetStyleVisibility();
    1:   PRBool isLTR = (NS_STYLE_DIRECTION_LTR == vis->mDirection);
    1: 
    1:   /*
    1:    * Since we lay out frames from left to right (in both LTR and RTL), visiting a
    1:    * frame with 'mFirstVisualFrame == nsnull', means it's the first appearance of
    1:    * one of its continuation chain frames on the line.
    1:    * To determine if it's the last visual frame of its continuation chain on the line
    1:    * or not, we count the number of frames of the chain on the line, and then reduce
    1:    * it when we lay out a frame of the chain. If this value becomes 1 it means
    1:    * that it's the last visual frame of its continuation chain on this line.
    1:    */
    1: 
    1:   nsFrameContinuationState* frameState = aContinuationStates->GetEntry(aFrame);
    1:   nsFrameContinuationState* firstFrameState;
    1: 
    1:   if (!frameState->mFirstVisualFrame) {
    1:     // aFrame is the first visual frame of its continuation chain
    1:     nsFrameContinuationState* contState;
    1:     nsIFrame* frame;
    1: 
    1:     frameState->mFrameCount = 1;
    1:     frameState->mFirstVisualFrame = aFrame;
    1: 
    1:     /**
    1:      * Traverse continuation chain of aFrame in both backward and forward
    1:      * directions while the frames are on this line. Count the frames and
    1:      * set their mFirstVisualFrame to aFrame.
    1:      */
    1:     // Traverse continuation chain backward
    1:     for (frame = aFrame->GetPrevContinuation();
    1:          frame && (contState = aContinuationStates->GetEntry(frame));
    1:          frame = frame->GetPrevContinuation()) {
    1:       frameState->mFrameCount++;
    1:       contState->mFirstVisualFrame = aFrame;
    1:     }
    1:     frameState->mHasContOnPrevLines = (frame != nsnull);
    1: 
    1:     // Traverse continuation chain forward
    1:     for (frame = aFrame->GetNextContinuation();
    1:          frame && (contState = aContinuationStates->GetEntry(frame));
    1:          frame = frame->GetNextContinuation()) {
    1:       frameState->mFrameCount++;
    1:       contState->mFirstVisualFrame = aFrame;
    1:     }
    1:     frameState->mHasContOnNextLines = (frame != nsnull);
    1: 
    1:     aIsLeftMost = isLTR ? !frameState->mHasContOnPrevLines
    1:                         : !frameState->mHasContOnNextLines;
    1:     firstFrameState = frameState;
    1:   } else {
    1:     // aFrame is not the first visual frame of its continuation chain
    1:     aIsLeftMost = PR_FALSE;
    1:     firstFrameState = aContinuationStates->GetEntry(frameState->mFirstVisualFrame);
    1:   }
    1: 
    1:   aIsRightMost = (firstFrameState->mFrameCount == 1) &&
    1:                  (isLTR ? !firstFrameState->mHasContOnNextLines
    1:                         : !firstFrameState->mHasContOnPrevLines);
    1: 
28217:   if ((aIsLeftMost || aIsRightMost) &&
28217:       (aFrame->GetStateBits() & NS_FRAME_IS_SPECIAL)) {
34460:     // For ib splits, don't treat anything except the last part as
34460:     // endmost or anything except the first part as startmost.
34460:     // As an optimization, only get the first continuation once.
34460:     nsIFrame* firstContinuation = aFrame->GetFirstContinuation();
34460:     if (nsLayoutUtils::FrameIsNonLastInIBSplit(firstContinuation)) {
28217:       // We are not endmost
28217:       if (isLTR) {
28217:         aIsRightMost = PR_FALSE;
28217:       } else {
28217:         aIsLeftMost = PR_FALSE;
28217:       }
34460:     }
34460:     if (nsLayoutUtils::FrameIsNonFirstInIBSplit(firstContinuation)) {
28217:       // We are not startmost
28217:       if (isLTR) {
28217:         aIsLeftMost = PR_FALSE;
28217:       } else {
28217:         aIsRightMost = PR_FALSE;
28217:       }
28217:     }
28217:   }
28217: 
    1:   // Reduce number of remaining frames of the continuation chain on the line.
    1:   firstFrameState->mFrameCount--;
    1: }
    1: 
    1: void
    1: nsBidiPresUtils::RepositionFrame(nsIFrame*              aFrame,
    1:                                  PRBool                 aIsOddLevel,
    1:                                  nscoord&               aLeft,
    1:                                  nsContinuationStates*  aContinuationStates) const
    1: {
    1:   if (!aFrame)
    1:     return;
    1: 
    1:   PRBool isLeftMost, isRightMost;
    1:   IsLeftOrRightMost(aFrame,
    1:                     aContinuationStates,
    1:                     isLeftMost /* out */,
    1:                     isRightMost /* out */);
    1: 
23554:   nsInlineFrame* testFrame = do_QueryFrame(aFrame);
    1:   if (testFrame) {
    1:     aFrame->AddStateBits(NS_INLINE_FRAME_BIDI_VISUAL_STATE_IS_SET);
    1: 
    1:     if (isLeftMost)
    1:       aFrame->AddStateBits(NS_INLINE_FRAME_BIDI_VISUAL_IS_LEFT_MOST);
    1:     else
    1:       aFrame->RemoveStateBits(NS_INLINE_FRAME_BIDI_VISUAL_IS_LEFT_MOST);
    1: 
    1:     if (isRightMost)
    1:       aFrame->AddStateBits(NS_INLINE_FRAME_BIDI_VISUAL_IS_RIGHT_MOST);
    1:     else
    1:       aFrame->RemoveStateBits(NS_INLINE_FRAME_BIDI_VISUAL_IS_RIGHT_MOST);
    1:   }
10772:   // This method is called from nsBlockFrame::PlaceLine via the call to
10772:   // bidiUtils->ReorderFrames, so this is guaranteed to be after the inlines
10772:   // have been reflowed, which is required for GetUsedMargin/Border/Padding
10772:   nsMargin margin = aFrame->GetUsedMargin();
    1:   if (isLeftMost)
    1:     aLeft += margin.left;
    1: 
    1:   nscoord start = aLeft;
    1: 
    1:   if (!IsBidiLeaf(aFrame))
    1:   {
    1:     nscoord x = 0;
10772:     nsMargin borderPadding = aFrame->GetUsedBorderAndPadding();
    1:     if (isLeftMost) {
    1:       x += borderPadding.left;
    1:     }
    1: 
    1:     // If aIsOddLevel is true, so we need to traverse the child list
    1:     // in reverse order, to make it O(n) we store the list locally and
    1:     // iterate the list reversely
24551:     nsTArray<nsIFrame*> childList;
    1:     nsIFrame *frame = aFrame->GetFirstChild(nsnull);
    1:     if (frame && aIsOddLevel) {
24551:       childList.AppendElement((nsIFrame*)nsnull);
    1:       while (frame) {
    1:         childList.AppendElement(frame);
    1:         frame = frame->GetNextSibling();
    1:       }
24551:       frame = childList[childList.Length() - 1];
    1:     }
    1: 
    1:     // Reposition the child frames
    1:     PRInt32 index = 0;
    1:     while (frame) {
    1:       RepositionFrame(frame,
    1:                       aIsOddLevel,
    1:                       x,
    1:                       aContinuationStates);
    1:       index++;
    1:       frame = aIsOddLevel ?
24551:                 childList[childList.Length() - index - 1] :
    1:                 frame->GetNextSibling();
    1:     }
    1: 
    1:     if (isRightMost) {
    1:       x += borderPadding.right;
    1:     }
    1:     aLeft += x;
    1:   } else {
    1:     aLeft += aFrame->GetSize().width;
    1:   }
    1:   nsRect rect = aFrame->GetRect();
    1:   aFrame->SetRect(nsRect(start, rect.y, aLeft - start, rect.height));
    1: 
    1:   if (isRightMost)
    1:     aLeft += margin.right;
    1: }
    1: 
    1: void
    1: nsBidiPresUtils::InitContinuationStates(nsIFrame*              aFrame,
    1:                                         nsContinuationStates*  aContinuationStates) const
    1: {
    1:   nsFrameContinuationState* state = aContinuationStates->PutEntry(aFrame);
    1:   state->mFirstVisualFrame = nsnull;
    1:   state->mFrameCount = 0;
    1: 
    1:   if (!IsBidiLeaf(aFrame)) {
    1:     // Continue for child frames
    1:     nsIFrame* frame;
    1:     for (frame = aFrame->GetFirstChild(nsnull);
    1:          frame;
    1:          frame = frame->GetNextSibling()) {
    1:       InitContinuationStates(frame,
    1:                              aContinuationStates);
    1:     }
    1:   }
    1: }
    1: 
    1: void
 5423: nsBidiPresUtils::RepositionInlineFrames(nsIFrame* aFirstChild) const
    1: {
    1:   const nsStyleVisibility* vis = aFirstChild->GetStyleVisibility();
    1:   PRBool isLTR = (NS_STYLE_DIRECTION_LTR == vis->mDirection);
    1:   nscoord leftSpace = 0;
    1: 
10772:   // This method is called from nsBlockFrame::PlaceLine via the call to
10772:   // bidiUtils->ReorderFrames, so this is guaranteed to be after the inlines
10772:   // have been reflowed, which is required for GetUsedMargin/Border/Padding
10772:   nsMargin margin = aFirstChild->GetUsedMargin();
28217:   if (!aFirstChild->GetPrevContinuation() &&
34460:       !nsLayoutUtils::FrameIsNonFirstInIBSplit(aFirstChild))
    1:     leftSpace = isLTR ? margin.left : margin.right;
    1: 
    1:   nscoord left = aFirstChild->GetPosition().x - leftSpace;
    1:   nsIFrame* frame;
24551:   PRInt32 count = mVisualFrames.Length();
    1:   PRInt32 index;
    1:   nsContinuationStates continuationStates;
    1: 
    1:   continuationStates.Init();
    1: 
    1:   // Initialize continuation states to (nsnull, 0) for
    1:   // each frame on the line.
    1:   for (index = 0; index < count; index++) {
24551:     InitContinuationStates(mVisualFrames[index], &continuationStates);
    1:   }
    1: 
    1:   // Reposition frames in visual order
    1:   for (index = 0; index < count; index++) {
24551:     frame = mVisualFrames[index];
    1:     RepositionFrame(frame,
    1:                     (mLevels[mIndexMap[index]] & 1),
    1:                     left,
    1:                     &continuationStates);
    1:   } // for
    1: }
    1: 
    1: void 
    1: nsBidiPresUtils::InitLogicalArrayFromLine(nsIFrame* aFirstFrameOnLine,
    1:                                           PRInt32   aNumFramesOnLine) {
    1:   mLogicalFrames.Clear();
    1:   for (nsIFrame* frame = aFirstFrameOnLine;
    1:        frame && aNumFramesOnLine--;
    1:        frame = frame->GetNextSibling()) {
    1:     mLogicalFrames.AppendElement(frame);
    1:   }
    1: }
    1: 
    1: PRBool
    1: nsBidiPresUtils::CheckLineOrder(nsIFrame*  aFirstFrameOnLine,
    1:                                 PRInt32    aNumFramesOnLine,
    1:                                 nsIFrame** aFirstVisual,
    1:                                 nsIFrame** aLastVisual)
    1: {
    1:   InitLogicalArrayFromLine(aFirstFrameOnLine, aNumFramesOnLine);
    1:   
    1:   PRBool isReordered;
    1:   PRBool hasRTLFrames;
    1:   Reorder(isReordered, hasRTLFrames);
24551:   PRInt32 count = mLogicalFrames.Length();
    1:   
    1:   if (aFirstVisual) {
24551:     *aFirstVisual = mVisualFrames[0];
    1:   }
    1:   if (aLastVisual) {
24551:     *aLastVisual = mVisualFrames[count-1];
    1:   }
    1:   
    1:   // If there's an RTL frame, assume the line is reordered
    1:   return isReordered || hasRTLFrames;
    1: }
    1: 
    1: nsIFrame*
    1: nsBidiPresUtils::GetFrameToRightOf(const nsIFrame*  aFrame,
    1:                                    nsIFrame*        aFirstFrameOnLine,
    1:                                    PRInt32          aNumFramesOnLine)
    1: {
    1:   InitLogicalArrayFromLine(aFirstFrameOnLine, aNumFramesOnLine);
    1:   
    1:   PRBool isReordered;
    1:   PRBool hasRTLFrames;
    1:   Reorder(isReordered, hasRTLFrames);
24551:   PRInt32 count = mVisualFrames.Length();
    1: 
    1:   if (aFrame == nsnull)
24551:     return mVisualFrames[0];
    1:   
    1:   for (PRInt32 i = 0; i < count - 1; i++) {
24551:     if (mVisualFrames[i] == aFrame) {
24551:       return mVisualFrames[i+1];
    1:     }
    1:   }
    1:   
    1:   return nsnull;
    1: }
    1: 
    1: nsIFrame*
    1: nsBidiPresUtils::GetFrameToLeftOf(const nsIFrame*  aFrame,
    1:                                   nsIFrame*        aFirstFrameOnLine,
    1:                                   PRInt32          aNumFramesOnLine)
    1: {
    1:   InitLogicalArrayFromLine(aFirstFrameOnLine, aNumFramesOnLine);
    1:   
    1:   PRBool isReordered;
    1:   PRBool hasRTLFrames;
    1:   Reorder(isReordered, hasRTLFrames);
24551:   PRInt32 count = mVisualFrames.Length();
    1:   
    1:   if (aFrame == nsnull)
24551:     return mVisualFrames[count-1];
    1:   
    1:   for (PRInt32 i = 1; i < count; i++) {
24551:     if (mVisualFrames[i] == aFrame) {
24551:       return mVisualFrames[i-1];
    1:     }
    1:   }
    1:   
    1:   return nsnull;
    1: }
    1: 
27501: inline void
 5423: nsBidiPresUtils::EnsureBidiContinuation(nsIFrame*       aFrame,
    1:                                         nsIFrame**      aNewFrame,
10997:                                         PRInt32&        aFrameIndex,
10997:                                         PRInt32         aStart,
27501:                                         PRInt32         aEnd)
    1: {
    1:   NS_PRECONDITION(aNewFrame, "null OUT ptr");
    1:   NS_PRECONDITION(aFrame, "aFrame is null");
    1: 
10997:   aFrame->AdjustOffsetsForBidi(aStart, aEnd);
 5423:   mSuccess = CreateBidiContinuation(aFrame, aNewFrame);
    1: }
    1: 
    1: void
 5423: nsBidiPresUtils::RemoveBidiContinuation(nsIFrame*       aFrame,
    1:                                         PRInt32         aFirstIndex,
    1:                                         PRInt32         aLastIndex,
    1:                                         PRInt32&        aOffset) const
    1: {
39965:   FrameProperties props = aFrame->Properties();
39965:   nsBidiLevel embeddingLevel =
42116:     (nsBidiLevel)NS_PTR_TO_INT32(props.Get(nsIFrame::EmbeddingLevelProperty()));
39965:   nsBidiLevel baseLevel =
42116:     (nsBidiLevel)NS_PTR_TO_INT32(props.Get(nsIFrame::BaseLevelProperty()));
    1: 
    1:   for (PRInt32 index = aFirstIndex + 1; index <= aLastIndex; index++) {
24551:     nsIFrame* frame = mLogicalFrames[index];
    1:     if (nsGkAtoms::directionalFrame == frame->GetType()) {
    1:       frame->Destroy();
    1:       ++aOffset;
    1:     }
    1:     else {
    1:       // Make the frame and its continuation ancestors fluid,
    1:       // so they can be reused or deleted by normal reflow code
39965:       FrameProperties frameProps = frame->Properties();
39965:       frameProps.Set(nsIFrame::EmbeddingLevelProperty(),
39965:                      NS_INT32_TO_PTR(embeddingLevel));
39965:       frameProps.Set(nsIFrame::BaseLevelProperty(),
39965:                      NS_INT32_TO_PTR(baseLevel));
    1:       frame->AddStateBits(NS_FRAME_IS_BIDI);
    1:       while (frame) {
    1:         nsIFrame* prev = frame->GetPrevContinuation();
    1:         if (prev) {
    1:           NS_ASSERTION (!frame->GetPrevInFlow() || frame->GetPrevInFlow() == prev, 
    1:                         "prev-in-flow is not prev continuation!");
    1:           frame->SetPrevInFlow(prev);
    1: 
    1:           NS_ASSERTION (!prev->GetNextInFlow() || prev->GetNextInFlow() == frame,
    1:                         "next-in-flow is not next continuation!");
    1:           prev->SetNextInFlow(frame);
    1: 
    1:           frame = frame->GetParent();
    1:         } else {
    1:           break;
    1:         }
    1:       }
    1:     }
    1:   }
    1: }
    1: 
    1: nsresult
    1: nsBidiPresUtils::FormatUnicodeText(nsPresContext*  aPresContext,
    1:                                    PRUnichar*       aText,
    1:                                    PRInt32&         aTextLength,
    1:                                    nsCharType       aCharType,
16557:                                    PRBool           aIsOddLevel)
    1: {
    1:   NS_ASSERTION(aIsOddLevel == 0 || aIsOddLevel == 1, "aIsOddLevel should be 0 or 1");
    1:   nsresult rv = NS_OK;
    1:   // ahmed 
    1:   //adjusted for correct numeral shaping  
    1:   PRUint32 bidiOptions = aPresContext->GetBidi();
    1:   switch (GET_BIDI_OPTION_NUMERAL(bidiOptions)) {
    1: 
    1:     case IBMBIDI_NUMERAL_HINDI:
    1:       HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_HINDI);
    1:       break;
    1: 
    1:     case IBMBIDI_NUMERAL_ARABIC:
    1:       HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_ARABIC);
    1:       break;
    1: 
24437:     case IBMBIDI_NUMERAL_PERSIAN:
24437:       HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_PERSIAN);
24437:       break;
24437: 
    1:     case IBMBIDI_NUMERAL_REGULAR:
    1: 
    1:       switch (aCharType) {
    1: 
    1:         case eCharType_EuropeanNumber:
    1:           HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_ARABIC);
    1:           break;
    1: 
    1:         case eCharType_ArabicNumber:
    1:           HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_HINDI);
    1:           break;
    1: 
    1:         default:
    1:           break;
    1:       }
    1:       break;
    1: 
    1:     case IBMBIDI_NUMERAL_HINDICONTEXT:
    1:       if ( ( (GET_BIDI_OPTION_DIRECTION(bidiOptions)==IBMBIDI_TEXTDIRECTION_RTL) && (IS_ARABIC_DIGIT (aText[0])) ) || (eCharType_ArabicNumber == aCharType) )
    1:         HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_HINDI);
    1:       else if (eCharType_EuropeanNumber == aCharType)
    1:         HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_ARABIC);
    1:       break;
    1: 
24437:     case IBMBIDI_NUMERAL_PERSIANCONTEXT:
24437:       if ( ( (GET_BIDI_OPTION_DIRECTION(bidiOptions)==IBMBIDI_TEXTDIRECTION_RTL) && (IS_ARABIC_DIGIT (aText[0])) ) || (eCharType_ArabicNumber == aCharType) )
24437:         HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_PERSIAN);
24437:       else if (eCharType_EuropeanNumber == aCharType)
24437:         HandleNumbers(aText,aTextLength,IBMBIDI_NUMERAL_ARABIC);
24437:       break;
24437: 
    1:     case IBMBIDI_NUMERAL_NOMINAL:
    1:     default:
    1:       break;
    1:   }
    1: 
    1:   StripBidiControlCharacters(aText, aTextLength);
    1:   return rv;
    1: }
    1: 
    1: void
    1: nsBidiPresUtils::StripBidiControlCharacters(PRUnichar* aText,
    1:                                             PRInt32&   aTextLength) const
    1: {
    1:   if ( (nsnull == aText) || (aTextLength < 1) ) {
    1:     return;
    1:   }
    1: 
    1:   PRInt32 stripLen = 0;
    1: 
    1:   for (PRInt32 i = 0; i < aTextLength; i++) {
    1:     // XXX: This silently ignores surrogate characters.
    1:     //      As of Unicode 4.0, all Bidi control characters are within the BMP.
 2997:     if (IsBidiControl((PRUint32)aText[i])) {
    1:       ++stripLen;
    1:     }
    1:     else {
    1:       aText[i - stripLen] = aText[i];
    1:     }
    1:   }
    1:   aTextLength -= stripLen;
    1: }
    1:  
    1: #if 0 // XXX: for the future use ???
    1: void
    1: RemoveDiacritics(PRUnichar* aText,
    1:                  PRInt32&   aTextLength)
    1: {
    1:   if (aText && (aTextLength > 0) ) {
    1:     PRInt32 offset = 0;
    1: 
    1:     for (PRInt32 i = 0; i < aTextLength && aText[i]; i++) {
    1:       if (IS_BIDI_DIACRITIC(aText[i]) ) {
    1:         ++offset;
    1:         continue;
    1:       }
    1:       aText[i - offset] = aText[i];
    1:     }
    1:     aTextLength = i - offset;
    1:     aText[aTextLength] = 0;
    1:   }
    1: }
    1: #endif
    1: 
    1: void
    1: nsBidiPresUtils::CalculateCharType(PRInt32& aOffset,
    1:                                    PRInt32  aCharTypeLimit,
    1:                                    PRInt32& aRunLimit,
    1:                                    PRInt32& aRunLength,
    1:                                    PRInt32& aRunCount,
    1:                                    PRUint8& aCharType,
    1:                                    PRUint8& aPrevCharType) const
    1: 
    1: {
    1:   PRBool     strongTypeFound = PR_FALSE;
    1:   PRInt32    offset;
    1:   nsCharType charType;
    1: 
    1:   aCharType = eCharType_OtherNeutral;
    1: 
    1:   for (offset = aOffset; offset < aCharTypeLimit; offset++) {
    1:     // Make sure we give RTL chartype to all characters that would be classified
    1:     // as Right-To-Left by a bidi platform.
    1:     // (May differ from the UnicodeData, eg we set RTL chartype to some NSMs.)
    1:     if (IS_HEBREW_CHAR(mBuffer[offset]) ) {
    1:       charType = eCharType_RightToLeft;
    1:     }
    1:     else if (IS_ARABIC_ALPHABETIC(mBuffer[offset]) ) {
    1:       charType = eCharType_RightToLeftArabic;
    1:     }
    1:     else {
    1:       mBidiEngine->GetCharTypeAt(offset, &charType);
    1:     }
    1: 
    1:     if (!CHARTYPE_IS_WEAK(charType) ) {
    1: 
    1:       if (strongTypeFound
    1:           && (charType != aPrevCharType)
    1:           && (CHARTYPE_IS_RTL(charType) || CHARTYPE_IS_RTL(aPrevCharType) ) ) {
    1:         // Stop at this point to ensure uni-directionality of the text
    1:         // (from platform's point of view).
    1:         // Also, don't mix Arabic and Hebrew content (since platform may
    1:         // provide BIDI support to one of them only).
    1:         aRunLength = offset - aOffset;
    1:         aRunLimit = offset;
    1:         ++aRunCount;
    1:         break;
    1:       }
    1: 
    1:       if ( (eCharType_RightToLeftArabic == aPrevCharType
    1:             || eCharType_ArabicNumber == aPrevCharType)
    1:           && eCharType_EuropeanNumber == charType) {
    1:         charType = eCharType_ArabicNumber;
    1:       }
    1: 
    1:       // Set PrevCharType to the last strong type in this frame
    1:       // (for correct numeric shaping)
    1:       aPrevCharType = charType;
    1: 
    1:       strongTypeFound = PR_TRUE;
    1:       aCharType = charType;
    1:     }
    1:   }
    1:   aOffset = offset;
    1: }
    1: 
    1: nsresult nsBidiPresUtils::ProcessText(const PRUnichar*       aText,
    1:                                       PRInt32                aLength,
    1:                                       nsBidiDirection        aBaseDirection,
    1:                                       nsPresContext*         aPresContext,
16043:                                       BidiProcessor&         aprocessor,
    1:                                       Mode                   aMode,
    1:                                       nsBidiPositionResolve* aPosResolve,
    1:                                       PRInt32                aPosResolveCount,
    1:                                       nscoord*               aWidth)
    1: {
    1:   NS_ASSERTION((aPosResolve == nsnull) != (aPosResolveCount > 0), "Incorrect aPosResolve / aPosResolveCount arguments");
    1: 
    1:   PRInt32 runCount;
    1: 
 2068:   mBuffer.Assign(aText, aLength);
    1: 
    1:   nsresult rv = mBidiEngine->SetPara(mBuffer.get(), aLength, aBaseDirection, nsnull);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
    1:   rv = mBidiEngine->CountRuns(&runCount);
    1:   if (NS_FAILED(rv))
    1:     return rv;
    1: 
16043:   nscoord xOffset = 0;
16043:   nscoord width, xEndRun;
    1:   nscoord totalWidth = 0;
    1:   PRInt32 i, start, limit, length;
    1:   PRUint32 visualStart = 0;
    1:   PRUint8 charType;
    1:   PRUint8 prevType = eCharType_LeftToRight;
    1:   nsBidiLevel level;
    1:       
    1:   for(int nPosResolve=0; nPosResolve < aPosResolveCount; ++nPosResolve)
    1:   {
    1:     aPosResolve[nPosResolve].visualIndex = kNotFound;
    1:     aPosResolve[nPosResolve].visualLeftTwips = kNotFound;
26442:     aPosResolve[nPosResolve].visualWidth = kNotFound;
    1:   }
    1: 
    1:   for (i = 0; i < runCount; i++) {
    1:     rv = mBidiEngine->GetVisualRun(i, &start, &length, &aBaseDirection);
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1: 
    1:     rv = mBidiEngine->GetLogicalRun(start, &limit, &level);
    1:     if (NS_FAILED(rv))
    1:       return rv;
    1: 
    1:     PRInt32 subRunLength = limit - start;
    1:     PRInt32 lineOffset = start;
32531:     PRInt32 typeLimit = NS_MIN(limit, aLength);
    1:     PRInt32 subRunCount = 1;
    1:     PRInt32 subRunLimit = typeLimit;
    1: 
    1:     /*
    1:      * If |level| is even, i.e. the direction of the run is left-to-right, we
    1:      * render the subruns from left to right and increment the x-coordinate
16043:      * |xOffset| by the width of each subrun after rendering.
    1:      *
    1:      * If |level| is odd, i.e. the direction of the run is right-to-left, we
16043:      * render the subruns from right to left. We begin by incrementing |xOffset| by
    1:      * the width of the whole run, and then decrement it by the width of each
    1:      * subrun before rendering. After rendering all the subruns, we restore the
    1:      * x-coordinate of the end of the run for the start of the next run.
    1:      */
    1: 
    1:     if (level & 1) {
16043:       aprocessor.SetText(aText + start, subRunLength, nsBidiDirection(level & 1));
16043:       width = aprocessor.GetWidth();
16043:       xOffset += width;
16043:       xEndRun = xOffset;
    1:     }
    1: 
    1:     while (subRunCount > 0) {
    1:       // CalculateCharType can increment subRunCount if the run
    1:       // contains mixed character types
    1:       CalculateCharType(lineOffset, typeLimit, subRunLimit, subRunLength, subRunCount, charType, prevType);
    1:       
    1:       nsAutoString runVisualText;
    1:       runVisualText.Assign(aText + start, subRunLength);
24551:       if (PRInt32(runVisualText.Length()) < subRunLength)
    1:         return NS_ERROR_OUT_OF_MEMORY;
    1:       FormatUnicodeText(aPresContext, runVisualText.BeginWriting(), subRunLength,
16557:                         (nsCharType)charType, level & 1);
    1: 
16043:       aprocessor.SetText(runVisualText.get(), subRunLength, nsBidiDirection(level & 1));
16043:       width = aprocessor.GetWidth();
    1:       totalWidth += width;
    1:       if (level & 1) {
16043:         xOffset -= width;
    1:       }
    1:       if (aMode == MODE_DRAW) {
16043:         aprocessor.DrawText(xOffset, width);
    1:       }
    1: 
    1:       /*
    1:        * The caller may request to calculate the visual position of one
    1:        * or more characters.
    1:        */
    1:       for(int nPosResolve=0; nPosResolve<aPosResolveCount; ++nPosResolve)
    1:       {
    1:         nsBidiPositionResolve* posResolve = &aPosResolve[nPosResolve];
    1:         /*
    1:          * Did we already resolve this position's visual metric? If so, skip.
    1:          */
    1:         if (posResolve->visualLeftTwips != kNotFound)
    1:            continue;
    1:            
    1:         /*
    1:          * First find out if the logical position is within this run.
    1:          */
    1:         if (start <= posResolve->logicalIndex &&
    1:             start + subRunLength > posResolve->logicalIndex) {
    1:           /*
    1:            * If this run is only one character long, we have an easy case:
    1:            * the visual position is the x-coord of the start of the run
16043:            * less the x-coord of the start of the whole text.
    1:            */
    1:           if (subRunLength == 1) {
    1:             posResolve->visualIndex = visualStart;
16043:             posResolve->visualLeftTwips = xOffset;
26442:             posResolve->visualWidth = width;
    1:           }
    1:           /*
    1:            * Otherwise, we need to measure the width of the run's part
    1:            * which is to the visual left of the index.
    1:            * In other words, the run is broken in two, around the logical index,
    1:            * and we measure the part which is visually left.
    1:            * If the run is right-to-left, this part will span from after the index
    1:            * up to the end of the run; if it is left-to-right, this part will span
    1:            * from the start of the run up to (and inclduing) the character before the index.
    1:            */
    1:           else {
26442:             /*
26442:              * Here is a description of how the width of the current character
26442:              * (posResolve->visualWidth) is calculated:
26442:              *
26442:              * LTR (current char: "P"):
26442:              *    S A M P L E          (logical index: 3, visual index: 3)
26442:              *    ^ (visualLeftPart)
26442:              *    ^ (visualRightSide)
26442:              *    visualLeftLength == 3
26442:              *    ^^^^^^ (subWidth)
26442:              *    ^^^^^^^^ (aprocessor.GetWidth() -- with visualRightSide)
26442:              *          ^^ (posResolve->visualWidth)
26442:              *
26442:              * RTL (current char: "M"):
26442:              *    E L P M A S          (logical index: 2, visual index: 3)
26442:              *        ^ (visualLeftPart)
26442:              *          ^ (visualRightSide)
26442:              *    visualLeftLength == 3
26442:              *    ^^^^^^ (subWidth)
26442:              *    ^^^^^^^^ (aprocessor.GetWidth() -- with visualRightSide)
26442:              *          ^^ (posResolve->visualWidth)
26442:              */
    1:             nscoord subWidth;
    1:             // The position in the text where this run's "left part" begins.
26442:             const PRUnichar* visualLeftPart, *visualRightSide;
    1:             if (level & 1) {
    1:               // One day, son, this could all be replaced with mBidiEngine.GetVisualIndex ...
    1:               posResolve->visualIndex = visualStart + (subRunLength - (posResolve->logicalIndex + 1 - start));
    1:               // Skipping to the "left part".
    1:               visualLeftPart = aText + posResolve->logicalIndex + 1;
26442:               // Skipping to the right side of the current character
26442:               visualRightSide = visualLeftPart - 1;
    1:             }
    1:             else {
    1:               posResolve->visualIndex = visualStart + (posResolve->logicalIndex - start);
    1:               // Skipping to the "left part".
    1:               visualLeftPart = aText + start;
26442:               // In LTR mode this is the same as visualLeftPart
26442:               visualRightSide = visualLeftPart;
    1:             }
    1:             // The delta between the start of the run and the left part's end.
    1:             PRInt32 visualLeftLength = posResolve->visualIndex - visualStart;
16043:             aprocessor.SetText(visualLeftPart, visualLeftLength, nsBidiDirection(level & 1));
16043:             subWidth = aprocessor.GetWidth();
26442:             aprocessor.SetText(visualRightSide, visualLeftLength + 1, nsBidiDirection(level & 1));
16043:             posResolve->visualLeftTwips = xOffset + subWidth;
26442:             posResolve->visualWidth = aprocessor.GetWidth() - subWidth;
    1:           }
    1:         }
    1:       }
    1: 
    1:       if (!(level & 1)) {
16043:         xOffset += width;
    1:       }
    1: 
    1:       --subRunCount;
    1:       start = lineOffset;
    1:       subRunLimit = typeLimit;
    1:       subRunLength = typeLimit - lineOffset;
    1:     } // while
    1:     if (level & 1) {
16043:       xOffset = xEndRun;
    1:     }
    1:     
    1:     visualStart += length;
    1:   } // for
    1: 
    1:   if (aWidth) {
    1:     *aWidth = totalWidth;
    1:   }
    1:   return NS_OK;
    1: }
    1: 
16043: class NS_STACK_CLASS nsIRenderingContextBidiProcessor : public nsBidiPresUtils::BidiProcessor {
16043: public:
16043:   nsIRenderingContextBidiProcessor(nsIRenderingContext* aCtx,
16043:                                    const nsPoint&       aPt)
16043:                                    : mCtx(aCtx), mPt(aPt) { }
16043: 
16043:   ~nsIRenderingContextBidiProcessor()
16043:   {
16043:     mCtx->SetRightToLeftText(PR_FALSE);
16043:   }
16043: 
16043:   virtual void SetText(const PRUnichar* aText,
16043:                        PRInt32          aLength,
16043:                        nsBidiDirection  aDirection)
16043:   {
16043:     mCtx->SetTextRunRTL(aDirection==NSBIDI_RTL);
16043:     mText = aText;
16043:     mLength = aLength;
16043:   }
16043: 
16043:   virtual nscoord GetWidth()
16043:   {
16043:     nscoord width;
16043:     mCtx->GetWidth(mText, mLength, width, nsnull);
16043:     return width;
16043:   }
16043: 
16043:   virtual void DrawText(nscoord aXOffset,
16043:                         nscoord)
16043:   {
16043:     mCtx->DrawString(mText, mLength, mPt.x + aXOffset, mPt.y);
16043:   }
16043: 
16043: private:
27501:   nsIRenderingContext* mCtx;
16043:   nsPoint mPt;
16043:   const PRUnichar* mText;
16043:   PRInt32 mLength;
16043:   nsBidiDirection mDirection;
16043: };
16043: 
16043: nsresult nsBidiPresUtils::ProcessTextForRenderingContext(const PRUnichar*       aText,
16043:                                                          PRInt32                aLength,
16043:                                                          nsBidiDirection        aBaseDirection,
16043:                                                          nsPresContext*         aPresContext,
16043:                                                          nsIRenderingContext&   aRenderingContext,
16043:                                                          Mode                   aMode,
16043:                                                          nscoord                aX,
16043:                                                          nscoord                aY,
16043:                                                          nsBidiPositionResolve* aPosResolve,
16043:                                                          PRInt32                aPosResolveCount,
16043:                                                          nscoord*               aWidth)
16043: {
16043:   nsIRenderingContextBidiProcessor processor(&aRenderingContext, nsPoint(aX, aY));
16043: 
16043:   return ProcessText(aText, aLength, aBaseDirection, aPresContext, processor,
16043:                      aMode, aPosResolve, aPosResolveCount, aWidth);
16043: }
42982: 
42982: PRUint32 nsBidiPresUtils::EstimateMemoryUsed()
42982: {
42982:   PRUint32 size = 0;
42982: 
42982:   size += sizeof(nsBidiPresUtils);
42982:   size += mBuffer.Length() * sizeof(PRUnichar);
42982:   size += moz_malloc_usable_size(mBidiEngine->mDirPropsMemory);
42982:   size += moz_malloc_usable_size(mBidiEngine->mLevelsMemory);
42982:   size += moz_malloc_usable_size(mBidiEngine->mRunsMemory);
42982: 
42982:   return size;
42982: }
42982: 
42982: 
    1: #endif // IBMBIDI
