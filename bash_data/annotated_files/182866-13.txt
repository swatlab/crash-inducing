131289: /* This Source Code Form is subject to the terms of the Mozilla Public
131289:  * License, v. 2.0. If a copy of the MPL was not distributed with this
131289:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
131289: "use strict";
131289: 
131289: module.metadata = {
131289:   "stability": "experimental"
131289: };
131289: 
131289: const { Cc, Ci, CC, Cu } = require('chrome');
131289: const systemPrincipal = CC('@mozilla.org/systemprincipal;1', 'nsIPrincipal')();
131289: const scriptLoader = Cc['@mozilla.org/moz/jssubscript-loader;1'].
131289:                      getService(Ci.mozIJSSubScriptLoader);
164700: const self = require('sdk/self');
131289: 
131289: /**
131289:  * Make a new sandbox that inherits given `source`'s principals. Source can be
131289:  * URI string, DOMWindow or `null` for system principals.
131289:  */
131289: function sandbox(target, options) {
164700:   options = options || {};
164700:   options.metadata = options.metadata ? options.metadata : {};
164700:   options.metadata.addonID = options.metadata.addonID ?
164700:     options.metadata.addonID : self.id;
164700: 
182866:   return Cu.Sandbox(target || systemPrincipal, options);
131289: }
164700: exports.sandbox = sandbox;
131289: 
131289: /**
131289:  * Evaluates given `source` in a given `sandbox` and returns result.
131289:  */
131289: function evaluate(sandbox, code, uri, line, version) {
131289:   return Cu.evalInSandbox(code, sandbox, version || '1.8', uri || '', line || 1);
131289: }
131289: exports.evaluate = evaluate;
131289: 
131289: /**
131289:  * Evaluates code under the given `uri` in the given `sandbox`.
131289:  *
131289:  * @param {String} uri
131289:  *    The URL pointing to the script to load.
131289:  *    It must be a local chrome:, resource:, file: or data: URL.
131289:  */
131289: function load(sandbox, uri) {
131289:   if (uri.indexOf('data:') === 0) {
131289:     let source = uri.substr(uri.indexOf(',') + 1);
131289: 
131289:     return evaluate(sandbox, decodeURIComponent(source), '1.8', uri, 0);
131289:   } else {
131289:     return scriptLoader.loadSubScript(uri, sandbox, 'UTF-8');
131289:   }
131289: }
131289: exports.load = load;
