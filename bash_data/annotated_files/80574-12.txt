    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Radha Kulkarni (radha@netscape.com)
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1:  
    1: #include "nsISupports.idl"
    1: #include "nsIFactory.idl"
    1: #include "nsISHEntry.idl"
    1: #include "nsISHTransaction.idl"
    1: 
    1: interface nsISHistoryListener;
    1: interface nsIDocShell;
    1: 
    1: %{C++
    1: #define NS_SHISTORY_INTERNAL_CID \
 6187: { 0x9c47c121, 0x1c6e, 0x4d8f, \
 6187:   { 0xb9, 0x04, 0x3a, 0xc9, 0x68, 0x11, 0x6e, 0x88 } }
    1: 
    1: #define NS_SHISTORY_INTERNAL_CONTRACTID "@mozilla.org/browser/shistory-internal;1"
50721: 
57140: template<class E, class A> class nsTArray;
57140: struct nsTArrayDefaultAllocator;
    1: %}
    1: 
57140: [ref] native nsDocshellIDArray(nsTArray<PRUint64, nsTArrayDefaultAllocator>);
50721: 
80574: [scriptable, uuid(2dede933-25e1-47a3-8f61-0127c785ea01)]
    1: interface nsISHistoryInternal: nsISupports
    1: {
    1:   /**
    1:    * Add a new Entry to the History List
    1:    * @param aEntry - The entry to add
    1:    * @param aPersist - If true this specifies that the entry should persist
    1:    * in the list.  If false, this means that when new entries are added
    1:    * this element will not appear in the session history list.
    1:    */
    1:    void  addEntry(in nsISHEntry aEntry, in boolean aPersist);
    1: 
    1:   /**
    1:    * Get the root transaction
    1:    */
    1:    readonly attribute nsISHTransaction rootTransaction;
    1: 
    1:   /**
    1:    * The toplevel docshell object to which this SHistory object belongs to.
    1:    */
    1:    attribute nsIDocShell rootDocShell;
    1: 
    1:   /** 
    1:    * Update the index maintained by sessionHistory
    1:    */
    1:    void updateIndex();
    1: 
    1:   /**
    1:    * Replace the nsISHEntry at a particular index
47264:    * @param aIndex - The index at which the entry should be replaced
    1:    * @param aReplaceEntry - The replacement entry for the index.
    1:    */
    1:    void replaceEntry(in long aIndex, in nsISHEntry aReplaceEntry);
    1: 
    1:   /** 
    1:    * Get handle to the history listener
    1:    */
    1:    readonly attribute nsISHistoryListener listener;
    1: 
    1:   /**
80574:    * Evict content viewers until the number of content viewers per tab
80574:    * is no more than gHistoryMaxViewers.  Also, count
80574:    * total number of content viewers globally and evict one if we are over
80574:    * our total max.  This is always called in Show(), after we destroy
80574:    * the previous viewer.
    1:    */
80574:    void evictContentViewers(in long previousIndex, in long index);
 6187:    
 6187:    /**
80574:     * Evict the content viewer associated with a session history entry
 6187:     * that has timed out.
 6187:     */
80574:    void evictExpiredContentViewerForEntry(in nsISHEntry aEntry);
23620: 
23620:    /**
23620:     * Evict all the content viewers in this session history
23620:     */
23620:    void evictAllContentViewers();
50721: 
50721:    /**
50721:     * Removes entries from the history if their docshellID is in
50721:     * aIDs array.
50721:     */
50721:   [noscript, notxpcom] void RemoveEntries(in nsDocshellIDArray aIDs,
50721:                                           in long aStartIndex);
    1: };
