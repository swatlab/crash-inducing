    1: # -*- Mode: makefile -*-
    1: #
    1: # ***** BEGIN LICENSE BLOCK *****
    1: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: #
    1: # The contents of this file are subject to the Mozilla Public License Version
    1: # 1.1 (the "License"); you may not use this file except in compliance with
    1: # the License. You may obtain a copy of the License at
    1: # http://www.mozilla.org/MPL/
    1: #
    1: # Software distributed under the License is distributed on an "AS IS" basis,
    1: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: # for the specific language governing rights and limitations under the
    1: # License.
    1: #
    1: # The Original Code is Mozilla Communicator client code, released
    1: # March 31, 1998.
    1: #
    1: # The Initial Developer of the Original Code is
    1: # Netscape Communications Corporation.
    1: # Portions created by the Initial Developer are Copyright (C) 1998
    1: # the Initial Developer. All Rights Reserved.
    1: #
    1: # Contributor(s):
    1: #
    1: # Alternatively, the contents of this file may be used under the terms of
    1: # either of the GNU General Public License Version 2 or later (the "GPL"),
    1: # or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: # in which case the provisions of the GPL or the LGPL are applicable instead
    1: # of those above. If you wish to allow use of your version of this file only
    1: # under the terms of either the GPL or the LGPL, and not to allow others to
    1: # use your version of this file under the terms of the MPL, indicate your
    1: # decision by deleting the provisions above and replace them with the notice
    1: # and other provisions required by the GPL or the LGPL. If you do not delete
    1: # the provisions above, a recipient may use your version of this file under
    1: # the terms of any one of the MPL, the GPL or the LGPL.
    1: #
    1: # ***** END LICENSE BLOCK *****
    1: 
21062: DEPTH		= .
    1: topsrcdir	= @top_srcdir@
    1: srcdir		= @srcdir@
    1: 
31192: run_for_side_effects := $(shell echo "MAKE: $(MAKE)")
23080: include $(DEPTH)/config/autoconf.mk
23080: 
21062: DIRS		= config
21062: 
23080: ifdef DEHYDRA_PATH
23080: DIRS += analysis-tests
23080: endif
    1: 
23648: ifdef JS_NATIVE_EDITLINE
23648: DIRS += editline
23648: endif
23648: 
23648: # editline needs to get built before the shell
28509: ifndef JS_DISABLE_SHELL
23648: DIRS += shell
28509: endif
23648: 
67939: # FIXME: bug 530688 covers getting these working on Android
68521: ifneq ($(OS_ARCH),ANDROID)
89461: TEST_DIRS += jsapi-tests
32345: endif
31916: 
89461: TEST_DIRS += tests
33535: 
    1: MODULE		    = js
    1: LIBRARY_NAME	    = mozjs
23648: STATIC_LIBRARY_NAME = js_static
    1: GRE_MODULE	    = 1
    1: 
21012: LIBS		= $(NSPR_LIBS) 
21012: 
70929: ifeq ($(OS_ARCH),WINNT)
70929: NO_PROFILE_GUIDED_OPTIMIZE = 1
70929: endif
 9032: 
    1: # JavaScript must be built shared, even for static builds, as it is used by
    1: # other modules which are always built shared. Failure to do so results in
    1: # the js code getting copied into xpinstall and jsd as well as mozilla-bin,
    1: # and then the static data cells used for locking no longer work.
23648: #
23648: # In fact, we now build both a static and a shared library, as the
23648: # JS shell would like to link to the static library.
    1: 
50577: ifdef JS_SHARED_LIBRARY
    1: FORCE_SHARED_LIB = 1
50577: endif
23648: FORCE_STATIC_LIB = 1
88641: DIST_INSTALL = 1
    1: 
80202: VPATH		= \
80202: 		$(srcdir) \
80202: 		$(srcdir)/builtin \
80202: 		$(srcdir)/ds \
80202: 		$(srcdir)/frontend \
80212: 		$(srcdir)/gc \
80202: 		$(srcdir)/vm \
80202: 		$(NULL)
18400: 
15146: CPPSRCS		= \
68895: 		jsalloc.cpp \
56602: 		jsanalyze.cpp \
15146: 		jsapi.cpp \
15146: 		jsarray.cpp \
15146: 		jsatom.cpp \
15146: 		jsbool.cpp \
54863: 		jsclone.cpp \
15146: 		jscntxt.cpp \
59931: 		jscompartment.cpp \
15146: 		jsdate.cpp \
15146: 		jsdbgapi.cpp \
15146: 		jsdhash.cpp \
15146: 		jsdtoa.cpp \
15146: 		jsexn.cpp \
59931: 		jsfriendapi.cpp \
15146: 		jsfun.cpp \
15146: 		jsgc.cpp \
73560: 		jscrashreport.cpp \
15146: 		jshash.cpp \
77343: 		jsinfer.cpp \
15146: 		jsinterp.cpp \
15146: 		jsiter.cpp \
15146: 		jslog2.cpp \
15146: 		jsmath.cpp \
42740: 		jsnativestack.cpp \
15146: 		jsnum.cpp \
15146: 		jsobj.cpp \
20092: 		json.cpp \
67934: 		jsonparser.cpp \
15146: 		jsopcode.cpp \
42733: 		jsproxy.cpp \
15146: 		jsprf.cpp \
53555: 		jsprobes.cpp \
40359: 		jspropertycache.cpp \
40327: 		jspropertytree.cpp \
51110: 		jsreflect.cpp \
15146: 		jsscope.cpp \
15146: 		jsscript.cpp \
15146: 		jsstr.cpp \
37042: 		jstypedarray.cpp \
15146: 		jsutil.cpp \
74472: 		jswatchpoint.cpp \
68911: 		jsweakmap.cpp \
43264: 		jswrapper.cpp \
15146: 		jsxml.cpp \
15146: 		prmjtime.cpp \
60787: 		sharkctl.cpp \
93250: 		ArgumentsObject.cpp \
86483: 		ScopeObject.cpp \
76853: 		Debugger.cpp \
76853: 		GlobalObject.cpp \
90523: 		MethodGuard.cpp \
90966: 		ObjectImpl.cpp \
76853: 		Stack.cpp \
76853: 		String.cpp \
80507: 		BytecodeCompiler.cpp \
80964: 		BytecodeEmitter.cpp \
80507: 		FoldConstants.cpp \
76853: 		ParseMaps.cpp \
80507: 		ParseNode.cpp \
80506: 		Parser.cpp \
80989: 		SemanticAnalysis.cpp \
80506: 		TokenStream.cpp \
91659: 		TestingFunctions.cpp \
79410: 		LifoAlloc.cpp \
87812: 		MapObject.cpp \
86987: 		MemoryMetrics.cpp \
79981: 		RegExpObject.cpp \
79981: 		RegExpStatics.cpp \
79981: 		RegExp.cpp \
97569: 		Marking.cpp \
89806: 		Memory.cpp \
80212: 		Statistics.cpp \
91567: 		StringBuffer.cpp \
76853: 		Unicode.cpp \
94006: 		Xdr.cpp \
    1: 		$(NULL)
    1: 
72049: # Changes to internal header files, used externally, massively slow down
72049: # browser builds.  Don't add new files here unless you know what you're
72049: # doing!
21062: INSTALLED_HEADERS = \
21063: 		js-config.h \
80785: 		jscpucfg.h \
    1: 		js.msg \
68895: 		jsalloc.h \
    1: 		jsapi.h \
    1: 		jsatom.h \
93383: 		jsatom.tbl \
78614: 		jsclass.h \
    1: 		jsclist.h \
    1: 		jsdbgapi.h \
    1: 		jsdhash.h \
59931: 		jsfriendapi.h \
    1: 		jsgc.h \
    1: 		jshash.h \
    1: 		jslock.h \
20092: 		json.h \
42733: 		jsproxy.h \
    1: 		jsprf.h \
    1: 		jsproto.tbl \
    1: 		jsprvtd.h \
    1: 		jspubtd.h \
    1: 		jstypes.h \
    1: 		jsutil.h \
18863: 		jsversion.h \
43264: 		jswrapper.h \
48470: 		jsval.h \
    1: 		$(NULL)
    1: 
72579: ######################################################
80202: # BEGIN exported headers that are only exported
80202: #       because of inclusion by an INSTALLED_HEADER
69223: #
89372: EXPORTS_NAMESPACES += ds gc
69223: 
79410: EXPORTS_ds = \
81459: 		BitArray.h \
80202: 		$(NULL)
80202: 
80212: EXPORTS_gc = \
97570: 		Barrier.h \
97570: 		Heap.h \
97570: 		Root.h \
97556: 		Statistics.h \
80212: 		$(NULL)
80212: 
80202: ######################################################
80202: # BEGIN include exported headers from the JS engine
80202: #
80202: #       Ultimately, after cleansing INSTALLED_HEADERS,
80202: #       these will be the ONLY headers exported by
80202: #       the js engine
80202: #
80202: VPATH		+= \
80202: 		$(srcdir)/../public \
80202: 		$(NULL)
80202: 
80202: EXPORTS_NAMESPACES += js
80202: 
84755: # If you add a header here, add it to js/src/jsapi-tests/testIntTypesABI.cpp so
84755: # that we ensure we don't over-expose our internal integer typedefs.  Note that
84755: # LegacyIntTypes.h below is deliberately exempted from this requirement.
80202: EXPORTS_js = \
80202: 		HashTable.h \
84755: 		LegacyIntTypes.h \
86104: 		MemoryMetrics.h \
80202: 		TemplateLib.h \
80202: 		Utility.h \
80202: 		Vector.h \
80202: 		$(NULL)
79410: 
69223: ###############################################
84933: # BEGIN include sources for low-level code shared with mfbt
64572: #
95281: MFBT_ROOT = $(srcdir)/../../mfbt
95281: VPATH += $(MFBT_ROOT)
95281: include $(MFBT_ROOT)/exported_headers.mk
64572: 
52556: ifdef ENABLE_METHODJIT
17567: 
52556: ###############################################
53400: # BEGIN include sources for the method JIT
52556: #
76853: VPATH += 	$(srcdir)/methodjit
52556: 
76853: CPPSRCS += 	MethodJIT.cpp \
76853: 		StubCalls.cpp \
76853: 		Compiler.cpp \
76853: 		FrameState.cpp \
76853: 		FastArithmetic.cpp \
77343: 		FastBuiltins.cpp \
76853: 		FastOps.cpp \
77343: 		LoopState.cpp \
76853: 		StubCompiler.cpp \
76853: 		MonoIC.cpp \
76853: 		PolyIC.cpp \
76853: 		ImmutableSync.cpp \
76853: 		InvokeHelpers.cpp \
76853: 		Retcon.cpp \
76853: 		TrampolineCompiler.cpp \
52556: 		$(NULL)
52556: 
52556: ifeq (86, $(findstring 86,$(TARGET_CPU)))
52556: ifeq (x86_64, $(TARGET_CPU))
53477: ifdef _MSC_VER
76853: ASFILES +=	TrampolineMasmX64.asm
52556: endif
64272: ifeq ($(OS_ARCH),WINNT)
64272: ifdef GNU_CC
76853: ASFILES +=	TrampolineMingwX64.s
64272: endif
64272: endif
53012: ifdef SOLARIS_SUNPRO_CXX
76853: ASFILES +=	TrampolineSUNWX64.s
53012: endif
52556: #CPPSRCS		+= only_on_x86_64.cpp
52556: else
52556: #CPPSRCS		+= only_on_x86.cpp
53012: ifdef SOLARIS_SUNPRO_CXX
76853: ASFILES +=	TrampolineSUNWX86.s
53012: endif
52556: endif
52556: endif
52556: ifeq (arm, $(TARGET_CPU))
52556: #CPPSRCS		+= only_on_arm.cpp
52556: endif
68931: ifeq (sparc, $(findstring sparc,$(TARGET_CPU)))
76853: ASFILES +=	TrampolineSparc.s
68931: endif
87250: ifeq (mips, $(findstring mips,$(TARGET_CPU)))
87250: CPPSRCS +=	TrampolineMIPS.cpp
87250: endif
52556: #
53400: # END enclude sources for the method JIT
53400: #############################################
53400: 
53400: endif
51469: 
87250: ifeq (,$(filter arm% sparc %86 x86_64 mips%,$(TARGET_CPU)))
50493: 
97455: VPATH +=	$(srcdir)/assembler \
97455: 		$(srcdir)/assembler/wtf \
97455: 		$(srcdir)/assembler/jit \
97455: 		$(srcdir)/yarr \
50493: 		$(NULL)
50493: 
97455: CPPSRCS +=	ExecutableAllocator.cpp \
97455: 		ExecutableAllocatorPosix.cpp \
97455: 		OSAllocatorOS2.cpp \
97455: 		OSAllocatorPosix.cpp \
97455: 		OSAllocatorWin.cpp \
97455: 		PageBlock.cpp \
97455: 		YarrInterpreter.cpp \
97455: 		YarrPattern.cpp \
97455: 		YarrSyntaxChecker.cpp \
50493: 		$(NULL)
50493: else
50493: 
50491: ###############################################
50491: # BEGIN include sources for the Nitro assembler
50491: #
77053: 
77053: ENABLE_YARR_JIT = 1
77053: 
50491: VPATH += 	$(srcdir)/assembler \
50491: 		$(srcdir)/assembler/wtf \
50491: 		$(srcdir)/assembler/jit \
50491: 		$(srcdir)/assembler/assembler \
50491: 		$(srcdir)/methodjit \
50491: 		$(srcdir)/yarr \
50493: 		$(NONE)
50491: 
90070: CPPSRCS += 	ExecutableAllocator.cpp \
50491: 		ARMAssembler.cpp \
50491: 		MacroAssemblerARM.cpp \
50491: 		MacroAssemblerX86Common.cpp \
71317: 		PageBlock.cpp \
71317: 		YarrInterpreter.cpp \
71317: 		YarrJIT.cpp \
71317: 		YarrPattern.cpp \
71317: 		YarrSyntaxChecker.cpp \
50493: 		$(NONE)
50491: 
78435: ifdef MOZ_DEBUG
78435: CPPSRCS += Logging.cpp
78435: endif
78435: 
78435: ifneq (,$(filter-out OS2 WINNT,$(OS_ARCH)))
78435: CPPSRCS += ExecutableAllocatorPosix.cpp \
78435:            OSAllocatorPosix.cpp \
78435:            $(NONE)
78435: endif
78435: ifeq ($(OS_ARCH),WINNT)
78435: CPPSRCS += ExecutableAllocatorWin.cpp \
78435:            OSAllocatorWin.cpp \
78435:            $(NONE)
78435: endif
78435: ifeq ($(OS_ARCH),OS2)
78435: CPPSRCS += ExecutableAllocatorOS2.cpp \
78435:            OSAllocatorOS2.cpp \
78435:            $(NONE)
78435: endif
78435: 
50491: ifeq (86, $(findstring 86,$(TARGET_CPU)))
50491: ifeq (x86_64, $(TARGET_CPU))
50491: #CPPSRCS		+= only_on_x86_64.cpp
50491: else
50491: #CPPSRCS		+= only_on_x86.cpp
50491: endif
50491: endif
50491: ifeq (arm, $(TARGET_CPU))
50491: #CPPSRCS		+= only_on_arm.cpp
50491: endif
50491: #
50491: # END enclude sources for the Nitro assembler
50491: #############################################
50491: 
50493: endif
50491: 
40442: ifdef JS_HAS_CTYPES
76852: VPATH += $(srcdir)/ctypes
41355: 
40442: CPPSRCS += \
76852:     CTypes.cpp \
76852:     Library.cpp \
40442:     $(NULL)
40442: 
74235: ifdef MOZ_NATIVE_FFI
74235: LOCAL_INCLUDES = $(MOZ_FFI_CFLAGS)
74235: else
74235: LOCAL_INCLUDES = -Ictypes/libffi/include
74235: endif
74235: 
74235: LOCAL_INCLUDES += \
42677:     -I. \
40442:     $(NULL)
40442: 
74235: 
74235: ifdef MOZ_NATIVE_FFI
74235: EXTRA_DSO_LDOPTS += $(MOZ_FFI_LIBS)
74235: else
40442: ifeq ($(OS_ARCH),OS2)
40894: SHARED_LIBRARY_LIBS += \
75192:     ctypes/libffi/.libs/ffi.a \
40894:     $(NULL)
40894: else
40613: SHARED_LIBRARY_LIBS += \
40442:     ctypes/libffi/.libs/libffi.$(LIB_SUFFIX) \
40442:     $(NULL)
40894: endif
74235: endif
40894: 
40442: endif # JS_HAS_CTYPES
40442: 
95281: LOCAL_INCLUDES += -I$(MFBT_ROOT)/double-conversion
95281: 
 7058: ifdef HAVE_DTRACE
21062: INSTALLED_HEADERS += \
21609: 		$(CURDIR)/javascript-trace.h \
 7058: 		$(NULL)
 7058: endif
 7058: 
48637: # PerfMeasurement is available regardless of low-level support for it;
48637: # it just doesn't necessarily do anything useful.  There is one
48637: # implementation source file per supported operating system, plus a stub
48637: # for unsupported OSes, plus the Javascript wrapper.
76852: VPATH += $(srcdir)/perf
76852: INSTALLED_HEADERS += jsperf.h
76852: CPPSRCS += jsperf.cpp
48637: ifdef HAVE_LINUX_PERF_EVENT_H
76852: CPPSRCS += pm_linux.cpp
48637: else
76852: CPPSRCS += pm_stub.cpp
48637: endif
48637: 
23476: EXPORTS = $(INSTALLED_HEADERS)
23476: 
    1: DASH_R		= -r
    1: 
67939: ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
 5701: SDK_LIBRARY = $(IMPORT_LIBRARY)
 5701: else
 5701: SDK_LIBRARY = $(SHARED_LIBRARY)
 5701: endif
 5701: 
73082: # for compiler bug (http://support.microsoft.com/kb/982107) for MSVC x64
73082: ifdef _MSC_VER
73082: ifneq (,$(filter 1400 1500,$(_MSC_VER)))
73082: ifeq ($(OS_TEST),x86_64)
73082: ASFILES += jswin64.asm
73082: endif
73082: endif
73082: endif
73082: 
    1: include $(topsrcdir)/config/config.mk
    1: 
90070: ifeq (,$(MOZ_GLUE_PROGRAM_LDFLAGS))
90070: # When building standalone, we need to include mfbt sources, and to declare
90070: # "exported" mfbt symbols on its behalf when we use its headers.
95281: include $(MFBT_ROOT)/sources.mk
90070: DEFINES += -DIMPL_MFBT
90070: endif
90070: 
    1: EXTRA_DSO_LDOPTS += $(NSPR_LIBS)
    1: 
    1: ifndef BUILD_OPT
    1: MOCHAFILE	= 1
    1: endif
    1: 
    1: # Define keyword generator before rules.mk, see bug 323979 comment 50
    1: 
    1: HOST_SIMPLE_PROGRAMS += host_jskwgen$(HOST_BIN_SUFFIX)
    1: GARBAGE += jsautokw.h host_jskwgen$(HOST_BIN_SUFFIX)
15453: 
15453: HOST_SIMPLE_PROGRAMS += host_jsoplengen$(HOST_BIN_SUFFIX)
15453: GARBAGE += jsautooplen.h host_jsoplengen$(HOST_BIN_SUFFIX)
15453: 
15146: USE_HOST_CXX = 1
    1: 
 7058: ifdef HAVE_DTRACE
 7297: ifneq ($(OS_ARCH),Darwin)
 7058: DTRACE_PROBE_OBJ = $(LIBRARY_NAME)-dtrace.$(OBJ_SUFFIX)
 7297: endif
 7058: MOZILLA_DTRACE_SRC = $(srcdir)/javascript-trace.d
 7058: endif
 7058: 
25212: default::
    1: 
25212: ifneq (,$(CROSS_COMPILE)$(filter-out WINNT OS2,$(OS_ARCH)))
23476: # nsinstall doesn't get built until we enter config/ in the exports phase,
23476: # so we'll have to manually ensure it gets built here if we want to use
23476: # $(EXPORTS)
25212: export:: config/nsinstall$(HOST_BIN_SUFFIX)
25262: $(PUBLIC) $(SDK_PUBLIC): config/nsinstall$(HOST_BIN_SUFFIX)
23476: 
23476: config/nsinstall$(HOST_BIN_SUFFIX): $(srcdir)/config/nsinstall.c $(srcdir)/config/pathsub.c
23476: 	$(MAKE) -C config/ nsinstall$(HOST_BIN_SUFFIX)
23476: endif
23476: 
25212: include $(topsrcdir)/config/rules.mk
25212: 
40442: ifdef JS_HAS_CTYPES
74235: ifndef MOZ_NATIVE_FFI
40442: # Build libffi proper as part of the 'exports' target, so things get built
40613: # in the right order.
40442: export::
40613: 		$(call SUBMAKE,,ctypes/libffi)
40442: 
41530: distclean clean::
41530: 		$(call SUBMAKE,$@,ctypes/libffi)
40442: endif
74235: endif
40442: 
21064: # Because the SpiderMonkey can be distributed and built independently
21064: # of the Mozilla source tree, it contains its own copies of many of
21064: # the files used by the top-level Mozilla build process, from the
21064: # 'config' and 'build' subtrees.
21064: #
21064: # To make it simpler to keep the copies in sync, we follow the policy
21064: # that the SpiderMonkey copies must always be exact copies of those in
21064: # the containing Mozilla tree.  If you've made a change in one, it
21064: # belongs in the other as well.  If the change isn't right for both
21064: # places, then that's something to bring up with the other developers.
21064: #
21064: # Some files are reasonable to diverge; for  example,
21064: # js/config/autoconf.mk.in doesn't need most of the stuff in
21064: # config/autoconf.mk.in.
67905: check-sync-dirs-cmd = $(PYTHON) $(srcdir)/config/check-sync-dirs.py
67905: check-sync-dirs:
67905: 	$(check-sync-dirs-cmd) $(srcdir)/config $(MOZ_SYNC_BUILD_FILES)/config
67905: 	$(check-sync-dirs-cmd) $(srcdir)/build $(MOZ_SYNC_BUILD_FILES)/build
33134: 
67905: ifdef MOZ_SYNC_BUILD_FILES
67905: check:: check-sync-dirs
21064: endif
21064: 
60811: # The "find any vanilla new/new[] calls" script is tailored to Linux, so
60811: # only run it there.  That should be enough to catch any such calls that
60811: # creep in.
67905: check-vanilla-new:
67905: 	$(srcdir)/config/find_vanilla_new_calls $(LIBRARY)
67905: 
60811: ifeq ($(OS_ARCH),Linux)
67905: check:: check-vanilla-new
60811: endif
60811: 
64323: # Help ensure that the number of OOM errors in SpiderMonkey doesn't increase.
64323: # If the number of OOM errors changes, update the number below. We intend this
64323: # number to go down over time, by fixing OOMs.
64323: check-ooms:
64559: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/config/find_OOM_errors.py --regression 125
64323: 
67910: ifeq ($(MOZ_DEBUG),1)
67913: #check:: check-ooms
64323: endif
64323: 
64559: ## Prevent regressing in our deprecation of non-preferred memory management functions.
64559: # We use all the files in the distribution so that different configurations
64559: # don't give different results. We skip the contents of objdirs using |find|
64559: # (it can't be done with %-expansion, because the files we want to skip aren't
64559: # in the vpath).
72109: ALL_FILES=$(shell find $(srcdir) \( -name "*.cpp" -o -name "*.h" \) ! -path "*/dist/*" ! -path "*/config/*")
68895: check-malloc-function-usage: $(filter-out %jsalloc.h %jscntxt.h %jsutil.h, $(ALL_FILES))
64559: 
64559: 	# js_malloc and friends are only used by other memory managers, and should
64559: 	# never be used elsewhere directly.
64559: 	$(srcdir)/config/check_source_count.py "\bjs_malloc\b" 0 \
64559: 		"in Makefile.in" "cx->malloc_ or rt->malloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_calloc\b" 0 \
64559: 		"in Makefile.in" "cx->calloc_ or rt->calloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_realloc\b" 0 \
64559: 		"in Makefile.in" "cx->realloc_ or rt->realloc_" $^
64559: 	$(srcdir)/config/check_source_count.py "\bjs_free\b" 0 \
64559: 		"in Makefile.in" "cx->free_" $^
64559: 
64559: 	# We desire these numbers to go down, not up. See "User guide to memory
64559: 	# management within SpiderMonkey" in jsutil.h.
89972: 	$(srcdir)/config/check_source_count.py OffTheBooks:: 71 \
75387: 		"in Makefile.in" "{cx,rt}->{new_,array_new,malloc_,calloc_,realloc_}" $^
64559: 	# This should go to zero, if possible.
73900: 	$(srcdir)/config/check_source_count.py UnwantedForeground:: 31 \
64559: 		"in Makefile.in" "{cx,rt}->{free_,delete_,array_delete}" $^
64559: 
67905: ifneq ($(OS_ARCH),WINNT) # FIXME: this should be made work on Windows too.
77343: #check:: check-malloc-function-usage FIXME: disable on JM until closer to merge time.
64560: endif
64559: 
97685: ifdef MOZ_VALGRIND
97302: ifndef MOZ_ASAN
97685: JITTEST_VALGRIND_FLAG = --valgrind
97685: endif
97302: endif
97302: 
82645: JITFLAGS = ,m,am,amd,n,mn,amn,amdn,mdn
67905: check-jit-test::
56539: 	$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/jit-test/jit_test.py \
97685: 	        --no-slow --no-progress --tinderbox --jitflags=$(JITFLAGS) $(JITTEST_VALGRIND_FLAG) \
97685: 	        $(DIST)/bin/js$(BIN_SUFFIX)
67905: 
68954: check:: check-jit-test
67908: 
67908: # jstests doesn't have a --jitflags option, so we need to loop, updating the
67908: # exit code (RC) after each invocation.
67908: # FIXME: MethodJIT doesn't work for 1 test case (bug 644393), so
67908: # --no-extensions is set to skip that test. Remove as soon as possible.
67908: check-jstests:
67908: 	RC=0; \
67908: 	for f in `echo "$(JITFLAGS)" | tr ',' '\n'`; \
67908: 		do \
67908: 			$(wildcard $(RUN_TEST_PROGRAM)) $(PYTHON) -u $(srcdir)/tests/jstests.py \
67908: 				--tinderbox --no-progress \
67908: 				--no-extensions \
67908: 				--timeout 300 \
67908: 				--args="`echo $$f | sed 's/\(.\)/ -\1/g'`" \
67908: 				$(DIST)/bin/js$(BIN_SUFFIX); \
67908: 			RC=$$(( $$RC || $$?)); \
67908: 		done; \
67908: 	exit $$RC
67908: 
68954: # FIXME:
68954: # We want to run check-jstests as part of |make check| on all platforms, on
68954: # tinderbox. However, some configurations don't work quite right just yet.
69234: # Rather than risking regressions in major configurations while fixing these
69234: # secondary configuration, we work around them and fix the bugs later.
68954: #
69234: #   Bug 652154: On Windows, SM(!m !t) don't work because of path problems with
69234: #				their unusual directory layout
69234: #
69234: #   Bug 652155: On Mac, SM(d) doesn't work for unknown reasons 
67908: 
69234: ifeq ($(OS_ARCH),WINNT)
69234: ifdef ENABLE_METHODJIT
69234: endif
69234: else
69234: ifndef HAVE_DTRACE
69234: #check:: check-jstests
69234: endif
68954: endif
25896: 
30215: DIST_GARBAGE = config.cache config.log config.status \
40655:    config/autoconf.mk \
30837:    unallmakefiles js-config js-config.h js-confdefs.h
30215: 
30215: distclean::
30215: 	cat unallmakefiles | $(XARGS) rm -f
67702: 	$(RM) $(DIST_GARBAGE)
30215: 
    1: DEFINES		+= -DEXPORT_JS_API
    1: 
    1: INCLUDES	+= -I$(srcdir)
    1: 
    1: ifdef JS_THREADSAFE
    1: DEFINES		+= -DJS_THREADSAFE
    1: endif
    1: 
40442: ifdef JS_HAS_CTYPES
40442: DEFINES		+= -DJS_HAS_CTYPES
47348: DEFINES         += -DDLL_PREFIX=\"$(DLL_PREFIX)\" -DDLL_SUFFIX=\"$(DLL_SUFFIX)\"
40442: endif
40442: 
    1: ifdef JS_VERSION
    1: DEFINES		+= -DJS_VERSION=$(JS_VERSION)
    1: endif
    1: 
84827: # We do not want to have obsolete NSPR functionality in threadsafe builds.
84827: DEFINES   += -DNO_NSPR_10_SUPPORT
84827: 
    1: ifneq ($(findstring -L,$(NSPR_LIBS)),)
    1: NSPR_STATIC_PATH = $(subst -L,,$(findstring -L,$(NSPR_LIBS)))
    1: else
    1: NSPR_STATIC_PATH = $(DIST)/lib
    1: endif
    1: 
16288: ifdef MOZ_VTUNE
16288: CXXFLAGS += -IC:/Program\ Files/Intel/VTune/Analyzer/Include
16288: EXTRA_DSO_LDOPTS += C:/Program\ Files/Intel/VTune/Analyzer/Lib/VtuneApi.lib
16288: LIBS +=  C:/Program\ Files/Intel/VTune/Analyzer/Lib/VtuneApi.lib
16288: endif
16288: 
73745: ifdef MOZ_ETW
73745: # This will get the ETW provider resources into the library mozjs.dll
73745: RESFILE = ETWProvider.res
73745: endif
73745: 
63458: # HP-UX does not require the extra linking of "-lm"
67939: ifeq (,$(filter HP-UX WINNT OS2,$(OS_ARCH)))
18465: EXTRA_LIBS	+= -lm
    1: endif
    1: 
    1: # Prevent floating point errors caused by VC++ optimizations
    1: ifeq ($(OS_ARCH)_$(GNU_CC),WINNT_)
    1: ifeq (,$(filter-out 1200 1300 1310,$(_MSC_VER)))
    1: CFLAGS += -Op
    1: else
    1: CFLAGS += -fp:precise
    1: endif
    1: endif # WINNT
    1: 
    1: ifeq ($(OS_ARCH),FreeBSD)
18465: EXTRA_LIBS	+= -pthread
    1: endif
    1: ifeq ($(OS_ARCH),Linux)
18465: EXTRA_LIBS	+= -ldl
    1: endif
64338: # Silence warnings on AIX/HP-UX from non-GNU compilers
64338: ifndef GNU_CC
64338: ifeq ($(OS_ARCH),AIX)
64338: # Suppress warnings from xlC
64338: # 1540-1281: offsetof() on null non-POD types
64338: # 1540-1608: anonymous unions using static data members
64338: CFLAGS		+= -qsuppress=1540-1281 -qsuppress=1540-1608
64338: CXXFLAGS	+= -qsuppress=1540-1281 -qsuppress=1540-1608
64338: endif
64338: ifeq ($(OS_ARCH),HP-UX)
64338: # Suppress warnings from aCC
64338: # 3055: anonymous unions declaring types
64338: # 4189: offsetof() on non-POD types
64338: CFLAGS		+= +W3055,4189
64338: CXXFLAGS	+= +W3055,4189
64338: endif
64338: endif
    1: ifeq ($(OS_ARCH),SunOS)
    1: ifeq ($(TARGET_CPU),sparc)
    1: 
    1: ifdef GNU_CC
30633: CFLAGS   += -mcpu=v9
30633: CXXFLAGS += -mcpu=v9
    1: endif # GNU_CC
    1: 
    1: endif
    1: ifeq ($(OS_RELEASE),4.1)
18465: EXTRA_LIBS	+= -ldl -lnsl
    1: else
18465: EXTRA_LIBS	+= -lposix4 -ldl -lnsl -lsocket
    1: endif
    1: endif
    1: 
    1: # An AIX Optimization bug causes PR_dtoa() & JS_dtoa to produce wrong result.
    1: # This suppresses optimization for this single compilation unit.
    1: ifeq ($(OS_ARCH),AIX)
15146: jsatom.o: jsatom.cpp Makefile.in
84287: 	$(REPORT_BUILD)
15146: 	@$(MAKE_DEPS_AUTO_CXX)
15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
15146: jsdtoa.o: jsdtoa.cpp Makefile.in
84287: 	$(REPORT_BUILD)
15146: 	@$(MAKE_DEPS_AUTO_CXX)
15146: 	$(CXX) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
    1: endif
    1: 
21062: # Compute the linker flags that programs linking against SpiderMonkey should
21062: # pass to get SpiderMonkey and its dependencies, beyond just the -L and -l
21062: # for the SpiderMonkey library itself.
21062: # - EXTRA_DSO_LDOPTS includes the NSPR -L and -l flags.
21062: # - OS_LIBS includes libraries selected by the configure script.
21062: # - EXTRA_LIBS includes libraries selected by this Makefile.
21062: JS_CONFIG_LIBS=$(EXTRA_DSO_LDOPTS) $(OS_LIBS) $(EXTRA_LIBS) 
21062: 
21062: # The configure script invokes this rule explicitly at configure time!
21062: # It's important that js-config be ready by the time we're done
21062: # configuring, because we may be running other configure scripts that
21062: # would like to run js-config themselves, before js is built.
21062: #
21062: # This file and rules.mk go through a certain amount of work to decide
21062: # which libraries to build, what to name them, and what flags to pass
21062: # when linking them (and thus what flags its own clients must pass).
21062: # All this information needs to go into the js-config script.  To
21062: # avoid trying to re-compute all that in the configure script, we just
21062: # have the configure script generate this Makefile, and then invoke
21062: # this rule.
21062: at=@
21062: js-config: js-config.in Makefile $(DEPTH)/config/autoconf.mk $(topsrcdir)/config/config.mk $(topsrcdir)/config/rules.mk
67702: 	$(RM) js-config.tmp
21062: 	sed < $< > js-config.tmp \
21062: 	-e 's|$(at)prefix$(at)|$(prefix)|' \
21062: 	-e 's|$(at)exec_prefix$(at)|$(exec_prefix)|' \
21062: 	-e 's|$(at)includedir$(at)|$(includedir)|' \
21062: 	-e 's|$(at)libdir$(at)|$(libdir)|' \
21062: 	-e 's|$(at)MOZILLA_VERSION$(at)|$(MOZILLA_VERSION)|' \
21062: 	-e 's|$(at)LIBRARY_NAME$(at)|$(LIBRARY_NAME)|' \
21062: 	-e 's|$(at)NSPR_CFLAGS$(at)|$(NSPR_CFLAGS)|' \
21062: 	-e 's|$(at)JS_CONFIG_LIBS$(at)|$(JS_CONFIG_LIBS)|' \
21062: 	-e 's|$(at)MOZ_JS_LIBS$(at)|$(MOZ_JS_LIBS)|' \
21062: 	&& mv js-config.tmp $@ && chmod +x $@
21062: 
21062: SCRIPTS = js-config
23476: SDK_BINARY = js-config
21062: 
21062: install:: $(INSTALLED_HEADERS)
27537: 	$(SYSINSTALL) $^ $(DESTDIR)$(includedir)/$(MODULE)
21062: 
24537: install:: $(SCRIPTS)
27537: 	$(SYSINSTALL) $^ $(DESTDIR)$(bindir)
21062: 
23476: install:: $(LIBRARY) $(SHARED_LIBRARY) $(IMPORT_LIBRARY)
23126: ifneq (,$(LIBRARY))
27537: 	$(SYSINSTALL) $(LIBRARY) $(DESTDIR)$(libdir)
23126: endif
21062: ifneq (,$(SHARED_LIBRARY))
27537: 	$(SYSINSTALL) $(SHARED_LIBRARY) $(DESTDIR)$(libdir)
21062: endif
23126: ifneq (,$(IMPORT_LIBRARY))
27537: 	$(SYSINSTALL) $(IMPORT_LIBRARY) $(DESTDIR)$(libdir)
23126: endif
97454: 	$(MAKE) -C shell install
21062: 
15453: # Extra dependancies and rules for auto-generated headers
18863: host_jskwgen.$(OBJ_SUFFIX): jsversion.h jskeyword.tbl
    1: 
21659: # Use CURDIR to avoid finding a jsautokw.h in the source tree (from a
21659: # previous build?) via VPATH when we're building in a separate tree.
21659: $(CURDIR)/jsautokw.h: host_jskwgen$(HOST_BIN_SUFFIX)
    1: 	./host_jskwgen$(HOST_BIN_SUFFIX) $@
 7058: 
15453: host_jsoplengen.$(OBJ_SUFFIX): jsopcode.tbl
15453: 
21659: # Use CURDIR to avoid finding a jsautooplen.h in the source tree (from
21659: # a previous build?) via VPATH when we're building in a separate tree.
21659: $(CURDIR)/jsautooplen.h: host_jsoplengen$(HOST_BIN_SUFFIX)
15453: 	./host_jsoplengen$(HOST_BIN_SUFFIX) $@
15453: 
15453: # Force auto-header generation before compiling any source that may use them
73832: $(patsubst %.cc,%.$(OBJ_SUFFIX),$(CPPSRCS:%.cpp=%.$(OBJ_SUFFIX))): $(CURDIR)/jsautokw.h $(CURDIR)/jsautooplen.h
15453: 
73745: ifdef MOZ_ETW
73745: ETWProvider.h ETWProvider.rc ETWProvider.mof: ETWProvider.man
73745: 	$(MC) -um -mof $^
73745: 
74651: jsprobes.$(OBJ_SUFFIX): ETWProvider.h
73745: 
73745: ETWProvider.res: ETWProvider.rc
73745: 	$(RC) -r -i "$(SDKDIR)Include" $^
73745: 
73745: export:: ETWProvider.res
73745: 
73745: install:: ETWProvider.mof ETWProvider.man
73745: 	$(SYSINSTALL) $^ $(DESTDIR)$(bindir)
73745: 
73745: endif
73745: 
 7058: ifdef HAVE_DTRACE
21609: $(CURDIR)/javascript-trace.h: $(srcdir)/javascript-trace.d
 7058: 	dtrace -h -s $(srcdir)/javascript-trace.d -o javascript-trace.h.in
54198: 	sed -e 's/if _DTRACE_VERSION/ifdef INCLUDE_MOZILLA_DTRACE/' \
54198: 	    -e '/const/!s/char \*/const char */g' \
 7058: 	    javascript-trace.h.in > javascript-trace.h
21609: 
22854: # We can't automatically generate dependencies on auto-generated headers;
22854: # we have to list them explicitly.
53555: $(addsuffix .$(OBJ_SUFFIX),jsprobes jsinterp jsobj): $(CURDIR)/javascript-trace.h
 7058: endif
23075: 
50491: ###############################################
50491: # BEGIN kludges for the Nitro assembler
50491: #
50491: 
50491: # Needed to "configure" it correctly.  Unfortunately these
50491: # flags wind up being applied to all code in js/src, not just
50491: # the code in js/src/assembler.
91712: CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1
77053: 
82641: ifneq (,$(ENABLE_YARR_JIT)$(ENABLE_METHODJIT))
91712: CXXFLAGS +=  -DENABLE_JIT=1
77053: endif
50608: 
50608: INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
50491: 
53452: ifdef ENABLE_METHODJIT
52556: # Build a standalone test program that exercises the assembler
52556: # sources a bit.
52556: TESTMAIN_OBJS = \
52556: 		Assertions.$(OBJ_SUFFIX) \
52556: 		ExecutableAllocator.$(OBJ_SUFFIX) \
52556: 		ARMAssembler.$(OBJ_SUFFIX) \
52556: 		MacroAssemblerARM.$(OBJ_SUFFIX) \
52556: 		TestMain.$(OBJ_SUFFIX) \
52556: 		jsutil.$(OBJ_SUFFIX) \
52556: 		jslog2.$(OBJ_SUFFIX)
78435: 
78435: ifeq ($(OS_ARCH),WINNT)
78435: TESTMAIN_OBJS += ExecutableAllocatorWin.$(OBJ_SUFFIX)
78435: else
78435: TESTMAIN_OBJS += ExecutableAllocatorPosix.$(OBJ_SUFFIX)
78435: endif
78435: 
52556: TestMain$(HOST_BIN_SUFFIX): $(TESTMAIN_OBJS)
52556: 	$(CXX) -o TestMain$(HOST_BIN_SUFFIX) $(TESTMAIN_OBJS)
52556: endif
53452: 
50491: #
50491: # END kludges for the Nitro assembler
50491: ###############################################
52800: 
