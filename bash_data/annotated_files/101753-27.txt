 30881: <!DOCTYPE HTML>
 30881: <title>Canvas Tests</title>
 30881: <script src="/tests/SimpleTest/SimpleTest.js"></script>
 30881: <link rel="stylesheet" href="/tests/SimpleTest/test.css">
 30881: <body>
 30881: <script>
 30881: 
 30881: SimpleTest.waitForExplicitFinish();
 30881: 
 50649: function IsD2DEnabled() {
 50649:     var enabled = false;
 50649: 
 50649:     try {
 50649:         netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 50649:         enabled = Components.classes["@mozilla.org/gfx/info;1"].getService(Components.interfaces.nsIGfxInfo).D2DEnabled;
 50649:     } catch(e) {}
 50649:     
 50649:     return enabled;
 50649: }
 50649: 
 87513: function IsMacOSX10_5orOlder() {
 87513:     var is105orOlder = false;
 87513: 
 87513:     if (navigator.platform.indexOf("Mac") == 0) {
 87513:         netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 87513:         var version = Components.classes["@mozilla.org/system-info;1"]
 87513:                             .getService(Components.interfaces.nsIPropertyBag2)
 87513:                             .getProperty("version");
 87513:         // the next line is correct: Mac OS 10.6 corresponds to Darwin version 10 !
 87513:         // Mac OS 10.5 would be Darwin version 9. the |version| string we've got here
 87513:         // is the Darwin version.
 87513:         is105orOlder = (parseFloat(version) < 10.0);
 87513:     }
 87513:     return is105orOlder;
 87513: }
 87513: 
 87513: 
 72431: function IsAzureEnabled() {
 72431:   var enabled = false;
 72431: 
 72431:   try {
 72431:     netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 72431:     enabled = Components.classes["@mozilla.org/gfx/info;1"].getService(Components.interfaces.nsIGfxInfo).AzureEnabled;
 72431:   } catch (e) { }
 72431: 
 72431:   return enabled;
 72431: }
 72431: 
 82419: function IsAzureSkia() {
 82419:   var enabled = false;
 82419:   
 82419:   try {
 82419:     netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 82419:     var backend = Components.classes["@mozilla.org/gfx/info;1"].getService(Components.interfaces.nsIGfxInfo).getInfo().AzureBackend;
 82419:     enabled = (backend == "skia");
 82419:   } catch (e) { }
 82419: 
 82419:   return enabled;
 82419: }
 82419: 
 30881: </script>
 30881: <!-- Includes all the tests in the content/canvas/tests except for test_bug397524.html -->
 30881: 
 30881: <!-- [[[ test_2d.canvas.readonly.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.canvas.readonly</p>
 30881: <!-- Testing: CanvasRenderingContext2D.canvas is readonly -->
 30881: <canvas id="c1" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_canvas_readonly() {
 30881: 
 30881: var canvas = document.getElementById('c1');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var c = document.createElement('canvas');
 30881: var d = ctx.canvas;
 30881: ok(c !== d, "c !== d");
 30881: try { ctx.canvas = c; } catch (e) {} // not sure whether this should throw or not...
 30881: ok(ctx.canvas === d, "ctx.canvas === d");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.canvas.reference.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.canvas.reference</p>
 30881: <!-- Testing: CanvasRenderingContext2D.canvas refers back to its canvas -->
 30881: <canvas id="c2" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_canvas_reference() {
 30881: 
 30881: var canvas = document.getElementById('c2');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.canvas === canvas, "ctx.canvas === canvas");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.basic</p>
 30881: <canvas id="c3" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: function isPixel(ctx, x,y, r,g,b,a, d) {
 30881: 	var pos = x + "," + y;
 30881: 	var colour = r + "," + g + "," + b + "," + a;
 30881:     var pixel = ctx.getImageData(x, y, 1, 1);
 30881:     var pr = pixel.data[0],
 30881:         pg = pixel.data[1],
 30881:         pb = pixel.data[2],
 30881:         pa = pixel.data[3];
 30881:     ok(r-d <= pr && pr <= r+d &&
 30881:        g-d <= pg && pg <= g+d &&
 30881:        b-d <= pb && pb <= b+d &&
 30881:        a-d <= pa && pa <= a+d,
 36901:        "pixel "+pos+" of "+ctx.canvas.id+" is "+pr+","+pg+","+pb+","+pa+"; expected "+colour+" +/- "+d);
 30881: }
 30881: 
 30881: function test_2d_clearRect_basic() {
 30881: 
 30881: var canvas = document.getElementById('c3');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.clearRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.clip</p>
 30881: <canvas id="c4" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_clip() {
 30881: 
 30881: var canvas = document.getElementById('c4');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 16, 16);
 30881: ctx.clip();
 30881: 
 30881: ctx.clearRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 16, 16);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.globalalpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.globalalpha</p>
 30881: <canvas id="c5" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_globalalpha() {
 30881: 
 30881: var canvas = document.getElementById('c5');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalAlpha = 0.1;
 30881: ctx.clearRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.globalcomposite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.globalcomposite</p>
 30881: <canvas id="c6" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_globalcomposite() {
 30881: 
 30881: var canvas = document.getElementById('c6');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.clearRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.negative</p>
 30881: <canvas id="c7" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_negative() {
 30881: 
 30881: var canvas = document.getElementById('c7');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.clearRect(0, 0, 50, 25);
 30881: ctx.clearRect(100, 0, -50, 25);
 30881: ctx.clearRect(0, 50, 50, -25);
 30881: ctx.clearRect(100, 50, -50, -25);
 30881: isPixel(ctx, 25,12, 0,0,0,0, 0);
 30881: isPixel(ctx, 75,12, 0,0,0,0, 0);
 30881: isPixel(ctx, 25,37, 0,0,0,0, 0);
 30881: isPixel(ctx, 75,37, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.nonfinite</p>
 30881: <!-- Testing: clearRect() with Infinity/NaN is ignored -->
 30881: <canvas id="c8" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c8');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.clearRect(Infinity, 0, 100, 50);
 30881: ctx.clearRect(-Infinity, 0, 100, 50);
 30881: ctx.clearRect(NaN, 0, 100, 50);
 30881: ctx.clearRect(0, Infinity, 100, 50);
 30881: ctx.clearRect(0, -Infinity, 100, 50);
 30881: ctx.clearRect(0, NaN, 100, 50);
 30881: ctx.clearRect(0, 0, Infinity, 50);
 30881: ctx.clearRect(0, 0, -Infinity, 50);
 30881: ctx.clearRect(0, 0, NaN, 50);
 30881: ctx.clearRect(0, 0, 100, Infinity);
 30881: ctx.clearRect(0, 0, 100, -Infinity);
 30881: ctx.clearRect(0, 0, 100, NaN);
 30881: ctx.clearRect(Infinity, Infinity, 100, 50);
 30881: ctx.clearRect(Infinity, Infinity, Infinity, 50);
 30881: ctx.clearRect(Infinity, Infinity, Infinity, Infinity);
 30881: ctx.clearRect(Infinity, Infinity, 100, Infinity);
 30881: ctx.clearRect(Infinity, 0, Infinity, 50);
 30881: ctx.clearRect(Infinity, 0, Infinity, Infinity);
 30881: ctx.clearRect(Infinity, 0, 100, Infinity);
 30881: ctx.clearRect(0, Infinity, Infinity, 50);
 30881: ctx.clearRect(0, Infinity, Infinity, Infinity);
 30881: ctx.clearRect(0, Infinity, 100, Infinity);
 30881: ctx.clearRect(0, 0, Infinity, Infinity);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.path</p>
 30881: <canvas id="c9" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_path() {
 30881: 
 30881: var canvas = document.getElementById('c9');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.clearRect(0, 0, 16, 16);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.shadow.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.shadow</p>
 30881: <canvas id="c10" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_shadow() {
 30881: 
 30881: var canvas = document.getElementById('c10');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowBlur = 0;
 30881: ctx.shadowOffsetX = 0;
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.clearRect(0, -50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.transform.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.transform</p>
 30881: <canvas id="c11" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_transform() {
 30881: 
 30881: var canvas = document.getElementById('c11');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.scale(10, 10);
 30881: ctx.translate(0, 5);
 30881: ctx.clearRect(0, -5, 10, 5);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.clearRect.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.clearRect.zero</p>
 30881: <canvas id="c12" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_clearRect_zero() {
 30881: 
 30881: var canvas = document.getElementById('c12');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.clearRect(0, 0, 100, 0);
 30881: ctx.clearRect(0, 0, 0, 50);
 30881: ctx.clearRect(0, 0, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.copy</p>
 30881: <canvas id="c13" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_copy() {
 30881: 
 30881: var canvas = document.getElementById('c13');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_1.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.destination-atop</p>
 30881: <canvas id="c14" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c14');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_2.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 127,255,127,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.destination-in</p>
 30881: <canvas id="c15" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c15');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_3.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,255,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.destination-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.destination-out</p>
 30881: <canvas id="c16" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_destination_out() {
 30881: 
 30881: var canvas = document.getElementById('c16');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_4.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-out';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,255,31, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.destination-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.destination-over</p>
 30881: <canvas id="c17" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_destination_over() {
 30881: 
 30881: var canvas = document.getElementById('c17');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_5.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 109,255,145,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_5.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.lighter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.lighter</p>
 30881: <canvas id="c18" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_lighter() {
 30881: 
 30881: var canvas = document.getElementById('c18');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_6.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'lighter';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,127,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_6.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.source-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.source-atop</p>
 30881: <canvas id="c19" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_source_atop() {
 30881: 
 30881: var canvas = document.getElementById('c19');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_7.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-atop';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,63,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_7.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.source-in</p>
 30881: <canvas id="c20" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c20');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_8.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_8.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.source-out</p>
 30881: <canvas id="c21" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c21');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_9.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_9.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.source-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.source-over</p>
 30881: <canvas id="c22" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_source_over() {
 30881: 
 30881: var canvas = document.getElementById('c22');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_10.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-over';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 218,255,36,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_10.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.canvas.xor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.canvas.xor</p>
 30881: <canvas id="c23" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_canvas_xor() {
 30881: 
 30881: var canvas = document.getElementById('c23');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = canvas.width;
 30881: canvas2.height = canvas.height;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.drawImage(document.getElementById('yellow75_11.png'), 0, 0);
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,63,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_11.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.copy</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c24" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_copy() {
 30881: 
 30881: var canvas = document.getElementById('c24');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.destination-atop</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c25" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c25');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.destination-in</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c26" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c26');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.destination-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.destination-out</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c27" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_destination_out() {
 30881: 
 30881: var canvas = document.getElementById('c27');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-out';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.destination-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.destination-over</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c28" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_destination_over() {
 30881: 
 30881: var canvas = document.getElementById('c28');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.lighter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.lighter</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c29" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_lighter() {
 30881: 
 30881: var canvas = document.getElementById('c29');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'lighter';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.source-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.source-atop</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c30" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_source_atop() {
 30881: 
 30881: var canvas = document.getElementById('c30');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-atop';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.source-in</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c31" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c31');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.source-out</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c32" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c32');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.source-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.source-over</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c33" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_source_over() {
 30881: 
 30881: var canvas = document.getElementById('c33');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-over';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.clip.xor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.clip.xor</p>
 30881: <!-- Testing: fill() does not affect pixels outside the clip region. -->
 30881: <canvas id="c34" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_clip_xor() {
 30881: 
 30881: var canvas = document.getElementById('c34');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.rect(-20, -20, 10, 10);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.canvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.canvas</p>
 30881: <canvas id="c35" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_globalAlpha_canvas() {
 30881: 
 30881: var canvas = document.getElementById('c35');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalAlpha = 0.01; // avoid any potential alpha=0 optimisations
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: isPixel(ctx, 50,25, 2,253,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.canvaspattern.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.canvaspattern - bug 401790</p>
 30881: <canvas id="c36" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function todo_isPixel(ctx, x,y, r,g,b,a, d) {
 30881: 	var pos = x + "," + y;
 30881: 	var colour = r + "," + g + "," + b + "," + a;
 30881:     var pixel = ctx.getImageData(x, y, 1, 1);
 30881:     var pr = pixel.data[0],
 30881:         pg = pixel.data[1],
 30881:         pb = pixel.data[2],
 30881:         pa = pixel.data[3];
 30881:     todo(r-d <= pr && pr <= r+d &&
 30881:        g-d <= pg && pg <= g+d &&
 30881:        b-d <= pb && pb <= b+d &&
 30881:        a-d <= pa && pa <= a+d,
 72431:        "pixel "+pos+" of "+ctx.canvas.id+" is "+pr+","+pg+","+pb+","+pa+" (marked todo); expected "+colour+" +/- " + d);
 30881: }
 30881: 
 30881: function test_2d_composite_globalAlpha_canvaspattern() {
 30881: 
 30881: var canvas = document.getElementById('c36');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = ctx.createPattern(canvas2, 'no-repeat');
 30881: ctx.globalAlpha = 0.01; // avoid any potential alpha=0 optimisations
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 2,253,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.default</p>
 30881: <canvas id="c37" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_globalAlpha_default() {
 30881: 
 30881: var canvas = document.getElementById('c37');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.globalAlpha === 1.0, "ctx.globalAlpha === 1.0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.fill.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.fill</p>
 30881: <canvas id="c38" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_globalAlpha_fill() {
 30881: 
 30881: var canvas = document.getElementById('c38');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalAlpha = 0.01; // avoid any potential alpha=0 optimisations
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 2,253,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.image.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.image</p>
 30881: <canvas id="c39" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_globalAlpha_image() {
 30881: 
 30881: var canvas = document.getElementById('c39');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalAlpha = 0.01; // avoid any potential alpha=0 optimisations
 30881: ctx.drawImage(document.getElementById('red_1.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 2,253,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.imagepattern.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.imagepattern - bug 401790</p>
 30881: <canvas id="c40" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_globalAlpha_imagepattern() {
 30881: 
 30881: var canvas = document.getElementById('c40');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('red_2.png'), 'no-repeat');
 30881: ctx.globalAlpha = 0.01; // avoid any potential alpha=0 optimisations
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 2,253,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.invalid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.invalid</p>
 30881: <canvas id="c41" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_globalAlpha_invalid() {
 30881: 
 30881: var canvas = document.getElementById('c41');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalAlpha = 0.5;
 30881: var a = ctx.globalAlpha; // might not be exactly 0.5, if it is rounded/quantised, so remember for future comparisons
 30881: ctx.globalAlpha = Infinity;
 64487: ok(ctx.globalAlpha === a, "ctx.globalAlpha === a");
 30881: ctx.globalAlpha = -Infinity;
 64487: ok(ctx.globalAlpha === a, "ctx.globalAlpha === a");
 30881: ctx.globalAlpha = NaN;
 64487: ok(ctx.globalAlpha === a, "ctx.globalAlpha === a");
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.globalAlpha.range.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.globalAlpha.range</p>
 30881: <canvas id="c42" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_globalAlpha_range() {
 30881: 
 30881: var canvas = document.getElementById('c42');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalAlpha = 0.5;
 30881: var a = ctx.globalAlpha; // might not be exactly 0.5, if it is rounded/quantised, so remember for future comparisons
 30881: ctx.globalAlpha = 1.1;
 30881: ok(ctx.globalAlpha == a, "ctx.globalAlpha == a");
 30881: ctx.globalAlpha = -0.1;
 30881: ok(ctx.globalAlpha == a, "ctx.globalAlpha == a");
 30881: ctx.globalAlpha = 0;
 30881: ok(ctx.globalAlpha == 0, "ctx.globalAlpha == 0");
 30881: ctx.globalAlpha = 1;
 30881: ok(ctx.globalAlpha == 1, "ctx.globalAlpha == 1");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.image.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.copy</p>
 30881: <canvas id="c43" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_copy() {
 30881: 
 30881: var canvas = document.getElementById('c43');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.drawImage(document.getElementById('yellow75_12.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_12.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.destination-atop</p>
 30881: <canvas id="c44" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c44');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.drawImage(document.getElementById('yellow75_13.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 127,255,127,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_13.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.destination-in</p>
 30881: <canvas id="c45" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c45');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.drawImage(document.getElementById('yellow75_14.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,255,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_14.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.destination-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.destination-out</p>
 30881: <canvas id="c46" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_destination_out() {
 30881: 
 30881: var canvas = document.getElementById('c46');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-out';
 30881: ctx.drawImage(document.getElementById('yellow75_15.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,255,31, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_15.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.destination-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.destination-over</p>
 30881: <canvas id="c47" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_destination_over() {
 30881: 
 30881: var canvas = document.getElementById('c47');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.drawImage(document.getElementById('yellow75_16.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 109,255,145,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_16.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.lighter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.lighter</p>
 30881: <canvas id="c48" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_lighter() {
 30881: 
 30881: var canvas = document.getElementById('c48');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'lighter';
 30881: ctx.drawImage(document.getElementById('yellow75_17.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,127,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_17.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.source-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.source-atop</p>
 30881: <canvas id="c49" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_source_atop() {
 30881: 
 30881: var canvas = document.getElementById('c49');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-atop';
 30881: ctx.drawImage(document.getElementById('yellow75_18.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,63,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_18.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.source-in</p>
 30881: <canvas id="c50" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c50');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.drawImage(document.getElementById('yellow75_19.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_19.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.source-out</p>
 30881: <canvas id="c51" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c51');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.drawImage(document.getElementById('yellow75_20.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 255,255,0,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_20.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.source-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.source-over</p>
 30881: <canvas id="c52" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_source_over() {
 30881: 
 30881: var canvas = document.getElementById('c52');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-over';
 30881: ctx.drawImage(document.getElementById('yellow75_21.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 218,255,36,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_21.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.image.xor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.image.xor</p>
 30881: <canvas id="c53" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_image_xor() {
 30881: 
 30881: var canvas = document.getElementById('c53');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.drawImage(document.getElementById('yellow75_22.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 191,255,63,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow75.png" id="yellow75_22.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.casesensitive.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.casesensitive - bug 401788</p>
 30881: <canvas id="c54" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_casesensitive() {
 30881: 
 30881: var canvas = document.getElementById('c54');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'Source-over';
 30881: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.clear.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.clear</p>
 30881: <canvas id="c55" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_clear() {
 30881: 
 30881: var canvas = document.getElementById('c55');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'clear';
 71169: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.darker.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.darker</p>
 30881: <canvas id="c56" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_darker() {
 30881: 
 30881: var canvas = document.getElementById('c56');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'darker';
 47675: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.default</p>
 30881: <canvas id="c57" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_default() {
 30881: 
 30881: var canvas = document.getElementById('c57');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.globalCompositeOperation == 'source-over', "ctx.globalCompositeOperation == 'source-over'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.get.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.get</p>
 30881: <canvas id="c58" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_get() {
 30881: 
 30881: var canvas = document.getElementById('c58');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var modes = ['source-atop', 'source-in', 'source-out', 'source-over',
 30881:     'destination-atop', 'destination-in', 'destination-out', 'destination-over',
 30881:     'lighter', 'copy', 'xor'];
 30881: for (var i = 0; i < modes.length; ++i)
 30881: {
 30881:     ctx.globalCompositeOperation = modes[i];
 30881:     ok(ctx.globalCompositeOperation == modes[i], "ctx.globalCompositeOperation == modes[\""+(i)+"\"]");
 30881: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.highlight.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.highlight - bug 401788</p>
 30881: <canvas id="c59" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_highlight() {
 30881: 
 30881: var canvas = document.getElementById('c59');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'highlight';
 30881: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.nullsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.nullsuffix - bug 401788</p>
 30881: <canvas id="c60" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_nullsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c60');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'source-over\0';
 30881: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.over</p>
 30881: <canvas id="c61" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_over() {
 30881: 
 30881: var canvas = document.getElementById('c61');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'over';
 71169: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.operation.unrecognised.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.operation.unrecognised - bug 401788</p>
 30881: <canvas id="c62" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_composite_operation_unrecognised() {
 30881: 
 30881: var canvas = document.getElementById('c62');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.globalCompositeOperation = 'nonexistent';
 30881: ok(ctx.globalCompositeOperation == 'xor', "ctx.globalCompositeOperation == 'xor'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.copy</p>
 30881: <canvas id="c63" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_copy() {
 30881: 
 30881: var canvas = document.getElementById('c63');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,0,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.destination-atop</p>
 30881: <canvas id="c64" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c64');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,255,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.destination-in</p>
 30881: <canvas id="c65" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c65');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,255,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.destination-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.destination-out</p>
 30881: <canvas id="c66" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_destination_out() {
 30881: 
 30881: var canvas = document.getElementById('c66');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-out';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.destination-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.destination-over</p>
 30881: <canvas id="c67" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_destination_over() {
 30881: 
 30881: var canvas = document.getElementById('c67');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,255,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.lighter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.lighter</p>
 30881: <canvas id="c68" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_lighter() {
 30881: 
 30881: var canvas = document.getElementById('c68');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'lighter';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,255,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.source-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.source-atop</p>
 30881: <canvas id="c69" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_source_atop() {
 30881: 
 30881: var canvas = document.getElementById('c69');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-atop';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,0,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.source-in</p>
 30881: <canvas id="c70" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c70');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,0,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.source-out</p>
 30881: <canvas id="c71" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c71');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.source-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.source-over</p>
 30881: <canvas id="c72" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_source_over() {
 30881: 
 30881: var canvas = document.getElementById('c72');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-over';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,0,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.solid.xor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.solid.xor</p>
 30881: <canvas id="c73" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_solid_xor() {
 30881: 
 30881: var canvas = document.getElementById('c73');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.fillStyle = 'rgba(255, 255, 0, 1.0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.copy</p>
 30881: <canvas id="c74" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_copy() {
 30881: 
 30881: var canvas = document.getElementById('c74');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,255,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.destination-atop</p>
 30881: <canvas id="c75" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c75');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,127,127,191, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.destination-in</p>
 30881: <canvas id="c76" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c76');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.destination-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.destination-out</p>
 30881: <canvas id="c77" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_destination_out() {
 30881: 
 30881: var canvas = document.getElementById('c77');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-out';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,31, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.destination-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.destination-over</p>
 30881: <canvas id="c78" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_destination_over() {
 30881: 
 30881: var canvas = document.getElementById('c78');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,145,109,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.lighter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.lighter</p>
 30881: <canvas id="c79" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_lighter() {
 30881: 
 30881: var canvas = document.getElementById('c79');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'lighter';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,127,191,255, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.source-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.source-atop</p>
 30881: <canvas id="c80" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_source_atop() {
 30881: 
 30881: var canvas = document.getElementById('c80');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-atop';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,63,191,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.source-in</p>
 30881: <canvas id="c81" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c81');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,255,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.source-out</p>
 30881: <canvas id="c82" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c82');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,255,95, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.source-over.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.source-over</p>
 30881: <canvas id="c83" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_source_over() {
 30881: 
 30881: var canvas = document.getElementById('c83');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-over';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,36,218,223, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.transparent.xor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.transparent.xor</p>
 30881: <canvas id="c84" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_composite_transparent_xor() {
 30881: 
 30881: var canvas = document.getElementById('c84');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,63,191,127, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.fill.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.fill.copy</p>
 30881: <!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c85" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_fill_copy() {
 30881: 
 30881: var canvas = document.getElementById('c85');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.translate(0, 25);
 30881: ctx.fillRect(0, 50, 100, 50);
 36901: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.fill.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.fill.destination-atop</p>
 30881: <!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c86" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_fill_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c86');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.translate(0, 25);
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.fill.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.fill.destination-in</p>
 30881: <!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c87" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_fill_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c87');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.translate(0, 25);
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.fill.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.fill.source-in</p>
 30881: <!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c88" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_fill_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c88');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.translate(0, 25);
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.fill.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.fill.source-out</p>
 30881: <!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c89" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_fill_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c89');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 30881: ctx.translate(0, 25);
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.image.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.image.copy</p>
 30881: <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c90" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_image_copy() {
 30881: 
 30881: var canvas = document.getElementById('c90');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.drawImage(document.getElementById('yellow_1.png'), 40, 40, 10, 10, 40, 50, 10, 10);
 36901: isPixel(ctx, 15,15, 0,0,0,0, 5);
 36901: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.image.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.image.destination-atop</p>
 30881: <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c91" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_image_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c91');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.drawImage(document.getElementById('yellow_2.png'), 40, 40, 10, 10, 40, 50, 10, 10);
 30881: isPixel(ctx, 15,15, 0,0,0,0, 5);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.image.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.image.destination-in</p>
 30881: <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c92" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_image_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c92');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.drawImage(document.getElementById('yellow_3.png'), 40, 40, 10, 10, 40, 50, 10, 10);
 30881: isPixel(ctx, 15,15, 0,0,0,0, 5);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.image.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.image.source-in</p>
 30881: <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c93" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_image_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c93');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.drawImage(document.getElementById('yellow_4.png'), 40, 40, 10, 10, 40, 50, 10, 10);
 30881: isPixel(ctx, 15,15, 0,0,0,0, 5);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.image.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.image.source-out</p>
 30881: <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c94" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_image_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c94');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.drawImage(document.getElementById('yellow_5.png'), 40, 40, 10, 10, 40, 50, 10, 10);
 30881: isPixel(ctx, 15,15, 0,0,0,0, 5);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_5.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.pattern.copy.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.pattern.copy</p>
 30881: <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c95" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_pattern_copy() {
 30881: 
 30881: var canvas = document.getElementById('c95');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'copy';
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_6.png'), 'no-repeat');
 30881: ctx.fillRect(0, 50, 100, 50);
 36901: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_6.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.pattern.destination-atop.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.pattern.destination-atop</p>
 30881: <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c96" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_pattern_destination_atop() {
 30881: 
 30881: var canvas = document.getElementById('c96');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_7.png'), 'no-repeat');
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_7.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.pattern.destination-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.pattern.destination-in</p>
 30881: <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c97" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_pattern_destination_in() {
 30881: 
 30881: var canvas = document.getElementById('c97');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-in';
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_8.png'), 'no-repeat');
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_8.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.pattern.source-in.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.pattern.source-in</p>
 30881: <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c98" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_pattern_source_in() {
 30881: 
 30881: var canvas = document.getElementById('c98');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_9.png'), 'no-repeat');
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_9.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.composite.uncovered.pattern.source-out.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.composite.uncovered.pattern.source-out</p>
 30881: <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 30881: <canvas id="c99" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_composite_uncovered_pattern_source_out() {
 30881: 
 30881: var canvas = document.getElementById('c99');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'source-out';
 30881: ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_10.png'), 'no-repeat');
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 5);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_10.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.3arg.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.3arg</p>
 30881: <canvas id="c100" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_3arg() {
 30881: 
 30881: var canvas = document.getElementById('c100');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.drawImage(document.getElementById('green_1.png'), 0, 0);
 30881: ctx.drawImage(document.getElementById('red_3.png'), -100, 0);
 30881: ctx.drawImage(document.getElementById('red_3.png'), 100, 0);
 30881: ctx.drawImage(document.getElementById('red_3.png'), 0, -50);
 30881: ctx.drawImage(document.getElementById('red_3.png'), 0, 50);
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_3.png" class="resource">
 30881: <img src="image_green.png" id="green_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.5arg.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.5arg</p>
 30881: <canvas id="c101" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_5arg() {
 30881: 
 30881: var canvas = document.getElementById('c101');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_2.png'), 50, 0, 50, 50);
 30881: ctx.drawImage(document.getElementById('red_4.png'), 0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_4.png" class="resource">
 30881: <img src="image_green.png" id="green_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.9arg.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.9arg.basic</p>
 30881: <canvas id="c102" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_9arg_basic() {
 30881: 
 30881: var canvas = document.getElementById('c102');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_3.png'), 0, 0, 100, 50, 0, 0, 100, 50);
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.9arg.destpos.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.9arg.destpos</p>
 30881: <canvas id="c103" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_9arg_destpos() {
 30881: 
 30881: var canvas = document.getElementById('c103');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_4.png'), 0, 0, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, -100, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, 100, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, 0, -50, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, 0, 50, 100, 50);
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_5.png" class="resource">
 30881: <img src="image_green.png" id="green_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.9arg.destsize.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.9arg.destsize</p>
 30881: <canvas id="c104" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_9arg_destsize() {
 30881: 
 30881: var canvas = document.getElementById('c104');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_5.png'), 1, 1, 1, 1, 0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, -50, 0, 50, 50);
 30881: ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, 100, 0, 50, 50);
 30881: ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, 0, -25, 100, 25);
 30881: ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, 0, 50, 100, 25);
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_6.png" class="resource">
 30881: <img src="image_green.png" id="green_5.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.9arg.sourcepos.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.9arg.sourcepos</p>
 30881: <canvas id="c105" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_9arg_sourcepos() {
 30881: 
 30881: var canvas = document.getElementById('c105');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('rgrg-256x256_1.png'), 140, 20, 100, 50, 0, 0, 100, 50);
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_rgrg-256x256.png" id="rgrg-256x256_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.9arg.sourcesize.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.9arg.sourcesize</p>
 30881: <canvas id="c106" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_9arg_sourcesize() {
 30881: 
 30881: var canvas = document.getElementById('c106');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('rgrg-256x256_2.png'), 0, 0, 256, 256, 0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 51, 26);
 30881: ctx.fillRect(49, 24, 51, 26);
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 20,20, 0,255,0,255, 2);
 30881: isPixel(ctx, 80,20, 0,255,0,255, 2);
 30881: isPixel(ctx, 20,30, 0,255,0,255, 2);
 30881: isPixel(ctx, 80,30, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_rgrg-256x256.png" id="rgrg-256x256_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.alpha</p>
 30881: <canvas id="c107" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c107');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalAlpha = 0;
 30881: ctx.drawImage(document.getElementById('red_7.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_7.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.animated.apng.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.animated.apng</p>
 30881: <!-- Testing: drawImage() of an APNG with no poster frame draws the first frame -->
 30881: <canvas id="c108" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function deferTest() {
 30881:     _deferred = true;
 30881: }
 30881: function wrapFunction(f) {
 30881:     return function () {
 30881:         f.apply(null, arguments);
 30881:     };
 30881: }
 30881: 
 30881: var canvas108 = document.getElementById('c108');
 30881: var ctx108 = canvas108.getContext('2d');
 30881: var isDone_test_2d_drawImage_animated_apng = false;
 30881: 
 30881: function test_2d_drawImage_animated_apng() {
 30881: 
 30881: deferTest();
 30881: setTimeout(wrapFunction(function () {
 30881:     ctx108.drawImage(document.getElementById('anim-gr_1.png'), 0, 0);
 32424:     isPixel(ctx108, 50,25, 0,255,0,255, 2);
 30881: 	isDone_test_2d_drawImage_animated_apng = true;
 30881: }), 5000);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_anim-gr.png" id="anim-gr_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.animated.gif.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.animated.gif</p>
 30881: <!-- Testing: drawImage() of an animated GIF draws the first frame -->
 30881: <canvas id="c109" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: var canvas109 = document.getElementById('c109');
 30881: var ctx109 = canvas109.getContext('2d');
 30881: var isDone_test_2d_drawImage_animated_gif = false;
 30881: 
 30881: function test_2d_drawImage_animated_gif() {
 30881: 
 30881: deferTest();
 30881: setTimeout(wrapFunction(function () {
 30881:     ctx109.drawImage(document.getElementById('anim-gr_1.gif'), 0, 0);
 32424:     isPixel(ctx109, 50,25, 0,255,0,255, 2);
 30881: 	isDone_test_2d_drawImage_animated_gif = true;
 30881: }), 5000);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_anim-gr.gif" id="anim-gr_1.gif" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.animated.poster.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.animated.poster</p>
 30881: <!-- Testing: drawImage() of an APNG draws the poster frame -->
 30881: <canvas id="c110" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: var canvas110 = document.getElementById('c110');
 30881: var ctx110 = canvas110.getContext('2d');
 30881: 
 30881: 
 30881: function test_2d_drawImage_animated_poster() {
 30881: 
 30881: ctx110.drawImage(document.getElementById('anim-poster-gr_1.png'), 0, 0);
 30881: todo_isPixel(ctx110, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_anim-poster-gr.png" id="anim-poster-gr_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.broken.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.broken</p>
 30881: <canvas id="c111" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_drawImage_broken() {
 30881: 
 30881: var canvas = document.getElementById('c111');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('broken_1.png');
 30881: todo(img.complete === false, "img.complete === false");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(img, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_broken.png" id="broken_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.canvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.canvas</p>
 30881: <canvas id="c112" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_canvas() {
 30881: 
 30881: var canvas = document.getElementById('c112');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.clip</p>
 30881: <canvas id="c113" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_clip() {
 30881: 
 30881: var canvas = document.getElementById('c113');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.rect(-10, -10, 1, 1);
 30881: ctx.clip();
 30881: ctx.drawImage(document.getElementById('red_8.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_8.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.composite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.composite</p>
 30881: <canvas id="c114" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_composite() {
 30881: 
 30881: var canvas = document.getElementById('c114');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.drawImage(document.getElementById('red_9.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_9.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.floatsource.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.floatsource</p>
 30881: <canvas id="c115" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_floatsource() {
 30881: 
 30881: var canvas = document.getElementById('c115');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.drawImage(document.getElementById('green_6.png'), 10.1, 10.1, 0.1, 0.1, 0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_6.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.incomplete.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.incomplete</p>
 30881: <canvas id="c116" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_drawImage_incomplete() {
 30881: 
 30881: var canvas = document.getElementById('c116');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = new Image();
 30881: todo(img.complete === false, "img.complete === false");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(img, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.negativedest.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.negativedest</p>
 30881: <canvas id="c117" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_negativedest() {
 30881: 
 30881: var canvas = document.getElementById('c117');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 74273: var _thrown_outer = false;
 74273: try {
 74273: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('ggrr-256x256_1.png'), 100, 78, 50, 50, 0, 50, 50, -50);
 30881: ctx.drawImage(document.getElementById('ggrr-256x256_1.png'), 100, 128, 50, -50, 100, 50, -50, -50);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 51,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 51,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 74273: } catch (e) {
 74273:     _thrown_outer = true;
 74273: }
 74273: todo(!_thrown_outer, 'should not throw exception');
 74273: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_ggrr-256x256.png" id="ggrr-256x256_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.negativesource.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.negativesource</p>
 30881: <canvas id="c118" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_negativesource() {
 30881: 
 30881: var canvas = document.getElementById('c118');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 74273: var _thrown_outer = false;
 74273: try {
 74273: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('ggrr-256x256_2.png'), 100, 78, -100, 50, 0, 0, 50, 50);
 30881: ctx.drawImage(document.getElementById('ggrr-256x256_2.png'), 100, 128, -100, -50, 50, 0, 50, 50);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 51,1, 0,255,0,255, 2);
 30881: isPixel(ctx, 51,48, 0,255,0,255, 2);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 74273: } catch (e) {
 74273:     _thrown_outer = true;
 74273: }
 74273: todo(!_thrown_outer, 'should not throw exception');
 74273: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_ggrr-256x256.png" id="ggrr-256x256_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.nonfinite</p>
 30881: <!-- Testing: drawImage() with Infinity/NaN is ignored -->
 30881: <canvas id="c119" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c119');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 72431: 
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var red = document.getElementById('red_10.png');
 30881: ctx.drawImage(red, Infinity, 0);
 30881: ctx.drawImage(red, -Infinity, 0);
 30881: ctx.drawImage(red, NaN, 0);
 30881: ctx.drawImage(red, 0, Infinity);
 30881: ctx.drawImage(red, 0, -Infinity);
 30881: ctx.drawImage(red, 0, NaN);
 30881: ctx.drawImage(red, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, -Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, NaN, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, -Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, NaN, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, -Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, NaN, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, -Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, NaN);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, -Infinity, 0, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, NaN, 0, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, -Infinity, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, NaN, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, -Infinity, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, NaN, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, -Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, NaN, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, -Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, NaN, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, -Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, NaN, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, -Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, NaN, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, 100, -Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, 100, NaN);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, Infinity, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, Infinity, 100, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, Infinity, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, Infinity, 0, 100, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, Infinity, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, Infinity, 100, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, Infinity, 50, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, 0, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, Infinity, 0, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, Infinity, 100, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, 0, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, 0, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, Infinity, 0, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, Infinity, 50);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, 100, Infinity);
 30881: ctx.drawImage(red, 0, 0, 100, 50, 0, 0, Infinity, Infinity);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 71791: ok(!_thrown_outer, 'should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_10.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.nowrap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.nowrap</p>
 30881: <!-- Testing: Stretched images do not get pixels wrapping around the edges -->
 30881: <canvas id="c120" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_nowrap() {
 30881: 
 30881: var canvas = document.getElementById('c120');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('redtransparent_1.png'), -1950, 0, 2000, 50);
 30881: isPixel(ctx, 45,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 55,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_redtransparent.png" id="redtransparent_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.null.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.null</p>
 30881: <canvas id="c121" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_drawImage_null() {
 30881: 
 30881: var canvas = document.getElementById('c121');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(null, 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.outsidesource.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.outsidesource</p>
 30881: <canvas id="c122" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_drawImage_outsidesource() {
 30881: 
 30881: var canvas = document.getElementById('c122');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 74273: var _thrown_outer = false;
 74273: try {
 74273: 
 30881: ctx.drawImage(document.getElementById('green_7.png'), 10.5, 10.5, 89.5, 39.5, 0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_7.png'), 5.5, 5.5, -5.5, -5.5, 0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('green_7.png'), 100, 50, -5, -5, 0, 0, 100, 50);
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), -0.001, 0, 100, 50, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 0, -0.001, 100, 50, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 0, 0, 100.001, 50, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 0, 0, 100, 50.001, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 50, 0, 50.001, 50, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 0, 0, -5, 5, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 0, 0, 5, -5, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_11.png'), 110, 60, -20, -20, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 74273: todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 74273: 
 74273: } catch (e) {
 74273:     _thrown_outer = true;
 74273: }
 74273: todo(!_thrown_outer, 'should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_7.png" class="resource">
 30881: <img src="image_red.png" id="red_11.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.path</p>
 30881: <canvas id="c123" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_path() {
 30881: 
 30881: var canvas = document.getElementById('c123');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.drawImage(document.getElementById('red_12.png'), 0, 0);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_12.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.self.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.self.1 - bug 433235</p>
 30881: <canvas id="c124" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_self_1() {
 30881: 
 30881: var canvas = document.getElementById('c124');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.drawImage(canvas, 50, 0);
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.self.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.self.2 - bug 433235</p>
 30881: <canvas id="c125" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_self_2() {
 30881: 
 30881: var canvas = document.getElementById('c125');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 1, 100, 49);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 1);
 30881: ctx.drawImage(canvas, 0, 1);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 2);
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 2);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 2);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.transform.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.transform</p>
 30881: <canvas id="c126" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_transform() {
 30881: 
 30881: var canvas = document.getElementById('c126');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.translate(100, 0);
 30881: ctx.drawImage(document.getElementById('red_13.png'), 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_13.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.drawImage.wrongtype.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.wrongtype</p>
 30881: <canvas id="c127" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_drawImage_wrongtype() {
 30881: 
 34226: netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 34226: 
 30881: var canvas = document.getElementById('c127');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(undefined, 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(0, 0, 0);
 34226: } catch (e) { _thrown = e }; ok(_thrown && _thrown.result == Components.results.NS_ERROR_XPC_BAD_CONVERT_JS_ZERO_ISNOT_NULL, "should throw NS_ERROR_XPC_BAD_CONVERT_JS_ZERO_ISNOT_NULL");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage("", 0, 0);
 34226: } catch (e) { _thrown = e }; ok(_thrown && _thrown.result == Components.results.NS_ERROR_XPC_BAD_CONVERT_JS, "should throw NS_ERROR_XPC_BAD_CONVERT_JS");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.createElement('p'), 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.drawImage.zerosource.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.drawImage.zerosource</p>
 30881: <!-- Testing: drawImage with zero-sized source rectangle throws INDEX_SIZE_ERR -->
 30881: <canvas id="c128" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_drawImage_zerosource() {
 30881: 
 30881: var canvas = document.getElementById('c128');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 1, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 1, 0, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 0, 0, 0, 100, 50);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_14.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.fillRect.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.basic</p>
 30881: <canvas id="c129" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_basic() {
 30881: 
 30881: var canvas = document.getElementById('c129');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.clip</p>
 30881: <canvas id="c130" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_clip() {
 30881: 
 30881: var canvas = document.getElementById('c130');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 16, 16);
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 16, 16);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.negative</p>
 30881: <canvas id="c131" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_negative() {
 30881: 
 30881: var canvas = document.getElementById('c131');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 25);
 30881: ctx.fillRect(100, 0, -50, 25);
 30881: ctx.fillRect(0, 50, 50, -25);
 30881: ctx.fillRect(100, 50, -50, -25);
 30881: isPixel(ctx, 25,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,37, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.nonfinite</p>
 30881: <!-- Testing: fillRect() with Infinity/NaN is ignored -->
 30881: <canvas id="c132" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c132');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(Infinity, 0, 100, 50);
 30881: ctx.fillRect(-Infinity, 0, 100, 50);
 30881: ctx.fillRect(NaN, 0, 100, 50);
 30881: ctx.fillRect(0, Infinity, 100, 50);
 30881: ctx.fillRect(0, -Infinity, 100, 50);
 30881: ctx.fillRect(0, NaN, 100, 50);
 30881: ctx.fillRect(0, 0, Infinity, 50);
 30881: ctx.fillRect(0, 0, -Infinity, 50);
 30881: ctx.fillRect(0, 0, NaN, 50);
 30881: ctx.fillRect(0, 0, 100, Infinity);
 30881: ctx.fillRect(0, 0, 100, -Infinity);
 30881: ctx.fillRect(0, 0, 100, NaN);
 30881: ctx.fillRect(Infinity, Infinity, 100, 50);
 30881: ctx.fillRect(Infinity, Infinity, Infinity, 50);
 30881: ctx.fillRect(Infinity, Infinity, Infinity, Infinity);
 30881: ctx.fillRect(Infinity, Infinity, 100, Infinity);
 30881: ctx.fillRect(Infinity, 0, Infinity, 50);
 30881: ctx.fillRect(Infinity, 0, Infinity, Infinity);
 30881: ctx.fillRect(Infinity, 0, 100, Infinity);
 30881: ctx.fillRect(0, Infinity, Infinity, 50);
 30881: ctx.fillRect(0, Infinity, Infinity, Infinity);
 30881: ctx.fillRect(0, Infinity, 100, Infinity);
 30881: ctx.fillRect(0, 0, Infinity, Infinity);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.path</p>
 30881: <canvas id="c133" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_path() {
 30881: 
 30881: var canvas = document.getElementById('c133');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 16, 16);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.shadow.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.shadow</p>
 30881: <canvas id="c134" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_shadow() {
 30881: 
 30881: var canvas = document.getElementById('c134');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.shadowBlur = 0;
 30881: ctx.shadowOffsetX = 0;
 30881: ctx.shadowOffsetY = 50;
 30881: 
 30881: // Shadows are optional, so just test that if they apply to fill() then they apply to fillRect() too
 30881: ctx.beginPath();
 30881: ctx.rect(0, -50, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.fill();
 30881: 
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.transform.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.transform</p>
 30881: <canvas id="c135" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_transform() {
 30881: 
 30881: var canvas = document.getElementById('c135');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.scale(10, 10);
 30881: ctx.translate(0, 5);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, -5, 10, 5);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillRect.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillRect.zero</p>
 30881: <canvas id="c136" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillRect_zero() {
 30881: 
 30881: var canvas = document.getElementById('c136');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 0);
 30881: ctx.fillRect(0, 0, 0, 50);
 30881: ctx.fillRect(0, 0, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.default</p>
 30881: <canvas id="c137" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_fillStyle_default() {
 30881: 
 30881: var canvas = document.getElementById('c137');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.fillStyle == '#000000', "ctx.fillStyle == '#000000'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.get.semitransparent.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.get.semitransparent</p>
 30881: <canvas id="c138" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_fillStyle_get_semitransparent() {
 30881: 
 30881: var canvas = document.getElementById('c138');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgba(255,255,255,0.45)';
 38928: ok(/^rgba\(255, 255, 255, 0\.4\d+\)$/.test(ctx.fillStyle), "ctx.fillStyle =~ /^rgba\\(255, 255, 255, 0\\.4\\d+\\)$/");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.get.solid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.get.solid</p>
 30881: <canvas id="c139" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_fillStyle_get_solid() {
 30881: 
 30881: var canvas = document.getElementById('c139');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#fa0';
 30881: ok(ctx.fillStyle === '#ffaa00', "ctx.fillStyle === '#ffaa00'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.get.transparent.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.get.transparent</p>
 30881: <canvas id="c140" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_fillStyle_get_transparent() {
 30881: 
 30881: var canvas = document.getElementById('c140');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgba(0,0,0,0)';
 55015: is(ctx.fillStyle, 'rgba(0, 0, 0, 0)', "ctx.fillStyle should be what we set it to");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.invalidstring.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.invalidstring</p>
 30881: <canvas id="c141" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_invalidstring() {
 30881: 
 30881: var canvas = document.getElementById('c141');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillStyle = 'invalid';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.invalidtype.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.invalidtype</p>
 30881: <canvas id="c142" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_invalidtype() {
 30881: 
 30881: var canvas = document.getElementById('c142');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillStyle = null;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.current.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.current.basic</p>
 30881: <!-- Testing: currentColor is computed from the canvas element -->
 30881: <canvas id="c143" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_current_basic() {
 30881: 
 30881: var canvas = document.getElementById('c143');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('style', 'color: #0f0');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'currentColor';
 30881: ctx.fillRect(0, 0, 100, 50);
101129: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.current.changed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.current.changed</p>
 30881: <!-- Testing: currentColor is computed when the attribute is set, not when it is painted -->
 30881: <canvas id="c144" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_current_changed() {
 30881: 
 30881: var canvas = document.getElementById('c144');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('style', 'color: #0f0');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'currentColor';
 30881: canvas.setAttribute('style', 'color: #f00');
 30881: ctx.fillRect(0, 0, 100, 50);
101129: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.current.removed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.current.removed</p>
 30881: <!-- Testing: currentColor is solid black when the canvas element is not in a document -->
 30881: <canvas id="c145" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_current_removed() {
 30881: 
 30881: var canvas = document.getElementById('c145');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Try not to let it undetectably incorrectly pick up opaque-black
 30881: // from other parts of the document:
 30881: document.body.parentNode.setAttribute('style', 'color: #f00');
 30881: document.body.setAttribute('style', 'color: #f00');
 30881: canvas.setAttribute('style', 'color: #f00');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillStyle = 'currentColor';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: ctx.drawImage(canvas2, 0, 0);
 30881: 
 30881: document.body.parentNode.removeAttribute('style');
 30881: document.body.removeAttribute('style');
 30881: 
101129: isPixel(ctx, 50,25, 0,0,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hex3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hex3</p>
 30881: <canvas id="c146" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hex3() {
 30881: 
 30881: var canvas = document.getElementById('c146');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hex6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hex6</p>
 30881: <canvas id="c147" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hex6() {
 30881: 
 30881: var canvas = document.getElementById('c147');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = '#00fF00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-1</p>
 30881: <canvas id="c148" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_1() {
 30881: 
 30881: var canvas = document.getElementById('c148');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120, 100%, 50%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-2</p>
 30881: <canvas id="c149" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_2() {
 30881: 
 30881: var canvas = document.getElementById('c149');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl( -240 , 100% , 50% )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-3</p>
 30881: <canvas id="c150" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_3() {
 30881: 
 30881: var canvas = document.getElementById('c150');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(360120, 100%, 50%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-4</p>
 30881: <canvas id="c151" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_4() {
 30881: 
 30881: var canvas = document.getElementById('c151');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(-360240, 100%, 50%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-5</p>
 30881: <canvas id="c152" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_5() {
 30881: 
 30881: var canvas = document.getElementById('c152');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120.0, 100.0%, 50.0%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-1</p>
 30881: <canvas id="c153" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_clamp_1() {
 30881: 
 30881: var canvas = document.getElementById('c153');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120, 200%, 50%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-2</p>
 30881: <canvas id="c154" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_clamp_2() {
 30881: 
 30881: var canvas = document.getElementById('c154');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120, -200%, 49.9%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 127,127,127,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-3</p>
 30881: <canvas id="c155" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_clamp_3() {
 30881: 
 30881: var canvas = document.getElementById('c155');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120, 100%, 200%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,255,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-4</p>
 30881: <canvas id="c156" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsl_clamp_4() {
 30881: 
 30881: var canvas = document.getElementById('c156');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsl(120, 100%, -200%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-1</p>
 30881: <canvas id="c157" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_1() {
 30881: 
 30881: var canvas = document.getElementById('c157');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 100%, 50%, 0.499)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,127, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-2</p>
 30881: <canvas id="c158" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_2() {
 30881: 
 30881: var canvas = document.getElementById('c158');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla( 120.0 , 100.0% , 50.0% , 1 )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-1</p>
 30881: <canvas id="c159" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_1() {
 30881: 
 30881: var canvas = document.getElementById('c159');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 200%, 50%, 1)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-2</p>
 30881: <canvas id="c160" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_2() {
 30881: 
 30881: var canvas = document.getElementById('c160');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, -200%, 49.9%, 1)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 127,127,127,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-3</p>
 30881: <canvas id="c161" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_3() {
 30881: 
 30881: var canvas = document.getElementById('c161');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 100%, 200%, 1)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 255,255,255,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-4</p>
 30881: <canvas id="c162" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_4() {
 30881: 
 30881: var canvas = document.getElementById('c162');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 100%, -200%, 1)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-5</p>
 30881: <canvas id="c163" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_5() {
 30881: 
 30881: var canvas = document.getElementById('c163');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 100%, 50%, 2)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-6</p>
 30881: <canvas id="c164" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_hsla_clamp_6() {
 30881: 
 30881: var canvas = document.getElementById('c164');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'hsla(120, 100%, 0%, -2)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.html4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.html4</p>
 30881: <canvas id="c165" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_html4() {
 30881: 
 30881: var canvas = document.getElementById('c165');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'limE';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hex3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hex3</p>
 30881: <canvas id="c166" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hex3() {
 30881: 
 30881: var canvas = document.getElementById('c166');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = '#g00'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hex6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hex6</p>
 30881: <canvas id="c167" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hex6() {
 30881: 
 30881: var canvas = document.getElementById('c167');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = '#fg0000'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-1</p>
 30881: <canvas id="c168" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsl_1() {
 30881: 
 30881: var canvas = document.getElementById('c168');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsl(0%, 100%, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-2</p>
 30881: <canvas id="c169" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsl_2() {
 30881: 
 30881: var canvas = document.getElementById('c169');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsl(z, 100%, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-3</p>
 30881: <canvas id="c170" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsl_3() {
 30881: 
 30881: var canvas = document.getElementById('c170');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsl(0, 0, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-4</p>
 30881: <canvas id="c171" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsl_4() {
 30881: 
 30881: var canvas = document.getElementById('c171');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsl(0, 100%, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-5</p>
 30881: <canvas id="c172" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsl_5() {
 30881: 
 30881: var canvas = document.getElementById('c172');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsl(0, 100%, 100%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsla-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsla-1</p>
 30881: <canvas id="c173" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsla_1() {
 30881: 
 30881: var canvas = document.getElementById('c173');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsla(0%, 100%, 50%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.hsla-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.hsla-2</p>
 30881: <canvas id="c174" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_hsla_2() {
 30881: 
 30881: var canvas = document.getElementById('c174');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'hsla(0, 0, 50%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 69427: <!-- [[[ test_2d.fillStyle.parse.invalid.name-1.html ]]] -->
 69427: 
 69427: <p>Canvas test: 2d.fillStyle.parse.invalid.name-1</p>
 69427: <canvas id="c174a" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 69427: <script>
 69427: 
 69427: 
 69427: function test_2d_fillStyle_parse_invalid_name_1() {
 69427: 
 69427: var canvas = document.getElementById('c174a');
 69427: var ctx = canvas.getContext('2d');
 69427: 
 69427: ctx.fillStyle = '#0f0';
 69427: try { ctx.fillStyle = 'darkbrown'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 69427: ctx.fillRect(0, 0, 100, 50);
 69427: isPixel(ctx, 50,25, 0,255,0,255, 0);
 69427: 
 69427: 
 69427: }
 69427: </script>
 69427: 
 69427: <!-- [[[ test_2d.fillStyle.parse.invalid.name-2.html ]]] -->
 69427: 
 69427: <p>Canvas test: 2d.fillStyle.parse.invalid.name-2</p>
 69427: <canvas id="c174b" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 69427: <script>
 69427: 
 69427: 
 69427: function test_2d_fillStyle_parse_invalid_name_2() {
 69427: 
 69427: var canvas = document.getElementById('c174b');
 69427: var ctx = canvas.getContext('2d');
 69427: 
 69427: ctx.fillStyle = '#0f0';
 69427: try { ctx.fillStyle = 'firebrick1'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 69427: ctx.fillRect(0, 0, 100, 50);
 69427: isPixel(ctx, 50,25, 0,255,0,255, 0);
 69427: 
 69427: 
 69427: }
 69427: </script>
 69427: 
 69427: <!-- [[[ test_2d.fillStyle.parse.invalid.name-3.html ]]] -->
 69427: 
 69427: <p>Canvas test: 2d.fillStyle.parse.invalid.name-3</p>
 69427: <canvas id="c174c" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 69427: <script>
 69427: 
 69427: 
 69427: function test_2d_fillStyle_parse_invalid_name_3() {
 69427: 
 69427: var canvas = document.getElementById('c174c');
 69427: var ctx = canvas.getContext('2d');
 69427: 
 69427: ctx.fillStyle = '#0f0';
 69427: try { ctx.fillStyle = 'red blue'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 69427: ctx.fillRect(0, 0, 100, 50);
 69427: isPixel(ctx, 50,25, 0,255,0,255, 0);
 69427: 
 69427: 
 69427: }
 69427: </script>
 69427: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-1</p>
 30881: <canvas id="c175" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_1() {
 30881: 
 30881: var canvas = document.getElementById('c175');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255.0, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-2</p>
 30881: <canvas id="c176" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_2() {
 30881: 
 30881: var canvas = document.getElementById('c176');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255, 0.0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-3</p>
 30881: <canvas id="c177" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_3() {
 30881: 
 30881: var canvas = document.getElementById('c177');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255.0, 0, 0,)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-4</p>
 30881: <canvas id="c178" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_4() {
 30881: 
 30881: var canvas = document.getElementById('c178');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(100%, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-5</p>
 30881: <canvas id="c179" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_5() {
 30881: 
 30881: var canvas = document.getElementById('c179');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255 0 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-6</p>
 30881: <canvas id="c180" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_6() {
 30881: 
 30881: var canvas = document.getElementById('c180');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255, - 1, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-7.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-7</p>
 30881: <canvas id="c181" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgb_7() {
 30881: 
 30881: var canvas = document.getElementById('c181');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgb(255, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-1</p>
 30881: <canvas id="c182" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgba_1() {
 30881: 
 30881: var canvas = document.getElementById('c182');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgba(255, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-2</p>
 30881: <canvas id="c183" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgba_2() {
 30881: 
 30881: var canvas = document.getElementById('c183');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgba(255.0, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-3</p>
 30881: <canvas id="c184" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgba_3() {
 30881: 
 30881: var canvas = document.getElementById('c184');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgba(100%, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-4</p>
 30881: <canvas id="c185" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgba_4() {
 30881: 
 30881: var canvas = document.getElementById('c185');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgba(255, 0, 0, 100%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-5</p>
 30881: <canvas id="c186" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_invalid_rgba_5() {
 30881: 
 30881: var canvas = document.getElementById('c186');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: try { ctx.fillStyle = 'rgba(255, 0, 0, 1. 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-1</p>
 30881: <canvas id="c187" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_clamp_1() {
 30881: 
 30881: var canvas = document.getElementById('c187');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(-1000, 1000, -1000)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-2</p>
 30881: <canvas id="c188" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_clamp_2() {
 30881: 
 30881: var canvas = document.getElementById('c188');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(-200%, 200%, -200%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-3</p>
 30881: <canvas id="c189" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_clamp_3() {
 30881: 
 30881: var canvas = document.getElementById('c189');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(-2147483649, 4294967298, -18446744073709551619)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-4</p>
 30881: <canvas id="c190" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_clamp_4() {
 30881: 
 30881: var canvas = document.getElementById('c190');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(-1000000000000000000000000000000000000000, 1000000000000000000000000000000000000000, -1000000000000000000000000000000000000000)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-5</p>
 30881: <canvas id="c191" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_clamp_5() {
 30881: 
 30881: var canvas = document.getElementById('c191');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-num.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-num</p>
 30881: <canvas id="c192" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_num() {
 30881: 
 30881: var canvas = document.getElementById('c192');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(0,255,0)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgb-percent.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgb-percent</p>
 30881: <canvas id="c193" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgb_percent() {
 30881: 
 30881: var canvas = document.getElementById('c193');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgb(0% ,100% ,0%)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-clamp-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-clamp-1</p>
 30881: <canvas id="c194" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_clamp_1() {
 30881: 
 30881: var canvas = document.getElementById('c194');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(0, 255, 0, -2)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-clamp-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-clamp-2</p>
 30881: <canvas id="c195" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_clamp_2() {
 30881: 
 30881: var canvas = document.getElementById('c195');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 2)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-num-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-num-1</p>
 30881: <canvas id="c196" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_num_1() {
 30881: 
 30881: var canvas = document.getElementById('c196');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  .499  )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,127, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-num-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-num-2</p>
 30881: <canvas id="c197" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_num_2() {
 30881: 
 30881: var canvas = document.getElementById('c197');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  0.499  )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,127, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-percent.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-percent</p>
 30881: <canvas id="c198" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_percent() {
 30881: 
 30881: var canvas = document.getElementById('c198');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(0%,100%,0%,0.499)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,127, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-solid-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-solid-1</p>
 30881: <canvas id="c199" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_solid_1() {
 30881: 
 30881: var canvas = document.getElementById('c199');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  1  )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.rgba-solid-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.rgba-solid-2</p>
 30881: <canvas id="c200" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_rgba_solid_2() {
 30881: 
 30881: var canvas = document.getElementById('c200');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  1.0  )';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.svg-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.svg-1</p>
 30881: <canvas id="c201" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_svg_1() {
 30881: 
 30881: var canvas = document.getElementById('c201');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'gray';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 128,128,128,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.svg-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.svg-2</p>
 30881: <canvas id="c202" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_svg_2() {
 30881: 
 30881: var canvas = document.getElementById('c202');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'grey';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 128,128,128,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.system.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.system</p>
 30881: <canvas id="c203" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_fillStyle_parse_system() {
 30881: 
 30881: var canvas = document.getElementById('c203');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'ThreeDDarkShadow';
 38928: ok(/^#(?!(FF0000|ff0000|f00)$)/.test(ctx.fillStyle), "ctx.fillStyle =~ /^#(?!(FF0000|ff0000|f00)$)/"); // test that it's not red
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.transparent-1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.transparent-1</p>
 30881: <canvas id="c204" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_transparent_1() {
 30881: 
 30881: var canvas = document.getElementById('c204');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'transparent';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.fillStyle.parse.transparent-2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.fillStyle.parse.transparent-2</p>
 30881: <canvas id="c205" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_fillStyle_parse_transparent_2() {
 30881: 
 30881: var canvas = document.getElementById('c205');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillStyle = 'TrAnSpArEnT';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.getcontext.exists.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.getcontext.exists</p>
 30881: <!-- Testing: The 2D context is implemented -->
 30881: <canvas id="c206" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_getcontext_exists() {
 30881: 
 30881: var canvas = document.getElementById('c206');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.getContext('2d') !== null, "canvas.getContext('2d') !== null");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.getcontext.shared.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.getcontext.shared</p>
 30881: <!-- Testing: getContext('2d') returns objects which share canvas state -->
 30881: <canvas id="c207" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_getcontext_shared() {
 30881: 
 30881: var canvas = document.getElementById('c207');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var ctx2 = canvas.getContext('2d');
 30881: ctx.fillStyle = '#f00';
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.getcontext.unique.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.getcontext.unique</p>
 30881: <!-- Testing: getContext('2d') returns the same object -->
 30881: <canvas id="c208" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_getcontext_unique() {
 30881: 
 30881: var canvas = document.getElementById('c208');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.getContext('2d') === canvas.getContext('2d'), "canvas.getContext('2d') === canvas.getContext('2d')");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.empty</p>
 30881: <canvas id="c209" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_empty() {
 30881: 
 30881: var canvas = document.getElementById('c209');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var g = ctx.createLinearGradient(0, 0, 0, 50);
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.alpha</p>
 30881: <canvas id="c210" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c210');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#ff0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, 'rgba(0,0,255, 0)');
 30881: g.addColorStop(1, 'rgba(0,0,255, 1)');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 25,25, 191,191,63,255, 3);
 30881: isPixel(ctx, 50,25, 127,127,127,255, 3);
 30881: isPixel(ctx, 75,25, 63,63,191,255, 3);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.colour.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.colour</p>
 30881: <canvas id="c211" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_colour() {
 30881: 
 30881: var canvas = document.getElementById('c211');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, '#ff0');
 30881: g.addColorStop(1, '#00f');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 25,25, 191,191,63,255, 3);
 30881: isPixel(ctx, 50,25, 127,127,127,255, 3);
 30881: isPixel(ctx, 75,25, 63,63,191,255, 3);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.colouralpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.colouralpha</p>
 30881: <canvas id="c212" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_colouralpha() {
 30881: 
 30881: var canvas = document.getElementById('c212');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, 'rgba(255,255,0, 0)');
 30881: g.addColorStop(1, 'rgba(0,0,255, 1)');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 25,25, 191,191,63,63, 3);
 30881: isPixel(ctx, 50,25, 127,127,127,127, 3);
 30881: isPixel(ctx, 75,25, 63,63,191,191, 3);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.multiple</p>
 30881: <canvas id="c213" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c213');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 200;
 30881: var g = ctx.createLinearGradient(0, 0, 200, 0);
 30881: g.addColorStop(0, '#ff0');
 30881: g.addColorStop(0.5, '#0ff');
 30881: g.addColorStop(1, '#f0f');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 200, 50);
 30881: isPixel(ctx, 50,25, 127,255,127,255, 3);
 30881: isPixel(ctx, 100,25, 0,255,255,255, 3);
 30881: isPixel(ctx, 150,25, 127,127,255,255, 3);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.outside</p>
 30881: <canvas id="c214" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_outside() {
 30881: 
 30881: var canvas = document.getElementById('c214');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createLinearGradient(25, 0, 75, 0);
 30881: g.addColorStop(0.4, '#0f0');
 30881: g.addColorStop(0.6, '#0f0');
 30881: 
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 20,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 80,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.overlap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.overlap</p>
 30881: <canvas id="c215" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_overlap() {
 30881: 
 30881: var canvas = document.getElementById('c215');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 87513: if (!IsD2DEnabled() && !IsMacOSX10_5orOlder()) {
 87513:     // On D2D the different nature of how gradients
 50653:     // are drawn makes it so we cannot guarantee these stops are completely
 50653:     // hard.
 87513: 
 87513:     // On OS X 10.5 quartz is confused by the overlapping stops: Bug #715235
 30881:     canvas.width = 200;
 30881:     var g = ctx.createLinearGradient(0, 0, 200, 0);
 30881:     g.addColorStop(0, '#f00');
 30881:     g.addColorStop(0, '#ff0');
 30881:     g.addColorStop(0.25, '#00f');
 30881:     g.addColorStop(0.25, '#0f0');
 30881:     g.addColorStop(0.25, '#0f0');
 30881:     g.addColorStop(0.25, '#0f0');
 30881:     g.addColorStop(0.25, '#ff0');
 30881:     g.addColorStop(0.5, '#00f');
 30881:     g.addColorStop(0.5, '#0f0');
 30881:     g.addColorStop(0.75, '#00f');
 30881:     g.addColorStop(0.75, '#f00');
 30881:     g.addColorStop(0.75, '#ff0');
 30881:     g.addColorStop(0.5, '#0f0');
 30881:     g.addColorStop(0.5, '#0f0');
 30881:     g.addColorStop(0.5, '#ff0');
 30881:     g.addColorStop(1, '#00f');
 30881:     ctx.fillStyle = g;
 30881:     ctx.fillRect(0, 0, 200, 50);
 30881:     isPixel(ctx, 49,25, 0,0,255,255, 16);
 30881:     isPixel(ctx, 51,25, 255,255,0,255, 16);
 30881:     isPixel(ctx, 99,25, 0,0,255,255, 16);
 30881:     isPixel(ctx, 101,25, 255,255,0,255, 16);
 30881:     isPixel(ctx, 149,25, 0,0,255,255, 16);
 30881:     isPixel(ctx, 151,25, 255,255,0,255, 16);
 50653: }
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.overlap2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.overlap2</p>
 30881: <canvas id="c216" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_overlap2() {
 30881: 
 30881: var canvas = document.getElementById('c216');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: var ps = [ 0, 1/10, 1/4, 1/3, 1/2, 3/4, 1 ];
 30881: for (var p = 0; p < ps.length; ++p)
 30881: {
 30881:         g.addColorStop(ps[p], '#0f0');
 30881:         for (var i = 0; i < 15; ++i)
 30881:                 g.addColorStop(ps[p], '#f00');
 30881:         g.addColorStop(ps[p], '#0f0');
 30881: }
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 87513: 
 87513: if (!IsMacOSX10_5orOlder()) {
 87513:     // On OS X 10.5 quartz is confused by the overlapping stops: Bug #715235
 30881:     isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 30,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 40,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 60,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 80,25, 0,255,0,255, 0);
 87513: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.solid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.solid</p>
 30881: <canvas id="c217" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_solid() {
 30881: 
 30881: var canvas = document.getElementById('c217');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.vertical.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.vertical</p>
 30881: <canvas id="c218" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_vertical() {
 30881: 
 30881: var canvas = document.getElementById('c218');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 0, 50);
 30881: g.addColorStop(0, '#ff0');
 30881: g.addColorStop(1, '#00f');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,12, 191,191,63,255, 10);
 30881: isPixel(ctx, 50,25, 127,127,127,255, 5);
 30881: isPixel(ctx, 50,37, 63,63,191,255, 10);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.interpolate.zerosize.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.interpolate.zerosize</p>
 30881: <canvas id="c219" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_interpolate_zerosize() {
 30881: 
 30881: var canvas = document.getElementById('c219');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createLinearGradient(50, 25, 50, 25); // zero-length line (undefined direction)
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: todo_isPixel(ctx, 40,20, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.linear.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.linear.nonfinite</p>
 30881: <!-- Testing: createLinearGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 30881: <canvas id="c220" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_linear_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c220');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(-Infinity, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(NaN, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, Infinity, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, -Infinity, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, NaN, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, Infinity, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, -Infinity, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, NaN, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, 1, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, 1, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, 1, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, Infinity, 1, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, Infinity, Infinity, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, Infinity, 1, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, 0, Infinity, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(Infinity, 0, 1, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, Infinity, Infinity, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, Infinity, 1, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.linear.transform.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.linear.transform.1</p>
 30881: <!-- Testing: Linear gradient coordinates are relative to the coordinate space at the time of filling -->
 30881: <canvas id="c221" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_linear_transform_1() {
 30881: 
 30881: var canvas = document.getElementById('c221');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 200, 0);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(0.25, '#0f0');
 30881: g.addColorStop(0.75, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.translate(-50, 0);
 30881: ctx.fillRect(50, 0, 100, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.linear.transform.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.linear.transform.2</p>
 30881: <!-- Testing: Linear gradient coordinates are relative to the coordinate space at the time of filling -->
 30881: <canvas id="c222" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_linear_transform_2() {
 30881: 
 30881: var canvas = document.getElementById('c222');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.translate(100, 0);
 30881: var g = ctx.createLinearGradient(0, 0, 200, 0);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(0.25, '#0f0');
 30881: g.addColorStop(0.75, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.translate(-150, 0);
 30881: ctx.fillRect(50, 0, 100, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.linear.transform.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.linear.transform.3</p>
 30881: <!-- Testing: Linear gradient transforms do not experience broken caching effects -->
 30881: <canvas id="c223" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_linear_transform_3() {
 30881: 
 30881: var canvas = document.getElementById('c223');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 200, 0);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(0.25, '#0f0');
 30881: g.addColorStop(0.75, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.translate(-50, 0);
 30881: ctx.fillRect(50, 0, 100, 50);
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 25,25, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 25,25, 0,255,0,255, 0);
 72431: }
 72431: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.compare.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.compare</p>
 30881: <canvas id="c224" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_object_compare() {
 30881: 
 30881: var canvas = document.getElementById('c224');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g1 = ctx.createLinearGradient(0, 0, 100, 0);
 30881: var g2 = ctx.createLinearGradient(0, 0, 100, 0);
 30881: ok(g1 !== g2, "g1 !== g2");
 30881: ctx.fillStyle = g1;
 30881: ok(ctx.fillStyle === g1, "ctx.fillStyle === g1");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.crosscanvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.crosscanvas</p>
 30881: <canvas id="c225" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_object_crosscanvas() {
 30881: 
 30881: var canvas = document.getElementById('c225');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var g = document.createElement('canvas').getContext('2d').createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.invalidcolour.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.invalidcolour</p>
 30881: <canvas id="c226" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_object_invalidcolour() {
 30881: 
 30881: var canvas = document.getElementById('c226');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(0, "");
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(0, 'undefined');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.invalidoffset.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.invalidoffset</p>
 30881: <canvas id="c227" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_object_invalidoffset() {
 30881: 
 30881: var canvas = document.getElementById('c227');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(-1, '#000');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(2, '#000');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(Infinity, '#000');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(-Infinity, '#000');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(NaN, '#000');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.return.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.return</p>
 30881: <!-- Testing: createLinearGradient() and createRadialGradient() returns objects implementing CanvasGradient -->
 30881: <canvas id="c228" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_object_return() {
 30881: 
 30881: var canvas = document.getElementById('c228');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: window.CanvasGradient.prototype.thisImplementsCanvasGradient = true;
 30881: 
 30881: var g1 = ctx.createLinearGradient(0, 0, 100, 0);
 30881: ok(g1.addColorStop !== undefined, "g1.addColorStop !== undefined");
 30881: ok(g1.thisImplementsCanvasGradient === true, "g1.thisImplementsCanvasGradient === true");
 30881: 
 30881: var g2 = ctx.createRadialGradient(0, 0, 10, 0, 0, 20);
 30881: ok(g2.addColorStop !== undefined, "g2.addColorStop !== undefined");
 30881: ok(g2.thisImplementsCanvasGradient === true, "g2.thisImplementsCanvasGradient === true");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.type.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.type</p>
 30881: <!-- Testing: window.CanvasGradient exists and has the right properties -->
 30881: <canvas id="c229" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_object_type() {
 30881: 
 30881: var canvas = document.getElementById('c229');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.CanvasGradient !== undefined, "window.CanvasGradient !== undefined");
 30881: ok(window.CanvasGradient.prototype.addColorStop !== undefined, "window.CanvasGradient.prototype.addColorStop !== undefined");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.object.update.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.object.update</p>
 30881: <canvas id="c230" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_object_update() {
 30881: 
 30881: var canvas = document.getElementById('c230');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createLinearGradient(-100, 0, 200, 0);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: g.addColorStop(0.1, '#0f0');
 30881: g.addColorStop(0.9, '#0f0');
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.behind.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.behind</p>
 30881: <canvas id="c231" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_behind() {
 30881: 
 30881: var canvas = document.getElementById('c231');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(120, 25, 10, 211, 25, 100);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.beside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.beside</p>
 30881: <canvas id="c232" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_beside() {
 30881: 
 30881: var canvas = document.getElementById('c232');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(0, 100, 40, 100, 100, 50);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.bottom.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.bottom</p>
 30881: <canvas id="c233" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_bottom() {
 30881: 
 30881: var canvas = document.getElementById('c233');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(210, 25, 100, 230, 25, 101);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.cylinder.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.cylinder</p>
 30881: <canvas id="c234" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_cylinder() {
 30881: 
 30881: var canvas = document.getElementById('c234');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(210, 25, 100, 230, 25, 100);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 1, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 1, 48, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 48, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 48, 0, 255, 0, 255, 0);
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.front.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.front</p>
 30881: <canvas id="c235" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_front() {
 30881: 
 30881: var canvas = document.getElementById('c235');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(311, 25, 10, 210, 25, 100);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.shape1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.shape1</p>
 30881: <canvas id="c236" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_shape1() {
 30881: 
 30881: var canvas = document.getElementById('c236');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var tol = 1; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(30+tol, 40);
 30881: ctx.lineTo(110, -20+tol);
 30881: ctx.lineTo(110, 100-tol);
 30881: ctx.fill();
 30881: 
 30881: var g = ctx.createRadialGradient(30+10*5/2, 40, 10*3/2, 30+10*15/4, 40, 10*9/4);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.shape2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.shape2</p>
 30881: <canvas id="c237" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_shape2() {
 30881: 
 30881: var canvas = document.getElementById('c237');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var tol = 1; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(30+10*5/2, 40, 10*3/2, 30+10*15/4, 40, 10*9/4);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(30-tol, 40);
 30881: ctx.lineTo(110, -20-tol);
 30881: ctx.lineTo(110, 100+tol);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.cone.top.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.cone.top</p>
 30881: <canvas id="c238" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_cone_top() {
 30881: 
 30881: var canvas = document.getElementById('c238');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(230, 25, 100, 100, 25, 101);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 1, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 1, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 25, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 1, 48, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 50, 48, 0, 255, 0, 255, 0);
 30881: isPixel(ctx, 98, 48, 0, 255, 0, 255, 0);
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.equal.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.equal</p>
 30881: <canvas id="c239" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_equal() {
 30881: 
 30881: var canvas = document.getElementById('c239');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(50, 25, 20, 50, 25, 20);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.inside1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.inside1</p>
 30881: <canvas id="c240" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_inside1() {
 30881: 
 30881: var canvas = document.getElementById('c240');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(50, 25, 100, 50, 25, 200);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.inside2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.inside2</p>
 30881: <canvas id="c241" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_inside2() {
 30881: 
 30881: var canvas = document.getElementById('c241');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(50, 25, 200, 50, 25, 100);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.inside3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.inside3</p>
 30881: <canvas id="c242" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_inside3() {
 30881: 
 30881: var canvas = document.getElementById('c242');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(50, 25, 200, 50, 25, 100);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(0.993, '#f00');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.negative</p>
 30881: <!-- Testing: createRadialGradient() throws INDEX_SIZE_ERR if either radius is negative -->
 30881: <canvas id="c243" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_radial_negative() {
 30881: 
 30881: var canvas = document.getElementById('c243');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, -0.1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, 0, -0.1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, -0.1, 0, 0, -0.1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.nonfinite</p>
 30881: <!-- Testing: createRadialGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 30881: <canvas id="c244" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_gradient_radial_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c244');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(-Infinity, 0, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(NaN, 0, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, -Infinity, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, NaN, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, -Infinity, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, NaN, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, -Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, NaN, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, -Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, NaN, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, 0, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, 0, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, Infinity, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, Infinity, 1, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, Infinity, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(Infinity, 0, 1, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, Infinity, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, Infinity, 1, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, Infinity, 0, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, 0, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, Infinity, 0, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, Infinity, Infinity, 1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, Infinity, 0, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.outside1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.outside1</p>
 30881: <canvas id="c245" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_outside1() {
 30881: 
 30881: var canvas = document.getElementById('c245');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(200, 25, 10, 200, 25, 20);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#0f0');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.outside2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.outside2</p>
 30881: <canvas id="c246" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_outside2() {
 30881: 
 30881: var canvas = document.getElementById('c246');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(200, 25, 20, 200, 25, 10);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.outside3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.outside3</p>
 30881: <canvas id="c247" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_outside3() {
 30881: 
 30881: var canvas = document.getElementById('c247');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(200, 25, 20, 200, 25, 10);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(0.001, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.touch1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.touch1</p>
 30881: <canvas id="c248" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_touch1() {
 30881: 
 30881: var canvas = document.getElementById('c248');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(150, 25, 50, 200, 25, 100);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.touch2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.touch2</p>
 30881: <canvas id="c249" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_touch2() {
 30881: 
 30881: var canvas = document.getElementById('c249');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(-80, 25, 70, 0, 25, 150);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(0.01, '#0f0');
 30881: g.addColorStop(0.99, '#0f0');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.touch3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.touch3</p>
 30881: <canvas id="c250" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_touch3() {
 30881: 
 30881: var canvas = document.getElementById('c250');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var g = ctx.createRadialGradient(120, -15, 25, 140, -30, 50);
 30881: g.addColorStop(0, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.transform.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.transform.1</p>
 30881: <!-- Testing: Radial gradient coordinates are relative to the coordinate space at the time of filling -->
 30881: <canvas id="c251" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_transform_1() {
 30881: 
 30881: var canvas = document.getElementById('c251');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createRadialGradient(0, 0, 0, 0, 0, 11.2);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(0.5, '#0f0');
 30881: g.addColorStop(0.51, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.translate(50, 25);
 30881: ctx.scale(10, 10);
 30881: ctx.fillRect(-5, -2.5, 10, 5);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.transform.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.transform.2</p>
 30881: <!-- Testing: Radial gradient coordinates are relative to the coordinate space at the time of filling -->
 30881: <canvas id="c252" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_transform_2() {
 30881: 
 30881: var canvas = document.getElementById('c252');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.translate(100, 0);
 30881: var g = ctx.createRadialGradient(0, 0, 0, 0, 0, 11.2);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(0.5, '#0f0');
 30881: g.addColorStop(0.51, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.translate(-50, 25);
 30881: ctx.scale(10, 10);
 30881: ctx.fillRect(-5, -2.5, 10, 5);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.gradient.radial.transform.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.gradient.radial.transform.3</p>
 30881: <!-- Testing: Radial gradient transforms do not experience broken caching effects -->
 30881: <canvas id="c253" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_gradient_radial_transform_3() {
 30881: 
 30881: var canvas = document.getElementById('c253');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var g = ctx.createRadialGradient(0, 0, 0, 0, 0, 11.2);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(0.5, '#0f0');
 30881: g.addColorStop(0.51, '#f00');
 30881: g.addColorStop(1, '#f00');
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.translate(50, 25);
 30881: ctx.scale(10, 10);
 30881: ctx.fillRect(-5, -2.5, 10, 5);
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 25,25, 0,255,0,255, 0);
 72431:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 72431:   isPixel(ctx, 75,25, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 75,25, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.basic - bug 433004</p>
 30881: <!-- Testing: createImageData() exists and returns something -->
 30881: <canvas id="c254" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_basic() {
 30881: 
 30881: var canvas = document.getElementById('c254');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.createImageData(1, 1) !== null, "ctx.createImageData(1, 1) !== null");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 64666: <!-- [[[ test_2d.imageData.create1.basic.html ]]] -->
 64666: 
 64666: <p>Canvas test: 2d.imageData.create1.basic - bug 630040</p>
 64666: <!-- Testing: createImageData(imgdata) exists and returns something -->
 64666: <canvas id="c254a" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 64666: <script>
 64666: 
 64666: function test_2d_imageData_create1_basic() {
 64666: 
 64666: var canvas = document.getElementById('c254a');
 64666: var ctx = canvas.getContext('2d');
 64666: 
 64666: ok(ctx.createImageData(ctx.createImageData(1, 1)) != null, "ctx.createImageData(ctx.createImageData(1, 1)) != null");
 64666: 
 64666: 
 64666: }
 64666: </script>
 64666: 
 30881: <!-- [[[ test_2d.imageData.create.initial.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.initial - bug 433004</p>
 30881: <!-- Testing: createImageData() returns transparent black data of the right size -->
 30881: <canvas id="c255" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_initial() {
 30881: 
 30881: var canvas = document.getElementById('c255');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.createImageData(10, 20);
 30881: ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 30881: ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 30881: ok(imgdata.width > 0, "imgdata.width > 0");
 30881: var isTransparentBlack = true;
 30881: for (var i = 0; i < imgdata.data.length; ++i)
 30881:     if (imgdata.data[i] !== 0)
 30881:         isTransparentBlack = false;
 30881: ok(isTransparentBlack, "isTransparentBlack");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 64666: <!-- [[[ test_2d.imageData.create1.initial.html ]]] -->
 64666: 
 64666: <p>Canvas test: 2d.imageData.create1.initial - bug 630040</p>
 64666: <!-- Testing: createImageData(imgdata) returns transparent black data of the right size -->
 64666: <canvas id="c255a" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 64666: <script>
 64666: 
 64666: function test_2d_imageData_create1_initial() {
 64666: 
 64666: var canvas = document.getElementById('c255a');
 64666: var ctx = canvas.getContext('2d');
 64666: 
 64666: ctx.fillStyle = '#0f0';
 64666: ctx.fillRect(0, 0, 100, 50);
 64666: var imgdata1 = ctx.getImageData(0, 0, 10, 20);
 64666: var imgdata2 = ctx.createImageData(imgdata1);
 64666: ok(imgdata2.data.length == imgdata1.data.length, "imgdata2.data.length == imgdata1.data.length");
 64666: ok(imgdata2.width == imgdata1.width, "imgdata2.width == imgdata1.width");
 64666: ok(imgdata2.height == imgdata1.height, "imgdata2.height == imgdata1.height");
 64666: var isTransparentBlack = true;
 64666: for (var i = 0; i < imgdata2.data.length; ++i)
 64666:     if (imgdata2.data[i] !== 0)
 64666:         isTransparentBlack = false;
 64666: ok(isTransparentBlack, "isTransparentBlack");
 64666: 
 64666: 
 64666: }
 64666: </script>
 64666: 
 30881: <!-- [[[ test_2d.imageData.create.large.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.large - bug 433004</p>
 30881: <!-- Testing: createImageData() works for sizes much larger than the canvas -->
 30881: <canvas id="c256" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_large() {
 30881: 
 30881: var canvas = document.getElementById('c256');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: 
 30881: var imgdata = ctx.createImageData(1000, 2000);
 30881: ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 30881: ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 30881: ok(imgdata.width > 0, "imgdata.width > 0");
 30881: var isTransparentBlack = true;
 30881: for (var i = 0; i < imgdata.data.length; i += 7813) // check ~1024 points (assuming normal scaling)
 30881:     if (imgdata.data[i] !== 0)
 30881:         isTransparentBlack = false;
 30881: ok(isTransparentBlack, "isTransparentBlack");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.negative - bug 433004</p>
 30881: <!-- Testing: createImageData() takes the absolute magnitude of the size arguments -->
 30881: <canvas id="c257" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_negative() {
 30881: 
 30881: var canvas = document.getElementById('c257');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var imgdata1 = ctx.createImageData(10, 20);
 30881: var imgdata2 = ctx.createImageData(-10, 20);
 30881: var imgdata3 = ctx.createImageData(10, -20);
 30881: var imgdata4 = ctx.createImageData(-10, -20);
 30881: ok(imgdata1.data.length == imgdata2.data.length, "imgdata1.data.length == imgdata2.data.length");
 30881: ok(imgdata2.data.length == imgdata3.data.length, "imgdata2.data.length == imgdata3.data.length");
 30881: ok(imgdata3.data.length == imgdata4.data.length, "imgdata3.data.length == imgdata4.data.length");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.nonfinite - bug 433004</p>
 30881: <!-- Testing: createImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 30881: <canvas id="c258" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c258');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(-Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(NaN, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(10, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(10, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData({valueOf:function() Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData({valueOf:function() -Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData({valueOf:function() NaN}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData(10, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData(10, {valueOf:function() -Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData(10, {valueOf:function() NaN});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.createImageData({valueOf:function() Infinity}, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.round.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.round - bug 433004</p>
 30881: <!-- Testing: createImageData(w, h) is rounded the same as getImageData(0, 0, w, h) -->
 30881: <canvas id="c259" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_round() {
 30881: 
 30881: var canvas = document.getElementById('c259');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: 
 30881: var imgdata1 = ctx.createImageData(10.01, 10.99);
 30881: var imgdata2 = ctx.getImageData(0, 0, 10.01, 10.99);
 34226: is(imgdata1.width, imgdata2.width, "imgdata1.width == imgdata2.width");
 34226: is(imgdata1.height, imgdata2.height, "imgdata1.height == imgdata2.height");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.tiny.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.tiny - bug 433004</p>
 30881: <!-- Testing: createImageData() works for sizes smaller than one pixel -->
 30881: <canvas id="c260" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_tiny() {
 30881: 
 30881: var canvas = document.getElementById('c260');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var imgdata = ctx.createImageData(0.0001, 0.0001);
 30881: ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 64667: ok(imgdata.width == 1, "imgdata.width == 1");
 64667: ok(imgdata.height == 1, "imgdata.height == 1");
 30881: var isTransparentBlack = true;
 30881: for (var i = 0; i < imgdata.data.length; ++i)
 30881:     if (imgdata.data[i] !== 0)
 30881:         isTransparentBlack = false;
 30881: ok(isTransparentBlack, "isTransparentBlack");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.create.type.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.type - bug 433004</p>
 91976: <!-- Testing: createImageData() returns an ImageData object containing a Uint8ClampedArray object -->
 30881: <canvas id="c261" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_type() {
 30881: 
 30881: var canvas = document.getElementById('c261');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 93200: ok(window.ImageData !== undefined, "window.ImageData !== undefined");
 91976: ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
 30881: window.ImageData.prototype.thisImplementsImageData = true;
 91976: window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
 30881: var imgdata = ctx.createImageData(1, 1);
 93203: ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
 91976: ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 64666: <!-- [[[ test_2d.imageData.create1.type.html ]]] -->
 64666: 
 64666: <p>Canvas test: 2d.imageData.create1.type - bug 630040</p>
 91976: <!-- Testing: createImageData(imgdata) returns an ImageData object containing a Uint8ClampedArray object -->
 64666: <canvas id="c261a" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 64666: <script>
 64666: 
 64666: function test_2d_imageData_create1_type() {
 64666: 
 64666: var canvas = document.getElementById('c261a');
 64666: var ctx = canvas.getContext('2d');
 64666: 
 93200: ok(window.ImageData !== undefined, "window.ImageData !== undefined");
 91976: ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
 64666: window.ImageData.prototype.thisImplementsImageData = true;
 91976: window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
 64666: var imgdata = ctx.createImageData(ctx.createImageData(1, 1));
 93203: ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
 91976: ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 64666: 
 64666: 
 64666: }
 64666: </script>
 64666: 
 30881: <!-- [[[ test_2d.imageData.create.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.create.zero - bug 433004</p>
 30881: <!-- Testing: createImageData() throws INDEX_SIZE_ERR if size is zero -->
 30881: <canvas id="c262" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_create_zero() {
 30881: 
 30881: var canvas = document.getElementById('c262');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(10, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(0, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createImageData(0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 64666: <!-- [[[ test_2d.imageData.create1.zero.html ]]] -->
 64666: 
 64666: <p>Canvas test: 2d.imageData.create1.zero - bug 630040</p>
 93199: <!-- Testing: createImageData(null) throws TypeError -->
 64666: <canvas id="c262a" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 64666: <script>
 64666: 
 64666: function test_2d_imageData_create1_zero() {
 64666: 
 64666: var canvas = document.getElementById('c262a');
 64666: var ctx = canvas.getContext('2d');
 64666: 
 64666: var _thrown = undefined; try {
 64666:   ctx.createImageData(null);
 93199: } catch (e) { _thrown = e }; todo(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 64666: 
 64666: 
 64666: }
 64666: </script>
 64666: 
 30881: <!-- [[[ test_2d.imageData.get.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.basic</p>
 30881: <!-- Testing: getImageData() exists and returns something -->
 30881: <canvas id="c263" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_basic() {
 30881: 
 30881: var canvas = document.getElementById('c263');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.getImageData(0, 0, 100, 50) !== null, "ctx.getImageData(0, 0, 100, 50) !== null");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.clamp.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.clamp</p>
 30881: <!-- Testing: getImageData() clamps colours to the range [0, 255] -->
 30881: <canvas id="c264" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_clamp() {
 30881: 
 30881: var canvas = document.getElementById('c264');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgb(-100, -200, -300)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = 'rgb(256, 300, 400)';
 30881: ctx.fillRect(20, 10, 60, 10);
 30881: var imgdata1 = ctx.getImageData(10, 5, 1, 1);
 30881: ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata1.data[1] === 0, "imgdata1.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata1.data[2] === 0, "imgdata1.data[\""+(2)+"\"] === 0");
 30881: var imgdata2 = ctx.getImageData(30, 15, 1, 1);
 30881: ok(imgdata2.data[0] === 255, "imgdata2.data[\""+(0)+"\"] === 255");
 30881: ok(imgdata2.data[1] === 255, "imgdata2.data[\""+(1)+"\"] === 255");
 30881: ok(imgdata2.data[2] === 255, "imgdata2.data[\""+(2)+"\"] === 255");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.nonfinite</p>
 30881: <!-- Testing: getImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 30881: <canvas id="c265" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c265');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(-Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(NaN, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, -Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, NaN, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, -Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, NaN, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, 10, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, 10, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(Infinity, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(10, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() -Infinity}, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() NaN}, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() Infinity}, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() -Infinity}, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() NaN}, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, {valueOf:function() Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, {valueOf:function() -Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, {valueOf:function() NaN}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, 10, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, 10, {valueOf:function() -Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, 10, {valueOf:function() NaN});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, 10, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, 10, {valueOf:function() Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, 10, {valueOf:function() Infinity}, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData({valueOf:function() Infinity}, 10, 10, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() Infinity}, {valueOf:function() Infinity}, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, {valueOf:function() Infinity}, 10, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 64656: var _thrown = undefined; try {
 64656:   ctx.getImageData(10, 10, {valueOf:function() Infinity}, {valueOf:function() Infinity});
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.nonpremul.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.nonpremul</p>
 30881: <!-- Testing: getImageData() returns non-premultiplied colours -->
 30881: <canvas id="c266" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_nonpremul() {
 30881: 
 30881: var canvas = document.getElementById('c266');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var imgdata = ctx.getImageData(10, 10, 10, 10);
 30881: ok(imgdata.data[0] > 200, "imgdata.data[\""+(0)+"\"] > 200");
 30881: ok(imgdata.data[1] > 200, "imgdata.data[\""+(1)+"\"] > 200");
 30881: ok(imgdata.data[2] > 200, "imgdata.data[\""+(2)+"\"] > 200");
 30881: ok(imgdata.data[3] > 100, "imgdata.data[\""+(3)+"\"] > 100");
 30881: ok(imgdata.data[3] < 200, "imgdata.data[\""+(3)+"\"] < 200");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.order.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.order.alpha</p>
 30881: <!-- Testing: getImageData() returns A in the fourth component -->
 30881: <canvas id="c267" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_order_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c267');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: ok(imgdata.data[3] < 200, "imgdata.data[\""+(3)+"\"] < 200");
 30881: ok(imgdata.data[3] > 100, "imgdata.data[\""+(3)+"\"] > 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.order.cols.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.order.cols</p>
 30881: <!-- Testing: getImageData() returns leftmost columns first -->
 30881: <canvas id="c268" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_order_cols() {
 30881: 
 30881: var canvas = document.getElementById('c268');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#fff';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 2, 50);
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata.data[Math.round(imgdata.width/2*4)] === 255, "imgdata.data[Math.round(imgdata.width/2*4)] === 255");
 30881: ok(imgdata.data[Math.round((imgdata.height/2)*imgdata.width*4)] === 0, "imgdata.data[Math.round((imgdata.height/2)*imgdata.width*4)] === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.order.rgb.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.order.rgb</p>
 30881: <!-- Testing: getImageData() returns R then G then B -->
 30881: <canvas id="c269" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_order_rgb() {
 30881: 
 30881: var canvas = document.getElementById('c269');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#48c';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: ok(imgdata.data[0] === 0x44, "imgdata.data[\""+(0)+"\"] === 0x44");
 30881: ok(imgdata.data[1] === 0x88, "imgdata.data[\""+(1)+"\"] === 0x88");
 30881: ok(imgdata.data[2] === 0xCC, "imgdata.data[\""+(2)+"\"] === 0xCC");
 30881: ok(imgdata.data[3] === 255, "imgdata.data[\""+(3)+"\"] === 255");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.order.rows.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.order.rows</p>
 30881: <!-- Testing: getImageData() returns topmost rows first -->
 30881: <canvas id="c270" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_order_rows() {
 30881: 
 30881: var canvas = document.getElementById('c270');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#fff';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 100, 2);
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata.data[Math.floor(imgdata.width/2*4)] === 0, "imgdata.data[Math.floor(imgdata.width/2*4)] === 0");
 30881: ok(imgdata.data[(imgdata.height/2)*imgdata.width*4] === 255, "imgdata.data[(imgdata.height/2)*imgdata.width*4] === 255");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.range.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.range</p>
 30881: <!-- Testing: getImageData() returns values in the range [0, 255] -->
 30881: <canvas id="c271" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_range() {
 30881: 
 30881: var canvas = document.getElementById('c271');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#fff';
 30881: ctx.fillRect(20, 10, 60, 10);
 30881: var imgdata1 = ctx.getImageData(10, 5, 1, 1);
 30881: ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
 30881: var imgdata2 = ctx.getImageData(30, 15, 1, 1);
 30881: ok(imgdata2.data[0] === 255, "imgdata2.data[\""+(0)+"\"] === 255");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.source.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.source.negative</p>
 30881: <!-- Testing: getImageData() works with negative width and height -->
 30881: <canvas id="c272" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_source_negative() {
 30881: 
 30881: var canvas = document.getElementById('c272');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#fff';
 30881: ctx.fillRect(20, 10, 60, 10);
 30881: 
 30881: var imgdata1 = ctx.getImageData(85, 25, -10, -10);
 64092: ok(imgdata1.data[0] === 255, "imgdata1.data[\""+(0)+"\"] === 255");
 64092: ok(imgdata1.data[1] === 255, "imgdata1.data[\""+(1)+"\"] === 255");
 64092: ok(imgdata1.data[2] === 255, "imgdata1.data[\""+(2)+"\"] === 255");
 30881: ok(imgdata1.data[3] === 255, "imgdata1.data[\""+(3)+"\"] === 255");
 64092: ok(imgdata1.data[imgdata1.data.length-4+0] === 0, "imgdata1.data[imgdata1.data.length-4+0] === 0");
 64092: ok(imgdata1.data[imgdata1.data.length-4+1] === 0, "imgdata1.data[imgdata1.data.length-4+1] === 0");
 64092: ok(imgdata1.data[imgdata1.data.length-4+2] === 0, "imgdata1.data[imgdata1.data.length-4+2] === 0");
 64092: ok(imgdata1.data[imgdata1.data.length-4+3] === 255, "imgdata1.data[imgdata1.data.length-4+3] === 255");
 30881: 
 30881: var imgdata2 = ctx.getImageData(0, 0, -1, -1);
 30881: ok(imgdata2.data[0] === 0, "imgdata2.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata2.data[1] === 0, "imgdata2.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata2.data[2] === 0, "imgdata2.data[\""+(2)+"\"] === 0");
 30881: ok(imgdata2.data[3] === 0, "imgdata2.data[\""+(3)+"\"] === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.source.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.source.outside</p>
 30881: <!-- Testing: getImageData() returns transparent black outside the canvas -->
 30881: <canvas id="c273" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_source_outside() {
 30881: 
 30881: var canvas = document.getElementById('c273');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#08f';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var imgdata1 = ctx.getImageData(-10, 5, 1, 1);
 30881: ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata1.data[1] === 0, "imgdata1.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata1.data[2] === 0, "imgdata1.data[\""+(2)+"\"] === 0");
 30881: ok(imgdata1.data[3] === 0, "imgdata1.data[\""+(3)+"\"] === 0");
 30881: 
 30881: var imgdata2 = ctx.getImageData(10, -5, 1, 1);
 30881: ok(imgdata2.data[0] === 0, "imgdata2.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata2.data[1] === 0, "imgdata2.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata2.data[2] === 0, "imgdata2.data[\""+(2)+"\"] === 0");
 30881: ok(imgdata2.data[3] === 0, "imgdata2.data[\""+(3)+"\"] === 0");
 30881: 
 30881: var imgdata3 = ctx.getImageData(200, 5, 1, 1);
 30881: ok(imgdata3.data[0] === 0, "imgdata3.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata3.data[1] === 0, "imgdata3.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata3.data[2] === 0, "imgdata3.data[\""+(2)+"\"] === 0");
 30881: ok(imgdata3.data[3] === 0, "imgdata3.data[\""+(3)+"\"] === 0");
 30881: 
 30881: var imgdata4 = ctx.getImageData(10, 60, 1, 1);
 30881: ok(imgdata4.data[0] === 0, "imgdata4.data[\""+(0)+"\"] === 0");
 30881: ok(imgdata4.data[1] === 0, "imgdata4.data[\""+(1)+"\"] === 0");
 30881: ok(imgdata4.data[2] === 0, "imgdata4.data[\""+(2)+"\"] === 0");
 30881: ok(imgdata4.data[3] === 0, "imgdata4.data[\""+(3)+"\"] === 0");
 30881: 
 67641: var imgdata5 = ctx.getImageData(100, 10, 1, 1);
 67641: ok(imgdata5.data[0] === 0, "imgdata5.data[\""+(0)+"\"] === 0");
 67641: ok(imgdata5.data[1] === 0, "imgdata5.data[\""+(1)+"\"] === 0");
 67641: ok(imgdata5.data[2] === 0, "imgdata5.data[\""+(2)+"\"] === 0");
 67641: ok(imgdata5.data[3] === 0, "imgdata5.data[\""+(3)+"\"] === 0");
 67641: 
 67641: var imgdata6 = ctx.getImageData(0, 10, 1, 1);
 67641: ok(imgdata6.data[0] === 0, "imgdata6.data[\""+(0)+"\"] === 0");
 67641: ok(imgdata6.data[1] === 136, "imgdata6.data[\""+(1)+"\"] === 136");
 67641: ok(imgdata6.data[2] === 255, "imgdata6.data[\""+(2)+"\"] === 255");
 67641: ok(imgdata6.data[3] === 255, "imgdata6.data[\""+(3)+"\"] === 255");
 67641: 
 67641: var imgdata7 = ctx.getImageData(-10, 10, 20, 20);
 67641: ok(imgdata7.data[ 0*4+0] === 0, "imgdata7.data[ 0*4+0] === 0");
 67641: ok(imgdata7.data[ 0*4+1] === 0, "imgdata7.data[ 0*4+1] === 0");
 67641: ok(imgdata7.data[ 0*4+2] === 0, "imgdata7.data[ 0*4+2] === 0");
 67641: ok(imgdata7.data[ 0*4+3] === 0, "imgdata7.data[ 0*4+3] === 0");
 67641: ok(imgdata7.data[ 9*4+0] === 0, "imgdata7.data[ 9*4+0] === 0");
 67641: ok(imgdata7.data[ 9*4+1] === 0, "imgdata7.data[ 9*4+1] === 0");
 67641: ok(imgdata7.data[ 9*4+2] === 0, "imgdata7.data[ 9*4+2] === 0");
 67641: ok(imgdata7.data[ 9*4+3] === 0, "imgdata7.data[ 9*4+3] === 0");
 67641: ok(imgdata7.data[10*4+0] === 0, "imgdata7.data[10*4+0] === 0");
 67641: ok(imgdata7.data[10*4+1] === 136, "imgdata7.data[10*4+1] === 136");
 67641: ok(imgdata7.data[10*4+2] === 255, "imgdata7.data[10*4+2] === 255");
 67641: ok(imgdata7.data[10*4+3] === 255, "imgdata7.data[10*4+3] === 255");
 67641: ok(imgdata7.data[19*4+0] === 0, "imgdata7.data[19*4+0] === 0");
 67641: ok(imgdata7.data[19*4+1] === 136, "imgdata7.data[19*4+1] === 136");
 67641: ok(imgdata7.data[19*4+2] === 255, "imgdata7.data[19*4+2] === 255");
 67641: ok(imgdata7.data[19*4+3] === 255, "imgdata7.data[19*4+3] === 255");
 67641: ok(imgdata7.data[20*4+0] === 0, "imgdata7.data[20*4+0] === 0");
 67641: ok(imgdata7.data[20*4+1] === 0, "imgdata7.data[20*4+1] === 0");
 67641: ok(imgdata7.data[20*4+2] === 0, "imgdata7.data[20*4+2] === 0");
 67641: ok(imgdata7.data[20*4+3] === 0, "imgdata7.data[20*4+3] === 0");
 67641: 
 67641: } catch (e) {
 67641:     _thrown_outer = true;
 67641: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.source.size.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.source.size</p>
 30881: <!-- Testing: getImageData() returns bigger ImageData for bigger source rectangle -->
 30881: <canvas id="c274" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_source_size() {
 30881: 
 30881: var canvas = document.getElementById('c274');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata1 = ctx.getImageData(0, 0, 10, 10);
 30881: var imgdata2 = ctx.getImageData(0, 0, 20, 20);
 30881: ok(imgdata2.width > imgdata1.width, "imgdata2.width > imgdata1.width");
 30881: ok(imgdata2.height > imgdata1.height, "imgdata2.height > imgdata1.height");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.tiny.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.tiny</p>
 30881: <!-- Testing: getImageData() works for sizes smaller than one pixel -->
 30881: <canvas id="c275" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_tiny() {
 30881: 
 30881: var canvas = document.getElementById('c275');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 0.0001, 0.0001);
 30881: ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 30881: ok(imgdata.width == 1, "imgdata.width == 1");
 30881: ok(imgdata.height == 1, "imgdata.height == 1");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.type.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.type</p>
 91976: <!-- Testing: getImageData() returns an ImageData object containing a Uint8ClampedArray object -->
 30881: <canvas id="c276" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_type() {
 30881: 
 30881: var canvas = document.getElementById('c276');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 93200: ok(window.ImageData !== undefined, "window.ImageData !== undefined");
 91976: ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
 30881: window.ImageData.prototype.thisImplementsImageData = true;
 91976: window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
 30881: var imgdata = ctx.getImageData(0, 0, 1, 1);
 93202: ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
 91976: ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.unaffected.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.unaffected</p>
 30881: <!-- Testing: getImageData() is not affected by context state -->
 30881: <canvas id="c277" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_get_unaffected() {
 30881: 
 30881: var canvas = document.getElementById('c277');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50)
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50)
 30881: ctx.save();
 30881: ctx.translate(50, 0);
 30881: ctx.globalAlpha = 0.1;
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.rect(0, 0, 5, 5);
 30881: ctx.clip();
 30881: var imgdata = ctx.getImageData(0, 0, 50, 50);
 30881: ctx.restore();
 30881: ctx.putImageData(imgdata, 50, 0);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.get.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.get.zero</p>
 30881: <!-- Testing: getImageData() throws INDEX_SIZE_ERR if size is zero -->
 30881: <canvas id="c278" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_get_zero() {
 30881: 
 30881: var canvas = document.getElementById('c278');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(1, 1, 10, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(1, 1, 0, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: var _thrown = undefined; try {
 30881:   ctx.getImageData(1, 1, 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.clamp.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.clamp</p>
 30881: <!-- Testing: ImageData.data clamps numbers to [0, 255] -->
 30881: <canvas id="c279" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_clamp() {
 30881: 
 30881: var canvas = document.getElementById('c279');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: 
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = 300;
 38928: ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = -100;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: 
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = 200+Math.pow(2, 32);
 38928: ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = -200-Math.pow(2, 32);
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: 
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = Math.pow(10, 39);
 38928: ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = -Math.pow(10, 39);
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: 
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = -Infinity;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = Infinity;
 38928: ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.ctor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.ctor</p>
 30881: <!-- Testing: ImageData does not have a usable constructor -->
 30881: <canvas id="c280" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_ctor() {
 30881: 
 30881: var canvas = document.getElementById('c280');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 93200: ok(window.ImageData !== undefined, "window.ImageData !== undefined");
 30881: try { var _thrown = false;
 30881:   new window.ImageData(1,1);
 30881: } catch (e) { _thrown = true; } finally { ok(_thrown, "should throw exception"); }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.nan.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.nan</p>
 30881: <!-- Testing: ImageData.data converts NaN to 0 -->
 30881: <canvas id="c281" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_nan() {
 30881: 
 30881: var canvas = document.getElementById('c281');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = NaN;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = "cheese";
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.properties.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.properties</p>
 30881: <!-- Testing: ImageData objects have the right properties -->
 30881: <canvas id="c282" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_properties() {
 30881: 
 30881: var canvas = document.getElementById('c282');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: ok(typeof(imgdata.width) == 'number', "typeof(imgdata.width) == 'number'");
 30881: ok(typeof(imgdata.height) == 'number', "typeof(imgdata.height) == 'number'");
 30881: ok(typeof(imgdata.data) == 'object', "typeof(imgdata.data) == 'object'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.readonly.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.readonly</p>
 30881: <!-- Testing: ImageData objects properties are read-only -->
 30881: <canvas id="c283" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_readonly() {
 30881: 
 30881: var canvas = document.getElementById('c283');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: var w = imgdata.width;
 30881: var h = imgdata.height;
 30881: var d = imgdata.data;
 30881: imgdata.width = 123;
 30881: imgdata.height = 123;
 30881: imgdata.data = [100,100,100,100];
 38928: ok(imgdata.width === w, "imgdata.width === w");
 38928: ok(imgdata.height === h, "imgdata.height === h");
 38928: ok(imgdata.data === d, "imgdata.data === d");
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 38928: ok(imgdata.data[1] === 0, "imgdata.data[\""+(1)+"\"] === 0");
 38928: ok(imgdata.data[2] === 0, "imgdata.data[\""+(2)+"\"] === 0");
 38928: ok(imgdata.data[3] === 0, "imgdata.data[\""+(3)+"\"] === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.round.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.round</p>
 30881: <!-- Testing: ImageData.data rounds numbers with convertToIntegerTiesToEven -->
 30881: <canvas id="c284" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_round() {
 30881: 
 30881: var canvas = document.getElementById('c284');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: imgdata.data[0] = 0.499;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: imgdata.data[0] = 0.5;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: imgdata.data[0] = 0.501;
 38928: ok(imgdata.data[0] === 1, "imgdata.data[\""+(0)+"\"] === 1");
 30881: imgdata.data[0] = 1.499;
 38928: ok(imgdata.data[0] === 1, "imgdata.data[\""+(0)+"\"] === 1");
 30881: imgdata.data[0] = 1.5;
 38928: ok(imgdata.data[0] === 2, "imgdata.data[\""+(0)+"\"] === 2");
 30881: imgdata.data[0] = 1.501;
 38928: ok(imgdata.data[0] === 2, "imgdata.data[\""+(0)+"\"] === 2");
 30881: imgdata.data[0] = 2.5;
 38928: ok(imgdata.data[0] === 2, "imgdata.data[\""+(0)+"\"] === 2");
 30881: imgdata.data[0] = 3.5;
 38928: ok(imgdata.data[0] === 4, "imgdata.data[\""+(0)+"\"] === 4");
 30881: imgdata.data[0] = 252.5;
 38928: ok(imgdata.data[0] === 252, "imgdata.data[\""+(0)+"\"] === 252");
 30881: imgdata.data[0] = 253.5;
 38928: ok(imgdata.data[0] === 254, "imgdata.data[\""+(0)+"\"] === 254");
 30881: imgdata.data[0] = 254.5;
 38928: ok(imgdata.data[0] === 254, "imgdata.data[\""+(0)+"\"] === 254");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.set.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.set</p>
 30881: <!-- Testing: ImageData.data can be modified -->
 30881: <canvas id="c285" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_set() {
 30881: 
 30881: var canvas = document.getElementById('c285');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: imgdata.data[0] = 100;
 30881: ok(imgdata.data[0] === 100, "imgdata.data[\""+(0)+"\"] === 100");
 30881: imgdata.data[0] = 200;
 30881: ok(imgdata.data[0] === 200, "imgdata.data[\""+(0)+"\"] === 200");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.string.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.string</p>
 30881: <!-- Testing: ImageData.data converts strings to numbers with ToNumber -->
 30881: <canvas id="c286" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_string() {
 30881: 
 30881: var canvas = document.getElementById('c286');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = "110";
 38928: ok(imgdata.data[0] === 110, "imgdata.data[\""+(0)+"\"] === 110");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = "0x78";
 38928: ok(imgdata.data[0] === 120, "imgdata.data[\""+(0)+"\"] === 120");
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = " +130e0 ";
 38928: ok(imgdata.data[0] === 130, "imgdata.data[\""+(0)+"\"] === 130");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.object.undefined.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.object.undefined</p>
 30881: <!-- Testing: ImageData.data converts undefined to 0 -->
 30881: <canvas id="c287" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_object_undefined() {
 30881: 
 30881: var canvas = document.getElementById('c287');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: imgdata.data[0] = 100;
 30881: imgdata.data[0] = undefined;
 38928: ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.alpha</p>
 30881: <!-- Testing: putImageData() puts non-solid image data correctly -->
 30881: <canvas id="c288" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c288');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.25)';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,64, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.basic</p>
 30881: <!-- Testing: putImageData() puts image data from getImageData() onto the canvas -->
 30881: <canvas id="c289" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_basic() {
 30881: 
 30881: var canvas = document.getElementById('c289');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.clip - bug 433397</p>
 30881: <!-- Testing: putImageData() is not affected by clipping regions -->
 30881: <canvas id="c290" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_imageData_put_clip() {
 30881: 
 30881: var canvas = document.getElementById('c290');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 50, 50);
 30881: ctx.clip();
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.created.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.created - bug 433004</p>
 30881: <!-- Testing: putImageData() puts image data from createImageData() onto the canvas -->
 30881: <canvas id="c291" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_created() {
 30881: 
 30881: var canvas = document.getElementById('c291');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.createImageData(100, 50);
 30881: for (var i = 0; i < imgdata.data.length; i += 4) {
 30881:     imgdata.data[i] = 0;
 30881:     imgdata.data[i+1] = 255;
 30881:     imgdata.data[i+2] = 0;
 30881:     imgdata.data[i+3] = 255;
 30881: }
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.cross.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.cross</p>
 30881: <!-- Testing: putImageData() accepts image data got from a different canvas -->
 30881: <canvas id="c292" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_cross() {
 30881: 
 30881: var canvas = document.getElementById('c292');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx2.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.dirty.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.dirty.negative</p>
 30881: <!-- Testing: putImageData() handles negative-sized dirty rectangles correctly -->
 30881: <canvas id="c293" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_dirty_negative() {
 30881: 
 30881: var canvas = document.getElementById('c293');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 20, 20)
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(40, 20, 20, 20)
 30881: ctx.putImageData(imgdata, 40, 20, 20, 20, -20, -20);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 35,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 65,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,15, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,45, 0,255,0,255, 2);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.dirty.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.dirty.outside</p>
 30881: <!-- Testing: putImageData() handles dirty rectangles outside the canvas correctly -->
 30881: <canvas id="c294" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_dirty_outside() {
 30881: 
 30881: var canvas = document.getElementById('c294');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: 
 30881: ctx.putImageData(imgdata, 100, 20, 20, 20, -20, -20);
 30881: ctx.putImageData(imgdata, 200, 200, 0, 0, 100, 50);
 30881: ctx.putImageData(imgdata, 40, 20, -30, -20, 30, 20);
 30881: ctx.putImageData(imgdata, -30, 20, 0, 0, 30, 20);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,15, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 98,45, 0,255,0,255, 2);
 30881: isPixel(ctx, 1,5, 0,255,0,255, 2);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 1,45, 0,255,0,255, 2);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.dirty.rect1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.dirty.rect1</p>
 30881: <!-- Testing: putImageData() only modifies areas inside the dirty rectangle, using width and height -->
 30881: <canvas id="c295" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_dirty_rect1() {
 30881: 
 30881: var canvas = document.getElementById('c295');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 20, 20)
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(40, 20, 20, 20)
 30881: ctx.putImageData(imgdata, 40, 20, 0, 0, 20, 20);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 35,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 65,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,15, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,45, 0,255,0,255, 2);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.dirty.rect2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.dirty.rect2</p>
 30881: <!-- Testing: putImageData() only modifies areas inside the dirty rectangle, using x and y -->
 30881: <canvas id="c296" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_dirty_rect2() {
 30881: 
 30881: var canvas = document.getElementById('c296');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(60, 30, 20, 20)
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(40, 20, 20, 20)
 30881: ctx.putImageData(imgdata, -20, -10, 60, 30, 20, 20);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 35,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 65,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,15, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,45, 0,255,0,255, 2);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.dirty.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.dirty.zero</p>
 30881: <!-- Testing: putImageData() with zero-sized dirty rectangle puts nothing -->
 30881: <canvas id="c297" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_imageData_put_dirty_zero() {
 30881: 
 30881: var canvas = document.getElementById('c297');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.putImageData(imgdata, 0, 0, 0, 0, 0, 0);
 58610: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.modified.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.modified</p>
 30881: <!-- Testing: putImageData() puts modified image data correctly -->
 30881: <canvas id="c298" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_modified() {
 30881: 
 30881: var canvas = document.getElementById('c298');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(45, 20, 10, 10)
 30881: var imgdata = ctx.getImageData(45, 20, 10, 10);
 30881: for (var i = 0, len = imgdata.width*imgdata.height*4; i < len; i += 4)
 30881: {
 30881:     imgdata.data[i] = 0;
 30881:     imgdata.data[i+1] = 255;
 30881: }
 30881: ctx.putImageData(imgdata, 45, 20);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.nonfinite</p>
 30881: <!-- Testing: putImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 30881: <canvas id="c299" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_put_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c299');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = ctx.getImageData(0, 0, 10, 10);
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, -Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, NaN, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, -Infinity, 10, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, NaN, 10, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, -Infinity, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, NaN, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, -Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, NaN, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, -Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, NaN, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, -Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, NaN, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, 10, -Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, 10, NaN);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, Infinity, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, Infinity, 10, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, Infinity, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, Infinity, 10, 10, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, 10, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, Infinity, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, Infinity, 10, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, Infinity, 10, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, 10, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, Infinity, 10, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, Infinity, Infinity, 10);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, Infinity, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, Infinity, 10, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 10, 10, 10, 10, Infinity, Infinity);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.null.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.null - bug 421715</p>
 30881: <!-- Testing: putImageData() with null imagedata throws TYPE_MISMATCH_ERR -->
 30881: <canvas id="c300" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_put_null() {
 30881: 
 30881: var canvas = document.getElementById('c300');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(null, 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.path</p>
 30881: <!-- Testing: putImageData() does not affect the current path -->
 30881: <canvas id="c301" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_path() {
 30881: 
 30881: var canvas = document.getElementById('c301');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.rect(0, 0, 100, 50);
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.unaffected.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.unaffected</p>
 30881: <!-- Testing: putImageData() is not affected by context state -->
 30881: <canvas id="c302" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_imageData_put_unaffected() {
 30881: 
 30881: var canvas = document.getElementById('c302');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: var imgdata = ctx.getImageData(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50)
 30881: ctx.globalAlpha = 0.1;
 30881: ctx.globalCompositeOperation = 'destination-atop';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.translate(100, 50);
 30881: ctx.scale(0.1, 0.1);
 30881: ctx.putImageData(imgdata, 0, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.unchanged.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.unchanged</p>
 30881: <!-- Testing: putImageData(getImageData(...), ...) has no effect -->
 30881: <canvas id="c303" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_put_unchanged() {
 30881: 
 30881: var canvas = document.getElementById('c303');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var i = 0;
 30881: for (var y = 0; y < 16; ++y) {
 30881:     for (var x = 0; x < 16; ++x, ++i) {
 30881:         ctx.fillStyle = 'rgba(' + i + ',' + (Math.floor(i*1.5) % 256) + ',' + (Math.floor(i*23.3) % 256) + ',' + (i/256) + ')';
 30881:         ctx.fillRect(x, y, 1, 1);
 30881:     }
 30881: }
 30881: var imgdata1 = ctx.getImageData(0.1, 0.2, 15.8, 15.9);
 30881: var olddata = [];
 30881: for (var i = 0; i < imgdata1.data.length; ++i)
 30881:     olddata[i] = imgdata1.data[i];
 30881: 
 30881: ctx.putImageData(imgdata1, 0.1, 0.2);
 30881: 
 30881: var imgdata2 = ctx.getImageData(0.1, 0.2, 15.8, 15.9);
 30881: for (var i = 0; i < imgdata2.data.length; ++i) {
 30881:     ok(olddata[i] === imgdata2.data[i], "olddata[\""+(i)+"\"] === imgdata2.data[\""+(i)+"\"]");
 30881: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageData.put.wrongtype.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageData.put.wrongtype</p>
 30881: <!-- Testing: putImageData() does not accept non-ImageData objects -->
 30881: <canvas id="c304" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_imageData_put_wrongtype() {
 30881: 
 30881: var canvas = document.getElementById('c304');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var imgdata = { width: 1, height: 1, data: [255, 0, 0, 255] };
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData("cheese", 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: var _thrown = undefined; try {
 30881:   ctx.putImageData(42, 0, 0);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.butt.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.butt</p>
 30881: <!-- Testing: lineCap 'butt' is rendered correctly -->
 30881: <canvas id="c305" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cap_butt() {
 30881: 
 30881: var canvas = document.getElementById('c305');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(15, 15, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(25, 15);
 30881: ctx.lineTo(25, 35);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(75, 15);
 30881: ctx.lineTo(75, 35);
 30881: ctx.stroke();
 30881: ctx.fillRect(65, 15, 20, 20);
 30881: 
 30881: isPixel(ctx, 25,14, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,16, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,34, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,35, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,36, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 75,14, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,16, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,34, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,35, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,36, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.closed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.closed</p>
 30881: <!-- Testing: Line caps are not drawn at the corners of an unclosed rectangle -->
 30881: <canvas id="c306" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cap_closed() {
 30881: 
 30881: var canvas = document.getElementById('c306');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineCap = 'square';
 30881: ctx.lineWidth = 400;
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(200, 200);
 30881: ctx.lineTo(200, 1000);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.lineTo(1000, 200);
 30881: ctx.closePath();
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.invalid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.invalid - bug 401788</p>
 30881: <!-- Testing: Setting lineCap to invalid values is ignored -->
 30881: <canvas id="c307" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_line_cap_invalid() {
 30881: 
 30881: var canvas = document.getElementById('c307');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.lineCap = 'butt'
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = 'invalid';
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = 'ROUND';
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = 'round\0';
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = 'round ';
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = "";
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: ctx.lineCap = 'butt';
 30881: ctx.lineCap = 'bevel';
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.open.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.open</p>
 30881: <!-- Testing: Line caps are drawn at the corners of an unclosed rectangle -->
 30881: <canvas id="c308" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cap_open() {
 30881: 
 30881: var canvas = document.getElementById('c308');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineCap = 'square';
 30881: ctx.lineWidth = 400;
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(200, 200);
 30881: ctx.lineTo(200, 1000);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.lineTo(1000, 200);
 30881: ctx.lineTo(200, 200);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.round.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.round</p>
 30881: <!-- Testing: lineCap 'round' is rendered correctly -->
 30881: <canvas id="c309" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cap_round() {
 30881: 
 30881: var canvas = document.getElementById('c309');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var tol = 1; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.lineCap = 'round';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(35-tol, 15);
 30881: ctx.arc(25, 15, 10-tol, 0, Math.PI, true);
 30881: ctx.arc(25, 35, 10-tol, Math.PI, 0, true);
 30881: ctx.fill();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(25, 15);
 30881: ctx.lineTo(25, 35);
 30881: ctx.stroke();
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(75, 15);
 30881: ctx.lineTo(75, 35);
 30881: ctx.stroke();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(85+tol, 15);
 30881: ctx.arc(75, 15, 10+tol, 0, Math.PI, true);
 30881: ctx.arc(75, 35, 10+tol, Math.PI, 0, true);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 17,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 32,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 17,43, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,43, 0,255,0,255, 0);
 30881: isPixel(ctx, 32,43, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 67,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 82,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 67,43, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,43, 0,255,0,255, 0);
 30881: isPixel(ctx, 82,43, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cap.square.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cap.square</p>
 30881: <!-- Testing: lineCap 'square' is rendered correctly -->
 30881: <canvas id="c310" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cap_square() {
 30881: 
 30881: var canvas = document.getElementById('c310');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineCap = 'square';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(15, 5, 20, 40);
 30881: ctx.beginPath();
 30881: ctx.moveTo(25, 15);
 30881: ctx.lineTo(25, 35);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(75, 15);
 30881: ctx.lineTo(75, 35);
 30881: ctx.stroke();
 30881: ctx.fillRect(65, 5, 20, 40);
 30881: 
 30881: isPixel(ctx, 25,4, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,5, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,44, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,45, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,46, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 75,4, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,5, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,6, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,44, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,45, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,46, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.cross.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.cross</p>
 30881: <canvas id="c311" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_cross() {
 30881: 
 30881: var canvas = document.getElementById('c311');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'bevel';
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(110, 50);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(100, 60);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.defaults.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.defaults</p>
 30881: <canvas id="c312" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_line_defaults() {
 30881: 
 30881: var canvas = document.getElementById('c312');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.lineWidth === 1, "ctx.lineWidth === 1");
 30881: ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 30881: ok(ctx.lineJoin === 'miter', "ctx.lineJoin === 'miter'");
 30881: ok(ctx.miterLimit === 10, "ctx.miterLimit === 10");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.bevel.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.bevel</p>
 30881: <!-- Testing: lineJoin 'bevel' is rendered correctly -->
 30881: <canvas id="c313" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_bevel() {
 30881: 
 30881: var canvas = document.getElementById('c313');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var tol = 1; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: 
 30881: ctx.fillRect(10, 10, 20, 20);
 30881: ctx.fillRect(20, 20, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(30, 20);
 30881: ctx.lineTo(40-tol, 20);
 30881: ctx.lineTo(30, 10+tol);
 30881: ctx.fill();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(10, 20);
 30881: ctx.lineTo(30, 20);
 30881: ctx.lineTo(30, 40);
 30881: ctx.stroke();
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(60, 20);
 30881: ctx.lineTo(80, 20);
 30881: ctx.lineTo(80, 40);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillRect(60, 10, 20, 20);
 30881: ctx.fillRect(70, 20, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(80, 20);
 30881: ctx.lineTo(90+tol, 20);
 30881: ctx.lineTo(80, 10-tol);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 34,16, 0,255,0,255, 0);
 30881: isPixel(ctx, 34,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 35,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 36,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 36,14, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 84,16, 0,255,0,255, 0);
 30881: isPixel(ctx, 84,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 85,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 86,15, 0,255,0,255, 0);
 30881: isPixel(ctx, 86,14, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.closed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.closed</p>
 30881: <!-- Testing: Line joins are drawn at the corner of a closed rectangle -->
 30881: <canvas id="c314" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_closed() {
 30881: 
 30881: var canvas = document.getElementById('c314');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineJoin = 'miter';
 30881: ctx.lineWidth = 200;
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 50);
 30881: ctx.lineTo(100, 1000);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.lineTo(1000, 50);
 30881: ctx.closePath();
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.invalid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.invalid - bug 401788</p>
 30881: <!-- Testing: Setting lineJoin to invalid values is ignored -->
 30881: <canvas id="c315" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_line_join_invalid() {
 30881: 
 30881: var canvas = document.getElementById('c315');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.lineJoin = 'bevel'
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = 'invalid';
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = 'ROUND';
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = 'round\0';
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = 'round ';
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = "";
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.lineJoin = 'butt';
 30881: ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.miter.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.miter</p>
 30881: <!-- Testing: lineJoin 'miter' is rendered correctly -->
 30881: <canvas id="c316" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_miter() {
 30881: 
 30881: var canvas = document.getElementById('c316');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineJoin = 'miter';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: 
 30881: ctx.fillRect(10, 10, 30, 20);
 30881: ctx.fillRect(20, 10, 20, 30);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(10, 20);
 30881: ctx.lineTo(30, 20);
 30881: ctx.lineTo(30, 40);
 30881: ctx.stroke();
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(60, 20);
 30881: ctx.lineTo(80, 20);
 30881: ctx.lineTo(80, 40);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillRect(60, 10, 30, 20);
 30881: ctx.fillRect(70, 10, 20, 30);
 30881: 
 30881: isPixel(ctx, 38,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 39,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 40,10, 0,255,0,255, 0);
 30881: isPixel(ctx, 41,9, 0,255,0,255, 0);
 30881: isPixel(ctx, 42,8, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 88,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 89,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,10, 0,255,0,255, 0);
 30881: isPixel(ctx, 91,9, 0,255,0,255, 0);
 30881: isPixel(ctx, 92,8, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.open.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.open</p>
 30881: <!-- Testing: Line joins are not drawn at the corner of an unclosed rectangle -->
 30881: <canvas id="c317" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_open() {
 30881: 
 30881: var canvas = document.getElementById('c317');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineJoin = 'miter';
 30881: ctx.lineWidth = 200;
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 50);
 30881: ctx.lineTo(100, 1000);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.lineTo(1000, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.parallel.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.parallel</p>
 30881: <!-- Testing: Line joins are drawn at 180-degree joins -->
 30881: <canvas id="c318" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_parallel() {
 30881: 
 30881: var canvas = document.getElementById('c318');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 300;
 30881: ctx.lineJoin = 'round';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-100, 25);
 30881: ctx.lineTo(0, 25);
 30881: ctx.lineTo(-100, 25);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.join.round.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.join.round</p>
 30881: <!-- Testing: lineJoin 'round' is rendered correctly -->
 30881: <canvas id="c319" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_join_round() {
 30881: 
 30881: var canvas = document.getElementById('c319');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var tol = 1; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.lineJoin = 'round';
 30881: ctx.lineWidth = 20;
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: 
 30881: ctx.fillRect(10, 10, 20, 20);
 30881: ctx.fillRect(20, 20, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(30, 20);
 30881: ctx.arc(30, 20, 10-tol, 0, 2*Math.PI, true);
 30881: ctx.fill();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(10, 20);
 30881: ctx.lineTo(30, 20);
 30881: ctx.lineTo(30, 40);
 30881: ctx.stroke();
 30881: 
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(60, 20);
 30881: ctx.lineTo(80, 20);
 30881: ctx.lineTo(80, 40);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillRect(60, 10, 20, 20);
 30881: ctx.fillRect(70, 20, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(80, 20);
 30881: ctx.arc(80, 20, 10+tol, 0, 2*Math.PI, true);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 36,14, 0,255,0,255, 0);
 30881: isPixel(ctx, 36,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 37,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 38,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 38,12, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 86,14, 0,255,0,255, 0);
 30881: isPixel(ctx, 86,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 87,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 88,13, 0,255,0,255, 0);
 30881: isPixel(ctx, 88,12, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.acute.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.acute</p>
 30881: <!-- Testing: Miter joins are drawn correctly with acute angles -->
 30881: <canvas id="c320" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_acute() {
 30881: 
 30881: var canvas = document.getElementById('c320');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.miterLimit = 2.614;
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 1000);
 30881: ctx.lineTo(100, 100);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.miterLimit = 2.613;
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 1000);
 30881: ctx.lineTo(100, 100);
 30881: ctx.lineTo(1000, 1000);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.exceeded.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.exceeded</p>
 30881: <!-- Testing: Miter joins are not drawn when the miter limit is exceeded -->
 30881: <canvas id="c321" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_exceeded() {
 30881: 
 30881: var canvas = document.getElementById('c321');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 400;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.miterLimit = 1.414;
 30881: ctx.beginPath();
 30881: ctx.moveTo(200, 1000);
 30881: ctx.lineTo(200, 200);
 30881: ctx.lineTo(1000, 201); // slightly non-right-angle to avoid being a special case
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.invalid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.invalid</p>
 30881: <!-- Testing: Setting miterLimit to invalid values is ignored -->
 30881: <canvas id="c322" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_line_miter_invalid() {
 30881: 
 30881: var canvas = document.getElementById('c322');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ctx.miterLimit = 0;
 61743: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ctx.miterLimit = -1;
 61743: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ctx.miterLimit = Infinity;
 61743: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ctx.miterLimit = -Infinity;
 61743: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 30881: 
 30881: ctx.miterLimit = 1.5;
 30881: ctx.miterLimit = NaN;
 61743: ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 61743: 
 61743: } catch (e) {
 61743:     _thrown_outer = true;
 61743: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.lineedge.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.lineedge - bug 401791</p>
 30881: <!-- Testing: Miter joins are not drawn when the miter limit is exceeded at the corners of a zero-height rectangle -->
 30881: <canvas id="c323" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_lineedge() {
 30881: 
 30881: var canvas = document.getElementById('c323');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.miterLimit = 1.414;
 30881: ctx.beginPath();
 30881: ctx.strokeRect(100, 25, 200, 0);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.obtuse.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.obtuse</p>
 30881: <!-- Testing: Miter joins are drawn correctly with obtuse angles -->
 30881: <canvas id="c324" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_obtuse() {
 30881: 
 30881: var canvas = document.getElementById('c324');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var x=800;
 30881: var y=300;
 30881: ctx.lineWidth = 1600;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.miterLimit = 1.083;
 30881: ctx.beginPath();
 30881: ctx.moveTo(800, 10000);
 30881: ctx.lineTo(800, 300);
 30881: ctx.lineTo(10000, -8900);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.miterLimit = 1.082;
 30881: ctx.beginPath();
 30881: ctx.moveTo(800, 10000);
 30881: ctx.lineTo(800, 300);
 30881: ctx.lineTo(10000, -8900);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.rightangle.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.rightangle - bug 401791</p>
 30881: <!-- Testing: Miter joins are not drawn when the miter limit is exceeded, on exact right angles -->
 30881: <canvas id="c325" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_rightangle() {
 30881: 
 30881: var canvas = document.getElementById('c325');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 400;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.miterLimit = 1.414;
 30881: ctx.beginPath();
 30881: ctx.moveTo(200, 1000);
 30881: ctx.lineTo(200, 200);
 30881: ctx.lineTo(1000, 200);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.miter.within.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.miter.within</p>
 30881: <!-- Testing: Miter joins are drawn when the miter limit is not quite exceeded -->
 30881: <canvas id="c326" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_miter_within() {
 30881: 
 30881: var canvas = document.getElementById('c326');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 400;
 30881: ctx.lineJoin = 'miter';
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.miterLimit = 1.416;
 30881: ctx.beginPath();
 30881: ctx.moveTo(200, 1000);
 30881: ctx.lineTo(200, 200);
 30881: ctx.lineTo(1000, 201);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.union.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.union</p>
 30881: <canvas id="c327" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_union() {
 30881: 
 30881: var canvas = document.getElementById('c327');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 24);
 30881: ctx.lineTo(100, 25);
 30881: ctx.lineTo(0, 26);
 30881: ctx.closePath();
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.width.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.width.basic</p>
 30881: <!-- Testing: lineWidth determines the width of line strokes -->
 30881: <canvas id="c328" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_width_basic() {
 30881: 
 30881: var canvas = document.getElementById('c328');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 20;
 30881: // Draw a green line over a red box, to check the line is not too small
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(15, 15, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.moveTo(25, 15);
 30881: ctx.lineTo(25, 35);
 30881: ctx.stroke();
 30881: 
 30881: // Draw a green box over a red line, to check the line is not too large
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(75, 15);
 30881: ctx.lineTo(75, 35);
 30881: ctx.stroke();
 30881: ctx.fillRect(65, 15, 20, 20);
 30881: 
 30881: isPixel(ctx, 14,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 15,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 16,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 34,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 35,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 36,25, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 64,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 65,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 66,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 84,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 85,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 86,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.width.invalid.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.width.invalid</p>
 30881: <!-- Testing: Setting lineWidth to invalid values is ignored -->
 30881: <canvas id="c329" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_line_width_invalid() {
 30881: 
 30881: var canvas = document.getElementById('c329');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ctx.lineWidth = 0;
 61744: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ctx.lineWidth = -1;
 61744: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ctx.lineWidth = Infinity;
 61744: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ctx.lineWidth = -Infinity;
 61744: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 30881: 
 30881: ctx.lineWidth = 1.5;
 30881: ctx.lineWidth = NaN;
 61744: ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 61744: 
 61744: } catch (e) {
 61744:     _thrown_outer = true;
 61744: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.line.width.transformed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.line.width.transformed</p>
 30881: <!-- Testing: Line stroke widths are affected by scale transformations -->
 30881: <canvas id="c330" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_line_width_transformed() {
 30881: 
 30881: var canvas = document.getElementById('c330');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 4;
 30881: // Draw a green line over a red box, to check the line is not too small
 30881: ctx.fillStyle = '#f00';
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.fillRect(15, 15, 20, 20);
 30881: ctx.save();
 30881:  ctx.scale(5, 1);
 30881:  ctx.beginPath();
 30881:  ctx.moveTo(5, 15);
 30881:  ctx.lineTo(5, 35);
 30881:  ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: // Draw a green box over a red line, to check the line is not too large
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.save();
 30881:  ctx.scale(-5, 1);
 30881:  ctx.beginPath();
 30881:  ctx.moveTo(-15, 15);
 30881:  ctx.lineTo(-15, 35);
 30881:  ctx.stroke();
 30881: ctx.restore();
 30881: ctx.fillRect(65, 15, 20, 20);
 30881: 
 30881: isPixel(ctx, 14,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 15,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 16,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 34,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 35,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 36,25, 0,255,0,255, 0);
 30881: 
 30881: isPixel(ctx, 64,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 65,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 66,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 84,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 85,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 86,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.missingargs.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.missingargs</p>
 30881: <!-- Testing: Missing arguments cause NOT_SUPPORTED_ERR -->
 30881: <canvas id="c331" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_missingargs() {
 30881: 
 30881: var canvas = document.getElementById('c331');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.scale();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.scale(1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.rotate();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.translate();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.translate(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: if (ctx.transform) { // (avoid spurious failures, since the aim here is not to test that all features are supported)
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform(1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform(1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform(1, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform(1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.transform(1, 0, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: if (ctx.setTransform) {
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform(1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform(1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform(1, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform(1, 0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.setTransform(1, 0, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createLinearGradient(0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createRadialGradient(0, 0, 1, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(canvas);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.clearRect();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.clearRect(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.clearRect(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.clearRect(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.fillRect();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.fillRect(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.fillRect(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.fillRect(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.strokeRect();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.strokeRect(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.strokeRect(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.strokeRect(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.moveTo();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.moveTo(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.lineTo();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.lineTo(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.quadraticCurveTo();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.quadraticCurveTo(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.quadraticCurveTo(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.quadraticCurveTo(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo(0, 0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.bezierCurveTo(0, 0, 0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo(0, 0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.rect();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.rect(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.rect(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.rect(0, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0, 0, 1, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0, 0, 1, 0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: if (ctx.isPointInPath) {
 30881:     var _thrown = undefined; try {
 30881:   ctx.isPointInPath();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.isPointInPath(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(canvas);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   ctx.drawImage(canvas, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: // TODO: n >= 3 args on drawImage could be either a valid overload,
 30881: // or too few for another overload, or too many for another
 30881: // overload - what should happen?
 30881: if (ctx.createImageData) {
 30881:     var _thrown = undefined; try {
 30881:   ctx.createImageData();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.createImageData(1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: if (ctx.getImageData) {
 30881:     var _thrown = undefined; try {
 30881:   ctx.getImageData();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.getImageData(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.getImageData(0, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.getImageData(0, 0, 1);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: if (ctx.putImageData) {
 30881:     var imgdata = ctx.getImageData(0, 0, 1, 1);
 30881:     var _thrown = undefined; try {
 30881:   ctx.putImageData();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881:     var _thrown = undefined; try {
 30881:   ctx.putImageData(imgdata, 0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: }
 30881: var g = ctx.createLinearGradient(0, 0, 0, 0);
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: var _thrown = undefined; try {
 30881:   g.addColorStop(0);
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.1</p>
 30881: <!-- Testing: arc() draws pi/2 .. -pi anticlockwise correctly -->
 30881: <canvas id="c332" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_1() {
 30881: 
 30881: var canvas = document.getElementById('c332');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 0);
 30881: ctx.arc(100, 0, 150, Math.PI/2, -Math.PI, true);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.2</p>
 30881: <!-- Testing: arc() draws -3pi/2 .. -pi anticlockwise correctly -->
 30881: <canvas id="c333" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_2() {
 30881: 
 30881: var canvas = document.getElementById('c333');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 0);
 30881: ctx.arc(100, 0, 150, -3*Math.PI/2, -Math.PI, true);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.3</p>
 30881: <!-- Testing: arc() wraps angles mod 2pi when anticlockwise and end > start+2pi -->
 30881: <canvas id="c334" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_3() {
 30881: 
 30881: var canvas = document.getElementById('c334');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 0);
 30881: ctx.arc(100, 0, 150, (512+1/2)*Math.PI, (1024-1)*Math.PI, true);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.4</p>
 30881: <!-- Testing: arc() draws a full circle when clockwise and end > start+2pi -->
 30881: <canvas id="c335" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_4() {
 30881: 
 30881: var canvas = document.getElementById('c335');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.arc(50, 25, 60, (512+1/2)*Math.PI, (1024-1)*Math.PI, false);
 30881: ctx.fill();
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.5</p>
 30881: <!-- Testing: arc() wraps angles mod 2pi when clockwise and start > end+2pi -->
 30881: <canvas id="c336" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_5() {
 30881: 
 30881: var canvas = document.getElementById('c336');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 0);
 30881: ctx.arc(100, 0, 150, (1024-1)*Math.PI, (512+1/2)*Math.PI, false);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.angle.6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.angle.6</p>
 30881: <!-- Testing: arc() draws a full circle when anticlockwise and start > end+2pi -->
 30881: <canvas id="c337" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_angle_6() {
 30881: 
 30881: var canvas = document.getElementById('c337');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.arc(50, 25, 60, (1024-1)*Math.PI, (512+1/2)*Math.PI, true);
 30881: ctx.fill();
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.empty</p>
 30881: <!-- Testing: arc() with an empty path does not draw a straight line to the start point -->
 30881: <canvas id="c338" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_empty() {
 30881: 
 30881: var canvas = document.getElementById('c338');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arc(200, 25, 5, 0, 2*Math.PI, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.end.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.end</p>
 30881: <!-- Testing: arc() adds the end point of the arc to the subpath -->
 30881: <canvas id="c339" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_end() {
 30881: 
 30881: var canvas = document.getElementById('c339');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-100, 0);
 30881: ctx.arc(-100, 0, 25, -Math.PI/2, Math.PI/2, true);
 30881: ctx.lineTo(100, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.negative</p>
 30881: <!-- Testing: arc() with negative radius throws INDEX_SIZE_ERR -->
 30881: <canvas id="c340" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_arc_negative() {
 30881: 
 30881: var canvas = document.getElementById('c340');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.arc(0, 0, -1, 0, 0, true);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.nonempty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.nonempty</p>
 30881: <!-- Testing: arc() with a non-empty path does draw a straight line to the start point -->
 30881: <canvas id="c341" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_nonempty() {
 30881: 
 30881: var canvas = document.getElementById('c341');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arc(200, 25, 5, 0, 2*Math.PI, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.nonfinite</p>
 30881: <!-- Testing: arc() with Infinity/NaN is ignored -->
 30881: <canvas id="c342" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c342');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.arc(Infinity, 50, 0, 2*Math.PI, true);
 30881: ctx.arc(-Infinity, 50, 0, 2*Math.PI, true);
 30881: ctx.arc(NaN, 50, 0, 2*Math.PI, true);
 30881: ctx.arc(0, Infinity, 0, 2*Math.PI, true);
 30881: ctx.arc(0, -Infinity, 0, 2*Math.PI, true);
 30881: ctx.arc(0, NaN, 0, 2*Math.PI, true);
 30881: ctx.arc(0, 50, Infinity, 2*Math.PI, true);
 30881: ctx.arc(0, 50, -Infinity, 2*Math.PI, true);
 30881: ctx.arc(0, 50, NaN, 2*Math.PI, true);
 30881: ctx.arc(0, 50, 0, Infinity, true);
 30881: ctx.arc(0, 50, 0, -Infinity, true);
 30881: ctx.arc(0, 50, 0, NaN, true);
 30881: ctx.arc(Infinity, Infinity, 0, 2*Math.PI, true);
 30881: ctx.arc(Infinity, Infinity, Infinity, 2*Math.PI, true);
 30881: ctx.arc(Infinity, Infinity, Infinity, Infinity, true);
 30881: ctx.arc(Infinity, Infinity, 0, Infinity, true);
 30881: ctx.arc(Infinity, 50, Infinity, 2*Math.PI, true);
 30881: ctx.arc(Infinity, 50, Infinity, Infinity, true);
 30881: ctx.arc(Infinity, 50, 0, Infinity, true);
 30881: ctx.arc(0, Infinity, Infinity, 2*Math.PI, true);
 30881: ctx.arc(0, Infinity, Infinity, Infinity, true);
 30881: ctx.arc(0, Infinity, 0, Infinity, true);
 30881: ctx.arc(0, 50, Infinity, Infinity, true);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.scale.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.scale.1</p>
 30881: <!-- Testing: Non-uniformly scaled arcs are the right shape -->
 30881: <canvas id="c343" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_scale_1() {
 30881: 
 30881: var canvas = document.getElementById('c343');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.scale(2, 0.5);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
101616: var hypothenuse = Math.sqrt(50 * 50 + 25 * 25);
101616: var tolerance = 0.5;
101616: var radius = hypothenuse + tolerance;
101616: ctx.arc(25, 50, radius, 0, 2*Math.PI, false);
 30881: ctx.fill();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-25, 50);
 30881: ctx.arc(-25, 50, 24, 0, 2*Math.PI, false);
 30881: ctx.moveTo(75, 50);
 30881: ctx.arc(75, 50, 24, 0, 2*Math.PI, false);
 30881: ctx.moveTo(25, -25);
 30881: ctx.arc(25, -25, 24, 0, 2*Math.PI, false);
 30881: ctx.moveTo(25, 125);
 30881: ctx.arc(25, 125, 24, 0, 2*Math.PI, false);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.scale.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.scale.2</p>
 30881: <!-- Testing: Highly scaled arcs are the right shape -->
 30881: <canvas id="c344" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_scale_2() {
 30881: 
 30881: var canvas = document.getElementById('c344');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.scale(100, 100);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 1.2;
 30881: ctx.beginPath();
 30881: ctx.arc(0, 0, 0.6, 0, Math.PI/2, false);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.selfintersect.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.selfintersect.1</p>
 30881: <!-- Testing: arc() with lineWidth > 2*radius is drawn sensibly -->
 30881: <canvas id="c345" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_selfintersect_1() {
 30881: 
 30881: var canvas = document.getElementById('c345');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 200;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arc(100, 50, 25, 0, -Math.PI/2, true);
 30881: ctx.stroke();
 30881: ctx.beginPath();
 30881: ctx.arc(0, 0, 25, 0, -Math.PI/2, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.selfintersect.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.selfintersect.2</p>
 30881: <!-- Testing: arc() with lineWidth > 2*radius is drawn sensibly -->
 30881: <canvas id="c346" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_selfintersect_2() {
 30881: 
 30881: var canvas = document.getElementById('c346');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 180;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.arc(-50, 50, 25, 0, -Math.PI/2, true);
 30881: ctx.stroke();
 30881: ctx.beginPath();
 30881: ctx.arc(100, 0, 25, 0, -Math.PI/2, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,10, 0,255,0,255, 0);
 30881: isPixel(ctx, 97,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 97,2, 0,255,0,255, 0);
 30881: isPixel(ctx, 97,3, 0,255,0,255, 0);
 30881: isPixel(ctx, 2,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.shape.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.shape.1</p>
 30881: <!-- Testing: arc() from 0 to pi does not draw anything in the wrong half -->
 30881: <canvas id="c347" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_shape_1() {
 30881: 
 30881: var canvas = document.getElementById('c347');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arc(50, 50, 50, 0, Math.PI, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 20,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.shape.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.shape.2</p>
 30881: <!-- Testing: arc() from 0 to pi draws stuff in the right half -->
 30881: <canvas id="c348" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_shape_2() {
 30881: 
 30881: var canvas = document.getElementById('c348');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 100;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.arc(50, 50, 50, 0, Math.PI, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 20,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.shape.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.shape.3</p>
 30881: <!-- Testing: arc() from 0 to -pi/2 does not draw anything in the wrong quadrant -->
 30881: <canvas id="c349" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arc_shape_3() {
 30881: 
 30881: var canvas = document.getElementById('c349');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 100;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arc(0, 50, 50, 0, -Math.PI/2, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.shape.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.shape.4</p>
 30881: <!-- Testing: arc() from 0 to -pi/2 draws stuff in the right quadrant -->
 30881: <canvas id="c350" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_shape_4() {
 30881: 
 30881: var canvas = document.getElementById('c350');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 150;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.arc(-50, 50, 100, 0, -Math.PI/2, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.shape.5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.shape.5</p>
 30881: <!-- Testing: arc() from 0 to 5pi does not draw crazy things -->
 30881: <canvas id="c351" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_shape_5() {
 30881: 
 30881: var canvas = document.getElementById('c351');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 200;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arc(300, 0, 100, 0, 5*Math.PI, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.twopie.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.twopie.1</p>
 30881: <!-- Testing: arc() draws nothing when end = start + 2pi-e and anticlockwise -->
 30881: <canvas id="c352" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_twopie_1() {
 30881: 
 30881: var canvas = document.getElementById('c352');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 2*Math.PI - 1e-4, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.twopie.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.twopie.2</p>
 30881: <!-- Testing: arc() draws a full circle when end = start + 2pi-e and clockwise -->
 30881: <canvas id="c353" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_twopie_2() {
 30881: 
 30881: var canvas = document.getElementById('c353');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 2*Math.PI - 1e-4, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.twopie.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.twopie.3</p>
 30881: <!-- Testing: arc() draws a full circle when end = start + 2pi+e and anticlockwise -->
 30881: <canvas id="c354" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_twopie_3() {
 30881: 
 30881: var canvas = document.getElementById('c354');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 2*Math.PI + 1e-4, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.twopie.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.twopie.4</p>
 30881: <!-- Testing: arc() draws nothing when end = start + 2pi+e and clockwise -->
 30881: <canvas id="c355" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_twopie_4() {
 30881: 
 30881: var canvas = document.getElementById('c355');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 2*Math.PI + 1e-4, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.zero.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.zero.1</p>
 30881: <!-- Testing: arc() draws nothing when startAngle = endAngle and anticlockwise -->
 30881: <canvas id="c356" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_zero_1() {
 30881: 
 30881: var canvas = document.getElementById('c356');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 0, true);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.zero.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.zero.2</p>
 30881: <!-- Testing: arc() draws nothing when startAngle = endAngle and clockwise -->
 30881: <canvas id="c357" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arc_zero_2() {
 30881: 
 30881: var canvas = document.getElementById('c357');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.arc(50, 25, 50, 0, 0, false);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arc.zeroradius.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arc.zeroradius</p>
 30881: <!-- Testing: arc() with zero radius draws a line to the start point -->
 30881: <canvas id="c358" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arc_zeroradius() {
 30881: 
 30881: var canvas = document.getElementById('c358');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00'
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arc(200, 25, 0, 0, Math.PI, true);
 30881: ctx.stroke();
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.coincide.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.coincide.1</p>
 30881: <!-- Testing: arcTo() has no effect if P0 = P1 -->
 30881: <canvas id="c359" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_coincide_1() {
 30881: 
 30881: var canvas = document.getElementById('c359');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(0, 25, 50, 1000, 1);
 30881: ctx.lineTo(100, 25);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.arcTo(50, 25, 100, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.coincide.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.coincide.2</p>
 30881: <!-- Testing: arcTo() draws a straight line to P1 if P1 = P2 -->
 30881: <canvas id="c360" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_coincide_2() {
 30881: 
 30881: var canvas = document.getElementById('c360');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, 100, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.collinear.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.collinear.1</p>
 30881: <!-- Testing: arcTo() with all points on a line, and P1 between P0/P2, draws a straight line to P1 -->
 30881: <canvas id="c361" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_collinear_1() {
 30881: 
 30881: var canvas = document.getElementById('c361');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, 200, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-100, 25);
 30881: ctx.arcTo(0, 25, 100, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.collinear.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.collinear.2</p>
 30881: <!-- Testing: arcTo() with all points on a line, and P2 between P0/P1, draws an infinite line along P1..P2 -->
 30881: <canvas id="c362" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_collinear_2() {
 30881: 
 30881: var canvas = document.getElementById('c362');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(1000, 25);
 30881: ctx.arcTo(1100, 25, 1050, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, -50, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.collinear.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.collinear.3</p>
 30881: <!-- Testing: arcTo() with all points on a line, and P0 between P1/P2, draws an infinite line along P1..P2 -->
 30881: <canvas id="c363" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_collinear_3() {
 30881: 
 30881: var canvas = document.getElementById('c363');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(150, 25);
 30881: ctx.arcTo(200, 25, 100, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, 50, 25, 1);
 30881: ctx.stroke();
 30881: 
 30881: todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.emptysubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.emptysubpath</p>
 30881: <!-- Testing: arcTo() does nothing if there are no subpaths -->
 30881: <canvas id="c364" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_emptysubpath() {
 30881: 
 30881: var canvas = document.getElementById('c364');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.arcTo(0, 25, 0, 25, 0.1);
 30881: ctx.arcTo(100, 25, 100, 25, 0.1);
 30881: ctx.stroke();
 30881: todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.negative</p>
 30881: <!-- Testing: arcTo() with negative radius throws an exception -->
 30881: <canvas id="c365" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_arcTo_negative() {
 30881: 
 30881: var canvas = document.getElementById('c365');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.arcTo(0, 0, 0, 0, -1);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.nonfinite</p>
 30881: <!-- Testing: arcTo() with Infinity/NaN is ignored -->
 30881: <canvas id="c366" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c366');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.arcTo(Infinity, 50, 0, 50, 0);
 30881: ctx.arcTo(-Infinity, 50, 0, 50, 0);
 30881: ctx.arcTo(NaN, 50, 0, 50, 0);
 30881: ctx.arcTo(0, Infinity, 0, 50, 0);
 30881: ctx.arcTo(0, -Infinity, 0, 50, 0);
 30881: ctx.arcTo(0, NaN, 0, 50, 0);
 30881: ctx.arcTo(0, 50, Infinity, 50, 0);
 30881: ctx.arcTo(0, 50, -Infinity, 50, 0);
 30881: ctx.arcTo(0, 50, NaN, 50, 0);
 30881: ctx.arcTo(0, 50, 0, Infinity, 0);
 30881: ctx.arcTo(0, 50, 0, -Infinity, 0);
 30881: ctx.arcTo(0, 50, 0, NaN, 0);
 30881: ctx.arcTo(0, 50, 0, 50, Infinity);
 30881: ctx.arcTo(0, 50, 0, 50, -Infinity);
 30881: ctx.arcTo(0, 50, 0, 50, NaN);
 30881: ctx.arcTo(Infinity, Infinity, 0, 50, 0);
 30881: ctx.arcTo(Infinity, Infinity, Infinity, 50, 0);
 30881: ctx.arcTo(Infinity, Infinity, Infinity, Infinity, 0);
 30881: ctx.arcTo(Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.arcTo(Infinity, Infinity, Infinity, 50, Infinity);
 30881: ctx.arcTo(Infinity, Infinity, 0, Infinity, 0);
 30881: ctx.arcTo(Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.arcTo(Infinity, Infinity, 0, 50, Infinity);
 30881: ctx.arcTo(Infinity, 50, Infinity, 50, 0);
 30881: ctx.arcTo(Infinity, 50, Infinity, Infinity, 0);
 30881: ctx.arcTo(Infinity, 50, Infinity, Infinity, Infinity);
 30881: ctx.arcTo(Infinity, 50, Infinity, 50, Infinity);
 30881: ctx.arcTo(Infinity, 50, 0, Infinity, 0);
 30881: ctx.arcTo(Infinity, 50, 0, Infinity, Infinity);
 30881: ctx.arcTo(Infinity, 50, 0, 50, Infinity);
 30881: ctx.arcTo(0, Infinity, Infinity, 50, 0);
 30881: ctx.arcTo(0, Infinity, Infinity, Infinity, 0);
 30881: ctx.arcTo(0, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.arcTo(0, Infinity, Infinity, 50, Infinity);
 30881: ctx.arcTo(0, Infinity, 0, Infinity, 0);
 30881: ctx.arcTo(0, Infinity, 0, Infinity, Infinity);
 30881: ctx.arcTo(0, Infinity, 0, 50, Infinity);
 30881: ctx.arcTo(0, 50, Infinity, Infinity, 0);
 30881: ctx.arcTo(0, 50, Infinity, Infinity, Infinity);
 30881: ctx.arcTo(0, 50, Infinity, 50, Infinity);
 30881: ctx.arcTo(0, 50, 0, Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.scale.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.scale</p>
 30881: <!-- Testing: arcTo scales the curve, not just the control points -->
 30881: <canvas id="c367" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_scale() {
 30881: 
 30881: var canvas = document.getElementById('c367');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 50);
 30881: ctx.translate(100, 0);
 30881: ctx.scale(0.1, 1);
 30881: ctx.arcTo(50, 50, 50, 0, 50);
 30881: ctx.lineTo(-1000, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.shape.curve1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.shape.curve1</p>
 30881: <!-- Testing: arcTo() curves in the right kind of shape -->
 30881: <canvas id="c368" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_shape_curve1() {
 30881: 
 30881: var canvas = document.getElementById('c368');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var tol = 1.5; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 10;
 30881: ctx.beginPath();
 30881: ctx.moveTo(10, 25);
 30881: ctx.arcTo(75, 25, 75, 60, 20);
 30881: ctx.stroke();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.rect(10, 20, 45, 10);
 30881: ctx.moveTo(80, 45);
 30881: ctx.arc(55, 45, 25+tol, 0, -Math.PI/2, true);
 30881: ctx.arc(55, 45, 15-tol, -Math.PI/2, 0, false);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,19, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,20, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,21, 0,255,0,255, 0);
 30881: isPixel(ctx, 64,22, 0,255,0,255, 0);
 30881: isPixel(ctx, 65,21, 0,255,0,255, 0);
 30881: isPixel(ctx, 72,28, 0,255,0,255, 0);
 30881: isPixel(ctx, 73,27, 0,255,0,255, 0);
 30881: isPixel(ctx, 78,36, 0,255,0,255, 0);
 82425: isPixel(ctx, 79,35, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 30881: isPixel(ctx, 80,44, 0,255,0,255, 0);
 30881: isPixel(ctx, 80,45, 0,255,0,255, 0);
 30881: isPixel(ctx, 80,46, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.shape.curve2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.shape.curve2</p>
 30881: <!-- Testing: arcTo() curves in the right kind of shape -->
 30881: <canvas id="c369" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_shape_curve2() {
 30881: 
 30881: var canvas = document.getElementById('c369');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var tol = 1.5; // tolerance to avoid antialiasing artifacts
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.rect(10, 20, 45, 10);
 30881: ctx.moveTo(80, 45);
 30881: ctx.arc(55, 45, 25-tol, 0, -Math.PI/2, true);
 30881: ctx.arc(55, 45, 15+tol, -Math.PI/2, 0, false);
 30881: ctx.fill();
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 10;
 30881: ctx.beginPath();
 30881: ctx.moveTo(10, 25);
 30881: ctx.arcTo(75, 25, 75, 60, 20);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,19, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,20, 0,255,0,255, 0);
 30881: isPixel(ctx, 55,21, 0,255,0,255, 0);
 82425: isPixel(ctx, 64,22, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 30881: isPixel(ctx, 65,21, 0,255,0,255, 0);
 30881: isPixel(ctx, 72,28, 0,255,0,255, 0);
 82425: isPixel(ctx, 73,27, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 82425: isPixel(ctx, 78,36, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 30881: isPixel(ctx, 79,35, 0,255,0,255, 0);
 30881: isPixel(ctx, 80,44, 0,255,0,255, 0);
 30881: isPixel(ctx, 80,45, 0,255,0,255, 0);
 30881: isPixel(ctx, 80,46, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.shape.end.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.shape.end</p>
 30881: <!-- Testing: arcTo() does not draw anything from P1 to P2 -->
 30881: <canvas id="c370" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_shape_end() {
 30881: 
 30881: var canvas = document.getElementById('c370');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-100, -100);
 30881: ctx.arcTo(-100, 25, 200, 25, 10);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.shape.start.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.shape.start</p>
 30881: <!-- Testing: arcTo() draws a straight line from P0 to P1 -->
 30881: <canvas id="c371" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_shape_start() {
 30881: 
 30881: var canvas = document.getElementById('c371');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(200, 25, 200, 50, 10);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.transformation.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.transformation</p>
 30881: <!-- Testing: arcTo joins up to the last subpath point correctly -->
 30881: <canvas id="c372" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_transformation() {
 30881: 
 30881: var canvas = document.getElementById('c372');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 50);
 30881: ctx.translate(100, 0);
 30881: ctx.arcTo(50, 50, 50, 0, 50);
 30881: ctx.lineTo(-100, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.zero.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.zero.1</p>
 30881: <!-- Testing: arcTo() with zero radius draws a straight line from P0 to P1 -->
 30881: <canvas id="c373" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_zero_1() {
 30881: 
 30881: var canvas = document.getElementById('c373');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, 100, 100, 0);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, -25);
 30881: ctx.arcTo(50, -25, 50, 50, 0);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.arcTo.zero.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.arcTo.zero.2</p>
 30881: <!-- Testing: arcTo() with zero radius draws a straight line from P0 to P1, even when all points are collinear -->
 30881: <canvas id="c374" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_arcTo_zero_2() {
 30881: 
 30881: var canvas = document.getElementById('c374');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.lineWidth = 50;
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.arcTo(100, 25, -100, 25, 0);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.beginPath();
 30881: ctx.moveTo(100, 25);
 30881: ctx.arcTo(200, 25, 50, 25, 0);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.beginPath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.beginPath</p>
 30881: <canvas id="c375" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_beginPath() {
 30881: 
 30881: var canvas = document.getElementById('c375');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.beginPath();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.bezierCurveTo.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.bezierCurveTo.basic</p>
 30881: <canvas id="c376" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_bezierCurveTo_basic() {
 30881: 
 30881: var canvas = document.getElementById('c376');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.bezierCurveTo(100, 25, 100, 25, 100, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.bezierCurveTo.emptysubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.bezierCurveTo.emptysubpath</p>
 30881: <canvas id="c377" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_bezierCurveTo_emptysubpath() {
 30881: 
 30881: var canvas = document.getElementById('c377');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.bezierCurveTo(0, 25, 0, 25, 0, 25);
 30881: ctx.bezierCurveTo(100, 25, 100, 25, 100, 25);
 30881: ctx.stroke();
 30881: todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.bezierCurveTo.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.bezierCurveTo.nonfinite</p>
 30881: <!-- Testing: bezierCurveTo() with Infinity/NaN is ignored -->
 30881: <canvas id="c378" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_bezierCurveTo_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c378');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(-Infinity, 50, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(NaN, 50, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, Infinity, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, -Infinity, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, NaN, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, Infinity, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, -Infinity, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, NaN, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, -Infinity, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, NaN, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, -Infinity, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, NaN, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, 0, -Infinity);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, 0, NaN);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, 50, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, 50, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, Infinity, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, Infinity, 0, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, 50, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, Infinity, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(Infinity, 50, 0, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, 50, 0, 50);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, Infinity, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, 0, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(0, Infinity, 0, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(0, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, 0, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(0, Infinity, 0, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, Infinity, 0, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(0, 50, Infinity, Infinity, 0, 50);
 30881: ctx.bezierCurveTo(0, 50, Infinity, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(0, 50, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, 50, Infinity, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(0, 50, Infinity, 50, Infinity, 50);
 30881: ctx.bezierCurveTo(0, 50, Infinity, 50, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, 50, Infinity, 50, 0, Infinity);
 30881: ctx.bezierCurveTo(0, 50, 0, Infinity, Infinity, 50);
 30881: ctx.bezierCurveTo(0, 50, 0, Infinity, Infinity, Infinity);
 30881: ctx.bezierCurveTo(0, 50, 0, Infinity, 0, Infinity);
 30881: ctx.bezierCurveTo(0, 50, 0, 50, Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.bezierCurveTo.scaled.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.bezierCurveTo.scaled</p>
 30881: <canvas id="c379" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_bezierCurveTo_scaled() {
 30881: 
 30881: var canvas = document.getElementById('c379');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.scale(1000, 1000);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 0.055;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-2, 3.1);
 30881: ctx.bezierCurveTo(-2, -1, 2.1, -1, 2.1, 3.1);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.bezierCurveTo.shape.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.bezierCurveTo.shape</p>
 30881: <canvas id="c380" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_bezierCurveTo_shape() {
 30881: 
 30881: var canvas = document.getElementById('c380');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 55;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-2000, 3100);
 30881: ctx.bezierCurveTo(-2000, -1000, 2100, -1000, 2100, 3100);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.basic.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.basic.1</p>
 30881: <canvas id="c381" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_basic_1() {
 30881: 
 30881: var canvas = document.getElementById('c381');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.basic.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.basic.2</p>
 30881: <canvas id="c382" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_basic_2() {
 30881: 
 30881: var canvas = document.getElementById('c382');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(-100, 0, 100, 50);
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.empty</p>
 30881: <canvas id="c383" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_empty() {
 30881: 
 30881: var canvas = document.getElementById('c383');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.intersect.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.intersect</p>
 30881: <canvas id="c384" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_intersect() {
 30881: 
 30881: var canvas = document.getElementById('c384');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 50, 50);
 30881: ctx.clip();
 30881: ctx.beginPath();
 30881: ctx.rect(50, 0, 50, 50)
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.unaffected.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.unaffected</p>
 30881: <canvas id="c385" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_unaffected() {
 30881: 
 30881: var canvas = document.getElementById('c385');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.clip();
 30881: 
 30881: ctx.lineTo(0, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.winding.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.winding.1</p>
 30881: <canvas id="c386" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_winding_1() {
 30881: 
 30881: var canvas = document.getElementById('c386');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.lineTo(-10, -10);
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.clip.winding.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.clip.winding.2</p>
 30881: <canvas id="c387" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_clip_winding_2() {
 30881: 
 30881: var canvas = document.getElementById('c387');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.lineTo(-10, -10);
 30881: ctx.clip();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(0, 0);
 30881: ctx.clip();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.closePath.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.closePath.empty</p>
 30881: <canvas id="c388" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_closePath_empty() {
 30881: 
 30881: var canvas = document.getElementById('c388');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.closePath();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.closePath.newline.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.closePath.newline</p>
 30881: <canvas id="c389" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_closePath_newline() {
 30881: 
 30881: var canvas = document.getElementById('c389');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(-100, 25);
 30881: ctx.lineTo(-100, -100);
 30881: ctx.lineTo(200, -100);
 30881: ctx.lineTo(200, 25);
 30881: ctx.closePath();
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.closePath.nextpoint.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.closePath.nextpoint</p>
 30881: <canvas id="c390" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_closePath_nextpoint() {
 30881: 
 30881: var canvas = document.getElementById('c390');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(-100, 25);
 30881: ctx.lineTo(-100, -1000);
 30881: ctx.closePath();
 30881: ctx.lineTo(1000, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.closed.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.closed.basic</p>
 30881: <canvas id="c391" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_closed_basic() {
 30881: 
 30881: var canvas = document.getElementById('c391');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.closed.unaffected.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.closed.unaffected</p>
 30881: <canvas id="c392" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_closed_unaffected() {
 30881: 
 30881: var canvas = document.getElementById('c392');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#00f';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 90,10, 0,255,0,255, 0);
 30881: isPixel(ctx, 10,40, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.overlap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.overlap</p>
 30881: <canvas id="c393" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_overlap() {
 30881: 
 30881: var canvas = document.getElementById('c393');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.closePath();
 30881: ctx.rect(10, 10, 80, 30);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,127,0,255, 1);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.winding.add.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.winding.add</p>
 30881: <canvas id="c394" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_winding_add() {
 30881: 
 30881: var canvas = document.getElementById('c394');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.lineTo(-10, -10);
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.winding.subtract.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.winding.subtract.1</p>
 30881: <canvas id="c395" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_winding_subtract_1() {
 30881: 
 30881: var canvas = document.getElementById('c395');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.lineTo(-10, -10);
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.winding.subtract.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.winding.subtract.2</p>
 30881: <canvas id="c396" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_winding_subtract_2() {
 30881: 
 30881: var canvas = document.getElementById('c396');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.fill.winding.subtract.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.fill.winding.subtract.3</p>
 30881: <canvas id="c397" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_fill_winding_subtract_3() {
 30881: 
 30881: var canvas = document.getElementById('c397');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.moveTo(-10, -10);
 30881: ctx.lineTo(110, -10);
 30881: ctx.lineTo(110, 60);
 30881: ctx.lineTo(-10, 60);
 30881: ctx.lineTo(-10, -10);
 30881: ctx.lineTo(-20, -20);
 30881: ctx.lineTo(120, -20);
 30881: ctx.lineTo(120, 70);
 30881: ctx.lineTo(-20, 70);
 30881: ctx.lineTo(-20, -20);
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(100, 0);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.initial.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.initial</p>
 30881: <canvas id="c398" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_initial() {
 30881: 
 30881: var canvas = document.getElementById('c398');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.closePath();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.arc.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.arc</p>
 30881: <!-- Testing: isPointInPath() works on arcs -->
 30881: <canvas id="c399" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_arc() {
 30881: 
 30881: var canvas = document.getElementById('c399');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.arc(50, 25, 10, 0, Math.PI, false);
 30881: ok(ctx.isPointInPath(50, 10) === false, "ctx.isPointInPath(50, 10) === false");
 30881: ok(ctx.isPointInPath(50, 20) === false, "ctx.isPointInPath(50, 20) === false");
 30881: ok(ctx.isPointInPath(50, 30) === true, "ctx.isPointInPath(50, 30) === true");
 30881: ok(ctx.isPointInPath(50, 40) === false, "ctx.isPointInPath(50, 40) === false");
 30881: ok(ctx.isPointInPath(30, 20) === false, "ctx.isPointInPath(30, 20) === false");
 30881: ok(ctx.isPointInPath(70, 20) === false, "ctx.isPointInPath(70, 20) === false");
 30881: ok(ctx.isPointInPath(30, 30) === false, "ctx.isPointInPath(30, 30) === false");
 30881: ok(ctx.isPointInPath(70, 30) === false, "ctx.isPointInPath(70, 30) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.basic.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.basic.1</p>
 30881: <!-- Testing: isPointInPath() detects whether the point is inside the path -->
 30881: <canvas id="c400" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_basic_1() {
 30881: 
 30881: var canvas = document.getElementById('c400');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, 0, 20, 20);
 30881: ok(ctx.isPointInPath(10, 10) === true, "ctx.isPointInPath(10, 10) === true");
 30881: ok(ctx.isPointInPath(30, 10) === false, "ctx.isPointInPath(30, 10) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.basic.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.basic.2</p>
 30881: <!-- Testing: isPointInPath() detects whether the point is inside the path -->
 30881: <canvas id="c401" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_basic_2() {
 30881: 
 30881: var canvas = document.getElementById('c401');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(20, 0, 20, 20);
 30881: ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 30881: ok(ctx.isPointInPath(30, 10) === true, "ctx.isPointInPath(30, 10) === true");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.bezier.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.bezier</p>
 30881: <!-- Testing: isPointInPath() works on Bezier curves -->
 30881: <canvas id="c402" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_bezier() {
 30881: 
 30881: var canvas = document.getElementById('c402');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.moveTo(25, 25);
 30881: ctx.bezierCurveTo(50, -50, 50, 100, 75, 25);
 30881: ok(ctx.isPointInPath(25, 20) == false, "ctx.isPointInPath(25, 20) == false");
 30881: ok(ctx.isPointInPath(25, 30) == false, "ctx.isPointInPath(25, 30) == false");
 30881: ok(ctx.isPointInPath(30, 20) == true, "ctx.isPointInPath(30, 20) == true");
 30881: ok(ctx.isPointInPath(30, 30) == false, "ctx.isPointInPath(30, 30) == false");
 30881: ok(ctx.isPointInPath(40, 2) == false, "ctx.isPointInPath(40, 2) == false");
 30881: ok(ctx.isPointInPath(40, 20) == true, "ctx.isPointInPath(40, 20) == true");
 30881: ok(ctx.isPointInPath(40, 30) == false, "ctx.isPointInPath(40, 30) == false");
 30881: ok(ctx.isPointInPath(40, 47) == false, "ctx.isPointInPath(40, 47) == false");
 30881: ok(ctx.isPointInPath(45, 20) == true, "ctx.isPointInPath(45, 20) == true");
 30881: ok(ctx.isPointInPath(45, 30) == false, "ctx.isPointInPath(45, 30) == false");
 30881: ok(ctx.isPointInPath(55, 20) == false, "ctx.isPointInPath(55, 20) == false");
 30881: ok(ctx.isPointInPath(55, 30) == true, "ctx.isPointInPath(55, 30) == true");
 30881: ok(ctx.isPointInPath(60, 2) == false, "ctx.isPointInPath(60, 2) == false");
 30881: ok(ctx.isPointInPath(60, 20) == false, "ctx.isPointInPath(60, 20) == false");
 30881: ok(ctx.isPointInPath(60, 30) == true, "ctx.isPointInPath(60, 30) == true");
 30881: ok(ctx.isPointInPath(60, 47) == false, "ctx.isPointInPath(60, 47) == false");
 30881: ok(ctx.isPointInPath(70, 20) == false, "ctx.isPointInPath(70, 20) == false");
 30881: ok(ctx.isPointInPath(70, 30) == true, "ctx.isPointInPath(70, 30) == true");
 30881: ok(ctx.isPointInPath(75, 20) == false, "ctx.isPointInPath(75, 20) == false");
 30881: ok(ctx.isPointInPath(75, 30) == false, "ctx.isPointInPath(75, 30) == false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.bigarc.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.bigarc</p>
 30881: <!-- Testing: isPointInPath() works on unclosed arcs larger than 2pi -->
 30881: <canvas id="c403" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_bigarc() {
 30881: 
 30881: var canvas = document.getElementById('c403');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.arc(50, 25, 10, 0, 7, false);
 30881: ok(ctx.isPointInPath(50, 10) === false, "ctx.isPointInPath(50, 10) === false");
 30881: ok(ctx.isPointInPath(50, 20) === true, "ctx.isPointInPath(50, 20) === true");
 30881: ok(ctx.isPointInPath(50, 30) === true, "ctx.isPointInPath(50, 30) === true");
 30881: ok(ctx.isPointInPath(50, 40) === false, "ctx.isPointInPath(50, 40) === false");
 30881: ok(ctx.isPointInPath(30, 20) === false, "ctx.isPointInPath(30, 20) === false");
 30881: ok(ctx.isPointInPath(70, 20) === false, "ctx.isPointInPath(70, 20) === false");
 30881: ok(ctx.isPointInPath(30, 30) === false, "ctx.isPointInPath(30, 30) === false");
 30881: ok(ctx.isPointInPath(70, 30) === false, "ctx.isPointInPath(70, 30) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.edge.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.edge</p>
 30881: <!-- Testing: isPointInPath() counts points on the path as being inside -->
 30881: <canvas id="c404" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_edge() {
 30881: 
 30881: var canvas = document.getElementById('c404');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, 0, 20, 20);
 72431: 
 30881: ok(ctx.isPointInPath(0, 0) === true, "ctx.isPointInPath(0, 0) === true");
 30881: ok(ctx.isPointInPath(10, 0) === true, "ctx.isPointInPath(10, 0) === true");
 30881: ok(ctx.isPointInPath(20, 0) === true, "ctx.isPointInPath(20, 0) === true");
 30881: ok(ctx.isPointInPath(20, 10) === true, "ctx.isPointInPath(20, 10) === true");
 30881: ok(ctx.isPointInPath(20, 20) === true, "ctx.isPointInPath(20, 20) === true");
 30881: ok(ctx.isPointInPath(10, 20) === true, "ctx.isPointInPath(10, 20) === true");
 30881: ok(ctx.isPointInPath(0, 20) === true, "ctx.isPointInPath(0, 20) === true");
 30881: ok(ctx.isPointInPath(0, 10) === true, "ctx.isPointInPath(0, 10) === true");
 30881: ok(ctx.isPointInPath(10, -0.01) === false, "ctx.isPointInPath(10, -0.01) === false");
 30881: ok(ctx.isPointInPath(10, 20.01) === false, "ctx.isPointInPath(10, 20.01) === false");
 30881: ok(ctx.isPointInPath(-0.01, 10) === false, "ctx.isPointInPath(-0.01, 10) === false");
 30881: ok(ctx.isPointInPath(20.01, 10) === false, "ctx.isPointInPath(20.01, 10) === false");
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.empty</p>
 30881: <!-- Testing: isPointInPath() works when there is no path -->
 30881: <canvas id="c405" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_empty() {
 30881: 
 30881: var canvas = document.getElementById('c405');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.isPointInPath(0, 0) === false, "ctx.isPointInPath(0, 0) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.nonfinite</p>
 30881: <!-- Testing: isPointInPath() returns false for non-finite arguments -->
 30881: <canvas id="c406" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c406');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.rect(-100, -50, 200, 100);
 30881: ok(ctx.isPointInPath(Infinity, 0) === false, "ctx.isPointInPath(Infinity, 0) === false");
 30881: ok(ctx.isPointInPath(-Infinity, 0) === false, "ctx.isPointInPath(-Infinity, 0) === false");
 30881: ok(ctx.isPointInPath(NaN, 0) === false, "ctx.isPointInPath(NaN, 0) === false");
 30881: ok(ctx.isPointInPath(0, Infinity) === false, "ctx.isPointInPath(0, Infinity) === false");
 30881: ok(ctx.isPointInPath(0, -Infinity) === false, "ctx.isPointInPath(0, -Infinity) === false");
 30881: ok(ctx.isPointInPath(0, NaN) === false, "ctx.isPointInPath(0, NaN) === false");
 30881: ok(ctx.isPointInPath(NaN, NaN) === false, "ctx.isPointInPath(NaN, NaN) === false");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.outside</p>
 30881: <!-- Testing: isPointInPath() works on paths outside the canvas -->
 30881: <canvas id="c407" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_outside() {
 30881: 
 30881: var canvas = document.getElementById('c407');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, -100, 20, 20);
 30881: ctx.rect(20, -10, 20, 20);
 30881: ok(ctx.isPointInPath(10, -110) === false, "ctx.isPointInPath(10, -110) === false");
 30881: ok(ctx.isPointInPath(10, -90) === true, "ctx.isPointInPath(10, -90) === true");
 30881: ok(ctx.isPointInPath(10, -70) === false, "ctx.isPointInPath(10, -70) === false");
 30881: ok(ctx.isPointInPath(30, -20) === false, "ctx.isPointInPath(30, -20) === false");
 30881: ok(ctx.isPointInPath(30, 0) === true, "ctx.isPointInPath(30, 0) === true");
 30881: ok(ctx.isPointInPath(30, 20) === false, "ctx.isPointInPath(30, 20) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.subpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.subpath</p>
 30881: <!-- Testing: isPointInPath() uses the current path, not just the subpath -->
 30881: <canvas id="c408" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_subpath() {
 30881: 
 30881: var canvas = document.getElementById('c408');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, 0, 20, 20);
 30881: ctx.beginPath();
 30881: ctx.rect(20, 0, 20, 20);
 30881: ctx.closePath();
 30881: ctx.rect(40, 0, 20, 20);
 30881: ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 30881: ok(ctx.isPointInPath(30, 10) === true, "ctx.isPointInPath(30, 10) === true");
 30881: ok(ctx.isPointInPath(50, 10) === true, "ctx.isPointInPath(50, 10) === true");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.transform.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.transform.1 - bug 405300</p>
 30881: <!-- Testing: isPointInPath() handles transformations correctly -->
 30881: <canvas id="c409" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_transform_1() {
 30881: 
 30881: var canvas = document.getElementById('c409');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.translate(50, 0);
 30881: ctx.rect(0, 0, 20, 20);
 30881: ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 71198: ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 30881: ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 71198: ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
 71198: ok(ctx.isPointInPath(69, 10) === true, "ctx.isPointInPath(69, 10) === true");
 30881: ok(ctx.isPointInPath(71, 10) === false, "ctx.isPointInPath(71, 10) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.transform.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.transform.2 - bug 405300</p>
 30881: <!-- Testing: isPointInPath() handles transformations correctly -->
 30881: <canvas id="c410" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_transform_2() {
 30881: 
 30881: var canvas = document.getElementById('c410');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(50, 0, 20, 20);
 30881: ctx.translate(50, 0);
 30881: ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 71198: ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 30881: ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 71198: ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
 71198: ok(ctx.isPointInPath(69, 10) === true, "ctx.isPointInPath(69, 10) === true");
 30881: ok(ctx.isPointInPath(71, 10) === false, "ctx.isPointInPath(71, 10) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.transform.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.transform.3 - bug 405300</p>
 30881: <!-- Testing: isPointInPath() handles transformations correctly -->
 30881: <canvas id="c411" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_transform_3() {
 30881: 
 30881: var canvas = document.getElementById('c411');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.scale(-1, 1);
 30881: ctx.rect(-70, 0, 20, 20);
 30881: ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 30881: ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 30881: ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 71198: ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
 71198: ok(ctx.isPointInPath(69, 10) === true, "ctx.isPointInPath(69, 10) === true");
 30881: ok(ctx.isPointInPath(71, 10) === false, "ctx.isPointInPath(71, 10) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.unclosed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.unclosed</p>
 30881: <!-- Testing: isPointInPath() works on unclosed subpaths -->
 30881: <canvas id="c412" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_unclosed() {
 30881: 
 30881: var canvas = document.getElementById('c412');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(20, 0);
 30881: ctx.lineTo(20, 20);
 30881: ctx.lineTo(0, 20);
 30881: ok(ctx.isPointInPath(10, 10) === true, "ctx.isPointInPath(10, 10) === true");
 30881: ok(ctx.isPointInPath(30, 10) === false, "ctx.isPointInPath(30, 10) === false");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.isPointInPath.winding.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.isPointInPath.winding</p>
 30881: <!-- Testing: isPointInPath() uses the non-zero winding number rule -->
 30881: <canvas id="c413" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_path_isPointInPath_winding() {
 30881: 
 30881: var canvas = document.getElementById('c413');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Create a square ring, using opposite windings to make a hole in the centre
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(50, 0);
 30881: ctx.lineTo(50, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.lineTo(0, 0);
 30881: ctx.lineTo(10, 10);
 30881: ctx.lineTo(10, 40);
 30881: ctx.lineTo(40, 40);
 30881: ctx.lineTo(40, 10);
 30881: ctx.lineTo(10, 10);
 30881: 
 30881: ok(ctx.isPointInPath(5, 5) === true, "ctx.isPointInPath(5, 5) === true");
 30881: ok(ctx.isPointInPath(25, 5) === true, "ctx.isPointInPath(25, 5) === true");
 30881: ok(ctx.isPointInPath(45, 5) === true, "ctx.isPointInPath(45, 5) === true");
 30881: ok(ctx.isPointInPath(5, 25) === true, "ctx.isPointInPath(5, 25) === true");
 30881: ok(ctx.isPointInPath(25, 25) === false, "ctx.isPointInPath(25, 25) === false");
 30881: ok(ctx.isPointInPath(45, 25) === true, "ctx.isPointInPath(45, 25) === true");
 30881: ok(ctx.isPointInPath(5, 45) === true, "ctx.isPointInPath(5, 45) === true");
 30881: ok(ctx.isPointInPath(25, 45) === true, "ctx.isPointInPath(25, 45) === true");
 30881: ok(ctx.isPointInPath(45, 45) === true, "ctx.isPointInPath(45, 45) === true");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.lineTo.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.lineTo.basic</p>
 30881: <canvas id="c414" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_lineTo_basic() {
 30881: 
 30881: var canvas = document.getElementById('c414');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.lineTo(100, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.lineTo.emptysubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.lineTo.emptysubpath</p>
 30881: <canvas id="c415" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_lineTo_emptysubpath() {
 30881: 
 30881: var canvas = document.getElementById('c415');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.lineTo(0, 25);
 30881: ctx.lineTo(100, 25);
 30881: ctx.stroke();
 30881: todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.lineTo.nextpoint.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.lineTo.nextpoint</p>
 30881: <canvas id="c416" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_lineTo_nextpoint() {
 30881: 
 30881: var canvas = document.getElementById('c416');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-100, -100);
 30881: ctx.lineTo(0, 25);
 30881: ctx.lineTo(100, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.lineTo.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.lineTo.nonfinite</p>
 30881: <!-- Testing: lineTo() with Infinity/NaN is ignored -->
 30881: <canvas id="c417" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_lineTo_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c417');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.lineTo(Infinity, 50);
 30881: ctx.lineTo(-Infinity, 50);
 30881: ctx.lineTo(NaN, 50);
 30881: ctx.lineTo(0, Infinity);
 30881: ctx.lineTo(0, -Infinity);
 30881: ctx.lineTo(0, NaN);
 30881: ctx.lineTo(Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.moveTo.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.moveTo.basic</p>
 30881: <canvas id="c418" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_moveTo_basic() {
 30881: 
 30881: var canvas = document.getElementById('c418');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.rect(0, 0, 10, 50);
 30881: ctx.moveTo(100, 0);
 30881: ctx.lineTo(10, 0);
 30881: ctx.lineTo(10, 50);
 30881: ctx.lineTo(100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 90,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.moveTo.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.moveTo.multiple</p>
 30881: <canvas id="c419" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_moveTo_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c419');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.moveTo(0, 25);
 30881: ctx.moveTo(100, 25);
 30881: ctx.moveTo(0, 25);
 30881: ctx.lineTo(100, 25);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.moveTo.newsubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.moveTo.newsubpath</p>
 30881: <canvas id="c420" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_moveTo_newsubpath() {
 30881: 
 30881: var canvas = document.getElementById('c420');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 0);
 30881: ctx.moveTo(100, 0);
 30881: ctx.moveTo(100, 50);
 30881: ctx.moveTo(0, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.moveTo.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.moveTo.nonfinite</p>
 30881: <!-- Testing: moveTo() with Infinity/NaN is ignored -->
 30881: <canvas id="c421" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_moveTo_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c421');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.moveTo(Infinity, 50);
 30881: ctx.moveTo(-Infinity, 50);
 30881: ctx.moveTo(NaN, 50);
 30881: ctx.moveTo(0, Infinity);
 30881: ctx.moveTo(0, -Infinity);
 30881: ctx.moveTo(0, NaN);
 30881: ctx.moveTo(Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.quadraticCurveTo.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.quadraticCurveTo.basic</p>
 30881: <canvas id="c422" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_quadraticCurveTo_basic() {
 30881: 
 30881: var canvas = document.getElementById('c422');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.moveTo(0, 25);
 30881: ctx.quadraticCurveTo(100, 25, 100, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.quadraticCurveTo.emptysubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.quadraticCurveTo.emptysubpath</p>
 30881: <canvas id="c423" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_quadraticCurveTo_emptysubpath() {
 30881: 
 30881: var canvas = document.getElementById('c423');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.beginPath();
 30881: ctx.quadraticCurveTo(0, 25, 0, 25);
 30881: ctx.quadraticCurveTo(100, 25, 100, 25);
 30881: ctx.stroke();
 30881: todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.quadraticCurveTo.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.quadraticCurveTo.nonfinite</p>
 30881: <!-- Testing: quadraticCurveTo() with Infinity/NaN is ignored -->
 30881: <canvas id="c424" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_quadraticCurveTo_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c424');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.quadraticCurveTo(Infinity, 50, 0, 50);
 30881: ctx.quadraticCurveTo(-Infinity, 50, 0, 50);
 30881: ctx.quadraticCurveTo(NaN, 50, 0, 50);
 30881: ctx.quadraticCurveTo(0, Infinity, 0, 50);
 30881: ctx.quadraticCurveTo(0, -Infinity, 0, 50);
 30881: ctx.quadraticCurveTo(0, NaN, 0, 50);
 30881: ctx.quadraticCurveTo(0, 50, Infinity, 50);
 30881: ctx.quadraticCurveTo(0, 50, -Infinity, 50);
 30881: ctx.quadraticCurveTo(0, 50, NaN, 50);
 30881: ctx.quadraticCurveTo(0, 50, 0, Infinity);
 30881: ctx.quadraticCurveTo(0, 50, 0, -Infinity);
 30881: ctx.quadraticCurveTo(0, 50, 0, NaN);
 30881: ctx.quadraticCurveTo(Infinity, Infinity, 0, 50);
 30881: ctx.quadraticCurveTo(Infinity, Infinity, Infinity, 50);
 30881: ctx.quadraticCurveTo(Infinity, Infinity, Infinity, Infinity);
 30881: ctx.quadraticCurveTo(Infinity, Infinity, 0, Infinity);
 30881: ctx.quadraticCurveTo(Infinity, 50, Infinity, 50);
 30881: ctx.quadraticCurveTo(Infinity, 50, Infinity, Infinity);
 30881: ctx.quadraticCurveTo(Infinity, 50, 0, Infinity);
 30881: ctx.quadraticCurveTo(0, Infinity, Infinity, 50);
 30881: ctx.quadraticCurveTo(0, Infinity, Infinity, Infinity);
 30881: ctx.quadraticCurveTo(0, Infinity, 0, Infinity);
 30881: ctx.quadraticCurveTo(0, 50, Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.quadraticCurveTo.scaled.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.quadraticCurveTo.scaled</p>
 30881: <canvas id="c425" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_quadraticCurveTo_scaled() {
 30881: 
 30881: var canvas = document.getElementById('c425');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.scale(1000, 1000);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 0.055;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-1, 1.05);
 30881: ctx.quadraticCurveTo(0, -1, 1.2, 1.05);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.quadraticCurveTo.shape.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.quadraticCurveTo.shape</p>
 30881: <canvas id="c426" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_quadraticCurveTo_shape() {
 30881: 
 30881: var canvas = document.getElementById('c426');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 55;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-1000, 1050);
 30881: ctx.quadraticCurveTo(0, -1000, 1200, 1050);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.basic</p>
 30881: <canvas id="c427" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_basic() {
 30881: 
 30881: var canvas = document.getElementById('c427');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.closed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.closed</p>
 30881: <canvas id="c428" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_closed() {
 30881: 
 30881: var canvas = document.getElementById('c428');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'miter';
 30881: ctx.rect(100, 50, 100, 100);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.end.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.end.1</p>
 30881: <canvas id="c429" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_end_1() {
 30881: 
 30881: var canvas = document.getElementById('c429');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.rect(200, 100, 400, 1000);
 30881: ctx.lineTo(-2000, -1000);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.end.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.end.2</p>
 30881: <canvas id="c430" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_end_2() {
 30881: 
 30881: var canvas = document.getElementById('c430');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 450;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.rect(150, 150, 2000, 2000);
 30881: ctx.lineTo(160, 160);
 30881: ctx.stroke();
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.negative</p>
 30881: <canvas id="c431" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_negative() {
 30881: 
 30881: var canvas = document.getElementById('c431');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.beginPath();
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.rect(0, 0, 50, 25);
 30881: ctx.rect(100, 0, -50, 25);
 30881: ctx.rect(0, 50, 50, -25);
 30881: ctx.rect(100, 50, -50, -25);
 30881: ctx.fill();
 30881: isPixel(ctx, 25,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,37, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.newsubpath.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.newsubpath</p>
 30881: <canvas id="c432" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_newsubpath() {
 30881: 
 30881: var canvas = document.getElementById('c432');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.beginPath();
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(-100, 25);
 30881: ctx.lineTo(-50, 25);
 30881: ctx.rect(200, 25, 1, 1);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.nonfinite</p>
 30881: <!-- Testing: rect() with Infinity/NaN is ignored -->
 30881: <canvas id="c433" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c433');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.moveTo(0, 0);
 30881: ctx.lineTo(100, 0);
 30881: ctx.rect(Infinity, 50, 1, 1);
 30881: ctx.rect(-Infinity, 50, 1, 1);
 30881: ctx.rect(NaN, 50, 1, 1);
 30881: ctx.rect(0, Infinity, 1, 1);
 30881: ctx.rect(0, -Infinity, 1, 1);
 30881: ctx.rect(0, NaN, 1, 1);
 30881: ctx.rect(0, 50, Infinity, 1);
 30881: ctx.rect(0, 50, -Infinity, 1);
 30881: ctx.rect(0, 50, NaN, 1);
 30881: ctx.rect(0, 50, 1, Infinity);
 30881: ctx.rect(0, 50, 1, -Infinity);
 30881: ctx.rect(0, 50, 1, NaN);
 30881: ctx.rect(Infinity, Infinity, 1, 1);
 30881: ctx.rect(Infinity, Infinity, Infinity, 1);
 30881: ctx.rect(Infinity, Infinity, Infinity, Infinity);
 30881: ctx.rect(Infinity, Infinity, 1, Infinity);
 30881: ctx.rect(Infinity, 50, Infinity, 1);
 30881: ctx.rect(Infinity, 50, Infinity, Infinity);
 30881: ctx.rect(Infinity, 50, 1, Infinity);
 30881: ctx.rect(0, Infinity, Infinity, 1);
 30881: ctx.rect(0, Infinity, Infinity, Infinity);
 30881: ctx.rect(0, Infinity, 1, Infinity);
 30881: ctx.rect(0, 50, Infinity, Infinity);
 30881: ctx.lineTo(100, 50);
 30881: ctx.lineTo(0, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 90,45, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.selfintersect.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.selfintersect</p>
 30881: <canvas id="c434" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_rect_selfintersect() {
 30881: 
 30881: var canvas = document.getElementById('c434');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 90;
 30881: ctx.beginPath();
 30881: ctx.rect(45, 20, 10, 10);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.winding.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.winding</p>
 30881: <canvas id="c435" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_winding() {
 30881: 
 30881: var canvas = document.getElementById('c435');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.beginPath();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.rect(0, 0, 50, 50);
 30881: ctx.rect(100, 50, -50, -50);
 30881: ctx.rect(0, 25, 100, -25);
 30881: ctx.rect(100, 25, -100, 25);
 30881: ctx.fill();
 30881: isPixel(ctx, 25,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,37, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.1</p>
 30881: <canvas id="c436" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_1() {
 30881: 
 30881: var canvas = document.getElementById('c436');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.rect(0, 50, 100, 0);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.2</p>
 30881: <canvas id="c437" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_2() {
 30881: 
 30881: var canvas = document.getElementById('c437');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 100;
 30881: ctx.beginPath();
 30881: ctx.rect(50, -100, 0, 250);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.3</p>
 30881: <canvas id="c438" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_3() {
 30881: 
 30881: var canvas = document.getElementById('c438');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 50649: if (!IsD2DEnabled()) {
 50649:     // Disabled for D2D until we can figure out Bug 587554.
 30881:     ctx.strokeStyle = '#f00';
 30881:     ctx.lineWidth = 100;
 30881:     ctx.beginPath();
 30881:     ctx.rect(50, 25, 0, 0);
 30881:     ctx.stroke();
 30881:     isPixel(ctx, 50,25, 0,0,0,0, 0);
 50649: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.4</p>
 30881: <canvas id="c439" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_4() {
 30881: 
 30881: var canvas = document.getElementById('c439');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.rect(100, 25, 0, 0);
 30881: ctx.lineTo(0, 25);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.5</p>
 30881: <canvas id="c440" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_5() {
 30881: 
 30881: var canvas = document.getElementById('c440');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(0, 0);
 30881: ctx.rect(100, 25, 0, 0);
 30881: ctx.stroke();
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.rect.zero.6.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.rect.zero.6</p>
 30881: <canvas id="c441" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_rect_zero_6() {
 30881: 
 30881: var canvas = document.getElementById('c441');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineJoin = 'miter';
 30881: ctx.miterLimit = 1.5;
 30881: ctx.lineWidth = 200;
 30881: ctx.beginPath();
 30881: ctx.rect(100, 25, 1000, 0);
 30881: ctx.stroke();
 30881: todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.empty</p>
 30881: <!-- Testing: Empty subpaths are not stroked -->
 30881: <canvas id="c442" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_empty() {
 30881: 
 30881: var canvas = document.getElementById('c442');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(40, 25);
 30881: ctx.moveTo(60, 25);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.overlap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.overlap</p>
 30881: <!-- Testing: Stroked subpaths are combined before being drawn -->
 30881: <canvas id="c443" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_overlap() {
 30881: 
 30881: var canvas = document.getElementById('c443');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#000';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = 'rgba(0, 255, 0, 0.5)';
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(0, 20);
 30881: ctx.lineTo(100, 20);
 30881: ctx.moveTo(0, 30);
 30881: ctx.lineTo(100, 30);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,127,0,255, 1);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.arc.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.arc</p>
 30881: <!-- Testing: Zero-length line segments from arcTo and arc are removed before stroking -->
 30881: <canvas id="c444" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_arc() {
 30881: 
 30881: var canvas = document.getElementById('c444');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.arcTo(50, 25, 150, 25, 10);
 30881: ctx.stroke();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.arc(50, 25, 10, 0, 0, false);
 30881: ctx.stroke();
 30881: 
 30881: todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.closed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.closed</p>
 30881: <!-- Testing: Zero-length line segments from closed paths are removed before stroking -->
 30881: <canvas id="c445" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_closed() {
 30881: 
 30881: var canvas = document.getElementById('c445');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.lineTo(50, 25);
 30881: ctx.closePath();
 30881: ctx.stroke();
 30881: 
 82419: if (IsAzureEnabled() && IsAzureSkia()) {
 82419:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: } else {
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.corner.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.corner</p>
 30881: <!-- Testing: Zero-length line segments are removed before stroking with miters -->
 30881: <canvas id="c446" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_corner() {
 30881: 
 30881: var canvas = document.getElementById('c446');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 400;
 30881: ctx.lineJoin = 'miter';
 30881: ctx.miterLimit = 1.4;
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(-1000, 200, 0, 0);
 30881: ctx.lineTo(-100, 200);
 30881: ctx.lineTo(-100, 200);
 30881: ctx.lineTo(-100, 200);
 30881: ctx.lineTo(-100, 1000);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.curve.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.curve</p>
 30881: <!-- Testing: Zero-length line segments from quadraticCurveTo and bezierCurveTo are removed before stroking -->
 30881: <canvas id="c447" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_curve() {
 30881: 
 30881: var canvas = document.getElementById('c447');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.quadraticCurveTo(50, 25, 50, 25);
 30881: ctx.stroke();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.bezierCurveTo(50, 25, 50, 25, 50, 25);
 30881: ctx.stroke();
 30881: 
 82419: if (IsAzureEnabled() && IsAzureSkia()) {
 82419:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: } else {
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.line.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.line</p>
 30881: <!-- Testing: Zero-length line segments from lineTo are removed before stroking -->
 30881: <canvas id="c448" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_line() {
 30881: 
 30881: var canvas = document.getElementById('c448');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.moveTo(50, 25);
 30881: ctx.lineTo(50, 25);
 30881: ctx.stroke();
 30881: 
 82419: if (IsAzureEnabled() && IsAzureSkia()) {
 82419:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: } else {
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.prune.rect.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.prune.rect</p>
 30881: <!-- Testing: Zero-length line segments from rect and strokeRect are removed before stroking -->
 30881: <canvas id="c449" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_path_stroke_prune_rect() {
 30881: 
 30881: var canvas = document.getElementById('c449');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 100;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(50, 25, 0, 0);
 30881: ctx.stroke();
 30881: 
 30881: ctx.strokeRect(50, 25, 0, 0);
 30881: 
 82419: if (IsAzureEnabled() && IsAzureSkia()) {
 82419:   isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: } else {
 30881:   todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 82419: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.scale1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.scale1</p>
 30881: <!-- Testing: Stroke line widths are scaled by the current transformation matrix -->
 30881: <canvas id="c450" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_scale1() {
 30881: 
 30881: var canvas = document.getElementById('c450');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(25, 12.5, 50, 25);
 30881: ctx.save();
 30881: ctx.scale(50, 25);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(-25, -12.5, 150, 75);
 30881: ctx.save();
 30881: ctx.scale(50, 25);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.scale2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.scale2</p>
 30881: <!-- Testing: Stroke line widths are scaled by the current transformation matrix -->
 30881: <canvas id="c451" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_scale2() {
 30881: 
 30881: var canvas = document.getElementById('c451');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 50652: if (!IsD2DEnabled()) {
 50652:     // On D2D a rasterization bug causes a small discrepancy here. See bug 587316
 30881:     ctx.fillStyle = '#f00';
 30881:     ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881:     ctx.beginPath();
 30881:     ctx.rect(25, 12.5, 50, 25);
 30881:     ctx.save();
 30881:     ctx.rotate(Math.PI/2);
 30881:     ctx.scale(25, 50);
 30881:     ctx.strokeStyle = '#0f0';
 30881:     ctx.stroke();
 30881:     ctx.restore();
 30881: 
 30881:     ctx.beginPath();
 30881:     ctx.rect(-25, -12.5, 150, 75);
 30881:     ctx.save();
 30881:     ctx.rotate(Math.PI/2);
 30881:     ctx.scale(25, 50);
 30881:     ctx.strokeStyle = '#f00';
 30881:     ctx.stroke();
 30881:     ctx.restore();
 30881: 
 30881:     isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881:     isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881:     isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881:     isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881:     isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881:     isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881:     isPixel(ctx, 99,49, 0,255,0,255, 0);
 50652: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.skew.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.skew</p>
 30881: <!-- Testing: Strokes lines are skewed by the current transformation matrix -->
 30881: <canvas id="c452" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_skew() {
 30881: 
 30881: var canvas = document.getElementById('c452');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.moveTo(49, -50);
 30881: ctx.lineTo(201, -50);
 30881: ctx.rotate(Math.PI/4);
 30881: ctx.scale(1, 283);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.translate(-150, 0);
 30881: ctx.moveTo(49, -50);
 30881: ctx.lineTo(199, -50);
 30881: ctx.rotate(Math.PI/4);
 30881: ctx.scale(1, 142);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.translate(-150, 0);
 30881: ctx.moveTo(49, -50);
 30881: ctx.lineTo(199, -50);
 30881: ctx.rotate(Math.PI/4);
 30881: ctx.scale(1, 142);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.stroke();
 30881: ctx.restore();
 30881: 
 30881: isPixel(ctx, 0,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,0, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 0,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,49, 0,255,0,255, 0);
 30881: isPixel(ctx, 99,49, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.unaffected.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.unaffected</p>
 30881: <!-- Testing: Stroking does not start a new path or subpath -->
 30881: <canvas id="c453" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_unaffected() {
 30881: 
 30881: var canvas = document.getElementById('c453');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(-100, 25);
 30881: ctx.lineTo(-100, -100);
 30881: ctx.lineTo(200, -100);
 30881: ctx.lineTo(200, 25);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.stroke();
 30881: 
 30881: ctx.closePath();
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.stroke.union.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.stroke.union</p>
 30881: <!-- Testing: Strokes in opposite directions are unioned, not subtracted -->
 30881: <canvas id="c454" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_stroke_union() {
 30881: 
 30881: var canvas = document.getElementById('c454');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 40;
 30881: ctx.moveTo(0, 10);
 30881: ctx.lineTo(100, 10);
 30881: ctx.moveTo(100, 40);
 30881: ctx.lineTo(0, 40);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.transformation.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.transformation.basic</p>
 30881: <canvas id="c455" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_transformation_basic() {
 30881: 
 30881: var canvas = document.getElementById('c455');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(-100, 0);
 30881: ctx.rect(100, 0, 100, 50);
 30881: ctx.translate(0, -100);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.transformation.changing.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.transformation.changing</p>
 30881: <!-- Testing: Transformations are applied while building paths, not when drawing -->
 30881: <canvas id="c456" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_transformation_changing() {
 30881: 
 30881: var canvas = document.getElementById('c456');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.moveTo(0, 0);
 30881: ctx.translate(100, 0);
 30881: ctx.lineTo(0, 0);
 30881: ctx.translate(0, 50);
 30881: ctx.lineTo(0, 0);
 30881: ctx.translate(-100, 0);
 30881: ctx.lineTo(0, 0);
 30881: ctx.translate(1000, 1000);
 30881: ctx.rotate(Math.PI/2);
 30881: ctx.scale(0.1, 0.1);
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.path.transformation.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.path.transformation.multiple</p>
 30881: <canvas id="c457" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_path_transformation_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c457');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.fill();
 30881: ctx.translate(-100, 0);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.animated.gif.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.animated.gif</p>
 30881: <!-- Testing: createPattern() of an animated GIF draws the first frame -->
 30881: <canvas id="c458" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: var canvas458 = document.getElementById('c458');
 30881: var ctx458 = canvas458.getContext('2d');
 30881: var isDone_test_2d_pattern_animated_gif = false;
 30881: 
 30881: function test_2d_pattern_animated_gif() {
 30881: 
 30881: deferTest();
 30881: setTimeout(function () {
 30881:     var pattern = ctx458.createPattern(document.getElementById('anim-gr_2.gif'), 'repeat');
 30881:     ctx458.fillStyle = pattern;
 30881:     ctx458.fillRect(0, 0, 50, 50);
 30881:     setTimeout(wrapFunction(function () {
 30881:         ctx458.fillRect(50, 0, 50, 50);
 32424:         isPixel(ctx458, 25,25, 0,255,0,255, 2);
 32424:         isPixel(ctx458, 75,25, 0,255,0,255, 2);
 30881: 		isDone_test_2d_pattern_animated_gif = true;
 30881:     }), 2500);
 30881: }, 2500);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_anim-gr.gif" id="anim-gr_2.gif" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.basic.canvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.basic.canvas</p>
 30881: <canvas id="c459" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_basic_canvas() {
 30881: 
 30881: var canvas = document.getElementById('c459');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: var pattern = ctx.createPattern(canvas2, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.basic.image.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.basic.image</p>
 30881: <canvas id="c460" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_basic_image() {
 30881: 
 30881: var canvas = document.getElementById('c460');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var img = document.getElementById('green_8.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_8.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.basic.nocontext.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.basic.nocontext</p>
 30881: <canvas id="c461" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_basic_nocontext() {
 30881: 
 30881: var canvas = document.getElementById('c461');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var pattern = ctx.createPattern(canvas2, 'no-repeat');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.basic.type.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.basic.type</p>
 30881: <canvas id="c462" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_basic_type() {
 30881: 
 30881: var canvas = document.getElementById('c462');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.CanvasPattern !== undefined, "window.CanvasPattern !== undefined");
 30881: 
 30881: window.CanvasPattern.prototype.thisImplementsCanvasPattern = true;
 30881: 
 30881: var img = document.getElementById('green_9.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ok(pattern.thisImplementsCanvasPattern, "pattern.thisImplementsCanvasPattern");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_9.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.basic.zerocanvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.basic.zerocanvas</p>
 30881: <canvas id="c463" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_basic_zerocanvas() {
 30881: 
 30881: var canvas = document.getElementById('c463');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 80000: canvas.width = 0;
 80000: canvas.height = 10;
 80000: ok(canvas.width === 0, "canvas.width === 0");
 80000: ok(canvas.height === 10, "canvas.height === 10");
 80000: var _thrown = undefined; try {
 80000:   ctx.createPattern(canvas, 'repeat');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 80000: 
 80000: canvas.width = 10;
 80000: canvas.height = 0;
 80000: ok(canvas.width === 10, "canvas.width === 10");
 80000: ok(canvas.height === 0, "canvas.height === 0");
 80000: var _thrown = undefined; try {
 80000:   ctx.createPattern(canvas, 'repeat');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 80000: 
 80000: canvas.width = 0;
 80000: canvas.height = 0;
 80000: ok(canvas.width === 0, "canvas.width === 0");
 80000: ok(canvas.height === 0, "canvas.height === 0");
 80000: var _thrown = undefined; try {
 80000:   ctx.createPattern(canvas, 'repeat');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 80000: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.crosscanvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.crosscanvas</p>
 30881: <canvas id="c464" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_crosscanvas() {
 30881: 
 30881: var canvas = document.getElementById('c464');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('green_10.png');
 30881: 
 30881: var pattern = document.createElement('canvas').getContext('2d').createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_10.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.image.broken.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.image.broken</p>
 30881: <canvas id="c465" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_image_broken() {
 30881: 
 30881: var canvas = document.getElementById('c465');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('broken_2.png');
 30881: todo(img.complete === false, "img.complete === false");
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(img, 'repeat');
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_broken.png" id="broken_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.image.incomplete.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.image.incomplete</p>
 30881: <canvas id="c466" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_image_incomplete() {
 30881: 
 30881: var canvas = document.getElementById('c466');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = new Image();
 30881: todo(img.complete === false, "img.complete === false");
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(img, 'repeat');
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.image.null.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.image.null</p>
 30881: <canvas id="c467" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_image_null() {
 30881: 
 30881: var canvas = document.getElementById('c467');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(null, 'repeat');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.image.string.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.image.string</p>
 30881: <canvas id="c468" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_image_string() {
 30881: 
 30881: var canvas = document.getElementById('c468');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern('image_red.png', 'repeat');
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.image.undefined.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.image.undefined</p>
 30881: <canvas id="c469" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_image_undefined() {
 30881: 
 30881: var canvas = document.getElementById('c469');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(undefined, 'repeat');
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "TypeMismatchError" && _thrown.code == DOMException.TYPE_MISMATCH_ERR, "should throw TypeMismatchError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.modify.canvas1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.modify.canvas1</p>
 30881: <canvas id="c470" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_modify_canvas1() {
 30881: 
 30881: var canvas = document.getElementById('c470');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: var pattern = ctx.createPattern(canvas2, 'no-repeat');
 30881: 
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.modify.canvas2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.modify.canvas2</p>
 30881: <canvas id="c471" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_modify_canvas2() {
 30881: 
 30881: var canvas = document.getElementById('c471');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: var pattern = ctx.createPattern(canvas2, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.modify.image1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.modify.image1</p>
 30881: <canvas id="c472" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: var canvas472 = document.getElementById('c472');
 30881: var ctx472 = canvas472.getContext('2d');
 30881: 
 30881: function test_2d_pattern_modify_image1() {
 30881: 
 30881: var img = document.getElementById('green_11.png');
 30881: var pattern = ctx472.createPattern(img, 'no-repeat');
 30881: deferTest();
 30881: img.onload = wrapFunction(function ()
 30881: {
 30881:     ctx472.fillStyle = pattern;
 30881:     ctx472.fillRect(0, 0, 100, 50);
 30881: 
 30881:     isPixel(ctx472, 1,1, 0,255,0,255, 0);
 30881:     isPixel(ctx472, 98,1, 0,255,0,255, 0);
 30881:     isPixel(ctx472, 1,48, 0,255,0,255, 0);
 30881:     isPixel(ctx472, 98,48, 0,255,0,255, 0);
 30881: });
 30881: img.src = 'image_red.png';
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_11.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.modify.image2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.modify.image2</p>
 30881: <canvas id="c473" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: var canvas473 = document.getElementById('c473');
 30881: var ctx473 = canvas473.getContext('2d');
 30881: 
 30881: function test_2d_pattern_modify_image2() {
 30881: 
 30881: var img = document.getElementById('green_12.png');
 30881: var pattern = ctx473.createPattern(img, 'no-repeat');
 30881: ctx473.fillStyle = pattern;
 30881: ctx473.fillRect(0, 0, 100, 50);
 30881: ctx473.fillStyle = '#00f';
 30881: ctx473.fillRect(0, 0, 100, 50);
 30881: deferTest();
 30881: img.onload = wrapFunction(function ()
 30881: {
 30881:     ctx473.fillStyle = pattern;
 30881:     ctx473.fillRect(0, 0, 100, 50);
 30881: 
 30881:     isPixel(ctx473, 1,1, 0,255,0,255, 0);
 30881:     isPixel(ctx473, 98,1, 0,255,0,255, 0);
 30881:     isPixel(ctx473, 1,48, 0,255,0,255, 0);
 30881:     isPixel(ctx473, 98,48, 0,255,0,255, 0);
 30881: });
 30881: img.src = 'image_red.png';
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_12.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.norepeat.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.norepeat.basic</p>
 30881: <canvas id="c474" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_norepeat_basic() {
 30881: 
 30881: var canvas = document.getElementById('c474');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('green_13.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_13.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.norepeat.coord1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.norepeat.coord1</p>
 30881: <canvas id="c475" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_norepeat_coord1() {
 30881: 
 30881: var canvas = document.getElementById('c475');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: 
 30881: var img = document.getElementById('green_14.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(50, 0);
 30881: ctx.fillRect(-50, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_14.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.norepeat.coord2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.norepeat.coord2</p>
 30881: <canvas id="c476" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_norepeat_coord2() {
 30881: 
 30881: var canvas = document.getElementById('c476');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('green_15.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: 
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(50, 0);
 30881: ctx.fillRect(-50, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green.png" id="green_15.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.norepeat.coord3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.norepeat.coord3</p>
 30881: <canvas id="c477" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_norepeat_coord3() {
 30881: 
 30881: var canvas = document.getElementById('c477');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red_15.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(50, 25);
 30881: ctx.fillRect(-50, -25, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 25);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_15.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.norepeat.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.norepeat.outside</p>
 30881: <canvas id="c478" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_norepeat_outside() {
 30881: 
 30881: var canvas = document.getElementById('c478');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red_16.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: ctx.fillRect(-100, 0, 100, 50);
 30881: ctx.fillRect(0, 50, 100, 50);
 30881: ctx.fillRect(100, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_16.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.orientation.canvas.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.orientation.canvas</p>
 30881: <!-- Testing: Canvas patterns do not get flipped when painted -->
 30881: <canvas id="c479" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_orientation_canvas() {
 30881: 
 30881: var canvas = document.getElementById('c479');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 25);
 30881: ctx2.fillStyle = '#0f0';
 30881: ctx2.fillRect(0, 25, 100, 25);
 30881: 
 30881: var pattern = ctx.createPattern(canvas2, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 25);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.orientation.image.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.orientation.image</p>
 30881: <!-- Testing: Image patterns do not get flipped when painted -->
 30881: <canvas id="c480" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_orientation_image() {
 30881: 
 30881: var canvas = document.getElementById('c480');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('rrgg-256x256_1.png');
 30881: var pattern = ctx.createPattern(img, 'no-repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.save();
 30881: ctx.translate(0, -103);
 30881: ctx.fillRect(0, 103, 100, 50);
 30881: ctx.restore();
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 25);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_rrgg-256x256.png" id="rrgg-256x256_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeat.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeat.basic</p>
 30881: <canvas id="c481" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeat_basic() {
 30881: 
 30881: var canvas = document.getElementById('c481');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('green-16x16_1.png');
 30881: var pattern = ctx.createPattern(img, 'repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-16x16.png" id="green-16x16_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeat.coord1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeat.coord1</p>
 30881: <canvas id="c482" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeat_coord1() {
 30881: 
 30881: var canvas = document.getElementById('c482');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('rgrg-256x256_3.png');
 30881: var pattern = ctx.createPattern(img, 'repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(-128, -78);
 30881: ctx.fillRect(128, 78, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_rgrg-256x256.png" id="rgrg-256x256_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeat.coord2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeat.coord2</p>
 30881: <canvas id="c483" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeat_coord2() {
 30881: 
 30881: var canvas = document.getElementById('c483');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('ggrr-256x256_3.png');
 30881: var pattern = ctx.createPattern(img, 'repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_ggrr-256x256.png" id="ggrr-256x256_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeat.coord3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeat.coord3</p>
 30881: <canvas id="c484" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeat_coord3() {
 30881: 
 30881: var canvas = document.getElementById('c484');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var img = document.getElementById('rgrg-256x256_4.png');
 30881: var pattern = ctx.createPattern(img, 'repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(-128, -78);
 30881: ctx.fillRect(128, 78, 100, 50);
 30881: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 1,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_rgrg-256x256.png" id="rgrg-256x256_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeat.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeat.outside</p>
 30881: <canvas id="c485" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeat_outside() {
 30881: 
 30881: var canvas = document.getElementById('c485');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('green-16x16_2.png');
 30881: var pattern = ctx.createPattern(img, 'repeat');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(50, 25);
 30881: ctx.fillRect(-50, -25, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-16x16.png" id="green-16x16_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeatx.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeatx.basic</p>
 30881: <canvas id="c486" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeatx_basic() {
 30881: 
 30881: var canvas = document.getElementById('c486');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 16);
 30881: 
 30881: var img = document.getElementById('green-16x16_3.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-x');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-16x16.png" id="green-16x16_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeatx.coord1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeatx.coord1</p>
 30881: <canvas id="c487" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeatx_coord1() {
 30881: 
 30881: var canvas = document.getElementById('c487');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red-16x16_1.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-x');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(0, 16);
 30881: ctx.fillRect(0, -16, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 16);
 30881: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 1,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431:   todo_isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431:   todo_isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: }
 72431: 
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red-16x16.png" id="red-16x16_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeatx.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeatx.outside</p>
 30881: <canvas id="c488" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeatx_outside() {
 30881: 
 30881: var canvas = document.getElementById('c488');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red-16x16_2.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-x');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 16);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red-16x16.png" id="red-16x16_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeaty.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeaty.basic</p>
 30881: <canvas id="c489" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeaty_basic() {
 30881: 
 30881: var canvas = document.getElementById('c489');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 16, 50);
 30881: 
 30881: var img = document.getElementById('green-16x16_4.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-y');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-16x16.png" id="green-16x16_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeaty.coord1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeaty.coord1</p>
 30881: <canvas id="c490" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeaty_coord1() {
 30881: 
 30881: var canvas = document.getElementById('c490');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red-16x16_3.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-y');
 30881: ctx.fillStyle = pattern;
 30881: ctx.translate(48, 0);
 30881: ctx.fillRect(-48, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 16, 50);
 30881: 
 72431: isPixel(ctx, 50,1, 0,255,0,255, 0);
 72431: isPixel(ctx, 50,48, 0,255,0,255, 0);
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 1,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red-16x16.png" id="red-16x16_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.paint.repeaty.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.paint.repeaty.outside</p>
 30881: <canvas id="c491" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_pattern_paint_repeaty_outside() {
 30881: 
 30881: var canvas = document.getElementById('c491');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: var img = document.getElementById('red-16x16_4.png');
 30881: var pattern = ctx.createPattern(img, 'repeat-y');
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 16, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 72431: isPixel(ctx, 1,48, 0,255,0,255, 0);
 72431: 
 72431: if (IsAzureEnabled()) {
 72431:   isPixel(ctx, 98,1, 0,255,0,255, 0);
 72431:   isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: } else {
 30881:   todo_isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881:   todo_isPixel(ctx, 98,48, 0,255,0,255, 0);
 72431: }
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red-16x16.png" id="red-16x16_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.case.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.case</p>
 30881: <canvas id="c492" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_repeat_case() {
 30881: 
 30881: var canvas = document.getElementById('c492');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(canvas, "Repeat");
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.empty.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.empty</p>
 30881: <canvas id="c493" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_repeat_empty() {
 30881: 
 30881: var canvas = document.getElementById('c493');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var img = document.getElementById('green-1x1_1.png');
 30881: var pattern = ctx.createPattern(img, "");
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 200, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-1x1.png" id="green-1x1_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.null.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.null</p>
 30881: <canvas id="c494" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_pattern_repeat_null() {
 30881: 
 30881: var canvas = document.getElementById('c494');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: var img = document.getElementById('green-1x1_2.png');
 30881: var pattern = ctx.createPattern(img, null);
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 1,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_green-1x1.png" id="green-1x1_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.nullsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.nullsuffix</p>
 30881: <canvas id="c495" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_repeat_nullsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c495');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(canvas, "repeat\0");
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.undefined.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.undefined</p>
 30881: <canvas id="c496" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_repeat_undefined() {
 30881: 
 30881: var canvas = document.getElementById('c496');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(canvas, undefined);
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.pattern.repeat.unrecognised.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.pattern.repeat.unrecognised</p>
 30881: <canvas id="c497" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_pattern_repeat_unrecognised() {
 30881: 
 30881: var canvas = document.getElementById('c497');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   ctx.createPattern(canvas, "invalid");
 97033: } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.scaled.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.scaled</p>
 30881: <!-- Testing: CSS-scaled canvases get drawn correctly -->
 30881: <canvas id="c498" width="50" height="25" style="width: 100px; height: 50px"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_scaled() {
 30881: 
 30881: var canvas = document.getElementById('c498');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#00f';
 30881: ctx.fillRect(0, 0, 50, 25);
 30881: ctx.fillStyle = '#0ff';
 30881: ctx.fillRect(0, 0, 25, 10);
 30881: 
 30881: todo(false, "test completed successfully"); // (Bug 483989)
 30881: 
 30881: }
 30881: 
 30881: </script>
 30881: <!-- [[[ test_2d.shadow.alpha.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.alpha.1</p>
 30881: <canvas id="c499" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_alpha_1() {
 30881: 
 30881: var canvas = document.getElementById('c499');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = 'rgba(255, 0, 0, 0.01)';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 4);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.alpha.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.alpha.2</p>
 30881: <canvas id="c500" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_alpha_2() {
 30881: 
 30881: var canvas = document.getElementById('c500');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = 'rgba(0, 0, 255, 0.5)';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.alpha.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.alpha.3</p>
 30881: <canvas id="c501" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_alpha_3() {
 30881: 
 30881: var canvas = document.getElementById('c501');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00'; // (work around broken Firefox globalAlpha caching)
 30881: ctx.shadowColor = '#00f';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.globalAlpha = 0.5;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.alpha.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.alpha.4</p>
 30881: <canvas id="c502" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_alpha_4() {
 30881: 
 30881: var canvas = document.getElementById('c502');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00'; // (work around broken Firefox globalAlpha caching)
 30881: ctx.shadowColor = 'rgba(0, 0, 255, 0.707)';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.globalAlpha = 0.707;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.alpha.5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.alpha.5</p>
 30881: <canvas id="c503" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_alpha_5() {
 30881: 
 30881: var canvas = document.getElementById('c503');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = 'rgba(64, 0, 0, 0.5)';
 30881: ctx.shadowColor = '#00f';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowBlur.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowBlur.1</p>
 30881: <canvas id="c504" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowBlur_1() {
 30881: 
 30881: var canvas = document.getElementById('c504');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.shadowBlur = 1;
 30881: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 30881: ctx.shadowBlur = 0.5;
 30881: ok(ctx.shadowBlur === 0.5, "ctx.shadowBlur === 0.5");
 30881: ctx.shadowBlur = 1e6;
 30881: ok(ctx.shadowBlur === 1e6, "ctx.shadowBlur === 1e6");
 30881: ctx.shadowBlur = 1;
 30881: ctx.shadowBlur = -2;
 30881: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 30881: ctx.shadowBlur = 0;
 30881: ok(ctx.shadowBlur === 0, "ctx.shadowBlur === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowBlur.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowBlur.2</p>
 30881: <canvas id="c505" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowBlur_2() {
 30881: 
 30881: var canvas = document.getElementById('c505');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 64488: ctx.shadowBlur = 1;
 64488: ctx.shadowBlur = -2;
 64488: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 64488: 
 64488: ctx.shadowBlur = 1;
 30881: ctx.shadowBlur = Infinity;
 64488: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 64488: 
 64488: ctx.shadowBlur = 1;
 30881: ctx.shadowBlur = -Infinity;
 64488: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 64488: 
 64488: ctx.shadowBlur = 1;
 30881: ctx.shadowBlur = NaN;
 64488: ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowColor.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowColor.1</p>
 30881: <canvas id="c506" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowColor_1() {
 30881: 
 30881: var canvas = document.getElementById('c506');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.shadowColor = 'lime';
 30881: ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 30881: ctx.shadowColor = 'RGBA(0,255, 0,0)';
 55015: is(ctx.shadowColor, 'rgba(0, 255, 0, 0)', "ctx.shadowColor should be what we set it to");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowColor.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowColor.2</p>
 30881: <canvas id="c507" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowColor_2() {
 30881: 
 30881: var canvas = document.getElementById('c507');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.shadowColor = '#00ff00';
 30881: ctx.shadowColor = 'bogus';
 30881: ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 30881: ctx.shadowColor = ctx;
 30881: ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 30881: ctx.shadowColor = undefined;
 30881: ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowOffset.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowOffset.1</p>
 30881: <canvas id="c508" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowOffset_1() {
 30881: 
 30881: var canvas = document.getElementById('c508');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.shadowOffsetX = 1;
 30881: ctx.shadowOffsetY = 2;
 30881: ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 30881: ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
 30881: ctx.shadowOffsetX = 0.5;
 30881: ctx.shadowOffsetY = 0.25;
 30881: ok(ctx.shadowOffsetX === 0.5, "ctx.shadowOffsetX === 0.5");
 30881: ok(ctx.shadowOffsetY === 0.25, "ctx.shadowOffsetY === 0.25");
 30881: ctx.shadowOffsetX = -0.5;
 30881: ctx.shadowOffsetY = -0.25;
 30881: ok(ctx.shadowOffsetX === -0.5, "ctx.shadowOffsetX === -0.5");
 30881: ok(ctx.shadowOffsetY === -0.25, "ctx.shadowOffsetY === -0.25");
 30881: ctx.shadowOffsetX = 1e6;
 30881: ctx.shadowOffsetY = 1e6;
 30881: ok(ctx.shadowOffsetX === 1e6, "ctx.shadowOffsetX === 1e6");
 30881: ok(ctx.shadowOffsetY === 1e6, "ctx.shadowOffsetY === 1e6");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.attributes.shadowOffset.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.attributes.shadowOffset.2</p>
 30881: <canvas id="c509" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_attributes_shadowOffset_2() {
 30881: 
 30881: var canvas = document.getElementById('c509');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 64488: ctx.shadowOffsetX = 1;
 64488: ctx.shadowOffsetY = 2;
 30881: ctx.shadowOffsetX = Infinity;
 64488: ctx.shadowOffsetY = Infinity;
 64488: ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 64488: ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
 64488: 
 64488: ctx.shadowOffsetX = 1;
 64488: ctx.shadowOffsetY = 2;
 30881: ctx.shadowOffsetX = -Infinity;
 64488: ctx.shadowOffsetY = -Infinity;
 64488: ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 64488: ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
 64488: 
 64488: ctx.shadowOffsetX = 1;
 64488: ctx.shadowOffsetY = 2;
 30881: ctx.shadowOffsetX = NaN;
 30881: ctx.shadowOffsetY = NaN;
 64488: ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 64488: ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.basic.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.basic.1</p>
 30881: <canvas id="c510" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_basic_1() {
 30881: 
 30881: var canvas = document.getElementById('c510');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.shadowColor = '#f00';
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.basic.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.basic.2</p>
 30881: <canvas id="c511" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_basic_2() {
 30881: 
 30881: var canvas = document.getElementById('c511');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.blur.high.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.blur.high</p>
 30881: <canvas id="c512" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_blur_high() {
 30881: 
 30881: var canvas = document.getElementById('c512');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#ff0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#00f';
 30881: ctx.shadowOffsetY = 0;
 30881: ctx.shadowBlur = 555.6;
 30881: ctx.fillRect(-200, -200, 200, 400);
 30881: 
 30881: todo(false, "test completed successfully"); // (Bug 483989)
 30881: 
 30881: }
 30881: 
 30881: </script>
 30881: <!-- [[[ test_2d.shadow.blur.low.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.blur.low</p>
 30881: <canvas id="c513" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_shadow_blur_low() {
 30881: 
 30881: var canvas = document.getElementById('c513');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#ff0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#00f';
 30881: ctx.shadowOffsetY = 25;
 30881: for (var x = 0; x < 100; ++x) {
 30881:     ctx.save();
 30881:     ctx.beginPath();
 30881:     ctx.rect(x, 0, 1, 50);
 30881:     ctx.clip();
 30881:     ctx.shadowBlur = x;
 30881:     ctx.fillRect(-200, -200, 500, 200);
 30881:     ctx.restore();
 30881: }
 30881: 
 30881: todo(false, "test completed successfully"); // (Bug 483989)
 30881: 
 30881: }
 30881: </script>
 30881: <!-- [[[ test_2d.shadow.canvas.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.canvas.alpha</p>
 30881: <canvas id="c514" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_canvas_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c514');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = 'rgba(255, 0, 0, 0.5)';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#00f';
 30881: ctx.drawImage(canvas2, 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_transparent50.png" id="transparent50_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.canvas.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.canvas.basic</p>
 30881: <canvas id="c515" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_canvas_basic() {
 30881: 
 30881: var canvas = document.getElementById('c515');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.drawImage(canvas2, 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.canvas.transparent.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.canvas.transparent.1</p>
 30881: <canvas id="c516" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_canvas_transparent_1() {
 30881: 
 30881: var canvas = document.getElementById('c516');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.drawImage(canvas2, 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.canvas.transparent.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.canvas.transparent.2</p>
 30881: <canvas id="c517" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_canvas_transparent_2() {
 30881: 
 30881: var canvas = document.getElementById('c517');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 30881: canvas2.width = 100;
 30881: canvas2.height = 50;
 30881: var ctx2 = canvas2.getContext('2d');
 30881: ctx2.fillStyle = '#f00';
 30881: ctx2.fillRect(0, 0, 50, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.drawImage(canvas2, 50, -50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.drawImage(canvas2, -50, -50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.clip.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.clip.1</p>
 30881: <canvas id="c518" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_clip_1() {
 30881: 
 30881: var canvas = document.getElementById('c518');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.rect(50, 0, 50, 50);
 30881: ctx.clip();
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = 50;
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.restore();
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.clip.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.clip.2</p>
 30881: <canvas id="c519" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_clip_2() {
 30881: 
 30881: var canvas = document.getElementById('c519');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 50, 50);
 30881: ctx.clip();
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetX = 50;
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.restore();
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.clip.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.clip.3</p>
 30881: <canvas id="c520" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_clip_3() {
 30881: 
 30881: var canvas = document.getElementById('c520');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 50, 50);
 30881: ctx.clip();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = 50;
 30881: ctx.fillRect(-50, 0, 50, 50);
 30881: ctx.restore();
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.composite.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.composite.1</p>
 30881: <canvas id="c521" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_composite_1() {
 30881: 
 30881: var canvas = document.getElementById('c521');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetX = 100;
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, 0, 200, 50);
 30881: 
 73030: isPixel(ctx, 50, 25, 0, 255, 0, 255, 2);
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.composite.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.composite.2</p>
 30881: <canvas id="c522" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_composite_2() {
 30881: 
 30881: var canvas = document.getElementById('c522');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowBlur = 1;
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-10, -10, 120, 70);
 30881: 
 73030: isPixel(ctx, 50, 25, 0, 255, 0, 255, 2);
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.composite.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.composite.3</p>
 30881: <canvas id="c523" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_composite_3() {
 30881: 
 30881: var canvas = document.getElementById('c523');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.globalCompositeOperation = 'xor';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.composite.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.composite.4</p>
 30881: <canvas id="c524" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_composite_4() {
 30881: 
 30881: var canvas = document.getElementById('c524');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalCompositeOperation = 'destination-over';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.gradient.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.gradient.alpha</p>
 30881: <canvas id="c525" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_gradient_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c525');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 30881: gradient.addColorStop(0, 'rgba(255,0,0,0.5)');
 30881: gradient.addColorStop(1, 'rgba(255,0,0,0.5)');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#00f';
 30881: ctx.fillStyle = gradient;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.gradient.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.gradient.basic</p>
 30881: <canvas id="c526" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_gradient_basic() {
 30881: 
 30881: var canvas = document.getElementById('c526');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 30881: gradient.addColorStop(0, '#f00');
 30881: gradient.addColorStop(1, '#f00');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillStyle = gradient;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.gradient.transparent.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.gradient.transparent.1</p>
 30881: <canvas id="c527" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_gradient_transparent_1() {
 30881: 
 30881: var canvas = document.getElementById('c527');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 30881: gradient.addColorStop(0, 'rgba(0,0,0,0)');
 30881: gradient.addColorStop(1, 'rgba(0,0,0,0)');
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillStyle = gradient;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.gradient.transparent.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.gradient.transparent.2</p>
 30881: <canvas id="c528" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_gradient_transparent_2() {
 30881: 
 30881: var canvas = document.getElementById('c528');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 30881: gradient.addColorStop(0, '#f00');
 30881: gradient.addColorStop(0.499, '#f00');
 30881: gradient.addColorStop(0.5, 'rgba(0,0,0,0)');
 30881: gradient.addColorStop(1, 'rgba(0,0,0,0)');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.fillStyle = gradient;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.alpha</p>
 30881: <canvas id="c529" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_image_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c529');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#00f';
 30881: ctx.drawImage(document.getElementById('transparent50_2.png'), 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_transparent50.png" id="transparent50_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.basic</p>
 30881: <canvas id="c530" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_image_basic() {
 30881: 
 30881: var canvas = document.getElementById('c530');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.drawImage(document.getElementById('red_17.png'), 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_17.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.scale.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.scale</p>
 30881: <canvas id="c531" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_image_scale() {
 30881: 
 30881: var canvas = document.getElementById('c531');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.drawImage(document.getElementById('redtransparent_2.png'), 0, 0, 100, 50, -10, -50, 240, 50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_redtransparent.png" id="redtransparent_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.section.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.section</p>
 30881: <canvas id="c532" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_image_section() {
 30881: 
 30881: var canvas = document.getElementById('c532');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#f00';
 30881: ctx.drawImage(document.getElementById('redtransparent_3.png'), 50, 0, 50, 50, 0, -50, 50, 50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 2);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_redtransparent.png" id="redtransparent_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.transparent.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.transparent.1</p>
 30881: <canvas id="c533" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_image_transparent_1() {
 30881: 
 30881: var canvas = document.getElementById('c533');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.drawImage(document.getElementById('transparent_1.png'), 0, -50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_transparent.png" id="transparent_1.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.image.transparent.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.image.transparent.2</p>
 30881: <canvas id="c534" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_image_transparent_2() {
 30881: 
 30881: var canvas = document.getElementById('c534');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.drawImage(document.getElementById('redtransparent_4.png'), 50, -50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.drawImage(document.getElementById('redtransparent_4.png'), -50, -50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_redtransparent.png" id="redtransparent_4.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.offset.negativeX.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.offset.negativeX</p>
 30881: <canvas id="c535" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_offset_negativeX() {
 30881: 
 30881: var canvas = document.getElementById('c535');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = -50;
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.offset.negativeY.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.offset.negativeY</p>
 30881: <canvas id="c536" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_offset_negativeY() {
 30881: 
 30881: var canvas = document.getElementById('c536');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = -25;
 30881: ctx.fillRect(0, 25, 100, 25);
 30881: isPixel(ctx, 50,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.offset.positiveX.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.offset.positiveX</p>
 30881: <canvas id="c537" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_offset_positiveX() {
 30881: 
 30881: var canvas = document.getElementById('c537');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = 50;
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.offset.positiveY.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.offset.positiveY</p>
 30881: <canvas id="c538" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_offset_positiveY() {
 30881: 
 30881: var canvas = document.getElementById('c538');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 25;
 30881: ctx.fillRect(0, 0, 100, 25);
 30881: isPixel(ctx, 50,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.outside.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.outside</p>
 30881: <canvas id="c539" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_outside() {
 30881: 
 30881: var canvas = document.getElementById('c539');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = 100;
 30881: ctx.fillRect(-100, 0, 25, 50);
 30881: ctx.shadowOffsetX = -100;
 30881: ctx.fillRect(175, 0, 25, 50);
 30881: ctx.shadowOffsetX = 0;
 30881: ctx.shadowOffsetY = 100;
 30881: ctx.fillRect(25, -100, 50, 25);
 30881: ctx.shadowOffsetY = -100;
 30881: ctx.fillRect(25, 125, 50, 25);
 30881: isPixel(ctx, 12,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 87,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.pattern.alpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.pattern.alpha</p>
 30881: <canvas id="c540" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_pattern_alpha() {
 30881: 
 30881: var canvas = document.getElementById('c540');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var pattern = ctx.createPattern(document.getElementById('transparent50_3.png'), 'repeat');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#00f';
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 127,0,127,255, 2);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_transparent50.png" id="transparent50_3.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.pattern.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.pattern.basic</p>
 30881: <canvas id="c541" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_pattern_basic() {
 30881: 
 30881: var canvas = document.getElementById('c541');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var pattern = ctx.createPattern(document.getElementById('red_18.png'), 'repeat');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_red.png" id="red_18.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.pattern.transparent.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.pattern.transparent.1</p>
 30881: <canvas id="c542" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_pattern_transparent_1() {
 30881: 
 30881: var canvas = document.getElementById('c542');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var pattern = ctx.createPattern(document.getElementById('transparent_2.png'), 'repeat');
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_transparent.png" id="transparent_2.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.pattern.transparent.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.pattern.transparent.2</p>
 30881: <canvas id="c543" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_pattern_transparent_2() {
 30881: 
 30881: var canvas = document.getElementById('c543');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var pattern = ctx.createPattern(document.getElementById('redtransparent_5.png'), 'repeat');
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.fillStyle = pattern;
 30881: ctx.fillRect(0, -50, 100, 50);
 30881: 
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_redtransparent.png" id="redtransparent_5.png" class="resource">
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.basic</p>
 30881: <canvas id="c544" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_basic() {
 30881: 
 30881: var canvas = document.getElementById('c544');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.beginPath();
 30881: ctx.lineWidth = 50;
 30881: ctx.moveTo(0, -25);
 30881: ctx.lineTo(100, -25);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.cap.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.cap.1</p>
 30881: <canvas id="c545" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_cap_1() {
 30881: 
 30881: var canvas = document.getElementById('c545');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.beginPath();
 30881: ctx.lineWidth = 50;
 30881: ctx.lineCap = 'butt';
 30881: ctx.moveTo(-50, -25);
 30881: ctx.lineTo(0, -25);
 30881: ctx.moveTo(100, -25);
 30881: ctx.lineTo(150, -25);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.cap.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.cap.2</p>
 30881: <canvas id="c546" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_cap_2() {
 30881: 
 30881: var canvas = document.getElementById('c546');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.beginPath();
 30881: ctx.lineWidth = 50;
 30881: ctx.lineCap = 'square';
 30881: ctx.moveTo(25, -25);
 30881: ctx.lineTo(75, -25);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.join.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.join.1</p>
 30881: <canvas id="c547" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_join_1() {
 30881: 
 30881: var canvas = document.getElementById('c547');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetX = 100;
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'bevel';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-200, -50);
 30881: ctx.lineTo(-150, -50);
 30881: ctx.lineTo(-151, -100);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.join.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.join.2</p>
 30881: <canvas id="c548" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_join_2() {
 30881: 
 30881: var canvas = document.getElementById('c548');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, 0, 50, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.shadowOffsetX = 100;
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'miter';
 30881: ctx.beginPath();
 30881: ctx.moveTo(-200, -50);
 30881: ctx.lineTo(-150, -50);
 30881: ctx.lineTo(-151, -100);
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.stroke.join.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.stroke.join.3</p>
 30881: <canvas id="c549" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_shadow_stroke_join_3() {
 30881: 
 30881: var canvas = document.getElementById('c549');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.shadowColor = '#f00';
 30881: ctx.shadowOffsetX = 100;
 30881: ctx.lineWidth = 200;
 30881: ctx.lineJoin = 'miter';
 30881: ctx.miterLimit = 0.1;
 30881: ctx.beginPath();
 30881: ctx.moveTo(-200, -50);
 30881: ctx.lineTo(-150, -50);
 30881: ctx.lineTo(-151, -100); // (not an exact right angle, to avoid some other bug in Firefox 3)
 30881: ctx.stroke();
 30881: 
 30881: isPixel(ctx, 1,1, 0,255,0,255, 0);
 30881: isPixel(ctx, 48,48, 0,255,0,255, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,48, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.transform.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.transform.1</p>
 30881: <canvas id="c550" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_transform_1() {
 30881: 
 30881: var canvas = document.getElementById('c550');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.translate(100, 100);
 30881: ctx.fillRect(-100, -150, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.shadow.transform.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.shadow.transform.2</p>
 30881: <canvas id="c551" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_shadow_transform_2() {
 30881: 
 30881: var canvas = document.getElementById('c551');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.shadowOffsetY = 50;
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.rotate(Math.PI)
 30881: ctx.fillRect(-100, 0, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.bitmap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.bitmap</p>
 30881: <!-- Testing: save()/restore() does not affect the current bitmap -->
 30881: <canvas id="c552" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_state_saverestore_bitmap() {
 30881: 
 30881: var canvas = document.getElementById('c552');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.save();
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.restore();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.clip</p>
 30881: <!-- Testing: save()/restore() affects the clipping path -->
 30881: <canvas id="c553" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_state_saverestore_clip() {
 30881: 
 30881: var canvas = document.getElementById('c553');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.save();
 30881: ctx.rect(0, 0, 1, 1);
 30881: ctx.clip();
 30881: ctx.restore();
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.fillStyle.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.fillStyle</p>
 30881: <!-- Testing: save()/restore() works for fillStyle -->
 30881: <canvas id="c554" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_fillStyle() {
 30881: 
 30881: var canvas = document.getElementById('c554');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.fillStyle;
 30881: ctx.save();
 30881: ctx.fillStyle = "#ff0000";
 30881: ctx.restore();
 30881: ok(ctx.fillStyle === old, "ctx.fillStyle === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.fillStyle = "#ff0000";
 30881: old = ctx.fillStyle;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "#ff0000"
 30881: ctx.save();
 30881: ok(ctx.fillStyle === old, "ctx.fillStyle === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.globalAlpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.globalAlpha</p>
 30881: <!-- Testing: save()/restore() works for globalAlpha -->
 30881: <canvas id="c555" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_globalAlpha() {
 30881: 
 30881: var canvas = document.getElementById('c555');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.globalAlpha;
 30881: ctx.save();
 30881: ctx.globalAlpha = 0.5;
 30881: ctx.restore();
 30881: ok(ctx.globalAlpha === old, "ctx.globalAlpha === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.globalAlpha = 0.5;
 30881: old = ctx.globalAlpha;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 0.5
 30881: ctx.save();
 30881: ok(ctx.globalAlpha === old, "ctx.globalAlpha === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.globalCompositeOperation.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.globalCompositeOperation</p>
 30881: <!-- Testing: save()/restore() works for globalCompositeOperation -->
 30881: <canvas id="c556" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_globalCompositeOperation() {
 30881: 
 30881: var canvas = document.getElementById('c556');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.globalCompositeOperation;
 30881: ctx.save();
 30881: ctx.globalCompositeOperation = "copy";
 30881: ctx.restore();
 30881: ok(ctx.globalCompositeOperation === old, "ctx.globalCompositeOperation === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.globalCompositeOperation = "copy";
 30881: old = ctx.globalCompositeOperation;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "copy"
 30881: ctx.save();
 30881: ok(ctx.globalCompositeOperation === old, "ctx.globalCompositeOperation === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.lineCap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.lineCap</p>
 30881: <!-- Testing: save()/restore() works for lineCap -->
 30881: <canvas id="c557" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_lineCap() {
 30881: 
 30881: var canvas = document.getElementById('c557');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.lineCap;
 30881: ctx.save();
 30881: ctx.lineCap = "round";
 30881: ctx.restore();
 30881: ok(ctx.lineCap === old, "ctx.lineCap === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.lineCap = "round";
 30881: old = ctx.lineCap;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "round"
 30881: ctx.save();
 30881: ok(ctx.lineCap === old, "ctx.lineCap === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.lineJoin.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.lineJoin</p>
 30881: <!-- Testing: save()/restore() works for lineJoin -->
 30881: <canvas id="c558" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_lineJoin() {
 30881: 
 30881: var canvas = document.getElementById('c558');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.lineJoin;
 30881: ctx.save();
 30881: ctx.lineJoin = "round";
 30881: ctx.restore();
 30881: ok(ctx.lineJoin === old, "ctx.lineJoin === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.lineJoin = "round";
 30881: old = ctx.lineJoin;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "round"
 30881: ctx.save();
 30881: ok(ctx.lineJoin === old, "ctx.lineJoin === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.lineWidth.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.lineWidth</p>
 30881: <!-- Testing: save()/restore() works for lineWidth -->
 30881: <canvas id="c559" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_lineWidth() {
 30881: 
 30881: var canvas = document.getElementById('c559');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.lineWidth;
 30881: ctx.save();
 30881: ctx.lineWidth = 0.5;
 30881: ctx.restore();
 30881: ok(ctx.lineWidth === old, "ctx.lineWidth === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.lineWidth = 0.5;
 30881: old = ctx.lineWidth;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 0.5
 30881: ctx.save();
 30881: ok(ctx.lineWidth === old, "ctx.lineWidth === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.miterLimit.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.miterLimit</p>
 30881: <!-- Testing: save()/restore() works for miterLimit -->
 30881: <canvas id="c560" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_miterLimit() {
 30881: 
 30881: var canvas = document.getElementById('c560');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.miterLimit;
 30881: ctx.save();
 30881: ctx.miterLimit = 0.5;
 30881: ctx.restore();
 30881: ok(ctx.miterLimit === old, "ctx.miterLimit === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.miterLimit = 0.5;
 30881: old = ctx.miterLimit;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 0.5
 30881: ctx.save();
 30881: ok(ctx.miterLimit === old, "ctx.miterLimit === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.path</p>
 30881: <!-- Testing: save()/restore() does not affect the current path -->
 30881: <canvas id="c561" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_state_saverestore_path() {
 30881: 
 30881: var canvas = document.getElementById('c561');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.save();
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.restore();
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.shadowBlur.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.shadowBlur</p>
 30881: <!-- Testing: save()/restore() works for shadowBlur -->
 30881: <canvas id="c562" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_shadowBlur() {
 30881: 
 30881: var canvas = document.getElementById('c562');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.shadowBlur;
 30881: ctx.save();
 30881: ctx.shadowBlur = 5;
 30881: ctx.restore();
 30881: ok(ctx.shadowBlur === old, "ctx.shadowBlur === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.shadowBlur = 5;
 30881: old = ctx.shadowBlur;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 5
 30881: ctx.save();
 30881: ok(ctx.shadowBlur === old, "ctx.shadowBlur === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.shadowColor.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.shadowColor</p>
 30881: <!-- Testing: save()/restore() works for shadowColor -->
 30881: <canvas id="c563" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_shadowColor() {
 30881: 
 30881: var canvas = document.getElementById('c563');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.shadowColor;
 30881: ctx.save();
 30881: ctx.shadowColor = "#ff0000";
 30881: ctx.restore();
 30881: ok(ctx.shadowColor === old, "ctx.shadowColor === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.shadowColor = "#ff0000";
 30881: old = ctx.shadowColor;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "#ff0000"
 30881: ctx.save();
 30881: ok(ctx.shadowColor === old, "ctx.shadowColor === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.shadowOffsetX.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.shadowOffsetX</p>
 30881: <!-- Testing: save()/restore() works for shadowOffsetX -->
 30881: <canvas id="c564" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_shadowOffsetX() {
 30881: 
 30881: var canvas = document.getElementById('c564');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.shadowOffsetX;
 30881: ctx.save();
 30881: ctx.shadowOffsetX = 5;
 30881: ctx.restore();
 30881: ok(ctx.shadowOffsetX === old, "ctx.shadowOffsetX === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.shadowOffsetX = 5;
 30881: old = ctx.shadowOffsetX;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 5
 30881: ctx.save();
 30881: ok(ctx.shadowOffsetX === old, "ctx.shadowOffsetX === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.shadowOffsetY.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.shadowOffsetY</p>
 30881: <!-- Testing: save()/restore() works for shadowOffsetY -->
 30881: <canvas id="c565" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_shadowOffsetY() {
 30881: 
 30881: var canvas = document.getElementById('c565');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.shadowOffsetY;
 30881: ctx.save();
 30881: ctx.shadowOffsetY = 5;
 30881: ctx.restore();
 30881: ok(ctx.shadowOffsetY === old, "ctx.shadowOffsetY === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.shadowOffsetY = 5;
 30881: old = ctx.shadowOffsetY;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against 5
 30881: ctx.save();
 30881: ok(ctx.shadowOffsetY === old, "ctx.shadowOffsetY === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.stack.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.stack</p>
 30881: <!-- Testing: save()/restore() can be nested as a stack -->
 30881: <canvas id="c566" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_stack() {
 30881: 
 30881: var canvas = document.getElementById('c566');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.lineWidth = 1;
 30881: ctx.save();
 30881: ctx.lineWidth = 2;
 30881: ctx.save();
 30881: ctx.lineWidth = 3;
 30881: ok(ctx.lineWidth == 3, "ctx.lineWidth == 3");
 30881: ctx.restore();
 30881: ok(ctx.lineWidth == 2, "ctx.lineWidth == 2");
 30881: ctx.restore();
 30881: ok(ctx.lineWidth == 1, "ctx.lineWidth == 1");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.stackdepth.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.stackdepth</p>
 30881: <!-- Testing: save()/restore() stack depth is not unreasonably limited -->
 30881: <canvas id="c567" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_stackdepth() {
 30881: 
 30881: var canvas = document.getElementById('c567');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var limit = 512;
 30881: for (var i = 1; i < limit; ++i)
 30881: {
 30881:     ctx.save();
 30881:     ctx.lineWidth = i;
 30881: }
 30881: for (var i = limit-1; i > 0; --i)
 30881: {
 30881:     ok(ctx.lineWidth == i, "ctx.lineWidth == i");
 30881:     ctx.restore();
 30881: }
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.strokeStyle.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.strokeStyle</p>
 30881: <!-- Testing: save()/restore() works for strokeStyle -->
 30881: <canvas id="c568" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_strokeStyle() {
 30881: 
 30881: var canvas = document.getElementById('c568');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Test that restore() undoes any modifications
 30881: var old = ctx.strokeStyle;
 30881: ctx.save();
 30881: ctx.strokeStyle = "#ff0000";
 30881: ctx.restore();
 30881: ok(ctx.strokeStyle === old, "ctx.strokeStyle === old");
 30881: 
 30881: // Also test that save() doesn't modify the values
 30881: ctx.strokeStyle = "#ff0000";
 30881: old = ctx.strokeStyle;
 30881:     // we're not interested in failures caused by get(set(x)) != x (e.g.
 30881:     // from rounding), so compare against d instead of against "#ff0000"
 30881: ctx.save();
 30881: ok(ctx.strokeStyle === old, "ctx.strokeStyle === old");
 30881: ctx.restore();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.transformation.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.transformation</p>
 30881: <!-- Testing: save()/restore() affects the current transformation matrix -->
 30881: <canvas id="c569" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_state_saverestore_transformation() {
 30881: 
 30881: var canvas = document.getElementById('c569');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.save();
 30881: ctx.translate(200, 0);
 30881: ctx.restore();
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(-200, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.state.saverestore.underflow.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.state.saverestore.underflow - bug 296821</p>
 30881: <!-- Testing: restore() with an empty stack has no effect -->
 30881: <canvas id="c570" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_state_saverestore_underflow() {
 30881: 
 30881: var canvas = document.getElementById('c570');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: for (var i = 0; i < 16; ++i)
 30881:     ctx.restore();
 30881: ctx.lineWidth = 0.5;
 30881: ctx.restore();
 30881: ok(ctx.lineWidth == 0.5, "ctx.lineWidth == 0.5");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.basic</p>
 30881: <canvas id="c571" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_basic() {
 30881: 
 30881: var canvas = document.getElementById('c571');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(25, 24, 50, 2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.clip</p>
 30881: <canvas id="c572" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_clip() {
 30881: 
 30881: var canvas = document.getElementById('c572');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 16, 16);
 30881: ctx.clip();
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 16, 16);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.globalalpha.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.globalalpha</p>
 30881: <canvas id="c573" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_globalalpha() {
 30881: 
 30881: var canvas = document.getElementById('c573');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalAlpha = 0;
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(25, 24, 50, 2);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.globalcomposite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.globalcomposite</p>
 30881: <canvas id="c574" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_globalcomposite() {
 30881: 
 30881: var canvas = document.getElementById('c574');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.globalCompositeOperation = 'source-in';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(25, 24, 50, 2);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.negative</p>
 30881: <canvas id="c575" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_negative() {
 30881: 
 30881: var canvas = document.getElementById('c575');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 25;
 30881: ctx.strokeRect(12, 12, 26, 1);
 30881: ctx.strokeRect(88, 12, -26, 1);
 30881: ctx.strokeRect(12, 38, 26, -1);
 30881: ctx.strokeRect(88, 38, -26, -1);
 30881: isPixel(ctx, 25,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,12, 0,255,0,255, 0);
 30881: isPixel(ctx, 25,37, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,37, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.nonfinite</p>
 30881: <!-- Testing: strokeRect() with Infinity/NaN is ignored -->
 30881: <canvas id="c576" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c576');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 150;
 30881: ctx.strokeRect(Infinity, 0, 100, 50);
 30881: ctx.strokeRect(-Infinity, 0, 100, 50);
 30881: ctx.strokeRect(NaN, 0, 100, 50);
 30881: ctx.strokeRect(0, Infinity, 100, 50);
 30881: ctx.strokeRect(0, -Infinity, 100, 50);
 30881: ctx.strokeRect(0, NaN, 100, 50);
 30881: ctx.strokeRect(0, 0, Infinity, 50);
 30881: ctx.strokeRect(0, 0, -Infinity, 50);
 30881: ctx.strokeRect(0, 0, NaN, 50);
 30881: ctx.strokeRect(0, 0, 100, Infinity);
 30881: ctx.strokeRect(0, 0, 100, -Infinity);
 30881: ctx.strokeRect(0, 0, 100, NaN);
 30881: ctx.strokeRect(Infinity, Infinity, 100, 50);
 30881: ctx.strokeRect(Infinity, Infinity, Infinity, 50);
 30881: ctx.strokeRect(Infinity, Infinity, Infinity, Infinity);
 30881: ctx.strokeRect(Infinity, Infinity, 100, Infinity);
 30881: ctx.strokeRect(Infinity, 0, Infinity, 50);
 30881: ctx.strokeRect(Infinity, 0, Infinity, Infinity);
 30881: ctx.strokeRect(Infinity, 0, 100, Infinity);
 30881: ctx.strokeRect(0, Infinity, Infinity, 50);
 30881: ctx.strokeRect(0, Infinity, Infinity, Infinity);
 30881: ctx.strokeRect(0, Infinity, 100, Infinity);
 30881: ctx.strokeRect(0, 0, Infinity, Infinity);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.path</p>
 30881: <canvas id="c577" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_path() {
 30881: 
 30881: var canvas = document.getElementById('c577');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.beginPath();
 30881: ctx.rect(0, 0, 100, 50);
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 5;
 30881: ctx.strokeRect(0, 0, 16, 16);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fill();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.shadow.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.shadow</p>
 30881: <canvas id="c578" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_shadow() {
 30881: 
 30881: var canvas = document.getElementById('c578');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.shadowBlur = 0;
 30881: ctx.shadowOffsetX = 0;
 30881: ctx.shadowOffsetY = 50;
 30881: 
 30881: // Shadows are optional, so just test that if they apply to fill() then they apply to strokeRect() too
 30881: ctx.beginPath();
 30881: ctx.rect(0, -50, 100, 50);
 30881: ctx.shadowColor = '#f00';
 30881: ctx.fill();
 30881: 
 30881: ctx.shadowColor = '#0f0';
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(0, -75, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.transform.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.transform</p>
 30881: <canvas id="c579" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_transform() {
 30881: 
 30881: var canvas = document.getElementById('c579');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.scale(10, 10);
 30881: ctx.translate(0, 5);
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 5;
 30881: ctx.strokeRect(2.5, -2.6, 5, 0.2);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.zero.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.zero.1</p>
 30881: <canvas id="c580" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_zero_1() {
 30881: 
 30881: var canvas = document.getElementById('c580');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 50649: if (!IsD2DEnabled()) {
 50649:     // Disabled for D2D until we can figure out Bug 587554.
 30881:     ctx.strokeStyle = '#f00';
 30881:     ctx.lineWidth = 250;
 30881:     ctx.strokeRect(50, 25, 0, 0);
 30881:     isPixel(ctx, 50,25, 0,0,0,0, 0);
 50649: }
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.zero.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.zero.2</p>
 30881: <canvas id="c581" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: 
 30881: function test_2d_strokeRect_zero_2() {
 30881: 
 30881: var canvas = document.getElementById('c581');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 250;
 30881: ctx.lineCap = 'round';
 30881: ctx.lineJoin = 'round';
 30881: ctx.strokeRect(50, 25, 0, 0);
 71612: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.zero.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.zero.3</p>
 30881: <canvas id="c582" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_zero_3() {
 30881: 
 30881: var canvas = document.getElementById('c582');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 50;
 30881: ctx.strokeRect(0, 25, 100, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.zero.4.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.zero.4</p>
 30881: <canvas id="c583" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_zero_4() {
 30881: 
 30881: var canvas = document.getElementById('c583');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#f00';
 30881: ctx.lineWidth = 250;
 30881: ctx.lineCap = 'round';
 30881: ctx.strokeRect(100, 25, 100, 0);
 30881: isPixel(ctx, 50,25, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeRect.zero.5.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeRect.zero.5</p>
 30881: <canvas id="c584" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_strokeRect_zero_5() {
 30881: 
 30881: var canvas = document.getElementById('c584');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.strokeStyle = '#0f0';
 30881: ctx.lineWidth = 250;
 30881: ctx.lineJoin = 'round';
 30881: ctx.strokeRect(100, 25, 100, 0);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.strokeStyle.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.strokeStyle.default</p>
 30881: <canvas id="c585" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_strokeStyle_default() {
 30881: 
 30881: var canvas = document.getElementById('c585');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.strokeStyle == '#000000', "ctx.strokeStyle == '#000000'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 79975: <!-- [[[ test_2d.text.align.default.html ]]] -->
 79975: 
 79975: <p>Canvas test: 2d.text.align.default</p>
 79975: <canvas height="50" id="c569a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 79975: <script>
 79975: 
 79975: function test_2d_text_align_default() {
 79975: 
 79975: var canvas = document.getElementById('c569a');
 79975: var ctx = canvas.getContext('2d');
 79975: 
 79975: ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 79975: 
 79975: 
 79975: }
 79975: </script>
 79975: 
 79975: <!-- [[[ test_2d.text.align.invalid.html ]]] -->
 79975: 
 79975: <p>Canvas test: 2d.text.align.invalid</p>
 79975: <canvas height="50" id="c570a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 79975: <script>
 79975: 
 79975: function test_2d_text_align_invalid() {
 79975: 
 79975: var canvas = document.getElementById('c570a');
 79975: var ctx = canvas.getContext('2d');
 79975: 
 79975: ctx.textAlign = 'start';
 79975: ctx.textAlign = 'bogus';
 79975: ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 79975: 
 79975: ctx.textAlign = 'start';
 79975: ctx.textAlign = 'END';
 79975: ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 79975: 
 79975: ctx.textAlign = 'start';
 79975: ctx.textAlign = 'end ';
 79975: ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 79975: 
 79975: ctx.textAlign = 'start';
 79975: ctx.textAlign = 'end\0';
 79975: ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 79975: 
 79975: 
 79975: }
 79975: </script>
 79975: 
 79975: <!-- [[[ test_2d.text.baseline.default.html ]]] -->
 79975: 
 79975: <p>Canvas test: 2d.text.baseline.default</p>
 79975: <canvas height="50" id="c572a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 79975: <script>
 79975: 
 79975: function test_2d_text_baseline_default() {
 79975: 
 79975: var canvas = document.getElementById('c572a');
 79975: var ctx = canvas.getContext('2d');
 79975: 
 79975: ok(ctx.textBaseline === 'alphabetic', "ctx.textBaseline === 'alphabetic'");
 79975: 
 79975: 
 79975: }
 79975: </script>
 79975: 
 79975: <!-- [[[ test_2d.text.baseline.invalid.html ]]] -->
 79975: 
 79975: <p>Canvas test: 2d.text.baseline.invalid</p>
 79975: <canvas height="50" id="c573a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 79975: <script>
 79975: 
 79975: function test_2d_text_baseline_invalid() {
 79975: 
 79975: var canvas = document.getElementById('c573a');
 79975: var ctx = canvas.getContext('2d');
 79975: 
 79975: ctx.textBaseline = 'top';
 79975: ctx.textBaseline = 'bogus';
 79975: ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 79975: 
 79975: ctx.textBaseline = 'top';
 79975: ctx.textBaseline = 'MIDDLE';
 79975: ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 79975: 
 79975: ctx.textBaseline = 'top';
 79975: ctx.textBaseline = 'middle ';
 79975: ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 79975: 
 79975: ctx.textBaseline = 'top';
 79975: ctx.textBaseline = 'middle\0';
 79975: ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 79975: 
 79975: 
 79975: }
 79975: </script>
 79975: 
 30881: <!-- [[[ test_2d.transformation.order.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.order</p>
 30881: <!-- Testing: Transformations are applied in the right order -->
 30881: <canvas id="c586" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_order() {
 30881: 
 30881: var canvas = document.getElementById('c586');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.scale(2, 1);
 30881: ctx.rotate(Math.PI / 2);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, -50, 50, 50);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.direction.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.direction</p>
 30881: <!-- Testing: rotate() is clockwise -->
 30881: <canvas id="c587" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_direction() {
 30881: 
 30881: var canvas = document.getElementById('c587');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rotate(Math.PI / 2);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, -100, 50, 100);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.nonfinite</p>
 30881: <!-- Testing: rotate() with Infinity/NaN is ignored -->
 30881: <canvas id="c588" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c588');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 10);
 30881: ctx.rotate(Infinity);
 30881: ctx.rotate(-Infinity);
 30881: ctx.rotate(NaN);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -10, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.radians.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.radians</p>
 30881: <!-- Testing: rotate() uses radians -->
 30881: <canvas id="c589" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_radians() {
 30881: 
 30881: var canvas = document.getElementById('c589');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rotate(Math.PI); // should fail obviously if this is 3.1 degrees
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.wrap.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.wrap</p>
 30881: <!-- Testing: rotate() wraps large positive values correctly -->
 30881: <canvas id="c590" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_wrap() {
 30881: 
 30881: var canvas = document.getElementById('c590');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rotate(Math.PI * (1 + 4096)); // == pi (mod 2*pi)
 30881: // We need about pi +/- 0.001 in order to get correct-looking results
 30881: // 32-bit floats can store pi*4097 with precision 2^-10, so that should
 30881: // be safe enough on reasonable implementations
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,2, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,47, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.wrapnegative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.wrapnegative</p>
 30881: <!-- Testing: rotate() wraps large negative values correctly -->
 30881: <canvas id="c591" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_wrapnegative() {
 30881: 
 30881: var canvas = document.getElementById('c591');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rotate(-Math.PI * (1 + 4096));
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -50, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,2, 0,255,0,255, 0);
 30881: isPixel(ctx, 98,47, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.rotate.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.rotate.zero</p>
 30881: <!-- Testing: rotate() by 0 does nothing -->
 30881: <canvas id="c592" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_rotate_zero() {
 30881: 
 30881: var canvas = document.getElementById('c592');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.rotate(0);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.basic</p>
 30881: <!-- Testing: scale() works -->
 30881: <canvas id="c593" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_basic() {
 30881: 
 30881: var canvas = document.getElementById('c593');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.scale(2, 4);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 12.5);
 30881: isPixel(ctx, 90,40, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.large.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.large</p>
 30881: <!-- Testing: scale() with large scale factors works -->
 30881: <canvas id="c594" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_large() {
 30881: 
 30881: var canvas = document.getElementById('c594');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.scale(1e5, 1e5);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 1, 1);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.multiple</p>
 30881: <!-- Testing: Multiple scale()s combine -->
 30881: <canvas id="c595" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c595');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.scale(Math.sqrt(2), Math.sqrt(2));
 30881: ctx.scale(Math.sqrt(2), Math.sqrt(2));
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 25);
 30881: isPixel(ctx, 90,40, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.negative</p>
 30881: <!-- Testing: scale() with negative scale factors works -->
 30881: <canvas id="c596" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_negative() {
 30881: 
 30881: var canvas = document.getElementById('c596');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.scale(-1, 1);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-50, 0, 50, 50);
 30881: ctx.restore();
 30881: 
 30881: ctx.save();
 30881: ctx.scale(1, -1);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(50, -50, 50, 50);
 30881: ctx.restore();
 30881: isPixel(ctx, 25,25, 0,255,0,255, 0);
 30881: isPixel(ctx, 75,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.nonfinite</p>
 30881: <!-- Testing: scale() with Infinity/NaN is ignored -->
 30881: <canvas id="c597" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c597');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 10);
 30881: ctx.scale(Infinity, 0.1);
 30881: ctx.scale(-Infinity, 0.1);
 30881: ctx.scale(NaN, 0.1);
 30881: ctx.scale(0.1, Infinity);
 30881: ctx.scale(0.1, -Infinity);
 30881: ctx.scale(0.1, NaN);
 30881: ctx.scale(Infinity, Infinity);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -10, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.scale.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.scale.zero</p>
 30881: <!-- Testing: scale() with a scale factor of zero works -->
 30881: <canvas id="c598" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_scale_zero() {
 30881: 
 30881: var canvas = document.getElementById('c598');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.save();
 30881: ctx.translate(50, 0);
 30881: ctx.scale(0, 1);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.restore();
 30881: 
 30881: ctx.save();
 30881: ctx.translate(0, 25);
 30881: ctx.scale(1, 0);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.restore();
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.setTransform.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.setTransform.multiple</p>
 30881: <canvas id="c599" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_setTransform_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c599');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.setTransform(1/2,0, 0,1/2, 0,0);
 30881: ctx.setTransform(2,0, 0,2, 0,0);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 25);
 30881: isPixel(ctx, 75,35, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.setTransform.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.setTransform.nonfinite</p>
 30881: <!-- Testing: setTransform() with Infinity/NaN is ignored -->
 30881: <canvas id="c600" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_setTransform_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c600');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 10);
 30881: ctx.setTransform(Infinity, 0, 0, 0, 0, 0);
 30881: ctx.setTransform(-Infinity, 0, 0, 0, 0, 0);
 30881: ctx.setTransform(NaN, 0, 0, 0, 0, 0);
 30881: ctx.setTransform(0, Infinity, 0, 0, 0, 0);
 30881: ctx.setTransform(0, -Infinity, 0, 0, 0, 0);
 30881: ctx.setTransform(0, NaN, 0, 0, 0, 0);
 30881: ctx.setTransform(0, 0, Infinity, 0, 0, 0);
 30881: ctx.setTransform(0, 0, -Infinity, 0, 0, 0);
 30881: ctx.setTransform(0, 0, NaN, 0, 0, 0);
 30881: ctx.setTransform(0, 0, 0, Infinity, 0, 0);
 30881: ctx.setTransform(0, 0, 0, -Infinity, 0, 0);
 30881: ctx.setTransform(0, 0, 0, NaN, 0, 0);
 30881: ctx.setTransform(0, 0, 0, 0, Infinity, 0);
 30881: ctx.setTransform(0, 0, 0, 0, -Infinity, 0);
 30881: ctx.setTransform(0, 0, 0, 0, NaN, 0);
 30881: ctx.setTransform(0, 0, 0, 0, 0, Infinity);
 30881: ctx.setTransform(0, 0, 0, 0, 0, -Infinity);
 30881: ctx.setTransform(0, 0, 0, 0, 0, NaN);
 30881: ctx.setTransform(Infinity, Infinity, 0, 0, 0, 0);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, 0, 0, 0);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, Infinity, 0, 0);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, Infinity, Infinity, 0);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, 0, Infinity, 0);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, Infinity, 0, 0, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, 0, Infinity, 0, 0);
 30881: ctx.setTransform(Infinity, Infinity, 0, Infinity, Infinity, 0);
 30881: ctx.setTransform(Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, 0, 0, Infinity, 0);
 30881: ctx.setTransform(Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, Infinity, 0, 0, 0, Infinity);
 30881: ctx.setTransform(Infinity, 0, Infinity, 0, 0, 0);
 30881: ctx.setTransform(Infinity, 0, Infinity, Infinity, 0, 0);
 30881: ctx.setTransform(Infinity, 0, Infinity, Infinity, Infinity, 0);
 30881: ctx.setTransform(Infinity, 0, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, 0, Infinity, Infinity, 0, Infinity);
 30881: ctx.setTransform(Infinity, 0, Infinity, 0, Infinity, 0);
 30881: ctx.setTransform(Infinity, 0, Infinity, 0, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, 0, Infinity, 0, 0, Infinity);
 30881: ctx.setTransform(Infinity, 0, 0, Infinity, 0, 0);
 30881: ctx.setTransform(Infinity, 0, 0, Infinity, Infinity, 0);
 30881: ctx.setTransform(Infinity, 0, 0, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, 0, 0, Infinity, 0, Infinity);
 30881: ctx.setTransform(Infinity, 0, 0, 0, Infinity, 0);
 30881: ctx.setTransform(Infinity, 0, 0, 0, Infinity, Infinity);
 30881: ctx.setTransform(Infinity, 0, 0, 0, 0, Infinity);
 30881: ctx.setTransform(0, Infinity, Infinity, 0, 0, 0);
 30881: ctx.setTransform(0, Infinity, Infinity, Infinity, 0, 0);
 30881: ctx.setTransform(0, Infinity, Infinity, Infinity, Infinity, 0);
 30881: ctx.setTransform(0, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(0, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.setTransform(0, Infinity, Infinity, 0, Infinity, 0);
 30881: ctx.setTransform(0, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.setTransform(0, Infinity, Infinity, 0, 0, Infinity);
 30881: ctx.setTransform(0, Infinity, 0, Infinity, 0, 0);
 30881: ctx.setTransform(0, Infinity, 0, Infinity, Infinity, 0);
 30881: ctx.setTransform(0, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(0, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.setTransform(0, Infinity, 0, 0, Infinity, 0);
 30881: ctx.setTransform(0, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.setTransform(0, Infinity, 0, 0, 0, Infinity);
 30881: ctx.setTransform(0, 0, Infinity, Infinity, 0, 0);
 30881: ctx.setTransform(0, 0, Infinity, Infinity, Infinity, 0);
 30881: ctx.setTransform(0, 0, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(0, 0, Infinity, Infinity, 0, Infinity);
 30881: ctx.setTransform(0, 0, Infinity, 0, Infinity, 0);
 30881: ctx.setTransform(0, 0, Infinity, 0, Infinity, Infinity);
 30881: ctx.setTransform(0, 0, Infinity, 0, 0, Infinity);
 30881: ctx.setTransform(0, 0, 0, Infinity, Infinity, 0);
 30881: ctx.setTransform(0, 0, 0, Infinity, Infinity, Infinity);
 30881: ctx.setTransform(0, 0, 0, Infinity, 0, Infinity);
 30881: ctx.setTransform(0, 0, 0, 0, Infinity, Infinity);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -10, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.setTransform.skewed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.setTransform.skewed</p>
 30881: <canvas id="c601" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_setTransform_skewed() {
 30881: 
 30881: var canvas = document.getElementById('c601');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Create green with a red square ring inside it
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(20, 10, 60, 30);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(40, 20, 20, 10);
 30881: 
 30881: // Draw a skewed shape to fill that gap, to make sure it is aligned correctly
 30881: ctx.setTransform(1,4, 2,3, 5,6);
 30881: // Post-transform coordinates:
 30881: //   [[20,10],[80,10],[80,40],[20,40],[20,10],[40,20],[40,30],[60,30],[60,20],[40,20],[20,10]];
 30881: // Hence pre-transform coordinates:
 30881: var pts=[[-7.4,11.2],[-43.4,59.2],[-31.4,53.2],[4.6,5.2],[-7.4,11.2],
 30881:          [-15.4,25.2],[-11.4,23.2],[-23.4,39.2],[-27.4,41.2],[-15.4,25.2],
 30881:          [-7.4,11.2]];
 30881: ctx.beginPath();
 30881: ctx.moveTo(pts[0][0], pts[0][1]);
 30881: for (var i = 0; i < pts.length; ++i)
 30881:     ctx.lineTo(pts[i][0], pts[i][1]);
 30881: ctx.fill();
 30881: isPixel(ctx, 21,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 79,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 21,39, 0,255,0,255, 0);
 30881: isPixel(ctx, 79,39, 0,255,0,255, 0);
 82425: isPixel(ctx, 39,19, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 30881: isPixel(ctx, 61,19, 0,255,0,255, 0);
 30881: isPixel(ctx, 39,31, 0,255,0,255, 0);
 30881: isPixel(ctx, 61,31, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.transform.identity.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.transform.identity</p>
 30881: <!-- Testing: transform() with the identity matrix does nothing -->
 30881: <canvas id="c602" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_transform_identity() {
 30881: 
 30881: var canvas = document.getElementById('c602');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.transform(1,0, 0,1, 0,0);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.transform.multiply.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.transform.multiply</p>
 30881: <!-- Testing: transform() multiplies the CTM -->
 30881: <canvas id="c603" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_transform_multiply() {
 30881: 
 30881: var canvas = document.getElementById('c603');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.transform(1,2, 3,4, 5,6);
 30881: ctx.transform(-2,1, 3/2,-1/2, 1,-2);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.transform.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.transform.nonfinite</p>
 30881: <!-- Testing: transform() with Infinity/NaN is ignored -->
 30881: <canvas id="c604" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_transform_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c604');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 10);
 30881: ctx.transform(Infinity, 0, 0, 0, 0, 0);
 30881: ctx.transform(-Infinity, 0, 0, 0, 0, 0);
 30881: ctx.transform(NaN, 0, 0, 0, 0, 0);
 30881: ctx.transform(0, Infinity, 0, 0, 0, 0);
 30881: ctx.transform(0, -Infinity, 0, 0, 0, 0);
 30881: ctx.transform(0, NaN, 0, 0, 0, 0);
 30881: ctx.transform(0, 0, Infinity, 0, 0, 0);
 30881: ctx.transform(0, 0, -Infinity, 0, 0, 0);
 30881: ctx.transform(0, 0, NaN, 0, 0, 0);
 30881: ctx.transform(0, 0, 0, Infinity, 0, 0);
 30881: ctx.transform(0, 0, 0, -Infinity, 0, 0);
 30881: ctx.transform(0, 0, 0, NaN, 0, 0);
 30881: ctx.transform(0, 0, 0, 0, Infinity, 0);
 30881: ctx.transform(0, 0, 0, 0, -Infinity, 0);
 30881: ctx.transform(0, 0, 0, 0, NaN, 0);
 30881: ctx.transform(0, 0, 0, 0, 0, Infinity);
 30881: ctx.transform(0, 0, 0, 0, 0, -Infinity);
 30881: ctx.transform(0, 0, 0, 0, 0, NaN);
 30881: ctx.transform(Infinity, Infinity, 0, 0, 0, 0);
 30881: ctx.transform(Infinity, Infinity, Infinity, 0, 0, 0);
 30881: ctx.transform(Infinity, Infinity, Infinity, Infinity, 0, 0);
 30881: ctx.transform(Infinity, Infinity, Infinity, Infinity, Infinity, 0);
 30881: ctx.transform(Infinity, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.transform(Infinity, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.transform(Infinity, Infinity, Infinity, 0, Infinity, 0);
 30881: ctx.transform(Infinity, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.transform(Infinity, Infinity, Infinity, 0, 0, Infinity);
 30881: ctx.transform(Infinity, Infinity, 0, Infinity, 0, 0);
 30881: ctx.transform(Infinity, Infinity, 0, Infinity, Infinity, 0);
 30881: ctx.transform(Infinity, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.transform(Infinity, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.transform(Infinity, Infinity, 0, 0, Infinity, 0);
 30881: ctx.transform(Infinity, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.transform(Infinity, Infinity, 0, 0, 0, Infinity);
 30881: ctx.transform(Infinity, 0, Infinity, 0, 0, 0);
 30881: ctx.transform(Infinity, 0, Infinity, Infinity, 0, 0);
 30881: ctx.transform(Infinity, 0, Infinity, Infinity, Infinity, 0);
 30881: ctx.transform(Infinity, 0, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.transform(Infinity, 0, Infinity, Infinity, 0, Infinity);
 30881: ctx.transform(Infinity, 0, Infinity, 0, Infinity, 0);
 30881: ctx.transform(Infinity, 0, Infinity, 0, Infinity, Infinity);
 30881: ctx.transform(Infinity, 0, Infinity, 0, 0, Infinity);
 30881: ctx.transform(Infinity, 0, 0, Infinity, 0, 0);
 30881: ctx.transform(Infinity, 0, 0, Infinity, Infinity, 0);
 30881: ctx.transform(Infinity, 0, 0, Infinity, Infinity, Infinity);
 30881: ctx.transform(Infinity, 0, 0, Infinity, 0, Infinity);
 30881: ctx.transform(Infinity, 0, 0, 0, Infinity, 0);
 30881: ctx.transform(Infinity, 0, 0, 0, Infinity, Infinity);
 30881: ctx.transform(Infinity, 0, 0, 0, 0, Infinity);
 30881: ctx.transform(0, Infinity, Infinity, 0, 0, 0);
 30881: ctx.transform(0, Infinity, Infinity, Infinity, 0, 0);
 30881: ctx.transform(0, Infinity, Infinity, Infinity, Infinity, 0);
 30881: ctx.transform(0, Infinity, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.transform(0, Infinity, Infinity, Infinity, 0, Infinity);
 30881: ctx.transform(0, Infinity, Infinity, 0, Infinity, 0);
 30881: ctx.transform(0, Infinity, Infinity, 0, Infinity, Infinity);
 30881: ctx.transform(0, Infinity, Infinity, 0, 0, Infinity);
 30881: ctx.transform(0, Infinity, 0, Infinity, 0, 0);
 30881: ctx.transform(0, Infinity, 0, Infinity, Infinity, 0);
 30881: ctx.transform(0, Infinity, 0, Infinity, Infinity, Infinity);
 30881: ctx.transform(0, Infinity, 0, Infinity, 0, Infinity);
 30881: ctx.transform(0, Infinity, 0, 0, Infinity, 0);
 30881: ctx.transform(0, Infinity, 0, 0, Infinity, Infinity);
 30881: ctx.transform(0, Infinity, 0, 0, 0, Infinity);
 30881: ctx.transform(0, 0, Infinity, Infinity, 0, 0);
 30881: ctx.transform(0, 0, Infinity, Infinity, Infinity, 0);
 30881: ctx.transform(0, 0, Infinity, Infinity, Infinity, Infinity);
 30881: ctx.transform(0, 0, Infinity, Infinity, 0, Infinity);
 30881: ctx.transform(0, 0, Infinity, 0, Infinity, 0);
 30881: ctx.transform(0, 0, Infinity, 0, Infinity, Infinity);
 30881: ctx.transform(0, 0, Infinity, 0, 0, Infinity);
 30881: ctx.transform(0, 0, 0, Infinity, Infinity, 0);
 30881: ctx.transform(0, 0, 0, Infinity, Infinity, Infinity);
 30881: ctx.transform(0, 0, 0, Infinity, 0, Infinity);
 30881: ctx.transform(0, 0, 0, 0, Infinity, Infinity);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -10, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.transform.skewed.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.transform.skewed</p>
 30881: <!-- Testing: transform() with skewy matrix transforms correctly -->
 30881: <canvas id="c605" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_transform_skewed() {
 30881: 
 30881: var canvas = document.getElementById('c605');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: // Create green with a red square ring inside it
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(20, 10, 60, 30);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(40, 20, 20, 10);
 30881: 
 30881: // Draw a skewed shape to fill that gap, to make sure it is aligned correctly
 30881: ctx.transform(1,4, 2,3, 5,6);
 30881: // Post-transform coordinates:
 30881: //   [[20,10],[80,10],[80,40],[20,40],[20,10],[40,20],[40,30],[60,30],[60,20],[40,20],[20,10]];
 30881: // Hence pre-transform coordinates:
 30881: var pts=[[-7.4,11.2],[-43.4,59.2],[-31.4,53.2],[4.6,5.2],[-7.4,11.2],
 30881:          [-15.4,25.2],[-11.4,23.2],[-23.4,39.2],[-27.4,41.2],[-15.4,25.2],
 30881:          [-7.4,11.2]];
 30881: ctx.beginPath();
 30881: ctx.moveTo(pts[0][0], pts[0][1]);
 30881: for (var i = 0; i < pts.length; ++i)
 30881:     ctx.lineTo(pts[i][0], pts[i][1]);
 30881: ctx.fill();
 30881: isPixel(ctx, 21,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 79,11, 0,255,0,255, 0);
 30881: isPixel(ctx, 21,39, 0,255,0,255, 0);
 30881: isPixel(ctx, 79,39, 0,255,0,255, 0);
 82425: isPixel(ctx, 39,19, 0,255,0,255, IsAzureSkia() ? 1 : 0);
 30881: isPixel(ctx, 61,19, 0,255,0,255, 0);
 30881: isPixel(ctx, 39,31, 0,255,0,255, 0);
 30881: isPixel(ctx, 61,31, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.translate.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.translate.basic</p>
 30881: <!-- Testing: translate() works -->
 30881: <canvas id="c606" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_translate_basic() {
 30881: 
 30881: var canvas = document.getElementById('c606');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 50);
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -50, 100, 50);
 30881: isPixel(ctx, 90,40, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.transformation.translate.nonfinite.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.transformation.translate.nonfinite</p>
 30881: <!-- Testing: translate() with Infinity/NaN is ignored -->
 30881: <canvas id="c607" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_transformation_translate_nonfinite() {
 30881: 
 30881: var canvas = document.getElementById('c607');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: 
 30881: ctx.translate(100, 10);
 30881: ctx.translate(Infinity, 0.1);
 30881: ctx.translate(-Infinity, 0.1);
 30881: ctx.translate(NaN, 0.1);
 30881: ctx.translate(0.1, Infinity);
 30881: ctx.translate(0.1, -Infinity);
 30881: ctx.translate(0.1, NaN);
 30881: ctx.translate(Infinity, Infinity);
 30881: 
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(-100, -10, 100, 50);
 30881: 
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.type.exists.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.type.exists</p>
 30881: <!-- Testing: The 2D context interface is a property of 'window' -->
 30881: <canvas id="c609" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_type_exists() {
 30881: 
 30881: var canvas = document.getElementById('c609');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.CanvasRenderingContext2D, "window.CanvasRenderingContext2D");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.type.extend.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.type.extend</p>
 30881: <!-- Testing: Interface methods can be added -->
 30881: <canvas id="c610" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_type_extend() {
 30881: 
 30881: var canvas = document.getElementById('c610');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: window.CanvasRenderingContext2D.prototype.fillRectGreen = function (x, y, w, h)
 30881: {
 30881:     this.fillStyle = '#0f0';
 30881:     this.fillRect(x, y, w, h);
 30881: };
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRectGreen(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.type.prototype.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.type.prototype</p>
 30881: <!-- Testing: window.CanvasRenderingContext2D.prototype is { DontDelete, ReadOnly }, and its methods are not -->
 30881: <canvas id="c611" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_type_prototype() {
 30881: 
 30881: var canvas = document.getElementById('c611');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.CanvasRenderingContext2D.prototype, "window.CanvasRenderingContext2D.prototype");
 30881: ok(window.CanvasRenderingContext2D.prototype.fill, "window.CanvasRenderingContext2D.prototype.fill");
 30881: window.CanvasRenderingContext2D.prototype = null;
 30881: ok(window.CanvasRenderingContext2D.prototype, "window.CanvasRenderingContext2D.prototype");
 30881: delete window.CanvasRenderingContext2D.prototype;
 30881: ok(window.CanvasRenderingContext2D.prototype, "window.CanvasRenderingContext2D.prototype");
 30881: window.CanvasRenderingContext2D.prototype.fill = 1;
 30881: ok(window.CanvasRenderingContext2D.prototype.fill === 1, "window.CanvasRenderingContext2D.prototype.fill === 1");
 30881: delete window.CanvasRenderingContext2D.prototype.fill;
 30881: todo(window.CanvasRenderingContext2D.prototype.fill === undefined, "window.CanvasRenderingContext2D.prototype.fill === undefined");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.type.replace.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.type.replace</p>
 30881: <!-- Testing: Interface methods can be overridden -->
 30881: <canvas id="c612" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_2d_type_replace() {
 30881: 
 30881: var canvas = document.getElementById('c612');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var fillRect = window.CanvasRenderingContext2D.prototype.fillRect;
 30881: window.CanvasRenderingContext2D.prototype.fillRect = function (x, y, w, h)
 30881: {
 30881:     this.fillStyle = '#0f0';
 30881:     fillRect.call(this, x, y, w, h);
 30881: };
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: //restore the original method to ensure that other tests can run successfully
 30881: window.CanvasRenderingContext2D.prototype.fillRect = fillRect;
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.voidreturn.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.voidreturn</p>
 30881: <!-- Testing: void methods return undefined -->
 30881: <canvas id="c613" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_2d_voidreturn() {
 30881: 
 30881: var canvas = document.getElementById('c613');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(ctx.save() === undefined, "ctx.save() === undefined");
 30881: ok(ctx.restore() === undefined, "ctx.restore() === undefined");
 30881: ok(ctx.scale(1, 1) === undefined, "ctx.scale(1, 1) === undefined");
 30881: ok(ctx.rotate(0) === undefined, "ctx.rotate(0) === undefined");
 30881: ok(ctx.translate(0, 0) === undefined, "ctx.translate(0, 0) === undefined");
 30881: if (ctx.transform) { // (avoid spurious failures, since the aim here is not to test that all features are supported)
 30881:     ok(ctx.transform(1, 0, 0, 1, 0, 0) === undefined, "ctx.transform(1, 0, 0, 1, 0, 0) === undefined");
 30881: }
 30881: if (ctx.setTransform) {
 30881:     ok(ctx.setTransform(1, 0, 0, 1, 0, 0) === undefined, "ctx.setTransform(1, 0, 0, 1, 0, 0) === undefined");
 30881: }
 30881: ok(ctx.clearRect(0, 0, 0, 0) === undefined, "ctx.clearRect(0, 0, 0, 0) === undefined");
 30881: ok(ctx.fillRect(0, 0, 0, 0) === undefined, "ctx.fillRect(0, 0, 0, 0) === undefined");
 30881: ok(ctx.strokeRect(0, 0, 0, 0) === undefined, "ctx.strokeRect(0, 0, 0, 0) === undefined");
 30881: ok(ctx.beginPath() === undefined, "ctx.beginPath() === undefined");
 30881: ok(ctx.closePath() === undefined, "ctx.closePath() === undefined");
 30881: ok(ctx.moveTo(0, 0) === undefined, "ctx.moveTo(0, 0) === undefined");
 30881: ok(ctx.lineTo(0, 0) === undefined, "ctx.lineTo(0, 0) === undefined");
 30881: ok(ctx.quadraticCurveTo(0, 0, 0, 0) === undefined, "ctx.quadraticCurveTo(0, 0, 0, 0) === undefined");
 30881: ok(ctx.bezierCurveTo(0, 0, 0, 0, 0, 0) === undefined, "ctx.bezierCurveTo(0, 0, 0, 0, 0, 0) === undefined");
 30881: ok(ctx.arcTo(0, 0, 0, 0, 1) === undefined, "ctx.arcTo(0, 0, 0, 0, 1) === undefined");
 30881: ok(ctx.rect(0, 0, 0, 0) === undefined, "ctx.rect(0, 0, 0, 0) === undefined");
 30881: ok(ctx.arc(0, 0, 1, 0, 0, true) === undefined, "ctx.arc(0, 0, 1, 0, 0, true) === undefined");
 30881: ok(ctx.fill() === undefined, "ctx.fill() === undefined");
 30881: ok(ctx.stroke() === undefined, "ctx.stroke() === undefined");
 30881: ok(ctx.clip() === undefined, "ctx.clip() === undefined");
 30881: if (ctx.putImageData) {
 30881:     ok(ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined, "ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined");
 30881: }
 74273: ok(ctx.drawImage(document.getElementById('yellow_11.png'), 0, 0, 0, 0, 0, 0, 0, 0) === undefined, "ctx.drawImage(document.getElementById('yellow_11.png'), 0, 0, 0, 0, 0, 0, 0, 0) === undefined");
 74273: ok(ctx.drawImage(canvas, 0, 0, 0, 0, 0, 0, 0, 0) === undefined, "ctx.drawImage(canvas, 0, 0, 0, 0, 0, 0, 0, 0) === undefined");
 30881: ok(ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined, "ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: <img src="image_yellow.png" id="yellow_11.png" class="resource">
 30881: 
 30881: <!-- [[[ test_bug397524.html ]]] -->
 30881: 
 30881: <p>Test for Bug 397524</p>
 30881: <a target="_blank" href="https://bugzilla.mozilla.org/show_bug.cgi?id=397524">Mozilla Bug 397524</a>
 30881: <p id="display">
 30881:   <canvas id="canvas1" width="1" height="1"></canvas>
 30881:   <canvas id="canvas2" width="1" height="1"></canvas>
 30881:   <canvas id="canvas3" width="1" height="1"></canvas>
 30881:   <img id="i1", src="image_green-1x1.png">
 30881:   <img id="i2" src="http://example.com/tests/content/canvas/test/image_green-1x1.png">
 30881:   <img id="i3" src="image_green-redirect">
 30881: </p>
 30881: <div id="content" style="display: none">
 30881:   
 30881: </div>
 30881: <pre id="test">
 30881: <script class="testbody" type="text/javascript">
 30881: 
 30881: /** Test for Bug 397524 **/
 30881: 
 30881: function draw(n) {
 30881:   $("canvas" + n).getContext('2d').drawImage($("i" + n), 0, 0);
 30881: }
 30881: 
 30881: function test_bug397524() {
 30881:   draw(1);
 30881:   draw(2);
 30881:   draw(3);
 30881: 
 30881:   // Should be able to get the data out of the first canvas
 30881:   $("canvas1").toDataURL("image/png");
 30881: 
 30881:   // Should not be able to get the data out of a cross-site load
 30881:   var gotData = false;  
 30881:   try {
 30881:     $("canvas2").toDataURL("image/png");
 30881:     gotData = true;
 90761:   } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
 30881:   }
 30881:   is(gotData, false, "Shouldn't be able to read images cross-site!");
 30881: 
 30881:   // Should not be able to get the data out of a redirected cross-site load
 30881:   var gotData = false;  
 30881:   try {
 30881:     $("canvas3").toDataURL("image/png");
 30881:     gotData = true;
 90761:   } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
 30881:   }
 30881:   is(gotData, false, "Shouldn't be able to read images redirected cross-site!");
 30881: 
 30881: }
 30881: 
 30881: </script>
 30881: </pre>
 30881: 
 30881: <!-- [[[ test_bug405982.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.png</p>
 30881: <canvas id="c614" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: function test_bug405982() {
 30881: 
 30881: var canvas = document.getElementById('c614');
 30881: var ctx = canvas.getContext('2d');
 30881: netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
 30881: 
 70899: var _threw = false;
 30881: try {
 30881:   var data = canvas.toDataURL('image/png', 'quality=100');
 30881: }
 30881: catch (e) {
 70899:   _threw = true;
 70899: }
 70899: ok(!_threw, "Should not throw an exception for invalid args to png encoder");
 70899: 
 70899: _threw = false;
 30881: try {
 30881:   var data = canvas.toDataURL('image/jpeg', 'foobar=true');
 30881: }
 30881: catch (e) {
 70899:   _threw = true;
 70899: }
 70899: ok(!_threw, "Should not throw an exception for invalid args to jpeg encoder");
 30881: 
 30881: }
 30881: </script>
 30881: <!-- [[[ test_context.arguments.extra.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.arguments.extra</p>
 30881: <canvas id="c615" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_arguments_extra() {
 30881: 
 30881: var canvas = document.getElementById('c615');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.getContext('2d', 'foo') !== null, "canvas.getContext('2d', 'foo') !== null");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.arguments.missing.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.arguments.missing</p>
 30881: <canvas id="c616" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_arguments_missing() {
 30881: 
 30881: var canvas = document.getElementById('c616');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown = undefined; try {
 30881:   canvas.getContext();
 97033: } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.casesensitive.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.casesensitive - bug 401788</p>
 30881: <!-- Testing: Context name "2D" is unrecognised; matching is case sensitive -->
 30881: <canvas id="c617" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_casesensitive() {
 30881: 
 30881: var canvas = document.getElementById('c617');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext('2D') === null, "canvas.getContext('2D') === null");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.emptystring.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.emptystring - bug 401788</p>
 30881: <!-- Testing: getContext with empty string returns null -->
 30881: <canvas id="c618" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_emptystring() {
 30881: 
 30881: var canvas = document.getElementById('c618');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext("") === null, "canvas.getContext(\"\") === null");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.unrecognised.badname.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.unrecognised.badname - bug 401788</p>
 30881: <!-- Testing: getContext with unrecognised context name returns null -->
 30881: <canvas id="c619" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_unrecognised_badname() {
 30881: 
 30881: var canvas = document.getElementById('c619');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext('This is not an implemented context in any real browser') === null, "canvas.getContext('This is not an implemented context in any real browser') === null");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.unrecognised.badsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.unrecognised.badsuffix - bug 401788</p>
 30881: <!-- Testing: Context name "2d" plus a suffix is unrecognised -->
 30881: <canvas id="c620" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_unrecognised_badsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c620');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext("2d#") === null, "canvas.getContext(\"2d#\") === null");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.unrecognised.nullsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.unrecognised.nullsuffix - bug 401788</p>
 30881: <!-- Testing: Context name "2d" plus a "\0" suffix is unrecognised -->
 30881: <canvas id="c621" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_unrecognised_nullsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c621');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext("2d\0") === null, "canvas.getContext(\"2d\\0\") === null");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_context.unrecognised.unicode.html ]]] -->
 30881: 
 30881: <p>Canvas test: context.unrecognised.unicode - bug 401788</p>
 30881: <!-- Testing: Context name which kind of looks like "2d" is unrecognised -->
 30881: <canvas id="c622" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_context_unrecognised_unicode() {
 30881: 
 30881: var canvas = document.getElementById('c622');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: ok(canvas.getContext("2\uFF44") === null, "canvas.getContext(\"2\\uFF44\") === null"); // Fullwidth Latin Small Letter D
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_fallback.basic.html ]]] -->
 30881: 
 30881: <p>Canvas test: fallback.basic</p>
 30881: <!-- Testing: Fallback content is inserted into the DOM -->
 30881: <canvas id="c623" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_fallback_basic() {
 30881: 
 30881: var canvas = document.getElementById('c623');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.childNodes.length == 1, "canvas.childNodes.length == 1");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_fallback.multiple.html ]]] -->
 30881: 
 30881: <p>Canvas test: fallback.multiple</p>
 30881: <!-- Testing: Fallback content with multiple elements -->
 30881: <canvas id="c624" width="100" height="50"><p class="fallback">FAIL</p><p class="fallback">FAIL</p></canvas>
 30881: <script>
 30881: 
 30881: function test_fallback_multiple() {
 30881: 
 30881: var canvas = document.getElementById('c624');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.childNodes.length == 2, "canvas.childNodes.length == 2");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_fallback.nested.html ]]] -->
 30881: 
 30881: <p>Canvas test: fallback.nested</p>
 30881: <!-- Testing: Fallback content containing another canvas (mostly testing parsers) -->
 30881: <canvas id="c625" width="100" height="50"><canvas><p class="fallback">FAIL (fallback content)</p></canvas><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_fallback_nested() {
 30881: 
 30881: var canvas = document.getElementById('c625');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.childNodes.length == 2, "canvas.childNodes.length == 2");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.colour.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.colour</p>
 30881: <!-- Testing: Initial state is transparent black -->
 30881: <canvas id="c626" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_colour() {
 30881: 
 30881: var canvas = document.getElementById('c626');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: isPixel(ctx, 20,20, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.2dstate.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.2dstate</p>
 30881: <!-- Testing: Resetting the canvas state resets 2D state variables -->
 30881: <canvas id="c627" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_initial_reset_2dstate() {
 30881: 
 30881: var canvas = document.getElementById('c627');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 100;
 30881: var default_val;
 30881: 
 30881: default_val = ctx.strokeStyle;
 30881: ctx.strokeStyle = "#ff0000";
 30881: canvas.width = 100;
 30881: ok(ctx.strokeStyle === default_val, "ctx.strokeStyle === default_val");
 30881: 
 30881: default_val = ctx.fillStyle;
 30881: ctx.fillStyle = "#ff0000";
 30881: canvas.width = 100;
 30881: ok(ctx.fillStyle === default_val, "ctx.fillStyle === default_val");
 30881: 
 30881: default_val = ctx.globalAlpha;
 30881: ctx.globalAlpha = 0.5;
 30881: canvas.width = 100;
 30881: ok(ctx.globalAlpha === default_val, "ctx.globalAlpha === default_val");
 30881: 
 30881: default_val = ctx.lineWidth;
 30881: ctx.lineWidth = 0.5;
 30881: canvas.width = 100;
 30881: ok(ctx.lineWidth === default_val, "ctx.lineWidth === default_val");
 30881: 
 30881: default_val = ctx.lineCap;
 30881: ctx.lineCap = "round";
 30881: canvas.width = 100;
 30881: ok(ctx.lineCap === default_val, "ctx.lineCap === default_val");
 30881: 
 30881: default_val = ctx.lineJoin;
 30881: ctx.lineJoin = "round";
 30881: canvas.width = 100;
 30881: ok(ctx.lineJoin === default_val, "ctx.lineJoin === default_val");
 30881: 
 30881: default_val = ctx.miterLimit;
 30881: ctx.miterLimit = 0.5;
 30881: canvas.width = 100;
 30881: ok(ctx.miterLimit === default_val, "ctx.miterLimit === default_val");
 30881: 
 30881: default_val = ctx.shadowOffsetX;
 30881: ctx.shadowOffsetX = 5;
 30881: canvas.width = 100;
 30881: ok(ctx.shadowOffsetX === default_val, "ctx.shadowOffsetX === default_val");
 30881: 
 30881: default_val = ctx.shadowOffsetY;
 30881: ctx.shadowOffsetY = 5;
 30881: canvas.width = 100;
 30881: ok(ctx.shadowOffsetY === default_val, "ctx.shadowOffsetY === default_val");
 30881: 
 30881: default_val = ctx.shadowBlur;
 30881: ctx.shadowBlur = 5;
 30881: canvas.width = 100;
 30881: ok(ctx.shadowBlur === default_val, "ctx.shadowBlur === default_val");
 30881: 
 30881: default_val = ctx.shadowColor;
 30881: ctx.shadowColor = "#ff0000";
 30881: canvas.width = 100;
 30881: ok(ctx.shadowColor === default_val, "ctx.shadowColor === default_val");
 30881: 
 30881: default_val = ctx.globalCompositeOperation;
 30881: ctx.globalCompositeOperation = "copy";
 30881: canvas.width = 100;
 30881: ok(ctx.globalCompositeOperation === default_val, "ctx.globalCompositeOperation === default_val");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.clip.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.clip</p>
 30881: <!-- Testing: Resetting the canvas state resets the current clip region -->
 30881: <canvas id="c628" width="100" height="50" style="background: #f00"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_clip() {
 30881: 
 30881: var canvas = document.getElementById('c628');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 100;
 30881: ctx.rect(0, 0, 1, 1);
 30881: ctx.clip();
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 20,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.different.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.different</p>
 30881: <!-- Testing: Changing size resets canvas to transparent black -->
 30881: <canvas id="c629" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_different() {
 30881: 
 30881: var canvas = document.getElementById('c629');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 20,20, 255,0,0,255, 0);
 30881: canvas.width = 50;
 30881: isPixel(ctx, 20,20, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.gradient.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.gradient</p>
 30881: <!-- Testing: Resetting the canvas state does not invalidate any existing gradients -->
 30881: <canvas id="c630" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_gradient() {
 30881: 
 30881: var canvas = document.getElementById('c630');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 50;
 30881: var g = ctx.createLinearGradient(0, 0, 100, 0);
 30881: g.addColorStop(0, '#0f0');
 30881: g.addColorStop(1, '#0f0');
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = g;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.path.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.path</p>
 30881: <!-- Testing: Resetting the canvas state resets the current path -->
 30881: <canvas id="c631" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_path() {
 30881: 
 30881: var canvas = document.getElementById('c631');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 100;
 30881: ctx.rect(0, 0, 100, 50);
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fill();
 30881: isPixel(ctx, 20,20, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.pattern.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.pattern</p>
 30881: <!-- Testing: Resetting the canvas state does not invalidate any existing patterns -->
 30881: <canvas id="c632" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_pattern() {
 30881: 
 30881: var canvas = document.getElementById('c632');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 50;
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: var p = ctx.createPattern(canvas, 'repeat-x');
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: ctx.fillStyle = p;
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 50,25, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.same.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.same</p>
 30881: <!-- Testing: Setting size (not changing the value) resets canvas to transparent black -->
 30881: <canvas id="c633" width="100" height="50" style="background: #0f0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_same() {
 30881: 
 30881: var canvas = document.getElementById('c633');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#f00';
 30881: ctx.fillRect(0, 0, 50, 50);
 30881: isPixel(ctx, 20,20, 255,0,0,255, 0);
 30881: canvas.width = 100;
 30881: isPixel(ctx, 20,20, 0,0,0,0, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_initial.reset.transform.html ]]] -->
 30881: 
 30881: <p>Canvas test: initial.reset.transform</p>
 30881: <!-- Testing: Resetting the canvas state resets the current transformation matrix -->
 30881: <canvas id="c634" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: function test_initial_reset_transform() {
 30881: 
 30881: var canvas = document.getElementById('c634');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 100;
 30881: ctx.scale(0, 0);
 30881: canvas.width = 100;
 30881: ctx.fillStyle = '#0f0';
 30881: ctx.fillRect(0, 0, 100, 50);
 30881: isPixel(ctx, 20,20, 0,255,0,255, 0);
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.default</p>
 30881: <!-- Testing: Default width/height -->
 30881: <canvas id="c635" ><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_default() {
 30881: 
 30881: var canvas = document.getElementById('c635');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 300, "canvas.width == 300");
 30881: ok(canvas.height == 150, "canvas.height == 150");
 30881: ok(!canvas.hasAttribute('width'), "!canvas.hasAttribute('width')");
 30881: ok(!canvas.hasAttribute('height'), "!canvas.hasAttribute('height')");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes</p>
 30881: <!-- Testing: width/height DOM attributes and content attributes -->
 30881: <canvas id="c636" width="120" height="60"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes() {
 30881: 
 30881: var canvas = document.getElementById('c636');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 120, "canvas.width == 120");
 30881: ok(canvas.height == 60, "canvas.height == 60");
 30881: ok(canvas.getAttribute('width') == 120, "canvas.getAttribute('width') == 120");
 30881: ok(canvas.getAttribute('height') == 60, "canvas.getAttribute('height') == 60");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.badsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.badsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c637" width="100foo" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_badsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c637');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 79605: is(canvas.width, 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.floatsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.floatsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c638" width="100.9" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_floatsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c638');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.negative</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c639" width="-100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_negative() {
 30881: 
 30881: var canvas = document.getElementById('c639');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 63873: ok(canvas.width == 300, "canvas.width == 300");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.nonnumber.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.nonnumber</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c640" width="foo" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_nonnumber() {
 30881: 
 30881: var canvas = document.getElementById('c640');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 300, "canvas.width == 300");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.percentsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.percentsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c641" width="100%" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_percentsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c641');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.whitespace.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.whitespace</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c642" width="   100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_whitespace() {
 30881: 
 30881: var canvas = document.getElementById('c642');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.zero</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c643" width="0" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_zero() {
 30881: 
 30881: var canvas = document.getElementById('c643');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 0, "canvas.width == 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.parse.zerosuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.parse.zerosuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers -->
 30881: <canvas id="c644" width="100.0" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_parse_zerosuffix() {
 30881: 
 30881: var canvas = document.getElementById('c644');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.reflect.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.reflect.1</p>
 30881: <!-- Testing: Setting DOM attributes updates DOM and content attributes -->
 30881: <canvas id="c645" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_reflect_1() {
 30881: 
 30881: var canvas = document.getElementById('c645');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 120;
 30881: canvas.height = 60;
 30881: ok(canvas.getAttribute('width') == '120', "canvas.getAttribute('width') == '120'");
 30881: ok(canvas.getAttribute('height') == '60', "canvas.getAttribute('height') == '60'");
 30881: ok(canvas.width == 120, "canvas.width == 120");
 30881: ok(canvas.height == 60, "canvas.height == 60");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.reflect.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.reflect.2</p>
 30881: <!-- Testing: Setting content attributes updates DOM and content attributes -->
 30881: <canvas id="c646" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_reflect_2() {
 30881: 
 30881: var canvas = document.getElementById('c646');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '120');
 30881: canvas.setAttribute('height', '60');
 30881: ok(canvas.getAttribute('width') == '120', "canvas.getAttribute('width') == '120'");
 30881: ok(canvas.getAttribute('height') == '60', "canvas.getAttribute('height') == '60'");
 30881: ok(canvas.width == 120, "canvas.width == 120");
 30881: ok(canvas.height == 60, "canvas.height == 60");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.removed.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.removed</p>
 30881: <!-- Testing: Removing content attributes reverts to default size -->
 30881: <canvas id="c647" width="120" height="60"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_removed() {
 30881: 
 30881: var canvas = document.getElementById('c647');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.removeAttribute('width');
 30881: ok(canvas.width == 300, "canvas.width == 300");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.badsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.badsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c648" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_badsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c648');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '100foo');
 79605: is(canvas.width, 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.floatsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.floatsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c649" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_floatsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c649');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '1');
 30881: canvas.setAttribute('width', '100.9');
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.negative.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.negative</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c650" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_negative() {
 30881: 
 30881: var canvas = document.getElementById('c650');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '-100');
 63873: ok(canvas.width == 300, "canvas.width == 300");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.nonnumber.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.nonnumber</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c651" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_nonnumber() {
 30881: 
 30881: var canvas = document.getElementById('c651');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', 'foo');
 30881: ok(canvas.width == 300, "canvas.width == 300");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.percentsuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.percentsuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c652" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_percentsuffix() {
 30881: 
 30881: var canvas = document.getElementById('c652');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '100%');
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.whitespace.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.whitespace</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c653" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_whitespace() {
 30881: 
 30881: var canvas = document.getElementById('c653');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '   100');
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.zero.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.zero</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c654" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_zero() {
 30881: 
 30881: var canvas = document.getElementById('c654');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '0');
 30881: ok(canvas.width == 0, "canvas.width == 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.setAttribute.zerosuffix.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.setAttribute.zerosuffix</p>
 30881: <!-- Testing: Parsing of non-negative integers in setAttribute -->
 30881: <canvas id="c655" width="50" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_setAttribute_zerosuffix() {
 30881: 
 30881: var canvas = document.getElementById('c655');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.setAttribute('width', '1');
 30881: canvas.setAttribute('width', '100.0');
 30881: ok(canvas.width == 100, "canvas.width == 100");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.style.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.style</p>
 30881: <!-- Testing: Canvas size is independent of CSS resizing -->
 30881: <canvas id="c656" width="50" height="30" style="width: 100px; height: 50px"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_style() {
 30881: 
 30881: var canvas = document.getElementById('c656');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width == 50, "canvas.width == 50");
 30881: ok(canvas.height == 30, "canvas.height == 30");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.type.get.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.type.get</p>
 30881: <!-- Testing: width/height DOM/content attributes - string vs number types -->
 30881: <canvas id="c657" width="120" height="60"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_type_get() {
 30881: 
 30881: var canvas = document.getElementById('c657');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(canvas.width === 120, "canvas.width === 120");
 30881: ok(canvas.height === 60, "canvas.height === 60");
 30881: ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
 30881: ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_size.attributes.type.set.html ]]] -->
 30881: 
 30881: <p>Canvas test: size.attributes.type.set</p>
 30881: <!-- Testing: Setting width/height DOM attributes -->
 30881: <canvas id="c658" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_size_attributes_type_set() {
 30881: 
 30881: var canvas = document.getElementById('c658');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: canvas.width = 120;
 30881: canvas.height = 60;
 30881: ok(canvas.width === 120, "canvas.width === 120");
 30881: ok(canvas.height === 60, "canvas.height === 60");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_text.font.html ]]] -->
 30881: 
 30881: <p>Canvas test: text.font</p>
 30881: <canvas id="c659" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: var _deferred = true;
 30881: 
 30881: function test_text_font() {
 30881: 
 30881: var canvas = document.getElementById('c659');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: is(ctx.font, '10px sans-serif', "default font is not '10px sans-serif'");
 30881: 
 30881: ctx.save();
 30881: ctx.font = '20pt serif';
 30881: is(ctx.font, '20pt serif', 'font getter returns incorrect value');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.font, '10px sans-serif', 'font not being stored in the context state');
 30881: 
 30881: if (!_deferred) SimpleTest.finish();
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_text.measure.html ]]] -->
 30881: 
 30881: <p>Canvas test: text.measure</p>
 30881: <canvas id="c660" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: var _deferred = true;
 30881: 
 30881: function test_text_measure() {
 30881: 
 30881: var canvas = document.getElementById('c660');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ctx.font = "10px sans-serif";
 30881: ctx.textAlign = "left";
 30881: ctx.textBaseline = "top";
 30881: 
 30881: var str = 'Test String';
 30881: var wid = ctx.measureText(str).width;
 30881: 
 30881: ok(wid > 0, "measureText returns nonpositive value for non-empty string");
 30881: 
 30881: ctx.font = "20px sans-serif";
 30881: isnot(wid, ctx.measureText(str).width, "measureText does not change with a different font size");
 30881: 
 30881: ctx.font = "10px sans-serif";
 30881: ctx.textAlign = "center";
 30881: ctx.textBaseline = "alphabetic";
 30881: 
 30881: is(wid, ctx.measureText(str).width, "measureText changes when alignement/baseline is changed");
 30881: 
 30881: 
 30881: if (!_deferred) SimpleTest.finish();
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_text.space.replace.html ]]] -->
 30881: 
 30881: <p>Canvas test: text.space.replace</p>
 30881: <canvas id="c661" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: var _deferred = true;
 30881: 
 30881: function test_text_space_replace() {
 30881: 
 30881: var canvas = document.getElementById('c661');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var swid = ctx.measureText(' ').width;
 30881: ctx.font = "10px sans-serif";
 30881: 
 30881: isnot(swid, 0.0, "measureText reutuns zero for a non-empty string");
 30881: is(swid, ctx.measureText('\x09').width, "measureText does not replace whitespace char with a space");
 30881: is(swid, ctx.measureText('\x0A').width, "measureText does not replace whitespace char with a space");
 30881: is(swid, ctx.measureText('\x0B').width, "measureText does not replace whitespace char with a space");
 30881: is(swid, ctx.measureText('\x0C').width, "measureText does not replace whitespace char with a space");
 30881: is(swid, ctx.measureText('\x0D').width, "measureText does not replace whitespace char with a space");
 30881: 
 30881: if (!_deferred) SimpleTest.finish();
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_text.textAlign.html ]]] -->
 30881: 
 30881: <p>Canvas test: text.textAlign</p>
 30881: <canvas id="c662" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: var _deferred = true;
 30881: 
 30881: function test_text_textAlign() {
 30881: 
 30881: var canvas = document.getElementById('c662');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: is(ctx.textAlign, 'start', "default textAlign is not 'start'");
 30881: 
 30881: ctx.save();
 30881: ctx.textAlign = 'end';
 30881: is(ctx.textAlign, 'end', 'textAlign getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textAlign = 'left';
 30881: is(ctx.textAlign, 'left', 'textAlign getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textAlign = 'center';
 30881: is(ctx.textAlign, 'center', 'textAlign getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textAlign = 'right';
 30881: is(ctx.textAlign, 'right', 'textAlign getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textAlign = 'start';
 30881: is(ctx.textAlign, 'start', 'textAlign getter returns incorrect value');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textAlign, 'right', 'textAlign not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textAlign, 'center', 'textAlign not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textAlign, 'left', 'textAlign not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textAlign, 'end', 'textAlign not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textAlign, 'start', 'textAlign not being stored in the context state');
 30881: 
 30881: if (!_deferred) SimpleTest.finish();
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_text.textBaseline.html ]]] -->
 30881: 
 30881: <p>Canvas test: text.textBaseline</p>
 30881: <canvas id="c663" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: var _deferred = true;
 30881: 
 30881: function test_text_textBaseline() {
 30881: 
 30881: var canvas = document.getElementById('c663');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: is(ctx.textBaseline, 'alphabetic', "default textBaseline is not 'alphabetic'");
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'ideographic';
 30881: is(ctx.textBaseline, 'ideographic', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'top';
 30881: is(ctx.textBaseline, 'top', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'middle';
 30881: is(ctx.textBaseline, 'middle', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'bottom';
 30881: is(ctx.textBaseline, 'bottom', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'hanging';
 30881: is(ctx.textBaseline, 'hanging', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.save();
 30881: ctx.textBaseline = 'alphabetic';
 30881: is(ctx.textBaseline, 'alphabetic', 'textBaseline getter returns incorrect value');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'hanging', 'textBaseline not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'bottom', 'textBaseline not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'middle', 'textBaseline not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'top', 'textBaseline not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'ideographic', 'textBaseline not being stored in the context state');
 30881: 
 30881: ctx.restore();
 30881: is(ctx.textBaseline, 'alphabetic', 'textBaseline not being stored in the context state');
 30881: 
 30881: if (!_deferred) SimpleTest.finish();
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.arguments.1.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.arguments.1 - bug 401795</p>
 30881: <!-- Testing: toDataURL ignores extra arguments -->
 30881: <canvas id="c664" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_arguments_1() {
 30881: 
 30881: var canvas = document.getElementById('c664');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var data = canvas.toDataURL('image/png', 'another argument that should not raise an exception');
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.arguments.2.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.arguments.2 - bug 401795</p>
 30881: <!-- Testing: toDataURL ignores extra arguments -->
 30881: <canvas id="c665" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_arguments_2() {
 30881: 
 30881: var canvas = document.getElementById('c665');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var data = canvas.toDataURL('image/png', 'another argument that should not raise an exception', 'and another');
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.arguments.3.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.arguments.3 - bug 401795</p>
 30881: <!-- Testing: toDataURL ignores extra arguments -->
 30881: <canvas id="c666" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_arguments_3() {
 30881: 
 30881: var canvas = document.getElementById('c666');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: // More arguments that should not raise exceptions
 30881: var data = canvas.toDataURL('image/png', null, null, null);
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.complexcolours.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.complexcolours</p>
 30881: <!-- Testing: toDataURL handles non-primary and non-solid colours correctly -->
 30881: <canvas id="c667" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: var canvas667 = document.getElementById('c667');
 30881: var ctx667 = canvas667.getContext('2d');
 30881: 
 30881: function test_toDataURL_complexcolours() {
 30881: 
 30881: // (These values are chosen to survive relatively alright through being premultiplied)
 30881: ctx667.fillStyle = 'rgba(1, 3, 254, 1)';
 30881: ctx667.fillRect(0, 0, 25, 25);
 30881: ctx667.fillStyle = 'rgba(8, 252, 248, 0.75)';
 30881: ctx667.fillRect(25, 0, 25, 25);
 30881: ctx667.fillStyle = 'rgba(6, 10, 250, 0.502)';
 30881: ctx667.fillRect(50, 0, 25, 25);
 30881: ctx667.fillStyle = 'rgba(12, 16, 244, 0.25)';
 30881: ctx667.fillRect(75, 0, 25, 25);
 30881: var img = new Image();
 30881: deferTest();
 30881: img.onload = wrapFunction(function ()
 30881: {
 30881:     ctx667.drawImage(img, 0, 25);
 30881:     // (The alpha values do not really survive float->int conversion, so just
 30881:     // do approximate comparisons)
 86396:     netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
 30881:     isPixel(ctx667, 12,40, 1,3,254,255, 0);
 30881:     isPixel(ctx667, 37,40, 8,252,248,191, 2);
 30881:     isPixel(ctx667, 62,40, 6,10,250,127, 4);
 30881:     isPixel(ctx667, 87,40, 12,16,244,63, 8);
 30881: });
 30881: img.src = canvas667.toDataURL();
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.default.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.default</p>
 30881: <!-- Testing: toDataURL with no arguments returns a PNG -->
 30881: <canvas id="c668" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_default() {
 30881: 
 30881: var canvas = document.getElementById('c668');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var data = canvas.toDataURL();
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.lowercase.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.lowercase - bug 401795</p>
 30881: <!-- Testing: toDataURL type is case-sensitive -->
 30881: <canvas id="c669" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_lowercase() {
 30881: 
 30881: var canvas = document.getElementById('c669');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var data = canvas.toDataURL('ImAgE/PnG');
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.nocontext.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.nocontext</p>
 30881: <!-- Testing: toDataURL works before any context has been got -->
 30881: <canvas id="c670" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_nocontext() {
 30881: 
 30881: var canvas = document.getElementById('c670');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var canvas2 = document.createElement('canvas');
 38928: 
 30881: var data = canvas2.toDataURL();
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.png.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.png</p>
 30881: <!-- Testing: toDataURL with image/png returns a PNG -->
 30881: <canvas id="c671" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_png() {
 30881: 
 30881: var canvas = document.getElementById('c671');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var data = canvas.toDataURL('image/png');
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.primarycolours.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.primarycolours</p>
 30881: <!-- Testing: toDataURL handles simple colours correctly -->
 30881: <canvas id="c672" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: 
 30881: var canvas672 = document.getElementById('c672');
 30881: var ctx672 = canvas672.getContext('2d');
 30881: 
 30881: function test_toDataURL_primarycolours() {
 30881: 
 30881: ctx672.fillStyle = '#ff0';
 30881: ctx672.fillRect(0, 0, 25, 40);
 30881: ctx672.fillStyle = '#0ff';
 30881: ctx672.fillRect(25, 0, 50, 40);
 30881: ctx672.fillStyle = '#00f';
 30881: ctx672.fillRect(75, 0, 25, 40);
 30881: ctx672.fillStyle = '#fff';
 30881: ctx672.fillRect(0, 40, 100, 10);
 30881: var data = canvas672.toDataURL();
 30881: ctx672.fillStyle = '#f00';
 30881: ctx672.fillRect(0, 0, 100, 50);
 30881: var img = new Image();
 30881: deferTest();
 30881: img.onload = wrapFunction(function ()
 30881: {
 30881:     ctx672.drawImage(img, 0, 0);
 86396:     netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
 30881:     isPixel(ctx672, 12,20, 255,255,0,255, 0);
 30881:     isPixel(ctx672, 50,20, 0,255,255,255, 0);
 30881:     isPixel(ctx672, 87,20, 0,0,255,255, 0);
 30881:     isPixel(ctx672, 50,45, 255,255,255,255, 0);
 30881: });
 30881: img.src = data;
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.unrecognised.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.unrecognised - bug 401795</p>
 30881: <!-- Testing: toDataURL with an unhandled type returns a PNG -->
 30881: <canvas id="c673" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_unrecognised() {
 30881: 
 30881: var canvas = document.getElementById('c673');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var _thrown_outer = false;
 30881: try {
 30881: 
 30881: var data = canvas.toDataURL('image/example');
 38928: ok(/^data:image\/png[;,]/.test(data), "data =~ /^data:image\\/png[;,]/");
 30881: 
 30881: } catch (e) {
 30881:     _thrown_outer = true;
 30881: }
 72431: ok(!_thrown_outer, ctx.canvas.id + ' should not throw exception');
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_toDataURL.zerosize.html ]]] -->
 30881: 
 30881: <p>Canvas test: toDataURL.zerosize</p>
 30881: <!-- Testing: toDataURL on zero-size canvas returns 'data:,' -->
 30881: <canvas id="c674" width="0" height="0"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_toDataURL_zerosize() {
 30881: 
 30881: var canvas = document.getElementById('c674');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: var data = canvas.toDataURL();
 70118: ok(data === 'data:,', "data === 'data:,'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_type.exists.html ]]] -->
 30881: 
 30881: <p>Canvas test: type.exists</p>
 30881: <!-- Testing: HTMLCanvasElement is a property of window -->
 30881: <canvas id="c676" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_type_exists() {
 30881: 
 30881: var canvas = document.getElementById('c676');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.HTMLCanvasElement, "window.HTMLCanvasElement");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_type.extend.html ]]] -->
 30881: 
 30881: <p>Canvas test: type.extend</p>
 30881: <!-- Testing: HTMLCanvasElement methods can be added, and the new methods used by canvases -->
 30881: <canvas id="c677" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_type_extend() {
 30881: 
 30881: var canvas = document.getElementById('c677');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: window.HTMLCanvasElement.prototype.getZero = function () { return 0; };
 30881: ok(canvas.getZero() === 0, "canvas.getZero() === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_type.name.html ]]] -->
 30881: 
 30881: <p>Canvas test: type.name</p>
 30881: <!-- Testing: HTMLCanvasElement type and toString -->
 30881: <canvas id="c678" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_type_name() {
 30881: 
 30881: var canvas = document.getElementById('c678');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]', "Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]'");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_type.prototype.html ]]] -->
 30881: 
 30881: <p>Canvas test: type.prototype</p>
 30881: <!-- Testing: window.HTMLCanvasElement has prototype, which is { ReadOnly, DontDelete }. prototype has getContext, which is not -->
 30881: <canvas id="c679" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_type_prototype() {
 30881: 
 30881: var canvas = document.getElementById('c679');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: ok(window.HTMLCanvasElement.prototype, "window.HTMLCanvasElement.prototype");
 30881: ok(window.HTMLCanvasElement.prototype.getContext, "window.HTMLCanvasElement.prototype.getContext");
 30881: window.HTMLCanvasElement.prototype = null;
 30881: ok(window.HTMLCanvasElement.prototype, "window.HTMLCanvasElement.prototype");
 30881: delete window.HTMLCanvasElement.prototype;
 30881: ok(window.HTMLCanvasElement.prototype, "window.HTMLCanvasElement.prototype");
 30881: window.HTMLCanvasElement.prototype.getContext = 1;
 30881: ok(window.HTMLCanvasElement.prototype.getContext === 1, "window.HTMLCanvasElement.prototype.getContext === 1");
 30881: delete window.HTMLCanvasElement.prototype.getContext;
 30881: todo(window.HTMLCanvasElement.prototype.getContext === undefined, "window.HTMLCanvasElement.prototype.getContext === undefined");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_type.replace.html ]]] -->
 30881: 
 30881: <p>Canvas test: type.replace</p>
 30881: <!-- Testing: HTMLCanvasElement methods can be replaced, and the replacement methods used by canvases -->
 30881: <canvas id="c680" width="100" height="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: function test_type_replace() {
 30881: 
 30881: var canvas = document.getElementById('c680');
 30881: var ctx = canvas.getContext('2d');
 30881: 
 30881: window.HTMLCanvasElement.prototype.getContext = function (name) { return 0; };
 30881: ok(canvas.getContext('2d') === 0, "canvas.getContext('2d') === 0");
 30881: 
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imagedata_coercion.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imagedata_coercion</p>
 30881: <!-- Testing: imagedata coerced correctly on set -->
 30881: <canvas id="c681" width="100" height="1"><p class="fallback">FAIL (fallback content)</p></canvas>
 30881: <script>
 30881: 
 30881: /* NOTE: Due to round-tripping through premultiplied values and the rounding
 30881: that ensues, values of alpha < 255 will tend to do weird things.  In
 30881: particular, the premultiplied color values are computed by multiplying by a,
 30881: dividing by 255, then always rounding up.  The conversion the other way is done
 30881: by multiplying by 255/a and rounding down.  So if
 30881: 
 30881:   255/a * (amount added when rounding) > 1
 30881: 
 30881: we will get a change in value when we go through a putImageData/getImageData cycle.  Therefore, to make sure we don't have to worry about our color
 30881: channels, our alpha channel should never be < 250, unless it's 0.  And when it's 0, all our color channels will come back as 0 too. */
 30881:   
 30881: /* Our tests.  Each test has two arrays: the array of values to set and the
 30881:    array of values that should read back as a result. */
 30881: var tests = [
 30881:   [
 30881:     [ 0, 1, 3, 250 ], [ 0, 1, 3, 250 ]
 30881:   ],
 30881:   [
 30881:     [ 0, 1, 2, 250, 4, 5, 6, 250 ], [ 0, 1, 2, 250, 4, 5, 6, 250 ]
 30881:   ],
 30881:   [
 30881:     [ 0, 1000, 2, 300, 400, 5, 600, 250 ], [ 0, 255, 2, 255, 255, 5, 255, 250 ]
 30881:   ],
 30881:   [
 30881:     [ -10, -5, NaN, 250, 4, 5, 6, -250 ], [ 0, 0, 0, 250, 0, 0, 0, 0 ]
 30881:   ],
 30881:   [
 30881:     [ 0.5, 12.2, 12.8, 251.5, 12.5, 13.5, 13.2, 250.5 ],
 30881:     [ 0, 12, 13, 252, 12, 14, 13, 250 ]
 30881:   ]
 30881: ];
 30881: 
 30881: function doTest(type, idx) {
 30881:   var testPair = tests[idx];
 30881:   var test = testPair[0];
 30881:   var ref = testPair[1];
 30881:   var descSuffix = " for " + type + " test #" + (idx+1);
 30881:   function myIs(a, b, str) {
 30881:     is(a, b, str + descSuffix);
 30881:   }
 30881: 
 30881:   myIs(test.length, ref.length, "Length mismatch");
 30881:   myIs(test.length % 4, 0, "Length not a multiple of 4");
 30881:   var pixels = test.length / 4;
 30881:   var imageData = ctx681.createImageData(pixels, 1);
 30881:   myIs(imageData.width, pixels, "Incorrect created data width");
 30881:   myIs(imageData.height, 1, "Incorrect created data height");
 30881:   myIs(imageData.data.length, test.length,
 30881:        "Incorrect length in created image data");
 30881: 
 30881:   ctx681.putImageData(imageData, 0, 0);
 30881:   var testImageData = ctx681.getImageData(0, 0, pixels, 1);
 30881:   myIs(testImageData.data.length, test.length,
 30881:        "Incorrect length in test image data after clearing pixels");
 30881:   var j;
 30881:   for (j = 0; j < testImageData.data.length; ++j) {
 30881:     myIs(testImageData.data[j], 0,
 30881:          "Nonzero value at position " + j + " in test image data " +
 30881:          "after clearing pixels");
 30881:   }
 30881:   for (j = 0; j < imageData.data.length; ++j) {
 30881:     imageData.data[j] = test[j];
 30881:   }
 30881:   if (type == "slow") {
 30881:     // convert to a non-dense array so we can test that codepath
 30881:     imageData.data.makeMeSlow = 1;
 30881:   }
 30881:   ctx681.putImageData(imageData, 0, 0);
 30881:   testImageData = ctx681.getImageData(0, 0, pixels, 1);
 30881:   myIs(testImageData.data.length, test.length,
 30881:        "Incorrect length in test image data after putting our imagedata");
 30881:   for (j = 0; j < testImageData.data.length; ++j) {
 30881:     myIs(testImageData.data[j], ref[j],
 30881:          "Incorrect value at position " + j + " in test image data " +
 30881:          "after putting our imagedata");
 30881:   }
 30881: }
 30881: 
 30881: function doTests(type) {
 30881:   for (var i = 0; i < tests.length; ++i) {
 30881:     doTest(type, i);
 30881:   }
 30881: }
 30881: 
 30881: var canvas681;
 30881: var ctx681;
 30881:                       
 30881: function test_2d_imagedata_coercion() {
 30881: 
 30881: canvas681 = document.getElementById('c681');
 30881: ctx681 = canvas681.getContext('2d');
 30881: 
 30881: doTests("fast");
 30881: doTests("slow");
 30881: 
 30881: }
 30881: </script>
 30881: 
 30881: <!-- [[[ test_2d.imageSmoothing.html ]]] -->
 30881: 
 30881: <p>Canvas test: 2d.imageRenderingQuality</p>
 30881: <canvas id="c682" width="10" height="10"></canvas><br>
 30881: <canvas style="visibility: hidden" id="c683" width="2" height="2"></canvas>
 30881: <script type="text/javascript">
 30881: 
 30881: function setup_test_2d_imageSmoothing() {
 30881:   var c683 = document.getElementById("c683");
 30881:   var cx683 = c683.getContext("2d");
 30881: 
 30881:   cx683.fillStyle = "red";
 30881:   cx683.fillRect(0, 0, 2, 2);
 30881: 
 30881:   cx683.fillStyle = "rgb(0,255,0)";
 30881:   cx683.fillRect(0, 0, 1, 1);
 30881: }
 30881: 
 30881: function test_2d_imageSmoothing() {
 30881:   setup_test_2d_imageSmoothing();
 30881: 
 30881:   var c682 = document.getElementById("c682");
 30881:   var c683 = document.getElementById("c683");
 30881: 
 30881:   var cx682 = c682.getContext("2d");
 30881: 
 30881:   ok(cx682.mozImageSmoothingEnabled == true, "initial mozImageSmoothingEnabled is true");
 30881: 
 30881:   // check that mozImageSmoothingEnabled is part of the context
 30881:   cx682.save();
 30881:   cx682.mozImageSmoothingEnabled = false;
 30881:   ok(cx682.mozImageSmoothingEnabled == false, "mozImageSmoothingEnabled is false after setting");
 30881:   cx682.restore();
 30881:   ok(cx682.mozImageSmoothingEnabled == true, "mozImageSmoothingEnabled is true after restore");
 30881: 
 30881:   // check that false works
 30881:   cx682.mozImageSmoothingEnabled = false;
 30881: 
 30881:   cx682.scale(10,10);
 30881:   cx682.drawImage(c683, 0, 0);
 30881: 
 30881:   // this should be all red
 30881:   var data = cx682.getImageData(9, 9, 1, 1);
 30881:   var pixels = data.data;
 30881:   ok (pixels[0] == 0 &&
 30881:       pixels[1] == 255 &&
 30881:       pixels[2] == 0 &&
 30881:       pixels[3] == 255,
 30881:       "pixel is " + pixels.toSource() + " (expected [0,255,0,255])");
 30881: }
 30881: 
 30881: </script>
 30881: 
 70071: <p>Canvas test: zero_dimensions</p>
 70071: <canvas id="c684" width="0" height="0"></canvas>
 70071: <script type="text/javascript">
 70071: function test_zero_dimensions() {
 70071:   var c = document.getElementById("c684");
 70071:   ok(c.width == 0, "c.width not 0");
 70071:   ok(c.height == 0, "c.height not 0");
 70071: }
 70071: </script>
 70071: 
 70071: <p>Canvas test: zero_dimensions_image_data</p>
 70071: <canvas id="c685" width="0" height="0"></canvas>
 70071: <script type="text/javascript">
 70071: function test_zero_dimensions_imagedata() {
 70071:   var c = document.getElementById("c685");
 70071:   var ctx = c.getContext("2d");
 70071:   ctx.fillStyle = "blue";
 70071:   ctx.fillRect(0, 0, 100, 100);
 70071:   var imgdata = ctx.getImageData(0, 0, 100, 100);
 70071:   var isTransparentBlack = true;
 70071:   for (var i = 0; i < imgdata.data.length; ++i)
 70071:       if (imgdata.data[i] !== 0)
 70071:           isTransparentBlack = false;
 70071:   ok(isTransparentBlack, "isTransparentBlack");
 70071: }
 70071: </script>
 70071: 
 73712: <p>Canvas test: getImageData_after_zero_canvas</p>
 73712: <canvas id="c686" width="100" height="100"></canvas>
 73712: <script type="text/javascript">
 73712: function test_getImageData_after_zero_canvas() {
 73712:     var c = document.getElementById("c686");
 73712:     var ctx = c.getContext("2d");
 73712:     ctx.fillStyle = "rgba(0, 0, 0, 1.0)";
 73712:     ctx.fillRect(0, 0, c.width, c.height);
 73712:     var oldimgdata = ctx.getImageData(0, 0, c.width, c.height);
 73712:     c.width = c.height = 0;
 73712:     c.width = c.height = 100;
 73712:     ctx.fillRect(0, 0, c.width, c.height);
 73712:     var imgdata = ctx.getImageData(0, 0, c.width, c.height);
 73712:     var same = false;
 73712:     ok(imgdata.data.length === oldimgdata.data.length, "not the same length");
 73712:     for (var i = 0; i < imgdata.data.length; ++i)
 73712:         same = imgdata.data[i] === oldimgdata.data[i];
 73712:     ok(same, "changing dimensions broke canvas");
 73712: }
 73712: </script>
 73712: 
 30881: <script>
 30881: 
 30881: function asyncTestsDone() {
 30881: 	if (isDone_test_2d_drawImage_animated_apng &&
 30881: 		isDone_test_2d_drawImage_animated_gif) {
 30881: 		SimpleTest.finish();
 30881: 	} else {
 30881: 		setTimeout(asyncTestsDone, 500);
 30881: 	}
 30881:  }
 30881:  
 30881: function runTests() {
 30881: /**
 30881:  * xor and lighter aren't well handled by cairo; they mostly work, but we don't want
 30881:  * to test that
 30881:  */
 30881:  //test_2d_composite_solid_lighter();
 30881:  //test_2d_composite_transparent_xor();
 30881:  //test_2d_composite_solid_xor();
 30881:  //test_2d_composite_transparent_lighter();
 30881:  //test_2d_composite_image_xor();
 30881:  //test_2d_composite_image_lighter();
 30881:  //test_2d_composite_canvas_xor();
 30881:  //test_2d_composite_canvas_lighter();
 30881:  //test_2d_composite_clip_xor();
 30881:  //test_2d_composite_clip_lighter();
 30881:  
 30881: /**
 30881:  * Temporarily disabled tests; unbounded operators changed behaviour, need to reevaluate tests
 30881:  */
 30881:  //test_2d_composite_canvas_destination_atop();
 30881:  //test_2d_composite_canvas_destination_in();
 30881:  //test_2d_composite_canvas_source_in();
 30881:  //test_2d_composite_canvas_source_out();
 30881:  //test_2d_composite_image_destination_atop();
 30881:  //test_2d_composite_image_destination_in();
 30881:  //test_2d_composite_image_source_in();
 30881:  //test_2d_composite_image_source_out();
 30881:  
 30881:  /**
 30881:   * These tests only pass on Mac OS X >= 10.5; see bug 450114
 30881:   */
 30881:  //test_2d_gradient_radial_equal();
 30881:  //test_2d_gradient_radial_touch1();
 30881:  //test_2d_gradient_radial_touch2();
 30881:  //test_2d_gradient_radial_touch3();
 30881:  
 30881:  /**
 41723:   * These 19 tests receive special makefile treatment
 30881:   */
 30881:  //test_2d_composite_uncovered_image_destination_atop();
 30881:  //test_2d_composite_uncovered_image_destination_in();
 30881:  //test_2d_composite_uncovered_image_source_in();
 30881:  //test_2d_composite_uncovered_image_source_out();
 30881:  //test_2d_gradient_radial_cone_behind();
 30881:  //test_2d_gradient_radial_cone_beside();
 30881:  //test_2d_gradient_radial_cone_front();
 30881:  //test_2d_gradient_radial_cone_shape2();
 30881:  //test_2d_gradient_radial_cone_top();
 30881:  //test_2d_gradient_radial_inside2();
 30881:  //test_2d_gradient_radial_inside3();
 30881:  //test_2d_gradient_radial_outside1();
 30881:  //test_2d_gradient_radial_outside2();
 30881:  //test_2d_gradient_radial_outside3();
 30881:  //test_2d_line_cap_closed();
 30881:  //test_2d_line_join_parallel();
 30881:  //test_2d_path_arc_shape_3();
 30881:  //test_2d_path_rect_selfintersect();
 30881:  //test_2d_strokeRect_zero_5();
 30881:  
 30881:  /**
 30881:   * Other tests not being run
 30881:   */
 30881:  //test_2d_composite_uncovered_fill_destination_atop();
 30881:  //test_2d_composite_uncovered_fill_destination_in();
 30881:  //test_2d_composite_uncovered_fill_source_in();
 30881:  //test_2d_composite_uncovered_fill_source_out();
 30881:  //test_2d_composite_uncovered_pattern_destination_atop();
 30881:  //test_2d_composite_uncovered_pattern_destination_in();
 30881:  //test_2d_composite_uncovered_pattern_source_in();
 30881:  //test_2d_composite_uncovered_pattern_source_out();
 30881:  
 30881:  //test_2d_path_rect_zero_6();	// This test is bogus according to the spec; see bug 407107
 30881: 
 73030:  // These tests are bogus according to the spec: shadows should not be 
 73030:  // drawn if shadowBlur, shadowOffsetX, and shadowOffsetY are all zero, whic
 73030:  // they are in these tests
 36901:  //test_2d_shadow_composite_3();
 36901:  //test_2d_shadow_composite_4();
 30881:  try {
 30881:   test_2d_canvas_readonly();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_canvas_readonly");
 30881:  }
 30881:  try {
 30881:   test_2d_canvas_reference();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_canvas_reference");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_globalalpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_globalalpha");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_globalcomposite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_globalcomposite");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_path");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_shadow();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_shadow");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_transform();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_transform");
 30881:  }
 30881:  try {
 30881:   test_2d_clearRect_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_clearRect_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_canvas_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_canvas_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_canvas_destination_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_canvas_destination_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_canvas_destination_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_canvas_destination_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_canvas_source_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_canvas_source_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_canvas_source_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_canvas_source_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_destination_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_destination_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_destination_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_destination_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_destination_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_destination_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_destination_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_destination_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_source_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_source_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_source_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_source_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_source_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_source_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_clip_source_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_clip_source_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_canvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_canvas");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_canvaspattern();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_canvaspattern");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_default");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_fill();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_fill");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_image();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_image");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_imagepattern();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_imagepattern");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_invalid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_invalid");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_globalAlpha_range();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_globalAlpha_range");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_image_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_image_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_image_destination_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_image_destination_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_image_destination_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_image_destination_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_image_source_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_image_source_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_image_source_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_image_source_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_casesensitive();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_casesensitive");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_clear();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_clear");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_darker();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_darker");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_default");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_get();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_get");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_highlight();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_highlight");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_nullsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_nullsuffix");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_operation_unrecognised();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_operation_unrecognised");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_destination_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_destination_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_destination_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_destination_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_destination_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_destination_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_destination_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_destination_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_source_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_source_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_source_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_source_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_source_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_source_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_solid_source_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_solid_source_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_destination_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_destination_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_destination_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_destination_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_destination_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_destination_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_destination_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_destination_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_source_atop();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_source_atop");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_source_in();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_source_in");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_source_out();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_source_out");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_transparent_source_over();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_transparent_source_over");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_uncovered_fill_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_fill_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_uncovered_image_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_image_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_composite_uncovered_pattern_copy();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_pattern_copy");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_3arg();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_3arg");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_5arg();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_5arg");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_9arg_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_9arg_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_9arg_destpos();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_9arg_destpos");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_9arg_destsize();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_9arg_destsize");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_9arg_sourcepos();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_9arg_sourcepos");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_9arg_sourcesize();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_9arg_sourcesize");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_animated_poster();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_animated_poster");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_broken();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_broken");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_canvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_canvas");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_composite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_composite");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_floatsource();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_floatsource");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_incomplete();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_negativedest();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_negativedest");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_negativesource();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_negativesource");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_nowrap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_nowrap");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_null();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_null");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_outsidesource();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_outsidesource");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_path");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_self_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_self_1");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_self_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_self_2");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_transform();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_transform");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_wrongtype();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_wrongtype");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_zerosource();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_zerosource");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_path");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_shadow();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_shadow");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_transform();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_transform");
 30881:  }
 30881:  try {
 30881:   test_2d_fillRect_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillRect_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_default");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_get_semitransparent();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_get_semitransparent");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_get_solid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_get_solid");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_get_transparent();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_get_transparent");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_invalidstring();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_invalidstring");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_invalidtype();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_invalidtype");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_current_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_current_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_current_changed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_current_changed");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_current_removed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_current_removed");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hex3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hex3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hex6();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hex6");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_clamp_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_clamp_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_clamp_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsl_clamp_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_hsla_clamp_6();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_6");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_html4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_html4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hex3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hex6();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex6");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsl_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsl_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsl_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsl_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsl_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsla_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsla_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_hsla_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsla_2");
 30881:  }
 30881:  try {
 69427:    test_2d_fillStyle_parse_invalid_name_1()
 69427:  } catch (e) {
 69427:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_1");
 69427:  }
 69427:  try {
 69427:    test_2d_fillStyle_parse_invalid_name_2()
 69427:  } catch (e) {
 69427:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_2");
 69427:  }
 69427:  try {
 69427:    test_2d_fillStyle_parse_invalid_name_3()
 69427:  } catch (e) {
 69427:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_3");
 69427:  }
 69427:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_6();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_6");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgb_7();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_7");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgba_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgba_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgba_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgba_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_invalid_rgba_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_clamp_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_clamp_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_clamp_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_3");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_clamp_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_4");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_clamp_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_5");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_num();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_num");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgb_percent();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_percent");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_clamp_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_clamp_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_clamp_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_clamp_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_num_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_num_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_num_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_num_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_percent();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_percent");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_solid_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_rgba_solid_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_svg_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_svg_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_svg_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_svg_2");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_system();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_system");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_transparent_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_transparent_1");
 30881:  }
 30881:  try {
 30881:   test_2d_fillStyle_parse_transparent_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_transparent_2");
 30881:  }
 30881:  try {
 30881:   test_2d_getcontext_exists();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_getcontext_exists");
 30881:  }
 30881:  try {
 30881:   test_2d_getcontext_shared();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_getcontext_shared");
 30881:  }
 30881:  try {
 30881:   test_2d_getcontext_unique();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_getcontext_unique");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_colour();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_colour");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_colouralpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_colouralpha");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_multiple");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_overlap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_overlap");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_overlap2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_overlap2");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_solid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_solid");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_vertical();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_vertical");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_interpolate_zerosize();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_zerosize");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_linear_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_linear_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_linear_transform_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_linear_transform_1");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_linear_transform_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_linear_transform_2");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_linear_transform_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_linear_transform_3");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_compare();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_compare");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_crosscanvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_crosscanvas");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_invalidcolour();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_invalidcolour");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_invalidoffset();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_invalidoffset");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_return();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_return");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_type();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_type");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_object_update();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_object_update");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_cone_bottom();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_cone_bottom");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_cone_cylinder();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_cone_cylinder");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_cone_shape1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_cone_shape1");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_inside1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_inside1");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_transform_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_1");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_transform_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_2");
 30881:  }
 30881:  try {
 30881:   test_2d_gradient_radial_transform_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_3");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_basic");
 30881:  }
 30881:  try {
 64666:   test_2d_imageData_create1_basic();
 64666:  } catch (e) {
 64666:   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_basic");
 64666:  }
 64666:  try {
 30881:   test_2d_imageData_create_initial();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_initial");
 30881:  }
 30881:  try {
 64666:   test_2d_imageData_create1_initial();
 64666:  } catch (e) {
 64666:   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_initial");
 64666:  }
 64666:  try {
 30881:   test_2d_imageData_create_large();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_large");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_round();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_round");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_tiny();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_tiny");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_create_type();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_type");
 30881:  }
 30881:  try {
 64666:   test_2d_imageData_create1_type();
 64666:  } catch (e) {
 64666:   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_type");
 64666:  }
 64666:  try {
 30881:   test_2d_imageData_create_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_create_zero");
 30881:  }
 30881:  try {
 64666:   test_2d_imageData_create1_zero();
 64666:  } catch (e) {
 64666:   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_zero");
 64666:  }
 64666:  try {
 30881:   test_2d_imageData_get_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_clamp();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_clamp");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_nonpremul();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_nonpremul");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_order_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_order_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_order_cols();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_order_cols");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_order_rgb();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_order_rgb");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_order_rows();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_order_rows");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_range();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_range");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_source_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_source_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_source_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_source_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_source_size();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_source_size");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_tiny();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_tiny");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_type();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_type");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_unaffected();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_unaffected");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_get_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_get_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_clamp();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_clamp");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_ctor();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_ctor");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_nan();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_nan");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_properties();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_properties");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_readonly();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_readonly");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_round();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_round");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_set();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_set");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_string();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_string");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_object_undefined();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_object_undefined");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_created();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_created");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_cross();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_cross");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_dirty_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_dirty_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_dirty_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_dirty_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_dirty_rect1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_dirty_rect1");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_dirty_rect2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_dirty_rect2");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_dirty_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_dirty_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_modified();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_modified");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_null();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_null");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_path");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_unaffected();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_unaffected");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_unchanged();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_unchanged");
 30881:  }
 30881:  try {
 30881:   test_2d_imageData_put_wrongtype();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageData_put_wrongtype");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cap_butt();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cap_butt");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cap_invalid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cap_invalid");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cap_open();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cap_open");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cap_round();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cap_round");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cap_square();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cap_square");
 30881:  }
 30881:  try {
 30881:   test_2d_line_cross();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_cross");
 30881:  }
 30881:  try {
 30881:   test_2d_line_defaults();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_defaults");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_bevel();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_bevel");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_closed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_closed");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_invalid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_invalid");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_miter();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_miter");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_open();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_open");
 30881:  }
 30881:  try {
 30881:   test_2d_line_join_round();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_join_round");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_acute();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_acute");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_exceeded();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_exceeded");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_invalid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_invalid");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_lineedge();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_lineedge");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_obtuse();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_obtuse");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_rightangle();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_rightangle");
 30881:  }
 30881:  try {
 30881:   test_2d_line_miter_within();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_miter_within");
 30881:  }
 30881:  try {
 30881:   test_2d_line_union();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_union");
 30881:  }
 30881:  try {
 30881:   test_2d_line_width_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_width_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_line_width_invalid();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_width_invalid");
 30881:  }
 30881:  try {
 30881:   test_2d_line_width_transformed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_line_width_transformed");
 30881:  }
 30881:  try {
 30881:   test_2d_missingargs();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_missingargs");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_4");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_5");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_angle_6();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_6");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_end();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_end");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_nonempty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_nonempty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_scale_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_scale_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_scale_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_scale_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_selfintersect_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_selfintersect_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_selfintersect_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_selfintersect_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_shape_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_shape_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_shape_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_shape_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_shape_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_shape_4");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_shape_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_shape_5");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_twopie_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_twopie_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_twopie_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_twopie_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_twopie_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_twopie_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_twopie_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_twopie_4");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_zero_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_zero_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_zero_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_zero_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arc_zeroradius();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arc_zeroradius");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_coincide_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_coincide_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_coincide_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_coincide_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_collinear_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_collinear_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_collinear_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_collinear_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_collinear_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_collinear_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_emptysubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_emptysubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_scale();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_scale");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_shape_curve1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_shape_curve1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_shape_curve2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_shape_curve2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_shape_end();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_shape_end");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_shape_start();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_shape_start");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_transformation();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_transformation");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_zero_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_zero_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_arcTo_zero_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_arcTo_zero_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_beginPath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_beginPath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_bezierCurveTo_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_bezierCurveTo_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_bezierCurveTo_emptysubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_bezierCurveTo_emptysubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_bezierCurveTo_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_bezierCurveTo_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_bezierCurveTo_scaled();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_bezierCurveTo_scaled");
 30881:  }
 30881:  try {
 30881:   test_2d_path_bezierCurveTo_shape();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_bezierCurveTo_shape");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_basic_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_basic_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_basic_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_basic_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_intersect();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_intersect");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_unaffected();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_unaffected");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_winding_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_winding_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_clip_winding_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_clip_winding_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_closePath_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_closePath_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_closePath_newline();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_closePath_newline");
 30881:  }
 30881:  try {
 30881:   test_2d_path_closePath_nextpoint();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_closePath_nextpoint");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_closed_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_closed_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_closed_unaffected();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_closed_unaffected");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_overlap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_overlap");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_winding_add();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_winding_add");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_winding_subtract_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_winding_subtract_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_winding_subtract_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_winding_subtract_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_fill_winding_subtract_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_fill_winding_subtract_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_initial();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_initial");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_arc();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_arc");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_basic_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_basic_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_basic_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_basic_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_bezier();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_bezier");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_bigarc();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_bigarc");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_edge();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_edge");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_subpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_subpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_transform_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_transform_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_transform_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_transform_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_transform_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_transform_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_unclosed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_unclosed");
 30881:  }
 30881:  try {
 30881:   test_2d_path_isPointInPath_winding();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_isPointInPath_winding");
 30881:  }
 30881:  try {
 30881:   test_2d_path_lineTo_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_lineTo_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_lineTo_emptysubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_lineTo_emptysubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_lineTo_nextpoint();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_lineTo_nextpoint");
 30881:  }
 30881:  try {
 30881:   test_2d_path_lineTo_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_lineTo_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_moveTo_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_moveTo_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_moveTo_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_moveTo_multiple");
 30881:  }
 30881:  try {
 30881:   test_2d_path_moveTo_newsubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_moveTo_newsubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_moveTo_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_moveTo_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_quadraticCurveTo_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_quadraticCurveTo_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_quadraticCurveTo_emptysubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_quadraticCurveTo_emptysubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_quadraticCurveTo_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_quadraticCurveTo_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_quadraticCurveTo_scaled();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_quadraticCurveTo_scaled");
 30881:  }
 30881:  try {
 30881:   test_2d_path_quadraticCurveTo_shape();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_quadraticCurveTo_shape");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_closed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_closed");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_end_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_end_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_end_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_end_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_newsubpath();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_newsubpath");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_winding();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_winding");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_zero_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_zero_1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_zero_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_zero_2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_zero_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_zero_3");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_zero_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_zero_4");
 30881:  }
 30881:  try {
 30881:   test_2d_path_rect_zero_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_rect_zero_5");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_overlap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_overlap");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_arc();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_arc");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_closed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_closed");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_corner();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_corner");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_curve();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_curve");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_line();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_line");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_prune_rect();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_prune_rect");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_scale1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_scale1");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_scale2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_scale2");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_skew();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_skew");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_unaffected();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_unaffected");
 30881:  }
 30881:  try {
 30881:   test_2d_path_stroke_union();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_stroke_union");
 30881:  }
 30881:  try {
 30881:   test_2d_path_transformation_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_transformation_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_path_transformation_changing();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_transformation_changing");
 30881:  }
 30881:  try {
 30881:   test_2d_path_transformation_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_path_transformation_multiple");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_animated_gif();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_animated_gif");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_basic_canvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_basic_canvas");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_basic_image();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_basic_image");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_basic_nocontext();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_basic_nocontext");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_basic_type();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_basic_type");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_basic_zerocanvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_basic_zerocanvas");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_crosscanvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_crosscanvas");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_image_broken();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_image_broken");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_image_incomplete();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_image_null();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_image_null");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_image_string();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_image_string");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_image_undefined();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_image_undefined");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_modify_canvas1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_modify_canvas1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_modify_canvas2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_modify_canvas2");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_modify_image1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_modify_image1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_modify_image2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_modify_image2");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_norepeat_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_norepeat_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_norepeat_coord1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_norepeat_coord1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_norepeat_coord2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_norepeat_coord2");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_norepeat_coord3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_norepeat_coord3");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_norepeat_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_norepeat_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_orientation_canvas();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_orientation_canvas");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_orientation_image();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_orientation_image");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeat_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeat_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeat_coord1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeat_coord1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeat_coord2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeat_coord2");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeat_coord3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeat_coord3");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeat_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeat_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeatx_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeatx_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeatx_coord1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeatx_coord1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeatx_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeatx_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeaty_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeaty_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeaty_coord1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeaty_coord1");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_paint_repeaty_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_paint_repeaty_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_case();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_case");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_empty();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_empty");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_null();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_null");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_nullsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_nullsuffix");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_undefined();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_undefined");
 30881:  }
 30881:  try {
 30881:   test_2d_pattern_repeat_unrecognised();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_pattern_repeat_unrecognised");
 30881:  }
 30881:  try {
 30881:   test_2d_scaled();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_scaled");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_alpha_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_alpha_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_alpha_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_alpha_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_alpha_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_alpha_3");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_alpha_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_alpha_4");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_alpha_5();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_alpha_5");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowBlur_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowBlur_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowBlur_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowBlur_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowColor_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowColor_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowColor_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowColor_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowOffset_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowOffset_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_attributes_shadowOffset_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_attributes_shadowOffset_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_basic_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_basic_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_basic_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_basic_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_blur_high();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_blur_high");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_blur_low();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_blur_low");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_canvas_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_canvas_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_canvas_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_canvas_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_canvas_transparent_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_canvas_transparent_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_canvas_transparent_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_canvas_transparent_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_clip_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_clip_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_clip_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_clip_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_clip_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_clip_3");
 30881:  }
 30881:  try {
 73030:   test_2d_shadow_composite_1();
 73030:  } catch (e) {
 73030:   ok(false, "unexpected exception thrown in: test_2d_shadow_composite_1");
 73030:  }
 73030:  try {
 73030:   test_2d_shadow_composite_2();
 73030:  } catch (e) {
 73030:   ok(false, "unexpected exception thrown in: test_2d_shadow_composite_2");
 73030:  }
 73030:  try {
 30881:   test_2d_shadow_gradient_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_gradient_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_gradient_transparent_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_transparent_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_gradient_transparent_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_transparent_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_scale();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_scale");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_section();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_section");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_transparent_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_transparent_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_image_transparent_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_image_transparent_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_offset_negativeX();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_offset_negativeX");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_offset_negativeY();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_offset_negativeY");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_offset_positiveX();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_offset_positiveX");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_offset_positiveY();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_offset_positiveY");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_outside();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_outside");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_pattern_alpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_pattern_alpha");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_pattern_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_pattern_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_pattern_transparent_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_pattern_transparent_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_pattern_transparent_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_pattern_transparent_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_cap_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_cap_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_cap_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_cap_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_join_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_join_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_join_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_join_2");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_stroke_join_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_stroke_join_3");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_transform_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_transform_1");
 30881:  }
 30881:  try {
 30881:   test_2d_shadow_transform_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_shadow_transform_2");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_bitmap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_bitmap");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_fillStyle();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_fillStyle");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_globalAlpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_globalAlpha");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_globalCompositeOperation();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_globalCompositeOperation");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_lineCap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_lineCap");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_lineJoin();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_lineJoin");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_lineWidth();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_lineWidth");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_miterLimit();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_miterLimit");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_path");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_shadowBlur();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_shadowBlur");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_shadowColor();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_shadowColor");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_shadowOffsetX();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_shadowOffsetX");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_shadowOffsetY();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_shadowOffsetY");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_stack();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_stack");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_stackdepth();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_stackdepth");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_strokeStyle();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_strokeStyle");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_transformation();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_transformation");
 30881:  }
 30881:  try {
 30881:   test_2d_state_saverestore_underflow();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_underflow");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_clip");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_globalalpha();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_globalalpha");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_globalcomposite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_globalcomposite");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_path");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_shadow();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_shadow");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_transform();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_transform");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_zero_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_zero_1");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_zero_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_zero_2");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_zero_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_zero_3");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeRect_zero_4();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeRect_zero_4");
 30881:  }
 30881:  try {
 30881:   test_2d_strokeStyle_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_strokeStyle_default");
 30881:  }
 30881:  try {
 79975:   test_2d_text_align_default();
 79975:  } catch (e) {
 79975:   ok(false, "unexpected exception thrown in: test_2d_text_align_default");
 79975:  }
 79975:  try {
 79975:   test_2d_text_align_invalid();
 79975:  } catch (e) {
 79975:   ok(false, "unexpected exception thrown in: test_2d_text_align_invalid");
 79975:  }
 79975:  try {
 79975:   test_2d_text_baseline_default();
 79975:  } catch (e) {
 79975:   ok(false, "unexpected exception thrown in: test_2d_text_baseline_default");
 79975:  }
 79975:  try {
 79975:   test_2d_text_baseline_invalid();
 79975:  } catch (e) {
 79975:   ok(false, "unexpected exception thrown in: test_2d_text_baseline_invalid");
 79975:  }
 79975:  try {
 30881:   test_2d_transformation_order();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_order");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_direction();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_direction");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_radians();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_radians");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_wrap();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_wrap");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_wrapnegative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_wrapnegative");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_rotate_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_large();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_large");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_multiple");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_negative");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_scale_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_scale_zero");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_setTransform_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_setTransform_multiple");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_setTransform_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_setTransform_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_setTransform_skewed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_setTransform_skewed");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_transform_identity();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_transform_identity");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_transform_multiply();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_transform_multiply");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_transform_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_transform_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_transform_skewed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_transform_skewed");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_translate_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_translate_basic");
 30881:  }
 30881:  try {
 30881:   test_2d_transformation_translate_nonfinite();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_transformation_translate_nonfinite");
 30881:  }
 30881:  try {
 30881:   test_2d_type_exists();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_type_exists");
 30881:  }
 30881:  try {
 30881:   test_2d_type_extend();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_type_extend");
 30881:  }
 30881:  try {
 30881:   test_2d_type_prototype();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_type_prototype");
 30881:  }
 30881:  try {
 30881:   test_2d_type_replace();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_type_replace");
 30881:  }
 30881:  try {
 30881:   test_2d_voidreturn();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_voidreturn");
 30881:  }
 30881:  try {
 30881:   test_bug397524();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_bug397524");
 30881:  }
 30881:  try {
 30881:   test_bug405982();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_bug405982");
 30881:  }
 30881:  try {
 30881:   test_context_arguments_extra();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_arguments_extra");
 30881:  }
 30881:  try {
 30881:   test_context_arguments_missing();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_arguments_missing");
 30881:  }
 30881:  try {
 30881:   test_context_casesensitive();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_casesensitive");
 30881:  }
 30881:  try {
 30881:   test_context_emptystring();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_emptystring");
 30881:  }
 30881:  try {
 30881:   test_context_unrecognised_badname();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_unrecognised_badname");
 30881:  }
 30881:  try {
 30881:   test_context_unrecognised_badsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_unrecognised_badsuffix");
 30881:  }
 30881:  try {
 30881:   test_context_unrecognised_nullsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_unrecognised_nullsuffix");
 30881:  }
 30881:  try {
 30881:   test_context_unrecognised_unicode();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_context_unrecognised_unicode");
 30881:  }
 30881:  try {
 30881:   test_fallback_basic();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_fallback_basic");
 30881:  }
 30881:  try {
 30881:   test_fallback_multiple();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_fallback_multiple");
 30881:  }
 30881:  try {
 30881:   test_fallback_nested();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_fallback_nested");
 30881:  }
 30881:  try {
 30881:   test_initial_colour();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_colour");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_2dstate();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_2dstate");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_clip();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_clip");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_different();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_different");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_gradient();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_gradient");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_path();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_path");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_pattern();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_pattern");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_same();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_same");
 30881:  }
 30881:  try {
 30881:   test_initial_reset_transform();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_initial_reset_transform");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_default");
 30881:  }
 30881:  try {
 30881:   test_size_attributes();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_badsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_badsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_floatsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_floatsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_negative");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_nonnumber();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_nonnumber");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_percentsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_percentsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_whitespace();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_whitespace");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_zero");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_parse_zerosuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_parse_zerosuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_reflect_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_reflect_1");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_reflect_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_reflect_2");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_removed();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_removed");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_badsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_badsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_floatsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_floatsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_negative();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_negative");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_nonnumber();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_nonnumber");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_percentsuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_percentsuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_whitespace();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_whitespace");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_zero();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_zero");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_setAttribute_zerosuffix();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_zerosuffix");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_style();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_style");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_type_get();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_type_get");
 30881:  }
 30881:  try {
 30881:   test_size_attributes_type_set();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_size_attributes_type_set");
 30881:  }
 30881:  try {
 30881:   test_text_font();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_text_font");
 30881:  }
 30881:  try {
 30881:   test_text_measure();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_text_measure");
 30881:  }
 30881:  try {
 30881:   test_text_space_replace();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_text_space_replace");
 30881:  }
 30881:  try {
 30881:   test_text_textAlign();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_text_textAlign");
 30881:  }
 30881:  try {
 30881:   test_text_textBaseline();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_text_textBaseline");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_arguments_1();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_1");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_arguments_2();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_2");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_arguments_3();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_3");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_complexcolours();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_complexcolours");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_default();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_default");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_lowercase();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_lowercase");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_nocontext();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_nocontext");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_png();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_png");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_primarycolours();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_primarycolours");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_unrecognised();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_unrecognised");
 30881:  }
 30881:  try {
 30881:   test_toDataURL_zerosize();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_toDataURL_zerosize");
 30881:  }
 30881:  try {
 30881:   test_type_exists();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_type_exists");
 30881:  }
 30881:  try {
 30881:   test_type_extend();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_type_extend");
 30881:  }
 30881:  try {
 30881:   test_type_name();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_type_name");
 30881:  }
 30881:  try {
 30881:   test_type_prototype();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_type_prototype");
 30881:  }
 30881:  try {
 30881:   test_2d_imagedata_coercion();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imagedata_coercion");
 30881:  }
 30881:  try {
 30881:   test_2d_imageSmoothing();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_imageSmoothing");
 30881:  }
 30881:  try {
 70071:   test_zero_dimensions();
 70071:  } catch (e) {
 70071:   ok(false, "unexpected exception thrown in: test_zero_dimensions");
 70071:  }
 70071:  try {
 70071:   test_zero_dimensions_imagedata();
 70071:  } catch(e) {
 70071:   ok(false, "unexpected exception thrown in: test_zero_dimensions_imagedata");
 70071:  }
 70071:  try {
 73712:   test_getImageData_after_zero_canvas();
 73712:  } catch(e) {
 73712:   throw e;
 73712:   ok(false, "unexpected exception thrown in: test_getImageData_after_zero_canvas");
 73712:  }
 73712:  try {
 30881:   // run this test last since it replaces the getContext method
 30881:   test_type_replace();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_type_replace");
 30881:  }
 30881:  
 30881:  //run the asynchronous tests
 30881:  try {
 30881:   test_2d_drawImage_animated_apng();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_animated_apng");
 30881:  }
 30881:  try {
 30881:   test_2d_drawImage_animated_gif();
 30881:  } catch (e) {
 30881:   ok(false, "unexpected exception thrown in: test_2d_drawImage_animated_gif");
 30881:  }
 30881:  
 30881:  setTimeout(asyncTestsDone, 500);
 30881: }
 30881: 
 75331: addLoadEvent(runTests);
 75331: 
 75331: </script>
