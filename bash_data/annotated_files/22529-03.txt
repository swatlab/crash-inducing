20627: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
20627: /* vim:set ts=2 sw=2 sts=2 et cindent: */
20627: /* ***** BEGIN LICENSE BLOCK *****
20627:  * Version: ML 1.1/GPL 2.0/LGPL 2.1
20627:  *
20627:  * The contents of this file are subject to the Mozilla Public License Version
20627:  * 1.1 (the "License"); you may not use this file except in compliance with
20627:  * the License. You may obtain a copy of the License at
20627:  * http://www.mozilla.org/MPL/
20627:  *
20627:  * Software distributed under the License is distributed on an "AS IS" basis,
20627:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
20627:  * for the specific language governing rights and limitations under the
20627:  * License.
20627:  *
20627:  * The Original Code is Mozilla code.
20627:  *
20627:  * The Initial Developer of the Original Code is the Mozilla Corporation.
20627:  * Portions created by the Initial Developer are Copyright (C) 2007
20627:  * the Initial Developer. All Rights Reserved.
20627:  *
20627:  * Contributor(s):
20627:  *  Chris Double <chris.double@double.co.nz>
20627:  *
20627:  * Alternatively, the contents of this file may be used under the terms of
20627:  * either the GNU General Public License Version 2 or later (the "GPL"), or
20627:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
20627:  * in which case the provisions of the GPL or the LGPL are applicable instead
20627:  * of those above. If you wish to allow use of your version of this file only
20627:  * under the terms of either the GPL or the LGPL, and not to allow others to
20627:  * use your version of this file under the terms of the MPL, indicate your
20627:  * decision by deleting the provisions above and replace them with the notice
20627:  * and other provisions required by the GPL or the LGPL. If you do not delete
20627:  * the provisions above, a recipient may use your version of this file under
20627:  * the terms of any one of the MPL, the GPL or the LGPL.
20627:  *
20627:  * ***** END LICENSE BLOCK ***** */
20627: #include "prlog.h"
20627: #include "prmem.h"
20627: #include "nsIFrame.h"
20627: #include "nsIDocument.h"
20627: #include "nsThreadUtils.h"
20627: #include "nsIDOMHTMLMediaElement.h"
20627: #include "nsNetUtil.h"
20627: #include "nsHTMLMediaElement.h"
20627: #include "nsIObserver.h"
20627: #include "nsIObserverService.h"
20627: #include "nsAutoLock.h"
20627: #include "nsIRenderingContext.h"
20627: #include "gfxContext.h"
20627: #include "gfxImageSurface.h"
20627: #include "nsPresContext.h"
20627: #include "nsMediaDecoder.h"
20627: 
20627: #ifdef PR_LOGGING
20627: // Logging object for decoder
20627: PRLogModuleInfo* gVideoDecoderLog = nsnull;
20627: #endif
20627: 
20627: nsMediaDecoder::nsMediaDecoder() :
20627:   mElement(0),
20627:   mRGBWidth(-1),
20627:   mRGBHeight(-1),
20627:   mSizeChanged(PR_FALSE),
20627:   mVideoUpdateLock(nsnull),
22529:   mFramerate(0.0),
22529:   mShuttingDown(PR_FALSE),
22529:   mStopping(PR_FALSE)
20627: {
20627:   MOZ_COUNT_CTOR(nsMediaDecoder);
20627: }
20627: 
20627: nsMediaDecoder::~nsMediaDecoder()
20627: {
20627:   if (mVideoUpdateLock) {
20627:     PR_DestroyLock(mVideoUpdateLock);
20627:     mVideoUpdateLock = nsnull;
20627:   }
20627:   MOZ_COUNT_DTOR(nsMediaDecoder);
20627: }
20627: 
20627: PRBool nsMediaDecoder::Init()
20627: {
20627:   mVideoUpdateLock = PR_NewLock();
20627: 
20627:   return mVideoUpdateLock != nsnull;
20627: }
20627: 
20627: void nsMediaDecoder::Shutdown()
20627: {
20627:   StopProgress();
20627:   ElementUnavailable();
20627: }
20627: 
20627: 
20627: nsresult nsMediaDecoder::InitLogger() 
20627: {
20627: #ifdef PR_LOGGING
20627:   gVideoDecoderLog = PR_NewLogModule("nsMediaDecoder");
20627: #endif
20627:   return NS_OK;
20627: }
20627: 
20627: void nsMediaDecoder::Invalidate()
20627: {
20627:   if (!mElement)
20627:     return;
20627: 
20627:   nsIFrame* frame = mElement->GetPrimaryFrame();
20627:   if (!frame)
20627:     return;
20627:   
20627:   {
20627:     nsAutoLock lock(mVideoUpdateLock);
20627:     if (mSizeChanged) {
20776:       mElement->UpdateMediaSize(nsIntSize(mRGBWidth, mRGBHeight));
20627:       mSizeChanged = PR_FALSE;
20627:       nsPresContext* presContext = frame->PresContext();      
20627:       nsIPresShell *presShell = presContext->PresShell();
20627:       presShell->FrameNeedsReflow(frame, 
20627:                                   nsIPresShell::eStyleChange,
20627:                                   NS_FRAME_IS_DIRTY);
20627:     }
20627:   }
20627:   nsRect r(nsPoint(0,0), frame->GetSize());
20627:   frame->Invalidate(r);
20627: }
20627: 
20627: static void ProgressCallback(nsITimer* aTimer, void* aClosure)
20627: {
20627:   nsMediaDecoder* decoder = static_cast<nsMediaDecoder*>(aClosure);
22408:   decoder->Progress();
20627: }
20627: 
22408: void nsMediaDecoder::Progress()
20627: {
22408:   if (!mElement)
20627:     return;
20627: 
20627:   mElement->DispatchProgressEvent(NS_LITERAL_STRING("progress"));
20627: }
20627: 
20627: nsresult nsMediaDecoder::StartProgress()
20627: {
20627:   nsresult rv = NS_OK;
22408: 
20627:   if (!mProgressTimer) {
20627:     mProgressTimer = do_CreateInstance("@mozilla.org/timer;1");
20627:     rv = mProgressTimer->InitWithFuncCallback(ProgressCallback, 
20627:                                               this, 
22408:                                               350, // Number of milliseconds defined in spec
20627:                                               nsITimer::TYPE_REPEATING_PRECISE);
20627:   }
20627:   return rv;
20627: }
20627: 
20627: nsresult nsMediaDecoder::StopProgress()
20627: {
20627:   nsresult rv = NS_OK;
20627:   if (mProgressTimer) {
20627:     rv = mProgressTimer->Cancel();
20627:     mProgressTimer = nsnull;
20627:   }
20627:   return rv;
20627: }
20627: 
20627: void nsMediaDecoder::SetRGBData(PRInt32 aWidth, PRInt32 aHeight, float aFramerate, unsigned char* aRGBBuffer)
20627: {
20627:   if (mRGBWidth != aWidth || mRGBHeight != aHeight) {
20627:     mRGBWidth = aWidth;
20627:     mRGBHeight = aHeight;
20627:     mSizeChanged = PR_TRUE;
20627:     // Delete buffer so we'll reallocate it
20627:     mRGB = nsnull;
20627:   }
20627:   mFramerate = aFramerate;
20627: 
20627:   if (!mRGB) 
20627:     mRGB = new unsigned char[aWidth * aHeight * 4];
20627:   if (mRGB && aRGBBuffer) {
20627:     memcpy(mRGB.get(), aRGBBuffer, aWidth*aHeight*4);
20627:   }
20627: }
20627: 
20627: void nsMediaDecoder::Paint(gfxContext* aContext, const gfxRect& aRect)
20627: {
20627:   nsAutoLock lock(mVideoUpdateLock);
20627: 
20627:   if (!mRGB)
20627:     return;
20627: 
20627:   /* Create a surface backed by the RGB */
20627:   nsRefPtr<gfxASurface> surface = 
20627:     new gfxImageSurface(mRGB,
20627:                         gfxIntSize(mRGBWidth, mRGBHeight), 
20627:                         mRGBWidth * 4,
20627:                         gfxASurface::ImageFormatARGB32);    
20627: 
20627:   if (!surface)
20627:     return;
20627: 
20627:   nsRefPtr<gfxPattern> pat = new gfxPattern(surface);
20627:   if (!pat)
20627:     return;
20627: 
20627:   // Make the source image fill the rectangle completely
20627:   pat->SetMatrix(gfxMatrix().Scale(mRGBWidth/aRect.Width(), mRGBHeight/aRect.Height()));
20627: 
20627:   /* Draw RGB surface onto frame */
20627:   aContext->NewPath();
20627:   aContext->PixelSnappedRectangleAndSetPattern(aRect, pat);
20627:   aContext->Fill();
20627: 
20627: #ifdef DEBUG_FRAME_RATE
20627:   {
20627:     // Output frame rate
20627:     static float last = double(PR_IntervalToMilliseconds(PR_IntervalNow()))/1000.0;
20627:     float now = double(PR_IntervalToMilliseconds(PR_IntervalNow()))/1000.0;
20627:     static int count = 0;
20627:     count++;
20627:     if (now-last > 10.0) {
20627:       LOG(PR_LOG_DEBUG, ("Paint Frame Rate = %f (should be %f)\n", (float)count / (float)(now-last), mFramerate));
20627:       count = 0;
20627:       last = double(PR_IntervalToMilliseconds(PR_IntervalNow()))/1000.0;
20627:     }
20627:   }   
20627: #endif
20627: }
20627: 
20627: void nsMediaDecoder::ElementAvailable(nsHTMLMediaElement* anElement)
20627: {
20627:   mElement = anElement;
20627: }
20627: 
20627: void nsMediaDecoder::ElementUnavailable()
20627: {
20627:   mElement = nsnull;
20627: }
20627: 
