    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   David W. Hyatt <hyatt@netscape.com>
    1:  *   Ben Goodger <ben@netscape.com>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #include "nsCOMPtr.h"
    1: #include "nsIPopupBoxObject.h"
    1: #include "nsIRootBox.h"
    1: #include "nsBoxObject.h"
    1: #include "nsIPresShell.h"
    1: #include "nsFrameManager.h"
    1: #include "nsIContent.h"
    1: #include "nsIDocument.h"
    1: #include "nsIDOMDocument.h"
    1: #include "nsIDOMElement.h"
    1: #include "nsIFrame.h"
    1: #include "nsINameSpaceManager.h"
    1: #include "nsGkAtoms.h"
    1: #include "nsMenuPopupFrame.h"
    1: 
    1: 
    1: class nsPopupBoxObject : public nsBoxObject,
    1:                          public nsIPopupBoxObject
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS_INHERITED
    1:   NS_DECL_NSIPOPUPBOXOBJECT
    1: 
    1:   nsPopupBoxObject() {}
    1: protected:
    1:   virtual ~nsPopupBoxObject() {}
    1: 
 3129:   nsPopupSetFrame* GetPopupSetFrame();
    1:   nsMenuPopupFrame* GetMenuPopupFrame()
 3129:   {
 3129:     nsIFrame* frame = GetFrame(PR_FALSE);
 3129:     if (frame && frame->GetType() == nsGkAtoms::menuPopupFrame)
 3233:       return static_cast<nsMenuPopupFrame*>(frame);
 3129:     return nsnull;
 3129:   }
    1: };
    1: 
    1: NS_IMPL_ISUPPORTS_INHERITED1(nsPopupBoxObject, nsBoxObject, nsIPopupBoxObject)
    1: 
 3129: nsPopupSetFrame*
    1: nsPopupBoxObject::GetPopupSetFrame()
    1: {
    1:   nsIRootBox* rootBox = nsIRootBox::GetRootBox(GetPresShell(PR_FALSE));
    1:   if (!rootBox)
    1:     return nsnull;
    1: 
 3129:   return rootBox->GetPopupSetFrame();
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::HidePopup()
    1: {
 3129:   nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
17006:   if (pm && mContent)
 3129:     pm->HidePopup(mContent, PR_FALSE, PR_TRUE, PR_FALSE);
 3129: 
 3129:   return NS_OK;
    1: }
 3129: 
 3129: NS_IMETHODIMP
 3129: nsPopupBoxObject::ShowPopup(nsIDOMElement* aAnchorElement,
 3129:                             nsIDOMElement* aPopupElement,
 3129:                             PRInt32 aXPos, PRInt32 aYPos,
 3129:                             const PRUnichar *aPopupType,
 3129:                             const PRUnichar *aAnchorAlignment,
 3129:                             const PRUnichar *aPopupAlignment)
 3129: {
 3129:   NS_ENSURE_TRUE(aPopupElement, NS_ERROR_INVALID_ARG);
 3129:   // srcContent can be null.
 3129: 
 3129:   nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
17006:   if (pm && mContent) {
 3129:     nsCOMPtr<nsIContent> anchorContent(do_QueryInterface(aAnchorElement));
 3129:     nsAutoString popupType(aPopupType);
 3129:     nsAutoString anchor(aAnchorAlignment);
 3129:     nsAutoString align(aPopupAlignment);
 3129:     pm->ShowPopupWithAnchorAlign(mContent, anchorContent, anchor, align,
 3129:                                  aXPos, aYPos, popupType.EqualsLiteral("context"));
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
 3129: nsPopupBoxObject::OpenPopup(nsIDOMElement* aAnchorElement,
 3129:                             const nsAString& aPosition,
    1:                             PRInt32 aXPos, PRInt32 aYPos,
 3129:                             PRBool aIsContextMenu,
 3129:                             PRBool aAttributesOverride)
    1: {
 3129:   nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
17006:   if (pm && mContent) {
 3129:     nsCOMPtr<nsIContent> anchorContent(do_QueryInterface(aAnchorElement));
 3129:     pm->ShowPopup(mContent, anchorContent, aPosition, aXPos, aYPos,
 8127:                   aIsContextMenu, aAttributesOverride, PR_FALSE, nsnull);
 3129:   }
 3129: 
    1:   return NS_OK;
    1: }
    1: 
 3129: NS_IMETHODIMP
 3129: nsPopupBoxObject::OpenPopupAtScreen(PRInt32 aXPos, PRInt32 aYPos, PRBool aIsContextMenu)
 3129: {
 3129:   nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
17006:   if (pm && mContent)
 8127:     pm->ShowPopupAtScreen(mContent, aXPos, aYPos, aIsContextMenu, nsnull);
 3129:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::MoveTo(PRInt32 aLeft, PRInt32 aTop)
    1: {
    1:   nsMenuPopupFrame *menuPopupFrame = GetMenuPopupFrame();
    1:   if (menuPopupFrame) {
    1:     menuPopupFrame->MoveTo(aLeft, aTop);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::SizeTo(PRInt32 aWidth, PRInt32 aHeight)
    1: {
17006:   if (!mContent)
17006:     return NS_OK;
17006: 
    1:   nsAutoString width, height;
    1:   width.AppendInt(aWidth);
    1:   height.AppendInt(aHeight);
    1: 
    1:   nsCOMPtr<nsIContent> content = mContent;
    1:   content->SetAttr(kNameSpaceID_None, nsGkAtoms::width, width, PR_FALSE);
    1:   content->SetAttr(kNameSpaceID_None, nsGkAtoms::height, height, PR_TRUE);
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::GetAutoPosition(PRBool* aShouldAutoPosition)
    1: {
    1:   nsMenuPopupFrame *menuPopupFrame = GetMenuPopupFrame();
    1:   if (menuPopupFrame) {
 8408:     *aShouldAutoPosition = menuPopupFrame->GetAutoPosition();
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::SetAutoPosition(PRBool aShouldAutoPosition)
    1: {
    1:   nsMenuPopupFrame *menuPopupFrame = GetMenuPopupFrame();
    1:   if (menuPopupFrame) {
    1:     menuPopupFrame->SetAutoPosition(aShouldAutoPosition);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::EnableRollup(PRBool aShouldRollup)
    1: {
17006:   // this does nothing now
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::SetConsumeRollupEvent(PRUint32 aConsume)
    1: {
    1:   nsMenuPopupFrame *menuPopupFrame = GetMenuPopupFrame();
    1:   if (menuPopupFrame) {
    1:     menuPopupFrame->SetConsumeRollupEvent(aConsume);
    1:   }
    1: 
    1:   return NS_OK;
    1: }
    1: 
    1: NS_IMETHODIMP
    1: nsPopupBoxObject::EnableKeyboardNavigator(PRBool aEnableKeyboardNavigator)
    1: {
17006:   if (!mContent)
17006:     return NS_OK;
17006: 
 3129:   // Use ignorekeys="true" on the popup instead of using this function.
 3129:   if (aEnableKeyboardNavigator)
 6477:     mContent->UnsetAttr(kNameSpaceID_None, nsGkAtoms::ignorekeys, PR_TRUE);
 6477:   else
 3129:     mContent->SetAttr(kNameSpaceID_None, nsGkAtoms::ignorekeys,
 3129:                       NS_LITERAL_STRING("true"), PR_TRUE);
    1: 
    1:   return NS_OK;
    1: }
    1: 
 4700: NS_IMETHODIMP
 4700: nsPopupBoxObject::GetPopupState(nsAString& aState)
 4700: {
 4700:   aState.AssignLiteral("closed");
 4700: 
 4700:   nsMenuPopupFrame *menuPopupFrame = GetMenuPopupFrame();
 4700:   if (menuPopupFrame) {
 4700:     switch (menuPopupFrame->PopupState()) {
 4700:       case ePopupShowing:
 4700:       case ePopupOpen:
 4700:         aState.AssignLiteral("showing");
 4700:         break;
 4700:       case ePopupOpenAndVisible:
 4700:         aState.AssignLiteral("open");
 4700:         break;
 4700:       case ePopupHiding:
 4700:       case ePopupInvisible:
 4700:         aState.AssignLiteral("hiding");
 4700:         break;
 4700:     }
 4700:   }
 4700: 
 4700:   return NS_OK;
 4700: }
 4700: 
 4700: 
    1: // Creation Routine ///////////////////////////////////////////////////////////////////////
    1: 
    1: nsresult
    1: NS_NewPopupBoxObject(nsIBoxObject** aResult)
    1: {
    1:   *aResult = new nsPopupBoxObject;
    1:   if (!*aResult)
    1:     return NS_ERROR_OUT_OF_MEMORY;
    1:   NS_ADDREF(*aResult);
    1:   return NS_OK;
    1: }
