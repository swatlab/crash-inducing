47438: /* -*- Mode: C; tab-width: 8; c-basic-offset: 8; indent-tabs-mode: t -*- */
80797: /* vim:set softtabstop=8 shiftwidth=8 noet: */
11286: /*-
11286:  * Copyright (C) 2006-2008 Jason Evans <jasone@FreeBSD.org>.
11286:  * All rights reserved.
11286:  *
11286:  * Redistribution and use in source and binary forms, with or without
11286:  * modification, are permitted provided that the following conditions
11286:  * are met:
11286:  * 1. Redistributions of source code must retain the above copyright
11286:  *    notice(s), this list of conditions and the following disclaimer as
11286:  *    the first lines of this file unmodified other than the possible
11286:  *    addition of one or more copyright notices.
11286:  * 2. Redistributions in binary form must reproduce the above copyright
11286:  *    notice(s), this list of conditions and the following disclaimer in
11286:  *    the documentation and/or other materials provided with the
11286:  *    distribution.
11286:  *
11286:  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
11286:  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
11286:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
11286:  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE
11286:  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
11286:  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
11286:  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
11286:  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
11286:  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
11286:  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
11286:  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
11286:  *
11286:  *******************************************************************************
11286:  *
11286:  * This allocator implementation is designed to provide scalable performance
11286:  * for multi-threaded programs on multi-processor systems.  The following
11286:  * features are included for this purpose:
11286:  *
11286:  *   + Multiple arenas are used if there are multiple CPUs, which reduces lock
11286:  *     contention and cache sloshing.
11286:  *
11286:  *   + Cache line sharing between arenas is avoided for internal data
11286:  *     structures.
11286:  *
11286:  *   + Memory is managed in chunks and runs (chunks can be split into runs),
11286:  *     rather than as individual pages.  This provides a constant-time
11286:  *     mechanism for associating allocations with particular arenas.
11286:  *
11286:  * Allocation requests are rounded up to the nearest size class, and no record
11286:  * of the original request size is maintained.  Allocations are broken into
11286:  * categories according to size class.  Assuming runtime defaults, 4 kB pages
15460:  * and a 16 byte quantum on a 32-bit system, the size classes in each category
15460:  * are as follows:
11286:  *
11286:  *   |=====================================|
11286:  *   | Category | Subcategory    |    Size |
11286:  *   |=====================================|
11286:  *   | Small    | Tiny           |       2 |
11286:  *   |          |                |       4 |
11286:  *   |          |                |       8 |
11286:  *   |          |----------------+---------|
11286:  *   |          | Quantum-spaced |      16 |
11286:  *   |          |                |      32 |
11286:  *   |          |                |      48 |
11286:  *   |          |                |     ... |
11286:  *   |          |                |     480 |
11286:  *   |          |                |     496 |
11286:  *   |          |                |     512 |
11286:  *   |          |----------------+---------|
11286:  *   |          | Sub-page       |    1 kB |
11286:  *   |          |                |    2 kB |
11286:  *   |=====================================|
11286:  *   | Large                     |    4 kB |
11286:  *   |                           |    8 kB |
11286:  *   |                           |   12 kB |
11286:  *   |                           |     ... |
11286:  *   |                           | 1012 kB |
11286:  *   |                           | 1016 kB |
16218:  *   |                           | 1020 kB |
11286:  *   |=====================================|
11286:  *   | Huge                      |    1 MB |
11286:  *   |                           |    2 MB |
11286:  *   |                           |    3 MB |
11286:  *   |                           |     ... |
11286:  *   |=====================================|
11286:  *
79814:  * NOTE: Due to Mozilla bug 691003, we cannot reserve less than one word for an
79814:  * allocation on Linux or Mac.  So on 32-bit *nix, the smallest bucket size is
79814:  * 4 bytes, and on 64-bit, the smallest bucket size is 8 bytes.
79814:  *
11286:  * A different mechanism is used for each category:
11286:  *
11286:  *   Small : Each size class is segregated into its own set of runs.  Each run
11286:  *           maintains a bitmap of which regions are free/allocated.
11286:  *
11286:  *   Large : Each allocation is backed by a dedicated run.  Metadata are stored
11286:  *           in the associated arena chunk header maps.
11286:  *
11286:  *   Huge : Each allocation is backed by a dedicated contiguous set of chunks.
11286:  *          Metadata are stored in a separate red-black tree.
11286:  *
11286:  *******************************************************************************
11286:  */
11286: 
61285: #ifdef MOZ_MEMORY_ANDROID
61285: #define NO_TLS
61285: #define _pthread_self() pthread_self()
61285: #endif
61285: 
11286: /*
80797:  * On Linux, we use madvise(MADV_DONTNEED) to release memory back to the
80797:  * operating system.  If we release 1MB of live pages with MADV_DONTNEED, our
80797:  * RSS will decrease by 1MB (almost) immediately.
80797:  *
80797:  * On Mac, we use madvise(MADV_FREE).  Unlike MADV_DONTNEED on Linux, MADV_FREE
80797:  * on Mac doesn't cause the OS to release the specified pages immediately; the
80797:  * OS keeps them in our process until the machine comes under memory pressure.
80797:  *
80797:  * It's therefore difficult to measure the process's RSS on Mac, since, in the
80797:  * absence of memory pressure, the contribution from the heap to RSS will not
80797:  * decrease due to our madvise calls.
80797:  *
80797:  * We therefore define MALLOC_DOUBLE_PURGE on Mac.  This causes jemalloc to
80797:  * track which pages have been MADV_FREE'd.  You can then call
80797:  * jemalloc_purge_freed_pages(), which will force the OS to release those
80797:  * MADV_FREE'd pages, making the process's RSS reflect its true memory usage.
80797:  *
80797:  */
80797: #ifdef MOZ_MEMORY_DARWIN
80797: #define MALLOC_DOUBLE_PURGE
80797: #endif
80797: 
80797: /*
11286:  * MALLOC_PRODUCTION disables assertions and statistics gathering.  It also
11286:  * defaults the A and J runtime options to off.  These settings are appropriate
11286:  * for production systems.
11286:  */
11286: #ifndef MOZ_MEMORY_DEBUG
11286: #  define	MALLOC_PRODUCTION
11286: #endif
11286: 
15458: /*
15462:  * Use only one arena by default.  Mozilla does not currently make extensive
15462:  * use of concurrent allocation, so the increased fragmentation associated with
15462:  * multiple arenas is not warranted.
15462:  */
15462: #define	MOZ_MEMORY_NARENAS_DEFAULT_ONE
15462: 
15462: /*
15458:  * MALLOC_STATS enables statistics calculation, and is required for
15458:  * jemalloc_stats().
15458:  */
15458: #define MALLOC_STATS
15458: 
11286: #ifndef MALLOC_PRODUCTION
11286:    /*
11286:     * MALLOC_DEBUG enables assertions and other sanity checks, and disables
11286:     * inline functions.
11286:     */
11286: #  define MALLOC_DEBUG
11286: 
11449:    /* Memory filling (junk/zero). */
11449: #  define MALLOC_FILL
11449: 
11449:    /* Allocation tracing. */
16217: #  ifndef MOZ_MEMORY_WINDOWS
11449: #    define MALLOC_UTRACE
16217: #  endif
11449: 
11449:    /* Support optional abort() on OOM. */
11449: #  define MALLOC_XMALLOC
11449: 
11449:    /* Support SYSV semantics. */
11449: #  define MALLOC_SYSV
11286: #endif
11286: 
14259: /*
14259:  * MALLOC_VALIDATE causes malloc_usable_size() to perform some pointer
14259:  * validation.  There are many possible errors that validation does not even
14259:  * attempt to detect.
14259:  */
14259: #define MALLOC_VALIDATE
14259: 
14033: /* Embed no-op macros that support memory allocation tracking via valgrind. */
14033: #ifdef MOZ_VALGRIND
14033: #  define MALLOC_VALGRIND
14033: #endif
14033: #ifdef MALLOC_VALGRIND
14033: #  include <valgrind/valgrind.h>
14033: #else
14033: #  define VALGRIND_MALLOCLIKE_BLOCK(addr, sizeB, rzB, is_zeroed)
14033: #  define VALGRIND_FREELIKE_BLOCK(addr, rzB)
14033: #endif
11286: 
11286: /*
11286:  * MALLOC_BALANCE enables monitoring of arena lock contention and dynamically
11286:  * re-balances arena load if exponentially averaged contention exceeds a
11286:  * certain threshold.
11286:  */
11286: /* #define	MALLOC_BALANCE */
11286: 
15610: /*
15610:  * MALLOC_PAGEFILE causes all mmap()ed memory to be backed by temporary
15610:  * files, so that if a chunk is mapped, it is guaranteed to be swappable.
15610:  * This avoids asynchronous OOM failures that are due to VM over-commit.
15610:  */
81354: /* #define MALLOC_PAGEFILE */
15610: 
15610: #ifdef MALLOC_PAGEFILE
15610: /* Write size when initializing a page file. */
15610: #  define MALLOC_PAGEFILE_WRITE_SIZE 512
15610: #endif
11286: 
42803: #if defined(MOZ_MEMORY_LINUX) && !defined(MOZ_MEMORY_ANDROID)
11449: #define	_GNU_SOURCE /* For mremap(2). */
11449: #define	issetugid() 0
11449: #if 0 /* Enable in order to test decommit code on Linux. */
11449: #  define MALLOC_DECOMMIT
11449: #endif
11449: #endif
11449: 
11286: #include <sys/types.h>
11286: 
11286: #include <errno.h>
26488: #include <stdlib.h>
11286: #include <limits.h>
11286: #include <stdarg.h>
11286: #include <stdio.h>
11286: #include <string.h>
11286: 
11286: #ifdef MOZ_MEMORY_WINDOWS
69458: 
72611: /* Some defines from the CRT internal headers that we need here. */
72611: #define _CRT_SPINCOUNT 5000
72611: #define __crtInitCritSecAndSpinCount InitializeCriticalSectionAndSpinCount
26488: #include <io.h>
11286: #include <windows.h>
11286: 
11286: #pragma warning( disable: 4267 4996 4146 )
11286: 
34477: #define	bool BOOL
11286: #define	false FALSE
11286: #define	true TRUE
11286: #define	inline __inline
11449: #define	SIZE_T_MAX SIZE_MAX
11286: #define	STDERR_FILENO 2
11286: #define	PATH_MAX MAX_PATH
11286: #define	vsnprintf _vsnprintf
11286: 
26488: #ifndef NO_TLS
11286: static unsigned long tlsIndex = 0xffffffff;
26488: #endif 
11286: 
11286: #define	__thread
11286: #define	_pthread_self() __threadid()
11286: #define	issetugid() 0
11286: 
11286: /* use MSVC intrinsics */
11286: #pragma intrinsic(_BitScanForward)
11286: static __forceinline int
11286: ffs(int x)
11286: {
11286: 	unsigned long i;
11286: 
11286: 	if (_BitScanForward(&i, x) != 0)
11286: 		return (i + 1);
11286: 
11286: 	return (0);
11286: }
11286: 
11286: /* Implement getenv without using malloc */
11286: static char mozillaMallocOptionsBuf[64];
11286: 
11286: #define	getenv xgetenv
11286: static char *
11286: getenv(const char *name)
11286: {
11286: 
11286: 	if (GetEnvironmentVariableA(name, (LPSTR)&mozillaMallocOptionsBuf,
11286: 		    sizeof(mozillaMallocOptionsBuf)) > 0)
11286: 		return (mozillaMallocOptionsBuf);
11286: 
11286: 	return (NULL);
11286: }
27812: 
11449: typedef unsigned char uint8_t;
11286: typedef unsigned uint32_t;
11286: typedef unsigned long long uint64_t;
11286: typedef unsigned long long uintmax_t;
61825: #if defined(MOZ_MEMORY_SIZEOF_PTR_2POW) && (MOZ_MEMORY_SIZEOF_PTR_2POW == 3)
61825: typedef long long ssize_t;
61825: #else
15460: typedef long ssize_t;
61825: #endif
11286: 
11286: #define	MALLOC_DECOMMIT
11286: #endif
11286: 
11286: #ifndef MOZ_MEMORY_WINDOWS
14800: #ifndef MOZ_MEMORY_SOLARIS
11286: #include <sys/cdefs.h>
14800: #endif
11286: #ifndef __DECONST
11286: #  define __DECONST(type, var)	((type)(uintptr_t)(const void *)(var))
11286: #endif
11286: #ifndef MOZ_MEMORY
16218: __FBSDID("$FreeBSD: head/lib/libc/stdlib/malloc.c 180599 2008-07-18 19:35:44Z jasone $");
11286: #include "libc_private.h"
11286: #ifdef MALLOC_DEBUG
11286: #  define _LOCK_DEBUG
11286: #endif
11286: #include "spinlock.h"
11286: #include "namespace.h"
11286: #endif
11286: #include <sys/mman.h>
11286: #ifndef MADV_FREE
11286: #  define MADV_FREE	MADV_DONTNEED
11286: #endif
15610: #ifndef MAP_NOSYNC
15610: #  define MAP_NOSYNC	0
15610: #endif
11286: #include <sys/param.h>
11286: #ifndef MOZ_MEMORY
11286: #include <sys/stddef.h>
11286: #endif
11286: #include <sys/time.h>
11286: #include <sys/types.h>
42803: #if !defined(MOZ_MEMORY_SOLARIS) && !defined(MOZ_MEMORY_ANDROID)
11286: #include <sys/sysctl.h>
14800: #endif
11286: #include <sys/uio.h>
11286: #ifndef MOZ_MEMORY
11286: #include <sys/ktrace.h> /* Must come after several other sys/ includes. */
11286: 
11286: #include <machine/atomic.h>
11286: #include <machine/cpufunc.h>
11286: #include <machine/vmparam.h>
11286: #endif
11286: 
11286: #include <errno.h>
11286: #include <limits.h>
11286: #ifndef SIZE_T_MAX
11449: #  define SIZE_T_MAX	SIZE_MAX
11286: #endif
11286: #include <pthread.h>
11286: #ifdef MOZ_MEMORY_DARWIN
11286: #define _pthread_self pthread_self
11286: #define _pthread_mutex_init pthread_mutex_init
11286: #define _pthread_mutex_trylock pthread_mutex_trylock
11286: #define _pthread_mutex_lock pthread_mutex_lock
11286: #define _pthread_mutex_unlock pthread_mutex_unlock
11286: #endif
11286: #include <sched.h>
11286: #include <stdarg.h>
34477: #include <stdio.h>
11286: #include <stdbool.h>
11286: #include <stdint.h>
11286: #include <stdlib.h>
11286: #include <string.h>
11286: #ifndef MOZ_MEMORY_DARWIN
11286: #include <strings.h>
11286: #endif
11286: #include <unistd.h>
11286: 
11286: #ifdef MOZ_MEMORY_DARWIN
11286: #include <libkern/OSAtomic.h>
11286: #include <mach/mach_error.h>
11286: #include <mach/mach_init.h>
11286: #include <mach/vm_map.h>
11286: #include <malloc/malloc.h>
11286: #endif
11286: 
11286: #ifndef MOZ_MEMORY
11286: #include "un-namespace.h"
11286: #endif
11286: 
11286: #endif
11286: 
15458: #include "jemalloc.h"
80797: #include "linkedlist.h"
15458: 
50840: /* Some tools, such as /dev/dsp wrappers, LD_PRELOAD libraries that
50840:  * happen to override mmap() and call dlsym() from their overridden
50840:  * mmap(). The problem is that dlsym() calls malloc(), and this ends
50840:  * up in a dead lock in jemalloc.
50840:  * On these systems, we prefer to directly use the system call.
50840:  * We do that for Linux systems and kfreebsd with GNU userland.
50840:  * Note sanity checks are not done (alignment of offset, ...) because
50840:  * the uses of mmap are pretty limited, in jemalloc.
50840:  *
50840:  * On Alpha, glibc has a bug that prevents syscall() to work for system
50840:  * calls with 6 arguments
50840:  */
50840: #if (defined(MOZ_MEMORY_LINUX) && !defined(__alpha__)) || \
50840:     (defined(MOZ_MEMORY_BSD) && defined(__GLIBC__))
50840: #include <sys/syscall.h>
50840: #if defined(SYS_mmap) || defined(SYS_mmap2)
50840: static inline
50840: void *_mmap(void *addr, size_t length, int prot, int flags,
50840:             int fd, off_t offset)
50840: {
50840: /* S390 only passes one argument to the mmap system call, which is a
50840:  * pointer to a structure containing the arguments */
50840: #ifdef __s390__
50840: 	struct {
50840: 		void *addr;
50840: 		size_t length;
50840: 		int prot;
50840: 		int flags;
50840: 		int fd;
50840: 		off_t offset;
50840: 	} args = { addr, length, prot, flags, fd, offset };
50840: 	return (void *) syscall(SYS_mmap, &args);
50840: #else
50840: #ifdef SYS_mmap2
50840: 	return (void *) syscall(SYS_mmap2, addr, length, prot, flags,
50840: 	                       fd, offset >> 12);
50840: #else
50840: 	return (void *) syscall(SYS_mmap, addr, length, prot, flags,
50840:                                fd, offset);
50840: #endif
50840: #endif
50840: }
50840: #define mmap _mmap
50840: #define munmap(a, l) syscall(SYS_munmap, a, l)
50840: #endif
50840: #endif
50840: 
11286: #ifdef MOZ_MEMORY_DARWIN
11286: static const bool __isthreaded = true;
11286: #endif
11286: 
24522: #if defined(MOZ_MEMORY_SOLARIS) && defined(MAP_ALIGN) && !defined(JEMALLOC_NEVER_USES_MAP_ALIGN)
24522: #define JEMALLOC_USES_MAP_ALIGN	 /* Required on Solaris 10. Might improve performance elsewhere. */
24522: #endif
24522: 
11286: #define __DECONST(type, var) ((type)(uintptr_t)(const void *)(var))
11286: 
15460: #ifdef MOZ_MEMORY_WINDOWS
15460:    /* MSVC++ does not support C99 variable-length arrays. */
15460: #  define RB_NO_C99_VARARRAYS
15460: #endif
15460: #include "rb.h"
15460: 
11286: #ifdef MALLOC_DEBUG
11286:    /* Disable inlining to make debugging easier. */
11286: #ifdef inline
11286: #undef inline
11286: #endif
11286: 
11286: #  define inline
11286: #endif
11286: 
11286: /* Size of stack-allocated buffer passed to strerror_r(). */
11286: #define	STRERROR_BUF		64
11286: 
79814: /* Minimum alignment of non-tiny allocations is 2^QUANTUM_2POW_MIN bytes. */
11286: #  define QUANTUM_2POW_MIN      4
11286: #ifdef MOZ_MEMORY_SIZEOF_PTR_2POW
11286: #  define SIZEOF_PTR_2POW		MOZ_MEMORY_SIZEOF_PTR_2POW
11286: #else
11286: #  define SIZEOF_PTR_2POW       2
11286: #endif
11286: #define PIC
11286: #ifndef MOZ_MEMORY_DARWIN
11286: static const bool __isthreaded = true;
11286: #else
11286: #  define NO_TLS
11286: #endif
11286: #if 0
11286: #ifdef __i386__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	2
11286: #  define CPU_SPINWAIT		__asm__ volatile("pause")
11286: #endif
11286: #ifdef __ia64__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	3
11286: #endif
11286: #ifdef __alpha__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	3
11286: #  define NO_TLS
11286: #endif
11286: #ifdef __sparc64__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	3
11286: #  define NO_TLS
11286: #endif
11286: #ifdef __amd64__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	3
11286: #  define CPU_SPINWAIT		__asm__ volatile("pause")
11286: #endif
11286: #ifdef __arm__
11286: #  define QUANTUM_2POW_MIN	3
11286: #  define SIZEOF_PTR_2POW	2
11286: #  define NO_TLS
11286: #endif
16218: #ifdef __mips__
16218: #  define QUANTUM_2POW_MIN	3
16218: #  define SIZEOF_PTR_2POW	2
16218: #  define NO_TLS
16218: #endif
11286: #ifdef __powerpc__
11286: #  define QUANTUM_2POW_MIN	4
11286: #  define SIZEOF_PTR_2POW	2
11286: #endif
11286: #endif
11286: 
11286: #define	SIZEOF_PTR		(1U << SIZEOF_PTR_2POW)
11286: 
11286: /* sizeof(int) == (1U << SIZEOF_INT_2POW). */
11286: #ifndef SIZEOF_INT_2POW
11286: #  define SIZEOF_INT_2POW	2
11286: #endif
11286: 
11286: /* We can't use TLS in non-PIC programs, since TLS relies on loader magic. */
11286: #if (!defined(PIC) && !defined(NO_TLS))
11286: #  define NO_TLS
11286: #endif
11286: 
11286: #ifdef NO_TLS
11286:    /* MALLOC_BALANCE requires TLS. */
11286: #  ifdef MALLOC_BALANCE
11286: #    undef MALLOC_BALANCE
11286: #  endif
11286: #endif
11286: 
11286: /*
11286:  * Size and alignment of memory chunks that are allocated by the OS's virtual
11286:  * memory system.
11286:  */
11286: #define	CHUNK_2POW_DEFAULT	20
11449: /* Maximum number of dirty pages per arena. */
15461: #define	DIRTY_MAX_DEFAULT	(1U << 10)
11449: 
11286: /*
11286:  * Maximum size of L1 cache line.  This is used to avoid cache line aliasing,
11286:  * so over-estimates are okay (up to a point), but under-estimates will
11286:  * negatively affect performance.
11286:  */
11286: #define	CACHELINE_2POW		6
11286: #define	CACHELINE		((size_t)(1U << CACHELINE_2POW))
11286: 
79814: /*
79814:  * Smallest size class to support.  On Linux and Mac, even malloc(1) must
79814:  * reserve a word's worth of memory (see Mozilla bug 691003).
79814:  */
79814: #ifdef MOZ_MEMORY_WINDOWS
11286: #define	TINY_MIN_2POW		1
79814: #else
79814: #define TINY_MIN_2POW           (sizeof(void*) == 8 ? 3 : 2)
79814: #endif
11286: 
11286: /*
11286:  * Maximum size class that is a multiple of the quantum, but not (necessarily)
11286:  * a power of 2.  Above this size, allocations are rounded up to the nearest
11286:  * power of 2.
11286:  */
11286: #define	SMALL_MAX_2POW_DEFAULT	9
11286: #define	SMALL_MAX_DEFAULT	(1U << SMALL_MAX_2POW_DEFAULT)
11286: 
11286: /*
11286:  * RUN_MAX_OVRHD indicates maximum desired run header overhead.  Runs are sized
11286:  * as small as possible such that this setting is still honored, without
11286:  * violating other constraints.  The goal is to make runs as small as possible
11286:  * without exceeding a per run external fragmentation threshold.
11286:  *
11286:  * We use binary fixed point math for overhead computations, where the binary
11286:  * point is implicitly RUN_BFP bits to the left.
11286:  *
11286:  * Note that it is possible to set RUN_MAX_OVRHD low enough that it cannot be
11286:  * honored for some/all object sizes, since there is one bit of header overhead
11286:  * per object (plus a constant).  This constraint is relaxed (ignored) for runs
11286:  * that are so small that the per-region overhead is greater than:
11286:  *
11286:  *   (RUN_MAX_OVRHD / (reg_size << (3+RUN_BFP))
11286:  */
11286: #define	RUN_BFP			12
11286: /*                                    \/   Implicit binary fixed point. */
11286: #define	RUN_MAX_OVRHD		0x0000003dU
11286: #define	RUN_MAX_OVRHD_RELAX	0x00001800U
11286: 
16218: /* Put a cap on small object run size.  This overrides RUN_MAX_OVRHD. */
11286: #define	RUN_MAX_SMALL_2POW	15
11286: #define	RUN_MAX_SMALL		(1U << RUN_MAX_SMALL_2POW)
11286: 
11286: /*
11286:  * Hyper-threaded CPUs may need a special instruction inside spin loops in
11286:  * order to yield to another virtual CPU.  If no such instruction is defined
11286:  * above, make CPU_SPINWAIT a no-op.
11286:  */
11286: #ifndef CPU_SPINWAIT
11286: #  define CPU_SPINWAIT
11286: #endif
11286: 
11286: /*
11286:  * Adaptive spinning must eventually switch to blocking, in order to avoid the
11286:  * potential for priority inversion deadlock.  Backing off past a certain point
11286:  * can actually waste time.
11286:  */
11286: #define	SPIN_LIMIT_2POW		11
11286: 
11286: /*
11286:  * Conversion from spinning to blocking is expensive; we use (1U <<
11286:  * BLOCK_COST_2POW) to estimate how many more times costly blocking is than
11286:  * worst-case spinning.
11286:  */
11286: #define	BLOCK_COST_2POW		4
11286: 
11286: #ifdef MALLOC_BALANCE
11286:    /*
11286:     * We use an exponential moving average to track recent lock contention,
11286:     * where the size of the history window is N, and alpha=2/(N+1).
11286:     *
11286:     * Due to integer math rounding, very small values here can cause
11286:     * substantial degradation in accuracy, thus making the moving average decay
11286:     * faster than it would with precise calculation.
11286:     */
11286: #  define BALANCE_ALPHA_INV_2POW	9
11286: 
11286:    /*
11286:     * Threshold value for the exponential moving contention average at which to
11286:     * re-assign a thread.
11286:     */
11286: #  define BALANCE_THRESHOLD_DEFAULT	(1U << (SPIN_LIMIT_2POW-4))
11286: #endif
11286: 
11286: /******************************************************************************/
11286: 
80797: /* MALLOC_DECOMMIT and MALLOC_DOUBLE_PURGE are mutually exclusive. */
80797: #if defined(MALLOC_DECOMMIT) && defined(MALLOC_DOUBLE_PURGE)
80797: #error MALLOC_DECOMMIT and MALLOC_DOUBLE_PURGE are mutually exclusive.
80797: #endif
80797: 
11286: /*
11286:  * Mutexes based on spinlocks.  We can't use normal pthread spinlocks in all
11286:  * places, because they require malloc()ed memory, which causes bootstrapping
11286:  * issues in some cases.
11286:  */
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: #define malloc_mutex_t CRITICAL_SECTION
11286: #define malloc_spinlock_t CRITICAL_SECTION
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: typedef struct {
11286: 	OSSpinLock	lock;
11286: } malloc_mutex_t;
11286: typedef struct {
11286: 	OSSpinLock	lock;
11286: } malloc_spinlock_t;
11286: #elif defined(MOZ_MEMORY)
11286: typedef pthread_mutex_t malloc_mutex_t;
11286: typedef pthread_mutex_t malloc_spinlock_t;
11286: #else
11286: /* XXX these should #ifdef these for freebsd (and linux?) only */
11286: typedef struct {
11286: 	spinlock_t	lock;
11286: } malloc_mutex_t;
11286: typedef malloc_spinlock_t malloc_mutex_t;
11286: #endif
11286: 
11286: /* Set to true once the allocator has been initialized. */
11286: static bool malloc_initialized = false;
11286: 
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: /* No init lock for Windows. */
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: static malloc_mutex_t init_lock = {OS_SPINLOCK_INIT};
42803: #elif defined(MOZ_MEMORY_LINUX) && !defined(MOZ_MEMORY_ANDROID)
11449: static malloc_mutex_t init_lock = PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP;
11286: #elif defined(MOZ_MEMORY)
11286: static malloc_mutex_t init_lock = PTHREAD_MUTEX_INITIALIZER;
11286: #else
11286: static malloc_mutex_t init_lock = {_SPINLOCK_INITIALIZER};
11286: #endif
11286: 
11286: /******************************************************************************/
11286: /*
11286:  * Statistics data structures.
11286:  */
11286: 
11286: #ifdef MALLOC_STATS
11286: 
11286: typedef struct malloc_bin_stats_s malloc_bin_stats_t;
11286: struct malloc_bin_stats_s {
11286: 	/*
11286: 	 * Number of allocation requests that corresponded to the size of this
11286: 	 * bin.
11286: 	 */
11286: 	uint64_t	nrequests;
11286: 
11286: 	/* Total number of runs created for this bin's size class. */
11286: 	uint64_t	nruns;
11286: 
11286: 	/*
11286: 	 * Total number of runs reused by extracting them from the runs tree for
11286: 	 * this bin's size class.
11286: 	 */
11286: 	uint64_t	reruns;
11286: 
11286: 	/* High-water mark for this bin. */
11286: 	unsigned long	highruns;
11286: 
11286: 	/* Current number of runs in this bin. */
11286: 	unsigned long	curruns;
11286: };
11286: 
11286: typedef struct arena_stats_s arena_stats_t;
11286: struct arena_stats_s {
11286: 	/* Number of bytes currently mapped. */
11286: 	size_t		mapped;
11286: 
11286: 	/*
11449: 	 * Total number of purge sweeps, total number of madvise calls made,
11449: 	 * and total pages purged in order to keep dirty unused memory under
11449: 	 * control.
11449: 	 */
11449: 	uint64_t	npurge;
11286: 	uint64_t	nmadvise;
11449: 	uint64_t	purged;
11449: #ifdef MALLOC_DECOMMIT
11449: 	/*
11449: 	 * Total number of decommit/commit operations, and total number of
11449: 	 * pages decommitted.
11449: 	 */
11449: 	uint64_t	ndecommit;
11449: 	uint64_t	ncommit;
11449: 	uint64_t	decommitted;
80161: #endif
35015: 
35015: 	/* Current number of committed pages. */
35015: 	size_t		committed;
11286: 
11286: 	/* Per-size-category statistics. */
11286: 	size_t		allocated_small;
11286: 	uint64_t	nmalloc_small;
11286: 	uint64_t	ndalloc_small;
11286: 
11286: 	size_t		allocated_large;
11286: 	uint64_t	nmalloc_large;
11286: 	uint64_t	ndalloc_large;
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 	/* Number of times this arena reassigned a thread due to contention. */
11286: 	uint64_t	nbalance;
11286: #endif
11286: };
11286: 
11286: typedef struct chunk_stats_s chunk_stats_t;
11286: struct chunk_stats_s {
11286: 	/* Number of chunks that were allocated. */
11286: 	uint64_t	nchunks;
11286: 
11286: 	/* High-water mark for number of chunks allocated. */
11286: 	unsigned long	highchunks;
11286: 
11286: 	/*
11286: 	 * Current number of chunks allocated.  This value isn't maintained for
11286: 	 * any other purpose, so keep track of it in order to be able to set
11286: 	 * highchunks.
11286: 	 */
11286: 	unsigned long	curchunks;
11286: };
11286: 
11286: #endif /* #ifdef MALLOC_STATS */
11286: 
11286: /******************************************************************************/
11286: /*
11286:  * Extent data structures.
11286:  */
11286: 
11286: /* Tree of extents. */
11286: typedef struct extent_node_s extent_node_t;
11286: struct extent_node_s {
11449: 	/* Linkage for the size/address-ordered tree. */
15460: 	rb_node(extent_node_t) link_szad;
11449: 
11286: 	/* Linkage for the address-ordered tree. */
15460: 	rb_node(extent_node_t) link_ad;
11286: 
11286: 	/* Pointer to the extent that this tree node is responsible for. */
11286: 	void	*addr;
11286: 
11286: 	/* Total region size. */
11286: 	size_t	size;
11286: };
15460: typedef rb_tree(extent_node_t) extent_tree_t;
11286: 
11286: /******************************************************************************/
11286: /*
16218:  * Radix tree data structures.
16218:  */
16218: 
16218: #ifdef MALLOC_VALIDATE
16218:    /*
16218:     * Size of each radix tree node (must be a power of 2).  This impacts tree
16218:     * depth.
16218:     */
16218: #  if (SIZEOF_PTR == 4)
16218: #    define MALLOC_RTREE_NODESIZE (1U << 14)
16218: #  else
16218: #    define MALLOC_RTREE_NODESIZE CACHELINE
16218: #  endif
16218: 
16218: typedef struct malloc_rtree_s malloc_rtree_t;
16218: struct malloc_rtree_s {
16218: 	malloc_spinlock_t	lock;
16218: 	void			**root;
16218: 	unsigned		height;
16218: 	unsigned		level2bits[1]; /* Dynamically sized. */
16218: };
16218: #endif
16218: 
16218: /******************************************************************************/
16218: /*
11286:  * Arena data structures.
11286:  */
11286: 
11286: typedef struct arena_s arena_t;
11286: typedef struct arena_bin_s arena_bin_t;
11286: 
16218: /* Each element of the chunk map corresponds to one page within the chunk. */
16218: typedef struct arena_chunk_map_s arena_chunk_map_t;
16218: struct arena_chunk_map_s {
16218: 	/*
16218: 	 * Linkage for run trees.  There are two disjoint uses:
16218: 	 *
16218: 	 * 1) arena_t's runs_avail tree.
16218: 	 * 2) arena_run_t conceptually uses this linkage for in-use non-full
16218: 	 *    runs, rather than directly embedding linkage.
16218: 	 */
16218: 	rb_node(arena_chunk_map_t)	link;
16218: 
16218: 	/*
16218: 	 * Run address (or size) and various flags are stored together.  The bit
16218: 	 * layout looks like (assuming 32-bit system):
16218: 	 *
80797: 	 *   ???????? ???????? ????---- -mckdzla
16218: 	 *
16218: 	 * ? : Unallocated: Run address for first/last pages, unset for internal
16218: 	 *                  pages.
16218: 	 *     Small: Run address.
16218: 	 *     Large: Run size for first page, unset for trailing pages.
16218: 	 * - : Unused.
80797: 	 * m : MADV_FREE/MADV_DONTNEED'ed?
16218: 	 * c : decommitted?
16218: 	 * k : key?
16218: 	 * d : dirty?
16218: 	 * z : zeroed?
16218: 	 * l : large?
16218: 	 * a : allocated?
16218: 	 *
16218: 	 * Following are example bit patterns for the three types of runs.
16218: 	 *
16218: 	 * r : run address
16218: 	 * s : run size
16218: 	 * x : don't care
16218: 	 * - : 0
16218: 	 * [cdzla] : bit set
16218: 	 *
16218: 	 *   Unallocated:
16218: 	 *     ssssssss ssssssss ssss---- --c-----
16218: 	 *     xxxxxxxx xxxxxxxx xxxx---- ----d---
16218: 	 *     ssssssss ssssssss ssss---- -----z--
16218: 	 *
16218: 	 *   Small:
16218: 	 *     rrrrrrrr rrrrrrrr rrrr---- -------a
16218: 	 *     rrrrrrrr rrrrrrrr rrrr---- -------a
16218: 	 *     rrrrrrrr rrrrrrrr rrrr---- -------a
16218: 	 *
16218: 	 *   Large:
16218: 	 *     ssssssss ssssssss ssss---- ------la
16218: 	 *     -------- -------- -------- ------la
16218: 	 *     -------- -------- -------- ------la
16218: 	 */
16218: 	size_t				bits;
80797: 
80797: /* Note that CHUNK_MAP_DECOMMITTED's meaning varies depending on whether
80797:  * MALLOC_DECOMMIT and MALLOC_DOUBLE_PURGE are defined.
80797:  *
80797:  * If MALLOC_DECOMMIT is defined, a page which is CHUNK_MAP_DECOMMITTED must be
80797:  * re-committed with pages_commit() before it may be touched.  If
80797:  * MALLOC_DECOMMIT is defined, MALLOC_DOUBLE_PURGE may not be defined.
80797:  *
80797:  * If neither MALLOC_DECOMMIT nor MALLOC_DOUBLE_PURGE is defined, pages which
80797:  * are madvised (with either MADV_DONTNEED or MADV_FREE) are marked with
80797:  * CHUNK_MAP_MADVISED.
80797:  *
80797:  * Otherwise, if MALLOC_DECOMMIT is not defined and MALLOC_DOUBLE_PURGE is
80797:  * defined, then a page which is madvised is marked as CHUNK_MAP_MADVISED.
80797:  * When it's finally freed with jemalloc_purge_freed_pages, the page is marked
80797:  * as CHUNK_MAP_DECOMMITTED.
80797:  */
80797: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS) || defined(MALLOC_DOUBLE_PURGE)
80797: #define	CHUNK_MAP_MADVISED	((size_t)0x40U)
16218: #define	CHUNK_MAP_DECOMMITTED	((size_t)0x20U)
80797: #define	CHUNK_MAP_MADVISED_OR_DECOMMITTED (CHUNK_MAP_MADVISED | CHUNK_MAP_DECOMMITTED)
16218: #endif
16218: #define	CHUNK_MAP_KEY		((size_t)0x10U)
16218: #define	CHUNK_MAP_DIRTY		((size_t)0x08U)
16218: #define	CHUNK_MAP_ZEROED	((size_t)0x04U)
16218: #define	CHUNK_MAP_LARGE		((size_t)0x02U)
16218: #define	CHUNK_MAP_ALLOCATED	((size_t)0x01U)
16218: };
16218: typedef rb_tree(arena_chunk_map_t) arena_avail_tree_t;
16218: typedef rb_tree(arena_chunk_map_t) arena_run_tree_t;
11286: 
11286: /* Arena chunk header. */
11286: typedef struct arena_chunk_s arena_chunk_t;
11286: struct arena_chunk_s {
11286: 	/* Arena that owns the chunk. */
11286: 	arena_t		*arena;
11286: 
15461: 	/* Linkage for the arena's chunks_dirty tree. */
15461: 	rb_node(arena_chunk_t) link_dirty;
15461: 
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 	/* If we're double-purging, we maintain a linked list of chunks which
80797: 	 * have pages which have been madvise(MADV_FREE)'d but not explicitly
80797: 	 * purged.
80797: 	 *
80797: 	 * We're currently lazy and don't remove a chunk from this list when
80797: 	 * all its madvised pages are recommitted. */
80797: 	LinkedList	chunks_madvised_elem;
80797: #endif
80797: 
11449: 	/* Number of dirty pages. */
11449: 	size_t		ndirty;
11449: 
16218: 	/* Map of pages within chunk that keeps track of free/large/small. */
11286: 	arena_chunk_map_t map[1]; /* Dynamically sized. */
11286: };
15460: typedef rb_tree(arena_chunk_t) arena_chunk_tree_t;
11286: 
11286: typedef struct arena_run_s arena_run_t;
11286: struct arena_run_s {
11286: #ifdef MALLOC_DEBUG
11286: 	uint32_t	magic;
11286: #  define ARENA_RUN_MAGIC 0x384adf93
11286: #endif
11286: 
11286: 	/* Bin this run is associated with. */
11286: 	arena_bin_t	*bin;
11286: 
11286: 	/* Index of first element that might have a free region. */
11286: 	unsigned	regs_minelm;
11286: 
11286: 	/* Number of free regions in run. */
11286: 	unsigned	nfree;
11286: 
11286: 	/* Bitmask of in-use regions (0: in use, 1: free). */
11286: 	unsigned	regs_mask[1]; /* Dynamically sized. */
11286: };
11286: 
11286: struct arena_bin_s {
11286: 	/*
11286: 	 * Current run being used to service allocations of this bin's size
11286: 	 * class.
11286: 	 */
11286: 	arena_run_t	*runcur;
11286: 
11286: 	/*
11286: 	 * Tree of non-full runs.  This tree is used when looking for an
11286: 	 * existing run when runcur is no longer usable.  We choose the
11286: 	 * non-full run that is lowest in memory; this policy tends to keep
11286: 	 * objects packed well, and it can also help reduce the number of
11286: 	 * almost-empty chunks.
11286: 	 */
11286: 	arena_run_tree_t runs;
11286: 
11286: 	/* Size of regions in a run for this bin's size class. */
11286: 	size_t		reg_size;
11286: 
11286: 	/* Total size of a run for this bin's size class. */
11286: 	size_t		run_size;
11286: 
11286: 	/* Total number of regions in a run for this bin's size class. */
11286: 	uint32_t	nregs;
11286: 
11286: 	/* Number of elements in a run's regs_mask for this bin's size class. */
11286: 	uint32_t	regs_mask_nelms;
11286: 
11286: 	/* Offset of first region in a run for this bin's size class. */
11286: 	uint32_t	reg0_offset;
11286: 
11286: #ifdef MALLOC_STATS
11286: 	/* Bin statistics. */
11286: 	malloc_bin_stats_t stats;
11286: #endif
11286: };
11286: 
11286: struct arena_s {
11286: #ifdef MALLOC_DEBUG
11286: 	uint32_t		magic;
11286: #  define ARENA_MAGIC 0x947d3d24
11286: #endif
11286: 
11286: 	/* All operations on this arena require that lock be locked. */
11286: #ifdef MOZ_MEMORY
11286: 	malloc_spinlock_t	lock;
11286: #else
11286: 	pthread_mutex_t		lock;
11286: #endif
11286: 
11286: #ifdef MALLOC_STATS
11286: 	arena_stats_t		stats;
11286: #endif
11286: 
16218: 	/* Tree of dirty-page-containing chunks this arena manages. */
16218: 	arena_chunk_tree_t	chunks_dirty;
16218: 
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 	/* Head of a linked list of MADV_FREE'd-page-containing chunks this
80797: 	 * arena manages. */
80797: 	LinkedList		chunks_madvised;
80797: #endif
80797: 
16218: 	/*
16218: 	 * In order to avoid rapid chunk allocation/deallocation when an arena
16218: 	 * oscillates right on the cusp of needing a new chunk, cache the most
16218: 	 * recently freed chunk.  The spare is left in the arena's chunk trees
16218: 	 * until it is deleted.
15461: 	 *
16218: 	 * There is one spare chunk per arena, rather than one spare total, in
16218: 	 * order to avoid interactions between multiple threads that could make
16218: 	 * a single spare inadequate.
16218: 	 */
16218: 	arena_chunk_t		*spare;
15461: 
15461: 	/*
11449: 	 * Current count of pages within unused runs that are potentially
11286: 	 * dirty, and for which madvise(... MADV_FREE) has not been called.  By
11286: 	 * tracking this, we can institute a limit on how much dirty unused
11286: 	 * memory is mapped for each arena.
11286: 	 */
11286: 	size_t			ndirty;
11286: 
11286: 	/*
16218: 	 * Size/address-ordered tree of this arena's available runs.  This tree
16218: 	 * is used for first-best-fit run allocation.
16218: 	 */
16218: 	arena_avail_tree_t	runs_avail;
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 	/*
11286: 	 * The arena load balancing machinery needs to keep track of how much
11286: 	 * lock contention there is.  This value is exponentially averaged.
11286: 	 */
11286: 	uint32_t		contention;
11286: #endif
11286: 
11286: 	/*
11286: 	 * bins is used to store rings of free regions of the following sizes,
11286: 	 * assuming a 16-byte quantum, 4kB pagesize, and default MALLOC_OPTIONS.
11286: 	 *
11286: 	 *   bins[i] | size |
11286: 	 *   --------+------+
11286: 	 *        0  |    2 |
11286: 	 *        1  |    4 |
11286: 	 *        2  |    8 |
11286: 	 *   --------+------+
11286: 	 *        3  |   16 |
11286: 	 *        4  |   32 |
11286: 	 *        5  |   48 |
11286: 	 *        6  |   64 |
11286: 	 *           :      :
11286: 	 *           :      :
11286: 	 *       33  |  496 |
11286: 	 *       34  |  512 |
11286: 	 *   --------+------+
11286: 	 *       35  | 1024 |
11286: 	 *       36  | 2048 |
11286: 	 *   --------+------+
11286: 	 */
11286: 	arena_bin_t		bins[1]; /* Dynamically sized. */
11286: };
11286: 
11286: /******************************************************************************/
11286: /*
11286:  * Data.
11286:  */
11286: 
50840: #ifndef MOZ_MEMORY_NARENAS_DEFAULT_ONE
11286: /* Number of CPUs. */
11286: static unsigned		ncpus;
50840: #endif
11286: 
11286: /* VM page size. */
11286: static size_t		pagesize;
11286: static size_t		pagesize_mask;
11286: static size_t		pagesize_2pow;
11286: 
11286: /* Various bin-related settings. */
11286: static size_t		bin_maxclass; /* Max size class for bins. */
11286: static unsigned		ntbins; /* Number of (2^n)-spaced tiny bins. */
11286: static unsigned		nqbins; /* Number of quantum-spaced bins. */
11286: static unsigned		nsbins; /* Number of (2^n)-spaced sub-page bins. */
11286: static size_t		small_min;
11286: static size_t		small_max;
11286: 
11286: /* Various quantum-related settings. */
11286: static size_t		quantum;
11286: static size_t		quantum_mask; /* (quantum - 1). */
11286: 
11286: /* Various chunk-related settings. */
11286: static size_t		chunksize;
11286: static size_t		chunksize_mask; /* (chunksize - 1). */
11449: static size_t		chunk_npages;
11449: static size_t		arena_chunk_header_npages;
11286: static size_t		arena_maxclass; /* Max size class for arenas. */
11286: 
11286: /********/
11286: /*
11286:  * Chunks.
11286:  */
11286: 
16218: #ifdef MALLOC_VALIDATE
16218: static malloc_rtree_t *chunk_rtree;
16218: #endif
16218: 
11286: /* Protects chunk-related data structures. */
11286: static malloc_mutex_t	huge_mtx;
11286: 
11286: /* Tree of chunks that are stand-alone huge allocations. */
15460: static extent_tree_t	huge;
11286: 
11286: #ifdef MALLOC_STATS
11286: /* Huge allocation statistics. */
11286: static uint64_t		huge_nmalloc;
11286: static uint64_t		huge_ndalloc;
11286: static size_t		huge_allocated;
11286: #endif
11286: 
15610: #ifdef MALLOC_PAGEFILE
15610: static char		pagefile_templ[PATH_MAX];
15610: #endif
15610: 
11286: /****************************/
11286: /*
11286:  * base (internal allocation).
11286:  */
11286: 
11286: /*
11286:  * Current pages that are being used for internal memory allocations.  These
11286:  * pages are carved up in cacheline-size quanta, so that there is no chance of
11286:  * false cache line sharing.
11286:  */
11286: static void		*base_pages;
11286: static void		*base_next_addr;
80161: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS)
13110: static void		*base_next_decommitted;
13110: #endif
11286: static void		*base_past_addr; /* Addr immediately past base_pages. */
11449: static extent_node_t	*base_nodes;
11286: static malloc_mutex_t	base_mtx;
11286: #ifdef MALLOC_STATS
11286: static size_t		base_mapped;
35015: static size_t		base_committed;
35015: #endif
11286: 
11286: /********/
11286: /*
11286:  * Arenas.
11286:  */
11286: 
11286: /*
11286:  * Arenas that are used to service external requests.  Not all elements of the
11286:  * arenas array are necessarily used; arenas are created lazily as needed.
11286:  */
11286: static arena_t		**arenas;
11286: static unsigned		narenas;
11286: #ifndef NO_TLS
11286: #  ifdef MALLOC_BALANCE
11286: static unsigned		narenas_2pow;
11286: #  else
11286: static unsigned		next_arena;
11286: #  endif
11286: #endif
11286: #ifdef MOZ_MEMORY
11286: static malloc_spinlock_t arenas_lock; /* Protects arenas initialization. */
11286: #else
11286: static pthread_mutex_t arenas_lock; /* Protects arenas initialization. */
11286: #endif
11286: 
11286: #ifndef NO_TLS
11286: /*
11286:  * Map of pthread_self() --> arenas[???], used for selecting an arena to use
11286:  * for allocations.
11286:  */
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: static __thread arena_t	*arenas_map;
11286: #endif
11286: #endif
11286: 
11286: #ifdef MALLOC_STATS
11286: /* Chunk statistics. */
11286: static chunk_stats_t	stats_chunks;
11286: #endif
11286: 
11286: /*******************************/
11286: /*
11286:  * Runtime configuration options.
11286:  */
15462: const char	*_malloc_options;
11286: 
11286: #ifndef MALLOC_PRODUCTION
11286: static bool	opt_abort = true;
11449: #ifdef MALLOC_FILL
11286: static bool	opt_junk = true;
11449: #endif
11286: #else
11286: static bool	opt_abort = false;
11449: #ifdef MALLOC_FILL
11286: static bool	opt_junk = false;
11286: #endif
11449: #endif
11449: static size_t	opt_dirty_max = DIRTY_MAX_DEFAULT;
11286: #ifdef MALLOC_BALANCE
11286: static uint64_t	opt_balance_threshold = BALANCE_THRESHOLD_DEFAULT;
11286: #endif
11286: static bool	opt_print_stats = false;
11286: static size_t	opt_quantum_2pow = QUANTUM_2POW_MIN;
11286: static size_t	opt_small_max_2pow = SMALL_MAX_2POW_DEFAULT;
11286: static size_t	opt_chunk_2pow = CHUNK_2POW_DEFAULT;
15610: #ifdef MALLOC_PAGEFILE
22710: static bool	opt_pagefile = false;
15610: #endif
11449: #ifdef MALLOC_UTRACE
11286: static bool	opt_utrace = false;
11449: #endif
11449: #ifdef MALLOC_SYSV
11286: static bool	opt_sysv = false;
11449: #endif
11449: #ifdef MALLOC_XMALLOC
11286: static bool	opt_xmalloc = false;
11449: #endif
11449: #ifdef MALLOC_FILL
11286: static bool	opt_zero = false;
11449: #endif
11286: static int	opt_narenas_lshift = 0;
11286: 
11449: #ifdef MALLOC_UTRACE
11286: typedef struct {
11286: 	void	*p;
11286: 	size_t	s;
11286: 	void	*r;
11286: } malloc_utrace_t;
11286: 
11286: #define	UTRACE(a, b, c)							\
11286: 	if (opt_utrace) {						\
11449: 		malloc_utrace_t ut;					\
11449: 		ut.p = (a);						\
11449: 		ut.s = (b);						\
11449: 		ut.r = (c);						\
11286: 		utrace(&ut, sizeof(ut));				\
11286: 	}
11449: #else
11449: #define	UTRACE(a, b, c)
11286: #endif
11286: 
11286: /******************************************************************************/
11286: /*
11286:  * Begin function prototypes for non-inline static functions.
11286:  */
11286: 
73512: static char	*umax2s(uintmax_t x, unsigned base, char *s);
11286: static bool	malloc_mutex_init(malloc_mutex_t *mutex);
11286: static bool	malloc_spin_init(malloc_spinlock_t *lock);
11286: static void	wrtmessage(const char *p1, const char *p2, const char *p3,
11286: 		const char *p4);
11286: #ifdef MALLOC_STATS
11286: #ifdef MOZ_MEMORY_DARWIN
11286: /* Avoid namespace collision with OS X's malloc APIs. */
15458: #define malloc_printf moz_malloc_printf
11286: #endif
11286: static void	malloc_printf(const char *format, ...);
11286: #endif
11449: static bool	base_pages_alloc_mmap(size_t minsize);
11286: static bool	base_pages_alloc(size_t minsize);
11286: static void	*base_alloc(size_t size);
11286: static void	*base_calloc(size_t number, size_t size);
11286: static extent_node_t *base_node_alloc(void);
11286: static void	base_node_dealloc(extent_node_t *node);
11286: #ifdef MALLOC_STATS
11286: static void	stats_print(arena_t *arena);
11286: #endif
15610: static void	*pages_map(void *addr, size_t size, int pfd);
11286: static void	pages_unmap(void *addr, size_t size);
15610: static void	*chunk_alloc_mmap(size_t size, bool pagefile);
15610: #ifdef MALLOC_PAGEFILE
15610: static int	pagefile_init(size_t size);
15610: static void	pagefile_close(int pfd);
15610: #endif
15610: static void	*chunk_alloc(size_t size, bool zero, bool pagefile);
11449: static void	chunk_dealloc_mmap(void *chunk, size_t size);
11286: static void	chunk_dealloc(void *chunk, size_t size);
11286: #ifndef NO_TLS
11286: static arena_t	*choose_arena_hard(void);
11286: #endif
11449: static void	arena_run_split(arena_t *arena, arena_run_t *run, size_t size,
16218:     bool large, bool zero);
15610: static void arena_chunk_init(arena_t *arena, arena_chunk_t *chunk);
11286: static void	arena_chunk_dealloc(arena_t *arena, arena_chunk_t *chunk);
15610: static arena_run_t *arena_run_alloc(arena_t *arena, arena_bin_t *bin,
16218:     size_t size, bool large, bool zero);
11286: static void	arena_purge(arena_t *arena);
11449: static void	arena_run_dalloc(arena_t *arena, arena_run_t *run, bool dirty);
11449: static void	arena_run_trim_head(arena_t *arena, arena_chunk_t *chunk,
16218:     arena_run_t *run, size_t oldsize, size_t newsize);
11449: static void	arena_run_trim_tail(arena_t *arena, arena_chunk_t *chunk,
16218:     arena_run_t *run, size_t oldsize, size_t newsize, bool dirty);
11286: static arena_run_t *arena_bin_nonfull_run_get(arena_t *arena, arena_bin_t *bin);
11286: static void *arena_bin_malloc_hard(arena_t *arena, arena_bin_t *bin);
11286: static size_t arena_bin_run_size_calc(arena_bin_t *bin, size_t min_run_size);
11449: #ifdef MALLOC_BALANCE
11449: static void	arena_lock_balance_hard(arena_t *arena);
11449: #endif
11449: static void	*arena_malloc_large(arena_t *arena, size_t size, bool zero);
11286: static void	*arena_palloc(arena_t *arena, size_t alignment, size_t size,
11286:     size_t alloc_size);
11286: static size_t	arena_salloc(const void *ptr);
11449: static void	arena_dalloc_large(arena_t *arena, arena_chunk_t *chunk,
11449:     void *ptr);
11773: static void	arena_ralloc_large_shrink(arena_t *arena, arena_chunk_t *chunk,
11449:     void *ptr, size_t size, size_t oldsize);
11773: static bool	arena_ralloc_large_grow(arena_t *arena, arena_chunk_t *chunk,
11449:     void *ptr, size_t size, size_t oldsize);
11773: static bool	arena_ralloc_large(void *ptr, size_t size, size_t oldsize);
11286: static void	*arena_ralloc(void *ptr, size_t size, size_t oldsize);
11286: static bool	arena_new(arena_t *arena);
11286: static arena_t	*arenas_extend(unsigned ind);
11286: static void	*huge_malloc(size_t size, bool zero);
11286: static void	*huge_palloc(size_t alignment, size_t size);
11286: static void	*huge_ralloc(void *ptr, size_t size, size_t oldsize);
11286: static void	huge_dalloc(void *ptr);
11286: static void	malloc_print_stats(void);
11449: #ifndef MOZ_MEMORY_WINDOWS
11449: static
11449: #endif
11449: bool		malloc_init_hard(void);
11286: 
77556: #ifdef MOZ_MEMORY_ANDROID
77556: void	_malloc_prefork(void);
77556: void	_malloc_postfork(void);
77556: #else
73512: static void	_malloc_prefork(void);
73512: static void	_malloc_postfork(void);
77556: #endif
73512: 
73512: #ifdef MOZ_MEMORY_DARWIN
73512: /*
73512:  * MALLOC_ZONE_T_NOTE
73512:  *
73512:  * On Darwin, we hook into the memory allocator using a malloc_zone_t struct.
73512:  * We must be very careful around this struct because of different behaviour on
73512:  * different versions of OSX.
73512:  *
73512:  * Each of OSX 10.5, 10.6 and 10.7 use different versions of the struct
73512:  * (with version numbers 3, 6 and 8 respectively). The binary we use on each of
73512:  * these platforms will not necessarily be built using the correct SDK [1].
73512:  * This means we need to statically know the correct struct size to use on all
73512:  * OSX releases, and have a fallback for unknown future versions. The struct
73512:  * sizes defined in osx_zone_types.h.
73512:  *
73512:  * For OSX 10.8 and later, we may expect the malloc_zone_t struct to change
73512:  * again, and need to dynamically account for this. By simply leaving
73512:  * malloc_zone_t alone, we don't quite deal with the problem, because there
73512:  * remain calls to jemalloc through the mozalloc interface. We check this
79793:  * dynamically on each allocation, using the CHECK_DARWIN macro and
79793:  * osx_use_jemalloc.
73512:  *
73512:  *
73512:  * [1] Mozilla is built as a universal binary on Mac, supporting i386 and
73512:  *     x86_64. The i386 target is built using the 10.5 SDK, even if it runs on
73512:  *     10.6. The x86_64 target is built using the 10.6 SDK, even if it runs on
79793:  *     10.7 or later, or 10.5.
73512:  *
73512:  * FIXME:
73512:  *   When later versions of OSX come out (10.8 and up), we need to check their
73512:  *   malloc_zone_t versions. If they're greater than 8, we need a new version
73512:  *   of malloc_zone_t adapted into osx_zone_types.h.
73512:  */
73512: 
73512: #include "osx_zone_types.h"
73512: 
73512: #define LEOPARD_MALLOC_ZONE_T_VERSION 3
73512: #define SNOW_LEOPARD_MALLOC_ZONE_T_VERSION 6
73512: #define LION_MALLOC_ZONE_T_VERSION 8
73512: 
79793: static bool osx_use_jemalloc = false;
79793: 
79793: 
81354: static lion_malloc_zone l_szone;
73512: static malloc_zone_t * szone = (malloc_zone_t*)(&l_szone);
73512: 
81354: static lion_malloc_introspection l_ozone_introspect;
73512: static malloc_introspection_t * const ozone_introspect =
73512: 	(malloc_introspection_t*)(&l_ozone_introspect);
73512: static void szone2ozone(malloc_zone_t *zone, size_t size);
73512: static size_t zone_version_size(int version);
73512: #endif
73512: 
11286: /*
11286:  * End function prototypes.
11286:  */
11286: /******************************************************************************/
16217: 
16217: /*
16217:  * umax2s() provides minimal integer printing functionality, which is
16217:  * especially useful for situations where allocation in vsnprintf() calls would
16217:  * potentially cause deadlock.
16217:  */
73512: #define	UMAX2S_BUFSIZE	65
73512: char *
73512: umax2s(uintmax_t x, unsigned base, char *s)
16217: {
16217: 	unsigned i;
16217: 
16217: 	i = UMAX2S_BUFSIZE - 1;
16217: 	s[i] = '\0';
73512: 	switch (base) {
73512: 	case 10:
16217: 		do {
16217: 			i--;
16217: 			s[i] = "0123456789"[x % 10];
16217: 			x /= 10;
16217: 		} while (x > 0);
73512: 		break;
73512: 	case 16:
73512: 		do {
73512: 			i--;
73512: 			s[i] = "0123456789abcdef"[x & 0xf];
73512: 			x >>= 4;
73512: 		} while (x > 0);
73512: 		break;
73512: 	default:
73512: 		do {
73512: 			i--;
73512: 			s[i] = "0123456789abcdefghijklmnopqrstuvwxyz"[x % base];
73512: 			x /= base;
73512: 		} while (x > 0);
73512: 	}
16217: 
16217: 	return (&s[i]);
16217: }
16217: 
16217: static void
16217: wrtmessage(const char *p1, const char *p2, const char *p3, const char *p4)
16217: {
16217: #if defined(MOZ_MEMORY) && !defined(MOZ_MEMORY_WINDOWS)
16217: #define	_write	write
16217: #endif
16217: 	_write(STDERR_FILENO, p1, (unsigned int) strlen(p1));
16217: 	_write(STDERR_FILENO, p2, (unsigned int) strlen(p2));
16217: 	_write(STDERR_FILENO, p3, (unsigned int) strlen(p3));
16217: 	_write(STDERR_FILENO, p4, (unsigned int) strlen(p4));
16217: }
16217: 
16217: #define _malloc_message malloc_message
16217: 
16217: void	(*_malloc_message)(const char *p1, const char *p2, const char *p3,
16217: 	    const char *p4) = wrtmessage;
16217: 
16217: #ifdef MALLOC_DEBUG
16217: #  define assert(e) do {						\
16217: 	if (!(e)) {							\
16217: 		char line_buf[UMAX2S_BUFSIZE];				\
73512: 		_malloc_message(__FILE__, ":", umax2s(__LINE__, 10,	\
16217: 		    line_buf), ": Failed assertion: ");			\
16217: 		_malloc_message("\"", #e, "\"\n", "");			\
16217: 		abort();						\
16217: 	}								\
16217: } while (0)
16217: #else
16217: #define assert(e)
16217: #endif
16217: 
16217: /******************************************************************************/
11286: /*
11286:  * Begin mutex.  We can't use normal pthread mutexes in all places, because
11286:  * they require malloc()ed memory, which causes bootstrapping issues in some
11286:  * cases.
11286:  */
11286: 
11286: static bool
11286: malloc_mutex_init(malloc_mutex_t *mutex)
11286: {
69458: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	if (__isthreaded)
11286: 		if (! __crtInitCritSecAndSpinCount(mutex, _CRT_SPINCOUNT))
11286: 			return (true);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	mutex->lock = OS_SPINLOCK_INIT;
42803: #elif defined(MOZ_MEMORY_LINUX) && !defined(MOZ_MEMORY_ANDROID)
11449: 	pthread_mutexattr_t attr;
11449: 	if (pthread_mutexattr_init(&attr) != 0)
11449: 		return (true);
11449: 	pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
11449: 	if (pthread_mutex_init(mutex, &attr) != 0) {
11449: 		pthread_mutexattr_destroy(&attr);
11449: 		return (true);
11449: 	}
11449: 	pthread_mutexattr_destroy(&attr);
11286: #elif defined(MOZ_MEMORY)
11286: 	if (pthread_mutex_init(mutex, NULL) != 0)
11286: 		return (true);
11286: #else
11286: 	static const spinlock_t lock = _SPINLOCK_INITIALIZER;
11286: 
11286: 	mutex->lock = lock;
11286: #endif
11286: 	return (false);
11286: }
11286: 
11286: static inline void
11286: malloc_mutex_lock(malloc_mutex_t *mutex)
11286: {
11286: 
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	EnterCriticalSection(mutex);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	OSSpinLockLock(&mutex->lock);
11286: #elif defined(MOZ_MEMORY)
11286: 	pthread_mutex_lock(mutex);
11286: #else
11286: 	if (__isthreaded)
11286: 		_SPINLOCK(&mutex->lock);
11286: #endif
11286: }
11286: 
11286: static inline void
11286: malloc_mutex_unlock(malloc_mutex_t *mutex)
11286: {
11286: 
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	LeaveCriticalSection(mutex);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	OSSpinLockUnlock(&mutex->lock);
11286: #elif defined(MOZ_MEMORY)
11286: 	pthread_mutex_unlock(mutex);
11286: #else
11286: 	if (__isthreaded)
11286: 		_SPINUNLOCK(&mutex->lock);
11286: #endif
11286: }
11286: 
11286: static bool
11286: malloc_spin_init(malloc_spinlock_t *lock)
11286: {
69458: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	if (__isthreaded)
11286: 		if (! __crtInitCritSecAndSpinCount(lock, _CRT_SPINCOUNT))
11286: 			return (true);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	lock->lock = OS_SPINLOCK_INIT;
42803: #elif defined(MOZ_MEMORY_LINUX) && !defined(MOZ_MEMORY_ANDROID)
11449: 	pthread_mutexattr_t attr;
11449: 	if (pthread_mutexattr_init(&attr) != 0)
11449: 		return (true);
11449: 	pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
11449: 	if (pthread_mutex_init(lock, &attr) != 0) {
11449: 		pthread_mutexattr_destroy(&attr);
11449: 		return (true);
11449: 	}
11449: 	pthread_mutexattr_destroy(&attr);
11286: #elif defined(MOZ_MEMORY)
11286: 	if (pthread_mutex_init(lock, NULL) != 0)
11286: 		return (true);
11286: #else
11286: 	lock->lock = _SPINLOCK_INITIALIZER;
11286: #endif
11286: 	return (false);
11286: }
11286: 
11286: static inline void
11286: malloc_spin_lock(malloc_spinlock_t *lock)
11286: {
11286: 
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	EnterCriticalSection(lock);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	OSSpinLockLock(&lock->lock);
11286: #elif defined(MOZ_MEMORY)
11286: 	pthread_mutex_lock(lock);
11286: #else
11286: 	if (__isthreaded)
11286: 		_SPINLOCK(&lock->lock);
11286: #endif
11286: }
11286: 
11286: static inline void
11286: malloc_spin_unlock(malloc_spinlock_t *lock)
11286: {
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: 	LeaveCriticalSection(lock);
11286: #elif defined(MOZ_MEMORY_DARWIN)
11286: 	OSSpinLockUnlock(&lock->lock);
11286: #elif defined(MOZ_MEMORY)
11286: 	pthread_mutex_unlock(lock);
11286: #else
11286: 	if (__isthreaded)
11286: 		_SPINUNLOCK(&lock->lock);
11286: #endif
11286: }
11286: 
11286: /*
11286:  * End mutex.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin spin lock.  Spin locks here are actually adaptive mutexes that block
11286:  * after a period of spinning, because unbounded spinning would allow for
11286:  * priority inversion.
11286:  */
11286: 
11286: #if defined(MOZ_MEMORY) && !defined(MOZ_MEMORY_DARWIN)
11286: #  define	malloc_spin_init	malloc_mutex_init
11286: #  define	malloc_spin_lock	malloc_mutex_lock
11286: #  define	malloc_spin_unlock	malloc_mutex_unlock
11286: #endif
11286: 
11286: #ifndef MOZ_MEMORY
11286: /*
11286:  * We use an unpublished interface to initialize pthread mutexes with an
11286:  * allocation callback, in order to avoid infinite recursion.
11286:  */
11286: int	_pthread_mutex_init_calloc_cb(pthread_mutex_t *mutex,
11286:     void *(calloc_cb)(size_t, size_t));
11286: 
11286: __weak_reference(_pthread_mutex_init_calloc_cb_stub,
11286:     _pthread_mutex_init_calloc_cb);
11286: 
11286: int
11286: _pthread_mutex_init_calloc_cb_stub(pthread_mutex_t *mutex,
11286:     void *(calloc_cb)(size_t, size_t))
11286: {
11286: 
11286: 	return (0);
11286: }
11286: 
11286: static bool
11286: malloc_spin_init(pthread_mutex_t *lock)
11286: {
11286: 
11286: 	if (_pthread_mutex_init_calloc_cb(lock, base_calloc) != 0)
11286: 		return (true);
11286: 
11286: 	return (false);
11286: }
11286: 
11286: static inline unsigned
11286: malloc_spin_lock(pthread_mutex_t *lock)
11286: {
11286: 	unsigned ret = 0;
11286: 
11286: 	if (__isthreaded) {
11286: 		if (_pthread_mutex_trylock(lock) != 0) {
11286: 			unsigned i;
11286: 			volatile unsigned j;
11286: 
11286: 			/* Exponentially back off. */
11286: 			for (i = 1; i <= SPIN_LIMIT_2POW; i++) {
11286: 				for (j = 0; j < (1U << i); j++)
11286: 					ret++;
11286: 
11286: 				CPU_SPINWAIT;
11286: 				if (_pthread_mutex_trylock(lock) == 0)
11286: 					return (ret);
11286: 			}
11286: 
11286: 			/*
11286: 			 * Spinning failed.  Block until the lock becomes
11286: 			 * available, in order to avoid indefinite priority
11286: 			 * inversion.
11286: 			 */
11286: 			_pthread_mutex_lock(lock);
11286: 			assert((ret << BLOCK_COST_2POW) != 0);
11286: 			return (ret << BLOCK_COST_2POW);
11286: 		}
11286: 	}
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: static inline void
11286: malloc_spin_unlock(pthread_mutex_t *lock)
11286: {
11286: 
11286: 	if (__isthreaded)
11286: 		_pthread_mutex_unlock(lock);
11286: }
11286: #endif
11286: 
11286: /*
11286:  * End spin lock.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin Utility functions/macros.
11286:  */
11286: 
11286: /* Return the chunk address for allocation address a. */
11286: #define	CHUNK_ADDR2BASE(a)						\
11286: 	((void *)((uintptr_t)(a) & ~chunksize_mask))
11286: 
11286: /* Return the chunk offset of address a. */
11286: #define	CHUNK_ADDR2OFFSET(a)						\
11286: 	((size_t)((uintptr_t)(a) & chunksize_mask))
11286: 
11286: /* Return the smallest chunk multiple that is >= s. */
11286: #define	CHUNK_CEILING(s)						\
11286: 	(((s) + chunksize_mask) & ~chunksize_mask)
11286: 
11286: /* Return the smallest cacheline multiple that is >= s. */
11286: #define	CACHELINE_CEILING(s)						\
11286: 	(((s) + (CACHELINE - 1)) & ~(CACHELINE - 1))
11286: 
11286: /* Return the smallest quantum multiple that is >= a. */
11286: #define	QUANTUM_CEILING(a)						\
11286: 	(((a) + quantum_mask) & ~quantum_mask)
11286: 
11286: /* Return the smallest pagesize multiple that is >= s. */
11286: #define	PAGE_CEILING(s)							\
11286: 	(((s) + pagesize_mask) & ~pagesize_mask)
11286: 
11286: /* Compute the smallest power of 2 that is >= x. */
11286: static inline size_t
11286: pow2_ceil(size_t x)
11286: {
11286: 
11286: 	x--;
11286: 	x |= x >> 1;
11286: 	x |= x >> 2;
11286: 	x |= x >> 4;
11286: 	x |= x >> 8;
11286: 	x |= x >> 16;
11286: #if (SIZEOF_PTR == 8)
11286: 	x |= x >> 32;
11286: #endif
11286: 	x++;
11286: 	return (x);
11286: }
11286: 
14033: #ifdef MALLOC_BALANCE
11286: /*
11286:  * Use a simple linear congruential pseudo-random number generator:
11286:  *
11286:  *   prn(y) = (a*x + c) % m
11286:  *
11286:  * where the following constants ensure maximal period:
11286:  *
11286:  *   a == Odd number (relatively prime to 2^n), and (a-1) is a multiple of 4.
11286:  *   c == Odd number (relatively prime to 2^n).
11286:  *   m == 2^32
11286:  *
11286:  * See Knuth's TAOCP 3rd Ed., Vol. 2, pg. 17 for details on these constraints.
11286:  *
11286:  * This choice of m has the disadvantage that the quality of the bits is
11286:  * proportional to bit position.  For example. the lowest bit has a cycle of 2,
11286:  * the next has a cycle of 4, etc.  For this reason, we prefer to use the upper
11286:  * bits.
11286:  */
11286: #  define PRN_DEFINE(suffix, var, a, c)					\
11286: static inline void							\
11286: sprn_##suffix(uint32_t seed)						\
11286: {									\
11286: 	var = seed;							\
11286: }									\
11286: 									\
11286: static inline uint32_t							\
11286: prn_##suffix(uint32_t lg_range)						\
11286: {									\
11286: 	uint32_t ret, x;						\
11286: 									\
11286: 	assert(lg_range > 0);						\
11286: 	assert(lg_range <= 32);						\
11286: 									\
11286: 	x = (var * (a)) + (c);						\
11286: 	var = x;							\
11286: 	ret = x >> (32 - lg_range);					\
11286: 									\
11286: 	return (ret);							\
11286: }
11286: #  define SPRN(suffix, seed)	sprn_##suffix(seed)
11286: #  define PRN(suffix, lg_range)	prn_##suffix(lg_range)
11286: #endif
11286: 
11286: #ifdef MALLOC_BALANCE
11286: /* Define the PRNG used for arena assignment. */
11286: static __thread uint32_t balance_x;
11286: PRN_DEFINE(balance, balance_x, 1297, 1301)
11286: #endif
11286: 
11449: #ifdef MALLOC_UTRACE
11449: static int
11449: utrace(const void *addr, size_t len)
11449: {
11449: 	malloc_utrace_t *ut = (malloc_utrace_t *)addr;
73512: 	char buf_a[UMAX2S_BUFSIZE];
73512: 	char buf_b[UMAX2S_BUFSIZE];
11449: 
11449: 	assert(len == sizeof(malloc_utrace_t));
11449: 
73512: 	if (ut->p == NULL && ut->s == 0 && ut->r == NULL) {
73512: 		_malloc_message(
73512: 		    umax2s(getpid(), 10, buf_a),
73512: 		    " x USER malloc_init()\n", "", "");
73512: 	} else if (ut->p == NULL && ut->r != NULL) {
73512: 		_malloc_message(
73512: 		    umax2s(getpid(), 10, buf_a),
73512: 		    " x USER 0x",
73512: 		    umax2s((uintptr_t)ut->r, 16, buf_b),
73512: 		    " = malloc(");
73512: 		_malloc_message(
73512: 		    umax2s(ut->s, 10, buf_a),
73512: 		    ")\n", "", "");
11449: 	} else if (ut->p != NULL && ut->r != NULL) {
73512: 		_malloc_message(
73512: 		    umax2s(getpid(), 10, buf_a),
73512: 		    " x USER 0x",
73512: 		    umax2s((uintptr_t)ut->r, 16, buf_b),
73512: 		    " = realloc(0x");
73512: 		_malloc_message(
73512: 		    umax2s((uintptr_t)ut->p, 16, buf_a),
73512: 		    ", ",
73512: 		    umax2s(ut->s, 10, buf_b),
73512: 		    ")\n");
73512: 	} else {
73512: 		_malloc_message(
73512: 		    umax2s(getpid(), 10, buf_a),
73512: 		    " x USER free(0x",
73512: 		    umax2s((uintptr_t)ut->p, 16, buf_b),
73512: 		    ")\n");
73512: 	}
11449: 
11449: 	return (0);
11449: }
11449: #endif
11449: 
11286: static inline const char *
11286: _getprogname(void)
11286: {
11286: 
11286: 	return ("<jemalloc>");
11286: }
11286: 
11286: #ifdef MALLOC_STATS
11286: /*
11286:  * Print to stderr in such a way as to (hopefully) avoid memory allocation.
11286:  */
11286: static void
11286: malloc_printf(const char *format, ...)
11286: {
11286: 	char buf[4096];
11286: 	va_list ap;
11286: 
11286: 	va_start(ap, format);
11286: 	vsnprintf(buf, sizeof(buf), format, ap);
11286: 	va_end(ap);
11286: 	_malloc_message(buf, "", "", "");
11286: }
11286: #endif
11286: 
11286: /******************************************************************************/
11286: 
13110: static inline void
13110: pages_decommit(void *addr, size_t size)
13110: {
13110: 
13110: #ifdef MOZ_MEMORY_WINDOWS
13110: 	VirtualFree(addr, size, MEM_DECOMMIT);
13110: #else
13110: 	if (mmap(addr, size, PROT_NONE, MAP_FIXED | MAP_PRIVATE | MAP_ANON, -1,
13110: 	    0) == MAP_FAILED)
13110: 		abort();
13110: #endif
13110: }
13110: 
13110: static inline void
13110: pages_commit(void *addr, size_t size)
13110: {
13110: 
13110: #  ifdef MOZ_MEMORY_WINDOWS
13110: 	VirtualAlloc(addr, size, MEM_COMMIT, PAGE_READWRITE);
13110: #  else
13110: 	if (mmap(addr, size, PROT_READ | PROT_WRITE, MAP_FIXED | MAP_PRIVATE |
13110: 	    MAP_ANON, -1, 0) == MAP_FAILED)
13110: 		abort();
13110: #  endif
13110: }
13110: 
11449: static bool
11286: base_pages_alloc_mmap(size_t minsize)
11286: {
15610: 	bool ret;
11286: 	size_t csize;
80161: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS)
13110: 	size_t pminsize;
13110: #endif
15610: 	int pfd;
11286: 
11286: 	assert(minsize != 0);
15610: 	csize = CHUNK_CEILING(minsize);
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (opt_pagefile) {
15610: 		pfd = pagefile_init(csize);
15610: 		if (pfd == -1)
11286: 			return (true);
15610: 	} else
15610: #endif
15610: 		pfd = -1;
15610: 	base_pages = pages_map(NULL, csize, pfd);
15610: 	if (base_pages == NULL) {
15610: 		ret = true;
15610: 		goto RETURN;
15610: 	}
11286: 	base_next_addr = base_pages;
11286: 	base_past_addr = (void *)((uintptr_t)base_pages + csize);
80161: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS)
13110: 	/*
13110: 	 * Leave enough pages for minsize committed, since otherwise they would
13110: 	 * have to be immediately recommitted.
13110: 	 */
13110: 	pminsize = PAGE_CEILING(minsize);
13110: 	base_next_decommitted = (void *)((uintptr_t)base_pages + pminsize);
80161: #  if defined(MALLOC_DECOMMIT)
13110: 	if (pminsize < csize)
13110: 		pages_decommit(base_next_decommitted, csize - pminsize);
13110: #  endif
11286: #  ifdef MALLOC_STATS
11286: 	base_mapped += csize;
35015: 	base_committed += pminsize;
35015: #  endif
11286: #endif
11286: 
15610: 	ret = false;
15610: RETURN:
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (pfd != -1)
15610: 		pagefile_close(pfd);
15610: #endif
11286: 	return (false);
11286: }
11286: 
11286: static bool
11286: base_pages_alloc(size_t minsize)
11286: {
11286: 
11286: 	if (base_pages_alloc_mmap(minsize) == false)
11286: 		return (false);
11286: 
11286: 	return (true);
11286: }
11286: 
11449: static void *
11449: base_alloc(size_t size)
11286: {
11286: 	void *ret;
11286: 	size_t csize;
11286: 
11286: 	/* Round size up to nearest multiple of the cacheline size. */
11286: 	csize = CACHELINE_CEILING(size);
11286: 
11449: 	malloc_mutex_lock(&base_mtx);
11286: 	/* Make sure there's enough space for the allocation. */
11286: 	if ((uintptr_t)base_next_addr + csize > (uintptr_t)base_past_addr) {
15456: 		if (base_pages_alloc(csize)) {
15456: 			malloc_mutex_unlock(&base_mtx);
11286: 			return (NULL);
11286: 		}
15456: 	}
11286: 	/* Allocate. */
11286: 	ret = base_next_addr;
11286: 	base_next_addr = (void *)((uintptr_t)base_next_addr + csize);
80161: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS)
13110: 	/* Make sure enough pages are committed for the new allocation. */
13110: 	if ((uintptr_t)base_next_addr > (uintptr_t)base_next_decommitted) {
13110: 		void *pbase_next_addr =
13110: 		    (void *)(PAGE_CEILING((uintptr_t)base_next_addr));
13110: 
80161: #  ifdef MALLOC_DECOMMIT
13110: 		pages_commit(base_next_decommitted, (uintptr_t)pbase_next_addr -
13110: 		    (uintptr_t)base_next_decommitted);
80161: #  endif
13110: 		base_next_decommitted = pbase_next_addr;
35015: #  ifdef MALLOC_STATS
35015: 		base_committed += (uintptr_t)pbase_next_addr -
35015: 		    (uintptr_t)base_next_decommitted;
35015: #  endif
13110: 	}
13110: #endif
11286: 	malloc_mutex_unlock(&base_mtx);
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, size, 0, false);
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: static void *
11286: base_calloc(size_t number, size_t size)
11286: {
11286: 	void *ret;
11286: 
11286: 	ret = base_alloc(number * size);
14033: #ifdef MALLOC_VALGRIND
14033: 	if (ret != NULL) {
14033: 		VALGRIND_FREELIKE_BLOCK(ret, 0);
14033: 		VALGRIND_MALLOCLIKE_BLOCK(ret, size, 0, true);
14033: 	}
14033: #endif
11286: 	memset(ret, 0, number * size);
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: static extent_node_t *
11286: base_node_alloc(void)
11286: {
11286: 	extent_node_t *ret;
11286: 
11286: 	malloc_mutex_lock(&base_mtx);
11449: 	if (base_nodes != NULL) {
11449: 		ret = base_nodes;
11449: 		base_nodes = *(extent_node_t **)ret;
14033: 		VALGRIND_FREELIKE_BLOCK(ret, 0);
14033: 		VALGRIND_MALLOCLIKE_BLOCK(ret, sizeof(extent_node_t), 0, false);
11286: 		malloc_mutex_unlock(&base_mtx);
11449: 	} else {
11286: 		malloc_mutex_unlock(&base_mtx);
11449: 		ret = (extent_node_t *)base_alloc(sizeof(extent_node_t));
11449: 	}
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: static void
11286: base_node_dealloc(extent_node_t *node)
11286: {
11286: 
11286: 	malloc_mutex_lock(&base_mtx);
14033: 	VALGRIND_FREELIKE_BLOCK(node, 0);
14033: 	VALGRIND_MALLOCLIKE_BLOCK(node, sizeof(extent_node_t *), 0, false);
11449: 	*(extent_node_t **)node = base_nodes;
11449: 	base_nodes = node;
11286: 	malloc_mutex_unlock(&base_mtx);
11286: }
11286: 
11286: /******************************************************************************/
11286: 
11286: #ifdef MALLOC_STATS
11286: static void
11286: stats_print(arena_t *arena)
11286: {
11286: 	unsigned i, gap_start;
11286: 
11449: #ifdef MOZ_MEMORY_WINDOWS
11449: 	malloc_printf("dirty: %Iu page%s dirty, %I64u sweep%s,"
11449: 	    " %I64u madvise%s, %I64u page%s purged\n",
11449: 	    arena->ndirty, arena->ndirty == 1 ? "" : "s",
11449: 	    arena->stats.npurge, arena->stats.npurge == 1 ? "" : "s",
11449: 	    arena->stats.nmadvise, arena->stats.nmadvise == 1 ? "" : "s",
11449: 	    arena->stats.purged, arena->stats.purged == 1 ? "" : "s");
11449: #  ifdef MALLOC_DECOMMIT
11449: 	malloc_printf("decommit: %I64u decommit%s, %I64u commit%s,"
11449: 	    " %I64u page%s decommitted\n",
11449: 	    arena->stats.ndecommit, (arena->stats.ndecommit == 1) ? "" : "s",
11449: 	    arena->stats.ncommit, (arena->stats.ncommit == 1) ? "" : "s",
11449: 	    arena->stats.decommitted,
11449: 	    (arena->stats.decommitted == 1) ? "" : "s");
11449: #  endif
11449: 
11286: 	malloc_printf("            allocated      nmalloc      ndalloc\n");
11286: 	malloc_printf("small:   %12Iu %12I64u %12I64u\n",
11286: 	    arena->stats.allocated_small, arena->stats.nmalloc_small,
11286: 	    arena->stats.ndalloc_small);
11286: 	malloc_printf("large:   %12Iu %12I64u %12I64u\n",
11286: 	    arena->stats.allocated_large, arena->stats.nmalloc_large,
11286: 	    arena->stats.ndalloc_large);
11286: 	malloc_printf("total:   %12Iu %12I64u %12I64u\n",
11286: 	    arena->stats.allocated_small + arena->stats.allocated_large,
11286: 	    arena->stats.nmalloc_small + arena->stats.nmalloc_large,
11286: 	    arena->stats.ndalloc_small + arena->stats.ndalloc_large);
11286: 	malloc_printf("mapped:  %12Iu\n", arena->stats.mapped);
11286: #else
11449: 	malloc_printf("dirty: %zu page%s dirty, %llu sweep%s,"
11449: 	    " %llu madvise%s, %llu page%s purged\n",
11449: 	    arena->ndirty, arena->ndirty == 1 ? "" : "s",
11449: 	    arena->stats.npurge, arena->stats.npurge == 1 ? "" : "s",
11449: 	    arena->stats.nmadvise, arena->stats.nmadvise == 1 ? "" : "s",
11449: 	    arena->stats.purged, arena->stats.purged == 1 ? "" : "s");
11449: #  ifdef MALLOC_DECOMMIT
11449: 	malloc_printf("decommit: %llu decommit%s, %llu commit%s,"
11449: 	    " %llu page%s decommitted\n",
11449: 	    arena->stats.ndecommit, (arena->stats.ndecommit == 1) ? "" : "s",
11449: 	    arena->stats.ncommit, (arena->stats.ncommit == 1) ? "" : "s",
11449: 	    arena->stats.decommitted,
11449: 	    (arena->stats.decommitted == 1) ? "" : "s");
11449: #  endif
11449: 
11449: 	malloc_printf("            allocated      nmalloc      ndalloc\n");
11286: 	malloc_printf("small:   %12zu %12llu %12llu\n",
11286: 	    arena->stats.allocated_small, arena->stats.nmalloc_small,
11286: 	    arena->stats.ndalloc_small);
11286: 	malloc_printf("large:   %12zu %12llu %12llu\n",
11286: 	    arena->stats.allocated_large, arena->stats.nmalloc_large,
11286: 	    arena->stats.ndalloc_large);
11286: 	malloc_printf("total:   %12zu %12llu %12llu\n",
11286: 	    arena->stats.allocated_small + arena->stats.allocated_large,
11286: 	    arena->stats.nmalloc_small + arena->stats.nmalloc_large,
11286: 	    arena->stats.ndalloc_small + arena->stats.ndalloc_large);
11286: 	malloc_printf("mapped:  %12zu\n", arena->stats.mapped);
11286: #endif
11286: 	malloc_printf("bins:     bin   size regs pgs  requests   newruns"
11286: 	    "    reruns maxruns curruns\n");
11286: 	for (i = 0, gap_start = UINT_MAX; i < ntbins + nqbins + nsbins; i++) {
11286: 		if (arena->bins[i].stats.nrequests == 0) {
11286: 			if (gap_start == UINT_MAX)
11286: 				gap_start = i;
11286: 		} else {
11286: 			if (gap_start != UINT_MAX) {
11286: 				if (i > gap_start + 1) {
11286: 					/* Gap of more than one size class. */
11286: 					malloc_printf("[%u..%u]\n",
11286: 					    gap_start, i - 1);
11286: 				} else {
11286: 					/* Gap of one size class. */
11286: 					malloc_printf("[%u]\n", gap_start);
11286: 				}
11286: 				gap_start = UINT_MAX;
11286: 			}
11286: 			malloc_printf(
11286: #if defined(MOZ_MEMORY_WINDOWS)
11286: 			    "%13u %1s %4u %4u %3u %9I64u %9I64u"
11286: 			    " %9I64u %7u %7u\n",
11286: #else
11286: 			    "%13u %1s %4u %4u %3u %9llu %9llu"
11286: 			    " %9llu %7lu %7lu\n",
11286: #endif
11286: 			    i,
11286: 			    i < ntbins ? "T" : i < ntbins + nqbins ? "Q" : "S",
11286: 			    arena->bins[i].reg_size,
11286: 			    arena->bins[i].nregs,
11286: 			    arena->bins[i].run_size >> pagesize_2pow,
11286: 			    arena->bins[i].stats.nrequests,
11286: 			    arena->bins[i].stats.nruns,
11286: 			    arena->bins[i].stats.reruns,
11286: 			    arena->bins[i].stats.highruns,
11286: 			    arena->bins[i].stats.curruns);
11286: 		}
11286: 	}
11286: 	if (gap_start != UINT_MAX) {
11286: 		if (i > gap_start + 1) {
11286: 			/* Gap of more than one size class. */
11286: 			malloc_printf("[%u..%u]\n", gap_start, i - 1);
11286: 		} else {
11286: 			/* Gap of one size class. */
11286: 			malloc_printf("[%u]\n", gap_start);
11286: 		}
11286: 	}
11286: }
11286: #endif
11286: 
11286: /*
11286:  * End Utility functions/macros.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin extent tree code.
11286:  */
11286: 
11286: static inline int
11286: extent_szad_comp(extent_node_t *a, extent_node_t *b)
11286: {
11286: 	int ret;
11286: 	size_t a_size = a->size;
11286: 	size_t b_size = b->size;
11286: 
11286: 	ret = (a_size > b_size) - (a_size < b_size);
11286: 	if (ret == 0) {
11286: 		uintptr_t a_addr = (uintptr_t)a->addr;
11286: 		uintptr_t b_addr = (uintptr_t)b->addr;
11286: 
11286: 		ret = (a_addr > b_addr) - (a_addr < b_addr);
11286: 	}
11286: 
11286: 	return (ret);
11286: }
11286: 
15460: /* Wrap red-black tree macros in functions. */
15460: rb_wrap(static, extent_tree_szad_, extent_tree_t, extent_node_t,
15460:     link_szad, extent_szad_comp)
11286: 
11449: static inline int
11449: extent_ad_comp(extent_node_t *a, extent_node_t *b)
11449: {
11449: 	uintptr_t a_addr = (uintptr_t)a->addr;
11449: 	uintptr_t b_addr = (uintptr_t)b->addr;
11449: 
11449: 	return ((a_addr > b_addr) - (a_addr < b_addr));
11449: }
11449: 
15460: /* Wrap red-black tree macros in functions. */
15460: rb_wrap(static, extent_tree_ad_, extent_tree_t, extent_node_t, link_ad,
15460:     extent_ad_comp)
11449: 
11286: /*
11286:  * End extent tree code.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin chunk management functions.
11286:  */
11286: 
11286: #ifdef MOZ_MEMORY_WINDOWS
26771: 
11286: static void *
15610: pages_map(void *addr, size_t size, int pfd)
11286: {
26771: 	void *ret = NULL;
11286: 	ret = VirtualAlloc(addr, size, MEM_COMMIT | MEM_RESERVE,
11286: 	    PAGE_READWRITE);
11286: 	return (ret);
11286: }
11286: 
11286: static void
11286: pages_unmap(void *addr, size_t size)
11286: {
26771: 	if (VirtualFree(addr, 0, MEM_RELEASE) == 0) {
11286: 		_malloc_message(_getprogname(),
11286: 		    ": (malloc) Error in VirtualFree()\n", "", "");
11286: 		if (opt_abort)
11286: 			abort();
11286: 	}
11286: }
73512: #else
24522: #ifdef JEMALLOC_USES_MAP_ALIGN
24522: static void *
26771: pages_map_align(size_t size, int pfd, size_t alignment)
24522: {
24522: 	void *ret;
24522: 
24522: 	/*
24522: 	 * We don't use MAP_FIXED here, because it can cause the *replacement*
24522: 	 * of existing mappings, and we only want to create new mappings.
24522: 	 */
24522: #ifdef MALLOC_PAGEFILE
24522: 	if (pfd != -1) {
26771: 		ret = mmap((void *)alignment, size, PROT_READ | PROT_WRITE, MAP_PRIVATE |
24522: 		    MAP_NOSYNC | MAP_ALIGN, pfd, 0);
24522: 	} else
24522: #endif
24522: 	       {
26771: 		ret = mmap((void *)alignment, size, PROT_READ | PROT_WRITE, MAP_PRIVATE |
24522: 		    MAP_NOSYNC | MAP_ALIGN | MAP_ANON, -1, 0);
24522: 	}
24522: 	assert(ret != NULL);
24522: 
24522: 	if (ret == MAP_FAILED)
24522: 		ret = NULL;
24522: 	return (ret);
24522: }
24522: #endif
24522: 
11286: static void *
15610: pages_map(void *addr, size_t size, int pfd)
11286: {
11286: 	void *ret;
77495: #if defined(__ia64__)
77495:         /*
77495:          * The JS engine assumes that all allocated pointers have their high 17 bits clear,
77495:          * which ia64's mmap doesn't support directly. However, we can emulate it by passing
77495:          * mmap an "addr" parameter with those bits clear. The mmap will return that address,
77495:          * or the nearest available memory above that address, providing a near-guarantee
77495:          * that those bits are clear. If they are not, we return NULL below to indicate
77495:          * out-of-memory.
77495:          * 
77495:          * The addr is chosen as 0x0000070000000000, which still allows about 120TB of virtual 
77495:          * address space.
77495:          * 
77495:          * See Bug 589735 for more information.
77495:          */
77495: 	bool check_placement = true;
77495:         if (addr == NULL) {
77495: 		addr = (void*)0x0000070000000000;
77495: 		check_placement = false;
77495: 	}
77495: #endif
11286: 
11286: 	/*
11286: 	 * We don't use MAP_FIXED here, because it can cause the *replacement*
11286: 	 * of existing mappings, and we only want to create new mappings.
11286: 	 */
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (pfd != -1) {
15610: 		ret = mmap(addr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE |
15610: 		    MAP_NOSYNC, pfd, 0);
15610: 	} else
15610: #endif
15610: 	       {
15610: 		ret = mmap(addr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE |
15610: 		    MAP_ANON, -1, 0);
15610: 	}
11286: 	assert(ret != NULL);
11286: 
81354: 	if (ret == MAP_FAILED) {
11286: 		ret = NULL;
81354:         }
77495: #if defined(__ia64__)
77495:         /* 
77495:          * If the allocated memory doesn't have its upper 17 bits clear, consider it 
77495:          * as out of memory.
77495:         */
77495:         else if ((long long)ret & 0xffff800000000000) {
77495: 		munmap(ret, size);
77495:                 ret = NULL;
77495:         }
77495:         /* If the caller requested a specific memory location, verify that's what mmap returned. */
77495: 	else if (check_placement && ret != addr) {
77495: #else
11286: 	else if (addr != NULL && ret != addr) {
77495: #endif
11286: 		/*
11286: 		 * We succeeded in mapping memory, but not in the right place.
11286: 		 */
11286: 		if (munmap(ret, size) == -1) {
11286: 			char buf[STRERROR_BUF];
11286: 
11286: 			strerror_r(errno, buf, sizeof(buf));
11286: 			_malloc_message(_getprogname(),
11286: 			    ": (malloc) Error in munmap(): ", buf, "\n");
11286: 			if (opt_abort)
11286: 				abort();
11286: 		}
11286: 		ret = NULL;
11286: 	}
11286: 
77495: #if defined(__ia64__)
77495: 	assert(ret == NULL || (!check_placement && ret != NULL)
77495: 	    || (check_placement && ret == addr));
77495: #else
11286: 	assert(ret == NULL || (addr == NULL && ret != addr)
11286: 	    || (addr != NULL && ret == addr));
77495: #endif
11286: 	return (ret);
11286: }
11286: 
11286: static void
11286: pages_unmap(void *addr, size_t size)
11286: {
11286: 
11286: 	if (munmap(addr, size) == -1) {
11286: 		char buf[STRERROR_BUF];
11286: 
11286: 		strerror_r(errno, buf, sizeof(buf));
11286: 		_malloc_message(_getprogname(),
11286: 		    ": (malloc) Error in munmap(): ", buf, "\n");
11286: 		if (opt_abort)
11286: 			abort();
11286: 	}
11286: }
11286: #endif
11286: 
73512: #ifdef MOZ_MEMORY_DARWIN
73512: #define	VM_COPY_MIN (pagesize << 5)
73512: static inline void
73512: pages_copy(void *dest, const void *src, size_t n)
73512: {
73512: 
73512: 	assert((void *)((uintptr_t)dest & ~pagesize_mask) == dest);
73512: 	assert(n >= VM_COPY_MIN);
73512: 	assert((void *)((uintptr_t)src & ~pagesize_mask) == src);
73512: 
73512: 	vm_copy(mach_task_self(), (vm_address_t)src, (vm_size_t)n,
73512: 	    (vm_address_t)dest);
73512: }
73512: #endif
73512: 
16218: #ifdef MALLOC_VALIDATE
16218: static inline malloc_rtree_t *
16218: malloc_rtree_new(unsigned bits)
16218: {
16218: 	malloc_rtree_t *ret;
16218: 	unsigned bits_per_level, height, i;
16218: 
16218: 	bits_per_level = ffs(pow2_ceil((MALLOC_RTREE_NODESIZE /
16218: 	    sizeof(void *)))) - 1;
16218: 	height = bits / bits_per_level;
16218: 	if (height * bits_per_level != bits)
16218: 		height++;
16218: 	assert(height * bits_per_level >= bits);
16218: 
73512: 	ret = (malloc_rtree_t*)base_calloc(1, sizeof(malloc_rtree_t) +
73512: 	    (sizeof(unsigned) * (height - 1)));
16218: 	if (ret == NULL)
16218: 		return (NULL);
16218: 
16218: 	malloc_spin_init(&ret->lock);
16218: 	ret->height = height;
16218: 	if (bits_per_level * height > bits)
16218: 		ret->level2bits[0] = bits % bits_per_level;
16218: 	else
16218: 		ret->level2bits[0] = bits_per_level;
16218: 	for (i = 1; i < height; i++)
16218: 		ret->level2bits[i] = bits_per_level;
16218: 
26488: 	ret->root = (void**)base_calloc(1, sizeof(void *) << ret->level2bits[0]);
16218: 	if (ret->root == NULL) {
16218: 		/*
16218: 		 * We leak the rtree here, since there's no generic base
16218: 		 * deallocation.
16218: 		 */
16218: 		return (NULL);
16218: 	}
16218: 
16218: 	return (ret);
16218: }
16218: 
73512: #define	MALLOC_RTREE_GET_GENERATE(f)					\
73512: /* The least significant bits of the key are ignored. */		\
73512: static inline void *							\
73512: f(malloc_rtree_t *rtree, uintptr_t key)					\
73512: {									\
73512: 	void *ret;							\
73512: 	uintptr_t subkey;						\
73512: 	unsigned i, lshift, height, bits;				\
73512: 	void **node, **child;						\
73512: 									\
73512: 	MALLOC_RTREE_LOCK(&rtree->lock);				\
73512: 	for (i = lshift = 0, height = rtree->height, node = rtree->root;\
73512: 	    i < height - 1;						\
73512: 	    i++, lshift += bits, node = child) {			\
73512: 		bits = rtree->level2bits[i];				\
73512: 		subkey = (key << lshift) >> ((SIZEOF_PTR << 3) - bits);	\
73512: 		child = (void**)node[subkey];				\
73512: 		if (child == NULL) {					\
73512: 			MALLOC_RTREE_UNLOCK(&rtree->lock);		\
73512: 			return (NULL);					\
73512: 		}							\
73512: 	}								\
73512: 									\
73512: 	/*								\
73512: 	 * node is a leaf, so it contains values rather than node	\
73512: 	 * pointers.							\
73512: 	 */								\
73512: 	bits = rtree->level2bits[i];					\
73512: 	subkey = (key << lshift) >> ((SIZEOF_PTR << 3) - bits);		\
73512: 	ret = node[subkey];						\
73512: 	MALLOC_RTREE_UNLOCK(&rtree->lock);				\
73512: 									\
73512: 	MALLOC_RTREE_GET_VALIDATE					\
73512: 	return (ret);							\
73512: }
73512: 
73512: #ifdef MALLOC_DEBUG
73512: #  define MALLOC_RTREE_LOCK(l)		malloc_spin_lock(l)
73512: #  define MALLOC_RTREE_UNLOCK(l)	malloc_spin_unlock(l)
73512: #  define MALLOC_RTREE_GET_VALIDATE
73512: MALLOC_RTREE_GET_GENERATE(malloc_rtree_get_locked)
73512: #  undef MALLOC_RTREE_LOCK
73512: #  undef MALLOC_RTREE_UNLOCK
73512: #  undef MALLOC_RTREE_GET_VALIDATE
73512: #endif
73512: 
73512: #define	MALLOC_RTREE_LOCK(l)
73512: #define	MALLOC_RTREE_UNLOCK(l)
73512: #ifdef MALLOC_DEBUG
73512:    /*
73512:     * Suppose that it were possible for a jemalloc-allocated chunk to be
73512:     * munmap()ped, followed by a different allocator in another thread re-using
73512:     * overlapping virtual memory, all without invalidating the cached rtree
73512:     * value.  The result would be a false positive (the rtree would claim that
73512:     * jemalloc owns memory that it had actually discarded).  I don't think this
73512:     * scenario is possible, but the following assertion is a prudent sanity
73512:     * check.
73512:     */
73512: #  define MALLOC_RTREE_GET_VALIDATE					\
73512: 	assert(malloc_rtree_get_locked(rtree, key) == ret);
73512: #else
73512: #  define MALLOC_RTREE_GET_VALIDATE
73512: #endif
73512: MALLOC_RTREE_GET_GENERATE(malloc_rtree_get)
73512: #undef MALLOC_RTREE_LOCK
73512: #undef MALLOC_RTREE_UNLOCK
73512: #undef MALLOC_RTREE_GET_VALIDATE
16218: 
16218: static inline bool
16218: malloc_rtree_set(malloc_rtree_t *rtree, uintptr_t key, void *val)
16218: {
16218: 	uintptr_t subkey;
16218: 	unsigned i, lshift, height, bits;
16218: 	void **node, **child;
16218: 
16218: 	malloc_spin_lock(&rtree->lock);
16218: 	for (i = lshift = 0, height = rtree->height, node = rtree->root;
16218: 	    i < height - 1;
16218: 	    i++, lshift += bits, node = child) {
16218: 		bits = rtree->level2bits[i];
16218: 		subkey = (key << lshift) >> ((SIZEOF_PTR << 3) - bits);
26488: 		child = (void**)node[subkey];
16218: 		if (child == NULL) {
26488: 			child = (void**)base_calloc(1, sizeof(void *) <<
16218: 			    rtree->level2bits[i+1]);
16218: 			if (child == NULL) {
16218: 				malloc_spin_unlock(&rtree->lock);
16218: 				return (true);
16218: 			}
16218: 			node[subkey] = child;
16218: 		}
16218: 	}
16218: 
16218: 	/* node is a leaf, so it contains values rather than node pointers. */
16218: 	bits = rtree->level2bits[i];
16218: 	subkey = (key << lshift) >> ((SIZEOF_PTR << 3) - bits);
16218: 	node[subkey] = val;
16218: 	malloc_spin_unlock(&rtree->lock);
16218: 
16218: 	return (false);
16218: }
16218: #endif
16218: 
81354: #if defined(MOZ_MEMORY_WINDOWS) || defined(JEMALLOC_USES_MAP_ALIGN) || defined(MALLOC_PAGEFILE)
81354: 
81354: /* Allocate an aligned chunk while maintaining a 1:1 correspondence between
81354:  * mmap and unmap calls.  This is important on Windows, but not elsewhere. */
16218: static void *
15610: chunk_alloc_mmap(size_t size, bool pagefile)
11286: {
11286: 	void *ret;
24522: #ifndef JEMALLOC_USES_MAP_ALIGN
11286: 	size_t offset;
24522: #endif
15610: 	int pfd;
15610: 
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (opt_pagefile && pagefile) {
15610: 		pfd = pagefile_init(size);
15610: 		if (pfd == -1)
15610: 			return (NULL);
15610: 	} else
15610: #endif
15610: 		pfd = -1;
11286: 
24522: #ifdef JEMALLOC_USES_MAP_ALIGN
26771: 	ret = pages_map_align(size, pfd, chunksize);
24522: #else
15610: 	ret = pages_map(NULL, size, pfd);
11286: 	if (ret == NULL)
15610: 		goto RETURN;
11286: 
11286: 	offset = CHUNK_ADDR2OFFSET(ret);
11286: 	if (offset != 0) {
11286: 		/* Deallocate, then try to allocate at (ret + size - offset). */
11286: 		pages_unmap(ret, size);
15610: 		ret = pages_map((void *)((uintptr_t)ret + size - offset), size,
15610: 		    pfd);
11286: 		while (ret == NULL) {
11286: 			/*
11286: 			 * Over-allocate in order to map a memory region that
11286: 			 * is definitely large enough.
11286: 			 */
15610: 			ret = pages_map(NULL, size + chunksize, -1);
11286: 			if (ret == NULL)
15610: 				goto RETURN;
11286: 			/*
11286: 			 * Deallocate, then allocate the correct size, within
11286: 			 * the over-sized mapping.
11286: 			 */
11286: 			offset = CHUNK_ADDR2OFFSET(ret);
11286: 			pages_unmap(ret, size + chunksize);
11286: 			if (offset == 0)
15610: 				ret = pages_map(ret, size, pfd);
11286: 			else {
11449: 				ret = pages_map((void *)((uintptr_t)ret +
15610: 				    chunksize - offset), size, pfd);
11286: 			}
11286: 			/*
11286: 			 * Failure here indicates a race with another thread, so
11286: 			 * try again.
11286: 			 */
11286: 		}
11286: 	}
15610: RETURN:
24522: #endif
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (pfd != -1)
15610: 		pagefile_close(pfd);
15610: #endif
16218: #ifdef MALLOC_STATS
16218: 	if (ret != NULL)
16218: 		stats_chunks.nchunks += (size / chunksize);
16218: #endif
11286: 	return (ret);
11286: }
15610: 
81354: #else /* ! (defined(MOZ_MEMORY_WINDOWS) || defined(JEMALLOC_USES_MAP_ALIGN) || defined(MALLOC_PAGEFILE)) */
81354: 
81354: /*
81354:  * Used by chunk_alloc_mmap() to decide whether to attempt the fast path and
81354:  * potentially avoid some system calls.
81354:  */
81354: #ifndef NO_TLS
81354: static __thread bool	mmap_unaligned_tls __attribute__((tls_model("initial-exec")));
81354: #define	MMAP_UNALIGNED_GET()	mmap_unaligned_tls
81354: #define	MMAP_UNALIGNED_SET(v)	do {					\
81354: 	mmap_unaligned_tls = (v);					\
81354: } while (0)
81354: #else
81354: #define NEEDS_PTHREAD_MMAP_UNALIGNED_TSD
81354: static pthread_key_t	mmap_unaligned_tsd;
81354: #define	MMAP_UNALIGNED_GET()	((bool)pthread_getspecific(mmap_unaligned_tsd))
81354: #define	MMAP_UNALIGNED_SET(v)	do {					\
81354: 	pthread_setspecific(mmap_unaligned_tsd, (void *)(v));		\
81354: } while (0)
81354: #endif
81354: 
81354: /* chunk_alloc_mmap_slow and chunk_alloc_mmap were cherry-picked from upstream
81354:  * jemalloc 2.2.3 to fix Mozilla bug 694896, enable jemalloc on Mac 10.7. */
81354: 
81354: static void *
81354: chunk_alloc_mmap_slow(size_t size, bool unaligned)
81354: {
81354: 	void *ret;
81354: 	size_t offset;
81354: 
81354: 	/* Beware size_t wrap-around. */
81354: 	if (size + chunksize <= size)
81354: 		return (NULL);
81354: 
81354: 	ret = pages_map(NULL, size + chunksize, -1);
81354: 	if (ret == NULL)
81354: 		return (NULL);
81354: 
81354: 	/* Clean up unneeded leading/trailing space. */
81354: 	offset = CHUNK_ADDR2OFFSET(ret);
81354: 	if (offset != 0) {
81354: 		/* Note that mmap() returned an unaligned mapping. */
81354: 		unaligned = true;
81354: 
81354: 		/* Leading space. */
81354: 		pages_unmap(ret, chunksize - offset);
81354: 
81354: 		ret = (void *)((uintptr_t)ret +
81354: 		    (chunksize - offset));
81354: 
81354: 		/* Trailing space. */
81354: 		pages_unmap((void *)((uintptr_t)ret + size),
81354: 		    offset);
81354: 	} else {
81354: 		/* Trailing space only. */
81354: 		pages_unmap((void *)((uintptr_t)ret + size),
81354: 		    chunksize);
81354: 	}
81354: 
81354: 	/*
81354: 	 * If mmap() returned an aligned mapping, reset mmap_unaligned so that
81354: 	 * the next chunk_alloc_mmap() execution tries the fast allocation
81354: 	 * method.
81354: 	 */
81354: 	if (unaligned == false)
81354: 		MMAP_UNALIGNED_SET(false);
81354: 
81354: 	return (ret);
81354: }
81354: 
81354: static void *
81354: chunk_alloc_mmap(size_t size, bool pagefile)
81354: {
81354: 	void *ret;
81354: 
81354: 	/*
81354: 	 * Ideally, there would be a way to specify alignment to mmap() (like
81354: 	 * NetBSD has), but in the absence of such a feature, we have to work
81354: 	 * hard to efficiently create aligned mappings.  The reliable, but
81354: 	 * slow method is to create a mapping that is over-sized, then trim the
81354: 	 * excess.  However, that always results in at least one call to
81354: 	 * pages_unmap().
81354: 	 *
81354: 	 * A more optimistic approach is to try mapping precisely the right
81354: 	 * amount, then try to append another mapping if alignment is off.  In
81354: 	 * practice, this works out well as long as the application is not
81354: 	 * interleaving mappings via direct mmap() calls.  If we do run into a
81354: 	 * situation where there is an interleaved mapping and we are unable to
81354: 	 * extend an unaligned mapping, our best option is to switch to the
81354: 	 * slow method until mmap() returns another aligned mapping.  This will
81354: 	 * tend to leave a gap in the memory map that is too small to cause
81354: 	 * later problems for the optimistic method.
81354: 	 *
81354: 	 * Another possible confounding factor is address space layout
81354: 	 * randomization (ASLR), which causes mmap(2) to disregard the
81354: 	 * requested address.  mmap_unaligned tracks whether the previous
81354: 	 * chunk_alloc_mmap() execution received any unaligned or relocated
81354: 	 * mappings, and if so, the current execution will immediately fall
81354: 	 * back to the slow method.  However, we keep track of whether the fast
81354: 	 * method would have succeeded, and if so, we make a note to try the
81354: 	 * fast method next time.
81354: 	 */
81354: 
81354: 	if (MMAP_UNALIGNED_GET() == false) {
81354: 		size_t offset;
81354: 
81354: 		ret = pages_map(NULL, size, -1);
81354: 		if (ret == NULL)
81354: 			return (NULL);
81354: 
81354: 		offset = CHUNK_ADDR2OFFSET(ret);
81354: 		if (offset != 0) {
81354: 			MMAP_UNALIGNED_SET(true);
81354: 			/* Try to extend chunk boundary. */
81354: 			if (pages_map((void *)((uintptr_t)ret + size),
81354: 			    chunksize - offset, -1) == NULL) {
81354: 				/*
81354: 				 * Extension failed.  Clean up, then revert to
81354: 				 * the reliable-but-expensive method.
81354: 				 */
81354: 				pages_unmap(ret, size);
81354: 				ret = chunk_alloc_mmap_slow(size, true);
81354: 			} else {
81354: 				/* Clean up unneeded leading space. */
81354: 				pages_unmap(ret, chunksize - offset);
81354: 				ret = (void *)((uintptr_t)ret + (chunksize -
81354: 				    offset));
81354: 			}
81354: 		}
81354: 	} else
81354: 		ret = chunk_alloc_mmap_slow(size, false);
81354: 
81354: 	return (ret);
81354: }
81354: 
81354: #endif /* defined(MOZ_MEMORY_WINDOWS) || defined(JEMALLOC_USES_MAP_ALIGN) || defined(MALLOC_PAGEFILE) */
81354: 
15610: #ifdef MALLOC_PAGEFILE
15610: static int
15610: pagefile_init(size_t size)
15610: {
15610: 	int ret;
15610: 	size_t i;
15610: 	char pagefile_path[PATH_MAX];
15610: 	char zbuf[MALLOC_PAGEFILE_WRITE_SIZE];
15610: 
15610: 	/*
15610: 	 * Create a temporary file, then immediately unlink it so that it will
15610: 	 * not persist.
15610: 	 */
15610: 	strcpy(pagefile_path, pagefile_templ);
15610: 	ret = mkstemp(pagefile_path);
15610: 	if (ret == -1)
15610: 		return (ret);
15610: 	if (unlink(pagefile_path)) {
15610: 		char buf[STRERROR_BUF];
15610: 
15610: 		strerror_r(errno, buf, sizeof(buf));
15610: 		_malloc_message(_getprogname(), ": (malloc) Error in unlink(\"",
15610: 		    pagefile_path, "\"):");
15610: 		_malloc_message(buf, "\n", "", "");
15610: 		if (opt_abort)
15610: 			abort();
15610: 	}
15610: 
15610: 	/*
15610: 	 * Write sequential zeroes to the file in order to assure that disk
15610: 	 * space is committed, with minimal fragmentation.  It would be
15610: 	 * sufficient to write one zero per disk block, but that potentially
15610: 	 * results in more system calls, for no real gain.
15610: 	 */
15610: 	memset(zbuf, 0, sizeof(zbuf));
15610: 	for (i = 0; i < size; i += sizeof(zbuf)) {
15610: 		if (write(ret, zbuf, sizeof(zbuf)) != sizeof(zbuf)) {
15610: 			if (errno != ENOSPC) {
15610: 				char buf[STRERROR_BUF];
15610: 
15610: 				strerror_r(errno, buf, sizeof(buf));
15610: 				_malloc_message(_getprogname(),
15610: 				    ": (malloc) Error in write(): ", buf, "\n");
15610: 				if (opt_abort)
15610: 					abort();
15610: 			}
15610: 			pagefile_close(ret);
15610: 			return (-1);
15610: 		}
15610: 	}
15610: 
15610: 	return (ret);
15610: }
15610: 
15610: static void
15610: pagefile_close(int pfd)
15610: {
15610: 
15610: 	if (close(pfd)) {
15610: 		char buf[STRERROR_BUF];
15610: 
15610: 		strerror_r(errno, buf, sizeof(buf));
15610: 		_malloc_message(_getprogname(),
15610: 		    ": (malloc) Error in close(): ", buf, "\n");
15610: 		if (opt_abort)
15610: 			abort();
15610: 	}
15610: }
15610: #endif
15610: 
15610: static void *
15610: chunk_alloc(size_t size, bool zero, bool pagefile)
15486: {
15486: 	void *ret;
11286: 
11286: 	assert(size != 0);
11286: 	assert((size & chunksize_mask) == 0);
11286: 
15610: 	ret = chunk_alloc_mmap(size, pagefile);
15610: 	if (ret != NULL) {
11286: 		goto RETURN;
11286: 	}
11286: 
11286: 	/* All strategies for allocation failed. */
11286: 	ret = NULL;
11286: RETURN:
11286: #ifdef MALLOC_STATS
15610: 	if (ret != NULL)
11286: 		stats_chunks.curchunks += (size / chunksize);
11286: 	if (stats_chunks.curchunks > stats_chunks.highchunks)
11286: 		stats_chunks.highchunks = stats_chunks.curchunks;
11286: #endif
11286: 
16218: #ifdef MALLOC_VALIDATE
16218: 	if (ret != NULL) {
16218: 		if (malloc_rtree_set(chunk_rtree, (uintptr_t)ret, ret)) {
16218: 			chunk_dealloc(ret, size);
16218: 			return (NULL);
16218: 		}
16218: 	}
16218: #endif
16218: 
11286: 	assert(CHUNK_ADDR2BASE(ret) == ret);
11286: 	return (ret);
11286: }
11286: 
11449: static void
11286: chunk_dealloc_mmap(void *chunk, size_t size)
11286: {
11286: 
11286: 	pages_unmap(chunk, size);
11286: }
11286: 
11286: static void
11286: chunk_dealloc(void *chunk, size_t size)
11286: {
11286: 
11286: 	assert(chunk != NULL);
11286: 	assert(CHUNK_ADDR2BASE(chunk) == chunk);
11286: 	assert(size != 0);
11286: 	assert((size & chunksize_mask) == 0);
11286: 
11286: #ifdef MALLOC_STATS
11286: 	stats_chunks.curchunks -= (size / chunksize);
11286: #endif
16218: #ifdef MALLOC_VALIDATE
16218: 	malloc_rtree_set(chunk_rtree, (uintptr_t)chunk, NULL);
16218: #endif
11286: 
11286: 	chunk_dealloc_mmap(chunk, size);
11286: }
11286: 
11286: /*
11286:  * End chunk management functions.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin arena.
11286:  */
11286: 
11286: /*
11286:  * Choose an arena based on a per-thread value (fast-path code, calls slow-path
11286:  * code if necessary).
11286:  */
11286: static inline arena_t *
11286: choose_arena(void)
11286: {
11286: 	arena_t *ret;
11286: 
11286: 	/*
11286: 	 * We can only use TLS if this is a PIC library, since for the static
11286: 	 * library version, libc's malloc is used by TLS allocation, which
11286: 	 * introduces a bootstrapping issue.
11286: 	 */
11286: #ifndef NO_TLS
11286: 	if (__isthreaded == false) {
11449: 	    /* Avoid the overhead of TLS for single-threaded operation. */
11286: 	    return (arenas[0]);
11286: 	}
11286: 
11286: #  ifdef MOZ_MEMORY_WINDOWS
26488: 	ret = (arena_t*)TlsGetValue(tlsIndex);
11286: #  else
11286: 	ret = arenas_map;
11286: #  endif
11286: 
11286: 	if (ret == NULL) {
11286: 		ret = choose_arena_hard();
11286: 		assert(ret != NULL);
11286: 	}
11286: #else
11286: 	if (__isthreaded && narenas > 1) {
11286: 		unsigned long ind;
11286: 
11286: 		/*
11286: 		 * Hash _pthread_self() to one of the arenas.  There is a prime
11286: 		 * number of arenas, so this has a reasonable chance of
11286: 		 * working.  Even so, the hashing can be easily thwarted by
11286: 		 * inconvenient _pthread_self() values.  Without specific
11286: 		 * knowledge of how _pthread_self() calculates values, we can't
11286: 		 * easily do much better than this.
11286: 		 */
11286: 		ind = (unsigned long) _pthread_self() % narenas;
11286: 
11286: 		/*
11286: 		 * Optimistially assume that arenas[ind] has been initialized.
11286: 		 * At worst, we find out that some other thread has already
11286: 		 * done so, after acquiring the lock in preparation.  Note that
11286: 		 * this lazy locking also has the effect of lazily forcing
11286: 		 * cache coherency; without the lock acquisition, there's no
11286: 		 * guarantee that modification of arenas[ind] by another thread
11286: 		 * would be seen on this CPU for an arbitrary amount of time.
11286: 		 *
11286: 		 * In general, this approach to modifying a synchronized value
11286: 		 * isn't a good idea, but in this case we only ever modify the
11286: 		 * value once, so things work out well.
11286: 		 */
11286: 		ret = arenas[ind];
11286: 		if (ret == NULL) {
11286: 			/*
11286: 			 * Avoid races with another thread that may have already
11286: 			 * initialized arenas[ind].
11286: 			 */
11286: 			malloc_spin_lock(&arenas_lock);
11286: 			if (arenas[ind] == NULL)
11286: 				ret = arenas_extend((unsigned)ind);
11286: 			else
11286: 				ret = arenas[ind];
11286: 			malloc_spin_unlock(&arenas_lock);
11286: 		}
11286: 	} else
11286: 		ret = arenas[0];
11286: #endif
11286: 
11286: 	assert(ret != NULL);
11286: 	return (ret);
11286: }
11286: 
11286: #ifndef NO_TLS
11286: /*
11286:  * Choose an arena based on a per-thread value (slow-path code only, called
11286:  * only by choose_arena()).
11286:  */
11286: static arena_t *
11286: choose_arena_hard(void)
11286: {
11286: 	arena_t *ret;
11286: 
11286: 	assert(__isthreaded);
11286: 
11286: #ifdef MALLOC_BALANCE
15460: 	/* Seed the PRNG used for arena load balancing. */
11286: 	SPRN(balance, (uint32_t)(uintptr_t)(_pthread_self()));
11286: #endif
11286: 
11286: 	if (narenas > 1) {
11286: #ifdef MALLOC_BALANCE
11286: 		unsigned ind;
11286: 
11286: 		ind = PRN(balance, narenas_2pow);
11286: 		if ((ret = arenas[ind]) == NULL) {
11286: 			malloc_spin_lock(&arenas_lock);
11286: 			if ((ret = arenas[ind]) == NULL)
11286: 				ret = arenas_extend(ind);
11286: 			malloc_spin_unlock(&arenas_lock);
11286: 		}
11286: #else
11286: 		malloc_spin_lock(&arenas_lock);
11286: 		if ((ret = arenas[next_arena]) == NULL)
11286: 			ret = arenas_extend(next_arena);
11286: 		next_arena = (next_arena + 1) % narenas;
11286: 		malloc_spin_unlock(&arenas_lock);
11286: #endif
11286: 	} else
11286: 		ret = arenas[0];
11286: 
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 	TlsSetValue(tlsIndex, ret);
11286: #else
11286: 	arenas_map = ret;
11286: #endif
11286: 
11286: 	return (ret);
11286: }
11286: #endif
11286: 
11286: static inline int
11286: arena_chunk_comp(arena_chunk_t *a, arena_chunk_t *b)
11286: {
11286: 	uintptr_t a_chunk = (uintptr_t)a;
11286: 	uintptr_t b_chunk = (uintptr_t)b;
11286: 
11286: 	assert(a != NULL);
11286: 	assert(b != NULL);
11286: 
11286: 	return ((a_chunk > b_chunk) - (a_chunk < b_chunk));
11286: }
11286: 
15460: /* Wrap red-black tree macros in functions. */
15461: rb_wrap(static, arena_chunk_tree_dirty_, arena_chunk_tree_t,
15461:     arena_chunk_t, link_dirty, arena_chunk_comp)
11286: 
11286: static inline int
16218: arena_run_comp(arena_chunk_map_t *a, arena_chunk_map_t *b)
16218: {
16218: 	uintptr_t a_mapelm = (uintptr_t)a;
16218: 	uintptr_t b_mapelm = (uintptr_t)b;
11286: 
11286: 	assert(a != NULL);
11286: 	assert(b != NULL);
11286: 
16218: 	return ((a_mapelm > b_mapelm) - (a_mapelm < b_mapelm));
11286: }
11286: 
15460: /* Wrap red-black tree macros in functions. */
16218: rb_wrap(static, arena_run_tree_, arena_run_tree_t, arena_chunk_map_t, link,
15460:     arena_run_comp)
11286: 
16218: static inline int
16218: arena_avail_comp(arena_chunk_map_t *a, arena_chunk_map_t *b)
16218: {
16218: 	int ret;
16218: 	size_t a_size = a->bits & ~pagesize_mask;
16218: 	size_t b_size = b->bits & ~pagesize_mask;
16218: 
16218: 	ret = (a_size > b_size) - (a_size < b_size);
16218: 	if (ret == 0) {
16218: 		uintptr_t a_mapelm, b_mapelm;
16218: 
16218: 		if ((a->bits & CHUNK_MAP_KEY) == 0)
16218: 			a_mapelm = (uintptr_t)a;
11449: 		else {
16218: 			/*
16218: 			 * Treat keys as though they are lower than anything
16218: 			 * else.
16218: 			 */
16218: 			a_mapelm = 0;
16218: 		}
16218: 		b_mapelm = (uintptr_t)b;
16218: 
16218: 		ret = (a_mapelm > b_mapelm) - (a_mapelm < b_mapelm);
11449: 	}
11286: 
11286: 	return (ret);
11286: }
11286: 
16218: /* Wrap red-black tree macros in functions. */
16218: rb_wrap(static, arena_avail_tree_, arena_avail_tree_t, arena_chunk_map_t, link,
16218:     arena_avail_comp)
11286: 
11286: static inline void *
11286: arena_run_reg_alloc(arena_run_t *run, arena_bin_t *bin)
11286: {
11286: 	void *ret;
11286: 	unsigned i, mask, bit, regind;
11286: 
11286: 	assert(run->magic == ARENA_RUN_MAGIC);
11286: 	assert(run->regs_minelm < bin->regs_mask_nelms);
11286: 
11286: 	/*
11286: 	 * Move the first check outside the loop, so that run->regs_minelm can
11286: 	 * be updated unconditionally, without the possibility of updating it
11286: 	 * multiple times.
11286: 	 */
11286: 	i = run->regs_minelm;
11286: 	mask = run->regs_mask[i];
11286: 	if (mask != 0) {
11286: 		/* Usable allocation found. */
11286: 		bit = ffs((int)mask) - 1;
11286: 
11286: 		regind = ((i << (SIZEOF_INT_2POW + 3)) + bit);
11286: 		assert(regind < bin->nregs);
11286: 		ret = (void *)(((uintptr_t)run) + bin->reg0_offset
11286: 		    + (bin->reg_size * regind));
11286: 
11286: 		/* Clear bit. */
11286: 		mask ^= (1U << bit);
11286: 		run->regs_mask[i] = mask;
11286: 
11286: 		return (ret);
11286: 	}
11286: 
11286: 	for (i++; i < bin->regs_mask_nelms; i++) {
11286: 		mask = run->regs_mask[i];
11286: 		if (mask != 0) {
11286: 			/* Usable allocation found. */
11286: 			bit = ffs((int)mask) - 1;
11286: 
11286: 			regind = ((i << (SIZEOF_INT_2POW + 3)) + bit);
11286: 			assert(regind < bin->nregs);
11286: 			ret = (void *)(((uintptr_t)run) + bin->reg0_offset
11286: 			    + (bin->reg_size * regind));
11286: 
11286: 			/* Clear bit. */
11286: 			mask ^= (1U << bit);
11286: 			run->regs_mask[i] = mask;
11286: 
11286: 			/*
11286: 			 * Make a note that nothing before this element
11286: 			 * contains a free region.
11286: 			 */
11286: 			run->regs_minelm = i; /* Low payoff: + (mask == 0); */
11286: 
11286: 			return (ret);
11286: 		}
11286: 	}
11286: 	/* Not reached. */
11286: 	assert(0);
11286: 	return (NULL);
11286: }
11286: 
11286: static inline void
11286: arena_run_reg_dalloc(arena_run_t *run, arena_bin_t *bin, void *ptr, size_t size)
11286: {
11286: 	/*
11286: 	 * To divide by a number D that is not a power of two we multiply
11286: 	 * by (2^21 / D) and then right shift by 21 positions.
11286: 	 *
11286: 	 *   X / D
11286: 	 *
11286: 	 * becomes
11286: 	 *
11286: 	 *   (X * size_invs[(D >> QUANTUM_2POW_MIN) - 3]) >> SIZE_INV_SHIFT
11286: 	 */
11286: #define	SIZE_INV_SHIFT 21
11286: #define	SIZE_INV(s) (((1U << SIZE_INV_SHIFT) / (s << QUANTUM_2POW_MIN)) + 1)
11286: 	static const unsigned size_invs[] = {
11286: 	    SIZE_INV(3),
11286: 	    SIZE_INV(4), SIZE_INV(5), SIZE_INV(6), SIZE_INV(7),
11286: 	    SIZE_INV(8), SIZE_INV(9), SIZE_INV(10), SIZE_INV(11),
11286: 	    SIZE_INV(12),SIZE_INV(13), SIZE_INV(14), SIZE_INV(15),
11286: 	    SIZE_INV(16),SIZE_INV(17), SIZE_INV(18), SIZE_INV(19),
11286: 	    SIZE_INV(20),SIZE_INV(21), SIZE_INV(22), SIZE_INV(23),
11286: 	    SIZE_INV(24),SIZE_INV(25), SIZE_INV(26), SIZE_INV(27),
11286: 	    SIZE_INV(28),SIZE_INV(29), SIZE_INV(30), SIZE_INV(31)
11286: #if (QUANTUM_2POW_MIN < 4)
11286: 	    ,
11286: 	    SIZE_INV(32), SIZE_INV(33), SIZE_INV(34), SIZE_INV(35),
11286: 	    SIZE_INV(36), SIZE_INV(37), SIZE_INV(38), SIZE_INV(39),
11286: 	    SIZE_INV(40), SIZE_INV(41), SIZE_INV(42), SIZE_INV(43),
11286: 	    SIZE_INV(44), SIZE_INV(45), SIZE_INV(46), SIZE_INV(47),
11286: 	    SIZE_INV(48), SIZE_INV(49), SIZE_INV(50), SIZE_INV(51),
11286: 	    SIZE_INV(52), SIZE_INV(53), SIZE_INV(54), SIZE_INV(55),
11286: 	    SIZE_INV(56), SIZE_INV(57), SIZE_INV(58), SIZE_INV(59),
11286: 	    SIZE_INV(60), SIZE_INV(61), SIZE_INV(62), SIZE_INV(63)
11286: #endif
11286: 	};
11286: 	unsigned diff, regind, elm, bit;
11286: 
11286: 	assert(run->magic == ARENA_RUN_MAGIC);
11286: 	assert(((sizeof(size_invs)) / sizeof(unsigned)) + 3
11286: 	    >= (SMALL_MAX_DEFAULT >> QUANTUM_2POW_MIN));
11286: 
11286: 	/*
11286: 	 * Avoid doing division with a variable divisor if possible.  Using
11286: 	 * actual division here can reduce allocator throughput by over 20%!
11286: 	 */
11286: 	diff = (unsigned)((uintptr_t)ptr - (uintptr_t)run - bin->reg0_offset);
11286: 	if ((size & (size - 1)) == 0) {
11286: 		/*
11286: 		 * log2_table allows fast division of a power of two in the
11286: 		 * [1..128] range.
11286: 		 *
11286: 		 * (x / divisor) becomes (x >> log2_table[divisor - 1]).
11286: 		 */
11286: 		static const unsigned char log2_table[] = {
11286: 		    0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
11286: 		    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
11286: 		};
11286: 
11286: 		if (size <= 128)
11286: 			regind = (diff >> log2_table[size - 1]);
11286: 		else if (size <= 32768)
11286: 			regind = diff >> (8 + log2_table[(size >> 8) - 1]);
11286: 		else {
11286: 			/*
11449: 			 * The run size is too large for us to use the lookup
11286: 			 * table.  Use real division.
11286: 			 */
11286: 			regind = diff / size;
11286: 		}
11286: 	} else if (size <= ((sizeof(size_invs) / sizeof(unsigned))
11286: 	    << QUANTUM_2POW_MIN) + 2) {
11286: 		regind = size_invs[(size >> QUANTUM_2POW_MIN) - 3] * diff;
11286: 		regind >>= SIZE_INV_SHIFT;
11286: 	} else {
11286: 		/*
11286: 		 * size_invs isn't large enough to handle this size class, so
11286: 		 * calculate regind using actual division.  This only happens
11286: 		 * if the user increases small_max via the 'S' runtime
11286: 		 * configuration option.
11286: 		 */
11286: 		regind = diff / size;
11286: 	};
11286: 	assert(diff == regind * size);
11286: 	assert(regind < bin->nregs);
11286: 
11286: 	elm = regind >> (SIZEOF_INT_2POW + 3);
11286: 	if (elm < run->regs_minelm)
11286: 		run->regs_minelm = elm;
11286: 	bit = regind - (elm << (SIZEOF_INT_2POW + 3));
11286: 	assert((run->regs_mask[elm] & (1U << bit)) == 0);
11286: 	run->regs_mask[elm] |= (1U << bit);
11286: #undef SIZE_INV
11286: #undef SIZE_INV_SHIFT
11286: }
11286: 
11449: static void
16218: arena_run_split(arena_t *arena, arena_run_t *run, size_t size, bool large,
11449:     bool zero)
11286: {
11286: 	arena_chunk_t *chunk;
15461: 	size_t old_ndirty, run_ind, total_pages, need_pages, rem_pages, i;
16218: 
11449: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(run);
15461: 	old_ndirty = chunk->ndirty;
11449: 	run_ind = (unsigned)(((uintptr_t)run - (uintptr_t)chunk)
11449: 	    >> pagesize_2pow);
16218: 	total_pages = (chunk->map[run_ind].bits & ~pagesize_mask) >>
16218: 	    pagesize_2pow;
11449: 	need_pages = (size >> pagesize_2pow);
11449: 	assert(need_pages > 0);
11449: 	assert(need_pages <= total_pages);
11449: 	rem_pages = total_pages - need_pages;
11449: 
16218: 	arena_avail_tree_remove(&arena->runs_avail, &chunk->map[run_ind]);
16218: 
16218: 	/* Keep track of trailing unused pages for later use. */
16218: 	if (rem_pages > 0) {
16218: 		chunk->map[run_ind+need_pages].bits = (rem_pages <<
16218: 		    pagesize_2pow) | (chunk->map[run_ind+need_pages].bits &
16218: 		    pagesize_mask);
16218: 		chunk->map[run_ind+total_pages-1].bits = (rem_pages <<
16218: 		    pagesize_2pow) | (chunk->map[run_ind+total_pages-1].bits &
16218: 		    pagesize_mask);
16218: 		arena_avail_tree_insert(&arena->runs_avail,
16218: 		    &chunk->map[run_ind+need_pages]);
16218: 	}
16218: 
11449: 	for (i = 0; i < need_pages; i++) {
80797: #if defined(MALLOC_DECOMMIT) || defined(MALLOC_STATS) || defined(MALLOC_DOUBLE_PURGE)
11449: 		/*
11449: 		 * Commit decommitted pages if necessary.  If a decommitted
11449: 		 * page is encountered, commit all needed adjacent decommitted
11449: 		 * pages in one operation, in order to reduce system call
11449: 		 * overhead.
11449: 		 */
80797: 		if (chunk->map[run_ind + i].bits & CHUNK_MAP_MADVISED_OR_DECOMMITTED) {
11449: 			size_t j;
11449: 
11449: 			/*
11449: 			 * Advance i+j to just past the index of the last page
80797: 			 * to commit.  Clear CHUNK_MAP_DECOMMITTED and
80797: 			 * CHUNK_MAP_MADVISED along the way.
11449: 			 */
11449: 			for (j = 0; i + j < need_pages && (chunk->map[run_ind +
80797: 			    i + j].bits & CHUNK_MAP_MADVISED_OR_DECOMMITTED); j++) {
80797: 				/* DECOMMITTED and MADVISED are mutually exclusive. */
80797: 				assert(!(chunk->map[run_ind + i + j].bits & CHUNK_MAP_DECOMMITTED &&
80797: 					 chunk->map[run_ind + i + j].bits & CHUNK_MAP_MADVISED));
80797: 
80797: 				chunk->map[run_ind + i + j].bits &=
80797: 				    ~CHUNK_MAP_MADVISED_OR_DECOMMITTED;
11449: 			}
11449: 
80161: #  ifdef MALLOC_DECOMMIT
11449: 			pages_commit((void *)((uintptr_t)chunk + ((run_ind + i)
11449: 			    << pagesize_2pow)), (j << pagesize_2pow));
11286: #    ifdef MALLOC_STATS
11449: 			arena->stats.ncommit++;
80161: #    endif
80161: #  endif
80161: 
80161: #  ifdef MALLOC_STATS
35015: 			arena->stats.committed += j;
11449: #  endif
80161: 
80161: #  ifndef MALLOC_DECOMMIT
80161:                 }
80161: #  else
15610: 		} else /* No need to zero since commit zeros. */
11449: #  endif
11449: 
80161: #endif
80161: 
11449: 		/* Zero if necessary. */
11449: 		if (zero) {
16218: 			if ((chunk->map[run_ind + i].bits & CHUNK_MAP_ZEROED)
11449: 			    == 0) {
15457: 				VALGRIND_MALLOCLIKE_BLOCK((void *)((uintptr_t)
15457: 				    chunk + ((run_ind + i) << pagesize_2pow)),
15457: 				    pagesize, 0, false);
11449: 				memset((void *)((uintptr_t)chunk + ((run_ind
11286: 				    + i) << pagesize_2pow)), 0, pagesize);
15457: 				VALGRIND_FREELIKE_BLOCK((void *)((uintptr_t)
15457: 				    chunk + ((run_ind + i) << pagesize_2pow)),
15457: 				    0);
16218: 				/* CHUNK_MAP_ZEROED is cleared below. */
11449: 			}
11449: 		}
11449: 
11449: 		/* Update dirty page accounting. */
16218: 		if (chunk->map[run_ind + i].bits & CHUNK_MAP_DIRTY) {
11449: 			chunk->ndirty--;
11449: 			arena->ndirty--;
16218: 			/* CHUNK_MAP_DIRTY is cleared below. */
11449: 		}
11449: 
11449: 		/* Initialize the chunk map. */
16218: 		if (large) {
16218: 			chunk->map[run_ind + i].bits = CHUNK_MAP_LARGE
16218: 			    | CHUNK_MAP_ALLOCATED;
11286: 		} else {
16218: 			chunk->map[run_ind + i].bits = (size_t)run
16218: 			    | CHUNK_MAP_ALLOCATED;
16218: 		}
16218: 	}
16218: 
16218: 	/*
16218: 	 * Set the run size only in the first element for large runs.  This is
16218: 	 * primarily a debugging aid, since the lack of size info for trailing
16218: 	 * pages only matters if the application tries to operate on an
16218: 	 * interior pointer.
16218: 	 */
16218: 	if (large)
16218: 		chunk->map[run_ind].bits |= size;
16218: 
15461: 	if (chunk->ndirty == 0 && old_ndirty > 0)
15461: 		arena_chunk_tree_dirty_remove(&arena->chunks_dirty, chunk);
11286: }
11286: 
15610: static void
15610: arena_chunk_init(arena_t *arena, arena_chunk_t *chunk)
15610: {
16218: 	arena_run_t *run;
16218: 	size_t i;
11286: 
14033: 	VALGRIND_MALLOCLIKE_BLOCK(chunk, (arena_chunk_header_npages <<
14033: 	    pagesize_2pow), 0, false);
11286: #ifdef MALLOC_STATS
11286: 	arena->stats.mapped += chunksize;
11286: #endif
11286: 
11286: 	chunk->arena = arena;
11286: 
11286: 	/*
15610: 	 * Claim that no pages are in use, since the header is merely overhead.
11286: 	 */
11449: 	chunk->ndirty = 0;
11449: 
15610: 	/* Initialize the map to contain one maximal free untouched run. */
16218: 	run = (arena_run_t *)((uintptr_t)chunk + (arena_chunk_header_npages <<
16218: 	    pagesize_2pow));
16218: 	for (i = 0; i < arena_chunk_header_npages; i++)
16218: 		chunk->map[i].bits = 0;
80161: 	chunk->map[i].bits = arena_maxclass | CHUNK_MAP_DECOMMITTED | CHUNK_MAP_ZEROED;
16218: 	for (i++; i < chunk_npages-1; i++) {
80161: 		chunk->map[i].bits = CHUNK_MAP_DECOMMITTED | CHUNK_MAP_ZEROED;
80161: 	}
80161: 	chunk->map[chunk_npages-1].bits = arena_maxclass | CHUNK_MAP_DECOMMITTED | CHUNK_MAP_ZEROED;
11449: 
11449: #ifdef MALLOC_DECOMMIT
11449: 	/*
15610: 	 * Start out decommitted, in order to force a closer correspondence
15610: 	 * between dirty pages and committed untouched pages.
11449: 	 */
16218: 	pages_decommit(run, arena_maxclass);
11449: #  ifdef MALLOC_STATS
11449: 	arena->stats.ndecommit++;
15610: 	arena->stats.decommitted += (chunk_npages - arena_chunk_header_npages);
80161: #  endif
80161: #endif
80161: #ifdef MALLOC_STATS
35015: 	arena->stats.committed += arena_chunk_header_npages;
15610: #endif
11286: 
16218: 	/* Insert the run into the runs_avail tree. */
16218: 	arena_avail_tree_insert(&arena->runs_avail,
16218: 	    &chunk->map[arena_chunk_header_npages]);
80797: 
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 	LinkedList_Init(&chunk->chunks_madvised_elem);
80797: #endif
11286: }
11286: 
11286: static void
11286: arena_chunk_dealloc(arena_t *arena, arena_chunk_t *chunk)
11286: {
16218: 
16218: 	if (arena->spare != NULL) {
16218: 		if (arena->spare->ndirty > 0) {
16218: 			arena_chunk_tree_dirty_remove(
16218: 			    &chunk->arena->chunks_dirty, arena->spare);
16218: 			arena->ndirty -= arena->spare->ndirty;
80161: #ifdef MALLOC_STATS
35015: 			arena->stats.committed -= arena->spare->ndirty;
35015: #endif
16218: 		}
80797: 
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 		/* This is safe to do even if arena->spare is not in the list. */
80797: 		LinkedList_Remove(&arena->spare->chunks_madvised_elem);
80797: #endif
80797: 
16218: 		VALGRIND_FREELIKE_BLOCK(arena->spare, 0);
16218: 		chunk_dealloc((void *)arena->spare, chunksize);
16218: #ifdef MALLOC_STATS
16218: 		arena->stats.mapped -= chunksize;
35015: 		arena->stats.committed -= arena_chunk_header_npages;
35015: #endif
35015: 	}
35015: 
35015: 	/*
35015: 	 * Remove run from runs_avail, so that the arena does not use it.
35015: 	 * Dirty page flushing only uses the chunks_dirty tree, so leaving this
35015: 	 * chunk in the chunks_* trees is sufficient for that purpose.
11286: 	 */
16218: 	arena_avail_tree_remove(&arena->runs_avail,
16218: 	    &chunk->map[arena_chunk_header_npages]);
16218: 
16218: 	arena->spare = chunk;
11286: }
11286: 
11286: static arena_run_t *
16218: arena_run_alloc(arena_t *arena, arena_bin_t *bin, size_t size, bool large,
15610:     bool zero)
11286: {
11286: 	arena_run_t *run;
16218: 	arena_chunk_map_t *mapelm, key;
16218: 
16218: 	assert(size <= arena_maxclass);
11286: 	assert((size & pagesize_mask) == 0);
11286: 
11286: 	/* Search the arena's chunks for the lowest best fit. */
16218: 	key.bits = size | CHUNK_MAP_KEY;
16218: 	mapelm = arena_avail_tree_nsearch(&arena->runs_avail, &key);
16218: 	if (mapelm != NULL) {
64118: 		arena_chunk_t *chunk =
35015: 		    (arena_chunk_t*)CHUNK_ADDR2BASE(mapelm);
16218: 		size_t pageind = ((uintptr_t)mapelm -
64118: 		    (uintptr_t)chunk->map) /
16218: 		    sizeof(arena_chunk_map_t);
16218: 
64118: 		run = (arena_run_t *)((uintptr_t)chunk + (pageind
16218: 		    << pagesize_2pow));
16218: 		arena_run_split(arena, run, size, large, zero);
16218: 		return (run);
16218: 	}
16218: 
16218: 	if (arena->spare != NULL) {
16218: 		/* Use the spare. */
64118: 		arena_chunk_t *chunk = arena->spare;
16218: 		arena->spare = NULL;
16218: 		run = (arena_run_t *)((uintptr_t)chunk +
16218: 		    (arena_chunk_header_npages << pagesize_2pow));
16218: 		/* Insert the run into the runs_avail tree. */
16218: 		arena_avail_tree_insert(&arena->runs_avail,
16218: 		    &chunk->map[arena_chunk_header_npages]);
16218: 		arena_run_split(arena, run, size, large, zero);
11286: 		return (run);
11286: 	}
11286: 
11286: 	/*
15610: 	 * No usable runs.  Create a new chunk from which to allocate
15610: 	 * the run.
15610: 	 */
64118: 	{
64118: 		arena_chunk_t *chunk = (arena_chunk_t *)
64118: 		    chunk_alloc(chunksize, true, true);
11286: 		if (chunk == NULL)
11286: 			return (NULL);
15610: 
15610: 		arena_chunk_init(arena, chunk);
15610: 		run = (arena_run_t *)((uintptr_t)chunk +
15610: 		    (arena_chunk_header_npages << pagesize_2pow));
64118: 	}
11286: 	/* Update page map. */
16218: 	arena_run_split(arena, run, size, large, zero);
11286: 	return (run);
11286: }
11286: 
11286: static void
11286: arena_purge(arena_t *arena)
11286: {
11449: 	arena_chunk_t *chunk;
15461: 	size_t i, npages;
11286: #ifdef MALLOC_DEBUG
16218: 	size_t ndirty = 0;
15461: 	rb_foreach_begin(arena_chunk_t, link_dirty, &arena->chunks_dirty,
15461: 	    chunk) {
15461: 		ndirty += chunk->ndirty;
15461: 	} rb_foreach_end(arena_chunk_t, link_dirty, &arena->chunks_dirty, chunk)
15461: 	assert(ndirty == arena->ndirty);
11286: #endif
11449: 	assert(arena->ndirty > opt_dirty_max);
11449: 
11449: #ifdef MALLOC_STATS
11449: 	arena->stats.npurge++;
11449: #endif
11449: 
11449: 	/*
11449: 	 * Iterate downward through chunks until enough dirty memory has been
15461: 	 * purged.  Terminate as soon as possible in order to minimize the
15461: 	 * number of system calls, even if a chunk has only been partially
11449: 	 * purged.
11449: 	 */
15461: 	while (arena->ndirty > (opt_dirty_max >> 1)) {
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 		bool madvised = false;
80797: #endif
15461: 		chunk = arena_chunk_tree_dirty_last(&arena->chunks_dirty);
15461: 		assert(chunk != NULL);
15461: 
15461: 		for (i = chunk_npages - 1; chunk->ndirty > 0; i--) {
15461: 			assert(i >= arena_chunk_header_npages);
15461: 
16218: 			if (chunk->map[i].bits & CHUNK_MAP_DIRTY) {
80797: #ifdef MALLOC_DECOMMIT
80797: 				const size_t free_operation = CHUNK_MAP_DECOMMITTED;
80797: #else
80797: 				const size_t free_operation = CHUNK_MAP_MADVISED;
80797: #endif
16218: 				assert((chunk->map[i].bits &
80797: 				        CHUNK_MAP_MADVISED_OR_DECOMMITTED) == 0);
80797: 				chunk->map[i].bits ^= free_operation | CHUNK_MAP_DIRTY;
11449: 				/* Find adjacent dirty run(s). */
80797: 				for (npages = 1;
80797: 				     i > arena_chunk_header_npages &&
80797: 				       (chunk->map[i - 1].bits & CHUNK_MAP_DIRTY);
80797: 				     npages++) {
11449: 					i--;
16218: 					assert((chunk->map[i].bits &
80797: 					        CHUNK_MAP_MADVISED_OR_DECOMMITTED) == 0);
80797: 					chunk->map[i].bits ^= free_operation | CHUNK_MAP_DIRTY;
15461: 				}
15461: 				chunk->ndirty -= npages;
15461: 				arena->ndirty -= npages;
11449: 
11449: #ifdef MALLOC_DECOMMIT
11449: 				pages_decommit((void *)((uintptr_t)
11449: 				    chunk + (i << pagesize_2pow)),
11449: 				    (npages << pagesize_2pow));
11449: #  ifdef MALLOC_STATS
11449: 				arena->stats.ndecommit++;
11449: 				arena->stats.decommitted += npages;
80161: #  endif
80161: #endif
80161: #ifdef MALLOC_STATS
35015: 				arena->stats.committed -= npages;
11449: #endif
80161: 
80161: #ifndef MALLOC_DECOMMIT
15461: 				madvise((void *)((uintptr_t)chunk + (i <<
16218: 				    pagesize_2pow)), (npages << pagesize_2pow),
15461: 				    MADV_FREE);
80797: #  ifdef MALLOC_DOUBLE_PURGE
80797: 				madvised = true;
80797: #  endif
11286: #endif
11286: #ifdef MALLOC_STATS
11286: 				arena->stats.nmadvise++;
11449: 				arena->stats.purged += npages;
11449: #endif
15461: 				if (arena->ndirty <= (opt_dirty_max >> 1))
15461: 					break;
15461: 			}
15461: 		}
15461: 
15461: 		if (chunk->ndirty == 0) {
15461: 			arena_chunk_tree_dirty_remove(&arena->chunks_dirty,
15461: 			    chunk);
15461: 		}
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 		if (madvised) {
80797: 			/* The chunk might already be in the list, but this
80797: 			 * makes sure it's at the front. */
80797: 			LinkedList_Remove(&chunk->chunks_madvised_elem);
80797: 			LinkedList_InsertHead(&arena->chunks_madvised, &chunk->chunks_madvised_elem);
80797: 		}
80797: #endif
15461: 	}
11286: }
11286: 
11286: static void
11449: arena_run_dalloc(arena_t *arena, arena_run_t *run, bool dirty)
11286: {
11286: 	arena_chunk_t *chunk;
11449: 	size_t size, run_ind, run_pages;
11449: 
11286: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(run);
16218: 	run_ind = (size_t)(((uintptr_t)run - (uintptr_t)chunk)
11286: 	    >> pagesize_2pow);
11286: 	assert(run_ind >= arena_chunk_header_npages);
16218: 	assert(run_ind < chunk_npages);
16218: 	if ((chunk->map[run_ind].bits & CHUNK_MAP_LARGE) != 0)
16218: 		size = chunk->map[run_ind].bits & ~pagesize_mask;
16218: 	else
16218: 		size = run->bin->run_size;
11286: 	run_pages = (size >> pagesize_2pow);
11286: 
16218: 	/* Mark pages as unallocated in the chunk map. */
11449: 	if (dirty) {
11449: 		size_t i;
11449: 
11449: 		for (i = 0; i < run_pages; i++) {
16218: 			assert((chunk->map[run_ind + i].bits & CHUNK_MAP_DIRTY)
16218: 			    == 0);
16218: 			chunk->map[run_ind + i].bits = CHUNK_MAP_DIRTY;
15461: 		}
15461: 
15461: 		if (chunk->ndirty == 0) {
15461: 			arena_chunk_tree_dirty_insert(&arena->chunks_dirty,
15461: 			    chunk);
15461: 		}
15461: 		chunk->ndirty += run_pages;
15461: 		arena->ndirty += run_pages;
16218: 	} else {
11449: 		size_t i;
11449: 
11449: 		for (i = 0; i < run_pages; i++) {
16218: 			chunk->map[run_ind + i].bits &= ~(CHUNK_MAP_LARGE |
16218: 			    CHUNK_MAP_ALLOCATED);
16218: 		}
16218: 	}
16218: 	chunk->map[run_ind].bits = size | (chunk->map[run_ind].bits &
16218: 	    pagesize_mask);
16218: 	chunk->map[run_ind+run_pages-1].bits = size |
16218: 	    (chunk->map[run_ind+run_pages-1].bits & pagesize_mask);
11449: 
11449: 	/* Try to coalesce forward. */
16218: 	if (run_ind + run_pages < chunk_npages &&
16218: 	    (chunk->map[run_ind+run_pages].bits & CHUNK_MAP_ALLOCATED) == 0) {
16218: 		size_t nrun_size = chunk->map[run_ind+run_pages].bits &
16218: 		    ~pagesize_mask;
16218: 
16218: 		/*
16218: 		 * Remove successor from runs_avail; the coalesced run is
16218: 		 * inserted later.
16218: 		 */
16218: 		arena_avail_tree_remove(&arena->runs_avail,
16218: 		    &chunk->map[run_ind+run_pages]);
16218: 
16218: 		size += nrun_size;
16218: 		run_pages = size >> pagesize_2pow;
16218: 
16218: 		assert((chunk->map[run_ind+run_pages-1].bits & ~pagesize_mask)
16218: 		    == nrun_size);
16218: 		chunk->map[run_ind].bits = size | (chunk->map[run_ind].bits &
16218: 		    pagesize_mask);
16218: 		chunk->map[run_ind+run_pages-1].bits = size |
16218: 		    (chunk->map[run_ind+run_pages-1].bits & pagesize_mask);
11449: 	}
11449: 
11449: 	/* Try to coalesce backward. */
16218: 	if (run_ind > arena_chunk_header_npages && (chunk->map[run_ind-1].bits &
16218: 	    CHUNK_MAP_ALLOCATED) == 0) {
16218: 		size_t prun_size = chunk->map[run_ind-1].bits & ~pagesize_mask;
16218: 
16218: 		run_ind -= prun_size >> pagesize_2pow;
16218: 
16218: 		/*
16218: 		 * Remove predecessor from runs_avail; the coalesced run is
16218: 		 * inserted later.
16218: 		 */
16218: 		arena_avail_tree_remove(&arena->runs_avail,
16218: 		    &chunk->map[run_ind]);
16218: 
16218: 		size += prun_size;
16218: 		run_pages = size >> pagesize_2pow;
16218: 
16218: 		assert((chunk->map[run_ind].bits & ~pagesize_mask) ==
16218: 		    prun_size);
16218: 		chunk->map[run_ind].bits = size | (chunk->map[run_ind].bits &
16218: 		    pagesize_mask);
16218: 		chunk->map[run_ind+run_pages-1].bits = size |
16218: 		    (chunk->map[run_ind+run_pages-1].bits & pagesize_mask);
16218: 	}
16218: 
16218: 	/* Insert into runs_avail, now that coalescing is complete. */
16218: 	arena_avail_tree_insert(&arena->runs_avail, &chunk->map[run_ind]);
11286: 
11286: 	/* Deallocate chunk if it is now completely unused. */
16218: 	if ((chunk->map[arena_chunk_header_npages].bits & (~pagesize_mask |
16218: 	    CHUNK_MAP_ALLOCATED)) == arena_maxclass)
11286: 		arena_chunk_dealloc(arena, chunk);
11286: 
11449: 	/* Enforce opt_dirty_max. */
11449: 	if (arena->ndirty > opt_dirty_max)
11286: 		arena_purge(arena);
11286: }
11286: 
11449: static void
16218: arena_run_trim_head(arena_t *arena, arena_chunk_t *chunk, arena_run_t *run,
16218:     size_t oldsize, size_t newsize)
16218: {
16218: 	size_t pageind = ((uintptr_t)run - (uintptr_t)chunk) >> pagesize_2pow;
16218: 	size_t head_npages = (oldsize - newsize) >> pagesize_2pow;
16218: 
11449: 	assert(oldsize > newsize);
11449: 
11449: 	/*
16218: 	 * Update the chunk map so that arena_run_dalloc() can treat the
16218: 	 * leading run as separately allocated.
16218: 	 */
16218: 	chunk->map[pageind].bits = (oldsize - newsize) | CHUNK_MAP_LARGE |
16218: 	    CHUNK_MAP_ALLOCATED;
16218: 	chunk->map[pageind+head_npages].bits = newsize | CHUNK_MAP_LARGE |
16218: 	    CHUNK_MAP_ALLOCATED;
16218: 
16218: 	arena_run_dalloc(arena, run, false);
11449: }
11449: 
11449: static void
16218: arena_run_trim_tail(arena_t *arena, arena_chunk_t *chunk, arena_run_t *run,
16218:     size_t oldsize, size_t newsize, bool dirty)
16218: {
16218: 	size_t pageind = ((uintptr_t)run - (uintptr_t)chunk) >> pagesize_2pow;
16218: 	size_t npages = newsize >> pagesize_2pow;
16218: 
11449: 	assert(oldsize > newsize);
11449: 
11449: 	/*
16218: 	 * Update the chunk map so that arena_run_dalloc() can treat the
16218: 	 * trailing run as separately allocated.
16218: 	 */
16218: 	chunk->map[pageind].bits = newsize | CHUNK_MAP_LARGE |
16218: 	    CHUNK_MAP_ALLOCATED;
16218: 	chunk->map[pageind+npages].bits = (oldsize - newsize) | CHUNK_MAP_LARGE
16218: 	    | CHUNK_MAP_ALLOCATED;
11449: 
11449: 	arena_run_dalloc(arena, (arena_run_t *)((uintptr_t)run + newsize),
11449: 	    dirty);
11449: }
11449: 
11286: static arena_run_t *
11286: arena_bin_nonfull_run_get(arena_t *arena, arena_bin_t *bin)
11286: {
16218: 	arena_chunk_map_t *mapelm;
11286: 	arena_run_t *run;
11286: 	unsigned i, remainder;
11286: 
11286: 	/* Look for a usable run. */
16218: 	mapelm = arena_run_tree_first(&bin->runs);
16218: 	if (mapelm != NULL) {
11286: 		/* run is guaranteed to have available space. */
16218: 		arena_run_tree_remove(&bin->runs, mapelm);
16218: 		run = (arena_run_t *)(mapelm->bits & ~pagesize_mask);
11286: #ifdef MALLOC_STATS
11286: 		bin->stats.reruns++;
11286: #endif
11286: 		return (run);
11286: 	}
11286: 	/* No existing runs have any space available. */
11286: 
11286: 	/* Allocate a new run. */
16218: 	run = arena_run_alloc(arena, bin, bin->run_size, false, false);
11286: 	if (run == NULL)
11286: 		return (NULL);
15610: 	/*
15610: 	 * Don't initialize if a race in arena_run_alloc() allowed an existing
15610: 	 * run to become usable.
15610: 	 */
15610: 	if (run == bin->runcur)
15610: 		return (run);
11286: 
14033: 	VALGRIND_MALLOCLIKE_BLOCK(run, sizeof(arena_run_t) + (sizeof(unsigned) *
15457: 	    (bin->regs_mask_nelms - 1)), 0, false);
14033: 
11286: 	/* Initialize run internals. */
11286: 	run->bin = bin;
11286: 
15456: 	for (i = 0; i < bin->regs_mask_nelms - 1; i++)
11286: 		run->regs_mask[i] = UINT_MAX;
11286: 	remainder = bin->nregs & ((1U << (SIZEOF_INT_2POW + 3)) - 1);
15456: 	if (remainder == 0)
15456: 		run->regs_mask[i] = UINT_MAX;
15456: 	else {
11286: 		/* The last element has spare bits that need to be unset. */
11286: 		run->regs_mask[i] = (UINT_MAX >> ((1U << (SIZEOF_INT_2POW + 3))
11286: 		    - remainder));
11286: 	}
11286: 
11286: 	run->regs_minelm = 0;
11286: 
11286: 	run->nfree = bin->nregs;
11286: #ifdef MALLOC_DEBUG
11286: 	run->magic = ARENA_RUN_MAGIC;
11286: #endif
11286: 
11286: #ifdef MALLOC_STATS
11286: 	bin->stats.nruns++;
11286: 	bin->stats.curruns++;
11286: 	if (bin->stats.curruns > bin->stats.highruns)
11286: 		bin->stats.highruns = bin->stats.curruns;
11286: #endif
11286: 	return (run);
11286: }
11286: 
11286: /* bin->runcur must have space available before this function is called. */
11286: static inline void *
11286: arena_bin_malloc_easy(arena_t *arena, arena_bin_t *bin, arena_run_t *run)
11286: {
11286: 	void *ret;
11286: 
11286: 	assert(run->magic == ARENA_RUN_MAGIC);
11286: 	assert(run->nfree > 0);
11286: 
11286: 	ret = arena_run_reg_alloc(run, bin);
11286: 	assert(ret != NULL);
11286: 	run->nfree--;
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: /* Re-fill bin->runcur, then call arena_bin_malloc_easy(). */
11286: static void *
11286: arena_bin_malloc_hard(arena_t *arena, arena_bin_t *bin)
11286: {
11286: 
11286: 	bin->runcur = arena_bin_nonfull_run_get(arena, bin);
11286: 	if (bin->runcur == NULL)
11286: 		return (NULL);
11286: 	assert(bin->runcur->magic == ARENA_RUN_MAGIC);
11286: 	assert(bin->runcur->nfree > 0);
11286: 
11286: 	return (arena_bin_malloc_easy(arena, bin, bin->runcur));
11286: }
11286: 
11286: /*
11286:  * Calculate bin->run_size such that it meets the following constraints:
11286:  *
11286:  *   *) bin->run_size >= min_run_size
11286:  *   *) bin->run_size <= arena_maxclass
11286:  *   *) bin->run_size <= RUN_MAX_SMALL
11286:  *   *) run header overhead <= RUN_MAX_OVRHD (or header overhead relaxed).
11286:  *
11286:  * bin->nregs, bin->regs_mask_nelms, and bin->reg0_offset are
11286:  * also calculated here, since these settings are all interdependent.
11286:  */
11286: static size_t
11286: arena_bin_run_size_calc(arena_bin_t *bin, size_t min_run_size)
11286: {
11286: 	size_t try_run_size, good_run_size;
11286: 	unsigned good_nregs, good_mask_nelms, good_reg0_offset;
11286: 	unsigned try_nregs, try_mask_nelms, try_reg0_offset;
11286: 
11286: 	assert(min_run_size >= pagesize);
11286: 	assert(min_run_size <= arena_maxclass);
11286: 	assert(min_run_size <= RUN_MAX_SMALL);
11286: 
11286: 	/*
11286: 	 * Calculate known-valid settings before entering the run_size
11286: 	 * expansion loop, so that the first part of the loop always copies
11286: 	 * valid settings.
11286: 	 *
11286: 	 * The do..while loop iteratively reduces the number of regions until
11286: 	 * the run header and the regions no longer overlap.  A closed formula
11286: 	 * would be quite messy, since there is an interdependency between the
11286: 	 * header's mask length and the number of regions.
11286: 	 */
11286: 	try_run_size = min_run_size;
11286: 	try_nregs = ((try_run_size - sizeof(arena_run_t)) / bin->reg_size)
11286: 	    + 1; /* Counter-act try_nregs-- in loop. */
11286: 	do {
11286: 		try_nregs--;
11286: 		try_mask_nelms = (try_nregs >> (SIZEOF_INT_2POW + 3)) +
11286: 		    ((try_nregs & ((1U << (SIZEOF_INT_2POW + 3)) - 1)) ? 1 : 0);
11286: 		try_reg0_offset = try_run_size - (try_nregs * bin->reg_size);
11286: 	} while (sizeof(arena_run_t) + (sizeof(unsigned) * (try_mask_nelms - 1))
11286: 	    > try_reg0_offset);
11286: 
11286: 	/* run_size expansion loop. */
11286: 	do {
11286: 		/*
11286: 		 * Copy valid settings before trying more aggressive settings.
11286: 		 */
11286: 		good_run_size = try_run_size;
11286: 		good_nregs = try_nregs;
11286: 		good_mask_nelms = try_mask_nelms;
11286: 		good_reg0_offset = try_reg0_offset;
11286: 
11286: 		/* Try more aggressive settings. */
11286: 		try_run_size += pagesize;
11286: 		try_nregs = ((try_run_size - sizeof(arena_run_t)) /
11286: 		    bin->reg_size) + 1; /* Counter-act try_nregs-- in loop. */
11286: 		do {
11286: 			try_nregs--;
11286: 			try_mask_nelms = (try_nregs >> (SIZEOF_INT_2POW + 3)) +
11286: 			    ((try_nregs & ((1U << (SIZEOF_INT_2POW + 3)) - 1)) ?
11286: 			    1 : 0);
11286: 			try_reg0_offset = try_run_size - (try_nregs *
11286: 			    bin->reg_size);
11286: 		} while (sizeof(arena_run_t) + (sizeof(unsigned) *
11286: 		    (try_mask_nelms - 1)) > try_reg0_offset);
11286: 	} while (try_run_size <= arena_maxclass && try_run_size <= RUN_MAX_SMALL
11286: 	    && RUN_MAX_OVRHD * (bin->reg_size << 3) > RUN_MAX_OVRHD_RELAX
11286: 	    && (try_reg0_offset << RUN_BFP) > RUN_MAX_OVRHD * try_run_size);
11286: 
11286: 	assert(sizeof(arena_run_t) + (sizeof(unsigned) * (good_mask_nelms - 1))
11286: 	    <= good_reg0_offset);
11286: 	assert((good_mask_nelms << (SIZEOF_INT_2POW + 3)) >= good_nregs);
11286: 
11286: 	/* Copy final settings. */
11286: 	bin->run_size = good_run_size;
11286: 	bin->nregs = good_nregs;
11286: 	bin->regs_mask_nelms = good_mask_nelms;
11286: 	bin->reg0_offset = good_reg0_offset;
11286: 
11286: 	return (good_run_size);
11286: }
11286: 
11286: #ifdef MALLOC_BALANCE
11286: static inline void
11286: arena_lock_balance(arena_t *arena)
11286: {
11286: 	unsigned contention;
11286: 
11286: 	contention = malloc_spin_lock(&arena->lock);
11286: 	if (narenas > 1) {
11286: 		/*
11286: 		 * Calculate the exponentially averaged contention for this
11286: 		 * arena.  Due to integer math always rounding down, this value
11286: 		 * decays somewhat faster then normal.
11286: 		 */
11286: 		arena->contention = (((uint64_t)arena->contention
11286: 		    * (uint64_t)((1U << BALANCE_ALPHA_INV_2POW)-1))
11286: 		    + (uint64_t)contention) >> BALANCE_ALPHA_INV_2POW;
11449: 		if (arena->contention >= opt_balance_threshold)
11449: 			arena_lock_balance_hard(arena);
11449: 	}
11449: }
11449: 
11449: static void
11449: arena_lock_balance_hard(arena_t *arena)
11449: {
11286: 	uint32_t ind;
11286: 
11286: 	arena->contention = 0;
11286: #ifdef MALLOC_STATS
11286: 	arena->stats.nbalance++;
11286: #endif
11286: 	ind = PRN(balance, narenas_2pow);
11286: 	if (arenas[ind] != NULL) {
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 		TlsSetValue(tlsIndex, arenas[ind]);
11286: #else
11286: 		arenas_map = arenas[ind];
11286: #endif
11286: 	} else {
11286: 		malloc_spin_lock(&arenas_lock);
11286: 		if (arenas[ind] != NULL) {
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 			TlsSetValue(tlsIndex, arenas[ind]);
11286: #else
11286: 			arenas_map = arenas[ind];
11286: #endif
11286: 		} else {
11286: #ifdef MOZ_MEMORY_WINDOWS
11449: 			TlsSetValue(tlsIndex, arenas_extend(ind));
11286: #else
11286: 			arenas_map = arenas_extend(ind);
11286: #endif
11286: 		}
11286: 		malloc_spin_unlock(&arenas_lock);
11286: 	}
11286: }
11449: #endif
11449: 
11449: static inline void *
11449: arena_malloc_small(arena_t *arena, size_t size, bool zero)
11286: {
11286: 	void *ret;
11286: 	arena_bin_t *bin;
11286: 	arena_run_t *run;
11286: 
11286: 	if (size < small_min) {
11286: 		/* Tiny. */
11286: 		size = pow2_ceil(size);
11286: 		bin = &arena->bins[ffs((int)(size >> (TINY_MIN_2POW +
11286: 		    1)))];
11286: #if (!defined(NDEBUG) || defined(MALLOC_STATS))
11286: 		/*
11286: 		 * Bin calculation is always correct, but we may need
11286: 		 * to fix size for the purposes of assertions and/or
11286: 		 * stats accuracy.
11286: 		 */
11286: 		if (size < (1U << TINY_MIN_2POW))
11286: 			size = (1U << TINY_MIN_2POW);
11286: #endif
11286: 	} else if (size <= small_max) {
11286: 		/* Quantum-spaced. */
11286: 		size = QUANTUM_CEILING(size);
11286: 		bin = &arena->bins[ntbins + (size >> opt_quantum_2pow)
11286: 		    - 1];
11286: 	} else {
11286: 		/* Sub-page. */
11286: 		size = pow2_ceil(size);
11286: 		bin = &arena->bins[ntbins + nqbins
11286: 		    + (ffs((int)(size >> opt_small_max_2pow)) - 2)];
11286: 	}
11286: 	assert(size == bin->reg_size);
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 	arena_lock_balance(arena);
11286: #else
11286: 	malloc_spin_lock(&arena->lock);
11286: #endif
11286: 	if ((run = bin->runcur) != NULL && run->nfree > 0)
11286: 		ret = arena_bin_malloc_easy(arena, bin, run);
11286: 	else
11286: 		ret = arena_bin_malloc_hard(arena, bin);
11286: 
11286: 	if (ret == NULL) {
11286: 		malloc_spin_unlock(&arena->lock);
11286: 		return (NULL);
11286: 	}
11286: 
11286: #ifdef MALLOC_STATS
11286: 	bin->stats.nrequests++;
11286: 	arena->stats.nmalloc_small++;
11286: 	arena->stats.allocated_small += size;
11286: #endif
11286: 	malloc_spin_unlock(&arena->lock);
11286: 
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, size, 0, zero);
11286: 	if (zero == false) {
11449: #ifdef MALLOC_FILL
11286: 		if (opt_junk)
11286: 			memset(ret, 0xa5, size);
11286: 		else if (opt_zero)
11286: 			memset(ret, 0, size);
11449: #endif
11286: 	} else
11286: 		memset(ret, 0, size);
11449: 
11449: 	return (ret);
11449: }
11449: 
11449: static void *
11449: arena_malloc_large(arena_t *arena, size_t size, bool zero)
11449: {
11449: 	void *ret;
11449: 
11286: 	/* Large allocation. */
11286: 	size = PAGE_CEILING(size);
11286: #ifdef MALLOC_BALANCE
11286: 	arena_lock_balance(arena);
11286: #else
11286: 	malloc_spin_lock(&arena->lock);
11286: #endif
16218: 	ret = (void *)arena_run_alloc(arena, NULL, size, true, zero);
11286: 	if (ret == NULL) {
11286: 		malloc_spin_unlock(&arena->lock);
11286: 		return (NULL);
11286: 	}
11286: #ifdef MALLOC_STATS
11286: 	arena->stats.nmalloc_large++;
11286: 	arena->stats.allocated_large += size;
11286: #endif
11286: 	malloc_spin_unlock(&arena->lock);
11286: 
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, size, 0, zero);
11286: 	if (zero == false) {
11449: #ifdef MALLOC_FILL
11286: 		if (opt_junk)
11286: 			memset(ret, 0xa5, size);
11286: 		else if (opt_zero)
11286: 			memset(ret, 0, size);
11449: #endif
11286: 	}
11286: 
11286: 	return (ret);
11286: }
11286: 
11449: static inline void *
11449: arena_malloc(arena_t *arena, size_t size, bool zero)
11286: {
11449: 
11449: 	assert(arena != NULL);
11449: 	assert(arena->magic == ARENA_MAGIC);
11449: 	assert(size != 0);
11449: 	assert(QUANTUM_CEILING(size) <= arena_maxclass);
11449: 
11449: 	if (size <= bin_maxclass) {
11449: 		return (arena_malloc_small(arena, size, zero));
11449: 	} else
11449: 		return (arena_malloc_large(arena, size, zero));
11449: }
11449: 
11449: static inline void *
11449: imalloc(size_t size)
11286: {
11449: 
11449: 	assert(size != 0);
11449: 
11449: 	if (size <= arena_maxclass)
11449: 		return (arena_malloc(choose_arena(), size, false));
11449: 	else
11449: 		return (huge_malloc(size, false));
11449: }
11449: 
11449: static inline void *
11449: icalloc(size_t size)
11449: {
11449: 
11449: 	if (size <= arena_maxclass)
11449: 		return (arena_malloc(choose_arena(), size, true));
11449: 	else
11449: 		return (huge_malloc(size, true));
11286: }
11286: 
11286: /* Only handles large allocations that require more than page alignment. */
11286: static void *
11286: arena_palloc(arena_t *arena, size_t alignment, size_t size, size_t alloc_size)
11286: {
11286: 	void *ret;
11286: 	size_t offset;
11286: 	arena_chunk_t *chunk;
11286: 
11286: 	assert((size & pagesize_mask) == 0);
11286: 	assert((alignment & pagesize_mask) == 0);
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 	arena_lock_balance(arena);
11286: #else
11286: 	malloc_spin_lock(&arena->lock);
11286: #endif
16218: 	ret = (void *)arena_run_alloc(arena, NULL, alloc_size, true, false);
11286: 	if (ret == NULL) {
11286: 		malloc_spin_unlock(&arena->lock);
11286: 		return (NULL);
11286: 	}
11286: 
11286: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ret);
11286: 
11286: 	offset = (uintptr_t)ret & (alignment - 1);
11286: 	assert((offset & pagesize_mask) == 0);
11286: 	assert(offset < alloc_size);
16218: 	if (offset == 0)
26488: 		arena_run_trim_tail(arena, chunk, (arena_run_t*)ret, alloc_size, size, false);
16218: 	else {
11286: 		size_t leadsize, trailsize;
11286: 
11286: 		leadsize = alignment - offset;
11286: 		if (leadsize > 0) {
26488: 			arena_run_trim_head(arena, chunk, (arena_run_t*)ret, alloc_size,
11449: 			    alloc_size - leadsize);
11286: 			ret = (void *)((uintptr_t)ret + leadsize);
11286: 		}
11286: 
11286: 		trailsize = alloc_size - leadsize - size;
11286: 		if (trailsize != 0) {
11286: 			/* Trim trailing space. */
11286: 			assert(trailsize < alloc_size);
26488: 			arena_run_trim_tail(arena, chunk, (arena_run_t*)ret, size + trailsize,
16218: 			    size, false);
11449: 		}
11286: 	}
11286: 
11286: #ifdef MALLOC_STATS
11286: 	arena->stats.nmalloc_large++;
11286: 	arena->stats.allocated_large += size;
11286: #endif
11286: 	malloc_spin_unlock(&arena->lock);
11286: 
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, size, 0, false);
11449: #ifdef MALLOC_FILL
11286: 	if (opt_junk)
11286: 		memset(ret, 0xa5, size);
11286: 	else if (opt_zero)
11286: 		memset(ret, 0, size);
11449: #endif
11449: 	return (ret);
11449: }
11449: 
11449: static inline void *
11449: ipalloc(size_t alignment, size_t size)
11449: {
11449: 	void *ret;
11449: 	size_t ceil_size;
11449: 
11449: 	/*
11449: 	 * Round size up to the nearest multiple of alignment.
11449: 	 *
11449: 	 * This done, we can take advantage of the fact that for each small
11449: 	 * size class, every object is aligned at the smallest power of two
11449: 	 * that is non-zero in the base two representation of the size.  For
11449: 	 * example:
11449: 	 *
11449: 	 *   Size |   Base 2 | Minimum alignment
11449: 	 *   -----+----------+------------------
11449: 	 *     96 |  1100000 |  32
11449: 	 *    144 | 10100000 |  32
11449: 	 *    192 | 11000000 |  64
11449: 	 *
11449: 	 * Depending on runtime settings, it is possible that arena_malloc()
11449: 	 * will further round up to a power of two, but that never causes
11449: 	 * correctness issues.
11449: 	 */
11449: 	ceil_size = (size + (alignment - 1)) & (-alignment);
11449: 	/*
11449: 	 * (ceil_size < size) protects against the combination of maximal
11449: 	 * alignment and size greater than maximal alignment.
11449: 	 */
11449: 	if (ceil_size < size) {
11449: 		/* size_t overflow. */
11449: 		return (NULL);
11449: 	}
11449: 
11449: 	if (ceil_size <= pagesize || (alignment <= pagesize
11449: 	    && ceil_size <= arena_maxclass))
11449: 		ret = arena_malloc(choose_arena(), ceil_size, false);
11449: 	else {
11449: 		size_t run_size;
11449: 
11449: 		/*
11449: 		 * We can't achieve sub-page alignment, so round up alignment
11449: 		 * permanently; it makes later calculations simpler.
11449: 		 */
11449: 		alignment = PAGE_CEILING(alignment);
11449: 		ceil_size = PAGE_CEILING(size);
11449: 		/*
11449: 		 * (ceil_size < size) protects against very large sizes within
11449: 		 * pagesize of SIZE_T_MAX.
11449: 		 *
11449: 		 * (ceil_size + alignment < ceil_size) protects against the
11449: 		 * combination of maximal alignment and ceil_size large enough
11449: 		 * to cause overflow.  This is similar to the first overflow
11449: 		 * check above, but it needs to be repeated due to the new
11449: 		 * ceil_size value, which may now be *equal* to maximal
11449: 		 * alignment, whereas before we only detected overflow if the
11449: 		 * original size was *greater* than maximal alignment.
11449: 		 */
11449: 		if (ceil_size < size || ceil_size + alignment < ceil_size) {
11449: 			/* size_t overflow. */
11449: 			return (NULL);
11449: 		}
11449: 
11449: 		/*
11449: 		 * Calculate the size of the over-size run that arena_palloc()
11449: 		 * would need to allocate in order to guarantee the alignment.
11449: 		 */
11449: 		if (ceil_size >= alignment)
11449: 			run_size = ceil_size + alignment - pagesize;
11449: 		else {
11449: 			/*
11449: 			 * It is possible that (alignment << 1) will cause
11449: 			 * overflow, but it doesn't matter because we also
11449: 			 * subtract pagesize, which in the case of overflow
11449: 			 * leaves us with a very large run_size.  That causes
11449: 			 * the first conditional below to fail, which means
11449: 			 * that the bogus run_size value never gets used for
11449: 			 * anything important.
11449: 			 */
11449: 			run_size = (alignment << 1) - pagesize;
11449: 		}
11449: 
11449: 		if (run_size <= arena_maxclass) {
11449: 			ret = arena_palloc(choose_arena(), alignment, ceil_size,
11449: 			    run_size);
11449: 		} else if (alignment <= chunksize)
11449: 			ret = huge_malloc(ceil_size, false);
11449: 		else
11449: 			ret = huge_palloc(alignment, ceil_size);
11449: 	}
11449: 
11449: 	assert(((uintptr_t)ret & (alignment - 1)) == 0);
11286: 	return (ret);
11286: }
11286: 
11286: /* Return the size of the allocation pointed to by ptr. */
11286: static size_t
11286: arena_salloc(const void *ptr)
11286: {
11286: 	size_t ret;
11286: 	arena_chunk_t *chunk;
16218: 	size_t pageind, mapbits;
11286: 
11286: 	assert(ptr != NULL);
11286: 	assert(CHUNK_ADDR2BASE(ptr) != ptr);
11286: 
11286: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ptr);
11286: 	pageind = (((uintptr_t)ptr - (uintptr_t)chunk) >> pagesize_2pow);
16218: 	mapbits = chunk->map[pageind].bits;
16218: 	assert((mapbits & CHUNK_MAP_ALLOCATED) != 0);
16218: 	if ((mapbits & CHUNK_MAP_LARGE) == 0) {
16218: 		arena_run_t *run = (arena_run_t *)(mapbits & ~pagesize_mask);
11286: 		assert(run->magic == ARENA_RUN_MAGIC);
11286: 		ret = run->bin->reg_size;
11449: 	} else {
16218: 		ret = mapbits & ~pagesize_mask;
16218: 		assert(ret != 0);
11449: 	}
11449: 
11449: 	return (ret);
11449: }
11449: 
14259: #if (defined(MALLOC_VALIDATE) || defined(MOZ_MEMORY_DARWIN))
14259: /*
14259:  * Validate ptr before assuming that it points to an allocation.  Currently,
14259:  * the following validation is performed:
14259:  *
14259:  * + Check that ptr is not NULL.
14259:  *
14259:  * + Check that ptr lies within a mapped chunk.
14259:  */
14259: static inline size_t
14259: isalloc_validate(const void *ptr)
14259: {
14259: 	arena_chunk_t *chunk;
14259: 
16218: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ptr);
16218: 	if (chunk == NULL)
14259: 		return (0);
14259: 
16218: 	if (malloc_rtree_get(chunk_rtree, (uintptr_t)chunk) == NULL)
16218: 		return (0);
16218: 
14259: 	if (chunk != ptr) {
16218: 		assert(chunk->arena->magic == ARENA_MAGIC);
14259: 		return (arena_salloc(ptr));
14259: 	} else {
14259: 		size_t ret;
14259: 		extent_node_t *node;
14259: 		extent_node_t key;
14259: 
14259: 		/* Chunk. */
14259: 		key.addr = (void *)chunk;
14259: 		malloc_mutex_lock(&huge_mtx);
15460: 		node = extent_tree_ad_search(&huge, &key);
14259: 		if (node != NULL)
14259: 			ret = node->size;
14259: 		else
14259: 			ret = 0;
14259: 		malloc_mutex_unlock(&huge_mtx);
14259: 		return (ret);
14259: 	}
14259: }
14259: #endif
14259: 
11449: static inline size_t
11449: isalloc(const void *ptr)
11449: {
11449: 	size_t ret;
11449: 	arena_chunk_t *chunk;
11449: 
11449: 	assert(ptr != NULL);
11449: 
11449: 	chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ptr);
11449: 	if (chunk != ptr) {
11449: 		/* Region. */
11449: 		assert(chunk->arena->magic == ARENA_MAGIC);
11449: 
11449: 		ret = arena_salloc(ptr);
11449: 	} else {
11449: 		extent_node_t *node, key;
11449: 
11449: 		/* Chunk (huge allocation). */
11449: 
11449: 		malloc_mutex_lock(&huge_mtx);
11449: 
11449: 		/* Extract from tree of huge allocations. */
11449: 		key.addr = __DECONST(void *, ptr);
15460: 		node = extent_tree_ad_search(&huge, &key);
11449: 		assert(node != NULL);
11449: 
11449: 		ret = node->size;
11449: 
11449: 		malloc_mutex_unlock(&huge_mtx);
11449: 	}
11449: 
11449: 	return (ret);
11449: }
11449: 
11449: static inline void
11449: arena_dalloc_small(arena_t *arena, arena_chunk_t *chunk, void *ptr,
16218:     arena_chunk_map_t *mapelm)
11449: {
11449: 	arena_run_t *run;
11449: 	arena_bin_t *bin;
11449: 	size_t size;
11449: 
16218: 	run = (arena_run_t *)(mapelm->bits & ~pagesize_mask);
11449: 	assert(run->magic == ARENA_RUN_MAGIC);
11449: 	bin = run->bin;
11449: 	size = bin->reg_size;
11449: 
11449: #ifdef MALLOC_FILL
11449: 	if (opt_junk)
11449: 		memset(ptr, 0x5a, size);
11449: #endif
11449: 
11449: 	arena_run_reg_dalloc(run, bin, ptr, size);
11449: 	run->nfree++;
11449: 
11449: 	if (run->nfree == bin->nregs) {
11449: 		/* Deallocate run. */
11449: 		if (run == bin->runcur)
11449: 			bin->runcur = NULL;
11449: 		else if (bin->nregs != 1) {
16218: 			size_t run_pageind = (((uintptr_t)run -
16218: 			    (uintptr_t)chunk)) >> pagesize_2pow;
16218: 			arena_chunk_map_t *run_mapelm =
16218: 			    &chunk->map[run_pageind];
11449: 			/*
11449: 			 * This block's conditional is necessary because if the
11449: 			 * run only contains one region, then it never gets
11449: 			 * inserted into the non-full runs tree.
11449: 			 */
16218: 			assert(arena_run_tree_search(&bin->runs, run_mapelm) ==
16218: 			    run_mapelm);
16218: 			arena_run_tree_remove(&bin->runs, run_mapelm);
11449: 		}
11449: #ifdef MALLOC_DEBUG
11449: 		run->magic = 0;
11449: #endif
14033: 		VALGRIND_FREELIKE_BLOCK(run, 0);
11449: 		arena_run_dalloc(arena, run, true);
11449: #ifdef MALLOC_STATS
11449: 		bin->stats.curruns--;
11449: #endif
11449: 	} else if (run->nfree == 1 && run != bin->runcur) {
11449: 		/*
11449: 		 * Make sure that bin->runcur always refers to the lowest
11449: 		 * non-full run, if one exists.
11449: 		 */
11449: 		if (bin->runcur == NULL)
11449: 			bin->runcur = run;
11449: 		else if ((uintptr_t)run < (uintptr_t)bin->runcur) {
11449: 			/* Switch runcur. */
11449: 			if (bin->runcur->nfree > 0) {
16218: 				arena_chunk_t *runcur_chunk =
26488: 				    (arena_chunk_t*)CHUNK_ADDR2BASE(bin->runcur);
16218: 				size_t runcur_pageind =
16218: 				    (((uintptr_t)bin->runcur -
16218: 				    (uintptr_t)runcur_chunk)) >> pagesize_2pow;
16218: 				arena_chunk_map_t *runcur_mapelm =
16218: 				    &runcur_chunk->map[runcur_pageind];
16218: 
11449: 				/* Insert runcur. */
15610: 				assert(arena_run_tree_search(&bin->runs,
16218: 				    runcur_mapelm) == NULL);
16218: 				arena_run_tree_insert(&bin->runs,
16218: 				    runcur_mapelm);
11449: 			}
11449: 			bin->runcur = run;
15610: 		} else {
16218: 			size_t run_pageind = (((uintptr_t)run -
16218: 			    (uintptr_t)chunk)) >> pagesize_2pow;
16218: 			arena_chunk_map_t *run_mapelm =
16218: 			    &chunk->map[run_pageind];
16218: 
16218: 			assert(arena_run_tree_search(&bin->runs, run_mapelm) ==
16218: 			    NULL);
16218: 			arena_run_tree_insert(&bin->runs, run_mapelm);
11449: 		}
15610: 	}
11449: #ifdef MALLOC_STATS
11449: 	arena->stats.allocated_small -= size;
11449: 	arena->stats.ndalloc_small++;
11449: #endif
11449: }
11449: 
11449: static void
11449: arena_dalloc_large(arena_t *arena, arena_chunk_t *chunk, void *ptr)
11449: {
11449: 	/* Large allocation. */
11449: 	malloc_spin_lock(&arena->lock);
11449: 
11449: #ifdef MALLOC_FILL
11449: #ifndef MALLOC_STATS
11449: 	if (opt_junk)
11449: #endif
11449: #endif
11449: 	{
16218: 		size_t pageind = ((uintptr_t)ptr - (uintptr_t)chunk) >>
16218: 		    pagesize_2pow;
16218: 		size_t size = chunk->map[pageind].bits & ~pagesize_mask;
16218: 
11449: #ifdef MALLOC_FILL
11449: #ifdef MALLOC_STATS
11449: 		if (opt_junk)
11449: #endif
11449: 			memset(ptr, 0x5a, size);
11449: #endif
11449: #ifdef MALLOC_STATS
11449: 		arena->stats.allocated_large -= size;
11449: #endif
11449: 	}
11449: #ifdef MALLOC_STATS
11449: 	arena->stats.ndalloc_large++;
11449: #endif
11449: 
11449: 	arena_run_dalloc(arena, (arena_run_t *)ptr, true);
11449: 	malloc_spin_unlock(&arena->lock);
11449: }
11449: 
11449: static inline void
47438: arena_dalloc(void *ptr, size_t offset)
11449: {
47438: 	arena_chunk_t *chunk;
47438: 	arena_t *arena;
11449: 	size_t pageind;
11449: 	arena_chunk_map_t *mapelm;
11449: 
47438: 	assert(ptr != NULL);
47438: 	assert(offset != 0);
47438: 	assert(CHUNK_ADDR2OFFSET(ptr) == offset);
47438: 
47438: 	chunk = (arena_chunk_t *) ((uintptr_t)ptr - offset);
47438: 	arena = chunk->arena;
11449: 	assert(arena != NULL);
11449: 	assert(arena->magic == ARENA_MAGIC);
47438: 
47438: 	pageind = offset >> pagesize_2pow;
11449: 	mapelm = &chunk->map[pageind];
16218: 	assert((mapelm->bits & CHUNK_MAP_ALLOCATED) != 0);
16218: 	if ((mapelm->bits & CHUNK_MAP_LARGE) == 0) {
11449: 		/* Small allocation. */
11449: 		malloc_spin_lock(&arena->lock);
16218: 		arena_dalloc_small(arena, chunk, ptr, mapelm);
11449: 		malloc_spin_unlock(&arena->lock);
16218: 	} else
11449: 		arena_dalloc_large(arena, chunk, ptr);
14033: 	VALGRIND_FREELIKE_BLOCK(ptr, 0);
11449: }
11449: 
11449: static inline void
11449: idalloc(void *ptr)
11286: {
47438: 	size_t offset;
11449: 
11449: 	assert(ptr != NULL);
11286: 
47438: 	offset = CHUNK_ADDR2OFFSET(ptr);
47438: 	if (offset != 0)
47438: 		arena_dalloc(ptr, offset);
11449: 	else
11449: 		huge_dalloc(ptr);
11449: }
11449: 
11449: static void
11773: arena_ralloc_large_shrink(arena_t *arena, arena_chunk_t *chunk, void *ptr,
11449:     size_t size, size_t oldsize)
11449: {
11449: 
11449: 	assert(size < oldsize);
11449: 
11286: 	/*
11286: 	 * Shrink the run, and make trailing pages available for other
11286: 	 * allocations.
11286: 	 */
11286: #ifdef MALLOC_BALANCE
11286: 	arena_lock_balance(arena);
11286: #else
11286: 	malloc_spin_lock(&arena->lock);
11286: #endif
16218: 	arena_run_trim_tail(arena, chunk, (arena_run_t *)ptr, oldsize, size,
16218: 	    true);
11286: #ifdef MALLOC_STATS
11286: 	arena->stats.allocated_large -= oldsize - size;
11286: #endif
11286: 	malloc_spin_unlock(&arena->lock);
11449: }
11449: 
11449: static bool
11773: arena_ralloc_large_grow(arena_t *arena, arena_chunk_t *chunk, void *ptr,
11449:     size_t size, size_t oldsize)
11449: {
16218: 	size_t pageind = ((uintptr_t)ptr - (uintptr_t)chunk) >> pagesize_2pow;
16218: 	size_t npages = oldsize >> pagesize_2pow;
16218: 
16218: 	assert(oldsize == (chunk->map[pageind].bits & ~pagesize_mask));
11286: 
11286: 	/* Try to extend the run. */
11286: 	assert(size > oldsize);
11286: #ifdef MALLOC_BALANCE
11286: 	arena_lock_balance(arena);
11286: #else
11286: 	malloc_spin_lock(&arena->lock);
11286: #endif
16218: 	if (pageind + npages < chunk_npages && (chunk->map[pageind+npages].bits
16218: 	    & CHUNK_MAP_ALLOCATED) == 0 && (chunk->map[pageind+npages].bits &
16218: 	    ~pagesize_mask) >= size - oldsize) {
11449: 		/*
11449: 		 * The next run is available and sufficiently large.  Split the
11449: 		 * following run, then merge the first part with the existing
16218: 		 * allocation.
16218: 		 */
16218: 		arena_run_split(arena, (arena_run_t *)((uintptr_t)chunk +
16218: 		    ((pageind+npages) << pagesize_2pow)), size - oldsize, true,
16218: 		    false);
16218: 
16218: 		chunk->map[pageind].bits = size | CHUNK_MAP_LARGE |
16218: 		    CHUNK_MAP_ALLOCATED;
16218: 		chunk->map[pageind+npages].bits = CHUNK_MAP_LARGE |
16218: 		    CHUNK_MAP_ALLOCATED;
11449: 
11286: #ifdef MALLOC_STATS
11286: 		arena->stats.allocated_large += size - oldsize;
11286: #endif
11286: 		malloc_spin_unlock(&arena->lock);
11286: 		return (false);
11286: 	}
11286: 	malloc_spin_unlock(&arena->lock);
11286: 
11286: 	return (true);
11286: }
11286: 
11449: /*
11449:  * Try to resize a large allocation, in order to avoid copying.  This will
11449:  * always fail if growing an object, and the following run is already in use.
11449:  */
11449: static bool
11773: arena_ralloc_large(void *ptr, size_t size, size_t oldsize)
11449: {
11773: 	size_t psize;
11773: 
11773: 	psize = PAGE_CEILING(size);
11773: 	if (psize == oldsize) {
11773: 		/* Same size class. */
11773: #ifdef MALLOC_FILL
11773: 		if (opt_junk && size < oldsize) {
11773: 			memset((void *)((uintptr_t)ptr + size), 0x5a, oldsize -
11773: 			    size);
11773: 		}
11773: #endif
11773: 		return (false);
11773: 	} else {
11449: 		arena_chunk_t *chunk;
11449: 		arena_t *arena;
11449: 
11449: 		chunk = (arena_chunk_t *)CHUNK_ADDR2BASE(ptr);
11449: 		arena = chunk->arena;
11449: 		assert(arena->magic == ARENA_MAGIC);
11449: 
11773: 		if (psize < oldsize) {
11773: #ifdef MALLOC_FILL
11773: 			/* Fill before shrinking in order avoid a race. */
11773: 			if (opt_junk) {
11773: 				memset((void *)((uintptr_t)ptr + size), 0x5a,
11773: 				    oldsize - size);
11773: 			}
11773: #endif
11773: 			arena_ralloc_large_shrink(arena, chunk, ptr, psize,
11773: 			    oldsize);
11449: 			return (false);
11449: 		} else {
11773: 			bool ret = arena_ralloc_large_grow(arena, chunk, ptr,
11773: 			    psize, oldsize);
11773: #ifdef MALLOC_FILL
11773: 			if (ret == false && opt_zero) {
11773: 				memset((void *)((uintptr_t)ptr + oldsize), 0,
11773: 				    size - oldsize);
11773: 			}
11773: #endif
11773: 			return (ret);
11773: 		}
11449: 	}
11449: }
11449: 
11286: static void *
11286: arena_ralloc(void *ptr, size_t size, size_t oldsize)
11286: {
11286: 	void *ret;
11449: 	size_t copysize;
11286: 
11286: 	/* Try to avoid moving the allocation. */
11286: 	if (size < small_min) {
11286: 		if (oldsize < small_min &&
11286: 		    ffs((int)(pow2_ceil(size) >> (TINY_MIN_2POW + 1)))
11286: 		    == ffs((int)(pow2_ceil(oldsize) >> (TINY_MIN_2POW + 1))))
11286: 			goto IN_PLACE; /* Same size class. */
11286: 	} else if (size <= small_max) {
11286: 		if (oldsize >= small_min && oldsize <= small_max &&
11286: 		    (QUANTUM_CEILING(size) >> opt_quantum_2pow)
11286: 		    == (QUANTUM_CEILING(oldsize) >> opt_quantum_2pow))
11286: 			goto IN_PLACE; /* Same size class. */
11286: 	} else if (size <= bin_maxclass) {
11286: 		if (oldsize > small_max && oldsize <= bin_maxclass &&
11286: 		    pow2_ceil(size) == pow2_ceil(oldsize))
11286: 			goto IN_PLACE; /* Same size class. */
11286: 	} else if (oldsize > bin_maxclass && oldsize <= arena_maxclass) {
11286: 		assert(size > bin_maxclass);
11773: 		if (arena_ralloc_large(ptr, size, oldsize) == false)
11773: 			return (ptr);
11286: 	}
11286: 
11286: 	/*
11286: 	 * If we get here, then size and oldsize are different enough that we
11286: 	 * need to move the object.  In that case, fall back to allocating new
11286: 	 * space and copying.
11286: 	 */
11286: 	ret = arena_malloc(choose_arena(), size, false);
11286: 	if (ret == NULL)
11286: 		return (NULL);
11286: 
11286: 	/* Junk/zero-filling were already done by arena_malloc(). */
11449: 	copysize = (size < oldsize) ? size : oldsize;
11449: #ifdef VM_COPY_MIN
11449: 	if (copysize >= VM_COPY_MIN)
11449: 		pages_copy(ret, ptr, copysize);
11286: 	else
11449: #endif
11449: 		memcpy(ret, ptr, copysize);
11286: 	idalloc(ptr);
11286: 	return (ret);
11286: IN_PLACE:
11449: #ifdef MALLOC_FILL
11286: 	if (opt_junk && size < oldsize)
11286: 		memset((void *)((uintptr_t)ptr + size), 0x5a, oldsize - size);
11286: 	else if (opt_zero && size > oldsize)
11286: 		memset((void *)((uintptr_t)ptr + oldsize), 0, size - oldsize);
11449: #endif
11286: 	return (ptr);
11286: }
11286: 
11449: static inline void *
11449: iralloc(void *ptr, size_t size)
11286: {
11449: 	size_t oldsize;
11449: 
11286: 	assert(ptr != NULL);
11449: 	assert(size != 0);
11449: 
11449: 	oldsize = isalloc(ptr);
11449: 
14033: #ifndef MALLOC_VALGRIND
11449: 	if (size <= arena_maxclass)
11449: 		return (arena_ralloc(ptr, size, oldsize));
11449: 	else
11449: 		return (huge_ralloc(ptr, size, oldsize));
14033: #else
14033: 	/*
14033: 	 * Valgrind does not provide a public interface for modifying an
14033: 	 * existing allocation, so use malloc/memcpy/free instead.
14033: 	 */
14033: 	{
14033: 		void *ret = imalloc(size);
14033: 		if (ret != NULL) {
14033: 			if (oldsize < size)
14033: 			    memcpy(ret, ptr, oldsize);
14033: 			else
14033: 			    memcpy(ret, ptr, size);
14033: 			idalloc(ptr);
14033: 		}
14033: 		return (ret);
14033: 	}
14033: #endif
11286: }
11286: 
11286: static bool
11286: arena_new(arena_t *arena)
11286: {
11286: 	unsigned i;
11286: 	arena_bin_t *bin;
11286: 	size_t pow2_size, prev_run_size;
11286: 
11286: 	if (malloc_spin_init(&arena->lock))
11286: 		return (true);
11286: 
11286: #ifdef MALLOC_STATS
11286: 	memset(&arena->stats, 0, sizeof(arena_stats_t));
11286: #endif
11286: 
11286: 	/* Initialize chunks. */
15461: 	arena_chunk_tree_dirty_new(&arena->chunks_dirty);
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 	LinkedList_Init(&arena->chunks_madvised);
80797: #endif
16218: 	arena->spare = NULL;
11286: 
11286: 	arena->ndirty = 0;
11286: 
16218: 	arena_avail_tree_new(&arena->runs_avail);
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 	arena->contention = 0;
11286: #endif
11286: 
11286: 	/* Initialize bins. */
11286: 	prev_run_size = pagesize;
11286: 
11286: 	/* (2^n)-spaced tiny bins. */
11286: 	for (i = 0; i < ntbins; i++) {
11286: 		bin = &arena->bins[i];
11286: 		bin->runcur = NULL;
15460: 		arena_run_tree_new(&bin->runs);
11286: 
11286: 		bin->reg_size = (1U << (TINY_MIN_2POW + i));
11286: 
11286: 		prev_run_size = arena_bin_run_size_calc(bin, prev_run_size);
11286: 
11286: #ifdef MALLOC_STATS
11286: 		memset(&bin->stats, 0, sizeof(malloc_bin_stats_t));
11286: #endif
11286: 	}
11286: 
11286: 	/* Quantum-spaced bins. */
11286: 	for (; i < ntbins + nqbins; i++) {
11286: 		bin = &arena->bins[i];
11286: 		bin->runcur = NULL;
15460: 		arena_run_tree_new(&bin->runs);
11286: 
11286: 		bin->reg_size = quantum * (i - ntbins + 1);
11286: 
11286: 		pow2_size = pow2_ceil(quantum * (i - ntbins + 1));
11286: 		prev_run_size = arena_bin_run_size_calc(bin, prev_run_size);
11286: 
11286: #ifdef MALLOC_STATS
11286: 		memset(&bin->stats, 0, sizeof(malloc_bin_stats_t));
11286: #endif
11286: 	}
11286: 
11286: 	/* (2^n)-spaced sub-page bins. */
11286: 	for (; i < ntbins + nqbins + nsbins; i++) {
11286: 		bin = &arena->bins[i];
11286: 		bin->runcur = NULL;
15460: 		arena_run_tree_new(&bin->runs);
11286: 
11286: 		bin->reg_size = (small_max << (i - (ntbins + nqbins) + 1));
11286: 
11286: 		prev_run_size = arena_bin_run_size_calc(bin, prev_run_size);
11286: 
11286: #ifdef MALLOC_STATS
11286: 		memset(&bin->stats, 0, sizeof(malloc_bin_stats_t));
11286: #endif
11286: 	}
11286: 
11286: #ifdef MALLOC_DEBUG
11286: 	arena->magic = ARENA_MAGIC;
11286: #endif
11286: 
11286: 	return (false);
11286: }
11286: 
11286: /* Create a new arena and insert it into the arenas array at index ind. */
11286: static arena_t *
11286: arenas_extend(unsigned ind)
11286: {
11286: 	arena_t *ret;
11286: 
11286: 	/* Allocate enough space for trailing bins. */
11286: 	ret = (arena_t *)base_alloc(sizeof(arena_t)
11286: 	    + (sizeof(arena_bin_t) * (ntbins + nqbins + nsbins - 1)));
11286: 	if (ret != NULL && arena_new(ret) == false) {
11286: 		arenas[ind] = ret;
11286: 		return (ret);
11286: 	}
11286: 	/* Only reached if there is an OOM error. */
11286: 
11286: 	/*
11286: 	 * OOM here is quite inconvenient to propagate, since dealing with it
11286: 	 * would require a check for failure in the fast path.  Instead, punt
11286: 	 * by using arenas[0].  In practice, this is an extremely unlikely
11286: 	 * failure.
11286: 	 */
11286: 	_malloc_message(_getprogname(),
11286: 	    ": (malloc) Error initializing arena\n", "", "");
11286: 	if (opt_abort)
11286: 		abort();
11286: 
11286: 	return (arenas[0]);
11286: }
11286: 
11286: /*
11286:  * End arena.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin general internal functions.
11286:  */
11286: 
11286: static void *
11286: huge_malloc(size_t size, bool zero)
11286: {
11286: 	void *ret;
11286: 	size_t csize;
13110: 	size_t psize;
11286: 	extent_node_t *node;
11286: 
11286: 	/* Allocate one or more contiguous chunks for this request. */
11286: 
11286: 	csize = CHUNK_CEILING(size);
11286: 	if (csize == 0) {
11286: 		/* size is large enough to cause size_t wrap-around. */
11286: 		return (NULL);
11286: 	}
11286: 
11449: 	/* Allocate an extent node with which to track the chunk. */
11286: 	node = base_node_alloc();
11286: 	if (node == NULL)
11286: 		return (NULL);
11286: 
15610: 	ret = chunk_alloc(csize, zero, true);
11286: 	if (ret == NULL) {
11286: 		base_node_dealloc(node);
11286: 		return (NULL);
11286: 	}
11286: 
11286: 	/* Insert node into huge. */
11286: 	node->addr = ret;
13110: 	psize = PAGE_CEILING(size);
13110: 	node->size = psize;
11286: 
11286: 	malloc_mutex_lock(&huge_mtx);
15460: 	extent_tree_ad_insert(&huge, node);
11286: #ifdef MALLOC_STATS
11286: 	huge_nmalloc++;
80152: 
80152:         /* Although we allocated space for csize bytes, we indicate that we've
80152:          * allocated only psize bytes.
80152:          *
80152:          * If DECOMMIT is defined, this is a reasonable thing to do, since
80152:          * we'll explicitly decommit the bytes in excess of psize.
80152:          *
80152:          * If DECOMMIT is not defined, then we're relying on the OS to be lazy
80152:          * about how it allocates physical pages to mappings.  If we never
80152:          * touch the pages in excess of psize, the OS won't allocate a physical
80152:          * page, and we won't use more than psize bytes of physical memory.
80152:          *
80152:          * A correct program will only touch memory in excess of how much it
80152:          * requested if it first calls malloc_usable_size and finds out how
80152:          * much space it has to play with.  But because we set node->size =
80152:          * psize above, malloc_usable_size will return psize, not csize, and
80152:          * the program will (hopefully) never touch bytes in excess of psize.
80152:          * Thus those bytes won't take up space in physical memory, and we can
80152:          * reasonably claim we never "allocated" them in the first place. */
13110: 	huge_allocated += psize;
13110: #endif
11286: 	malloc_mutex_unlock(&huge_mtx);
11286: 
13110: #ifdef MALLOC_DECOMMIT
13110: 	if (csize - psize > 0)
13110: 		pages_decommit((void *)((uintptr_t)ret + psize), csize - psize);
13110: #endif
13110: 
14033: #ifdef MALLOC_DECOMMIT
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, psize, 0, zero);
14033: #else
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, csize, 0, zero);
14033: #endif
14033: 
11449: #ifdef MALLOC_FILL
11286: 	if (zero == false) {
11286: 		if (opt_junk)
13110: #  ifdef MALLOC_DECOMMIT
13110: 			memset(ret, 0xa5, psize);
13110: #  else
11286: 			memset(ret, 0xa5, csize);
13110: #  endif
11286: 		else if (opt_zero)
13110: #  ifdef MALLOC_DECOMMIT
13110: 			memset(ret, 0, psize);
13110: #  else
11286: 			memset(ret, 0, csize);
13110: #  endif
11286: 	}
11449: #endif
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: /* Only handles large allocations that require more than chunk alignment. */
11286: static void *
11286: huge_palloc(size_t alignment, size_t size)
11286: {
11286: 	void *ret;
11286: 	size_t alloc_size, chunk_size, offset;
13110: 	size_t psize;
11286: 	extent_node_t *node;
15610: 	int pfd;
11286: 
11286: 	/*
11286: 	 * This allocation requires alignment that is even larger than chunk
11286: 	 * alignment.  This means that huge_malloc() isn't good enough.
11286: 	 *
11286: 	 * Allocate almost twice as many chunks as are demanded by the size or
11286: 	 * alignment, in order to assure the alignment can be achieved, then
11286: 	 * unmap leading and trailing chunks.
11286: 	 */
11286: 	assert(alignment >= chunksize);
11286: 
11286: 	chunk_size = CHUNK_CEILING(size);
11286: 
11286: 	if (size >= alignment)
11286: 		alloc_size = chunk_size + alignment - chunksize;
11286: 	else
11286: 		alloc_size = (alignment << 1) - chunksize;
11286: 
11449: 	/* Allocate an extent node with which to track the chunk. */
11286: 	node = base_node_alloc();
11286: 	if (node == NULL)
11286: 		return (NULL);
11286: 
13110: 	/*
13110: 	 * Windows requires that there be a 1:1 mapping between VM
13110: 	 * allocation/deallocation operations.  Therefore, take care here to
13110: 	 * acquire the final result via one mapping operation.
15610: 	 *
15610: 	 * The MALLOC_PAGEFILE code also benefits from this mapping algorithm,
15610: 	 * since it reduces the number of page files.
15610: 	 */
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (opt_pagefile) {
15610: 		pfd = pagefile_init(size);
15610: 		if (pfd == -1)
15610: 			return (NULL);
15610: 	} else
15610: #endif
15610: 		pfd = -1;
26771: #ifdef JEMALLOC_USES_MAP_ALIGN
26771: 		ret = pages_map_align(chunk_size, pfd, alignment);
26771: #else
13110: 	do {
13110: 		void *over;
13110: 
15610: 		over = chunk_alloc(alloc_size, false, false);
13110: 		if (over == NULL) {
13110: 			base_node_dealloc(node);
15610: 			ret = NULL;
15610: 			goto RETURN;
13110: 		}
13110: 
13110: 		offset = (uintptr_t)over & (alignment - 1);
13110: 		assert((offset & chunksize_mask) == 0);
13110: 		assert(offset < alloc_size);
13110: 		ret = (void *)((uintptr_t)over + offset);
13110: 		chunk_dealloc(over, alloc_size);
15610: 		ret = pages_map(ret, chunk_size, pfd);
13110: 		/*
13110: 		 * Failure here indicates a race with another thread, so try
13110: 		 * again.
13110: 		 */
13110: 	} while (ret == NULL);
26488: #endif
11286: 	/* Insert node into huge. */
11286: 	node->addr = ret;
13110: 	psize = PAGE_CEILING(size);
13110: 	node->size = psize;
11286: 
11286: 	malloc_mutex_lock(&huge_mtx);
15460: 	extent_tree_ad_insert(&huge, node);
11286: #ifdef MALLOC_STATS
11286: 	huge_nmalloc++;
80152:         /* See note in huge_alloc() for why huge_allocated += psize is correct
80152:          * here even when DECOMMIT is not defined. */
13110: 	huge_allocated += psize;
13110: #endif
11286: 	malloc_mutex_unlock(&huge_mtx);
11286: 
13110: #ifdef MALLOC_DECOMMIT
13110: 	if (chunk_size - psize > 0) {
13110: 		pages_decommit((void *)((uintptr_t)ret + psize),
13110: 		    chunk_size - psize);
13110: 	}
13110: #endif
13110: 
14033: #ifdef MALLOC_DECOMMIT
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, psize, 0, false);
14033: #else
14033: 	VALGRIND_MALLOCLIKE_BLOCK(ret, chunk_size, 0, false);
14033: #endif
14033: 
11449: #ifdef MALLOC_FILL
11286: 	if (opt_junk)
13110: #  ifdef MALLOC_DECOMMIT
13110: 		memset(ret, 0xa5, psize);
13110: #  else
11286: 		memset(ret, 0xa5, chunk_size);
13110: #  endif
11286: 	else if (opt_zero)
13110: #  ifdef MALLOC_DECOMMIT
13110: 		memset(ret, 0, psize);
13110: #  else
11286: 		memset(ret, 0, chunk_size);
11449: #  endif
13110: #endif
11286: 
15610: RETURN:
15610: #ifdef MALLOC_PAGEFILE
15610: 	if (pfd != -1)
15610: 		pagefile_close(pfd);
15610: #endif
11286: 	return (ret);
11286: }
11286: 
11286: static void *
11286: huge_ralloc(void *ptr, size_t size, size_t oldsize)
11286: {
11286: 	void *ret;
11449: 	size_t copysize;
11286: 
11286: 	/* Avoid moving the allocation if the size class would not change. */
13110: 
11286: 	if (oldsize > arena_maxclass &&
11286: 	    CHUNK_CEILING(size) == CHUNK_CEILING(oldsize)) {
13110: 		size_t psize = PAGE_CEILING(size);
11449: #ifdef MALLOC_FILL
11286: 		if (opt_junk && size < oldsize) {
11286: 			memset((void *)((uintptr_t)ptr + size), 0x5a, oldsize
11286: 			    - size);
13110: 		}
13110: #endif
13110: #ifdef MALLOC_DECOMMIT
13110: 		if (psize < oldsize) {
13110: 			extent_node_t *node, key;
13110: 
13110: 			pages_decommit((void *)((uintptr_t)ptr + psize),
13110: 			    oldsize - psize);
13110: 
13110: 			/* Update recorded size. */
13110: 			malloc_mutex_lock(&huge_mtx);
13110: 			key.addr = __DECONST(void *, ptr);
15460: 			node = extent_tree_ad_search(&huge, &key);
13110: 			assert(node != NULL);
13110: 			assert(node->size == oldsize);
13110: #  ifdef MALLOC_STATS
13110: 			huge_allocated -= oldsize - psize;
13110: #  endif
13110: 			node->size = psize;
13110: 			malloc_mutex_unlock(&huge_mtx);
13110: 		} else if (psize > oldsize) {
13110: 			pages_commit((void *)((uintptr_t)ptr + oldsize),
13110: 			    psize - oldsize);
80152:                 }
80152: #endif
80152: 
80152:                 /* Although we don't have to commit or decommit anything if
80152:                  * DECOMMIT is not defined and the size class didn't change, we
80152:                  * do need to update the recorded size if the size increased,
80152:                  * so malloc_usable_size doesn't return a value smaller than
80152:                  * what was requested via realloc(). */
80152: 
80152:                 if (psize > oldsize) {
13110:                         /* Update recorded size. */
80152:                         extent_node_t *node, key;
13110:                         malloc_mutex_lock(&huge_mtx);
13110:                         key.addr = __DECONST(void *, ptr);
15460:                         node = extent_tree_ad_search(&huge, &key);
13110:                         assert(node != NULL);
13110:                         assert(node->size == oldsize);
13110: #  ifdef MALLOC_STATS
13110:                         huge_allocated += psize - oldsize;
13110: #  endif
13110:                         node->size = psize;
13110:                         malloc_mutex_unlock(&huge_mtx);
13110:                 }
80152: 
13110: #ifdef MALLOC_FILL
13110: 		if (opt_zero && size > oldsize) {
11286: 			memset((void *)((uintptr_t)ptr + oldsize), 0, size
11286: 			    - oldsize);
11286: 		}
11449: #endif
11286: 		return (ptr);
11286: 	}
11286: 
11286: 	/*
11286: 	 * If we get here, then size and oldsize are different enough that we
11286: 	 * need to use a different size class.  In that case, fall back to
11286: 	 * allocating new space and copying.
11286: 	 */
11286: 	ret = huge_malloc(size, false);
11286: 	if (ret == NULL)
11286: 		return (NULL);
11286: 
11449: 	copysize = (size < oldsize) ? size : oldsize;
11449: #ifdef VM_COPY_MIN
11449: 	if (copysize >= VM_COPY_MIN)
11449: 		pages_copy(ret, ptr, copysize);
11286: 	else
11449: #endif
11449: 		memcpy(ret, ptr, copysize);
11286: 	idalloc(ptr);
11286: 	return (ret);
11286: }
11286: 
11286: static void
11286: huge_dalloc(void *ptr)
11286: {
11286: 	extent_node_t *node, key;
11286: 
11286: 	malloc_mutex_lock(&huge_mtx);
11286: 
11286: 	/* Extract from tree of huge allocations. */
11286: 	key.addr = ptr;
15460: 	node = extent_tree_ad_search(&huge, &key);
11286: 	assert(node != NULL);
11286: 	assert(node->addr == ptr);
15460: 	extent_tree_ad_remove(&huge, node);
11286: 
11286: #ifdef MALLOC_STATS
11286: 	huge_ndalloc++;
11286: 	huge_allocated -= node->size;
11286: #endif
11286: 
11286: 	malloc_mutex_unlock(&huge_mtx);
11286: 
11286: 	/* Unmap chunk. */
11449: #ifdef MALLOC_FILL
15610: 	if (opt_junk)
11286: 		memset(node->addr, 0x5a, node->size);
11286: #endif
13110: 	chunk_dealloc(node->addr, CHUNK_CEILING(node->size));
14033: 	VALGRIND_FREELIKE_BLOCK(node->addr, 0);
11286: 
11286: 	base_node_dealloc(node);
11286: }
11286: 
50840: #ifndef MOZ_MEMORY_NARENAS_DEFAULT_ONE
11286: #ifdef MOZ_MEMORY_BSD
11286: static inline unsigned
11286: malloc_ncpus(void)
11286: {
11286: 	unsigned ret;
11286: 	int mib[2];
11286: 	size_t len;
11286: 
11286: 	mib[0] = CTL_HW;
11286: 	mib[1] = HW_NCPU;
11286: 	len = sizeof(ret);
11286: 	if (sysctl(mib, 2, &ret, &len, (void *) 0, 0) == -1) {
11286: 		/* Error. */
11286: 		return (1);
11286: 	}
11286: 
11286: 	return (ret);
11286: }
11286: #elif (defined(MOZ_MEMORY_LINUX))
11286: #include <fcntl.h>
11286: 
11286: static inline unsigned
11286: malloc_ncpus(void)
11286: {
11286: 	unsigned ret;
11286: 	int fd, nread, column;
21856: 	char buf[1024];
11286: 	static const char matchstr[] = "processor\t:";
21856: 	int i;
11286: 
11286: 	/*
11286: 	 * sysconf(3) would be the preferred method for determining the number
11286: 	 * of CPUs, but it uses malloc internally, which causes untennable
11286: 	 * recursion during malloc initialization.
11286: 	 */
11286: 	fd = open("/proc/cpuinfo", O_RDONLY);
11286: 	if (fd == -1)
11286: 		return (1); /* Error. */
11286: 	/*
11286: 	 * Count the number of occurrences of matchstr at the beginnings of
11286: 	 * lines.  This treats hyperthreaded CPUs as multiple processors.
11286: 	 */
11286: 	column = 0;
11286: 	ret = 0;
11286: 	while (true) {
11286: 		nread = read(fd, &buf, sizeof(buf));
11286: 		if (nread <= 0)
11286: 			break; /* EOF or error. */
21856: 		for (i = 0;i < nread;i++) {
21856: 			char c = buf[i];
21856: 			if (c == '\n')
11286: 				column = 0;
11286: 			else if (column != -1) {
21856: 				if (c == matchstr[column]) {
11286: 					column++;
11286: 					if (column == sizeof(matchstr) - 1) {
11286: 						column = -1;
11286: 						ret++;
11286: 					}
11286: 				} else
11286: 					column = -1;
11286: 			}
11286: 		}
21856: 	}
21856: 
11286: 	if (ret == 0)
11286: 		ret = 1; /* Something went wrong in the parser. */
11449: 	close(fd);
11286: 
11286: 	return (ret);
11286: }
11286: #elif (defined(MOZ_MEMORY_DARWIN))
11286: #include <mach/mach_init.h>
11286: #include <mach/mach_host.h>
11286: 
11286: static inline unsigned
11286: malloc_ncpus(void)
11286: {
11286: 	kern_return_t error;
11286: 	natural_t n;
11286: 	processor_info_array_t pinfo;
11286: 	mach_msg_type_number_t pinfocnt;
11286: 
11286: 	error = host_processor_info(mach_host_self(), PROCESSOR_BASIC_INFO,
11286: 				    &n, &pinfo, &pinfocnt);
11286: 	if (error != KERN_SUCCESS)
11286: 		return (1); /* Error. */
11286: 	else
11286: 		return (n);
11286: }
11286: #elif (defined(MOZ_MEMORY_SOLARIS))
11286: 
11286: static inline unsigned
11286: malloc_ncpus(void)
11286: {
14800: 	return sysconf(_SC_NPROCESSORS_ONLN);
11286: }
11286: #else
11286: static inline unsigned
11286: malloc_ncpus(void)
11286: {
11286: 
11286: 	/*
11286: 	 * We lack a way to determine the number of CPUs on this platform, so
11286: 	 * assume 1 CPU.
11286: 	 */
11286: 	return (1);
11286: }
11286: #endif
50840: #endif
11286: 
11286: static void
11286: malloc_print_stats(void)
11286: {
11286: 
11286: 	if (opt_print_stats) {
11286: 		char s[UMAX2S_BUFSIZE];
11286: 		_malloc_message("___ Begin malloc statistics ___\n", "", "",
11286: 		    "");
11286: 		_malloc_message("Assertions ",
11286: #ifdef NDEBUG
11286: 		    "disabled",
11286: #else
11286: 		    "enabled",
11286: #endif
11286: 		    "\n", "");
11286: 		_malloc_message("Boolean MALLOC_OPTIONS: ",
11286: 		    opt_abort ? "A" : "a", "", "");
11449: #ifdef MALLOC_FILL
11286: 		_malloc_message(opt_junk ? "J" : "j", "", "", "");
11449: #endif
15610: #ifdef MALLOC_PAGEFILE
15610: 		_malloc_message(opt_pagefile ? "o" : "O", "", "", "");
11286: #endif
11449: 		_malloc_message("P", "", "", "");
11449: #ifdef MALLOC_UTRACE
11449: 		_malloc_message(opt_utrace ? "U" : "u", "", "", "");
11449: #endif
11449: #ifdef MALLOC_SYSV
11449: 		_malloc_message(opt_sysv ? "V" : "v", "", "", "");
11449: #endif
11449: #ifdef MALLOC_XMALLOC
11449: 		_malloc_message(opt_xmalloc ? "X" : "x", "", "", "");
11449: #endif
11449: #ifdef MALLOC_FILL
11449: 		_malloc_message(opt_zero ? "Z" : "z", "", "", "");
11449: #endif
11449: 		_malloc_message("\n", "", "", "");
11286: 
50840: #ifndef MOZ_MEMORY_NARENAS_DEFAULT_ONE
73512: 		_malloc_message("CPUs: ", umax2s(ncpus, 10, s), "\n", "");
73512: #endif
73512: 		_malloc_message("Max arenas: ", umax2s(narenas, 10, s), "\n",
73512: 		    "");
11286: #ifdef MALLOC_BALANCE
11286: 		_malloc_message("Arena balance threshold: ",
73512: 		    umax2s(opt_balance_threshold, 10, s), "\n", "");
73512: #endif
73512: 		_malloc_message("Pointer size: ", umax2s(sizeof(void *), 10, s),
11286: 		    "\n", "");
73512: 		_malloc_message("Quantum size: ", umax2s(quantum, 10, s), "\n",
11286: 		    "");
73512: 		_malloc_message("Max small size: ", umax2s(small_max, 10, s),
73512: 		    "\n", "");
11449: 		_malloc_message("Max dirty pages per arena: ",
73512: 		    umax2s(opt_dirty_max, 10, s), "\n", "");
73512: 
73512: 		_malloc_message("Chunk size: ", umax2s(chunksize, 10, s), "",
73512: 		    "");
73512: 		_malloc_message(" (2^", umax2s(opt_chunk_2pow, 10, s), ")\n",
73512: 		    "");
11286: 
11286: #ifdef MALLOC_STATS
11286: 		{
11286: 			size_t allocated, mapped;
11286: #ifdef MALLOC_BALANCE
11286: 			uint64_t nbalance = 0;
11286: #endif
11286: 			unsigned i;
11286: 			arena_t *arena;
11286: 
11286: 			/* Calculate and print allocated/mapped stats. */
11286: 
11286: 			/* arenas. */
11286: 			for (i = 0, allocated = 0; i < narenas; i++) {
11286: 				if (arenas[i] != NULL) {
11286: 					malloc_spin_lock(&arenas[i]->lock);
11286: 					allocated +=
11286: 					    arenas[i]->stats.allocated_small;
11286: 					allocated +=
11286: 					    arenas[i]->stats.allocated_large;
11286: #ifdef MALLOC_BALANCE
11286: 					nbalance += arenas[i]->stats.nbalance;
11286: #endif
11286: 					malloc_spin_unlock(&arenas[i]->lock);
11286: 				}
11286: 			}
11286: 
11286: 			/* huge/base. */
11286: 			malloc_mutex_lock(&huge_mtx);
11286: 			allocated += huge_allocated;
11286: 			mapped = stats_chunks.curchunks * chunksize;
11286: 			malloc_mutex_unlock(&huge_mtx);
11286: 
11286: 			malloc_mutex_lock(&base_mtx);
11286: 			mapped += base_mapped;
11286: 			malloc_mutex_unlock(&base_mtx);
11286: 
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 			malloc_printf("Allocated: %lu, mapped: %lu\n",
11286: 			    allocated, mapped);
11286: #else
11286: 			malloc_printf("Allocated: %zu, mapped: %zu\n",
11286: 			    allocated, mapped);
11286: #endif
11286: 
11286: #ifdef MALLOC_BALANCE
11286: 			malloc_printf("Arena balance reassignments: %llu\n",
11286: 			    nbalance);
11286: #endif
11286: 
11286: 			/* Print chunk stats. */
11286: 			{
11286: 				chunk_stats_t chunks_stats;
11286: 
11286: 				malloc_mutex_lock(&huge_mtx);
11286: 				chunks_stats = stats_chunks;
11286: 				malloc_mutex_unlock(&huge_mtx);
11286: 
11286: 				malloc_printf("chunks: nchunks   "
11286: 				    "highchunks    curchunks\n");
11286: 				malloc_printf("  %13llu%13lu%13lu\n",
11286: 				    chunks_stats.nchunks,
11286: 				    chunks_stats.highchunks,
11286: 				    chunks_stats.curchunks);
11286: 			}
11286: 
11286: 			/* Print chunk stats. */
11286: 			malloc_printf(
11286: 			    "huge: nmalloc      ndalloc    allocated\n");
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 			malloc_printf(" %12llu %12llu %12lu\n",
11286: 			    huge_nmalloc, huge_ndalloc, huge_allocated);
11286: #else
11286: 			malloc_printf(" %12llu %12llu %12zu\n",
11286: 			    huge_nmalloc, huge_ndalloc, huge_allocated);
11286: #endif
11286: 			/* Print stats for each arena. */
11286: 			for (i = 0; i < narenas; i++) {
11286: 				arena = arenas[i];
11286: 				if (arena != NULL) {
11286: 					malloc_printf(
11286: 					    "\narenas[%u]:\n", i);
11286: 					malloc_spin_lock(&arena->lock);
11286: 					stats_print(arena);
11286: 					malloc_spin_unlock(&arena->lock);
11286: 				}
11286: 			}
11286: 		}
11286: #endif /* #ifdef MALLOC_STATS */
11286: 		_malloc_message("--- End malloc statistics ---\n", "", "", "");
11286: 	}
11286: }
11286: 
11286: /*
11286:  * FreeBSD's pthreads implementation calls malloc(3), so the malloc
11286:  * implementation has to take pains to avoid infinite recursion during
11286:  * initialization.
11286:  */
69458: #if (defined(MOZ_MEMORY_WINDOWS) || defined(MOZ_MEMORY_DARWIN))
11449: #define	malloc_init() false
11449: #else
11449: static inline bool
11286: malloc_init(void)
11286: {
11286: 
11286: 	if (malloc_initialized == false)
11286: 		return (malloc_init_hard());
11286: 
11286: 	return (false);
11286: }
11449: #endif
11449: 
69458: #if !defined(MOZ_MEMORY_WINDOWS)
11449: static
11449: #endif
11449: bool
11286: malloc_init_hard(void)
11286: {
11286: 	unsigned i;
11286: 	char buf[PATH_MAX + 1];
11286: 	const char *opts;
11286: 	long result;
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 	int linklen;
11286: #endif
73512: #ifdef MOZ_MEMORY_DARWIN
73512:     malloc_zone_t* default_zone;
73512: #endif
11286: 
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 	malloc_mutex_lock(&init_lock);
11286: #endif
11286: 
11286: 	if (malloc_initialized) {
11286: 		/*
11286: 		 * Another thread initialized the allocator before this one
11286: 		 * acquired init_lock.
11286: 		 */
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 		malloc_mutex_unlock(&init_lock);
11286: #endif
11286: 		return (false);
11286: 	}
11286: 
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 	/* get a thread local storage index */
11286: 	tlsIndex = TlsAlloc();
11286: #endif
11286: 
11286: 	/* Get page size and number of CPUs */
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 	{
11286: 		SYSTEM_INFO info;
11286: 
11286: 		GetSystemInfo(&info);
11286: 		result = info.dwPageSize;
11286: 
11286: 		pagesize = (unsigned) result;
11286: 
50840: #ifndef MOZ_MEMORY_NARENAS_DEFAULT_ONE
11286: 		ncpus = info.dwNumberOfProcessors;
50840: #endif
11286: 	}
11286: #else
50840: #ifndef MOZ_MEMORY_NARENAS_DEFAULT_ONE
11286: 	ncpus = malloc_ncpus();
50840: #endif
11286: 
11286: 	result = sysconf(_SC_PAGESIZE);
11286: 	assert(result != -1);
11286: 
11286: 	pagesize = (unsigned) result;
11286: #endif
11286: 
11286: 	/*
11286: 	 * We assume that pagesize is a power of 2 when calculating
11286: 	 * pagesize_mask and pagesize_2pow.
11286: 	 */
11286: 	assert(((result - 1) & result) == 0);
11286: 	pagesize_mask = result - 1;
11286: 	pagesize_2pow = ffs((int)result) - 1;
11286: 
15610: #ifdef MALLOC_PAGEFILE
15610: 	/*
15610: 	 * Determine where to create page files.  It is insufficient to
15610: 	 * unconditionally use P_tmpdir (typically "/tmp"), since for some
15610: 	 * operating systems /tmp is a separate filesystem that is rather small.
15610: 	 * Therefore prefer, in order, the following locations:
15610: 	 *
15610: 	 * 1) MALLOC_TMPDIR
15610: 	 * 2) TMPDIR
15610: 	 * 3) P_tmpdir
15610: 	 */
15610: 	{
15610: 		char *s;
15610: 		size_t slen;
15610: 		static const char suffix[] = "/jemalloc.XXXXXX";
15610: 
15610: 		if ((s = getenv("MALLOC_TMPDIR")) == NULL && (s =
15610: 		    getenv("TMPDIR")) == NULL)
15610: 			s = P_tmpdir;
15610: 		slen = strlen(s);
15610: 		if (slen + sizeof(suffix) > sizeof(pagefile_templ)) {
15610: 			_malloc_message(_getprogname(),
15610: 			    ": (malloc) Page file path too long\n",
15610: 			    "", "");
15610: 			abort();
15610: 		}
15610: 		memcpy(pagefile_templ, s, slen);
15610: 		memcpy(&pagefile_templ[slen], suffix, sizeof(suffix));
15610: 	}
15610: #endif
15610: 
11286: 	for (i = 0; i < 3; i++) {
11286: 		unsigned j;
11286: 
11286: 		/* Get runtime configuration. */
11286: 		switch (i) {
11286: 		case 0:
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 			if ((linklen = readlink("/etc/malloc.conf", buf,
11286: 						sizeof(buf) - 1)) != -1) {
11286: 				/*
11286: 				 * Use the contents of the "/etc/malloc.conf"
11286: 				 * symbolic link's name.
11286: 				 */
11286: 				buf[linklen] = '\0';
11286: 				opts = buf;
11286: 			} else
11286: #endif
11286: 			{
11286: 				/* No configuration specified. */
11286: 				buf[0] = '\0';
11286: 				opts = buf;
11286: 			}
11286: 			break;
11286: 		case 1:
11286: 			if (issetugid() == 0 && (opts =
11286: 			    getenv("MALLOC_OPTIONS")) != NULL) {
11286: 				/*
11286: 				 * Do nothing; opts is already initialized to
11286: 				 * the value of the MALLOC_OPTIONS environment
11286: 				 * variable.
11286: 				 */
11286: 			} else {
11286: 				/* No configuration specified. */
11286: 				buf[0] = '\0';
11286: 				opts = buf;
11286: 			}
11286: 			break;
11286: 		case 2:
11286: 			if (_malloc_options != NULL) {
11286: 				/*
11286: 				 * Use options that were compiled into the
11286: 				 * program.
11286: 				 */
11286: 				opts = _malloc_options;
11286: 			} else {
11286: 				/* No configuration specified. */
11286: 				buf[0] = '\0';
11286: 				opts = buf;
11286: 			}
11286: 			break;
11286: 		default:
11286: 			/* NOTREACHED */
11286: 			buf[0] = '\0';
11286: 			opts = buf;
11286: 			assert(false);
11286: 		}
11286: 
11286: 		for (j = 0; opts[j] != '\0'; j++) {
11286: 			unsigned k, nreps;
11286: 			bool nseen;
11286: 
11286: 			/* Parse repetition count, if any. */
11286: 			for (nreps = 0, nseen = false;; j++, nseen = true) {
11286: 				switch (opts[j]) {
11286: 					case '0': case '1': case '2': case '3':
11286: 					case '4': case '5': case '6': case '7':
11286: 					case '8': case '9':
11286: 						nreps *= 10;
11286: 						nreps += opts[j] - '0';
11286: 						break;
11286: 					default:
11286: 						goto MALLOC_OUT;
11286: 				}
11286: 			}
11286: MALLOC_OUT:
11286: 			if (nseen == false)
11286: 				nreps = 1;
11286: 
11286: 			for (k = 0; k < nreps; k++) {
11286: 				switch (opts[j]) {
11286: 				case 'a':
11286: 					opt_abort = false;
11286: 					break;
11286: 				case 'A':
11286: 					opt_abort = true;
11286: 					break;
11286: 				case 'b':
11286: #ifdef MALLOC_BALANCE
11286: 					opt_balance_threshold >>= 1;
11286: #endif
11286: 					break;
11286: 				case 'B':
11286: #ifdef MALLOC_BALANCE
11286: 					if (opt_balance_threshold == 0)
11286: 						opt_balance_threshold = 1;
11286: 					else if ((opt_balance_threshold << 1)
11286: 					    > opt_balance_threshold)
11286: 						opt_balance_threshold <<= 1;
11286: #endif
11286: 					break;
11286: 				case 'f':
11449: 					opt_dirty_max >>= 1;
11286: 					break;
11286: 				case 'F':
11449: 					if (opt_dirty_max == 0)
11449: 						opt_dirty_max = 1;
11449: 					else if ((opt_dirty_max << 1) != 0)
11449: 						opt_dirty_max <<= 1;
11286: 					break;
11449: #ifdef MALLOC_FILL
11286: 				case 'j':
11286: 					opt_junk = false;
11286: 					break;
11286: 				case 'J':
11286: 					opt_junk = true;
11286: 					break;
11449: #endif
11286: 				case 'k':
11286: 					/*
11286: 					 * Chunks always require at least one
11286: 					 * header page, so chunks can never be
11286: 					 * smaller than two pages.
11286: 					 */
11286: 					if (opt_chunk_2pow > pagesize_2pow + 1)
11286: 						opt_chunk_2pow--;
11286: 					break;
11286: 				case 'K':
11449: 					if (opt_chunk_2pow + 1 <
11449: 					    (sizeof(size_t) << 3))
11286: 						opt_chunk_2pow++;
11286: 					break;
11286: 				case 'n':
11286: 					opt_narenas_lshift--;
11286: 					break;
11286: 				case 'N':
11286: 					opt_narenas_lshift++;
11286: 					break;
15610: #ifdef MALLOC_PAGEFILE
15610: 				case 'o':
15610: 					/* Do not over-commit. */
15610: 					opt_pagefile = true;
15610: 					break;
15610: 				case 'O':
15610: 					/* Allow over-commit. */
15610: 					opt_pagefile = false;
15610: 					break;
15610: #endif
11286: 				case 'p':
11286: 					opt_print_stats = false;
11286: 					break;
11286: 				case 'P':
11286: 					opt_print_stats = true;
11286: 					break;
11286: 				case 'q':
11286: 					if (opt_quantum_2pow > QUANTUM_2POW_MIN)
11286: 						opt_quantum_2pow--;
11286: 					break;
11286: 				case 'Q':
11286: 					if (opt_quantum_2pow < pagesize_2pow -
11286: 					    1)
11286: 						opt_quantum_2pow++;
11286: 					break;
11286: 				case 's':
11286: 					if (opt_small_max_2pow >
11286: 					    QUANTUM_2POW_MIN)
11286: 						opt_small_max_2pow--;
11286: 					break;
11286: 				case 'S':
11286: 					if (opt_small_max_2pow < pagesize_2pow
11286: 					    - 1)
11286: 						opt_small_max_2pow++;
11286: 					break;
11449: #ifdef MALLOC_UTRACE
11286: 				case 'u':
11286: 					opt_utrace = false;
11286: 					break;
11286: 				case 'U':
11286: 					opt_utrace = true;
11286: 					break;
11449: #endif
11449: #ifdef MALLOC_SYSV
11286: 				case 'v':
11286: 					opt_sysv = false;
11286: 					break;
11286: 				case 'V':
11286: 					opt_sysv = true;
11286: 					break;
11449: #endif
11449: #ifdef MALLOC_XMALLOC
11286: 				case 'x':
11286: 					opt_xmalloc = false;
11286: 					break;
11286: 				case 'X':
11286: 					opt_xmalloc = true;
11286: 					break;
11449: #endif
11449: #ifdef MALLOC_FILL
11286: 				case 'z':
11286: 					opt_zero = false;
11286: 					break;
11286: 				case 'Z':
11286: 					opt_zero = true;
11286: 					break;
11449: #endif
11286: 				default: {
11286: 					char cbuf[2];
11286: 
11286: 					cbuf[0] = opts[j];
11286: 					cbuf[1] = '\0';
11286: 					_malloc_message(_getprogname(),
11286: 					    ": (malloc) Unsupported character "
11286: 					    "in malloc options: '", cbuf,
11286: 					    "'\n");
11286: 				}
11286: 				}
11286: 			}
11286: 		}
11286: 	}
11286: 
11286: 	/* Take care to call atexit() only once. */
11286: 	if (opt_print_stats) {
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 		/* Print statistics at exit. */
11286: 		atexit(malloc_print_stats);
11286: #endif
11286: 	}
11286: 
42803: #if (!defined(MOZ_MEMORY_WINDOWS) && !defined(MOZ_MEMORY_DARWIN) && !defined(MOZ_MEMORY_ANDROID))
21117: 	/* Prevent potential deadlock on malloc locks after fork. */
77556: 	/* XXX on Android there is no pthread_atfork, so we specifically
77556: 	   call _malloc_prefork and _malloc_postfork in process_util_linux.cc */
21117: 	pthread_atfork(_malloc_prefork, _malloc_postfork, _malloc_postfork);
21117: #endif
21117: 
11286: 	/* Set variables according to the value of opt_small_max_2pow. */
11286: 	if (opt_small_max_2pow < opt_quantum_2pow)
11286: 		opt_small_max_2pow = opt_quantum_2pow;
11286: 	small_max = (1U << opt_small_max_2pow);
11286: 
11286: 	/* Set bin-related variables. */
11286: 	bin_maxclass = (pagesize >> 1);
11286: 	assert(opt_quantum_2pow >= TINY_MIN_2POW);
11286: 	ntbins = opt_quantum_2pow - TINY_MIN_2POW;
11286: 	assert(ntbins <= opt_quantum_2pow);
11286: 	nqbins = (small_max >> opt_quantum_2pow);
11286: 	nsbins = pagesize_2pow - opt_small_max_2pow - 1;
11286: 
11286: 	/* Set variables according to the value of opt_quantum_2pow. */
11286: 	quantum = (1U << opt_quantum_2pow);
11286: 	quantum_mask = quantum - 1;
11286: 	if (ntbins > 0)
11286: 		small_min = (quantum >> 1) + 1;
11286: 	else
11286: 		small_min = 1;
11286: 	assert(small_min <= quantum);
11286: 
11286: 	/* Set variables according to the value of opt_chunk_2pow. */
11286: 	chunksize = (1LU << opt_chunk_2pow);
11286: 	chunksize_mask = chunksize - 1;
11286: 	chunk_npages = (chunksize >> pagesize_2pow);
11286: 	{
11449: 		size_t header_size;
11449: 
11449: 		/*
11449: 		 * Compute the header size such that it is large
11449: 		 * enough to contain the page map and enough nodes for the
11449: 		 * worst case: one node per non-header page plus one extra for
11449: 		 * situations where we briefly have one more node allocated
11449: 		 * than we will need.
11449: 		 */
11449: 		header_size = sizeof(arena_chunk_t) +
16218: 		    (sizeof(arena_chunk_map_t) * (chunk_npages - 1));
11449: 		arena_chunk_header_npages = (header_size >> pagesize_2pow) +
11449: 		    ((header_size & pagesize_mask) != 0);
11286: 	}
11286: 	arena_maxclass = chunksize - (arena_chunk_header_npages <<
11286: 	    pagesize_2pow);
11286: 
24522: #ifdef JEMALLOC_USES_MAP_ALIGN
24522: 	/*
24522: 	 * When using MAP_ALIGN, the alignment parameter must be a power of two
24522: 	 * multiple of the system pagesize, or mmap will fail.
24522: 	 */
24522: 	assert((chunksize % pagesize) == 0);
24522: 	assert((1 << (ffs(chunksize / pagesize) - 1)) == (chunksize/pagesize));
24522: #endif
24522: 
11286: 	UTRACE(0, 0, 0);
11286: 
11286: #ifdef MALLOC_STATS
11286: 	memset(&stats_chunks, 0, sizeof(chunk_stats_t));
11286: #endif
11286: 
11286: 	/* Various sanity checks that regard configuration. */
11286: 	assert(quantum >= sizeof(void *));
11286: 	assert(quantum <= pagesize);
11286: 	assert(chunksize >= pagesize);
11286: 	assert(quantum * 4 <= chunksize);
11286: 
11286: 	/* Initialize chunks data. */
11286: 	malloc_mutex_init(&huge_mtx);
15460: 	extent_tree_ad_new(&huge);
11286: #ifdef MALLOC_STATS
11286: 	huge_nmalloc = 0;
11286: 	huge_ndalloc = 0;
11286: 	huge_allocated = 0;
11286: #endif
11286: 
11286: 	/* Initialize base allocation data structures. */
11286: #ifdef MALLOC_STATS
11286: 	base_mapped = 0;
35015: 	base_committed = 0;
35015: #endif
11449: 	base_nodes = NULL;
11286: 	malloc_mutex_init(&base_mtx);
11286: 
15462: #ifdef MOZ_MEMORY_NARENAS_DEFAULT_ONE
15462: 	narenas = 1;
15462: #else
11286: 	if (ncpus > 1) {
11286: 		/*
11286: 		 * For SMP systems, create four times as many arenas as there
11286: 		 * are CPUs by default.
11286: 		 */
11286: 		opt_narenas_lshift += 2;
11286: 	}
11286: 
11286: 	/* Determine how many arenas to use. */
11286: 	narenas = ncpus;
15462: #endif
11286: 	if (opt_narenas_lshift > 0) {
11286: 		if ((narenas << opt_narenas_lshift) > narenas)
11286: 			narenas <<= opt_narenas_lshift;
11286: 		/*
11286: 		 * Make sure not to exceed the limits of what base_alloc() can
11286: 		 * handle.
11286: 		 */
11286: 		if (narenas * sizeof(arena_t *) > chunksize)
11286: 			narenas = chunksize / sizeof(arena_t *);
11286: 	} else if (opt_narenas_lshift < 0) {
11286: 		if ((narenas >> -opt_narenas_lshift) < narenas)
11286: 			narenas >>= -opt_narenas_lshift;
11286: 		/* Make sure there is at least one arena. */
11286: 		if (narenas == 0)
11286: 			narenas = 1;
11286: 	}
11286: #ifdef MALLOC_BALANCE
11286: 	assert(narenas != 0);
11286: 	for (narenas_2pow = 0;
11286: 	     (narenas >> (narenas_2pow + 1)) != 0;
11286: 	     narenas_2pow++);
11286: #endif
11286: 
11286: #ifdef NO_TLS
11286: 	if (narenas > 1) {
11286: 		static const unsigned primes[] = {1, 3, 5, 7, 11, 13, 17, 19,
11286: 		    23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
11286: 		    89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,
11286: 		    151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
11286: 		    223, 227, 229, 233, 239, 241, 251, 257, 263};
11286: 		unsigned nprimes, parenas;
11286: 
11286: 		/*
11286: 		 * Pick a prime number of hash arenas that is more than narenas
11286: 		 * so that direct hashing of pthread_self() pointers tends to
11286: 		 * spread allocations evenly among the arenas.
11286: 		 */
11286: 		assert((narenas & 1) == 0); /* narenas must be even. */
11286: 		nprimes = (sizeof(primes) >> SIZEOF_INT_2POW);
11286: 		parenas = primes[nprimes - 1]; /* In case not enough primes. */
11286: 		for (i = 1; i < nprimes; i++) {
11286: 			if (primes[i] > narenas) {
11286: 				parenas = primes[i];
11286: 				break;
11286: 			}
11286: 		}
11286: 		narenas = parenas;
11286: 	}
11286: #endif
11286: 
11286: #ifndef NO_TLS
11286: #  ifndef MALLOC_BALANCE
11286: 	next_arena = 0;
11286: #  endif
11286: #endif
11286: 
11286: 	/* Allocate and initialize arenas. */
11286: 	arenas = (arena_t **)base_alloc(sizeof(arena_t *) * narenas);
11286: 	if (arenas == NULL) {
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 		malloc_mutex_unlock(&init_lock);
11286: #endif
11286: 		return (true);
11286: 	}
11286: 	/*
11286: 	 * Zero the array.  In practice, this should always be pre-zeroed,
11286: 	 * since it was just mmap()ed, but let's be sure.
11286: 	 */
11286: 	memset(arenas, 0, sizeof(arena_t *) * narenas);
11286: 
11286: 	/*
11286: 	 * Initialize one arena here.  The rest are lazily created in
11286: 	 * choose_arena_hard().
11286: 	 */
11286: 	arenas_extend(0);
11286: 	if (arenas[0] == NULL) {
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 		malloc_mutex_unlock(&init_lock);
11286: #endif
11286: 		return (true);
11286: 	}
11286: #ifndef NO_TLS
11286: 	/*
11286: 	 * Assign the initial arena to the initial thread, in order to avoid
11286: 	 * spurious creation of an extra arena if the application switches to
11286: 	 * threaded mode.
11286: 	 */
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: 	TlsSetValue(tlsIndex, arenas[0]);
11286: #else
11286: 	arenas_map = arenas[0];
11286: #endif
11286: #endif
11286: 
11286: 	/*
11286: 	 * Seed here for the initial thread, since choose_arena_hard() is only
15460: 	 * called for other threads.  The seed value doesn't really matter.
11286: 	 */
11286: #ifdef MALLOC_BALANCE
11286: 	SPRN(balance, 42);
11286: #endif
11286: 
11286: 	malloc_spin_init(&arenas_lock);
11286: 
16218: #ifdef MALLOC_VALIDATE
16218: 	chunk_rtree = malloc_rtree_new((SIZEOF_PTR << 3) - opt_chunk_2pow);
16218: 	if (chunk_rtree == NULL)
16218: 		return (true);
16218: #endif
16218: 
11286: 	malloc_initialized = true;
73512: 
81354: #if defined(NEEDS_PTHREAD_MMAP_UNALIGNED_TSD)
81354: 	if (pthread_key_create(&mmap_unaligned_tsd, NULL) != 0) {
81354: 		malloc_printf("<jemalloc>: Error in pthread_key_create()\n");
81354: 	}
81354: #endif
81354: 
73512: #ifdef MOZ_MEMORY_DARWIN
73512: 	/*
73512: 	* Overwrite the default memory allocator to use jemalloc everywhere.
73512: 	*/
73512: 	default_zone = malloc_default_zone();
73512: 
79793: 	/*
82409: 	 * We only use jemalloc with versions of MacOS we've seen (10.5, 10.6, and
82409: 	 * 10.7).  We'll have to update our code to work with newer versions,
82409: 	 * because the malloc zone layout is likely to change.
82409: 	 */
82409: 
82409: 	osx_use_jemalloc = (default_zone->version == LEOPARD_MALLOC_ZONE_T_VERSION ||
82409: 			    default_zone->version == SNOW_LEOPARD_MALLOC_ZONE_T_VERSION ||
81354: 			    default_zone->version == LION_MALLOC_ZONE_T_VERSION);
73512: 
73512: 	/* Allow us dynamically turn off jemalloc for testing. */
81412: 	if (getenv("NO_MAC_JEMALLOC")) {
79793: 		osx_use_jemalloc = false;
81412: #ifdef __i386__
81412: 		malloc_printf("Warning: NO_MAC_JEMALLOC has no effect on "
81412: 			      "i386 machines (such as this one).\n");
81412: #endif
81412: 	}
79793: 
79793: 	if (osx_use_jemalloc) {
73512: 		/*
73512: 		 * Convert the default szone to an "overlay zone" that is capable
73512: 		 * of deallocating szone-allocated objects, but allocating new
73512: 		 * objects from jemalloc.
73512: 		 */
81354: 		size_t size = zone_version_size(default_zone->version);
73512: 		szone2ozone(default_zone, size);
73512: 	}
73512: 	else {
73512: 		szone = default_zone;
73512: 	}
73512: #endif
73512: 
11286: #ifndef MOZ_MEMORY_WINDOWS
11286: 	malloc_mutex_unlock(&init_lock);
11286: #endif
11286: 	return (false);
11286: }
11286: 
11286: /* XXX Why not just expose malloc_print_stats()? */
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: void
11286: malloc_shutdown()
11286: {
11449: 
11286: 	malloc_print_stats();
11286: }
11286: #endif
11286: 
11286: /*
11286:  * End general internal functions.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin malloc(3)-compatible functions.
11286:  */
11449: 
15458: /*
73512:  * Mangle standard interfaces, in order to avoid linking problems.
73512:  */
77119: #if defined(MOZ_MEMORY_DARWIN) || defined(MOZ_MEMORY_WINDOWS) || \
77119:     defined(MOZ_MEMORY_ANDROID)
77119: 
77119: #ifdef MOZ_MEMORY_ANDROID
77119: /*
77119:  * On Android, we use __wrap_* instead of je_* to accomodate with the
77119:  * linker's --wrap option we use. That option prefixes the function
77119:  * names it is given with __wrap_.
77119:  */
77119: #define wrap(a) __wrap_ ## a
77119: 
77119: /* Extra wrappers for NSPR alloc functions */
77119: void *
77119: __wrap_PR_Malloc(size_t size) __attribute__((alias("__wrap_malloc")));
77119: void *
77119: __wrap_PR_Calloc(size_t num, size_t size) __attribute__((alias("__wrap_calloc")));
77119: void *
77119: __wrap_PR_Realloc(void *ptr, size_t size) __attribute__((alias("__wrap_realloc")));
77119: void
77119: __wrap_PR_Free(void *ptr) __attribute__((alias("__wrap_free")));
77119: 
77119: #else
77119: #define wrap(a) je_ ## a
77119: #endif
77119: 
77119: #define malloc(a)               wrap(malloc)(a)
77119: #define memalign(a, b)          wrap(memalign)(a, b)
77119: #define posix_memalign(a, b, c) wrap(posix_memalign)(a, b, c)
77119: #define valloc(a)               wrap(valloc)(a)
77119: #define calloc(a, b)            wrap(calloc)(a, b)
77119: #define realloc(a, b)           wrap(realloc)(a, b)
77119: #define free(a)                 wrap(free)(a)
77119: #define malloc_usable_size(a)   wrap(malloc_usable_size)(a)
77119: 
77119: void *malloc(size_t size);
77119: 
77119: char *
77119: wrap(strndup)(const char *src, size_t len) {
77119: 	char* dst = (char*) malloc(len + 1);
42803: 	if (dst)
42803: 		strncpy(dst, src, len + 1);
42803: 	return dst;
42803: }
77119: 
77119: char *
77119: wrap(strdup)(const char *src) {
42803: 	size_t len = strlen(src);
77119: 	return wrap(strndup)(src, len);
42803: }
42803: #endif
42803: 
73512: /*
79793:  * Even though we compile with MOZ_MEMORY, we may have to dynamically decide
79793:  * not to use jemalloc, as discussed above. However, we call jemalloc
79793:  * functions directly from mozalloc. Since it's pretty dangerous to mix the
79793:  * allocators, we need to call the OSX allocators from the functions below,
79793:  * when osx_use_jemalloc is not (dynamically) set.
73512:  *
81412:  * Note that we assume jemalloc is enabled on i386.  This is safe because the
81412:  * only i386 versions of MacOS are 10.5 and 10.6, which we support.  We have to
81412:  * do this because madvise isn't in the malloc zone struct for 10.5.
81412:  *
81412:  * This means that NO_MAC_JEMALLOC doesn't work on i386.
73512:  */
73512: #if defined(MOZ_MEMORY_DARWIN) && !defined(__i386__)
79793: #define DARWIN_ONLY(A) if (!osx_use_jemalloc) { A; }
73512: #else
73512: #define DARWIN_ONLY(A)
73512: #endif
73512: 
11286: void *
11286: malloc(size_t size)
11286: {
11286: 	void *ret;
11286: 
73512: 	DARWIN_ONLY(return (szone->malloc)(szone, size));
73512: 
11286: 	if (malloc_init()) {
11286: 		ret = NULL;
11286: 		goto RETURN;
11286: 	}
11286: 
11286: 	if (size == 0) {
11449: #ifdef MALLOC_SYSV
11286: 		if (opt_sysv == false)
11449: #endif
11286: 			size = 1;
11449: #ifdef MALLOC_SYSV
11286: 		else {
11286: 			ret = NULL;
11286: 			goto RETURN;
11286: 		}
11449: #endif
11286: 	}
11286: 
11286: 	ret = imalloc(size);
11286: 
11286: RETURN:
11286: 	if (ret == NULL) {
11449: #ifdef MALLOC_XMALLOC
11286: 		if (opt_xmalloc) {
11286: 			_malloc_message(_getprogname(),
11286: 			    ": (malloc) Error in malloc(): out of memory\n", "",
11286: 			    "");
11286: 			abort();
11286: 		}
11449: #endif
11286: 		errno = ENOMEM;
11286: 	}
11286: 
11286: 	UTRACE(0, size, ret);
11286: 	return (ret);
11286: }
11286: 
70919: /*
70919:  * In ELF systems the default visibility allows symbols to be preempted at
70919:  * runtime. This in turn prevents the uses of memalign in this file from being
70919:  * optimized. What we do in here is define two aliasing symbols (they point to
70919:  * the same code): memalign and memalign_internal. The internal version has
70919:  * hidden visibility and is used in every reference from this file.
70919:  *
70919:  * For more information on this technique, see section 2.2.7 (Avoid Using
70919:  * Exported Symbols) in http://www.akkadia.org/drepper/dsohowto.pdf.
70919:  */
70919: 
70919: #if defined(__GNUC__) && !defined(MOZ_MEMORY_DARWIN)
70919: #define MOZ_MEMORY_ELF
70919: #endif
70919: 
15458: #ifdef MOZ_MEMORY_SOLARIS
14800: #  ifdef __SUNPRO_C
14800: void *
14800: memalign(size_t alignment, size_t size);
14800: #pragma no_inline(memalign)
70919: #  elif (defined(__GNUC__))
14800: __attribute__((noinline))
14800: #  endif
15458: #else
70919: #if (defined(MOZ_MEMORY_ELF))
69016: __attribute__((visibility ("hidden")))
69016: #endif
69016: #endif
69016: 
70919: 
70919: #ifdef MOZ_MEMORY_ELF
69016: #define MEMALIGN memalign_internal
69016: #else
69016: #define MEMALIGN memalign
69016: #endif
69016: 
14800: void *
69016: MEMALIGN(size_t alignment, size_t size)
14800: {
14800: 	void *ret;
14800: 
73512: 	DARWIN_ONLY(return (szone->memalign)(szone, alignment, size));
73512: 
34523: 	assert(((alignment - 1) & alignment) == 0);
14800: 
14800: 	if (malloc_init()) {
14800: 		ret = NULL;
14800: 		goto RETURN;
14800: 	}
14800: 
42469: 	if (size == 0) {
42469: #ifdef MALLOC_SYSV
42469: 		if (opt_sysv == false)
42469: #endif
42469: 			size = 1;
42469: #ifdef MALLOC_SYSV
42469: 		else {
42469: 			ret = NULL;
42469: 			goto RETURN;
42469: 		}
42469: #endif
42469: 	}
42469: 
34523: 	alignment = alignment < sizeof(void*) ? sizeof(void*) : alignment;
14800: 	ret = ipalloc(alignment, size);
14800: 
14800: RETURN:
14800: #ifdef MALLOC_XMALLOC
14800: 	if (opt_xmalloc && ret == NULL) {
14800: 		_malloc_message(_getprogname(),
14800: 		": (malloc) Error in memalign(): out of memory\n", "", "");
14800: 		abort();
14800: 	}
14800: #endif
14800: 	UTRACE(0, size, ret);
14800: 	return (ret);
14800: }
14800: 
70919: #ifdef MOZ_MEMORY_ELF
77119: extern void *
77119: memalign(size_t alignment, size_t size) __attribute__((alias ("memalign_internal"), visibility ("default")));
69016: #endif
69016: 
11286: int
11286: posix_memalign(void **memptr, size_t alignment, size_t size)
11286: {
11286: 	void *result;
11286: 
11286: 	/* Make sure that alignment is a large enough power of 2. */
14800: 	if (((alignment - 1) & alignment) != 0 || alignment < sizeof(void *)) {
11449: #ifdef MALLOC_XMALLOC
11286: 		if (opt_xmalloc) {
11286: 			_malloc_message(_getprogname(),
11286: 			    ": (malloc) Error in posix_memalign(): "
11286: 			    "invalid alignment\n", "", "");
11286: 			abort();
11286: 		}
11449: #endif
14800: 		return (EINVAL);
14800: 	}
14800: 
42469: 	/* The 0-->1 size promotion is done in the memalign() call below */
42469: 
69016: 	result = MEMALIGN(alignment, size);
73512: 
14800: 	if (result == NULL)
14800: 		return (ENOMEM);
11286: 
11286: 	*memptr = result;
14800: 	return (0);
11286: }
11286: 
11286: void *
11286: valloc(size_t size)
11286: {
69016: 	return (MEMALIGN(pagesize, size));
73512: }
73512: 
11286: void *
11286: calloc(size_t num, size_t size)
11286: {
11286: 	void *ret;
11286: 	size_t num_size;
11286: 
73512: 	DARWIN_ONLY(return (szone->calloc)(szone, num, size));
73512: 
11286: 	if (malloc_init()) {
11286: 		num_size = 0;
11286: 		ret = NULL;
11286: 		goto RETURN;
11286: 	}
11286: 
11286: 	num_size = num * size;
11286: 	if (num_size == 0) {
11449: #ifdef MALLOC_SYSV
11286: 		if ((opt_sysv == false) && ((num == 0) || (size == 0)))
11449: #endif
11286: 			num_size = 1;
11449: #ifdef MALLOC_SYSV
11286: 		else {
11286: 			ret = NULL;
11286: 			goto RETURN;
11286: 		}
11449: #endif
11286: 	/*
11286: 	 * Try to avoid division here.  We know that it isn't possible to
11286: 	 * overflow during multiplication if neither operand uses any of the
11286: 	 * most significant half of the bits in a size_t.
11286: 	 */
11286: 	} else if (((num | size) & (SIZE_T_MAX << (sizeof(size_t) << 2)))
11286: 	    && (num_size / size != num)) {
11286: 		/* size_t overflow. */
11286: 		ret = NULL;
11286: 		goto RETURN;
11286: 	}
11286: 
11286: 	ret = icalloc(num_size);
11286: 
11286: RETURN:
11286: 	if (ret == NULL) {
11449: #ifdef MALLOC_XMALLOC
11286: 		if (opt_xmalloc) {
11286: 			_malloc_message(_getprogname(),
11286: 			    ": (malloc) Error in calloc(): out of memory\n", "",
11286: 			    "");
11286: 			abort();
11286: 		}
11449: #endif
11286: 		errno = ENOMEM;
11286: 	}
11286: 
11286: 	UTRACE(0, num_size, ret);
11286: 	return (ret);
11286: }
11286: 
11286: void *
11286: realloc(void *ptr, size_t size)
11286: {
11286: 	void *ret;
11286: 
73512: 	DARWIN_ONLY(return (szone->realloc)(szone, ptr, size));
73512: 
11286: 	if (size == 0) {
11449: #ifdef MALLOC_SYSV
11286: 		if (opt_sysv == false)
11449: #endif
11286: 			size = 1;
11449: #ifdef MALLOC_SYSV
11286: 		else {
11286: 			if (ptr != NULL)
11286: 				idalloc(ptr);
11286: 			ret = NULL;
11286: 			goto RETURN;
11286: 		}
11449: #endif
11286: 	}
11286: 
11286: 	if (ptr != NULL) {
11286: 		assert(malloc_initialized);
11286: 
11286: 		ret = iralloc(ptr, size);
11286: 
11286: 		if (ret == NULL) {
11449: #ifdef MALLOC_XMALLOC
11286: 			if (opt_xmalloc) {
11286: 				_malloc_message(_getprogname(),
11286: 				    ": (malloc) Error in realloc(): out of "
11286: 				    "memory\n", "", "");
11286: 				abort();
11286: 			}
11449: #endif
11286: 			errno = ENOMEM;
11286: 		}
11286: 	} else {
11286: 		if (malloc_init())
11286: 			ret = NULL;
11286: 		else
11286: 			ret = imalloc(size);
11286: 
11286: 		if (ret == NULL) {
11449: #ifdef MALLOC_XMALLOC
11286: 			if (opt_xmalloc) {
11286: 				_malloc_message(_getprogname(),
11286: 				    ": (malloc) Error in realloc(): out of "
11286: 				    "memory\n", "", "");
11286: 				abort();
11286: 			}
11449: #endif
11286: 			errno = ENOMEM;
11286: 		}
11286: 	}
11286: 
11449: #ifdef MALLOC_SYSV
11286: RETURN:
11449: #endif
11286: 	UTRACE(ptr, size, ret);
11286: 	return (ret);
11286: }
11286: 
11286: void
11286: free(void *ptr)
11286: {
47438: 	size_t offset;
11286: 	
73512: 	DARWIN_ONLY((szone->free)(szone, ptr); return);
73512: 
11286: 	UTRACE(ptr, 0, 0);
47438: 
47438: 	/*
47438: 	 * A version of idalloc that checks for NULL pointer but only for
47438: 	 * huge allocations assuming that CHUNK_ADDR2OFFSET(NULL) == 0.
47438: 	 */
47438: 	assert(CHUNK_ADDR2OFFSET(NULL) == 0);
47438: 	offset = CHUNK_ADDR2OFFSET(ptr);
47438: 	if (offset != 0)
47438: 		arena_dalloc(ptr, offset);
47438: 	else if (ptr != NULL)
47438: 		huge_dalloc(ptr);
11286: }
11286: 
11286: /*
11286:  * End malloc(3)-compatible functions.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin non-standard functions.
11286:  */
81384: 
81384: /* This was added by Mozilla for use by SQLite. */
81384: size_t
81384: je_malloc_usable_size_in_advance(size_t size)
81384: {
81384: 	/*
81384: 	 * This duplicates the logic in imalloc(), arena_malloc() and
81384: 	 * arena_malloc_small().
81384: 	 */
81384: 	if (size < small_min) {
81384: 		/* Small (tiny). */
81384: 		size = pow2_ceil(size);
81384: 		/*
81384: 		 * We omit the #ifdefs from arena_malloc_small() --
81384: 		 * it can be inaccurate with its size in some cases, but this
81384: 		 * function must be accurate.
81384: 		 */
81384: 		if (size < (1U << TINY_MIN_2POW))
81384: 			size = (1U << TINY_MIN_2POW);
81384: 	} else if (size <= small_max) {
81384: 		/* Small (quantum-spaced). */
81384: 		size = QUANTUM_CEILING(size);
81384: 	} else if (size <= bin_maxclass) {
81384: 		/* Small (sub-page). */
81384: 		size = pow2_ceil(size);
81384: 	} else if (size <= arena_maxclass) {
81384: 		/* Large. */
81384: 		size = PAGE_CEILING(size);
81384: 	} else {
81384: 		/*
81384: 		 * Huge.  We use PAGE_CEILING to get psize, instead of using
81384: 		 * CHUNK_CEILING to get csize.  This ensures that this
81384: 		 * malloc_usable_size(malloc(n)) always matches
81384: 		 * je_malloc_usable_size_in_advance(n).
81384: 		 */
81384: 		size = PAGE_CEILING(size);
81384: 	}
81384: 	return size;
81384: }
81384: 
81384: 
42803: #ifdef MOZ_MEMORY_ANDROID
42803: size_t
42803: malloc_usable_size(void *ptr)
42803: #else
11286: size_t
11286: malloc_usable_size(const void *ptr)
42803: #endif
11286: {
73512: 	DARWIN_ONLY(return (szone->size)(szone, ptr));
11286: 
14259: #ifdef MALLOC_VALIDATE
14259: 	return (isalloc_validate(ptr));
14259: #else
11286: 	assert(ptr != NULL);
11286: 
11286: 	return (isalloc(ptr));
14259: #endif
11286: }
11286: 
15458: void
15458: jemalloc_stats(jemalloc_stats_t *stats)
15458: {
15458: 	size_t i;
15458: 
15458: 	assert(stats != NULL);
15458: 
15458: 	/*
15458: 	 * Gather runtime settings.
15458: 	 */
15458: 	stats->opt_abort = opt_abort;
15458: 	stats->opt_junk =
15458: #ifdef MALLOC_FILL
15458: 	    opt_junk ? true :
15458: #endif
15458: 	    false;
15458: 	stats->opt_utrace =
15458: #ifdef MALLOC_UTRACE
15458: 	    opt_utrace ? true :
15458: #endif
15458: 	    false;
15458: 	stats->opt_sysv =
15458: #ifdef MALLOC_SYSV
15458: 	    opt_sysv ? true :
15458: #endif
15458: 	    false;
15458: 	stats->opt_xmalloc =
15458: #ifdef MALLOC_XMALLOC
15458: 	    opt_xmalloc ? true :
15458: #endif
15458: 	    false;
15458: 	stats->opt_zero =
15458: #ifdef MALLOC_FILL
15458: 	    opt_zero ? true :
15458: #endif
15458: 	    false;
15458: 	stats->narenas = narenas;
15458: 	stats->balance_threshold =
15458: #ifdef MALLOC_BALANCE
15458: 	    opt_balance_threshold
15458: #else
15458: 	    SIZE_T_MAX
15458: #endif
15458: 	    ;
15458: 	stats->quantum = quantum;
15458: 	stats->small_max = small_max;
15458: 	stats->large_max = arena_maxclass;
15458: 	stats->chunksize = chunksize;
15458: 	stats->dirty_max = opt_dirty_max;
15458: 
15458: 	/*
15458: 	 * Gather current memory usage statistics.
15458: 	 */
15458: 	stats->mapped = 0;
15458: 	stats->committed = 0;
15458: 	stats->allocated = 0;
15458: 	stats->dirty = 0;
15458: 
15458: 	/* Get huge mapped/allocated. */
15458: 	malloc_mutex_lock(&huge_mtx);
15458: 	stats->mapped += stats_chunks.curchunks * chunksize;
15458: 	stats->committed += huge_allocated;
15458: 	stats->allocated += huge_allocated;
15458: 	malloc_mutex_unlock(&huge_mtx);
15458: 
15458: 	/* Get base mapped. */
15458: 	malloc_mutex_lock(&base_mtx);
15458: 	stats->mapped += base_mapped;
35015: 	assert(base_committed <= base_mapped);
35015: 	stats->committed += base_committed;
15458: 	malloc_mutex_unlock(&base_mtx);
15458: 
15458: 	/* Iterate over arenas and their chunks. */
15458: 	for (i = 0; i < narenas; i++) {
15458: 		arena_t *arena = arenas[i];
15458: 		if (arena != NULL) {
15458: 			malloc_spin_lock(&arena->lock);
15458: 			stats->allocated += arena->stats.allocated_small;
15458: 			stats->allocated += arena->stats.allocated_large;
35015: 			stats->committed += (arena->stats.committed <<
35015: 			    pagesize_2pow);
15458: 			stats->dirty += (arena->ndirty << pagesize_2pow);
15458: 			malloc_spin_unlock(&arena->lock);
15458: 		}
15458: 	}
15458: 
35015: 	assert(stats->mapped >= stats->committed);
35015: 	assert(stats->committed >= stats->allocated);
15458: }
15458: 
80797: #ifdef MALLOC_DOUBLE_PURGE
80797: 
80797: /* Explicitly remove all of this chunk's MADV_FREE'd pages from memory. */
80797: static void
80797: hard_purge_chunk(arena_chunk_t *chunk)
80797: {
80797: 	/* See similar logic in arena_purge(). */
80797: 
80797: 	size_t i;
80797: 	for (i = arena_chunk_header_npages; i < chunk_npages; i++) {
80797: 		/* Find all adjacent pages with CHUNK_MAP_MADVISED set. */
80797: 		size_t npages;
80797: 		for (npages = 0;
80797: 		     chunk->map[i + npages].bits & CHUNK_MAP_MADVISED && i + npages < chunk_npages;
80797: 		     npages++) {
80797: 			/* Turn off the chunk's MADV_FREED bit and turn on its
80797: 			 * DECOMMITTED bit. */
80797: 			assert(!(chunk->map[i + npages].bits & CHUNK_MAP_DECOMMITTED));
80797: 			chunk->map[i + npages].bits ^= CHUNK_MAP_MADVISED_OR_DECOMMITTED;
80797: 		}
80797: 
80797: 		/* We could use mincore to find out which pages are actually
80797: 		 * present, but it's not clear that's better. */
80797: 		if (npages > 0) {
80797: 			pages_decommit(((char*)chunk) + (i << pagesize_2pow), npages << pagesize_2pow);
80797: 			pages_commit(((char*)chunk) + (i << pagesize_2pow), npages << pagesize_2pow);
80797: 		}
80797: 		i += npages;
80797: 	}
80797: }
80797: 
80797: /* Explicitly remove all of this arena's MADV_FREE'd pages from memory. */
80797: static void
80797: hard_purge_arena(arena_t *arena)
80797: {
80797: 	malloc_spin_lock(&arena->lock);
80797: 
80797: 	while (!LinkedList_IsEmpty(&arena->chunks_madvised)) {
80797: 		LinkedList* next = arena->chunks_madvised.next;
80797: 		arena_chunk_t *chunk =
80797: 			LinkedList_Get(arena->chunks_madvised.next,
80797: 				       arena_chunk_t, chunks_madvised_elem);
80797: 		hard_purge_chunk(chunk);
80797: 		LinkedList_Remove(&chunk->chunks_madvised_elem);
80797: 	}
80797: 
80797: 	malloc_spin_unlock(&arena->lock);
80797: }
80797: 
80797: void
80797: jemalloc_purge_freed_pages()
80797: {
80797: 	size_t i;
80797: 	for (i = 0; i < narenas; i++) {
80797: 		arena_t *arena = arenas[i];
80797: 		if (arena != NULL)
80797: 			hard_purge_arena(arena);
80797: 	}
80797: }
80797: 
80797: #else /* !defined MALLOC_DOUBLE_PURGE */
80797: 
80797: void
80797: jemalloc_purge_freed_pages()
80797: {
80797: 	/* Do nothing. */
80797: }
80797: 
80797: #endif /* defined MALLOC_DOUBLE_PURGE */
80797: 
80797: 
80797: 
11286: #ifdef MOZ_MEMORY_WINDOWS
11286: void*
11286: _recalloc(void *ptr, size_t count, size_t size)
11286: {
11449: 	size_t oldsize = (ptr != NULL) ? isalloc(ptr) : 0;
11286: 	size_t newsize = count * size;
11286: 
11449: 	/*
11449: 	 * In order for all trailing bytes to be zeroed, the caller needs to
11449: 	 * use calloc(), followed by recalloc().  However, the current calloc()
11449: 	 * implementation only zeros the bytes requested, so if recalloc() is
11449: 	 * to work 100% correctly, calloc() will need to change to zero
11449: 	 * trailing bytes.
11449: 	 */
11449: 
11286: 	ptr = realloc(ptr, newsize);
11449: 	if (ptr != NULL && oldsize < newsize) {
11449: 		memset((void *)((uintptr_t)ptr + oldsize), 0, newsize -
11449: 		    oldsize);
11449: 	}
11286: 
11286: 	return ptr;
11286: }
11286: 
11286: /*
11286:  * This impl of _expand doesn't ever actually expand or shrink blocks: it
11286:  * simply replies that you may continue using a shrunk block.
11286:  */
11286: void*
11286: _expand(void *ptr, size_t newsize)
11286: {
11286: 	if (isalloc(ptr) >= newsize)
11286: 		return ptr;
11286: 
11286: 	return NULL;
11286: }
11286: 
11286: size_t
11286: _msize(const void *ptr)
11286: {
11449: 
11286: 	return malloc_usable_size(ptr);
11286: }
11286: #endif
11286: 
11286: /*
11286:  * End non-standard functions.
11286:  */
11286: /******************************************************************************/
11286: /*
11286:  * Begin library-private functions, used by threading libraries for protection
11286:  * of malloc during fork().  These functions are only called if the program is
11286:  * running in threaded mode, so there is no need to check whether the program
11286:  * is threaded here.
11286:  */
11286: 
77556: #ifdef MOZ_MEMORY_ANDROID
77556: void
77556: #else
73512: static void
77556: #endif
11286: _malloc_prefork(void)
11286: {
11286: 	unsigned i;
11286: 
11286: 	/* Acquire all mutexes in a safe order. */
11286: 
11286: 	malloc_spin_lock(&arenas_lock);
11286: 	for (i = 0; i < narenas; i++) {
11286: 		if (arenas[i] != NULL)
11286: 			malloc_spin_lock(&arenas[i]->lock);
11286: 	}
11286: 
11286: 	malloc_mutex_lock(&base_mtx);
11286: 
11286: 	malloc_mutex_lock(&huge_mtx);
11286: }
11286: 
77556: #ifdef MOZ_MEMORY_ANDROID
77556: void
77556: #else
73512: static void
77556: #endif
11286: _malloc_postfork(void)
11286: {
11286: 	unsigned i;
11286: 
11286: 	/* Release all mutexes, now that fork() has completed. */
11286: 
11286: 	malloc_mutex_unlock(&huge_mtx);
11286: 
11286: 	malloc_mutex_unlock(&base_mtx);
11286: 
11286: 	for (i = 0; i < narenas; i++) {
11286: 		if (arenas[i] != NULL)
11286: 			malloc_spin_unlock(&arenas[i]->lock);
11286: 	}
11286: 	malloc_spin_unlock(&arenas_lock);
11286: }
11286: 
11286: /*
11286:  * End library-private functions.
11286:  */
11286: /******************************************************************************/
11286: 
56940: #ifdef HAVE_DLOPEN
30874: #  include <dlfcn.h>
30874: #endif
30874: 
11286: #ifdef MOZ_MEMORY_DARWIN
11286: 
11286: static void *
11286: zone_malloc(malloc_zone_t *zone, size_t size)
11286: {
11286: 
15458: 	return (malloc(size));
11286: }
11286: 
11286: static void *
11286: zone_calloc(malloc_zone_t *zone, size_t num, size_t size)
11286: {
11286: 
15458: 	return (calloc(num, size));
11286: }
11286: 
11286: static void *
11286: zone_valloc(malloc_zone_t *zone, size_t size)
11286: {
11286: 	void *ret = NULL; /* Assignment avoids useless compiler warning. */
11286: 
15458: 	posix_memalign(&ret, pagesize, size);
11286: 
11286: 	return (ret);
11286: }
11286: 
11286: static void *
73512: zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
73512: {
73512: 	return (memalign(alignment, size));
73512: }
73512: 
73512: static void *
11286: zone_destroy(malloc_zone_t *zone)
11286: {
11286: 
11286: 	/* This function should never be called. */
11286: 	assert(false);
11286: 	return (NULL);
11286: }
11286: 
11286: static size_t
11286: zone_good_size(malloc_zone_t *zone, size_t size)
11286: {
81628: 	return je_malloc_usable_size_in_advance(size);
11286: }
11286: 
73512: static size_t
73512: ozone_size(malloc_zone_t *zone, void *ptr)
73512: {
73512: 	size_t ret = isalloc_validate(ptr);
73512: 	if (ret == 0)
73512: 		ret = szone->size(zone, ptr);
73512: 
73512: 	return ret;
73512: }
73512: 
73512: static void
73512: ozone_free(malloc_zone_t *zone, void *ptr)
73512: {
73512: 	if (isalloc_validate(ptr) != 0)
73512: 		free(ptr);
73512: 	else {
73512: 		size_t size = szone->size(zone, ptr);
73512: 		if (size != 0)
73512: 			(szone->free)(zone, ptr);
73512: 		/* Otherwise we leak. */
73512: 	}
73512: }
73512: 
73512: static void *
73512: ozone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
73512: {
73512:     size_t oldsize;
73512: 	if (ptr == NULL)
73512: 		return (malloc(size));
73512: 
73512: 	oldsize = isalloc_validate(ptr);
73512: 	if (oldsize != 0)
73512: 		return (realloc(ptr, size));
73512: 	else {
73512: 		oldsize = szone->size(zone, ptr);
73512: 		if (oldsize == 0)
73512: 			return (malloc(size));
73512: 		else {
73512: 			void *ret = malloc(size);
73512: 			if (ret != NULL) {
73512: 				memcpy(ret, ptr, (oldsize < size) ? oldsize :
73512: 				    size);
73512: 				(szone->free)(zone, ptr);
73512: 			}
73512: 			return (ret);
73512: 		}
73512: 	}
73512: }
73512: 
73512: static unsigned
73512: ozone_batch_malloc(malloc_zone_t *zone, size_t size, void **results,
73512:     unsigned num_requested)
73512: {
73512: 	/* Don't bother implementing this interface, since it isn't required. */
73512: 	return 0;
73512: }
73512: 
73512: static void
73512: ozone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned num)
73512: {
73512: 	unsigned i;
73512: 
73512: 	for (i = 0; i < num; i++)
73512: 		ozone_free(zone, to_be_freed[i]);
73512: }
73512: 
73512: static void
73512: ozone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size)
73512: {
73512: 	if (isalloc_validate(ptr) != 0) {
73512: 		assert(isalloc_validate(ptr) == size);
73512: 		free(ptr);
73512: 	} else {
73512: 		assert(size == szone->size(zone, ptr));
73512: 		l_szone.m16(zone, ptr, size);
73512: 	}
73512: }
73512: 
73512: static void
73512: ozone_force_lock(malloc_zone_t *zone)
73512: {
73512: 	/* jemalloc locking is taken care of by the normal jemalloc zone. */
73512: 	szone->introspect->force_lock(zone);
73512: }
73512: 
73512: static void
73512: ozone_force_unlock(malloc_zone_t *zone)
73512: {
73512: 	/* jemalloc locking is taken care of by the normal jemalloc zone. */
73512: 	szone->introspect->force_unlock(zone);
73512: }
73512: 
73512: static size_t
73512: zone_version_size(int version)
73512: {
73512:     switch (version)
73512:     {
73512:         case SNOW_LEOPARD_MALLOC_ZONE_T_VERSION:
73512:             return sizeof(snow_leopard_malloc_zone);
73512:         case LEOPARD_MALLOC_ZONE_T_VERSION:
73512:             return sizeof(leopard_malloc_zone);
73512:         default:
73512:         case LION_MALLOC_ZONE_T_VERSION:
73512:             return sizeof(lion_malloc_zone);
73512:     }
73512: }
73512: 
73512: /*
73512:  * Overlay the default scalable zone (szone) such that existing allocations are
73512:  * drained, and further allocations come from jemalloc. This is necessary
73512:  * because Core Foundation directly accesses and uses the szone before the
73512:  * jemalloc library is even loaded.
73512:  */
73512: static void
73512: szone2ozone(malloc_zone_t *default_zone, size_t size)
73512: {
73512:     lion_malloc_zone *l_zone;
73512: 	assert(malloc_initialized);
73512: 
73512: 	/*
73512: 	 * Stash a copy of the original szone so that we can call its
73512: 	 * functions as needed. Note that internally, the szone stores its
73512: 	 * bookkeeping data structures immediately following the malloc_zone_t
73512: 	 * header, so when calling szone functions, we need to pass a pointer to
73512: 	 * the original zone structure.
73512: 	 */
73512: 	memcpy(szone, default_zone, size);
73512: 
73512: 	/* OSX 10.7 allocates the default zone in protected memory. */
73512: 	if (default_zone->version >= LION_MALLOC_ZONE_T_VERSION) {
73512: 		void* start_of_page = (void*)((size_t)(default_zone) & ~pagesize_mask);
73512: 		mprotect (start_of_page, size, PROT_READ | PROT_WRITE);
73512: 	}
73512: 
73512: 	default_zone->size = (void *)ozone_size;
73512: 	default_zone->malloc = (void *)zone_malloc;
73512: 	default_zone->calloc = (void *)zone_calloc;
73512: 	default_zone->valloc = (void *)zone_valloc;
73512: 	default_zone->free = (void *)ozone_free;
73512: 	default_zone->realloc = (void *)ozone_realloc;
73512: 	default_zone->destroy = (void *)zone_destroy;
73512: 	default_zone->batch_malloc = NULL;
73512: 	default_zone->batch_free = ozone_batch_free;
73512: 	default_zone->introspect = ozone_introspect;
73512: 
81354: 	/* Don't modify default_zone->zone_name; Mac libc may rely on the name
81354: 	 * being unchanged.  See Mozilla bug 694896. */
81354: 
73512: 	ozone_introspect->enumerator = NULL;
73512: 	ozone_introspect->good_size = (void *)zone_good_size;
73512: 	ozone_introspect->check = NULL;
73512: 	ozone_introspect->print = NULL;
73512: 	ozone_introspect->log = NULL;
73512: 	ozone_introspect->force_lock = (void *)ozone_force_lock;
73512: 	ozone_introspect->force_unlock = (void *)ozone_force_unlock;
73512: 	ozone_introspect->statistics = NULL;
73512: 
73512:     /* Platform-dependent structs */
73512:     l_zone = (lion_malloc_zone*)(default_zone);
73512: 
73512:     if (default_zone->version >= SNOW_LEOPARD_MALLOC_ZONE_T_VERSION) {
73512:         l_zone->m15 = (void (*)())zone_memalign;
73512:         l_zone->m16 = (void (*)())ozone_free_definite_size;
73512:         l_ozone_introspect.m9 = NULL;
73512:     }
73512: 
73512:     if (default_zone->version >= LION_MALLOC_ZONE_T_VERSION) {
73512:         l_zone->m17 = NULL;
73512:         l_ozone_introspect.m10 = NULL;
73512:         l_ozone_introspect.m11 = NULL;
73512:         l_ozone_introspect.m12 = NULL;
73512:         l_ozone_introspect.m13 = NULL;
73512:     }
11286: }
11286: 
11449: __attribute__((constructor))
11286: void
11286: jemalloc_darwin_init(void)
11286: {
11449: 	if (malloc_init_hard())
11286: 		abort();
11286: }
30874: 
30874: #elif defined(__GLIBC__) && !defined(__UCLIBC__)
30874: /*
30874:  * glibc provides the RTLD_DEEPBIND flag for dlopen which can make it possible
30874:  * to inconsistently reference libc's malloc(3)-compatible functions
30874:  * (bug 493541).
30874:  *
30874:  * These definitions interpose hooks in glibc.  The functions are actually
30874:  * passed an extra argument for the caller return address, which will be
30874:  * ignored.
30874:  */
30874: void (*__free_hook)(void *ptr) = free;
30874: void *(*__malloc_hook)(size_t size) = malloc;
30874: void *(*__realloc_hook)(void *ptr, size_t size) = realloc;
69016: void *(*__memalign_hook)(size_t alignment, size_t size) = MEMALIGN;
30874: 
30874: #elif defined(RTLD_DEEPBIND)
30874: /*
30874:  * XXX On systems that support RTLD_GROUP or DF_1_GROUP, do their
30874:  * implementations permit similar inconsistencies?  Should STV_SINGLETON
30874:  * visibility be used for interposition where available?
30874:  */
30874: #  error "Interposing malloc is unsafe on this system without libc malloc hooks."
30874: #endif
72611: 
77117: #ifdef MOZ_MEMORY_WINDOWS
72611: /*
72611:  * In the new style jemalloc integration jemalloc is built as a separate
72611:  * shared library.  Since we're no longer hooking into the CRT binary,
72611:  * we need to initialize the heap at the first opportunity we get.
72611:  * DLL_PROCESS_ATTACH in DllMain is that opportunity.
72611:  */
72611: BOOL APIENTRY DllMain(HINSTANCE hModule, 
72611:                       DWORD reason, 
72611:                       LPVOID lpReserved)
72611: {
72611:   switch (reason) {
72611:     case DLL_PROCESS_ATTACH:
72611:       /* Don't force the system to page DllMain back in every time
72611:        * we create/destroy a thread */
72611:       DisableThreadLibraryCalls(hModule);
72611:       /* Initialize the heap */
72611:       malloc_init_hard();
72611:       break;
72611:     
72611:     case DLL_PROCESS_DETACH:
72611:       break;
72611: 
72611:   }
72611: 
72611:   return TRUE;
72611: }
72611: 
72611: /*
72611:  *  There's a fun allocator mismatch in (at least) the VS 2010 CRT
72611:  *  (see the giant comment in this directory's Makefile.in
72611:  *  that gets redirected here to avoid a crash on shutdown.
72611:  */
72611: void
72611: je_dumb_free_thunk(void *ptr)
72611: {
72611:   return; /* shutdown leaks that we don't care about */
72611: }
72611: 
72611: #include <wchar.h>
72611: 
72611: /*
72611:  *  We also need to provide our own impl of wcsdup so that we don't ask
72611:  *  the CRT for memory from its heap (which will then be unfreeable).
72611:  */
72611: wchar_t *je_wcsdup(const wchar_t *src)
72611: {
72611:   size_t len = wcslen(src);
72611:   wchar_t* dst = (wchar_t*)je_malloc((len + 1) * sizeof(wchar_t));
72611:   if(dst)
72611:     wcsncpy(dst, src, len + 1);
72611:   return dst;
72611: }
72611: 
72611: #endif
