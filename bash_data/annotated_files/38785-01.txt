    1: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: #include "nspluginroot.idl"
29840: #include "nsIPlugin.idl"
36766: #include "nsIInputStream.idl"
    1: 
    1: interface nsIPluginInstance;
    1: interface nsIDocument;
    1: 
32019: %{C++
32019: #include "npapi.h"
32019: class nsPluginEvent;
32019: %}
32019: 
    1: [ref] native nsIPluginInstanceRef(nsIPluginInstance*);
    1: 
36766: [uuid(B48DC23E-C20B-4292-974E-E8FF97B9F1CC)]
    1: interface nsIPluginInstanceOwner : nsISupports
    1: {
    1:   /**
25454:    * Let the owner know what its instance is
    1:    */
    1:   void setInstance(in nsIPluginInstance aInstance);
    1: 
    1:   /**
    1:    * Get the instance associated with this owner.
    1:    */
    1:   void getInstance(in nsIPluginInstanceRef aInstance);
    1: 
    1:   /**
    1:    * Get a handle to the window structure of the owner.
    1:    * This pointer cannot be made persistent by the caller.
    1:    */
32799:   void getWindow(in NPWindowStarRef aWindow);
    1: 
    1:   /**
    1:    * Get the display mode for the plugin instance.
    1:    */
32799:   readonly attribute PRInt32 mode;
    1: 
    1:   /**
    1:    * Create a place for the plugin to live in the owner's
    1:    * environment. this may or may not create a window
    1:    * depending on the windowless state of the plugin instance.
    1:    */
    1:   void createWidget();
    1: 
    1: %{C++
    1:   /**
    1:    * Called when there is a valid target so that the proper
    1:    * frame can be updated with new content. will not be called
    1:    * with nsnull aTarget.
    1:    */
    1:   NS_IMETHOD
    1:   GetURL(const char *aURL, const char *aTarget, 
36766:          nsIInputStream *aPostStream,
36766:          void *aHeadersData, PRUint32 aHeadersDataLen) = 0;
32019: %}
    1: 
    1:   /**
    1:    * Show a status message in the host environment.
    1:    */
    1:   void showStatus(in string aStatusMsg);
    1: 
    1: %{C++
32019:   NS_IMETHOD ShowStatus(const PRUnichar *aStatusMsg) = 0;
    1: %}
    1: 
    1:   /**
    1:    * Get the associated document.
    1:    */
    1:   readonly attribute nsIDocument document;
    1: 
    1:   /**
    1:    * Invalidate the rectangle
    1:    */
32799:   void invalidateRect(in NPRectPtr aRect);
    1: 
    1:   /**
    1:    * Invalidate the region
    1:    */
32799:   void invalidateRegion(in NPRegion aRegion);
    1: 
    1:   /**
    1:    * Force a redraw
    1:    */
    1:   void forceRedraw();
    1: 
    1:   /**
29834:    * Get NetscapeWindow, corresponds to NPNVnetscapeWindow
    1:    */
29834:   void getNetscapeWindow(in voidPtr aValue);
32019: 
32019:   /**
32019:    * Show native context menu
32019:    */
32019: %{C++
32799:   virtual NPError ShowNativeContextMenu(NPMenu* menu, void* event) = 0;
32019:   virtual NPBool  ConvertPoint(double sourceX, double sourceY, NPCoordinateSpace sourceSpace,
32019:                                double *destX, double *destY, NPCoordinateSpace destSpace) = 0;
32019: %}
34717: 
34717:   void setEventModel(in PRInt32 eventModel);
36227: 
36227: %{C++
36227:   virtual void SendIdleEvent() = 0;
36227: %}
    1: };
