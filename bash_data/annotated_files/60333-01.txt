54814: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
54814:  * ***** BEGIN LICENSE BLOCK *****
54814:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
54814:  *
54814:  * The contents of this file are subject to the Mozilla Public License Version
54814:  * 1.1 (the "License"); you may not use this file except in compliance with
54814:  * the License. You may obtain a copy of the License at
54814:  * http://www.mozilla.org/MPL/
54814:  *
54814:  * Software distributed under the License is distributed on an "AS IS" basis,
54814:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
54814:  * for the specific language governing rights and limitations under the
54814:  * License.
54814:  *
54814:  * The Original Code is Mozilla Corporation code.
54814:  *
54814:  * The Initial Developer of the Original Code is Mozilla Foundation.
54814:  * Portions created by the Initial Developer are Copyright (C) 2009
54814:  * the Initial Developer. All Rights Reserved.
54814:  *
54814:  * Contributor(s):
54814:  *   Bas Schouten <bschouten@mozilla.com>
54814:  *
54814:  * Alternatively, the contents of this file may be used under the terms of
54814:  * either the GNU General Public License Version 2 or later (the "GPL"), or
54814:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
54814:  * in which case the provisions of the GPL or the LGPL are applicable instead
54814:  * of those above. If you wish to allow use of your version of this file only
54814:  * under the terms of either the GPL or the LGPL, and not to allow others to
54814:  * use your version of this file under the terms of the MPL, indicate your
54814:  * decision by deleting the provisions above and replace them with the notice
54814:  * and other provisions required by the GPL or the LGPL. If you do not delete
54814:  * the provisions above, a recipient may use your version of this file under
54814:  * the terms of any one of the MPL, the GPL or the LGPL.
54814:  *
54814:  * ***** END LICENSE BLOCK ***** */
54814: 
54814: #include "LayerManagerD3D10.h"
54814: #include "LayerManagerD3D10Effect.h"
54814: #include "gfxWindowsPlatform.h"
54814: #include "gfxD2DSurface.h"
54814: #include "cairo-win32.h"
54814: #include "dxgi.h"
54814: 
54814: #include "ContainerLayerD3D10.h"
54814: #include "ThebesLayerD3D10.h"
54814: #include "ColorLayerD3D10.h"
54814: #include "CanvasLayerD3D10.h"
54814: #include "ImageLayerD3D10.h"
54814: 
54814: namespace mozilla {
54814: namespace layers {
54814: 
54814: typedef HRESULT (WINAPI*D3D10CreateEffectFromMemoryFunc)(
54814:     void *pData,
54814:     SIZE_T DataLength,
54814:     UINT FXFlags,
54814:     ID3D10Device *pDevice, 
54814:     ID3D10EffectPool *pEffectPool,
54814:     ID3D10Effect **ppEffect
54814: );
54814: 
54814: struct Vertex
54814: {
54814:     float position[2];
54814: };
54814: 
54814: // {17F88CCB-1F49-4c08-8002-ADA7BD44856D}
54814: static const GUID sEffect = 
54814: { 0x17f88ccb, 0x1f49, 0x4c08, { 0x80, 0x2, 0xad, 0xa7, 0xbd, 0x44, 0x85, 0x6d } };
54814: // {19599D91-912C-4C2F-A8C5-299DE85FBD34}
54814: static const GUID sInputLayout = 
54814: { 0x19599d91, 0x912c, 0x4c2f, { 0xa8, 0xc5, 0x29, 0x9d, 0xe8, 0x5f, 0xbd, 0x34 } };
54814: // {293157D2-09C7-4680-AE27-C28E370E418B}
54814: static const GUID sVertexBuffer = 
54814: { 0x293157d2, 0x9c7, 0x4680, { 0xae, 0x27, 0xc2, 0x8e, 0x37, 0xe, 0x41, 0x8b } };
54814: 
54814: cairo_user_data_key_t gKeyD3D10Texture;
54814: 
54814: LayerManagerD3D10::LayerManagerD3D10(nsIWidget *aWidget)
54814:   : mWidget(aWidget)
54814: {
54814: }
54814: 
54814: LayerManagerD3D10::~LayerManagerD3D10()
54814: {
56116:   Destroy();
54814: }
54814: 
60236: static bool
60236: IsOptimus()
60236: {
60236:   return GetModuleHandleA("nvumdshim.dll");
60236: }
60236: 
54814: bool
54814: LayerManagerD3D10::Initialize()
54814: {
54814:   HRESULT hr;
54814: 
60089:   mDevice = gfxWindowsPlatform::GetPlatform()->GetD3D10Device();
60089:   if (!mDevice) {
54814:       return false;
54814:   }
54814: 
55202:   UINT size = sizeof(ID3D10Effect*);
54814:   if (FAILED(mDevice->GetPrivateData(sEffect, &size, mEffect.StartAssignment()))) {
54814:     D3D10CreateEffectFromMemoryFunc createEffect = (D3D10CreateEffectFromMemoryFunc)
54814: 	GetProcAddress(LoadLibraryA("d3d10_1.dll"), "D3D10CreateEffectFromMemory");
54814: 
54814:     if (!createEffect) {
54814:       return false;
54814:     }
54814: 
54814:     hr = createEffect((void*)g_main,
54814:                       sizeof(g_main),
54814:                       D3D10_EFFECT_SINGLE_THREADED,
54814:                       mDevice,
54814:                       NULL,
54814:                       getter_AddRefs(mEffect));
54814:     
54814:     if (FAILED(hr)) {
54814:       return false;
54814:     }
54814: 
54814:     mDevice->SetPrivateDataInterface(sEffect, mEffect);
54814:   }
54814: 
55202:   size = sizeof(ID3D10InputLayout*);
54814:   if (FAILED(mDevice->GetPrivateData(sInputLayout, &size, mInputLayout.StartAssignment()))) {
54814:     D3D10_INPUT_ELEMENT_DESC layout[] =
54814:     {
54814:       { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 0, D3D10_INPUT_PER_VERTEX_DATA, 0 },
54814:     };
54814:     D3D10_PASS_DESC passDesc;
54814:     mEffect->GetTechniqueByName("RenderRGBLayerPremul")->GetPassByIndex(0)->
54814:       GetDesc(&passDesc);
54814: 
54814:     hr = mDevice->CreateInputLayout(layout,
54814:                                     sizeof(layout) / sizeof(D3D10_INPUT_ELEMENT_DESC),
54814:                                     passDesc.pIAInputSignature,
54814:                                     passDesc.IAInputSignatureSize,
54814:                                     getter_AddRefs(mInputLayout));
54814:     
54814:     if (FAILED(hr)) {
54814:       return false;
54814:     }
54814: 
54814:     mDevice->SetPrivateDataInterface(sInputLayout, mInputLayout);
54814:   }
54814: 
55202:   size = sizeof(ID3D10Buffer*);
54814:   if (FAILED(mDevice->GetPrivateData(sVertexBuffer, &size, mVertexBuffer.StartAssignment()))) {
54814:     Vertex vertices[] = { {0.0, 0.0}, {1.0, 0.0}, {0.0, 1.0}, {1.0, 1.0} };
54814:     CD3D10_BUFFER_DESC bufferDesc(sizeof(vertices), D3D10_BIND_VERTEX_BUFFER);
54814:     D3D10_SUBRESOURCE_DATA data;
54814:     data.pSysMem = (void*)vertices;
54814: 
54814:     hr = mDevice->CreateBuffer(&bufferDesc, &data, getter_AddRefs(mVertexBuffer));
54814: 
54814:     if (FAILED(hr)) {
54814:       return false;
54814:     }
54814: 
54814:     mDevice->SetPrivateDataInterface(sVertexBuffer, mVertexBuffer);
54814:   }
54814: 
54814:   nsRefPtr<IDXGIDevice> dxgiDevice;
54814:   nsRefPtr<IDXGIAdapter> dxgiAdapter;
54814:   nsRefPtr<IDXGIFactory> dxgiFactory;
54814: 
54814:   mDevice->QueryInterface(dxgiDevice.StartAssignment());
54814:   dxgiDevice->GetAdapter(getter_AddRefs(dxgiAdapter));
54814: 
54814:   dxgiAdapter->GetParent(IID_PPV_ARGS(dxgiFactory.StartAssignment()));
54814: 
54814:   DXGI_SWAP_CHAIN_DESC swapDesc;
54814:   ::ZeroMemory(&swapDesc, sizeof(swapDesc));
54814: 
54814:   swapDesc.BufferDesc.Width = 0;
54814:   swapDesc.BufferDesc.Height = 0;
54814:   swapDesc.BufferDesc.Format = DXGI_FORMAT_B8G8R8A8_UNORM;
54814:   swapDesc.BufferDesc.RefreshRate.Numerator = 60;
54814:   swapDesc.BufferDesc.RefreshRate.Denominator = 1;
54814:   swapDesc.SampleDesc.Count = 1;
54814:   swapDesc.SampleDesc.Quality = 0;
54814:   swapDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
54814:   swapDesc.BufferCount = 1;
59294:   // We don't really need this flag, however it seems on some NVidia hardware
59396:   // smaller area windows do not present properly without this flag. This flag
60236:   // should have no negative consequences by itself. See bug 613790. This flag
60236:   // is broken on optimus devices. As a temporary solution we don't set it
60236:   // there, the only way of reliably detecting we're on optimus is looking for
60236:   // the DLL. See Bug 623807.
60236:   if (IsOptimus()) {
60236:     swapDesc.Flags = 0;
60236:   } else {
59294:     swapDesc.Flags = DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE;
60236:   }
54814:   swapDesc.OutputWindow = (HWND)mWidget->GetNativeData(NS_NATIVE_WINDOW);
54814:   swapDesc.Windowed = TRUE;
54814: 
54814:   /**
54814:    * Create a swap chain, this swap chain will contain the backbuffer for
54814:    * the window we draw to. The front buffer is the full screen front
54814:    * buffer.
54814:    */
54814:   hr = dxgiFactory->CreateSwapChain(dxgiDevice, &swapDesc, getter_AddRefs(mSwapChain));
54814: 
54814:   if (FAILED(hr)) {
54814:     return false;
54814:   }
54814: 
55201:   // We need this because we don't want DXGI to respond to Alt+Enter.
55201:   dxgiFactory->MakeWindowAssociation(swapDesc.OutputWindow, DXGI_MWA_NO_WINDOW_CHANGES);
55201: 
54814:   return true;
54814: }
54814: 
54814: void
56116: LayerManagerD3D10::Destroy()
56116: {
56116:   if (!IsDestroyed()) {
56116:     if (mRoot) {
56116:       static_cast<LayerD3D10*>(mRoot->ImplData())->LayerManagerDestroyed();
56116:     }
56116:   }
56116:   LayerManager::Destroy();
56116: }
56116: 
56116: void
54814: LayerManagerD3D10::SetRoot(Layer *aRoot)
54814: {
54814:   mRoot = aRoot;
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::BeginTransaction()
54814: {
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::BeginTransactionWithTarget(gfxContext* aTarget)
54814: {
54814:   mTarget = aTarget;
54814: }
54814: 
59171: void
54814: LayerManagerD3D10::EndTransaction(DrawThebesLayerCallback aCallback,
54814:                                   void* aCallbackData)
54814: {
54814:   mCurrentCallbackInfo.Callback = aCallback;
54814:   mCurrentCallbackInfo.CallbackData = aCallbackData;
57097: 
57097:   // The results of our drawing always go directly into a pixel buffer,
57097:   // so we don't need to pass any global transform here.
57097:   mRoot->ComputeEffectiveTransforms(gfx3DMatrix());
57097: 
54814:   Render();
54814:   mCurrentCallbackInfo.Callback = nsnull;
54814:   mCurrentCallbackInfo.CallbackData = nsnull;
54814:   mTarget = nsnull;
54814: }
54814: 
54814: already_AddRefed<ThebesLayer>
54814: LayerManagerD3D10::CreateThebesLayer()
54814: {
54814:   nsRefPtr<ThebesLayer> layer = new ThebesLayerD3D10(this);
54814:   return layer.forget();
54814: }
54814: 
54814: already_AddRefed<ContainerLayer>
54814: LayerManagerD3D10::CreateContainerLayer()
54814: {
54814:   nsRefPtr<ContainerLayer> layer = new ContainerLayerD3D10(this);
54814:   return layer.forget();
54814: }
54814: 
54814: already_AddRefed<ImageLayer>
54814: LayerManagerD3D10::CreateImageLayer()
54814: {
54814:   nsRefPtr<ImageLayer> layer = new ImageLayerD3D10(this);
54814:   return layer.forget();
54814: }
54814: 
54814: already_AddRefed<ColorLayer>
54814: LayerManagerD3D10::CreateColorLayer()
54814: {
54814:   nsRefPtr<ColorLayer> layer = new ColorLayerD3D10(this);
54814:   return layer.forget();
54814: }
54814: 
54814: already_AddRefed<CanvasLayer>
54814: LayerManagerD3D10::CreateCanvasLayer()
54814: {
54814:   nsRefPtr<CanvasLayer> layer = new CanvasLayerD3D10(this);
54814:   return layer.forget();
54814: }
54814: 
54814: already_AddRefed<ImageContainer>
54814: LayerManagerD3D10::CreateImageContainer()
54814: {
59719:   nsRefPtr<ImageContainer> layer = new ImageContainerD3D10(mDevice);
54814:   return layer.forget();
54814: }
54814: 
54814: static void ReleaseTexture(void *texture)
54814: {
54814:   static_cast<ID3D10Texture2D*>(texture)->Release();
54814: }
54814: 
54814: already_AddRefed<gfxASurface>
54814: LayerManagerD3D10::CreateOptimalSurface(const gfxIntSize &aSize,
54814:                                    gfxASurface::gfxImageFormat aFormat)
54814: {
54814:   if ((aFormat != gfxASurface::ImageFormatRGB24 &&
54814:        aFormat != gfxASurface::ImageFormatARGB32)) {
54814:     return LayerManager::CreateOptimalSurface(aSize, aFormat);
54814:   }
54814: 
54814:   nsRefPtr<ID3D10Texture2D> texture;
54814:   
54814:   CD3D10_TEXTURE2D_DESC desc(DXGI_FORMAT_B8G8R8A8_UNORM, aSize.width, aSize.height, 1, 1);
54814:   desc.BindFlags = D3D10_BIND_RENDER_TARGET | D3D10_BIND_SHADER_RESOURCE;
54814:   desc.MiscFlags = D3D10_RESOURCE_MISC_GDI_COMPATIBLE;
54814:   
54814:   HRESULT hr = device()->CreateTexture2D(&desc, NULL, getter_AddRefs(texture));
54814: 
54814:   if (FAILED(hr)) {
54814:     NS_WARNING("Failed to create new texture for CreateOptimalSurface!");
54814:     return LayerManager::CreateOptimalSurface(aSize, aFormat);
54814:   }
54814: 
54814:   nsRefPtr<gfxD2DSurface> surface =
54814:     new gfxD2DSurface(texture, aFormat == gfxASurface::ImageFormatRGB24 ?
54814:       gfxASurface::CONTENT_COLOR : gfxASurface::CONTENT_COLOR_ALPHA);
54814: 
54814:   if (!surface || surface->CairoStatus()) {
54814:     return LayerManager::CreateOptimalSurface(aSize, aFormat);
54814:   }
54814: 
54814:   surface->SetData(&gKeyD3D10Texture,
54814:                    texture.forget().get(),
54814:                    ReleaseTexture);
54814: 
54814:   return surface.forget();
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::SetViewport(const nsIntSize &aViewport)
54814: {
54814:   mViewport = aViewport;
54814: 
54814:   D3D10_VIEWPORT viewport;
54814:   viewport.MaxDepth = 1.0f;
54814:   viewport.MinDepth = 0;
54814:   viewport.Width = aViewport.width;
54814:   viewport.Height = aViewport.height;
54814:   viewport.TopLeftX = 0;
54814:   viewport.TopLeftY = 0;
54814: 
54814:   mDevice->RSSetViewports(1, &viewport);
54814: 
54814:   gfx3DMatrix projection;
54814:   /*
54814:    * Matrix to transform to viewport space ( <-1.0, 1.0> topleft,
54814:    * <1.0, -1.0> bottomright)
54814:    */
54814:   projection._11 = 2.0f / aViewport.width;
54814:   projection._22 = -2.0f / aViewport.height;
54814:   projection._33 = 1.0f;
54814:   projection._41 = -1.0f;
54814:   projection._42 = 1.0f;
54814:   projection._44 = 1.0f;
54814: 
54814:   HRESULT hr = mEffect->GetVariableByName("mProjection")->
54814:     SetRawValue(&projection._11, 0, 64);
54814: 
54814:   if (FAILED(hr)) {
54814:     NS_WARNING("Failed to set projection matrix.");
54814:   }
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::SetupPipeline()
54814: {
54814:   VerifyBufferSize();
54814:   UpdateRenderTarget();
54814: 
54814:   nsIntRect rect;
54814:   mWidget->GetClientBounds(rect);
54814: 
54814:   HRESULT hr;
54814: 
54814:   hr = mEffect->GetVariableByName("vTextureCoords")->AsVector()->
54814:     SetFloatVector(ShaderConstantRectD3D10(0, 0, 1.0f, 1.0f));
54814: 
54814:   if (FAILED(hr)) {
54814:     NS_WARNING("Failed to set Texture Coordinates.");
54814:     return;
54814:   }
54814: 
54814:   ID3D10RenderTargetView *view = mRTView;
54814:   mDevice->OMSetRenderTargets(1, &view, NULL);
54814:   mDevice->IASetInputLayout(mInputLayout);
54814: 
54814:   UINT stride = sizeof(Vertex);
54814:   UINT offset = 0;
54814:   ID3D10Buffer *buffer = mVertexBuffer;
54814:   mDevice->IASetVertexBuffers(0, 1, &buffer, &stride, &offset);
54814:   mDevice->IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);
54814: 
54814:   SetViewport(nsIntSize(rect.width, rect.height));
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::UpdateRenderTarget()
54814: {
54814:   if (mRTView) {
54814:     return;
54814:   }
54814: 
54814:   HRESULT hr;
54814: 
54814:   nsRefPtr<ID3D10Texture2D> backBuf;
54814:   
54814:   hr = mSwapChain->GetBuffer(0, __uuidof(ID3D10Texture2D), (void**)backBuf.StartAssignment());
54814:   if (FAILED(hr)) {
54814:     return;
54814:   }
54814:   
54814:   mDevice->CreateRenderTargetView(backBuf, NULL, getter_AddRefs(mRTView));
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::VerifyBufferSize()
54814: {
54814:   DXGI_SWAP_CHAIN_DESC swapDesc;
54814:   mSwapChain->GetDesc(&swapDesc);
54814: 
54814:   nsIntRect rect;
54814:   mWidget->GetClientBounds(rect);
54814: 
54814:   if (swapDesc.BufferDesc.Width == rect.width &&
54814:       swapDesc.BufferDesc.Height == rect.height) {
54814:     return;
54814:   }
54814: 
54814:   mRTView = nsnull;
60236:   if (IsOptimus()) {
60236:     mSwapChain->ResizeBuffers(1, rect.width, rect.height,
60236:                               DXGI_FORMAT_B8G8R8A8_UNORM,
60236:                               0);
60236:   } else {
54814:     mSwapChain->ResizeBuffers(1, rect.width, rect.height,
59294:                               DXGI_FORMAT_B8G8R8A8_UNORM,
59294:                               DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE);
60236:   }
54814: 
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::Render()
54814: {
54814:   if (mRoot) {
54814:     static_cast<LayerD3D10*>(mRoot->ImplData())->Validate();
54814:   }
54814: 
54814:   SetupPipeline();
54814: 
54814:   float black[] = { 0, 0, 0, 0 };
54814:   device()->ClearRenderTargetView(mRTView, black);
54814: 
54814:   nsIntRect rect;
54814:   mWidget->GetClientBounds(rect);
54814: 
54814:   if (mRoot) {
54814:     const nsIntRect *clipRect = mRoot->GetClipRect();
54814:     D3D10_RECT r;
54814:     if (clipRect) {
54814:       r.left = (LONG)clipRect->x;
54814:       r.top = (LONG)clipRect->y;
54814:       r.right = (LONG)(clipRect->x + clipRect->width);
54814:       r.bottom = (LONG)(clipRect->y + clipRect->height);
54814:     } else {
54814:       r.left = r.top = 0;
54814:       r.right = rect.width;
54814:       r.bottom = rect.height;
54814:     }
54814:     device()->RSSetScissorRects(1, &r);
54814: 
57097:     static_cast<LayerD3D10*>(mRoot->ImplData())->RenderLayer();
54814:   }
54814: 
54814:   if (mTarget) {
54814:     PaintToTarget();
54814:   } else {
54814:     mSwapChain->Present(0, 0);
54814:   }
54814: }
54814: 
54814: void
54814: LayerManagerD3D10::PaintToTarget()
54814: {
54814:   nsRefPtr<ID3D10Texture2D> backBuf;
54814:   
54814:   mSwapChain->GetBuffer(0, __uuidof(ID3D10Texture2D), (void**)backBuf.StartAssignment());
54814: 
54814:   D3D10_TEXTURE2D_DESC bbDesc;
54814:   backBuf->GetDesc(&bbDesc);
54814: 
54814:   CD3D10_TEXTURE2D_DESC softDesc(bbDesc.Format, bbDesc.Width, bbDesc.Height);
54814:   softDesc.MipLevels = 1;
54814:   softDesc.CPUAccessFlags = D3D10_CPU_ACCESS_READ;
54814:   softDesc.Usage = D3D10_USAGE_STAGING;
54814:   softDesc.BindFlags = 0;
54814: 
54814:   nsRefPtr<ID3D10Texture2D> readTexture;
54814: 
54814:   device()->CreateTexture2D(&softDesc, NULL, getter_AddRefs(readTexture));
54814: 
54814:   device()->CopyResource(readTexture, backBuf);
54814: 
54814:   D3D10_MAPPED_TEXTURE2D map;
54814:   readTexture->Map(0, D3D10_MAP_READ, 0, &map);
54814: 
54814:   nsRefPtr<gfxImageSurface> tmpSurface =
54814:     new gfxImageSurface((unsigned char*)map.pData,
54814:                         gfxIntSize(bbDesc.Width, bbDesc.Height),
54814:                         map.RowPitch,
54814:                         gfxASurface::ImageFormatARGB32);
54814: 
54814:   mTarget->SetSource(tmpSurface);
56115:   mTarget->SetOperator(gfxContext::OPERATOR_OVER);
54814:   mTarget->Paint();
56115: 
56115:   readTexture->Unmap(0);
54814: }
54814: 
60333: void
60333: LayerManagerD3D10::ReportFailure(const nsACString &aMsg, HRESULT aCode)
60333: {
60333:   // We could choose to abort here when hr == E_OUTOFMEMORY.
60333:   nsCString msg;
60333:   msg.Append(aMsg);
60333:   msg.AppendLiteral(" Error code: ");
60333:   msg.AppendInt(PRUint32(aCode));
60333:   NS_WARNING(msg.BeginReading());
60333: }
60333: 
54814: LayerD3D10::LayerD3D10(LayerManagerD3D10 *aManager)
54814:   : mD3DManager(aManager)
54814: {
54814: }
54814: 
54814: }
54814: }
