    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: #ifndef _nsNativeDragTarget_h_
    1: #define _nsNativeDragTarget_h_
    1: 
    1: #include "nsCOMPtr.h"
    1: #include "nsIDragSession.h"
    1: #include <ole2.h>
 8112: #include <shlobj.h>
12927: 
 8112: #ifndef IDropTargetHelper
12927: #ifndef __MINGW32__   // MingW does not provide shobjidl.h.
 8112: #include <shobjidl.h> // Vista drag image interfaces
12927: #endif  // MingW
 8112: #endif
    1: 
    1: class nsIDragService;
    1: class nsIWidget;
    1: 
    1: struct IDataObject;
    1: 
    1: /*
    1:  * nsNativeDragTarget implements the IDropTarget interface and gets most of its
    1:  * behavior from the associated adapter (m_dragDrop).
    1:  */
    1: 
    1: class nsNativeDragTarget : public IDropTarget
    1: {
    1: public:
    1:   nsNativeDragTarget(nsIWidget * aWnd);
    1:   ~nsNativeDragTarget();
    1: 
    1:   // IUnknown members - see iunknown.h for documentation
    1:   STDMETHODIMP QueryInterface(REFIID, void**);
    1:   STDMETHODIMP_(ULONG) AddRef();
    1:   STDMETHODIMP_(ULONG) Release();
    1: 
    1:   // IDataTarget members
    1: 
    1:   // Set pEffect based on whether this object can support a drop based on
    1:   // the data available from pSource, the key and mouse states specified
    1:   // in grfKeyState, and the coordinates specified by point. This is
    1:   // called by OLE when a drag enters this object's window (as registered
    1:   // by Initialize).
    1:   STDMETHODIMP DragEnter(LPDATAOBJECT pSource, DWORD grfKeyState,
    1:                          POINTL point, DWORD* pEffect);
    1: 
    1:   // Similar to DragEnter except it is called frequently while the drag
    1:   // is over this object's window.
    1:   STDMETHODIMP DragOver(DWORD grfKeyState, POINTL point, DWORD* pEffect);
    1: 
    1:   // Release the drag-drop source and put internal state back to the point
    1:   // before the call to DragEnter. This is called when the drag leaves
    1:   // without a drop occurring.
    1:   STDMETHODIMP DragLeave();
    1: 
    1:   // If point is within our region of interest and pSource's data supports
    1:   // one of our formats, get the data and set pEffect according to
    1:   // grfKeyState (DROPEFFECT_MOVE if the control key was not pressed,
    1:   // DROPEFFECT_COPY if the control key was pressed). Otherwise return
    1:   // E_FAIL.
    1:   STDMETHODIMP Drop(LPDATAOBJECT pSource, DWORD grfKeyState,
    1:                     POINTL point, DWORD* pEffect);
42532:   /**
42532:    * Cancel the current drag session, if any.
42532:    */
42532:   void DragCancel();
 6417: 
    1: protected:
    1: 
    1:   void GetGeckoDragAction(LPDATAOBJECT pData, DWORD grfKeyState,
    1:                           LPDWORD pdwEffect, PRUint32 * aGeckoAction);
    1:   void ProcessDrag(LPDATAOBJECT pData, PRUint32 aEventType, DWORD grfKeyState,
    1:                    POINTL pt, DWORD* pdwEffect);
    1:   void DispatchDragDropEvent(PRUint32 aType, POINTL pt);
    1: 
    1:   // Native Stuff
    1:   ULONG            m_cRef;      // reference count
    1:   HWND             mHWnd;
    1:   PRBool           mCanMove;
19097:   PRBool           mMovePreferred;
23271:   PRBool           mTookOwnRef;
    1: 
    1:   // Gecko Stuff
    1:   nsIWidget      * mWindow;
    1:   nsIDragService * mDragService;
 8112: 
 8112:   // Drag target helper 
 8112:   IDropTargetHelper * mDropTargetHelper;
    1: };
    1: 
    1: #endif // _nsNativeDragTarget_h_
    1: 
    1: 
