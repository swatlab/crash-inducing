42611: /* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
42611:  * ***** BEGIN LICENSE BLOCK *****
42611:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
42611:  *
42611:  * The contents of this file are subject to the Mozilla Public License Version
42611:  * 1.1 (the "License"); you may not use this file except in compliance with
42611:  * the License. You may obtain a copy of the License at
42611:  * http://www.mozilla.org/MPL/
42611:  *
42611:  * Software distributed under the License is distributed on an "AS IS" basis,
42611:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
42611:  * for the specific language governing rights and limitations under the
42611:  * License.
42611:  *
42611:  * The Original Code is Mozilla Corporation code.
42611:  *
42611:  * The Initial Developer of the Original Code is Mozilla Foundation.
42611:  * Portions created by the Initial Developer are Copyright (C) 2009
42611:  * the Initial Developer. All Rights Reserved.
42611:  *
42611:  * Contributor(s):
42611:  *   Bas Schouten <bschouten@mozilla.com>
42611:  *
42611:  * Alternatively, the contents of this file may be used under the terms of
42611:  * either the GNU General Public License Version 2 or later (the "GPL"), or
42611:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
42611:  * in which case the provisions of the GPL or the LGPL are applicable instead
42611:  * of those above. If you wish to allow use of your version of this file only
42611:  * under the terms of either the GPL or the LGPL, and not to allow others to
42611:  * use your version of this file under the terms of the MPL, indicate your
42611:  * decision by deleting the provisions above and replace them with the notice
42611:  * and other provisions required by the GPL or the LGPL. If you do not delete
42611:  * the provisions above, a recipient may use your version of this file under
42611:  * the terms of any one of the MPL, the GPL or the LGPL.
42611:  *
42611:  * ***** END LICENSE BLOCK ***** */
42611: 
42611: #include "ThebesLayerD3D9.h"
42611: #include "gfxPlatform.h"
42611: 
47366: #include "gfxWindowsPlatform.h"
49323: #ifdef CAIRO_HAS_D2D_SURFACE
49323: #include "gfxD2DSurface.h"
49323: #endif
47366: 
42611: namespace mozilla {
42611: namespace layers {
42611: 
42611: ThebesLayerD3D9::ThebesLayerD3D9(LayerManagerD3D9 *aManager)
42611:   : ThebesLayer(aManager, NULL)
42611:   , LayerD3D9(aManager)
51921:   , mD2DSurfaceInitialized(false)
42611: {
42611:   mImplData = static_cast<LayerD3D9*>(this);
53783:   aManager->deviceManager()->mLayersWithResources.AppendElement(this);
42611: }
42611: 
42611: ThebesLayerD3D9::~ThebesLayerD3D9()
42611: {
53980:   if (mD3DManager) {
53783:     mD3DManager->deviceManager()->mLayersWithResources.RemoveElement(this);
42611:   }
51977: }
42611: 
47109: /**
47109:  * Retention threshold - amount of pixels intersection required to enable
47109:  * layer content retention. This is a guesstimate. Profiling could be done to
47109:  * figure out the optimal threshold.
47109:  */
47109: #define RETENTION_THRESHOLD 16384
42611: 
42611: void
42611: ThebesLayerD3D9::SetVisibleRegion(const nsIntRegion &aRegion)
42611: {
42956:   if (aRegion.IsEqual(mVisibleRegion)) {
42611:     return;
42611:   }
47366: 
47109:   nsIntRegion oldVisibleRegion = mVisibleRegion;
47366:   ThebesLayer::SetVisibleRegion(aRegion);
47366: 
47366:   if (!mTexture) {
47366:     // If we don't need to retain content initialize lazily. This is good also
47366:     // because we might get mIsOpaqueSurface set later than the first call to
47366:     // SetVisibleRegion.
47366:     return;
47366:   }
47366: 
51950:   D3DFORMAT fmt = (CanUseOpaqueSurface() && !mD2DSurface) ?
49323:                     D3DFMT_X8R8G8B8 : D3DFMT_A8R8G8B8;
47366: 
47366:   D3DSURFACE_DESC desc;
47366:   mTexture->GetLevelDesc(0, &desc);
47366: 
47366:   if (fmt != desc.Format) {
47366:     // The new format isn't compatible with the old texture, toss out the old
47366:     // texture.
47366:     mTexture = nsnull;
47366:   }
47366: 
53680:   VerifyContentType();
53680: 
47109:   nsRefPtr<IDirect3DTexture9> oldTexture = mTexture;
47109: 
47109:   nsIntRect oldBounds = oldVisibleRegion.GetBounds();
47109:   nsIntRect newBounds = mVisibleRegion.GetBounds();
47109: 
49323:   CreateNewTexture(gfxIntSize(newBounds.width, newBounds.height));
47109: 
47109:   // Old visible region will become the region that is covered by both the
47109:   // old and the new visible region.
47109:   oldVisibleRegion.And(oldVisibleRegion, mVisibleRegion);
47109:   // No point in retaining parts which were not valid.
47109:   oldVisibleRegion.And(oldVisibleRegion, mValidRegion);
47109: 
47109:   nsIntRect largeRect = oldVisibleRegion.GetLargestRectangle();
47109: 
47109:   // If we had no hardware texture before or have no retained area larger than
47109:   // the retention threshold, we're not retaining and are done here. If our
47109:   // texture creation failed this can mean a device reset is pending and we
47109:   // should silently ignore the failure. In the future when device failures
47109:   // are properly handled we should test for the type of failure and gracefully
47109:   // handle different failures. See bug 569081.
47109:   if (!oldTexture || !mTexture ||
47109:       largeRect.width * largeRect.height < RETENTION_THRESHOLD) {
47109:     mValidRegion.SetEmpty();
47109:     return;
47109:   }
47109: 
47109:   nsRefPtr<IDirect3DSurface9> srcSurface, dstSurface;
47109:   oldTexture->GetSurfaceLevel(0, getter_AddRefs(srcSurface));
47109:   mTexture->GetSurfaceLevel(0, getter_AddRefs(dstSurface));
47109: 
47109:   nsIntRegion retainedRegion;
47109:   nsIntRegionRectIterator iter(oldVisibleRegion);
47109:   const nsIntRect *r;
47109:   while ((r = iter.Next())) {
47109:     if (r->width * r->height > RETENTION_THRESHOLD) {
47109:       RECT oldRect, newRect;
47109: 
47109:       // Calculate the retained rectangle's position on the old and the new
47109:       // surface.
47109:       oldRect.left = r->x - oldBounds.x;
47109:       oldRect.top = r->y - oldBounds.y;
47109:       oldRect.right = oldRect.left + r->width;
47109:       oldRect.bottom = oldRect.top + r->height;
47109: 
47109:       newRect.left = r->x - newBounds.x;
47109:       newRect.top = r->y - newBounds.y;
47109:       newRect.right = newRect.left + r->width;
47109:       newRect.bottom = newRect.top + r->height;
47109: 
47109:       // Copy data from our old texture to the new one
47109:       HRESULT hr = device()->
47109:         StretchRect(srcSurface, &oldRect, dstSurface, &newRect, D3DTEXF_NONE);
47109: 
47109:       if (SUCCEEDED(hr)) {
47109:         retainedRegion.Or(retainedRegion, *r);
47109:       }
47109:     }
47109:   }
47109: 
47109:   // Areas which were valid and were retained are still valid
47109:   mValidRegion.And(mValidRegion, retainedRegion);  
42611: }
42611: 
42611: 
42611: void
42611: ThebesLayerD3D9::InvalidateRegion(const nsIntRegion &aRegion)
42611: {
47109:   mValidRegion.Sub(mValidRegion, aRegion);
42611: }
42611: 
42611: void
42611: ThebesLayerD3D9::RenderLayer()
42611: {
47109:   if (mVisibleRegion.IsEmpty()) {
47109:     return;
47109:   }
47366: 
42956:   nsIntRect visibleRect = mVisibleRegion.GetBounds();
42956: 
47367:   // We differentiate between these formats since D3D9 will only allow us to
47367:   // call GetDC on an opaque surface.
51950:   D3DFORMAT fmt = (CanUseOpaqueSurface() && !mD2DSurface) ?
49323:                     D3DFMT_X8R8G8B8 : D3DFMT_A8R8G8B8;
49323: 
47366:   if (mTexture) {
47366:     D3DSURFACE_DESC desc;
47366:     mTexture->GetLevelDesc(0, &desc);
47366: 
47366:     if (fmt != desc.Format) {
47366:       // The new format isn't compatible with the old texture, toss out the old
47366:       // texture.
47366:       mTexture = nsnull;
47366:       mValidRegion.SetEmpty();
47366:     }
47366:   }
47366: 
53680:   VerifyContentType();
53680: 
42611:   if (!mTexture) {
49323:     CreateNewTexture(gfxIntSize(visibleRect.width, visibleRect.height));
54660:     
54660:     if (!mTexture) {
54660: 	NS_WARNING("Failed to create texture for thebes layer - not drawing.");
54660: 	return;
54660:     }
54660: 
47109:     mValidRegion.SetEmpty();
42611:   }
47109: 
52176:   if (!mValidRegion.IsEqual(mVisibleRegion)) {
52032:     /* We use the bounds of the visible region because we draw the bounds of
52032:      * this region when we draw this entire texture. We have to make sure that
52032:      * the areas that aren't filled with content get their background drawn.
52032:      * This is an issue for opaque surfaces, which otherwise won't get their
52032:      * background painted.
52032:      */
47109:     nsIntRegion region;
52176:     region.Sub(mVisibleRegion, mValidRegion);
42611: 
49323:     DrawRegion(region);
42611: 
52176:     mValidRegion = mVisibleRegion;
42611:   }
42611: 
42611:   float quadTransform[4][4];
42611:   /*
42611:    * Matrix to transform the <0.0,0.0>, <1.0,1.0> quad to the correct position
52176:    * and size.
42611:    */
42611:   memset(&quadTransform, 0, sizeof(quadTransform));
42611:   quadTransform[2][2] = 1.0f;
42611:   quadTransform[3][3] = 1.0f;
42611: 
42611:   device()->SetVertexShaderConstantF(4, &mTransform._11, 4);
42611: 
42611:   float opacity[4];
42611:   /*
42611:    * We always upload a 4 component float, but the shader will use only the
42611:    * first component since it's declared as a 'float'.
42611:    */
42611:   opacity[0] = GetOpacity();
42611:   device()->SetPixelShaderConstantF(0, opacity, 1);
42611: 
51963: #ifdef CAIRO_HAS_D2D_SURFACE
51965:   if (mD2DSurface && CanUseOpaqueSurface()) {
49316:     mD3DManager->SetShaderMode(DeviceManagerD3D9::RGBLAYER);
51963:   } else
51963: #endif
51963:   mD3DManager->SetShaderMode(DeviceManagerD3D9::RGBALAYER);
42611: 
42611:   device()->SetTexture(0, mTexture);
52176: 
52176:   nsIntRegionRectIterator iter(mVisibleRegion);
52176: 
52176:   const nsIntRect *iterRect;
52176:   while ((iterRect = iter.Next())) {
52176:     quadTransform[0][0] = (float)iterRect->width;
52176:     quadTransform[1][1] = (float)iterRect->height;
52176:     quadTransform[3][0] = (float)iterRect->x;
52176:     quadTransform[3][1] = (float)iterRect->y;
52176:     
52176:     device()->SetVertexShaderConstantF(0, &quadTransform[0][0], 4);
52176:     device()->SetVertexShaderConstantF(13, ShaderConstantRect(
52176:         (float)(iterRect->x - visibleRect.x) / (float)visibleRect.width,
52176:         (float)(iterRect->y - visibleRect.y) / (float)visibleRect.height,
52176:         (float)iterRect->width / (float)visibleRect.width,
52176:         (float)iterRect->height / (float)visibleRect.height), 1);
42611:     device()->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
42611:   }
42611: 
52176:   // Set back to default.
52176:   device()->SetVertexShaderConstantF(13, ShaderConstantRect(0, 0, 1.0f, 1.0f), 1);
52176: }
52176: 
42611: void
42611: ThebesLayerD3D9::CleanResources()
42611: {
42611:   mTexture = nsnull;
42611: }
42611: 
53979: void
53979: ThebesLayerD3D9::LayerManagerDestroyed()
53979: {
53979:   mD3DManager->deviceManager()->mLayersWithResources.RemoveElement(this);
53979:   mD3DManager = nsnull;
53979: }
53979: 
42611: Layer*
42611: ThebesLayerD3D9::GetLayer()
42611: {
42611:   return this;
42611: }
42611: 
42611: PRBool
42611: ThebesLayerD3D9::IsEmpty()
42611: {
42611:   return !mTexture;
42611: }
42611: 
49323: void
53680: ThebesLayerD3D9::VerifyContentType()
53680: {
53680: #ifdef CAIRO_HAS_D2D_SURFACE
53680:   if (mD2DSurface) {
53680:     gfxASurface::gfxContentType type = CanUseOpaqueSurface() ?
53680:       gfxASurface::CONTENT_COLOR : gfxASurface::CONTENT_COLOR_ALPHA;
53680: 
53680:     if (type != mD2DSurface->GetContentType()) {
53680:       // We could choose to recreate only the D2D surface, but since we can't
53680:       // use retention the synchronisation overhead probably isn't worth it.
53680:       mD2DSurface = nsnull;
53680:       mTexture = nsnull;
53680:     }
53680:   }
53680: #endif
53680: }
53680: 
53680: void
49323: ThebesLayerD3D9::DrawRegion(const nsIntRegion &aRegion)
49323: {
49323:   HRESULT hr;
49323:   nsIntRect visibleRect = mVisibleRegion.GetBounds();
49323:   nsRefPtr<gfxContext> context;
49323: 
49323: #ifdef CAIRO_HAS_D2D_SURFACE
49323:   if (mD2DSurface) {
49323:     context = new gfxContext(mD2DSurface);
49323:     nsIntRegionRectIterator iter(aRegion);
51921: 
49323:     context->Translate(gfxPoint(-visibleRect.x, -visibleRect.y));
49323:     context->NewPath();
49323:     const nsIntRect *iterRect;
49323:     while ((iterRect = iter.Next())) {
49323:       context->Rectangle(gfxRect(iterRect->x, iterRect->y, iterRect->width, iterRect->height));      
49323:     }
49323:     context->Clip();
51921:     if (!mD2DSurfaceInitialized || 
51921:         mD2DSurface->GetContentType() != gfxASurface::CONTENT_COLOR) {
49323:       context->SetOperator(gfxContext::OPERATOR_CLEAR);
49323:       context->Paint();
49323:       context->SetOperator(gfxContext::OPERATOR_OVER);
51921:       mD2DSurfaceInitialized = true;
49323:     }
51921: 
49323:     LayerManagerD3D9::CallbackInfo cbInfo = mD3DManager->GetCallbackInfo();
49323:     cbInfo.Callback(this, context, aRegion, nsIntRegion(), cbInfo.CallbackData);
49323:     mD2DSurface->Flush();
49323: 
49323:     // XXX - This call is quite expensive, we may want to consider doing our
49323:     // drawing in a seperate 'validation' iteration. And then flushing once for
49323:     // all the D2D surfaces we might have drawn, before doing our D3D9 rendering
49323:     // loop.
49323:     cairo_d2d_finish_device(gfxWindowsPlatform::GetPlatform()->GetD2DDevice());
49323:     return;
49323:   }
49323: #endif
49323: 
51950:   D3DFORMAT fmt = CanUseOpaqueSurface() ? D3DFMT_X8R8G8B8 : D3DFMT_A8R8G8B8;
49323:   nsIntRect bounds = aRegion.GetBounds();
49323: 
49323:   gfxASurface::gfxImageFormat imageFormat = gfxASurface::ImageFormatARGB32;
49323:   nsRefPtr<gfxASurface> destinationSurface;
49323: 
49323:   nsRefPtr<IDirect3DTexture9> tmpTexture;
49323:   device()->CreateTexture(bounds.width, bounds.height, 1,
49323:                           0, fmt,
49323:                           D3DPOOL_SYSTEMMEM, getter_AddRefs(tmpTexture), NULL);
49323: 
49323:   nsRefPtr<IDirect3DSurface9> surf;
49323:   HDC dc;
51950:   if (CanUseOpaqueSurface()) {
49323:     hr = tmpTexture->GetSurfaceLevel(0, getter_AddRefs(surf));
49323: 
49323:     if (FAILED(hr)) {
49323:       // Uh-oh, bail.
49323:       NS_WARNING("Failed to get texture surface level.");
49323:       return;
49323:     }
49323: 
49323:     hr = surf->GetDC(&dc);
49323: 
49323:     if (FAILED(hr)) {
49323:       NS_WARNING("Failed to get device context for texture surface.");
49323:       return;
49323:     }
49323: 
49323:     destinationSurface = new gfxWindowsSurface(dc);
49323:   } else {
49323:     // XXX - We may consider retaining a SYSTEMMEM texture texture the size
49323:     // of our DEFAULT texture and then use UpdateTexture and add dirty rects
49323:     // to update in a single call.
49323:     destinationSurface =
49323:     gfxPlatform::GetPlatform()->
49323:       CreateOffscreenSurface(gfxIntSize(bounds.width,
49323:                                         bounds.height),
54254:                              gfxASurface::ContentFromFormat(imageFormat));
49323:   }
49323: 
49323:   context = new gfxContext(destinationSurface);
49323:   context->Translate(gfxPoint(-bounds.x, -bounds.y));
49323:   LayerManagerD3D9::CallbackInfo cbInfo = mD3DManager->GetCallbackInfo();
49323:   cbInfo.Callback(this, context, aRegion, nsIntRegion(), cbInfo.CallbackData);
49323: 
51950:   if (CanUseOpaqueSurface()) {
49323:     surf->ReleaseDC(dc);
49323:   } else {
49323:     D3DLOCKED_RECT r;
49323:     tmpTexture->LockRect(0, &r, NULL, 0);
49323: 
49323:     nsRefPtr<gfxImageSurface> imgSurface =
49323:     new gfxImageSurface((unsigned char *)r.pBits,
49323:                         gfxIntSize(bounds.width,
49323:                                    bounds.height),
49323:                         r.Pitch,
49323:                         imageFormat);
49323: 
49323:     context = new gfxContext(imgSurface);
49323:     context->SetSource(destinationSurface);
49323:     context->SetOperator(gfxContext::OPERATOR_SOURCE);
49323:     context->Paint();
49323: 
49323:     imgSurface = NULL;
49323: 
49323:     tmpTexture->UnlockRect(0);
49323:   }
49323: 
49323:   nsRefPtr<IDirect3DSurface9> srcSurface;
49323:   nsRefPtr<IDirect3DSurface9> dstSurface;
49323: 
49323:   mTexture->GetSurfaceLevel(0, getter_AddRefs(dstSurface));
49323:   tmpTexture->GetSurfaceLevel(0, getter_AddRefs(srcSurface));
49323: 
49323:   nsIntRegionRectIterator iter(aRegion);
49323:   const nsIntRect *iterRect;
49323:   while ((iterRect = iter.Next())) {
49323:     RECT rect;
49323:     rect.left = iterRect->x - bounds.x;
49323:     rect.top = iterRect->y - bounds.y;
49323:     rect.right = rect.left + iterRect->width;
49323:     rect.bottom = rect.top + iterRect->height;
49323:     POINT point;
49323:     point.x = iterRect->x - visibleRect.x;
49323:     point.y = iterRect->y - visibleRect.y;
49323:     device()->UpdateSurface(srcSurface, &rect, dstSurface, &point);
49323:   }
49323: }
49323: 
49323: void
49323: ThebesLayerD3D9::CreateNewTexture(const gfxIntSize &aSize)
49323: {
49323:   if (aSize.width == 0 | aSize.height == 0) {
49323:     // Nothing to do.
49323:     return;
49323:   }
49323: 
49323:   mTexture = nsnull;
51950:   PRBool canUseOpaqueSurface = CanUseOpaqueSurface();
49323: #ifdef CAIRO_HAS_D2D_SURFACE
49323:   if (gfxWindowsPlatform::GetPlatform()->GetRenderMode() ==
49323:       gfxWindowsPlatform::RENDER_DIRECT2D) {
49323:         if (mD3DManager->deviceManager()->IsD3D9Ex()) {
49323:           // We should have D3D9Ex where we have D2D.
49323:           HANDLE sharedHandle = 0;
49323:           device()->CreateTexture(aSize.width, aSize.height, 1,
49323:                                   D3DUSAGE_RENDERTARGET, D3DFMT_A8R8G8B8,
49323:                                   D3DPOOL_DEFAULT, getter_AddRefs(mTexture), &sharedHandle);
49323: 
51921:           mD2DSurfaceInitialized = false;
51950:           mD2DSurface = new gfxD2DSurface(sharedHandle, canUseOpaqueSurface ?
49323:             gfxASurface::CONTENT_COLOR : gfxASurface::CONTENT_COLOR_ALPHA);
49323: 
49323:           // If there's an error, go on and do what we always do.
49323:           if (mD2DSurface->CairoStatus()) {
49323:             mD2DSurface = nsnull;
49323:             mTexture = nsnull;
49323:           }
49323:         }
49323:   }
49323: #endif
49323:   if (!mTexture) {
49323:     device()->CreateTexture(aSize.width, aSize.height, 1,
51950:                             D3DUSAGE_RENDERTARGET, canUseOpaqueSurface ? D3DFMT_X8R8G8B8 : D3DFMT_A8R8G8B8,
49323:                             D3DPOOL_DEFAULT, getter_AddRefs(mTexture), NULL);
49323:   }
49323: }
49323: 
42611: } /* namespace layers */
42956: } /* namespace mozilla */
