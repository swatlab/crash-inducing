    1: #
    1: # ***** BEGIN LICENSE BLOCK *****
    1: # Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1: #
    1: # The contents of this file are subject to the Mozilla Public License Version
    1: # 1.1 (the "License"); you may not use this file except in compliance with
    1: # the License. You may obtain a copy of the License at
    1: # http://www.mozilla.org/MPL/
    1: #
    1: # Software distributed under the License is distributed on an "AS IS" basis,
    1: # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1: # for the specific language governing rights and limitations under the
    1: # License.
    1: #
    1: # The Original Code is mozilla.org code.
    1: #
    1: # The Initial Developer of the Original Code is
    1: # Netscape Communications Corporation.
    1: # Portions created by the Initial Developer are Copyright (C) 1998
    1: # the Initial Developer. All Rights Reserved.
    1: #
    1: # Contributor(s):
    1: #   Brian Ryner <bryner@brianryner.com>
    1: #
    1: # Alternatively, the contents of this file may be used under the terms of
    1: # either the GNU General Public License Version 2 or later (the "GPL"), or
    1: # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1: # in which case the provisions of the GPL or the LGPL are applicable instead
    1: # of those above. If you wish to allow use of your version of this file only
    1: # under the terms of either the GPL or the LGPL, and not to allow others to
    1: # use your version of this file under the terms of the MPL, indicate your
    1: # decision by deleting the provisions above and replace them with the notice
    1: # and other provisions required by the GPL or the LGPL. If you do not delete
    1: # the provisions above, a recipient may use your version of this file under
    1: # the terms of any one of the MPL, the GPL or the LGPL.
    1: #
    1: # ***** END LICENSE BLOCK *****
    1: 
    1: DEPTH		= ../..
    1: topsrcdir	= @top_srcdir@
    1: srcdir		= @srcdir@
    1: VPATH		= @srcdir@
    1: 
    1: include $(DEPTH)/config/autoconf.mk
    1: 
    1: MODULE = psm
    1: 
    1: ifndef MOZ_NATIVE_NSS
    1: LOADABLE_ROOT_MODULE = $(DLL_PREFIX)nssckbi$(DLL_SUFFIX)
    1: endif
    1: 
    1: NSS3_LIB = $(DLL_PREFIX)nss3$(DLL_SUFFIX)
10391: NSSUTIL3_LIB = $(DLL_PREFIX)nssutil3$(DLL_SUFFIX)
    1: SMIME3_LIB = $(DLL_PREFIX)smime3$(DLL_SUFFIX)
    1: SSL3_LIB =  $(DLL_PREFIX)ssl3$(DLL_SUFFIX)
    1: SOFTOKEN3_LIB = $(DLL_PREFIX)softokn3$(DLL_SUFFIX)
    1: SOFTOKEN3_CHK = $(DLL_PREFIX)softokn3.chk
22249: 
22249: ifndef NSS_DISABLE_DBM
 3781: NSSDBM3_LIB = $(DLL_PREFIX)nssdbm3$(DLL_SUFFIX)
31332: NSSDBM3_CHK = $(DLL_PREFIX)nssdbm3.chk
22249: else
22249: NSSDBM3_LIB = 
31332: NSSDBM3_CHK = 
22249: endif
    1: 
14490: ifndef MOZ_NATIVE_NSS
14490: ifneq (,$(filter OS2 WINCE WINNT,$(OS_ARCH)))
14490: SDK_LIBS = \
14490:   $(DIST)/lib/$(LIB_PREFIX)crmf.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)smime3.$(IMPORT_LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)ssl3.$(IMPORT_LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)nss3.$(IMPORT_LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)nssutil3.$(IMPORT_LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)softokn3.$(IMPORT_LIB_SUFFIX) \
14490:   $(NULL)
14490: else
14490: SDK_LIBS = \
14490:   $(DIST)/lib/$(LIB_PREFIX)crmf.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)smime.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)ssl.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)nss.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)nssutil.$(LIB_SUFFIX) \
14490:   $(DIST)/lib/$(LIB_PREFIX)softokn.$(LIB_SUFFIX) \
14490:   $(NULL)
14490: endif
14490: endif
14490: 
    1: # Default
    1: HAVE_FREEBL_LIBS = 1
    1: 
    1: # 32-bit HP-UX PA-RISC
    1: ifeq ($(OS_ARCH), HP-UX)
    1: ifneq ($(OS_TEST), ia64)
    1: ifndef HAVE_64BIT_OS
    1: HAVE_FREEBL_LIBS =
    1: HAVE_FREEBL_LIBS_32 = 1
    1: endif
    1: endif
    1: endif
    1: 
    1: # SunOS SPARC
    1: ifeq ($(OS_ARCH), SunOS)
 3650: ifneq (86,$(findstring 86,$(OS_TEST)))
    1: ifdef HAVE_64BIT_OS
    1: HAVE_FREEBL_LIBS =
    1: HAVE_FREEBL_LIBS_64 = 1
    1: else
    1: HAVE_FREEBL_LIBS =
    1: HAVE_FREEBL_LIBS_32 = 1
    1: HAVE_FREEBL_LIBS_32INT64 = 1
    1: endif
    1: endif
    1: endif
    1: 
    1: ifdef HAVE_FREEBL_LIBS
    1: FREEBL_LIB = $(DLL_PREFIX)freebl3$(DLL_SUFFIX)
    1: FREEBL_CHK = $(DLL_PREFIX)freebl3.chk
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32
    1: FREEBL_32INT_LIB = libfreebl_32int_3$(DLL_SUFFIX)
    1: FREEBL_32INT_CHK = libfreebl_32int_3.chk
    1: FREEBL_32FPU_LIB = libfreebl_32fpu_3$(DLL_SUFFIX)
    1: FREEBL_32FPU_CHK = libfreebl_32fpu_3.chk
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32INT64
    1: FREEBL_32INT64_LIB = libfreebl_32int64_3$(DLL_SUFFIX)
    1: FREEBL_32INT64_CHK = libfreebl_32int64_3.chk
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_64
    1: FREEBL_64INT_LIB = libfreebl_64int_3$(DLL_SUFFIX)
    1: FREEBL_64INT_CHK = libfreebl_64int_3.chk
    1: FREEBL_64FPU_LIB = libfreebl_64fpu_3$(DLL_SUFFIX)
    1: FREEBL_64FPU_CHK = libfreebl_64fpu_3.chk
    1: endif
    1: 
    1: ABS_DIST := $(shell cd $(DIST) && pwd)
    1: ifeq ($(HOST_OS_ARCH),WINNT)
    1: ifdef CYGDRIVE_MOUNT
    1: ABS_DIST := $(shell cygpath -w $(ABS_DIST) | sed -e 's|\\|/|g')
    1: endif
    1: ifneq (,$(filter mingw%,$(host_os)))
    1: ABS_DIST := $(shell cd $(DIST) && pwd -W)
    1: endif
    1: endif
    1: NSPR_INCLUDE_DIR = $(firstword $(filter -I%,$(NSPR_CFLAGS)))
    1: ifneq (,$(strip $(NSPR_INCLUDE_DIR)))
    1: NSPR_INCLUDE_DIR := $(subst -I,,$(subst -I$(DIST),-I$(ABS_DIST),$(NSPR_INCLUDE_DIR)))
    1: else
    1: NSPR_INCLUDE_DIR = $(ABS_DIST)/include/nspr
    1: endif
    1: NSPR_LIB_DIR = $(firstword $(filter -L%,$(NSPR_LIBS)))
    1: ifneq (,$(strip $(NSPR_LIB_DIR)))
    1: NSPR_LIB_DIR := $(subst -L,,$(subst -L$(DIST),-L$(ABS_DIST),$(NSPR_LIB_DIR)))
    1: else
    1: NSPR_LIB_DIR = $(ABS_DIST)/lib
    1: endif
12206: # Can't pass this in DEFAULT_GMAKE_FLAGS because that overrides
12206: # definitions in NSS, so just export it into the sub-make's environment.
12271: ifeq (WINNT_1,$(OS_TARGET)_$(MOZ_MEMORY))
12206: export DLLFLAGS
12271: endif
26777: 
26777: ifdef .PYMAKE
26777: NSSMAKE = $(GMAKE)
26777: else
26777: NSSMAKE = $(MAKE)
26777: endif
26777: 
    1: # NSS makefiles are not safe for parallel execution.
26777: DEFAULT_GMAKE_FLAGS = MAKE="$(NSSMAKE) -j1" -j1
    1: DEFAULT_GMAKE_FLAGS += CC="$(CC)"
    1: DEFAULT_GMAKE_FLAGS += SOURCE_MD_DIR=$(ABS_DIST)
    1: DEFAULT_GMAKE_FLAGS += DIST=$(ABS_DIST)
    1: DEFAULT_GMAKE_FLAGS += NSPR_INCLUDE_DIR=$(NSPR_INCLUDE_DIR)
    1: DEFAULT_GMAKE_FLAGS += NSPR_LIB_DIR=$(NSPR_LIB_DIR)
    1: DEFAULT_GMAKE_FLAGS += MOZILLA_CLIENT=1
    1: DEFAULT_GMAKE_FLAGS += NO_MDUPDATE=1
    1: DEFAULT_GMAKE_FLAGS += NSS_ENABLE_ECC=1
31719: DEFAULT_GMAKE_FLAGS += IMPORT_LIB_SUFFIX=".$(IMPORT_LIB_SUFFIX)"
22249: ifdef NSS_DISABLE_DBM 
22249: DEFAULT_GMAKE_FLAGS += NSS_DISABLE_DBM=1
22249: endif
    1: ABS_topsrcdir   := $(shell cd $(topsrcdir); pwd)
    1: ifneq ($(ABS_topsrcdir),$(MOZ_BUILD_ROOT))
    1: DEFAULT_GMAKE_FLAGS += BUILD_TREE=$(MOZ_BUILD_ROOT)
    1: endif
    1: ifndef MOZ_DEBUG
 7149: DEFAULT_GMAKE_FLAGS += BUILD_OPT=1 OPT_CODE_SIZE=1
    1: endif
    1: ifdef GNU_CC
    1: DEFAULT_GMAKE_FLAGS += NS_USE_GCC=1 NS_USE_NATIVE=
    1: else
    1: DEFAULT_GMAKE_FLAGS += NS_USE_GCC= NS_USE_NATIVE=1
    1: endif
    1: ifdef USE_N32
    1: # It is not really necessary to specify USE_PTHREADS=1.  USE_PTHREADS
    1: # merely adds _PTH to coreconf's OBJDIR name.
    1: DEFAULT_GMAKE_FLAGS += USE_N32=1 USE_PTHREADS=1
    1: endif
    1: ifdef HAVE_64BIT_OS
    1: DEFAULT_GMAKE_FLAGS += USE_64=1
    1: endif
    1: ifeq ($(OS_ARCH),WINNT)
    1: DEFAULT_GMAKE_FLAGS += OS_TARGET=WIN95
    1: ifdef MOZ_DEBUG
    1: ifndef MOZ_NO_DEBUG_RTL
    1: DEFAULT_GMAKE_FLAGS += USE_DEBUG_RTL=1
    1: endif
    1: endif
28721: export MOZ_DEBUG_SYMBOLS
    1: endif # WINNT
    1: ifeq ($(OS_ARCH),OS2)
    1: ifdef MOZ_OS2_HIGH_MEMORY
    1: DEFAULT_GMAKE_FLAGS += MOZ_OS2_HIGH_MEMORY=1
    1: endif
    1: endif # OS2
    1: # OS_CFLAGS needs to be passed on down.
    1: ifeq ($(OS_ARCH),OpenVMS)
    1: DEFAULT_GMAKE_FLAGS += XCFLAGS="$(OS_CFLAGS)"
    1: endif
    1: ifeq ($(OS_ARCH),Darwin)
    1: # Make nsinstall use absolute symlinks by default when building NSS
    1: # for Mozilla on Mac OS X. (Bugzilla bug 193164)
    1: ifndef NSDISTMODE
    1: DEFAULT_GMAKE_FLAGS += NSDISTMODE=absolute_symlink
    1: endif
    1: ifdef MACOS_SDK_DIR
    1: DEFAULT_GMAKE_FLAGS += MACOS_SDK_DIR=$(MACOS_SDK_DIR)
    1: endif
    1: endif
32040: # Build libfreebl3.so the same way it's built in Fedora, so that Fedora's
32040: # /lib/libcrypt.so.1 can get the NSSRAWHASH_3.12.3 symbols it needs from
32040: # our libfreebl3.so.
32040: ifeq ($(OS_ARCH),Linux)
32040: DEFAULT_GMAKE_FLAGS += FREEBL_NO_DEPEND=1
32040: endif
32040: 
    1: ifdef CROSS_COMPILE
22382: 
22382: ifdef WINCE
22382: DEFAULT_GMAKE_FLAGS += \
22382: 	NSINSTALL="$(NSINSTALL)" \
22382: 	NATIVE_CC="$(HOST_CC)" \
24058: 	CC="$(CC)" \
24058: 	CCC="$(CC)" \
24058: 	LINK="$(LD)" \
24058: 	LD="$(LD) -DLL" \
24058: 	AS="$(AS) -Cp -Sn -Zi -coff $(INCLUDES)" \
24058: 	AR='$(AR) -NOLOG0 -OUT:$$@' \
22382: 	RANLIB="echo" \
24058: 	RC="$(RC) $(RCFLAGS)" \
22382: 	OS_ARCH="$(OS_ARCH)" \
22382: 	OS_TEST="$(OS_TEST)" \
22382: 	CPU_ARCH="ARM" \
22382: 	USE_MSYS=1 \
22382: 	WINCE=1 \
22382: 	$(NULL)
22382: else
    1: DEFAULT_GMAKE_FLAGS += \
    1: 	NSINSTALL="$(NSINSTALL)" \
    1: 	NATIVE_CC="$(HOST_CC)" \
    1: 	CC="$(CC)" \
    1: 	CCC="$(CXX)" \
    1: 	LINK="$(LD)" \
    1: 	AS="$(AS)" \
    1: 	AR='$(AR) $(AR_FLAGS:$@=$$@)' \
    1: 	RANLIB="$(RANLIB)" \
    1: 	RC="$(RC) $(RCFLAGS)" \
    1: 	OS_ARCH="$(OS_ARCH)" \
19338: 	OS_TEST="$(OS_TEST)" \
    1: 	CPU_ARCH="$(TARGET_CPU)" \
    1: 	$(NULL)
22382: endif
22382: 
    1: SKIP_CHK=1
    1: endif
    1: SUBMAKEFILES = boot/Makefile ssl/Makefile pki/Makefile locales/Makefile
    1: 
    1: include $(topsrcdir)/config/rules.mk
    1: 
    1: # Attempt to properly handle NSS' refusal to implement a dependency system
    1: export:: .nss.cleaned
    1: 
    1: .nss.cleaned: .nss.checkout
    1: ifndef MOZ_NATIVE_NSS
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/coreconf $(DEFAULT_GMAKE_FLAGS) clean
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/lib $(DEFAULT_GMAKE_FLAGS) clean
    1: ifndef SKIP_CHK
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/lib $(DEFAULT_GMAKE_FLAGS) clean
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/shlibsign $(DEFAULT_GMAKE_FLAGS) clean
    1: endif
    1: 	touch $@
    1: endif
    1: 
    1: GARBAGE += .nss.cleaned
    1: 
    1: .nss.checkout:
    1: ifndef MOZ_NATIVE_NSS
    1: 	touch $(srcdir)/$@
    1: endif
    1: 
    1: dependclean export packages chrome::
    1: 	$(MAKE) -C boot $@
    1: 	$(MAKE) -C ssl $@
    1: 	$(MAKE) -C locales $@
    1: ifdef MOZ_XUL
    1: 	$(MAKE) -C pki $@
    1: endif
    1: 
    1: libs::
    1: ifndef MOZ_NATIVE_NSS
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/coreconf $(DEFAULT_GMAKE_FLAGS)
22249: ifndef NSS_DISABLE_DBM
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/dbm $(DEFAULT_GMAKE_FLAGS) 
22249: endif
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/lib $(DEFAULT_GMAKE_FLAGS)
18848: ifdef ENABLE_TESTS
18848: 	# Need certutil binary for mochitest certificates generation
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/lib $(DEFAULT_GMAKE_FLAGS)
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/certutil $(DEFAULT_GMAKE_FLAGS)
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/pk12util $(DEFAULT_GMAKE_FLAGS)
18848: endif
16731: ifndef SKIP_CHK
18848: ifndef ENABLE_TESTS # Just avoid secondary compile
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/lib $(DEFAULT_GMAKE_FLAGS)
18848: endif
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/shlibsign $(DEFAULT_GMAKE_FLAGS)
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(LOADABLE_ROOT_MODULE) $(DIST)/bin
    1: ifndef SKIP_CHK
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(SOFTOKEN3_CHK) $(DIST)/bin
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(SOFTOKEN3_LIB) $(DIST)/bin
22249: ifndef NSS_DISABLE_DBM
31332: ifndef SKIP_CHK
31332: 	$(INSTALL) -m 644 $(DIST)/lib/$(NSSDBM3_CHK) $(DIST)/bin
31332: endif
 3781: 	$(INSTALL) -m 755 $(DIST)/lib/$(NSSDBM3_LIB) $(DIST)/bin
22249: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(NSS3_LIB) $(DIST)/bin
10391: 	$(INSTALL) -m 755 $(DIST)/lib/$(NSSUTIL3_LIB) $(DIST)/bin
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(SSL3_LIB) $(DIST)/bin
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(SMIME3_LIB) $(DIST)/bin
14490: 	$(INSTALL) -m 755 $(SDK_LIBS) $(DIST)/sdk/lib
    1: ifdef HAVE_FREEBL_LIBS
    1: ifndef SKIP_CHK
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_CHK) $(DIST)/bin
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_LIB) $(DIST)/bin
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32
    1: ifndef SKIP_CHK
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_32INT_CHK) $(DIST)/bin
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_32FPU_CHK) $(DIST)/bin
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_32INT_LIB) $(DIST)/bin
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_32FPU_LIB) $(DIST)/bin
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32INT64
    1: ifndef SKIP_CHK
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_32INT64_CHK) $(DIST)/bin
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_32INT64_LIB) $(DIST)/bin
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_64
    1: ifndef SKIP_CHK
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_64INT_CHK) $(DIST)/bin
    1: 	$(INSTALL) -m 644 $(DIST)/lib/$(FREEBL_64FPU_CHK) $(DIST)/bin
    1: endif
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_64INT_LIB) $(DIST)/bin
    1: 	$(INSTALL) -m 755 $(DIST)/lib/$(FREEBL_64FPU_LIB) $(DIST)/bin
    1: endif
    1: endif
 8214: ifndef MOZ_NATIVE_NSS
 4233: # NSS installs headers to dist/public and we want them in dist/include
 4233: 	$(NSINSTALL) -D $(DIST)/include/nss
 4233: 	(cd $(DIST)/public/nss && tar $(TAR_CREATE_FLAGS) - .) | \
28510: 	  (cd $(DIST)/include && tar -xf -)
 8214: endif
    1: 	$(MAKE) -C boot $@
    1: 	$(MAKE) -C ssl $@
    1: 	$(MAKE) -C locales $@
    1: ifdef MOZ_XUL
    1: 	$(MAKE) -C pki $@
    1: endif
    1: 
 5636: check::
 5636: 	$(MAKE) -C ssl $@
 5636: 
    1: install::
    1: ifndef MOZ_NATIVE_NSS
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(LOADABLE_ROOT_MODULE) $(DESTDIR)$(mozappdir)
    1: ifndef SKIP_CHK
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(SOFTOKEN3_CHK) $(DESTDIR)$(mozappdir)
    1: endif
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(SOFTOKEN3_LIB) $(DESTDIR)$(mozappdir)
31332: ifndef SKIP_CHK
31332: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(NSSDBM3_CHK) $(DESTDIR)$(mozappdir)
31332: endif
 3781: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(NSSDBM3_LIB) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(NSS3_LIB) $(DESTDIR)$(mozappdir)
10391: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(NSSUTIL3_LIB) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(SSL3_LIB) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(SMIME3_LIB) $(DESTDIR)$(mozappdir)
    1: ifdef HAVE_FREEBL_LIBS
    1: ifndef SKIP_CHK
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_CHK) $(DESTDIR)$(mozappdir)
    1: endif
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_LIB) $(DESTDIR)$(mozappdir)
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32
    1: ifndef SKIP_CHK
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_32INT_CHK) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_32FPU_CHK) $(DESTDIR)$(mozappdir)
    1: endif
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_32INT_LIB) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_32FPU_LIB) $(DESTDIR)$(mozappdir)
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_32INT64
    1: ifndef SKIP_CHK
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_32INT64_CHK) $(DESTDIR)$(mozappdir)
    1: endif
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_32INT64_LIB) $(DESTDIR)$(mozappdir)
    1: endif
    1: ifdef HAVE_FREEBL_LIBS_64
    1: ifndef SKIP_CHK
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_64INT_CHK) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 644 $(DIST)/lib/$(FREEBL_64FPU_CHK) $(DESTDIR)$(mozappdir)
    1: endif
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_64INT_LIB) $(DESTDIR)$(mozappdir)
    1: 	$(SYSINSTALL) -m 755 $(DIST)/lib/$(FREEBL_64FPU_LIB) $(DESTDIR)$(mozappdir)
    1: endif
    1: endif
    1: 	$(MAKE) -C boot $@
    1: 	$(MAKE) -C ssl $@
    1: 	$(MAKE) -C locales $@
    1: ifdef MOZ_XUL
    1: 	$(MAKE) -C pki $@
    1: endif
    1: 
    1: clean clobber clobber_all realclean distclean depend::
    1: 	$(MAKE) -C boot $@
    1: 	$(MAKE) -C ssl $@
    1: 	$(MAKE) -C locales $@
    1: ifdef MOZ_XUL
    1: 	$(MAKE) -C pki $@
    1: endif
    1: ifndef MOZ_NATIVE_NSS
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/coreconf $(DEFAULT_GMAKE_FLAGS) clean
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/lib $(DEFAULT_GMAKE_FLAGS) clean
    1: ifndef SKIP_CHK
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/lib $(DEFAULT_GMAKE_FLAGS) clean
26777: 	$(NSSMAKE) -C $(topsrcdir)/security/nss/cmd/shlibsign $(DEFAULT_GMAKE_FLAGS) clean
    1: endif
    1: endif
    1: 
    1: echo-requires-recursive::
    1: 	$(MAKE) -C boot $@
    1: 	$(MAKE) -C ssl $@
    1: 	$(MAKE) -C pki $@
    1: 	$(MAKE) -C locales $@
    1: 
