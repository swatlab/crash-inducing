60890: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
60890: /* ***** BEGIN LICENSE BLOCK *****
60890:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
60890:  *
60890:  * The contents of this file are subject to the Mozilla Public License Version
60890:  * 1.1 (the "License"); you may not use this file except in compliance with
60890:  * the License. You may obtain a copy of the License at
60890:  * http://www.mozilla.org/MPL/
60890:  *
60890:  * Software distributed under the License is distributed on an "AS IS" basis,
60890:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
60890:  * for the specific language governing rights and limitations under the
60890:  * License.
60890:  *
60890:  * The Original Code is mozilla.org code.
60890:  *
60890:  * The Initial Developer of the Original Code is
60890:  * Mozilla Foundation.
60890:  * Portions created by the Initial Developer are Copyright (C) 2011
60890:  * the Initial Developer. All Rights Reserved.
60890:  *
60890:  * Contributor(s):
60890:  *
60890:  * Alternatively, the contents of this file may be used under the terms of
60890:  * either the GNU General Public License Version 2 or later (the "GPL"), or
60890:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
60890:  * in which case the provisions of the GPL or the LGPL are applicable instead
60890:  * of those above. If you wish to allow use of your version of this file only
60890:  * under the terms of either the GPL or the LGPL, and not to allow others to
60890:  * use your version of this file under the terms of the MPL, indicate your
60890:  * decision by deleting the provisions above and replace them with the notice
60890:  * and other provisions required by the GPL or the LGPL. If you do not delete
60890:  * the provisions above, a recipient may use your version of this file under
60890:  * the terms of any one of the MPL, the GPL or the LGPL.
60890:  *
60890:  * ***** END LICENSE BLOCK ***** */
60890: 
60890: #include "GfxDriverInfo.h"
60893: #include "nsIGfxInfo.h"
60890: 
60893: using namespace mozilla::widget;
60890: 
85902: PRUint32 GfxDriverInfo::allAdapterVendors = 0;
60890: PRInt32 GfxDriverInfo::allFeatures = 0;
81328: PRUint64 GfxDriverInfo::allDriverVersions = ~(PRUint64(0));
81328: 
85902: PRUint32 GfxDriverInfo::vendorIntel = 0x8086;
85902: PRUint32 GfxDriverInfo::vendorNVIDIA = 0x10de;
85902: PRUint32 GfxDriverInfo::vendorAMD = 0x1022;
85902: PRUint32 GfxDriverInfo::vendorATI = 0x1002;
85902: 
85902: GfxDeviceFamily GfxDriverInfo::allDevices = nsnull;
60890: 
60893: GfxDriverInfo::GfxDriverInfo()
60893:   : mOperatingSystem(DRIVER_OS_UNKNOWN),
85902:     mAdapterVendor(allAdapterVendors),
60893:     mDevices(allDevices),
60893:     mDeleteDevices(false),
60893:     mFeature(allFeatures),
60893:     mFeatureStatus(nsIGfxInfo::FEATURE_NO_INFO),
60893:     mComparisonOp(DRIVER_UNKNOWN_COMPARISON),
60893:     mDriverVersion(0),
61594:     mDriverVersionMax(0),
61594:     mSuggestedVersion(nsnull)
60893: {}
60893: 
85902: GfxDriverInfo::GfxDriverInfo(OperatingSystem os, PRUint32 vendor,
85902:                              GfxDeviceFamily devices,
60893:                              PRInt32 feature, PRInt32 featureStatus,
60893:                              VersionComparisonOp op,
60893:                              PRUint64 driverVersion,
61594:                              const char *suggestedVersion /* = nsnull */,
60893:                              bool ownDevices /* = false */)
60893:   : mOperatingSystem(os),
60893:     mAdapterVendor(vendor),
60893:     mDevices(devices),
60893:     mDeleteDevices(ownDevices),
60893:     mFeature(feature),
60893:     mFeatureStatus(featureStatus),
60893:     mComparisonOp(op),
60893:     mDriverVersion(driverVersion),
61594:     mDriverVersionMax(0),
61594:     mSuggestedVersion(suggestedVersion)
60893: {}
60893: 
60893: GfxDriverInfo::GfxDriverInfo(const GfxDriverInfo& aOrig)
60893:   : mOperatingSystem(aOrig.mOperatingSystem),
60893:     mAdapterVendor(aOrig.mAdapterVendor),
60893:     mFeature(aOrig.mFeature),
60893:     mFeatureStatus(aOrig.mFeatureStatus),
60893:     mComparisonOp(aOrig.mComparisonOp),
60893:     mDriverVersion(aOrig.mDriverVersion),
61594:     mDriverVersionMax(aOrig.mDriverVersionMax),
61594:     mSuggestedVersion(aOrig.mSuggestedVersion)
60893: {
85902:   // If we're managing the lifetime of the devices array, we have to make a
85902:   // copy of the original's array.
85902:   if (aOrig.mDeleteDevices) {
85902:     PRUint32 count = 0;
85902:     const PRUint32 *device = aOrig.mDevices;
85902:     while (*device) {
85902:       count++;
85902:       device++;
85902:     }
85902: 
85902:     mDevices = new PRUint32[count + 1];
85902:     memcpy(mDevices, aOrig.mDevices, sizeof(PRUint32) * (count + 1));
60893:   } else {
60893:     mDevices = aOrig.mDevices;
60893:   }
60893: 
60893:   mDeleteDevices = aOrig.mDeleteDevices;
60893: }
60893: 
60893: GfxDriverInfo::~GfxDriverInfo()
60893: {
60893:   if (mDeleteDevices)
85902:     delete[] mDevices;
60893: }
84603: 
85902: const GfxDeviceFamily GfxDriverInfo::GetDeviceFamily(DeviceFamily id)
84603: {
84603:   switch (id) {
85902:     case IntelGMA500: {
85902:       static const PRUint32 intelGMA500[] = {
85902:         0x8108, /* IntelGMA500_1 */
85902:         0x8109, /* IntelGMA500_2 */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMA500[0];
85902:     }
85902:     case IntelGMA900: {
85902:       static const PRUint32 intelGMA900[] = {
85902:         0x2582, /* IntelGMA900_1 */
85902:         0x2782, /* IntelGMA900_2 */
85902:         0x2592, /* IntelGMA900_3 */
85902:         0x2792, /* IntelGMA900_4 */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMA900[0];
85902:     }
85902:     case IntelGMA950: {
85902:       static const PRUint32 intelGMA950[] = {
85902:         0x2772, /* Intel945G_1 */
85902:         0x2776, /* Intel945G_2 */
85902:         0x27A2, /* Intel945_1 */
85902:         0x27A6, /* Intel945_2 */
85902:         0x27AE, /* Intel945_3 */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMA950[0];
85902:     }
85902:     case IntelGMA3150: {
85902:       static const PRUint32 intelGMA3150[] = {
85902:         0xA001, /* IntelGMA3150_Nettop_1 */
85902:         0xA002, /* IntelGMA3150_Nettop_2 */
85902:         0xA011, /* IntelGMA3150_Netbook_1 */
85902:         0xA012, /* IntelGMA3150_Netbook_2 */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMA3150[0];
85902:     }
85902:     case IntelGMAX3000: {
85902:       static const PRUint32 intelGMAX3000[] = {
85902:         0x2972, /* Intel946GZ_1 */
85902:         0x2973, /* Intel946GZ_2 */
85902:         0x2982, /* IntelG35_1 */
85902:         0x2983, /* IntelG35_2 */
85902:         0x2992, /* IntelQ965_1 */
85902:         0x2993, /* IntelQ965_2 */
85902:         0x29A2, /* IntelG965_1 */
85902:         0x29A3, /* IntelG965_2 */
85902:         0x29B2, /* IntelQ35_1 */
85902:         0x29B3, /* IntelQ35_2 */
85902:         0x29C2, /* IntelG33_1 */
85902:         0x29C3, /* IntelG33_2 */
85902:         0x29D2, /* IntelQ33_1 */
85902:         0x29D3, /* IntelQ33_2 */
85902:         0x2A02, /* IntelGL960_1 */
85902:         0x2A03, /* IntelGL960_2 */
85902:         0x2A12, /* IntelGM965_1 */
85902:         0x2A13, /* IntelGM965_2 */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMAX3000[0];
85902:     }
85902:     case IntelGMAX4500HD: {
85902:       static const PRUint32 intelGMAX4500HD[] = {
85902:         0x2A42, /* IntelGMA4500MHD_1 */
85902:         0x2A43, /* IntelGMA4500MHD_2 */
85902:         0x2E42, /* IntelB43_1 */
85902:         0x2E43, /* IntelB43_2 */
85902:         0x2E92, /* IntelB43_3 */
85902:         0x2E93, /* IntelB43_4 */
85902:         0x2E32, /* IntelG41_1 */
85902:         0x2E33, /* IntelG41_2 */
85902:         0x2E22, /* IntelG45_1 */
85902:         0x2E23, /* IntelG45_2 */
85902:         0x2E12, /* IntelQ45_1 */
85902:         0x2E13, /* IntelQ45_2 */
85902:         0x0042, /* IntelHDGraphics */
85902:         0x0046, /* IntelMobileHDGraphics */
85902:         0x0102, /* IntelSandyBridge_1 */
85902:         0x0106, /* IntelSandyBridge_2 */
85902:         0x0112, /* IntelSandyBridge_3 */
85902:         0x0116, /* IntelSandyBridge_4 */
85902:         0x0122, /* IntelSandyBridge_5 */
85902:         0x0126, /* IntelSandyBridge_6 */
85902:         0x010A, /* IntelSandyBridge_7 */
85902:         0x0080, /* IntelIvyBridge */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &intelGMAX4500HD[0];
85902:     }
85902:     case NvidiaBlockD3D9Layers: {
84603:       // Glitches whilst scrolling (see bugs 612007, 644787, 645872)
85902:       static const PRUint32 nvidiaBlockD3D9Layers[] = {
85902:         0x00f3, /* NV43 [GeForce 6200 (TM)] */
85902:         0x0146, /* NV43 [Geforce Go 6600TE/6200TE (TM)] */
85902:         0x014f, /* NV43 [GeForce 6200 (TM)] */
85902:         0x0161, /* NV44 [GeForce 6200 TurboCache (TM)] */
85902:         0x0162, /* NV44 [GeForce 6200SE TurboCache (TM)] */
85902:         0x0163, /* NV44 [GeForce 6200 LE (TM)] */
85902:         0x0164, /* NV44 [GeForce Go 6200 (TM)] */
85902:         0x0167, /* NV43 [GeForce Go 6200/6400 (TM)] */
85902:         0x0168, /* NV43 [GeForce Go 6200/6400 (TM)] */
85902:         0x0169, /* NV44 [GeForce 6250 (TM)] */
85902:         0x0222, /* NV44 [GeForce 6200 A-LE (TM)] */
85902:         0x0240, /* C51PV [GeForce 6150 (TM)] */
85902:         0x0241, /* C51 [GeForce 6150 LE (TM)] */
85902:         0x0244, /* C51 [Geforce Go 6150 (TM)] */
85902:         0x0245, /* C51 [Quadro NVS 210S/GeForce 6150LE (TM)] */
85902:         0x0247, /* C51 [GeForce Go 6100 (TM)] */
85902:         0x03d0, /* C61 [GeForce 6150SE nForce 430 (TM)] */
85902:         0x03d1, /* C61 [GeForce 6100 nForce 405 (TM)] */
85902:         0x03d2, /* C61 [GeForce 6100 nForce 400 (TM)] */
85902:         0x03d5, /* C61 [GeForce 6100 nForce 420 (TM)] */
85902:         0
85902:       };
85902:       return (const GfxDeviceFamily) &nvidiaBlockD3D9Layers[0];
85902:     }
85902:     default:
85902:       NS_WARNING("Invalid device family");
84603:   }
84603: 
85902:   return nsnull;
84603: }
