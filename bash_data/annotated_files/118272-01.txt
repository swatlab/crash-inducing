     1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 98983: /* This Source Code Form is subject to the terms of the Mozilla Public
 98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: 
 80401: #include "nsAppShellWindowEnumerator.h"
 80401: 
     1: #include "nsIContentViewer.h"
     1: #include "nsIDocShell.h"
     1: #include "nsIDocument.h"
     1: #include "nsIDOMDocument.h"
     1: #include "nsIDOMElement.h"
     1: #include "nsIDOMWindow.h"
     1: #include "nsIFactory.h"
     1: #include "nsIInterfaceRequestor.h"
     1: #include "nsIInterfaceRequestorUtils.h"
     1: #include "nsIXULWindow.h"
     1: 
     1: #include "nsWindowMediator.h"
     1: 
 23276: //
 23276: // static helper functions
 23276: //
     1: 
     1: static nsresult GetDOMWindow(nsIXULWindow* inWindow,
 73870:                              nsCOMPtr<nsIDOMWindow> &outDOMWindow);
     1: static nsCOMPtr<nsIDOMNode> GetDOMNodeFromDocShell(nsIDocShell *aShell);
     1: static void GetAttribute(nsIXULWindow *inWindow, const nsAString &inAttribute,
     1:                          nsAString &outValue);
     1: static void GetWindowType(nsIXULWindow* inWindow, nsString &outType);
     1: 
     1: // fetch the nsIDOMWindow(Internal) from a XUL Window
 73870: nsresult GetDOMWindow(nsIXULWindow *aWindow, nsCOMPtr<nsIDOMWindow> &aDOMWindow)
     1: {
     1:   nsCOMPtr<nsIDocShell> docShell;
     1: 
     1:   aWindow->GetDocShell(getter_AddRefs(docShell));
     1:   aDOMWindow = do_GetInterface(docShell);
     1:   return aDOMWindow ? NS_OK : NS_ERROR_FAILURE;
     1: }
     1: 
     1: nsCOMPtr<nsIDOMNode> GetDOMNodeFromDocShell(nsIDocShell *aShell)
     1: {
     1:   nsCOMPtr<nsIDOMNode> node;
     1: 
     1:   nsCOMPtr<nsIContentViewer> cv;
     1:   aShell->GetContentViewer(getter_AddRefs(cv));
     1:   if (cv) {
 37433:     nsCOMPtr<nsIDOMDocument> domdoc(do_QueryInterface(cv->GetDocument()));
     1:     if (domdoc) {
     1:       nsCOMPtr<nsIDOMElement> element;
     1:       domdoc->GetDocumentElement(getter_AddRefs(element));
     1:       if (element)
 80401:         node = element;
     1:     }
     1:   }
     1: 
     1:   return node;
     1: }
     1: 
     1: // generic "retrieve the value of a XUL attribute" function
     1: void GetAttribute(nsIXULWindow *inWindow, const nsAString &inAttribute,
     1:                   nsAString &outValue)
     1: {
     1:   nsCOMPtr<nsIDocShell> shell;
     1:   if (inWindow && NS_SUCCEEDED(inWindow->GetDocShell(getter_AddRefs(shell)))) {
     1:     nsCOMPtr<nsIDOMNode> node(GetDOMNodeFromDocShell(shell));
     1:     if (node) {
     1:       nsCOMPtr<nsIDOMElement> webshellElement(do_QueryInterface(node));
     1:       if (webshellElement)
     1:         webshellElement->GetAttribute(inAttribute, outValue);
     1:     }
     1:   }
     1: }
     1: 
     1: // retrieve the window type, stored as the value of a particular
     1: // attribute in its XUL window tag
     1: void GetWindowType(nsIXULWindow* aWindow, nsString &outType)
     1: {
     1:   GetAttribute(aWindow, NS_LITERAL_STRING("windowtype"), outType);
     1: }
     1: 
 23276: //
 23276: // nsWindowInfo
 23276: //
     1: 
108991: nsWindowInfo::nsWindowInfo(nsIXULWindow* inWindow, int32_t inTimeStamp) :
     1:   mWindow(inWindow),mTimeStamp(inTimeStamp),mZLevel(nsIXULWindow::normalZ)
     1: {
 80486:   ReferenceSelf(true, true);
     1: }
     1: 
     1: nsWindowInfo::~nsWindowInfo()
     1: {
     1: }
     1: 
     1: // return true if the window described by this WindowInfo has a type
     1: // equal to the given type
 79445: bool nsWindowInfo::TypeEquals(const nsAString &aType)
     1: { 
     1:   nsAutoString rtnString;
     1:   GetWindowType(mWindow, rtnString);
     1:   return rtnString == aType;
     1: }
     1: 
     1: // insert the struct into their two linked lists, in position after the
     1: // given (independent) method arguments
 23276: void nsWindowInfo::InsertAfter(nsWindowInfo *inOlder , nsWindowInfo *inHigher)
 23276: {
     1:   if (inOlder) {
     1:     mOlder = inOlder;
     1:     mYounger = inOlder->mYounger;
     1:     mOlder->mYounger = this;
     1:     if (mOlder->mOlder == mOlder)
     1:       mOlder->mOlder = this;
     1:     mYounger->mOlder = this;
     1:     if (mYounger->mYounger == mYounger)
     1:       mYounger->mYounger = this;
     1:   }
     1:   if (inHigher) {
     1:     mHigher = inHigher;
     1:     mLower = inHigher->mLower;
     1:     mHigher->mLower = this;
     1:     if (mHigher->mHigher == mHigher)
     1:       mHigher->mHigher = this;
     1:     mLower->mHigher = this;
     1:     if (mLower->mLower == mLower)
     1:       mLower->mLower = this;
     1:   }
     1: }
     1: 
     1: // remove the struct from its linked lists
 79445: void nsWindowInfo::Unlink(bool inAge, bool inZ)
 23276: {
     1:   if (inAge) {
     1:     mOlder->mYounger = mYounger;
     1:     mYounger->mOlder = mOlder;
     1:   }
     1:   if (inZ) {
     1:     mLower->mHigher = mHigher;
     1:     mHigher->mLower = mLower;
     1:   }
     1:   ReferenceSelf(inAge, inZ);
     1: }
     1: 
     1: // initialize the struct to be a valid linked list of one element
 79445: void nsWindowInfo::ReferenceSelf(bool inAge, bool inZ)
 23276: {
     1:   if (inAge) {
     1:     mYounger = this;
     1:     mOlder = this;
     1:   }
     1:   if (inZ) {
     1:     mLower = this;
     1:     mHigher = this;
     1:   }
     1: }
     1: 
 23276: //
 23276: // nsAppShellWindowEnumerator
 23276: //
     1: 
     1: NS_IMPL_ISUPPORTS1(nsAppShellWindowEnumerator, nsISimpleEnumerator)
     1: 
     1: nsAppShellWindowEnumerator::nsAppShellWindowEnumerator(
     1:     const PRUnichar* aTypeString,
     1:     nsWindowMediator& aMediator) :
106838:       mWindowMediator(&aMediator), mType(aTypeString), mCurrentPosition(nullptr)
     1: {
     1:   mWindowMediator->AddEnumerator(this);
     1:   NS_ADDREF(mWindowMediator);
     1: }
     1: 
 23276: nsAppShellWindowEnumerator::~nsAppShellWindowEnumerator()
 23276: {
     1:   mWindowMediator->RemoveEnumerator(this);
     1:   NS_RELEASE(mWindowMediator);
     1: }
     1: 
     1: // after mCurrentPosition has been initialized to point to the beginning
     1: // of the appropriate list, adjust it if necessary
 23276: void nsAppShellWindowEnumerator::AdjustInitialPosition()
 23276: {
     1:   if (!mType.IsEmpty() && mCurrentPosition && !mCurrentPosition->TypeEquals(mType))
     1:     mCurrentPosition = FindNext();
     1: }
     1: 
 79445: NS_IMETHODIMP nsAppShellWindowEnumerator::HasMoreElements(bool *retval)
     1: {
     1:   if (!retval)
     1:     return NS_ERROR_INVALID_ARG;
     1: 
 80486:   *retval = mCurrentPosition ? true : false;
     1:   return NS_OK;
     1: }
     1: 
     1: // if a window is being removed adjust the iterator's current position
 23276: void nsAppShellWindowEnumerator::WindowRemoved(nsWindowInfo *inInfo)
 23276: {
     1:   if (mCurrentPosition == inInfo)
     1:     mCurrentPosition = FindNext();
     1: }
     1: 
 23276: //
 23276: // nsASDOMWindowEnumerator
 23276: //
     1: 
     1: nsASDOMWindowEnumerator::nsASDOMWindowEnumerator(
     1:     const PRUnichar* aTypeString,
     1:     nsWindowMediator& aMediator) :
 23276:       nsAppShellWindowEnumerator(aTypeString, aMediator)
 23276: {
     1: }
     1: 
 23276: nsASDOMWindowEnumerator::~nsASDOMWindowEnumerator()
 23276: {
     1: }
     1: 
 23276: NS_IMETHODIMP nsASDOMWindowEnumerator::GetNext(nsISupports **retval)
 23276: {
     1:   if (!retval)
     1:     return NS_ERROR_INVALID_ARG;
     1: 
106838:   *retval = nullptr;
118272:   while (mCurrentPosition) {
 73870:     nsCOMPtr<nsIDOMWindow> domWindow;
     1:     GetDOMWindow(mCurrentPosition->mWindow, domWindow);
     1:     mCurrentPosition = FindNext();
118272:     if (domWindow)
118272:       return CallQueryInterface(domWindow, retval);
     1:   }
     1:   return NS_OK;
     1: }
     1: 
 23276: //
 23276: // nsASXULWindowEnumerator
 23276: //
     1: 
     1: nsASXULWindowEnumerator::nsASXULWindowEnumerator(
     1:     const PRUnichar* aTypeString,
     1:     nsWindowMediator& aMediator) :
 23276:       nsAppShellWindowEnumerator(aTypeString, aMediator)
 23276: {
     1: }
     1: 
 23276: nsASXULWindowEnumerator::~nsASXULWindowEnumerator()
 23276: {
     1: }
     1: 
 23276: NS_IMETHODIMP nsASXULWindowEnumerator::GetNext(nsISupports **retval)
 23276: {
     1:   if (!retval)
     1:     return NS_ERROR_INVALID_ARG;
     1: 
106838:   *retval = nullptr;
     1:   if (mCurrentPosition) {
     1:     CallQueryInterface(mCurrentPosition->mWindow, retval);
     1:     mCurrentPosition = FindNext();
     1:   }
     1:   return NS_OK;
     1: }
     1: 
 23276: //
 23276: // nsASDOMWindowEarlyToLateEnumerator
 23276: //
     1: 
     1: nsASDOMWindowEarlyToLateEnumerator::nsASDOMWindowEarlyToLateEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:       nsASDOMWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mOldestWindow;
     1:   AdjustInitialPosition();
     1: }
     1: 
 23276: nsASDOMWindowEarlyToLateEnumerator::~nsASDOMWindowEarlyToLateEnumerator()
 23276: {
     1: }
     1: 
 23276: nsWindowInfo *nsASDOMWindowEarlyToLateEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   // see nsXULWindowEarlyToLateEnumerator::FindNext
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mYounger;
     1:   listEnd = mWindowMediator->mOldestWindow;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mYounger;
     1:   }
     1: 
106838:   return nullptr;
     1: }
     1: 
 23276: //
 23276: // nsASXULWindowEarlyToLateEnumerator
 23276: //
     1: 
     1: nsASXULWindowEarlyToLateEnumerator::nsASXULWindowEarlyToLateEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:       nsASXULWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mOldestWindow;
     1:   AdjustInitialPosition();
     1: }
     1: 
 23276: nsASXULWindowEarlyToLateEnumerator::~nsASXULWindowEarlyToLateEnumerator()
 23276: {
     1: }
     1: 
 23276: nsWindowInfo *nsASXULWindowEarlyToLateEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   /* mCurrentPosition null is assumed to mean that the enumerator has run
     1:      its course and is now basically useless. It could also be interpreted
     1:      to mean that it was created at a time when there were no windows. In
     1:      that case it would probably be more appropriate to check to see whether
     1:      windows have subsequently been added. But it's not guaranteed that we'll
     1:      pick up newly added windows anyway (if they occurred previous to our
     1:      current position) so we just don't worry about that. */
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mYounger;
     1:   listEnd = mWindowMediator->mOldestWindow;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mYounger;
     1:   }
     1: 
106838:   return nullptr;
     1: }
     1: 
 23276: //
 23276: // nsASDOMWindowFrontToBackEnumerator
 23276: //
     1: 
     1: nsASDOMWindowFrontToBackEnumerator::nsASDOMWindowFrontToBackEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:       nsASDOMWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mTopmostWindow;
     1:   AdjustInitialPosition();
     1: }
     1: 
 23276: nsASDOMWindowFrontToBackEnumerator::~nsASDOMWindowFrontToBackEnumerator()
 23276: {
     1: }
     1: 
 23276: nsWindowInfo *nsASDOMWindowFrontToBackEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   // see nsXULWindowEarlyToLateEnumerator::FindNext
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mLower;
     1:   listEnd = mWindowMediator->mTopmostWindow;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mLower;
     1:   }
     1: 
106838:   return nullptr;
     1: }
     1: 
 23276: //
 23276: // nsASXULWindowFrontToBackEnumerator
 23276: //
     1: 
     1: nsASXULWindowFrontToBackEnumerator::nsASXULWindowFrontToBackEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:       nsASXULWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mTopmostWindow;
     1:   AdjustInitialPosition();
     1: }
     1: 
     1: nsASXULWindowFrontToBackEnumerator::~nsASXULWindowFrontToBackEnumerator()
     1: {
     1: }
     1: 
 23276: nsWindowInfo *nsASXULWindowFrontToBackEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   // see nsXULWindowEarlyToLateEnumerator::FindNext
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mLower;
     1:   listEnd = mWindowMediator->mTopmostWindow;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mLower;
     1:   }
     1: 
106838:   return nullptr;
     1: }
     1: 
 23276: //
 23276: // nsASDOMWindowBackToFrontEnumerator
 23276: //
     1: 
     1: nsASDOMWindowBackToFrontEnumerator::nsASDOMWindowBackToFrontEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:   nsASDOMWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mTopmostWindow ?
106838:                      aMediator.mTopmostWindow->mHigher : nullptr;
     1:   AdjustInitialPosition();
     1: }
     1: 
 23276: nsASDOMWindowBackToFrontEnumerator::~nsASDOMWindowBackToFrontEnumerator()
 23276: {
     1: }
     1: 
 23276: nsWindowInfo *nsASDOMWindowBackToFrontEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   // see nsXULWindowEarlyToLateEnumerator::FindNext
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mHigher;
     1:   listEnd = mWindowMediator->mTopmostWindow;
     1:   if (listEnd)
     1:     listEnd = listEnd->mHigher;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mHigher;
     1:   }
     1: 
106838:   return nullptr;
     1: }
     1: 
 23276: //
 23276: // nsASXULWindowBackToFrontEnumerator
 23276: //
     1: 
     1: nsASXULWindowBackToFrontEnumerator::nsASXULWindowBackToFrontEnumerator(
     1:     const PRUnichar *aTypeString,
     1:     nsWindowMediator &aMediator) :
 23276:       nsASXULWindowEnumerator(aTypeString, aMediator)
 23276: {
     1:   mCurrentPosition = aMediator.mTopmostWindow ?
106838:                      aMediator.mTopmostWindow->mHigher : nullptr;
     1:   AdjustInitialPosition();
     1: }
     1: 
     1: nsASXULWindowBackToFrontEnumerator::~nsASXULWindowBackToFrontEnumerator()
     1: {
     1: }
     1: 
 23276: nsWindowInfo *nsASXULWindowBackToFrontEnumerator::FindNext()
 23276: {
     1:   nsWindowInfo *info,
     1:                *listEnd;
 79445:   bool          allWindows = mType.IsEmpty();
     1: 
     1:   // see nsXULWindowEarlyToLateEnumerator::FindNext
     1:   if (!mCurrentPosition)
106838:     return nullptr;
     1: 
     1:   info = mCurrentPosition->mHigher;
     1:   listEnd = mWindowMediator->mTopmostWindow;
     1:   if (listEnd)
     1:     listEnd = listEnd->mHigher;
     1: 
     1:   while (info != listEnd) {
     1:     if (allWindows || info->TypeEquals(mType))
     1:       return info;
     1:     info = info->mHigher;
     1:   }
     1: 
106838:   return nullptr;
     1: }
