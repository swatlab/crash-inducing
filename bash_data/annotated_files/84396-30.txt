43113: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications.
43113:  * Portions created by the Initial Developer are Copyright (C) 2001
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #include "nsISupports.idl"
43113: 
63794: %{C++
63794: #include "nsTArray.h"
63794: class nsCString;
63794: %}
63794: [ptr] native StringArray(nsTArray<nsCString>);
63794: 
70090: interface nsISocketTransport;
70090: interface nsIAsyncInputStream;
70090: interface nsIAsyncOutputStream;
43113: interface nsIURI;
43113: interface nsIProxyInfo;
43113: 
43113: /**
70090:  * The callback interface for nsIHttpChannelInternal::HTTPUpgrade()
70090:  */
70090: 
84396: [scriptable, uuid(5644af88-09e1-4fbd-83da-f012b3b30180)]
70090: interface nsIHttpUpgradeListener : nsISupports
70090: {
70090:     void onTransportAvailable(in nsISocketTransport   aTransport,
70090:                               in nsIAsyncInputStream  aSocketIn,
70090:                               in nsIAsyncOutputStream aSocketOut);
70090: };
70090: 
70090: /**
43113:  * Dumping ground for http.  This interface will never be frozen.  If you are
43113:  * using any feature exposed by this interface, be aware that this interface
43113:  * will change and you will be broken.  You have been warned.
43113:  */
70090: [scriptable, uuid(9363fd96-af59-47e8-bddf-1d5e91acd336)]
43113: interface nsIHttpChannelInternal : nsISupports
43113: {
43113:     /**
43113:      * An http channel can own a reference to the document URI
43113:      */
43113:     attribute nsIURI documentURI;
43113: 
43113:     /**
43113:      * Get the major/minor version numbers for the request
43113:      */
43113:     void getRequestVersion(out unsigned long major, out unsigned long minor);
43113: 
43113:     /**
43113:      * Get the major/minor version numbers for the response
43113:      */
43113:     void getResponseVersion(out unsigned long major, out unsigned long minor);
43113: 
43113:     /**
43113:      * Helper method to set a cookie with a consumer-provided
43113:      * cookie header, _but_ using the channel's other information
43113:      * (URI's, prompters, date headers etc).
43113:      *
43113:      * @param aCookieHeader
43113:      *        The cookie header to be parsed.
43113:      */
43113:     void setCookie(in string aCookieHeader);
43113: 
43113:     /**
43113:      * Setup this channel as an application cache fallback channel.
43113:      */
43113:     void setupFallbackChannel(in string aFallbackKey);
43113: 
43113:     /**
43113:      * Force relevant cookies to be sent with this load even if normally they
43113:      * wouldn't be.
43113:      */
43113:     attribute boolean forceAllowThirdPartyCookie;
48304: 
48304:     /**
67756:      * True iff the channel has been canceled.
48304:      */
48304:     readonly attribute boolean canceled;
52366: 
52366:     /**
67756:      * External handlers may set this to true to notify the channel
67756:      * that it is open on behalf of a download.
52366:      */
52366:     attribute boolean channelIsForDownload;
63794: 
63794:     /**
67756:      * The local IP address to which this channel is bound, in the
67756:      * format produced by PR_NetAddrToString. May be IPv4 or IPv6.
67756:      * Note: in the presence of NAT, this may not be the same as the
67756:      * address that the remote host thinks it's talking to.
67756:      *
67756:      * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's
67756:      * endpoints are not yet determined, or in any case when
67756:      * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207.
67756:      */
67756:     readonly attribute AUTF8String localAddress;
67756: 
67756:     /**
67756:      * The local port number to which this channel is bound.
67756:      *
67756:      * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's
67756:      * endpoints are not yet determined, or in any case when
67756:      * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207.
67756:      */
67756:     readonly attribute PRInt32 localPort;
67756: 
67756:     /**
67756:      * The IP address of the remote host that this channel is
67756:      * connected to, in the format produced by PR_NetAddrToString.
67756:      *
67756:      * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's
67756:      * endpoints are not yet determined, or in any case when
67756:      * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207.
67756:      */
67756:     readonly attribute AUTF8String remoteAddress;
67756: 
67756:     /**
67756:      * The remote port number that this channel is connected to.
67756:      *
67756:      * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's
67756:      * endpoints are not yet determined, or in any case when
67756:      * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207.
67756:      */
67756:     readonly attribute PRInt32 remotePort;
67756: 
67756:     /**
67756:      * Transfer chain of redirected cache-keys.
63794:      */
63794:     [noscript] void setCacheKeysRedirectChain(in StringArray cacheKeys);
70090: 
70090:     /**
70090:      * HTTPUpgrade allows for the use of HTTP to bootstrap another protocol
70090:      * via the RFC 2616 Upgrade request header in conjunction with a 101 level
70090:      * response. The nsIHttpUpgradeListener will have its 
70090:      * onTransportAvailable() method invoked if a matching 101 is processed.
70090:      * The arguments to onTransportAvailable provide the new protocol the low
70090:      * level tranport streams that are no longer used by HTTP.
70090:      *
70090:      * The onStartRequest and onStopRequest events are still delivered and the
70090:      * listener gets full control over the socket if and when onTransportAvailable
70090:      * is delievered.
70090:      *
70090:      * @param aProtocolName
70090:      *        The value of the HTTP Upgrade request header
70090:      * @param aListener
70090:      *        The callback object used to handle a successful upgrade
70090:      */
70090:     void HTTPUpgrade(in ACString aProtocolName,
70090:                      in nsIHttpUpgradeListener aListener);
70090: 
43113: };
