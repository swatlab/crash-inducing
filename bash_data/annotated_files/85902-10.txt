60890: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
60890: /* ***** BEGIN LICENSE BLOCK *****
60890:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
60890:  *
60890:  * The contents of this file are subject to the Mozilla Public License Version
60890:  * 1.1 (the "License"); you may not use this file except in compliance with
60890:  * the License. You may obtain a copy of the License at
60890:  * http://www.mozilla.org/MPL/
60890:  *
60890:  * Software distributed under the License is distributed on an "AS IS" basis,
60890:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
60890:  * for the specific language governing rights and limitations under the
60890:  * License.
60890:  *
60890:  * The Original Code is mozilla.org code.
60890:  *
60890:  * The Initial Developer of the Original Code is
60890:  * Mozilla Foundation.
60890:  * Portions created by the Initial Developer are Copyright (C) 2011
60890:  * the Initial Developer. All Rights Reserved.
60890:  *
60890:  * Contributor(s):
60890:  *
60890:  * Alternatively, the contents of this file may be used under the terms of
60890:  * either the GNU General Public License Version 2 or later (the "GPL"), or
60890:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
60890:  * in which case the provisions of the GPL or the LGPL are applicable instead
60890:  * of those above. If you wish to allow use of your version of this file only
60890:  * under the terms of either the GPL or the LGPL, and not to allow others to
60890:  * use your version of this file under the terms of the MPL, indicate your
60890:  * decision by deleting the provisions above and replace them with the notice
60890:  * and other provisions required by the GPL or the LGPL. If you do not delete
60890:  * the provisions above, a recipient may use your version of this file under
60890:  * the terms of any one of the MPL, the GPL or the LGPL.
60890:  *
60890:  * ***** END LICENSE BLOCK ***** */
60890: 
60890: #include "prtypes.h"
74105: #include "nsString.h"
60890: 
60890: #ifndef __mozilla_widget_GfxDriverInfo_h__
60890: #define __mozilla_widget_GfxDriverInfo_h__
60890: 
81328: #define V(a,b,c,d) GFX_DRIVER_VERSION(a,b,c,d)
81328: 
84603: #define APPEND_TO_DRIVER_BLOCKLIST(os, vendor, devices, feature, featureStatus, driverComparator, driverVersion, suggestedVersion) \
84603:     mDriverInfo->AppendElement(GfxDriverInfo(os, vendor, devices, feature, featureStatus, driverComparator, driverVersion, suggestedVersion))
84603: #define APPEND_TO_DRIVER_BLOCKLIST2(os, vendor, devices, feature, featureStatus, driverComparator, driverVersion) \
84603:     mDriverInfo->AppendElement(GfxDriverInfo(os, vendor, devices, feature, featureStatus, driverComparator, driverVersion))
84603: 
60890: namespace mozilla {
60890: namespace widget {
60890: 
60890: enum OperatingSystem {
60890:   DRIVER_OS_UNKNOWN = 0,
60890:   DRIVER_OS_WINDOWS_2000,
60890:   DRIVER_OS_WINDOWS_XP,
60890:   DRIVER_OS_WINDOWS_SERVER_2003,
60890:   DRIVER_OS_WINDOWS_VISTA,
60890:   DRIVER_OS_WINDOWS_7,
60890:   DRIVER_OS_LINUX,
60890:   DRIVER_OS_OS_X_10_5,
60890:   DRIVER_OS_OS_X_10_6,
81328:   DRIVER_OS_OS_X_10_7,
81328:   DRIVER_OS_ANDROID,
60890:   DRIVER_OS_ALL
60890: };
60890: 
60890: enum VersionComparisonOp {
60890:   DRIVER_LESS_THAN,             // driver <  version
60890:   DRIVER_LESS_THAN_OR_EQUAL,    // driver <= version
60890:   DRIVER_GREATER_THAN,          // driver >  version
60890:   DRIVER_GREATER_THAN_OR_EQUAL, // driver >= version
60890:   DRIVER_EQUAL,                 // driver == version
60890:   DRIVER_NOT_EQUAL,             // driver != version
60890:   DRIVER_BETWEEN_EXCLUSIVE,     // driver > version && driver < versionMax
60890:   DRIVER_BETWEEN_INCLUSIVE,     // driver >= version && driver <= versionMax
60890:   DRIVER_BETWEEN_INCLUSIVE_START, // driver >= version && driver < versionMax
60890:   DRIVER_UNKNOWN_COMPARISON
60890: };
60890: 
84603: enum DeviceFamily {
84603:   IntelGMA500,
84603:   IntelGMA900,
84603:   IntelGMA950,
84603:   IntelGMA3150,
84603:   IntelGMAX3000,
84603:   IntelGMAX4500HD,
85902:   NvidiaBlockD3D9Layers
81328: };
81328: 
85902: /* A zero-terminated array of devices to match, or all devices */
85902: typedef PRUint32* GfxDeviceFamily;
60890: 
60890: struct GfxDriverInfo
60890: {
60893:   // If |ownDevices| is true, you are transferring ownership of the devices
60893:   // array, and it will be deleted when this GfxDriverInfo is destroyed.
85902:   GfxDriverInfo(OperatingSystem os, PRUint32 vendor, GfxDeviceFamily devices,
60893:                 PRInt32 feature, PRInt32 featureStatus, VersionComparisonOp op,
61594:                 PRUint64 driverVersion, const char *suggestedVersion = nsnull,
61594:                 bool ownDevices = false);
60893: 
60893:   GfxDriverInfo();
60893:   GfxDriverInfo(const GfxDriverInfo&);
60893:   ~GfxDriverInfo();
60893: 
60890:   OperatingSystem mOperatingSystem;
60890: 
85902:   PRUint32 mAdapterVendor;
85902:   static PRUint32 allAdapterVendors;
60890: 
85902:   GfxDeviceFamily mDevices;
85902:   static GfxDeviceFamily allDevices;
60890: 
60893:   // Whether the mDevices array should be deleted when this structure is
60893:   // deallocated. False by default.
60893:   bool mDeleteDevices;
60893: 
60890:   /* A feature from nsIGfxInfo, or all features */
60890:   PRInt32 mFeature;
60890:   static PRInt32 allFeatures;
60890: 
60890:   /* A feature status from nsIGfxInfo */
60890:   PRInt32 mFeatureStatus;
60890: 
60890:   VersionComparisonOp mComparisonOp;
60890: 
60890:   /* versions are assumed to be A.B.C.D packed as 0xAAAABBBBCCCCDDDD */
60890:   PRUint64 mDriverVersion;
60890:   PRUint64 mDriverVersionMax;
81328:   static PRUint64 allDriverVersions;
81328: 
85902:   static PRUint32 vendorIntel;
85902:   static PRUint32 vendorNVIDIA;
85902:   static PRUint32 vendorAMD;
85902:   static PRUint32 vendorATI;
85902: 
61594:   const char *mSuggestedVersion;
84603: 
85902:   static const GfxDeviceFamily GetDeviceFamily(DeviceFamily id);
60890: };
60890: 
60890: #define GFX_DRIVER_VERSION(a,b,c,d) \
60890:   ((PRUint64(a)<<48) | (PRUint64(b)<<32) | (PRUint64(c)<<16) | PRUint64(d))
60890: 
60890: inline bool
60890: ParseDriverVersion(nsAString& aVersion, PRUint64 *aNumericVersion)
60890: {
60890:   int a, b, c, d;
60890:   /* honestly, why do I even bother */
72255:   if (sscanf(NS_LossyConvertUTF16toASCII(aVersion).get(),
60890:              "%d.%d.%d.%d", &a, &b, &c, &d) != 4)
60890:     return false;
60890:   if (a < 0 || a > 0xffff) return false;
60890:   if (b < 0 || b > 0xffff) return false;
60890:   if (c < 0 || c > 0xffff) return false;
60890:   if (d < 0 || d > 0xffff) return false;
60890: 
60890:   *aNumericVersion = GFX_DRIVER_VERSION(a, b, c, d);
60890:   return true;
60890: }
60890: 
60925: }
60925: }
60890: 
60890: #endif /*__mozilla_widget_GfxDriverInfo_h__ */
